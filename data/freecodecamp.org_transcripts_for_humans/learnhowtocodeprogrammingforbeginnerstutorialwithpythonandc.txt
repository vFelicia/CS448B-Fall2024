With timestamps:

00:00 - If you are familiar with Jabrils, you know 
that he is one of the most entertaining  
00:04 - tech creators out there. YouTube, the company, 
asked him to create a full programming course.  
00:10 - And we are proud to be able to release the entire 
course as one video on the freeCodeCamp channel.  
00:18 - Yo guys, all my life, I was told programming 
was hard. It's only for the nerds. It takes so  
00:25 - much math, your grades aren't good enough. 
But having programmed now for 13 years,  
00:32 - I can confirm that all these assumptions 
are false. And that is why when YouTube  
00:37 - recently approached me with the opportunity 
to create an entry level programming course,  
00:41 - I knew this was my opportunity to try and 
correct some misconceptions that I'm sure  
00:45 - still preventing average people like you from 
diving into the amazing world of programming.  
00:51 - But first things first, we have to knock 
it off with this high wage medic field.  
00:57 - So you want to learn to code. I mean, I don't 
blame you for insurance computer science as the  
01:02 - second most valuable major to learn. Now, of 
course, you could just go to your school and  
01:07 - learn how to program or you could just learn 
how to program from a dunce like me that has no  
01:13 - traditional schooling background. Play. Wait, hold 
on before you click off this video and sign up  
01:18 - for a course at your local university. Let me at 
least try and win your hearts with a quick story.  
01:24 - She's It all started when I was about nine years 
old, my friend invited me over to play this new  
01:29 - game that I had never heard about. Yeah, man. 
It's crazy. You get to play Donkey Kong if you  
01:34 - want and fight against link Mario Pikachu. And 
sure enough, he was talking about the original  
01:48 - on the Nintendo 64. And like, I had always 
played video games. But there is something  
01:55 - about this game that from that day on had me 
obsessed with video games. I remember when my  
02:01 - family moved from Virginia to California in 2000 
the whole drive across the US I was designing my  
02:07 - own Smash Bros levels using a little pain 
in Notepad and when Christmas came around,  
02:12 - I asked my mother for a Nintendo 64 with Super 
Smash Brothers and I played that came for  
02:18 - countless hours absolutely captivated with the 
concept of it all I conict internal mascots all  
02:23 - together battling it out in a video game in 
three dimensions. How is something like this  
02:28 - even possible? This whole experience is what 
got me interested in wanting to understand more  
02:34 - about how video games work, no, not to learn how 
to program because I was still at that age while  
02:40 - still learning to read write in do basic maths. 
Again, he got me interested in wanting to learn  
02:46 - how games work. And remember this because this 
will become important later. It wasn't long after  
02:52 - that until I came across a little website 
called newgrounds.com. A place where people  
02:56 - like me were making simple low budget games and 
interactive movies. And I believe this truly to  
03:02 - be the experience that planted the seed in my head 
that making video games like the ones that I love  
03:07 - playing was actually possible for someone like 
me. So a little later in life when I came across  
03:13 - something called Game Maker, which advertises 
itself as you can start making games today,  
03:18 - no code required. And after weeks of begging my 
mother to buy it for me, she finally did. And man,  
03:26 - that was such a fun time in my life. I had 
absolutely no idea what I was doing. But  
03:32 - just doing the best that I could create logical 
statements that will make a computer do what I  
03:36 - want to do was enough to get me hooked. Feeling 
that sensation of being truly tired for the first  
03:42 - time. Because I stayed up all night trying to 
understand how to create an inventory system  
03:47 - is something I'll never forget. From that day 
forward. I continue to learn as much as I could,  
03:53 - asking all for help who are willing to help me 
learning more and more not about programming,  
03:59 - but about how games work. Because you see, 
understanding how games work is what initially  
04:05 - drew me to programming in the first place. And 
without even knowing it. That is what I would  
04:09 - always fall back on when times got rough during my 
coding adventures. And so moral of the story is,  
04:16 - I know what it's like to have an extreme urge 
to learn this stuff while being not exactly sure  
04:21 - where to start. So I know exactly what you're 
missing and how to get you on this side of the  
04:26 - fence. And thankfully, I've learned how to do 
all this stuff without traditional schooling,  
04:31 - which means you and I, we speak the same language. 
Now if that story didn't went over your heart,  
04:38 - you probably don't have one. No, I'm just kidding. 
I'm just kidding. But I'm sure that this will  
04:44 - this. Here's my friends are glar zargar is a 
highly intelligent programmer that has no joke  
04:49 - programmed, literal entire star systems solo using 
only a ti 80 calculator. And when I told zargar I  
04:57 - was gonna be making your programming course he 
Would not shut up about wanting to teach it for  
05:02 - me. Now zargar is a quintillion times smarter 
than I am. But why do you not want zoglair?  
05:07 - To teach this course? Well watch this zargar 
What is an array? Well, you see, we need a bit  
05:13 - of a backstory, because traditionally memory 
can only store information at a 32 bit rate,  
05:17 - which means recursion depth called the pull up on 
Moore's Law gained traction in 1996, we not only  
05:22 - obtain more power and memories, okay, sorry, 
you've proved my point. This audience didn't  
05:27 - understand any of that PhD programming slowing me 
It's time to go. And next time, remember, breathe.  
05:34 - Oh, man. So welcome to my course. In this 
series, you will leave with everything you  
05:40 - need to start programming. Yes, you've read the 
title, right? This is not clickbait. In fact, by  
05:46 - the end of this course, you will write your very 
first application utilizing everything that we  
05:50 - learned. But if you're to remember anything from 
this course, please let it be this. Ask yourself,  
05:56 - why are you here? What has drove you to want to 
learn everything you need to start programming?  
06:01 - Again, for me, it was to understand how games 
work, Whatever your reason may be, I encourage  
06:07 - you to write that reason in the comment section 
now. And if at any point throughout this course  
06:11 - or hell throughout anywhere in your programming 
adventures, things get tough, I want you to return  
06:16 - to that comment and be reminded on the reason why 
you started. Trust me, you got this, I promise,  
06:23 - it's a lot easier than you think. And I'm going 
to do the best I can on the communication side  
06:27 - of things to make it even easier for you on 
this course. I will see you on the next part.  
06:35 - Yes, it's so tight to see that you've clicked 
on this video and are interested in learning  
06:40 - some programming principles. Well, I'll tell you 
one thing, if you want to become a programmer,  
06:45 - you aren't going to get very far without this 
thing. This is called an ID. There are many,  
06:51 - many, many different types of IDs, some from large 
organizations that you've definitely heard of like  
06:58 - Visual Studio from Microsoft Xcode from Apple and 
Android Studio from Google. But there are also  
07:04 - IDs from various other organizations as well. 
Pie chart from JetBrains Eclipse from Eclipse  
07:10 - sublime from a couple of dudes, Adam from GitHub, 
just to name a few. And as you probably guessed,  
07:17 - today's lesson is all about ID. Hey, what does it 
mean? Duh, of course, how could I forget to cover  
07:27 - that Id E stands for integrated development 
environment. And just as the name suggests,  
07:33 - it's a digital environment used to develop games, 
software, hardware, just about anything with code  
07:40 - really, that offers integration or control over 
many aspects of development from debugging,  
07:47 - which means adding removing or changing code that 
prevents your program from running as intended  
07:52 - all the way to compiling, which roughly means 
taking your code and turning it into something  
07:57 - that computers can understand. Some ID support 
just a single language, for example, IDL, which  
08:03 - is an ID that is bundled with the language Python 
when you download it, and it only supports Python,  
08:09 - but IDs like Xcode from Apple supports a 
bunch of different languages like C, c++,  
08:15 - Java, Python, the list goes on. But as you see, 
my point here is that there are many different  
08:21 - options when it comes to choosing your ID. 
And honestly, it can be a bit intimidating.  
08:26 - But again, if you want to start 
programming you need in it later,  
08:31 - when you get more experience under your belt, you 
can use Microsoft Word to write your programs,  
08:35 - if you really wanted to the whole, I would not 
recommend this, no matter how much experience  
08:40 - you get, you'll be wasting a ton of time. And 
that is what it is a digital environment that  
08:46 - is a various central parts of programming. 
Where do you want to code, some games,  
08:50 - software, hardware, you name it, and it is 
your best friend to help ensuring your success.  
08:58 - It's now time to install your first ID. Are you 
ready? Let's do it. And heads up. There are many  
09:04 - different IDs out there. But instead of walking 
you through each and every ID, which would be a  
09:09 - very boring lecture to sit through, you're instead 
going to get my bias and I'm going to show you how  
09:13 - to install my two favorite IDs Microsoft Visual 
Studio, which should interest you if you want to  
09:18 - get into Windows development or want to make games 
using a popular engine called unity. And we'll  
09:23 - also be installing Microsoft Visual Studio code, 
which should interest you if you're interested in  
09:27 - more general programming or data science, as well 
as a slew of other tasks. And yes, they both have  
09:34 - Microsoft Visual Studio in their name. And yes, 
they are two separate IDs. Now, let's get started.  
09:40 - Alright, so the first thing you're going 
to want to do is open up your browser.  
09:44 - I'm going with Google Chrome as my browser. You 
can choose whatever you want this far, it's not  
09:49 - really important, but you want to search Visual 
Studio in the search bar and then click downloads,  
09:55 - you'll see visual studio.microsoft.com Click 
downloads and it'll take you straight to The page  
10:00 - that you want to be on. So as you see, we have 
here a Visual Studio 2019, the Community Edition,  
10:06 - let's hit free download there. And then you 
also have your Visual Studio code, it will  
10:11 - hold on one second, you'll see that it pops up 
down here, lets you know that it's downloading.  
10:16 - And then I'm gonna go back and then I'm gonna 
click Visual Studio code, free download,  
10:21 - this is the second ID we need. And it will pop 
up down here, let you know that it's downloading.  
10:26 - And just wait for that to download. Alright, once 
those are done downloading, you can either click  
10:32 - on them from here in Google Chrome, if that's what 
you're using, and they will start to install it.  
10:37 - But if you don't have Google Chrome, then 
you're going to want to find whatever your  
10:41 - default Downloads folder is, in most cases, it 
should be downloads in Windows CE downloads. But  
10:52 - if not, you're going to want to find that 
so that you can install the IDs. So first,  
10:58 - let's install Visual Studio code. I'm just gonna 
double click on this. And you'll see that we get a  
11:04 - window here that says Welcome to the windows 
studio, code wizard, setup wizard. And this part's  
11:10 - really easy. It's just like any other installation 
you've ever done, you just hit next and you agree,  
11:15 - read if you want. Hit next. And then here, you 
want to leave this at the default location,  
11:21 - which is like see, somewhere somewhere Program 
Files, likely. But because I already have this  
11:27 - installed on my system, I'm going to install 
this in a very special location, so it doesn't  
11:31 - mess with our presets. So yeah, just leave that 
how that is hit next, and then just hit next. And  
11:40 - here, I would recommend that you check open with 
code and on both of them. And also make sure that  
11:47 - add the path is checked as well. And what these 
to do here is allows you for like let's say you  
11:53 - have some Python scripts, and instead of having 
to open up first Visual Studio code, and then  
11:59 - hitting file and then open and searching for 
it, you can just go to like, let's say one  
12:03 - of these are a Python script, you can just 
right click on it. And then you'll have this  
12:07 - available here where it's open with code. 
So it will just open that file directly in  
12:12 - Visual Studio code is very convenient. You can 
also do that with directories in case you have a  
12:17 - a file, I'm sorry, you have a folder with a lot of 
Python scripts, you can just right click somewhere  
12:22 - in the folder, hit open with code. Very, very 
useful, I would, I would definitely recommend  
12:27 - checking both of these, and then just hit next. 
Now I'm going to go back and remove these because  
12:33 - again, I don't want to mess up my presets. But 
this is how your years should look with of course,  
12:38 - this the next destination being C C program 
files, whatever, whatever. And then after that,  
12:43 - just click install, install, and then you can 
see that it's going to install. So I'm going to  
12:49 - take couple seconds, I'm going to take terribly 
long, and bada boom, there you have it, Visual  
12:53 - Studio code has officially been installed. We're 
gonna hit finish and launch vinje Visual Studio  
12:59 - code. I'm going to bring this Oops, wrong window. 
Going to bring Visual Studio code over here. This  
13:04 - is what it looks like. Now before we get started, 
there's a couple of things that you want to do,  
13:08 - you do definitely want to add Python right here. 
So click Install. In fact, I'm going to show you  
13:13 - how to do it traditionally just search Python 
and then install just Python. This allows you to  
13:22 - use Python with Visual Studio code. And there 
are a few options to do that. But this one is  
13:27 - straight from Microsoft. So just install 
the top one that's just called Python. And  
13:31 - another extension that we're going to need is 
called code runner, just searched code runner,  
13:37 - open the extensions and download the first one is 
going to allow us to run our Python scripts within  
13:43 - Visual Studio code without having to leave the ID. 
It's very nice. Alright, and there you have it,  
13:48 - Visual Studio code is installed. If you want to do 
new file, just go to File, top new file and bada  
13:53 - boom. If you want to save an extension use simply 
save the file anywhere, we'll just do documents,  
13:59 - for example, and just do like my, my file I 
don't know.and.pi will get you a Python script,  
14:07 - hit save. And now it's recognized as a Python 
script. And if you get this pop up here that tells  
14:12 - us that Python is installed. Visual Studio code is 
often really good with letting you know like what  
14:17 - you need and what you well not so much don't need 
but really Google with let me know what you need.  
14:23 - So let's hit download here is in a pop up 
window window, we're going to want to download  
14:28 - python 3.7. And then I'm just going to hit what 
run odds it's save open folder here. And I'm just  
14:37 - going to double click that to run it. Next all 
you want to do is just hit Add Python 3.7 the path  
14:44 - and then just click install now. And it's 
just going to install now. Give a little time  
14:51 - and Python should be installed. And just like that 
setup was successful. So back in our Downloads  
14:57 - folder. I'm just going to double click that The 
Visual Studio installer. And I'm not sure what  
15:04 - you're seeing right now, but it's asking me to 
type in my password. So I'm going to do that.  
15:09 - Let's see, hold on. No, it's an older pin, sorry. 
All right, sorry, one black there for a second.  
15:19 - And then we have Visual Studio 
installer, just hit Continue.  
15:24 - And it's going to start downloading and 
installing some stuff shouldn't take too long,  
15:29 - then you should see something like this pop up. 
And they're going to give you a few options,  
15:34 - you can ignore most of them, maybe come back to 
him later when you get a bit more experience. But  
15:39 - all you really need is this one on here. dotnet 
desktop development, because we're looking for  
15:44 - is the console applications using C sharp, so just 
click that one. And then you just click install,  
15:53 - and see install on system drives recommended. 
Again, I have this already installed. So I'm going  
15:59 - to place this in a very special location, but 
definitely placed this installed on your system  
16:04 - drive where it's recommended. So I'm gonna hit 
OK. And you get this that pops up, thank you for  
16:12 - installing, take a survey now. And this will start 
installing, it's probably going to take a little  
16:19 - while. But once it's done, you won't have much 
to worry about. All right, and once it's at 100%,  
16:25 - give it a second. It's kind of a start 
automatically, because we had that checked. And  
16:32 - bada boom, now you have welcome connect all 
your developer services, developer services.  
16:39 - Just hit not now maybe later, at some point 
to force you to make an account anyway. So  
16:44 - just for now, we'll do not now start Microsoft 
Visual Studio, preparing your first time use.  
16:51 - And here we are. Now if you want to create 
a new project, you simply just hit that hit  
16:56 - create a new project. And then we'll ask 
you what type of projects you want to make.  
17:01 - We're just going to do a simple c console project 
and C sharp here, and then hit next. And you can  
17:08 - name it, let's just name it all just leave how 
it is concert project one is fine. And create  
17:16 - console app sorry. I don't know how to 
read. Give that a second, and bada bing,  
17:23 - it'll start up and now you're officially in. And 
that's pretty much all you have to do for C sharp.  
17:31 - So if you're on a program in C sharp and or 
Python, it's important to understand their  
17:36 - syntax. But first off what is syntax? Well, 
syntax in relation to programming, it's pretty  
17:42 - much a set of rules that must be followed in 
order of operation that your code must abide by  
17:47 - a process that must be respected if you want your 
program to run. And so today, we're gonna look at  
17:53 - the syntax for two different languages and see 
the differences between them, because I think  
17:58 - it could be really helpful for you to see how they 
compare and contrast. And plus, you'll pretty much  
18:02 - learn two languages at once. And so on the left 
is language C sharp using the IE Visual Studio,  
18:08 - which should interest you if you don't do any 
windows development or want to make games using a  
18:12 - popular game engine called unity. And on the right 
is language Python three using the IEEE Visual  
18:17 - Studio code, which should interest you if you want 
to get into general programming or data science.  
18:22 - Alright, so here I have two brand new console 
projects. So the first thing we're looking at  
18:26 - today is how both languages go about utilizing 
data types. Now data types by themselves  
18:32 - are useless, you have to assign a data type to a 
variable. Now to get started in C sharp over on  
18:38 - the left, I'm just going to get rid of these two 
lines because I no longer need them that comes  
18:41 - stock with every new project. And then we're 
going to use a Boolean as our example today.  
18:48 - Now a Boolean is a type of data that can only be 
one of two types. It's either true, or its false.  
18:54 - So let's initialize a Boolean in C sharp. Let's 
call it do it. And then we're going to assign  
19:02 - true to it. So do it equals true. Now this is all 
great and all do it is a Boolean that we assigned  
19:09 - to be true. However, C sharp will not recognize 
it as a Boolean unless you cast its data type. And  
19:16 - in C sharp, you simply cast the data type by going 
before the variable which again, a variable has to  
19:22 - do it before it just type whatever the data type 
is. So this is bool, which is short for Boolean  
19:28 - bool do it equals true so your error goes away and 
everything checks out. And this very syntax goes  
19:35 - for every variable. For example, if you want to 
initialize a string variable, you have to cast it.  
19:41 - So I'm gonna say this is a string. I'm gonna call 
str short for string, and then I'm going to sign  
19:48 - hello to it. For example, you have to do 
this for every single variable. However,  
19:54 - there's a bit of a catch. So I'm just getting 
rid of this line because I don't need anymore.  
19:59 - You only Have to initialize your variables 
on their first use. So like, if I wanted to  
20:04 - change the duvet Boolean variable, I just have to 
come down here. And I need to do it equals false,  
20:10 - for example, and that's because we're on this line 
right here. The program knows what the data type  
20:18 - for the do it variable is, he knows that it's a 
bool. So I don't have to do it again. In fact,  
20:23 - if I try and do it again, you'll see that I 
get an error, this error is pretty much just  
20:29 - telling me that like, I can't create the same 
variable twice, essentially. So just remember,  
20:34 - you only have to initialize on the first use. And 
this convention is for every single data type. So  
20:40 - it's Boolean strings, that's integers as floats, 
every single one. Now over in Python, things are  
20:46 - a lot different. So let's say we want to do the 
same example always want to initialize a boolean  
20:51 - variable? Well, in Python, all you have to do is 
just write the name of a variable and then assign  
20:55 - whatever value you want to it. So in this case, 
we're gonna assign true to it. And there we go,  
21:01 - we just initialize a boolean variable. That's 
right. In Python, you don't have to cast your  
21:06 - variables, you don't have to cast the data 
type of what you want your variable to be,  
21:10 - like you do in C sharp. And this benefit comes 
from the fact that Python is what's called an  
21:15 - interpreted language. And what that means is, 
all you have to do is create a variable and  
21:20 - then assign some value to it. And depending 
on what value you assign to your variable,  
21:25 - Python will interpret what type of data type 
that variable should have. And with this syntax,  
21:31 - it enables a lot of flexibility with the Python 
language. It's one of the reasons why so many  
21:36 - people love Python, because it's kind of like a 
breath of fresh air, as far as computer languages  
21:41 - are concerned. And it's one of the reasons why 
a lot of developers that are into data science  
21:46 - when I use Python, because as you can see, you 
can save a lot of time not having to type, you  
21:51 - know that the data type over and over and over for 
your variables. However, the flexibility doesn't  
21:56 - stop there. I'm going to simply print out What do 
it equals, like, so save it, hit the play button,  
22:05 - and you'll see that do it equals true, obviously, 
is what you expected. But check this out. If we  
22:11 - want to reassign it to be false. For example, 
we just come down and say do it equals false,  
22:17 - save, hit the play button, and we have a false 
value. But this is where it gets really cool. So  
22:24 - currently, as you understand it, do it is a 
boolean variable. But we can do do it equals  
22:33 - 13,037, for example. So first we assign true 
and then we change the mind sign to false and  
22:39 - then we change the mind again, and assign it to 
1337. When I hit play, no errors, it just prints  
22:45 - out that is 1337. The last thing we assigned it 
to, which is crazy flexibility over in C sharp,  
22:51 - we simply cannot do that if we want to change the 
do it to be a like an integer, for example, we're  
22:59 - simply just going to get an error saying that, you 
know, you cannot convert an integer into a bool.  
23:05 - Once a variable has its data type, it cannot be 
changed. And this is probably one of the biggest  
23:11 - differences between C sharp and Python at the fact 
that how they go about casting their data types.  
23:17 - Next, I want to get into command terminations 
and the differences between C sharp and Python.  
23:22 - First things first, what is a command? Well, for 
example, this bit of code here is a command. And  
23:29 - what it's saying is take our dude variable and 
assign a false value to it. Same with up here,  
23:34 - take our dude variable, assign a true value to 
it, and also cast it as a Boolean. These are  
23:40 - examples of commands. So on a very low level, the 
way a computer works is that it needs to know when  
23:45 - these commands begin and in so it knows what it 
needs to process. And so that is where a command  
23:51 - termination comes into play. We need something to 
be able to separate all these different commands.  
23:57 - And in C sharp, the command termination is a semi 
colon. These semi colons right here is what you  
24:04 - have to add to the end of every single command 
to be able to tell the computer that hey, this  
24:09 - command is over, you can process this before you 
processed the next one. I'm grossly simplifying it  
24:15 - but that's how it works on the higher level. And 
so with that in C sharp so long as you have a semi  
24:20 - colon separating your previous command for your 
next one, you can place your commands anywhere you  
24:24 - want. For example, I can move this, this command 
right here to be right after the previous command.  
24:31 - No errors, no issues, I can put it back on 
the next line and hit Tab a bunch of times,  
24:36 - no issues no errors. You have a lot of flexibility 
using the semi colon as a command termination  
24:45 - C sharp has a lot of flexibility in this regard 
using the semi colon as a command termination. Now  
24:50 - over in Python, they differ here a lot as well. 
So you might look at C sharp and see okay, semi  
24:56 - colon that makes sense as a command termination 
with Python. What How do they do that? Well, the  
25:01 - answer is quite simple, actually, instead of using 
semi colons, they just use a line break. So if you  
25:07 - want to separate two commands, you just put it on 
a new line. Easy as that, in fact, to demonstrate,  
25:12 - we can't do what we did over here in C sharp. If 
we were to put these right next to each other,  
25:18 - and then save it, you'll see that in the problems 
tab, it says that we have invalid syntax because  
25:24 - you can't, it doesn't know what's going on here. 
Why is there a value and a variable afternoon,  
25:31 - it just doesn't understand how ever Python kind 
of thought of all the stops, you can simply just  
25:41 - add a semi colon and Wallah, it will now act as a 
command termination. In fact, just to prove that,  
25:50 - it does what I say it does, I'm going to bring 
them all on the same line to command terminations.  
25:56 - And then I'm going to press play and show 
you that it runs it prints out 1337. So yeah,  
26:02 - in this regard, this makes Python really really 
flexible. Because you can use semi colons if you  
26:07 - want to. However, you'll find that most developers 
don't, because it's often a lot faster to just use  
26:13 - the new line command termination instead of the 
semi colons. And Allow me to demonstrate that. So  
26:19 - I'm just going to restore both scripts to back how 
they were, this is a new line. This is a new line.  
26:27 - This to do this. Alright, so now they're back 
to their back restored. So the reason why you  
26:34 - can save a lot of time is because if you 
look at the two different scripts, they  
26:38 - kind of both just use a new line termination 
anyway, even if you were to look at more complex  
26:43 - C sharp scripts, oftentimes you'll find that over 
90% of a C sharp script is going to use like a new  
26:50 - line as a command termination anyway. So you're 
actually saving a lot of time without having to  
26:56 - type you know, semi colon, semi colon, semi colon, 
and you'll see that it turns red in this context,  
27:02 - because it's letting you know that it's pretty 
much useless. Like we know that you want to  
27:06 - terminate this command by going to new line. And 
then if we were to hit backspace to turns white,  
27:12 - because like, okay, now it's in use, we 
understand what you're trying to do here. But  
27:16 - please know, this is a feature that comes with the 
Visual Studio Code ID. So take the information as  
27:22 - you want, but do know that most Python developers 
will probably look at you sideways if they see any  
27:27 - semi colons in your in your code. So yeah, there 
are a couple of syntax differences there. Next, I  
27:34 - want to go over how they differ in code blocking. 
So first question, what is code blocking? Well,  
27:41 - I'm gonna come over here in C sharp and give 
you a quick example. First and foremost, the  
27:45 - way that you indicate a block of code is to use 
these braces. Anything that goes inside of these  
27:52 - braces is a block of code. So the general syntax, 
you don't have to follow this, but most developers  
27:59 - will put a block of code, one line in the middle 
is all the code that will be ran within that  
28:04 - block of code, and then a brace at the end. And 
so here, we can like just move our do it equals  
28:11 - false into here, for example. And of course, 
get rid of this one because we don't need it.  
28:16 - And just like that, we have a block of code in 
C sharp, however, a block of code like this is  
28:21 - pretty useless to add because it's going to be ran 
regardless. However, what blocking off code allows  
28:28 - you to do is you can add things like for example, 
an if statement. So we can say if do it, then set  
28:37 - duals equals false. And this block of code will 
only run if do it equals true. And I want to prove  
28:45 - this to you. So I'm going to come up here, and 
I'm going to write console, dot write line, this  
28:52 - is going to print anything that we want to 
the console. And I'm going to say checking.  
28:59 - And then I'm going to come down here and 
then do it again. I'm gonna say console  
29:07 - dot write, or wait, what is that? console, dot 
write line, there we go. Um, okay, set to false.  
29:21 - Right. And then at the end, we need a console 
dot read key. This just makes sure that the  
29:28 - terminal does not close when we hit the start 
button, which is up here and I'm going to press  
29:33 - boom, terminals off screen on, bring it up, 
and there we go. You see that it goes checking,  
29:39 - and then it sets it to false. But you are not 
convinced because we blocked out this code and  
29:45 - it's still ran. So I'm going to change do a T 
equals false and watch what happens when I hit  
29:51 - the start button and bring the terminal over 
here. It just says checking because, again,  
29:58 - do it equals false And we said if do it, which 
is another way of saying if do it equals true,  
30:04 - then run this block of code. And at the fact that 
do it equals false, this block goat has never ran.  
30:11 - And that's code blocking, you'll find that 
code blocking is very important and very useful  
30:16 - for all things programming. But that's how you 
do it in C sharp. Now over in Python, it's again,  
30:23 - a lot different, I'm going to get rid of these 
two lines just to make it a lot less confusing.  
30:27 - And so everything under the condition and indented 
will be counted as that block of code. Alright,  
30:33 - and I'm going to run that, and you will see that 
we get checking set to false. And then we also had  
30:39 - an extra print down here, that our move next time, 
but that also prints out false as well. And again,  
30:44 - you're not convinced because this block of code 
is run anyway. So we're going to set this value  
30:49 - to be false. And then I'm also going to remove 
this just so it's not confusing when it prints,  
30:54 - and then save, hit play and only checking. And 
so that is how you do code blocking in Python.  
31:01 - And so as you can see, code blocking is another 
syntax as C sharp and Python have a lot of  
31:07 - differences between. But it's very important 
to know how to code walk in both languages,  
31:11 - because you'll be using it quite a lot for for 
loops for if statements for methods, functions,  
31:17 - all types of stuff. And the very last thing that 
I want to go over today is what's called variable  
31:22 - scoping. So what is variable scoping? Well, with 
the introduction to code blocking, that's this  
31:29 - right here, a block of code. Remember, this is 
a block of code as well, well, more right here,  
31:34 - this is a block of code. But with the introduction 
to these blocks of code, now you have to worry  
31:39 - about the scope of your variables. So let me give 
you a quick example. So let's say inside of this  
31:46 - block of code, here, we want to initialize a new 
variable. Let's initialize just to do an integer,  
31:52 - we'll call it a just for an example. And then 
we'll assign a zero value to it right? Well,  
31:59 - because we initialize this integer 
variable within this block of code,  
32:03 - it cannot be used outside of this block of code. 
And to demonstrate, I'm going to come down here,  
32:09 - and I'm going to do outside of the block of code, 
console dot write line, oops, bright line. A,  
32:18 - for example. And you can see what happens is it 
says that this variable does not exist. What do  
32:24 - you mean, it doesn't exist, so we initialize it 
here? Well, again, like I said, this variable,  
32:29 - because we initialize it within this block 
of code cannot leave this block of code.  
32:35 - If we wanted to leave this block of 
code, we have to do it like this,  
32:38 - we come out here, oops, we come out here and we 
initialize int a equals to say, five, for example.  
32:45 - And then inside of this block of code, we 
just change, we just reassign it back to zero.  
32:51 - So because it's it's initialized within this block 
of code, which is our main function, we can use it  
32:59 - outside of this block of code. And that is 
variable scoping. In a nutshell, over in C sharp,  
33:04 - this syntax is no different. So if we were to come 
inside this block of code and initialize an A,  
33:10 - assign a zero to that, and then come outside 
of this block of code and try and print that a  
33:16 - variable, you'll see that when we save and hit 
the play button, that we get an error syntax  
33:24 - error saying that this a the variable is not 
defined. And again, if we want to get around this,  
33:30 - we have to change the scope of a variable. So 
come out to the regular indentation, and just  
33:37 - do a equals five, for example. And then when we 
get into this scope, we're simply just going to  
33:42 - reassign it, change it to zero, and then we'll 
be able to print it and approve that I hit save,  
33:47 - and then I hit play. And there you go, checking 
five. And again, just want to make sure I cover  
33:52 - all bases. The reason why this prints out checking 
five is because we said do it equals false. And if  
33:58 - do it is true, then this bytecode will be ran, but 
because do it as false as both code is not ran.  
34:03 - So it just skips this entire thing. And it just 
prints out five, which is what we assigned a to.  
34:09 - And that's pretty much it. That is everything that 
you need to notice our programming in regards to  
34:15 - the syntax. And so in conclusion, even though C 
sharp and Python have differences in their syntax,  
34:21 - as you can see, the differences are small enough 
to be able to remember the important stuff,  
34:26 - you have to cast data types in C sharp Python, 
you do not in C sharp, you must use semicolons to  
34:31 - terminate commands. Python uses new line breaks, 
and C sharp uses curly braces for co blocking  
34:37 - while Python uses indentation. Of course, 
there are more differences in their syntax.  
34:42 - But these are the major differences 
that often confuse the developers.  
34:47 - All right. All right. All right. It's that time to 
code your first program. Are you ready to do this  
34:55 - Get set, let's go. So we're going to make a 
simple MATLAB application. In the console,  
35:00 - because it's simple, doesn't require you to 
install a million things and is something you  
35:05 - can actually show off to your friends and family. 
Now, before we jump into this first things, first,  
35:11 - the code to this project is in the description. 
Also, I think it's important to let you know that  
35:15 - this lesson is kind of acting as a placement 
test. If you're just beginning to program,  
35:21 - you might struggle with understanding what's 
going on in the code. And if that is you, well,  
35:26 - that's okay. Because I structure this lesson 
to be just a little bit difficult to follow.  
35:31 - Once able to code a project like this by yourself, 
then, I don't think there's much this course can  
35:36 - teach you at that point. But I encourage you to 
watch the whole thing and follow along. Anyway.  
35:40 - Again, the code is in the description. So you 
can just refer to that and follow along with  
35:45 - me. Because if you do the following, you will get 
the greatest inspiration to become a programmer.  
35:50 - After you struggle, I encourage you to go through 
the rest of my course LinkedIn description,  
35:55 - or just check out the lessons on the stuff that 
wasn't easy to follow. I have over 20 videos teach  
35:59 - you how to code and those videos go in depth 
about their respective topics. Then, when you  
36:05 - feel comfortable, come back to this lesson and see 
how will you do a second or third time coding your  
36:09 - first project. And trust me, when you ever look 
at how much you didn't understand in comparison  
36:14 - to the next time you try and code your first 
project, you will not want to stop programming  
36:19 - having program for 15 years, I can tell you 
that feeling pretty much summarizes programming  
36:24 - very well, it can become quite addicting to 
chase but in addiction in the best way possible.  
36:31 - However, if this is your second or third or more 
times coding your first project, I encourage you  
36:36 - to not copy the code verbatim. But maybe create 
your own story or at if statements and functions  
36:41 - this mad labs game who knows your experimentation 
could start a whole new programming trend. Lastly,  
36:47 - if you want to share your project with me, feel 
free to tweet it to me and I'd be happy to reply  
36:51 - back to you. But now with all that stuff out 
the way, let's get started on coding your first  
36:55 - program. And we're going to make his application 
in two different languages because I think it can  
37:00 - be really helpful for you to see how they compare 
and contrast. And plus, you'll pretty much learn  
37:05 - two languages at once. So on the left is the 
language C sharp using the ID Visual Studio,  
37:10 - which should interest you if you want to do 
windows development, or if you want to make  
37:15 - games using one of the most popular game engines 
called unity. And on the right is the language  
37:19 - Python three using the ID Visual Studio code 
which should interest you if you want to get into  
37:24 - more general programming or data science. Alright, 
let's actually begin writing our Mad Libs program.  
37:30 - Now before I write any project or program or 
prototype, what have you, I usually like to  
37:36 - start what I like to call a skeleton and what a 
skeleton is, it's pretty much just like a step  
37:42 - by step process in which you can expect to have 
to do in order to complete the actual project.  
37:49 - And because this is a smaller, simpler program, we 
can simply do this by writing out a few comments.  
37:55 - So first, I will comment out initialize variables, 
and it just stands for initialize is shorter cork  
38:03 - at the right then after that simply gets 
input from user. So we're gonna initialize  
38:11 - the variables. And then we're going to ask the 
user to fill out the data for those variables.  
38:16 - And then after that, we need to 
initialize whoops, and knit story.  
38:24 - And then after we initialize our story, 
then we simply just need to print our story.  
38:29 - And for parts, our program will be done. 
Simple, easy and to the point. And now  
38:34 - let's just do that same thing in Python, do 
a comment, and then a net variables and then  
38:42 - get oops get input from user. And then after that, 
we're going to end our story. And then after that,  
38:53 - we need to print story. Easy as that. Next 
thing I'll do real quick is just beautify our  
39:01 - script. I'm just going to add spaces between 
all the comments, it just helps me read it  
39:07 - and understand the different processes that 
need to take place. Perfect. Alright, moving  
39:12 - on. Now before we can do anything over here, 
C sharp on the left, we kind of need our story  
39:19 - because everything depends on our story, really. 
So I'm going to paste in a quote from the matrix.  
39:26 - I'm just gonna highlight all this real quick 
and hit Tab a couple times to beautify it,  
39:30 - make it easier for me to read. But you are welcome 
to make up your own story. You're welcome to grab  
39:35 - anything from the internet. Whatever you want to 
use as your Mad Libs story is completely fine. I  
39:39 - even put the story in the description if you 
want to use it as well. But there we have it.  
39:45 - This is the story they want to use for C sharp. 
And now I'm going to do the same for Python.  
39:51 - just paste in that story string, same exact thing 
just in a Python format. Next thing I'm going to  
39:57 - do is simply just print out story. And in C sharp, 
you're going to want to do console dot write line.  
40:05 - And then ad lib story, Mad Libs story, boom, semi 
colon, done. And in Python, we're going to want to  
40:16 - wait, I'm gonna change this to say Madlib 
story just so that it's the same mother story  
40:23 - perfect. And in Python, it's really simple. You 
simply just type prints, and then Madlib story,  
40:31 - boom. So next what we want to do is get input 
from user. But we can't really get any input  
40:38 - from the user because we have no variables 
to pass to the user to collect data from.  
40:44 - And so what our next actual step is, we have to 
initialize our variable so that we can pass it  
40:48 - to the user. And to initialize our variables. 
Well, we need to turn our Mad Libs story into  
40:53 - a bunch of variables. And we can do that quite 
simply, if you're at all familiar with the game,  
40:59 - Mad Libs thing, you know, the whole fun of the 
game is that you have some story or some text  
41:04 - or something like that. And you replace all 
the verbs, the nouns, the adjectives, etc,  
41:09 - with words that are similar context, hopefully, 
but not exactly. And it makes for like,  
41:15 - really funny, interesting stories. And so what 
we want to do is want to scroll through our text  
41:21 - and essentially replace verbs, nouns, adjectives, 
with variables, and the first one I'm going to do  
41:29 - is the matrix, I'm just going to put curly braces 
around this, oh, yeah, I need to make this into  
41:37 - an interpolated string. I'm gonna do that for all 
of these strings. And this needs to be a variable,  
41:45 - which is one word, the matrix boom. And so 
I'm simply going to come to a new variables,  
41:52 - I'm going to initialize the string data type, 
and put the matrix in there. And now the matrix  
42:00 - is a variable that we can ask the user for, 
and they can change to whatever they want.  
42:06 - And I kind of did this ahead of time, I went 
through the text and picked a lotta verbs, nouns,  
42:12 - adjectives that I thought would be interesting to 
change. So I'm just gonna go through and do that,  
42:17 - for example, system is another one, I'm going to 
change system to variables can add that to this  
42:23 - list. And I'm just going to do that for the entire 
text. I'm going to skip it though, cuz it's not  
42:28 - that fun to watch. Alright, so I went through my 
story and replaced all of the interesting verbs,  
42:34 - nouns, adjectives, etc, with variables so that 
we can pass that to the user, and they can put  
42:39 - whatever words they want there. But now I want 
to show you your first optimization trick.  
42:45 - If you look at this line here, the sentence 
as businessmen, teachers, lawyers, carpenters,  
42:51 - these are all professions, that's what that's what 
they all have in common. And at the fact that they  
42:55 - go back to back to back, we can do is really cool 
trick. Well, we will initialize a string array,  
43:00 - and we'll call them profession. And then back 
up to initialize equals new string array of how  
43:10 - many are there 1234, a four. And so now we can 
do this really cool trick where we come in here,  
43:17 - and just make this an interpolated string. 
And overload case that just for good practice,  
43:25 - businessmen, and Oops, sorry, that's not 
what I want to do, I want to do profession,  
43:31 - zero, because we're gonna do a for loop, which 
I'll get into in a second. I'm gonna copy this,  
43:38 - because I'm lazy. And I'm going to paste this 
here, and increment it, and then we'll paste  
43:45 - this here. And then I'm going to increment 
it to two. And then the final profession,  
43:52 - increments this to three, already start on zero, 
simple into the point. And so now what we can  
43:59 - do is when we get input from user, since there 
are four professions, they're all back to back,  
44:03 - we can simply just write a simple for loop and ask 
the user for four different different professions,  
44:09 - one after another. And I'll show you how to do 
that in a bit. But there's also two additives  
44:15 - down here that also do this with so I'm just 
going to initialize a new string array, call  
44:20 - this additive AJ, DJ sharp additive equals new 
string array of two, there's only two in there.  
44:29 - And so here, turn this into an interpolated 
stream, is gonna be a D j, zero.  
44:35 - And I'm gonna copy this because I am lazy 
in this is the second adjective. I'm just  
44:41 - going to increment. And there you have 
it, we now have our two string arrays.  
44:47 - And final note, if you look down here, you'll see 
a bunch of errors for unassigned local variables.  
44:53 - And that's only because we have not assigned these 
variables to anything yet. I believe they're there  
44:57 - no at the moment, which is Your program does not 
like but we will be assigning the variables when  
45:04 - we get the input from user. And over in Python 
on the right, it's a lot of the same. First,  
45:09 - let's turn all of our strings into interpolated 
strings. And it's just like C sharp, except  
45:16 - it's an F instead of $1 sign. So I'm just gonna 
add an F to all the strings. Perfect. And let's  
45:25 - pop out this variable right here, the matrix, or 
rather, let's turn this into a variable called  
45:31 - the matrix. And then let's initialize it up here 
and do the matrix equals empty string. All right,  
45:42 - and then let's do system next interpolated string 
system. And then system like this paste equals  
45:51 - empty string. And I'm gonna go through 
and do this for all the interesting verbs,  
45:56 - adjectives and nouns in this text. Alright, so 
I pulled out all the interesting words and turn  
46:01 - them into variables. And now I'm going to show you 
how to do that optimization trick over in Python.  
46:06 - So again, we have these four professions, and we 
want to turn that into a string array. And to do  
46:11 - that in Python was going to do profession equals 
brackets, and therefore rooms are going to empty  
46:19 - string, empty string, empty string, empty 
string for empty strings. And there we have  
46:26 - a, an array with four strings in it, that we 
can pass the user and then they can change the  
46:32 - beer or whatever they want. And it's the same 
as C sharp doesn't use interpolated string,  
46:38 - professions zero, I'm lazy, I'm a copy 
this and paste it here, increment it,  
46:47 - paste it here, incremented pasted here, increment 
it, oops, yeah, it is three. And then we also want  
46:58 - our adjective array, which is only two. 
So I'm gonna do brackets, empty string,  
47:04 - and then another empty string to empty strings. 
And then that goes here, which is a edge,  
47:14 - zero, I'm going to copy this because I'm lazy, 
and then paste it on dependent, and then increment  
47:21 - that, and bada boom, now the scripts are 
in the same exact state. For All right,  
47:29 - the final stretch, let's get that input from the 
user. So first of all, there are two functions  
47:38 - that we need to familiarize herself with. One 
we've already went over, and that is console  
47:45 - dot write line. This is where we're going 
to use to print something to the console.  
47:55 - And the second one is console dot read 
line. This is where we're going to use Well,  
48:02 - there's no input parameters. But this is going 
to return to us a string that we can set our  
48:08 - string variables to. And this comes whatever the 
user types into the console presses enter. That's  
48:15 - what's going to be returned with console dot 
read line. So for example, we can do the matrix  
48:22 - equals console dot readline. Easy as that. 
So let's get started. I kind of ahead of time  
48:29 - crafted a little interesting story that the user 
can have with the terminal just to make sure I'm  
48:33 - not Stumbling on this part. But let's start off 
with console dot write line. Let's just do like,  
48:41 - welcome. user, welcome user. And then we can 
go down to another one, console dot write line.  
48:53 - And then let's say let's play, 
let's play a game of Mad Libs.  
49:04 - And then after that, we can 
get their name. So we can say,  
49:09 - let's do another console dot write line. 
And then please share with me your name.  
49:22 - And then here is where the terminal is going 
to stop and allow them to put in some input.  
49:28 - so here we can do Neo, since that's 
the name of the character in the text,  
49:35 - equals and we can do console dot read 
line. And whatever they returned here  
49:41 - is what the variable Neo is going to be set 
as. And just in case you don't believe me,  
49:46 - let's actually run this program and see that 
being printed on the screen. First thing we  
49:52 - need to do though, is with all these errors, 
it won't allow us to actually run the program.  
49:57 - So let's just comment out this and Tired thing, 
whoops, hold on a second, I need to do that and  
50:06 - comment this out, come with that one all the 
way down the line. So this doesn't get compiled.  
50:13 - And then let's replace this for now with, with 
Neil. So whatever name that we pass to the  
50:22 - terminal, it's just going to spit that right 
back at us. And that's going to prove to you  
50:25 - that we're able to set variables this way. So 
I'm gonna come up here to the top and hit start.  
50:30 - And my window actually goes out of frame. I'll 
bring it on screen. So as we put Hello, welcome  
50:39 - user, let's play me mad libs, share with me your 
name, and I'm going to put my name to bring this  
50:46 - up. Of course, it's going to exit because we 
also didn't tell it to pause. So let's Um,  
50:54 - I think we need to cancel that wait for that, 
let's do another read key concept that read key  
51:01 - that's gonna wait for a key press and then it's 
going to exit the terminal. So run it again.  
51:07 - Bring it back on screen. Welcome user. Let's 
play a game with Mad Libs, please share with us  
51:11 - your name, I'm going to put bros and their prints 
right back to us the same variable that we put in,  
51:16 - which is lets you know that it's actually working. 
So now I'm just going to revert back to its  
51:22 - original state. And we can do z Ctrl, z Ctrl Z 
Ctrl, z Ctrl Z. So a bunch of times, and we are  
51:32 - back woke at semi colon, and we are back to our 
original state. And if you don't have control Z,  
51:38 - I think on Apple, it's Apple z, I believe. 
But if you don't have either those buttons,  
51:43 - you can come up to edit and then hit undo up here. 
And that will do the same thing that I did with my  
51:49 - shortcut on the keyboard. Also real quick, let's 
add at the very end of our process, let's add  
51:56 - console, console dot read key. This will make sure 
that it pauses the application before quits. Okay,  
52:05 - so now over in Python, let's start to get input 
from users. So what we want to do here is instead  
52:12 - of writing console dot write line, again, it's as 
simple as prints. And we can do print, welcome,  
52:21 - user, come down to another print. Let's play a 
game of Mad Libs, and then another print and say,  
52:35 - Please, please share with me your name. And 
then we can simply do Neo equals inputs.  
52:53 - Well, technically, technically, we can add this 
string into input, and it will be the same exact  
52:59 - thing. So we can do this, and it will print and 
then whatever the next line is, it will get that  
53:08 - input. However, we do need to add a line break 
here. Otherwise, it's going to, it's going to  
53:14 - allow you to type right after the question mark, 
we want to go to a new line, just to make it a  
53:20 - bit more cleaner. And so now the cool thing is now 
that we have our actual name set in the variable,  
53:26 - Neo, we can use that with our printing function. 
So if we do console dot write line, for example.  
53:34 - Let's interpolate the string and do Hello. And 
then we can do here, Neo. And then exclamation  
53:44 - point. And then let's say something like, are you 
ready? Are you ready? And then what is something  
53:56 - you want to know more what running out of 
space? So I'm gonna go to next line more about.  
54:07 - He learned how to spell more about.  
54:12 - And then next line, when they answer what they 
want to know more about, we can put that into the  
54:16 - matrix. So I forgot my semicolon. So we can 
do the matrix equals console dot read line.  
54:28 - Easy as that. And over in Python, it's pretty 
much the same exact deal. We'll do print.  
54:35 - What is it when interpolate the string with F? 
Hello. And then this will be Neil. Whoops, Neil.  
54:46 - And then are you ready? Are you ready? And then 
actually, I'm going to break this off. Whoops,  
54:55 - I'm going to break this up into another print. 
Actually, I want to make this an input. input.  
55:02 - And then this is what is something you 
want to know, oops, to know more about.  
55:14 - And of course, we need to do the matrix variable 
equals whatever they want to know more about.  
55:20 - So just to make sure that you're still with me, 
just remember that the only thing we're currently  
55:24 - working on is get input from user. That's this 
section right here, everything else we are not  
55:29 - focused on. And within this section, there are 
only two functions that we're using. The first one  
55:35 - is called to that read line, which is just simply 
printing some string to the user. And a second is  
55:41 - console dot read line, which will return to us 
whatever that user inputted into their console,  
55:47 - that we can then assign a variable to it. That's 
it. Nothing more complex than that. So continuing  
55:54 - along with our little storytelling, we can have 
a lot of fun. And do console dot write line, and  
56:00 - then interpolated string, and do 
something like, ooh, and then we can put  
56:11 - you want to know more about, and then the 
matrix Ha. You know, just have fun with it.  
56:26 - And then we can do another line console, 
dot write line, interpolated string.  
56:34 - Let's see. Next we want to do is we want 
to get the variable system. And so we need  
56:40 - to give them a bit of a context. So we can 
do something like, first, let's see first.  
56:49 - Okay, please bear with me. Okay, well, 
first, tell me what you already already know  
57:05 - about the matrix. And then let's do one final 
one, which gives them a bit of instruction,  
57:16 - because this is madlibs. After all, 
we're gonna do let's see what now  
57:27 - would you categorize the matrix as, and then 
we can add like a little semi colon here.  
57:39 - And then finally, finally, we can do 
system equals console dot readline.  
57:52 - And yeah, pretty straightforward. Again, I'm just 
trying to have fun with this Mad Libs as we're  
57:56 - getting the data, the information, the input from 
the user. And so, you know, you also want to give,  
58:04 - you know, this is all mad libs clues right now. 
But you also want to give the user like some sort  
58:09 - of hint as to what word they're replacing. So I 
simply just asked what noun would you categorize  
58:16 - the matrix as, and he's just trying to have fun 
with it over in Python, not much really changes,  
58:22 - we're just going to print out the same exact 
strings. So so Oh, oh, you want to know more about  
58:36 - that? I mean, you put the matrix and then print 
another line. And this is going to say, Okay,  
58:48 - well first, tell me, oops, tell me 
what you already know about the matrix  
59:02 - to another line. We're in df and then what now? 
Would you cat TIG Gore, right? Then matrix.  
59:22 - Actually, I forget this is Python. So we can 
actually make this our input, and then do system  
59:31 - equals this input. And just to prove to you 
that we're just trying to craft the story here,  
59:36 - nothing more complex than that. I'm going to 
initialize all of these remaining variables  
59:42 - as empty strings just so that that error clears 
up. Because empty string equals empty string,  
59:51 - equals empty string equals empty string. And 
now we can actually print out this story. Even  
59:58 - though most of the words most of the very roles 
are going to be whoops, equals empty string are  
60:03 - going to be empty strings. We can print this 
out. My console goes over to the left. So  
60:09 - what is my name to Brill's? And then, as we 
wrote, hello jimbros gave us her name. Are  
60:16 - you ready? What is something Do you want to know 
more about? There's a typo there. We can fix that.  
60:22 - I want to know more about pizza, for example. 
Oh, you want to know more about pizza? Okay.  
60:29 - Well, first, tell me what you already know about 
pizza. What noun? Would you categorize pizza as  
60:35 - I categorize pizza as pie. And then that's as 
far as we've gotten our code. So now it does  
60:41 - the Mad Libs, it replaces the variables within the 
actual Madlib story. And they get we gives us this  
60:48 - pizza is a pie two Bros. That pie is our and then 
it's all empty strings from there. But as you see,  
60:54 - this is this is all we're doing at the moment 
is this part of the terminal script, we're just  
61:01 - crafting this story. That's all there is to it. 
Hopefully at this point, I've convinced you that  
61:06 - we aren't doing anything complex. With this stage, 
we're just printing out a story to the console  
61:12 - and asking for variables. That that's all. So 
let's just finish off our story by moving on.  
61:20 - So next thing that I want to do here is of 
course, we're gonna do console dot write line.  
61:27 - And we're gonna interpolate a string. And 
what I want to put next is, let's see. Give me  
61:41 - me in opposing, opposing now,  
61:47 - to system, right, because the next word we're 
going to get is enemy, we're going to try and  
61:55 - replace enemy ever again, we're just trying to 
give them some sort of hint for a good noun to  
62:00 - replace. So that should work. So then we're 
gonna do enemy equals console. dot read line.  
62:12 - All right, so hopefully, this string that I 
printing that I'm printing to the console,  
62:17 - is enough to give them a hint. On a good 
words, replace enemy with moving on,  
62:22 - we're going to do another console dot write 
line. And what are we getting next? Next,  
62:29 - we are going to get the word inside. So 
let's see. What hint Can I give for inside  
62:41 - I don't know relaxing. Now, let's say now give me 
any relaxing. Now, in of course, this needs to be  
62:52 - in the present tense, present tense. And then we 
can do inside equals console dot read line again.  
63:06 - And we just keep on going down the line, we're 
not going to get caught up to speed in Python.  
63:11 - So last left off was system. 
So we need to print let's see,  
63:16 - interpolate a string. Let's do what is it give 
me me an opposing now to system. I always forget  
63:28 - this is Python so we don't have to print and 
then do a read line. We can just do input.  
63:37 - Let's see what's the variables enemy, 
right? Yeah, enemy equals input.  
63:43 - Cool. And then we can do the same thing 
with inside equals input. And then I'm gonna  
63:50 - interpolate the string. And then let's do now. 
Now give me any relaxing. Now, present tense.  
64:04 - All right, oops, no, semi colon, none Python. 
Cool. And we are all caught up. Now next up is the  
64:11 - interesting part that we kind of set up a little 
earlier in the video. Now we need to actually use  
64:17 - our for loop for our string arrays. And so we can 
go about doing that really simply just create a  
64:23 - for loop for int i equals zero. i is less than 
profession, dot length, semi colon i plus plus,  
64:38 - and then come down here sort of brackets. And 
so this for loop is just going to go through  
64:42 - the professions which is next up in the text 
prompt, and we can simply just asked. Let's  
64:49 - see. I guess before that though, we need to alert 
the user say console dot write line and say Okay.  
65:03 - Now I need for professions, 
professions, professions relating to  
65:19 - what is this relaying to system 
and interpolate the string here,  
65:26 - boom. So we let that alert the 
user what's about to happen,  
65:29 - I need for professional building systems. And 
then here we can do console dot write line.  
65:40 - And we're gonna do a course interpolated 
string here. And let's do profession.  
65:47 - If I have any typos, I apologize, profession,  
65:51 - plural. Because, again, we're doing businessmen, 
I don't remember them originally, businessman  
65:58 - mckellan, something like that. But they're an 
employee rural. And then we can just simply  
66:07 - let them know where they're at, by doing i plus 
one, because is going to be zero starts at zero.  
66:15 - So we can do that plus one to get it started 
at one. And then simply profession dot length.  
66:29 - Right, so what this does, let me just walk you 
through this thing is a bit vague. So what this  
66:33 - does, simply, as we're going through our for 
loop, there are four different professions,  
66:39 - it's going to write to the console, give me a 
profession, plural, and it's going to print out  
66:45 - what number profession they're currently filling 
out. That's all it is. And then it's divided  
66:50 - by the length is how many professions we need. 
And I'll show you this example a bit later. But  
66:56 - once we do that, then after every single time, we 
print that to the console, we want to read line  
67:04 - and assign profession of AI to that, and that will  
67:13 - pretty much populate our entire profession string 
array. All right, and to get caught up in Python,  
67:19 - it's not too difficult, of course, we need 
to write out our print. And we are currently  
67:26 - alerting the player that a for loop is about to 
happen for the most part. So okay, now I need four  
67:34 - pro fish ones relating to system. Right. And then 
we got to do our for loop. And for loops in Python  
67:45 - are they're a bit different. So we're gonna do 
for i in range, length of profession. And then  
67:56 - we'll do our colon and the next line will do the 
profession of AI equals inputs. And then here,  
68:07 - what do we put we put profession, which is 
definitely a typo in the C sharp profession.  
68:19 - And then plural. And then here, we're going to do 
i plus one, hope this is not interpolated string,  
68:28 - and add an F to make an interpolated 
string, divided by length, oops, come on,  
68:37 - come on. There it is length of profession. And 
there we have it. They are now currently up to  
68:48 - speed. Now this point, I'm pretty sure that 
you could finish this program on your own  
68:53 - because we're just essentially gonna do the same 
exact stuff we've been doing. And once you fill  
68:57 - out the remainder, what is it like three or four 
variables, the application is done. However,  
69:03 - I want to take a second to pause because I often 
don't go this long without leaving comments. It's  
69:09 - always nice to leave comments for yourself in the 
future. Or if you're going to send this off to a  
69:14 - friend, or if you're going to upload it to GitHub 
for you know, other developers is trying to take  
69:19 - apart and learn from it's always good and nice 
leave comments. So let's do that. Just to explain  
69:25 - what's happening here. I'm just going to say we 
are getting the matrix variable a variable from  
69:39 - user it's going to be a lot of those comments 
getting system variable variable from user  
69:54 - forgetting enemy variable from User where I didn't 
even add system, system variable from user sorry,  
70:06 - getting what is this inside variable?  
70:11 - variable from user. And then this is arms and 
say commencing for loop. No way, commencing.  
70:25 - Now I'm going to say that I'm going to 
say getting getting all professions.  
70:33 - From user. Also, I know that I have a typo 
here. So I'm going to fix that profession. Yes.  
70:44 - Cool. I'm actually going to combine these not not. 
And yeah, this really helps me out personally.  
70:51 - Oftentimes, when I'm reading code, 
I'll often look for the green,  
70:55 - or like, where the comments are, whatever color 
the comments are, in the language, often look for  
70:59 - those as like kind of like markers. So I can kind 
of fill out the code and know exactly what's going  
71:04 - on where. So it's always good practice to leave 
comments in Python and do the exact same. And  
71:10 - leave a comment here, getting the matrix variable. 
From user. I apologize, if I have typos, I'm  
71:24 - not terribly concerned about that 
getting getting system variable  
71:31 - from user, and then this is going to 
be getting enemy variable from user.  
71:41 - And this is getting inside variable from 
user. And this is getting all profession.  
71:59 - variable from user was going to change his 
profession. I guess that doesn't really matter.  
72:09 - Cool, a bit redundant, but it always helps. 
Alright, so I went and did you a favor and  
72:14 - pretty much wrote out the rest of the logic 
for the rest of the variables, because  
72:18 - it probably got a bit too mundane if 
I were to record it on the screen,  
72:22 - but we can walk through it anyway. So 
right after the profession's for loop,  
72:26 - we are essentially getting the same variable. And 
we do that by writing to the console, give me a  
72:31 - hero related verb in the present tense. Again, 
this is just hints for the user. So they kind of  
72:36 - have an idea on what we're they're replacing. And 
then we will save whatever string they returned  
72:42 - to us into the Save variable. And then we get 
the unplugged variable, which we do that by  
72:48 - writing to the console. Now give me a verb that 
makes you think about relief in the past tense.  
72:54 - Again, just another hint, you can see how mundane 
it probably would have been. And then whatever  
72:59 - string they returned to us with counselor reline 
we will save that into the unplugged variable.  
73:05 - And then after that we need to get our adjectives 
are two of them. So we first warn the user say,  
73:12 - lastly, I need to dystopian adjectives. And then 
we do a for loop. And simply, we will tell them  
73:23 - that they are currently filling out an adjective. 
And we'll let them know what number they're on  
73:28 - out of the total number. And then we will save 
that to their respective adjective variables,  
73:34 - whatever string they're returned to us. And then 
lastly, we just need to get the fight variable.  
73:39 - And we just say, Hey, we need a verb on the 
console. And then whatever string they returned to  
73:45 - us, we will save that into the fight variable. And 
that's pretty much it on the Python side of things  
73:51 - is the exact same just in Python syntax, you know, 
get the same variable, get the unplugged variable,  
73:58 - get the two adjectives to a for loop, 
and then get the fight variable.  
74:02 - And we're done. Great work guys are madlibs 
application is pretty much done. I mean,  
74:08 - there's nothing left to do. Except there's one 
thing that I want to do on Python. So the input  
74:14 - function is a bit different than the console dot 
read line, the constant read line function will  
74:19 - always go to a new line, the input does not. So 
with that, let's kind of format this a bit. I'm  
74:25 - going to do with all the inputs, semi colon, and 
then a space. So whatever question we asked them,  
74:32 - they can input that right after our 
question. So I'm gonna do that again.  
74:39 - I'm actually going to remove the question 
mark because it might get a bit confusing  
74:43 - with that syntax anymore. So there's some 
added space there. And then input here I'll do  
74:50 - colon space. Here I'll do colon space. 
Where else here I'll do colon space.  
74:58 - And this is the input space, there's 
input space. Here, space input here,  
75:06 - space, and boom. Alright, and that's just 
going to look a lot more cleaner when we're  
75:11 - actually playing the game in the terminal. 
So all that's left is to play it and let's,  
75:16 - let's actually play it. I'm going to run C 
sharp first. I'm going to bring this over here  
75:22 - and it says welcome user. Let's play a game 
of madlibs. Please share with me your name.  
75:27 - My name is jabril Hello, jabril. Are you ready? 
What is something you want to know more about?  
75:33 - I want to know more about pizza. Oh, you 
want to know more about pizza? Ha. Okay,  
75:40 - well first, tell me what you already know about 
pizza. What now? Would you categorize pizza as  
75:45 - I'd say pizza is a pie. Give me an imposing noun 
to pie. Hmm, maybe cake. Now give us a relaxing  
75:54 - noun. Present tense. I guess sleeping is a relaxed 
noun and present tense. Okay, now I need four  
76:02 - professions relating to pie. Ooh, I don't know. 
Baker. Cook. Chef. I don't know. I don't know.  
76:16 - What's the last one? I'm just 
gonna say butcher. I don't know.  
76:21 - Give me a hero. Related verb in present tense. 
Here are related verb in present tense. Let's see.  
76:32 - Save. That's all I can think of. I know that's 
the actual word, but it's all I can think of.  
76:37 - Now, give me a verb that 
makes you think about relief.  
76:42 - Massage. Massage in past tense massage. Yeah. 
Is that a verb? Something to do? I guess I don't  
76:52 - know. Lastly, I need to dystopian adjectives 
describing words. I don't know birds, I guess.  
77:00 - And what's another one? I'm dirty. And the 
verb, a verb is what you do, let's say,  
77:10 - um, what you do, kick. Let's see what we got 
here. Pizza is a pie two rows. That pie is our  
77:22 - cake. But when you're sleeping, you look around. 
What do you see? Baker, cook, Chef, butcher, oops,  
77:31 - I didn't listen to instructions socially plural, 
very minds of the people we are trying to save.  
77:38 - But until we do, these people are still part of 
that pie. And that makes them our cake very deep.  
77:47 - You have to understand, most of these 
people are not ready to be massaged.  
77:52 - And many of them are so burnt, so helplessly dirty 
on the pie that they will kick to protect it.  
78:02 - Art, absolute art. And now let's play in Python. 
Real quick. Not sure how I missed this. But we  
78:09 - need to put input at the bottom so the console 
will stay open. But it's a bit different to  
78:15 - actually play it with Python. Go up to here up the 
top where your project file name is right click  
78:20 - and then do reveal an explorer. And then wherever 
your fault your file is just double click it and  
78:27 - a terminal should pop up. It should look pretty 
much the exact same, just with a slight Python  
78:33 - syntax difference that we did. And so please share 
with me your name? My name is what am I gonna say?  
78:43 - My name is fajita. I'm cool this time. Hello 
Vegito Are you ready? What is something you want  
78:49 - to know more about? I want to know more about 
Um, let's see. Not pizza. Oh, no more about  
78:58 - Skittles. Skittles huh? Okay, well first tell me 
what's your I know about skills? What now? Once  
79:05 - you category Skittles, as I'd say it's candy. Give 
me an imposing noun to candy. Ooh, veggies. Now  
79:14 - give me any relaxing noun in the present tense, 
relaxing noun. Person place or thing? That's  
79:25 - actually probably incorrect, but I understand what 
it's asking. Relaxing now. I don't know. Relaxing  
79:35 - itself. Okay, so now I need for professionals 
relating to candy. Let's see. Baker. Down Mama.  
79:47 - Clerk. I don't know. Supposed to be plural. I 
keep forgetting associate plural clerks. Baker.  
79:55 - I don't what do you call it candy make 
candy makers candy. Make Here's chocolate  
80:03 - chocalate factory owners. Let's see, give me 
a hero relating verb in the present tense.  
80:11 - What do heroes do they save. They fight 
crime. The verb Fight, fight crime.  
80:22 - fight crime. I don't know. Now, give me 
a verb that makes you think about relief.  
80:37 - coding. That's what you do in past tense 
coded. Lastly, I need to dystopian.  
80:45 - Let's do dystopian, let's do, empty, I 
guess. And let's do dark and a verb, a verb.  
81:08 - Slide. Let's see what we got here. 
Skittles is a candy fajita? That candy  
81:15 - is our veggies. But when you're relaxing, 
you look around when you see bakers, clerks,  
81:23 - candy makers, chocolate factory owners, the very 
minds of people, we are trying to fight crime.  
81:30 - But until we do, these people are still a part 
of that candy. And that makes them more veggies  
81:37 - very deep. That is so deep. You have to 
understand, most of these people are not  
81:42 - ready to be coded. And many of them are 
so empty. So hopelessly dark on the candy  
81:49 - that they will slide to protect it. Wow. Wow. 
So that's poetry. And there you have it, guys,  
81:57 - congratulations on creating your first ever 
program. You did it. Congrats, everyone. Believe  
82:03 - it or not, you just written an actual usable 
program, you can go right now and play this  
82:08 - with your friends and loved ones and impress them 
with your new skills. But if you're still lost,  
82:12 - you should feel really lucky. Because this 
video is part of a programming course that I  
82:16 - put together to teach you everything that you need 
to know to start programming. And I promise by the  
82:21 - end of it, this application will be very easy 
for you to understand even without my help. I  
82:27 - envy all the knowledge that you get to learn. So 
maybe there's some things that you understood and  
82:31 - others that confused you. Well, I designed this 
course that you only have to take the lessons that  
82:36 - you want to take no prior lessons required to make 
your own curriculum. So what are you waiting for?  
82:43 - Now, if you want to be a good programmer, it's 
very important that you get a solid understanding  
82:48 - on data types. So let's talk a bit about them 
and get you familiar with the basics of them.  
82:53 - On the most fundamental level, let's say you have 
some data that is stored in a variable. Well,  
82:59 - this data has some sort of type that's associated 
with it. There are a good number of different data  
83:04 - types, and they all have different instructions 
and rules. And this is sort of computer knows what  
83:09 - it can and can't do with the variable. Now there 
are six main data types that are shared across  
83:14 - most languages. bool, which stands for Boolean 
named after the 19th century mathematician George  
83:19 - Boole whose work popularized it char, which 
stands for character string, which stands for  
83:25 - string of characters int, which stands for integer 
float, which stands for floating point value,  
83:30 - and array, which isn't actually a type of 
data. It's a data structure. But by definition,  
83:36 - it's an ordered series or an arrangement of 
similar types of data. And no, there are more  
83:41 - data types that exists out there. But if you 
want to learn more about these in particular,  
83:45 - I've a lesson on each and every one of them, check 
the link in the description, because this lesson,  
83:50 - we're only briefly go over them. Now, again, 
every single one of these have their own unique  
83:55 - set of rules and instructions. For instance, 
let's take a look at the integer data type,  
84:00 - which are a type of data for whole numbers. Let's 
say that you have an integer that equals 11.  
84:05 - And you want to minus one from it, 
well, you'd write off this operation,  
84:10 - send it to the computer to perform. And guess what 
your computer will take a look at this operation,  
84:14 - then we'll look to see if it has the instructions 
for doing that operation, then we'll go Yeah,  
84:19 - I know how to subtract an integer from an integer, 
the computer will then subtract one from 11  
84:24 - and then send back to you a 10. all well and good. 
everything checks out. But now let's take a look  
84:29 - at a string data type, which again, is a string 
of characters. If you were to have the string 11,  
84:35 - and you want to subtract the integer one from 
the string 11. Well, you send this operation  
84:39 - to your computer, your computer would take a 
look at its operation, then check to see if it  
84:43 - has instructions on how to do that or not, then it 
would realize what you sent it makes absolutely no  
84:49 - sense. It has no instructions on how to subtract 
integers from strings. This is no different from  
84:55 - telling your computer to subtract one from the 
word hello. How do you do So your computer will  
85:01 - just send back to an error letting me know that 
the operation you're trying to do makes no sense.  
85:05 - What specifically in this case is a type error. 
Now, let's do the same operation, but instead  
85:11 - make both of them strings. What do you think will 
happen? Well, we get attending in but as a string,  
85:16 - maybe we'll get another error. Well, if you again 
have the string 11, and you send the operation to  
85:22 - your computer to subtract the string one from the 
string 11, your computer will look its operation,  
85:28 - then again, realize it has no instructions on 
how to do this, thus, returning back to you  
85:33 - in air. But you may find this next part quite 
interesting. If you instead tell your computer  
85:38 - to take the string 11 and plus the string 
one to it, it will look at this operation,  
85:43 - then check to see if it has any instructions 
on how to do this or not. And then say,  
85:47 - Yeah, actually, I can do that for you, then it'll 
send back to you a string of 111 simply because  
85:54 - since the string one and the string 11 are both 
strings, all it has to do is add an extra one to  
86:00 - the 11th string, just for example. And there you 
have it for data types. That is why understanding  
86:06 - data types is really important, you will have a 
very hard time trying to write programs without  
86:10 - knowing the difference between a number as an int, 
float, or string. Check out the lessons LinkedIn  
86:15 - description to learn more about each data type 
individually. But in conclusion, just remember  
86:20 - that data types are different types of data with 
different rules and instructions. And depending on  
86:25 - the data type of your variable, there are certain 
operations that you can and can't do with it,  
86:30 - which will become very important to grasp 
and understand as you start using them.  
86:36 - So let's talk about bulls bull is short for 
Boolean. If you hear bull or Boolean, they mean  
86:42 - the same exact thing. And it was introduced by 
George Boole in his book The mathematical analysis  
86:46 - of logic in 1847. But what is a Boolean in terms 
of programming? Well, a Boolean is a data type  
86:53 - that can only be assigned one of two different 
values, either a true value or false value. And  
86:59 - that's it, it honestly doesn't get any more 
complex than that. And what might take you  
87:03 - by surprise is that bullions are the most 
fundamental building block for programming,  
87:08 - most of your code will simply just check 
if something is true or not. And complexity  
87:12 - is added by combining a bunch of volumes. But 
we'll get into that in just a bit. But for now,  
87:18 - let's get into the nitty gritty on how you go 
about using volumes. And we're going to do this  
87:22 - by using two different languages. Because I think 
it can be really helpful for you to learn how they  
87:27 - compare and contrast. And plus, you'll pretty much 
learn two languages at once. So on the left is  
87:32 - language C sharp using the it Visual Studio, which 
should interest you if you want to do windows  
87:38 - development, or if you want to make games using 
a popular game engine called a unity. And on the  
87:42 - right is the language Python three using the ID 
Visual Studio code, which should interest you if  
87:47 - you want to get into general programming or data 
science. Alright, so here I have two brand new  
87:52 - console projects. And if you don't how to make a 
new console project in either C sharp or Python or  
87:56 - both, be sure to check out the video in the 
description. It's called How to install an ad.  
88:01 - And at the end of that video, I'll show you how 
to do that. Alright, so the first thing I want to  
88:05 - get into today is just some basic Boolean syntax. 
So first thing I'm gonna do is just delete these  
88:11 - two lines don't need them, they come standard with 
every new C sharp project. And then I'm going to  
88:17 - cast a boolean data type, bowl, and then I'm 
gonna create a variable called pizza time them  
88:24 - assign it to be true. Now, the first thing that 
you know about Boolean is that they only have  
88:30 - two states, they can either be true, or they can 
be false. That is about the only flexibility that  
88:38 - a bullying has when it comes to assigning it. 
But over in Python bullions have just a little  
88:44 - bit more flexibility. So I'm going to create 
a new variable, and we'll call it pizza time,  
88:49 - of course, I'm gonna assign a true value to it. 
And now it knows that this is a Boolean, but I  
88:56 - can also assign a false value to it. Or I can also 
say, assign a one value to it, that equals true.  
89:04 - And lastly, I can assign a zero value to it, and 
that equals false. And just to prove it to you,  
89:10 - I'm going to show you all the different cases. 
So we'll do true here. And then to check it,  
89:15 - we need an if statement. So I'm gonna say if pizza 
time, then we need to print pizza, or a string  
89:26 - pizza. Like that, I'm gonna hit the play button 
and you'll see that it prints out pizza. Next,  
89:33 - I'm going to change the false value, and it should 
print out nothing. If we hit the play button.  
89:39 - You see nothing was printed just as we expected. 
And now I'm going to change this to be a one value  
89:46 - and hit the play button. You'll see that again we 
get pizza pretty nice. And lastly, I'm just going  
89:51 - to say pizza time equals zero save it hit the play 
button and you see that we get nothing printed.  
89:58 - So what's going on here because Clearly the pizza 
time variable is an integer. And we're saying if  
90:04 - zero, then print pizza time. That doesn't make 
any sense, right. And that's one of the benefits  
90:12 - to Python being an interpreted language, it 
allows you to pass in integers in a conditional  
90:16 - statement. And if it's zero, then it's going to 
convert that into a false value. But if it's one,  
90:22 - it's going to convert that into a true value. 
In fact, any numeric value that is not zero, and  
90:28 - it's being used as a conditional statement will 
return a true value. So Pete's time equals nine,  
90:35 - save hit play, you'll see that it prints out 
pizza, pizza time equals negative three, hit save,  
90:42 - hit play, still prints out pizza is in this isn't 
only limited to integers, you can also use floats.  
90:48 - So if we say pizza time equals point 0000001, hit 
save, you'll see here pizza time is now a float,  
90:56 - we hit play, and still it will print 
out pizza. And this is unique to Python,  
91:01 - we can't even think to do that in C sharp, if we 
weren't even tried, we get all sorts of errors.  
91:07 - So that's just one extra flexibility you have 
with using the language, Python, font and crease.  
91:14 - So now I want to get into the many, many, 
many operators that bullions have, which  
91:18 - is just a testament to how 
powerful these things are.  
91:22 - But let's start with the equality operator. 
Now, let's say that you want to create some  
91:28 - like user login system, right. So I'm just 
going to create a couple of strings here.  
91:34 - I'm going to say string, password type some su p T 
stands for password typed, I'm going to say equals  
91:43 - ABC 123. And then let's do another string of semi 
colon Of course, and then do another string. And  
91:50 - this is going to be P A for password actual. 
And we're going to say equals, again, ABC 123.  
92:01 - Okay, so let's say that this is the user's 
actual password PA, ABC 123. And what they typed  
92:08 - is ABC 123. So how can we check to see if they 
match? Well, we'd have to use something that's  
92:14 - called the equality equal operator. And the 
equality equal operator looks like this. pt,  
92:23 - equals PA. And that's all it's to it. Now, I know 
what you're thinking, this looks really confusing.  
92:31 - And I've been programming for about 13 years now. 
And I agree with you. So one thing that I usually  
92:36 - like to do with my bullions is first and foremost, 
I like to put parentheses around whatever is like  
92:43 - the Boolean then I'm checking for, it just makes 
it a lot easier to read when I'm scanning lines of  
92:47 - code. But to explain to you what's going on here, 
again, equals equals that's two equals back to  
92:54 - back is what we call inequality equals Operator, 
do not get confused with one equal one equal is  
93:00 - simply just the assignment operator, it means 
that you want to assign something to a variable  
93:07 - to equals, again, is checking if two things equal 
each other. So if we were to read this full line,  
93:14 - we're simply just initializing a boolean variable 
called pizza time. And we're assigning the value  
93:20 - true or false to it with this Boolean operation 
here. And what this Boolean operation simply does  
93:27 - is it just checks if p t is equal to PA. 
If it is then pizza time will equal true.  
93:34 - But if it's not, it's going to return a false 
and piece of time will equal false. I mean,  
93:39 - pretty simple, right? We just asked if two things 
equal each other. If it is, then give us a true if  
93:44 - it doesn't give us a false. And as simple as this 
is, if you've ever logged in to anything before,  
93:49 - this is pretty much all they're doing with 
maybe a couple extra checks on top of that.  
93:54 - All right, I think I beat that horse well 
enough. But I keep on hammering this in  
93:59 - because it's really important that you understand 
this step. If you understand what's going on here,  
94:03 - then I think a lot of programming is going to 
be really easy for you to understand, because  
94:07 - this is like one of the staples to programming. 
Moving on. Just to prove to you that this works,  
94:13 - as I am saying that it does, we're gonna come down 
here and do a console dot write line, just print  
94:20 - this to the console, pizza time. And then we also 
need a console dot read key. This just makes sure  
94:28 - that the console doesn't immediately close when we 
run it, hit the start button up here. And then I'm  
94:34 - going to bring the console on screen. And as you 
can see, it returns a true value. But if we make  
94:40 - one of these slightly off, if I turn this to be 
one to four instead, and we hit the start button,  
94:47 - you can see that whatever returns to us is a false 
value. So it is not pizza time because they do not  
94:53 - match they are not equal. And now over in Python, 
I'm just gonna quickly recreate the same scenario.  
95:00 - It's time equals, well, we need some 
for that we need p t equals A b, c 123  
95:11 - p p A equals equals a string, ABC 
123. And then pizza time equals  
95:22 - P t equals P oops, p a, like that go on to 
add the prince, let's do print pizza time  
95:33 - here. And then I'm gonna hit the play button 
and return to True Value perfect. And of course,  
95:41 - I can make one of these slightly off, and then 
hit the play button and returns a false value.  
95:46 - Now, I really hope that all that made sense, 
because if it did everything from this point on,  
95:51 - it's gonna be really easy to understand. But next, 
let's move on to our next operator, which is the  
95:56 - equality not equal operator. And how the equality 
not equal operator works is, let's say that you  
96:02 - want to check for like, some bad word, right? 
So we're gonna change pa to be bad word, right.  
96:11 - And so instead of checking if they are the same, 
you're going to check if they are not the same,  
96:17 - and not is going to be indicated by a exclamation 
point. Now, what this is saying is, if they do  
96:24 - not equal each other, then I want you to return a 
true value. However, if they do equal each other,  
96:31 - then I want you to return a false value, it 
pretty much just flips the Boolean operation,  
96:38 - which again, is what we want in this scenario, 
because we're trying to filter out bad word,  
96:42 - if what you typed is bad word, then it's not 
pizza time. And just to prove to you that this  
96:47 - will return to true because they do not equal each 
other, I'm just gonna hit the play button up here,  
96:52 - and then bring the console on screen, 
you can see that it returns a true value.  
96:57 - So that's pretty much everything that you need 
to know about the equality operators. Next,  
97:02 - let's get into the relation operator, starting 
with the greater than operator. So imagine  
97:08 - that you have some login system, and you want to 
limit the amount of times that a user can log in,  
97:13 - Well, one thing you can do is use 
one of the relational operators,  
97:17 - let's just start with a greater than. So first 
thing, let's just ignore these two variables  
97:22 - for now and create new ones, we're gonna make an 
integer, I'm gonna call it a log attempts, equals,  
97:30 - let's just say it's three. And then let's make 
another integer and call it log max equals five,  
97:37 - for instance, right, so what we can do 
is come down to our pizza time Boolean,  
97:42 - and we can replace this with log Max is greater 
than log attempts. And what this is doing is it's  
97:52 - essentially checking if log Max is greater than 
log attempt. And seeing as log Max is five in log  
98:01 - 10 plus three, this is going to return a true 
value for our pizza time Boolean variable. And  
98:08 - just to prove to you that this is correct, I'm 
gonna hit the start button, bring the console  
98:13 - where you can see that we have a true value. So 
that's the greater than operator, we could also  
98:19 - use the less than operator, which is going to 
check if logged Max is less than log attempts  
98:25 - return a true value if that is true or false value 
if that is false. But there's also a greater than  
98:33 - equals to operator, which just checks both if it's 
either greater than or equal to the log attempts.  
98:40 - And finally, of course, there is the less than 
and equal to operator that will check if log Max  
98:46 - is less than or equal to log attempt. And over 
in Python, these operators don't change at all,  
98:52 - I'm just going to get up to speed 
I'm gonna do log attempt equals three  
99:00 - and log max equals five and then come down 
to our pizza time go in and do log Max  
99:09 - is greater than log attempt. And then I'm going 
to run that just to prove this works the same.  
99:16 - And voila. And the last operators I want 
to go over are the end and or operators.  
99:22 - So here is where you really can be able to see the 
power of bullions being demonstrated. Alright, so  
99:27 - let's bring back our old scenario. So we're going 
to change this back to ABC 1234, past actual,  
99:34 - and then our past typed is also ABC 123. And let's 
replace this Boolean operation with P t equals  
99:44 - equals that is our equality equal operator equals 
P a. So what if you want to check if the password  
99:51 - is a match, and they're under a certain number of 
login attempts? Well, we can use our and operator  
99:59 - and in C sharp It's done like this, you just type 
the an ampersand, and then another and an percent.  
100:06 - And that is the end operator. And then after that 
you can do, you can write out another Boolean  
100:11 - operation. So we're gonna write log attempt is 
less than log max. And so what this full Boolean  
100:21 - is asking, it's just pretty much asking, do our 
password typed in a password actual do they match,  
100:27 - and the two ampersands. And are we under is the 
our log attempts less than our log max. If true,  
100:37 - if both of these are true, then return a true 
value for a pizza time. But if either of them  
100:42 - are false, doesn't matter which one, then return a 
false value for our pizza time. And just to prove  
100:48 - to you that that is how this operation is done, 
I'm going to press the start button top and bring  
100:52 - the console and open, you can see that we have a 
true value here. And all it takes, all it takes  
100:58 - is for one of these to be false. And I'm just 
going to change this to be passed, or ABC 124.  
101:05 - And then we hit save, and then I'm going to hit 
the start button and bring the constant window  
101:09 - over here. And you can see that we have a false, 
even though one is true, we're asking for n. And  
101:15 - that means they both have to be true in order for 
pizza time to be true. And just a quick side note,  
101:22 - I generally like to use a lot of parentheses 
as many as possible. When it comes to Boolean  
101:27 - operations like this, I like the segment because 
it just makes it a lot easier for me to read,  
101:32 - when I'm just going through lines of code, 
parentheses like me know, okay, this Boolean  
101:36 - operation here, I see that and I know there's 
another one, it just makes it a lot easier for me,  
101:41 - even sometimes I'll do like an overall 
parentheses over the entire Boolean operation.  
101:47 - It just helps me read it a lot easier. 
I don't know if helps you or not. But  
101:50 - that's a tip that you could use. And over in 
Python, the syntax is just a little different.  
101:56 - So I'm just going to get up to speed going 
to change this back to pass 123 or just  
102:04 - not pass is it as ABC 123. Sorry, ABC 
123. And then we'll change this to be P t  
102:14 - equals equals p a, or did you not tell since 
for me, and the way that we do in an in Python  
102:23 - is you literally just typed out the word 
and, and log attempt is less than log Max,  
102:33 - boy, that has became a really small 
window, maybe I should send out just a bit.  
102:39 - Cool. So now I'm just gonna prove this by hitting 
the play button. And you can see we got a true  
102:45 - value. But yet again, all it takes is one of 
these Boolean operations to be false. And they the  
102:52 - entire thing becomes false. And I'm proving that 
we'll change this to four, hit the play button,  
102:57 - and we got a false value returned to us. But what 
if you want him to be a merciful social media  
103:03 - developer, right, where you don't care if they get 
one or the other wrong, as long as you get one of  
103:09 - them wrong. First of all, don't ever do this. But 
if you want it to do this, you would simply just  
103:15 - change the AND operator into an OR operator, 
and then C sharp This is done by replacing  
103:21 - the two ampersands. With two vertical lines. 
I'm not sure what these characters are called.  
103:27 - But you replace it with two vertical lines, it's 
on the same key that the backslash key is on just  
103:34 - looked it up, I guess it's called the vertical 
bar character never knew that been anyhow,  
103:39 - this will now check if either one were true, 
which we know that one of them is false,  
103:43 - because p t does not equal PA. But the second one 
is true because log attempts is less than the log  
103:50 - max. And to prove that this will return true 
because one of them is true, I'm going to hit  
103:55 - the start button and then bring the window over 
you can see that we have a true value returned.  
104:01 - And over in Python, the OR operator is just a bit 
different, just as you write out and for the an  
104:07 - operator in Python, you have to write out or for 
the OR operator in Python. And now over in Python,  
104:13 - the OR operator is just a bit different, just like 
how you had to write out an for the an operator,  
104:19 - you have to write out or for the OR operator in 
Python. And of course, just to prove that this  
104:25 - works, I'm gonna hit the play button up here. 
And you'll see we get a true value returned. So  
104:30 - I hope you can see what makes Boolean so 
powerful in the world of programming. Just  
104:36 - from this simple example alone, we already have a 
Boolean that checks for the log attempts next to  
104:43 - you know, the actual password typed. And then we 
can take this Boolean and embed that into another  
104:48 - Boolean and just keep on adding complexity and 
complexity. Billions are incredibly powerful and  
104:53 - and they're really important to understand. 
And yeah, there you have it, guys. That is  
104:58 - pretty much everything that you need. To get 
started programming in regards to billions.  
105:05 - So strings strings are one of the most important 
ingredients to almost every program you'll ever  
105:10 - make. Why? Well, the odds are likely that at some 
point in deployment or even during development,  
105:16 - some human will have to interface with your 
application. And with that, your program needs  
105:20 - to communicate with them somehow. And it's highly 
likely that using strings will be how you go about  
105:25 - doing that strings on the most basic level are 
a string of characters together in a series,  
105:32 - hence the name string, you can write any word in 
any language, you can write any number, or even  
105:38 - any code slang key, you name it, making strings, 
incredibly powerful. And that's pretty much all  
105:45 - that's the strings, they're really easy to get 
your head around. And there are a few things that  
105:50 - are really good to know while using them. So let's 
take a look at a few examples. Now we're gonna  
105:54 - do these examples using two different languages, 
because I think it can be really helpful for you  
105:59 - to see how they compare and contrast. And plus, 
you'll pretty much learn two languages at once.  
106:04 - So on the left is the language C sharp using the 
it Visual Studio, which should interest you if  
106:08 - you're gonna do windows development, or if you 
want to make games using a popular game engine  
106:12 - called unity. And on the right is the language 
Python three using the ID Visual Studio code,  
106:17 - which should interest you if you want to get into 
more general programming or data science. Alright,  
106:22 - so here I have two brand new console projects. 
And if you don't how to make a new console  
106:25 - project and either C sharp or Python, or both, be 
sure to check out the video in the description.  
106:30 - It's called How to install an ad. And at the 
end of that video, I'll show you how to do that.  
106:34 - Alright, so the first thing I want to get 
into is some basic string syntax. So first,  
106:40 - I'm going to delete these lines, they come 
stock with your brand new C sharp project.  
106:46 - And then I'm going to initialize a string, we'll 
call it a just for example. And then if you want  
106:52 - to assign a value to a string, you have to use 
double quotes. And then you can type in whatever  
106:57 - string you want, and then semi colon at the end. 
And as far as C sharp string syntax is concerned,  
107:04 - that's all you will need to worry about just the 
double quotes, make sure they are double quotes.  
107:09 - Now over in Python, we have just a little 
bit more freedom. So I'm going to initialize  
107:13 - a string here. And then I'm going to 
assign hello to it. And as you can see,  
107:19 - I use a double quotes just like we did in C sharp, 
but you can also initialize a string and assign  
107:28 - Hello, with the single quotes as well, both of 
these will be counted as a string within Python.  
107:35 - And just to prove that I'm going to do print a 
and then B. Here we go. And there you have it,  
107:43 - hello, and Hello, both are counted as strings. 
In fact, today, you're going to find that this  
107:49 - freedom right here, the double quotes in single 
quotes can be assigned to a string is quite nice,  
107:56 - Yossi. And so the next thing I want to talk 
about is the fact that strings are arrays of  
108:02 - characters. And to demonstrate that in C sharp 
over here on the left, we're simply going to do  
108:07 - a console dot write line. And then I'm going to 
do a and I'm going to use the brackets and just  
108:15 - put a zero in between them. This, this is an 
element within the A array. Again, strings are  
108:24 - an array of characters. So I'm just asking for 
the zeroeth element from the A string array,  
108:32 - which this is zero, this is one, this is 234. 
Arrays always start on zero in pretty much every  
108:42 - programming language. And so now just to prove 
that, I'm going to hit the start button up here  
108:47 - to run it in Africa, I always forget to do console 
dot read key, this just makes sure that the  
108:54 - terminal stays open until we press a key and hit 
start. And then bring this over here and you see  
108:59 - that we have the zeroeth element in the A array 
that is again a string of characters, which is  
109:06 - H. And it's quite flexible, we can put any that 
we want in here as the exercise. So if we want  
109:12 - to get zero, we can still be count this is zero, 
and then he is 1234. So if we put four in here,  
109:22 - then when we hit the start button, you'll see that 
it prints out in Oh, in fact, this technique is  
109:28 - what a lot of game developers use when they're 
trying to create some chat system that pops up  
109:33 - one character at a time, they will pretty much 
write out the entire dialogue here like Hello,  
109:38 - welcome. Welcome to my store. And then they will 
write some function that will take in a string  
109:46 - and then we'll grab every single character and 
then we'll print one out with a pause near like  
109:50 - a second pause probably a lot less than that, like 
a 10th of a second pause, then print the next 1/10  
109:56 - the seven second pause, print the next one, so 
on and so forth. Just A little add on there, and  
110:02 - over in Python, I'm gonna get rid of the B, we're 
just going to keep the double quotes convention to  
110:07 - match with C sharp, given the B here, and then 
I'm actually just going to do a print. Let's do  
110:15 - zero first, hit the play button, you'll see 
we get an H. And again, we're going to do a  
110:21 - four. So we can get the O hit the play button, 
and Oh, I forgot to save it, and then hit the  
110:27 - play button. And then we have Oh, right there, 
pretty much the same in both languages. Again,  
110:32 - just remember that all strings are just a array 
of characters. Next thing I want to talk about  
110:39 - is using the addition operator with strings. 
And to demonstrate that over here in the left,  
110:44 - when C sharp is going to remove this Bechtel, we 
had it, remove this from the right, and I'm just  
110:51 - going to come down here and do a plus equals oops, 
plus equals, that's the addition operator, these  
110:57 - two right here, when you see plus equals, that is 
an addition operator, plus equals and then just  
111:02 - add a character exclamation mark to it. And then 
I'm going to print that, and you'll just see that  
111:07 - it's gonna be Hello, and then I'm just gonna add 
a little exclamation at the end. Start that up,  
111:13 - bring it over here, and voila. Now one cool thing 
about this process is because at the fact that the  
111:19 - string a is just an array of characters, using the 
addition operator pretty much just says, Take that  
111:25 - string of characters and add this character 
to the end of it. However, the cool thing is,  
111:31 - you aren't limited to only adding characters. 
Again, the single quotes denotes a character  
111:37 - double quotes, and that denotes a string. So we 
could add to the end of this world, for example.  
111:45 - Now, of course, we have to change these 
single quotes or double quotes to let C  
111:48 - sharp know that this is now a string. And what 
this is going to do is, it's now going to add  
111:53 - every single character in this, this character 
array, or this string is going to add every  
111:59 - single character to this string. And just 
to prove that, I'm gonna hit start, and then  
112:04 - we'll bring this over and voila, hello, world. 
Alright, now over in Python, I'm just going to  
112:11 - restore this back to its original state, then do 
a plus equals exclamation mark. Now, of course,  
112:18 - this is just going to take the Hello string, 
the A string, add an exclamation point to it,  
112:24 - and is going to print that out with the play 
button to confirm come down. And that exactly  
112:29 - what we got. Now, I want to again reiterate that 
Python doesn't care if you use double quotes or  
112:34 - single quotes for characters or strings. So unlike 
C sharp, we could just put world right in between  
112:41 - of two single quotes, and it will we hit play, 
it will print out for us without giving us any  
112:47 - errors or any problems whatsoever. That's just one 
of the benefits to using an interpreted language.  
112:53 - If you want to use single quotes or double quotes, 
that's pretty much up to you your own discretion.  
112:57 - But just to keep everything consistent, we're 
going to use double quotes for strings as well,  
113:02 - for this lesson, not before we move on, you might 
be wondering, oh, well, if we can do addition  
113:09 - operator, what if we use like a multiplication 
operator or subtraction operator, a division  
113:14 - operator? Well, unfortunately, the addition 
operator is the only arithmetic operators that you  
113:19 - can use on strings. So don't get too happy. Now, 
escape characters are actual characters, so I'm  
113:26 - not gonna go too deep into them for this lesson. 
But they're pretty important to string sing as  
113:31 - strings are an array of characters. But let's 
just look at a few of them real quick. So I'm just  
113:38 - going to add a few of them here. I'm going to do 
backslash in. And then I'm gonna do backslash T,  
113:45 - I'm gonna do backslash, single quote, backslash 
double quote, and then backslash, backslash.  
113:52 - Now these are, what is that five are the most 
popular escape characters. The first one, this is  
113:59 - new line, this is a tab. This is single quote, 
this is double quote, and this is backslash.  
114:08 - And I'm going to just print out this to show you 
that what they do, hit the start button, and then  
114:14 - bring this over. And so you have a new line, which 
is the backslash, N, and then a tab, which is  
114:22 - backslash, T. And then you have the single quote, 
which is backslash single, quote, double quote,  
114:27 - which is backslash, double quote, then you 
have backslash, which is backslash, backslash.  
114:32 - And these bad boys are handy because they help 
you do some things that are probably not intuitive  
114:38 - when you first start coding, for example, like how 
do you press Enter when you have just strings or  
114:43 - how do you use double quotes of strings required 
double quotes to initialize right so for example,  
114:50 - I'm just gonna get rid of all these. Just 
give you a quick example. I'm going to use  
114:57 - the escape character, double quote at the end 
and it looks good. Kill character double quote  
115:01 - at the beginning. And this is going to look like 
hello in quotes, I'm gonna hit the star button,  
115:07 - and then bring this over. And there you go, 
you've escaped from the syntax of strings by using  
115:14 - the escape character. Again, I went over this 
pretty briefly in this lesson. But if you want  
115:19 - to know more about that, check out the lesson I 
did on characters, and I go a bit more in depth  
115:24 - about them. So I'm just going to restore this 
back to how it was before I move on to Python.  
115:31 - Now over in Python, the syntax for the escape 
characters are the exact same, I'm just gonna  
115:35 - get rid of this line. And then just add them just 
as we have in C sharp, backslash t backslash,  
115:45 - single, quote, backslash double quote, and then 
backslash backslash. Make sure to add that double  
115:51 - quote back. And yeah, there you have it. One cool 
thing about this is actually a Visual Studio Code  
115:58 - addition is that it will change the color of 
the escape characters in your string. So that's  
116:03 - pretty handy. I'm just going to print that out, 
we should get similar results. And there you have  
116:08 - it. Alright, so the next thing I want to get into 
is interpolated strings. Now, there is no reason  
116:14 - for a man to have so much love for a syntax, but 
I absolutely love interpolated strings. And here,  
116:21 - you'll love it too. here's, here's what's 
going on. Okay, so say we wanted to deliver  
116:26 - some message, right? I'm gonna get rid of all this 
and do like Hello, name. How are you? Right. Now,  
116:36 - let's say you didn't want to have actual name 
here. You want to have like some user input name,  
116:41 - right? So let's create a new string for that name. 
initialize string make it name equals job Brill's.  
116:51 - Right. So how you would do this normally is you 
would segment this string, you would do this  
116:58 - and you would delete this here and you would do 
plus, plus name, and then plus the string again,  
117:05 - right, so you have three different strings, but 
you have to break it apart to put the the string  
117:11 - variable here, and then you stitch it back 
together by plussing the last half of the string.  
117:16 - I mean, listen, it works, it'll get the job done. 
But when you have to write a lot of strings like  
117:21 - this, over time, it just gets really tiring 
and easy to get frustrated. But that is where  
117:26 - interpolated strings come into play. First, just 
to prove to you that this works, I'm just going  
117:30 - to hit the start button. And then we're going 
to bring the screen over here and bada boom,  
117:35 - it works fine. But with interpolated strings, now 
we no longer have to segment the strings anymore,  
117:42 - we can bring this back together as one string, and 
then simply come to the beginning of our string  
117:48 - and add the dollar sign. This dollar sign denotes 
that the string is now interpolated. And what that  
117:55 - allows you to do is in the middle of strings, you 
can add brackets, and inside of those brackets,  
118:01 - you can add variables. And so now when I print 
this out, check this out. This is so exciting.  
118:09 - Now you have the same exact thing, it's just 
that you didn't have to break up your string,  
118:14 - I love interpolated strings. So you can imagine if 
you have like a really long text or something like  
118:19 - that, and you have a lot of variables that you 
need to inject into that text, you can simply just  
118:23 - turn a string into an interpolated string, and 
just you know, add the brackets and your variables  
118:28 - all over the place. And it saves so much time. 
And it's just beautiful. I love it. No run Python,  
118:33 - it's pretty much the same thing. I'm just going 
to set this up and say hello name. How are you?  
118:42 - And the only difference in Python though, is 
instead of $1 sign, you're going to use an  
118:48 - F for interpolated strings. And so now we 
have the creator initializer name variable.  
118:55 - This is going to be jabril Rose. And so now we can 
do the same thing use the brackets and bada boom,  
119:04 - hit play just to prove it to you, and hello to 
Brill's How are you so beautiful, I love it.  
119:10 - And so the final thing I want to go over is just 
a few handy functions that come with the string  
119:15 - data type. And to demonstrate these handy 
functions, I'm going to get rid of this line,  
119:19 - it's no longer needed. And the first one I'm 
going to show you is a lower casing function.  
119:25 - So we can just do name equals name dots to lower 
end C sharp to lowers the method and use call  
119:36 - that add the semicolon. Then we come down here and 
then just print out the name. And what's going to  
119:42 - happen is it's going to take the name and then 
it's going to do it's going to lowercase every  
119:48 - single character within the name. It starts to 
prove that bring the window over here and you'll  
119:54 - see that it has turned this into all lowercase 
letters. This can be quite handy when Perhaps  
120:00 - you're creating like a database of users or 
something like that and you don't want duplicates,  
120:04 - then no matter what name they pass in to your 
database, you'll lowercase it every single time  
120:11 - and then just do a match against those. That's one 
of the most common use cases for that function.  
120:16 - But it's always good to know just in case you need 
it. Next, I want to show you the reverse of that,  
120:21 - which is an upper casing function. And 
instead of starting over completely,  
120:24 - I'm just going to add on to our console 
logging. So under the first write line,  
120:30 - I'm just going to do reset name back to equal 
to Brill's. And then we're gonna do name equals  
120:41 - name.to to upper is the function in C sharp. And 
then I'm just going to copy this Ctrl C Ctrl V.  
120:51 - And now it's going to first print to the console 
it and all lower, and then all upper and approve  
120:57 - that I'll hit the start button, and bring it 
over. And voila. Next up a really, really,  
121:03 - really useful function that comes with the string 
data type is the split function. So I'm going to  
121:11 - reset name, I'm gonna say name equals I'm 
do a little bit different this time, though.  
121:17 - jabril is what the comma in the middle because 
we're going to use that as our character that  
121:23 - we're going to use to split the string apart. So 
with this, we because we're splitting the string  
121:29 - into two, we need to have an array instead. So 
I'm gonna say, string, and then add the brackets,  
121:38 - let a note, let the C sharp know that it's an 
array, and we'll call it name to equals, and then  
121:44 - this we're going to name dot split, and then we'll 
pass in the character, we want to use the split as  
121:50 - gonna be the comma. And then we can simply just 
come down here and do console dot write line,  
121:58 - and name to. And then we want to do the first 
element of that array, which is zero. And that  
122:05 - is the copy and paste. And then we're going to 
print the second array element from that array,  
122:10 - which is one, and approve that it is going to 
split this I'm going to hit start here. And then  
122:15 - I'm going to bring the window over and you see 
that it's split the name based on the comma, jab,  
122:20 - reals, beautiful. And the final handy function 
I want to show you is the contains function.  
122:26 - So I'm just going to do name equals, 
I like the spaceship. I don't know,  
122:36 - I like the spaceship. And then we need a 
Boolean because contained returns a Boolean.  
122:43 - So Boolean, we'll just say does, 
and that equals name, dot contains,  
122:50 - and then we need to pass in a string 
here. And then we're gonna say the does  
122:58 - this contain the word the in it and then simply we 
just do console dot write line does. And then just  
123:07 - to prove that this does return a true value, if 
it returns, if it has the word the, in the string,  
123:17 - I'm going to hit start, and then bring the 
wind over. And you see the last right here  
123:21 - it was returned a true and yeah, contains is just 
another really powerful function that comes with  
123:27 - the string data type. Really good use cases for 
that, and always good to know. And over in Python,  
123:33 - it's just a little different than how they do it 
in C sharp. So we ever named here we're gonna do  
123:38 - name equals whoops, equals name, dots. Lower. Huh. 
And we're gonna do print name here. We're gonna  
123:50 - print that out, press the play button, show you 
that it lowercase is the name, just as we expect.  
123:56 - And then the next one, I'm going to do name again 
equals to Brill's, and name equals name dot upper  
124:08 - function, and then print name again. I'm going 
to print that out. And you'll see that we have  
124:15 - all lowercase and then all uppercase. And now 
this next string function is going to really  
124:20 - demonstrate how Python has a bit of an edge over 
C sharp in this regard. So we're going to do name  
124:28 - equals the same jab and then rails. And then 
here, all we have to do is name equals name,  
124:37 - dot split, we're just reassigned name and it will 
instantly turn this into an array. That easy,  
124:45 - reassign it and then all we have to do then is 
just to print name and to prove them and hit the  
124:51 - play button. And there you have it jab rails. 
Yeah, personally, this is one of my favorite  
124:56 - reasons for using Python is because of the 
ease of doing stuff. Like this versus over in C  
125:01 - sharp how we had to have our string name, we had 
to initialize a new string array to hold the new  
125:07 - string array we're about to make and then printing 
them out one at a time. This is just like three  
125:11 - lines of code. easy, simple. One of the advantages 
that I love using Python, and the final one is the  
125:17 - contains function. So it doesn't do name equals I 
like the space ship. And then come on down here,  
125:27 - and then do does initialize a Boolean called 
does. And then we're going to do name dots.  
125:36 - Contains, I'll explain why this looks weird in 
the second, and then the, and then we can print  
125:44 - does, alright, and just to prove that 
works can press play, and it does not work.  
125:52 - And that is because of course, I forgot to save 
it. So hit save, and then hit play, come on down,  
125:59 - and there you have it true value, I really just 
want to pause for a second here and emphasize that  
126:04 - Python really doesn't care if you use 
double quotes or single quotes. As you see,  
126:07 - we're using double quotes here for the name and 
single quotes for the string that it contains.  
126:12 - And it still returns true, it just interprets. 
Now, the reason why this part looks so ugly,  
126:19 - is because this is what's called a wrapper 
method, or a method wrapper rather, and it's not  
126:25 - important for you understand what that term 
is yet, in your early days of programming, but  
126:31 - essentially what this is, the Python doesn't want 
you to use this way. How they prefer you to use it  
126:37 - is if you were to go if and then the in name. So 
if the string the is a name, then we'll do print  
126:50 - does. Python really prides itself on you 
know, being a language is kind of close  
126:56 - to how we actually, you know, use language as 
humans. So this is how I prefer for you to use  
127:05 - this, this, this, this method rather. And just 
to prove that we're gonna hit play, we'll make  
127:10 - sure it's saved and hit play, and we should see 
two trues, which we do and that doesn't guys,  
127:16 - that's pretty much everything that you need to 
get started with programming in terms of strings.  
127:23 - char data types are pretty easy to grasp. char 
is short for character. And if you know how to  
127:28 - read and write in any language, then you know 
what a character is. first letter, your name,  
127:33 - character letter, you gotten math class character, 
that hashtag symbol that you overuse on social  
127:39 - media care, reg dir, any letter from any language, 
any single digit number, any sign or symbol, even  
127:46 - some glyphs like the yin and yang sign or a single 
character. But that's a bit beyond the scope for  
127:52 - this course, just keep this in the back of your 
mind for when you want to learn more about them.  
127:56 - But for now, just know that characters are very 
important in the world of programming this year,  
128:00 - a lot of overlap with a string data type, because 
a string of characters is what makes up a string.  
128:06 - In fact, way back in the early days of programming 
language, language, C strings didn't even exist  
128:12 - as a data type, you instead had to create an 
array of characters, but strings like desktop  
128:17 - downloads c colon backslash program files 
that all your applications are installed in  
128:22 - are all a series of characters that computers use 
on a daily basis to make your computer experience  
128:27 - as smooth as possible. Characters play an 
essential role for computers being able to  
128:31 - communicate and relay information to us. And 
that's pretty much all there is to it. Now  
128:36 - from here, there's not really much to go over. But 
let's have a quick look at how we go about using  
128:41 - characters in two different languages. Because 
I think it can be really helpful to see how they  
128:45 - compare and contrast. And plus, you'll pretty much 
learn two languages at once. So on the left, it's  
128:50 - a language C sharp using it Visual Studio, which 
should interest you if you want to do windows  
128:54 - development or want to make games using a popular 
engine called unity. And on the right is language  
128:59 - Python three using the ID Visual Studio code, 
which should interest you if you want to get into  
129:04 - more general programming or data science. Alright, 
so here I have two brand new console projects. And  
129:09 - if you don't know how to make a new console 
project, neither C sharp or Python or both,  
129:13 - be sure to check out the video in the description. 
It's called How to install an ad. And at the end  
129:18 - of that video, I'll show you how to do that. So 
first things first, let's look at some basic char  
129:23 - syntax. So over here on the left, and C sharp 
is going to remove that that come standard with  
129:28 - your blank console project. And then I'm going 
to write char which is casting our data type.  
129:34 - And then we're call our variable a, and I'm going 
to assign a z character to it. Now, this is how  
129:43 - you write a character a character in C sharp must 
always be in the middle of two single quotes.  
129:50 - And it's really as simple as that we can put any 
character we want in here we can put a we can put  
129:55 - j we can put eight, we can put the dollar assign 
any character you want can go in between these two  
130:04 - single quotes, and there you have a char. 
Now over in Python assigning chars is just a  
130:11 - little bit different. So we can do just as we 
do in C sharp, we can do a equal single quote z.  
130:18 - However, we can also do a equals double 
quote, and z. And Python will set either one,  
130:25 - and it will figure out that these are both a char. 
But you'll see if we go back into C sharp, and  
130:32 - then change these from a single quote, to a double 
quote z, you'll see that we'll get a type error.  
130:39 - The in C sharp, it specifically uses double 
quotes for strings, and single quotes for  
130:45 - chars. But again, in Python, it's pretty smart, 
we're figuring out you know, if it's a char,  
130:50 - or a string, one of the benefits to an interpreted 
language. And just to prove to you that this is  
130:56 - the case, I'm going to actually change this to 
variable b. And then we're going to do Print  
131:03 - A, and then we're gonna do print B. And 
we're going to hit the play button up  
131:09 - here in the corner, and you'll see down here 
in the output, it prints both of them. Zizi,  
131:13 - no problem. I'm gonna change this 
back to single quotes real quick.  
131:19 - Right? Okay, so now with the basic char syntax out 
of the way, let's talk about escape characters.  
131:25 - Now, what are escape characters, there will 
undoubtedly come a time where maybe you're writing  
131:31 - out some story or creating like a list of names or 
something like that. And you will undoubtedly come  
131:36 - across the question, How do I press Enter? Or hit 
tab or insert quotes? How do I do these things?  
131:46 - Well, that is where escape characters come into 
play. Alright, so now let's initialize an escape  
131:51 - character, I'm just going to cast a new variable 
as a char. And then inside my character, I'm going  
131:59 - to hit backslash. Now technically backslash 
is the escape character like to escape the  
132:05 - syntax of characters. But I like to call the 
whole character as an escape character. It's  
132:12 - in, it's up for debate. But I'm going to 
hit backslash in which is one of the most  
132:17 - common escape characters called new line. Now, I 
really want you to understand how important escape  
132:23 - characters are. If I were to, for example, replace 
the backslash with forward slash, for example,  
132:29 - you see, they will get an error down here for 
too many characters and character literal.  
132:34 - Everything within the single quotes is what's 
called the character literal. And you can only  
132:39 - put one character per character literal, these 
count is two. But when you put the backslash,  
132:46 - that counts as one character literal, which, 
again, this is a new line escape character. And  
132:52 - just to prove to you that it actually does what 
I claimed that it does, we're going to do console  
132:59 - dot write line, this is just going to print up the 
terminal for us, I'm gonna do a print A, which is  
133:05 - a variable that has z in there, and then we're 
gonna do another woman to A, B, and then I'm  
133:12 - just copy and paste Ctrl C Ctrl, V, and then 
we're gonna do another a, so what we should see  
133:17 - is in a print out z, and then new line, and 
then another z, I'm just going to run that.  
133:24 - And it's off screen. Oops, I forgot I have to 
also do console dot read key, otherwise, the  
133:33 - console will not stay open. So hit start, it's off 
screen here, I'm going to bring it on the screen.  
133:40 - And you'll see that we have exactly what we should 
expect. Now, I know there's some y'all out there  
133:46 - probably going Wait a second jabril. That is not 
what I expect. There are two spaces in between  
133:52 - the Z's. And let's just pause here for a second 
and really examine the logic of our program.  
134:00 - So the reason that we're getting two lines in 
between a B and A when you probably expect no no  
134:06 - lines in between them, is because the function 
right line itself, it does a new line for us.  
134:12 - So it prints out z equals z will print out z, and 
they'll go to a new line, and then I'll print out  
134:19 - a new line and then go to a new line and then 
print out z, then go to new line. And I'm  
134:24 - going to just run that one more time. Just confirm 
that's what happens prints out a goes to new  
134:29 - line prints out new line goes the new line, then 
prints out z and goes to new line word ends there.  
134:34 - So it's doing exactly as as you as we want it to 
do. It just looks a little weird in this context,  
134:41 - because the right line function adds a new line 
without really telling us it Yeah. Alright, so  
134:48 - now with that out of the way, let's check out our 
escape characters in Python over here on the left,  
134:53 - I was going to change our B variable to be single 
quotes. I'm just gonna use single quotes because  
134:58 - it's easier convention between the two, and we're 
going to do a new line. And I have that backwards  
135:05 - supposed to do backslash. And you can see in 
Visual Studio code, it'll actually slightly  
135:11 - tint the escape characters yellow for you to help 
you give a little more assistance, which is nice.  
135:16 - Visual Studio regular doesn't want to do that, 
anyhow, new line, and then we're going to print  
135:21 - out a and then we're going to print out B, and 
then I'm going to copy and paste one more a. And  
135:27 - then let's run this by hitting the play button. 
And you'll see that we have the same exact result  
135:33 - that we have in C sharp and you already know why 
there are two lines there. Moving right along,  
135:37 - let's take a look at concatenating characters 
concatenating, it just simply means taking a few  
135:44 - different things and putting them together. 
So if you have three different characters,  
135:47 - for example, you can concatenate them, and they 
become one word or one phrase, what have you.  
135:52 - That's all to concatenate means so to concatenate 
characters, you would think it would be as easy as  
135:59 - you know, a new character c equals a plus a. But 
it's not that simple. In C sharp, when you add two  
136:08 - characters together, the character data type takes 
the addition operator in turns the characters into  
136:15 - intz. In fact, every single character under the 
hood actually has an integer value assigned to it.  
136:21 - And we take a look at this chart here, which 
is this is the ASCII chart part of Unicode,  
136:25 - you can see that every single character has some 
sort of decimal value assigned to it. So we could  
136:31 - take the character two, for example, and do two 
plus two. And that will get us 100, which is a  
136:38 - lowercase D character. But just know There aren't 
too many use cases, for operations like that, just  
136:44 - know that this is how it works under the hood, 
it's interesting stuff to know. But let's move  
136:49 - on. So what you want to do is you actually 
want to turn your characters into a stream,  
136:57 - just like that, and then you'll get an error. 
Because again, when you use the addition operator  
137:03 - on characters, they get turned ence and you're 
trying to assign an integer to a string. So  
137:08 - way to override that is simply just right to 
double quotes, and then just plus to it, it's  
137:14 - like a shortcut to quickly convert whatever the 
assignment is to a string. The assignment, again,  
137:21 - is everything that's on the right side of the 
variable. And so now we can just add all of our  
137:26 - characters, the string C. And so I'm just going to 
do a plus b plus a, which is z plus new line plus  
137:33 - C. And then I can delete two of these right lines. 
And then I'm going to add c instead of a, and then  
137:41 - I'm gonna hit play. Don't bring this over. And 
you can see here that it's a bit different now.  
137:49 - Now, why is that? Well, let's take a look. Again, 
right line, every time you call this function,  
137:56 - it will return to a new line, however, we use a 
string and only one write line. So there are no  
138:03 - new breaks other than the one that we coated in. 
So it's literally does print z, go to new line,  
138:10 - and then print another z, as you see here, print 
z go to new line, then print z. So that's what's  
138:18 - going on there. Everything with programming, it's 
always really basic logic that you have to follow.  
138:23 - And, yeah, now in Python, because Python is an 
interpreted language, it makes doing stuff like  
138:30 - this really easy. All we have to do really is 
just do c equals, then we can do a plus b plus  
138:40 - a simple as that, come down to our prints, we 
don't need two of them. So I'll delete two of  
138:47 - them. And instead replace a with C, and then save 
that hit the play button in the corner. And you  
138:53 - can see that we have the same exact result. It 
prints out an A goes to new line, I'm sorry, it  
138:59 - prints out a z goes to new line, and then prints 
to another z, as you see here. Simple, easy.  
139:06 - God bless Python. So that's pretty much all that's 
to concatenating characters. Let's now take a look  
139:13 - finally, at the remainder of the most important 
escape characters. So your you know backslash in  
139:20 - or the new line escape character. There's another 
pretty important one that you should know as well.  
139:25 - And that is backslash, R. This is the return 
character. So what the return character does,  
139:32 - it returns back to the beginning of the line. Now, 
back in the old days, this was really important  
139:38 - to us, because you would go to a new line, but 
it wouldn't return back to the beginning. Just  
139:43 - wherever you left off in the previous sentence, it 
would just go to new line at that same exact spot.  
139:49 - So you had to call the return escape characters 
to make it go back to the beginning of the line.  
139:55 - So what happens if we were to run this in 
the console? Let's hit start the play button.  
140:00 - I'm going to bring it over and you'll see that 
we just have one character. And that z. Even  
140:05 - though we have z return z, what's happening is 
that it's printing out z within, it's going back  
140:13 - to the beginning of the line and printing z again. 
And just to prove this, we can change this to why.  
140:20 - And then just just for extra proof, 
we can change, we can add a plus u,  
140:27 - and hit start play button. And you'll 
see what happens is it prints out z,  
140:34 - but then the return character returns to x and 
get in line, and then it prints out a y. And  
140:39 - then it prints out a you essentially overriding 
our first character, which is z. Now in the new  
140:45 - modern age, you're not really going to use the 
return character too much. However, I bring it  
140:49 - up because it is good to know there might be 
some scenarios in which you might be using an  
140:54 - older terminal or, or an older engine or something 
like that. And you're losing your mind that you're  
140:59 - using the new line escape character, but it's 
not returning to the beginning sentence. Here,  
141:05 - this is the return character use that it will all 
your problems will disappear. Furthermore, in most  
141:12 - new modern programs in terminals, next y&z the 
new line is actually it actually looks like this,  
141:19 - and also looks like new line and then return. And 
we can demonstrate that, interestingly enough,  
141:26 - if we come over to Python and replace the new line 
shape character with a returning escape character,  
141:32 - hit save, then play, you'll see that what we get 
is not what we expect, it actually is a new line,  
141:39 - instead of a return. And the reason for this is 
because what we're using to interpret the code  
141:46 - is something called code runner. And the 
way that code runner interprets a return  
141:51 - escape character is likely like this, I 
can't verify it. But this is likely how  
141:58 - it interprets just a regular return character, 
thus, while we have a new line and a return.  
142:05 - And furthermore, if you really want to 
see the difference between code runner and  
142:10 - you know, the terminal PowerShell that 
ships with Microsoft Windows, you can hit  
142:15 - right click on the name of the Python script 
reveal in Explorer, and then just double  
142:21 - click on this to run the Python script. Oh, 
wait, I'm sorry, we have to add input here.  
142:29 - input, we'll keep the term open, double click 
on the Python script. And there you have it,  
142:36 - we have exactly what we expect. That is just 
the difference between two different terminals  
142:41 - interpreting interp breading sorry, code. 
Okay, I hope that wasn't too confusing. Again,  
142:49 - you won't really have to worry about, you know, 
using characters in this manner. Oftentimes, most  
142:55 - people don't even you interface with characters 
this low level, but it is good stuff to know  
143:02 - when you're dealing with strings all the time. And 
yeah, let's move along. The next escape character  
143:08 - is backslash t, which is a tab character. 
I'm going to turn this back into our simple,  
143:16 - simple string. And then I'm going to hit 
the start button and bring the console over  
143:22 - and you can see that is z, tab z. Simple 
as that Python, it's the same, just do a  
143:31 - backslash T. And we hit the play button, you see 
that z, tab z? Easy. So the next escape characters  
143:39 - we're gonna look at are the, quote, escape 
characters. So at some point, you might want to  
143:44 - add the character single quote, or something 
like that. And you go to do that you're like,  
143:49 - Okay, cool, single quote. Wait a second, that 
how do I do that? Well, of course, simply put,  
143:56 - just add the escape character, backslash, 
and then single quote. So this right here,  
144:01 - these two pieces, the backslash, and the single 
quote is the single quote, escape character.  
144:09 - And of course, you can do the same thing with 
that four string. So let's say you want to write  
144:14 - out some code or something, you can do backslash, 
and then a double quote. And that is the double,  
144:21 - quote, escape character. So now if we just 
run this program, hit the start button,  
144:25 - you can see that we get some really weird string 
with the double quotes. The single quote z  
144:30 - is just a demonstration to show you how you can 
use quotes if you really need to. And now in  
144:36 - Python, it's actually a little bit different. So 
we can still do the same. Use the backslash, whoa,  
144:42 - I'm going to replace that backslash and then 
single quote, to get our escape character  
144:49 - single quote, for example, you can hit play. 
Oh, and saying sorry, running. Oh, of course,  
144:54 - I have to stop code on right click on the output, 
and then do stop. Code run if you have input,  
145:02 - just a quick caveat, because you won't be able to 
hit that play button anymore. But I'm gonna hit  
145:06 - play. And you'll see that we have our sin called 
escape character, I replace with double quote,  
145:14 - same deal, right, hit the play, you 
see that? Oh, wait, I have to save it,  
145:19 - sorry. And then hit play. And you'll see they 
have a double quote, no big deal, right? Now,  
145:24 - how Python is a little more special a little 
different is that we can use either single quotes  
145:30 - or double quotes for a character literal. So we 
can, you know, if we want to use a double quote,  
145:35 - we just use single quotes on the outside. 
And then I'm gonna save that and hit play.  
145:40 - And it's the same exact thing. But if only is the 
same, quote, I can change the outside quotes to  
145:46 - be double quotes, like so. And just put a single 
quote in the middle, and then save that hit play.  
145:52 - And you see that we have a single quote in the 
middle of twosies. So that's another benefit to  
145:57 - an interpreted language. It might save you a bit 
of time there. But it's just yeah, it is what it  
146:04 - is. And the last important escape character is 
actually the backslash itself. At this point,  
146:12 - you already know where I'm going with this. But 
if you want to write a backslash escape character,  
146:16 - you have to do backslash to escape out, and then 
another backslash. So two backslashes will get  
146:22 - you one. And just to prove that, I'm gonna remove 
this right there, and then I'm gonna hit the start  
146:29 - button, bring this over, and voila, z, backslash, 
z. And over in Python, it's the same exact thing,  
146:38 - you just have to do backslash to escape out, 
and then another backslash. And I'm just gonna  
146:44 - save it play. Come on, down. And there you go, z, 
backslash, z. And there you have it, guys. That's  
146:52 - pretty much everything you need to know to get 
started with programming in terms of characters.  
146:59 - Let's talk about floats, floats sent for floating 
point values, or floating point numbers, both are  
147:06 - pretty much the same thing in which you could 
think as numbers or values that float somewhere  
147:11 - in between integers. So if both one and two are 
integers, with two coming right after one, then a  
147:17 - float makes up all the numbers in between one and 
two 1.1 1.2 1.3 1.4 1.5 all the way to 1.9. But  
147:27 - make no mistake about it floats aren't limited to 
just one decimal place value. Pi, for instance, is  
147:34 - a float, it's most commonly represented as 3.14. 
But we have no idea how many actual decimal points  
147:41 - pi has, as it stands, researchers have calculated 
the two quadrillion digit for pie, and are still  
147:48 - researching how to calculate even more digits. So 
in short, the floating point values in between two  
147:53 - integers are infinite. And that is pretty much the 
basic two floats, they can honestly take a little  
147:58 - work to understand them in their entirety. But for 
now, all you need to know is that they are values  
148:03 - in between integers. So now let's take a look at 
a few examples on how to use floats with code.  
148:08 - And we're going to do this by using two different 
languages because I think it can be really helpful  
148:12 - to see how they compare and contrast. And plus, 
you will pretty much learn two languages at once.  
148:17 - So on the left is the language C sharp using the 
ID Visual Studio, which should interest you if  
148:22 - you want to do windows development, or if you want 
to make games using a popular game engine called  
148:26 - unity. And on the right is language Python three 
using the Add Visual Studio code, which should  
148:32 - interest you if you want to get into more general 
programming or data science. Alright, so here I  
148:37 - have two brand new console projects. And if you 
don't know how to make a new console project,  
148:40 - neither C sharp or Python, or both, be sure to 
check out the video in the description. It's  
148:45 - called How to install an ID. And at the end of 
that video, I'll show you how to do that. Alright,  
148:50 - so the first thing I want to get into floats is 
the different operators. If you're familiar at  
148:55 - all with the operators, the integers use, then 
you'll be quite familiar with the operators that  
149:00 - floats use as well. Why? Because they are the same 
exact operators. So jumping right into it in C  
149:07 - sharp here on the left, I'm just going to get rid 
of these two lines that don't need them anymore.  
149:10 - They come standard with every single new console 
project. And I'm just gonna initialize a float.  
149:16 - So I'm gonna type out float. And then I'm gonna 
call it a just for an example. And I'm assign  
149:23 - zero to it. Actually, that's no fun because 
zero is integer. So let's assign, let's assign  
149:31 - 7.77. That sounds fun. Now actually, before 
we get into talking about operators, let's  
149:37 - touch a bit on the syntax between Python and C 
sharp. There's not really much to the differences  
149:42 - between the syntax of floats. However, in 
C sharp you do have to clarify that your  
149:48 - numeric value is a float by adding an F at the 
end of the numeric value. This is just further  
149:54 - instructions to tell the compiler on how they 
should go about handling this numeric value.  
150:00 - Simply meaning when your code is turned 
into instructions for a computer to do,  
150:04 - when it gets to this line right here, it reads 
the flow. And it knows without any confusion  
150:08 - that this is a floating point value. However, 
there is a caveat. Even though this variable A  
150:15 - is a float variable, you don't always have to add 
the float to the end of your values. For example,  
150:21 - if you instead just say float a is an integer 
seven floats automatically can convert themselves  
150:28 - from integers to floats, therefore, you don't have 
to add the F. Now while in C sharp, you have to  
150:34 - add the F at the end of floating point values. In 
Python, you don't have to do that, all you have to  
150:40 - do is just type out whatever value that you want 
to do 7.77. And Python will take care of the rest  
150:46 - for you. And Python is able to do this because 
it's a type of language called an interpreted  
150:51 - language, where all you have to do is assign 
a value to a variable. And it will interpret  
150:56 - what data type that variable should have, which 
in a lot of cases is pretty nice, because you  
151:02 - don't have to worry about the differences 
between floating point values are integers,  
151:06 - you can just do sums and multiplication division, 
and not have to worry about any of that stuff. But  
151:12 - now let's get into some operators starting with 
the increment operator. So an increment operator  
151:17 - does exactly what it describes it increments and 
the syntax for that goes like this, a plus plus,  
151:26 - that's it. If we were to come down here and do a 
console dot write line, that just will print to  
151:33 - the console for us. And then we also need to 
console dot read key for C sharp so that the  
151:38 - console doesn't close on us. And I'm gonna hit the 
start button and bring the console window over,  
151:44 - you can see that it just increments it by one 
plus one to 7.77 gives us 8.77. And that is the  
151:52 - increment operator. Now in my experiences, it's 
not like a terribly good, handy tool. But it can  
151:59 - save you some times oftentimes, if you just want 
to add one to something, instead of having to do  
152:03 - like full out. Other operators need to do you 
know the variable plus plus and you're done.  
152:09 - And to do the increment operator in Python, you 
actually can't do an increment operator in Python,  
152:16 - if we were to type out a plus plus, you can see 
that our ID shows that it's red to let us know  
152:21 - that this is not a thing in Python, every language 
is different. And Python just doesn't care about  
152:26 - the increment operator, I guess. So now imagine 
that you want to add more than one to your float?  
152:32 - How would you go about doing that? Well, that is 
where our next operator, the addition operator  
152:37 - comes into play the syntax for the addition 
operator goes like so. So you want to do a or your  
152:44 - variable, your float plus equals and then whatever 
value so we can do plus equals one to do another  
152:51 - way to do an increment operator. Or we can pass in 
a flow we can do, for example 3.33, F, and again,  
152:59 - I added an F to the end of this value because it 
is a floating point value. And if we were to run  
153:05 - this hit the start button, bring the window over, 
you can see that we got 11.1. Now just the minor  
153:11 - note just to make sure we're covering all bases, 
you can see that it does not pronounce 11.1 F. And  
153:17 - the reason for that is because the F is something 
that only the computer needs. Once the computer  
153:21 - sees the code reads to F and sees that it's a 
floating point value, there's no point to return  
153:26 - that back to us because we're humans, and we're 
smart. And we know the difference between a float.  
153:31 - And just by looking at it moving a long to use the 
addition operator in Python, it's absolutely no  
153:38 - different syntax wise, you do your variable in our 
case, a plus equals 3.33. And again, we don't need  
153:45 - add f because it's Python in Python doesn't care 
about F's far to come down here and write print  
153:53 - a and then save it and hit the play button 
you can see down here that we will get  
153:58 - 11.1. And as far as adding is concerned, the final 
way that you can add value to your float is by  
154:04 - doing something that I like to call a modified 
assignment. Now this isn't a technical term.  
154:09 - I'm not sure if it has one or not. But I like 
to distinguish this from regular assignments.  
154:15 - So what we're going to do is just get rid 
of all this just to clear up confusion.  
154:19 - And then we can do a equals a plus 3.33 F. 
And there you have a modified assignment. Now  
154:31 - Whoa, what's going on here looks a 
little bit confusing. Well, don't worry,  
154:34 - let me walk you through it. First thing you need 
to know is that this is the assignment operator.  
154:39 - And everything that is on the right side of an 
assignment operator is calculated first. So the  
154:45 - whatever the state of A is, which in this case 
is 7.77 is going to be added to 3.33. And once  
154:53 - that result is calculated, then it's going 
to throw that result to the left side of the  
154:58 - assignment which is again In a sauna, since we're 
assigning a to equal what it currently equals,  
155:05 - plus some extra value, we're just updating it 
really just a few different ways to do the same  
155:10 - thing. But you, as a developer have the choice 
to go with whatever best fits your programming  
155:16 - styles. And just to prove to you that this is 
the exact same result on hit the start button,  
155:20 - bring the window over, you can see that again, 
we have 11.1. And over in Python to do a modified  
155:28 - assignment is the same exact syntax. So I'm going 
to remove this lines to clear confusion start over  
155:34 - and we can do a equals itself, plus 3.33. And just 
to prove to you it's the same exact result, I made  
155:44 - the play button, you can see boom, another 11.1. 
Next up, we have a few operators for subtracting.  
155:51 - And the first one is the decrement. operator. 
Well, you already know what the increment operator  
155:56 - does. So guessing what the decrement operator does 
should be a no brainer. Yes, you guessed it is  
156:02 - simply just minuses one from your float. And just 
like the increment operator is plus plus, well,  
156:09 - the decrement operator is minus minus, that's all 
there is to it. And to prove to you that it does  
156:15 - what I say it does, I'm going to hit the start 
button, bring the wind over. And you can see,  
156:19 - we have 6.77, because 7.77 minus one is, of course 
6.77. And again, from my experience is not the  
156:28 - most helpful operator out there, it can help you 
save some time writing code here and there. But  
156:32 - it is what it is. And also again in Python, just 
as they don't have the increment operator, well,  
156:38 - they also don't have the decrement operator, I can 
type out a minus minus and you can see turns red,  
156:43 - then it's know that this is not a thing in this 
language. And so if you want to subtract more than  
156:49 - one from your float, you can use what's called 
the subtraction operator. And the syntax for  
156:54 - that is probably just as you expect, minus equals 
and then your float value, or your integer value,  
157:02 - whatever numeric value, and just to prove to 
omit the Start button and bring the window over.  
157:07 - And as you can see, 7.77 minus 3.33 equals 4.44. 
And over in Python, the subtraction operator is  
157:16 - the same exact syntax, we're going to get rid 
of this start over a minus equals and then your  
157:24 - value. And just to prove that to you met the 
play button, and you can see that we have  
157:29 - 4.43999999. Now some of you are probably going 
what's up this discrepancy, C sharp said 4.44.  
157:37 - But Python says 4.43999 bla bla bla bla, 
well, I'm just going to give it to straight  
157:44 - floating point values is something made by the 
devil, it's important to remember that floating  
157:49 - points are the values in between integers. 
And that space in between any two integers  
157:54 - is infinite, and anything dealing with infinity. 
But long story short, if you're just starting out,  
158:03 - you don't have to concern yourself with things 
like this at the moment, at some point in time,  
158:07 - perhaps he might dig into some project that 
requires like really precise floating point  
158:12 - precision. And at that point, you can pull your 
hair out. But for now, just know the reason why  
158:17 - you're seeing this is because in C sharp floats 
around to nearest digit, there are more accurate  
158:23 - data types. But that's beyond the scope for this, 
this course. And for almost all your applications,  
158:28 - two to three point floating precision is 
oftentimes good enough, you don't need to worry  
158:33 - yourself with this kind of accuracy. It's part of 
the reason why we have calculated about I think  
158:39 - the quadrillion digit of pi, but we often just 
round it off to 3.14. Because oftentimes, that's  
158:46 - a good enough precision estimate. Moving on, the 
final way that we can subtract is of course, by  
158:50 - using a modified assignment. And to do a modified 
assignment for subtracting all we do is get rid of  
158:56 - this and we do a equals itself minus 3.33 F. And 
just to prove to you that works, just as I say it  
159:05 - does, I'm hit the play button, bring it over, and 
you can see that we have 4.44. And over in Python,  
159:12 - the syntax is no different than C sharp, we 
can do a equals itself minus 3.33. I'm gonna  
159:20 - save hit the play button, and you can see that we 
got 4.43999. Next up the multiplication operator,  
159:28 - whenever you want to do multiplication to 
your floats, you simply just have to use the  
159:32 - multiplication operator. And the syntax for that 
goes like this A times equals two, for example,  
159:41 - and when you run this, it's simply just going to 
take your float a and times it by two and prove  
159:46 - that to you. I'm at the start button and bring the 
window over you can see that 7.77 times two equals  
159:52 - 15 point 54 and of course what you times your 
float by doesn't have to be an integer, it can be  
159:57 - a floating point. But of course it just has to be 
some numeric value. And over in Python, the syntax  
160:03 - is the same exact as it is in C sharp A times 
equals to prove that to you hit the play button,  
160:12 - and you see that we have 15 point 54. And of 
course, another way we can do multiplication is  
160:18 - if we do a modified assignment and the syntax 
for that, of course, you already know it is a  
160:24 - equals a times to prove that to you, I hit the 
start button and bring the wind over. And again,  
160:30 - we have 15 point 54. And in Python, the syntax 
is no different. We can do a equals a times two,  
160:39 - and then press play and show it to you that again, 
we have 15 point 54. Now one thing that you didn't  
160:46 - see me do is like something like a times times, 
and the reason for that is unlike subtraction or  
160:53 - addition, there is no sort of incrementing 
multiplication. What does that even mean,  
160:59 - really. And so moving on, the final operator is 
the division operator, which the syntax for that  
161:05 - goes as follows a divided by equals to Alice make 
an interesting, let's say, 2.15. And of course,  
161:13 - what this is going to do is going to take 
our a float, and it's going to divide it by  
161:17 - 2.15. and prove that to you, I'm gonna hit the 
start button and bring the window over a, we see  
161:23 - that we have 3.613953, that's gonna be fun to say 
over and over. And over in Python, the division  
161:29 - operator is the same exact syntax. So we can do a 
divided by equals 2.15. And to prove that to you,  
161:39 - I'm gonna hit the play button. And you can see 
that Python is a lot worse, we have 3.613953.  
161:46 - And it goes on and on. I know that I'm kind of 
demonizing the long decimal points with Python,  
161:52 - but it's actually a good thing that they give 
you this precision right out the box. And the  
161:56 - final way we can divide is by using a modified 
assignment, which the syntax for that looks like  
162:02 - this, I'm just gonna start over to make it a 
bit less confusing. A equals A divided by 2.15,  
162:11 - F. And just to prove that to you, I'm at 
the start button and bring the window over,  
162:15 - you can see again, we have 3.613953. And yeah, 
there you have it. floats are pretty useful in  
162:23 - the world of programming. They're used for a 
lot of different applications. And don't let me  
162:28 - scare you with the whole floating point precision 
talk. It's very, very rare that you'll have to be  
162:34 - in this world floating points. Usually, you 
won't go no further than like two or three point  
162:40 - precision, which at that precision, everything's 
really simple to understand. But that's pretty  
162:45 - much everything you need to know to get started 
with programming in regards to floats. It's time  
162:52 - to talk about arrays. Now, arrays are most often 
used with loops, but they can use in almost any  
162:59 - context. So what is an array? Well, you can think 
of an array as essentially a container that holds  
163:05 - a fixed number of variables that all have the 
same data type. So the fact that they're just  
163:11 - containers that hold variables, you can use 
these variables independently. in any context.  
163:16 - Say you want to update an array full of 
names with a couple of lines of code,  
163:20 - or maybe easily save an array of 100 emails to a 
file without having to copy and paste and change  
163:26 - the variable here and there. Well, arrays make 
doing things like this really easy to do. But  
163:30 - instead of going on and on with examples about how 
arrays are the coolest thing since sliced bread,  
163:35 - let's just jump right into looking at a few 
examples and use cases to learn how do we go  
163:39 - about using arrays with code. And we're going to 
do this using two different languages because I  
163:44 - think it can be really helpful for you to see how 
they compare and contrast. And plus, you'll pretty  
163:48 - much learn two languages at once. So on the left 
is language C sharp using the it Visual Studio,  
163:53 - which should interest you if you want to into 
Windows development, or make games using a popular  
163:58 - game engine called unity. And on the right is the 
language Python three using the it Visual Studio  
164:02 - code, which should interest you you're going into 
more general programming or data science. Alright,  
164:07 - so here I have two brand new console projects. And 
if you don't how to make a new console project,  
164:11 - neither C sharp or Python or both, be sure to 
check out the video in the description. It's  
164:16 - called How to install an ID. And at the end of 
that video, I'll show you how to do that. Alright,  
164:21 - so let's get a bit into arrays. So arrays 
are simply just a data structure, meaning  
164:26 - it's a certain way in which you can structure 
your different data types. So I won't get into  
164:32 - too much in how to use arrays. Otherwise, this 
video returns just like a long list of examples.  
164:38 - But let's jump into this. So the first thing 
I want to touch on is the different syntax for  
164:43 - arrays in both C sharp and Python. But before we 
do that, I want you to imagine that you're making  
164:49 - some sort of four player game, let's say and every 
single player starts with the same amount of HP.  
164:54 - So let's create those variables first over 
here in the lesson C sharp and get rid of  
164:59 - these two lines. Because I don't need them 
to come standard with every console project,  
165:02 - and I'm going to initialize an integer, I'm 
gonna call it HP one, I'm assign that to be 100.  
165:10 - And then I'm gonna do it again, assign another, HP 
to equals 100. And then int, HP three equals 100.  
165:21 - And then finally, ant HP four equals 100. Great. 
So we have four different integers for four  
165:28 - different players. But with the raise, there's no 
need for four different variables, we can simply  
165:34 - come up here and initialize a new integer array. 
And the syntax for that goes as follows. First,  
165:41 - we want to type out the data type that we want to 
put into an array, which of course, in our case,  
165:45 - is an integer. And if you want to denote that this 
is an array, you simply just add a start bracket.  
165:51 - And in bracket, this right here is how you 
denote an integer array data structure. And  
165:57 - so after that, we just type out our variable name, 
which I'm going to call it hp. And then we have to  
166:03 - assign to it a new integer array. And then within 
the brackets here, you have to specifies the size  
166:11 - of your array, which we have four players, so the 
size is four at a semi-colon, and you're done.  
166:18 - So now that we have our integer array with 
the size of four, we can now assign values to  
166:23 - what's called the elements of that array. And 
to do that, I'm just going to come down here,  
166:28 - and I'm going to say HP, and then at the bring 
back the starting bracket and then typing the  
166:33 - element number. Again, it's the size of four. 
So we're going to start with zero. All right, so  
166:39 - you probably just got a little confused 
on why I started on zero instead of one.  
166:43 - Well, in most programming languages, arrays 
always start on zero. Why you ask? Well, zero  
166:50 - is a number two and in computing, zero 
is actually the first number, not the  
166:55 - biggest deal. But a really simple fact that it's 
important to remember because if you start on one,  
167:00 - you might get a lot of errors and might want to 
pull your hair out. So just remember with arrays,  
167:05 - zeros always first Anywho, we have the HP integer 
array at element zero. And what we want to do  
167:11 - is assign 100 to it. And now we just want to do 
this for all four elements, I'm going to do HP  
167:19 - of element one, assign another 100 to 
it, the HP of element two if I can type,  
167:27 - and then assign 100 to it. And then finally HP 
element three and assign 100. to it. Again, quick  
167:36 - note, you can see that we ended on the element 
three, although we initialized an integer array  
167:41 - with the size of four. But if you were to count 
them, you can see that we have four elements here,  
167:46 - 012, and three. And of course, the reason 
for this offset is because in computing,  
167:52 - we always start on zero, it can trip you up a 
lot at the beginning, but it's something that  
167:56 - you'll get used to eventually. Now I know if this 
is your first time learning about arrays, it can  
168:01 - be quite difficult to get a conceptual grasp on 
what's going on here. And so I'm going to walk you  
168:06 - through a quick visual. So what we have here is an 
array with the length of 901234567 and eight, this  
168:14 - bottom row right here is the index or the element. 
They're both interchangeable. But for this course,  
168:19 - I'm going to be calling it the element and this 
top row is the value at that element. And so if  
168:24 - this were our HP integer array, it would end right 
here, right at the third element. And after we  
168:30 - initialize the integer array, it was filled with 
all zeros in the value spots. And so what we did  
168:36 - in the code is we simply went through and assigned 
100 to every single element in that array.  
168:41 - And that conceptually is what's going on with the 
race. And that's not just for integers, it's for  
168:47 - every single type of array, if you have a string 
array, a float array, a character array, what have  
168:52 - you. Now with that out the way we no longer need 
these variables, we can delete those. And then  
168:58 - to prove to you that these work, as I say they 
do, I'm going to write a console dot write line.  
169:07 - So that we can print this to the console and 
I'll do HP zero, and then semi colon, I'm just  
169:13 - going to hit Ctrl C Ctrl V copy paste a few times 
and simply just change elements zero to one, two,  
169:21 - and three, we're also going to need a console dot 
read key. This is so that the terminal doesn't  
169:28 - close when we run it. And now I'm just going to 
come up here to the start, hit the start button,  
169:32 - and then bring the console window over to show you 
that we have four players with 100 Hp initialized.  
169:38 - Now last thing I want to mention on this is that 
if you try to assign a value to an element that  
169:43 - is outside of the range for that array, then you 
will get an error and to demonstrate that if I  
169:49 - come here and do HP of element four and assign 100 
to it, hit the Save button then play and you can  
169:57 - see that it gives us an exception Saying pretty 
much that we don't have an array of this size,  
170:03 - therefore you can't assign to the fourth element. 
So just be mindful of the size of your race. Now  
170:09 - over in Python, the syntax for arrays are a bit 
different. And Python actually doesn't even use  
170:16 - arrays, they actually use a type of data structure 
called a list. And you can initialize a list in  
170:23 - Python in two different ways. But the syntax for 
the first one goes as follows. First, we're going  
170:28 - to write out the name of our variable, which of 
course is HP, and then we're going to do equal  
170:32 - and then start bracket. And then you just type 
out whatever values you want in here. So again,  
170:38 - we have a four player game with four different 
players with 100 hp each. So I'm simply just  
170:43 - going to write 104 times with a comma separating 
each of them. And there you have it, that's done.  
170:51 - And then to prove it to you, I'm just going to 
write print and then pass in the whole array,  
170:56 - HP, hit the play button, and you can see that it 
prints out an array with four elements. As you  
171:03 - can already see, Python has a huge leg up when it 
comes to doing this type of stuff. In Python, we  
171:09 - really wanted to do two lines of code in C sharp, 
we had to do what eight 910, about nine different  
171:16 - lines of code. Big difference. And the reason for 
this you might ask is just the design philosophies  
171:22 - with the languages. Python is more designed to 
be really easy to use and do a lot of data stuff.  
171:29 - And C sharp was kind of piggybacked off of the C 
language. So that did carry over a lot of stuff  
171:33 - the C was already doing. But yeah, you get to 
pick and choose, there are pros and cons with both  
171:39 - of them. So that was the first way that you can 
initialize a list in Python. And here's the second  
171:44 - way, I'm going to come down here and do HP equals 
empty array. And then it's as easy as HP dot  
171:54 - append, and then your new parentheses because it's 
a function. And then you want to append whatever  
172:00 - you want. So I'll pin 200 for the first player, 
and then I'll append again, another 100 for the  
172:06 - second player, HP dot a pin, the third player 
and at last HP dot append for the last player.  
172:14 - And just to prove to you that does exactly what 
I say it does, I'm going to do print, again, HP,  
172:23 - come up here to the topic, the play button, 
and you can see that we print out 100  
172:27 - 100 100 102 times now this function is one of the 
benefits to using lists over array is that you can  
172:34 - initialize the empty list and just add to that 
list. And C sharp has one too, but it's a bit  
172:40 - beyond the scope for this video. Okay, so let's 
now talk about the real thing that makes a race  
172:45 - so powerful. And that's array iteration. Alright, 
so this is cool. Now we have all of our player HP  
172:51 - in one variable. But what if instead of four 
players with hp, you had 100 players with hp,  
173:00 - this would get old quick haven't read this out 100 
times. Well, that is where four loops come into  
173:06 - play. Now, arrays and for loops are like burgers 
and fries, they're just a perfect combo. So now  
173:13 - let's bring in a for loop so that we can easily 
assign a value to the elements in our array.  
173:17 - So I'm just going to come up here above our 
variables here. And I'm just going to write out  
173:22 - the for loop syntax. So for and then int i equals 
zero, and then semi colon, and then if i is less  
173:33 - than we have four elements, so four, and then 
we're going to do i plus plus if that is true,  
173:40 - and then we need to add our code block here. 
And then we simply just need to write our  
173:47 - variable. And two here, so I'm not going to 
go too much into the for loop on how it works,  
173:55 - because I have a full episode about that. So check 
that out if you're confused, but essentially,  
173:59 - on a very layman's level, the for loop, it's 
simply just assigns zero to our integer here,  
174:06 - and then if it's less than four, then we're 
just going to add to it every single update.  
174:10 - And we can then use the eye as a location 
within the for loop. And so with that, if  
174:16 - this four loop is less than four, then they will 
increment meaning it's going to stop at three,  
174:22 - which is exactly what we need, because our element 
also stops at three. And so what that means is  
174:28 - that now we can change this zero element two 
I element, and we no longer need these because  
174:34 - they will be set with the for loop. In addition to 
that, because we're also using the array element  
174:40 - for printing. We could even come down here and do 
console dot write line, and then HP of I elements,  
174:49 - meaning we no longer need these lines either. 
And so now just the proof to this works. I'm  
174:55 - hit the start button, and then I'm going to 
bring the window over you can see that we have  
174:59 - four For 100. So now back to the scenario I set 
up, say instead of four players you wanted 100,  
175:06 - well, we simply will come to our array size 
here. And we'll change the array size to 100.  
175:11 - And we also need to change the iteration for our 
for loop, one to stop at 100. And to prove that  
175:19 - to you, I can just hit the play button, and then 
bring the wind over here and there is 100 100.  
175:25 - It's a bit hard to tell. But there's, there's 
100, hundreds here and over in Python.  
175:30 - Again, the syntax for this is a bit different. 
So I'm just going to get rid of these lines,  
175:36 - because let's just start over. But again, we 
do have two ways we can go about doing this.  
175:41 - And the first way is really, really simple. 
All you got to do is do HP and then assign a an  
175:50 - array of 100, but times that by 100. and 
prove that to you, I'm gonna do print  
175:57 - HP, and then hit the play button. And you can see 
that we have 100 A hundreds in an array. Simple,  
176:05 - easy into the point God love Python. And for 
the second way, it's a bit more involved, um,  
176:11 - come down here and initialize an empty array. And 
then we're gonna do a for loop. The syntax is a  
176:18 - bit different in Python, for i in range of 100, 
and then oops, and then I'm going to come down  
176:27 - here. And because it's an empty, I said empty 
array, but it's actually empty list, we're not  
176:33 - going to get like the element of anything, we're 
simply just going to do HP dot append, and 100.  
176:42 - So then down here, all you got to do is print hp. 
And we should get two arrays of 100. Hundreds,  
176:50 - which probably is going to be a bit 
confusing, but let's do it anyway, hit play.  
176:55 - And yeah, there is the second one. And there's 
the first one completely identical. Two ways to  
177:02 - go about doing it, you as developer, you have the 
choice on which one you want to use. And so yeah,  
177:08 - that's pretty much the basics, all you need 
to know to go about using this data structure.  
177:13 - Anything from this point on would just be me 
listening out a million different examples on,  
177:19 - you know, different use cases. But if pretty 
much from this point on, it's up to you,  
177:23 - as a developer to get creative and apply this 
data structure in different ways. And hopefully,  
177:28 - you are starting to think of some different 
creative ways on how you might be able to use  
177:33 - arrays or arrays and for loops together. But 
that is everything that you need to know to get  
177:38 - started with programming in regards to a race. 
Okay, let's talk about the big bad variables  
177:47 - without even talking about programming. 
What does variable mean variable defined  
177:51 - by dictionary calm is something that has the 
ability to vary or change him believe it or not,  
177:56 - it means the same exact thing in programming as 
well. A variable is something used to store data,  
178:01 - you can think of it as a container, but what you 
put in this container can be changed and updated,  
178:06 - giving it the name variable. Now there is one very 
important thing that requires understanding when  
178:12 - talking about variables. And that is data types. 
If you can grasp this thing about variables,  
178:18 - I think you'll save yourself a log of 
annoying errors, especially in the beginning,  
178:23 - when you create a variable. all languages need to 
know the data type of your variable and to again,  
178:28 - thinking about a variable as a container. Imagine 
that we have two data types that we want to store  
178:32 - into a container. Let's just say one data type 
is reptiles and the others fish, well, you can't  
178:38 - store these two data types in the same container 
fish need to be surrounded by water in order to  
178:43 - breathe. And reptiles need land in often hot, dry 
climate in order to stay comfortable and alive.  
178:49 - So what happens if you drop a reptile into a 
containment for fish? That's right, you'll get a  
178:54 - type error, just as if you create a variable meant 
for billions and try and assign a string to it.  
179:00 - So how do we actually go about using variables 
with the different data types and etc? Well, it's  
179:05 - quite simple actually, let's take a look at some 
examples using two different languages because I  
179:09 - think it can be really helpful for you to see how 
they compare and contrast. And plus, you'll pretty  
179:14 - much learn two languages at once. So on the left 
is language C sharp using it Visual Studio, which  
179:19 - should interest you if you want to do windows 
development or want to make games using a popular  
179:23 - game engine called unity. And on the right is 
language Python three using the Add Visual Studio  
179:28 - code which interests you if you want to get into 
more general programming or data science. Alright,  
179:34 - so here I have two brand new console projects. And 
if you don't how to make a new console project and  
179:38 - either C sharp or Python or both. Be sure to check 
out the video in the description. It's called How  
179:43 - to install an ID. And at the end of that video, 
I'll show you how to do that. Alright, let's start  
179:48 - off by looking at initializing some variables and 
the syntax of that between C sharp and Python.  
179:53 - So over here on the left and C sharp I'm going to 
start by getting rid of these two lines because I  
179:58 - don't need them. They come standard with it. The 
new console project. And now let's take a look  
180:02 - at the five main data types. First, we have 
bullions. And you can initialize a Boolean,  
180:08 - like so, just type out the word bool. And then 
whatever name for your variable. In this case,  
180:14 - we'll just do a. And now let's initialize our 
next data type, which is a char. So you do that  
180:20 - by typing out the type of data, which again, is 
char, and the name your variable. Let's just keep  
180:26 - in alphabetical order going here, and I'll just 
name it B. And now the char has been initialized,  
180:33 - let's initialize our next data type, which is a 
string. And we do that by typing out the type of  
180:38 - data which is a string, and then keeping the 
alphabetical order, we'll just name it a C,  
180:43 - I think you can get the pattern at this point, 
we're gonna initialize the next data type,  
180:47 - which is an int, just type of the type of data and 
then name, the variable, we'll keep, we'll call it  
180:52 - a D keep the order convention going. Now, the last 
data type is a float, which we'll call an E. And  
181:00 - there you have it, initializing your variables in 
C sharp is pretty straightforward. You just type  
181:05 - out whatever type of data you want to initialize, 
and then name that variable. And that's for all  
181:10 - data types. However, this isn't the only way that 
you can initialize variables, you can also assign  
181:16 - something to those variables when you initialize 
them. And to assign something to variables, you  
181:21 - have to use what's called the assignment operator, 
which don't let that scare you, because it's as  
181:26 - simply as just typing equals, equals here, this 
sign is what's called the assignment operator,  
181:33 - it allows you to assign something to a variable. 
And for this Boolean, let's just assign it to be  
181:40 - true. So let's go through and assign something to 
all of our variables. So for our char variable,  
181:47 - let's assign the letter J to it. And then 
for our string, let's assign the string candy  
181:56 - to it our integer, let's assign the number 
13. And then for our flow, let's assign a  
182:03 - 7.77. f, that's, that's a good number. And there 
you have it, that is a another way that you can  
182:09 - initialize a variable. But heads up, it's always 
best practice to initialize your variables with  
182:14 - an assignment like true j, for example, these are 
assignments. And the reason for that is because  
182:20 - like the previous example, if you initialize them 
without any assignments, sometimes they can return  
182:26 - No. And if you're using that variable, you might 
come up with some weird edge cases, and you'll get  
182:32 - errors. So it's always best practice to just 
assign a value to your variables whenever you  
182:38 - initialize them. Now to initialize variables in 
Python, it's a lot simpler with a slight caveat.  
182:44 - So Python does away with the idea of having 
to cast your variables. So like over here,  
182:50 - in C sharp, we have to cast that our a variable is 
a bool datatype cast that our B variables a char  
182:56 - data type, typing the type of data next to it is 
what's called Data casting. And then Python, you  
183:02 - don't have to do that, all we have to do instead 
is simply type out the name of our variable and  
183:07 - assign something to it. So if we want to make a 
Boolean, we just assign a true value to it. The  
183:13 - Python language is a type of language classified 
as an interpreted language. And what that means is  
183:20 - Python interprets the data type of your variables 
depending on what you assigned to it. So at  
183:26 - the fact that we assigned a true value to the a 
variable, when you go to run your Python script,  
183:32 - Python will know that the a variable has 
a boolean data type, because we assign a  
183:37 - boolean value to it. And this goes for all 
variables. For example, if we just copy what  
183:42 - we did in C sharp, b equals j, and C equals candy, 
and then d equals 13, and then equals 7.77, Python  
183:54 - will interpret all of these variables into their 
appropriate data type. And there are benefits  
183:59 - to this. And to examine that, let's go back to C 
sharp for a second. Now at the fact that you have  
184:05 - to explicitly cast your data type in C sharp, 
the moment that you initialize that variable,  
184:10 - it is stuck with that data type. For example, 
if I wanted to come down here, and let's say,  
184:16 - I don't want a to be a char actually wants to 
be a bull. Well, I couldn't do bool b equals  
184:23 - true. For example, it will tell us that this 
variable has already been defined. So we can't  
184:30 - recast data types of variables. Well, can we 
just reassign the tab a different type of data?  
184:36 - And the answer is no, it will tell you that you 
cannot convert it from its original data type to  
184:42 - new data type is pretty much saying this variable 
already has a data type. However, in Python,  
184:48 - because it's an interpreted language, we can 
do whatever we want with our variables. So for  
184:52 - example, we can come down here and say like, I 
want B to equal true and it'll give you no error.  
185:00 - whatsoever. And to prove this, I'm just going to 
write out a print function here, print a, whoops,  
185:06 - A, B, C, D, E, and you will see that we will get 
two trues for a and b. Let's save and hit the  
185:16 - play button. And Wallah. Now, although this data 
type free syntax seems pretty cool and whatnot,  
185:22 - and don't get me wrong, it is really cool. It is a 
lot of flexibility, especially if you know how to  
185:27 - use it, right. But it can also cause some problems 
if you're not careful. A lot of the common issues  
185:33 - that I was finding myself in in the early days of 
learning Python with this data type free syntax  
185:38 - was that I was never really sure what data 
type some variables were. And I was trying  
185:44 - to use them in certain contexts, and it was 
just really messing me up. Another issue is  
185:49 - that there's nothing preventing you from easily 
reassigning a variable, when you didn't mean to  
185:54 - end C sharp, for example, they'll tell you 
if you already have a variable with that name  
185:59 - in your script. And it will also tell you for 
trying to change the data type for that variable,  
186:04 - which both kind of act as a sort of security, 
if you will, but either way both have their own  
186:09 - pros and cons, it's up to you decide which one is 
best for you moving along, one thing that I think  
186:14 - is really important to touch on is assigning your 
variables after initialization. So in C sharp, you  
186:20 - only have to cast the data type of your variable 
one time. In fact, you can only cast the data type  
186:27 - of your variable one time to demonstrate this, 
I'm just going to get rid of this line because  
186:33 - I don't need it. And let's try and reinitialize 
our a variable as a bowl with a false value.  
186:39 - So I'm going to cast our data type, I'm 
gonna do bool, and then a equals false.  
186:46 - And you can see here that it tells us that 
this variable has already been initialized.  
186:51 - Essentially, that's what it's saying. And of 
course, what you're assigning to that variable has  
186:55 - to be a value that is accepted by that data type. 
For example, Boolean only except true or false,  
187:00 - for example, and of course, in Python, because 
it's an interpreted language, this is no problem,  
187:06 - we can simply just do a equals false. And we could 
also do b equals false if we wanted to C equals  
187:13 - false. And why stop there, we can do d equals 
false as well. And we can even do c equals false.  
187:21 - Because this will all be interpreted when we run 
our script, which is now I made the play button  
187:27 - up at the top and you'll see we get all false 
and a 777. Because I didn't do II here sorry,  
187:33 - equals false save, hit the play button. And there 
you go all falses it was interpreted as soon as  
187:39 - you run the script. And so that is the gist of 
variables, they're really easy to get your mind  
187:44 - around, it's just you have to remember that these 
are pretty much containers that have some sort of  
187:49 - data in them with a specific data type. So lastly, 
I'm just going to leave you with a simple example.  
187:56 - So that you can kind of get a better idea on how 
variables are applied and how they're useful.  
188:01 - So imagine you're making some sort of game 
with the boss battle. And this boss can only  
188:05 - take damage, when it's either hurt, flashing 
or dizzy. It has to be in some sort of state.  
188:11 - So I'm just gonna create the scenario. Remove 
all these lines, don't need them start over.  
188:17 - First initialize an int, I'm gonna call it enemy 
hp. For example, that equals 50. And then get a  
188:25 - Boolean there recall this hurt. And let's just 
say that it's already hurt. So hurt equals true.  
188:31 - Get another Boolean, we'll call it a flashing, 
flashing equals true. And then let's do  
188:38 - ball. dizzy, let's say dizzy. And let's just say 
that it's not dizzy. It's not really important.  
188:45 - I'm just gonna use if statements to create 
those states. If hurt, then we're going to do  
188:53 - enemy HP minus equals four, for example. 
And then if I'm going off screen here,  
189:01 - if I'm what else is there, flashing? Oops. If 
it's flashing, then enemy HP minus equals four.  
189:11 - And lastly, sorry, see if what dizzy. Then 
also enemy HP minus equals four. Alright,  
189:21 - so just to explain what's going on here. It's just 
as I said, we have, let's say you're making some  
189:26 - game with the boss battle. And the only way that 
the boss can take damage as if it's either hurt,  
189:32 - flashing, or dizzy. Now, none of this is really 
important to the example that I wanted to create.  
189:38 - But it at least gives you an idea of a scenario. 
So now imagine that you did some testing on your  
189:43 - game and you figured out that for is not enough 
damage to make the game fun. You need that damage  
189:49 - to be higher. Well, you would have to go back into 
your script and change enemy HP minus equals you  
189:56 - know, let's just say seven enemy HP minus equals 
seven again In any HP minus equals seven. And  
190:03 - let's say that you had this reference to damage 
like all over your scripts, you have to do this  
190:08 - as many times as you as you have that reference. 
And this is a use case where variables are very  
190:13 - useful. So instead of having to do this, as many 
times as you make the reference in your script,  
190:19 - you could simply just come up to your variables up 
here and just initialize let's say, a new integer,  
190:24 - call it damage and set it to seven. And then all 
you have to do is go throughout your script, and  
190:29 - just add a reference to that the integer you just 
initialized. So my sequel stat, whoops, damage,  
190:39 - damage and damage. So now let's say that you 
retested your game again, and you're like, Oh,  
190:46 - wait, On second thought, seven is a bit 
too high, I need to bring it down a bit.  
190:50 - Well, instead of having to go again, through all 
of your scripts, and changing wherever you make  
190:55 - a reference to HP minus damage, all you have 
to do is now change one variable to you know,  
191:00 - a lower number, let's say six. And now all 
of these references are updated. And so  
191:06 - now that your damage value is a variable, you now 
have a lot more power with it, you can come down,  
191:12 - for example, so your dizzy state and say like, 
just for example, if he's dizzy, then what I want  
191:18 - to do is damage equals three, for example, I want 
to make it a lot weaker if it's dizzy, and this  
191:25 - will be updated whenever it's flashing, and you 
do this line, or you do this line. And of course,  
191:31 - I'll just quickly do this example in Python, it's 
going to get rid of everything, I don't need it.  
191:38 - I'm going to do enemy, HP enemy HP 
equals 50. And then hertz equals true  
191:49 - and flashing equals false and then dizzy. equals 
false. I got that backwards, this is actually  
191:59 - true. And then we have to do if hertz, then enemy, 
HP minus equals damage, I guess we need to damage  
192:11 - them just go straight for the actual example minus 
equals six. And then if, if what is it flashing,  
192:24 - then enemy HP minus equals damage. And if dizzy, 
whoops, dizzy, then damage equals three. And why  
192:41 - not just for fun, we can run this I'll do at the 
end of it all print and PHP, just see what we get.  
192:48 - I did not pre calculate this, we get 38. Very 
nice. And then if we print this in C sharp, we  
192:55 - should get the same result. I'm going to console 
dot write line. And then what is this enemy hp.  
193:03 - And then oops, similar icon then we also need 
a console dot read line. So the console doesn't  
193:09 - close on us when we run it. I'm at the start 
button up here and then bring the console over  
193:14 - and you see that again, we have 38 Very nice. And 
there you have it. Again, variables are pretty  
193:20 - easy to conceptually understand, but they get a 
lot more powerful and a bit more complex when you  
193:26 - start using different data structures like arrays 
and whatnot. But that's pretty much everything  
193:31 - that you need to know to get started with 
programming and regards to variables. Alright,  
193:37 - so in if statement is a type of conditional 
statement in programming, meaning it checks if  
193:42 - a certain condition is met an if statement in the 
most simplest terms is if this than that, in fact,  
193:49 - if statements in programming are actually 
shorthand for If This Then That statements,  
193:54 - one of the greatest lessons on fact that most 
people don't even realize with if statements is  
193:58 - that if statements are essentially just bullions 
they activate if something is true, and don't if  
194:05 - something is false. Now remember that because 
understanding that fact can save you a lot of  
194:10 - headache when trying to debug your if statements, 
you simply just have to look at your if statement  
194:15 - and ask is this returning a true or false value? 
And honestly, it doesn't get any more complex than  
194:21 - that. If you've ever asked when an IF question, 
you understand if statements Now let's look at  
194:26 - how to write an if statement with code. And we're 
going to do this by using two different languages  
194:31 - because I think it can be really helpful for you 
to see how they compare and contrast. And plus,  
194:35 - you'll pretty much learn two languages at once. So 
on the left is the language C sharp using the it  
194:41 - Visual Studio, which should interest you if you 
want to do windows development or want to make  
194:45 - games using a popular game engine called unity. 
And on the right is the language Python three  
194:50 - using the IDA Visual Studio code which should 
interest you if you want to get more into general  
194:54 - programming or data science. Alright, so here I 
have two brand new console projects and if you  
194:59 - don't have To make a new console project, neither 
C sharp or Python or both, be sure to check out  
195:04 - the video in the description. It's called How 
to install an ID. And at the end of that video,  
195:08 - I'll show you how to do that. Alright, so today's 
lab is going to be really simple and really easy,  
195:13 - because once I show you the Boolean secret with 
if statements, you're going to get it right away,  
195:18 - and you're not gonna have any problems with if 
statements moving forward. So just as I mentioned,  
195:22 - the secret that most people don't even realize 
with if statements is that they're really just  
195:26 - bullying that will run some code block if their 
value is true. But before we dig into that,  
195:31 - let's first look at some of the syntax differences 
between C sharp and Python. Alright, so starting  
195:37 - with C sharp over here on the left, I'm just 
gonna get rid of these two lines, because I  
195:41 - do not need them, they come standard with any new 
console project. And I'm going to write out an if  
195:46 - statement. And to do that in C sharp, first thing 
you need to do is just write out the word if,  
195:51 - and then you want to add parentheses, and 
then inside these parentheses are where you  
195:56 - want to put your Boolean, so I'm going to put 
true in C sharp, the true value is lowercase.  
196:03 - And then under it, I'm just going to write 
out a start brace. And then in brace,  
196:08 - this is the code block that will run if our if 
statement is true. And there you have it. This  
196:14 - is how you write an if statement in C sharp From 
here, you can write any commands that you want in  
196:18 - here. So you can do like, I don't know console dot 
write line if you want to. And then we can put Hi,  
196:27 - for example, you can put whatever you want. 
And so long as this returns true, this Boolean  
196:33 - within the if statement in parentheses is 
true, then this block of code will be ran.  
196:38 - Now, before we move on to Python, I just want to 
mention one really important thing. If statements  
196:43 - in C sharp, they have to have the parentheses, and 
the Boolean has to go inside of the parentheses.  
196:50 - If you were to remove this, you can see that we 
will get a syntax error because if statements  
196:55 - in C sharp again have to encompass the boolean 
value in parentheses. Now over in Python, the  
197:01 - way that the if statement works is the exact same 
however, the syntax is a bit different. To write  
197:08 - an if statement in Python, we want to first write 
out the word if, and then simply just put true.  
197:15 - And the true value in Python is capitalized. So 
don't forget that. And then at the end, we have  
197:21 - to end it with the semi colon, I just want to 
pause here and make this distinction. While Yes,  
197:26 - Python doesn't use parentheses, it uses instead 
a colon. And this colon is what tells Python that  
197:33 - the Boolean for your if statement, it has been 
completed. And so moving along to do the code  
197:38 - block for your if statement in Python, it's a bit 
different than how C sharp does it again, the way  
197:44 - that we indicate a code block in C sharp is we use 
the two braces starting in and we put all of our  
197:49 - commands in the middle of those two braces, all 
which are under the if statement. But in Python,  
197:56 - instead, we have to go to the new line. 
And we use indentations instead of braces.  
198:02 - So let's give an example. and here we 
can just do like print. And then Hi.  
198:10 - And there you have it. And so the 
next natural question to ask is, well,  
198:14 - how do I add more commands to my if statement? 
Well, the answer is pretty easy. Actually,  
198:19 - anything that is under the if statement and is 
indented in will count within that if statements  
198:25 - code block. So for example, I'm just going to 
hit Ctrl C Ctrl V, just to give you an example.  
198:32 - So here are four different print functions that 
are all within this if statements code block,  
198:38 - because they all are indented in and they're all 
under this if statement. And so the next natural  
198:44 - question to ask is probably something like, Well, 
how do I exit this code block? I mean, I don't  
198:48 - want my whole entire program to be dependent on 
this if statement. And the answer is in Python,  
198:55 - indentation rules over everything. So for example, 
if you want to exit out of this code block, all  
199:01 - you would have to do is just come down and then 
return back to the regular regular indentation,  
199:07 - and just do print them out. For example. And just 
to prove to you that this works, as I say it does,  
199:14 - I'm gonna hit the play button right here. And 
you'll see that we get high high high amount. And  
199:19 - then I'm just going to set this to false to let 
you to let you see that we set this to false, this  
199:25 - code block will not run, you weren't going to get 
printed, I'm out hit the play button. And right  
199:29 - there all we have is I'm out. And another question 
you might have is well what about if statements  
199:35 - within if statements like nesting if statements, 
I think in C sharp, it's pretty obvious how you do  
199:41 - that you would just write in if another f within 
an F and do another code block and you can do  
199:48 - another if you want to. And this can go on forever 
and ever until you get tired. But in Python,  
199:54 - it's probably not as obvious for so I'll show 
you so you just right within That code block  
200:01 - which again, is indented one indentation out, you 
just do another if statement. True, for example,  
200:10 - colon, and then just another indentation. 
And you just keep this format going,  
200:16 - as long as you need to. And here we'll do 
another if statement. Hmm. Print another high.  
200:26 - And that's all there is to it. And here's the 
very last thing that I'm going to leave you with.  
200:31 - So in C sharp, I'm just going to get rid of 
all this just so it's a lot less confusing.  
200:36 - In C sharp, when you have a code block, you 
can leave that code block empty, if you want,  
200:40 - you have no errors, no problems. C 
sharp won't complain, you'll be fine.  
200:46 - But in Python, you can't do that. 
So if I remove all of these lines,  
200:50 - and just have our if statement, and then we 
will return in the notation after the statement.  
200:56 - You can see if we go to our problems here, 
you see that we get an error for that.  
201:01 - This is not allowed, you have to put at least 
something in there. So you know, if you just want  
201:06 - to write some if statement, just to fill it out 
later. For example, you can just put a if you want  
201:12 - to, which does absolutely nothing. And yeah, there 
you have it, guys, that's if statements for you.  
201:18 - I just want you to remember our little secret, the 
condition that if statements checks for they're  
201:23 - only a Boolean, and again, the code block will run 
if the Boolean returns true, and it will not run  
201:30 - if the Boolean returns false. And so with that, 
you can create some pretty intricate and complex  
201:36 - bullions and then just put that Boolean right here 
in the if condition from the most simplest program  
201:42 - to the most complex program. That is pretty 
much how every program works under the hood. If  
201:47 - you want to learn how to better use if statements 
I highly suggest you check out the Boolean lesson  
201:51 - that I did in that lesson I go over more detail on 
how to use bullions in some real world situations  
201:56 - and then once you create that Boolean you can 
just embed it in an if statement like this.  
202:01 - And yeah, that's pretty much everything you need 
to know to get started programming in regards to  
202:06 - if statements. So at the fact that you're watching 
a video on elf statements, I'm going to assume  
202:11 - that you know what an if statement is, or in other 
words, If This Then That statement in disguise,  
202:17 - but if statements alone are very limited, for 
example, say you build a robot to get lunch for  
202:23 - you, and you tell it if they have spicy jackasses, 
Delia's Give me one your robot goes to get lunch,  
202:28 - they don't have any spicy jack case to deal us. 
And so it returns not giving you anything. Now  
202:33 - you can't get mad at your robot because it 
did exactly what you instructed it to do.  
202:38 - Very literally computers are very literal, but 
that is where an if statements partner in crime,  
202:43 - the L statement comes in. Let's start with 
what is an elf statement? Well, in the most  
202:48 - layman's definition possible, an L statement is a 
conditional statement that will run if the initial  
202:54 - condition is not met, and they're very important 
to programming. Going back to our example, an L  
203:00 - statement would be the equivalent to telling your 
robot if they are spicy jack case, and Delia's  
203:05 - barmy one else give me anything, your robot 
again goes get lunch, they don't have any spicy  
203:10 - jack case and dalias that initial condition is not 
met. And so it gets you anything. And honestly,  
203:16 - elf statements don't get any more complex than 
that. They are pretty simple concepts to get  
203:20 - your mind around. Now let's look at how to use the 
L statement properly with code. And we're going to  
203:24 - do this by using two different languages because 
I think it can be really helpful to see how they  
203:28 - compare and contrast. And plus, you'll pretty much 
learn two languages at once. So on the left is the  
203:33 - language C sharp using the ID Visual Studio, 
which should interest you if you want to do  
203:38 - windows development or want to make games using 
a popular game engine called unity. And on the  
203:42 - right is the language Python three using the ID 
Visual Studio code which should interest you if  
203:47 - you want to get into more general programming or 
data science. Alright, so here I have two brand  
203:52 - new console projects. And if you don't how to make 
a new console project neither C sharp or Python  
203:56 - or both. Be sure to check out the video in the 
description. It's called How to install an ID. And  
204:02 - at the end of that video, I'll show you how to do 
that. Alright, so just like the if statement lab,  
204:06 - this else lab is gonna be pretty quick and 
easy because there's not much to it. So how  
204:10 - do we use an L statement? Well, the first thing 
that's important to know is that l statements  
204:16 - are completely useless without an if statement. 
They are 100% dependent on an if statement. To  
204:23 - demonstrate this over on the left and C sharp, I'm 
just going to get rid of these two lines because I  
204:27 - don't need them. They come standard with every new 
console project. And then I'm just gonna write out  
204:31 - else and then our code blocks. But you can see 
that we have an error, but syntactically we did  
204:40 - everything right as far as syntax is concerned. 
So what do we do wrong? Well, again, l statements  
204:46 - by themselves are completely useless. They need 
an F statement to depend upon. So to fix this,  
204:53 - I'm just gonna come above the else statement 
and write if and then let's actually do false  
204:59 - and then our code blocks. And then there you have 
it fixed. As you can see, we're getting no errors,  
205:05 - we have no issues, everything is fine and dandy. 
So let me explain this relationship that we have  
205:10 - going on here. So you have your if statement right 
here, and this code block is only going to be ran  
205:17 - if the Boolean inside the parentheses is true, 
but at the fact that it's we set it to false,  
205:23 - it's going to go down and do this elf statement. 
So in other words, if this statement is true, that  
205:29 - means whatever is inside this parentheses, if this 
returns true, then run this block of code, else,  
205:36 - run this block of code. As simple as that. And 
to demonstrate this, I'm going to write to the  
205:41 - console. So I want to use console dot write 
line. And then here, I'm going to put a plan  
205:50 - A, and then I'm going to come down here in the 
L OS, and then write console dot write line. And  
205:58 - I'm gonna do Plan B. And then of course, I need 
to add a console dot read key, just so that the  
206:06 - terminal doesn't close on us until we press a key. 
Hmm. And then just for demonstration purposes,  
206:13 - I'm going to change this to be a true 
value, then I hit the start button up here,  
206:18 - and bring the window over right here. And you 
can see that it prints out a plan A, and again,  
206:25 - very intuitive. The reason is, because we said 
If true, which if this whatever is inside the  
206:30 - parentheses is true, which we said is true, then 
it's going to print out this, and at the fact that  
206:35 - it's true, it ignores everything after that. Now, 
let's say that our if statement, Boolean returns  
206:41 - a false value instead, well, remember the logic, 
this is checking if whatever's in this parentheses  
206:47 - returns true, then run this code, else. If it 
doesn't, then run this code. And you can see  
206:54 - that Visual Studio, the ID is giving us a little 
heads up that this is not going to be reachable,  
206:59 - because it's kind of kind of put the alpha down a 
bit, it's a bit darker than the rest of the code,  
207:05 - which is a nice little heads up from the ID and 
just demonstrate that this works. Let me hit  
207:09 - the start button and bring the console window 
over. And you can see that it prints out plan  
207:14 - B, just as we expect. And now over in Python, 
the L statement works the exact same however,  
207:22 - of course, the syntax is a bit different. And 
just like the L statement in C sharp, we can't  
207:27 - just write an L statement by itself in Python 
either. So just for example, I'm gonna put a zero  
207:33 - and then hit the play button. And you can see 
that it returns a syntax error. And again,  
207:38 - the reason for this is that l statements need to 
depend on an if statement. And so I'm just going  
207:44 - to come above the O statement and then write an 
if statement, I'm going to say if false. And then  
207:52 - I'm going to print out what I'll just do one, yes. 
And then you can see that I use the wrong false  
208:00 - that is false for C sharps false in Python, and 
true in Python are both capitalized, trips me up  
208:06 - all the time. But there we fixed our l statement 
error. And just to make this look just like  
208:11 - the program that we did in C sharp, I'm gonna 
write Plan A here. And then I'm gonna write Plan  
208:18 - B there. And again, you can use single or double 
quotes for Python, and doesn't really matter.  
208:23 - But just make it look cleaner, I'm gonna 
use double quotes for both. And of course,  
208:27 - if I change this to a true value, then it's 
going to give us plan A, when I hit play,  
208:33 - Oh, I got of course do from print. Plenty. My 
mistake, let me just change this real quick  
208:44 - print, Plan A, and then hit play. And you see 
that we get Plan A and not Plan B. And of course,  
208:50 - if we change this back to false, and then 
hit save, and then hit the play button,  
208:57 - you'll see that we get Plan B instead. Because 
again, it checks if this statement is true.  
209:02 - Do this block of code. Else do this block of 
code. Simple as that. And the final thing that I  
209:09 - want to leave you with is that you can only have 
one l statement per if statement. For example,  
209:15 - if you come down here in C sharp and do if 
this statement, run this block of code else  
209:21 - from this block of code, and then we chained 
to another else. You can see instantly we get  
209:28 - a syntax error. Because even if you think about 
logic, this makes absolutely no sense. You're  
209:33 - saying if this is true, then run this is true. Or 
else just run this and then or else run this that  
209:41 - it just logically doesn't even make any sense. 
So that's why you can't do it. And of course  
209:45 - in Python, we can't do two l statements back to 
back either was going to type l 's and then print  
209:54 - plan. gosh dang it, Plan C save hit run 
See that we get a syntax here because it  
210:02 - makes absolutely no sense. And yeah, there 
you have it. l statements are pretty handy  
210:07 - when paired with if statements and of 
course your if statements are just regular  
210:11 - if statements in Jag bullions in there and 
make some really powerful logical operations.  
210:18 - And there is everything that you need to know 
to start programming in regards to L statements.  
210:25 - Alright, so you have if statements and you 
have Elif statements, but you also have  
210:29 - else if statements. So starting with the first 
obvious question, what is an else if statement,  
210:35 - so you build a robot to get lunch for you, and you 
tell it if they have spicy jack case, and dalias  
210:40 - Give me one else give me anything, 
your robot goes to get you lunch,  
210:44 - they don't have any spicy jack case, Delia's and 
sort of returns with getting you a cheeseburger,  
210:48 - but you realize that the restaurant doesn't 
serve french fries and now you wish that you had  
210:52 - something different because what's a cheeseburger 
without fries and soda? Correct something like  
210:57 - this. You can bring in if statements other 
partner in crime the else if statement. So how  
211:03 - does it work? Going back to our example, using the 
elsif statement, you can tell your robot if they  
211:08 - are spicy jackasses do is give me one else, if 
they serve french fries, give me a cheeseburger,  
211:14 - else give me anything. And with this program, you 
can send your robot to any restaurant and be sure  
211:20 - it'll get you what you want if the conditions are 
right, because if statements are pretty much just  
211:25 - bullions they're essentially like backup if 
statements. And that's pretty much all this  
211:29 - to an else if statement. Now let's look at how to 
use elsif statements properly with code. And we're  
211:34 - going to do this by using two different languages. 
Because I think it can be really helpful for you  
211:38 - to see how they compare and contrast. And plus, 
you'll pretty much learn two languages at once.  
211:44 - So on the left is language C sharp using it 
Visual Studio, which should interest you if  
211:48 - you're in the windows development or want to make 
games using a popular game engine called unity.  
211:53 - And on the right is language Python three using 
the ID Visual Studio code which interests you if  
211:58 - you want to get into more general programming or 
data science. Alright, so here I have two brand  
212:02 - new console projects. And if you don't how to make 
a new console project and either C sharp or Python  
212:06 - or both, be sure to check out the video in the 
description. It's called How to install an ID. And  
212:12 - at the end of that video, I'll show you how to do 
that. Alright, so just like the L slab, the elsif  
212:17 - Lab is going to be pretty quick and easy. Because 
again, there's not really too much to this.  
212:21 - So how do we use an else if statement? Well, 
just like an L statement, if elsif statement is  
212:28 - completely dependent on an if statement without an 
if statement in elsif statement is just completely  
212:34 - useless. And to demonstrate this over here in 
the left in C sharp, I'm just going to remove  
212:38 - these two lines because I don't need them, they 
come standard with any new console project.  
212:42 - And I'm just gonna write else. And then if and 
then true, and then my code block. And as you  
212:50 - can see, we get an error because this is invalid 
syntax, again, elsif statements are completely  
212:56 - useless without an if statement. And over in 
Python, it's the same exact thing, except for the  
213:02 - syntax for elsif statements, it's just a little 
different. So instead of else if typing that out  
213:07 - explicitly, you just type e L, i f, else if it's 
shorten, and then you can just put true here,  
213:16 - and then your colon and then your logic. But even 
if I were to put some logic here, let's just say  
213:23 - I'm gonna put zero, you can see that we get an 
error, I'm going to hit play. And it tells us  
213:30 - that this is invalid syntax. Again, the elsif 
statement by itself is completely useless. And  
213:36 - so to fix this, I'm just gonna come right above 
our elsif statement and add an if statement to  
213:41 - that. So if true, then we go on to do console dot 
write line. And then we're going to say Plan A,  
213:54 - and then I'm going to come down here and do the 
same console dot write line, and then plan spell  
214:01 - Plan B, semi colon, who's going to do the same 
thing in Python so that they are on the same spot.  
214:09 - Let's see true, then we want to do print planning. 
Remember, indentation is really important. So  
214:20 - we're going to come back down here. And then 
it also if that's true, they want to print  
214:27 - Plan B. And so what is all this same? Well, 
this is saying if this statement is true,  
214:34 - then run this block of code. Else. If this 
statement is not true, but this statement is true,  
214:41 - then run this block of code. And over in Python, 
it works the same exact way. So we have if this  
214:47 - statement is true, then run this block of code 
here. Else if this statement is not true, but  
214:53 - if this statement is true, then run this block of 
code, one difference on a point output To for the  
215:00 - elsif statement, it's a minimal difference. 
But Python really prides itself in being  
215:05 - like optimized in every way possible. And that 
includes like how many characters you have to type  
215:11 - for elsif. This is only four verses over in C 
sharp, you have to type seven, including the  
215:17 - space. Again, it's minimal, but differences or 
differences. Now here is where the real power  
215:23 - of elsif statements comes into play. What makes 
elsif statement so useful is that you can add  
215:28 - as many else if statements as you want, there are 
no limits. So if I come over here, and just grab  
215:34 - this, and then hit copy, and then paste and then 
paste, and then paste, you can see that we have no  
215:41 - errors, there's no problems, no issues, you can 
do this as many times as you want. In Python,  
215:46 - there's no difference, you can grab this copy 
and paste for example. And oops, and do this as  
215:52 - many times as you want. They'll do be careful with 
your indentation, make sure that your indentation  
215:58 - is always correct. And so with that, I think it's 
important to touch on the order of operation and  
216:04 - how important that is. So with any if statement 
tree, it always will first check the first one,  
216:10 - if the first one is not true, then it'll go to the 
next one. If the next one's not true, then it will  
216:15 - go to the next one, it'll keep on going blonde 
down the line until it gets one that is true. So  
216:21 - say, for instance, this one is true, then it's 
going to run this block of code, and it's going  
216:25 - to exit out, it's never going to even touch this 
elsif statement right there. And I can demonstrate  
216:30 - this for you. I'll just change this to plan C 
plan changes a plan D changes, plan E. And let's  
216:38 - say that the Boolean check here returns a false. 
And then let's say this one also returns a false,  
216:46 - and so does this one right here? Well, what we 
should expect is that it's going to check this  
216:53 - one, get a false elsif, check that one get a 
false L. So check that one, get a false, Elsa,  
216:59 - check this one and get a true, and then we'll run 
this block of code and should print out plan D.  
217:05 - And just to prove that I'm 
going to hit the start button.  
217:10 - And then I'm going to bring oops, we forgot 
to add a console. Console dot read key so that  
217:20 - the terminal doesn't close until we press a 
button. And then I'm going to hit the start  
217:25 - and then bring crossover and Wallah, we have 
plan D just as we expected. Now, of course,  
217:32 - this also works in Python, and I can prove that 
to you just going to change this to see the E  
217:41 - did I mess up a B, C, D E is m a one over here, 
either way, e f, and then we can set this one to  
217:51 - false. And then we can set this to 
false. And then we can set this to  
217:56 - false. And we should expect again to get 
to print out plan D going to hit the play  
218:02 - button and we see a plan D. And the last bit of 
information I think will be useful for you to know  
218:08 - is how to incorporate the actual elf statement. 
So let's say that you have some variable,  
218:13 - right? You have like a money variable. And you 
have this first statements like if I have over,  
218:18 - I don't know $1,000, then do this block of 
code. Else. If I have over, let's say $750,  
218:26 - then run this block code. If I have over 500, 
run this one, if I have over 250 for example,  
218:32 - run this one. If I have over 100 then run this 
one. And let's say that you have to print to  
218:38 - the console something, right? Well, if you do 
all these checks, and you have $0 and you'll  
218:43 - never print anything, but that's where the else 
statement comes back into play. All you have  
218:47 - to do at the very end of your if statement tree 
is just simply add else. I want to do a console  
218:57 - dot write line. plan what is f Plan F and 
that is all you got to do. Now take note  
219:06 - your elf statement has to be at the end of your 
if statement tree. It can't be anywhere else. But  
219:12 - at the very end. I mean even if you think about it 
logically, that's the only thing that makes sense.  
219:17 - And that's pretty much everything else if 
statements. The final thing maybe to note is that  
219:22 - else if statements are no different than if 
statements like this, and this are the same  
219:28 - exact thing. The only difference is that an else 
if statement is dependent on an if statement.  
219:33 - You remember that simple rule and you'll have 
no trouble using elsif statements and that is  
219:39 - everything that you need to get started 
programming in regards to else if statements. 
219:45 - For loops, it's time to learn all about for loops. 
Now, these are a very essential thing for any  
219:52 - programmer to know. So what is a for loop? Well, 
simply put a for loop is a shortcut to run a block  
219:59 - of code a certain number of times. So say you have 
four phone numbers, for example, and you want to  
220:04 - add an area code to each of them. Well, instead of 
hard coding this four times phone number one plus  
220:09 - equals area code, phone number two plus equals 
area code, phone number three plus equals area  
220:14 - code, etc, etc, you can just use a for loop and 
write up the logic one time to get the same job  
220:19 - done in less lines of code. And for loops are 
very powerful in this regard, because they scale  
220:24 - quite well. So for phone numbers isn't that bad, 
you can write out phone number 1234 plus equals  
220:30 - area code pretty quickly. But now imagine, instead 
of four phone numbers shown at area code two,  
220:36 - imagine that you had 4000 phone numbers, you can 
imagine how redundant it would be to have to write  
220:42 - out phone number 1234567, all the way to 4000 plus 
equals area code 4000 times. So let's take a look  
220:50 - at how we can use for loops to do amazing things 
like this. And we're going to do so by using two  
220:54 - different languages because I think it can be 
really helpful for you to see how they compare  
220:58 - and contrast. And plus, you'll pretty much learn 
two languages at once. So on the left is the  
221:03 - language C sharp using the ID Visual Studio, which 
should interest you if you're interested in doing  
221:08 - windows development or want to make games using 
a popular game engine called unity. And on the  
221:12 - right is the language Python three using the IDE, 
a Visual Studio code which should interest you if  
221:17 - you want to get into more general programming or 
data science. Alright, so here I have two brand  
221:21 - new console projects. And if you don't know how 
to make a new console, project new, the C sharp or  
221:25 - Python or both, be sure to check out the video in 
the description. It's called How to install an ID.  
221:31 - And at the end of that video, I'll show you 
how to do that. Alright, so for loops, for  
221:36 - loops are extremely useful tools in programming. 
So let's jump into it starting with some syntax.  
221:42 - Now the syntax for for loops in C sharp can be 
a bit tricky to remember. But it's not terribly  
221:48 - hard, you only have to remember these three 
things. But first, I'm going to remove these two  
221:53 - lines because I don't need them that come standard 
with every new console project in C sharp,  
221:58 - so we can just get rid of them. And this is what 
you have to remember, I'm gonna write this in a  
222:03 - comment just so that it's easier to remember. So 
a couple forward slashes for that. And so first  
222:08 - you write the word for, and then parentheses. And 
now in these parentheses, this for loop happens  
222:14 - in three steps. So let's segment in by adding two 
semi colons. And that last, the first thing yet  
222:20 - memorize is to initialize your variables variable. 
I'll just shorten this to initialize because we  
222:31 - were going to quickly run out of room. And then 
the second thing you have to remember to do is to  
222:39 - set your condition. And the final thing you have 
to do is give a command. So long as you remember,  
222:48 - these three things for loops will be really easy 
for you to remember. So now let's walk through an  
222:53 - example on how to initialize a for loop for real, 
I'm just going to come down here to the next line,  
222:58 - and I'm gonna write out the word for. And then the 
first thing I need to do is initialize a variable.  
223:04 - Now, the most common variable that most people 
initialize at this step is actually an integer  
223:10 - variable called I. And you'll assign usually zero 
to it. But you can assign whatever you want to it.  
223:16 - Actually, you can initialize any variable of any 
data type that you want here, but we'll come back  
223:20 - to that in a bit. And so the next thing we have to 
add here is the condition, which simply just asks,  
223:27 - How long do we want this for loop to run. And 
this condition here in this space is actually  
223:32 - just expecting a Boolean. And so let's write a 
Boolean in here. Let's say that we want to run  
223:39 - so long as is less than 10. Sounds good enough 
to us. And then the final thing we need to add  
223:44 - is the command and what the command, 
we simply just instruct our computer  
223:50 - to do something. So if we initialize an integer 
named I and assign zero to it, and we're saying  
223:55 - that we want this for loop to run so long as is 
less than 10. Then here, we can say, We want i  
224:02 - for every time the loop finishes to simply 
just add one, using the increment operator,  
224:08 - it just adds one to whatever variable we added 
the increment operator to. And then at last,  
224:14 - we just come down here and add our code block for 
the for loop. And now every single time that this  
224:20 - loop goes through, it's going to run everything 
within the code blocks, which again is every thing  
224:24 - that we add within these two braces, and then 
at the end of it is just going to come back to  
224:29 - the top and then when it comes back to the top, 
it's simply going to check our condition here,  
224:33 - it's going to ask is i less than 10? If 
true, then it's going to exit here. It's  
224:38 - no longer gonna run this this loop anymore 
and go to whatever line is right after that,  
224:43 - but if false Then it's going to do our command 
here. And then it's going to again, run this block  
224:48 - of code and continue that until when it checks 
here, and this is false, then again, it's going  
224:52 - to exit and run whatever line comes after the 
for loop. And so now to do a for loop in Python,  
224:58 - it's actually a lot different. Python doesn't 
have this syntax where you initialize a variable,  
225:04 - and then you set a condition and then you give 
a command. It's actually, in fact, probably a  
225:09 - lot more simpler. But the syntax for it goes as 
follows. First you want to type out the word for,  
225:15 - and then you want to type out I, for i in and then 
you need to define a range. And let's just say  
225:24 - 10, we're gonna use the same 10. And then you 
write your colon here to start your code block.  
225:30 - And then here, you can put whatever commands you 
want in there. Now, that's how you initialize a  
225:35 - for loop in both C sharp and Python. However, I 
want to go back to the C sharp initialization real  
225:41 - quick and point out something really interesting. 
Now, I think in most cases, for for loops with  
225:47 - this syntax, you'll find that most developers 
will first initialize an int called I, and then  
225:52 - assign it to be zero and then do like, if and if 
i is less than a certain number, then we're just  
225:58 - going to use the increment operator on it. But I 
want to relinquish your mind early in development,  
226:03 - because this right here is the actual rules for a 
for loop. But to understand where I'm about to go,  
226:08 - I think I need to first show you what's going 
on with a traditional for loops. So I'm gonna do  
226:15 - console dot write line here. And I'm just going 
to print out the value of i. And then of course,  
226:21 - down here, I need to write a console dot read key, 
so that the terminal doesn't close on us. As soon  
226:26 - as we run it, I was gonna come up here, hit the 
start button. And then I'm bringing the console  
226:31 - window overseeing see we have going on here. So 
as you see, I is initialized and assigned to zero,  
226:39 - and then we increment increment all the way until 
I is no longer less than 10. And then we exit out  
226:45 - the for loop. Pretty simple. But again, here it 
says initialize. So we can initialize whatever  
226:51 - we want. Actually, this doesn't have to be an 
end, we can initialize a float if you want to  
226:55 - run it again. And you can see that we have 
the same exact result. But why stop there,  
227:01 - instead of using the increment operator, we can do 
plus equals point five, we want to hit the start  
227:08 - just to show would that result and you see that we 
zero then we increment plus five and then another  
227:14 - plus five all the way to 9.5. And of course, 
that's not all, we can initialize a string if  
227:20 - we want to and assign that to equal empty string. 
And then here our condition as long as I and then  
227:27 - we can grab the length by hitting dot length 
of the string is less than 10. Let's just say,  
227:34 - then we want to do i plus equals, let's say z, for 
example. And then we can run this for loop here.  
227:44 - Start button, bring the window over. And we can 
see that it creates this interesting for loop,  
227:49 - the sky's the limit, so long as you follow this 
convention right here. And because Python doesn't  
227:55 - have the syntax, you can still achieve it, but 
you'd have to achieve it in other creative ways.  
228:01 - Also, I didn't prove it to you that this 
works in Python. So I'll do that really fast.  
228:05 - I'm gonna do print, and then I and then I will run 
this when the play button, you see that it prints  
228:11 - out all the digits in the range of 10. Now that's 
pretty much how you go about using for loops.  
228:16 - Now as far as how you go about applying for loops, 
that's your own creative problem solving endeavor  
228:23 - that I'll let you figure out on your own. However, 
I will leave you with one use case. So I went  
228:28 - ahead and wrote out the program for our scenario, 
because otherwise, it would have been a long  
228:32 - silence watching me type this out. But I'll walk 
you through it. But first, imagine that you've  
228:37 - collected 700 files with a bunch of candy data on 
it. And now that you have this data, you need to  
228:43 - get it all in one place. Now you could open up one 
text file and manually add it to the other then  
228:49 - open up another text file and manually added and 
the next and then add in next and add but that's  
228:55 - even exhausting for me just saying it verbally, 
you could instead write a program with a for loop  
229:00 - to do this for you. And so first we initialize 
a few variables. First one is a string array  
229:05 - with all the file names on it. And then 
the next we have the master data string,  
229:10 - which we're going to compile all of our data to 
and over in Python and we do the same exact thing.  
229:14 - We initialize a string array called filename with 
700 files that can fit on there, and then our  
229:20 - master data string that will compile all of our 
data onto and then we come down to our for loop in  
229:26 - which we initialize an integer named I assigned 
zero to it. And then we have a condition here,  
229:32 - which pretty much just says so long as 
I which is location in our for loop,  
229:37 - as long as that is less than the amount of 
files that we have in the file name string  
229:42 - array. Then we want Want to continue looping. 
And then of course, our command, we just want to  
229:49 - increment the integer I, and then down here in 
the code block. All of this is kind of fake,  
229:55 - I just made it up for the scenario. But there's a 
huge assumption happening here, I'm assuming that  
230:01 - you as the data collector, you are really good at 
naming your data files. And so every single data  
230:06 - file that you have is named candy, space, data 
space, and then whatever number of data file that  
230:13 - is dot txt, very important, because if your data 
files are named something a bit more chaotic, then  
230:19 - we lose the power to use a for loop by and so 
let's just say that this is you're really good  
230:23 - at naming your files like this. Oh, and just to 
clarify, this dollar sign means that this string  
230:28 - is interpolated. This is an interpolated string. 
If that's confusing, check out my string lesson,  
230:33 - I go all in depth into it Anywho, what we're 
doing here is we are taking the file name array  
230:39 - at the element of AI, which is where we're at 
in the loop. And then we're just going to assign  
230:44 - this file name to that location, or that element 
in the file name array. And then on the next line,  
230:50 - I made a fake function here, where it 
takes in the name of the file name, and  
230:54 - it's supposed to read data. But down here doesn't 
do anything, but just return. So like some string  
231:00 - with the actual data name, but this is a real 
function. It exists in a lot of libraries. But  
231:05 - I it's beyond the scope of this video. So just 
know that this, this, this right here represents  
231:10 - something that really does happen. And so we 
pass the file name to the read data function,  
231:15 - the read data function will open up the text 
file rewear was on there. And then we will add  
231:20 - that to our master data string. And then over in 
Python, we do the same exact thing. We have a for  
231:26 - loop here for i in range length of filename, just 
to break apart what this means really quick. So  
231:32 - length function, it returns a number of items 
in a container. And so this file name is a list  
231:38 - with 700 items in it. So when we run length of 
filename, it's going to return 700. So for i  
231:44 - in range of 700, will be our for loop. And then we 
come on down into our code block. And here, again,  
231:50 - we have our file naming convention that we're just 
going to assume that you're good at labeling data.  
231:56 - Every file is named Kenny data, and then whatever 
the number is, but it doesn't start at zero,  
232:01 - it starts at one, so we have to add one to 
our I because I does start at zero dot txt.  
232:07 - And then we just assign that to our filename list 
at the element of AI, again, that lives from zero  
232:14 - all the way to 700. And this is going to match 
up because they're both using eyes here and here.  
232:19 - And then finally, we made a fake function called 
read data, it doesn't really do anything except  
232:25 - for return Kenny data from and then whatever 
the name of the file is, but we will run that  
232:32 - function pass in the file name. And let's say 
this was a real world scenario, then this would  
232:37 - open up whatever that txt file is grab the data 
from that. And then we would add that to our  
232:43 - master data string. And then finally, we come down 
here, and then we'll print the master data. And  
232:48 - just to prove that these work, I'm going to come 
up here and hit the start button, C sharp, and  
232:53 - bring the window over and you can see that we have 
all this candy data. Look at all that candy data.  
233:00 - Wow. Then I'm come up here in Python and hit 
the play button and error. Oh, right, right.  
233:09 - So Visual Studio code has a really weird, well, 
it's not weird, it's helpful. But if you have  
233:14 - something selected and you hit the play button, 
then it's just going to run that. So almost like  
233:18 - nothing and then hit the play button. And there 
you go. You can see that a generates all that  
233:23 - data. Wow. And yeah, there you have it. This is 
one creative use case in which for loops can be  
233:29 - really helpful. But there are a ton of different 
for loop use cases. But it would take me all day  
233:35 - to sit here and list out a bunch of different 
ones, but you now know how to write your own  
233:39 - four loops. So now you can think of really 
interesting ways yourself to apply for loops. And  
233:44 - that is everything that you need to know to get 
started with programming in regards to for loops.  
233:51 - Let's talk about while loops. while loops are a 
type of loop obviously, and they share a lot with  
233:58 - a for loop except instead of running a block 
of code a number of times it runs a block of  
234:03 - code while a certain condition is true, hence the 
name while loop you'll find that while loops are  
234:09 - a lot less common for loops, but every once in 
a while you'll find the perfect use for a while  
234:13 - loop. So for for loops. For instance, when I make 
any sort of robotics project I find while loops  
234:19 - very handy to use anywho. Let's take a look at how 
to use while loops with code. And we're going to  
234:24 - do this using two different languages because I 
think it can be really helpful for you to see how  
234:29 - they compare and contrast and plus, you'll pretty 
much learn two different languages at once. So  
234:34 - on the left is language C sharp using the ID e 
Visual Studio which should interest you if you  
234:38 - want to do windows development or want to make 
games using a popular game engine called unity  
234:43 - and on the right is the English Python three 
using the ID Visual Studio code, which should  
234:47 - interest you if you want to get more into general 
programming or data science. Alright, so here I  
234:52 - have two brand new console projects. And if you 
don't know how to make a new console project,  
234:56 - neither C sharp or Python or both, be sure to 
check out the video in the description. It's  
235:01 - called How to install an ID. And at the end of 
that video, I'll show you how to do that. Alright,  
235:05 - so while loops, Now today's labs can be pretty 
short, because there's not really a lot to while  
235:12 - loops. But let's start by looking at the syntax 
for a while loop in C sharp over here on the left,  
235:17 - I'm going to get rid of these two lines because I 
don't need them. And they come standard with every  
235:21 - new console project. And I'm simply going to write 
out while and then in parentheses true. And then  
235:30 - our code block. This is the syntax for a while 
loop in C sharp, you essentially just write  
235:35 - while and then you have to pass in a Boolean 
here. And then you ever code blocks and where  
235:39 - you can put all of your demands that will continue 
running over and over and over. While this Boolean  
235:46 - is true. And over in Python, a while 
loop looks like this while and then true.  
235:54 - And then I'm just going to put pass here in 
our code block past just pretty much means  
235:59 - don't do anything. And this is the syntax for 
a while loop in Python. Pretty simple. Now one  
236:05 - extremely important thing that you need to know 
about while loops is that while a while loop is  
236:10 - running, whatever comes after the while loop. So 
if I come down here, for example, into a console,  
236:16 - console dot write line, for 
example. And then reach,  
236:25 - for example, anything that comes after a while 
loop will not be reached until the while loop  
236:30 - has been completed. And again, the reason for 
this is because when you run a while loop,  
236:35 - it just runs whatever the code is in its code 
blocks over and over and over however many lines  
236:41 - there are, it goes one by one by one. And then 
once it reaches the end, it starts over the top  
236:46 - and continues going until this boolean value 
here is no longer true. Once this is false,  
236:52 - then it will stop doing this loop and then go 
to the next lines after the while loop. And  
236:56 - this process also happens in Python. If I just 
come down here and do print and then reached,  
237:03 - for example, this while loop will keep on doing 
every single line in this code block until this  
237:09 - condition here is false. And if it's never false, 
then guess what this code right here will never be  
237:16 - reached. And I can prove that. But first I need 
to set up a couple of variables, I'm going to  
237:21 - come up here and then I'm going to initialize an 
integer. Let's just call it a why not, and also  
237:28 - t equals zero. And so within this boolean value, 
all we have to do is say if a is less than 100,  
237:36 - then we want you to run and then every 
single time to run, we can simply just do a  
237:41 - plus plus, use the increment operator. 
And then let's also do a console  
237:49 - dot write line. And just just print out the actual  
237:54 - integer value. And so what's going to happen here 
is that when our main program is ran, it's going  
237:59 - to go down the line and then hit our while loop. 
And because A is less than 100, it's going to  
238:05 - run this block of code one time, you know plus to 
a and then write it out. And then it's going to  
238:11 - reach the end and do it again. And then again 
100 times until a is no longer less than 100.  
238:20 - Once it's greater than 100 or equal to then 
this will no longer run and then they'll go  
238:24 - to our right line reached right here. And we can 
print it out. And I can prove it to you. But first  
238:30 - I need come down here and do a console dot read 
key. So the terminal doesn't close on us when we  
238:36 - hit the start button up here. And I'll 
bring the window over. And as you can see,  
238:40 - we get results that we expect to get the while 
loop will run over and over and over until it's  
238:47 - Boolean condition is no longer true. And once 
it's false, then finally the while loop will  
238:52 - exit it goes to the next line. And then on that 
that line after it we have the printout reached  
238:58 - which there it is at the end of the while loop. 
And over in Python. This is done the same exact  
239:03 - way just in the Python syntax. So to set that up, 
I'm simply going to come up here. Oops, what did  
239:09 - I just do? Oops, I think I Yep, collapse that. 
Okay, come up here I'm gonna do a equals zero.  
239:17 - And then while a is less than 100, and then 
instead of pass, we're gonna print just whatever  
239:27 - A equals and so not approve that they work the 
same. I'm hit the play button up here. And as  
239:32 - you can see, we have Oh, we forgot to increment, 
right? I'm simply going to increment a up here  
239:39 - to a plus equals one. And now our code should 
be fixed, I hit the play button, and bada boom,  
239:47 - there you have it, same exact scenario as in C 
sharp. And finally, there's one more way that you  
239:54 - can go about stopping a while loop. And that's by 
using the break statement. So first question, what  
240:00 - is the break statement? Well, the break statement 
is a statement that can only be used with loops,  
240:05 - like for loops, and while loops. And when you use 
the break statement, all it does is just breaks  
240:11 - that loop moving on to the next line after the 
loop. So to demonstrate this, I'm going to replace  
240:17 - this Boolean right here with just a regular 
Boolean, true value. And then I'm going to go into  
240:24 - here and write an if statement. So now I'm 
gonna say if a is greater than or equal to 100,  
240:31 - then what we want to do is break. And to prove 
this works, I'm coming here to the play button,  
240:37 - hit start, and then bring the window over. 
And you can see that it works exactly the same  
240:42 - as the other method. And to do this method 
in Python, I'm simply going to replace this  
240:48 - Boolean with the true boolean value. And then I'm 
going to come down here and do if A is, is greater  
240:56 - than or equal to 100, oops, 100, then we want to 
break, gonna hit that play button up here to prove  
241:05 - that it works. And you see that we have the same 
exact thing, probably didn't even notice that it  
241:11 - changed. And that's why it was for you. They can 
be handy in certain situations. But to be honest,  
241:17 - you will probably more often be using for loops. 
And there you have it. That is everything that you  
241:21 - need to know to get started with programming in 
regards to while loops. It's finally time to talk  
241:28 - about methods. So methods are amazing programming 
tools that simply put allow you to not have to  
241:35 - repeat code over and over and over. And to be able 
to get a better grasp on your code. For instance,  
241:41 - say you have some inventory class. And in this 
inventory class, you have a few things that  
241:46 - can happen, you can close the inventory, you can 
open the inventory, you can empty the inventory,  
241:51 - just to give a few examples. And instead of 
having to change a list of inventory variables,  
241:55 - every time you want to do these things, you can 
just wrap all this code into a method and just  
241:59 - call that method whenever you want to do it saving 
you a lot of time from writing the same code over  
242:04 - and over and saving you from future headache. 
So now let's take a look at how to use methods  
242:08 - with code. And we're going to do this using two 
different languages. Because I think it can be  
242:12 - really helpful for you to see how they compare 
and contrast. And plus, you'll pretty much learn  
242:17 - two languages at once. And so on the left is 
language C sharp using the IDE, a Visual Studio,  
242:21 - which should interest you if you want to do 
windows development or want to make games  
242:25 - using a popular game engine called unity. And on 
the right is the language Python three using the  
242:29 - it Visual Studio code, which should interest you 
if you want to get into general programming or  
242:33 - data science. Alright, so here I have two brand 
new console projects. And if you don't how to  
242:38 - make a new console project and either C sharp or 
Python or both, be sure to check out the video in  
242:42 - the description. It's called How to install an 
ad. And at the end of that video, I'll show you  
242:47 - how to do that. So before we can use methods, 
we first have to learn how to initialize them.  
242:52 - So let's take a look at their syntax first over 
on the left and C sharp, I'm just going to get  
242:57 - rid of these two lines because I don't need them. 
And then I'm going to come down here so that we  
243:01 - can initialize a new method and the syntax for 
that goes as follows. You simply just type out  
243:07 - void, and then whatever name you want for your 
method, I'll just call it ABC, for example. And  
243:13 - then you need to put a start in parentheses. And 
then finally, is simply just add a code block.  
243:18 - And now you can put whatever commands you want 
within this code block. For example, I'm just  
243:23 - going to put console dot write line, and pizza, 
because pizza is the best. And there we have  
243:32 - initialized a method. Now to do this in Python, 
it's just a little different, but the concept  
243:38 - is still the same. So to initialize a method in 
Python, you want to type out instead of void,  
243:44 - you want to type out def, def, and then whatever 
name for your method or isn't called again, ABC.  
243:51 - And then you're gonna do your start in 
parentheses, this convention stays the same.  
243:55 - But instead of going to a new line and doing code 
blocks using the braces, you simply just use a  
244:02 - colon here, and then go to next line and make 
sure that it's indented. I'm using the Visual  
244:07 - Studio Code ID, which automatically adds an indent 
for me when I go to next line. Well now just like  
244:13 - in C sharp, I can add whatever commands I want in 
this code block. So I'm going to write out prints.  
244:19 - And then again, pizza, because pizza is the 
best. So that's how you initialize a method  
244:25 - in most C sharp and Python. But without more 
context, I don't think they're that helpful.  
244:30 - So let's take a step back and examine a scenario. 
So imagine that you're writing some sort of  
244:35 - program with an inventory system that has three 
spaces, and this program requires you to swap out  
244:41 - what's in those three spaces quite a lot. So just 
to make is less confusing, I'm going to get rid of  
244:46 - our initial examples on both Python and C sharp. 
And now I'm just going to pretty much set up that  
244:52 - scenario with some variables. So I went ahead and 
wrote the scenario off screen, because otherwise  
244:57 - it probably would have been about five minutes of 
silence. But I'll walk you through it. So up here,  
245:02 - we have all of our string variables. This is 
our inventory standing for I envy slot, one,  
245:07 - two, and three Python as the same. And we first 
set them all to be empty. And then we have a  
245:12 - couple of items we can pick up under the variable 
name, pickup, one, two, the first one is pizza,  
245:16 - because pizza is the best. And then we have candy. 
And of course, Python has the same exact thing  
245:21 - going on there. Next, we just have a couple of if 
statements to kind of simulate an event happening,  
245:26 - let's say that you want to pick up some items. 
Well, first, you want to check to see if it's  
245:31 - empty. And then if it's empty, then you pick it 
up. Same thing happening here in Python. Okay,  
245:36 - so we have our scenario all set up, I'm just 
going to come down here and add a console  
245:41 - dot write line, so we can print out the 
results here. Let's print out first in Vin one.  
245:49 - And then I'm lazy, I'm just gonna do Ctrl C 
Ctrl, V, copy paste a couple more times, and  
245:54 - print out also in Vin two and inven. Three. And 
I'm, of course, gonna come over here and Python  
245:59 - do the same exact thing, except for the syntax a 
bit easier. In Python, I can just do inven, one,  
246:06 - there, and then comma, and one, two, and comma in 
vim three, a much more simplistic print function  
246:14 - Python has now before we run it, what should we 
expect? Well, again, all of our inventory, slots,  
246:20 - stuff is empty. And then we come down here and 
do a check if the first slot is empty, then we're  
246:25 - going to assign the pickup one to Inventory Slot 
one, which is pizza. And then we do another check.  
246:30 - If Inventory Slot three is empty, then we'll 
assign the pickup to to it, which is candy. So  
246:35 - all we should expect is pizza, empty candy. Let's 
see if we get that just gonna come up here and hit  
246:41 - the start button. Oh, that's going to close on us. 
I forgot to add, of course, console dot read key.  
246:52 - Alright, so again, I'm just gonna come up here and 
hit the start button and bring the window over.  
246:57 - And you can see that we have an Inventory Slot 
one pizza, slot two empty and slot three candy.  
247:02 - Perfect. Gonna run that in Python as well hit the 
play button up here. And you see we got pizza,  
247:08 - empty candy. Perfect. Okay, so this isn't 
bad. This is pretty straightforward,  
247:12 - does exactly what we want. But now 
imagine this scenario where when you  
247:17 - assign a new item in your inventory, it doesn't 
only just change that item slot. Maybe also,  
247:23 - you know, it does some UI stuff 
here. And then it does like some  
247:28 - special effects was that I'm saying v effects, 
and then maybe like updates, other like update.  
247:36 - slot one, for example, Inventory Slot 
one also updates inventory, slot two,  
247:43 - slot two, for example. And this does this happens 
for every time that you want to do this, right.  
247:49 - So I'm gonna copy this and bring this down here. 
And you can see that our code is starting to get  
247:53 - long and kind of strenuous. Now, this is where one 
of the use cases for methods come back into play.  
247:58 - The first advantage to using methods is having 
the ability to compress your code. Now, why would  
248:04 - we want to do that? Well, everything within the 
code blocks have this main function right here  
248:09 - is our main program. And over in Python, just 
for comparison, every line in the script counts  
248:14 - as your main program. But as you add more code 
in the main program gets longer and longer,  
248:18 - it can become more and more confusing and 
difficult to read and understand. And so instead  
248:23 - of having this chunk of code or this chunk of 
code, we can convert that into a method and just  
248:28 - call that method in our main program. And so let's 
do that. And to do that, I'm first going to come  
248:33 - over to our first chunk of code, and essentially 
encapsulated inside of a method. So right above  
248:39 - it, I'm going to add a start brace comes to the 
bottom of it at an end brace and Visual Studio  
248:46 - automatically reformats to it for me, thank you 
Visual Studio, and then I can simply add our void.  
248:52 - And then we can now get to the hardest part in all 
of programming. Now, we have to name our method,  
249:00 - which thankfully, I thought of all this ahead 
of time, so you don't have to watch me struggle,  
249:04 - but I'm gonna call it pick up pizza. I won. And 
then of course, our parentheses, close it out.  
249:13 - We already did our code block ahead of time. 
And there you go, we have converted this to  
249:18 - a method successfully. Now I'm just gonna do 
the same thing for our second chunk of code.  
249:23 - Just a bit different in my process 
here, pick up what is this candy  
249:31 - and i three that do that. Oops. We're going to 
get rid of this. And then we'll use the bottom  
249:41 - automatically formats. Thank you. Visual co 
And there we have it. And over in Python again,  
249:47 - let's say that when you pick up something, 
you also do like some UI stuff and  
249:52 - some visual effects. And you also do, you know, 
you update whatever information you need update  
249:58 - and slot, one of your inventory, you also 
update whatever's going on. And slide two,  
250:05 - for example, so on and so forth. I'm just gonna 
copy this and bring this down to this one as well  
250:12 - fixed the format a bit. And you can see the 
script got a lot longer. So let's convert those  
250:18 - into methods. Now, you already know the syntax 
for methods in Python, we simply just replace  
250:23 - void with def, and then we name our 
variable is going to be pick up pizza,  
250:30 - Inventory Slot, one, starting in parentheses, and 
then our semi colon. And then we have come down to  
250:36 - all of this and then hit the tab button so that 
this counts as a code block for that method. And  
250:42 - let's do the same exact thing for our second 
chunk of code. def, what is it pick up candy,  
250:51 - inventory, three, starting in parentheses, and 
then our colon, and then come down to all these  
250:57 - lines and indent the man. So they count as a 
code block for this method. Now, we need to  
251:03 - pause if you take a look at our inventory, three 
variable, and even our inventory one variable,  
251:08 - they are underlined red, which means that we have 
a problem, it would come down to our console and  
251:13 - press problem, we see that word is telling 
us that these variables are not assigned.  
251:18 - What's going on here? Well, this has to do 
with something called scoping. And Python  
251:23 - is very peculiar about your scoping to simplify, 
this block of code is self contained only within  
251:30 - this method, pick up pizza inventory one, he 
doesn't have any reference to anything outside  
251:35 - of this code block. And of course, same goes for 
this code block as well. So one simple thing we  
251:41 - can do to let these code blocks know that there is 
a variable called iron v one outside of its scope,  
251:47 - which again, is this, we can simply just come at 
the top of it, and then type global and then I  
251:54 - N v one. Same down here, we can type global,  
251:59 - and then type ion v three, and you can see our 
problems are gone. Problem solved. What we can  
252:05 - do now to compress our code is grab all of these 
lines here, which contained both of our methods.  
252:12 - And I'm going to hit Ctrl x or cuts. And I'm 
going to now move this to the bottom of our  
252:19 - entire program at the very end, and D realize 
what just happened, pretty much our program  
252:29 - ends here. So everything before that is our actual 
program, look how much shorter that is. And over  
252:35 - in Python, we can do the same exact thing. I'm 
going to select all these lines that have our  
252:40 - two methods here, hit Ctrl, x or cuts. And then 
I'm going to move that up. And then underneath  
252:46 - our print function, I'm going to hit Ctrl V 
or paste and put that underneath. And again,  
252:53 - right here, our program ends here, much, much 
shorter. However, our code is now compressed. Yes,  
253:06 - but we aren't completely done yet. Over in 
C sharp and the left, you can see that if I  
253:10 - hit the start button up here on top and 
bring the window over, you can see that  
253:14 - our entire inventory is still empty. And the 
same goes for Python, if I hit the play button,  
253:19 - you can see that we have empty, empty, empty. And 
the reason for that is because at no point did we  
253:25 - call our methods. And to do that in C sharp over 
here on the left, all you have to do is simply  
253:29 - just write out the name of your method. So our 
first one, we want to do pick up pizza for one.  
253:35 - And then you also need to include your Start 
and End parentheses. This is what denotes that  
253:39 - it's a method. And then we need to do pick up 
candy inventory, i three started in parentheses,  
253:45 - and then our semi colon. And to prove to you that 
this works, like I say it does, I'm gonna hit the  
253:50 - start button, and then bring the window over 
and you can see that they have now been set,  
253:55 - check that out. Now over in Python, it's actually 
quite different, although the concept is still  
254:02 - the same. So earlier, I moved off our methods 
to the bottom of our Python script. But if we  
254:08 - were to come into the middle of our program, 
and then type out, pick up, what is it pizza  
254:15 - item one, and then start in parentheses and then 
run our program, you'll see that we get an error  
254:21 - because pizza pickup pizza item one is not defined 
yet, or inventory one rather, is not defined yet.  
254:28 - And so a truth about Python is revealed. using 
methods in this context isn't really all that  
254:34 - useful because the order of operation is extremely 
important in Python. So to use our methods,  
254:41 - we have to initialize them before we call them For 
the first time in our scripts, but also after we  
254:48 - initialize the variables that we're using within 
them. And where's that sweet spot you ask? Well,  
254:53 - it's right here. And so I'm just going to select 
all these lines that contain our methods. And  
254:59 - then I'm gonna hit Ctrl, X to cut and then Ctrl 
V to paste. And there you have it. And just to  
255:06 - prove that everything is exactly what it needs 
to be, I'm gonna hit the play button up here in  
255:10 - Visual Studio code. And you can see that we get 
pizza, empty, empty, hold on, That's not right.  
255:15 - Of course, the reason for that is we have to 
call the second pickup as well pick up candy  
255:20 - I three star in parentheses at the save the play 
button, and voila, we got pizza, empty candy.  
255:26 - Okay, so that was one use case for methods. But I 
want to show you another one, I'm gonna start by  
255:31 - removing all the code that we did, and C sharp and 
Python so that we can set up a new scenario. By  
255:39 - now imagine that you have some program with some 
sort of boss battle in it. And every time that  
255:44 - you successfully hit the boss, two things or more 
happen, so I'm just going to quickly code up this  
255:49 - scenario. Alright, so I went ahead and code up 
the scenario off screen, because otherwise would  
255:53 - have been another couple of minutes of silence, 
but I'll walk you through it. So here we have a  
255:57 - few integers initialize, we have my HP the enemy 
HP and some money, then we have some Boolean to  
256:03 - check if we hit legs, arms or head, set them 
all to be true. And then we simply have some  
256:08 - if statements to check for those volumes. And if 
any of them are true, then we simply will minus HP  
256:15 - from the boss and then add some money to our bank 
account. And Python does the same exact thing.  
256:21 - Same variables might be in PHP and money, and then 
some hit legs, hit arm and hit head bullions. And  
256:28 - we simply check those blades. And if they're true, 
then again, we're going to minus HP from the enemy  
256:33 - and add some money to our bank account. And that's 
all it's to it. And so the next advantage that  
256:37 - methods could give you is reducing repetition, if 
you haven't already observed, and both scripts,  
256:44 - we have this chunk of code right here, enemy HP 
minus equals one, and money plus equals five. And  
256:50 - this is repeated over and over three times each 
on both scripts. And I mean, that's fine. In all,  
256:56 - I mean, this will do exactly what you expect it 
to do. However, we have this rule in programming,  
257:02 - and it goes as follows. never write the same 
code twice. In addition, imagine that you want to  
257:08 - add something else to these hit events. Like for 
example, let's say that you wanted to take your HP  
257:13 - and add a little healing for every successful hit, 
right. So you would come down here and do my HP  
257:19 - plus equals two, for example. But the problem 
is that you now have to write this for every  
257:24 - single hit event. So my HP plus equals to 
go to the next one, again, my HP whoops,  
257:32 - my HP plus two equals two. Now there is a clear 
pattern here. And there's no reason for you to  
257:41 - repeat this over and over and over again. And 
so let's bring back methods, all we have to do  
257:46 - at the end of our main function here is write out 
void and then name our function, let's call it  
257:53 - I'll just call it hit event. Sounds good 
enough to me open starting in parentheses,  
257:59 - and then come down here and your code block. 
And let's just write all this out. Any PHP  
258:05 - minus equals one, perfect money, plus equals 
five, and then my HP plus equals two. And  
258:15 - so now all we have to do is simply just remove 
all of these and replace them with hit events.  
258:23 - Starting in parentheses, semi colon, and bottom 
being do that for all other spaces as well.  
258:29 - And do hit events. Start in parentheses, 
semi colon, oops, get rid of that line.  
258:37 - And then of course here as well hits 
events about bomba bomb and bada bing.  
258:45 - And there you have it, we have greatly 
reduced our repetition. And of course,  
258:49 - just to prove to you that all this works, 
and we come to the end of our script here,  
258:53 - which again, ends right before our method is 
called. So in script, and then I'm going to add a  
259:02 - console dot write line. And we really just want 
to know all of our variables, so enemy HP, and  
259:11 - then I'm lazy. So I'm gonna hit Ctrl, C Ctrl, v 
a couple times and then replace this with money.  
259:17 - And then replace this with my HP. Come up here, 
hit the start button. Up, it's going to close  
259:24 - Of course, we have to hit console that read key 
always forget this. Probably a bit. So use the  
259:31 - Python, hit play, bring the window over and you 
can see that we have our calculations. I mean,  
259:37 - there's not going to confirm that they're what 
they are, but trust me, it's working and now over  
259:43 - in Python, this technique has a lot of benefits, 
but it's still limited to the order of operation.  
259:48 - And so again, to implement this in Python, we 
simply just go after our variables that we're  
259:53 - using are initialized. But before we call it, 
which that sweet spot is right here, and so we can  
259:58 - do def, what do we call it? I forget hit event, 
hit events, and then start in parentheses there.  
260:07 - And then I forgot some, just regular colon. In our 
code block, we can just bring in this right here,  
260:13 - I'm lazy. So I'm just copy and pasted by being and 
then we can replace all of these with hit events.  
260:27 - And then I'm going to copy this because I am 
lazy and copy this as well, because I'm lazy. And  
260:34 - you can see that we have our issue again, and 
you can see that we have our scoping issue again.  
260:40 - And you can see that we have our scoping issue 
again. And you can see that we have our scoping  
260:45 - issue again. And to fix this, all we have to do is 
just again, add our global, and then we need what  
260:52 - enemy, HP and money. Perfect. And so now to prove 
all this works, I'm just simply going to repeat  
261:01 - what we did in C sharp and do print and PHP. And 
then we also want to print our money. And then  
261:08 - we also want to print our my HP. I boom, except 
for the HP Of course, because we didn't add that.  
261:16 - But it's a lot easier to add things. Now, instead 
of having to go through every single event, we  
261:20 - just go to the actual hit event method. And then 
we can do my HP plus equals to I believe it was  
261:28 - I'm just double check here. Yes, it was too. And 
we need to set that as a global as well to grab  
261:36 - that from our scripts. And then I can hit 
play again. And you can see that we have the  
261:42 - same exact variables 2715 and 16. And there you 
have it for reducing repetition with methods.  
261:48 - Now, I just want to show you one last technique 
with methods and that is returning values. To do  
261:55 - this. Again, I'm just going to get rid of all 
the code that we did already sing with Python.  
262:02 - And now imagine this scenario. And so I went 
ahead and wrote this scenario of code off camera,  
262:07 - because otherwise, this probably would have 
been about a 10 minute silence. But as always,  
262:12 - I'll walk you through it First, consider the 
scenario that you're developing some app or some  
262:16 - social media or something like that. And you want 
to generate a user ranking for all of your users.  
262:22 - Now, what's going on in our program isn't really 
important at all, honestly. But here we have our  
262:27 - user rank variable. And let's say that we want 
to generate this user rank using these variables  
262:32 - here. Well, I just came down here and just made 
a pretty big tree, and did a bunch of checks.  
262:39 - So if guests then minus something if page, plus 
something else. Plus, if this is all arbitrary,  
262:46 - I just want to make a really big tree to 
demonstrate this next example. So let's just say  
262:51 - that all of this right here, actually starting 
here, all this right here is like an algorithm  
262:56 - that you and your social media your app team has 
developed. And you guys have concluded that it's  
263:02 - a very accurate way to assess the user ranking of 
your users. Well, instead of having this algorithm  
263:08 - hard coded for a single variable, we can convert 
this algorithm into a method and have that method  
263:14 - return a value. And so to do that, we only need to 
do two things. First, let's convert this algorithm  
263:21 - into a method. Now, this is still hard coding our 
user rank variable. This is no different than just  
263:26 - a regular method. So what we need to do next is 
we need to create a temporary variable and we'll  
263:32 - call it actually temp, and then let's set its 
equals zero. And then we need to change all the  
263:38 - user ranks to be timps. Or the temp variable, my 
apologies. So I must say temp here, use a rank.  
263:45 - I'm gonna go right here temp and then use rank 
here is also temp. And then use rank here is also  
263:54 - temp and then use rank here is also Tim 
Hahn this user rank is temp is well.  
264:03 - And this final one is to at last No, we have to 
do is come to the end of our method, and then do  
264:11 - return tip. Now, you'll see that we will get an 
error here. And the reason for this, it requires  
264:20 - a bit of explanation. So when you initialize 
methods, you are also casting its data type.  
264:26 - And so if we check out our score method, you can 
see the data type for our score method is a void,  
264:31 - which is essentially data type lists. So our score 
made through essentially just go through its code  
264:37 - block, run that and then exit out but if we wanted 
to return data of some type, all we have to do is  
264:42 - replace this with that data. Type. And seeing that 
our use rank is a float, we're going to replace  
264:48 - this with a float. And you see our error has 
disappeared. And so what does that allow us to do?  
264:54 - Well, I'm going to do our convention, our 
program ends here. And then I'm gonna go  
265:02 - down and find these two things, and then Ctrl X to 
cut them, and then put them before programmings.  
265:10 - And now all we have to do is just assign a score 
to our user rank variable. Isn't that nice? And  
265:22 - let's say that we have another user rank that 
we want to calculate, right? This is easier rank  
265:29 - two equals zero. Well, all we have to do 
now is just go user rank two equals score.  
265:38 - And nowhere in Python, we can do the same 
exact thing, just first wrap our algorithm here  
265:45 - into a method was called score. And do that and 
then now we need to select the entire algorithm,  
265:53 - and then hit the tab button. So that is all within 
the code block for a score. And then because  
265:59 - it's a method, hopefully something broke here, 
what broke here. Now I'm not entirely sure what  
266:04 - happened here. But to fix this, we simply just add 
a tab fix the syntax, error disappears. Perfect.  
266:10 - Next, we'll add back in our temp variable. 
Let's just initialized this temp equals zero.  
266:19 - And then was replace all the user ranks with 
temp. I'm just gonna copy and paste because I am  
266:26 - pretty lazy right now. temp, temp, temp, temp, 
temp, to temp. And then at last we just come  
266:41 - out I think this is it. Return tip seven double 
check, this is the right place to put it. Yes,  
266:48 - it is. Now again, because this is Python, 
this method isn't that useful for compression,  
266:54 - again as to be in that sweet spot. But we can get 
our user ranking simply by calling user rank and  
267:00 - then assigning score to it. And so now to prove 
to you that these do exactly as I say they do,  
267:08 - over here in C sharp and left, I'm just gonna 
copy and paste this right line, because I'm lazy,  
267:12 - then added to there. And then we have read key. So 
now I'm gonna hit the start button. And then I'm  
267:17 - gonna bring the window over. And you can see that 
we have 49 and 49. And to prove the same thing to  
267:24 - you in Python, I'm just gonna initialize a 
new user rank here, use rank two, and that  
267:30 - also equals score two. So we have the same exact 
scenario. And then we're praying user rank two.  
267:36 - And then I'm gonna hit the play button up 
here, you see we have 49, and 49. And yeah,  
267:43 - there you have it. If you want to learn more 
about methods, I think the best thing that you  
267:46 - can do is just to start using them more, because 
you'll learn more about them in the process.  
267:51 - But that is everything that you need to get 
started with programming in regards to methods,  
267:58 - functions functions, let's step into the wonderful 
world of functions. Now I'll just go on record  
268:04 - saying this functions are hands down the most 
valuable tool to program. Now, why is that? Well,  
268:12 - functions share a lot of commonality with methods 
for they allow you to be able to reuse code giving  
268:17 - you the ability to write more neat and nice 
code, which in effect makes it easier to read  
268:21 - giving you a better grasp on your code. But the 
advantage that functions have over methods is  
268:26 - that you can pass in data and slightly alter 
the code that is ran within a function making  
268:30 - them extremely powerful. So for example, say you 
have an inventory class that can hold four items  
268:37 - and you want to remove the items. Well, instead of 
creating four different methods that you can call  
268:42 - to remove the for various items, inventory dot 
remove item one, inventory dot remove item two,  
268:47 - so on and so forth. That will all run the same 
exact code minus may be a variable or two with  
268:53 - functions you can pass in, for example, 
the item number and using the same code  
268:57 - can remove that item. Now talking about 
the theory of functions is great and all  
269:02 - but let's take a look at how to use functions 
practically with code because I promise this will  
269:07 - become so much easier to understand. And we're 
going to do this using two different languages  
269:11 - because I think it can be really helpful for you 
to see how they compare and contrast. And plus,  
269:15 - you'll pretty much learn two languages at once. 
So on the left is the language C sharp using the  
269:20 - ID Visual Studio, which should interest you if 
you want to do windows development or make games  
269:24 - using a popular game engine called unity. And on 
the right is language Python three using the IEEE  
269:30 - Visual Studio code which should interest you if 
you want to get into more general programming or  
269:34 - data science. Alright, so here I have two brand 
new console projects and if you don't how to make  
269:39 - a new console project and either C sharp or Python 
or both. Be sure to check out the video in the  
269:43 - description. And it's called How to install an ad. 
And at the end of that video, I'll show you how to  
269:48 - do that Paul Wright, who's ready to have some fun 
with some functions. Now before we can do that, we  
269:55 - need to go over the syntax for functions in both 
C sharp and Python over on the left and C sharp,  
270:01 - I'm going to get rid of these two lines, they 
come standard with every new console project,  
270:05 - but I don't need them. And then in this code 
block, I'm going to initialize a function,  
270:10 - which, if you're familiar at all, with methods, 
this is going to seem very familiar to you,  
270:14 - I'm just going to type out void, and then the 
name of our function, which is called F for now,  
270:20 - and then start in parentheses. Now, if you're 
familiar at all, with methods, you're probably  
270:25 - looking at this and you're like, Wait a second, 
that's just the method what's going on here. And  
270:30 - yes, you're right methods and functions have a 
lot of overlap. But what makes functions super  
270:37 - cool and extremely useful is that you can pass 
in some input. So if I type in right here, if I  
270:45 - initialize an int, and then I'm a call this x, for 
f of x, that's a standard notation for functions,  
270:54 - I can now make my code block here. And we can do 
something with this input within the code block.  
271:01 - For example, let's say that we want to take our 
input x, and we simply just want to times it by  
271:08 - two. So I'll use the multiplication operator and 
then times it by two. And then to see this change,  
271:14 - let's come down here and add a console dot write 
line just to print to the console. And then we're  
271:20 - going to put in here our x variable. Well, now 
we can do something cool with this function,  
271:26 - if I just come to the beginning of the script, 
and then I'm going to initialize an integer,  
271:31 - I'm going to call it, I don't know my number, 
for example. And then let's make it nine. And  
271:38 - so now I just want to call F and then pass in my 
number, which is nine. And what it's going to do  
271:46 - is it's going to take my number in this function, 
and then here is just going to times by two and  
271:52 - printed out. And to prove that to you, I'm going 
to come right underneath our function and add a  
271:57 - console dot read key, so that the terminal doesn't 
close on us. As soon as we run it, hit the start  
272:03 - button, and our terminals over here. And you see 
that nine times two does in fact, equal weighting.  
272:09 - Now in Python, the syntax is a bit different. I'm 
just gonna start off by initializing our integer,  
272:18 - my num, assign a nine to it. And then our, our 
function has to come before we actually call it.  
272:25 - So I'm going to initialize that, first, 
I'm gonna say def, with the name F,  
272:31 - and then we're in past nine input x, and then I'm 
using a colon here, go down into the code block,  
272:36 - and then I'm going to do X times equals to 
no different than what we did in C sharp,  
272:42 - and then simply just print out whatever x is, 
then lastly, we can just call our f function  
272:49 - by saying F and then passing in my 
num, knowing my num when I do my num,  
272:56 - and there you have it, I'm gonna press the 
play button just to prove to you this works.  
273:00 - And bada boom, you see the web 18. Now, we just 
barely scratched the surface with functions.  
273:07 - But hopefully, you can already see how much power 
we have with just this very simple example. Allow  
273:13 - me to show you one more example. Before we move 
on. Imagine that we have a list of names and we  
273:18 - want to add Mr. or Mrs to the beginning of those 
names, well, we can simply get rid of this integer  
273:24 - no longer need that. What else do we don't need, 
we actually don't need this function anymore. So  
273:29 - we don't need this will keep the console actually 
let's just get rid of the whole entire program and  
273:35 - start over from scratch and do the same for 
Python. So let's initialize a string array.  
273:42 - Let's call it a name. And then that 
equals a new string array of size.  
273:48 - Let's Let's initialize sizes to make it simple. 
And then we can come in here and manually set  
273:53 - the variables within our array. So I'll do 
zero equals, let's say his name is Johnny.  
274:03 - And then let's say that name of 
element one is equal to Carla.  
274:10 - And then name of element two 
is equal to let's just say that  
274:19 - Zack, and I suppose Zack, thank you. So now let's 
write out our function that will do this process  
274:24 - for us. I'm going to come down here and I'm going 
to do a void and then let's call it surname,  
274:33 - I believe they're surnames. And then 
we can pass in. Let's see, a string  
274:42 - and this is going to be It was 
called sir as the variable.  
274:46 - And so now we can do down here name 
of zero equals sir, plus name of zero.  
275:02 - And then of course, let's let's print this 
out so that we can see what's going on console  
275:08 - dot write line. So what I'm looking 
for, and we can print out name of zero.  
275:16 - Come on, there we are. And then we can call 
our surname here. And then let's pass in  
275:26 - Mr. Mr with the space there. And then of course, 
console dot read key. So a terminal doesn't close  
275:36 - on us. Also, I'm just going to write right here, 
just because it's fun to make the distinction that  
275:41 - our program is here. And so I went ahead and 
wrote out the program in Python, so you don't  
275:48 - have to sit and listen to my silence for a couple 
of minutes. But it does the same exact thing. We  
275:52 - have the nameless here that is initialized 
with Johnny Carla and Zach in it. And then  
275:57 - we initialize our surname function that takes the 
input of sir. And we essentially just assign sir,  
276:05 - plus the name of element zero, to name 
velleman, zero, so we essentially reassign it,  
276:12 - and then we print it out. And here is when we 
call the actual function itself. And so if I just  
276:17 - come up here to the play button and press it, you 
can see that again, we have Mr. Johnny except for  
276:23 - I put the period in the wrong spot supposed to 
go there, press it again, bada boom. Alright,  
276:28 - cool. So now we have a surname function that adds 
a certain name to our names, however, we have  
276:34 - three names. And I really don't want to have to 
write three different functions just to do this.  
276:39 - Well, thankfully, we don't have to, thanks to 
this next feature that further makes functions  
276:44 - even more powerful. So there is no real limit on 
how many inputs we can pass in with our function.  
276:51 - And at the fact that we're using an array here, 
we can just pass an integer to change whatever  
276:57 - element in the name array that we want. And so to 
do that, I'm just going to add an integer variable  
277:03 - at the beginning here, we'll call it, I'm just 
calling ind for index. And then we can simply  
277:10 - just replace this zero here with ind whatever, 
integer we pass in i n d again, and then i n d.  
277:19 - And lastly, we just come up here and 
then just pass in the zero. So we want  
277:24 - to change the zero element in the name array, 
which corresponds to Johnny run that again,  
277:30 - by hitting the play button at the top here, bring 
the console window over, and you can see nothing  
277:35 - has changed. And so now that we have this add 
to flexibility, I can simply take this line, and  
277:42 - copy and paste, copy and paste, copy and paste, 
and just change the index to one which is Carla,  
277:51 - and two, which is Zack. And of course, Carla is 
not a mystery. So we can change that to a message  
277:57 - here. And when we run this, it's going to print 
out all three of them. So I'll just press the  
278:02 - play button again, and bring the window over. And 
would you look at that, and Mr. Johnny, Mrs. Carla  
278:07 - and Mr. Zack function is working perfectly. And 
over in Python, we can do the same exact thing.  
278:13 - So I'm gonna pass in an input variable here 
called ind again, separate them with the comma  
278:18 - that's important for both syntaxes separate your 
variables with commas. And then we can replace  
278:25 - all of the element numbers here with ind, and then 
just pass an integer in when we call the function  
278:33 - we get there. Right here. So Mr. Zero. And then of 
course, we can do copy, paste, paste. And then one  
278:43 - and two. Carlos misses the Save button clears 
all errors, then hit the play button. And would  
278:49 - you look at that Mr. Johnny, Mrs. Carla, and Mr. 
Zack, I'll never stop saying this. But functions  
278:55 - are the greatest thing there is high love 
functions. And if you think that it stops there.  
279:01 - Well, you're in for a bit of a surprise. But 
first, let me introduce a problem to you say  
279:06 - that we want to come down to the bottom of 
our program and initialize a new string,  
279:12 - right? And the name here. Let's just say 
this is the boss's name, and it equals Helen.  
279:22 - And now what if we wanted to add a surname to 
Helens name? Well, because this surname function  
279:27 - is directly tied to the name array. We kind of 
can't at the moment, I mean, of course, we could  
279:34 - just come in here and just add it manually, Mrs. 
Helen, or we could remove this and then just come  
279:40 - down to the next line and do something like bossy 
cool. What is it Mrs. Plus boss here. And then we  
279:51 - also want to do a console dot Yeah, we could redo 
the same code over if we really wanted to imagine  
279:57 - that you were doing this as an automated task, 
well, you wouldn't want to manually go and add the  
280:02 - surname to all the names that you have. And you 
wouldn't really want to rewrite the code over and  
280:07 - over and over. And so the solution to this problem 
is by changing this function from being a variable  
280:13 - dependent function into a variable, independent 
function, and we can do that by using the return  
280:20 - statement. And so to do that, first I'm gonna get 
rid of these two lines, because they're just for  
280:24 - an example. And then I'm gonna go into our surname 
function, and we're going to return a string. So  
280:30 - I'll initialize a string, I'll call it temp, and 
then I'll sign it to be an empty string for now.  
280:36 - And now we have to replace all of the variable 
references to the name array into the temp,  
280:41 - because this is what makes this function variable 
dependent. So I'm gonna change this here to temp.  
280:49 - And then I will change this one to temp as well. 
And then I'm gonna change this here to temp. And  
280:59 - actually, because we need an input with the 
original name is we actually don't need to  
281:04 - initialize this here. So I'm going to get rid 
of that line. And we can now change our integer  
281:10 - variable input into a string variable input 
and call it temp. And so the very last thing  
281:17 - we need to do here is we need to change the data 
type of our function from a void to be a string.  
281:24 - And then you'll see we get an error 
saying that it doesn't return a value.  
281:29 - When you cast the data type on your functions, 
they have to return the same type of data type  
281:34 - in the return. So we'll go down here and add, 
return and temp is a string. So we'll just return  
281:42 - back the temp which has been modified with sir 
at the beginning. And so now because we change  
281:48 - the input to surname from the data type integer 
to string, you can see that we have three errors  
281:53 - here. For the times that we called it, these 
are currently integers, they need to be strings,  
281:58 - which is no problem, we can just input the 
actual name that we want to change here. So  
282:04 - of course, the first one is name of element zero, 
and I'm lazy. So I'm gonna copy and paste this,  
282:11 - paste and paste and change this to one and two, 
which again corresponds here. And if I just hit  
282:18 - save, and then the Start button up here, and then 
bring the console, you can see that absolutely  
282:24 - nothing has changed function works exactly the 
same. However, the very last thing that we have  
282:30 - to do to make this completely functional is, 
again, right here, it's printing out the temp,  
282:37 - so this is only temporary, we get a reference 
to that, and then we change it and then we  
282:41 - return it. But you can see here that's that's 
not being assigned to anything. So that's the  
282:47 - final thing that we have to do here. But before 
we do to further illustrate my point, I'll simply  
282:51 - come at the bottom here and do a console dot write 
line. And then we're going to print out name zero,  
283:01 - and then I will copy paste few times because 
I'm lazy, changed to one in two. And so if  
283:07 - I come up here and hit the start button and 
bring the console and over you can see that  
283:11 - yes the certain names are added for the first 
three which is what is inside the actual surname  
283:17 - function. But the last three that were printed 
which is outside the surname function is the  
283:22 - actual ground truth to are named of zero element 
name of one element and name of two elements  
283:29 - are still the same exact as we initialized it. And 
so to fix this, we simply just have to assign it  
283:36 - whatever is being returned right here. So name 
of zero equal surname with the inputs and name  
283:43 - of one equal surname with the inputs and name have 
to equal surname with the inputs come up here hit  
283:52 - the start button, bring the window over and you 
can see that they have actually been assigned.  
283:58 - And just to walk you through what's going on 
here. On these three right here we will assign  
284:03 - that name of zero element name of one element 
name with two element will equal surname with  
284:09 - some inputs. And so we go into the function and 
we pass in the inputs. temp, which is the actual  
284:16 - name at the moment and then surname is a name 
that we want to add to the beginning of the name  
284:21 - and so we will assign the surname to the beginning 
of the name and then we will print that out and  
284:28 - then we will return temp. And so because this 
whole function right here, is returned with the  
284:34 - value whatever temp is which again is calculated 
here, we will assign that return value to  
284:40 - name of element zero named value one and name of L 
admit to. And now at last to bring it full circle.  
284:47 - Now that we have this flexible variable 
independent function surname, we can  
284:51 - initialize our boss string here, which equals 
Helen, and simply just reassign it by going boss  
284:59 - equals surname. And then we're going to 
pass in boss here. And we can pass in Mrs.  
285:09 - And as simple as that. And just to prove it to 
you, I'm going to get rid of these three lines,  
285:15 - make it a bit less confusing, hit the star button 
and bring the window over. And as you can see,  
285:20 - we have Mr. Johnny, Mrs. Carla, Mr. Zack, and 
at the very end, Mrs. Helen. Now that is how  
285:27 - you write good code. And so we're in Python, 
we can make this change really easily as well,  
285:33 - we can simply just change this to say temp, 
and then change this as well to say temp,  
285:40 - and then change this one to say temp. And 
of course, we want to change our input to be  
285:47 - temp, oops, and then come down here. 
And then we want to assign this to be  
285:53 - name of zero, and then this one to be named one. 
And then this one to be named to. Of course,  
286:04 - and then we need to assign this here name of zero 
equals surname with these inputs, and then name  
286:15 - of one equals surname with those inputs, 
and then I'm lazy. So I'm gonna copy and  
286:21 - paste the last one change that to name a surname 
equals the last of those inputs. And of course,  
286:28 - I'm getting an error here. It's saying that 
assigned to a function which doesn't return,  
286:33 - I forgot to return here. So we're simply 
just do return tip. And then of course,  
286:40 - we can't forget our boss, Helen. So we can 
initialize that by saying boss equals surname.  
286:49 - And because we're initializing this, we simply 
just pass in Helen. Like so. And then Mrs.  
287:02 - can come up here, hit the play button. And voila, 
Mr. Johnny, Mrs. Carla, Mr. Zack and Mrs. Helen  
287:10 - functions are just absolutely incredible. I love 
these things. We barely scratched the surface  
287:16 - with what's possible with functions here. But 
hopefully, your creative juices are flowing in,  
287:21 - you're thinking of different ways on how 
you might be able to apply a function.  
287:24 - I've said it before. And I'll go on record saying 
that, again, functions are probably the most  
287:29 - powerful tool when it comes to programming. 
In fact, if you're familiar at all, with all  
287:33 - the breakthrough research that's happening in 
the field of machine learning, well, it's all  
287:37 - powered by functions. So I hope I was helpful 
for getting you excited about some functions.  
287:43 - But that's everything you need to know to get 
started with programming in regards to functions.  
287:50 - Now, commenting can be a make or break for 
your coding success, especially if you're  
287:55 - working on a team on an open source project or on 
a project, you plan to work on long term comments,  
288:01 - just as you expect our way to leave comments 
within your code in a human readable format,  
288:06 - so that you know what's going on in different 
parts of your code. At all times, sometimes  
288:11 - you'll write out extremely complicated code that 
makes perfect sense in the moment. But when you  
288:15 - return to that code months later, or give it to 
someone else, so they can add on to it, it may be  
288:20 - really difficult or a ton of wasted time trying to 
reverse engineer the code. So let's take a look at  
288:25 - how to use commenting in two different languages. 
Because I think it can be really helpful for you  
288:29 - to see how they compare and contrast. And plus, 
you'll pretty much learn two languages at once. So  
288:34 - on the left is the language C sharp using the 
ID Visual Studio, which should interest you if  
288:39 - you want to do windows development or make games 
using a popular game engine called unity. And on  
288:44 - the right is the language Python three using the 
ID Visual Studio code, which should interest you  
288:48 - if you want to get into more general programming 
or data science. Alright, so here I have two brand  
288:53 - new console projects. And if you don't know how 
to make a new console project, neither C sharp or  
288:57 - Python or both, be sure to check out the video in 
the description. It's called How to install an ID.  
289:02 - And at the end of that video, I'll show you 
how to do that. Alright, so the first thing  
289:06 - I want to go over is line commenting. So over 
in C sharp and left, I'm just going to remove  
289:11 - these two lines that come stock with every new C 
sharp project. And I'm going to start creating a  
289:19 - little fake project. So I'm going to initialize 
a couple of floats. We'll call this location x  
289:28 - is going to do one 2.345 F and then we'll do 
another one float location y and we'll do 123  
289:40 - point 456 All right. Oh f Sorry. Alright, 
so these variables are just going to act as  
289:48 - fate coordinates for and lo example. So I'm gonna 
create a more involved Boolean, I'm gonna say bull  
289:55 - in oops, in position, let's say in pause 
equals, and let's do location x is greater than,  
290:06 - I don't know, let's just say 12. Right. And then 
we'll also check if, if location, y is less than  
290:20 - 30, for example. But then outside of that, we'll 
also check, or if I'm about to go off screen here,  
290:31 - I'll scoot over, or if location, x is greater 
than location, y, and then we'll put a semicolon.  
290:42 - And now we have a more involved bullying. 
Alright, so here, we have maybe one of  
290:47 - the greatest examples of how line commenting is 
pretty useful, or it can be pretty useful. Rather,  
290:52 - I'm going to go on top of our bullying here, and 
I'm just going to do forward slash forward slash,  
290:59 - and that right there, it starts our comment, 
and we can write whatever we want. So I'm  
291:03 - just going to do my best to explain what this 
Boolean does. So if location, x is greater,  
291:12 - is greater than 12, and 12. And location why why 
is is greater, no less than, less than 30. Or  
291:30 - if location x, x is greater than location, y, y, 
then we are in position. Sorry, it's a bit long,  
291:44 - and it doesn't exactly fit with the rest of 
the code. But that is how you write a line  
291:49 - comment. And the way it works is when your code is 
compiled, anytime that the compiler sees a double  
291:55 - forward slash, it knows to ignore everything after 
it. So just pretty much will go to the next line.  
292:00 - And over in Python, it's a lot 
of the same, I'm just going to do  
292:04 - loke oops, loke x equals one 2.345. And look, y 
equals one 2.412 3.456. And then I'm going to do  
292:19 - in pause equals, let's see loake x is greater than 
12. And what is the loq? Why is less than 30? Hmm.  
292:41 - Or we have look loq already forgot x is 
greater than x is greater than look Why?  
292:56 - Boy, that was brutal. And to add our comment, 
I'm just gonna come over here above our in  
293:00 - position variable. And instead of doing forward 
slash forward slash, that form of currency is  
293:05 - not accepted in Python, I'm going to hit the 
pound sign or the hashtag, whatever you call it,  
293:11 - and then I was going to write out our message. So 
I'm not going to write it because that's going to  
293:14 - take forever again, I'm going to copy it from here 
and then paste it. And there we go. Comments, and  
293:22 - comment. Sorry, I just realized the Python font 
should probably be a bit bigger. So I'm just gonna  
293:27 - make that a bit bigger. Yeah. So that's one use 
case for line commenting probably one of the most  
293:33 - useful cases for line commenting, however, you 
can do something else as well. So let's say that,  
293:38 - you know, we try out this Boolean and it just 
isn't working right for for whatever reason,  
293:43 - well, we can do a line comment on everything 
after the assignment operator, and then just put,  
293:48 - like, for example, equals one, just to make sure 
that oops, we actually need to put my true here,  
293:54 - just to make sure that this Boolean is actually 
working, just for example, and then in Python,  
294:00 - it's all the same, use the hash tag, everything 
after that it's ignored, and you just put true  
294:05 - oops, true. Oops, no semi colon. And Yep, that's 
another use case, that can be quite handy as well  
294:12 - when debugging your code. And so the final use 
case I want to show you with line commenting is  
294:17 - let's say that we're going to return these back 
to that assignment. And let's come down here.  
294:25 - And then let's add an if statement. So if 
in position, right, we want something to  
294:31 - happen. However, we don't exactly know what 
we want to happen yet. We have an idea maybe  
294:38 - maybe we don't know how to do it. Maybe you want 
someone else to do it. Well, what we can do here  
294:43 - is just add a comment. on like, here, I want to 
display something, you know, some notification,  
294:52 - I don't know, I just want to display something 
here. And you can leave this comment here,  
294:56 - maybe come back to it later, maybe give it to a 
friend, maybe do some research and then you know,  
295:02 - learn how to do it and then implement it. This 
comment is just an easy way for you to, you know,  
295:08 - know what your intent was with putting 
this if statement there. And in Python,  
295:12 - it's really similar, but a little different. So 
let's say we do our if statement, if in position,  
295:21 - we'll come down here, we can write our comment, 
which was, again, copy and paste, copy,  
295:27 - paste. However, we can't leave it like this, you 
see, if we had saved, we will have a problem,  
295:33 - which is, we have a parsing error, a 
syntax error, rather. And the reason is,  
295:38 - because if you do if you do an if statement, 
and then you indent, which you have to do,  
295:44 - there's there's nothing when it runs as if 
statement, it's not going to run anything.  
295:48 - And that's a syntax error in Python. So we can 
just simply put, like print, you know, zero,  
295:58 - for instance, just so that it clears that syntax 
error. And technically speaking, you don't even  
296:05 - have to do a print, for example, you can just do 
like empty quotes, whoops, you can do like empty  
296:11 - quotes. And that will work just the same, but 
it has to run something within the indentation.  
296:17 - Because again, this line is ignored. Alright, so 
that was line commenting. Next, I want to talk  
296:22 - about block commenting. So to demonstrate, I'm 
going to get rid of all this code that we just  
296:28 - did. And then oops, yeah. And then I'm going to, 
let's just say that you're creating some like,  
296:34 - complex algorithm that you quite understand, but 
you kind of don't understand. So I'm just gonna  
296:41 - create something, it was just a representation for 
an advanced algorithm, just use your imagination.  
296:48 - Let's do loq y, divided by equals four, right? And 
then we need to return it or something like that.  
296:55 - So we'll do local New equals loake y divided by 
loquax. For example, oh, I have to initialize that  
297:05 - this is not Python floats. And then finally, let's 
just return it. Let's do. Let's do this console.  
297:16 - Oops, console dot write line. Right? line,  
297:24 - location, new. All right. So let's just 
say this is some advanced algorithm,  
297:31 - and you just implement it in your program. 
But all of a sudden, like everything's broken,  
297:35 - nothing works anymore. You're like, what's going 
on? This isn't behavior that I expect, I know that  
297:40 - this is working, right. This is obviously, you 
know, very straightforward. But maybe this part  
297:45 - of the algorithm isn't working right. Now, you 
could, you know, go by and do like, you know,  
297:51 - forward slash forward slash forward slash four 
slash. And if you have a bunch of these do that  
297:55 - line by line. But one really convenient ways use 
block coming, which in C sharp is just one forward  
298:02 - slash, and then an asterick. And the after ended 
doing the opposite, so an Asterix and then one  
298:08 - forward slash, and that is one way that you can 
quickly comment a whole block of code. Now one  
298:15 - really important thing to take note of a block 
commenting is that you have to have a start, and  
298:19 - you have to have an end. Because if you don't have 
an end, what happens here is that it comments out  
298:24 - everything after it including the brackets. And if 
the brackets has a start, but doesn't have an end,  
298:30 - you're going to get a bunch of errors. So 
they all I always have to have a start,  
298:34 - and they always have to have and now in 
Python, I'm just going to replicate our super  
298:39 - advanced algorithm here, I'm going to do loake 
x times equals two and then loake y divided by  
298:49 - equals four. And then we're going to do 
loake nu equals loake y divided by loake. x,  
299:01 - then we'll just print it because why not look 
new. And to add block commenting in Python,  
299:09 - it's similar, but also very different. And what 
I mean by that is you want to come up to above  
299:15 - or if you want to do your block, comment and just 
do three single quotes. And again, it needs a  
299:22 - start and he needs a finish. If you do not have 
a finish, you are going to get a syntax error,  
299:28 - because it needs a start and a finish 
for the triple quoted string literal,  
299:35 - aka the block comment. Now the very last type 
of comment that I want to go over is summary  
299:41 - commenting. So to demonstrate, I'm just going 
to get rid of All this code is no longer needed.  
299:46 - And then I'm just going to initialize a float 
variables, call it loke equals zero, for example.  
299:54 - Next, let's create a quick little function, I'm 
going to go outside of our main function and then  
300:01 - do static float. Let's call it ret, one. And then 
let's, let's pass in a float, and then we'll call  
300:12 - our float a sum, make it easy. And then what we're 
going to do is we're going to return a, let's see  
300:20 - a plus one. That's what we're going to return. 
And then let's just use it real quick. So we'll do  
300:30 - loke equals rat one, and then we'll just pass 
in itself. So it's going to plus one to itself.  
300:38 - And just to prove that we'll do console dot write 
line, even though it's not about proving in this,  
300:43 - it's really about comments, but we'll 
just do that anyway. Console dot read key.  
300:52 - And then I will hit the play button. And 
boom, there we go. Zero plus one equals one.  
300:59 - So our function works. But let's say that you 
know, it's later down the line in your project,  
301:04 - and you come back to the script to upgrade or 
fix something, you see that Loki goes right one,  
301:10 - what does that do, and you go down to the 
read one function. And let's say this is  
301:14 - a lot more complex, you don't really understand 
what's going on. Well, you might waste a lot of  
301:18 - time reverse engineering to figure out what that 
function is. But what SOT what can solve that is  
301:23 - by adding a summary comment. So adding summary 
comments in C sharp is actually really easy.  
301:29 - All you have to do is go right above whatever 
function that you want to add a summary to  
301:34 - or method and just hit backslash, backslash 
backslash, it will autocomplete if you're in  
301:39 - Visual Studio, meaning just fill in whatever 
your your summary is. So I'm going to do plus  
301:45 - one to the input. Now, if I go over the red 
one, you'll see that now there's a little  
301:52 - description there. And it tells me exactly where 
does it pluses, one, two, whatever the input is,  
301:57 - the input is Loke. So it's going to be 
local plus one is what it's going to return.  
302:02 - Simple, easy, and to the point. And they also 
have some other variables that you can fill in,  
302:06 - you can fill in like whatever the parameter A is, 
you can put out what that is for you can put out  
302:12 - whatever returns, and in the right context, it 
will display that information for you as well.  
302:17 - And over in Python, I'm just going to get rid of 
everything and set up our scenario real quick. So  
302:22 - loke equals zero doing a do def read one, and then 
we need our a input. And then let's see return,  
302:30 - whoops, return a plus one. And then we just 
simply do loke equals what is the right one,  
302:41 - and then pass in Loke. And then we can print 
low out, and then we don't need a input. And  
302:53 - just to prove that it works, I'm going to hit 
play up here and you see that we have a one.  
302:58 - Now to add summary comments to Python methods and 
functions, all you have to do is go right under  
303:04 - the method or function in Python, and then hit 
three single quote characters, and then another  
303:11 - one. So you pretty much block comment. And then 
you just type whatever the function is. I'm just  
303:16 - gonna pop copy this because I'm lazy. And then I'm 
going to paste it here. And so now if we go over  
303:22 - here, it shows you what it does definition red 
one, it pluses one to the user, I'm sorry, to the  
303:29 - input. And then we can add more if you want like 
a equals, you know, float, for instance, just more  
303:35 - information for the user. And that's pretty much 
all there is to it. And there you have it, guys,  
303:41 - that is pretty much everything you need to know to 
get started with programming in terms of comedy.  
303:48 - Well, all right, congratulations, you fully made 
it through the course. Now, how do you think  
303:55 - you did? If you really aren't sure, you should go 
back to the your first program lesson section four  
304:00 - and retry it on a different tier. If 
you're able to complete your first program  
304:04 - on his hardest difficulty, then you know, you 
are officially ready to go out into the world  
304:08 - to find your own problems to solve and 
code up your own ideas with your new  
304:12 - found skill. But before I let you go completely, I 
just want to pump you with some inspiration on the  
304:17 - cool possibilities that you can take with this 
skill from here with more practice of course,  
304:22 - but I just want you to think about everything 
you do these days. Just think about the fact  
304:27 - that almost everything you interact with in this 
new digital age is some way determined by code  
304:32 - online banking, offline banking, text messaging, 
tweeting, watching this very YouTube video even  
304:38 - driving your smart car now or using your smart 
toothbrush. Lock your home with your Smart Lock  
304:43 - or even using yourself Smart thermometer, the 
list goes on and on and on. And of course,  
304:48 - From this day on that list is only going to 
grow larger. Our world is becoming more and  
304:52 - more dependent on programs running the show, 
which is a whole other conversation. But again,  
304:58 - congrats because you at least now have what 
it takes to better understand and contribute  
305:02 - to that landscape. I wish you and your coding 
adventures nothing with the best. And the last  
305:07 - thing I want to leave you with is this bit of 
advice. You're guaranteed to do amazing things  
305:12 - with code so long as you follow this final 
rule. Remember to always feed your curiosity.

Cleaned transcript:

If you are familiar with Jabrils, you know that he is one of the most entertaining tech creators out there. YouTube, the company, asked him to create a full programming course. And we are proud to be able to release the entire course as one video on the freeCodeCamp channel. Yo guys, all my life, I was told programming was hard. It's only for the nerds. It takes so much math, your grades aren't good enough. But having programmed now for 13 years, I can confirm that all these assumptions are false. And that is why when YouTube recently approached me with the opportunity to create an entry level programming course, I knew this was my opportunity to try and correct some misconceptions that I'm sure still preventing average people like you from diving into the amazing world of programming. But first things first, we have to knock it off with this high wage medic field. So you want to learn to code. I mean, I don't blame you for insurance computer science as the second most valuable major to learn. Now, of course, you could just go to your school and learn how to program or you could just learn how to program from a dunce like me that has no traditional schooling background. Play. Wait, hold on before you click off this video and sign up for a course at your local university. Let me at least try and win your hearts with a quick story. She's It all started when I was about nine years old, my friend invited me over to play this new game that I had never heard about. Yeah, man. It's crazy. You get to play Donkey Kong if you want and fight against link Mario Pikachu. And sure enough, he was talking about the original on the Nintendo 64. And like, I had always played video games. But there is something about this game that from that day on had me obsessed with video games. I remember when my family moved from Virginia to California in 2000 the whole drive across the US I was designing my own Smash Bros levels using a little pain in Notepad and when Christmas came around, I asked my mother for a Nintendo 64 with Super Smash Brothers and I played that came for countless hours absolutely captivated with the concept of it all I conict internal mascots all together battling it out in a video game in three dimensions. How is something like this even possible? This whole experience is what got me interested in wanting to understand more about how video games work, no, not to learn how to program because I was still at that age while still learning to read write in do basic maths. Again, he got me interested in wanting to learn how games work. And remember this because this will become important later. It wasn't long after that until I came across a little website called newgrounds.com. A place where people like me were making simple low budget games and interactive movies. And I believe this truly to be the experience that planted the seed in my head that making video games like the ones that I love playing was actually possible for someone like me. So a little later in life when I came across something called Game Maker, which advertises itself as you can start making games today, no code required. And after weeks of begging my mother to buy it for me, she finally did. And man, that was such a fun time in my life. I had absolutely no idea what I was doing. But just doing the best that I could create logical statements that will make a computer do what I want to do was enough to get me hooked. Feeling that sensation of being truly tired for the first time. Because I stayed up all night trying to understand how to create an inventory system is something I'll never forget. From that day forward. I continue to learn as much as I could, asking all for help who are willing to help me learning more and more not about programming, but about how games work. Because you see, understanding how games work is what initially drew me to programming in the first place. And without even knowing it. That is what I would always fall back on when times got rough during my coding adventures. And so moral of the story is, I know what it's like to have an extreme urge to learn this stuff while being not exactly sure where to start. So I know exactly what you're missing and how to get you on this side of the fence. And thankfully, I've learned how to do all this stuff without traditional schooling, which means you and I, we speak the same language. Now if that story didn't went over your heart, you probably don't have one. No, I'm just kidding. I'm just kidding. But I'm sure that this will this. Here's my friends are glar zargar is a highly intelligent programmer that has no joke programmed, literal entire star systems solo using only a ti 80 calculator. And when I told zargar I was gonna be making your programming course he Would not shut up about wanting to teach it for me. Now zargar is a quintillion times smarter than I am. But why do you not want zoglair? To teach this course? Well watch this zargar What is an array? Well, you see, we need a bit of a backstory, because traditionally memory can only store information at a 32 bit rate, which means recursion depth called the pull up on Moore's Law gained traction in 1996, we not only obtain more power and memories, okay, sorry, you've proved my point. This audience didn't understand any of that PhD programming slowing me It's time to go. And next time, remember, breathe. Oh, man. So welcome to my course. In this series, you will leave with everything you need to start programming. Yes, you've read the title, right? This is not clickbait. In fact, by the end of this course, you will write your very first application utilizing everything that we learned. But if you're to remember anything from this course, please let it be this. Ask yourself, why are you here? What has drove you to want to learn everything you need to start programming? Again, for me, it was to understand how games work, Whatever your reason may be, I encourage you to write that reason in the comment section now. And if at any point throughout this course or hell throughout anywhere in your programming adventures, things get tough, I want you to return to that comment and be reminded on the reason why you started. Trust me, you got this, I promise, it's a lot easier than you think. And I'm going to do the best I can on the communication side of things to make it even easier for you on this course. I will see you on the next part. Yes, it's so tight to see that you've clicked on this video and are interested in learning some programming principles. Well, I'll tell you one thing, if you want to become a programmer, you aren't going to get very far without this thing. This is called an ID. There are many, many, many different types of IDs, some from large organizations that you've definitely heard of like Visual Studio from Microsoft Xcode from Apple and Android Studio from Google. But there are also IDs from various other organizations as well. Pie chart from JetBrains Eclipse from Eclipse sublime from a couple of dudes, Adam from GitHub, just to name a few. And as you probably guessed, today's lesson is all about ID. Hey, what does it mean? Duh, of course, how could I forget to cover that Id E stands for integrated development environment. And just as the name suggests, it's a digital environment used to develop games, software, hardware, just about anything with code really, that offers integration or control over many aspects of development from debugging, which means adding removing or changing code that prevents your program from running as intended all the way to compiling, which roughly means taking your code and turning it into something that computers can understand. Some ID support just a single language, for example, IDL, which is an ID that is bundled with the language Python when you download it, and it only supports Python, but IDs like Xcode from Apple supports a bunch of different languages like C, c++, Java, Python, the list goes on. But as you see, my point here is that there are many different options when it comes to choosing your ID. And honestly, it can be a bit intimidating. But again, if you want to start programming you need in it later, when you get more experience under your belt, you can use Microsoft Word to write your programs, if you really wanted to the whole, I would not recommend this, no matter how much experience you get, you'll be wasting a ton of time. And that is what it is a digital environment that is a various central parts of programming. Where do you want to code, some games, software, hardware, you name it, and it is your best friend to help ensuring your success. It's now time to install your first ID. Are you ready? Let's do it. And heads up. There are many different IDs out there. But instead of walking you through each and every ID, which would be a very boring lecture to sit through, you're instead going to get my bias and I'm going to show you how to install my two favorite IDs Microsoft Visual Studio, which should interest you if you want to get into Windows development or want to make games using a popular engine called unity. And we'll also be installing Microsoft Visual Studio code, which should interest you if you're interested in more general programming or data science, as well as a slew of other tasks. And yes, they both have Microsoft Visual Studio in their name. And yes, they are two separate IDs. Now, let's get started. Alright, so the first thing you're going to want to do is open up your browser. I'm going with Google Chrome as my browser. You can choose whatever you want this far, it's not really important, but you want to search Visual Studio in the search bar and then click downloads, you'll see visual studio.microsoft.com Click downloads and it'll take you straight to The page that you want to be on. So as you see, we have here a Visual Studio 2019, the Community Edition, let's hit free download there. And then you also have your Visual Studio code, it will hold on one second, you'll see that it pops up down here, lets you know that it's downloading. And then I'm gonna go back and then I'm gonna click Visual Studio code, free download, this is the second ID we need. And it will pop up down here, let you know that it's downloading. And just wait for that to download. Alright, once those are done downloading, you can either click on them from here in Google Chrome, if that's what you're using, and they will start to install it. But if you don't have Google Chrome, then you're going to want to find whatever your default Downloads folder is, in most cases, it should be downloads in Windows CE downloads. But if not, you're going to want to find that so that you can install the IDs. So first, let's install Visual Studio code. I'm just gonna double click on this. And you'll see that we get a window here that says Welcome to the windows studio, code wizard, setup wizard. And this part's really easy. It's just like any other installation you've ever done, you just hit next and you agree, read if you want. Hit next. And then here, you want to leave this at the default location, which is like see, somewhere somewhere Program Files, likely. But because I already have this installed on my system, I'm going to install this in a very special location, so it doesn't mess with our presets. So yeah, just leave that how that is hit next, and then just hit next. And here, I would recommend that you check open with code and on both of them. And also make sure that add the path is checked as well. And what these to do here is allows you for like let's say you have some Python scripts, and instead of having to open up first Visual Studio code, and then hitting file and then open and searching for it, you can just go to like, let's say one of these are a Python script, you can just right click on it. And then you'll have this available here where it's open with code. So it will just open that file directly in Visual Studio code is very convenient. You can also do that with directories in case you have a a file, I'm sorry, you have a folder with a lot of Python scripts, you can just right click somewhere in the folder, hit open with code. Very, very useful, I would, I would definitely recommend checking both of these, and then just hit next. Now I'm going to go back and remove these because again, I don't want to mess up my presets. But this is how your years should look with of course, this the next destination being C C program files, whatever, whatever. And then after that, just click install, install, and then you can see that it's going to install. So I'm going to take couple seconds, I'm going to take terribly long, and bada boom, there you have it, Visual Studio code has officially been installed. We're gonna hit finish and launch vinje Visual Studio code. I'm going to bring this Oops, wrong window. Going to bring Visual Studio code over here. This is what it looks like. Now before we get started, there's a couple of things that you want to do, you do definitely want to add Python right here. So click Install. In fact, I'm going to show you how to do it traditionally just search Python and then install just Python. This allows you to use Python with Visual Studio code. And there are a few options to do that. But this one is straight from Microsoft. So just install the top one that's just called Python. And another extension that we're going to need is called code runner, just searched code runner, open the extensions and download the first one is going to allow us to run our Python scripts within Visual Studio code without having to leave the ID. It's very nice. Alright, and there you have it, Visual Studio code is installed. If you want to do new file, just go to File, top new file and bada boom. If you want to save an extension use simply save the file anywhere, we'll just do documents, for example, and just do like my, my file I don't know.and.pi will get you a Python script, hit save. And now it's recognized as a Python script. And if you get this pop up here that tells us that Python is installed. Visual Studio code is often really good with letting you know like what you need and what you well not so much don't need but really Google with let me know what you need. So let's hit download here is in a pop up window window, we're going to want to download python 3.7. And then I'm just going to hit what run odds it's save open folder here. And I'm just going to double click that to run it. Next all you want to do is just hit Add Python 3.7 the path and then just click install now. And it's just going to install now. Give a little time and Python should be installed. And just like that setup was successful. So back in our Downloads folder. I'm just going to double click that The Visual Studio installer. And I'm not sure what you're seeing right now, but it's asking me to type in my password. So I'm going to do that. Let's see, hold on. No, it's an older pin, sorry. All right, sorry, one black there for a second. And then we have Visual Studio installer, just hit Continue. And it's going to start downloading and installing some stuff shouldn't take too long, then you should see something like this pop up. And they're going to give you a few options, you can ignore most of them, maybe come back to him later when you get a bit more experience. But all you really need is this one on here. dotnet desktop development, because we're looking for is the console applications using C sharp, so just click that one. And then you just click install, and see install on system drives recommended. Again, I have this already installed. So I'm going to place this in a very special location, but definitely placed this installed on your system drive where it's recommended. So I'm gonna hit OK. And you get this that pops up, thank you for installing, take a survey now. And this will start installing, it's probably going to take a little while. But once it's done, you won't have much to worry about. All right, and once it's at 100%, give it a second. It's kind of a start automatically, because we had that checked. And bada boom, now you have welcome connect all your developer services, developer services. Just hit not now maybe later, at some point to force you to make an account anyway. So just for now, we'll do not now start Microsoft Visual Studio, preparing your first time use. And here we are. Now if you want to create a new project, you simply just hit that hit create a new project. And then we'll ask you what type of projects you want to make. We're just going to do a simple c console project and C sharp here, and then hit next. And you can name it, let's just name it all just leave how it is concert project one is fine. And create console app sorry. I don't know how to read. Give that a second, and bada bing, it'll start up and now you're officially in. And that's pretty much all you have to do for C sharp. So if you're on a program in C sharp and or Python, it's important to understand their syntax. But first off what is syntax? Well, syntax in relation to programming, it's pretty much a set of rules that must be followed in order of operation that your code must abide by a process that must be respected if you want your program to run. And so today, we're gonna look at the syntax for two different languages and see the differences between them, because I think it could be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. And so on the left is language C sharp using the IE Visual Studio, which should interest you if you don't do any windows development or want to make games using a popular game engine called unity. And on the right is language Python three using the IEEE Visual Studio code, which should interest you if you want to get into general programming or data science. Alright, so here I have two brand new console projects. So the first thing we're looking at today is how both languages go about utilizing data types. Now data types by themselves are useless, you have to assign a data type to a variable. Now to get started in C sharp over on the left, I'm just going to get rid of these two lines because I no longer need them that comes stock with every new project. And then we're going to use a Boolean as our example today. Now a Boolean is a type of data that can only be one of two types. It's either true, or its false. So let's initialize a Boolean in C sharp. Let's call it do it. And then we're going to assign true to it. So do it equals true. Now this is all great and all do it is a Boolean that we assigned to be true. However, C sharp will not recognize it as a Boolean unless you cast its data type. And in C sharp, you simply cast the data type by going before the variable which again, a variable has to do it before it just type whatever the data type is. So this is bool, which is short for Boolean bool do it equals true so your error goes away and everything checks out. And this very syntax goes for every variable. For example, if you want to initialize a string variable, you have to cast it. So I'm gonna say this is a string. I'm gonna call str short for string, and then I'm going to sign hello to it. For example, you have to do this for every single variable. However, there's a bit of a catch. So I'm just getting rid of this line because I don't need anymore. You only Have to initialize your variables on their first use. So like, if I wanted to change the duvet Boolean variable, I just have to come down here. And I need to do it equals false, for example, and that's because we're on this line right here. The program knows what the data type for the do it variable is, he knows that it's a bool. So I don't have to do it again. In fact, if I try and do it again, you'll see that I get an error, this error is pretty much just telling me that like, I can't create the same variable twice, essentially. So just remember, you only have to initialize on the first use. And this convention is for every single data type. So it's Boolean strings, that's integers as floats, every single one. Now over in Python, things are a lot different. So let's say we want to do the same example always want to initialize a boolean variable? Well, in Python, all you have to do is just write the name of a variable and then assign whatever value you want to it. So in this case, we're gonna assign true to it. And there we go, we just initialize a boolean variable. That's right. In Python, you don't have to cast your variables, you don't have to cast the data type of what you want your variable to be, like you do in C sharp. And this benefit comes from the fact that Python is what's called an interpreted language. And what that means is, all you have to do is create a variable and then assign some value to it. And depending on what value you assign to your variable, Python will interpret what type of data type that variable should have. And with this syntax, it enables a lot of flexibility with the Python language. It's one of the reasons why so many people love Python, because it's kind of like a breath of fresh air, as far as computer languages are concerned. And it's one of the reasons why a lot of developers that are into data science when I use Python, because as you can see, you can save a lot of time not having to type, you know that the data type over and over and over for your variables. However, the flexibility doesn't stop there. I'm going to simply print out What do it equals, like, so save it, hit the play button, and you'll see that do it equals true, obviously, is what you expected. But check this out. If we want to reassign it to be false. For example, we just come down and say do it equals false, save, hit the play button, and we have a false value. But this is where it gets really cool. So currently, as you understand it, do it is a boolean variable. But we can do do it equals 13,037, for example. So first we assign true and then we change the mind sign to false and then we change the mind again, and assign it to 1337. When I hit play, no errors, it just prints out that is 1337. The last thing we assigned it to, which is crazy flexibility over in C sharp, we simply cannot do that if we want to change the do it to be a like an integer, for example, we're simply just going to get an error saying that, you know, you cannot convert an integer into a bool. Once a variable has its data type, it cannot be changed. And this is probably one of the biggest differences between C sharp and Python at the fact that how they go about casting their data types. Next, I want to get into command terminations and the differences between C sharp and Python. First things first, what is a command? Well, for example, this bit of code here is a command. And what it's saying is take our dude variable and assign a false value to it. Same with up here, take our dude variable, assign a true value to it, and also cast it as a Boolean. These are examples of commands. So on a very low level, the way a computer works is that it needs to know when these commands begin and in so it knows what it needs to process. And so that is where a command termination comes into play. We need something to be able to separate all these different commands. And in C sharp, the command termination is a semi colon. These semi colons right here is what you have to add to the end of every single command to be able to tell the computer that hey, this command is over, you can process this before you processed the next one. I'm grossly simplifying it but that's how it works on the higher level. And so with that in C sharp so long as you have a semi colon separating your previous command for your next one, you can place your commands anywhere you want. For example, I can move this, this command right here to be right after the previous command. No errors, no issues, I can put it back on the next line and hit Tab a bunch of times, no issues no errors. You have a lot of flexibility using the semi colon as a command termination C sharp has a lot of flexibility in this regard using the semi colon as a command termination. Now over in Python, they differ here a lot as well. So you might look at C sharp and see okay, semi colon that makes sense as a command termination with Python. What How do they do that? Well, the answer is quite simple, actually, instead of using semi colons, they just use a line break. So if you want to separate two commands, you just put it on a new line. Easy as that, in fact, to demonstrate, we can't do what we did over here in C sharp. If we were to put these right next to each other, and then save it, you'll see that in the problems tab, it says that we have invalid syntax because you can't, it doesn't know what's going on here. Why is there a value and a variable afternoon, it just doesn't understand how ever Python kind of thought of all the stops, you can simply just add a semi colon and Wallah, it will now act as a command termination. In fact, just to prove that, it does what I say it does, I'm going to bring them all on the same line to command terminations. And then I'm going to press play and show you that it runs it prints out 1337. So yeah, in this regard, this makes Python really really flexible. Because you can use semi colons if you want to. However, you'll find that most developers don't, because it's often a lot faster to just use the new line command termination instead of the semi colons. And Allow me to demonstrate that. So I'm just going to restore both scripts to back how they were, this is a new line. This is a new line. This to do this. Alright, so now they're back to their back restored. So the reason why you can save a lot of time is because if you look at the two different scripts, they kind of both just use a new line termination anyway, even if you were to look at more complex C sharp scripts, oftentimes you'll find that over 90% of a C sharp script is going to use like a new line as a command termination anyway. So you're actually saving a lot of time without having to type you know, semi colon, semi colon, semi colon, and you'll see that it turns red in this context, because it's letting you know that it's pretty much useless. Like we know that you want to terminate this command by going to new line. And then if we were to hit backspace to turns white, because like, okay, now it's in use, we understand what you're trying to do here. But please know, this is a feature that comes with the Visual Studio Code ID. So take the information as you want, but do know that most Python developers will probably look at you sideways if they see any semi colons in your in your code. So yeah, there are a couple of syntax differences there. Next, I want to go over how they differ in code blocking. So first question, what is code blocking? Well, I'm gonna come over here in C sharp and give you a quick example. First and foremost, the way that you indicate a block of code is to use these braces. Anything that goes inside of these braces is a block of code. So the general syntax, you don't have to follow this, but most developers will put a block of code, one line in the middle is all the code that will be ran within that block of code, and then a brace at the end. And so here, we can like just move our do it equals false into here, for example. And of course, get rid of this one because we don't need it. And just like that, we have a block of code in C sharp, however, a block of code like this is pretty useless to add because it's going to be ran regardless. However, what blocking off code allows you to do is you can add things like for example, an if statement. So we can say if do it, then set duals equals false. And this block of code will only run if do it equals true. And I want to prove this to you. So I'm going to come up here, and I'm going to write console, dot write line, this is going to print anything that we want to the console. And I'm going to say checking. And then I'm going to come down here and then do it again. I'm gonna say console dot write, or wait, what is that? console, dot write line, there we go. Um, okay, set to false. Right. And then at the end, we need a console dot read key. This just makes sure that the terminal does not close when we hit the start button, which is up here and I'm going to press boom, terminals off screen on, bring it up, and there we go. You see that it goes checking, and then it sets it to false. But you are not convinced because we blocked out this code and it's still ran. So I'm going to change do a T equals false and watch what happens when I hit the start button and bring the terminal over here. It just says checking because, again, do it equals false And we said if do it, which is another way of saying if do it equals true, then run this block of code. And at the fact that do it equals false, this block goat has never ran. And that's code blocking, you'll find that code blocking is very important and very useful for all things programming. But that's how you do it in C sharp. Now over in Python, it's again, a lot different, I'm going to get rid of these two lines just to make it a lot less confusing. And so everything under the condition and indented will be counted as that block of code. Alright, and I'm going to run that, and you will see that we get checking set to false. And then we also had an extra print down here, that our move next time, but that also prints out false as well. And again, you're not convinced because this block of code is run anyway. So we're going to set this value to be false. And then I'm also going to remove this just so it's not confusing when it prints, and then save, hit play and only checking. And so that is how you do code blocking in Python. And so as you can see, code blocking is another syntax as C sharp and Python have a lot of differences between. But it's very important to know how to code walk in both languages, because you'll be using it quite a lot for for loops for if statements for methods, functions, all types of stuff. And the very last thing that I want to go over today is what's called variable scoping. So what is variable scoping? Well, with the introduction to code blocking, that's this right here, a block of code. Remember, this is a block of code as well, well, more right here, this is a block of code. But with the introduction to these blocks of code, now you have to worry about the scope of your variables. So let me give you a quick example. So let's say inside of this block of code, here, we want to initialize a new variable. Let's initialize just to do an integer, we'll call it a just for an example. And then we'll assign a zero value to it right? Well, because we initialize this integer variable within this block of code, it cannot be used outside of this block of code. And to demonstrate, I'm going to come down here, and I'm going to do outside of the block of code, console dot write line, oops, bright line. A, for example. And you can see what happens is it says that this variable does not exist. What do you mean, it doesn't exist, so we initialize it here? Well, again, like I said, this variable, because we initialize it within this block of code cannot leave this block of code. If we wanted to leave this block of code, we have to do it like this, we come out here, oops, we come out here and we initialize int a equals to say, five, for example. And then inside of this block of code, we just change, we just reassign it back to zero. So because it's it's initialized within this block of code, which is our main function, we can use it outside of this block of code. And that is variable scoping. In a nutshell, over in C sharp, this syntax is no different. So if we were to come inside this block of code and initialize an A, assign a zero to that, and then come outside of this block of code and try and print that a variable, you'll see that when we save and hit the play button, that we get an error syntax error saying that this a the variable is not defined. And again, if we want to get around this, we have to change the scope of a variable. So come out to the regular indentation, and just do a equals five, for example. And then when we get into this scope, we're simply just going to reassign it, change it to zero, and then we'll be able to print it and approve that I hit save, and then I hit play. And there you go, checking five. And again, just want to make sure I cover all bases. The reason why this prints out checking five is because we said do it equals false. And if do it is true, then this bytecode will be ran, but because do it as false as both code is not ran. So it just skips this entire thing. And it just prints out five, which is what we assigned a to. And that's pretty much it. That is everything that you need to notice our programming in regards to the syntax. And so in conclusion, even though C sharp and Python have differences in their syntax, as you can see, the differences are small enough to be able to remember the important stuff, you have to cast data types in C sharp Python, you do not in C sharp, you must use semicolons to terminate commands. Python uses new line breaks, and C sharp uses curly braces for co blocking while Python uses indentation. Of course, there are more differences in their syntax. But these are the major differences that often confuse the developers. All right. All right. All right. It's that time to code your first program. Are you ready to do this Get set, let's go. So we're going to make a simple MATLAB application. In the console, because it's simple, doesn't require you to install a million things and is something you can actually show off to your friends and family. Now, before we jump into this first things, first, the code to this project is in the description. Also, I think it's important to let you know that this lesson is kind of acting as a placement test. If you're just beginning to program, you might struggle with understanding what's going on in the code. And if that is you, well, that's okay. Because I structure this lesson to be just a little bit difficult to follow. Once able to code a project like this by yourself, then, I don't think there's much this course can teach you at that point. But I encourage you to watch the whole thing and follow along. Anyway. Again, the code is in the description. So you can just refer to that and follow along with me. Because if you do the following, you will get the greatest inspiration to become a programmer. After you struggle, I encourage you to go through the rest of my course LinkedIn description, or just check out the lessons on the stuff that wasn't easy to follow. I have over 20 videos teach you how to code and those videos go in depth about their respective topics. Then, when you feel comfortable, come back to this lesson and see how will you do a second or third time coding your first project. And trust me, when you ever look at how much you didn't understand in comparison to the next time you try and code your first project, you will not want to stop programming having program for 15 years, I can tell you that feeling pretty much summarizes programming very well, it can become quite addicting to chase but in addiction in the best way possible. However, if this is your second or third or more times coding your first project, I encourage you to not copy the code verbatim. But maybe create your own story or at if statements and functions this mad labs game who knows your experimentation could start a whole new programming trend. Lastly, if you want to share your project with me, feel free to tweet it to me and I'd be happy to reply back to you. But now with all that stuff out the way, let's get started on coding your first program. And we're going to make his application in two different languages because I think it can be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is the language C sharp using the ID Visual Studio, which should interest you if you want to do windows development, or if you want to make games using one of the most popular game engines called unity. And on the right is the language Python three using the ID Visual Studio code which should interest you if you want to get into more general programming or data science. Alright, let's actually begin writing our Mad Libs program. Now before I write any project or program or prototype, what have you, I usually like to start what I like to call a skeleton and what a skeleton is, it's pretty much just like a step by step process in which you can expect to have to do in order to complete the actual project. And because this is a smaller, simpler program, we can simply do this by writing out a few comments. So first, I will comment out initialize variables, and it just stands for initialize is shorter cork at the right then after that simply gets input from user. So we're gonna initialize the variables. And then we're going to ask the user to fill out the data for those variables. And then after that, we need to initialize whoops, and knit story. And then after we initialize our story, then we simply just need to print our story. And for parts, our program will be done. Simple, easy and to the point. And now let's just do that same thing in Python, do a comment, and then a net variables and then get oops get input from user. And then after that, we're going to end our story. And then after that, we need to print story. Easy as that. Next thing I'll do real quick is just beautify our script. I'm just going to add spaces between all the comments, it just helps me read it and understand the different processes that need to take place. Perfect. Alright, moving on. Now before we can do anything over here, C sharp on the left, we kind of need our story because everything depends on our story, really. So I'm going to paste in a quote from the matrix. I'm just gonna highlight all this real quick and hit Tab a couple times to beautify it, make it easier for me to read. But you are welcome to make up your own story. You're welcome to grab anything from the internet. Whatever you want to use as your Mad Libs story is completely fine. I even put the story in the description if you want to use it as well. But there we have it. This is the story they want to use for C sharp. And now I'm going to do the same for Python. just paste in that story string, same exact thing just in a Python format. Next thing I'm going to do is simply just print out story. And in C sharp, you're going to want to do console dot write line. And then ad lib story, Mad Libs story, boom, semi colon, done. And in Python, we're going to want to wait, I'm gonna change this to say Madlib story just so that it's the same mother story perfect. And in Python, it's really simple. You simply just type prints, and then Madlib story, boom. So next what we want to do is get input from user. But we can't really get any input from the user because we have no variables to pass to the user to collect data from. And so what our next actual step is, we have to initialize our variable so that we can pass it to the user. And to initialize our variables. Well, we need to turn our Mad Libs story into a bunch of variables. And we can do that quite simply, if you're at all familiar with the game, Mad Libs thing, you know, the whole fun of the game is that you have some story or some text or something like that. And you replace all the verbs, the nouns, the adjectives, etc, with words that are similar context, hopefully, but not exactly. And it makes for like, really funny, interesting stories. And so what we want to do is want to scroll through our text and essentially replace verbs, nouns, adjectives, with variables, and the first one I'm going to do is the matrix, I'm just going to put curly braces around this, oh, yeah, I need to make this into an interpolated string. I'm gonna do that for all of these strings. And this needs to be a variable, which is one word, the matrix boom. And so I'm simply going to come to a new variables, I'm going to initialize the string data type, and put the matrix in there. And now the matrix is a variable that we can ask the user for, and they can change to whatever they want. And I kind of did this ahead of time, I went through the text and picked a lotta verbs, nouns, adjectives that I thought would be interesting to change. So I'm just gonna go through and do that, for example, system is another one, I'm going to change system to variables can add that to this list. And I'm just going to do that for the entire text. I'm going to skip it though, cuz it's not that fun to watch. Alright, so I went through my story and replaced all of the interesting verbs, nouns, adjectives, etc, with variables so that we can pass that to the user, and they can put whatever words they want there. But now I want to show you your first optimization trick. If you look at this line here, the sentence as businessmen, teachers, lawyers, carpenters, these are all professions, that's what that's what they all have in common. And at the fact that they go back to back to back, we can do is really cool trick. Well, we will initialize a string array, and we'll call them profession. And then back up to initialize equals new string array of how many are there 1234, a four. And so now we can do this really cool trick where we come in here, and just make this an interpolated string. And overload case that just for good practice, businessmen, and Oops, sorry, that's not what I want to do, I want to do profession, zero, because we're gonna do a for loop, which I'll get into in a second. I'm gonna copy this, because I'm lazy. And I'm going to paste this here, and increment it, and then we'll paste this here. And then I'm going to increment it to two. And then the final profession, increments this to three, already start on zero, simple into the point. And so now what we can do is when we get input from user, since there are four professions, they're all back to back, we can simply just write a simple for loop and ask the user for four different different professions, one after another. And I'll show you how to do that in a bit. But there's also two additives down here that also do this with so I'm just going to initialize a new string array, call this additive AJ, DJ sharp additive equals new string array of two, there's only two in there. And so here, turn this into an interpolated stream, is gonna be a D j, zero. And I'm gonna copy this because I am lazy in this is the second adjective. I'm just going to increment. And there you have it, we now have our two string arrays. And final note, if you look down here, you'll see a bunch of errors for unassigned local variables. And that's only because we have not assigned these variables to anything yet. I believe they're there no at the moment, which is Your program does not like but we will be assigning the variables when we get the input from user. And over in Python on the right, it's a lot of the same. First, let's turn all of our strings into interpolated strings. And it's just like C sharp, except it's an F instead of $1 sign. So I'm just gonna add an F to all the strings. Perfect. And let's pop out this variable right here, the matrix, or rather, let's turn this into a variable called the matrix. And then let's initialize it up here and do the matrix equals empty string. All right, and then let's do system next interpolated string system. And then system like this paste equals empty string. And I'm gonna go through and do this for all the interesting verbs, adjectives and nouns in this text. Alright, so I pulled out all the interesting words and turn them into variables. And now I'm going to show you how to do that optimization trick over in Python. So again, we have these four professions, and we want to turn that into a string array. And to do that in Python was going to do profession equals brackets, and therefore rooms are going to empty string, empty string, empty string, empty string for empty strings. And there we have a, an array with four strings in it, that we can pass the user and then they can change the beer or whatever they want. And it's the same as C sharp doesn't use interpolated string, professions zero, I'm lazy, I'm a copy this and paste it here, increment it, paste it here, incremented pasted here, increment it, oops, yeah, it is three. And then we also want our adjective array, which is only two. So I'm gonna do brackets, empty string, and then another empty string to empty strings. And then that goes here, which is a edge, zero, I'm going to copy this because I'm lazy, and then paste it on dependent, and then increment that, and bada boom, now the scripts are in the same exact state. For All right, the final stretch, let's get that input from the user. So first of all, there are two functions that we need to familiarize herself with. One we've already went over, and that is console dot write line. This is where we're going to use to print something to the console. And the second one is console dot read line. This is where we're going to use Well, there's no input parameters. But this is going to return to us a string that we can set our string variables to. And this comes whatever the user types into the console presses enter. That's what's going to be returned with console dot read line. So for example, we can do the matrix equals console dot readline. Easy as that. So let's get started. I kind of ahead of time crafted a little interesting story that the user can have with the terminal just to make sure I'm not Stumbling on this part. But let's start off with console dot write line. Let's just do like, welcome. user, welcome user. And then we can go down to another one, console dot write line. And then let's say let's play, let's play a game of Mad Libs. And then after that, we can get their name. So we can say, let's do another console dot write line. And then please share with me your name. And then here is where the terminal is going to stop and allow them to put in some input. so here we can do Neo, since that's the name of the character in the text, equals and we can do console dot read line. And whatever they returned here is what the variable Neo is going to be set as. And just in case you don't believe me, let's actually run this program and see that being printed on the screen. First thing we need to do though, is with all these errors, it won't allow us to actually run the program. So let's just comment out this and Tired thing, whoops, hold on a second, I need to do that and comment this out, come with that one all the way down the line. So this doesn't get compiled. And then let's replace this for now with, with Neil. So whatever name that we pass to the terminal, it's just going to spit that right back at us. And that's going to prove to you that we're able to set variables this way. So I'm gonna come up here to the top and hit start. And my window actually goes out of frame. I'll bring it on screen. So as we put Hello, welcome user, let's play me mad libs, share with me your name, and I'm going to put my name to bring this up. Of course, it's going to exit because we also didn't tell it to pause. So let's Um, I think we need to cancel that wait for that, let's do another read key concept that read key that's gonna wait for a key press and then it's going to exit the terminal. So run it again. Bring it back on screen. Welcome user. Let's play a game with Mad Libs, please share with us your name, I'm going to put bros and their prints right back to us the same variable that we put in, which is lets you know that it's actually working. So now I'm just going to revert back to its original state. And we can do z Ctrl, z Ctrl Z Ctrl, z Ctrl Z. So a bunch of times, and we are back woke at semi colon, and we are back to our original state. And if you don't have control Z, I think on Apple, it's Apple z, I believe. But if you don't have either those buttons, you can come up to edit and then hit undo up here. And that will do the same thing that I did with my shortcut on the keyboard. Also real quick, let's add at the very end of our process, let's add console, console dot read key. This will make sure that it pauses the application before quits. Okay, so now over in Python, let's start to get input from users. So what we want to do here is instead of writing console dot write line, again, it's as simple as prints. And we can do print, welcome, user, come down to another print. Let's play a game of Mad Libs, and then another print and say, Please, please share with me your name. And then we can simply do Neo equals inputs. Well, technically, technically, we can add this string into input, and it will be the same exact thing. So we can do this, and it will print and then whatever the next line is, it will get that input. However, we do need to add a line break here. Otherwise, it's going to, it's going to allow you to type right after the question mark, we want to go to a new line, just to make it a bit more cleaner. And so now the cool thing is now that we have our actual name set in the variable, Neo, we can use that with our printing function. So if we do console dot write line, for example. Let's interpolate the string and do Hello. And then we can do here, Neo. And then exclamation point. And then let's say something like, are you ready? Are you ready? And then what is something you want to know more what running out of space? So I'm gonna go to next line more about. He learned how to spell more about. And then next line, when they answer what they want to know more about, we can put that into the matrix. So I forgot my semicolon. So we can do the matrix equals console dot read line. Easy as that. And over in Python, it's pretty much the same exact deal. We'll do print. What is it when interpolate the string with F? Hello. And then this will be Neil. Whoops, Neil. And then are you ready? Are you ready? And then actually, I'm going to break this off. Whoops, I'm going to break this up into another print. Actually, I want to make this an input. input. And then this is what is something you want to know, oops, to know more about. And of course, we need to do the matrix variable equals whatever they want to know more about. So just to make sure that you're still with me, just remember that the only thing we're currently working on is get input from user. That's this section right here, everything else we are not focused on. And within this section, there are only two functions that we're using. The first one is called to that read line, which is just simply printing some string to the user. And a second is console dot read line, which will return to us whatever that user inputted into their console, that we can then assign a variable to it. That's it. Nothing more complex than that. So continuing along with our little storytelling, we can have a lot of fun. And do console dot write line, and then interpolated string, and do something like, ooh, and then we can put you want to know more about, and then the matrix Ha. You know, just have fun with it. And then we can do another line console, dot write line, interpolated string. Let's see. Next we want to do is we want to get the variable system. And so we need to give them a bit of a context. So we can do something like, first, let's see first. Okay, please bear with me. Okay, well, first, tell me what you already already know about the matrix. And then let's do one final one, which gives them a bit of instruction, because this is madlibs. After all, we're gonna do let's see what now would you categorize the matrix as, and then we can add like a little semi colon here. And then finally, finally, we can do system equals console dot readline. And yeah, pretty straightforward. Again, I'm just trying to have fun with this Mad Libs as we're getting the data, the information, the input from the user. And so, you know, you also want to give, you know, this is all mad libs clues right now. But you also want to give the user like some sort of hint as to what word they're replacing. So I simply just asked what noun would you categorize the matrix as, and he's just trying to have fun with it over in Python, not much really changes, we're just going to print out the same exact strings. So so Oh, oh, you want to know more about that? I mean, you put the matrix and then print another line. And this is going to say, Okay, well first, tell me, oops, tell me what you already know about the matrix to another line. We're in df and then what now? Would you cat TIG Gore, right? Then matrix. Actually, I forget this is Python. So we can actually make this our input, and then do system equals this input. And just to prove to you that we're just trying to craft the story here, nothing more complex than that. I'm going to initialize all of these remaining variables as empty strings just so that that error clears up. Because empty string equals empty string, equals empty string equals empty string. And now we can actually print out this story. Even though most of the words most of the very roles are going to be whoops, equals empty string are going to be empty strings. We can print this out. My console goes over to the left. So what is my name to Brill's? And then, as we wrote, hello jimbros gave us her name. Are you ready? What is something Do you want to know more about? There's a typo there. We can fix that. I want to know more about pizza, for example. Oh, you want to know more about pizza? Okay. Well, first, tell me what you already know about pizza. What noun? Would you categorize pizza as I categorize pizza as pie. And then that's as far as we've gotten our code. So now it does the Mad Libs, it replaces the variables within the actual Madlib story. And they get we gives us this pizza is a pie two Bros. That pie is our and then it's all empty strings from there. But as you see, this is this is all we're doing at the moment is this part of the terminal script, we're just crafting this story. That's all there is to it. Hopefully at this point, I've convinced you that we aren't doing anything complex. With this stage, we're just printing out a story to the console and asking for variables. That that's all. So let's just finish off our story by moving on. So next thing that I want to do here is of course, we're gonna do console dot write line. And we're gonna interpolate a string. And what I want to put next is, let's see. Give me me in opposing, opposing now, to system, right, because the next word we're going to get is enemy, we're going to try and replace enemy ever again, we're just trying to give them some sort of hint for a good noun to replace. So that should work. So then we're gonna do enemy equals console. dot read line. All right, so hopefully, this string that I printing that I'm printing to the console, is enough to give them a hint. On a good words, replace enemy with moving on, we're going to do another console dot write line. And what are we getting next? Next, we are going to get the word inside. So let's see. What hint Can I give for inside I don't know relaxing. Now, let's say now give me any relaxing. Now, in of course, this needs to be in the present tense, present tense. And then we can do inside equals console dot read line again. And we just keep on going down the line, we're not going to get caught up to speed in Python. So last left off was system. So we need to print let's see, interpolate a string. Let's do what is it give me me an opposing now to system. I always forget this is Python so we don't have to print and then do a read line. We can just do input. Let's see what's the variables enemy, right? Yeah, enemy equals input. Cool. And then we can do the same thing with inside equals input. And then I'm gonna interpolate the string. And then let's do now. Now give me any relaxing. Now, present tense. All right, oops, no, semi colon, none Python. Cool. And we are all caught up. Now next up is the interesting part that we kind of set up a little earlier in the video. Now we need to actually use our for loop for our string arrays. And so we can go about doing that really simply just create a for loop for int i equals zero. i is less than profession, dot length, semi colon i plus plus, and then come down here sort of brackets. And so this for loop is just going to go through the professions which is next up in the text prompt, and we can simply just asked. Let's see. I guess before that though, we need to alert the user say console dot write line and say Okay. Now I need for professions, professions, professions relating to what is this relaying to system and interpolate the string here, boom. So we let that alert the user what's about to happen, I need for professional building systems. And then here we can do console dot write line. And we're gonna do a course interpolated string here. And let's do profession. If I have any typos, I apologize, profession, plural. Because, again, we're doing businessmen, I don't remember them originally, businessman mckellan, something like that. But they're an employee rural. And then we can just simply let them know where they're at, by doing i plus one, because is going to be zero starts at zero. So we can do that plus one to get it started at one. And then simply profession dot length. Right, so what this does, let me just walk you through this thing is a bit vague. So what this does, simply, as we're going through our for loop, there are four different professions, it's going to write to the console, give me a profession, plural, and it's going to print out what number profession they're currently filling out. That's all it is. And then it's divided by the length is how many professions we need. And I'll show you this example a bit later. But once we do that, then after every single time, we print that to the console, we want to read line and assign profession of AI to that, and that will pretty much populate our entire profession string array. All right, and to get caught up in Python, it's not too difficult, of course, we need to write out our print. And we are currently alerting the player that a for loop is about to happen for the most part. So okay, now I need four pro fish ones relating to system. Right. And then we got to do our for loop. And for loops in Python are they're a bit different. So we're gonna do for i in range, length of profession. And then we'll do our colon and the next line will do the profession of AI equals inputs. And then here, what do we put we put profession, which is definitely a typo in the C sharp profession. And then plural. And then here, we're going to do i plus one, hope this is not interpolated string, and add an F to make an interpolated string, divided by length, oops, come on, come on. There it is length of profession. And there we have it. They are now currently up to speed. Now this point, I'm pretty sure that you could finish this program on your own because we're just essentially gonna do the same exact stuff we've been doing. And once you fill out the remainder, what is it like three or four variables, the application is done. However, I want to take a second to pause because I often don't go this long without leaving comments. It's always nice to leave comments for yourself in the future. Or if you're going to send this off to a friend, or if you're going to upload it to GitHub for you know, other developers is trying to take apart and learn from it's always good and nice leave comments. So let's do that. Just to explain what's happening here. I'm just going to say we are getting the matrix variable a variable from user it's going to be a lot of those comments getting system variable variable from user forgetting enemy variable from User where I didn't even add system, system variable from user sorry, getting what is this inside variable? variable from user. And then this is arms and say commencing for loop. No way, commencing. Now I'm going to say that I'm going to say getting getting all professions. From user. Also, I know that I have a typo here. So I'm going to fix that profession. Yes. Cool. I'm actually going to combine these not not. And yeah, this really helps me out personally. Oftentimes, when I'm reading code, I'll often look for the green, or like, where the comments are, whatever color the comments are, in the language, often look for those as like kind of like markers. So I can kind of fill out the code and know exactly what's going on where. So it's always good practice to leave comments in Python and do the exact same. And leave a comment here, getting the matrix variable. From user. I apologize, if I have typos, I'm not terribly concerned about that getting getting system variable from user, and then this is going to be getting enemy variable from user. And this is getting inside variable from user. And this is getting all profession. variable from user was going to change his profession. I guess that doesn't really matter. Cool, a bit redundant, but it always helps. Alright, so I went and did you a favor and pretty much wrote out the rest of the logic for the rest of the variables, because it probably got a bit too mundane if I were to record it on the screen, but we can walk through it anyway. So right after the profession's for loop, we are essentially getting the same variable. And we do that by writing to the console, give me a hero related verb in the present tense. Again, this is just hints for the user. So they kind of have an idea on what we're they're replacing. And then we will save whatever string they returned to us into the Save variable. And then we get the unplugged variable, which we do that by writing to the console. Now give me a verb that makes you think about relief in the past tense. Again, just another hint, you can see how mundane it probably would have been. And then whatever string they returned to us with counselor reline we will save that into the unplugged variable. And then after that we need to get our adjectives are two of them. So we first warn the user say, lastly, I need to dystopian adjectives. And then we do a for loop. And simply, we will tell them that they are currently filling out an adjective. And we'll let them know what number they're on out of the total number. And then we will save that to their respective adjective variables, whatever string they're returned to us. And then lastly, we just need to get the fight variable. And we just say, Hey, we need a verb on the console. And then whatever string they returned to us, we will save that into the fight variable. And that's pretty much it on the Python side of things is the exact same just in Python syntax, you know, get the same variable, get the unplugged variable, get the two adjectives to a for loop, and then get the fight variable. And we're done. Great work guys are madlibs application is pretty much done. I mean, there's nothing left to do. Except there's one thing that I want to do on Python. So the input function is a bit different than the console dot read line, the constant read line function will always go to a new line, the input does not. So with that, let's kind of format this a bit. I'm going to do with all the inputs, semi colon, and then a space. So whatever question we asked them, they can input that right after our question. So I'm gonna do that again. I'm actually going to remove the question mark because it might get a bit confusing with that syntax anymore. So there's some added space there. And then input here I'll do colon space. Here I'll do colon space. Where else here I'll do colon space. And this is the input space, there's input space. Here, space input here, space, and boom. Alright, and that's just going to look a lot more cleaner when we're actually playing the game in the terminal. So all that's left is to play it and let's, let's actually play it. I'm going to run C sharp first. I'm going to bring this over here and it says welcome user. Let's play a game of madlibs. Please share with me your name. My name is jabril Hello, jabril. Are you ready? What is something you want to know more about? I want to know more about pizza. Oh, you want to know more about pizza? Ha. Okay, well first, tell me what you already know about pizza. What now? Would you categorize pizza as I'd say pizza is a pie. Give me an imposing noun to pie. Hmm, maybe cake. Now give us a relaxing noun. Present tense. I guess sleeping is a relaxed noun and present tense. Okay, now I need four professions relating to pie. Ooh, I don't know. Baker. Cook. Chef. I don't know. I don't know. What's the last one? I'm just gonna say butcher. I don't know. Give me a hero. Related verb in present tense. Here are related verb in present tense. Let's see. Save. That's all I can think of. I know that's the actual word, but it's all I can think of. Now, give me a verb that makes you think about relief. Massage. Massage in past tense massage. Yeah. Is that a verb? Something to do? I guess I don't know. Lastly, I need to dystopian adjectives describing words. I don't know birds, I guess. And what's another one? I'm dirty. And the verb, a verb is what you do, let's say, um, what you do, kick. Let's see what we got here. Pizza is a pie two rows. That pie is our cake. But when you're sleeping, you look around. What do you see? Baker, cook, Chef, butcher, oops, I didn't listen to instructions socially plural, very minds of the people we are trying to save. But until we do, these people are still part of that pie. And that makes them our cake very deep. You have to understand, most of these people are not ready to be massaged. And many of them are so burnt, so helplessly dirty on the pie that they will kick to protect it. Art, absolute art. And now let's play in Python. Real quick. Not sure how I missed this. But we need to put input at the bottom so the console will stay open. But it's a bit different to actually play it with Python. Go up to here up the top where your project file name is right click and then do reveal an explorer. And then wherever your fault your file is just double click it and a terminal should pop up. It should look pretty much the exact same, just with a slight Python syntax difference that we did. And so please share with me your name? My name is what am I gonna say? My name is fajita. I'm cool this time. Hello Vegito Are you ready? What is something you want to know more about? I want to know more about Um, let's see. Not pizza. Oh, no more about Skittles. Skittles huh? Okay, well first tell me what's your I know about skills? What now? Once you category Skittles, as I'd say it's candy. Give me an imposing noun to candy. Ooh, veggies. Now give me any relaxing noun in the present tense, relaxing noun. Person place or thing? That's actually probably incorrect, but I understand what it's asking. Relaxing now. I don't know. Relaxing itself. Okay, so now I need for professionals relating to candy. Let's see. Baker. Down Mama. Clerk. I don't know. Supposed to be plural. I keep forgetting associate plural clerks. Baker. I don't what do you call it candy make candy makers candy. Make Here's chocolate chocalate factory owners. Let's see, give me a hero relating verb in the present tense. What do heroes do they save. They fight crime. The verb Fight, fight crime. fight crime. I don't know. Now, give me a verb that makes you think about relief. coding. That's what you do in past tense coded. Lastly, I need to dystopian. Let's do dystopian, let's do, empty, I guess. And let's do dark and a verb, a verb. Slide. Let's see what we got here. Skittles is a candy fajita? That candy is our veggies. But when you're relaxing, you look around when you see bakers, clerks, candy makers, chocolate factory owners, the very minds of people, we are trying to fight crime. But until we do, these people are still a part of that candy. And that makes them more veggies very deep. That is so deep. You have to understand, most of these people are not ready to be coded. And many of them are so empty. So hopelessly dark on the candy that they will slide to protect it. Wow. Wow. So that's poetry. And there you have it, guys, congratulations on creating your first ever program. You did it. Congrats, everyone. Believe it or not, you just written an actual usable program, you can go right now and play this with your friends and loved ones and impress them with your new skills. But if you're still lost, you should feel really lucky. Because this video is part of a programming course that I put together to teach you everything that you need to know to start programming. And I promise by the end of it, this application will be very easy for you to understand even without my help. I envy all the knowledge that you get to learn. So maybe there's some things that you understood and others that confused you. Well, I designed this course that you only have to take the lessons that you want to take no prior lessons required to make your own curriculum. So what are you waiting for? Now, if you want to be a good programmer, it's very important that you get a solid understanding on data types. So let's talk a bit about them and get you familiar with the basics of them. On the most fundamental level, let's say you have some data that is stored in a variable. Well, this data has some sort of type that's associated with it. There are a good number of different data types, and they all have different instructions and rules. And this is sort of computer knows what it can and can't do with the variable. Now there are six main data types that are shared across most languages. bool, which stands for Boolean named after the 19th century mathematician George Boole whose work popularized it char, which stands for character string, which stands for string of characters int, which stands for integer float, which stands for floating point value, and array, which isn't actually a type of data. It's a data structure. But by definition, it's an ordered series or an arrangement of similar types of data. And no, there are more data types that exists out there. But if you want to learn more about these in particular, I've a lesson on each and every one of them, check the link in the description, because this lesson, we're only briefly go over them. Now, again, every single one of these have their own unique set of rules and instructions. For instance, let's take a look at the integer data type, which are a type of data for whole numbers. Let's say that you have an integer that equals 11. And you want to minus one from it, well, you'd write off this operation, send it to the computer to perform. And guess what your computer will take a look at this operation, then we'll look to see if it has the instructions for doing that operation, then we'll go Yeah, I know how to subtract an integer from an integer, the computer will then subtract one from 11 and then send back to you a 10. all well and good. everything checks out. But now let's take a look at a string data type, which again, is a string of characters. If you were to have the string 11, and you want to subtract the integer one from the string 11. Well, you send this operation to your computer, your computer would take a look at its operation, then check to see if it has instructions on how to do that or not, then it would realize what you sent it makes absolutely no sense. It has no instructions on how to subtract integers from strings. This is no different from telling your computer to subtract one from the word hello. How do you do So your computer will just send back to an error letting me know that the operation you're trying to do makes no sense. What specifically in this case is a type error. Now, let's do the same operation, but instead make both of them strings. What do you think will happen? Well, we get attending in but as a string, maybe we'll get another error. Well, if you again have the string 11, and you send the operation to your computer to subtract the string one from the string 11, your computer will look its operation, then again, realize it has no instructions on how to do this, thus, returning back to you in air. But you may find this next part quite interesting. If you instead tell your computer to take the string 11 and plus the string one to it, it will look at this operation, then check to see if it has any instructions on how to do this or not. And then say, Yeah, actually, I can do that for you, then it'll send back to you a string of 111 simply because since the string one and the string 11 are both strings, all it has to do is add an extra one to the 11th string, just for example. And there you have it for data types. That is why understanding data types is really important, you will have a very hard time trying to write programs without knowing the difference between a number as an int, float, or string. Check out the lessons LinkedIn description to learn more about each data type individually. But in conclusion, just remember that data types are different types of data with different rules and instructions. And depending on the data type of your variable, there are certain operations that you can and can't do with it, which will become very important to grasp and understand as you start using them. So let's talk about bulls bull is short for Boolean. If you hear bull or Boolean, they mean the same exact thing. And it was introduced by George Boole in his book The mathematical analysis of logic in 1847. But what is a Boolean in terms of programming? Well, a Boolean is a data type that can only be assigned one of two different values, either a true value or false value. And that's it, it honestly doesn't get any more complex than that. And what might take you by surprise is that bullions are the most fundamental building block for programming, most of your code will simply just check if something is true or not. And complexity is added by combining a bunch of volumes. But we'll get into that in just a bit. But for now, let's get into the nitty gritty on how you go about using volumes. And we're going to do this by using two different languages. Because I think it can be really helpful for you to learn how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is language C sharp using the it Visual Studio, which should interest you if you want to do windows development, or if you want to make games using a popular game engine called a unity. And on the right is the language Python three using the ID Visual Studio code, which should interest you if you want to get into general programming or data science. Alright, so here I have two brand new console projects. And if you don't how to make a new console project in either C sharp or Python or both, be sure to check out the video in the description. It's called How to install an ad. And at the end of that video, I'll show you how to do that. Alright, so the first thing I want to get into today is just some basic Boolean syntax. So first thing I'm gonna do is just delete these two lines don't need them, they come standard with every new C sharp project. And then I'm going to cast a boolean data type, bowl, and then I'm gonna create a variable called pizza time them assign it to be true. Now, the first thing that you know about Boolean is that they only have two states, they can either be true, or they can be false. That is about the only flexibility that a bullying has when it comes to assigning it. But over in Python bullions have just a little bit more flexibility. So I'm going to create a new variable, and we'll call it pizza time, of course, I'm gonna assign a true value to it. And now it knows that this is a Boolean, but I can also assign a false value to it. Or I can also say, assign a one value to it, that equals true. And lastly, I can assign a zero value to it, and that equals false. And just to prove it to you, I'm going to show you all the different cases. So we'll do true here. And then to check it, we need an if statement. So I'm gonna say if pizza time, then we need to print pizza, or a string pizza. Like that, I'm gonna hit the play button and you'll see that it prints out pizza. Next, I'm going to change the false value, and it should print out nothing. If we hit the play button. You see nothing was printed just as we expected. And now I'm going to change this to be a one value and hit the play button. You'll see that again we get pizza pretty nice. And lastly, I'm just going to say pizza time equals zero save it hit the play button and you see that we get nothing printed. So what's going on here because Clearly the pizza time variable is an integer. And we're saying if zero, then print pizza time. That doesn't make any sense, right. And that's one of the benefits to Python being an interpreted language, it allows you to pass in integers in a conditional statement. And if it's zero, then it's going to convert that into a false value. But if it's one, it's going to convert that into a true value. In fact, any numeric value that is not zero, and it's being used as a conditional statement will return a true value. So Pete's time equals nine, save hit play, you'll see that it prints out pizza, pizza time equals negative three, hit save, hit play, still prints out pizza is in this isn't only limited to integers, you can also use floats. So if we say pizza time equals point 0000001, hit save, you'll see here pizza time is now a float, we hit play, and still it will print out pizza. And this is unique to Python, we can't even think to do that in C sharp, if we weren't even tried, we get all sorts of errors. So that's just one extra flexibility you have with using the language, Python, font and crease. So now I want to get into the many, many, many operators that bullions have, which is just a testament to how powerful these things are. But let's start with the equality operator. Now, let's say that you want to create some like user login system, right. So I'm just going to create a couple of strings here. I'm going to say string, password type some su p T stands for password typed, I'm going to say equals ABC 123. And then let's do another string of semi colon Of course, and then do another string. And this is going to be P A for password actual. And we're going to say equals, again, ABC 123. Okay, so let's say that this is the user's actual password PA, ABC 123. And what they typed is ABC 123. So how can we check to see if they match? Well, we'd have to use something that's called the equality equal operator. And the equality equal operator looks like this. pt, equals PA. And that's all it's to it. Now, I know what you're thinking, this looks really confusing. And I've been programming for about 13 years now. And I agree with you. So one thing that I usually like to do with my bullions is first and foremost, I like to put parentheses around whatever is like the Boolean then I'm checking for, it just makes it a lot easier to read when I'm scanning lines of code. But to explain to you what's going on here, again, equals equals that's two equals back to back is what we call inequality equals Operator, do not get confused with one equal one equal is simply just the assignment operator, it means that you want to assign something to a variable to equals, again, is checking if two things equal each other. So if we were to read this full line, we're simply just initializing a boolean variable called pizza time. And we're assigning the value true or false to it with this Boolean operation here. And what this Boolean operation simply does is it just checks if p t is equal to PA. If it is then pizza time will equal true. But if it's not, it's going to return a false and piece of time will equal false. I mean, pretty simple, right? We just asked if two things equal each other. If it is, then give us a true if it doesn't give us a false. And as simple as this is, if you've ever logged in to anything before, this is pretty much all they're doing with maybe a couple extra checks on top of that. All right, I think I beat that horse well enough. But I keep on hammering this in because it's really important that you understand this step. If you understand what's going on here, then I think a lot of programming is going to be really easy for you to understand, because this is like one of the staples to programming. Moving on. Just to prove to you that this works, as I am saying that it does, we're gonna come down here and do a console dot write line, just print this to the console, pizza time. And then we also need a console dot read key. This just makes sure that the console doesn't immediately close when we run it, hit the start button up here. And then I'm going to bring the console on screen. And as you can see, it returns a true value. But if we make one of these slightly off, if I turn this to be one to four instead, and we hit the start button, you can see that whatever returns to us is a false value. So it is not pizza time because they do not match they are not equal. And now over in Python, I'm just gonna quickly recreate the same scenario. It's time equals, well, we need some for that we need p t equals A b, c 123 p p A equals equals a string, ABC 123. And then pizza time equals P t equals P oops, p a, like that go on to add the prince, let's do print pizza time here. And then I'm gonna hit the play button and return to True Value perfect. And of course, I can make one of these slightly off, and then hit the play button and returns a false value. Now, I really hope that all that made sense, because if it did everything from this point on, it's gonna be really easy to understand. But next, let's move on to our next operator, which is the equality not equal operator. And how the equality not equal operator works is, let's say that you want to check for like, some bad word, right? So we're gonna change pa to be bad word, right. And so instead of checking if they are the same, you're going to check if they are not the same, and not is going to be indicated by a exclamation point. Now, what this is saying is, if they do not equal each other, then I want you to return a true value. However, if they do equal each other, then I want you to return a false value, it pretty much just flips the Boolean operation, which again, is what we want in this scenario, because we're trying to filter out bad word, if what you typed is bad word, then it's not pizza time. And just to prove to you that this will return to true because they do not equal each other, I'm just gonna hit the play button up here, and then bring the console on screen, you can see that it returns a true value. So that's pretty much everything that you need to know about the equality operators. Next, let's get into the relation operator, starting with the greater than operator. So imagine that you have some login system, and you want to limit the amount of times that a user can log in, Well, one thing you can do is use one of the relational operators, let's just start with a greater than. So first thing, let's just ignore these two variables for now and create new ones, we're gonna make an integer, I'm gonna call it a log attempts, equals, let's just say it's three. And then let's make another integer and call it log max equals five, for instance, right, so what we can do is come down to our pizza time Boolean, and we can replace this with log Max is greater than log attempts. And what this is doing is it's essentially checking if log Max is greater than log attempt. And seeing as log Max is five in log 10 plus three, this is going to return a true value for our pizza time Boolean variable. And just to prove to you that this is correct, I'm gonna hit the start button, bring the console where you can see that we have a true value. So that's the greater than operator, we could also use the less than operator, which is going to check if logged Max is less than log attempts return a true value if that is true or false value if that is false. But there's also a greater than equals to operator, which just checks both if it's either greater than or equal to the log attempts. And finally, of course, there is the less than and equal to operator that will check if log Max is less than or equal to log attempt. And over in Python, these operators don't change at all, I'm just going to get up to speed I'm gonna do log attempt equals three and log max equals five and then come down to our pizza time go in and do log Max is greater than log attempt. And then I'm going to run that just to prove this works the same. And voila. And the last operators I want to go over are the end and or operators. So here is where you really can be able to see the power of bullions being demonstrated. Alright, so let's bring back our old scenario. So we're going to change this back to ABC 1234, past actual, and then our past typed is also ABC 123. And let's replace this Boolean operation with P t equals equals that is our equality equal operator equals P a. So what if you want to check if the password is a match, and they're under a certain number of login attempts? Well, we can use our and operator and in C sharp It's done like this, you just type the an ampersand, and then another and an percent. And that is the end operator. And then after that you can do, you can write out another Boolean operation. So we're gonna write log attempt is less than log max. And so what this full Boolean is asking, it's just pretty much asking, do our password typed in a password actual do they match, and the two ampersands. And are we under is the our log attempts less than our log max. If true, if both of these are true, then return a true value for a pizza time. But if either of them are false, doesn't matter which one, then return a false value for our pizza time. And just to prove to you that that is how this operation is done, I'm going to press the start button top and bring the console and open, you can see that we have a true value here. And all it takes, all it takes is for one of these to be false. And I'm just going to change this to be passed, or ABC 124. And then we hit save, and then I'm going to hit the start button and bring the constant window over here. And you can see that we have a false, even though one is true, we're asking for n. And that means they both have to be true in order for pizza time to be true. And just a quick side note, I generally like to use a lot of parentheses as many as possible. When it comes to Boolean operations like this, I like the segment because it just makes it a lot easier for me to read, when I'm just going through lines of code, parentheses like me know, okay, this Boolean operation here, I see that and I know there's another one, it just makes it a lot easier for me, even sometimes I'll do like an overall parentheses over the entire Boolean operation. It just helps me read it a lot easier. I don't know if helps you or not. But that's a tip that you could use. And over in Python, the syntax is just a little different. So I'm just going to get up to speed going to change this back to pass 123 or just not pass is it as ABC 123. Sorry, ABC 123. And then we'll change this to be P t equals equals p a, or did you not tell since for me, and the way that we do in an in Python is you literally just typed out the word and, and log attempt is less than log Max, boy, that has became a really small window, maybe I should send out just a bit. Cool. So now I'm just gonna prove this by hitting the play button. And you can see we got a true value. But yet again, all it takes is one of these Boolean operations to be false. And they the entire thing becomes false. And I'm proving that we'll change this to four, hit the play button, and we got a false value returned to us. But what if you want him to be a merciful social media developer, right, where you don't care if they get one or the other wrong, as long as you get one of them wrong. First of all, don't ever do this. But if you want it to do this, you would simply just change the AND operator into an OR operator, and then C sharp This is done by replacing the two ampersands. With two vertical lines. I'm not sure what these characters are called. But you replace it with two vertical lines, it's on the same key that the backslash key is on just looked it up, I guess it's called the vertical bar character never knew that been anyhow, this will now check if either one were true, which we know that one of them is false, because p t does not equal PA. But the second one is true because log attempts is less than the log max. And to prove that this will return true because one of them is true, I'm going to hit the start button and then bring the window over you can see that we have a true value returned. And over in Python, the OR operator is just a bit different, just as you write out and for the an operator in Python, you have to write out or for the OR operator in Python. And now over in Python, the OR operator is just a bit different, just like how you had to write out an for the an operator, you have to write out or for the OR operator in Python. And of course, just to prove that this works, I'm gonna hit the play button up here. And you'll see we get a true value returned. So I hope you can see what makes Boolean so powerful in the world of programming. Just from this simple example alone, we already have a Boolean that checks for the log attempts next to you know, the actual password typed. And then we can take this Boolean and embed that into another Boolean and just keep on adding complexity and complexity. Billions are incredibly powerful and and they're really important to understand. And yeah, there you have it, guys. That is pretty much everything that you need. To get started programming in regards to billions. So strings strings are one of the most important ingredients to almost every program you'll ever make. Why? Well, the odds are likely that at some point in deployment or even during development, some human will have to interface with your application. And with that, your program needs to communicate with them somehow. And it's highly likely that using strings will be how you go about doing that strings on the most basic level are a string of characters together in a series, hence the name string, you can write any word in any language, you can write any number, or even any code slang key, you name it, making strings, incredibly powerful. And that's pretty much all that's the strings, they're really easy to get your head around. And there are a few things that are really good to know while using them. So let's take a look at a few examples. Now we're gonna do these examples using two different languages, because I think it can be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is the language C sharp using the it Visual Studio, which should interest you if you're gonna do windows development, or if you want to make games using a popular game engine called unity. And on the right is the language Python three using the ID Visual Studio code, which should interest you if you want to get into more general programming or data science. Alright, so here I have two brand new console projects. And if you don't how to make a new console project and either C sharp or Python, or both, be sure to check out the video in the description. It's called How to install an ad. And at the end of that video, I'll show you how to do that. Alright, so the first thing I want to get into is some basic string syntax. So first, I'm going to delete these lines, they come stock with your brand new C sharp project. And then I'm going to initialize a string, we'll call it a just for example. And then if you want to assign a value to a string, you have to use double quotes. And then you can type in whatever string you want, and then semi colon at the end. And as far as C sharp string syntax is concerned, that's all you will need to worry about just the double quotes, make sure they are double quotes. Now over in Python, we have just a little bit more freedom. So I'm going to initialize a string here. And then I'm going to assign hello to it. And as you can see, I use a double quotes just like we did in C sharp, but you can also initialize a string and assign Hello, with the single quotes as well, both of these will be counted as a string within Python. And just to prove that I'm going to do print a and then B. Here we go. And there you have it, hello, and Hello, both are counted as strings. In fact, today, you're going to find that this freedom right here, the double quotes in single quotes can be assigned to a string is quite nice, Yossi. And so the next thing I want to talk about is the fact that strings are arrays of characters. And to demonstrate that in C sharp over here on the left, we're simply going to do a console dot write line. And then I'm going to do a and I'm going to use the brackets and just put a zero in between them. This, this is an element within the A array. Again, strings are an array of characters. So I'm just asking for the zeroeth element from the A string array, which this is zero, this is one, this is 234. Arrays always start on zero in pretty much every programming language. And so now just to prove that, I'm going to hit the start button up here to run it in Africa, I always forget to do console dot read key, this just makes sure that the terminal stays open until we press a key and hit start. And then bring this over here and you see that we have the zeroeth element in the A array that is again a string of characters, which is H. And it's quite flexible, we can put any that we want in here as the exercise. So if we want to get zero, we can still be count this is zero, and then he is 1234. So if we put four in here, then when we hit the start button, you'll see that it prints out in Oh, in fact, this technique is what a lot of game developers use when they're trying to create some chat system that pops up one character at a time, they will pretty much write out the entire dialogue here like Hello, welcome. Welcome to my store. And then they will write some function that will take in a string and then we'll grab every single character and then we'll print one out with a pause near like a second pause probably a lot less than that, like a 10th of a second pause, then print the next 1/10 the seven second pause, print the next one, so on and so forth. Just A little add on there, and over in Python, I'm gonna get rid of the B, we're just going to keep the double quotes convention to match with C sharp, given the B here, and then I'm actually just going to do a print. Let's do zero first, hit the play button, you'll see we get an H. And again, we're going to do a four. So we can get the O hit the play button, and Oh, I forgot to save it, and then hit the play button. And then we have Oh, right there, pretty much the same in both languages. Again, just remember that all strings are just a array of characters. Next thing I want to talk about is using the addition operator with strings. And to demonstrate that over here in the left, when C sharp is going to remove this Bechtel, we had it, remove this from the right, and I'm just going to come down here and do a plus equals oops, plus equals, that's the addition operator, these two right here, when you see plus equals, that is an addition operator, plus equals and then just add a character exclamation mark to it. And then I'm going to print that, and you'll just see that it's gonna be Hello, and then I'm just gonna add a little exclamation at the end. Start that up, bring it over here, and voila. Now one cool thing about this process is because at the fact that the string a is just an array of characters, using the addition operator pretty much just says, Take that string of characters and add this character to the end of it. However, the cool thing is, you aren't limited to only adding characters. Again, the single quotes denotes a character double quotes, and that denotes a string. So we could add to the end of this world, for example. Now, of course, we have to change these single quotes or double quotes to let C sharp know that this is now a string. And what this is going to do is, it's now going to add every single character in this, this character array, or this string is going to add every single character to this string. And just to prove that, I'm gonna hit start, and then we'll bring this over and voila, hello, world. Alright, now over in Python, I'm just going to restore this back to its original state, then do a plus equals exclamation mark. Now, of course, this is just going to take the Hello string, the A string, add an exclamation point to it, and is going to print that out with the play button to confirm come down. And that exactly what we got. Now, I want to again reiterate that Python doesn't care if you use double quotes or single quotes for characters or strings. So unlike C sharp, we could just put world right in between of two single quotes, and it will we hit play, it will print out for us without giving us any errors or any problems whatsoever. That's just one of the benefits to using an interpreted language. If you want to use single quotes or double quotes, that's pretty much up to you your own discretion. But just to keep everything consistent, we're going to use double quotes for strings as well, for this lesson, not before we move on, you might be wondering, oh, well, if we can do addition operator, what if we use like a multiplication operator or subtraction operator, a division operator? Well, unfortunately, the addition operator is the only arithmetic operators that you can use on strings. So don't get too happy. Now, escape characters are actual characters, so I'm not gonna go too deep into them for this lesson. But they're pretty important to string sing as strings are an array of characters. But let's just look at a few of them real quick. So I'm just going to add a few of them here. I'm going to do backslash in. And then I'm gonna do backslash T, I'm gonna do backslash, single quote, backslash double quote, and then backslash, backslash. Now these are, what is that five are the most popular escape characters. The first one, this is new line, this is a tab. This is single quote, this is double quote, and this is backslash. And I'm going to just print out this to show you that what they do, hit the start button, and then bring this over. And so you have a new line, which is the backslash, N, and then a tab, which is backslash, T. And then you have the single quote, which is backslash single, quote, double quote, which is backslash, double quote, then you have backslash, which is backslash, backslash. And these bad boys are handy because they help you do some things that are probably not intuitive when you first start coding, for example, like how do you press Enter when you have just strings or how do you use double quotes of strings required double quotes to initialize right so for example, I'm just gonna get rid of all these. Just give you a quick example. I'm going to use the escape character, double quote at the end and it looks good. Kill character double quote at the beginning. And this is going to look like hello in quotes, I'm gonna hit the star button, and then bring this over. And there you go, you've escaped from the syntax of strings by using the escape character. Again, I went over this pretty briefly in this lesson. But if you want to know more about that, check out the lesson I did on characters, and I go a bit more in depth about them. So I'm just going to restore this back to how it was before I move on to Python. Now over in Python, the syntax for the escape characters are the exact same, I'm just gonna get rid of this line. And then just add them just as we have in C sharp, backslash t backslash, single, quote, backslash double quote, and then backslash backslash. Make sure to add that double quote back. And yeah, there you have it. One cool thing about this is actually a Visual Studio Code addition is that it will change the color of the escape characters in your string. So that's pretty handy. I'm just going to print that out, we should get similar results. And there you have it. Alright, so the next thing I want to get into is interpolated strings. Now, there is no reason for a man to have so much love for a syntax, but I absolutely love interpolated strings. And here, you'll love it too. here's, here's what's going on. Okay, so say we wanted to deliver some message, right? I'm gonna get rid of all this and do like Hello, name. How are you? Right. Now, let's say you didn't want to have actual name here. You want to have like some user input name, right? So let's create a new string for that name. initialize string make it name equals job Brill's. Right. So how you would do this normally is you would segment this string, you would do this and you would delete this here and you would do plus, plus name, and then plus the string again, right, so you have three different strings, but you have to break it apart to put the the string variable here, and then you stitch it back together by plussing the last half of the string. I mean, listen, it works, it'll get the job done. But when you have to write a lot of strings like this, over time, it just gets really tiring and easy to get frustrated. But that is where interpolated strings come into play. First, just to prove to you that this works, I'm just going to hit the start button. And then we're going to bring the screen over here and bada boom, it works fine. But with interpolated strings, now we no longer have to segment the strings anymore, we can bring this back together as one string, and then simply come to the beginning of our string and add the dollar sign. This dollar sign denotes that the string is now interpolated. And what that allows you to do is in the middle of strings, you can add brackets, and inside of those brackets, you can add variables. And so now when I print this out, check this out. This is so exciting. Now you have the same exact thing, it's just that you didn't have to break up your string, I love interpolated strings. So you can imagine if you have like a really long text or something like that, and you have a lot of variables that you need to inject into that text, you can simply just turn a string into an interpolated string, and just you know, add the brackets and your variables all over the place. And it saves so much time. And it's just beautiful. I love it. No run Python, it's pretty much the same thing. I'm just going to set this up and say hello name. How are you? And the only difference in Python though, is instead of $1 sign, you're going to use an F for interpolated strings. And so now we have the creator initializer name variable. This is going to be jabril Rose. And so now we can do the same thing use the brackets and bada boom, hit play just to prove it to you, and hello to Brill's How are you so beautiful, I love it. And so the final thing I want to go over is just a few handy functions that come with the string data type. And to demonstrate these handy functions, I'm going to get rid of this line, it's no longer needed. And the first one I'm going to show you is a lower casing function. So we can just do name equals name dots to lower end C sharp to lowers the method and use call that add the semicolon. Then we come down here and then just print out the name. And what's going to happen is it's going to take the name and then it's going to do it's going to lowercase every single character within the name. It starts to prove that bring the window over here and you'll see that it has turned this into all lowercase letters. This can be quite handy when Perhaps you're creating like a database of users or something like that and you don't want duplicates, then no matter what name they pass in to your database, you'll lowercase it every single time and then just do a match against those. That's one of the most common use cases for that function. But it's always good to know just in case you need it. Next, I want to show you the reverse of that, which is an upper casing function. And instead of starting over completely, I'm just going to add on to our console logging. So under the first write line, I'm just going to do reset name back to equal to Brill's. And then we're gonna do name equals name.to to upper is the function in C sharp. And then I'm just going to copy this Ctrl C Ctrl V. And now it's going to first print to the console it and all lower, and then all upper and approve that I'll hit the start button, and bring it over. And voila. Next up a really, really, really useful function that comes with the string data type is the split function. So I'm going to reset name, I'm gonna say name equals I'm do a little bit different this time, though. jabril is what the comma in the middle because we're going to use that as our character that we're going to use to split the string apart. So with this, we because we're splitting the string into two, we need to have an array instead. So I'm gonna say, string, and then add the brackets, let a note, let the C sharp know that it's an array, and we'll call it name to equals, and then this we're going to name dot split, and then we'll pass in the character, we want to use the split as gonna be the comma. And then we can simply just come down here and do console dot write line, and name to. And then we want to do the first element of that array, which is zero. And that is the copy and paste. And then we're going to print the second array element from that array, which is one, and approve that it is going to split this I'm going to hit start here. And then I'm going to bring the window over and you see that it's split the name based on the comma, jab, reals, beautiful. And the final handy function I want to show you is the contains function. So I'm just going to do name equals, I like the spaceship. I don't know, I like the spaceship. And then we need a Boolean because contained returns a Boolean. So Boolean, we'll just say does, and that equals name, dot contains, and then we need to pass in a string here. And then we're gonna say the does this contain the word the in it and then simply we just do console dot write line does. And then just to prove that this does return a true value, if it returns, if it has the word the, in the string, I'm going to hit start, and then bring the wind over. And you see the last right here it was returned a true and yeah, contains is just another really powerful function that comes with the string data type. Really good use cases for that, and always good to know. And over in Python, it's just a little different than how they do it in C sharp. So we ever named here we're gonna do name equals whoops, equals name, dots. Lower. Huh. And we're gonna do print name here. We're gonna print that out, press the play button, show you that it lowercase is the name, just as we expect. And then the next one, I'm going to do name again equals to Brill's, and name equals name dot upper function, and then print name again. I'm going to print that out. And you'll see that we have all lowercase and then all uppercase. And now this next string function is going to really demonstrate how Python has a bit of an edge over C sharp in this regard. So we're going to do name equals the same jab and then rails. And then here, all we have to do is name equals name, dot split, we're just reassigned name and it will instantly turn this into an array. That easy, reassign it and then all we have to do then is just to print name and to prove them and hit the play button. And there you have it jab rails. Yeah, personally, this is one of my favorite reasons for using Python is because of the ease of doing stuff. Like this versus over in C sharp how we had to have our string name, we had to initialize a new string array to hold the new string array we're about to make and then printing them out one at a time. This is just like three lines of code. easy, simple. One of the advantages that I love using Python, and the final one is the contains function. So it doesn't do name equals I like the space ship. And then come on down here, and then do does initialize a Boolean called does. And then we're going to do name dots. Contains, I'll explain why this looks weird in the second, and then the, and then we can print does, alright, and just to prove that works can press play, and it does not work. And that is because of course, I forgot to save it. So hit save, and then hit play, come on down, and there you have it true value, I really just want to pause for a second here and emphasize that Python really doesn't care if you use double quotes or single quotes. As you see, we're using double quotes here for the name and single quotes for the string that it contains. And it still returns true, it just interprets. Now, the reason why this part looks so ugly, is because this is what's called a wrapper method, or a method wrapper rather, and it's not important for you understand what that term is yet, in your early days of programming, but essentially what this is, the Python doesn't want you to use this way. How they prefer you to use it is if you were to go if and then the in name. So if the string the is a name, then we'll do print does. Python really prides itself on you know, being a language is kind of close to how we actually, you know, use language as humans. So this is how I prefer for you to use this, this, this, this method rather. And just to prove that we're gonna hit play, we'll make sure it's saved and hit play, and we should see two trues, which we do and that doesn't guys, that's pretty much everything that you need to get started with programming in terms of strings. char data types are pretty easy to grasp. char is short for character. And if you know how to read and write in any language, then you know what a character is. first letter, your name, character letter, you gotten math class character, that hashtag symbol that you overuse on social media care, reg dir, any letter from any language, any single digit number, any sign or symbol, even some glyphs like the yin and yang sign or a single character. But that's a bit beyond the scope for this course, just keep this in the back of your mind for when you want to learn more about them. But for now, just know that characters are very important in the world of programming this year, a lot of overlap with a string data type, because a string of characters is what makes up a string. In fact, way back in the early days of programming language, language, C strings didn't even exist as a data type, you instead had to create an array of characters, but strings like desktop downloads c colon backslash program files that all your applications are installed in are all a series of characters that computers use on a daily basis to make your computer experience as smooth as possible. Characters play an essential role for computers being able to communicate and relay information to us. And that's pretty much all there is to it. Now from here, there's not really much to go over. But let's have a quick look at how we go about using characters in two different languages. Because I think it can be really helpful to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left, it's a language C sharp using it Visual Studio, which should interest you if you want to do windows development or want to make games using a popular engine called unity. And on the right is language Python three using the ID Visual Studio code, which should interest you if you want to get into more general programming or data science. Alright, so here I have two brand new console projects. And if you don't know how to make a new console project, neither C sharp or Python or both, be sure to check out the video in the description. It's called How to install an ad. And at the end of that video, I'll show you how to do that. So first things first, let's look at some basic char syntax. So over here on the left, and C sharp is going to remove that that come standard with your blank console project. And then I'm going to write char which is casting our data type. And then we're call our variable a, and I'm going to assign a z character to it. Now, this is how you write a character a character in C sharp must always be in the middle of two single quotes. And it's really as simple as that we can put any character we want in here we can put a we can put j we can put eight, we can put the dollar assign any character you want can go in between these two single quotes, and there you have a char. Now over in Python assigning chars is just a little bit different. So we can do just as we do in C sharp, we can do a equal single quote z. However, we can also do a equals double quote, and z. And Python will set either one, and it will figure out that these are both a char. But you'll see if we go back into C sharp, and then change these from a single quote, to a double quote z, you'll see that we'll get a type error. The in C sharp, it specifically uses double quotes for strings, and single quotes for chars. But again, in Python, it's pretty smart, we're figuring out you know, if it's a char, or a string, one of the benefits to an interpreted language. And just to prove to you that this is the case, I'm going to actually change this to variable b. And then we're going to do Print A, and then we're gonna do print B. And we're going to hit the play button up here in the corner, and you'll see down here in the output, it prints both of them. Zizi, no problem. I'm gonna change this back to single quotes real quick. Right? Okay, so now with the basic char syntax out of the way, let's talk about escape characters. Now, what are escape characters, there will undoubtedly come a time where maybe you're writing out some story or creating like a list of names or something like that. And you will undoubtedly come across the question, How do I press Enter? Or hit tab or insert quotes? How do I do these things? Well, that is where escape characters come into play. Alright, so now let's initialize an escape character, I'm just going to cast a new variable as a char. And then inside my character, I'm going to hit backslash. Now technically backslash is the escape character like to escape the syntax of characters. But I like to call the whole character as an escape character. It's in, it's up for debate. But I'm going to hit backslash in which is one of the most common escape characters called new line. Now, I really want you to understand how important escape characters are. If I were to, for example, replace the backslash with forward slash, for example, you see, they will get an error down here for too many characters and character literal. Everything within the single quotes is what's called the character literal. And you can only put one character per character literal, these count is two. But when you put the backslash, that counts as one character literal, which, again, this is a new line escape character. And just to prove to you that it actually does what I claimed that it does, we're going to do console dot write line, this is just going to print up the terminal for us, I'm gonna do a print A, which is a variable that has z in there, and then we're gonna do another woman to A, B, and then I'm just copy and paste Ctrl C Ctrl, V, and then we're gonna do another a, so what we should see is in a print out z, and then new line, and then another z, I'm just going to run that. And it's off screen. Oops, I forgot I have to also do console dot read key, otherwise, the console will not stay open. So hit start, it's off screen here, I'm going to bring it on the screen. And you'll see that we have exactly what we should expect. Now, I know there's some y'all out there probably going Wait a second jabril. That is not what I expect. There are two spaces in between the Z's. And let's just pause here for a second and really examine the logic of our program. So the reason that we're getting two lines in between a B and A when you probably expect no no lines in between them, is because the function right line itself, it does a new line for us. So it prints out z equals z will print out z, and they'll go to a new line, and then I'll print out a new line and then go to a new line and then print out z, then go to new line. And I'm going to just run that one more time. Just confirm that's what happens prints out a goes to new line prints out new line goes the new line, then prints out z and goes to new line word ends there. So it's doing exactly as as you as we want it to do. It just looks a little weird in this context, because the right line function adds a new line without really telling us it Yeah. Alright, so now with that out of the way, let's check out our escape characters in Python over here on the left, I was going to change our B variable to be single quotes. I'm just gonna use single quotes because it's easier convention between the two, and we're going to do a new line. And I have that backwards supposed to do backslash. And you can see in Visual Studio code, it'll actually slightly tint the escape characters yellow for you to help you give a little more assistance, which is nice. Visual Studio regular doesn't want to do that, anyhow, new line, and then we're going to print out a and then we're going to print out B, and then I'm going to copy and paste one more a. And then let's run this by hitting the play button. And you'll see that we have the same exact result that we have in C sharp and you already know why there are two lines there. Moving right along, let's take a look at concatenating characters concatenating, it just simply means taking a few different things and putting them together. So if you have three different characters, for example, you can concatenate them, and they become one word or one phrase, what have you. That's all to concatenate means so to concatenate characters, you would think it would be as easy as you know, a new character c equals a plus a. But it's not that simple. In C sharp, when you add two characters together, the character data type takes the addition operator in turns the characters into intz. In fact, every single character under the hood actually has an integer value assigned to it. And we take a look at this chart here, which is this is the ASCII chart part of Unicode, you can see that every single character has some sort of decimal value assigned to it. So we could take the character two, for example, and do two plus two. And that will get us 100, which is a lowercase D character. But just know There aren't too many use cases, for operations like that, just know that this is how it works under the hood, it's interesting stuff to know. But let's move on. So what you want to do is you actually want to turn your characters into a stream, just like that, and then you'll get an error. Because again, when you use the addition operator on characters, they get turned ence and you're trying to assign an integer to a string. So way to override that is simply just right to double quotes, and then just plus to it, it's like a shortcut to quickly convert whatever the assignment is to a string. The assignment, again, is everything that's on the right side of the variable. And so now we can just add all of our characters, the string C. And so I'm just going to do a plus b plus a, which is z plus new line plus C. And then I can delete two of these right lines. And then I'm going to add c instead of a, and then I'm gonna hit play. Don't bring this over. And you can see here that it's a bit different now. Now, why is that? Well, let's take a look. Again, right line, every time you call this function, it will return to a new line, however, we use a string and only one write line. So there are no new breaks other than the one that we coated in. So it's literally does print z, go to new line, and then print another z, as you see here, print z go to new line, then print z. So that's what's going on there. Everything with programming, it's always really basic logic that you have to follow. And, yeah, now in Python, because Python is an interpreted language, it makes doing stuff like this really easy. All we have to do really is just do c equals, then we can do a plus b plus a simple as that, come down to our prints, we don't need two of them. So I'll delete two of them. And instead replace a with C, and then save that hit the play button in the corner. And you can see that we have the same exact result. It prints out an A goes to new line, I'm sorry, it prints out a z goes to new line, and then prints to another z, as you see here. Simple, easy. God bless Python. So that's pretty much all that's to concatenating characters. Let's now take a look finally, at the remainder of the most important escape characters. So your you know backslash in or the new line escape character. There's another pretty important one that you should know as well. And that is backslash, R. This is the return character. So what the return character does, it returns back to the beginning of the line. Now, back in the old days, this was really important to us, because you would go to a new line, but it wouldn't return back to the beginning. Just wherever you left off in the previous sentence, it would just go to new line at that same exact spot. So you had to call the return escape characters to make it go back to the beginning of the line. So what happens if we were to run this in the console? Let's hit start the play button. I'm going to bring it over and you'll see that we just have one character. And that z. Even though we have z return z, what's happening is that it's printing out z within, it's going back to the beginning of the line and printing z again. And just to prove this, we can change this to why. And then just just for extra proof, we can change, we can add a plus u, and hit start play button. And you'll see what happens is it prints out z, but then the return character returns to x and get in line, and then it prints out a y. And then it prints out a you essentially overriding our first character, which is z. Now in the new modern age, you're not really going to use the return character too much. However, I bring it up because it is good to know there might be some scenarios in which you might be using an older terminal or, or an older engine or something like that. And you're losing your mind that you're using the new line escape character, but it's not returning to the beginning sentence. Here, this is the return character use that it will all your problems will disappear. Furthermore, in most new modern programs in terminals, next y&z the new line is actually it actually looks like this, and also looks like new line and then return. And we can demonstrate that, interestingly enough, if we come over to Python and replace the new line shape character with a returning escape character, hit save, then play, you'll see that what we get is not what we expect, it actually is a new line, instead of a return. And the reason for this is because what we're using to interpret the code is something called code runner. And the way that code runner interprets a return escape character is likely like this, I can't verify it. But this is likely how it interprets just a regular return character, thus, while we have a new line and a return. And furthermore, if you really want to see the difference between code runner and you know, the terminal PowerShell that ships with Microsoft Windows, you can hit right click on the name of the Python script reveal in Explorer, and then just double click on this to run the Python script. Oh, wait, I'm sorry, we have to add input here. input, we'll keep the term open, double click on the Python script. And there you have it, we have exactly what we expect. That is just the difference between two different terminals interpreting interp breading sorry, code. Okay, I hope that wasn't too confusing. Again, you won't really have to worry about, you know, using characters in this manner. Oftentimes, most people don't even you interface with characters this low level, but it is good stuff to know when you're dealing with strings all the time. And yeah, let's move along. The next escape character is backslash t, which is a tab character. I'm going to turn this back into our simple, simple string. And then I'm going to hit the start button and bring the console over and you can see that is z, tab z. Simple as that Python, it's the same, just do a backslash T. And we hit the play button, you see that z, tab z? Easy. So the next escape characters we're gonna look at are the, quote, escape characters. So at some point, you might want to add the character single quote, or something like that. And you go to do that you're like, Okay, cool, single quote. Wait a second, that how do I do that? Well, of course, simply put, just add the escape character, backslash, and then single quote. So this right here, these two pieces, the backslash, and the single quote is the single quote, escape character. And of course, you can do the same thing with that four string. So let's say you want to write out some code or something, you can do backslash, and then a double quote. And that is the double, quote, escape character. So now if we just run this program, hit the start button, you can see that we get some really weird string with the double quotes. The single quote z is just a demonstration to show you how you can use quotes if you really need to. And now in Python, it's actually a little bit different. So we can still do the same. Use the backslash, whoa, I'm going to replace that backslash and then single quote, to get our escape character single quote, for example, you can hit play. Oh, and saying sorry, running. Oh, of course, I have to stop code on right click on the output, and then do stop. Code run if you have input, just a quick caveat, because you won't be able to hit that play button anymore. But I'm gonna hit play. And you'll see that we have our sin called escape character, I replace with double quote, same deal, right, hit the play, you see that? Oh, wait, I have to save it, sorry. And then hit play. And you'll see they have a double quote, no big deal, right? Now, how Python is a little more special a little different is that we can use either single quotes or double quotes for a character literal. So we can, you know, if we want to use a double quote, we just use single quotes on the outside. And then I'm gonna save that and hit play. And it's the same exact thing. But if only is the same, quote, I can change the outside quotes to be double quotes, like so. And just put a single quote in the middle, and then save that hit play. And you see that we have a single quote in the middle of twosies. So that's another benefit to an interpreted language. It might save you a bit of time there. But it's just yeah, it is what it is. And the last important escape character is actually the backslash itself. At this point, you already know where I'm going with this. But if you want to write a backslash escape character, you have to do backslash to escape out, and then another backslash. So two backslashes will get you one. And just to prove that, I'm gonna remove this right there, and then I'm gonna hit the start button, bring this over, and voila, z, backslash, z. And over in Python, it's the same exact thing, you just have to do backslash to escape out, and then another backslash. And I'm just gonna save it play. Come on, down. And there you go, z, backslash, z. And there you have it, guys. That's pretty much everything you need to know to get started with programming in terms of characters. Let's talk about floats, floats sent for floating point values, or floating point numbers, both are pretty much the same thing in which you could think as numbers or values that float somewhere in between integers. So if both one and two are integers, with two coming right after one, then a float makes up all the numbers in between one and two 1.1 1.2 1.3 1.4 1.5 all the way to 1.9. But make no mistake about it floats aren't limited to just one decimal place value. Pi, for instance, is a float, it's most commonly represented as 3.14. But we have no idea how many actual decimal points pi has, as it stands, researchers have calculated the two quadrillion digit for pie, and are still researching how to calculate even more digits. So in short, the floating point values in between two integers are infinite. And that is pretty much the basic two floats, they can honestly take a little work to understand them in their entirety. But for now, all you need to know is that they are values in between integers. So now let's take a look at a few examples on how to use floats with code. And we're going to do this by using two different languages because I think it can be really helpful to see how they compare and contrast. And plus, you will pretty much learn two languages at once. So on the left is the language C sharp using the ID Visual Studio, which should interest you if you want to do windows development, or if you want to make games using a popular game engine called unity. And on the right is language Python three using the Add Visual Studio code, which should interest you if you want to get into more general programming or data science. Alright, so here I have two brand new console projects. And if you don't know how to make a new console project, neither C sharp or Python, or both, be sure to check out the video in the description. It's called How to install an ID. And at the end of that video, I'll show you how to do that. Alright, so the first thing I want to get into floats is the different operators. If you're familiar at all with the operators, the integers use, then you'll be quite familiar with the operators that floats use as well. Why? Because they are the same exact operators. So jumping right into it in C sharp here on the left, I'm just going to get rid of these two lines that don't need them anymore. They come standard with every single new console project. And I'm just gonna initialize a float. So I'm gonna type out float. And then I'm gonna call it a just for an example. And I'm assign zero to it. Actually, that's no fun because zero is integer. So let's assign, let's assign 7.77. That sounds fun. Now actually, before we get into talking about operators, let's touch a bit on the syntax between Python and C sharp. There's not really much to the differences between the syntax of floats. However, in C sharp you do have to clarify that your numeric value is a float by adding an F at the end of the numeric value. This is just further instructions to tell the compiler on how they should go about handling this numeric value. Simply meaning when your code is turned into instructions for a computer to do, when it gets to this line right here, it reads the flow. And it knows without any confusion that this is a floating point value. However, there is a caveat. Even though this variable A is a float variable, you don't always have to add the float to the end of your values. For example, if you instead just say float a is an integer seven floats automatically can convert themselves from integers to floats, therefore, you don't have to add the F. Now while in C sharp, you have to add the F at the end of floating point values. In Python, you don't have to do that, all you have to do is just type out whatever value that you want to do 7.77. And Python will take care of the rest for you. And Python is able to do this because it's a type of language called an interpreted language, where all you have to do is assign a value to a variable. And it will interpret what data type that variable should have, which in a lot of cases is pretty nice, because you don't have to worry about the differences between floating point values are integers, you can just do sums and multiplication division, and not have to worry about any of that stuff. But now let's get into some operators starting with the increment operator. So an increment operator does exactly what it describes it increments and the syntax for that goes like this, a plus plus, that's it. If we were to come down here and do a console dot write line, that just will print to the console for us. And then we also need to console dot read key for C sharp so that the console doesn't close on us. And I'm gonna hit the start button and bring the console window over, you can see that it just increments it by one plus one to 7.77 gives us 8.77. And that is the increment operator. Now in my experiences, it's not like a terribly good, handy tool. But it can save you some times oftentimes, if you just want to add one to something, instead of having to do like full out. Other operators need to do you know the variable plus plus and you're done. And to do the increment operator in Python, you actually can't do an increment operator in Python, if we were to type out a plus plus, you can see that our ID shows that it's red to let us know that this is not a thing in Python, every language is different. And Python just doesn't care about the increment operator, I guess. So now imagine that you want to add more than one to your float? How would you go about doing that? Well, that is where our next operator, the addition operator comes into play the syntax for the addition operator goes like so. So you want to do a or your variable, your float plus equals and then whatever value so we can do plus equals one to do another way to do an increment operator. Or we can pass in a flow we can do, for example 3.33, F, and again, I added an F to the end of this value because it is a floating point value. And if we were to run this hit the start button, bring the window over, you can see that we got 11.1. Now just the minor note just to make sure we're covering all bases, you can see that it does not pronounce 11.1 F. And the reason for that is because the F is something that only the computer needs. Once the computer sees the code reads to F and sees that it's a floating point value, there's no point to return that back to us because we're humans, and we're smart. And we know the difference between a float. And just by looking at it moving a long to use the addition operator in Python, it's absolutely no different syntax wise, you do your variable in our case, a plus equals 3.33. And again, we don't need add f because it's Python in Python doesn't care about F's far to come down here and write print a and then save it and hit the play button you can see down here that we will get 11.1. And as far as adding is concerned, the final way that you can add value to your float is by doing something that I like to call a modified assignment. Now this isn't a technical term. I'm not sure if it has one or not. But I like to distinguish this from regular assignments. So what we're going to do is just get rid of all this just to clear up confusion. And then we can do a equals a plus 3.33 F. And there you have a modified assignment. Now Whoa, what's going on here looks a little bit confusing. Well, don't worry, let me walk you through it. First thing you need to know is that this is the assignment operator. And everything that is on the right side of an assignment operator is calculated first. So the whatever the state of A is, which in this case is 7.77 is going to be added to 3.33. And once that result is calculated, then it's going to throw that result to the left side of the assignment which is again In a sauna, since we're assigning a to equal what it currently equals, plus some extra value, we're just updating it really just a few different ways to do the same thing. But you, as a developer have the choice to go with whatever best fits your programming styles. And just to prove to you that this is the exact same result on hit the start button, bring the window over, you can see that again, we have 11.1. And over in Python to do a modified assignment is the same exact syntax. So I'm going to remove this lines to clear confusion start over and we can do a equals itself, plus 3.33. And just to prove to you it's the same exact result, I made the play button, you can see boom, another 11.1. Next up, we have a few operators for subtracting. And the first one is the decrement. operator. Well, you already know what the increment operator does. So guessing what the decrement operator does should be a no brainer. Yes, you guessed it is simply just minuses one from your float. And just like the increment operator is plus plus, well, the decrement operator is minus minus, that's all there is to it. And to prove to you that it does what I say it does, I'm going to hit the start button, bring the wind over. And you can see, we have 6.77, because 7.77 minus one is, of course 6.77. And again, from my experience is not the most helpful operator out there, it can help you save some time writing code here and there. But it is what it is. And also again in Python, just as they don't have the increment operator, well, they also don't have the decrement operator, I can type out a minus minus and you can see turns red, then it's know that this is not a thing in this language. And so if you want to subtract more than one from your float, you can use what's called the subtraction operator. And the syntax for that is probably just as you expect, minus equals and then your float value, or your integer value, whatever numeric value, and just to prove to omit the Start button and bring the window over. And as you can see, 7.77 minus 3.33 equals 4.44. And over in Python, the subtraction operator is the same exact syntax, we're going to get rid of this start over a minus equals and then your value. And just to prove that to you met the play button, and you can see that we have 4.43999999. Now some of you are probably going what's up this discrepancy, C sharp said 4.44. But Python says 4.43999 bla bla bla bla, well, I'm just going to give it to straight floating point values is something made by the devil, it's important to remember that floating points are the values in between integers. And that space in between any two integers is infinite, and anything dealing with infinity. But long story short, if you're just starting out, you don't have to concern yourself with things like this at the moment, at some point in time, perhaps he might dig into some project that requires like really precise floating point precision. And at that point, you can pull your hair out. But for now, just know the reason why you're seeing this is because in C sharp floats around to nearest digit, there are more accurate data types. But that's beyond the scope for this, this course. And for almost all your applications, two to three point floating precision is oftentimes good enough, you don't need to worry yourself with this kind of accuracy. It's part of the reason why we have calculated about I think the quadrillion digit of pi, but we often just round it off to 3.14. Because oftentimes, that's a good enough precision estimate. Moving on, the final way that we can subtract is of course, by using a modified assignment. And to do a modified assignment for subtracting all we do is get rid of this and we do a equals itself minus 3.33 F. And just to prove to you that works, just as I say it does, I'm hit the play button, bring it over, and you can see that we have 4.44. And over in Python, the syntax is no different than C sharp, we can do a equals itself minus 3.33. I'm gonna save hit the play button, and you can see that we got 4.43999. Next up the multiplication operator, whenever you want to do multiplication to your floats, you simply just have to use the multiplication operator. And the syntax for that goes like this A times equals two, for example, and when you run this, it's simply just going to take your float a and times it by two and prove that to you. I'm at the start button and bring the window over you can see that 7.77 times two equals 15 point 54 and of course what you times your float by doesn't have to be an integer, it can be a floating point. But of course it just has to be some numeric value. And over in Python, the syntax is the same exact as it is in C sharp A times equals to prove that to you hit the play button, and you see that we have 15 point 54. And of course, another way we can do multiplication is if we do a modified assignment and the syntax for that, of course, you already know it is a equals a times to prove that to you, I hit the start button and bring the wind over. And again, we have 15 point 54. And in Python, the syntax is no different. We can do a equals a times two, and then press play and show it to you that again, we have 15 point 54. Now one thing that you didn't see me do is like something like a times times, and the reason for that is unlike subtraction or addition, there is no sort of incrementing multiplication. What does that even mean, really. And so moving on, the final operator is the division operator, which the syntax for that goes as follows a divided by equals to Alice make an interesting, let's say, 2.15. And of course, what this is going to do is going to take our a float, and it's going to divide it by 2.15. and prove that to you, I'm gonna hit the start button and bring the window over a, we see that we have 3.613953, that's gonna be fun to say over and over. And over in Python, the division operator is the same exact syntax. So we can do a divided by equals 2.15. And to prove that to you, I'm gonna hit the play button. And you can see that Python is a lot worse, we have 3.613953. And it goes on and on. I know that I'm kind of demonizing the long decimal points with Python, but it's actually a good thing that they give you this precision right out the box. And the final way we can divide is by using a modified assignment, which the syntax for that looks like this, I'm just gonna start over to make it a bit less confusing. A equals A divided by 2.15, F. And just to prove that to you, I'm at the start button and bring the window over, you can see again, we have 3.613953. And yeah, there you have it. floats are pretty useful in the world of programming. They're used for a lot of different applications. And don't let me scare you with the whole floating point precision talk. It's very, very rare that you'll have to be in this world floating points. Usually, you won't go no further than like two or three point precision, which at that precision, everything's really simple to understand. But that's pretty much everything you need to know to get started with programming in regards to floats. It's time to talk about arrays. Now, arrays are most often used with loops, but they can use in almost any context. So what is an array? Well, you can think of an array as essentially a container that holds a fixed number of variables that all have the same data type. So the fact that they're just containers that hold variables, you can use these variables independently. in any context. Say you want to update an array full of names with a couple of lines of code, or maybe easily save an array of 100 emails to a file without having to copy and paste and change the variable here and there. Well, arrays make doing things like this really easy to do. But instead of going on and on with examples about how arrays are the coolest thing since sliced bread, let's just jump right into looking at a few examples and use cases to learn how do we go about using arrays with code. And we're going to do this using two different languages because I think it can be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is language C sharp using the it Visual Studio, which should interest you if you want to into Windows development, or make games using a popular game engine called unity. And on the right is the language Python three using the it Visual Studio code, which should interest you you're going into more general programming or data science. Alright, so here I have two brand new console projects. And if you don't how to make a new console project, neither C sharp or Python or both, be sure to check out the video in the description. It's called How to install an ID. And at the end of that video, I'll show you how to do that. Alright, so let's get a bit into arrays. So arrays are simply just a data structure, meaning it's a certain way in which you can structure your different data types. So I won't get into too much in how to use arrays. Otherwise, this video returns just like a long list of examples. But let's jump into this. So the first thing I want to touch on is the different syntax for arrays in both C sharp and Python. But before we do that, I want you to imagine that you're making some sort of four player game, let's say and every single player starts with the same amount of HP. So let's create those variables first over here in the lesson C sharp and get rid of these two lines. Because I don't need them to come standard with every console project, and I'm going to initialize an integer, I'm gonna call it HP one, I'm assign that to be 100. And then I'm gonna do it again, assign another, HP to equals 100. And then int, HP three equals 100. And then finally, ant HP four equals 100. Great. So we have four different integers for four different players. But with the raise, there's no need for four different variables, we can simply come up here and initialize a new integer array. And the syntax for that goes as follows. First, we want to type out the data type that we want to put into an array, which of course, in our case, is an integer. And if you want to denote that this is an array, you simply just add a start bracket. And in bracket, this right here is how you denote an integer array data structure. And so after that, we just type out our variable name, which I'm going to call it hp. And then we have to assign to it a new integer array. And then within the brackets here, you have to specifies the size of your array, which we have four players, so the size is four at a semicolon, and you're done. So now that we have our integer array with the size of four, we can now assign values to what's called the elements of that array. And to do that, I'm just going to come down here, and I'm going to say HP, and then at the bring back the starting bracket and then typing the element number. Again, it's the size of four. So we're going to start with zero. All right, so you probably just got a little confused on why I started on zero instead of one. Well, in most programming languages, arrays always start on zero. Why you ask? Well, zero is a number two and in computing, zero is actually the first number, not the biggest deal. But a really simple fact that it's important to remember because if you start on one, you might get a lot of errors and might want to pull your hair out. So just remember with arrays, zeros always first Anywho, we have the HP integer array at element zero. And what we want to do is assign 100 to it. And now we just want to do this for all four elements, I'm going to do HP of element one, assign another 100 to it, the HP of element two if I can type, and then assign 100 to it. And then finally HP element three and assign 100. to it. Again, quick note, you can see that we ended on the element three, although we initialized an integer array with the size of four. But if you were to count them, you can see that we have four elements here, 012, and three. And of course, the reason for this offset is because in computing, we always start on zero, it can trip you up a lot at the beginning, but it's something that you'll get used to eventually. Now I know if this is your first time learning about arrays, it can be quite difficult to get a conceptual grasp on what's going on here. And so I'm going to walk you through a quick visual. So what we have here is an array with the length of 901234567 and eight, this bottom row right here is the index or the element. They're both interchangeable. But for this course, I'm going to be calling it the element and this top row is the value at that element. And so if this were our HP integer array, it would end right here, right at the third element. And after we initialize the integer array, it was filled with all zeros in the value spots. And so what we did in the code is we simply went through and assigned 100 to every single element in that array. And that conceptually is what's going on with the race. And that's not just for integers, it's for every single type of array, if you have a string array, a float array, a character array, what have you. Now with that out the way we no longer need these variables, we can delete those. And then to prove to you that these work, as I say they do, I'm going to write a console dot write line. So that we can print this to the console and I'll do HP zero, and then semi colon, I'm just going to hit Ctrl C Ctrl V copy paste a few times and simply just change elements zero to one, two, and three, we're also going to need a console dot read key. This is so that the terminal doesn't close when we run it. And now I'm just going to come up here to the start, hit the start button, and then bring the console window over to show you that we have four players with 100 Hp initialized. Now last thing I want to mention on this is that if you try to assign a value to an element that is outside of the range for that array, then you will get an error and to demonstrate that if I come here and do HP of element four and assign 100 to it, hit the Save button then play and you can see that it gives us an exception Saying pretty much that we don't have an array of this size, therefore you can't assign to the fourth element. So just be mindful of the size of your race. Now over in Python, the syntax for arrays are a bit different. And Python actually doesn't even use arrays, they actually use a type of data structure called a list. And you can initialize a list in Python in two different ways. But the syntax for the first one goes as follows. First, we're going to write out the name of our variable, which of course is HP, and then we're going to do equal and then start bracket. And then you just type out whatever values you want in here. So again, we have a four player game with four different players with 100 hp each. So I'm simply just going to write 104 times with a comma separating each of them. And there you have it, that's done. And then to prove it to you, I'm just going to write print and then pass in the whole array, HP, hit the play button, and you can see that it prints out an array with four elements. As you can already see, Python has a huge leg up when it comes to doing this type of stuff. In Python, we really wanted to do two lines of code in C sharp, we had to do what eight 910, about nine different lines of code. Big difference. And the reason for this you might ask is just the design philosophies with the languages. Python is more designed to be really easy to use and do a lot of data stuff. And C sharp was kind of piggybacked off of the C language. So that did carry over a lot of stuff the C was already doing. But yeah, you get to pick and choose, there are pros and cons with both of them. So that was the first way that you can initialize a list in Python. And here's the second way, I'm going to come down here and do HP equals empty array. And then it's as easy as HP dot append, and then your new parentheses because it's a function. And then you want to append whatever you want. So I'll pin 200 for the first player, and then I'll append again, another 100 for the second player, HP dot a pin, the third player and at last HP dot append for the last player. And just to prove to you that does exactly what I say it does, I'm going to do print, again, HP, come up here to the topic, the play button, and you can see that we print out 100 100 100 102 times now this function is one of the benefits to using lists over array is that you can initialize the empty list and just add to that list. And C sharp has one too, but it's a bit beyond the scope for this video. Okay, so let's now talk about the real thing that makes a race so powerful. And that's array iteration. Alright, so this is cool. Now we have all of our player HP in one variable. But what if instead of four players with hp, you had 100 players with hp, this would get old quick haven't read this out 100 times. Well, that is where four loops come into play. Now, arrays and for loops are like burgers and fries, they're just a perfect combo. So now let's bring in a for loop so that we can easily assign a value to the elements in our array. So I'm just going to come up here above our variables here. And I'm just going to write out the for loop syntax. So for and then int i equals zero, and then semi colon, and then if i is less than we have four elements, so four, and then we're going to do i plus plus if that is true, and then we need to add our code block here. And then we simply just need to write our variable. And two here, so I'm not going to go too much into the for loop on how it works, because I have a full episode about that. So check that out if you're confused, but essentially, on a very layman's level, the for loop, it's simply just assigns zero to our integer here, and then if it's less than four, then we're just going to add to it every single update. And we can then use the eye as a location within the for loop. And so with that, if this four loop is less than four, then they will increment meaning it's going to stop at three, which is exactly what we need, because our element also stops at three. And so what that means is that now we can change this zero element two I element, and we no longer need these because they will be set with the for loop. In addition to that, because we're also using the array element for printing. We could even come down here and do console dot write line, and then HP of I elements, meaning we no longer need these lines either. And so now just the proof to this works. I'm hit the start button, and then I'm going to bring the window over you can see that we have four For 100. So now back to the scenario I set up, say instead of four players you wanted 100, well, we simply will come to our array size here. And we'll change the array size to 100. And we also need to change the iteration for our for loop, one to stop at 100. And to prove that to you, I can just hit the play button, and then bring the wind over here and there is 100 100. It's a bit hard to tell. But there's, there's 100, hundreds here and over in Python. Again, the syntax for this is a bit different. So I'm just going to get rid of these lines, because let's just start over. But again, we do have two ways we can go about doing this. And the first way is really, really simple. All you got to do is do HP and then assign a an array of 100, but times that by 100. and prove that to you, I'm gonna do print HP, and then hit the play button. And you can see that we have 100 A hundreds in an array. Simple, easy into the point God love Python. And for the second way, it's a bit more involved, um, come down here and initialize an empty array. And then we're gonna do a for loop. The syntax is a bit different in Python, for i in range of 100, and then oops, and then I'm going to come down here. And because it's an empty, I said empty array, but it's actually empty list, we're not going to get like the element of anything, we're simply just going to do HP dot append, and 100. So then down here, all you got to do is print hp. And we should get two arrays of 100. Hundreds, which probably is going to be a bit confusing, but let's do it anyway, hit play. And yeah, there is the second one. And there's the first one completely identical. Two ways to go about doing it, you as developer, you have the choice on which one you want to use. And so yeah, that's pretty much the basics, all you need to know to go about using this data structure. Anything from this point on would just be me listening out a million different examples on, you know, different use cases. But if pretty much from this point on, it's up to you, as a developer to get creative and apply this data structure in different ways. And hopefully, you are starting to think of some different creative ways on how you might be able to use arrays or arrays and for loops together. But that is everything that you need to know to get started with programming in regards to a race. Okay, let's talk about the big bad variables without even talking about programming. What does variable mean variable defined by dictionary calm is something that has the ability to vary or change him believe it or not, it means the same exact thing in programming as well. A variable is something used to store data, you can think of it as a container, but what you put in this container can be changed and updated, giving it the name variable. Now there is one very important thing that requires understanding when talking about variables. And that is data types. If you can grasp this thing about variables, I think you'll save yourself a log of annoying errors, especially in the beginning, when you create a variable. all languages need to know the data type of your variable and to again, thinking about a variable as a container. Imagine that we have two data types that we want to store into a container. Let's just say one data type is reptiles and the others fish, well, you can't store these two data types in the same container fish need to be surrounded by water in order to breathe. And reptiles need land in often hot, dry climate in order to stay comfortable and alive. So what happens if you drop a reptile into a containment for fish? That's right, you'll get a type error, just as if you create a variable meant for billions and try and assign a string to it. So how do we actually go about using variables with the different data types and etc? Well, it's quite simple actually, let's take a look at some examples using two different languages because I think it can be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is language C sharp using it Visual Studio, which should interest you if you want to do windows development or want to make games using a popular game engine called unity. And on the right is language Python three using the Add Visual Studio code which interests you if you want to get into more general programming or data science. Alright, so here I have two brand new console projects. And if you don't how to make a new console project and either C sharp or Python or both. Be sure to check out the video in the description. It's called How to install an ID. And at the end of that video, I'll show you how to do that. Alright, let's start off by looking at initializing some variables and the syntax of that between C sharp and Python. So over here on the left and C sharp I'm going to start by getting rid of these two lines because I don't need them. They come standard with it. The new console project. And now let's take a look at the five main data types. First, we have bullions. And you can initialize a Boolean, like so, just type out the word bool. And then whatever name for your variable. In this case, we'll just do a. And now let's initialize our next data type, which is a char. So you do that by typing out the type of data, which again, is char, and the name your variable. Let's just keep in alphabetical order going here, and I'll just name it B. And now the char has been initialized, let's initialize our next data type, which is a string. And we do that by typing out the type of data which is a string, and then keeping the alphabetical order, we'll just name it a C, I think you can get the pattern at this point, we're gonna initialize the next data type, which is an int, just type of the type of data and then name, the variable, we'll keep, we'll call it a D keep the order convention going. Now, the last data type is a float, which we'll call an E. And there you have it, initializing your variables in C sharp is pretty straightforward. You just type out whatever type of data you want to initialize, and then name that variable. And that's for all data types. However, this isn't the only way that you can initialize variables, you can also assign something to those variables when you initialize them. And to assign something to variables, you have to use what's called the assignment operator, which don't let that scare you, because it's as simply as just typing equals, equals here, this sign is what's called the assignment operator, it allows you to assign something to a variable. And for this Boolean, let's just assign it to be true. So let's go through and assign something to all of our variables. So for our char variable, let's assign the letter J to it. And then for our string, let's assign the string candy to it our integer, let's assign the number 13. And then for our flow, let's assign a 7.77. f, that's, that's a good number. And there you have it, that is a another way that you can initialize a variable. But heads up, it's always best practice to initialize your variables with an assignment like true j, for example, these are assignments. And the reason for that is because like the previous example, if you initialize them without any assignments, sometimes they can return No. And if you're using that variable, you might come up with some weird edge cases, and you'll get errors. So it's always best practice to just assign a value to your variables whenever you initialize them. Now to initialize variables in Python, it's a lot simpler with a slight caveat. So Python does away with the idea of having to cast your variables. So like over here, in C sharp, we have to cast that our a variable is a bool datatype cast that our B variables a char data type, typing the type of data next to it is what's called Data casting. And then Python, you don't have to do that, all we have to do instead is simply type out the name of our variable and assign something to it. So if we want to make a Boolean, we just assign a true value to it. The Python language is a type of language classified as an interpreted language. And what that means is Python interprets the data type of your variables depending on what you assigned to it. So at the fact that we assigned a true value to the a variable, when you go to run your Python script, Python will know that the a variable has a boolean data type, because we assign a boolean value to it. And this goes for all variables. For example, if we just copy what we did in C sharp, b equals j, and C equals candy, and then d equals 13, and then equals 7.77, Python will interpret all of these variables into their appropriate data type. And there are benefits to this. And to examine that, let's go back to C sharp for a second. Now at the fact that you have to explicitly cast your data type in C sharp, the moment that you initialize that variable, it is stuck with that data type. For example, if I wanted to come down here, and let's say, I don't want a to be a char actually wants to be a bull. Well, I couldn't do bool b equals true. For example, it will tell us that this variable has already been defined. So we can't recast data types of variables. Well, can we just reassign the tab a different type of data? And the answer is no, it will tell you that you cannot convert it from its original data type to new data type is pretty much saying this variable already has a data type. However, in Python, because it's an interpreted language, we can do whatever we want with our variables. So for example, we can come down here and say like, I want B to equal true and it'll give you no error. whatsoever. And to prove this, I'm just going to write out a print function here, print a, whoops, A, B, C, D, E, and you will see that we will get two trues for a and b. Let's save and hit the play button. And Wallah. Now, although this data type free syntax seems pretty cool and whatnot, and don't get me wrong, it is really cool. It is a lot of flexibility, especially if you know how to use it, right. But it can also cause some problems if you're not careful. A lot of the common issues that I was finding myself in in the early days of learning Python with this data type free syntax was that I was never really sure what data type some variables were. And I was trying to use them in certain contexts, and it was just really messing me up. Another issue is that there's nothing preventing you from easily reassigning a variable, when you didn't mean to end C sharp, for example, they'll tell you if you already have a variable with that name in your script. And it will also tell you for trying to change the data type for that variable, which both kind of act as a sort of security, if you will, but either way both have their own pros and cons, it's up to you decide which one is best for you moving along, one thing that I think is really important to touch on is assigning your variables after initialization. So in C sharp, you only have to cast the data type of your variable one time. In fact, you can only cast the data type of your variable one time to demonstrate this, I'm just going to get rid of this line because I don't need it. And let's try and reinitialize our a variable as a bowl with a false value. So I'm going to cast our data type, I'm gonna do bool, and then a equals false. And you can see here that it tells us that this variable has already been initialized. Essentially, that's what it's saying. And of course, what you're assigning to that variable has to be a value that is accepted by that data type. For example, Boolean only except true or false, for example, and of course, in Python, because it's an interpreted language, this is no problem, we can simply just do a equals false. And we could also do b equals false if we wanted to C equals false. And why stop there, we can do d equals false as well. And we can even do c equals false. Because this will all be interpreted when we run our script, which is now I made the play button up at the top and you'll see we get all false and a 777. Because I didn't do II here sorry, equals false save, hit the play button. And there you go all falses it was interpreted as soon as you run the script. And so that is the gist of variables, they're really easy to get your mind around, it's just you have to remember that these are pretty much containers that have some sort of data in them with a specific data type. So lastly, I'm just going to leave you with a simple example. So that you can kind of get a better idea on how variables are applied and how they're useful. So imagine you're making some sort of game with the boss battle. And this boss can only take damage, when it's either hurt, flashing or dizzy. It has to be in some sort of state. So I'm just gonna create the scenario. Remove all these lines, don't need them start over. First initialize an int, I'm gonna call it enemy hp. For example, that equals 50. And then get a Boolean there recall this hurt. And let's just say that it's already hurt. So hurt equals true. Get another Boolean, we'll call it a flashing, flashing equals true. And then let's do ball. dizzy, let's say dizzy. And let's just say that it's not dizzy. It's not really important. I'm just gonna use if statements to create those states. If hurt, then we're going to do enemy HP minus equals four, for example. And then if I'm going off screen here, if I'm what else is there, flashing? Oops. If it's flashing, then enemy HP minus equals four. And lastly, sorry, see if what dizzy. Then also enemy HP minus equals four. Alright, so just to explain what's going on here. It's just as I said, we have, let's say you're making some game with the boss battle. And the only way that the boss can take damage as if it's either hurt, flashing, or dizzy. Now, none of this is really important to the example that I wanted to create. But it at least gives you an idea of a scenario. So now imagine that you did some testing on your game and you figured out that for is not enough damage to make the game fun. You need that damage to be higher. Well, you would have to go back into your script and change enemy HP minus equals you know, let's just say seven enemy HP minus equals seven again In any HP minus equals seven. And let's say that you had this reference to damage like all over your scripts, you have to do this as many times as you as you have that reference. And this is a use case where variables are very useful. So instead of having to do this, as many times as you make the reference in your script, you could simply just come up to your variables up here and just initialize let's say, a new integer, call it damage and set it to seven. And then all you have to do is go throughout your script, and just add a reference to that the integer you just initialized. So my sequel stat, whoops, damage, damage and damage. So now let's say that you retested your game again, and you're like, Oh, wait, On second thought, seven is a bit too high, I need to bring it down a bit. Well, instead of having to go again, through all of your scripts, and changing wherever you make a reference to HP minus damage, all you have to do is now change one variable to you know, a lower number, let's say six. And now all of these references are updated. And so now that your damage value is a variable, you now have a lot more power with it, you can come down, for example, so your dizzy state and say like, just for example, if he's dizzy, then what I want to do is damage equals three, for example, I want to make it a lot weaker if it's dizzy, and this will be updated whenever it's flashing, and you do this line, or you do this line. And of course, I'll just quickly do this example in Python, it's going to get rid of everything, I don't need it. I'm going to do enemy, HP enemy HP equals 50. And then hertz equals true and flashing equals false and then dizzy. equals false. I got that backwards, this is actually true. And then we have to do if hertz, then enemy, HP minus equals damage, I guess we need to damage them just go straight for the actual example minus equals six. And then if, if what is it flashing, then enemy HP minus equals damage. And if dizzy, whoops, dizzy, then damage equals three. And why not just for fun, we can run this I'll do at the end of it all print and PHP, just see what we get. I did not pre calculate this, we get 38. Very nice. And then if we print this in C sharp, we should get the same result. I'm going to console dot write line. And then what is this enemy hp. And then oops, similar icon then we also need a console dot read line. So the console doesn't close on us when we run it. I'm at the start button up here and then bring the console over and you see that again, we have 38 Very nice. And there you have it. Again, variables are pretty easy to conceptually understand, but they get a lot more powerful and a bit more complex when you start using different data structures like arrays and whatnot. But that's pretty much everything that you need to know to get started with programming and regards to variables. Alright, so in if statement is a type of conditional statement in programming, meaning it checks if a certain condition is met an if statement in the most simplest terms is if this than that, in fact, if statements in programming are actually shorthand for If This Then That statements, one of the greatest lessons on fact that most people don't even realize with if statements is that if statements are essentially just bullions they activate if something is true, and don't if something is false. Now remember that because understanding that fact can save you a lot of headache when trying to debug your if statements, you simply just have to look at your if statement and ask is this returning a true or false value? And honestly, it doesn't get any more complex than that. If you've ever asked when an IF question, you understand if statements Now let's look at how to write an if statement with code. And we're going to do this by using two different languages because I think it can be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is the language C sharp using the it Visual Studio, which should interest you if you want to do windows development or want to make games using a popular game engine called unity. And on the right is the language Python three using the IDA Visual Studio code which should interest you if you want to get more into general programming or data science. Alright, so here I have two brand new console projects and if you don't have To make a new console project, neither C sharp or Python or both, be sure to check out the video in the description. It's called How to install an ID. And at the end of that video, I'll show you how to do that. Alright, so today's lab is going to be really simple and really easy, because once I show you the Boolean secret with if statements, you're going to get it right away, and you're not gonna have any problems with if statements moving forward. So just as I mentioned, the secret that most people don't even realize with if statements is that they're really just bullying that will run some code block if their value is true. But before we dig into that, let's first look at some of the syntax differences between C sharp and Python. Alright, so starting with C sharp over here on the left, I'm just gonna get rid of these two lines, because I do not need them, they come standard with any new console project. And I'm going to write out an if statement. And to do that in C sharp, first thing you need to do is just write out the word if, and then you want to add parentheses, and then inside these parentheses are where you want to put your Boolean, so I'm going to put true in C sharp, the true value is lowercase. And then under it, I'm just going to write out a start brace. And then in brace, this is the code block that will run if our if statement is true. And there you have it. This is how you write an if statement in C sharp From here, you can write any commands that you want in here. So you can do like, I don't know console dot write line if you want to. And then we can put Hi, for example, you can put whatever you want. And so long as this returns true, this Boolean within the if statement in parentheses is true, then this block of code will be ran. Now, before we move on to Python, I just want to mention one really important thing. If statements in C sharp, they have to have the parentheses, and the Boolean has to go inside of the parentheses. If you were to remove this, you can see that we will get a syntax error because if statements in C sharp again have to encompass the boolean value in parentheses. Now over in Python, the way that the if statement works is the exact same however, the syntax is a bit different. To write an if statement in Python, we want to first write out the word if, and then simply just put true. And the true value in Python is capitalized. So don't forget that. And then at the end, we have to end it with the semi colon, I just want to pause here and make this distinction. While Yes, Python doesn't use parentheses, it uses instead a colon. And this colon is what tells Python that the Boolean for your if statement, it has been completed. And so moving along to do the code block for your if statement in Python, it's a bit different than how C sharp does it again, the way that we indicate a code block in C sharp is we use the two braces starting in and we put all of our commands in the middle of those two braces, all which are under the if statement. But in Python, instead, we have to go to the new line. And we use indentations instead of braces. So let's give an example. and here we can just do like print. And then Hi. And there you have it. And so the next natural question to ask is, well, how do I add more commands to my if statement? Well, the answer is pretty easy. Actually, anything that is under the if statement and is indented in will count within that if statements code block. So for example, I'm just going to hit Ctrl C Ctrl V, just to give you an example. So here are four different print functions that are all within this if statements code block, because they all are indented in and they're all under this if statement. And so the next natural question to ask is probably something like, Well, how do I exit this code block? I mean, I don't want my whole entire program to be dependent on this if statement. And the answer is in Python, indentation rules over everything. So for example, if you want to exit out of this code block, all you would have to do is just come down and then return back to the regular regular indentation, and just do print them out. For example. And just to prove to you that this works, as I say it does, I'm gonna hit the play button right here. And you'll see that we get high high high amount. And then I'm just going to set this to false to let you to let you see that we set this to false, this code block will not run, you weren't going to get printed, I'm out hit the play button. And right there all we have is I'm out. And another question you might have is well what about if statements within if statements like nesting if statements, I think in C sharp, it's pretty obvious how you do that you would just write in if another f within an F and do another code block and you can do another if you want to. And this can go on forever and ever until you get tired. But in Python, it's probably not as obvious for so I'll show you so you just right within That code block which again, is indented one indentation out, you just do another if statement. True, for example, colon, and then just another indentation. And you just keep this format going, as long as you need to. And here we'll do another if statement. Hmm. Print another high. And that's all there is to it. And here's the very last thing that I'm going to leave you with. So in C sharp, I'm just going to get rid of all this just so it's a lot less confusing. In C sharp, when you have a code block, you can leave that code block empty, if you want, you have no errors, no problems. C sharp won't complain, you'll be fine. But in Python, you can't do that. So if I remove all of these lines, and just have our if statement, and then we will return in the notation after the statement. You can see if we go to our problems here, you see that we get an error for that. This is not allowed, you have to put at least something in there. So you know, if you just want to write some if statement, just to fill it out later. For example, you can just put a if you want to, which does absolutely nothing. And yeah, there you have it, guys, that's if statements for you. I just want you to remember our little secret, the condition that if statements checks for they're only a Boolean, and again, the code block will run if the Boolean returns true, and it will not run if the Boolean returns false. And so with that, you can create some pretty intricate and complex bullions and then just put that Boolean right here in the if condition from the most simplest program to the most complex program. That is pretty much how every program works under the hood. If you want to learn how to better use if statements I highly suggest you check out the Boolean lesson that I did in that lesson I go over more detail on how to use bullions in some real world situations and then once you create that Boolean you can just embed it in an if statement like this. And yeah, that's pretty much everything you need to know to get started programming in regards to if statements. So at the fact that you're watching a video on elf statements, I'm going to assume that you know what an if statement is, or in other words, If This Then That statement in disguise, but if statements alone are very limited, for example, say you build a robot to get lunch for you, and you tell it if they have spicy jackasses, Delia's Give me one your robot goes to get lunch, they don't have any spicy jack case to deal us. And so it returns not giving you anything. Now you can't get mad at your robot because it did exactly what you instructed it to do. Very literally computers are very literal, but that is where an if statements partner in crime, the L statement comes in. Let's start with what is an elf statement? Well, in the most layman's definition possible, an L statement is a conditional statement that will run if the initial condition is not met, and they're very important to programming. Going back to our example, an L statement would be the equivalent to telling your robot if they are spicy jack case, and Delia's barmy one else give me anything, your robot again goes get lunch, they don't have any spicy jack case and dalias that initial condition is not met. And so it gets you anything. And honestly, elf statements don't get any more complex than that. They are pretty simple concepts to get your mind around. Now let's look at how to use the L statement properly with code. And we're going to do this by using two different languages because I think it can be really helpful to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is the language C sharp using the ID Visual Studio, which should interest you if you want to do windows development or want to make games using a popular game engine called unity. And on the right is the language Python three using the ID Visual Studio code which should interest you if you want to get into more general programming or data science. Alright, so here I have two brand new console projects. And if you don't how to make a new console project neither C sharp or Python or both. Be sure to check out the video in the description. It's called How to install an ID. And at the end of that video, I'll show you how to do that. Alright, so just like the if statement lab, this else lab is gonna be pretty quick and easy because there's not much to it. So how do we use an L statement? Well, the first thing that's important to know is that l statements are completely useless without an if statement. They are 100% dependent on an if statement. To demonstrate this over on the left and C sharp, I'm just going to get rid of these two lines because I don't need them. They come standard with every new console project. And then I'm just gonna write out else and then our code blocks. But you can see that we have an error, but syntactically we did everything right as far as syntax is concerned. So what do we do wrong? Well, again, l statements by themselves are completely useless. They need an F statement to depend upon. So to fix this, I'm just gonna come above the else statement and write if and then let's actually do false and then our code blocks. And then there you have it fixed. As you can see, we're getting no errors, we have no issues, everything is fine and dandy. So let me explain this relationship that we have going on here. So you have your if statement right here, and this code block is only going to be ran if the Boolean inside the parentheses is true, but at the fact that it's we set it to false, it's going to go down and do this elf statement. So in other words, if this statement is true, that means whatever is inside this parentheses, if this returns true, then run this block of code, else, run this block of code. As simple as that. And to demonstrate this, I'm going to write to the console. So I want to use console dot write line. And then here, I'm going to put a plan A, and then I'm going to come down here in the L OS, and then write console dot write line. And I'm gonna do Plan B. And then of course, I need to add a console dot read key, just so that the terminal doesn't close on us until we press a key. Hmm. And then just for demonstration purposes, I'm going to change this to be a true value, then I hit the start button up here, and bring the window over right here. And you can see that it prints out a plan A, and again, very intuitive. The reason is, because we said If true, which if this whatever is inside the parentheses is true, which we said is true, then it's going to print out this, and at the fact that it's true, it ignores everything after that. Now, let's say that our if statement, Boolean returns a false value instead, well, remember the logic, this is checking if whatever's in this parentheses returns true, then run this code, else. If it doesn't, then run this code. And you can see that Visual Studio, the ID is giving us a little heads up that this is not going to be reachable, because it's kind of kind of put the alpha down a bit, it's a bit darker than the rest of the code, which is a nice little heads up from the ID and just demonstrate that this works. Let me hit the start button and bring the console window over. And you can see that it prints out plan B, just as we expect. And now over in Python, the L statement works the exact same however, of course, the syntax is a bit different. And just like the L statement in C sharp, we can't just write an L statement by itself in Python either. So just for example, I'm gonna put a zero and then hit the play button. And you can see that it returns a syntax error. And again, the reason for this is that l statements need to depend on an if statement. And so I'm just going to come above the O statement and then write an if statement, I'm going to say if false. And then I'm going to print out what I'll just do one, yes. And then you can see that I use the wrong false that is false for C sharps false in Python, and true in Python are both capitalized, trips me up all the time. But there we fixed our l statement error. And just to make this look just like the program that we did in C sharp, I'm gonna write Plan A here. And then I'm gonna write Plan B there. And again, you can use single or double quotes for Python, and doesn't really matter. But just make it look cleaner, I'm gonna use double quotes for both. And of course, if I change this to a true value, then it's going to give us plan A, when I hit play, Oh, I got of course do from print. Plenty. My mistake, let me just change this real quick print, Plan A, and then hit play. And you see that we get Plan A and not Plan B. And of course, if we change this back to false, and then hit save, and then hit the play button, you'll see that we get Plan B instead. Because again, it checks if this statement is true. Do this block of code. Else do this block of code. Simple as that. And the final thing that I want to leave you with is that you can only have one l statement per if statement. For example, if you come down here in C sharp and do if this statement, run this block of code else from this block of code, and then we chained to another else. You can see instantly we get a syntax error. Because even if you think about logic, this makes absolutely no sense. You're saying if this is true, then run this is true. Or else just run this and then or else run this that it just logically doesn't even make any sense. So that's why you can't do it. And of course in Python, we can't do two l statements back to back either was going to type l 's and then print plan. gosh dang it, Plan C save hit run See that we get a syntax here because it makes absolutely no sense. And yeah, there you have it. l statements are pretty handy when paired with if statements and of course your if statements are just regular if statements in Jag bullions in there and make some really powerful logical operations. And there is everything that you need to know to start programming in regards to L statements. Alright, so you have if statements and you have Elif statements, but you also have else if statements. So starting with the first obvious question, what is an else if statement, so you build a robot to get lunch for you, and you tell it if they have spicy jack case, and dalias Give me one else give me anything, your robot goes to get you lunch, they don't have any spicy jack case, Delia's and sort of returns with getting you a cheeseburger, but you realize that the restaurant doesn't serve french fries and now you wish that you had something different because what's a cheeseburger without fries and soda? Correct something like this. You can bring in if statements other partner in crime the else if statement. So how does it work? Going back to our example, using the elsif statement, you can tell your robot if they are spicy jackasses do is give me one else, if they serve french fries, give me a cheeseburger, else give me anything. And with this program, you can send your robot to any restaurant and be sure it'll get you what you want if the conditions are right, because if statements are pretty much just bullions they're essentially like backup if statements. And that's pretty much all this to an else if statement. Now let's look at how to use elsif statements properly with code. And we're going to do this by using two different languages. Because I think it can be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is language C sharp using it Visual Studio, which should interest you if you're in the windows development or want to make games using a popular game engine called unity. And on the right is language Python three using the ID Visual Studio code which interests you if you want to get into more general programming or data science. Alright, so here I have two brand new console projects. And if you don't how to make a new console project and either C sharp or Python or both, be sure to check out the video in the description. It's called How to install an ID. And at the end of that video, I'll show you how to do that. Alright, so just like the L slab, the elsif Lab is going to be pretty quick and easy. Because again, there's not really too much to this. So how do we use an else if statement? Well, just like an L statement, if elsif statement is completely dependent on an if statement without an if statement in elsif statement is just completely useless. And to demonstrate this over here in the left in C sharp, I'm just going to remove these two lines because I don't need them, they come standard with any new console project. And I'm just gonna write else. And then if and then true, and then my code block. And as you can see, we get an error because this is invalid syntax, again, elsif statements are completely useless without an if statement. And over in Python, it's the same exact thing, except for the syntax for elsif statements, it's just a little different. So instead of else if typing that out explicitly, you just type e L, i f, else if it's shorten, and then you can just put true here, and then your colon and then your logic. But even if I were to put some logic here, let's just say I'm gonna put zero, you can see that we get an error, I'm going to hit play. And it tells us that this is invalid syntax. Again, the elsif statement by itself is completely useless. And so to fix this, I'm just gonna come right above our elsif statement and add an if statement to that. So if true, then we go on to do console dot write line. And then we're going to say Plan A, and then I'm going to come down here and do the same console dot write line, and then plan spell Plan B, semi colon, who's going to do the same thing in Python so that they are on the same spot. Let's see true, then we want to do print planning. Remember, indentation is really important. So we're going to come back down here. And then it also if that's true, they want to print Plan B. And so what is all this same? Well, this is saying if this statement is true, then run this block of code. Else. If this statement is not true, but this statement is true, then run this block of code. And over in Python, it works the same exact way. So we have if this statement is true, then run this block of code here. Else if this statement is not true, but if this statement is true, then run this block of code, one difference on a point output To for the elsif statement, it's a minimal difference. But Python really prides itself in being like optimized in every way possible. And that includes like how many characters you have to type for elsif. This is only four verses over in C sharp, you have to type seven, including the space. Again, it's minimal, but differences or differences. Now here is where the real power of elsif statements comes into play. What makes elsif statement so useful is that you can add as many else if statements as you want, there are no limits. So if I come over here, and just grab this, and then hit copy, and then paste and then paste, and then paste, you can see that we have no errors, there's no problems, no issues, you can do this as many times as you want. In Python, there's no difference, you can grab this copy and paste for example. And oops, and do this as many times as you want. They'll do be careful with your indentation, make sure that your indentation is always correct. And so with that, I think it's important to touch on the order of operation and how important that is. So with any if statement tree, it always will first check the first one, if the first one is not true, then it'll go to the next one. If the next one's not true, then it will go to the next one, it'll keep on going blonde down the line until it gets one that is true. So say, for instance, this one is true, then it's going to run this block of code, and it's going to exit out, it's never going to even touch this elsif statement right there. And I can demonstrate this for you. I'll just change this to plan C plan changes a plan D changes, plan E. And let's say that the Boolean check here returns a false. And then let's say this one also returns a false, and so does this one right here? Well, what we should expect is that it's going to check this one, get a false elsif, check that one get a false L. So check that one, get a false, Elsa, check this one and get a true, and then we'll run this block of code and should print out plan D. And just to prove that I'm going to hit the start button. And then I'm going to bring oops, we forgot to add a console. Console dot read key so that the terminal doesn't close until we press a button. And then I'm going to hit the start and then bring crossover and Wallah, we have plan D just as we expected. Now, of course, this also works in Python, and I can prove that to you just going to change this to see the E did I mess up a B, C, D E is m a one over here, either way, e f, and then we can set this one to false. And then we can set this to false. And then we can set this to false. And we should expect again to get to print out plan D going to hit the play button and we see a plan D. And the last bit of information I think will be useful for you to know is how to incorporate the actual elf statement. So let's say that you have some variable, right? You have like a money variable. And you have this first statements like if I have over, I don't know $1,000, then do this block of code. Else. If I have over, let's say $750, then run this block code. If I have over 500, run this one, if I have over 250 for example, run this one. If I have over 100 then run this one. And let's say that you have to print to the console something, right? Well, if you do all these checks, and you have $0 and you'll never print anything, but that's where the else statement comes back into play. All you have to do at the very end of your if statement tree is just simply add else. I want to do a console dot write line. plan what is f Plan F and that is all you got to do. Now take note your elf statement has to be at the end of your if statement tree. It can't be anywhere else. But at the very end. I mean even if you think about it logically, that's the only thing that makes sense. And that's pretty much everything else if statements. The final thing maybe to note is that else if statements are no different than if statements like this, and this are the same exact thing. The only difference is that an else if statement is dependent on an if statement. You remember that simple rule and you'll have no trouble using elsif statements and that is everything that you need to get started programming in regards to else if statements. For loops, it's time to learn all about for loops. Now, these are a very essential thing for any programmer to know. So what is a for loop? Well, simply put a for loop is a shortcut to run a block of code a certain number of times. So say you have four phone numbers, for example, and you want to add an area code to each of them. Well, instead of hard coding this four times phone number one plus equals area code, phone number two plus equals area code, phone number three plus equals area code, etc, etc, you can just use a for loop and write up the logic one time to get the same job done in less lines of code. And for loops are very powerful in this regard, because they scale quite well. So for phone numbers isn't that bad, you can write out phone number 1234 plus equals area code pretty quickly. But now imagine, instead of four phone numbers shown at area code two, imagine that you had 4000 phone numbers, you can imagine how redundant it would be to have to write out phone number 1234567, all the way to 4000 plus equals area code 4000 times. So let's take a look at how we can use for loops to do amazing things like this. And we're going to do so by using two different languages because I think it can be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is the language C sharp using the ID Visual Studio, which should interest you if you're interested in doing windows development or want to make games using a popular game engine called unity. And on the right is the language Python three using the IDE, a Visual Studio code which should interest you if you want to get into more general programming or data science. Alright, so here I have two brand new console projects. And if you don't know how to make a new console, project new, the C sharp or Python or both, be sure to check out the video in the description. It's called How to install an ID. And at the end of that video, I'll show you how to do that. Alright, so for loops, for loops are extremely useful tools in programming. So let's jump into it starting with some syntax. Now the syntax for for loops in C sharp can be a bit tricky to remember. But it's not terribly hard, you only have to remember these three things. But first, I'm going to remove these two lines because I don't need them that come standard with every new console project in C sharp, so we can just get rid of them. And this is what you have to remember, I'm gonna write this in a comment just so that it's easier to remember. So a couple forward slashes for that. And so first you write the word for, and then parentheses. And now in these parentheses, this for loop happens in three steps. So let's segment in by adding two semi colons. And that last, the first thing yet memorize is to initialize your variables variable. I'll just shorten this to initialize because we were going to quickly run out of room. And then the second thing you have to remember to do is to set your condition. And the final thing you have to do is give a command. So long as you remember, these three things for loops will be really easy for you to remember. So now let's walk through an example on how to initialize a for loop for real, I'm just going to come down here to the next line, and I'm gonna write out the word for. And then the first thing I need to do is initialize a variable. Now, the most common variable that most people initialize at this step is actually an integer variable called I. And you'll assign usually zero to it. But you can assign whatever you want to it. Actually, you can initialize any variable of any data type that you want here, but we'll come back to that in a bit. And so the next thing we have to add here is the condition, which simply just asks, How long do we want this for loop to run. And this condition here in this space is actually just expecting a Boolean. And so let's write a Boolean in here. Let's say that we want to run so long as is less than 10. Sounds good enough to us. And then the final thing we need to add is the command and what the command, we simply just instruct our computer to do something. So if we initialize an integer named I and assign zero to it, and we're saying that we want this for loop to run so long as is less than 10. Then here, we can say, We want i for every time the loop finishes to simply just add one, using the increment operator, it just adds one to whatever variable we added the increment operator to. And then at last, we just come down here and add our code block for the for loop. And now every single time that this loop goes through, it's going to run everything within the code blocks, which again is every thing that we add within these two braces, and then at the end of it is just going to come back to the top and then when it comes back to the top, it's simply going to check our condition here, it's going to ask is i less than 10? If true, then it's going to exit here. It's no longer gonna run this this loop anymore and go to whatever line is right after that, but if false Then it's going to do our command here. And then it's going to again, run this block of code and continue that until when it checks here, and this is false, then again, it's going to exit and run whatever line comes after the for loop. And so now to do a for loop in Python, it's actually a lot different. Python doesn't have this syntax where you initialize a variable, and then you set a condition and then you give a command. It's actually, in fact, probably a lot more simpler. But the syntax for it goes as follows. First you want to type out the word for, and then you want to type out I, for i in and then you need to define a range. And let's just say 10, we're gonna use the same 10. And then you write your colon here to start your code block. And then here, you can put whatever commands you want in there. Now, that's how you initialize a for loop in both C sharp and Python. However, I want to go back to the C sharp initialization real quick and point out something really interesting. Now, I think in most cases, for for loops with this syntax, you'll find that most developers will first initialize an int called I, and then assign it to be zero and then do like, if and if i is less than a certain number, then we're just going to use the increment operator on it. But I want to relinquish your mind early in development, because this right here is the actual rules for a for loop. But to understand where I'm about to go, I think I need to first show you what's going on with a traditional for loops. So I'm gonna do console dot write line here. And I'm just going to print out the value of i. And then of course, down here, I need to write a console dot read key, so that the terminal doesn't close on us. As soon as we run it, I was gonna come up here, hit the start button. And then I'm bringing the console window overseeing see we have going on here. So as you see, I is initialized and assigned to zero, and then we increment increment all the way until I is no longer less than 10. And then we exit out the for loop. Pretty simple. But again, here it says initialize. So we can initialize whatever we want. Actually, this doesn't have to be an end, we can initialize a float if you want to run it again. And you can see that we have the same exact result. But why stop there, instead of using the increment operator, we can do plus equals point five, we want to hit the start just to show would that result and you see that we zero then we increment plus five and then another plus five all the way to 9.5. And of course, that's not all, we can initialize a string if we want to and assign that to equal empty string. And then here our condition as long as I and then we can grab the length by hitting dot length of the string is less than 10. Let's just say, then we want to do i plus equals, let's say z, for example. And then we can run this for loop here. Start button, bring the window over. And we can see that it creates this interesting for loop, the sky's the limit, so long as you follow this convention right here. And because Python doesn't have the syntax, you can still achieve it, but you'd have to achieve it in other creative ways. Also, I didn't prove it to you that this works in Python. So I'll do that really fast. I'm gonna do print, and then I and then I will run this when the play button, you see that it prints out all the digits in the range of 10. Now that's pretty much how you go about using for loops. Now as far as how you go about applying for loops, that's your own creative problem solving endeavor that I'll let you figure out on your own. However, I will leave you with one use case. So I went ahead and wrote out the program for our scenario, because otherwise, it would have been a long silence watching me type this out. But I'll walk you through it. But first, imagine that you've collected 700 files with a bunch of candy data on it. And now that you have this data, you need to get it all in one place. Now you could open up one text file and manually add it to the other then open up another text file and manually added and the next and then add in next and add but that's even exhausting for me just saying it verbally, you could instead write a program with a for loop to do this for you. And so first we initialize a few variables. First one is a string array with all the file names on it. And then the next we have the master data string, which we're going to compile all of our data to and over in Python and we do the same exact thing. We initialize a string array called filename with 700 files that can fit on there, and then our master data string that will compile all of our data onto and then we come down to our for loop in which we initialize an integer named I assigned zero to it. And then we have a condition here, which pretty much just says so long as I which is location in our for loop, as long as that is less than the amount of files that we have in the file name string array. Then we want Want to continue looping. And then of course, our command, we just want to increment the integer I, and then down here in the code block. All of this is kind of fake, I just made it up for the scenario. But there's a huge assumption happening here, I'm assuming that you as the data collector, you are really good at naming your data files. And so every single data file that you have is named candy, space, data space, and then whatever number of data file that is dot txt, very important, because if your data files are named something a bit more chaotic, then we lose the power to use a for loop by and so let's just say that this is you're really good at naming your files like this. Oh, and just to clarify, this dollar sign means that this string is interpolated. This is an interpolated string. If that's confusing, check out my string lesson, I go all in depth into it Anywho, what we're doing here is we are taking the file name array at the element of AI, which is where we're at in the loop. And then we're just going to assign this file name to that location, or that element in the file name array. And then on the next line, I made a fake function here, where it takes in the name of the file name, and it's supposed to read data. But down here doesn't do anything, but just return. So like some string with the actual data name, but this is a real function. It exists in a lot of libraries. But I it's beyond the scope of this video. So just know that this, this, this right here represents something that really does happen. And so we pass the file name to the read data function, the read data function will open up the text file rewear was on there. And then we will add that to our master data string. And then over in Python, we do the same exact thing. We have a for loop here for i in range length of filename, just to break apart what this means really quick. So length function, it returns a number of items in a container. And so this file name is a list with 700 items in it. So when we run length of filename, it's going to return 700. So for i in range of 700, will be our for loop. And then we come on down into our code block. And here, again, we have our file naming convention that we're just going to assume that you're good at labeling data. Every file is named Kenny data, and then whatever the number is, but it doesn't start at zero, it starts at one, so we have to add one to our I because I does start at zero dot txt. And then we just assign that to our filename list at the element of AI, again, that lives from zero all the way to 700. And this is going to match up because they're both using eyes here and here. And then finally, we made a fake function called read data, it doesn't really do anything except for return Kenny data from and then whatever the name of the file is, but we will run that function pass in the file name. And let's say this was a real world scenario, then this would open up whatever that txt file is grab the data from that. And then we would add that to our master data string. And then finally, we come down here, and then we'll print the master data. And just to prove that these work, I'm going to come up here and hit the start button, C sharp, and bring the window over and you can see that we have all this candy data. Look at all that candy data. Wow. Then I'm come up here in Python and hit the play button and error. Oh, right, right. So Visual Studio code has a really weird, well, it's not weird, it's helpful. But if you have something selected and you hit the play button, then it's just going to run that. So almost like nothing and then hit the play button. And there you go. You can see that a generates all that data. Wow. And yeah, there you have it. This is one creative use case in which for loops can be really helpful. But there are a ton of different for loop use cases. But it would take me all day to sit here and list out a bunch of different ones, but you now know how to write your own four loops. So now you can think of really interesting ways yourself to apply for loops. And that is everything that you need to know to get started with programming in regards to for loops. Let's talk about while loops. while loops are a type of loop obviously, and they share a lot with a for loop except instead of running a block of code a number of times it runs a block of code while a certain condition is true, hence the name while loop you'll find that while loops are a lot less common for loops, but every once in a while you'll find the perfect use for a while loop. So for for loops. For instance, when I make any sort of robotics project I find while loops very handy to use anywho. Let's take a look at how to use while loops with code. And we're going to do this using two different languages because I think it can be really helpful for you to see how they compare and contrast and plus, you'll pretty much learn two different languages at once. So on the left is language C sharp using the ID e Visual Studio which should interest you if you want to do windows development or want to make games using a popular game engine called unity and on the right is the English Python three using the ID Visual Studio code, which should interest you if you want to get more into general programming or data science. Alright, so here I have two brand new console projects. And if you don't know how to make a new console project, neither C sharp or Python or both, be sure to check out the video in the description. It's called How to install an ID. And at the end of that video, I'll show you how to do that. Alright, so while loops, Now today's labs can be pretty short, because there's not really a lot to while loops. But let's start by looking at the syntax for a while loop in C sharp over here on the left, I'm going to get rid of these two lines because I don't need them. And they come standard with every new console project. And I'm simply going to write out while and then in parentheses true. And then our code block. This is the syntax for a while loop in C sharp, you essentially just write while and then you have to pass in a Boolean here. And then you ever code blocks and where you can put all of your demands that will continue running over and over and over. While this Boolean is true. And over in Python, a while loop looks like this while and then true. And then I'm just going to put pass here in our code block past just pretty much means don't do anything. And this is the syntax for a while loop in Python. Pretty simple. Now one extremely important thing that you need to know about while loops is that while a while loop is running, whatever comes after the while loop. So if I come down here, for example, into a console, console dot write line, for example. And then reach, for example, anything that comes after a while loop will not be reached until the while loop has been completed. And again, the reason for this is because when you run a while loop, it just runs whatever the code is in its code blocks over and over and over however many lines there are, it goes one by one by one. And then once it reaches the end, it starts over the top and continues going until this boolean value here is no longer true. Once this is false, then it will stop doing this loop and then go to the next lines after the while loop. And this process also happens in Python. If I just come down here and do print and then reached, for example, this while loop will keep on doing every single line in this code block until this condition here is false. And if it's never false, then guess what this code right here will never be reached. And I can prove that. But first I need to set up a couple of variables, I'm going to come up here and then I'm going to initialize an integer. Let's just call it a why not, and also t equals zero. And so within this boolean value, all we have to do is say if a is less than 100, then we want you to run and then every single time to run, we can simply just do a plus plus, use the increment operator. And then let's also do a console dot write line. And just just print out the actual integer value. And so what's going to happen here is that when our main program is ran, it's going to go down the line and then hit our while loop. And because A is less than 100, it's going to run this block of code one time, you know plus to a and then write it out. And then it's going to reach the end and do it again. And then again 100 times until a is no longer less than 100. Once it's greater than 100 or equal to then this will no longer run and then they'll go to our right line reached right here. And we can print it out. And I can prove it to you. But first I need come down here and do a console dot read key. So the terminal doesn't close on us when we hit the start button up here. And I'll bring the window over. And as you can see, we get results that we expect to get the while loop will run over and over and over until it's Boolean condition is no longer true. And once it's false, then finally the while loop will exit it goes to the next line. And then on that that line after it we have the printout reached which there it is at the end of the while loop. And over in Python. This is done the same exact way just in the Python syntax. So to set that up, I'm simply going to come up here. Oops, what did I just do? Oops, I think I Yep, collapse that. Okay, come up here I'm gonna do a equals zero. And then while a is less than 100, and then instead of pass, we're gonna print just whatever A equals and so not approve that they work the same. I'm hit the play button up here. And as you can see, we have Oh, we forgot to increment, right? I'm simply going to increment a up here to a plus equals one. And now our code should be fixed, I hit the play button, and bada boom, there you have it, same exact scenario as in C sharp. And finally, there's one more way that you can go about stopping a while loop. And that's by using the break statement. So first question, what is the break statement? Well, the break statement is a statement that can only be used with loops, like for loops, and while loops. And when you use the break statement, all it does is just breaks that loop moving on to the next line after the loop. So to demonstrate this, I'm going to replace this Boolean right here with just a regular Boolean, true value. And then I'm going to go into here and write an if statement. So now I'm gonna say if a is greater than or equal to 100, then what we want to do is break. And to prove this works, I'm coming here to the play button, hit start, and then bring the window over. And you can see that it works exactly the same as the other method. And to do this method in Python, I'm simply going to replace this Boolean with the true boolean value. And then I'm going to come down here and do if A is, is greater than or equal to 100, oops, 100, then we want to break, gonna hit that play button up here to prove that it works. And you see that we have the same exact thing, probably didn't even notice that it changed. And that's why it was for you. They can be handy in certain situations. But to be honest, you will probably more often be using for loops. And there you have it. That is everything that you need to know to get started with programming in regards to while loops. It's finally time to talk about methods. So methods are amazing programming tools that simply put allow you to not have to repeat code over and over and over. And to be able to get a better grasp on your code. For instance, say you have some inventory class. And in this inventory class, you have a few things that can happen, you can close the inventory, you can open the inventory, you can empty the inventory, just to give a few examples. And instead of having to change a list of inventory variables, every time you want to do these things, you can just wrap all this code into a method and just call that method whenever you want to do it saving you a lot of time from writing the same code over and over and saving you from future headache. So now let's take a look at how to use methods with code. And we're going to do this using two different languages. Because I think it can be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. And so on the left is language C sharp using the IDE, a Visual Studio, which should interest you if you want to do windows development or want to make games using a popular game engine called unity. And on the right is the language Python three using the it Visual Studio code, which should interest you if you want to get into general programming or data science. Alright, so here I have two brand new console projects. And if you don't how to make a new console project and either C sharp or Python or both, be sure to check out the video in the description. It's called How to install an ad. And at the end of that video, I'll show you how to do that. So before we can use methods, we first have to learn how to initialize them. So let's take a look at their syntax first over on the left and C sharp, I'm just going to get rid of these two lines because I don't need them. And then I'm going to come down here so that we can initialize a new method and the syntax for that goes as follows. You simply just type out void, and then whatever name you want for your method, I'll just call it ABC, for example. And then you need to put a start in parentheses. And then finally, is simply just add a code block. And now you can put whatever commands you want within this code block. For example, I'm just going to put console dot write line, and pizza, because pizza is the best. And there we have initialized a method. Now to do this in Python, it's just a little different, but the concept is still the same. So to initialize a method in Python, you want to type out instead of void, you want to type out def, def, and then whatever name for your method or isn't called again, ABC. And then you're gonna do your start in parentheses, this convention stays the same. But instead of going to a new line and doing code blocks using the braces, you simply just use a colon here, and then go to next line and make sure that it's indented. I'm using the Visual Studio Code ID, which automatically adds an indent for me when I go to next line. Well now just like in C sharp, I can add whatever commands I want in this code block. So I'm going to write out prints. And then again, pizza, because pizza is the best. So that's how you initialize a method in most C sharp and Python. But without more context, I don't think they're that helpful. So let's take a step back and examine a scenario. So imagine that you're writing some sort of program with an inventory system that has three spaces, and this program requires you to swap out what's in those three spaces quite a lot. So just to make is less confusing, I'm going to get rid of our initial examples on both Python and C sharp. And now I'm just going to pretty much set up that scenario with some variables. So I went ahead and wrote the scenario off screen, because otherwise it probably would have been about five minutes of silence. But I'll walk you through it. So up here, we have all of our string variables. This is our inventory standing for I envy slot, one, two, and three Python as the same. And we first set them all to be empty. And then we have a couple of items we can pick up under the variable name, pickup, one, two, the first one is pizza, because pizza is the best. And then we have candy. And of course, Python has the same exact thing going on there. Next, we just have a couple of if statements to kind of simulate an event happening, let's say that you want to pick up some items. Well, first, you want to check to see if it's empty. And then if it's empty, then you pick it up. Same thing happening here in Python. Okay, so we have our scenario all set up, I'm just going to come down here and add a console dot write line, so we can print out the results here. Let's print out first in Vin one. And then I'm lazy, I'm just gonna do Ctrl C Ctrl, V, copy paste a couple more times, and print out also in Vin two and inven. Three. And I'm, of course, gonna come over here and Python do the same exact thing, except for the syntax a bit easier. In Python, I can just do inven, one, there, and then comma, and one, two, and comma in vim three, a much more simplistic print function Python has now before we run it, what should we expect? Well, again, all of our inventory, slots, stuff is empty. And then we come down here and do a check if the first slot is empty, then we're going to assign the pickup one to Inventory Slot one, which is pizza. And then we do another check. If Inventory Slot three is empty, then we'll assign the pickup to to it, which is candy. So all we should expect is pizza, empty candy. Let's see if we get that just gonna come up here and hit the start button. Oh, that's going to close on us. I forgot to add, of course, console dot read key. Alright, so again, I'm just gonna come up here and hit the start button and bring the window over. And you can see that we have an Inventory Slot one pizza, slot two empty and slot three candy. Perfect. Gonna run that in Python as well hit the play button up here. And you see we got pizza, empty candy. Perfect. Okay, so this isn't bad. This is pretty straightforward, does exactly what we want. But now imagine this scenario where when you assign a new item in your inventory, it doesn't only just change that item slot. Maybe also, you know, it does some UI stuff here. And then it does like some special effects was that I'm saying v effects, and then maybe like updates, other like update. slot one, for example, Inventory Slot one also updates inventory, slot two, slot two, for example. And this does this happens for every time that you want to do this, right. So I'm gonna copy this and bring this down here. And you can see that our code is starting to get long and kind of strenuous. Now, this is where one of the use cases for methods come back into play. The first advantage to using methods is having the ability to compress your code. Now, why would we want to do that? Well, everything within the code blocks have this main function right here is our main program. And over in Python, just for comparison, every line in the script counts as your main program. But as you add more code in the main program gets longer and longer, it can become more and more confusing and difficult to read and understand. And so instead of having this chunk of code or this chunk of code, we can convert that into a method and just call that method in our main program. And so let's do that. And to do that, I'm first going to come over to our first chunk of code, and essentially encapsulated inside of a method. So right above it, I'm going to add a start brace comes to the bottom of it at an end brace and Visual Studio automatically reformats to it for me, thank you Visual Studio, and then I can simply add our void. And then we can now get to the hardest part in all of programming. Now, we have to name our method, which thankfully, I thought of all this ahead of time, so you don't have to watch me struggle, but I'm gonna call it pick up pizza. I won. And then of course, our parentheses, close it out. We already did our code block ahead of time. And there you go, we have converted this to a method successfully. Now I'm just gonna do the same thing for our second chunk of code. Just a bit different in my process here, pick up what is this candy and i three that do that. Oops. We're going to get rid of this. And then we'll use the bottom automatically formats. Thank you. Visual co And there we have it. And over in Python again, let's say that when you pick up something, you also do like some UI stuff and some visual effects. And you also do, you know, you update whatever information you need update and slot, one of your inventory, you also update whatever's going on. And slide two, for example, so on and so forth. I'm just gonna copy this and bring this down to this one as well fixed the format a bit. And you can see the script got a lot longer. So let's convert those into methods. Now, you already know the syntax for methods in Python, we simply just replace void with def, and then we name our variable is going to be pick up pizza, Inventory Slot, one, starting in parentheses, and then our semi colon. And then we have come down to all of this and then hit the tab button so that this counts as a code block for that method. And let's do the same exact thing for our second chunk of code. def, what is it pick up candy, inventory, three, starting in parentheses, and then our colon, and then come down to all these lines and indent the man. So they count as a code block for this method. Now, we need to pause if you take a look at our inventory, three variable, and even our inventory one variable, they are underlined red, which means that we have a problem, it would come down to our console and press problem, we see that word is telling us that these variables are not assigned. What's going on here? Well, this has to do with something called scoping. And Python is very peculiar about your scoping to simplify, this block of code is self contained only within this method, pick up pizza inventory one, he doesn't have any reference to anything outside of this code block. And of course, same goes for this code block as well. So one simple thing we can do to let these code blocks know that there is a variable called iron v one outside of its scope, which again, is this, we can simply just come at the top of it, and then type global and then I N v one. Same down here, we can type global, and then type ion v three, and you can see our problems are gone. Problem solved. What we can do now to compress our code is grab all of these lines here, which contained both of our methods. And I'm going to hit Ctrl x or cuts. And I'm going to now move this to the bottom of our entire program at the very end, and D realize what just happened, pretty much our program ends here. So everything before that is our actual program, look how much shorter that is. And over in Python, we can do the same exact thing. I'm going to select all these lines that have our two methods here, hit Ctrl, x or cuts. And then I'm going to move that up. And then underneath our print function, I'm going to hit Ctrl V or paste and put that underneath. And again, right here, our program ends here, much, much shorter. However, our code is now compressed. Yes, but we aren't completely done yet. Over in C sharp and the left, you can see that if I hit the start button up here on top and bring the window over, you can see that our entire inventory is still empty. And the same goes for Python, if I hit the play button, you can see that we have empty, empty, empty. And the reason for that is because at no point did we call our methods. And to do that in C sharp over here on the left, all you have to do is simply just write out the name of your method. So our first one, we want to do pick up pizza for one. And then you also need to include your Start and End parentheses. This is what denotes that it's a method. And then we need to do pick up candy inventory, i three started in parentheses, and then our semi colon. And to prove to you that this works, like I say it does, I'm gonna hit the start button, and then bring the window over and you can see that they have now been set, check that out. Now over in Python, it's actually quite different, although the concept is still the same. So earlier, I moved off our methods to the bottom of our Python script. But if we were to come into the middle of our program, and then type out, pick up, what is it pizza item one, and then start in parentheses and then run our program, you'll see that we get an error because pizza pickup pizza item one is not defined yet, or inventory one rather, is not defined yet. And so a truth about Python is revealed. using methods in this context isn't really all that useful because the order of operation is extremely important in Python. So to use our methods, we have to initialize them before we call them For the first time in our scripts, but also after we initialize the variables that we're using within them. And where's that sweet spot you ask? Well, it's right here. And so I'm just going to select all these lines that contain our methods. And then I'm gonna hit Ctrl, X to cut and then Ctrl V to paste. And there you have it. And just to prove that everything is exactly what it needs to be, I'm gonna hit the play button up here in Visual Studio code. And you can see that we get pizza, empty, empty, hold on, That's not right. Of course, the reason for that is we have to call the second pickup as well pick up candy I three star in parentheses at the save the play button, and voila, we got pizza, empty candy. Okay, so that was one use case for methods. But I want to show you another one, I'm gonna start by removing all the code that we did, and C sharp and Python so that we can set up a new scenario. By now imagine that you have some program with some sort of boss battle in it. And every time that you successfully hit the boss, two things or more happen, so I'm just going to quickly code up this scenario. Alright, so I went ahead and code up the scenario off screen, because otherwise would have been another couple of minutes of silence, but I'll walk you through it. So here we have a few integers initialize, we have my HP the enemy HP and some money, then we have some Boolean to check if we hit legs, arms or head, set them all to be true. And then we simply have some if statements to check for those volumes. And if any of them are true, then we simply will minus HP from the boss and then add some money to our bank account. And Python does the same exact thing. Same variables might be in PHP and money, and then some hit legs, hit arm and hit head bullions. And we simply check those blades. And if they're true, then again, we're going to minus HP from the enemy and add some money to our bank account. And that's all it's to it. And so the next advantage that methods could give you is reducing repetition, if you haven't already observed, and both scripts, we have this chunk of code right here, enemy HP minus equals one, and money plus equals five. And this is repeated over and over three times each on both scripts. And I mean, that's fine. In all, I mean, this will do exactly what you expect it to do. However, we have this rule in programming, and it goes as follows. never write the same code twice. In addition, imagine that you want to add something else to these hit events. Like for example, let's say that you wanted to take your HP and add a little healing for every successful hit, right. So you would come down here and do my HP plus equals two, for example. But the problem is that you now have to write this for every single hit event. So my HP plus equals to go to the next one, again, my HP whoops, my HP plus two equals two. Now there is a clear pattern here. And there's no reason for you to repeat this over and over and over again. And so let's bring back methods, all we have to do at the end of our main function here is write out void and then name our function, let's call it I'll just call it hit event. Sounds good enough to me open starting in parentheses, and then come down here and your code block. And let's just write all this out. Any PHP minus equals one, perfect money, plus equals five, and then my HP plus equals two. And so now all we have to do is simply just remove all of these and replace them with hit events. Starting in parentheses, semi colon, and bottom being do that for all other spaces as well. And do hit events. Start in parentheses, semi colon, oops, get rid of that line. And then of course here as well hits events about bomba bomb and bada bing. And there you have it, we have greatly reduced our repetition. And of course, just to prove to you that all this works, and we come to the end of our script here, which again, ends right before our method is called. So in script, and then I'm going to add a console dot write line. And we really just want to know all of our variables, so enemy HP, and then I'm lazy. So I'm gonna hit Ctrl, C Ctrl, v a couple times and then replace this with money. And then replace this with my HP. Come up here, hit the start button. Up, it's going to close Of course, we have to hit console that read key always forget this. Probably a bit. So use the Python, hit play, bring the window over and you can see that we have our calculations. I mean, there's not going to confirm that they're what they are, but trust me, it's working and now over in Python, this technique has a lot of benefits, but it's still limited to the order of operation. And so again, to implement this in Python, we simply just go after our variables that we're using are initialized. But before we call it, which that sweet spot is right here, and so we can do def, what do we call it? I forget hit event, hit events, and then start in parentheses there. And then I forgot some, just regular colon. In our code block, we can just bring in this right here, I'm lazy. So I'm just copy and pasted by being and then we can replace all of these with hit events. And then I'm going to copy this because I am lazy and copy this as well, because I'm lazy. And you can see that we have our issue again, and you can see that we have our scoping issue again. And you can see that we have our scoping issue again. And you can see that we have our scoping issue again. And to fix this, all we have to do is just again, add our global, and then we need what enemy, HP and money. Perfect. And so now to prove all this works, I'm just simply going to repeat what we did in C sharp and do print and PHP. And then we also want to print our money. And then we also want to print our my HP. I boom, except for the HP Of course, because we didn't add that. But it's a lot easier to add things. Now, instead of having to go through every single event, we just go to the actual hit event method. And then we can do my HP plus equals to I believe it was I'm just double check here. Yes, it was too. And we need to set that as a global as well to grab that from our scripts. And then I can hit play again. And you can see that we have the same exact variables 2715 and 16. And there you have it for reducing repetition with methods. Now, I just want to show you one last technique with methods and that is returning values. To do this. Again, I'm just going to get rid of all the code that we did already sing with Python. And now imagine this scenario. And so I went ahead and wrote this scenario of code off camera, because otherwise, this probably would have been about a 10 minute silence. But as always, I'll walk you through it First, consider the scenario that you're developing some app or some social media or something like that. And you want to generate a user ranking for all of your users. Now, what's going on in our program isn't really important at all, honestly. But here we have our user rank variable. And let's say that we want to generate this user rank using these variables here. Well, I just came down here and just made a pretty big tree, and did a bunch of checks. So if guests then minus something if page, plus something else. Plus, if this is all arbitrary, I just want to make a really big tree to demonstrate this next example. So let's just say that all of this right here, actually starting here, all this right here is like an algorithm that you and your social media your app team has developed. And you guys have concluded that it's a very accurate way to assess the user ranking of your users. Well, instead of having this algorithm hard coded for a single variable, we can convert this algorithm into a method and have that method return a value. And so to do that, we only need to do two things. First, let's convert this algorithm into a method. Now, this is still hard coding our user rank variable. This is no different than just a regular method. So what we need to do next is we need to create a temporary variable and we'll call it actually temp, and then let's set its equals zero. And then we need to change all the user ranks to be timps. Or the temp variable, my apologies. So I must say temp here, use a rank. I'm gonna go right here temp and then use rank here is also temp. And then use rank here is also temp and then use rank here is also Tim Hahn this user rank is temp is well. And this final one is to at last No, we have to do is come to the end of our method, and then do return tip. Now, you'll see that we will get an error here. And the reason for this, it requires a bit of explanation. So when you initialize methods, you are also casting its data type. And so if we check out our score method, you can see the data type for our score method is a void, which is essentially data type lists. So our score made through essentially just go through its code block, run that and then exit out but if we wanted to return data of some type, all we have to do is replace this with that data. Type. And seeing that our use rank is a float, we're going to replace this with a float. And you see our error has disappeared. And so what does that allow us to do? Well, I'm going to do our convention, our program ends here. And then I'm gonna go down and find these two things, and then Ctrl X to cut them, and then put them before programmings. And now all we have to do is just assign a score to our user rank variable. Isn't that nice? And let's say that we have another user rank that we want to calculate, right? This is easier rank two equals zero. Well, all we have to do now is just go user rank two equals score. And nowhere in Python, we can do the same exact thing, just first wrap our algorithm here into a method was called score. And do that and then now we need to select the entire algorithm, and then hit the tab button. So that is all within the code block for a score. And then because it's a method, hopefully something broke here, what broke here. Now I'm not entirely sure what happened here. But to fix this, we simply just add a tab fix the syntax, error disappears. Perfect. Next, we'll add back in our temp variable. Let's just initialized this temp equals zero. And then was replace all the user ranks with temp. I'm just gonna copy and paste because I am pretty lazy right now. temp, temp, temp, temp, temp, to temp. And then at last we just come out I think this is it. Return tip seven double check, this is the right place to put it. Yes, it is. Now again, because this is Python, this method isn't that useful for compression, again as to be in that sweet spot. But we can get our user ranking simply by calling user rank and then assigning score to it. And so now to prove to you that these do exactly as I say they do, over here in C sharp and left, I'm just gonna copy and paste this right line, because I'm lazy, then added to there. And then we have read key. So now I'm gonna hit the start button. And then I'm gonna bring the window over. And you can see that we have 49 and 49. And to prove the same thing to you in Python, I'm just gonna initialize a new user rank here, use rank two, and that also equals score two. So we have the same exact scenario. And then we're praying user rank two. And then I'm gonna hit the play button up here, you see we have 49, and 49. And yeah, there you have it. If you want to learn more about methods, I think the best thing that you can do is just to start using them more, because you'll learn more about them in the process. But that is everything that you need to get started with programming in regards to methods, functions functions, let's step into the wonderful world of functions. Now I'll just go on record saying this functions are hands down the most valuable tool to program. Now, why is that? Well, functions share a lot of commonality with methods for they allow you to be able to reuse code giving you the ability to write more neat and nice code, which in effect makes it easier to read giving you a better grasp on your code. But the advantage that functions have over methods is that you can pass in data and slightly alter the code that is ran within a function making them extremely powerful. So for example, say you have an inventory class that can hold four items and you want to remove the items. Well, instead of creating four different methods that you can call to remove the for various items, inventory dot remove item one, inventory dot remove item two, so on and so forth. That will all run the same exact code minus may be a variable or two with functions you can pass in, for example, the item number and using the same code can remove that item. Now talking about the theory of functions is great and all but let's take a look at how to use functions practically with code because I promise this will become so much easier to understand. And we're going to do this using two different languages because I think it can be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is the language C sharp using the ID Visual Studio, which should interest you if you want to do windows development or make games using a popular game engine called unity. And on the right is language Python three using the IEEE Visual Studio code which should interest you if you want to get into more general programming or data science. Alright, so here I have two brand new console projects and if you don't how to make a new console project and either C sharp or Python or both. Be sure to check out the video in the description. And it's called How to install an ad. And at the end of that video, I'll show you how to do that Paul Wright, who's ready to have some fun with some functions. Now before we can do that, we need to go over the syntax for functions in both C sharp and Python over on the left and C sharp, I'm going to get rid of these two lines, they come standard with every new console project, but I don't need them. And then in this code block, I'm going to initialize a function, which, if you're familiar at all, with methods, this is going to seem very familiar to you, I'm just going to type out void, and then the name of our function, which is called F for now, and then start in parentheses. Now, if you're familiar at all, with methods, you're probably looking at this and you're like, Wait a second, that's just the method what's going on here. And yes, you're right methods and functions have a lot of overlap. But what makes functions super cool and extremely useful is that you can pass in some input. So if I type in right here, if I initialize an int, and then I'm a call this x, for f of x, that's a standard notation for functions, I can now make my code block here. And we can do something with this input within the code block. For example, let's say that we want to take our input x, and we simply just want to times it by two. So I'll use the multiplication operator and then times it by two. And then to see this change, let's come down here and add a console dot write line just to print to the console. And then we're going to put in here our x variable. Well, now we can do something cool with this function, if I just come to the beginning of the script, and then I'm going to initialize an integer, I'm going to call it, I don't know my number, for example. And then let's make it nine. And so now I just want to call F and then pass in my number, which is nine. And what it's going to do is it's going to take my number in this function, and then here is just going to times by two and printed out. And to prove that to you, I'm going to come right underneath our function and add a console dot read key, so that the terminal doesn't close on us. As soon as we run it, hit the start button, and our terminals over here. And you see that nine times two does in fact, equal weighting. Now in Python, the syntax is a bit different. I'm just gonna start off by initializing our integer, my num, assign a nine to it. And then our, our function has to come before we actually call it. So I'm going to initialize that, first, I'm gonna say def, with the name F, and then we're in past nine input x, and then I'm using a colon here, go down into the code block, and then I'm going to do X times equals to no different than what we did in C sharp, and then simply just print out whatever x is, then lastly, we can just call our f function by saying F and then passing in my num, knowing my num when I do my num, and there you have it, I'm gonna press the play button just to prove to you this works. And bada boom, you see the web 18. Now, we just barely scratched the surface with functions. But hopefully, you can already see how much power we have with just this very simple example. Allow me to show you one more example. Before we move on. Imagine that we have a list of names and we want to add Mr. or Mrs to the beginning of those names, well, we can simply get rid of this integer no longer need that. What else do we don't need, we actually don't need this function anymore. So we don't need this will keep the console actually let's just get rid of the whole entire program and start over from scratch and do the same for Python. So let's initialize a string array. Let's call it a name. And then that equals a new string array of size. Let's Let's initialize sizes to make it simple. And then we can come in here and manually set the variables within our array. So I'll do zero equals, let's say his name is Johnny. And then let's say that name of element one is equal to Carla. And then name of element two is equal to let's just say that Zack, and I suppose Zack, thank you. So now let's write out our function that will do this process for us. I'm going to come down here and I'm going to do a void and then let's call it surname, I believe they're surnames. And then we can pass in. Let's see, a string and this is going to be It was called sir as the variable. And so now we can do down here name of zero equals sir, plus name of zero. And then of course, let's let's print this out so that we can see what's going on console dot write line. So what I'm looking for, and we can print out name of zero. Come on, there we are. And then we can call our surname here. And then let's pass in Mr. Mr with the space there. And then of course, console dot read key. So a terminal doesn't close on us. Also, I'm just going to write right here, just because it's fun to make the distinction that our program is here. And so I went ahead and wrote out the program in Python, so you don't have to sit and listen to my silence for a couple of minutes. But it does the same exact thing. We have the nameless here that is initialized with Johnny Carla and Zach in it. And then we initialize our surname function that takes the input of sir. And we essentially just assign sir, plus the name of element zero, to name velleman, zero, so we essentially reassign it, and then we print it out. And here is when we call the actual function itself. And so if I just come up here to the play button and press it, you can see that again, we have Mr. Johnny except for I put the period in the wrong spot supposed to go there, press it again, bada boom. Alright, cool. So now we have a surname function that adds a certain name to our names, however, we have three names. And I really don't want to have to write three different functions just to do this. Well, thankfully, we don't have to, thanks to this next feature that further makes functions even more powerful. So there is no real limit on how many inputs we can pass in with our function. And at the fact that we're using an array here, we can just pass an integer to change whatever element in the name array that we want. And so to do that, I'm just going to add an integer variable at the beginning here, we'll call it, I'm just calling ind for index. And then we can simply just replace this zero here with ind whatever, integer we pass in i n d again, and then i n d. And lastly, we just come up here and then just pass in the zero. So we want to change the zero element in the name array, which corresponds to Johnny run that again, by hitting the play button at the top here, bring the console window over, and you can see nothing has changed. And so now that we have this add to flexibility, I can simply take this line, and copy and paste, copy and paste, copy and paste, and just change the index to one which is Carla, and two, which is Zack. And of course, Carla is not a mystery. So we can change that to a message here. And when we run this, it's going to print out all three of them. So I'll just press the play button again, and bring the window over. And would you look at that, and Mr. Johnny, Mrs. Carla and Mr. Zack function is working perfectly. And over in Python, we can do the same exact thing. So I'm gonna pass in an input variable here called ind again, separate them with the comma that's important for both syntaxes separate your variables with commas. And then we can replace all of the element numbers here with ind, and then just pass an integer in when we call the function we get there. Right here. So Mr. Zero. And then of course, we can do copy, paste, paste. And then one and two. Carlos misses the Save button clears all errors, then hit the play button. And would you look at that Mr. Johnny, Mrs. Carla, and Mr. Zack, I'll never stop saying this. But functions are the greatest thing there is high love functions. And if you think that it stops there. Well, you're in for a bit of a surprise. But first, let me introduce a problem to you say that we want to come down to the bottom of our program and initialize a new string, right? And the name here. Let's just say this is the boss's name, and it equals Helen. And now what if we wanted to add a surname to Helens name? Well, because this surname function is directly tied to the name array. We kind of can't at the moment, I mean, of course, we could just come in here and just add it manually, Mrs. Helen, or we could remove this and then just come down to the next line and do something like bossy cool. What is it Mrs. Plus boss here. And then we also want to do a console dot Yeah, we could redo the same code over if we really wanted to imagine that you were doing this as an automated task, well, you wouldn't want to manually go and add the surname to all the names that you have. And you wouldn't really want to rewrite the code over and over and over. And so the solution to this problem is by changing this function from being a variable dependent function into a variable, independent function, and we can do that by using the return statement. And so to do that, first I'm gonna get rid of these two lines, because they're just for an example. And then I'm gonna go into our surname function, and we're going to return a string. So I'll initialize a string, I'll call it temp, and then I'll sign it to be an empty string for now. And now we have to replace all of the variable references to the name array into the temp, because this is what makes this function variable dependent. So I'm gonna change this here to temp. And then I will change this one to temp as well. And then I'm gonna change this here to temp. And actually, because we need an input with the original name is we actually don't need to initialize this here. So I'm going to get rid of that line. And we can now change our integer variable input into a string variable input and call it temp. And so the very last thing we need to do here is we need to change the data type of our function from a void to be a string. And then you'll see we get an error saying that it doesn't return a value. When you cast the data type on your functions, they have to return the same type of data type in the return. So we'll go down here and add, return and temp is a string. So we'll just return back the temp which has been modified with sir at the beginning. And so now because we change the input to surname from the data type integer to string, you can see that we have three errors here. For the times that we called it, these are currently integers, they need to be strings, which is no problem, we can just input the actual name that we want to change here. So of course, the first one is name of element zero, and I'm lazy. So I'm gonna copy and paste this, paste and paste and change this to one and two, which again corresponds here. And if I just hit save, and then the Start button up here, and then bring the console, you can see that absolutely nothing has changed function works exactly the same. However, the very last thing that we have to do to make this completely functional is, again, right here, it's printing out the temp, so this is only temporary, we get a reference to that, and then we change it and then we return it. But you can see here that's that's not being assigned to anything. So that's the final thing that we have to do here. But before we do to further illustrate my point, I'll simply come at the bottom here and do a console dot write line. And then we're going to print out name zero, and then I will copy paste few times because I'm lazy, changed to one in two. And so if I come up here and hit the start button and bring the console and over you can see that yes the certain names are added for the first three which is what is inside the actual surname function. But the last three that were printed which is outside the surname function is the actual ground truth to are named of zero element name of one element and name of two elements are still the same exact as we initialized it. And so to fix this, we simply just have to assign it whatever is being returned right here. So name of zero equal surname with the inputs and name of one equal surname with the inputs and name have to equal surname with the inputs come up here hit the start button, bring the window over and you can see that they have actually been assigned. And just to walk you through what's going on here. On these three right here we will assign that name of zero element name of one element name with two element will equal surname with some inputs. And so we go into the function and we pass in the inputs. temp, which is the actual name at the moment and then surname is a name that we want to add to the beginning of the name and so we will assign the surname to the beginning of the name and then we will print that out and then we will return temp. And so because this whole function right here, is returned with the value whatever temp is which again is calculated here, we will assign that return value to name of element zero named value one and name of L admit to. And now at last to bring it full circle. Now that we have this flexible variable independent function surname, we can initialize our boss string here, which equals Helen, and simply just reassign it by going boss equals surname. And then we're going to pass in boss here. And we can pass in Mrs. And as simple as that. And just to prove it to you, I'm going to get rid of these three lines, make it a bit less confusing, hit the star button and bring the window over. And as you can see, we have Mr. Johnny, Mrs. Carla, Mr. Zack, and at the very end, Mrs. Helen. Now that is how you write good code. And so we're in Python, we can make this change really easily as well, we can simply just change this to say temp, and then change this as well to say temp, and then change this one to say temp. And of course, we want to change our input to be temp, oops, and then come down here. And then we want to assign this to be name of zero, and then this one to be named one. And then this one to be named to. Of course, and then we need to assign this here name of zero equals surname with these inputs, and then name of one equals surname with those inputs, and then I'm lazy. So I'm gonna copy and paste the last one change that to name a surname equals the last of those inputs. And of course, I'm getting an error here. It's saying that assigned to a function which doesn't return, I forgot to return here. So we're simply just do return tip. And then of course, we can't forget our boss, Helen. So we can initialize that by saying boss equals surname. And because we're initializing this, we simply just pass in Helen. Like so. And then Mrs. can come up here, hit the play button. And voila, Mr. Johnny, Mrs. Carla, Mr. Zack and Mrs. Helen functions are just absolutely incredible. I love these things. We barely scratched the surface with what's possible with functions here. But hopefully, your creative juices are flowing in, you're thinking of different ways on how you might be able to apply a function. I've said it before. And I'll go on record saying that, again, functions are probably the most powerful tool when it comes to programming. In fact, if you're familiar at all, with all the breakthrough research that's happening in the field of machine learning, well, it's all powered by functions. So I hope I was helpful for getting you excited about some functions. But that's everything you need to know to get started with programming in regards to functions. Now, commenting can be a make or break for your coding success, especially if you're working on a team on an open source project or on a project, you plan to work on long term comments, just as you expect our way to leave comments within your code in a human readable format, so that you know what's going on in different parts of your code. At all times, sometimes you'll write out extremely complicated code that makes perfect sense in the moment. But when you return to that code months later, or give it to someone else, so they can add on to it, it may be really difficult or a ton of wasted time trying to reverse engineer the code. So let's take a look at how to use commenting in two different languages. Because I think it can be really helpful for you to see how they compare and contrast. And plus, you'll pretty much learn two languages at once. So on the left is the language C sharp using the ID Visual Studio, which should interest you if you want to do windows development or make games using a popular game engine called unity. And on the right is the language Python three using the ID Visual Studio code, which should interest you if you want to get into more general programming or data science. Alright, so here I have two brand new console projects. And if you don't know how to make a new console project, neither C sharp or Python or both, be sure to check out the video in the description. It's called How to install an ID. And at the end of that video, I'll show you how to do that. Alright, so the first thing I want to go over is line commenting. So over in C sharp and left, I'm just going to remove these two lines that come stock with every new C sharp project. And I'm going to start creating a little fake project. So I'm going to initialize a couple of floats. We'll call this location x is going to do one 2.345 F and then we'll do another one float location y and we'll do 123 point 456 All right. Oh f Sorry. Alright, so these variables are just going to act as fate coordinates for and lo example. So I'm gonna create a more involved Boolean, I'm gonna say bull in oops, in position, let's say in pause equals, and let's do location x is greater than, I don't know, let's just say 12. Right. And then we'll also check if, if location, y is less than 30, for example. But then outside of that, we'll also check, or if I'm about to go off screen here, I'll scoot over, or if location, x is greater than location, y, and then we'll put a semicolon. And now we have a more involved bullying. Alright, so here, we have maybe one of the greatest examples of how line commenting is pretty useful, or it can be pretty useful. Rather, I'm going to go on top of our bullying here, and I'm just going to do forward slash forward slash, and that right there, it starts our comment, and we can write whatever we want. So I'm just going to do my best to explain what this Boolean does. So if location, x is greater, is greater than 12, and 12. And location why why is is greater, no less than, less than 30. Or if location x, x is greater than location, y, y, then we are in position. Sorry, it's a bit long, and it doesn't exactly fit with the rest of the code. But that is how you write a line comment. And the way it works is when your code is compiled, anytime that the compiler sees a double forward slash, it knows to ignore everything after it. So just pretty much will go to the next line. And over in Python, it's a lot of the same, I'm just going to do loke oops, loke x equals one 2.345. And look, y equals one 2.412 3.456. And then I'm going to do in pause equals, let's see loake x is greater than 12. And what is the loq? Why is less than 30? Hmm. Or we have look loq already forgot x is greater than x is greater than look Why? Boy, that was brutal. And to add our comment, I'm just gonna come over here above our in position variable. And instead of doing forward slash forward slash, that form of currency is not accepted in Python, I'm going to hit the pound sign or the hashtag, whatever you call it, and then I was going to write out our message. So I'm not going to write it because that's going to take forever again, I'm going to copy it from here and then paste it. And there we go. Comments, and comment. Sorry, I just realized the Python font should probably be a bit bigger. So I'm just gonna make that a bit bigger. Yeah. So that's one use case for line commenting probably one of the most useful cases for line commenting, however, you can do something else as well. So let's say that, you know, we try out this Boolean and it just isn't working right for for whatever reason, well, we can do a line comment on everything after the assignment operator, and then just put, like, for example, equals one, just to make sure that oops, we actually need to put my true here, just to make sure that this Boolean is actually working, just for example, and then in Python, it's all the same, use the hash tag, everything after that it's ignored, and you just put true oops, true. Oops, no semi colon. And Yep, that's another use case, that can be quite handy as well when debugging your code. And so the final use case I want to show you with line commenting is let's say that we're going to return these back to that assignment. And let's come down here. And then let's add an if statement. So if in position, right, we want something to happen. However, we don't exactly know what we want to happen yet. We have an idea maybe maybe we don't know how to do it. Maybe you want someone else to do it. Well, what we can do here is just add a comment. on like, here, I want to display something, you know, some notification, I don't know, I just want to display something here. And you can leave this comment here, maybe come back to it later, maybe give it to a friend, maybe do some research and then you know, learn how to do it and then implement it. This comment is just an easy way for you to, you know, know what your intent was with putting this if statement there. And in Python, it's really similar, but a little different. So let's say we do our if statement, if in position, we'll come down here, we can write our comment, which was, again, copy and paste, copy, paste. However, we can't leave it like this, you see, if we had saved, we will have a problem, which is, we have a parsing error, a syntax error, rather. And the reason is, because if you do if you do an if statement, and then you indent, which you have to do, there's there's nothing when it runs as if statement, it's not going to run anything. And that's a syntax error in Python. So we can just simply put, like print, you know, zero, for instance, just so that it clears that syntax error. And technically speaking, you don't even have to do a print, for example, you can just do like empty quotes, whoops, you can do like empty quotes. And that will work just the same, but it has to run something within the indentation. Because again, this line is ignored. Alright, so that was line commenting. Next, I want to talk about block commenting. So to demonstrate, I'm going to get rid of all this code that we just did. And then oops, yeah. And then I'm going to, let's just say that you're creating some like, complex algorithm that you quite understand, but you kind of don't understand. So I'm just gonna create something, it was just a representation for an advanced algorithm, just use your imagination. Let's do loq y, divided by equals four, right? And then we need to return it or something like that. So we'll do local New equals loake y divided by loquax. For example, oh, I have to initialize that this is not Python floats. And then finally, let's just return it. Let's do. Let's do this console. Oops, console dot write line. Right? line, location, new. All right. So let's just say this is some advanced algorithm, and you just implement it in your program. But all of a sudden, like everything's broken, nothing works anymore. You're like, what's going on? This isn't behavior that I expect, I know that this is working, right. This is obviously, you know, very straightforward. But maybe this part of the algorithm isn't working right. Now, you could, you know, go by and do like, you know, forward slash forward slash forward slash four slash. And if you have a bunch of these do that line by line. But one really convenient ways use block coming, which in C sharp is just one forward slash, and then an asterick. And the after ended doing the opposite, so an Asterix and then one forward slash, and that is one way that you can quickly comment a whole block of code. Now one really important thing to take note of a block commenting is that you have to have a start, and you have to have an end. Because if you don't have an end, what happens here is that it comments out everything after it including the brackets. And if the brackets has a start, but doesn't have an end, you're going to get a bunch of errors. So they all I always have to have a start, and they always have to have and now in Python, I'm just going to replicate our super advanced algorithm here, I'm going to do loake x times equals two and then loake y divided by equals four. And then we're going to do loake nu equals loake y divided by loake. x, then we'll just print it because why not look new. And to add block commenting in Python, it's similar, but also very different. And what I mean by that is you want to come up to above or if you want to do your block, comment and just do three single quotes. And again, it needs a start and he needs a finish. If you do not have a finish, you are going to get a syntax error, because it needs a start and a finish for the triple quoted string literal, aka the block comment. Now the very last type of comment that I want to go over is summary commenting. So to demonstrate, I'm just going to get rid of All this code is no longer needed. And then I'm just going to initialize a float variables, call it loke equals zero, for example. Next, let's create a quick little function, I'm going to go outside of our main function and then do static float. Let's call it ret, one. And then let's, let's pass in a float, and then we'll call our float a sum, make it easy. And then what we're going to do is we're going to return a, let's see a plus one. That's what we're going to return. And then let's just use it real quick. So we'll do loke equals rat one, and then we'll just pass in itself. So it's going to plus one to itself. And just to prove that we'll do console dot write line, even though it's not about proving in this, it's really about comments, but we'll just do that anyway. Console dot read key. And then I will hit the play button. And boom, there we go. Zero plus one equals one. So our function works. But let's say that you know, it's later down the line in your project, and you come back to the script to upgrade or fix something, you see that Loki goes right one, what does that do, and you go down to the read one function. And let's say this is a lot more complex, you don't really understand what's going on. Well, you might waste a lot of time reverse engineering to figure out what that function is. But what SOT what can solve that is by adding a summary comment. So adding summary comments in C sharp is actually really easy. All you have to do is go right above whatever function that you want to add a summary to or method and just hit backslash, backslash backslash, it will autocomplete if you're in Visual Studio, meaning just fill in whatever your your summary is. So I'm going to do plus one to the input. Now, if I go over the red one, you'll see that now there's a little description there. And it tells me exactly where does it pluses, one, two, whatever the input is, the input is Loke. So it's going to be local plus one is what it's going to return. Simple, easy, and to the point. And they also have some other variables that you can fill in, you can fill in like whatever the parameter A is, you can put out what that is for you can put out whatever returns, and in the right context, it will display that information for you as well. And over in Python, I'm just going to get rid of everything and set up our scenario real quick. So loke equals zero doing a do def read one, and then we need our a input. And then let's see return, whoops, return a plus one. And then we just simply do loke equals what is the right one, and then pass in Loke. And then we can print low out, and then we don't need a input. And just to prove that it works, I'm going to hit play up here and you see that we have a one. Now to add summary comments to Python methods and functions, all you have to do is go right under the method or function in Python, and then hit three single quote characters, and then another one. So you pretty much block comment. And then you just type whatever the function is. I'm just gonna pop copy this because I'm lazy. And then I'm going to paste it here. And so now if we go over here, it shows you what it does definition red one, it pluses one to the user, I'm sorry, to the input. And then we can add more if you want like a equals, you know, float, for instance, just more information for the user. And that's pretty much all there is to it. And there you have it, guys, that is pretty much everything you need to know to get started with programming in terms of comedy. Well, all right, congratulations, you fully made it through the course. Now, how do you think you did? If you really aren't sure, you should go back to the your first program lesson section four and retry it on a different tier. If you're able to complete your first program on his hardest difficulty, then you know, you are officially ready to go out into the world to find your own problems to solve and code up your own ideas with your new found skill. But before I let you go completely, I just want to pump you with some inspiration on the cool possibilities that you can take with this skill from here with more practice of course, but I just want you to think about everything you do these days. Just think about the fact that almost everything you interact with in this new digital age is some way determined by code online banking, offline banking, text messaging, tweeting, watching this very YouTube video even driving your smart car now or using your smart toothbrush. Lock your home with your Smart Lock or even using yourself Smart thermometer, the list goes on and on and on. And of course, From this day on that list is only going to grow larger. Our world is becoming more and more dependent on programs running the show, which is a whole other conversation. But again, congrats because you at least now have what it takes to better understand and contribute to that landscape. I wish you and your coding adventures nothing with the best. And the last thing I want to leave you with is this bit of advice. You're guaranteed to do amazing things with code so long as you follow this final rule. Remember to always feed your curiosity.
