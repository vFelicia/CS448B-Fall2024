With timestamps:

00:00 - hey everyone I'm Cody Seibert and
00:01 - welcome to a full-stack tutorial where
00:03 - I'm going to show you how to build a
00:05 - front-end single page application using
00:07 - view Jas and also using view X as our
00:11 - state store and then that's going to
00:13 - connect to a back-end written in Adonis
00:15 - Jas basically to create our REST API and
00:19 - then I'm going to deploy this on
00:20 - digitalocean after we finish and so let
00:23 - me just show you really quick what I'm
00:24 - going to be building basically it's a
00:26 - very simple to-do list application
00:28 - whoo-hoo in the left we have projects so
00:31 - we can click different projects here to
00:32 - change we can create projects edit them
00:37 - and delete them
00:41 - and then for each project we can create
00:43 - different tasks and that also marked
00:46 - them as completed go ahead and delete
00:50 - some edits um or of course you can log
00:54 - out and then you can log back in
00:57 - so a very very simple application
01:00 - hopefully this is a good start just kind
01:02 - of explain the concepts of view in Adana
01:06 - so let's just go ahead and get started
01:07 - building out this application alright so
01:09 - now that we know what we're trying to
01:10 - build let's go ahead and create a new
01:12 - repository so on my github account and
01:14 - click new this is her people who don't
01:17 - know how to create a repo so I'm gonna
01:19 - name the repo view adonis to do go ahead
01:24 - make that MIT and I'll create that repo
01:28 - once my repo was created and I was gonna
01:31 - go ahead and click this clone or
01:32 - download and then copy this to my
01:34 - clipboard then in my terminal of es code
01:38 - I'm going to go into my workspace I'm
01:40 - gonna do git clone and type in that repo
01:42 - URL
01:44 - and go ahead and just CD into that
01:48 - folder in fact I should probably open
01:50 - the folder here in my workspace so for
01:54 - this tutorial I'm going to split it up
01:56 - into two major sections the first
01:57 - section I'm going to focus on building
01:59 - out the rest api using Adonis J s and
02:02 - then the second section I'm going to be
02:04 - connecting to that rest api using view
02:06 - J's for the front end so if you're not
02:09 - really interested in learning how to use
02:10 - a dentist to build a REST API feel free
02:12 - to skip forward to the second section
02:14 - and I'll put a timestamp in the
02:16 - description below
02:17 - so again we're using Adonis J s to build
02:20 - out our REST API and basically that is a
02:23 - label clone an MVC framework for
02:27 - building up websites I'm not going to go
02:29 - into too much detail on the docs or
02:31 - explain all the different features and
02:32 - functionality instead what I want to do
02:34 - is just use it explain the things that
02:37 - I'm doing as I'm doing them and then
02:39 - leave it up to you to learn more about
02:41 - the framework in the future so to start
02:44 - using a donis let's go ahead and go to
02:45 - their website and just look at the
02:47 - installation section
02:49 - basically to get started they say you
02:52 - need to install a global adonis CLI tool
02:55 - which i already have installed so i'm
02:57 - not going to run this command and then
02:59 - after you run the command you can do
03:00 - Adonis help to get an information about
03:02 - what you can run with the CLI let's go
03:05 - ahead and do that so if I do with
03:06 - Donna's - - help it's going to print out
03:10 - all the different commands we can run an
03:12 - Adonis now when you're starting off with
03:15 - a new project the most important command
03:17 - would be obviously is the new command
03:18 - right so we're gonna do ad honest new -
03:21 - - help to get more information on that
03:23 - command if you see here we can pass
03:27 - something called API only and that's
03:28 - kind of what we're gonna be using for
03:30 - this because we don't care about
03:31 - rendering views and stuff on the backend
03:34 - and we're going to be using View j/s on
03:36 - the front end with that being said let's
03:38 - just do ad honest new type in the name
03:40 - of our project and in this case I'm just
03:43 - gonna do server I like to separate my
03:44 - server code from my client code and then
03:47 - I'm going to pass that API only flag and
03:49 - as this is running it's going to create
03:52 - a bunch of different files in our server
03:53 - folder
03:55 - and give us a very bare-bones Adonis
03:57 - setup which we can start running and
03:59 - developing or rest API so now that of
04:02 - the Adonis CLI is done creating a new
04:04 - project let's go ahead and look at a
04:06 - important command that we can use for
04:08 - starting or serving our server so again
04:11 - if we do Adonis - - help it'll tell us
04:13 - all the commands and then notice that
04:16 - there is a serve man which starts our
04:19 - HTTP server well do Adonis serve like a
04:22 - knife and help and we have additional
04:25 - options that we can use in the most
04:26 - important one is - - dev to start a
04:28 - local dev server so I'm going to Adonis
04:30 - serve I can - dev and of course make
04:35 - sure you're in the server folder got the
04:37 - CD into that and I'll rerun that command
04:39 - and after this runs it's going to host a
04:42 - server on port 3 3 3 3 if I go to my
04:46 - terminal or go to my chrome and go to
04:49 - localhost 3 3 3 3 notice that we get a
04:53 - JSON response back from our donna server
04:55 - so we're good to go we have it done is
04:56 - set up and we have it running another
04:59 - cool thing I'll state about this donna
05:02 - surf command is that as you edit your JS
05:04 - files and save them it's going to
05:07 - restart your server for you
05:08 - automatically so it's kind of using like
05:09 - no daman behind the scenes we're just
05:11 - watches your files and restarts them so
05:14 - before we get too much further into this
05:16 - tutorial let's go ahead and commit what
05:17 - we have I want to say initial Adonis
05:21 - setup
05:23 - so at this point let me just go ahead
05:24 - and give a quick overview on some of the
05:26 - files that are generated I'm not gonna
05:27 - go over all these files I'm just going
05:29 - to focus on the ones we need to
05:30 - implement our functionality and then we
05:32 - can kind of cover more as time
05:34 - progresses so the first one we want to
05:36 - cover is inside the Start folder there
05:38 - is a file called a RAL CAS and basically
05:42 - this file is for declaring your routes
05:44 - so I mean it looks very similar to
05:46 - Express or Cola or happy where you have
05:48 - a router object you give it a command
05:50 - such as git postally patch whatever you
05:54 - pass it a URL and then you pass a
05:55 - callback function though nothing too new
05:58 - here second file or folder I want to
06:02 - show is inside the app folder by default
06:04 - we're giving a models folder which has a
06:06 - user J's model
06:09 - so if we look at this basically we're
06:11 - declaring a lucid model which has a hook
06:16 - attached to it so before we create a
06:18 - user model we're going to hash the
06:22 - password
06:23 - and then at the end we just return that
06:25 - model so nothing to do insane here and
06:29 - then inside the hooks folder we have
06:30 - that user J s file which declares that
06:33 - hash password hook go in here basically
06:37 - we say if the user instance has a
06:38 - password attribute we're just gonna hash
06:41 - it and then put it back into the past
06:43 - before we save this model and so for
06:47 - those of you who aren't really familiar
06:48 - with the hell-like or ORM does work
06:50 - typically there's a bunch of hooks that
06:52 - exist around models like before you
06:54 - update them before you create them
06:56 - before you save them that you can kind
06:58 - of attach callback functions to let
07:01 - manipulate your data before it actually
07:02 - hits your database mmm and this thing
07:05 - with like getting data you could do a
07:06 - hook before you fetch the data or app
07:08 - you fetch the data to manipulate the
07:10 - data inside your models so I'm not going
07:13 - to dive too much into hooks or that type
07:15 - of stuff feel free to look at the docs
07:16 - if you want more information but the
07:19 - main takeaway is we have by default a
07:21 - user model
07:24 - so you'll notice here there's no
07:26 - attributes so associated with this user
07:28 - model inside this file and that's
07:30 - because if we go back and look at the
07:32 - database folder there are a migrations
07:35 - folder which has a user J's migration in
07:39 - it so inside here this is where we
07:41 - declare what properties should be
07:42 - associated with the users table
07:44 - so basically when we run our migration
07:46 - scripts it's going to create a user's
07:47 - table it's going to give it a user name
07:49 - email and password
07:51 - and then if we were to roll back our
07:53 - migrations just gonna drop this table
07:55 - alright so another quick quick recap we
07:57 - have a routes file where you declare
07:58 - your routes we have a models folder
08:01 - where you declare your models and then
08:03 - you declare your tables that will be
08:05 - associated with that model in your
08:08 - migration scripts alright so now that we
08:10 - kind of glossed over some of the files
08:12 - and folders that are included in the
08:13 - adonis CLI new projects let's go ahead
08:17 - and get started on trying to implement
08:19 - some functionality so the first thing I
08:20 - want to do with our to-do list tutorial
08:23 - application is I want the ability for
08:26 - users to register new users or new
08:29 - accounts so how would we do this
08:31 - obviously the first thing we want to do
08:33 - is create a new endpoint or new route
08:35 - where they can hit with a post request
08:37 - to create a new account if I go to the
08:40 - Start folder and go back to my routes
08:42 - ijs file inside here we can simply do or
08:45 - route dot post because we're doing a
08:47 - post request and then we can do
08:50 - something like off slash register and
08:56 - some type of callback function and it's
09:01 - I'm just going to return another hello
09:04 - world message just to kind of
09:06 - demonstrate what's going on so if I were
09:08 - to save this file and then go to another
09:11 - app that I have installed a running
09:13 - called postman we can make example
09:16 - requests to our API just to test it out
09:18 - so remember our endpoint is off slash
09:20 - register it needs a post request so if
09:23 - we go to postman which is here this is
09:27 - on the post main app it's really useful
09:29 - for testing your REST API s we type in
09:32 - the location of that URL auth slash
09:37 - register and I tell it to do a post
09:39 - request and I give it to a body in fact
09:42 - I don't think I even need to give it a
09:43 - body so I'll just go go ahead and click
09:45 - send notice that it sends back our hello
09:48 - world message so we created a register
09:50 - endpoint that returns a message awesome
09:52 - first steps are completed so for the
09:54 - second step we instead want to put our
09:58 - callback logic in a controller and not
10:01 - have it all defined in one file of Rous
10:03 - jeaious so if we were to go to our
10:07 - second terminal and remember that we
10:10 - have all these useful commands which we
10:12 - can use to run and create our Adonis app
10:15 - one of the commands is make controller
10:18 - so if I do add honest make controller
10:21 - help get more information on that
10:26 - basically a week and run is honest make
10:28 - controller ass at the name of our
10:30 - controller which in this case I'm just
10:31 - going to say a user and that will create
10:34 - a controller file inside the again make
10:38 - sure I'm in the server folder keep
10:40 - reading to do that well first of all
10:43 - that's going to ask if you want it to be
10:45 - a WebSocket channel or an HTTP request
10:47 - I'm gonna say HTTP request and notice
10:50 - that it's going to create a app dot
10:51 - controllers folder HTTP controllers file
10:56 - here so let's go ahead and look at that
11:01 - file and see what it created
11:04 - is just a simple JavaScript class
11:06 - nothing too special here but what we
11:09 - want to do is we want to define methods
11:12 - in this class so in this case we're
11:14 - going to say register and let's return
11:17 - that hello world message
11:23 - you
11:25 - and then to bind that to one of our out
11:28 - so we simply go back to our routes file
11:29 - and then instead of passing the callback
11:32 - function here we can just say user
11:34 - controller dot register
11:42 - so again let me save that file and go
11:44 - back to my first terminal just to make
11:47 - sure that the server restarted and then
11:49 - if I go back to post man and click send
11:50 - we get that same response back main
11:53 - difference is we're just binding to the
11:55 - controller file and then more
11:57 - specifically to the action or method
11:59 - that's declared inside that controller
12:01 - class so before we get too ahead of
12:04 - ourselves let's go ahead and do a little
12:05 - bit cleanup so first of all I'm gonna
12:06 - remove this get request method because
12:08 - we're not gonna be using that so another
12:10 - cool thing adonus has is you have the
12:11 - ability to group routes with a prefix so
12:14 - let's say I wanted to append slash API
12:17 - in front of all these different routes
12:18 - that I had so if you imagine I had like
12:19 - 10 different routes and I want to app in
12:21 - API to all of them you could do it this
12:24 - way where you have a bunch of copy and
12:25 - paste like URLs with the same prefix
12:29 - or one way to do it is I just simply do
12:31 - route group asset a callback function
12:34 - put my route in
12:37 - and then after the group you just say
12:39 - prefix with API so now when I save that
12:44 - I try to hit the route that we had
12:46 - before it's going to return an error but
12:48 - now I can actually hit it with the API
12:50 - prefix
12:54 - so that's pretty cool and then you know
12:56 - sometimes you want to have different
12:57 - versions so this might be version zero
12:59 - and then down the road a year from now
13:01 - let's say you need a version one that
13:02 - get deployed you just saying change that
13:04 - to be one and then you have all of your
13:06 - different routes for the v1 here let's
13:10 - go ahead and try to get back on track so
13:12 - what were we originally doing we are
13:14 - trying to create a new register in point
13:16 - where we could pass in an email and a
13:17 - password in the payload and then have
13:20 - that created in our database so let me
13:23 - just go ahead and remove b0 because I'm
13:24 - not going to be using that in this
13:25 - tutorial and then if I go to my user
13:28 - controller what we want to do is we want
13:31 - to be able to grab the request body that
13:34 - was sent in so as an example if I were
13:36 - to post some JSON to the endpoint so if
13:40 - you see here we have an email and a
13:41 - password sent we should be able to use
13:45 - that in our controller so the do so
13:49 - let's go ahead and first grab that
13:51 - request object which is available using
13:53 - object deconstruction here
13:56 - and then inside this we can go ahead and
13:58 - pull out the email in the password again
14:01 - using object deconstruction from request
14:04 - all so requests out all is going to grab
14:07 - and merge our query string parameters
14:10 - together with our post to payload body
14:12 - and then we have the ability to grab the
14:14 - properties like so and again we're just
14:17 - going to print these out and just make
14:18 - sure that everything is working as
14:19 - expected so if I do that post request I
14:23 - go back to my terminal I see that
14:25 - testing and the password is printed out
14:28 - to our terminal so we grabbed the
14:30 - parameters or the payload body
14:32 - successfully using something like this
14:35 - the next step - how would we register a
14:38 - user is we need to use the lucid model
14:43 - to create and persist a new user to the
14:47 - database so to get started on that let's
14:49 - go ahead and include that user model and
14:52 - then inside a dantas there's a keyword
14:55 - called use so instead of user and
14:57 - require they recommend you use the
14:58 - keyboard to use and that's just because
15:01 - this the inverse of controller method
15:06 - that they're using allows you to easily
15:07 - mock out and fake these during your
15:09 - testing another cool thing is you can
15:13 - just do the relative you don't have to
15:15 - do like dot slashes your relative paths
15:17 - to your file to get this to work instead
15:21 - we can just do the absolute path so app
15:23 - dot models dot user so that's going to
15:28 - grab the app models dot user file here
15:33 - which is a lucid model
15:35 - and now that we have that model we could
15:37 - simply just do user dot create asset the
15:41 - email ask the password and then of
15:44 - course we also declared something else
15:46 - called a username which we're going to
15:48 - be setting to the password in this case
15:50 - and we need to just at the end return
15:53 - the user so one thing I'll notice or
15:56 - I'll point out is that these are
15:58 - typically async methods so dot create or
16:00 - save or whatnot so in order to
16:03 - successfully use them you need to make
16:04 - sure you put a weight in front and of
16:06 - course in order to use a weight you need
16:08 - to make sure you use the keyword is
16:10 - async in front of your method so now if
16:14 - I say this I should be able to create
16:17 - that user when I do my post request I
16:22 - got a little an error here and the error
16:24 - is saying I don't have sequel 8-3
16:26 - installed so let's go ahead and do that
16:28 - if I go to my terminal and just install
16:30 - that that will allow us to actually
16:35 - connect to our sequel Lite server
16:36 - because you need to make sure you
16:38 - install the specific driver of the
16:40 - database you're using so if we're using
16:41 - my sequel or Postgres you need to make
16:43 - sure you install it the correct driver
16:46 - and in this case we're using sequel Lite
16:49 - hmm so we should be able to just install
16:51 - that we should be good to go let's try
16:53 - it again and hopefully it works so if I
16:55 - click send we are getting yet another
16:58 - error so let me see what's going on here
17:01 - and one thing I do to kind of debug is I
17:03 - have jsbin loaded up I could have paste
17:05 - the HTML fine here
17:07 - this is saying that there's no such
17:09 - table as users
17:13 - and the reason that this is throwing an
17:15 - error is because we forgot to run our
17:17 - migration scripts so let's move on to
17:19 - yet another topic which is migration so
17:21 - if I open up a new terminal here and do
17:25 - Adonis help you can see what command we
17:28 - have related to migrations if you see
17:30 - here there's five commands for
17:32 - migrations the one we're kind of I'm
17:33 - curious to use would be migrations colon
17:35 - run and that's going to run through your
17:37 - migration scripts and run anything that
17:39 - it hasn't already ran yet so here I'm
17:42 - just into Adonis migration run run that
17:48 - that's going to create our user table in
17:50 - our token table so finally if I were to
17:53 - do a post request on that endpoint we
17:56 - should be able to persist that user and
17:58 - look it did we got our email back we got
18:01 - a password which is hash back we got our
18:04 - username created at updated at and we
18:06 - got an ID so just to verify that this is
18:11 - actually persisted to the database if we
18:13 - try to do this again notice we get an
18:16 - error back if we look at this error it's
18:19 - going to say that a constraint failed
18:21 - there's no unique user email so
18:25 - basically this error is saying that
18:26 - we've already used the email and we
18:28 - can't use it again so we know that is
18:30 - trying to create that same user and put
18:32 - into the database it's throwing an
18:34 - exception and it's sending a 500 status
18:36 - code back with an error message
18:37 - awesome so as a really really quick
18:40 - recap we created a new route which
18:43 - accepts a post request to off the slash
18:45 - register we prefix it with API and we're
18:48 - binding that to the user controller
18:49 - register action or method and inside the
18:53 - user controller we made an async
18:55 - function which takes two requests it
18:58 - takes two parameters or body from the
19:00 - request we use object deconstruction to
19:03 - grab the email and password we create a
19:05 - user using that email and password in
19:07 - setup a username important make sure you
19:10 - use a weight here and make sure you have
19:12 - a sink here we get the user that was
19:14 - created and we return it back to the
19:16 - user and then using postman we saw that
19:19 - when we tried to create a user so if I
19:21 - do testing 2 or 3 it should create a new
19:24 - user with testing 3 and send it back to
19:25 - us well so now that we know how to
19:28 - create new routes and controllers and
19:29 - stuff let's go ahead and try to create a
19:31 - new one called login and what
19:35 - is gonna do it's going to check the see
19:38 - if the email password provide matches
19:41 - what is actually in the database so to
19:45 - do so again we just need to make a new
19:48 - method here inside this controller
19:49 - called async login and that's going to
19:53 - take the request object for now
19:56 - and again we need to grab the email and
19:57 - password from that request I'll just do
20:00 - that and then secondly there's something
20:03 - cool that's already built in to Adonis
20:05 - which is an auth property that's passed
20:08 - in here and basically what auth does is
20:11 - it has a couple of helper function
20:13 - functions on it that allows you to try
20:15 - to authenticate your user so if I were
20:18 - to do kama auth we now have access to
20:21 - that auth controller in the main reason
20:24 - we have access to that is if we look at
20:26 - our app dot J's file here inside the
20:29 - Start folder there's a provider which
20:32 - was declared called the auth provider
20:35 - which gives us access to that off thing
20:39 - our author object
20:42 - this wasn't here we want to be able to
20:44 - do that and then what type of
20:47 - authentication are we actually using so
20:49 - if we were to dive into the config
20:51 - folder here and look at SAS notice that
20:55 - there's a couple of different off types
20:57 - that are kind of built in we have
20:59 - session we have basic auth we have GWT
21:03 - so by default this is using the JWT auth
21:06 - and if we look down at the GWT
21:09 - configuration notice that it's pointing
21:11 - to our user model it's going to
21:14 - automatically try to fetch based on
21:16 - email and password so these are the two
21:18 - columns that it's going to look at and
21:20 - it's going to use the secret key here to
21:24 - define a new JWT
21:27 - token so if you don't really know that
21:31 - much about JWT I suggest you go read up
21:33 - on it I'm not gonna really give you that
21:35 - much of a deep dive on it
21:38 - but just know that this authentication
21:41 - object that we're using it's just going
21:44 - to look at our database and it's going
21:45 - to create a key for us if the user is
21:47 - successfully logged in so doing so let's
21:51 - go back to our controller remember we
21:54 - brought in this off object what we want
21:58 - to do is we want to try to authenticate
22:00 - the user so we're going to say cons
22:02 - token is equal to a weight off dot
22:06 - attempt and then we're going to pass it
22:09 - our email and we're gonna pass it our
22:10 - password and then we're gonna return
22:13 - that token so if this is successful
22:16 - we're gonna get a token send it back to
22:17 - the user if this fails is probably gonna
22:19 - throw an exception and send back an
22:21 - error to the user if I save this file
22:23 - this last part is we need to go to our
22:25 - routes file and we need to declare a new
22:28 - endpoint so that we can actually try to
22:29 - register our login so I'm going to copy
22:32 - and paste this line 19 and instead of
22:35 - register I'm going to do login and then
22:37 - login for action here save the file and
22:41 - now at this point I should be able to
22:43 - try to log in with that same username
22:45 - and password that we just registered
22:46 - with so you remember we registered with
22:50 - testing at gmail.com and that's the
22:51 - password oh if I just copy this payload
22:54 - instead go to my off slash login
22:57 - endpoint and click send
23:01 - we get back a response that has a token
23:05 - in it but for those who don't know what
23:08 - a JWT token is basically it's just a way
23:12 - to cryptographically sign adjacent
23:16 - object if I were to take this token and
23:19 - if I go to jadibooti dot IO I can paste
23:25 - my token into their website and it's
23:28 - going to decode it for me if you notice
23:31 - here after I pasted it in this is the
23:34 - data that's encoded inside of that
23:36 - payload basically just has to use your
23:38 - ID so if you notice here it's a 1 just
23:42 - to kind of further demonstrate that
23:44 - remember we made another account called
23:46 - testing 3 I try to log in with that it's
23:49 - going to give us a different token if I
23:53 - want to
23:53 - code that token inside this website
23:55 - notice that the user ID here is a two so
24:00 - behind-the-scenes adonis the auth module
24:03 - is just going to fetch the user from the
24:05 - database verify that the user name and
24:07 - password match up correctly and then if
24:09 - it does it's going to just encode a
24:11 - token that has a user ID in it so the
24:15 - cool thing about this is I can come into
24:17 - this token and just make random changes
24:19 - to it
24:21 - but if I do
24:24 - to fail the signature that only the
24:26 - surfer knows about
24:28 - so with that being said basically any
24:31 - token that the server assigns and since
24:34 - to the user we know a certainty that no
24:37 - one else can modify that token and send
24:41 - back to us and we can kind of cover an
24:43 - example in a little bit because we're
24:45 - not fully done implementing
24:46 - authentication yet so I'll keep this
24:49 - website up and let's go back to our code
24:51 - and just kind of look at one more thing
24:53 - that we can refactor so another thing I
24:58 - wanted to do is when you register your
24:59 - user you're probably going to need that
25:02 - same token right so what I like to do is
25:05 - instead of just returning the user we
25:07 - created
25:08 - I'm just going to return this dot login
25:11 - and then past the arguments that were
25:14 - passed into this request and in this
25:16 - case we don't really need the user
25:17 - anymore so now that when we register or
25:21 - if we login we pretty much get this
25:23 - payload back every time so if I go back
25:24 - to register and I make a new account
25:28 - testing 100 we get back our halo that
25:32 - has a token in it awesome so we just
25:35 - made a new login method we modified the
25:39 - register method to call a login after we
25:41 - register and then we created the route
25:44 - to allow us to register and login we're
25:48 - making some good progress now we just
25:49 - need to UM move on to creating some new
25:54 - database models before we move on to
25:57 - that let's just go ahead and commit what
25:58 - we have so I'm going to say registration
26:00 - slash login and commit that and then we
26:04 - can start fresh
26:06 - back into this file 17 so since we are
26:10 - planning to make a to-do list
26:13 - application one thing I want to include
26:16 - is a new project model so I plan to
26:20 - separate my data into projects then
26:22 - inside the projects we have tasks so
26:30 - at the Adana CLI and see what commands
26:32 - we can use to try to help us create a
26:34 - new model so I do a Donna's help notice
26:38 - here we have a make model Adonis make
26:43 - model help and basically we just pass
26:48 - the name of the model and then there's
26:51 - also like a controller and migration if
26:54 - you want to create a migration for the
26:55 - model and in this case we do also want a
26:57 - migration so be sure to include this -
26:59 - in so again we wanted a project model so
27:05 - if I say project and then pass - M
27:09 - that's going to create us a project
27:11 - model inside our models folder
27:16 - ruch might be is code and then also we
27:19 - get a migration script old projects so
27:24 - first off let's go to our projects
27:26 - migration and we need to make sure we
27:29 - declare some attributes on our projects
27:31 - before we run our migration scripts so
27:35 - to do so I'm going to look at the users
27:36 - and just kind of copy this one line here
27:39 - and we want our projects folder to have
27:43 - a title that's going to be a 255 max
27:46 - length string and I'm just going to
27:48 - remove the rest because I don't care if
27:50 - it's unique and I don't care if it's
27:51 - null or not second thing I want to do is
27:55 - a project belongs to a user right
28:01 - so inside our migration script if I look
28:03 - at token they have an example of how to
28:04 - do that
28:07 - basically if I copy this line and go
28:09 - back to my project schema
28:11 - but that up here we want to us fill e8
28:15 - the project to a user so we need to make
28:16 - sure I'd use your ID column exists on
28:19 - the project's able so we're saying yes
28:22 - it's an integer of user ID it's unsigned
28:24 - it references the ID in the users table
28:28 - and then the last part is we need to go
28:32 - into our projects bottle and we need to
28:36 - make sure we declare an association so
28:39 - if we look at the token J s file here
28:43 - I'm sorry the user
28:47 - is file
28:49 - you
28:51 - what we can do to declare associations
28:54 - is simply just copy and paste this
28:58 - project are this tokens method and
29:01 - instead we're gonna name it projects and
29:04 - this is gonna say this that has many app
29:05 - that model that project and this just
29:08 - tells lucid how to look up articular
29:12 - associated records using the project's
29:15 - method so literally inside of our
29:18 - controller we can do user dot projects
29:20 - and that's going to fetch us all the
29:22 - projects associated with that user and
29:24 - then the second thing we want to do is
29:27 - we want to go back into a project model
29:29 - and create a new method called user to
29:33 - declare that Association in the other
29:35 - way so I'm gonna say return this that
29:36 - belongs to app models user and this is
29:42 - just saying that a project that belongs
29:44 - to a user and then a user has many
29:47 - projects so that allows us again to
29:49 - easily look up data both ways depending
29:53 - on what type of lucid model we have
29:54 - instantiated in our code and this will
29:58 - make more sense when we actually start
29:59 - using it so again we created a new model
30:03 - called project which created us a
30:04 - migrations file we declared a title
30:09 - inside that migrations projects table
30:12 - and we also declared a user ID which
30:15 - references the users table and then we
30:18 - declare some associations in our project
30:20 - and a user model so what we want to do
30:23 - is we need to run our migration again so
30:25 - if I do a migration run that's going to
30:28 - only run that project migration script
30:31 - because we've already ran those past two
30:32 - right so now in our database we should
30:35 - have a table called projects and that
30:36 - should be ready to go awesome so the
30:40 - second thing is we need to create a new
30:43 - controller and route so that we can
30:45 - actually create new projects right
30:48 - if I just closed all of these and then
30:50 - we can start doing that remember an
30:52 - Adonis we have a create or a make
30:55 - controller method so here if I do make
30:59 - controller so Adonis and make controller
31:01 - help if they get more information I'm
31:05 - going to pass it the project as a name
31:08 - so that we have a new controller called
31:11 - project and that's going to be an HTTP
31:13 - type of controller an inside of a
31:17 - project controller let's just go ahead
31:19 - and do a index method
31:24 - this method is supposed to do is
31:25 - supposed to return all the projects that
31:28 - are associated with the user and of
31:32 - course we don't have a create method yet
31:34 - so we'll have to make one in a second so
31:37 - in order to do so we're gonna need that
31:41 - off plug-in again
31:43 - and it luckily off has a nice little
31:45 - utility function called it user if I do
31:49 - Const user equals a way to off that get
31:52 - user that's going to fetch us to user
31:54 - which was associated with the JWT token
31:57 - that we passed in so again if I just
32:00 - print out user here and then return
32:04 - I'm random message for now we should be
32:11 - able to create a route which is going to
32:14 - point to that controller so here I can
32:16 - say route to dot and get and that's
32:20 - going to be on projects and that's going
32:23 - to be on project roller dot index
32:29 - the inertia
32:33 - so go ahead and save my server and I
32:36 - should be able to try to hit that
32:37 - projects in point and in this case I'm
32:45 - going to pretend like we didn't pass an
32:46 - authentication token and this should
32:48 - throw an error because we haven't
32:50 - actually passed a JWT token like we said
32:54 - we needed to WC here I expect the token
32:58 - cost user a weight off the docket user
33:00 - and we're actually getting this because
33:03 - I probably forgot to add async so
33:04 - remember make sure you always add async
33:06 - if you're using a weight here
33:09 - and I'll try to hit that endpoint again
33:12 - see what the air is and we get an
33:16 - invalid a JWT token right JWT must be
33:19 - provided so at this point what we want
33:24 - to do is when we declare the route we
33:27 - also want to declare a meadow where
33:29 - function so that we can parse a JWT
33:32 - token from the request so inside of our
33:36 - line 22 where we declare our index we
33:39 - want to make sure that we add a middle
33:40 - where all until it that it's going to be
33:44 - an awful so basically we're going to
33:47 - authenticate the user with that J DBT
33:49 - token before we run our controller here
33:52 - so again if I try to hit that endpoint
33:54 - we're gonna get back an error again
33:59 - Sanjay DBT must be provided so let's go
34:01 - ahead and try to provide that J to be T
34:04 - token so if I go back to login and I
34:06 - just login with our testing at gmail.com
34:08 - user and I grab this token typically the
34:15 - way to pass a JWT token is inside the
34:17 - header you have an authorization key and
34:19 - then you pass it something called bearer
34:22 - and then the token like so
34:26 - and an inside postman what we have is we
34:29 - have environments where we can just set
34:32 - up kind of key value pairs so we can use
34:35 - those in all of our requests so if I
34:37 - look at the environment here I already
34:39 - have one set up called authorization
34:41 - which is set to a token so let's change
34:43 - it to the token I just copied and put
34:46 - bearer in front and this is just the
34:47 - nama clay sure we use because it's a
34:50 - barrier type token go ahead and update
34:52 - that close out of that and then I'm
34:55 - going to make my request and see what
34:57 - happens
34:58 - so this point we get a message back that
35:01 - says hello world and then if we were to
35:02 - leave off this authentication token
35:04 - we're going to get back that same error
35:06 - saying that GWT token was not provided
35:10 - this is also going to check your token
35:12 - to make sure it is valid so if I were to
35:14 - go and try to create and spoof my own
35:16 - token and send it to this endpoint it's
35:18 - not going to work as expected
35:22 - so going back to our code the main thing
35:25 - that we wanted to kind of show is that
35:28 - once we fetch off that get user it
35:31 - prints out that user information here so
35:34 - we have access to user ID inside of this
35:38 - controller if we wanted to use it I'll
35:41 - go ahead and just print that out at the
35:44 - endpoint one more time
35:48 - and notice here it's printing out one
35:50 - because you remember in JWT i/o when I
35:53 - decode this token it's printing out user
35:55 - ID of one and what that does is going to
35:58 - fetch the user from the database using
36:00 - UID and then we have access to that user
36:03 - model here okay so we're almost done
36:08 - with this project index method the next
36:11 - thing we need to do is using that user
36:14 - we need to fetch and return all of the
36:16 - projects that are associated with that
36:18 - user so if I do return a weight user dot
36:21 - projects dot fetch
36:25 - that's going to use our associations to
36:28 - fetch all the projects that are
36:29 - associated with that user if I save this
36:31 - go back in request that endpoint it
36:34 - should return back in mtra because we
36:36 - don't have any projects created yet
36:40 - which leaves us to our next route let's
36:42 - go ahead and create a create in point so
36:48 - if I do a sync create I'm going to take
36:51 - an auth in a request and let's kind of
36:57 - step through what we might want to do
36:58 - right so we're first need to verify that
37:00 - the user as the token passed in so if I
37:05 - go to routes I'm just going to create a
37:07 - new post request to slash projects it's
37:13 - going to call or create action and then
37:16 - again make sure they're authenticated
37:17 - and then we want to grab that user so
37:22 - cost user is equal to a weight off bag
37:24 - get user from the database so we have a
37:27 - lucid model instance we can use we want
37:29 - to grab the title that was passed in in
37:32 - the payload
37:36 - so for example if we were to go back and
37:39 - post a project we're going to pass the
37:42 - title Yolo here and we're going to fetch
37:47 - it from the request here
37:50 - now we want to create a new project but
37:53 - we have an included project yet so first
37:55 - we need to say bring in cost project
37:57 - from app dot models that project and
38:02 - then we need the creative project so
38:04 - project is equal to new project this is
38:07 - going to create us a new instance of our
38:08 - lucid model for the project
38:12 - we want to fill in or set values so one
38:15 - thing I could do is I could do project
38:16 - title is equal to title or something you
38:20 - can also do is project that fill and
38:22 - then pass it an object and that's going
38:26 - to set anything that you pass in so if I
38:28 - were to say name and name exactly and if
38:34 - name actually existed on the database
38:35 - it's going to put name on to that
38:36 - project to but it doesn't so let's just
38:38 - get rid of that and then finally we want
38:41 - to create the project and associate it
38:45 - with the user right so if we do a weight
38:47 - user dot projects dot save and passes
38:50 - the project and then finally we can
38:53 - return that project
38:56 - so recap we created a route for that
38:59 - projects create method we make sure it's
39:02 - authenticated you grab the user we fetch
39:06 - the title from the request we create a
39:07 - project and fill in that title
39:09 - information we associate the project
39:11 - with that user and then we return the
39:13 - project back so let's go ahead and try
39:15 - to hit this endpoint now though I'm
39:18 - gonna click send it works successfully
39:21 - and it returned us the project that it
39:24 - created so it has an ID of one as a user
39:26 - ID of one has the title Yolo and now
39:29 - just to demonstrate if I go back to my
39:31 - projects in point and try to fetch all
39:34 - the projects for my user it's going to
39:40 - return an array with that project
39:42 - created and so I can hit this a couple
39:45 - of times to keep creating projects and
39:47 - then when I try to fetch all the
39:48 - products from a user notice that we have
39:50 - like a 5 over 4 project returned let's
39:54 - just go ahead and commit what we have
39:55 - and then we can kind of just knock out
39:57 - all the remaining project methods
40:07 - okay so the last two methods we're going
40:10 - to create on the project's controller is
40:11 - going to be a create or I'm sorry not
40:13 - create it's gonna be a delete in an
40:14 - update method so let's go back to our
40:17 - routes and let's go ahead and make a new
40:19 - endpoint that takes a delete request and
40:22 - this one is going to actually take a ID
40:25 - so if I do project ID here in fact I'll
40:31 - just keep it ID to keep it generic and
40:32 - then we can call a destroy method and
40:35 - again make sure the user is
40:38 - authenticated before we hit this in
40:39 - point so if we go back to our project
40:42 - controller and then create a async
40:44 - method called destroy it's going to take
40:47 - it off in a request but let's kind of
40:52 - step through what we need to do again we
40:54 - need to fetch the user so whatever user
40:57 - made the request get that user model
41:00 - and then we need to get the project ID
41:02 - that we declared here and the route so
41:06 - to do that in adonis we could also
41:09 - include another property called pram or
41:12 - sorry params and that's going to give us
41:17 - the query parameters and we need the ID
41:19 - so if i do ID is equal to grams done ID
41:24 - or again if we wanted to do object
41:27 - deconstruction we do this
41:33 - after we have the ID we want to fetch
41:34 - the project that's associated with the
41:36 - ID of a Const project equals to a weight
41:39 - project dot find now find is a method
41:43 - that you can use it pass in the IDE that
41:46 - we want to find it's going to return the
41:48 - project model so I'm just going to say
41:50 - find ID that's going to return us the
41:53 - project now at this point we don't want
41:58 - any user to just potentially destroy
42:01 - this model right we want to make sure
42:04 - that the project we fetched actually has
42:06 - access or the user that did call destroy
42:09 - actually has access to the project right
42:12 - so what we can do is we can just say
42:15 - make sure that project user ID is equal
42:18 - to user dot ID before we do anything in
42:22 - this case I'm just gonna say not equal
42:24 - and then if they're not equal to return
42:26 - something to the user so here I'm going
42:31 - to say response dot a return response
42:35 - dot status of 403 basically return a 403
42:41 - status code which is authentication or
42:43 - authorization error status
42:46 - if the project that we fetch does not
42:48 - match the user that was asked in with
42:51 - the GWT token but if we do have access
42:56 - we're going to not hit that if statement
42:58 - and underneath here we can just say
43:00 - project delete and then we're going to
43:03 - return the project that was deleted
43:05 - let's just go ahead and save this and
43:07 - try to test it out
43:10 - so going back here notice that this user
43:13 - has a bunch of different projects
43:15 - associated with it so let me describe
43:17 - project three and I'm going to go to the
43:19 - delete request and tell it to delete
43:21 - project three so after I run that it's
43:26 - returning the project information that
43:27 - was deleted and if I go back to my get
43:29 - request how to fetch all the projects
43:31 - notice that three does not exist in this
43:34 - list anymore
43:35 - so our delete method is working as
43:37 - expected
43:39 - before we move on something like this is
43:42 - going to be copied and pasted a lot
43:44 - throughout our application so I kind of
43:47 - want to abstract that into a different
43:48 - hope or service or something like that
43:51 - so what we can do is I'm gonna make a
43:54 - new folder inside an app called services
43:56 - and I'm sure there's other ways to do
43:57 - this my heart isn't sure I'm sure you
43:59 - could use like providers as well
44:02 - but for now I'm going to keep it simple
44:03 - but I'm just going to make a new service
44:05 - called authorization service
44:12 - and inside that service I'm just gonna
44:14 - make a class called authorization like a
44:18 - type and that's gonna have a method
44:21 - called verify permission which takes a
44:24 - resource and it takes a user
44:29 - the exact same thing as we did before I
44:31 - say if the resource user ID is not equal
44:34 - to the user ID we're going to throw some
44:36 - new error and in a second I'm going to
44:40 - actually use a real error here
44:45 - now what we can do is back in our
44:47 - project controller we can go to the top
44:48 - and include that so I'm just say offer
44:50 - is a ssin service is equal to use app
44:54 - services authorization service and
45:00 - instead of doing this if statement here
45:02 - I'm just going to say authorization
45:04 - service that verify permission project
45:07 - user
45:13 - so hopefully if everything works out
45:15 - correctly if I were to run this with the
45:17 - delete method and pass it ID 4 it should
45:21 - still delete that resource and in this
45:24 - case I got an exception let's see let's
45:26 - see what that exception was verify
45:30 - permission is not a function so I might
45:32 - have spelled something wrong
45:33 - verify permission
45:38 - authorization service oh I forgot to
45:40 - export at the bottom my bed so make sure
45:43 - at the bottom I'm just going to export a
45:45 - new authorization service here that we
45:47 - can use it open now if I were to hit
45:50 - this end point it delete it deleted this
45:54 - project with an ID of four so everything
45:56 - is still working as expected but if I
46:00 - want to test if I had access to the
46:02 - resource so let me just log in with a
46:05 - different user so if you remember we
46:07 - made a user of testing 3 let me grab a
46:10 - token and update here
46:22 - difficulties deleting this token huh
46:28 - okay so we updated the environment to
46:30 - have a
46:30 - touken protesting three now I want to a
46:33 - delete ID of one in two which if you
46:37 - notice has a user ID of one but the
46:39 - token that I'm set up with is not that
46:41 - correct user so if I go back to delete
46:43 - and try to delete project one we get
46:47 - back an exception and in this case it
46:50 - should be a very generic exception it
46:51 - doesn't say anything but notice that
46:54 - this is actually running now if I were
46:57 - to go here and just print something else
47:00 - and try to delete that again
47:05 - that prints out invalid access so
47:07 - something full and Adonis that I need to
47:10 - point out is that when an exception is
47:12 - thrown in your controller it's going to
47:14 - return that exception to the user so I
47:17 - don't need to have if statements and
47:18 - like specify certain status codes in
47:21 - return instead I could abstract that
47:23 - into an exception again going back to a
47:27 - really useful adonis CLI if I do Adonis
47:30 - help notice that we can make an
47:32 - exception here
47:35 - so I'm gonna do Adonis May
47:38 - exception help information on that this
47:40 - one only takes a name so I'm gonna say
47:43 - let's see authorization actually I'm
47:48 - going to name it's invalid access into
47:50 - valid access and that should make a new
47:53 - exception called invalid access
47:55 - exception inside this exceptions folder
47:59 - so now that we have the invalid access
48:01 - exception we could just write a custom
48:03 - handler function which is going to take
48:06 - in an error as the first argument and
48:08 - then you can have access to the response
48:10 - here and basically we just want to
48:13 - return a response of a 403 status code
48:16 - to the user a return response status of
48:19 - 4-3 and then I'm going to send it back
48:21 - some JSON this as error 'invalid access
48:24 - to resource
48:31 - well so now then I save that so invalid
48:35 - access exception is equal to use app
48:38 - exceptions dots invalid access exception
48:41 - instead of throwing new error we can
48:43 - just throw our new exception here our
48:47 - access the authorization server should
48:49 - be returning that exception and then
48:51 - when this exception fires from Adonis
48:53 - it's going to return a 403 status if I
48:56 - go back and hit that endpoint notice we
49:01 - get a 403 for a bit forbidden and we get
49:03 - invalid access to resource and this kind
49:04 - of helps us clean up our controllers so
49:08 - that we don't have a bunch of if
49:09 - statements to check if something is
49:11 - defined or if a user exists so another
49:15 - exception I want to catch is for
49:18 - whatever reason if let's say Project was
49:20 - not defined so they give us ID of a
49:22 - thousand this is going to be null here
49:24 - which is going to hit this function and
49:26 - probably throw a 500 error right
49:34 - so let's just go ahead an other
49:36 - exception called resource not exist
49:45 - the inside verify permission
49:48 - if we were to just check and say if
49:50 - resource was not defined let's just
49:55 - throw a new invalid our sorry resource
49:58 - not exist exception and there might be a
50:03 - better way to do this that's already
50:04 - like built into the Donna's framework
50:06 - but this seems to work for now and then
50:10 - of course inside of that exception we
50:12 - just copy the handler that we had in our
50:14 - previous exception paste it here and we
50:17 - want this to be a for for and say the
50:19 - resource did not exist
50:23 - oh so I'll save that one I'll go back
50:29 - and I'll try like out of a thousand
50:31 - click send and notice that we get back a
50:34 - four or four not found the resource to
50:35 - not exist
50:40 - that is a really high-level overview of
50:42 - exceptions and how you could handle them
50:44 - to return custom status codes to your
50:46 - requests let's go ahead and commit what
50:49 - we have now and move on to the last one
50:51 - which is going to be update
50:57 - exceptions
50:59 - my code and get back to a nice state
51:03 - just to continue working
51:09 - okay so the last route that we want to
51:12 - add for projects would be an update
51:13 - route
51:15 - so here if I say Ralph dot patch and
51:17 - again that's gonna be Project /id and
51:20 - we're gonna say update that's going to
51:23 - also need the auth middleware but we
51:25 - created our route let's go to our
51:27 - controller and create our action so I'm
51:29 - going to say update auth request params
51:34 - very similar code we could probably pull
51:37 - this out into like helper functions so
51:38 - we don't copy and paste code everywhere
51:40 - but since this is just a simple tutorial
51:41 - well I'm not going to do that again I'm
51:44 - fetching the user from the auth helper
51:46 - function I'm fetching the ID that we
51:49 - want to update I'm fetching the project
51:52 - that we want to update
51:53 - I'm going to verify that we have access
51:56 - to that project and that that project
51:59 - also exists and then finally what we
52:03 - want to do is we want to fill in like we
52:07 - did before
52:10 - in this case I'm going to do merge so
52:11 - project that merge and I'm gonna say
52:13 - merge it with the request of the title
52:18 - the only grab the title that's passed
52:21 - into the quest and then I want to save
52:23 - that the project that's save and then I
52:27 - want to return the project this is kind
52:31 - of a new method that we saw basically
52:33 - it's gonna take from the body of the
52:37 - request just grab me the title so if
52:39 - someone were to pass in a bunch of
52:40 - different properties I just want the
52:41 - title here and then I want to merge that
52:44 - into the project and save it and return
52:48 - at this point let's just go back and
52:50 - fetch all the projects that do exist on
52:52 - this user is remember we deleted a bunch
52:55 - we don't have any so let me just create
52:57 - a new one
52:58 - go back fetch it well so we have a
53:02 - project as ID 5 which belongs to a user
53:04 - 2 let's change the title to Gigi so if I
53:07 - go to my patch in point let me can a
53:11 - patch request to project slash five we
53:13 - want to change the title to Gigi so if I
53:16 - were to send this now this should work
53:18 - okay and it did so we've updated the
53:22 - title to be Gigi if I go back and try to
53:23 - fetch the projects associated with my
53:25 - user the title is down Gigi okay so
53:29 - update is working as expected now so we
53:31 - have our four main crud methods we have
53:34 - create fetch update and destroy we don't
53:38 - necessarily need to show at this point
53:39 - because I don't think we need to fetch a
53:41 - single project in the UI but we could
53:43 - always come back and add that if we need
53:44 - to so let's go ahead and commit that so
53:48 - let's say add update in point
53:54 - then we can move on to our tasks
54:00 - okay so for our tasks we're gonna be
54:02 - we're going to need to create a new
54:04 - model again we can go here and say make
54:08 - model and then we're gonna pass it tasks
54:11 - with - M so it creates our migration
54:13 - scripts and let's move to our migration
54:17 - scripts and just add whatever we need
54:19 - for the the tasks
54:22 - entry
54:26 - so task is going to have a title and
54:31 - it's also going to be associated with a
54:33 - project so I'm just going to copy those
54:34 - and instead of user ID interesting
54:36 - project ID and that's going to be in the
54:40 - table projects refers to ID this looks
54:43 - good and then instead of title I'm just
54:45 - going to say description those tasks
54:50 - should be set up correctly and now I
54:52 - need to go into my models and very
54:54 - similar to how we did before I'm gonna
54:56 - go to our user model I'm going to copy
55:02 - and paste this is a task has many our
55:07 - sorry I project as many tasks so here
55:10 - I'm going to go
55:14 - asks and a project has many tasks
55:18 - inside of our tasks I'm going to say a
55:21 - task has one or belongs to a project go
55:28 - ahead and say that I should be able to
55:30 - run my migration scripts at this point
55:32 - which will create our tasks table and we
55:35 - should be able to actually use our lucid
55:36 - models to start manipulating with that
55:38 - table
55:43 - okay so let me go ahead and just close
55:44 - out of some of these so it's not so
55:46 - overwhelming like a step back what are
55:49 - we doing so we want the ability for
55:52 - users to create new tasks
55:56 - and because of the way a task is set up
55:57 - you can't really have a task unless you
55:59 - have a project in which it associates
56:01 - with so I'm just going to add a new
56:04 - endpoint here called projects of /id
56:08 - slash tasks so a user can post a task to
56:13 - a project
56:16 - and of course here we're going to say
56:18 - tasks controller instead of project
56:20 - controller and that's going to be a
56:22 - crate method and of course we need to
56:23 - make sure we're authenticated here as
56:25 - well
56:27 - so
56:29 - I'll set up let's go to our task
56:30 - controller which you don't have created
56:33 - yet so if I go make controller and then
56:37 - pass that task
56:39 - that'll create us a new controler file
56:42 - or our HTTP requests and inside here we
56:46 - need an async create method
56:49 - and this one's going to be very similar
56:51 - to the project create method so let's
56:54 - probably just go ahead and create our
56:57 - copy and paste all the code that was
56:59 - under our project create method if I go
57:01 - to project I go to create I'm going to
57:05 - copy this code and then of course make
57:09 - sure you include the things up here that
57:11 - you need so we're going to need project
57:13 - and we're probably going to need tasks
57:15 - so I'm gonna include project and task
57:18 - okay so when we create a task remember
57:21 - that in the prams we have that project
57:23 - ID
57:26 - so you know I'll comment this out for
57:28 - now so we can just kind of reference it
57:29 - but first of all yes we're gonna need
57:31 - the user so let's just grab that user Oh
57:34 - why that happen autocomplete and then we
57:40 - need to grab the description from the
57:43 - request so a description of request of
57:46 - all
57:47 - and then we need the project ID Oh ID
57:53 - from prams
57:56 - remember we don't have of--there so
57:59 - let's bring off bring in request
58:02 - let's bring in params
58:07 - we're going to need to fetch the project
58:09 - so cost project is equal to a weight
58:12 - project fine by ID so that will fetch us
58:16 - the project
58:18 - we want to verify that the user has
58:21 - access to the project though I'm just
58:24 - going to go here copy and paste this
58:26 - authorization service stuff
58:29 - you
58:31 - then we verify that the project the user
58:34 - has access to the project
58:39 - so if you remember before when we
58:40 - created a project and we associate it
58:42 - with a user kind of the same deal here
58:44 - so what we need to do is we need to say
58:46 - create a task the mistake Const task is
58:50 - equal to new task instantiate a new
58:54 - Lucid instance model and then I'm going
58:57 - to say task got fill in a pass a
58:59 - description and then I need to associate
59:03 - that task with a project some say wait
59:05 - project got tasks dot save the task and
59:10 - I want to return that task back to the
59:11 - user
59:13 - so nothing nothing new here at all is
59:15 - just kind of a matter of
59:17 - doing a little bit more extra code
59:19 - because we need to grab the project and
59:21 - then we need to associate the task with
59:22 - the project and then all the other stuff
59:24 - we've seen before fetching the user
59:26 - fetching the description from the
59:27 - parameters are the ID from the parameter
59:29 - is the description from the request
59:30 - that's all said and done the past
59:37 - so
59:39 - while we're here let's just go ahead and
59:40 - create an index method so we can fish
59:42 - all the tasks associated with the
59:45 - project so we can easily test and see
59:47 - what's going on so I'm going to add a
59:50 - another route Auld it on the tasks in
59:55 - point and that's going to call the index
59:58 - method and that again is going to be
60:01 - indicated here
60:07 - so going back here I'm going to say make
60:09 - a new method called a sink of index
60:12 - that's going to take off and request
60:16 - you
60:17 - and very similar we need the user
60:20 - we're gonna need Rams as well actually
60:24 - though in fact let me just copy all this
60:26 - and then delete what we don't need
60:30 - we fetch the user we don't need the
60:33 - description doesn't write really
60:34 - creating or updating anything so remove
60:36 - that we don't need to make a new task so
60:38 - remove that you don't need to fetch or
60:40 - associate tasks so remove that
60:43 - cool so we if the user if the project ID
60:47 - we fetch the project you verify you
60:49 - chose access to the project in we just
60:52 - need to return oh wait
60:55 - project tasks dot fetch
61:01 - so returned all the tasks that are
61:03 - associated with a particular project ID
61:06 - assuming that the user has access to
61:08 - that project let's try to test out these
61:11 - two methods and hopefully everything
61:12 - works out
61:14 - you
61:15 - so again let's create a new project
61:19 - just that we have something to work with
61:20 - and then that project ID is a six so if
61:24 - I go to tasks here we want to be able to
61:26 - post a new task to that project ID so
61:29 - I'm going to put project IDs six here
61:31 - I'm going to pass a description of hello
61:33 - make sure my headers are set up and they
61:35 - are so hopefully if I click send this
61:38 - will get added to the database and it
61:40 - did the now project ID of six has a
61:43 - hello task if I do it again I should
61:45 - have two tasks but then to fetch the
61:48 - tasks I'm going to click on the get
61:49 - request URL that I have saved here I'm
61:53 - going to change this to get the project
61:55 - ID of six tasks make sure the header set
61:58 - up and it is but when I click send here
62:01 - I should get two tests back and we do so
62:07 - awesome those two endpoints we just
62:08 - created are now working and really that
62:10 - then it take much time at all to create
62:13 - so we're kind of coming close to
62:16 - wrapping this up so let me just go ahead
62:17 - and commit what we have so let's say
62:19 - tasks index and create and let's move on
62:24 - to the last two things that we need for
62:28 - a task obviously we need to be able to
62:31 - update and delete tasks right so let's
62:33 - go back to here let's make a route dot
62:36 - delete on tasks of ID
62:47 - I'll make that a destroy call and make
62:50 - sure you have middleware and let's just
62:51 - go ahead and make the other one while
62:52 - we're at it here so we need a patch
62:54 - request and we need to be able to update
62:55 - the task so for deleting a task it's
63:00 - going to be very similar to deleting a
63:01 - project so I'm just going to go to the
63:03 - destroy method copy and paste that into
63:05 - my S controller
63:09 - and kind of modify it as needed
63:11 - so here again we fetch the user we need
63:14 - the task ID or we need the project ID I
63:18 - mean
63:21 - actually no we don't we don't need the
63:22 - project ID so this is
63:24 - to be the task ID here we need to fetch
63:27 - the task
63:30 - we need to verify at some point that the
63:33 - project that the task is associated with
63:36 - the user has access to so here we need
63:38 - to say project
63:41 - you
63:43 - our cost project is equal to tasks that
63:45 - project fetch and then we can check that
63:49 - the project the task is associated with
63:52 - the user has access to if they do all we
63:56 - need to do is say a way to test delete
63:58 - and then we can just return that task
64:03 - here
64:09 - so everything here should be okay let's
64:11 - go ahead and implement the last method
64:12 - which is update so just copy and paste
64:15 - some code
64:15 - we're gonna need probably similar code
64:18 - here again we fetch the user with the
64:22 - project ID here or sorry get the task ID
64:27 - fetch the project that's associated with
64:29 - the task verify the users essence to the
64:32 - project and then instead of deleting
64:34 - here we need to do that whole task dot
64:36 - urghhh
64:39 - and we're gonna say requests only and we
64:42 - only care about the description in this
64:45 - case
64:47 - you
64:49 - in fact I forgot to have a completed so
64:54 - when you're in the UI and you're
64:56 - clicking and marking tasks as completed
64:58 - we want to have yet another boolean
65:00 - called completed on that task object so
65:02 - we're going to need to go back to our
65:03 - migration scripts and kind of update
65:04 - that
65:12 - but so let's finish up this task
65:14 - controller really quick and then let's
65:16 - go back to our migration scripts we go
65:20 - to migrations I got a task and here I
65:23 - could just say boolean of beaten
65:30 - hmm so a cool thing you can do in Adonis
65:32 - is if we look at the migrations again
65:35 - there should be a refresh so if I do
65:39 - Adonis migration colon refresh that's
65:42 - going to drop and reset all of my
65:44 - migrations and it's going to rerun them
65:45 - all again so that basically we're
65:48 - creating this completed thing we're
65:52 - adding this completed tea
65:53 - column to our table
65:56 - you can also do a rollbacks if you
65:58 - wanted to or reset our stuff or you
66:00 - precious pretty good because it just
66:01 - rolled back rolls back everything and
66:03 - then reruns them so now our table should
66:06 - have a tasks
66:08 - sorry now our database should have a
66:10 - tasks table with a completed boolean
66:14 - column in addition to the other ones
66:15 - ahead before
66:17 - so at this point since we roll back it
66:20 - probably deleted all of her data so we
66:22 - need to go back and register a user
66:26 - and then we need to fetch this token and
66:29 - update our authorization header here
66:37 - we need to create a project make sure we
66:40 - get that project ID of one let's go
66:42 - ahead and create a task on project 1
66:46 - that's the projects in the tasks just to
66:48 - make sure that everything is set up as
66:51 - it should be
66:54 - it's a completed null awesome
66:56 - description of hello but we want to test
66:59 - out that we can first of all update that
67:02 - task
67:03 - so this is task of ID one
67:07 - let's just check that we can update the
67:09 - description to patch and completed to
67:12 - pulse so if I send that we're getting
67:18 - back an error so let's go ahead and look
67:20 - at the error here
67:23 - find module controllers tasks controller
67:28 - that's just because it's not tasks
67:30 - controller it should be tasks
67:32 - I named that incorrectly so that's my
67:34 - bad let me save that go back and hit
67:37 - this in point
67:39 - and now we're getting an invalid access
67:41 - to resource
67:46 - or o3 for bin see
67:53 - you
67:56 - [Music]
67:58 - you
68:01 - okay so looking back at the task
68:03 - controller let's look at the update
68:04 - method and figure out why this is saying
68:06 - invalid access
68:08 - and so we're fetching the user getting
68:10 - the ID hitting the task getting the
68:13 - project
68:16 - verifying the user has access to the
68:18 - project so what we could do here just
68:19 - start printing stuff out so project dot
68:21 - new JSON I could do tasks to JSON I also
68:26 - do user dot to Jason and make sure all
68:28 - these kind of line up as we'd expect
68:30 - them to
68:32 - you
68:38 - you
68:48 - um let's pace this and see what's going
68:50 - on Roger got to Jason is not a function
68:53 - okay
68:55 - you
68:59 - you
69:03 - so instead of saying to Jason let's just
69:05 - print these out so we have a task which
69:08 - has an idea of one project idea of one
69:11 - we have a user which has an ID of one
69:13 - and we have a
69:19 - where the project go oh
69:24 - so this will get you every time make
69:26 - sure you always have a weight in front
69:29 - of your acing calls if you don't this is
69:31 - just gonna be a promise and then it
69:32 - never thought nothing's really gonna
69:33 - work as intended let me say that I want
69:37 - to make sure I had that updated
69:39 - correctly as
69:41 - you
69:44 - okay sorry about that one let's see if
69:47 - this will finally work
69:50 - so I think it finally patched that task
69:52 - with description patch two completed
69:54 - false so if I were to go back and try to
69:56 - get that task see that we have completed
69:58 - is zero and patched is the description
70:02 - now and then finally we want to test if
70:05 - we can delete a task so if we go to the
70:08 - delete method and tell it to delete task
70:10 - of ID one
70:13 - look send notice that it returns the
70:17 - task back to us and if we try to fetch
70:19 - it again it's not there
70:24 - so a little bit of hiccups along the way
70:26 - you know stuff I forgot to do in this
70:29 - tutorial but
70:31 - overall I think we're done building out
70:33 - a REST API they didn't take too much
70:35 - time as once you get a couple of routes
70:37 - going it's as simple as copy pasting and
70:39 - changing around and then as time goes on
70:43 - you'll notice that these crud methods
70:44 - are basically the same for every single
70:45 - resource so you could probably create a
70:47 - helper method that decorates these
70:49 - controllers that kind of does this logic
70:52 - for you
70:54 - but for the sake of this tutorial let's
70:56 - not dive into refactoring or do anything
70:58 - like that basically we have a way for
71:01 - users to register log in great projects
71:04 - great tasks update those tasks and
71:06 - projects and delete them and stuff so
71:08 - we're at a good State now that we can
71:10 - commit what we have wrap this up and
71:12 - move on to the View j/s tutorial
71:15 - all right so now we're going to get
71:16 - started in the second section of this
71:18 - tutorial which is the view J as fronting
71:20 - and very similar to the last section I'm
71:23 - kind of just going to rate it as I go
71:26 - and explain what I'm doing if you feel
71:28 - lost at any time feel free to pause and
71:29 - go look up the view documentation so to
71:34 - get started with building out the UI you
71:37 - move over to the view CLI github repo
71:39 - the latest version they have out is view
71:42 - version 3 beta 10 I'm going to install
71:46 - version beta 9 because I'm getting
71:49 - issues with tin but you don't want to
71:52 - use version 3 if you want to use the old
71:54 - you CLI - I'm not sure how how well that
71:58 - will translate to this tutorial so in
72:00 - this tutorial I'm using version 3
72:02 - if I copy that and go ahead and just
72:04 - paste it in my terminal and put ad
72:06 - version 3 0 0 beta 9 that's going to
72:10 - install the correct you CLI that I need
72:13 - to kind of demo awesome so now that that
72:16 - is completed we can simply run view
72:18 - create and then type the name of the
72:21 - folder or project you want to create so
72:22 - on this click in this case we're going
72:24 - to do client we want to create a client
72:27 - folder that has our stuff and after you
72:29 - do that it's going to kind of walk you
72:31 - through a couple of questions as to what
72:33 - you want to use to set up your project
72:37 - so I'm going to do manual select
72:39 - features just to make sure that we're
72:41 - not instantly something that we don't
72:42 - want so I want the router I want to view
72:46 - X and I'm just using the arrow on my
72:48 - keyboard in the space button to select
72:50 - stuff linter would be nice
72:55 - and CSS preprocessors I guess would be
72:57 - nice I'll hit enter I'm going to say use
73:01 - sass
73:04 - and I'm going to use the Airbnb config
73:07 - this is like the lentor options
73:12 - a slant on save be good enough
73:20 - kada config file I should be okay
73:26 - so after you select all the stuff that
73:28 - you want it's going to go ahead and just
73:29 - create your client folder and initialize
73:31 - all your different view stuff that might
73:34 - take a while because it's probably
73:35 - installing a lot of different packages
73:36 - so now that bat is finally done running
73:40 - we have a view app over here which I'm
73:43 - not going to go through all these files
73:44 - just start developing on it and I'll
73:46 - explain what I'm doing as we go through
73:49 - but before we get started there's a
73:51 - couple of extra dependencies I want to
73:53 - install now so that we don't have to
73:55 - worry about installing them later
73:57 - so if we look at what we currently have
73:59 - we really only have three dependencies
74:00 - view view router view X but there's a
74:03 - couple more that we're going to need so
74:05 - I'm gonna do yarn add and then the first
74:09 - one we're going to need is Axios and
74:10 - that's for doing HTTP requests and
74:13 - whatnot
74:13 - I like having lo - just in case we're
74:18 - going to need beautify and that is a
74:23 - material like framework or library to
74:26 - kind of style your components and build
74:27 - up your app and then two other helpful
74:30 - libraries I uses view X persisted State
74:34 - and that's so I can store my view X
74:37 - state into local storage and load it
74:40 - back when the roam tab opens up and the
74:44 - filing of UX router sync well that's
74:49 - going to go ahead and install all those
74:50 - dependencies and update my package JSON
74:53 - with those
74:55 - now that that's all done like I ran it
74:59 - in the wrong directory so let me just
75:00 - delete these why don't we go into the
75:03 - client directory and rerun that so to
75:06 - start off what I'm going to do is I'm
75:09 - going to open up the source folder and
75:12 - inside here we have a main JSO which is
75:16 - kind of where everything gets
75:17 - initialized and created for view it's
75:20 - also where you need to like include a
75:22 - lot of your dependencies and set them up
75:23 - so I'm going to do that with those
75:24 - dependencies we just Yarn installed so
75:27 - starting off I'm going to include
75:31 - import sink
75:34 - from view ex router or sink I'm going to
75:38 - import it beautify
75:43 - beautify
75:47 - let's see what else we might need
75:52 - I think that's kind of all we need for
75:54 - right now but what we can do is just
75:57 - include both of those or run them so
75:59 - they sync the store with the router
76:05 - view to use beautify
76:08 - you
76:11 - and I think that
76:12 - a good start
76:17 - winters complaining that you should come
76:18 - at the very top because they are
76:19 - actually
76:21 - packages and not from my local files
76:23 - like these are yeah so I'll do em p.m.
76:26 - run serve
76:29 - that's going to open up a browser and
76:33 - point it to your view webpage in just a
76:36 - second so here we go we have our view UI
76:40 - loaded and running
76:43 - and if we hit did everything right we
76:45 - should have those additional plugins
76:48 - like beautify and the view X router sync
76:50 - it's set up
76:53 - and just to verify that I'm going to go
76:55 - to my view plug in here so that's this
76:57 - is a chrome plugin that you can install
77:00 - or using view X and debugging up so as I
77:04 - change routes we should see our route
77:07 - change in our state if you see here we
77:11 - have our routes state here is at that
77:15 - slash a belt and before it was at slash
77:21 - this sink command is working fine a
77:24 - little bit more refactoring I like to
77:26 - put my store in a store folder so I'm
77:27 - gonna say store I'm going to copy that
77:29 - into there
77:33 - but I rename this to index
77:40 - of course if you do that make sure you
77:42 - include it here so instead of actually
77:45 - that should work as is
77:48 - so a little bit more setup I'm going to
77:50 - look at the store I'm going to include
77:51 - that persist state package that we
77:54 - brought in I'm going to say import
77:56 - create persisted state from view X
78:00 - persisted eight
78:06 - that we use it
78:11 - so to use that basically you just need
78:13 - to declare a plugins array for your
78:16 - store so down here I can say plugins an
78:19 - attribute which has a create persistent
78:21 - state object inside that array and save
78:26 - that let's see we're getting a error
78:29 - here something is still trying to load
78:32 - storage is and that's probably in my
78:34 - main
78:34 - [Music]
78:40 - is coming from there
78:43 - okay for whatever reason I need to do
78:46 - /index here typically be imported smart
78:49 - enough to just find the index file I'm
78:50 - not sure why I need to do that but hey
78:52 - we're gonna run into issues as we're
78:53 - making this UI so the more issues that
78:55 - I'd be plugged apparently the better it
78:57 - is for a tutorial so let's go ahead and
79:02 - actually get started on building out
79:03 - some functionality we did some initial
79:05 - setup some of it might have not made too
79:07 - much sense it's kind of boilerplate
79:08 - setup so really don't have to worry
79:11 - about it too much unless you're planning
79:13 - to do the exact same thing that I'm
79:15 - doing with this tutorial so starting off
79:17 - let's go ahead and try to start using
79:18 - beautify to build out some header or
79:23 - something like that at the top it's kind
79:25 - of nice to have a top header up here
79:27 - where we have things we can click so the
79:30 - first thing I'm going to do is just load
79:31 - up the beautify Docs so view 2phi go to
79:36 - their Doc's here
79:39 - we're going to be using this throughout
79:40 - our tutorial to kind of figure out what
79:43 - components we can use to build up our
79:46 - application
79:51 - so first off they say in order to set up
79:54 - your app with beautify you need to make
79:57 - sure that you have everything wrapped in
79:58 - a VF component an example down here it
80:02 - looks like this so if i just go back to
80:05 - my app view which is like the main part
80:09 - of this what I need to do is just inside
80:12 - my template I can say V app and then of
80:16 - course wrap everything in that
80:21 - at that point we should be okay and
80:24 - we're all gonna refactor all this second
80:28 - so since we did this setup let's just go
80:30 - ahead and come out what we have so now
80:31 - so all these files aren't just like
80:33 - green and kind of confusing so I'll say
80:34 - initial view set up go ahead and commit
80:37 - that go back to my tree view
80:45 - so let's get back on track kind of
80:47 - jumping around what we need to do here
80:49 - is we need to build out a beautify top
80:52 - navigation so that we can use it in our
80:54 - application so if we go back to the dock
80:56 - so let's look at the components that
80:58 - they have
81:02 - something called a toolbar Papa click
81:04 - toolbars
81:06 - give us some examples of the toolbars
81:08 - that they have how to use them so I'll
81:13 - click the code to get an example and
81:16 - basically I'm just going to copy and
81:18 - paste this into my app for now
81:21 - for all this stuff we can just kind of
81:25 - for now but we're probably going to get
81:26 - rid of it so if I save this file and go
81:27 - back to my view app
81:31 - notice that the styles are all messed up
81:33 - and that's mainly because I forgot to do
81:36 - an additional step in our setup which
81:40 - was I need to include the beautify CSS
81:43 - so if I go back to that main J's file
81:45 - you need to make sure that we import the
81:48 - beautify projects CSS so I'm going to do
81:50 - import beautify dist
81:54 - beautify that mend CSS go ahead and save
81:58 - this
82:00 - and we're going to run to an error
82:03 - because we haven't included
82:08 - actually this is just a linting error
82:12 - it'll let me go
82:15 - figure out how to fix this this is
82:17 - trailing spaces are not allowed we must
82:19 - have a trailing space somewhere which is
82:21 - right here so I'm going to go ahead and
82:22 - just remove that and save it
82:25 - so that loaded correctly if I go back to
82:27 - my app awesome we have the beautify CSS
82:30 - in the top now except for now the menu
82:33 - is messed up if you look to the example
82:36 - their toolbar has a little hamburger
82:38 - thing that you can click ours just says
82:42 - menu so another thing that we forgot to
82:44 - set up it'd be nice if like there's
82:47 - already project that kind of settle this
82:49 - stuff up for you but I guess there's not
82:51 - so do it by hand
82:54 - so what we need to do at this point is
82:55 - we need to go into the public file and
82:57 - I'm sure you can also import this in
82:58 - Maine but the way I did is I went to the
83:00 - public index.html file and in this file
83:04 - it's just a typical file that you know
83:06 - your app is going to be injected into
83:08 - but we want to include the material
83:11 - icons so if I go up here and just go
83:14 - ahead and just include that link through
83:16 - the material icon style sheet so this is
83:19 - the material icon that we need to
83:20 - include just go ahead and save this at
83:24 - hamburger menu should appear now
83:28 - and it does cool cool cool okay so
83:31 - making some slow and steady progress
83:33 - let's go ahead and try to modify this to
83:37 - customize it to be kind of something we
83:39 - want so first of all I don't want the
83:42 - hamburger menu for now and these links
83:44 - over here need to be something that's
83:45 - actually related to what we're building
83:47 - since we're building a to-do list
83:49 - application really all we need is like a
83:51 - register or logout button and maybe a
83:54 - button to see all your projects or
83:55 - something and then maybe also like a
83:57 - link to see this YouTube video once I
84:00 - host it so let's go back here and let's
84:03 - go to our app view those all these
84:09 - and then in here
84:12 - for our title I want to save you to do
84:15 - but and save that and just see that
84:17 - reflected here
84:19 - awesome I kind of want to add some color
84:22 - to this so I'm just going to say color
84:25 - is equal to green
84:28 - and I want to make it a dark attribute
84:30 - so that the text is white and then I
84:35 - want to say fixed so that it always
84:36 - stays on the top of my browser so you
84:40 - notice here as I scroll down it's still
84:42 - fixed to the top so awesome we have a
84:45 - view of you to do toolbar green fixed go
84:49 - ahead and get rid of that am burger icon
84:54 - I really want that
84:59 - is gone
85:01 - as we need to add a button so we can
85:04 - click our projects LV toolbar items
85:10 - that's going to be a class of hidden for
85:12 - small I should I'm not going to add any
85:13 - class of that
85:19 - buttons and stuff in a V tool bar
85:20 - toolbar items and inside here you add
85:23 - your buttons so say V button close that
85:27 - off and this button is going to say
85:29 - projects
85:31 - they make this one line say that
85:36 - cool so it looks kind of messed up but
85:38 - we're going to fix that in a second
85:42 - button if I were to say make that flat
85:44 - save that that's going to make it a flat
85:46 - button so it looks a little bit better
85:49 - and we also kind of want an icon so I'm
85:52 - going to do V icon
85:55 - you
86:00 - I want to put a playlist ad check
86:05 - economy
86:07 - let me just make this into a new line so
86:09 - let's read
86:12 - well so we have a button that says
86:14 - projects and it has a little icon to the
86:15 - left of it so people can understand that
86:16 - that's like your main view for seeing
86:18 - your projects and to-do list items one
86:21 - thing I want to fix really quick is this
86:22 - margin here that's needs to be added so
86:26 - what I'm going to do is I'm going to go
86:29 - to that title
86:30 - here and I was going to add a class of
86:33 - mr - 4 which means margin-right 4 and
86:37 - that's gonna push that button over to
86:39 - the right some so it looks a little bit
86:40 - cleaner
86:43 - and then later we can come along and add
86:45 - like routing here to the header if we
86:48 - need to but let's finish off with adding
86:51 - a couple of more so we're going to need
86:53 - a register button we're going to need a
86:55 - logout button
87:01 - again button
87:07 - you
87:10 - and I also want to include some icons on
87:12 - those I just like putting icons next to
87:14 - my buttons although I'm not sure if
87:15 - that's good UX or not so for register
87:19 - I'm going to say count box or login I
87:24 - want to do a fingerprint and then for a
87:27 - logout I want to say exit to app
87:31 - and then also I want to add a button
87:33 - that says how this was made just
87:37 - basically there's going to be a link to
87:38 - this YouTube video
87:41 - you
87:46 - awesome so we have a bunch of different
87:48 - buttons and of course as we go on we're
87:50 - gonna hide them show them depending on
87:53 - if the user was logged in or whatnot
87:55 - um one thing I do want to fix really
87:58 - quick is that all these buttons are
88:00 - really close to the text so I'm just
88:01 - gonna add a little bit of margin to all
88:03 - of these buttons here so wherever I see
88:07 - flat I'm just gonna say class of margin
88:09 - right of to save that and notice that
88:14 - all of our buttons actually I think I
88:17 - should have used them padding right
88:21 - so pr2 is a way to add padding the stuff
88:25 - mr2 is a way to add like margin of stuff
88:28 - okay edit it to the wrong stuff
88:32 - yeah my bad my bad I added it to the
88:35 - wrong thing I should have instead added
88:38 - it to the V icons here so if I describe
88:41 - both the icons and just do class of
88:43 - margin right too
88:46 - that she make it look a little bit
88:48 - better so sorry I'm kind of recording
88:51 - this early in the morning I'm still like
88:52 - trying to wake up and I make a lot of
88:53 - mistakes but hopefully I'm still
88:56 - explaining this decently okay so let's
89:00 - move on refactoring this a little bit
89:04 - because you see here this AB dot view
89:06 - file could potentially get pretty big
89:07 - right now I'm already hitting like 30
89:09 - lines and it's good to kind of D couple
89:12 - your components so it's easier to
89:13 - understand so it would make sense to
89:15 - pull this out into a separate component
89:17 - right because these buttons down here
89:20 - like when we have our content the router
89:21 - view doesn't need to know about the
89:23 - toolbar header
89:25 - so to do that what I'm going to do is
89:28 - I'm gonna first copy and paste this
89:34 - in fact I'm gonna cut it
89:36 - and I'm going to make a new component
89:37 - called bull bar
89:43 - and then I'm gonna scaffold that out and
89:46 - I'm gonna paste that HTML inside of that
89:50 - template
89:54 - you
89:57 - go ahead and save that and then in my
89:59 - app dot view I could just include that
90:01 - toolbar after I import it so here I'm
90:04 - going to go ahead and add a script
90:06 - JavaScript and then I'm going to import
90:11 - you
90:15 - created
90:16 - at slash components slash bullbar vu
90:23 - then in here we want to simply do
90:26 - components
90:29 - and that's going to be an object with
90:32 - the name of our component
90:35 - you
90:37 - my hair says we're missing a semicolon
90:39 - so let's go ahead and :
90:43 - make sure my linting is all working
90:49 - trailing space inside of my
90:53 - HTML so let's fix that really
90:59 - you
91:03 - a missing michael bars in extent
91:08 - okay so all of those are passing now so
91:10 - the last part or step I need to do is
91:12 - once I've imported that toolbar into my
91:14 - app table view you just go up here and
91:16 - simply do the toolbar
91:24 - notice here the toolbar is still
91:25 - displaying if I were to go back to my
91:27 - code and just comment that out to
91:28 - demonstrate the toolbar will disappear
91:30 - all right so the next component a review
91:33 - I want to work on is going to be their
91:35 - register view so that we can actually
91:36 - register users so let's go ahead and get
91:41 - started on that if we go to our toolbar
91:44 - notice that we had a register button if
91:49 - we wanted that to actually do something
91:50 - when we clicked it you could simply add
91:52 - the property to and pass it the URL we
91:55 - want to redirect the user to when they
91:58 - click on the button so I'm going to say
91:59 - to slash register
92:02 - at this point we don't have a register
92:04 - view or route created I'm gonna go my
92:07 - router Nijs file and I'm gonna create
92:09 - one
92:10 - let's go ahead and copy and paste what's
92:12 - there already
92:14 - make this register
92:17 - you
92:19 - register component
92:23 - and again we don't have a register
92:25 - component created so what we need to do
92:26 - is pretend like we have one created in
92:29 - our views folder and I will go here and
92:32 - just go ahead and create a new register
92:35 - dot view file inside of this and go
92:39 - ahead and scaffold that up well so now
92:42 - at this point actually I'm just going to
92:44 - say I'll make this h1 I'm gonna say
92:46 - register just make sure that we can view
92:49 - something but if I go back to my UI I
92:51 - should be able to click on that register
92:53 - and the top nav it's going to redirect
92:55 - us to that register view
93:00 - case it's not let's kind of investigate
93:02 - what's going on
93:03 - [Music]
93:04 - you
93:06 - going back to the toolbar
93:11 - and it's because I put it on the wrong
93:13 - element I should have put it on the
93:15 - button not the V icon so that's my bad
93:18 - let me go back here at it to V button
93:24 - go back
93:26 - register now and notice that it
93:27 - redirects us to a slot register in point
93:31 - you
93:33 - anyway so now that we have the register
93:36 - in point a register route let's go ahead
93:40 - and add a couple things to that view
93:42 - such as you know a login button a user
93:46 - name they can enter in a password form
93:50 - so we don't need the toolbar at this
93:51 - point we're done with the router done
93:54 - with app so inside the register
93:56 - component what we need to do is let's go
93:58 - ahead and make this a if for now we can
94:03 - come back and change that to probably
94:04 - like something that's more layout
94:05 - specific and we need to create
94:11 - let's say a title of h1 so it's going to
94:14 - say register and then we're going to
94:17 - need a input box and using beautify
94:21 - there's one called B text field some say
94:23 - B text field and the properties that you
94:28 - can pass the V text field include the
94:31 - label I'm going to say email and to say
94:35 - the value so we'll leave that blank for
94:39 - now
94:43 - I'm just a label email placeholder
94:47 - equals email
94:49 - and we'll come back in a second and add
94:51 - actual other values to it
94:58 - and of course we need one for password
95:00 - this is going to be a type of password
95:04 - and when I made I'm gonna make it
95:06 - autocomplete equals false are actually
95:11 - equals new password so that Chrome
95:12 - doesn't automatically fill it in with
95:14 - stuff so we have two text fields wave
95:17 - email and password here and then we also
95:19 - need like a register button I'm gonna
95:21 - add a B button
95:25 - and in that be button what we can do is
95:29 - give it a color so I'm gonna say color
95:31 - green I'm going to give it dark so that
95:32 - the text is white
95:36 - inside here we can say register
95:40 - you
95:43 - go ahead and give it an icon since I
95:45 - like to give icons next my buttons
95:48 - so a good icon that we could use here
95:51 - includes a account icon so let's do a
95:55 - count circle save that go back we have a
95:59 - register button here now
96:04 - I so we're making some progress one
96:05 - thing I'll notice is that no I don't
96:07 - want this to expand the entire page with
96:13 - if we were to go back to our component
96:16 - instead of using a div let's do an
96:18 - actual container so I'll say B container
96:24 - and then make sure we update the closing
96:26 - element and then inside the container
96:28 - you can do a B layout
96:31 - rowrr app and again these are just
96:33 - beautify built-in components for layout
96:38 - container I have a layout saying that
96:40 - everything should be in a row
96:42 - and then I'm saying inside that row I
96:45 - want the road to be with of six on a
96:49 - small and then push everything to the
96:53 - right by 3 I'll explain that one second
96:58 - so let me say that and now notice here
97:01 - you have everything kind of centered
97:03 - here so basically we go back to these
97:06 - attributes I told it to give it a width
97:08 - of six basically it's going to divide
97:11 - your page into twelve different columns
97:12 - I'm saying this is going to be six
97:14 - columns of width and then I want to push
97:17 - it over three columns so this is column
97:19 - one two three starts at comma four with
97:22 - the six and then we have column seven
97:23 - eight nine ten eleven twelve
97:28 - you
97:31 - utilize that here if I go and look at
97:32 - this we have a
97:36 - the six columns here and then were
97:38 - pushed over a three if you notice the
97:40 - three is adding a padding right here
97:42 - this should allow us to when we resize
97:45 - the page still going to stay in the
97:48 - center
97:53 - what kind of gives us the benefit of
97:54 - responsive websites without having to do
97:56 - much work but we're not focusing on
97:59 - making a responsive website so let's
98:01 - keep on moving on and try to implement
98:04 - the actual registration login
98:07 - functionality full so now we're getting
98:10 - into the actual logic of this
98:13 - registration page and we need to first
98:15 - start figuring out how to bind stuff to
98:19 - view X so for anyone who's not really
98:22 - familiar with the UX basically it's a
98:23 - place where you have all of your
98:25 - application logic stored in a single
98:26 - place and then your components are going
98:31 - to update that state and fire off
98:33 - actions and mutations to change the
98:36 - state I guess the benefit of that is
98:38 - it's very easy to understand like where
98:40 - all your application is like how does
98:42 - your application change over time well
98:44 - it kind of debug and show you how useful
98:46 - that is in a second but again let's just
98:49 - implement it I'll kind of explain it
98:51 - along the way so we need to first of all
98:56 - go into our store and let's make a new
99:00 - file called authentication
99:05 - be named whatever you want does really
99:06 - matter
99:08 - inside that authentication file we want
99:11 - to export a new object which is going to
99:14 - be like a store module so I'm going to
99:17 - say this is gonna be namespace to true
99:19 - state in here is gonna have some things
99:22 - we can kind of add on to it in a second
99:25 - and before we start adding on to this
99:27 - let's go ahead and make sure that we
99:29 - include that module here in our main
99:32 - store so up here you're able to do
99:37 - modules and include a list of modules
99:40 - here so I want to include a
99:42 - authentication module
99:47 - which of course we have an importer yet
99:49 - some say import Asian from
99:52 - authentication
99:55 - that's basically going to hole in this
99:58 - default object here and put it directly
100:01 - into my modules object here so then I'll
100:06 - be able to access it with my mutations
100:08 - and actions and setters and stuff from
100:09 - my view components again this probably
100:11 - won't make sense until we start using it
100:14 - so just a recap we made a module and we
100:17 - include it in our store so let's go back
100:19 - to our module what do we actually need
100:21 - to store interstate so if we were to
100:23 - look at a register component basically
100:25 - we need to store when they update their
100:27 - email that they're about to submit
100:30 - when they update their password I so two
100:32 - things that we know that we need to keep
100:35 - track of so let's keep track of a
100:38 - register email and beam all by default
100:42 - in register S word that's also in beam
100:47 - all
100:48 - so in order to kind of bind these to
100:53 - change these we need to first make a
100:55 - couple of mutations so if I go here I'm
100:59 - going to add another property called
101:00 - mutations and inside this mutations
101:05 - property we can just define different
101:07 - functions that it will affect our state
101:10 - here so I'm going to say set register
101:12 - email that's going to stake or take a
101:15 - state and also a an email as a payload
101:20 - and then we need the same thing for set
101:22 - register password
101:30 - the state thought register email is
101:34 - email same thing here
101:37 - register password is equal to password
101:40 - you
101:43 - I think this is because um we spun this
101:46 - up using Airbnb easiest excellent and
101:49 - they typically use react but we need to
101:52 - actually be able to do this so let's go
101:56 - to IES Lind file
101:57 - [Music]
101:58 - and let's add some rules so I'm gonna
102:01 - say rules the one that's giving us
102:03 - issues is no pram reassign and I'm going
102:05 - to turn that off for now so that we
102:06 - don't get that error
102:09 - and unfortunately when you change that
102:10 - Uslan file you have to rerun your serve
102:12 - command I think there's a couple of
102:16 - other ones you might a couple of other
102:17 - rules we might add and disable mainly
102:20 - because you know everyone has their own
102:22 - opinions of how their code should look
102:23 - and I have my own or so
102:28 - let's let that reload here
102:33 - well so a little recap we have two
102:37 - properties on our authentication module
102:40 - state called a register email and
102:43 - register password and then we have two
102:45 - mutations which we can use to change
102:47 - those so with that being said how do we
102:50 - actually bind our view component to
102:53 - change those if we go back to our
102:55 - register view file what we need to do is
102:59 - first import our a couple of helper
103:04 - functions from view X so I'm first going
103:06 - to do import map state and I'm going to
103:10 - do map mutations
103:13 - from Buicks
103:17 - and to use these basically you just kind
103:19 - of
103:21 - decorate your component object with
103:24 - following these functions so for an
103:26 - example if we wanted the ability to call
103:30 - set password or set registration email
103:33 - or one of these we need to map the
103:35 - mutations to our object so I'll just say
103:37 - map
103:38 - mutations
103:40 - actually first of all I need to bind
103:42 - that to a method so I'm gonna say
103:43 - methods is an object and then I want to
103:46 - map some mutations to that that's
103:49 - function where I can pass it the module
103:51 - name so I'll think tation and then I
103:53 - pass it the methods I actually wanted to
103:55 - app so this is the first function that
104:00 - we want to map and this is the second
104:03 - function we
104:06 - so basically all this is doing is saying
104:08 - that this component is going to have
104:10 - these two methods that I can call so up
104:12 - here I can call those like whenever I
104:14 - click on register or whenever I change
104:17 - text in here I can simply just call
104:19 - those methods here and then also what we
104:23 - want to do is we want to grab in our
104:27 - computed state values here so that we
104:29 - can set a register email password when
104:31 - that view loads so up here I'm going to
104:33 - say computed which is another property
104:35 - you can use on your view component
104:40 - instead of map mutations I'm going to
104:41 - say map state again pass it the module
104:45 - name
104:46 - we want to map and then pass it our
104:48 - state that we want to map in in this
104:51 - case I'm going to say register email and
104:52 - register password
105:00 - you
105:07 - all right so if everything worked well I
105:11 - should be able to start using these
105:14 - so the first thing I want to do is I
105:16 - want to go up here and I want to bind
105:18 - the value of my text fields to its
105:22 - corresponding state value so I'm gonna
105:24 - say value is equal to register email
105:29 - you
105:31 - - buying this text field - whatever the
105:33 - state value is down here and I wanted
105:37 - the same thing for a register password
105:38 - so I'm gonna go down here and say bind
105:40 - this to register password
105:43 - and let's just demonstrate what we are
105:46 - actually doing here so if I go back to
105:48 - this view the register view notice that
105:52 - email and password are not set to
105:53 - anything and that's because in our state
105:56 - I go to the authentication module
106:02 - actually clear on my localstorage I
106:03 - think it has stuff
106:10 - okay so in our thent ocation module we
106:13 - have a register email and register
106:15 - password state and those are both null
106:18 - but if I come back to here and say hello
106:20 - and this changes the world and save this
106:24 - notice that when this page refreshes
106:31 - I think it's because I'm using
106:34 - :
106:36 - one second that kind of show you what
106:39 - I'm doing I need to actually disable
106:40 - this plug-in because this is trying to
106:42 - load my state from the store which is
106:44 - not what we want to do to be able to
106:47 - demonstrate this
106:52 - sometimes I hate me it's Lent
106:56 - there we go
106:58 - sorry about that basically I change this
107:00 - to initial state of these two properties
107:03 - to be hello world and notice that our
107:04 - inputs are set to those now
107:08 - I'm gonna keep this plugin disabled for
107:09 - right now so it doesn't cause more
107:11 - issues back into enable in a second
107:17 - so again if I change the
107:18 - and a do to the end of it when this page
107:21 - loads this input is going to fetch that
107:23 - value from the store and just populate
107:26 - it
107:27 - so that's kind of the first step we
107:29 - bound these text fields to the state
107:35 - now the second part is we need to bind
107:37 - what happens when we input into this in
107:40 - update our store so if I do at input so
107:43 - basically whenever someone changed the
107:45 - values of this
107:49 - text field
107:53 - is just call
107:56 - set register email down here
108:02 - and then same thing for the password
108:06 - let's say set register password
108:15 - so now when I type you'll notice that
108:18 - it's firing off a view X mutation down
108:21 - here authentication slash set register
108:24 - email and as that's changing it's
108:26 - updating our state but and another cool
108:30 - thing I can show is we can travel back
108:33 - in time to all the different values of
108:35 - our state so if I wanted to go back to
108:36 - my app first loaded notice that it's
108:40 - going to load my initial store values
108:42 - here and that's reflected in our UI and
108:45 - that kind of I can kind of step through
108:47 - what happened over time with my
108:50 - component and this is really useful for
108:51 - debugging and understanding what's going
108:53 - on with your application
108:55 - let's go back to our code and try to
108:57 - figure out what else is remaining so we
108:59 - had the ability to type into the email
109:02 - and password we're updating our store
109:04 - with the corresponding values now what
109:06 - we want to do is when the user clicks
109:08 - register we want to fire off a view X
109:10 - action to kind of hit that register in
109:12 - point we're created on our previous
109:14 - tutorial section so on this button I'm
109:19 - going to add an @ click call back
109:26 - register method which we have an
109:28 - included yet so if I go down here now
109:30 - and just pretend that the authentication
109:33 - has a register action we say map actions
109:39 - identification bring in that register
109:42 - action and of course we are missing this
109:45 - so we need to put it up here
109:50 - if we go back to our authentication
109:51 - module we need to just simply add in
109:53 - actions and say register is going to
109:57 - take um
109:58 - [Music]
109:59 - his register need there
110:04 - do object construction and just grab the
110:06 - commit function and also grab the state
110:12 - so now we're getting into doing actual
110:14 - HTTP requests to our server which is
110:16 - running
110:18 - so in this particular case we want to
110:20 - grab the register email and password and
110:22 - we want to do a post request to our
110:23 - register endpoint so before we get too
110:27 - far ahead of ourselves I want to make a
110:28 - new component called HTTP ijs so I'm
110:32 - going to do HTTP j/s and inside here
110:37 - we're going to export a function which
110:41 - is going to return a new Axios object so
110:44 - I'm saying co-create and we haven't
110:47 - included that so let's just do that
110:48 - really quick
110:51 - we also probably want the store because
110:54 - I'm going to put the base URL in the
110:57 - store
110:58 - you
111:03 - and before we go further with
111:05 - implementing this go to our store and
111:07 - just add a a Cu RL and set that equal to
111:10 - API
111:15 - I think I should slash API
111:20 - so in this HTTP file we're going to
111:23 - create an access object and we're going
111:25 - to set the base URL let me say base URL
111:28 - is equal to store dot state base URL
111:34 - you
111:37 - and then we want to say give it a
111:38 - timeout of like one second so if request
111:42 - doesn't finish in a second time it out
111:44 - hmm
111:45 - and that should be good for right now
111:49 - should we had our semicolons this is
111:54 - another one I do not like so I'm going
111:56 - to disable that style
111:58 - I go back to my es Lintz
112:03 - just get rid of that
112:08 - make sure you reset that
112:15 - you can now go into our authentication
112:18 - action that we're trying to create
112:19 - import this HTTP function so if we can
112:22 - create an Axios module so up here I'm
112:26 - going to import HTTP from HTTP now we
112:33 - have the ability to call that function
112:34 - so here I'm just gonna say
112:38 - returned HTTP POST
112:43 - the reason we can call that post is
112:44 - because on this Axios object it has
112:47 - different methods such as get post patch
112:48 - put delete stuff like that and we want
112:50 - to make a post request to our auth slash
112:53 - register in point
112:56 - and then we need to pass it some data in
112:57 - the body payload I'm going to say email
113:00 - is equal to state dot register email
113:06 - and then password is equal to state that
113:08 - register password
113:13 - I'm going to make it so the moment we
113:14 - call this action I just want to reset my
113:18 - username and password back to but it was
113:20 - so I'm gonna say commit set registration
113:23 - actually um we need commit at this point
113:26 - so let me just save that show you what
113:28 - happens when we run this method
113:31 - so remember we already bound this
113:32 - register button to make send off an
113:35 - action event so if I click it or
113:38 - actually getting an error now so let's
113:39 - see those localhost:8080 /ss register is
113:45 - not found in the main issue here is if
113:50 - you remember we are hosting our API
113:52 - import 3 333 this is trying to make a
113:54 - request to e2 80 another cool thing you
113:57 - can do is we just want to pretend that
114:00 - the API and the UI are going to be
114:03 - hosted on the same port same domain
114:06 - under a proxy so if we go back to our
114:09 - main folder where we have our client
114:13 - folder I can make a new file called view
114:15 - dock config is an inside here if I just
114:19 - export an object that has dev server has
114:22 - a property and I tell it to proxy slash
114:25 - API I can give it a target until a to
114:29 - point to my adonis server on port 3 3 3
114:33 - 3 goes off all the
114:39 - and I think I might need to restart my
114:41 - server this is basically just doing a
114:44 - proxy whenever I do a request to slash
114:46 - API it's going to point to a different
114:47 - port on this machine and you config
114:51 - dodge is is automatically kind of loaded
114:52 - in we are using the view CLI so let's go
114:56 - back to our UI when that refreshes let's
115:00 - click the register button again
115:02 - you
115:04 - to register here
115:11 - so if you see here we try to make a
115:14 - request to 8080 slash a P I such office'
115:17 - register the request payload is this
115:21 - hello yo password is world
115:26 - and the server did not respond within a
115:29 - second but let's just see if that was a
115:31 - fluke
115:32 - and it doesn't seem like it was so let's
115:36 - look at her server maybe her server is
115:37 - actually crashing for some reason let me
115:39 - go to my server folder and go to my
115:42 - controller or I'm trying to register and
115:44 - let me just make sure I'm hitting this
115:46 - so say console dot log hello world
115:56 - you
116:03 - so we are hitting this end point I think
116:05 - it's just taking a little bit longer
116:06 - than a second to register our user so
116:08 - let's go back to our HTTP change this
116:10 - time out to five seconds instead and
116:12 - let's try to hit at end point again
116:17 - you
116:21 - and we're getting the error I guess
116:23 - saying that the user already exists and
116:26 - it does
116:28 - I'll do hello with an exclamation mark
116:31 - try to register that user instead
116:33 - [Music]
116:35 - okay this one actually works so we got
116:36 - back that token which we're gonna need
116:40 - the store in our store at some point but
116:44 - right now you saw there's no cuz I'm
116:46 - feedback for the user when we registered
116:47 - and what we want to do is a store the
116:49 - token in the store and then we want to
116:50 - redirect the user to a different view go
116:55 - back to this get rid of the hello world
116:57 - and just start that
116:59 - hmm go back to review CLI
117:02 - Oh some these files
117:10 - okay so first thing we wanted to do is
117:13 - we said we wanted to store the token
117:17 - inside the store so if I do a dot then
117:20 - you can grab data that's returned from
117:23 - the Axios request
117:31 - and then inside this data we could
117:33 - simply do commit set token data token of
117:40 - course we don't have a commit our
117:41 - mutation called set token so let's add
117:43 - one will say set token we get the state
117:46 - we get to token and we need to set state
117:48 - that token is equal to token and we also
117:51 - don't have a token define our state so
117:53 - let's go up here and say token is equal
117:55 - to null
117:57 - and also let's make sure we include
117:59 - commits up here so we can run the
118:01 - command
118:04 - so let's try this see what happens if we
118:07 - were to register with a new user that we
118:08 - haven't done before
118:11 - a click register notice that it fires
118:15 - off the set token mutation and now in
118:18 - our state we have a token set
118:21 - so that's step one step two is we need
118:24 - to change our router location so we need
118:29 - to first import that router so import
118:32 - router from dot dot slash router just to
118:36 - import this file here and then if you
118:39 - want to dynamically change the route
118:41 - that wrong we do router dot push I'm
118:43 - going to say go to the route
118:48 - let's try registering with yet another
118:50 - one so I'll just say hello click
118:53 - register and notice that it redirected
118:55 - us when we successfully logged in so a
118:58 - couple of other things we want to do is
119:00 - what if there was a login error right
119:01 - what if the user tried to log in and it
119:03 - was incorrect so we should probably
119:05 - display some sort of registration error
119:07 - on this page so to do that we're going
119:10 - to need yet another store variable
119:12 - called a register error
119:14 - maybe know by default we want a mutation
119:17 - to be able to set register error
119:22 - you
119:27 - you
119:33 - and then in a registered IBEW file
119:39 - we want to add a new alert probably add
119:42 - it right above the register button so
119:43 - I'll say be alert
119:47 - and that component and I'm gonna give it
119:49 - a couple of properties so I give it type
119:53 - of error and I want to give it a value
119:55 - of error I shall say register error
120:04 - so basically if register error is
120:05 - defined it should show up this alert and
120:07 - notice register error we haven't brought
120:09 - in so we need to go back down here to
120:11 - methods and make sure we map the state
120:14 - here I'm going to map the register error
120:17 - states and I also want to just go ahead
120:18 - and say actually we don't need to map
120:21 - any mutations here
120:25 - so right now that's not going to show up
120:26 - regardless because we don't have a way
120:28 - to actually check
120:31 - or we don't have anything setting
120:33 - register error so let's go back to our
120:34 - action and what we want to do in our
120:37 - action is if there is some type of error
120:39 - so if I do dot catch I want to
120:44 - the register error isms they commit that
120:47 - register error
120:49 - I want to say invalid registration
120:53 - formation
121:00 - and of course you can get more specific
121:03 - I think you could probably catch the
121:04 - actual error
121:06 - and do something with it actually
121:08 - instead I'm gonna say an error has
121:10 - occurred of trying
121:19 - you
121:23 - all righty so
121:26 - fully this works if we go back and try
121:28 - to register this exact same user that
121:30 - should already exist in the database you
121:32 - get an error back and right now the
121:35 - error is not displaying anything
121:40 - so to debug this let's look we sent off
121:43 - a mutation to set register error that
121:46 - changed our authentication modules
121:47 - register error store State or whatever
121:50 - is called state to a string before
121:53 - whatever reason we're not displaying
121:55 - that in our alert
122:01 - oh this is because I forgot to actually
122:05 - render the X
122:09 - so if you read through the beautified
122:11 - docks alert this value is just going to
122:13 - display it if this is true or defined
122:16 - and then not display it if it's false
122:17 - but you actually need to render
122:20 - something inside here so make sure you
122:21 - do the mustache and it'll bar stuff to
122:24 - register to display your text
122:29 - cool so now says an error has occurred
122:31 - trying to create your account if I try
122:33 - to create it again with something that
122:35 - doesn't have an error it's going to
122:38 - redirect us
122:43 - and then one thing I'm going to do is
122:44 - every time we try to register I'm just
122:48 - going to commit null by reset that back
122:51 - to nothing from our registration error
122:59 - well so I think we're like most of being
123:01 - done if not we are done with this
123:03 - register view I think the last thing I
123:09 - want to do is once you're registered I
123:10 - want to hide a couple of these things in
123:12 - the top toolbar and if you're not logged
123:14 - in I want to show them so let's add
123:19 - something new that we haven't seen yet
123:21 - called a get er
123:24 - to our authentication module so I'm
123:28 - going to say get errs and it'd be
123:30 - another property and inside here I'm
123:32 - gonna say is logged in as a function
123:35 - takes the state I believe and what we're
123:39 - going to do here is basically just
123:40 - return true or false depending on if the
123:44 - token set
123:50 - so if the token is set is gonna be true
123:52 - or logged in if it's not it's going to
123:54 - be false and now that we've done that we
123:57 - can actually go back to our full bar
123:59 - component
124:01 - and hide these different buttons toupee
124:03 - on April logged in or not so let's go
124:06 - ahead and import
124:09 - on that map
124:11 - hitters function so it's a import object
124:14 - each instruction of math and getters
124:16 - from view X
124:19 - and here I'm going to say computed is
124:23 - equal to map getters of the
124:28 - authentication module and then I want to
124:31 - say is logged in
124:34 - you
124:36 - so that will basically grab us that
124:38 - getter function and we can call it up
124:39 - here to display and hide different
124:42 - things so if we are logged in we want to
124:49 - display
124:51 - logout
124:54 - maybe if we are logged in
124:58 - you
125:00 - this should always be displayed register
125:03 - and login should not be displayed so I'm
125:05 - gonna go ahead and just hide those two
125:06 - buttons there say if we're not logged in
125:09 - you can display those
125:11 - you
125:14 - up here we probably only wanted to splay
125:16 - this if we're logged in so let's go
125:18 - ahead and save that and see what happens
125:19 - all right so right now token is null so
125:22 - we're not logged in but if I were to
125:24 - register with something new such as like
125:26 - hello world 999 when we log in we now
125:29 - get that projects button to show up we
125:31 - get that logout button the show up
125:34 - alright so let's go ahead and commit
125:36 - what we have for now and then move on
125:44 - so since we're here messing with the
125:46 - toolbar let's just go ahead and make the
125:49 - logout button actually log us out so
125:53 - what is logging out basically in our
125:55 - sense of our application is just going
125:56 - to be setting that token to null right
125:59 - so if we go back to our tent ocation
126:02 - remember we have a set token mutation
126:05 - which we can call
126:09 - so if I just go to the toolbar I want to
126:11 - make sure I'm at that mutation
126:14 - I'll say methods is equal to a patient's
126:19 - acid
126:22 - pass it that function that we want to be
126:24 - able to use
126:26 - you
126:32 - and then now that we have that function
126:34 - could simply go up here to logout and if
126:37 - we click that button I want to set token
126:41 - to null
126:47 - so if you go back here
126:54 - it refresh the page
127:00 - okay so notice here when I click log out
127:03 - register went away or sorry the
127:06 - project's button went away and the
127:09 - logout button went away
127:12 - now our show to register and login and
127:13 - we can also check the store notice that
127:16 - token is set to null now
127:18 - I think what we also want to do though
127:21 - is we want to redirect the user to the
127:23 - login page whenever we click logout so
127:29 - maybe instead of mapping a mutation
127:32 - we could either create an action or we
127:34 - could just create e a logout
127:37 - functionality here so I think it'd be
127:38 - better to just create an action called
127:40 - logout so if we go back to
127:41 - authentication make a new action called
127:43 - logout
127:48 - that only needs a commit basically we
127:51 - need the same thing so commit set token
127:53 - to null
127:55 - and then we needed a router dot push
127:58 - slash login
128:02 - I don't think we have a route for login
128:03 - yet but we will create that in a second
128:05 - but going back to the toolbar instead of
128:07 - doing map mutations I'm going to say map
128:10 - actions
128:12 - and I'm going to bring out the logout
128:14 - action I'm just going to call log out
128:17 - here
128:24 - so let's just make some user and log
128:28 - them in and now that we click logout it
128:31 - should redirect us to login which we
128:33 - don't have a really of you created for
128:34 - that yet but we can do that in a second
128:36 - well so what we haven't implemented yet
128:39 - is the ability for a user to login
128:43 - so let's go ahead and try to do that now
128:45 - let's go back to our just commit log out
128:49 - here
128:50 - it to further if I go to my view I'm
128:54 - gonna make a new component called login
128:55 - and I'm just going to copy and paste
128:56 - from register because it's gonna be
128:58 - basically the same thing with different
129:00 - mutations and actions oops
129:05 - login
129:08 - so copies the register component and
129:10 - made a login view here if I go to router
129:13 - let's go ahead and make a
129:17 - a login route
129:25 - and inside the login route let's just do
129:29 - login here this is all showing up
129:39 - all right so now we have login instead
129:42 - of register for the button we need to
129:44 - say login so I'm gonna go down here to
129:45 - the button to say fingerprint
129:48 - I say login see that
129:53 - and that's good to go
129:55 - um instead of register error I'm gonna
129:58 - rename all everywhere I see register to
129:59 - login so
130:10 - actually suited me a me um
130:14 - just do this manually I don't mess up
130:16 - the realization
130:19 - hmm so register should become log in
130:22 - register should become login
130:24 - [Music]
130:49 - all right so none of these states
130:52 - mutations or actions that actually
130:54 - exists on the authentication so let's go
130:56 - ahead and add those to so I'm going to
130:59 - say set a register email password in
131:01 - email or error and say login
131:05 - hmm
131:08 - actions instead of a register action we
131:10 - also need a login action
131:14 - sets login error
131:17 - you know login
131:20 - you
131:24 - same functionality basically in fact we
131:27 - could probably abstract this to a
131:28 - function since this is very very similar
131:31 - but to keep it simple I'm just going to
131:33 - repeat myself
131:42 - you notice here the same same method
131:44 - we're basically changing the URL and
131:46 - we're changing the error and the
131:49 - parameters that we're sitting in so we
131:51 - could just make a helper function up
131:52 - here that does a kind of shared code
131:55 - between register and login but that's
131:58 - another abstraction which kind of makes
132:00 - stuff a little bit harder to understand
132:01 - we just want to quickly look at code so
132:04 - let's not worry about that right now
132:07 - so again we have a login action which
132:11 - should work now it tries to log into
132:13 - that login endpoint with the login email
132:15 - login password there's an error will
132:17 - display and the alert if not we're going
132:19 - to push the token or set the token and
132:21 - then we redirect to the home page
132:24 - and now we just need the mutations for
132:27 - those three store and values that we
132:30 - added so I'm gonna say sets
132:36 - set login and then here I'm just going
132:39 - to say state
132:42 - login
132:47 - all right so let's see if this works so
132:51 - first I'm
132:52 - I'm gonna make testing at gmail.com
132:55 - password 1 2 3 4 5 6 I'm gonna register
132:57 - and this failed because I think that
133:02 - user Ortiz
133:05 - sure does so I'll do testing one then
133:09 - just for that
133:11 - I'm going to log out and make sure that
133:13 - login works as this was testing one but
133:16 - a log in with that same username and
133:18 - password and at worked as well
133:23 - awesome so we have register and we have
133:26 - login working
133:27 - we have logout working we're hiding and
133:29 - showing different buttons based on the
133:30 - token being set
133:33 - um let's go ahead and what we have for
133:37 - this login functionality and then we can
133:39 - move on to something else so let's move
133:43 - on to actually displaying the ability to
133:45 - like add projects and add tasks and
133:47 - stuff like that so the first thing we
133:48 - need to start out with is kind of like a
133:51 - projects panel so if we go to the main
133:55 - view here or home view this is kind of
134:00 - what we're looking at right here so I'm
134:02 - going to actually rename this to
134:05 - projects
134:07 - and in my router I'm just going to go
134:09 - ahead and change that to well
134:13 - instead of home I'm going to say
134:14 - projects I'm gonna change that the
134:15 - projects
134:19 - projects
134:25 - go ahead and get rid of all this stuff
134:28 - back in it or stuff in in a second
134:31 - you
134:35 - all right so on this project page the
134:38 - first thing I want to kind of display is
134:40 - a panel on the left the title that says
134:43 - projects and then inside that panel I
134:45 - want to display a list of my projects
134:47 - and then an input box at the bottom so
134:49 - we can create a new project
134:53 - so first thing is the whole idea of a
134:56 - panel is something that we're going to
134:57 - be using throughout the application so
134:58 - if we go to our components folder and
135:00 - just make a new one called panel that
135:02 - view
135:03 - go ahead and scaffold that out
135:06 - you
135:09 - all I want to do here is I'm going to
135:10 - make a if give us some classes which are
135:15 - kind of pre built in to beautify so I'm
135:17 - gonna say white right I'm say white and
135:21 - elevation of two
135:24 - and that's just going to make a raised
135:26 - white panel and
135:28 - inside that raised white panel or card I
135:31 - mean I want to declare a toolbar
135:36 - make sure that it is flat I'm gonna say
135:39 - dents I'm gonna say dark and I'm gonna
135:41 - say color of
135:48 - then inside that toolbar I want to say
135:51 - be little bar title it's going to be
135:55 - equal to whatever the user passed in a
135:57 - property so I'm gonna say title is
135:59 - something that a user can pass into this
136:01 - component and down here of course we're
136:03 - going to need props I say title is going
136:05 - to be a string
136:13 - and inside the
136:17 - title actually I think that's good
136:19 - enough for the title underneath the tool
136:22 - bar what we want to do is create
136:24 - something called a slot so I'm going to
136:26 - say div class of time left for padding
136:29 - right for heading top of to padding
136:31 - bottom of two and inside of that div I'm
136:36 - just going to add a slot
136:40 - no one passes anything MSA knows lock on
136:42 - mind
136:46 - all right so now we have a panel which
136:48 - we can kind of use throughout our
136:50 - application and then of course we need
136:53 - to define it as a global I'm going to
136:55 - say here I'm going to say view component
136:58 - own int dot annal is equal to panel and
137:04 - of course make sure you bring that in
137:09 - and all bring that in
137:13 - that view
137:18 - you
137:23 - so almost done in the projects out view
137:25 - file now we could just simply do
137:28 - panel here and I'm going to pass it
137:30 - title is equal to projects
137:37 - so now when we save this we should see a
137:40 - panel that is defined here so we have
137:42 - projects here with no slot content
137:45 - defined and if we wanted to make
137:46 - something render here we just simply
137:48 - pass it in here so I'm going to say each
137:50 - one esteem
137:53 - you
137:54 - notice that that title will then render
137:57 - here and we can render Road whatever we
137:58 - want inside of this
138:01 - you
138:03 - well so we made a shared component or a
138:05 - global component called panel which we
138:06 - can use throughout our application um
138:10 - let's go ahead and do some layout here
138:13 - so that's not right next to the side of
138:15 - it so instead of using a div home I'm
138:17 - just going to do a V container so V
138:19 - container
138:27 - BAM
138:30 - I'm going to leave that out for now
138:33 - back in the container we want to be
138:35 - layout
138:37 - you
138:39 - laya of course we want AV flex and this
138:42 - flex is going to be I'm going to say
138:47 - small of four so it's going to be four
138:48 - columns and then inside there I'm going
138:50 - to put our panel
138:56 - all right so now we have a panel to the
138:58 - left called projects and let's just go
138:59 - ahead and create one for now just so we
139:00 - kinda have a better visualization of
139:02 - what we're doing on the right so 8 plus
139:06 - 4 is 12 and this one is going to be
139:08 - called tasks projects and tasks
139:14 - you
139:15 - awesome and let's just add a little bit
139:17 - of padding to that glass is evil
139:23 - Oh
139:25 - again what I said we're doing is we're
139:27 - just going to render out a text field
139:29 - here where we can
139:33 - add a new project and then we're going
139:35 - to need to render out a list of those
139:36 - projects
139:40 - mmm so before we get too ahead of
139:42 - ourselves let's make a new component
139:43 - called projects view
139:47 - you
139:51 - it might be a little confusing because
139:52 - we have a vehicle projects and we have a
139:54 - component called projects so I need to
139:58 - rename this the project view or
139:59 - something but
140:04 - I'll just I'll keep it as is and see how
140:06 - confusing it is
140:08 - so inside here let's just go ahead and
140:11 - import projects from
140:14 - you
140:17 - that Onan slash projects dot view
140:20 - [Music]
140:22 - I'll say components is equal to projects
140:26 - and go ahead and just instead of doing
140:30 - this panel here I'm going to just render
140:33 - that projects thing
140:35 - we're going to start defining and then
140:37 - I'll put the panel inside the projects
140:45 - you
140:51 - see intere because it does not sound
140:54 - like
141:01 - all right
141:03 - so now we have this kind of refactor so
141:06 - it's just is simply going to be projects
141:07 - and this will probably just say tasks in
141:08 - a bit and in our projects panel what we
141:11 - want to do is we want to list out text
141:15 - field
141:17 - so
141:19 - can create or we can create a record
141:24 - right here I'm going to say
141:29 - textfield
141:33 - and we just want to kind of like
141:36 - allow the user to type in the new name
141:37 - of their project so I'm gonna say C
141:43 - leaseholder is going to be
141:46 - I project need not save this and make
141:51 - sure everything is correctly alright so
141:53 - we have a text field called my project
141:54 - name and then we also need like a Smit
141:58 - button so I'm gonna say B button
142:02 - you
142:05 - going to have a create on it
142:12 - in fact let's just do a little bit of
142:16 - flex grid stuff so we can lay it out
142:18 - okay I'm going to say inside here it's
142:21 - going to be the B layout
142:26 - and of course we need to be flexible
142:28 - wrap
142:31 - you
142:37 - this is basically so we can have a
142:39 - button on the right
142:42 - feel on them so
142:44 - just do this put the text field in the
142:47 - v8 a small eight
142:52 - the button
142:59 - well
143:02 - of course I like adding icons to my
143:04 - button so let's just add a V icon here
143:10 - you
143:12 - it adds circle
143:14 - leave that
143:17 - awesome and of course
143:18 - we should do a little bit of margin
143:19 - right
143:21 - [Music]
143:23 - and we can fix the style and stuff in a
143:25 - second so let's see the button it
143:27 - probably also be color of green
143:32 - let's give it a virgin top of two
143:35 - [Music]
143:36 - it just moves down a little bit
143:41 - let's give it dark and see what happened
143:44 - all right so we have a crate button now
143:45 - that looks a little bit nicer it's a
143:46 - little bit down further line up with
143:48 - this
143:50 - [Music]
143:53 - so similar to what we did at the login
143:56 - and register we need to listen to when
143:59 - the keys change on the text field and
144:01 - then update the store and of course we
144:04 - also need to set the value to something
144:07 - that's coming from that store
144:08 - so if I were to go back to my store
144:13 - let's just assume that we have another
144:15 - module called Project CAS just to simply
144:20 - copy and paste what we have here
144:24 - you
144:27 - you
144:28 - I mean needing to reuse that like HTTP
144:31 - stuff so let's just do actions ITER's
144:33 - State and stuff so we're just good to go
144:36 - now
144:37 - and of course in the main index on Jays
144:41 - file we need to include that so
144:44 - let's include that projects module here
144:46 - and now we should be able to use that in
144:49 - our view application so first thing is
144:52 - I'm going to create something in our
144:54 - state called new project aim gonna be
144:57 - null and then I need a new mutation to
144:59 - set that new project name that's going
145:03 - to be state and named Oh state that new
145:09 - project name is able to name
145:17 - so then here of course we need to bind
145:19 - value I'm going to be new project name
145:24 - we need to make sure we include those
145:26 - who import map mutations app state from
145:34 - UX
145:38 - we're gonna say map state
145:43 - projects now because we're using the
145:44 - projects module and we need a new
145:46 - project
145:51 - and then for methods
145:57 - you
146:00 - mutations
146:03 - set new project name
146:10 - you
146:15 - again when we do inputs we just need to
146:18 - pass set new project name
146:24 - ISIL is verify that this is working as
146:26 - expected so I'm gonna type hello that's
146:28 - sending off the mutations for set
146:29 - project name and we're seeing that
146:31 - update get reflected here in the view X
146:34 - state
146:36 - so I guess the last step is we just need
146:39 - to send off in action to the backend to
146:44 - actually create this project name once
146:47 - we click that submit button so if we go
146:50 - back to the projects module alright so
146:54 - let me just copy and paste one of the
146:56 - actions here that we have a good
146:57 - starting point
147:02 - I'm going to say create project
147:08 - commit a state
147:19 - that's going to do an HTTP request to
147:25 - projects it's going to a post request
147:27 - and then we're going to pass the title
147:29 - the state dot new project name in fact I
147:33 - probably should call that new project
147:35 - title
147:36 - so let us be refactor that but anyway
147:41 - once that's successful what we're going
147:43 - to do is you're just going to MIT end
147:49 - project ADA
147:55 - let's not worry about errors right now
148:01 - and then we'd have a projects array here
148:04 - we should probably loop over at some
148:06 - point
148:08 - so what we need to do is in the
148:10 - mutations make a new one called
148:12 - project I'm going to say eight dot
148:15 - project stop push project
148:21 - so we can keep track of the new projects
148:22 - we create and then of course we need to
148:26 - set the project knee successful to go
148:29 - back to also set new project name say
148:33 - null
148:37 - so I think we're almost done with this
148:39 - but the only thing we're missing is the
148:40 - hole
148:43 - header if I go back to HTTP here I need
148:48 - to make sure I add a header so I'm gonna
148:49 - say headers is equal to authorization
148:53 - that's gonna be bearer I grab from the
148:56 - store be token from that authentication
149:01 - module that we have
149:06 - hmm
149:08 - all right so we did a lot of stuff let's
149:10 - just check to see what errors we may
149:12 - have so I type in a new product name
149:15 - called hello world
149:18 - and then when I click create
149:22 - we forgot to bind the create project
149:27 - go back here in for map actions
149:35 - we need to make sure we include that
149:37 - method
149:41 - click this
149:43 - just need to make sure we call it
149:48 - let's try again create sending-off and
149:52 - request to API slash projects rating a
149:54 - 401 unauthorized let's look at the
149:57 - network tab and see what's going on here
150:00 - and saying my JWT is malformed
150:04 - you
150:06 - so let's look at the headers
150:13 - and for some reason the token is not on
150:14 - the headers so let's go back to http
150:18 - that I maybe spell something headers
150:22 - authorization
150:24 - error date ostentation
150:32 - hmm maybe it's just gonna refresh the
150:34 - page correctly so let me just do a hard
150:36 - refresh here hello world like create
150:46 - you
150:55 - oh okay so the issue is is we're not
150:59 - even logged in so I don't think we
151:01 - should be showing this view if we're not
151:03 - logged in so there may be a different
151:06 - way and I'll probably look this up to
151:07 - see if there's a different way to
151:08 - redirect but we try to hit the projects
151:10 - page here are the project view
151:16 - without being logged in
151:18 - Gosei mounted is a function and then
151:21 - when we're mounted just check to see if
151:23 - the token we don't have so I need to do
151:26 - computed
151:30 - app state
151:33 - indication actually no map eaters
151:40 - is fogged in
151:42 - [Music]
151:44 - so if we're not logged in go ahead and
151:45 - redirect to the login page
151:53 - you
152:05 - map inners is not defined ever have to
152:07 - import it so after Gators from the UX
152:14 - what happens here
152:17 - all right so now it's gonna make me a
152:19 - log in every time I type hello world
152:21 - here now great that going to app in the
152:25 - project so now I have a project so right
152:27 - here it created the project successfully
152:31 - in our back-end the only thing we need
152:34 - to do now is just kind of display it in
152:36 - a list
152:37 - let's visualize that really quickly
152:45 - inside of my projects panel up here I'm
152:49 - just going to creative
152:54 - I'm just going to loop over my project
152:56 - so v4 project in projects
153:05 - and make sure you map the project state
153:07 - some state projects
153:13 - we could simply just render out the
153:15 - project title here if we want it to
153:24 - oh I need to be bind
153:29 - is going to be project
154:04 - like to return
154:10 - that one
154:20 - I don't like this insolent so I'm going
154:22 - to just plus one
154:25 - let's read set to my serve
154:32 - you
154:48 - [Music]
154:51 - see
154:52 - absolutely abortion before sandy at the
154:55 - top
154:59 - it's only logged get login now
155:02 - my awesome project my clique creates
155:04 - notice that the project is now rendered
155:06 - because we did a b4 so I'm making some
155:10 - progress let me just go ahead and commit
155:11 - what we have and we I can create more
155:13 - logic in a second
155:20 - you
155:23 - so the next thing we want to do is when
155:25 - the projects component is mounted we
155:29 - want to fetch all the projects that the
155:31 - user has and just render it in this list
155:33 - here because if I were to not restart
155:35 - this page or refresh this page and log
155:38 - back in notice that we did create
155:41 - projects on that user but there's
155:42 - nothing that's showing up so let's move
155:44 - back to that project stop view file
155:49 - and let's also open up the project store
155:52 - in let's create a new action called
155:53 - fetch projects
156:00 - Big D can take the commit function
156:03 - in the state
156:06 - and what we're gonna do here is just
156:08 - return and the same thing that we did
156:10 - before
156:14 - on second
156:16 - all right so we're gonna do an HTTP
156:19 - method so we create that object and
156:21 - we're gonna do a get request on projects
156:24 - and of course we don't need to pass it
156:26 - any parameters so it should just return
156:28 - everything that is attached step
156:30 - projects and once we get our project
156:35 - data back actually we don't need state
156:38 - here we're gonna do a new commit called
156:41 - set projects and the back ends going to
156:46 - return an array so data is going to be
156:47 - an array of projects already so if we're
156:50 - doing a commit action we need to make
156:51 - sure we create that mutation I'm going
156:55 - to go down here and say is that project
156:57 - state projects and then I'm just going
157:01 - to simply overwrite state thought
157:03 - projects is equal to projects
157:09 - as an empty right here so we should be
157:10 - good to go we save this and now we
157:15 - should be able to map those actions and
157:17 - call that when our projects on it is
157:21 - melted
157:23 - you
157:26 - so let's go to our
157:27 - projects component since I'm in the
157:29 - project view right now and what we want
157:33 - to do is when this component is mounted
157:36 - we are going to fish the projects so I
157:39 - simply just need to go up here at a
157:42 - mounted function call
157:48 - to say this dot fish projects
157:52 - as simple as that it's going to run that
157:54 - action which is going to commit that
157:55 - projects data and we should see that
157:57 - reflected so I'm going to log in we see
158:00 - that it called set projects here
158:06 - which the pale
158:08 - turned was an array of two projects so
158:13 - Jaques is set on the state here so
158:15 - projects and then inside projects we
158:16 - have another attribute called projects
158:18 - might be a little confusing but hey it
158:19 - works and then you see that those are
158:22 - rendered up here and we can also go to
158:23 - our network tab and see that we made a
158:25 - request to our projects endpoint at API
158:27 - slash projects look at the response and
158:30 - we have two projects returned
158:34 - so pretty straightforward as to how to
158:36 - fetch projects and how to create
158:38 - projects now the two other pieces of
158:42 - functionality we kind of need for
158:44 - projects is we need to be able to edit
158:45 - this title and we need to be able to
158:47 - delete the project
158:54 - so what I'm going to do is I'm going to
158:56 - try to add a button here which is like a
158:57 - pencil button and when you click it it's
158:59 - going to make this become a text field
159:01 - so that we can edit it as needed so
159:04 - let's go back to our project stop view
159:07 - file and find where we are
159:12 - rendering that project title which is
159:14 - here on line seven
159:16 - hmmm so instead of rendering bat let's
159:19 - just go ahead and
159:23 - make an icon
159:26 - is going to be a pencil
159:33 - we'll find out in a second
159:36 - I have to do a little bit of layout /v
159:40 - flex to get this to work out correctly
159:43 - in fact I should say edit not pencil
159:49 - so save that we have pencils next to our
159:51 - text now which is step in the right
159:54 - direction
159:55 - we want to make sure that the layout is
160:00 - set up correctly so let's just go ahead
160:02 - and do a V layout here
160:05 - you
160:07 - and in heroes do we flex
160:14 - and we want this to be analyst to say if
160:17 - you fix a nine and the rest could be a
160:20 - three let's make the title be on the
160:24 - left and we can make that edit button be
160:27 - on the right
160:34 - you
160:40 - mmm okay so making some progress let's
160:43 - align the text to the left so on the the
160:47 - Flex here I can say class let's say text
160:50 - X X s left and that's a built in class
160:54 - for beautified to kind of align stuff to
160:56 - the left all of my text will be aligned
160:59 - to the left now
161:05 - I just add a little bit of margin to the
161:07 - bottom of these so let's see each div
161:09 - I'm into a class of margin bottom of to
161:12 - see if that's enough looks a little bit
161:16 - better and of course I'm going to say
161:19 - that this is a project down here I'm
161:21 - going to make a new style
161:23 - I'll dot project and that's going to say
161:25 - margin art that's going to be font size
161:28 - of 18 pixels
161:32 - see that's big enough
161:35 - it's okay
161:37 - be something bigger like 24 and then
161:40 - I think I want to add a little bit of
161:42 - space above this so if we go to the
161:45 - panel I'm going to say class is adding
161:49 - top of four and see if that pushes it
161:51 - down
161:52 - but then on the wrong thing
161:55 - you
161:59 - so I'm just going to do margin-top of
162:01 - you here instead
162:03 - there we go that looks a little and then
162:06 - this is going to give it a little bit of
162:08 - margin too
162:13 - the margin top of four just to push that
162:15 - whole thing down get a little bit of
162:16 - space all right
162:20 - so again what we're trying to do is when
162:22 - we click on this edit button we want to
162:24 - change this to a V text field so that we
162:26 - can edit the hello world project title
162:31 - so if I go back to where we are
162:33 - rendering that title out
162:36 - here hmm we're gonna kind of have two
162:39 - things that need to interchange
162:42 - depending on if the project is an edit
162:44 - mode or if it's not in edit mode
162:48 - you
162:51 - so let's just pretend that project has
162:55 - an is edit mode boolean so I'm gonna do
162:58 - a span and say B if
163:03 - project dot is edit mode we're going to
163:06 - display something
163:08 - which is going to be the project title
163:14 - otherwise we're going to display a V
163:17 - text field e text field
163:22 - again we do the opposite of that and you
163:24 - probably use a switch case as well I
163:25 - think you has a switch case support so I
163:29 - say if it's not in edit mode we're
163:31 - simply not going to display the text
163:33 - field
163:35 - you
163:38 - okay then inside this text field we're
163:41 - going to do value is going to be equal
163:44 - to project on title
163:50 - back to this
163:55 - save this and make sure this is
163:57 - displaying correctly
163:59 - of
164:01 - and extra space
164:08 - you
164:16 - I think I have these swaps so that needs
164:18 - to be if it is edit mode in this if it's
164:20 - not- mode
164:22 - hmm okay so you saw it was displaying a
164:24 - textfield before and that was just
164:27 - because I had the boolean swapped so now
164:29 - if I click on this icon what we want to
164:32 - do is change the project's is edit mode
164:35 - boolean to true
164:38 - down here for the button I'm going to
164:40 - say at click that edit mode
164:47 - and pass it the project here
164:54 - you
164:58 - so let's go and actually ten like we
165:01 - have a mutation that we can call so here
165:04 - we're gonna map mutations and call set
165:06 - edit mode and that needs to be true
165:11 - actually so wherever I called set edit
165:13 - mode let's just say that's going to be a
165:15 - value of true
165:23 - I always keep like that so set edit mode
165:25 - and if I go to projects and go to my
165:26 - mutations let's just add another one
165:28 - called set edit mode state and that's
165:30 - going to be project then inside here
165:34 - we're going to do project dot is edit
165:36 - mode is equaled
165:38 - you
165:43 - let's see if that actually changes our
165:46 - state as we click things
165:49 - like this
165:52 - the edit mode is set down here and his
165:56 - MANET mode is edit mode is set to true
165:58 - and the issue that we're having here is
166:01 - nothing is being reflected in our state
166:04 - and that's because is edit mode doesn't
166:06 - actually exist on the project so this is
166:08 - kind of a nuance in regards to using
166:12 - view where the UI is only going to bind
166:16 - the stuff that actually exists so what
166:19 - we need to do instead is if we go back
166:21 - instead of doing project on is edit mode
166:23 - true we need the first import view
166:29 - you
166:31 - and then down here instead of just doing
166:33 - this we need to save you a set project
166:35 - is edit mode and then we need the
166:38 - passage through
166:40 - in the
166:42 - make sure that it binds correctly to
166:43 - that boolean once we set it
166:46 - but oh this music of
166:55 - all right so if I go back look this
166:58 - notice that it changes to the text field
167:01 - and right now we don't have a way to go
167:03 - back because we don't have like a cancel
167:05 - button or a check button so let's kind
167:07 - of add that so let's go back to our
167:08 - project stop view and I'm going to add a
167:11 - check
167:12 - down here
167:15 - you
167:16 - the same same ideas gonna have a check
167:19 - icon when you click it it's gonna call
167:21 - unset edit mode so we're going to assume
167:24 - that we have an unset at it mode we're
167:26 - going to go to our
167:29 - down here and at this point it's
167:33 - probably safe to assume that edit mode
167:36 - is defined on the project because it
167:38 - can't be true unless you set it
167:40 - so I should be able to do project out is
167:42 - that it Modi's equal to false but just
167:44 - in case let's just keep it as is like
167:46 - this
167:50 - go back we should have a checkbox that
167:53 - shows up of course we need to probably
167:55 - do a B if to display it and hide it
167:57 - anything so if I click on it B pencil
168:00 - but going to edit mode if I click on the
168:02 - check it goes back to non edit mode
168:04 - let's make sure we toggle those
168:06 - correctly
168:08 - going back here let's find that check
168:10 - icon I created and I'm gonna say V if
168:14 - project dot is edit mode its false and
168:20 - then for this one
168:23 - the edit mode is true we want to display
168:25 - a check
168:27 - so now we can toggle between them
168:31 - pretty awesome so let's go down to the
168:34 - style and let's just do
168:39 - I think we want to make it so when we
168:40 - hover over this we have a cursor so is
168:42 - this actually old
168:48 - class of icons so if we go to our style
168:51 - and say icon cursor is a pointer
168:57 - just so we get some feedback as a user
168:59 - when we hover over stuff we probably
169:02 - also want to say icon hover background
169:06 - actually has to be color of
169:11 - make it gray I guess
169:13 - short color was before
169:17 - so now it's a little bit darker when we
169:18 - hover over it
169:24 - oh so we're kind of getting closer to
169:29 - implementing this edit functionality so
169:31 - now if we were to change the value of
169:34 - hello world to what is up of them like
169:37 - that notice that nothing changes because
169:39 - we haven't actually bound to the input
169:41 - call back on the project edit so we need
169:44 - to go back and go here and say add a new
169:50 - mutation called set project title state
169:55 - project
169:58 - actually this is going to be a message
170:01 - so I'm gonna say project title
170:08 - and then project that title is equal to
170:10 - title
170:12 - mutation we can set the title and if we
170:15 - go back to our projects view we again
170:17 - need to make sure we grab that mutation
170:20 - so I'm going to go ahead and grab that
170:21 - set project title from the project's
170:24 - module
170:28 - and then when we change the value of
170:30 - this let me say at input I want to go
170:34 - ahead and just call set project title I
170:37 - want to pass it the event
170:45 - I don't know if I need to do this let me
170:46 - just try this so set project title and
170:49 - then take a object
170:52 - object is going to have the project so
170:54 - I'm gonna say project and then also the
170:56 - title is going to be equal to the event
170:59 - you
171:01 - you
171:05 - I think I'm I'm beginning some type of
171:08 - air
171:09 - Lindt air or something this is not
171:11 - single lime
171:18 - you
171:26 - oh you know what I'm doing wrong I have
171:28 - I'm updating the wrong thing hold on
171:30 - inputs declared twice on this I'm
171:32 - updating the wrong text field so if I go
171:33 - up here to the text field we're supposed
171:35 - to be updating let me just add input to
171:38 - that so now we're calling set project
171:40 - title with the project and then the
171:42 - event which is going to be in the text
171:44 - we may need to verify this in a second
171:47 - but let's see what happens if we run
171:48 - this so login and I'm going to go ahead
171:52 - and try to edit this by adding an
171:53 - exclamation mark it dispatched that
171:57 - mutation
171:59 - and we have the payload we have the
172:00 - project and we also have a new title
172:02 - that we want change it to
172:04 - then if I go into my projects array
172:06 - notice that the corresponding project
172:08 - has the exclamation mark so we're now
172:11 - we're we are reflecting the value of the
172:13 - title successfully the last part is when
172:16 - we check click the check box we want to
172:18 - actually persist so if I go back to that
172:21 - check box here
172:24 - instead of saying unset edit mode I'm
172:27 - just going to say save project
172:31 - you
172:37 - let's go back and pretend like there's
172:39 - an action I'll save
172:45 - edit mode for now now let's just be
172:48 - explicit and call a save project
172:52 - then go back to our actions or our
172:53 - projects module and create an action
172:56 - called say project
173:04 - basically what we want to do
173:08 - is just send off a at request to the
173:11 - endpoint that we have so I miss HTTP
173:13 - catch on projects slash project on ID
173:18 - and then this needs to be string
173:20 - interpolation so we can use back ticks
173:26 - okay there you go then of course we need
173:29 - to pass the project that we're trying to
173:30 - save and that should hit the
173:33 - can save and actually persist the
173:35 - project project state to the back end
173:39 - and when we get a response back hush for
173:44 - at this point we really need to do much
173:46 - so we just let's just delete that for
173:49 - now
173:52 - commit what we want to do is actually
173:54 - yes so if I say if successfully what
173:55 - we're going to do is we're going to
173:56 - commit and say unset edit load project
174:05 - all right so it's gonna persist it if it
174:07 - was successfully persisted to the back
174:09 - end we then just just say or unset it
174:12 - from edit mode so it's going back to the
174:14 - normal view let's try doing this and see
174:17 - what happens so I'm going to go to the
174:19 - check pencil add a couple of exclamation
174:22 - marks and click the check box notice
174:25 - that it went back to the normal view
174:28 - instead of the edit mode and they made a
174:31 - network request to project / - we sent
174:35 - the payload of title hello world blah
174:37 - blah blah and we got a response back of
174:39 - the new object so now when i refresh the
174:42 - page and log back in
174:49 - notice that we have that item our that
174:51 - title persistent now well so we're
174:54 - making some good progress we have the
174:56 - ability to create new projects we have
174:58 - the ability to edit projects
175:06 - one thing that we don't have is when I
175:07 - click this edit button it doesn't focus
175:10 - on this automatically so a cool little
175:13 - attribute we can add two V text field is
175:16 - auto focus so let me go and say auto
175:19 - focus here so now whenever we click on
175:24 - that it should automatically focus on
175:25 - there and it did mm-hmm what we also
175:30 - want to do is if we press ENTER on our
175:32 - keyboard it would be nice if it just
175:35 - does that save thing for us
175:38 - you
175:45 - so let's go to
175:48 - text field we're going to say key up
175:51 - enter but basically if the user were to
175:54 - have a key up event on the inner we're
175:56 - just going to say save project and pass
176:00 - it project
176:07 - and this is basically doing the same
176:09 - thing as clicking the check button let's
176:11 - save that and see if that works
176:15 - I'm gonna click a pencil add something
176:18 - click enter
176:19 - notice that that got persisted to
176:21 - Project number three now
176:27 - all right so now we're kind of on the
176:28 - last
176:29 - basically we need to be able to delete a
176:31 - project from that list so you know the
176:35 - drill basically we're gonna have to have
176:36 - a new action called delete project so
176:39 - I'm just gonna copy and paste this all
176:41 - delete project it's going to take a
176:45 - project it's going to make a delete
176:47 - request to project slash ID we don't
176:50 - need the past data then once the project
176:52 - is successfully deleted
176:54 - we want to remove project from our list
176:58 - so we're going to need a new mutation
177:00 - down here I'll remove project and that's
177:04 - just going to splice out the project
177:06 - from the list so I'm gonna say state
177:08 - that projects not splice state that
177:11 - projects dot index of project and then
177:15 - one and this is how you to remove
177:17 - something from an array so just going to
177:19 - find the index where this one exists and
177:21 - just splice it from the array
177:24 - you
177:25 - you
177:27 - so now in order to use that action let's
177:30 - go back to our view component let's go
177:33 - ahead and bring that in and let's go
177:35 - ahead and make a new button our new icon
177:37 - which is going to be a delete icon and
177:42 - we're going to be calling the leap
177:43 - project when we click it so here I'm
177:46 - gonna say delete we only want to show it
177:48 - when we are in edit mode and want to
177:50 - call delete project on that if I go
177:53 - ahead and save that
177:58 - log back in let's see let's click on
178:01 - actually we want to show it all the time
178:06 - I think
178:08 - they've seen me completely so now we
178:10 - always have that trashcan that we when
178:11 - we click it's just going to delete it we
178:14 - go to the network tab notice that made a
178:16 - delete request who project to and if I
178:21 - were to refresh and log back in that
178:25 - project has been deleted from the list
178:30 - and delete everything and see what works
178:38 - one thing I also notice is when I press
178:41 - ENTER on this text field that it does
178:43 - not create the project so let's go ahead
178:46 - and try to implement that as well so
178:49 - very similar to before when we click on
178:52 - create or you enter we want to write the
178:57 - project
178:59 - so here in the text field when we do a
179:01 - key up we just want to say create
179:03 - project give it that function go ahead
179:06 - and save this go back and now when I
179:08 - press ENTER on my keyboard it's going to
179:10 - create it for us what remain a lot of
179:14 - progress let's go ahead and commit what
179:15 - we have this is going to be called
179:18 - editing elite projects all right so
179:23 - before we move on to this tasks panel I
179:26 - want to go ahead and abstract some
179:27 - things that we can reuse components
179:30 - because task is basically going to be
179:31 - very similar to this projects panel so
179:34 - first thing I want to abstract is this
179:36 - bottom create thing or section that we
179:39 - have I want to have a component which
179:41 - has a gray button where I can change
179:43 - this text dynamically through a prop and
179:46 - of course invoke different callback
179:48 - functions depending on what we want
179:52 - so let's start with this right here
179:56 - so if we go back to our project site
179:57 - view file notice that this bottom
180:00 - section here
180:04 - we want this is what we want to kind of
180:05 - abstract into a separate component so
180:08 - down here I'm gonna say a new file
180:10 - called create record view go ahead and
180:14 - scaffold that up
180:16 - and
180:18 - that same layout of code that we had
180:20 - other file
180:23 - and let me just go ahead and
180:25 - that doesn't even just here so say great
180:29 - record
180:32 - you
180:36 - make sure we have the components
180:39 - components
180:44 - and of course we need to import that so
180:51 - you
180:54 - okay so if we wanted to abstract this
180:59 - into a different class basically we just
181:02 - wanted to allow the props to be passed
181:06 - in for setting like placeholder text and
181:08 - we want to emit certain events when
181:12 - things changed so the first thing I can
181:14 - do here or placeholder I'm just going to
181:18 - say this will be placeholder
181:22 - so up here x8 props we have lace holder
181:27 - and then inside projects we just simply
181:30 - pass
181:32 - you
181:35 - place holder is equal whatever I just
181:38 - copied out
181:41 - let's see this was
181:43 - I project is odd or something like that
181:50 - this so this probably won't actually
181:52 - work out of the box as there's gonna be
181:55 - errors
182:03 - so before we make much progress let's
182:06 - just comment out things we don't want
182:13 - so I can show you some progress let's
182:15 - see unfortunately I can't really easily
182:19 - calm down crap so
182:21 - I feel like it cut it out or something
182:24 - all right so different approach let me
182:26 - just go ahead and make placeholder
182:27 - functions and stuff for all this and
182:28 - then we can refactor as is so we're
182:32 - passing in the placeholder text that's
182:34 - awesome what we want to do is when the
182:37 - input text changes on this text field
182:39 - that of calling a function we want to
182:42 - emit on input
182:50 - event
182:52 - now our existing component can just
182:54 - listen to that and call our function as
182:56 - needed so let's go to here we can say on
182:59 - input is equal to that new project name
183:06 - with whatever that was so
183:12 - okay and then when the value is passed
183:15 - they basically we need to have value as
183:17 - a prop to
183:22 - value as a prop and then instead of new
183:25 - project name I'm gonna say value go back
183:27 - to here I'm going to pass a value in
183:39 - and then on key enter
183:43 - instead of doing
183:45 - we just want to say MIT create
183:52 - so then over here we can just listen to
183:54 - the create event and just simply call
183:57 - create project
184:00 - so we have that abstracted into a prop
184:03 - this into a prop
184:05 - and then on inputs we pretty much emit
184:08 - on input with the past event and then
184:12 - for this one when we hit enter we're
184:15 - going to emit a create there might be a
184:17 - shorthand to do this since we're just
184:18 - propping our yep propagating that event
184:21 - up maybe just pass it event or something
184:22 - I'm not sure that'll feel free to
184:24 - comment if there's a better way to do
184:26 - line seven same thing with when we click
184:30 - on the button we want to simply just
184:31 - emit create and luckily our projects
184:37 - component is going to call Cory project
184:39 - on that already
184:42 - these are persistent so we don't need to
184:45 - change those so let's go ahead and save
184:46 - this and see what errors we may have
184:50 - you
184:54 - refresh this page and see if we're
184:56 - getting any type of errors
185:00 - it looks like we're not so
185:04 - the prop is my project is and we're
185:05 - passing that in here
185:10 - a I project name
185:15 - when I type something click create
185:20 - same logic as before so it's sending off
185:23 - that event to create the project let me
185:26 - just refresh the page and to make sure
185:27 - that's all system and working as I did
185:29 - before
185:31 - so if you noticed how easy it was to
185:33 - kind of abstract that little bit of
185:35 - functionality into my own view component
185:37 - and now basically anywhere my app where
185:39 - I want to have something that looks like
185:40 - this I could use it and we're going to
185:42 - be using that in our test panel in just
185:44 - a second and before we move on let me
185:47 - just make sure I aligned something to
185:51 - the right so I'm gonna say text small
185:53 - right this crate button should be as far
185:57 - to the right as possible
185:59 - so for this other piece of functionality
186:01 - which we're going to be using in the
186:02 - test panel basically we want to create a
186:04 - new component I'm going to call that
186:07 - editable record
186:11 - you
186:13 - pull that up and we're going to be doing
186:14 - the pretty much the exact same thing we
186:16 - did before we're going to copy and paste
186:17 - this to editable record bring it in
186:21 - we're gonna find that layout section and
186:25 - just copy and paste that into that
186:28 - editable record
186:32 - there
186:35 - boom
186:39 - we're going to make sure we try to call
186:40 - it here so editable record
186:46 - of course make sure you bring it in
186:47 - inside your components
186:51 - save this and let's see what we should
186:53 - pass to it to make this work
186:55 - so the first thing the UI's gonna be
186:58 - broken since we have to kind of fix all
187:00 - this stuff first first thing we want to
187:03 - do is a profit is check to see if is
187:04 - edit mode or not so we are going to say
187:06 - bind is edit mode and we're going to
187:09 - pass it
187:10 - this
187:15 - is edit mode so that's going to be
187:17 - sending in the project that is edit mode
187:18 - and then down here of course we need to
187:21 - define a props array
187:26 - and just to find his edit mode
187:29 - you keep on going through and kind of
187:30 - doing the same thing so instead of
187:31 - project title here let's make it a
187:33 - little bit more abstract and that's just
187:35 - going to be title
187:37 - so it all
187:40 - sure that we're passing that in so title
187:42 - is equal to project title
187:47 - hmm so this we can get rid of project
187:52 - that title we don't need we can use
187:55 - title say project I'm gonna instead of
187:59 - doing project here I'm going to call it
188:01 - record so over here I must say record is
188:04 - a prop we pass in and anywhere we see
188:07 - project I'm gonna say record
188:11 - record record
188:16 - get rid of his edit mode it's not as
188:21 - edit mode
188:25 - you
188:28 - the inputs I'm going to say emit
188:33 - input and pass it the event here and
188:36 - then what we need to do in the file
188:38 - above is just listen to on input and
188:43 - we're going to call that same
188:44 - functionality so set project title
188:53 - this needs to be removed see
188:58 - okay let's just look through this really
188:59 - quick and see if we're maybe missing
189:01 - anything mm-hmm this add text right to
189:05 - this because I noticed in the UI I
189:06 - wasn't already onto the right
189:09 - you
189:11 - right so for these events this app shot
189:15 - component editable record should have no
189:17 - idea if it's a project or task or
189:19 - whatever so instead we need to say
189:24 - omit on edit
189:32 - and then of course in here we need to
189:34 - say on edits dispatch that mutation same
189:40 - thing for this
189:42 - instead we're to say omit unsaved
189:46 - basically when they click the Save
189:47 - button
189:51 - to bind to that callback so unsaved make
189:55 - sure we call that previous method we
189:56 - were doing before
189:58 - and then of course getting kind of
190:00 - tedious so I'm gonna say on deletes
190:04 - make sure that we find it
190:10 - and I should say project four although
190:16 - so if you notice here basically this
190:18 - component has absolutely no knowledge
190:20 - about if it's a project or not actually
190:23 - this one used to be emit on save save
190:31 - project
190:33 - right so you see no instance of project
190:36 - anywhere and basically this is just a
190:38 - very abstract component which which
190:39 - takes in props and emits events when
190:42 - certain things happen which the
190:43 - project's component is kind of
190:46 - responsible for changing and dispatching
190:49 - the actions are emanating mutations so
190:54 - let's see what potentially is still
190:55 - broken in the UI so first of all it
191:00 - looks like none of the titles are
191:01 - showing up
191:07 - so we have title here down to project
191:11 - title
191:16 - idle should be rendered here
191:20 - that should only edit our render when is
191:22 - not edit mode so that's probably the
191:24 - issue
191:28 - let me just refresh the page and see
191:30 - what errors we have
191:36 - it looks like that might be working now
191:38 - so
191:40 - sit out and see if it's still working as
191:41 - it did before refresh the page
191:49 - so we have now to abstract components
191:52 - which we can use in this task panel to
191:53 - basically edit tasks delete tasks save
191:57 - tasks and create new tasks and all we
192:01 - have to do is pass in certain props to
192:03 - do so
192:07 - so let's just go ahead and commit what
192:09 - we have I'm gonna say editable records
192:11 - and create records
192:18 - okay so now for the kind of the last
192:20 - part of this tutorial let's go ahead and
192:23 - finish out the implementation of that
192:25 - asks panel so if I go back to my
192:27 - projects out view view let's assume we
192:30 - have one called tasks here
192:34 - have a new component called tasks I'm
192:36 - going to create that and make sure that
192:39 - exists in my components
192:41 - and then I'm going to make a new
192:42 - component called tasks that view athol
192:46 - that up I'm
192:49 - this it's going to be very similar to
192:50 - projects top view
192:53 - the other one so let me go to this see
192:57 - what we got
192:59 - so similarly we're going to need a panel
193:01 - but it's going to have a title of asks
193:09 - boom that seems like that's working fine
193:12 - and inside that tasks panel we're gonna
193:15 - do something very similar where we're
193:16 - going to be looping over
193:19 - tasks some say and brought our tests and
193:23 - tasks
193:27 - or a V for tasks and task I'm going to
193:30 - get the ID for the key
193:33 - is to make sure that we grab this but
193:36 - we're going to do a little bit smaller a
193:38 - font size so I'm going to eat instead
193:40 - for a task
193:44 - and then here I can just say tasks our
193:46 - description for now
193:51 - let's see what it has no matching
194:14 - for some reason it's not Muslim enough
194:16 - Luke it's working fine now so
194:20 - let me just refresh the page in case
194:22 - we're getting in Severus
194:26 - our beer method task is not defined on
194:28 - the end but it's okay
194:30 - all righty so now let's try to
194:33 - implementing the store so notice before
194:37 - we had a projects in the store let's go
194:39 - and create something for the tasks so in
194:43 - the store I'm going to add a new one
194:44 - called tasks ojs
194:49 - and I'm just gonna copy and paste
194:50 - projects and kind of bring it down we
194:53 - have a good starting point
194:57 - let me do all this
195:02 - okay
195:06 - okay so I created our tests module make
195:09 - sure we include it here I'm going to say
195:12 - tasks
195:14 - and make sure you include that module in
195:16 - your main store object
195:20 - so for the first thing we're doing we
195:22 - just want to rent her over the tasks
195:23 - right which that should be set up ready
195:25 - to go
195:27 - um
195:30 - actually it's not set up because we
195:31 - forgot to map the actions so here I'm
195:35 - going to go over and I'm going to copy
195:36 - this we're going to be using a lot of
195:40 - the same map actions mutations in state
195:42 - and what we want to do is inside of the
195:45 - computed
195:48 - we want to call map state
195:52 - going to take tasks and that's going to
195:54 - take asks
195:59 - this is obviously going to throw an
196:00 - error because we're going to use so let
196:02 - me just give her those for now
196:09 - you
196:13 - so no more errors anymore
196:20 - you
196:24 - all right so the first thing we want to
196:26 - do is if we go back to this component
196:28 - here and we click on one of these we
196:31 - want to make sure that we set the
196:32 - current project that we're trying to
196:33 - edit so going back to our project module
196:37 - let's go ahead and say make a new
196:42 - mutation called set current project
196:48 - and state that project
196:50 - just to keep track of what project were
196:51 - kind of a clicked on
196:56 - that current project instead of just
196:58 - project
197:05 - you
197:09 - okay so then in our projects on view
197:11 - when we click on one of these editable
197:13 - records so on click
197:17 - we want to call set current project is
197:20 - equal to project of course we haven't
197:24 - brought that in so let's go and grab
197:26 - that mutation
197:34 - you
197:39 - and then for editable record we don't
197:41 - have an on-click callback yet so let's
197:43 - go here and let's go back to our title
197:45 - and basically if someone clicks it I
197:47 - want to call on click I want to emit on
197:49 - click
197:51 - you
197:53 - so that we can keep track of what
197:57 - we have clicked so if I go back to my
197:58 - view debugger and click on some of these
198:01 - notice that the current project is
198:03 - changing as I click different projects
198:06 - here
198:08 - you
198:15 - but we want to take that a step further
198:18 - Sukie set current project should
198:22 - probably an action which fetches the
198:23 - tasks as well so what we can do is in
198:27 - the tasks module let's add a new action
198:29 - called fetch tasks for current project
198:35 - that's gonna be something that has MIT
198:40 - probably going to have root State
198:49 - Shammi call it set tasks for project
198:52 - going to take a project as a second
198:55 - so very similar to before let's just
198:57 - grab the HTTP method here I'm going to
199:00 - just copy and paste that so we have
199:02 - something to work with
199:04 - you
199:10 - so that's going to fetch all the tasks
199:12 - for this project ID that we're passing
199:13 - in for the action and I'm say set tasks
199:17 - is equal to data
199:24 - and of course make sure that we have a
199:26 - mutation called set tasks state tasks
199:30 - this the RM say state task is equal to
199:33 - tasks
199:38 - and then now when we actually
199:42 - click on a task we like the projects
199:46 - when we call set current project what we
199:48 - want to do instead is make a new method
199:52 - called set current project I'm sure I'm
199:56 - gonna call it current project clicked
200:00 - call it project click sorry I might
200:01 - change my mind a lot so what we want to
200:03 - do here I just say this dot set current
200:06 - project or in a passive project then
200:09 - we're gonna say this dot fetch asks for
200:13 - project
200:16 - and then make sure we just map the
200:18 - actions for tasks here
200:21 - fetch asks for project
200:31 - all righty so basically what we should
200:34 - have seen is if we click on that tasks
200:36 - over here we click on a project that
200:38 - mean it should make two mutations so
200:40 - it's going to first call set current
200:43 - project which it is
200:47 - then it should make a request
200:50 - to the tasks which I don't think it did
200:53 - so let's kind of go back and debug why
200:54 - that might not be happening
201:01 - make sure we call it fetch tasks for
201:04 - project an action and we should be able
201:07 - to call it correctly so if I go back
201:09 - here
201:11 - in action here Rajat clicked oh I know
201:14 - why so we made this new function but we
201:16 - didn't actually use it so let's go back
201:17 - up here and call our two clicked
201:24 - when we click on this notice that it
201:26 - makes a request for the tasks this is
201:27 - going to return an empty array because
201:28 - we don't actually have any and that
201:31 - should populate our tasks up here when
201:33 - it actually is defined
201:36 - and we'll see that in a second so let's
201:38 - go and start working on the next piece
201:41 - of functionality which is going to be
201:42 - the create record so if I go back to our
201:45 - task component I'm just going to go
201:47 - ahead and add a create record section
201:51 - well I need to dot dot which is gonna be
201:53 - like a task placeholder
201:56 - they set new tasks when it's the input
202:00 - changes I'm gonna say set new task name
202:03 - the valley is going to be a new task
202:05 - name and create is gonna be create to
202:07 - the task so very similar to the
202:09 - project's but we need to make sure that
202:11 - we bring those in so let's map new task
202:14 - name
202:17 - and four methods let's bring in map
202:22 - action from tasks that's going to be
202:25 - called create task
202:30 - and then we need some mutations for
202:32 - masking mutations
202:38 - that's going to be called set new task
202:40 - name
202:43 - and of course those don't actually exist
202:45 - yet so let's go back to tasks and we
202:48 - need to create one called set new task
202:50 - name
202:53 - state that new task name is equal to new
202:55 - task name
203:00 - and then we need the whole create task
203:02 - here someone's going to copy and paste
203:04 - basically what we have here and then
203:06 - edit it as needed
203:13 - the way we did it with the back end I
203:15 - think we actually need the project so
203:16 - what we can do is pretend like we have
203:19 - the project ID
203:26 - I think it might be that
203:32 - you
203:52 - let me just double-check that I'm doing
203:54 - that right
203:59 - at root state projects
204:01 - that ID
204:03 - so we're basically just grabbing that
204:05 - idea from the root state so we can know
204:08 - what tasks to append it to doing a post
204:11 - requests have the description here we're
204:14 - calling a pin task so make sure we have
204:16 - that
204:18 - asked here so I'm going to say state
204:20 - contests that push tasks
204:23 - you
204:29 - let's see if this is all working
204:32 - you
204:37 - you
204:44 - got a comma here
204:47 - or gods
204:52 - chins
204:56 - yeah
204:57 - let's see how this works
205:00 - my great record is not included so make
205:03 - sure we also did components and then
205:05 - make sure we create record let me just
205:08 - copy and paste that import from the
205:10 - project so
205:12 - oh here should we import that save it
205:20 - also notice here in our tasks panel we
205:23 - have the same pretty much component that
205:25 - we had over here but it has a little bit
205:27 - different placeholder text now if I type
205:29 - in and clean my room
205:32 - at setting new tasks name which is
205:34 - updating our test module new test name
205:37 - here and when I click create
205:42 - an error and that's because let's see I
205:47 - don't think I click the project yet so
205:49 - that's something we need to kind of fix
205:51 - basically we shouldn't show this panel
205:53 - unless the current project is clicked so
205:57 - if I go back to our projects view
206:07 - and I grabbed map state map state
206:12 - and make sure that we are including
206:19 - checked
206:21 - basically we don't want to display this
206:23 - section if we haven't selected a project
206:26 - yet so if it is selected we'll display
206:29 - it otherwise we don't
206:34 - to get that error because there's no way
206:35 - to actually create a task unless you've
206:37 - clicked one yet so let's click on
206:38 - awesome and then let's try to create a
206:40 - task
206:43 - current project is selected of ID of
206:45 - five and now when I click create it
206:47 - should try to make a request to the task
206:50 - endpoint which it did that was
206:52 - successful or return to 200 status and
206:54 - it sent back our task and then we
206:56 - appended it to our tasks array
207:02 - so at this point what do we notice well
207:06 - this is very similar to this over here
207:08 - so let's go ahead and bring in that
207:09 - other component we created and try to
207:12 - reuse it
207:14 - so
207:16 - projects I'm going to bring in editable
207:18 - record
207:20 - Riggin in here make sure you exist in my
207:23 - components
207:25 - mmm and I'm gonna do very very similar
207:27 - logic by just bringing that in so edible
207:30 - record here
207:32 - going to go back to my task component
207:34 - instead of just displaying the
207:36 - description let's display the editable
207:38 - record and instead here when I say task
207:41 - is edit mode ask set task title
207:49 - tasks clicked
207:56 - you
207:59 - actually let's see what happens if I try
208:00 - to comment
208:01 - does it there
208:05 - I don't ask work
208:09 - a set of title we want to do description
208:12 - display clean my room
208:16 - we don't wanna do any logic when we
208:17 - click it so let's just get rid of that
208:19 - but the other logic should say fairly
208:21 - consistent so let me go back and see if
208:24 - I can like
208:27 - to be able to style that task in a
208:30 - second so some things that we don't have
208:34 - yet is we don't have the set edit mode
208:37 - or save task or delete task created and
208:40 - set task description it's not pretty yet
208:42 - so let's just kind of work our way down
208:43 - these inputs and try to create what we
208:45 - need
208:47 - so here I'm going to say a mutation of
208:50 - set task description
208:52 - you
208:57 - that's going to take a ask in a
209:00 - description basically say task
209:02 - description it's a description
209:11 - make sure I rename title description
209:13 - here um set edit mode so I'm gonna go
209:17 - here set edit mode state ask and view
209:22 - dot set this is very similar to how we
209:27 - had it before so let's just go ahead and
209:28 - copy that in
209:35 - so just set edit mode here and then make
209:38 - sure we include view from the up import
209:45 - and we also have save tasks oh let me
209:48 - just copy save project and delete
209:50 - project and just kind of change that as
209:52 - needed into our actions so save ask I'm
209:58 - going to take a task
210:01 - hit tasks test that ID asked
210:08 - and delete tasks
210:12 - ask remove ask
210:19 - you
210:22 - forgot to bring in the unset edit mode
210:24 - so I'm going to do onset at anode be
210:28 - false
210:31 - hey let's see if we're missing anything
210:33 - you're missing removed tasks but we need
210:36 - to make sure we at
210:43 - a state test that by state on tasks
210:46 - index of task 1
210:57 - all right let's finally we need to bring
211:00 - these in so we have these actions save
211:02 - tasks and delete tasks so let's bring in
211:06 - lead tasks and save task set that task
211:11 - description is tation
211:18 - said edit mode is a mutation
211:24 - and let's see if this works
211:30 - click on this let's see if we can edit
211:32 - the task
211:35 - edited the tasks and saved it over here
211:40 - awesome
211:41 - and then if we try to delete
211:44 - one of these new tasks here make sure
211:48 - that that is working so request failed
211:50 - with 404 that's because we're trying to
211:54 - hit slash task when it needs to be tasks
211:56 - so if I go back to my
211:59 - Elite tasks method I just need to add
212:01 - slash tasks instead
212:09 - that delete that okay so that's
212:10 - basically all working as we did before
212:15 - that's basically working as the
212:17 - project's did over here then we can also
212:19 - just change our projects as needed to
212:23 - fetch different tasks here
212:25 - so I think the last thing I'm going to
212:27 - work on for this tutorial is putting a
212:30 - checkbox here that can mark a task as
212:34 - completed or not
212:36 - so to do that the first thing we want to
212:39 - do is kind of extend the existing
212:41 - editable record module that we have let
212:48 - me commit what we
212:49 - here are some say
212:56 - you
213:00 - and let me get back to
213:03 - Sulekha saying in the editable record we
213:05 - want to be able to include a slot so we
213:09 - can pass in the ability to render stuff
213:11 - to the left of our text fields in
213:15 - title
213:18 - or whatever it may be so what I'm gonna
213:20 - do is going to add a new element called
213:23 - slot
213:25 - basically whatever I pass in inside my
213:29 - projects or tasks component is going to
213:32 - render to the left of this text so an
213:34 - example if I go to tasks and for my
213:37 - editable record if I say I'll do like h1
213:43 - hello
213:46 - make sure I have the closing tag outside
213:47 - of that save this we should say hello to
213:50 - the left and of course this is just
213:52 - going to be on top right now because
213:54 - we're not floating it to the left Ernie
213:55 - what what we want to do in our case is I
213:58 - just want to make a checkbox
214:04 - following what we've done over here just
214:06 - get an icon but I go and put that inside
214:09 - the slot here
214:16 - going to go ahead and give her that
214:18 - stuff for now and save this and
214:21 - hopefully that is
214:24 - not what we're looking for we're looking
214:25 - for something called a check box
214:29 - so let me oh sorry I forgot to put it
214:34 - underscore here check underscore box all
214:38 - right so when we do that we get a check
214:39 - box
214:44 - but we need to be able to toggle between
214:45 - if it's a checkbox or if it's not filled
214:49 - out so there's another icon that we
214:52 - could use called checkbox outline blank
214:55 - so what we want to do here is basically
214:57 - just render
215:00 - some a different icon depending on if
215:02 - we're completed so I could say task dot
215:04 - completed and do a ternary operator and
215:07 - just simply return check box if we're
215:09 - completed or return check box outlined
215:12 - blank if we are not completed go ahead
215:15 - and save that if we go back notice that
215:17 - these two tasks are not yet completed
215:20 - additionally when we click on these
215:22 - check boxes we want to kind of toggle
215:24 - that completed state so let's just do
215:26 - that let's add a at click and I'll say
215:29 - toggle completed and then that's going
215:34 - to be a method which accepts tasks and
215:36 - of course that doesn't exist here so we
215:39 - need to go back to our
215:42 - tasks I'm going to say that's going to
215:44 - be an action so I'm say talk will
215:45 - completed is an action
215:48 - so we'll go back to our store load up
215:50 - the tasks module I'm going to add a new
215:52 - one called toggle completed
215:59 - and basically what this is going to do
216:02 - is we're going to do a commit to set
216:03 - that to either true or false so I'm
216:06 - gonna say
216:11 - we'll completed
216:13 - um
216:15 - I had to have a different name so
216:18 - I don't think I said that habit of name
216:19 - so I'm gonna do a mutation with the same
216:21 - name for now I don't know that's a good
216:22 - idea but let's just do it and basically
216:25 - task doc completed is going to be equal
216:27 - to a stock completed
216:31 - you
216:33 - I do believe if we go to the console
216:36 - when we try to fetch tasks
216:39 - that completed is indeed a attribute on
216:41 - that task so we should be good we don't
216:43 - need to do view dot set because we're
216:45 - actually handling that on the my sequel
216:47 - databases table so we have a mutation
216:52 - which is going to kind of modify or
216:54 - toggle that completed bullying and what
216:55 - we need to do inside this toggle
216:57 - completed action is simply commit that
217:02 - hmm but after we've admitted that we
217:06 - need to call save tasks here
217:10 - and actually instead of doing an action
217:12 - maybe we should just instead get rid of
217:15 - this action sorry kind of changing up my
217:18 - plans made coding which isn't
217:21 - necessarily bad to do but instead of it
217:22 - being a action let's just make it a
217:24 - mutation
217:26 - and what we can do is when we click on
217:29 - this
217:38 - I'm going to add a method down here
217:40 - called check
217:42 - clicked I think that's what I just had a
217:44 - call and we're simply just gonna say
217:46 - this dot welcome completed tasks and
217:49 - then I'm gonna say this dot save ask
217:53 - past that task at Clifton old
218:02 - I think I could have done this in the
218:03 - action
218:05 - it could just fire an action off of
218:08 - in action from this action but I think
218:11 - it gives us a little bit more
218:12 - flexibility if I don't actually save it
218:14 - when I toggle it but I want the mutation
218:17 - to just toggle the state and then I want
218:19 - the disk component to be responsible for
218:20 - saving it I don't want the action to do
218:23 - both of that
218:26 - so let's see if this works so if I go
218:29 - and click on my project here and I click
218:31 - on this task here first of all it's
218:34 - sending off a request to the network and
218:35 - completed is true if I go to my view X
218:39 - or view / e bugger we see that talk--i
218:42 - completed was fired completed to set the
218:45 - true if I cleared again completed is set
218:48 - to false and it's saving that task so
218:51 - let me just make a couple of ask and
218:54 - make sure that these get persisted when
218:56 - I create them and just refresh the page
219:01 - just to verify that everything is
219:02 - working as before and it is ok so we're
219:08 - basically at the end of our demo I mean
219:10 - I could probably spend more time
219:12 - sprucing up the Styles you know
219:14 - obviously when I hover over this it
219:16 - should be clickable or should have a
219:18 - cursor when I hover over this the text
219:20 - should change
219:22 - um but I guess in terms of this tutorial
219:25 - I don't want to spend too much extra
219:26 - time I'll assume this up I think we
219:30 - covered a lot of good grounds and like
219:31 - examples of how to build up a single
219:34 - page application and connect it to a
219:36 - REST API that we created by hand so that
219:39 - basically wraps up this full stack view
219:42 - and add-on SJS tutorial if you have any
219:45 - feedback or questions feel free to leave
219:47 - them in the comments below or you can
219:49 - message me on Twitter I could always use
219:51 - feedback if this tutorial was too quick
219:53 - or if I was jumping all over the place
219:55 - feel free to tell me so and maybe I'll
219:58 - make another tutorial in the future
219:59 - which isn't so sporadic and on the fly a
220:02 - person like tutorials that are kind of
220:04 - like unplanned so you can kind of see
220:07 - what I'm thinking and how my logic is
220:09 - applied to when I'm making applications
220:11 - and stuff alright so I think that's
220:13 - basically what I'm going to be covering
220:14 - in the full stack tutorial other than
220:17 - deployment which I'll do in a bit one
220:19 - thing I'll change is if you remember if
220:20 - we go back to our store and go to the
220:22 - index I disabled a plugin I'll create
220:25 - create persisted state I'm just gonna
220:27 - re-enable that and kind of explain what
220:29 - this does basically and now when i
220:31 - refresh the page I have to log in one
220:33 - more time but now when i refresh the
220:36 - page it's gonna cache everything that
220:38 - was in my store inside local storage
220:41 - meaning that I don't have to log in
220:43 - again or whatnot so basically exactly
220:47 - how I have my app state before I leave
220:49 - and refresh that's how it's going to
220:51 - load back up so if you notice I clicked
220:53 - on this project and it loaded back up
220:55 - for me so it's very useful in terms of
221:00 - like UX because you don't want to user
221:02 - to have to keep login and over and over
221:04 - again just happy their state stored
221:06 - locally and then once they refresh the
221:08 - page or go back onto the application
221:10 - everything is exactly how it was before
221:13 - so in order to get our single page
221:15 - application deployed out we first need
221:17 - to kind of build it so I'm gonna do in
221:18 - p.m. run build in the client folder and
221:21 - that's going to build our view
221:23 - application into a dist folder
221:26 - and after that's done building what we
221:28 - could simply do is just copy it from the
221:30 - disk folder and put it in our public
221:33 - folder in our server again that's
221:35 - probably not the you know proper or best
221:38 - practice way to do it but that's just
221:40 - one way to deploy your application is
221:42 - super simple so while that's doing that
221:45 - I'm just going to build a new folder
221:47 - called public okay so now that that is
221:50 - done if you look at the disk older here
221:52 - it created a bunch of different files so
221:54 - basically what I'm going to do is just
221:56 - copy the files that are in that folder
221:58 - and put them in my public folder here
222:05 - I just want to make sure that the public
222:06 - folder is not ignored again this this
222:09 - probably isn't the best way you should
222:11 - probably have like a continuous
222:13 - integration continuous deployment system
222:15 - building up and deploying to like a
222:16 - static host like s3 or something but
222:18 - again this is just a quick dirty way to
222:21 - get it deployed so what I'm going to do
222:24 - here is I'm just going to simply add
222:25 - that and commit it
222:33 - my REIT bill
222:37 - and then on our get repo we can simply
222:39 - pull and start our Dona server to have
222:41 - that hosted all right so now for
222:43 - deploying this application first thing
222:45 - I'm going to show you is I have a
222:47 - digitalocean account and I'm gonna
222:49 - create a new droplet go up here and
222:51 - click click droplet create droplet I'm
222:54 - going to give us a list of different OS
222:56 - as we can use so I'm just going to use a
222:57 - boon 2 which is the default I'll just go
222:59 - ahead and say give me a default because
223:02 - only gonna have this hosted for like a
223:04 - minute
223:06 - or a couple of minutes and then when I
223:07 - could click create that's gonna go ahead
223:11 - and just start creating my droplet and
223:14 - then once it's done I'm gonna get an
223:16 - email with the root password that I can
223:18 - use
223:20 - also we have the IP up here that we can
223:22 - use to SSH into the gene so let's give
223:24 - this a second to finish running alright
223:27 - so now that this is done running let's
223:28 - just go ahead and copy that IP address
223:29 - and go over to my terminal I'm gonna do
223:33 - SSH route at that IP address and then
223:36 - I'm going to copy and paste the password
223:38 - that they've emailed to me the root
223:40 - password and then once you first log in
223:43 - for the first time it's going to ask me
223:44 - for that current password again I'm
223:46 - gonna ask you to enter a new password
223:49 - let me that and now we are on the server
223:55 - so the first step is we want to install
224:00 - node let's go ahead and just follow this
224:03 - tutorial where it says you need to curl
224:04 - the setup eight script or run that
224:11 - fetch the necessary things that set up
224:14 - node and then when that's done you need
224:16 - to go ahead and run this second
224:18 - committee
224:20 - that's done going to run install for
224:23 - nodejs
224:28 - all right so now we have note installed
224:30 - and we have NPM installed so before we
224:33 - move on we need to also make sure we
224:34 - install the Adonis CLI so let me just go
224:37 - ahead and copy that run that
224:41 - you
224:44 - basically we need that for running our
224:46 - migration scripts
224:50 - it's installing let's just go ahead and
224:51 - set up next step which is we need to go
224:54 - to our project and go ahead and copy the
224:56 - HTTP link here so I'm going to copy that
225:01 - we're going to clone our project when
225:02 - this is done installing so I'm going to
225:05 - get clone and clone our project now we
225:08 - have our project here SSH into the
225:11 - server folder or I'm going to CD into
225:13 - the server folder in you run NPM install
225:14 - so that I install all of our
225:16 - dependencies we need to Ho stored on a
225:18 - server and while that's installing I'm
225:22 - just going to edit this env file and in
225:24 - order to host our Dona server we need to
225:26 - change a couple thing though first of
225:28 - all the host needs to be a zero zero
225:29 - zero zero or it needs to be eighty and
225:32 - then no D&V needs to be production all
225:35 - the rest you can keep as is so I'm just
225:37 - going to copy this and inside that
225:39 - server folder here I'm going to paste
225:42 - that into that env file save that and
225:47 - now we can run our migration scripts so
225:50 - we're going to do ad honest migration
225:52 - and colon run - - force make sure we run
225:56 - our migration scripts in set up our
225:57 - tables fact it might have already set
226:00 - that up maybe I committed
226:04 - database was committed when I
226:11 - the database file the sequel light was
226:13 - already committed to the repo so that
226:16 - was kind of my bad so technically you
226:18 - don't either run your migration scripts
226:20 - this should have been ignored get
226:22 - ignored but if it wasn't or yeah if it
226:25 - was get ignored you probably have to
226:26 - rerun your migration scripts to set up
226:28 - your C like so now everything at this
226:30 - point is set up let's just try running
226:32 - our server really quick and make sure
226:34 - that it runs using node space server ojs
226:36 - and if everything worked it should say
226:38 - it's hosted on zero zero zero eighty
226:40 - then we can go up here and try to go to
226:43 - local we can try to go that IP address
226:47 - here
226:50 - and see what happens and so our app is
226:53 - now loaded is hosted at this port on all
226:56 - rights hosted at this IP port 80 you can
226:59 - see that our app is running
227:03 - sure that we can actually login let's
227:04 - just click login and see what happens
227:08 - excessively successfully logged us into
227:10 - our app
227:17 - oh so I mean basically you just follow
227:20 - these steps if you wanted to get your
227:22 - app running in production um of course
227:26 - you can use other things like Heroku or
227:28 - cloud compute to deploy your application
227:30 - but that's just this is just one way to
227:33 - do it really quickly and really cheaply
227:34 - because you can have a lot of apps
227:35 - running on the same droplet and this
227:39 - setup wasn't too difficult the final
227:42 - step is we probably want to install a
227:44 - better way to run our server so let's
227:47 - install a tool called PM to globally so
227:51 - you MPM install global km2 and once
227:55 - that's done installing I could just do
227:57 - p.m. to start service and that is going
228:00 - to be a tool which kind of monitors my
228:02 - server and it will restart it if it were
228:04 - to crash for whatever reason
228:13 - that's done installing now I can do p.m.
228:15 - to start River Jas
228:19 - going to spawn APM - Damon on my server
228:22 - so I can hit it again here
228:27 - serious loading fine
228:33 - Oh
228:35 - so that pretty much sums up my full
228:37 - stack you Adonis digitalocean deployment
228:42 - tutorial you have any comments if you
228:45 - want to leave me feedback up how I can
228:46 - make my tutorials better feel free to do
228:48 - so in the comments below I hope this
228:50 - tutorial didn't go too quick and I hope
228:52 - I kind of explain what I was doing in
228:53 - the meantime happy coding and thanks for
228:56 - watching

Cleaned transcript:

hey everyone I'm Cody Seibert and welcome to a fullstack tutorial where I'm going to show you how to build a frontend single page application using view Jas and also using view X as our state store and then that's going to connect to a backend written in Adonis Jas basically to create our REST API and then I'm going to deploy this on digitalocean after we finish and so let me just show you really quick what I'm going to be building basically it's a very simple todo list application whoohoo in the left we have projects so we can click different projects here to change we can create projects edit them and delete them and then for each project we can create different tasks and that also marked them as completed go ahead and delete some edits um or of course you can log out and then you can log back in so a very very simple application hopefully this is a good start just kind of explain the concepts of view in Adana so let's just go ahead and get started building out this application alright so now that we know what we're trying to build let's go ahead and create a new repository so on my github account and click new this is her people who don't know how to create a repo so I'm gonna name the repo view adonis to do go ahead make that MIT and I'll create that repo once my repo was created and I was gonna go ahead and click this clone or download and then copy this to my clipboard then in my terminal of es code I'm going to go into my workspace I'm gonna do git clone and type in that repo URL and go ahead and just CD into that folder in fact I should probably open the folder here in my workspace so for this tutorial I'm going to split it up into two major sections the first section I'm going to focus on building out the rest api using Adonis J s and then the second section I'm going to be connecting to that rest api using view J's for the front end so if you're not really interested in learning how to use a dentist to build a REST API feel free to skip forward to the second section and I'll put a timestamp in the description below so again we're using Adonis J s to build out our REST API and basically that is a label clone an MVC framework for building up websites I'm not going to go into too much detail on the docs or explain all the different features and functionality instead what I want to do is just use it explain the things that I'm doing as I'm doing them and then leave it up to you to learn more about the framework in the future so to start using a donis let's go ahead and go to their website and just look at the installation section basically to get started they say you need to install a global adonis CLI tool which i already have installed so i'm not going to run this command and then after you run the command you can do Adonis help to get an information about what you can run with the CLI let's go ahead and do that so if I do with Donna's help it's going to print out all the different commands we can run an Adonis now when you're starting off with a new project the most important command would be obviously is the new command right so we're gonna do ad honest new help to get more information on that command if you see here we can pass something called API only and that's kind of what we're gonna be using for this because we don't care about rendering views and stuff on the backend and we're going to be using View j/s on the front end with that being said let's just do ad honest new type in the name of our project and in this case I'm just gonna do server I like to separate my server code from my client code and then I'm going to pass that API only flag and as this is running it's going to create a bunch of different files in our server folder and give us a very barebones Adonis setup which we can start running and developing or rest API so now that of the Adonis CLI is done creating a new project let's go ahead and look at a important command that we can use for starting or serving our server so again if we do Adonis help it'll tell us all the commands and then notice that there is a serve man which starts our HTTP server well do Adonis serve like a knife and help and we have additional options that we can use in the most important one is dev to start a local dev server so I'm going to Adonis serve I can dev and of course make sure you're in the server folder got the CD into that and I'll rerun that command and after this runs it's going to host a server on port 3 3 3 3 if I go to my terminal or go to my chrome and go to localhost 3 3 3 3 notice that we get a JSON response back from our donna server so we're good to go we have it done is set up and we have it running another cool thing I'll state about this donna surf command is that as you edit your JS files and save them it's going to restart your server for you automatically so it's kind of using like no daman behind the scenes we're just watches your files and restarts them so before we get too much further into this tutorial let's go ahead and commit what we have I want to say initial Adonis setup so at this point let me just go ahead and give a quick overview on some of the files that are generated I'm not gonna go over all these files I'm just going to focus on the ones we need to implement our functionality and then we can kind of cover more as time progresses so the first one we want to cover is inside the Start folder there is a file called a RAL CAS and basically this file is for declaring your routes so I mean it looks very similar to Express or Cola or happy where you have a router object you give it a command such as git postally patch whatever you pass it a URL and then you pass a callback function though nothing too new here second file or folder I want to show is inside the app folder by default we're giving a models folder which has a user J's model so if we look at this basically we're declaring a lucid model which has a hook attached to it so before we create a user model we're going to hash the password and then at the end we just return that model so nothing to do insane here and then inside the hooks folder we have that user J s file which declares that hash password hook go in here basically we say if the user instance has a password attribute we're just gonna hash it and then put it back into the past before we save this model and so for those of you who aren't really familiar with the helllike or ORM does work typically there's a bunch of hooks that exist around models like before you update them before you create them before you save them that you can kind of attach callback functions to let manipulate your data before it actually hits your database mmm and this thing with like getting data you could do a hook before you fetch the data or app you fetch the data to manipulate the data inside your models so I'm not going to dive too much into hooks or that type of stuff feel free to look at the docs if you want more information but the main takeaway is we have by default a user model so you'll notice here there's no attributes so associated with this user model inside this file and that's because if we go back and look at the database folder there are a migrations folder which has a user J's migration in it so inside here this is where we declare what properties should be associated with the users table so basically when we run our migration scripts it's going to create a user's table it's going to give it a user name email and password and then if we were to roll back our migrations just gonna drop this table alright so another quick quick recap we have a routes file where you declare your routes we have a models folder where you declare your models and then you declare your tables that will be associated with that model in your migration scripts alright so now that we kind of glossed over some of the files and folders that are included in the adonis CLI new projects let's go ahead and get started on trying to implement some functionality so the first thing I want to do with our todo list tutorial application is I want the ability for users to register new users or new accounts so how would we do this obviously the first thing we want to do is create a new endpoint or new route where they can hit with a post request to create a new account if I go to the Start folder and go back to my routes ijs file inside here we can simply do or route dot post because we're doing a post request and then we can do something like off slash register and some type of callback function and it's I'm just going to return another hello world message just to kind of demonstrate what's going on so if I were to save this file and then go to another app that I have installed a running called postman we can make example requests to our API just to test it out so remember our endpoint is off slash register it needs a post request so if we go to postman which is here this is on the post main app it's really useful for testing your REST API s we type in the location of that URL auth slash register and I tell it to do a post request and I give it to a body in fact I don't think I even need to give it a body so I'll just go go ahead and click send notice that it sends back our hello world message so we created a register endpoint that returns a message awesome first steps are completed so for the second step we instead want to put our callback logic in a controller and not have it all defined in one file of Rous jeaious so if we were to go to our second terminal and remember that we have all these useful commands which we can use to run and create our Adonis app one of the commands is make controller so if I do add honest make controller help get more information on that basically a week and run is honest make controller ass at the name of our controller which in this case I'm just going to say a user and that will create a controller file inside the again make sure I'm in the server folder keep reading to do that well first of all that's going to ask if you want it to be a WebSocket channel or an HTTP request I'm gonna say HTTP request and notice that it's going to create a app dot controllers folder HTTP controllers file here so let's go ahead and look at that file and see what it created is just a simple JavaScript class nothing too special here but what we want to do is we want to define methods in this class so in this case we're going to say register and let's return that hello world message you and then to bind that to one of our out so we simply go back to our routes file and then instead of passing the callback function here we can just say user controller dot register so again let me save that file and go back to my first terminal just to make sure that the server restarted and then if I go back to post man and click send we get that same response back main difference is we're just binding to the controller file and then more specifically to the action or method that's declared inside that controller class so before we get too ahead of ourselves let's go ahead and do a little bit cleanup so first of all I'm gonna remove this get request method because we're not gonna be using that so another cool thing adonus has is you have the ability to group routes with a prefix so let's say I wanted to append slash API in front of all these different routes that I had so if you imagine I had like 10 different routes and I want to app in API to all of them you could do it this way where you have a bunch of copy and paste like URLs with the same prefix or one way to do it is I just simply do route group asset a callback function put my route in and then after the group you just say prefix with API so now when I save that I try to hit the route that we had before it's going to return an error but now I can actually hit it with the API prefix so that's pretty cool and then you know sometimes you want to have different versions so this might be version zero and then down the road a year from now let's say you need a version one that get deployed you just saying change that to be one and then you have all of your different routes for the v1 here let's go ahead and try to get back on track so what were we originally doing we are trying to create a new register in point where we could pass in an email and a password in the payload and then have that created in our database so let me just go ahead and remove b0 because I'm not going to be using that in this tutorial and then if I go to my user controller what we want to do is we want to be able to grab the request body that was sent in so as an example if I were to post some JSON to the endpoint so if you see here we have an email and a password sent we should be able to use that in our controller so the do so let's go ahead and first grab that request object which is available using object deconstruction here and then inside this we can go ahead and pull out the email in the password again using object deconstruction from request all so requests out all is going to grab and merge our query string parameters together with our post to payload body and then we have the ability to grab the properties like so and again we're just going to print these out and just make sure that everything is working as expected so if I do that post request I go back to my terminal I see that testing and the password is printed out to our terminal so we grabbed the parameters or the payload body successfully using something like this the next step how would we register a user is we need to use the lucid model to create and persist a new user to the database so to get started on that let's go ahead and include that user model and then inside a dantas there's a keyword called use so instead of user and require they recommend you use the keyboard to use and that's just because this the inverse of controller method that they're using allows you to easily mock out and fake these during your testing another cool thing is you can just do the relative you don't have to do like dot slashes your relative paths to your file to get this to work instead we can just do the absolute path so app dot models dot user so that's going to grab the app models dot user file here which is a lucid model and now that we have that model we could simply just do user dot create asset the email ask the password and then of course we also declared something else called a username which we're going to be setting to the password in this case and we need to just at the end return the user so one thing I'll notice or I'll point out is that these are typically async methods so dot create or save or whatnot so in order to successfully use them you need to make sure you put a weight in front and of course in order to use a weight you need to make sure you use the keyword is async in front of your method so now if I say this I should be able to create that user when I do my post request I got a little an error here and the error is saying I don't have sequel 83 installed so let's go ahead and do that if I go to my terminal and just install that that will allow us to actually connect to our sequel Lite server because you need to make sure you install the specific driver of the database you're using so if we're using my sequel or Postgres you need to make sure you install it the correct driver and in this case we're using sequel Lite hmm so we should be able to just install that we should be good to go let's try it again and hopefully it works so if I click send we are getting yet another error so let me see what's going on here and one thing I do to kind of debug is I have jsbin loaded up I could have paste the HTML fine here this is saying that there's no such table as users and the reason that this is throwing an error is because we forgot to run our migration scripts so let's move on to yet another topic which is migration so if I open up a new terminal here and do Adonis help you can see what command we have related to migrations if you see here there's five commands for migrations the one we're kind of I'm curious to use would be migrations colon run and that's going to run through your migration scripts and run anything that it hasn't already ran yet so here I'm just into Adonis migration run run that that's going to create our user table in our token table so finally if I were to do a post request on that endpoint we should be able to persist that user and look it did we got our email back we got a password which is hash back we got our username created at updated at and we got an ID so just to verify that this is actually persisted to the database if we try to do this again notice we get an error back if we look at this error it's going to say that a constraint failed there's no unique user email so basically this error is saying that we've already used the email and we can't use it again so we know that is trying to create that same user and put into the database it's throwing an exception and it's sending a 500 status code back with an error message awesome so as a really really quick recap we created a new route which accepts a post request to off the slash register we prefix it with API and we're binding that to the user controller register action or method and inside the user controller we made an async function which takes two requests it takes two parameters or body from the request we use object deconstruction to grab the email and password we create a user using that email and password in setup a username important make sure you use a weight here and make sure you have a sink here we get the user that was created and we return it back to the user and then using postman we saw that when we tried to create a user so if I do testing 2 or 3 it should create a new user with testing 3 and send it back to us well so now that we know how to create new routes and controllers and stuff let's go ahead and try to create a new one called login and what is gonna do it's going to check the see if the email password provide matches what is actually in the database so to do so again we just need to make a new method here inside this controller called async login and that's going to take the request object for now and again we need to grab the email and password from that request I'll just do that and then secondly there's something cool that's already built in to Adonis which is an auth property that's passed in here and basically what auth does is it has a couple of helper function functions on it that allows you to try to authenticate your user so if I were to do kama auth we now have access to that auth controller in the main reason we have access to that is if we look at our app dot J's file here inside the Start folder there's a provider which was declared called the auth provider which gives us access to that off thing our author object this wasn't here we want to be able to do that and then what type of authentication are we actually using so if we were to dive into the config folder here and look at SAS notice that there's a couple of different off types that are kind of built in we have session we have basic auth we have GWT so by default this is using the JWT auth and if we look down at the GWT configuration notice that it's pointing to our user model it's going to automatically try to fetch based on email and password so these are the two columns that it's going to look at and it's going to use the secret key here to define a new JWT token so if you don't really know that much about JWT I suggest you go read up on it I'm not gonna really give you that much of a deep dive on it but just know that this authentication object that we're using it's just going to look at our database and it's going to create a key for us if the user is successfully logged in so doing so let's go back to our controller remember we brought in this off object what we want to do is we want to try to authenticate the user so we're going to say cons token is equal to a weight off dot attempt and then we're going to pass it our email and we're gonna pass it our password and then we're gonna return that token so if this is successful we're gonna get a token send it back to the user if this fails is probably gonna throw an exception and send back an error to the user if I save this file this last part is we need to go to our routes file and we need to declare a new endpoint so that we can actually try to register our login so I'm going to copy and paste this line 19 and instead of register I'm going to do login and then login for action here save the file and now at this point I should be able to try to log in with that same username and password that we just registered with so you remember we registered with testing at gmail.com and that's the password oh if I just copy this payload instead go to my off slash login endpoint and click send we get back a response that has a token in it but for those who don't know what a JWT token is basically it's just a way to cryptographically sign adjacent object if I were to take this token and if I go to jadibooti dot IO I can paste my token into their website and it's going to decode it for me if you notice here after I pasted it in this is the data that's encoded inside of that payload basically just has to use your ID so if you notice here it's a 1 just to kind of further demonstrate that remember we made another account called testing 3 I try to log in with that it's going to give us a different token if I want to code that token inside this website notice that the user ID here is a two so behindthescenes adonis the auth module is just going to fetch the user from the database verify that the user name and password match up correctly and then if it does it's going to just encode a token that has a user ID in it so the cool thing about this is I can come into this token and just make random changes to it but if I do to fail the signature that only the surfer knows about so with that being said basically any token that the server assigns and since to the user we know a certainty that no one else can modify that token and send back to us and we can kind of cover an example in a little bit because we're not fully done implementing authentication yet so I'll keep this website up and let's go back to our code and just kind of look at one more thing that we can refactor so another thing I wanted to do is when you register your user you're probably going to need that same token right so what I like to do is instead of just returning the user we created I'm just going to return this dot login and then past the arguments that were passed into this request and in this case we don't really need the user anymore so now that when we register or if we login we pretty much get this payload back every time so if I go back to register and I make a new account testing 100 we get back our halo that has a token in it awesome so we just made a new login method we modified the register method to call a login after we register and then we created the route to allow us to register and login we're making some good progress now we just need to UM move on to creating some new database models before we move on to that let's just go ahead and commit what we have so I'm going to say registration slash login and commit that and then we can start fresh back into this file 17 so since we are planning to make a todo list application one thing I want to include is a new project model so I plan to separate my data into projects then inside the projects we have tasks so at the Adana CLI and see what commands we can use to try to help us create a new model so I do a Donna's help notice here we have a make model Adonis make model help and basically we just pass the name of the model and then there's also like a controller and migration if you want to create a migration for the model and in this case we do also want a migration so be sure to include this in so again we wanted a project model so if I say project and then pass M that's going to create us a project model inside our models folder ruch might be is code and then also we get a migration script old projects so first off let's go to our projects migration and we need to make sure we declare some attributes on our projects before we run our migration scripts so to do so I'm going to look at the users and just kind of copy this one line here and we want our projects folder to have a title that's going to be a 255 max length string and I'm just going to remove the rest because I don't care if it's unique and I don't care if it's null or not second thing I want to do is a project belongs to a user right so inside our migration script if I look at token they have an example of how to do that basically if I copy this line and go back to my project schema but that up here we want to us fill e8 the project to a user so we need to make sure I'd use your ID column exists on the project's able so we're saying yes it's an integer of user ID it's unsigned it references the ID in the users table and then the last part is we need to go into our projects bottle and we need to make sure we declare an association so if we look at the token J s file here I'm sorry the user is file you what we can do to declare associations is simply just copy and paste this project are this tokens method and instead we're gonna name it projects and this is gonna say this that has many app that model that project and this just tells lucid how to look up articular associated records using the project's method so literally inside of our controller we can do user dot projects and that's going to fetch us all the projects associated with that user and then the second thing we want to do is we want to go back into a project model and create a new method called user to declare that Association in the other way so I'm gonna say return this that belongs to app models user and this is just saying that a project that belongs to a user and then a user has many projects so that allows us again to easily look up data both ways depending on what type of lucid model we have instantiated in our code and this will make more sense when we actually start using it so again we created a new model called project which created us a migrations file we declared a title inside that migrations projects table and we also declared a user ID which references the users table and then we declare some associations in our project and a user model so what we want to do is we need to run our migration again so if I do a migration run that's going to only run that project migration script because we've already ran those past two right so now in our database we should have a table called projects and that should be ready to go awesome so the second thing is we need to create a new controller and route so that we can actually create new projects right if I just closed all of these and then we can start doing that remember an Adonis we have a create or a make controller method so here if I do make controller so Adonis and make controller help if they get more information I'm going to pass it the project as a name so that we have a new controller called project and that's going to be an HTTP type of controller an inside of a project controller let's just go ahead and do a index method this method is supposed to do is supposed to return all the projects that are associated with the user and of course we don't have a create method yet so we'll have to make one in a second so in order to do so we're gonna need that off plugin again and it luckily off has a nice little utility function called it user if I do Const user equals a way to off that get user that's going to fetch us to user which was associated with the JWT token that we passed in so again if I just print out user here and then return I'm random message for now we should be able to create a route which is going to point to that controller so here I can say route to dot and get and that's going to be on projects and that's going to be on project roller dot index the inertia so go ahead and save my server and I should be able to try to hit that projects in point and in this case I'm going to pretend like we didn't pass an authentication token and this should throw an error because we haven't actually passed a JWT token like we said we needed to WC here I expect the token cost user a weight off the docket user and we're actually getting this because I probably forgot to add async so remember make sure you always add async if you're using a weight here and I'll try to hit that endpoint again see what the air is and we get an invalid a JWT token right JWT must be provided so at this point what we want to do is when we declare the route we also want to declare a meadow where function so that we can parse a JWT token from the request so inside of our line 22 where we declare our index we want to make sure that we add a middle where all until it that it's going to be an awful so basically we're going to authenticate the user with that J DBT token before we run our controller here so again if I try to hit that endpoint we're gonna get back an error again Sanjay DBT must be provided so let's go ahead and try to provide that J to be T token so if I go back to login and I just login with our testing at gmail.com user and I grab this token typically the way to pass a JWT token is inside the header you have an authorization key and then you pass it something called bearer and then the token like so and an inside postman what we have is we have environments where we can just set up kind of key value pairs so we can use those in all of our requests so if I look at the environment here I already have one set up called authorization which is set to a token so let's change it to the token I just copied and put bearer in front and this is just the nama clay sure we use because it's a barrier type token go ahead and update that close out of that and then I'm going to make my request and see what happens so this point we get a message back that says hello world and then if we were to leave off this authentication token we're going to get back that same error saying that GWT token was not provided this is also going to check your token to make sure it is valid so if I were to go and try to create and spoof my own token and send it to this endpoint it's not going to work as expected so going back to our code the main thing that we wanted to kind of show is that once we fetch off that get user it prints out that user information here so we have access to user ID inside of this controller if we wanted to use it I'll go ahead and just print that out at the endpoint one more time and notice here it's printing out one because you remember in JWT i/o when I decode this token it's printing out user ID of one and what that does is going to fetch the user from the database using UID and then we have access to that user model here okay so we're almost done with this project index method the next thing we need to do is using that user we need to fetch and return all of the projects that are associated with that user so if I do return a weight user dot projects dot fetch that's going to use our associations to fetch all the projects that are associated with that user if I save this go back in request that endpoint it should return back in mtra because we don't have any projects created yet which leaves us to our next route let's go ahead and create a create in point so if I do a sync create I'm going to take an auth in a request and let's kind of step through what we might want to do right so we're first need to verify that the user as the token passed in so if I go to routes I'm just going to create a new post request to slash projects it's going to call or create action and then again make sure they're authenticated and then we want to grab that user so cost user is equal to a weight off bag get user from the database so we have a lucid model instance we can use we want to grab the title that was passed in in the payload so for example if we were to go back and post a project we're going to pass the title Yolo here and we're going to fetch it from the request here now we want to create a new project but we have an included project yet so first we need to say bring in cost project from app dot models that project and then we need the creative project so project is equal to new project this is going to create us a new instance of our lucid model for the project we want to fill in or set values so one thing I could do is I could do project title is equal to title or something you can also do is project that fill and then pass it an object and that's going to set anything that you pass in so if I were to say name and name exactly and if name actually existed on the database it's going to put name on to that project to but it doesn't so let's just get rid of that and then finally we want to create the project and associate it with the user right so if we do a weight user dot projects dot save and passes the project and then finally we can return that project so recap we created a route for that projects create method we make sure it's authenticated you grab the user we fetch the title from the request we create a project and fill in that title information we associate the project with that user and then we return the project back so let's go ahead and try to hit this endpoint now though I'm gonna click send it works successfully and it returned us the project that it created so it has an ID of one as a user ID of one has the title Yolo and now just to demonstrate if I go back to my projects in point and try to fetch all the projects for my user it's going to return an array with that project created and so I can hit this a couple of times to keep creating projects and then when I try to fetch all the products from a user notice that we have like a 5 over 4 project returned let's just go ahead and commit what we have and then we can kind of just knock out all the remaining project methods okay so the last two methods we're going to create on the project's controller is going to be a create or I'm sorry not create it's gonna be a delete in an update method so let's go back to our routes and let's go ahead and make a new endpoint that takes a delete request and this one is going to actually take a ID so if I do project ID here in fact I'll just keep it ID to keep it generic and then we can call a destroy method and again make sure the user is authenticated before we hit this in point so if we go back to our project controller and then create a async method called destroy it's going to take it off in a request but let's kind of step through what we need to do again we need to fetch the user so whatever user made the request get that user model and then we need to get the project ID that we declared here and the route so to do that in adonis we could also include another property called pram or sorry params and that's going to give us the query parameters and we need the ID so if i do ID is equal to grams done ID or again if we wanted to do object deconstruction we do this after we have the ID we want to fetch the project that's associated with the ID of a Const project equals to a weight project dot find now find is a method that you can use it pass in the IDE that we want to find it's going to return the project model so I'm just going to say find ID that's going to return us the project now at this point we don't want any user to just potentially destroy this model right we want to make sure that the project we fetched actually has access or the user that did call destroy actually has access to the project right so what we can do is we can just say make sure that project user ID is equal to user dot ID before we do anything in this case I'm just gonna say not equal and then if they're not equal to return something to the user so here I'm going to say response dot a return response dot status of 403 basically return a 403 status code which is authentication or authorization error status if the project that we fetch does not match the user that was asked in with the GWT token but if we do have access we're going to not hit that if statement and underneath here we can just say project delete and then we're going to return the project that was deleted let's just go ahead and save this and try to test it out so going back here notice that this user has a bunch of different projects associated with it so let me describe project three and I'm going to go to the delete request and tell it to delete project three so after I run that it's returning the project information that was deleted and if I go back to my get request how to fetch all the projects notice that three does not exist in this list anymore so our delete method is working as expected before we move on something like this is going to be copied and pasted a lot throughout our application so I kind of want to abstract that into a different hope or service or something like that so what we can do is I'm gonna make a new folder inside an app called services and I'm sure there's other ways to do this my heart isn't sure I'm sure you could use like providers as well but for now I'm going to keep it simple but I'm just going to make a new service called authorization service and inside that service I'm just gonna make a class called authorization like a type and that's gonna have a method called verify permission which takes a resource and it takes a user the exact same thing as we did before I say if the resource user ID is not equal to the user ID we're going to throw some new error and in a second I'm going to actually use a real error here now what we can do is back in our project controller we can go to the top and include that so I'm just say offer is a ssin service is equal to use app services authorization service and instead of doing this if statement here I'm just going to say authorization service that verify permission project user so hopefully if everything works out correctly if I were to run this with the delete method and pass it ID 4 it should still delete that resource and in this case I got an exception let's see let's see what that exception was verify permission is not a function so I might have spelled something wrong verify permission authorization service oh I forgot to export at the bottom my bed so make sure at the bottom I'm just going to export a new authorization service here that we can use it open now if I were to hit this end point it delete it deleted this project with an ID of four so everything is still working as expected but if I want to test if I had access to the resource so let me just log in with a different user so if you remember we made a user of testing 3 let me grab a token and update here difficulties deleting this token huh okay so we updated the environment to have a touken protesting three now I want to a delete ID of one in two which if you notice has a user ID of one but the token that I'm set up with is not that correct user so if I go back to delete and try to delete project one we get back an exception and in this case it should be a very generic exception it doesn't say anything but notice that this is actually running now if I were to go here and just print something else and try to delete that again that prints out invalid access so something full and Adonis that I need to point out is that when an exception is thrown in your controller it's going to return that exception to the user so I don't need to have if statements and like specify certain status codes in return instead I could abstract that into an exception again going back to a really useful adonis CLI if I do Adonis help notice that we can make an exception here so I'm gonna do Adonis May exception help information on that this one only takes a name so I'm gonna say let's see authorization actually I'm going to name it's invalid access into valid access and that should make a new exception called invalid access exception inside this exceptions folder so now that we have the invalid access exception we could just write a custom handler function which is going to take in an error as the first argument and then you can have access to the response here and basically we just want to return a response of a 403 status code to the user a return response status of 43 and then I'm going to send it back some JSON this as error 'invalid access to resource well so now then I save that so invalid access exception is equal to use app exceptions dots invalid access exception instead of throwing new error we can just throw our new exception here our access the authorization server should be returning that exception and then when this exception fires from Adonis it's going to return a 403 status if I go back and hit that endpoint notice we get a 403 for a bit forbidden and we get invalid access to resource and this kind of helps us clean up our controllers so that we don't have a bunch of if statements to check if something is defined or if a user exists so another exception I want to catch is for whatever reason if let's say Project was not defined so they give us ID of a thousand this is going to be null here which is going to hit this function and probably throw a 500 error right so let's just go ahead an other exception called resource not exist the inside verify permission if we were to just check and say if resource was not defined let's just throw a new invalid our sorry resource not exist exception and there might be a better way to do this that's already like built into the Donna's framework but this seems to work for now and then of course inside of that exception we just copy the handler that we had in our previous exception paste it here and we want this to be a for for and say the resource did not exist oh so I'll save that one I'll go back and I'll try like out of a thousand click send and notice that we get back a four or four not found the resource to not exist that is a really highlevel overview of exceptions and how you could handle them to return custom status codes to your requests let's go ahead and commit what we have now and move on to the last one which is going to be update exceptions my code and get back to a nice state just to continue working okay so the last route that we want to add for projects would be an update route so here if I say Ralph dot patch and again that's gonna be Project /id and we're gonna say update that's going to also need the auth middleware but we created our route let's go to our controller and create our action so I'm going to say update auth request params very similar code we could probably pull this out into like helper functions so we don't copy and paste code everywhere but since this is just a simple tutorial well I'm not going to do that again I'm fetching the user from the auth helper function I'm fetching the ID that we want to update I'm fetching the project that we want to update I'm going to verify that we have access to that project and that that project also exists and then finally what we want to do is we want to fill in like we did before in this case I'm going to do merge so project that merge and I'm gonna say merge it with the request of the title the only grab the title that's passed into the quest and then I want to save that the project that's save and then I want to return the project this is kind of a new method that we saw basically it's gonna take from the body of the request just grab me the title so if someone were to pass in a bunch of different properties I just want the title here and then I want to merge that into the project and save it and return at this point let's just go back and fetch all the projects that do exist on this user is remember we deleted a bunch we don't have any so let me just create a new one go back fetch it well so we have a project as ID 5 which belongs to a user 2 let's change the title to Gigi so if I go to my patch in point let me can a patch request to project slash five we want to change the title to Gigi so if I were to send this now this should work okay and it did so we've updated the title to be Gigi if I go back and try to fetch the projects associated with my user the title is down Gigi okay so update is working as expected now so we have our four main crud methods we have create fetch update and destroy we don't necessarily need to show at this point because I don't think we need to fetch a single project in the UI but we could always come back and add that if we need to so let's go ahead and commit that so let's say add update in point then we can move on to our tasks okay so for our tasks we're gonna be we're going to need to create a new model again we can go here and say make model and then we're gonna pass it tasks with M so it creates our migration scripts and let's move to our migration scripts and just add whatever we need for the the tasks entry so task is going to have a title and it's also going to be associated with a project so I'm just going to copy those and instead of user ID interesting project ID and that's going to be in the table projects refers to ID this looks good and then instead of title I'm just going to say description those tasks should be set up correctly and now I need to go into my models and very similar to how we did before I'm gonna go to our user model I'm going to copy and paste this is a task has many our sorry I project as many tasks so here I'm going to go asks and a project has many tasks inside of our tasks I'm going to say a task has one or belongs to a project go ahead and say that I should be able to run my migration scripts at this point which will create our tasks table and we should be able to actually use our lucid models to start manipulating with that table okay so let me go ahead and just close out of some of these so it's not so overwhelming like a step back what are we doing so we want the ability for users to create new tasks and because of the way a task is set up you can't really have a task unless you have a project in which it associates with so I'm just going to add a new endpoint here called projects of /id slash tasks so a user can post a task to a project and of course here we're going to say tasks controller instead of project controller and that's going to be a crate method and of course we need to make sure we're authenticated here as well so I'll set up let's go to our task controller which you don't have created yet so if I go make controller and then pass that task that'll create us a new controler file or our HTTP requests and inside here we need an async create method and this one's going to be very similar to the project create method so let's probably just go ahead and create our copy and paste all the code that was under our project create method if I go to project I go to create I'm going to copy this code and then of course make sure you include the things up here that you need so we're going to need project and we're probably going to need tasks so I'm gonna include project and task okay so when we create a task remember that in the prams we have that project ID so you know I'll comment this out for now so we can just kind of reference it but first of all yes we're gonna need the user so let's just grab that user Oh why that happen autocomplete and then we need to grab the description from the request so a description of request of all and then we need the project ID Oh ID from prams remember we don't have ofthere so let's bring off bring in request let's bring in params we're going to need to fetch the project so cost project is equal to a weight project fine by ID so that will fetch us the project we want to verify that the user has access to the project though I'm just going to go here copy and paste this authorization service stuff you then we verify that the project the user has access to the project so if you remember before when we created a project and we associate it with a user kind of the same deal here so what we need to do is we need to say create a task the mistake Const task is equal to new task instantiate a new Lucid instance model and then I'm going to say task got fill in a pass a description and then I need to associate that task with a project some say wait project got tasks dot save the task and I want to return that task back to the user so nothing nothing new here at all is just kind of a matter of doing a little bit more extra code because we need to grab the project and then we need to associate the task with the project and then all the other stuff we've seen before fetching the user fetching the description from the parameters are the ID from the parameter is the description from the request that's all said and done the past so while we're here let's just go ahead and create an index method so we can fish all the tasks associated with the project so we can easily test and see what's going on so I'm going to add a another route Auld it on the tasks in point and that's going to call the index method and that again is going to be indicated here so going back here I'm going to say make a new method called a sink of index that's going to take off and request you and very similar we need the user we're gonna need Rams as well actually though in fact let me just copy all this and then delete what we don't need we fetch the user we don't need the description doesn't write really creating or updating anything so remove that we don't need to make a new task so remove that you don't need to fetch or associate tasks so remove that cool so we if the user if the project ID we fetch the project you verify you chose access to the project in we just need to return oh wait project tasks dot fetch so returned all the tasks that are associated with a particular project ID assuming that the user has access to that project let's try to test out these two methods and hopefully everything works out you so again let's create a new project just that we have something to work with and then that project ID is a six so if I go to tasks here we want to be able to post a new task to that project ID so I'm going to put project IDs six here I'm going to pass a description of hello make sure my headers are set up and they are so hopefully if I click send this will get added to the database and it did the now project ID of six has a hello task if I do it again I should have two tasks but then to fetch the tasks I'm going to click on the get request URL that I have saved here I'm going to change this to get the project ID of six tasks make sure the header set up and it is but when I click send here I should get two tests back and we do so awesome those two endpoints we just created are now working and really that then it take much time at all to create so we're kind of coming close to wrapping this up so let me just go ahead and commit what we have so let's say tasks index and create and let's move on to the last two things that we need for a task obviously we need to be able to update and delete tasks right so let's go back to here let's make a route dot delete on tasks of ID I'll make that a destroy call and make sure you have middleware and let's just go ahead and make the other one while we're at it here so we need a patch request and we need to be able to update the task so for deleting a task it's going to be very similar to deleting a project so I'm just going to go to the destroy method copy and paste that into my S controller and kind of modify it as needed so here again we fetch the user we need the task ID or we need the project ID I mean actually no we don't we don't need the project ID so this is to be the task ID here we need to fetch the task we need to verify at some point that the project that the task is associated with the user has access to so here we need to say project you our cost project is equal to tasks that project fetch and then we can check that the project the task is associated with the user has access to if they do all we need to do is say a way to test delete and then we can just return that task here so everything here should be okay let's go ahead and implement the last method which is update so just copy and paste some code we're gonna need probably similar code here again we fetch the user with the project ID here or sorry get the task ID fetch the project that's associated with the task verify the users essence to the project and then instead of deleting here we need to do that whole task dot urghhh and we're gonna say requests only and we only care about the description in this case you in fact I forgot to have a completed so when you're in the UI and you're clicking and marking tasks as completed we want to have yet another boolean called completed on that task object so we're going to need to go back to our migration scripts and kind of update that but so let's finish up this task controller really quick and then let's go back to our migration scripts we go to migrations I got a task and here I could just say boolean of beaten hmm so a cool thing you can do in Adonis is if we look at the migrations again there should be a refresh so if I do Adonis migration colon refresh that's going to drop and reset all of my migrations and it's going to rerun them all again so that basically we're creating this completed thing we're adding this completed tea column to our table you can also do a rollbacks if you wanted to or reset our stuff or you precious pretty good because it just rolled back rolls back everything and then reruns them so now our table should have a tasks sorry now our database should have a tasks table with a completed boolean column in addition to the other ones ahead before so at this point since we roll back it probably deleted all of her data so we need to go back and register a user and then we need to fetch this token and update our authorization header here we need to create a project make sure we get that project ID of one let's go ahead and create a task on project 1 that's the projects in the tasks just to make sure that everything is set up as it should be it's a completed null awesome description of hello but we want to test out that we can first of all update that task so this is task of ID one let's just check that we can update the description to patch and completed to pulse so if I send that we're getting back an error so let's go ahead and look at the error here find module controllers tasks controller that's just because it's not tasks controller it should be tasks I named that incorrectly so that's my bad let me save that go back and hit this in point and now we're getting an invalid access to resource or o3 for bin see you you okay so looking back at the task controller let's look at the update method and figure out why this is saying invalid access and so we're fetching the user getting the ID hitting the task getting the project verifying the user has access to the project so what we could do here just start printing stuff out so project dot new JSON I could do tasks to JSON I also do user dot to Jason and make sure all these kind of line up as we'd expect them to you you um let's pace this and see what's going on Roger got to Jason is not a function okay you you so instead of saying to Jason let's just print these out so we have a task which has an idea of one project idea of one we have a user which has an ID of one and we have a where the project go oh so this will get you every time make sure you always have a weight in front of your acing calls if you don't this is just gonna be a promise and then it never thought nothing's really gonna work as intended let me say that I want to make sure I had that updated correctly as you okay sorry about that one let's see if this will finally work so I think it finally patched that task with description patch two completed false so if I were to go back and try to get that task see that we have completed is zero and patched is the description now and then finally we want to test if we can delete a task so if we go to the delete method and tell it to delete task of ID one look send notice that it returns the task back to us and if we try to fetch it again it's not there so a little bit of hiccups along the way you know stuff I forgot to do in this tutorial but overall I think we're done building out a REST API they didn't take too much time as once you get a couple of routes going it's as simple as copy pasting and changing around and then as time goes on you'll notice that these crud methods are basically the same for every single resource so you could probably create a helper method that decorates these controllers that kind of does this logic for you but for the sake of this tutorial let's not dive into refactoring or do anything like that basically we have a way for users to register log in great projects great tasks update those tasks and projects and delete them and stuff so we're at a good State now that we can commit what we have wrap this up and move on to the View j/s tutorial all right so now we're going to get started in the second section of this tutorial which is the view J as fronting and very similar to the last section I'm kind of just going to rate it as I go and explain what I'm doing if you feel lost at any time feel free to pause and go look up the view documentation so to get started with building out the UI you move over to the view CLI github repo the latest version they have out is view version 3 beta 10 I'm going to install version beta 9 because I'm getting issues with tin but you don't want to use version 3 if you want to use the old you CLI I'm not sure how how well that will translate to this tutorial so in this tutorial I'm using version 3 if I copy that and go ahead and just paste it in my terminal and put ad version 3 0 0 beta 9 that's going to install the correct you CLI that I need to kind of demo awesome so now that that is completed we can simply run view create and then type the name of the folder or project you want to create so on this click in this case we're going to do client we want to create a client folder that has our stuff and after you do that it's going to kind of walk you through a couple of questions as to what you want to use to set up your project so I'm going to do manual select features just to make sure that we're not instantly something that we don't want so I want the router I want to view X and I'm just using the arrow on my keyboard in the space button to select stuff linter would be nice and CSS preprocessors I guess would be nice I'll hit enter I'm going to say use sass and I'm going to use the Airbnb config this is like the lentor options a slant on save be good enough kada config file I should be okay so after you select all the stuff that you want it's going to go ahead and just create your client folder and initialize all your different view stuff that might take a while because it's probably installing a lot of different packages so now that bat is finally done running we have a view app over here which I'm not going to go through all these files just start developing on it and I'll explain what I'm doing as we go through but before we get started there's a couple of extra dependencies I want to install now so that we don't have to worry about installing them later so if we look at what we currently have we really only have three dependencies view view router view X but there's a couple more that we're going to need so I'm gonna do yarn add and then the first one we're going to need is Axios and that's for doing HTTP requests and whatnot I like having lo just in case we're going to need beautify and that is a material like framework or library to kind of style your components and build up your app and then two other helpful libraries I uses view X persisted State and that's so I can store my view X state into local storage and load it back when the roam tab opens up and the filing of UX router sync well that's going to go ahead and install all those dependencies and update my package JSON with those now that that's all done like I ran it in the wrong directory so let me just delete these why don't we go into the client directory and rerun that so to start off what I'm going to do is I'm going to open up the source folder and inside here we have a main JSO which is kind of where everything gets initialized and created for view it's also where you need to like include a lot of your dependencies and set them up so I'm going to do that with those dependencies we just Yarn installed so starting off I'm going to include import sink from view ex router or sink I'm going to import it beautify beautify let's see what else we might need I think that's kind of all we need for right now but what we can do is just include both of those or run them so they sync the store with the router view to use beautify you and I think that a good start winters complaining that you should come at the very top because they are actually packages and not from my local files like these are yeah so I'll do em p.m. run serve that's going to open up a browser and point it to your view webpage in just a second so here we go we have our view UI loaded and running and if we hit did everything right we should have those additional plugins like beautify and the view X router sync it's set up and just to verify that I'm going to go to my view plug in here so that's this is a chrome plugin that you can install or using view X and debugging up so as I change routes we should see our route change in our state if you see here we have our routes state here is at that slash a belt and before it was at slash this sink command is working fine a little bit more refactoring I like to put my store in a store folder so I'm gonna say store I'm going to copy that into there but I rename this to index of course if you do that make sure you include it here so instead of actually that should work as is so a little bit more setup I'm going to look at the store I'm going to include that persist state package that we brought in I'm going to say import create persisted state from view X persisted eight that we use it so to use that basically you just need to declare a plugins array for your store so down here I can say plugins an attribute which has a create persistent state object inside that array and save that let's see we're getting a error here something is still trying to load storage is and that's probably in my main is coming from there okay for whatever reason I need to do /index here typically be imported smart enough to just find the index file I'm not sure why I need to do that but hey we're gonna run into issues as we're making this UI so the more issues that I'd be plugged apparently the better it is for a tutorial so let's go ahead and actually get started on building out some functionality we did some initial setup some of it might have not made too much sense it's kind of boilerplate setup so really don't have to worry about it too much unless you're planning to do the exact same thing that I'm doing with this tutorial so starting off let's go ahead and try to start using beautify to build out some header or something like that at the top it's kind of nice to have a top header up here where we have things we can click so the first thing I'm going to do is just load up the beautify Docs so view 2phi go to their Doc's here we're going to be using this throughout our tutorial to kind of figure out what components we can use to build up our application so first off they say in order to set up your app with beautify you need to make sure that you have everything wrapped in a VF component an example down here it looks like this so if i just go back to my app view which is like the main part of this what I need to do is just inside my template I can say V app and then of course wrap everything in that at that point we should be okay and we're all gonna refactor all this second so since we did this setup let's just go ahead and come out what we have so now so all these files aren't just like green and kind of confusing so I'll say initial view set up go ahead and commit that go back to my tree view so let's get back on track kind of jumping around what we need to do here is we need to build out a beautify top navigation so that we can use it in our application so if we go back to the dock so let's look at the components that they have something called a toolbar Papa click toolbars give us some examples of the toolbars that they have how to use them so I'll click the code to get an example and basically I'm just going to copy and paste this into my app for now for all this stuff we can just kind of for now but we're probably going to get rid of it so if I save this file and go back to my view app notice that the styles are all messed up and that's mainly because I forgot to do an additional step in our setup which was I need to include the beautify CSS so if I go back to that main J's file you need to make sure that we import the beautify projects CSS so I'm going to do import beautify dist beautify that mend CSS go ahead and save this and we're going to run to an error because we haven't included actually this is just a linting error it'll let me go figure out how to fix this this is trailing spaces are not allowed we must have a trailing space somewhere which is right here so I'm going to go ahead and just remove that and save it so that loaded correctly if I go back to my app awesome we have the beautify CSS in the top now except for now the menu is messed up if you look to the example their toolbar has a little hamburger thing that you can click ours just says menu so another thing that we forgot to set up it'd be nice if like there's already project that kind of settle this stuff up for you but I guess there's not so do it by hand so what we need to do at this point is we need to go into the public file and I'm sure you can also import this in Maine but the way I did is I went to the public index.html file and in this file it's just a typical file that you know your app is going to be injected into but we want to include the material icons so if I go up here and just go ahead and just include that link through the material icon style sheet so this is the material icon that we need to include just go ahead and save this at hamburger menu should appear now and it does cool cool cool okay so making some slow and steady progress let's go ahead and try to modify this to customize it to be kind of something we want so first of all I don't want the hamburger menu for now and these links over here need to be something that's actually related to what we're building since we're building a todo list application really all we need is like a register or logout button and maybe a button to see all your projects or something and then maybe also like a link to see this YouTube video once I host it so let's go back here and let's go to our app view those all these and then in here for our title I want to save you to do but and save that and just see that reflected here awesome I kind of want to add some color to this so I'm just going to say color is equal to green and I want to make it a dark attribute so that the text is white and then I want to say fixed so that it always stays on the top of my browser so you notice here as I scroll down it's still fixed to the top so awesome we have a view of you to do toolbar green fixed go ahead and get rid of that am burger icon I really want that is gone as we need to add a button so we can click our projects LV toolbar items that's going to be a class of hidden for small I should I'm not going to add any class of that buttons and stuff in a V tool bar toolbar items and inside here you add your buttons so say V button close that off and this button is going to say projects they make this one line say that cool so it looks kind of messed up but we're going to fix that in a second button if I were to say make that flat save that that's going to make it a flat button so it looks a little bit better and we also kind of want an icon so I'm going to do V icon you I want to put a playlist ad check economy let me just make this into a new line so let's read well so we have a button that says projects and it has a little icon to the left of it so people can understand that that's like your main view for seeing your projects and todo list items one thing I want to fix really quick is this margin here that's needs to be added so what I'm going to do is I'm going to go to that title here and I was going to add a class of mr 4 which means marginright 4 and that's gonna push that button over to the right some so it looks a little bit cleaner and then later we can come along and add like routing here to the header if we need to but let's finish off with adding a couple of more so we're going to need a register button we're going to need a logout button again button you and I also want to include some icons on those I just like putting icons next to my buttons although I'm not sure if that's good UX or not so for register I'm going to say count box or login I want to do a fingerprint and then for a logout I want to say exit to app and then also I want to add a button that says how this was made just basically there's going to be a link to this YouTube video you awesome so we have a bunch of different buttons and of course as we go on we're gonna hide them show them depending on if the user was logged in or whatnot um one thing I do want to fix really quick is that all these buttons are really close to the text so I'm just gonna add a little bit of margin to all of these buttons here so wherever I see flat I'm just gonna say class of margin right of to save that and notice that all of our buttons actually I think I should have used them padding right so pr2 is a way to add padding the stuff mr2 is a way to add like margin of stuff okay edit it to the wrong stuff yeah my bad my bad I added it to the wrong thing I should have instead added it to the V icons here so if I describe both the icons and just do class of margin right too that she make it look a little bit better so sorry I'm kind of recording this early in the morning I'm still like trying to wake up and I make a lot of mistakes but hopefully I'm still explaining this decently okay so let's move on refactoring this a little bit because you see here this AB dot view file could potentially get pretty big right now I'm already hitting like 30 lines and it's good to kind of D couple your components so it's easier to understand so it would make sense to pull this out into a separate component right because these buttons down here like when we have our content the router view doesn't need to know about the toolbar header so to do that what I'm going to do is I'm gonna first copy and paste this in fact I'm gonna cut it and I'm going to make a new component called bull bar and then I'm gonna scaffold that out and I'm gonna paste that HTML inside of that template you go ahead and save that and then in my app dot view I could just include that toolbar after I import it so here I'm going to go ahead and add a script JavaScript and then I'm going to import you created at slash components slash bullbar vu then in here we want to simply do components and that's going to be an object with the name of our component you my hair says we're missing a semicolon so let's go ahead and make sure my linting is all working trailing space inside of my HTML so let's fix that really you a missing michael bars in extent okay so all of those are passing now so the last part or step I need to do is once I've imported that toolbar into my app table view you just go up here and simply do the toolbar notice here the toolbar is still displaying if I were to go back to my code and just comment that out to demonstrate the toolbar will disappear all right so the next component a review I want to work on is going to be their register view so that we can actually register users so let's go ahead and get started on that if we go to our toolbar notice that we had a register button if we wanted that to actually do something when we clicked it you could simply add the property to and pass it the URL we want to redirect the user to when they click on the button so I'm going to say to slash register at this point we don't have a register view or route created I'm gonna go my router Nijs file and I'm gonna create one let's go ahead and copy and paste what's there already make this register you register component and again we don't have a register component created so what we need to do is pretend like we have one created in our views folder and I will go here and just go ahead and create a new register dot view file inside of this and go ahead and scaffold that up well so now at this point actually I'm just going to say I'll make this h1 I'm gonna say register just make sure that we can view something but if I go back to my UI I should be able to click on that register and the top nav it's going to redirect us to that register view case it's not let's kind of investigate what's going on you going back to the toolbar and it's because I put it on the wrong element I should have put it on the button not the V icon so that's my bad let me go back here at it to V button go back register now and notice that it redirects us to a slot register in point you anyway so now that we have the register in point a register route let's go ahead and add a couple things to that view such as you know a login button a user name they can enter in a password form so we don't need the toolbar at this point we're done with the router done with app so inside the register component what we need to do is let's go ahead and make this a if for now we can come back and change that to probably like something that's more layout specific and we need to create let's say a title of h1 so it's going to say register and then we're going to need a input box and using beautify there's one called B text field some say B text field and the properties that you can pass the V text field include the label I'm going to say email and to say the value so we'll leave that blank for now I'm just a label email placeholder equals email and we'll come back in a second and add actual other values to it and of course we need one for password this is going to be a type of password and when I made I'm gonna make it autocomplete equals false are actually equals new password so that Chrome doesn't automatically fill it in with stuff so we have two text fields wave email and password here and then we also need like a register button I'm gonna add a B button and in that be button what we can do is give it a color so I'm gonna say color green I'm going to give it dark so that the text is white inside here we can say register you go ahead and give it an icon since I like to give icons next my buttons so a good icon that we could use here includes a account icon so let's do a count circle save that go back we have a register button here now I so we're making some progress one thing I'll notice is that no I don't want this to expand the entire page with if we were to go back to our component instead of using a div let's do an actual container so I'll say B container and then make sure we update the closing element and then inside the container you can do a B layout rowrr app and again these are just beautify builtin components for layout container I have a layout saying that everything should be in a row and then I'm saying inside that row I want the road to be with of six on a small and then push everything to the right by 3 I'll explain that one second so let me say that and now notice here you have everything kind of centered here so basically we go back to these attributes I told it to give it a width of six basically it's going to divide your page into twelve different columns I'm saying this is going to be six columns of width and then I want to push it over three columns so this is column one two three starts at comma four with the six and then we have column seven eight nine ten eleven twelve you utilize that here if I go and look at this we have a the six columns here and then were pushed over a three if you notice the three is adding a padding right here this should allow us to when we resize the page still going to stay in the center what kind of gives us the benefit of responsive websites without having to do much work but we're not focusing on making a responsive website so let's keep on moving on and try to implement the actual registration login functionality full so now we're getting into the actual logic of this registration page and we need to first start figuring out how to bind stuff to view X so for anyone who's not really familiar with the UX basically it's a place where you have all of your application logic stored in a single place and then your components are going to update that state and fire off actions and mutations to change the state I guess the benefit of that is it's very easy to understand like where all your application is like how does your application change over time well it kind of debug and show you how useful that is in a second but again let's just implement it I'll kind of explain it along the way so we need to first of all go into our store and let's make a new file called authentication be named whatever you want does really matter inside that authentication file we want to export a new object which is going to be like a store module so I'm going to say this is gonna be namespace to true state in here is gonna have some things we can kind of add on to it in a second and before we start adding on to this let's go ahead and make sure that we include that module here in our main store so up here you're able to do modules and include a list of modules here so I want to include a authentication module which of course we have an importer yet some say import Asian from authentication that's basically going to hole in this default object here and put it directly into my modules object here so then I'll be able to access it with my mutations and actions and setters and stuff from my view components again this probably won't make sense until we start using it so just a recap we made a module and we include it in our store so let's go back to our module what do we actually need to store interstate so if we were to look at a register component basically we need to store when they update their email that they're about to submit when they update their password I so two things that we know that we need to keep track of so let's keep track of a register email and beam all by default in register S word that's also in beam all so in order to kind of bind these to change these we need to first make a couple of mutations so if I go here I'm going to add another property called mutations and inside this mutations property we can just define different functions that it will affect our state here so I'm going to say set register email that's going to stake or take a state and also a an email as a payload and then we need the same thing for set register password the state thought register email is email same thing here register password is equal to password you I think this is because um we spun this up using Airbnb easiest excellent and they typically use react but we need to actually be able to do this so let's go to IES Lind file and let's add some rules so I'm gonna say rules the one that's giving us issues is no pram reassign and I'm going to turn that off for now so that we don't get that error and unfortunately when you change that Uslan file you have to rerun your serve command I think there's a couple of other ones you might a couple of other rules we might add and disable mainly because you know everyone has their own opinions of how their code should look and I have my own or so let's let that reload here well so a little recap we have two properties on our authentication module state called a register email and register password and then we have two mutations which we can use to change those so with that being said how do we actually bind our view component to change those if we go back to our register view file what we need to do is first import our a couple of helper functions from view X so I'm first going to do import map state and I'm going to do map mutations from Buicks and to use these basically you just kind of decorate your component object with following these functions so for an example if we wanted the ability to call set password or set registration email or one of these we need to map the mutations to our object so I'll just say map mutations actually first of all I need to bind that to a method so I'm gonna say methods is an object and then I want to map some mutations to that that's function where I can pass it the module name so I'll think tation and then I pass it the methods I actually wanted to app so this is the first function that we want to map and this is the second function we so basically all this is doing is saying that this component is going to have these two methods that I can call so up here I can call those like whenever I click on register or whenever I change text in here I can simply just call those methods here and then also what we want to do is we want to grab in our computed state values here so that we can set a register email password when that view loads so up here I'm going to say computed which is another property you can use on your view component instead of map mutations I'm going to say map state again pass it the module name we want to map and then pass it our state that we want to map in in this case I'm going to say register email and register password you all right so if everything worked well I should be able to start using these so the first thing I want to do is I want to go up here and I want to bind the value of my text fields to its corresponding state value so I'm gonna say value is equal to register email you buying this text field whatever the state value is down here and I wanted the same thing for a register password so I'm gonna go down here and say bind this to register password and let's just demonstrate what we are actually doing here so if I go back to this view the register view notice that email and password are not set to anything and that's because in our state I go to the authentication module actually clear on my localstorage I think it has stuff okay so in our thent ocation module we have a register email and register password state and those are both null but if I come back to here and say hello and this changes the world and save this notice that when this page refreshes I think it's because I'm using one second that kind of show you what I'm doing I need to actually disable this plugin because this is trying to load my state from the store which is not what we want to do to be able to demonstrate this sometimes I hate me it's Lent there we go sorry about that basically I change this to initial state of these two properties to be hello world and notice that our inputs are set to those now I'm gonna keep this plugin disabled for right now so it doesn't cause more issues back into enable in a second so again if I change the and a do to the end of it when this page loads this input is going to fetch that value from the store and just populate it so that's kind of the first step we bound these text fields to the state now the second part is we need to bind what happens when we input into this in update our store so if I do at input so basically whenever someone changed the values of this text field is just call set register email down here and then same thing for the password let's say set register password so now when I type you'll notice that it's firing off a view X mutation down here authentication slash set register email and as that's changing it's updating our state but and another cool thing I can show is we can travel back in time to all the different values of our state so if I wanted to go back to my app first loaded notice that it's going to load my initial store values here and that's reflected in our UI and that kind of I can kind of step through what happened over time with my component and this is really useful for debugging and understanding what's going on with your application let's go back to our code and try to figure out what else is remaining so we had the ability to type into the email and password we're updating our store with the corresponding values now what we want to do is when the user clicks register we want to fire off a view X action to kind of hit that register in point we're created on our previous tutorial section so on this button I'm going to add an @ click call back register method which we have an included yet so if I go down here now and just pretend that the authentication has a register action we say map actions identification bring in that register action and of course we are missing this so we need to put it up here if we go back to our authentication module we need to just simply add in actions and say register is going to take um his register need there do object construction and just grab the commit function and also grab the state so now we're getting into doing actual HTTP requests to our server which is running so in this particular case we want to grab the register email and password and we want to do a post request to our register endpoint so before we get too far ahead of ourselves I want to make a new component called HTTP ijs so I'm going to do HTTP j/s and inside here we're going to export a function which is going to return a new Axios object so I'm saying cocreate and we haven't included that so let's just do that really quick we also probably want the store because I'm going to put the base URL in the store you and before we go further with implementing this go to our store and just add a a Cu RL and set that equal to API I think I should slash API so in this HTTP file we're going to create an access object and we're going to set the base URL let me say base URL is equal to store dot state base URL you and then we want to say give it a timeout of like one second so if request doesn't finish in a second time it out hmm and that should be good for right now should we had our semicolons this is another one I do not like so I'm going to disable that style I go back to my es Lintz just get rid of that make sure you reset that you can now go into our authentication action that we're trying to create import this HTTP function so if we can create an Axios module so up here I'm going to import HTTP from HTTP now we have the ability to call that function so here I'm just gonna say returned HTTP POST the reason we can call that post is because on this Axios object it has different methods such as get post patch put delete stuff like that and we want to make a post request to our auth slash register in point and then we need to pass it some data in the body payload I'm going to say email is equal to state dot register email and then password is equal to state that register password I'm going to make it so the moment we call this action I just want to reset my username and password back to but it was so I'm gonna say commit set registration actually um we need commit at this point so let me just save that show you what happens when we run this method so remember we already bound this register button to make send off an action event so if I click it or actually getting an error now so let's see those localhost8080 /ss register is not found in the main issue here is if you remember we are hosting our API import 3 333 this is trying to make a request to e2 80 another cool thing you can do is we just want to pretend that the API and the UI are going to be hosted on the same port same domain under a proxy so if we go back to our main folder where we have our client folder I can make a new file called view dock config is an inside here if I just export an object that has dev server has a property and I tell it to proxy slash API I can give it a target until a to point to my adonis server on port 3 3 3 3 goes off all the and I think I might need to restart my server this is basically just doing a proxy whenever I do a request to slash API it's going to point to a different port on this machine and you config dodge is is automatically kind of loaded in we are using the view CLI so let's go back to our UI when that refreshes let's click the register button again you to register here so if you see here we try to make a request to 8080 slash a P I such office' register the request payload is this hello yo password is world and the server did not respond within a second but let's just see if that was a fluke and it doesn't seem like it was so let's look at her server maybe her server is actually crashing for some reason let me go to my server folder and go to my controller or I'm trying to register and let me just make sure I'm hitting this so say console dot log hello world you so we are hitting this end point I think it's just taking a little bit longer than a second to register our user so let's go back to our HTTP change this time out to five seconds instead and let's try to hit at end point again you and we're getting the error I guess saying that the user already exists and it does I'll do hello with an exclamation mark try to register that user instead okay this one actually works so we got back that token which we're gonna need the store in our store at some point but right now you saw there's no cuz I'm feedback for the user when we registered and what we want to do is a store the token in the store and then we want to redirect the user to a different view go back to this get rid of the hello world and just start that hmm go back to review CLI Oh some these files okay so first thing we wanted to do is we said we wanted to store the token inside the store so if I do a dot then you can grab data that's returned from the Axios request and then inside this data we could simply do commit set token data token of course we don't have a commit our mutation called set token so let's add one will say set token we get the state we get to token and we need to set state that token is equal to token and we also don't have a token define our state so let's go up here and say token is equal to null and also let's make sure we include commits up here so we can run the command so let's try this see what happens if we were to register with a new user that we haven't done before a click register notice that it fires off the set token mutation and now in our state we have a token set so that's step one step two is we need to change our router location so we need to first import that router so import router from dot dot slash router just to import this file here and then if you want to dynamically change the route that wrong we do router dot push I'm going to say go to the route let's try registering with yet another one so I'll just say hello click register and notice that it redirected us when we successfully logged in so a couple of other things we want to do is what if there was a login error right what if the user tried to log in and it was incorrect so we should probably display some sort of registration error on this page so to do that we're going to need yet another store variable called a register error maybe know by default we want a mutation to be able to set register error you you and then in a registered IBEW file we want to add a new alert probably add it right above the register button so I'll say be alert and that component and I'm gonna give it a couple of properties so I give it type of error and I want to give it a value of error I shall say register error so basically if register error is defined it should show up this alert and notice register error we haven't brought in so we need to go back down here to methods and make sure we map the state here I'm going to map the register error states and I also want to just go ahead and say actually we don't need to map any mutations here so right now that's not going to show up regardless because we don't have a way to actually check or we don't have anything setting register error so let's go back to our action and what we want to do in our action is if there is some type of error so if I do dot catch I want to the register error isms they commit that register error I want to say invalid registration formation and of course you can get more specific I think you could probably catch the actual error and do something with it actually instead I'm gonna say an error has occurred of trying you all righty so fully this works if we go back and try to register this exact same user that should already exist in the database you get an error back and right now the error is not displaying anything so to debug this let's look we sent off a mutation to set register error that changed our authentication modules register error store State or whatever is called state to a string before whatever reason we're not displaying that in our alert oh this is because I forgot to actually render the X so if you read through the beautified docks alert this value is just going to display it if this is true or defined and then not display it if it's false but you actually need to render something inside here so make sure you do the mustache and it'll bar stuff to register to display your text cool so now says an error has occurred trying to create your account if I try to create it again with something that doesn't have an error it's going to redirect us and then one thing I'm going to do is every time we try to register I'm just going to commit null by reset that back to nothing from our registration error well so I think we're like most of being done if not we are done with this register view I think the last thing I want to do is once you're registered I want to hide a couple of these things in the top toolbar and if you're not logged in I want to show them so let's add something new that we haven't seen yet called a get er to our authentication module so I'm going to say get errs and it'd be another property and inside here I'm gonna say is logged in as a function takes the state I believe and what we're going to do here is basically just return true or false depending on if the token set so if the token is set is gonna be true or logged in if it's not it's going to be false and now that we've done that we can actually go back to our full bar component and hide these different buttons toupee on April logged in or not so let's go ahead and import on that map hitters function so it's a import object each instruction of math and getters from view X and here I'm going to say computed is equal to map getters of the authentication module and then I want to say is logged in you so that will basically grab us that getter function and we can call it up here to display and hide different things so if we are logged in we want to display logout maybe if we are logged in you this should always be displayed register and login should not be displayed so I'm gonna go ahead and just hide those two buttons there say if we're not logged in you can display those you up here we probably only wanted to splay this if we're logged in so let's go ahead and save that and see what happens all right so right now token is null so we're not logged in but if I were to register with something new such as like hello world 999 when we log in we now get that projects button to show up we get that logout button the show up alright so let's go ahead and commit what we have for now and then move on so since we're here messing with the toolbar let's just go ahead and make the logout button actually log us out so what is logging out basically in our sense of our application is just going to be setting that token to null right so if we go back to our tent ocation remember we have a set token mutation which we can call so if I just go to the toolbar I want to make sure I'm at that mutation I'll say methods is equal to a patient's acid pass it that function that we want to be able to use you and then now that we have that function could simply go up here to logout and if we click that button I want to set token to null so if you go back here it refresh the page okay so notice here when I click log out register went away or sorry the project's button went away and the logout button went away now our show to register and login and we can also check the store notice that token is set to null now I think what we also want to do though is we want to redirect the user to the login page whenever we click logout so maybe instead of mapping a mutation we could either create an action or we could just create e a logout functionality here so I think it'd be better to just create an action called logout so if we go back to authentication make a new action called logout that only needs a commit basically we need the same thing so commit set token to null and then we needed a router dot push slash login I don't think we have a route for login yet but we will create that in a second but going back to the toolbar instead of doing map mutations I'm going to say map actions and I'm going to bring out the logout action I'm just going to call log out here so let's just make some user and log them in and now that we click logout it should redirect us to login which we don't have a really of you created for that yet but we can do that in a second well so what we haven't implemented yet is the ability for a user to login so let's go ahead and try to do that now let's go back to our just commit log out here it to further if I go to my view I'm gonna make a new component called login and I'm just going to copy and paste from register because it's gonna be basically the same thing with different mutations and actions oops login so copies the register component and made a login view here if I go to router let's go ahead and make a a login route and inside the login route let's just do login here this is all showing up all right so now we have login instead of register for the button we need to say login so I'm gonna go down here to the button to say fingerprint I say login see that and that's good to go um instead of register error I'm gonna rename all everywhere I see register to login so actually suited me a me um just do this manually I don't mess up the realization hmm so register should become log in register should become login all right so none of these states mutations or actions that actually exists on the authentication so let's go ahead and add those to so I'm going to say set a register email password in email or error and say login hmm actions instead of a register action we also need a login action sets login error you know login you same functionality basically in fact we could probably abstract this to a function since this is very very similar but to keep it simple I'm just going to repeat myself you notice here the same same method we're basically changing the URL and we're changing the error and the parameters that we're sitting in so we could just make a helper function up here that does a kind of shared code between register and login but that's another abstraction which kind of makes stuff a little bit harder to understand we just want to quickly look at code so let's not worry about that right now so again we have a login action which should work now it tries to log into that login endpoint with the login email login password there's an error will display and the alert if not we're going to push the token or set the token and then we redirect to the home page and now we just need the mutations for those three store and values that we added so I'm gonna say sets set login and then here I'm just going to say state login all right so let's see if this works so first I'm I'm gonna make testing at gmail.com password 1 2 3 4 5 6 I'm gonna register and this failed because I think that user Ortiz sure does so I'll do testing one then just for that I'm going to log out and make sure that login works as this was testing one but a log in with that same username and password and at worked as well awesome so we have register and we have login working we have logout working we're hiding and showing different buttons based on the token being set um let's go ahead and what we have for this login functionality and then we can move on to something else so let's move on to actually displaying the ability to like add projects and add tasks and stuff like that so the first thing we need to start out with is kind of like a projects panel so if we go to the main view here or home view this is kind of what we're looking at right here so I'm going to actually rename this to projects and in my router I'm just going to go ahead and change that to well instead of home I'm going to say projects I'm gonna change that the projects projects go ahead and get rid of all this stuff back in it or stuff in in a second you all right so on this project page the first thing I want to kind of display is a panel on the left the title that says projects and then inside that panel I want to display a list of my projects and then an input box at the bottom so we can create a new project so first thing is the whole idea of a panel is something that we're going to be using throughout the application so if we go to our components folder and just make a new one called panel that view go ahead and scaffold that out you all I want to do here is I'm going to make a if give us some classes which are kind of pre built in to beautify so I'm gonna say white right I'm say white and elevation of two and that's just going to make a raised white panel and inside that raised white panel or card I mean I want to declare a toolbar make sure that it is flat I'm gonna say dents I'm gonna say dark and I'm gonna say color of then inside that toolbar I want to say be little bar title it's going to be equal to whatever the user passed in a property so I'm gonna say title is something that a user can pass into this component and down here of course we're going to need props I say title is going to be a string and inside the title actually I think that's good enough for the title underneath the tool bar what we want to do is create something called a slot so I'm going to say div class of time left for padding right for heading top of to padding bottom of two and inside of that div I'm just going to add a slot no one passes anything MSA knows lock on mind all right so now we have a panel which we can kind of use throughout our application and then of course we need to define it as a global I'm going to say here I'm going to say view component own int dot annal is equal to panel and of course make sure you bring that in and all bring that in that view you so almost done in the projects out view file now we could just simply do panel here and I'm going to pass it title is equal to projects so now when we save this we should see a panel that is defined here so we have projects here with no slot content defined and if we wanted to make something render here we just simply pass it in here so I'm going to say each one esteem you notice that that title will then render here and we can render Road whatever we want inside of this you well so we made a shared component or a global component called panel which we can use throughout our application um let's go ahead and do some layout here so that's not right next to the side of it so instead of using a div home I'm just going to do a V container so V container BAM I'm going to leave that out for now back in the container we want to be layout you laya of course we want AV flex and this flex is going to be I'm going to say small of four so it's going to be four columns and then inside there I'm going to put our panel all right so now we have a panel to the left called projects and let's just go ahead and create one for now just so we kinda have a better visualization of what we're doing on the right so 8 plus 4 is 12 and this one is going to be called tasks projects and tasks you awesome and let's just add a little bit of padding to that glass is evil Oh again what I said we're doing is we're just going to render out a text field here where we can add a new project and then we're going to need to render out a list of those projects mmm so before we get too ahead of ourselves let's make a new component called projects view you it might be a little confusing because we have a vehicle projects and we have a component called projects so I need to rename this the project view or something but I'll just I'll keep it as is and see how confusing it is so inside here let's just go ahead and import projects from you that Onan slash projects dot view I'll say components is equal to projects and go ahead and just instead of doing this panel here I'm going to just render that projects thing we're going to start defining and then I'll put the panel inside the projects you see intere because it does not sound like all right so now we have this kind of refactor so it's just is simply going to be projects and this will probably just say tasks in a bit and in our projects panel what we want to do is we want to list out text field so can create or we can create a record right here I'm going to say textfield and we just want to kind of like allow the user to type in the new name of their project so I'm gonna say C leaseholder is going to be I project need not save this and make sure everything is correctly alright so we have a text field called my project name and then we also need like a Smit button so I'm gonna say B button you going to have a create on it in fact let's just do a little bit of flex grid stuff so we can lay it out okay I'm going to say inside here it's going to be the B layout and of course we need to be flexible wrap you this is basically so we can have a button on the right feel on them so just do this put the text field in the v8 a small eight the button well of course I like adding icons to my button so let's just add a V icon here you it adds circle leave that awesome and of course we should do a little bit of margin right and we can fix the style and stuff in a second so let's see the button it probably also be color of green let's give it a virgin top of two it just moves down a little bit let's give it dark and see what happened all right so we have a crate button now that looks a little bit nicer it's a little bit down further line up with this so similar to what we did at the login and register we need to listen to when the keys change on the text field and then update the store and of course we also need to set the value to something that's coming from that store so if I were to go back to my store let's just assume that we have another module called Project CAS just to simply copy and paste what we have here you you I mean needing to reuse that like HTTP stuff so let's just do actions ITER's State and stuff so we're just good to go now and of course in the main index on Jays file we need to include that so let's include that projects module here and now we should be able to use that in our view application so first thing is I'm going to create something in our state called new project aim gonna be null and then I need a new mutation to set that new project name that's going to be state and named Oh state that new project name is able to name so then here of course we need to bind value I'm going to be new project name we need to make sure we include those who import map mutations app state from UX we're gonna say map state projects now because we're using the projects module and we need a new project and then for methods you mutations set new project name you again when we do inputs we just need to pass set new project name ISIL is verify that this is working as expected so I'm gonna type hello that's sending off the mutations for set project name and we're seeing that update get reflected here in the view X state so I guess the last step is we just need to send off in action to the backend to actually create this project name once we click that submit button so if we go back to the projects module alright so let me just copy and paste one of the actions here that we have a good starting point I'm going to say create project commit a state that's going to do an HTTP request to projects it's going to a post request and then we're going to pass the title the state dot new project name in fact I probably should call that new project title so let us be refactor that but anyway once that's successful what we're going to do is you're just going to MIT end project ADA let's not worry about errors right now and then we'd have a projects array here we should probably loop over at some point so what we need to do is in the mutations make a new one called project I'm going to say eight dot project stop push project so we can keep track of the new projects we create and then of course we need to set the project knee successful to go back to also set new project name say null so I think we're almost done with this but the only thing we're missing is the hole header if I go back to HTTP here I need to make sure I add a header so I'm gonna say headers is equal to authorization that's gonna be bearer I grab from the store be token from that authentication module that we have hmm all right so we did a lot of stuff let's just check to see what errors we may have so I type in a new product name called hello world and then when I click create we forgot to bind the create project go back here in for map actions we need to make sure we include that method click this just need to make sure we call it let's try again create sendingoff and request to API slash projects rating a 401 unauthorized let's look at the network tab and see what's going on here and saying my JWT is malformed you so let's look at the headers and for some reason the token is not on the headers so let's go back to http that I maybe spell something headers authorization error date ostentation hmm maybe it's just gonna refresh the page correctly so let me just do a hard refresh here hello world like create you oh okay so the issue is is we're not even logged in so I don't think we should be showing this view if we're not logged in so there may be a different way and I'll probably look this up to see if there's a different way to redirect but we try to hit the projects page here are the project view without being logged in Gosei mounted is a function and then when we're mounted just check to see if the token we don't have so I need to do computed app state indication actually no map eaters is fogged in so if we're not logged in go ahead and redirect to the login page you map inners is not defined ever have to import it so after Gators from the UX what happens here all right so now it's gonna make me a log in every time I type hello world here now great that going to app in the project so now I have a project so right here it created the project successfully in our backend the only thing we need to do now is just kind of display it in a list let's visualize that really quickly inside of my projects panel up here I'm just going to creative I'm just going to loop over my project so v4 project in projects and make sure you map the project state some state projects we could simply just render out the project title here if we want it to oh I need to be bind is going to be project like to return that one I don't like this insolent so I'm going to just plus one let's read set to my serve you see absolutely abortion before sandy at the top it's only logged get login now my awesome project my clique creates notice that the project is now rendered because we did a b4 so I'm making some progress let me just go ahead and commit what we have and we I can create more logic in a second you so the next thing we want to do is when the projects component is mounted we want to fetch all the projects that the user has and just render it in this list here because if I were to not restart this page or refresh this page and log back in notice that we did create projects on that user but there's nothing that's showing up so let's move back to that project stop view file and let's also open up the project store in let's create a new action called fetch projects Big D can take the commit function in the state and what we're gonna do here is just return and the same thing that we did before on second all right so we're gonna do an HTTP method so we create that object and we're gonna do a get request on projects and of course we don't need to pass it any parameters so it should just return everything that is attached step projects and once we get our project data back actually we don't need state here we're gonna do a new commit called set projects and the back ends going to return an array so data is going to be an array of projects already so if we're doing a commit action we need to make sure we create that mutation I'm going to go down here and say is that project state projects and then I'm just going to simply overwrite state thought projects is equal to projects as an empty right here so we should be good to go we save this and now we should be able to map those actions and call that when our projects on it is melted you so let's go to our projects component since I'm in the project view right now and what we want to do is when this component is mounted we are going to fish the projects so I simply just need to go up here at a mounted function call to say this dot fish projects as simple as that it's going to run that action which is going to commit that projects data and we should see that reflected so I'm going to log in we see that it called set projects here which the pale turned was an array of two projects so Jaques is set on the state here so projects and then inside projects we have another attribute called projects might be a little confusing but hey it works and then you see that those are rendered up here and we can also go to our network tab and see that we made a request to our projects endpoint at API slash projects look at the response and we have two projects returned so pretty straightforward as to how to fetch projects and how to create projects now the two other pieces of functionality we kind of need for projects is we need to be able to edit this title and we need to be able to delete the project so what I'm going to do is I'm going to try to add a button here which is like a pencil button and when you click it it's going to make this become a text field so that we can edit it as needed so let's go back to our project stop view file and find where we are rendering that project title which is here on line seven hmmm so instead of rendering bat let's just go ahead and make an icon is going to be a pencil we'll find out in a second I have to do a little bit of layout /v flex to get this to work out correctly in fact I should say edit not pencil so save that we have pencils next to our text now which is step in the right direction we want to make sure that the layout is set up correctly so let's just go ahead and do a V layout here you and in heroes do we flex and we want this to be analyst to say if you fix a nine and the rest could be a three let's make the title be on the left and we can make that edit button be on the right you mmm okay so making some progress let's align the text to the left so on the the Flex here I can say class let's say text X X s left and that's a built in class for beautified to kind of align stuff to the left all of my text will be aligned to the left now I just add a little bit of margin to the bottom of these so let's see each div I'm into a class of margin bottom of to see if that's enough looks a little bit better and of course I'm going to say that this is a project down here I'm going to make a new style I'll dot project and that's going to say margin art that's going to be font size of 18 pixels see that's big enough it's okay be something bigger like 24 and then I think I want to add a little bit of space above this so if we go to the panel I'm going to say class is adding top of four and see if that pushes it down but then on the wrong thing you so I'm just going to do margintop of you here instead there we go that looks a little and then this is going to give it a little bit of margin too the margin top of four just to push that whole thing down get a little bit of space all right so again what we're trying to do is when we click on this edit button we want to change this to a V text field so that we can edit the hello world project title so if I go back to where we are rendering that title out here hmm we're gonna kind of have two things that need to interchange depending on if the project is an edit mode or if it's not in edit mode you so let's just pretend that project has an is edit mode boolean so I'm gonna do a span and say B if project dot is edit mode we're going to display something which is going to be the project title otherwise we're going to display a V text field e text field again we do the opposite of that and you probably use a switch case as well I think you has a switch case support so I say if it's not in edit mode we're simply not going to display the text field you okay then inside this text field we're going to do value is going to be equal to project on title back to this save this and make sure this is displaying correctly of and extra space you I think I have these swaps so that needs to be if it is edit mode in this if it's not mode hmm okay so you saw it was displaying a textfield before and that was just because I had the boolean swapped so now if I click on this icon what we want to do is change the project's is edit mode boolean to true down here for the button I'm going to say at click that edit mode and pass it the project here you so let's go and actually ten like we have a mutation that we can call so here we're gonna map mutations and call set edit mode and that needs to be true actually so wherever I called set edit mode let's just say that's going to be a value of true I always keep like that so set edit mode and if I go to projects and go to my mutations let's just add another one called set edit mode state and that's going to be project then inside here we're going to do project dot is edit mode is equaled you let's see if that actually changes our state as we click things like this the edit mode is set down here and his MANET mode is edit mode is set to true and the issue that we're having here is nothing is being reflected in our state and that's because is edit mode doesn't actually exist on the project so this is kind of a nuance in regards to using view where the UI is only going to bind the stuff that actually exists so what we need to do instead is if we go back instead of doing project on is edit mode true we need the first import view you and then down here instead of just doing this we need to save you a set project is edit mode and then we need the passage through in the make sure that it binds correctly to that boolean once we set it but oh this music of all right so if I go back look this notice that it changes to the text field and right now we don't have a way to go back because we don't have like a cancel button or a check button so let's kind of add that so let's go back to our project stop view and I'm going to add a check down here you the same same ideas gonna have a check icon when you click it it's gonna call unset edit mode so we're going to assume that we have an unset at it mode we're going to go to our down here and at this point it's probably safe to assume that edit mode is defined on the project because it can't be true unless you set it so I should be able to do project out is that it Modi's equal to false but just in case let's just keep it as is like this go back we should have a checkbox that shows up of course we need to probably do a B if to display it and hide it anything so if I click on it B pencil but going to edit mode if I click on the check it goes back to non edit mode let's make sure we toggle those correctly going back here let's find that check icon I created and I'm gonna say V if project dot is edit mode its false and then for this one the edit mode is true we want to display a check so now we can toggle between them pretty awesome so let's go down to the style and let's just do I think we want to make it so when we hover over this we have a cursor so is this actually old class of icons so if we go to our style and say icon cursor is a pointer just so we get some feedback as a user when we hover over stuff we probably also want to say icon hover background actually has to be color of make it gray I guess short color was before so now it's a little bit darker when we hover over it oh so we're kind of getting closer to implementing this edit functionality so now if we were to change the value of hello world to what is up of them like that notice that nothing changes because we haven't actually bound to the input call back on the project edit so we need to go back and go here and say add a new mutation called set project title state project actually this is going to be a message so I'm gonna say project title and then project that title is equal to title mutation we can set the title and if we go back to our projects view we again need to make sure we grab that mutation so I'm going to go ahead and grab that set project title from the project's module and then when we change the value of this let me say at input I want to go ahead and just call set project title I want to pass it the event I don't know if I need to do this let me just try this so set project title and then take a object object is going to have the project so I'm gonna say project and then also the title is going to be equal to the event you you I think I'm I'm beginning some type of air Lindt air or something this is not single lime you oh you know what I'm doing wrong I have I'm updating the wrong thing hold on inputs declared twice on this I'm updating the wrong text field so if I go up here to the text field we're supposed to be updating let me just add input to that so now we're calling set project title with the project and then the event which is going to be in the text we may need to verify this in a second but let's see what happens if we run this so login and I'm going to go ahead and try to edit this by adding an exclamation mark it dispatched that mutation and we have the payload we have the project and we also have a new title that we want change it to then if I go into my projects array notice that the corresponding project has the exclamation mark so we're now we're we are reflecting the value of the title successfully the last part is when we check click the check box we want to actually persist so if I go back to that check box here instead of saying unset edit mode I'm just going to say save project you let's go back and pretend like there's an action I'll save edit mode for now now let's just be explicit and call a save project then go back to our actions or our projects module and create an action called say project basically what we want to do is just send off a at request to the endpoint that we have so I miss HTTP catch on projects slash project on ID and then this needs to be string interpolation so we can use back ticks okay there you go then of course we need to pass the project that we're trying to save and that should hit the can save and actually persist the project project state to the back end and when we get a response back hush for at this point we really need to do much so we just let's just delete that for now commit what we want to do is actually yes so if I say if successfully what we're going to do is we're going to commit and say unset edit load project all right so it's gonna persist it if it was successfully persisted to the back end we then just just say or unset it from edit mode so it's going back to the normal view let's try doing this and see what happens so I'm going to go to the check pencil add a couple of exclamation marks and click the check box notice that it went back to the normal view instead of the edit mode and they made a network request to project / we sent the payload of title hello world blah blah blah and we got a response back of the new object so now when i refresh the page and log back in notice that we have that item our that title persistent now well so we're making some good progress we have the ability to create new projects we have the ability to edit projects one thing that we don't have is when I click this edit button it doesn't focus on this automatically so a cool little attribute we can add two V text field is auto focus so let me go and say auto focus here so now whenever we click on that it should automatically focus on there and it did mmhmm what we also want to do is if we press ENTER on our keyboard it would be nice if it just does that save thing for us you so let's go to text field we're going to say key up enter but basically if the user were to have a key up event on the inner we're just going to say save project and pass it project and this is basically doing the same thing as clicking the check button let's save that and see if that works I'm gonna click a pencil add something click enter notice that that got persisted to Project number three now all right so now we're kind of on the last basically we need to be able to delete a project from that list so you know the drill basically we're gonna have to have a new action called delete project so I'm just gonna copy and paste this all delete project it's going to take a project it's going to make a delete request to project slash ID we don't need the past data then once the project is successfully deleted we want to remove project from our list so we're going to need a new mutation down here I'll remove project and that's just going to splice out the project from the list so I'm gonna say state that projects not splice state that projects dot index of project and then one and this is how you to remove something from an array so just going to find the index where this one exists and just splice it from the array you you so now in order to use that action let's go back to our view component let's go ahead and bring that in and let's go ahead and make a new button our new icon which is going to be a delete icon and we're going to be calling the leap project when we click it so here I'm gonna say delete we only want to show it when we are in edit mode and want to call delete project on that if I go ahead and save that log back in let's see let's click on actually we want to show it all the time I think they've seen me completely so now we always have that trashcan that we when we click it's just going to delete it we go to the network tab notice that made a delete request who project to and if I were to refresh and log back in that project has been deleted from the list and delete everything and see what works one thing I also notice is when I press ENTER on this text field that it does not create the project so let's go ahead and try to implement that as well so very similar to before when we click on create or you enter we want to write the project so here in the text field when we do a key up we just want to say create project give it that function go ahead and save this go back and now when I press ENTER on my keyboard it's going to create it for us what remain a lot of progress let's go ahead and commit what we have this is going to be called editing elite projects all right so before we move on to this tasks panel I want to go ahead and abstract some things that we can reuse components because task is basically going to be very similar to this projects panel so first thing I want to abstract is this bottom create thing or section that we have I want to have a component which has a gray button where I can change this text dynamically through a prop and of course invoke different callback functions depending on what we want so let's start with this right here so if we go back to our project site view file notice that this bottom section here we want this is what we want to kind of abstract into a separate component so down here I'm gonna say a new file called create record view go ahead and scaffold that up and that same layout of code that we had other file and let me just go ahead and that doesn't even just here so say great record you make sure we have the components components and of course we need to import that so you okay so if we wanted to abstract this into a different class basically we just wanted to allow the props to be passed in for setting like placeholder text and we want to emit certain events when things changed so the first thing I can do here or placeholder I'm just going to say this will be placeholder so up here x8 props we have lace holder and then inside projects we just simply pass you place holder is equal whatever I just copied out let's see this was I project is odd or something like that this so this probably won't actually work out of the box as there's gonna be errors so before we make much progress let's just comment out things we don't want so I can show you some progress let's see unfortunately I can't really easily calm down crap so I feel like it cut it out or something all right so different approach let me just go ahead and make placeholder functions and stuff for all this and then we can refactor as is so we're passing in the placeholder text that's awesome what we want to do is when the input text changes on this text field that of calling a function we want to emit on input event now our existing component can just listen to that and call our function as needed so let's go to here we can say on input is equal to that new project name with whatever that was so okay and then when the value is passed they basically we need to have value as a prop to value as a prop and then instead of new project name I'm gonna say value go back to here I'm going to pass a value in and then on key enter instead of doing we just want to say MIT create so then over here we can just listen to the create event and just simply call create project so we have that abstracted into a prop this into a prop and then on inputs we pretty much emit on input with the past event and then for this one when we hit enter we're going to emit a create there might be a shorthand to do this since we're just propping our yep propagating that event up maybe just pass it event or something I'm not sure that'll feel free to comment if there's a better way to do line seven same thing with when we click on the button we want to simply just emit create and luckily our projects component is going to call Cory project on that already these are persistent so we don't need to change those so let's go ahead and save this and see what errors we may have you refresh this page and see if we're getting any type of errors it looks like we're not so the prop is my project is and we're passing that in here a I project name when I type something click create same logic as before so it's sending off that event to create the project let me just refresh the page and to make sure that's all system and working as I did before so if you noticed how easy it was to kind of abstract that little bit of functionality into my own view component and now basically anywhere my app where I want to have something that looks like this I could use it and we're going to be using that in our test panel in just a second and before we move on let me just make sure I aligned something to the right so I'm gonna say text small right this crate button should be as far to the right as possible so for this other piece of functionality which we're going to be using in the test panel basically we want to create a new component I'm going to call that editable record you pull that up and we're going to be doing the pretty much the exact same thing we did before we're going to copy and paste this to editable record bring it in we're gonna find that layout section and just copy and paste that into that editable record there boom we're going to make sure we try to call it here so editable record of course make sure you bring it in inside your components save this and let's see what we should pass to it to make this work so the first thing the UI's gonna be broken since we have to kind of fix all this stuff first first thing we want to do is a profit is check to see if is edit mode or not so we are going to say bind is edit mode and we're going to pass it this is edit mode so that's going to be sending in the project that is edit mode and then down here of course we need to define a props array and just to find his edit mode you keep on going through and kind of doing the same thing so instead of project title here let's make it a little bit more abstract and that's just going to be title so it all sure that we're passing that in so title is equal to project title hmm so this we can get rid of project that title we don't need we can use title say project I'm gonna instead of doing project here I'm going to call it record so over here I must say record is a prop we pass in and anywhere we see project I'm gonna say record record record get rid of his edit mode it's not as edit mode you the inputs I'm going to say emit input and pass it the event here and then what we need to do in the file above is just listen to on input and we're going to call that same functionality so set project title this needs to be removed see okay let's just look through this really quick and see if we're maybe missing anything mmhmm this add text right to this because I noticed in the UI I wasn't already onto the right you right so for these events this app shot component editable record should have no idea if it's a project or task or whatever so instead we need to say omit on edit and then of course in here we need to say on edits dispatch that mutation same thing for this instead we're to say omit unsaved basically when they click the Save button to bind to that callback so unsaved make sure we call that previous method we were doing before and then of course getting kind of tedious so I'm gonna say on deletes make sure that we find it and I should say project four although so if you notice here basically this component has absolutely no knowledge about if it's a project or not actually this one used to be emit on save save project right so you see no instance of project anywhere and basically this is just a very abstract component which which takes in props and emits events when certain things happen which the project's component is kind of responsible for changing and dispatching the actions are emanating mutations so let's see what potentially is still broken in the UI so first of all it looks like none of the titles are showing up so we have title here down to project title idle should be rendered here that should only edit our render when is not edit mode so that's probably the issue let me just refresh the page and see what errors we have it looks like that might be working now so sit out and see if it's still working as it did before refresh the page so we have now to abstract components which we can use in this task panel to basically edit tasks delete tasks save tasks and create new tasks and all we have to do is pass in certain props to do so so let's just go ahead and commit what we have I'm gonna say editable records and create records okay so now for the kind of the last part of this tutorial let's go ahead and finish out the implementation of that asks panel so if I go back to my projects out view view let's assume we have one called tasks here have a new component called tasks I'm going to create that and make sure that exists in my components and then I'm going to make a new component called tasks that view athol that up I'm this it's going to be very similar to projects top view the other one so let me go to this see what we got so similarly we're going to need a panel but it's going to have a title of asks boom that seems like that's working fine and inside that tasks panel we're gonna do something very similar where we're going to be looping over tasks some say and brought our tests and tasks or a V for tasks and task I'm going to get the ID for the key is to make sure that we grab this but we're going to do a little bit smaller a font size so I'm going to eat instead for a task and then here I can just say tasks our description for now let's see what it has no matching for some reason it's not Muslim enough Luke it's working fine now so let me just refresh the page in case we're getting in Severus our beer method task is not defined on the end but it's okay all righty so now let's try to implementing the store so notice before we had a projects in the store let's go and create something for the tasks so in the store I'm going to add a new one called tasks ojs and I'm just gonna copy and paste projects and kind of bring it down we have a good starting point let me do all this okay okay so I created our tests module make sure we include it here I'm going to say tasks and make sure you include that module in your main store object so for the first thing we're doing we just want to rent her over the tasks right which that should be set up ready to go um actually it's not set up because we forgot to map the actions so here I'm going to go over and I'm going to copy this we're going to be using a lot of the same map actions mutations in state and what we want to do is inside of the computed we want to call map state going to take tasks and that's going to take asks this is obviously going to throw an error because we're going to use so let me just give her those for now you so no more errors anymore you all right so the first thing we want to do is if we go back to this component here and we click on one of these we want to make sure that we set the current project that we're trying to edit so going back to our project module let's go ahead and say make a new mutation called set current project and state that project just to keep track of what project were kind of a clicked on that current project instead of just project you okay so then in our projects on view when we click on one of these editable records so on click we want to call set current project is equal to project of course we haven't brought that in so let's go and grab that mutation you and then for editable record we don't have an onclick callback yet so let's go here and let's go back to our title and basically if someone clicks it I want to call on click I want to emit on click you so that we can keep track of what we have clicked so if I go back to my view debugger and click on some of these notice that the current project is changing as I click different projects here you but we want to take that a step further Sukie set current project should probably an action which fetches the tasks as well so what we can do is in the tasks module let's add a new action called fetch tasks for current project that's gonna be something that has MIT probably going to have root State Shammi call it set tasks for project going to take a project as a second so very similar to before let's just grab the HTTP method here I'm going to just copy and paste that so we have something to work with you so that's going to fetch all the tasks for this project ID that we're passing in for the action and I'm say set tasks is equal to data and of course make sure that we have a mutation called set tasks state tasks this the RM say state task is equal to tasks and then now when we actually click on a task we like the projects when we call set current project what we want to do instead is make a new method called set current project I'm sure I'm gonna call it current project clicked call it project click sorry I might change my mind a lot so what we want to do here I just say this dot set current project or in a passive project then we're gonna say this dot fetch asks for project and then make sure we just map the actions for tasks here fetch asks for project all righty so basically what we should have seen is if we click on that tasks over here we click on a project that mean it should make two mutations so it's going to first call set current project which it is then it should make a request to the tasks which I don't think it did so let's kind of go back and debug why that might not be happening make sure we call it fetch tasks for project an action and we should be able to call it correctly so if I go back here in action here Rajat clicked oh I know why so we made this new function but we didn't actually use it so let's go back up here and call our two clicked when we click on this notice that it makes a request for the tasks this is going to return an empty array because we don't actually have any and that should populate our tasks up here when it actually is defined and we'll see that in a second so let's go and start working on the next piece of functionality which is going to be the create record so if I go back to our task component I'm just going to go ahead and add a create record section well I need to dot dot which is gonna be like a task placeholder they set new tasks when it's the input changes I'm gonna say set new task name the valley is going to be a new task name and create is gonna be create to the task so very similar to the project's but we need to make sure that we bring those in so let's map new task name and four methods let's bring in map action from tasks that's going to be called create task and then we need some mutations for masking mutations that's going to be called set new task name and of course those don't actually exist yet so let's go back to tasks and we need to create one called set new task name state that new task name is equal to new task name and then we need the whole create task here someone's going to copy and paste basically what we have here and then edit it as needed the way we did it with the back end I think we actually need the project so what we can do is pretend like we have the project ID I think it might be that you let me just doublecheck that I'm doing that right at root state projects that ID so we're basically just grabbing that idea from the root state so we can know what tasks to append it to doing a post requests have the description here we're calling a pin task so make sure we have that asked here so I'm going to say state contests that push tasks you let's see if this is all working you you got a comma here or gods chins yeah let's see how this works my great record is not included so make sure we also did components and then make sure we create record let me just copy and paste that import from the project so oh here should we import that save it also notice here in our tasks panel we have the same pretty much component that we had over here but it has a little bit different placeholder text now if I type in and clean my room at setting new tasks name which is updating our test module new test name here and when I click create an error and that's because let's see I don't think I click the project yet so that's something we need to kind of fix basically we shouldn't show this panel unless the current project is clicked so if I go back to our projects view and I grabbed map state map state and make sure that we are including checked basically we don't want to display this section if we haven't selected a project yet so if it is selected we'll display it otherwise we don't to get that error because there's no way to actually create a task unless you've clicked one yet so let's click on awesome and then let's try to create a task current project is selected of ID of five and now when I click create it should try to make a request to the task endpoint which it did that was successful or return to 200 status and it sent back our task and then we appended it to our tasks array so at this point what do we notice well this is very similar to this over here so let's go ahead and bring in that other component we created and try to reuse it so projects I'm going to bring in editable record Riggin in here make sure you exist in my components mmm and I'm gonna do very very similar logic by just bringing that in so edible record here going to go back to my task component instead of just displaying the description let's display the editable record and instead here when I say task is edit mode ask set task title tasks clicked you actually let's see what happens if I try to comment does it there I don't ask work a set of title we want to do description display clean my room we don't wanna do any logic when we click it so let's just get rid of that but the other logic should say fairly consistent so let me go back and see if I can like to be able to style that task in a second so some things that we don't have yet is we don't have the set edit mode or save task or delete task created and set task description it's not pretty yet so let's just kind of work our way down these inputs and try to create what we need so here I'm going to say a mutation of set task description you that's going to take a ask in a description basically say task description it's a description make sure I rename title description here um set edit mode so I'm gonna go here set edit mode state ask and view dot set this is very similar to how we had it before so let's just go ahead and copy that in so just set edit mode here and then make sure we include view from the up import and we also have save tasks oh let me just copy save project and delete project and just kind of change that as needed into our actions so save ask I'm going to take a task hit tasks test that ID asked and delete tasks ask remove ask you forgot to bring in the unset edit mode so I'm going to do onset at anode be false hey let's see if we're missing anything you're missing removed tasks but we need to make sure we at a state test that by state on tasks index of task 1 all right let's finally we need to bring these in so we have these actions save tasks and delete tasks so let's bring in lead tasks and save task set that task description is tation said edit mode is a mutation and let's see if this works click on this let's see if we can edit the task edited the tasks and saved it over here awesome and then if we try to delete one of these new tasks here make sure that that is working so request failed with 404 that's because we're trying to hit slash task when it needs to be tasks so if I go back to my Elite tasks method I just need to add slash tasks instead that delete that okay so that's basically all working as we did before that's basically working as the project's did over here then we can also just change our projects as needed to fetch different tasks here so I think the last thing I'm going to work on for this tutorial is putting a checkbox here that can mark a task as completed or not so to do that the first thing we want to do is kind of extend the existing editable record module that we have let me commit what we here are some say you and let me get back to Sulekha saying in the editable record we want to be able to include a slot so we can pass in the ability to render stuff to the left of our text fields in title or whatever it may be so what I'm gonna do is going to add a new element called slot basically whatever I pass in inside my projects or tasks component is going to render to the left of this text so an example if I go to tasks and for my editable record if I say I'll do like h1 hello make sure I have the closing tag outside of that save this we should say hello to the left and of course this is just going to be on top right now because we're not floating it to the left Ernie what what we want to do in our case is I just want to make a checkbox following what we've done over here just get an icon but I go and put that inside the slot here going to go ahead and give her that stuff for now and save this and hopefully that is not what we're looking for we're looking for something called a check box so let me oh sorry I forgot to put it underscore here check underscore box all right so when we do that we get a check box but we need to be able to toggle between if it's a checkbox or if it's not filled out so there's another icon that we could use called checkbox outline blank so what we want to do here is basically just render some a different icon depending on if we're completed so I could say task dot completed and do a ternary operator and just simply return check box if we're completed or return check box outlined blank if we are not completed go ahead and save that if we go back notice that these two tasks are not yet completed additionally when we click on these check boxes we want to kind of toggle that completed state so let's just do that let's add a at click and I'll say toggle completed and then that's going to be a method which accepts tasks and of course that doesn't exist here so we need to go back to our tasks I'm going to say that's going to be an action so I'm say talk will completed is an action so we'll go back to our store load up the tasks module I'm going to add a new one called toggle completed and basically what this is going to do is we're going to do a commit to set that to either true or false so I'm gonna say we'll completed um I had to have a different name so I don't think I said that habit of name so I'm gonna do a mutation with the same name for now I don't know that's a good idea but let's just do it and basically task doc completed is going to be equal to a stock completed you I do believe if we go to the console when we try to fetch tasks that completed is indeed a attribute on that task so we should be good we don't need to do view dot set because we're actually handling that on the my sequel databases table so we have a mutation which is going to kind of modify or toggle that completed bullying and what we need to do inside this toggle completed action is simply commit that hmm but after we've admitted that we need to call save tasks here and actually instead of doing an action maybe we should just instead get rid of this action sorry kind of changing up my plans made coding which isn't necessarily bad to do but instead of it being a action let's just make it a mutation and what we can do is when we click on this I'm going to add a method down here called check clicked I think that's what I just had a call and we're simply just gonna say this dot welcome completed tasks and then I'm gonna say this dot save ask past that task at Clifton old I think I could have done this in the action it could just fire an action off of in action from this action but I think it gives us a little bit more flexibility if I don't actually save it when I toggle it but I want the mutation to just toggle the state and then I want the disk component to be responsible for saving it I don't want the action to do both of that so let's see if this works so if I go and click on my project here and I click on this task here first of all it's sending off a request to the network and completed is true if I go to my view X or view / e bugger we see that talki completed was fired completed to set the true if I cleared again completed is set to false and it's saving that task so let me just make a couple of ask and make sure that these get persisted when I create them and just refresh the page just to verify that everything is working as before and it is ok so we're basically at the end of our demo I mean I could probably spend more time sprucing up the Styles you know obviously when I hover over this it should be clickable or should have a cursor when I hover over this the text should change um but I guess in terms of this tutorial I don't want to spend too much extra time I'll assume this up I think we covered a lot of good grounds and like examples of how to build up a single page application and connect it to a REST API that we created by hand so that basically wraps up this full stack view and addon SJS tutorial if you have any feedback or questions feel free to leave them in the comments below or you can message me on Twitter I could always use feedback if this tutorial was too quick or if I was jumping all over the place feel free to tell me so and maybe I'll make another tutorial in the future which isn't so sporadic and on the fly a person like tutorials that are kind of like unplanned so you can kind of see what I'm thinking and how my logic is applied to when I'm making applications and stuff alright so I think that's basically what I'm going to be covering in the full stack tutorial other than deployment which I'll do in a bit one thing I'll change is if you remember if we go back to our store and go to the index I disabled a plugin I'll create create persisted state I'm just gonna reenable that and kind of explain what this does basically and now when i refresh the page I have to log in one more time but now when i refresh the page it's gonna cache everything that was in my store inside local storage meaning that I don't have to log in again or whatnot so basically exactly how I have my app state before I leave and refresh that's how it's going to load back up so if you notice I clicked on this project and it loaded back up for me so it's very useful in terms of like UX because you don't want to user to have to keep login and over and over again just happy their state stored locally and then once they refresh the page or go back onto the application everything is exactly how it was before so in order to get our single page application deployed out we first need to kind of build it so I'm gonna do in p.m. run build in the client folder and that's going to build our view application into a dist folder and after that's done building what we could simply do is just copy it from the disk folder and put it in our public folder in our server again that's probably not the you know proper or best practice way to do it but that's just one way to deploy your application is super simple so while that's doing that I'm just going to build a new folder called public okay so now that that is done if you look at the disk older here it created a bunch of different files so basically what I'm going to do is just copy the files that are in that folder and put them in my public folder here I just want to make sure that the public folder is not ignored again this this probably isn't the best way you should probably have like a continuous integration continuous deployment system building up and deploying to like a static host like s3 or something but again this is just a quick dirty way to get it deployed so what I'm going to do here is I'm just going to simply add that and commit it my REIT bill and then on our get repo we can simply pull and start our Dona server to have that hosted all right so now for deploying this application first thing I'm going to show you is I have a digitalocean account and I'm gonna create a new droplet go up here and click click droplet create droplet I'm going to give us a list of different OS as we can use so I'm just going to use a boon 2 which is the default I'll just go ahead and say give me a default because only gonna have this hosted for like a minute or a couple of minutes and then when I could click create that's gonna go ahead and just start creating my droplet and then once it's done I'm gonna get an email with the root password that I can use also we have the IP up here that we can use to SSH into the gene so let's give this a second to finish running alright so now that this is done running let's just go ahead and copy that IP address and go over to my terminal I'm gonna do SSH route at that IP address and then I'm going to copy and paste the password that they've emailed to me the root password and then once you first log in for the first time it's going to ask me for that current password again I'm gonna ask you to enter a new password let me that and now we are on the server so the first step is we want to install node let's go ahead and just follow this tutorial where it says you need to curl the setup eight script or run that fetch the necessary things that set up node and then when that's done you need to go ahead and run this second committee that's done going to run install for nodejs all right so now we have note installed and we have NPM installed so before we move on we need to also make sure we install the Adonis CLI so let me just go ahead and copy that run that you basically we need that for running our migration scripts it's installing let's just go ahead and set up next step which is we need to go to our project and go ahead and copy the HTTP link here so I'm going to copy that we're going to clone our project when this is done installing so I'm going to get clone and clone our project now we have our project here SSH into the server folder or I'm going to CD into the server folder in you run NPM install so that I install all of our dependencies we need to Ho stored on a server and while that's installing I'm just going to edit this env file and in order to host our Dona server we need to change a couple thing though first of all the host needs to be a zero zero zero zero or it needs to be eighty and then no D&V needs to be production all the rest you can keep as is so I'm just going to copy this and inside that server folder here I'm going to paste that into that env file save that and now we can run our migration scripts so we're going to do ad honest migration and colon run force make sure we run our migration scripts in set up our tables fact it might have already set that up maybe I committed database was committed when I the database file the sequel light was already committed to the repo so that was kind of my bad so technically you don't either run your migration scripts this should have been ignored get ignored but if it wasn't or yeah if it was get ignored you probably have to rerun your migration scripts to set up your C like so now everything at this point is set up let's just try running our server really quick and make sure that it runs using node space server ojs and if everything worked it should say it's hosted on zero zero zero eighty then we can go up here and try to go to local we can try to go that IP address here and see what happens and so our app is now loaded is hosted at this port on all rights hosted at this IP port 80 you can see that our app is running sure that we can actually login let's just click login and see what happens excessively successfully logged us into our app oh so I mean basically you just follow these steps if you wanted to get your app running in production um of course you can use other things like Heroku or cloud compute to deploy your application but that's just this is just one way to do it really quickly and really cheaply because you can have a lot of apps running on the same droplet and this setup wasn't too difficult the final step is we probably want to install a better way to run our server so let's install a tool called PM to globally so you MPM install global km2 and once that's done installing I could just do p.m. to start service and that is going to be a tool which kind of monitors my server and it will restart it if it were to crash for whatever reason that's done installing now I can do p.m. to start River Jas going to spawn APM Damon on my server so I can hit it again here serious loading fine Oh so that pretty much sums up my full stack you Adonis digitalocean deployment tutorial you have any comments if you want to leave me feedback up how I can make my tutorials better feel free to do so in the comments below I hope this tutorial didn't go too quick and I hope I kind of explain what I was doing in the meantime happy coding and thanks for watching
