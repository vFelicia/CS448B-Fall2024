With timestamps:

00:00 - welcome to this comprehensive course on
00:01 - open AIS assistance API which allows
00:04 - developers to build powerful AI
00:06 - assistance capable of performing a
00:08 - variety of tasks this course covers
00:11 - essential topics like integrating the
00:13 - API for advanced functionalities
00:15 - leveraging its knowledge retrieval and
00:18 - code interpretation capabilities and
00:21 - understanding the fundamentals of large
00:22 - language models through Hands-On
00:25 - projects with streamlet and real world
00:27 - examples you'll gain practical skills to
00:29 - build respon responsive AI enhanced
00:31 - applications by the end you'll be able
00:33 - to use the assistance API to transform
00:35 - your web apps into Dynamic smart
00:38 - platforms hello and welcome to this
00:40 - course my name is Paulo deson I am a
00:42 - software engineer so I teach people how
00:45 - to become software Engineers developers
00:47 - and build applications and I've also
00:50 - taught over 250,000 students on various
00:53 - skills from programming build apps AI as
00:57 - well as Cloud engineering so welcome to
00:59 - this course the next question is what is
01:02 - it that you're going to be learning in
01:03 - this course well in this course you're
01:04 - going to be learning about the assistant
01:07 - API essentially you're going to learn
01:08 - about functional calls you're going to
01:10 - learn about retrieval mechanisms and of
01:14 - course you're going to be building a lot
01:15 - of stuff going through this course
01:18 - because that is how I like to introduce
01:20 - certain Concepts to my students so
01:22 - that's part of the what you're going to
01:24 - be expecting in this course and of
01:26 - course I'll be talking about large
01:28 - language models embeddings and all these
01:30 - things that relate to AI specifically
01:33 - okay now let's talk about the
01:34 - prerequisites for this course so I
01:36 - expect you to at least have the basics
01:39 - of programming of course I don't expect
01:40 - to be an expert or anything as long as
01:42 - you have some fundamentals of
01:44 - programming be it on JavaScript or any
01:47 - other modernish programming language you
01:50 - should be fine going uh through this
01:52 - course and one thing to keep in mind is
01:55 - that unfortunately this is not a
01:56 - one-on-one programming course I'm not
01:58 - going to teach you how to progam program
02:00 - rather I'll focus on the big picture
02:02 - idea of assistance API and large
02:04 - language models so we're going to be
02:06 - using python in this course so if you've
02:09 - never used python you don't even know
02:11 - what python is that's okay that's not
02:13 - the main thing here the main thing is
02:14 - that I want you to understand how this
02:17 - technology how assistance API and how
02:20 - large language models how AI based
02:22 - applications are built that is the main
02:25 - goal here so don't worry you'll be fine
02:28 - as long as you want to learn and you
02:31 - follow along what I'm going to be doing
02:33 - the other thing also remember that
02:35 - you'll have access to all of that code
02:37 - in the description below okay now let's
02:40 - go ahead and look into python setup and
02:43 - essentially the environment setup so
02:44 - that you can follow along in this course
02:46 - now keep in mind if you already have
02:48 - python set up on your machine and you
02:50 - have Visual Studio code or any other
02:52 - code editor that you use obviously you
02:54 - don't have to follow along because this
02:56 - is you have all that right so if you
02:58 - don't have that then I'm going to show
03:00 - you right now what you need to do what
03:02 - you need to install on your machine that
03:04 - way you able to follow along in this
03:06 - course now the best place I found online
03:09 - where you are able to go through
03:11 - tutorials on how to set up python
03:13 - specifically on your machine whether
03:15 - it's Windows Mac Linux and so forth is
03:17 - this link here uh which I'm going to
03:19 - show you right now let's go ahead and
03:21 - take a look all right so if you go to
03:22 - this link here which is kingstar docomo
03:25 - base install python this does everything
03:29 - that you will ever need or at least has
03:31 - all of the instructions you need to
03:33 - install python if you don't have python
03:36 - installed on your machine okay so just
03:37 - go ahead and follow exactly what they
03:39 - have here and they even tell you what is
03:42 - python which is kind of nice and all the
03:44 - things that you need okay so just follow
03:45 - along and the great thing is that you
03:47 - can go through these different links
03:50 - here so how to install python in Windows
03:52 - if you're on Windows click here that
03:54 - will take you to this setup and how to
03:56 - install python on mic OS that will take
03:58 - you through this whole all setup that
04:00 - you need to go through and of course if
04:02 - you're very special and are on Linux go
04:04 - ahead and click here and just follow the
04:08 - instruction so it's really
04:09 - straightforward I don't see any value in
04:12 - me going through all of this with you so
04:14 - go ahead and get that setup if you don't
04:16 - have python setup on your machine and
04:20 - we'll go from there so the next thing we
04:22 - will need is an IDE an integrated
04:26 - development environment I use Visual
04:28 - Studio code which is what I'm going to
04:30 - be using in this course so if you have
04:33 - something else that you use that's
04:34 - totally fine go with that but go ahead
04:37 - and download that if you don't have it
04:38 - so it's very simple going to go to
04:40 - visual studio
04:42 - code and depending on your machine for
04:45 - me I'm on Mac it just goes straight to
04:47 - download Mac universal you can click
04:49 - here and you can see that we have mac o
04:52 - universal window Linux and all of this
04:55 - okay so depending on your situation just
04:57 - go ahead and download the ver version
05:00 - the latest version of vs code and you
05:03 - should be ready to go okay now because
05:05 - of the nature of what we're going to be
05:07 - learning in this course which is open AI
05:10 - assistance API you will need to have an
05:13 - open AI account that is very important
05:16 - for obvious reasons and so particularly
05:19 - what you need to do is you need to go
05:21 - ahead and create in this case have an
05:23 - API key because that's what will allow
05:25 - us to use the assistance API and and
05:28 - various things we can do with open Ai
05:30 - apis and so forth so that is very
05:32 - important so let me show you real quick
05:33 - here so if you type in
05:36 - open.com as you see here make this a
05:38 - little bit larger you'll be able to say
05:41 - log in so click here if you don't have
05:44 - an open eye account you can go ahead and
05:46 - say sign up if you already have one you
05:48 - can just put your email and go ahead and
05:51 - sign in also you can go ahead and say
05:53 - continue with Google with Microsoft
05:55 - account or with Apple so I already have
05:58 - an account but in this case you can go
06:00 - ahead and sign up okay so I'm going to
06:01 - say continue with Google I think you can
06:03 - also go that route to create an account
06:06 - and gives you this opportunity here to
06:09 - choose between going to char or going to
06:12 - API we want to go to API and this is
06:15 - what's going to open so this is will
06:17 - take us to this main view here so
06:20 - there's a lot of things a lot of
06:21 - capabilities uh get started and all that
06:24 - what do we really want to go to is to go
06:27 - to assistance API which actually we're
06:28 - going to do that later but what we want
06:30 - right now is to go to API keys so click
06:32 - here on API Keys you can see that I have
06:35 - one API key which I created a little bit
06:38 - ago so go ahead and say create an API
06:41 - key and you can name
06:43 - this
06:45 - assist API Das key you can name whatever
06:48 - you want and that API key click there to
06:52 - create this API key and then what you
06:54 - need to do is copy this API Key by
06:56 - clicking here and save this API key for
06:59 - later in this course once we get started
07:02 - coding into all these things so it's
07:03 - very important to not to share this with
07:06 - anyone in fact after I've created this
07:08 - I'm going to delete this so that way you
07:10 - can't use it okay so save it in a very
07:12 - safe place that way you don't lose it
07:15 - okay make sure that once you close that
07:17 - window just like I said there's no other
07:19 - way for you to access it to get it again
07:22 - so that was that's why I wanted you to
07:24 - save it okay but you can create as many
07:27 - secret keys as you need so if you for
07:31 - some reason didn't copy that you can go
07:34 - ahead and create a new one and go from
07:36 - there so that should be it about setting
07:38 - up your API environment understanding
07:40 - what we're going to be doing in this
07:41 - course as well as having your API Keys
07:44 - set up or created for us to be able to
07:47 - use that in this course okay so now
07:50 - let's go ahead and look at what is this
07:53 - thing called assistance API the
07:55 - assistance API is a tool built by the
07:58 - opening I folks that allows developers
08:01 - to easily craft and build AI based
08:04 - applications that Leverage The Open AI
08:07 - environment the open AI platform per se
08:11 - so the thing to understand about the
08:13 - assistance API is that it's not its own
08:15 - entity per se although it is but it is
08:18 - attached or extends in this case what we
08:21 - know the open AI API which includes all
08:23 - of the tools and models that power chbt
08:27 - and many other underlining
08:29 - infrastructure of the open AI
08:31 - environment so that is the important
08:33 - distinction here is that when we talk
08:35 - about the assistance API it extends what
08:38 - already is there in this case the open
08:40 - AI API and so it makes it easier for us
08:42 - to build AI Tools in this case AI
08:45 - assistance that we can use in our
08:47 - applications so essentially allows us
08:49 - gives us this platform this framework
08:51 - this libraries to quickly use these
08:54 - tools to build any application AI based
08:57 - application that we would want to build
09:00 - without having to know too much about
09:01 - the underlining obstruction of how
09:04 - things actually work so essentially we
09:06 - can go ahead and create an assistant and
09:09 - use the API so that we can connect that
09:12 - assistant in our application and use
09:15 - that assistant that has the capability
09:17 - of connecting with the open AI apis
09:20 - essentially now the next thing we need
09:22 - to look at is for this assistance API
09:25 - what is the problem that it solves now
09:27 - the thing to understand is that building
09:29 - applications in general later alone
09:31 - building AI based applications uh it's a
09:34 - very hard task for developers because
09:36 - it's very complex there are usually a
09:38 - lot of moving parts that a developer
09:40 - needs to focus on developers need to
09:42 - manage in this case certain
09:43 - infrastructures they need to keep in
09:46 - mind how the data is being used Which
09:48 - models are needed to use in this case to
09:51 - power their applications they have to
09:53 - learn how to craft the best prompts
09:56 - possible in order to communicate with
09:57 - this large language model
09:59 - and they also need to understand or keep
10:02 - track of the application State
10:05 - understand about embeddings which is
10:06 - something totally different but it's
10:08 - part of this realm of AI and large
10:10 - language models and understand the
10:13 - storage mechanism right how do we upload
10:15 - files how does the large language model
10:18 - use those files to allow us to tap into
10:22 - the main knowledge but also those files
10:25 - retrieval those files knowledge but also
10:29 - retrieve information from those files
10:30 - and so many things right so this is not
10:33 - easy it's a very complex thing to carry
10:37 - as a developer this poses a problem for
10:39 - developers because now developers
10:41 - instead of focusing on building the
10:43 - actual application now they're focusing
10:46 - on how to stitch all these pieces
10:48 - together to make this work so the
10:50 - benefit of using the assistance API is
10:53 - that is that all of this complexity all
10:56 - of these things that developers need to
10:58 - know know or to deal with it's
11:01 - abstracted out which means they don't
11:02 - have to deal with it anymore because now
11:05 - the assistance API the back end of
11:07 - everything is taken care of all we need
11:09 - to do as developers now is to focus on
11:11 - what matter which is build Our
11:13 - obligation so the assistance API already
11:15 - has all the things that we need as
11:18 - developers but we don't need to think
11:19 - about them because it abstracts out all
11:22 - of that work so one thing to keep in
11:24 - mind is that when we talk about large
11:26 - language models is that they by
11:29 - themselves they don't have state which
11:30 - means they don't save a context of a
11:33 - conversation per se now with the
11:35 - assistance API we don't have the problem
11:38 - because there is this thing called
11:39 - persistent threading for ongoing
11:41 - conversation what this means is now
11:43 - we're able to save messages and the
11:47 - context of that messages that way let's
11:49 - say if you're creating a bot um you
11:52 - don't have to yourself save that context
11:56 - so that then when you ask a certain
11:58 - question that the bot needs to know
12:00 - about the previous conversation the bot
12:02 - will actually know what it's referring
12:04 - to because it has a context okay that's
12:07 - huge because now we don't have to worry
12:09 - about that the assistance API has that
12:12 - built in and also we have the retrieval
12:14 - mechanisms for digging through data so
12:17 - what this means is that we can upload
12:19 - files for the models to use for
12:21 - additional knowledge base so you can
12:24 - upload files about something let's say
12:27 - about cryptocurrency so now that piece
12:29 - of knowledge is added to the main base
12:33 - knowledge right that comes with the
12:35 - large language model that way you can
12:37 - converse with the large language model
12:39 - in addition to the knowledge that we
12:41 - just added by uploading certain files
12:43 - documents and so forth so now we have a
12:46 - more flexible and more knowledgeable if
12:48 - I may say large language model because
12:50 - we are aiding it with retrieval
12:53 - mechanisms it also has code interpreters
12:55 - so it actually writes can analyze code
12:58 - and do all sort of things which is
13:00 - amazing as you will see okay one of the
13:02 - biggest things that we now get with
13:05 - assistance API is that we can actually
13:07 - do function calling what that means is
13:09 - that when our assistant is solving a
13:11 - problem we ask a question the assistant
13:14 - will be able to call a function that we
13:15 - specify that will be used as a tool to
13:18 - go and fetch certain data that that the
13:20 - large language model needs to solve a
13:22 - certain problem and that is huge because
13:25 - now in addition to uploading file for
13:29 - retrieval mechanisms and so forth we can
13:32 - also add more tools by adding these
13:34 - functions that go serve as agents that
13:37 - can go and do something else and bring
13:39 - back the results which are going to be
13:41 - used by the large language model in this
13:43 - case the open AI apat per se or the
13:46 - assistant right to solve the problem or
13:48 - to answer accurately what you are asking
13:52 - it for that's pretty awesome
13:53 - mind-blowing let me show you the diagram
13:55 - here real quick so you can see visually
13:57 - the assistant API benefits so if you
14:00 - look at this diagram here right the
14:02 - assistants can go ahead and call the
14:04 - openi models right to uh tune their
14:08 - personality in this case their
14:09 - capabilities also these assistants can
14:12 - also access multiple tools and parallel
14:15 - so now it's sort of having these agents
14:18 - that can go and do stuff and bring back
14:21 - the results so that we can help the
14:23 - assistant to be a better assistance
14:25 - right so in this case here these are
14:26 - tools the tools that we have here we
14:29 - talked about the code and code
14:30 - interpreter we have the knowledge
14:32 - retrieval right files and documents we
14:35 - can pass upload so that our assistant is
14:38 - more knowledgeable about certain topic
14:40 - as well function calling now the great
14:42 - thing about function calling is that we
14:45 - can create it's a way for us to create
14:47 - our own tools on top of the tools that
14:50 - the assistant already has access to such
14:52 - as the code interpreter knowledge
14:54 - retrieval and so forth so now with this
14:58 - we can create our own tools right our
15:00 - own functions that go for instance and
15:02 - fetch the current situation in Bulgaria
15:07 - or go and fetch go and fetch some sort
15:09 - of data in the database somewhere you
15:11 - get the idea and along with everything
15:14 - that I said we have these persistent
15:16 - threads the threads we'll talk about in
15:17 - a second here allows us to have these
15:20 - messages that we are saving or are being
15:23 - saved in our conversation and so those
15:26 - are saved for context which is H huge
15:28 - because remember all large language
15:30 - models they don't have a concept of
15:32 - saving history per se so they're
15:35 - stateless so they don't have a way of
15:37 - saving the context which is problematic
15:39 - when we want to refer to a certain
15:41 - concept that was talked about if they
15:44 - don't not they're not saving that
15:46 - history then it wouldn't know what
15:48 - you're referring to so context is very
15:50 - important and that is all given with the
15:53 - assistance API okay and of course we can
15:55 - access files in several formats but this
15:58 - is diagram I wanted to show you about
16:00 - the benefits of the assistance API now
16:02 - most like of course you've heard of the
16:04 - chat completion API which is the one
16:06 - that you've been using if you were using
16:08 - the open AI API right so you just send
16:12 - messages and you receive response and
16:14 - it's very useful because the completion
16:16 - API it goes straight to the open AI
16:19 - models and ask questions and the large
16:21 - language models and of course the
16:23 - knowledge base but the thing here is
16:24 - that this knowledge base is knowledge
16:26 - base that is already there there's no
16:29 - addition meaning if you were to ask
16:31 - certain questions about something that
16:33 - was done or happened after September 20
16:37 - after September 2023 I believe right
16:40 - anything that was done after that then
16:42 - the large this large language model here
16:45 - wouldn't have that knowledge base so it
16:47 - would just say I don't know because the
16:49 - completion API is just a way for us to
16:52 - get direct response okay that is the
16:54 - difference here between the chat
16:55 - completion API which is useful with the
16:57 - assistance API gu as I have discussed
17:00 - earlier okay so let's look at this
17:02 - General comparison uh so we can see the
17:05 - differences between the assistance API
17:07 - and the chat completions API okay this
17:09 - just to have some sort of an idea an
17:11 - overall idea so you can see here the
17:13 - aspect column and the assistance API the
17:16 - chat completion API so for assistance
17:19 - API initial setup you have to create an
17:21 - assistant with Define capabilities which
17:23 - we'll see in a little bit for chat
17:25 - completion of course there's there's
17:27 - nothing for you to set up you just call
17:28 - the API and get the results the answers
17:31 - and so forth for the assistance API we
17:33 - have to initiate and manage in this case
17:35 - a thread for ongoing conversation we'll
17:37 - talk about what a threat is and all that
17:39 - stuff in a little bit and for the chat
17:41 - completion of course we have none of
17:42 - that so this is just to show you the
17:44 - differences between the assistance API
17:47 - and the chat completions API and you can
17:49 - go down here to complexity so more
17:51 - complex setup of course for the
17:52 - assistance API and it's simpler of
17:55 - course for the Chad completions API okay
17:57 - so no need to memorize this this is just
18:00 - something you can take a screenshot of
18:02 - and then go ahead and you know just take
18:05 - a look to see the differences between
18:07 - the assistance API and the chat
18:10 - completions API okay and there you have
18:13 - it all right so we just finished looking
18:15 - at the benefits of the assistance API
18:18 - and how it works and how it facilitates
18:21 - our lives as developers so that we can
18:23 - focus on actually building those AI
18:26 - based tools right instead of worrying
18:28 - about the underlying infrastructure
18:30 - things that we would have to do if we
18:33 - didn't have assistance so now let's look
18:35 - at the assistance API the building
18:37 - blocks because we talked a lot about the
18:39 - underlining infrastructure how it works
18:41 - to benefits let's go ahead and look
18:43 - inside and see what are the building
18:45 - blocks of an assistant all right so here
18:48 - is a diagram I like having diagrams
18:50 - because it hopefully helps you
18:51 - conceptualize these ideas the assistance
18:54 - API has about four main building blocks
18:58 - so so first you see that we can have in
19:00 - this case an assistant so the assistant
19:03 - itself is in this case The Entity the
19:05 - thing per se that we actually build
19:07 - which will then use to help us get
19:10 - information about certain topic and so
19:13 - in this case here we could have an
19:14 - example an assistant who is a travel
19:17 - agent bot that we can use so that is the
19:19 - first component and the second component
19:22 - of second building block is what we call
19:24 - threads a thread is where all of the
19:27 - messages that occur between the
19:30 - assistant and the user because that is
19:32 - the whole idea all those messages are
19:34 - tracked here in the thread so in this
19:37 - case here a users may have a message and
19:40 - say hey what is the cost for an extra
19:42 - day in Paris okay so that is a message
19:45 - that is going to be on a thread which
19:47 - the assistant will have access to as
19:49 - well as the user and then the assistance
19:52 - message would be the cost is
19:55 - 12,890 for instance right but then you
19:58 - will ask okay okay there is the
20:00 - assistant's message but how does the
20:01 - assistant know well the whole process
20:04 - has to go through the other piece here
20:07 - the other building block which is the
20:10 - Run entity so the Run entity needs to
20:13 - have a few things for it to be able to
20:16 - run those queries those questions
20:18 - essentially evaluate what's going on so
20:21 - there is this dialogue per se that is
20:22 - happening so in this case here the run
20:25 - as you can see here we have has to have
20:27 - access to the assist
20:29 - in this case you will see later it's
20:30 - just going to be an ID and also has to
20:32 - be have access or has to have a
20:36 - reference to the thread because that's
20:38 - where all the messages are so in this
20:40 - case here the assistant is going to be
20:41 - our travel agent
20:43 - bot and the thread is trip to Paris for
20:47 - instance and then inside of this run the
20:51 - Run can be triggered to then run
20:53 - different steps to get to that
20:56 - conclusion to get to the result what
20:59 - would happen is if you look at all of
21:01 - this we have in this case the assistant
21:03 - the number one building block we have
21:06 - thread that is the number two building
21:08 - block inside of the thread that's we
21:10 - have the message so messages or message
21:13 - that's the number three building block
21:16 - and number four is the actual run
21:19 - entity okay and so how would all this
21:22 - work well we have the assistance and
21:24 - inside of the assistant we have and then
21:26 - we have the thread we have a message
21:29 - from the user what is the cost for an
21:31 - extra day in Paris that is going to be
21:33 - sent to run which will have the
21:36 - assistant ID as well as the thread ID
21:39 - because it needs to know where to pull
21:41 - those messages that are coming in from
21:43 - right and then it's going to go through
21:44 - a process steps number one use code
21:48 - interpreter if that's what needed to
21:50 - calculate things and then is going to go
21:52 - ahead and create a message and if need B
21:55 - this is the beauty is going to be able
21:56 - to go and call any other tool that may
21:59 - be needed in order to get the correct
22:02 - response and the response is going to be
22:04 - as a message which is going to be
22:06 - returned back again to our thread does
22:10 - it make sense so the thread is where all
22:12 - the action really is being dumped into
22:16 - the history per se right and there we go
22:19 - and now the thread will have the
22:21 - assistance message because all the steps
22:23 - are done we have the response and goes
22:26 - back as a message assistance message
22:29 - which then we can use that to show in
22:31 - our application these are the assistance
22:34 - API building blocks that's very
22:36 - important here because it can be a
22:38 - little bit tricky at first to really
22:39 - conceptualize the idea the assistant
22:42 - itself needs thread a thread that's
22:44 - where all the messages go just think of
22:46 - a bucket of messages right and then the
22:49 - entity run here this is where the
22:52 - running of things to go and fetch things
22:54 - go through the steps this is where it
22:56 - happened the Run needs to have reference
22:59 - to the assistant because needs to know
23:02 - who is this assistant because remember
23:03 - the assistant will have all of the
23:05 - specifications that it needs so it knows
23:08 - what it specializes in in this case is a
23:12 - travel agent bot so the Run needs to
23:15 - have a piece in this case reference to
23:17 - these assistant so when it goes and
23:19 - starts running the steps it knows what
23:22 - knowledge base it needs as well as other
23:24 - tools to indeed create those message
23:27 - back so the assistance messages are all
23:30 - here so that we can then use those
23:33 - messages to show in our applications so
23:36 - forth all right so very simple but can
23:39 - be complex to wrap your head around
23:41 - understand and conceptualize these
23:43 - building blocks then what's coming next
23:45 - is not going to be too complicated okay
23:48 - so rewatch this part if you need to but
23:51 - I think you should be good so what we'll
23:53 - do next is we're going to go in the
23:55 - dashboard in the playground and look at
23:57 - create creating an assistant manually
24:00 - and later of course we're going to do
24:01 - that using Code okay let's go ahead and
24:04 - do that so now let's go and log in into
24:07 - the open AI dashboard so you should have
24:09 - an account and everything now when you
24:11 - log in this is more or less what you're
24:13 - going to be seeing so what we want to do
24:15 - is you want to hover over here if you
24:18 - don't see that so you click here this is
24:20 - what you're going to be seeing going to
24:22 - hover over and we're going to go to
24:24 - assistance but this is where we need to
24:25 - go so click here and sometimes takes
24:28 - some time looks like uh incorrect let's
24:31 - go ahead and refresh
24:33 - this okay there we go so today we've
24:36 - been having some issues but just refresh
24:39 - if you're having some issues okay so
24:41 - once you here let's go ahead and create
24:43 - our first assistant so we can go ahead
24:45 - and say create here or from here doesn't
24:47 - matter going and create and first thing
24:49 - we need to do is to add a name so let's
24:52 - say this is going to
24:54 - be personal trainer as such and then we
24:58 - need to pass or add the instructions so
25:01 - because it's an assistance we need to
25:03 - say okay you are X Y and Z you're
25:05 - knowledgeable in this area and so forth
25:08 - okay I have the instructions here so I'm
25:10 - just going to paste it in here and I'm
25:12 - going to click here to make it a little
25:14 - bit larger so this says you are the best
25:17 - personal trainer and nutritionist who
25:19 - knows how to get clients to build lean
25:22 - muscles you've trained High Caliber
25:25 - athletes and movie stars because that is
25:27 - exact what we are all are striving to be
25:30 - okay so there we go so these are the
25:31 - instructions of course you will want to
25:33 - put as many instructions as a prompt
25:36 - really as you need for your assistance
25:40 - so if specify exactly what you want your
25:43 - assistance to help you with okay I'm
25:45 - going to go back and next we're going to
25:48 - choose the model right openi model that
25:50 - we're going to be using there are a few
25:52 - and as a recording of this video we have
25:54 - gpg for preview and of course these
25:57 - numbers will change depending on when
26:00 - you're going to be watching this video
26:01 - okay but just imagine just remember that
26:03 - the concepts of how this worked that's
26:05 - what really matters instead of things
26:07 - that may change here okay so I'm just
26:10 - going to go ahead and use the jpt 3.5
26:13 - turo that should be fine for now and
26:15 - it's a little bit cheaper as well so I'm
26:17 - going to you are more you are more than
26:19 - welcome to go to the higher so I'm going
26:21 - to just use that one really that's fine
26:23 - and then we have the tools we talked
26:25 - about the tools so these allow us to
26:27 - attach certain things that they we want
26:30 - this assistance to be able to do if it
26:32 - doesn't already have those tools right
26:36 - so we have here retrieval we have the
26:38 - code interpreter and we can add
26:41 - functions as well okay so we don't need
26:44 - anything I'm just going to go ahead and
26:45 - toggle the code interpreter just because
26:47 - why not okay and anything else we can
26:49 - just live as is and I'm going to say
26:51 - save as such so now the assistant was
26:55 - created and if I get rid of this and get
26:58 - rid of that and we can see that we do
27:00 - have our personal trainer so there is
27:02 - the instructions and the ID so this is
27:06 - very important because remember the
27:08 - diagram I was showing you earlier was
27:10 - that um when things start running when
27:12 - we have that fourth component or
27:15 - building block which is the run it needs
27:17 - to know this personal trainer or in this
27:20 - case the assistant so this is an ID that
27:22 - will be used internally later we're
27:24 - going to be able to generate or create a
27:27 - system using Code which I'm going to
27:29 - show you but I just want to give you an
27:30 - overview right now so very important
27:33 - these IDs are going to be used and from
27:36 - here you can see we can go and say test
27:39 - so if you click here this will open a
27:41 - different tab as you see here and then
27:44 - you can test it out to see if this
27:46 - actually works for instance you can
27:47 - enter a message remember this is the
27:49 - message in this case will be the user
27:51 - message if I show you exactly these
27:54 - assistance API building blocks this is
27:56 - where we've set up so we have the
27:59 - assistant which is in this case we said
28:01 - it's travel agent bot but in this case
28:03 - is our trainer personal trainer and we
28:06 - have thread which we haven't created yet
28:08 - hasn't been created but we will create
28:10 - all of this is going to be created in
28:12 - the back end once we start running
28:13 - things and then we have the messages
28:15 - which is now a user message is exactly
28:19 - what we pass here okay so say I want to
28:24 - build
28:26 - muscles what foods should I eat I'm
28:31 - going to go and say run haha run what
28:33 - you think it's supposed to do well
28:36 - what's going to happen now when we run
28:38 - first of all that message the moment we
28:40 - say run the message will be added to
28:43 - thread Aha and you can see it even says
28:46 - thread here right so the thread right
28:48 - now is empty if I say run it's going to
28:51 - go ahead and add that message and the
28:55 - instructions is showing here and the
28:57 - there's a lot of things that happening
28:58 - here so let me go ahead and go through
29:00 - everything I'm going to just make this
29:02 - probably can't make that smaller that's
29:04 - okay and one thing you see here this is
29:06 - the thread and each thread that is
29:08 - created because it is indeed a simple
29:11 - message right and each thread that is
29:15 - created has also an ID this will make
29:19 - sense later so you can see here um we
29:21 - have all the information so the thread
29:23 - is where all the messages are going to
29:25 - be in from this case our user the
29:28 - question that we ask as well as when we
29:31 - run and come back we should have the
29:33 - personal trainer the message as well
29:36 - just like what I showed you here this
29:38 - run went ahead and pulled in the
29:41 - assistant ID internally and then the
29:43 - thread ID internally and then went
29:46 - through the steps and sped out the
29:50 - assistance message which now we can see
29:53 - here is the message right this is the
29:56 - assistant say personal trainer that's
29:58 - the name of our assistant and says to
30:00 - build muscles lean muscles that is it's
30:03 - important to focus on balanced diet that
30:05 - includes blah blah blah protein rich
30:07 - foods whole grains fruits and vegetables
30:11 - healthy fats dairy products and all this
30:15 - great stuff and even gives us a little
30:18 - recommendation here and note it's
30:20 - important to consult with healthc care
30:22 - professional and all that great stuff
30:24 - very cool this is what's happening right
30:27 - essentially goes back to what I showed
30:29 - you earlier going back here you can also
30:32 - see that we have logs now this is really
30:34 - cool because it allows us to look at
30:36 - exactly what happens so you can see here
30:38 - we can hide the logs we don't want to
30:40 - hide the logs right now because I want
30:41 - to show you something so for our logs
30:43 - here look at what happened the moment we
30:45 - said run what happens that a thread was
30:48 - created indeed because we need a thread
30:51 - where all the messages are going to be
30:52 - in just like again aha what I showed you
30:56 - here okay okayy this is this is good
30:58 - okay so if we open here you can see
31:00 - exactly what happens so the thread was
31:03 - created and it we have a response which
31:06 - is indeed the thread ID and this ID here
31:09 - is exactly the same as this this is the
31:12 - thread ID that was created okay and we
31:15 - have other some other metadata that's
31:16 - okay and then we added a message to that
31:19 - thread the message was the one that we
31:21 - wrote here in fact you can see all that
31:24 - happens here on the thread visually it
31:26 - is what being shown here as a log but I
31:29 - want you to understand this so you know
31:31 - where things are in case when things
31:33 - don't work you understand where to find
31:35 - things okay so we have our add message
31:37 - here the message was added the role is
31:40 - user because I am a user in this case
31:42 - because I enter the message here right
31:45 - so going back it is this message here
31:48 - which is going to be sent to run very
31:51 - good so that
31:53 - happens let me go ahead and close this
31:57 - we added message and then we run the
31:59 - thread right it just did a post request
32:03 - aha it has to have the assistant ID why
32:06 - did I tell you because if you look at
32:08 - this diagram here first it said
32:10 - assistant the name but internally it has
32:12 - to have the actual ID as well as the
32:15 - thread ID which is exactly what's
32:18 - happening in the back end if I close
32:20 - this thread here let's see you can see
32:24 - that has the response and the response
32:26 - each response has of course an ID the
32:28 - object is run and when it was created
32:31 - the assistant ID as well as the thread
32:34 - ID voila and all of this other metadata
32:37 - as well as the model that was used the
32:39 - instructions all of that was sent along
32:43 - in the response okay in the thread and
32:46 - then of course get runs status because
32:49 - when we hit run when hit run what
32:52 - happens at the back end things are
32:53 - happening meaning these steps are going
32:56 - to go do you see maybe it has to use the
32:59 - code interpreter create a message and do
33:02 - all these other things it's not until
33:03 - all these steps are done which means an
33:06 - answer a message in this case an answer
33:09 - from our run okay the our assistant in
33:12 - this case uh it's not until then once
33:15 - that is done that the message is
33:16 - actually created and sent back so all of
33:19 - that is happening here all right this is
33:21 - the log and run step let's see what
33:24 - happens first it has this object here
33:27 - this data if I open this data here and
33:30 - keep opening it has the ID the object
33:33 - right these are the steps right in fact
33:36 - that's that's ex that's exactly what I'm
33:38 - showing you there's the status and this
33:40 - is the steps going through the whole
33:42 - process of creating crafting this
33:45 - message for the assistant message which
33:47 - is going to be sent and then we can see
33:49 - the
33:50 - results all right let's continue so you
33:52 - can see it has a Json here response it
33:55 - comes in as list an object list and we
33:58 - have the data field which has an ID the
34:01 - object thread step a run step when was
34:04 - created and all the great stuff and
34:07 - continue the other
34:09 - step and as many steps as possible and
34:12 - then the status run status to tell us
34:15 - whether the running is over everything
34:18 - is set up now we have the response the
34:20 - message which can be passed back to the
34:24 - assistant right so that we can then see
34:27 - let's see continue completed you can see
34:29 - here that the status now is completed
34:31 - which mean all is good we should have a
34:34 - formulated uh message okay if I go to
34:38 - tools you can see what tools were used
34:40 - code interpreter right in this case even
34:43 - though it wasn't really needed but it's
34:44 - okay and then get
34:47 - runs you can see now it returns
34:51 - data which has an ID has an
34:54 - object and the status and everything and
34:58 - then we go to the message response now
35:02 - comes in as object list and data there
35:06 - and you can see now we have the ID the
35:09 - thread message okay the first one there
35:12 - and then this is for the assistant aha
35:15 - if you open here you will see that
35:17 - assistant will should have let me click
35:20 - here to
35:22 - open aha there we go and there we go we
35:26 - have the the actual value which is
35:28 - exactly this what we see here says to
35:30 - build muscles all in muscles all of that
35:33 - information which weed back so the
35:37 - assistant in this case went through this
35:39 - whole process that I showed you earlier
35:41 - and the return the assistant message in
35:43 - this case back to our thread which then
35:45 - we can see in this case we're able to
35:47 - see that the information the message is
35:50 - here so this is a very good
35:52 - representation of the assistance in all
35:54 - the building blocks but this is real
35:56 - cool the log is because it sees we can
35:59 - actually see all the whole process of
36:01 - what's happening so we understand
36:03 - exactly what's happening so it's not
36:05 - this Mystery Box per se uh what you've
36:08 - learned here is that to create an
36:10 - assistant here manually you have to
36:12 - easily just go to the assistant
36:15 - API or playground ideas and just hit
36:19 - create and you have to pass the name of
36:21 - your assistant as well as the
36:23 - instructions right so specify what do
36:25 - you want your assistant to be good at or
36:27 - to what knowledge these assistants has
36:30 - to have right what they're going to help
36:32 - you with and then of course that will
36:33 - generate the
36:34 - ID as you see here and of course as you
36:37 - create a assistance you have to of
36:39 - course as you as I showed you you have
36:40 - to make sure that you attach the right
36:43 - model and the tools that you want to
36:46 - attach to so what I want you to do is to
36:49 - create for instance a code assistant
36:52 - okay so essentially uh come up with
36:54 - instructions for for an assistant that
36:57 - can help you with code issues right you
36:59 - can say you are a very helpful Java
37:03 - developer assistant blah blah blah
37:05 - you're knowledgeable about the basic of
37:07 - java intermediate and advanced and so
37:09 - you help developers to do pair
37:12 - programming whatever it is so that and
37:14 - test it out and see if it works and make
37:16 - sure because it's code based make sure
37:19 - of course in this case you really would
37:20 - need to have this code interpreter
37:22 - because then you can paste in as a
37:24 - message a user message a pie of code and
37:27 - ask the assistant if this code will
37:30 - compile if there's something you can do
37:33 - they can do to improve it and so forth
37:35 - so you have some ideas on how this works
37:37 - okay do that and save changes and create
37:41 - the assistant and then test it out and
37:43 - see if it works all right go ahead and
37:45 - do that and I'll see you next all right
37:47 - so now we're going to actually do the
37:49 - same thing we did before but in code
37:51 - which is very exciting the first thing
37:53 - we need to do is let's go back to our
37:56 - playground here assistance playground
37:57 - login and everything and I hope you were
38:00 - able to do that little exercise earlier
38:02 - if not well what can I
38:04 - say all right so what we'll do here is
38:07 - we're going to do the same thing but
38:09 - we're going to be using code right so
38:11 - I'm going to go ahead and delete this
38:12 - yes I know it's very sad but it got to
38:15 - go okay now it's empty so we're going to
38:17 - do all that using Code so you should
38:20 - have Visual Studio code installed or any
38:23 - other rde that you may use that's fine
38:26 - and it should also have python
38:28 - everything set up so everything should
38:30 - be good right so what I'm going to do
38:32 - here is I'm going to create a new folder
38:35 - for our project so
38:38 - personal trainer as
38:40 - such going to CD to our personal should
38:43 - be personal but Persona that's fine
38:46 - too okay so it's empty there so I'm
38:49 - going to say I'm going to say code to
38:53 - open this exact here just going to going
38:56 - to close that one and then there we go
38:58 - so we don't have much going on here so
39:00 - I'm going to go ahead and create a new
39:02 - file let's call this
39:05 - main.py there we go and also I'm going
39:08 - to go ahead and create in this case
39:11 - requirements.txt
39:14 - requirements txt such this is where
39:17 - we're going to put all of our
39:18 - dependencies and libraries that we need
39:20 - for our Python and for our project I
39:23 - should say and next what I'm going to do
39:25 - let's go ahead and create create a file
39:28 - this is going to be our environment
39:29 - variable file so EnV this is where we're
39:32 - going to put our environment variable so
39:34 - the idea is we're going to have our open
39:38 - AI environment variable let me close
39:39 - this down like that and we're going to
39:42 - put your open AI key remember that key
39:44 - that I showed you earlier so essentially
39:46 - you're going to come here and go to API
39:50 - keys and if you don't have an API key go
39:53 - ahead and create one just like I showed
39:54 - earlier and take that key and that's
39:58 - what we're going to put inside this here
40:01 - okay so go ahead and do that and for
40:03 - requirements here I'm actually going to
40:07 - pass in a few ones I'm going to say
40:11 - python. EnV and I also need open AI
40:16 - package like that very good so that's
40:18 - inside of our requirements.txt I'm going
40:21 - to create another file here called thatg
40:24 - ignore so that's for me to hide a few
40:26 - things once I push this to the
40:28 - repository GitHub repository so that you
40:31 - don't have things that you don't need
40:32 - okay so in this case here I'm going to
40:34 - make sure that our git it's going to
40:38 - bypass the environmental variable file
40:41 - so that it's not pushed I'm going to
40:43 - create a python environment that way we
40:46 - can run pip install to install
40:48 - everything in this environment specific
40:51 - for this project to do so uh remember
40:55 - I'm on Mac here here
40:57 - Python 3 and then it's going to be I'm
41:01 - going to say Das m v
41:04 - andv as such and then the name of the
41:07 - environment so I'm going to just say my
41:09 - EnV like that and what will happen now
41:12 - is just going to go ahead and create I'm
41:13 - going to say yes because you notice a
41:15 - new environment has been created say yes
41:16 - going to use that and you will see now
41:18 - we have this my EnV uh with binaries
41:21 - include libraries and everything this is
41:23 - our python environment that we can use
41:25 - then to activate so to activate it I'm
41:27 - going to say
41:29 - Source my EnV and then I'm going to go
41:32 - to Binary and then activate hit enter
41:35 - you can see now my EnV is environment is
41:39 - activate so that's really good which
41:41 - means then I can say
41:43 - pip install d r and pass the
41:47 - requirements that text which has all of
41:49 - these dependencies or or packages or
41:52 - libraries that we need so I'm going to
41:53 - hit enter so he's going to go ahead
41:56 - ahead and get all that information for
41:58 - us okay so all the packages have been
42:00 - downloaded that's really good let me
42:02 - just clear all out of this and then now
42:06 - if you look at my M of course I'm going
42:08 - to go to binaries you can see that we
42:10 - have Envy we have opening I which is
42:13 - exactly what we added very good so we
42:15 - should have everything set up now I'm
42:16 - going to get rid of this so let's go
42:18 - ahead and do some importing here so I'm
42:20 - going to import open AI library and I'm
42:23 - going to set up the m so that we are
42:25 - able to get the environment variables
42:27 - and do all the great stuff so I have all
42:28 - that information here just going to copy
42:31 - that and paste in here okay important
42:34 - findm load an M
42:37 - Fromm package all
42:39 - right and I'm going to call this load M
42:43 - there so that it all set up and then I'm
42:45 - going to create a client here which I'm
42:47 - going to be using the client is going to
42:49 - be open ai. open AI as
42:54 - such okay and now now with this client
42:56 - we're going to be able to call the openi
42:59 - API assistant and anything else that we
43:02 - want because we have created that now
43:05 - you could have also done something like
43:07 - this open AI right and then say API key
43:11 - and then go to os. environment. get and
43:13 - pass the open AI key which is the key in
43:16 - this case the value that we put inside
43:19 - of our environment variable okay so
43:22 - that's another way to do that but since
43:24 - I'm loading all the environment variable
43:25 - this to work just say client open ey.
43:27 - open Ai and also if you want you can
43:30 - pass the open AI key directly from here
43:33 - but it seems to work just like this uh
43:36 - because it gets all the environment
43:37 - varable if not just go ahead and add the
43:39 - openi key directly here or just like
43:42 - what I showed you uh let me just do that
43:45 - again I'm going to put it here I'm going
43:47 - to leave it there all like that okay
43:49 - whatever works for you go ahead and do
43:50 - that or the other way too I'm going to
43:53 - put it all here there's another way you
43:55 - could have done said client open AI just
43:57 - like I said pass the API key and go
44:00 - ahead into the custom environment
44:02 - variable if you change the names okay
44:04 - but if you are using open AI _ aior key
44:08 - then this should just work as it is all
44:11 - right I'm going to leave that there just
44:13 - in case you need that all right very
44:15 - good so next what I'm going to do let's
44:17 - go ahead and say model this is just a
44:20 - variable that we're going to be using
44:21 - and the model we're going to be using
44:23 - it's going to be gpt3 for turbo and I'm
44:27 - going to put it here for now okay now we
44:30 - may change this you may want to use GPT
44:32 - for preview depending on situations but
44:34 - so far so good okay so now that we have
44:36 - everything set up let's see how can we
44:38 - create in this case a an assistant right
44:41 - in this case we're going to create the
44:42 - trainer the personal trainer assistance
44:45 - very simple all we do I'm going to just
44:47 - put here all we do really is just say
44:51 - the assistant I'm going say
44:54 - personal and then I'm going to use our
44:57 - client right which is which has
45:00 - instantiated our open AI there and say
45:04 - client and it's going to go to Beta
45:06 - remember that because as a recording of
45:08 - this video the assistance API it's
45:12 - actually in beta which means they're
45:13 - still working on it and so maybe by the
45:15 - time you watch this video you watch this
45:17 - course maybe this you won't need to say
45:19 - beta which will be great so just keep
45:22 - that in mind for now we just have to go
45:23 - to Beta and then we go to assistance and
45:27 - once we get to assistance we go ahead
45:28 - and say create very conveniently and
45:31 - then we can pass certain parameters here
45:34 - okay so what parameters do we pass here
45:36 - well first of all we need to pass the
45:38 - name that we want to name our personal
45:42 - assistant in this case I'm going to call
45:43 - this personal trainer as such and then
45:47 - we pass instructions which are very very
45:50 - important as you remember and I'm going
45:52 - to pass the instructions here real quick
45:55 - so these are the same instructions that
45:57 - we used before so you are the best
45:59 - personal trainer nutritionist and you've
46:02 - trained High Caliber athletes and movie
46:04 - stars okay there we go we have all of
46:07 - that
46:08 - information let me get rid of that don't
46:10 - know where that came from there we go
46:11 - all right and the next thing we need to
46:14 - pass here is the actual model because we
46:16 - need to remember this is the same thing
46:18 - we've done uh manually so now we are
46:21 - passing the model that we're going to be
46:23 - using or the assistant it's going to be
46:25 - relying on and it's going to be the
46:26 - model that we pass here just put in this
46:28 - variable so it's easier to change in one
46:30 - place so just like that we created our
46:33 - assistant and can go ahead and say print
46:35 - in this case I'm going to say personal
46:38 - trainer. ID right this will give us the
46:42 - actual ID of this personal trainer
46:46 - assistant that we just created okay and
46:48 - I'm going to go and comment that out for
46:50 - now the next thing we need to do is to
46:52 - create yes the thread because this is
46:55 - where
46:56 - all of the messages as you know uh will
46:59 - be so to create a thread again you see
47:02 - that's very easy I'm going to say thread
47:05 - and use client again beta and I'm going
47:09 - to go ahead and say threads and.
47:13 - create again for our thread we need to
47:15 - pass a few thing now the cool thing here
47:17 - is that for our thread we passed
47:18 - messages which is going to be a list so
47:22 - this messages here I'm going to pass an
47:24 - object in this case going to start with
47:26 - the role okay and the role is going to
47:29 - be
47:31 - user and for the user in this case the
47:34 - content is going to be what well I'm
47:36 - going to just put something I'm going to
47:38 - say how do I get
47:43 - started
47:44 - working
47:47 - out to
47:49 - lose fat and build muscles something
47:54 - like this so this will be the first
47:55 - message it's going to be sent for as the
47:58 - user okay we could have created a thread
48:02 - with no message at all and then add
48:04 - those messages later but we can go ahead
48:06 - and add a message a user message right
48:08 - away as well okay I'm going to go ahead
48:10 - and
48:11 - print actually let's call This
48:14 - Thread ID and get that thread ID so just
48:17 - thread. ID okay because those are needed
48:21 - and I can go ahead and
48:23 - print thread ID let's say so we see and
48:26 - I can do the same thing here
48:31 - assistant ID and personal. ID like that
48:37 - and then here I can just go ahead and
48:40 - when we need just going to go like that
48:43 - very good so now that we have these two
48:46 - things what will happen now if we run
48:48 - this well we are going to be able to
48:51 - create an assistant right and also in
48:54 - this case create a threat
48:56 - and get those IDs which you will see in
48:58 - a second here so let's go ahead and run
49:01 - this real quick and see if this work all
49:04 - right so I know my environment is active
49:06 - so I'm going to say Python 3 so make
49:09 - sure on Windows I think it's just Python
49:12 - and I'm going to say
49:13 - main that py and let's go ahead and make
49:17 - sure everything is good I think let's go
49:20 - run voila and you can see that we have
49:23 - our assistant ID because we want to
49:26 - create that assistant ID we created here
49:29 - personal trainer and we're printing it
49:31 - out and we also have the thread let's
49:33 - see if this is correct because as you
49:35 - saw we deleted everything in our back
49:38 - end in our playground and now if we go
49:40 - back let's see let's go to our
49:41 - assistants we should see our personal
49:43 - trainer assistant which was created just
49:46 - now all right and this ID 7
49:50 - yt5 you can see 7 yt5 that is exactly
49:54 - what we have here you can see we have
49:56 - that personal uh trainer name
49:59 - instructions and the model that we're
50:01 - using that's what we specified and so
50:03 - forth and internally we do have a thread
50:07 - which is this thread here that is ready
50:09 - to be used which will have a message so
50:11 - now this is not working we're not seeing
50:13 - anything right now but it's okay because
50:16 - we're going to be using that okay so we
50:18 - have our assistant and we have a thread
50:20 - where all the messages are going to be
50:22 - in and so going back to code here we
50:25 - understand that if we were to run this
50:26 - again that would kind of deit the
50:28 - purpose because we have the assistant
50:30 - created already it would go ahead and
50:32 - create yet another assistant which is
50:34 - not what we want and this is the reason
50:35 - why in this case here we were able to
50:38 - get those in this case here you can see
50:41 - we have the assistant ID as well the
50:43 - thread ID which we're going to be using
50:45 - to proceed uh creating and conversing in
50:49 - this case with our assistant so what I'm
50:52 - going to do here I'm copy these two real
50:55 - quick and I'm going to just go ahead and
50:59 - hardcode our IDs so that we can use them
51:03 - okay so I'm going to do like that so
51:05 - this is going to be
51:08 - assist put that into variables that we
51:10 - can actually use okay let's not give
51:13 - spaces so we don't want into issues so
51:15 - now that we have that we can go ahead
51:17 - and comment all of this out here okay
51:20 - I'm going to leave this as is so we
51:22 - don't need to you will have access to
51:24 - all this code anyway so now we have what
51:26 - we need so in this case the assistant ID
51:28 - when we use that it's going to be um
51:32 - created right in this case it's going
51:34 - we're going to be referenced that in
51:35 - fact I'm going to move all of this uh to
51:38 - the bottom here because we already have
51:40 - all of that so I'm going to
51:42 - also comment this out because we don't
51:45 - need that anywhere so now we have the
51:47 - information that we need which is the
51:48 - thread ID and the assistant ID because
51:50 - they have been created as you saw in the
51:52 - back end okay so we'll do next is we're
51:54 - going to go go ahead and create the
51:56 - actual message another message here so
51:58 - we can start conversing with our API
52:01 - assistance API say
52:04 - create a
52:07 - message so I'm going to say message
52:10 - going to set that to uh let's say say
52:13 - what are the best
52:16 - exercises
52:19 - for
52:20 - lean
52:22 - muscles and getting
52:27 - strong that's our message we're going to
52:30 - then add to the thread to add to the
52:32 - thread well I'm just going to say
52:34 - message again and I'm going to say
52:36 - client that
52:39 - better and
52:41 - threads and I'm going to go to messages
52:45 - right and then create in this case a
52:47 - message and for the message well in this
52:51 - case here the thread will need we need
52:53 - to pass the thread ID which is going to
52:55 - going to be the thread ID and we need to
52:57 - pass the role which is going to be the
52:59 - user role right because we are
53:01 - conversing we are asking a question to
53:04 - them and then the content in this case
53:07 - is going to be the
53:09 - message which we created at the top here
53:12 - and next we are going to then run the
53:16 - thread or in this case run the assistant
53:18 - how do we do that well we need to create
53:20 - that entity first to run our assistant
53:24 - and to do so I'm going to say run and
53:27 - then I'm going to use client
53:29 - again
53:31 - beta threads that
53:34 - runs right that create so we need to
53:37 - create that runs entity which is
53:39 - attached to the thread and you can see
53:41 - the beauty here because we said earlier
53:43 - that run needs to know the assistant ID
53:46 - that's why we kept it as well as the
53:48 - thread ID so that they can get message
53:50 - and added that back to that thread so in
53:54 - this case I'm going to pass the thread
53:56 - ID it's going to be thread ID and the
53:58 - assistant ID it's going to be the
54:00 - assistant
54:02 - ID and in this case instructions we need
54:05 - to pass the instructions for our run
54:09 - okay so in this case I just going to say
54:12 - please address the user as James Bond
54:18 - and there we go so now we have our run
54:20 - here now we have to remember that our
54:22 - run has to go through different steps it
54:24 - could go and find a tool that needs to
54:27 - be able to assist the user well right to
54:30 - create to give the assistant more power
54:33 - things that he needs to do right go
54:35 - through all the steps that we saw before
54:37 - uh you may need to then formulate of
54:39 - course that message back right it's
54:42 - going to be the assistant message with
54:44 - the result that the user would want to
54:47 - receive okay so that takes time because
54:50 - it's a process so what I'll do here is
54:51 - I'm going to put together a helper
54:53 - function that will help help us deal
54:56 - with the waiting the stepping that the
54:59 - Run has to do before it gets to the
55:01 - result right the message is written back
55:04 - the response Etc okay so for the sake of
55:06 - time here I do have this wait for run
55:09 - completion so essentially we're passing
55:11 - the client and passing the third ID run
55:14 - ID and then sleep interval is going to
55:16 - be five now for this to work I'm going
55:18 - to have to import a few other things
55:21 - here real quick so because it's going to
55:25 - calculate in this case the time the
55:27 - starting time and all of that to give
55:28 - that elapsed time so I'm going to just
55:31 - go ahead and paste in the time logging
55:33 - and daytime from daytime okay so these
55:36 - are the packages that we need so
55:37 - essentially what this is doing here is
55:39 - we're going to wait so while true we're
55:41 - going to try we're going to go ahead and
55:43 - uh say client threads retrieve in this
55:46 - case we're going to pass the thread ID
55:48 - and the Run ID and then it's going to
55:51 - check if run completed at and it's going
55:53 - to go through and get the laps time
55:56 - we're going to get that and we're going
55:57 - to subtract so do all the calculation
55:59 - just to tell us how long this whole
56:01 - process took it's not necessary but it's
56:04 - fun to know and then we're going to
56:06 - print run completed at the elapsed
56:08 - formatted elaps time and we're going to
56:10 - log that okay but most importantly this
56:13 - is where we're actually going to get the
56:14 - message messages that is once the run is
56:17 - completed because that's where also the
56:20 - message that we need the assistant is
56:22 - going to be spitting out sent to us
56:24 - that's it's going to be because all that
56:26 - is going to be put back into the thread
56:29 - okay so what we do here is we go through
56:31 - our threads again remember threads
56:33 - that's where all the messages are the
56:35 - user's messages as well as the assistant
56:37 - messages live we're going to go through
56:39 - that because it's a list and then we
56:41 - need to pass the thread ID so we can get
56:44 - those messages that's very important
56:46 - because you could have multiple threads
56:48 - going right but on the same assistant so
56:52 - it's important to understand that we
56:53 - need to pass the actual ual thread ID so
56:56 - that we know we're looking at the right
56:58 - bucket in this case where all the
57:00 - messages are so we can repreve all those
57:02 - messages and then we're going to get the
57:04 - last message okay that is there because
57:06 - that's going to be our response in this
57:08 - case and then we're going to go to the
57:09 - text and get the value okay this is how
57:12 - we get the response so the response here
57:14 - is going to go to last which is the
57:16 - messages go to content and then the text
57:19 - and the value and we're going to
57:20 - retrieve that and now here this is where
57:22 - I'm going to actually run by just
57:26 - calling the waight for completion and
57:29 - pass what needs to be passed which is
57:31 - the client I'm going to call client okay
57:34 - I could have just because the names are
57:37 - the same I could just pass client but
57:38 - let's just say client like this and then
57:41 - I'm going to pass the thread ID it's
57:42 - going to be thread ID I'm need to pass
57:44 - what else uh it says thread ID run ID so
57:49 - run ID in this case how do we get the
57:51 - Run ID well we know that we have a run
57:55 - here which is being passed along right
57:58 - so we're going to pass that run. ID so
58:00 - I'm going to say run. ID so we get that
58:04 - for this to work and there we have it so
58:06 - when we run this we should see some sort
58:09 - of result let's see if this works I'm
58:11 - going to go ahead and open here and
58:15 - let's say Python 3 main that Pi in your
58:18 - case if your windows it's got to be
58:20 - something else let's run if all goes
58:22 - well it will take a little bit because
58:24 - it's thinking and we should see once all
58:28 - is done we should see some
58:34 - results all right there we go now we
58:36 - have a result so if you go up here we
58:39 - can see the Run completed in what would
58:42 - be 24 seconds right and then the
58:46 - assistant response well James Bond aha
58:49 - because we told it to refer as as James
58:52 - Bond uh when it comes to getting lean
58:54 - and all that stuff it's essential to
58:56 - focus on a combination of resistance
58:58 - training and cardiovascular exercises
59:01 - there's squats deadlifts bench press
59:04 - pull-ups chain UPS lunges planks and all
59:08 - of that great stuff so we got the
59:09 - response so you can see that this indeed
59:13 - works right and the other thing you can
59:15 - do also here is we noticed earlier that
59:21 - whenever we run something let's go to
59:22 - test here you can see that we have have
59:25 - logs so we can actually go and look at
59:27 - all the logs if you want to in code to
59:30 - do so I'm going to in fact it's going to
59:32 - be the steps right of whatever it's
59:34 - happening all the steps when we say run
59:37 - the steps goes through so I can do that
59:40 - as well real quick here to do so I'm
59:42 - going to say run
59:44 - steps putting a variable and I'm going
59:47 - to use
59:48 - client better again threads and runs and
59:54 - steps look at that and then in this case
59:57 - it's going to come in as a list so I'm
59:58 - going to say that list and I'm need to
60:00 - pass again you guess it the thread ID
60:03 - because it needs to know where I'm
60:05 - getting the steps from or for in this
60:07 - case and the Run ID which is going to be
60:10 - run. ID okay and remember this run here
60:14 - it is what we created earlier here very
60:17 - very important all right so what I can
60:20 - do now is I'm going to change the
60:23 - message here that the user and I can say
60:27 - how much water
60:29 - should I drink in a day to get
60:34 - healthier
60:36 - okay there we go so let's go back and
60:39 - open our
60:43 - terminal and I'm going to run this
60:46 - again okay so there we go we have a
60:48 - result here took took about 15 seconds
60:51 - and to maintain a good health James Bond
60:53 - it's generally recommended to to aim for
60:55 - intake of eight glasses roughly 2 lit of
60:58 - water per day however this is General
61:00 - guideline blah blah blah and all that
61:03 - informations very very good ah look at
61:05 - this stay hydrated 007 prioritize your
61:09 - health and well-being very cool very
61:11 - cool indeed so this is very exciting
61:13 - notice here that now we have this power
61:17 - of creating
61:18 - different assistance apis right and
61:22 - create threads and different threads
61:24 - actually even within that one assistant
61:26 - API and we can have all this
61:28 - conversation and get response so you can
61:30 - see how easy this is and um this is a
61:33 - very simple example and later I'm going
61:35 - to show you how to create an actual bot
61:38 - or a how to create a bot a chat bot
61:41 - where you can go ahead and start
61:42 - chatting and then the assistant will
61:45 - will respond and you can get information
61:47 - that way as well which is really
61:49 - interesting and now you can see the
61:51 - advantages here right the advantages
61:53 - that not only are are we just going to
61:56 - come here in the playground and create
61:59 - assistance and having to interact with
62:01 - it here we can obviously but that's not
62:04 - scalable right because we want to build
62:06 - application that will leverage this
62:09 - assistance API and this what we're doing
62:11 - here is indeed what it's the leverage
62:14 - that we're given by the assistance API
62:17 - because now we can use the API the
62:18 - actual assist API to create uh in code
62:22 - and attach this to a website or any
62:25 - application that we may be building
62:27 - ourselves and then we can also go steps
62:30 - and look at all the steps right in fact
62:33 - oh I did not there we go so I
62:36 - didn't I didn't print the steps let's go
62:38 - ahead and print the steps oh you
62:40 - probably saw that and I'm going to put
62:42 - inside of F string here I'm going to
62:44 - say steps and say run
62:49 - steps and that data that's how you get
62:52 - to the steps data and and then it's a
62:55 - list okay and voila okay let's go ahead
62:58 - and run this again of course I didn't do
63:01 - what I wanted to do because I didn't
63:02 - print it out but that's okay let's give
63:04 - a new message how many reps do I need to
63:09 - do to build lean
63:12 - muscles okay let's see if this
63:15 - works and run
63:19 - again all right and you can see uh we we
63:22 - know of course this works but what I
63:24 - want to show you is that we can see
63:26 - these steps look at this object here
63:28 - they got ID step ID the assistant ID and
63:30 - all this information but most
63:32 - importantly it also has all the things
63:35 - that were that happened so step details
63:38 - this message creation details let's just
63:40 - print that as an object itself just the
63:44 - data and let's see if we can get more
63:48 - okay so you can see we have thread the
63:50 - Run steps and all other this metadata
63:53 - and when it was completed
63:55 - the assistant IDs and all this other
63:57 - information here that was generated type
64:00 - message creation and voila now I really
64:03 - hope that you're seeing the whole value
64:05 - the whole um leverage that we get with
64:09 - this okay so go ahead and play around
64:10 - this concept of course as always thank
64:12 - you so much and I'll see you
64:14 - next okay so we making real good
64:16 - progress here so now what we'll do is
64:18 - we're going to create yet another very
64:21 - awesome application here called the
64:23 - current news summarizer assist so
64:26 - essentially it's going to be a
64:27 - summarizer a new summarizer that will
64:30 - allow us to learn a few new things what
64:32 - we're going to be using in this case is
64:34 - going to be the function calling tool
64:37 - now if we go back to what we saw before
64:39 - when we talked about the assistance API
64:42 - in the beginning we noticed that we have
64:44 - the assistance API which Taps into API
64:48 - models and then in this case it calls
64:51 - with specific instructions to the open I
64:54 - model and also can access multiple Tools
64:57 - in parallel which is amazing because in
65:00 - this tool list we can have different
65:02 - things different tools right so we can
65:04 - have code interpreter can have knowledge
65:06 - retrieval which we'll see later but the
65:09 - cool thing also but the amazing thing is
65:10 - that we also have access to function
65:13 - calling which is great because it sort
65:15 - of gives us wings per se which allows us
65:18 - to create our own tools right meaning we
65:22 - can create functions that will go be
65:24 - able to fetch data somewhere or do
65:26 - something and then retrieve that
65:28 - information and push it back to the
65:30 - large language model in this case openi
65:32 - models and the assistants can then do
65:36 - what it needs to do so this is the part
65:39 - that we are going to be look into um in
65:42 - these upcoming lessons let's go ahead
65:44 - and take a look at what are we're going
65:45 - to be building this summarizer
65:47 - application at least a little demo so
65:49 - you understand what's going on all right
65:51 - so this is the app it's called news
65:53 - summarizer so so essentially this will
65:55 - allow you to enter any topic I could say
65:58 - for instance vaccine and then I can run
66:01 - the assistant so what will happen here
66:03 - in the back end it's going to go and tap
66:06 - into a function a call a function
66:08 - calling a function that was created
66:11 - which is going to be called by assistant
66:13 - and that function is actually going to
66:15 - get an API a news API pull the news that
66:20 - have this topic vaccine and then
66:22 - summarize everything for us and as you
66:25 - can see we have here here are some news
66:27 - articles on the topic of vaccines and
66:29 - then we have this other headline here
66:31 - and great thing is that we also can
66:33 - click here to go to see more of those
66:36 - news about whatever is that is being
66:39 - talked about so it's very cool and so it
66:42 - gives you some sort of a summary and at
66:43 - the end of course I added his run steps
66:46 - which just logs out the uh run Steps
66:49 - From the assistant as we've seen before
66:53 - okay it's very cool so this is exactly
66:55 - what we're going to be building I can
66:56 - also enter another topic here let's say
66:58 - Bitcoin why
67:00 - not and it's going to go ahead and run
67:02 - this is actually a streamlit application
67:04 - which I'll show you uh how to put
67:06 - together it's very simple if you've
67:07 - never heard of or never even done
67:11 - anything with stream late it's very cool
67:13 - okay so it's running as you can see here
67:15 - and it takes a bit of course because
67:16 - it's pulling all that information
67:18 - calling that function and then
67:20 - retrieving that information and then
67:22 - pull it back to the AI okay so there we
67:25 - go we have here here are some articles
67:28 - on the topic Bitcoin it tells us exactly
67:31 - what's going on give some descriptions
67:33 - so this is what we're going to be
67:34 - building and let's go ahead and get
67:36 - started so we need to go ahead and get
67:38 - an API key in order for us to be able to
67:41 - get this application going so let's go
67:43 - to newsapi.org as you see here this is
67:47 - where you are going to go ahead to
67:49 - either log in if you already have a log
67:51 - in or go ahead and say get API from here
67:54 - here or from down here but if you want
67:55 - to learn a little bit more about what
67:57 - it's happening here it's a very simple
67:59 - articles or news API that allows you to
68:02 - fetch data for instance if you add a
68:05 - topic such as Tesla as you can see here
68:08 - in this URL then you get something like
68:11 - this so a Json that allows us to go in
68:14 - probing and get information pertaining
68:16 - to that topic so which is exactly what
68:18 - we want in this application so it's very
68:20 - simple go ahead and say get API and the
68:24 - thing you need to do is to register for
68:26 - to in order for you to get an API so you
68:28 - put your first name your last name and
68:30 - then choose a password make sure you are
68:33 - if you are an individual or a business
68:35 - I'll just go with an individual I think
68:37 - that's the easiest and of course you
68:38 - have the capture here agree and submit
68:40 - so I'm not going to do that because I
68:41 - already have that API so once you have
68:44 - the API of course as we did before go
68:47 - ahead and save that API because we're
68:48 - going to use it uh shortly in our
68:51 - application I have created already this
68:54 - news summarizer so I've got environment
68:57 - going I have everything I also have re
69:00 - the requirements.txt
69:02 - with python. EnV and openi of course and
69:07 - I'm going to say pip install - R pass
69:11 - the requirement of text and go ahead
69:13 - make sure that we have all that
69:15 - installed okay again if you go to my M
69:18 - bin you can see we should have
69:21 - uhv as well as opening ey setup for us
69:25 - so the main folder or the main file as
69:28 - you see here it is essentially the same
69:30 - setup we had before okay so just copy
69:33 - and paste we have the client
69:35 - instantiated our open
69:37 - AI here and pass into model of course
69:40 - remember we could change this model here
69:42 - to perhaps GPT 4 depending on when
69:45 - you're watching this video I'm using the
69:47 - 3.5 turbo 16k because that's all we need
69:50 - anyway but feel free to change that okay
69:52 - okay so we have all of this imported
69:54 - nothing new here so if you click here
69:56 - you can see that I have the open API key
69:59 - and what we'll do next is you need to
70:01 - add the other key which is going to be
70:04 - the news API key so here then you can
70:08 - put like that and put your API key that
70:11 - the API key that you created so once we
70:14 - have all of that let's go back to our
70:17 - main in this case to our main.py or
70:22 - app.py and and I'm going to put here
70:26 - this code so it's going to be news API
70:28 - OS environment of course we need to make
70:30 - sure that we import OS for that as well
70:34 - and then it should be good so here we
70:35 - are getting the news API we just created
70:38 - put that into a news API key so we can
70:41 - use and set things up in a little bit
70:44 - okay so once you have all that we should
70:46 - be able to get going now what I'm going
70:48 - to do next here I'm going to create a
70:50 - class that will be our manager say our
70:54 - assistant manager which will allow us to
70:56 - call it and then get the assistant or
70:59 - create the assistant the thread ID and
71:01 - to all the things that we've seen before
71:02 - okay so I think that's the better way to
71:04 - do it of course we could do this in a
71:06 - more modular way uh create functions and
71:09 - do what we did before but I think this
71:10 - is kind of fun and also keep in mind
71:12 - that you will have access to all of this
71:14 - code so it's all good so in the bottom
71:17 - here I'm going to put this piece of code
71:19 - which which allows us of course to pick
71:21 - up the main function I'm going to create
71:24 - a here and then run whatever is here so
71:27 - for now I'm just going to say pass so
71:28 - that we don't have any issues so let's
71:30 - go ahead and create a function which is
71:32 - going to allow us to tap into the API
71:35 - and get some result that is the base of
71:38 - this entire application so that is the
71:40 - first thing we need to do so I'm going
71:42 - to say get news say Define or def for to
71:47 - Define and then I'm going to pass here
71:49 - the topic which is going to be the topic
71:52 - we're going to pass so first first I'm
71:53 - going to put the URL here so the URL
71:55 - that we need to tap into essentially
71:57 - it's our API so I'm going to I have it
72:01 - already and I'm going to put inside of
72:03 - an F string and just go ahead and grab
72:05 - it so essentially what I'm doing here I
72:08 - have the htps newsapi.org
72:10 - and in this case here the end point that
72:13 - I want is everything okay there are
72:15 - different end points but we can just
72:16 - focus on everything and you can go back
72:19 - to the API page which I will recommend
72:21 - you do to read a little bit more about
72:23 - all this end points and everything but
72:25 - this should suffice and then you have a
72:28 - query here and pass the topic which is
72:31 - going to be passed along here and then
72:34 - the API key which is the news API key
72:37 - that we put together right at the top
72:40 - here and of course we're saying page
72:41 - size about five because we going want to
72:43 - get more than that but that's just a
72:45 - little bit too much all right and you
72:46 - can play around with the numbers and
72:48 - everything that's totally fine and up to
72:50 - you now the next thing we need to do
72:52 - here is go back to to our requirements
72:54 - txt and I need to pass request package
72:58 - here because we're going to need that to
72:59 - hit our API do the request to our API um
73:04 - and then get the information okay so
73:09 - let's go ahead and say pip
73:12 - install oops let's say pip install d r
73:19 - requirement text voila and we should be
73:23 - good
73:24 - go back here now I can go ahead and say
73:27 - try put all that inside of a try and I'm
73:30 - going to put say accept at the bottom
73:33 - here require a
73:35 - request oh I actually have to import
73:39 - requests so import requests as such the
73:43 - package and now I can use the requests
73:46 - and then acception class
73:50 - exception as e this is just to say gave
73:53 - us uh this make some requests and I'm
73:57 - just going to say print or rather say
74:01 - error
74:04 - occurred during API request something
74:08 - like that okay and then pass the E so
74:10 - don't worry too much just an exception
74:12 - here uh because we're going to put put
74:14 - some code inside of the try here so that
74:16 - if something happens at least we have a
74:18 - way of handling our errors right
74:21 - probably there are better ways of doing
74:23 - this but this is fine all right so now
74:25 - inside here we are going to do the
74:27 - fetching of the response from our API
74:31 - I'm going to put in a response variable
74:34 - and I'm going to say request. getet in
74:36 - this case and pass the URL that's how
74:39 - easy uh really it is to use request to
74:42 - go and fetch some data um from the API
74:45 - so now that we have our response here
74:47 - I'm going to put some if statements here
74:50 - just to make sure things are okay so I'm
74:52 - going to say if response status because
74:55 - the response will have the status code
74:57 - in this case if status code is okay in
75:00 - this case it's just 200 which means
75:03 - think okay and then I'm going to be able
75:05 - to parse through our Json so I'm going
75:07 - to say news and then I'm going to
75:09 - transform that into Json which means we
75:11 - need to import Json as
75:14 - such and say
75:18 - Json dumps and I'm going to pass pass
75:21 - our response
75:24 - Json such and of course I can say
75:28 - indentation about four as the Json comes
75:32 - in so to make the actual Json looks a
75:34 - little bit better okay we have our
75:36 - object here which is going to be our
75:38 - payload with all the news so the next
75:40 - thing we will do here just to make
75:41 - things simpler is we are going to
75:43 - transform this Json here we say Json
75:46 - dumps which if you have over what it
75:48 - says here it says serialize object to ad
75:51 - Json format string so this is is just a
75:53 - format Json string now we need to
75:55 - actually convert that string into a
75:58 - python dictionary that way we that way
76:00 - we're going to be able to access some of
76:02 - the fields easily so I'm just going to
76:04 - say J news
76:05 - Json um and then use
76:09 - Json package again and say loads and
76:12 - then pass our new uh this should be news
76:15 - not new but either way works okay pass
76:17 - our news here all right there we go so
76:19 - now this is easy for us to work with
76:22 - which which is exactly what we want and
76:24 - then I'm going to say data I'm going to
76:27 - say use uh Json here just to pass things
76:30 - around a little bit and then I'm going
76:31 - to go ahead and uh here I'm going to go
76:35 - ahead and access all the
76:38 - fields essentially Loop through right
76:41 - Loop through the Json and extract all
76:43 - the things that we want okay so if we go
76:45 - back to the news API of course we have
76:48 - to get started documentation everything
76:50 - but if you look here you can see the
76:52 - payload how it looks right so all the
76:55 - payload will more or less look like this
76:57 - okay which is really cool and also you
76:59 - can scroll left and down you can scoll
77:02 - left to see different end points top
77:05 - headlines and we have here top headlines
77:08 - still and there we go this is the
77:10 - everything end point that we are using
77:12 - and with some modification to get the
77:14 - data that we're looking for and so it
77:17 - will look essentially the same the
77:18 - payload you can see here we have status
77:20 - it's an object Json object so in this
77:23 - case it's just an object we have the
77:25 - status okay results 254 and then we have
77:29 - this articles array which then we have
77:32 - the source and the author so each
77:35 - article is an object itself with all
77:37 - information and has author title
77:40 - description and url url image and all of
77:44 - these fields okay so we're going to
77:46 - extrapolate some of these fields so that
77:48 - we can get the information that we need
77:50 - because we don't need everything from
77:52 - these uh from the payload so essentially
77:56 - we're going to Loop through our payload
77:58 - and get the and access the fields and
78:00 - get the information that we actually
78:02 - need so before we even go through the
78:04 - for Loop um let's go ahead and get some
78:07 - of the most important Fields so I'm
78:09 - going to start with status and this
78:12 - status is going to be getting this
78:14 - status we're going to get from data and
78:16 - go to status field here so you can see
78:19 - we have the object go to status and get
78:22 - the status field
78:23 - this case you're just going to say okay
78:25 - okay we got that and let's get the total
78:28 - results in this case I'm it's going to
78:30 - be data and then I believe it's just
78:33 - total we going down here and get the
78:35 - total result which will say how many
78:38 - articles are in this payload and then
78:41 - we're going to go to articles to get the
78:42 - actual articles so we going to go
78:44 - through data again we're going back to
78:47 - get this array which will contain all of
78:49 - the Articles as objects or dictionary in
78:53 - Python okay so we just we just say
78:57 - articles so this is exactly what we want
79:00 - make sure that these names are exactly
79:01 - the same because these are our fields
79:04 - which are our IDs uh for us to be able
79:07 - to get what we need I think I got
79:08 - everything right so I get all the
79:10 - Articles so now is when I'm going to
79:13 - Loop through all the loop through the
79:15 - Articles and get the information that I
79:18 - want so first thing I'm going to say
79:21 - for article in articles for simple Loop
79:25 - here so what we want to do is again go
79:28 - and get the information that we want
79:30 - from each article what we want is the
79:32 - source and get the name and then we may
79:35 - need the author the title of the article
79:39 - of course and the description uh we may
79:42 - need some other things here so and we
79:44 - may need the content on other things so
79:46 - we're just going to go ahead and
79:47 - extrapolate a few of these
79:49 - fields name in this case going to be
79:52 - going to articles or article in this
79:54 - casee for each article and I'm going to
79:56 - go to source and go through and get the
80:01 - name all right do the same to others so
80:03 - I'm going to get the author so
80:09 - article
80:12 - author and
80:18 - title there we go and what else I need
80:22 - this description which going to be
80:25 - article and
80:28 - description and what else let's get the
80:30 - URL because we may need that the URL to
80:32 - the article itself and it's going to be
80:37 - URL okay let's go ahead and get the
80:41 - content okay what else so that's good
80:44 - then here at the bottom I'm going to put
80:46 - all that into a string so it's easy for
80:49 - us to use it so I'm going to say call
80:52 - this
80:54 - title
80:56 - description I'm going to put all that
80:58 - into an F
81:01 - string just to facilitate everything
81:03 - really and then here's what what's going
81:05 - to happen so I'm going to go ahead and
81:07 - concatenate all of these different
81:09 - pieces that we put together here we
81:10 - received into a long nice string so
81:13 - first I'm going to put the
81:16 - title and then put a text title that
81:20 - says title first and then I'm going to
81:23 - say
81:24 - author so put get the author field that
81:28 - we just got from here and what else
81:31 - let's go ahead and get let's say source
81:36 - source name in this case and description
81:40 - description and let's go ahead and get
81:44 - url url okay so now we have this long
81:47 - string that has all this information
81:49 - that we pulled from the API looking good
81:52 - and the next thing we'll do here is that
81:54 - I'm going to actually put that into an
81:56 - array because each one of these string
81:58 - that contains title author Source name
82:01 - description URL we know that we inside
82:04 - of for Loop we want to do that for each
82:06 - one of these articles that we're getting
82:08 - and so I'm going to go ahead and create
82:09 - an empty list here say final news that
82:14 - way I can pass all of that each time
82:19 - will Loop through okay so right below
82:21 - here I'm going to say final
82:24 - news I'm going to pend uh our
82:28 - description so title description maybe I
82:31 - should have named it better but that's
82:32 - okay okay so each time we do that we are
82:36 - going to pull in all of the Tittle
82:38 - description which we are getting all of
82:40 - the title author Source name description
82:43 - URL for each article as we Loop through
82:45 - okay all of that so that way we can
82:47 - actually uh return that array so we see
82:51 - all of the information in this case all
82:53 - of the news that we want so at the
82:55 - bottom here I'm going to go ahead and
82:57 - just say
82:59 - return the final
83:02 - news okay let me go ahead and move this
83:05 - because this is an if statement I can
83:08 - say return
83:17 - else in this case if indeed response if
83:22 - response once status code is not 200
83:24 - meaning we have some issues we're just
83:26 - going to go ahead and return in this
83:29 - case an empty array Or List like this
83:33 - all right very good so what we'll do now
83:35 - is let's go ahead and call our get news
83:39 - and pass a topic here that says Bitcoin
83:42 - just to see what will happen let's go
83:44 - ahead and quickly run
83:47 - this so I'm going to say Python 3 I am
83:49 - on Mac so on Windows or Linux you have
83:52 - to do something something else I believe
83:54 - and let's call Main let's give it a run
83:57 - hopefully everything
83:59 - works looks like it's running but it's
84:01 - not showing anything that is because I
84:03 - need to actually put that into a
84:06 - variable say
84:08 - news and then say
84:11 - print news like
84:14 - this okay let's see if this works let's
84:16 - run again and as you see we're getting
84:19 - some information and the great thing is
84:21 - because if it's an array that we should
84:24 - be getting yes a list it keep saying
84:26 - array it's a list in Python but same
84:29 - thing you can see we have the square
84:31 - brackets there and of course I can go
84:33 - ahead and get just the first item in our
84:36 - list if I wish to do
84:38 - so and let's run again we should get
84:41 - just one so we can see exactly that we
84:44 - have a title and description author
84:46 - source and all that great stuff and URL
84:49 - and that's exactly what we want so there
84:51 - we go so we have all the articles that
84:54 - we want we just got the pieces that we
84:56 - want and created one long string and put
84:59 - that in Array each time we call get news
85:01 - so this is good news the thing this this
85:03 - says that this tells us that we're able
85:05 - to fetch news from our API and get the
85:09 - data that we want for what we're going
85:11 - to be doing next so now that we know
85:14 - that the get news works by the way we'll
85:17 - see later this get news this is the
85:20 - function that we're going to be using
85:22 - you will see in a bit here um as the
85:25 - function calling functionality we talk
85:27 - about with assistance API which is
85:29 - pretty cool okay so now we have that
85:32 - working we know we're able to pass in in
85:35 - this case a topic and then we receive
85:37 - the news right and then we formatted
85:39 - everything we got what we need and all
85:41 - is good so we're going to use that as
85:43 - our function calling very cool all right
85:47 - so next what we'll do here is as I said
85:49 - before we are going to actually create a
85:51 - class this is going to be be a manager
85:53 - assistant manager class where we're
85:55 - going to put everything in that one
85:56 - class okay so now we could have done
85:58 - this uh just putting functions you know
86:01 - modularly but this is I think is the
86:04 - best way okay to do it this is probably
86:06 - the better way for us to have everything
86:08 - in one place in one class so we can
86:10 - instantiate that class as an object and
86:12 - then get what we want from that let's do
86:15 - that so I'm going to create a class here
86:17 - so say class and call this assistant
86:20 - manager s all right very good and so I'm
86:24 - going to add a few fields for our class
86:26 - here the first field that we need is
86:27 - going to be the thread ID and for now
86:31 - I'm going to say none and then I need
86:35 - the
86:36 - assistant ID which is also going to be
86:39 - none like this have a Constructor or
86:42 - initializer depending on which
86:44 - programming language coming from so
86:45 - we're going to say Define and this is
86:47 - going to be the
86:50 - init and it pass the self and it's
86:53 - returning in this case um nothing um
86:57 - just to simplify things of course I'm
86:58 - going to pass a few parameters here so
87:02 - it's going to self I'm going to pass
87:04 - also the model which is going to be a
87:06 - string okay and just in case I'm just
87:09 - going to go ahead and pass our model
87:11 - that we passed at the top here we
87:13 - created at the top here we have a
87:15 - default value which is going to be the
87:17 - model gpt3 or whatever model you added
87:20 - here and I'm just is going to remove
87:23 - that and next I am going to then set up
87:27 - a few things for our class here in our
87:29 - Constructor in our initializer okay so
87:31 - I'm going to say self and I'm going to
87:34 - call the client because I want the
87:36 - client to be in this case open AI that
87:39 - open AI as such just to instantiate all
87:42 - of that or I could have just called our
87:44 - client here that would work as well so
87:48 - either way works I'm just going to pass
87:49 - client like this which is going to be in
87:52 - this case our client and then of course
87:54 - self.
87:56 - model in this case I'm just going to go
87:58 - ahead and say model whatever we're
88:01 - passing along here and then self what
88:05 - else that assistant is going to be none
88:09 - in the
88:10 - beginning and
88:13 - self. thread also is going to be
88:17 - none and self. run right is none as well
88:23 - the other thing I'm going to add here
88:24 - because I want to be able to have the
88:26 - actual summary because that's the whole
88:28 - goal is that this class is going to be
88:30 - able to give us the summary of the news
88:33 - from the topic that we paste in or enter
88:36 - so I'm going to create yes another field
88:38 - here called summary okay which in the
88:40 - beginning is going to be equal to none
88:42 - like that so now we're going to do some
88:44 - if statements here to actually check if
88:47 - some of these um Fields like assistant
88:50 - and thread but but more particularly if
88:53 - this um static Fields here thread ID and
88:57 - uh assistant IDs if they're existent
89:01 - that way we can then look at that and
89:03 - see whether we need to create a new
89:05 - assistant or just use existing ID
89:08 - because the idea is that as we run this
89:11 - the first time as you saw before we will
89:13 - have the assistant ID at least as well
89:16 - as a third ID and so that we don't run
89:19 - this many times and then recreate the
89:21 - same things in the back end in the
89:24 - console or in the playground we want to
89:27 - make sure that those things are set up
89:28 - so that we don't have copies of the
89:30 - assistant and IDs and so forth so still
89:33 - inside of our init here I'm going to say
89:38 - if assistant
89:41 - manager. thread in this case let's start
89:43 - with assistant ID so if we have an
89:45 - assistant ID that means we have an
89:47 - assistant in that case we are going to
89:50 - set our assistant
89:52 - to the assistant that we already have so
89:55 - I'm going to say self that client that
89:59 - beta assistants and then I'm going to
90:01 - retrieve that assistant and to retrieve
90:04 - that assistant we need to say pass of
90:06 - course the ID of that assistant so we're
90:08 - just going to say assistant ID is equal
90:12 - to manager assistant manager and get
90:16 - that assistant ID as such and also we're
90:20 - going to check for our thread ID if we
90:22 - have a thread ID so assistant manager.
90:25 - thread ID if that's the case we're going
90:27 - to do the same thing we did which is
90:29 - going to go which is we're going to go
90:31 - ahead and get the thread ID so self
90:33 - assistant or thread ID I should say and
90:36 - set that
90:37 - up with the self.
90:41 - client uh
90:45 - beta threads and retrieve this case
90:49 - third ID it's going to be to assistant
90:53 - manager or I could have said self but
90:55 - that's okay thread ID as such okay all
90:58 - right very good so now we are making
91:00 - sure that indeed if we have an assistant
91:02 - ID then we don't create a new assistant
91:04 - ID in this case we just go ahead and
91:07 - retrieve the assistant that we have okay
91:10 - the same thing with the thread ID okay
91:12 - so all of that that is inside of our
91:14 - init function here our Constructor next
91:17 - we're going to define a new method here
91:19 - called uh create assistant so this will
91:23 - allow us to create an actual assistant
91:25 - so I'm going to pass self name and
91:29 - instructions as well as tools because
91:31 - those are the things that any assistant
91:33 - as you know by now may need when we
91:35 - create an assistant okay so first of all
91:38 - I'm going to go ahead and put an if
91:39 - statement here so if not self that
91:42 - assistant right so if there's no
91:44 - assistant of course then what I'm going
91:46 - to do I'm going to create an assistant
91:48 - let's say
91:49 - assistant object essentially and which
91:52 - is going to be self. client.
91:55 - beta that uh assistants and then I'm
91:59 - going to create a new assistance
92:01 - essentially so to do that we need to
92:02 - pass name which is going to be name we
92:05 - need to pass the instructions which is
92:08 - going to be instructions that we are
92:09 - passing
92:10 - along right and then we're going to pass
92:13 - also tools and pass the tools as such
92:17 - and for completion we also going to pass
92:20 - model and we're going to
92:22 - say
92:24 - self. model so to get the model that we
92:27 - already
92:28 - have in our Constructor in our class at
92:31 - the top there okay very good so that's
92:33 - how we would create an assistant if we
92:35 - didn't have an assistance okay so now
92:37 - that we know that we've created the
92:38 - assistant object here next I'm going to
92:41 - say assistant manager that assistant ID
92:45 - I'm going to grab that ID and then I'm
92:47 - going to get that from our assistant
92:50 - object that
92:52 - ID like
92:55 - that and then I'm going to make sure
92:57 - that the class field has that ID okay
93:00 - the assistant's ID so I'm going to use
93:03 - self assistant is going
93:06 - to and then I'm going to set up the
93:09 - assistant field which is usually none in
93:12 - the beginning to the assistant that we
93:16 - just created here which is going to be
93:18 - this assistant object right so ass so
93:21 - self
93:23 - that assistant now is equal to our
93:26 - assistant
93:28 - object very good so if you want we can
93:31 - just print things out here so that we
93:33 - can debug and see what's going on so I'm
93:35 - going to say assist ID just put
93:38 - something more there so we can see
93:40 - what's going on and then I'm going to
93:42 - put say self. assist ID oh I actually
93:46 - could just go assistant. ID like this
93:49 - right to get the actual assistant ID
93:51 - when that is created that why that's why
93:53 - we're saying this all right very good
93:57 - and that's it for create assistant okay
94:00 - so next what we'll do is we are going to
94:02 - then Define another function or method
94:05 - in this case uh this is going to be
94:07 - called
94:08 - create thread of course I'm going to
94:10 - pass self so we have
94:13 - that reference as such so you can see
94:17 - really nothing is out of this world it's
94:19 - the process is still the same it's just
94:21 - that I've changed a few things so that
94:23 - we have an actual class that helps do
94:25 - all the things in one place so we can
94:27 - just instantiate that class and get what
94:29 - we need all right so the same thing
94:31 - really if not uh in this case self.
94:34 - thread so if there's nothing there then
94:37 - that means we need to create a thread
94:39 - object okay so sing self.
94:45 - client and then threads and then I'm
94:47 - want to create a thread and as you know
94:49 - now to create a thread we just uh need
94:52 - to pass we don't actually need to pass
94:53 - anything things which actually I'm going
94:55 - to just leave as it so we're going to
94:56 - create an object thread and we can
94:58 - attach messages and whatever we need
95:00 - later all right so now that we have that
95:02 - thread we're going to use assist manager
95:04 - just like where we did before and Say
95:07 - thread ID it's going to be equal to
95:09 - thread object. ID okay set that thing
95:13 - that up and then we're going to set the
95:15 - field the class field self that thread
95:19 - okay to be equal to the thread object
95:22 - again we're going to go ahead and
95:25 - print F string here and Can Say thread
95:28 - ID just to make things better and just
95:32 - pass here self. thread. ID all right so
95:36 - just print it out so we have it and make
95:38 - sure that we are getting what we need so
95:41 - now we have created the create assistant
95:44 - method we also have in this case the
95:47 - create thread method now we need to add
95:50 - messages to that thread so I'll Define
95:53 - another function here say add
95:57 - message to thread okay so we're going to
96:00 - pass here first of all self reference
96:02 - and roll as well as the content all
96:06 - right in order to create that message
96:08 - because we know messages are added into
96:11 - a thread so we need to make sure that we
96:12 - indeed have a thread ID so we going say
96:15 - if self. thread we have that then we're
96:18 - going to go ahead and
96:20 - self. uh
96:23 - client beta. threads messages and we're
96:27 - going to create that message all right
96:30 - to create a message we need a thread ID
96:32 - which is going to be in this case self.
96:36 - thread. ID and then we need the rooll
96:39 - which is going to be the roll okay which
96:42 - is going to be passing when we call this
96:45 - create a message or add message to
96:47 - thread as well as the content okay and
96:51 - pass the
96:52 - content as such which has been passed
96:55 - along that's it all right so we have
96:57 - that function or in this case a method
97:00 - and next we need of course a way for us
97:03 - to run the assistant so I'm going to
97:05 - find another method here so this is
97:08 - going to be run
97:10 - assistant and we're going to pass self-
97:12 - reference and instructions as
97:15 - well okay so how do we do that again
97:18 - we're going to check It's always
97:19 - important to check because in order to
97:21 - run an assistant we need of course to
97:23 - check if there's a thread ID as well as
97:26 - the assistant okay so if self. thread
97:31 - and self
97:34 - do assistant if they are existent then
97:37 - we are safe to run this thread so
97:42 - self run in this case I'm going to set
97:46 - that to self.
97:48 - client go to Beta say threads and
97:52 - runs create okay so we have create here
97:57 - so what we need to do we need to pass a
97:59 - few things obviously we need to pass the
98:01 - thread ID how do we get that we get that
98:04 - by saying self again right the reference
98:09 - of this class and we go and get the
98:12 - thread
98:13 - id thread. id as such and then we need
98:17 - to pass the assistant ID do the same
98:20 - thing and can pass the instructions
98:22 - which are the instructions that we
98:24 - passing as parameters okay so our class
98:27 - is actually coming along nicely next we
98:30 - going to Define yet another method here
98:33 - called
98:34 - process messages because we need a way
98:36 - as you know to process those messages
98:38 - going through all that stuff and
98:40 - retrieve what we need all right so I'm
98:43 - going to pass here just the self
98:45 - reference okay let's go ahead and work
98:48 - on this bad boy so what we need now here
98:51 - and process message where first of all
98:52 - I'm going to check if there is a thread
98:54 - because we can't because we know that
98:56 - messages are inside of our thread so we
98:59 - need to check if there is indeed a
99:01 - working thread in order for us to go in
99:03 - and get that information which are the
99:05 - messages so if
99:08 - thread or self I guess or self.
99:12 - thread if that's existent if that exists
99:16 - then I'm going to go say
99:17 - messages I'm going to retrieve those
99:20 - messages so
99:21 - I'm going to go client better for now
99:24 - that may change by the time you watch
99:26 - this video this lessons and I'm going to
99:29 - say threads messages and we know that
99:32 - comes in a list so let's go to the list
99:35 - and in this case we need to pass the
99:37 - thread ID which is going to be self.
99:40 - thread. ID very good I'm going to create
99:45 - a list an empty list but that's where
99:47 - we're going to add all of the messages
99:48 - or summary in this case right so I'm
99:50 - going to say
99:51 - summary an empty list is it an empty
99:54 - list as such and I'm going to just go
99:56 - ahead and get the last message of the
99:58 - thread because that's all that we need
100:01 - so I'm going to say last message and how
100:04 - do we get that we say messages but this
100:06 - is indeed the list right and then get uh
100:10 - go to data right that's the object and
100:13 - then uh get the first one zero and I
100:18 - need to get the role we get the role
100:21 - from the message in this case payload
100:25 - which is a a dictionary really that
100:27 - we're receiving uh we say
100:31 - messages
100:32 - again actually since we already have the
100:35 - last message here we just just probe in
100:37 - into
100:38 - that and say
100:41 - content okay and of course get the first
100:45 - index and go to text and value as such
100:50 - oh
100:52 - value okay so now we get the actually my
100:57 - this is not R this is going to be the
101:01 - response all right but I want the roll
101:05 - which is going to be I'm going to do the
101:06 - same thing so last message and add
101:09 - content I believe get to zero and then I
101:13 - need no actually I can get that straight
101:17 - to roll I think yeah there we go so we
101:19 - can see intellisense is helping me very
101:21 - good so we got the last message the big
101:23 - object because we looping we know that
101:26 - the messages come in in a list so we're
101:29 - probing in and getting what exactly what
101:31 - we need so we need the last message in
101:33 - the
101:34 - list in the message list that we got
101:37 - from our thread. messages and then we
101:40 - get the role just need the roll so we
101:42 - can use it in a bit here and the
101:43 - response that we're getting all right so
101:46 - that we can formulate and create a nice
101:49 - response all right so so we have the
101:51 - response now I'm going to go ahead and
101:52 - say print in this case put a inside of
101:55 - an F string here just for us say summary
101:59 - and put a lot of information like that
102:01 - that way we know exactly what's what and
102:06 - I'm going to say rooll I'm actually
102:08 - going to go ahead and capitalize the RO
102:11 - right response like that so we just
102:15 - printing out the summary and at top I'm
102:17 - going to put the role so it says for
102:19 - instance user or assistant in this case
102:22 - going to be assistant right and then we
102:24 - pay and then we have our response there
102:27 - okay so what are we're going to do
102:29 - before even that we have this summary
102:32 - here right which is an empty array so
102:34 - what I'm going to do is I'm going to say
102:36 - summary. append and pass in our response
102:41 - so now our summary when we return
102:43 - because this is going to return
102:45 - something I'm going to return real quick
102:47 - here this is going to return our summary
102:51 - so now that our summary will have the
102:53 - response which is exactly what we need
102:55 - this is going to be the assistant
102:57 - response right we processing messages so
102:59 - what we'll do next well you remember at
103:01 - the top of our class here we have this
103:04 - field called summary that we
103:06 - instantiating initializing here to none
103:08 - so now we can fill that summary into
103:12 - with the summary that we got here so all
103:15 - I'm going to
103:16 - do here now I can say self that summary
103:21 - and I'm going to just then say summary
103:26 - like that okay but I want actually to
103:30 - make it a little bit better which means
103:31 - I'm going to which means we're going to
103:33 - format things a little bit so first I'm
103:35 - going to put a new line every time we
103:39 - add before we add the actual summary the
103:41 - actual text in this case
103:43 - this summary that we get as a response
103:47 - and then I'm going to call the join and
103:49 - then pass the the summary as such okay
103:52 - which is what we have here a list which
103:56 - will contain in this case U the summary
103:59 - which is which will contain the
104:01 - assistant response okay so now our field
104:04 - summary in this class should have
104:07 - whatever we getting when we process and
104:09 - get all of the messages one other thing
104:11 - we could have done we could have looped
104:13 - through these messages here because it's
104:16 - a list right we could have said
104:18 - something like this for MSG in
104:22 - messages right we could have say
104:26 - roll set that to MSG that roll okay and
104:31 - then
104:33 - content set that to MSG go to
104:38 - content say text and get the value as
104:42 - such and then we're going to print in
104:45 - this case I'm just going to copy this
104:48 - something like that say summary
104:51 - and said roll pass in the roll and also
104:54 - then pass in the content like this so
104:57 - this also would have work but because
104:59 - this is a method and we want something
105:02 - else to happen um I prefer to do what I
105:05 - just did here but I'm just going to
105:07 - comment this out so you have access to
105:09 - that if you wish to just look at things
105:12 - in this perspective next we are going to
105:15 - yet create another function another
105:17 - method here real quick so we still in
105:20 - inside of our class it's hard to see
105:23 - everything because I needed to make the
105:26 - text a little bit larger so you're able
105:27 - to see I'm going to say depth to Define
105:31 - this is going to be wait for
105:34 - completed and pass
105:37 - self as well get this function here or
105:40 - method uh will as the name imply wait
105:43 - for completed and do what needs to be
105:45 - done so essentially we're going to make
105:47 - sure that as we invoke the run and to
105:51 - run our assistant and do all the things
105:53 - that need to be done and as you remember
105:55 - uh when we run we have to go usually we
105:58 - have to go through certain steps right
106:00 - those steps may take a little bit so
106:02 - we're going to configure things along
106:04 - that way we can wait for a few
106:06 - milliseconds or seconds until we get the
106:08 - response and then we do something for it
106:10 - okay so it's just more of a helper
106:12 - function in this case method which we we
106:15 - saw before but now I'm putting that
106:17 - inside of this class so I'm going to
106:19 - check of course to see if there is a
106:22 - thread and also if there is a run entity
106:25 - that was created so if
106:27 - self that
106:30 - thread and self that
106:33 - run
106:34 - okay I'm going to put in a while loop
106:38 - here while true then we're going to go
106:41 - ahead and going say time. sleep for
106:44 - about
106:45 - 5
106:47 - Seconds okay and then run status
106:51 - I'm going to retrieve the Run status to
106:54 - see I'm going to retrieve the Run status
106:57 - to see where we are by saying self again
107:00 - go to
107:02 - client and go to threads and runs and
107:07 - retrieve okay so in this case here I
107:09 - need to pass a few things first of all
107:10 - we need a thread ID which we can get by
107:13 - saying self that thread get the ID and
107:17 - then we also need the Run ID which we
107:19 - can get by self. run. ID and remember at
107:24 - this point here all of these fields are
107:26 - of course part of our class the run and
107:28 - thread and all that so that's real good
107:31 - that's the beauty of putting everything
107:33 - into a class where we have one entity
107:35 - which we can use to do things so all
107:38 - right so now that we have indeed our run
107:42 - status we can check that for now I'm
107:44 - going just go ahead and print something
107:46 - here put an F string we just say run
107:50 - status and then I'm going to say run
107:53 - status we can use the model we're going
107:56 - to go ahead and say model dump Json
108:00 - function
108:01 - there and then we can just add some
108:06 - indentation in our Json for readability
108:10 - just say for as such very good so we are
108:13 - going to go ahead and get this run
108:16 - status which is which is going to be a
108:18 - lot of information we getting the model
108:21 - we are invoking the model dump Json
108:23 - which if you have over tells exactly
108:25 - what it does generates Json
108:27 - representation of the model using penics
108:29 - and so forth all right very good and
108:32 - there we go so that's going to be
108:34 - printed out check the status because
108:36 - remember the status has uh certain
108:38 - booleans that tells us where we are in
108:41 - the process of running these steps right
108:43 - so we want to check if for instance a
108:46 - the status is completed or not so I'm
108:49 - going to say if run status that status
108:52 - is completed as such and that's the case
108:55 - I'm going to say
108:56 - self the process message right we're
108:59 - going to call our function or method
109:01 - that we created here the process message
109:03 - which will know how to process the
109:05 - messages because that means the running
109:07 - is completed we should have an answer
109:10 - right which is good okay so the process
109:12 - message is called and and then we just
109:15 - going to go ahead and break now one
109:17 - thing I want you to remember or to keep
109:19 - in mind let's go back to our
109:21 - presentation here so when we looked at
109:23 - this diagram here where we have talking
109:26 - essentially talking about the benefits
109:27 - of the assistance API we said that the
109:30 - most exciting thing really is the fact
109:32 - that we have tools so in this case here
109:34 - we have the code interpreter which we
109:36 - saw a little bit we have the knowledge
109:38 - knowledge retrieval which allows us to
109:40 - upload files and then we can converse
109:42 - with those files or documents in
109:44 - addition to the base knowledge that the
109:47 - models has but the function calling as
109:50 - well okay right this is where we are we
109:53 - are going to implement the function
109:55 - calling how does that work well in this
109:57 - case here if we look at our code here
109:59 - when the status is completed then we
110:02 - know we can we have the messages so we
110:04 - can go ahead and process those messages
110:06 - but there's also another status that we
110:09 - can look for or watch for which is they
110:14 - requires action because because of the
110:17 - function calling as we go through all
110:20 - the steps we saw before remember this so
110:23 - the steps that the Run goes through you
110:26 - can use code interpreter create message
110:28 - to and then call another tool in this
110:30 - case we're calling a function because it
110:33 - is indeed another
110:34 - tool when that happens what that when we
110:37 - get to that part the Run entity will
110:40 - know that okay something is required so
110:44 - it's going to trigger a flag that says
110:46 - the status now is requires action when
110:49 - there is this this requirement of
110:50 - required action that means we can then
110:54 - call a function do a function call okay
110:58 - so that is the beauty here so we can
111:00 - actually look for that so I'm going to
111:02 - say else if if run status that status is
111:07 - equal voila you can see it even gives us
111:10 - all of these enams here right so we have
111:14 - the requires action right these are
111:16 - enams that are actually we can get right
111:20 - Flags essentially that we can get from
111:21 - the Run status so there is requires
111:24 - action which is what we need there is
111:26 - cued in progress failed expired cancel
111:29 - cancel or cancelling or cancel and so
111:31 - forth so all of these are steps or these
111:34 - are states that we can that we can check
111:37 - each time to do certain things so if the
111:41 - status says it's been cancelled or
111:43 - cancelling in the process of counceling
111:45 - then we can tell the user or send out a
111:47 - message say hey now this is being
111:50 - celling so do something else if it's
111:52 - failed of course we can do something
111:54 - else if it expired and so if it's in
111:55 - progress we can also uh maybe shoot
111:59 - maybe show something for the user
112:00 - interface to say hey things are uh in
112:04 - progress so just give it a minute okay
112:06 - so this is real cool so we want the
112:08 - requires action because this is what
112:10 - will allow us to then do the function
112:12 - calling right which in this case I'll
112:15 - will tell you now it's going to be the
112:18 - function that I told you earlier that we
112:20 - created earlier which is this get news
112:22 - but we'll get there okay so if this is
112:25 - the status so if this is the status
112:27 - requires action what we'll do then we'll
112:30 - do a few things first of all I'm going
112:31 - to just go ahead and print here so we
112:33 - see what's happening I'm going to
112:36 - say I'm going to say function calling
112:39 - now CU that's what we need to happen
112:43 - what we do next is we are going to go
112:45 - and say self and then we're going to
112:47 - call this call
112:50 - required functions should be function
112:53 - that's fine because you can call more
112:54 - than one function so say functions going
112:57 - to pass self and
113:00 - required actions okay we haven't created
113:03 - that let's go ahead and create this
113:06 - actions that's that and all this will do
113:09 - I'm going to say if not self. run right
113:13 - if run is not available or so all I'm
113:16 - going to do here if not self that run
113:19 - then I'm just going to ahead and
113:21 - return right because there's nothing
113:23 - really to do and in any other case I'm
113:26 - going to just say
113:28 - tools output and it's going to be an
113:32 - empty array so this tools outputs here
113:35 - is what we're going to use to go through
113:38 - and pull in all of the required Tools in
113:41 - this case required functions that we
113:43 - need for this run so let's work on this
113:45 - little bit a little bit here okay the
113:47 - thing to remember here because this
113:48 - required action here here it's going to
113:50 - be a list that's why it says actions
113:53 - plural so I'm going to put a for Loop
113:56 - here that's a for
113:58 - Action in required
114:00 - actions and inside of the required
114:02 - actions actually we are going to have
114:06 - tools calls as such and then inside I'm
114:10 - going to go ahead and get the function
114:12 - name so I'm say funk name and then I'm
114:14 - going to say action and then I'm going
114:16 - to go ahead and say function okay
114:20 - and then I'm going to go and get the
114:23 - actual name so that's what we're doing
114:24 - here so we're going to get through
114:27 - through this required tools but we're
114:28 - going to have a lot of different tools
114:30 - we may have more than one tool of course
114:32 - in this case more than one function okay
114:35 - and then we're going to Loop through and
114:37 - just get all of the names of the
114:39 - functions but in this case we're just
114:40 - going to have one so we get the name and
114:42 - put that in function name so if the
114:45 - function name which is going to be tool
114:47 - is get news then we're going to get the
114:49 - actual name of the function but that's
114:51 - what we need to pass around to get uh in
114:54 - this case to get it so that the function
114:56 - can run and then get the data pull it
114:59 - back then the assistant knows what to do
115:01 - very good and then I'm going to say
115:04 - arguments I'm going to say Json in this
115:07 - case loads and then I'm going to pass
115:09 - the action so essentially exactly what I
115:13 - have here I'm just copy this change a
115:14 - few
115:15 - things and instead of function name
115:18 - we're going to get the arguments the
115:19 - function arguments so all we be doing
115:22 - here is going through get the function
115:24 - and get the arguments of that function
115:26 - because we may need they may have some
115:28 - arguments that need to be passed around
115:30 - okay and that's what I'm doing so I'm
115:32 - going to put that into a variable
115:34 - arguments okay so we'll see how it all
115:36 - pans out now I'm going to put an if
115:38 - statement here so I'm going to say if
115:41 - Funk
115:42 - name is equal in this case I know it's
115:44 - going to be get news now how do I know
115:48 - this well I know this because that's the
115:50 - function I need to be called as a
115:53 - function calling it's called get news if
115:55 - you said happy birthday or James Bond
115:59 - whatever you named here this has to be
116:00 - exactly the same because that's what
116:02 - we're going to be calling right so if
116:04 - function name is get news in this case
116:07 - then what we'll do well we're going to
116:09 - put inside of we're going to say
116:13 - output and must called get news aha now
116:17 - I'm actually calling the function and
116:19 - passing the topic how do I get the topic
116:22 - well I get the topic because I have the
116:24 - arguments remember when we did this here
116:27 - we're getting the arguments of the
116:29 - function so we need to pass the actual
116:31 - arguments here like
116:33 - that okay now what is the arguments now
116:36 - the cool thing is that when you go back
116:38 - to this get news here the argument name
116:42 - is topic right
116:48 - so in this case here I need to say well
116:51 - the arguments because it's going to come
116:53 - in as just a dictionary it's going to be
116:56 - topic as such very very important so
116:59 - whatever you put inside of get news
117:00 - function when you call the argument has
117:02 - to be passed along like this very good
117:05 - so that is part of the function calling
117:07 - guys all right so now that we have the
117:09 - output because get news is going to
117:11 - return something or it's going to give
117:12 - us something right and we have that
117:14 - there as an output now I'm going to go
117:16 - ahead and print that just so we have it
117:20 - F string here just say
117:24 - stuff okay to differentiate things and
117:26 - I'm going to say output like
117:29 - this because we know that the get news
117:32 - will return that very nice string right
117:35 - remember let's go back here can see I'm
117:38 - going to open
117:39 - this so we return this final news which
117:42 - is going to be a a string but in this
117:45 - case it's just going to be a list
117:47 - containing all of those different new
117:49 - news right because we listed everything
117:52 - we put everything in one string and we
117:54 - Loop through so each news that we
117:56 - getting we going to get a title author
117:58 - Source description URL and so forth and
118:01 - put that in final news list right
118:06 - so in this case here what we'll do is we
118:11 - are going to Loop through and so that we
118:14 - can create the actual final string so
118:17 - I'm going to Loop through and extract
118:19 - everything from the list because that's
118:22 - what's been returned from our get
118:25 - news and then I'm going to put
118:27 - everything in a very long string that
118:30 - way it's easier for the L for the llm
118:33 - for the model in this case to be able to
118:36 - just pick all that stuff and and
118:38 - summarize it and create some sort of a
118:40 - new uh summary of everything if that
118:43 - makes any sense okay so structuring
118:46 - things for us so I'm going to say final
118:49 - string Str just make it an empty string
118:53 - as
118:54 - such and then I'm going to say four item
118:58 - in
119:00 - output then we're going to do something
119:02 - so I'm just going to append like I said
119:04 - to create that long string so final
119:06 - string plus equal I'm going to just
119:10 - say that join and pass in this case our
119:15 - item okay now we have this final string
119:18 - ready for us to use all
119:21 - [Music]
119:22 - right okay so you notice here we also
119:25 - have what we call this tools output
119:28 - should be tool outputs so our tools
119:31 - output here is just an empty list so
119:34 - we're going to use that cuz that's where
119:35 - we're going to add all of the tool
119:37 - outputs so I'm going to say tool outputs
119:40 - in this
119:42 - case and append what well I'm going to
119:46 - pend an object or a dictionary that will
119:49 - have a few things first of all let me
119:52 - just put it all together here so you can
119:53 - see first of all I'm going to say tool
119:56 - and call ID like that and then for the
120:00 - call ID so how do I get the call ID well
120:04 - a call ID it's going to be coming from
120:06 - our action if we say action right what
120:09 - is the action well action is this
120:11 - because we're still inside our for Loop
120:13 - right so it's going to go through all
120:16 - the tool calls so I'm going to get each
120:18 - one of the action which part which is
120:21 - essentially the action part of the
120:23 - function right the function call and I'm
120:25 - going to go ahead and get the ID so I'm
120:27 - going to say like this and say ID so I'm
120:31 - getting the tool call ID in this case we
120:33 - call it's going in this case essentially
120:35 - it's just the function the function
120:38 - function calling right say output this
120:41 - is going to be the output that comes
120:43 - from our get news so what I'm going to
120:47 - do well I already have this final string
120:49 - here so that's what I'm going to put
120:51 - here so I'm going to say final string
120:54 - like that very good now this tool
120:57 - outputs is very important as you can see
120:59 - in a little bit here so now that we have
121:02 - our tool outputs with stuff that means
121:04 - each time we go through it's going to go
121:05 - ahead and get all of the tools in this
121:07 - case it's just one function you could
121:09 - have other tools right uh we're doing
121:11 - call uh function calling here it's going
121:13 - to go ahead and get the action ID and
121:16 - get the final string which is what we
121:18 - get from our output when we call the
121:21 - actual function the actual tool this is
121:23 - our tool right very good so next what we
121:26 - do I'm just going ahead and print
121:28 - something here so we see what's
121:30 - happening going say
121:32 - submitting outputs back to the
121:36 - assistant that's what we'll do next
121:38 - right here so now before I do that
121:41 - actually I'm going to say something like
121:44 - else because we're inside of if
121:45 - statement if the function name is
121:47 - getting news right so if any anything
121:49 - else happens I'm going just say raise
121:52 - value error and I can just say something
121:55 - like an F string here
121:58 - unknown
122:00 - function and then I'm going to just put
122:02 - the funk name as such okay just to save
122:06 - ourselves from a lot of issues so I'm
122:08 - going to get out of our if or for Loop
122:12 - that is here all of that has to be
122:14 - inside of for Loop and now I'm going to
122:17 - say submitting output put back to the
122:20 - assistant so what we'll do next is ah
122:24 - this is the beauty I'm going to say self
122:26 - client beta and then threads and runs
122:31 - and submit tool so there is such
122:34 - function or such in so there's such
122:36 - function called submit tools output or
122:38 - tool outputs that's why we were doing
122:41 - all of this but now we have to pass
122:43 - along a few things in order for the run
122:46 - in this case here to be able to go and
122:49 - get the tools because at this point it's
122:50 - saying hey we need some tools right
122:53 - tools required right in order for that
122:55 - to happen then we need to pass a few
122:57 - think it needs to know about the thread
122:58 - ID which we can get from our
123:01 - thread. ID right it needs to know about
123:04 - the Run ID all right so I'm going to say
123:07 - can know about self. run. ID it also
123:12 - need to know about the tools outputs and
123:15 - where do we get those well tool outputs
123:17 - which is exact what we've been working
123:20 - on around here now we have tool outputs
123:24 - we will have tool call ID it has to be
123:26 - exactly like this that is what's
123:28 - required and the action ID we're passing
123:31 - to like call it same right we have here
123:35 - tool call ID which needs to be passed
123:38 - exactly like this in this dictionary and
123:40 - if it's going to be action ID and output
123:42 - is going to be the final string which is
123:44 - exactly what we have here which is the
123:46 - information coming from our get news
123:49 - very cool very cool all right now indeed
123:54 - if we go back to where we were calling
123:56 - this this will make more sense now I
123:58 - don't need to pass that at all nor do I
124:00 - need to pass that let's see what do I
124:02 - need to pass so now this makes sense
124:04 - that means now when status is requires
124:07 - when status is requires action we are
124:10 - going to call required functions which
124:12 - is what we just did so it's going to go
124:14 - through and go and get all the tools in
124:17 - this case it's just going to go ahead
124:18 - and say okay so we need a function in
124:20 - this case but because it could be more
124:22 - than one function because it's a tool
124:25 - itself go through all the process we
124:27 - make sure the function name is exactly
124:29 - the name that we created at the top as I
124:31 - showed you and then we get the output
124:33 - from that function but those results are
124:35 - needed right for the run to process
124:39 - everything and we do all this great work
124:41 - and then we make sure that then we
124:43 - submit those tools as you see
124:46 - here okay to our uh run runs that submit
124:49 - tool function you need to pass the
124:52 - thread ID as well as run ID always all
124:55 - right very cool all right so there we go
124:58 - that is exactly what's happening here
125:00 - and so now we should be able to have
125:03 - everything that we need to get things
125:06 - going but before we go that we need to
125:08 - pass something else here says here H
125:11 - required actions so we need to pass the
125:13 - required action here what do we how do
125:16 - we do that well it's going to be I'm
125:18 - going to say required actions and it's
125:20 - going to be run status that required
125:25 - action
125:27 - submit uh tool
125:30 - outputs and I'm going to say model say
125:34 - model dump like that so essentially we
125:37 - are just getting the submitter tools and
125:41 - of course we are going to go ahead and
125:43 - generate in this case and of course
125:45 - we're going to make it so that it is
125:46 - indeed a model Dum so create a a python
125:49 - dictionary which is needed so that the
125:52 - call required function knows how to read
125:54 - all that stuff which is needed that is
125:56 - needed for the function calling to
125:59 - actually
126:00 - work okay so what I want you to do is to
126:02 - if this is not making a lot of sense
126:04 - it's okay uh rewatch this part a few
126:08 - times until you understand it the main
126:09 - thing to keep in mind here is that all
126:12 - of that is being called inside of wait
126:14 - for completed but that's where all the
126:16 - action is and we are setting up or we
126:18 - are listening right looking for the
126:21 - status if it's completed then we just
126:23 - are good we go ahead and process message
126:26 - in cases which is this case here where
126:29 - status says requires action that's when
126:31 - we call required functions right because
126:35 - this again I'll repeat myself I know but
126:37 - I want you to understand this is where
126:39 - all the getting the function name
126:41 - getting the IDS the action ID and
126:44 - everything and actually calling our
126:46 - function as a tool this is where
126:49 - everything happens and it's very
126:51 - important to make sure that we get the
126:52 - arguments and pass the actual arguments
126:55 - which are passed along when we call that
126:59 - function which we created the get news
127:01 - and make sure the function name is
127:02 - getting there and everything is good and
127:05 - life is great all right so that's very
127:07 - important to keep in mind now I know it
127:09 - was a little bit of working that needed
127:12 - to be done but that's how you do
127:14 - function calling you with the assistant
127:17 - API next we are going to create yet
127:20 - another function here or method I should
127:22 - call it because it's inside of a
127:23 - class this is going to be for streamlet
127:26 - and we're going to talk about that in a
127:28 - little bit this is going to be our front
127:30 - end right going to say here for
127:33 - streamlet so essentially we're going to
127:36 - define a method here called get summary
127:40 - pass self and all it will do is this is
127:44 - going to go ahead and
127:47 - return self. summary as such okay that's
127:52 - all this function is doing here and it's
127:55 - going to be more apparent once we are
127:57 - putting together the front end with
127:59 - streamate so the next method we're going
128:01 - to create here is the run method so run
128:06 - the
128:08 - steps Define this run
128:13 - steps reference self and I'm going to
128:16 - say run steps
128:23 - self.
128:25 - client go to threads
128:27 - runs and steps as such and pass in the
128:31 - list and we've seen this before so we
128:34 - are going to of course go through the
128:36 - Run steps and get all that information
128:38 - for that we need to pass the thread ID
128:40 - as you know so
128:43 - thread self of
128:47 - course get the ID as well as the Run ID
128:51 - so it's going to be
128:53 - self run.
128:56 - ID okay very good and so we're going to
128:59 - go ahead and just go ahead and print in
129:01 - this case and have string say run
129:07 - steps and pass in the Run steps so we
129:11 - can see what's going on this is just for
129:14 - us okay so I think these are all the
129:17 - methods that we
129:19 - need we have a few here so we have we
129:22 - have the call required functions we have
129:25 - the process message we have the Run
129:27 - assistant these are very important
129:28 - because allow us to actually create
129:30 - assistants which is the most important
129:32 - thing really and add to thread but
129:35 - before that we have the create thread
129:37 - and create assistant which one was this
129:40 - this
129:42 - was run assistants of course to run an
129:44 - assistant and we have the create
129:46 - assistant this is the one I wanted to
129:48 - talk about and voila so we have our
129:51 - class here assistant manager which we
129:53 - can instantiate as an object and we're
129:55 - going to be able to run and create
129:57 - assistance and do all the things that
129:58 - we've done before but in a different
130:01 - more um objectoriented way of doing
130:05 - things and most importantly that we know
130:06 - that indeed the get news which we tested
130:09 - earlier here this is a tool that's going
130:11 - to be using in the process in the
130:13 - function calling tool as we discussed so
130:16 - very exciting okay so now I think it's
130:19 - time for us to test this out so let me
130:22 - move this
130:24 - main to the
130:27 - bottom right about
130:30 - here and so I'm going to comment
130:34 - this let's comment this out as well as
130:38 - that as course for testing and first of
130:42 - all we are going to go ahead and say a
130:45 - manager create a variable manager and
130:47 - then estan shate our assistant manager
130:50 - as such okay very clean and what we'll
130:53 - do next is we are going to be using
130:55 - streamlit which will allow us to create
130:57 - a web page where we can actually see
130:59 - things happening so it's very simple and
131:01 - of course I'm going to go up here and go
131:04 - to requirements and I'm going to go
131:06 - ahead and say stream lit such and make
131:10 - sure that I've run again pip install d r
131:16 - requests requirements a text
131:19 - so we can pull in this streamlet package
131:22 - okay so looks like we've gotten
131:24 - everything let's make sure it should be
131:26 - fine let's see streamlet is there that's
131:29 - very exciting really good so let clear
131:33 - this and now I can go ahead and we can
131:35 - now use streamlet again if you don't
131:38 - know what streamlet is again streamlet
131:40 - is just a very simple framework that you
131:42 - can use Python firw workk you can use to
131:45 - quickly generate web pages with python
131:48 - it's really beautiful create a streamlet
131:50 - interface so we can actually create a
131:52 - user interface of course that's what it
131:54 - does I'm going to use streamlit first of
131:56 - all I need to go ahead and import
131:59 - streamlit as St for streamlit okay so
132:04 - now I can set things up here I'm going
132:05 - to start by putting the title so
132:08 - st.
132:11 - title it's going to be
132:14 - news
132:16 - summarizer and then I'm going to add
132:18 - here a form which will allow us to add a
132:21 - field where we can in this case add
132:24 - where we can type where users can type
132:26 - in the topic so I'm going to say with
132:30 - sd. form and for any form we need to
132:33 - pass a key okay so I'm going call it
132:36 - user
132:38 - input form and then I'm going to pass
132:41 - instructions here I'm going to s that
132:44 - text area so we can actually create a
132:46 - text area or text input I'm just use
132:48 - text area because it's cool and I'm
132:51 - going to say what I want the text to
132:53 - show here is going to be enter topic
132:56 - maybe text error is too much let's just
132:58 - uh say that text input okay that's
133:03 - probably better all right and we're
133:06 - going to also create a submit button
133:09 - such and I'm going to St do form submit
133:14 - button and I'm going to pass a label
133:16 - which is going to be just a string I'm
133:18 - going to say
133:19 - run assistant and now we need to be able
133:22 - to handle the button U let me see
133:24 - something here I'm going to run this
133:26 - real quick just to see if something's
133:28 - going to happen now in order for us to
133:29 - run a streamlit application we no longer
133:33 - say python we say stream lit run and
133:36 - then the name of
133:39 - the file hit enter and if all is well
133:43 - what will happen a new window is going
133:46 - to open okay so you can see I have have
133:48 - it open now it looks really nice and new
133:51 - summarizer we can enter something and we
133:53 - have the button here so just like that
133:55 - we're able to create a user interface
133:57 - that looks
133:58 - wonderful next let's go ahead and handle
134:01 - this submit button because we want once
134:03 - the submit button is clicked something
134:05 - needs to happen so I'm going to say if
134:07 - submit button in this case that's how
134:10 - you handle submits we're going to go
134:12 - ahead and create an assistant and thread
134:15 - if they don't exist so I'm going to call
134:17 - the manager
134:18 - because we instantiated here and I'm
134:21 - going to say
134:22 - dot create assistant look how beautiful
134:25 - this is because now we can just go ahead
134:27 - and call those methods right the
134:29 - function in this case from our manager
134:32 - object class that we created and for
134:34 - that we need to pass a few things I'm
134:35 - going to pass the
134:37 - name the name is going to be news
134:42 - summarizer as such and then I'm going to
134:45 - pass instructions and I already have
134:47 - those instructions I'm just going to
134:48 - copy and add them here so that way we
134:51 - don't have to do all of
134:53 - this okay so essentially it says here
134:56 - your personal article summarizer
134:58 - assistant who knows how to take a list
135:00 - of Articles title and descriptions and
135:02 - then write a short summary of all the
135:04 - news articles now the most important
135:07 - thing here is that we need to pass the
135:09 - tools list right so the list is going to
135:12 - go in as an object or a dictionary in
135:15 - this case and we need to pass a few
135:18 - things here so now I have all of that
135:19 - already and you'll have access to all of
135:21 - that this is um the dictionary that you
135:26 - need to pass in for our function calling
135:30 - to work so instead of tools you say this
135:34 - so we have the type is going to be
135:35 - function the function we're going to get
135:37 - the name is get news remember it has to
135:39 - be the same name of the function we
135:41 - created earlier get news very important
135:44 - and then the description we can add a
135:46 - description here for that function we
135:48 - have the parameters and then we have the
135:51 - parameters and and then we have the
135:52 - parameters fied which is an object or
135:54 - dictionary it's going to be an object
135:56 - the property and importantly notice here
135:59 - the property is the topic this is the
136:01 - argument right so topic is going to be
136:04 - type of string and we need to pass the
136:06 - description of that property which is
136:08 - topic remember we adding topic because
136:11 - that was the argument we're passing has
136:12 - to be exactly the same name this is very
136:14 - important otherwise it's not going to
136:16 - work okay and so we pass the description
136:18 - the topic for the news for example
136:20 - Bitcoin and so forth now important part
136:23 - here is a required because this is going
136:25 - to be the argument parameter as you see
136:27 - this is part of parameters and that is
136:29 - required which is going to be the topic
136:31 - notice these are the same names as the
136:34 - arguments or parameters we passed in the
136:37 - function okay so when we click the
136:40 - button then we're going to create an
136:41 - assistant and then also we are going to
136:44 - go ahead and create right below that
136:46 - we're going to go ahead and create
136:47 - create the actual thread because that is
136:50 - needed right to create a thread going to
136:52 - use manager again and then invoke the
136:55 - function or run the function or call the
136:57 - function create thread we don't have to
136:59 - pass anything and next we're going to go
137:01 - ahead and add the
137:04 - message and run the assistant as such
137:08 - how do you do that well we're going to
137:09 - use manager again this is the beauty of
137:11 - having that class right and call the add
137:14 - message to thread function and here we
137:18 - need to pass the role the RO is going to
137:20 - be user content it's going to be I'm
137:22 - going to pass in as an F string so I'm
137:25 - going to
137:26 - copy what I have here already so it's
137:29 - easier so for Content says summarize the
137:31 - news on this
137:33 - topic and passing the instructions now
137:35 - where is this instructions coming from
137:37 - well this is the instructions we getting
137:39 - from the text
137:41 - input very good once we've added that
137:44 - message this is going to be a message to
137:46 - the thread right what we need to do then
137:50 - is just say
137:52 - manager that run
137:54 - assistant right that method and passing
137:57 - the
137:59 - instructions which is going to be
138:01 - summarize the news okay you can be more
138:04 - elaborate but that's
138:06 - okay and once we have that then we are
138:09 - going to wait for
138:12 - completion and process then the messages
138:16 - okay so I'm going to call manager again
138:18 - say wait for completed it's called wait
138:22 - for completed it should be wait for
138:23 - completion so I already so we have that
138:29 - so change that so that wait for
138:32 - completion and then we're going to have
138:34 - a summary here which is going to be
138:37 - which then I'm going to call the
138:39 - manager. get
138:40 - summary because at this point we should
138:42 - have a
138:43 - summary and once we have this summary we
138:47 - can then say St for stream lit and write
138:51 - that summary
138:53 - okay into our page and then SD again I'm
138:58 - going to add a text here which is going
139:01 - to be the Run
139:04 - steps and then I'm going to st. code so
139:08 - this is just going to show the Run steps
139:10 - at the bottom and then I'm going to pass
139:12 - it's called manager that run steps
139:15 - function which we created right is just
139:17 - go ahead and show all the steps and I
139:20 - want this line numbers to be true as
139:23 - such that's about it so we are now
139:26 - calling everything first of all we
139:29 - created the assistant make sure that we
139:31 - pass the tools which is going to be a
139:32 - function function calling tool
139:35 - essentially and then we create the
139:37 - thread that's needed and then once the
139:39 - thread is created we I'm going to create
139:41 - in this case add call the add message to
139:44 - thread add the user and the summarized
139:48 - news on this topic which is going to be
139:49 - instructions right and we're going to
139:52 - run the assistance past instructions we
139:54 - going to wait for completion right a few
139:57 - seconds and then we get the summary
139:59 - manager get summary and then we write
140:01 - that summary into
140:03 - our into our page and then of course we
140:08 - also get the steps so we can show at the
140:10 - bottom that's it so now if I save this
140:13 - go ahead and run again I think uh I
140:16 - could go back
140:18 - and always run okay let's go ahead and
140:20 - say open
140:23 - Ai and
140:28 - run all right so after a few moments you
140:30 - can see that we have here here are some
140:33 - recent news articles about openi and
140:36 - goes and gets the title how to stop
140:38 - another open ey meltdown and it's got
140:40 - all the main points the author Source
140:43 - description so what happens now in the
140:45 - back end the assistant was able to go
140:48 - and create this all of this the
140:50 - description as a little summary okay the
140:53 - same thing with wired so everything
140:55 - related to the description here is
140:57 - indeed showing now it's saying none here
141:00 - maybe perhaps in the code I put
141:02 - something wrong but that's okay we can
141:03 - look at that a little bit later okay so
141:07 - as you can see this is indeed working
141:10 - and if we go back to our command line
141:13 - here or terminal I should say there's a
141:16 - lot that has shown up here and let's see
141:21 - so we see here in one of the Run status
141:23 - we have the assistant ID so I'm going to
141:25 - copy that assistant ID and go back to
141:28 - our code and for our assistant ID here
141:31 - I'm going to actually paste that in and
141:34 - let's go ahead and find the
141:37 - thread ID there we go to thread ID let's
141:40 - just copy
141:42 - this and I'm going to put there so this
141:44 - is what we're going to be using very
141:47 - well so that means then I'm going to go
141:49 - ahead and stop this all together because
141:51 - now we're going to change gears to make
141:53 - sure that we don't recreate this same um
141:57 - we don't create yet another another
141:59 - assistant when if we were to run this in
142:03 - this case um adding another something
142:06 - else okay so I stop that and this is
142:10 - stopped now if we go
142:13 - to open AI let's go to our assistance we
142:17 - should see that indeed we have this new
142:20 - summarizer assistance with that ID which
142:22 - is the same ID that we just added
142:25 - hardcoded to make sure that everything
142:28 - works as
142:30 - intended okay so now that we have
142:33 - actually added this thread ID as well as
142:35 - assistance ID we have this code so that
142:40 - it will check if there's already an
142:42 - assistant ID okay if there is an
142:45 - assistant ID we just going to go ahead
142:46 - and retrieve that assistant right say
142:50 - assistant better assistance and retrieve
142:52 - same thing with the thread okay so this
142:55 - is why we had this code before so now if
142:57 - I save this let's go ahead and rerun
143:04 - again going to refresh this so this time
143:07 - here I'm going to run again let's have a
143:09 - different topic let's say
143:12 - US
143:15 - inflation let's go ahead and write R so
143:17 - we'll take a few moments and there you
143:20 - have it here are some recent news
143:22 - articles about US inflation and we have
143:24 - the title the author and everything and
143:26 - we do have that description which is
143:28 - really nice and we also have to read
143:30 - more the homelessness in the US hit
143:33 - record high and all this information
143:35 - very good so we still getting none for
143:37 - steps here we can look at the code just
143:39 - to make sure because for
143:41 - steps I saw earlier that we should be
143:44 - getting something but I think I I let's
143:52 - see okay I have run steps let's go to
143:55 - our
144:06 - code okay run
144:09 - steps I'm just run steps self list right
144:15 - I'm printing the Run steps and I
144:19 - should return H that's why run steps
144:24 - like this and of course I can
144:26 - move this there so this actually works I
144:31 - can actually save this and I'm going to
144:34 - prob in into data to actually get the
144:37 - right information all right there we go
144:40 - so now if I go back
144:42 - here and I'm going to say always rerun
144:45 - or just rerun one time that's okay and
144:48 - I'm going to find something else let's
144:50 - say let's say apple okay after a little
144:54 - bit you can see that indeed this is
144:55 - running here are some recent news
144:57 - articles about Apple and Apple pay Apple
145:01 - card Apple
145:02 - Visa TV and all this great stuff so you
145:06 - can see oh there we go and of course we
145:08 - have all the Run steps which is exactly
145:10 - what we want to see and this is just for
145:13 - us to debug of course in a final project
145:16 - or product you shouldn't you probably
145:18 - shouldn't have this there but I just
145:19 - want to show you so we have this is
145:23 - working if we go to our assistant we see
145:27 - that we don't have duplicates of
145:28 - assistant we just have one summarizer
145:30 - because now we're able to get the
145:32 - assistant ID and of course we printed
145:34 - out the thread ID so we're using those
145:37 - for our assistance API that we heating
145:40 - creating here to summarize our news very
145:44 - cool so I hope this is making sense I
145:47 - hope you are seeing the power of using
145:49 - function calling uh with assistance API
145:53 - and it's part of adding more tools to
145:56 - the toolkit so that an assistant is able
145:59 - to run things and get information extra
146:01 - information from somewhere else as you
146:03 - can see we're tapping into a totally
146:06 - different thing per se totally different
146:09 - system uh API in this case to get
146:12 - information and pass that back through
146:15 - the large language model in this case
146:16 - the model that we're using large
146:18 - language model that we're using here
146:21 - gpt3 we instructed it to create a
146:23 - summary get that information and
146:25 - summarize everything and then pass it
146:27 - back to the thread as the response and
146:31 - that's what we getting here and you can
146:32 - see a lot of different use cases that
146:35 - can come up from this right you can
146:37 - create for instance a newsletter
146:40 - application that what it would do is
146:42 - depending on the topic that you pass in
146:45 - here it will just create General
146:46 - generate a newsletter with the main
146:48 - points about that topic so the things
146:50 - you can do are literally endless there's
146:53 - so many things you can do with this and
146:54 - I hope you're seeing uh the power that
146:57 - we have here okay so all of this is just
146:59 - using the assistance API okay so so far
147:03 - we've done a lot of things and the last
147:05 - thing we did was to create this
147:07 - summarizer new summarizer with which
147:09 - allows us to look into uh passing tools
147:13 - passing function calls to our assistant
147:16 - that way we can extend even more the
147:19 - toolings that we can pass to theist to
147:21 - our assistant to do something else right
147:23 - so in this case the assistant now has
147:26 - this function call we just looked at one
147:28 - function call but you can have many
147:29 - function calls and this is very
147:31 - important because that as I said will
147:33 - extend the capability of our model
147:37 - because not only can we rely only on
147:39 - what the large language model knows now
147:43 - we can include out tools so that the
147:45 - large language model the model model in
147:47 - this case will have more context more
147:49 - knowledge base so that's what's all
147:51 - about so it gives us that flexibility
147:53 - and what I want you to do is to think
147:55 - about use cases that you can Implement
147:58 - at your work or maybe in your projects
148:00 - what else can you do the example that I
148:02 - showed you here was tapping into or
148:05 - calling in this case an API news API but
148:08 - you could tap into uh a database for
148:11 - instance or do all sort of things so the
148:14 - idea is that now you have that
148:15 - capability and you see how function
148:18 - calling is really awesome when it come
148:20 - to creating really powerful assistants
148:23 - so next what we'll do is we're going to
148:25 - look at a knowledgebase retrieval tool
148:28 - because now we're going to look at how
148:30 - to even give more context more knowledge
148:35 - specific knowledge that we would want to
148:37 - our model so that our assistant is able
148:39 - to have the knowledge to answer certain
148:42 - questions and get us the results that we
148:44 - want okay what would going to be
148:46 - building is what I call a study body
148:49 - essentially will allow us to upload
148:51 - certain PDF files and then we can type
148:54 - and questions in the chat Boot and get
148:56 - answers pertaining to that to those
148:59 - documents or that document that we have
149:01 - uploaded okay but before we do that
149:03 - let's talk a little bit about the
149:05 - background of how things work how this
149:07 - retrieval thing really works right in
149:10 - the back end so how does it work this
149:13 - knowledge retrieval the way it works is
149:15 - very simple if you look at this we have
149:17 - documents a document could be whatever
149:19 - we upload in this case let's think of it
149:21 - as just a PDF file okay so what happens
149:25 - now is that we pass that or we upload
149:28 - that to openai large language model
149:30 - which has this Lang which has this
149:33 - massive knowledge base but when we pass
149:36 - these documents in that means those
149:38 - documents or files are now part of these
149:41 - large language model knowledge base
149:43 - that's the whole idea so that way when
149:45 - we query or we ask questions to the
149:49 - model which now understands more than
149:52 - what it knows because we've passed more
149:55 - knowledge per se then we can get the
149:58 - answers so this is what we have in a n
150:02 - shell but there's a lot of things that
150:05 - are happening internally here one of the
150:07 - things is if you
150:09 - look inside right so what happens now is
150:13 - that we're taking a document and we put
150:15 - it through
150:17 - a document splitting process okay so the
150:20 - documents are split or cut up into
150:22 - smaller chunks and then those are
150:25 - actually saved in what we call a vector
150:27 - store now this is what generally happens
150:31 - when we talk about when we talk about
150:33 - pushing information in this case
150:35 - documents and so forth to the large
150:37 - language model so it has more context
150:39 - has more knowledge okay so the question
150:42 - here is okay what is this Vector store
150:45 - and why is that even important the thing
150:48 - to keep in mind here is that in a vector
150:50 - store the representation of the document
150:53 - is not is not the same as we started
150:55 - with so this is not even documents chunk
150:58 - this is not even a document that you and
151:00 - I can read anymore now we have this
151:02 - different representation that we call
151:04 - embeddings so what happens that a vector
151:07 - store holds embeddings so embeddings is
151:10 - a vector just a mathematical
151:12 - representation of the text of those
151:14 - documents and that is indeed what is put
151:18 - inside of the vector store a vector
151:21 - store is just a database that holds all
151:24 - of this mathematical representation of
151:27 - our document now the reason why
151:29 - embeddings are so important is because
151:30 - embeddings are first of all our
151:33 - mathematical representation which means
151:35 - it's really easy for algorithms to be
151:38 - able in this case to search for whatever
151:41 - it's looking for for your text for
151:43 - meaning and so forth so there's a lot
151:45 - more to that but that is is the idea
151:47 - because now we can look for pieces of
151:49 - text in this case we call text but
151:50 - they're not necessarily text they're
151:53 - mathematical representation but let's
151:54 - call them text so now it's easy to look
151:56 - for the pieces of text and trying to
151:59 - find similarities between those pieces
152:02 - of text which are now embeddings the
152:05 - idea so visually again this is what
152:07 - happens so you have all the documents so
152:09 - I'm putting different kind of documents
152:11 - but right now we're talking about just
152:13 - PDF files but could be anything really
152:14 - in general okay and that has to be
152:17 - transformed into embedding as I just
152:19 - said which are these mathematical
152:20 - representation of those pieces of data
152:23 - the text or the document which we call
152:27 - Vector
152:28 - representation and that is what is
152:30 - pushed into this massive algorithm that
152:34 - will then know how to do the similarity
152:37 - search to find the right results per se
152:40 - okay so the idea here is as follow the
152:42 - query the questions also have to be
152:44 - transformed into embeddings so that they
152:47 - are able to be understood and be
152:49 - searched for because if the information
152:52 - now is in the vector representation
152:54 - format makes sense that the answer or
152:57 - rather the question the query has to be
152:59 - the same format that way the algorithm
153:02 - is is able to do the searching in the
153:05 - vector store and so forth and get the
153:07 - right information and of course that
153:08 - gives us the result so essentially this
153:11 - is what how it looks like again okay so
153:13 - we have the vector store loading so this
153:16 - is not necessarily just what happens uh
153:20 - with open AI in this case are we talking
153:22 - about it but I'm talking about in
153:24 - general this is what would happen so in
153:26 - this case here we have the document
153:27 - loading so what happens then we split
153:29 - everything and then all the splittings
153:32 - those are the vector representation of
153:34 - our documents here they put into a
153:36 - storage a vector store okay now the
153:39 - retrieval in this case everything is
153:41 - going to be indexed right so now we have
153:43 - a question or a query we go through
153:46 - through the vector store the retriever
153:48 - so we retrieve the relevant splits
153:51 - because the information now it's into is
153:54 - in this different format and now the
153:57 - search happens to find what goes with
154:00 - what what makes more sense right to find
154:03 - the most similar pieces of data so that
154:06 - we understand what's going on and then
154:09 - once that is retrieved the most similar
154:11 - pieces of data that's what it's then put
154:14 - into a prompt all right so we have that
154:16 - prompt the query and we have that what
154:19 - we've received from the retrieval the
154:22 - documents were split and everything and
154:24 - with the prompt and with the help of the
154:27 - large language model in this case just a
154:28 - model that's when we get the answer so
154:31 - this my friends this is how it works in
154:34 - the back end now if we go ahead and look
154:36 - back at the first the open AI you notice
154:40 - that in this case open eye simplifies
154:42 - everything for us when it comes to this
154:45 - whole process
154:46 - because now we have some sort of like a
154:48 - a black box where all of the things that
154:51 - I've just told you now is happening all
154:52 - we have to be concerned about is to get
154:54 - a document push them into this black box
154:58 - per se and then we can just start
155:01 - conversing with our large L model in
155:05 - this case our model in this case in the
155:07 - form of our assistant API so this is
155:10 - what we're going to be doing next next
155:12 - we're going to learn how to do knowledge
155:14 - retrieval by pushing or by uploading
155:17 - files in this case documents to our
155:19 - assistant's API and then be able to ask
155:23 - questions about those documents so I
155:25 - went ahead and created a new project
155:27 - called study body and I've set up the
155:29 - environment environment variables and
155:32 - everything and I also have requirement
155:35 - uh. txt we have all of these Let's see
155:38 - we don't need request anymore I don't
155:41 - think that's okay so let's go ahead and
155:43 - run pipe install real quick here
155:48 - R request so we can get all those
155:51 - dependencies all right so we got all
155:53 - those dependencies that's very good and
155:56 - what we'll do next let's get rid of that
155:57 - in our app here everything should be
156:00 - looking good nothing new I've got a few
156:03 - Imports as well some of them we're not
156:05 - going to use them that's okay we can get
156:07 - rid of them when we need to and one
156:10 - thing I noticed I've changed here is
156:11 - that is that now for a model we have GPT
156:14 - 4 110 six preview now remember these
156:18 - could change depending on when you're
156:20 - watching this you can go to the
156:22 - documentations and see that okay but
156:24 - this should work so the first step we
156:25 - need to do is to is how do we upload
156:28 - files to the assistant API in the back
156:32 - end okay so let's put number one here
156:36 - upload a file to
156:39 - open AI embeddings essentially that's
156:42 - what we're doing ah embeddings yes okay
156:46 - so to do so first of all we need to get
156:48 - those files and I already have that
156:51 - prepared for us so I'm going to go ahead
156:53 - and get it the one file at least which
156:56 - is going to be in this case this is the
156:59 - understanding cryptocurrency it's very
157:01 - short not nothing too large that's okay
157:04 - and we're going to use that and upload
157:07 - that to the embeddings the open AI
157:09 - embeddings okay so I'm going to say file
157:12 - path I'm going to create a file path
157:15 - here and because it's literally here so
157:18 - what are we going to do we just going to
157:19 - go ahead and say that for Slash and of
157:22 - course make sure that you know depending
157:25 - on what operating system you're on so
157:27 - this is how we do in on Mac so I know
157:31 - it's cryptocurrency so I'm going to uh
157:34 - crypto
157:36 - currency. PDF that's the name so make
157:38 - sure the name is exactly the same and
157:42 - then I'm going to create an actual file
157:43 - object and I'm going to say client Cent
157:47 - right
157:48 - beta and I'm going to files let's see no
157:52 - it has to go client files it's not beta
157:54 - which is good so and then let's say I'm
157:58 - going to create and I'm going to pass
158:01 - the file I'm just going to say open and
158:05 - then find uh pass the file file
158:10 - path as such and I'm going to say
158:14 - RV and we need to also pass the purpose
158:18 - why we are uploading this in this case
158:20 - I'm just going to say that purpose is
158:22 - going to be equal to assistant
158:25 - assistance like
158:27 - that okay there we go so now we have let
158:31 - me put this perhaps in a new line no
158:33 - doesn't work so now we've created the
158:35 - actual file object which is going to be
158:38 - pushed into the open AI embedding in
158:41 - this case the open AI assistance API
158:44 - okay okay and then then
158:47 - step number two very simple is we're
158:51 - going to create an assistant oh we've
158:54 - done this many time so you should know
158:56 - how to do this now so I'm going to just
158:57 - go ahead and do it anyway so assistant
159:00 - I'm going to use our client going I have
159:02 - to do beta for now assistance. create
159:06 - and we have to pass a few things first
159:09 - of all it's going to be name I'm going
159:10 - to call this
159:12 - study
159:14 - buddy and then instructions and I have
159:18 - the instructions here so I'm not going
159:20 - to bore you so I'm going to just get all
159:22 - of that and show you here okay so I do
159:26 - have the instructions here you are a
159:27 - helpful study assistants who knows a lot
159:30 - about understanding research papers Your
159:33 - Role is to summarize papers and do all
159:35 - these things so you're going to have
159:36 - access to all this so there's no need
159:37 - for me to go through but it's important
159:39 - to remember that whenever you're
159:40 - creating these instructions these are
159:42 - the prompts so you need to be very
159:44 - thoughtful and very
159:46 - um specific of what you want this
159:49 - assistants to be able to do next the
159:51 - important thing thing here is tools the
159:53 - tools we're going to have to pass here
159:55 - or essentially simple we're going to
159:57 - pass just one tool and the type of this
160:01 - tool I'm going to say it's going to be
160:04 - retrieval because we want to be able to
160:06 - upload a file or
160:08 - files okay I'm going to say model in
160:10 - this case I'm going to say model pass
160:12 - the model that we created at the top and
160:14 - then we need to pass has also file IDs
160:17 - notice it says ID is not ID that means
160:19 - we can pass more than one file and
160:21 - that's why we have a list here so I'm
160:23 - just going to go ahead and say the file
160:24 - object. ID like this okay this file
160:28 - object again remember that's what we
160:30 - created here and for reasons that you
160:33 - know by now I'm just going to go ahead
160:35 - and get the
160:39 - assist ID so we can use it later later
160:42 - so I'm going to say assist ID I'm I'm
160:45 - going to use the assistant and get the
160:48 - ID I'm going to go ahead and print that
160:51 - one assist ID and then I'm going to just
160:55 - paste some of the code here this is for
160:58 - later once we've run once so we have the
161:00 - uh the thread ID and assist ID then
161:02 - we're going to add them here so these
161:03 - are old ones and they're not going to
161:05 - work so for now just going to go ahead
161:07 - and uh make them empty as such so and I
161:11 - can also go ahead and go like this for
161:13 - now and next I'm going to go ahead and
161:15 - create in step
161:17 - three we create a thread again nothing
161:22 - new here same thing okay so first of all
161:26 - I'm going to create a message here and
161:28 - for now I'm just going to say what is
161:30 - mining something like that that's okay
161:33 - so let me go ahead and create a thread
161:34 - here so thread uh just client
161:39 - beta threads and we just go ahead and
161:43 - create a thread need no need to pass
161:45 - pass anything and let's go ahead and get
161:47 - the thread ID right away that ID let's
161:52 - go ahead and
161:55 - print thread ID li like
161:59 - that say
162:02 - run the
162:05 - assistant so I'm going to say
162:09 - run
162:11 - client threads runs create
162:16 - eight okay and we need to pass the
162:18 - thread ID so it's going to be
162:22 - thread ID as such
162:26 - and assist ID going to be assist
162:31 - ID and instructions I can just put
162:33 - something here that says
162:35 - please address the user as Bond as Bru
162:42 - I'm also going to go ahead and pull in
162:44 - this weight for run completion we've
162:46 - seen this before so no need for me to go
162:48 - through the idea is that it's going to
162:49 - go ahead and wait for a few moments make
162:52 - sure that everything is running and then
162:54 - it's going to give me the time formatted
162:56 - elapse time to say how long it took to
162:57 - run and everything okay so we've seen
162:59 - this before that's what we're going to
163:00 - be using of course to run right through
163:04 - our uh to run it so now we're going to
163:08 - go ahead and say run it how do we do
163:10 - that I'm going to say wait completion
163:12 - and then I'm going to pass the client
163:14 - which is going to be our client and
163:17 - let's pass the thread ID it's going to
163:19 - be thread ID and let's pass the Run
163:23 - ID which is going to be run. ID as such
163:28 - okay because we have the run here okay
163:33 - and of course if you want we can check
163:34 - the Run steps logs and this we've seen
163:38 - that before so there we go so very
163:40 - simple um let's go ahead and run this
163:42 - most importantly we know hopefully that
163:44 - we're going to be able to push this
163:46 - cryptocurrency PDF um file into open ey
163:50 - embeddings right so it's going to go
163:52 - into do all the things that I've showed
163:53 - you before what happens in the back
163:55 - end and we should have an assistant
163:57 - let's go ahead and run this real quick
163:59 - if all goes well we should be able to go
164:02 - so I'm going to say
164:05 - Python
164:07 - 3 that's that and run so we got some
164:12 - things here but let's go ahead first and
164:13 - get the assistant ID so we copy that and
164:17 - add it here let's get the thread
164:23 - ID and put it here okay so that next
164:27 - time we can run things differently so
164:28 - let's go to open AI here the assistance
164:31 - in the back end let's see if this
164:32 - actually worked if I go ahead and
164:35 - refresh here we should see indeed that
164:37 - we have study buddy this is our new
164:39 - assistant there is the ID and everything
164:43 - is good if I click of course we have all
164:44 - that information and the model that it's
164:47 - using and most importantly we see that
164:50 - the retrieval is ticked as well as the
164:53 - cryptocurrency PDF file was uploaded
164:56 - this is real great we knew this would
164:58 - happen of course but it's always nice to
164:59 - see and most importantly says assistant
165:02 - response to document understanding C
165:03 - currency by the University of Kentucky
165:05 - blah blah blah so it goes through all
165:07 - the things really and does a a summary
165:10 - of the everything okay which is good and
165:13 - also we have the Run steps and voila so
165:15 - nothing new what we seeing but most
165:17 - importantly we know that things are
165:18 - working because we got the document
165:21 - uploaded and this it's part of the
165:23 - knowledge base now okay let's go close
165:26 - this and now that we have the IDS right
165:29 - so we don't have to go back and recreate
165:32 - the same assistant uh we're going to
165:35 - hardcode them here this is just for
165:37 - testing purposes and now we no longer
165:39 - need to create this so I'm going to go
165:41 - ahead and comment this out as well as
165:44 - comment this out and what else I'm going
165:48 - to comment this out
165:51 - also cuz we don't need that so now
165:54 - before we run I can then create the
165:57 - actual message so I'm going to say
165:59 - message is equal client beta
166:04 - threads messages and I'm going to create
166:07 - a message which means I have to pass the
166:10 - thread ID pass the thread ID right and
166:14 - roll
166:15 - it's going to be
166:18 - user and content aha this is where we
166:20 - pass our message which is the query per
166:23 - se what is mining okay so now you should
166:26 - get an answer of what is mining because
166:29 - we have added or pushed into the
166:32 - embeddings right uh the file in this
166:36 - case the PDF file about cry
166:38 - cryptocurrency so it should know how to
166:40 - answer to that let me go and save this
166:42 - make sure everything is
166:43 - good okay so everything seems to be
166:46 - great let's go ahead and run
166:49 - again so that means now we should be
166:51 - able to
166:53 - see the answer pertaining to what is
166:57 - mining so it's going to go and get look
167:01 - at the document that we uploaded and
167:03 - answer according to that document so
167:06 - assistant response mining is a process
167:09 - through which uh cryptocurrencies can be
167:12 - obtained it involves the creation of
167:14 - block and blah blah blah and everything
167:17 - it tells us that this was actually able
167:19 - to get the information from that PDF
167:21 - file which is wonderful so this is
167:23 - working so there we go it's very simple
167:26 - if you go back to the code here you can
167:28 - see we still have uh one hopefully just
167:31 - one because we didn't repeat things
167:33 - right we have study body and everything
167:35 - is there and if I click I should have
167:38 - still the file and I can upload as many
167:40 - files as I want of course we'll get
167:42 - there but the basics is here so so
167:44 - you're able to see how to get in this
167:48 - case retrieval the knowledge retrieval
167:51 - how to get this to work by uploading a
167:53 - file a PDF file to enhance the knowledge
167:56 - base for our assistant API all right
168:00 - there you have it now that we know how
168:02 - to upload files and Converse per se ask
168:05 - questions uh about that file in this
168:08 - case the PDF file that we uploaded in
168:11 - conjunction with our assistance API it
168:13 - is time for us to do something a little
168:15 - bit cooler which is to build our study
168:17 - body so the idea is we're going to
168:19 - upload the file the one that we're
168:21 - uploaded now and maybe another file and
168:24 - then start chatting and asking questions
168:26 - about those files or those PDF files
168:29 - documents let's go ahead and do that so
168:31 - what I'm going to do here I'm going to
168:32 - create yet another file uh to
168:34 - differentiate a few things so I'm going
168:35 - to say main.py or py and the
168:39 - differentiation is going to be little I
168:41 - would say minimal so let me
168:45 - get all of these code from the app file
168:50 - and pass it
168:53 - over so we have everything here let's
169:02 - see and actually we need to get the
169:05 - IDS because we need them I'm going to
169:07 - copy
169:08 - that and put them
169:13 - here and and in this case we no longer
169:16 - need that so let's just get rid of that
169:18 - all
169:22 - together all right now because the
169:24 - nature of this application this is going
169:26 - to be a stemulate application there are
169:28 - a few things that we need to do to set
169:30 - everything up so the first thing I'm
169:31 - going to put here is the nature of
169:35 - streamlit is that we need to make sure
169:37 - that we have sessions and any time you
169:39 - hit enter or click a button uh in a
169:41 - stream lad application what it happens
169:43 - that it's going to go ahead and reload
169:44 - the entire application the entire view
169:47 - or the entire window which is not what
169:49 - we want so uh I'm not going to go into
169:52 - this whole session thing with streamlet
169:55 - just this is going to help us especially
169:56 - when we want to create uh this chatbot
169:59 - using streamlet and the great thing also
170:01 - about streamlet is that all of that is
170:03 - included so there is actually a chat
170:06 - form that we can create quickly with
170:08 - streamlit that's why streamlit is pretty
170:11 - cool okay so first I'm going to go ahead
170:13 - and initialize all the sessions that we
170:16 - need okay okay so I'm going to start by
170:19 - putting an if statement here if file
170:23 - ID list so this is going to hold all of
170:26 - the file IDs because potentially we can
170:29 - upload more than one
170:31 - file and not in sd. session state if
170:37 - that's the case then we're going to
170:39 - create that
170:41 - session session state. file
170:45 - IDs list and that's going to be just an
170:47 - empty list okay we just have to do this
170:50 - and I'm going to do another one as well
170:52 - so if
170:53 - start chat which is going to be part of
170:55 - a button really not in sd.
171:00 - session
171:01 - State s the session that
171:05 - start chat I'm going to just say it's
171:08 - going to be
171:10 - false what else now I'm going to use the
171:13 - thread if thread I ID not
171:17 - in session State and then we're going to
171:21 - say St session
171:23 - state
171:25 - DOT
171:26 - thread okay very good those are the
171:29 - sessions we need to set up okay we're
171:31 - going to go straight and start setting
171:33 - up the front end in this case the page
171:36 - so I'm going to go ahead and just say
171:38 - set up our front end
171:42 - page and to do so with it is extremely
171:46 - simple I'm going to say St and then set
171:49 - there's a function called set page
171:52 - config and here we can pass a few things
171:55 - so I'm going to say page title say
171:58 - study
172:01 - buddy say chat and learn that sounds
172:06 - very good and Page icon we can actually
172:09 - pass an icon here like this books okay
172:13 - so you just put this is the icon
172:15 - representation of a stack of books this
172:18 - is where we're going to start our
172:21 - function
172:22 - definitions
172:24 - Etc so essentially this is where the fun
172:27 - will start so the first thing we need to
172:28 - do is to figure out a way to upload a
172:31 - file to open AI which we know how to do
172:33 - that so I'm going to go and
172:36 - Define the upload AI so we need a file
172:42 - path okay and and I'm going to go ahead
172:45 - and do that we've seen that before with
172:47 - open and I'm going to find file pass the
172:51 - file path and then say
172:55 - RB and I'm going to say as file and I'm
172:58 - going to say response in this
173:01 - case I'm going to go get the client
173:06 - files create and then pass the file
173:10 - which is going to be just the file uh
173:12 - that we have here we got here right and
173:16 - then I'm going to get the path or read
173:18 - actually because it's going to come in
173:20 - in this case I want it to come in as
173:22 - bytes okay stream really all
173:25 - right and then of course I'm going to
173:27 - pass the purpose going to be assistance
173:31 - and what I want to happen for this
173:33 - function is I want to return the actual
173:37 - ID so I'm going to say response. ID so
173:40 - this will return the ID of the file that
173:42 - was uploaded very simple and next what
173:45 - we'll do here we're going to create a
173:47 - sidebar okay the
173:49 - Side Bar say where users can upload
173:54 - files so here I'm going to say file
173:57 - upload I'm going to put that in a fun in
173:59 - a so I'm going to put that in a variable
174:01 - because we want access to that so file
174:05 - upload and to generate a sidebar in
174:07 - streamate again very very simple so we
174:10 - just say St that's
174:13 - sidebar tou and I'm going to say dot
174:18 - file uploader because we want actually a
174:20 - sidebar fly a sidebar with a file
174:24 - uploader and we can pass some text to
174:27 - say
174:27 - upload a file to
174:30 - be transformed into embeddings in a real
174:35 - application obviously you probably don't
174:37 - want to talk about embeddings because
174:38 - most users won't even care but it's okay
174:41 - we're here and then I need to pass here
174:44 - a key just to say something file upload
174:47 - and that's
174:49 - that now we can also add a button that
174:53 - says when click then they can actually
174:54 - upload the file okay so this is going to
174:57 - be just um the interface where they can
175:00 - upload the file right drop the file and
175:02 - then we need to allow them to click to
175:04 - say actually want to upload the file
175:06 - that we just dropped here upload file
175:10 - button and we can also store the file ID
175:15 - so I'm going to say if SD that's
175:18 - sidebar as such I'm going to create a
175:21 - button and this is going to be
175:24 - upload file and you going to this will
175:27 - make sense once you start seeing things
175:29 - but I hope you're seeing the pieces
175:31 - coming together I'm going to say if in
175:33 - this case File uploaded this should be
175:36 - file
175:39 - uploaded
175:41 - okay if there's something there if I
175:45 - let's see
175:47 - uploaded there we
175:50 - go we got to go ahead and
175:54 - open file uploaded in this case and get
175:59 - the name and this should probably be F
176:03 - string and we need to pass that we want
176:05 - to say here we want
176:08 - to write this as a binary that's why
176:12 - we're going to say
176:15 - uh
176:18 - WB read write as binary RBS read as
176:22 - binary as we saw earlier here okay and
176:26 - all of that as F and I'm going to say F
176:29 - that write going to write that file
176:32 - uploaded okay and I'm going to say get
176:36 - buffer and in this case here there are
176:38 - times when also we want to allow users
176:41 - to upload more than one files so I'm
176:43 - going to just say something like maybe
176:45 - another uh file
176:50 - ID and I'm going to say
176:56 - uploaded oh let's say upload I'm going
176:59 - to call the upload to open
177:02 - Ai and then put an F string here and
177:06 - this I'm going to pass the file uploaded
177:10 - and get the name as
177:12 - such and let's make sure that we the we
177:15 - take care of the session so the session
177:18 - State file ID list let's see file _ id.
177:23 - list doesn't give me intellisense that's
177:25 - okay and I'm going to append let's see
177:28 - file ID list sure I have that file ID
177:32 - list file ID so this be file ID okay
177:35 - there we
177:37 - go and going to pend our another file ID
177:43 - my such
177:44 - and SD I'm going to create that sidebar
177:47 - and write something to to it which is
177:50 - going to be uh file
177:53 - ID and then I'm going to pass the
177:57 - another file ID as such so essentially
178:00 - we're just writing on the wall on the
178:03 - sidebar the ID of the other file ID that
178:05 - was added so each time we added a file
178:07 - and then we can see all those IDs okay
178:10 - so what I want to do next is I want to
178:13 - uh display
178:15 - play those file
178:19 - IDs so I'm going to make sure again look
178:22 - at session State
178:26 - file ID list if that's all good then I'm
178:31 - going to go to
178:33 - sidebar and write in this
178:37 - case
178:39 - uploaded file IDs so this is where we're
178:42 - actually showing the thing things really
178:45 - and then at the bottom we say
178:47 - for file ID and S do that session I'll
178:53 - make sure I get the
178:54 - right list okay because it's going to be
178:57 - a list with all those file
178:59 - IDs that have potentially been
179:02 - uploaded and I'm going to write into the
179:06 - sidebar
179:07 - again and I'm going to pass the file ID
179:11 - now once we have these file IDs need to
179:14 - associate them to the current assistant
179:17 - that's very important because each
179:18 - assistant can have multiple files okay
179:21 - so how do we associate them so I'm going
179:23 - to write here associate each file ID
179:27 - with
179:29 - the current assistant okay so I'm going
179:33 - to say assistant file really and say
179:38 - client beta and
179:41 - assistants. files and I'm going going to
179:44 - go ahead and create to create a file as
179:45 - you know by now we need to pass the
179:47 - assistant ID which we can get by say
179:50 - assist ID right oops assist ID and then
179:56 - we need the file ID which is going to be
179:59 - file
180:01 - ID that we have there okay so that's how
180:04 - we associate that each file that we add
180:06 - is going to be Associated to the correct
180:09 - assistant
180:12 - okay next we are going to go ahead and
180:15 - SA button to
180:18 - initiate the chat session okay we're
180:22 - getting there okay so I'm going to put
180:24 - in if state so you'll notice that in
180:28 - streamlit to start in this case to
180:31 - initiate something Handler right a
180:34 - buttonclick handle Handler of of some
180:37 - sort you say SD put an if sd.
180:41 - sidebar. button
180:44 - and I can
180:46 - say start chatting and this is where we
180:49 - handle the click okay so first we need
180:53 - to make sure that uh all the files have
180:56 - been uploaded that's very important so
180:58 - that we can check that by saying STD go
181:01 - to session State and then file
181:04 - id id list okay make sure that we have
181:10 - that session which means we have
181:11 - something and then we're going to make
181:14 - sure that our session state for start
181:17 - chat in this case is going to be true
181:20 - because that means we have everything
181:22 - set up for things to be get going
181:25 - because we've just clicked so that means
181:27 - we have the file ID session which means
181:30 - we have IDs that means then the session
181:32 - for the start chat has to be true at
181:35 - this point okay so now we're going to
181:38 - create a
181:40 - new thread we could create a new thread
181:43 - can just go ahead and use that same
181:45 - thread that's okay we're just going to
181:46 - and create a new thread uh for this chat
181:50 - session okay okay so again nothing new
181:53 - you know how to create a thread so I'm
181:55 - going to call this chat thread and so
181:58 - I'm going to say client or yes client go
182:02 - beta uh threads and create a thread okay
182:06 - now we have the thread set the session
182:09 - again of that thread this is very
182:10 - important a lot of sessions here for the
182:12 - reason I said so that's just how stream
182:14 - lit works and uh session State and I'm
182:19 - going to use the thread ID and I'm going
182:22 - to pass the our chat thread. ID so now
182:27 - we have set the session for this whole
182:30 - thing the thread ID session to the
182:33 - thread ID of this newly created
182:38 - thread okay I'm going to write something
182:41 - to the wall all right so so I'm going to
182:44 - say thread
182:48 - ID and I'm going to pass the
182:53 - chat.
182:54 - ID chat thread. ID notice that we inside
182:58 - of this if statement here that handles
183:01 - the on click and then else if none of
183:05 - that is true I'm going to go ahead and
183:08 - just say
183:10 - something sd. side
183:14 - r. warning right we can just invoke a
183:17 - warning so the text is going to be
183:19 - redish and I can just say something uh
183:22 - no files
183:24 - found please
183:27 - upload a at
183:30 - least one file to get
183:34 - started all
183:35 - right very good so we're making real
183:38 - good progress here so one thing I want
183:40 - you to keep in mind is that as we pass
183:43 - this documents to the embeddings the
183:45 - open eye embeddings so we are able to
183:48 - attach all that information to enhance
183:51 - as they call it the model so we can
183:53 - converse or chat with it um whatever
183:57 - comes when we ask a question whatever
183:59 - comes the resulted response it also has
184:02 - other metadata such as citations okay to
184:05 - say okay this information that I got it
184:07 - from this place in a document now we
184:10 - have a very simple document but you can
184:12 - imagine if you have a very large
184:14 - document then this could be very helpful
184:16 - and so what I'm going to do here just in
184:19 - the interest of time I'm going to paste
184:21 - in a helper function that will
184:25 - essentially process message with
184:28 - citations okay so it's very simple as
184:30 - you see here extract content and
184:32 - annotation from the message and format
184:33 - citations as footnotes so it goes
184:36 - through gets the content that we get for
184:40 - as a response right and then that and go
184:43 - goes through and looks for certain
184:46 - annotation looks for certain attributes
184:48 - in the message the whole payload uh
184:51 - where we see annotations and if it sees
184:54 - annotations of course it creates those
184:57 - annotations goes through creates their
184:58 - annotations and so forth so now there
185:01 - are some limitations because we said
185:03 - that we can pass different files right
185:06 - which we will see but in this case here
185:08 - um for retrieving decided files we're
185:11 - going to do things uh we're going to use
185:13 - some dumi way or dumi data to get that
185:16 - going and I'm hardcoding here just is
185:19 - for testing purposes I hope by the time
185:22 - at some point once this assistance API
185:26 - is mature we have ways to do certain
185:28 - things such
185:30 - as such as calling the cited files
185:34 - details instead of us having to do all
185:36 - this okay so but this is just to give
185:38 - you some ideas now again this is not
185:40 - perfect code um it just works for what
185:43 - are we trying to do here to give you
185:44 - some ideas okay so in this case here for
185:47 - the file name cited file we are putting
185:49 - in this case the cryptocurrency PDF
185:53 - right hardcoded it again not a good idea
185:56 - but that's what we're doing anyway okay
185:58 - so that's what we're doing and then we
186:00 - append we have the
186:02 - citations list here and as all of that
186:05 - is happening we retrieving all those
186:07 - annotations and we're painting all of
186:09 - them so that everything is set up okay
186:12 - so that's what we do and after that we
186:14 - create a
186:15 - footnote in form of a a full response
186:19 - and we get that information we put it
186:20 - all together and then we'll return that
186:23 - so that is essentially what we're doing
186:25 - in this process message with citations
186:29 - let's go ahead and continue putting
186:31 - together the front end the API okay or I
186:34 - should say the the page itself so I'm
186:36 - going to say the so here is where I'm
186:39 - going to put the main interface so we
186:42 - can actually see
186:44 - things okay so I'm going to use
186:47 - streamlit again and I'm going to add a
186:49 - title for our
186:51 - page call it study
186:54 - body now notice the difference here I'm
186:57 - adding the title before we're adding the
186:59 - title to the page configuration which is
187:02 - those are two different things and if
187:04 - you want to learn more about streamlit
187:06 - which I encourage you to do we can just
187:08 - Google real quick or stream lit and then
187:10 - go to documentations it is the most
187:13 - simplest straightforward way to create
187:15 - prototype applications okay that's very
187:18 - good in Python and I'm going to also St
187:21 - stream L here I'm going to write
187:23 - something here kind of like a subheader
187:27 - and I can say learn fast by
187:31 - chatting with your
187:34 - documents okay good for marketing I
187:36 - guess okay next we are going to again
187:40 - check a few things check sessions
187:43 - to make sure everything is good so we
187:45 - can proceed so first we're going to
187:47 - check that the chat is not already in
187:51 - session so to do so we're going to say
187:53 - if
187:54 - St go to sessions that
187:57 - chat oh
188:00 - start
188:02 - chat and if there is that session so if
188:07 - there is a chat session that means
188:09 - things have started so now I'm going to
188:11 - go initialize them and this now we're
188:13 - going to go ahead and and now we're
188:15 - going to go ahead and initialize our
188:17 - model so I'm going to say if open
188:22 - AI
188:24 - model not in
188:29 - session okay I'm going to say
188:32 - st. session
188:34 - state. open
188:38 - AI model I'm going to just say this is
188:42 - going to be the chat GPT or
188:46 - GPT 4 like that so we're using the
188:49 - preview okay and that's the only thing
188:52 - that actually works with what we're
188:54 - trying to do if you try to do jpt 3
188:56 - Turbo 3.5 turbo it's not going to
189:01 - work and also I'm going to check
189:06 - messages not in St session
189:11 - state then I'm going to say s State
189:15 - messages set that to empty so this is
189:19 - going to help us of course with the bot
189:22 - with the chat bot all right so let me go
189:26 - ahead and show existing
189:29 - messages if any so four
189:36 - messages in
189:38 - st.
189:40 - session that messages
189:45 - and I'm going to now invoke the chat
189:47 - notice that this chat this is what I
189:49 - talk about notice as I said we don't
189:52 - have to do anything really when it comes
189:54 - to creating a chat a chat box per se um
189:57 - stream lit has that so I can say do chat
190:00 - right it's part it's part of the
190:02 - framework so I can go ahead and say chat
190:05 - message all right look at that and I'm
190:08 - going to pass the
190:11 - message or
190:13 - message in this case and get the
190:17 - role this has to change to
190:21 - message okay
190:23 - singular and then we're going to go
190:25 - ahead and add that and then we're going
190:29 - to write the content inside of a
190:31 - markdown okay so I'm going to say
190:35 - message and get content of that
190:39 - message okay so now we putting together
190:42 - the actual chat and this will make a lot
190:44 - of sense once we start running this and
190:46 - apologize there's a lot of code but
190:47 - believe me this is going to work well we
190:50 - hope okay so now we're going to chat the
190:54 - user so now we going to go ahead all
190:59 - right now we're going to go ahead and
191:02 - say chat input for the user so this is
191:05 - where they're going to add something to
191:08 - as a prompt so say if
191:11 - prompt in this case s see that chat
191:15 - prompt look at that we have chat input
191:17 - as they call it that's the beauty of
191:20 - streamlit I'm going to say what's new
191:22 - that's going to be the first thing that
191:24 - will see so what's
191:27 - new all
191:30 - right which will allow them to then add
191:33 - user this so next I'm going to go ahead
191:35 - add user message to the state and
191:40 - display on the screen
191:43 - so I'm going to put
191:45 - session
191:47 - messages and I'm going to pend in this
191:50 - case I'm going to pass in as a
191:52 - dictionary so first of all do
191:55 - roll and
191:58 - user okay it's going to be user for role
192:01 - and then for the content that's where we
192:04 - going to pass the actual
192:07 - prompt we're going
192:09 - to say chat messages or message
192:14 - and this is we're going to show that
192:16 - this is part where the user so we have
192:18 - the user so this is the user chat
192:22 - message and we're going to write that
192:25 - using a mark down and we're going to
192:28 - pass that prompt so now we're going to
192:30 - go ahead and
192:32 - add the
192:37 - users message to the
192:39 - existing
192:41 - thread
192:43 - how do we do that well we're going to
192:45 - use client go better and go to threads
192:49 - and messages and create that message and
192:52 - how do we get or what is this me what we
192:54 - need to create a message we need a
192:56 - thread ID so we're going to go through
192:58 - our session again because that's what's
193:01 - driving
193:02 - everything and go get and thread get a
193:06 - thread ID and we need the role in this
193:09 - case going to be
193:10 - user and the content
193:13 - is going to
193:16 - be our
193:21 - message oh actually it's going to be our
193:25 - prompt right to create that message very
193:28 - good okay we're getting there next we're
193:30 - going to
193:34 - create create and
193:38 - run create a run with
193:41 - additional
193:43 - instructions okay so I'm going to say
193:46 - run again nothing new here
193:49 - beta threads runs and
193:55 - create need to pass the thread ID so I'm
193:58 - going to go go through the session State
194:03 - again get a thread
194:07 - ID and then assistant
194:10 - ID we pass the assist
194:13 - ID and then I'm going to pass
194:16 - instructions I have the
194:21 - instructions or
194:25 - instructions and then let's pass the
194:27 - instructions which I have here so please
194:29 - answer the questions using the knowledge
194:30 - provided in the files when adding
194:33 - additional information make sure to
194:34 - distinguish it with bold or underlying
194:37 - text most us most likely they won't do
194:39 - that but it's okay just to make sure we
194:41 - can distinguish things
194:43 - so next what I want to do is I want to
194:44 - be able to show a spinner as all this
194:47 - process is happening before we get the
194:49 - actual response so that's good user
194:52 - interface
194:54 - addition so show a
194:57 - spinner while the
195:02 - assistant is
195:04 - thinking okay okay so I'm going to say
195:06 - with spinner so I stay
195:09 - spinner and it's going to say wait
195:13 - generating
195:15 - response
195:17 - such and then inside here I'm going to
195:19 - put a while loop so I'm going to look at
195:23 - the run right so status we could have
195:26 - done we've done this differently before
195:29 - but that's okay but we can just go
195:31 - straight here status if it's
195:34 - not
195:36 - completed then we're going to sleep
195:41 - for 1
195:44 - second and then
195:47 - run okay so can say run client
195:52 - beta threads
195:55 - runs and retrieve so we're going to
195:57 - retrieve in this case our run so I'm
196:00 - going to pass the thread ID which we
196:02 - know we need to get from the
196:06 - session session State and get the thread
196:11 - ID and then pass the Run ID which we can
196:14 - get that from just run.
196:20 - ID okay and outside the while we are
196:24 - going to then
196:27 - retrieve
196:29 - messages added by the
196:34 - assistant okay I'm going to say message
196:37 - or messages in this case I'm going say
196:41 - client get to go to threads where that's
196:43 - where all messages are and messages and
196:47 - go to list and of course we need to pass
196:50 - the thread ID go again to
196:56 - session as such so now we have all the
196:59 - messages and we can process all of that
197:02 - I'm going to process and
197:04 - display
197:06 - assist
197:07 - messages okay so I'm going to put
197:09 - everything into inside of a list to make
197:13 - things a little bit easier so I'm going
197:14 - say
197:17 - assistant
197:20 - messages for run okay and I'm going to
197:25 - pass the
197:27 - message okay that's very
197:30 - important and I'm going to pass a for
197:33 - and then and then we're going to
197:34 - actually pass a for Loop inside here
197:36 - which is pretty cool for
197:39 - messages or actually for say message
197:44 - in okay say
197:47 - message so we pass message first and
197:51 - then on another index here we're going
197:54 - to go do a for Loop so it's for
198:00 - message
198:02 - so so what we do here we have a message
198:06 - and then
198:07 - for message
198:09 - in messages
198:13 - so going to make sure that if
198:16 - message that
198:17 - run
198:19 - ID is equal to run. ID and
198:24 - message. roll is also equal to assistant
198:30 - so essentially just making sure to put
198:32 - all of the messages for our from our
198:34 - assistant into this array so that way we
198:37 - can then Loop through them so in this
198:40 - case here I can say
198:43 - and once we have that this list this
198:46 - array list I can say for message I know
198:50 - a lot of message here and then go to our
198:53 - assistant messages for run because it is
198:56 - indeed a list so we can Loop through it
198:58 - um in this case here I'm going to just
199:00 - say
199:01 - full response and I'm going to say
199:05 - process message with citation this is
199:08 - where we're using that function that
199:10 - helper function we created earlier or
199:12 - just add it there and I'm going to pass
199:14 - message it's going to be equal to
199:19 - messages actually it's going to be equal
199:21 - to message because we inside of a loop
199:22 - so whatever are we getting
199:26 - there and when that happens we are going
199:29 - to also set the session
199:32 - State
199:34 - messages and append all those messages
199:37 - in so in this
199:39 - case going to create a dictionary here
199:41 - so so for the
199:45 - role it's going to be
199:49 - assistant and again for
199:52 - Content we going to pass the full
199:55 - response so create a dictionary to add
199:58 - into our
199:59 - messages
200:01 - State okay and then here I'm going to go
200:04 - ahead and get the chat message because
200:07 - we need now to use that which is going
200:11 - to be the
200:13 - assistant and then we're going to add
200:15 - that all those responses onto the screen
200:18 - so I'm going to use mark down again and
200:21 - pass the full response and I'm going to
200:25 - also pass the unsafe allow to True okay
200:28 - and say all out to true for HTML so if
200:30 - you have over um let's go mark down here
200:33 - this will you can scroll down and see
200:37 - that the unsafe allow bullan by default
200:40 - any HTML tags found in body will be
200:43 - escaped and therefore treated as pure
200:45 - attack this Behavior may be turned off
200:47 - by setting this argument to true all
200:51 - right okay so it's hard to show you
200:54 - everything but we are inside of if in
200:56 - this case to make sure that we chat
200:59 - input for the user so I'm going to come
201:02 - down here go to that level I'm going to
201:04 - say else if none of this is actually
201:08 - happening that means we can
201:10 - prompt use users to start chat so we
201:15 - just say
201:16 - St and say write we can just write
201:20 - something and say please upload at least
201:24 - a file to get
201:27 - started by clicking on the
201:34 - button say on
201:38 - the
201:40 - start
201:43 - chat button and
201:45 - such all right there's a lot of things
201:48 - here but that's okay should be all good
201:51 - okay again remember you will have access
201:52 - to this code so it's not a big deal so
201:55 - essentially we are creating this chat
201:58 - and there's a lot of sessions going on
201:59 - here but that's important like I said
202:01 - because with streamlit you have to make
202:04 - sure that the sessions are all set up
202:07 - because streamlet whenever you click a
202:09 - button it refreshes the entire page and
202:12 - that means you start from scratch so you
202:13 - lose all the state so we want to make
202:15 - sure we have the state that's why we
202:17 - have all this state thing going on here
202:19 - want to learn more about that you can
202:21 - check out their documentations okay so
202:23 - we should have everything set up for us
202:27 - um let's see if this works let me go
202:30 - ahead
202:31 - and um make sure that we can say
202:35 - stream stream lit run and make sure
202:38 - we're running the main not the app that
202:41 - Pi or
202:44 - py in
202:46 - enter and you can see we have this very
202:48 - nice usern interface that was created
202:50 - which we can go ahead and use so for now
202:53 - let's see if this works I'm going to go
202:54 - to browse and then I'm going to go ahead
202:56 - and get the crypto currency again and
203:00 - there we go we have this cryptocurrency
203:02 - it's there now we're going to go ahead
203:03 - and say
203:05 - upload it's uploading and voila so that
203:08 - file was indeed uploaded file ID
203:12 - uploaded file ID is there very good so
203:15 - is it true if we go back to if we go to
203:18 - open Ai and let's go
203:21 - refresh and we can actually look at the
203:23 - files we should hopefully see
203:26 - cryptocurrency one of these files I
203:28 - added a little bit ago is going to show
203:30 - us exactly uh the the purpose status is
203:34 - ready and how the size of it and of
203:38 - course also the file ID okay we have two
203:41 - there but that's okay now let's go back
203:44 - to the application and let's start
203:47 - chatting so click Start chat and what's
203:50 - up I'm going to say tell me
203:56 - about data
203:59 - mining let's go ahead and see what's
204:01 - going to happen so voila you can see the
204:04 - weight generating response is working
204:06 - and then we have this all this was given
204:08 - to us uh by streamlet that's really if
204:11 - we had to build all of that ourselves
204:15 - that would be pretty um would take us a
204:17 - long time okay so now it's going to look
204:21 - at the cryptocurrency and look at it and
204:23 - make sure that it gets the information
204:26 - that it needs it appears that there may
204:29 - be some confusion around the term data
204:31 - mining it is it pertains to
204:32 - cryptocurrency which the uploaded files
204:35 - seem to disguise aha this is good
204:37 - because it's saying the uploaded files
204:39 - seems to disguise so he looking at those
204:41 - two files that one I uploaded before and
204:44 - that's okay usually you should probably
204:46 - just get one there uh but also it's
204:48 - probably from the previous upload that
204:50 - we did when we first ran this it's okay
204:53 - so in this case they're mining in the
204:55 - context of cryptocurrencies usually
204:57 - refers to the process of mining
204:59 - cryptocurrencies themselves and blah
205:01 - blah blah and there we go so uh we can
205:04 - say can you tell
205:07 - me how
205:09 - many crypto
205:16 - currencies are the are discussed are
205:19 - being
205:20 - discussed in the
205:23 - document hit enter and voila there we
205:29 - go okay there we go apologize in
205:32 - convenience but seems there is an issue
205:33 - accepting the content document title
205:36 - Cryptor PDF the page has had no contents
205:40 - uh when I tried to open it which means
205:41 - means I cannot determine how many C okay
205:43 - all right that's okay uh what I can do
205:45 - again remember this is still in beta
205:47 - sometimes happens so what I can do let
205:48 - me see if I can delete one of these
205:51 - perhaps maybe that's going to uh it
205:53 - shouldn't that shouldn't be a thing
205:55 - anyway but sometimes this happens and
205:59 - sometimes it does weird stuff so it's
206:01 - okay we're just going to try again maybe
206:03 - this time it will
206:06 - work okay so now it worked say based on
206:09 - the search results document mentions
206:11 - several cryptocurrencies including
206:13 - Bitcoin Litecoin I think that's what it
206:16 - called
206:17 - ether and potential others are not named
206:20 - explicitly and blah blah blah that's
206:22 - really good I can also ask now the other
206:25 - thing also I can go ahead and upload a
206:27 - different file or another file okay so
206:29 - I'm going to say upload oh shoot so this
206:32 - is a problem now that I uploaded I
206:34 - uploaded two files so if I refresh this
206:37 - this is exactly what I didn't want to do
206:40 - I should have
206:44 - this
206:45 - file just delete a few here and it's
206:48 - very strange because it
206:49 - shows all of these different files have
206:52 - been uploaded let me just delete some of
206:54 - them some of them says upload others
206:56 - says uploaded I'm not sure why but okay
207:00 - let's go ahead and delete some of them
207:01 - and go
207:04 - back go back here and I'm going to
207:06 - browse to go get yet another one so I
207:09 - have another one called lipids this is
207:11 - is a biology
207:13 - file and that's the one I'm going to go
207:15 - ahead and upload try again this
207:18 - sometimes doesn't work let me upload
207:20 - that
207:21 - one okay that file was uploaded and
207:25 - let's see if I can upload another one
207:28 - issue because we have that let's upload
207:29 - this
207:32 - one okay so now we have two files that
207:35 - were uploaded let's go back to opening I
207:38 - and I'm going to refresh
207:40 - here
207:42 - okay so we have a few files that were
207:44 - uploaded but one thing I can do I can go
207:46 - to assistant so I think this will be
207:47 - better and go
207:50 - here and I can see the files that were
207:53 - uploaded wow there's a lot of files that
207:54 - were uploaded so it looks like when you
207:57 - first upload something they change their
208:00 - names from upload first and then they
208:03 - the IDS are created I think that's
208:05 - what's happening I'm not sure it's very
208:06 - strange so it's a little bit buggy but
208:08 - it's okay so uh let's see if this works
208:10 - so now we're going to ahead and start
208:12 - chatting okay let's talk about because
208:15 - we have two files let me go ahead and
208:17 - talk about biology I'm going say what is
208:19 - a
208:24 - lipid okay so now it should be able to
208:27 - go and fetch the file in this case the
208:30 - lipid the biology file that has
208:33 - information about lipids and so forth
208:35 - hopefully all right this worked so
208:38 - lipids are biological molecules that
208:40 - have limited solubility in water and are
208:42 - soluble in nonpolar organic solvents
208:46 - okay so this is really good because it
208:48 - went and got the information from the
208:52 - document because we have even the source
208:54 - and everything here that is showing very
208:56 - good so I can also go back and ask about
209:00 - this case um
209:03 - cryptocurrency what is
209:10 - crypto
209:12 - okay so what comes here with four
209:14 - resources crypto such as Bitcoin litcoin
209:17 - and all this stuff and explains
209:19 - everything and very awesome okay so this
209:23 - is actually working which is very
209:25 - exciting now remember these are just
209:28 - examples that I assembled really to
209:32 - Showcase how to use assistance API and
209:35 - so that you can take this to the next
209:37 - level okay so this is no production code
209:39 - obviously for many reasons but at least
209:41 - gives you some ideas the other thing
209:43 - also to remember is that the assistance
209:45 - API is still in beta which means they're
209:48 - still working on it and maybe some apis
209:51 - will change by the time you're watching
209:52 - this but I hope you understand at least
209:55 - what's happening the basics of how
209:57 - assistance API work I give you a little
209:59 - bit the rundown of the vector store
210:02 - embedding so how things work in the
210:04 - background and how assistance API in so
210:06 - many ways allow us developers to really
210:09 - not think too much about what's in the
210:11 - background which is really exciting but
210:14 - also I need to let you know that with
210:16 - that we get a lot of some disadvantages
210:19 - meaning that we don't have a lot of
210:21 - control but with all of that flexibility
210:24 - all of that abstraction we also lose a
210:26 - few things one of the things you will
210:28 - notice even though assist is API it's
210:31 - most likely going to get keep getting
210:33 - better um it's important to also know
210:35 - that there are other tools that you can
210:38 - use that perhaps give you a little bit
210:40 - more flexibility ability but also that
210:41 - means that you have to do a little bit
210:42 - more work per se not too much uh there's
210:45 - this tool called Lang chain which I'm
210:48 - just going to let you know about it's a
210:50 - wonderful framework that allows you to
210:52 - really assemble many other many other
210:55 - models in this case many other large
210:57 - language models because there's not just
211:00 - um opening eye chat gbts and gpts there
211:02 - are many others as well for this
211:05 - framework you are able to actually see
211:07 - most of the things we talked about most
211:09 - of the things that open a I have
211:11 - abstracted things out for us which is a
211:13 - good thing but you're able to see or be
211:16 - able to do more in the backand in terms
211:18 - of choosing your own Vector stores
211:21 - indexing all your documents so the
211:24 - process that I showed you in the back
211:26 - end that's happening um you will
211:28 - actually be able to see more it becomes
211:31 - more apparent if I may say that all
211:33 - right so that is a different topic but
211:35 - just something to keep in mind and I
211:36 - hope this course has given you something
211:39 - at least to think about some good
211:41 - starting points when it comes to the
211:43 - assist and API and you can keep learning
211:46 - of course watching for the documentation
211:48 - because things will change that's just a
211:51 - known um fact and so but I hope this
211:54 - course was able to give you the tools
211:55 - that you need to at least start thinking
211:57 - about how to use the assistance API to
212:00 - build all sort of things and now we
212:02 - didn't touch on the on using the code
212:05 - interpreter as a tool directly really
212:09 - but that's something you can do as an
212:11 - exercise so you can create a bot or you
212:13 - can create a tool that will analyze code
212:16 - in fact I think we talked a little bit
212:18 - as an exercise earlier but now you have
212:20 - the tools you know stream lit or at
212:22 - least you have some ideas you can use
212:24 - that to create a code body something
212:26 - like this right or a uh pair programming
212:30 - buddy or something like that that will
212:31 - help you debug things and go from there
212:34 - right so a lot of things that you can do
212:36 - here a lot lot of things but I've just
212:38 - scratched the surface and I hope you
212:41 - enjoy this course I hope you like this
212:43 - style that I use to to teach this course
212:45 - and I hope this was useful thank you so
212:47 - much for your time and I'll see you
212:53 - next

Cleaned transcript:

welcome to this comprehensive course on open AIS assistance API which allows developers to build powerful AI assistance capable of performing a variety of tasks this course covers essential topics like integrating the API for advanced functionalities leveraging its knowledge retrieval and code interpretation capabilities and understanding the fundamentals of large language models through HandsOn projects with streamlet and real world examples you'll gain practical skills to build respon responsive AI enhanced applications by the end you'll be able to use the assistance API to transform your web apps into Dynamic smart platforms hello and welcome to this course my name is Paulo deson I am a software engineer so I teach people how to become software Engineers developers and build applications and I've also taught over 250,000 students on various skills from programming build apps AI as well as Cloud engineering so welcome to this course the next question is what is it that you're going to be learning in this course well in this course you're going to be learning about the assistant API essentially you're going to learn about functional calls you're going to learn about retrieval mechanisms and of course you're going to be building a lot of stuff going through this course because that is how I like to introduce certain Concepts to my students so that's part of the what you're going to be expecting in this course and of course I'll be talking about large language models embeddings and all these things that relate to AI specifically okay now let's talk about the prerequisites for this course so I expect you to at least have the basics of programming of course I don't expect to be an expert or anything as long as you have some fundamentals of programming be it on JavaScript or any other modernish programming language you should be fine going uh through this course and one thing to keep in mind is that unfortunately this is not a oneonone programming course I'm not going to teach you how to progam program rather I'll focus on the big picture idea of assistance API and large language models so we're going to be using python in this course so if you've never used python you don't even know what python is that's okay that's not the main thing here the main thing is that I want you to understand how this technology how assistance API and how large language models how AI based applications are built that is the main goal here so don't worry you'll be fine as long as you want to learn and you follow along what I'm going to be doing the other thing also remember that you'll have access to all of that code in the description below okay now let's go ahead and look into python setup and essentially the environment setup so that you can follow along in this course now keep in mind if you already have python set up on your machine and you have Visual Studio code or any other code editor that you use obviously you don't have to follow along because this is you have all that right so if you don't have that then I'm going to show you right now what you need to do what you need to install on your machine that way you able to follow along in this course now the best place I found online where you are able to go through tutorials on how to set up python specifically on your machine whether it's Windows Mac Linux and so forth is this link here uh which I'm going to show you right now let's go ahead and take a look all right so if you go to this link here which is kingstar docomo base install python this does everything that you will ever need or at least has all of the instructions you need to install python if you don't have python installed on your machine okay so just go ahead and follow exactly what they have here and they even tell you what is python which is kind of nice and all the things that you need okay so just follow along and the great thing is that you can go through these different links here so how to install python in Windows if you're on Windows click here that will take you to this setup and how to install python on mic OS that will take you through this whole all setup that you need to go through and of course if you're very special and are on Linux go ahead and click here and just follow the instruction so it's really straightforward I don't see any value in me going through all of this with you so go ahead and get that setup if you don't have python setup on your machine and we'll go from there so the next thing we will need is an IDE an integrated development environment I use Visual Studio code which is what I'm going to be using in this course so if you have something else that you use that's totally fine go with that but go ahead and download that if you don't have it so it's very simple going to go to visual studio code and depending on your machine for me I'm on Mac it just goes straight to download Mac universal you can click here and you can see that we have mac o universal window Linux and all of this okay so depending on your situation just go ahead and download the ver version the latest version of vs code and you should be ready to go okay now because of the nature of what we're going to be learning in this course which is open AI assistance API you will need to have an open AI account that is very important for obvious reasons and so particularly what you need to do is you need to go ahead and create in this case have an API key because that's what will allow us to use the assistance API and and various things we can do with open Ai apis and so forth so that is very important so let me show you real quick here so if you type in open.com as you see here make this a little bit larger you'll be able to say log in so click here if you don't have an open eye account you can go ahead and say sign up if you already have one you can just put your email and go ahead and sign in also you can go ahead and say continue with Google with Microsoft account or with Apple so I already have an account but in this case you can go ahead and sign up okay so I'm going to say continue with Google I think you can also go that route to create an account and gives you this opportunity here to choose between going to char or going to API we want to go to API and this is what's going to open so this is will take us to this main view here so there's a lot of things a lot of capabilities uh get started and all that what do we really want to go to is to go to assistance API which actually we're going to do that later but what we want right now is to go to API keys so click here on API Keys you can see that I have one API key which I created a little bit ago so go ahead and say create an API key and you can name this assist API Das key you can name whatever you want and that API key click there to create this API key and then what you need to do is copy this API Key by clicking here and save this API key for later in this course once we get started coding into all these things so it's very important to not to share this with anyone in fact after I've created this I'm going to delete this so that way you can't use it okay so save it in a very safe place that way you don't lose it okay make sure that once you close that window just like I said there's no other way for you to access it to get it again so that was that's why I wanted you to save it okay but you can create as many secret keys as you need so if you for some reason didn't copy that you can go ahead and create a new one and go from there so that should be it about setting up your API environment understanding what we're going to be doing in this course as well as having your API Keys set up or created for us to be able to use that in this course okay so now let's go ahead and look at what is this thing called assistance API the assistance API is a tool built by the opening I folks that allows developers to easily craft and build AI based applications that Leverage The Open AI environment the open AI platform per se so the thing to understand about the assistance API is that it's not its own entity per se although it is but it is attached or extends in this case what we know the open AI API which includes all of the tools and models that power chbt and many other underlining infrastructure of the open AI environment so that is the important distinction here is that when we talk about the assistance API it extends what already is there in this case the open AI API and so it makes it easier for us to build AI Tools in this case AI assistance that we can use in our applications so essentially allows us gives us this platform this framework this libraries to quickly use these tools to build any application AI based application that we would want to build without having to know too much about the underlining obstruction of how things actually work so essentially we can go ahead and create an assistant and use the API so that we can connect that assistant in our application and use that assistant that has the capability of connecting with the open AI apis essentially now the next thing we need to look at is for this assistance API what is the problem that it solves now the thing to understand is that building applications in general later alone building AI based applications uh it's a very hard task for developers because it's very complex there are usually a lot of moving parts that a developer needs to focus on developers need to manage in this case certain infrastructures they need to keep in mind how the data is being used Which models are needed to use in this case to power their applications they have to learn how to craft the best prompts possible in order to communicate with this large language model and they also need to understand or keep track of the application State understand about embeddings which is something totally different but it's part of this realm of AI and large language models and understand the storage mechanism right how do we upload files how does the large language model use those files to allow us to tap into the main knowledge but also those files retrieval those files knowledge but also retrieve information from those files and so many things right so this is not easy it's a very complex thing to carry as a developer this poses a problem for developers because now developers instead of focusing on building the actual application now they're focusing on how to stitch all these pieces together to make this work so the benefit of using the assistance API is that is that all of this complexity all of these things that developers need to know know or to deal with it's abstracted out which means they don't have to deal with it anymore because now the assistance API the back end of everything is taken care of all we need to do as developers now is to focus on what matter which is build Our obligation so the assistance API already has all the things that we need as developers but we don't need to think about them because it abstracts out all of that work so one thing to keep in mind is that when we talk about large language models is that they by themselves they don't have state which means they don't save a context of a conversation per se now with the assistance API we don't have the problem because there is this thing called persistent threading for ongoing conversation what this means is now we're able to save messages and the context of that messages that way let's say if you're creating a bot um you don't have to yourself save that context so that then when you ask a certain question that the bot needs to know about the previous conversation the bot will actually know what it's referring to because it has a context okay that's huge because now we don't have to worry about that the assistance API has that built in and also we have the retrieval mechanisms for digging through data so what this means is that we can upload files for the models to use for additional knowledge base so you can upload files about something let's say about cryptocurrency so now that piece of knowledge is added to the main base knowledge right that comes with the large language model that way you can converse with the large language model in addition to the knowledge that we just added by uploading certain files documents and so forth so now we have a more flexible and more knowledgeable if I may say large language model because we are aiding it with retrieval mechanisms it also has code interpreters so it actually writes can analyze code and do all sort of things which is amazing as you will see okay one of the biggest things that we now get with assistance API is that we can actually do function calling what that means is that when our assistant is solving a problem we ask a question the assistant will be able to call a function that we specify that will be used as a tool to go and fetch certain data that that the large language model needs to solve a certain problem and that is huge because now in addition to uploading file for retrieval mechanisms and so forth we can also add more tools by adding these functions that go serve as agents that can go and do something else and bring back the results which are going to be used by the large language model in this case the open AI apat per se or the assistant right to solve the problem or to answer accurately what you are asking it for that's pretty awesome mindblowing let me show you the diagram here real quick so you can see visually the assistant API benefits so if you look at this diagram here right the assistants can go ahead and call the openi models right to uh tune their personality in this case their capabilities also these assistants can also access multiple tools and parallel so now it's sort of having these agents that can go and do stuff and bring back the results so that we can help the assistant to be a better assistance right so in this case here these are tools the tools that we have here we talked about the code and code interpreter we have the knowledge retrieval right files and documents we can pass upload so that our assistant is more knowledgeable about certain topic as well function calling now the great thing about function calling is that we can create it's a way for us to create our own tools on top of the tools that the assistant already has access to such as the code interpreter knowledge retrieval and so forth so now with this we can create our own tools right our own functions that go for instance and fetch the current situation in Bulgaria or go and fetch go and fetch some sort of data in the database somewhere you get the idea and along with everything that I said we have these persistent threads the threads we'll talk about in a second here allows us to have these messages that we are saving or are being saved in our conversation and so those are saved for context which is H huge because remember all large language models they don't have a concept of saving history per se so they're stateless so they don't have a way of saving the context which is problematic when we want to refer to a certain concept that was talked about if they don't not they're not saving that history then it wouldn't know what you're referring to so context is very important and that is all given with the assistance API okay and of course we can access files in several formats but this is diagram I wanted to show you about the benefits of the assistance API now most like of course you've heard of the chat completion API which is the one that you've been using if you were using the open AI API right so you just send messages and you receive response and it's very useful because the completion API it goes straight to the open AI models and ask questions and the large language models and of course the knowledge base but the thing here is that this knowledge base is knowledge base that is already there there's no addition meaning if you were to ask certain questions about something that was done or happened after September 20 after September 2023 I believe right anything that was done after that then the large this large language model here wouldn't have that knowledge base so it would just say I don't know because the completion API is just a way for us to get direct response okay that is the difference here between the chat completion API which is useful with the assistance API gu as I have discussed earlier okay so let's look at this General comparison uh so we can see the differences between the assistance API and the chat completions API okay this just to have some sort of an idea an overall idea so you can see here the aspect column and the assistance API the chat completion API so for assistance API initial setup you have to create an assistant with Define capabilities which we'll see in a little bit for chat completion of course there's there's nothing for you to set up you just call the API and get the results the answers and so forth for the assistance API we have to initiate and manage in this case a thread for ongoing conversation we'll talk about what a threat is and all that stuff in a little bit and for the chat completion of course we have none of that so this is just to show you the differences between the assistance API and the chat completions API and you can go down here to complexity so more complex setup of course for the assistance API and it's simpler of course for the Chad completions API okay so no need to memorize this this is just something you can take a screenshot of and then go ahead and you know just take a look to see the differences between the assistance API and the chat completions API okay and there you have it all right so we just finished looking at the benefits of the assistance API and how it works and how it facilitates our lives as developers so that we can focus on actually building those AI based tools right instead of worrying about the underlying infrastructure things that we would have to do if we didn't have assistance so now let's look at the assistance API the building blocks because we talked a lot about the underlining infrastructure how it works to benefits let's go ahead and look inside and see what are the building blocks of an assistant all right so here is a diagram I like having diagrams because it hopefully helps you conceptualize these ideas the assistance API has about four main building blocks so so first you see that we can have in this case an assistant so the assistant itself is in this case The Entity the thing per se that we actually build which will then use to help us get information about certain topic and so in this case here we could have an example an assistant who is a travel agent bot that we can use so that is the first component and the second component of second building block is what we call threads a thread is where all of the messages that occur between the assistant and the user because that is the whole idea all those messages are tracked here in the thread so in this case here a users may have a message and say hey what is the cost for an extra day in Paris okay so that is a message that is going to be on a thread which the assistant will have access to as well as the user and then the assistance message would be the cost is 12,890 for instance right but then you will ask okay okay there is the assistant's message but how does the assistant know well the whole process has to go through the other piece here the other building block which is the Run entity so the Run entity needs to have a few things for it to be able to run those queries those questions essentially evaluate what's going on so there is this dialogue per se that is happening so in this case here the run as you can see here we have has to have access to the assist in this case you will see later it's just going to be an ID and also has to be have access or has to have a reference to the thread because that's where all the messages are so in this case here the assistant is going to be our travel agent bot and the thread is trip to Paris for instance and then inside of this run the Run can be triggered to then run different steps to get to that conclusion to get to the result what would happen is if you look at all of this we have in this case the assistant the number one building block we have thread that is the number two building block inside of the thread that's we have the message so messages or message that's the number three building block and number four is the actual run entity okay and so how would all this work well we have the assistance and inside of the assistant we have and then we have the thread we have a message from the user what is the cost for an extra day in Paris that is going to be sent to run which will have the assistant ID as well as the thread ID because it needs to know where to pull those messages that are coming in from right and then it's going to go through a process steps number one use code interpreter if that's what needed to calculate things and then is going to go ahead and create a message and if need B this is the beauty is going to be able to go and call any other tool that may be needed in order to get the correct response and the response is going to be as a message which is going to be returned back again to our thread does it make sense so the thread is where all the action really is being dumped into the history per se right and there we go and now the thread will have the assistance message because all the steps are done we have the response and goes back as a message assistance message which then we can use that to show in our application these are the assistance API building blocks that's very important here because it can be a little bit tricky at first to really conceptualize the idea the assistant itself needs thread a thread that's where all the messages go just think of a bucket of messages right and then the entity run here this is where the running of things to go and fetch things go through the steps this is where it happened the Run needs to have reference to the assistant because needs to know who is this assistant because remember the assistant will have all of the specifications that it needs so it knows what it specializes in in this case is a travel agent bot so the Run needs to have a piece in this case reference to these assistant so when it goes and starts running the steps it knows what knowledge base it needs as well as other tools to indeed create those message back so the assistance messages are all here so that we can then use those messages to show in our applications so forth all right so very simple but can be complex to wrap your head around understand and conceptualize these building blocks then what's coming next is not going to be too complicated okay so rewatch this part if you need to but I think you should be good so what we'll do next is we're going to go in the dashboard in the playground and look at create creating an assistant manually and later of course we're going to do that using Code okay let's go ahead and do that so now let's go and log in into the open AI dashboard so you should have an account and everything now when you log in this is more or less what you're going to be seeing so what we want to do is you want to hover over here if you don't see that so you click here this is what you're going to be seeing going to hover over and we're going to go to assistance but this is where we need to go so click here and sometimes takes some time looks like uh incorrect let's go ahead and refresh this okay there we go so today we've been having some issues but just refresh if you're having some issues okay so once you here let's go ahead and create our first assistant so we can go ahead and say create here or from here doesn't matter going and create and first thing we need to do is to add a name so let's say this is going to be personal trainer as such and then we need to pass or add the instructions so because it's an assistance we need to say okay you are X Y and Z you're knowledgeable in this area and so forth okay I have the instructions here so I'm just going to paste it in here and I'm going to click here to make it a little bit larger so this says you are the best personal trainer and nutritionist who knows how to get clients to build lean muscles you've trained High Caliber athletes and movie stars because that is exact what we are all are striving to be okay so there we go so these are the instructions of course you will want to put as many instructions as a prompt really as you need for your assistance so if specify exactly what you want your assistance to help you with okay I'm going to go back and next we're going to choose the model right openi model that we're going to be using there are a few and as a recording of this video we have gpg for preview and of course these numbers will change depending on when you're going to be watching this video okay but just imagine just remember that the concepts of how this worked that's what really matters instead of things that may change here okay so I'm just going to go ahead and use the jpt 3.5 turo that should be fine for now and it's a little bit cheaper as well so I'm going to you are more you are more than welcome to go to the higher so I'm going to just use that one really that's fine and then we have the tools we talked about the tools so these allow us to attach certain things that they we want this assistance to be able to do if it doesn't already have those tools right so we have here retrieval we have the code interpreter and we can add functions as well okay so we don't need anything I'm just going to go ahead and toggle the code interpreter just because why not okay and anything else we can just live as is and I'm going to say save as such so now the assistant was created and if I get rid of this and get rid of that and we can see that we do have our personal trainer so there is the instructions and the ID so this is very important because remember the diagram I was showing you earlier was that um when things start running when we have that fourth component or building block which is the run it needs to know this personal trainer or in this case the assistant so this is an ID that will be used internally later we're going to be able to generate or create a system using Code which I'm going to show you but I just want to give you an overview right now so very important these IDs are going to be used and from here you can see we can go and say test so if you click here this will open a different tab as you see here and then you can test it out to see if this actually works for instance you can enter a message remember this is the message in this case will be the user message if I show you exactly these assistance API building blocks this is where we've set up so we have the assistant which is in this case we said it's travel agent bot but in this case is our trainer personal trainer and we have thread which we haven't created yet hasn't been created but we will create all of this is going to be created in the back end once we start running things and then we have the messages which is now a user message is exactly what we pass here okay so say I want to build muscles what foods should I eat I'm going to go and say run haha run what you think it's supposed to do well what's going to happen now when we run first of all that message the moment we say run the message will be added to thread Aha and you can see it even says thread here right so the thread right now is empty if I say run it's going to go ahead and add that message and the instructions is showing here and the there's a lot of things that happening here so let me go ahead and go through everything I'm going to just make this probably can't make that smaller that's okay and one thing you see here this is the thread and each thread that is created because it is indeed a simple message right and each thread that is created has also an ID this will make sense later so you can see here um we have all the information so the thread is where all the messages are going to be in from this case our user the question that we ask as well as when we run and come back we should have the personal trainer the message as well just like what I showed you here this run went ahead and pulled in the assistant ID internally and then the thread ID internally and then went through the steps and sped out the assistance message which now we can see here is the message right this is the assistant say personal trainer that's the name of our assistant and says to build muscles lean muscles that is it's important to focus on balanced diet that includes blah blah blah protein rich foods whole grains fruits and vegetables healthy fats dairy products and all this great stuff and even gives us a little recommendation here and note it's important to consult with healthc care professional and all that great stuff very cool this is what's happening right essentially goes back to what I showed you earlier going back here you can also see that we have logs now this is really cool because it allows us to look at exactly what happens so you can see here we can hide the logs we don't want to hide the logs right now because I want to show you something so for our logs here look at what happened the moment we said run what happens that a thread was created indeed because we need a thread where all the messages are going to be in just like again aha what I showed you here okay okayy this is this is good okay so if we open here you can see exactly what happens so the thread was created and it we have a response which is indeed the thread ID and this ID here is exactly the same as this this is the thread ID that was created okay and we have other some other metadata that's okay and then we added a message to that thread the message was the one that we wrote here in fact you can see all that happens here on the thread visually it is what being shown here as a log but I want you to understand this so you know where things are in case when things don't work you understand where to find things okay so we have our add message here the message was added the role is user because I am a user in this case because I enter the message here right so going back it is this message here which is going to be sent to run very good so that happens let me go ahead and close this we added message and then we run the thread right it just did a post request aha it has to have the assistant ID why did I tell you because if you look at this diagram here first it said assistant the name but internally it has to have the actual ID as well as the thread ID which is exactly what's happening in the back end if I close this thread here let's see you can see that has the response and the response each response has of course an ID the object is run and when it was created the assistant ID as well as the thread ID voila and all of this other metadata as well as the model that was used the instructions all of that was sent along in the response okay in the thread and then of course get runs status because when we hit run when hit run what happens at the back end things are happening meaning these steps are going to go do you see maybe it has to use the code interpreter create a message and do all these other things it's not until all these steps are done which means an answer a message in this case an answer from our run okay the our assistant in this case uh it's not until then once that is done that the message is actually created and sent back so all of that is happening here all right this is the log and run step let's see what happens first it has this object here this data if I open this data here and keep opening it has the ID the object right these are the steps right in fact that's that's ex that's exactly what I'm showing you there's the status and this is the steps going through the whole process of creating crafting this message for the assistant message which is going to be sent and then we can see the results all right let's continue so you can see it has a Json here response it comes in as list an object list and we have the data field which has an ID the object thread step a run step when was created and all the great stuff and continue the other step and as many steps as possible and then the status run status to tell us whether the running is over everything is set up now we have the response the message which can be passed back to the assistant right so that we can then see let's see continue completed you can see here that the status now is completed which mean all is good we should have a formulated uh message okay if I go to tools you can see what tools were used code interpreter right in this case even though it wasn't really needed but it's okay and then get runs you can see now it returns data which has an ID has an object and the status and everything and then we go to the message response now comes in as object list and data there and you can see now we have the ID the thread message okay the first one there and then this is for the assistant aha if you open here you will see that assistant will should have let me click here to open aha there we go and there we go we have the the actual value which is exactly this what we see here says to build muscles all in muscles all of that information which weed back so the assistant in this case went through this whole process that I showed you earlier and the return the assistant message in this case back to our thread which then we can see in this case we're able to see that the information the message is here so this is a very good representation of the assistance in all the building blocks but this is real cool the log is because it sees we can actually see all the whole process of what's happening so we understand exactly what's happening so it's not this Mystery Box per se uh what you've learned here is that to create an assistant here manually you have to easily just go to the assistant API or playground ideas and just hit create and you have to pass the name of your assistant as well as the instructions right so specify what do you want your assistant to be good at or to what knowledge these assistants has to have right what they're going to help you with and then of course that will generate the ID as you see here and of course as you create a assistance you have to of course as you as I showed you you have to make sure that you attach the right model and the tools that you want to attach to so what I want you to do is to create for instance a code assistant okay so essentially uh come up with instructions for for an assistant that can help you with code issues right you can say you are a very helpful Java developer assistant blah blah blah you're knowledgeable about the basic of java intermediate and advanced and so you help developers to do pair programming whatever it is so that and test it out and see if it works and make sure because it's code based make sure of course in this case you really would need to have this code interpreter because then you can paste in as a message a user message a pie of code and ask the assistant if this code will compile if there's something you can do they can do to improve it and so forth so you have some ideas on how this works okay do that and save changes and create the assistant and then test it out and see if it works all right go ahead and do that and I'll see you next all right so now we're going to actually do the same thing we did before but in code which is very exciting the first thing we need to do is let's go back to our playground here assistance playground login and everything and I hope you were able to do that little exercise earlier if not well what can I say all right so what we'll do here is we're going to do the same thing but we're going to be using code right so I'm going to go ahead and delete this yes I know it's very sad but it got to go okay now it's empty so we're going to do all that using Code so you should have Visual Studio code installed or any other rde that you may use that's fine and it should also have python everything set up so everything should be good right so what I'm going to do here is I'm going to create a new folder for our project so personal trainer as such going to CD to our personal should be personal but Persona that's fine too okay so it's empty there so I'm going to say I'm going to say code to open this exact here just going to going to close that one and then there we go so we don't have much going on here so I'm going to go ahead and create a new file let's call this main.py there we go and also I'm going to go ahead and create in this case requirements.txt requirements txt such this is where we're going to put all of our dependencies and libraries that we need for our Python and for our project I should say and next what I'm going to do let's go ahead and create create a file this is going to be our environment variable file so EnV this is where we're going to put our environment variable so the idea is we're going to have our open AI environment variable let me close this down like that and we're going to put your open AI key remember that key that I showed you earlier so essentially you're going to come here and go to API keys and if you don't have an API key go ahead and create one just like I showed earlier and take that key and that's what we're going to put inside this here okay so go ahead and do that and for requirements here I'm actually going to pass in a few ones I'm going to say python. EnV and I also need open AI package like that very good so that's inside of our requirements.txt I'm going to create another file here called thatg ignore so that's for me to hide a few things once I push this to the repository GitHub repository so that you don't have things that you don't need okay so in this case here I'm going to make sure that our git it's going to bypass the environmental variable file so that it's not pushed I'm going to create a python environment that way we can run pip install to install everything in this environment specific for this project to do so uh remember I'm on Mac here here Python 3 and then it's going to be I'm going to say Das m v andv as such and then the name of the environment so I'm going to just say my EnV like that and what will happen now is just going to go ahead and create I'm going to say yes because you notice a new environment has been created say yes going to use that and you will see now we have this my EnV uh with binaries include libraries and everything this is our python environment that we can use then to activate so to activate it I'm going to say Source my EnV and then I'm going to go to Binary and then activate hit enter you can see now my EnV is environment is activate so that's really good which means then I can say pip install d r and pass the requirements that text which has all of these dependencies or or packages or libraries that we need so I'm going to hit enter so he's going to go ahead ahead and get all that information for us okay so all the packages have been downloaded that's really good let me just clear all out of this and then now if you look at my M of course I'm going to go to binaries you can see that we have Envy we have opening I which is exactly what we added very good so we should have everything set up now I'm going to get rid of this so let's go ahead and do some importing here so I'm going to import open AI library and I'm going to set up the m so that we are able to get the environment variables and do all the great stuff so I have all that information here just going to copy that and paste in here okay important findm load an M Fromm package all right and I'm going to call this load M there so that it all set up and then I'm going to create a client here which I'm going to be using the client is going to be open ai. open AI as such okay and now now with this client we're going to be able to call the openi API assistant and anything else that we want because we have created that now you could have also done something like this open AI right and then say API key and then go to os. environment. get and pass the open AI key which is the key in this case the value that we put inside of our environment variable okay so that's another way to do that but since I'm loading all the environment variable this to work just say client open ey. open Ai and also if you want you can pass the open AI key directly from here but it seems to work just like this uh because it gets all the environment varable if not just go ahead and add the openi key directly here or just like what I showed you uh let me just do that again I'm going to put it here I'm going to leave it there all like that okay whatever works for you go ahead and do that or the other way too I'm going to put it all here there's another way you could have done said client open AI just like I said pass the API key and go ahead into the custom environment variable if you change the names okay but if you are using open AI _ aior key then this should just work as it is all right I'm going to leave that there just in case you need that all right very good so next what I'm going to do let's go ahead and say model this is just a variable that we're going to be using and the model we're going to be using it's going to be gpt3 for turbo and I'm going to put it here for now okay now we may change this you may want to use GPT for preview depending on situations but so far so good okay so now that we have everything set up let's see how can we create in this case a an assistant right in this case we're going to create the trainer the personal trainer assistance very simple all we do I'm going to just put here all we do really is just say the assistant I'm going say personal and then I'm going to use our client right which is which has instantiated our open AI there and say client and it's going to go to Beta remember that because as a recording of this video the assistance API it's actually in beta which means they're still working on it and so maybe by the time you watch this video you watch this course maybe this you won't need to say beta which will be great so just keep that in mind for now we just have to go to Beta and then we go to assistance and once we get to assistance we go ahead and say create very conveniently and then we can pass certain parameters here okay so what parameters do we pass here well first of all we need to pass the name that we want to name our personal assistant in this case I'm going to call this personal trainer as such and then we pass instructions which are very very important as you remember and I'm going to pass the instructions here real quick so these are the same instructions that we used before so you are the best personal trainer nutritionist and you've trained High Caliber athletes and movie stars okay there we go we have all of that information let me get rid of that don't know where that came from there we go all right and the next thing we need to pass here is the actual model because we need to remember this is the same thing we've done uh manually so now we are passing the model that we're going to be using or the assistant it's going to be relying on and it's going to be the model that we pass here just put in this variable so it's easier to change in one place so just like that we created our assistant and can go ahead and say print in this case I'm going to say personal trainer. ID right this will give us the actual ID of this personal trainer assistant that we just created okay and I'm going to go and comment that out for now the next thing we need to do is to create yes the thread because this is where all of the messages as you know uh will be so to create a thread again you see that's very easy I'm going to say thread and use client again beta and I'm going to go ahead and say threads and. create again for our thread we need to pass a few thing now the cool thing here is that for our thread we passed messages which is going to be a list so this messages here I'm going to pass an object in this case going to start with the role okay and the role is going to be user and for the user in this case the content is going to be what well I'm going to just put something I'm going to say how do I get started working out to lose fat and build muscles something like this so this will be the first message it's going to be sent for as the user okay we could have created a thread with no message at all and then add those messages later but we can go ahead and add a message a user message right away as well okay I'm going to go ahead and print actually let's call This Thread ID and get that thread ID so just thread. ID okay because those are needed and I can go ahead and print thread ID let's say so we see and I can do the same thing here assistant ID and personal. ID like that and then here I can just go ahead and when we need just going to go like that very good so now that we have these two things what will happen now if we run this well we are going to be able to create an assistant right and also in this case create a threat and get those IDs which you will see in a second here so let's go ahead and run this real quick and see if this work all right so I know my environment is active so I'm going to say Python 3 so make sure on Windows I think it's just Python and I'm going to say main that py and let's go ahead and make sure everything is good I think let's go run voila and you can see that we have our assistant ID because we want to create that assistant ID we created here personal trainer and we're printing it out and we also have the thread let's see if this is correct because as you saw we deleted everything in our back end in our playground and now if we go back let's see let's go to our assistants we should see our personal trainer assistant which was created just now all right and this ID 7 yt5 you can see 7 yt5 that is exactly what we have here you can see we have that personal uh trainer name instructions and the model that we're using that's what we specified and so forth and internally we do have a thread which is this thread here that is ready to be used which will have a message so now this is not working we're not seeing anything right now but it's okay because we're going to be using that okay so we have our assistant and we have a thread where all the messages are going to be in and so going back to code here we understand that if we were to run this again that would kind of deit the purpose because we have the assistant created already it would go ahead and create yet another assistant which is not what we want and this is the reason why in this case here we were able to get those in this case here you can see we have the assistant ID as well the thread ID which we're going to be using to proceed uh creating and conversing in this case with our assistant so what I'm going to do here I'm copy these two real quick and I'm going to just go ahead and hardcode our IDs so that we can use them okay so I'm going to do like that so this is going to be assist put that into variables that we can actually use okay let's not give spaces so we don't want into issues so now that we have that we can go ahead and comment all of this out here okay I'm going to leave this as is so we don't need to you will have access to all this code anyway so now we have what we need so in this case the assistant ID when we use that it's going to be um created right in this case it's going we're going to be referenced that in fact I'm going to move all of this uh to the bottom here because we already have all of that so I'm going to also comment this out because we don't need that anywhere so now we have the information that we need which is the thread ID and the assistant ID because they have been created as you saw in the back end okay so we'll do next is we're going to go go ahead and create the actual message another message here so we can start conversing with our API assistance API say create a message so I'm going to say message going to set that to uh let's say say what are the best exercises for lean muscles and getting strong that's our message we're going to then add to the thread to add to the thread well I'm just going to say message again and I'm going to say client that better and threads and I'm going to go to messages right and then create in this case a message and for the message well in this case here the thread will need we need to pass the thread ID which is going to going to be the thread ID and we need to pass the role which is going to be the user role right because we are conversing we are asking a question to them and then the content in this case is going to be the message which we created at the top here and next we are going to then run the thread or in this case run the assistant how do we do that well we need to create that entity first to run our assistant and to do so I'm going to say run and then I'm going to use client again beta threads that runs right that create so we need to create that runs entity which is attached to the thread and you can see the beauty here because we said earlier that run needs to know the assistant ID that's why we kept it as well as the thread ID so that they can get message and added that back to that thread so in this case I'm going to pass the thread ID it's going to be thread ID and the assistant ID it's going to be the assistant ID and in this case instructions we need to pass the instructions for our run okay so in this case I just going to say please address the user as James Bond and there we go so now we have our run here now we have to remember that our run has to go through different steps it could go and find a tool that needs to be able to assist the user well right to create to give the assistant more power things that he needs to do right go through all the steps that we saw before uh you may need to then formulate of course that message back right it's going to be the assistant message with the result that the user would want to receive okay so that takes time because it's a process so what I'll do here is I'm going to put together a helper function that will help help us deal with the waiting the stepping that the Run has to do before it gets to the result right the message is written back the response Etc okay so for the sake of time here I do have this wait for run completion so essentially we're passing the client and passing the third ID run ID and then sleep interval is going to be five now for this to work I'm going to have to import a few other things here real quick so because it's going to calculate in this case the time the starting time and all of that to give that elapsed time so I'm going to just go ahead and paste in the time logging and daytime from daytime okay so these are the packages that we need so essentially what this is doing here is we're going to wait so while true we're going to try we're going to go ahead and uh say client threads retrieve in this case we're going to pass the thread ID and the Run ID and then it's going to check if run completed at and it's going to go through and get the laps time we're going to get that and we're going to subtract so do all the calculation just to tell us how long this whole process took it's not necessary but it's fun to know and then we're going to print run completed at the elapsed formatted elaps time and we're going to log that okay but most importantly this is where we're actually going to get the message messages that is once the run is completed because that's where also the message that we need the assistant is going to be spitting out sent to us that's it's going to be because all that is going to be put back into the thread okay so what we do here is we go through our threads again remember threads that's where all the messages are the user's messages as well as the assistant messages live we're going to go through that because it's a list and then we need to pass the thread ID so we can get those messages that's very important because you could have multiple threads going right but on the same assistant so it's important to understand that we need to pass the actual ual thread ID so that we know we're looking at the right bucket in this case where all the messages are so we can repreve all those messages and then we're going to get the last message okay that is there because that's going to be our response in this case and then we're going to go to the text and get the value okay this is how we get the response so the response here is going to go to last which is the messages go to content and then the text and the value and we're going to retrieve that and now here this is where I'm going to actually run by just calling the waight for completion and pass what needs to be passed which is the client I'm going to call client okay I could have just because the names are the same I could just pass client but let's just say client like this and then I'm going to pass the thread ID it's going to be thread ID I'm need to pass what else uh it says thread ID run ID so run ID in this case how do we get the Run ID well we know that we have a run here which is being passed along right so we're going to pass that run. ID so I'm going to say run. ID so we get that for this to work and there we have it so when we run this we should see some sort of result let's see if this works I'm going to go ahead and open here and let's say Python 3 main that Pi in your case if your windows it's got to be something else let's run if all goes well it will take a little bit because it's thinking and we should see once all is done we should see some results all right there we go now we have a result so if you go up here we can see the Run completed in what would be 24 seconds right and then the assistant response well James Bond aha because we told it to refer as as James Bond uh when it comes to getting lean and all that stuff it's essential to focus on a combination of resistance training and cardiovascular exercises there's squats deadlifts bench press pullups chain UPS lunges planks and all of that great stuff so we got the response so you can see that this indeed works right and the other thing you can do also here is we noticed earlier that whenever we run something let's go to test here you can see that we have have logs so we can actually go and look at all the logs if you want to in code to do so I'm going to in fact it's going to be the steps right of whatever it's happening all the steps when we say run the steps goes through so I can do that as well real quick here to do so I'm going to say run steps putting a variable and I'm going to use client better again threads and runs and steps look at that and then in this case it's going to come in as a list so I'm going to say that list and I'm need to pass again you guess it the thread ID because it needs to know where I'm getting the steps from or for in this case and the Run ID which is going to be run. ID okay and remember this run here it is what we created earlier here very very important all right so what I can do now is I'm going to change the message here that the user and I can say how much water should I drink in a day to get healthier okay there we go so let's go back and open our terminal and I'm going to run this again okay so there we go we have a result here took took about 15 seconds and to maintain a good health James Bond it's generally recommended to to aim for intake of eight glasses roughly 2 lit of water per day however this is General guideline blah blah blah and all that informations very very good ah look at this stay hydrated 007 prioritize your health and wellbeing very cool very cool indeed so this is very exciting notice here that now we have this power of creating different assistance apis right and create threads and different threads actually even within that one assistant API and we can have all this conversation and get response so you can see how easy this is and um this is a very simple example and later I'm going to show you how to create an actual bot or a how to create a bot a chat bot where you can go ahead and start chatting and then the assistant will will respond and you can get information that way as well which is really interesting and now you can see the advantages here right the advantages that not only are are we just going to come here in the playground and create assistance and having to interact with it here we can obviously but that's not scalable right because we want to build application that will leverage this assistance API and this what we're doing here is indeed what it's the leverage that we're given by the assistance API because now we can use the API the actual assist API to create uh in code and attach this to a website or any application that we may be building ourselves and then we can also go steps and look at all the steps right in fact oh I did not there we go so I didn't I didn't print the steps let's go ahead and print the steps oh you probably saw that and I'm going to put inside of F string here I'm going to say steps and say run steps and that data that's how you get to the steps data and and then it's a list okay and voila okay let's go ahead and run this again of course I didn't do what I wanted to do because I didn't print it out but that's okay let's give a new message how many reps do I need to do to build lean muscles okay let's see if this works and run again all right and you can see uh we we know of course this works but what I want to show you is that we can see these steps look at this object here they got ID step ID the assistant ID and all this information but most importantly it also has all the things that were that happened so step details this message creation details let's just print that as an object itself just the data and let's see if we can get more okay so you can see we have thread the Run steps and all other this metadata and when it was completed the assistant IDs and all this other information here that was generated type message creation and voila now I really hope that you're seeing the whole value the whole um leverage that we get with this okay so go ahead and play around this concept of course as always thank you so much and I'll see you next okay so we making real good progress here so now what we'll do is we're going to create yet another very awesome application here called the current news summarizer assist so essentially it's going to be a summarizer a new summarizer that will allow us to learn a few new things what we're going to be using in this case is going to be the function calling tool now if we go back to what we saw before when we talked about the assistance API in the beginning we noticed that we have the assistance API which Taps into API models and then in this case it calls with specific instructions to the open I model and also can access multiple Tools in parallel which is amazing because in this tool list we can have different things different tools right so we can have code interpreter can have knowledge retrieval which we'll see later but the cool thing also but the amazing thing is that we also have access to function calling which is great because it sort of gives us wings per se which allows us to create our own tools right meaning we can create functions that will go be able to fetch data somewhere or do something and then retrieve that information and push it back to the large language model in this case openi models and the assistants can then do what it needs to do so this is the part that we are going to be look into um in these upcoming lessons let's go ahead and take a look at what are we're going to be building this summarizer application at least a little demo so you understand what's going on all right so this is the app it's called news summarizer so so essentially this will allow you to enter any topic I could say for instance vaccine and then I can run the assistant so what will happen here in the back end it's going to go and tap into a function a call a function calling a function that was created which is going to be called by assistant and that function is actually going to get an API a news API pull the news that have this topic vaccine and then summarize everything for us and as you can see we have here here are some news articles on the topic of vaccines and then we have this other headline here and great thing is that we also can click here to go to see more of those news about whatever is that is being talked about so it's very cool and so it gives you some sort of a summary and at the end of course I added his run steps which just logs out the uh run Steps From the assistant as we've seen before okay it's very cool so this is exactly what we're going to be building I can also enter another topic here let's say Bitcoin why not and it's going to go ahead and run this is actually a streamlit application which I'll show you uh how to put together it's very simple if you've never heard of or never even done anything with stream late it's very cool okay so it's running as you can see here and it takes a bit of course because it's pulling all that information calling that function and then retrieving that information and then pull it back to the AI okay so there we go we have here here are some articles on the topic Bitcoin it tells us exactly what's going on give some descriptions so this is what we're going to be building and let's go ahead and get started so we need to go ahead and get an API key in order for us to be able to get this application going so let's go to newsapi.org as you see here this is where you are going to go ahead to either log in if you already have a log in or go ahead and say get API from here here or from down here but if you want to learn a little bit more about what it's happening here it's a very simple articles or news API that allows you to fetch data for instance if you add a topic such as Tesla as you can see here in this URL then you get something like this so a Json that allows us to go in probing and get information pertaining to that topic so which is exactly what we want in this application so it's very simple go ahead and say get API and the thing you need to do is to register for to in order for you to get an API so you put your first name your last name and then choose a password make sure you are if you are an individual or a business I'll just go with an individual I think that's the easiest and of course you have the capture here agree and submit so I'm not going to do that because I already have that API so once you have the API of course as we did before go ahead and save that API because we're going to use it uh shortly in our application I have created already this news summarizer so I've got environment going I have everything I also have re the requirements.txt with python. EnV and openi of course and I'm going to say pip install R pass the requirement of text and go ahead make sure that we have all that installed okay again if you go to my M bin you can see we should have uhv as well as opening ey setup for us so the main folder or the main file as you see here it is essentially the same setup we had before okay so just copy and paste we have the client instantiated our open AI here and pass into model of course remember we could change this model here to perhaps GPT 4 depending on when you're watching this video I'm using the 3.5 turbo 16k because that's all we need anyway but feel free to change that okay okay so we have all of this imported nothing new here so if you click here you can see that I have the open API key and what we'll do next is you need to add the other key which is going to be the news API key so here then you can put like that and put your API key that the API key that you created so once we have all of that let's go back to our main in this case to our main.py or app.py and and I'm going to put here this code so it's going to be news API OS environment of course we need to make sure that we import OS for that as well and then it should be good so here we are getting the news API we just created put that into a news API key so we can use and set things up in a little bit okay so once you have all that we should be able to get going now what I'm going to do next here I'm going to create a class that will be our manager say our assistant manager which will allow us to call it and then get the assistant or create the assistant the thread ID and to all the things that we've seen before okay so I think that's the better way to do it of course we could do this in a more modular way uh create functions and do what we did before but I think this is kind of fun and also keep in mind that you will have access to all of this code so it's all good so in the bottom here I'm going to put this piece of code which which allows us of course to pick up the main function I'm going to create a here and then run whatever is here so for now I'm just going to say pass so that we don't have any issues so let's go ahead and create a function which is going to allow us to tap into the API and get some result that is the base of this entire application so that is the first thing we need to do so I'm going to say get news say Define or def for to Define and then I'm going to pass here the topic which is going to be the topic we're going to pass so first first I'm going to put the URL here so the URL that we need to tap into essentially it's our API so I'm going to I have it already and I'm going to put inside of an F string and just go ahead and grab it so essentially what I'm doing here I have the htps newsapi.org and in this case here the end point that I want is everything okay there are different end points but we can just focus on everything and you can go back to the API page which I will recommend you do to read a little bit more about all this end points and everything but this should suffice and then you have a query here and pass the topic which is going to be passed along here and then the API key which is the news API key that we put together right at the top here and of course we're saying page size about five because we going want to get more than that but that's just a little bit too much all right and you can play around with the numbers and everything that's totally fine and up to you now the next thing we need to do here is go back to to our requirements txt and I need to pass request package here because we're going to need that to hit our API do the request to our API um and then get the information okay so let's go ahead and say pip install oops let's say pip install d r requirement text voila and we should be good go back here now I can go ahead and say try put all that inside of a try and I'm going to put say accept at the bottom here require a request oh I actually have to import requests so import requests as such the package and now I can use the requests and then acception class exception as e this is just to say gave us uh this make some requests and I'm just going to say print or rather say error occurred during API request something like that okay and then pass the E so don't worry too much just an exception here uh because we're going to put put some code inside of the try here so that if something happens at least we have a way of handling our errors right probably there are better ways of doing this but this is fine all right so now inside here we are going to do the fetching of the response from our API I'm going to put in a response variable and I'm going to say request. getet in this case and pass the URL that's how easy uh really it is to use request to go and fetch some data um from the API so now that we have our response here I'm going to put some if statements here just to make sure things are okay so I'm going to say if response status because the response will have the status code in this case if status code is okay in this case it's just 200 which means think okay and then I'm going to be able to parse through our Json so I'm going to say news and then I'm going to transform that into Json which means we need to import Json as such and say Json dumps and I'm going to pass pass our response Json such and of course I can say indentation about four as the Json comes in so to make the actual Json looks a little bit better okay we have our object here which is going to be our payload with all the news so the next thing we will do here just to make things simpler is we are going to transform this Json here we say Json dumps which if you have over what it says here it says serialize object to ad Json format string so this is is just a format Json string now we need to actually convert that string into a python dictionary that way we that way we're going to be able to access some of the fields easily so I'm just going to say J news Json um and then use Json package again and say loads and then pass our new uh this should be news not new but either way works okay pass our news here all right there we go so now this is easy for us to work with which which is exactly what we want and then I'm going to say data I'm going to say use uh Json here just to pass things around a little bit and then I'm going to go ahead and uh here I'm going to go ahead and access all the fields essentially Loop through right Loop through the Json and extract all the things that we want okay so if we go back to the news API of course we have to get started documentation everything but if you look here you can see the payload how it looks right so all the payload will more or less look like this okay which is really cool and also you can scroll left and down you can scoll left to see different end points top headlines and we have here top headlines still and there we go this is the everything end point that we are using and with some modification to get the data that we're looking for and so it will look essentially the same the payload you can see here we have status it's an object Json object so in this case it's just an object we have the status okay results 254 and then we have this articles array which then we have the source and the author so each article is an object itself with all information and has author title description and url url image and all of these fields okay so we're going to extrapolate some of these fields so that we can get the information that we need because we don't need everything from these uh from the payload so essentially we're going to Loop through our payload and get the and access the fields and get the information that we actually need so before we even go through the for Loop um let's go ahead and get some of the most important Fields so I'm going to start with status and this status is going to be getting this status we're going to get from data and go to status field here so you can see we have the object go to status and get the status field this case you're just going to say okay okay we got that and let's get the total results in this case I'm it's going to be data and then I believe it's just total we going down here and get the total result which will say how many articles are in this payload and then we're going to go to articles to get the actual articles so we going to go through data again we're going back to get this array which will contain all of the Articles as objects or dictionary in Python okay so we just we just say articles so this is exactly what we want make sure that these names are exactly the same because these are our fields which are our IDs uh for us to be able to get what we need I think I got everything right so I get all the Articles so now is when I'm going to Loop through all the loop through the Articles and get the information that I want so first thing I'm going to say for article in articles for simple Loop here so what we want to do is again go and get the information that we want from each article what we want is the source and get the name and then we may need the author the title of the article of course and the description uh we may need some other things here so and we may need the content on other things so we're just going to go ahead and extrapolate a few of these fields name in this case going to be going to articles or article in this casee for each article and I'm going to go to source and go through and get the name all right do the same to others so I'm going to get the author so article author and title there we go and what else I need this description which going to be article and description and what else let's get the URL because we may need that the URL to the article itself and it's going to be URL okay let's go ahead and get the content okay what else so that's good then here at the bottom I'm going to put all that into a string so it's easy for us to use it so I'm going to say call this title description I'm going to put all that into an F string just to facilitate everything really and then here's what what's going to happen so I'm going to go ahead and concatenate all of these different pieces that we put together here we received into a long nice string so first I'm going to put the title and then put a text title that says title first and then I'm going to say author so put get the author field that we just got from here and what else let's go ahead and get let's say source source name in this case and description description and let's go ahead and get url url okay so now we have this long string that has all this information that we pulled from the API looking good and the next thing we'll do here is that I'm going to actually put that into an array because each one of these string that contains title author Source name description URL we know that we inside of for Loop we want to do that for each one of these articles that we're getting and so I'm going to go ahead and create an empty list here say final news that way I can pass all of that each time will Loop through okay so right below here I'm going to say final news I'm going to pend uh our description so title description maybe I should have named it better but that's okay okay so each time we do that we are going to pull in all of the Tittle description which we are getting all of the title author Source name description URL for each article as we Loop through okay all of that so that way we can actually uh return that array so we see all of the information in this case all of the news that we want so at the bottom here I'm going to go ahead and just say return the final news okay let me go ahead and move this because this is an if statement I can say return else in this case if indeed response if response once status code is not 200 meaning we have some issues we're just going to go ahead and return in this case an empty array Or List like this all right very good so what we'll do now is let's go ahead and call our get news and pass a topic here that says Bitcoin just to see what will happen let's go ahead and quickly run this so I'm going to say Python 3 I am on Mac so on Windows or Linux you have to do something something else I believe and let's call Main let's give it a run hopefully everything works looks like it's running but it's not showing anything that is because I need to actually put that into a variable say news and then say print news like this okay let's see if this works let's run again and as you see we're getting some information and the great thing is because if it's an array that we should be getting yes a list it keep saying array it's a list in Python but same thing you can see we have the square brackets there and of course I can go ahead and get just the first item in our list if I wish to do so and let's run again we should get just one so we can see exactly that we have a title and description author source and all that great stuff and URL and that's exactly what we want so there we go so we have all the articles that we want we just got the pieces that we want and created one long string and put that in Array each time we call get news so this is good news the thing this this says that this tells us that we're able to fetch news from our API and get the data that we want for what we're going to be doing next so now that we know that the get news works by the way we'll see later this get news this is the function that we're going to be using you will see in a bit here um as the function calling functionality we talk about with assistance API which is pretty cool okay so now we have that working we know we're able to pass in in this case a topic and then we receive the news right and then we formatted everything we got what we need and all is good so we're going to use that as our function calling very cool all right so next what we'll do here is as I said before we are going to actually create a class this is going to be be a manager assistant manager class where we're going to put everything in that one class okay so now we could have done this uh just putting functions you know modularly but this is I think is the best way okay to do it this is probably the better way for us to have everything in one place in one class so we can instantiate that class as an object and then get what we want from that let's do that so I'm going to create a class here so say class and call this assistant manager s all right very good and so I'm going to add a few fields for our class here the first field that we need is going to be the thread ID and for now I'm going to say none and then I need the assistant ID which is also going to be none like this have a Constructor or initializer depending on which programming language coming from so we're going to say Define and this is going to be the init and it pass the self and it's returning in this case um nothing um just to simplify things of course I'm going to pass a few parameters here so it's going to self I'm going to pass also the model which is going to be a string okay and just in case I'm just going to go ahead and pass our model that we passed at the top here we created at the top here we have a default value which is going to be the model gpt3 or whatever model you added here and I'm just is going to remove that and next I am going to then set up a few things for our class here in our Constructor in our initializer okay so I'm going to say self and I'm going to call the client because I want the client to be in this case open AI that open AI as such just to instantiate all of that or I could have just called our client here that would work as well so either way works I'm just going to pass client like this which is going to be in this case our client and then of course self. model in this case I'm just going to go ahead and say model whatever we're passing along here and then self what else that assistant is going to be none in the beginning and self. thread also is going to be none and self. run right is none as well the other thing I'm going to add here because I want to be able to have the actual summary because that's the whole goal is that this class is going to be able to give us the summary of the news from the topic that we paste in or enter so I'm going to create yes another field here called summary okay which in the beginning is going to be equal to none like that so now we're going to do some if statements here to actually check if some of these um Fields like assistant and thread but but more particularly if this um static Fields here thread ID and uh assistant IDs if they're existent that way we can then look at that and see whether we need to create a new assistant or just use existing ID because the idea is that as we run this the first time as you saw before we will have the assistant ID at least as well as a third ID and so that we don't run this many times and then recreate the same things in the back end in the console or in the playground we want to make sure that those things are set up so that we don't have copies of the assistant and IDs and so forth so still inside of our init here I'm going to say if assistant manager. thread in this case let's start with assistant ID so if we have an assistant ID that means we have an assistant in that case we are going to set our assistant to the assistant that we already have so I'm going to say self that client that beta assistants and then I'm going to retrieve that assistant and to retrieve that assistant we need to say pass of course the ID of that assistant so we're just going to say assistant ID is equal to manager assistant manager and get that assistant ID as such and also we're going to check for our thread ID if we have a thread ID so assistant manager. thread ID if that's the case we're going to do the same thing we did which is going to go which is we're going to go ahead and get the thread ID so self assistant or thread ID I should say and set that up with the self. client uh beta threads and retrieve this case third ID it's going to be to assistant manager or I could have said self but that's okay thread ID as such okay all right very good so now we are making sure that indeed if we have an assistant ID then we don't create a new assistant ID in this case we just go ahead and retrieve the assistant that we have okay the same thing with the thread ID okay so all of that that is inside of our init function here our Constructor next we're going to define a new method here called uh create assistant so this will allow us to create an actual assistant so I'm going to pass self name and instructions as well as tools because those are the things that any assistant as you know by now may need when we create an assistant okay so first of all I'm going to go ahead and put an if statement here so if not self that assistant right so if there's no assistant of course then what I'm going to do I'm going to create an assistant let's say assistant object essentially and which is going to be self. client. beta that uh assistants and then I'm going to create a new assistance essentially so to do that we need to pass name which is going to be name we need to pass the instructions which is going to be instructions that we are passing along right and then we're going to pass also tools and pass the tools as such and for completion we also going to pass model and we're going to say self. model so to get the model that we already have in our Constructor in our class at the top there okay very good so that's how we would create an assistant if we didn't have an assistance okay so now that we know that we've created the assistant object here next I'm going to say assistant manager that assistant ID I'm going to grab that ID and then I'm going to get that from our assistant object that ID like that and then I'm going to make sure that the class field has that ID okay the assistant's ID so I'm going to use self assistant is going to and then I'm going to set up the assistant field which is usually none in the beginning to the assistant that we just created here which is going to be this assistant object right so ass so self that assistant now is equal to our assistant object very good so if you want we can just print things out here so that we can debug and see what's going on so I'm going to say assist ID just put something more there so we can see what's going on and then I'm going to put say self. assist ID oh I actually could just go assistant. ID like this right to get the actual assistant ID when that is created that why that's why we're saying this all right very good and that's it for create assistant okay so next what we'll do is we are going to then Define another function or method in this case uh this is going to be called create thread of course I'm going to pass self so we have that reference as such so you can see really nothing is out of this world it's the process is still the same it's just that I've changed a few things so that we have an actual class that helps do all the things in one place so we can just instantiate that class and get what we need all right so the same thing really if not uh in this case self. thread so if there's nothing there then that means we need to create a thread object okay so sing self. client and then threads and then I'm want to create a thread and as you know now to create a thread we just uh need to pass we don't actually need to pass anything things which actually I'm going to just leave as it so we're going to create an object thread and we can attach messages and whatever we need later all right so now that we have that thread we're going to use assist manager just like where we did before and Say thread ID it's going to be equal to thread object. ID okay set that thing that up and then we're going to set the field the class field self that thread okay to be equal to the thread object again we're going to go ahead and print F string here and Can Say thread ID just to make things better and just pass here self. thread. ID all right so just print it out so we have it and make sure that we are getting what we need so now we have created the create assistant method we also have in this case the create thread method now we need to add messages to that thread so I'll Define another function here say add message to thread okay so we're going to pass here first of all self reference and roll as well as the content all right in order to create that message because we know messages are added into a thread so we need to make sure that we indeed have a thread ID so we going say if self. thread we have that then we're going to go ahead and self. uh client beta. threads messages and we're going to create that message all right to create a message we need a thread ID which is going to be in this case self. thread. ID and then we need the rooll which is going to be the roll okay which is going to be passing when we call this create a message or add message to thread as well as the content okay and pass the content as such which has been passed along that's it all right so we have that function or in this case a method and next we need of course a way for us to run the assistant so I'm going to find another method here so this is going to be run assistant and we're going to pass self reference and instructions as well okay so how do we do that again we're going to check It's always important to check because in order to run an assistant we need of course to check if there's a thread ID as well as the assistant okay so if self. thread and self do assistant if they are existent then we are safe to run this thread so self run in this case I'm going to set that to self. client go to Beta say threads and runs create okay so we have create here so what we need to do we need to pass a few things obviously we need to pass the thread ID how do we get that we get that by saying self again right the reference of this class and we go and get the thread id thread. id as such and then we need to pass the assistant ID do the same thing and can pass the instructions which are the instructions that we passing as parameters okay so our class is actually coming along nicely next we going to Define yet another method here called process messages because we need a way as you know to process those messages going through all that stuff and retrieve what we need all right so I'm going to pass here just the self reference okay let's go ahead and work on this bad boy so what we need now here and process message where first of all I'm going to check if there is a thread because we can't because we know that messages are inside of our thread so we need to check if there is indeed a working thread in order for us to go in and get that information which are the messages so if thread or self I guess or self. thread if that's existent if that exists then I'm going to go say messages I'm going to retrieve those messages so I'm going to go client better for now that may change by the time you watch this video this lessons and I'm going to say threads messages and we know that comes in a list so let's go to the list and in this case we need to pass the thread ID which is going to be self. thread. ID very good I'm going to create a list an empty list but that's where we're going to add all of the messages or summary in this case right so I'm going to say summary an empty list is it an empty list as such and I'm going to just go ahead and get the last message of the thread because that's all that we need so I'm going to say last message and how do we get that we say messages but this is indeed the list right and then get uh go to data right that's the object and then uh get the first one zero and I need to get the role we get the role from the message in this case payload which is a a dictionary really that we're receiving uh we say messages again actually since we already have the last message here we just just probe in into that and say content okay and of course get the first index and go to text and value as such oh value okay so now we get the actually my this is not R this is going to be the response all right but I want the roll which is going to be I'm going to do the same thing so last message and add content I believe get to zero and then I need no actually I can get that straight to roll I think yeah there we go so we can see intellisense is helping me very good so we got the last message the big object because we looping we know that the messages come in in a list so we're probing in and getting what exactly what we need so we need the last message in the list in the message list that we got from our thread. messages and then we get the role just need the roll so we can use it in a bit here and the response that we're getting all right so that we can formulate and create a nice response all right so so we have the response now I'm going to go ahead and say print in this case put a inside of an F string here just for us say summary and put a lot of information like that that way we know exactly what's what and I'm going to say rooll I'm actually going to go ahead and capitalize the RO right response like that so we just printing out the summary and at top I'm going to put the role so it says for instance user or assistant in this case going to be assistant right and then we pay and then we have our response there okay so what are we're going to do before even that we have this summary here right which is an empty array so what I'm going to do is I'm going to say summary. append and pass in our response so now our summary when we return because this is going to return something I'm going to return real quick here this is going to return our summary so now that our summary will have the response which is exactly what we need this is going to be the assistant response right we processing messages so what we'll do next well you remember at the top of our class here we have this field called summary that we instantiating initializing here to none so now we can fill that summary into with the summary that we got here so all I'm going to do here now I can say self that summary and I'm going to just then say summary like that okay but I want actually to make it a little bit better which means I'm going to which means we're going to format things a little bit so first I'm going to put a new line every time we add before we add the actual summary the actual text in this case this summary that we get as a response and then I'm going to call the join and then pass the the summary as such okay which is what we have here a list which will contain in this case U the summary which is which will contain the assistant response okay so now our field summary in this class should have whatever we getting when we process and get all of the messages one other thing we could have done we could have looped through these messages here because it's a list right we could have said something like this for MSG in messages right we could have say roll set that to MSG that roll okay and then content set that to MSG go to content say text and get the value as such and then we're going to print in this case I'm just going to copy this something like that say summary and said roll pass in the roll and also then pass in the content like this so this also would have work but because this is a method and we want something else to happen um I prefer to do what I just did here but I'm just going to comment this out so you have access to that if you wish to just look at things in this perspective next we are going to yet create another function another method here real quick so we still in inside of our class it's hard to see everything because I needed to make the text a little bit larger so you're able to see I'm going to say depth to Define this is going to be wait for completed and pass self as well get this function here or method uh will as the name imply wait for completed and do what needs to be done so essentially we're going to make sure that as we invoke the run and to run our assistant and do all the things that need to be done and as you remember uh when we run we have to go usually we have to go through certain steps right those steps may take a little bit so we're going to configure things along that way we can wait for a few milliseconds or seconds until we get the response and then we do something for it okay so it's just more of a helper function in this case method which we we saw before but now I'm putting that inside of this class so I'm going to check of course to see if there is a thread and also if there is a run entity that was created so if self that thread and self that run okay I'm going to put in a while loop here while true then we're going to go ahead and going say time. sleep for about 5 Seconds okay and then run status I'm going to retrieve the Run status to see I'm going to retrieve the Run status to see where we are by saying self again go to client and go to threads and runs and retrieve okay so in this case here I need to pass a few things first of all we need a thread ID which we can get by saying self that thread get the ID and then we also need the Run ID which we can get by self. run. ID and remember at this point here all of these fields are of course part of our class the run and thread and all that so that's real good that's the beauty of putting everything into a class where we have one entity which we can use to do things so all right so now that we have indeed our run status we can check that for now I'm going just go ahead and print something here put an F string we just say run status and then I'm going to say run status we can use the model we're going to go ahead and say model dump Json function there and then we can just add some indentation in our Json for readability just say for as such very good so we are going to go ahead and get this run status which is which is going to be a lot of information we getting the model we are invoking the model dump Json which if you have over tells exactly what it does generates Json representation of the model using penics and so forth all right very good and there we go so that's going to be printed out check the status because remember the status has uh certain booleans that tells us where we are in the process of running these steps right so we want to check if for instance a the status is completed or not so I'm going to say if run status that status is completed as such and that's the case I'm going to say self the process message right we're going to call our function or method that we created here the process message which will know how to process the messages because that means the running is completed we should have an answer right which is good okay so the process message is called and and then we just going to go ahead and break now one thing I want you to remember or to keep in mind let's go back to our presentation here so when we looked at this diagram here where we have talking essentially talking about the benefits of the assistance API we said that the most exciting thing really is the fact that we have tools so in this case here we have the code interpreter which we saw a little bit we have the knowledge knowledge retrieval which allows us to upload files and then we can converse with those files or documents in addition to the base knowledge that the models has but the function calling as well okay right this is where we are we are going to implement the function calling how does that work well in this case here if we look at our code here when the status is completed then we know we can we have the messages so we can go ahead and process those messages but there's also another status that we can look for or watch for which is they requires action because because of the function calling as we go through all the steps we saw before remember this so the steps that the Run goes through you can use code interpreter create message to and then call another tool in this case we're calling a function because it is indeed another tool when that happens what that when we get to that part the Run entity will know that okay something is required so it's going to trigger a flag that says the status now is requires action when there is this this requirement of required action that means we can then call a function do a function call okay so that is the beauty here so we can actually look for that so I'm going to say else if if run status that status is equal voila you can see it even gives us all of these enams here right so we have the requires action right these are enams that are actually we can get right Flags essentially that we can get from the Run status so there is requires action which is what we need there is cued in progress failed expired cancel cancel or cancelling or cancel and so forth so all of these are steps or these are states that we can that we can check each time to do certain things so if the status says it's been cancelled or cancelling in the process of counceling then we can tell the user or send out a message say hey now this is being celling so do something else if it's failed of course we can do something else if it expired and so if it's in progress we can also uh maybe shoot maybe show something for the user interface to say hey things are uh in progress so just give it a minute okay so this is real cool so we want the requires action because this is what will allow us to then do the function calling right which in this case I'll will tell you now it's going to be the function that I told you earlier that we created earlier which is this get news but we'll get there okay so if this is the status so if this is the status requires action what we'll do then we'll do a few things first of all I'm going to just go ahead and print here so we see what's happening I'm going to say I'm going to say function calling now CU that's what we need to happen what we do next is we are going to go and say self and then we're going to call this call required functions should be function that's fine because you can call more than one function so say functions going to pass self and required actions okay we haven't created that let's go ahead and create this actions that's that and all this will do I'm going to say if not self. run right if run is not available or so all I'm going to do here if not self that run then I'm just going to ahead and return right because there's nothing really to do and in any other case I'm going to just say tools output and it's going to be an empty array so this tools outputs here is what we're going to use to go through and pull in all of the required Tools in this case required functions that we need for this run so let's work on this little bit a little bit here okay the thing to remember here because this required action here here it's going to be a list that's why it says actions plural so I'm going to put a for Loop here that's a for Action in required actions and inside of the required actions actually we are going to have tools calls as such and then inside I'm going to go ahead and get the function name so I'm say funk name and then I'm going to say action and then I'm going to go ahead and say function okay and then I'm going to go and get the actual name so that's what we're doing here so we're going to get through through this required tools but we're going to have a lot of different tools we may have more than one tool of course in this case more than one function okay and then we're going to Loop through and just get all of the names of the functions but in this case we're just going to have one so we get the name and put that in function name so if the function name which is going to be tool is get news then we're going to get the actual name of the function but that's what we need to pass around to get uh in this case to get it so that the function can run and then get the data pull it back then the assistant knows what to do very good and then I'm going to say arguments I'm going to say Json in this case loads and then I'm going to pass the action so essentially exactly what I have here I'm just copy this change a few things and instead of function name we're going to get the arguments the function arguments so all we be doing here is going through get the function and get the arguments of that function because we may need they may have some arguments that need to be passed around okay and that's what I'm doing so I'm going to put that into a variable arguments okay so we'll see how it all pans out now I'm going to put an if statement here so I'm going to say if Funk name is equal in this case I know it's going to be get news now how do I know this well I know this because that's the function I need to be called as a function calling it's called get news if you said happy birthday or James Bond whatever you named here this has to be exactly the same because that's what we're going to be calling right so if function name is get news in this case then what we'll do well we're going to put inside of we're going to say output and must called get news aha now I'm actually calling the function and passing the topic how do I get the topic well I get the topic because I have the arguments remember when we did this here we're getting the arguments of the function so we need to pass the actual arguments here like that okay now what is the arguments now the cool thing is that when you go back to this get news here the argument name is topic right so in this case here I need to say well the arguments because it's going to come in as just a dictionary it's going to be topic as such very very important so whatever you put inside of get news function when you call the argument has to be passed along like this very good so that is part of the function calling guys all right so now that we have the output because get news is going to return something or it's going to give us something right and we have that there as an output now I'm going to go ahead and print that just so we have it F string here just say stuff okay to differentiate things and I'm going to say output like this because we know that the get news will return that very nice string right remember let's go back here can see I'm going to open this so we return this final news which is going to be a a string but in this case it's just going to be a list containing all of those different new news right because we listed everything we put everything in one string and we Loop through so each news that we getting we going to get a title author Source description URL and so forth and put that in final news list right so in this case here what we'll do is we are going to Loop through and so that we can create the actual final string so I'm going to Loop through and extract everything from the list because that's what's been returned from our get news and then I'm going to put everything in a very long string that way it's easier for the L for the llm for the model in this case to be able to just pick all that stuff and and summarize it and create some sort of a new uh summary of everything if that makes any sense okay so structuring things for us so I'm going to say final string Str just make it an empty string as such and then I'm going to say four item in output then we're going to do something so I'm just going to append like I said to create that long string so final string plus equal I'm going to just say that join and pass in this case our item okay now we have this final string ready for us to use all right okay so you notice here we also have what we call this tools output should be tool outputs so our tools output here is just an empty list so we're going to use that cuz that's where we're going to add all of the tool outputs so I'm going to say tool outputs in this case and append what well I'm going to pend an object or a dictionary that will have a few things first of all let me just put it all together here so you can see first of all I'm going to say tool and call ID like that and then for the call ID so how do I get the call ID well a call ID it's going to be coming from our action if we say action right what is the action well action is this because we're still inside our for Loop right so it's going to go through all the tool calls so I'm going to get each one of the action which part which is essentially the action part of the function right the function call and I'm going to go ahead and get the ID so I'm going to say like this and say ID so I'm getting the tool call ID in this case we call it's going in this case essentially it's just the function the function function calling right say output this is going to be the output that comes from our get news so what I'm going to do well I already have this final string here so that's what I'm going to put here so I'm going to say final string like that very good now this tool outputs is very important as you can see in a little bit here so now that we have our tool outputs with stuff that means each time we go through it's going to go ahead and get all of the tools in this case it's just one function you could have other tools right uh we're doing call uh function calling here it's going to go ahead and get the action ID and get the final string which is what we get from our output when we call the actual function the actual tool this is our tool right very good so next what we do I'm just going ahead and print something here so we see what's happening going say submitting outputs back to the assistant that's what we'll do next right here so now before I do that actually I'm going to say something like else because we're inside of if statement if the function name is getting news right so if any anything else happens I'm going just say raise value error and I can just say something like an F string here unknown function and then I'm going to just put the funk name as such okay just to save ourselves from a lot of issues so I'm going to get out of our if or for Loop that is here all of that has to be inside of for Loop and now I'm going to say submitting output put back to the assistant so what we'll do next is ah this is the beauty I'm going to say self client beta and then threads and runs and submit tool so there is such function or such in so there's such function called submit tools output or tool outputs that's why we were doing all of this but now we have to pass along a few things in order for the run in this case here to be able to go and get the tools because at this point it's saying hey we need some tools right tools required right in order for that to happen then we need to pass a few think it needs to know about the thread ID which we can get from our thread. ID right it needs to know about the Run ID all right so I'm going to say can know about self. run. ID it also need to know about the tools outputs and where do we get those well tool outputs which is exact what we've been working on around here now we have tool outputs we will have tool call ID it has to be exactly like this that is what's required and the action ID we're passing to like call it same right we have here tool call ID which needs to be passed exactly like this in this dictionary and if it's going to be action ID and output is going to be the final string which is exactly what we have here which is the information coming from our get news very cool very cool all right now indeed if we go back to where we were calling this this will make more sense now I don't need to pass that at all nor do I need to pass that let's see what do I need to pass so now this makes sense that means now when status is requires when status is requires action we are going to call required functions which is what we just did so it's going to go through and go and get all the tools in this case it's just going to go ahead and say okay so we need a function in this case but because it could be more than one function because it's a tool itself go through all the process we make sure the function name is exactly the name that we created at the top as I showed you and then we get the output from that function but those results are needed right for the run to process everything and we do all this great work and then we make sure that then we submit those tools as you see here okay to our uh run runs that submit tool function you need to pass the thread ID as well as run ID always all right very cool all right so there we go that is exactly what's happening here and so now we should be able to have everything that we need to get things going but before we go that we need to pass something else here says here H required actions so we need to pass the required action here what do we how do we do that well it's going to be I'm going to say required actions and it's going to be run status that required action submit uh tool outputs and I'm going to say model say model dump like that so essentially we are just getting the submitter tools and of course we are going to go ahead and generate in this case and of course we're going to make it so that it is indeed a model Dum so create a a python dictionary which is needed so that the call required function knows how to read all that stuff which is needed that is needed for the function calling to actually work okay so what I want you to do is to if this is not making a lot of sense it's okay uh rewatch this part a few times until you understand it the main thing to keep in mind here is that all of that is being called inside of wait for completed but that's where all the action is and we are setting up or we are listening right looking for the status if it's completed then we just are good we go ahead and process message in cases which is this case here where status says requires action that's when we call required functions right because this again I'll repeat myself I know but I want you to understand this is where all the getting the function name getting the IDS the action ID and everything and actually calling our function as a tool this is where everything happens and it's very important to make sure that we get the arguments and pass the actual arguments which are passed along when we call that function which we created the get news and make sure the function name is getting there and everything is good and life is great all right so that's very important to keep in mind now I know it was a little bit of working that needed to be done but that's how you do function calling you with the assistant API next we are going to create yet another function here or method I should call it because it's inside of a class this is going to be for streamlet and we're going to talk about that in a little bit this is going to be our front end right going to say here for streamlet so essentially we're going to define a method here called get summary pass self and all it will do is this is going to go ahead and return self. summary as such okay that's all this function is doing here and it's going to be more apparent once we are putting together the front end with streamate so the next method we're going to create here is the run method so run the steps Define this run steps reference self and I'm going to say run steps self. client go to threads runs and steps as such and pass in the list and we've seen this before so we are going to of course go through the Run steps and get all that information for that we need to pass the thread ID as you know so thread self of course get the ID as well as the Run ID so it's going to be self run. ID okay very good and so we're going to go ahead and just go ahead and print in this case and have string say run steps and pass in the Run steps so we can see what's going on this is just for us okay so I think these are all the methods that we need we have a few here so we have we have the call required functions we have the process message we have the Run assistant these are very important because allow us to actually create assistants which is the most important thing really and add to thread but before that we have the create thread and create assistant which one was this this was run assistants of course to run an assistant and we have the create assistant this is the one I wanted to talk about and voila so we have our class here assistant manager which we can instantiate as an object and we're going to be able to run and create assistance and do all the things that we've done before but in a different more um objectoriented way of doing things and most importantly that we know that indeed the get news which we tested earlier here this is a tool that's going to be using in the process in the function calling tool as we discussed so very exciting okay so now I think it's time for us to test this out so let me move this main to the bottom right about here and so I'm going to comment this let's comment this out as well as that as course for testing and first of all we are going to go ahead and say a manager create a variable manager and then estan shate our assistant manager as such okay very clean and what we'll do next is we are going to be using streamlit which will allow us to create a web page where we can actually see things happening so it's very simple and of course I'm going to go up here and go to requirements and I'm going to go ahead and say stream lit such and make sure that I've run again pip install d r requests requirements a text so we can pull in this streamlet package okay so looks like we've gotten everything let's make sure it should be fine let's see streamlet is there that's very exciting really good so let clear this and now I can go ahead and we can now use streamlet again if you don't know what streamlet is again streamlet is just a very simple framework that you can use Python firw workk you can use to quickly generate web pages with python it's really beautiful create a streamlet interface so we can actually create a user interface of course that's what it does I'm going to use streamlit first of all I need to go ahead and import streamlit as St for streamlit okay so now I can set things up here I'm going to start by putting the title so st. title it's going to be news summarizer and then I'm going to add here a form which will allow us to add a field where we can in this case add where we can type where users can type in the topic so I'm going to say with sd. form and for any form we need to pass a key okay so I'm going call it user input form and then I'm going to pass instructions here I'm going to s that text area so we can actually create a text area or text input I'm just use text area because it's cool and I'm going to say what I want the text to show here is going to be enter topic maybe text error is too much let's just uh say that text input okay that's probably better all right and we're going to also create a submit button such and I'm going to St do form submit button and I'm going to pass a label which is going to be just a string I'm going to say run assistant and now we need to be able to handle the button U let me see something here I'm going to run this real quick just to see if something's going to happen now in order for us to run a streamlit application we no longer say python we say stream lit run and then the name of the file hit enter and if all is well what will happen a new window is going to open okay so you can see I have have it open now it looks really nice and new summarizer we can enter something and we have the button here so just like that we're able to create a user interface that looks wonderful next let's go ahead and handle this submit button because we want once the submit button is clicked something needs to happen so I'm going to say if submit button in this case that's how you handle submits we're going to go ahead and create an assistant and thread if they don't exist so I'm going to call the manager because we instantiated here and I'm going to say dot create assistant look how beautiful this is because now we can just go ahead and call those methods right the function in this case from our manager object class that we created and for that we need to pass a few things I'm going to pass the name the name is going to be news summarizer as such and then I'm going to pass instructions and I already have those instructions I'm just going to copy and add them here so that way we don't have to do all of this okay so essentially it says here your personal article summarizer assistant who knows how to take a list of Articles title and descriptions and then write a short summary of all the news articles now the most important thing here is that we need to pass the tools list right so the list is going to go in as an object or a dictionary in this case and we need to pass a few things here so now I have all of that already and you'll have access to all of that this is um the dictionary that you need to pass in for our function calling to work so instead of tools you say this so we have the type is going to be function the function we're going to get the name is get news remember it has to be the same name of the function we created earlier get news very important and then the description we can add a description here for that function we have the parameters and then we have the parameters and and then we have the parameters fied which is an object or dictionary it's going to be an object the property and importantly notice here the property is the topic this is the argument right so topic is going to be type of string and we need to pass the description of that property which is topic remember we adding topic because that was the argument we're passing has to be exactly the same name this is very important otherwise it's not going to work okay and so we pass the description the topic for the news for example Bitcoin and so forth now important part here is a required because this is going to be the argument parameter as you see this is part of parameters and that is required which is going to be the topic notice these are the same names as the arguments or parameters we passed in the function okay so when we click the button then we're going to create an assistant and then also we are going to go ahead and create right below that we're going to go ahead and create create the actual thread because that is needed right to create a thread going to use manager again and then invoke the function or run the function or call the function create thread we don't have to pass anything and next we're going to go ahead and add the message and run the assistant as such how do you do that well we're going to use manager again this is the beauty of having that class right and call the add message to thread function and here we need to pass the role the RO is going to be user content it's going to be I'm going to pass in as an F string so I'm going to copy what I have here already so it's easier so for Content says summarize the news on this topic and passing the instructions now where is this instructions coming from well this is the instructions we getting from the text input very good once we've added that message this is going to be a message to the thread right what we need to do then is just say manager that run assistant right that method and passing the instructions which is going to be summarize the news okay you can be more elaborate but that's okay and once we have that then we are going to wait for completion and process then the messages okay so I'm going to call manager again say wait for completed it's called wait for completed it should be wait for completion so I already so we have that so change that so that wait for completion and then we're going to have a summary here which is going to be which then I'm going to call the manager. get summary because at this point we should have a summary and once we have this summary we can then say St for stream lit and write that summary okay into our page and then SD again I'm going to add a text here which is going to be the Run steps and then I'm going to st. code so this is just going to show the Run steps at the bottom and then I'm going to pass it's called manager that run steps function which we created right is just go ahead and show all the steps and I want this line numbers to be true as such that's about it so we are now calling everything first of all we created the assistant make sure that we pass the tools which is going to be a function function calling tool essentially and then we create the thread that's needed and then once the thread is created we I'm going to create in this case add call the add message to thread add the user and the summarized news on this topic which is going to be instructions right and we're going to run the assistance past instructions we going to wait for completion right a few seconds and then we get the summary manager get summary and then we write that summary into our into our page and then of course we also get the steps so we can show at the bottom that's it so now if I save this go ahead and run again I think uh I could go back and always run okay let's go ahead and say open Ai and run all right so after a few moments you can see that we have here here are some recent news articles about openi and goes and gets the title how to stop another open ey meltdown and it's got all the main points the author Source description so what happens now in the back end the assistant was able to go and create this all of this the description as a little summary okay the same thing with wired so everything related to the description here is indeed showing now it's saying none here maybe perhaps in the code I put something wrong but that's okay we can look at that a little bit later okay so as you can see this is indeed working and if we go back to our command line here or terminal I should say there's a lot that has shown up here and let's see so we see here in one of the Run status we have the assistant ID so I'm going to copy that assistant ID and go back to our code and for our assistant ID here I'm going to actually paste that in and let's go ahead and find the thread ID there we go to thread ID let's just copy this and I'm going to put there so this is what we're going to be using very well so that means then I'm going to go ahead and stop this all together because now we're going to change gears to make sure that we don't recreate this same um we don't create yet another another assistant when if we were to run this in this case um adding another something else okay so I stop that and this is stopped now if we go to open AI let's go to our assistance we should see that indeed we have this new summarizer assistance with that ID which is the same ID that we just added hardcoded to make sure that everything works as intended okay so now that we have actually added this thread ID as well as assistance ID we have this code so that it will check if there's already an assistant ID okay if there is an assistant ID we just going to go ahead and retrieve that assistant right say assistant better assistance and retrieve same thing with the thread okay so this is why we had this code before so now if I save this let's go ahead and rerun again going to refresh this so this time here I'm going to run again let's have a different topic let's say US inflation let's go ahead and write R so we'll take a few moments and there you have it here are some recent news articles about US inflation and we have the title the author and everything and we do have that description which is really nice and we also have to read more the homelessness in the US hit record high and all this information very good so we still getting none for steps here we can look at the code just to make sure because for steps I saw earlier that we should be getting something but I think I I let's see okay I have run steps let's go to our code okay run steps I'm just run steps self list right I'm printing the Run steps and I should return H that's why run steps like this and of course I can move this there so this actually works I can actually save this and I'm going to prob in into data to actually get the right information all right there we go so now if I go back here and I'm going to say always rerun or just rerun one time that's okay and I'm going to find something else let's say let's say apple okay after a little bit you can see that indeed this is running here are some recent news articles about Apple and Apple pay Apple card Apple Visa TV and all this great stuff so you can see oh there we go and of course we have all the Run steps which is exactly what we want to see and this is just for us to debug of course in a final project or product you shouldn't you probably shouldn't have this there but I just want to show you so we have this is working if we go to our assistant we see that we don't have duplicates of assistant we just have one summarizer because now we're able to get the assistant ID and of course we printed out the thread ID so we're using those for our assistance API that we heating creating here to summarize our news very cool so I hope this is making sense I hope you are seeing the power of using function calling uh with assistance API and it's part of adding more tools to the toolkit so that an assistant is able to run things and get information extra information from somewhere else as you can see we're tapping into a totally different thing per se totally different system uh API in this case to get information and pass that back through the large language model in this case the model that we're using large language model that we're using here gpt3 we instructed it to create a summary get that information and summarize everything and then pass it back to the thread as the response and that's what we getting here and you can see a lot of different use cases that can come up from this right you can create for instance a newsletter application that what it would do is depending on the topic that you pass in here it will just create General generate a newsletter with the main points about that topic so the things you can do are literally endless there's so many things you can do with this and I hope you're seeing uh the power that we have here okay so all of this is just using the assistance API okay so so far we've done a lot of things and the last thing we did was to create this summarizer new summarizer with which allows us to look into uh passing tools passing function calls to our assistant that way we can extend even more the toolings that we can pass to theist to our assistant to do something else right so in this case the assistant now has this function call we just looked at one function call but you can have many function calls and this is very important because that as I said will extend the capability of our model because not only can we rely only on what the large language model knows now we can include out tools so that the large language model the model model in this case will have more context more knowledge base so that's what's all about so it gives us that flexibility and what I want you to do is to think about use cases that you can Implement at your work or maybe in your projects what else can you do the example that I showed you here was tapping into or calling in this case an API news API but you could tap into uh a database for instance or do all sort of things so the idea is that now you have that capability and you see how function calling is really awesome when it come to creating really powerful assistants so next what we'll do is we're going to look at a knowledgebase retrieval tool because now we're going to look at how to even give more context more knowledge specific knowledge that we would want to our model so that our assistant is able to have the knowledge to answer certain questions and get us the results that we want okay what would going to be building is what I call a study body essentially will allow us to upload certain PDF files and then we can type and questions in the chat Boot and get answers pertaining to that to those documents or that document that we have uploaded okay but before we do that let's talk a little bit about the background of how things work how this retrieval thing really works right in the back end so how does it work this knowledge retrieval the way it works is very simple if you look at this we have documents a document could be whatever we upload in this case let's think of it as just a PDF file okay so what happens now is that we pass that or we upload that to openai large language model which has this Lang which has this massive knowledge base but when we pass these documents in that means those documents or files are now part of these large language model knowledge base that's the whole idea so that way when we query or we ask questions to the model which now understands more than what it knows because we've passed more knowledge per se then we can get the answers so this is what we have in a n shell but there's a lot of things that are happening internally here one of the things is if you look inside right so what happens now is that we're taking a document and we put it through a document splitting process okay so the documents are split or cut up into smaller chunks and then those are actually saved in what we call a vector store now this is what generally happens when we talk about when we talk about pushing information in this case documents and so forth to the large language model so it has more context has more knowledge okay so the question here is okay what is this Vector store and why is that even important the thing to keep in mind here is that in a vector store the representation of the document is not is not the same as we started with so this is not even documents chunk this is not even a document that you and I can read anymore now we have this different representation that we call embeddings so what happens that a vector store holds embeddings so embeddings is a vector just a mathematical representation of the text of those documents and that is indeed what is put inside of the vector store a vector store is just a database that holds all of this mathematical representation of our document now the reason why embeddings are so important is because embeddings are first of all our mathematical representation which means it's really easy for algorithms to be able in this case to search for whatever it's looking for for your text for meaning and so forth so there's a lot more to that but that is is the idea because now we can look for pieces of text in this case we call text but they're not necessarily text they're mathematical representation but let's call them text so now it's easy to look for the pieces of text and trying to find similarities between those pieces of text which are now embeddings the idea so visually again this is what happens so you have all the documents so I'm putting different kind of documents but right now we're talking about just PDF files but could be anything really in general okay and that has to be transformed into embedding as I just said which are these mathematical representation of those pieces of data the text or the document which we call Vector representation and that is what is pushed into this massive algorithm that will then know how to do the similarity search to find the right results per se okay so the idea here is as follow the query the questions also have to be transformed into embeddings so that they are able to be understood and be searched for because if the information now is in the vector representation format makes sense that the answer or rather the question the query has to be the same format that way the algorithm is is able to do the searching in the vector store and so forth and get the right information and of course that gives us the result so essentially this is what how it looks like again okay so we have the vector store loading so this is not necessarily just what happens uh with open AI in this case are we talking about it but I'm talking about in general this is what would happen so in this case here we have the document loading so what happens then we split everything and then all the splittings those are the vector representation of our documents here they put into a storage a vector store okay now the retrieval in this case everything is going to be indexed right so now we have a question or a query we go through through the vector store the retriever so we retrieve the relevant splits because the information now it's into is in this different format and now the search happens to find what goes with what what makes more sense right to find the most similar pieces of data so that we understand what's going on and then once that is retrieved the most similar pieces of data that's what it's then put into a prompt all right so we have that prompt the query and we have that what we've received from the retrieval the documents were split and everything and with the prompt and with the help of the large language model in this case just a model that's when we get the answer so this my friends this is how it works in the back end now if we go ahead and look back at the first the open AI you notice that in this case open eye simplifies everything for us when it comes to this whole process because now we have some sort of like a a black box where all of the things that I've just told you now is happening all we have to be concerned about is to get a document push them into this black box per se and then we can just start conversing with our large L model in this case our model in this case in the form of our assistant API so this is what we're going to be doing next next we're going to learn how to do knowledge retrieval by pushing or by uploading files in this case documents to our assistant's API and then be able to ask questions about those documents so I went ahead and created a new project called study body and I've set up the environment environment variables and everything and I also have requirement uh. txt we have all of these Let's see we don't need request anymore I don't think that's okay so let's go ahead and run pipe install real quick here R request so we can get all those dependencies all right so we got all those dependencies that's very good and what we'll do next let's get rid of that in our app here everything should be looking good nothing new I've got a few Imports as well some of them we're not going to use them that's okay we can get rid of them when we need to and one thing I noticed I've changed here is that is that now for a model we have GPT 4 110 six preview now remember these could change depending on when you're watching this you can go to the documentations and see that okay but this should work so the first step we need to do is to is how do we upload files to the assistant API in the back end okay so let's put number one here upload a file to open AI embeddings essentially that's what we're doing ah embeddings yes okay so to do so first of all we need to get those files and I already have that prepared for us so I'm going to go ahead and get it the one file at least which is going to be in this case this is the understanding cryptocurrency it's very short not nothing too large that's okay and we're going to use that and upload that to the embeddings the open AI embeddings okay so I'm going to say file path I'm going to create a file path here and because it's literally here so what are we going to do we just going to go ahead and say that for Slash and of course make sure that you know depending on what operating system you're on so this is how we do in on Mac so I know it's cryptocurrency so I'm going to uh crypto currency. PDF that's the name so make sure the name is exactly the same and then I'm going to create an actual file object and I'm going to say client Cent right beta and I'm going to files let's see no it has to go client files it's not beta which is good so and then let's say I'm going to create and I'm going to pass the file I'm just going to say open and then find uh pass the file file path as such and I'm going to say RV and we need to also pass the purpose why we are uploading this in this case I'm just going to say that purpose is going to be equal to assistant assistance like that okay there we go so now we have let me put this perhaps in a new line no doesn't work so now we've created the actual file object which is going to be pushed into the open AI embedding in this case the open AI assistance API okay okay and then then step number two very simple is we're going to create an assistant oh we've done this many time so you should know how to do this now so I'm going to just go ahead and do it anyway so assistant I'm going to use our client going I have to do beta for now assistance. create and we have to pass a few things first of all it's going to be name I'm going to call this study buddy and then instructions and I have the instructions here so I'm not going to bore you so I'm going to just get all of that and show you here okay so I do have the instructions here you are a helpful study assistants who knows a lot about understanding research papers Your Role is to summarize papers and do all these things so you're going to have access to all this so there's no need for me to go through but it's important to remember that whenever you're creating these instructions these are the prompts so you need to be very thoughtful and very um specific of what you want this assistants to be able to do next the important thing thing here is tools the tools we're going to have to pass here or essentially simple we're going to pass just one tool and the type of this tool I'm going to say it's going to be retrieval because we want to be able to upload a file or files okay I'm going to say model in this case I'm going to say model pass the model that we created at the top and then we need to pass has also file IDs notice it says ID is not ID that means we can pass more than one file and that's why we have a list here so I'm just going to go ahead and say the file object. ID like this okay this file object again remember that's what we created here and for reasons that you know by now I'm just going to go ahead and get the assist ID so we can use it later later so I'm going to say assist ID I'm I'm going to use the assistant and get the ID I'm going to go ahead and print that one assist ID and then I'm going to just paste some of the code here this is for later once we've run once so we have the uh the thread ID and assist ID then we're going to add them here so these are old ones and they're not going to work so for now just going to go ahead and uh make them empty as such so and I can also go ahead and go like this for now and next I'm going to go ahead and create in step three we create a thread again nothing new here same thing okay so first of all I'm going to create a message here and for now I'm just going to say what is mining something like that that's okay so let me go ahead and create a thread here so thread uh just client beta threads and we just go ahead and create a thread need no need to pass pass anything and let's go ahead and get the thread ID right away that ID let's go ahead and print thread ID li like that say run the assistant so I'm going to say run client threads runs create eight okay and we need to pass the thread ID so it's going to be thread ID as such and assist ID going to be assist ID and instructions I can just put something here that says please address the user as Bond as Bru I'm also going to go ahead and pull in this weight for run completion we've seen this before so no need for me to go through the idea is that it's going to go ahead and wait for a few moments make sure that everything is running and then it's going to give me the time formatted elapse time to say how long it took to run and everything okay so we've seen this before that's what we're going to be using of course to run right through our uh to run it so now we're going to go ahead and say run it how do we do that I'm going to say wait completion and then I'm going to pass the client which is going to be our client and let's pass the thread ID it's going to be thread ID and let's pass the Run ID which is going to be run. ID as such okay because we have the run here okay and of course if you want we can check the Run steps logs and this we've seen that before so there we go so very simple um let's go ahead and run this most importantly we know hopefully that we're going to be able to push this cryptocurrency PDF um file into open ey embeddings right so it's going to go into do all the things that I've showed you before what happens in the back end and we should have an assistant let's go ahead and run this real quick if all goes well we should be able to go so I'm going to say Python 3 that's that and run so we got some things here but let's go ahead first and get the assistant ID so we copy that and add it here let's get the thread ID and put it here okay so that next time we can run things differently so let's go to open AI here the assistance in the back end let's see if this actually worked if I go ahead and refresh here we should see indeed that we have study buddy this is our new assistant there is the ID and everything is good if I click of course we have all that information and the model that it's using and most importantly we see that the retrieval is ticked as well as the cryptocurrency PDF file was uploaded this is real great we knew this would happen of course but it's always nice to see and most importantly says assistant response to document understanding C currency by the University of Kentucky blah blah blah so it goes through all the things really and does a a summary of the everything okay which is good and also we have the Run steps and voila so nothing new what we seeing but most importantly we know that things are working because we got the document uploaded and this it's part of the knowledge base now okay let's go close this and now that we have the IDS right so we don't have to go back and recreate the same assistant uh we're going to hardcode them here this is just for testing purposes and now we no longer need to create this so I'm going to go ahead and comment this out as well as comment this out and what else I'm going to comment this out also cuz we don't need that so now before we run I can then create the actual message so I'm going to say message is equal client beta threads messages and I'm going to create a message which means I have to pass the thread ID pass the thread ID right and roll it's going to be user and content aha this is where we pass our message which is the query per se what is mining okay so now you should get an answer of what is mining because we have added or pushed into the embeddings right uh the file in this case the PDF file about cry cryptocurrency so it should know how to answer to that let me go and save this make sure everything is good okay so everything seems to be great let's go ahead and run again so that means now we should be able to see the answer pertaining to what is mining so it's going to go and get look at the document that we uploaded and answer according to that document so assistant response mining is a process through which uh cryptocurrencies can be obtained it involves the creation of block and blah blah blah and everything it tells us that this was actually able to get the information from that PDF file which is wonderful so this is working so there we go it's very simple if you go back to the code here you can see we still have uh one hopefully just one because we didn't repeat things right we have study body and everything is there and if I click I should have still the file and I can upload as many files as I want of course we'll get there but the basics is here so so you're able to see how to get in this case retrieval the knowledge retrieval how to get this to work by uploading a file a PDF file to enhance the knowledge base for our assistant API all right there you have it now that we know how to upload files and Converse per se ask questions uh about that file in this case the PDF file that we uploaded in conjunction with our assistance API it is time for us to do something a little bit cooler which is to build our study body so the idea is we're going to upload the file the one that we're uploaded now and maybe another file and then start chatting and asking questions about those files or those PDF files documents let's go ahead and do that so what I'm going to do here I'm going to create yet another file uh to differentiate a few things so I'm going to say main.py or py and the differentiation is going to be little I would say minimal so let me get all of these code from the app file and pass it over so we have everything here let's see and actually we need to get the IDS because we need them I'm going to copy that and put them here and and in this case we no longer need that so let's just get rid of that all together all right now because the nature of this application this is going to be a stemulate application there are a few things that we need to do to set everything up so the first thing I'm going to put here is the nature of streamlit is that we need to make sure that we have sessions and any time you hit enter or click a button uh in a stream lad application what it happens that it's going to go ahead and reload the entire application the entire view or the entire window which is not what we want so uh I'm not going to go into this whole session thing with streamlet just this is going to help us especially when we want to create uh this chatbot using streamlet and the great thing also about streamlet is that all of that is included so there is actually a chat form that we can create quickly with streamlit that's why streamlit is pretty cool okay so first I'm going to go ahead and initialize all the sessions that we need okay okay so I'm going to start by putting an if statement here if file ID list so this is going to hold all of the file IDs because potentially we can upload more than one file and not in sd. session state if that's the case then we're going to create that session session state. file IDs list and that's going to be just an empty list okay we just have to do this and I'm going to do another one as well so if start chat which is going to be part of a button really not in sd. session State s the session that start chat I'm going to just say it's going to be false what else now I'm going to use the thread if thread I ID not in session State and then we're going to say St session state DOT thread okay very good those are the sessions we need to set up okay we're going to go straight and start setting up the front end in this case the page so I'm going to go ahead and just say set up our front end page and to do so with it is extremely simple I'm going to say St and then set there's a function called set page config and here we can pass a few things so I'm going to say page title say study buddy say chat and learn that sounds very good and Page icon we can actually pass an icon here like this books okay so you just put this is the icon representation of a stack of books this is where we're going to start our function definitions Etc so essentially this is where the fun will start so the first thing we need to do is to figure out a way to upload a file to open AI which we know how to do that so I'm going to go and Define the upload AI so we need a file path okay and and I'm going to go ahead and do that we've seen that before with open and I'm going to find file pass the file path and then say RB and I'm going to say as file and I'm going to say response in this case I'm going to go get the client files create and then pass the file which is going to be just the file uh that we have here we got here right and then I'm going to get the path or read actually because it's going to come in in this case I want it to come in as bytes okay stream really all right and then of course I'm going to pass the purpose going to be assistance and what I want to happen for this function is I want to return the actual ID so I'm going to say response. ID so this will return the ID of the file that was uploaded very simple and next what we'll do here we're going to create a sidebar okay the Side Bar say where users can upload files so here I'm going to say file upload I'm going to put that in a fun in a so I'm going to put that in a variable because we want access to that so file upload and to generate a sidebar in streamate again very very simple so we just say St that's sidebar tou and I'm going to say dot file uploader because we want actually a sidebar fly a sidebar with a file uploader and we can pass some text to say upload a file to be transformed into embeddings in a real application obviously you probably don't want to talk about embeddings because most users won't even care but it's okay we're here and then I need to pass here a key just to say something file upload and that's that now we can also add a button that says when click then they can actually upload the file okay so this is going to be just um the interface where they can upload the file right drop the file and then we need to allow them to click to say actually want to upload the file that we just dropped here upload file button and we can also store the file ID so I'm going to say if SD that's sidebar as such I'm going to create a button and this is going to be upload file and you going to this will make sense once you start seeing things but I hope you're seeing the pieces coming together I'm going to say if in this case File uploaded this should be file uploaded okay if there's something there if I let's see uploaded there we go we got to go ahead and open file uploaded in this case and get the name and this should probably be F string and we need to pass that we want to say here we want to write this as a binary that's why we're going to say uh WB read write as binary RBS read as binary as we saw earlier here okay and all of that as F and I'm going to say F that write going to write that file uploaded okay and I'm going to say get buffer and in this case here there are times when also we want to allow users to upload more than one files so I'm going to just say something like maybe another uh file ID and I'm going to say uploaded oh let's say upload I'm going to call the upload to open Ai and then put an F string here and this I'm going to pass the file uploaded and get the name as such and let's make sure that we the we take care of the session so the session State file ID list let's see file _ id. list doesn't give me intellisense that's okay and I'm going to append let's see file ID list sure I have that file ID list file ID so this be file ID okay there we go and going to pend our another file ID my such and SD I'm going to create that sidebar and write something to to it which is going to be uh file ID and then I'm going to pass the another file ID as such so essentially we're just writing on the wall on the sidebar the ID of the other file ID that was added so each time we added a file and then we can see all those IDs okay so what I want to do next is I want to uh display play those file IDs so I'm going to make sure again look at session State file ID list if that's all good then I'm going to go to sidebar and write in this case uploaded file IDs so this is where we're actually showing the thing things really and then at the bottom we say for file ID and S do that session I'll make sure I get the right list okay because it's going to be a list with all those file IDs that have potentially been uploaded and I'm going to write into the sidebar again and I'm going to pass the file ID now once we have these file IDs need to associate them to the current assistant that's very important because each assistant can have multiple files okay so how do we associate them so I'm going to write here associate each file ID with the current assistant okay so I'm going to say assistant file really and say client beta and assistants. files and I'm going going to go ahead and create to create a file as you know by now we need to pass the assistant ID which we can get by say assist ID right oops assist ID and then we need the file ID which is going to be file ID that we have there okay so that's how we associate that each file that we add is going to be Associated to the correct assistant okay next we are going to go ahead and SA button to initiate the chat session okay we're getting there okay so I'm going to put in if state so you'll notice that in streamlit to start in this case to initiate something Handler right a buttonclick handle Handler of of some sort you say SD put an if sd. sidebar. button and I can say start chatting and this is where we handle the click okay so first we need to make sure that uh all the files have been uploaded that's very important so that we can check that by saying STD go to session State and then file id id list okay make sure that we have that session which means we have something and then we're going to make sure that our session state for start chat in this case is going to be true because that means we have everything set up for things to be get going because we've just clicked so that means we have the file ID session which means we have IDs that means then the session for the start chat has to be true at this point okay so now we're going to create a new thread we could create a new thread can just go ahead and use that same thread that's okay we're just going to and create a new thread uh for this chat session okay okay so again nothing new you know how to create a thread so I'm going to call this chat thread and so I'm going to say client or yes client go beta uh threads and create a thread okay now we have the thread set the session again of that thread this is very important a lot of sessions here for the reason I said so that's just how stream lit works and uh session State and I'm going to use the thread ID and I'm going to pass the our chat thread. ID so now we have set the session for this whole thing the thread ID session to the thread ID of this newly created thread okay I'm going to write something to the wall all right so so I'm going to say thread ID and I'm going to pass the chat. ID chat thread. ID notice that we inside of this if statement here that handles the on click and then else if none of that is true I'm going to go ahead and just say something sd. side r. warning right we can just invoke a warning so the text is going to be redish and I can just say something uh no files found please upload a at least one file to get started all right very good so we're making real good progress here so one thing I want you to keep in mind is that as we pass this documents to the embeddings the open eye embeddings so we are able to attach all that information to enhance as they call it the model so we can converse or chat with it um whatever comes when we ask a question whatever comes the resulted response it also has other metadata such as citations okay to say okay this information that I got it from this place in a document now we have a very simple document but you can imagine if you have a very large document then this could be very helpful and so what I'm going to do here just in the interest of time I'm going to paste in a helper function that will essentially process message with citations okay so it's very simple as you see here extract content and annotation from the message and format citations as footnotes so it goes through gets the content that we get for as a response right and then that and go goes through and looks for certain annotation looks for certain attributes in the message the whole payload uh where we see annotations and if it sees annotations of course it creates those annotations goes through creates their annotations and so forth so now there are some limitations because we said that we can pass different files right which we will see but in this case here um for retrieving decided files we're going to do things uh we're going to use some dumi way or dumi data to get that going and I'm hardcoding here just is for testing purposes I hope by the time at some point once this assistance API is mature we have ways to do certain things such as such as calling the cited files details instead of us having to do all this okay so but this is just to give you some ideas now again this is not perfect code um it just works for what are we trying to do here to give you some ideas okay so in this case here for the file name cited file we are putting in this case the cryptocurrency PDF right hardcoded it again not a good idea but that's what we're doing anyway okay so that's what we're doing and then we append we have the citations list here and as all of that is happening we retrieving all those annotations and we're painting all of them so that everything is set up okay so that's what we do and after that we create a footnote in form of a a full response and we get that information we put it all together and then we'll return that so that is essentially what we're doing in this process message with citations let's go ahead and continue putting together the front end the API okay or I should say the the page itself so I'm going to say the so here is where I'm going to put the main interface so we can actually see things okay so I'm going to use streamlit again and I'm going to add a title for our page call it study body now notice the difference here I'm adding the title before we're adding the title to the page configuration which is those are two different things and if you want to learn more about streamlit which I encourage you to do we can just Google real quick or stream lit and then go to documentations it is the most simplest straightforward way to create prototype applications okay that's very good in Python and I'm going to also St stream L here I'm going to write something here kind of like a subheader and I can say learn fast by chatting with your documents okay good for marketing I guess okay next we are going to again check a few things check sessions to make sure everything is good so we can proceed so first we're going to check that the chat is not already in session so to do so we're going to say if St go to sessions that chat oh start chat and if there is that session so if there is a chat session that means things have started so now I'm going to go initialize them and this now we're going to go ahead and and now we're going to go ahead and initialize our model so I'm going to say if open AI model not in session okay I'm going to say st. session state. open AI model I'm going to just say this is going to be the chat GPT or GPT 4 like that so we're using the preview okay and that's the only thing that actually works with what we're trying to do if you try to do jpt 3 Turbo 3.5 turbo it's not going to work and also I'm going to check messages not in St session state then I'm going to say s State messages set that to empty so this is going to help us of course with the bot with the chat bot all right so let me go ahead and show existing messages if any so four messages in st. session that messages and I'm going to now invoke the chat notice that this chat this is what I talk about notice as I said we don't have to do anything really when it comes to creating a chat a chat box per se um stream lit has that so I can say do chat right it's part it's part of the framework so I can go ahead and say chat message all right look at that and I'm going to pass the message or message in this case and get the role this has to change to message okay singular and then we're going to go ahead and add that and then we're going to write the content inside of a markdown okay so I'm going to say message and get content of that message okay so now we putting together the actual chat and this will make a lot of sense once we start running this and apologize there's a lot of code but believe me this is going to work well we hope okay so now we're going to chat the user so now we going to go ahead all right now we're going to go ahead and say chat input for the user so this is where they're going to add something to as a prompt so say if prompt in this case s see that chat prompt look at that we have chat input as they call it that's the beauty of streamlit I'm going to say what's new that's going to be the first thing that will see so what's new all right which will allow them to then add user this so next I'm going to go ahead add user message to the state and display on the screen so I'm going to put session messages and I'm going to pend in this case I'm going to pass in as a dictionary so first of all do roll and user okay it's going to be user for role and then for the content that's where we going to pass the actual prompt we're going to say chat messages or message and this is we're going to show that this is part where the user so we have the user so this is the user chat message and we're going to write that using a mark down and we're going to pass that prompt so now we're going to go ahead and add the users message to the existing thread how do we do that well we're going to use client go better and go to threads and messages and create that message and how do we get or what is this me what we need to create a message we need a thread ID so we're going to go through our session again because that's what's driving everything and go get and thread get a thread ID and we need the role in this case going to be user and the content is going to be our message oh actually it's going to be our prompt right to create that message very good okay we're getting there next we're going to create create and run create a run with additional instructions okay so I'm going to say run again nothing new here beta threads runs and create need to pass the thread ID so I'm going to go go through the session State again get a thread ID and then assistant ID we pass the assist ID and then I'm going to pass instructions I have the instructions or instructions and then let's pass the instructions which I have here so please answer the questions using the knowledge provided in the files when adding additional information make sure to distinguish it with bold or underlying text most us most likely they won't do that but it's okay just to make sure we can distinguish things so next what I want to do is I want to be able to show a spinner as all this process is happening before we get the actual response so that's good user interface addition so show a spinner while the assistant is thinking okay okay so I'm going to say with spinner so I stay spinner and it's going to say wait generating response such and then inside here I'm going to put a while loop so I'm going to look at the run right so status we could have done we've done this differently before but that's okay but we can just go straight here status if it's not completed then we're going to sleep for 1 second and then run okay so can say run client beta threads runs and retrieve so we're going to retrieve in this case our run so I'm going to pass the thread ID which we know we need to get from the session session State and get the thread ID and then pass the Run ID which we can get that from just run. ID okay and outside the while we are going to then retrieve messages added by the assistant okay I'm going to say message or messages in this case I'm going say client get to go to threads where that's where all messages are and messages and go to list and of course we need to pass the thread ID go again to session as such so now we have all the messages and we can process all of that I'm going to process and display assist messages okay so I'm going to put everything into inside of a list to make things a little bit easier so I'm going say assistant messages for run okay and I'm going to pass the message okay that's very important and I'm going to pass a for and then and then we're going to actually pass a for Loop inside here which is pretty cool for messages or actually for say message in okay say message so we pass message first and then on another index here we're going to go do a for Loop so it's for message so so what we do here we have a message and then for message in messages so going to make sure that if message that run ID is equal to run. ID and message. roll is also equal to assistant so essentially just making sure to put all of the messages for our from our assistant into this array so that way we can then Loop through them so in this case here I can say and once we have that this list this array list I can say for message I know a lot of message here and then go to our assistant messages for run because it is indeed a list so we can Loop through it um in this case here I'm going to just say full response and I'm going to say process message with citation this is where we're using that function that helper function we created earlier or just add it there and I'm going to pass message it's going to be equal to messages actually it's going to be equal to message because we inside of a loop so whatever are we getting there and when that happens we are going to also set the session State messages and append all those messages in so in this case going to create a dictionary here so so for the role it's going to be assistant and again for Content we going to pass the full response so create a dictionary to add into our messages State okay and then here I'm going to go ahead and get the chat message because we need now to use that which is going to be the assistant and then we're going to add that all those responses onto the screen so I'm going to use mark down again and pass the full response and I'm going to also pass the unsafe allow to True okay and say all out to true for HTML so if you have over um let's go mark down here this will you can scroll down and see that the unsafe allow bullan by default any HTML tags found in body will be escaped and therefore treated as pure attack this Behavior may be turned off by setting this argument to true all right okay so it's hard to show you everything but we are inside of if in this case to make sure that we chat input for the user so I'm going to come down here go to that level I'm going to say else if none of this is actually happening that means we can prompt use users to start chat so we just say St and say write we can just write something and say please upload at least a file to get started by clicking on the button say on the start chat button and such all right there's a lot of things here but that's okay should be all good okay again remember you will have access to this code so it's not a big deal so essentially we are creating this chat and there's a lot of sessions going on here but that's important like I said because with streamlit you have to make sure that the sessions are all set up because streamlet whenever you click a button it refreshes the entire page and that means you start from scratch so you lose all the state so we want to make sure we have the state that's why we have all this state thing going on here want to learn more about that you can check out their documentations okay so we should have everything set up for us um let's see if this works let me go ahead and um make sure that we can say stream stream lit run and make sure we're running the main not the app that Pi or py in enter and you can see we have this very nice usern interface that was created which we can go ahead and use so for now let's see if this works I'm going to go to browse and then I'm going to go ahead and get the crypto currency again and there we go we have this cryptocurrency it's there now we're going to go ahead and say upload it's uploading and voila so that file was indeed uploaded file ID uploaded file ID is there very good so is it true if we go back to if we go to open Ai and let's go refresh and we can actually look at the files we should hopefully see cryptocurrency one of these files I added a little bit ago is going to show us exactly uh the the purpose status is ready and how the size of it and of course also the file ID okay we have two there but that's okay now let's go back to the application and let's start chatting so click Start chat and what's up I'm going to say tell me about data mining let's go ahead and see what's going to happen so voila you can see the weight generating response is working and then we have this all this was given to us uh by streamlet that's really if we had to build all of that ourselves that would be pretty um would take us a long time okay so now it's going to look at the cryptocurrency and look at it and make sure that it gets the information that it needs it appears that there may be some confusion around the term data mining it is it pertains to cryptocurrency which the uploaded files seem to disguise aha this is good because it's saying the uploaded files seems to disguise so he looking at those two files that one I uploaded before and that's okay usually you should probably just get one there uh but also it's probably from the previous upload that we did when we first ran this it's okay so in this case they're mining in the context of cryptocurrencies usually refers to the process of mining cryptocurrencies themselves and blah blah blah and there we go so uh we can say can you tell me how many crypto currencies are the are discussed are being discussed in the document hit enter and voila there we go okay there we go apologize in convenience but seems there is an issue accepting the content document title Cryptor PDF the page has had no contents uh when I tried to open it which means means I cannot determine how many C okay all right that's okay uh what I can do again remember this is still in beta sometimes happens so what I can do let me see if I can delete one of these perhaps maybe that's going to uh it shouldn't that shouldn't be a thing anyway but sometimes this happens and sometimes it does weird stuff so it's okay we're just going to try again maybe this time it will work okay so now it worked say based on the search results document mentions several cryptocurrencies including Bitcoin Litecoin I think that's what it called ether and potential others are not named explicitly and blah blah blah that's really good I can also ask now the other thing also I can go ahead and upload a different file or another file okay so I'm going to say upload oh shoot so this is a problem now that I uploaded I uploaded two files so if I refresh this this is exactly what I didn't want to do I should have this file just delete a few here and it's very strange because it shows all of these different files have been uploaded let me just delete some of them some of them says upload others says uploaded I'm not sure why but okay let's go ahead and delete some of them and go back go back here and I'm going to browse to go get yet another one so I have another one called lipids this is is a biology file and that's the one I'm going to go ahead and upload try again this sometimes doesn't work let me upload that one okay that file was uploaded and let's see if I can upload another one issue because we have that let's upload this one okay so now we have two files that were uploaded let's go back to opening I and I'm going to refresh here okay so we have a few files that were uploaded but one thing I can do I can go to assistant so I think this will be better and go here and I can see the files that were uploaded wow there's a lot of files that were uploaded so it looks like when you first upload something they change their names from upload first and then they the IDS are created I think that's what's happening I'm not sure it's very strange so it's a little bit buggy but it's okay so uh let's see if this works so now we're going to ahead and start chatting okay let's talk about because we have two files let me go ahead and talk about biology I'm going say what is a lipid okay so now it should be able to go and fetch the file in this case the lipid the biology file that has information about lipids and so forth hopefully all right this worked so lipids are biological molecules that have limited solubility in water and are soluble in nonpolar organic solvents okay so this is really good because it went and got the information from the document because we have even the source and everything here that is showing very good so I can also go back and ask about this case um cryptocurrency what is crypto okay so what comes here with four resources crypto such as Bitcoin litcoin and all this stuff and explains everything and very awesome okay so this is actually working which is very exciting now remember these are just examples that I assembled really to Showcase how to use assistance API and so that you can take this to the next level okay so this is no production code obviously for many reasons but at least gives you some ideas the other thing also to remember is that the assistance API is still in beta which means they're still working on it and maybe some apis will change by the time you're watching this but I hope you understand at least what's happening the basics of how assistance API work I give you a little bit the rundown of the vector store embedding so how things work in the background and how assistance API in so many ways allow us developers to really not think too much about what's in the background which is really exciting but also I need to let you know that with that we get a lot of some disadvantages meaning that we don't have a lot of control but with all of that flexibility all of that abstraction we also lose a few things one of the things you will notice even though assist is API it's most likely going to get keep getting better um it's important to also know that there are other tools that you can use that perhaps give you a little bit more flexibility ability but also that means that you have to do a little bit more work per se not too much uh there's this tool called Lang chain which I'm just going to let you know about it's a wonderful framework that allows you to really assemble many other many other models in this case many other large language models because there's not just um opening eye chat gbts and gpts there are many others as well for this framework you are able to actually see most of the things we talked about most of the things that open a I have abstracted things out for us which is a good thing but you're able to see or be able to do more in the backand in terms of choosing your own Vector stores indexing all your documents so the process that I showed you in the back end that's happening um you will actually be able to see more it becomes more apparent if I may say that all right so that is a different topic but just something to keep in mind and I hope this course has given you something at least to think about some good starting points when it comes to the assist and API and you can keep learning of course watching for the documentation because things will change that's just a known um fact and so but I hope this course was able to give you the tools that you need to at least start thinking about how to use the assistance API to build all sort of things and now we didn't touch on the on using the code interpreter as a tool directly really but that's something you can do as an exercise so you can create a bot or you can create a tool that will analyze code in fact I think we talked a little bit as an exercise earlier but now you have the tools you know stream lit or at least you have some ideas you can use that to create a code body something like this right or a uh pair programming buddy or something like that that will help you debug things and go from there right so a lot of things that you can do here a lot lot of things but I've just scratched the surface and I hope you enjoy this course I hope you like this style that I use to to teach this course and I hope this was useful thank you so much for your time and I'll see you next
