With timestamps:

00:00 - hi there welcome to this course on
00:02 - getting started with the java platform
00:04 - my name is matt speak i'm your
00:05 - instructor for the course and
00:07 - in this course we're going to go through
00:09 - all of the um kind of introductory
00:11 - things that you need to know about the
00:12 - java platform to be able to get started
00:14 - in other words to start your um kind of
00:16 - like develop a career if you like with
00:18 - java platform so a few things to say
00:20 - about this course um first off this is a
00:22 - course for complete and absolute total
00:25 - beginners so it doesn't matter if you've
00:27 - maybe had a little look at java before
00:29 - or if you know nothing about java
00:30 - whatsoever don't worry about that i take
00:32 - things completely from first principles
00:34 - so you're not going to get stuck you're
00:35 - not going to get into any kind of like
00:37 - um issues where you're not sure how
00:39 - things work just of course it's going
00:41 - too quickly everything in this course is
00:43 - designed to be completely and totally
00:45 - absolute beginners i promise you it's
00:46 - absolute beginners so you should be fine
00:48 - for this so that's all well and good but
00:50 - what's actually included in the course
00:51 - what are you actually going to learn so
00:52 - in general you're going to learn three
00:54 - things three things you're going to get
00:55 - out of this course and that's basically
00:57 - that we're going to get you set up with
00:58 - the tools that you need to be able to
00:59 - program in java so there's a certain set
01:01 - of tools that we need to get installed
01:03 - onto your system so we're going to get
01:04 - you up and running with that so you'll
01:05 - be able to get started and take it
01:07 - further you'll have all the tools
01:08 - installed in your system by the end of
01:09 - the course the second thing is that
01:11 - we're going to look into core concepts
01:12 - of java obviously core concepts we mean
01:14 - basically the the absolute fundamentals
01:16 - that you need to know to be able to get
01:18 - started with the platform so if you've
01:20 - heard terms like for example jvm jdk jre
01:23 - ig things like that class files by code
01:26 - don't worry about all of that now we're
01:27 - going to explain it all over the next
01:29 - few lessons so you're familiar with
01:30 - those core concepts and finally the
01:32 - other thing the third thing
01:34 - you're going to get out of this course
01:35 - is you're going to get a feel for java
01:37 - so by the end of the course you're going
01:38 - to know whether you want to take it
01:39 - further you know how it kind of feels to
01:41 - you it's a programming language as a
01:42 - development environment um i think
01:45 - you'll take it further because it's a
01:46 - really fun um and exciting programming
01:48 - environment to to program in um but at
01:50 - the end of the course you'll know
01:52 - yourself and you'll be able to make your
01:52 - own decision so those are the three
01:54 - things you're going to get out of this
01:55 - course okay you set up with the tools
01:57 - okay you set up with the core concepts
01:58 - and you'll have a field to know whether
02:00 - you want to take it further okay so if
02:01 - all that sounds good to you let's get
02:03 - started
02:06 - we're going to have a look at the java
02:08 - platform as a whole and we're going to
02:10 - basically see the core features of java
02:13 - and we're going to see why and java has
02:15 - become so popular in the marketplace uh
02:17 - have a look at who uses it and what kind
02:19 - of features and benefits it gives us and
02:21 - really yeah you're going to get a kind
02:22 - of like a flavor of
02:24 - of the bigger picture if you like so
02:25 - actually what java is so let's jump in
02:28 - so the first thing to know about java is
02:30 - that java is the world's number one
02:32 - programming platform right now today in
02:34 - 2021 and this is really quite exciting
02:36 - because it actually means that you're on
02:38 - the cusp of learning something extremely
02:40 - valuable obviously with that marketable
02:42 - as well but all of that as a package
02:44 - together and i want you to realize this
02:45 - takes you to the place right now where
02:47 - you're on the cusp of learning something
02:49 - really exciting and even potentially
02:50 - life-changing for you as well now i
02:52 - don't see this lightly but to be honest
02:54 - if you want to have a career as a
02:56 - developer as a software engineer then
02:58 - pretty much java is the best option for
03:00 - you at this particular time because it's
03:02 - been popular now for well over a decade
03:05 - um it doesn't look like it's going to
03:07 - change anytime soon with all of the um
03:10 - different features that have been
03:11 - evolved
03:12 - the marketplace share that it has the
03:14 - kind of foothold that it has in the
03:16 - market in other words like all the
03:18 - different companies that are using it
03:20 - and that kind of thing so this genuinely
03:21 - is a really really really exciting
03:23 - opportunity for you if you feel like
03:25 - you'd maybe want to go down that route
03:26 - of being becoming a professional
03:28 - software engineer now don't just take my
03:30 - word for it we can look at a website
03:31 - there's a website called i'm not sure i
03:33 - pronounce it it's taiyobi.com or
03:35 - tirbe.com
03:36 - it stands for the importance of being
03:38 - earnest and what it does is it tracks
03:40 - the popularity of programming languages
03:42 - by looking at the amount of web searches
03:44 - that people have done for that
03:45 - particular programming language i'm kind
03:47 - of plotting them in a graph as we'll see
03:49 - so if we just jump in now i've got
03:50 - chrome up here popular web browser if i
03:52 - just jump into tayabi.com here we can
03:55 - see we've got the website for it and
03:56 - right over here on the right hand side
03:57 - you'll see this tab index so if we click
04:00 - that
04:01 - and we just scroll down
04:04 - you'll see that there's a graph at the
04:05 - bottom of the page so here we are so
04:07 - this graph is basically charting the
04:09 - popularity of the most popular
04:11 - programming languages that there are
04:13 - today and you can see it's here it's
04:15 - giving you've got a c java python c plus
04:17 - plus c sharp these are different
04:19 - programming languages that you can
04:20 - choose to go up software in the main
04:22 - thing that i want to point out here is
04:24 - if we click on one of these specifically
04:26 - click on the java one then from this you
04:28 - can clearly see by looking at the line
04:30 - graph that's highlighted which is the
04:31 - one in black just the one for java you
04:33 - can clearly see that java pretty much in
04:35 - general is ranked over and above any of
04:37 - the other languages so while there might
04:38 - be some contenders for that kind of
04:40 - number one spot namely with javascript
04:42 - and python which you may have heard
04:43 - about in spite of this java is still
04:45 - pretty much number one and it looks like
04:47 - it's going to continue that way for
04:48 - quite some time so just know that what
04:50 - you're actually learning in this course
04:52 - when you're establishing the beginning
04:53 - of that journey as a java software
04:54 - engineer you're learning something that
04:56 - is very marketable and ultimately going
04:58 - to be very profitable for you as well
04:59 - for the foreseeable future so i just
05:00 - wanted to point that out first of all so
05:02 - we've seen that java's the number one
05:04 - programming language today the next
05:05 - question you probably have is well okay
05:07 - who's using it then well pretty much all
05:09 - of the big players today use java as a
05:11 - development platform and so if we go
05:13 - through some of these now google use it
05:15 - so you're obviously familiar with google
05:16 - the popular search engine the most
05:18 - popular search engine in the world that
05:20 - uses java on the back end to power its
05:22 - products amazon huge ecommerce store the
05:24 - biggest e-commerce store in the world
05:26 - they use java 2. and why would companies
05:28 - like google and amazon choose to use
05:30 - java the reason for that is because of
05:32 - java's so-called scalability what that
05:34 - means i won't go into it too much but
05:35 - what it means basically is if you think
05:36 - about it with amazon or with google you
05:39 - have pretty much millions of people at
05:42 - any one time who are making requests on
05:44 - the website so for example in amazon
05:47 - they're looking up orders looking things
05:49 - up in the product catalog making orders
05:51 - changing things getting recommendations
05:52 - all that kind of stuff millions of
05:54 - people at the same time are using that
05:56 - website and this is possible because of
05:58 - the power of java because of its
05:59 - scalability for java you can pretty much
06:01 - um kind of like chain different java
06:03 - processes together kind of like grouping
06:05 - a whole load of computers together if
06:07 - you like so that the total combined
06:09 - power of all of those computers together
06:10 - can be used at the same time to be able
06:12 - to deal with all those millions of
06:14 - requests so that's pretty much the power
06:15 - of java so it's an incredibly powerful
06:17 - language and it's something in fact the
06:19 - main thing that's the reason for its
06:20 - popularity places like google and amazon
06:23 - but it's not just search engines and
06:24 - e-commerce sites we also have streaming
06:26 - services as well so for example spotify
06:28 - the popular music streaming service that
06:30 - uses java in addition netflix they also
06:33 - use java as well the reason they use it
06:35 - is because again it's about java
06:37 - scalability this aspect that it can be
06:39 - very powerful i can service multiple
06:41 - clients that means multiple people on
06:43 - their different devices millions of
06:45 - those people at the same time but it's
06:47 - not just limited to those companies
06:48 - either if you look at social media for
06:50 - example we'll see that facebook use it
06:53 - twitter uses it
06:54 - linkedin uses it
06:56 - pinterest and instagram user as well so
06:59 - by now you should be getting a real
07:00 - picture of the scope of java you know
07:03 - google amazon spotify netflix all the
07:06 - social media companies facebook twitter
07:08 - linkedin pinterest instagram i mean this
07:11 - is huge it really is huge if you ever
07:12 - want to get into something or rather
07:14 - some form of technology that has a
07:16 - future java is the thing to be getting
07:18 - into so it's good that you're on this
07:19 - course to be uh to make those first
07:21 - steps into that java development career
07:23 - so all these big companies use it where
07:25 - is it use them well various different
07:27 - places it's used in mobile phones and
07:29 - tablets the android platform for example
07:31 - is based entirely in java and so
07:33 - therefore java is the backbone all
07:34 - android devices but not just handheld
07:36 - devices either we also see java in huge
07:39 - cloud-based applications powered by
07:41 - hundreds of different servers at the
07:42 - same time surf is just a fancy name for
07:44 - a computer that allows a website to run
07:45 - by the way we see java used there as
07:47 - well and that's because of its power
07:48 - that we've just seen in fact java powers
07:51 - three billion devices all around the
07:53 - world which is pretty phenomenal if you
07:55 - think about it three billion that's a
07:56 - massive number so on three billion
07:58 - different devices all around the world
08:00 - java's running providing this powerful
08:02 - backbone for all these devices across
08:03 - the world globally
08:05 - pretty exciting stuff i think you'll
08:06 - agree so if everybody's using it and
08:08 - java's so popular why is it so popular
08:11 - well there are a few reasons for java's
08:12 - popularity and let's just dip into a few
08:14 - of them now if you don't understand all
08:16 - of these don't worry i don't expect you
08:17 - to understand them but we'll just give a
08:18 - few bullet points what makes java just
08:20 - so popular so first up is platform
08:22 - independence and what this means is that
08:24 - java has this idea called write once run
08:26 - anywhere which we'll see shortly and
08:28 - that means that you can write a program
08:29 - once or one machine for example on
08:31 - windows and then you can run it on all
08:33 - of the different machines so you can run
08:34 - it on a linux machine or a mac or a unix
08:37 - server or wherever else and so we have
08:40 - this notion of platform independence
08:41 - which is a hugely powerful concept it
08:43 - means that effectively you don't have to
08:45 - rewrite the same software in other words
08:46 - reprogram it reprogram your application
08:48 - that is you don't have to redo that for
08:50 - each different machine type so for
08:52 - example supposing i'll write an
08:53 - application on windows and then i want
08:54 - to release it i have the ability then to
08:56 - release it on mac and on linux without
08:58 - having to reprogram the whole
09:00 - application in mac or reprogram the
09:02 - whole application in linux so that's the
09:04 - first thing platform independence now
09:06 - the second thing pretty much is the
09:07 - thousands of libraries that we have so
09:09 - in java there's this whole kind of
09:11 - software movement called open source and
09:13 - in a nutshell what that means is that
09:15 - people have already written components
09:17 - those are kind of like mini applications
09:19 - if you like which you can assemble
09:20 - together to make your own application
09:22 - people have already created all of these
09:24 - libraries all these different components
09:25 - there are literally thousands of them
09:27 - and they're available completely for
09:28 - free now what this means to you is that
09:30 - you don't have to write that code it's
09:32 - code that you get for free you can just
09:33 - incorporate that code into your
09:34 - applications and use the features which
09:37 - that component gives you so very
09:38 - powerful very beneficial having this
09:40 - idea of so-called reusable components
09:42 - that's another key benefit of java as
09:44 - well additionally as we've seen we've
09:45 - got the versatility of the platform the
09:47 - fact that you can write applications
09:49 - which run on a mobile device small scale
09:51 - so just for an individual user or you
09:53 - can write applications which are
09:54 - designed to be used for millions of
09:56 - users using java in the cloud the cloud
09:58 - by the way is just a fancy term pretty
10:00 - much of um saying that you have hundreds
10:02 - or thousands of computers all working
10:04 - together to do one particular thing or
10:05 - execute one particular program which in
10:07 - the case of amazon for example will be
10:09 - its website don't get hung up on the
10:10 - idea of a cloud but that's just
10:11 - basically what the cloud means here java
10:13 - has this versatility to be able to run
10:14 - on one device or on hundreds or
10:16 - thousands of devices at the same time
10:18 - very powerful very beneficial for
10:20 - companies as well since they can build
10:21 - huge ecommerce stores like amazon we've
10:23 - seen another aspect to java's popularity
10:25 - is the market share that it has kind of
10:27 - like the foothold in the marketplace so
10:29 - because so many different people use
10:31 - java so many different companies rather
10:32 - use java plus as well because it's been
10:34 - going for 25 years now i think it's
10:36 - about 25 years i think it was 1996 when
10:38 - it came out and because of that it means
10:40 - that there are a lot of skills on the
10:41 - marketplace people who know java it also
10:44 - means because we have so many different
10:45 - companies using it and different
10:47 - developers using it there's a very
10:48 - lively kind of community and a huge
10:50 - source of documentation java technology
10:52 - itself which is also really really
10:54 - useful which also brings us to this idea
10:56 - of the developer ecosystem that's
10:58 - basically all of the tools and
10:59 - technologies that surround java itself
11:01 - that have been developed to make your
11:03 - life as a java developer much easier so
11:05 - all of this together as a package for
11:06 - you personally means that java's got a
11:08 - bright future it's got tremendous job
11:10 - opportunities a market opportunity for
11:12 - you personally it's pretty easy to use
11:14 - and versatile to get pretty complex
11:16 - stuff programmed quickly and easily
11:18 - because of all of the different
11:19 - libraries that you have as well and
11:20 - there's a ton of documentation out there
11:22 - and useful tools which can help you get
11:23 - started so that's an overview of the
11:25 - java platform itself now let's have a
11:27 - look at the java language which has also
11:29 - been central to java's success so the
11:31 - reason the java language is so popular
11:32 - which is pretty much the heart of the
11:34 - platform itself comes down to a few key
11:36 - reasons as well so first up we have the
11:38 - fact that it's pretty simple to use it's
11:40 - simple to use it's easy to understand
11:42 - it's got less of a path or rather less
11:44 - of a learning curve for you when you get
11:46 - started so it's a pretty accessible
11:48 - language to be able to just pick up and
11:50 - start to get started with so that's one
11:51 - of the key benefits also related to that
11:53 - notion of versatility that we've seen
11:55 - earlier is the idea that it's object
11:56 - oriented so object oriented is a kind of
11:59 - a style of programming you have
12:01 - different styles there's functional
12:02 - programming procedural programming
12:04 - object-oriented programming we don't
12:06 - have to go into detail about those right
12:07 - now but in object-oriented programming
12:09 - you basically program objects and these
12:11 - different objects interact with each
12:13 - other and it's basically a very powerful
12:14 - way of being able to quickly write
12:17 - systems which are easy to understand
12:19 - easy to develop and easy to maintain and
12:21 - extend okay so moving on another aspect
12:23 - of java is the fact that it's fully
12:24 - rounded and what i mean by that is it
12:26 - gives you access to be able to do
12:28 - everything you'd want to do pretty much
12:29 - with a computer so that means for
12:31 - example being able to test a computer
12:33 - network access disks files folders that
12:36 - kind of thing as well as interact with
12:38 - desktop so that means for example
12:40 - drawing windows and buttons and having
12:42 - dropdown menus all that kind of stuff
12:43 - java's pretty much got apis for all of
12:45 - that stuff completely out of the box
12:47 - which means that you don't have to write
12:48 - that kind of stuff you can just reuse
12:50 - the existing code that the java platform
12:52 - already gives you you'll be able to
12:53 - access networks read files writer files
12:55 - construct windows with xboxes and
12:57 - buttons on all that kind of stuff so
12:59 - that's been a good high level overview
13:01 - of the java platform as you can see it's
13:02 - a really exciting platform to program in
13:04 - and you're probably really excited to
13:05 - get started now which we'll do in the
13:06 - next videos
13:10 - we're going to look at the java platform
13:11 - itself specifically we're going to look
13:13 - at the key components of the java
13:14 - platform and see how they all slot
13:16 - together let's dive in
13:17 - now before we start i just have to give
13:19 - you a quick word of warning about java
13:21 - in java just like any form of technology
13:23 - or any form of programming it's not
13:24 - specific to java this is any form of
13:26 - programming or anything to do with it
13:28 - there are always going to be lots of
13:29 - acronyms but those are abbreviations for
13:31 - things you're going to hear things like
13:33 - jdk jvm jre things like that don't worry
13:36 - about that we're going to define those
13:37 - shortly it's just a word of warning
13:38 - about that and also not only acronyms
13:40 - we're going to have a lot of terminology
13:42 - as well so we're going to hear terms
13:43 - like byte code source code class file
13:45 - compilation those kinds of things again
13:47 - when you first hear a word that sounds
13:49 - technical or you come across these
13:50 - abbreviations it can seem kind of
13:52 - daunting because because you don't know
13:54 - what the acronyms and terminology means
13:56 - but don't worry about that don't be
13:57 - dissuaded don't be put off you'll
13:59 - explain all of these in this course i
14:01 - just want to give you that quick word of
14:02 - warning
14:03 - so yeah above all don't panic that's the
14:05 - key thing do not panic all will be
14:07 - explained
14:08 - now let's start off with the key point
14:10 - about java which is this notion of
14:12 - platform independence java has this idea
14:14 - of something called wara w-o-r-a which
14:17 - stands for write once run anywhere and
14:20 - this means that you can take a java
14:21 - program and you can run it on multiple
14:24 - machines let's have a dive in now and
14:25 - see exactly what this means together so
14:27 - let's start with my mac so i have a mac
14:29 - a and let's suppose i develop a program
14:32 - on my mac and then i go to work and i
14:34 - think you know what i could actually use
14:35 - this piece of software i could use this
14:36 - code that i've written this program i
14:38 - could use it on my work laptop as well
14:41 - but at work i've got a windows machine
14:43 - and these are two completely separate
14:44 - types of machine one's a mac one's
14:46 - windows now to you they might just be
14:48 - computers and that's fair enough they're
14:49 - just laptops or desktop machines one's a
14:52 - mac one's windows but fundamentally
14:54 - these are completely different machines
14:56 - a key part of that is that for example
14:58 - if i use an application on a mac for
15:00 - example adobe photoshop then i can't use
15:03 - that exact same application on windows
15:06 - it's true that both mac and windows have
15:08 - a version of photoshop which they can
15:10 - both run but that version is completely
15:12 - different one has code
15:15 - for mac the mac program code if you like
15:17 - and one has code for windows the windows
15:19 - program code and the actual code that
15:21 - each installation file will contain is
15:23 - completely and totally different and the
15:25 - reason for that is that these are
15:26 - completely and totally different
15:28 - machines we don't just have macs and
15:30 - windows-based machines
15:32 - you can also have linux-based machines
15:34 - so for example when we spoke about cloud
15:35 - computing earlier on or if you look at
15:37 - large-scale websites like amazon the
15:39 - e-commerce site for example you'll find
15:40 - that what powers those websites are
15:42 - hundreds if not thousands of these
15:44 - so-called server machines that just
15:46 - means a computer without a screen pretty
15:47 - much just super fast hardware or
15:49 - electronics inside to be able to power
15:51 - these huge e-commerce applications you
15:53 - also have those as well and again linux
15:55 - is a completely different type of
15:56 - machine than a mac or than a windows
15:58 - machine so given that we've said that if
16:00 - you have an application or a program on
16:02 - one machine like a mac and it's not
16:04 - possible to run it on another machine
16:06 - like windows how does java do this then
16:09 - let's take a look inside and see what
16:10 - happens so let's take a look at actually
16:12 - what's inside the windows machine
16:17 - so inside that machine first off we have
16:18 - an operating system and the operating
16:20 - system is foundational computer program
16:22 - if you like which tells a computer how
16:24 - to run and what i mean by that is that
16:26 - if you didn't have an operating system
16:28 - on for example a laptop or a desktop
16:29 - machine then you wouldn't be able to
16:31 - load any programs onto it you want to be
16:32 - able to access the internet you wouldn't
16:34 - even be able to switch it on have it do
16:36 - anything meaningful you just switch it
16:37 - on nothing would happen that's because
16:39 - all computers need an operating system
16:41 - installed on them which is kind of like
16:42 - the super program of the computer if you
16:44 - like which tells the computer how to run
16:46 - so for example it tells the computer how
16:47 - to access files how to access the
16:49 - network how to display stuff to the user
16:51 - how to print to printers that kind of
16:53 - thing that's what operating system does
16:55 - we have three different types of
16:56 - operating systems we have operating
16:57 - systems for windows mac and linux which
17:00 - is why we started off with those three
17:01 - machines initially so once you have an
17:03 - operating system installed on your
17:04 - machine that means you can actually
17:06 - start to run other programs on it so for
17:07 - example on my windows machine at work
17:10 - i can run microsoft word edit some
17:12 - outlines for a course for example i can
17:14 - also have google chrome running as well
17:15 - do some web browsing
17:17 - maybe i have outlook as well to be able
17:18 - to access email i can do all of those
17:20 - three things execute those three
17:22 - programs at the same time thanks to this
17:24 - operating system that we have and also
17:25 - underneath the operating system by the
17:27 - way
17:28 - is the microprocessor this is the actual
17:30 - chip inside the computer itself i've
17:32 - kind of grade that box out because we
17:33 - don't really need to know anything about
17:35 - the microprocessor apart from the fact
17:36 - that having an operating system means
17:38 - that the three programs at the top
17:39 - microsoft word google chrome and outlook
17:41 - they don't need to concern themselves
17:42 - with the different types of
17:43 - microprocessors so in this way the
17:45 - operating system kind of shields those
17:47 - programs away from the much deeper
17:48 - complexity of the actual chip inside the
17:50 - computer itself but in addition to these
17:52 - programs if we're looking at java we can
17:54 - also install another program
17:56 - and that's known as the java virtual
17:57 - machine now the java virtual machine is
17:59 - really where all the magic happens
18:01 - because it's this jvm java virtual
18:03 - machine it's the first acronym there
18:05 - that allows us to run different java
18:07 - applications
18:08 - so looking at the jvm once you have a
18:10 - jvm installed on a given machine
18:13 - that means that you can run bus java
18:14 - application on it
18:16 - you can run your other java application
18:17 - on it
18:18 - and again another java application on it
18:20 - so the jvm gives us a facility then to
18:22 - be able to run java programs that's the
18:24 - key point here
18:26 - now going back to these three computers
18:27 - we saw before you can have different
18:29 - operating systems on them so if you have
18:31 - a windows machine you might have windows
18:32 - 10 on there windows 8 windows vista
18:34 - windows xp those are different versions
18:36 - of the windows operating system if
18:38 - you're on a mac like i am you'll have
18:40 - mac os 10 and on linux servers you're
18:42 - going to have something like ubuntu suse
18:44 - linux redhaw or fedora the key point
18:46 - here though is that these three machines
18:48 - each have installed on them different
18:50 - operating systems however
18:52 - because each of these machines or
18:54 - specifically each operating system has a
18:56 - jvm available for it that's the java
18:58 - virtual machine special application
19:00 - we've just seen so there's a jvm for
19:02 - windows a jvm for mac and jvm for linux
19:05 - because of this that means that the java
19:07 - program that you write
19:09 - can then run on each one of these
19:11 - machines so this means you can write
19:12 - your java application on a mac then run
19:14 - it on windows or you can write the java
19:16 - application in linux and run it on the
19:17 - other two machines windows and mac it
19:19 - really doesn't matter and that's really
19:21 - the power of this so-called wara or this
19:23 - bright ones run anywhere the fact that
19:24 - java gives you the ability to be able to
19:26 - do that so you write the application
19:28 - once in java and then it can run
19:29 - anywhere you choose to put it there are
19:31 - a few other accounts as well which we'll
19:33 - just quickly go over we'll get to see
19:34 - these a bit later on too the first one
19:36 - is the jre this is the java runtime
19:38 - environment and this is basically
19:40 - effectively the package that contains
19:42 - that jvm so when we saw the jvm just now
19:44 - which was sitting on windows linux and
19:46 - mac that jvm actually comes as part of
19:48 - the jre the java runtime environment and
19:50 - that's the key there as well is the java
19:52 - run time environment because you're
19:54 - running programs but because it's the
19:56 - java runtime environment that's where
19:57 - you'd expect to find this jvm because
19:59 - the jvm's responsibility is to run those
20:01 - java programs we also have the jvm which
20:03 - we've seen the java virtual machine yeah
20:05 - that's the thing that runs those
20:06 - programs we've seen and we also have
20:08 - bytecode as well so bytecode pretty much
20:10 - is what the jvm runs itself it's kind of
20:12 - like the language that the java program
20:15 - is turned into which the jbm can then
20:17 - understand we'll see this in a little
20:19 - bit later when we look at compilation
20:20 - but what i mean here is that jvm as a
20:23 - program which runs java programs needs
20:26 - to take an input it takes an input file
20:28 - that input file contains the programming
20:31 - commands to tell the program what to do
20:33 - for the actual program code itself and
20:35 - that program code that is bytecode
20:37 - packaged in the so-called class files
20:38 - which we'll see a little bit later on
20:40 - too so who creates the buy code but what
20:42 - creates the bytecode is a thing called
20:43 - the compiler
20:45 - so
20:45 - just to recap we've got the jvm which
20:47 - runs the java application the java
20:49 - application
20:50 - is
20:51 - a file called a class file that class
20:53 - file contains bytecode and the thing
20:55 - that produces the bytecode is a thing
20:57 - called a compiler so the compiler's job
21:00 - is to basically take your java program
21:02 - and convert it effectively into
21:05 - instructions that the jbm can understand
21:07 - it does this by taking the program you
21:09 - write in the java programming language
21:11 - and that's known as source code so you
21:13 - write source code the compiler takes
21:16 - that source code written in the java
21:17 - programming language converts it into
21:20 - bytecode in a circle class file and then
21:22 - the class file is placed as input to the
21:24 - java virtual machine and the java
21:26 - virtual machine executes each
21:28 - instruction inside that class file the
21:30 - bytecode to actually do what you've
21:32 - programmed to do
21:34 - now this might seem like a whole lot of
21:35 - stuff to take in and indeed it is
21:38 - so let's jump in now and look at a
21:39 - tangible example let's bring it down
21:41 - from up in the air and actually look at
21:42 - this process firsthand and see how we
21:44 - actually compile a java source file into
21:46 - bytecode itself
21:48 - okay so let's jump in now and see
21:50 - actually how we can compile a java
21:51 - program our java source code using the
21:53 - java compiler or java c as it's also
21:55 - known
21:56 - i'm on a mac
21:59 - there's a program called terminal so
22:00 - let's just see how this process looks
22:02 - now first off don't be phased by the
22:04 - fact that i'm typing some commands into
22:06 - this big black window when you actually
22:08 - do java programming you don't have to do
22:09 - this so what i'm about to show you is
22:11 - really the nuts and bolts of what
22:13 - happens with java when you're compiling
22:15 - a java program to its bytecode but i'm
22:17 - just doing it for demo purposes so you
22:18 - won't actually have to do this yourself
22:20 - so don't worry you won't have to type
22:21 - these types of commands and it may look
22:23 - complex but it really isn't i'm just
22:24 - showing you actually the lowest possible
22:26 - level pretty much the the bare metal
22:27 - kind of like level what this java
22:29 - compilation is all about now we can
22:31 - actually do this in a text editor that's
22:33 - a small program that allows you to type
22:34 - in text and save it to a file without
22:35 - any formatting so we have any kind of
22:37 - bold or underlying or italic
22:39 - instructions in that file this is just a
22:41 - nice simple way to be able to quickly
22:42 - create a file using a command and for
22:44 - the purposes of this demo it's fine you
22:46 - won't have to do this in general so
22:47 - don't worry about it
22:49 - so that said if i
22:51 - make a new folder
22:53 - demo and i'll go into that directory
22:56 - and i'll quickly create a file with this
22:58 - special command and i'll just call it
22:59 - app.java and what this means is that i
23:01 - can just basically type in code here and
23:03 - it will create a file which is going to
23:04 - be the java file which will then compile
23:06 - and then see what actually the java
23:08 - compiler spits out
23:11 - so if i just type some java code here a
23:14 - public class app
23:16 - and then we're going to define a main
23:17 - method underneath
23:20 - this method public static void main
23:22 - which takes so-called array of string
23:24 - parameters this is the standard method
23:25 - that you'll find in any java program
23:27 - which is where a program starts off so
23:29 - called entry point but again don't worry
23:30 - if this looks complex for now because
23:32 - we'll cover this a little later down the
23:34 - line and then here i'm just going to
23:36 - type in this instruction which basically
23:37 - prints out hello world to the screen
23:40 - it's that system.out.printline you can
23:42 - see that
23:42 - and just finish that off with some
23:44 - closing curly braces and press ctrl z to
23:47 - end that
23:48 - you don't have to know what this code
23:49 - means but just know if i clear the
23:51 - screen i print out app.java just know
23:54 - that this code is the simplest possible
23:55 - java program you can write and it's a
23:57 - java source file because it has a java
24:01 - so called file extension in other words
24:02 - this is the file name here app but it's
24:04 - extension
24:05 - which is this thing that starts with a
24:07 - dot this is dot java it's a dot java
24:09 - extension so this means it's a java
24:10 - source file so how we compile that is we
24:13 - use java c java c stands for java
24:15 - compiler and we pass that java file into
24:19 - this program
24:20 - so when we just write out
24:22 - a command like this
24:24 - obviously it means it's going to run
24:26 - that program so now it's running the
24:27 - java compiler program we'll do in a
24:29 - second rather and it will take us input
24:31 - anything that we put after it so here
24:32 - we're saying app.java is the input into
24:34 - java c which is the java compiler if i
24:36 - then hit enter
24:38 - see it pause briefly then for a second
24:40 - and that's because the java compiler was
24:42 - actually taking this app.java file and
24:44 - producing the output file if we now look
24:47 - you can do with this command the
24:48 - contents of that folder that directory
24:51 - we'll see that we have our original
24:52 - app.java which we created which is this
24:54 - file here but we also have now another
24:57 - file which is app.class this is the
24:59 - class file that we spoke about earlier
25:00 - on that contains the actual byte code
25:02 - that's then runnable by the jvm so now
25:05 - that we have that bytecode class file
25:06 - let's see how we run it on the jvm
25:08 - so again let's have a look at what we've
25:10 - got in the directory here we've got java
25:12 - which was the program that we started
25:14 - with that was our java source file we've
25:16 - got app.class which is the class file
25:18 - the java c compiler produced is what it
25:20 - output so it took in the app.java source
25:22 - file that's the program code that we
25:24 - wrote and it converted that into
25:25 - app.class which contains the byte code
25:27 - that's going to run on the jvm so all we
25:29 - need to do to run this is we have
25:31 - another command and the command to
25:32 - launch the jvm the jvm itself is java so
25:36 - whenever you see java this is the jvm
25:38 - and if you see java c it's a java
25:39 - compiler so this command here means run
25:42 - the jbm again we pass the input we want
25:44 - that program to take and you might think
25:46 - we put app.class we don't we just put
25:48 - app and what this does when we run it is
25:50 - it's going to launch the jvm so the java
25:52 - virtual machine is going to be running
25:53 - and it's going to look for class which
25:55 - is the main kind of unit of code in java
25:57 - it's going to look for a class called
25:58 - app inside this current directory so
26:00 - because we have this app.class file here
26:02 - it's going to find that execute the
26:04 - bytecode which is inside it so if we run
26:06 - this now here we can see it's running
26:07 - hello world
26:08 - so that might seem a little bit
26:09 - technical and like i say it's something
26:11 - that you won't actually have to do you
26:12 - won't have to go into a big black box
26:14 - and type in those commands in the
26:15 - terminal like i did but i just want to
26:17 - do that so it gives you a good idea of
26:19 - actually what's happening behind the
26:20 - scenes and it turns out there's a tool
26:22 - that can do that for us really nicely
26:23 - which looks good it's got you know a
26:25 - proper window we've dropped down menus
26:27 - and it's a proper application in fact
26:28 - and that's called an id but we'll see
26:29 - that a little bit later down the line
26:31 - when we write a program in java that's
26:33 - the source code that we're writing to
26:34 - summarize it and we can do that as i say
26:36 - in a thing called an ide which we'll see
26:37 - shortly and so the source code is what
26:39 - we write it's the source of our program
26:41 - that's why it's called source code and
26:42 - that's in java programming language and
26:44 - that's converted into bytecode as in
26:46 - this class file that contains the
26:47 - instructions which are interpretable by
26:49 - the jvm which is the java virtual
26:51 - machine and as we've just seen how we
26:53 - get from source code in java to the
26:55 - bytecode in the class file is by using
26:57 - the java compiler which is this java c
26:59 - tool we saw so that should give you a
27:01 - nice overview of how the main components
27:03 - of the java platform slot together and
27:05 - just a sneak peek into how we can
27:07 - compile and run a java program using the
27:09 - java compiler as part of the jdk and the
27:12 - java virtual machine which is part of
27:13 - the jre but also bundled with jdk as
27:16 - well
27:19 - we're going to move a bit further and
27:20 - we're going to see how we can actually
27:21 - install the jdk itself onto our own
27:23 - machines so the jdk remember is the
27:25 - thing that has java c which is the java
27:27 - compiler which is the thing that takes
27:28 - our java source code and converts it to
27:31 - white code and then that byte code is
27:33 - then run on the jvm which is the java
27:35 - virtual machine and there's also a jvm
27:37 - which is bundled inside the java
27:38 - development kit which is the java
27:40 - command we saw as well so let's jump in
27:42 - so in order to install the jdk we need
27:44 - to do four different things really first
27:46 - off we need to work out which version of
27:48 - the jdk we need to install so that means
27:50 - basically we need to download the right
27:51 - jdk so if it's jdk for windows download
27:54 - the windows one the jdk for mac download
27:56 - the mac one but even amongst the
27:58 - individual operating system there might
28:00 - still be some choices which we'll see
28:01 - next we need to download and run the
28:03 - installer this is a really quick process
28:05 - to do it's literally just kind of double
28:07 - clicking so that'd be nice simple and
28:08 - straightforward next we need to set a
28:10 - thing called an environment variable
28:12 - which is going to be called java
28:13 - underscore home now environment
28:14 - variables it might seem it's getting
28:15 - very technical now it's really not it's
28:17 - basically just a
28:19 - way of letting other tools which work
28:21 - with java itself it's a way of letting
28:23 - them know where you've installed jdk2
28:25 - and we do that through creating this
28:26 - thing called an environment variable
28:28 - which is very simple to do and
28:29 - straightforward as we'll see but it just
28:30 - basically makes a piece of knowledge
28:32 - knowing where the jdk is installed just
28:34 - exposes it so that anybody or any other
28:36 - applications rather which are running on
28:37 - that machine and take a look at the
28:39 - environment variable access the path or
28:41 - location of where we installed the jdk2
28:44 - and finally of course we need to test
28:45 - that it actually works so first off
28:46 - let's look at how we can work out which
28:48 - jdk version to install so i'm going to
28:50 - do this on a windows machine this
28:52 - particular demo because that's probably
28:54 - the most popular operating system with
28:56 - people who are watching this course so
28:57 - the first thing you need to do is to
28:58 - find out if you're using a 32-bit
29:00 - version of windows or a 64-bit version
29:02 - of windows really easy to find out just
29:04 - go down here to the start menu
29:07 - and go to the little cog which says
29:09 - settings
29:10 - and then go up to system and then if you
29:12 - scroll down to the bottom
29:14 - you'll see about so if you just click
29:15 - about it'll tell you about the system
29:17 - and here you can see at the bottom it
29:18 - says 64b operating system x64 based
29:22 - processor so this tells us that this
29:23 - particular system is running windows
29:25 - 64-bit
29:26 - and also if you notice you'll see this
29:28 - x64 here just remember that for a second
29:31 - because we'll actually see this in the
29:33 - version of the jdk that we want to
29:34 - download anyway so we can close this now
29:36 - with the x so just go down here into
29:40 - search box and we're just going to type
29:41 - in internet explorer just the first few
29:43 - letters we'll do as you can see so here
29:45 - we've got internet explorer so we'll
29:46 - just click this
29:52 - and if we just type in here
29:56 - java jdk download
29:59 - and you can see that it's showing us
30:00 - here the first link the primary link is
30:02 - the one that goes to the oracle website
30:04 - and this is basically for all of the
30:05 - downloads so all the different versions
30:07 - that you have with java this is the page
30:08 - you can get them from but we want to
30:10 - have a specific version we want to go
30:11 - for java 8 and that's because it's a lot
30:13 - easier for beginners to work with java 8
30:15 - than it is to work with the latest and
30:17 - greatest version which is java 15. if we
30:19 - click on java 8 jdk
30:22 - accept cookies
30:24 - and so here we are on the java 8 jdk
30:26 - download page so if we just scroll down
30:30 - you'll see here that the version we're
30:31 - going to download is this 8u281 which is
30:34 - basically the latest version of the java
30:36 - 8 version of the jdk which is the one
30:38 - we're after and then if we go a bit
30:40 - further down we can see we've got linux
30:41 - here we've got macos solaris
30:44 - and right at the bottom we've got these
30:46 - two options here for windows at this
30:47 - point we need to know whether we have
30:49 - 32-bit version of windows or a 64-bit
30:51 - version of windows so there are two
30:52 - different versions of windows that you
30:54 - can have 32-bit and 64-bit and these are
30:56 - denoted by x86 means 32-bit and x64
31:00 - means 64-bit you wouldn't necessarily
31:02 - expect that and this is actually a
31:04 - reference to the underlying
31:05 - microprocessor but just know that the
31:06 - 64-bit version one has 64 in it and the
31:08 - 32-bit one doesn't so we've checked
31:11 - already on this particular version of
31:12 - windows and we know that it's a 64-bit
31:14 - version that we need because if you
31:15 - remember that's the x-64 that we saw
31:18 - before so let's download the 64-bit
31:19 - version now
31:21 - okay so if you just click on this
31:23 - exit file
31:24 - and we'll just accept the license
31:25 - agreement click on that checkbox
31:29 - and then just click this download button
31:31 - here
31:33 - and so unfortunately when you download
31:35 - the jdk you have to have an account with
31:36 - oracle it's free to sign up so if you
31:38 - don't have an account you can create
31:39 - this
31:40 - use this create account button down
31:41 - there but i already have an account so
31:43 - i'll just put my details in
31:48 - and then just hit sign in
31:53 - then you can see here now it says do we
31:54 - want to save or run so i like to save it
31:57 - to the downloads folder then i can run
31:59 - it from there afterwards i'm not worried
32:00 - about saving the password either so i'll
32:02 - just click not for this site so now you
32:03 - can see it's downloading it doesn't take
32:05 - very long to download it's not that big
32:07 - to be honest also i've got a pretty fast
32:09 - internet connection as well
32:10 - almost there
32:11 - runs a security scan and it says it's
32:14 - completed which is good so then if we
32:16 - hit this few downloads
32:18 - you can see here that it's actually in
32:19 - this downloads folder you also hit this
32:22 - button here it'll open up the downloads
32:23 - folder itself in explorer so i prefer to
32:26 - run it from there so if we just kill
32:27 - this browser
32:30 - and just this one too
32:32 - don't want to run it from here so you
32:34 - want to right click and you want to do
32:35 - run as administrator that's important
32:38 - because it needs to make some entries
32:39 - into the windows registry which needs
32:41 - administrator permissions so if we just
32:47 - so just click yes to this so you can
32:49 - make changes to the system now we're
32:51 - just going to click next here
32:55 - then we go to the next screen and on the
32:57 - screen we can see the items that it's
32:59 - going to install so it's going to
33:00 - install the development tools also the
33:02 - source code of the actual jdk itself
33:04 - which is interesting to look at as well
33:05 - although it's outside the scope of this
33:07 - tutorial but it's definitely useful to
33:09 - have a dig into that at some point if
33:10 - you're curious
33:11 - as well we've got the jre which we'll
33:13 - also install just so just accept the
33:15 - defaults here you could customize the
33:17 - folders if you wanted to but that's fine
33:19 - we're just going to accept the defaults
33:20 - for now that's okay
33:21 - just click
33:22 - next and then we can see it's just
33:24 - installing it's pretty quick to be
33:26 - honest copying the new files across over
33:33 - at this point here is offering to
33:35 - install jre first as well so you just
33:36 - click next to that also
33:41 - and it's just gonna run through that
33:42 - part of the installation procedure as
33:44 - well
33:45 - again it's pretty quick
33:49 - you can see here the job has been going
33:50 - for 25 years as well so it's a really
33:53 - it's really stable and rich platform to
33:54 - work on
33:56 - which is why it's so popular
33:59 - at this point it's been installed
34:02 - so just click close there so now at this
34:04 - point if we go into the c directory
34:07 - which is under this pc
34:09 - we look inside this program files
34:10 - directory
34:11 - under java
34:13 - then we can see here now we've got two
34:15 - folders jdk and jre
34:17 - version 1.8 so this is basically the jdk
34:20 - the java development kit and this is the
34:22 - jre the java runtime environment that
34:24 - we've spoken about before
34:25 - just quickly while we're on the topic
34:27 - let's just have a quick look inside
34:28 - inside the jdk you'll find a bin
34:30 - subdirectory subdirectory means a
34:32 - directory inside a directory and these
34:34 - are all of the the tools if you like
34:36 - which you have access to as a java
34:37 - developer to help you write java
34:39 - programs but the main ones you're
34:40 - interested in are java c which is the
34:42 - java compiler we've seen and java itself
34:45 - which is the java virtual machine now
34:48 - the next step we need to do is we need
34:49 - to just go back out to that folder above
34:52 - we need to basically put this folder
34:53 - here
34:54 - which is the folder where we've
34:56 - installed the jdk to we need to put this
34:58 - in this so-called environment variable
35:00 - so let's see how we can do this now so
35:01 - first of all if i just double click this
35:04 - then i click into
35:06 - the address bar here
35:07 - just go over here and just right click
35:10 - and then click copy
35:12 - so what i've done actually here is i've
35:13 - just basically put the
35:15 - the contents of this so the director
35:17 - that's highlighted into the clipboard
35:18 - because i'm going to use it later i can
35:20 - just cancel this out
35:22 - now
35:23 - and then i go into
35:24 - this one here this pc
35:27 - into
35:28 - properties which is actually an easier
35:31 - way
35:32 - being able to set this environment
35:33 - variable and then if we go into advanced
35:35 - system settings you can see here you
35:36 - click on that and then click into
35:38 - environment variables now what we're
35:39 - seeing here this is basically the set of
35:41 - environment variables which are
35:42 - configured for this particular system so
35:44 - the concept of an environment variable
35:46 - isn't just specific to java or even
35:48 - specific to windows it's a concept which
35:50 - is available in all operating systems
35:52 - and it just basically provides little
35:53 - place in memory the programs can look in
35:55 - to get a piece of data they need to
35:56 - share in the case of the java tools
35:58 - that's the jdk installation path and
35:59 - that's what we're going to set now but
36:01 - there are other ones too the most
36:02 - important one being path itself which is
36:04 - the one you can see here which we'll
36:05 - come to in a second but first of all
36:07 - let's create our java underscore home so
36:09 - if i click new here then go java
36:12 - underscore home if i press tab that gets
36:14 - me into the text box below now if i just
36:17 - do
36:17 - control v paste it and you can see it's
36:19 - here now now also if we just put that in
36:22 - quotation marks the reason being is that
36:23 - windows is a bit funny if you have
36:25 - spaces in a path that's meaning the
36:26 - actual descriptor of where where the
36:28 - folder is which is this thing we're
36:29 - looking at here it's a path you can see
36:30 - here we've got this space between
36:32 - program and files so just to protect
36:34 - that we basically put a quotation mark
36:36 - here and a quotation mark there then
36:38 - that kind of like packages it all up if
36:39 - you will so if we just click ok now so
36:41 - now we've got java home set the final
36:43 - thing to do is to double click on the
36:45 - path variable to change that we're going
36:47 - to add a new entry here which is
36:51 - java under score home with these
36:52 - percentage signs at either side and that
36:54 - basically means resolve this to the
36:56 - actual value so java underscore harm is
36:58 - the variable that's the name of the
36:59 - piece of memory which holds that data
37:01 - but to get what's actually in that piece
37:03 - of memory we can put percentage signs
37:04 - around it it's known as dereferencing
37:06 - that variable to get the actual value
37:08 - out and then put backslash
37:10 - bin and enter
37:11 - and the reason for that is because
37:13 - remember we've just had a look in the
37:15 - jdk directory itself and we then had a
37:17 - look in the bin subdirectory and we
37:18 - could see all those tools or by putting
37:20 - this in here adding it to the path this
37:22 - is going to allow windows to locate
37:24 - those java tools for us so basically
37:26 - whenever you enter a command in a dos
37:28 - prompt which is something we'll see in a
37:29 - second one of those scary black windows
37:31 - which isn't that scary in fact but it
37:33 - might appear so at first but it is
37:34 - really not whenever you enter a
37:35 - commanding day what actually happens is
37:37 - windows goes through each one of these
37:38 - folders in turn
37:41 - look inside that folder to see if that
37:43 - command exists in that folder and when
37:45 - it finds whatever the command exists
37:46 - then it will execute it so we're just
37:48 - going to move this up
37:51 - in this a few times that means that the
37:53 - first thing first place that we're
37:54 - telling windows to look is definitely
37:55 - going to be in like this java home
37:57 - directory java home pin directory rather
37:59 - and the reason for that is because
38:00 - unfortunately windows actually comes
38:01 - with jre to be able to execute java in
38:04 - the browser and that's actually stored
38:05 - in this path here and by putting this
38:07 - java on the score home bin before that
38:09 - it means that we're going to get our
38:10 - version of java which is part of the jdk
38:12 - which we've just downloaded so if we
38:13 - click ok to this
38:15 - and ok to this
38:17 - and let's close some of these windows
38:20 - we're going to go into the command
38:22 - prompt this dos prompt if you type cmd
38:25 - you'll see here we have this command
38:26 - prompt tab click on that now we're in a
38:28 - thing called the dos prompt or it's now
38:30 - known the command prompt and it's called
38:32 - that because it's prompting you
38:34 - prompting meaning to ask
38:36 - it's asking by virtue of that this
38:37 - thing's flashing this curse is flashing
38:39 - here it's asking you for a command it's
38:40 - a command prompt makes sense yeah so if
38:43 - we type set j which is a command and hit
38:46 - enter this is going to show us the
38:47 - environment variables which have been
38:49 - set which start with the letter j and
38:50 - you can see here we've got our java
38:51 - underscore home environment variable
38:53 - that we set if we were to do set
38:55 - p
38:57 - then we'd see all of the variables which
38:58 - start with a p and the first one we can
39:00 - see is path and now we can see here that
39:02 - we've got
39:03 - the java home
39:05 - environment variable we saw before it
39:07 - was being dereferenced by those
39:08 - percentage signs remember with a slash
39:10 - bin after it that means the subdirectory
39:11 - inside there if we now type in
39:15 - java c for the java compiler and do
39:17 - version
39:18 - and we should get a message back which
39:20 - says it's the 1.8 java compiler and the
39:22 - reason we're doing version is just it's
39:23 - a nice quick and simple way just to
39:25 - verify that a given command has been
39:27 - installed properly which in this case is
39:28 - java c and we can do the same thing for
39:30 - java as well which is the jvm that means
39:32 - that we've got the jdk set up correctly
39:34 - and just to double check that as well we
39:35 - just check the java version
39:37 - and similarly we also have the same
39:39 - version here so this these two versions
39:41 - match now one eight zero zero eight one
39:43 - one eight zero two eight one which is
39:44 - fantastic so here we've got the java
39:46 - compiler and we've got the java virtual
39:47 - machine don't forget if we hadn't have
39:49 - put that entry to be first in the list
39:51 - then we wouldn't have seen
39:53 - um that version here because it would
39:54 - have been picking up the java version
39:56 - from this one here instead anyway at
39:58 - this stage we're all set up and we can
40:00 - actually start to develop java
40:02 - applications on this windows machine
40:06 - we're going to take a look at the ide
40:08 - that's an integrated development
40:09 - environment that's basically a tool that
40:11 - you can use to write compile and run
40:13 - your java programs which no programmer
40:15 - will ever be without so let's jump in
40:17 - now there are two different ides on the
40:19 - market currently when i say on the
40:21 - market you don't have to buy them or
40:22 - anything but i just mean those that are
40:23 - available to you in general to download
40:25 - now both of these are free or at least
40:27 - have versions that are free and we'll
40:28 - just have a look at both of them now and
40:30 - compare them so the first one is eclipse
40:32 - the eclipse has been around a really
40:34 - long time it's from the eclipse
40:35 - foundation and it's a really good idea
40:37 - to start off with the other one we've
40:38 - got as well is intelligent idea now
40:41 - intelligent idea actually has two
40:43 - different versions that you can get it's
40:44 - got a community edition which is the
40:46 - free version and it's also got another
40:48 - edition called the ultimate edition and
40:50 - that's a paid product which typically
40:52 - you'll find in corporate organizations
40:54 - so in other words in corporates where
40:55 - you have a professional java development
40:57 - team if they're willing to spend the
40:58 - money on the id and the developers
41:00 - typically will find they're using
41:01 - intellij idea now the difference between
41:04 - these two are that eclipse is really
41:06 - easy to use it's great for beginners
41:08 - it's got various features which make it
41:10 - more suitable for beginners in my
41:11 - opinion
41:12 - like for example when you're programming
41:14 - it will actually highlight errors as you
41:15 - go along by underlining them in red
41:17 - which we'll see in a second and it gives
41:18 - you very clear error messages which kind
41:21 - of imply or kind of tell you pretty much
41:23 - how you should fix your code so it's
41:25 - great for beginners and it's very easy
41:26 - to use as well professional developers
41:28 - it can feel a little clunky at times and
41:30 - so a lot of professional developers tend
41:32 - to prefer intellij idea and again that's
41:35 - for more advanced users it's got much
41:37 - more power behind it because it can also
41:39 - be a commercial product with their
41:40 - ultimate edition you know they've really
41:42 - made this product into something which
41:43 - you'd expect a proper java developer
41:45 - power user to be able to get their
41:47 - money's worth with however that said
41:49 - intelligent idea it kind of does things
41:51 - behind the scenes which you've got to be
41:52 - careful about if you're not a
41:53 - professional developer and if you don't
41:55 - know what you're doing um so it can kind
41:57 - of trip you up so it's definitely for
41:58 - advanced users but eclipse eclipse is
42:00 - definitely the thing to start off with
42:01 - and we'll see how to install that
42:03 - shortly so that's the one we'll start
42:04 - off with here and we'll see how to do
42:06 - that in just a moment so let's have a
42:08 - look now and explore actually what
42:10 - features an ide gives us so the first
42:12 - thing an ide does is it provides you the
42:14 - ability to actually type in your
42:16 - programs so just like for example you
42:18 - might use a word processor like
42:19 - microsoft word type up documents or
42:21 - reports for work or you might use a
42:23 - spreadsheet like excel to do your
42:25 - accounts or manage your home expenses
42:26 - just like that as a programmer as
42:28 - programmers we use an id to type in our
42:31 - java programs now this makes things much
42:33 - easier as you'll see because of some key
42:35 - features which an ide provides the main
42:37 - ones of these are syntax highlighting
42:39 - showing you the errors you've made
42:40 - suggesting improvements to your code as
42:42 - you go along let's take a look
42:44 - so let's look at the first of these
42:46 - items then so what is syntax
42:47 - highlighting this is one of the things
42:48 - that the idea does for you so what is
42:50 - syntax highlighting
42:51 - okay so here's a chunk of code it's a
42:53 - very simple piece of code in java it
42:55 - might look complicated it's really not
42:56 - and it basically defines class my app
42:58 - which has one method in it which is the
43:00 - main method one and only method which is
43:02 - going to do something and what it does
43:03 - is it prints out the message hello world
43:05 - now if you see this program in an id it
43:07 - would actually have syntax highlighting
43:09 - and that looks like this so basically
43:11 - here you can see that it's coloured in
43:12 - some words it's given some colour to the
43:14 - words and those words which appear to be
43:16 - in a it's kind of like a maroon or a
43:18 - dark red maybe purple depending on how
43:20 - your eyes are but anyway these um these
43:22 - words like public class public static
43:24 - void those are basically
43:26 - filled that way to signify that they're
43:27 - keywords they're reserved words by the
43:29 - java language so the use of this for
43:31 - example is if you maybe for example
43:33 - misspell public and miss out the eye
43:36 - then you wouldn't color code that into a
43:37 - maroon color and you'd also have kind of
43:39 - a squiggly red underline as well which
43:41 - will tell you that it's wrong but
43:42 - coloring words in this way coloring the
43:44 - text in this way it just gives you that
43:45 - extra kind of quick visual guide the
43:48 - meaning or the cement or so-called
43:49 - semantics of that word or that keyword
43:52 - now you can see we've got other stuff
43:53 - which is still in black so typically
43:54 - these are going to either be class names
43:56 - methods or types so here we can see my
43:58 - app is the class name main is the method
43:59 - name and the string array there string
44:01 - with the two square brackets that's a
44:02 - type
44:03 - we'll see again the actual variable name
44:05 - which the thing we're passing in these
44:07 - args value a bit difficult to see but
44:09 - that's actually in a different color
44:10 - again that's how you can tell or
44:12 - differentiate inside that method between
44:14 - those two curly braces you can see
44:15 - immediately whether you'd be working on
44:17 - a variable which is passed into the
44:18 - method against a variable which is
44:20 - outside the method for example you'll
44:21 - also see as well on the third lining
44:23 - where we've got the system.out.printline
44:25 - we can see we've got the out is
44:27 - italicized it's in italics and it's also
44:29 - in blue that denotes so that's a static
44:31 - it's a member which is a bit advanced
44:33 - now but it's just another way they can
44:34 - visually give you a bit of help and
44:36 - inside you can see we've got the string
44:38 - which we're passing into
44:39 - system.out.printline which is a command
44:41 - that prints something to the screen we
44:43 - can see we've got we're passing in that
44:44 - string in quotes and we can see it's
44:46 - color-coded that a nice bright blue for
44:48 - us
44:49 - so we can immediately tell where the
44:50 - strings are in the method as well that
44:52 - might not seem that useful but the more
44:53 - complex your programs become you really
44:55 - get to be able to kind of see the code
44:57 - better with these kind of features but
44:59 - you won't tend to notice it too much
45:00 - when you start out though
45:02 - so how does it show errors then i mean
45:03 - that's probably the most important thing
45:04 - you care about if you're a beginner
45:06 - so here's an example so this is eclipse
45:08 - and here we can see we've got the main
45:10 - method we've got this application we saw
45:11 - before and here we've got a class so it
45:14 - says public class my app and you can see
45:16 - it's got a red underline underneath my
45:18 - app and there's a red kind of circle to
45:20 - the left of that the line numbers
45:22 - and if you look beneath there you'll
45:23 - also see the same red circle with an x
45:25 - in it and it says java problems one item
45:28 - it says syntax error untoken my app it
45:30 - says a left curly brace expected after
45:32 - this token so you can see here it's
45:34 - actually telling you what to do it's
45:35 - telling you that after my app which is
45:37 - the word it's underlined in red it's
45:39 - expecting that you're going to put this
45:40 - opening curly brace and in fact the
45:42 - minute you put that opening curly brace
45:44 - the red x would go the red underline
45:46 - would go and the problems would you see
45:47 - there in this java problems section that
45:49 - list that would also go as well and be
45:51 - clear
45:52 - so there's one way it can show you that
45:53 - things are not quite right and you'll
45:54 - see red x's everywhere contextually
45:56 - where that is so if you see on the left
45:57 - hand side for example this is basically
45:59 - the project structure you can see at the
46:01 - deepest level you've got this myapp.java
46:03 - and then above there you've got app
46:04 - which is the package that's in the
46:06 - package is just a folder for a class
46:08 - inside java and then above there you've
46:10 - got a source main job which is the
46:11 - folder which contains the actual java
46:13 - code itself and above there you've got
46:14 - app which is the name of the actual
46:15 - project
46:16 - again as soon as you fix it those will
46:18 - go so the next thing we've said that it
46:19 - gives you suggestions which are going to
46:21 - help you out along your way and this is
46:22 - really useful for beginners so let's
46:24 - take a look at this now as well
46:25 - so now we've got a different id this is
46:27 - intelligent idea now which we're looking
46:29 - at and just incidentally as well you can
46:31 - still see we've got this red underline
46:32 - here so you can see in the main tab here
46:34 - it says app.java we've got a red
46:36 - underline and we also have it in the
46:37 - left hand project pin as well and that's
46:39 - because at the point the exact instant
46:41 - when we're programming in this
46:42 - particular program the syntax is
46:44 - incomplete because we've got system dot
46:46 - then we don't have anything after that
46:47 - and that's not valid syntax it's not a
46:49 - so-called valid statement a statement is
46:52 - basically the smallest unit of code that
46:54 - describes what you want to have happen
46:56 - and that can either be assigning a value
46:58 - to a variable or it can be invoking a
47:00 - method calling a method on either a
47:02 - class or an object or one of those
47:03 - things so where this help comes in then
47:05 - is actually where you're typing when
47:07 - you're actually typing out the code at
47:08 - certain points the id
47:10 - will offer you suggestions as to what
47:12 - you might want to type so for example
47:14 - when i type system with a capital s
47:16 - that's referring to the class system
47:18 - which is inbuilt into java it's a class
47:20 - that we get for free with the jdk the
47:22 - jdk comes with hundreds of different
47:24 - classes you can use to do various
47:26 - different things the system class is one
47:28 - of the most basic or foundational
47:30 - classes that you can use and when we do
47:32 - system dot that dot signifies that we're
47:34 - going to do something on that system
47:36 - class or connected with that system
47:38 - class specifically we're going to access
47:40 - something on a system class and we can
47:42 - either choose to access a data member so
47:45 - if that class has a variable inside of
47:47 - it which holds some data which holds
47:49 - some value or maybe an object or
47:50 - whatever we can access that we've seen
47:52 - that before with system.out
47:54 - out is actually a variable inside the
47:56 - system class which stores a reference to
47:58 - a thing called the print stream which is
48:00 - basically the way that we can print
48:02 - characters out or print data out to the
48:04 - to the display if you like but in
48:06 - addition to being able to access data
48:08 - with the dot we can also invoke methods
48:10 - with the dot so here we can see when
48:12 - we're doing system dot we have several
48:14 - different methods which we can choose to
48:16 - call so the first method for example in
48:18 - this box which appears below in this
48:19 - drop down it automatically appears by
48:21 - the way you don't have to do anything
48:22 - you just as soon as you type dot this
48:24 - will appear and you can see we've got a
48:25 - method set property which takes a key
48:28 - and a value we've got another method
48:29 - array copy which takes some other things
48:32 - got a method current time millies method
48:34 - console clear property that kind of
48:36 - thing what these methods do now are
48:38 - interesting to us but the main point is
48:40 - that as soon as you hit that dot then
48:41 - the id offers you options for what it's
48:44 - sensible to call at that particular
48:45 - point that's a key point it's not just
48:47 - offering you any old stuff it's actually
48:48 - offering you things that would only make
48:50 - sense to call actually there but when
48:52 - the id offers you either suggestions
48:54 - like this or code fix suggestions it can
48:56 - also fix code for you as well which is
48:58 - pretty handy or if it offers you the
49:00 - ability to generate code to actually
49:02 - program certain aspects of the code for
49:03 - you which is also something else it can
49:05 - do and by the way all of these things
49:06 - together make a developer's life so much
49:08 - easier you actually think programming is
49:10 - pretty difficult but when you look at
49:12 - the power of an id and what it gives you
49:13 - and the amount of stuff it does for you
49:14 - automatically it's actually not that
49:16 - difficult to do programming to be honest
49:18 - but anyway the main point is that it
49:20 - also takes into account the context of
49:22 - where you're actually coding at that
49:23 - moment in time to be able to offer
49:25 - sensible suggestions as to things you
49:26 - might want to do
49:28 - and furthermore as you actually type out
49:30 - the method if i started to type for
49:32 - example supposing i was going to go for
49:34 - the word console for the method console
49:36 - i would type the c and what would happen
49:38 - then is it would automatically filter
49:40 - that drop-down box to just have the
49:41 - methods which start with c so it would
49:43 - be clear property console and current
49:44 - time millis which appear then i type oh
49:46 - so now i've got system.co
49:49 - then it would just say console and at
49:51 - that point then when it just says
49:52 - console i can hit enter in intellij idea
49:54 - or its tab in eclipse and it would type
49:57 - out the rest so type out the remaining
49:59 - letters for me as well we'll also
50:01 - immediately put the parentheses there
50:03 - for me so those brackets and if i typed
50:05 - a method which actually wanted to take
50:06 - anything she was designed to pass in the
50:08 - input parameters it would also tell me
50:10 - what it's expecting so for example if i
50:12 - was invoking the array copy method as
50:14 - soon as the left parenthesis is put in
50:15 - so the opening bracket it would come up
50:17 - and say okay what's your object source
50:19 - for example
50:20 - we don't need to know what the actual
50:21 - array copy method does as it happens it
50:23 - just copies the rays as you might expect
50:24 - those are those groups of things of the
50:26 - same type we saw before like when we saw
50:28 - a string array actually like we can see
50:29 - the string array above these square
50:31 - brackets
50:32 - the point is an id gives you all of
50:34 - these really useful and helpful
50:35 - functions along the way so it actually
50:37 - makes developing programs much easier
50:38 - you don't have to type you know every
50:40 - single character painfully piece by
50:42 - piece that kind of stuff it does it all
50:44 - for you and even if you for example put
50:46 - in a left curly brace so an opening
50:47 - curly brace and hit enter it will also
50:50 - put in the closing curly brace as well
50:52 - so you don't have to worry about that
50:53 - little things like that it'll also
50:54 - indent the cards so you can see here
50:56 - that on line three we've got the
50:57 - declaration line for the method and you
50:59 - can see it's indented in other words
51:01 - it's put space to push it in from the
51:03 - left there that's so we can see that
51:05 - visually that's a method and similarly
51:07 - inside the method on line 4 when we're
51:09 - starting to write a collection of
51:10 - statements which would comprise this
51:11 - method we can see that again it's
51:13 - indented it and that means that visually
51:14 - we can see now that any statements or
51:16 - any lines we have from line 4 which are
51:19 - inside of these curly braces they're
51:21 - going to be very kind of visually
51:22 - clumped together or grouped together so
51:24 - that we know that's the implementation
51:26 - of that method yeah that's another thing
51:27 - that idea will do for you the other
51:29 - thing an idea allows you to do is to
51:31 - actually compile your code so just like
51:33 - before when we did the quick demo and we
51:35 - were compiling the java code using java
51:37 - c in the terminal window on the mac and
51:39 - you remember java c then took that java
51:41 - source code compiled it and turned it
51:43 - into java byte code which could then be
51:45 - run on the jvm but when you use an ide
51:47 - this is done automatically for you and
51:49 - not just for one file for multiple files
51:51 - that might comprise the project and
51:52 - typically what you'll find is that an
51:54 - ide will actually compile for you
51:55 - continually as you're actually
51:57 - developing the program highlighting any
51:58 - errors along the way as well and
52:00 - suggesting current improvements you
52:01 - might want to do
52:02 - now typing your program in and compiling
52:04 - it is all well and good but of course
52:06 - you need to actually run the program as
52:07 - well and that's another feature that an
52:09 - id allows you to do to actually run your
52:11 - program which is sometimes known as
52:13 - executing your program and usually in
52:15 - doing this it'll also show you inside
52:17 - the ide itself any output that the
52:18 - program returns which is also very
52:20 - useful to have everything in one place
52:22 - and finally one of the best features of
52:23 - an id in my opinion is the ability to
52:25 - actually debug a program so as
52:27 - programmers we write program code and
52:29 - obviously we're writing primary card
52:31 - because we're assuming what we're
52:32 - writing is actually going to work but
52:34 - more often than not it doesn't work or
52:35 - at least if it doesn't work completely
52:37 - there might be a few issues with it
52:38 - which we've got to try and fix
52:40 - and the best way of fixing does is
52:41 - actually to run the program in slow
52:43 - motion it's the best way i can think
52:44 - about describing it this is what you do
52:46 - pretty much when you're debugging a
52:47 - program it allows you to go through
52:49 - what's known as step over each line of
52:51 - program code as it's been executed then
52:53 - along the side of it you can actually
52:55 - see what's happening to the other areas
52:57 - of your program so how do you use an id
52:59 - what does it actually look like when
53:00 - you're programming properly for real
53:02 - putting together a real program well it
53:04 - looks like this first of all you're
53:05 - editing the card so you're inside the id
53:07 - and you're typing in the program code
53:09 - which you think is a programmer is going
53:10 - to do what you want it to do that's the
53:12 - first thing you're going to do you're
53:12 - gonna edit the code and then afterwards
53:15 - at some point you're gonna compile the
53:16 - code or build it now with eclipse it
53:18 - does this automatically for you as you
53:19 - go along so it's always compiling code
53:21 - for you automatically but if you use
53:23 - intellij idea for example you actually
53:25 - have to trigger this because you're in
53:26 - control of when you want it to do the
53:27 - compile or to do the build itself but
53:29 - nevertheless you're typing away and in
53:32 - the case of using eclipse it's compiling
53:34 - the code as you go along this means that
53:36 - at some point you're going to see some
53:37 - errors so unless you're doing everything
53:38 - completely perfect from scratch you're
53:40 - going to see some errors like those
53:41 - squiggly underlines we saw the red
53:43 - underlines and the red crosses that kind
53:44 - of stuff and when you see those errors
53:46 - of course you're going to have to
53:47 - correct them so that means you're going
53:48 - to go back you're going to edit your
53:49 - code again when i say go back you don't
53:51 - physically go anywhere or return
53:53 - anywhere you're still just inside the
53:55 - ide so you're just typing things out in
53:57 - eclipse but you're just happening to
53:58 - notice red or red crosses red underlines
54:00 - or whatever which is showing you
54:02 - so-called compilation errors in other
54:03 - words problems with your program that
54:05 - you have to address because it's not
54:06 - compiling and that's happening because
54:08 - the compiler the java c compiler is
54:10 - doing that for you behind the scenes so
54:12 - then you re-edit the code to fix those
54:13 - errors and then at some point of course
54:15 - you get to the point where you have no
54:16 - more errors you actually have the
54:18 - complete code which comprises your
54:19 - program and at that point you're done
54:21 - because then you can finally run the
54:23 - program itself that's pretty much what
54:24 - we go through as programmers and we're
54:26 - doing this process of programming coding
54:28 - so now we know what an ide is we know
54:30 - what features it's got and we know how
54:31 - to use it let's jump in now and install
54:33 - eclipse which is the best idea you can
54:35 - use if your job a beginner let's jump in
54:39 - so if we go to internet explorer again
54:42 - this time if we type in eclipse
54:46 - here we can see we're at the website for
54:47 - eclipse.org the first thing that pops up
54:49 - and we're just going to
54:50 - download eclipse id
54:56 - i just hit the download button here
55:00 - and again you've got a choice of which
55:02 - operating system you're going to use
55:04 - we're on 64-bit windows so here we can
55:07 - see this x8664 which means it's
55:09 - compatible by the way for both 32-bit
55:11 - and 64-bit versions of windows that's
55:13 - fine click that
55:16 - and then we'll just hit download
55:20 - again same kind of thing we're going to
55:21 - save it
55:23 - doesn't take too long to download as
55:25 - well
55:29 - now we can see it's completed so if we
55:31 - just go to open folder we can close this
55:34 - now
55:36 - we can see here we've got the eclipse
55:38 - installation now if we double click this
55:40 - because we set that java underscore home
55:42 - environment variable before eclipse now
55:44 - knows where to pick java up from and how
55:46 - to run
55:48 - so you've got different options here
55:50 - we're going to choose this one
55:53 - and we just
55:55 - install
55:57 - accept the agreements
55:59 - and now it's actually downloading that
56:00 - particular version of the eclipse ide
56:02 - onto your local machine
56:07 - and it might take a while to download
56:08 - but it's fine
56:14 - you can see now it's downloaded so if we
56:15 - just do launch
56:18 - notice as well it's also created a
56:20 - shortcut there on the desktop as well
56:22 - the first time it launches it might take
56:23 - a little bit longer
56:24 - that's fine we'll just accept this as a
56:26 - default for now click launch again
56:32 - now here we are we're inside eclipse
56:35 - just close that
56:39 - so this is the eclipse welcome screen
56:42 - and you can just hide this
56:46 - and close this panel here
56:48 - and then at this point we're all set up
56:50 - we've installed eclipse the ide for java
56:52 - and we're all ready to start creating a
56:54 - new java project now you know all about
56:56 - ides and as you can imagine programming
56:58 - isn't actually as bad or as complex as
57:00 - people would imagine when you've got a
57:01 - tool as powerful as that at your
57:02 - disposal and we'll be seeing how to use
57:04 - an id in the next video
57:09 - we're going to look at java code in
57:10 - detail for the first time so we're going
57:12 - to start with an overview of the key
57:14 - constructs those are the key kind of
57:16 - things you have to write to be able to
57:17 - develop your java programs then we're
57:19 - going to pull it all together by having
57:21 - a live coding session in eclipse to
57:23 - program a very simple program in the ide
57:25 - let's jump in so let's just take a look
57:26 - at actually what's inside a java
57:28 - application then in other words what are
57:29 - the components we'd expect to find
57:31 - inside a java program itself so first up
57:33 - we have a class definition and this
57:35 - basically is the main unit of code that
57:37 - you create in java so when you write a
57:39 - java program pretty much you're writing
57:41 - these classes which can then be
57:42 - assembled into objects and then how the
57:45 - actual program works is that these
57:46 - objects can have methods invoked on them
57:48 - a method is like a chunk of behavior
57:50 - which you want the object to do that
57:52 - method typically will cause an
57:53 - interaction with another object or it'll
57:55 - cause the object itself somehow change
57:58 - its state in other words to change the
57:59 - data that's actually inside the object
58:01 - so this might seem a little bit abstract
58:02 - for now don't worry about it too much
58:04 - don't forget that we're just actually
58:05 - looking at what the high level pieces
58:06 - are for now and we'll go into actually
58:08 - how they work a little bit later on so
58:09 - first up here we have a class and how
58:11 - you declare a class in java is that you
58:12 - have to use this kind of syntax here so
58:14 - when we say syntax we mean basically the
58:16 - sequence of words you've got to use and
58:18 - whether you have to use any special
58:19 - symbols like for example you can see
58:21 - here we've got this kind of like curly
58:22 - bracket thing this is known as a curly
58:24 - brace so you've got a left brace there
58:26 - at the top after the word my app and
58:28 - you've got a
58:29 - right curly brace at the bottom you can
58:31 - see that's basically the syntax so the
58:33 - combination of words and symbols used to
58:34 - define the class the java compiler just
58:37 - don't forget as well as the java
58:38 - compiler that java c program we saw it's
58:40 - going to be responsible for taking the
58:41 - source code you write taking the java
58:43 - code that you write and then producing a
58:45 - bytecode file out of it and because of
58:46 - this it needs to follow a very
58:48 - well-defined format of how you present
58:49 - things in other words you need to speak
58:51 - its language you need to speak the
58:52 - language of the compiler that's
58:54 - basically what you're doing when you're
58:55 - programming in java you're speaking the
58:56 - language that the compiler understands
58:58 - writing your program in java which they
58:59 - can then be compiled and into bytecode
59:01 - and run another jvm so yeah so here we
59:03 - can see we're creating a class the class
59:04 - is name all classes have a name and the
59:07 - name of this class is my app so you can
59:09 - call a class whatever you like to call
59:10 - it it's entirely up to you and typically
59:12 - you'll call a class give it a name that
59:13 - is based on the actual thing that you're
59:15 - modeling and in this case a name like my
59:18 - app for example would expect maybe this
59:19 - is like a class which would be the kind
59:22 - of starter class if you like which
59:23 - starts off your java program so in other
59:26 - words it's kind of like think of it as
59:26 - like the the main class
59:28 - or the top level class if you like
59:30 - after all java programs need to start
59:32 - somewhere and they start with a method
59:34 - which contains the behavior to start the
59:35 - application and that method needs to be
59:37 - defined ultimately inside a class
59:39 - so we can imagine that this class here
59:41 - myapp is a class which effectively
59:42 - contains your application okay now how
59:45 - we actually define a class my app is we
59:47 - use the classes name which is my app as
59:48 - you can see there and we can see it's
59:50 - got a capital m and a capital a that's
59:52 - because in general with java when you're
59:54 - defining class names you capitalize the
59:56 - words that make up the name of the class
59:58 - that's why it's capital m and capital a
60:00 - and immediately before this we've got a
60:02 - word which is class and that's because
60:04 - in java when you're defining something
60:05 - you have to tell the compiler what it is
60:07 - you're defining so you're defining a
60:08 - method or a class or a variable whatever
60:11 - else it might be we'll come across these
60:12 - things a little bit later on but for now
60:14 - just know that to create this class you
60:15 - must at least have word class then
60:17 - followed by the name of the class then
60:18 - of course inside the class itself you
60:20 - need to actually give the code which you
60:22 - want to go inside the class so in other
60:23 - words you need to give the methods which
60:25 - define the behavior of the class you
60:27 - defined those inside the class and you
60:28 - also need to define as well the data
60:30 - that it's going to hold so a class in
60:31 - general in java it holds methods which
60:34 - will tell objects what you want them to
60:35 - do and it holds data which will tell
60:38 - objects data all the states if you like
60:40 - which you want them to hold and you need
60:42 - to wrap all of those inside these curly
60:44 - braces which you can see here so a
60:46 - classical relation in java at least
60:48 - needs to have plus in the class name and
60:50 - an opening curly brace then the code you
60:52 - actually want to put in the class and a
60:54 - closing curly brace now you'll also see
60:56 - this word at the front which is public
60:58 - and that's because in general most
60:59 - things that you declare in java can have
61:01 - what's known as a visibility modifier
61:03 - that's just a fancy way of saying how
61:05 - visible that thing in this case the
61:07 - class is going to be to other items or
61:09 - other things inside your program and
61:11 - with this word here public it means that
61:13 - basically everything inside the scope of
61:15 - the program will be able to see the
61:16 - class myapp we'll see this a bit further
61:18 - down the line when we called a quick
61:20 - class up in an ide but yeah that's
61:21 - basically how you declare classes inside
61:23 - java next up we have these method
61:25 - declarations so as we've said in java
61:27 - classes contain methods and a method
61:30 - basically is a program code or rather it
61:33 - contains the program code of something
61:35 - you want to have happen so here for
61:37 - example we've got a method called greet
61:39 - again methods have names just like
61:40 - classes do and again we can see we've
61:42 - got the opening curly brace and the
61:43 - closing curly brace so as you might
61:45 - imagine inside these two things you have
61:48 - the actual code that you want to execute
61:50 - whenever this grease method is called in
61:52 - other words the thing you want to
61:53 - actually do which is also known as the
61:54 - implementation of the method and you'll
61:56 - see also again that at the front there
61:58 - we've got this keyword again called
62:00 - public so by the way as well we have
62:02 - these things called keywords so keywords
62:04 - are basically special words that you use
62:06 - in java which signify something special
62:08 - to the java compiler as we've said
62:10 - before we've got public as a keyword and
62:12 - public means that any other items in the
62:14 - program can access this particular thing
62:16 - which in this case is a method that
62:18 - means that if i have 10 20 different
62:19 - classes inside my java program all of
62:22 - those classes will be able to see this
62:24 - greet method that's one keyword void is
62:26 - another keyword which we'll get to in a
62:28 - second and we have class as well which
62:30 - we've just seen before which is the
62:31 - keyword used to declare a class so i
62:33 - come into this void and the brackets
62:35 - which you can see here so after greet
62:37 - after the name of the method which is
62:39 - greet we've got these opening and
62:41 - closing brackets called parentheses and
62:44 - what you normally find inside these
62:45 - parentheses you find the input
62:47 - parameters so in other words the inputs
62:50 - that this method can take so a method in
62:52 - general you want it to do something and
62:53 - in order for it to do something
62:54 - sometimes it might need to take actually
62:56 - more often than not it might need to
62:57 - take some specific input some specific
63:00 - parameters we call them so you'd place
63:02 - them inside these parentheses now if you
63:04 - just see parentheses on the run with
63:06 - nothing in them then that actually means
63:08 - quite logically there are no inputs to
63:10 - this particular method so here this
63:11 - method called greet it doesn't take any
63:13 - inputs in other words it doesn't need to
63:15 - have any values has to it to be able to
63:17 - do its job
63:18 - the reason is because for example you
63:20 - can imagine it would just display hello
63:22 - world on the screen and if it just
63:24 - displays hello world on the screen it
63:25 - doesn't need to have an input conversely
63:27 - if you wanted it to take an input you
63:29 - could for example has seen a so-called
63:31 - string which is a piece of character
63:33 - information in other words a word pretty
63:35 - much and that string might be called
63:37 - name then you could say hello and then
63:39 - the person's name so you could use that
63:40 - so-called variable to be able to access
63:42 - the value that's passed to this method
63:44 - we'll get to how we call methods also
63:46 - notice how we invoke methods a little
63:47 - bit later on when we get into the demo
63:49 - of how we can code some java and but for
63:51 - now just know that the parentheses
63:53 - enable you to pass the method the inputs
63:55 - of that method so the parameters that it
63:56 - takes now if you pass things in
63:58 - obviously there's a chance that you
64:00 - might want to pass things back out and
64:01 - you can pass something back out by the
64:03 - word which goes before the name of the
64:05 - method and that's that special void word
64:07 - we see here so a void in this case is a
64:09 - special word special keyword which
64:11 - actually means don't return anything so
64:13 - again in the case of the greet method
64:15 - which is just going to display hello on
64:16 - the screen it doesn't need to return
64:17 - anything it doesn't need to pass
64:19 - anything back to another method that
64:20 - might have called it because methods can
64:22 - call other methods that's how java
64:23 - programs work to get the job of the
64:25 - program done and in this particular case
64:27 - because it's just printing single thing
64:29 - which we'll just define inside the
64:30 - method itself which is this hello world
64:32 - couple of words it doesn't need to
64:33 - return anything to anybody else so then
64:35 - you'd use this keyword void now if you
64:37 - wanted to return something else for
64:38 - example you wanted to return the
64:40 - greeting itself then you could replace
64:41 - void with the actual so-called return
64:43 - type that's basically the type of the
64:45 - thing that you're returning you could
64:46 - say public string greet that would mean
64:49 - that this method returns a string
64:51 - character data we saw before that's a
64:53 - string of alphabetical characters
64:55 - basically or maybe you want it to return
64:57 - something else you could return an int
64:58 - for example which stands for integer
65:00 - that could be just a number you're
65:01 - returning you might return a date if
65:03 - you're doing some kind of logic to
65:05 - manipulate the date on the calendar that
65:07 - kind of thing i could return an object
65:08 - as well so you can return choose to
65:10 - return whatever you want basically and
65:12 - also similarly with inputs you can also
65:14 - choose to pass in whatever you want so
65:15 - again objects hints those are numbers
65:18 - strings that kind of thing whatever you
65:20 - want to pass in that's fine you just
65:21 - separate them with commas that's how
65:23 - method declarations work then we've got
65:25 - variable declarations so here's a
65:26 - variable declaration here now variable
65:29 - is a place inside the program which is
65:31 - kind of like a storage area you can
65:32 - think of it as being a box and inside
65:34 - that box it's going to hold some piece
65:36 - of data some value that you want to
65:38 - assign to this variable in other words
65:39 - put inside the box so here for example
65:41 - we've got string recipient name and you
65:44 - can imagine that might have a value
65:45 - assigned to it which is your blogs for
65:47 - example maybe this might occur if you
65:49 - were writing some logic to process an
65:51 - order for example on a website like
65:52 - amazon you imagine amazon might have
65:54 - some kind of order processing java code
65:55 - there you could also store number and
65:58 - this is an integer it's a whole number
65:59 - so number of items for example you might
66:01 - call num items and here by the way as
66:03 - well you can see that the convention
66:06 - that means the pattern or the rules you
66:07 - have to stick to the convention we're
66:09 - using to use as the name for the
66:11 - variable is slightly different from that
66:13 - with a class so here it doesn't start
66:15 - with a capital it starts with a
66:17 - lowercase that's nice because it means
66:19 - that we can just by looking at two items
66:21 - last name or a variable name we can
66:23 - quite easily tell if we're working on a
66:24 - variable or if we're working with a
66:26 - class
66:27 - that's the reason for that and finally
66:29 - you might have shipping address for
66:30 - example and that could hold a reference
66:32 - to that means the actual type of the
66:34 - thing that's inside the box that's the
66:35 - thing which comes first so in all of
66:37 - these cases you'll see the first word
66:39 - the keyword which you have is basically
66:41 - the type of the thing you're storing in
66:42 - the variable so string recipient name so
66:45 - we're going to store characters in their
66:46 - character data our words are for numeric
66:48 - characters in num items here we're
66:50 - storing in a number an integer okay so
66:52 - that means that we can't for example
66:54 - assign a person's name to num items
66:56 - because that will fit inside that box
66:58 - that box is just designed for numbers
67:00 - it's not designed for strings similarly
67:03 - recipient name we can assign the number
67:05 - 2042 to recipient name because it's
67:08 - expecting characters character data and
67:10 - then the real power of object oriented
67:12 - programming which java is based on is
67:14 - that you can then start to work at
67:16 - higher levels you can start to compose
67:18 - things together in other words build
67:19 - them together with building blocks so
67:21 - here we can see we've got shipping
67:22 - address now shipping address its type of
67:25 - the thing that it holds is an address
67:27 - right and an address can be a class
67:29 - which is defined elsewhere in the
67:30 - program and that address might also have
67:32 - other items in it it might have a string
67:34 - which is address line one another string
67:36 - which is address line two maybe it might
67:38 - have a zip code which is of type zip
67:41 - code and zip code itself could be a
67:42 - class and maybe inside the class zip
67:45 - code it also has in addition to the
67:46 - actual numbers and letters that it's
67:48 - holding the data that it's holding just
67:50 - like we're defining data here in
67:52 - addition to that it might also have a
67:53 - method which can validate a zip code
67:55 - passed in so when you try and create a
67:56 - zip code for example out of a string so
67:59 - you pass it a zip code in my on creation
68:01 - of that string also invoker method to
68:03 - make sure that that string is valid so
68:05 - in other words it's a valid zip code and
68:06 - you can put that kind of logic in these
68:08 - objects in these classes which we'll see
68:11 - now where do you define variables you
68:12 - can define them either inside a method
68:15 - or alternatively as we can see here you
68:17 - can define them inside a class and when
68:19 - you define them inside a class you
68:20 - typically find them grouped together
68:22 - like this and you'll also see another
68:24 - modifier visibility modifier or access
68:26 - modifier which we haven't come across
68:28 - yet and this is private so just like
68:30 - we've seen public before which basically
68:32 - means that anything in the application
68:33 - can see that other thing we also have
68:35 - this other keyword called private and
68:37 - that means that only the thing that
68:39 - holds these variables can see those
68:41 - variables for example if these were in a
68:43 - class which is called order so imagine
68:45 - we've got some kind of order class which
68:47 - we've created to hold the information
68:50 - when somebody makes an order on amazon
68:52 - for example if we were doing some kind
68:53 - of website like amazon then maybe we
68:55 - want to have the recipient name in other
68:56 - words who's going to receive the order
68:58 - the number of items how many things
69:00 - they're actually ordering and the actual
69:02 - shipping address so where we need to
69:03 - send it we'd have other things as well
69:04 - of course like for example the thing
69:06 - that needs to be sent that's obviously
69:07 - not on here but this gives you an idea
69:10 - now when we have these items of data
69:12 - which are inside the order class we're
69:13 - going to keep them private so that it's
69:15 - only the order class who can operate on
69:18 - these values
69:19 - and the reason for that is just keep
69:20 - things nice and tidy because if these
69:22 - were public it basically means that any
69:24 - other class in the application could
69:26 - start meddling with and interfering with
69:27 - these data values and then you can risk
69:29 - the so-called integrity of the program
69:32 - so a nice thing about object-oriented
69:33 - design object-oriented programming is
69:35 - that you can so-called encapsulate as
69:37 - the word here
69:38 - encapsulation encapsulate the
69:41 - data that's inside an object inside the
69:44 - object itself you can think of this
69:46 - pretty much being like order is like a
69:47 - box and it has three other boxes inside
69:50 - string ins and address recipient name
69:52 - number of items and shipping address
69:54 - it's only the order class itself which
69:56 - can see and operate on these values we
69:58 - have two items to objects or classes
70:01 - that is we have data members which we
70:03 - can see here that's actually holding the
70:05 - state of a given object
70:07 - but we also in addition we have methods
70:09 - as we've seen as well
70:10 - so you could imagine basically an order
70:12 - class might have some behavior attached
70:14 - to it which we've programmed which we
70:15 - call dispatch and so you can imagine
70:17 - that at some point in the program
70:19 - another object perhaps when we've
70:20 - actually received the cash or entered
70:22 - our credit card details or rather
70:23 - receive the credit card details from the
70:24 - user we then invoke the dispatch method
70:28 - and inside the dispatch method we'd have
70:29 - the code to actually send the order and
70:31 - maybe that might return back something
70:32 - as well so for example it could return
70:34 - an order reference which might be just
70:36 - one big long number
70:37 - so here we can see another so-called
70:39 - data type which is long which basically
70:41 - means like a number which is much bigger
70:43 - than you can hold inside an integer
70:45 - don't worry about that too much for now
70:46 - the different types you have in java but
70:47 - just know that classes have two things
70:50 - they have data members and they have
70:51 - methods and they're defined like this so
70:53 - going back to the idea before we have a
70:55 - first class or a primary class or the
70:57 - main class if you like which actually
70:58 - starts an application how does that work
71:00 - then well that works with something
71:01 - called a main method so here we can see
71:04 - a main method and it looks a little bit
71:05 - more complex than the format of the
71:07 - other methods that we've seen but it
71:08 - actually follows the same syntax so here
71:10 - we can see the name of the method is
71:12 - just before these parentheses it's
71:14 - called main that's the name of the
71:15 - method inside the parentheses we can see
71:18 - the input parameters to that method
71:20 - which is always the same it's basically
71:22 - a group of strings this group is called
71:24 - an array it basically means they can
71:25 - pass in multiple strings or multiple
71:27 - character data to that method that's
71:28 - what those two square brackets mean
71:30 - after the string word
71:32 - now inside the code of the method if we
71:33 - wanted to access those we'd access them
71:35 - by using the word args which is
71:37 - basically the name of that array that we
71:38 - can use inside the method code to be
71:40 - able to access the inputs that have been
71:41 - passed in
71:42 - now to the left of main we've got void
71:44 - which we've seen that means it doesn't
71:46 - return anything and indeed there's
71:47 - nothing that it could return there's
71:48 - nowhere it could return any data to
71:50 - because it's just going to be invoked
71:52 - from when we run the jvm like we've seen
71:54 - before when we do java and then the
71:56 - class name what the jvm does is it
71:57 - basically looks for that class looks for
71:59 - a main method inside that class which is
72:01 - this one and then runs it but because
72:02 - nobody's calling it besides the
72:04 - operating system or beside the jvm or
72:06 - rather the jvm it doesn't need to return
72:07 - anything so it returns void right at the
72:09 - very front we can see it's public that
72:11 - means that anybody can call it which is
72:12 - useful if you want other classes to be
72:14 - able to kick off the program but in
72:16 - general you don't really care about that
72:17 - but nevertheless it's public it makes
72:19 - sense for it to be public because it's
72:20 - the main method and finally in between
72:22 - public and void we've got this other
72:23 - method called static and what that means
72:25 - is a special keyword again that
72:26 - basically means that
72:28 - this method can be invoked it can be run
72:31 - but it doesn't have to be invoked or run
72:32 - against an object it can just be invoked
72:34 - as is against the actual class which
72:36 - contains that method we'll see that
72:38 - later on but don't worry about that for
72:39 - now and you can see as well of course
72:40 - we've got the implementation of the
72:42 - method we have between the opening and
72:44 - closing curly brace there as well so
72:46 - let's see how we can put it all together
72:48 - into a java program now by jumping over
72:50 - to the id and putting it all together
72:51 - yeah let's jump in now and give you a
72:53 - quick demo of how we can actually use
72:54 - the ide so we're going to use eclipse
72:56 - for this and it's basically just to give
72:57 - you a kind of a kind of an idea kind of
72:59 - a walkthrough basically of what typing
73:01 - some java code into an id looks like so
73:03 - we'll see how we can type in code
73:04 - features of the id how the builds
73:06 - occurred how it compiles it how we can
73:08 - run the card too afterwards we'll have a
73:10 - look at how we can actually debug code
73:12 - let's jump in
73:13 - oh by the way i'm on a mac for this and
73:15 - but don't worry though because actually
73:16 - as it happens eclipse and intelligent
73:18 - idea they're both applications which are
73:20 - programmed in java and so because of
73:22 - this it means that they're pretty much
73:23 - the same to use on both platforms you
73:24 - shouldn't have any difficulty in
73:26 - understanding me showing you this and it
73:27 - clips on a mac if i jump in now and i
73:30 - just click this eclipse
73:35 - so we'll just accept this as the default
73:38 - that's fine just to launch
73:43 - so if we just double click this maximize
73:45 - it
73:46 - and get rid of this screen and here we
73:48 - can see we're in eclipse and here we can
73:49 - see we're actually in the so-called
73:51 - eclipse workbench so you'll see here
73:53 - that in the main pin we don't have any
73:54 - program code yet that's because we don't
73:56 - have a program specifically we don't
73:57 - have a project in fact which is where we
73:59 - actually put our program code in order
74:01 - to write a program you need to have a
74:02 - project so that's the first thing we're
74:03 - going to do so let's jump in and create
74:04 - a project together so there are
74:05 - different types of projects you can see
74:07 - over here
74:08 - i'm just going to go into this one and
74:09 - create the simplest possible type of
74:10 - project java project
74:13 - if i go down to next
74:15 - project name we'll just call it
74:17 - myapp we can accept the defaults on here
74:20 - so just go down to finish
74:23 - and it's going to ask us if we want to
74:24 - open up an associated perspective this
74:26 - is basically a layout of the windows
74:28 - which defines pretty much what tools you
74:30 - want to see when you want to have them
74:31 - positioned so i'll just do remember my
74:33 - decision and then do open perspective
74:35 - and now we're in this so-called java
74:37 - perspective which means we can actually
74:38 - start doing our programming so if we go
74:40 - over to here into package explorer and
74:41 - double click this this actually shows
74:43 - you the project itself so the project so
74:45 - far just has two things associated with
74:47 - it it has
74:49 - source folder which is where we're going
74:50 - to put our program code and it has this
74:52 - jre system library this is basically
74:54 - saying which version of java you're
74:56 - going to use so i want to create a class
74:58 - which is going to be the main program so
75:01 - i right click here
75:03 - and i go into new
75:04 - and i could just go straight for new
75:06 - class i could do that but instead what
75:08 - i'm going to do is i'm going to create a
75:09 - package first and a package is basically
75:11 - kind of like a well-named folder in
75:13 - which you can group different source
75:14 - files that's not too important to
75:16 - understand now but in general with java
75:17 - it is something that you need to do
75:18 - where you basically place classes into
75:20 - packages just keeps everything nice and
75:22 - organized
75:23 - so i'm going to give a package name
75:27 - of com.java easily
75:30 - got demos i'll do for now and then i'm
75:33 - just going to hit enter i don't have to
75:35 - use the mouse to click this finish
75:36 - button if it's already highlighted blue
75:38 - like this i can just hit enter and it
75:39 - saves me from having to move the mouse
75:41 - over there so enter just picks out the
75:43 - default person that's currently
75:44 - highlighted effectively clicks it for
75:46 - you and by the way as well packages in
75:48 - general they follow what's known as the
75:49 - reverse domain convention that basically
75:51 - means that you take the domain name of
75:53 - the company that you work for in my case
75:54 - it's java easily.com and then you
75:56 - reverse that that'll give com.java
75:58 - easily then after that you can put
76:00 - whatever you like which makes sense to
76:01 - your organization just to be able to
76:03 - group the different classes that you
76:04 - write so here this explains com.java
76:06 - easily.demos so now if i just right
76:09 - click in here
76:10 - now i can create the class i go to new
76:12 - class and we can see here it's going to
76:13 - create it in the source folder it's
76:15 - going to create it in this package here
76:16 - that we've just created now i just have
76:18 - to give the name of the class so i'll
76:20 - call it my app
76:22 - and also there's some extra options here
76:23 - which we don't really care about apart
76:24 - from this one over here we tick this
76:26 - it's also going to create that standard
76:28 - main method which we said before kicks
76:30 - off the java program so we'll just do
76:31 - that and click finish
76:33 - now we can see we've got our first class
76:35 - my app where we can put our program code
76:37 - and we put it inside the main method and
76:39 - at this point this is a fully working
76:41 - program doesn't do anything because we
76:42 - haven't actually got an implementation
76:43 - we haven't got anything rather we
76:45 - haven't given any instructions inside
76:47 - here so let's just plug in a line now
76:48 - just to print out our message
76:50 - so to do this we use the system class
76:53 - which is part of jdk
76:55 - you'll see here that it's in the
76:56 - java.lang package
76:58 - so that's one thing to know about java
76:59 - any classes which are in the java.lang
77:01 - package they get what's known as
77:03 - imported automatically for you which
77:05 - means that you don't have to explicitly
77:06 - declare that you want to bring some
77:08 - class in to use it now we haven't looked
77:10 - at imports basically if you want to use
77:12 - glass from another library typically
77:13 - what you'll do is between the package
77:15 - statement at the top on line one and the
77:16 - class declaration on line three you'll
77:19 - use an import statement and the import
77:21 - statement will be something like for
77:22 - example import
77:24 - java.util.list for example if you wanted
77:26 - to reference a list from the java.util
77:28 - package the java comes with a whole heap
77:30 - of different classes which are inside
77:31 - various packages as part of the jdk you
77:33 - can have all of those at your disposal
77:34 - as well but for now just know that we've
77:36 - got the java.long package which has
77:37 - effectively been auto imported for us
77:40 - anyway so then i do system dot
77:42 - you can see here this is the compiler
77:44 - giving us helpful suggestions so if i
77:45 - look in here if i scroll up you can see
77:48 - it's not just one method or field it's
77:49 - given us it's given us a whole heap of
77:50 - them a whole different array of them
77:51 - these are all the different methods or
77:53 - fields these variables inside the class
77:55 - that i could actually access now so for
77:57 - example we're going to do
77:59 - this one here which is out
78:02 - so i could either type out like that and
78:05 - as you can see as i type to each
78:06 - character maybe just back up a little
78:08 - bit
78:09 - i type each character so i type the o
78:11 - first you can see there that it's
78:13 - actually matching
78:15 - and filtering the list based on that
78:17 - specific letter
78:18 - i do you next now you can see it's got
78:20 - two options it can
78:21 - suggest for me i want this one also as
78:24 - well another really nice thing in
78:25 - eclipse you'll see on the right hand
78:27 - side there of the method and field
78:29 - suggestions they've got this kind of
78:30 - like documentation panel and this is
78:32 - actually showing you the so-called
78:34 - javadoc that's the java documentation
78:36 - for this particular field on the system
78:38 - class so it's really nice that you get
78:39 - this kind of help specifically when
78:40 - you're starting out as well so you can
78:42 - go over for example you just have a read
78:44 - of it
78:45 - you can scroll up and see
78:48 - what it's telling you
78:49 - you can see they're saying there's some
78:50 - other methods that you could also choose
78:52 - to look at as well if you wanted to
78:54 - we're not going to look at this in
78:54 - detail now but just know that it's there
78:56 - to help you and it's again it's another
78:57 - one of these nice aspects of eclipse
78:59 - that you have which again makes eclipse
79:01 - in my opinion the best id for beginners
79:03 - to start out with
79:04 - that said if i hit enter
79:06 - now i've got this system.out reference
79:08 - which is a reference to the print stream
79:10 - which enables us to be able to write a
79:11 - message to the display now if i press
79:13 - another dot
79:15 - here you can see we've got the same kind
79:16 - of thing again only this time instead of
79:18 - it showing us like you did before
79:19 - methods or fields which were available
79:21 - on the system class now of course we're
79:23 - not accessing the system class anymore
79:25 - now we're accessing the print stream
79:27 - because out which is a field inside the
79:29 - system class the actual type of that the
79:31 - print stream so that's how it works in
79:33 - java pretty much whenever you have a dot
79:35 - it's the thing immediately to the left
79:37 - which is being referenced and again when
79:39 - you press the dot you can either access
79:41 - fields on the class or object or methods
79:43 - on the class or object another method i
79:45 - want is called print line so if i start
79:47 - typing p
79:48 - r i n t
79:51 - l n
79:52 - you can see here we have a whole heap of
79:54 - methods which all appear to have the
79:55 - same name and that's because they're the
79:57 - same method but in java you can specify
79:59 - method multiple times with each method
80:01 - declaration accepting different types of
80:03 - input and that makes the method very
80:05 - flexible so for example here you can see
80:06 - we can choose to pass in
80:09 - i use my arrow keys
80:12 - an integer that's the type for those
80:14 - whole numbers we saw so numbers like 3
80:16 - 17 4072 that kind of thing
80:20 - oh we could pass in a string so that's
80:22 - why we have a message which is in
80:23 - quotation marks so it's a very flexible
80:25 - feature of java and it's known as method
80:27 - overloading if i now press enter
80:29 - and you can see it's automatically
80:31 - selected that particular method for me
80:33 - it's also put the parentheses around as
80:35 - well and now it's also saying okay we'll
80:37 - give me a string which you can see there
80:38 - above if i just put quotation mark hello
80:41 - world the quotation mark
80:43 - at this point you can see that we've no
80:45 - longer got any red underlined squiggles
80:47 - squiggly underlines
80:48 - nor do we have any of those red crosses
80:50 - in the circles that's because now this
80:52 - particular class is valid java code in
80:55 - other words it can be compiled down to
80:57 - bytecode and then executed on a jvm if i
81:00 - move this cursor away you can see as
81:02 - soon as i moved it to the right by the
81:03 - way i'm using the arrow keys do this so
81:05 - your left arrow moves you one way right
81:07 - arrow moves you the other way so as soon
81:09 - as i moved it to the right because we
81:11 - were outside of those parentheses then
81:14 - eclipse notice that there's no point in
81:16 - giving us that little helpful tip which
81:17 - told us what it was expecting which was
81:19 - a string so at this point we've got a
81:21 - valid program now if i just
81:23 - save it because we've got this star here
81:25 - which means we haven't saved it so i'd
81:26 - do command s on a mac ctrl s on windows
81:29 - just save that and then if i
81:31 - right click on here
81:33 - the class itself
81:35 - and do run as java application
81:38 - and then we'll see here we've got this
81:39 - new tab which has popped up called
81:40 - console
81:42 - it says that the program's finished
81:43 - that's what terminated means
81:47 - and you'll see underneath we've got
81:49 - a message a string that we passed the
81:51 - system.out.printline which said hello
81:53 - world so you can see here a few things
81:55 - number one it's allowing us to type in
81:56 - the program code and with that it's
81:58 - giving a syntax highlighting showing us
82:00 - when we make errors and it's providing
82:01 - helpful suggestions number two because
82:04 - it ran the program that means it must
82:05 - have compiled the program down to
82:06 - bytecode so it must have invoked the
82:08 - java c compiler somewhere along the line
82:09 - which we'll see in a second
82:11 - finally number three is actually running
82:13 - the program for us as well which means
82:14 - it's passing that compiled by code the
82:16 - jvm
82:17 - we can see here in fact this is the
82:18 - actual command
82:20 - that it used to do that when it launched
82:21 - a jvm now just to show you as well we
82:23 - actually do have this file which was
82:24 - generated that's the bytecode don't
82:26 - forget if we go up to window
82:29 - and go to a new view we go down to
82:31 - navigator
82:34 - and you can see here this is actually
82:36 - showing us all of the files which are in
82:37 - the project
82:39 - so this
82:42 - panel here this pane here is just
82:43 - showing us basically the items that are
82:45 - relevant to our source code it's just
82:47 - purely focused on showing us the
82:48 - relevant things it's actually shielding
82:50 - things from us that we don't necessarily
82:52 - need to see on a day-to-day basis which
82:53 - is kind of good because you can just
82:54 - focus on exactly what you need to focus
82:56 - on which is the actual code and making
82:58 - that work but you'll see we don't have
82:59 - for example the myapp.class file which
83:01 - we'd expect
83:03 - it is there it's just in a separate
83:04 - subdirectory so if we go down to the
83:06 - navigator view here
83:08 - you'll see that this is the actual real
83:09 - object structure with all of the files
83:12 - and you'll notice that inside
83:14 - our source folder we've got source com
83:17 - java easily demos myop.java
83:20 - by the way that's one thing to bear in
83:21 - mind as well that the package that you
83:23 - place a class into actually gets turned
83:26 - into a directory structure like this so
83:27 - you can see this is like comm dot java
83:29 - easily dot demos which corresponds to
83:31 - com
83:32 - java easily the demos up there anyway
83:34 - that's where the source file was
83:36 - and similarly if we go into the bin sub
83:38 - directory
83:39 - we'll see the same structure so we'll
83:41 - see com
83:42 - java easily demos corresponding to
83:45 - com.java ease little demos because java
83:47 - classes in a specific package compile
83:49 - down to class files which are in the
83:51 - same package so therefore it has the
83:52 - same folder structure and inside there
83:54 - you can see we've got myapp.class
83:57 - which corresponds to
83:59 - my app.java here so
84:01 - class my upload chart so if i close
84:03 - these off
84:04 - and this one too
84:05 - and you'll see there are also some other
84:07 - files and folders there as well we've
84:08 - got the project the class path
84:10 - and our settings these are folders and
84:12 - files for eclipse's internal use we
84:14 - don't need to know about those for now
84:16 - so if we just come out of this and so
84:18 - we'll just see now how a method works
84:19 - for example
84:21 - so i can actually take this piece of
84:22 - card here
84:24 - i can do this i can actually do a
84:25 - special advanced procedure which i'll
84:27 - give you a sneak peek into
84:29 - or refactoring so if i just right click
84:31 - here
84:33 - and i go down to this menu here refactor
84:36 - and use this one here called extract
84:38 - method
84:39 - if i click this
84:40 - now what this is actually going to do is
84:42 - it's going to take this statement out or
84:45 - printing hello world and it's going to
84:46 - push it into its own method and replace
84:48 - it then with a call to that method
84:50 - this is a great way how we can first of
84:52 - all reinforce our understanding of how
84:54 - methods are declared but also we can
84:56 - actually see how they're invoked as well
84:58 - how the method is actually called in
84:59 - other words this asking me to give it a
85:01 - name so i'm going to call
85:03 - method
85:04 - say greeting for example
85:07 - and here you can see we've got these
85:09 - access modifiers we were talking about
85:10 - before you'll recognize private and
85:13 - public earlier on in the course
85:15 - we'll just leave it for private for now
85:16 - that's fine
85:18 - because we're only calling this method
85:19 - from within this class
85:21 - it's okay that it's private it'll still
85:23 - be visible to the method from which is
85:25 - called as we'll see
85:26 - then here we can see we've got a preview
85:29 - of the signature itself
85:31 - and the method signature is just a fancy
85:33 - way of saying what the method
85:34 - declaration looks like with all its
85:36 - combination of modifiers return types
85:38 - method name and input parameters so now
85:41 - if we click on ok
85:43 - you'll see that just like that we've got
85:45 - a new method so this is how you actually
85:47 - call a method
85:48 - you just basically use the method name
85:50 - then
85:51 - the two parentheses there which matches
85:53 - the method name here and the two
85:55 - parentheses here and here we can see the
85:57 - method declaration itself so if we rerun
85:59 - this now it shouldn't change anything
86:02 - just right click again go down to run as
86:05 - java application yeah it hasn't changed
86:07 - anything
86:09 - so you're probably saying well what's
86:10 - the point in re-running it the point of
86:12 - re-running it is just to make sure that
86:13 - after we did that so-called refactoring
86:15 - we're just rerunning it to make sure we
86:16 - didn't break anything because in spite
86:18 - of the fact that we didn't actually have
86:19 - any red error marks do we did that it's
86:22 - still possible that we might have some
86:23 - kind of errors or whatever depending of
86:25 - course on how complex the curve
86:26 - refactoring you were doing actually was
86:28 - so let's quickly demonstrate now how we
86:29 - can actually pass parameters so if i
86:31 - just go up here
86:33 - let's supposing i want to pass a
86:34 - parameter here such that instead of
86:36 - saying hello world it will say hello and
86:37 - then the person's name in order to do
86:39 - that let's put in a parameter here so we
86:42 - use the type of the parameter which is
86:44 - going to be a string because it's going
86:46 - to hold textual data so character data
86:48 - so alphabetical characters that kind of
86:50 - stuff
86:52 - and we give the variable a name
86:54 - which coincidentally we'll also call
86:56 - them because that makes sense we're
86:57 - passing in the name of the person we
86:59 - want to greet and once we've done that
87:01 - we can delete this
87:04 - and replace world with
87:07 - the variable that we passed him
87:09 - if we pass in
87:10 - matt it would say hello i'm at with us
87:12 - in john it would say hello john
87:14 - and you'll notice over here
87:16 - we're getting this red squiggly
87:18 - underline again and the reason is of
87:20 - course because we're not actually
87:21 - passing a name now because we haven't
87:23 - adjusted this method call
87:25 - to take into account that we're now
87:26 - passing a name here
87:28 - and if we didn't know that give you
87:29 - another demo of how helpful ids can be
87:32 - if we just click on this
87:33 - x over here
87:35 - we can see that it's offering us some
87:37 - ways to fix this situation
87:39 - it's saying we can either add an
87:40 - argument that means a pass a parameter
87:42 - to match the fact that the method takes
87:44 - a string parameter that's what we're
87:46 - going to do by the way our alternative
87:48 - is saying do you know what you can
87:49 - actually change the method itself to
87:51 - remove parameter both of those if you
87:53 - think about it would fix the situation
87:55 - just press escape quickly just to
87:56 - explain this if we pass in a parameter
87:58 - here which is a string it will match
88:00 - this which means it would then work
88:02 - and remove that red x square the
88:03 - underline and similarly as well if we
88:05 - removed this parameter here
88:07 - then we'd have a method which doesn't
88:09 - take any parameters so that would also
88:10 - work which would again remove this
88:12 - squiggly underline and the red x
88:14 - so both of those options are perfectly
88:16 - viable if we go back on again by
88:18 - clicking it we see there's another
88:20 - option as well which is to create a
88:21 - completely different method which
88:22 - doesn't take a parameter at all and at
88:24 - this point you'd actually have two
88:25 - methods with the same name
88:27 - one takes a string one doesn't that's
88:29 - the concept of overloading i mentioned a
88:31 - few moments ago
88:33 - so yeah all viable options which the id
88:35 - is offering you all easy to understand
88:37 - and simple to digest as long as you read
88:39 - actually what it's saying and you'll
88:41 - notice as well that on the right hand
88:42 - side where we saw the documentation
88:44 - panel before which gave us help
88:45 - documentation this time we've actually
88:48 - got a potential preview of code that he
88:49 - could write for us
88:51 - now he doesn't know who we actually want
88:52 - to say the greeting to whether it's matt
88:54 - or john so the best it can work out and
88:57 - say whatever that is infer the best it
88:59 - can infer which we usually say the best
89:01 - it can infer is just to say well okay
89:03 - don't really pass anything past null we
89:05 - won't go into null and what that is it's
89:06 - outside the scope of this lesson but
89:08 - it's one solution and similarly as well
89:10 - if you click this one
89:12 - it's again giving you a preview of what
89:13 - that would look like of course it hasn't
89:15 - fixed the entire code because even if it
89:16 - did that it removed that name parameter
89:20 - you'd still then get an issue here where
89:22 - you'd be referencing something that
89:24 - hasn't been passed in but it's enough to
89:26 - give you an idea what you might want to
89:27 - do and the where the id would adapt to
89:29 - the card for you so anyway we're going
89:31 - to double click here now and as it
89:32 - promised it's putting that null
89:33 - placeholder for us which meant that at
89:35 - least now the code compiles now instead
89:38 - we're just going to replace that null
89:39 - value
89:41 - with my name for example
89:43 - and if you just press escape afterwards
89:45 - it loses that box highlight so you can
89:46 - see the code a little bit better so now
89:48 - if we
89:49 - run the program
89:51 - and to run as
89:52 - java application we'll see that he's
89:54 - doing something else helpful because we
89:56 - didn't save that before it was a star
89:57 - there still now it's saying oh do you
89:59 - want us to save the resources for you as
90:00 - well you want to save the source file
90:02 - yes i do
90:03 - i even say always save the resources
90:05 - before launching so always overwrite
90:07 - and do okay and now we can see it's
90:09 - saying hello matt so that's an overview
90:11 - of how you can pass parameters into
90:13 - methods now to show you the idea about
90:14 - debugging that we were talking about
90:16 - before we could right click
90:19 - and do run as that will just run the
90:20 - program but i can also do debug as i can
90:22 - debug the program
90:24 - now before you do a debug now before you
90:26 - launch the debugger or rather the id
90:28 - when it's in debug mode you need to set
90:30 - a thing called a breakpoint and that's
90:32 - basically where you want the program to
90:33 - stop that is to stop running at that
90:35 - specific point so you can effectively
90:37 - take a look around so if i go up to here
90:39 - for example
90:40 - if i double click the margin just to the
90:43 - left of the line numbers let's say you
90:45 - set a breakpoint this means that now if
90:48 - i right click
90:49 - and do debug as java application
90:53 - will first of all ask me if i want to
90:54 - switch to perspective i'll say remember
90:56 - my decision yes i do go to the debug
90:58 - perspective now this is going to change
91:01 - the windows slightly and the panels that
91:02 - we've got so then now this particular
91:04 - perspective in other words this
91:05 - arrangement of windows and panels
91:08 - is geared towards debugging so in other
91:09 - words like looking through the card and
91:11 - actually it's called stepping through
91:12 - the code see everything that's going on
91:14 - just notice the fact that what we've
91:16 - actually got here now is
91:17 - the program
91:19 - is suspended
91:20 - just before it executes this line so
91:22 - this put this highlight in here it's
91:24 - highlighted this line what that means is
91:26 - i've stopped here just before i execute
91:28 - this line before i run this particular
91:30 - line or do this method call in this case
91:32 - and it's effectively saying what you
91:33 - want me to do it's not going to do
91:34 - anything unless we do something at this
91:36 - point
91:37 - what we can do is we can what's known as
91:39 - step into the method so
91:42 - this is the segreting method
91:44 - and it's calling this a greeting method
91:46 - so if i go up here to
91:48 - the run menu
91:50 - we'll see that the first few
91:53 - menu items here are effectively commands
91:55 - that you can do at this point so i can
91:57 - choose to do step into which is f5 which
92:00 - will go into that method or i could do
92:02 - step over which is f6 which goes over
92:04 - the method i'll just show you what those
92:05 - mean now so if i
92:07 - click back here
92:09 - press
92:10 - f5 you'll see that now it's gone inside
92:14 - of this method call so now it's inside
92:16 - this method here which we have you'll
92:18 - also see a few other things now as well
92:19 - you'll see that in the right hand pin we
92:21 - can actually see the variables that are
92:23 - available now so
92:25 - this method has a name variable which is
92:27 - passed in
92:28 - if i hover over it here
92:30 - it actually tells me what that value is
92:32 - is matte which is really helpful and
92:34 - you'd only get this in the debug view by
92:36 - the way because this is now running code
92:38 - it's not us programming it it's the jvm
92:40 - running it now
92:41 - you can see over here we've got variable
92:43 - name
92:44 - it says matte
92:45 - and then over on the left hand side
92:48 - you can actually see what's known as the
92:50 - call stack
92:51 - that's basically showing us the sequence
92:52 - of calls that have been called it's kind
92:55 - of funny but it goes from the bottom up
92:57 - so it's saying basically the first thing
92:59 - that it ran was
93:00 - the main method in the my app class
93:03 - which happened to take an array of
93:04 - strings that's corresponds to this one
93:06 - here the main method in the my app class
93:07 - which took an array of strings
93:11 - they got to line six you can see here
93:13 - line six which is this line here
93:16 - and now it's at a break point on line
93:18 - ten
93:20 - in the say green ting method which takes
93:21 - a string so here where i got the
93:23 - segregating method which takes a string
93:25 - and this is line 10 which is stopped at
93:27 - and you can see
93:29 - line 10 here line 10 here it's showing
93:31 - you very accurately what's going on
93:33 - so like before when we stepped into the
93:35 - method if we had a method we wanted to
93:37 - step into the code of f5 instead we can
93:40 - press f6 now which is step over so when
93:43 - you step over something it just goes to
93:45 - the next line so if we do f6 now
93:47 - you can see it goes to the next line
93:49 - now if we do step over again
93:52 - you can see it jumped out of that method
93:54 - because it finished that method there's
93:56 - nothing else it needs to do there
93:58 - because it got to the end closing brace
94:00 - that right hand curly brace you can see
94:02 - there but also notice what happened as
94:04 - well
94:06 - the name
94:07 - variable which we had here before that's
94:10 - now gone
94:11 - that's because that's no longer what's
94:12 - known as in scope
94:14 - in other words it's not available to us
94:15 - anymore because in this method here
94:17 - there isn't a variable called nim
94:19 - that was only in that method here
94:21 - and only specifically for that method at
94:23 - that specific point in time but now that
94:26 - method's gone and we can tell that
94:27 - method's gone as well because if we look
94:28 - back over here to the call stack
94:30 - we no longer have this say greeting
94:32 - method here we no longer have it on the
94:34 - call stack and in fact now we've
94:36 - progressed from line six which it was
94:37 - before to line seven which is this one
94:40 - so finally if we press f6 to step over
94:43 - this point there's no more code to run
94:45 - the application's finished terminated
94:47 - we've finished what's known as our debug
94:49 - session
94:50 - you can also do various fun things as
94:51 - well when you're in a debugger for
94:52 - example you can change the values of
94:54 - things you can choose to return from
94:56 - methods early you can choose to throw
94:58 - exceptions we haven't seen an exception
95:00 - that's a way of being able to say
95:01 - there's an error in the code you do
95:02 - things like that it really enables you
95:04 - as a programmer to be able to really go
95:07 - in deep to your code and understand at a
95:08 - very deep level how it works now
95:10 - obviously this program is trivial it's
95:12 - like the easiest program we could have
95:13 - written to be honest in java programs
95:16 - they get of course increasingly more
95:17 - complex although don't worry because
95:19 - it's always manageable complexity
95:21 - because of the simplicity of the syntax
95:22 - of the language that's the combination
95:24 - of keywords and symbols and that kind of
95:26 - thing it's quite easy to get the hang of
95:28 - once you have a play around in practice
95:29 - a bit but the point is though once you
95:30 - take your programming to the next level
95:32 - you start developing more complex java
95:34 - programs that's when you really start to
95:35 - see the power of a debugger so yeah
95:37 - debuggers and ide is essential tool to
95:39 - have in any programmer's toolkit so that
95:42 - should have given you a nice overview of
95:44 - the main moving parts we have in java
95:45 - programs and also a sneak peek into what
95:48 - it's like to actually use an id to do
95:50 - some java programming as you can see
95:52 - once you know what you're doing it's
95:53 - actually not that complex after all

Cleaned transcript:

hi there welcome to this course on getting started with the java platform my name is matt speak i'm your instructor for the course and in this course we're going to go through all of the um kind of introductory things that you need to know about the java platform to be able to get started in other words to start your um kind of like develop a career if you like with java platform so a few things to say about this course um first off this is a course for complete and absolute total beginners so it doesn't matter if you've maybe had a little look at java before or if you know nothing about java whatsoever don't worry about that i take things completely from first principles so you're not going to get stuck you're not going to get into any kind of like um issues where you're not sure how things work just of course it's going too quickly everything in this course is designed to be completely and totally absolute beginners i promise you it's absolute beginners so you should be fine for this so that's all well and good but what's actually included in the course what are you actually going to learn so in general you're going to learn three things three things you're going to get out of this course and that's basically that we're going to get you set up with the tools that you need to be able to program in java so there's a certain set of tools that we need to get installed onto your system so we're going to get you up and running with that so you'll be able to get started and take it further you'll have all the tools installed in your system by the end of the course the second thing is that we're going to look into core concepts of java obviously core concepts we mean basically the the absolute fundamentals that you need to know to be able to get started with the platform so if you've heard terms like for example jvm jdk jre ig things like that class files by code don't worry about all of that now we're going to explain it all over the next few lessons so you're familiar with those core concepts and finally the other thing the third thing you're going to get out of this course is you're going to get a feel for java so by the end of the course you're going to know whether you want to take it further you know how it kind of feels to you it's a programming language as a development environment um i think you'll take it further because it's a really fun um and exciting programming environment to to program in um but at the end of the course you'll know yourself and you'll be able to make your own decision so those are the three things you're going to get out of this course okay you set up with the tools okay you set up with the core concepts and you'll have a field to know whether you want to take it further okay so if all that sounds good to you let's get started we're going to have a look at the java platform as a whole and we're going to basically see the core features of java and we're going to see why and java has become so popular in the marketplace uh have a look at who uses it and what kind of features and benefits it gives us and really yeah you're going to get a kind of like a flavor of of the bigger picture if you like so actually what java is so let's jump in so the first thing to know about java is that java is the world's number one programming platform right now today in 2021 and this is really quite exciting because it actually means that you're on the cusp of learning something extremely valuable obviously with that marketable as well but all of that as a package together and i want you to realize this takes you to the place right now where you're on the cusp of learning something really exciting and even potentially lifechanging for you as well now i don't see this lightly but to be honest if you want to have a career as a developer as a software engineer then pretty much java is the best option for you at this particular time because it's been popular now for well over a decade um it doesn't look like it's going to change anytime soon with all of the um different features that have been evolved the marketplace share that it has the kind of foothold that it has in the market in other words like all the different companies that are using it and that kind of thing so this genuinely is a really really really exciting opportunity for you if you feel like you'd maybe want to go down that route of being becoming a professional software engineer now don't just take my word for it we can look at a website there's a website called i'm not sure i pronounce it it's taiyobi.com or tirbe.com it stands for the importance of being earnest and what it does is it tracks the popularity of programming languages by looking at the amount of web searches that people have done for that particular programming language i'm kind of plotting them in a graph as we'll see so if we just jump in now i've got chrome up here popular web browser if i just jump into tayabi.com here we can see we've got the website for it and right over here on the right hand side you'll see this tab index so if we click that and we just scroll down you'll see that there's a graph at the bottom of the page so here we are so this graph is basically charting the popularity of the most popular programming languages that there are today and you can see it's here it's giving you've got a c java python c plus plus c sharp these are different programming languages that you can choose to go up software in the main thing that i want to point out here is if we click on one of these specifically click on the java one then from this you can clearly see by looking at the line graph that's highlighted which is the one in black just the one for java you can clearly see that java pretty much in general is ranked over and above any of the other languages so while there might be some contenders for that kind of number one spot namely with javascript and python which you may have heard about in spite of this java is still pretty much number one and it looks like it's going to continue that way for quite some time so just know that what you're actually learning in this course when you're establishing the beginning of that journey as a java software engineer you're learning something that is very marketable and ultimately going to be very profitable for you as well for the foreseeable future so i just wanted to point that out first of all so we've seen that java's the number one programming language today the next question you probably have is well okay who's using it then well pretty much all of the big players today use java as a development platform and so if we go through some of these now google use it so you're obviously familiar with google the popular search engine the most popular search engine in the world that uses java on the back end to power its products amazon huge ecommerce store the biggest ecommerce store in the world they use java 2. and why would companies like google and amazon choose to use java the reason for that is because of java's socalled scalability what that means i won't go into it too much but what it means basically is if you think about it with amazon or with google you have pretty much millions of people at any one time who are making requests on the website so for example in amazon they're looking up orders looking things up in the product catalog making orders changing things getting recommendations all that kind of stuff millions of people at the same time are using that website and this is possible because of the power of java because of its scalability for java you can pretty much um kind of like chain different java processes together kind of like grouping a whole load of computers together if you like so that the total combined power of all of those computers together can be used at the same time to be able to deal with all those millions of requests so that's pretty much the power of java so it's an incredibly powerful language and it's something in fact the main thing that's the reason for its popularity places like google and amazon but it's not just search engines and ecommerce sites we also have streaming services as well so for example spotify the popular music streaming service that uses java in addition netflix they also use java as well the reason they use it is because again it's about java scalability this aspect that it can be very powerful i can service multiple clients that means multiple people on their different devices millions of those people at the same time but it's not just limited to those companies either if you look at social media for example we'll see that facebook use it twitter uses it linkedin uses it pinterest and instagram user as well so by now you should be getting a real picture of the scope of java you know google amazon spotify netflix all the social media companies facebook twitter linkedin pinterest instagram i mean this is huge it really is huge if you ever want to get into something or rather some form of technology that has a future java is the thing to be getting into so it's good that you're on this course to be uh to make those first steps into that java development career so all these big companies use it where is it use them well various different places it's used in mobile phones and tablets the android platform for example is based entirely in java and so therefore java is the backbone all android devices but not just handheld devices either we also see java in huge cloudbased applications powered by hundreds of different servers at the same time surf is just a fancy name for a computer that allows a website to run by the way we see java used there as well and that's because of its power that we've just seen in fact java powers three billion devices all around the world which is pretty phenomenal if you think about it three billion that's a massive number so on three billion different devices all around the world java's running providing this powerful backbone for all these devices across the world globally pretty exciting stuff i think you'll agree so if everybody's using it and java's so popular why is it so popular well there are a few reasons for java's popularity and let's just dip into a few of them now if you don't understand all of these don't worry i don't expect you to understand them but we'll just give a few bullet points what makes java just so popular so first up is platform independence and what this means is that java has this idea called write once run anywhere which we'll see shortly and that means that you can write a program once or one machine for example on windows and then you can run it on all of the different machines so you can run it on a linux machine or a mac or a unix server or wherever else and so we have this notion of platform independence which is a hugely powerful concept it means that effectively you don't have to rewrite the same software in other words reprogram it reprogram your application that is you don't have to redo that for each different machine type so for example supposing i'll write an application on windows and then i want to release it i have the ability then to release it on mac and on linux without having to reprogram the whole application in mac or reprogram the whole application in linux so that's the first thing platform independence now the second thing pretty much is the thousands of libraries that we have so in java there's this whole kind of software movement called open source and in a nutshell what that means is that people have already written components those are kind of like mini applications if you like which you can assemble together to make your own application people have already created all of these libraries all these different components there are literally thousands of them and they're available completely for free now what this means to you is that you don't have to write that code it's code that you get for free you can just incorporate that code into your applications and use the features which that component gives you so very powerful very beneficial having this idea of socalled reusable components that's another key benefit of java as well additionally as we've seen we've got the versatility of the platform the fact that you can write applications which run on a mobile device small scale so just for an individual user or you can write applications which are designed to be used for millions of users using java in the cloud the cloud by the way is just a fancy term pretty much of um saying that you have hundreds or thousands of computers all working together to do one particular thing or execute one particular program which in the case of amazon for example will be its website don't get hung up on the idea of a cloud but that's just basically what the cloud means here java has this versatility to be able to run on one device or on hundreds or thousands of devices at the same time very powerful very beneficial for companies as well since they can build huge ecommerce stores like amazon we've seen another aspect to java's popularity is the market share that it has kind of like the foothold in the marketplace so because so many different people use java so many different companies rather use java plus as well because it's been going for 25 years now i think it's about 25 years i think it was 1996 when it came out and because of that it means that there are a lot of skills on the marketplace people who know java it also means because we have so many different companies using it and different developers using it there's a very lively kind of community and a huge source of documentation java technology itself which is also really really useful which also brings us to this idea of the developer ecosystem that's basically all of the tools and technologies that surround java itself that have been developed to make your life as a java developer much easier so all of this together as a package for you personally means that java's got a bright future it's got tremendous job opportunities a market opportunity for you personally it's pretty easy to use and versatile to get pretty complex stuff programmed quickly and easily because of all of the different libraries that you have as well and there's a ton of documentation out there and useful tools which can help you get started so that's an overview of the java platform itself now let's have a look at the java language which has also been central to java's success so the reason the java language is so popular which is pretty much the heart of the platform itself comes down to a few key reasons as well so first up we have the fact that it's pretty simple to use it's simple to use it's easy to understand it's got less of a path or rather less of a learning curve for you when you get started so it's a pretty accessible language to be able to just pick up and start to get started with so that's one of the key benefits also related to that notion of versatility that we've seen earlier is the idea that it's object oriented so object oriented is a kind of a style of programming you have different styles there's functional programming procedural programming objectoriented programming we don't have to go into detail about those right now but in objectoriented programming you basically program objects and these different objects interact with each other and it's basically a very powerful way of being able to quickly write systems which are easy to understand easy to develop and easy to maintain and extend okay so moving on another aspect of java is the fact that it's fully rounded and what i mean by that is it gives you access to be able to do everything you'd want to do pretty much with a computer so that means for example being able to test a computer network access disks files folders that kind of thing as well as interact with desktop so that means for example drawing windows and buttons and having dropdown menus all that kind of stuff java's pretty much got apis for all of that stuff completely out of the box which means that you don't have to write that kind of stuff you can just reuse the existing code that the java platform already gives you you'll be able to access networks read files writer files construct windows with xboxes and buttons on all that kind of stuff so that's been a good high level overview of the java platform as you can see it's a really exciting platform to program in and you're probably really excited to get started now which we'll do in the next videos we're going to look at the java platform itself specifically we're going to look at the key components of the java platform and see how they all slot together let's dive in now before we start i just have to give you a quick word of warning about java in java just like any form of technology or any form of programming it's not specific to java this is any form of programming or anything to do with it there are always going to be lots of acronyms but those are abbreviations for things you're going to hear things like jdk jvm jre things like that don't worry about that we're going to define those shortly it's just a word of warning about that and also not only acronyms we're going to have a lot of terminology as well so we're going to hear terms like byte code source code class file compilation those kinds of things again when you first hear a word that sounds technical or you come across these abbreviations it can seem kind of daunting because because you don't know what the acronyms and terminology means but don't worry about that don't be dissuaded don't be put off you'll explain all of these in this course i just want to give you that quick word of warning so yeah above all don't panic that's the key thing do not panic all will be explained now let's start off with the key point about java which is this notion of platform independence java has this idea of something called wara wora which stands for write once run anywhere and this means that you can take a java program and you can run it on multiple machines let's have a dive in now and see exactly what this means together so let's start with my mac so i have a mac a and let's suppose i develop a program on my mac and then i go to work and i think you know what i could actually use this piece of software i could use this code that i've written this program i could use it on my work laptop as well but at work i've got a windows machine and these are two completely separate types of machine one's a mac one's windows now to you they might just be computers and that's fair enough they're just laptops or desktop machines one's a mac one's windows but fundamentally these are completely different machines a key part of that is that for example if i use an application on a mac for example adobe photoshop then i can't use that exact same application on windows it's true that both mac and windows have a version of photoshop which they can both run but that version is completely different one has code for mac the mac program code if you like and one has code for windows the windows program code and the actual code that each installation file will contain is completely and totally different and the reason for that is that these are completely and totally different machines we don't just have macs and windowsbased machines you can also have linuxbased machines so for example when we spoke about cloud computing earlier on or if you look at largescale websites like amazon the ecommerce site for example you'll find that what powers those websites are hundreds if not thousands of these socalled server machines that just means a computer without a screen pretty much just super fast hardware or electronics inside to be able to power these huge ecommerce applications you also have those as well and again linux is a completely different type of machine than a mac or than a windows machine so given that we've said that if you have an application or a program on one machine like a mac and it's not possible to run it on another machine like windows how does java do this then let's take a look inside and see what happens so let's take a look at actually what's inside the windows machine so inside that machine first off we have an operating system and the operating system is foundational computer program if you like which tells a computer how to run and what i mean by that is that if you didn't have an operating system on for example a laptop or a desktop machine then you wouldn't be able to load any programs onto it you want to be able to access the internet you wouldn't even be able to switch it on have it do anything meaningful you just switch it on nothing would happen that's because all computers need an operating system installed on them which is kind of like the super program of the computer if you like which tells the computer how to run so for example it tells the computer how to access files how to access the network how to display stuff to the user how to print to printers that kind of thing that's what operating system does we have three different types of operating systems we have operating systems for windows mac and linux which is why we started off with those three machines initially so once you have an operating system installed on your machine that means you can actually start to run other programs on it so for example on my windows machine at work i can run microsoft word edit some outlines for a course for example i can also have google chrome running as well do some web browsing maybe i have outlook as well to be able to access email i can do all of those three things execute those three programs at the same time thanks to this operating system that we have and also underneath the operating system by the way is the microprocessor this is the actual chip inside the computer itself i've kind of grade that box out because we don't really need to know anything about the microprocessor apart from the fact that having an operating system means that the three programs at the top microsoft word google chrome and outlook they don't need to concern themselves with the different types of microprocessors so in this way the operating system kind of shields those programs away from the much deeper complexity of the actual chip inside the computer itself but in addition to these programs if we're looking at java we can also install another program and that's known as the java virtual machine now the java virtual machine is really where all the magic happens because it's this jvm java virtual machine it's the first acronym there that allows us to run different java applications so looking at the jvm once you have a jvm installed on a given machine that means that you can run bus java application on it you can run your other java application on it and again another java application on it so the jvm gives us a facility then to be able to run java programs that's the key point here now going back to these three computers we saw before you can have different operating systems on them so if you have a windows machine you might have windows 10 on there windows 8 windows vista windows xp those are different versions of the windows operating system if you're on a mac like i am you'll have mac os 10 and on linux servers you're going to have something like ubuntu suse linux redhaw or fedora the key point here though is that these three machines each have installed on them different operating systems however because each of these machines or specifically each operating system has a jvm available for it that's the java virtual machine special application we've just seen so there's a jvm for windows a jvm for mac and jvm for linux because of this that means that the java program that you write can then run on each one of these machines so this means you can write your java application on a mac then run it on windows or you can write the java application in linux and run it on the other two machines windows and mac it really doesn't matter and that's really the power of this socalled wara or this bright ones run anywhere the fact that java gives you the ability to be able to do that so you write the application once in java and then it can run anywhere you choose to put it there are a few other accounts as well which we'll just quickly go over we'll get to see these a bit later on too the first one is the jre this is the java runtime environment and this is basically effectively the package that contains that jvm so when we saw the jvm just now which was sitting on windows linux and mac that jvm actually comes as part of the jre the java runtime environment and that's the key there as well is the java run time environment because you're running programs but because it's the java runtime environment that's where you'd expect to find this jvm because the jvm's responsibility is to run those java programs we also have the jvm which we've seen the java virtual machine yeah that's the thing that runs those programs we've seen and we also have bytecode as well so bytecode pretty much is what the jvm runs itself it's kind of like the language that the java program is turned into which the jbm can then understand we'll see this in a little bit later when we look at compilation but what i mean here is that jvm as a program which runs java programs needs to take an input it takes an input file that input file contains the programming commands to tell the program what to do for the actual program code itself and that program code that is bytecode packaged in the socalled class files which we'll see a little bit later on too so who creates the buy code but what creates the bytecode is a thing called the compiler so just to recap we've got the jvm which runs the java application the java application is a file called a class file that class file contains bytecode and the thing that produces the bytecode is a thing called a compiler so the compiler's job is to basically take your java program and convert it effectively into instructions that the jbm can understand it does this by taking the program you write in the java programming language and that's known as source code so you write source code the compiler takes that source code written in the java programming language converts it into bytecode in a circle class file and then the class file is placed as input to the java virtual machine and the java virtual machine executes each instruction inside that class file the bytecode to actually do what you've programmed to do now this might seem like a whole lot of stuff to take in and indeed it is so let's jump in now and look at a tangible example let's bring it down from up in the air and actually look at this process firsthand and see how we actually compile a java source file into bytecode itself okay so let's jump in now and see actually how we can compile a java program our java source code using the java compiler or java c as it's also known i'm on a mac there's a program called terminal so let's just see how this process looks now first off don't be phased by the fact that i'm typing some commands into this big black window when you actually do java programming you don't have to do this so what i'm about to show you is really the nuts and bolts of what happens with java when you're compiling a java program to its bytecode but i'm just doing it for demo purposes so you won't actually have to do this yourself so don't worry you won't have to type these types of commands and it may look complex but it really isn't i'm just showing you actually the lowest possible level pretty much the the bare metal kind of like level what this java compilation is all about now we can actually do this in a text editor that's a small program that allows you to type in text and save it to a file without any formatting so we have any kind of bold or underlying or italic instructions in that file this is just a nice simple way to be able to quickly create a file using a command and for the purposes of this demo it's fine you won't have to do this in general so don't worry about it so that said if i make a new folder demo and i'll go into that directory and i'll quickly create a file with this special command and i'll just call it app.java and what this means is that i can just basically type in code here and it will create a file which is going to be the java file which will then compile and then see what actually the java compiler spits out so if i just type some java code here a public class app and then we're going to define a main method underneath this method public static void main which takes socalled array of string parameters this is the standard method that you'll find in any java program which is where a program starts off so called entry point but again don't worry if this looks complex for now because we'll cover this a little later down the line and then here i'm just going to type in this instruction which basically prints out hello world to the screen it's that system.out.printline you can see that and just finish that off with some closing curly braces and press ctrl z to end that you don't have to know what this code means but just know if i clear the screen i print out app.java just know that this code is the simplest possible java program you can write and it's a java source file because it has a java so called file extension in other words this is the file name here app but it's extension which is this thing that starts with a dot this is dot java it's a dot java extension so this means it's a java source file so how we compile that is we use java c java c stands for java compiler and we pass that java file into this program so when we just write out a command like this obviously it means it's going to run that program so now it's running the java compiler program we'll do in a second rather and it will take us input anything that we put after it so here we're saying app.java is the input into java c which is the java compiler if i then hit enter see it pause briefly then for a second and that's because the java compiler was actually taking this app.java file and producing the output file if we now look you can do with this command the contents of that folder that directory we'll see that we have our original app.java which we created which is this file here but we also have now another file which is app.class this is the class file that we spoke about earlier on that contains the actual byte code that's then runnable by the jvm so now that we have that bytecode class file let's see how we run it on the jvm so again let's have a look at what we've got in the directory here we've got java which was the program that we started with that was our java source file we've got app.class which is the class file the java c compiler produced is what it output so it took in the app.java source file that's the program code that we wrote and it converted that into app.class which contains the byte code that's going to run on the jvm so all we need to do to run this is we have another command and the command to launch the jvm the jvm itself is java so whenever you see java this is the jvm and if you see java c it's a java compiler so this command here means run the jbm again we pass the input we want that program to take and you might think we put app.class we don't we just put app and what this does when we run it is it's going to launch the jvm so the java virtual machine is going to be running and it's going to look for class which is the main kind of unit of code in java it's going to look for a class called app inside this current directory so because we have this app.class file here it's going to find that execute the bytecode which is inside it so if we run this now here we can see it's running hello world so that might seem a little bit technical and like i say it's something that you won't actually have to do you won't have to go into a big black box and type in those commands in the terminal like i did but i just want to do that so it gives you a good idea of actually what's happening behind the scenes and it turns out there's a tool that can do that for us really nicely which looks good it's got you know a proper window we've dropped down menus and it's a proper application in fact and that's called an id but we'll see that a little bit later down the line when we write a program in java that's the source code that we're writing to summarize it and we can do that as i say in a thing called an ide which we'll see shortly and so the source code is what we write it's the source of our program that's why it's called source code and that's in java programming language and that's converted into bytecode as in this class file that contains the instructions which are interpretable by the jvm which is the java virtual machine and as we've just seen how we get from source code in java to the bytecode in the class file is by using the java compiler which is this java c tool we saw so that should give you a nice overview of how the main components of the java platform slot together and just a sneak peek into how we can compile and run a java program using the java compiler as part of the jdk and the java virtual machine which is part of the jre but also bundled with jdk as well we're going to move a bit further and we're going to see how we can actually install the jdk itself onto our own machines so the jdk remember is the thing that has java c which is the java compiler which is the thing that takes our java source code and converts it to white code and then that byte code is then run on the jvm which is the java virtual machine and there's also a jvm which is bundled inside the java development kit which is the java command we saw as well so let's jump in so in order to install the jdk we need to do four different things really first off we need to work out which version of the jdk we need to install so that means basically we need to download the right jdk so if it's jdk for windows download the windows one the jdk for mac download the mac one but even amongst the individual operating system there might still be some choices which we'll see next we need to download and run the installer this is a really quick process to do it's literally just kind of double clicking so that'd be nice simple and straightforward next we need to set a thing called an environment variable which is going to be called java underscore home now environment variables it might seem it's getting very technical now it's really not it's basically just a way of letting other tools which work with java itself it's a way of letting them know where you've installed jdk2 and we do that through creating this thing called an environment variable which is very simple to do and straightforward as we'll see but it just basically makes a piece of knowledge knowing where the jdk is installed just exposes it so that anybody or any other applications rather which are running on that machine and take a look at the environment variable access the path or location of where we installed the jdk2 and finally of course we need to test that it actually works so first off let's look at how we can work out which jdk version to install so i'm going to do this on a windows machine this particular demo because that's probably the most popular operating system with people who are watching this course so the first thing you need to do is to find out if you're using a 32bit version of windows or a 64bit version of windows really easy to find out just go down here to the start menu and go to the little cog which says settings and then go up to system and then if you scroll down to the bottom you'll see about so if you just click about it'll tell you about the system and here you can see at the bottom it says 64b operating system x64 based processor so this tells us that this particular system is running windows 64bit and also if you notice you'll see this x64 here just remember that for a second because we'll actually see this in the version of the jdk that we want to download anyway so we can close this now with the x so just go down here into search box and we're just going to type in internet explorer just the first few letters we'll do as you can see so here we've got internet explorer so we'll just click this and if we just type in here java jdk download and you can see that it's showing us here the first link the primary link is the one that goes to the oracle website and this is basically for all of the downloads so all the different versions that you have with java this is the page you can get them from but we want to have a specific version we want to go for java 8 and that's because it's a lot easier for beginners to work with java 8 than it is to work with the latest and greatest version which is java 15. if we click on java 8 jdk accept cookies and so here we are on the java 8 jdk download page so if we just scroll down you'll see here that the version we're going to download is this 8u281 which is basically the latest version of the java 8 version of the jdk which is the one we're after and then if we go a bit further down we can see we've got linux here we've got macos solaris and right at the bottom we've got these two options here for windows at this point we need to know whether we have 32bit version of windows or a 64bit version of windows so there are two different versions of windows that you can have 32bit and 64bit and these are denoted by x86 means 32bit and x64 means 64bit you wouldn't necessarily expect that and this is actually a reference to the underlying microprocessor but just know that the 64bit version one has 64 in it and the 32bit one doesn't so we've checked already on this particular version of windows and we know that it's a 64bit version that we need because if you remember that's the x64 that we saw before so let's download the 64bit version now okay so if you just click on this exit file and we'll just accept the license agreement click on that checkbox and then just click this download button here and so unfortunately when you download the jdk you have to have an account with oracle it's free to sign up so if you don't have an account you can create this use this create account button down there but i already have an account so i'll just put my details in and then just hit sign in then you can see here now it says do we want to save or run so i like to save it to the downloads folder then i can run it from there afterwards i'm not worried about saving the password either so i'll just click not for this site so now you can see it's downloading it doesn't take very long to download it's not that big to be honest also i've got a pretty fast internet connection as well almost there runs a security scan and it says it's completed which is good so then if we hit this few downloads you can see here that it's actually in this downloads folder you also hit this button here it'll open up the downloads folder itself in explorer so i prefer to run it from there so if we just kill this browser and just this one too don't want to run it from here so you want to right click and you want to do run as administrator that's important because it needs to make some entries into the windows registry which needs administrator permissions so if we just so just click yes to this so you can make changes to the system now we're just going to click next here then we go to the next screen and on the screen we can see the items that it's going to install so it's going to install the development tools also the source code of the actual jdk itself which is interesting to look at as well although it's outside the scope of this tutorial but it's definitely useful to have a dig into that at some point if you're curious as well we've got the jre which we'll also install just so just accept the defaults here you could customize the folders if you wanted to but that's fine we're just going to accept the defaults for now that's okay just click next and then we can see it's just installing it's pretty quick to be honest copying the new files across over at this point here is offering to install jre first as well so you just click next to that also and it's just gonna run through that part of the installation procedure as well again it's pretty quick you can see here the job has been going for 25 years as well so it's a really it's really stable and rich platform to work on which is why it's so popular at this point it's been installed so just click close there so now at this point if we go into the c directory which is under this pc we look inside this program files directory under java then we can see here now we've got two folders jdk and jre version 1.8 so this is basically the jdk the java development kit and this is the jre the java runtime environment that we've spoken about before just quickly while we're on the topic let's just have a quick look inside inside the jdk you'll find a bin subdirectory subdirectory means a directory inside a directory and these are all of the the tools if you like which you have access to as a java developer to help you write java programs but the main ones you're interested in are java c which is the java compiler we've seen and java itself which is the java virtual machine now the next step we need to do is we need to just go back out to that folder above we need to basically put this folder here which is the folder where we've installed the jdk to we need to put this in this socalled environment variable so let's see how we can do this now so first of all if i just double click this then i click into the address bar here just go over here and just right click and then click copy so what i've done actually here is i've just basically put the the contents of this so the director that's highlighted into the clipboard because i'm going to use it later i can just cancel this out now and then i go into this one here this pc into properties which is actually an easier way being able to set this environment variable and then if we go into advanced system settings you can see here you click on that and then click into environment variables now what we're seeing here this is basically the set of environment variables which are configured for this particular system so the concept of an environment variable isn't just specific to java or even specific to windows it's a concept which is available in all operating systems and it just basically provides little place in memory the programs can look in to get a piece of data they need to share in the case of the java tools that's the jdk installation path and that's what we're going to set now but there are other ones too the most important one being path itself which is the one you can see here which we'll come to in a second but first of all let's create our java underscore home so if i click new here then go java underscore home if i press tab that gets me into the text box below now if i just do control v paste it and you can see it's here now now also if we just put that in quotation marks the reason being is that windows is a bit funny if you have spaces in a path that's meaning the actual descriptor of where where the folder is which is this thing we're looking at here it's a path you can see here we've got this space between program and files so just to protect that we basically put a quotation mark here and a quotation mark there then that kind of like packages it all up if you will so if we just click ok now so now we've got java home set the final thing to do is to double click on the path variable to change that we're going to add a new entry here which is java under score home with these percentage signs at either side and that basically means resolve this to the actual value so java underscore harm is the variable that's the name of the piece of memory which holds that data but to get what's actually in that piece of memory we can put percentage signs around it it's known as dereferencing that variable to get the actual value out and then put backslash bin and enter and the reason for that is because remember we've just had a look in the jdk directory itself and we then had a look in the bin subdirectory and we could see all those tools or by putting this in here adding it to the path this is going to allow windows to locate those java tools for us so basically whenever you enter a command in a dos prompt which is something we'll see in a second one of those scary black windows which isn't that scary in fact but it might appear so at first but it is really not whenever you enter a commanding day what actually happens is windows goes through each one of these folders in turn look inside that folder to see if that command exists in that folder and when it finds whatever the command exists then it will execute it so we're just going to move this up in this a few times that means that the first thing first place that we're telling windows to look is definitely going to be in like this java home directory java home pin directory rather and the reason for that is because unfortunately windows actually comes with jre to be able to execute java in the browser and that's actually stored in this path here and by putting this java on the score home bin before that it means that we're going to get our version of java which is part of the jdk which we've just downloaded so if we click ok to this and ok to this and let's close some of these windows we're going to go into the command prompt this dos prompt if you type cmd you'll see here we have this command prompt tab click on that now we're in a thing called the dos prompt or it's now known the command prompt and it's called that because it's prompting you prompting meaning to ask it's asking by virtue of that this thing's flashing this curse is flashing here it's asking you for a command it's a command prompt makes sense yeah so if we type set j which is a command and hit enter this is going to show us the environment variables which have been set which start with the letter j and you can see here we've got our java underscore home environment variable that we set if we were to do set p then we'd see all of the variables which start with a p and the first one we can see is path and now we can see here that we've got the java home environment variable we saw before it was being dereferenced by those percentage signs remember with a slash bin after it that means the subdirectory inside there if we now type in java c for the java compiler and do version and we should get a message back which says it's the 1.8 java compiler and the reason we're doing version is just it's a nice quick and simple way just to verify that a given command has been installed properly which in this case is java c and we can do the same thing for java as well which is the jvm that means that we've got the jdk set up correctly and just to double check that as well we just check the java version and similarly we also have the same version here so this these two versions match now one eight zero zero eight one one eight zero two eight one which is fantastic so here we've got the java compiler and we've got the java virtual machine don't forget if we hadn't have put that entry to be first in the list then we wouldn't have seen um that version here because it would have been picking up the java version from this one here instead anyway at this stage we're all set up and we can actually start to develop java applications on this windows machine we're going to take a look at the ide that's an integrated development environment that's basically a tool that you can use to write compile and run your java programs which no programmer will ever be without so let's jump in now there are two different ides on the market currently when i say on the market you don't have to buy them or anything but i just mean those that are available to you in general to download now both of these are free or at least have versions that are free and we'll just have a look at both of them now and compare them so the first one is eclipse the eclipse has been around a really long time it's from the eclipse foundation and it's a really good idea to start off with the other one we've got as well is intelligent idea now intelligent idea actually has two different versions that you can get it's got a community edition which is the free version and it's also got another edition called the ultimate edition and that's a paid product which typically you'll find in corporate organizations so in other words in corporates where you have a professional java development team if they're willing to spend the money on the id and the developers typically will find they're using intellij idea now the difference between these two are that eclipse is really easy to use it's great for beginners it's got various features which make it more suitable for beginners in my opinion like for example when you're programming it will actually highlight errors as you go along by underlining them in red which we'll see in a second and it gives you very clear error messages which kind of imply or kind of tell you pretty much how you should fix your code so it's great for beginners and it's very easy to use as well professional developers it can feel a little clunky at times and so a lot of professional developers tend to prefer intellij idea and again that's for more advanced users it's got much more power behind it because it can also be a commercial product with their ultimate edition you know they've really made this product into something which you'd expect a proper java developer power user to be able to get their money's worth with however that said intelligent idea it kind of does things behind the scenes which you've got to be careful about if you're not a professional developer and if you don't know what you're doing um so it can kind of trip you up so it's definitely for advanced users but eclipse eclipse is definitely the thing to start off with and we'll see how to install that shortly so that's the one we'll start off with here and we'll see how to do that in just a moment so let's have a look now and explore actually what features an ide gives us so the first thing an ide does is it provides you the ability to actually type in your programs so just like for example you might use a word processor like microsoft word type up documents or reports for work or you might use a spreadsheet like excel to do your accounts or manage your home expenses just like that as a programmer as programmers we use an id to type in our java programs now this makes things much easier as you'll see because of some key features which an ide provides the main ones of these are syntax highlighting showing you the errors you've made suggesting improvements to your code as you go along let's take a look so let's look at the first of these items then so what is syntax highlighting this is one of the things that the idea does for you so what is syntax highlighting okay so here's a chunk of code it's a very simple piece of code in java it might look complicated it's really not and it basically defines class my app which has one method in it which is the main method one and only method which is going to do something and what it does is it prints out the message hello world now if you see this program in an id it would actually have syntax highlighting and that looks like this so basically here you can see that it's coloured in some words it's given some colour to the words and those words which appear to be in a it's kind of like a maroon or a dark red maybe purple depending on how your eyes are but anyway these um these words like public class public static void those are basically filled that way to signify that they're keywords they're reserved words by the java language so the use of this for example is if you maybe for example misspell public and miss out the eye then you wouldn't color code that into a maroon color and you'd also have kind of a squiggly red underline as well which will tell you that it's wrong but coloring words in this way coloring the text in this way it just gives you that extra kind of quick visual guide the meaning or the cement or socalled semantics of that word or that keyword now you can see we've got other stuff which is still in black so typically these are going to either be class names methods or types so here we can see my app is the class name main is the method name and the string array there string with the two square brackets that's a type we'll see again the actual variable name which the thing we're passing in these args value a bit difficult to see but that's actually in a different color again that's how you can tell or differentiate inside that method between those two curly braces you can see immediately whether you'd be working on a variable which is passed into the method against a variable which is outside the method for example you'll also see as well on the third lining where we've got the system.out.printline we can see we've got the out is italicized it's in italics and it's also in blue that denotes so that's a static it's a member which is a bit advanced now but it's just another way they can visually give you a bit of help and inside you can see we've got the string which we're passing into system.out.printline which is a command that prints something to the screen we can see we've got we're passing in that string in quotes and we can see it's colorcoded that a nice bright blue for us so we can immediately tell where the strings are in the method as well that might not seem that useful but the more complex your programs become you really get to be able to kind of see the code better with these kind of features but you won't tend to notice it too much when you start out though so how does it show errors then i mean that's probably the most important thing you care about if you're a beginner so here's an example so this is eclipse and here we can see we've got the main method we've got this application we saw before and here we've got a class so it says public class my app and you can see it's got a red underline underneath my app and there's a red kind of circle to the left of that the line numbers and if you look beneath there you'll also see the same red circle with an x in it and it says java problems one item it says syntax error untoken my app it says a left curly brace expected after this token so you can see here it's actually telling you what to do it's telling you that after my app which is the word it's underlined in red it's expecting that you're going to put this opening curly brace and in fact the minute you put that opening curly brace the red x would go the red underline would go and the problems would you see there in this java problems section that list that would also go as well and be clear so there's one way it can show you that things are not quite right and you'll see red x's everywhere contextually where that is so if you see on the left hand side for example this is basically the project structure you can see at the deepest level you've got this myapp.java and then above there you've got app which is the package that's in the package is just a folder for a class inside java and then above there you've got a source main job which is the folder which contains the actual java code itself and above there you've got app which is the name of the actual project again as soon as you fix it those will go so the next thing we've said that it gives you suggestions which are going to help you out along your way and this is really useful for beginners so let's take a look at this now as well so now we've got a different id this is intelligent idea now which we're looking at and just incidentally as well you can still see we've got this red underline here so you can see in the main tab here it says app.java we've got a red underline and we also have it in the left hand project pin as well and that's because at the point the exact instant when we're programming in this particular program the syntax is incomplete because we've got system dot then we don't have anything after that and that's not valid syntax it's not a socalled valid statement a statement is basically the smallest unit of code that describes what you want to have happen and that can either be assigning a value to a variable or it can be invoking a method calling a method on either a class or an object or one of those things so where this help comes in then is actually where you're typing when you're actually typing out the code at certain points the id will offer you suggestions as to what you might want to type so for example when i type system with a capital s that's referring to the class system which is inbuilt into java it's a class that we get for free with the jdk the jdk comes with hundreds of different classes you can use to do various different things the system class is one of the most basic or foundational classes that you can use and when we do system dot that dot signifies that we're going to do something on that system class or connected with that system class specifically we're going to access something on a system class and we can either choose to access a data member so if that class has a variable inside of it which holds some data which holds some value or maybe an object or whatever we can access that we've seen that before with system.out out is actually a variable inside the system class which stores a reference to a thing called the print stream which is basically the way that we can print characters out or print data out to the to the display if you like but in addition to being able to access data with the dot we can also invoke methods with the dot so here we can see when we're doing system dot we have several different methods which we can choose to call so the first method for example in this box which appears below in this drop down it automatically appears by the way you don't have to do anything you just as soon as you type dot this will appear and you can see we've got a method set property which takes a key and a value we've got another method array copy which takes some other things got a method current time millies method console clear property that kind of thing what these methods do now are interesting to us but the main point is that as soon as you hit that dot then the id offers you options for what it's sensible to call at that particular point that's a key point it's not just offering you any old stuff it's actually offering you things that would only make sense to call actually there but when the id offers you either suggestions like this or code fix suggestions it can also fix code for you as well which is pretty handy or if it offers you the ability to generate code to actually program certain aspects of the code for you which is also something else it can do and by the way all of these things together make a developer's life so much easier you actually think programming is pretty difficult but when you look at the power of an id and what it gives you and the amount of stuff it does for you automatically it's actually not that difficult to do programming to be honest but anyway the main point is that it also takes into account the context of where you're actually coding at that moment in time to be able to offer sensible suggestions as to things you might want to do and furthermore as you actually type out the method if i started to type for example supposing i was going to go for the word console for the method console i would type the c and what would happen then is it would automatically filter that dropdown box to just have the methods which start with c so it would be clear property console and current time millis which appear then i type oh so now i've got system.co then it would just say console and at that point then when it just says console i can hit enter in intellij idea or its tab in eclipse and it would type out the rest so type out the remaining letters for me as well we'll also immediately put the parentheses there for me so those brackets and if i typed a method which actually wanted to take anything she was designed to pass in the input parameters it would also tell me what it's expecting so for example if i was invoking the array copy method as soon as the left parenthesis is put in so the opening bracket it would come up and say okay what's your object source for example we don't need to know what the actual array copy method does as it happens it just copies the rays as you might expect those are those groups of things of the same type we saw before like when we saw a string array actually like we can see the string array above these square brackets the point is an id gives you all of these really useful and helpful functions along the way so it actually makes developing programs much easier you don't have to type you know every single character painfully piece by piece that kind of stuff it does it all for you and even if you for example put in a left curly brace so an opening curly brace and hit enter it will also put in the closing curly brace as well so you don't have to worry about that little things like that it'll also indent the cards so you can see here that on line three we've got the declaration line for the method and you can see it's indented in other words it's put space to push it in from the left there that's so we can see that visually that's a method and similarly inside the method on line 4 when we're starting to write a collection of statements which would comprise this method we can see that again it's indented it and that means that visually we can see now that any statements or any lines we have from line 4 which are inside of these curly braces they're going to be very kind of visually clumped together or grouped together so that we know that's the implementation of that method yeah that's another thing that idea will do for you the other thing an idea allows you to do is to actually compile your code so just like before when we did the quick demo and we were compiling the java code using java c in the terminal window on the mac and you remember java c then took that java source code compiled it and turned it into java byte code which could then be run on the jvm but when you use an ide this is done automatically for you and not just for one file for multiple files that might comprise the project and typically what you'll find is that an ide will actually compile for you continually as you're actually developing the program highlighting any errors along the way as well and suggesting current improvements you might want to do now typing your program in and compiling it is all well and good but of course you need to actually run the program as well and that's another feature that an id allows you to do to actually run your program which is sometimes known as executing your program and usually in doing this it'll also show you inside the ide itself any output that the program returns which is also very useful to have everything in one place and finally one of the best features of an id in my opinion is the ability to actually debug a program so as programmers we write program code and obviously we're writing primary card because we're assuming what we're writing is actually going to work but more often than not it doesn't work or at least if it doesn't work completely there might be a few issues with it which we've got to try and fix and the best way of fixing does is actually to run the program in slow motion it's the best way i can think about describing it this is what you do pretty much when you're debugging a program it allows you to go through what's known as step over each line of program code as it's been executed then along the side of it you can actually see what's happening to the other areas of your program so how do you use an id what does it actually look like when you're programming properly for real putting together a real program well it looks like this first of all you're editing the card so you're inside the id and you're typing in the program code which you think is a programmer is going to do what you want it to do that's the first thing you're going to do you're gonna edit the code and then afterwards at some point you're gonna compile the code or build it now with eclipse it does this automatically for you as you go along so it's always compiling code for you automatically but if you use intellij idea for example you actually have to trigger this because you're in control of when you want it to do the compile or to do the build itself but nevertheless you're typing away and in the case of using eclipse it's compiling the code as you go along this means that at some point you're going to see some errors so unless you're doing everything completely perfect from scratch you're going to see some errors like those squiggly underlines we saw the red underlines and the red crosses that kind of stuff and when you see those errors of course you're going to have to correct them so that means you're going to go back you're going to edit your code again when i say go back you don't physically go anywhere or return anywhere you're still just inside the ide so you're just typing things out in eclipse but you're just happening to notice red or red crosses red underlines or whatever which is showing you socalled compilation errors in other words problems with your program that you have to address because it's not compiling and that's happening because the compiler the java c compiler is doing that for you behind the scenes so then you reedit the code to fix those errors and then at some point of course you get to the point where you have no more errors you actually have the complete code which comprises your program and at that point you're done because then you can finally run the program itself that's pretty much what we go through as programmers and we're doing this process of programming coding so now we know what an ide is we know what features it's got and we know how to use it let's jump in now and install eclipse which is the best idea you can use if your job a beginner let's jump in so if we go to internet explorer again this time if we type in eclipse here we can see we're at the website for eclipse.org the first thing that pops up and we're just going to download eclipse id i just hit the download button here and again you've got a choice of which operating system you're going to use we're on 64bit windows so here we can see this x8664 which means it's compatible by the way for both 32bit and 64bit versions of windows that's fine click that and then we'll just hit download again same kind of thing we're going to save it doesn't take too long to download as well now we can see it's completed so if we just go to open folder we can close this now we can see here we've got the eclipse installation now if we double click this because we set that java underscore home environment variable before eclipse now knows where to pick java up from and how to run so you've got different options here we're going to choose this one and we just install accept the agreements and now it's actually downloading that particular version of the eclipse ide onto your local machine and it might take a while to download but it's fine you can see now it's downloaded so if we just do launch notice as well it's also created a shortcut there on the desktop as well the first time it launches it might take a little bit longer that's fine we'll just accept this as a default for now click launch again now here we are we're inside eclipse just close that so this is the eclipse welcome screen and you can just hide this and close this panel here and then at this point we're all set up we've installed eclipse the ide for java and we're all ready to start creating a new java project now you know all about ides and as you can imagine programming isn't actually as bad or as complex as people would imagine when you've got a tool as powerful as that at your disposal and we'll be seeing how to use an id in the next video we're going to look at java code in detail for the first time so we're going to start with an overview of the key constructs those are the key kind of things you have to write to be able to develop your java programs then we're going to pull it all together by having a live coding session in eclipse to program a very simple program in the ide let's jump in so let's just take a look at actually what's inside a java application then in other words what are the components we'd expect to find inside a java program itself so first up we have a class definition and this basically is the main unit of code that you create in java so when you write a java program pretty much you're writing these classes which can then be assembled into objects and then how the actual program works is that these objects can have methods invoked on them a method is like a chunk of behavior which you want the object to do that method typically will cause an interaction with another object or it'll cause the object itself somehow change its state in other words to change the data that's actually inside the object so this might seem a little bit abstract for now don't worry about it too much don't forget that we're just actually looking at what the high level pieces are for now and we'll go into actually how they work a little bit later on so first up here we have a class and how you declare a class in java is that you have to use this kind of syntax here so when we say syntax we mean basically the sequence of words you've got to use and whether you have to use any special symbols like for example you can see here we've got this kind of like curly bracket thing this is known as a curly brace so you've got a left brace there at the top after the word my app and you've got a right curly brace at the bottom you can see that's basically the syntax so the combination of words and symbols used to define the class the java compiler just don't forget as well as the java compiler that java c program we saw it's going to be responsible for taking the source code you write taking the java code that you write and then producing a bytecode file out of it and because of this it needs to follow a very welldefined format of how you present things in other words you need to speak its language you need to speak the language of the compiler that's basically what you're doing when you're programming in java you're speaking the language that the compiler understands writing your program in java which they can then be compiled and into bytecode and run another jvm so yeah so here we can see we're creating a class the class is name all classes have a name and the name of this class is my app so you can call a class whatever you like to call it it's entirely up to you and typically you'll call a class give it a name that is based on the actual thing that you're modeling and in this case a name like my app for example would expect maybe this is like a class which would be the kind of starter class if you like which starts off your java program so in other words it's kind of like think of it as like the the main class or the top level class if you like after all java programs need to start somewhere and they start with a method which contains the behavior to start the application and that method needs to be defined ultimately inside a class so we can imagine that this class here myapp is a class which effectively contains your application okay now how we actually define a class my app is we use the classes name which is my app as you can see there and we can see it's got a capital m and a capital a that's because in general with java when you're defining class names you capitalize the words that make up the name of the class that's why it's capital m and capital a and immediately before this we've got a word which is class and that's because in java when you're defining something you have to tell the compiler what it is you're defining so you're defining a method or a class or a variable whatever else it might be we'll come across these things a little bit later on but for now just know that to create this class you must at least have word class then followed by the name of the class then of course inside the class itself you need to actually give the code which you want to go inside the class so in other words you need to give the methods which define the behavior of the class you defined those inside the class and you also need to define as well the data that it's going to hold so a class in general in java it holds methods which will tell objects what you want them to do and it holds data which will tell objects data all the states if you like which you want them to hold and you need to wrap all of those inside these curly braces which you can see here so a classical relation in java at least needs to have plus in the class name and an opening curly brace then the code you actually want to put in the class and a closing curly brace now you'll also see this word at the front which is public and that's because in general most things that you declare in java can have what's known as a visibility modifier that's just a fancy way of saying how visible that thing in this case the class is going to be to other items or other things inside your program and with this word here public it means that basically everything inside the scope of the program will be able to see the class myapp we'll see this a bit further down the line when we called a quick class up in an ide but yeah that's basically how you declare classes inside java next up we have these method declarations so as we've said in java classes contain methods and a method basically is a program code or rather it contains the program code of something you want to have happen so here for example we've got a method called greet again methods have names just like classes do and again we can see we've got the opening curly brace and the closing curly brace so as you might imagine inside these two things you have the actual code that you want to execute whenever this grease method is called in other words the thing you want to actually do which is also known as the implementation of the method and you'll see also again that at the front there we've got this keyword again called public so by the way as well we have these things called keywords so keywords are basically special words that you use in java which signify something special to the java compiler as we've said before we've got public as a keyword and public means that any other items in the program can access this particular thing which in this case is a method that means that if i have 10 20 different classes inside my java program all of those classes will be able to see this greet method that's one keyword void is another keyword which we'll get to in a second and we have class as well which we've just seen before which is the keyword used to declare a class so i come into this void and the brackets which you can see here so after greet after the name of the method which is greet we've got these opening and closing brackets called parentheses and what you normally find inside these parentheses you find the input parameters so in other words the inputs that this method can take so a method in general you want it to do something and in order for it to do something sometimes it might need to take actually more often than not it might need to take some specific input some specific parameters we call them so you'd place them inside these parentheses now if you just see parentheses on the run with nothing in them then that actually means quite logically there are no inputs to this particular method so here this method called greet it doesn't take any inputs in other words it doesn't need to have any values has to it to be able to do its job the reason is because for example you can imagine it would just display hello world on the screen and if it just displays hello world on the screen it doesn't need to have an input conversely if you wanted it to take an input you could for example has seen a socalled string which is a piece of character information in other words a word pretty much and that string might be called name then you could say hello and then the person's name so you could use that socalled variable to be able to access the value that's passed to this method we'll get to how we call methods also notice how we invoke methods a little bit later on when we get into the demo of how we can code some java and but for now just know that the parentheses enable you to pass the method the inputs of that method so the parameters that it takes now if you pass things in obviously there's a chance that you might want to pass things back out and you can pass something back out by the word which goes before the name of the method and that's that special void word we see here so a void in this case is a special word special keyword which actually means don't return anything so again in the case of the greet method which is just going to display hello on the screen it doesn't need to return anything it doesn't need to pass anything back to another method that might have called it because methods can call other methods that's how java programs work to get the job of the program done and in this particular case because it's just printing single thing which we'll just define inside the method itself which is this hello world couple of words it doesn't need to return anything to anybody else so then you'd use this keyword void now if you wanted to return something else for example you wanted to return the greeting itself then you could replace void with the actual socalled return type that's basically the type of the thing that you're returning you could say public string greet that would mean that this method returns a string character data we saw before that's a string of alphabetical characters basically or maybe you want it to return something else you could return an int for example which stands for integer that could be just a number you're returning you might return a date if you're doing some kind of logic to manipulate the date on the calendar that kind of thing i could return an object as well so you can return choose to return whatever you want basically and also similarly with inputs you can also choose to pass in whatever you want so again objects hints those are numbers strings that kind of thing whatever you want to pass in that's fine you just separate them with commas that's how method declarations work then we've got variable declarations so here's a variable declaration here now variable is a place inside the program which is kind of like a storage area you can think of it as being a box and inside that box it's going to hold some piece of data some value that you want to assign to this variable in other words put inside the box so here for example we've got string recipient name and you can imagine that might have a value assigned to it which is your blogs for example maybe this might occur if you were writing some logic to process an order for example on a website like amazon you imagine amazon might have some kind of order processing java code there you could also store number and this is an integer it's a whole number so number of items for example you might call num items and here by the way as well you can see that the convention that means the pattern or the rules you have to stick to the convention we're using to use as the name for the variable is slightly different from that with a class so here it doesn't start with a capital it starts with a lowercase that's nice because it means that we can just by looking at two items last name or a variable name we can quite easily tell if we're working on a variable or if we're working with a class that's the reason for that and finally you might have shipping address for example and that could hold a reference to that means the actual type of the thing that's inside the box that's the thing which comes first so in all of these cases you'll see the first word the keyword which you have is basically the type of the thing you're storing in the variable so string recipient name so we're going to store characters in their character data our words are for numeric characters in num items here we're storing in a number an integer okay so that means that we can't for example assign a person's name to num items because that will fit inside that box that box is just designed for numbers it's not designed for strings similarly recipient name we can assign the number 2042 to recipient name because it's expecting characters character data and then the real power of object oriented programming which java is based on is that you can then start to work at higher levels you can start to compose things together in other words build them together with building blocks so here we can see we've got shipping address now shipping address its type of the thing that it holds is an address right and an address can be a class which is defined elsewhere in the program and that address might also have other items in it it might have a string which is address line one another string which is address line two maybe it might have a zip code which is of type zip code and zip code itself could be a class and maybe inside the class zip code it also has in addition to the actual numbers and letters that it's holding the data that it's holding just like we're defining data here in addition to that it might also have a method which can validate a zip code passed in so when you try and create a zip code for example out of a string so you pass it a zip code in my on creation of that string also invoker method to make sure that that string is valid so in other words it's a valid zip code and you can put that kind of logic in these objects in these classes which we'll see now where do you define variables you can define them either inside a method or alternatively as we can see here you can define them inside a class and when you define them inside a class you typically find them grouped together like this and you'll also see another modifier visibility modifier or access modifier which we haven't come across yet and this is private so just like we've seen public before which basically means that anything in the application can see that other thing we also have this other keyword called private and that means that only the thing that holds these variables can see those variables for example if these were in a class which is called order so imagine we've got some kind of order class which we've created to hold the information when somebody makes an order on amazon for example if we were doing some kind of website like amazon then maybe we want to have the recipient name in other words who's going to receive the order the number of items how many things they're actually ordering and the actual shipping address so where we need to send it we'd have other things as well of course like for example the thing that needs to be sent that's obviously not on here but this gives you an idea now when we have these items of data which are inside the order class we're going to keep them private so that it's only the order class who can operate on these values and the reason for that is just keep things nice and tidy because if these were public it basically means that any other class in the application could start meddling with and interfering with these data values and then you can risk the socalled integrity of the program so a nice thing about objectoriented design objectoriented programming is that you can socalled encapsulate as the word here encapsulation encapsulate the data that's inside an object inside the object itself you can think of this pretty much being like order is like a box and it has three other boxes inside string ins and address recipient name number of items and shipping address it's only the order class itself which can see and operate on these values we have two items to objects or classes that is we have data members which we can see here that's actually holding the state of a given object but we also in addition we have methods as we've seen as well so you could imagine basically an order class might have some behavior attached to it which we've programmed which we call dispatch and so you can imagine that at some point in the program another object perhaps when we've actually received the cash or entered our credit card details or rather receive the credit card details from the user we then invoke the dispatch method and inside the dispatch method we'd have the code to actually send the order and maybe that might return back something as well so for example it could return an order reference which might be just one big long number so here we can see another socalled data type which is long which basically means like a number which is much bigger than you can hold inside an integer don't worry about that too much for now the different types you have in java but just know that classes have two things they have data members and they have methods and they're defined like this so going back to the idea before we have a first class or a primary class or the main class if you like which actually starts an application how does that work then well that works with something called a main method so here we can see a main method and it looks a little bit more complex than the format of the other methods that we've seen but it actually follows the same syntax so here we can see the name of the method is just before these parentheses it's called main that's the name of the method inside the parentheses we can see the input parameters to that method which is always the same it's basically a group of strings this group is called an array it basically means they can pass in multiple strings or multiple character data to that method that's what those two square brackets mean after the string word now inside the code of the method if we wanted to access those we'd access them by using the word args which is basically the name of that array that we can use inside the method code to be able to access the inputs that have been passed in now to the left of main we've got void which we've seen that means it doesn't return anything and indeed there's nothing that it could return there's nowhere it could return any data to because it's just going to be invoked from when we run the jvm like we've seen before when we do java and then the class name what the jvm does is it basically looks for that class looks for a main method inside that class which is this one and then runs it but because nobody's calling it besides the operating system or beside the jvm or rather the jvm it doesn't need to return anything so it returns void right at the very front we can see it's public that means that anybody can call it which is useful if you want other classes to be able to kick off the program but in general you don't really care about that but nevertheless it's public it makes sense for it to be public because it's the main method and finally in between public and void we've got this other method called static and what that means is a special keyword again that basically means that this method can be invoked it can be run but it doesn't have to be invoked or run against an object it can just be invoked as is against the actual class which contains that method we'll see that later on but don't worry about that for now and you can see as well of course we've got the implementation of the method we have between the opening and closing curly brace there as well so let's see how we can put it all together into a java program now by jumping over to the id and putting it all together yeah let's jump in now and give you a quick demo of how we can actually use the ide so we're going to use eclipse for this and it's basically just to give you a kind of a kind of an idea kind of a walkthrough basically of what typing some java code into an id looks like so we'll see how we can type in code features of the id how the builds occurred how it compiles it how we can run the card too afterwards we'll have a look at how we can actually debug code let's jump in oh by the way i'm on a mac for this and but don't worry though because actually as it happens eclipse and intelligent idea they're both applications which are programmed in java and so because of this it means that they're pretty much the same to use on both platforms you shouldn't have any difficulty in understanding me showing you this and it clips on a mac if i jump in now and i just click this eclipse so we'll just accept this as the default that's fine just to launch so if we just double click this maximize it and get rid of this screen and here we can see we're in eclipse and here we can see we're actually in the socalled eclipse workbench so you'll see here that in the main pin we don't have any program code yet that's because we don't have a program specifically we don't have a project in fact which is where we actually put our program code in order to write a program you need to have a project so that's the first thing we're going to do so let's jump in and create a project together so there are different types of projects you can see over here i'm just going to go into this one and create the simplest possible type of project java project if i go down to next project name we'll just call it myapp we can accept the defaults on here so just go down to finish and it's going to ask us if we want to open up an associated perspective this is basically a layout of the windows which defines pretty much what tools you want to see when you want to have them positioned so i'll just do remember my decision and then do open perspective and now we're in this socalled java perspective which means we can actually start doing our programming so if we go over to here into package explorer and double click this this actually shows you the project itself so the project so far just has two things associated with it it has source folder which is where we're going to put our program code and it has this jre system library this is basically saying which version of java you're going to use so i want to create a class which is going to be the main program so i right click here and i go into new and i could just go straight for new class i could do that but instead what i'm going to do is i'm going to create a package first and a package is basically kind of like a wellnamed folder in which you can group different source files that's not too important to understand now but in general with java it is something that you need to do where you basically place classes into packages just keeps everything nice and organized so i'm going to give a package name of com.java easily got demos i'll do for now and then i'm just going to hit enter i don't have to use the mouse to click this finish button if it's already highlighted blue like this i can just hit enter and it saves me from having to move the mouse over there so enter just picks out the default person that's currently highlighted effectively clicks it for you and by the way as well packages in general they follow what's known as the reverse domain convention that basically means that you take the domain name of the company that you work for in my case it's java easily.com and then you reverse that that'll give com.java easily then after that you can put whatever you like which makes sense to your organization just to be able to group the different classes that you write so here this explains com.java easily.demos so now if i just right click in here now i can create the class i go to new class and we can see here it's going to create it in the source folder it's going to create it in this package here that we've just created now i just have to give the name of the class so i'll call it my app and also there's some extra options here which we don't really care about apart from this one over here we tick this it's also going to create that standard main method which we said before kicks off the java program so we'll just do that and click finish now we can see we've got our first class my app where we can put our program code and we put it inside the main method and at this point this is a fully working program doesn't do anything because we haven't actually got an implementation we haven't got anything rather we haven't given any instructions inside here so let's just plug in a line now just to print out our message so to do this we use the system class which is part of jdk you'll see here that it's in the java.lang package so that's one thing to know about java any classes which are in the java.lang package they get what's known as imported automatically for you which means that you don't have to explicitly declare that you want to bring some class in to use it now we haven't looked at imports basically if you want to use glass from another library typically what you'll do is between the package statement at the top on line one and the class declaration on line three you'll use an import statement and the import statement will be something like for example import java.util.list for example if you wanted to reference a list from the java.util package the java comes with a whole heap of different classes which are inside various packages as part of the jdk you can have all of those at your disposal as well but for now just know that we've got the java.long package which has effectively been auto imported for us anyway so then i do system dot you can see here this is the compiler giving us helpful suggestions so if i look in here if i scroll up you can see it's not just one method or field it's given us it's given us a whole heap of them a whole different array of them these are all the different methods or fields these variables inside the class that i could actually access now so for example we're going to do this one here which is out so i could either type out like that and as you can see as i type to each character maybe just back up a little bit i type each character so i type the o first you can see there that it's actually matching and filtering the list based on that specific letter i do you next now you can see it's got two options it can suggest for me i want this one also as well another really nice thing in eclipse you'll see on the right hand side there of the method and field suggestions they've got this kind of like documentation panel and this is actually showing you the socalled javadoc that's the java documentation for this particular field on the system class so it's really nice that you get this kind of help specifically when you're starting out as well so you can go over for example you just have a read of it you can scroll up and see what it's telling you you can see they're saying there's some other methods that you could also choose to look at as well if you wanted to we're not going to look at this in detail now but just know that it's there to help you and it's again it's another one of these nice aspects of eclipse that you have which again makes eclipse in my opinion the best id for beginners to start out with that said if i hit enter now i've got this system.out reference which is a reference to the print stream which enables us to be able to write a message to the display now if i press another dot here you can see we've got the same kind of thing again only this time instead of it showing us like you did before methods or fields which were available on the system class now of course we're not accessing the system class anymore now we're accessing the print stream because out which is a field inside the system class the actual type of that the print stream so that's how it works in java pretty much whenever you have a dot it's the thing immediately to the left which is being referenced and again when you press the dot you can either access fields on the class or object or methods on the class or object another method i want is called print line so if i start typing p r i n t l n you can see here we have a whole heap of methods which all appear to have the same name and that's because they're the same method but in java you can specify method multiple times with each method declaration accepting different types of input and that makes the method very flexible so for example here you can see we can choose to pass in i use my arrow keys an integer that's the type for those whole numbers we saw so numbers like 3 17 4072 that kind of thing oh we could pass in a string so that's why we have a message which is in quotation marks so it's a very flexible feature of java and it's known as method overloading if i now press enter and you can see it's automatically selected that particular method for me it's also put the parentheses around as well and now it's also saying okay we'll give me a string which you can see there above if i just put quotation mark hello world the quotation mark at this point you can see that we've no longer got any red underlined squiggles squiggly underlines nor do we have any of those red crosses in the circles that's because now this particular class is valid java code in other words it can be compiled down to bytecode and then executed on a jvm if i move this cursor away you can see as soon as i moved it to the right by the way i'm using the arrow keys do this so your left arrow moves you one way right arrow moves you the other way so as soon as i moved it to the right because we were outside of those parentheses then eclipse notice that there's no point in giving us that little helpful tip which told us what it was expecting which was a string so at this point we've got a valid program now if i just save it because we've got this star here which means we haven't saved it so i'd do command s on a mac ctrl s on windows just save that and then if i right click on here the class itself and do run as java application and then we'll see here we've got this new tab which has popped up called console it says that the program's finished that's what terminated means and you'll see underneath we've got a message a string that we passed the system.out.printline which said hello world so you can see here a few things number one it's allowing us to type in the program code and with that it's giving a syntax highlighting showing us when we make errors and it's providing helpful suggestions number two because it ran the program that means it must have compiled the program down to bytecode so it must have invoked the java c compiler somewhere along the line which we'll see in a second finally number three is actually running the program for us as well which means it's passing that compiled by code the jvm we can see here in fact this is the actual command that it used to do that when it launched a jvm now just to show you as well we actually do have this file which was generated that's the bytecode don't forget if we go up to window and go to a new view we go down to navigator and you can see here this is actually showing us all of the files which are in the project so this panel here this pane here is just showing us basically the items that are relevant to our source code it's just purely focused on showing us the relevant things it's actually shielding things from us that we don't necessarily need to see on a daytoday basis which is kind of good because you can just focus on exactly what you need to focus on which is the actual code and making that work but you'll see we don't have for example the myapp.class file which we'd expect it is there it's just in a separate subdirectory so if we go down to the navigator view here you'll see that this is the actual real object structure with all of the files and you'll notice that inside our source folder we've got source com java easily demos myop.java by the way that's one thing to bear in mind as well that the package that you place a class into actually gets turned into a directory structure like this so you can see this is like comm dot java easily dot demos which corresponds to com java easily the demos up there anyway that's where the source file was and similarly if we go into the bin sub directory we'll see the same structure so we'll see com java easily demos corresponding to com.java ease little demos because java classes in a specific package compile down to class files which are in the same package so therefore it has the same folder structure and inside there you can see we've got myapp.class which corresponds to my app.java here so class my upload chart so if i close these off and this one too and you'll see there are also some other files and folders there as well we've got the project the class path and our settings these are folders and files for eclipse's internal use we don't need to know about those for now so if we just come out of this and so we'll just see now how a method works for example so i can actually take this piece of card here i can do this i can actually do a special advanced procedure which i'll give you a sneak peek into or refactoring so if i just right click here and i go down to this menu here refactor and use this one here called extract method if i click this now what this is actually going to do is it's going to take this statement out or printing hello world and it's going to push it into its own method and replace it then with a call to that method this is a great way how we can first of all reinforce our understanding of how methods are declared but also we can actually see how they're invoked as well how the method is actually called in other words this asking me to give it a name so i'm going to call method say greeting for example and here you can see we've got these access modifiers we were talking about before you'll recognize private and public earlier on in the course we'll just leave it for private for now that's fine because we're only calling this method from within this class it's okay that it's private it'll still be visible to the method from which is called as we'll see then here we can see we've got a preview of the signature itself and the method signature is just a fancy way of saying what the method declaration looks like with all its combination of modifiers return types method name and input parameters so now if we click on ok you'll see that just like that we've got a new method so this is how you actually call a method you just basically use the method name then the two parentheses there which matches the method name here and the two parentheses here and here we can see the method declaration itself so if we rerun this now it shouldn't change anything just right click again go down to run as java application yeah it hasn't changed anything so you're probably saying well what's the point in rerunning it the point of rerunning it is just to make sure that after we did that socalled refactoring we're just rerunning it to make sure we didn't break anything because in spite of the fact that we didn't actually have any red error marks do we did that it's still possible that we might have some kind of errors or whatever depending of course on how complex the curve refactoring you were doing actually was so let's quickly demonstrate now how we can actually pass parameters so if i just go up here let's supposing i want to pass a parameter here such that instead of saying hello world it will say hello and then the person's name in order to do that let's put in a parameter here so we use the type of the parameter which is going to be a string because it's going to hold textual data so character data so alphabetical characters that kind of stuff and we give the variable a name which coincidentally we'll also call them because that makes sense we're passing in the name of the person we want to greet and once we've done that we can delete this and replace world with the variable that we passed him if we pass in matt it would say hello i'm at with us in john it would say hello john and you'll notice over here we're getting this red squiggly underline again and the reason is of course because we're not actually passing a name now because we haven't adjusted this method call to take into account that we're now passing a name here and if we didn't know that give you another demo of how helpful ids can be if we just click on this x over here we can see that it's offering us some ways to fix this situation it's saying we can either add an argument that means a pass a parameter to match the fact that the method takes a string parameter that's what we're going to do by the way our alternative is saying do you know what you can actually change the method itself to remove parameter both of those if you think about it would fix the situation just press escape quickly just to explain this if we pass in a parameter here which is a string it will match this which means it would then work and remove that red x square the underline and similarly as well if we removed this parameter here then we'd have a method which doesn't take any parameters so that would also work which would again remove this squiggly underline and the red x so both of those options are perfectly viable if we go back on again by clicking it we see there's another option as well which is to create a completely different method which doesn't take a parameter at all and at this point you'd actually have two methods with the same name one takes a string one doesn't that's the concept of overloading i mentioned a few moments ago so yeah all viable options which the id is offering you all easy to understand and simple to digest as long as you read actually what it's saying and you'll notice as well that on the right hand side where we saw the documentation panel before which gave us help documentation this time we've actually got a potential preview of code that he could write for us now he doesn't know who we actually want to say the greeting to whether it's matt or john so the best it can work out and say whatever that is infer the best it can infer which we usually say the best it can infer is just to say well okay don't really pass anything past null we won't go into null and what that is it's outside the scope of this lesson but it's one solution and similarly as well if you click this one it's again giving you a preview of what that would look like of course it hasn't fixed the entire code because even if it did that it removed that name parameter you'd still then get an issue here where you'd be referencing something that hasn't been passed in but it's enough to give you an idea what you might want to do and the where the id would adapt to the card for you so anyway we're going to double click here now and as it promised it's putting that null placeholder for us which meant that at least now the code compiles now instead we're just going to replace that null value with my name for example and if you just press escape afterwards it loses that box highlight so you can see the code a little bit better so now if we run the program and to run as java application we'll see that he's doing something else helpful because we didn't save that before it was a star there still now it's saying oh do you want us to save the resources for you as well you want to save the source file yes i do i even say always save the resources before launching so always overwrite and do okay and now we can see it's saying hello matt so that's an overview of how you can pass parameters into methods now to show you the idea about debugging that we were talking about before we could right click and do run as that will just run the program but i can also do debug as i can debug the program now before you do a debug now before you launch the debugger or rather the id when it's in debug mode you need to set a thing called a breakpoint and that's basically where you want the program to stop that is to stop running at that specific point so you can effectively take a look around so if i go up to here for example if i double click the margin just to the left of the line numbers let's say you set a breakpoint this means that now if i right click and do debug as java application will first of all ask me if i want to switch to perspective i'll say remember my decision yes i do go to the debug perspective now this is going to change the windows slightly and the panels that we've got so then now this particular perspective in other words this arrangement of windows and panels is geared towards debugging so in other words like looking through the card and actually it's called stepping through the code see everything that's going on just notice the fact that what we've actually got here now is the program is suspended just before it executes this line so this put this highlight in here it's highlighted this line what that means is i've stopped here just before i execute this line before i run this particular line or do this method call in this case and it's effectively saying what you want me to do it's not going to do anything unless we do something at this point what we can do is we can what's known as step into the method so this is the segreting method and it's calling this a greeting method so if i go up here to the run menu we'll see that the first few menu items here are effectively commands that you can do at this point so i can choose to do step into which is f5 which will go into that method or i could do step over which is f6 which goes over the method i'll just show you what those mean now so if i click back here press f5 you'll see that now it's gone inside of this method call so now it's inside this method here which we have you'll also see a few other things now as well you'll see that in the right hand pin we can actually see the variables that are available now so this method has a name variable which is passed in if i hover over it here it actually tells me what that value is is matte which is really helpful and you'd only get this in the debug view by the way because this is now running code it's not us programming it it's the jvm running it now you can see over here we've got variable name it says matte and then over on the left hand side you can actually see what's known as the call stack that's basically showing us the sequence of calls that have been called it's kind of funny but it goes from the bottom up so it's saying basically the first thing that it ran was the main method in the my app class which happened to take an array of strings that's corresponds to this one here the main method in the my app class which took an array of strings they got to line six you can see here line six which is this line here and now it's at a break point on line ten in the say green ting method which takes a string so here where i got the segregating method which takes a string and this is line 10 which is stopped at and you can see line 10 here line 10 here it's showing you very accurately what's going on so like before when we stepped into the method if we had a method we wanted to step into the code of f5 instead we can press f6 now which is step over so when you step over something it just goes to the next line so if we do f6 now you can see it goes to the next line now if we do step over again you can see it jumped out of that method because it finished that method there's nothing else it needs to do there because it got to the end closing brace that right hand curly brace you can see there but also notice what happened as well the name variable which we had here before that's now gone that's because that's no longer what's known as in scope in other words it's not available to us anymore because in this method here there isn't a variable called nim that was only in that method here and only specifically for that method at that specific point in time but now that method's gone and we can tell that method's gone as well because if we look back over here to the call stack we no longer have this say greeting method here we no longer have it on the call stack and in fact now we've progressed from line six which it was before to line seven which is this one so finally if we press f6 to step over this point there's no more code to run the application's finished terminated we've finished what's known as our debug session you can also do various fun things as well when you're in a debugger for example you can change the values of things you can choose to return from methods early you can choose to throw exceptions we haven't seen an exception that's a way of being able to say there's an error in the code you do things like that it really enables you as a programmer to be able to really go in deep to your code and understand at a very deep level how it works now obviously this program is trivial it's like the easiest program we could have written to be honest in java programs they get of course increasingly more complex although don't worry because it's always manageable complexity because of the simplicity of the syntax of the language that's the combination of keywords and symbols and that kind of thing it's quite easy to get the hang of once you have a play around in practice a bit but the point is though once you take your programming to the next level you start developing more complex java programs that's when you really start to see the power of a debugger so yeah debuggers and ide is essential tool to have in any programmer's toolkit so that should have given you a nice overview of the main moving parts we have in java programs and also a sneak peek into what it's like to actually use an id to do some java programming as you can see once you know what you're doing it's actually not that complex after all
