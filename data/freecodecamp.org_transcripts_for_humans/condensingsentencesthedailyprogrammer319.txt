With timestamps:

00:00 - Hey Coders,  welcome to the daily program of our YouTube series where we solve different problems
00:04 - which are posted on the subreddit, "daily programmer".
00:07 - In this particular video, we're going to talk about a problem called "Condensing Sentences",  which is number 319 on the subreddit.
00:14 - And, first off, before we start talking about the problem, make sure you spend time yourself solving on paper
00:20 - and implementing it in Javascript, so that you really practice by yourself how to problem solve.
00:25 - Otherwise, let's go ahead and break it down on the whiteboard.
00:28 - All right, so the condensing sentences problem is like so. If you're given a string, for instance, we have a string here that says "no one ever runs so often"
00:36 - what we want to do is condense the words together
00:40 - So if there's any overlap, so, in this case we have "o",
00:45 - so, the "o's"overlap. We should combine them together into one word.
00:50 -  
00:50 - Then again if this one will overlap with the next one we need to combine it with the next word
00:57 - Or "r" overlaps here
01:00 - "S" overlaps with that and then "often" again, it's another overlap
01:06 - So in this case we're going to convert this entire sentence into one combined string.
01:11 - Now another example we can do is "live verses", which is going to be condensed into:
01:21 - "l-i-v-e-r-s-e-s"
01:24 - so notice that there's two here that overlap
01:27 - And then we only use that once
01:29 - So then if we have a string such as "hello world", this would have no condensing
01:33 - happening to it because the beginning of the right word does not have anything that matches at the end of the left word
01:39 - So now that we talked about the problem, and how it's actually defined,
01:43 - how would we actually solve this on paper, right? So if we have another word...so let's go and
01:47 - Put the string again "live verses". If we wanted to check if two words in this case
01:54 - I'll say this is the left word and this is the right word
01:57 - If I want to check if the left word and the right word should be combined
02:01 - What I can do is just continuously look through the left word and shorten the word that I'm looking for from the starting point
02:09 - so for instance I can say
02:11 - Does live or live
02:14 - exists at the beginning of the right word?
02:17 - If not, check the next one. Does "ive" exists in the beginning of the right word?
02:23 - And in this case, it doesn't, so then again, check if "ve" begins any of the right word; and it does.
02:32 - So in this case, we know we can condense these words together, and we can do so.
02:38 - Continue on to the next words in the string.
02:40 - So there's two main sub problems that you can solve in order to solve the major problem. This first one is given two strings
02:48 - Can you condense them together and if so, how do you condense them together, right?
02:52 - and we just show that used continuously create sub strings by knocking off the first character the left and
02:58 - Checking if it exists at the start of the right all right. So for solving the second sub problem assume
03:03 - We have a longer string. How do we make sure we loop over every word and condense where possible all right?
03:08 - So one thing you can do is first we can break this apart by spaces, right?
03:13 - And convert it into some type of an array or list, so instead of being an actual string we can instead
03:20 - just say that we have an internal array
03:24 - with our four words in it.
03:26 - And over here, we have the different indexes of that array.
03:31 - So the first step to do was to take the left word so let's say left, and I'll say right
03:41 - and check if they can be condensed. And if they can be condensed, what you want to do is combine them together
03:48 - and overwrite this slot in the array with the condensed word.
03:53 - So remember the array of Index 0 we
03:55 - put the condensed word into,
03:57 - and then the Index 1 word we can just go ahead and remove because we already combined it with the previous one.
04:02 - And if you remove something from array remember that the indices get updated.
04:07 - So then we can continue to do the same thing
04:09 - And since we just found and condensed a word let's keep this on the same so left
04:14 - But now we're just checking a new right word
04:18 - So can these two be condensed?
04:20 - No, they cannot so at this point what we can continuously do is just change the left and the right or increment or loop
04:28 - so now we have this as our left word and
04:32 - This as a right word
04:34 - and
04:36 - Then again that we cannot combine these or condense these together so at this point
04:39 - We've reached the end of the array so we can go ahead and break out of the the loop so at this point
04:44 - You should have a good understanding of how to do this on a whiteboard or on paper
04:47 - So let's try to convert it and implement it in Javascript, so like we mentioned before there's two sub problems
04:53 - You can solve in order to solve the overall
04:56 - Top level problem
04:58 - So the first sub problem is how do you condense two words together and find out if they should be condensed at all.
05:04 - so to start off. Let's write a function called Condense
05:07 - words and it takes two parameters a left and
05:11 - a right
05:13 - Which is a left word and the right word and then that's going to return null if they can't condense the words
05:22 - Otherwise it's going to return the two words condensed together
05:25 - So starting off remember that algorithm
05:27 - We did where we have to loop through each substring and kind of chunk offs at the first letter of the left word?
05:33 - So to do that. We can go ahead and loop through
05:38 - the length of the Left word
05:43 - And we can say left substring is equal to left dot
05:47 - substring of that i
05:49 - which will go ahead and say give us all the characters
05:52 - And then give us all the characters starting index 1 give us all the characters starting Index 2
05:56 - Until we get to the very last character
05:59 - And once we have the left substring we can check to say does the right start with
06:06 - Thing is actually called startswith, so does right.startswith(left.substring)
06:12 - And if it does let's just go ahead and return that condensed word which is going to be left plus the right and then replace
06:21 - that left substring with an empty string and
06:25 - Then up here and secure the extra space
06:27 - And then we can go ahead and try to test it out to make sure it works as expected
06:32 - So I'll do console dot log, and I'll pass it live and I'll pass it verses. And
06:38 - again an example this should print out one word combined together, so if I were to run this
06:44 - We see that it does print out
06:47 - The two words combined so that we've written our first
06:50 - Subproblem to Condense two words together and that we've tested out to make sure it works
06:54 - Let's also test that with hello world and verify that it returns null
07:02 - And it does so again. This is a good example of how you solve a
07:07 - Top-level problem by breaking it into subproblems and testing it as you develop it so now we know this one's good
07:12 - So let's work on the other sub problem, which will be
07:14 - Condensed
07:16 - sentence
07:18 - which will take a string and again what we need to do is loop over that string for each word and
07:25 - Like we saw an example on the whiteboard we need to split it first so we can say let words, actually I'll do
07:29 -  
07:30 - const words is equal to string dot split
07:33 -  
07:35 - like the type
07:37 - And we're going to split it on the empty characters alright, so that'll give us all the words split up
07:42 - And then finally we want to return
07:46 - Those same words, but join together
07:49 - So then the meat and potatoes of this method is we need to loop over every word one by one so we'll say let, oh sorry, we'll say
07:57 - Before let I is equal to zero I less than words dot length
08:01 -  
08:02 - minus one and then increment I and
08:06 - That's because we don't want to actually reach the end of the string and go out of bounds
08:11 - so we stop I one before the end and
08:14 -  
08:15 - Then again, we have the left and the right so we can say const left is equal to words of I
08:19 -  
08:20 - Const right is equal to words of I plus 1 and then we need to call Condense words, so we'll say const
08:27 -  
08:28 - Condense
08:29 - Is equal to condense words left and right?
08:33 - if
08:35 - Condense is actually defined therefore. We could have condensed the words together we need to go ahead and overwrite
08:40 -  
08:41 - the first word
08:43 - with the condensed word
08:46 - Go ahead and rename this to
08:49 - Condensed
08:51 - and
08:52 - Then we need to remove
08:55 - Index plus one or I plus one so we can say words that Splice I
09:00 - Plus 1 and then length of 1 which will just remove the next word since we combined it with the previous one
09:05 - And then finally we need to continuously check the same word that we've condensed over and over again to see if it can be
09:11 - combined with the 1 after so we can say i minus minus
09:15 - To kind of prevent it from doing this increment up here so at this point. We can kind of go up here
09:22 - In fact let's before we do this. Let's make this a little bit easier, so
09:26 - Just so we have less variables to mess around with we can say there condense equals condense words
09:31 -  
09:32 - Words I or it's I plus 1
09:36 - So now at this point. We can change from Condense words to condense sentence, and then we can change this to
09:43 - um like one of those long sentences we had before which I just copy this in here
09:49 - No one ever runs, so often if we run this
09:56 - See that it prints out all the words combined together or condensed together
10:00 - I also have a couple of other ones on my clipboard we can kind of try out so cut and paste those in
10:04 -  
10:06 - So we see no one has ever run so often gets combined
10:09 - The one yellow low dog gets combined to yellow dog the Black Kettle is hot
10:14 -  
10:14 - We combine black and kettle together so it's going to condensed and of course hello world does not get condensed at all.
10:20 -  
10:21 - So that about wraps up how you solve this  condensed sentences
10:25 - problem number three one nine on the daily program or subreddit
10:28 - If you have any questions feel free to ask them in the comments below or if you have a different implementation
10:32 - Feel free to post your jSBin or whatever link that you want and maybe we can have a discussion about other ways to solve this
10:38 - I saw one solution which uses Regex to solve this which is like one line of code
10:43 - But I feel like as a beginner programmer. You should probably learn how to
10:47 - Manually solve things before you just resort to using Regex although Regex is pretty elegant. Again if you liked the video
10:53 - Feel free to give us a thumbs up and then also subscribe to the free code Camp channel below alright. Thanks for watching

Cleaned transcript:

Hey Coders, welcome to the daily program of our YouTube series where we solve different problems which are posted on the subreddit, "daily programmer". In this particular video, we're going to talk about a problem called "Condensing Sentences", which is number 319 on the subreddit. And, first off, before we start talking about the problem, make sure you spend time yourself solving on paper and implementing it in Javascript, so that you really practice by yourself how to problem solve. Otherwise, let's go ahead and break it down on the whiteboard. All right, so the condensing sentences problem is like so. If you're given a string, for instance, we have a string here that says "no one ever runs so often" what we want to do is condense the words together So if there's any overlap, so, in this case we have "o", so, the "o's"overlap. We should combine them together into one word. Then again if this one will overlap with the next one we need to combine it with the next word Or "r" overlaps here "S" overlaps with that and then "often" again, it's another overlap So in this case we're going to convert this entire sentence into one combined string. Now another example we can do is "live verses", which is going to be condensed into "liverses" so notice that there's two here that overlap And then we only use that once So then if we have a string such as "hello world", this would have no condensing happening to it because the beginning of the right word does not have anything that matches at the end of the left word So now that we talked about the problem, and how it's actually defined, how would we actually solve this on paper, right? So if we have another word...so let's go and Put the string again "live verses". If we wanted to check if two words in this case I'll say this is the left word and this is the right word If I want to check if the left word and the right word should be combined What I can do is just continuously look through the left word and shorten the word that I'm looking for from the starting point so for instance I can say Does live or live exists at the beginning of the right word? If not, check the next one. Does "ive" exists in the beginning of the right word? And in this case, it doesn't, so then again, check if "ve" begins any of the right word; and it does. So in this case, we know we can condense these words together, and we can do so. Continue on to the next words in the string. So there's two main sub problems that you can solve in order to solve the major problem. This first one is given two strings Can you condense them together and if so, how do you condense them together, right? and we just show that used continuously create sub strings by knocking off the first character the left and Checking if it exists at the start of the right all right. So for solving the second sub problem assume We have a longer string. How do we make sure we loop over every word and condense where possible all right? So one thing you can do is first we can break this apart by spaces, right? And convert it into some type of an array or list, so instead of being an actual string we can instead just say that we have an internal array with our four words in it. And over here, we have the different indexes of that array. So the first step to do was to take the left word so let's say left, and I'll say right and check if they can be condensed. And if they can be condensed, what you want to do is combine them together and overwrite this slot in the array with the condensed word. So remember the array of Index 0 we put the condensed word into, and then the Index 1 word we can just go ahead and remove because we already combined it with the previous one. And if you remove something from array remember that the indices get updated. So then we can continue to do the same thing And since we just found and condensed a word let's keep this on the same so left But now we're just checking a new right word So can these two be condensed? No, they cannot so at this point what we can continuously do is just change the left and the right or increment or loop so now we have this as our left word and This as a right word and Then again that we cannot combine these or condense these together so at this point We've reached the end of the array so we can go ahead and break out of the the loop so at this point You should have a good understanding of how to do this on a whiteboard or on paper So let's try to convert it and implement it in Javascript, so like we mentioned before there's two sub problems You can solve in order to solve the overall Top level problem So the first sub problem is how do you condense two words together and find out if they should be condensed at all. so to start off. Let's write a function called Condense words and it takes two parameters a left and a right Which is a left word and the right word and then that's going to return null if they can't condense the words Otherwise it's going to return the two words condensed together So starting off remember that algorithm We did where we have to loop through each substring and kind of chunk offs at the first letter of the left word? So to do that. We can go ahead and loop through the length of the Left word And we can say left substring is equal to left dot substring of that i which will go ahead and say give us all the characters And then give us all the characters starting index 1 give us all the characters starting Index 2 Until we get to the very last character And once we have the left substring we can check to say does the right start with Thing is actually called startswith, so does right.startswith(left.substring) And if it does let's just go ahead and return that condensed word which is going to be left plus the right and then replace that left substring with an empty string and Then up here and secure the extra space And then we can go ahead and try to test it out to make sure it works as expected So I'll do console dot log, and I'll pass it live and I'll pass it verses. And again an example this should print out one word combined together, so if I were to run this We see that it does print out The two words combined so that we've written our first Subproblem to Condense two words together and that we've tested out to make sure it works Let's also test that with hello world and verify that it returns null And it does so again. This is a good example of how you solve a Toplevel problem by breaking it into subproblems and testing it as you develop it so now we know this one's good So let's work on the other sub problem, which will be Condensed sentence which will take a string and again what we need to do is loop over that string for each word and Like we saw an example on the whiteboard we need to split it first so we can say let words, actually I'll do const words is equal to string dot split like the type And we're going to split it on the empty characters alright, so that'll give us all the words split up And then finally we want to return Those same words, but join together So then the meat and potatoes of this method is we need to loop over every word one by one so we'll say let, oh sorry, we'll say Before let I is equal to zero I less than words dot length minus one and then increment I and That's because we don't want to actually reach the end of the string and go out of bounds so we stop I one before the end and Then again, we have the left and the right so we can say const left is equal to words of I Const right is equal to words of I plus 1 and then we need to call Condense words, so we'll say const Condense Is equal to condense words left and right? if Condense is actually defined therefore. We could have condensed the words together we need to go ahead and overwrite the first word with the condensed word Go ahead and rename this to Condensed and Then we need to remove Index plus one or I plus one so we can say words that Splice I Plus 1 and then length of 1 which will just remove the next word since we combined it with the previous one And then finally we need to continuously check the same word that we've condensed over and over again to see if it can be combined with the 1 after so we can say i minus minus To kind of prevent it from doing this increment up here so at this point. We can kind of go up here In fact let's before we do this. Let's make this a little bit easier, so Just so we have less variables to mess around with we can say there condense equals condense words Words I or it's I plus 1 So now at this point. We can change from Condense words to condense sentence, and then we can change this to um like one of those long sentences we had before which I just copy this in here No one ever runs, so often if we run this See that it prints out all the words combined together or condensed together I also have a couple of other ones on my clipboard we can kind of try out so cut and paste those in So we see no one has ever run so often gets combined The one yellow low dog gets combined to yellow dog the Black Kettle is hot We combine black and kettle together so it's going to condensed and of course hello world does not get condensed at all. So that about wraps up how you solve this condensed sentences problem number three one nine on the daily program or subreddit If you have any questions feel free to ask them in the comments below or if you have a different implementation Feel free to post your jSBin or whatever link that you want and maybe we can have a discussion about other ways to solve this I saw one solution which uses Regex to solve this which is like one line of code But I feel like as a beginner programmer. You should probably learn how to Manually solve things before you just resort to using Regex although Regex is pretty elegant. Again if you liked the video Feel free to give us a thumbs up and then also subscribe to the free code Camp channel below alright. Thanks for watching
