With timestamps:

00:01 - hi there and welcome to the api testing
00:04 - with postman course my name is valentine
00:07 - i'm a software developer and i like to
00:09 - share my passion for apis with others in
00:12 - a way that is easy to understand
00:14 - when i'm not speaking at a conference
00:17 - or traveling the world
00:18 - i like to share what i know by creating
00:21 - short tutorials and online courses like
00:24 - this one
00:26 - in this course you will understand what
00:28 - bozeman is and why do we need this tool
00:31 - start using postman to interact with
00:33 - apis and write api tests
00:37 - in the last part of the course we'll
00:39 - explore ways to automate the entire
00:41 - testing process you will get hands-on
00:43 - experience using an api
00:46 - throughout the course i will give you
00:47 - assignments as a way to practice what
00:50 - you have learned
00:51 - if you are serious about api testing you
00:54 - need to practice on your own
00:56 - make sure you check the video
00:58 - description for the course notes
01:00 - i'll be putting there the most important
01:02 - steps you need to take
01:04 - links to resources
01:06 - any updates just in case something has
01:08 - changed
01:10 - so let's get started
01:15 - before we get our hands dirty let's make
01:17 - sure we understand the basics
01:20 - if you are new to apis here is a very
01:23 - quick introduction
01:24 - an api is essentially an interface to a
01:28 - server that has some data or does some
01:30 - actions
01:32 - to understand the concept of an
01:33 - interface think about any power outlet
01:36 - you have in your home
01:38 - it does not matter which device you want
01:40 - to power your laptop a washing machine
01:43 - or a tv
01:44 - the outlet on a wall is designed to
01:47 - accept any plug following a predefined
01:50 - specification
01:52 - an interface is essentially a contract i
01:55 - live here in europe so all sockets have
01:57 - a specific form if i bring a device from
02:00 - the united states or australia this will
02:03 - not work as they have a different
02:05 - interface
02:06 - the apis we are dealing with share a
02:09 - similar concept to use an api we need to
02:12 - know and follow the specification
02:15 - if you are totally new to apis i do
02:17 - recommend watching another course here
02:19 - at field code camp created by craig
02:21 - dennis to get the basics of apis right
02:25 - i think the best way to understand apis
02:28 - is by actually using them let's get back
02:30 - to postman postman is a tool for
02:32 - interacting with web-based apis that is
02:36 - apis that work over the internet an api
02:39 - is like an outlet that a server offers
02:42 - and instead of electricity we get data
02:45 - we use postman to plug into this outlet
02:48 - but instead of using a physical cable we
02:50 - use the internet
02:52 - postman can help us connect to that api
02:54 - and make sure that the process of
02:56 - sending and receiving data is much
02:58 - easier
02:59 - without that interface to the server it
03:02 - will be much harder to communicate so
03:04 - this is why we need postman
03:07 - in this lesson we'll learn how to
03:08 - install postman postman uses a freemium
03:11 - pricing model and for many use cases
03:14 - including this course it is free to use
03:18 - there are two ways of running postman in
03:20 - your browser by going to postman.com
03:24 - or as a standalone app that you have to
03:26 - download and install
03:28 - there is also an old and deprecated
03:31 - google chrome extension don't use that
03:33 - one
03:34 - i'll be using the browser
03:37 - application throughout this tutorial but
03:39 - apps functionality is very similar you
03:42 - will find installation instructions in
03:43 - the course notes i'll go to postman.com
03:47 - and sign up for an account
03:49 - the setup after this is relatively easy
03:53 - and i will not create a team yet
03:56 - this is it
03:57 - postman is
03:59 - actively developed by the time i
04:01 - finished recording editing and
04:03 - publishing this course
04:05 - a new version will be released
04:07 - you may notice slight differences from
04:10 - what you see right now in this video
04:12 - however i can reassure you that the
04:14 - principles stay the same
04:17 - i will update the course notes if
04:19 - there's something really important you
04:20 - need to know
04:22 - the first thing that i like to do when
04:23 - opening postman for the first time
04:26 - is changing to the black theme
04:28 - so in order to do that simply locate
04:30 - this gear icon this will take us to the
04:33 - settings
04:35 - and from the tab with themes
04:38 - i'll select the black theme
04:41 - and simply close this
04:49 - so let's go ahead and start using an api
04:51 - in postman
04:52 - for this course we'll be using an api
04:54 - that allows us to order a book
04:57 - now every time we want to start using an
05:00 - api
05:01 - we need to understand how to interact
05:03 - with that api and the best way to start
05:06 - is always by looking at the api
05:07 - documentation now any api out there that
05:10 - you want to use should have an api
05:12 - documentation that explains you how to
05:14 - use that api explains what's available
05:17 - and so on
05:18 - the api that we'll be using
05:20 - allows us to have a look at a list of
05:22 - books and to order a book
05:25 - so
05:26 - right from the api documentation that
05:28 - you see here and that will be linked in
05:30 - the course notes you'll be able to see
05:32 - that api is available at this specific
05:35 - address
05:36 - and additionally there are some
05:38 - endpoints that we can use endpoints
05:41 - offer different kind of responses and
05:44 - we're going to take a look at them the
05:46 - first endpoint that we should look into
05:49 - is the status endpoint
05:51 - so what i'm going to do is simply copy
05:53 - the address of the api
05:57 - and here inside postman
05:59 - from the workspaces
06:01 - i'll select my workspace
06:04 - workspaces in postman allow you to
06:06 - organize your work better
06:08 - let me make this a bit bigger
06:14 - so i'm gonna go ahead and open up a new
06:16 - tab
06:17 - and this looks pretty much similar to
06:18 - what you have in a browser
06:20 - it's just a bit more advanced
06:22 - i'm going to paste here the address
06:25 - and after it i'm going to write status
06:30 - all requests that will go to this api
06:32 - must include this address here
06:36 - i'm gonna hit here the send button
06:41 - and what i'm gonna get back is in the
06:43 - lower part of the screen
06:45 - i'm gonna say status okay
06:48 - so this is our first request in postman
06:51 - we have sent a request to this api to
06:54 - this status endpoint and essentially the
06:57 - status endpoint is just telling us that
06:59 - the api is available is working as
07:02 - expected
07:03 - and that we can start using it
07:10 - next let's take a closer look at what
07:12 - has happened here
07:14 - you can load this here in the address
07:16 - that we are using
07:17 - this
07:18 - https protocol
07:20 - https stands for hypertext transfer
07:24 - protocol http and s means secure so it's
07:28 - a secure connection most apis should be
07:32 - using https
07:33 - but for the purpose of what i'm gonna
07:35 - demonstrate next
07:37 - http and https are essentially the same
07:39 - thing
07:41 - now just to do a bit of http recap
07:45 - in our communication between the client
07:48 - and the server now in this case the
07:50 - client is postman and the server or the
07:52 - api
07:53 - is the simple books api
07:55 - we are using http messages
07:59 - the http message that goes from postman
08:02 - to the api
08:03 - is called a request and what is coming
08:05 - back from the api is the response
08:09 - the request in postman is represented
08:12 - here on the upper part
08:14 - and essentially postman allows you to
08:16 - configure many things about the request
08:20 - the request will contain the url or the
08:23 - address where you're sending this
08:24 - request in this case
08:26 - we have
08:27 - this is the address of the api and this
08:30 - is the endpoint but we are specifying
08:32 - everything in one address
08:34 - we also have the request method and
08:36 - we'll get into that a bit later
08:40 - we can specify headers
08:43 - and postman has been kind enough and
08:45 - already added a few headers for us
08:48 - and we're going to take a look at those
08:50 - headers a bit later
08:53 - and we also can specify a body
08:55 - which for a get request
08:58 - we don't need to do that we'll
09:00 - never do it for a get request because
09:02 - with a get request
09:03 - we're just trying to get data we're not
09:05 - sending any data for example with the
09:07 - post request we will specify a body
09:11 - now this is essentially
09:12 - what is happening with a request so
09:14 - again just to
09:16 - quickly recap postman allows us to
09:19 - configure the different properties of
09:21 - the http request
09:26 - on the lower part of the screen here
09:28 - this is the response
09:30 - and the response also contains some
09:33 - properties you will find the status code
09:37 - in this case 200.
09:40 - the response will also contain some
09:43 - headers
09:44 - and generally both for the request and
09:46 - the response
09:48 - the headers are like some meta
09:50 - information some additional information
09:52 - that goes with the message
09:54 - it's not always necessary to have this
09:57 - but it just makes the communication a
09:59 - bit easier
10:00 - just to give you an example here what's
10:02 - coming back here is a header called
10:05 - content type and it's telling
10:07 - essentially postman that hey what we
10:09 - have received here is represented as
10:11 - json you'll see here application slash
10:13 - json
10:14 - and using this information postman can
10:17 - look at the response body and say oh i
10:19 - know this is jason so i'm going to
10:21 - display it as json instead of using for
10:24 - example text you can see it doesn't look
10:26 - so nice
10:27 - so these are like some additional things
10:29 - that travel both with the request and
10:32 - the response
10:35 - the response will also contain what is
10:37 - probably the most interesting and most
10:39 - important part the response body
10:41 - essentially the response body
10:43 - contains the entire response whatever we
10:45 - wanted to get as an information from the
10:47 - server will be available in the response
10:50 - body
10:53 - i'm going to point out the different
10:55 - parts of the http
10:57 - request message and http response
10:59 - message
11:00 - throughout the course but i just wanted
11:02 - to do a short recap of what's available
11:05 - and where you can find this information
11:07 - inside postman
11:14 - now let's say that we want to keep this
11:16 - request we already have configured here
11:19 - the api address and let's say you want
11:22 - to reuse it at a later point
11:24 - so what we can do here is click on the
11:27 - save button inside postman
11:30 - and we can also give this request a name
11:33 - for example we can call it api status
11:37 - and we cannot simply save this request
11:40 - as it is we'll see here that this save
11:42 - button is disabled we have to create a
11:44 - collection collection is essentially
11:48 - a list of multiple requests
11:50 - typically they are all connected to the
11:52 - same api so if you're working with
11:54 - multiple apis probably will have a
11:55 - collection for each individual api
11:58 - or sometimes even for the same api
12:00 - depending on the use cases so i'm going
12:02 - to go ahead here click on create
12:04 - collection
12:06 - and i'm going to call it simple book api
12:12 - click here on this check mark
12:14 - and now this request will be saved in
12:17 - this collection
12:20 - if i go ahead and close the tab
12:22 - will be able to find here
12:24 - in this part here of collections we'll
12:27 - see here the collection itself
12:30 - and if i click on one of the requests
12:32 - inside the collection the tab will
12:34 - automatically open up
12:36 - and i can run that request again
12:42 - typically in postman
12:43 - we try to avoid having addresses or
12:46 - configuration in our requests just in
12:49 - case something changes
12:50 - so i'm going to go ahead
12:52 - select this address here
12:54 - you will see here that postman offers
12:57 - this set as a variable so essentially we
13:00 - can replace this with a variable that we
13:02 - can configure in a single place so let
13:05 - me show you what i mean by that i'm
13:06 - going to click here on set as variable
13:10 - i'm going to select here set as a new
13:12 - variable
13:14 - i'm going to call it base url
13:18 - because this is the url where all our
13:21 - requests will go
13:22 - and we'll just use different endpoints
13:25 - the value that will be saved is
13:27 - available here
13:30 - and should not include the final slash
13:34 - we also have to select the scope now
13:37 - there are different scopes available in
13:38 - postman where we can save this variable
13:40 - i'm going to get into those a bit later
13:43 - for this example we're going to select
13:46 - the collection scope so essentially this
13:48 - variable will be saved in the collection
13:53 - and that's about it i can go ahead and
13:55 - save this request again
13:57 - and
13:58 - you will see here if i hover over this
14:00 - variable that has this very special
14:03 - syntax here with double curly braces in
14:06 - the beginning and two double curly
14:08 - braces at the end
14:10 - you'll also see the value that this has
14:15 - if you want to change this variable all
14:17 - we have to do is to hover over the
14:19 - collection name here these three dots
14:22 - will show up
14:24 - and select here edit
14:26 - and from the variables tab
14:28 - you'll be able to see here the base url
14:30 - variable
14:32 - just in case this set variable option
14:34 - doesn't appear when you select the
14:35 - address
14:36 - don't worry about it you can simply go
14:38 - ahead and manually add the variable here
14:43 - for any variables in postman you will
14:45 - notice the initial value
14:48 - and the current value
14:50 - the initial value is something that will
14:52 - be shared with other people
14:54 - for example if you share this collection
14:56 - with someone else someone in your
14:58 - organization a friend of yours or anyone
15:02 - they will be able to see the initial
15:04 - value and this is fine for this api
15:06 - because this is a public api
15:08 - the address is known so there's no
15:10 - secret there later on we'll be using
15:13 - some secrets and we may not want to
15:15 - share them with others
15:17 - and we're gonna keep them in the current
15:19 - value so you can keep in mind like the
15:21 - current value is what is being used in
15:23 - postman and this is private to you
15:27 - the initial value is something that is
15:29 - not being used when you're sending a
15:31 - request
15:33 - and will be shared with others
15:38 - so if you go ahead and run this request
15:39 - again we'll see that there's absolutely
15:41 - no difference so postman will replace
15:44 - this variable with the address
15:46 - and we'll send this request just as
15:48 - before it is just much nicer for us to
15:51 - have it all in one place
15:59 - all right let's go back to using this
16:02 - api
16:03 - so far the status endpoint hasn't been
16:05 - very exciting so let's take a look at
16:07 - the next endpoint and this is the slash
16:11 - books endpoint this will give us a list
16:14 - of books
16:18 - so in postman what we can do is to
16:21 - select the address that we already have
16:23 - here open up a new tab
16:26 - paste the address here
16:28 - because this request is not in a
16:30 - collection you will see here that a base
16:32 - url doesn't get resolved it would say
16:34 - here unresolved variable because the
16:36 - variable is only in the collection and
16:39 - this current request that we have here
16:41 - this tab is not saved in that collection
16:44 - so we're going to go ahead and click
16:45 - here on save
16:48 - the simple books api is already selected
16:50 - just in case you don't see it here or
16:51 - you have multiple collections to select
16:53 - from
16:54 - simply select the respective collection
16:57 - where you want to save the request
16:59 - and i'm going to call this
17:01 - list of books
17:05 - and we're gonna also change this
17:09 - to books
17:12 - so if you're looking here at the api
17:14 - you'll see that we need to submit a get
17:16 - request to the slash books endpoint
17:20 - so we have here get git is always by
17:23 - default
17:24 - we have here the base url slash books
17:28 - so let's go ahead and click that send
17:30 - button and see what happens
17:32 - again on the lower part of the screen
17:34 - we'll see the response
17:36 - what's important to notice here is that
17:38 - we get the status 200
17:40 - as that is 200 always indicates that a
17:43 - request was understood and that
17:45 - essentially everything was okay so when
17:47 - you see 200 okay this means that
17:49 - everything is fine and you will see here
17:51 - that we have a list of different books
17:54 - what you see here this way of formatting
17:57 - data this is called json
18:00 - and it is very easy to get this
18:03 - information that is essentially just a
18:05 - text
18:06 - and to parse it and use it in
18:08 - essentially any programming language out
18:10 - there so it makes this data very
18:13 - portable from one system to the other
18:18 - going back to the api documentation
18:20 - we'll also notice that there are some
18:23 - optional query parameters and this is
18:25 - what we wanted to take a look in this
18:27 - lecture
18:28 - so what are query parameters well query
18:31 - parameters are
18:34 - some additional data that we can submit
18:36 - with our request
18:37 - for some apis they are mandatory and for
18:41 - some apis they are optional
18:43 - in this case these query parameters are
18:46 - optional so let me give you an example
18:48 - we can add here in postman under query
18:51 - parameters you'll see here we have
18:53 - parents
18:54 - selected and right below that we have
18:57 - query params
18:58 - so we can write something like type
19:02 - and let's say we are searching for a
19:04 - chromebook
19:05 - so i'm going to write here the value
19:06 - crime
19:08 - you can notice as i type here the
19:11 - address itself has changed as well
19:15 - and you can notice in an address query
19:17 - parameters
19:19 - at a point where you see a question mark
19:22 - and after that you will see
19:24 - something like a key
19:26 - value pair so the key is type then we
19:29 - have the equal sign
19:31 - and then we have a value
19:33 - in this case i expect that this will
19:36 - help us filter through all these books
19:39 - and only get the books that are crime
19:42 - books
19:45 - now this time something
19:47 - different appears here
19:49 - you will see first of all that the
19:50 - status has turned from a status to 100
19:54 - into a status 400 bad request when you
19:58 - see a status 400 it generally means that
20:01 - you have done something wrong
20:03 - so the api has understood your request
20:06 - but whatever you have sent is not
20:08 - correct and most of the time you will
20:10 - see additional information in the
20:12 - response body
20:13 - it says here and it's very important
20:15 - that you read these errors
20:17 - sometimes they're a bit technical and
20:20 - maybe confusing in the beginning but you
20:22 - just have to
20:23 - bear with these errors and try to
20:25 - understand what's going on so here it
20:27 - will say
20:28 - invalid value for query parameter type
20:30 - the query parameter type is what we're
20:32 - trying to send here this type
20:35 - and it says here must be one of fiction
20:38 - or non-fiction so essentially the
20:40 - response is telling us hey you have sent
20:43 - here something that i didn't expect this
20:46 - is not valid we only accept fiction and
20:48 - non-fiction there is no crime type or
20:51 - something like that
20:52 - so if i select here fiction
20:56 - and replace
20:57 - crime with fiction you will see also the
21:00 - address here has changed
21:02 - then i will get back the list of only
21:06 - fiction books
21:07 - and you can even see here that
21:09 - everywhere it says fiction fiction there
21:12 - is no longer known fiction
21:15 - now these query parameters
21:17 - tend to be a bit confusing in the
21:18 - beginning because
21:20 - it seems quite arbitrary
21:22 - like why should they be called type or
21:25 - why does it work this way
21:27 - and the thing is there is no rule which
21:30 - query parameters are available can only
21:33 - be known by reading the api
21:35 - documentation
21:37 - we can add parameters for example i can
21:40 - invent the parameters like full and we
21:43 - give here the value bar and notice here
21:45 - how the address has changed
21:47 - now we have this end sign between the
21:49 - pairs so this is how you can send
21:51 - multiple query parameters pairs with
21:54 - your request
21:56 - but essentially nothing has changed so
21:59 - we can't send data to the api but it
22:01 - doesn't mean that the api will look for
22:03 - this data and will do anything to change
22:06 - it so this is why
22:08 - it's important to look into the api
22:09 - documentation here is documented they
22:12 - are optional so these are not required
22:14 - there are two optional query parameters
22:16 - one is type
22:18 - and one is the limit
22:21 - additionally with query parameters in
22:23 - postman what you can do is to simply
22:25 - click on this checkbox
22:27 - and if you unclick it you'll see that
22:30 - query parameter disappears from the
22:31 - address
22:37 - and if at one point you decide that you
22:39 - don't need that query parameter anymore
22:41 - you can simply hover over it and you
22:43 - should notice here this x
22:45 - you can click on it this will delete
22:47 - that query parameter
22:54 - okay time for an assignment
22:56 - now you have to go and study the api
22:59 - documentation
23:00 - and use the limit
23:03 - query parameter and add that to your
23:05 - request
23:06 - and i also encourage you to try out the
23:08 - different values
23:10 - i'm gonna give you a few moments to
23:11 - pause the video and to try this on your
23:14 - own
23:18 - okay so let me show you how i would
23:20 - solve this assignment
23:23 - first of all it's always important to go
23:24 - back to the documentation to understand
23:26 - what's going on
23:28 - it's also important that whenever you're
23:29 - using a query parameter that you use it
23:32 - exactly as it's being stated in the
23:34 - documentation what i like typically to
23:37 - do is to simply
23:39 - copy the name so that i don't enter
23:41 - anything that's wrong make any mistakes
23:44 - in spelling that specific parameter
23:47 - whatever that is
23:48 - we'll see here that it must be a number
23:50 - between 1 and 20. so let's try to
23:53 - understand what this does
23:55 - i'm going to simply paste it here so you
23:56 - can see it has been added it doesn't
23:59 - have any value yet
24:01 - and let's say i'm gonna
24:03 - write here limit two
24:05 - and what i expect this to do is to only
24:07 - give us two results back you will see
24:10 - here now we have four books that are
24:12 - coming back
24:14 - and now
24:15 - with limit two we only get two books
24:17 - back that's great
24:19 - now if i try something else like for
24:21 - example 25
24:23 - i'll get here a bad request now again
24:26 - we have sent something to the api and
24:29 - the api doesn't allow this so it says
24:32 - here you cannot get more than 20 books
24:34 - in one request for for example
24:36 - performance reason
24:38 - so we have to adapt this to something
24:39 - that is being accepted by the api so we
24:42 - can see back 2 has been
24:45 - i was saying earlier that it's so easy
24:47 - to write something different so for
24:49 - example if i write limit with a capital
24:52 - l
24:53 - i will not get back only two results
24:56 - there will be more results
24:58 - so essentially we can say that
25:00 - limit with a capital l and limit
25:03 - written all in lowercase there are two
25:05 - different query parameters and the api
25:08 - is only recognizing one of them and
25:10 - totally ignoring the other one it is
25:12 - like writing here
25:14 - foo
25:16 - and with the value 2 makes no difference
25:25 - let's continue exploring this api
25:27 - we now have a list of books but as you
25:29 - can see there's really a lot of
25:31 - information about each book
25:33 - and the reason for that is because this
25:35 - view here where we see a list of books
25:38 - is a simplified view
25:41 - if you take a look at the documentation
25:43 - here the next endpoint that we can use
25:45 - is to get a single book
25:47 - and this time the path will look a bit
25:49 - different
25:50 - so we're going to copy this path here
25:55 - open up a new tab
25:57 - paste it here
25:59 - and of course you also have to use the
26:01 - base url
26:03 - so the first step is simply saving it in
26:05 - the collection
26:07 - to get
26:08 - a single book this is how i'm going to
26:10 - call this
26:13 - and as soon as the request is inside a
26:15 - collection
26:16 - i can use the syntax with double curly
26:18 - braces so double curly braces
26:22 - and a variable that we're trying to use
26:24 - is base
26:25 - url
26:28 - and this has been detected
26:31 - you're probably wondering what is with
26:33 - this book id here in the address
26:37 - this is what we call a path parameter
26:41 - or a path variable because as the name
26:44 - variable implies it changes all the time
26:47 - this endpoint allows us to specify a
26:49 - value for this path variable
26:53 - which represents one of the books that
26:55 - we are trying to get additional
26:56 - information on
26:58 - we look back at a list of books you will
27:00 - see here that each book has an id you'll
27:03 - see here id 1 id 3 id 4 id 6 and so on
27:10 - so let's go ahead and
27:12 - edit here the path variable book id
27:15 - and put in the variable 1.
27:18 - and just a few seconds later
27:21 - we now have only one book that we're
27:24 - getting so this endpoint allows us to
27:26 - get a single book but we now get more
27:29 - detailed information we can see
27:31 - the id and the name we already knew that
27:33 - but we now see information about the
27:35 - author
27:36 - book code the price of the book how many
27:39 - books are in stock and so on so this is
27:41 - the purpose of this endpoint to give us
27:44 - detailed information instead of having
27:46 - here a list of books which contain
27:48 - really a lot a lot of information
27:50 - we can get a specific information
27:53 - from this specific api we just need to
27:55 - know the book id
27:57 - if we enter here a book id that doesn't
27:59 - exist for example
28:00 - 100 what you will get back is 404 not
28:04 - found
28:05 - you probably know 404 not found from
28:08 - browsing the internet
28:10 - when you end up at a page that doesn't
28:11 - exist anymore the same principle applies
28:14 - to apis in this case we're trying to get
28:16 - the book with id
28:17 - 100 and the api is telling us hey there
28:20 - is no book with id 100
28:23 - this will always be
28:25 - reflected also in the error itself
28:30 - what is interesting about the path
28:33 - variables is that they are different
28:35 - from the query parameters that we have
28:37 - used before
28:39 - first of all you will notice here there
28:40 - is no question mark
28:43 - apart from this
28:45 - this book id
28:47 - key this is not something that will be
28:49 - sent
28:50 - so to make it even more explicit
28:53 - this is what will be sent you will have
28:56 - the base url slash books slash one
28:59 - postman will replace that path parameter
29:02 - with the value
29:04 - we see it here in the editor just a bit
29:06 - nicer it's easier for us to see that
29:09 - and one here will be part of the path
29:13 - just as books is part of the path but
29:16 - books is always there books doesn't
29:17 - change but here we can have id1 we can
29:19 - have id2 we can have id4 and so on
29:23 - this is why we prefer the syntax where
29:25 - we specify here the book id
29:29 - how we call this we can call it book id
29:32 - we can simply call it id
29:34 - it doesn't really matter because as i
29:36 - mentioned the key itself compared to the
29:38 - query parameters will not be sent
29:42 - it's also possible to use both query
29:45 - parameters and path parameters there's
29:47 - nothing preventing you from adding a
29:49 - query parameter called full with a value
29:51 - bar
29:52 - but this is something that the api needs
29:54 - to accept
29:55 - as in the query parameters if you're
29:58 - just sending some random data the api
30:00 - will totally ignore it
30:02 - so let's remove this query parameter and
30:04 - save the request
30:11 - let's say we have identified the book
30:13 - that we want to order
30:16 - so what would be the next step
30:20 - again we have to jump back to
30:22 - documentation
30:23 - and to understand how to submit an order
30:26 - you can now see that the endpoint that
30:28 - we need to use is orders
30:30 - but this time also the http request
30:33 - method we're no longer getting data with
30:36 - post we are sending data
30:39 - so we need to create a post request with
30:41 - postman
30:44 - i'm gonna copy this endpoint
30:47 - and go through the same process once
30:49 - again
30:51 - if creating this request manually is too
30:53 - time consuming you can also go here to
30:56 - your collection to an existing request
30:59 - click on the three dots and click on
31:01 - duplicate
31:03 - we'll create a copy of that request
31:06 - where we already have this request being
31:08 - saved so all we have to do is to enter
31:10 - the new path and we can also change the
31:13 - name so for example here we're gonna
31:15 - name this request order book
31:19 - as you remember we cannot longer use a
31:22 - get request if we try get request
31:24 - this will not work we have to select a
31:27 - post request
31:28 - now as you remember with the post
31:29 - request
31:30 - we have to supply a body so if we go
31:33 - here to the body
31:35 - you will see that we don't have a body
31:37 - but we are anyway missing something for
31:39 - this so i'm going to simply click on
31:41 - send and see what happens
31:45 - of this time we're going to get a 401
31:48 - unauthorized
31:50 - and it says here in the error missing
31:53 - authorization header
31:55 - when working with apis some endpoints as
31:58 - for example status or this book's
32:01 - endpoints
32:02 - they were public and required no
32:05 - authentication essentially anyone can
32:07 - use them
32:09 - other endpoints for example this one
32:11 - where we're trying to
32:12 - essentially create something create an
32:15 - order
32:16 - they can be private and require
32:18 - authentication
32:20 - this is totally up to the api provider
32:22 - there is no hard rule telling you that
32:25 - you know for this case you need
32:26 - authentication for others you don't need
32:29 - for some apis they are totally public
32:31 - but especially if you're trying to
32:33 - create data
32:35 - most of the time you will have to deal
32:37 - with some sort of an application
32:40 - if you look here at the api it will also
32:42 - say here that it requires authentication
32:46 - so in order to figure out how to deal
32:48 - with this we have to look into the part
32:50 - of how to get this authentication
32:52 - working
32:54 - so if we scroll further down the page
32:57 - we'll see this part with api
32:59 - authentication
33:00 - it says here to submit or view an order
33:02 - you need to register your api client
33:05 - api client is in our case postman client
33:09 - server communication is what we're doing
33:11 - we are the client we are sending http
33:14 - messages to the server and the server is
33:16 - responding
33:18 - what essentially means is that we need
33:20 - to register ourselves with the api
33:22 - and it is a way for the api to identify
33:24 - who's sending this request and who's
33:27 - creating the data if there's any data
33:28 - that has been created
33:30 - there are many authentication methods
33:33 - when it comes to apis and it is
33:35 - impossible to go into all of them i just
33:38 - gonna explain to you a very typical use
33:41 - case that you may encounter essentially
33:43 - with any public api that you're trying
33:45 - to use
33:48 - the purpose of this registration is to
33:50 - obtain what is known as an access token
33:54 - nexus token is like a temporary password
33:57 - that you're getting
33:58 - and you can use that password with all
34:00 - your requests
34:02 - and in this way you're authenticating
34:04 - yourself don't worry if it doesn't make
34:06 - sense right now we'll get to it in a
34:08 - second
34:11 - so this time we need to submit another
34:12 - post request
34:14 - and this post request has to go to this
34:16 - endpoint api dash
34:18 - clients and it also needs to include
34:22 - the following json body
34:24 - and here's an example
34:27 - so again i'm gonna
34:29 - simply go ahead and save this order book
34:33 - i'm gonna duplicate it
34:35 - let's call it register api client
34:40 - and endpoint will be
34:43 - slash api clients
34:46 - you can add a final
34:48 - forward slash or not for most apis it
34:51 - will not make any difference
34:55 - as you recall we have to select here the
34:57 - post http request method because the
35:00 - post will allow us to submit a request
35:02 - body
35:03 - i'm gonna click here on body and instead
35:06 - of none which essentially means
35:08 - doesn't send any data with a request
35:11 - in order to submit a json request body
35:14 - we have to select here raw
35:17 - and from the drop down that you see here
35:19 - we're going to select json
35:24 - let's jump back to the api documentation
35:27 - and luckily here we also get an example
35:30 - in regards to how this request body
35:33 - should look like so i'm going to simply
35:35 - go ahead and copy this example here
35:39 - and i'm going to paste it here
35:42 - so essentially what we're sending here
35:44 - is we're giving ourselves a name and
35:46 - we're also specifying our email address
35:50 - it's very important that when you're
35:51 - submitting json to ensure that this json
35:54 - is valid
35:55 - for example
35:56 - if i don't put these values between
35:58 - double quotes
36:00 - or if i forget one of these double
36:02 - quotes here
36:03 - something red will show up essentially
36:05 - if you see something red when you're
36:06 - trying to submit json it's not a good
36:08 - sign and you should go ahead and fix it
36:11 - this case everything looks well so i'm
36:13 - gonna click on send
36:16 - this time we get a different status code
36:18 - and this one is 201 created
36:21 - two one created is pretty similar with
36:24 - 200 which means okay
36:26 - everything that starts with two
36:28 - something is typically a good sign means
36:31 - that everything was okay
36:33 - everything which starts with four
36:35 - indicates that there were something
36:36 - wrong with the recurs that we have
36:38 - submitted
36:39 - and if there's anything like 500 it
36:41 - typically indicates a server issue or
36:44 - some other problem
36:46 - so now we have submitted
36:48 - our name
36:50 - and our email
36:51 - and we got back an access token this is
36:53 - the password that we can use in the
36:56 - upcoming request
36:57 - so i'm going to simply double click on
36:59 - it
37:00 - copy it
37:02 - go to our collection
37:04 - click on edit
37:06 - open here the variables
37:09 - close this documentation here
37:11 - i'm gonna write here access
37:14 - token
37:16 - now the initial value is something that
37:18 - i don't want to provide just in case i'm
37:20 - sharing this with anyone this is my
37:22 - token i don't want to share with anyone
37:23 - else so i'm not adding it to the initial
37:26 - value
37:27 - current value is what is being used by
37:29 - postman inside this installation
37:35 - i want to make sure that this access
37:37 - token is saved because if i try to
37:39 - submit this request once again with the
37:41 - exact same data i'll get back the error
37:44 - api client already registered
37:46 - and you will see here that we get
37:48 - another status code 409 conflict so
37:52 - indicates that something went wrong
37:54 - essentially this api client has already
37:56 - been registered so make sure that you
37:58 - use another email address it doesn't
38:00 - have to be a real email address for this
38:02 - api
38:05 - now we have this token so we can close
38:07 - this request
38:09 - and let's go back to our post request
38:11 - now as you remember here it says missing
38:13 - authorization header
38:15 - so we have to go back to this header
38:18 - thing that we kind of avoided so far
38:23 - when working with apis
38:25 - you will not be provided with a form
38:27 - where you can add your username and
38:29 - password so we always need to somehow
38:31 - send this information with
38:33 - our request especially where
38:35 - authentication is necessary
38:38 - typically you will add this
38:40 - authentication information to the
38:42 - headers
38:43 - some apis allow you to add them as query
38:46 - parameters some of them allow you to add
38:49 - them in the body but it's quite common
38:51 - to add them to the headers
38:53 - now there are already a few headers here
38:55 - that postman has added for us and we can
38:57 - take a quick look at them
38:59 - essentially one of the most important
39:01 - ones is user agent which essentially
39:03 - identifies who's making the requests
39:06 - it's also telling like which kind of
39:09 - responses are accepted and so on and
39:12 - here we have to add this authorization
39:14 - header
39:15 - now we don't want to get too technical
39:17 - right now
39:19 - and postman is known for making things a
39:21 - bit easier for us
39:23 - there is this authorization tab here
39:26 - and if i click on it you will see here
39:28 - that we have different types of let's
39:31 - say authorization helper that we can use
39:34 - now i know the list is a bit long and i
39:37 - won't be able to get into each of them
39:39 - but essentially what we have here is a
39:42 - token so we're going to select the beer
39:44 - token
39:46 - and you'll see here a simple form where
39:48 - you can simply add your token now we
39:50 - don't want to add our token here we will
39:52 - use our variable so again using the
39:55 - syntax
39:56 - access token we're going to select it
39:58 - and you will see here it's available
40:01 - so double curly brace in the beginning
40:03 - then exactly the name of the variable as
40:05 - you had it
40:06 - and if this request is saved in the
40:09 - collection and you hover over it
40:11 - you should be able to see the value
40:15 - all right perfect now
40:17 - if we come back to the headers
40:19 - you will see here that postman has
40:21 - auto-generated
40:23 - one header that is called authorization
40:25 - exactly the header that we're missing
40:28 - and it has a value in a very specific
40:30 - way
40:31 - this beer token authorization must
40:34 - include the word beer then a space and
40:37 - then essentially the token
40:40 - so that's about it instead of manually
40:42 - doing this and we can definitely do that
40:44 - manually as well
40:46 - we can use this authorization helper in
40:47 - postman and postman will take care of it
40:50 - it's absolutely the same thing just
40:52 - wanted to show you like what's happening
40:53 - from a technical point of view
40:56 - all right
40:58 - let's hit this send button once again
41:00 - and see what's happening
41:02 - now this time we're not getting a 401
41:05 - we're still getting a 4 something we're
41:07 - getting 400 band requests
41:10 - and it's just telling us invalid or
41:12 - missing book id so we're trying to
41:14 - submit an order we haven't specified
41:16 - anything but we'll fix that a bit later
41:25 - all right so let's go back to submitting
41:27 - this order we wanted to order a book
41:30 - and we have to tell this api which book
41:32 - we want so if we go here to body
41:35 - and select for example raw
41:37 - and
41:38 - say something like we want book
41:41 - with id1
41:43 - and submit this request
41:45 - i'm afraid the api will not understand
41:47 - what we mean by this
41:49 - so again we have to look at the api
41:51 - documentation to try to understand
41:53 - how to do this
41:55 - how to submit this information how to
41:57 - specify what we want
42:01 - so in this case in order to submit an
42:02 - order you'll see here an example and
42:05 - again we have to submit a request body
42:08 - in a json format and include these
42:10 - properties and luckily again we have
42:13 - here an example that we can simply go
42:15 - ahead and copy
42:17 - so i'm gonna totally replace this
42:20 - with this json here
42:24 - and i wanted to take a moment to talk
42:26 - about json because i know a lot of
42:27 - people just getting started with json
42:30 - sometimes have issues
42:32 - and the most common issue is generating
42:34 - invalid json
42:37 - postman as i mentioned before
42:39 - tries to take care
42:41 - and help you off if you make any
42:43 - mistakes still it's kind of important to
42:45 - understand what json is
42:48 - now json is essentially just a key value
42:51 - way of sending data
42:53 - so for example here the key is book id
42:56 - and the value is 1
42:58 - and again we have a comma here
43:00 - separating this
43:02 - let's say
43:03 - values that we're sending key value
43:04 - pairs
43:05 - and the next key value pair is the
43:07 - customer name and it has the value john
43:11 - if we try to write something different
43:13 - instead of this column we are adding
43:15 - here an equal sign this is not valid so
43:18 - it has to match the syntax of what json
43:21 - is essentially from a specification
43:23 - point of view
43:24 - we have these quotes here so if you
43:26 - specify one of the keys without using
43:29 - the quotes
43:30 - this is again not valid json so we need
43:32 - to specify these quotes they also have
43:35 - to be double quotes they cannot be
43:36 - single
43:38 - quotes there's one exception to these
43:42 - quotes and you probably already see it
43:44 - here
43:45 - one
43:46 - is not between codes and you may be
43:48 - wondering why is that
43:51 - well
43:52 - the truth is we're using quotes when
43:55 - we're sending strings
43:56 - the reality is that we are sending a lot
43:58 - of strings for example john is a string
44:02 - if we have an address that's a string as
44:04 - well but
44:05 - one here is a number we can also have a
44:09 - boolean for example if we specify
44:11 - something like true
44:12 - or false that is also fine
44:15 - so there are a few exceptions and if we
44:17 - put for example one between
44:20 - two double quotes
44:23 - this would be valid json but this will
44:25 - no longer be
44:26 - technically speaking a number it will be
44:28 - a string
44:31 - all right so just keep in mind that you
44:33 - need to submit valid information to the
44:36 - api
44:37 - if you're submitting an invalid json
44:39 - well that api will not be able to
44:42 - understand what you mean and let me give
44:44 - an example i'm removing this comma here
44:47 - you will see here postman is trying to
44:48 - warn you you don't care about it
44:52 - still go ahead and you're getting
44:54 - something back like
44:56 - this is not processable
44:58 - i cannot work with this this is what the
45:00 - api is telling you
45:01 - so always pay attention make sure that
45:04 - you understand what postman is trying to
45:06 - tell you make sure that the json that
45:07 - you're sending is valid
45:15 - so welcome to the next assignment and in
45:17 - this assignment you have to create this
45:19 - post request which should be already
45:22 - done by now
45:23 - submit it and see what's happening
45:27 - additionally i want you to see and
45:29 - identify a book inside a collection of
45:31 - books
45:32 - that has a stock of zero so essentially
45:36 - it's not in stock and try ordering that
45:38 - book as well and see what's happening
45:41 - i'm gonna give you a few seconds to
45:42 - pause the video and to do the assignment
45:44 - on your own and i highly encourage you
45:46 - to practice this
45:51 - all right so let me show you how i would
45:53 - solve this assignment
45:55 - essentially we should have a valid json
45:58 - here so if we go ahead and hit the send
46:01 - button
46:03 - what we're getting back here is the
46:04 - status tool one created so we have
46:06 - successfully created this order
46:09 - it even says here and response created
46:11 - true and we're getting back an order
46:13 - right here that's totally fine so it
46:15 - means that we have submitted an order
46:17 - now and this order will be processed of
46:20 - course the order that we send here is
46:22 - very simple doesn't include an address
46:23 - phone number and so on so it's not 100
46:26 - realistic
46:27 - but the idea remains the same
46:31 - now what's happening if we're trying to
46:33 - submit an order for a book that is no
46:36 - longer available
46:37 - first of all how do we find this book
46:40 - well we have to go back to the list of
46:42 - books here
46:45 - and you can see here with the filters
46:47 - that we already have
46:49 - all of them are available i'm going to
46:51 - remove the full here
46:54 - and you will be able to see here that
46:55 - the book with id2
46:57 - says here available false
46:59 - so let's take a look inside that book to
47:01 - see what's happening so i'm gonna go to
47:03 - the get single book endpoint
47:06 - and specify a book id
47:08 - to
47:10 - and you will see here that the current
47:11 - stock is zero
47:14 - so i'm wondering what's gonna happen if
47:16 - we try to order this book
47:21 - and
47:21 - we're gonna get back a 404 not found i'm
47:25 - going to say this book is not in stock
47:27 - try again later so this is the
47:29 - assignment
47:35 - when we're trying to test apis and
47:38 - especially when we need to send data
47:40 - we have a tendency of reusing
47:42 - essentially the same data over and over
47:44 - again
47:45 - and most of the time this will prevent
47:48 - us from identifying issues with the api
47:50 - especially if we've been asked to test
47:52 - and ensure that that api will work
47:54 - properly
47:55 - this case there are not so many things
47:57 - that can go wrong we already tested
47:59 - what's happening with the book id that
48:01 - is in stock and another one that's not
48:03 - in stock you can also try and play out
48:05 - with different values
48:06 - but how about if we get some support
48:08 - from postman in trying out different
48:11 - values and for example here for the
48:13 - customer name how about you know
48:15 - generating a random customer name so
48:18 - that we don't send all the requests with
48:20 - john
48:21 - unfortunately there is a functionality
48:24 - hidden in postman that allows us to send
48:26 - random data with our request
48:29 - and that is a special kind of variable
48:32 - it's called a random variable so i'm
48:34 - gonna remove john here but make sure
48:37 - that i keep the double quotes because if
48:39 - we're trying to send a string without
48:41 - double quotes you know it it's not gonna
48:43 - be valid json
48:46 - so i'm gonna open here two double curly
48:48 - braces
48:49 - enter the dollar sign
48:51 - and as soon as i do this you will see
48:53 - here a huge list of variables that are
48:55 - available
48:56 - now i'm not gonna go through all of them
48:58 - i'm gonna write here random
49:00 - and let's say we want a random full name
49:05 - all right so let's click here on send
49:10 - and again we're gonna get the error that
49:11 - the book is not in stock so let's try a
49:14 - different one
49:16 - and now again a new request has been
49:19 - sent
49:21 - the problem now is we're sending
49:23 - something but we have no idea what we
49:25 - have sent
49:26 - fortunately postman has another neat
49:29 - functionality and that is the postman
49:31 - console
49:32 - it is a bit technical and a bit geeky
49:34 - but it is important to use it as one of
49:37 - the most important tools when you are
49:39 - using postman you can find a postman
49:41 - here right at the bottom of the screen
49:43 - should say console
49:46 - and it will open up inside postman
49:49 - typically you should already have like a
49:51 - long list of things here that we don't
49:53 - need at this point
49:54 - so what i'm going to do i'm going to
49:55 - click here on clear
49:58 - let's submit this request once again
50:01 - and now this time we'll see here the
50:02 - post request going out
50:04 - with a full address at the orders
50:07 - endpoint
50:08 - i can expand it by clicking here
50:12 - you will see here the request headers
50:14 - these are not interesting
50:16 - but also the request body so let's click
50:19 - here on the request body this will open
50:21 - up an additional window here inside the
50:23 - console
50:24 - and you will be able to see
50:26 - the request body that we have sent
50:29 - the postman console is particularly
50:31 - useful for debugging when something goes
50:33 - wrong when you don't understand what's
50:34 - going on
50:35 - always come back to the postman console
50:37 - and take a look at the request see what
50:39 - happened there you see here the book id
50:41 - is one this is the customer name that we
50:43 - have sent so this has been randomly
50:44 - generated by postman
50:47 - if you don't need it anymore
50:48 - the first x here is for closing the
50:51 - request body
50:52 - and the other one is for closing the
50:54 - console
50:56 - that's it
51:03 - i want to take a short break now from
51:04 - postman
51:06 - and so far in the course you have seen
51:08 - many ways on how to use postman
51:11 - but in this session i wanted to get a
51:13 - bit into how not to use postman
51:17 - so just to make clear you have seen that
51:19 - we have used postman to interact with
51:21 - apis
51:23 - postmate is not a tool for dealing with
51:26 - user interaction
51:27 - think about if you have a website with a
51:29 - form or buttons and you need a tool to
51:32 - click through those
51:33 - boozman is not a tool that deals with
51:35 - such things it's just working with apis
51:38 - postman is also not a tool for doing any
51:41 - performance testing or any kind of tests
51:44 - where you need to send a lot of requests
51:46 - in a very short time
51:48 - frame and also postman is not designed
51:52 - for security testing
51:54 - you can use it for security testing but
51:56 - this is not the primary focus of the
51:58 - tool there are many other tools out
52:00 - there
52:01 - which i think do a much better job at
52:03 - helping you test to see if an api is
52:06 - really secure
52:08 - so i hope this short lesson has helped
52:10 - you understand if postman is the right
52:12 - tool for what you're trying to do
52:20 - we have already submitted a few orders
52:22 - so maybe now it's time to take a look at
52:25 - how many orders we have
52:27 - in order to take a look at that again we
52:29 - have to look at the api documentation to
52:31 - see if there's anything that can help us
52:33 - in this regard
52:36 - see here right below submit an order
52:38 - there's also this get all orders
52:40 - endpoint which is essentially the same
52:43 - endpoint slash orders but this time we
52:46 - only have a get request we're not trying
52:48 - to create an order we're just getting an
52:50 - order we're getting essentially all the
52:52 - orders that we have
52:54 - so let's go back in postman and we're
52:56 - going to be lazy again and simply
52:59 - duplicate this request
53:02 - get
53:03 - all book orders will be the name of our
53:06 - request
53:07 - because we have duplicated this we also
53:10 - have the authorization header with us so
53:13 - this request again requires
53:15 - authorization
53:17 - and instead of post we're going to
53:19 - simply select get
53:24 - and luckily if looking here inside each
53:26 - order
53:27 - we'll see a list of all the orders that
53:29 - we have
53:30 - each order has an order id which you can
53:33 - see here it's no longer a number it's a
53:35 - string
53:36 - it says here which book we have ordered
53:38 - who's the customer name also the
53:40 - quantity and such information
53:43 - and these other orders
53:44 - have been created using this random full
53:47 - name functionality that we have found
53:49 - from postman
53:50 - and this has ensured that we can now
53:52 - have different names that we're sending
53:54 - so essentially these are all the orders
53:56 - that we have
54:02 - in this assignment i'm asking you to
54:04 - take one of these existing orders
54:06 - and to view it individually so instead
54:09 - of viewing all the orders
54:11 - take
54:12 - one order id
54:14 - and find out if there's an endpoint that
54:16 - allows you to view a single order id
54:20 - give you a few seconds to pause the
54:21 - video and after that i'll show you how
54:23 - to solve this
54:27 - all right
54:29 - so let's jump back into the api
54:30 - documentation and see what we can do
54:33 - you will see here we have an endpoint
54:35 - getting order
54:36 - and the structure of this endpoint is
54:39 - pretty similar to the one
54:40 - where we were trying to get an
54:42 - individual book
54:43 - so
54:44 - just gonna go ahead and copy this
54:47 - go back in postman duplicate one of the
54:50 - requests that we have
54:52 - and i'm gonna replace here orders with
54:54 - this endpoint make sure there are no
54:56 - spaces or anything like this because
54:58 - this will break and postman will send
55:01 - this request to the wrong endpoint
55:05 - gonna simply
55:07 - rename this
55:08 - to get an order
55:11 - and addition we need to specify this
55:13 - order id so if i'm just sending this as
55:16 - it is right now
55:17 - essentially postman will not send
55:19 - anything so we will send the request to
55:21 - the orders endpoint so you will see all
55:23 - the orders just in case you're wondering
55:25 - what happened there and if i type in
55:27 - some value that doesn't exist
55:30 - i will get back a 404 not found
55:33 - so i need to get a real order so the
55:36 - real order let's say would be this one
55:38 - for john
55:42 - i'm gonna paste here
55:44 - the order id exactly as it was in the
55:46 - other request and now we will see an
55:49 - individual order that you're getting
55:51 - here
55:53 - so that's it
56:00 - you know if i'm looking at this order
56:01 - right now
56:02 - i'm not really happy with the customer
56:04 - name john it's not the full name so how
56:07 - can we change this
56:09 - now if we go back and use the post
56:13 - request once again to order book will
56:16 - essentially create two orders
56:18 - so i was wondering if there's any way
56:20 - how we can update this and luckily there
56:23 - is
56:25 - so here the api documentation will
56:26 - notice this endpoint
56:29 - which says update an order
56:31 - and it will use the http request method
56:34 - patch
56:35 - to update this existing order and will
56:37 - require
56:38 - authentication
56:40 - and it only allows us to update the
56:42 - customer name depending on the api you
56:45 - could update the entire order itself or
56:47 - only some specific properties depends
56:50 - from api to api
56:51 - and again here we're gonna get an
56:53 - example on how to do this
56:55 - so
56:56 - let's try to update this order i'm going
56:58 - to simply copy here this customer name
57:04 - and
57:05 - essentially the structure is the same as
57:08 - the one with getting an order so for
57:10 - that reason i'm going to duplicate this
57:13 - rename it so that i can easily identify
57:15 - it
57:19 - and for some reason the parameter here
57:21 - got lost maybe i forgot to save it here
57:24 - before creating it absolutely no worries
57:29 - i can simply go ahead and
57:32 - copy this from here
57:37 - so we'll have the exact same request i'm
57:39 - gonna try it again with get
57:46 - i'm noticing that this is the order that
57:48 - we're trying to update
57:50 - so i'm gonna select here patch
57:53 - and patch is again one of these http
57:56 - methods that allows us to send a body
57:59 - so i'm going to click here on body i'm
58:01 - going to select raw
58:03 - and again we're sending json
58:06 - i'm going of paste it here
58:10 - so let's add here another value
58:13 - and we can even use this postman random
58:16 - variable here
58:18 - so let's say a random last name
58:21 - this would be a good one
58:24 - all right
58:25 - so let's save it let's run it again
58:28 - and we're not getting back anybody and
58:31 - this is totally fine
58:32 - because the status will be indicated
58:35 - through the http response status and
58:37 - this is 204 again 204 indicates that
58:40 - everything was okay
58:41 - so if we're trying to
58:43 - get that order again
58:47 - you will see here now the customer name
58:48 - is john anderson
58:50 - and we have managed to update the same
58:53 - order so the order id remain the same
58:55 - the book that we're ordering remained
58:57 - the same
58:58 - the only thing that changed is the
59:00 - customer name
59:07 - now let's assume that we already have
59:09 - too many orders here and that we're
59:11 - trying to you know delete some of them
59:15 - with patch itself we can just update
59:17 - information but we need a way now to
59:20 - delete this order let's say we already
59:22 - wanted to test something but we no
59:24 - longer need it
59:25 - so going back to the api documentation
59:28 - you can notice that there's also an
59:30 - endpoint for deleting an order
59:31 - essentially the path for all these
59:33 - operations from getting an order
59:35 - updating an order or deleting an order
59:38 - remained the same
59:40 - the only thing that changed was the http
59:43 - request method we had used get we had
59:45 - used patch we had used post to create an
59:49 - order
59:51 - and now we are using delete
59:54 - so delete doesn't require anybody
59:57 - we just have to specify in this case
59:59 - which one is the order id
60:02 - again what we're using here is just an
60:04 - example and it's always important that
60:06 - you study the api documentation of the
60:08 - api that you're trying to use
60:10 - just because
60:11 - a respective endpoint works in one way
60:14 - with one of the http methods for this
60:16 - api it doesn't mean that all apis work
60:19 - exactly the same
60:22 - so to update an order i'm going to
60:24 - simply go ahead here
60:26 - click here on duplicate
60:30 - i'm gonna call it delete order
60:33 - and i have to select the correct http
60:37 - method this one is delete
60:39 - the order id is already pre-filled here
60:42 - so all i have to do click on send
60:44 - i'm gonna get here 204 no content
60:48 - but if we're still unsure if this worked
60:51 - properly we can go back to get an order
60:54 - so if we're trying to get the same order
60:55 - that we have deleted
60:57 - you notice it's no longer here
60:59 - and especially if we try to look at all
61:00 - the orders that we have
61:03 - you will see now we have one order less
61:06 - so obviously the delete order worked
61:09 - properly
61:12 - let's save this as well
61:15 - and it will also show up correctly
61:18 - here in the collection
61:20 - you can notice that we already have
61:22 - quite a few tabs open
61:23 - so let's go ahead and close them
61:26 - so what you can do is simply
61:28 - close all tabs
61:31 - and if there are any unsafe changes
61:33 - you'll have the possibility of saving
61:35 - those changes
61:38 - if you have a lot of tabs and you don't
61:40 - need them anymore because they only
61:42 - contain temporary data
61:44 - you can simply click here on the three
61:46 - dots and select force close all tabs and
61:49 - you will not be asked
61:53 - welcome to the second part of the course
61:55 - where we start laying the foundations
61:58 - for automating the testing of this api
62:02 - as you have seen so far
62:03 - we started working with the api but
62:06 - there's still a lot of manual work
62:08 - involved
62:09 - if someone changes the api we have to
62:11 - retest everything manually and this is
62:14 - not very fun and also time consuming
62:17 - instead of verifying the api with our
62:19 - own eyes we want to let postman do this
62:22 - for us by writing api tests
62:25 - we also want to avoid any manual
62:27 - intervention like copy pasting data from
62:30 - one request to the other
62:33 - automation means that we let postman do
62:35 - the work and we only step in if
62:38 - something goes wrong
62:40 - by the end of the course you will know
62:42 - how to test this api with just one
62:45 - command or only one click this is the
62:48 - most exciting part of the course so
62:50 - let's get started
62:56 - alright so let's get started with
62:59 - writing api tests
63:01 - so far we have manually tested this api
63:04 - and we went through all these requests
63:07 - and essentially we created sort of like
63:09 - workflow we
63:10 - first of all checked if the api status
63:12 - is correct and we got a list of books we
63:15 - looked at a single book we ordered that
63:17 - book
63:18 - we took a look at all the orders we got
63:20 - an individual order
63:22 - we updated that order and then finally
63:24 - we deleted it and of course for some of
63:26 - these operations we also needed to
63:28 - register ourselves with this api
63:32 - the way we have looked at this
63:35 - is take for example this api status well
63:38 - essentially for postman as long as the
63:40 - request has been sent and something is
63:42 - coming back this has been a successful
63:45 - request response interaction postman has
63:48 - no idea unless we tell postman too
63:52 - if this was successful or not
63:54 - and we tell this by inspecting the
63:57 - response we typically are looking at the
63:59 - response we're not looking so much at
64:00 - requests because we already know the
64:02 - request
64:03 - look at the response and we're looking
64:04 - at for example the status code we think
64:06 - here 200 and we're looking here at the
64:09 - body and we're seeing status okay so
64:12 - instead of us
64:14 - manually looking at this information
64:16 - let's tell postman to do this for us
64:20 - and in order to do that we're gonna
64:22 - switch here to this part of the request
64:25 - where it says here tests
64:28 - and this is where we can write tests
64:31 - what you can write in this window here
64:33 - is programming code it's javascript if
64:36 - you want to be very specific about us
64:39 - luckily
64:40 - if you're not really into programming or
64:42 - you're just getting started with it
64:44 - don't worry i will try to make things as
64:47 - easy as it gets
64:49 - postman here has this window with this
64:52 - so-called code snippets
64:54 - they essentially allow you to quickly do
64:57 - a few things with javascript without
64:59 - writing a lot of code and especially for
65:01 - us as beginners right now that's totally
65:03 - fine
65:05 - the most simple test that we can write
65:09 - is to test that the status code is 200
65:12 - so if we scroll here the snippets
65:15 - you should be able to identify
65:17 - one of the snippets which says here
65:19 - status code code is
65:21 - and if you click on it this code will be
65:24 - generated
65:25 - now if for some reason these snippets
65:27 - have changed or you cannot find it
65:29 - anymore don't worry you simply can go
65:31 - ahead and type it as you see it here
65:34 - now this is a piece of code that will be
65:37 - executed when the response has arrived
65:40 - and postman will check if the status is
65:42 - 200
65:44 - and you can even see here
65:46 - from the assertion that we're writing
65:48 - here
65:49 - it's kind of like easy to understand it
65:51 - says here pm.response.2
65:54 - have status 200. so it's relatively easy
65:56 - to read
65:58 - so
65:59 - again you know what's happening here and
66:01 - also postman knows what's happening here
66:03 - so let's submit this
66:05 - and now if we were paying attention here
66:07 - in the test results
66:09 - it will say one from one and if you
66:11 - click on it
66:13 - you will see here a path mapping green
66:16 - says status is 200 whenever we are
66:18 - writing tests we always must ensure that
66:21 - it will also fail
66:23 - just in case we made any mistakes when
66:25 - typing this code here it's totally
66:27 - possible
66:28 - may break this test or may
66:30 - always show that it's working when it
66:33 - sometimes is not working
66:34 - so let's try and fail this test we can
66:36 - fail this test by entering here an
66:39 - address that doesn't exist so for
66:40 - example if i write here status foo
66:43 - and simulate
66:45 - that api will send me something else
66:47 - back
66:48 - i can get this test to fail and you will
66:51 - see here
66:52 - we expect the status code to be 200 but
66:55 - we're getting this assertion error
66:58 - expected response to have status 200 but
67:00 - got 404 as you see here 404
67:05 - i'm gonna fix it back but this was just
67:07 - a small test to indicate that
67:09 - what we have written here is working
67:11 - properly
67:13 - all right now if the status code is
67:16 - let's say good but not enough for our
67:18 - use case
67:19 - we may also want to take a look at the
67:21 - response body
67:23 - for most apis the response body will be
67:26 - written in json
67:28 - this is just a very simple way to send
67:30 - data from the api
67:32 - to postman or to any let's say
67:34 - programming language and to transform it
67:36 - and use it there
67:38 - essentially the data that is coming back
67:40 - is relatively easy to use and understand
67:42 - by other programming languages
67:44 - so let's try and write a test
67:46 - that will verify that the status
67:49 - is indeed okay
67:52 - now the first step that we need to do
67:54 - is to parse the response
67:57 - and
67:58 - people generally wonder when they hear
68:00 - about parsing
68:01 - is like
68:02 - why do we need to parse it
68:05 - and the reason for that is what you see
68:07 - here this is json but this is
68:09 - essentially just text
68:11 - it's not an object that we can use
68:14 - inside javascript
68:16 - so for that reason in javascript what
68:18 - we'll do is we're going to define a
68:20 - variable
68:22 - so const response
68:24 - will define a javascript variable
68:27 - and we're going to initialize it
68:29 - equal
68:30 - and this is something that comes from
68:32 - postman so i'm going to write
68:33 - pm.response
68:34 - this holds the response
68:37 - and we are going to call a function
68:39 - called json
68:42 - and a function call in javascript is
68:45 - always like this
68:47 - so
68:49 - inside this response variable in
68:50 - javascript we will now have the response
68:55 - which will be parsed from json into a
68:57 - javascript object
69:00 - if you want to take a look inside
69:02 - and see what is the value of response
69:05 - we can go back to our old friend the
69:07 - postman console
69:09 - by default the postman console will not
69:11 - record the values of different variables
69:14 - that are available unless instructed
69:17 - we can use for example console.log
69:20 - which is again a function
69:22 - and we'll specify in this function
69:25 - parameter
69:26 - and that parameter is the response
69:31 - so let's go ahead and open the console
69:33 - again
69:34 - i'm going to clear everything that you
69:36 - see inside here
69:39 - hit send one more time
69:44 - and you will see here the request that
69:47 - has been sent this is locked by default
69:50 - and then you will see here from our
69:52 - console.log statement
69:54 - you will see here this javascript object
69:57 - which has been created from parsing the
70:00 - json response
70:03 - the way this is represented looks pretty
70:05 - similar to json but it is not json it is
70:08 - a javascript object
70:11 - all right now let's say we're trying to
70:12 - get to this
70:14 - okay here
70:16 - and
70:17 - we have here an object that has a
70:19 - property called status
70:21 - now in javascript there are two ways on
70:24 - how we can get to that property
70:27 - we can write response that status
70:32 - and we can log that information and
70:34 - you'll see here now it says okay
70:36 - or the alternative
70:39 - is to write this status between the
70:42 - square brackets as a string
70:45 - and this is sometimes needed
70:47 - when dealing with names that contain
70:50 - let's say a hypen or some other special
70:53 - characters maybe a space or something
70:55 - like that
70:56 - that will break the syntax so this is
70:58 - another way to use it but most commonly
71:00 - i would see it in this way
71:02 - both of them were got back with okay
71:06 - now we have accomplished a very
71:08 - important thing
71:10 - and that is getting to the data that we
71:13 - are trying to test
71:15 - if we cannot read it if we don't have it
71:18 - in our console after using it with
71:19 - console log
71:21 - there's no point in writing a test yet
71:24 - so especially if you're a little bit
71:26 - confused about json and javascript and
71:29 - parsing and everything
71:30 - make sure first that you see what you're
71:32 - trying to test inside console.log
71:36 - all right so now we already have it
71:38 - there we know that it exists so let's
71:40 - write another test
71:43 - a test in postman always starts with
71:45 - pm.test
71:48 - and pm.test
71:50 - is a function that takes two parameters
71:53 - so you can see here pm.test this is a
71:55 - function
71:56 - the first parameter
71:58 - will be the name of the test
72:00 - so let's say here status
72:03 - should be okay it's totally up to you
72:06 - what to write inside here
72:08 - and the second parameter
72:10 - this is a bit more tricky we have to
72:12 - specify the second parameter after a
72:14 - comma
72:16 - and this will be a so-called callback
72:18 - function
72:19 - and
72:21 - this has a syntax like this one
72:24 - or it can start like function this one
72:27 - these two syntaxes are compatible with
72:29 - one another
72:30 - this one here is a bit more modern
72:33 - now i'm gonna hit here enter
72:36 - and this is where we can start writing
72:38 - our assertions by default if we leave
72:40 - this test empty it will not do anything
72:44 - it doesn't really matter what we have
72:45 - here for a name it will show it here as
72:47 - past even though we have no assertions
72:50 - now we're gonna start with something
72:52 - very simple
72:53 - and
72:54 - what we're gonna do here is write
72:56 - something like pm.expect
73:00 - and we can expect for example one
73:04 - dot
73:04 - 2
73:06 - eql to equal
73:08 - 1.
73:10 - you have to be very careful when you're
73:11 - writing the syntax
73:12 - and it has to look exactly like i have
73:15 - it here
73:17 - let's hit send again
73:19 - if i'm seeing expected 1 to equal 2
73:23 - we expect this to fail it will say here
73:26 - assertion error expected 1 to deeply
73:29 - equal 2. don't worry about this deeply
73:31 - equal
73:32 - essentially it's failing and it's
73:33 - telling that one doesn't be equal to
73:36 - all right
73:37 - now how can we
73:39 - make this assertion that status is okay
73:42 - we already know that this object here
73:45 - with this property
73:47 - contains okay so let's check if it
73:49 - contains okay
73:50 - so instead of this expect hardcoded
73:52 - value one
73:54 - gonna paste it here
73:56 - and here between double quotes
73:58 - i'm gonna write okay
74:01 - so let's send it again
74:03 - we'll see that it passes
74:05 - and if i write something else for
74:07 - example not okay
74:10 - it will fail and i will say expected
74:12 - okay to deeply equal not okay
74:17 - so this is an additional test that we
74:18 - have written on top of checking that the
74:21 - status is 200
74:22 - if for some reason where again let's
74:25 - call here the full status slash for
74:27 - endpoint that doesn't exist
74:30 - we expect some things to happen so first
74:32 - of all
74:34 - we'll get here 404 not found
74:36 - but also here this entire code that we
74:39 - have here will also fail because we're
74:41 - no longer getting json
74:43 - this is not possible so it will fail all
74:45 - together
74:47 - but this is just a very simple way on
74:49 - how you can ensure that this simple
74:51 - endpoint is working properly
74:58 - it is now time for another assignment
75:01 - based on what you have learned in the
75:03 - previous lesson
75:05 - i want you to write a status code test
75:08 - for all the requests
75:10 - inside the collection
75:12 - and i also want you to make sure that
75:14 - those tests will fail if needed
75:18 - i'm going to give you a few seconds to
75:19 - pause this video
75:20 - and after that i will show you how i
75:22 - will create this
75:27 - all right
75:28 - so there's nothing preventing us from
75:30 - getting started with what we already
75:32 - have i'm just going to change here be
75:34 - the syntax make it a bit more modern
75:37 - but as i mentioned before this is
75:39 - absolutely equivalent and shouldn't make
75:42 - any difference
75:43 - i'm going to copy this and let's take it
75:45 - here to the list of books
75:47 - click here on tests kind of paste it
75:51 - and again
75:53 - the status that i'm getting is 200 i'm
75:55 - seeing here the test results are working
75:57 - if i'm trying something else
75:59 - let's say books
76:03 - it will fail with a 404 so this is
76:06 - perfectly fine
76:08 - getting a single book
76:10 - again pasting absolutely the same test
76:13 - and i will be absolutely sure that this
76:16 - will fail as well
76:18 - okay order book now this is interesting
76:23 - let's see what happens if we simply
76:25 - paste this test here
76:27 - and you'll see here that the status that
76:28 - we're getting is 201 created that the
76:31 - test will fail
76:34 - we can adapt this here
76:36 - to check for the status 201
76:38 - and also make sense to adapt the test
76:40 - name this is of course not necessary
76:43 - but it's just a good thing to keep it
76:45 - consistent
76:47 - all right so this one is now passing as
76:49 - well
76:52 - these other ones are absolutely the same
76:55 - and i'm not going to waste a lot of time
76:57 - making sure that they work
76:59 - as they will always return here 200
77:03 - right
77:04 - this is another interesting one
77:06 - trying to here to get an order
77:08 - and that order doesn't exist anymore so
77:10 - we're getting 404 not found and also our
77:14 - test is failing so this is a good thing
77:16 - that this has happened
77:18 - we can look back here at the order book
77:21 - result
77:23 - we can get one of this order ids
77:27 - put it here in the parameters
77:31 - and running here the test
77:34 - we'll see that the status is 200
77:36 - so this has worked
77:38 - we have to do the same for the next one
77:41 - where we are patching it
77:45 - so if i'm switching between too many
77:47 - tabs here i'm now inside a patch request
77:51 - pasting the test
77:54 - i should have gotten a 204
77:57 - and i'm expecting for 200 so i'm going
77:59 - to change here 200 in 204
78:04 - and now this one is passing as well
78:07 - deleting an order is pretty similar i'm
78:10 - gonna first let it fail
78:13 - i'm getting here 404 not found
78:16 - i should also get a 204
78:22 - getting now the right
78:24 - order id
78:26 - and putting it
78:28 - inside a parameter
78:33 - okay another test that is passing
78:36 - and also this with the registration of
78:38 - the api client
78:42 - i have to identify the right test
78:45 - and i'm going to paste it here as well
78:48 - if i recall correctly because we are
78:50 - creating something
78:51 - we expect here to get to a one
78:55 - obviously
78:57 - for saying the same data again this will
78:58 - not work but now we have a simple test
79:03 - that
79:04 - tests that each individual requests in
79:06 - this collection returns back the status
79:09 - code and as you have already seen this
79:11 - is already a pretty important test this
79:13 - already gives us a pretty good idea if
79:15 - that request was successful or not
79:24 - as you have noticed in the previous
79:25 - assignment
79:27 - one thing is particularly annoying and
79:29 - that is copy pasting this order id
79:32 - from one request to the other
79:35 - essentially we start here after we have
79:38 - this order book we're getting an order
79:39 - id
79:40 - and after that we want to go through all
79:42 - the other requests we have to paste it
79:44 - over and over again
79:45 - and to be honest we don't like that very
79:48 - much
79:50 - now i mentioned in the beginning
79:52 - of the course that postman has different
79:54 - variable scopes
79:55 - and essentially those variable scopes
79:58 - are collection variables that you have
80:00 - seen so far there are also global
80:03 - variables which is a
80:05 - variable type that is available inside
80:07 - the entire workspace for all collections
80:10 - not just for a specific collection
80:12 - or there are also environments
80:15 - environments they are useful if you have
80:17 - different environments so for example if
80:19 - you're developing software and you have
80:22 - a local development environment local
80:24 - host
80:25 - you have a testing development
80:27 - environment
80:28 - and you have a production development
80:30 - environment
80:31 - then you can define multiple
80:32 - environments and you can easily switch
80:35 - within them and having here for example
80:37 - the base url you can easily swap that
80:39 - with testing environment or production
80:41 - environment or localhost
80:44 - getting a bit of topic right now in
80:46 - terms of this
80:47 - the problem that we're trying to solve
80:49 - is to
80:50 - use a postman variable to store this
80:52 - order id
80:55 - so what i'm going to do here is i'm
80:56 - going to copy the value
80:59 - and i'm going to click here on this
81:01 - eye icon right here in the corner
81:05 - and what we're going to do here is to
81:06 - define a global variable
81:09 - just as well we could have defined
81:11 - this inside our collection as a
81:14 - collection variable
81:16 - but to be honest
81:17 - this is sort of like a transactional
81:19 - data we don't really want to save it
81:21 - inside the collection we can just you
81:23 - know throw it in these global variables
81:26 - and not worry so much about it
81:29 - so we're going to click here on this
81:30 - edit
81:32 - i'm going to define here the variable
81:35 - key which is order
81:37 - id of course you can call it as you wish
81:41 - i don't really care about the initial
81:42 - value
81:44 - i just gonna paste here the current
81:46 - value
81:47 - the current value is now this one
81:52 - now next time when we create this
81:55 - request
81:56 - we can take this order id
82:00 - again if you lost it here you can simply
82:02 - click here on this eye
82:04 - you'll see here the values and you can
82:05 - even click here on the current value and
82:09 - easily change it
82:10 - make sure you don't add any spaces or
82:12 - new lines where you're pasting data
82:15 - so now
82:17 - at the next request the
82:19 - get all book orders there's nothing that
82:21 - we need to change but then when we have
82:23 - here get an order
82:25 - instead of manually specifying this
82:27 - parameter here
82:28 - i'm gonna use here double curly braces
82:32 - order id
82:35 - you'll notice that this is the order id
82:37 - that we have just saved
82:39 - so i will even copy this variable here
82:43 - go to the next request replace this as
82:46 - well
82:47 - go to the delete order
82:49 - replace this here as well
82:52 - so
82:53 - next time when we're clicking here on
82:56 - orders
82:58 - let's see it's gonna happen so we're
82:59 - gonna get a new value
83:01 - let's get here a new value
83:04 - again click on the environment
83:06 - replace it here
83:09 - if i'm trying to get an order
83:12 - i will see that order
83:14 - and it should be exactly the same so we
83:16 - can
83:17 - cross check what we have here for a
83:19 - variable to what we're getting back in
83:21 - the response
83:23 - i can update that order
83:27 - i can go back and look at the updated
83:29 - information
83:32 - and of course i can go ahead and delete
83:34 - that order
83:36 - and if i'm trying to get it again
83:39 - it will not be there anymore
83:42 - and as you have noticed
83:45 - the postman tests have been executed in
83:47 - the background
83:49 - and they already give us an idea if
83:51 - everything went okay or not so we don't
83:54 - even have to look at response body or
83:55 - anything like that in this case we went
83:57 - outside of what was expected in terms of
83:59 - the flow
84:00 - but the rest of the tests were useful
84:03 - and now we have managed to
84:06 - reduce a bit the amount of manual labor
84:09 - that we have to do in order to test this
84:11 - out
84:17 - if we look back at the collection
84:19 - we'll notice that we still have a few
84:21 - requests that contain some let's say
84:24 - hard-coded data
84:26 - and it all starts with this list of
84:28 - books where we have looked at some of
84:31 - these books
84:32 - we have identified a book id
84:35 - and we have used that book id in some of
84:37 - the upcoming requests for example
84:40 - get a single book
84:41 - we have here an id that is hard coded
84:45 - and of course
84:47 - then the next request with ordering the
84:49 - book we have again the id here
84:51 - so this kind of like hard coded data
84:54 - makes our tests and our entire
84:57 - collection
84:58 - a bit susceptible to changes for example
85:01 - if that book is being removed
85:03 - and having like this hardcoded value
85:05 - there will not do us any good
85:08 - so for that reason we have to find a way
85:11 - to make everything a bit more dynamic
85:14 - so looking at this list of books
85:17 - let's say for example we want to get the
85:19 - first non-fiction book that we can find
85:22 - here
85:23 - so as you already remember essentially
85:26 - we can add here a filter so we can add
85:29 - here the
85:30 - filter
85:32 - type and say we're looking for a
85:34 - non-fiction book
85:36 - so we can change that here
85:40 - and we're sending this again
85:42 - we'll only get non-fiction books
85:45 - so let's try again to set this to a
85:49 - variable and see what happens
85:52 - the question is like how can we get this
85:54 - information
85:56 - previously we have manually set this
85:58 - variable but we still we want to avoid
86:01 - getting this we want to
86:03 - set this variable automatically and this
86:06 - is totally possible so let's go here to
86:09 - the scripting part where we have the
86:11 - tests and we also have here the response
86:14 - so
86:15 - let's imagine that we want to get to
86:17 - this id here id 2.
86:21 - first of all we're going to define a new
86:24 - variable called response
86:27 - and we're going to do the parsing
86:32 - opm.response.json will parse the
86:35 - json into a javascript object
86:41 - open up again the console
86:44 - send the request
86:46 - and we'll see here the data that we have
86:51 - this data format
86:53 - is different than what we had before
86:55 - because it is a list of books or
86:58 - how is it called in javascript it's an
87:00 - array now recontains multiple objects so
87:04 - this book i with id2 this is an object
87:08 - then there is the next object with the
87:10 - other book with id5
87:14 - if we try inside the console log
87:17 - to do something like response.id
87:23 - you'll see here that it says undefined
87:26 - and the reason for that
87:28 - is because we first
87:30 - have this array so we need
87:32 - to get that data from the array first
87:35 - and then we have an object where we can
87:37 - call the property id
87:39 - [Music]
87:40 - the array that we have has keys
87:44 - essentially
87:45 - a way that allows us to access that
87:48 - information for example if i write here
87:50 - a square bracket
87:51 - and i say zero
87:54 - this will get us the first element from
87:56 - the array
87:58 - computer science we always count from
88:00 - zero so this is why the first element
88:02 - has the key zero
88:04 - let me demonstrate this
88:06 - you will see here we get this two
88:09 - now
88:10 - the problem here is that this first book
88:13 - is not available
88:15 - so
88:16 - what we have to do is to get the second
88:18 - book on the second book
88:20 - we'll have the key one
88:23 - trying to get that
88:25 - and we'll get id number five here
88:27 - that's all good
88:29 - the problem is if this data set changes
88:33 - or for example the first one will become
88:36 - available or the second one will become
88:38 - unavailable
88:40 - having this hard-coded data here
88:42 - will kind of like cause us some issues
88:46 - for example
88:47 - even if something changes in the
88:49 - parameters we're no longer setting this
88:51 - non-fiction
88:52 - filter here
88:54 - the id that we can get if we keep it
88:56 - hard coding like this
88:58 - will be different all the time
89:00 - and we don't want this this will be too
89:03 - risky
89:04 - so we have to look into a different way
89:06 - of handling this
89:11 - because this is an array we can use
89:14 - a specific function than this array has
89:17 - so we can define here a new constant
89:19 - let's call it for example
89:22 - none non-fiction
89:25 - books
89:27 - and we can get a response
89:31 - i'm going to use the method filter
89:35 - and inside here we can define a
89:37 - condition
89:38 - now the condition that we're going to
89:40 - define here is
89:42 - inside another function
89:46 - where we will receive a parameter
89:49 - book
89:52 - and then with this book we can define a
89:54 - condition so for example book
89:57 - dot available
90:01 - and we can decide
90:03 - here
90:05 - if available should be true
90:08 - from the two books that we have here we
90:10 - can notice that the first one is not
90:11 - available
90:13 - but the second one will be available and
90:15 - let's just assume all the time we'll
90:17 - know that we'll get one of these books
90:20 - so now what we can do
90:22 - is from this non-fiction books
90:27 - we can get the first element that we get
90:30 - because we will know that this will be
90:32 - available
90:33 - filter
90:34 - will throw out
90:36 - any books
90:38 - that are not available and will only
90:40 - give us the books that are available
90:42 - and then by specifying nonfiction books
90:45 - 0
90:47 - we'll essentially get the first book
90:48 - that is available and that is a
90:50 - non-fiction book
90:53 - and you will see it here being locked
90:56 - in this way you have managed to get to
90:58 - this property that is really hidden
91:01 - inside the response
91:03 - without actually having to write
91:04 - something hard-coded with the only
91:06 - assumption that all the time we should
91:08 - find at least one non-fiction book that
91:10 - is available
91:12 - for most apis this is a assumption
91:14 - that's quite valid the criteria that you
91:17 - use here totally depends up to you you
91:19 - can search for a specific name or by any
91:22 - other characteristic
91:24 - if you find yourself in a situation
91:26 - where you need to filter a list of
91:28 - different objects and extract only one
91:33 - now so far this hasn't helped us a lot
91:36 - so what we want to do next is to also
91:39 - actually set that variable
91:42 - luckily postman
91:44 - has another code snippet that we can use
91:47 - and the code snippet is called set a
91:50 - global variable so i'm going to click on
91:52 - it
91:53 - will
91:54 - be generated here
91:56 - and all we have to do here is to specify
91:59 - the following
92:01 - we'll specify here the book
92:03 - id this is the name of the variable you
92:06 - can call it as you wish
92:08 - and then we also have to specify the
92:10 - value and when you're specifying the
92:12 - value
92:13 - you want to make sure that you're not
92:15 - putting anything between codes because
92:17 - this will be a string but since we have
92:20 - here a javascript
92:22 - object
92:23 - we will be putting that
92:25 - now of course we don't want to have the
92:27 - object itself
92:29 - we
92:30 - want to get only a property of that
92:31 - object so i'm going to write here that
92:33 - id
92:35 - so we're getting this object
92:37 - and we know that the property id is 5.
92:41 - after sending this you can click on this
92:44 - i icon here
92:46 - and you will see pretty similar to the
92:47 - other variable that we have manually set
92:50 - that now book id
92:52 - has value 5. so it means that now
92:56 - we can get an updated book id with
92:59 - our requests and we don't have to do
93:01 - anything else
93:04 - now just in case
93:06 - something does happen
93:08 - and
93:09 - no book is being found
93:12 - it kind of makes sense to
93:15 - test so just in case we don't have any
93:17 - books there is a postman test that will
93:20 - let us know hey we couldn't find any
93:22 - non-fiction books
93:24 - and in this case we're not gonna be
93:26 - directly asserting the response but kind
93:29 - of like indirectly through this filter
93:31 - that we have
93:32 - so let me show you what i mean by that
93:36 - let's go ahead and write a new test
93:37 - pm.test
93:40 - and let's say here book
93:42 - found
93:43 - this is the name of the test
93:46 - this will be the callback
93:48 - function and inside let's try to write
93:52 - an assertion
93:54 - instead of logging this i'm going to
93:56 - define a variable called book
94:02 - and i'm going to write a few
94:03 - expectations
94:05 - so i'm going to use pm.expect
94:07 - i'm going to expect book
94:11 - to be
94:12 - an
94:14 - object
94:16 - so first of all we expecting
94:19 - that book is an object
94:23 - and additionally we can write
94:25 - other assertions for example bm.expect
94:30 - book
94:30 - that available
94:34 - to be
94:35 - true
94:38 - and this is
94:40 - absolutely the same as writing pm.expect
94:42 - book available to equal
94:46 - true it's just a different way of
94:48 - writing it
94:52 - so again this just ensures that
94:54 - everything is as we expect it to be
95:00 - what we're setting here instead of using
95:01 - this we can use this book.id
95:07 - and we can also try to make this fail
95:09 - now it may fail in a different way we
95:12 - can write here for example instead of
95:14 - equals true
95:16 - we can set a filter that will never
95:18 - exist
95:19 - and we're gonna get here
95:21 - actually first of all a type error
95:23 - because we're trying to get property id
95:27 - of something that's undefined
95:30 - essentially postman will anyway warn us
95:32 - that something didn't went well
95:36 - but this additional test that we can
95:38 - write a just good
95:40 - place to ensure that we document how the
95:42 - api should behave and we document what
95:45 - we expect to get back
95:48 - so i'm going to fix this
95:50 - and let everything run properly
95:54 - so for example just to ensure
95:56 - that everything works properly we can
95:58 - also surround this by something like
96:03 - let's say
96:04 - if
96:06 - book
96:09 - only then we're setting this global
96:11 - variable
96:12 - so let's make this fail again
96:16 - and then
96:18 - we'll see here that we don't get this
96:20 - error anymore from javascript
96:22 - which says here book found
96:25 - has failed so it hasn't found a book and
96:27 - then we're making the expectation
96:30 - undefined to be an object
96:32 - so this is a way to get around that
96:33 - javascript error that you have seen
96:35 - previously
96:36 - but apart from that
96:38 - this is how
96:40 - we ensure that what we have written here
96:42 - in terms of javascript
96:44 - is being properly handled just in case
96:46 - something unexpected happens
96:54 - and now it's time for another short
96:57 - assignment for you
96:58 - we have identified here a book and we
97:01 - have seen that it is available
97:03 - i wanted to give you the opportunity to
97:05 - write an expectation on your own
97:08 - and i want you to expect that this book
97:10 - is from the type non-fiction even if we
97:13 - have used this parameter here and we
97:16 - specify that is non-fiction
97:18 - just wanted to test it again and also
97:21 - try to make it fail
97:22 - i'll give you a few seconds to pause the
97:24 - video and to do the assignment on your
97:26 - own
97:27 - and after that i will show you how i
97:29 - would solve it
97:32 - all right this is pretty easy i'm going
97:34 - to simply duplicate the last expectation
97:37 - that we have here because from the
97:38 - structure is already the way it should
97:40 - be
97:41 - and i'm going to
97:43 - change here property from available to
97:45 - type
97:47 - and the type that we're interested in is
97:50 - non-fiction
97:54 - so let's fix this error here from above
97:58 - in true
98:02 - and we have tests that are passing
98:05 - let's disable the type
98:09 - and maybe we can even
98:11 - change it to fiction but essentially the
98:13 - first available book that we found was a
98:16 - fiction book so for that reason the test
98:19 - is failing
98:20 - so now we have ensured that whatever
98:22 - we're getting back
98:24 - is indeed a non-fiction book because
98:26 - this was the original requirement
98:32 - and after one assignment
98:34 - what is better than doing another
98:36 - assignment because practice really
98:38 - matters
98:39 - now
98:40 - this assignment will have two points the
98:42 - first of it
98:44 - is i want you to use this variable book
98:46 - id that we have saved here
98:49 - and you've seen that it has been
98:51 - properly saved as a global variable i
98:54 - wanted to use it
98:55 - in a get single book and also in order
98:59 - book this is in the request body
99:02 - and this is here as a parameter
99:06 - since you're already looking at a get
99:08 - single book request
99:10 - how about checking again
99:12 - if inside here so let's write for
99:15 - example five
99:17 - i'd like to check that the current stock
99:21 - is actually greater than zero
99:24 - and i'm going to give you
99:26 - a small hint on how to do this
99:29 - so i'm going to go ahead here just
99:30 - simply copy the structure
99:32 - of the test here
99:36 - let's say
99:37 - we're going to write is in stock so this
99:40 - would be the name of the test
99:43 - and the expectation would be pm.expect
99:46 - one
99:48 - two be above
99:51 - two
99:52 - a very simple expectation here that will
99:54 - help you out
99:56 - when asserting that the current stock
99:59 - is greater than zero
100:02 - and you will see here that one is not
100:04 - above two so it's not
100:06 - working i'll give you a few seconds to
100:09 - pause this
100:10 - and after that i will continue solving
100:13 - the assignment
100:17 - all right
100:18 - so the first part of the assignment is
100:20 - super super easy
100:21 - we only have to replace here any
100:23 - hard-coded values with what we have here
100:26 - book id
100:27 - as a global variable and you can see
100:29 - it's being rendered
100:32 - and we also have this order book and
100:36 - inside here is again super simple
100:40 - you only have to get that right
100:43 - and we can test if it's working properly
100:45 - we're getting no errors so all good
100:48 - there
100:50 - going back to the test that we wanted to
100:52 - check here
100:54 - the property that we want to use is this
100:56 - current stock
101:00 - so as you recall
101:02 - first of all we have to parse the
101:04 - response so we define a variable called
101:06 - response and we're using
101:07 - pm.response.json
101:15 - we're parsing that
101:18 - and
101:19 - what we can do here is to expect that
101:22 - response
101:27 - that current stock
101:30 - to be above zero
101:33 - super simple
101:35 - the problem that you're getting here
101:38 - is
101:38 - you're gonna get this weird error it
101:40 - says stock is not defined
101:43 - and you'll probably not understand what
101:46 - is this referring to
101:47 - the problem is this dot syntax this dot
101:50 - notation
101:52 - when getting properties from an object
101:54 - works with this kind of like simple
101:56 - properties that are one word
101:59 - when you have this
102:01 - dash here this hyphen here
102:03 - this would kind of like break the syntax
102:05 - and you have to fall back to the other
102:07 - syntax with square brackets so we adding
102:10 - here this square bracket we are putting
102:12 - it
102:13 - the name of the property as a string
102:15 - here can be single quotes or double
102:17 - quotes
102:18 - use as you wish
102:20 - and
102:21 - that will get us the right property and
102:23 - we'll see here now it is in stock
102:26 - we're trying to get something that's not
102:27 - in stock for example book id
102:31 - 2 i think it was not in stock
102:34 - we'll have here failing test
102:36 - expected 0 to be above 0 so that's not
102:38 - working
102:40 - but with our book id here
102:43 - it's working properly
102:48 - all right so this was the assignment
102:55 - now it seems that we have all elements
102:58 - that can help us do proper test
103:01 - automation
103:02 - we have written api tests that ensure
103:05 - the api response as we expect the api to
103:08 - respond and generally how we expect the
103:11 - api to work
103:12 - and we also have added all these
103:14 - variables
103:15 - and essentially we don't have to copy
103:17 - paste anything anymore from one request
103:20 - to the next one
103:22 - the next step is to move into the
103:23 - direction of automation
103:25 - we want to take this request and instead
103:28 - of going request by request from one
103:31 - request to the other and running this
103:33 - manually
103:35 - we will use a built-in tool from postman
103:38 - this is the collection runner and the
103:39 - collection runner allows us to execute
103:42 - the entire collection with just one
103:44 - click
103:45 - so let's see how this works
103:49 - first of all i have too many requests
103:50 - here open again
103:52 - so i'm gonna simply go ahead and close
103:55 - all of them i don't need them everything
103:57 - is saved
103:59 - and here in the lower part of the screen
104:02 - it's a bit hidden you'll find this
104:04 - button runner so i'm going to click on
104:06 - it
104:08 - in earlier postman versions you could
104:10 - start the runner directly from the
104:12 - context menu of the collection itself
104:15 - not sure if this will be added back but
104:17 - just in case if you're watching this a
104:19 - bit later on maybe this has come back
104:22 - here in the collection just saying
104:24 - all right
104:25 - so this is essentially the runner and in
104:28 - order to run this collection we're gonna
104:30 - essentially drag and drop it here
104:33 - and here is the run order the run order
104:36 - is in which order will this request be
104:38 - executed now for example here
104:42 - the way we have organized the requests
104:44 - here in the collection this is how they
104:46 - will be executed for example here
104:49 - the way we did it is
104:51 - before actually ordering a book we first
104:54 - registered our api client so it may make
104:57 - sense to do this somewhere before that
104:59 - of course this is not impacted
105:01 - so if we don't want this anymore we can
105:04 - simply close this all together
105:07 - open the collection runner again
105:09 - drag it here you will see the new order
105:12 - you also have the possibility of
105:14 - reordering requests or disabling some
105:16 - requests that you don't need
105:18 - okay so this is in terms of in which
105:21 - order will this request be executed
105:23 - there are some other things that we
105:25 - want to do
105:27 - one very important one is to save the
105:29 - responses and just in case something
105:32 - goes wrong
105:33 - by saving the responses we'll be able to
105:35 - take a look at what has happened
105:37 - okay
105:38 - so let's click on this button and let
105:41 - the runner do his job
105:47 - now as you can notice some of the
105:50 - requests have been successful in terms
105:52 - of testing
105:53 - and some of them have failed
105:56 - for example here register api client
105:59 - this has failed and we already knew that
106:01 - sending the same data will cause this to
106:03 - fail so no big surprise there
106:06 - there are also some other ones who have
106:08 - failed here
106:09 - for example get an order has failed
106:14 - now if you want to better understand
106:15 - what has happened
106:17 - we can take a look here
106:20 - and if we're looking here at the request
106:23 - we'll see that we have this
106:26 - order
106:27 - and
106:28 - let's try to understand like what has
106:30 - happened here
106:32 - you'll notice here that we have this
106:33 - order id
106:35 - but this is the order id that we have
106:37 - manually hard coded here we are not
106:40 - updating this with every execution
106:43 - and
106:44 - yeah this is your next assignment
106:47 - do you have any idea how we can fix this
106:50 - i will give you a few seconds to pause
106:52 - this video
106:54 - and to try to do this assignment on your
106:55 - own
107:01 - all right
107:02 - obviously manually hard coding this it's
107:05 - not the best approach and as you can see
107:07 - we totally forgot that this thing was
107:10 - manually added
107:11 - so what we have to do here is to fix
107:14 - this order so where is this coming from
107:16 - it's coming from
107:17 - this post request order book
107:21 - and we have added a test but we're not
107:23 - doing anything else
107:26 - so let's submit it again this is the
107:28 - property that we're interested in
107:31 - if we want to be very sure that this is
107:33 - working properly we can use again
107:35 - console.log but just gonna
107:38 - speed it up a bit so again
107:41 - we're parsing the response we have to do
107:44 - this all the time
107:46 - and it's not
107:47 - pm.request.json it's pm.
107:52 - i have to be careful what i'm writing
107:54 - and we're going to set the global
107:56 - variable
107:58 - and we're going to be careful to name it
108:00 - order id
108:03 - so this is the key this is how the name
108:05 - of the variable will be
108:07 - and we're going to get it from response
108:12 - dot
108:13 - order id
108:15 - you see i'm always copy pasting this
108:17 - because i don't want to make any
108:18 - mistakes in terms of how i name this
108:22 - let's run it again
108:24 - we inspect it
108:26 - and what do we see here
108:28 - it is absolutely the same
108:30 - order id as we have in the response so
108:33 - it means this has been updated
108:36 - and let's go back to our execution and
108:38 - see if this helps us
108:41 - get rid of the error i'm gonna click
108:43 - here on run again
108:47 - and now
108:48 - you can see that apart from the register
108:50 - api client which has failed
108:52 - the rest of them
108:54 - are working properly and we have at
108:56 - least a status code test that is
108:58 - ensuring that everything is working
108:59 - properly
109:00 - so good job
109:08 - there is still something very annoying
109:09 - about this register api client request
109:13 - on one hand
109:14 - we don't want to get rid of it because
109:16 - we may need it later on but the same
109:18 - time when we're automating now the
109:21 - execution it's kind of annoying to have
109:23 - it in there
109:25 - and luckily there is a way how we can
109:27 - influence the order in which the
109:30 - requests are executed
109:31 - and let me give you an example
109:34 - i'm gonna go here to this api status
109:36 - request i'm gonna go to the tests
109:39 - and what postman allows us to do is to
109:42 - specify here in the code
109:45 - where
109:46 - postman should go with the next request
109:49 - and currently this is done by writing
109:51 - postman
109:53 - this is instead of pm which is let's say
109:56 - the newer way how we're interacting with
109:58 - postman
110:00 - this postman
110:02 - entirely is a bit older and may get
110:05 - replaced later on maybe at the time
110:07 - you're watching this
110:08 - currently in the version that i'm using
110:10 - is still working just saying
110:13 - but it allows us to specify where the
110:15 - next request should go
110:18 - and this goes by saying set next request
110:20 - you'll see here the autocomplete
110:24 - and here we will not specify an url
110:27 - but it will specify the name of the
110:30 - request so for example here how about
110:33 - skipping this
110:34 - so the normal execution goes from here
110:36 - to here to here to here
110:38 - how about if we tell postman hey after
110:41 - you've checked the api status
110:44 - go to the list of books
110:46 - so we have to get here the name of this
110:49 - request
110:51 - exactly as it is i'm going to simply
110:52 - copy the name
110:56 - and put it here as a string
111:00 - so going back to the collection runner
111:04 - i'm going to hit here
111:06 - this one
111:08 - and if you look here you will see
111:10 - we had api status
111:12 - we have you know registered
111:16 - the api client no it's no longer there
111:18 - we have jumped directly to the list of
111:20 - books
111:21 - and you know the flow continued we
111:23 - didn't want to skip any other requests
111:25 - and you can see here that the register
111:27 - api client is not present
111:31 - an alternative to doing this
111:34 - is to move this
111:35 - right here at the end
111:40 - and for example you can go to this
111:41 - delete order request
111:46 - and specify postman
111:49 - set next request
111:51 - and this time
111:52 - we don't want to go anywhere else
111:55 - we just want to say stop
111:57 - so in order to say stop we simply say
112:00 - specify null null means
112:03 - don't go anywhere else
112:05 - don't go here
112:07 - for example
112:10 - gonna run it again
112:13 - this one with the api status has
112:16 - absolutely no effect it will go to the
112:18 - list of books just as instructor but
112:20 - this is also the normal behavior
112:22 - what has changed here is that the delete
112:24 - order request
112:26 - will be essentially the last request
112:27 - because it will instruct postman hey
112:29 - stop the loop
112:32 - now the thing with these loops is
112:35 - well
112:36 - it can get crazy so you have to be very
112:38 - careful when you're using these
112:39 - conditions and especially when you want
112:42 - to stop something if you just want to
112:43 - skip something that's totally fine
112:46 - but
112:47 - just going to demonstrate
112:49 - what's happening if i'm going to set it
112:51 - to list of books
112:56 - so it's running
112:58 - and running
113:00 - and running
113:01 - so it will essentially run forever
113:05 - because we don't have any condition
113:07 - that's telling it to stop it will
113:09 - continue running endlessly so i'm going
113:12 - to manually stop it here
113:14 - but especially if you want to do
113:15 - automation
113:16 - it's probably not a good idea to have a
113:18 - job running all the time
113:21 - so just be very careful the conditions
113:23 - that you're writing
113:25 - and use the collection runner to test it
113:27 - out before you do anything else
113:36 - so we have managed to automate this with
113:38 - a collection runner we still need to do
113:41 - this manual click there and
113:44 - how about a way to run this collection
113:46 - all the time
113:48 - but not to worry about doing that click
113:51 - and there is a functionality that is
113:53 - built in imposement
113:55 - and that is the monitors you can notice
113:57 - here from collections a bit
113:59 - further down you have monitors
114:02 - but also from the context menu of the
114:04 - collection
114:05 - you can select here monitor collection
114:08 - so monitor collection or clicking here
114:10 - on monitors
114:12 - and
114:13 - clicking on create a monitor
114:15 - will take you to this page so let's see
114:18 - here the monitor name will be check
114:21 - books api
114:23 - say for example we want to make sure
114:24 - that this books api is working
114:28 - all the time without us having postman
114:31 - open or without starting the collection
114:33 - runner
114:34 - and
114:35 - we can define a frequency so for example
114:38 - we can decide run it every day
114:40 - run it every weekday and so on so there
114:43 - are a lot of configurations that we can
114:44 - select here
114:46 - and i will not get into all of them
114:48 - of course what's important here if you
114:50 - go this way you have also to select the
114:52 - collection kind of important
114:55 - so we're using the simple book api the
114:57 - only collection available in this
114:58 - workspace
114:59 - i'm going to go ahead here click on
115:01 - create
115:04 - and once this monitor has been created
115:06 - you don't need to do anything else it
115:08 - will start on its own
115:09 - and you will get a notification by email
115:12 - something went bad
115:14 - of course just for testing purposes i
115:16 - will run it manually once but if you
115:19 - don't write menu it will start on its
115:21 - own according to the schedule
115:26 - this execution will happen
115:28 - on the postman infrastructure and is
115:30 - totally decoupled from your browser your
115:33 - computer or anything else
115:35 - it is a relatively easy way to
115:38 - check if something is working
115:40 - in this case you will see here that
115:42 - it says unhealthy something went bad
115:45 - so we can scroll a bit down here
115:47 - and we'll see this report and it will
115:50 - show us what has happened
115:53 - and you will see here that the test that
115:55 - we had here
115:57 - the first request that we have they are
115:59 - working
116:00 - but as soon as we do something with
116:02 - orders it will not work anymore the test
116:05 - will fail and would say here 401
116:07 - unauthorized
116:10 - so what's going on
116:15 - there are not so many
116:17 - information in regards to this
116:20 - and you'll kind of have to guess like
116:23 - what has happened
116:25 - as you remember
116:27 - at one point we have created inside our
116:30 - collection
116:31 - this
116:33 - token
116:34 - which we have manually generated
116:37 - and we haven't specified it in the
116:39 - initial value
116:40 - now
116:41 - when we have created this monitor
116:44 - essentially we have shared this
116:46 - collection with postman
116:48 - and because we haven't provided the
116:50 - access token they don't know what they
116:52 - should do
116:54 - so this is why this will fail
116:56 - so if we go ahead and add the current
116:59 - value to the initial value
117:03 - save it
117:05 - go back to the monitor
117:09 - and run it again
117:12 - you will see now that
117:14 - it has worked perfectly
117:16 - unfortunately when something doesn't
117:18 - work well here
117:19 - it's a bit harder to debug because you
117:21 - don't have access to all the information
117:23 - that you would normally have inside
117:24 - postman
117:26 - but especially when everything works
117:28 - properly still a pretty powerful tool
117:30 - now typically when anything fails around
117:33 - automation or with a collection runner
117:35 - or here with a postman monitor it is
117:38 - typically regarding
117:40 - missing
117:41 - postman variables or something that
117:43 - hasn't been properly set
117:45 - so it's always a good idea to check that
117:47 - first
117:53 - the most important tool
117:54 - when trying to automate a collection run
117:58 - is newman and newman is a cli tool that
118:01 - can take a postman collection run all
118:04 - the tests and at the end also generate a
118:06 - report
118:08 - if you know how to use newman
118:10 - you can run a postman collection with
118:13 - api tests on any professional server
118:16 - that deals with building and testing
118:19 - software like for example jenkins
118:22 - gitlabci teamcity or anything else that
118:25 - you use
118:27 - we're not going to look into specific
118:28 - integrations but i wanted to show you
118:31 - how we can properly use newman
118:34 - in order to use newman locally on your
118:36 - computer you need to have nodejs
118:38 - installed
118:39 - and i've added some details on how to do
118:41 - that inside the course nodes
118:46 - i've opened here terminal and i already
118:48 - have new one installed so i'm gonna
118:50 - write here newman
118:52 - dash dash version
118:55 - and this will indicate that newman has
118:57 - been properly installed on my computer
119:00 - now you're probably wondering
119:02 - how can we get access to the postman
119:05 - collection that we have
119:07 - and run it with newman
119:10 - and that is definitely a very good
119:11 - question
119:14 - first of all you can go to your
119:16 - collection
119:17 - click on this three dots
119:19 - and export this collection as a json
119:22 - file
119:24 - i have created a new folder to hold this
119:27 - collection and i'm going to simplify a
119:29 - bit the name
119:31 - so it's going to be postman underscore
119:32 - collection.json let me go ahead and save
119:35 - it
119:38 - an alternative way to doing this is
119:40 - simply clicking here
119:43 - on the context menu of the collection
119:45 - clicking on share collection
119:47 - getting a public link
119:51 - and this public link will be generated
119:54 - you need to pay attention that this link
119:56 - does not automatically get updated
119:59 - when you update something inside your
120:01 - collection and every time you make a
120:03 - change and use this public link you have
120:05 - to come back here and click on update
120:07 - link to make those changes visible
120:11 - there's also a third way which i'm not
120:13 - gonna show
120:14 - by using a postman api postman also has
120:17 - an api that allows you to get to these
120:20 - collections by using an api key that
120:22 - will add in the course notes some
120:24 - details about it so there are three ways
120:26 - on how we can do it and i'll be
120:28 - demonstrating two of those
120:32 - so from the terminal window that i have
120:34 - i'm gonna go inside the folder where i
120:35 - have saved this collection
120:39 - this is a simple book api
120:43 - and you will see that the postman
120:45 - collection is here so i can simply use
120:47 - newman
120:48 - run
120:50 - and then i'm going to specify the path
120:51 - to the collection
120:57 - now you can notice that the entire
120:59 - execution has been successful
121:01 - all the tests have been generated
121:03 - properly
121:04 - everything seems to be working fine
121:09 - the alternative to
121:10 - using it as a file is something like
121:12 - newman run specifying here the link
121:15 - where the collection is
121:17 - this can be essentially anywhere where
121:19 - it's reachable over http i'm going to
121:22 - simply copy the link that we have here
121:25 - as a public link
121:29 - and absolutely the same thing will
121:31 - happen
121:32 - the reason why this may fail is again
121:35 - due to
121:36 - variables or missing tokens that you may
121:39 - have in your collection which either are
121:41 - not set as the initial value
121:43 - or are only
121:45 - available as a global variable or
121:47 - something that hasn't been
121:48 - exported if you're using for example
121:50 - environment you need to export those
121:53 - environments as well and also specify
121:55 - them here
122:01 - probably one of the most important
122:02 - things
122:03 - when working with newman is the
122:05 - possibility of generating reports and
122:09 - one of the reports everyone in the
122:10 - postman community absolutely loves is
122:13 - the html extra report which will
122:15 - generate an html report now it is not
122:18 - only nice to have a
122:20 - good looking report but it's also super
122:23 - helpful when you're trying to debug
122:25 - something that went wrong
122:26 - this report will contain anything that
122:28 - you log it will contain the full request
122:31 - and the full response to really really a
122:33 - lot of data
122:35 - i'm going to link you in the course
122:37 - notes also this reporter and how you can
122:39 - install it
122:41 - and i'll also go through the
122:42 - installation steps and how to configure
122:44 - it in a bit
122:46 - so this is the command that you need to
122:48 - run in order to install this reporter i
122:50 - already have it here
122:52 - and in terms of the usage you can notice
122:55 - here that we have here newman run and
122:58 - it's the collection and all we have to
122:59 - do is specify the reporter we can use
123:02 - dash dash reporters which is my
123:05 - preferred way of specifying
123:07 - any flags or any additional information
123:10 - to a command because it's just much
123:11 - easier to read
123:14 - so this is the newman run command
123:17 - i'm going to write here reporters
123:21 - we're going to still keep the cli
123:23 - reporter this is the cd reporter what
123:25 - you're seeing here
123:27 - and without any spaces comma and write
123:30 - html reporter
123:34 - and you're writing these commands
123:36 - it has to be
123:38 - exactly as it is
123:40 - so it's not html report it's html extra
123:44 - sorry
123:46 - but
123:47 - you have to write reporters space and
123:49 - then specify the reporters it's not
123:51 - reporters equals or anything like this
123:54 - so be very careful what you're writing
123:56 - and also as you've seen
123:58 - i've written the wrong reporter name
124:04 - so this has been executed and i will
124:05 - look inside the folder to see how this
124:07 - report looks like
124:10 - so inside that folder you'll notice that
124:12 - an additional folder has been created
124:14 - it's called newman
124:16 - and it contains here an html report that
124:19 - you can open by double clicking on it
124:24 - what you'll see here is absolutely like
124:26 - an overview of what has happened in
124:28 - terms of requests and responses with how
124:30 - many requests have been sent
124:32 - you can go to the requests you can
124:35 - investigate what happened with each
124:37 - request for example order book you can
124:38 - open it up
124:40 - you can see that has been a post request
124:42 - you can see the address
124:44 - you can see which request headers have
124:46 - been sent so for example if you're
124:48 - having like any problems with
124:49 - authorization you'll see here if the
124:52 - proper
124:53 - token was sent if you see here for
124:55 - example a postman variable that hasn't
124:56 - been resolved
124:57 - it's probably one reason why something
125:00 - failed
125:01 - so it really gives you a lot of
125:02 - information in a very
125:04 - nice and easy to read format
125:07 - both for newman and for the html
125:09 - reporter
125:11 - there are tons of configurations that
125:13 - you should know or especially if you
125:15 - want to get started with this you really
125:17 - have to get very familiar with the
125:18 - documentation try to understand which
125:20 - flags are available what you can
125:22 - configure
125:23 - you can specify the names of the reports
125:25 - and many other things
125:32 - we are coming towards the end of the
125:33 - course and i wanted to give you the big
125:36 - picture in terms of automation
125:38 - and why newman is so important and where
125:41 - does everything that you have learned
125:43 - fit
125:44 - here's a pretty realistic project that i
125:47 - have this is an api
125:49 - and essentially this api has a built
125:52 - pipeline this is a piece of software
125:55 - that goes through a build process so
125:57 - this is where the code is being compiled
126:00 - it has some internal tests that are
126:02 - being executed unit tests and also some
126:04 - code quality
126:06 - then this api is being deployed to a
126:08 - server
126:10 - and then i have here a stage of doing
126:13 - api testing so once i have deployed this
126:16 - api somewhere
126:18 - i'm using a postman collection in human
126:21 - to run some tests
126:22 - and to ensure that the api is working
126:24 - properly
126:25 - and just in case something is not
126:27 - working properly i rely on the postman
126:30 - test and on human to notify me and tell
126:33 - me inside this pipeline hey the last
126:35 - change that you have done
126:36 - caused some issues there were some tests
126:39 - that failed
126:40 - and this is where everything fits in
126:42 - together so for example if i go to this
126:44 - api testing stage here
126:47 - and i'm looking inside the job well what
126:49 - i will see here is the newman execution
126:51 - i have here newman run
126:53 - i'm running a collection
126:55 - i'm also specifying some environments so
126:58 - one environment here that i'm using i'm
127:00 - also specifying reporters like cli
127:02 - reporter html extra junit
127:05 - and specifying where i should save a
127:07 - specific reporter and so on
127:09 - in addition to this in addition to
127:11 - getting all this information here you
127:12 - can go here to browse
127:14 - and i will see here inside the newman
127:16 - folder i'll have the html reporter
127:21 - and here i'll be able to debug if
127:22 - something went wrong way to understand
127:25 - what has happened and so on
127:27 - so this is essentially
127:29 - how everything comes in place
127:32 - we have an api that we want to use and
127:34 - test and ensure that it's working
127:36 - properly
127:37 - we have gone through the manual process
127:39 - of testing it but once we are happy that
127:41 - the api works and we have understood how
127:43 - it works we have documented that
127:45 - functionality by writing api tests and
127:49 - we have taken this execution of the test
127:52 - through different stages first of all
127:54 - within postman just to make sure that
127:56 - everything worked properly
127:58 - but then we have used that collection
128:00 - and using newman we could
128:03 - essentially automate this execution run
128:06 - and integrate this postman collections
128:08 - with many other tools we're showing here
128:10 - the example we get labci you can do the
128:12 - same with jenkins with teamcity
128:15 - circleci or any other continuous
128:18 - integration continuous deployment server
128:20 - that you may be using
128:28 - we have accomplished so many things in a
128:31 - very short amount of time
128:33 - i know this was a lot to take in but i
128:36 - hope it was useful and that this has
128:38 - opened your appetite for learning more
128:41 - if the scripting part was difficult and
128:44 - you are still confused about javascript
128:47 - variables objects arrays you can benefit
128:50 - from taking a basic javascript
128:52 - programming course
128:54 - suppose you want to learn more about api
128:57 - testing and postman
128:59 - in that case you can explore topics
129:01 - around data-driven tests where you use
129:04 - an external csv or json file to fit
129:07 - different data sets in your request
129:10 - or schema validation where you
129:12 - essentially test the structure of the
129:14 - response in one go instead of going
129:16 - property by property
129:18 - or you can go deeper into authentication
129:21 - and learn about oauth2
129:23 - you will find links to more advanced
129:25 - tutorials that show different things you
129:27 - can do with postman in the course notes
129:30 - hope you have enjoyed this course and
129:32 - i'll be very happy to see you again
129:35 - bye now

Cleaned transcript:

hi there and welcome to the api testing with postman course my name is valentine i'm a software developer and i like to share my passion for apis with others in a way that is easy to understand when i'm not speaking at a conference or traveling the world i like to share what i know by creating short tutorials and online courses like this one in this course you will understand what bozeman is and why do we need this tool start using postman to interact with apis and write api tests in the last part of the course we'll explore ways to automate the entire testing process you will get handson experience using an api throughout the course i will give you assignments as a way to practice what you have learned if you are serious about api testing you need to practice on your own make sure you check the video description for the course notes i'll be putting there the most important steps you need to take links to resources any updates just in case something has changed so let's get started before we get our hands dirty let's make sure we understand the basics if you are new to apis here is a very quick introduction an api is essentially an interface to a server that has some data or does some actions to understand the concept of an interface think about any power outlet you have in your home it does not matter which device you want to power your laptop a washing machine or a tv the outlet on a wall is designed to accept any plug following a predefined specification an interface is essentially a contract i live here in europe so all sockets have a specific form if i bring a device from the united states or australia this will not work as they have a different interface the apis we are dealing with share a similar concept to use an api we need to know and follow the specification if you are totally new to apis i do recommend watching another course here at field code camp created by craig dennis to get the basics of apis right i think the best way to understand apis is by actually using them let's get back to postman postman is a tool for interacting with webbased apis that is apis that work over the internet an api is like an outlet that a server offers and instead of electricity we get data we use postman to plug into this outlet but instead of using a physical cable we use the internet postman can help us connect to that api and make sure that the process of sending and receiving data is much easier without that interface to the server it will be much harder to communicate so this is why we need postman in this lesson we'll learn how to install postman postman uses a freemium pricing model and for many use cases including this course it is free to use there are two ways of running postman in your browser by going to postman.com or as a standalone app that you have to download and install there is also an old and deprecated google chrome extension don't use that one i'll be using the browser application throughout this tutorial but apps functionality is very similar you will find installation instructions in the course notes i'll go to postman.com and sign up for an account the setup after this is relatively easy and i will not create a team yet this is it postman is actively developed by the time i finished recording editing and publishing this course a new version will be released you may notice slight differences from what you see right now in this video however i can reassure you that the principles stay the same i will update the course notes if there's something really important you need to know the first thing that i like to do when opening postman for the first time is changing to the black theme so in order to do that simply locate this gear icon this will take us to the settings and from the tab with themes i'll select the black theme and simply close this so let's go ahead and start using an api in postman for this course we'll be using an api that allows us to order a book now every time we want to start using an api we need to understand how to interact with that api and the best way to start is always by looking at the api documentation now any api out there that you want to use should have an api documentation that explains you how to use that api explains what's available and so on the api that we'll be using allows us to have a look at a list of books and to order a book so right from the api documentation that you see here and that will be linked in the course notes you'll be able to see that api is available at this specific address and additionally there are some endpoints that we can use endpoints offer different kind of responses and we're going to take a look at them the first endpoint that we should look into is the status endpoint so what i'm going to do is simply copy the address of the api and here inside postman from the workspaces i'll select my workspace workspaces in postman allow you to organize your work better let me make this a bit bigger so i'm gonna go ahead and open up a new tab and this looks pretty much similar to what you have in a browser it's just a bit more advanced i'm going to paste here the address and after it i'm going to write status all requests that will go to this api must include this address here i'm gonna hit here the send button and what i'm gonna get back is in the lower part of the screen i'm gonna say status okay so this is our first request in postman we have sent a request to this api to this status endpoint and essentially the status endpoint is just telling us that the api is available is working as expected and that we can start using it next let's take a closer look at what has happened here you can load this here in the address that we are using this https protocol https stands for hypertext transfer protocol http and s means secure so it's a secure connection most apis should be using https but for the purpose of what i'm gonna demonstrate next http and https are essentially the same thing now just to do a bit of http recap in our communication between the client and the server now in this case the client is postman and the server or the api is the simple books api we are using http messages the http message that goes from postman to the api is called a request and what is coming back from the api is the response the request in postman is represented here on the upper part and essentially postman allows you to configure many things about the request the request will contain the url or the address where you're sending this request in this case we have this is the address of the api and this is the endpoint but we are specifying everything in one address we also have the request method and we'll get into that a bit later we can specify headers and postman has been kind enough and already added a few headers for us and we're going to take a look at those headers a bit later and we also can specify a body which for a get request we don't need to do that we'll never do it for a get request because with a get request we're just trying to get data we're not sending any data for example with the post request we will specify a body now this is essentially what is happening with a request so again just to quickly recap postman allows us to configure the different properties of the http request on the lower part of the screen here this is the response and the response also contains some properties you will find the status code in this case 200. the response will also contain some headers and generally both for the request and the response the headers are like some meta information some additional information that goes with the message it's not always necessary to have this but it just makes the communication a bit easier just to give you an example here what's coming back here is a header called content type and it's telling essentially postman that hey what we have received here is represented as json you'll see here application slash json and using this information postman can look at the response body and say oh i know this is jason so i'm going to display it as json instead of using for example text you can see it doesn't look so nice so these are like some additional things that travel both with the request and the response the response will also contain what is probably the most interesting and most important part the response body essentially the response body contains the entire response whatever we wanted to get as an information from the server will be available in the response body i'm going to point out the different parts of the http request message and http response message throughout the course but i just wanted to do a short recap of what's available and where you can find this information inside postman now let's say that we want to keep this request we already have configured here the api address and let's say you want to reuse it at a later point so what we can do here is click on the save button inside postman and we can also give this request a name for example we can call it api status and we cannot simply save this request as it is we'll see here that this save button is disabled we have to create a collection collection is essentially a list of multiple requests typically they are all connected to the same api so if you're working with multiple apis probably will have a collection for each individual api or sometimes even for the same api depending on the use cases so i'm going to go ahead here click on create collection and i'm going to call it simple book api click here on this check mark and now this request will be saved in this collection if i go ahead and close the tab will be able to find here in this part here of collections we'll see here the collection itself and if i click on one of the requests inside the collection the tab will automatically open up and i can run that request again typically in postman we try to avoid having addresses or configuration in our requests just in case something changes so i'm going to go ahead select this address here you will see here that postman offers this set as a variable so essentially we can replace this with a variable that we can configure in a single place so let me show you what i mean by that i'm going to click here on set as variable i'm going to select here set as a new variable i'm going to call it base url because this is the url where all our requests will go and we'll just use different endpoints the value that will be saved is available here and should not include the final slash we also have to select the scope now there are different scopes available in postman where we can save this variable i'm going to get into those a bit later for this example we're going to select the collection scope so essentially this variable will be saved in the collection and that's about it i can go ahead and save this request again and you will see here if i hover over this variable that has this very special syntax here with double curly braces in the beginning and two double curly braces at the end you'll also see the value that this has if you want to change this variable all we have to do is to hover over the collection name here these three dots will show up and select here edit and from the variables tab you'll be able to see here the base url variable just in case this set variable option doesn't appear when you select the address don't worry about it you can simply go ahead and manually add the variable here for any variables in postman you will notice the initial value and the current value the initial value is something that will be shared with other people for example if you share this collection with someone else someone in your organization a friend of yours or anyone they will be able to see the initial value and this is fine for this api because this is a public api the address is known so there's no secret there later on we'll be using some secrets and we may not want to share them with others and we're gonna keep them in the current value so you can keep in mind like the current value is what is being used in postman and this is private to you the initial value is something that is not being used when you're sending a request and will be shared with others so if you go ahead and run this request again we'll see that there's absolutely no difference so postman will replace this variable with the address and we'll send this request just as before it is just much nicer for us to have it all in one place all right let's go back to using this api so far the status endpoint hasn't been very exciting so let's take a look at the next endpoint and this is the slash books endpoint this will give us a list of books so in postman what we can do is to select the address that we already have here open up a new tab paste the address here because this request is not in a collection you will see here that a base url doesn't get resolved it would say here unresolved variable because the variable is only in the collection and this current request that we have here this tab is not saved in that collection so we're going to go ahead and click here on save the simple books api is already selected just in case you don't see it here or you have multiple collections to select from simply select the respective collection where you want to save the request and i'm going to call this list of books and we're gonna also change this to books so if you're looking here at the api you'll see that we need to submit a get request to the slash books endpoint so we have here get git is always by default we have here the base url slash books so let's go ahead and click that send button and see what happens again on the lower part of the screen we'll see the response what's important to notice here is that we get the status 200 as that is 200 always indicates that a request was understood and that essentially everything was okay so when you see 200 okay this means that everything is fine and you will see here that we have a list of different books what you see here this way of formatting data this is called json and it is very easy to get this information that is essentially just a text and to parse it and use it in essentially any programming language out there so it makes this data very portable from one system to the other going back to the api documentation we'll also notice that there are some optional query parameters and this is what we wanted to take a look in this lecture so what are query parameters well query parameters are some additional data that we can submit with our request for some apis they are mandatory and for some apis they are optional in this case these query parameters are optional so let me give you an example we can add here in postman under query parameters you'll see here we have parents selected and right below that we have query params so we can write something like type and let's say we are searching for a chromebook so i'm going to write here the value crime you can notice as i type here the address itself has changed as well and you can notice in an address query parameters at a point where you see a question mark and after that you will see something like a key value pair so the key is type then we have the equal sign and then we have a value in this case i expect that this will help us filter through all these books and only get the books that are crime books now this time something different appears here you will see first of all that the status has turned from a status to 100 into a status 400 bad request when you see a status 400 it generally means that you have done something wrong so the api has understood your request but whatever you have sent is not correct and most of the time you will see additional information in the response body it says here and it's very important that you read these errors sometimes they're a bit technical and maybe confusing in the beginning but you just have to bear with these errors and try to understand what's going on so here it will say invalid value for query parameter type the query parameter type is what we're trying to send here this type and it says here must be one of fiction or nonfiction so essentially the response is telling us hey you have sent here something that i didn't expect this is not valid we only accept fiction and nonfiction there is no crime type or something like that so if i select here fiction and replace crime with fiction you will see also the address here has changed then i will get back the list of only fiction books and you can even see here that everywhere it says fiction fiction there is no longer known fiction now these query parameters tend to be a bit confusing in the beginning because it seems quite arbitrary like why should they be called type or why does it work this way and the thing is there is no rule which query parameters are available can only be known by reading the api documentation we can add parameters for example i can invent the parameters like full and we give here the value bar and notice here how the address has changed now we have this end sign between the pairs so this is how you can send multiple query parameters pairs with your request but essentially nothing has changed so we can't send data to the api but it doesn't mean that the api will look for this data and will do anything to change it so this is why it's important to look into the api documentation here is documented they are optional so these are not required there are two optional query parameters one is type and one is the limit additionally with query parameters in postman what you can do is to simply click on this checkbox and if you unclick it you'll see that query parameter disappears from the address and if at one point you decide that you don't need that query parameter anymore you can simply hover over it and you should notice here this x you can click on it this will delete that query parameter okay time for an assignment now you have to go and study the api documentation and use the limit query parameter and add that to your request and i also encourage you to try out the different values i'm gonna give you a few moments to pause the video and to try this on your own okay so let me show you how i would solve this assignment first of all it's always important to go back to the documentation to understand what's going on it's also important that whenever you're using a query parameter that you use it exactly as it's being stated in the documentation what i like typically to do is to simply copy the name so that i don't enter anything that's wrong make any mistakes in spelling that specific parameter whatever that is we'll see here that it must be a number between 1 and 20. so let's try to understand what this does i'm going to simply paste it here so you can see it has been added it doesn't have any value yet and let's say i'm gonna write here limit two and what i expect this to do is to only give us two results back you will see here now we have four books that are coming back and now with limit two we only get two books back that's great now if i try something else like for example 25 i'll get here a bad request now again we have sent something to the api and the api doesn't allow this so it says here you cannot get more than 20 books in one request for for example performance reason so we have to adapt this to something that is being accepted by the api so we can see back 2 has been i was saying earlier that it's so easy to write something different so for example if i write limit with a capital l i will not get back only two results there will be more results so essentially we can say that limit with a capital l and limit written all in lowercase there are two different query parameters and the api is only recognizing one of them and totally ignoring the other one it is like writing here foo and with the value 2 makes no difference let's continue exploring this api we now have a list of books but as you can see there's really a lot of information about each book and the reason for that is because this view here where we see a list of books is a simplified view if you take a look at the documentation here the next endpoint that we can use is to get a single book and this time the path will look a bit different so we're going to copy this path here open up a new tab paste it here and of course you also have to use the base url so the first step is simply saving it in the collection to get a single book this is how i'm going to call this and as soon as the request is inside a collection i can use the syntax with double curly braces so double curly braces and a variable that we're trying to use is base url and this has been detected you're probably wondering what is with this book id here in the address this is what we call a path parameter or a path variable because as the name variable implies it changes all the time this endpoint allows us to specify a value for this path variable which represents one of the books that we are trying to get additional information on we look back at a list of books you will see here that each book has an id you'll see here id 1 id 3 id 4 id 6 and so on so let's go ahead and edit here the path variable book id and put in the variable 1. and just a few seconds later we now have only one book that we're getting so this endpoint allows us to get a single book but we now get more detailed information we can see the id and the name we already knew that but we now see information about the author book code the price of the book how many books are in stock and so on so this is the purpose of this endpoint to give us detailed information instead of having here a list of books which contain really a lot a lot of information we can get a specific information from this specific api we just need to know the book id if we enter here a book id that doesn't exist for example 100 what you will get back is 404 not found you probably know 404 not found from browsing the internet when you end up at a page that doesn't exist anymore the same principle applies to apis in this case we're trying to get the book with id 100 and the api is telling us hey there is no book with id 100 this will always be reflected also in the error itself what is interesting about the path variables is that they are different from the query parameters that we have used before first of all you will notice here there is no question mark apart from this this book id key this is not something that will be sent so to make it even more explicit this is what will be sent you will have the base url slash books slash one postman will replace that path parameter with the value we see it here in the editor just a bit nicer it's easier for us to see that and one here will be part of the path just as books is part of the path but books is always there books doesn't change but here we can have id1 we can have id2 we can have id4 and so on this is why we prefer the syntax where we specify here the book id how we call this we can call it book id we can simply call it id it doesn't really matter because as i mentioned the key itself compared to the query parameters will not be sent it's also possible to use both query parameters and path parameters there's nothing preventing you from adding a query parameter called full with a value bar but this is something that the api needs to accept as in the query parameters if you're just sending some random data the api will totally ignore it so let's remove this query parameter and save the request let's say we have identified the book that we want to order so what would be the next step again we have to jump back to documentation and to understand how to submit an order you can now see that the endpoint that we need to use is orders but this time also the http request method we're no longer getting data with post we are sending data so we need to create a post request with postman i'm gonna copy this endpoint and go through the same process once again if creating this request manually is too time consuming you can also go here to your collection to an existing request click on the three dots and click on duplicate we'll create a copy of that request where we already have this request being saved so all we have to do is to enter the new path and we can also change the name so for example here we're gonna name this request order book as you remember we cannot longer use a get request if we try get request this will not work we have to select a post request now as you remember with the post request we have to supply a body so if we go here to the body you will see that we don't have a body but we are anyway missing something for this so i'm going to simply click on send and see what happens of this time we're going to get a 401 unauthorized and it says here in the error missing authorization header when working with apis some endpoints as for example status or this book's endpoints they were public and required no authentication essentially anyone can use them other endpoints for example this one where we're trying to essentially create something create an order they can be private and require authentication this is totally up to the api provider there is no hard rule telling you that you know for this case you need authentication for others you don't need for some apis they are totally public but especially if you're trying to create data most of the time you will have to deal with some sort of an application if you look here at the api it will also say here that it requires authentication so in order to figure out how to deal with this we have to look into the part of how to get this authentication working so if we scroll further down the page we'll see this part with api authentication it says here to submit or view an order you need to register your api client api client is in our case postman client server communication is what we're doing we are the client we are sending http messages to the server and the server is responding what essentially means is that we need to register ourselves with the api and it is a way for the api to identify who's sending this request and who's creating the data if there's any data that has been created there are many authentication methods when it comes to apis and it is impossible to go into all of them i just gonna explain to you a very typical use case that you may encounter essentially with any public api that you're trying to use the purpose of this registration is to obtain what is known as an access token nexus token is like a temporary password that you're getting and you can use that password with all your requests and in this way you're authenticating yourself don't worry if it doesn't make sense right now we'll get to it in a second so this time we need to submit another post request and this post request has to go to this endpoint api dash clients and it also needs to include the following json body and here's an example so again i'm gonna simply go ahead and save this order book i'm gonna duplicate it let's call it register api client and endpoint will be slash api clients you can add a final forward slash or not for most apis it will not make any difference as you recall we have to select here the post http request method because the post will allow us to submit a request body i'm gonna click here on body and instead of none which essentially means doesn't send any data with a request in order to submit a json request body we have to select here raw and from the drop down that you see here we're going to select json let's jump back to the api documentation and luckily here we also get an example in regards to how this request body should look like so i'm going to simply go ahead and copy this example here and i'm going to paste it here so essentially what we're sending here is we're giving ourselves a name and we're also specifying our email address it's very important that when you're submitting json to ensure that this json is valid for example if i don't put these values between double quotes or if i forget one of these double quotes here something red will show up essentially if you see something red when you're trying to submit json it's not a good sign and you should go ahead and fix it this case everything looks well so i'm gonna click on send this time we get a different status code and this one is 201 created two one created is pretty similar with 200 which means okay everything that starts with two something is typically a good sign means that everything was okay everything which starts with four indicates that there were something wrong with the recurs that we have submitted and if there's anything like 500 it typically indicates a server issue or some other problem so now we have submitted our name and our email and we got back an access token this is the password that we can use in the upcoming request so i'm going to simply double click on it copy it go to our collection click on edit open here the variables close this documentation here i'm gonna write here access token now the initial value is something that i don't want to provide just in case i'm sharing this with anyone this is my token i don't want to share with anyone else so i'm not adding it to the initial value current value is what is being used by postman inside this installation i want to make sure that this access token is saved because if i try to submit this request once again with the exact same data i'll get back the error api client already registered and you will see here that we get another status code 409 conflict so indicates that something went wrong essentially this api client has already been registered so make sure that you use another email address it doesn't have to be a real email address for this api now we have this token so we can close this request and let's go back to our post request now as you remember here it says missing authorization header so we have to go back to this header thing that we kind of avoided so far when working with apis you will not be provided with a form where you can add your username and password so we always need to somehow send this information with our request especially where authentication is necessary typically you will add this authentication information to the headers some apis allow you to add them as query parameters some of them allow you to add them in the body but it's quite common to add them to the headers now there are already a few headers here that postman has added for us and we can take a quick look at them essentially one of the most important ones is user agent which essentially identifies who's making the requests it's also telling like which kind of responses are accepted and so on and here we have to add this authorization header now we don't want to get too technical right now and postman is known for making things a bit easier for us there is this authorization tab here and if i click on it you will see here that we have different types of let's say authorization helper that we can use now i know the list is a bit long and i won't be able to get into each of them but essentially what we have here is a token so we're going to select the beer token and you'll see here a simple form where you can simply add your token now we don't want to add our token here we will use our variable so again using the syntax access token we're going to select it and you will see here it's available so double curly brace in the beginning then exactly the name of the variable as you had it and if this request is saved in the collection and you hover over it you should be able to see the value all right perfect now if we come back to the headers you will see here that postman has autogenerated one header that is called authorization exactly the header that we're missing and it has a value in a very specific way this beer token authorization must include the word beer then a space and then essentially the token so that's about it instead of manually doing this and we can definitely do that manually as well we can use this authorization helper in postman and postman will take care of it it's absolutely the same thing just wanted to show you like what's happening from a technical point of view all right let's hit this send button once again and see what's happening now this time we're not getting a 401 we're still getting a 4 something we're getting 400 band requests and it's just telling us invalid or missing book id so we're trying to submit an order we haven't specified anything but we'll fix that a bit later all right so let's go back to submitting this order we wanted to order a book and we have to tell this api which book we want so if we go here to body and select for example raw and say something like we want book with id1 and submit this request i'm afraid the api will not understand what we mean by this so again we have to look at the api documentation to try to understand how to do this how to submit this information how to specify what we want so in this case in order to submit an order you'll see here an example and again we have to submit a request body in a json format and include these properties and luckily again we have here an example that we can simply go ahead and copy so i'm gonna totally replace this with this json here and i wanted to take a moment to talk about json because i know a lot of people just getting started with json sometimes have issues and the most common issue is generating invalid json postman as i mentioned before tries to take care and help you off if you make any mistakes still it's kind of important to understand what json is now json is essentially just a key value way of sending data so for example here the key is book id and the value is 1 and again we have a comma here separating this let's say values that we're sending key value pairs and the next key value pair is the customer name and it has the value john if we try to write something different instead of this column we are adding here an equal sign this is not valid so it has to match the syntax of what json is essentially from a specification point of view we have these quotes here so if you specify one of the keys without using the quotes this is again not valid json so we need to specify these quotes they also have to be double quotes they cannot be single quotes there's one exception to these quotes and you probably already see it here one is not between codes and you may be wondering why is that well the truth is we're using quotes when we're sending strings the reality is that we are sending a lot of strings for example john is a string if we have an address that's a string as well but one here is a number we can also have a boolean for example if we specify something like true or false that is also fine so there are a few exceptions and if we put for example one between two double quotes this would be valid json but this will no longer be technically speaking a number it will be a string all right so just keep in mind that you need to submit valid information to the api if you're submitting an invalid json well that api will not be able to understand what you mean and let me give an example i'm removing this comma here you will see here postman is trying to warn you you don't care about it still go ahead and you're getting something back like this is not processable i cannot work with this this is what the api is telling you so always pay attention make sure that you understand what postman is trying to tell you make sure that the json that you're sending is valid so welcome to the next assignment and in this assignment you have to create this post request which should be already done by now submit it and see what's happening additionally i want you to see and identify a book inside a collection of books that has a stock of zero so essentially it's not in stock and try ordering that book as well and see what's happening i'm gonna give you a few seconds to pause the video and to do the assignment on your own and i highly encourage you to practice this all right so let me show you how i would solve this assignment essentially we should have a valid json here so if we go ahead and hit the send button what we're getting back here is the status tool one created so we have successfully created this order it even says here and response created true and we're getting back an order right here that's totally fine so it means that we have submitted an order now and this order will be processed of course the order that we send here is very simple doesn't include an address phone number and so on so it's not 100 realistic but the idea remains the same now what's happening if we're trying to submit an order for a book that is no longer available first of all how do we find this book well we have to go back to the list of books here and you can see here with the filters that we already have all of them are available i'm going to remove the full here and you will be able to see here that the book with id2 says here available false so let's take a look inside that book to see what's happening so i'm gonna go to the get single book endpoint and specify a book id to and you will see here that the current stock is zero so i'm wondering what's gonna happen if we try to order this book and we're gonna get back a 404 not found i'm going to say this book is not in stock try again later so this is the assignment when we're trying to test apis and especially when we need to send data we have a tendency of reusing essentially the same data over and over again and most of the time this will prevent us from identifying issues with the api especially if we've been asked to test and ensure that that api will work properly this case there are not so many things that can go wrong we already tested what's happening with the book id that is in stock and another one that's not in stock you can also try and play out with different values but how about if we get some support from postman in trying out different values and for example here for the customer name how about you know generating a random customer name so that we don't send all the requests with john unfortunately there is a functionality hidden in postman that allows us to send random data with our request and that is a special kind of variable it's called a random variable so i'm gonna remove john here but make sure that i keep the double quotes because if we're trying to send a string without double quotes you know it it's not gonna be valid json so i'm gonna open here two double curly braces enter the dollar sign and as soon as i do this you will see here a huge list of variables that are available now i'm not gonna go through all of them i'm gonna write here random and let's say we want a random full name all right so let's click here on send and again we're gonna get the error that the book is not in stock so let's try a different one and now again a new request has been sent the problem now is we're sending something but we have no idea what we have sent fortunately postman has another neat functionality and that is the postman console it is a bit technical and a bit geeky but it is important to use it as one of the most important tools when you are using postman you can find a postman here right at the bottom of the screen should say console and it will open up inside postman typically you should already have like a long list of things here that we don't need at this point so what i'm going to do i'm going to click here on clear let's submit this request once again and now this time we'll see here the post request going out with a full address at the orders endpoint i can expand it by clicking here you will see here the request headers these are not interesting but also the request body so let's click here on the request body this will open up an additional window here inside the console and you will be able to see the request body that we have sent the postman console is particularly useful for debugging when something goes wrong when you don't understand what's going on always come back to the postman console and take a look at the request see what happened there you see here the book id is one this is the customer name that we have sent so this has been randomly generated by postman if you don't need it anymore the first x here is for closing the request body and the other one is for closing the console that's it i want to take a short break now from postman and so far in the course you have seen many ways on how to use postman but in this session i wanted to get a bit into how not to use postman so just to make clear you have seen that we have used postman to interact with apis postmate is not a tool for dealing with user interaction think about if you have a website with a form or buttons and you need a tool to click through those boozman is not a tool that deals with such things it's just working with apis postman is also not a tool for doing any performance testing or any kind of tests where you need to send a lot of requests in a very short time frame and also postman is not designed for security testing you can use it for security testing but this is not the primary focus of the tool there are many other tools out there which i think do a much better job at helping you test to see if an api is really secure so i hope this short lesson has helped you understand if postman is the right tool for what you're trying to do we have already submitted a few orders so maybe now it's time to take a look at how many orders we have in order to take a look at that again we have to look at the api documentation to see if there's anything that can help us in this regard see here right below submit an order there's also this get all orders endpoint which is essentially the same endpoint slash orders but this time we only have a get request we're not trying to create an order we're just getting an order we're getting essentially all the orders that we have so let's go back in postman and we're going to be lazy again and simply duplicate this request get all book orders will be the name of our request because we have duplicated this we also have the authorization header with us so this request again requires authorization and instead of post we're going to simply select get and luckily if looking here inside each order we'll see a list of all the orders that we have each order has an order id which you can see here it's no longer a number it's a string it says here which book we have ordered who's the customer name also the quantity and such information and these other orders have been created using this random full name functionality that we have found from postman and this has ensured that we can now have different names that we're sending so essentially these are all the orders that we have in this assignment i'm asking you to take one of these existing orders and to view it individually so instead of viewing all the orders take one order id and find out if there's an endpoint that allows you to view a single order id give you a few seconds to pause the video and after that i'll show you how to solve this all right so let's jump back into the api documentation and see what we can do you will see here we have an endpoint getting order and the structure of this endpoint is pretty similar to the one where we were trying to get an individual book so just gonna go ahead and copy this go back in postman duplicate one of the requests that we have and i'm gonna replace here orders with this endpoint make sure there are no spaces or anything like this because this will break and postman will send this request to the wrong endpoint gonna simply rename this to get an order and addition we need to specify this order id so if i'm just sending this as it is right now essentially postman will not send anything so we will send the request to the orders endpoint so you will see all the orders just in case you're wondering what happened there and if i type in some value that doesn't exist i will get back a 404 not found so i need to get a real order so the real order let's say would be this one for john i'm gonna paste here the order id exactly as it was in the other request and now we will see an individual order that you're getting here so that's it you know if i'm looking at this order right now i'm not really happy with the customer name john it's not the full name so how can we change this now if we go back and use the post request once again to order book will essentially create two orders so i was wondering if there's any way how we can update this and luckily there is so here the api documentation will notice this endpoint which says update an order and it will use the http request method patch to update this existing order and will require authentication and it only allows us to update the customer name depending on the api you could update the entire order itself or only some specific properties depends from api to api and again here we're gonna get an example on how to do this so let's try to update this order i'm going to simply copy here this customer name and essentially the structure is the same as the one with getting an order so for that reason i'm going to duplicate this rename it so that i can easily identify it and for some reason the parameter here got lost maybe i forgot to save it here before creating it absolutely no worries i can simply go ahead and copy this from here so we'll have the exact same request i'm gonna try it again with get i'm noticing that this is the order that we're trying to update so i'm gonna select here patch and patch is again one of these http methods that allows us to send a body so i'm going to click here on body i'm going to select raw and again we're sending json i'm going of paste it here so let's add here another value and we can even use this postman random variable here so let's say a random last name this would be a good one all right so let's save it let's run it again and we're not getting back anybody and this is totally fine because the status will be indicated through the http response status and this is 204 again 204 indicates that everything was okay so if we're trying to get that order again you will see here now the customer name is john anderson and we have managed to update the same order so the order id remain the same the book that we're ordering remained the same the only thing that changed is the customer name now let's assume that we already have too many orders here and that we're trying to you know delete some of them with patch itself we can just update information but we need a way now to delete this order let's say we already wanted to test something but we no longer need it so going back to the api documentation you can notice that there's also an endpoint for deleting an order essentially the path for all these operations from getting an order updating an order or deleting an order remained the same the only thing that changed was the http request method we had used get we had used patch we had used post to create an order and now we are using delete so delete doesn't require anybody we just have to specify in this case which one is the order id again what we're using here is just an example and it's always important that you study the api documentation of the api that you're trying to use just because a respective endpoint works in one way with one of the http methods for this api it doesn't mean that all apis work exactly the same so to update an order i'm going to simply go ahead here click here on duplicate i'm gonna call it delete order and i have to select the correct http method this one is delete the order id is already prefilled here so all i have to do click on send i'm gonna get here 204 no content but if we're still unsure if this worked properly we can go back to get an order so if we're trying to get the same order that we have deleted you notice it's no longer here and especially if we try to look at all the orders that we have you will see now we have one order less so obviously the delete order worked properly let's save this as well and it will also show up correctly here in the collection you can notice that we already have quite a few tabs open so let's go ahead and close them so what you can do is simply close all tabs and if there are any unsafe changes you'll have the possibility of saving those changes if you have a lot of tabs and you don't need them anymore because they only contain temporary data you can simply click here on the three dots and select force close all tabs and you will not be asked welcome to the second part of the course where we start laying the foundations for automating the testing of this api as you have seen so far we started working with the api but there's still a lot of manual work involved if someone changes the api we have to retest everything manually and this is not very fun and also time consuming instead of verifying the api with our own eyes we want to let postman do this for us by writing api tests we also want to avoid any manual intervention like copy pasting data from one request to the other automation means that we let postman do the work and we only step in if something goes wrong by the end of the course you will know how to test this api with just one command or only one click this is the most exciting part of the course so let's get started alright so let's get started with writing api tests so far we have manually tested this api and we went through all these requests and essentially we created sort of like workflow we first of all checked if the api status is correct and we got a list of books we looked at a single book we ordered that book we took a look at all the orders we got an individual order we updated that order and then finally we deleted it and of course for some of these operations we also needed to register ourselves with this api the way we have looked at this is take for example this api status well essentially for postman as long as the request has been sent and something is coming back this has been a successful request response interaction postman has no idea unless we tell postman too if this was successful or not and we tell this by inspecting the response we typically are looking at the response we're not looking so much at requests because we already know the request look at the response and we're looking at for example the status code we think here 200 and we're looking here at the body and we're seeing status okay so instead of us manually looking at this information let's tell postman to do this for us and in order to do that we're gonna switch here to this part of the request where it says here tests and this is where we can write tests what you can write in this window here is programming code it's javascript if you want to be very specific about us luckily if you're not really into programming or you're just getting started with it don't worry i will try to make things as easy as it gets postman here has this window with this socalled code snippets they essentially allow you to quickly do a few things with javascript without writing a lot of code and especially for us as beginners right now that's totally fine the most simple test that we can write is to test that the status code is 200 so if we scroll here the snippets you should be able to identify one of the snippets which says here status code code is and if you click on it this code will be generated now if for some reason these snippets have changed or you cannot find it anymore don't worry you simply can go ahead and type it as you see it here now this is a piece of code that will be executed when the response has arrived and postman will check if the status is 200 and you can even see here from the assertion that we're writing here it's kind of like easy to understand it says here pm.response.2 have status 200. so it's relatively easy to read so again you know what's happening here and also postman knows what's happening here so let's submit this and now if we were paying attention here in the test results it will say one from one and if you click on it you will see here a path mapping green says status is 200 whenever we are writing tests we always must ensure that it will also fail just in case we made any mistakes when typing this code here it's totally possible may break this test or may always show that it's working when it sometimes is not working so let's try and fail this test we can fail this test by entering here an address that doesn't exist so for example if i write here status foo and simulate that api will send me something else back i can get this test to fail and you will see here we expect the status code to be 200 but we're getting this assertion error expected response to have status 200 but got 404 as you see here 404 i'm gonna fix it back but this was just a small test to indicate that what we have written here is working properly all right now if the status code is let's say good but not enough for our use case we may also want to take a look at the response body for most apis the response body will be written in json this is just a very simple way to send data from the api to postman or to any let's say programming language and to transform it and use it there essentially the data that is coming back is relatively easy to use and understand by other programming languages so let's try and write a test that will verify that the status is indeed okay now the first step that we need to do is to parse the response and people generally wonder when they hear about parsing is like why do we need to parse it and the reason for that is what you see here this is json but this is essentially just text it's not an object that we can use inside javascript so for that reason in javascript what we'll do is we're going to define a variable so const response will define a javascript variable and we're going to initialize it equal and this is something that comes from postman so i'm going to write pm.response this holds the response and we are going to call a function called json and a function call in javascript is always like this so inside this response variable in javascript we will now have the response which will be parsed from json into a javascript object if you want to take a look inside and see what is the value of response we can go back to our old friend the postman console by default the postman console will not record the values of different variables that are available unless instructed we can use for example console.log which is again a function and we'll specify in this function parameter and that parameter is the response so let's go ahead and open the console again i'm going to clear everything that you see inside here hit send one more time and you will see here the request that has been sent this is locked by default and then you will see here from our console.log statement you will see here this javascript object which has been created from parsing the json response the way this is represented looks pretty similar to json but it is not json it is a javascript object all right now let's say we're trying to get to this okay here and we have here an object that has a property called status now in javascript there are two ways on how we can get to that property we can write response that status and we can log that information and you'll see here now it says okay or the alternative is to write this status between the square brackets as a string and this is sometimes needed when dealing with names that contain let's say a hypen or some other special characters maybe a space or something like that that will break the syntax so this is another way to use it but most commonly i would see it in this way both of them were got back with okay now we have accomplished a very important thing and that is getting to the data that we are trying to test if we cannot read it if we don't have it in our console after using it with console log there's no point in writing a test yet so especially if you're a little bit confused about json and javascript and parsing and everything make sure first that you see what you're trying to test inside console.log all right so now we already have it there we know that it exists so let's write another test a test in postman always starts with pm.test and pm.test is a function that takes two parameters so you can see here pm.test this is a function the first parameter will be the name of the test so let's say here status should be okay it's totally up to you what to write inside here and the second parameter this is a bit more tricky we have to specify the second parameter after a comma and this will be a socalled callback function and this has a syntax like this one or it can start like function this one these two syntaxes are compatible with one another this one here is a bit more modern now i'm gonna hit here enter and this is where we can start writing our assertions by default if we leave this test empty it will not do anything it doesn't really matter what we have here for a name it will show it here as past even though we have no assertions now we're gonna start with something very simple and what we're gonna do here is write something like pm.expect and we can expect for example one dot 2 eql to equal 1. you have to be very careful when you're writing the syntax and it has to look exactly like i have it here let's hit send again if i'm seeing expected 1 to equal 2 we expect this to fail it will say here assertion error expected 1 to deeply equal 2. don't worry about this deeply equal essentially it's failing and it's telling that one doesn't be equal to all right now how can we make this assertion that status is okay we already know that this object here with this property contains okay so let's check if it contains okay so instead of this expect hardcoded value one gonna paste it here and here between double quotes i'm gonna write okay so let's send it again we'll see that it passes and if i write something else for example not okay it will fail and i will say expected okay to deeply equal not okay so this is an additional test that we have written on top of checking that the status is 200 if for some reason where again let's call here the full status slash for endpoint that doesn't exist we expect some things to happen so first of all we'll get here 404 not found but also here this entire code that we have here will also fail because we're no longer getting json this is not possible so it will fail all together but this is just a very simple way on how you can ensure that this simple endpoint is working properly it is now time for another assignment based on what you have learned in the previous lesson i want you to write a status code test for all the requests inside the collection and i also want you to make sure that those tests will fail if needed i'm going to give you a few seconds to pause this video and after that i will show you how i will create this all right so there's nothing preventing us from getting started with what we already have i'm just going to change here be the syntax make it a bit more modern but as i mentioned before this is absolutely equivalent and shouldn't make any difference i'm going to copy this and let's take it here to the list of books click here on tests kind of paste it and again the status that i'm getting is 200 i'm seeing here the test results are working if i'm trying something else let's say books it will fail with a 404 so this is perfectly fine getting a single book again pasting absolutely the same test and i will be absolutely sure that this will fail as well okay order book now this is interesting let's see what happens if we simply paste this test here and you'll see here that the status that we're getting is 201 created that the test will fail we can adapt this here to check for the status 201 and also make sense to adapt the test name this is of course not necessary but it's just a good thing to keep it consistent all right so this one is now passing as well these other ones are absolutely the same and i'm not going to waste a lot of time making sure that they work as they will always return here 200 right this is another interesting one trying to here to get an order and that order doesn't exist anymore so we're getting 404 not found and also our test is failing so this is a good thing that this has happened we can look back here at the order book result we can get one of this order ids put it here in the parameters and running here the test we'll see that the status is 200 so this has worked we have to do the same for the next one where we are patching it so if i'm switching between too many tabs here i'm now inside a patch request pasting the test i should have gotten a 204 and i'm expecting for 200 so i'm going to change here 200 in 204 and now this one is passing as well deleting an order is pretty similar i'm gonna first let it fail i'm getting here 404 not found i should also get a 204 getting now the right order id and putting it inside a parameter okay another test that is passing and also this with the registration of the api client i have to identify the right test and i'm going to paste it here as well if i recall correctly because we are creating something we expect here to get to a one obviously for saying the same data again this will not work but now we have a simple test that tests that each individual requests in this collection returns back the status code and as you have already seen this is already a pretty important test this already gives us a pretty good idea if that request was successful or not as you have noticed in the previous assignment one thing is particularly annoying and that is copy pasting this order id from one request to the other essentially we start here after we have this order book we're getting an order id and after that we want to go through all the other requests we have to paste it over and over again and to be honest we don't like that very much now i mentioned in the beginning of the course that postman has different variable scopes and essentially those variable scopes are collection variables that you have seen so far there are also global variables which is a variable type that is available inside the entire workspace for all collections not just for a specific collection or there are also environments environments they are useful if you have different environments so for example if you're developing software and you have a local development environment local host you have a testing development environment and you have a production development environment then you can define multiple environments and you can easily switch within them and having here for example the base url you can easily swap that with testing environment or production environment or localhost getting a bit of topic right now in terms of this the problem that we're trying to solve is to use a postman variable to store this order id so what i'm going to do here is i'm going to copy the value and i'm going to click here on this eye icon right here in the corner and what we're going to do here is to define a global variable just as well we could have defined this inside our collection as a collection variable but to be honest this is sort of like a transactional data we don't really want to save it inside the collection we can just you know throw it in these global variables and not worry so much about it so we're going to click here on this edit i'm going to define here the variable key which is order id of course you can call it as you wish i don't really care about the initial value i just gonna paste here the current value the current value is now this one now next time when we create this request we can take this order id again if you lost it here you can simply click here on this eye you'll see here the values and you can even click here on the current value and easily change it make sure you don't add any spaces or new lines where you're pasting data so now at the next request the get all book orders there's nothing that we need to change but then when we have here get an order instead of manually specifying this parameter here i'm gonna use here double curly braces order id you'll notice that this is the order id that we have just saved so i will even copy this variable here go to the next request replace this as well go to the delete order replace this here as well so next time when we're clicking here on orders let's see it's gonna happen so we're gonna get a new value let's get here a new value again click on the environment replace it here if i'm trying to get an order i will see that order and it should be exactly the same so we can cross check what we have here for a variable to what we're getting back in the response i can update that order i can go back and look at the updated information and of course i can go ahead and delete that order and if i'm trying to get it again it will not be there anymore and as you have noticed the postman tests have been executed in the background and they already give us an idea if everything went okay or not so we don't even have to look at response body or anything like that in this case we went outside of what was expected in terms of the flow but the rest of the tests were useful and now we have managed to reduce a bit the amount of manual labor that we have to do in order to test this out if we look back at the collection we'll notice that we still have a few requests that contain some let's say hardcoded data and it all starts with this list of books where we have looked at some of these books we have identified a book id and we have used that book id in some of the upcoming requests for example get a single book we have here an id that is hard coded and of course then the next request with ordering the book we have again the id here so this kind of like hard coded data makes our tests and our entire collection a bit susceptible to changes for example if that book is being removed and having like this hardcoded value there will not do us any good so for that reason we have to find a way to make everything a bit more dynamic so looking at this list of books let's say for example we want to get the first nonfiction book that we can find here so as you already remember essentially we can add here a filter so we can add here the filter type and say we're looking for a nonfiction book so we can change that here and we're sending this again we'll only get nonfiction books so let's try again to set this to a variable and see what happens the question is like how can we get this information previously we have manually set this variable but we still we want to avoid getting this we want to set this variable automatically and this is totally possible so let's go here to the scripting part where we have the tests and we also have here the response so let's imagine that we want to get to this id here id 2. first of all we're going to define a new variable called response and we're going to do the parsing opm.response.json will parse the json into a javascript object open up again the console send the request and we'll see here the data that we have this data format is different than what we had before because it is a list of books or how is it called in javascript it's an array now recontains multiple objects so this book i with id2 this is an object then there is the next object with the other book with id5 if we try inside the console log to do something like response.id you'll see here that it says undefined and the reason for that is because we first have this array so we need to get that data from the array first and then we have an object where we can call the property id the array that we have has keys essentially a way that allows us to access that information for example if i write here a square bracket and i say zero this will get us the first element from the array computer science we always count from zero so this is why the first element has the key zero let me demonstrate this you will see here we get this two now the problem here is that this first book is not available so what we have to do is to get the second book on the second book we'll have the key one trying to get that and we'll get id number five here that's all good the problem is if this data set changes or for example the first one will become available or the second one will become unavailable having this hardcoded data here will kind of like cause us some issues for example even if something changes in the parameters we're no longer setting this nonfiction filter here the id that we can get if we keep it hard coding like this will be different all the time and we don't want this this will be too risky so we have to look into a different way of handling this because this is an array we can use a specific function than this array has so we can define here a new constant let's call it for example none nonfiction books and we can get a response i'm going to use the method filter and inside here we can define a condition now the condition that we're going to define here is inside another function where we will receive a parameter book and then with this book we can define a condition so for example book dot available and we can decide here if available should be true from the two books that we have here we can notice that the first one is not available but the second one will be available and let's just assume all the time we'll know that we'll get one of these books so now what we can do is from this nonfiction books we can get the first element that we get because we will know that this will be available filter will throw out any books that are not available and will only give us the books that are available and then by specifying nonfiction books 0 we'll essentially get the first book that is available and that is a nonfiction book and you will see it here being locked in this way you have managed to get to this property that is really hidden inside the response without actually having to write something hardcoded with the only assumption that all the time we should find at least one nonfiction book that is available for most apis this is a assumption that's quite valid the criteria that you use here totally depends up to you you can search for a specific name or by any other characteristic if you find yourself in a situation where you need to filter a list of different objects and extract only one now so far this hasn't helped us a lot so what we want to do next is to also actually set that variable luckily postman has another code snippet that we can use and the code snippet is called set a global variable so i'm going to click on it will be generated here and all we have to do here is to specify the following we'll specify here the book id this is the name of the variable you can call it as you wish and then we also have to specify the value and when you're specifying the value you want to make sure that you're not putting anything between codes because this will be a string but since we have here a javascript object we will be putting that now of course we don't want to have the object itself we want to get only a property of that object so i'm going to write here that id so we're getting this object and we know that the property id is 5. after sending this you can click on this i icon here and you will see pretty similar to the other variable that we have manually set that now book id has value 5. so it means that now we can get an updated book id with our requests and we don't have to do anything else now just in case something does happen and no book is being found it kind of makes sense to test so just in case we don't have any books there is a postman test that will let us know hey we couldn't find any nonfiction books and in this case we're not gonna be directly asserting the response but kind of like indirectly through this filter that we have so let me show you what i mean by that let's go ahead and write a new test pm.test and let's say here book found this is the name of the test this will be the callback function and inside let's try to write an assertion instead of logging this i'm going to define a variable called book and i'm going to write a few expectations so i'm going to use pm.expect i'm going to expect book to be an object so first of all we expecting that book is an object and additionally we can write other assertions for example bm.expect book that available to be true and this is absolutely the same as writing pm.expect book available to equal true it's just a different way of writing it so again this just ensures that everything is as we expect it to be what we're setting here instead of using this we can use this book.id and we can also try to make this fail now it may fail in a different way we can write here for example instead of equals true we can set a filter that will never exist and we're gonna get here actually first of all a type error because we're trying to get property id of something that's undefined essentially postman will anyway warn us that something didn't went well but this additional test that we can write a just good place to ensure that we document how the api should behave and we document what we expect to get back so i'm going to fix this and let everything run properly so for example just to ensure that everything works properly we can also surround this by something like let's say if book only then we're setting this global variable so let's make this fail again and then we'll see here that we don't get this error anymore from javascript which says here book found has failed so it hasn't found a book and then we're making the expectation undefined to be an object so this is a way to get around that javascript error that you have seen previously but apart from that this is how we ensure that what we have written here in terms of javascript is being properly handled just in case something unexpected happens and now it's time for another short assignment for you we have identified here a book and we have seen that it is available i wanted to give you the opportunity to write an expectation on your own and i want you to expect that this book is from the type nonfiction even if we have used this parameter here and we specify that is nonfiction just wanted to test it again and also try to make it fail i'll give you a few seconds to pause the video and to do the assignment on your own and after that i will show you how i would solve it all right this is pretty easy i'm going to simply duplicate the last expectation that we have here because from the structure is already the way it should be and i'm going to change here property from available to type and the type that we're interested in is nonfiction so let's fix this error here from above in true and we have tests that are passing let's disable the type and maybe we can even change it to fiction but essentially the first available book that we found was a fiction book so for that reason the test is failing so now we have ensured that whatever we're getting back is indeed a nonfiction book because this was the original requirement and after one assignment what is better than doing another assignment because practice really matters now this assignment will have two points the first of it is i want you to use this variable book id that we have saved here and you've seen that it has been properly saved as a global variable i wanted to use it in a get single book and also in order book this is in the request body and this is here as a parameter since you're already looking at a get single book request how about checking again if inside here so let's write for example five i'd like to check that the current stock is actually greater than zero and i'm going to give you a small hint on how to do this so i'm going to go ahead here just simply copy the structure of the test here let's say we're going to write is in stock so this would be the name of the test and the expectation would be pm.expect one two be above two a very simple expectation here that will help you out when asserting that the current stock is greater than zero and you will see here that one is not above two so it's not working i'll give you a few seconds to pause this and after that i will continue solving the assignment all right so the first part of the assignment is super super easy we only have to replace here any hardcoded values with what we have here book id as a global variable and you can see it's being rendered and we also have this order book and inside here is again super simple you only have to get that right and we can test if it's working properly we're getting no errors so all good there going back to the test that we wanted to check here the property that we want to use is this current stock so as you recall first of all we have to parse the response so we define a variable called response and we're using pm.response.json we're parsing that and what we can do here is to expect that response that current stock to be above zero super simple the problem that you're getting here is you're gonna get this weird error it says stock is not defined and you'll probably not understand what is this referring to the problem is this dot syntax this dot notation when getting properties from an object works with this kind of like simple properties that are one word when you have this dash here this hyphen here this would kind of like break the syntax and you have to fall back to the other syntax with square brackets so we adding here this square bracket we are putting it the name of the property as a string here can be single quotes or double quotes use as you wish and that will get us the right property and we'll see here now it is in stock we're trying to get something that's not in stock for example book id 2 i think it was not in stock we'll have here failing test expected 0 to be above 0 so that's not working but with our book id here it's working properly all right so this was the assignment now it seems that we have all elements that can help us do proper test automation we have written api tests that ensure the api response as we expect the api to respond and generally how we expect the api to work and we also have added all these variables and essentially we don't have to copy paste anything anymore from one request to the next one the next step is to move into the direction of automation we want to take this request and instead of going request by request from one request to the other and running this manually we will use a builtin tool from postman this is the collection runner and the collection runner allows us to execute the entire collection with just one click so let's see how this works first of all i have too many requests here open again so i'm gonna simply go ahead and close all of them i don't need them everything is saved and here in the lower part of the screen it's a bit hidden you'll find this button runner so i'm going to click on it in earlier postman versions you could start the runner directly from the context menu of the collection itself not sure if this will be added back but just in case if you're watching this a bit later on maybe this has come back here in the collection just saying all right so this is essentially the runner and in order to run this collection we're gonna essentially drag and drop it here and here is the run order the run order is in which order will this request be executed now for example here the way we have organized the requests here in the collection this is how they will be executed for example here the way we did it is before actually ordering a book we first registered our api client so it may make sense to do this somewhere before that of course this is not impacted so if we don't want this anymore we can simply close this all together open the collection runner again drag it here you will see the new order you also have the possibility of reordering requests or disabling some requests that you don't need okay so this is in terms of in which order will this request be executed there are some other things that we want to do one very important one is to save the responses and just in case something goes wrong by saving the responses we'll be able to take a look at what has happened okay so let's click on this button and let the runner do his job now as you can notice some of the requests have been successful in terms of testing and some of them have failed for example here register api client this has failed and we already knew that sending the same data will cause this to fail so no big surprise there there are also some other ones who have failed here for example get an order has failed now if you want to better understand what has happened we can take a look here and if we're looking here at the request we'll see that we have this order and let's try to understand like what has happened here you'll notice here that we have this order id but this is the order id that we have manually hard coded here we are not updating this with every execution and yeah this is your next assignment do you have any idea how we can fix this i will give you a few seconds to pause this video and to try to do this assignment on your own all right obviously manually hard coding this it's not the best approach and as you can see we totally forgot that this thing was manually added so what we have to do here is to fix this order so where is this coming from it's coming from this post request order book and we have added a test but we're not doing anything else so let's submit it again this is the property that we're interested in if we want to be very sure that this is working properly we can use again console.log but just gonna speed it up a bit so again we're parsing the response we have to do this all the time and it's not pm.request.json it's pm. i have to be careful what i'm writing and we're going to set the global variable and we're going to be careful to name it order id so this is the key this is how the name of the variable will be and we're going to get it from response dot order id you see i'm always copy pasting this because i don't want to make any mistakes in terms of how i name this let's run it again we inspect it and what do we see here it is absolutely the same order id as we have in the response so it means this has been updated and let's go back to our execution and see if this helps us get rid of the error i'm gonna click here on run again and now you can see that apart from the register api client which has failed the rest of them are working properly and we have at least a status code test that is ensuring that everything is working properly so good job there is still something very annoying about this register api client request on one hand we don't want to get rid of it because we may need it later on but the same time when we're automating now the execution it's kind of annoying to have it in there and luckily there is a way how we can influence the order in which the requests are executed and let me give you an example i'm gonna go here to this api status request i'm gonna go to the tests and what postman allows us to do is to specify here in the code where postman should go with the next request and currently this is done by writing postman this is instead of pm which is let's say the newer way how we're interacting with postman this postman entirely is a bit older and may get replaced later on maybe at the time you're watching this currently in the version that i'm using is still working just saying but it allows us to specify where the next request should go and this goes by saying set next request you'll see here the autocomplete and here we will not specify an url but it will specify the name of the request so for example here how about skipping this so the normal execution goes from here to here to here to here how about if we tell postman hey after you've checked the api status go to the list of books so we have to get here the name of this request exactly as it is i'm going to simply copy the name and put it here as a string so going back to the collection runner i'm going to hit here this one and if you look here you will see we had api status we have you know registered the api client no it's no longer there we have jumped directly to the list of books and you know the flow continued we didn't want to skip any other requests and you can see here that the register api client is not present an alternative to doing this is to move this right here at the end and for example you can go to this delete order request and specify postman set next request and this time we don't want to go anywhere else we just want to say stop so in order to say stop we simply say specify null null means don't go anywhere else don't go here for example gonna run it again this one with the api status has absolutely no effect it will go to the list of books just as instructor but this is also the normal behavior what has changed here is that the delete order request will be essentially the last request because it will instruct postman hey stop the loop now the thing with these loops is well it can get crazy so you have to be very careful when you're using these conditions and especially when you want to stop something if you just want to skip something that's totally fine but just going to demonstrate what's happening if i'm going to set it to list of books so it's running and running and running so it will essentially run forever because we don't have any condition that's telling it to stop it will continue running endlessly so i'm going to manually stop it here but especially if you want to do automation it's probably not a good idea to have a job running all the time so just be very careful the conditions that you're writing and use the collection runner to test it out before you do anything else so we have managed to automate this with a collection runner we still need to do this manual click there and how about a way to run this collection all the time but not to worry about doing that click and there is a functionality that is built in imposement and that is the monitors you can notice here from collections a bit further down you have monitors but also from the context menu of the collection you can select here monitor collection so monitor collection or clicking here on monitors and clicking on create a monitor will take you to this page so let's see here the monitor name will be check books api say for example we want to make sure that this books api is working all the time without us having postman open or without starting the collection runner and we can define a frequency so for example we can decide run it every day run it every weekday and so on so there are a lot of configurations that we can select here and i will not get into all of them of course what's important here if you go this way you have also to select the collection kind of important so we're using the simple book api the only collection available in this workspace i'm going to go ahead here click on create and once this monitor has been created you don't need to do anything else it will start on its own and you will get a notification by email something went bad of course just for testing purposes i will run it manually once but if you don't write menu it will start on its own according to the schedule this execution will happen on the postman infrastructure and is totally decoupled from your browser your computer or anything else it is a relatively easy way to check if something is working in this case you will see here that it says unhealthy something went bad so we can scroll a bit down here and we'll see this report and it will show us what has happened and you will see here that the test that we had here the first request that we have they are working but as soon as we do something with orders it will not work anymore the test will fail and would say here 401 unauthorized so what's going on there are not so many information in regards to this and you'll kind of have to guess like what has happened as you remember at one point we have created inside our collection this token which we have manually generated and we haven't specified it in the initial value now when we have created this monitor essentially we have shared this collection with postman and because we haven't provided the access token they don't know what they should do so this is why this will fail so if we go ahead and add the current value to the initial value save it go back to the monitor and run it again you will see now that it has worked perfectly unfortunately when something doesn't work well here it's a bit harder to debug because you don't have access to all the information that you would normally have inside postman but especially when everything works properly still a pretty powerful tool now typically when anything fails around automation or with a collection runner or here with a postman monitor it is typically regarding missing postman variables or something that hasn't been properly set so it's always a good idea to check that first the most important tool when trying to automate a collection run is newman and newman is a cli tool that can take a postman collection run all the tests and at the end also generate a report if you know how to use newman you can run a postman collection with api tests on any professional server that deals with building and testing software like for example jenkins gitlabci teamcity or anything else that you use we're not going to look into specific integrations but i wanted to show you how we can properly use newman in order to use newman locally on your computer you need to have nodejs installed and i've added some details on how to do that inside the course nodes i've opened here terminal and i already have new one installed so i'm gonna write here newman dash dash version and this will indicate that newman has been properly installed on my computer now you're probably wondering how can we get access to the postman collection that we have and run it with newman and that is definitely a very good question first of all you can go to your collection click on this three dots and export this collection as a json file i have created a new folder to hold this collection and i'm going to simplify a bit the name so it's going to be postman underscore collection.json let me go ahead and save it an alternative way to doing this is simply clicking here on the context menu of the collection clicking on share collection getting a public link and this public link will be generated you need to pay attention that this link does not automatically get updated when you update something inside your collection and every time you make a change and use this public link you have to come back here and click on update link to make those changes visible there's also a third way which i'm not gonna show by using a postman api postman also has an api that allows you to get to these collections by using an api key that will add in the course notes some details about it so there are three ways on how we can do it and i'll be demonstrating two of those so from the terminal window that i have i'm gonna go inside the folder where i have saved this collection this is a simple book api and you will see that the postman collection is here so i can simply use newman run and then i'm going to specify the path to the collection now you can notice that the entire execution has been successful all the tests have been generated properly everything seems to be working fine the alternative to using it as a file is something like newman run specifying here the link where the collection is this can be essentially anywhere where it's reachable over http i'm going to simply copy the link that we have here as a public link and absolutely the same thing will happen the reason why this may fail is again due to variables or missing tokens that you may have in your collection which either are not set as the initial value or are only available as a global variable or something that hasn't been exported if you're using for example environment you need to export those environments as well and also specify them here probably one of the most important things when working with newman is the possibility of generating reports and one of the reports everyone in the postman community absolutely loves is the html extra report which will generate an html report now it is not only nice to have a good looking report but it's also super helpful when you're trying to debug something that went wrong this report will contain anything that you log it will contain the full request and the full response to really really a lot of data i'm going to link you in the course notes also this reporter and how you can install it and i'll also go through the installation steps and how to configure it in a bit so this is the command that you need to run in order to install this reporter i already have it here and in terms of the usage you can notice here that we have here newman run and it's the collection and all we have to do is specify the reporter we can use dash dash reporters which is my preferred way of specifying any flags or any additional information to a command because it's just much easier to read so this is the newman run command i'm going to write here reporters we're going to still keep the cli reporter this is the cd reporter what you're seeing here and without any spaces comma and write html reporter and you're writing these commands it has to be exactly as it is so it's not html report it's html extra sorry but you have to write reporters space and then specify the reporters it's not reporters equals or anything like this so be very careful what you're writing and also as you've seen i've written the wrong reporter name so this has been executed and i will look inside the folder to see how this report looks like so inside that folder you'll notice that an additional folder has been created it's called newman and it contains here an html report that you can open by double clicking on it what you'll see here is absolutely like an overview of what has happened in terms of requests and responses with how many requests have been sent you can go to the requests you can investigate what happened with each request for example order book you can open it up you can see that has been a post request you can see the address you can see which request headers have been sent so for example if you're having like any problems with authorization you'll see here if the proper token was sent if you see here for example a postman variable that hasn't been resolved it's probably one reason why something failed so it really gives you a lot of information in a very nice and easy to read format both for newman and for the html reporter there are tons of configurations that you should know or especially if you want to get started with this you really have to get very familiar with the documentation try to understand which flags are available what you can configure you can specify the names of the reports and many other things we are coming towards the end of the course and i wanted to give you the big picture in terms of automation and why newman is so important and where does everything that you have learned fit here's a pretty realistic project that i have this is an api and essentially this api has a built pipeline this is a piece of software that goes through a build process so this is where the code is being compiled it has some internal tests that are being executed unit tests and also some code quality then this api is being deployed to a server and then i have here a stage of doing api testing so once i have deployed this api somewhere i'm using a postman collection in human to run some tests and to ensure that the api is working properly and just in case something is not working properly i rely on the postman test and on human to notify me and tell me inside this pipeline hey the last change that you have done caused some issues there were some tests that failed and this is where everything fits in together so for example if i go to this api testing stage here and i'm looking inside the job well what i will see here is the newman execution i have here newman run i'm running a collection i'm also specifying some environments so one environment here that i'm using i'm also specifying reporters like cli reporter html extra junit and specifying where i should save a specific reporter and so on in addition to this in addition to getting all this information here you can go here to browse and i will see here inside the newman folder i'll have the html reporter and here i'll be able to debug if something went wrong way to understand what has happened and so on so this is essentially how everything comes in place we have an api that we want to use and test and ensure that it's working properly we have gone through the manual process of testing it but once we are happy that the api works and we have understood how it works we have documented that functionality by writing api tests and we have taken this execution of the test through different stages first of all within postman just to make sure that everything worked properly but then we have used that collection and using newman we could essentially automate this execution run and integrate this postman collections with many other tools we're showing here the example we get labci you can do the same with jenkins with teamcity circleci or any other continuous integration continuous deployment server that you may be using we have accomplished so many things in a very short amount of time i know this was a lot to take in but i hope it was useful and that this has opened your appetite for learning more if the scripting part was difficult and you are still confused about javascript variables objects arrays you can benefit from taking a basic javascript programming course suppose you want to learn more about api testing and postman in that case you can explore topics around datadriven tests where you use an external csv or json file to fit different data sets in your request or schema validation where you essentially test the structure of the response in one go instead of going property by property or you can go deeper into authentication and learn about oauth2 you will find links to more advanced tutorials that show different things you can do with postman in the course notes hope you have enjoyed this course and i'll be very happy to see you again bye now
