With timestamps:

00:00 - In this course, Pete LeMaster will teach you how to create a classic Android style shooting game
00:05 - with Pygame and Python, completely from scratch.
00:09 - Pete is a control systems engineer and creator of the LeMaster Tech YouTube channel.
00:14 - All right, so let's do a quick project showcase and give you a little background
00:18 - in description of the project before we dive into the tutorial.
00:21 - All right, so some of the highlights of this project are it's really a classic arcade style
00:26 - feel with like scrolling enemies of varying speeds and sizes that give you progressively
00:31 - more points as they get more difficult.
00:33 - We created three game modes where you can see how fast you can clear the entire game
00:38 - in free play mode and then in accuracy mode where you have limited ammo to get as many
00:43 - points as you possibly can.
00:45 - And lastly, there's a timed mode to see how many points you can get before your time runs out.
00:49 - You can also pause and resume mid run in any game mode or restart at any time.
00:55 - And then your high scoring is tracked and saved in an external text file
00:59 - that you can reset from the menu screen if you ever want to start fresh.
01:03 - The static images were all created ahead of time using Canva,
01:07 - but you could make your own versions using anything from PowerPoint, Google Slides, Canva,
01:11 - Photoshop, any other software you like.
01:14 - You could even just download images from the internet to customize yours.
01:18 - I included all code and assets including images, sound effects and music,
01:22 - font and text files that you would need for this full build at the GitHub link in the description
01:26 - of the video as well.
01:28 - The basic steps that we do to build the game are import and set up pi game as well as basic
01:33 - game variables and then import some of our images.
01:36 - Then we draw the static background images onto the game.
01:39 - Then we draw our gun and have it rotate based on mouse position.
01:43 - Then we draw the enemies into the game and then we procedurally generate the enemy's starting
01:47 - coordinates so we don't have to give each enemy individual code.
01:51 - And then we make all of the enemies move with progressive difficulty based on what tier
01:56 - enemy they are.
01:57 - And then we check to see if our mouse click collides with targets when we shoot.
02:01 - And then we advance between levels once we've killed all the enemies on that screen.
02:06 - And then we draw the scoring and status elements onto the screen including total shots taken,
02:11 - how much time has elapsed, how many total points we've scored,
02:14 - as well as the status saying what mode we're in.
02:17 - And then we show how to navigate the main menu screen, the pause screen, the game over screen
02:22 - and all of the code that comes with those buttons.
02:24 - And then we handle game over commands and conditions as well as high score tracking
02:29 - including reading and writing the high scores to an external text file.
02:33 - And then lastly we take a look at adding some awesome background music
02:36 - and sound effects to the game.
02:38 - All in all it takes just over two hours to build from scratch.
02:41 - It's around 400 lines of code.
02:43 - I had a ton of fun building this.
02:45 - I hope you do too.
02:46 - So without any further ado, let's get right into the tutorial.
02:50 - All right, let's dive right into this tutorial.
02:52 - I'm sure I just finished giving you guys a killer intro.
02:56 - So as always when you're building a pie game game,
02:58 - just start by importing pie game.
03:00 - You may need to run pip to install it if you don't already have it installed in your package.
03:06 - And then we're going to be doing some stuff with radial geometry.
03:09 - So using radians and degrees.
03:12 - So just import the math package right up front as well.
03:14 - And then go ahead and do pie game.init to sort of initialize
03:18 - everything in the pie game package that we'll be using in this game.
03:22 - And let's start just creating some setup variables.
03:25 - So go ahead and create an FPS or your frame rate which will make 60.
03:29 - And then create a timer using pie game.time.clock.
03:33 - And then let's go ahead and just grab a font real quick.
03:36 - So any game where you're going to be writing text,
03:39 - which in our case we're going to be saying like the score and the time elapsed.
03:43 - So we know we want font.
03:46 - Go ahead and define a font right up front.
03:48 - And I'll just call it pie game.font.font.
03:53 - So quick note, if you don't want to grab my full assets package from the GitHub,
03:59 - you'll need to create a lot of things.
04:01 - You can do every graphics thing that I created.
04:04 - You can make your own in PowerPoint or Google Slides.
04:08 - Or you can just use like Canva, which is a nice online design service.
04:13 - I made all of mine in Canva Pro.
04:15 - I'm sure I talked about this in the intro a little bit.
04:18 - But essentially I did a lot of the static text design
04:21 - ahead of time so we didn't have to do every piece of it in pie game.
04:26 - It's definitely possible to recreate almost everything we're doing purely in pie game.
04:31 - But it's going to speed the tutorial up a lot and make the game look a lot smoother
04:35 - to kind of use a separate application to design.
04:38 - Because pie game is not exactly a design tool.
04:41 - So you're going to see a lot of these very polished screens
04:44 - that are actually screens I've already made.
04:46 - So I'm sure I said something about that in the intro of this video.
04:50 - But just in case I didn't there, I covered my butt.
04:53 - So if you want to use like a free font and not go get anything from the internet,
04:59 - you can just use freesandsbold.ttf.
05:02 - It comes installed with almost any application.
05:06 - Anytime you install your IDE, you're usually going to be able to find this one.
05:11 - Now I actually went and grabbed an font from online for free.
05:16 - And I put it in this font folder.
05:17 - It's just called myfont.ttf.
05:20 - So if you're following along and you have a font that you want to use,
05:24 - or if you just want to customize the font in your game,
05:27 - just go ahead and point it to there.
05:29 - But actually this alone is not going to work because we have it nested in a few folders.
05:34 - So we need to point to it, which is going to be assets forward slash font,
05:38 - and then forward slash my font just like that.
05:41 - I know a lot of the people who have been on this channel for a while have
05:45 - a lot of familiarity with pie game fonts,
05:47 - but I like to assume there's beginners out there every time as well.
05:51 - So next thing we're going to do is we're going to create two constant variables
05:54 - for our screen width and height and store them in width and height.
05:58 - And then right away we're going to use those in screen equals piegame.display.set mode.
06:04 - And then just in square brackets, give it a width and a height.
06:08 - We're going to be referring to width and a height in this project quite a lot.
06:11 - So it's going to be nice to have those in variables,
06:13 - other than just like having them hard coded
06:15 - and trying to remember what we put for everything.
06:19 - And if you decide you want to mess with the overall dimensions
06:23 - and make it a different size,
06:24 - you're just going to have to scale a lot of the images that I included in the GitHub.
06:29 - All right, so now let's create some empty holder lists for our backgrounds,
06:34 - our banners, and we'll just create level equals zero.
06:39 - And I think we have a different colored gun for each level as well.
06:44 - Yeah, we do.
06:45 - We have a different colored gun for each level.
06:47 - So we will also create a list for guns here.
06:51 - And we're going to create some for loops to automatically populate those.
06:55 - You can see in each folder, I gave each levels background, banner, and gun,
07:01 - just a numerical number so that we can use a for loop
07:05 - and just address it to that number.
07:07 - So let's go ahead and take a look at how to do that.
07:11 - Excuse me.
07:12 - All right, so what we're going to say is for I in range,
07:17 - and then we don't actually want it to just be three.
07:20 - So there's three levels total in my version of the game.
07:22 - You're welcome to build it out more.
07:25 - But we want this for loop to give us the values one, two, and three.
07:29 - So to do that, we need to say from one to four,
07:32 - because Python for loops are not end inclusive, but they are start inclusive.
07:37 - So this is saying for range starting at one, going until four, but not including four.
07:44 - So this for loop is going to do an iteration where I equals one, two, and then three.
07:49 - And for those three things, we want to append an image to all of our lists.
07:55 - So we're going to do pygame dot, so bgs dot append,
08:00 - which is the command to add an item to a Python list.
08:03 - And then we're going to do pygame dot image, image dot load.
08:08 - And then that's the py games modules built in command to load an image into your game.
08:13 - And we're going to make them formatted strings because we need to use I in
08:18 - there. So it's going to be f and then assets forward slash bgs forward slash and then in
08:25 - curly brackets so that we can use a variable, do curly brackets, I and then dot png.
08:31 - So this is going to go through and it's going to grab backgrounds one, two, and three without us
08:36 - needing three separate lines of code.
08:40 - And you could say, well, we had to set up a for loop to do that.
08:42 - So it's only saving us one line of code right now.
08:45 - But we can do the exact same thing for guns and banners.
08:49 - So it's going to be banners dot append.
08:51 - And then I'm going to copy the rest of this because it's going to be the same thing.
08:55 - We just need to update the direction a little bit.
08:58 - So instead of bgs, it's going to be banners and then for guns dot append.
09:04 - And I'm hoping because this is all very arcade style and very like fun,
09:09 - kid friendly, like not offensive that YouTube's not going to care about how much
09:14 - YouTube's not going to care about how many times, you know, we say guns and shooting in this video,
09:19 - because it is not about actual violence.
09:21 - It is just about a fun little game.
09:23 - But you never know, YouTube's got interesting rules,
09:26 - but I don't think they care about the master tech too much.
09:30 - All right.
09:32 - And so for now, let's go ahead and just leave it at that.
09:36 - And I think that's probably good enough for our initial startup here.
09:41 - So let's just go down to the main game loop now so that we can get the screen to kind of start
09:46 - showing up and then we'll start filling it in with more fun and useful stuff.
09:51 - So we'll say run equals true.
09:54 - And then while run.
09:56 - Okay.
09:56 - And so this is basically a quick and easy.
09:58 - We create a running variable that's a boolean true false.
10:02 - And we say while it's true, so while run, then the first thing we want to do every loop
10:07 - is going to be timer.tick at our frame rate, our FPS.
10:11 - And then just really quickly to get the screen kind of populating.
10:16 - We'll do screen.fill.
10:20 - And we'll just make the background black as a default.
10:23 - And then probably the easiest thing to do right after that is let's go ahead and put
10:27 - the banner in the background of whatever level we're in.
10:30 - So we'll say screen.blit and then bg's.
10:34 - And then we're going to use one, two and three as the level, but their indexes in our list
10:39 - are zero, one and two.
10:41 - So we'll say level minus one.
10:43 - And then we're going to put that in position zero, zero.
10:47 - So that's saying we want our banner, our background image.
10:52 - That's this, the actual like frame for the level.
10:55 - We want that to be in the top left corner for its starting position.
11:00 - And then we're going to do basically the exact same command for banners.
11:05 - So we'll do banners, but then instead of zero, zero, it's going to be zero.
11:09 - And then for height, we want height minus 200.
11:12 - So I made my banners 200 pixels high.
11:15 - So that's where we want those to start.
11:18 - And now we're not going to see anything unless we make this level variable a one instead of a zero.
11:24 - Because the way I'm going to have it work is if you're in the menu or you're paused or you have
11:30 - the game over screen up, we're going to treat that like level zero.
11:33 - So all the important game stuff like score and time elapsed will be active only when level is
11:39 - not equal to zero.
11:41 - So for, we are going to start on level zero, which will take you to the main menu.
11:46 - But for now, let's actually start on level one, just so we can see some stuff.
11:50 - And then right now, this is what's called an infinite while loop.
11:54 - So there's actually no way to exit this loop.
11:57 - And that'll cause your game or your computer to crash, maybe both.
12:01 - So we need to just create a way to get out of the infinite loop.
12:04 - So it'll be for event in pygame.event.get, just like this.
12:10 - And then we're going to say if event.type is equal to and then pygame.quit,
12:15 - which is just this unique pygame command that's about the little red X that's in the top right
12:22 - corner of your window, that button is just pygame.quit.
12:25 - And so if we get pygame.quit, then we want run to be equal to false.
12:29 - And then we just need to come outside of our for loop and do two commands.
12:33 - The first one is pygame.display.flip.
12:37 - And then outside of our while loop, it's pygame.quit.
12:42 - And this pygame.display.flip is just essentially the command that says take everything we've
12:47 - told you to draw into the screen and actually put it on the screen.
12:50 - And then pygame.quit is what will actually close the program.
12:54 - So hopefully this already just these lines of code that we've set up are going to give us
12:59 - the background and banner for level one when we boot it up.
13:02 - And there you can go.
13:03 - This is actually pretty cool looking already.
13:05 - In my opinion, I might be biased, but I think that's pretty cool.
13:10 - And if you want to see all the levels, all you have to do is change what level we start on
13:14 - initially to two, and you'll see our like Western theme.
13:18 - And then three should give us our like space theme.
13:21 - Okay, so there we go.
13:22 - That's pretty cool.
13:24 - Why don't we take a look at drawing the gun on the screen.
13:28 - So the like little arcade style gun.
13:31 - And we'll do that with a function.
13:33 - So let's come down into just underneath where we blit everything else right now.
13:39 - And let's say if the level is greater than zero.
13:42 - Okay.
13:43 - So if level greater than zero, then we'll do this thing called draw gun.
13:49 - And then we're going to come up in between our variables and our main game loop.
13:55 - And we'll create the function draw gun.
13:58 - I'm not going to put any caps in it.
13:59 - And I'm going to spell it right.
14:01 - It's a one to punch.
14:03 - All right.
14:04 - And so the gun is basically something I want to have almost like an arcade gun.
14:08 - It's like rotating about the center roughly.
14:11 - And it's just really more for effect.
14:13 - Like the actual shooting is going to be based on your mouse, not based on this gun.
14:17 - This is purely for style.
14:19 - But I think it's really important since we're making like a arcade style game to do this step.
14:24 - So what we're going to do is we're going to say the mouse position
14:28 - is equal to pi game dot mouse dot get pause.
14:32 - And I happen to think this code we're about to do is actually really cool.
14:35 - We're going to track where the mouse is and we're going to rotate the gun so that it's always
14:40 - looking at the mouse.
14:41 - And we're going to do it with geometry, which maybe you're a computer scientist
14:45 - because you didn't like geometry and math and you didn't want to go into physics.
14:48 - But I promise this is not going to be too bad.
14:52 - Okay.
14:52 - So the point that we want the gun to essentially pivot around will be the middle of the screen.
14:58 - And then kind of right at the top of the banner.
15:00 - Because if you think of yourself as like the player of the game,
15:03 - you're kind of standing at the banner more or less and shooting from there.
15:08 - That's how I see it.
15:10 - So we're going to put this point for the gun to pivot about right at width over two.
15:14 - And then height minus 200 is where we're going to put that point.
15:18 - Okay.
15:19 - And then we're going to when the mouse clicks, we're going to just show a little dot where we
15:23 - clicked.
15:24 - So we're going to say lasers equals.
15:26 - And then we'll say we're going to create a little list here of what color we want the
15:32 - different lasers for each level to be.
15:34 - So I'm going to say red, purple, and then green.
15:38 - And this is pure preference.
15:39 - I just think they look pretty cool.
15:41 - And I made my different like arcade guns for each level.
15:44 - I made red on the first level, purple on the second, and then green on the third.
15:50 - So I'm just going to have little mouse lasers that look the same.
15:54 - Okay.
15:54 - And so now we're going to store the clicked status of the mouse in a list that I'll call clicked.
16:00 - Clicks and that command is pi game dot mouse dot get pressed.
16:06 - And what's nice about this is it's going to return a little list that tells you the left,
16:11 - right, the left mouse button, the scroll wheel click and the right mouse button in a little
16:18 - list called clicks.
16:20 - And so what we'll say is if the mouse position zero is not equal to the gun point zero,
16:30 - and this is actually a really important step because we are going to calculate the slope.
16:37 - And so slope, if you're not familiar is rise over run, which means Y2 minus Y1 over X2 minus
16:46 - X1.
16:46 - That's basic geometry.
16:48 - And you don't really actually need to know the theory behind it just to follow along.
16:52 - But what's important about that is because it's rise over run, if you ever had a situation
16:58 - where your mouse was exactly in the middle of the screen as well, your run becomes zero.
17:04 - It becomes X2 minus X1, but they're the same variable.
17:07 - And so you get a value of zero and then it's divide by zero computers don't like dividing by zero.
17:13 - So in just like on paper, you would write down infinity for the slope, but the computer can't
17:19 - process that.
17:20 - So basically, this is just a cover our butts.
17:23 - That's maybe longer than I should have talked about that.
17:25 - But I think it's important to explain where I'm coming from.
17:29 - All right.
17:29 - So as long as that is not the case, then we're going to calculate the slope,
17:33 - which is going to be mouse position one, gunpoint position one, and then divided by
17:40 - mouse position zero minus gun point zero.
17:46 - Okay.
17:47 - And so this is calculating the slope of a line.
17:50 - If you were to draw it between where we're going to be rotating our gun about
17:54 - and where our mouse currently is.
17:57 - And we'll say else because we're going to use the slope for math.
18:00 - So if we are in a situation where our mouse is exactly in the middle of the screen,
18:05 - then we'll do what we would.
18:07 - We'll say else and then slope is equal to just a really big negative integer because
18:15 - basically that's going to just give us a line that's more or less straight up.
18:19 - This is as close to infinity as we have to get for our game.
18:23 - If you don't like that, you can play around with that and kind of see what happens as you
18:26 - change that.
18:27 - It's not the most important part of the project.
18:29 - So I'm not going to spend too long on it.
18:32 - All right.
Now we're going to get the angle that that slope correlates with.
18:36 - And to do that, we're going to use math and then the inverse tan or a tan command,
18:41 - which again, basic geometry inverse tangent of a slope of a line will tell you the angle between
18:47 - like the horizontal axis and that line.
18:50 - But again, geometry is kind of boring when you're building games.
18:54 - So we're going to move on pretty quickly from that.
18:56 - You just take my word for it.
18:57 - And then to get the actual rotation that we want, we're going to use math again,
19:01 - and we're going to convert our degrees or our angle into degrees because angle is being read
19:07 - in at radians and the pi game dot transform dot rotate command we're about to use needs
19:13 - it in degrees instead of needs in degrees instead of radians.
19:18 - Okay, so now let's go ahead and take a look.
19:20 - We're going to do two different things based on the mouse position.
19:24 - So if we look at one of these guns real quick, we'll see that the right half of the rotation
19:30 - as I'm looking at my screen, the right half of the rotation will look pretty good if it's like this.
19:38 - But it would actually look better if this was flipped horizontally when we're on the left
19:42 - half of the screen rather than like awkwardly bending all the way down.
19:46 - Awkwardly bending all the way backwards to shoot it'll look more like you just
19:50 - rotated your shoulders or something.
19:52 - So let's go ahead and take a look at the mouse X position.
19:57 - So we'll say if mouse pause zero is greater than we'll start with less than width over two.
20:05 - Okay, so this means that the X position of our mouse is on the left side of the screen.
20:10 - Then we'll say gun is equal to pi game dot transform transform dot flip.
20:18 - And then we just have to tell it what image we're flipping.
20:21 - And so it's going to be guns.
20:23 - And then again, it's going to be level minus one because levels will be one, two and three.
20:27 - But the indexes in the lists will be zero, one and two.
20:31 - That's just how indexes work in lists.
20:34 - So don't come at me.
20:36 - All right, and then we just give it true and then false because this is do we want to flip it in the X
20:42 - direction, which yes, that's the direction we want to flip it in.
20:45 - And then the second one is Y direction and we don't want to flip it in the Y direction.
20:49 - Okay, and now what we'll say is if no, that's just that's just defining the gun.
21:01 - Now we will say if mouse position Y one is less than and then we'll do 600.
21:14 - So think about our window.
21:17 - The first 600 are the shooting gallery and then the bottom 200 are the menu.
21:21 - And we don't want to be shooting when we're in the menu.
21:24 - We want to be like selecting the pause button or the restart button,
21:28 - or we're just looking at our score or whatever.
21:30 - So we only want to actually draw the gun on the screen.
21:34 - If our mouse is in the like shooting gallery area.
21:37 - Okay, so if the mouse Y position is in that first 600 of the screen,
21:43 - then we will do screen dot blit.
21:45 - And then rather than just blitting the gun, we need to transform the gun image.
21:50 - So pi game dot transform dot rotate.
21:54 - And then it's going to be the gun.
21:55 - And then here's where maybe my the way I format my guns in hindsight might not have
22:00 - been perfect, but there's a really easy fix for it.
22:03 - I have the guns pointing straight up initially.
22:06 - And if they were pointing horizontally, it would just go where we told it.
22:09 - But so basically we're off by 90 degrees from what like a logical rotation might be.
22:15 - So we just need to say 90 minus that rotation.
22:18 - And as soon as we boot this up, you'll see why we need to do that.
22:22 - And again, feel free to mess with that angle and see what happens if you don't.
22:26 - Okay, and so then we need to give it an X and Y position to blit onto.
22:31 - And it's going to be width over to minus 90.
22:35 - Because the actual image of the gun has a lot of dead space to the left and to the right.
22:40 - So it's going to be width over to minus 90 just to scoot it more to the middle of the screen.
22:47 - And then it's going to be height minus 250.
22:49 - Because we don't want to sit right at 200.
22:53 - Otherwise, the whole gun would be down in like the score section.
22:56 - And that wouldn't look that would look kind of weird.
23:01 - So this is just going to move it where we actually want it.
23:04 - Okay, all right, so let's go ahead and say if clicks zero,
23:10 - then let's also go ahead and pi game dot draw dot circle.
23:14 - Let's go ahead and draw on the screen.
23:16 - A little color to indicate that we can detect that we've clicked.
23:21 - And this is going to be really useful.
23:23 - Once we get to the point where we're actually checking to see if we've shot enemies,
23:27 - then this will be really useful.
23:30 - So we're going to add the mouse position, we're just going to draw a little circle,
23:33 - the color of our gun, whatever our laser for the level is, and we'll make it radius five.
23:39 - And so now we just need to say else, right?
23:41 - So we checked what to do if the mouse position is on the left half of the screen.
23:46 - So now we'll say else.
23:49 - And if else it's a little bit easier, then the gun just becomes equal to guns at level minus one.
23:56 - We don't have to flip it because it's already oriented this way.
24:00 - And then we're going to say if so now we can kind of take these three four lines
24:07 - and we can copy them down because this is very similar.
24:10 - It's still if the mouse is less than 600, but now instead of 90 minus rotation,
24:15 - it's actually 270 minus rotation, which should make sense to you guys.
24:20 - We flipped it 180.
24:21 - So we need to add that 180 onto our correction factor.
24:26 - But then with over two, and this time it's minus 30 again, feel free to boot this up.
24:32 - I'm trying to save you a little time in the interim and I know how long my tutorials can get.
24:36 - But feel free to play around with this if you want.
24:40 - This is just essentially a correction factor.
24:42 - So the guns actually sit in about the middle and about the same position.
24:48 - And that should be all we need to do.
24:49 - If we boot this up, I don't think, yeah, I left on level three.
24:52 - So we should get the green gun and you can see right away.
24:56 - It's huge.
24:57 - And that's because I made very large gun images because it's typically it's easier
25:02 - to take something, make it detailed at large scale,
25:05 - and then compress it down so that it's a little bit smaller.
25:09 - And to fix that, it's a really easy command.
25:11 - It's just pygame.transform, just like we did for rotate.
25:14 - But this time it's scale.
25:17 - And then so first thing you give it is the image, which is pretty easy.
25:20 - It's this image we're loading in.
25:22 - And then you just give it another argument, which is what you want to scale it down to.
25:26 - And so my original images were 500, 500.
25:30 - So to keep overall dimensions correct, to keep overall scale correct,
25:35 - we're going to scale it down to 100, 100.
25:38 - And that right there is going to fix it for all three of our guns, or it should.
25:43 - Yeah.
25:43 - So now you can see we get this cool little rotating gun.
25:46 - And I mean, again, I get geeked out over some of this stuff,
25:50 - but I think that's a really cool bit of programming.
25:52 - If our mouse is down in the menu, the gun goes away because it knows we're not trying to shoot.
25:56 - We're maybe selecting a menu button.
25:58 - But as soon as we're back in the gallery, we have this gun that's rotating.
26:01 - And if you think of yourself as like the game player, that's pretty much where you'd be standing.
26:06 - And you can see when we click, we get this little red, like, pew, pew, like Star Wars laser.
26:12 - Free sound effects for you guys.
26:14 - And let's go ahead and take a look.
26:16 - It should be red on level one.
26:17 - If everything's working properly.
26:19 - Yeah.
26:19 - So that right there, that looks pretty good.
26:22 - So we are going to go ahead and move on.
26:24 - Oh, having a little trouble here. We're going to go ahead and move on.
26:29 - And we got that really satisfying game mechanic down.
26:32 - But I think we should probably next take a look at drawing a level onto the screen.
26:41 - And by draw level, I sort of mean draw the targets of a level.
26:46 - So to do that, we are going to want to load in all of our targets.
26:51 - And in here, you can see, I have birds for level one.
26:55 - Again, these are not real birds.
26:56 - No animal violence is intended.
26:59 - But I just feel like I got the disclaimer out, but we have plates for two.
27:04 - Because I don't know, something about like an old timey Western like plate shooting gallery.
27:08 - And then for three, we're going to shoot spaceships.
27:11 - So let's go ahead and load our targets in.
27:13 - And to do that, we are going to want to create a list similar to what we did for
27:18 - Bee Gees and banners and guns.
27:21 - And now we're just going to make a list called target images, target images.
27:27 - And this is actually, we want this to be a list of lists.
27:31 - So we want a list of each image for each level.
27:36 - So we have three levels, right?
27:37 - So we're going to put three items in here.
27:39 - But then each of them should be a list of the three images for that level.
27:44 - Hopefully that didn't get too confusing.
27:46 - And then one more thing I'm going to do is actually create a dictionary to look up
27:52 - how many of each like tier of enemy to put in each level.
27:57 - So in level one, I'm going to have 10 of the biggest or level one enemies.
28:01 - And then I may have five of the intermediate ones and then three of the smallest ones.
28:06 - And then in two, I'm just going to increase the total number of enemies by a bit.
28:10 - So we'll do 1285.
28:12 - And then just because I wanted to be difficult, because life isn't hard enough already,
28:17 - we're going to do three of the, we're going to do a lot of spaceships on the third level.
28:23 - And we're actually going to add in a fourth tier.
28:25 - We're going to add in this purple spaceship just for the level three.
28:29 - It's going to be real small, really high up on the screen and moving really fast.
28:33 - It's kind of like a, you know, boss challenge right before you beat the game.
28:37 - It's just add some difficulty.
28:39 - And so we're going to use this targets and target images inside this for loop that
28:44 - we're already using to populate those lists. Okay. Excuse me.
28:52 - All right. So first thing is let's handle what to do on levels one or two.
28:55 - So if I is less than three, then we're going to say for J in range, and we're going to go
29:00 - from one to four again, so that we use one, two and three.
29:03 - Then we're going to say target images.
29:05 - And this time it's not just target images dot append, it's target images at I minus
29:11 - one. So that'll give us again, I is going to be one or two.
29:16 - We want to write the images for level one into index zero.
29:20 - So target images, I minus one dot append.
29:25 - And then in here, it's something you should have already been familiar with because we
29:29 - did it right here.
29:30 - It's going to be this pie game dot image dot load with a transform as well.
29:34 - I'm going to put on two lines for you guys, just so it's a little easier to see here.
29:39 - But it's going to be we're going to scale these guys, and we're going to load them now from
29:44 - assets and then forward slash targets.
29:47 - And then this is kind of tricky, but you guys are going to handle it.
29:50 - No problem.
29:51 - We need to pull the image from I and then J.
29:56 - So I is telling us what level we're looking at the targets for.
30:00 - And then J is telling us which actual one to add.
30:04 - And that's why we have to separate it out between I is less than three and I is equal
30:09 - to three, because in I is equal to three, this has to be one to five so that we catch
30:14 - that purple spaceship as well.
30:17 - And then it wouldn't be super fun or entertaining if they were all exactly the same size, but
30:22 - it would also take me a long time to go through and manually give them each a size.
30:27 - And so what I'm going to do is I'm going to say, well, you're all going to be equal to
30:30 - 120 minus and then to make it kind of progressively more difficult, I'm going to make them smaller
30:37 - based on what level they are.
30:39 - So when J is one, we're going to bring the first ones down to 102 basically 102 by and
30:45 - then this will do 80 minus J times 20.
30:49 - So it's basically the first one will be 102, and then the second, and then the y direction,
30:55 - it'll be 68 tall, but then the second ones will be 18 by 12 smaller than that.
31:02 - And the third ones will be 36 by 24 smaller than that.
31:06 - So this is a fun way of without a ton of work, creating progressively smaller enemies
31:13 - as they as we go through and iterate through the list.
31:20 - So probably that confused some of you guys, but just drop me a drop me a comment if you
31:26 - got turned around there.
31:28 - Okay, and now let's look at the else conditions.
31:30 - And I'm actually going to copy all this because it's not that different.
31:34 - It's just else we need to say for J in range one through five.
31:40 - And I'm sure there's a clever way you could basically say like this is going to be I floor
31:45 - divided by three plus four or something and just do this all in one loop.
31:51 - But I don't feel like spending the time to think through this and this is already pretty
31:55 - efficient here.
31:56 - So great, this is going to give us all of the images loaded in for all of our enemies.
32:03 - So now if we go ahead and you're going to see me collapsing a lot of the functions while we're
32:09 - not working on them, that's just to keep the code a little cleaner, a little easier for
32:13 - me to move through, because obviously 400 lines of code, we're jumping all over the place.
32:19 - So that's what that is.
32:20 - But again, any questions at any point, just let me know in the comments below.
32:24 - And now let's take a look at what to do when we're drawing a level.
32:28 - So we'll say define, draw the level.
32:32 - So this is going to be drawing all of the enemies for the level that we're currently in.
32:36 - And so we'll say if level is equal to one or level is equal to two.
32:44 - And this this target rex is going to be essentially the enemy hit boxes.
32:49 - So as we're going through and we're drawing the enemies onto the screen, we're also going to
32:54 - create hit boxes because Pygame doesn't know where images are necessarily per se,
33:01 - it just starts by drawing them in a certain spot.
33:04 - But you have dead space.
33:06 - They're obviously not perfect rectangles unless you're building kind of like a boring game.
33:10 - No shade at anyone who's making an all squares shooting gallery.
33:14 - But so we're going to create hit boxes basically inside of the images.
33:19 - They're just going to be invisible rectangles that we'll use for collision detection later.
33:23 - And for levels one or two, we want this to initially start out empty.
33:28 - And then for level three, we just need to add a fourth tier in there for this empty.
33:33 - So that we have somewhere to place it.
33:36 - Quick water break.
33:44 - All right, now we're going to have to get a list of coordinates to where we want to draw these things from.
33:50 - And we'll do that initializing right after we take a look at what to do them do with them.
33:56 - So let's just assume that we've passed in a list of the coordinates of all the enemies.
34:02 - Well, it's going to be for I in range range, length of coordinates.
34:09 - So there, there, we're going to be taking the that's an in not a second I.
34:16 - So now we're going to be taking a look at each individual thing in our coordinates.
34:20 - And then we'll say for J in range.
34:23 - And then length of chords, I because coordinates is most likely going to be a list of lists.
34:33 - Then what we want to do is say target wrecks dot at I dot append.
34:41 - And we're going to put in a little rectangle that's going to say the hitbox of each thing.
34:47 - And so pi game dot wrecked dot wrecked, and it's going to be chords at I J.
34:54 - So that's what level.
34:55 - And then that's what individual enemy.
34:59 - And so I will say we're going to do some stuff here that is the right way to do it.
35:04 - But maybe it would have made more sense if we'd initialize the coordinates first.
35:08 - We're in a little too deep now.
35:09 - But I promise we're going to show how we initialize the coordinates right after this.
35:14 - And then I'll come back and review this if I remember.
35:18 - But so the X and Y starting position for these coordinates for the hitbox
35:23 - are basically going to be the X coordinate and then the Y coordinate.
35:27 - So chords I and then J.
35:33 - And then because each coordinate pair is an X and then a Y coordinate in a tuple,
35:38 - you have to say, well, this is the X coordinate.
35:40 - This is the Y coordinate.
35:41 - And I'll tell you right off the bat that the images are also a little too big for us to
35:48 - use the exact starting X position.
35:50 - They're all they all have dead space on the sides.
35:53 - So 20 pixels makes a really accurate, more fair game.
35:58 - If you were to if you were to make that much smaller, like a plus five,
36:04 - you would just get a much wider hitbox or it would start kind of off to the left
36:08 - and not make a ton of sense.
36:10 - All right.
36:11 - So the four things we need to give a rectangle when we're defining it are X and Y starting
36:15 - position and then width and height.
36:17 - And for width and height, we're going to make it based off of we're going to make it
36:21 - based off of what level they're on.
36:26 - So it's going to be 60 minus I times 12 and then comma 60 minus minus I times 12.
36:36 - And so this will make them progressively smaller as we go up in difficulty tiers.
36:43 - Okay.
36:45 - Rename the element.
36:46 - Oh, just because I have an for loop in the outside world.
36:50 - And again, you may be saying, wait, I thought J was what tier of enemy they were.
36:54 - Well, that's not exactly right.
36:56 - These are coordinates just for whatever level we're on.
37:00 - Okay.
37:00 - So all right, we got to get through this one so that I can show you what the actual
37:04 - coordinates list is going to look like.
37:06 - So screen dot blit.
37:07 - And this is where we're actually going to draw the images onto the screen.
37:10 - So target images level minus one.
37:14 - And then the coordinates are just going to be level minus one.
37:19 - And then I we're still inside the for loop and we still need to draw the right image.
37:24 - So it's whatever level we're on from our target images.
37:27 - And then I, which says what tier they are.
37:31 - And then the actual coordinate pair.
37:33 - So I and then J.
37:36 - And so this is going to draw our image in the coordinates that we give.
37:40 - And then we're going to return a list of all of the rectangle hit boxes for those.
37:45 - Okay.
37:46 - So just target wrecks, not targets.
37:49 - All right.
37:49 - So I know I probably confused a few of you guys.
37:52 - I briefly confused myself there.
37:53 - We need to talk about initializing these coordinates.
37:57 - So let's come right before the while loop.
38:01 - We don't want to do this every single iteration of the loop
38:04 - because we really just need to generate the starting positions of all our enemies.
38:08 - And then we'll move them throughout the game,
38:10 - but we don't want to reinitialize the positions.
38:13 - Okay.
38:14 - So let's just say that let's initialize enemy and coordinates.
38:22 - And then after we do this, we'll go back up into our draw level
38:26 - and we'll talk about it a little bit more.
38:27 - All right.
38:28 - So initializing the enemy coordinates.
38:30 - Let's start with a list of all the coordinates that'll be empty.
38:33 - So for one, we'll do one, not ones coordinates.
38:38 - It's going to be a list of lists, right?
38:40 - So we'll have the coordinates for our tier one enemies,
38:43 - our tier two enemies, and our tier three enemies.
38:46 - And then we'll just make these lists right here for one, two, and three.
38:51 - And as always, we just have that one extra tier of enemy in level three.
38:58 - So we need that fourth empty bracket.
39:01 - All right.
39:01 - And now, I don't know why it's reformatting my stuff.
39:07 - Okay.
39:07 - And so now what we're going to say is for I in range, and then three, let's go back for
39:16 - I in range three, we'll say my list is equal to targets that dictionary we made at key one,
39:29 - right?
So the value, this is going to create a little list that is just the list in targets one.
39:37 - So we're saying look at the key inside of our targets dictionary for key one,
39:42 - and then take that value, which is 10, five, three, and store that in this little list,
39:47 - which is my list.
39:48 - And so we'll say targets one.
39:52 - And then we'll say for J in range, range, my list, I, okay, so this is saying
40:03 - now for each item inside of my list.
40:06 - And so remember my list at I for zero one and two is now going to be numerical values,
40:14 - which for level one is 10, five, and three.
40:17 - So this is saying for J in range, and then our for our first loop where I is equal to zero,
40:23 - it's going to say for J in range 10.
40:25 - So it's creating 10 coordinate pairs for us.
40:28 - And it's going to say one coordinates, cohorts, we'll say cohorts is okay.
40:37 - We're going to say one cohorts at I dot append, because again, we need to say it.
40:44 - Well, right now we're doing this tier list, and then this tier list, and then this tier
40:49 - list of coordinates.
40:50 - So one chords I dot append, and then we need to give it in here the coordinates where we
40:57 - want each enemy to be drawn.
40:58 - And just to make it really easy and kind of procedurally drawn, we're going to say the
41:02 - starting X position will just be a function of the total number of objects in that tier
41:09 - of enemy.
41:10 - So for example, if they are 10, and we have a 900 wide screen, each enemy is going to
41:16 - be spaced apart horizontally by 90 pixels.
41:20 - Okay, so we're going to start by saying append, and then width, let me get my parentheses
41:25 - correct.
41:25 - Here, we've got width, floor divided by which floor division just gives you essentially
41:32 - a round down to the closest whole integer, and then times J.
41:36 - So times whatever this is, if this is our 0th, if this is our first picture, it'll draw it
41:42 - at 90, if it's our second, it'll draw it at 180, et cetera, et cetera.
41:48 - And then for our Y coordinate, we'll make it 300 minus.
41:53 - And then I times 150, and then just to move them up and down a little, I didn't put a
42:00 - minus in, there we go.
42:02 - So this is basically saying, our first loop, we want to draw these suckers 300 down from
42:08 - the top of the screen, our second tier, we'll put at like 150 down, and we'll draw our top
42:13 - tier right at the top of the screen, where the images start at zero pixels from the top.
42:18 - Okay, and now we'll space them up and down every other just to be kind of fun.
42:23 - So we'll move them vertically by 30 times.
42:27 - And then this is J modulo two is essentially a J remainder two.
42:33 - So this is saying every other, we're going to have an odd number for J, which means the
42:38 - remainder will be one, which means that that means that this will be just adding 30 to
42:45 - its Y position. So this little bit of code is really just a simple, straightforward way
42:50 - to get like every other patterns in drawings.
42:55 - All right.
42:55 - And now we just need to do the exact same thing for two chords, except, well, really
43:03 - except nothing, except the text needs to change to two.
43:07 - But again, I felt it was a little bit easier to do it with separate for loops just because
43:12 - the third one is a little bit different. So now it's for I in range for and also this needs to
43:18 - be targets to and this needs to be targets three.
43:22 - And then because this one has four tiers rather than moving them up by 150 each time,
43:29 - we want to buy 100 each time. And trust me, when we get to the spaceship levels, that's
43:33 - going to be a lot of enemies, but it's still going to look really good.
43:36 - Okay. And so I believe that's all we need to do to generate the coordinate system.
43:43 - Let me re go through that one more time, just because I know there's probably a lot of confused
43:48 - viewers trying to follow along and saying, what the heck did you just do here?
43:52 - And if you didn't, good for you, you're really smart.
43:57 - But so basically, we're saying we want to quickly get a coordinate for every enemy we
44:03 - defined in our dictionary. So right, we said at level one, we want 10, 10 big red birds,
44:09 - five medium sized blue birds, and then three little green birds, and then 12, 8 and 5 for
44:15 - the plates. And then for the UFOs, we're going to have 15 red UFOs, we're going to have 12 blue
44:20 - ones, eight green ones and three little purple ones zipping around the screen. And the way we
44:25 - set this up as you're playing with your game, you can mess around with these numbers and figure
44:30 - out what you actually think like a fair number of enemies for each level is just by changing
44:35 - them here. And we set it up to be procedural and smart, so that it'll just be easily adjustable,
44:41 - and it'll just expand and kind of contract with changing those numbers. But so basically,
44:48 - right when the game boots up, and not inside the loop, we're going to generate some coordinates,
44:53 - and we're going to create these empty lists to store the coordinates, and we're going to
44:58 - create these empty lists to store the coordinates in. And so for level one, this first empty block
45:05 - is going to store all the red birds coordinates, this second block is going to store all the blue
45:09 - ones, and the third one will store all the green ones. That's what I is here. Are you the big red
45:14 - bird, the medium sized blue bird, or the little green bird? Okay, and then we're grabbing a
45:20 - temporary list just called my list from the targets dictionary based on what level coordinates
45:27 - I'm generating it. So in targets, we said level one is going to be this list of how many enemies
45:32 - to have, and we store that in my list. Then we create this second for loop, which is for J in
45:40 - range my list I so that's saying for however many of the bird that I'm currently looking at the
45:46 - tier that I'm currently looking at. So for big red bird, this is 10. So for J in range 10,
45:53 - and now I want to just create an x and y coordinate based on what tier of enemy I am where the harder
46:00 - smaller tier goes higher and higher up on the screen. And then the the larger birds are also
46:09 - going to be lower on the screen and then the number of enemies is going to determine your x
46:16 - position on the screen. So that's what we did. So now we're going to have three coordinates
46:22 - list one chords, two chords and three chords that are a list of lists or an array. Where each
46:31 - list inside there is a specific tiers set of coordinates. So if we look at draw level again,
46:39 - then we're saying for I in range, length of chords, which is telling us how many tiers of
46:45 - enemy do I have. Okay, and so for one and two, that's going to say three basically, because the
46:52 - length of chords list for level one and level two are going to be three items. And then for level
46:59 - three, this will be a four. But then we say for J in range, length of chords, I so this is saying
47:07 - for however many enemies of that tier there are. Then I want to create a hitbox based on what
47:15 - tier of enemy it is, which is I that will get progressively smaller as the enemies get smaller.
47:22 - And then I want to draw the image for that enemy onto the screen at its coordinate system. Okay,
47:29 - so super complicated, I guess. But I think you'll see exactly what we just did if we go ahead and
47:35 - boot this up. Should see a bunch of well, list index out of range. Okay, so let's go ahead and
47:43 - take a look at line 87 of our code here and see what's going on. Oh, it's just that we forgot to
47:49 - change this to three chords. So when it got to essentially, I equals four, there was nowhere
47:56 - to store that I equals three, there was nowhere to store that. So just be careful when you copy
48:02 - paste to make sure you catch all your copy paste mistakes. And I do not always do that. Okay,
48:10 - and so our birds is not on the screen. And I was about to panic that our draw level function didn't
48:14 - work. But you guys probably caught this, we didn't put draw level on the screen anywhere. So draw
48:21 - level. And then the coordinates that we want to pass in are just going to be one chords, if
48:28 - level is equal to one, then we're going to pass in one chords. And we are going to just do some
48:36 - L ifs based on what level we're on. So L if level is two, then pass in two chords,
48:44 - and then L if level is three, pass in three chords, three chords, there we go. And then two chords.
48:55 - Okay, so this should give us all of our birds. Nope, okay, argument must be rect style object.
49:05 - So I guarantee this is just me not using the right formatting, not properly copying something to
49:12 - the second line. So let's look here. So by game dot wreck direct, there needs to be one more parentheses
49:20 - level in here. So just double check dot append, that should be the back one and then dot wrecked
49:27 - should be. Yeah, so we need one more level of core. There we go. So inside pi game dot wreck
49:35 - dot wreck, there needs to be two sets of tuples x and y start position, and then width and height.
49:42 - And I just got the parentheses messed up. So let's try that one more time. There's a bunch of
49:47 - bunch of birds, but they're not, they're not spaced out appropriately. So let's go ahead and take
49:52 - a look at our initialized chords one more time just to see what we're doing wrong. Oh, I see it
49:58 - right away. These are supposed to be I times 150 minus 150 and minus 100. It's hard. It's hard to
50:07 - it's hard to teach and do at the same time. But let's take a look that should fix it.
50:11 - There you go. And you can see this. It's really cool. It's a cool spacing. Let's go ahead and
50:15 - change the levels to two and three just to kind of see where everybody starts. So this is where
50:20 - our plates will start. And then let's look at where our UFOs will start. And there should be a lot.
50:26 - Yeah, you can see we've got now we've got that fourth tier even, which is really cool. So shooting
50:31 - them doesn't do anything yet. And also we don't, we don't have any way of like moving between levels
50:39 - when you've shot all of your enemies. So let's go ahead and also when we draw the level, right,
50:47 - we get target rectangles back. So let's go ahead and say where is draw levels? Here they are. So
50:56 - these should all return target, let's say boxes, so we don't get confused with what target rectangles
51:04 - is. Okay, so let's go ahead and say target boxes, target boxes is equal to those. So now we're
51:12 - actually getting that back. And let's go ahead and take I think the next best thing to do is just
51:17 - going to be take a look at how to make those guys move across the screen, because then it really
51:22 - starts feeling like a game, it starts looking like an arcade game. And to do that, just like we made
51:27 - this draw level function, we're going to make a move level function. Okay, so we will say
51:34 - move level, and we'll give it the coordinates as well. And so to draw level, move level, draw
51:45 - level, move level. And I know you guys are like, Pete, don't forget the copy paste errors, because
51:50 - I keep having those. But I caught them this time, you guys, I caught them. All right, so let's go
51:56 - up above draw level, just because that's where I want to put it. And let's define move level. All
52:02 - right. And there's a lot of different ways you could make these guys move, you could make them
52:08 - wiggle up and down as they go across the screen. I'm just going to make it to where
52:12 - they all move laterally across the screen. And I'm just going to make the higher smaller targets
52:20 - move a little faster. So increasing levels of difficulty, that's pretty much how those arcade
52:24 - games work. But there are definitely ways you can spruce this up, just based on your own creativity.
52:30 - All right, so let's say if level is equal to one, or level is equal to two, then we'll say
52:39 - that our maximum value is three, right? So we need some variable that says how big our for loop
52:47 - should be if we only want to do this once. And then we'll say else, max val is equal to four.
52:55 - And now let's set up a for loop that'll move everything based on what tier of enemy it is.
53:01 - So we'll say for I in range, max val, that variable we just came up with, we'll say for J
53:10 - in range, length of chords at I, there we go. So this again, I know how many tiers of like
53:21 - parentheses and everything and nested for loops we're passing through, but try to keep it straight
53:27 - that we're passing in one levels worth of coordinates. And each coordinates list is an array
53:33 - where each item inside of that is another list of all of the coordinates for that item. So basically,
53:40 - we're saying for J in range, length of coordinates I, which is saying for as many enemies of the
53:46 - tier that I'm currently looking at. And then what we'll say is, we'll move the coordinates of the
53:52 - object that we're looking at into a temporary tuple, because you cannot adjust values in a tuple,
54:00 - it's just the nature of Python tuples, which is parentheses with two values in them, you can't
54:06 - overwrite those. So if we're trying to move them, if we're trying to move every enemy at the same
54:11 - time, we can't just overwrite the individual items in a tuple, we have to actually change just what
54:18 - the entire tuple is. So we'll move the previous coordinates into this variable my chords, and
54:25 - we'll say if my so let's start by handling like passing off screen to the left, we'll say if my
54:33 - chords zero, so the x position is less than negative 100 is less than negative 150, which will let
54:42 - even the biggest target get fully off screen. Then we say chords at ij is equal to and we move it
54:54 - all the way to the right edge now. So we'll have everything scrolling to the left just to be easy.
54:59 - And then we'll say the coordinates ij are equal to width, and then we'll leave the y position as is,
55:06 - so that's my chords one. And this is a tuple, because it's coordinates. Okay, so this is basically
55:14 - saying if I've gone off screen to the left, I'm just going to move you over to the right. So you
55:19 - basically are permanently cycling until you get shot. And then we'll say else, meaning you're
55:25 - still on screen in some form or fashion, we'll say chords at ij are equal to and now a new tuple,
55:32 - which is going to be our x position minus, and we'll say to to the power of whatever tier of
55:39 - enemy we are. Okay, so if this is tier zero, which I guess is the big red birds, then this is going
55:48 - to be two to the zero, which is one. So the red enemies are going to move left at a speed of one.
55:54 - But then if you're a tier one, this becomes two to the first power, which is minus two. So it just
56:00 - doubles the speed. But what's really fun is if you're a tier three enemy, so you're the little
56:05 - green bird in the first level, this is two squared, or minus four. And then it gets it's minus eight
56:12 - with the little purple UFOs. So you'll see once we get to level three, this is actually going to
56:17 - make the purple guys really fast and pretty hard to hit. Okay, and then we'll leave the y coordinates
56:23 - alone. Alright, so this is saying, if you're on screen, I'm going to move you to the left,
56:29 - based on what tier of enemy you are. And then we're just going to return the coordinates back
56:35 - since we're overriding them. So we need to come down to where we have move level. And we just need
56:40 - to understand that we're getting one chords back from this. And we're getting two chords back from
56:48 - this. And we're getting three chords back from this. Okay, so this is going to give us,
56:58 - this is going to update all of our coordinates should for everything simultaneously. We still
57:04 - have level three in here, let's go ahead and boot up. And hopefully we have a bunch of Nope,
57:08 - I messed something up, but no surprise there. Okay, so let's take a look line 70. It says that
57:15 - else chords I j are equal to and then my chords, this needs to be the x coordinate. So it needs to
57:22 - be my chords at zero minus two to the I silly mistake. But let's try that again. Hopefully we
57:29 - get a bunch of UFOs moving. Yeah, so here you go. Alright, so this is really cool, right? Is this
57:34 - not already give you like retro arcade shooter game feel. And you can see these purple, these purple
57:41 - UFOs are absolutely eating across the screen. They're just flying. And even the blue ones in
57:47 - the green ones are moving pretty good. I think I've continually been saying that like blue was
57:53 - before green. I don't know if that's how I did it for every level. But it looks like let's see
57:58 - what two is. So where the blue plates. Yeah, okay, so on level one and two, I made blue,
58:03 - the middle lever level. But let me see, I guess that's so funny. Okay, so the the second tier on
58:12 - the third level is green. The second tier on level one and two are blue. Hopefully, I don't have a
58:19 - bunch of OCD viewers out there who feel the need to flip that. But if you do feel the need to flip
58:25 - that, I'm sure you can figure it out. Alrighty, so I think probably the best thing to do next would
58:30 - be, let's figure out how to check the shot. So check if if our mouse clicks, let's check and see
58:40 - if we have hit a target. And if we have, let's go ahead and give some points. So let's introduce
58:47 - like the format of scoring here. So we'll say, down below level, we'll just say points is equal to
58:55 - zero initially, we'll create a new variable to track our points. And we're just going to create a
59:00 - variable that I think we'll call define check shot. So we're checking when we've shot. And what we're
59:08 - going to need to pass in here is the list of our targets, and the coordinates of and the coordinate
59:15 - list. And the reason we need both is because we are checking to see if the rectangular hit boxes
59:21 - that are stored in our target list have been hit. But if it has been hit, then we need to delete out
59:27 - the coordinates for that enemy, because that's how we actually track how many enemies are left,
59:33 - not this targets list, this coordinates list, right? If you think of draw level and move level,
59:39 - they're based on how many sets of coordinates we have, not how many rectangles there are in the
59:43 - targets list. So we know right off the bat that what we're doing is if we've shot something,
59:48 - we need to return a modified coordinate list that says that one is no longer in there. Okay. And
59:54 - we'll just call the global of points, because it's easier to modify in here, if we just say
60:00 - global points, but you you could pass it in and return it as a parameter as well. And now I'm
60:06 - going to get the mouse position kind of just like we already did in the draw level. And I'm going to
60:11 - say pi game dot mouse dot get pause. And I'm going to say for I in range, length of targets, which
60:22 - will be our list of all of the targets hit boxes. And each thing in there is going to be a rectangle,
60:31 - you know, okay, for I in range, length of targets. So targets, again, is a list of lists. It's
60:37 - another one of those arrays thinking back to, let me go, where did we create that that was draw
60:42 - level, right? Yeah, so this target rex is what we're calling the targets list in here, I just
60:48 - always try to call it something a little different when we use them inside functions. So we don't
60:52 - get our wires crossed. But this is the target rex list, and it's this list of lists. So we're
60:58 - going to do another nested for loop, which is for I in range, length of targets, and then for j
61:03 - in range, length of targets, I, and you're probably getting sick of watching me type nested for
61:12 - loops, but they do a lot of work for us. Okay. And now what we're going to say is if targets,
61:20 - I j dot collide point with the mouse position, then we want chords at I so now we're saying
61:35 - I, which is going to be whatever tier of target we're looking for. So chords I dot pop, and then
61:43 - j and pop is the Python command for popping a specific item out of a Python list, using the
61:53 - index of that item. So we have I, which tells us what tier of target it is, and then j, which tells
62:00 - us tells us its place in the chords and targets list. And so we just want to pop that set of
62:07 - coordinates out of our coordinates list. And then what we're going to do as well, is we're going to
62:12 - add so plus equals two points, we're going to do 10 plus and then this is sort of similar to how we
62:19 - place them and size them, we're going to make it progressive based on the tier of the enemy. So
62:25 - we're going to say 10 plus 10 raised 10 times I to the not to yeah, I squared. Okay, so this
62:36 - let's think through what this means for the different tiers. Okay, this is 10 plus 10 times zero
62:43 - squared for red enemies, which just means zero. So this is going to be red enemies are worth 10
62:50 - points. Now for the second level of enemy that which is going to be I equals one, this is I
62:58 - squared, which is just one, and then times 10. So this makes the lowest rung of enemy worth 10,
63:04 - the second rung worth 20. But then the third rung, this becomes two squared, so four times 10,
63:10 - which is 40 plus 10. So our enemy point values go 102050. Now try to do the math, what happens if
63:19 - we have those purple UFOs, what does that do to score this is three squared, which is nine. So
63:25 - nine times 10 is 90. So that that makes them worth 100. So the tier scores are 102050 and 100,
63:34 - just by this one simple line of code, checking what tier of enemy we just shot.
63:41 - All right, and now we got to do this is where we'll come back and I'll leave ourselves a note. So
63:46 - add sounds for enemy hit, when we get to sounds at the end, we're going to put the sounds right
63:54 - in here where we're hitting them. But that's all we have to do right now, for the inside of the
63:59 - check shots function. The only other thing we have to do is we have to figure out where the right
64:04 - place to call that is actually going to be. And so what we need to do is we need to create a
64:12 - variable that's checking to see if we've shot or not. So we'll create a variable, we'll say shot
64:19 - equals false. And then I'm going to come down inside of each of these if levels, and I'm going
64:25 - to say, okay, if shot, then we want to check and see that one chords is equal to, and then
64:34 - check shot, and then the target list. So we called it target boxes in the outside world,
64:41 - and then one chords, okay, and we're going to copy this same bad boy into each of these guys.
64:49 - So if shot, then two chords, target box, and we pass in the list for two chords, and then you
64:58 - guessed it, we're doing the same thing for three, three chords, and then target boxes, and then
65:06 - three chords. And now we need to figure out what should trigger the shot variable, because
65:12 - everything else in here should work on its own. Other than one thing I always forget,
65:16 - if you make this if shot statement, and you only want to run once, which we do right once per
65:22 - click, then you want to make sure that shot equals false once you've executed the code. So this is
65:27 - saying, once we figured out how to check whether or not we shoot, which will be based on a mouse
65:32 - click, then we want to run this check shot once, depending on what level we're on. And then we
65:38 - want to immediately say, okay, well, I'm not checking that anymore. So shot is equal to false.
65:43 - This will prevent you from being able to hold down the mouse click, and just drag it all over
65:49 - the screen. Because that would not be very fun. If you just had some kind of like infinite ray gun
65:54 - that couldn't be stopped. Or maybe you guys think that would be super fun. But that's not how I'm
66:00 - going to make mine. Okay, so let's come down underneath our if event dot type is pi game
66:06 - dot quit and let's add a new event type. So this will be if event dot type is equal to and now
66:11 - it's going to be pi game dot mouse, mouse button down and it's all caps because it's crazy. And
66:22 - I'm going to say event dot button is equal to one. So similar to the mouse get clicked function that
66:30 - we already have looked at the mouse clicks get clicked that we use to draw the where was that
66:39 - that was in draw a level right. Yeah, so the not draw a level where come on guys help me out draw
66:47 - a gun. Thanks for the help. So this if clicks, this is saying, you know, get all of the clicks from
66:56 - the pi game dot mouse dot get pressed. Now pi game dot mouse get pi game dot mouse dot event
67:04 - dot button, this one that we're using an event handling is a little bit different because the
67:09 - left key is one for event right here. But in get clicked that other thing we were looking at it's
67:18 - zero. So just understand this is still me saying, if the mouse button has been pressed, and it's
67:24 - the left click because I'm not going to let you shoot with the right click I guess you could if
67:28 - you wanted to. But anyways, this is saying if you click the mouse and it's the left button,
67:36 - I'm gonna again, I'm gonna get the mouse position out here, because that's important for knowing
67:42 - what we've clicked on. So mouse position equals pi game dot mouse dot get pause just like before.
67:51 - And then let's go ahead and say, if and now, if my mouse position x, so mouse position x,
68:03 - and remember, this is sort of like when we checked whether or not to draw the gun. Okay,
68:07 - we want to check whether the mouse position is on the screen. So this is zero to width because
68:13 - if your mouse is off of the little window that you're playing on, you're doing something else on
68:18 - your computer. So we shouldn't be messing with the game. Okay, and then we want to say, and
68:23 - the y position, so mouse position y, and this this putting it in between two kind of less than
68:33 - brackets is just our way of putting it in a range and just one command, it cuts down on the total
68:38 - number of and statements we need by a lot. Alright, so now the y position, the y position for this
68:46 - one just needs to be less so greater than zero still meaning in the window, and then height
68:54 - minus 200 is basically is basically the shooting window, right, that's where our enemies could be.
69:02 - And so if that's all true, then we'll set shot equal to true. And then when we're tracking
69:09 - total shots and ammunition, so like we'll do an accuracy mode where you only get a certain number
69:14 - of bullets to get the highest score you possibly can. So we'll do two other things anytime we shoot,
69:21 - we'll add one to a total shot tracker. And then we'll just say if mode is equal to one, so that'll
69:28 - be our accuracy mode, we'll do ammo minus equals one. And it's just smart to think through, is there
69:35 - additional game functionality that I'd want to put in here while I'm doing it. And so in this case,
69:41 - I think there is but we need to make these variables. So we'll say mode and initially we'll set equal
69:47 - to zero. But just to kind of give you what I'm thinking, I'm thinking zero will be the free play
69:54 - mode, one will be accuracy, and then two will be timed for mode. And then ammo initially we'll
70:02 - make it zero because if you're playing free play, you're going to have infinite ammo, and we'll only
70:07 - check ammo if mode is one. And then we'll set total shots equal to zero when the game boots up,
70:12 - because you haven't taken any shots. We're not going to mess with modes just yet. First we're
70:16 - going to keep working on just how to check if something's been shot and get it off the screen.
70:23 - But it's important to have those in there. So what should happen now if we did everything right,
70:28 - and that's a big if I'll admit, but if we did everything right, then that should give us everything
70:33 - we need to, yeah, remove plates, okay, so that's really cool. We can just shoot the plates off
70:41 - of the screen with our mouse clicks. And it's very satisfying, it really is. It's not the most
70:46 - difficult thing in the world, but that's where you guys as programmers can come in and add your own
70:51 - challenges to it. So that was level two, let's go ahead and take a look at what level three is
70:56 - going to look like level three, because that's got the little UFOs on it. Okay, yeah, and those UFOs
71:02 - are booking it. I actually like do find myself missing the purple UFOs pretty often. Obviously,
71:09 - you just have this red wave, it's gonna be a lot of Americans triggered by that sentence.
71:17 - But you just have all these red UFOs right across the bottom. But so it's really fun,
71:22 - but you may have noticed there, there's nothing when you clear a level that moves the level on to
71:29 - the next the next phase. So let's come down kind of below our event handling. And let's take a
71:36 - look at some stuff that we'll do to sort of handle what to do when a level's over. So if level is
71:43 - greater than zero, we'll say if target boxes is equal to so this is going to be a call it target
71:54 - boxes or target list. Why is this always so confusing for me? I'm just, I'm just weak.
72:02 - Target boxes. Yeah, okay. So if target boxes is equal to equal to this empty list, right, so
72:13 - not populated at all. And that's the reason I'm putting it at the very bottom, because it will
72:19 - initially be empty until we've run that draw level thing for the first time. So if target boxes is
72:26 - totally empty, and level is less than three, and that's why it's okay to check this way, because
72:33 - target boxes being totally empty when it is level three will actually be game over command. So let's
72:38 - say just level plus equals one, okay. And so that should do it for just getting it to move from level
72:47 - one to two, and then two to three, it doesn't handle game over yet. But that's okay, because
72:51 - that's kind of a separate beast. All right, so let's go ahead and take a look. Now, if I can just
72:58 - clear out all these birds really quickly, and I'll try to be accurate. So you guys don't just have
73:02 - to watch me play the game, although you're probably playing the game to phone long. Bam, and now
73:07 - we're in level two. And we should go to level three, just for the sake of testing. And because
73:12 - it's super fun, I'm going to just clear these out. Bam. And we're in level three. Okay, so nothing
73:19 - bad is going to happen when I clear all the enemies here, but nothing good is going to happen either
73:23 - because we have not, we haven't taken a look at drawing the menu or game over or pause or any of
73:31 - the menus. So let's go ahead and take a look at how to do that. Now, let's also come in where we
73:37 - have if level is greater than zero, we're going to draw the gun. Why don't we say we'll also draw
73:44 - the things that will go in the score area? Okay, so in that score menu, which you probably saw on
73:51 - all the banners, there's this big block, which when I was making the static images for the banner,
73:57 - I didn't put anything in there, because we're going to control what goes in there from our game.
74:02 - And we're going to do that using the draw score function. And so you need to just make sure that
74:08 - this happens in your code after the screen dot blip banners to make sure that your stuff you're
74:13 - putting in that score block gets drawn on top of it, not underneath it. All right, so check shot
74:21 - worked great. Good job, everybody. Pat's on the back all around. And let's go ahead and define,
74:26 - what did I just call it? Draw score, brain fart. Alright, so what we're going to put in draw score
74:35 - will depend on the mode for a little bit, but we're going to put a few things in every time. So
74:41 - we're going to put how many points you've gotten, which will be based on total number of enemies
74:48 - that you've shot, right? So font dot render, and we'll make this a formatted string so we can put
74:54 - a formatted string so we can put some text and the actual scoring in there. And we'll say points
75:01 - is going to be points, just like that, clever. And now what we'll say is true for anti alias,
75:09 - which just smooths the text out. And then we'll make it black text. And then we're going to put
75:15 - that on screen. So screen dot blip, and then points text. And if you have anything different
75:22 - in your game, or you're building your own version, which is super fun, I recommend,
75:27 - you just need to probably guess and check this a little bit to know like what the perfect pixel
75:31 - position for this is. But I have found that let me just go ahead and reformat that scoot it down
75:38 - a little. I found that 32660 looks really good with where it is. So if I run just this,
75:44 - in about, oh, yeah, needs to be a tuple for your coordinates.
75:48 - Well, I am having a rough day formatting. All right, so now you can see points is down there.
75:53 - And as I shoot these birds are point score updates based on the levels that we created the rules.
75:59 - And you may say, hey, that text looks a little bit small to have that full section for itself.
76:04 - And you're right, but that's because that's not the only thing we're putting down there.
76:07 - All right, so let's go ahead and copy this points text. And let's take a look at the next thing we
76:12 - want to do, which for me is going to be total shots that we've taken. So even in a game mode that is
76:18 - not based on accuracy, I'm just going to report how many total shots have been taken just because
76:23 - that's kind of a fun stat. So if you're doing free play, it's still fun to know like how many
76:28 - total shots it took you. So we'll say total shots. And then instead of points, we will say
76:37 - total shots just like that. And we already had that variable made. And now we're going to leave
76:43 - it in the same X position, but we're going to scoot it down. And we're going to scoot it down 27
76:48 - pixels, which might seem a little bit arbitrary. But that's actually about one quarter of the gap
76:56 - that we have. And I'm going to put a total of four pieces of text in there. So I'm going to say we
77:01 - are going to show time text, which is going to be how much time you've been playing. And so for
77:08 - that we'll say time elapsed. And then this we're going to need to make a new variable that we'll
77:15 - call time past, I guess, elapsed is a fancy word. And we will just say past when we create the variable.
77:23 - And then we're going to scoot down another 87, which puts us or 27, which puts us at 714. And
77:30 - then this last one is going to be a little more complicated. So it's going to be based on the
77:34 - mode, right? So if mode is zero, then we want what we'll call mode text, mode text to say,
77:46 - so in mode zero, it's just free play. So there's no like special game variable
77:50 - that we're keeping track of. And then we need to do some L ifs in case we're playing an accuracy
77:58 - or timed mode. So if mode is one, or mode is two, then mode text is going to change a little.
78:05 - And so if we're doing mode one, that means we're doing the accuracy one. So we'll say ammo remaining
78:10 - and then a colon. And then in here, we'll put that ammo variable that we created.
78:16 - And then if we're doing the mode two, which is going to be the timed one, we'll do timed
78:21 - remaining is equal to and then we'll make a new variable called time remaining. And so those
78:30 - for all of them, it's going to be true, and that's going to be black. And we'll always put it
78:34 - another 27 down on the screen. So that's 741. But now, obviously, we have to make time passed
78:40 - and time remaining variables just so it doesn't crap out. So we'll put those down with ammo,
78:47 - we'll do time passed. And it's initially going to be zero and time remaining.
78:52 - We'll also say it's going to be initially zero because until you've selected a game mode,
78:58 - it doesn't really matter. We're not checking that for anything right now.
79:02 - All right. And so this needs to be mode text instead of shots text. But now we should have
79:07 - a pretty full screen. Okay, so we have points, total shots, time elapsed and free play. Now
79:14 - total shots and points will go up right now. Time elapsed will not. So it's pretty easy to,
79:22 - it's pretty easy to get that in here. So let's do the time elapsed just because that's a real
79:26 - easy little mechanic. We're going to come down under timer dot tick FPS. And we're going to say
79:32 - if counter is less than 60, then counter plus equal one. And then we'll say else counter is
79:47 - equal to and we'll reset it back to one. So this will do 12345 all the way up to 60. And then once
79:54 - it hits 60, we'll send it back to one. So that will be our 60 FPS frames per second checker.
80:00 - And then we'll say, if level is not equal to actually let's put the if level above the counter.
80:06 - Okay, so if level is not equal to zero, meaning we're not in a menu of some sort game over pause
80:13 - or main menu, then we'll do our time elapsed checking. Okay, so if the counter is less than
80:20 - 60, then we want to add one to the counter. Otherwise, we're going to reset the counter. And
80:24 - then when we reset the counter, we're going to add one to time past. So time past plus equal one.
80:32 - And then what we're going to say is if our mode is equal to two, which is our timed version of
80:37 - the game, then we're going to just subtract one from time remaining. So we don't have to worry
80:43 - about this yet. When we boot it up, as long as we don't put it into time remaining mode, which we're
80:48 - not going to do just yet. Okay. So this is just how we're going to track time elapsed while we're
80:55 - actively playing the game. But if we're in the menus, we don't want time elapsed to be counting.
80:59 - And so initially, counter is going to be equal to one, just so it starts right at one. And now
81:08 - that's because I did less than 60. If you want to do this as less than 59 or less than or equal to
81:14 - 58, for some reason, if you wanted to complicate it, you could. But I like thinking of it one through
81:21 - 60, just as your 60 seconds, you could think of it as zero to 59. It's your call. But that's,
81:28 - that's how we're going to track time elapsed. So there you go. Now you can see without even
81:33 - shooting, I'm getting a basically a second every second, which looks pretty good. And I can, I can
81:39 - miss a whole bunch and points doesn't update. But then every time I hit a target points updates.
81:44 - So all this score tracking is going really well in free play, which brings us to the obvious question
81:50 - of how do we actually change modes, right? There's no way right now to play ammo, accuracy mode,
81:56 - or the timed mode without me actually changing some parameters. And we also don't start on
82:02 - the menu screen. So what we need to do is we need to take a look at what do we do for drawing the
82:08 - menu, drawing game over and drawing pause. So let's just come into our main loop, I'm going to
82:15 - collapse this if statement here. And after we blitz stuff on the screen, but before we check the if
82:22 - level statements, so those three guys, we're going to add some stuff here. And we're basically going
82:28 - to say, if menu, so we're going to create a new variable called menu, we're going to say level
82:34 - is equal to zero. And then we're going to run this, we're just going to draw everything for the menu
82:41 - and a function that will call draw menu. I think that's the most pythonic way of doing it. And
82:47 - then we'll say if game over, then we are going to say, again, level will be equal to zero, because
82:54 - that's kind of how we're going to control if we're in a menu or not. And then this will be draw game
83:00 - over. And then we'll say if pause, right, because that's kind of our third menu option, we'll say
83:05 - level equals zero, and then draw pause. And we'll set this up to where you can't really be in two
83:12 - of these at the same time. So I'm just gonna cut, we need to make variables menu game over and pause.
83:20 - So let's come up here. We'll say menu is actually going to be equal to true when we boot the game
83:25 - up game over is going to be false and pause is going to be equal to false. Okay, and so I guess
83:34 - I'll also make level equals zero initially, but menu being true should do that on its own right
83:40 - here, you would just have a flicker of the actual like background being drawn on if we didn't.
83:46 - Okay, so easy enough, we'll say now we need to make draw menu, draw game and draw pause,
83:52 - draw game over and draw pause. And so that our code doesn't throw an error, let's create all of
83:56 - those right now, draw menu. And for now, we'll just put pass, but we're going to fill them out.
84:02 - So define, draw game over, and I'll put pass. And then I'm going to have to delete a w there,
84:11 - because I draw. Alright, and then define, draw, pause, and I'll put pass just so that it doesn't
84:18 - throw an error or a hissy fit. Okay, and everything formatting looks alright. And now this should
84:27 - handle everything we need to do while we're in the menus. So let's take a look at draw menu,
84:32 - that's probably the most important one anyways. And let's go ahead and just start thinking through
84:38 - what we've got to do in here. So we'll initially say game over is false, and pause is false, right.
84:47 - And to actually be able to read, write to these, we need them to be globals. Every time I make a
84:54 - function, and I call a bunch of globals, there's like someone in my comments who says they wish I
84:59 - wouldn't use so many globals, and they wish I would just pass everything in and out. I honestly
85:04 - don't know why people feel so strongly about that, like I'm not making high ultra high performance
85:10 - data science experiment stuff. But if you know, like a good reason why this is bad practice,
85:14 - maybe let me know in the comments below, because I find it really easy to call variables that I
85:19 - don't feel like passing in and returning, just as globals, but some people don't like it. So if
85:25 - you know why that is, let me know. But okay, the easiest thing to do is going to be screen dot
85:30 - blit. And then the menu image right onto the screen, because we made it a full screen image.
85:37 - And you're saying to yourself, Pete, we didn't we don't have the menu image and you're right. So
85:41 - let's go grab that. Let's come back up where we have all of our other image loaded loads
85:48 - coming in here. And let's just go right above that. And let's do menu image equals, and then we'll
85:55 - have game over image. I don't know why I'm making this so difficult to game over image like that
86:03 - equals, and then pause image equals. Okay, and so we're just going to kind of steal this one,
86:09 - because we don't know it's nice, we don't have to, we don't have to format these ones, I made them
86:16 - 900 by 800. So they're all ready for us. Okay. So this is going to be, we don't need I anymore
86:23 - either. This is going to be assets and then menus. And then for main menu, I called it main menu,
86:29 - just like that. And then we'll copy this guy. And we have main menu, we have game over, and we have
86:41 - pause, pause, no camps, just like that. All right, so we have our images now. So when we're
86:46 - drawing menu, we're going to draw the menu image onto the screen. And now let's take a look at
86:53 - what else we want to do when we draw menu, right? So kind of a lot of things need to happen here.
86:59 - Because on that menu screen, you have the option of doing four different things, you can choose
87:05 - a game mode to play. So free play, or, or ammo, which is accuracy or timed, which is giving you a
87:14 - certain amount of time to get as many points as you can, or you can reset your high scores. And
87:19 - so let's just sort of figure out what to do based on the position of the mouse. So we'll say mouse
87:25 - pause equals pi game dot mouse dot get position, which you guys are pros with by now. And then we'll
87:33 - say clicks equals pi game dot mouse dot get pressed again. And now we have a position of the mouse
87:41 - and we have the all the clicks that are on. And now we need to figure out like what hit boxes,
87:48 - if you will, essentially what collision boxes, each of those buttons should correlate to.
87:54 - And to just sort of show you so we have the free play button. We have the ammo button,
88:02 - ammo button equals we have the timed button. And then we also have the reset button, right? So we
88:11 - have these four buttons. And we want them to be invisible rectangles. Because if I open up again,
88:18 - the main menu image real quick, you'll see it already looks like there's buttons on the screen,
88:23 - it already looks like there's rectangles there. So what we want are rectangles that correlate
88:28 - with that space, but actually are invisible. But just so you understand like where I'm drawing
88:35 - the rectangle, I'll draw this first one. So pi game dot draw dot wrecked. And I'll actually draw this
88:43 - one on the screen. And I'll just make it neon green. So it's kind of easy to see. And so these are,
88:50 - we give them every rectangle an x and y start position and then a width and a height. And so
88:56 - for like free play, it just took a lot of guests and check to get these dialed in pretty tight.
89:01 - But it was 175 24 for starting x and y and then 260 wide and 100 high. And then just so it doesn't
89:10 - block the whole button, I'll make it a width of three. And then I will just comment these ones
89:16 - out so it doesn't gum it up. But I don't know if this is going to throw an error or not. Hopefully
89:21 - this will let you see Yeah, the menu. And you can hopefully see the wireframe green there
89:26 - that correlates to the free play button. So essentially, we're creating a rectangle that
89:32 - we're going to use for collision detection, when we click on that space. But we don't want the
89:38 - rectangle to be visible. So rather than pi game dot draw dot rect, it's pi game dot rect dot rect,
89:45 - where we just say no, we're not drawing it, we're defining it. And this is what we did earlier for
89:49 - the hit boxes. So rather than that list of four arguments, it's two tuples. So it's like this,
89:57 - it's a tuple, and then another tuple and no additional arguments. So this is a fully defined
90:02 - rectangle. That's the one for the free play button. Now we need one for the ammo button, the timed
90:09 - button and the reset button. And again, if you're using my images or my format from the GitHub,
90:15 - then your buttons will be these exact same dimensions. If you've created your own menu screens,
90:20 - then you just need to do some guests and check that method that we just did to figure out where
90:24 - your buttons need to be. Okay, so now let's go ahead and take a look at the ammo button.
90:30 - And the ammo button is going to be at the same y position, but it's further on the right. And so
90:37 - this is the one that says, oh, I want to play the accuracy version of the game. And now the timed
90:42 - button is going to be at the same x position as free play, but further down y. And then the reset
90:49 - button is further to the right and further down. So 475 661. And there we go. Now we have all four
90:56 - of our buttons defined with rectangles. And what we want to do kind of in those same spaces,
91:03 - everything except the reset button also has some text associated with it. If you think of the menu,
91:08 - I also show you on the main menu, what your best in each game mode was. So we want to do that and
91:15 - draw menu as well. So let's take a look at how to do that underneath each underneath each button,
91:21 - because it's kind of associated with them. Alright, so we're going to draw our best free play score
91:27 - using screen dot blit. And then just in here, it's easiest to put it on one line, you could
91:33 - absolutely font dot render on one line, and then screen dot blit on the next, that's kind of what
91:38 - we did with all the score stuff. But this is pretty simple. And so I'm going to show you how
91:43 - you can do it all on one line. And so here, since we already have the text on that main menu screen
91:50 - that says best time, then we're basically just going to say what the best time was. So we're
91:56 - going to display here what the best free play score was. Okay. And that's obviously a variable we
92:05 - haven't created yet. But we'll make that in just a second, I'm just going to show you how to put
92:11 - this on the screen all at one time. And so true. And then black, because black text on the color
92:18 - buttons that I created looks pretty good. And then that is it for the font dot render. But remember,
92:23 - we're inside a screen dot blit. So then we also give it an x and y coordinate of 340 and 580.
92:30 - And we just need to go and make this variable best free play. And while we're doing that,
92:35 - let's go ahead and make best ammo and best timed as well. Because those are obviously
92:40 - the three game modes. And we'll just make them all zero initially, right, because we haven't played
92:46 - yet. Best ammo, best timed. And we are going to take a look at how to actually store those in a
92:55 - text file, which I call high scores dot text, we're going to do that once we get the different modes
93:01 - working, we're going to work on reading and writing to text files all within the game. Okay.
93:06 - So this is screen dot blit, best free play. And then this will be best ammo. And then down here
93:16 - under timed, we're going to do best timed. Okay, now these all have different x and y coordinates.
93:23 - So this first one's 345 80. This next one further to the right is 650 580. And then this third one,
93:31 - I know you're probably like, Oh, it's going to be the same x coordinate as the first one. And 340
93:38 - would get you pretty close, but it actually just looks better at 350. Because the text sticks out
93:43 - a little bit further. All right, so that should if I if I boot this up, it should just give us
93:53 - zeros. Yeah, and you can see that we've got our little high scores. Now, if you don't believe me
93:57 - that that's what they are, you can change them, and then see that value update. But so now we're
94:03 - drawing our high scores onto the menu, which is great. But we also need to figure out what to do
94:07 - if those buttons are clicked. Okay, so let's go ahead and look at that now. Let's start with the
94:13 - free play button. So free play button dot collide point, and then collide point with the mouse
94:20 - position, and clicks zero. And because you have the ability to change between change between
94:30 - screens super quickly, like if you're on pause, and you decide to restart, so it's going to take
94:35 - you back to the main menu. We don't want to click buttons on multiple menus without a lift
94:41 - of the button first. So we're going to create another variable in just a second called clicked
94:46 - to track whether or not you've already clicked on the on a button. And if you have clicked on a button,
94:53 - and then it takes you to another menu, we're not going to reset clicked until we see you've
94:57 - lifted the mouse key. So this is just a way to prevent unwanted double clicking.
95:01 - All right, well, and everything we want to do when you click free play is we want to say mode
95:08 - equals one, and then level equals one. And so that'll launch us into the game. And then we'll
95:13 - set menu equal to false. That's got to be a new level, a new line, mode level, menu equal to false.
95:22 - And then we want to basically say time past equals zero, because if you just finished the game,
95:26 - and you went back to the main menu, you want to reset all of your game variables. So total
95:31 - shots also equals zero. And then points also equals zero. So basically, you're starting
95:37 - a new game. Okay, and you can see these are all gray, because they're not yet global variables.
95:44 - So we're going to go ahead and call them all in our global's line. And again, I find this really
95:50 - easy. I don't know if it's slower or less by Sonic, I don't actually know. I do know some
95:56 - people don't like that I do this. So if you know a better way of doing it, feel free to do it. I
96:02 - know that you can pass these in as parameters and then return them. I don't know that that substantially
96:08 - makes a difference for this project. So okay, total shots, and then points just like that. And now
96:16 - we can actually write to all of those things. Alrighty, so that's going to handle what to do
96:22 - if we click on the free play button. And the other four buttons lucky for us are fairly similar. Okay.
96:31 - So let's just copy it twice. And let's take a look at what to do first for ammo, we're going to kind
96:36 - of handle the reset button on its own, because it's a little different. Okay, so then we will say if
96:43 - the ammo button is clicked, well, then mode is one level is one, menu is still going to be equal to
96:49 - false because we want to exit the menu. And then now we need to reset, we need to give ammo a value.
96:55 - So we need to come up to our globals and say ammo as well, so that we're able to write to that.
97:01 - And then ammo is equal to 81. And the reason I picked 81 is because that's how many targets I
97:07 - have total in my game, you can total these up if you don't believe me. But I basically wanted to
97:12 - say if you're playing the accuracy game mode, the best possible score you can get is hitting
97:18 - every single target. So you can spend forever making sure your mouse is lined up and chasing
97:23 - those targets down. And you can basically pursue perfection. So the ammo mode, it is possible
97:29 - to get a perfect score. If you manage to hit every single target with every single click,
97:34 - that is how I got 81. Alright, so total shots, time past and points will all still be zero.
97:40 - And now let's take a look at what to do in the timed mode. So we don't care here about mode will
97:48 - be equal to we don't care about ammo in here. But what we do care about is now time remaining,
97:53 - right? So time remaining. And we want to set equal to something where it's extremely difficult to
98:00 - clear the entire game. I played this quite a few times, and I found 30 seconds like almost
98:05 - impossible to hit. So I am going with 30 seconds. But if you find that to be too easy, feel free
98:12 - to do a smaller one. So time. Well, let's just make a second row for globals, because I don't want
98:21 - to spill over. I don't want to have something that I need to use scroll bars to view. So,
98:29 - all right, time remaining. And that's it for these buttons. Let's go ahead and create the
98:32 - variable clicked initially. So we'll say clicked equals false. And we'll take a look at how to
98:38 - track that once we are out of this little loop. Okay, so that's free play ammo and timed. Now,
98:44 - let's go ahead and say, well, what about the reset button? So if reset button dot collide point with
98:51 - the mouse position, then that means we've just said we want to get rid of all our high scores,
98:55 - it's not accurate, or that wasn't me, or that was my friend playing, or I just want to reset it,
99:00 - like I got perfect once. But, you know, I want to keep chasing that dragon. Well, we're going to set
99:06 - all of our bests back to zero. So best free plays equal to zero best ammo is equal to zero, and then
99:12 - best time is equal to zero. And then we actually are going to want to create another right values
99:18 - command, which is going to be true. So we're going to actually say, I want to reset my scores. So go
99:24 - and overwrite, go and overwrite whatever's in your text file. Okay. So now let's import the bests as
99:34 - well, because we're overwriting them in here. Best free play ammo and timed. And all righty, so that
99:43 - should do it. We also want to bring in right values, even though we haven't created it yet. We are
99:49 - about to. All right, so we'll say, initially, right values is false. And this should be really
99:58 - cool. We obviously aren't doing anything with that clicked variable yet, but we said equal to false.
100:02 - So we're going to boot up, we're going to be on the menu. And if I do free play, okay, it says
100:07 - right at the bottom free play. And the nice thing about free play is you have infinite ammo and
100:12 - infinite time. So your score will always be all the way up, like you'll always finish a free play
100:19 - round by shooting every target, every enemy. But the scoring in free play is based on how long
100:26 - it takes you. So basically, you're going to be getting progressively higher scores as you manage
100:32 - to do free play faster and faster. And then the other two, because it's very difficult to get
100:38 - all of the enemies, the other two scores are based on your time. So actually, your free play score
100:43 - will keep getting better as you get a faster and lower time. Okay, I can't get that one. That's
100:51 - okay. Let's boot that up and see if it does timed for us. So countdown. All right. And now it says
100:58 - time remaining and you can see the time is ticking. And if you don't believe me that 30 seconds is
101:02 - really hard, go ahead and try to beat it in 30 seconds. Maybe you're just an absolute computer
101:08 - whiz and you can't miss and you managed to beat the whole thing in 30 seconds. But I usually find
101:12 - myself about halfway through the UFO level. And if I try to get the purple UFOs on timed, it's
101:19 - like legitimately impossible. I just the only way I can even get close is if I just don't worry about
101:25 - the purples and I do like red, green and blues, then sometimes with 30 seconds, like I get all
101:31 - of them except purple. But I don't think I've beaten beating it in 30 yet. And you can see the
101:37 - time remaining is just counting negative because we haven't created game over conditions yet.
101:41 - All right. So let's go ahead and take a look at the clicked thing that I was talking about a little
101:46 - bit before. And then I will also explain as we get to the pause in game over menus, like why
101:53 - that's so important. But to handle the clicking the way I'm kind of thinking of it, we need a new
102:01 - if event dot type command, which is going to be if event dot type is equal to pi game dot
102:08 - mouse button up this time. So that means we've lifted the key and event get pretty bad at
102:18 - spelling us again to our two of the tutorials and event dot button is equal to one again.
102:25 - And clicked, right? So that means we've detected a click is true somewhere. Then we're just going
102:33 - to say, okay, well, you've lifted up on the key. So clicked is now equal to false. And we don't need
102:39 - to actually turn clicked to true inside of the menu. We just need to do that for pause in game
102:48 - over, which we'll talk about in just a second. But the reason for that is every button in the main
102:54 - menu is pretty harmless. It takes you into the game. So just to boot this up and illustrate what I
103:00 - mean, if you were to click any of these buttons, it's going to take you into the game, or this is
103:06 - just going to reset high scores. So you don't actually need to do it in the menu button,
103:13 - but we will just for good practice. If you if you saw there what happened is I booted this up,
103:20 - and then I clicked on reset high scores. So that's really so I clicked right here. But if I drag the
103:26 - mouse now to accuracy, it starts the game up with our like set number of shots that we have to play
103:34 - the game. And so that kind of sucks because we want like the click to only work on the button
103:40 - that we clicked. So there's one more thing we need to do in draw menu and I promise we're done with
103:45 - this behemoth. We need to also have the clicked value in here. And we need to say if any of these
103:51 - buttons get clicked, so here, then we also need to say, okay, well, clicked is equal to true. So
103:58 - this is basically saying you're not allowed to do anything else with the mouse button until you
104:03 - release it. So you can't just drag the button around. That's kind of how we handled the that's
104:10 - kind of how we handled the like not having a laser beam when you shoot enemies, right? So it's just
104:15 - as important here. And now let's take a look at game over and pause. So first, let's take a look
104:22 - at what to do. If you enter pause and to do that, it's really easy. It's just kind of an add on
104:29 - to the mouse tracking that we already did for mouse button down, right? So
104:35 - here, we've checked to see if the mouse position is in a certain spot.
104:40 - When we click and it's the left key, well, it's the same thing for pause and the reset buttons,
104:49 - right? So if you hit restart, when you're let me pull up a banner again. If you hit restart,
104:55 - we're going to let you go back to the menu and choose what mode you want to play. So we're going
105:02 - to say, first, let's take a look at pause. Yeah, pause is better first, because it's higher.
105:11 - So we'll say now 670 and less than 860. So again, I have kind of figured out where the start and
105:20 - stop of those buttons are. And I decided to just do it this way, rather than create additional
105:25 - like collision boxes. So essentially, the pause button is between 670 and 860 in the x direction
105:34 - and 660 and 715 in the y direction. And I got those by guessing check. So I'm trying to save you a
105:41 - little time. But you could create another rectangle just like we did with the menu buttons. And you
105:46 - could figure out where pause is then. But so if we enter pause, what I'm going to do is I'm going
105:52 - to store whatever level we're on in a variable called resume level, because when we enter all of
105:59 - the pause, the menu, the game over, when we do all of that stuff, remember that we set level equal
106:06 - to zero. But if you pause, and then you decide to resume, obviously, we want to put you back to
106:11 - whatever level you were at. And so to do that, we're going to store it in this variable we'll
106:16 - call resume level. And then we're going to set just this value pause equal to true. And since
106:23 - we're here, let's take a look at what to do with the restart button as well, we're basically just
106:27 - going to say now it's still 670 to 860, it's just right below it. So it's 715, all the way down to
106:35 - 760. Now for the restart, and all we're going to do if that's the case is we're going to set menu
106:43 - equal to true. And we don't need to track resume level because you're avoiding your, you're avoiding
106:48 - your right to, you're avoiding your right to, what was the word I'm trying to say, restart,
106:56 - you're not allowed to resume, you're saying you want to reboot the whole thing. Okay. And then
107:03 - in here, we'll say both of these will also set clicked equal to true so your mouse can't just
107:08 - go hog wild. All right. And so let's go ahead and take a look at how to draw pause now, right,
107:15 - because we say if pause, then we want to draw pause, it's quite a bit simpler than it's quite a bit
107:22 - simpler than draw menu, which you might expect because there's only two things you can really
107:27 - do in it. So first thing we'll do is screen dot blit and we'll blit the pause image this time,
107:34 - which is a different menu that we created. And we'll still put it at 00 because I nicely made
107:40 - all of the menus 900 by 800. And we're still going to want that mouse pause and we're still going
107:46 - to want that clicks, because we're still checking to see if buttons are collided. And now the button
107:52 - positions are the same as the bottom two buttons. So I'm going to grab our reset button and our
107:58 - timed button. I'm going to grab those. And I'm going to copy them, we're going to change them.
108:03 - And we don't need these screen dot blit texts anymore. But the one that's 170 to 661 on our
108:10 - pause menu is actually the button for resume. So if we look at that, the lower left button
108:16 - versus the main menu, the buttons are in exactly the same spot, which is super nice. We can use
108:20 - the same rectangles. But that means that this is not the timed button. This is the resume button,
108:27 - but the dimensions are the same. And then this is sort of the reset button, but it's actually
108:32 - the menu button, to be honest. And so let's take a look at what to do if the resume button is dot
108:41 - collide point with mouse pause, just like when we checked them in the menu, and clicks zero. So
108:49 - the left mouse is clicked and not clicked, which means we've lifted the mouse since the last time
108:55 - we selected something. Well, then we just want the level to be equal to resume level. So that
109:03 - temporary thing we stored in, and then we want to set pause equal to false. And it's really nice.
109:08 - That's all we have to do. So to be able to overwrite the level, we obviously need global level. And
109:14 - we obviously need global pause pause. I said that's so weird. Okay, now let's look at what to do if
109:22 - the menu button is clicked, because that's obviously a bit more complicated, because we're now saying,
109:27 - oh, we went to pause, we thought maybe we'd want to resume, but we actually decided we didn't,
109:31 - we just want to scrap this and choose a new game mode. And if that's the case, then we check if it's
109:37 - collided with the mouse, and it was the left click, not the scroll wheel, not the right click,
109:42 - and not clicked already. So this is what we intended to do with this click. Well, we're going
109:47 - to make sure that level stays zero. This is a little redundant because, because level should
109:54 - already be zero, but it's never a bad idea to cover your butt when you reset things. Alright,
109:59 - so pause is going to be false, we're going to set menu equal to true. And then we're going to go in
110:05 - here, and we're just going to say, all right, well, I'm wiping all of the game conditions that you
110:09 - have now. So total shots, points, time, past, and time remaining. And we're just going to reset all
110:18 - of these to, to their original states. And we're also going to set clicked equal to true, we're
110:28 - going to do that for both buttons. So when we enter a new menu, we can't mess with it. Okay.
110:32 - And so obviously, we need these as globals, we need menu, we need points, we need total shots,
110:38 - we need time past time remaining. I wonder if the reason people don't like this is just because
110:44 - it's kind of it looks silly, and it's time consuming, or if it's actually an efficiency issue.
110:51 - Okay, so basically, we're saying if we're on the pause menu, and we click the no go back to the
110:56 - main menu menu, then you're voiding your ability to resume however you're playing. But if you hit
111:01 - the resume button, going to go right back into the game, like nothing happened. So let's actually
111:06 - test this functionality out. I think that should be everything we need to get it working. So let's
111:11 - play free play real quick, shoot like four birds. And you'll see time elapsed is for when I hit pause.
111:17 - I'm going to give it like a few seconds. So it should definitely be increasing from four if our
111:22 - counter wasn't paused. And you see it still says time elapsed as well, five as soon as I load it
111:27 - back in. But our counter resumed and then my shots started going back up based on just
111:33 - just shooting more targets. And my points stayed the same. But now if I hit pause, and I go to
111:40 - main menu, and then I go back to free play. Oh, that's interesting. So let's figure out what we
111:47 - did wrong, what I did wrong. I'm not blaming you guys for anything. You guys are great. Okay, I
111:52 - think I see what's going on. It's funny that I didn't catch it. But basically, when it wasn't
111:59 - that it was retaining level two as a score, it was keeping level one, but we never re initialize
112:06 - the coordinates for the game. So when we had the all of our initial coordinates that we kind of
112:13 - define outside of the main game loop, right down here, we never re initialize these coordinates
112:21 - anywhere. So basically, it was loading in at level zero, but we never redefined the coordinates. So
112:28 - it's on empty list. And then it moved on it figured like, Okay, well, you know, then level one is
112:36 - done. So I'm going to level two. And so what we need to do for that is we just basically need to
112:41 - initialize the coordinates. Anytime we start a new version of the game. Okay, and I think the
112:47 - easiest way to do this is to say basically, if level equals one, if level equals one, and not a
113:00 - variable we'll call new chords, then we want to initialize all of the coordinates just like that.
113:07 - And so we'll make this variable new chords, do, do, do, do new. Coords equals and we'll say
113:18 - equal to false right when the game boots up. And then we will, we can get rid of these now,
113:24 - I guess we should be able to. And then we'll say, if where did I put that if level is equal to one
113:33 - and not new chords, then we want to initialize these coordinates. But then we also at the end
113:38 - want to set new chords equal to false or true. What I say it was in the beginning. Yeah, and not
113:48 - it's true. Okay. And so this is kind of an easy way to get. Yeah, yeah. Now, what we'll do is we'll
113:58 - say when we're in draw menu. If any of these buttons new chords, if any of these buttons get
114:08 - pressed these free play ammo or timed, then we'll say new chords equals false. So this means we
114:19 - need a new coordinates, maybe that was backwards, maybe I should have said if new chords are being
114:24 - called for but this should do the trick. So now any time we're in that menu, and we choose a game
114:32 - mode, one chords is not defined. Dang it. Maybe the issue is just that these should be initialized
114:39 - in the very beginning. Free play. Well, that's shirt certainly didn't give me new coordinates.
114:56 - It sent me right to level three. Okay, I'm thinking let's try to make new chords. When new chords is
115:03 - true, we want to reinitialize these values. So we'll say draw menu, drop pause do do down here.
115:14 - And if level is one, and we're calling for new chords, then we're going to go through do this
115:21 - whole list, we aren't going to yeah, we want it like that. And then in our draw menu, if any of
115:30 - these buttons get pressed, we want to set new coordinates equal to true. So it's time for you
115:36 - to go through and get a new set of coordinates. Not that one. That one. Yeah. Alright, alright,
115:49 - so I think this code would be working pretty sweet. If I didn't have this if level equals one in here,
115:54 - and we really don't need the if level equals one, I think the issue is when you click on a button in
116:00 - menu, you're inside this line of code. And so then you click on it. And then we come right down here
116:06 - to where it's checking the levels. And it sees that there's no enemies in the list. So it goes
116:11 - straight to three. And that looks like it's over. So what we want to do is say anytime it says we
116:16 - need new coordinates immediately give me new coordinates. That should work pretty well.
116:21 - So let's go ahead bam, bam, bam, bam, bam, pause, pause. And let's resume. And we still have the
116:28 - same birds. And let's see if I can get to the second level. Okay, and now I'm on the second level,
116:34 - I'll shoot a few blue plates. Let's pause it. Now, let's go to the main menu. Let's hit free play
116:40 - again. Okay, well, this is progress because it gives us all the blue plates back, there's no shot
116:47 - plates, but it keeps us on level two, which is very interesting. Okay, there's been a lot of
116:52 - troubleshooting here. And I promise I'm going to edit out the parts where I just quietly am
116:56 - sitting and thinking to myself. But I think the last thing we need to do is just when we enter
117:01 - the menu, we need to set new chords equal to true right there, rather than waiting. So basically,
117:08 - I think we are writing new coordinates too late. So let's try setting new chords equal to true.
117:16 - Every time we go to the main menu, right? So that would be here as well. And so this should
117:23 - essentially give us a full new list. And then that's good, because every time we go to bam, bam,
117:32 - and then bam, yeah, okay, so this is going to set level equal to one when we enter. And because
117:40 - the menu is down here, before the new chords, that's just means that we need the new coordinates to
117:46 - be generated before we actually click the button on the menu. So the menu button is going to be
117:53 - too late for us to do anything about it. So now in free play, if I can go ahead and clear this first
117:59 - level. All right, now I'm in level two, I swear if I restart, and I do free play again, it'll send
118:08 - us back to one. Okay, now if I get to two, and I do pause and then main menu, it should also send
118:14 - us back to level one. Pause, main menu, free play level one. Okay, so I apologize for the
118:24 - troubleshooting, I will hopefully edit out the most painful parts. But I think it's useful to see
118:28 - that even when it's a project where you have a plan and you have a preparation plan, you can be a
118:34 - little confused by what's going on. And it just didn't make sense to me. But now I see what was
118:39 - happening is we were saying level equal to one, and calling new chords at the same time. But we
118:46 - create the new coordinates at the very top of every loop. And so we saw the button was clicked
118:51 - around here. And then we came down here and saw that the target boxes were completely empty. And
118:57 - so then we moved the level up one, and then the next loop happened. And that's why it was automatically
119:03 - kicking us to level two. I hope that made sense. I apologize for the delay. But let's keep going
119:09 - now. So we've got a pretty cool system for pause. The menus are working pretty well. So I think
119:16 - it's time that we check out game over conditions. And I'm sure this will go just as smoothly as
119:22 - everything else so far. But essentially, game over conditions are just going to be underneath this
119:29 - if level is greater than zero, because there's no point checking if game over under any other
119:34 - circumstances. And now there's kind of three ways to have a game over. So if game if level is equal
119:39 - to three, and the target boxes is equal to these three, four empty boxes, right? So if this happens,
119:49 - then it's game over. But there's other ways it could happen to or mode equals one, right, which is
119:54 - the accuracy. And ammo is equal to zero, right? So that means we've run out of bullets, because
120:00 - then the game's over as well. Or mode is equal to two, and time remaining has gone down to zero.
120:12 - Okay, so let me enter so that we're on a new wrong time zero. And let's put a new line character
120:21 - in there so that we're able to do it this way. Okay, so these are the three different things
120:26 - that could actually cause game over, we've actually cleared the entire board that could happen in any
120:30 - game mode, but especially free play. Or we've run out of ammo in the accuracy mode, or we have run
120:38 - out of time in the timed mode. And now, okay, so what do we do when one of these three game over
120:44 - conditions happens? Well, we want to set new chords equal to true. So right off the bat,
120:52 - we're saying we're going to enter game over. And so the menu is going to basically pop up first,
120:58 - it'll say game over and give you the option to play again, or just exit the program. But in either
121:04 - case, we want to get cooking on those new chords in the background. And then let's take a look at
121:09 - what to actually do because obviously, the variable game over is going to be equal to true,
121:16 - that'll be something that we use for our draw game over. And then we're going to set level equal to
121:22 - zero, but we don't actually need this here, because that's already in the draw game over conditions.
121:29 - So what we want to do is we want to track what was the actual score there that we were tracking,
121:34 - and put that into our kind of like our logic for was this a high enough score that we should
121:40 - overwrite our best score. Alright, so now let's go ahead and just take a look at how to do that.
121:46 - So we'll say if mode was equal to zero, that means we were doing free play. And that will mean if our
121:54 - time past is less than our best free play score ever, or our best free play was equal to zero,
122:03 - because the only way best free play score is zero is if you haven't beaten the game before.
122:07 - So in any case, this is your best score. And then we're going to set our best free play equal to
122:12 - time past. And that variable write values is going to be equal to true, because we're going to say
122:17 - we not only want to overwrite it in our local Python program, but we want to overwrite it in the
122:24 - text file as well. Alright, so then the next check is not if mode is zero, it's going to be if mode
122:30 - is one. Alright, and so if mode is one, then what we want to do is say if points is greater than our
122:37 - best ammo score, then best ammo is going to be equal to points. And then we also want to write
122:45 - values. And so this is we we only want to update one best score at a time, right, you can't beat
122:51 - your best free play score and your best time score at the same time. So this is kind of how
122:56 - we're going to do that we handle it situation by situation. So then for mode two, which is timed,
123:02 - if points again is better than your best time score, then your best time score gets set equal
123:10 - to however many points you got, and then we're still going to write values equals true.
123:15 - I missed an equals true here, you guys caught it though, good job. Alright, and then game over
123:20 - equals true. And that should take care of it. So let me reformat this file a little bit reformat
123:27 - the file there we go. And then that'll set game over equal to true. And then we'll handle everything
123:32 - to do for the game over stuff kind of inside the draw game over just like we have with pause and menu.
123:40 - And I know that was a little chaotic, but that's just how I roll. So let's go ahead and keep draw
123:45 - pause open because draw game over will have a few similarities. Alright, so first thing we'll do
123:52 - is we'll say if mode is equal to zero, then the display score because we want to tell them what
123:58 - their score is will be equal to however much time was passed, right? Because if the game is over,
124:03 - and the mode was zero, that means you were playing free play. So your score is however
124:08 - much time was passed. And then we will say else, meaning it was mode one or two, then the display
124:15 - score is equal to however many points you scored. Alright, so those are basically the two scenarios.
124:22 - And so screen dot blit. First thing we want to put on the screen is game over image, obviously,
124:28 - just like the pause and menus. And again, it's the right size. So we just put it at zero zero,
124:37 - we don't need to scale it. And we're going to get the mouse position and clicks, which I will just
124:44 - steal from pause because I'm a sneaky thief. And then, okay, now mouse pause and clicks. And then
124:52 - we are going to define the exit button and the menu button. And we are going to steal, you guessed
124:58 - it, the resume button and the menu button. Okay, so the resume button is going to be the new exit
125:07 - button. But the position is already correct, because I made both of my menus that have two
125:12 - buttons in the same spot. And menu is in the right spot as well. So now what we want to do
125:19 - is screen dot blit our display score onto the screen. But instead of font dot render, so right,
125:29 - we have the one font defined up top, I actually want to make a new bigger font. Here it is.
125:35 - I want to make a bigger font, because this is kind of the only place where your score is displayed
125:41 - right after you like win. And so it's kind of nice to see that in a little more clarity.
125:47 - So we'll define another font that I'll call big font pie game dot font dot font, and then assets
125:53 - forward slash font forward slash my font. So it's going to be the same font file. But I want this
126:00 - to be much larger. So I'll make it 60 instead of 32. And now we'll come back down into draw game over
126:07 - screen dot blit and then display score is what we are going to blit onto the screen,
126:14 - but we haven't rendered it yet. So it's screen dot blit, and then font dot render. And again,
126:21 - it's not font dot render, this one is going to be big font dot render. So big font dot render,
126:28 - I like to be descriptive in my names. And then this one, we will just make it
126:33 - another F string. And this will be the display score. So whatever it is, whether it's points,
126:40 - if you played mode one or two, or if it's just time past, if you played free play, we'll display
126:46 - that there. And then true, and then we'll make it black. And then the position to put this in is 650,
126:54 - 570. That's just a good, that's a good spot to put this text 650, 570. Okie dokie. And now we just
127:05 - need to check what to do if these buttons are clicked, right? So if menu button dot collide
127:11 - point with the mouse pause, and you should be familiar with all these conditions by now.
127:17 - And it was the left click. And we have not already clicked something. First we'll set
127:23 - clicked equal to true. So it doesn't automatically take us to the main menu. And then,
127:29 - and then immediately click whatever button is underneath that spot. So we need global clicked.
127:37 - And we're going to have a few globals again, buckle up. Alright, but level is going to stay
127:42 - equal to zero. It should have been already, but it does not hurt to be cautious. And then pause
127:47 - is going to be equal to false. And then game over is going to be equal to false. And this is just a
127:54 - way of checking that we're essentially getting a reset out of this when we go to the menu. So menu
128:00 - equals true. So we're going to get global clicked, level, pause, game over, menu. And let's see what
128:11 - else menu. And then we want points to be equal to zero, total shots to be equal to zero, time
128:20 - past equal to zero, time remaining equal to zero, right? So let's go ahead and say
128:28 - menus coming in, points is coming in, total shots is coming in, time past time remaining,
128:36 - you're like Pete, this is so similar to clicking the menu button from pause, why didn't you click
128:40 - that? Why don't you copy that? I don't know, it's a good point, that would have been way better.
128:46 - Okay, and now let's say if exit button, this one's actually the easiest, this one's the easiest by
128:53 - far. So if exit button dot collide point with the mouse position, and it was the left click,
129:01 - and I haven't already clicked, we don't even need to do anything else complicated, we're just going
129:07 - to call the run right here, and we're going to set it equal to false. Okay, so we're just basically
129:14 - saying if I hit exit, when I'm on game over, that means I'm done done, and I'm just want to close
129:20 - the application. So that's a quick and easy way to do that. And now game over should work.
129:27 - That's a big should Pete, but I'm going to stake my reputation on it. My reputation is not worth
129:33 - anything anyways. So actually to make this game over testing a little bit easier, I'm going to start
129:38 - us on level three, just because so that way I can test game over without having to make you guys
129:46 - watch me play three levels. So let's go for it. All right, it gets immediately overwritten.
129:53 - Should have been. Okay, so we get the amount of time that elapsed, which for free play seems
130:06 - pretty good. Now if we go to main menu, you can actually see the free play best score now says
130:11 - 37, which is great. If I hit reset high scores, you'll see it goes to zero, which is also good.
130:17 - That's what we want. And if I played through the accuracy modes, let's see if I can just quickly
130:22 - burn through all my shots. So I'll probably hopefully crop some of me clicking out, but
130:29 - it's not that it's not taking that long. But you can see I've got I've used up all my bullets.
130:34 - Okay, scores 200 accuracy score took countdown. I'm not going to make you guys wait 30 seconds,
130:40 - but we verified that the pause works, the free play works, the reset high scores works.
130:47 - So the next thing we want to do is we want to take a look at actually
130:50 - storing those values in an external text file. So that when we close this out, but we come back
130:55 - and we play it the next day, or we play it in a month or a year, our high scores will all be
131:00 - stored. And reading and writing from a text file is actually super simple. So let's go ahead and
131:05 - take a look at how to do that now. First thing you want to do is you want to make sure inside of
131:10 - your game structure, you have a text file, I called mine high scores dot txt in the same
131:16 - location as your main dot pi file. And you can see mine actually has my best scores from when I
131:24 - was playing around this before. Okay, and so it goes free play ammo timed and it's just each row
131:33 - is a different is a different game mode high score. Okay, so for I in range one through four
131:42 - right underneath this spot where we loaded in all of the images, we're going to do a couple lines
131:48 - of really simple code. It's just file equals open. And then the file you want to read from and for
131:53 - us, it's high scores dot txt. I'm not sure why I've got crap jumping all over my screen, maybe
131:59 - because I typed it in wrong. Alright, but you just say what file you want to open and then an r or
132:05 - a w for read or write. And now when we first boot the game up, we want to read because we want to
132:10 - get the previous high scores from there. So we do read underscore file, which is where we're
132:16 - going to store what we actually read out of it in file dot read lines, just like that. And then
132:22 - it's going to give us a list essentially of strings separated by like new line characters. So then
132:29 - we just do file dot close, file dot closes to protect the data. Basically, you don't want an
132:34 - open file the whole time your program is running. And now what we're going to do is we're going to
132:40 - say best free play is equal to the integer equivalent of what's in read file zero. So line zero of the
132:49 - thing that we just read. And then we're going to say best ammo is the next one. And then best,
132:57 - what is this best timed is the next ones. And so that's lines one to zero one and two. And that's
133:05 - all we need to do to read the high scores in when we initially boot this thing up.
133:10 - And only slightly more complicated than that is what to do when we want to write a new high score.
133:16 - So if you remember, we've been using write values all over the place when it's time to write a new
133:22 - high score, that's this variable write values equals true. Let's just come down at the very
133:28 - bottom here and say if write values, that means that for some reason, we have a new time that we
133:34 - want to a new score that we want to write. It's the same file dot open command. And you want to
133:40 - point it to the same, the same file. But now instead of an r, it's a w for write. Okay. And then we do
133:49 - file dot write this time. And now this is important, you're overwriting the stuff in there. So you
133:57 - want to give it everything every time. So even if it's only best free play, or best ammo or best
134:03 - time that got updated, we need to give it all three of these every time. So we do a format
134:09 - string, we start with best free play, and then we use the backslash and new line character.
134:14 - And then we do best ammo. And then we say new line. And then new line. And then we give it
134:21 - best timed. And that order is important, because that's the order it'll be getting read back in.
134:26 - And all right. And then we do file indentations wrong file dot close just like this. And then
134:33 - we want to set right values equal to false. So we only do that once we're not just constantly
134:39 - overwriting it while it runs. Okay, so now you'll see I have 39 1630 and 1570 in my high scores
134:47 - dot txt file. If I boot this up, we should yeah, we get 39 1630 and 1570, which is great. Now the
134:55 - test of if our right is working is if I hit reset high scores, these all go to zero. But if I close
135:02 - this bad boy, and now I open high scores dot txt, you'll see I get 000. Now the next time that I
135:08 - boot this up, I get all zeros. And what's really cool is as you play through this and you beat each
135:14 - game mode, it's going to store that high score for you in that location. Okay, so I think the time
135:21 - has come to add sound and I always do this at the very end because sound is super fun. But it does
135:26 - make the tutorial a little bit harder because I'm competing with sounds from the computer.
135:31 - As I install as I we put sound in, then I have to like talk over it. So let's go ahead and
135:38 - in start the tool that we need to make sounds work in our pi game game. And we'll do pi game
135:44 - dot mixer dot in it. And just like that, that's all we have to give it. And then pi game dot mixer
135:50 - dot music dot load just like that. And then we do assets forward slash sounds. And then the song
135:59 - that I got for this one was just a royalty free song from YouTube. And I stored it in assets in
136:05 - sounds and then called it BG music. Okay, so that's where we have the sound stored. And now let's
136:14 - say the three different targets when you shoot them, they all make different sounds, which is kind
136:19 - of fun. So plate sound is going to be equal to pi game dot mixer dot capital s sound. And then in
136:26 - here, we just point it in the right direction. So assets, sounds, and then forward slash and this
136:31 - one's broken plates dot WAV. And then we have to do something extra or it'll be really loud is
136:39 - plate underscore sound dot set volume. And I'm just going to give it a 20% or point two command
136:47 - to set the plate. So that's kind of relative to your computer volume and your music volume,
136:52 - but you don't want these like plates and these birds and these flying saucers to be super duper
136:57 - loud. Well, you can play around this as much as you want, but I didn't want it to be super loud.
137:03 - So I got the sound I used for the bird because I didn't want you to like I didn't want to sound
137:08 - like you're shooting actual birds. I got one called drill gear, which you'll hear it still sounds
137:14 - pretty good. And then laser sound is actually pretty sweet. And all the sounds came from
137:21 - YouTube's royalty free library. So we're not infringing on everything, anything. And the laser
137:26 - is actually a little bit quieter. So point three works better than point two for that one. And
137:32 - it's called laser gun wave. Okay. And so then what we'll do is we'll say pie game dot mixer dot music
137:42 - dot play. And we'll just start the music right here. And then what we'll do as well, I think is
137:49 - in draw menu, we'll say when you click. No, let's say when you enter the menu from anywhere. So
137:58 - there's three places you could enter the menu, right? You could enter it from the main screen
138:03 - when you press reset. So here, when you hit the reset button, you go into the menu, we'll start
138:11 - the music then. And then if game over is true. So in here, do do do, regardless of what mode you're
138:20 - in, you're going to the main menu. So we'll say music is true. And then if in draw pause, you
138:27 - click the menu button, then we'll do that as well. Okay, so that's it. Now the music will restart
138:34 - anytime you enter the menu, which is cool. And now we're going to go into a check shot,
138:40 - which is where we check to see if the target has been shot. And now we're going to check and see
138:46 - what the level is to determine what player sound we should make. So if level is one, then we want
138:56 - the bird sound to play bird sound dot play. And then we'll say L if level is equal to two, then we
139:03 - want the plate sound to play dot play. And then L if level equals three, or you could just do else.
139:13 - Then we want laser sound to play. Okay, so ideally if we got everything right. And I know I keep
139:22 - saying that and it is kind of tricky. When we boot this up now, we'll be on the menu screen. And let
139:28 - me set beginner level back to zero, even though I think the game does that for us. Yeah, so menu
139:34 - should be true. And this music should play. And I think it's really sweet music. But obviously,
139:42 - I am competing with background sound now. So let's just play a little.
139:58 - All right, so maybe those sound effects are a little bit too quiet compared with how loud
140:14 - the music is. So your options are you could either set the music volume down a little bit,
140:20 - or you could bring those sound effects sounds back up a little bit. All right. So only thing I'd
140:30 - say that you probably are going to want to do is point 2.2 and point three was a little bit quiet.
140:35 - So maybe play around the balancing for a little bit, make them a little bit louder. But holy cow,
140:40 - guys, that was a huge project. We have three totally awesome levels, you could easily expand
140:46 - that and add levels to it if you wanted to. We have sound effects, we have music, we have scoring,
140:52 - we have menus that are interactive, and you can pause the game and resume the game. We have all
140:57 - this different functionality. This is a really complete game. And you guys should be super stoked
141:02 - that we just finished the whole project. It was obviously a ton of code. I apologize for the
141:07 - sections. We got a little bogged down in troubleshooting, but that's real programming. So if you
141:12 - have any questions or you want to make any modifications to the GitHub and create your own
141:17 - version, I'd be super stoked to see those. If you found this useful, if you found this fun,
141:22 - and you want to see tons more great content, consider checking out the channel, subscribe
141:26 - to the channel, leave a like on the video. It helps me a ton. I hope you guys really,
141:31 - really liked the game. As always, let me know in the comments if there's any questions at all.
141:35 - As always, good luck with your code, and thanks for watching. Thanks. Bye.

Cleaned transcript:

In this course, Pete LeMaster will teach you how to create a classic Android style shooting game with Pygame and Python, completely from scratch. Pete is a control systems engineer and creator of the LeMaster Tech YouTube channel. All right, so let's do a quick project showcase and give you a little background in description of the project before we dive into the tutorial. All right, so some of the highlights of this project are it's really a classic arcade style feel with like scrolling enemies of varying speeds and sizes that give you progressively more points as they get more difficult. We created three game modes where you can see how fast you can clear the entire game in free play mode and then in accuracy mode where you have limited ammo to get as many points as you possibly can. And lastly, there's a timed mode to see how many points you can get before your time runs out. You can also pause and resume mid run in any game mode or restart at any time. And then your high scoring is tracked and saved in an external text file that you can reset from the menu screen if you ever want to start fresh. The static images were all created ahead of time using Canva, but you could make your own versions using anything from PowerPoint, Google Slides, Canva, Photoshop, any other software you like. You could even just download images from the internet to customize yours. I included all code and assets including images, sound effects and music, font and text files that you would need for this full build at the GitHub link in the description of the video as well. The basic steps that we do to build the game are import and set up pi game as well as basic game variables and then import some of our images. Then we draw the static background images onto the game. Then we draw our gun and have it rotate based on mouse position. Then we draw the enemies into the game and then we procedurally generate the enemy's starting coordinates so we don't have to give each enemy individual code. And then we make all of the enemies move with progressive difficulty based on what tier enemy they are. And then we check to see if our mouse click collides with targets when we shoot. And then we advance between levels once we've killed all the enemies on that screen. And then we draw the scoring and status elements onto the screen including total shots taken, how much time has elapsed, how many total points we've scored, as well as the status saying what mode we're in. And then we show how to navigate the main menu screen, the pause screen, the game over screen and all of the code that comes with those buttons. And then we handle game over commands and conditions as well as high score tracking including reading and writing the high scores to an external text file. And then lastly we take a look at adding some awesome background music and sound effects to the game. All in all it takes just over two hours to build from scratch. It's around 400 lines of code. I had a ton of fun building this. I hope you do too. So without any further ado, let's get right into the tutorial. All right, let's dive right into this tutorial. I'm sure I just finished giving you guys a killer intro. So as always when you're building a pie game game, just start by importing pie game. You may need to run pip to install it if you don't already have it installed in your package. And then we're going to be doing some stuff with radial geometry. So using radians and degrees. So just import the math package right up front as well. And then go ahead and do pie game.init to sort of initialize everything in the pie game package that we'll be using in this game. And let's start just creating some setup variables. So go ahead and create an FPS or your frame rate which will make 60. And then create a timer using pie game.time.clock. And then let's go ahead and just grab a font real quick. So any game where you're going to be writing text, which in our case we're going to be saying like the score and the time elapsed. So we know we want font. Go ahead and define a font right up front. And I'll just call it pie game.font.font. So quick note, if you don't want to grab my full assets package from the GitHub, you'll need to create a lot of things. You can do every graphics thing that I created. You can make your own in PowerPoint or Google Slides. Or you can just use like Canva, which is a nice online design service. I made all of mine in Canva Pro. I'm sure I talked about this in the intro a little bit. But essentially I did a lot of the static text design ahead of time so we didn't have to do every piece of it in pie game. It's definitely possible to recreate almost everything we're doing purely in pie game. But it's going to speed the tutorial up a lot and make the game look a lot smoother to kind of use a separate application to design. Because pie game is not exactly a design tool. So you're going to see a lot of these very polished screens that are actually screens I've already made. So I'm sure I said something about that in the intro of this video. But just in case I didn't there, I covered my butt. So if you want to use like a free font and not go get anything from the internet, you can just use freesandsbold.ttf. It comes installed with almost any application. Anytime you install your IDE, you're usually going to be able to find this one. Now I actually went and grabbed an font from online for free. And I put it in this font folder. It's just called myfont.ttf. So if you're following along and you have a font that you want to use, or if you just want to customize the font in your game, just go ahead and point it to there. But actually this alone is not going to work because we have it nested in a few folders. So we need to point to it, which is going to be assets forward slash font, and then forward slash my font just like that. I know a lot of the people who have been on this channel for a while have a lot of familiarity with pie game fonts, but I like to assume there's beginners out there every time as well. So next thing we're going to do is we're going to create two constant variables for our screen width and height and store them in width and height. And then right away we're going to use those in screen equals piegame.display.set mode. And then just in square brackets, give it a width and a height. We're going to be referring to width and a height in this project quite a lot. So it's going to be nice to have those in variables, other than just like having them hard coded and trying to remember what we put for everything. And if you decide you want to mess with the overall dimensions and make it a different size, you're just going to have to scale a lot of the images that I included in the GitHub. All right, so now let's create some empty holder lists for our backgrounds, our banners, and we'll just create level equals zero. And I think we have a different colored gun for each level as well. Yeah, we do. We have a different colored gun for each level. So we will also create a list for guns here. And we're going to create some for loops to automatically populate those. You can see in each folder, I gave each levels background, banner, and gun, just a numerical number so that we can use a for loop and just address it to that number. So let's go ahead and take a look at how to do that. Excuse me. All right, so what we're going to say is for I in range, and then we don't actually want it to just be three. So there's three levels total in my version of the game. You're welcome to build it out more. But we want this for loop to give us the values one, two, and three. So to do that, we need to say from one to four, because Python for loops are not end inclusive, but they are start inclusive. So this is saying for range starting at one, going until four, but not including four. So this for loop is going to do an iteration where I equals one, two, and then three. And for those three things, we want to append an image to all of our lists. So we're going to do pygame dot, so bgs dot append, which is the command to add an item to a Python list. And then we're going to do pygame dot image, image dot load. And then that's the py games modules built in command to load an image into your game. And we're going to make them formatted strings because we need to use I in there. So it's going to be f and then assets forward slash bgs forward slash and then in curly brackets so that we can use a variable, do curly brackets, I and then dot png. So this is going to go through and it's going to grab backgrounds one, two, and three without us needing three separate lines of code. And you could say, well, we had to set up a for loop to do that. So it's only saving us one line of code right now. But we can do the exact same thing for guns and banners. So it's going to be banners dot append. And then I'm going to copy the rest of this because it's going to be the same thing. We just need to update the direction a little bit. So instead of bgs, it's going to be banners and then for guns dot append. And I'm hoping because this is all very arcade style and very like fun, kid friendly, like not offensive that YouTube's not going to care about how much YouTube's not going to care about how many times, you know, we say guns and shooting in this video, because it is not about actual violence. It is just about a fun little game. But you never know, YouTube's got interesting rules, but I don't think they care about the master tech too much. All right. And so for now, let's go ahead and just leave it at that. And I think that's probably good enough for our initial startup here. So let's just go down to the main game loop now so that we can get the screen to kind of start showing up and then we'll start filling it in with more fun and useful stuff. So we'll say run equals true. And then while run. Okay. And so this is basically a quick and easy. We create a running variable that's a boolean true false. And we say while it's true, so while run, then the first thing we want to do every loop is going to be timer.tick at our frame rate, our FPS. And then just really quickly to get the screen kind of populating. We'll do screen.fill. And we'll just make the background black as a default. And then probably the easiest thing to do right after that is let's go ahead and put the banner in the background of whatever level we're in. So we'll say screen.blit and then bg's. And then we're going to use one, two and three as the level, but their indexes in our list are zero, one and two. So we'll say level minus one. And then we're going to put that in position zero, zero. So that's saying we want our banner, our background image. That's this, the actual like frame for the level. We want that to be in the top left corner for its starting position. And then we're going to do basically the exact same command for banners. So we'll do banners, but then instead of zero, zero, it's going to be zero. And then for height, we want height minus 200. So I made my banners 200 pixels high. So that's where we want those to start. And now we're not going to see anything unless we make this level variable a one instead of a zero. Because the way I'm going to have it work is if you're in the menu or you're paused or you have the game over screen up, we're going to treat that like level zero. So all the important game stuff like score and time elapsed will be active only when level is not equal to zero. So for, we are going to start on level zero, which will take you to the main menu. But for now, let's actually start on level one, just so we can see some stuff. And then right now, this is what's called an infinite while loop. So there's actually no way to exit this loop. And that'll cause your game or your computer to crash, maybe both. So we need to just create a way to get out of the infinite loop. So it'll be for event in pygame.event.get, just like this. And then we're going to say if event.type is equal to and then pygame.quit, which is just this unique pygame command that's about the little red X that's in the top right corner of your window, that button is just pygame.quit. And so if we get pygame.quit, then we want run to be equal to false. And then we just need to come outside of our for loop and do two commands. The first one is pygame.display.flip. And then outside of our while loop, it's pygame.quit. And this pygame.display.flip is just essentially the command that says take everything we've told you to draw into the screen and actually put it on the screen. And then pygame.quit is what will actually close the program. So hopefully this already just these lines of code that we've set up are going to give us the background and banner for level one when we boot it up. And there you can go. This is actually pretty cool looking already. In my opinion, I might be biased, but I think that's pretty cool. And if you want to see all the levels, all you have to do is change what level we start on initially to two, and you'll see our like Western theme. And then three should give us our like space theme. Okay, so there we go. That's pretty cool. Why don't we take a look at drawing the gun on the screen. So the like little arcade style gun. And we'll do that with a function. So let's come down into just underneath where we blit everything else right now. And let's say if the level is greater than zero. Okay. So if level greater than zero, then we'll do this thing called draw gun. And then we're going to come up in between our variables and our main game loop. And we'll create the function draw gun. I'm not going to put any caps in it. And I'm going to spell it right. It's a one to punch. All right. And so the gun is basically something I want to have almost like an arcade gun. It's like rotating about the center roughly. And it's just really more for effect. Like the actual shooting is going to be based on your mouse, not based on this gun. This is purely for style. But I think it's really important since we're making like a arcade style game to do this step. So what we're going to do is we're going to say the mouse position is equal to pi game dot mouse dot get pause. And I happen to think this code we're about to do is actually really cool. We're going to track where the mouse is and we're going to rotate the gun so that it's always looking at the mouse. And we're going to do it with geometry, which maybe you're a computer scientist because you didn't like geometry and math and you didn't want to go into physics. But I promise this is not going to be too bad. Okay. So the point that we want the gun to essentially pivot around will be the middle of the screen. And then kind of right at the top of the banner. Because if you think of yourself as like the player of the game, you're kind of standing at the banner more or less and shooting from there. That's how I see it. So we're going to put this point for the gun to pivot about right at width over two. And then height minus 200 is where we're going to put that point. Okay. And then we're going to when the mouse clicks, we're going to just show a little dot where we clicked. So we're going to say lasers equals. And then we'll say we're going to create a little list here of what color we want the different lasers for each level to be. So I'm going to say red, purple, and then green. And this is pure preference. I just think they look pretty cool. And I made my different like arcade guns for each level. I made red on the first level, purple on the second, and then green on the third. So I'm just going to have little mouse lasers that look the same. Okay. And so now we're going to store the clicked status of the mouse in a list that I'll call clicked. Clicks and that command is pi game dot mouse dot get pressed. And what's nice about this is it's going to return a little list that tells you the left, right, the left mouse button, the scroll wheel click and the right mouse button in a little list called clicks. And so what we'll say is if the mouse position zero is not equal to the gun point zero, and this is actually a really important step because we are going to calculate the slope. And so slope, if you're not familiar is rise over run, which means Y2 minus Y1 over X2 minus X1. That's basic geometry. And you don't really actually need to know the theory behind it just to follow along. But what's important about that is because it's rise over run, if you ever had a situation where your mouse was exactly in the middle of the screen as well, your run becomes zero. It becomes X2 minus X1, but they're the same variable. And so you get a value of zero and then it's divide by zero computers don't like dividing by zero. So in just like on paper, you would write down infinity for the slope, but the computer can't process that. So basically, this is just a cover our butts. That's maybe longer than I should have talked about that. But I think it's important to explain where I'm coming from. All right. So as long as that is not the case, then we're going to calculate the slope, which is going to be mouse position one, gunpoint position one, and then divided by mouse position zero minus gun point zero. Okay. And so this is calculating the slope of a line. If you were to draw it between where we're going to be rotating our gun about and where our mouse currently is. And we'll say else because we're going to use the slope for math. So if we are in a situation where our mouse is exactly in the middle of the screen, then we'll do what we would. We'll say else and then slope is equal to just a really big negative integer because basically that's going to just give us a line that's more or less straight up. This is as close to infinity as we have to get for our game. If you don't like that, you can play around with that and kind of see what happens as you change that. It's not the most important part of the project. So I'm not going to spend too long on it. All right. Now we're going to get the angle that that slope correlates with. And to do that, we're going to use math and then the inverse tan or a tan command, which again, basic geometry inverse tangent of a slope of a line will tell you the angle between like the horizontal axis and that line. But again, geometry is kind of boring when you're building games. So we're going to move on pretty quickly from that. You just take my word for it. And then to get the actual rotation that we want, we're going to use math again, and we're going to convert our degrees or our angle into degrees because angle is being read in at radians and the pi game dot transform dot rotate command we're about to use needs it in degrees instead of needs in degrees instead of radians. Okay, so now let's go ahead and take a look. We're going to do two different things based on the mouse position. So if we look at one of these guns real quick, we'll see that the right half of the rotation as I'm looking at my screen, the right half of the rotation will look pretty good if it's like this. But it would actually look better if this was flipped horizontally when we're on the left half of the screen rather than like awkwardly bending all the way down. Awkwardly bending all the way backwards to shoot it'll look more like you just rotated your shoulders or something. So let's go ahead and take a look at the mouse X position. So we'll say if mouse pause zero is greater than we'll start with less than width over two. Okay, so this means that the X position of our mouse is on the left side of the screen. Then we'll say gun is equal to pi game dot transform transform dot flip. And then we just have to tell it what image we're flipping. And so it's going to be guns. And then again, it's going to be level minus one because levels will be one, two and three. But the indexes in the lists will be zero, one and two. That's just how indexes work in lists. So don't come at me. All right, and then we just give it true and then false because this is do we want to flip it in the X direction, which yes, that's the direction we want to flip it in. And then the second one is Y direction and we don't want to flip it in the Y direction. Okay, and now what we'll say is if no, that's just that's just defining the gun. Now we will say if mouse position Y one is less than and then we'll do 600. So think about our window. The first 600 are the shooting gallery and then the bottom 200 are the menu. And we don't want to be shooting when we're in the menu. We want to be like selecting the pause button or the restart button, or we're just looking at our score or whatever. So we only want to actually draw the gun on the screen. If our mouse is in the like shooting gallery area. Okay, so if the mouse Y position is in that first 600 of the screen, then we will do screen dot blit. And then rather than just blitting the gun, we need to transform the gun image. So pi game dot transform dot rotate. And then it's going to be the gun. And then here's where maybe my the way I format my guns in hindsight might not have been perfect, but there's a really easy fix for it. I have the guns pointing straight up initially. And if they were pointing horizontally, it would just go where we told it. But so basically we're off by 90 degrees from what like a logical rotation might be. So we just need to say 90 minus that rotation. And as soon as we boot this up, you'll see why we need to do that. And again, feel free to mess with that angle and see what happens if you don't. Okay, and so then we need to give it an X and Y position to blit onto. And it's going to be width over to minus 90. Because the actual image of the gun has a lot of dead space to the left and to the right. So it's going to be width over to minus 90 just to scoot it more to the middle of the screen. And then it's going to be height minus 250. Because we don't want to sit right at 200. Otherwise, the whole gun would be down in like the score section. And that wouldn't look that would look kind of weird. So this is just going to move it where we actually want it. Okay, all right, so let's go ahead and say if clicks zero, then let's also go ahead and pi game dot draw dot circle. Let's go ahead and draw on the screen. A little color to indicate that we can detect that we've clicked. And this is going to be really useful. Once we get to the point where we're actually checking to see if we've shot enemies, then this will be really useful. So we're going to add the mouse position, we're just going to draw a little circle, the color of our gun, whatever our laser for the level is, and we'll make it radius five. And so now we just need to say else, right? So we checked what to do if the mouse position is on the left half of the screen. So now we'll say else. And if else it's a little bit easier, then the gun just becomes equal to guns at level minus one. We don't have to flip it because it's already oriented this way. And then we're going to say if so now we can kind of take these three four lines and we can copy them down because this is very similar. It's still if the mouse is less than 600, but now instead of 90 minus rotation, it's actually 270 minus rotation, which should make sense to you guys. We flipped it 180. So we need to add that 180 onto our correction factor. But then with over two, and this time it's minus 30 again, feel free to boot this up. I'm trying to save you a little time in the interim and I know how long my tutorials can get. But feel free to play around with this if you want. This is just essentially a correction factor. So the guns actually sit in about the middle and about the same position. And that should be all we need to do. If we boot this up, I don't think, yeah, I left on level three. So we should get the green gun and you can see right away. It's huge. And that's because I made very large gun images because it's typically it's easier to take something, make it detailed at large scale, and then compress it down so that it's a little bit smaller. And to fix that, it's a really easy command. It's just pygame.transform, just like we did for rotate. But this time it's scale. And then so first thing you give it is the image, which is pretty easy. It's this image we're loading in. And then you just give it another argument, which is what you want to scale it down to. And so my original images were 500, 500. So to keep overall dimensions correct, to keep overall scale correct, we're going to scale it down to 100, 100. And that right there is going to fix it for all three of our guns, or it should. Yeah. So now you can see we get this cool little rotating gun. And I mean, again, I get geeked out over some of this stuff, but I think that's a really cool bit of programming. If our mouse is down in the menu, the gun goes away because it knows we're not trying to shoot. We're maybe selecting a menu button. But as soon as we're back in the gallery, we have this gun that's rotating. And if you think of yourself as like the game player, that's pretty much where you'd be standing. And you can see when we click, we get this little red, like, pew, pew, like Star Wars laser. Free sound effects for you guys. And let's go ahead and take a look. It should be red on level one. If everything's working properly. Yeah. So that right there, that looks pretty good. So we are going to go ahead and move on. Oh, having a little trouble here. We're going to go ahead and move on. And we got that really satisfying game mechanic down. But I think we should probably next take a look at drawing a level onto the screen. And by draw level, I sort of mean draw the targets of a level. So to do that, we are going to want to load in all of our targets. And in here, you can see, I have birds for level one. Again, these are not real birds. No animal violence is intended. But I just feel like I got the disclaimer out, but we have plates for two. Because I don't know, something about like an old timey Western like plate shooting gallery. And then for three, we're going to shoot spaceships. So let's go ahead and load our targets in. And to do that, we are going to want to create a list similar to what we did for Bee Gees and banners and guns. And now we're just going to make a list called target images, target images. And this is actually, we want this to be a list of lists. So we want a list of each image for each level. So we have three levels, right? So we're going to put three items in here. But then each of them should be a list of the three images for that level. Hopefully that didn't get too confusing. And then one more thing I'm going to do is actually create a dictionary to look up how many of each like tier of enemy to put in each level. So in level one, I'm going to have 10 of the biggest or level one enemies. And then I may have five of the intermediate ones and then three of the smallest ones. And then in two, I'm just going to increase the total number of enemies by a bit. So we'll do 1285. And then just because I wanted to be difficult, because life isn't hard enough already, we're going to do three of the, we're going to do a lot of spaceships on the third level. And we're actually going to add in a fourth tier. We're going to add in this purple spaceship just for the level three. It's going to be real small, really high up on the screen and moving really fast. It's kind of like a, you know, boss challenge right before you beat the game. It's just add some difficulty. And so we're going to use this targets and target images inside this for loop that we're already using to populate those lists. Okay. Excuse me. All right. So first thing is let's handle what to do on levels one or two. So if I is less than three, then we're going to say for J in range, and we're going to go from one to four again, so that we use one, two and three. Then we're going to say target images. And this time it's not just target images dot append, it's target images at I minus one. So that'll give us again, I is going to be one or two. We want to write the images for level one into index zero. So target images, I minus one dot append. And then in here, it's something you should have already been familiar with because we did it right here. It's going to be this pie game dot image dot load with a transform as well. I'm going to put on two lines for you guys, just so it's a little easier to see here. But it's going to be we're going to scale these guys, and we're going to load them now from assets and then forward slash targets. And then this is kind of tricky, but you guys are going to handle it. No problem. We need to pull the image from I and then J. So I is telling us what level we're looking at the targets for. And then J is telling us which actual one to add. And that's why we have to separate it out between I is less than three and I is equal to three, because in I is equal to three, this has to be one to five so that we catch that purple spaceship as well. And then it wouldn't be super fun or entertaining if they were all exactly the same size, but it would also take me a long time to go through and manually give them each a size. And so what I'm going to do is I'm going to say, well, you're all going to be equal to 120 minus and then to make it kind of progressively more difficult, I'm going to make them smaller based on what level they are. So when J is one, we're going to bring the first ones down to 102 basically 102 by and then this will do 80 minus J times 20. So it's basically the first one will be 102, and then the second, and then the y direction, it'll be 68 tall, but then the second ones will be 18 by 12 smaller than that. And the third ones will be 36 by 24 smaller than that. So this is a fun way of without a ton of work, creating progressively smaller enemies as they as we go through and iterate through the list. So probably that confused some of you guys, but just drop me a drop me a comment if you got turned around there. Okay, and now let's look at the else conditions. And I'm actually going to copy all this because it's not that different. It's just else we need to say for J in range one through five. And I'm sure there's a clever way you could basically say like this is going to be I floor divided by three plus four or something and just do this all in one loop. But I don't feel like spending the time to think through this and this is already pretty efficient here. So great, this is going to give us all of the images loaded in for all of our enemies. So now if we go ahead and you're going to see me collapsing a lot of the functions while we're not working on them, that's just to keep the code a little cleaner, a little easier for me to move through, because obviously 400 lines of code, we're jumping all over the place. So that's what that is. But again, any questions at any point, just let me know in the comments below. And now let's take a look at what to do when we're drawing a level. So we'll say define, draw the level. So this is going to be drawing all of the enemies for the level that we're currently in. And so we'll say if level is equal to one or level is equal to two. And this this target rex is going to be essentially the enemy hit boxes. So as we're going through and we're drawing the enemies onto the screen, we're also going to create hit boxes because Pygame doesn't know where images are necessarily per se, it just starts by drawing them in a certain spot. But you have dead space. They're obviously not perfect rectangles unless you're building kind of like a boring game. No shade at anyone who's making an all squares shooting gallery. But so we're going to create hit boxes basically inside of the images. They're just going to be invisible rectangles that we'll use for collision detection later. And for levels one or two, we want this to initially start out empty. And then for level three, we just need to add a fourth tier in there for this empty. So that we have somewhere to place it. Quick water break. All right, now we're going to have to get a list of coordinates to where we want to draw these things from. And we'll do that initializing right after we take a look at what to do them do with them. So let's just assume that we've passed in a list of the coordinates of all the enemies. Well, it's going to be for I in range range, length of coordinates. So there, there, we're going to be taking the that's an in not a second I. So now we're going to be taking a look at each individual thing in our coordinates. And then we'll say for J in range. And then length of chords, I because coordinates is most likely going to be a list of lists. Then what we want to do is say target wrecks dot at I dot append. And we're going to put in a little rectangle that's going to say the hitbox of each thing. And so pi game dot wrecked dot wrecked, and it's going to be chords at I J. So that's what level. And then that's what individual enemy. And so I will say we're going to do some stuff here that is the right way to do it. But maybe it would have made more sense if we'd initialize the coordinates first. We're in a little too deep now. But I promise we're going to show how we initialize the coordinates right after this. And then I'll come back and review this if I remember. But so the X and Y starting position for these coordinates for the hitbox are basically going to be the X coordinate and then the Y coordinate. So chords I and then J. And then because each coordinate pair is an X and then a Y coordinate in a tuple, you have to say, well, this is the X coordinate. This is the Y coordinate. And I'll tell you right off the bat that the images are also a little too big for us to use the exact starting X position. They're all they all have dead space on the sides. So 20 pixels makes a really accurate, more fair game. If you were to if you were to make that much smaller, like a plus five, you would just get a much wider hitbox or it would start kind of off to the left and not make a ton of sense. All right. So the four things we need to give a rectangle when we're defining it are X and Y starting position and then width and height. And for width and height, we're going to make it based off of we're going to make it based off of what level they're on. So it's going to be 60 minus I times 12 and then comma 60 minus minus I times 12. And so this will make them progressively smaller as we go up in difficulty tiers. Okay. Rename the element. Oh, just because I have an for loop in the outside world. And again, you may be saying, wait, I thought J was what tier of enemy they were. Well, that's not exactly right. These are coordinates just for whatever level we're on. Okay. So all right, we got to get through this one so that I can show you what the actual coordinates list is going to look like. So screen dot blit. And this is where we're actually going to draw the images onto the screen. So target images level minus one. And then the coordinates are just going to be level minus one. And then I we're still inside the for loop and we still need to draw the right image. So it's whatever level we're on from our target images. And then I, which says what tier they are. And then the actual coordinate pair. So I and then J. And so this is going to draw our image in the coordinates that we give. And then we're going to return a list of all of the rectangle hit boxes for those. Okay. So just target wrecks, not targets. All right. So I know I probably confused a few of you guys. I briefly confused myself there. We need to talk about initializing these coordinates. So let's come right before the while loop. We don't want to do this every single iteration of the loop because we really just need to generate the starting positions of all our enemies. And then we'll move them throughout the game, but we don't want to reinitialize the positions. Okay. So let's just say that let's initialize enemy and coordinates. And then after we do this, we'll go back up into our draw level and we'll talk about it a little bit more. All right. So initializing the enemy coordinates. Let's start with a list of all the coordinates that'll be empty. So for one, we'll do one, not ones coordinates. It's going to be a list of lists, right? So we'll have the coordinates for our tier one enemies, our tier two enemies, and our tier three enemies. And then we'll just make these lists right here for one, two, and three. And as always, we just have that one extra tier of enemy in level three. So we need that fourth empty bracket. All right. And now, I don't know why it's reformatting my stuff. Okay. And so now what we're going to say is for I in range, and then three, let's go back for I in range three, we'll say my list is equal to targets that dictionary we made at key one, right? So the value, this is going to create a little list that is just the list in targets one. So we're saying look at the key inside of our targets dictionary for key one, and then take that value, which is 10, five, three, and store that in this little list, which is my list. And so we'll say targets one. And then we'll say for J in range, range, my list, I, okay, so this is saying now for each item inside of my list. And so remember my list at I for zero one and two is now going to be numerical values, which for level one is 10, five, and three. So this is saying for J in range, and then our for our first loop where I is equal to zero, it's going to say for J in range 10. So it's creating 10 coordinate pairs for us. And it's going to say one coordinates, cohorts, we'll say cohorts is okay. We're going to say one cohorts at I dot append, because again, we need to say it. Well, right now we're doing this tier list, and then this tier list, and then this tier list of coordinates. So one chords I dot append, and then we need to give it in here the coordinates where we want each enemy to be drawn. And just to make it really easy and kind of procedurally drawn, we're going to say the starting X position will just be a function of the total number of objects in that tier of enemy. So for example, if they are 10, and we have a 900 wide screen, each enemy is going to be spaced apart horizontally by 90 pixels. Okay, so we're going to start by saying append, and then width, let me get my parentheses correct. Here, we've got width, floor divided by which floor division just gives you essentially a round down to the closest whole integer, and then times J. So times whatever this is, if this is our 0th, if this is our first picture, it'll draw it at 90, if it's our second, it'll draw it at 180, et cetera, et cetera. And then for our Y coordinate, we'll make it 300 minus. And then I times 150, and then just to move them up and down a little, I didn't put a minus in, there we go. So this is basically saying, our first loop, we want to draw these suckers 300 down from the top of the screen, our second tier, we'll put at like 150 down, and we'll draw our top tier right at the top of the screen, where the images start at zero pixels from the top. Okay, and now we'll space them up and down every other just to be kind of fun. So we'll move them vertically by 30 times. And then this is J modulo two is essentially a J remainder two. So this is saying every other, we're going to have an odd number for J, which means the remainder will be one, which means that that means that this will be just adding 30 to its Y position. So this little bit of code is really just a simple, straightforward way to get like every other patterns in drawings. All right. And now we just need to do the exact same thing for two chords, except, well, really except nothing, except the text needs to change to two. But again, I felt it was a little bit easier to do it with separate for loops just because the third one is a little bit different. So now it's for I in range for and also this needs to be targets to and this needs to be targets three. And then because this one has four tiers rather than moving them up by 150 each time, we want to buy 100 each time. And trust me, when we get to the spaceship levels, that's going to be a lot of enemies, but it's still going to look really good. Okay. And so I believe that's all we need to do to generate the coordinate system. Let me re go through that one more time, just because I know there's probably a lot of confused viewers trying to follow along and saying, what the heck did you just do here? And if you didn't, good for you, you're really smart. But so basically, we're saying we want to quickly get a coordinate for every enemy we defined in our dictionary. So right, we said at level one, we want 10, 10 big red birds, five medium sized blue birds, and then three little green birds, and then 12, 8 and 5 for the plates. And then for the UFOs, we're going to have 15 red UFOs, we're going to have 12 blue ones, eight green ones and three little purple ones zipping around the screen. And the way we set this up as you're playing with your game, you can mess around with these numbers and figure out what you actually think like a fair number of enemies for each level is just by changing them here. And we set it up to be procedural and smart, so that it'll just be easily adjustable, and it'll just expand and kind of contract with changing those numbers. But so basically, right when the game boots up, and not inside the loop, we're going to generate some coordinates, and we're going to create these empty lists to store the coordinates, and we're going to create these empty lists to store the coordinates in. And so for level one, this first empty block is going to store all the red birds coordinates, this second block is going to store all the blue ones, and the third one will store all the green ones. That's what I is here. Are you the big red bird, the medium sized blue bird, or the little green bird? Okay, and then we're grabbing a temporary list just called my list from the targets dictionary based on what level coordinates I'm generating it. So in targets, we said level one is going to be this list of how many enemies to have, and we store that in my list. Then we create this second for loop, which is for J in range my list I so that's saying for however many of the bird that I'm currently looking at the tier that I'm currently looking at. So for big red bird, this is 10. So for J in range 10, and now I want to just create an x and y coordinate based on what tier of enemy I am where the harder smaller tier goes higher and higher up on the screen. And then the the larger birds are also going to be lower on the screen and then the number of enemies is going to determine your x position on the screen. So that's what we did. So now we're going to have three coordinates list one chords, two chords and three chords that are a list of lists or an array. Where each list inside there is a specific tiers set of coordinates. So if we look at draw level again, then we're saying for I in range, length of chords, which is telling us how many tiers of enemy do I have. Okay, and so for one and two, that's going to say three basically, because the length of chords list for level one and level two are going to be three items. And then for level three, this will be a four. But then we say for J in range, length of chords, I so this is saying for however many enemies of that tier there are. Then I want to create a hitbox based on what tier of enemy it is, which is I that will get progressively smaller as the enemies get smaller. And then I want to draw the image for that enemy onto the screen at its coordinate system. Okay, so super complicated, I guess. But I think you'll see exactly what we just did if we go ahead and boot this up. Should see a bunch of well, list index out of range. Okay, so let's go ahead and take a look at line 87 of our code here and see what's going on. Oh, it's just that we forgot to change this to three chords. So when it got to essentially, I equals four, there was nowhere to store that I equals three, there was nowhere to store that. So just be careful when you copy paste to make sure you catch all your copy paste mistakes. And I do not always do that. Okay, and so our birds is not on the screen. And I was about to panic that our draw level function didn't work. But you guys probably caught this, we didn't put draw level on the screen anywhere. So draw level. And then the coordinates that we want to pass in are just going to be one chords, if level is equal to one, then we're going to pass in one chords. And we are going to just do some L ifs based on what level we're on. So L if level is two, then pass in two chords, and then L if level is three, pass in three chords, three chords, there we go. And then two chords. Okay, so this should give us all of our birds. Nope, okay, argument must be rect style object. So I guarantee this is just me not using the right formatting, not properly copying something to the second line. So let's look here. So by game dot wreck direct, there needs to be one more parentheses level in here. So just double check dot append, that should be the back one and then dot wrecked should be. Yeah, so we need one more level of core. There we go. So inside pi game dot wreck dot wreck, there needs to be two sets of tuples x and y start position, and then width and height. And I just got the parentheses messed up. So let's try that one more time. There's a bunch of bunch of birds, but they're not, they're not spaced out appropriately. So let's go ahead and take a look at our initialized chords one more time just to see what we're doing wrong. Oh, I see it right away. These are supposed to be I times 150 minus 150 and minus 100. It's hard. It's hard to it's hard to teach and do at the same time. But let's take a look that should fix it. There you go. And you can see this. It's really cool. It's a cool spacing. Let's go ahead and change the levels to two and three just to kind of see where everybody starts. So this is where our plates will start. And then let's look at where our UFOs will start. And there should be a lot. Yeah, you can see we've got now we've got that fourth tier even, which is really cool. So shooting them doesn't do anything yet. And also we don't, we don't have any way of like moving between levels when you've shot all of your enemies. So let's go ahead and also when we draw the level, right, we get target rectangles back. So let's go ahead and say where is draw levels? Here they are. So these should all return target, let's say boxes, so we don't get confused with what target rectangles is. Okay, so let's go ahead and say target boxes, target boxes is equal to those. So now we're actually getting that back. And let's go ahead and take I think the next best thing to do is just going to be take a look at how to make those guys move across the screen, because then it really starts feeling like a game, it starts looking like an arcade game. And to do that, just like we made this draw level function, we're going to make a move level function. Okay, so we will say move level, and we'll give it the coordinates as well. And so to draw level, move level, draw level, move level. And I know you guys are like, Pete, don't forget the copy paste errors, because I keep having those. But I caught them this time, you guys, I caught them. All right, so let's go up above draw level, just because that's where I want to put it. And let's define move level. All right. And there's a lot of different ways you could make these guys move, you could make them wiggle up and down as they go across the screen. I'm just going to make it to where they all move laterally across the screen. And I'm just going to make the higher smaller targets move a little faster. So increasing levels of difficulty, that's pretty much how those arcade games work. But there are definitely ways you can spruce this up, just based on your own creativity. All right, so let's say if level is equal to one, or level is equal to two, then we'll say that our maximum value is three, right? So we need some variable that says how big our for loop should be if we only want to do this once. And then we'll say else, max val is equal to four. And now let's set up a for loop that'll move everything based on what tier of enemy it is. So we'll say for I in range, max val, that variable we just came up with, we'll say for J in range, length of chords at I, there we go. So this again, I know how many tiers of like parentheses and everything and nested for loops we're passing through, but try to keep it straight that we're passing in one levels worth of coordinates. And each coordinates list is an array where each item inside of that is another list of all of the coordinates for that item. So basically, we're saying for J in range, length of coordinates I, which is saying for as many enemies of the tier that I'm currently looking at. And then what we'll say is, we'll move the coordinates of the object that we're looking at into a temporary tuple, because you cannot adjust values in a tuple, it's just the nature of Python tuples, which is parentheses with two values in them, you can't overwrite those. So if we're trying to move them, if we're trying to move every enemy at the same time, we can't just overwrite the individual items in a tuple, we have to actually change just what the entire tuple is. So we'll move the previous coordinates into this variable my chords, and we'll say if my so let's start by handling like passing off screen to the left, we'll say if my chords zero, so the x position is less than negative 100 is less than negative 150, which will let even the biggest target get fully off screen. Then we say chords at ij is equal to and we move it all the way to the right edge now. So we'll have everything scrolling to the left just to be easy. And then we'll say the coordinates ij are equal to width, and then we'll leave the y position as is, so that's my chords one. And this is a tuple, because it's coordinates. Okay, so this is basically saying if I've gone off screen to the left, I'm just going to move you over to the right. So you basically are permanently cycling until you get shot. And then we'll say else, meaning you're still on screen in some form or fashion, we'll say chords at ij are equal to and now a new tuple, which is going to be our x position minus, and we'll say to to the power of whatever tier of enemy we are. Okay, so if this is tier zero, which I guess is the big red birds, then this is going to be two to the zero, which is one. So the red enemies are going to move left at a speed of one. But then if you're a tier one, this becomes two to the first power, which is minus two. So it just doubles the speed. But what's really fun is if you're a tier three enemy, so you're the little green bird in the first level, this is two squared, or minus four. And then it gets it's minus eight with the little purple UFOs. So you'll see once we get to level three, this is actually going to make the purple guys really fast and pretty hard to hit. Okay, and then we'll leave the y coordinates alone. Alright, so this is saying, if you're on screen, I'm going to move you to the left, based on what tier of enemy you are. And then we're just going to return the coordinates back since we're overriding them. So we need to come down to where we have move level. And we just need to understand that we're getting one chords back from this. And we're getting two chords back from this. And we're getting three chords back from this. Okay, so this is going to give us, this is going to update all of our coordinates should for everything simultaneously. We still have level three in here, let's go ahead and boot up. And hopefully we have a bunch of Nope, I messed something up, but no surprise there. Okay, so let's take a look line 70. It says that else chords I j are equal to and then my chords, this needs to be the x coordinate. So it needs to be my chords at zero minus two to the I silly mistake. But let's try that again. Hopefully we get a bunch of UFOs moving. Yeah, so here you go. Alright, so this is really cool, right? Is this not already give you like retro arcade shooter game feel. And you can see these purple, these purple UFOs are absolutely eating across the screen. They're just flying. And even the blue ones in the green ones are moving pretty good. I think I've continually been saying that like blue was before green. I don't know if that's how I did it for every level. But it looks like let's see what two is. So where the blue plates. Yeah, okay, so on level one and two, I made blue, the middle lever level. But let me see, I guess that's so funny. Okay, so the the second tier on the third level is green. The second tier on level one and two are blue. Hopefully, I don't have a bunch of OCD viewers out there who feel the need to flip that. But if you do feel the need to flip that, I'm sure you can figure it out. Alrighty, so I think probably the best thing to do next would be, let's figure out how to check the shot. So check if if our mouse clicks, let's check and see if we have hit a target. And if we have, let's go ahead and give some points. So let's introduce like the format of scoring here. So we'll say, down below level, we'll just say points is equal to zero initially, we'll create a new variable to track our points. And we're just going to create a variable that I think we'll call define check shot. So we're checking when we've shot. And what we're going to need to pass in here is the list of our targets, and the coordinates of and the coordinate list. And the reason we need both is because we are checking to see if the rectangular hit boxes that are stored in our target list have been hit. But if it has been hit, then we need to delete out the coordinates for that enemy, because that's how we actually track how many enemies are left, not this targets list, this coordinates list, right? If you think of draw level and move level, they're based on how many sets of coordinates we have, not how many rectangles there are in the targets list. So we know right off the bat that what we're doing is if we've shot something, we need to return a modified coordinate list that says that one is no longer in there. Okay. And we'll just call the global of points, because it's easier to modify in here, if we just say global points, but you you could pass it in and return it as a parameter as well. And now I'm going to get the mouse position kind of just like we already did in the draw level. And I'm going to say pi game dot mouse dot get pause. And I'm going to say for I in range, length of targets, which will be our list of all of the targets hit boxes. And each thing in there is going to be a rectangle, you know, okay, for I in range, length of targets. So targets, again, is a list of lists. It's another one of those arrays thinking back to, let me go, where did we create that that was draw level, right? Yeah, so this target rex is what we're calling the targets list in here, I just always try to call it something a little different when we use them inside functions. So we don't get our wires crossed. But this is the target rex list, and it's this list of lists. So we're going to do another nested for loop, which is for I in range, length of targets, and then for j in range, length of targets, I, and you're probably getting sick of watching me type nested for loops, but they do a lot of work for us. Okay. And now what we're going to say is if targets, I j dot collide point with the mouse position, then we want chords at I so now we're saying I, which is going to be whatever tier of target we're looking for. So chords I dot pop, and then j and pop is the Python command for popping a specific item out of a Python list, using the index of that item. So we have I, which tells us what tier of target it is, and then j, which tells us tells us its place in the chords and targets list. And so we just want to pop that set of coordinates out of our coordinates list. And then what we're going to do as well, is we're going to add so plus equals two points, we're going to do 10 plus and then this is sort of similar to how we place them and size them, we're going to make it progressive based on the tier of the enemy. So we're going to say 10 plus 10 raised 10 times I to the not to yeah, I squared. Okay, so this let's think through what this means for the different tiers. Okay, this is 10 plus 10 times zero squared for red enemies, which just means zero. So this is going to be red enemies are worth 10 points. Now for the second level of enemy that which is going to be I equals one, this is I squared, which is just one, and then times 10. So this makes the lowest rung of enemy worth 10, the second rung worth 20. But then the third rung, this becomes two squared, so four times 10, which is 40 plus 10. So our enemy point values go 102050. Now try to do the math, what happens if we have those purple UFOs, what does that do to score this is three squared, which is nine. So nine times 10 is 90. So that that makes them worth 100. So the tier scores are 102050 and 100, just by this one simple line of code, checking what tier of enemy we just shot. All right, and now we got to do this is where we'll come back and I'll leave ourselves a note. So add sounds for enemy hit, when we get to sounds at the end, we're going to put the sounds right in here where we're hitting them. But that's all we have to do right now, for the inside of the check shots function. The only other thing we have to do is we have to figure out where the right place to call that is actually going to be. And so what we need to do is we need to create a variable that's checking to see if we've shot or not. So we'll create a variable, we'll say shot equals false. And then I'm going to come down inside of each of these if levels, and I'm going to say, okay, if shot, then we want to check and see that one chords is equal to, and then check shot, and then the target list. So we called it target boxes in the outside world, and then one chords, okay, and we're going to copy this same bad boy into each of these guys. So if shot, then two chords, target box, and we pass in the list for two chords, and then you guessed it, we're doing the same thing for three, three chords, and then target boxes, and then three chords. And now we need to figure out what should trigger the shot variable, because everything else in here should work on its own. Other than one thing I always forget, if you make this if shot statement, and you only want to run once, which we do right once per click, then you want to make sure that shot equals false once you've executed the code. So this is saying, once we figured out how to check whether or not we shoot, which will be based on a mouse click, then we want to run this check shot once, depending on what level we're on. And then we want to immediately say, okay, well, I'm not checking that anymore. So shot is equal to false. This will prevent you from being able to hold down the mouse click, and just drag it all over the screen. Because that would not be very fun. If you just had some kind of like infinite ray gun that couldn't be stopped. Or maybe you guys think that would be super fun. But that's not how I'm going to make mine. Okay, so let's come down underneath our if event dot type is pi game dot quit and let's add a new event type. So this will be if event dot type is equal to and now it's going to be pi game dot mouse, mouse button down and it's all caps because it's crazy. And I'm going to say event dot button is equal to one. So similar to the mouse get clicked function that we already have looked at the mouse clicks get clicked that we use to draw the where was that that was in draw a level right. Yeah, so the not draw a level where come on guys help me out draw a gun. Thanks for the help. So this if clicks, this is saying, you know, get all of the clicks from the pi game dot mouse dot get pressed. Now pi game dot mouse get pi game dot mouse dot event dot button, this one that we're using an event handling is a little bit different because the left key is one for event right here. But in get clicked that other thing we were looking at it's zero. So just understand this is still me saying, if the mouse button has been pressed, and it's the left click because I'm not going to let you shoot with the right click I guess you could if you wanted to. But anyways, this is saying if you click the mouse and it's the left button, I'm gonna again, I'm gonna get the mouse position out here, because that's important for knowing what we've clicked on. So mouse position equals pi game dot mouse dot get pause just like before. And then let's go ahead and say, if and now, if my mouse position x, so mouse position x, and remember, this is sort of like when we checked whether or not to draw the gun. Okay, we want to check whether the mouse position is on the screen. So this is zero to width because if your mouse is off of the little window that you're playing on, you're doing something else on your computer. So we shouldn't be messing with the game. Okay, and then we want to say, and the y position, so mouse position y, and this this putting it in between two kind of less than brackets is just our way of putting it in a range and just one command, it cuts down on the total number of and statements we need by a lot. Alright, so now the y position, the y position for this one just needs to be less so greater than zero still meaning in the window, and then height minus 200 is basically is basically the shooting window, right, that's where our enemies could be. And so if that's all true, then we'll set shot equal to true. And then when we're tracking total shots and ammunition, so like we'll do an accuracy mode where you only get a certain number of bullets to get the highest score you possibly can. So we'll do two other things anytime we shoot, we'll add one to a total shot tracker. And then we'll just say if mode is equal to one, so that'll be our accuracy mode, we'll do ammo minus equals one. And it's just smart to think through, is there additional game functionality that I'd want to put in here while I'm doing it. And so in this case, I think there is but we need to make these variables. So we'll say mode and initially we'll set equal to zero. But just to kind of give you what I'm thinking, I'm thinking zero will be the free play mode, one will be accuracy, and then two will be timed for mode. And then ammo initially we'll make it zero because if you're playing free play, you're going to have infinite ammo, and we'll only check ammo if mode is one. And then we'll set total shots equal to zero when the game boots up, because you haven't taken any shots. We're not going to mess with modes just yet. First we're going to keep working on just how to check if something's been shot and get it off the screen. But it's important to have those in there. So what should happen now if we did everything right, and that's a big if I'll admit, but if we did everything right, then that should give us everything we need to, yeah, remove plates, okay, so that's really cool. We can just shoot the plates off of the screen with our mouse clicks. And it's very satisfying, it really is. It's not the most difficult thing in the world, but that's where you guys as programmers can come in and add your own challenges to it. So that was level two, let's go ahead and take a look at what level three is going to look like level three, because that's got the little UFOs on it. Okay, yeah, and those UFOs are booking it. I actually like do find myself missing the purple UFOs pretty often. Obviously, you just have this red wave, it's gonna be a lot of Americans triggered by that sentence. But you just have all these red UFOs right across the bottom. But so it's really fun, but you may have noticed there, there's nothing when you clear a level that moves the level on to the next the next phase. So let's come down kind of below our event handling. And let's take a look at some stuff that we'll do to sort of handle what to do when a level's over. So if level is greater than zero, we'll say if target boxes is equal to so this is going to be a call it target boxes or target list. Why is this always so confusing for me? I'm just, I'm just weak. Target boxes. Yeah, okay. So if target boxes is equal to equal to this empty list, right, so not populated at all. And that's the reason I'm putting it at the very bottom, because it will initially be empty until we've run that draw level thing for the first time. So if target boxes is totally empty, and level is less than three, and that's why it's okay to check this way, because target boxes being totally empty when it is level three will actually be game over command. So let's say just level plus equals one, okay. And so that should do it for just getting it to move from level one to two, and then two to three, it doesn't handle game over yet. But that's okay, because that's kind of a separate beast. All right, so let's go ahead and take a look. Now, if I can just clear out all these birds really quickly, and I'll try to be accurate. So you guys don't just have to watch me play the game, although you're probably playing the game to phone long. Bam, and now we're in level two. And we should go to level three, just for the sake of testing. And because it's super fun, I'm going to just clear these out. Bam. And we're in level three. Okay, so nothing bad is going to happen when I clear all the enemies here, but nothing good is going to happen either because we have not, we haven't taken a look at drawing the menu or game over or pause or any of the menus. So let's go ahead and take a look at how to do that. Now, let's also come in where we have if level is greater than zero, we're going to draw the gun. Why don't we say we'll also draw the things that will go in the score area? Okay, so in that score menu, which you probably saw on all the banners, there's this big block, which when I was making the static images for the banner, I didn't put anything in there, because we're going to control what goes in there from our game. And we're going to do that using the draw score function. And so you need to just make sure that this happens in your code after the screen dot blip banners to make sure that your stuff you're putting in that score block gets drawn on top of it, not underneath it. All right, so check shot worked great. Good job, everybody. Pat's on the back all around. And let's go ahead and define, what did I just call it? Draw score, brain fart. Alright, so what we're going to put in draw score will depend on the mode for a little bit, but we're going to put a few things in every time. So we're going to put how many points you've gotten, which will be based on total number of enemies that you've shot, right? So font dot render, and we'll make this a formatted string so we can put a formatted string so we can put some text and the actual scoring in there. And we'll say points is going to be points, just like that, clever. And now what we'll say is true for anti alias, which just smooths the text out. And then we'll make it black text. And then we're going to put that on screen. So screen dot blip, and then points text. And if you have anything different in your game, or you're building your own version, which is super fun, I recommend, you just need to probably guess and check this a little bit to know like what the perfect pixel position for this is. But I have found that let me just go ahead and reformat that scoot it down a little. I found that 32660 looks really good with where it is. So if I run just this, in about, oh, yeah, needs to be a tuple for your coordinates. Well, I am having a rough day formatting. All right, so now you can see points is down there. And as I shoot these birds are point score updates based on the levels that we created the rules. And you may say, hey, that text looks a little bit small to have that full section for itself. And you're right, but that's because that's not the only thing we're putting down there. All right, so let's go ahead and copy this points text. And let's take a look at the next thing we want to do, which for me is going to be total shots that we've taken. So even in a game mode that is not based on accuracy, I'm just going to report how many total shots have been taken just because that's kind of a fun stat. So if you're doing free play, it's still fun to know like how many total shots it took you. So we'll say total shots. And then instead of points, we will say total shots just like that. And we already had that variable made. And now we're going to leave it in the same X position, but we're going to scoot it down. And we're going to scoot it down 27 pixels, which might seem a little bit arbitrary. But that's actually about one quarter of the gap that we have. And I'm going to put a total of four pieces of text in there. So I'm going to say we are going to show time text, which is going to be how much time you've been playing. And so for that we'll say time elapsed. And then this we're going to need to make a new variable that we'll call time past, I guess, elapsed is a fancy word. And we will just say past when we create the variable. And then we're going to scoot down another 87, which puts us or 27, which puts us at 714. And then this last one is going to be a little more complicated. So it's going to be based on the mode, right? So if mode is zero, then we want what we'll call mode text, mode text to say, so in mode zero, it's just free play. So there's no like special game variable that we're keeping track of. And then we need to do some L ifs in case we're playing an accuracy or timed mode. So if mode is one, or mode is two, then mode text is going to change a little. And so if we're doing mode one, that means we're doing the accuracy one. So we'll say ammo remaining and then a colon. And then in here, we'll put that ammo variable that we created. And then if we're doing the mode two, which is going to be the timed one, we'll do timed remaining is equal to and then we'll make a new variable called time remaining. And so those for all of them, it's going to be true, and that's going to be black. And we'll always put it another 27 down on the screen. So that's 741. But now, obviously, we have to make time passed and time remaining variables just so it doesn't crap out. So we'll put those down with ammo, we'll do time passed. And it's initially going to be zero and time remaining. We'll also say it's going to be initially zero because until you've selected a game mode, it doesn't really matter. We're not checking that for anything right now. All right. And so this needs to be mode text instead of shots text. But now we should have a pretty full screen. Okay, so we have points, total shots, time elapsed and free play. Now total shots and points will go up right now. Time elapsed will not. So it's pretty easy to, it's pretty easy to get that in here. So let's do the time elapsed just because that's a real easy little mechanic. We're going to come down under timer dot tick FPS. And we're going to say if counter is less than 60, then counter plus equal one. And then we'll say else counter is equal to and we'll reset it back to one. So this will do 12345 all the way up to 60. And then once it hits 60, we'll send it back to one. So that will be our 60 FPS frames per second checker. And then we'll say, if level is not equal to actually let's put the if level above the counter. Okay, so if level is not equal to zero, meaning we're not in a menu of some sort game over pause or main menu, then we'll do our time elapsed checking. Okay, so if the counter is less than 60, then we want to add one to the counter. Otherwise, we're going to reset the counter. And then when we reset the counter, we're going to add one to time past. So time past plus equal one. And then what we're going to say is if our mode is equal to two, which is our timed version of the game, then we're going to just subtract one from time remaining. So we don't have to worry about this yet. When we boot it up, as long as we don't put it into time remaining mode, which we're not going to do just yet. Okay. So this is just how we're going to track time elapsed while we're actively playing the game. But if we're in the menus, we don't want time elapsed to be counting. And so initially, counter is going to be equal to one, just so it starts right at one. And now that's because I did less than 60. If you want to do this as less than 59 or less than or equal to 58, for some reason, if you wanted to complicate it, you could. But I like thinking of it one through 60, just as your 60 seconds, you could think of it as zero to 59. It's your call. But that's, that's how we're going to track time elapsed. So there you go. Now you can see without even shooting, I'm getting a basically a second every second, which looks pretty good. And I can, I can miss a whole bunch and points doesn't update. But then every time I hit a target points updates. So all this score tracking is going really well in free play, which brings us to the obvious question of how do we actually change modes, right? There's no way right now to play ammo, accuracy mode, or the timed mode without me actually changing some parameters. And we also don't start on the menu screen. So what we need to do is we need to take a look at what do we do for drawing the menu, drawing game over and drawing pause. So let's just come into our main loop, I'm going to collapse this if statement here. And after we blitz stuff on the screen, but before we check the if level statements, so those three guys, we're going to add some stuff here. And we're basically going to say, if menu, so we're going to create a new variable called menu, we're going to say level is equal to zero. And then we're going to run this, we're just going to draw everything for the menu and a function that will call draw menu. I think that's the most pythonic way of doing it. And then we'll say if game over, then we are going to say, again, level will be equal to zero, because that's kind of how we're going to control if we're in a menu or not. And then this will be draw game over. And then we'll say if pause, right, because that's kind of our third menu option, we'll say level equals zero, and then draw pause. And we'll set this up to where you can't really be in two of these at the same time. So I'm just gonna cut, we need to make variables menu game over and pause. So let's come up here. We'll say menu is actually going to be equal to true when we boot the game up game over is going to be false and pause is going to be equal to false. Okay, and so I guess I'll also make level equals zero initially, but menu being true should do that on its own right here, you would just have a flicker of the actual like background being drawn on if we didn't. Okay, so easy enough, we'll say now we need to make draw menu, draw game and draw pause, draw game over and draw pause. And so that our code doesn't throw an error, let's create all of those right now, draw menu. And for now, we'll just put pass, but we're going to fill them out. So define, draw game over, and I'll put pass. And then I'm going to have to delete a w there, because I draw. Alright, and then define, draw, pause, and I'll put pass just so that it doesn't throw an error or a hissy fit. Okay, and everything formatting looks alright. And now this should handle everything we need to do while we're in the menus. So let's take a look at draw menu, that's probably the most important one anyways. And let's go ahead and just start thinking through what we've got to do in here. So we'll initially say game over is false, and pause is false, right. And to actually be able to read, write to these, we need them to be globals. Every time I make a function, and I call a bunch of globals, there's like someone in my comments who says they wish I wouldn't use so many globals, and they wish I would just pass everything in and out. I honestly don't know why people feel so strongly about that, like I'm not making high ultra high performance data science experiment stuff. But if you know, like a good reason why this is bad practice, maybe let me know in the comments below, because I find it really easy to call variables that I don't feel like passing in and returning, just as globals, but some people don't like it. So if you know why that is, let me know. But okay, the easiest thing to do is going to be screen dot blit. And then the menu image right onto the screen, because we made it a full screen image. And you're saying to yourself, Pete, we didn't we don't have the menu image and you're right. So let's go grab that. Let's come back up where we have all of our other image loaded loads coming in here. And let's just go right above that. And let's do menu image equals, and then we'll have game over image. I don't know why I'm making this so difficult to game over image like that equals, and then pause image equals. Okay, and so we're just going to kind of steal this one, because we don't know it's nice, we don't have to, we don't have to format these ones, I made them 900 by 800. So they're all ready for us. Okay. So this is going to be, we don't need I anymore either. This is going to be assets and then menus. And then for main menu, I called it main menu, just like that. And then we'll copy this guy. And we have main menu, we have game over, and we have pause, pause, no camps, just like that. All right, so we have our images now. So when we're drawing menu, we're going to draw the menu image onto the screen. And now let's take a look at what else we want to do when we draw menu, right? So kind of a lot of things need to happen here. Because on that menu screen, you have the option of doing four different things, you can choose a game mode to play. So free play, or, or ammo, which is accuracy or timed, which is giving you a certain amount of time to get as many points as you can, or you can reset your high scores. And so let's just sort of figure out what to do based on the position of the mouse. So we'll say mouse pause equals pi game dot mouse dot get position, which you guys are pros with by now. And then we'll say clicks equals pi game dot mouse dot get pressed again. And now we have a position of the mouse and we have the all the clicks that are on. And now we need to figure out like what hit boxes, if you will, essentially what collision boxes, each of those buttons should correlate to. And to just sort of show you so we have the free play button. We have the ammo button, ammo button equals we have the timed button. And then we also have the reset button, right? So we have these four buttons. And we want them to be invisible rectangles. Because if I open up again, the main menu image real quick, you'll see it already looks like there's buttons on the screen, it already looks like there's rectangles there. So what we want are rectangles that correlate with that space, but actually are invisible. But just so you understand like where I'm drawing the rectangle, I'll draw this first one. So pi game dot draw dot wrecked. And I'll actually draw this one on the screen. And I'll just make it neon green. So it's kind of easy to see. And so these are, we give them every rectangle an x and y start position and then a width and a height. And so for like free play, it just took a lot of guests and check to get these dialed in pretty tight. But it was 175 24 for starting x and y and then 260 wide and 100 high. And then just so it doesn't block the whole button, I'll make it a width of three. And then I will just comment these ones out so it doesn't gum it up. But I don't know if this is going to throw an error or not. Hopefully this will let you see Yeah, the menu. And you can hopefully see the wireframe green there that correlates to the free play button. So essentially, we're creating a rectangle that we're going to use for collision detection, when we click on that space. But we don't want the rectangle to be visible. So rather than pi game dot draw dot rect, it's pi game dot rect dot rect, where we just say no, we're not drawing it, we're defining it. And this is what we did earlier for the hit boxes. So rather than that list of four arguments, it's two tuples. So it's like this, it's a tuple, and then another tuple and no additional arguments. So this is a fully defined rectangle. That's the one for the free play button. Now we need one for the ammo button, the timed button and the reset button. And again, if you're using my images or my format from the GitHub, then your buttons will be these exact same dimensions. If you've created your own menu screens, then you just need to do some guests and check that method that we just did to figure out where your buttons need to be. Okay, so now let's go ahead and take a look at the ammo button. And the ammo button is going to be at the same y position, but it's further on the right. And so this is the one that says, oh, I want to play the accuracy version of the game. And now the timed button is going to be at the same x position as free play, but further down y. And then the reset button is further to the right and further down. So 475 661. And there we go. Now we have all four of our buttons defined with rectangles. And what we want to do kind of in those same spaces, everything except the reset button also has some text associated with it. If you think of the menu, I also show you on the main menu, what your best in each game mode was. So we want to do that and draw menu as well. So let's take a look at how to do that underneath each underneath each button, because it's kind of associated with them. Alright, so we're going to draw our best free play score using screen dot blit. And then just in here, it's easiest to put it on one line, you could absolutely font dot render on one line, and then screen dot blit on the next, that's kind of what we did with all the score stuff. But this is pretty simple. And so I'm going to show you how you can do it all on one line. And so here, since we already have the text on that main menu screen that says best time, then we're basically just going to say what the best time was. So we're going to display here what the best free play score was. Okay. And that's obviously a variable we haven't created yet. But we'll make that in just a second, I'm just going to show you how to put this on the screen all at one time. And so true. And then black, because black text on the color buttons that I created looks pretty good. And then that is it for the font dot render. But remember, we're inside a screen dot blit. So then we also give it an x and y coordinate of 340 and 580. And we just need to go and make this variable best free play. And while we're doing that, let's go ahead and make best ammo and best timed as well. Because those are obviously the three game modes. And we'll just make them all zero initially, right, because we haven't played yet. Best ammo, best timed. And we are going to take a look at how to actually store those in a text file, which I call high scores dot text, we're going to do that once we get the different modes working, we're going to work on reading and writing to text files all within the game. Okay. So this is screen dot blit, best free play. And then this will be best ammo. And then down here under timed, we're going to do best timed. Okay, now these all have different x and y coordinates. So this first one's 345 80. This next one further to the right is 650 580. And then this third one, I know you're probably like, Oh, it's going to be the same x coordinate as the first one. And 340 would get you pretty close, but it actually just looks better at 350. Because the text sticks out a little bit further. All right, so that should if I if I boot this up, it should just give us zeros. Yeah, and you can see that we've got our little high scores. Now, if you don't believe me that that's what they are, you can change them, and then see that value update. But so now we're drawing our high scores onto the menu, which is great. But we also need to figure out what to do if those buttons are clicked. Okay, so let's go ahead and look at that now. Let's start with the free play button. So free play button dot collide point, and then collide point with the mouse position, and clicks zero. And because you have the ability to change between change between screens super quickly, like if you're on pause, and you decide to restart, so it's going to take you back to the main menu. We don't want to click buttons on multiple menus without a lift of the button first. So we're going to create another variable in just a second called clicked to track whether or not you've already clicked on the on a button. And if you have clicked on a button, and then it takes you to another menu, we're not going to reset clicked until we see you've lifted the mouse key. So this is just a way to prevent unwanted double clicking. All right, well, and everything we want to do when you click free play is we want to say mode equals one, and then level equals one. And so that'll launch us into the game. And then we'll set menu equal to false. That's got to be a new level, a new line, mode level, menu equal to false. And then we want to basically say time past equals zero, because if you just finished the game, and you went back to the main menu, you want to reset all of your game variables. So total shots also equals zero. And then points also equals zero. So basically, you're starting a new game. Okay, and you can see these are all gray, because they're not yet global variables. So we're going to go ahead and call them all in our global's line. And again, I find this really easy. I don't know if it's slower or less by Sonic, I don't actually know. I do know some people don't like that I do this. So if you know a better way of doing it, feel free to do it. I know that you can pass these in as parameters and then return them. I don't know that that substantially makes a difference for this project. So okay, total shots, and then points just like that. And now we can actually write to all of those things. Alrighty, so that's going to handle what to do if we click on the free play button. And the other four buttons lucky for us are fairly similar. Okay. So let's just copy it twice. And let's take a look at what to do first for ammo, we're going to kind of handle the reset button on its own, because it's a little different. Okay, so then we will say if the ammo button is clicked, well, then mode is one level is one, menu is still going to be equal to false because we want to exit the menu. And then now we need to reset, we need to give ammo a value. So we need to come up to our globals and say ammo as well, so that we're able to write to that. And then ammo is equal to 81. And the reason I picked 81 is because that's how many targets I have total in my game, you can total these up if you don't believe me. But I basically wanted to say if you're playing the accuracy game mode, the best possible score you can get is hitting every single target. So you can spend forever making sure your mouse is lined up and chasing those targets down. And you can basically pursue perfection. So the ammo mode, it is possible to get a perfect score. If you manage to hit every single target with every single click, that is how I got 81. Alright, so total shots, time past and points will all still be zero. And now let's take a look at what to do in the timed mode. So we don't care here about mode will be equal to we don't care about ammo in here. But what we do care about is now time remaining, right? So time remaining. And we want to set equal to something where it's extremely difficult to clear the entire game. I played this quite a few times, and I found 30 seconds like almost impossible to hit. So I am going with 30 seconds. But if you find that to be too easy, feel free to do a smaller one. So time. Well, let's just make a second row for globals, because I don't want to spill over. I don't want to have something that I need to use scroll bars to view. So, all right, time remaining. And that's it for these buttons. Let's go ahead and create the variable clicked initially. So we'll say clicked equals false. And we'll take a look at how to track that once we are out of this little loop. Okay, so that's free play ammo and timed. Now, let's go ahead and say, well, what about the reset button? So if reset button dot collide point with the mouse position, then that means we've just said we want to get rid of all our high scores, it's not accurate, or that wasn't me, or that was my friend playing, or I just want to reset it, like I got perfect once. But, you know, I want to keep chasing that dragon. Well, we're going to set all of our bests back to zero. So best free plays equal to zero best ammo is equal to zero, and then best time is equal to zero. And then we actually are going to want to create another right values command, which is going to be true. So we're going to actually say, I want to reset my scores. So go and overwrite, go and overwrite whatever's in your text file. Okay. So now let's import the bests as well, because we're overwriting them in here. Best free play ammo and timed. And all righty, so that should do it. We also want to bring in right values, even though we haven't created it yet. We are about to. All right, so we'll say, initially, right values is false. And this should be really cool. We obviously aren't doing anything with that clicked variable yet, but we said equal to false. So we're going to boot up, we're going to be on the menu. And if I do free play, okay, it says right at the bottom free play. And the nice thing about free play is you have infinite ammo and infinite time. So your score will always be all the way up, like you'll always finish a free play round by shooting every target, every enemy. But the scoring in free play is based on how long it takes you. So basically, you're going to be getting progressively higher scores as you manage to do free play faster and faster. And then the other two, because it's very difficult to get all of the enemies, the other two scores are based on your time. So actually, your free play score will keep getting better as you get a faster and lower time. Okay, I can't get that one. That's okay. Let's boot that up and see if it does timed for us. So countdown. All right. And now it says time remaining and you can see the time is ticking. And if you don't believe me that 30 seconds is really hard, go ahead and try to beat it in 30 seconds. Maybe you're just an absolute computer whiz and you can't miss and you managed to beat the whole thing in 30 seconds. But I usually find myself about halfway through the UFO level. And if I try to get the purple UFOs on timed, it's like legitimately impossible. I just the only way I can even get close is if I just don't worry about the purples and I do like red, green and blues, then sometimes with 30 seconds, like I get all of them except purple. But I don't think I've beaten beating it in 30 yet. And you can see the time remaining is just counting negative because we haven't created game over conditions yet. All right. So let's go ahead and take a look at the clicked thing that I was talking about a little bit before. And then I will also explain as we get to the pause in game over menus, like why that's so important. But to handle the clicking the way I'm kind of thinking of it, we need a new if event dot type command, which is going to be if event dot type is equal to pi game dot mouse button up this time. So that means we've lifted the key and event get pretty bad at spelling us again to our two of the tutorials and event dot button is equal to one again. And clicked, right? So that means we've detected a click is true somewhere. Then we're just going to say, okay, well, you've lifted up on the key. So clicked is now equal to false. And we don't need to actually turn clicked to true inside of the menu. We just need to do that for pause in game over, which we'll talk about in just a second. But the reason for that is every button in the main menu is pretty harmless. It takes you into the game. So just to boot this up and illustrate what I mean, if you were to click any of these buttons, it's going to take you into the game, or this is just going to reset high scores. So you don't actually need to do it in the menu button, but we will just for good practice. If you if you saw there what happened is I booted this up, and then I clicked on reset high scores. So that's really so I clicked right here. But if I drag the mouse now to accuracy, it starts the game up with our like set number of shots that we have to play the game. And so that kind of sucks because we want like the click to only work on the button that we clicked. So there's one more thing we need to do in draw menu and I promise we're done with this behemoth. We need to also have the clicked value in here. And we need to say if any of these buttons get clicked, so here, then we also need to say, okay, well, clicked is equal to true. So this is basically saying you're not allowed to do anything else with the mouse button until you release it. So you can't just drag the button around. That's kind of how we handled the that's kind of how we handled the like not having a laser beam when you shoot enemies, right? So it's just as important here. And now let's take a look at game over and pause. So first, let's take a look at what to do. If you enter pause and to do that, it's really easy. It's just kind of an add on to the mouse tracking that we already did for mouse button down, right? So here, we've checked to see if the mouse position is in a certain spot. When we click and it's the left key, well, it's the same thing for pause and the reset buttons, right? So if you hit restart, when you're let me pull up a banner again. If you hit restart, we're going to let you go back to the menu and choose what mode you want to play. So we're going to say, first, let's take a look at pause. Yeah, pause is better first, because it's higher. So we'll say now 670 and less than 860. So again, I have kind of figured out where the start and stop of those buttons are. And I decided to just do it this way, rather than create additional like collision boxes. So essentially, the pause button is between 670 and 860 in the x direction and 660 and 715 in the y direction. And I got those by guessing check. So I'm trying to save you a little time. But you could create another rectangle just like we did with the menu buttons. And you could figure out where pause is then. But so if we enter pause, what I'm going to do is I'm going to store whatever level we're on in a variable called resume level, because when we enter all of the pause, the menu, the game over, when we do all of that stuff, remember that we set level equal to zero. But if you pause, and then you decide to resume, obviously, we want to put you back to whatever level you were at. And so to do that, we're going to store it in this variable we'll call resume level. And then we're going to set just this value pause equal to true. And since we're here, let's take a look at what to do with the restart button as well, we're basically just going to say now it's still 670 to 860, it's just right below it. So it's 715, all the way down to 760. Now for the restart, and all we're going to do if that's the case is we're going to set menu equal to true. And we don't need to track resume level because you're avoiding your, you're avoiding your right to, you're avoiding your right to, what was the word I'm trying to say, restart, you're not allowed to resume, you're saying you want to reboot the whole thing. Okay. And then in here, we'll say both of these will also set clicked equal to true so your mouse can't just go hog wild. All right. And so let's go ahead and take a look at how to draw pause now, right, because we say if pause, then we want to draw pause, it's quite a bit simpler than it's quite a bit simpler than draw menu, which you might expect because there's only two things you can really do in it. So first thing we'll do is screen dot blit and we'll blit the pause image this time, which is a different menu that we created. And we'll still put it at 00 because I nicely made all of the menus 900 by 800. And we're still going to want that mouse pause and we're still going to want that clicks, because we're still checking to see if buttons are collided. And now the button positions are the same as the bottom two buttons. So I'm going to grab our reset button and our timed button. I'm going to grab those. And I'm going to copy them, we're going to change them. And we don't need these screen dot blit texts anymore. But the one that's 170 to 661 on our pause menu is actually the button for resume. So if we look at that, the lower left button versus the main menu, the buttons are in exactly the same spot, which is super nice. We can use the same rectangles. But that means that this is not the timed button. This is the resume button, but the dimensions are the same. And then this is sort of the reset button, but it's actually the menu button, to be honest. And so let's take a look at what to do if the resume button is dot collide point with mouse pause, just like when we checked them in the menu, and clicks zero. So the left mouse is clicked and not clicked, which means we've lifted the mouse since the last time we selected something. Well, then we just want the level to be equal to resume level. So that temporary thing we stored in, and then we want to set pause equal to false. And it's really nice. That's all we have to do. So to be able to overwrite the level, we obviously need global level. And we obviously need global pause pause. I said that's so weird. Okay, now let's look at what to do if the menu button is clicked, because that's obviously a bit more complicated, because we're now saying, oh, we went to pause, we thought maybe we'd want to resume, but we actually decided we didn't, we just want to scrap this and choose a new game mode. And if that's the case, then we check if it's collided with the mouse, and it was the left click, not the scroll wheel, not the right click, and not clicked already. So this is what we intended to do with this click. Well, we're going to make sure that level stays zero. This is a little redundant because, because level should already be zero, but it's never a bad idea to cover your butt when you reset things. Alright, so pause is going to be false, we're going to set menu equal to true. And then we're going to go in here, and we're just going to say, all right, well, I'm wiping all of the game conditions that you have now. So total shots, points, time, past, and time remaining. And we're just going to reset all of these to, to their original states. And we're also going to set clicked equal to true, we're going to do that for both buttons. So when we enter a new menu, we can't mess with it. Okay. And so obviously, we need these as globals, we need menu, we need points, we need total shots, we need time past time remaining. I wonder if the reason people don't like this is just because it's kind of it looks silly, and it's time consuming, or if it's actually an efficiency issue. Okay, so basically, we're saying if we're on the pause menu, and we click the no go back to the main menu menu, then you're voiding your ability to resume however you're playing. But if you hit the resume button, going to go right back into the game, like nothing happened. So let's actually test this functionality out. I think that should be everything we need to get it working. So let's play free play real quick, shoot like four birds. And you'll see time elapsed is for when I hit pause. I'm going to give it like a few seconds. So it should definitely be increasing from four if our counter wasn't paused. And you see it still says time elapsed as well, five as soon as I load it back in. But our counter resumed and then my shots started going back up based on just just shooting more targets. And my points stayed the same. But now if I hit pause, and I go to main menu, and then I go back to free play. Oh, that's interesting. So let's figure out what we did wrong, what I did wrong. I'm not blaming you guys for anything. You guys are great. Okay, I think I see what's going on. It's funny that I didn't catch it. But basically, when it wasn't that it was retaining level two as a score, it was keeping level one, but we never re initialize the coordinates for the game. So when we had the all of our initial coordinates that we kind of define outside of the main game loop, right down here, we never re initialize these coordinates anywhere. So basically, it was loading in at level zero, but we never redefined the coordinates. So it's on empty list. And then it moved on it figured like, Okay, well, you know, then level one is done. So I'm going to level two. And so what we need to do for that is we just basically need to initialize the coordinates. Anytime we start a new version of the game. Okay, and I think the easiest way to do this is to say basically, if level equals one, if level equals one, and not a variable we'll call new chords, then we want to initialize all of the coordinates just like that. And so we'll make this variable new chords, do, do, do, do new. Coords equals and we'll say equal to false right when the game boots up. And then we will, we can get rid of these now, I guess we should be able to. And then we'll say, if where did I put that if level is equal to one and not new chords, then we want to initialize these coordinates. But then we also at the end want to set new chords equal to false or true. What I say it was in the beginning. Yeah, and not it's true. Okay. And so this is kind of an easy way to get. Yeah, yeah. Now, what we'll do is we'll say when we're in draw menu. If any of these buttons new chords, if any of these buttons get pressed these free play ammo or timed, then we'll say new chords equals false. So this means we need a new coordinates, maybe that was backwards, maybe I should have said if new chords are being called for but this should do the trick. So now any time we're in that menu, and we choose a game mode, one chords is not defined. Dang it. Maybe the issue is just that these should be initialized in the very beginning. Free play. Well, that's shirt certainly didn't give me new coordinates. It sent me right to level three. Okay, I'm thinking let's try to make new chords. When new chords is true, we want to reinitialize these values. So we'll say draw menu, drop pause do do down here. And if level is one, and we're calling for new chords, then we're going to go through do this whole list, we aren't going to yeah, we want it like that. And then in our draw menu, if any of these buttons get pressed, we want to set new coordinates equal to true. So it's time for you to go through and get a new set of coordinates. Not that one. That one. Yeah. Alright, alright, so I think this code would be working pretty sweet. If I didn't have this if level equals one in here, and we really don't need the if level equals one, I think the issue is when you click on a button in menu, you're inside this line of code. And so then you click on it. And then we come right down here to where it's checking the levels. And it sees that there's no enemies in the list. So it goes straight to three. And that looks like it's over. So what we want to do is say anytime it says we need new coordinates immediately give me new coordinates. That should work pretty well. So let's go ahead bam, bam, bam, bam, bam, pause, pause. And let's resume. And we still have the same birds. And let's see if I can get to the second level. Okay, and now I'm on the second level, I'll shoot a few blue plates. Let's pause it. Now, let's go to the main menu. Let's hit free play again. Okay, well, this is progress because it gives us all the blue plates back, there's no shot plates, but it keeps us on level two, which is very interesting. Okay, there's been a lot of troubleshooting here. And I promise I'm going to edit out the parts where I just quietly am sitting and thinking to myself. But I think the last thing we need to do is just when we enter the menu, we need to set new chords equal to true right there, rather than waiting. So basically, I think we are writing new coordinates too late. So let's try setting new chords equal to true. Every time we go to the main menu, right? So that would be here as well. And so this should essentially give us a full new list. And then that's good, because every time we go to bam, bam, and then bam, yeah, okay, so this is going to set level equal to one when we enter. And because the menu is down here, before the new chords, that's just means that we need the new coordinates to be generated before we actually click the button on the menu. So the menu button is going to be too late for us to do anything about it. So now in free play, if I can go ahead and clear this first level. All right, now I'm in level two, I swear if I restart, and I do free play again, it'll send us back to one. Okay, now if I get to two, and I do pause and then main menu, it should also send us back to level one. Pause, main menu, free play level one. Okay, so I apologize for the troubleshooting, I will hopefully edit out the most painful parts. But I think it's useful to see that even when it's a project where you have a plan and you have a preparation plan, you can be a little confused by what's going on. And it just didn't make sense to me. But now I see what was happening is we were saying level equal to one, and calling new chords at the same time. But we create the new coordinates at the very top of every loop. And so we saw the button was clicked around here. And then we came down here and saw that the target boxes were completely empty. And so then we moved the level up one, and then the next loop happened. And that's why it was automatically kicking us to level two. I hope that made sense. I apologize for the delay. But let's keep going now. So we've got a pretty cool system for pause. The menus are working pretty well. So I think it's time that we check out game over conditions. And I'm sure this will go just as smoothly as everything else so far. But essentially, game over conditions are just going to be underneath this if level is greater than zero, because there's no point checking if game over under any other circumstances. And now there's kind of three ways to have a game over. So if game if level is equal to three, and the target boxes is equal to these three, four empty boxes, right? So if this happens, then it's game over. But there's other ways it could happen to or mode equals one, right, which is the accuracy. And ammo is equal to zero, right? So that means we've run out of bullets, because then the game's over as well. Or mode is equal to two, and time remaining has gone down to zero. Okay, so let me enter so that we're on a new wrong time zero. And let's put a new line character in there so that we're able to do it this way. Okay, so these are the three different things that could actually cause game over, we've actually cleared the entire board that could happen in any game mode, but especially free play. Or we've run out of ammo in the accuracy mode, or we have run out of time in the timed mode. And now, okay, so what do we do when one of these three game over conditions happens? Well, we want to set new chords equal to true. So right off the bat, we're saying we're going to enter game over. And so the menu is going to basically pop up first, it'll say game over and give you the option to play again, or just exit the program. But in either case, we want to get cooking on those new chords in the background. And then let's take a look at what to actually do because obviously, the variable game over is going to be equal to true, that'll be something that we use for our draw game over. And then we're going to set level equal to zero, but we don't actually need this here, because that's already in the draw game over conditions. So what we want to do is we want to track what was the actual score there that we were tracking, and put that into our kind of like our logic for was this a high enough score that we should overwrite our best score. Alright, so now let's go ahead and just take a look at how to do that. So we'll say if mode was equal to zero, that means we were doing free play. And that will mean if our time past is less than our best free play score ever, or our best free play was equal to zero, because the only way best free play score is zero is if you haven't beaten the game before. So in any case, this is your best score. And then we're going to set our best free play equal to time past. And that variable write values is going to be equal to true, because we're going to say we not only want to overwrite it in our local Python program, but we want to overwrite it in the text file as well. Alright, so then the next check is not if mode is zero, it's going to be if mode is one. Alright, and so if mode is one, then what we want to do is say if points is greater than our best ammo score, then best ammo is going to be equal to points. And then we also want to write values. And so this is we we only want to update one best score at a time, right, you can't beat your best free play score and your best time score at the same time. So this is kind of how we're going to do that we handle it situation by situation. So then for mode two, which is timed, if points again is better than your best time score, then your best time score gets set equal to however many points you got, and then we're still going to write values equals true. I missed an equals true here, you guys caught it though, good job. Alright, and then game over equals true. And that should take care of it. So let me reformat this file a little bit reformat the file there we go. And then that'll set game over equal to true. And then we'll handle everything to do for the game over stuff kind of inside the draw game over just like we have with pause and menu. And I know that was a little chaotic, but that's just how I roll. So let's go ahead and keep draw pause open because draw game over will have a few similarities. Alright, so first thing we'll do is we'll say if mode is equal to zero, then the display score because we want to tell them what their score is will be equal to however much time was passed, right? Because if the game is over, and the mode was zero, that means you were playing free play. So your score is however much time was passed. And then we will say else, meaning it was mode one or two, then the display score is equal to however many points you scored. Alright, so those are basically the two scenarios. And so screen dot blit. First thing we want to put on the screen is game over image, obviously, just like the pause and menus. And again, it's the right size. So we just put it at zero zero, we don't need to scale it. And we're going to get the mouse position and clicks, which I will just steal from pause because I'm a sneaky thief. And then, okay, now mouse pause and clicks. And then we are going to define the exit button and the menu button. And we are going to steal, you guessed it, the resume button and the menu button. Okay, so the resume button is going to be the new exit button. But the position is already correct, because I made both of my menus that have two buttons in the same spot. And menu is in the right spot as well. So now what we want to do is screen dot blit our display score onto the screen. But instead of font dot render, so right, we have the one font defined up top, I actually want to make a new bigger font. Here it is. I want to make a bigger font, because this is kind of the only place where your score is displayed right after you like win. And so it's kind of nice to see that in a little more clarity. So we'll define another font that I'll call big font pie game dot font dot font, and then assets forward slash font forward slash my font. So it's going to be the same font file. But I want this to be much larger. So I'll make it 60 instead of 32. And now we'll come back down into draw game over screen dot blit and then display score is what we are going to blit onto the screen, but we haven't rendered it yet. So it's screen dot blit, and then font dot render. And again, it's not font dot render, this one is going to be big font dot render. So big font dot render, I like to be descriptive in my names. And then this one, we will just make it another F string. And this will be the display score. So whatever it is, whether it's points, if you played mode one or two, or if it's just time past, if you played free play, we'll display that there. And then true, and then we'll make it black. And then the position to put this in is 650, 570. That's just a good, that's a good spot to put this text 650, 570. Okie dokie. And now we just need to check what to do if these buttons are clicked, right? So if menu button dot collide point with the mouse pause, and you should be familiar with all these conditions by now. And it was the left click. And we have not already clicked something. First we'll set clicked equal to true. So it doesn't automatically take us to the main menu. And then, and then immediately click whatever button is underneath that spot. So we need global clicked. And we're going to have a few globals again, buckle up. Alright, but level is going to stay equal to zero. It should have been already, but it does not hurt to be cautious. And then pause is going to be equal to false. And then game over is going to be equal to false. And this is just a way of checking that we're essentially getting a reset out of this when we go to the menu. So menu equals true. So we're going to get global clicked, level, pause, game over, menu. And let's see what else menu. And then we want points to be equal to zero, total shots to be equal to zero, time past equal to zero, time remaining equal to zero, right? So let's go ahead and say menus coming in, points is coming in, total shots is coming in, time past time remaining, you're like Pete, this is so similar to clicking the menu button from pause, why didn't you click that? Why don't you copy that? I don't know, it's a good point, that would have been way better. Okay, and now let's say if exit button, this one's actually the easiest, this one's the easiest by far. So if exit button dot collide point with the mouse position, and it was the left click, and I haven't already clicked, we don't even need to do anything else complicated, we're just going to call the run right here, and we're going to set it equal to false. Okay, so we're just basically saying if I hit exit, when I'm on game over, that means I'm done done, and I'm just want to close the application. So that's a quick and easy way to do that. And now game over should work. That's a big should Pete, but I'm going to stake my reputation on it. My reputation is not worth anything anyways. So actually to make this game over testing a little bit easier, I'm going to start us on level three, just because so that way I can test game over without having to make you guys watch me play three levels. So let's go for it. All right, it gets immediately overwritten. Should have been. Okay, so we get the amount of time that elapsed, which for free play seems pretty good. Now if we go to main menu, you can actually see the free play best score now says 37, which is great. If I hit reset high scores, you'll see it goes to zero, which is also good. That's what we want. And if I played through the accuracy modes, let's see if I can just quickly burn through all my shots. So I'll probably hopefully crop some of me clicking out, but it's not that it's not taking that long. But you can see I've got I've used up all my bullets. Okay, scores 200 accuracy score took countdown. I'm not going to make you guys wait 30 seconds, but we verified that the pause works, the free play works, the reset high scores works. So the next thing we want to do is we want to take a look at actually storing those values in an external text file. So that when we close this out, but we come back and we play it the next day, or we play it in a month or a year, our high scores will all be stored. And reading and writing from a text file is actually super simple. So let's go ahead and take a look at how to do that now. First thing you want to do is you want to make sure inside of your game structure, you have a text file, I called mine high scores dot txt in the same location as your main dot pi file. And you can see mine actually has my best scores from when I was playing around this before. Okay, and so it goes free play ammo timed and it's just each row is a different is a different game mode high score. Okay, so for I in range one through four right underneath this spot where we loaded in all of the images, we're going to do a couple lines of really simple code. It's just file equals open. And then the file you want to read from and for us, it's high scores dot txt. I'm not sure why I've got crap jumping all over my screen, maybe because I typed it in wrong. Alright, but you just say what file you want to open and then an r or a w for read or write. And now when we first boot the game up, we want to read because we want to get the previous high scores from there. So we do read underscore file, which is where we're going to store what we actually read out of it in file dot read lines, just like that. And then it's going to give us a list essentially of strings separated by like new line characters. So then we just do file dot close, file dot closes to protect the data. Basically, you don't want an open file the whole time your program is running. And now what we're going to do is we're going to say best free play is equal to the integer equivalent of what's in read file zero. So line zero of the thing that we just read. And then we're going to say best ammo is the next one. And then best, what is this best timed is the next ones. And so that's lines one to zero one and two. And that's all we need to do to read the high scores in when we initially boot this thing up. And only slightly more complicated than that is what to do when we want to write a new high score. So if you remember, we've been using write values all over the place when it's time to write a new high score, that's this variable write values equals true. Let's just come down at the very bottom here and say if write values, that means that for some reason, we have a new time that we want to a new score that we want to write. It's the same file dot open command. And you want to point it to the same, the same file. But now instead of an r, it's a w for write. Okay. And then we do file dot write this time. And now this is important, you're overwriting the stuff in there. So you want to give it everything every time. So even if it's only best free play, or best ammo or best time that got updated, we need to give it all three of these every time. So we do a format string, we start with best free play, and then we use the backslash and new line character. And then we do best ammo. And then we say new line. And then new line. And then we give it best timed. And that order is important, because that's the order it'll be getting read back in. And all right. And then we do file indentations wrong file dot close just like this. And then we want to set right values equal to false. So we only do that once we're not just constantly overwriting it while it runs. Okay, so now you'll see I have 39 1630 and 1570 in my high scores dot txt file. If I boot this up, we should yeah, we get 39 1630 and 1570, which is great. Now the test of if our right is working is if I hit reset high scores, these all go to zero. But if I close this bad boy, and now I open high scores dot txt, you'll see I get 000. Now the next time that I boot this up, I get all zeros. And what's really cool is as you play through this and you beat each game mode, it's going to store that high score for you in that location. Okay, so I think the time has come to add sound and I always do this at the very end because sound is super fun. But it does make the tutorial a little bit harder because I'm competing with sounds from the computer. As I install as I we put sound in, then I have to like talk over it. So let's go ahead and in start the tool that we need to make sounds work in our pi game game. And we'll do pi game dot mixer dot in it. And just like that, that's all we have to give it. And then pi game dot mixer dot music dot load just like that. And then we do assets forward slash sounds. And then the song that I got for this one was just a royalty free song from YouTube. And I stored it in assets in sounds and then called it BG music. Okay, so that's where we have the sound stored. And now let's say the three different targets when you shoot them, they all make different sounds, which is kind of fun. So plate sound is going to be equal to pi game dot mixer dot capital s sound. And then in here, we just point it in the right direction. So assets, sounds, and then forward slash and this one's broken plates dot WAV. And then we have to do something extra or it'll be really loud is plate underscore sound dot set volume. And I'm just going to give it a 20% or point two command to set the plate. So that's kind of relative to your computer volume and your music volume, but you don't want these like plates and these birds and these flying saucers to be super duper loud. Well, you can play around this as much as you want, but I didn't want it to be super loud. So I got the sound I used for the bird because I didn't want you to like I didn't want to sound like you're shooting actual birds. I got one called drill gear, which you'll hear it still sounds pretty good. And then laser sound is actually pretty sweet. And all the sounds came from YouTube's royalty free library. So we're not infringing on everything, anything. And the laser is actually a little bit quieter. So point three works better than point two for that one. And it's called laser gun wave. Okay. And so then what we'll do is we'll say pie game dot mixer dot music dot play. And we'll just start the music right here. And then what we'll do as well, I think is in draw menu, we'll say when you click. No, let's say when you enter the menu from anywhere. So there's three places you could enter the menu, right? You could enter it from the main screen when you press reset. So here, when you hit the reset button, you go into the menu, we'll start the music then. And then if game over is true. So in here, do do do, regardless of what mode you're in, you're going to the main menu. So we'll say music is true. And then if in draw pause, you click the menu button, then we'll do that as well. Okay, so that's it. Now the music will restart anytime you enter the menu, which is cool. And now we're going to go into a check shot, which is where we check to see if the target has been shot. And now we're going to check and see what the level is to determine what player sound we should make. So if level is one, then we want the bird sound to play bird sound dot play. And then we'll say L if level is equal to two, then we want the plate sound to play dot play. And then L if level equals three, or you could just do else. Then we want laser sound to play. Okay, so ideally if we got everything right. And I know I keep saying that and it is kind of tricky. When we boot this up now, we'll be on the menu screen. And let me set beginner level back to zero, even though I think the game does that for us. Yeah, so menu should be true. And this music should play. And I think it's really sweet music. But obviously, I am competing with background sound now. So let's just play a little. All right, so maybe those sound effects are a little bit too quiet compared with how loud the music is. So your options are you could either set the music volume down a little bit, or you could bring those sound effects sounds back up a little bit. All right. So only thing I'd say that you probably are going to want to do is point 2.2 and point three was a little bit quiet. So maybe play around the balancing for a little bit, make them a little bit louder. But holy cow, guys, that was a huge project. We have three totally awesome levels, you could easily expand that and add levels to it if you wanted to. We have sound effects, we have music, we have scoring, we have menus that are interactive, and you can pause the game and resume the game. We have all this different functionality. This is a really complete game. And you guys should be super stoked that we just finished the whole project. It was obviously a ton of code. I apologize for the sections. We got a little bogged down in troubleshooting, but that's real programming. So if you have any questions or you want to make any modifications to the GitHub and create your own version, I'd be super stoked to see those. If you found this useful, if you found this fun, and you want to see tons more great content, consider checking out the channel, subscribe to the channel, leave a like on the video. It helps me a ton. I hope you guys really, really liked the game. As always, let me know in the comments if there's any questions at all. As always, good luck with your code, and thanks for watching. Thanks. Bye.
