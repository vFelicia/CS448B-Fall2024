With timestamps:

00:00 - hey what's up guys welcome to my flutter
00:02 - essential course and in this particular
00:04 - course we are gonna talk about the
00:06 - essential parts of flutter when you are
00:08 - starting your journey with flutter so if
00:10 - you are learning flutter so this is the
00:12 - first course which i would recommend you
00:14 - to take because there will be all the
00:17 - essential things which you need when you
00:19 - deal with flutter especially if you are
00:22 - someone who has never
00:24 - worked with flirter yet so this is
00:26 - definitely a good to go course for you
00:29 - and as you know that uh the all the
00:31 - courses which are available on empty
00:34 - viral school they are very uh short and
00:37 - concise courses which means you will get
00:39 - the value out of it without wasting your
00:42 - time so that's the idea so guys before
00:45 - we start the flutter development then uh
00:49 - first of all we need to install flutter
00:51 - so we will go to this flutter.dev
00:54 - website as you can see flutter.dev and
00:57 - once you go there so this will be
00:59 - something like this you will click on
01:01 - the get started button which is on
01:03 - right top so i'll click here
01:06 - and as soon as i click here you can you
01:09 - will see these kind of options like
01:11 - windows mac os or linux you can select
01:13 - any of them depending on what operating
01:16 - system you are using so i am using mac
01:18 - os then i can
01:20 - just go here and i can install the
01:22 - flutter version and guys one more thing
01:24 - is that uh right now what you will find
01:27 - here is this stable version which is
01:30 - 1.12.13 hotfix 7 so um this is something
01:34 - which you can use although i am on the
01:36 - developer channel uh so there are
01:39 - developed channels master channel
01:42 - and um
01:43 - beta channel stable channel so there are
01:46 - a lot of channels so every channel has a
01:48 - purpose like master channel is the
01:50 - latest one where
01:52 - you can also see a lot of bugs because
01:54 - it's the latest one then comes the
01:57 - develop um channel which is for
02:00 - developers and it has slightly less bug
02:03 - than on the master channel then comes
02:06 - beta which is again better version and
02:08 - then stable which is supposed to be bug
02:11 - free so this is the situation and here
02:14 - you will follow this guide i'm not gonna
02:16 - show you how to install everything from
02:18 - scratch because that will be a lot of
02:20 - time but you are open to comment if you
02:23 - see any kind of issues and will
02:25 - definitely fix it out and then for
02:27 - windows also you need to make sure that
02:30 - everything is like how it has been
02:33 - explained here you can download either
02:34 - the zip or you can maybe use git to
02:37 - clone this particular repository and one
02:40 - problem which happens with windows user
02:42 - a lot is that they forget to
02:46 - apply this environment variable and then
02:49 - they see that their flutter command is
02:51 - not working so please make sure that you
02:53 - follow the guide entirely and then you
02:56 - can do something like you can go to your
02:58 - terminal and you can try to run flutter
03:01 - command and you will see these options
03:03 - if you are not seeing them that means
03:05 - the flutter is not working properly so
03:08 - once you install it whether you are
03:10 - using windows mac os ubuntu linux or
03:12 - whatever you can definitely
03:15 - go ahead and then you can go to your
03:17 - console
03:18 - and then what you have to write is
03:21 - rather than just flutter if you are sure
03:24 - that you have installed flutter properly
03:26 - then you can run flutter doctor
03:30 - so what flutter doctor will do for you
03:32 - so flutter doctor is basically kind of a
03:35 - doctor which which you normally
03:37 - understand right so it will see all the
03:39 - things like everything is proper or not
03:42 - and what you are missing or what you are
03:44 - not missing so as you can see my android
03:46 - tool chain is ready xcode is ready
03:49 - chrome android studio i have two
03:52 - versions so that's why two android
03:53 - studios intellij idea vs code and i have
03:56 - some connected devices as well and you
03:58 - can see i am on channel dev with version
04:01 - 1.15.2
04:03 - but because i am doing a lot of
04:05 - experiments as well so that's why i'm
04:07 - using this channel you can use it but
04:08 - then there can be some bugs so i'll
04:10 - suggest you to be unstable only and guys
04:14 - one more thing is that if you want to
04:16 - develop for android i would recommend
04:18 - you to download android studio as well
04:20 - so that it will come with all the
04:23 - necessary things so that there should be
04:26 - some um the android sdk manager there
04:29 - should be the emulator and all that
04:30 - stuff so that you don't feel that kind
04:33 - of problem when you are dealing with
04:35 - android app development and if you want
04:38 - to develop for ios then you need a mac
04:40 - os and
04:42 - then you also need x code for that so
04:46 - that is something which is important and
04:48 - uh for me i'm using vs code but then
04:52 - also if you are gonna use vs code then
04:54 - also i'll just say that install android
04:57 - studio
04:58 - because there is no harm installing that
05:00 - because sometimes it it can be useful so
05:04 - we will definitely talk about that in
05:06 - future as well so now i am done with
05:08 - this part in vs code if you are using vs
05:11 - code if you are not using vs code then
05:13 - also i will suggest you to use vs code
05:15 - so that you can get
05:18 - better
05:19 - maybe build time results and also better
05:22 - development experience
05:24 - so
05:25 - once you are on vs code you have to go
05:27 - to extensions and you have to write
05:30 - flutter extension
05:31 - and you have to install flutter
05:33 - extension from here and then you can
05:35 - also install the dart extension either
05:38 - of them will work but
05:40 - it doesn't matter if you install both of
05:42 - them then if you want snippets then
05:44 - there is uh
05:46 - rash mdr snippets which you can
05:48 - definitely use and this can be pretty
05:51 - handy although you don't necessarily
05:53 - need it and there are some couple of
05:56 - other extensions like pre-tier and
05:59 - git lens all those things which you can
06:01 - use definitely you can check my
06:04 - vs code video which i'll show you uh
06:07 - which will be there in the notes and uh
06:10 - definitely you can see what extension
06:12 - you can use there
06:14 - now coming to the vs code we will press
06:17 - command shift p and if you are on
06:20 - some other platform let's say windows
06:22 - then you can replace command with
06:24 - control so ctrl shift p
06:27 - and first of all i'm gonna change the
06:29 - toggle mode and then i'm gonna write
06:32 - flutter
06:33 - new project as you can see we have a new
06:35 - project here
06:37 - and we can click here and then we have
06:39 - to give the project name okay so i'm
06:42 - gonna give it
06:44 - awesome
06:47 - underscore app
06:48 - okay and i'm gonna click enter i have to
06:51 - uh select my folder and then this will
06:55 - create my project okay so uh it will
06:58 - take some time to create the project for
07:00 - me and as you can see by default what we
07:02 - will get
07:04 - ios language is swift and android
07:06 - language is android x uh sorry kotlin so
07:09 - and it is supporting android x so that's
07:12 - that's what we get and then uh we are
07:14 - also gonna see uh
07:17 - how this structure is working what what
07:19 - it all means and uh i'm gonna just run
07:22 - this
07:23 - quickly so that you can see
07:26 - what's actually happening with this uh
07:28 - default application which you get
07:31 - and in the meantime what i'm gonna do
07:34 - i'm gonna
07:35 - um
07:36 - i'm gonna show you something
07:39 - so i'm gonna show you this by the time
07:42 - it's running so as you can see i am on
07:44 - my ipad and this is how the structure
07:47 - looks like right as you can see here and
07:50 - uh i'm gonna just explain what this
07:53 - means so the first two is that
07:55 - dot dot tool and dot idea you can ignore
07:58 - these twos
07:59 - and i'm just gonna point them out with
08:01 - black these we don't
08:03 - need actually or we can just ignore it
08:06 - then there is this android folder which
08:09 - contains all the android code which
08:12 - native android developers usually write
08:15 - and if you are
08:16 - like somehow related to android app
08:19 - development or if you know anything
08:20 - about that then you can definitely check
08:22 - it out then there is ios folder which
08:24 - contains all ios related stuff and ios
08:27 - developers can understand that properly
08:30 - and then there is lib folder where we
08:32 - are gonna write all the dart code
08:35 - and then there is mac os for desktop
08:37 - support which we are gonna not use
08:40 - and then there is test which is for
08:42 - testing which we will definitely use in
08:45 - one of our courses and then there is web
08:48 - which contains index html and all that
08:50 - stuff which we again gonna see
08:53 - and uh then what we are going to do
08:56 - we are going to go back here
08:59 - um
08:59 - with this one second guys
09:02 - so we can see this is what we get one
09:05 - two three four five six seven eight this
09:07 - is the counter application which we get
09:09 - by default and then guys one thing also
09:12 - i would like you to install is git
09:15 - so if we go to google and we will write
09:18 - git then the first link which you will
09:20 - get you have to download this so this is
09:22 - a version control system which will help
09:25 - you in keeping your code up to date as
09:28 - well as you can check what you have done
09:30 - in history you can create multiple
09:33 - branches on all that stuff and as i told
09:35 - you this is just not about flutter there
09:37 - are many other things which we will
09:39 - learn during this particular course and
09:41 - other courses as well so these are the
09:43 - things which are actually very useful
09:45 - for developers when doing real-world
09:47 - development so definitely i would
09:49 - suggest you to download this and then we
09:52 - will set up git in next video as well
09:54 - and then we will see this home page
09:57 - properly in the next video
10:06 - so guys this is what we have got this is
10:08 - the counter application which we have
10:10 - got so now again talking about these
10:12 - folders let me just show you what we are
10:14 - getting here so android as i told you
10:17 - there will be all the android related
10:19 - code which you might be familiar or not
10:21 - and similarly for ios and then in the
10:24 - live we will keep all our dart files so
10:27 - basically this is where we are gonna
10:28 - work then mac os is again the same thing
10:31 - like ios and the test which will have
10:35 - all the testing files and for web as you
10:38 - can see there is index.html and all
10:40 - those files and another important file
10:42 - for us is pubspec.eml
10:45 - where we will keep all the dependencies
10:47 - so whatever third party library or
10:50 - plugin we want to use we are going to
10:52 - use it here
10:53 - okay now moving ahead this is something
10:56 - which we have and now what i'm gonna do
10:58 - i'm gonna open my terminal by pressing
11:01 - command j
11:02 - so i'm gonna just say toggle screencast
11:06 - mode
11:08 - and then if you will press command j or
11:11 - you can press
11:12 - ctrl j in windows and for specifically
11:15 - terminal you can press ctrl and tilt so
11:18 - that it will open the terminal and here
11:21 - you can write git
11:23 - and init so basically the purpose of
11:26 - this is creating a local git repository
11:29 - which will track all of your changes so
11:32 - as you will see here this is my um
11:35 - version control symbol if i'll click
11:37 - here then you can see these are all the
11:39 - changes which are needed to be committed
11:42 - so i will commit these changes by
11:44 - writing here a message initial commit
11:47 - which means i am saving it technically
11:50 - to my local repository and then i can
11:53 - push it to my online repository if i
11:55 - want so this is something which is very
11:57 - important because um maybe if you want
12:01 - to go back and see what you have done or
12:03 - maybe you want to
12:04 - uh keep track of your code then this is
12:07 - actually very important now as you can
12:09 - see we are here on the master branch i'm
12:12 - gonna change the branch and i'm gonna
12:15 - name it dev hashtag ch1 which is chapter
12:18 - one this will help us in keeping the
12:21 - track of all the chapters which we are
12:23 - gonna cover and in each chapter there
12:25 - will be some specific detail like there
12:28 - will be for one chapter for networking
12:31 - one chapter four share preferences and
12:34 - one for layout design and all that stuff
12:36 - okay now concentrating on this
12:39 - particular part as you can see
12:42 - we have
12:43 - this default application which is not
12:45 - very friendly at least to understand
12:48 - what actually is happening so i'm gonna
12:50 - delete all this code and what i'm gonna
12:53 - do i'm gonna write void main which you
12:55 - might be familiar with already right
12:59 - so void main is from where everything
13:02 - starts is like similar to what you might
13:04 - have done in your any other
13:06 - object-oriented programming language and
13:09 - we can see we got some error then there
13:11 - is this one method here in flutter which
13:14 - we call run app it acts
13:17 - accepts and particular application so if
13:20 - you see here it takes a widget so right
13:24 - now it cannot understand it so basically
13:26 - it takes three kinds of
13:29 - application which you can give let's say
13:31 - first one will be widgets app
13:34 - second can be um you can say
13:38 - material app okay so we can say material
13:41 - app
13:43 - and third can be q pertino app okay
13:46 - so the difference between them is i'm
13:48 - gonna just show you so if what i do
13:51 - i can import from here
13:54 - widgets dot dart so this will give us
13:56 - widgets app
13:58 - um so i can also show you so this run
14:01 - app if you will see here that it takes
14:04 - an app which is again a widget so
14:07 - everything in flutter is a widget and a
14:09 - widget is a component and for example
14:12 - this is the phone you can see everything
14:15 - here like this sunday fab nine is also a
14:18 - widget these buttons is are also the
14:21 - widget especially this google search bar
14:24 - is a kind of a widget and these all
14:26 - icons in a row is a widget itself so
14:29 - everything is a widget in flutter so if
14:31 - we go back to our application here we
14:33 - can write
14:35 - widgets app so widgets app will work the
14:38 - only problem with widgets app is that
14:40 - it's a little bit low level which means
14:42 - that it will not provide you in build
14:45 - design support by itself so for that you
14:47 - can use something like a material
14:51 - package so we can use
14:53 - material flutter slash material dot dot
14:55 - and rather than this widgets app we can
14:58 - use
14:59 - material app
15:00 - okay
15:01 - and let's say if you are fan of
15:03 - human interface design which is in
15:06 - um ios or mac os so what we can do we
15:10 - can also import
15:13 - um
15:14 - this is cupertino dot art
15:17 - and rather than material app we can
15:19 - write cupertino app
15:22 - cupertino app
15:24 - and this is something which you might
15:27 - have seen in whatsapp that its android
15:30 - application is little diff or different
15:32 - than its ios application which i don't
15:35 - know if you have seen it but yes that's
15:36 - that's what people do sometimes as a
15:38 - brand then they show different kind of
15:41 - ui depending on the operating system so
15:43 - that's also you can do but for the
15:46 - simplicity and for um a universal design
15:49 - we are gonna use material dot dot at
15:51 - least for now and then in future we will
15:54 - also discuss the cupertino design so i'm
15:56 - gonna use here material app
16:00 - and then i'm gonna use something like
16:03 - uh you can say here we have few
16:06 - properties like home so i'm gonna give
16:08 - it a home widget which is let's say a
16:11 - container itself
16:13 - so a container with a color
16:16 - um so color so what is what this
16:18 - material is giving is giving us is like
16:21 - um there are a lot of widget which it
16:23 - gives and then it gives us a colors
16:26 - library which we can use to import any
16:30 - of this color here so i can say like
16:33 - let's say
16:34 - i want to use a purple color so i can
16:36 - just search here and a lot of colors so
16:39 - i can write
16:40 - um
16:41 - purple
16:44 - purple so as you can see now nothing is
16:47 - reflected here because we have two
16:50 - buttons here which are very important
16:52 - one is this the
16:54 - flash button which is hot reload and
16:56 - then this green button which is hot
16:58 - restart so whenever you do some changes
17:01 - in material app and if that is a part of
17:03 - run app then you have to do a hot
17:06 - restart and then we can see the changes
17:08 - that everything is purple now right
17:11 - and then what i'm gonna do here i'm
17:14 - gonna give it a child as well so child
17:17 - let's say and the child can be
17:20 - um
17:22 - a text widget okay
17:25 - so a text
17:26 - and then
17:27 - i can show some say something like hi
17:30 - flutter
17:33 - um
17:34 - and you will see here
17:35 - that there should be some flutter but it
17:37 - is it's like somewhere invisible or we
17:40 - are not able to see it anywhere and
17:43 - that's the problem with this so we need
17:46 - to
17:47 - say what color it is
17:49 - and we need to specify it more so right
17:52 - now it will it will not reflect because
17:54 - we haven't done hot restart as well so
17:57 - that also we need to do so once i will
17:59 - do hot restart then you will see high
18:02 - flutter on the screen the problem is
18:04 - that it is not looking very great and
18:07 - you might have heard me saying that
18:09 - material uh package if we will use then
18:12 - it will give us better design but it's
18:14 - not looking good so what we can do we
18:16 - can create a new widget from here which
18:19 - is a stateless widget so if you will
18:21 - write stl then it will give you a
18:23 - shortcut to write this widget let's say
18:26 - home page
18:28 - okay and
18:30 - we are gonna copy this container code
18:32 - from here and we will paste it here and
18:35 - everywhere you need to see that it will
18:38 - either extend stateless widget or
18:41 - stateful widget i'll show you the
18:43 - difference what is the difference
18:44 - between them then it will also override
18:47 - a build method so this extends means
18:49 - that it is inherited something so it's
18:52 - like parent and child relationship so
18:55 - you are as a child must have inherited
18:58 - few things from your parents so that is
19:00 - like this home page is also inheriting
19:02 - this build method from its parent
19:06 - and then some other things as well and
19:08 - overriding it means that whatever they
19:11 - have provided you will override it with
19:13 - your own like they have given you a
19:16 - wallet there is some kind of um you know
19:19 - thing that every parent will give
19:22 - their side a wallet and then they can
19:25 - override it that what they want to enter
19:27 - in that wallet or what they want to keep
19:29 - in that wallet so that's up to you so
19:33 - this is the same thing we have done now
19:34 - rather than this container we will call
19:37 - it home page
19:40 - and once we do that and
19:42 - as you can see now if i do a hot restart
19:46 - everything will be remaining the same
19:47 - but this time if i will change it to
19:50 - high flutter to high flutter
19:52 - um app
19:54 - then you will see we can see the changes
19:56 - quickly as soon as i press command s or
19:59 - i as soon as i press this hot reload so
20:02 - once you are out of this run app method
20:05 - then hot reload will start working so
20:07 - that's also what you can do
20:09 - and now it's again still not looking so
20:12 - convincing so we are gonna use another
20:14 - widget which we can call scaffold so
20:17 - scaffold is basically kind of a
20:19 - structure which has some basic widgets
20:22 - like an app bar so app bar if you will
20:24 - over here then it will
20:26 - show you that it takes a preferred size
20:29 - widget which can be app bar itself so
20:31 - app bar widget we can use then it has
20:33 - many properties as you can see and we
20:36 - are gonna use title property and as you
20:38 - can see on the right hand side our app
20:40 - is looking much better now and then we
20:43 - can say text
20:44 - and here i can say
20:47 - let's say awesome app
20:50 - and as you can see this is looking much
20:52 - much better now i want to change its
20:54 - color from blue to something like a
20:56 - purple so inside this material app we
20:59 - will come back and here there is
21:01 - something called theme
21:03 - and which takes a theme data so i'm
21:05 - gonna select it and i'm gonna say
21:08 - that i want the theme data and inside
21:11 - that there is many properties like
21:13 - brightness font family canvas color
21:15 - accent color card color and lot more
21:18 - things i'm gonna use primary swatch
21:21 - which is a collection of colors which we
21:23 - can use so let's say if i say colors dot
21:25 - red if i give red color then it will
21:28 - take some combination of colors
21:30 - depending on red and it will give it to
21:33 - entire application so i'm gonna say here
21:36 - purple
21:37 - which means it will give purple to all
21:40 - my colors like purple as a primary color
21:43 - and other colors which is which suits
21:45 - best with purple and now i'm gonna do
21:47 - heart restart because i am doing changes
21:50 - inside the run app method so you need to
21:52 - do hot restart and now you can see we
21:55 - got purple which is looking much better
21:58 - and now in the body part of it
22:00 - we can use the same container
22:03 - which we were using earlier so container
22:06 - and in the child we can say text
22:10 - and inside the text we can say hi
22:12 - flutter
22:14 - so as soon as i will say it you can see
22:17 - high flutter here
22:19 - and this is looking great right so in
22:21 - the next video we will talk about more
22:23 - widgets and
22:25 - what are the differences between them
22:26 - how to use um these widgets and where to
22:30 - use which widget so see
22:38 - hey guys so uh now we are gonna see
22:41 - other things as well like we have seen
22:43 - how to create our application what are
22:46 - what are uh like themes which are
22:49 - available or colors which are available
22:51 - as well as we saw is k fold and
22:55 - this stateless widget so stateless
22:57 - widget is something which is not
22:58 - supposed to change which means whatever
23:01 - you are seeing on screen let's say you
23:03 - are seeing this high floater so this is
23:05 - always
23:06 - going to be high flutter it's not going
23:08 - to change which means it's stateless so
23:11 - any widget there is many um components
23:14 - which you will see in particular series
23:16 - and every kind of component is a widget
23:19 - as i already told you now before
23:21 - proceeding guys we are gonna commit
23:24 - these changes that our chapter one is
23:26 - completed you can write something like
23:29 - this and then i'm gonna press this right
23:32 - key done key uh to commit this and then
23:35 - i'm gonna go here and i'm gonna create a
23:38 - new branch
23:40 - which i'm gonna say
23:42 - dev hashtag ch2 which means chapter two
23:45 - so these these are some chapters which
23:48 - just for tracking so you can definitely
23:50 - visit this github repository and then
23:52 - you can see the branches to understand
23:54 - it once you are watching this course on
23:57 - my school so this is what you have to do
24:01 - now guys we will explore more widgets
24:04 - and now uh the most powerful widget
24:06 - which we are gonna explore is container
24:09 - itself so container is kind of uh you
24:12 - can say a box so if you are familiar
24:15 - with html then it's something which is
24:17 - very similar to div
24:19 - so this is what we have here in as
24:22 - container so inside this body part you
24:25 - can see this container right so now we
24:27 - are gonna play with it and we will
24:30 - let's see what we can do with this so
24:32 - i'm gonna just remove this child as of
24:35 - now and then um we are gonna give some
24:38 - color to this container so let's give it
24:41 - a color let's say red
24:43 - so colors dot red and as you can see
24:46 - this time it is taking the entire screen
24:49 - and that's not something which i want i
24:51 - want a box here okay a small box so what
24:55 - i can do i can give a width to it let's
24:58 - say 100 pixels so it's a density pixel
25:01 - which is dp and similarly we will give
25:03 - it a height of 100
25:05 - and then you can see we have a box here
25:08 - right and the red color box now we want
25:10 - it to be in the center so we can use
25:13 - another widget here which we can just
25:16 - so you will come to this container and
25:19 - you will press command dot or control
25:21 - dot or you can also press this
25:24 - bulb here which you will see in vs code
25:27 - and
25:28 - if you are using android studio then you
25:30 - can press alt enter so if i click here
25:33 - then
25:34 - there are many options like wrap with
25:36 - widget wrap with center wrap with column
25:39 - so either you can use wrap with widget
25:40 - and then you can write center or you can
25:42 - directly wrap it with center and now if
25:45 - i'll save it
25:47 - then you can see in the center of this
25:49 - screen this is the box and similarly it
25:52 - has many other features which we get
25:54 - from container so now i'm gonna also
25:58 - write the child again
26:00 - and this time i'm gonna say
26:03 - i am a box
26:06 - so
26:07 - now you can see we have i am a box now
26:10 - it is like very much
26:12 - um touching the corner of the container
26:15 - so i don't want that for that i have
26:19 - some other properties of containers
26:21 - which has this padding so padding means
26:24 - that it will give it will compress that
26:26 - widget and it will provide some space so
26:29 - there is there are two properties one is
26:30 - margin and one is padding margin means
26:33 - just left hand right or top or bottom
26:36 - adjustment but padding means is
26:37 - compressing them so you will see the
26:40 - difference itself so if you will use
26:42 - padding then it will work in this case
26:44 - for i am a box or text and if you will
26:47 - use margin then it won't work so for
26:49 - padding if you see what it takes it
26:52 - takes a edge in sets geometry so i'm
26:55 - gonna use a constant
26:57 - edge in sets and then it has many
26:59 - properties or many methods i should say
27:02 - so these are the methods like all to
27:05 - give that padding to entire uh corners
27:08 - let's say left right top bottom from
27:10 - everywhere
27:11 - and only which means that for specific
27:14 - let's say just for left symmetric which
27:17 - means horizontal or vertical and lt rb
27:20 - which means left top right bottom so
27:23 - anything you can decide so i'm gonna
27:25 - select all and i'm gonna give a padding
27:27 - of eight and now you will see that i am
27:30 - a box got some padding right and if if i
27:33 - would have used margin here then you
27:35 - might have seen no difference
27:37 - and that's because margin is just for
27:40 - adjustment between those components so
27:43 - that's the difference so padding we are
27:45 - going to use
27:46 - now there are other properties as you
27:48 - can see here alignment okay so alignment
27:52 - means
27:53 - where you want to place this child okay
27:56 - where you want to align it
27:58 - so we can use something called alignment
28:00 - dot let's say we want to show it in the
28:03 - center then you will see i am a box in
28:06 - the center
28:07 - and let's say if you want to see it in
28:09 - the bottom right then you can just say
28:11 - bottom right and you will see it here in
28:14 - the bottom right so this is the purpose
28:16 - of alignment there are a lot of
28:18 - enums which you can use bottom right
28:20 - bottom left
28:22 - um top left top right so let's say top
28:25 - left so you'll see it in the top left so
28:28 - these are the things which you can do
28:30 - then guys you might be wondering what is
28:32 - this child so every container or
28:34 - everything has either one child or many
28:37 - children so basically if you say that
28:40 - there is one component so let's say row
28:44 - okay so row is basically uh there will
28:47 - be so if you are making a row there will
28:49 - be one element or more than one so in
28:52 - that case there will always be children
28:54 - let's say list view row column and like
28:57 - these kind of widgets where it is
28:58 - container sized box or small small
29:02 - components which can have only one child
29:05 - so then you will use child so i'm gonna
29:07 - explain it more in the future as well so
29:09 - don't worry if you don't understand
29:10 - something and then the most important
29:13 - property of container which is gonna be
29:16 - very useful for you
29:17 - is one is constraints which which is
29:20 - kind of not very useful until unless you
29:24 - go into deep um
29:26 - like ui designs otherwise the most
29:29 - important which i'm gonna talk about is
29:30 - decoration by which you can do a lot of
29:33 - things with this container you can
29:34 - provide gradients you can give shapes
29:37 - you can give images whatever you want to
29:39 - do so this decoration takes a box
29:42 - decoration so box decoration i'm gonna
29:45 - say and now you can see it has many
29:47 - properties like image color
29:49 - and gradient and all that stuff
29:52 - now there is some error and the error is
29:55 - saying that something related to color
29:57 - and the problem is guys
29:59 - so one you once you want to decorate
30:02 - something which means you have already
30:04 - given it color okay
30:06 - and this box decoration also have a
30:08 - color property as you can see so these
30:10 - will clash so either you can give a
30:12 - color here or you can use a box
30:14 - decoration so because we are using box
30:17 - decoration so i'm gonna remove this
30:18 - color from here and the error will be
30:21 - gone but we are losing our color so we
30:24 - will come here inside this box
30:26 - decoration vivilita will give the color
30:29 - and now the error is also gone and we
30:31 - also got our color back
30:33 - now we have a lot of other things like
30:36 - we can give a border radius we can give
30:39 - a shape so
30:40 - for shape it takes a box shape so we can
30:43 - say box shape dot circle or rectangle so
30:46 - we can select circle and you will see we
30:49 - will see this kind of
30:51 - uh circle
30:53 - and it is going beyond here like the
30:55 - circle and the text is text is not
30:58 - exactly inside the circle so container
31:01 - has some clip behavior as well so how
31:04 - you want to clip it so you can say clip
31:07 - hard edge non anti alias so make sure
31:10 - you are using anti alias so that you
31:12 - will not see
31:14 - that part of
31:15 - like now you can see the text is not
31:18 - here outside this particular container
31:21 - so that's what you can do there is more
31:23 - options like none which means you will
31:26 - see the text
31:27 - and then there is anti-alias with save
31:30 - layer which is kind of expensive so i
31:32 - will say again not to use it and then
31:34 - there is hard edge so just ignore them
31:37 - you can just use empty alias in most of
31:39 - the cases to get uh your shapes properly
31:43 - so i'm gonna just remove it right now
31:45 - and rather than this shape dot circle we
31:47 - want to give some rounded corners right
31:50 - so it's it's like there is no corner
31:52 - this is this hard edge corner so rounded
31:54 - corner we can use border radius and we
31:57 - can say border radius
32:00 - dot
32:01 - what a radius
32:02 - dot circular and let's give a radius of
32:06 - 10 from all the sides and now you can
32:08 - see we have a border radius and this is
32:10 - looking much better right
32:12 - and then guys um we can also give shadow
32:14 - to this so um for that you can see we
32:18 - have like you can give border as well
32:20 - you can give box shadows so for box
32:22 - shadow it takes an array so we can say
32:25 - box shadow
32:26 - and then we can say color so i want to
32:29 - use
32:30 - gray color
32:32 - and then um we can give a blur radius
32:35 - let's say five so now you will see
32:37 - something like a shadow here as you can
32:39 - see there's a slight shadow if i
32:42 - increase the radius to 10
32:44 - then you will see a
32:46 - better version of it of this shadow now
32:49 - similarly as i told you you can apply
32:51 - gradients so um
32:54 - here if i go to this uh
32:57 - below border radius then there is
32:58 - something called gradient there can be
33:00 - many kind of gradient like linear
33:02 - gradient radial gradient sweep gradient
33:05 - so
33:05 - um i'm gonna use linear gradient because
33:07 - that's what we are gonna use most of the
33:09 - time it asks for colors or begin or a
33:12 - stops point so i'm gonna give it some
33:14 - colors so first color let's say we will
33:17 - give it something like a pink
33:20 - and
33:21 - oh it's looking so bad because at least
33:23 - we need two colors and second colors i'm
33:26 - gonna give it something like a yellow
33:28 - maybe let's try this
33:31 - and
33:33 - now and you can see this is how a
33:35 - gradient will look like right
33:37 - and it's looking so good right and now
33:40 - guys i'm gonna explain
33:42 - uh let's do one thing uh let's put this
33:45 - text in the center so we will use this
33:47 - alignment to center it
33:50 - and it's looking much better and now we
33:53 - will move to this text so this text is
33:56 - again a very important widget because
33:58 - everywhere you are gonna use text so you
34:00 - should know all its properties so it has
34:02 - many properties like you can align the
34:05 - text you can give how many lines this
34:07 - text can take uh what is soft wrap
34:11 - what uh what you want to do for overflow
34:13 - cases but most important is this style
34:16 - which we are gonna use it takes a text
34:19 - style so everything is here inside this
34:22 - text i like font size font family
34:25 - and the font weight
34:27 - so i'm gonna give it a font size of 20
34:29 - let's say
34:30 - and as soon as i will give it 20 you can
34:33 - see
34:34 - it goes like this i want to center them
34:37 - still so um there is a text property
34:40 - which is text align and can use them and
34:43 - i can say text line dot center
34:45 - and you will see the box i am a box is
34:48 - now in center
34:49 - now if you want you can also change the
34:51 - color of the text so let's say i want to
34:53 - say colors dot white
34:56 - so i can give it white and then you can
34:58 - see this is the white color now i want
35:01 - to make it bold so i can say font
35:04 - weight dot bold
35:06 - and
35:07 - use commas to just move it to the next
35:09 - line so that looks good now it is bold
35:12 - as well so yeah these are some of the
35:14 - most common kind of you know you can use
35:18 - letters heights and you know decoration
35:21 - also like you want to have underline
35:24 - in this particular text word spacing so
35:27 - lot of other stuff but these are some
35:29 - common ones which i just showed you and
35:31 - in the next video i'm gonna talk about
35:33 - most uh
35:34 - important widgets like these and
35:38 - let's see in the next
35:45 - hey guys so uh we have seen
35:48 - a container which is kind of a very
35:50 - useful widget a text as well now moving
35:53 - ahead let's talk about some more widgets
35:55 - and we will see what else can be very
35:58 - useful for us and what else we should
36:01 - definitely consider using
36:04 - so
36:05 - what i'm gonna do i'm gonna first of all
36:08 - um remove these
36:10 - bulky container like this decoration i
36:13 - don't want right now so i will remove it
36:15 - even i will remove the child as well so
36:18 - let's remove all of this so that it can
36:20 - be very simple and then we will give it
36:23 - back the color
36:25 - and so we can say color start red and it
36:28 - looks good now i'm also gonna remove
36:31 - this center
36:32 - from this so remove this widget or if
36:35 - you want you can just place it like this
36:37 - so it's totally your call so let's place
36:39 - it as of now we will then remove it um
36:41 - there is this container but let's say i
36:43 - want three containers in a row so how i
36:46 - will place this i
36:48 - so as you can see the center can have
36:50 - only one child so how i will have three
36:53 - child so basically for that we can use
36:56 - something called a con
36:58 - a row or a column so because we want to
37:01 - place it horizontally so we will use a
37:03 - row here
37:04 - and as you can see it takes children
37:07 - rather than a child because it can have
37:10 - one or maybe more than one elements or
37:12 - maybe zero it's totally your calls so
37:15 - first we will have this container
37:18 - which i just copied and pasted and by
37:20 - default it came to this you know
37:22 - left hand side and then i will have
37:25 - second container which will come to
37:27 - right of it and then i will have third
37:30 - container which will go again
37:32 - on the other side and then i'm gonna
37:35 - just change the color of second to
37:37 - yellow and third to green to
37:40 - differentiate between them
37:42 - so that you can understand row properly
37:45 - and so it looks like a traffic light but
37:48 - yeah it's looking very ugly although
37:50 - so that is what we have got now
37:53 - now what if you want it to be placed in
37:57 - the center right so row has a property a
38:00 - very good property which we can say main
38:03 - axis alignment for row so if it is a row
38:06 - the main axis would be the horizontal
38:09 - axis as you can see this cursor
38:11 - is uh dragging in the horizontal so this
38:14 - is its main axis and then the cross axis
38:17 - will be the vertical axis
38:19 - okay so this vertical axis is cross axis
38:22 - for row and main axis is this horizontal
38:25 - axis but for column the main axis is the
38:29 - vertical axis and the cross axis the
38:32 - horizontal axis so that is the
38:34 - difference so now i'm gonna say um like
38:37 - say that main axis alignment dot center
38:41 - to center these elements and it looks
38:43 - good now you can tell me that i just
38:46 - want red on the left hand side to the
38:49 - corner and right
38:51 - hand side i want the
38:53 - green one so you can just replace center
38:57 - with space between
38:59 - and you will see the difference
39:01 - that this is on the left hand side this
39:03 - is on the right hand side
39:05 - and now you might see that okay it is
39:07 - touching the corner i just don't want to
39:09 - touch the corner a little bit space from
39:12 - here so in that case you can use
39:14 - something called space around which will
39:16 - give a little space from here but then
39:19 - you will see that this space is not
39:22 - evenly mapped with this space right in
39:26 - that case you can use something called
39:27 - space evenly which will distribute them
39:30 - with
39:31 - like equal spaces as you can see this is
39:34 - space and this space is kind of same
39:37 - right so these are the things which you
39:39 - can do with this
39:40 - and then um if you want there is start
39:44 - and so if you want to push it into the
39:46 - end so this is also you can do so now
39:49 - i'm gonna go with space evenly which
39:51 - looks good to me and because we have
39:53 - used this center um in the top of this
39:56 - particular widget tree so which means
39:58 - that's why it is in center if i will
40:00 - remove this from here
40:03 - it will go on the top
40:05 - so as you can see here because this is
40:07 - the area which it is taking right so
40:10 - this this will only take the space which
40:13 - it needs and then there is another
40:15 - property which is cross axis alignment
40:18 - like on the cross axis as i told you
40:20 - this will be the vertical axis for row
40:22 - so you can say cross axis alignment dot
40:24 - center
40:25 - then it will take it to the center but
40:28 - because this is just a container so what
40:31 - i'll do i'll also wrap this row with
40:34 - another widget which is a container
40:36 - widget and this time i will give it a
40:38 - color okay so this container
40:41 - has a color let's say and i'm gonna say
40:44 - it
40:45 - color start
40:47 - teal
40:48 - just for the sake of
40:50 - giving it a color
40:51 - and you can see the container is taking
40:54 - teal color and that size of it is very
40:57 - much limited to these boxes okay so
41:00 - that's why the center of cross axial
41:02 - alignment is depending on this container
41:05 - if i let's say if i give it a height
41:09 - let's say 500 then you will see
41:12 - now the container
41:14 - is like 500 height but
41:18 - this cross access alignment dot center
41:20 - is working which means it these boxes
41:22 - are in the center right if i change this
41:25 - this time from center to let's say
41:28 - um
41:29 - start then it will go on the top again
41:32 - and if i will say and
41:34 - then it will come on the
41:37 - last portion of it right and similarly
41:40 - we can um do changes with the main axis
41:43 - alignment that's what we do right so
41:46 - these are the things again guys very
41:47 - important
41:48 - and then we will go back to center let's
41:51 - say
41:51 - and now what i want to do i want to
41:54 - stretch them so i if i say stretch then
41:57 - it will take the entire column right so
42:00 - this is what you can do now let's go
42:02 - back to center and now
42:04 - replace this row with column and you
42:06 - will see the same things but the
42:09 - difference is that now it's a column so
42:11 - main axis alignment is actually the
42:13 - vertical alignment and cross axis
42:15 - alignment is actually the
42:18 - uh this horizontal alignment so now
42:20 - because we are giving height to 500 it
42:23 - took the entire height but actually it
42:26 - does not care about the width so height
42:28 - is 500 but width is not 500 because it's
42:31 - a column okay so there is also one
42:34 - property that main exercise what you
42:37 - want the main axis size to be so either
42:39 - it can be minimum or maximum so but this
42:42 - maximum again depends on the parent that
42:45 - what parent provides you the maximum
42:47 - size so as we know the container is not
42:49 - providing any maximum size we can
42:52 - definitely have constraints there but
42:55 - right now it's actually minimum
42:57 - so now uh rather than height if let's
42:59 - say i say width then you will see that
43:02 - it takes entire width
43:05 - and entire height and with 500 width or
43:08 - whatever width you want to say let's say
43:10 - 300 then you will see it takes 300 and
43:13 - main accessories space evenly which
43:15 - means the vertical alignment is space
43:17 - evenly if i will change it to a space
43:19 - between
43:20 - then you will see it will go to the
43:22 - corner of vertical alignment and then
43:25 - cross axis alignment it is actually now
43:28 - row or you can say horizontally whatever
43:31 - you can see now if i say stretch then it
43:33 - will stretch horizontally
43:35 - and that's the difference between rows
43:37 - and columns so these are very powerful
43:40 - and very important widgets which you are
43:41 - gonna use everywhere so please keep in
43:44 - mind that this is something which we are
43:47 - going to use a lot in the next video we
43:49 - will talk about drawer and
43:51 - floating action buttons and all that
43:53 - stuff so
44:01 - we have actually covered a lot so far
44:04 - and if you will see now we have now
44:06 - these giant container with so many you
44:10 - know components inside it like so many
44:13 - containers and this is looking very ugly
44:15 - to be honest so i'm just gonna give it
44:18 - again a row and then i'm gonna give it a
44:21 - height which can be again hundred
44:24 - and we don't actually care a lot about
44:27 - it and uh so that's why we are gonna
44:30 - finish this chapter with these columns
44:32 - and rows so i'm gonna go here and i can
44:34 - say chapter 2 completed
44:37 - and now we will start chapter 3 where we
44:40 - will talk about drawer and how to create
44:42 - beautiful designs
44:44 - so uh i'm gonna come here and i'm gonna
44:47 - create a new branch i'm gonna call it
44:49 - dev hashtag
44:51 - ch3
44:52 - and this is our chapter number three now
44:56 - um guys i'm actually going to remove
44:58 - this child from here because it's
45:01 - actually looking very bad and
45:04 - i'm happy with this thing with hundred
45:07 - and uh
45:08 - let's wrap it in the center now let's
45:11 - talk about how we can have a drawer here
45:14 - okay and also floating action button so
45:17 - first of all let's cover the floating
45:19 - action button because that is very easy
45:20 - to do in flutter so here after a body
45:24 - because i told you that scaffold
45:26 - provides you an entire structure it has
45:29 - which has a lot of components and that's
45:32 - what we are gonna see so we have seen a
45:34 - bar we have seen body and if you see
45:37 - there are a lot more widgets so we are
45:39 - going to use floating action button and
45:41 - it takes a widget so what widget would
45:43 - be best for it that will be again a
45:45 - floating action button itself so
45:47 - floating action button as you can see
45:50 - now we have a floating action button
45:51 - here okay and it came with an animation
45:55 - which looks good now every button in
45:57 - floater needs to be implemented
46:00 - it's on pressed which means that if
46:02 - that's a button definitely you're gonna
46:04 - press on it if you're not gonna press on
46:07 - it then it should not be a button right
46:09 - so by default it is null but we can do
46:12 - like it's it takes a void function so we
46:16 - can have two braces
46:18 - like this with um the the brackets as
46:21 - well so which means it's an empty
46:24 - implementation we will do something in
46:26 - future okay and then it takes a child
46:31 - so for child you can say i'm gonna give
46:34 - it an icon
46:35 - so icon is again a widget and similarly
46:38 - to colors we have icons library from
46:41 - which we can pick any material design
46:43 - icon let's say i'm gonna use edit
46:46 - and you can see this has taken the color
46:49 - to white itself i haven't specified but
46:52 - flutter understands the size and color
46:54 - as well so most of the widgets
46:57 - understand what kind of child they want
46:59 - and what should be the size and color of
47:02 - it so this is the floating action button
47:04 - now again there are other properties
47:06 - like how much
47:08 - elevation you want to give what should
47:10 - be the background color what should be
47:12 - the shape
47:14 - hero tag and if you want this uh
47:17 - you know button to be a little smaller
47:19 - then you can say mini is equal to true
47:22 - and then it will be a smaller but
47:24 - usually it's a normal so we will remove
47:26 - this property and or we can do it like
47:29 - make it false autofocus hover color so
47:32 - these are the few things which maybe you
47:35 - will use with flutter for web but right
47:37 - now we don't need it so i'm gonna remove
47:39 - it then also guys there is one more
47:41 - property for floating action button
47:43 - which is its location
47:45 - and there is one animator as well but
47:47 - that's we are not gonna use right now
47:49 - but floating button location we can use
47:52 - floating button location
47:54 - dot
47:55 - what location you want to use if you
47:57 - want to attach it with center with a
47:59 - bottom bar or something it will come
48:01 - here and it will be attached but if you
48:04 - want to make it little floatable so it
48:07 - will not attach to any bottom bar and it
48:09 - will float it will have some margin
48:11 - and then similarly you can do it for
48:14 - let's say if you want on the top so it
48:16 - will say start top it will go on the top
48:19 - and
48:20 - similarly you can maybe undock and float
48:24 - so it will go again on the same place so
48:27 - for the simplicity and for the
48:28 - betterment of design i'm gonna remove it
48:30 - again
48:31 - this was just to explain you now we are
48:34 - gonna quickly make a drawer and how
48:37 - difficult it can be so with body there
48:39 - is another property which we can say
48:42 - let's say draw and it takes a widget
48:44 - which is again a very interesting widget
48:46 - and the name is drawer
48:48 - so yeah that's that's only what you have
48:51 - to do now we have a drawer
48:53 - and if you click on it we see this
48:56 - white screen which is
48:58 - um
48:59 - i don't know what kind of screen it is
49:00 - it's it's it's it's having nothing okay
49:04 - now we are gonna make a very good drawer
49:06 - so inside this drawer you will see what
49:09 - properties it takes so it has elevation
49:11 - semantic label
49:13 - child so we are gonna use this child
49:16 - and guys um as you will see that with
49:20 - every widget you will see this property
49:22 - which is this key property so you can
49:24 - specify keys to every widget it's
49:27 - totally your choice and there can be
49:30 - many kinds of keys let's say local key
49:33 - unique key object key the purpose of
49:36 - keys is that it helps the framework
49:39 - in understanding that what widgets are
49:42 - needs to be again repainted or redrawn
49:46 - so it helps that if you don't provide a
49:48 - key then framework itself provides a key
49:51 - to these widgets and it helps it in
49:55 - actually redrawing everything so right
49:57 - now we are not gonna discuss it but in
49:59 - future we will definitely focus on keys
50:01 - and how to use them in some other course
50:04 - so because it's just essential so you
50:06 - probably don't need it right now so in
50:09 - drawer there is something called child
50:11 - and here we are going to use a list view
50:14 - and in the future videos we will um talk
50:17 - about list view dot builder which is
50:19 - kind of a recycler view you can say we
50:22 - will also recycle the elements but right
50:24 - now we just want to use a list view
50:26 - and inside the list view we again have a
50:28 - children because as you as i told you
50:31 - that list view column rows must have
50:34 - children's so now in this list view the
50:36 - first thing which i want is some kind of
50:39 - a drawer header
50:41 - so drawer header is definitely a widget
50:43 - here it takes a child and in the child i
50:46 - can say text
50:48 - hi
50:49 - i am a drawer
50:53 - and
50:54 - yes we got the drawer guys
50:56 - it's looking good
50:58 - not the best but yes it's looking fine
51:01 - and uh
51:03 - okay that's that's what we have right we
51:06 - can also give it some kind of decoration
51:09 - so um i'm i'm gonna use a box decoration
51:13 - and then i can give it a color so let's
51:15 - say i'm gonna give it same color let's
51:18 - say purple
51:19 - and guys it's looking good but you know
51:22 - there is this problem that the upper
51:24 - part of it is having this gray
51:25 - background because the list view by
51:28 - default gives some padding so we want to
51:30 - remove that padding so we will use this
51:33 - padding
51:34 - and we will say const edge in sets dot
51:37 - all and we will give the padding to zero
51:40 - and now you will see this is looking
51:42 - much better right
51:43 - so now we have the drawer ready
51:46 - now we want some items so hey here after
51:49 - drawer because it's it takes children so
51:52 - we can have other elements our other
51:54 - widgets so another very useful widget
51:56 - with list view is list tile so we are
51:59 - gonna use list style
52:01 - so list style gives us a lot of things
52:04 - like it gives a leading property where
52:07 - we can have something on the left hand
52:10 - side of this particular uh portion so we
52:13 - can use something let's say an icon and
52:15 - icons dot person then you will see we
52:18 - have icon on the left hand side is
52:20 - looking very good now there is one more
52:23 - property called title we can give it a
52:25 - title so let's say text and i'll i'll
52:28 - give it my name let's say pawan kumar
52:31 - and now we have a title as well
52:34 - and we can have a subtitle as well guys
52:36 - so for subtitle
52:38 - we can say
52:40 - let's say
52:41 - developer
52:43 - and
52:44 - yes we have a subtitle but then we have
52:47 - a trailing icon as well or trailing
52:49 - widget as well and everything takes a
52:50 - widget so it's not like you have to just
52:52 - give it an icon you can give anything
52:54 - here or text or whatever but i am gonna
52:58 - give it an icon
52:59 - and this time i'm gonna give it let's
53:01 - say our edit icon
53:03 - so an edit icon is added here and this
53:05 - is looking very good i'm gonna just copy
53:08 - it and i'm gonna paste it
53:10 - so another
53:12 - here and this time i will replace it
53:14 - with email
53:16 - and
53:17 - i'm gonna say pavan kumar um
53:21 - i will say email
53:23 - and i can say pawan or maybe tech viral
53:29 - at the rate gmail.com
53:32 - so these are the things which you can do
53:33 - and this time now our try uh draw looks
53:36 - good but there is slightly one
53:38 - improvement we can do this straw header
53:41 - is not looking so good and if you have
53:43 - seen gmail the draw look good with a
53:46 - picture as well and lot of other details
53:49 - so we can definitely do that here as
53:50 - well so what i'm gonna do i'm gonna
53:53 - remove this drawer header there is
53:55 - something called user
53:57 - account drawer header which we are gonna
54:00 - use
54:01 - and
54:02 - it is basically for applications like
54:05 - gmail where you can say account name
54:07 - account email so for account name you
54:09 - can say it takes a widget so we can give
54:13 - it a widget let's say text
54:15 - and i can again say
54:17 - pawan kumar
54:19 - and you will see pawan kumar is coming
54:22 - we haven't specified the location but it
54:24 - knows where it should show it
54:27 - and then for the account email again
54:29 - text and i'm gonna
54:31 - just say i'm tech wireless gmail.com
54:34 - it looks good right really good now i
54:38 - also want to add a picture so i can have
54:41 - this current account picture
54:43 - which looks good and the current account
54:46 - picture takes a widget so i can use guys
54:49 - something like um so first of all i'll
54:52 - go to google
54:53 - i'll go to unsplash.com
54:56 - from here i can get some free images so
54:58 - i'm gonna say
55:00 - a guy or
55:02 - guy let's say
55:04 - any random guy we can take and we can
55:06 - take his picture
55:08 - so let's copy
55:10 - the uh let's open this image in a new
55:13 - tab and copy the address
55:15 - and guys this time i'm gonna use
55:17 - something called a image widget
55:19 - and dot then there is more
55:22 - methods to it like asset if you are
55:24 - using an image from your folder or
55:26 - application inside your app
55:28 - or file if you want to use your phone
55:31 - and you want to access a file then
55:34 - network if you want to download it from
55:36 - some network from a url and memory if
55:40 - you want to
55:41 - take it from the memory so we want to
55:43 - use it from network so we will use
55:45 - network and i will paste the url here
55:48 - and you will see we have this image here
55:51 - right this is looking good but it would
55:54 - look much better if we will use it
55:57 - in a circular um
55:59 - component right or widget so i'm gonna
56:02 - just remove this and i'm gonna use a
56:05 - circle avatar
56:07 - okay
56:07 - and
56:09 - actually circle avatar has a child where
56:11 - i can actually use the same image but
56:14 - circle avatar if we will provide even
56:17 - the child then also it will not give a
56:18 - circular image why because circle after
56:22 - does not work like that but definitely
56:24 - it has something to offer
56:26 - and that something is i'm just gonna
56:28 - show you so we got the circle there is
56:30 - one more property which is background
56:32 - image there is radius foreground color
56:35 - and all that but we want to use this
56:37 - background image which which takes an
56:39 - image provider so
56:42 - like um we got we saw the image widget
56:45 - which has methods like asset network
56:48 - similarly we have image providers let's
56:50 - say asset image
56:52 - okay and network image so these are the
56:55 - image providers which we can use and
56:57 - here now if i will paste this url then
57:00 - you will see a circular image here and
57:03 - this is looking much better right so now
57:05 - we have a full fledged
57:08 - uh drawer which looks kind of really
57:10 - good and especially we can add more
57:13 - things like on details pressed other
57:16 - account pictures and even if you want to
57:18 - tap on this list tiles then there is an
57:21 - ontap property which you can definitely
57:24 - use and once you click here you can
57:27 - perform some operations
57:29 - so that's also you can use so if you
57:31 - click here you can see we got some
57:34 - ripple effect but with email because we
57:36 - haven't implemented on depth we don't
57:38 - get any effect so yeah this this is the
57:41 - floating action button and drawer in the
57:43 - next video we will talk about more
57:46 - images like how we can access images
57:48 - from our application we will also talk
57:51 - about text fields and other things in
57:53 - the next
58:00 - hey guys so uh we have implemented the
58:02 - drawer which is looking very nice and
58:05 - also we have the floating action button
58:07 - but this home screen this body part is
58:10 - looking very very bad and then we want
58:13 - to you know try to add something else
58:15 - here and let's see what we can do with
58:18 - this part also we are going to cover the
58:20 - stateful widget which we haven't covered
58:22 - yet so what i'm gonna do i'm gonna go
58:25 - back to this particular screen i'm gonna
58:27 - search coding
58:29 - and
58:30 - i'm gonna
58:31 - like have any image from here or there
58:34 - and i'm gonna just paste it here so you
58:37 - can download any image and you can paste
58:39 - it so i have already one image so
58:42 - in this particular root directory i'm
58:44 - going to create a new folder as you can
58:47 - see in this test is basically giving me
58:49 - some error that there is no my app so
58:52 - i'm gonna replace it with home page
58:55 - so that it does not give me any kind of
58:57 - error and i want to import this
59:00 - so i can just say command
59:03 - dot
59:04 - against it it's it's not going to take
59:07 - it because
59:08 - um
59:09 - there's something wrong with this
59:12 - okay so we just remove that
59:14 - uh problem and now
59:17 - uh we want to create a new folder for
59:19 - images so i'm gonna say a new folder and
59:23 - i'm going to name it assets
59:25 - so as sets
59:27 - so you can see this is my new folder
59:30 - assets it is blank now i am going to
59:34 - um this pop spec dot ml but before that
59:38 - let's add some image here so what i'm
59:40 - gonna do i'm gonna take one image and
59:44 - i'm gonna drop it here so this is bg dot
59:47 - jpg this is one image and now we have to
59:51 - tell our application that there are
59:53 - images in one folder so now we will go
59:56 - to our pub spec dot eml and here you
59:59 - will see we have
60:00 - all the dependencies like cupert you
60:02 - know icons some dev dependencies saying
60:05 - that uses material design or design
60:07 - which is true and here we have some
60:10 - uh commented code which is assets we are
60:13 - gonna just uncommented and for assets it
60:16 - is using images folder but you can use
60:19 - any name but i'm using assets so i'm
60:22 - gonna say assets and then slash and i'm
60:24 - gonna remove everything which means that
60:27 - every
60:28 - image inside the asset folder we want to
60:31 - use that so we have just one image but
60:34 - this slash means all the images or all
60:37 - the assets inside your assets folder so
60:41 - that's being done
60:42 - now coming back to main door dot what
60:45 - i'm gonna do i'm just going to remove
60:47 - this center and container
60:50 - and
60:51 - if you want you can just keep that
60:53 - center just remove the container and we
60:55 - are going to talk about another widget
60:57 - which is a card widget which we will see
60:59 - a lot
61:00 - so i can use a card widget
61:04 - so the purpose of card widget is having
61:06 - a card right which can have elevation
61:08 - and all that and right now you can see
61:11 - that
61:11 - there is no card which is visible and
61:14 - also i want to change the background
61:16 - color of this k fold so escape for it
61:18 - has a property called background color
61:21 - and let's give it a grayish color gray
61:24 - of 200 so you can also specify the
61:26 - number here to give a slightly you know
61:30 - different variant of that color and now
61:33 - we have this card and now card also have
61:36 - elevation shape
61:38 - clip behavior and all that property i'm
61:40 - gonna use child
61:42 - and guys i'm gonna use a column here
61:45 - why because you know in column i can
61:48 - have many elements vertically aligned so
61:51 - it takes a children so first element i
61:54 - want
61:54 - is image
61:56 - dot asset this time i'm not going to
61:58 - fetch the image from network but from
62:01 - asset which means from my folders and i
62:03 - just pasted one image here and the name
62:06 - of this image is in first of all it is
62:08 - inside assets so assets slash and now we
62:12 - have to give the image name which is
62:14 - bg.jpg
62:16 - and now
62:17 - this is the image which we can see okay
62:20 - and similarly if let's say
62:24 - you want to specify if this image how it
62:27 - fits
62:28 - what is the width and height you can
62:29 - definitely do that let's say if width is
62:32 - 100 so you can see the width is there
62:35 - but um it's looking very ugly that's the
62:37 - different thing and if you want to give
62:40 - some height let's say 100 then also you
62:42 - can see we have this width and height
62:45 - now um there is one more property fit
62:48 - and you can give box fit so whether it
62:51 - is contained cover so if i say contain
62:54 - then you will see um there is no such
62:56 - difference right now but you will see
62:58 - some differences in different aspect
63:00 - ratios but if i say fill then you will
63:04 - see it will fill it it will basically
63:06 - stretch it so there will be no gaps
63:09 - and covers container cover looks almost
63:12 - the same
63:13 - in this particular image only it's not
63:15 - the same although so cover is like it
63:18 - will cover it
63:20 - but it will not stretch it right so
63:22 - that's that's a good thing so cover is
63:24 - mostly the best option or maybe contain
63:27 - fit width then it will fit the width and
63:31 - if i'll say fit height
63:34 - um then it will fit the height
63:37 - and yeah that's that those are the
63:38 - things which you can do so right now i'm
63:41 - just gonna remove all of them and it it
63:44 - looks like this very nice okay and this
63:47 - is the image which we have now
63:49 - um
63:50 - and
63:51 - one thing is that
63:52 - i still can see the card but it's not
63:55 - looking that great if you'll see we have
63:57 - a card here which is taking the entire
63:59 - screen okay so what i'm gonna do
64:02 - uh this card i'm gonna wrap it with
64:05 - padding and i'm gonna give some padding
64:07 - let's say 16
64:09 - so that at least we can see the card and
64:11 - now we can see the card it's looking
64:13 - good and
64:15 - then i'm gonna talk about another widget
64:17 - which is a size box widget so size box
64:20 - widget is what guys it can use to have a
64:24 - box a particular box with some size
64:27 - okay and if you don't want to have
64:29 - anything then you can also use it for
64:31 - spacing padding also can be used but
64:34 - padding looks a little bit uglier
64:37 - because it
64:38 - you need to wrap with it but size box is
64:41 - very clean and here you can just say
64:43 - height let's say 20 pixels so it will
64:46 - give a height after image and then we
64:48 - can have a text let's say
64:51 - text
64:52 - and
64:54 - i can say change
64:56 - my
64:57 - name here
64:59 - so very simple example change my name
65:01 - and uh we are gonna change this name
65:04 - okay so that's why i change my name we
65:06 - can give some styling here let's say
65:08 - text style we can give a font size let's
65:11 - say
65:12 - uh 25
65:14 - something like that it looks good
65:16 - uh let's give it a font weight as bold
65:21 - okay this is looking good now guys um
65:24 - there is one more thing which we can we
65:25 - are going to use and that is a text
65:28 - field so text field is an edit text
65:31 - where we can pre
65:32 - we can enter some text so text field is
65:35 - here i'm gonna use that
65:37 - and text field also have many properties
65:39 - like controller which can be used to
65:41 - control this text field then where there
65:44 - is style again text style and all that
65:47 - things which we have already seen then
65:49 - the keyboard type like what kind of
65:51 - keyboard you want you want text email or
65:54 - number keyboard so all of those things
65:56 - you can specify then auto correct auto
65:58 - focus on tap on submitter cursor color
66:02 - so lot of properties we are going to use
66:04 - decoration but this time it is not
66:07 - taking input decoration but it oh sorry
66:09 - it's not taking box decoration but it is
66:11 - taking input decoration so we are going
66:13 - to use input decoration
66:15 - and inside the input decoration there is
66:18 - border and all that stuff you can
66:19 - specify but first i want to specify hint
66:23 - text now this is not taking a text
66:25 - widget but it is just taking a string so
66:28 - i can say
66:29 - enter
66:33 - some text
66:34 - okay
66:36 - and uh
66:38 - yeah it's looking good right
66:39 - it's looking really nice and i want to
66:42 - give it a material design feel so
66:45 - i'm gonna say
66:47 - um
66:48 - something like what else um i'm gonna
66:51 - give it a label as well so label text we
66:53 - can say name so now if you will click
66:55 - here you can see this is looking good
66:58 - right
66:59 - and uh
67:00 - guys one one more thing we can do here
67:03 - is we can do some padding as well right
67:06 - so with this text and we want some uh
67:10 - distance between them as well so we will
67:11 - use size box to give some more distance
67:14 - and then we will give the padding as
67:16 - well so we can have some padding like 8
67:20 - and maybe 16 in fact
67:23 - it will look much better yes it looks
67:24 - much better and now if i click here you
67:27 - can see some overflow pixel issues which
67:30 - means if my keyboard is coming up this
67:33 - text
67:34 - field cannot move upwards which means if
67:37 - it was scrollable then it could move
67:40 - upward and as you can see our floating
67:42 - action button is also moving upward so
67:45 - that could be better but before that we
67:47 - can also give one more design to it so
67:50 - there is a border property as well so
67:53 - for border we can give it outline border
67:56 - outline input border which will make it
67:58 - look much more better yeah it's looking
68:00 - much better but we want to get rid of
68:03 - this particular you know problem
68:05 - which is this overflow so we can go to
68:08 - this column or we can in fact go to this
68:11 - entire card and we can wrap it with
68:14 - another widget which is single child
68:16 - scroll view which means it's a scroll
68:18 - view which can be scrollable and it can
68:20 - have just one single child and now we
68:23 - are having this scroll view if i click
68:25 - here then it just goes on the upside
68:28 - right and it is scrolling but it's not
68:31 - giving that error anymore and our card
68:34 - size is also now making more sense so
68:37 - yeah single child scroll view for
68:39 - scrolling
68:40 - and now what i want whatever data i
68:42 - write here
68:44 - okay
68:45 - if i press this button this button this
68:47 - edit button let me just change it the
68:50 - icon to let's say something like send
68:54 - and if i just click here then this
68:56 - change my name text should change
68:58 - okay so
69:01 - basically
69:02 - right now if you will see my home page
69:04 - then it's a stateless widget right so
69:06 - stateless widget as i told you is not
69:09 - supposed to change in its entire
69:11 - lifetime so we need to first of all
69:14 - convert it to a stateful widget so
69:16 - basically we want to change this change
69:18 - my name depending on this text field now
69:21 - this text field is itself
69:23 - a stateful widget why because every time
69:26 - you write something here things change
69:29 - right so whenever there is some change
69:32 - then you need to make sure that that's a
69:34 - stateful widget so if you will go inside
69:37 - text field if you will press command
69:39 - click or f12 then you will see that text
69:42 - field widget is extending a stateful
69:45 - widget so that is the thing so now how
69:47 - we can convert this home page to a
69:49 - stateless widget we can click on this
69:51 - bulb here and it will say convert class
69:54 - to a mix in or convert to stateful
69:56 - widget i'm gonna click here and it will
69:59 - convert it so now we will have two
70:01 - classes basically one is home page which
70:04 - extends stateful widget and then another
70:06 - is home page state which extends state
70:09 - and we will work with this state state
70:12 - is like what is the like current
70:14 - situation of this particular page so
70:17 - like if you are a human if you are a
70:19 - person what can be your state whether
70:21 - you are sitting where you are walking
70:24 - whether you are doing something that is
70:25 - your state so everything on the ui is a
70:28 - state so now um what i'm gonna do guys i
70:33 - am going to have first of all my text so
70:36 - my text
70:37 - by default um its name is change my
70:42 - name let's say
70:44 - and i'm going to replace this change my
70:46 - name with this my text so my
70:50 - text and now you can see it has this
70:54 - capital letter so that means this change
70:56 - my name is working now i want to need a
70:59 - controller for this text field so i can
71:02 - say
71:03 - a text editing controller name
71:05 - controller let's say if i use this
71:08 - underscore which means it's a private
71:10 - field
71:10 - so name controller
71:13 - and equal to new text editing controller
71:16 - so as you know in dart 2 you don't have
71:18 - to write this new keyword so if i am
71:22 - writing this then also it means the same
71:24 - thing if i remove it then also it means
71:26 - the same thing and now i can use this
71:28 - name controller with this text field so
71:31 - there is some controller and i can say
71:34 - name controller
71:35 - okay
71:36 - and now what i want guys is that
71:41 - actually
71:42 - we can go here to this
71:44 - floating action button and on the press
71:46 - of it what we can do we can change my
71:49 - text
71:50 - which is the text change my name
71:53 - equal to and we can
71:55 - give it the text of the controller or
71:58 - the text field so name controller dot
72:01 - text
72:02 - so if i now write something here
72:05 - let's say my name is pawan
72:07 - so now if i press this button
72:10 - then it should reflect but it does not
72:12 - reflect it right but if i do a hot
72:15 - reload then you will see that pawn is
72:18 - off like reflected why this happened
72:21 - because whenever there will be some
72:23 - change let's say now if i replace it
72:25 - with something else let's say
72:28 - i replace it with the
72:30 - low heat
72:34 - so now even if i'll press this button
72:37 - then nothing will actually happen
72:40 - so why this that is not working because
72:41 - in flutter every time you do a state
72:43 - change every time you want to change
72:45 - your ui then you have to call a method
72:48 - called set state and if i do that then
72:50 - you will see rohit here now if i'll
72:53 - change this text to something like this
72:56 - random and if i'll press this button now
72:59 - then you will see it will directly
73:01 - reflect it so this is how you deal with
73:04 - text field this is how you make a card
73:06 - this is how you make a stateful widget
73:09 - and that's how it works and now this is
73:10 - stateful widget or this state has many
73:14 - other
73:14 - methods which you can override like any
73:17 - state if you want to initialize
73:19 - something
73:20 - before creating this widget which means
73:23 - when this screen is creating
73:25 - before that this method will be called
73:28 - similarly once you destroy this screen
73:30 - you can call this dispose method
73:33 - um so basically there is dispose then
73:36 - there is did change dependency a lot of
73:38 - other methods which we will definitely
73:40 - talk about in future but this is about
73:43 - it and now this is how our chapter 3 is
73:46 - also completed
73:48 - and we will move to chapter 4
73:52 - in the next video so
74:00 - so guys so far we have done everything
74:02 - on a single file which is again a very
74:06 - big problem with floater if you will try
74:08 - to do everything in a single file then
74:11 - after some time it will be very
74:12 - difficult to read so in this video we
74:15 - are gonna see how we can organize this
74:17 - code so that it looks better and it
74:20 - gives a better feel right so what we are
74:22 - gonna do first of all i am going to
74:25 - create a new chapter so i will click
74:27 - here i'll create a new branch i will
74:29 - call it dev hashtag
74:31 - chapter 4
74:32 - and
74:33 - inside this chapter first of all we will
74:35 - do the refactoring so guys first of all
74:38 - i don't want this drawer to be here so
74:42 - this drawer is actually can have a
74:44 - separate file where we can write this
74:46 - drawer so i will go here inside this lib
74:50 - folder and i'll create a new file i will
74:53 - call it
74:54 - drawer
74:56 - uh drawer
74:57 - dot dot
74:59 - and inside this file
75:01 - i am going to import
75:03 - the same you know material dot dot
75:07 - package and now i will copy this code
75:10 - from drawer
75:12 - and try to paste it there so this is the
75:14 - code i'll just copy it from here or cut
75:18 - it from here
75:19 - and i will try to paste it here
75:22 - but it will not work because you know
75:25 - this file cannot understand from where
75:28 - it is starting from where it should end
75:30 - so rather than just pasting we will
75:32 - create a new stateless widget because we
75:35 - our drawer is not changing right now or
75:38 - we are not doing any runtime change so
75:40 - that's why this can be a stateless
75:42 - widget so i can say stateless widget and
75:45 - i'm going to name it my drawer let's say
75:48 - so my drawer is here now rather this
75:51 - container we will return this entire
75:54 - drawer we will remove this coma from the
75:56 - end and now it is good to go now rather
75:59 - than we'll go back to main. and rather
76:02 - than specifying the entire drawer here i
76:05 - can say my drawer
76:07 - and now i have to do one more thing i
76:10 - have to just import it so it's already
76:12 - imported here as you can see on the top
76:15 - and now if i just press command s to
76:18 - save it you will see
76:20 - everything is working right so
76:22 - everything is smooth so similarly what
76:26 - we will do
76:27 - we will also um remove this card so what
76:31 - i'm gonna do guys um this card i'm going
76:35 - to select this card
76:37 - so this card i have selected till this
76:39 - braces so for for this bracket i will
76:42 - use this and then i'll press on this
76:45 - bulb button and there is something
76:47 - called extract method and extract widget
76:50 - so i can extract this widget
76:53 - and
76:54 - once i extract it it will ask me to give
76:57 - it a name so that you know you can um
77:00 - create a new widget by itself so we can
77:03 - say something like a name card okay so
77:07 - name
77:08 - card widget so we gave this name if
77:11 - you'll see name card widget and if i
77:13 - press enter here so you will see it will
77:16 - be replaced by name card widget and now
77:20 - we have a class with name card widget
77:23 - which extends stateful widget and it
77:25 - takes all the properties in the
77:27 - constructor like my text my controller
77:30 - name controller
77:32 - and everything here now we can also make
77:34 - a separate file of this so we can say
77:38 - name
77:40 - card
77:41 - widget
77:43 - dot dot
77:45 - and here in this file we can copy and
77:47 - paste that code so first of all i will
77:49 - import
77:50 - material.dart and then from the main
77:53 - method i am going to cut this
77:56 - class whole class and i'll paste it here
78:00 - inside this and this is looking good and
78:03 - now i'm going to just import it
78:06 - so i'll press command dot
78:08 - or alt enter in android studio or
78:11 - control dot in vs code for windows and
78:14 - command s and now you can see everything
78:16 - is still the same everything is working
78:18 - there is no error or bug and now it's
78:21 - looking much cleaner just 61 lines of
78:23 - code but guys we can do one more thing
78:26 - we can remove this entire home page from
78:28 - here we can create a separate pages
78:31 - folder so inside lib we will create one
78:34 - more folder this time pages
78:37 - and
78:38 - here we will create a new file we will
78:41 - call it home underscore page
78:44 - dot dot
78:45 - and here also you know we will import
78:49 - material dot dot
78:51 - and then we can
78:53 - cut this particular code from here
78:56 - and we can paste it here
78:58 - okay
78:59 - and this time we will import the drawer
79:03 - we will import the name card widget and
79:05 - then the drawer
79:07 - and we should be good to go
79:09 - and here in the main door dart i will
79:12 - import this home page
79:14 - and yes and we will remove these two
79:16 - unused imports
79:18 - so as soon as i do that i need to do a
79:20 - hot restart and everything will start
79:23 - working yes everything is same and in
79:26 - fact if you don't want to do this hot
79:27 - restart again and again then you can
79:29 - also remove this material up from here
79:32 - so we can remove it
79:34 - and we can say something like here
79:37 - um stateless widget and we can say my
79:40 - app
79:41 - and we can just remove this material app
79:44 - from here
79:46 - and we can say something like this
79:50 - and
79:52 - we can here
79:53 - now in the run app we can just say my
79:55 - app
79:58 - and that's it that's the only thing we
80:00 - have to do
80:01 - and now everything looks the same but
80:04 - the good thing is like
80:06 - you know everything is looking like this
80:07 - is just having 19 lines of code or 20
80:10 - lines of code then the home page is also
80:12 - just 40 lines of code a drawer is also
80:15 - 30 lines of code
80:17 - and name card widget is also 40 50 lines
80:20 - of code so this way it will be much more
80:23 - organized and this test widget test is
80:26 - also giving us some issue so now i'm
80:28 - gonna just remove home page and i'll now
80:31 - say again my app
80:33 - and it will fix that issue as well
80:35 - so i'm just gonna remove it
80:38 - and yes we are good to go guys so this
80:40 - is something which is very important
80:42 - organizing your code and in the next
80:45 - video we are gonna see how we can do
80:48 - um networking in flutter and how we can
80:52 - add our dependency our first dependency
80:54 - in the pub spec.tml so keep
81:04 - hey guys so uh we have done so many
81:07 - things so far and uh i'm really glad
81:09 - that you could make it so far so we have
81:12 - seen lot of things like how to use
81:14 - drawer how to actually use stateful
81:17 - widgets how to change the name using
81:19 - this text field and now we are gonna do
81:22 - some real-world things like you know we
81:24 - have done all everything so far which is
81:26 - offline now we want to go to the online
81:29 - mode as well and by online i mean that
81:32 - how we will communicate with the maybe
81:36 - you can say with the server or maybe
81:38 - with the back end and then we are also
81:42 - as i told you if you remember that in
81:44 - the pubspec dot ml uh we add
81:47 - dependencies or which means that some
81:50 - libraries may be packages plugins are to
81:53 - talk to native code as well and to talk
81:56 - to maybe your backend so that's what we
81:58 - are gonna do in this particular video
82:01 - and guys one
82:02 - thing again which is very important is
82:05 - that make sure that you also check the
82:07 - notes during this course because there
82:09 - might be few important things or few
82:12 - things which you
82:13 - definitely want to take a look so now um
82:16 - let me just explain you once that
82:19 - what we are actually gonna do so if you
82:21 - are not familiar with this then i'm just
82:24 - gonna explain you that what i am talking
82:26 - about actually so um if i do that
82:30 - um yeah
82:32 - so if you can see my ipad here
82:36 - then i'm gonna just explain you this
82:39 - so basically but what i mean here
82:42 - is that let's say this is what we have
82:44 - this is screen okay and uh this is our
82:47 - computer okay so this is my computer
82:51 - and uh let's say this is my computer and
82:54 - we call it a client okay
82:56 - so when we are talking about the client
82:59 - which means our computer which is
83:01 - somewhere here let's say in india okay
83:04 - and it wants to make a request
83:08 - so it's a kind of a request and it makes
83:11 - it to a server
83:13 - okay
83:14 - so
83:15 - somewhere on the cloud and this cloud
83:18 - does not mean it's up in the air this is
83:20 - me this just means that this is another
83:23 - computer which is somewhere else in the
83:25 - world maybe maybe in asia maybe in us
83:29 - anywhere it can be and now this is
83:31 - making a request and
83:33 - um
83:34 - it wants something from it so
83:36 - what it will send is a request and what
83:39 - this server will send to this client
83:41 - will be a response
83:44 - okay so this is the important part now
83:46 - um because this is this is kind of a
83:49 - communication which is happening and
83:50 - they have to follow some protocols now
83:53 - if you will just think that if you are
83:55 - driving or if you are going from one
83:57 - place to another then you have to follow
83:59 - some protocols you have to follow some
84:01 - rules right so similarly they have some
84:04 - protocols which they have to follow and
84:07 - that's what we called http which means
84:10 - hyper text transfer protocol and using
84:12 - this protocol only they can communicate
84:15 - so this is what we are going to use and
84:17 - then the way they communicate can be in
84:20 - different forms one of the forms which
84:22 - is very popular the how they transfer
84:24 - message is what we called json which
84:28 - means javascript object notation and if
84:31 - you want me to explain it more then you
84:33 - can just call it like um it's it's kind
84:36 - of this
84:38 - um
84:39 - you can say key values pair where there
84:41 - will be a key let's say name name is a
84:43 - key
84:44 - and then it's it will have some value
84:46 - which is let's say p1 is a value of this
84:49 - name
84:50 - so this is how they actually
84:51 - communicates so this this is something
84:54 - which we need to understand and now uh
84:56 - we will actually proceed further and now
84:59 - i'll go to pubspec.eml and i'll add one
85:02 - dependency and that dependency would be
85:05 - i will go to my website or or the chrome
85:08 - browser and i'll write pub.dev
85:12 - and here i can search for http as you
85:14 - can see um this is the first package or
85:18 - you can say library which you will get
85:20 - http and this is the version and we'll
85:22 - see how we can install that so this is
85:24 - how we can install that so we i just
85:27 - we are just going to copy it and then we
85:29 - will paste it inside the prospect.ml
85:32 - below this line which is cupertino icons
85:34 - and then you will press command s
85:36 - or you you can just write flutter
85:38 - packages get and you should get exit
85:41 - code 0 which means everything worked
85:43 - pretty well and i am also going to
85:46 - enable the screencast mode so that you
85:49 - can see my shortcuts
85:51 - so yeah this is looking good now and now
85:54 - uh if i'll go back to home page i am
85:56 - using this uh you know name card widget
85:59 - and i really don't need it anymore so
86:02 - i'm gonna remove this
86:04 - as well as i'm gonna remove this single
86:06 - child scroll view as well because i
86:09 - don't need any of them so let's remove
86:11 - this child
86:12 - and now we will see nothing on the
86:14 - screen technically so i'm also gonna run
86:16 - this application so that we can check
86:19 - and guess one more thing is there like
86:22 - when you are adding any package or
86:24 - plugin so once you are adding a plugin
86:27 - which means it has some code written in
86:29 - kotlin or maybe on objective c or swift
86:32 - then you have to restart your app i mean
86:35 - restart from the scratch which means you
86:38 - have to stop it if it's running already
86:40 - and then you need to start it so that
86:43 - your application can understand about
86:45 - those uh plugins or otherwise it will
86:48 - give you some platform exception but in
86:51 - case of packages like http or any other
86:54 - package which is totally written in dart
86:56 - then you don't have to restart your
86:58 - application from scratch you can just do
87:00 - a hot restart so that will also work now
87:04 - as you can see we have nothing here but
87:06 - now we are gonna use that http package
87:09 - to fetch some data okay so what i'm
87:11 - gonna do um this we don't need anymore
87:14 - so i can just comment it as of now and
87:17 - here i'm gonna say that i am going to
87:21 - hit a url okay from where we will get
87:24 - the data so url is kind of an address
87:26 - which is similar to your home address
87:28 - right so every website or every web page
87:30 - has an address so here if you'll see we
87:33 - have this dummy address which is
87:35 - jsonplaceholder.tpcode.com
87:38 - photos so we are gonna use this address
87:41 - and we are gonna paste it here so
87:43 - so you can see this https which is
87:46 - s is for security you can say which
87:49 - means it has ssl certificate and this is
87:52 - http which is hypertext transfer
87:54 - protocol which which is the rules it
87:56 - needs to follow
87:58 - now um i'm also going to explain you
88:01 - something about asynchronous programming
88:03 - very soon uh
88:04 - up just an idea about it so uh this is
88:07 - what we have done right and then we will
88:11 - be waiting for some response or maybe i
88:14 - should say some data okay and then here
88:18 - in init state i can say
88:20 - let's say
88:21 - fetch data okay so this is the meta
88:24 - method which we are going to call now
88:26 - fetch data is not defined as of now and
88:28 - guys one more thing is that you can see
88:30 - that i see these kind of errors right in
88:34 - on right next to this particular line
88:37 - and what if you want to see it then you
88:39 - can go to this problems and here you
88:41 - will see the same problem but why i am
88:44 - seeing it here this red one is because
88:46 - of an extension which is which is a
88:48 - error lens so if you want you can
88:50 - install it and you can definitely watch
88:52 - my vs code tutorial on youtube uh so
88:55 - that you can get the idea and now um
88:59 - we have to define this fetch data method
89:02 - so i am gonna say fetch data here
89:06 - and now um there are two kinds of um you
89:09 - know communication or operations which
89:12 - can be done and that's what i'll explain
89:15 - you next so um if we are talking about
89:18 - that so let me just tell you so let's
89:20 - say there are two kinds of operation one
89:23 - is a synchronous so we can say a sync
89:26 - and second one is sync so which means
89:29 - synchronous so let's say guys uh once
89:31 - you go to a pizza store okay so you go
89:35 - to a pizza store so you ask for a pizza
89:38 - right so when you ask for a pizza it's
89:42 - not like
89:43 - so there is a guy this guy a he will
89:46 - take your order okay so you will go to
89:48 - him he will take your order he will
89:50 - write it somewhere and then your pizza
89:54 - will be
89:55 - like it's it's preparing right and by
89:58 - that time your pizza is preparing this
90:00 - guy a
90:01 - goes to some other person some random
90:03 - person here he will take his order as
90:06 - well and then his pizza will be
90:07 - preparing and then he will take some
90:10 - others order and then his pizza will be
90:12 - preparing and as soon as your pizza will
90:15 - be prepared
90:16 - he will deliver that pizza to you right
90:19 - and then again the same process we
90:21 - follow this is called asynchronous
90:23 - programming but in case of synchronous
90:25 - it's more like that
90:27 - it's it's like you are um here at a
90:30 - ticket counter okay
90:32 - and uh there are many people in the line
90:35 - a
90:36 - b
90:37 - c
90:38 - d
90:39 - or maybe you are at an atm
90:42 - so you will see that once a will be done
90:45 - with the process then only b can go so
90:48 - which means he will give him money he
90:51 - will ask for ticket he will give him
90:53 - ticket back and then only a will go okay
90:56 - and then it will be done for b and then
90:59 - it will be done for c so this is called
91:01 - synchronous programming okay
91:03 - and uh when we are dealing with
91:05 - applications like these so we want to
91:08 - have
91:09 - experience like asynchronous programming
91:12 - where user does not want to wait so
91:14 - maybe he can do something else while
91:17 - that thing is happening so that's why we
91:19 - are gonna use a sink here and i'm gonna
91:22 - make a separate course for this so don't
91:24 - worry about that that if you don't
91:26 - understand few parts of it and now what
91:28 - i'm gonna do i'm going to import so we
91:31 - can remove this name card widget and i'm
91:34 - going to import here the http
91:37 - package which we just use and we can
91:40 - import it as http so now we can use this
91:43 - http keyword to you know um call all of
91:47 - its method so as you can see unused
91:49 - import we haven't used it but here in
91:52 - fetch data we are going to use it so
91:54 - http dot get so this is a there are
91:57 - various kind of requests which we can
91:59 - make like get post uh put and delete so
92:03 - those are some of the requests so get
92:05 - means to get something and post means to
92:08 - actually create something there so uh it
92:11 - needs an url so we already have a url so
92:13 - we are giving that url now we want it to
92:16 - be a synchronous so we need to
92:19 - call it await here which means wait for
92:21 - it until it gives you some data right
92:24 - and we will store it to a response which
92:26 - is where um
92:28 - where is the keyword which we can use to
92:31 - store a variable and now once we receive
92:34 - that response
92:35 - we can print it using rest dot body okay
92:39 - so this is what we are going to do and
92:41 - now
92:42 - just
92:43 - uh see this debug console i'm gonna do a
92:46 - hot restart
92:47 - and we got some error that name
92:49 - controller is not defined and something
92:51 - like that okay so i'm gonna just comment
92:54 - this particular line here and we are
92:56 - going back here just clean it out and do
92:59 - a hot restart so you will see that this
93:02 - url will definitely give us some data so
93:05 - this is the data as you can see this is
93:07 - the data which we got okay
93:10 - and as you can see this is again in the
93:12 - json form which i just described you in
93:14 - the beginning with the diagram that this
93:16 - is how we will treat this data okay so
93:19 - now once we got json we need to parse it
93:23 - as well okay so for parsing json parsing
93:26 - we will use something called another
93:28 - library which we which we call dart
93:30 - underscore convert
93:32 - so what it will give you is it will give
93:35 - you a method called json decode so now
93:38 - we have this data
93:39 - and we can use this data with this you
93:42 - know json decode and for decoding json
93:46 - it will give us the map map means it
93:48 - will have a key and value
93:50 - so we need to give it a source okay so
93:54 - by default the data which we are getting
93:56 - so you must have seen this data this is
93:58 - actually a string we need to convert it
94:00 - to a json object so that's why we are
94:02 - using json decode and we will pass it
94:06 - the res dot body so we we will get this
94:10 - data here
94:11 - and now uh we can also in the center
94:14 - here we can also check
94:16 - if this data is not equal to null so we
94:19 - can check if the data
94:22 - is not equal to null then show a
94:25 - container so this question mark is means
94:27 - conditional operator we are applying
94:29 - here and then this column and otherwise
94:32 - if if it is null then in the center what
94:35 - you can do just show a circular progress
94:38 - indicator
94:39 - so which means this which you will see
94:41 - so this is now showing this circular
94:43 - progress indicator which means our data
94:46 - is null as of now okay but uh as you can
94:49 - see we are already receiving some data
94:51 - and let's try to print that data as well
94:54 - so print data and
94:56 - what i'm gonna do i'm gonna do a hot
94:58 - restart again because every time you are
95:01 - doing something in the initiative state
95:03 - you need to a hot restart okay so i'm
95:05 - gonna clean it and i'm going to do a hot
95:08 - restart so that it can print the data
95:10 - and
95:11 - yeah it's printing the data guys and
95:13 - this time you can see this is not a
95:14 - string this is this time it's an object
95:17 - but the problem is that even if it is
95:18 - printing the data our data is still null
95:21 - that's why it is showing this circular
95:23 - progress indicator this is happening
95:25 - because our ui does not know that we got
95:28 - the data somehow we have to tell it that
95:31 - yes we got the data now you need to
95:33 - refresh your or yourself so as i told
95:36 - you in previous video whenever you get
95:38 - this data you have to when you whenever
95:41 - you want to change the ui you have to
95:42 - call set state okay and as soon as i
95:46 - will do it you will see the
95:48 - um the circle is not appearing anymore
95:50 - and now we have got some data that means
95:52 - this blank
95:54 - container if i give it a color then you
95:56 - will see that we actually got the data
95:58 - so let's say we say color dot
96:00 - blue so you will see this blue screen
96:03 - right so this is fine but this is not
96:06 - how we want the data we want the data to
96:08 - be inside the list view so we will use
96:11 - list view dot
96:13 - builder
96:15 - okay and this way what we can do we can
96:18 - specify an item builder so what item
96:22 - builder means is that um how your items
96:25 - will look in the list view and then also
96:28 - we are going to give it an item count
96:30 - okay the total how many items will be
96:33 - there so we can just say data dot length
96:37 - which means this will be our item count
96:40 - whatever length of data we are getting
96:42 - and the for item builder it gives us two
96:44 - things one is the context which is
96:47 - actually i'll make a separate content on
96:50 - this context as well but just for
96:52 - understanding you can say
96:54 - you will see this context with every
96:56 - kind of widget inside this build method
96:58 - as you can see we are getting this
97:00 - context so context is basically
97:02 - something which have the location of
97:05 - your widget okay so it's kind of like
97:07 - every widget has some location in the
97:10 - widget tree so this context is basically
97:13 - aligned to that so basically what
97:15 - happens is that there is
97:16 - three trees which you are working on one
97:18 - is your widget tree then
97:20 - second is elementary and third is the
97:22 - render tree so this elementary is
97:24 - associated with this context and you
97:26 - don't have to go in detail just make
97:28 - sure right now that you understand that
97:30 - this contact is kind of a location of
97:32 - that widget in the widget tree and then
97:34 - it also gives you index that what is the
97:37 - index of
97:39 - you know uh your particular item and
97:42 - if you know that uh you know in
97:45 - programming that everything starts from
97:47 - zero so this index is also starts from
97:50 - zero okay and here we can just say
97:53 - return
97:54 - a list tile okay the same thing which we
97:56 - used in drawer
97:58 - and uh so while style because it has
98:01 - already some inbuilt properties like
98:03 - leading so for leading we can use
98:06 - something and we have title so let's try
98:09 - to use something like title and we can
98:11 - use data
98:13 - and then we can pass the index that for
98:15 - which index we want the data
98:17 - and then we have to specify a key so
98:20 - here you will see that we have multiple
98:21 - keys like album id id title url and
98:25 - thumbnail url so i am going to use this
98:28 - title so i can say
98:30 - title
98:31 - and now you will see this is not a
98:34 - subtitle widget because it's it's uh
98:38 - it's a string okay but title takes a
98:41 - widget so we will just copy it and we
98:43 - will remove this and we will use text
98:45 - here and then we will paste it and now
98:48 - if you will see then we have all the
98:50 - titles here okay and we have the list
98:52 - view and this listview.builder is kind
98:54 - of a recycler view in android so which
98:56 - means it do the caching as well it do
98:59 - the recycling as well so it actually
99:01 - carries all the elements which is
99:03 - visible on the screen if it is not
99:05 - visible then it does not care about that
99:07 - okay this is what we have done right now
99:09 - similarly we will have the subtitle as
99:12 - well and this time we will use something
99:14 - called string interpolation which starts
99:16 - with dollar and we can actually use this
99:19 - curly braces to give variable to it
99:21 - let's say data and then index
99:25 - and this time we can just access the id
99:29 - so now we have the id and you can see 7
99:32 - 8 9 10
99:34 - you can see 4 5 6 7
99:37 - and now why i use is use this in string
99:40 - interpolation so that i can write
99:41 - something like id colon space
99:44 - and now every element have this id 6 7 8
99:48 - 9 10 and all and the last thing is that
99:51 - we want in the leading to use an image
99:54 - so we we will be fetching image from the
99:57 - network so we can use image dot network
100:00 - and for this we can again use data
100:04 - index
100:05 - and this time if you see we have
100:08 - something called a url and thumbnail url
100:11 - so i'm gonna use url so
100:14 - url
100:16 - and now you will see
100:17 - we should see the images yes we can see
100:20 - them
100:21 - and this is looking pretty nice right so
100:23 - this is what we can do and uh this is
100:26 - what we are fetching from the internet
100:28 - so you don't have to worry anymore that
100:30 - how to parse json how to fetch data
100:33 - using these things and this is how we
100:36 - will end this chapter four so chapter
100:38 - four is completed
100:41 - and in the next video we will move to
100:42 - chapter five and we will talk about some
100:45 - interesting stuff like how to make login
100:47 - page how to do navigations and all
100:54 - hey what's up guys and uh we have done a
100:57 - lot of things in the last video we
100:59 - actually saw how to use this package
101:00 - called http to make network calls we
101:03 - also fetched some data from uh you can
101:06 - say a dummy server and then we also saw
101:09 - that how we can use listview.builder to
101:12 - perform some operations also i forgot to
101:14 - tell you one thing in the last video
101:16 - which is that you can also use grid view
101:19 - to represent this although the
101:20 - information like this this this is a
101:23 - very long information so grid view will
101:25 - not make much sense but let me just tell
101:28 - you it's very easy to convert it to a
101:30 - grid view so we could just replace this
101:32 - list view with grid view and then we
101:34 - could use it with grid view dot builder
101:37 - but then we need to add one more extra
101:39 - parameter which is grid delegate so
101:42 - great delegate takes a sliver grid
101:44 - delegates itself a very big topic which
101:47 - we will cover later and but what it
101:50 - takes is sliver grid delegate with fixed
101:52 - cross access count which means how many
101:54 - items you want to show in one row so
101:57 - cross axis count let's say two so two
101:59 - items will be shown as you can see this
102:01 - is now a grid view and if you want to
102:03 - change it to three you can change it and
102:05 - then there will be three items although
102:07 - it looks pretty bad because of the text
102:10 - we are using so we are going to switch
102:12 - back to list view this is just for
102:14 - understanding purposes and uh yeah
102:17 - that's that's what we did now um
102:20 - i'm just gonna go back and i'm going to
102:23 - start a new chapter so i'll create a new
102:26 - branch i will call it dev hashtags
102:28 - chapter five and in this chapter guys
102:30 - what we are going to cover is that how
102:33 - to design a login page as well as how we
102:36 - will do the navigation so for navigation
102:38 - we have just one page as of now home
102:40 - page so we need to design a new page
102:42 - quickly so here in the pages section
102:45 - i'll click a new file i am calling it
102:48 - uh login underscore page dot dart
102:53 - quickly we are here
102:54 - and we are going to import material dot
102:58 - dot and at the same time this is going
103:01 - to be stateless widget as of now so i
103:04 - can call it
103:05 - um maybe let's say a login page so by
103:09 - default you can start with stateless
103:11 - widget and then when you see that you
103:14 - need some kind of state change then you
103:16 - can directly convert it to a stateful
103:18 - widget that's how i will suggest you to
103:20 - proceed and then we can use a scaffold
103:22 - and guys because we cannot see any
103:24 - changes here because we are using home
103:26 - page so we can go to our main door dart
103:29 - here rather than this home page we can
103:31 - make it a login page
103:34 - and then we need to import this login
103:36 - page
103:36 - so that we can see the changes so now we
103:39 - are on the login page we can also remove
103:42 - this debug banner if you want so for
103:44 - that we can just write here debug show
103:47 - check mode banner and we can make it
103:49 - false so you will see that banner is
103:52 - gone and it's not there anymore now we
103:54 - will go back to our login page this is
103:56 - the scaffold here we will again use app
103:59 - bar so a bar widget
104:01 - and then title and in the text part we
104:04 - can just uh tell it let's say a login
104:07 - page
104:09 - okay and this is this is fine this is
104:11 - what we have been seeing okay and in the
104:13 - body what i'm gonna use i am again going
104:15 - to use a single child scroll view why
104:18 - because i want the scrolling to happen
104:21 - if it's a small screen and then i'm
104:23 - going to take a column
104:25 - and inside the column i'm going to take
104:27 - some children like uh you know we
104:31 - could have something like
104:33 - a
104:34 - username or maybe a password so those
104:37 - are the things which we can have but
104:39 - guys i have already told you about text
104:41 - field what if i told you this time uh
104:44 - like something new so this time i'm
104:46 - gonna tell you that we can also use
104:48 - something called a form so form is
104:50 - another widget which can helpful in
104:52 - collecting like a data set okay so let's
104:56 - say if you have username password or
104:58 - maybe you have a registration page and
105:00 - you want to collect all the data and you
105:02 - want to validate that you want to save
105:04 - that so you can use form in that case so
105:07 - let me just tell you how you can um use
105:10 - a form so for that we will convert it to
105:13 - a stateless to stateful widget uh what's
105:15 - the purpose so that we can actually um
105:18 - generate a form key
105:20 - and uh even if you don't want to use it
105:22 - then also we can right now proceed but
105:24 - in future if you want to change
105:27 - show something on your screen the login
105:29 - page then definitely you need it so
105:31 - right now let's let's have
105:33 - a form key
105:35 - so we can say a form key
105:37 - so basically this is a global key okay
105:41 - and this global key actually takes a
105:44 - form state
105:46 - so form state
105:48 - and this is our form key and inside this
105:51 - column we are going to have
105:54 - all the elements so i can wrap it with a
105:57 - form
105:59 - so form form is here now um if you if
106:03 - you'll see if i haven't told you already
106:05 - then every widget takes a key as i told
106:08 - you so key is basically it represent
106:10 - what widget is like i mean this is a
106:13 - widget but how you will identify which
106:16 - widget is this so you can give it a key
106:18 - let's say pk1 it can be a local key
106:20 - object key unique key whatever you want
106:22 - to give it so that framework identifies
106:25 - that which frame which particular widget
106:27 - to rebuild and when okay so we will give
106:30 - it a form key which we have already
106:33 - created and using this form key we can
106:35 - save this form we can validate this a
106:38 - lot of things we can do and now um this
106:41 - time rather than text field if you want
106:43 - to apply the form mechanism then you
106:45 - have to use text form field it's kind of
106:48 - same but it has some
106:50 - more properties like you will see it has
106:53 - on saved which is important and
106:56 - validator which is again important so
106:59 - these are um like it does not have
107:01 - unchanged property or it has actually it
107:05 - has unchanged as well so it is having
107:08 - everything which text field have but it
107:10 - has some extra fields as well so yeah
107:12 - there are a lot of things which maybe
107:14 - you can explore but right now we cannot
107:17 - so text form field is there now we can
107:20 - have different you know uh controllers
107:23 - like we all earlier had so you can say
107:27 - maybe
107:28 - username controller
107:30 - so you can use them if you want
107:32 - and if you want to skip them then also
107:34 - that is fine as of now it is not
107:37 - actually
107:38 - very much
107:39 - needed but then uh it's good to have
107:42 - them
107:43 - and similarly we can have password
107:45 - controller and this will be again text
107:47 - editing controller and as you know we
107:50 - are using dart 2 so we can skip this new
107:53 - keyword so that's why i'm not using this
107:55 - new keyword otherwise it is the same
107:56 - thing and here in this text form field
107:59 - for the controller part i'm going to use
108:02 - username controller and guys this time
108:05 - i'm gonna show you the username is
108:06 - actually
108:08 - having let's say an email id so we can
108:11 - have a keyboard type and text input type
108:14 - dot email
108:16 - address which means the keyboard which
108:19 - it will open if you click here then it
108:21 - will be of type of email as you can see
108:23 - add the rate symbol here so this is what
108:26 - it will do okay so that's that's the
108:27 - advantage and then we can have the
108:30 - decoration as well and i can
108:32 - call it input decoration
108:34 - and here for the hint text i will say
108:38 - enter
108:39 - email
108:40 - okay
108:42 - enter email and then for label text i
108:44 - can say maybe
108:46 - username
108:48 - just for the idea and similarly i am
108:51 - going to copy and paste this another
108:53 - time
108:54 - and this time i am going to call it
108:57 - um password controller
109:00 - so password controller and enter
109:03 - password
109:05 - password
109:07 - and then label text could be
109:09 - password
109:11 - and this is looking good but if you will
109:13 - enter some password um first of all it
109:16 - should not be of type email address so i
109:18 - can just say text
109:19 - so now if you will click here then you
109:22 - will see there is no add the read symbol
109:24 - anymore so that's a good thing and also
109:27 - we don't want to show the password by
109:29 - default so we can off secure this text
109:32 - to true
109:33 - and then you will see we will have only
109:36 - this dot dot dot okay and every time you
109:39 - will do a hot uh hot reload then you
109:42 - will see you will lose every character
109:44 - here okay so if i do hot reload you will
109:46 - see that we lost actually the data in
109:49 - the password so for that we need to
109:51 - actually convert it to a stateful widget
109:54 - so that we don't lose it if you will
109:57 - uh now if you if i write something here
109:59 - if i do a control
110:01 - hot reload then you will see nothing is
110:04 - lost okay so this is again important
110:07 - thing that's why i told you and now it
110:09 - is actually very much stick to this
110:12 - corners so what i'm gonna do i'm gonna
110:14 - give some padding to this column so
110:16 - let's give it a padding of 16
110:19 - so that it does not look that bad
110:21 - it's looking fine now and one more thing
110:24 - we can do guys is uh
110:26 - we can actually
110:28 - make it in the center
110:30 - that's also will be fine and then we can
110:33 - wrap it with a card as well so that it
110:35 - takes the
110:36 - only space which is needed so now we
110:39 - have a card we have text form field
110:41 - and
110:42 - we can also have a button so there can
110:45 - be many kind of button like a flat
110:46 - button a raised button outline button so
110:49 - there are lot of buttons even raw
110:51 - material button in the material design
110:53 - guidelines so we are going to use a
110:55 - raised button which has some kind of
110:56 - elevation so again i told you in the
110:59 - beginning as well that every button has
111:01 - a property called on pressed so what
111:04 - will happen when you will press on it
111:05 - right
111:06 - so this is looking cool and guys um we
111:10 - need to give it a child so let's say
111:12 - text and we can call it sign in
111:16 - okay we can also give some color to this
111:19 - particular button so there is a property
111:22 - called color we can call it let's say
111:24 - color start yellow maybe if it looks
111:27 - fine uh maybe orange orange will look
111:30 - much better
111:31 - so orange
111:32 - and for text color either you can go
111:35 - with black or maybe you can also
111:37 - say text color as
111:40 - white if that looks good to you so sign
111:43 - in is also there we want to give some
111:45 - space as well between them so let's give
111:47 - a space with size box so size box
111:51 - height
111:52 - and then maybe 10
111:53 - um
111:55 - let's see if that looks good even we can
111:57 - give 20 to be honest because
111:59 - we have a lot of space in this screen
112:02 - and then here as well and this is
112:04 - looking good guys um but still it is not
112:07 - in the center because our main axis
112:10 - alignment should be in the center
112:13 - and uh
112:14 - oh it's it's not in the center because
112:16 - uh we are using single child scroll view
112:18 - so that's why it's not in the center if
112:20 - i will remove this then it will already
112:22 - go to the center and if you'll see that
112:25 - so here it is right so we are going to
112:27 - use single child scroll view anyway and
112:30 - uh what i'm gonna show you the another
112:32 - thing is that um
112:34 - we can also
112:36 - wrap this entire stuff so i'm going to
112:38 - copy this single child scroll view and i
112:41 - want a background image okay so in the
112:44 - background i want an image the same
112:46 - image which we used for that purpose we
112:48 - can use a stack so stack means means
112:51 - that this is a widget where there will
112:53 - be items placed one
112:55 - on the top of another okay so here also
112:58 - it takes a children and the first
113:01 - element which we can use is image dot
113:03 - asset and we can say asset slash bg dot
113:08 - jpg this is the same thing which we have
113:09 - already used right
113:11 - and now this is the image but we want it
113:14 - full screen
113:15 - so stack has a property called fit and
113:17 - this time it does not takes a box fit
113:20 - but it takes stack fit so we can say
113:22 - expand so it will expand and then we can
113:26 - call here
113:28 - the fit as
113:30 - box fit dot cover so that it can cover
113:32 - the entire section right but this is
113:35 - looking good but at the same time you
113:37 - will see that this is actually um so if
113:40 - what i can do if i
113:42 - just cop paste all the code again so it
113:45 - looks but you know the background is
113:47 - very visible so it does not look that
113:50 - good right so what we can do to avoid
113:53 - that so for that if we i go back to this
113:56 - image then there is another property
113:59 - called color okay so i can use color i
114:02 - can use colors dot black
114:04 - and then with opacity so i can give it
114:07 - an opacity of 0.7
114:10 - and it is actually like the image is
114:12 - kind of gone so to actually make it just
114:15 - darken we can use something called a
114:17 - blend mode so color blend mode is there
114:19 - and we can say blend mode dot darken so
114:24 - now you will see a darkened version of
114:26 - it and it looks pretty fine to be honest
114:29 - it's not looking that bad at all and
114:31 - then we can just wrap this single child
114:34 - scroll view with another padding so that
114:37 - okay this card is looking better now and
114:40 - if you want you can now this push this
114:42 - to center
114:43 - and this will be going to the centers
114:46 - and this center now we can remove and
114:50 - yeah
114:51 - so this is everything which you can do
114:53 - right and now um
114:56 - what we can do when we press on this
114:58 - sign in button we can go to
115:00 - actually the home page so for that how
115:03 - to do the routing thing we can use a
115:06 - class called navigator okay so here in
115:08 - the unfresh i can say navigator now
115:12 - navigator has many methods like pop pop
115:15 - means going back push means actually
115:17 - pushing on to something on the stack so
115:20 - if you want to understand with our
115:23 - diagram so how we will do that let's
115:25 - let's just see how it works so let's say
115:28 - if
115:29 - you have certain
115:31 - cds so this is let's say
115:33 - this is actually not looking like a cd
115:36 - this is a very bad cd
115:38 - and i'm just gonna remove it so let's
115:41 - say we have a cd like this and on the
115:43 - top office there is another cd and then
115:45 - there is another cd so push means adding
115:49 - one on the top
115:50 - pop means
115:51 - actually
115:52 - removing from the top okay and then pop
115:55 - means removing another one and then pop
115:57 - means removing another one and push
115:59 - means adding another one on the top okay
116:02 - so this is what actually is stack do
116:05 - okay so this is what we are going to do
116:07 - so we are going to push which means we
116:10 - want to go to the next screen so push
116:12 - means going to next screen pop means
116:14 - going back and it takes a route so we
116:17 - can use a material page route
116:20 - okay
116:20 - and this material page route takes a
116:22 - builder builder means
116:24 - it takes a context and then what widget
116:27 - you want to build so we want to actually
116:30 - go to this home page widget so home page
116:33 - we can just say
116:35 - and then we need to import this home
116:37 - page because it does not understand what
116:39 - is home page so we can import
116:41 - library
116:42 - home page dot dot so pages slash home
116:46 - page dot dot so here we are we can
116:48 - remove this main dot dot and now if i
116:50 - will click on this sign in button
116:53 - then it will take us to the home page
116:55 - home page right but if i will press this
116:57 - back button now then we can go back to
117:00 - our home page which we won't be needed
117:03 - maybe in future because once we are
117:06 - like crossing this login page then we
117:08 - don't want to come back until unless
117:10 - someone press the log out button right
117:13 - so um
117:14 - that's fine now what i'm gonna do um i'm
117:17 - gonna show you the use of the form okay
117:20 - so how we could use the form so we could
117:22 - use our form key which we created so
117:25 - form key
117:26 - and we could use the current state from
117:29 - that so current state is what is the
117:31 - state of the form i mean what data you
117:33 - have entered what is its state and then
117:35 - we could say save validate and
117:38 - everything okay so we could say validate
117:41 - uh it could validate validate all the
117:43 - fields for us and we could say save
117:46 - let's say we could say validate what
117:49 - would be what would happen if we will
117:51 - call it like validate so it will go to
117:54 - this text form field and it will check
117:56 - what's happening on the validate so we
117:58 - haven't implemented it so nothing will
118:00 - work so we can just say validator and we
118:04 - can do some operations here okay and it
118:06 - will check that similarly it will go to
118:08 - the second form field and it can check
118:12 - the validator here as well and by
118:14 - comparing all of them then it will
118:17 - see if everything is true or not then
118:19 - only it will give us so validate if you
118:21 - will see it gives us a boolean which
118:23 - means everything was true or not if not
118:26 - then do something if yes then do
118:28 - something else so it's again something
118:30 - which you can right now skip so this is
118:33 - how you will understand that push means
118:35 - going back to going to home page and
118:38 - let's say um
118:40 - in the home page uh let's say we are
118:43 - here
118:44 - and in the action bar which is app bar
118:47 - we can have some actions as well and
118:49 - this time i'm gonna talk about a new
118:51 - widget which is icon button
118:53 - so in the icon button i could say i have
118:56 - an icon so i can use icons library
118:59 - so icons dot let's say log out which
119:03 - means exit to app something like this
119:06 - and then
119:07 - because it's a button so it it is also
119:10 - needed to have an on pressed button
119:13 - okay and this time i could say something
119:15 - like
119:16 - navigator dot pop
119:18 - so that it can go back to that screen so
119:21 - if i press here now
119:23 - it will take me back to the login page
119:26 - and in fact we can again make it more
119:29 - easy like this is looking um
119:31 - like kind of a lot of work so what we
119:34 - can do in the login page we can give it
119:37 - a static const string
119:40 - a route name okay so basically we can
119:43 - name this particular route so we can say
119:46 - let's say slash login so this is our
119:48 - route
119:49 - similarly we can give it to home page
119:51 - but right now we don't need it so in the
119:53 - main dot dot for home we have already
119:56 - specified login page right and then we
119:59 - can have another property which we call
120:01 - it routes and it takes a map so
120:04 - basically we have to say what is the
120:05 - route name and where it will go so our
120:09 - we can use login page
120:11 - dot route name and where it goes we can
120:14 - use context to define that it goes to
120:18 - login page
120:19 - okay
120:20 - similarly we can have the same thing
120:24 - for
120:24 - home page okay so i'm going to just copy
120:28 - this thing from here
120:29 - and i am going to paste it to this
120:32 - particular home page as well
120:35 - and we can call it slash home okay and
120:38 - in the main dot dot we can just copy
120:40 - this
120:41 - and i am doing it with control d by the
120:43 - way so home
120:45 - page
120:46 - and we can say home
120:48 - page
120:50 - and now guys
120:51 - going to login page
120:53 - we can actually
120:54 - so basically if you want to transfer
120:56 - some data from here to this page then in
120:59 - the constructor of home page you can
121:01 - pass some data right but let's say if
121:03 - you don't want to pass a data and if you
121:05 - want to have
121:06 - some simple way to run it some some
121:09 - clean way to write it then we can use
121:11 - something called navigator dot push
121:14 - named which means we can pass the name
121:17 - of that particular route and we can say
121:20 - home page
121:21 - dot route name okay
121:24 - and now this will perform the same thing
121:26 - this is much cleaner and now if i'll
121:28 - click here
121:30 - then also it will go to this particular
121:32 - page now if i will just you know remove
121:35 - this application from the stack
121:38 - and then i'll try to go back
121:40 - then also it will take me to the login
121:42 - screen also it is right now it will not
121:44 - work because um we are using virtual
121:47 - machine so it it does not
121:49 - understand what was there in the last
121:51 - time but if i do a hot restart or maybe
121:53 - if i try to restart this application it
121:56 - will actually start from the login page
121:59 - which we don't want and in the next
122:01 - video we will see that how actually
122:04 - we can logged in the user and whenever
122:07 - he will actually run this application so
122:09 - if i run this application right now
122:12 - so it will launch the login screen but
122:15 - once the user is logged in we don't want
122:17 - to
122:18 - actually take him back to the login
122:21 - screen so that's why we are going to use
122:23 - something called shared preferences in
122:25 - the next video and by the time i'm just
122:28 - gonna show you once if i'll run this
122:30 - application again then you are going to
122:33 - see
122:33 - a login screen okay and not the home
122:36 - screen so every time it will take you to
122:39 - the login screen
122:41 - which we don't want okay so that's
122:43 - that's you might have seen in most of
122:45 - the applications so as you can see we
122:49 - are back to the login page and the next
122:51 - video will definitely
122:52 - check it how we
123:01 - hey guys so uh we have seen a lot of
123:03 - things again and this time we have seen
123:05 - this login page where we have this form
123:08 - where we have username and password and
123:10 - then there is a button which is a raised
123:12 - button and when we click on it it goes
123:14 - to the next screen but our application
123:17 - does not know how to actually store this
123:20 - state which is like you know a
123:23 - persistent state and we can use
123:25 - something like shared preference to
123:27 - store this persistent state in keys and
123:30 - values and this
123:32 - thing will be asynchronous as well so
123:35 - we actually don't know how to use it yet
123:38 - right so for that what we are going to
123:40 - use we are going to go to pub.dev and
123:43 - here i can write you know shared
123:45 - preferences and if you click here then
123:48 - this this is the shared preferences
123:50 - package and this is now um it's not just
123:53 - a package it's actually a plugin so
123:55 - which means
123:56 - there is some code which is written in
123:58 - uh for android it is written maybe it is
124:00 - written in kotlin for ios maybe it is
124:02 - written in objective c or swift
124:04 - similarly on android it can it might be
124:07 - written in java as well and for web it
124:09 - might be having something else let's say
124:12 - javascript and some other things so it
124:15 - uses local storage there so yeah this is
124:17 - actually something which we are going to
124:19 - use and uh for that we have to go to
124:23 - this installing section and then we can
124:25 - add this dependency
124:27 - and guess this is probably the last
124:29 - course of this particular series um and
124:33 - pardon me this is probably the last
124:34 - video of this series and there can be
124:37 - more videos added in the future for sure
124:40 - and the best part is that we will be
124:43 - updating this course regularly so shared
124:46 - preferences 0.5.6 plus
124:49 - one i guess uh let me just see that yeah
124:53 - zero point five point six plus one exit
124:55 - code zero which means it is successful
124:57 - and as i told you whenever you will add
124:59 - a plugin then you have to actually
125:01 - restart your application otherwise you
125:04 - will get an expansion exception like you
125:07 - know platform exception that this is
125:09 - some plug-in missing exception
125:11 - on something like that
125:14 - so now we are running this application
125:15 - again we are having two pages one is the
125:18 - login page another one is the home page
125:20 - and we have added shared preferences now
125:23 - inside the lib we can have something
125:26 - like a new folder and we can call it
125:29 - utils and inside this utils we can have
125:32 - a new file called
125:35 - constants
125:37 - constants dot
125:39 - dot
125:40 - okay
125:41 - and by the time it is running we can
125:43 - have a class here we can call it
125:46 - constants
125:48 - and if it can constants okay this is
125:52 - looking good now inside this class we
125:55 - can have a static reference to our
125:59 - shared preference
126:00 - so shared preference and preference so
126:04 - prefs we can just call it prefs so that
126:07 - we don't want to like you know this is
126:09 - kind of a singleton so if it's a
126:11 - singleton that it we don't want to um
126:14 - create a new instance of it so that's
126:17 - why it's singleton so we can just store
126:19 - a static reference to this and now i
126:22 - will go to my main.cart
126:24 - and this time what i'm gonna do here um
126:28 - here because we want to store it
126:31 - the shared preference and we need to use
126:33 - the await keyword so i'm going to first
126:36 - of all make it a future
126:38 - and then i'm going to add a synchronous
126:41 - uh like this particular keyword here
126:44 - and then we have to do something like uh
126:47 - you know widget
126:49 - binding so there is something called
126:51 - widget flutter binding so
126:54 - it has a method which we have to call
126:56 - ensure initialize that means
126:59 - make sure that everything is initialized
127:01 - and then we can use our constants
127:05 - dot
127:06 - so we need to import it as well dot
127:08 - preps and we can use now await keyword
127:12 - and we can use shared preferences dot
127:14 - get instance so by this we will get the
127:17 - instance of the shared preference
127:18 - whatever instance it is having because
127:20 - it's it's always going to have single
127:23 - instance and that's why it's a singleton
127:25 - class if you'll go here you will see
127:27 - that this is actually a singleton class
127:30 - right
127:31 - so um
127:32 - this makes sense to me now what i'm
127:35 - gonna do
127:36 - uh i'm going to come back here
127:38 - and when i am doing the login page i am
127:42 - going to use
127:43 - before actually doing the navigation i
127:46 - am going to use
127:47 - this constant
127:49 - okay
127:50 - dot
127:52 - uh let me just import it dot prefs dot
127:55 - set and we have set string set int set
127:58 - bool so for this simple uh data types
128:02 - you can use shared preferences so for
128:04 - set bool we will use and the key i'm
128:06 - gonna say is logged in okay
128:09 - and the value i'm gonna say is true that
128:12 - which which means is that logged in is
128:13 - not true
128:15 - so what we can do now if i do if i go to
128:18 - sign in
128:19 - and if i click here what nothing is
128:22 - working uh that's that's weird
128:25 - let's just see why it's not working oh
128:28 - we got an error that this constant dot
128:30 - prefs it does not understand that so
128:32 - which means we have to restart our
128:34 - application because we did some changes
128:36 - in the main dot dot and now if i click
128:39 - on the sign in button then you see i
128:41 - came to this home page right but if i do
128:44 - a hot restart again then it will take me
128:46 - back
128:47 - to the login page which right which i
128:49 - don't want because i just save this uh
128:52 - particular property that if it is logged
128:54 - in which means true then actually i
128:56 - don't want to come back to home screen
128:58 - how we can do that so in the main.dart
129:01 - you can see in the home part we are
129:03 - using login page right so what we will
129:06 - do here we will say
129:09 - um
129:10 - just use my
129:11 - const.prefs
129:13 - and get me the boolean which is
129:17 - which is what is the key logged in okay
129:21 - and if it is true
129:23 - by default it will be false but if it is
129:25 - true
129:26 - then take me to home page
129:29 - okay
129:30 - but if it is false then take me to login
129:33 - page
129:34 - okay so this is after uh this if we say
129:38 - this then now you can see we are back to
129:41 - uh
129:42 - this home page and now even if i do a
129:44 - hot restart then also
129:47 - it will be always having me on the home
129:51 - page but if i press the back button this
129:53 - time
129:54 - then it will just
129:55 - you know remove this app from this stack
129:58 - and that's that's what i always wanted
130:01 - but there's one more thing we can do
130:02 - guys in the login page we can actually
130:05 - replace this okay so rather than push
130:08 - named we can actually replace it so that
130:11 - every time when we so we could say
130:14 - something like push replacement name
130:16 - which means it will be removed from the
130:18 - stack this login page so that there is
130:20 - no chance of coming back to this screen
130:23 - and now we have to actually run it again
130:25 - because
130:27 - and this time when we will run it so
130:29 - because our login is true so it should
130:32 - take us to the home page rather than
130:34 - login page right so let's see how that
130:36 - goes and i i hope and i just don't hope
130:41 - i am sure that it will work
130:43 - like what we want so uh one more thing
130:46 - is guys that uh you can use string
130:48 - integer boolean most of the time and
130:50 - then also you can use a list as well but
130:53 - you have to then use something like json
130:55 - encode to like convert it to a string
130:59 - and then maybe you can save it and this
131:01 - is for small small variables and as you
131:03 - can see we are now on the home page
131:05 - rather than login page and now what you
131:08 - will see that how we can now go back to
131:10 - home page because
131:11 - you just told us that it is not true how
131:14 - to make it false right so in the home
131:16 - page
131:17 - when the person is actually
131:19 - um
131:20 - you know this time this navigator dot
131:23 - pop will not work so when the person
131:25 - let's say is trying to log out so we
131:28 - could say
131:30 - constants
131:32 - dot
131:35 - prefs dot set bool and this time in the
131:39 - key part again i'm gonna say the same
131:42 - key logged in
131:43 - and this time the value i'm gonna give
131:45 - is false
131:47 - so make it false okay
131:49 - and then if now you will press on it
131:51 - because it's it's having this navigator
131:53 - dot pop let me just open the debug
131:55 - console as well if i click here then you
131:57 - will see it will pop this home screen so
132:00 - now we have no screen so that's what we
132:02 - don't want so now we will do a hot
132:04 - restart and this time we will go to
132:06 - login page and now you will fill some
132:09 - data here whatever you want to fill
132:11 - there is no validation as of now and
132:13 - that's not this in the scope of this
132:16 - particular course so now if i press sign
132:18 - in this is fine but now this is actually
132:21 - we are using push replacement so if now
132:23 - you will press back button then it will
132:25 - not take you back to the login screen
132:27 - but if you might have missed this you
132:30 - know push replacement thing then it will
132:32 - take you back to the home screen in ios
132:35 - there is no back button button android
132:37 - there is definitely is so we need to be
132:39 - very careful and rather this rather than
132:42 - this navigator dot pop we can again use
132:44 - navigator dot
132:47 - uh push replacement name okay so that
132:50 - and i'm gonna show you if i'll go to
132:53 - um let's say if i just go to
132:57 - using this push named i go to this login
132:59 - page let's say login
133:01 - page dot route name
133:03 - then um
133:04 - if i will just
133:07 - yeah try to press this login button
133:10 - then it will take us to this
133:12 - login page but if i will press back here
133:15 - then you can see we are back to this
133:18 - home page so that's what we don't want
133:20 - so that's why i told you to use here
133:22 - push replacement named
133:24 - okay and there is a whole course which
133:26 - is coming for this routing thing there
133:29 - will be lot of things which you will be
133:31 - learning so now if i press here
133:33 - then you can see we came back to login
133:35 - page but now if i press this back button
133:38 - then you know we go we went to some
133:41 - other application because it's it's just
133:43 - a debug application so that's what you
133:45 - can do guys and now this is how
133:48 - we will end our
133:50 - this particular
133:51 - course and for the time being and maybe
133:54 - there will be in future there can be
133:56 - more videos added to it so if you are
133:57 - watching it after some time
134:00 - let's say if there are more videos next
134:01 - to it then it's it's a great thing and
134:03 - now we are actually completing chapter
134:05 - five at least for
134:07 - this particular course and also let me
134:09 - know in the comments that what you feel
134:11 - about this course what should be
134:13 - improved so there will be the good part
134:15 - is that if you have paid for this course
134:17 - there will be a lot of improvements
134:18 - happening all around during this course
134:21 - or even in the next courses and i hope
134:24 - that you enjoyed this particular series
134:26 - and course where you learned the
134:28 - essential things which you definitely
134:30 - need to learn about flutter and then now
134:33 - you can move ahead you can make your
134:35 - applications and then you can also take
134:38 - real world um course where we will make
134:41 - a real world application using florida
134:43 - you can take flutter with firebase
134:45 - course which should be um up very soon
134:49 - so yeah thank you so much guys for
134:51 - joining and as you know there is this
134:54 - source code you can access this is
134:56 - already in the notes you can check it
134:58 - out and
134:59 - i hope that there are so many apps which
135:02 - you can build using these practices
135:04 - which i have told you there are many
135:06 - things which can be improved it's not
135:08 - like these things cannot be improved but
135:10 - yeah you will learn it by the time so
135:12 - thanks guys for watching and see in the
135:15 - next
135:22 - welcome back guys and i hope that you
135:24 - have already finished your flutter
135:25 - essential course but because you're a
135:27 - part of mtech viral school so there are
135:29 - some extra classes and in these classes
135:31 - we are going to cover few more awesome
135:33 - stuff about flutter which in case if you
135:36 - want you can skip but if you if you use
135:39 - them then it will make you more
135:40 - productive as a flutter developer so
135:42 - that's why i thought about covering them
135:44 - and in these few videos we will see
135:46 - these awesome things so in the first
135:49 - video we are going to talk about
135:50 - something called a future builder and
135:52 - how it can help us so now what i'm gonna
135:55 - do as you can see i have changed my
135:57 - branch to dev hashtag extra class so
136:00 - this is the branch which we will use for
136:01 - extra classes and before proceeding i am
136:04 - going to have a minor change here so in
136:08 - the lib folder here i am going to create
136:10 - another folder first of all that will be
136:13 - widgets and
136:15 - then i am going to move this drawer to
136:17 - this widgets and then this name card
136:21 - widget as well
136:22 - and now our home page is going to be
136:24 - angry
136:25 - because the import does not work anymore
136:28 - and i am also going to
136:30 - just import a new
136:32 - uh relative path you can see and also
136:35 - guys uh there are notes with every
136:38 - lecture or with every video when you
136:40 - will just slide it down so please make
136:44 - sure that you are also at least watching
136:47 - those notes because it can have some
136:48 - extra information which will definitely
136:51 - help you in your flutter journey so yeah
136:53 - just uh to make sure because you have
136:55 - already finished if you haven't seen
136:57 - those notes then definitely you are
136:59 - missing something uh so now when we are
137:02 - talking about this home page let's uh
137:04 - create another page here and we are
137:07 - going to name it
137:09 - um let's say
137:11 - home
137:12 - page
137:13 - with
137:15 - future builder so fb dot dot okay and
137:18 - i'm going to just paste my home page
137:21 - exactly like that here as well
137:24 - and just going to name it to something
137:27 - else so i'm going to press f2
137:30 - and home page fb which means future
137:32 - builder
137:33 - and
137:34 - home fb
137:36 - let's say
137:37 - and now in the main.dart i'm just going
137:40 - to change it from home page to
137:42 - home page fb so this is just for
137:45 - reference
137:46 - what and how it will look when in case
137:49 - of future builder and one more thing
137:50 - which you might have noticed is that i
137:53 - am using this time the ios simulator
137:55 - just to make sure that everything works
137:57 - on ios as well and now
137:59 - we are here in the home page with
138:01 - fb and as you can see we are using a
138:04 - stateful widget we have this method here
138:07 - fetch data which is a an asynchronous
138:10 - method and which means it returns a
138:13 - future okay although we are not
138:15 - returning it anything here but if we
138:17 - will write something like this then also
138:20 - it means the same thing and if you
138:21 - remember in the main dot dot
138:24 - we actually added this future keyword
138:26 - because we had to use this asynchronous
138:29 - keyword and why because we were waiting
138:32 - for our shared preference to get the
138:34 - instance so that's what what we are
138:36 - doing here and now talking about future
138:39 - builder is guys um when you are dealing
138:41 - with this future or when you are
138:43 - interacting with this future then future
138:45 - builder is going to give you some
138:47 - snapshots and based on your snapshot you
138:50 - can build the ui or the ui will rebuild
138:53 - itself based on those snapshots and then
138:57 - um what will happen we don't have to use
138:59 - this set state manually we don't even
139:01 - have to init our state like we can
139:04 - totally make it a stateless widget in
139:06 - that case so let me just show you how
139:08 - that will work so what i'm going to do
139:10 - here uh this body part i am actually
139:13 - going to remove entirely and rather than
139:16 - anything else i am going to use
139:18 - something called a future builder and
139:20 - now this future builder actually takes
139:22 - few parameters let's say future
139:25 - so future means you have to say
139:28 - what will be the future so future is our
139:30 - this fetch data because it is returning
139:32 - a future so i can simply say here
139:36 - fetch
139:38 - data okay and this is my future and also
139:42 - guys um
139:43 - we can see here that it takes a builder
139:46 - as well so builder is supposed to give
139:49 - us the context as well as the snapshot
139:52 - and then it will be also
139:55 - a sync snapshot as you can see here if
139:58 - you will see builder here then you will
140:00 - see a sync snapshot which we are gonna
140:03 - get with this and then we have to and
140:07 - and there is one more thing which is
140:08 - initial data if you have some initial
140:10 - data you can provide it
140:12 - otherwise you can just leave it like
140:13 - this and now snapshot has many things
140:17 - like if we want to explore it then we
140:19 - will see snapshot has it has this
140:22 - property called has data whether it has
140:24 - data or not then data what is the data
140:27 - and has error whether it has error or
140:29 - not then connection state that what is
140:31 - the status of your connection and if it
140:33 - has any error or required data so these
140:36 - are some properties so i am going to
140:38 - have here a switch case where i am going
140:42 - to check the connection states okay so
140:44 - switch
140:45 - case
140:47 - sorry switch and what we are going to um
140:50 - like
140:51 - check here which will be snapshot dot
140:54 - connection state okay and for every
140:57 - connection state we are going to have
140:59 - some um widget drawing okay so first
141:03 - case will be
141:04 - if the connection state
141:06 - is none which means
141:09 - nothing is happening technically so we
141:11 - will return
141:12 - a center
141:14 - a child and we will say in the text
141:18 - um
141:19 - nothing is fetched
141:22 - nothing is fetched or you can say
141:24 - um fetch something
141:26 - okay
141:27 - because it's actually doing nothing so
141:29 - fetch
141:30 - something so this is kind of an
141:32 - instruction which we are giving and
141:34 - let's say if the case is
141:37 - not this but the case is connection
141:40 - state
141:41 - uh dot active so if it is active then we
141:45 - will do nothing and we will wait for
141:48 - another connection state and that
141:50 - connection state can be waiting so if it
141:52 - is waiting guys so what we can do we can
141:55 - just copy this particular piece of code
141:57 - and we can um just written rather than
142:00 - text we can return circular progress
142:03 - indicator which we actually returned
142:05 - earlier as well so that's what we are
142:07 - going to do and then there can be one
142:11 - more connection state
142:13 - dot let's say
142:15 - done so if everything is done
142:17 - then what we are going to say
142:20 - is let's say if snapshot
142:23 - dot has error if it has error then we
142:26 - can just copy this particular text and
142:30 - can say
142:31 - that some
142:33 - error
142:34 - occurred so all the cases can be covered
142:37 - here with this future builder and if
142:39 - there are no errors here
142:41 - then we can return our listview.builder
142:45 - so we can go to homepage we can copy our
142:48 - listview.builder
142:49 - and
142:51 - let's try to put it here
142:54 - and yes
142:55 - it looks good to go
142:56 - and this is showing that it is a dead
142:58 - code why okay so we have to apply this
143:02 - okay one second guys so we have to apply
143:04 - this outside of this
143:07 - uh has error block
143:09 - okay so now if you will see
143:11 - on the screen here then uh maybe if i do
143:15 - a hot restart okay so now it's not not
143:18 - working as of now as you can see that
143:20 - even if we restarted the application
143:22 - nothing worked because we don't have to
143:24 - actually use this set state here rather
143:27 - we need to return the data which we are
143:29 - getting so return data so that we can
143:31 - return the future so this data is
143:34 - actually
143:35 - giving us a map value so we can also say
143:38 - map here it's optional if you will avoid
143:40 - it it will give some dynamic value
143:42 - and or yeah so it's giving some dynamic
143:45 - value if i see nothing here which means
143:48 - some dynamic value which is actually
143:50 - this data value then you can see we got
143:52 - the same result right and if i do a hot
143:54 - restart now uh you will see that it will
143:57 - show some
143:58 - indicator and then this right and let's
144:01 - say if you want to see some exception if
144:04 - you if let's say by default or by
144:06 - mistake you actually wrote some wrong
144:09 - url then you will see that it will show
144:12 - you let me just do a hot restart
144:14 - so that this
144:16 - url can be reflected and you can see we
144:19 - got some error occurred because this is
144:21 - a wrong url and we cannot get some data
144:24 - and let's say um
144:27 - if how you will see that if connection
144:29 - state is none is actually you can make
144:32 - this future as null
144:34 - and then there will be no connection
144:36 - state so we should see something like
144:38 - fetch something so in that case we can
144:41 - change the icon here
144:43 - okay
144:45 - to refresh and when we are pressing this
144:47 - button then we can actually enable a
144:50 - flag by which you can do a set state and
144:53 - it can fetch some data here okay so we
144:56 - will basically replace this null with
144:58 - the fetch data
145:00 - and uh then we will get some data so
145:03 - this is how future builder works i hope
145:05 - that
145:06 - you got the idea that how it works and
145:08 - it can be very useful right because um
145:11 - you don't have to like you can check
145:13 - things like this you don't have to apply
145:15 - so many effects you don't have to check
145:17 - whether this is something where um if
145:20 - you are if your url is correct or not
145:22 - and guys now because there is no need of
145:26 - using the stateful widget because we are
145:28 - not doing set state anywhere so what you
145:31 - can do you can totally remove everything
145:33 - like we can remove this
145:35 - we can you know remove this
145:38 - and
145:39 - we can in fact
145:40 - remove this variable data from here and
145:43 - we can just say where data
145:45 - and we can also move this url to here
145:49 - and we can make it final as well we're
145:51 - going to make it final earlier as well
145:53 - and now guys what i'm gonna do i'm going
145:55 - to make it a stateless widget
145:58 - and you can just see
146:00 - why stateless widget because it's not
146:02 - like a stateful widget will harm you or
146:04 - something but that is totally fine if um
146:07 - there can be lesser lines of code so
146:10 - that's the only difference and now this
146:11 - is a stateless widget guys and now it's
146:14 - saying data.length okay so one more
146:16 - thing which we
146:18 - had to make right was we missed
146:20 - something that this data is not this
146:23 - data which we are returning from here so
146:26 - we have to replace it with
146:28 - snapshot dot data okay because that is
146:31 - the data actually we were also doing the
146:33 - initiative state so that was that's why
146:35 - it was working otherwise it cannot work
146:38 - now and now we are all done and now you
146:40 - will see that we got the data everything
146:43 - is fine now let's do a hot restart again
146:45 - and this is a stateless widget now and
146:48 - now we are even performing more things
146:50 - like you know we are showing this some
146:52 - error record and
146:54 - showing this fetch something then also
146:56 - if you will see the lines of code then
146:58 - it's just 74 and in this case it was 79
147:02 - but it was not doing that much task
147:04 - right so that is the difference and this
147:07 - is how future builder can help you and
147:09 - it makes code looks much more cleaner
147:12 - and
147:13 - yeah it can be really helpful so i hope
147:15 - you enjoyed this and in the next
147:17 - particular lecture we will talk about
147:19 - stream builder so
147:21 - just keep watching
147:28 - hey guys i hope that you are enjoying
147:30 - the extra classes and we just finished
147:33 - future builder and i hope that you
147:35 - enjoyed that part of the video because
147:37 - that can be really helpful and when you
147:39 - will make some real world applications
147:42 - okay now coming to the next thing is a
147:44 - stream builder so before that let me
147:46 - just commit this and we can say future
147:50 - builder
147:51 - completed
147:53 - and also guys check out the notes as
147:55 - well uh so now um
147:57 - what we are going to do let's so create
147:59 - one more page here and this time we can
148:02 - say
148:03 - home
148:05 - page
148:06 - with
148:07 - sb which means stream builder dot dot
148:10 - and what i'm gonna do i'm going to just
148:12 - copy this entire
148:14 - uh thing from here to this particular
148:17 - place
148:18 - and this time i'm just going to rename
148:20 - it from fb to sb okay which means stream
148:24 - builder
148:25 - and uh yes does this that's most of it
148:29 - and now what i'm gonna do guys rather
148:31 - than this future builder so i'll go to
148:33 - main dot dot first and uh oh i'm going
148:36 - to say this time home page
148:38 - sb okay and rather than this
148:43 - okay
148:43 - future builder i am going to call it a
148:46 - stream builder
148:47 - and what will be the difference so
148:50 - everything remains the same but the only
148:52 - thing is that it takes a stream okay no
148:56 - future
148:57 - so now can i provide fetch data here you
149:00 - might be wondering if yes
149:02 - then why and why stream builder so yes
149:06 - we cannot provide this data so fetch
149:09 - data the purpose of fetch data was to
149:11 - return a future and for that we had
149:13 - future builder but let's say if you're
149:15 - using firebase or maybe your backend is
149:18 - returning stream so what is a stream
149:20 - stream is kind of you can say a flow of
149:23 - data let's say there's a pipe and inside
149:26 - that pipe uh you know you are inserting
149:29 - some kind of data so that's what you can
149:32 - call a stream
149:34 - and uh that's that's what you can call a
149:36 - stream builder and let me just uh
149:38 - demonstrate that to you
149:41 - so you might be wondering what is a
149:43 - stream so basically what is a stream is
149:46 - stream is actually let's say if you have
149:49 - a pipe here okay
149:51 - and this pipe is where you can actually
149:54 - insert some data so it's a flow of data
149:57 - so let's say first
149:58 - it will insert one here
150:01 - then there will be another flow when it
150:03 - will insert two here then another
150:05 - insertion three
150:07 - four
150:08 - five so basically it's what we called
150:11 - syncing in a stream so which means
150:14 - inputting some data so there is a flow
150:16 - of data so it's it's not like at one
150:19 - time there is no like it in future there
150:23 - is
150:24 - all the data coming at one time but in
150:26 - stream the data is so that's that's why
150:29 - it's called a stream so this is
150:31 - basically called syncing and when uh we
150:34 - will output this data then we will call
150:36 - it streaming so yes that's that's uh
150:39 - what stream builder is all about and now
150:42 - um
150:43 - we don't have anything like a stream
150:46 - here so let's make a stream so let's say
150:49 - we can say stream
150:51 - and it can in return maybe a list of
150:54 - integer
150:55 - okay and
150:57 - get stream we can call it and
151:01 - okay what
151:03 - maybe like what we want to return here
151:06 - that's the question now so
151:09 - we can return something like
151:11 - let's say a data
151:13 - and we can use
151:15 - um
151:17 - something like let's say
151:19 - we copy this particular thing from here
151:23 - and we have this method here from i
151:26 - trabel
151:27 - use insert some elements okay
151:29 - so we can have some elements let's say
151:32 - we can say
151:34 - list end
151:35 - i'm gonna just copy it from here
151:38 - and dot
151:40 - generate
151:41 - and i can give some length let's say 20
151:44 - and for every
151:47 - index i can say
151:49 - some item
151:51 - okay one second guys
151:53 - so i can say item
152:03 - item and then the index
152:06 - so
152:07 - maybe something like this yes
152:10 - and then
152:11 - um
152:12 - what's showing me error
152:15 - okay so basically we need integers so
152:18 - why i'm
152:19 - even using it in here so let's call it
152:22 - string and here also let's call it
152:25 - string string
152:27 - so now uh we will return this data here
152:30 - so return data
152:33 - and now rather than returning this or
152:35 - using this fetch data i will say
152:39 - fetch
152:40 - what was that get stream okay so get
152:44 - and stream
152:46 - and that's the only thing which you have
152:48 - to do so string is not a sub type of
152:50 - type int of index that's what it is
152:54 - saying to us and it does not have these
152:57 - properties so guys i'm going to remove
152:59 - these things first
153:01 - and rather than in title
153:04 - i'm just going to say whatever here if
153:06 - the index just show me that and you can
153:09 - see we have item 0
153:11 - to
153:12 - 19 which means 20 items and that's how
153:15 - stream builder kind of works okay if you
153:19 - will provide the null here then also it
153:21 - will say the same thing as you can see
153:24 - fetch something
153:25 - and get stream if you will do a hot
153:28 - restart
153:29 - then it will show you
153:32 - on because our data is already with us
153:35 - all the time so that's why it could not
153:38 - show you this circular progress
153:40 - indicator so this is how you will deal
153:41 - with streams and some in the real world
153:44 - course
153:44 - i'll show you how to actually or even
153:47 - the firebase we will show you that how
153:49 - you can use the streams with stream
153:52 - builders and firebase so i hope you
153:55 - enjoyed this video and i'm going to just
153:57 - complete this thing as stream builder
154:00 - completed so i hope you got the idea
154:02 - guys so it's it's a normal flow of data
154:05 - which you will see with streams
154:07 - and yeah that's it so
154:09 - i hope you enjoyed this video and
154:14 - [Music]
154:17 - you

Cleaned transcript:

hey what's up guys welcome to my flutter essential course and in this particular course we are gonna talk about the essential parts of flutter when you are starting your journey with flutter so if you are learning flutter so this is the first course which i would recommend you to take because there will be all the essential things which you need when you deal with flutter especially if you are someone who has never worked with flirter yet so this is definitely a good to go course for you and as you know that uh the all the courses which are available on empty viral school they are very uh short and concise courses which means you will get the value out of it without wasting your time so that's the idea so guys before we start the flutter development then uh first of all we need to install flutter so we will go to this flutter.dev website as you can see flutter.dev and once you go there so this will be something like this you will click on the get started button which is on right top so i'll click here and as soon as i click here you can you will see these kind of options like windows mac os or linux you can select any of them depending on what operating system you are using so i am using mac os then i can just go here and i can install the flutter version and guys one more thing is that uh right now what you will find here is this stable version which is 1.12.13 hotfix 7 so um this is something which you can use although i am on the developer channel uh so there are developed channels master channel and um beta channel stable channel so there are a lot of channels so every channel has a purpose like master channel is the latest one where you can also see a lot of bugs because it's the latest one then comes the develop um channel which is for developers and it has slightly less bug than on the master channel then comes beta which is again better version and then stable which is supposed to be bug free so this is the situation and here you will follow this guide i'm not gonna show you how to install everything from scratch because that will be a lot of time but you are open to comment if you see any kind of issues and will definitely fix it out and then for windows also you need to make sure that everything is like how it has been explained here you can download either the zip or you can maybe use git to clone this particular repository and one problem which happens with windows user a lot is that they forget to apply this environment variable and then they see that their flutter command is not working so please make sure that you follow the guide entirely and then you can do something like you can go to your terminal and you can try to run flutter command and you will see these options if you are not seeing them that means the flutter is not working properly so once you install it whether you are using windows mac os ubuntu linux or whatever you can definitely go ahead and then you can go to your console and then what you have to write is rather than just flutter if you are sure that you have installed flutter properly then you can run flutter doctor so what flutter doctor will do for you so flutter doctor is basically kind of a doctor which which you normally understand right so it will see all the things like everything is proper or not and what you are missing or what you are not missing so as you can see my android tool chain is ready xcode is ready chrome android studio i have two versions so that's why two android studios intellij idea vs code and i have some connected devices as well and you can see i am on channel dev with version 1.15.2 but because i am doing a lot of experiments as well so that's why i'm using this channel you can use it but then there can be some bugs so i'll suggest you to be unstable only and guys one more thing is that if you want to develop for android i would recommend you to download android studio as well so that it will come with all the necessary things so that there should be some um the android sdk manager there should be the emulator and all that stuff so that you don't feel that kind of problem when you are dealing with android app development and if you want to develop for ios then you need a mac os and then you also need x code for that so that is something which is important and uh for me i'm using vs code but then also if you are gonna use vs code then also i'll just say that install android studio because there is no harm installing that because sometimes it it can be useful so we will definitely talk about that in future as well so now i am done with this part in vs code if you are using vs code if you are not using vs code then also i will suggest you to use vs code so that you can get better maybe build time results and also better development experience so once you are on vs code you have to go to extensions and you have to write flutter extension and you have to install flutter extension from here and then you can also install the dart extension either of them will work but it doesn't matter if you install both of them then if you want snippets then there is uh rash mdr snippets which you can definitely use and this can be pretty handy although you don't necessarily need it and there are some couple of other extensions like pretier and git lens all those things which you can use definitely you can check my vs code video which i'll show you uh which will be there in the notes and uh definitely you can see what extension you can use there now coming to the vs code we will press command shift p and if you are on some other platform let's say windows then you can replace command with control so ctrl shift p and first of all i'm gonna change the toggle mode and then i'm gonna write flutter new project as you can see we have a new project here and we can click here and then we have to give the project name okay so i'm gonna give it awesome underscore app okay and i'm gonna click enter i have to uh select my folder and then this will create my project okay so uh it will take some time to create the project for me and as you can see by default what we will get ios language is swift and android language is android x uh sorry kotlin so and it is supporting android x so that's that's what we get and then uh we are also gonna see uh how this structure is working what what it all means and uh i'm gonna just run this quickly so that you can see what's actually happening with this uh default application which you get and in the meantime what i'm gonna do i'm gonna um i'm gonna show you something so i'm gonna show you this by the time it's running so as you can see i am on my ipad and this is how the structure looks like right as you can see here and uh i'm gonna just explain what this means so the first two is that dot dot tool and dot idea you can ignore these twos and i'm just gonna point them out with black these we don't need actually or we can just ignore it then there is this android folder which contains all the android code which native android developers usually write and if you are like somehow related to android app development or if you know anything about that then you can definitely check it out then there is ios folder which contains all ios related stuff and ios developers can understand that properly and then there is lib folder where we are gonna write all the dart code and then there is mac os for desktop support which we are gonna not use and then there is test which is for testing which we will definitely use in one of our courses and then there is web which contains index html and all that stuff which we again gonna see and uh then what we are going to do we are going to go back here um with this one second guys so we can see this is what we get one two three four five six seven eight this is the counter application which we get by default and then guys one thing also i would like you to install is git so if we go to google and we will write git then the first link which you will get you have to download this so this is a version control system which will help you in keeping your code up to date as well as you can check what you have done in history you can create multiple branches on all that stuff and as i told you this is just not about flutter there are many other things which we will learn during this particular course and other courses as well so these are the things which are actually very useful for developers when doing realworld development so definitely i would suggest you to download this and then we will set up git in next video as well and then we will see this home page properly in the next video so guys this is what we have got this is the counter application which we have got so now again talking about these folders let me just show you what we are getting here so android as i told you there will be all the android related code which you might be familiar or not and similarly for ios and then in the live we will keep all our dart files so basically this is where we are gonna work then mac os is again the same thing like ios and the test which will have all the testing files and for web as you can see there is index.html and all those files and another important file for us is pubspec.eml where we will keep all the dependencies so whatever third party library or plugin we want to use we are going to use it here okay now moving ahead this is something which we have and now what i'm gonna do i'm gonna open my terminal by pressing command j so i'm gonna just say toggle screencast mode and then if you will press command j or you can press ctrl j in windows and for specifically terminal you can press ctrl and tilt so that it will open the terminal and here you can write git and init so basically the purpose of this is creating a local git repository which will track all of your changes so as you will see here this is my um version control symbol if i'll click here then you can see these are all the changes which are needed to be committed so i will commit these changes by writing here a message initial commit which means i am saving it technically to my local repository and then i can push it to my online repository if i want so this is something which is very important because um maybe if you want to go back and see what you have done or maybe you want to uh keep track of your code then this is actually very important now as you can see we are here on the master branch i'm gonna change the branch and i'm gonna name it dev hashtag ch1 which is chapter one this will help us in keeping the track of all the chapters which we are gonna cover and in each chapter there will be some specific detail like there will be for one chapter for networking one chapter four share preferences and one for layout design and all that stuff okay now concentrating on this particular part as you can see we have this default application which is not very friendly at least to understand what actually is happening so i'm gonna delete all this code and what i'm gonna do i'm gonna write void main which you might be familiar with already right so void main is from where everything starts is like similar to what you might have done in your any other objectoriented programming language and we can see we got some error then there is this one method here in flutter which we call run app it acts accepts and particular application so if you see here it takes a widget so right now it cannot understand it so basically it takes three kinds of application which you can give let's say first one will be widgets app second can be um you can say material app okay so we can say material app and third can be q pertino app okay so the difference between them is i'm gonna just show you so if what i do i can import from here widgets dot dart so this will give us widgets app um so i can also show you so this run app if you will see here that it takes an app which is again a widget so everything in flutter is a widget and a widget is a component and for example this is the phone you can see everything here like this sunday fab nine is also a widget these buttons is are also the widget especially this google search bar is a kind of a widget and these all icons in a row is a widget itself so everything is a widget in flutter so if we go back to our application here we can write widgets app so widgets app will work the only problem with widgets app is that it's a little bit low level which means that it will not provide you in build design support by itself so for that you can use something like a material package so we can use material flutter slash material dot dot and rather than this widgets app we can use material app okay and let's say if you are fan of human interface design which is in um ios or mac os so what we can do we can also import um this is cupertino dot art and rather than material app we can write cupertino app cupertino app and this is something which you might have seen in whatsapp that its android application is little diff or different than its ios application which i don't know if you have seen it but yes that's that's what people do sometimes as a brand then they show different kind of ui depending on the operating system so that's also you can do but for the simplicity and for um a universal design we are gonna use material dot dot at least for now and then in future we will also discuss the cupertino design so i'm gonna use here material app and then i'm gonna use something like uh you can say here we have few properties like home so i'm gonna give it a home widget which is let's say a container itself so a container with a color um so color so what is what this material is giving is giving us is like um there are a lot of widget which it gives and then it gives us a colors library which we can use to import any of this color here so i can say like let's say i want to use a purple color so i can just search here and a lot of colors so i can write um purple purple so as you can see now nothing is reflected here because we have two buttons here which are very important one is this the flash button which is hot reload and then this green button which is hot restart so whenever you do some changes in material app and if that is a part of run app then you have to do a hot restart and then we can see the changes that everything is purple now right and then what i'm gonna do here i'm gonna give it a child as well so child let's say and the child can be um a text widget okay so a text and then i can show some say something like hi flutter um and you will see here that there should be some flutter but it is it's like somewhere invisible or we are not able to see it anywhere and that's the problem with this so we need to say what color it is and we need to specify it more so right now it will it will not reflect because we haven't done hot restart as well so that also we need to do so once i will do hot restart then you will see high flutter on the screen the problem is that it is not looking very great and you might have heard me saying that material uh package if we will use then it will give us better design but it's not looking good so what we can do we can create a new widget from here which is a stateless widget so if you will write stl then it will give you a shortcut to write this widget let's say home page okay and we are gonna copy this container code from here and we will paste it here and everywhere you need to see that it will either extend stateless widget or stateful widget i'll show you the difference what is the difference between them then it will also override a build method so this extends means that it is inherited something so it's like parent and child relationship so you are as a child must have inherited few things from your parents so that is like this home page is also inheriting this build method from its parent and then some other things as well and overriding it means that whatever they have provided you will override it with your own like they have given you a wallet there is some kind of um you know thing that every parent will give their side a wallet and then they can override it that what they want to enter in that wallet or what they want to keep in that wallet so that's up to you so this is the same thing we have done now rather than this container we will call it home page and once we do that and as you can see now if i do a hot restart everything will be remaining the same but this time if i will change it to high flutter to high flutter um app then you will see we can see the changes quickly as soon as i press command s or i as soon as i press this hot reload so once you are out of this run app method then hot reload will start working so that's also what you can do and now it's again still not looking so convincing so we are gonna use another widget which we can call scaffold so scaffold is basically kind of a structure which has some basic widgets like an app bar so app bar if you will over here then it will show you that it takes a preferred size widget which can be app bar itself so app bar widget we can use then it has many properties as you can see and we are gonna use title property and as you can see on the right hand side our app is looking much better now and then we can say text and here i can say let's say awesome app and as you can see this is looking much much better now i want to change its color from blue to something like a purple so inside this material app we will come back and here there is something called theme and which takes a theme data so i'm gonna select it and i'm gonna say that i want the theme data and inside that there is many properties like brightness font family canvas color accent color card color and lot more things i'm gonna use primary swatch which is a collection of colors which we can use so let's say if i say colors dot red if i give red color then it will take some combination of colors depending on red and it will give it to entire application so i'm gonna say here purple which means it will give purple to all my colors like purple as a primary color and other colors which is which suits best with purple and now i'm gonna do heart restart because i am doing changes inside the run app method so you need to do hot restart and now you can see we got purple which is looking much better and now in the body part of it we can use the same container which we were using earlier so container and in the child we can say text and inside the text we can say hi flutter so as soon as i will say it you can see high flutter here and this is looking great right so in the next video we will talk about more widgets and what are the differences between them how to use um these widgets and where to use which widget so see hey guys so uh now we are gonna see other things as well like we have seen how to create our application what are what are uh like themes which are available or colors which are available as well as we saw is k fold and this stateless widget so stateless widget is something which is not supposed to change which means whatever you are seeing on screen let's say you are seeing this high floater so this is always going to be high flutter it's not going to change which means it's stateless so any widget there is many um components which you will see in particular series and every kind of component is a widget as i already told you now before proceeding guys we are gonna commit these changes that our chapter one is completed you can write something like this and then i'm gonna press this right key done key uh to commit this and then i'm gonna go here and i'm gonna create a new branch which i'm gonna say dev hashtag ch2 which means chapter two so these these are some chapters which just for tracking so you can definitely visit this github repository and then you can see the branches to understand it once you are watching this course on my school so this is what you have to do now guys we will explore more widgets and now uh the most powerful widget which we are gonna explore is container itself so container is kind of uh you can say a box so if you are familiar with html then it's something which is very similar to div so this is what we have here in as container so inside this body part you can see this container right so now we are gonna play with it and we will let's see what we can do with this so i'm gonna just remove this child as of now and then um we are gonna give some color to this container so let's give it a color let's say red so colors dot red and as you can see this time it is taking the entire screen and that's not something which i want i want a box here okay a small box so what i can do i can give a width to it let's say 100 pixels so it's a density pixel which is dp and similarly we will give it a height of 100 and then you can see we have a box here right and the red color box now we want it to be in the center so we can use another widget here which we can just so you will come to this container and you will press command dot or control dot or you can also press this bulb here which you will see in vs code and if you are using android studio then you can press alt enter so if i click here then there are many options like wrap with widget wrap with center wrap with column so either you can use wrap with widget and then you can write center or you can directly wrap it with center and now if i'll save it then you can see in the center of this screen this is the box and similarly it has many other features which we get from container so now i'm gonna also write the child again and this time i'm gonna say i am a box so now you can see we have i am a box now it is like very much um touching the corner of the container so i don't want that for that i have some other properties of containers which has this padding so padding means that it will give it will compress that widget and it will provide some space so there is there are two properties one is margin and one is padding margin means just left hand right or top or bottom adjustment but padding means is compressing them so you will see the difference itself so if you will use padding then it will work in this case for i am a box or text and if you will use margin then it won't work so for padding if you see what it takes it takes a edge in sets geometry so i'm gonna use a constant edge in sets and then it has many properties or many methods i should say so these are the methods like all to give that padding to entire uh corners let's say left right top bottom from everywhere and only which means that for specific let's say just for left symmetric which means horizontal or vertical and lt rb which means left top right bottom so anything you can decide so i'm gonna select all and i'm gonna give a padding of eight and now you will see that i am a box got some padding right and if if i would have used margin here then you might have seen no difference and that's because margin is just for adjustment between those components so that's the difference so padding we are going to use now there are other properties as you can see here alignment okay so alignment means where you want to place this child okay where you want to align it so we can use something called alignment dot let's say we want to show it in the center then you will see i am a box in the center and let's say if you want to see it in the bottom right then you can just say bottom right and you will see it here in the bottom right so this is the purpose of alignment there are a lot of enums which you can use bottom right bottom left um top left top right so let's say top left so you'll see it in the top left so these are the things which you can do then guys you might be wondering what is this child so every container or everything has either one child or many children so basically if you say that there is one component so let's say row okay so row is basically uh there will be so if you are making a row there will be one element or more than one so in that case there will always be children let's say list view row column and like these kind of widgets where it is container sized box or small small components which can have only one child so then you will use child so i'm gonna explain it more in the future as well so don't worry if you don't understand something and then the most important property of container which is gonna be very useful for you is one is constraints which which is kind of not very useful until unless you go into deep um like ui designs otherwise the most important which i'm gonna talk about is decoration by which you can do a lot of things with this container you can provide gradients you can give shapes you can give images whatever you want to do so this decoration takes a box decoration so box decoration i'm gonna say and now you can see it has many properties like image color and gradient and all that stuff now there is some error and the error is saying that something related to color and the problem is guys so one you once you want to decorate something which means you have already given it color okay and this box decoration also have a color property as you can see so these will clash so either you can give a color here or you can use a box decoration so because we are using box decoration so i'm gonna remove this color from here and the error will be gone but we are losing our color so we will come here inside this box decoration vivilita will give the color and now the error is also gone and we also got our color back now we have a lot of other things like we can give a border radius we can give a shape so for shape it takes a box shape so we can say box shape dot circle or rectangle so we can select circle and you will see we will see this kind of uh circle and it is going beyond here like the circle and the text is text is not exactly inside the circle so container has some clip behavior as well so how you want to clip it so you can say clip hard edge non anti alias so make sure you are using anti alias so that you will not see that part of like now you can see the text is not here outside this particular container so that's what you can do there is more options like none which means you will see the text and then there is antialias with save layer which is kind of expensive so i will say again not to use it and then there is hard edge so just ignore them you can just use empty alias in most of the cases to get uh your shapes properly so i'm gonna just remove it right now and rather than this shape dot circle we want to give some rounded corners right so it's it's like there is no corner this is this hard edge corner so rounded corner we can use border radius and we can say border radius dot what a radius dot circular and let's give a radius of 10 from all the sides and now you can see we have a border radius and this is looking much better right and then guys um we can also give shadow to this so um for that you can see we have like you can give border as well you can give box shadows so for box shadow it takes an array so we can say box shadow and then we can say color so i want to use gray color and then um we can give a blur radius let's say five so now you will see something like a shadow here as you can see there's a slight shadow if i increase the radius to 10 then you will see a better version of it of this shadow now similarly as i told you you can apply gradients so um here if i go to this uh below border radius then there is something called gradient there can be many kind of gradient like linear gradient radial gradient sweep gradient so um i'm gonna use linear gradient because that's what we are gonna use most of the time it asks for colors or begin or a stops point so i'm gonna give it some colors so first color let's say we will give it something like a pink and oh it's looking so bad because at least we need two colors and second colors i'm gonna give it something like a yellow maybe let's try this and now and you can see this is how a gradient will look like right and it's looking so good right and now guys i'm gonna explain uh let's do one thing uh let's put this text in the center so we will use this alignment to center it and it's looking much better and now we will move to this text so this text is again a very important widget because everywhere you are gonna use text so you should know all its properties so it has many properties like you can align the text you can give how many lines this text can take uh what is soft wrap what uh what you want to do for overflow cases but most important is this style which we are gonna use it takes a text style so everything is here inside this text i like font size font family and the font weight so i'm gonna give it a font size of 20 let's say and as soon as i will give it 20 you can see it goes like this i want to center them still so um there is a text property which is text align and can use them and i can say text line dot center and you will see the box i am a box is now in center now if you want you can also change the color of the text so let's say i want to say colors dot white so i can give it white and then you can see this is the white color now i want to make it bold so i can say font weight dot bold and use commas to just move it to the next line so that looks good now it is bold as well so yeah these are some of the most common kind of you know you can use letters heights and you know decoration also like you want to have underline in this particular text word spacing so lot of other stuff but these are some common ones which i just showed you and in the next video i'm gonna talk about most uh important widgets like these and let's see in the next hey guys so uh we have seen a container which is kind of a very useful widget a text as well now moving ahead let's talk about some more widgets and we will see what else can be very useful for us and what else we should definitely consider using so what i'm gonna do i'm gonna first of all um remove these bulky container like this decoration i don't want right now so i will remove it even i will remove the child as well so let's remove all of this so that it can be very simple and then we will give it back the color and so we can say color start red and it looks good now i'm also gonna remove this center from this so remove this widget or if you want you can just place it like this so it's totally your call so let's place it as of now we will then remove it um there is this container but let's say i want three containers in a row so how i will place this i so as you can see the center can have only one child so how i will have three child so basically for that we can use something called a con a row or a column so because we want to place it horizontally so we will use a row here and as you can see it takes children rather than a child because it can have one or maybe more than one elements or maybe zero it's totally your calls so first we will have this container which i just copied and pasted and by default it came to this you know left hand side and then i will have second container which will come to right of it and then i will have third container which will go again on the other side and then i'm gonna just change the color of second to yellow and third to green to differentiate between them so that you can understand row properly and so it looks like a traffic light but yeah it's looking very ugly although so that is what we have got now now what if you want it to be placed in the center right so row has a property a very good property which we can say main axis alignment for row so if it is a row the main axis would be the horizontal axis as you can see this cursor is uh dragging in the horizontal so this is its main axis and then the cross axis will be the vertical axis okay so this vertical axis is cross axis for row and main axis is this horizontal axis but for column the main axis is the vertical axis and the cross axis the horizontal axis so that is the difference so now i'm gonna say um like say that main axis alignment dot center to center these elements and it looks good now you can tell me that i just want red on the left hand side to the corner and right hand side i want the green one so you can just replace center with space between and you will see the difference that this is on the left hand side this is on the right hand side and now you might see that okay it is touching the corner i just don't want to touch the corner a little bit space from here so in that case you can use something called space around which will give a little space from here but then you will see that this space is not evenly mapped with this space right in that case you can use something called space evenly which will distribute them with like equal spaces as you can see this is space and this space is kind of same right so these are the things which you can do with this and then um if you want there is start and so if you want to push it into the end so this is also you can do so now i'm gonna go with space evenly which looks good to me and because we have used this center um in the top of this particular widget tree so which means that's why it is in center if i will remove this from here it will go on the top so as you can see here because this is the area which it is taking right so this this will only take the space which it needs and then there is another property which is cross axis alignment like on the cross axis as i told you this will be the vertical axis for row so you can say cross axis alignment dot center then it will take it to the center but because this is just a container so what i'll do i'll also wrap this row with another widget which is a container widget and this time i will give it a color okay so this container has a color let's say and i'm gonna say it color start teal just for the sake of giving it a color and you can see the container is taking teal color and that size of it is very much limited to these boxes okay so that's why the center of cross axial alignment is depending on this container if i let's say if i give it a height let's say 500 then you will see now the container is like 500 height but this cross access alignment dot center is working which means it these boxes are in the center right if i change this this time from center to let's say um start then it will go on the top again and if i will say and then it will come on the last portion of it right and similarly we can um do changes with the main axis alignment that's what we do right so these are the things again guys very important and then we will go back to center let's say and now what i want to do i want to stretch them so i if i say stretch then it will take the entire column right so this is what you can do now let's go back to center and now replace this row with column and you will see the same things but the difference is that now it's a column so main axis alignment is actually the vertical alignment and cross axis alignment is actually the uh this horizontal alignment so now because we are giving height to 500 it took the entire height but actually it does not care about the width so height is 500 but width is not 500 because it's a column okay so there is also one property that main exercise what you want the main axis size to be so either it can be minimum or maximum so but this maximum again depends on the parent that what parent provides you the maximum size so as we know the container is not providing any maximum size we can definitely have constraints there but right now it's actually minimum so now uh rather than height if let's say i say width then you will see that it takes entire width and entire height and with 500 width or whatever width you want to say let's say 300 then you will see it takes 300 and main accessories space evenly which means the vertical alignment is space evenly if i will change it to a space between then you will see it will go to the corner of vertical alignment and then cross axis alignment it is actually now row or you can say horizontally whatever you can see now if i say stretch then it will stretch horizontally and that's the difference between rows and columns so these are very powerful and very important widgets which you are gonna use everywhere so please keep in mind that this is something which we are going to use a lot in the next video we will talk about drawer and floating action buttons and all that stuff so we have actually covered a lot so far and if you will see now we have now these giant container with so many you know components inside it like so many containers and this is looking very ugly to be honest so i'm just gonna give it again a row and then i'm gonna give it a height which can be again hundred and we don't actually care a lot about it and uh so that's why we are gonna finish this chapter with these columns and rows so i'm gonna go here and i can say chapter 2 completed and now we will start chapter 3 where we will talk about drawer and how to create beautiful designs so uh i'm gonna come here and i'm gonna create a new branch i'm gonna call it dev hashtag ch3 and this is our chapter number three now um guys i'm actually going to remove this child from here because it's actually looking very bad and i'm happy with this thing with hundred and uh let's wrap it in the center now let's talk about how we can have a drawer here okay and also floating action button so first of all let's cover the floating action button because that is very easy to do in flutter so here after a body because i told you that scaffold provides you an entire structure it has which has a lot of components and that's what we are gonna see so we have seen a bar we have seen body and if you see there are a lot more widgets so we are going to use floating action button and it takes a widget so what widget would be best for it that will be again a floating action button itself so floating action button as you can see now we have a floating action button here okay and it came with an animation which looks good now every button in floater needs to be implemented it's on pressed which means that if that's a button definitely you're gonna press on it if you're not gonna press on it then it should not be a button right so by default it is null but we can do like it's it takes a void function so we can have two braces like this with um the the brackets as well so which means it's an empty implementation we will do something in future okay and then it takes a child so for child you can say i'm gonna give it an icon so icon is again a widget and similarly to colors we have icons library from which we can pick any material design icon let's say i'm gonna use edit and you can see this has taken the color to white itself i haven't specified but flutter understands the size and color as well so most of the widgets understand what kind of child they want and what should be the size and color of it so this is the floating action button now again there are other properties like how much elevation you want to give what should be the background color what should be the shape hero tag and if you want this uh you know button to be a little smaller then you can say mini is equal to true and then it will be a smaller but usually it's a normal so we will remove this property and or we can do it like make it false autofocus hover color so these are the few things which maybe you will use with flutter for web but right now we don't need it so i'm gonna remove it then also guys there is one more property for floating action button which is its location and there is one animator as well but that's we are not gonna use right now but floating button location we can use floating button location dot what location you want to use if you want to attach it with center with a bottom bar or something it will come here and it will be attached but if you want to make it little floatable so it will not attach to any bottom bar and it will float it will have some margin and then similarly you can do it for let's say if you want on the top so it will say start top it will go on the top and similarly you can maybe undock and float so it will go again on the same place so for the simplicity and for the betterment of design i'm gonna remove it again this was just to explain you now we are gonna quickly make a drawer and how difficult it can be so with body there is another property which we can say let's say draw and it takes a widget which is again a very interesting widget and the name is drawer so yeah that's that's only what you have to do now we have a drawer and if you click on it we see this white screen which is um i don't know what kind of screen it is it's it's it's it's having nothing okay now we are gonna make a very good drawer so inside this drawer you will see what properties it takes so it has elevation semantic label child so we are gonna use this child and guys um as you will see that with every widget you will see this property which is this key property so you can specify keys to every widget it's totally your choice and there can be many kinds of keys let's say local key unique key object key the purpose of keys is that it helps the framework in understanding that what widgets are needs to be again repainted or redrawn so it helps that if you don't provide a key then framework itself provides a key to these widgets and it helps it in actually redrawing everything so right now we are not gonna discuss it but in future we will definitely focus on keys and how to use them in some other course so because it's just essential so you probably don't need it right now so in drawer there is something called child and here we are going to use a list view and in the future videos we will um talk about list view dot builder which is kind of a recycler view you can say we will also recycle the elements but right now we just want to use a list view and inside the list view we again have a children because as you as i told you that list view column rows must have children's so now in this list view the first thing which i want is some kind of a drawer header so drawer header is definitely a widget here it takes a child and in the child i can say text hi i am a drawer and yes we got the drawer guys it's looking good not the best but yes it's looking fine and uh okay that's that's what we have right we can also give it some kind of decoration so um i'm i'm gonna use a box decoration and then i can give it a color so let's say i'm gonna give it same color let's say purple and guys it's looking good but you know there is this problem that the upper part of it is having this gray background because the list view by default gives some padding so we want to remove that padding so we will use this padding and we will say const edge in sets dot all and we will give the padding to zero and now you will see this is looking much better right so now we have the drawer ready now we want some items so hey here after drawer because it's it takes children so we can have other elements our other widgets so another very useful widget with list view is list tile so we are gonna use list style so list style gives us a lot of things like it gives a leading property where we can have something on the left hand side of this particular uh portion so we can use something let's say an icon and icons dot person then you will see we have icon on the left hand side is looking very good now there is one more property called title we can give it a title so let's say text and i'll i'll give it my name let's say pawan kumar and now we have a title as well and we can have a subtitle as well guys so for subtitle we can say let's say developer and yes we have a subtitle but then we have a trailing icon as well or trailing widget as well and everything takes a widget so it's not like you have to just give it an icon you can give anything here or text or whatever but i am gonna give it an icon and this time i'm gonna give it let's say our edit icon so an edit icon is added here and this is looking very good i'm gonna just copy it and i'm gonna paste it so another here and this time i will replace it with email and i'm gonna say pavan kumar um i will say email and i can say pawan or maybe tech viral at the rate gmail.com so these are the things which you can do and this time now our try uh draw looks good but there is slightly one improvement we can do this straw header is not looking so good and if you have seen gmail the draw look good with a picture as well and lot of other details so we can definitely do that here as well so what i'm gonna do i'm gonna remove this drawer header there is something called user account drawer header which we are gonna use and it is basically for applications like gmail where you can say account name account email so for account name you can say it takes a widget so we can give it a widget let's say text and i can again say pawan kumar and you will see pawan kumar is coming we haven't specified the location but it knows where it should show it and then for the account email again text and i'm gonna just say i'm tech wireless gmail.com it looks good right really good now i also want to add a picture so i can have this current account picture which looks good and the current account picture takes a widget so i can use guys something like um so first of all i'll go to google i'll go to unsplash.com from here i can get some free images so i'm gonna say a guy or guy let's say any random guy we can take and we can take his picture so let's copy the uh let's open this image in a new tab and copy the address and guys this time i'm gonna use something called a image widget and dot then there is more methods to it like asset if you are using an image from your folder or application inside your app or file if you want to use your phone and you want to access a file then network if you want to download it from some network from a url and memory if you want to take it from the memory so we want to use it from network so we will use network and i will paste the url here and you will see we have this image here right this is looking good but it would look much better if we will use it in a circular um component right or widget so i'm gonna just remove this and i'm gonna use a circle avatar okay and actually circle avatar has a child where i can actually use the same image but circle avatar if we will provide even the child then also it will not give a circular image why because circle after does not work like that but definitely it has something to offer and that something is i'm just gonna show you so we got the circle there is one more property which is background image there is radius foreground color and all that but we want to use this background image which which takes an image provider so like um we got we saw the image widget which has methods like asset network similarly we have image providers let's say asset image okay and network image so these are the image providers which we can use and here now if i will paste this url then you will see a circular image here and this is looking much better right so now we have a full fledged uh drawer which looks kind of really good and especially we can add more things like on details pressed other account pictures and even if you want to tap on this list tiles then there is an ontap property which you can definitely use and once you click here you can perform some operations so that's also you can use so if you click here you can see we got some ripple effect but with email because we haven't implemented on depth we don't get any effect so yeah this this is the floating action button and drawer in the next video we will talk about more images like how we can access images from our application we will also talk about text fields and other things in the next hey guys so uh we have implemented the drawer which is looking very nice and also we have the floating action button but this home screen this body part is looking very very bad and then we want to you know try to add something else here and let's see what we can do with this part also we are going to cover the stateful widget which we haven't covered yet so what i'm gonna do i'm gonna go back to this particular screen i'm gonna search coding and i'm gonna like have any image from here or there and i'm gonna just paste it here so you can download any image and you can paste it so i have already one image so in this particular root directory i'm going to create a new folder as you can see in this test is basically giving me some error that there is no my app so i'm gonna replace it with home page so that it does not give me any kind of error and i want to import this so i can just say command dot against it it's it's not going to take it because um there's something wrong with this okay so we just remove that uh problem and now uh we want to create a new folder for images so i'm gonna say a new folder and i'm going to name it assets so as sets so you can see this is my new folder assets it is blank now i am going to um this pop spec dot ml but before that let's add some image here so what i'm gonna do i'm gonna take one image and i'm gonna drop it here so this is bg dot jpg this is one image and now we have to tell our application that there are images in one folder so now we will go to our pub spec dot eml and here you will see we have all the dependencies like cupert you know icons some dev dependencies saying that uses material design or design which is true and here we have some uh commented code which is assets we are gonna just uncommented and for assets it is using images folder but you can use any name but i'm using assets so i'm gonna say assets and then slash and i'm gonna remove everything which means that every image inside the asset folder we want to use that so we have just one image but this slash means all the images or all the assets inside your assets folder so that's being done now coming back to main door dot what i'm gonna do i'm just going to remove this center and container and if you want you can just keep that center just remove the container and we are going to talk about another widget which is a card widget which we will see a lot so i can use a card widget so the purpose of card widget is having a card right which can have elevation and all that and right now you can see that there is no card which is visible and also i want to change the background color of this k fold so escape for it has a property called background color and let's give it a grayish color gray of 200 so you can also specify the number here to give a slightly you know different variant of that color and now we have this card and now card also have elevation shape clip behavior and all that property i'm gonna use child and guys i'm gonna use a column here why because you know in column i can have many elements vertically aligned so it takes a children so first element i want is image dot asset this time i'm not going to fetch the image from network but from asset which means from my folders and i just pasted one image here and the name of this image is in first of all it is inside assets so assets slash and now we have to give the image name which is bg.jpg and now this is the image which we can see okay and similarly if let's say you want to specify if this image how it fits what is the width and height you can definitely do that let's say if width is 100 so you can see the width is there but um it's looking very ugly that's the different thing and if you want to give some height let's say 100 then also you can see we have this width and height now um there is one more property fit and you can give box fit so whether it is contained cover so if i say contain then you will see um there is no such difference right now but you will see some differences in different aspect ratios but if i say fill then you will see it will fill it it will basically stretch it so there will be no gaps and covers container cover looks almost the same in this particular image only it's not the same although so cover is like it will cover it but it will not stretch it right so that's that's a good thing so cover is mostly the best option or maybe contain fit width then it will fit the width and if i'll say fit height um then it will fit the height and yeah that's that those are the things which you can do so right now i'm just gonna remove all of them and it it looks like this very nice okay and this is the image which we have now um and one thing is that i still can see the card but it's not looking that great if you'll see we have a card here which is taking the entire screen okay so what i'm gonna do uh this card i'm gonna wrap it with padding and i'm gonna give some padding let's say 16 so that at least we can see the card and now we can see the card it's looking good and then i'm gonna talk about another widget which is a size box widget so size box widget is what guys it can use to have a box a particular box with some size okay and if you don't want to have anything then you can also use it for spacing padding also can be used but padding looks a little bit uglier because it you need to wrap with it but size box is very clean and here you can just say height let's say 20 pixels so it will give a height after image and then we can have a text let's say text and i can say change my name here so very simple example change my name and uh we are gonna change this name okay so that's why i change my name we can give some styling here let's say text style we can give a font size let's say uh 25 something like that it looks good uh let's give it a font weight as bold okay this is looking good now guys um there is one more thing which we can we are going to use and that is a text field so text field is an edit text where we can pre we can enter some text so text field is here i'm gonna use that and text field also have many properties like controller which can be used to control this text field then where there is style again text style and all that things which we have already seen then the keyboard type like what kind of keyboard you want you want text email or number keyboard so all of those things you can specify then auto correct auto focus on tap on submitter cursor color so lot of properties we are going to use decoration but this time it is not taking input decoration but it oh sorry it's not taking box decoration but it is taking input decoration so we are going to use input decoration and inside the input decoration there is border and all that stuff you can specify but first i want to specify hint text now this is not taking a text widget but it is just taking a string so i can say enter some text okay and uh yeah it's looking good right it's looking really nice and i want to give it a material design feel so i'm gonna say um something like what else um i'm gonna give it a label as well so label text we can say name so now if you will click here you can see this is looking good right and uh guys one one more thing we can do here is we can do some padding as well right so with this text and we want some uh distance between them as well so we will use size box to give some more distance and then we will give the padding as well so we can have some padding like 8 and maybe 16 in fact it will look much better yes it looks much better and now if i click here you can see some overflow pixel issues which means if my keyboard is coming up this text field cannot move upwards which means if it was scrollable then it could move upward and as you can see our floating action button is also moving upward so that could be better but before that we can also give one more design to it so there is a border property as well so for border we can give it outline border outline input border which will make it look much more better yeah it's looking much better but we want to get rid of this particular you know problem which is this overflow so we can go to this column or we can in fact go to this entire card and we can wrap it with another widget which is single child scroll view which means it's a scroll view which can be scrollable and it can have just one single child and now we are having this scroll view if i click here then it just goes on the upside right and it is scrolling but it's not giving that error anymore and our card size is also now making more sense so yeah single child scroll view for scrolling and now what i want whatever data i write here okay if i press this button this button this edit button let me just change it the icon to let's say something like send and if i just click here then this change my name text should change okay so basically right now if you will see my home page then it's a stateless widget right so stateless widget as i told you is not supposed to change in its entire lifetime so we need to first of all convert it to a stateful widget so basically we want to change this change my name depending on this text field now this text field is itself a stateful widget why because every time you write something here things change right so whenever there is some change then you need to make sure that that's a stateful widget so if you will go inside text field if you will press command click or f12 then you will see that text field widget is extending a stateful widget so that is the thing so now how we can convert this home page to a stateless widget we can click on this bulb here and it will say convert class to a mix in or convert to stateful widget i'm gonna click here and it will convert it so now we will have two classes basically one is home page which extends stateful widget and then another is home page state which extends state and we will work with this state state is like what is the like current situation of this particular page so like if you are a human if you are a person what can be your state whether you are sitting where you are walking whether you are doing something that is your state so everything on the ui is a state so now um what i'm gonna do guys i am going to have first of all my text so my text by default um its name is change my name let's say and i'm going to replace this change my name with this my text so my text and now you can see it has this capital letter so that means this change my name is working now i want to need a controller for this text field so i can say a text editing controller name controller let's say if i use this underscore which means it's a private field so name controller and equal to new text editing controller so as you know in dart 2 you don't have to write this new keyword so if i am writing this then also it means the same thing if i remove it then also it means the same thing and now i can use this name controller with this text field so there is some controller and i can say name controller okay and now what i want guys is that actually we can go here to this floating action button and on the press of it what we can do we can change my text which is the text change my name equal to and we can give it the text of the controller or the text field so name controller dot text so if i now write something here let's say my name is pawan so now if i press this button then it should reflect but it does not reflect it right but if i do a hot reload then you will see that pawn is off like reflected why this happened because whenever there will be some change let's say now if i replace it with something else let's say i replace it with the low heat so now even if i'll press this button then nothing will actually happen so why this that is not working because in flutter every time you do a state change every time you want to change your ui then you have to call a method called set state and if i do that then you will see rohit here now if i'll change this text to something like this random and if i'll press this button now then you will see it will directly reflect it so this is how you deal with text field this is how you make a card this is how you make a stateful widget and that's how it works and now this is stateful widget or this state has many other methods which you can override like any state if you want to initialize something before creating this widget which means when this screen is creating before that this method will be called similarly once you destroy this screen you can call this dispose method um so basically there is dispose then there is did change dependency a lot of other methods which we will definitely talk about in future but this is about it and now this is how our chapter 3 is also completed and we will move to chapter 4 in the next video so so guys so far we have done everything on a single file which is again a very big problem with floater if you will try to do everything in a single file then after some time it will be very difficult to read so in this video we are gonna see how we can organize this code so that it looks better and it gives a better feel right so what we are gonna do first of all i am going to create a new chapter so i will click here i'll create a new branch i will call it dev hashtag chapter 4 and inside this chapter first of all we will do the refactoring so guys first of all i don't want this drawer to be here so this drawer is actually can have a separate file where we can write this drawer so i will go here inside this lib folder and i'll create a new file i will call it drawer uh drawer dot dot and inside this file i am going to import the same you know material dot dot package and now i will copy this code from drawer and try to paste it there so this is the code i'll just copy it from here or cut it from here and i will try to paste it here but it will not work because you know this file cannot understand from where it is starting from where it should end so rather than just pasting we will create a new stateless widget because we our drawer is not changing right now or we are not doing any runtime change so that's why this can be a stateless widget so i can say stateless widget and i'm going to name it my drawer let's say so my drawer is here now rather this container we will return this entire drawer we will remove this coma from the end and now it is good to go now rather than we'll go back to main. and rather than specifying the entire drawer here i can say my drawer and now i have to do one more thing i have to just import it so it's already imported here as you can see on the top and now if i just press command s to save it you will see everything is working right so everything is smooth so similarly what we will do we will also um remove this card so what i'm gonna do guys um this card i'm going to select this card so this card i have selected till this braces so for for this bracket i will use this and then i'll press on this bulb button and there is something called extract method and extract widget so i can extract this widget and once i extract it it will ask me to give it a name so that you know you can um create a new widget by itself so we can say something like a name card okay so name card widget so we gave this name if you'll see name card widget and if i press enter here so you will see it will be replaced by name card widget and now we have a class with name card widget which extends stateful widget and it takes all the properties in the constructor like my text my controller name controller and everything here now we can also make a separate file of this so we can say name card widget dot dot and here in this file we can copy and paste that code so first of all i will import material.dart and then from the main method i am going to cut this class whole class and i'll paste it here inside this and this is looking good and now i'm going to just import it so i'll press command dot or alt enter in android studio or control dot in vs code for windows and command s and now you can see everything is still the same everything is working there is no error or bug and now it's looking much cleaner just 61 lines of code but guys we can do one more thing we can remove this entire home page from here we can create a separate pages folder so inside lib we will create one more folder this time pages and here we will create a new file we will call it home underscore page dot dot and here also you know we will import material dot dot and then we can cut this particular code from here and we can paste it here okay and this time we will import the drawer we will import the name card widget and then the drawer and we should be good to go and here in the main door dart i will import this home page and yes and we will remove these two unused imports so as soon as i do that i need to do a hot restart and everything will start working yes everything is same and in fact if you don't want to do this hot restart again and again then you can also remove this material up from here so we can remove it and we can say something like here um stateless widget and we can say my app and we can just remove this material app from here and we can say something like this and we can here now in the run app we can just say my app and that's it that's the only thing we have to do and now everything looks the same but the good thing is like you know everything is looking like this is just having 19 lines of code or 20 lines of code then the home page is also just 40 lines of code a drawer is also 30 lines of code and name card widget is also 40 50 lines of code so this way it will be much more organized and this test widget test is also giving us some issue so now i'm gonna just remove home page and i'll now say again my app and it will fix that issue as well so i'm just gonna remove it and yes we are good to go guys so this is something which is very important organizing your code and in the next video we are gonna see how we can do um networking in flutter and how we can add our dependency our first dependency in the pub spec.tml so keep hey guys so uh we have done so many things so far and uh i'm really glad that you could make it so far so we have seen lot of things like how to use drawer how to actually use stateful widgets how to change the name using this text field and now we are gonna do some realworld things like you know we have done all everything so far which is offline now we want to go to the online mode as well and by online i mean that how we will communicate with the maybe you can say with the server or maybe with the back end and then we are also as i told you if you remember that in the pubspec dot ml uh we add dependencies or which means that some libraries may be packages plugins are to talk to native code as well and to talk to maybe your backend so that's what we are gonna do in this particular video and guys one thing again which is very important is that make sure that you also check the notes during this course because there might be few important things or few things which you definitely want to take a look so now um let me just explain you once that what we are actually gonna do so if you are not familiar with this then i'm just gonna explain you that what i am talking about actually so um if i do that um yeah so if you can see my ipad here then i'm gonna just explain you this so basically but what i mean here is that let's say this is what we have this is screen okay and uh this is our computer okay so this is my computer and uh let's say this is my computer and we call it a client okay so when we are talking about the client which means our computer which is somewhere here let's say in india okay and it wants to make a request so it's a kind of a request and it makes it to a server okay so somewhere on the cloud and this cloud does not mean it's up in the air this is me this just means that this is another computer which is somewhere else in the world maybe maybe in asia maybe in us anywhere it can be and now this is making a request and um it wants something from it so what it will send is a request and what this server will send to this client will be a response okay so this is the important part now um because this is this is kind of a communication which is happening and they have to follow some protocols now if you will just think that if you are driving or if you are going from one place to another then you have to follow some protocols you have to follow some rules right so similarly they have some protocols which they have to follow and that's what we called http which means hyper text transfer protocol and using this protocol only they can communicate so this is what we are going to use and then the way they communicate can be in different forms one of the forms which is very popular the how they transfer message is what we called json which means javascript object notation and if you want me to explain it more then you can just call it like um it's it's kind of this um you can say key values pair where there will be a key let's say name name is a key and then it's it will have some value which is let's say p1 is a value of this name so this is how they actually communicates so this this is something which we need to understand and now uh we will actually proceed further and now i'll go to pubspec.eml and i'll add one dependency and that dependency would be i will go to my website or or the chrome browser and i'll write pub.dev and here i can search for http as you can see um this is the first package or you can say library which you will get http and this is the version and we'll see how we can install that so this is how we can install that so we i just we are just going to copy it and then we will paste it inside the prospect.ml below this line which is cupertino icons and then you will press command s or you you can just write flutter packages get and you should get exit code 0 which means everything worked pretty well and i am also going to enable the screencast mode so that you can see my shortcuts so yeah this is looking good now and now uh if i'll go back to home page i am using this uh you know name card widget and i really don't need it anymore so i'm gonna remove this as well as i'm gonna remove this single child scroll view as well because i don't need any of them so let's remove this child and now we will see nothing on the screen technically so i'm also gonna run this application so that we can check and guess one more thing is there like when you are adding any package or plugin so once you are adding a plugin which means it has some code written in kotlin or maybe on objective c or swift then you have to restart your app i mean restart from the scratch which means you have to stop it if it's running already and then you need to start it so that your application can understand about those uh plugins or otherwise it will give you some platform exception but in case of packages like http or any other package which is totally written in dart then you don't have to restart your application from scratch you can just do a hot restart so that will also work now as you can see we have nothing here but now we are gonna use that http package to fetch some data okay so what i'm gonna do um this we don't need anymore so i can just comment it as of now and here i'm gonna say that i am going to hit a url okay from where we will get the data so url is kind of an address which is similar to your home address right so every website or every web page has an address so here if you'll see we have this dummy address which is jsonplaceholder.tpcode.com photos so we are gonna use this address and we are gonna paste it here so so you can see this https which is s is for security you can say which means it has ssl certificate and this is http which is hypertext transfer protocol which which is the rules it needs to follow now um i'm also going to explain you something about asynchronous programming very soon uh up just an idea about it so uh this is what we have done right and then we will be waiting for some response or maybe i should say some data okay and then here in init state i can say let's say fetch data okay so this is the meta method which we are going to call now fetch data is not defined as of now and guys one more thing is that you can see that i see these kind of errors right in on right next to this particular line and what if you want to see it then you can go to this problems and here you will see the same problem but why i am seeing it here this red one is because of an extension which is which is a error lens so if you want you can install it and you can definitely watch my vs code tutorial on youtube uh so that you can get the idea and now um we have to define this fetch data method so i am gonna say fetch data here and now um there are two kinds of um you know communication or operations which can be done and that's what i'll explain you next so um if we are talking about that so let me just tell you so let's say there are two kinds of operation one is a synchronous so we can say a sync and second one is sync so which means synchronous so let's say guys uh once you go to a pizza store okay so you go to a pizza store so you ask for a pizza right so when you ask for a pizza it's not like so there is a guy this guy a he will take your order okay so you will go to him he will take your order he will write it somewhere and then your pizza will be like it's it's preparing right and by that time your pizza is preparing this guy a goes to some other person some random person here he will take his order as well and then his pizza will be preparing and then he will take some others order and then his pizza will be preparing and as soon as your pizza will be prepared he will deliver that pizza to you right and then again the same process we follow this is called asynchronous programming but in case of synchronous it's more like that it's it's like you are um here at a ticket counter okay and uh there are many people in the line a b c d or maybe you are at an atm so you will see that once a will be done with the process then only b can go so which means he will give him money he will ask for ticket he will give him ticket back and then only a will go okay and then it will be done for b and then it will be done for c so this is called synchronous programming okay and uh when we are dealing with applications like these so we want to have experience like asynchronous programming where user does not want to wait so maybe he can do something else while that thing is happening so that's why we are gonna use a sink here and i'm gonna make a separate course for this so don't worry about that that if you don't understand few parts of it and now what i'm gonna do i'm going to import so we can remove this name card widget and i'm going to import here the http package which we just use and we can import it as http so now we can use this http keyword to you know um call all of its method so as you can see unused import we haven't used it but here in fetch data we are going to use it so http dot get so this is a there are various kind of requests which we can make like get post uh put and delete so those are some of the requests so get means to get something and post means to actually create something there so uh it needs an url so we already have a url so we are giving that url now we want it to be a synchronous so we need to call it await here which means wait for it until it gives you some data right and we will store it to a response which is where um where is the keyword which we can use to store a variable and now once we receive that response we can print it using rest dot body okay so this is what we are going to do and now just uh see this debug console i'm gonna do a hot restart and we got some error that name controller is not defined and something like that okay so i'm gonna just comment this particular line here and we are going back here just clean it out and do a hot restart so you will see that this url will definitely give us some data so this is the data as you can see this is the data which we got okay and as you can see this is again in the json form which i just described you in the beginning with the diagram that this is how we will treat this data okay so now once we got json we need to parse it as well okay so for parsing json parsing we will use something called another library which we which we call dart underscore convert so what it will give you is it will give you a method called json decode so now we have this data and we can use this data with this you know json decode and for decoding json it will give us the map map means it will have a key and value so we need to give it a source okay so by default the data which we are getting so you must have seen this data this is actually a string we need to convert it to a json object so that's why we are using json decode and we will pass it the res dot body so we we will get this data here and now uh we can also in the center here we can also check if this data is not equal to null so we can check if the data is not equal to null then show a container so this question mark is means conditional operator we are applying here and then this column and otherwise if if it is null then in the center what you can do just show a circular progress indicator so which means this which you will see so this is now showing this circular progress indicator which means our data is null as of now okay but uh as you can see we are already receiving some data and let's try to print that data as well so print data and what i'm gonna do i'm gonna do a hot restart again because every time you are doing something in the initiative state you need to a hot restart okay so i'm gonna clean it and i'm going to do a hot restart so that it can print the data and yeah it's printing the data guys and this time you can see this is not a string this is this time it's an object but the problem is that even if it is printing the data our data is still null that's why it is showing this circular progress indicator this is happening because our ui does not know that we got the data somehow we have to tell it that yes we got the data now you need to refresh your or yourself so as i told you in previous video whenever you get this data you have to when you whenever you want to change the ui you have to call set state okay and as soon as i will do it you will see the um the circle is not appearing anymore and now we have got some data that means this blank container if i give it a color then you will see that we actually got the data so let's say we say color dot blue so you will see this blue screen right so this is fine but this is not how we want the data we want the data to be inside the list view so we will use list view dot builder okay and this way what we can do we can specify an item builder so what item builder means is that um how your items will look in the list view and then also we are going to give it an item count okay the total how many items will be there so we can just say data dot length which means this will be our item count whatever length of data we are getting and the for item builder it gives us two things one is the context which is actually i'll make a separate content on this context as well but just for understanding you can say you will see this context with every kind of widget inside this build method as you can see we are getting this context so context is basically something which have the location of your widget okay so it's kind of like every widget has some location in the widget tree so this context is basically aligned to that so basically what happens is that there is three trees which you are working on one is your widget tree then second is elementary and third is the render tree so this elementary is associated with this context and you don't have to go in detail just make sure right now that you understand that this contact is kind of a location of that widget in the widget tree and then it also gives you index that what is the index of you know uh your particular item and if you know that uh you know in programming that everything starts from zero so this index is also starts from zero okay and here we can just say return a list tile okay the same thing which we used in drawer and uh so while style because it has already some inbuilt properties like leading so for leading we can use something and we have title so let's try to use something like title and we can use data and then we can pass the index that for which index we want the data and then we have to specify a key so here you will see that we have multiple keys like album id id title url and thumbnail url so i am going to use this title so i can say title and now you will see this is not a subtitle widget because it's it's uh it's a string okay but title takes a widget so we will just copy it and we will remove this and we will use text here and then we will paste it and now if you will see then we have all the titles here okay and we have the list view and this listview.builder is kind of a recycler view in android so which means it do the caching as well it do the recycling as well so it actually carries all the elements which is visible on the screen if it is not visible then it does not care about that okay this is what we have done right now similarly we will have the subtitle as well and this time we will use something called string interpolation which starts with dollar and we can actually use this curly braces to give variable to it let's say data and then index and this time we can just access the id so now we have the id and you can see 7 8 9 10 you can see 4 5 6 7 and now why i use is use this in string interpolation so that i can write something like id colon space and now every element have this id 6 7 8 9 10 and all and the last thing is that we want in the leading to use an image so we we will be fetching image from the network so we can use image dot network and for this we can again use data index and this time if you see we have something called a url and thumbnail url so i'm gonna use url so url and now you will see we should see the images yes we can see them and this is looking pretty nice right so this is what we can do and uh this is what we are fetching from the internet so you don't have to worry anymore that how to parse json how to fetch data using these things and this is how we will end this chapter four so chapter four is completed and in the next video we will move to chapter five and we will talk about some interesting stuff like how to make login page how to do navigations and all hey what's up guys and uh we have done a lot of things in the last video we actually saw how to use this package called http to make network calls we also fetched some data from uh you can say a dummy server and then we also saw that how we can use listview.builder to perform some operations also i forgot to tell you one thing in the last video which is that you can also use grid view to represent this although the information like this this this is a very long information so grid view will not make much sense but let me just tell you it's very easy to convert it to a grid view so we could just replace this list view with grid view and then we could use it with grid view dot builder but then we need to add one more extra parameter which is grid delegate so great delegate takes a sliver grid delegates itself a very big topic which we will cover later and but what it takes is sliver grid delegate with fixed cross access count which means how many items you want to show in one row so cross axis count let's say two so two items will be shown as you can see this is now a grid view and if you want to change it to three you can change it and then there will be three items although it looks pretty bad because of the text we are using so we are going to switch back to list view this is just for understanding purposes and uh yeah that's that's what we did now um i'm just gonna go back and i'm going to start a new chapter so i'll create a new branch i will call it dev hashtags chapter five and in this chapter guys what we are going to cover is that how to design a login page as well as how we will do the navigation so for navigation we have just one page as of now home page so we need to design a new page quickly so here in the pages section i'll click a new file i am calling it uh login underscore page dot dart quickly we are here and we are going to import material dot dot and at the same time this is going to be stateless widget as of now so i can call it um maybe let's say a login page so by default you can start with stateless widget and then when you see that you need some kind of state change then you can directly convert it to a stateful widget that's how i will suggest you to proceed and then we can use a scaffold and guys because we cannot see any changes here because we are using home page so we can go to our main door dart here rather than this home page we can make it a login page and then we need to import this login page so that we can see the changes so now we are on the login page we can also remove this debug banner if you want so for that we can just write here debug show check mode banner and we can make it false so you will see that banner is gone and it's not there anymore now we will go back to our login page this is the scaffold here we will again use app bar so a bar widget and then title and in the text part we can just uh tell it let's say a login page okay and this is this is fine this is what we have been seeing okay and in the body what i'm gonna use i am again going to use a single child scroll view why because i want the scrolling to happen if it's a small screen and then i'm going to take a column and inside the column i'm going to take some children like uh you know we could have something like a username or maybe a password so those are the things which we can have but guys i have already told you about text field what if i told you this time uh like something new so this time i'm gonna tell you that we can also use something called a form so form is another widget which can helpful in collecting like a data set okay so let's say if you have username password or maybe you have a registration page and you want to collect all the data and you want to validate that you want to save that so you can use form in that case so let me just tell you how you can um use a form so for that we will convert it to a stateless to stateful widget uh what's the purpose so that we can actually um generate a form key and uh even if you don't want to use it then also we can right now proceed but in future if you want to change show something on your screen the login page then definitely you need it so right now let's let's have a form key so we can say a form key so basically this is a global key okay and this global key actually takes a form state so form state and this is our form key and inside this column we are going to have all the elements so i can wrap it with a form so form form is here now um if you if you'll see if i haven't told you already then every widget takes a key as i told you so key is basically it represent what widget is like i mean this is a widget but how you will identify which widget is this so you can give it a key let's say pk1 it can be a local key object key unique key whatever you want to give it so that framework identifies that which frame which particular widget to rebuild and when okay so we will give it a form key which we have already created and using this form key we can save this form we can validate this a lot of things we can do and now um this time rather than text field if you want to apply the form mechanism then you have to use text form field it's kind of same but it has some more properties like you will see it has on saved which is important and validator which is again important so these are um like it does not have unchanged property or it has actually it has unchanged as well so it is having everything which text field have but it has some extra fields as well so yeah there are a lot of things which maybe you can explore but right now we cannot so text form field is there now we can have different you know uh controllers like we all earlier had so you can say maybe username controller so you can use them if you want and if you want to skip them then also that is fine as of now it is not actually very much needed but then uh it's good to have them and similarly we can have password controller and this will be again text editing controller and as you know we are using dart 2 so we can skip this new keyword so that's why i'm not using this new keyword otherwise it is the same thing and here in this text form field for the controller part i'm going to use username controller and guys this time i'm gonna show you the username is actually having let's say an email id so we can have a keyboard type and text input type dot email address which means the keyboard which it will open if you click here then it will be of type of email as you can see add the rate symbol here so this is what it will do okay so that's that's the advantage and then we can have the decoration as well and i can call it input decoration and here for the hint text i will say enter email okay enter email and then for label text i can say maybe username just for the idea and similarly i am going to copy and paste this another time and this time i am going to call it um password controller so password controller and enter password password and then label text could be password and this is looking good but if you will enter some password um first of all it should not be of type email address so i can just say text so now if you will click here then you will see there is no add the read symbol anymore so that's a good thing and also we don't want to show the password by default so we can off secure this text to true and then you will see we will have only this dot dot dot okay and every time you will do a hot uh hot reload then you will see you will lose every character here okay so if i do hot reload you will see that we lost actually the data in the password so for that we need to actually convert it to a stateful widget so that we don't lose it if you will uh now if you if i write something here if i do a control hot reload then you will see nothing is lost okay so this is again important thing that's why i told you and now it is actually very much stick to this corners so what i'm gonna do i'm gonna give some padding to this column so let's give it a padding of 16 so that it does not look that bad it's looking fine now and one more thing we can do guys is uh we can actually make it in the center that's also will be fine and then we can wrap it with a card as well so that it takes the only space which is needed so now we have a card we have text form field and we can also have a button so there can be many kind of button like a flat button a raised button outline button so there are lot of buttons even raw material button in the material design guidelines so we are going to use a raised button which has some kind of elevation so again i told you in the beginning as well that every button has a property called on pressed so what will happen when you will press on it right so this is looking cool and guys um we need to give it a child so let's say text and we can call it sign in okay we can also give some color to this particular button so there is a property called color we can call it let's say color start yellow maybe if it looks fine uh maybe orange orange will look much better so orange and for text color either you can go with black or maybe you can also say text color as white if that looks good to you so sign in is also there we want to give some space as well between them so let's give a space with size box so size box height and then maybe 10 um let's see if that looks good even we can give 20 to be honest because we have a lot of space in this screen and then here as well and this is looking good guys um but still it is not in the center because our main axis alignment should be in the center and uh oh it's it's not in the center because uh we are using single child scroll view so that's why it's not in the center if i will remove this then it will already go to the center and if you'll see that so here it is right so we are going to use single child scroll view anyway and uh what i'm gonna show you the another thing is that um we can also wrap this entire stuff so i'm going to copy this single child scroll view and i want a background image okay so in the background i want an image the same image which we used for that purpose we can use a stack so stack means means that this is a widget where there will be items placed one on the top of another okay so here also it takes a children and the first element which we can use is image dot asset and we can say asset slash bg dot jpg this is the same thing which we have already used right and now this is the image but we want it full screen so stack has a property called fit and this time it does not takes a box fit but it takes stack fit so we can say expand so it will expand and then we can call here the fit as box fit dot cover so that it can cover the entire section right but this is looking good but at the same time you will see that this is actually um so if what i can do if i just cop paste all the code again so it looks but you know the background is very visible so it does not look that good right so what we can do to avoid that so for that if we i go back to this image then there is another property called color okay so i can use color i can use colors dot black and then with opacity so i can give it an opacity of 0.7 and it is actually like the image is kind of gone so to actually make it just darken we can use something called a blend mode so color blend mode is there and we can say blend mode dot darken so now you will see a darkened version of it and it looks pretty fine to be honest it's not looking that bad at all and then we can just wrap this single child scroll view with another padding so that okay this card is looking better now and if you want you can now this push this to center and this will be going to the centers and this center now we can remove and yeah so this is everything which you can do right and now um what we can do when we press on this sign in button we can go to actually the home page so for that how to do the routing thing we can use a class called navigator okay so here in the unfresh i can say navigator now navigator has many methods like pop pop means going back push means actually pushing on to something on the stack so if you want to understand with our diagram so how we will do that let's let's just see how it works so let's say if you have certain cds so this is let's say this is actually not looking like a cd this is a very bad cd and i'm just gonna remove it so let's say we have a cd like this and on the top office there is another cd and then there is another cd so push means adding one on the top pop means actually removing from the top okay and then pop means removing another one and then pop means removing another one and push means adding another one on the top okay so this is what actually is stack do okay so this is what we are going to do so we are going to push which means we want to go to the next screen so push means going to next screen pop means going back and it takes a route so we can use a material page route okay and this material page route takes a builder builder means it takes a context and then what widget you want to build so we want to actually go to this home page widget so home page we can just say and then we need to import this home page because it does not understand what is home page so we can import library home page dot dot so pages slash home page dot dot so here we are we can remove this main dot dot and now if i will click on this sign in button then it will take us to the home page home page right but if i will press this back button now then we can go back to our home page which we won't be needed maybe in future because once we are like crossing this login page then we don't want to come back until unless someone press the log out button right so um that's fine now what i'm gonna do um i'm gonna show you the use of the form okay so how we could use the form so we could use our form key which we created so form key and we could use the current state from that so current state is what is the state of the form i mean what data you have entered what is its state and then we could say save validate and everything okay so we could say validate uh it could validate validate all the fields for us and we could say save let's say we could say validate what would be what would happen if we will call it like validate so it will go to this text form field and it will check what's happening on the validate so we haven't implemented it so nothing will work so we can just say validator and we can do some operations here okay and it will check that similarly it will go to the second form field and it can check the validator here as well and by comparing all of them then it will see if everything is true or not then only it will give us so validate if you will see it gives us a boolean which means everything was true or not if not then do something if yes then do something else so it's again something which you can right now skip so this is how you will understand that push means going back to going to home page and let's say um in the home page uh let's say we are here and in the action bar which is app bar we can have some actions as well and this time i'm gonna talk about a new widget which is icon button so in the icon button i could say i have an icon so i can use icons library so icons dot let's say log out which means exit to app something like this and then because it's a button so it it is also needed to have an on pressed button okay and this time i could say something like navigator dot pop so that it can go back to that screen so if i press here now it will take me back to the login page and in fact we can again make it more easy like this is looking um like kind of a lot of work so what we can do in the login page we can give it a static const string a route name okay so basically we can name this particular route so we can say let's say slash login so this is our route similarly we can give it to home page but right now we don't need it so in the main dot dot for home we have already specified login page right and then we can have another property which we call it routes and it takes a map so basically we have to say what is the route name and where it will go so our we can use login page dot route name and where it goes we can use context to define that it goes to login page okay similarly we can have the same thing for home page okay so i'm going to just copy this thing from here and i am going to paste it to this particular home page as well and we can call it slash home okay and in the main dot dot we can just copy this and i am doing it with control d by the way so home page and we can say home page and now guys going to login page we can actually so basically if you want to transfer some data from here to this page then in the constructor of home page you can pass some data right but let's say if you don't want to pass a data and if you want to have some simple way to run it some some clean way to write it then we can use something called navigator dot push named which means we can pass the name of that particular route and we can say home page dot route name okay and now this will perform the same thing this is much cleaner and now if i'll click here then also it will go to this particular page now if i will just you know remove this application from the stack and then i'll try to go back then also it will take me to the login screen also it is right now it will not work because um we are using virtual machine so it it does not understand what was there in the last time but if i do a hot restart or maybe if i try to restart this application it will actually start from the login page which we don't want and in the next video we will see that how actually we can logged in the user and whenever he will actually run this application so if i run this application right now so it will launch the login screen but once the user is logged in we don't want to actually take him back to the login screen so that's why we are going to use something called shared preferences in the next video and by the time i'm just gonna show you once if i'll run this application again then you are going to see a login screen okay and not the home screen so every time it will take you to the login screen which we don't want okay so that's that's you might have seen in most of the applications so as you can see we are back to the login page and the next video will definitely check it how we hey guys so uh we have seen a lot of things again and this time we have seen this login page where we have this form where we have username and password and then there is a button which is a raised button and when we click on it it goes to the next screen but our application does not know how to actually store this state which is like you know a persistent state and we can use something like shared preference to store this persistent state in keys and values and this thing will be asynchronous as well so we actually don't know how to use it yet right so for that what we are going to use we are going to go to pub.dev and here i can write you know shared preferences and if you click here then this this is the shared preferences package and this is now um it's not just a package it's actually a plugin so which means there is some code which is written in uh for android it is written maybe it is written in kotlin for ios maybe it is written in objective c or swift similarly on android it can it might be written in java as well and for web it might be having something else let's say javascript and some other things so it uses local storage there so yeah this is actually something which we are going to use and uh for that we have to go to this installing section and then we can add this dependency and guess this is probably the last course of this particular series um and pardon me this is probably the last video of this series and there can be more videos added in the future for sure and the best part is that we will be updating this course regularly so shared preferences 0.5.6 plus one i guess uh let me just see that yeah zero point five point six plus one exit code zero which means it is successful and as i told you whenever you will add a plugin then you have to actually restart your application otherwise you will get an expansion exception like you know platform exception that this is some plugin missing exception on something like that so now we are running this application again we are having two pages one is the login page another one is the home page and we have added shared preferences now inside the lib we can have something like a new folder and we can call it utils and inside this utils we can have a new file called constants constants dot dot okay and by the time it is running we can have a class here we can call it constants and if it can constants okay this is looking good now inside this class we can have a static reference to our shared preference so shared preference and preference so prefs we can just call it prefs so that we don't want to like you know this is kind of a singleton so if it's a singleton that it we don't want to um create a new instance of it so that's why it's singleton so we can just store a static reference to this and now i will go to my main.cart and this time what i'm gonna do here um here because we want to store it the shared preference and we need to use the await keyword so i'm going to first of all make it a future and then i'm going to add a synchronous uh like this particular keyword here and then we have to do something like uh you know widget binding so there is something called widget flutter binding so it has a method which we have to call ensure initialize that means make sure that everything is initialized and then we can use our constants dot so we need to import it as well dot preps and we can use now await keyword and we can use shared preferences dot get instance so by this we will get the instance of the shared preference whatever instance it is having because it's it's always going to have single instance and that's why it's a singleton class if you'll go here you will see that this is actually a singleton class right so um this makes sense to me now what i'm gonna do uh i'm going to come back here and when i am doing the login page i am going to use before actually doing the navigation i am going to use this constant okay dot uh let me just import it dot prefs dot set and we have set string set int set bool so for this simple uh data types you can use shared preferences so for set bool we will use and the key i'm gonna say is logged in okay and the value i'm gonna say is true that which which means is that logged in is not true so what we can do now if i do if i go to sign in and if i click here what nothing is working uh that's that's weird let's just see why it's not working oh we got an error that this constant dot prefs it does not understand that so which means we have to restart our application because we did some changes in the main dot dot and now if i click on the sign in button then you see i came to this home page right but if i do a hot restart again then it will take me back to the login page which right which i don't want because i just save this uh particular property that if it is logged in which means true then actually i don't want to come back to home screen how we can do that so in the main.dart you can see in the home part we are using login page right so what we will do here we will say um just use my const.prefs and get me the boolean which is which is what is the key logged in okay and if it is true by default it will be false but if it is true then take me to home page okay but if it is false then take me to login page okay so this is after uh this if we say this then now you can see we are back to uh this home page and now even if i do a hot restart then also it will be always having me on the home page but if i press the back button this time then it will just you know remove this app from this stack and that's that's what i always wanted but there's one more thing we can do guys in the login page we can actually replace this okay so rather than push named we can actually replace it so that every time when we so we could say something like push replacement name which means it will be removed from the stack this login page so that there is no chance of coming back to this screen and now we have to actually run it again because and this time when we will run it so because our login is true so it should take us to the home page rather than login page right so let's see how that goes and i i hope and i just don't hope i am sure that it will work like what we want so uh one more thing is guys that uh you can use string integer boolean most of the time and then also you can use a list as well but you have to then use something like json encode to like convert it to a string and then maybe you can save it and this is for small small variables and as you can see we are now on the home page rather than login page and now what you will see that how we can now go back to home page because you just told us that it is not true how to make it false right so in the home page when the person is actually um you know this time this navigator dot pop will not work so when the person let's say is trying to log out so we could say constants dot prefs dot set bool and this time in the key part again i'm gonna say the same key logged in and this time the value i'm gonna give is false so make it false okay and then if now you will press on it because it's it's having this navigator dot pop let me just open the debug console as well if i click here then you will see it will pop this home screen so now we have no screen so that's what we don't want so now we will do a hot restart and this time we will go to login page and now you will fill some data here whatever you want to fill there is no validation as of now and that's not this in the scope of this particular course so now if i press sign in this is fine but now this is actually we are using push replacement so if now you will press back button then it will not take you back to the login screen but if you might have missed this you know push replacement thing then it will take you back to the home screen in ios there is no back button button android there is definitely is so we need to be very careful and rather this rather than this navigator dot pop we can again use navigator dot uh push replacement name okay so that and i'm gonna show you if i'll go to um let's say if i just go to using this push named i go to this login page let's say login page dot route name then um if i will just yeah try to press this login button then it will take us to this login page but if i will press back here then you can see we are back to this home page so that's what we don't want so that's why i told you to use here push replacement named okay and there is a whole course which is coming for this routing thing there will be lot of things which you will be learning so now if i press here then you can see we came back to login page but now if i press this back button then you know we go we went to some other application because it's it's just a debug application so that's what you can do guys and now this is how we will end our this particular course and for the time being and maybe there will be in future there can be more videos added to it so if you are watching it after some time let's say if there are more videos next to it then it's it's a great thing and now we are actually completing chapter five at least for this particular course and also let me know in the comments that what you feel about this course what should be improved so there will be the good part is that if you have paid for this course there will be a lot of improvements happening all around during this course or even in the next courses and i hope that you enjoyed this particular series and course where you learned the essential things which you definitely need to learn about flutter and then now you can move ahead you can make your applications and then you can also take real world um course where we will make a real world application using florida you can take flutter with firebase course which should be um up very soon so yeah thank you so much guys for joining and as you know there is this source code you can access this is already in the notes you can check it out and i hope that there are so many apps which you can build using these practices which i have told you there are many things which can be improved it's not like these things cannot be improved but yeah you will learn it by the time so thanks guys for watching and see in the next welcome back guys and i hope that you have already finished your flutter essential course but because you're a part of mtech viral school so there are some extra classes and in these classes we are going to cover few more awesome stuff about flutter which in case if you want you can skip but if you if you use them then it will make you more productive as a flutter developer so that's why i thought about covering them and in these few videos we will see these awesome things so in the first video we are going to talk about something called a future builder and how it can help us so now what i'm gonna do as you can see i have changed my branch to dev hashtag extra class so this is the branch which we will use for extra classes and before proceeding i am going to have a minor change here so in the lib folder here i am going to create another folder first of all that will be widgets and then i am going to move this drawer to this widgets and then this name card widget as well and now our home page is going to be angry because the import does not work anymore and i am also going to just import a new uh relative path you can see and also guys uh there are notes with every lecture or with every video when you will just slide it down so please make sure that you are also at least watching those notes because it can have some extra information which will definitely help you in your flutter journey so yeah just uh to make sure because you have already finished if you haven't seen those notes then definitely you are missing something uh so now when we are talking about this home page let's uh create another page here and we are going to name it um let's say home page with future builder so fb dot dot okay and i'm going to just paste my home page exactly like that here as well and just going to name it to something else so i'm going to press f2 and home page fb which means future builder and home fb let's say and now in the main.dart i'm just going to change it from home page to home page fb so this is just for reference what and how it will look when in case of future builder and one more thing which you might have noticed is that i am using this time the ios simulator just to make sure that everything works on ios as well and now we are here in the home page with fb and as you can see we are using a stateful widget we have this method here fetch data which is a an asynchronous method and which means it returns a future okay although we are not returning it anything here but if we will write something like this then also it means the same thing and if you remember in the main dot dot we actually added this future keyword because we had to use this asynchronous keyword and why because we were waiting for our shared preference to get the instance so that's what what we are doing here and now talking about future builder is guys um when you are dealing with this future or when you are interacting with this future then future builder is going to give you some snapshots and based on your snapshot you can build the ui or the ui will rebuild itself based on those snapshots and then um what will happen we don't have to use this set state manually we don't even have to init our state like we can totally make it a stateless widget in that case so let me just show you how that will work so what i'm going to do here uh this body part i am actually going to remove entirely and rather than anything else i am going to use something called a future builder and now this future builder actually takes few parameters let's say future so future means you have to say what will be the future so future is our this fetch data because it is returning a future so i can simply say here fetch data okay and this is my future and also guys um we can see here that it takes a builder as well so builder is supposed to give us the context as well as the snapshot and then it will be also a sync snapshot as you can see here if you will see builder here then you will see a sync snapshot which we are gonna get with this and then we have to and and there is one more thing which is initial data if you have some initial data you can provide it otherwise you can just leave it like this and now snapshot has many things like if we want to explore it then we will see snapshot has it has this property called has data whether it has data or not then data what is the data and has error whether it has error or not then connection state that what is the status of your connection and if it has any error or required data so these are some properties so i am going to have here a switch case where i am going to check the connection states okay so switch case sorry switch and what we are going to um like check here which will be snapshot dot connection state okay and for every connection state we are going to have some um widget drawing okay so first case will be if the connection state is none which means nothing is happening technically so we will return a center a child and we will say in the text um nothing is fetched nothing is fetched or you can say um fetch something okay because it's actually doing nothing so fetch something so this is kind of an instruction which we are giving and let's say if the case is not this but the case is connection state uh dot active so if it is active then we will do nothing and we will wait for another connection state and that connection state can be waiting so if it is waiting guys so what we can do we can just copy this particular piece of code and we can um just written rather than text we can return circular progress indicator which we actually returned earlier as well so that's what we are going to do and then there can be one more connection state dot let's say done so if everything is done then what we are going to say is let's say if snapshot dot has error if it has error then we can just copy this particular text and can say that some error occurred so all the cases can be covered here with this future builder and if there are no errors here then we can return our listview.builder so we can go to homepage we can copy our listview.builder and let's try to put it here and yes it looks good to go and this is showing that it is a dead code why okay so we have to apply this okay one second guys so we have to apply this outside of this uh has error block okay so now if you will see on the screen here then uh maybe if i do a hot restart okay so now it's not not working as of now as you can see that even if we restarted the application nothing worked because we don't have to actually use this set state here rather we need to return the data which we are getting so return data so that we can return the future so this data is actually giving us a map value so we can also say map here it's optional if you will avoid it it will give some dynamic value and or yeah so it's giving some dynamic value if i see nothing here which means some dynamic value which is actually this data value then you can see we got the same result right and if i do a hot restart now uh you will see that it will show some indicator and then this right and let's say if you want to see some exception if you if let's say by default or by mistake you actually wrote some wrong url then you will see that it will show you let me just do a hot restart so that this url can be reflected and you can see we got some error occurred because this is a wrong url and we cannot get some data and let's say um if how you will see that if connection state is none is actually you can make this future as null and then there will be no connection state so we should see something like fetch something so in that case we can change the icon here okay to refresh and when we are pressing this button then we can actually enable a flag by which you can do a set state and it can fetch some data here okay so we will basically replace this null with the fetch data and uh then we will get some data so this is how future builder works i hope that you got the idea that how it works and it can be very useful right because um you don't have to like you can check things like this you don't have to apply so many effects you don't have to check whether this is something where um if you are if your url is correct or not and guys now because there is no need of using the stateful widget because we are not doing set state anywhere so what you can do you can totally remove everything like we can remove this we can you know remove this and we can in fact remove this variable data from here and we can just say where data and we can also move this url to here and we can make it final as well we're going to make it final earlier as well and now guys what i'm gonna do i'm going to make it a stateless widget and you can just see why stateless widget because it's not like a stateful widget will harm you or something but that is totally fine if um there can be lesser lines of code so that's the only difference and now this is a stateless widget guys and now it's saying data.length okay so one more thing which we had to make right was we missed something that this data is not this data which we are returning from here so we have to replace it with snapshot dot data okay because that is the data actually we were also doing the initiative state so that was that's why it was working otherwise it cannot work now and now we are all done and now you will see that we got the data everything is fine now let's do a hot restart again and this is a stateless widget now and now we are even performing more things like you know we are showing this some error record and showing this fetch something then also if you will see the lines of code then it's just 74 and in this case it was 79 but it was not doing that much task right so that is the difference and this is how future builder can help you and it makes code looks much more cleaner and yeah it can be really helpful so i hope you enjoyed this and in the next particular lecture we will talk about stream builder so just keep watching hey guys i hope that you are enjoying the extra classes and we just finished future builder and i hope that you enjoyed that part of the video because that can be really helpful and when you will make some real world applications okay now coming to the next thing is a stream builder so before that let me just commit this and we can say future builder completed and also guys check out the notes as well uh so now um what we are going to do let's so create one more page here and this time we can say home page with sb which means stream builder dot dot and what i'm gonna do i'm going to just copy this entire uh thing from here to this particular place and this time i'm just going to rename it from fb to sb okay which means stream builder and uh yes does this that's most of it and now what i'm gonna do guys rather than this future builder so i'll go to main dot dot first and uh oh i'm going to say this time home page sb okay and rather than this okay future builder i am going to call it a stream builder and what will be the difference so everything remains the same but the only thing is that it takes a stream okay no future so now can i provide fetch data here you might be wondering if yes then why and why stream builder so yes we cannot provide this data so fetch data the purpose of fetch data was to return a future and for that we had future builder but let's say if you're using firebase or maybe your backend is returning stream so what is a stream stream is kind of you can say a flow of data let's say there's a pipe and inside that pipe uh you know you are inserting some kind of data so that's what you can call a stream and uh that's that's what you can call a stream builder and let me just uh demonstrate that to you so you might be wondering what is a stream so basically what is a stream is stream is actually let's say if you have a pipe here okay and this pipe is where you can actually insert some data so it's a flow of data so let's say first it will insert one here then there will be another flow when it will insert two here then another insertion three four five so basically it's what we called syncing in a stream so which means inputting some data so there is a flow of data so it's it's not like at one time there is no like it in future there is all the data coming at one time but in stream the data is so that's that's why it's called a stream so this is basically called syncing and when uh we will output this data then we will call it streaming so yes that's that's uh what stream builder is all about and now um we don't have anything like a stream here so let's make a stream so let's say we can say stream and it can in return maybe a list of integer okay and get stream we can call it and okay what maybe like what we want to return here that's the question now so we can return something like let's say a data and we can use um something like let's say we copy this particular thing from here and we have this method here from i trabel use insert some elements okay so we can have some elements let's say we can say list end i'm gonna just copy it from here and dot generate and i can give some length let's say 20 and for every index i can say some item okay one second guys so i can say item item and then the index so maybe something like this yes and then um what's showing me error okay so basically we need integers so why i'm even using it in here so let's call it string and here also let's call it string string so now uh we will return this data here so return data and now rather than returning this or using this fetch data i will say fetch what was that get stream okay so get and stream and that's the only thing which you have to do so string is not a sub type of type int of index that's what it is saying to us and it does not have these properties so guys i'm going to remove these things first and rather than in title i'm just going to say whatever here if the index just show me that and you can see we have item 0 to 19 which means 20 items and that's how stream builder kind of works okay if you will provide the null here then also it will say the same thing as you can see fetch something and get stream if you will do a hot restart then it will show you on because our data is already with us all the time so that's why it could not show you this circular progress indicator so this is how you will deal with streams and some in the real world course i'll show you how to actually or even the firebase we will show you that how you can use the streams with stream builders and firebase so i hope you enjoyed this video and i'm going to just complete this thing as stream builder completed so i hope you got the idea guys so it's it's a normal flow of data which you will see with streams and yeah that's it so i hope you enjoyed this video and you
