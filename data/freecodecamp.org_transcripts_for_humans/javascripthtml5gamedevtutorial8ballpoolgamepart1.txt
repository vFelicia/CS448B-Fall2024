With timestamps:

00:00 - hi everybody and welcome to the first
00:02 - tutorial in a series that will guide you
00:04 - through building your own 8-ball pool
00:06 - game using javascript and html5
00:10 - so before we begin i would like to take
00:12 - some time
00:13 - to give a credit to a book that i read
00:15 - that inspired me of making this game
00:17 - this book is called building javascript
00:19 - games for phones tablets and desktop and
00:23 - it is written by aryan aegis i'm sorry
00:25 - if i'm pronouncing the name wrong
00:27 - anyway it is a really great book and
00:29 - many of the topics that i'm going to
00:30 - talk about
00:31 - during these tutorials are taken from
00:34 - here and if you would like to get a
00:36 - deeper understanding and knowledge about
00:38 - those topics i really recommend you to
00:40 - read this book you can have a look at my
00:42 - code
00:43 - by getting to my github page and find
00:46 - this repository that contains all the
00:47 - code for this project
00:49 - you can even go down here and you'll
00:51 - find a working demo that you can enter
00:53 - and play and experience the game all by
00:55 - yourselves
00:57 - all right so let's move on
00:59 - so the first thing we will do is to
01:01 - create a new folder for this project
01:04 - and maybe we should give it a
01:05 - significant name something like classic
01:08 - full
01:10 - game
01:13 - now i will open my preferred text editor
01:15 - which is in my case visual studio code
01:18 - and drag the newly created folder into
01:20 - it
01:24 - let's now create a new file and the
01:26 - first file i'm about to create is the
01:28 - html file
01:30 - let's give it a name
01:31 - index.html
01:34 - now there are many neat ways to create
01:36 - the structure of an html document with
01:39 - visual studio code you can just write
01:41 - html
01:42 - and choose this option
01:44 - and you'll see that
01:46 - the structure is already built for you
01:48 - but i'm going to delete all that since i
01:51 - promised to show you how to build the
01:52 - game from scratch
01:54 - so i'm gonna write everything myself
01:57 - let's start with the html tag
02:00 - and inside of that i will create a head
02:02 - tag and a title
02:05 - and let's give it
02:06 - the same title as the folder name
02:09 - classic pool game
02:12 - um
02:13 - let's create a body tag
02:15 - and here we will create the canvas
02:18 - element
02:19 - which will have an id of screen
02:23 - and uh with
02:26 - that will change in the future since the
02:28 - canvas is going to be adaptable to the
02:30 - screen size but as of right now i'm
02:32 - going to keep it 2000
02:36 - height
02:38 - will be
02:39 - 800 for now
02:44 - and that's it
02:45 - the html document is pretty much
02:47 - complete for this game
02:50 - after we've created the canvas element
02:52 - on our html file let's now create a
02:55 - javascript object that will let us
02:56 - interact with this canvas in order to do
02:59 - so we will need to create a javascript
03:01 - file let's call this file canvas
03:04 - dot js
03:06 - in this file i'm going to define a
03:07 - function constructor
03:10 - and let's call this function constructor
03:12 - canvas
03:13 - um to
03:15 - d
03:18 - the object that eventually will be
03:19 - created using this function constructor
03:22 - will have two data members the first one
03:24 - will be
03:25 - this dot canvas which will be the canvas
03:28 - itself and i'm going to fetch that from
03:30 - the html using document
03:32 - dot get element by id and here i'm going
03:34 - to send the id that i gave to the canvas
03:37 - before
03:38 - screen
03:42 - as you can see it is the same id as the
03:45 - canvas on the html file
03:49 - so
03:50 - the second member
03:52 - is the canvas context and the canvas
03:54 - context is an object that has certain
03:57 - functionalities that will make our lives
04:00 - much easier interacting with the canvas
04:02 - so in order to get the canvas context
04:05 - we'll need to
04:09 - approach
04:11 - the canvas element
04:15 - and ask for the context
04:18 - get context
04:20 - here i'm going to send 2d since the game
04:22 - is going to be two-dimensional
04:26 - let's think about the functionality we
04:28 - would like a canvas 2d object to have as
04:31 - of right now i can think of two things
04:34 - i would like to clear the canvas using
04:36 - this object and i would like to draw an
04:38 - image on the canvas using this object
04:41 - in order to define this behavior we will
04:43 - need to use methods
04:46 - i will define the methods on the
04:48 - prototype of canvas 2d let's do it right
04:50 - now
04:52 - so canvas
04:54 - 2d dot prototype dot clear equals a
04:59 - function
05:02 - and
05:03 - here i'm going to use uh the clear rect
05:06 - function of the canvas context
05:10 - let's
05:11 - write canvas context dot clear rect
05:16 - and it will need to get a an x value and
05:19 - a y value a width and height
05:23 - so the x will be zero since i want to
05:26 - clear all of the canvas and the y is
05:29 - zero
05:30 - and the width will be the kind of width
05:36 - dot
05:37 - width
05:39 - and the height is going to be the canvas
05:41 - height
05:43 - canvas
05:46 - dot height
05:52 - all right
05:54 - so let's move on to the draw image
05:56 - method
05:58 - i'm going to define it here
06:00 - canvas 2d dot prototype
06:03 - drill
06:04 - image
06:05 - and that will be equals function that
06:08 - will get an image
06:10 - and a position
06:13 - and it will use the canvas context to
06:16 - draw that image on the given position
06:20 - so i will need to approach
06:22 - the canvas context and ask it nicely to
06:26 - draw
06:27 - the image for us um i will send the
06:30 - image that i got
06:31 - and
06:32 - position
06:34 - dot x
06:35 - and position
06:38 - dot
06:39 - y
06:44 - so the next step is to see that
06:46 - everything that we've done so far is
06:48 - actually working as expected
06:50 - in order to do so i will go to the
06:52 - index.html file
06:54 - and
06:55 - add a reference to the script that we
06:57 - just wrote
06:58 - so script src and that will be equals
07:02 - canvas.js
07:04 - and that's it
07:06 - the second thing that we'll need is an
07:08 - image to check the draw image method
07:11 - and i already dragged the assets folder
07:15 - into the new folder that we've created
07:17 - for this project in order to find the
07:19 - assets folder you can go to my github
07:21 - page i will leave a link down in the
07:24 - description below and you can download
07:26 - the assets
07:32 - all right now that we are ready let's
07:34 - create a new object using the function
07:36 - constructor that we built before
07:39 - so
07:40 - let's call this object canvas
07:43 - and it will be equals a new canvas to
07:46 - the object
07:50 - now in order to
07:52 - test the draw image method i'm going to
07:54 - create a new image so let's call it
07:58 - image and just to make it clear
08:01 - i will
08:03 - comment here
08:05 - that it is just for testing
08:10 - okay so
08:12 - here the image will be equals a new
08:16 - image
08:18 - and here i will need to define the
08:21 - source
08:22 - for this image
08:23 - the path of the image
08:28 - image.src and that will be equals
08:31 - and i know the path but if you want if
08:34 - you want to
08:35 - make sure you can just
08:37 - open the assets folder and see
08:40 - where this image is so um
08:44 - i will write it down
08:46 - it's
08:48 - dot
08:49 - slash assets
08:51 - slash
08:52 - sprites
08:54 - slash spr
08:57 - background
08:59 - dot png
09:03 - all right
09:05 - there is an issue that we need to
09:06 - consider
09:07 - here since it's going to take a while
09:09 - for the image to load but the script is
09:11 - going to be
09:12 - rendered immediately
09:14 - so we cannot just write something like
09:16 - canvas
09:17 - dot draw image and just send the image
09:21 - and
09:22 - the position that we want
09:26 - because
09:27 - that just
09:28 - won't work if i open the index.html file
09:32 - you see that nothing is displayed on
09:34 - screen even though we have no errors
09:37 - so
09:38 - only for testing and to see that
09:40 - everything that we've done so far is
09:42 - working i will set a timeout
09:45 - down here below
09:47 - and inside of the callback function i
09:50 - will paste
09:51 - this code and set
09:54 - the timeout for one second
09:58 - and let's see if now that
10:02 - that is working yes
10:06 - okay so now you can see that the
10:08 - background image
10:10 - is displayed on screen
10:13 - let's check the clear method
10:16 - that we wrote before
10:18 - so i will just write
10:20 - canvas dot clear
10:24 - and let's refresh the page
10:27 - and you see now that the canvas is empty
10:32 - so let's go back to our code and
10:34 - delete this line because i prefer to see
10:37 - something displayed on screen before we
10:39 - finish the first part
10:41 - and let's see that everything works
10:44 - yeah great
10:46 - as you can see the background image was
10:48 - drawn on the canvas but there's only a
10:50 - minor issue you can see that the image
10:52 - is a little bit cropped down here
10:55 - so in order to fix that i will change
10:59 - the dimensions of the canvas to match
11:01 - the dimensions of the background image
11:04 - so the width should be
11:06 - 1500
11:08 - and the height should be
11:11 - 825
11:14 - now
11:15 - as i refresh the page you can see
11:18 - that the image is no longer cropped
11:22 - so let's go back to our code and delete
11:24 - all those lines we used for testing
11:27 - let's save and now create a new
11:29 - javascript file that will call assets
11:32 - dot js
11:35 - here eventually i'm going to declare
11:37 - functions that will help me deal with
11:39 - loading the assets for the game but
11:42 - first i'm going to create a new object
11:44 - and let's call this object
11:46 - sprites
11:48 - and it will be equal
11:50 - and empty object
11:53 - let's create another variable that we'll
11:55 - call assets
11:57 - still
11:58 - loading
11:59 - and let's set it to zero
12:03 - let's declare a new function and let's
12:06 - call this function load assets
12:08 - and this function is going to take as an
12:10 - argument a callback function
12:12 - so once it finishes to load all the
12:14 - assets it's going to activate this
12:16 - callback function
12:18 - [Music]
12:21 - here i want to write something like
12:22 - sprites.back
12:24 - equals
12:26 - load sprite and i want to pass the file
12:31 - name which is located on the sprites
12:33 - folder in my case that will be spr
12:36 - underscore background
12:38 - dot png
12:41 - in order for that to work i will need to
12:44 - declare another function here
12:47 - and i will call this function load
12:49 - sprite and this function will take as an
12:51 - argument
12:52 - file name
12:55 - and the first thing it's going to do is
12:57 - to increase the number of assets that
13:00 - are still loading
13:02 - then i will create
13:05 - an image for this sprite
13:08 - sprite image equals new
13:11 - image object
13:13 - and i'm going to define the source
13:17 - of this image to be the path of the
13:21 - sprites folder which is assets
13:24 - slash sprites
13:26 - slash
13:28 - plus the file name
13:32 - now i'm going to use the unload property
13:36 - of the image object
13:38 - and i'm going to
13:40 - define
13:41 - that
13:42 - once the image is done loading
13:45 - i want to
13:47 - decrease the number of assets that are
13:49 - still loading
13:54 - now i will return
13:56 - i will return the image
14:02 - we can use the load sprite function that
14:03 - we just wrote to load all the sprites of
14:06 - the game
14:07 - but for now i will load just one more so
14:10 - sprites dot
14:12 - stick equals load sprite
14:16 - and i will send the file name of the
14:18 - stick image
14:20 - so that will be um spr
14:23 - stick dot png
14:28 - and we cannot activate the callback
14:30 - function yet because we cannot know for
14:32 - sure
14:32 - that all the images are downloading
14:35 - um in order to validate that
14:38 - we'll need to create another function
14:40 - and i will call this function assets
14:44 - loading loop
14:47 - and this function will get as an
14:48 - argument
14:49 - the same callback function
14:52 - that we received on the load assets
14:56 - function inside this function
15:00 - i'm going to do something if
15:02 - assets are still loading
15:05 - and
15:07 - else i'm going to do something else
15:10 - so if the assets are still loading i
15:12 - want to enter the loop again so i'll use
15:15 - the request animation frame method of
15:18 - the window object in order to send the
15:21 - assets loading loop as a callback
15:23 - function and i'm going to bind
15:27 - this and the argument that i got
15:30 - which is
15:31 - the callback
15:36 - else i want to activate the callback
15:39 - function
15:41 - so i will just call
15:43 - callback
15:47 - finally we'll need to call the assets
15:49 - loading loop from within the load assets
15:51 - function so let's just copy that and
15:54 - paste it here and let's just send the
15:57 - callback function that we got as an
15:59 - argument
16:01 - and that's it
16:03 - well for now that's pretty much what we
16:05 - need in assets.js we're going to use all
16:08 - the code that we wrote here very soon
16:11 - let me organize my code a bit before we
16:14 - move on so i just delete some of the
16:16 - spaces here and add more spaces here and
16:20 - here and maybe
16:23 - there
16:24 - all right so we are done
16:26 - now let's create the most important
16:28 - object on our project
16:30 - and for that i'm going to create a new
16:32 - file and call this file game.js
16:35 - and here i'm going to define a function
16:37 - constructor
16:39 - and
16:40 - call this function constructor game
16:43 - the game object will contain three
16:45 - methods let's write them down so the
16:48 - first one is game
16:50 - dot prototype dot init
16:53 - so here we will initialize the game
16:57 - the second one will be
16:59 - game
17:00 - dot prototype dot start
17:03 - so you can imagine that
17:05 - here we will start the game
17:09 - and the third one
17:10 - is game dot prototype dot main loop
17:14 - and in this function
17:16 - pretty much everything is going to
17:18 - happen
17:20 - before i write anything inside those
17:22 - methods i want to create another object
17:26 - and this object will be called the game
17:29 - world
17:33 - let's create another function
17:35 - constructor and call this function
17:38 - constructor game world
17:42 - the game world will be an object that
17:44 - will contain all the physical objects of
17:46 - the game
17:47 - and in each frame of animation it will
17:49 - be responsible to update them and to
17:52 - draw them on the canvas
17:54 - in order for him to do that we'll need
17:56 - to define some methods so the first
17:59 - method will be
18:01 - the
18:02 - update method
18:08 - and the second method should be
18:12 - the
18:13 - draw method
18:22 - now i'll go back to the game.js file and
18:25 - here on the init method i'm going to
18:28 - create a new member for the game object
18:32 - and i'm going to call this member game
18:34 - world
18:36 - and this game world will be
18:38 - the new
18:39 - game world object that we created
18:44 - now down here i'm going to create a new
18:47 - object
18:48 - that will be
18:49 - of the type game
18:51 - so i'm going to call this object pool
18:54 - game
18:55 - and it will be equal a new
18:57 - game object
19:00 - let's now deal with the start method of
19:03 - the game object
19:05 - so here the first thing i want to do is
19:08 - to call the init function
19:11 - and then i want to call the
19:14 - main loop
19:20 - and on the main loop the first thing we
19:23 - want to do is to clear the canvas and
19:26 - for that we can use the canvas object
19:28 - with that we created in the previous
19:30 - video
19:31 - so just
19:32 - write canvas dot clear
19:35 - after that we want to update the game
19:38 - world so we can just use
19:41 - pull game
19:42 - in order to approach the game world
19:46 - and then
19:48 - to call the update function
19:51 - and then we want to draw the game world
19:54 - so we can go to pool game
19:56 - dot game world
19:58 - dot
19:59 - go
20:01 - and then we'll use
20:03 - the request animation frame method of
20:06 - the window object the same method that
20:08 - we used before to call the same loop
20:12 - so
20:13 - let's just write request animation frame
20:16 - and we can call
20:18 - pull game
20:19 - dot main loop
20:25 - now i'll go back to the gameword.js file
20:28 - and here on the drill method i'm going
20:31 - to use the canvas object in order to
20:35 - [Music]
20:36 - draw
20:37 - an image and the image will be
20:40 - the background image so sprites dot
20:44 - background
20:45 - and the position will be
20:48 - x
20:49 - will be
20:50 - zero
20:51 - and y will be zero
21:00 - the next step is to open the index.html
21:03 - file and to add references to all of the
21:06 - script files that we wrote
21:08 - so i won't waste your time i will just
21:10 - paste that here
21:12 - and another thing that we'll need to do
21:14 - is to write
21:15 - a small script and in the script
21:19 - um
21:20 - i'm going to call the load
21:23 - assets
21:24 - function that we wrote
21:26 - and
21:27 - as an as a callback i'm going to pass
21:31 - pull game dot start
21:34 - so when it finishes loading all the
21:37 - assets
21:38 - it's going to call this function
21:40 - this method on the pull game object that
21:44 - will start the game
21:48 - let's try and open the index.html file
21:51 - on our browser and let's see if we get
21:53 - something
21:54 - well no let's check for errors
21:58 - and
21:59 - yeah
22:00 - this dot init is not a function add game
22:03 - dot start
22:04 - oh okay
22:06 - so this is a common issue in javascript
22:09 - what happened here is that we passed a
22:12 - function to another object to activate
22:16 - and in this process
22:18 - the this reference
22:19 - changed
22:20 - so now that this reference is no longer
22:23 - the pull game
22:24 - it is the window object
22:26 - because load assets is a function
22:30 - that sits in the window object
22:32 - um in order to fix that we need to go to
22:35 - the
22:36 - game.js file and here instead of calling
22:40 - this dot init we'll call
22:44 - pull game dot init
22:46 - and
22:48 - pull game dot main loop
22:51 - let's go back to our browser and refresh
22:54 - and now you can see that the background
22:56 - image is displayed on screen
23:01 - to make it interesting let's add another
23:03 - object to our game
23:05 - i'll go back to our code and here i will
23:08 - create a new file and i'll call this
23:10 - file stick
23:12 - dot js and another function constructor
23:15 - so function
23:17 - stick
23:18 - and the stick object will have fun for
23:21 - now
23:22 - a position so this
23:25 - dot position
23:27 - equals
23:28 - um
23:29 - x will be
23:31 - 0 and
23:33 - y will be
23:35 - 400
23:40 - the stick object will also have an
23:42 - update method and a draw method let's
23:45 - write them down
23:46 - so
23:48 - stick
23:49 - dot prototype dot
23:52 - update
23:53 - equals a function
23:59 - and
24:00 - stick
24:01 - dot prototype dot draw
24:05 - equals function
24:07 - and inside the draw function
24:09 - i want to
24:11 - call the canvas object and to draw
24:14 - an image
24:16 - and the image that i'm going to draw
24:18 - is the
24:19 - sprite of the stick that we loaded
24:21 - before
24:22 - so sprites
24:25 - dot stick
24:27 - i want to draw it
24:29 - on the current position of the stick so
24:32 - let's use this dot position
24:40 - inside the update method i just want to
24:42 - write some stab code in purpose of
24:44 - testing so let's just leave a comment
24:47 - here
24:49 - and i will
24:51 - mention that it is just for testing
24:54 - and i'm going to increase in every frame
24:57 - of animation
24:59 - the
25:00 - x value of the position of the stick by
25:03 - one so
25:05 - this
25:06 - dot position
25:08 - dot x
25:09 - plus plus
25:11 - now in our game world let's add a member
25:16 - and
25:17 - this member will be the stick
25:20 - and it will be a new
25:23 - stick object
25:26 - and
25:30 - inside the update function
25:32 - i'm going to call this dot stick
25:37 - dot
25:38 - update
25:39 - and after i will draw
25:42 - the background image i want to call
25:45 - this dot stick
25:48 - dot joe
25:52 - the final step for now is to open the
25:54 - index.html file and to add a reference
25:57 - to the stick.js file that we wrote
26:00 - so script
26:01 - src
26:03 - and here i'm going to write
26:05 - stick.js and save it
26:11 - i will open the index.html file on my
26:14 - browser
26:15 - and now you can really see the main loop
26:18 - in action
26:20 - so let's delete those lines of code that
26:21 - we use for testing let's save and now
26:25 - create a new javascript file that will
26:27 - call vector2.js
26:30 - here i will define a new function
26:32 - constructor that its purpose is to help
26:35 - us deal with arithmetic operations
26:37 - between vectors
26:39 - let's call this function constructor
26:43 - vector
26:44 - 2
26:46 - and it will get two arguments so the
26:48 - first one will be an x and a y
26:53 - a vector2 object will have two members
26:56 - that goes by the same names as those
26:59 - arguments
27:00 - so let's write them down this dot x and
27:03 - it will be equal
27:05 - if type of
27:08 - the x argument is
27:10 - different from
27:12 - undefined
27:14 - it will be equal
27:16 - the value of the x argument else
27:21 - it will be a zero
27:23 - and let's do the same for
27:26 - the y
27:28 - so
27:29 - this dot
27:30 - y if type of y is not undefined that
27:34 - will be equal
27:36 - a y the y argument
27:39 - and else that will be a zero
27:43 - let's save
27:45 - and that will do for now
27:47 - in the future we'll add more
27:48 - functionality to the vector2 definition
27:52 - let's now create a new folder and call
27:55 - this folder
27:56 - input
27:57 - and inside this folder i'm going to
27:59 - create a new file that i'll call
28:03 - button state
28:05 - dot js
28:07 - the button state object will be a simple
28:10 - object that will indicate whether a
28:13 - certain button is pressed or down so
28:16 - let's create a new function constructor
28:19 - new function constructor and call this
28:23 - function constructor button state
28:27 - and let's
28:29 - initialize
28:31 - this dot down to be false
28:35 - and this dot pressed
28:38 - to be false
28:43 - now i will create another file inside
28:45 - this folder
28:47 - and this file will go by the name of
28:49 - mouse.js
28:50 - here obviously we will handle our mouse
28:53 - input and for that i will need a mouse
28:56 - handler
28:57 - so let's define a mouse handler object
29:02 - and the mouse handler will contain
29:05 - three button states
29:06 - one for every button on our mouse
29:09 - and a position that will be of type
29:12 - vector 2 the type that we created before
29:15 - so let's write it down
29:16 - this
29:18 - dot
29:19 - left equals new
29:22 - button state
29:23 - this dot
29:25 - middle
29:27 - equals new
29:28 - button
29:29 - state
29:31 - and
29:33 - this dot
29:35 - right equals new
29:37 - button state object
29:41 - now the position
29:43 - this dot position
29:46 - will be initialized
29:47 - to
29:49 - a new
29:50 - vector 2 object
29:55 - and now
29:56 - i will define
29:58 - that once there is a mouse movement so
30:01 - on
30:02 - mouse move
30:04 - we'll call a function that we'll write
30:08 - just in one second
30:10 - so
30:11 - i will call this function
30:13 - handle mouse
30:15 - move
30:17 - and document
30:19 - on
30:21 - mouse
30:22 - down
30:23 - i will call another function
30:25 - handle
30:26 - mouse
30:28 - down
30:30 - and finally
30:32 - document on
30:35 - mouse
30:36 - up i will call
30:38 - handle
30:40 - mouse
30:42 - up
30:43 - let's save
30:46 - all right so now let's create a new
30:49 - object of the type mouse handler that we
30:51 - just defined
30:52 - so
30:54 - i will
30:55 - call this object mouse
30:58 - let mouse
31:00 - be equal a new
31:03 - mouse handler
31:05 - and now i will implement the functions
31:08 - that we wrote here so handle mouse move
31:12 - i will just create a new function and i
31:15 - will call it handle mouse move
31:17 - and by default it's going to get an
31:19 - event
31:21 - so
31:23 - let's fetch let's fetch from the event
31:26 - the mouse
31:28 - position
31:29 - so we can get the mouse x value
31:33 - by
31:35 - going to
31:36 - the page
31:38 - x property inside the event object
31:42 - so let y
31:45 - be equal
31:46 - the event dot
31:49 - page
31:50 - y
31:52 - and now we can set the mouse
31:55 - dot
31:57 - position
31:58 - to be
31:59 - a new vector
32:02 - new vector 2
32:03 - and send the arguments x and
32:07 - y
32:09 - let's save
32:13 - okay so let's move on to the next
32:15 - function
32:16 - handle mousedown
32:18 - and this function is also going to get
32:21 - an event as an argument
32:24 - and before i write anything inside this
32:27 - function i want to call the handlemouse
32:30 - move
32:31 - function and send the same event
32:34 - so i will get the current position of
32:36 - the mouse
32:38 - then let me paste a little bit of code
32:41 - here and then i will explain exactly
32:43 - what is going on inside this code
32:47 - if a certain button on our mouse is down
32:50 - we would like to set the down property
32:53 - of the corresponded button state to be
32:56 - true we also want to check if the button
32:59 - was down before that because if not we
33:02 - want to set the pressed property
33:05 - of the same button state to be true
33:08 - and also the event object as an
33:11 - attribute that is called which
33:14 - that indicates
33:16 - uh which button on our mouse is
33:19 - currently down
33:20 - and uh if
33:23 - the witch attribute is 1 that means that
33:26 - the left button on our mouse is down
33:29 - if it is 2 that means that the middle
33:31 - button on our mouse is down
33:34 - and if it is 3
33:36 - that means that the right button on our
33:38 - mouse is down
33:40 - so that's exactly what you see here in
33:42 - the code i would just fix
33:45 - those underscores here
33:47 - so let's move on to the next function
33:49 - and i will just
33:51 - paste that here
33:52 - and as you can see it is very similar uh
33:56 - we just
33:57 - check
33:58 - uh the attribute on the event to see
34:01 - which
34:03 - button was released and we set the down
34:06 - property of the corresponded button
34:09 - state
34:10 - to be false
34:12 - just one final thing that we need here
34:15 - is an option to reset the mouse input
34:20 - so i will define another
34:23 - function or actually method
34:25 - on the prototype
34:28 - of mouse handler
34:30 - and i will call this function
34:32 - this method reset that will be equals a
34:35 - function
34:37 - and here i want to set
34:40 - this dot
34:42 - left
34:44 - dot pressed to be false
34:47 - this dot middle
34:50 - dot pressed
34:51 - to be false
34:54 - and this dot
34:56 - right
34:58 - not pressed to be false
35:05 - on our html file i want to add
35:08 - references to all of the script files
35:10 - that we wrote so i will just paste that
35:14 - here and
35:17 - another thing that i want to do
35:20 - is to
35:22 - reset the mouse input in every iteration
35:26 - of the main loop
35:27 - so here after i draw the game world i
35:31 - want to call
35:33 - mouse dot reset
35:37 - the last thing i want to do
35:39 - just to test that everything that we've
35:41 - done so far is working
35:43 - i want to set the position
35:46 - of the stick
35:49 - to be equal
35:51 - the mouse
35:53 - position
35:56 - and i want to
35:58 - do something
36:00 - if
36:01 - mouse
36:02 - dot
36:03 - left
36:04 - is
36:05 - pressed
36:07 - so
36:08 - pressed
36:10 - so if that happens
36:12 - i want to log a message so
36:15 - console.log
36:17 - and i will just
36:19 - um
36:20 - write pressed
36:23 - left
36:25 - okay
36:27 - and i will mention that it is just for
36:30 - testing as we always do
36:33 - so now when i open the index.html file
36:36 - on my browser
36:38 - you could see that the stick object
36:41 - is tracking the movement
36:43 - of the mouse
36:45 - and if i inspect that you'll see that
36:48 - every time i click the left button on my
36:51 - mouse
36:53 - you'll see a new message here in the
36:56 - console
36:57 - so of course that's not the kind of
37:00 - behavior
37:01 - we want in our game
37:03 - but that's an important step because now
37:06 - we know how to handle the mouse input
37:10 - there is something that bothers me about
37:12 - this implementation because even though
37:14 - the stick and the mouse share the same
37:16 - position you can see that the mouse is
37:19 - all the way to the left and it's not on
37:21 - the center of the stick
37:23 - the reason that happens is because
37:26 - when we draw the stick using the canvas
37:29 - context we give it a position and the
37:31 - canvas context treats this position as
37:34 - the top left
37:36 - corner
37:37 - of the image
37:39 - so in order to fix that we'll need to
37:41 - introduce a new vector that we'll call
37:44 - the origin of the object
37:48 - in the canvas.js file we'll change the
37:51 - implementation of the draw image method
37:54 - we'll add another argument that we'll
37:56 - call origin
37:59 - before we do anything else here let's
38:02 - just validate
38:03 - that the position that we got to this
38:05 - function
38:06 - is not null or undefined so if it is we
38:10 - should set it to be a new vector to
38:12 - object
38:13 - and that will mean that its x and y
38:16 - values will be zeros let's do the same
38:19 - for the origin so if not origin
38:23 - origin will be
38:25 - a new vector2
38:27 - object
38:30 - and now we can use the canvas context
38:33 - save method
38:35 - in order to save the current state of
38:37 - the context then we can make changes in
38:39 - it and then we can restore it to the
38:41 - same state so this dot
38:45 - canvas context
38:48 - dot save
38:51 - and now we can
38:52 - translate the context to a different
38:55 - position
38:57 - so this dot canvas context dot translate
39:02 - position dot x and position dot y
39:11 - now in the draw image method of the
39:13 - canvas context we don't need to send the
39:15 - position anymore we can just delete that
39:18 - and instead
39:19 - send the origin
39:21 - that means where we want to draw our top
39:24 - left corner so minus dot x and minus
39:28 - origin dot y and that's of course
39:29 - relative to the position that we are in
39:32 - right now
39:33 - and now we can restore the canvas
39:36 - context
39:37 - to the last
39:39 - saved state
39:42 - so now let's go back to the stick.js
39:45 - file and let me fix this position to be
39:48 - a new vector2 object
39:51 - and let's set it randomly to be 400 by
39:55 - 400
39:56 - and let's add a new property
39:59 - this dot origin
40:02 - and set it to be a new vector
40:04 - and for now we'll set it to be 500 by
40:08 - 10.
40:10 - and now in the draw method of the stick
40:12 - object i can just add this origin
40:17 - and let's see what happens
40:20 - so let's refresh the browser and now you
40:22 - can see that the pointer
40:24 - is on the middle of the stick
40:28 - on the assets.js file
40:31 - let's load another sprite and let's call
40:33 - the sprite white bowl
40:36 - and obviously that will be the sprite of
40:38 - the white ball and the image is located
40:40 - on spr underscore
40:43 - white ball dot png
40:49 - now i will create a new file that go by
40:51 - the name of ball.js and here i'm going
40:54 - to define a new constant that i'll call
40:57 - ball origin and i'm going to set it to
41:00 - be a new vector of 25 by 25
41:05 - now i will define a new function
41:06 - constructor that i will call bo
41:09 - and it will get as an argument a
41:11 - position
41:12 - and i will set
41:14 - uh this dot position
41:16 - to be the position that we got as an
41:18 - argument
41:20 - and let's write two functions for the
41:22 - ball object so ball dot prototype
41:25 - dot
41:26 - update
41:28 - equals new function
41:31 - and
41:32 - ball dot
41:34 - ball dot prototype
41:37 - dot draw
41:39 - equals a function
41:42 - and here i'm going to call the canvas
41:45 - and to
41:46 - draw
41:47 - an image and just for now i'm going to
41:50 - draw the white balls image
41:53 - even though not all the balls in the
41:55 - game are going to be white but it is
41:58 - just for now
42:00 - and
42:01 - the position will be
42:03 - this dot position
42:06 - and the origin will be the ball's origin
42:09 - constant
42:14 - so let's go to the index.html file and
42:17 - add a reference to the script file that
42:19 - we just wrote
42:21 - so here i will write
42:24 - script src
42:26 - and
42:27 - bo.js
42:32 - now let's go to the game world and add a
42:34 - new member
42:35 - and let's call this member white ball
42:39 - and it will be equal a new ball object
42:44 - with
42:45 - a new position
42:51 - on the update method i want to
42:54 - update
42:56 - our new member so this dot white ball
42:59 - dot update
43:02 - and inside the drill
43:04 - method i want to draw the white ball so
43:07 - this dot white ball dot draw
43:11 - back in the browser let's refresh and we
43:14 - can see
43:15 - that the white ball is drawn on the
43:17 - canvas
43:18 - back in our code let's go to the
43:20 - stick.js file and i will change the
43:23 - function constructor of the stick
43:25 - to get a position from outside so this
43:28 - dot position will be equal the position
43:31 - argument that we got
43:33 - and also i'm going to define a new
43:35 - constant
43:36 - that i'm going to call stick origin
43:41 - and it will be equal a new vector 2
43:45 - of
43:47 - 970
43:49 - by 11.
43:52 - now on the drill
43:54 - function
43:57 - i don't need to send this dot origin
43:59 - anymore i will send the stick origin
44:02 - and i'm going to delete
44:04 - the this dot origin
44:07 - member
44:08 - now i'll go to the game world and here
44:12 - i'm going to set the position of the
44:14 - stick to be the same
44:16 - as the position of the white ball
44:21 - and back in stick.js
44:24 - i will comment out
44:27 - all this code that we
44:29 - wrote for testing
44:31 - back in our browser let's refresh
44:33 - and now you can see the positions of the
44:36 - white ball and the stick
44:38 - don't worry in few moments you will
44:41 - realize why we did all that
44:45 - okay so there's another aspect that i
44:47 - want to add to the game and it is the
44:48 - rotation of the stick and i found this
44:51 - really good article online that explains
44:52 - exactly what i'm going to do in the code
44:56 - um
44:57 - so i'm going to leave a link down below
44:59 - to this article and also explain it
45:02 - briefly so
45:06 - let's say that here instead of a cat we
45:09 - have a stick
45:10 - and this is the position of the mouse
45:12 - so we want to rotate the stick so it
45:15 - will point towards the mouse
45:18 - how are we going to do that we need to
45:21 - find this angle for that
45:23 - so in order to find this angle we need
45:25 - to find the opposite and the adjacent
45:29 - and in order to find the opposite we can
45:31 - subtract the
45:34 - stick y position from the mouse y
45:37 - position
45:38 - and
45:39 - in order to find the adjacent we can
45:41 - subtract the stick x position from the
45:45 - mouse x position
45:48 - so
45:49 - um
45:50 - we know that tangents of this angle is
45:55 - opposite divided by adjacent
45:58 - so we can just apply
46:01 - the arctangent
46:03 - function on both sides and then we can
46:06 - find this angle
46:11 - back in stick.js let's delete those
46:13 - lines of code that we use for testing
46:16 - and let's add a new property
46:18 - that we'll call this dot rotation and
46:21 - initially it will be 0. now let's add a
46:25 - new method to the stick object
46:27 - and let's call this method
46:29 - update rotation
46:32 - and that will be equal a function
46:36 - now we need to calculate the opposite
46:40 - so let opposite b
46:42 - mouse dot position dot y
46:46 - minus this dot position
46:49 - dot y
46:51 - and the adjacent
46:54 - b
46:56 - mouse
46:58 - dot position dot x
47:01 - minus
47:02 - this dot position dot x
47:05 - and now we can use the arc tangent
47:08 - function
47:09 - inside the meth
47:12 - class
47:13 - so math 8 and 2
47:16 - and
47:17 - we can send the opposite and the
47:19 - adjacent
47:20 - and we'll get the angle
47:23 - to this dot rotation
47:26 - and inside the update method i'm going
47:28 - to call
47:30 - this dot update rotation
47:34 - finally we'll open the
47:37 - canvas.js file
47:39 - and
47:41 - update the draw image method so it will
47:46 - get also a rotation
47:48 - and let's give it
47:50 - a default value of zero
47:53 - and here after we save the canvas
47:55 - context state
47:57 - we can rotate the canvas context
48:01 - so this.canvascontext.rotate
48:04 - and here i'm going to send
48:06 - the rotation
48:10 - and inside stick.js i'm going to send
48:14 - this dot rotation
48:18 - to the draw image method
48:24 - let's save and now go back to our
48:26 - browser and refresh and now you can see
48:29 - that the stick is rotating
48:31 - so it points towards the position of my
48:34 - mouse
48:39 - okay so let me give you a little
48:41 - challenge if you code alongside with me
48:43 - you already have all the tools to
48:45 - implement the next step
48:47 - here you'll see that when i press the
48:48 - left button on my mouse
48:50 - the stick is being pulled away from the
48:52 - white ball and once i release it it
48:55 - shoots the ball towards the position of
48:57 - the mouse so let me demonstrate
49:06 - okay great
49:07 - so give it a shot
49:10 - here in vector2.js instead of validating
49:12 - that x and y are not undefined we can
49:15 - just use some default parameters
49:18 - so let's change that
49:20 - and
49:21 - x will be 0 by default and y will be
49:25 - 0 as well
49:27 - and let's add another method to the
49:30 - vector2
49:32 - class
49:33 - so
49:34 - vector2.prototype.copy and that will be
49:37 - equal a new function
49:39 - and here i will return
49:41 - a new vector2 with the same properties
49:45 - as this vector so this dot x and this
49:48 - dot y
49:51 - in stick.js i will bring back this dot
49:54 - origin and i will set it to be
49:57 - a copy of the stick origin constant so
50:00 - stick origin dot copy
50:03 - and in the drill method i will send this
50:06 - dot origin in stack instead of the stick
50:09 - origin
50:11 - all right i'll zoom in because it's a
50:13 - bit difficult to see the code this way
50:16 - all right that's much better
50:18 - now i will add another property that i
50:21 - will call this dot power and i will set
50:24 - it initially to be 0
50:26 - and i will create another method for the
50:29 - stick class
50:31 - that i'll call
50:33 - increase power
50:36 - and it will be equal a function
50:41 - and here i'm going to increase
50:43 - the power but by
50:46 - let's say 100
50:48 - and the origin this dot origin i will
50:51 - increase it by five
50:55 - no actually this dot origin.x
50:59 - so
51:01 - now in the update method
51:04 - i'm going to
51:05 - define that
51:06 - once the left button on the mouse is
51:09 - down
51:12 - i want to
51:13 - increase
51:15 - the power so this dot increase power
51:19 - and let's go to the browser
51:22 - and see the effect that it makes
51:26 - okay let's refresh
51:28 - and now when i click the left button on
51:30 - my mouse you can see that that the stick
51:33 - is being pulled away from the white bowl
51:37 - here in the function constructor of the
51:38 - stick i'm going to send another argument
51:40 - that i will call on shoot and this
51:43 - argument will be actually a function so
51:45 - let's set
51:46 - this dot on shoot to be
51:48 - on shoot and here in the update method
51:52 - if the left button is not down anymore
51:55 - and this dot power is greater than zero
51:58 - i want to call this dot shoot not
52:02 - not on shoot no
52:04 - i want to call a function
52:07 - that i will define
52:08 - right here a method actually so stick
52:12 - dot prototype dot shoot
52:15 - equal a function
52:18 - and inside this function i'm going to
52:20 - call
52:22 - this
52:23 - dot
52:24 - on shoot
52:25 - and i'm going to send
52:28 - this
52:28 - dot
52:30 - power and this dot rotation
52:35 - now let's open the ball.js file
52:37 - and here i'm going to add another
52:39 - another method to the bull class so
52:43 - ball.prototype.shoot and that will be
52:45 - equal function that will get
52:48 - power
52:49 - and
52:50 - rotation
52:53 - and just for now let's
52:55 - log a message to the console so
52:58 - console.log shoot
53:03 - and
53:04 - in the game world
53:06 - uh when we create a stick object let's
53:09 - send as an argument this function that
53:11 - we created
53:13 - just now this dot white ball dot shoot
53:17 - back in stick.js
53:19 - after we activate the onshoot function
53:22 - let's
53:22 - set this dot power to be zero
53:28 - back in the browser now you'll see that
53:30 - every time i release the left button on
53:32 - my mouse a new message is logged into
53:34 - the console
53:37 - back in stick.js i'm going to set
53:39 - another constant that i will call the
53:41 - stick
53:42 - shot origin
53:45 - and it will be a new vector of 950
53:49 - by 11.
53:54 - and now in the shoot function
53:57 - i'm going to set
53:59 - this dot origin
54:02 - to be a copy of the shot origin
54:12 - now back in the browser let's refresh
54:14 - and now you'll see that every time i
54:17 - release the left button on my mouse
54:19 - it seems like the stick is moving
54:21 - forward uh towards the ball
54:24 - all right so in the shoot method of the
54:26 - ball object we would like to find the
54:28 - velocity that the ball should have
54:31 - and we get two parameters the first one
54:33 - is the power and the second one is the
54:34 - rotation
54:35 - so in this drawing let's assume that
54:37 - this is the center of the ball
54:39 - and here is the position of my mouse
54:43 - so we know that
54:45 - this angle is the same as the rotation
54:47 - that was sent into this method
54:50 - okay so if we'll assume that the
54:52 - distance between this point and this
54:55 - point is 1
54:57 - we know for sure
54:58 - that the velocity should be a new vector
55:01 - 2
55:02 - that its x value will be cosine of this
55:06 - angle
55:07 - and its y value will be sine of the same
55:11 - angle
55:14 - here in the game world i'm just
55:16 - going to bind
55:18 - this shoot function that we sent as an
55:20 - argument
55:21 - uh to this dot white ball just to make
55:24 - sure that we won't lose the reference
55:27 - to uh the white ball
55:30 - and here in the in ball.js i'm going to
55:34 - add a new property that i will call this
55:36 - dot velocity
55:38 - and it will be a new vector to
55:41 - object
55:43 - and
55:44 - inside the shoot method
55:47 - i'm going to set
55:50 - this dot velocity
55:52 - to be a new vector to
55:56 - that its x value will be
55:59 - math
56:01 - dot cosine
56:02 - of the rotation
56:06 - and its y value should be
56:09 - math dot
56:10 - sine of the rotation
56:16 - now inside the update method i want to
56:18 - add the velocity to the position of the
56:21 - ball
56:22 - so i'm going to write this dot position
56:24 - dot add to
56:27 - and to send this dot velocity
56:31 - and of course that now i need to
56:32 - implement the add to method inside the
56:36 - vector2 class
56:38 - so
56:38 - here
56:39 - i will write vector2
56:42 - dot prototype
56:44 - dot add two
56:47 - and it will get another vector as an
56:49 - argument
56:51 - and here i'm going to set uh this dot x
56:54 - to be this dot x plus
56:56 - vector vector.x
56:58 - so this dot y
57:00 - plus equal
57:02 - vector
57:03 - dot y
57:06 - and
57:07 - i need to fix that so that will be equal
57:10 - a function
57:14 - and now back in the browser when i shoot
57:16 - the ball
57:17 - you'll see that it goes slowly towards
57:20 - the position of the pointer
57:23 - so now in the shoot method we can use
57:25 - the power that we got as an argument
57:28 - and we can multiply the velocity
57:31 - by
57:32 - this power
57:34 - and
57:36 - in the game world i'm going to introduce
57:38 - a new constant that i will call
57:42 - delta
57:44 - and
57:47 - i will set it to be
57:49 - 1 divided by 100
57:52 - and
57:53 - this will represent how much i want to
57:55 - update on each iteration
57:59 - so it's a fraction
58:01 - that will send to the update method of
58:04 - the ball
58:06 - so it will only update um a fraction of
58:10 - the velocity so this dot velocity
58:13 - dot mult
58:16 - and we'll send the delta and of course
58:17 - that now we need to implement the mode
58:21 - method on the vector2 class
58:23 - so vector2
58:26 - dot prototype
58:28 - dot
58:30 - mold
58:32 - and it will be a function
58:34 - that we get as an argument
58:37 - a scalar
58:44 - and will return
58:46 - [Music]
58:48 - new vector 2
58:51 - of
58:52 - this dot x multiplied by the scalar
58:56 - and this dot y
58:59 - multiplied by the same scalar
59:06 - now back in ball.js we can use the same
59:09 - method in order to simulate
59:12 - friction
59:13 - so we can use we can set
59:17 - this dot velocity
59:19 - to be
59:21 - um
59:22 - to be this dot velocity
59:25 - dot
59:27 - multiplied
59:29 - by
59:30 - zero point
59:35 - and now let's test the results on our
59:37 - browser
59:38 - so let me refresh
59:40 - and let's shoot the ball
59:42 - and that looks um quite nice
59:45 - so that's it for this video thank you
59:48 - very much for watching it and stay tuned
59:50 - for more goodbye

Cleaned transcript:

hi everybody and welcome to the first tutorial in a series that will guide you through building your own 8ball pool game using javascript and html5 so before we begin i would like to take some time to give a credit to a book that i read that inspired me of making this game this book is called building javascript games for phones tablets and desktop and it is written by aryan aegis i'm sorry if i'm pronouncing the name wrong anyway it is a really great book and many of the topics that i'm going to talk about during these tutorials are taken from here and if you would like to get a deeper understanding and knowledge about those topics i really recommend you to read this book you can have a look at my code by getting to my github page and find this repository that contains all the code for this project you can even go down here and you'll find a working demo that you can enter and play and experience the game all by yourselves all right so let's move on so the first thing we will do is to create a new folder for this project and maybe we should give it a significant name something like classic full game now i will open my preferred text editor which is in my case visual studio code and drag the newly created folder into it let's now create a new file and the first file i'm about to create is the html file let's give it a name index.html now there are many neat ways to create the structure of an html document with visual studio code you can just write html and choose this option and you'll see that the structure is already built for you but i'm going to delete all that since i promised to show you how to build the game from scratch so i'm gonna write everything myself let's start with the html tag and inside of that i will create a head tag and a title and let's give it the same title as the folder name classic pool game um let's create a body tag and here we will create the canvas element which will have an id of screen and uh with that will change in the future since the canvas is going to be adaptable to the screen size but as of right now i'm going to keep it 2000 height will be 800 for now and that's it the html document is pretty much complete for this game after we've created the canvas element on our html file let's now create a javascript object that will let us interact with this canvas in order to do so we will need to create a javascript file let's call this file canvas dot js in this file i'm going to define a function constructor and let's call this function constructor canvas um to d the object that eventually will be created using this function constructor will have two data members the first one will be this dot canvas which will be the canvas itself and i'm going to fetch that from the html using document dot get element by id and here i'm going to send the id that i gave to the canvas before screen as you can see it is the same id as the canvas on the html file so the second member is the canvas context and the canvas context is an object that has certain functionalities that will make our lives much easier interacting with the canvas so in order to get the canvas context we'll need to approach the canvas element and ask for the context get context here i'm going to send 2d since the game is going to be twodimensional let's think about the functionality we would like a canvas 2d object to have as of right now i can think of two things i would like to clear the canvas using this object and i would like to draw an image on the canvas using this object in order to define this behavior we will need to use methods i will define the methods on the prototype of canvas 2d let's do it right now so canvas 2d dot prototype dot clear equals a function and here i'm going to use uh the clear rect function of the canvas context let's write canvas context dot clear rect and it will need to get a an x value and a y value a width and height so the x will be zero since i want to clear all of the canvas and the y is zero and the width will be the kind of width dot width and the height is going to be the canvas height canvas dot height all right so let's move on to the draw image method i'm going to define it here canvas 2d dot prototype drill image and that will be equals function that will get an image and a position and it will use the canvas context to draw that image on the given position so i will need to approach the canvas context and ask it nicely to draw the image for us um i will send the image that i got and position dot x and position dot y so the next step is to see that everything that we've done so far is actually working as expected in order to do so i will go to the index.html file and add a reference to the script that we just wrote so script src and that will be equals canvas.js and that's it the second thing that we'll need is an image to check the draw image method and i already dragged the assets folder into the new folder that we've created for this project in order to find the assets folder you can go to my github page i will leave a link down in the description below and you can download the assets all right now that we are ready let's create a new object using the function constructor that we built before so let's call this object canvas and it will be equals a new canvas to the object now in order to test the draw image method i'm going to create a new image so let's call it image and just to make it clear i will comment here that it is just for testing okay so here the image will be equals a new image and here i will need to define the source for this image the path of the image image.src and that will be equals and i know the path but if you want if you want to make sure you can just open the assets folder and see where this image is so um i will write it down it's dot slash assets slash sprites slash spr background dot png all right there is an issue that we need to consider here since it's going to take a while for the image to load but the script is going to be rendered immediately so we cannot just write something like canvas dot draw image and just send the image and the position that we want because that just won't work if i open the index.html file you see that nothing is displayed on screen even though we have no errors so only for testing and to see that everything that we've done so far is working i will set a timeout down here below and inside of the callback function i will paste this code and set the timeout for one second and let's see if now that that is working yes okay so now you can see that the background image is displayed on screen let's check the clear method that we wrote before so i will just write canvas dot clear and let's refresh the page and you see now that the canvas is empty so let's go back to our code and delete this line because i prefer to see something displayed on screen before we finish the first part and let's see that everything works yeah great as you can see the background image was drawn on the canvas but there's only a minor issue you can see that the image is a little bit cropped down here so in order to fix that i will change the dimensions of the canvas to match the dimensions of the background image so the width should be 1500 and the height should be 825 now as i refresh the page you can see that the image is no longer cropped so let's go back to our code and delete all those lines we used for testing let's save and now create a new javascript file that will call assets dot js here eventually i'm going to declare functions that will help me deal with loading the assets for the game but first i'm going to create a new object and let's call this object sprites and it will be equal and empty object let's create another variable that we'll call assets still loading and let's set it to zero let's declare a new function and let's call this function load assets and this function is going to take as an argument a callback function so once it finishes to load all the assets it's going to activate this callback function here i want to write something like sprites.back equals load sprite and i want to pass the file name which is located on the sprites folder in my case that will be spr underscore background dot png in order for that to work i will need to declare another function here and i will call this function load sprite and this function will take as an argument file name and the first thing it's going to do is to increase the number of assets that are still loading then i will create an image for this sprite sprite image equals new image object and i'm going to define the source of this image to be the path of the sprites folder which is assets slash sprites slash plus the file name now i'm going to use the unload property of the image object and i'm going to define that once the image is done loading i want to decrease the number of assets that are still loading now i will return i will return the image we can use the load sprite function that we just wrote to load all the sprites of the game but for now i will load just one more so sprites dot stick equals load sprite and i will send the file name of the stick image so that will be um spr stick dot png and we cannot activate the callback function yet because we cannot know for sure that all the images are downloading um in order to validate that we'll need to create another function and i will call this function assets loading loop and this function will get as an argument the same callback function that we received on the load assets function inside this function i'm going to do something if assets are still loading and else i'm going to do something else so if the assets are still loading i want to enter the loop again so i'll use the request animation frame method of the window object in order to send the assets loading loop as a callback function and i'm going to bind this and the argument that i got which is the callback else i want to activate the callback function so i will just call callback finally we'll need to call the assets loading loop from within the load assets function so let's just copy that and paste it here and let's just send the callback function that we got as an argument and that's it well for now that's pretty much what we need in assets.js we're going to use all the code that we wrote here very soon let me organize my code a bit before we move on so i just delete some of the spaces here and add more spaces here and here and maybe there all right so we are done now let's create the most important object on our project and for that i'm going to create a new file and call this file game.js and here i'm going to define a function constructor and call this function constructor game the game object will contain three methods let's write them down so the first one is game dot prototype dot init so here we will initialize the game the second one will be game dot prototype dot start so you can imagine that here we will start the game and the third one is game dot prototype dot main loop and in this function pretty much everything is going to happen before i write anything inside those methods i want to create another object and this object will be called the game world let's create another function constructor and call this function constructor game world the game world will be an object that will contain all the physical objects of the game and in each frame of animation it will be responsible to update them and to draw them on the canvas in order for him to do that we'll need to define some methods so the first method will be the update method and the second method should be the draw method now i'll go back to the game.js file and here on the init method i'm going to create a new member for the game object and i'm going to call this member game world and this game world will be the new game world object that we created now down here i'm going to create a new object that will be of the type game so i'm going to call this object pool game and it will be equal a new game object let's now deal with the start method of the game object so here the first thing i want to do is to call the init function and then i want to call the main loop and on the main loop the first thing we want to do is to clear the canvas and for that we can use the canvas object with that we created in the previous video so just write canvas dot clear after that we want to update the game world so we can just use pull game in order to approach the game world and then to call the update function and then we want to draw the game world so we can go to pool game dot game world dot go and then we'll use the request animation frame method of the window object the same method that we used before to call the same loop so let's just write request animation frame and we can call pull game dot main loop now i'll go back to the gameword.js file and here on the drill method i'm going to use the canvas object in order to draw an image and the image will be the background image so sprites dot background and the position will be x will be zero and y will be zero the next step is to open the index.html file and to add references to all of the script files that we wrote so i won't waste your time i will just paste that here and another thing that we'll need to do is to write a small script and in the script um i'm going to call the load assets function that we wrote and as an as a callback i'm going to pass pull game dot start so when it finishes loading all the assets it's going to call this function this method on the pull game object that will start the game let's try and open the index.html file on our browser and let's see if we get something well no let's check for errors and yeah this dot init is not a function add game dot start oh okay so this is a common issue in javascript what happened here is that we passed a function to another object to activate and in this process the this reference changed so now that this reference is no longer the pull game it is the window object because load assets is a function that sits in the window object um in order to fix that we need to go to the game.js file and here instead of calling this dot init we'll call pull game dot init and pull game dot main loop let's go back to our browser and refresh and now you can see that the background image is displayed on screen to make it interesting let's add another object to our game i'll go back to our code and here i will create a new file and i'll call this file stick dot js and another function constructor so function stick and the stick object will have fun for now a position so this dot position equals um x will be 0 and y will be 400 the stick object will also have an update method and a draw method let's write them down so stick dot prototype dot update equals a function and stick dot prototype dot draw equals function and inside the draw function i want to call the canvas object and to draw an image and the image that i'm going to draw is the sprite of the stick that we loaded before so sprites dot stick i want to draw it on the current position of the stick so let's use this dot position inside the update method i just want to write some stab code in purpose of testing so let's just leave a comment here and i will mention that it is just for testing and i'm going to increase in every frame of animation the x value of the position of the stick by one so this dot position dot x plus plus now in our game world let's add a member and this member will be the stick and it will be a new stick object and inside the update function i'm going to call this dot stick dot update and after i will draw the background image i want to call this dot stick dot joe the final step for now is to open the index.html file and to add a reference to the stick.js file that we wrote so script src and here i'm going to write stick.js and save it i will open the index.html file on my browser and now you can really see the main loop in action so let's delete those lines of code that we use for testing let's save and now create a new javascript file that will call vector2.js here i will define a new function constructor that its purpose is to help us deal with arithmetic operations between vectors let's call this function constructor vector 2 and it will get two arguments so the first one will be an x and a y a vector2 object will have two members that goes by the same names as those arguments so let's write them down this dot x and it will be equal if type of the x argument is different from undefined it will be equal the value of the x argument else it will be a zero and let's do the same for the y so this dot y if type of y is not undefined that will be equal a y the y argument and else that will be a zero let's save and that will do for now in the future we'll add more functionality to the vector2 definition let's now create a new folder and call this folder input and inside this folder i'm going to create a new file that i'll call button state dot js the button state object will be a simple object that will indicate whether a certain button is pressed or down so let's create a new function constructor new function constructor and call this function constructor button state and let's initialize this dot down to be false and this dot pressed to be false now i will create another file inside this folder and this file will go by the name of mouse.js here obviously we will handle our mouse input and for that i will need a mouse handler so let's define a mouse handler object and the mouse handler will contain three button states one for every button on our mouse and a position that will be of type vector 2 the type that we created before so let's write it down this dot left equals new button state this dot middle equals new button state and this dot right equals new button state object now the position this dot position will be initialized to a new vector 2 object and now i will define that once there is a mouse movement so on mouse move we'll call a function that we'll write just in one second so i will call this function handle mouse move and document on mouse down i will call another function handle mouse down and finally document on mouse up i will call handle mouse up let's save all right so now let's create a new object of the type mouse handler that we just defined so i will call this object mouse let mouse be equal a new mouse handler and now i will implement the functions that we wrote here so handle mouse move i will just create a new function and i will call it handle mouse move and by default it's going to get an event so let's fetch let's fetch from the event the mouse position so we can get the mouse x value by going to the page x property inside the event object so let y be equal the event dot page y and now we can set the mouse dot position to be a new vector new vector 2 and send the arguments x and y let's save okay so let's move on to the next function handle mousedown and this function is also going to get an event as an argument and before i write anything inside this function i want to call the handlemouse move function and send the same event so i will get the current position of the mouse then let me paste a little bit of code here and then i will explain exactly what is going on inside this code if a certain button on our mouse is down we would like to set the down property of the corresponded button state to be true we also want to check if the button was down before that because if not we want to set the pressed property of the same button state to be true and also the event object as an attribute that is called which that indicates uh which button on our mouse is currently down and uh if the witch attribute is 1 that means that the left button on our mouse is down if it is 2 that means that the middle button on our mouse is down and if it is 3 that means that the right button on our mouse is down so that's exactly what you see here in the code i would just fix those underscores here so let's move on to the next function and i will just paste that here and as you can see it is very similar uh we just check uh the attribute on the event to see which button was released and we set the down property of the corresponded button state to be false just one final thing that we need here is an option to reset the mouse input so i will define another function or actually method on the prototype of mouse handler and i will call this function this method reset that will be equals a function and here i want to set this dot left dot pressed to be false this dot middle dot pressed to be false and this dot right not pressed to be false on our html file i want to add references to all of the script files that we wrote so i will just paste that here and another thing that i want to do is to reset the mouse input in every iteration of the main loop so here after i draw the game world i want to call mouse dot reset the last thing i want to do just to test that everything that we've done so far is working i want to set the position of the stick to be equal the mouse position and i want to do something if mouse dot left is pressed so pressed so if that happens i want to log a message so console.log and i will just um write pressed left okay and i will mention that it is just for testing as we always do so now when i open the index.html file on my browser you could see that the stick object is tracking the movement of the mouse and if i inspect that you'll see that every time i click the left button on my mouse you'll see a new message here in the console so of course that's not the kind of behavior we want in our game but that's an important step because now we know how to handle the mouse input there is something that bothers me about this implementation because even though the stick and the mouse share the same position you can see that the mouse is all the way to the left and it's not on the center of the stick the reason that happens is because when we draw the stick using the canvas context we give it a position and the canvas context treats this position as the top left corner of the image so in order to fix that we'll need to introduce a new vector that we'll call the origin of the object in the canvas.js file we'll change the implementation of the draw image method we'll add another argument that we'll call origin before we do anything else here let's just validate that the position that we got to this function is not null or undefined so if it is we should set it to be a new vector to object and that will mean that its x and y values will be zeros let's do the same for the origin so if not origin origin will be a new vector2 object and now we can use the canvas context save method in order to save the current state of the context then we can make changes in it and then we can restore it to the same state so this dot canvas context dot save and now we can translate the context to a different position so this dot canvas context dot translate position dot x and position dot y now in the draw image method of the canvas context we don't need to send the position anymore we can just delete that and instead send the origin that means where we want to draw our top left corner so minus dot x and minus origin dot y and that's of course relative to the position that we are in right now and now we can restore the canvas context to the last saved state so now let's go back to the stick.js file and let me fix this position to be a new vector2 object and let's set it randomly to be 400 by 400 and let's add a new property this dot origin and set it to be a new vector and for now we'll set it to be 500 by 10. and now in the draw method of the stick object i can just add this origin and let's see what happens so let's refresh the browser and now you can see that the pointer is on the middle of the stick on the assets.js file let's load another sprite and let's call the sprite white bowl and obviously that will be the sprite of the white ball and the image is located on spr underscore white ball dot png now i will create a new file that go by the name of ball.js and here i'm going to define a new constant that i'll call ball origin and i'm going to set it to be a new vector of 25 by 25 now i will define a new function constructor that i will call bo and it will get as an argument a position and i will set uh this dot position to be the position that we got as an argument and let's write two functions for the ball object so ball dot prototype dot update equals new function and ball dot ball dot prototype dot draw equals a function and here i'm going to call the canvas and to draw an image and just for now i'm going to draw the white balls image even though not all the balls in the game are going to be white but it is just for now and the position will be this dot position and the origin will be the ball's origin constant so let's go to the index.html file and add a reference to the script file that we just wrote so here i will write script src and bo.js now let's go to the game world and add a new member and let's call this member white ball and it will be equal a new ball object with a new position on the update method i want to update our new member so this dot white ball dot update and inside the drill method i want to draw the white ball so this dot white ball dot draw back in the browser let's refresh and we can see that the white ball is drawn on the canvas back in our code let's go to the stick.js file and i will change the function constructor of the stick to get a position from outside so this dot position will be equal the position argument that we got and also i'm going to define a new constant that i'm going to call stick origin and it will be equal a new vector 2 of 970 by 11. now on the drill function i don't need to send this dot origin anymore i will send the stick origin and i'm going to delete the this dot origin member now i'll go to the game world and here i'm going to set the position of the stick to be the same as the position of the white ball and back in stick.js i will comment out all this code that we wrote for testing back in our browser let's refresh and now you can see the positions of the white ball and the stick don't worry in few moments you will realize why we did all that okay so there's another aspect that i want to add to the game and it is the rotation of the stick and i found this really good article online that explains exactly what i'm going to do in the code um so i'm going to leave a link down below to this article and also explain it briefly so let's say that here instead of a cat we have a stick and this is the position of the mouse so we want to rotate the stick so it will point towards the mouse how are we going to do that we need to find this angle for that so in order to find this angle we need to find the opposite and the adjacent and in order to find the opposite we can subtract the stick y position from the mouse y position and in order to find the adjacent we can subtract the stick x position from the mouse x position so um we know that tangents of this angle is opposite divided by adjacent so we can just apply the arctangent function on both sides and then we can find this angle back in stick.js let's delete those lines of code that we use for testing and let's add a new property that we'll call this dot rotation and initially it will be 0. now let's add a new method to the stick object and let's call this method update rotation and that will be equal a function now we need to calculate the opposite so let opposite b mouse dot position dot y minus this dot position dot y and the adjacent b mouse dot position dot x minus this dot position dot x and now we can use the arc tangent function inside the meth class so math 8 and 2 and we can send the opposite and the adjacent and we'll get the angle to this dot rotation and inside the update method i'm going to call this dot update rotation finally we'll open the canvas.js file and update the draw image method so it will get also a rotation and let's give it a default value of zero and here after we save the canvas context state we can rotate the canvas context so this.canvascontext.rotate and here i'm going to send the rotation and inside stick.js i'm going to send this dot rotation to the draw image method let's save and now go back to our browser and refresh and now you can see that the stick is rotating so it points towards the position of my mouse okay so let me give you a little challenge if you code alongside with me you already have all the tools to implement the next step here you'll see that when i press the left button on my mouse the stick is being pulled away from the white ball and once i release it it shoots the ball towards the position of the mouse so let me demonstrate okay great so give it a shot here in vector2.js instead of validating that x and y are not undefined we can just use some default parameters so let's change that and x will be 0 by default and y will be 0 as well and let's add another method to the vector2 class so vector2.prototype.copy and that will be equal a new function and here i will return a new vector2 with the same properties as this vector so this dot x and this dot y in stick.js i will bring back this dot origin and i will set it to be a copy of the stick origin constant so stick origin dot copy and in the drill method i will send this dot origin in stack instead of the stick origin all right i'll zoom in because it's a bit difficult to see the code this way all right that's much better now i will add another property that i will call this dot power and i will set it initially to be 0 and i will create another method for the stick class that i'll call increase power and it will be equal a function and here i'm going to increase the power but by let's say 100 and the origin this dot origin i will increase it by five no actually this dot origin.x so now in the update method i'm going to define that once the left button on the mouse is down i want to increase the power so this dot increase power and let's go to the browser and see the effect that it makes okay let's refresh and now when i click the left button on my mouse you can see that that the stick is being pulled away from the white bowl here in the function constructor of the stick i'm going to send another argument that i will call on shoot and this argument will be actually a function so let's set this dot on shoot to be on shoot and here in the update method if the left button is not down anymore and this dot power is greater than zero i want to call this dot shoot not not on shoot no i want to call a function that i will define right here a method actually so stick dot prototype dot shoot equal a function and inside this function i'm going to call this dot on shoot and i'm going to send this dot power and this dot rotation now let's open the ball.js file and here i'm going to add another another method to the bull class so ball.prototype.shoot and that will be equal function that will get power and rotation and just for now let's log a message to the console so console.log shoot and in the game world uh when we create a stick object let's send as an argument this function that we created just now this dot white ball dot shoot back in stick.js after we activate the onshoot function let's set this dot power to be zero back in the browser now you'll see that every time i release the left button on my mouse a new message is logged into the console back in stick.js i'm going to set another constant that i will call the stick shot origin and it will be a new vector of 950 by 11. and now in the shoot function i'm going to set this dot origin to be a copy of the shot origin now back in the browser let's refresh and now you'll see that every time i release the left button on my mouse it seems like the stick is moving forward uh towards the ball all right so in the shoot method of the ball object we would like to find the velocity that the ball should have and we get two parameters the first one is the power and the second one is the rotation so in this drawing let's assume that this is the center of the ball and here is the position of my mouse so we know that this angle is the same as the rotation that was sent into this method okay so if we'll assume that the distance between this point and this point is 1 we know for sure that the velocity should be a new vector 2 that its x value will be cosine of this angle and its y value will be sine of the same angle here in the game world i'm just going to bind this shoot function that we sent as an argument uh to this dot white ball just to make sure that we won't lose the reference to uh the white ball and here in the in ball.js i'm going to add a new property that i will call this dot velocity and it will be a new vector to object and inside the shoot method i'm going to set this dot velocity to be a new vector to that its x value will be math dot cosine of the rotation and its y value should be math dot sine of the rotation now inside the update method i want to add the velocity to the position of the ball so i'm going to write this dot position dot add to and to send this dot velocity and of course that now i need to implement the add to method inside the vector2 class so here i will write vector2 dot prototype dot add two and it will get another vector as an argument and here i'm going to set uh this dot x to be this dot x plus vector vector.x so this dot y plus equal vector dot y and i need to fix that so that will be equal a function and now back in the browser when i shoot the ball you'll see that it goes slowly towards the position of the pointer so now in the shoot method we can use the power that we got as an argument and we can multiply the velocity by this power and in the game world i'm going to introduce a new constant that i will call delta and i will set it to be 1 divided by 100 and this will represent how much i want to update on each iteration so it's a fraction that will send to the update method of the ball so it will only update um a fraction of the velocity so this dot velocity dot mult and we'll send the delta and of course that now we need to implement the mode method on the vector2 class so vector2 dot prototype dot mold and it will be a function that we get as an argument a scalar and will return new vector 2 of this dot x multiplied by the scalar and this dot y multiplied by the same scalar now back in ball.js we can use the same method in order to simulate friction so we can use we can set this dot velocity to be um to be this dot velocity dot multiplied by zero point and now let's test the results on our browser so let me refresh and let's shoot the ball and that looks um quite nice so that's it for this video thank you very much for watching it and stay tuned for more goodbye
