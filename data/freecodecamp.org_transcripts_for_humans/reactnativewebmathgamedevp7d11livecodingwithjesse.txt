With timestamps:

00:07 - hey everybody welcome to live coding
00:09 - with jesse i'm jesse and today we're
00:12 - going to
00:14 - finish
00:15 - uh the division mode
00:18 - and depending on how much time we have
00:20 - we'll we'll see what else we're going to
00:21 - do but i definitely want to try to get
00:23 - division working properly
00:28 - so let me check the live chat just say
00:30 - hi to everybody
00:33 - um
00:34 - real question about the programming
00:36 - language we'll use it's going to be
00:37 - javascript also have a question or
00:39 - suggestion to get fire code and enable
00:42 - ligatures
00:43 - uh for those of you who don't know what
00:44 - that is that's uh like a font for
00:47 - a code editor and it
00:50 - does some cool things with like arrow
00:52 - functions and
00:54 - equal signs and stuff like that
00:56 - so i actually have had fire code
00:58 - installed before uh on a different
01:00 - computer so on my work computer at my
01:02 - old job i had that so it is pretty cool
01:05 - i may do it again
01:07 - uh but
01:08 - probably not for this stream because i
01:10 - want to get other stuff done but uh
01:12 - definitely
01:13 - definitely looks cool
01:15 - so i'm open to having that again
01:19 - uh for those of you who are just joining
01:22 - i'll give you a quick breakdown on how
01:23 - this goes
01:24 - this is a live project i did not
01:27 - rehearse any of this before so i will
01:29 - most likely make mistakes uh and also
01:32 - some of the stuff we do on the show a
01:34 - lot of it i've never done before at all
01:37 - right so we're gonna try to figure it
01:38 - out as we go along
01:40 - i usually try to set a pomodoro timer
01:43 - that means i'll do 25 minutes of coding
01:45 - take a five minute break and answer some
01:47 - questions in the live chat if i have
01:49 - time at the end of the live stream
01:51 - streams usually go about an hour long if
01:52 - i have time at the end i'll answer as
01:55 - many questions as i can in a live chat
01:57 - so
01:58 - go ahead throw the questions in there um
02:00 - any you can ask whatever questions you
02:02 - want so don't worry if if you think it's
02:04 - a noob question or something like
02:06 - there's a lot of beginners in here
02:10 - so
02:11 - any questions are are fine also feel
02:14 - free if you see a question in the live
02:15 - chat that you can answer go ahead and
02:17 - answer it uh i like to have a nice like
02:20 - community that's helpful to each other
02:22 - on the streams
02:24 - and
02:26 - i think that's it for all the
02:28 - getting started stuff uh so let's jump
02:31 - into it uh first things first i want to
02:32 - give a shout out to uh sid to do uh for
02:36 - the pull request that i just merged i'm
02:39 - not gonna go over this one because we
02:40 - did in the last stream so if you're
02:41 - interested check it out only thing that
02:43 - changed was uh there was some division
02:46 - logic in there
02:48 - uh that was removed um because it was i
02:52 - did a bad job of explaining what i
02:54 - wanted to happen
02:56 - uh so
02:58 - we cleared that up in the last stream so
03:01 - this just clears the input after a
03:03 - submission
03:04 - so we'll see that now since it's merged
03:07 - in if you have the project running
03:09 - locally make sure you update
03:11 - uh update your fork
03:13 - so you get all these new updates also
03:16 - harshit submitted a pull request where
03:17 - he migrated all of our our testing
03:20 - from puppeteer and mocha to cypress
03:24 - i checked out what changed in the code
03:26 - but i haven't done anything with it
03:28 - myself so
03:30 - we'll we'll run our tests sweet just to
03:33 - see like what it looks like
03:35 - um but thank you so much harshit i'm
03:37 - excited to try out cypress so i've heard
03:39 - good things about it
03:41 - and those are the pull requests for
03:43 - today
03:44 - uh the link to this
03:46 - repo is in the description for the video
03:48 - if anybody's interested uh please check
03:50 - it out feel free to contribute code if
03:52 - you want or list any issues uh we still
03:54 - have some open issues here we're gonna
03:57 - do this one today
04:00 - but
04:01 - this project is definitely a great
04:03 - project for beginners to get in your
04:04 - first pull request if you need help
04:06 - doing that just let me know i'd be happy
04:07 - to walk through it with anybody
04:11 - if you submit a pull request and it's
04:12 - totally wrong i'm not going to be upset
04:15 - um i want this to be
04:18 - like a very pleasant experience for
04:20 - anybody who's trying to get into using
04:22 - github
04:24 - all right so
04:27 - let's go over what we want to happen
04:30 - with division and then we'll we'll go
04:32 - through if anybody's interested in what
04:34 - this project actually is i recommend you
04:37 - uh check out like video one and two
04:40 - uh of this series so
04:43 - i don't even remember what this is um
04:46 - what number this is project seven so any
04:48 - videos you see that have p7 in them it's
04:52 - that's part of this project so if you go
04:53 - to like p7 d1
04:56 - that would be the first video i explain
04:58 - it more
05:00 - in there but you'll catch on as we go
05:02 - along it's a pretty simple app
05:04 - okay so here here's what i want since
05:07 - this is an app for
05:09 - little kids
05:10 - who are just learning math
05:12 - at least for the level one
05:15 - which i hope to add more levels to this
05:17 - eventually level one division
05:19 - needs to be
05:21 - only numbers that when you divide them
05:23 - will give you a whole number so i have
05:26 - examples here
05:27 - so examples of good
05:30 - problems to have would be 9 divided by 3
05:33 - 4 divided by 2 but we're never going to
05:35 - have one that would result in a decimal
05:37 - or fraction right 3 divided by 2 9
05:40 - divided by 4.
05:42 - so
05:43 - that's the problem we're going to try to
05:45 - solve today is how do we make sure
05:48 - that
05:49 - it's only
05:50 - numbers that equal a whole number
05:54 - i could see
05:56 - the easy answer is we could hard code it
05:59 - just right off the top of my head
06:01 - however
06:03 - in my mind i could see
06:05 - this game
06:06 - having increasing levels of difficulty
06:08 - that would include
06:10 - right now it's only single digit
06:12 - it could include double digit triple
06:14 - digit
06:15 - in that case
06:18 - hard coding wouldn't be a great option
06:22 - uh at some point
06:24 - you know we may want to include decimal
06:26 - numbers in the game
06:27 - when it gets that hard but at first i'd
06:29 - like to continue to keep it whole
06:31 - numbers so
06:33 - we need to keep that in mind so i'm
06:35 - going to say hard coding is not an
06:36 - option for this even though
06:39 - you know for
06:41 - for just our problem sets for this show
06:44 - specifically it probably would be the
06:46 - fastest solution
06:48 - um let's go to the code
06:51 - where are we at there we go all right
06:54 - first things first and i recommend doing
06:56 - this
06:57 - whenever you open up your code editor at
06:59 - the beginning of the day always do a get
07:01 - pull
07:03 - right
07:04 - that way if anything has changed
07:08 - in the project
07:10 - you
07:11 - have the latest changes
07:14 - let's see use ref is not defined no
07:17 - undefined
07:19 - what do we have
07:21 - all right let's check out so we we have
07:24 - an error here
07:26 - uh
07:27 - let's go
07:29 - i shouldn't say that this is uh
07:32 - it's not an error error is just kind of
07:34 - like our es lint rules since we haven't
07:36 - actually run anything yet
07:39 - uh line 21 in our app.js
07:42 - file
07:50 - use ref submit input us
08:04 - all right this
08:12 - hmm
08:14 - all right let's check this out
08:18 - oh
08:19 - harsh i can see heart [ __ ] already has
08:21 - some ideas for how to um
08:24 - how to implement the division so
08:26 - hardship i'm gonna i'm not gonna forget
08:28 - that i'm gonna read that in just a
08:29 - second first i wanna see
08:31 - uh let's let's go back to github and
08:34 - check out that pull request
08:38 - for this one to see what changed
08:44 - uh
08:44 - files changed
08:49 - if you haven't used github before this
08:51 - is so useful to be able to go back and
08:54 - see changes like this
08:56 - not you couldn't do it
08:58 - other ways but this makes it so easy
09:02 - i just that's what i thought okay
09:04 - so that used ref is an addition here
09:18 - and this this might be
09:25 - we might need to import use ref
09:34 - that's what i i think yeah
09:37 - okay harsh had already caught that yeah
09:40 - so let's go ahead and just import use
09:42 - ref um
09:44 - and
09:45 - where's our code here
09:51 - all right so you can see here so
09:54 - we're trying to use the user f here but
09:56 - we haven't imported it okay so that's
09:58 - why we're getting
09:59 - uh
10:01 - that error so use ref
10:05 - okay
10:06 - and now if we save that it should be
10:08 - fine
10:14 - oops
10:15 - and that looks like use it should be use
10:19 - effect
10:21 - did i accidentally delete that probably
10:25 - uh okay cool
10:27 - so
10:28 - let's
10:29 - check this out
10:31 - here's our our app just to make sure
10:33 - things are working and what should
10:35 - happen now is i can put in a number in
10:37 - here when i hit submit it clears
10:39 - and the focus remains right so
10:42 - great and
10:44 - our
10:45 - i'm just hitting enter now with that
10:46 - awesome
10:48 - okay
10:49 - so let's move over to division
10:53 - um hey that actually works out
10:56 - for
10:58 - cool
10:59 - um
11:03 - now i'm gonna read what harsh so uh
11:06 - harshit is a long time uh
11:09 - live stream contributor here uh
11:12 - so
11:13 - uh harshit is a really really awesome uh
11:16 - software engineer um
11:19 - so he's suggesting
11:23 - that we make two random numbers multiply
11:25 - them and make a problem
11:28 - dividing them it will always be a whole
11:30 - number and an easy problem
11:36 - okay
11:39 - yeah that makes sense
11:41 - um
11:47 - yeah that'll work uh we do need to add
11:49 - for level one at least we need to add a
11:51 - check to make sure
11:52 - um that the the product of the
11:57 - multiplication
12:00 - is
12:02 - not
12:03 - two digits right
12:19 - okay
12:20 - uh also let's see what we have currently
12:22 - for division too
12:24 - that might be a great place to start and
12:26 - just say is is there anything we could
12:30 - very easily do to modify what we
12:31 - currently have
12:34 - so
12:34 - everything
12:39 - all of our logic
12:42 - is i believe in app.js
12:46 - right
12:49 - here's our
12:51 - is it or did we move it no we we moved
12:53 - it
12:54 - sorry i haven't even looked at this for
12:56 - uh for a week so
12:58 - um
12:59 - i've been working on other stuff i do
13:01 - want to let you all know once we get the
13:03 - um
13:04 - the logic done for level one
13:06 - uh what i'd like to do is actually run
13:09 - this in
13:10 - a simulator so probably in like the ios
13:12 - simulator
13:14 - or oh no i'm on windows machine
13:17 - so maybe i'll try to run it on my my
13:20 - android either way like the next step
13:22 - what i'd like to do is is actually run
13:24 - this on um on a mobile device
13:27 - uh at first it would just be like proof
13:29 - of concept that we can run the same code
13:31 - on
13:32 - a mobile device and on the web
13:37 - but i would i don't want to get too far
13:39 - into this without at least
13:41 - testing it on a mobile device that way
13:43 - if we do have some code that won't work
13:45 - on mobile
13:47 - then it'll be
13:48 - easier to debug that with less code
13:51 - overall also just remember i forgot to
13:53 - start my pomodoro timer
13:55 - so let's
13:57 - start that now
14:00 - okay and i did not mean to start spotify
14:04 - all right
14:05 - oh harsh it also says don't forget to
14:07 - try cyprus okay we we will we will try
14:10 - cyprus okay
14:16 - all right so harsh it's saying like okay
14:18 - two multiplied by two
14:20 - is four
14:21 - now our problem would be two divided by
14:23 - four okay
14:25 - um michael creel says if the answer
14:28 - um modulo one
14:31 - is not equal to zero
14:33 - then get two new numbers
14:37 - okay yeah that actually works as well
14:42 - because then
14:43 - yeah
14:49 - okay
14:50 - um
14:53 - i still need to figure out where our
14:55 - division stuff is
14:57 - and i'll change your callback
15:04 - it's in our reducers
15:06 - yeah the logic got extracted out
15:11 - yeah here it is okay
15:13 - uh so we at one point we did have
15:15 - everything in app.js and then we had a
15:19 - bit of refactoring uh that happened in a
15:21 - pull request and
15:23 - now we have some
15:28 - some of the logic probably most of the
15:30 - logic in this appreducer.js
15:37 - okay so we're returning right now
15:43 - we're just getting random numbers one
15:45 - through nine
15:49 - yes we're definitely going to have to
15:50 - switch that
15:51 - so i don't think there's much we could
15:53 - do like with what we have right now
15:56 - um
15:58 - we're gonna have to have something based
16:00 - on
16:03 - based more on what mode we're on
16:05 - okay
16:06 - does that make sense
16:13 - let's see
16:14 - oh wow okay so yeah
16:17 - i gotta keep up with this chat over here
16:19 - um because archer's putting in some
16:22 - extra extra stuff
16:24 - uh
16:25 - let's see that x equals math for me
16:33 - okay
16:38 - um
16:40 - all right so let me i just need to go
16:42 - over this file just for a second because
16:44 - i haven't looked at this file for a
16:46 - while
16:47 - it's probably been like a month since i
16:49 - looked at this since we've just been
16:50 - doing testing
16:52 - uh
16:53 - okay so all right here's our random
16:55 - number generator
16:57 - which
17:02 - new problem set mode
17:18 - enemy remove enemy
17:21 - check answer
17:52 - okay
17:54 - right now we
17:56 - we do have
18:05 - all right so we're getting the operator
18:07 - from
18:07 - our state
18:11 - okay so we're passing in that state here
18:19 - and an action
18:23 - okay
18:24 - um
18:28 - okay yeah harsha said you have a
18:29 - function for random number use it then
18:33 - okay
18:34 - then michael's saying the logic is in
18:36 - check answer
18:37 - yeah so i guess
18:38 - yeah so we'll need to
18:43 - check answer
18:45 - should still work as is right because
18:47 - all we're doing in check answer is just
18:49 - taking
18:51 - whatever our value one
18:53 - value two is whatever operator is so
18:55 - that should be fine
18:56 - what we need to change though is our our
18:59 - new problem
19:00 - right
19:01 - because
19:02 - what we really want is just to make sure
19:04 - that we've given
19:07 - the user
19:09 - a problem that we know will result in a
19:12 - whole number so this is what we need to
19:15 - to work on
19:18 - so currently right now
19:22 - this though doesn't
19:25 - it doesn't know about what mode we're in
19:27 - or care about what mode we're in so we
19:29 - need to change that the the mode that
19:31 - we're in is going to matter
19:33 - in this case
19:35 - uh
19:36 - so
19:37 - let's see how we're gonna do this
19:39 - so right now we're returning
19:46 - i guess we could just put an if
19:48 - statement in here
19:52 - um
19:54 - maybe a switch i'm trying to think what
19:56 - else
19:58 - we also want to make sure that
20:00 - subtraction doesn't result in negative
20:03 - numbers so i guess we'll have two cases
20:05 - where we'll have
20:06 - we'll want more than just plain random
20:08 - numbers so
20:10 - uh
20:11 - let's see
20:15 - the answer is this won't get a new
20:17 - problem
20:18 - okay
20:25 - oh okay michael caro says if the answer
20:28 - in check answer is a decimal get a new
20:30 - problem oh okay so
20:32 - michael's suggesting that
20:35 - we just
20:37 - go through
20:39 - it's basically just keep going through
20:42 - a loop of
20:44 - generating random numbers and then
20:46 - checking
20:47 - the answer
20:49 - until we get one that's a whole number
20:52 - and then present that
21:00 - or negative
21:01 - okay
21:02 - that's actually not
21:06 - it's not a bad idea
21:08 - okay
21:14 - yeah um how about that yeah so if we
21:16 - extract out
21:19 - some of this into its own function
21:26 - which shouldn't be that hard let answers
21:32 - yeah so
21:34 - this
21:35 - could actually be
21:37 - its its own function or at least this
21:40 - this part
21:41 - and then that would let us
21:44 - a problem keep calling it
21:48 - all right let's do that first then
21:50 - so
21:52 - let's take this
21:56 - and make its own function so i guess
21:58 - we'll put it up here right
22:00 - um
22:08 - do we really need
22:10 - to export this function probably not
22:13 - um
22:20 - what are you going to call this um
22:28 - check answer
22:30 - and
22:34 - uh let's give it
22:36 - let's see
22:39 - about one
22:40 - route two
22:51 - and
23:08 - actually we could probably
23:12 - just do this
23:16 - okay so this is just going to return so
23:19 - if you're not familiar with arrow
23:20 - functions so this is an arrow function
23:24 - right
23:25 - so basically the the value then of check
23:27 - answer is going to be equal to whatever
23:30 - this is
23:31 - right it when you do an arrow function
23:33 - like this all in one line it
23:35 - automatically returns that so you don't
23:37 - need to actually write return okay
23:41 - okay
23:42 - um
23:44 - my my auto linting just put it on the
23:47 - next line here but it's this should
23:48 - still work uh okay so now that we have a
23:51 - check answer
23:53 - down here
23:54 - what we could do
23:56 - is
23:57 - um
24:01 - we could say so i guess we need to get
24:03 - the mode
24:04 - here cased
24:07 - all right so if the types is new problem
24:10 - are we passing in
24:12 - state action let's see what our state is
24:14 - that we're passing in here just for a
24:16 - second
24:17 - uh
24:23 - mode
24:27 - okay so we should have access to mode
24:33 - i don't remember what we called the
24:34 - different modes though
24:36 - what did we call them
24:38 - uh
24:39 - handle mode picker
24:42 - where are we adding submits handlebar
24:45 - picker
24:46 - dispatch types
24:49 - okay so that the mode should be
24:52 - whatever the value is here so
24:54 - you should be able to just get mode uh
24:57 - division here so
25:00 - just like we're getting state value
25:02 - state operator state we should be able
25:03 - to get state
25:05 - dot uh mode
25:08 - in our
25:09 - where's the set
25:11 - in our new problem okay so let's say if
25:17 - state
25:23 - actually
25:32 - actually i'm going to do this now
25:39 - i don't want to put it in that return
25:45 - let's do it here
25:52 - see if i can put one in here
25:56 - uh state dot mode
26:00 - equals
26:06 - division
26:12 - okay so we're going to wrap this in
26:17 - our
26:19 - if statement here so
26:22 - we do want to
26:28 - at some point return this right
26:31 - um but
26:34 - not not exactly like this right so
26:36 - what we want to do is call check answer
26:42 - and we'll give check answer
26:50 - oops didn't want to do that i guess
26:52 - that's fine
26:54 - so you want to give
26:57 - actually let's let's do this this is
26:59 - going to be a little weird but um let's
27:01 - say
27:03 - uh
27:08 - i don't know if i want to name it the
27:09 - same thing but wow i guess we could
27:12 - well one is going to equal
27:14 - oops
27:16 - say let's
27:18 - r1 equal
27:24 - random number generator
27:27 - one two nine
27:29 - and we're gonna do the same thing with
27:31 - vowel two
27:35 - okay so we're going to get two random
27:36 - numbers here and then we're going to
27:37 - pass those in
27:41 - [Music]
27:45 - about two
27:46 - okay
27:48 - so we're running check answer
27:50 - and
27:51 - let's make that
27:53 - um
27:57 - let's
28:00 - press equal
28:02 - so res for like result
28:04 - equal
28:06 - check answer so then we'll say
28:09 - if
28:12 - res is
28:14 - greater than zero
28:19 - then we're actually going to return
28:22 - something
28:25 - and what we'll return is
28:29 - val 1
28:31 - val2
28:38 - else
28:46 - we're going to want to
28:48 - actually we're going to rerun this whole
28:50 - thing so
28:54 - let's grab this and say
28:58 - statement division
29:01 - let's grab all of this
29:04 - put it up here and say
29:14 - division
29:18 - division problem
29:20 - and
29:34 - okay
29:36 - else we're gonna actually run
29:38 - division problem
29:45 - um
29:46 - and i didn't
29:49 - there we go
29:54 - all right let me go down here now and
29:56 - say let's get rid of all of this
30:05 - division problem
30:07 - okay
30:10 - that's a state division problem
30:12 - oops let's get rid of this as well
30:18 - and
30:19 - this
30:22 - all right so let me
30:27 - all right looks like
30:31 - i had some commentary on what i was
30:33 - doing
30:35 - um
30:36 - let's see if this works first so here's
30:38 - what i
30:39 - think will happen right so
30:42 - if it's division if the mode is division
30:45 - we're going to call division problem
30:47 - right
30:48 - division problem is going to generate
30:51 - random numbers
30:52 - and then it's going to check the answer
30:54 - okay so our check answer function is
30:56 - here it's just going to return an answer
30:58 - if the answer
31:01 - oops not greater than 0. what am i
31:02 - thinking i had subtraction on my mind
31:05 - okay
31:06 - although it's this will work for
31:07 - subtraction now too so we could just do
31:10 - that so that's not what i need it needs
31:12 - to be
31:13 - a whole number
31:14 - um
31:15 - so
31:16 - what is that um
31:19 - i wonder if there's is there a way in
31:21 - javascript to just check to see if
31:22 - something's a whole number
31:24 - or
31:25 - oh okay uh michael says you just need to
31:28 - check
31:29 - um
31:33 - oh okay now i'm turning
31:35 - okay michael's saying
31:36 - it's easier in the check answer you
31:39 - already have the logic do you need just
31:41 - to check
31:42 - um
31:44 - oh okay i'm seeing this now
31:46 - oh he's saying check for that in
31:49 - um
31:52 - subtraction at the same time
31:56 - okay all right that makes sense uh let
31:58 - me put this there okay so res
32:00 - um
32:03 - where's my there it is
32:06 - uh
32:07 - slow one
32:10 - and that should equal
32:21 - let me sing all right let's explain what
32:22 - modulus is and i'm going to explain it
32:25 - you all let me know if i have it wrong
32:27 - it's been a while since i used it
32:29 - modulus is like the remainder so if
32:31 - we're doing a division problem and we
32:33 - have a remainder
32:36 - then
32:38 - that means
32:40 - um it's not gonna be a whole number
32:43 - right so it should be zero
32:45 - so like four
32:47 - divided by two is two there's no
32:49 - remainder right
32:51 - um
32:52 - but if we did something like
32:56 - i don't know let's say like
32:59 - four
33:01 - or uh i'm sorry um
33:06 - let's say like eight divided by three
33:10 - right so like eight goes into three
33:13 - i'm sorry three goes into eight
33:15 - uh
33:16 - two times with a remainder
33:19 - of two
33:20 - right
33:22 - so our remainder would be two so when we
33:24 - use this
33:25 - percent sign which is our our modulus
33:28 - operator
33:30 - we're getting that that remainder right
33:32 - so
33:33 - anyway
33:34 - that's it
33:36 - okay
33:37 - um
33:44 - okay yeah so michael's saying yeah
33:45 - that's it now hold on a second
33:56 - okay
33:58 - all right
33:59 - i'm sorry where is okay so we're right
34:01 - here so if we don't have a remainder
34:03 - right
34:05 - then we'll return
34:08 - our our state we'll return that all just
34:10 - like
34:11 - we were doing you know down here
34:14 - now if we do have a remainder that means
34:16 - we need to get more random numbers so
34:18 - we're going to call a division problem
34:20 - again
34:21 - right so it's going to call itself
34:24 - and
34:27 - that's what is that that's called that's
34:28 - recursion right
34:35 - i believe that's what we call
34:37 - uh a recursive function right when it
34:40 - calls itself so this could
34:43 - i mean hypothetically this could just
34:45 - keep going and going but the odds of
34:48 - that happening are so small right um
34:52 - if we end up having a problem where it
34:54 - just takes way too long to get a random
34:55 - number then maybe we can come up with a
34:57 - different solution but i think this
34:58 - should be okay for now
35:02 - all right so we have that
35:04 - uh and this shouldn't be that hard to do
35:07 - the same thing with subtraction but
35:08 - first let's make sure it's actually
35:10 - working with division
35:12 - and
35:13 - also the rest of it is just simply if
35:16 - it's not a division problem we just fall
35:18 - back on doing what we were doing before
35:20 - which we know worked
35:22 - all right so let's save that and
35:24 - go
35:26 - to our code okay so in about three
35:27 - minutes i'm going to answer some
35:29 - questions
35:30 - in the chat no state is not defined
35:34 - uh-oh all right so we use state
35:39 - oh i see what's happening we need to
35:41 - pass in
35:47 - let's pass in our mode
35:52 - actually no where's our
35:55 - that's not what we need we weren't using
35:57 - state there where are we using state
36:00 - here
36:02 - and why can we not get state there
36:05 - percent state
36:19 - all right we're inside of this
36:24 - yeah i should have accessed the state in
36:26 - there should i not
36:32 - let me double check that error to make
36:33 - sure it's
36:35 - the one that i thought line
36:37 - 6 and line
36:38 - 16. okay maybe that's not the same thing
36:42 - okay so line six
36:45 - oops yep
36:47 - i need to get rid of state
36:51 - file one
36:52 - val2
36:55 - so we're passing in value one value two
36:57 - and we need to pass in the operator as
36:59 - well since we don't have access to state
37:01 - right there
37:03 - operator
37:04 - uh and then line 16
37:07 - evident oh okay
37:08 - and line 16 we are
37:12 - okay so we're trying to return the rest
37:14 - of the state let's
37:15 - pass in state here then as well
37:21 - okay
37:22 - um
37:23 - and we'll just continue
37:26 - to pass in the same state right
37:28 - uh here which we should have access to
37:31 - from here okay so then down here when
37:33 - we're actually calling this
37:37 - we can call
37:41 - we'll pass in state with our division
37:43 - problem right that should give us access
37:46 - to all of the state
37:48 - which means when we call check answer
37:50 - here we should be able to say
37:54 - state dot operator
37:58 - because we have access to all of state
38:01 - let's see if that fixes it
38:03 - yeah let me know if that made sense at
38:05 - all i can go over it again i know i went
38:06 - through it pretty fast yep
38:08 - um eval can be harmful expected break
38:11 - statement before case no fall through
38:14 - okay those are not like critical errors
38:16 - right now this we should still be able
38:18 - to test this okay so we have division
38:21 - six
38:22 - divided by one
38:25 - um
38:26 - dang it sorry my mouse is
38:29 - there's like some bit of i don't even
38:32 - know like dirt or sand or something
38:34 - below my mouse that's driving me nuts
38:36 - all right
38:39 - all right i don't need whoa
38:41 - okay
38:42 - cannot read property background color of
38:44 - undefined why would it give me that if i
38:47 - just tried to submit nothing
38:51 - okay
38:53 - i have touches
38:56 - what a weird error to get
38:59 - after js
39:01 - what did that what was that again
39:03 - 51
39:12 - active theme background color
39:21 - i don't even remember what theme i have
39:24 - themes background color
39:26 - division orange
39:31 - this didn't happen before right
39:39 - oh you know what's happening it's
39:40 - something with the state i bet
39:44 - um
39:46 - all right let's see what we're doing
39:47 - with state let's see if somebody
40:05 - all right it looks like harshit actually
40:07 - has a pull request
40:09 - harsha did you do this well
40:13 - all right we'll have to check that out
40:14 - but i
40:16 - what i think is happening probably is uh
40:19 - something with the state like we were
40:22 - so the problem's not in app.js it's up
40:25 - here um so when we try to return state
40:29 - here
40:34 - it is not the same
40:42 - hmm
40:47 - okay
40:48 - um
40:49 - let's
40:50 - let me go to the chat so i did say i
40:52 - would go to the chat when the time ran
40:53 - out and it actually was longer than
40:55 - normal since i started the timer later
40:57 - so i will stop take a five minute break
41:00 - and then we'll check out harshit's pull
41:02 - request
41:03 - and uh knowing her should he probably
41:06 - solve this in a better way than i did so
41:08 - i'm excited to see how this uh
41:11 - how he went about this
41:14 - um
41:15 - let's see it's actually cool though like
41:20 - well i'm assuming harsha did it a
41:21 - different way but it'll be cool to see
41:22 - two different ways to do it
41:24 - um
41:26 - although my way technically didn't work
41:27 - because i messed up something with state
41:31 - all right so i'm going way up to the top
41:33 - of the chat i'm just going to go down
41:34 - through and i see there's a lot of
41:36 - hellos so i'm going to say hello to
41:37 - everybody
41:38 - and i'm going to try to just hit the
41:41 - questions for now
41:54 - uh we had one question is what is he
41:56 - doing lol
41:59 - uh
42:00 - i like big picture uh making a
42:03 - children's math game with react native
42:06 - web
42:08 - uh just for this stream i'm trying to
42:11 - figure out the logic to
42:13 - give uh
42:15 - the user a
42:17 - single digit division problem that
42:19 - results in a whole number
42:26 - oh okay i got i saw harsha's message
42:29 - about trying cyprus again so gotta
42:30 - remember to try cyprus before we end the
42:32 - show
42:59 - um and a question which compiler is this
43:02 - i'm not sure what you mean by compiler
43:05 - um
43:06 - if you mean the uh like the ide uh the
43:09 - code editor it's visual studio code
43:26 - uh so says how late is it for you
43:29 - um it's actually early so um
43:33 - right now it is 8 14 a.m
43:36 - uh so start this stream at 7 30 a.m
43:40 - eastern time
44:13 - i have a question should i learn react
44:16 - or python um i mean they're used for
44:18 - totally different things so it really
44:20 - depends on what you what you want to do
44:23 - right if you want to do more front end
44:25 - stuff uh like front end web stuff
44:27 - learn react um if you want to stick like
44:30 - back end stuff or machine learning or
44:32 - something like that then
44:34 - python is probably better
44:40 - chris says uh how java or javascript um
44:44 - again that kind of depends on what you
44:46 - want to do uh i'm gonna say javascript
44:49 - because it's both a front end and a back
44:51 - end language
44:53 - so it's a little more versatile but
44:54 - there's a ton of jobs and a ton of
44:57 - things to do
44:58 - uh with java
45:00 - so
45:01 - um
45:02 - you know you you wouldn't be going wrong
45:04 - either way it just depends on what you
45:06 - want to do
45:07 - chris says angular or react again that's
45:10 - going to be a
45:11 - a preference thing like what are you
45:12 - trying to accomplish uh what do you know
45:14 - more of already or you know what is your
45:16 - team more comfortable with
45:18 - um nick says hello i'm fairly new to
45:20 - programming uh mechanical designer for
45:22 - 15 years but i want to get into some
45:24 - coding for enterprise systems any
45:26 - recommendations for languages or
45:27 - starting point uh enterprise systems
45:31 - uh i mean you'd have to look up maybe
45:33 - like exactly what systems or what
45:35 - companies you want to work for but um
45:38 - enterprise systems
45:40 - from my experience are more likely to be
45:42 - on something like java or net
45:46 - you're less likely to find like node
45:48 - apps running for enterprise but i mean
45:50 - it's starting to change a little bit
45:52 - um but like that's just been my limited
45:54 - experience though so i mean i would you
45:57 - know do more research on what systems
46:00 - are using at the big companies
46:15 - um
46:17 - all right like michael looks like maybe
46:19 - has a
46:20 - comment on harshit's pr so let's go back
46:23 - to that i'm not going to start another
46:24 - pomodoro timer because i'm gonna have to
46:26 - finish up the stream in a few minutes
46:28 - so the last thing we're gonna do is just
46:30 - check out this pull request
46:32 - and we may have to leave this stream
46:34 - with
46:36 - kind of unfinished we'll see
46:40 - all right so here's y'all can see this
46:42 - i'm just going to read it out quickly
46:44 - um
46:46 - let's assume we have two random numbers
46:47 - between one and nine like three and
46:49 - seven we're multiplying which is three
46:52 - multiplied by seven equals 21. now 21
46:55 - divided by 7 or 21 divided by 3 will
46:58 - always be an easy problem as 21 is a
47:00 - multiple of both these numbers also it
47:02 - resets problem
47:03 - now uh if you
47:05 - change a mode
47:08 - okay
47:09 - okay actually i didn't realize we didn't
47:11 - reset the problem before
47:13 - all right so let's see what's actually
47:15 - happening this is our reducer.js file
47:18 - okay
47:19 - um
47:21 - all right and harsha did put in that use
47:23 - ref
47:25 - because obviously i hadn't pushed any
47:27 - changes up yet
47:29 - okay so if
47:31 - we have our new problem here if the mode
47:33 - is division
47:34 - we're getting our random numbers right
47:36 - and then we're multiplying
47:38 - those two random numbers
47:40 - uh we're saving that to
47:42 - z
47:43 - right and then
47:45 - we're returning
47:49 - z
47:50 - and y so it would be like z divided by y
47:52 - okay
47:53 - um
47:56 - okay
47:58 - state mode operator provide
48:00 - and then
48:02 - returning
48:11 - type types new problem
48:15 - oh okay so this is just doing a new
48:17 - problem okay so i like that um
48:23 - here's the thing though
48:29 - we'll end up though with a
48:33 - a number that's greater than two digits
48:35 - here right
48:37 - uh
48:39 - so this would actually
48:41 - this could potentially work
48:47 - but
48:50 - we would have to change the max number
48:53 - right on here so
48:59 - publish an update refresh you can limit
49:02 - it okay so it looks like there's an
49:04 - update so let's refresh
49:10 - all right if z is greater than 30 return
49:14 - a new problem
49:22 - okay so we could potentially just change
49:25 - it here
49:29 - okay um
49:30 - all right what do you think
49:33 - so
49:35 - i guess everybody in the in the stream
49:37 - now let's let's do a comparison then all
49:40 - right so in in this case
49:43 - for this would work
49:45 - and then for each mode
49:48 - we would
49:50 - just
49:51 - change this value so this
49:54 - um
49:55 - i guess we would end up saving
50:01 - i'm sorry for each level
50:03 - so essentially this would change for the
50:05 - level
50:06 - um to increase
50:09 - like the max amount that it could be
50:10 - right
50:12 - [Music]
50:15 - this is nice i like this so this
50:18 - compared to
50:20 - i guess
50:22 - what we had done here
50:23 - where
50:31 - we kind of have a
50:37 - we're actually like checking the answers
50:39 - of our problems and then running through
50:41 - this
50:42 - until we get one that works okay so
50:46 - let me know what you all think
50:48 - i'm gonna take like 30 seconds to see
50:50 - what you all think and then i'm gonna
50:51 - tell you what i think
50:54 - let's see
51:40 - all right uh let me see what some of you
51:41 - are saying
51:42 - um
51:52 - okay so
51:58 - harsh it's saying if you just check so
52:01 - the the issue that's raised in the chat
52:03 - here is uh you know this would still
52:05 - return something that's
52:07 - uh two digit numbers arch is saying if
52:09 - you just check
52:13 - to make sure
52:17 - z is not greater
52:19 - return reduce or stay types any problem
52:21 - then we're just going to call new
52:23 - problem again
52:33 - okay so either way it's just going to
52:35 - keep looping right and it's it's going
52:37 - to keep going through that
52:39 - um
52:40 - the benefit of this one i would say is i
52:43 - mean i didn't test it yet but the one
52:46 - that i did
52:47 - is throwing an error right so
52:50 - uh i'm assuming this one wouldn't
52:57 - uh
52:58 - so
52:59 - let's let's try this out
53:02 - let's see if i'm gonna have time oh i
53:04 - might not have time
53:07 - i gotta end i got a meeting at 8 30 so
53:09 - that's why i'm i have seven minutes
53:11 - right now
53:12 - uh all right let's see if we can
53:20 - if we can get this in here
53:23 - really quickly
53:25 - um
53:28 - get
53:32 - check out
53:33 - b
53:34 - um
53:36 - division all right so i just switched to
53:38 - another branch here so i could save what
53:40 - i have
53:42 - okay and let's go get
53:46 - commit
53:55 - all right so
53:57 - i'm trying to just go really fast here
54:00 - all right now we can do get
54:03 - um
54:06 - get fetch
54:16 - oh what is it i always forget it
54:19 - um
54:23 - i test a
54:25 - poor
54:27 - request
54:29 - locally
54:31 - uh and a locally fetched i got a pull
54:33 - request
54:38 - get out of here i don't want this bit
54:40 - bucket i want github there we go
54:51 - there you go get fetch origin pull okay
54:55 - so what's our id
54:56 - [Music]
54:57 - fourteen
55:02 - full
55:03 - fourteen
55:05 - and then
55:07 - almost had it
55:09 - head branch name okay
55:18 - h i'm going to say h division for
55:21 - hardship
55:25 - cool
55:26 - good check out
55:28 - uh h
55:31 - all right
55:33 - now let's try this out
55:36 - sorry i didn't explain what i was doing
55:37 - more i just i got to go fast because i
55:39 - got a meeting
55:40 - um
55:42 - let's see
55:44 - all right so we get i forget the changes
55:46 - let's change this down to
55:53 - nine
55:54 - we want it not greater than nine
56:03 - okay
56:04 - seven seven six six nine one
56:07 - one like three six four four two
56:10 - seven seven eight two six three six one
56:14 - looks good
56:17 - you know what i'm just saying like uh
56:19 - occasionally we get the same problem in
56:21 - a row
56:27 - we may want to put logic in to say like
56:30 - um
56:32 - don't show the same problem twice in a
56:34 - row
56:36 - so
56:37 - dang it
56:38 - i'll have to remember to add that maybe
56:40 - as an issue or if somebody else wants to
56:43 - all right so uh harshit solution works
56:46 - i'm gonna go with it because it works
56:49 - um so i will be
56:51 - i guess
56:53 - let's let's merge this in
56:56 - now
56:58 - you can merge from the command line uh
57:00 - so i could do that right now or i could
57:03 - just
57:04 - never mind i'll just do it i gotta go i
57:06 - gotta go to my meeting so i have to stop
57:09 - basically uh what i'm gonna do though at
57:11 - some point is i'm going to merge this
57:13 - pull request in so we're going to use
57:15 - what harshit did i believe it
57:17 - accomplishes
57:18 - uh the same thing without errors in less
57:21 - code which is always good thank you
57:23 - harshit
57:24 - and then i'm gonna try to remember to
57:26 - put in an issue to say we need to check
57:28 - and make sure we're not giving the user
57:29 - the same problem that they just answered
57:33 - okay
57:34 - um
57:35 - harsha says yeah that's not my fault
57:37 - yeah i'm not saying it's your fault
57:38 - hardship that's just it wasn't part of
57:41 - the
57:43 - it wasn't anything that we had thought
57:44 - of yet anyway so
57:46 - um
57:49 - and it happens with all the other modes
57:50 - as well
57:52 - all right awesome so
57:55 - i don't think i missed questions but if
57:58 - i missed your question just put it in
57:59 - the comments below this video or send it
58:02 - to me on social media or something uh
58:04 - thank you so much for
58:07 - hanging out with me this morning
58:09 - um
58:10 - i'm buying a house later today
58:13 - so
58:14 - i don't know if i'm going to stream on
58:15 - friday or not because i'm going to be
58:16 - busy moving into the new house oh
58:18 - harshad says cyprus you cyprus though
58:21 - all right one last thing before i go
58:24 - let's use cyprus
58:26 - what's my code so
58:28 - yarn e
58:30 - to e
58:33 - what
58:40 - package json
58:51 - oh i forgot to run
58:55 - i've got to install cyprus
58:57 - always remember to run yarn when you
58:59 - first do your get pool in the morning
59:02 - i've said that a million times on the
59:03 - stream and i forgot myself to do it
59:06 - what time is it oh i have one minute
59:09 - till my meeting
59:13 - come on
59:15 - come on yarn
59:21 - no
59:23 - i'm not gonna be able to get it in
59:25 - all right i'm waiting
59:28 - so the
59:31 - the meeting hasn't started yet
59:51 - why why is it taking so long
60:03 - ah har [ __ ] i might just have to wait i
60:06 - got i gotta go i go to my meeting um
60:10 - all right so
60:12 - i may just have to wait if anybody
60:13 - doesn't want to wait to see cyprus go
60:15 - ahead fork this repo uh clone it and you
60:19 - can run it on your own uh the command is
60:22 - the same as it was before yarn e2e for
60:25 - some reason
60:27 - it's not
60:29 - working for me right now what a terrible
60:30 - time to not work um
60:34 - uh harsha says downloading chromium i
60:36 - thought you had i thought i would have
60:38 - had it too because i was using puppeteer
60:40 - anyway um yeah next time i will
60:43 - definitely try out cyprus and we'll do
60:46 - that the first thing so i don't run out
60:48 - of time or forget
60:50 - um anyway thank y'all for watching and
60:53 - um hopefully i see you back here next
60:55 - time until then have a great day a great
60:58 - great couple days great week

Cleaned transcript:

hey everybody welcome to live coding with jesse i'm jesse and today we're going to finish uh the division mode and depending on how much time we have we'll we'll see what else we're going to do but i definitely want to try to get division working properly so let me check the live chat just say hi to everybody um real question about the programming language we'll use it's going to be javascript also have a question or suggestion to get fire code and enable ligatures uh for those of you who don't know what that is that's uh like a font for a code editor and it does some cool things with like arrow functions and equal signs and stuff like that so i actually have had fire code installed before uh on a different computer so on my work computer at my old job i had that so it is pretty cool i may do it again uh but probably not for this stream because i want to get other stuff done but uh definitely definitely looks cool so i'm open to having that again uh for those of you who are just joining i'll give you a quick breakdown on how this goes this is a live project i did not rehearse any of this before so i will most likely make mistakes uh and also some of the stuff we do on the show a lot of it i've never done before at all right so we're gonna try to figure it out as we go along i usually try to set a pomodoro timer that means i'll do 25 minutes of coding take a five minute break and answer some questions in the live chat if i have time at the end of the live stream streams usually go about an hour long if i have time at the end i'll answer as many questions as i can in a live chat so go ahead throw the questions in there um any you can ask whatever questions you want so don't worry if if you think it's a noob question or something like there's a lot of beginners in here so any questions are are fine also feel free if you see a question in the live chat that you can answer go ahead and answer it uh i like to have a nice like community that's helpful to each other on the streams and i think that's it for all the getting started stuff uh so let's jump into it uh first things first i want to give a shout out to uh sid to do uh for the pull request that i just merged i'm not gonna go over this one because we did in the last stream so if you're interested check it out only thing that changed was uh there was some division logic in there uh that was removed um because it was i did a bad job of explaining what i wanted to happen uh so we cleared that up in the last stream so this just clears the input after a submission so we'll see that now since it's merged in if you have the project running locally make sure you update uh update your fork so you get all these new updates also harshit submitted a pull request where he migrated all of our our testing from puppeteer and mocha to cypress i checked out what changed in the code but i haven't done anything with it myself so we'll we'll run our tests sweet just to see like what it looks like um but thank you so much harshit i'm excited to try out cypress so i've heard good things about it and those are the pull requests for today uh the link to this repo is in the description for the video if anybody's interested uh please check it out feel free to contribute code if you want or list any issues uh we still have some open issues here we're gonna do this one today but this project is definitely a great project for beginners to get in your first pull request if you need help doing that just let me know i'd be happy to walk through it with anybody if you submit a pull request and it's totally wrong i'm not going to be upset um i want this to be like a very pleasant experience for anybody who's trying to get into using github all right so let's go over what we want to happen with division and then we'll we'll go through if anybody's interested in what this project actually is i recommend you uh check out like video one and two uh of this series so i don't even remember what this is um what number this is project seven so any videos you see that have p7 in them it's that's part of this project so if you go to like p7 d1 that would be the first video i explain it more in there but you'll catch on as we go along it's a pretty simple app okay so here here's what i want since this is an app for little kids who are just learning math at least for the level one which i hope to add more levels to this eventually level one division needs to be only numbers that when you divide them will give you a whole number so i have examples here so examples of good problems to have would be 9 divided by 3 4 divided by 2 but we're never going to have one that would result in a decimal or fraction right 3 divided by 2 9 divided by 4. so that's the problem we're going to try to solve today is how do we make sure that it's only numbers that equal a whole number i could see the easy answer is we could hard code it just right off the top of my head however in my mind i could see this game having increasing levels of difficulty that would include right now it's only single digit it could include double digit triple digit in that case hard coding wouldn't be a great option uh at some point you know we may want to include decimal numbers in the game when it gets that hard but at first i'd like to continue to keep it whole numbers so we need to keep that in mind so i'm going to say hard coding is not an option for this even though you know for for just our problem sets for this show specifically it probably would be the fastest solution um let's go to the code where are we at there we go all right first things first and i recommend doing this whenever you open up your code editor at the beginning of the day always do a get pull right that way if anything has changed in the project you have the latest changes let's see use ref is not defined no undefined what do we have all right let's check out so we we have an error here uh let's go i shouldn't say that this is uh it's not an error error is just kind of like our es lint rules since we haven't actually run anything yet uh line 21 in our app.js file use ref submit input us all right this hmm all right let's check this out oh harsh i can see heart [ __ ] already has some ideas for how to um how to implement the division so hardship i'm gonna i'm not gonna forget that i'm gonna read that in just a second first i wanna see uh let's let's go back to github and check out that pull request for this one to see what changed uh files changed if you haven't used github before this is so useful to be able to go back and see changes like this not you couldn't do it other ways but this makes it so easy i just that's what i thought okay so that used ref is an addition here and this this might be we might need to import use ref that's what i i think yeah okay harsh had already caught that yeah so let's go ahead and just import use ref um and where's our code here all right so you can see here so we're trying to use the user f here but we haven't imported it okay so that's why we're getting uh that error so use ref okay and now if we save that it should be fine oops and that looks like use it should be use effect did i accidentally delete that probably uh okay cool so let's check this out here's our our app just to make sure things are working and what should happen now is i can put in a number in here when i hit submit it clears and the focus remains right so great and our i'm just hitting enter now with that awesome okay so let's move over to division um hey that actually works out for cool um now i'm gonna read what harsh so uh harshit is a long time uh live stream contributor here uh so uh harshit is a really really awesome uh software engineer um so he's suggesting that we make two random numbers multiply them and make a problem dividing them it will always be a whole number and an easy problem okay yeah that makes sense um yeah that'll work uh we do need to add for level one at least we need to add a check to make sure um that the the product of the multiplication is not two digits right okay uh also let's see what we have currently for division too that might be a great place to start and just say is is there anything we could very easily do to modify what we currently have so everything all of our logic is i believe in app.js right here's our is it or did we move it no we we moved it sorry i haven't even looked at this for uh for a week so um i've been working on other stuff i do want to let you all know once we get the um the logic done for level one uh what i'd like to do is actually run this in a simulator so probably in like the ios simulator or oh no i'm on windows machine so maybe i'll try to run it on my my android either way like the next step what i'd like to do is is actually run this on um on a mobile device uh at first it would just be like proof of concept that we can run the same code on a mobile device and on the web but i would i don't want to get too far into this without at least testing it on a mobile device that way if we do have some code that won't work on mobile then it'll be easier to debug that with less code overall also just remember i forgot to start my pomodoro timer so let's start that now okay and i did not mean to start spotify all right oh harsh it also says don't forget to try cyprus okay we we will we will try cyprus okay all right so harsh it's saying like okay two multiplied by two is four now our problem would be two divided by four okay um michael creel says if the answer um modulo one is not equal to zero then get two new numbers okay yeah that actually works as well because then yeah okay um i still need to figure out where our division stuff is and i'll change your callback it's in our reducers yeah the logic got extracted out yeah here it is okay uh so we at one point we did have everything in app.js and then we had a bit of refactoring uh that happened in a pull request and now we have some some of the logic probably most of the logic in this appreducer.js okay so we're returning right now we're just getting random numbers one through nine yes we're definitely going to have to switch that so i don't think there's much we could do like with what we have right now um we're gonna have to have something based on based more on what mode we're on okay does that make sense let's see oh wow okay so yeah i gotta keep up with this chat over here um because archer's putting in some extra extra stuff uh let's see that x equals math for me okay um all right so let me i just need to go over this file just for a second because i haven't looked at this file for a while it's probably been like a month since i looked at this since we've just been doing testing uh okay so all right here's our random number generator which new problem set mode enemy remove enemy check answer okay right now we we do have all right so we're getting the operator from our state okay so we're passing in that state here and an action okay um okay yeah harsha said you have a function for random number use it then okay then michael's saying the logic is in check answer yeah so i guess yeah so we'll need to check answer should still work as is right because all we're doing in check answer is just taking whatever our value one value two is whatever operator is so that should be fine what we need to change though is our our new problem right because what we really want is just to make sure that we've given the user a problem that we know will result in a whole number so this is what we need to to work on so currently right now this though doesn't it doesn't know about what mode we're in or care about what mode we're in so we need to change that the the mode that we're in is going to matter in this case uh so let's see how we're gonna do this so right now we're returning i guess we could just put an if statement in here um maybe a switch i'm trying to think what else we also want to make sure that subtraction doesn't result in negative numbers so i guess we'll have two cases where we'll have we'll want more than just plain random numbers so uh let's see the answer is this won't get a new problem okay oh okay michael caro says if the answer in check answer is a decimal get a new problem oh okay so michael's suggesting that we just go through it's basically just keep going through a loop of generating random numbers and then checking the answer until we get one that's a whole number and then present that or negative okay that's actually not it's not a bad idea okay yeah um how about that yeah so if we extract out some of this into its own function which shouldn't be that hard let answers yeah so this could actually be its its own function or at least this this part and then that would let us a problem keep calling it all right let's do that first then so let's take this and make its own function so i guess we'll put it up here right um do we really need to export this function probably not um what are you going to call this um check answer and uh let's give it let's see about one route two and actually we could probably just do this okay so this is just going to return so if you're not familiar with arrow functions so this is an arrow function right so basically the the value then of check answer is going to be equal to whatever this is right it when you do an arrow function like this all in one line it automatically returns that so you don't need to actually write return okay okay um my my auto linting just put it on the next line here but it's this should still work uh okay so now that we have a check answer down here what we could do is um we could say so i guess we need to get the mode here cased all right so if the types is new problem are we passing in state action let's see what our state is that we're passing in here just for a second uh mode okay so we should have access to mode i don't remember what we called the different modes though what did we call them uh handle mode picker where are we adding submits handlebar picker dispatch types okay so that the mode should be whatever the value is here so you should be able to just get mode uh division here so just like we're getting state value state operator state we should be able to get state dot uh mode in our where's the set in our new problem okay so let's say if state actually actually i'm going to do this now i don't want to put it in that return let's do it here see if i can put one in here uh state dot mode equals division okay so we're going to wrap this in our if statement here so we do want to at some point return this right um but not not exactly like this right so what we want to do is call check answer and we'll give check answer oops didn't want to do that i guess that's fine so you want to give actually let's let's do this this is going to be a little weird but um let's say uh i don't know if i want to name it the same thing but wow i guess we could well one is going to equal oops say let's r1 equal random number generator one two nine and we're gonna do the same thing with vowel two okay so we're going to get two random numbers here and then we're going to pass those in about two okay so we're running check answer and let's make that um let's press equal so res for like result equal check answer so then we'll say if res is greater than zero then we're actually going to return something and what we'll return is val 1 val2 else we're going to want to actually we're going to rerun this whole thing so let's grab this and say statement division let's grab all of this put it up here and say division division problem and okay else we're gonna actually run division problem um and i didn't there we go all right let me go down here now and say let's get rid of all of this division problem okay that's a state division problem oops let's get rid of this as well and this all right so let me all right looks like i had some commentary on what i was doing um let's see if this works first so here's what i think will happen right so if it's division if the mode is division we're going to call division problem right division problem is going to generate random numbers and then it's going to check the answer okay so our check answer function is here it's just going to return an answer if the answer oops not greater than 0. what am i thinking i had subtraction on my mind okay although it's this will work for subtraction now too so we could just do that so that's not what i need it needs to be a whole number um so what is that um i wonder if there's is there a way in javascript to just check to see if something's a whole number or oh okay uh michael says you just need to check um oh okay now i'm turning okay michael's saying it's easier in the check answer you already have the logic do you need just to check um oh okay i'm seeing this now oh he's saying check for that in um subtraction at the same time okay all right that makes sense uh let me put this there okay so res um where's my there it is uh slow one and that should equal let me sing all right let's explain what modulus is and i'm going to explain it you all let me know if i have it wrong it's been a while since i used it modulus is like the remainder so if we're doing a division problem and we have a remainder then that means um it's not gonna be a whole number right so it should be zero so like four divided by two is two there's no remainder right um but if we did something like i don't know let's say like four or uh i'm sorry um let's say like eight divided by three right so like eight goes into three i'm sorry three goes into eight uh two times with a remainder of two right so our remainder would be two so when we use this percent sign which is our our modulus operator we're getting that that remainder right so anyway that's it okay um okay yeah so michael's saying yeah that's it now hold on a second okay all right i'm sorry where is okay so we're right here so if we don't have a remainder right then we'll return our our state we'll return that all just like we were doing you know down here now if we do have a remainder that means we need to get more random numbers so we're going to call a division problem again right so it's going to call itself and that's what is that that's called that's recursion right i believe that's what we call uh a recursive function right when it calls itself so this could i mean hypothetically this could just keep going and going but the odds of that happening are so small right um if we end up having a problem where it just takes way too long to get a random number then maybe we can come up with a different solution but i think this should be okay for now all right so we have that uh and this shouldn't be that hard to do the same thing with subtraction but first let's make sure it's actually working with division and also the rest of it is just simply if it's not a division problem we just fall back on doing what we were doing before which we know worked all right so let's save that and go to our code okay so in about three minutes i'm going to answer some questions in the chat no state is not defined uhoh all right so we use state oh i see what's happening we need to pass in let's pass in our mode actually no where's our that's not what we need we weren't using state there where are we using state here and why can we not get state there percent state all right we're inside of this yeah i should have accessed the state in there should i not let me double check that error to make sure it's the one that i thought line 6 and line 16. okay maybe that's not the same thing okay so line six oops yep i need to get rid of state file one val2 so we're passing in value one value two and we need to pass in the operator as well since we don't have access to state right there operator uh and then line 16 evident oh okay and line 16 we are okay so we're trying to return the rest of the state let's pass in state here then as well okay um and we'll just continue to pass in the same state right uh here which we should have access to from here okay so then down here when we're actually calling this we can call we'll pass in state with our division problem right that should give us access to all of the state which means when we call check answer here we should be able to say state dot operator because we have access to all of state let's see if that fixes it yeah let me know if that made sense at all i can go over it again i know i went through it pretty fast yep um eval can be harmful expected break statement before case no fall through okay those are not like critical errors right now this we should still be able to test this okay so we have division six divided by one um dang it sorry my mouse is there's like some bit of i don't even know like dirt or sand or something below my mouse that's driving me nuts all right all right i don't need whoa okay cannot read property background color of undefined why would it give me that if i just tried to submit nothing okay i have touches what a weird error to get after js what did that what was that again 51 active theme background color i don't even remember what theme i have themes background color division orange this didn't happen before right oh you know what's happening it's something with the state i bet um all right let's see what we're doing with state let's see if somebody all right it looks like harshit actually has a pull request harsha did you do this well all right we'll have to check that out but i what i think is happening probably is uh something with the state like we were so the problem's not in app.js it's up here um so when we try to return state here it is not the same hmm okay um let's let me go to the chat so i did say i would go to the chat when the time ran out and it actually was longer than normal since i started the timer later so i will stop take a five minute break and then we'll check out harshit's pull request and uh knowing her should he probably solve this in a better way than i did so i'm excited to see how this uh how he went about this um let's see it's actually cool though like well i'm assuming harsha did it a different way but it'll be cool to see two different ways to do it um although my way technically didn't work because i messed up something with state all right so i'm going way up to the top of the chat i'm just going to go down through and i see there's a lot of hellos so i'm going to say hello to everybody and i'm going to try to just hit the questions for now uh we had one question is what is he doing lol uh i like big picture uh making a children's math game with react native web uh just for this stream i'm trying to figure out the logic to give uh the user a single digit division problem that results in a whole number oh okay i got i saw harsha's message about trying cyprus again so gotta remember to try cyprus before we end the show um and a question which compiler is this i'm not sure what you mean by compiler um if you mean the uh like the ide uh the code editor it's visual studio code uh so says how late is it for you um it's actually early so um right now it is 8 14 a.m uh so start this stream at 7 30 a.m eastern time i have a question should i learn react or python um i mean they're used for totally different things so it really depends on what you what you want to do right if you want to do more front end stuff uh like front end web stuff learn react um if you want to stick like back end stuff or machine learning or something like that then python is probably better chris says uh how java or javascript um again that kind of depends on what you want to do uh i'm gonna say javascript because it's both a front end and a back end language so it's a little more versatile but there's a ton of jobs and a ton of things to do uh with java so um you know you you wouldn't be going wrong either way it just depends on what you want to do chris says angular or react again that's going to be a a preference thing like what are you trying to accomplish uh what do you know more of already or you know what is your team more comfortable with um nick says hello i'm fairly new to programming uh mechanical designer for 15 years but i want to get into some coding for enterprise systems any recommendations for languages or starting point uh enterprise systems uh i mean you'd have to look up maybe like exactly what systems or what companies you want to work for but um enterprise systems from my experience are more likely to be on something like java or net you're less likely to find like node apps running for enterprise but i mean it's starting to change a little bit um but like that's just been my limited experience though so i mean i would you know do more research on what systems are using at the big companies um all right like michael looks like maybe has a comment on harshit's pr so let's go back to that i'm not going to start another pomodoro timer because i'm gonna have to finish up the stream in a few minutes so the last thing we're gonna do is just check out this pull request and we may have to leave this stream with kind of unfinished we'll see all right so here's y'all can see this i'm just going to read it out quickly um let's assume we have two random numbers between one and nine like three and seven we're multiplying which is three multiplied by seven equals 21. now 21 divided by 7 or 21 divided by 3 will always be an easy problem as 21 is a multiple of both these numbers also it resets problem now uh if you change a mode okay okay actually i didn't realize we didn't reset the problem before all right so let's see what's actually happening this is our reducer.js file okay um all right and harsha did put in that use ref because obviously i hadn't pushed any changes up yet okay so if we have our new problem here if the mode is division we're getting our random numbers right and then we're multiplying those two random numbers uh we're saving that to z right and then we're returning z and y so it would be like z divided by y okay um okay state mode operator provide and then returning type types new problem oh okay so this is just doing a new problem okay so i like that um here's the thing though we'll end up though with a a number that's greater than two digits here right uh so this would actually this could potentially work but we would have to change the max number right on here so publish an update refresh you can limit it okay so it looks like there's an update so let's refresh all right if z is greater than 30 return a new problem okay so we could potentially just change it here okay um all right what do you think so i guess everybody in the in the stream now let's let's do a comparison then all right so in in this case for this would work and then for each mode we would just change this value so this um i guess we would end up saving i'm sorry for each level so essentially this would change for the level um to increase like the max amount that it could be right this is nice i like this so this compared to i guess what we had done here where we kind of have a we're actually like checking the answers of our problems and then running through this until we get one that works okay so let me know what you all think i'm gonna take like 30 seconds to see what you all think and then i'm gonna tell you what i think let's see all right uh let me see what some of you are saying um okay so harsh it's saying if you just check so the the issue that's raised in the chat here is uh you know this would still return something that's uh two digit numbers arch is saying if you just check to make sure z is not greater return reduce or stay types any problem then we're just going to call new problem again okay so either way it's just going to keep looping right and it's it's going to keep going through that um the benefit of this one i would say is i mean i didn't test it yet but the one that i did is throwing an error right so uh i'm assuming this one wouldn't uh so let's let's try this out let's see if i'm gonna have time oh i might not have time i gotta end i got a meeting at 8 30 so that's why i'm i have seven minutes right now uh all right let's see if we can if we can get this in here really quickly um get check out b um division all right so i just switched to another branch here so i could save what i have okay and let's go get commit all right so i'm trying to just go really fast here all right now we can do get um get fetch oh what is it i always forget it um i test a poor request locally uh and a locally fetched i got a pull request get out of here i don't want this bit bucket i want github there we go there you go get fetch origin pull okay so what's our id fourteen full fourteen and then almost had it head branch name okay h i'm going to say h division for hardship cool good check out uh h all right now let's try this out sorry i didn't explain what i was doing more i just i got to go fast because i got a meeting um let's see all right so we get i forget the changes let's change this down to nine we want it not greater than nine okay seven seven six six nine one one like three six four four two seven seven eight two six three six one looks good you know what i'm just saying like uh occasionally we get the same problem in a row we may want to put logic in to say like um don't show the same problem twice in a row so dang it i'll have to remember to add that maybe as an issue or if somebody else wants to all right so uh harshit solution works i'm gonna go with it because it works um so i will be i guess let's let's merge this in now you can merge from the command line uh so i could do that right now or i could just never mind i'll just do it i gotta go i gotta go to my meeting so i have to stop basically uh what i'm gonna do though at some point is i'm going to merge this pull request in so we're going to use what harshit did i believe it accomplishes uh the same thing without errors in less code which is always good thank you harshit and then i'm gonna try to remember to put in an issue to say we need to check and make sure we're not giving the user the same problem that they just answered okay um harsha says yeah that's not my fault yeah i'm not saying it's your fault hardship that's just it wasn't part of the it wasn't anything that we had thought of yet anyway so um and it happens with all the other modes as well all right awesome so i don't think i missed questions but if i missed your question just put it in the comments below this video or send it to me on social media or something uh thank you so much for hanging out with me this morning um i'm buying a house later today so i don't know if i'm going to stream on friday or not because i'm going to be busy moving into the new house oh harshad says cyprus you cyprus though all right one last thing before i go let's use cyprus what's my code so yarn e to e what package json oh i forgot to run i've got to install cyprus always remember to run yarn when you first do your get pool in the morning i've said that a million times on the stream and i forgot myself to do it what time is it oh i have one minute till my meeting come on come on yarn no i'm not gonna be able to get it in all right i'm waiting so the the meeting hasn't started yet why why is it taking so long ah har [ __ ] i might just have to wait i got i gotta go i go to my meeting um all right so i may just have to wait if anybody doesn't want to wait to see cyprus go ahead fork this repo uh clone it and you can run it on your own uh the command is the same as it was before yarn e2e for some reason it's not working for me right now what a terrible time to not work um uh harsha says downloading chromium i thought you had i thought i would have had it too because i was using puppeteer anyway um yeah next time i will definitely try out cyprus and we'll do that the first thing so i don't run out of time or forget um anyway thank y'all for watching and um hopefully i see you back here next time until then have a great day a great great couple days great week
