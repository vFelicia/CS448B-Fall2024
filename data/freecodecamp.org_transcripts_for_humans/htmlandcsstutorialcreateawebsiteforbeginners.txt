With timestamps:

00:00 - hello everybody in this video you will
00:02 - learn the structure of an html file as
00:04 - well as a few basic html elements
00:07 - i will walk you through the process of
00:08 - creating your very first web page and by
00:10 - the end of the video you will have
00:11 - created a very basic web page let's get
00:13 - started by opening up visual studio code
00:15 - and creating a new file
00:17 - type any sentence you want into the file
00:19 - such as this is my first webpage and
00:21 - save the file
00:22 - you can call this file anything you want
00:24 - but it must have the
00:26 - extension.html at the end of the name
00:28 - now if you open that file on google
00:30 - chrome you will see your web browser
00:32 - rendering the sentence you typed into
00:33 - the html file
00:35 - while this technically works the file we
00:37 - just created is not actually valid html
00:40 - behind the scenes the browser
00:41 - surrounding our sentence invalid html
00:43 - tags
00:44 - to see what these tags look like we will
00:46 - need to open the developer tools of
00:48 - google chrome to do this press ctrl
00:50 - shift i or command shift i if you are on
00:53 - a mac
00:54 - upon doing this you will be greeted with
00:56 - a fairly complex looking window
00:58 - the data in these tabs is extremely
01:00 - useful in certain scenarios but for this
01:02 - course we will only care about the
01:04 - information in the elements tab
01:06 - the elements tab shows us all the html
01:08 - elements our page is composed of and as
01:10 - you can see our page has three elements
01:13 - html head and body
01:16 - there's also a fourth element that every
01:17 - html page has and this is called the
01:20 - doctype
01:21 - the doctype is the first element of an
01:23 - html page and must be the first thing in
01:25 - the html file
01:26 - the doctype tells the browser which
01:28 - version of html you are using
01:31 - for all of our videos we'll be using
01:32 - html as our doctype this tells our
01:35 - browser to use the most up-to-date
01:36 - version of html available
01:38 - the next element is the html element
01:41 - this element tells the browser that all
01:42 - the code inside the html element is html
01:45 - this tag should contain everything
01:47 - inside of your html file except the
01:49 - doctype and should come after the talk
01:51 - type
01:52 - the head element is the next element and
01:54 - is technically optional
01:56 - the information in the head element is
01:58 - never displayed in the browser but is
02:00 - instead used to set information such as
02:02 - the title or description of the page
02:04 - this element is generally the first
02:06 - element inside the html element but it
02:08 - does not have to be
02:10 - our last element is the body element the
02:12 - body element contains all the
02:13 - information that we want to display
02:15 - inside the browser this can include text
02:18 - images videos and much more
02:21 - try updating your html file to include
02:23 - all these elements and also change the
02:25 - text to something else then save the
02:27 - file
02:28 - you may notice that google chrome does
02:30 - not update and render your changes
02:32 - in order to force google chrome to
02:34 - update you will need to refresh the
02:35 - browser
02:36 - this can become quite annoying though if
02:38 - you must refresh each time you make a
02:40 - change so we'll download a plugin for
02:42 - visual studio code called live server
02:45 - this plugin will automatically refresh
02:47 - our browser every time we make a change
02:49 - in order to download this plugin go to
02:51 - the extensions tab in the bottom left of
02:53 - the sidebar and type live server into
02:55 - the search bar
02:57 - next click the install button on the
02:59 - live server plugin and then click the
03:00 - reload button after the install is
03:02 - complete this will restart visual studio
03:05 - code with the new plugin enabled
03:07 - now if you open your html file you will
03:09 - see a go live button on the bottom of
03:11 - the screen
03:12 - this button will open your html file in
03:14 - your default browser and every time you
03:16 - save your html file it'll automatically
03:19 - reload your browser you may notice that
03:21 - the url in your browser has changed it
03:23 - now looks something like this
03:25 - this is because the live server plugin
03:27 - actually uses your computer as a server
03:29 - to serve the files to the web browser on
03:31 - your computer
03:32 - let's break down what this url means
03:35 - the first set of numbers from the url
03:37 - 127.0.0.1
03:40 - is the ip address of your localhost
03:43 - this ip address is exactly the same on
03:45 - all computers and is the i p address of
03:47 - the computer server
03:49 - the second set of numbers after the
03:50 - colon is the port number
03:52 - these two numbers work similarly to how
03:54 - an address of an apartment complex works
03:57 - the ip address is like the address of
03:59 - the apartment complex while the port
04:01 - number represents the apartment number
04:03 - of a single room in the apartment
04:05 - complex
04:06 - if you do not specify a port number the
04:08 - browser will automatically use port 80
04:10 - which is the default port for http
04:13 - communication
04:14 - you now have all the setup complete to
04:16 - efficiently develop html pages
04:19 - we'll begin learning new html elements
04:21 - as well as the structure of an html
04:23 - element
04:24 - we'll also start building the project
04:25 - that we'll work on over the duration of
04:27 - the entire introduction to web
04:28 - development course
04:30 - the project is to create a website for
04:32 - your favorite musician or band
04:34 - i will walk you through the exact steps
04:35 - needed to create the website and i'll
04:37 - explain all the concepts along the way
04:40 - as you follow along with this course i
04:41 - want you to choose your favorite
04:42 - musician or band and create the website
04:44 - for them instead of copying exactly what
04:46 - i do
04:47 - in this video we'll be creating the html
04:49 - for the about page of the fanned website
04:52 - you may notice that it looks ugly now
04:54 - but remember that html is only for the
04:56 - content of the site later we'll use css
04:59 - to style the page
05:00 - let's get started by going over the
05:02 - structure of an html element
05:04 - most html elements are composed of a
05:06 - start tag an end tag and some content
05:09 - between these tags
05:10 - the content inside these tags can either
05:12 - be text or other html elements
05:15 - there are some tags however that have no
05:17 - content and thus have no end tag these
05:20 - are called empty elements
05:21 - the image tag and an example of an empty
05:24 - element
05:25 - as you may notice the image tag has an
05:27 - attribute called source
05:28 - all html elements can have attributes
05:30 - set on them to define certain
05:32 - characteristics of the element such as
05:34 - the source for an image tag and that is
05:36 - all there is to an html element
05:38 - we will now jump into the actual coding
05:40 - of the about page for the website and
05:41 - learn about many different types of html
05:43 - elements hello everybody welcome to the
05:46 - coding section of this video
05:47 - as you can see on the left side of my
05:49 - screen i have visual studio code open
05:51 - with the html from the previous video
05:53 - i also have an images folder containing
05:55 - all of the images that we're going to be
05:57 - used to create the about page of this
05:58 - website
06:00 - on the right of my screen you can see
06:01 - the final version of the about page
06:03 - created for a band called the generics
06:06 - for you this band will be completely
06:07 - different but you should be able to
06:09 - follow the same template that i am using
06:10 - on this right side
06:13 - in order to get started creating this
06:14 - band page let's first right click on our
06:17 - about page and click open with live
06:19 - server this will allow us to see our
06:21 - changes live as we make them
06:23 - now let's go back to the final band page
06:25 - and take a look at the different
06:26 - components of the page the first thing
06:28 - you may notice is that at the top of the
06:30 - page we have a header
06:32 - this header contains a navigation with
06:34 - three links going to the home page the
06:36 - store page and the about page as well as
06:38 - a title for the band the generics
06:40 - there's also a line in between the two
06:42 - separating them
06:44 - let me paste in some code that will
06:46 - render this for us
06:49 - now let me open this code in the browser
06:51 - as you can see we have our navigation
06:53 - links at the top of the page
06:55 - our title at the bottom
06:57 - and a horizontal line separating them
06:59 - let me explain how this works first all
07:02 - of our content is wrapped with this
07:04 - header tag
07:05 - this header tag
07:07 - is just a way of telling the browser
07:08 - this is a header element it doesn't
07:10 - apply any styling to these elements it
07:13 - just says this block of code is the
07:15 - header for our page
07:17 - the next element inside of our page is
07:19 - the nav element this is very similar to
07:21 - the header element in that it doesn't
07:23 - apply any styling but it tells the
07:25 - browser that this is the navigation
07:27 - section of our web page you could have
07:29 - multiple navs throughout your page but
07:31 - most likely you're going to just have
07:33 - one nav either in the top of your page
07:35 - or on the side of your page
07:37 - next we have the ul element
07:40 - this stands for unordered list there are
07:42 - two types of lists that you can create
07:44 - in html an ol which is an ordered list
07:47 - and a ul which is an unordered list in
07:50 - our case we are using an unordered list
07:51 - or a ul because the elements in our list
07:54 - have no particular order to them
07:57 - next we have three li elements
08:00 - li elements stand for list item and can
08:03 - only be used inside of a ul or an ol
08:07 - these denote the actual items of your
08:09 - list and as you can see on the right are
08:10 - styled with a bullet point when they're
08:12 - inside of an unordered list
08:15 - and they are styled with numbers when
08:16 - they are inside of an ordered list
08:20 - next we have an hr element this element
08:23 - as you can see has no closing tag which
08:25 - means it is an empty element
08:27 - this hr element
08:29 - supplies us this horizontal line in our
08:31 - page and stands for horizontal rule
08:35 - lastly we have an h1 element the h1
08:38 - element is a heading element
08:40 - and there's six different sizes of h of
08:42 - heading elements there's the h1 h2 h3 h4
08:47 - h5 and h6
08:48 - each one is progressively smaller than
08:50 - the last one with the h1 being the
08:52 - largest and the h6 being the smallest
08:55 - now let's go back to our
08:57 - final version of the web page and look
08:59 - at the next section of code that we have
09:01 - this is the about section at the top you
09:03 - can see that we have a header element
09:05 - which is called about
09:07 - a grouping of text with an image and
09:09 - another group of text
09:11 - only paste over some code that will
09:13 - define this section
09:14 - and view this in the browser as you can
09:16 - see we have that about heading
09:18 - a grouping of text our image and another
09:21 - grouping of text
09:23 - on the left here we can view the actual
09:24 - code and break it down
09:26 - the first thing you'll notice is that we
09:27 - have a section element that wraps all
09:29 - the other code in this section the
09:31 - section element is very similar to a
09:33 - header element in that it implies this
09:35 - is a grouping of stuff that is all
09:37 - inside of one section
09:39 - while the header element says this is
09:41 - the header of our page the section
09:43 - element says this is just a generic
09:45 - section of some form in which all the
09:47 - content is related
09:49 - next we have an h2 element for the about
09:52 - header this is very similar to our h1
09:54 - header except for that an h2 header is
09:57 - always going to be smaller than h1
09:58 - header because h1 is the largest header
10:01 - h6 is the smallest as you remember so h2
10:04 - is just one step below in h1 and as you
10:06 - can see on the right here our h1 for the
10:08 - generics is larger than our h2 for about
10:12 - next we have a p element also known as a
10:15 - paragraph element a paragraph element
10:18 - defines a grouping of text that is
10:20 - usually long form paragraph form text
10:23 - with many sentences
10:25 - and it is much smaller font than our
10:27 - headings
10:28 - next we have an image tag
10:30 - the image tag as you can see is an empty
10:32 - element and has no end tag
10:35 - it also has this source attribute that
10:37 - we talked about earlier
10:39 - the source attribute defines the path to
10:41 - the image to be displayed on the page in
10:44 - relation to the actual page you're on so
10:47 - as you can see we are in this about.html
10:49 - page
10:50 - and in the images folder we have an
10:52 - image called bandmembers.png
10:55 - so in order to get this image we go into
10:57 - the images folder and then get the image
11:00 - bandmembers.png this must be a path
11:03 - related to the about.html file so if we
11:07 - moved this about.html file into our
11:09 - images folder for example
11:12 - then this path would have to be
11:15 - bandmembers.png
11:17 - as opposed to
11:19 - images bandmembers.png and if we reopen
11:22 - this in live server you'll see that this
11:23 - now works
11:25 - let's move that back to where it was
11:27 - though
11:29 - and then make this images
11:32 - slash bandmembers.png
11:34 - and open it in live server again
11:36 - and there we go the image works now
11:39 - and lastly we have another paragraph
11:40 - element with another section of text
11:43 - now let's go back to our final page and
11:46 - look at the last element that we have
11:48 - the footer element as you can see in the
11:50 - footer we have the generics heading as
11:52 - well as a youtube image a spotify image
11:55 - and a facebook image let me paste over
11:57 - some code that will define this in html
11:59 - and view this in the browser
12:01 - as you can see we have that heading as
12:03 - well as our three images
12:05 - if we go over and look at the actual
12:07 - html code you'll notice that almost all
12:09 - of the elements are something that we've
12:11 - already used before
12:12 - the footer element just like the header
12:14 - and section element defines a grouping
12:16 - of text and html that is going to be in
12:19 - the footer of the page which is almost
12:21 - always going to be at the very bottom of
12:23 - your page we then have our h3 element
12:25 - which just like the h2 and h1 is a large
12:28 - text heading for the page and it is
12:30 - going to be smaller than the h2 element
12:33 - we then have another unordered list with
12:36 - three list items in it and each one has
12:38 - an image which links to the facebook
12:41 - logo spotify logo and youtube logo in
12:44 - our images folder
12:46 - and that's all there is to creating the
12:48 - html for this about page as you may
12:50 - notice our actual final page looks very
12:53 - different than what our current page
12:54 - looks like but that is because this
12:57 - final page is styled using css
13:00 - as you remember from earlier videos html
13:02 - is only used to define the content of
13:04 - the page and this right here is all of
13:07 - the content that goes onto our page
13:09 - the styling for the fonts font size
13:12 - background colors and all these images
13:14 - that'll all come later in css
13:17 - all the content though the html is
13:20 - complete for this about page
13:22 - some common problems that you may run
13:23 - into as you create the html for your own
13:25 - band about page is that you forget to
13:27 - include the ending tag for your html
13:30 - elements
13:31 - if you do this your html will not look
13:33 - correct or it may not even render at all
13:36 - in order to check that you have created
13:37 - all the ending tags for your html
13:39 - elements if you click on either the
13:41 - start tag or the end tag visual studio
13:44 - code will automatically highlight the
13:46 - ending tag for you or the start tag if
13:49 - you had selected the ending tag this is
13:51 - an easy way to check if you have
13:53 - actually created the ending tags and
13:55 - starting tags for all of your elements
13:57 - another common problem is with your
14:00 - images not displaying in order to get
14:02 - around this problem make sure that the
14:04 - path for your image
14:06 - is in relation to your actual html page
14:09 - that it is on for example our about page
14:12 - is in the same folder as the images
14:14 - folder so we must first navigate through
14:16 - the images folder to get to the images
14:19 - inside of it
14:22 - we'll dive into more html elements as we
14:24 - build the home page of the banned
14:25 - website and by the end of this video
14:27 - we'll have created all of the html
14:29 - needed for the homepage of our website
14:31 - before we get started coding let's cover
14:33 - a few of the concepts that we will be
14:35 - utilizing starting with html elements
14:38 - if you have ever tried to use a greater
14:39 - than or less than sign in the text of
14:41 - your html you may notice that it does
14:43 - not render and actually messes with your
14:44 - entire page rendering
14:46 - this is because these symbols along with
14:48 - many more are special symbols that are
14:50 - used in html for signifying start and
14:53 - end tags
14:54 - in order to render these symbols we must
14:56 - use html entities an html entity is
14:59 - written by writing an ampersand and
15:01 - pound sign followed by the number that
15:03 - corresponds to the symbol
15:05 - for example this is the code that will
15:06 - render the less than symbol
15:08 - remembering which numbers correspond to
15:10 - which symbols can be quite difficult
15:12 - though
15:13 - this is why the most common symbols such
15:15 - as the less than sign have a name that
15:17 - can be used instead of the number
15:18 - this is the code for the less than
15:20 - symbol using the name as opposed to the
15:22 - number
15:23 - when you use the name of the symbol
15:24 - instead of the number make sure that you
15:26 - do not include the pound sign after the
15:28 - ampersand
15:29 - the next major concept is the idea of
15:31 - meaningless elements
15:33 - so far we have only learned about
15:34 - elements that have inherent meaning for
15:36 - example the header element is used to
15:38 - wrap the header of a page the nav
15:40 - element is for the navigation section
15:42 - and the h1 element is for a heading
15:44 - html has many many elements that have
15:46 - specific meaning but sometimes a section
15:48 - of your page does not have any special
15:50 - meaning or there is no html that conveys
15:53 - the meaning you want
15:54 - this is where meaningless elements come
15:56 - in
15:57 - there are two different meaningless
15:58 - elements div and span
16:00 - these elements are the same in every way
16:02 - except that the div element is a block
16:04 - element meaning that it will appear on a
16:06 - separate line from the content around it
16:08 - similar to the paragraph tag the span
16:10 - element on the other hand is an inline
16:12 - element and thus appears in line with
16:14 - the content around it if this does not
16:17 - make sense yet the differences between
16:18 - these two elements will become apparent
16:20 - as we write the html for this lesson
16:22 - essentially all you need to know about
16:24 - meaningless elements is that they should
16:26 - be used anytime you need to group
16:27 - together html that either has no meaning
16:30 - or there is no html tag to describe the
16:32 - meaning
16:33 - now that we got that out of the way
16:34 - let's jump into the coding of the
16:36 - homepage for the band website
16:39 - hello everybody welcome to the coding
16:40 - section of this video
16:42 - as you can see on the left i have visual
16:43 - studio code open with the project we
16:45 - left off in the last video and on the
16:47 - right i have the final version of the
16:48 - band homepage
16:50 - to get started we should copy the
16:52 - about.html page and rename it to
16:55 - index.html
16:57 - this is because the about page shares
16:59 - the same header and the same footer as
17:02 - our home page
17:03 - we now can get rid of the section in the
17:05 - middle that contains the about content
17:06 - since we will not need that on the home
17:08 - page the reason that we named this page
17:10 - index.html is because the index page is
17:13 - the page that is shown when you leave
17:15 - nothing after the website url so if we
17:18 - remove this slash index.html
17:21 - and hit enter you'll see that it renders
17:23 - the exact same thing that is inside the
17:24 - index.html and if we change this
17:27 - save it you'll see it shows up there now
17:29 - let's get started with the actual
17:31 - content of this page let's jump back to
17:33 - the image that we have to use as a
17:35 - reference and get started with the
17:37 - header
17:38 - as you can see inside the header we have
17:40 - an additional button for get our late
17:42 - latest album and another button for the
17:44 - play button to create these elements
17:47 - we'll use the button element
17:49 - the button element will render a button
17:51 - on the page as we can see here and if we
17:53 - give it some text such as
17:56 - what is on this page you get our latest
17:58 - album
18:00 - you'll see that it renders a button that
18:02 - we can click on our page
18:05 - let's do the same exact thing for the
18:06 - play button
18:08 - now we can't actually just
18:11 - show this image with a normal button key
18:14 - press we have to use an htl1 entity that
18:16 - we talked about earlier
18:18 - the code for this entity is as follows
18:23 - this will render the play button as we
18:24 - can see here
18:26 - as you may notice our two buttons on
18:28 - this same line
18:29 - as opposed to on different lines like
18:31 - they are in this image
18:32 - this is because the button is an inline
18:34 - element as opposed to a block element
18:36 - in order to get around this problem we
18:38 - can use a tag called the line break tag
18:40 - which is the br tag the br tag adds a
18:43 - line break whatever it is so if we put
18:46 - it after this button it'll create a line
18:48 - break right here before the next button
18:50 - and if we save that on the right you can
18:52 - see that they are on separate lines
18:53 - now we want a little bit more spacing
18:55 - than this between our elements so we'll
18:57 - use another line break element in order
18:59 - to create a little bit of a gap between
19:00 - our two buttons
19:02 - that is all the html that we're going to
19:04 - need for the header section but as you
19:06 - can see in this home page view that
19:08 - there is a giant background image that
19:10 - is applied for the entire header in
19:12 - order to remind us that we need to
19:14 - create this background image and find it
19:16 - later let's add a comment into the code
19:18 - to do this
19:19 - use an exclamation point followed by two
19:21 - dashes which will create a comment in
19:24 - the code comments
19:25 - do not actually render any information
19:28 - on the html page but they show up in the
19:30 - code so that you can remind yourself or
19:32 - other people that use this code what
19:34 - certain things mean or what to do so for
19:36 - example let's create just a to-do
19:38 - comment that tells us that we need to
19:40 - find a suitable background image
19:46 - there we go so now if we go back to our
19:48 - page you can see that that does not
19:49 - actually render but it shows up in the
19:51 - code for us to reference later
19:54 - now let's go on to the middle section of
19:55 - our page
19:56 - in the middle section of our page
19:58 - we will use a section element just as we
20:00 - did for the about section of our code to
20:03 - wrap all of this stuff in our tours
20:04 - section
20:06 - and you can see that we have a header
20:08 - called tours just like we had in the
20:10 - about section so let's create an h2 and
20:12 - add the text tours into that and view
20:15 - that to make sure that that shows up
20:17 - correctly
20:18 - next we have a few rows that display all
20:21 - the tour dates for our upcoming tours of
20:23 - the generics band
20:25 - there is no actual html element to
20:27 - denote a row for example in this
20:29 - scenario so what we are going to do is
20:31 - we are going to wrap our entire set of
20:33 - rows in a div which is a meaningless
20:35 - element that we talked about earlier
20:37 - this will make it a block element so
20:39 - that way these items will not appear on
20:41 - the exact same line as each other
20:43 - we will then wrap each individual row in
20:45 - a div of its own
20:48 - so this outside div here is wrapping all
20:51 - of these
20:52 - rows
20:53 - and then each one of these rows has its
20:55 - own div that will contain just the text
20:57 - inside of it
20:58 - now let me add the text inside of the
21:00 - rows
21:06 - now as you can see if we go over to our
21:08 - page we have the different text rendered
21:10 - for all the text in the row
21:12 - but it doesn't quite look right
21:14 - first off we need this july 16th date to
21:17 - be bolded
21:19 - in order to do this in html we will use
21:20 - what's called a strong tag
21:24 - the strong tag denotes something that is
21:26 - important
21:27 - in most cases it means that the text
21:29 - inside of the strong tags will be bolded
21:31 - but in some scenarios the text will
21:33 - actually not be bolded for example if
21:35 - you're using a screen reader if you are
21:37 - blind the text will have special
21:38 - emphasis when it speaks it back to you
21:41 - because you cannot actually see bold
21:42 - versus non-bold let's put our july 16th
21:45 - inside of that strong tag
21:47 - save it and go back to our browser to
21:49 - see that that is actually bolded now
21:53 - next we have the text for detroit and
21:56 - the text for the actual place that the
21:57 - performance is in let's wrap these in
21:59 - span tags
22:03 - span tags are the other meaningless
22:04 - element that we talked about and this
22:06 - denotes an inline element if we go to
22:08 - our rendered version of our page you can
22:10 - see that these elements do not break the
22:12 - lines as these block elements from the
22:14 - div do if we were to change this to be a
22:16 - div
22:21 - you can see that now it breaks both on
22:24 - the top and the bottom of the line let's
22:26 - change that back to a span
22:28 - lastly we need to create the button for
22:31 - our final element let's wrap this by
22:33 - tickets text inside of a button element
22:39 - now if we go back to our page we can see
22:41 - that that is now a clickable button
22:44 - one more thing to note about these
22:45 - buttons is that they can have a type to
22:47 - them
22:48 - which is an html attribute
22:51 - in this case you can have the type of
22:53 - button menu reset or submit in our case
22:55 - since this is just a generic button we
22:57 - want to use the button type
22:59 - let's copy that and paste that into our
23:01 - other buttons as well since they are
23:02 - also generic buttons
23:04 - lastly we need to add an hr element that
23:06 - we talked about in the previous video
23:08 - to the end of our row because we have
23:11 - this underline here that we want to
23:12 - incorporate now if we go back we can see
23:14 - that we have this underline under our
23:16 - row
23:17 - you may notice that the text is very
23:18 - close together with almost no spacing
23:20 - between them
23:21 - you may think that in order to fix this
23:23 - you can add a bunch of spaces after your
23:25 - text and if you save that you would
23:26 - think that a bunch of spaces would show
23:28 - up after this but if you say that you
23:30 - see that that does not happen
23:31 - html actually removes all of the extra
23:34 - spaces after any element whether it's a
23:37 - space a tab
23:38 - even if you put an enter new line in
23:40 - here and save it it'll remove all of
23:42 - those at the end of your element
23:45 - in order to get around this and actually
23:46 - include some space in between our
23:48 - elements we're going to use use
23:50 - temporary the less than and greater than
23:52 - symbols that we talked about earlier
23:54 - with the html entities
23:57 - let's go after our strong tag here
23:59 - and write the code for less than
24:02 - and the code for greater than
24:06 - now you can see that we have a little
24:07 - bit of a space between our text let's
24:09 - copy and paste this in between all the
24:11 - different elements of the row
24:13 - and now there's a little bit of spacing
24:14 - so that is easier to see which element
24:16 - is which the last thing that we need to
24:18 - do in order to get our page to be
24:20 - exactly the same as this is copy this
24:22 - row and create all the text needed for
24:24 - the rest of these rows i'm going to do
24:26 - that real quick now
24:54 - we now have all the code that we need
24:56 - for these sections
24:57 - if we go back to this page we can see
24:59 - that all of our rows are now being
25:00 - rendered and they all look correct
25:02 - except you see that we have this
25:03 - additional underline on the last row so
25:05 - go back to our code and remove that
25:07 - final hr element
25:09 - now we have exactly the same html that
25:11 - we have on this page
25:14 - last thing we should do is delete this
25:15 - placeholder text that we added in here
25:17 - at the beginning
25:18 - and now we are perfect
25:20 - the only thing left to do is to add some
25:22 - elements to the head
25:24 - as you can see at the top this title of
25:26 - our page it just shows the url of the
25:28 - page that we are on if we want to change
25:30 - that we can use a title element in the
25:32 - head section of our html
25:35 - this will actually not show up anywhere
25:36 - on the body of our page but it will be
25:39 - used by the browser to set the title of
25:41 - our page on the tab
25:43 - let's just set the title to the
25:45 - generics
25:47 - and if we save you can see that now it
25:49 - recreates the title of our page another
25:51 - common element in the head section is a
25:53 - meta tag
25:54 - the meta tag has a bunch of different
25:56 - things that we can define for it based
25:57 - on what we set for the name attribute
25:59 - but in our case we want to set the
26:01 - description of our page
26:03 - this description is used by the browser
26:06 - to show a little bit of a description of
26:08 - your page under the title whenever you
26:10 - search in google for example along with
26:12 - other places
26:13 - first let's just set any title which we
26:15 - set inside of the content section of
26:17 - this tag let's just say this is the
26:20 - description
26:23 - and close off that meta tag
26:26 - now as you see when we save nothing
26:27 - actually changes on our page because
26:29 - this is inside of the head of our page
26:32 - if we were to upload this page to the
26:34 - internet and do a google search for it
26:36 - you'll see that this description
26:38 - will show up underneath the title of our
26:41 - page inside of the google browser
26:43 - results
26:44 - now let's go to our about page and do
26:45 - the exact same thing in the side of the
26:47 - head
26:48 - just paste this in here
26:50 - change the title from generics to the
26:52 - generics
26:53 - about
26:55 - and we can keep the description exactly
26:57 - the same
26:58 - that's all that there is to creating the
27:00 - html for our index page
27:04 - we'll dive into one more crucial html
27:06 - element as we build the store page of
27:08 - the band website by the end of this we
27:10 - have created all the html that we need
27:11 - for the entire project
27:13 - before we get started coding we need to
27:15 - cover one of the most important and most
27:16 - common html elements the anchor tag
27:19 - the anchor tag also known as the a tag
27:22 - is the html element that allows us to
27:23 - add links to our web pages
27:25 - the structure of the anchor tag is very
27:27 - similar to that of an image tag but
27:28 - instead of specifying a source attribute
27:30 - for an image an anchor tag uses an href
27:33 - attribute which stands for hypertext
27:35 - reference
27:36 - the href attribute works exactly like
27:38 - the source attribute when trying to find
27:40 - the file you specified
27:42 - this means that the href attribute value
27:43 - should be relative to the html file that
27:45 - the anchor tag is in
27:47 - for example
27:48 - if you had a file called page.html in
27:50 - the same folder as the html file with
27:52 - the anchor tag then you would use
27:54 - page.html as the href of the anchor tag
27:57 - to link to page.html
27:59 - another use of the href tag is to link
28:01 - to other web pages by their url this
28:03 - also works exactly the same as the
28:05 - source attribute of the image tag
28:07 - if you want to create a link to google
28:08 - then you would create an anchor tag and
28:10 - set the href to google's url
28:12 - this url must be the full url of the
28:14 - website which includes http at the
28:16 - beginning
28:17 - in order for an anchor tag to work the
28:19 - href attribute must be defined
28:21 - another common attribute the target
28:23 - attribute on the other hand is optional
28:25 - the target attribute specifies where the
28:27 - link should open
28:28 - by default the value of the target
28:30 - attribute is self which means the link
28:32 - should open in the current browser tab
28:35 - the only other value for the target
28:36 - attribute is blank
28:38 - that means that the link opens in a
28:40 - separate tab
28:41 - don't forget to make sure you include
28:42 - the underscore in the front of the self
28:44 - and blank target attribute values or
28:46 - they will not work
28:47 - we will cover both target types in the
28:49 - coding section of this video so if this
28:51 - does not make sense yet it will become
28:52 - obvious in a bit
28:54 - now that we got that out of the way
28:55 - let's jump into the coding of the store
28:57 - page for the band website
29:01 - hello everybody welcome to the coding
29:03 - section of this video
29:05 - as you can see on the left i have visual
29:07 - studio code open with the project from
29:08 - the last video that we left off on the
29:10 - only difference is that inside the
29:12 - images folder i've added all the images
29:14 - that we're going to need to create the
29:15 - store page of the band website
29:17 - on the right of my screen i have a
29:19 - picture of the store webpage pulled up
29:21 - so we can use this as a reference to
29:23 - create the html for the band page let's
29:26 - get started by copying the about.html
29:28 - page and renaming it to store.html
29:31 - this is because our store page and our
29:33 - about page both share the same header
29:35 - and the same footer
29:37 - now let's delete the content in the
29:39 - center about the about page that we do
29:41 - not actually need in the store page
29:44 - what we do need is we need to create a
29:45 - section for the music
29:47 - section for merge and a section for cart
29:50 - let's do that
29:54 - inside of each of these sections we're
29:56 - also going to have a header for the
29:57 - title of music merch and cart
30:03 - now let's take a look at the content
30:04 - inside of each of these sections
30:06 - as you can see the music and merch
30:07 - section both share the same template for
30:09 - its content where it has an album or
30:12 - t-shirt or coffee cup whatever's being
30:14 - sold a picture of that the price of it
30:17 - and then a button to add it to the cart
30:19 - so let's create these elements we're
30:21 - going to want to do we're going to want
30:22 - to wrap this entire element inside of a
30:24 - div element so that way we know it is
30:26 - one contained content
30:31 - inside of that div we're going to want
30:33 - to have a div for the album name this is
30:35 - because we want this to be on its own
30:37 - line so we can't just use a span
30:41 - and inside of that div since this is
30:43 - bolded we'll use a strong tag
30:45 - to put the title of album one
30:50 - next we're going to want to add the
30:51 - image tag
30:52 - and it's going to have a source
30:54 - attribute which in our case is going to
30:56 - be images
30:57 - slash album1.png
31:01 - and lastly we need to add a final div
31:03 - that's going to wrap both the price and
31:05 - button for adding to cart
31:06 - we're going to put the price inside of a
31:08 - span
31:10 - and then we're going to add the button
31:12 - for add to cart and make sure to add the
31:14 - roll of button since this is just a
31:16 - general generic button
31:21 - now let's open that up using live server
31:22 - to see what our changes look like
31:27 - as you can see we have the album name
31:30 - picture of the album and then the line
31:32 - containing the price and the button to
31:33 - add to cart
31:35 - the only thing left to do now is to copy
31:37 - this and paste it down four times so
31:38 - that we have
31:40 - a section like this for all of the
31:41 - albums that we are selling in the music
31:42 - section of our store
31:44 - i'm going to do that now
31:52 - now if we open that up
31:53 - we can see that we have our four
31:54 - different albums being displayed with
31:56 - the title top picture in the middle and
31:59 - the button at the bottom
32:00 - you may notice however though that they
32:01 - are all on an individual line as opposed
32:03 - to being side by side
32:05 - as they are in this image
32:07 - this is because we are wrapping all of
32:08 - them inside of a div and divs break the
32:10 - line as we talked about earlier
32:12 - later we are going to fix this in the
32:14 - css portion of our course but for now we
32:16 - will just keep it like this because as
32:18 - you remember html is only for content
32:21 - and css is where we talk about layout
32:23 - and display
32:24 - now if we go back to the image of our
32:26 - store page we can see that in the merge
32:27 - section we have almost the exact same
32:29 - layout that we do inside of the music
32:31 - section of our store so i'm just going
32:33 - to copy one of the templates from the
32:34 - music section
32:36 - paste it into the merge section and
32:37 - change it accordingly
32:43 - now if we go view this you'll see that
32:45 - these also show up at the bottom inside
32:47 - the merch section
32:49 - the last thing that we have to look at
32:51 - is the cart section of our store this is
32:53 - slightly different than the rest of our
32:54 - sections and includes a few new elements
32:56 - that we haven't talked about yet
32:58 - let's first get started by creating the
33:00 - header row of item price and quantity
33:03 - to do this we will wrap all three of
33:05 - these in a div so that they appear on
33:06 - the same line
33:08 - and we will use strong tags
33:12 - to wrap all the content because it is
33:14 - bolded
33:17 - now if we go take a look at that we'll
33:19 - see that we have item price and quantity
33:21 - all displayed on the same line
33:22 - but we will use the same spacing trick
33:24 - that we used in the last video in order
33:26 - to show the space between these because
33:27 - right now it is difficult to read
33:30 - so in our code we are going to add a
33:31 - less than
33:33 - and a greater than sign
33:35 - this will add a little bit of spacing
33:37 - between our elements we'll just copy
33:39 - this one more time so it's between price
33:40 - and quantity as well
33:42 - next we are going to work on adding in
33:44 - each of the individual rows of this
33:46 - section we'll do this by using another
33:48 - div tag to wrap the entire row
33:50 - followed by an image tag to store the
33:52 - image for the first item
33:54 - we'll use the source to be album one as
33:56 - we talked about earlier
34:00 - and close that and we'll go look at it
34:01 - and we'll see that this image is way too
34:03 - large we want this image to be much
34:04 - smaller in order to do that we can set a
34:07 - width and height property
34:09 - on the actual image element itself
34:12 - this attribute we're going to set to 100
34:14 - which will stand for 100 pixels
34:17 - if we leave off the height element it'll
34:19 - automatically adjust the height to be
34:22 - an aspect ratio with the width so if we
34:24 - had an image that was 200 pixels by 400
34:26 - pixels so 200 pixels wide 400 pixels
34:29 - tall and we set the width to 100
34:32 - the new height would be 200 which would
34:33 - automatically be set
34:35 - if we however set both the height and
34:37 - the width it'll automatically set both
34:39 - those for us to be 100 and 100.
34:42 - next we're going to want to add the name
34:44 - of the actual item inside of a span
34:47 - we'll just call this t-shirt
34:51 - and then we'll want to add in the price
34:53 - inside of a span as well
34:58 - and between those we're going to want to
35:00 - use the less than and greater than signs
35:02 - that we talked about for our spacing
35:04 - now if we view that we'll see that we
35:06 - have the name of the item followed by
35:08 - the price of the item
35:11 - next we need to add in this input that
35:13 - allows users to select the quantity of
35:15 - item that they want where they can type
35:16 - in any number that they want in here
35:18 - in order to do this we are going to use
35:20 - an input element an input element is an
35:23 - empty element that allows us to create
35:26 - an input of various different types in
35:28 - this case we're using a number input so
35:30 - we'll set the type equal to number
35:33 - there are many different types of input
35:34 - that you can create but the most common
35:36 - types are a number input and a text
35:38 - input
35:39 - we will then close that off and if we go
35:42 - back to our page we'll see that we have
35:43 - an input in here that allows us to enter
35:45 - only numbers into it we cannot enter
35:47 - anything that is not a number just
35:49 - numbers
35:52 - but in our example you can see that we
35:53 - have this pre-populated with a 1.
35:56 - in order to do this we'll set the value
35:58 - property the value property corresponds
36:00 - to the value of the actual
36:02 - input element and as we change it as we
36:05 - type in different numbers into the input
36:07 - this value will automatically adjust to
36:09 - be the same as whatever number we typed
36:11 - in here
36:12 - so over here let's just put the value of
36:14 - one because that is what is in our
36:15 - picture here i'm also going to use the
36:17 - same spacing tricks that we talked about
36:19 - with less than greater sign to add a
36:20 - space between this price and the input
36:23 - and lastly we need to add in a button
36:26 - this button will have the roll of button
36:27 - because it is a generic button and
36:29 - inside of it we will just put the text
36:31 - remove
36:32 - now if we go back to our page we can see
36:34 - that we have all the elements here that
36:36 - we have in our image over here
36:38 - now let's copy this div one time
36:41 - and fill it in with the information from
36:43 - the second row down here
36:49 - now if we go back we can see that we
36:52 - have the correct information here i also
36:54 - changed this first image to be the shirt
36:56 - image because i forgot to change that
36:58 - and as we can see we have the value of 2
37:00 - in here which corresponds to the value
37:02 - of the input element here
37:04 - lastly let's add an hr
37:06 - after all of these in order to put the
37:08 - line at the bottom of the page that we
37:10 - have here before we get to total
37:12 - the reason i'm not including an hr under
37:14 - these item price and quantity views is
37:17 - because we will add these later with css
37:19 - this is because an hr takes up the
37:21 - entire space that is given which in our
37:23 - case will be all the way from the far
37:24 - left of our page to the far right of our
37:26 - page with no breaks in between
37:30 - now let's add a final div which is going
37:32 - to contain the information for the total
37:34 - and the price
37:36 - as we can see the total is
37:39 - emphasized with bold so we'll use a
37:41 - strong tag
37:42 - and type in total
37:45 - and then we'll have the price inside of
37:47 - a span
37:54 - lastly we want to add this purchase
37:56 - button at the very bottom underneath of
37:58 - everything else
37:59 - so inside of a div of its own so that is
38:01 - on its own line we'll add in a button
38:04 - with the roll of button
38:09 - and we'll give it the text of purchase
38:15 - that's all there is to creating this
38:16 - html here and as we can see if we look
38:18 - over here we have all the elements
38:20 - that we have on this page
38:22 - created in html here
38:25 - the last thing we have left to do is add
38:28 - in links so that we can navigate with
38:30 - the home store and about buttons that we
38:32 - have up here
38:33 - in order to do that let's scroll to the
38:35 - very top
38:36 - and wrap
38:38 - this text inside of an a tag as we
38:40 - talked about earlier
38:42 - so that now our text is a link but in
38:46 - order for this link to work we need the
38:47 - href that we talked about earlier
38:50 - since our store page is in the same page
38:52 - as our index page which is our homepage
38:54 - all we need to type in is index.html
38:58 - and now when we save this we'll have a
39:00 - link here that when we click on it will
39:02 - bring us to the index.html page
39:05 - now let's go back to the store page
39:07 - and do this for all of our different
39:08 - links
39:13 - now you can see that we have buttons for
39:14 - the home page store page and the about
39:16 - page and when clicked on they'll bring
39:18 - us to the different pages
39:21 - at the very bottom you'll notice that we
39:23 - also have buttons for youtube spotify
39:25 - and facebook
39:27 - so now we need to add anchor tags
39:29 - wrapped around this
39:30 - but as you can see there's no text for
39:31 - us to wrap around all there is is this
39:33 - image tag but that is okay we can wrap
39:35 - this image tag inside of an anchor tag
39:37 - and it'll work as a button
39:39 - in order to do this create the anchor
39:40 - tag
39:41 - give it a href which in this case is
39:43 - going to be the url of youtube which is
39:46 - https colon backslash backslash
39:49 - youtube.com
39:53 - and then we will put the image tag
39:54 - inside of this a tag
39:58 - now we say that if we hover over youtube
40:00 - we can see that as a button and if we
40:02 - click it it'll bring us to youtube.com
40:06 - let's do the same thing for spotify and
40:08 - facebook
40:16 - now if we save that we can see that the
40:18 - youtube link spotify link and facebook
40:20 - link are all working as you can see we
40:22 - click here we go to the spotify website
40:24 - and so on
40:25 - but one problem is that when we click
40:27 - these links it'll override the tab that
40:29 - we're in and we don't want that for
40:30 - these bottom links so we're going to use
40:32 - the target attribute
40:34 - on our href and we're going to set it to
40:36 - underscore blank
40:39 - i'm going to copy this over to all the
40:41 - rest of our links
40:46 - and now when we click on a link for
40:47 - spotify for example it'll open in a new
40:49 - tab while keeping the tab for our
40:51 - original page
40:54 - now all we need to do is copy these new
40:56 - links that we created over to our home
40:59 - and our about page and our html will be
41:01 - completely finished for the entire
41:03 - website
41:10 - and there we go now if we go to any of
41:12 - these pages you'll see that we have
41:13 - links that work on all of our pages
41:18 - one last thing i forgot to mention is
41:19 - that in our store page we want to change
41:22 - the title of our page from the generics
41:24 - about to the generics store
41:27 - and there we go that is all the html
41:29 - that we need for this entire project
41:32 - in our next set of videos we'll be
41:33 - covering css css is what is going to
41:36 - allow us to take this boring bland
41:38 - looking html and converting it over to
41:40 - this beautiful looking mock-up that we
41:42 - have over here
41:43 - after we're done with the css for all of
41:45 - our pages we're then going to jump into
41:46 - javascript which will allow us to make
41:48 - our store page interactive this will
41:50 - make it so the add cart button actually
41:52 - adds elements to the cart down here the
41:54 - remove element actually removes them and
41:56 - changing the numbers inside of the
41:57 - quantity will actually update the total
41:59 - and that is all there is to html while
42:02 - we have covered many html elements there
42:04 - are still many more html elements that
42:06 - we have not covered
42:07 - i have only selected the most important
42:09 - and useful html elements to cover in
42:10 - this introductory course because many of
42:12 - the html elements are either obsolete or
42:15 - only useful in very specific scenarios
42:18 - we're going to be taking the banned web
42:20 - pages that we created and style the
42:22 - about page to look exactly as this image
42:24 - on the right here
42:25 - to give you an idea of what we're
42:26 - starting with
42:28 - over here is going to be our about page
42:30 - that we have currently designed with
42:32 - just the html and ocss
42:35 - also as a side note before watching this
42:38 - video if you know nothing about css make
42:41 - sure you watch my learn css in 20
42:42 - minutes video in order to get primed on
42:44 - what you'll need to know in order to
42:46 - watch this video and follow along
42:48 - now let's get started into the css
42:50 - design for this page
42:52 - the first thing i want to note is that
42:54 - i've added a fonts folder into our
42:56 - project and included the two fonts that
42:58 - we're going to be using to style some of
43:00 - our elements
43:01 - i also in our images folder changed our
43:04 - bandmembers.png to be a square image so
43:06 - that it'll fit perfectly inside of a
43:08 - circle
43:09 - and i changed our footer images the
43:11 - facebook logo spotify logo and youtube
43:14 - logo to be white instead of black so
43:16 - they're going to show up on top of our
43:18 - light blue background that our footer
43:19 - will have
43:21 - now that we have that out of the way
43:22 - let's create our css file that we're
43:24 - going to be writing all of our code in
43:26 - we're just going to call this styles.css
43:30 - then
43:30 - inside of our about.html page
43:33 - in the head let's add in a link
43:38 - give it a row of stylesheet
43:43 - and an href
43:45 - of style.css
43:50 - now if we save that nothing over here
43:51 - will change because we don't actually
43:53 - have anything loaded into our styles.css
43:55 - but to test this let's just give our
43:57 - html a background color
44:04 - and we'll make it red
44:05 - if we save that
44:06 - perfect our background changes to red
44:08 - which means that everything in our
44:09 - styles.css is being loaded into our
44:12 - about.html page
44:16 - now let's clear that out of the way and
44:17 - get started
44:19 - the first thing that we're going to want
44:20 - to do is we're going to want to style
44:22 - the header portion of our site
44:24 - if we go into our about.html page here
44:26 - we see that our header we have our
44:28 - navigation which is these three buttons
44:29 - at the top here as well as our header
44:32 - for the generics which is our band name
44:34 - the very first thing that we're going to
44:36 - do is give our header element a
44:38 - background image that is equal to the
44:39 - background image that you see over here
44:42 - in order to do that
44:43 - let's first give our header class
44:47 - and we'll just call it main
44:49 - header
44:50 - in our styles.css we'll use
44:53 - a selector to select that class
44:55 - and then use the background
44:57 - image property to set an image for our
45:00 - background
45:01 - now this background image property works
45:02 - very similar to the href for an anchor
45:05 - tag
45:06 - we'll use url and then inside of the url
45:09 - we'll specify where our image comes from
45:11 - in our case the image comes from our
45:13 - images folder over here
45:15 - this header background.jpg so we'll just
45:18 - put inside of here images
45:21 - slash
45:22 - header background.jpg
45:25 - if we save that and go back to here
45:27 - we'll see that our image is going to be
45:29 - behind here
45:30 - right now this doesn't quite look right
45:32 - though
45:32 - in order to fix that we're going to use
45:35 - the background size property
45:38 - and set this to cover
45:39 - what this is going to do is it's going
45:41 - to tell the background to expand as much
45:43 - as it can until one of the borders is at
45:46 - the very edge of either the width or the
45:48 - height so it'll expand either as wide as
45:50 - it can or as tall as it can until it
45:53 - can't get
45:54 - any larger without surpassing the size
45:57 - of the image
45:58 - so if we say that you see that our image
46:00 - has expanded all the way as wide as it
46:03 - can and as tall as it can and the last
46:05 - edge to hit is the width this is the
46:08 - full width of our image and it cut off
46:10 - the top and the bottom of our image
46:12 - that's exactly what we want our image to
46:13 - do this means that if we resize our page
46:16 - our image will grow
46:18 - and shrink as needed without us having
46:21 - it enter any extra code
46:23 - as you can see in our example photo the
46:25 - background image has a slightly darker
46:27 - hue to it than over here so in order to
46:30 - do that we're going to add a second
46:31 - background this time we're going to use
46:33 - a background color
46:38 - and we're going to set it to rgba
46:41 - and we'll just use black
46:43 - with a 60 transparency
46:46 - now if we save that you'll see that
46:48 - nothing actually changed about our
46:49 - background
46:50 - this is because by default you can only
46:52 - use either a background color or a
46:54 - background image okay to get around this
46:57 - we're going to use what's called
46:58 - background blend mode
47:00 - this is essentially
47:02 - telling the browser how do you want to
47:04 - blend these two different backgrounds
47:06 - together and we're going to use multiply
47:09 - which is essentially just going to
47:10 - combine these two together over top of
47:12 - each other and as you can see on the
47:13 - right we now have a grayish dark color
47:16 - to our background instead of it just
47:18 - being entirely opaque
47:21 - now all we need to do is add a little
47:23 - bit of padding underneath of this
47:25 - lettering down here so that we match the
47:27 - spacing we have over here and to do that
47:29 - we can just use padding bottom
47:32 - and we'll set it to something like 30
47:33 - pixels if we save that we now have a
47:35 - nice gap on the bottom here you may also
47:38 - notice that around our background image
47:41 - we have some white space in between here
47:43 - even though in our about.html this is
47:45 - the very first thing in our body
47:47 - this is because css styles are being
47:49 - defaulted onto certain elements such as
47:52 - the html element and body element
47:55 - if we go into our style sheet and at the
47:57 - very top here just put html and body as
48:00 - our two selectors
48:01 - and we set the margin to zero
48:04 - and the padding to zero
48:07 - we save that we'll see that now those
48:09 - margins and paddings go away on the side
48:10 - here but we still have a margin on the
48:12 - top
48:13 - this is because
48:15 - our ul element also has a default margin
48:18 - on the top
48:19 - so if we go in
48:21 - set our ul element to have a margin of
48:23 - zero as well
48:24 - and save that you now see that our
48:26 - background takes up the entire width and
48:28 - goes all the way to the very top of our
48:29 - page
48:31 - generally though you don't want a style
48:33 - using elements such as getting rid of
48:35 - the margin on all uls so in our about
48:38 - here we're going to give our nav a class
48:41 - of nav to indicate that this is our
48:43 - navigation
48:44 - and in here we use the nav
48:47 - class that we just created followed by
48:49 - ul to say that all the uls inside of the
48:52 - nav will now have no margin if we say
48:54 - that this will look exactly as before
48:57 - but now
48:58 - all of our normal uls will still have a
49:00 - margin but the ul's inside of a
49:02 - navigation class will not have a margin
49:05 - now before we get started on styling the
49:07 - nav we're going to want to use the
49:08 - everything selector to set a few general
49:11 - styles that will apply to all the
49:13 - elements in our html
49:14 - the first one that we're going to want
49:16 - to use is box sizing
49:18 - and we're going to want to set this to
49:19 - border box
49:21 - what this does is it makes it so that
49:23 - the size of our elements
49:25 - are determined by the padding and the
49:28 - margin as well as the actual size of the
49:30 - content so if we had a box and we set
49:33 - the width to be 200 pixels and we set
49:35 - the padding to be 20 pixels
49:38 - without border box the width of that
49:40 - object would be 200 pixels wide plus 20
49:42 - pixels on the right for padding and 20
49:45 - pixels on the left for padding making it
49:47 - 240 pixels wide
49:49 - with border box though
49:51 - the width attribute takes into account
49:53 - the padding as well so if we set a width
49:56 - of 200 pixels our element will be
49:58 - exactly 200 pixels wide and the padding
50:00 - will be on the inside of those pixels
50:04 - if that doesn't make any sense we'll be
50:05 - able to see more examples of this as we
50:07 - continue on styling this page
50:10 - another attribute that we want to apply
50:11 - to all of our elements is going to be
50:13 - our font family this will be the default
50:16 - font family that where all of our text
50:17 - is going to use in our case we're going
50:20 - to use the railway font
50:21 - but since this font is not a generic
50:24 - font that can be used on websites we
50:26 - need to import this font
50:27 - in order to do that we're going to use
50:29 - google fonts
50:31 - and import it using this url this url
50:34 - can be found on the google fonts webpage
50:36 - and you can search for any font on that
50:38 - you want and then all you have to do is
50:40 - click on that font click the import and
50:42 - it will give you this link to copy and
50:43 - paste into your css
50:45 - now if we save this you'll see all of
50:47 - our font will change to railway
50:49 - the last thing that i want to apply to
50:51 - all of our elements is a default text
50:53 - color
50:54 - in general black on white is very high
50:56 - contrast and can be tiresome on your
50:58 - eyes to read so i like to use a more
51:00 - subtle text color of 777 here which is
51:03 - just going to be a light gray which is
51:05 - much easier than eyes to read
51:07 - now that we have that out of the way
51:09 - let's style our navigation element
51:11 - first let's go to our about.html and
51:14 - remove this hr tag
51:15 - this hr tag was only there to add an
51:18 - underline for our navigation but we'll
51:20 - do that in css as borders are much
51:22 - easier represented in css
51:25 - i also want to give our navigation
51:26 - another class of main nav
51:29 - this is because we will have multiple
51:31 - different types of navigations that we
51:32 - want to style similarly but we only have
51:35 - one main navigation that's going to be
51:37 - at the top of our page
51:39 - so now if we go back to our styles.css
51:41 - let's style our actual nav class first
51:45 - we've already admitted so that the
51:46 - margin is zero so that our nav will no
51:49 - longer have any margins around it but we
51:51 - want to maybe make our elements that
51:53 - they are in line with each other as
51:54 - opposed to on separate lines as they are
51:57 - over here
51:58 - to do this
52:00 - we'll select the nav element and then
52:02 - we'll select the li elements under that
52:04 - nav
52:05 - and we will give them a display
52:07 - of inline
52:09 - this tells us that the browser should
52:11 - render all these elements in line with
52:13 - each other as opposed to on separate
52:15 - outlines which is the default for a list
52:19 - next we want to style the actual links
52:21 - themselves that are in our navigation
52:23 - element
52:24 - to do this we want to give them some
52:26 - padding so let's say we'll use a padding
52:28 - of 0.5 em
52:30 - which will just space out these elements
52:31 - a little bit from each other
52:33 - we also want to give them
52:35 - a white text color to match our mock-up
52:38 - that we have of our image
52:40 - and then lastly we want to set it to
52:42 - text decoration
52:43 - none
52:44 - which will remove that underline from
52:46 - underneath of our elements over here
52:48 - and if we save that we see that our l
52:50 - text expiration has removed the
52:52 - underline from these elements changed
52:53 - the color to white but our padding has
52:56 - only added padding to the left and right
52:58 - and not the top and bottom as padding
53:00 - should do when you give it just one
53:02 - number
53:03 - this is because these are inline
53:05 - elements and inline elements cannot
53:07 - apply padding on the top or bottom
53:10 - what we need to do is we need to change
53:11 - the display to the inline block
53:15 - inline block is very similar to inline
53:17 - except for it allows you to do certain
53:19 - things such as add padding and height to
53:21 - elements that inline elements do not
53:23 - allow you to do
53:25 - so now as you see we have padding on the
53:26 - top bottom left and right of all these
53:28 - elements due to the being inline block
53:32 - the last thing we want to do is we want
53:34 - to make it so that it is easy to tell
53:36 - which element we are hovering over to
53:38 - give the user some feedback
53:39 - to do this we'll style the a tag again
53:42 - and we'll use the hover selector to say
53:45 - when we hover over the element we want
53:47 - to do something and all we want to do is
53:49 - change the background color
53:52 - and we'll just use
53:53 - a light
53:55 - grayish color here so we'll use white
54:03 - but we'll use
54:04 - transparency of 30 percent
54:06 - so the white will show mostly as gray
54:09 - as you can see we hover over these
54:11 - elements
54:12 - we are now getting a background color
54:13 - that tells us hey this is being hovered
54:16 - this is all the styles that we want to
54:18 - apply to our general navigation though
54:20 - now we want to move on to our main nav
54:22 - gus because this is going to be styles
54:24 - that are applied to only the main
54:26 - navigation and not all of our other
54:28 - navigations
54:29 - the first thing that we want to do is we
54:31 - want to make it so the text will be in
54:33 - the center of our screen
54:35 - since our navigation should be centered
54:37 - at the very top of the screen
54:39 - we also want to make it so the font size
54:40 - is a little bit bigger so it is easier
54:42 - to read we'll just use 1.1 em which will
54:45 - make it about 10 bigger
54:47 - and then we'll change the font weight to
54:49 - be lighter
54:51 - as opposed to the stronger font weight
54:52 - so that way it blends a little bit
54:54 - better into the background
54:56 - and then lastly we want to add a border
54:58 - bottom
54:59 - to our element to replace that hr that
55:01 - we deleted
55:02 - and it'll be one pixel wide completely
55:05 - solid and we'll just use
55:08 - another
55:09 - light gray color here
55:18 - and if we save that we now see that we
55:20 - have a border on the bottom
55:22 - and our elements at the very top
55:25 - the last thing that we need to do is
55:27 - space out our elements from each other
55:28 - because right now they're very close to
55:30 - each other
55:31 - to do this
55:32 - we'll use the main nav again
55:34 - and we'll select the li elements
55:36 - and we'll just give them a little bit of
55:38 - padding so we'll say padding of zero on
55:40 - the top and bottom and five percent on
55:43 - the left and right
55:44 - there we go now our elements are spaced
55:46 - out from each other and as our screen
55:48 - grows the elements stay spaced out from
55:50 - each other and as it shrinks
55:52 - they stay spaced out again
55:54 - the last thing we have to style on our
55:56 - header is going to be the actual name of
55:58 - the band here if we go back to our
56:01 - mock-up over here you see that this is
56:03 - going to be much larger and of a
56:04 - completely different font
56:06 - than we have right here by the default
56:08 - so to do this let's go back to our about
56:10 - page and let's add a class here
56:13 - and we'll just call it band name
56:16 - we're also at a second class of band
56:19 - name
56:20 - large
56:21 - because we have two instances where our
56:23 - band name will be rendered
56:24 - once in the header where it is very
56:26 - large and a second time in the footer
56:28 - where it is a more normal size
56:30 - this is why we are going to use this
56:32 - band name class to style all of the
56:34 - elements that we need to make the band
56:36 - name look good and then this band name
56:38 - large class to make the band name in the
56:40 - header larger
56:42 - let's first start with the just normal
56:44 - band name class
56:49 - in this class we're going to first want
56:51 - to make the text align center
56:55 - this will cause it to appear in the
56:56 - center of the screen
56:58 - and then we want to remove all margins
57:01 - from this element because h1 elements by
57:03 - default have margin if we save that
57:05 - it'll get squished a little bit closer
57:07 - together
57:08 - and then we want to increase the font
57:09 - size
57:13 - and since this is just going to be our
57:15 - normal band name and not the large one
57:17 - we're just going to use this font size
57:18 - of 4em
57:20 - and save that
57:23 - then we want to change the font family
57:28 - this font family is going to be booter
57:31 - 0
57:33 - 0 but if we save that you'll see on my
57:36 - local machine this updates to be the
57:38 - correct font that's because i have
57:40 - booter zero zero installed on my
57:41 - computer
57:42 - normally this will not be the case
57:44 - especially when you upload your website
57:46 - to be hosted somewhere else
57:48 - in order to load this style in
57:51 - we first want to grab our font files
57:53 - here and we want to
57:55 - import them
57:57 - using the at font phase property
58:01 - in here we want to use the font family
58:06 - this essentially tells
58:07 - our browser what name do we want to use
58:09 - for this font we are going to use booter
58:12 - zero zero this is the name that you will
58:15 - set when you set the font family down
58:17 - here
58:20 - then we need the source this essentially
58:22 - tells the browser where is this font
58:24 - coming from this is just like the
58:26 - background image url so we're going to
58:28 - use
58:30 - fonts
58:31 - slash booter0 and we'll use the first
58:33 - one here the
58:34 - woff and tell it that this format
58:38 - is wff
58:41 - then we want to import our other source
58:44 - which is url
58:45 - fonts
58:47 - buddha zero zero waff2
58:51 - let me get rid of these backslashes here
58:57 - and we'll use the format
59:01 - of waff2
59:04 - this tells the browser that we have
59:06 - these two different types of fonts here
59:08 - the booter zero zero waff and booter
59:10 - zero zero waff2 and it tells it which
59:12 - format is each one
59:14 - the reason we have multiple sources is
59:16 - because some browsers don't support all
59:18 - types of sources such as waft2 or just
59:20 - the normal waff
59:22 - this is so now with having multiple
59:24 - sources here the browser will take the
59:26 - very first source and if that one works
59:28 - it'll use it and then if that one's not
59:30 - acceptable it'll go down to the second
59:32 - source here
59:34 - lastly we want to put a font weight
59:37 - which tells us what weight is this font
59:39 - and it is just normal
59:41 - and same with font style this is just a
59:43 - normal font not italics or anything so
59:45 - we'll put normal here
59:48 - now we have that font loaded into our
59:49 - page so we have glitter 0 0 that is
59:52 - normal and normal style but over here
59:54 - you see that our font is bolded and
59:56 - doesn't quite look the same as our
59:58 - mockup
59:59 - this is because h1 tags by default bold
60:02 - their font
60:03 - to get around this we're going to set
60:05 - the font
60:06 - weight
60:07 - to be normal
60:09 - if we say that our font now looks
60:11 - exactly as it does over here
60:13 - the last thing we need to do is set the
60:15 - color of the font to be white and if we
60:18 - save that this now looks almost exactly
60:21 - the same as our mock-up does over here
60:24 - and that's everything that we need to do
60:25 - except for this font is a little bit too
60:27 - small
60:28 - this is why we use that band name large
60:31 - class
60:34 - inside of the band name large class
60:36 - we're going to set the font size
60:39 - we're going to make it 9 em
60:41 - if we save that that is now going to be
60:43 - much larger and it is going to look
60:46 - almost identical to how large it is over
60:48 - here
60:49 - and if you want you can play around with
60:51 - this number make it 8am for example
60:54 - and save it and it'll look great either
60:56 - way
60:57 - now that we have the header completely
60:59 - styled let's move on to styling the
61:01 - section content of our web page
61:03 - over in the about.html page let's add a
61:06 - class to our section and we're just
61:08 - going to call this content section
61:11 - essentially
61:12 - clarifying that this section is just for
61:14 - content and we can reuse this on all of
61:16 - our other content sections across our
61:18 - index and our store page
61:20 - i also want to give it a class container
61:23 - which we will use to specify a maximum
61:25 - size as well as some paddings on the
61:28 - outsides of our text so that way it's
61:30 - not quite squished up all the way
61:31 - against the edge of the screen
61:33 - back in styles.css let's use the dot
61:36 - content section
61:39 - class that we just created and give it a
61:41 - margin
61:43 - of 1 em this will give us a little bit
61:46 - of spacing on the top left right and
61:48 - bottom of our element so that way it
61:49 - distinguishes itself from the previous
61:51 - element
61:53 - then we'll use our dot container class
61:57 - that we just created
61:58 - and in here we'll style a max width
62:01 - which says that the max width of our
62:03 - element is going to be 900 pixels wide
62:06 - this means if our element tries to get
62:07 - any larger than 900 pixels it'll just
62:09 - stay at 900 pixels if i save that and
62:12 - increase my screen size
62:14 - you can see that this element
62:17 - stops at 900 pixels
62:23 - but as you saw it was showing up on the
62:24 - left side instead of centered
62:27 - to center it we're going to set the
62:28 - margin on top and bottom to zero and
62:31 - then we're going to use auto as the left
62:33 - and right margin
62:34 - this tells it that the margins on the
62:36 - left and right will be as large as they
62:38 - need to be
62:39 - and be exactly the same so that way the
62:41 - text will be always in the center
62:43 - and if we bring this all the way over to
62:45 - the side you'll see that we have a large
62:47 - margin on the right and left which
62:49 - centers our text on the middle
62:52 - and then lastly we just want to add a
62:54 - little bit of padding back to this
62:55 - container
62:56 - to push it away from the sides so we'll
62:58 - use zero on the top and bottom and 1.5
63:01 - em on the left and right in order to
63:03 - give us a little space so that our text
63:05 - does not run right up against the edge
63:07 - of our web page
63:09 - next we need to style the actual heading
63:11 - for this element
63:12 - we can use another class on our h2 here
63:16 - and we'll just call it section
63:18 - header
63:21 - there we go this is because all of our
63:23 - sections are going to be styled with the
63:25 - same exact header so we will use this
63:27 - class again on our home page and our
63:30 - about page
63:31 - now in our styles.css let's grab that
63:34 - section header class
63:36 - and in here we're going to just use a
63:38 - font family
63:40 - and this font family is called metal
63:43 - mania
63:44 - which again is not on the computer by
63:47 - default
63:48 - so we have to use another import url
63:51 - from
63:52 - google fonts and this import url like i
63:54 - said before you can find by going onto
63:57 - the google fonts web page and searching
63:59 - your font this is what the url is going
64:01 - to be for the metal mania font and if we
64:03 - save that you see that our text changes
64:07 - you can also see that we have the same
64:08 - problem where text is bolded as it was
64:10 - over here in the generics so we'll just
64:14 - change the font
64:16 - weight to be normal
64:19 - and now if we say that you'll see that
64:20 - our text is no longer bolded but it
64:22 - still doesn't look exactly as we want it
64:24 - to this is because we need to change the
64:26 - color on this
64:28 - to be slightly darker we'll use just 333
64:31 - which is about halfway between our light
64:33 - gray and completely black
64:35 - and then we want to center this text in
64:37 - the middle of our screen text align
64:39 - center
64:40 - if we save that
64:42 - you'll see that our
64:43 - section header is now in the middle of
64:45 - our screen it's the right color but it's
64:47 - slightly too small and we'll use the
64:50 - font size property
64:52 - 2.5 em to make it about two and a half
64:54 - times bigger save that and there we go
64:57 - our heading is perfect
64:59 - now the next element we need to take
65:01 - care of is the image in our about
65:03 - section
65:04 - as you can see on here the image is a
65:06 - circle and is displayed towards the top
65:08 - of our text
65:10 - the text just flows perfectly around the
65:12 - image no matter how large or small the
65:14 - image is
65:15 - in order to do this let's first add a
65:17 - class to our image
65:20 - and we'll just call it our about
65:23 - band
65:24 - image because this is a class we're only
65:26 - going to be using for our about band
65:29 - and then in here select that about band
65:31 - image
65:35 - and now in order to make it so that our
65:37 - text flows around this image what we
65:39 - want to do is we want to use the float
65:41 - property and tell it to float left this
65:44 - means that the image will remove itself
65:46 - from the flow and flow completely to the
65:48 - left side of the document
65:50 - also as you can see our image is quite
65:52 - large here so let's give it a height
65:56 - of 200 pixels
65:57 - and a width
66:00 - as well of 200 pixels and if we save
66:02 - that you see that our text is flowing
66:04 - perfectly around this
66:06 - but we want it to flow from the top so
66:09 - in our about here let's move our image
66:11 - above our p tags
66:13 - and save it and now as you can see from
66:16 - the very start of our text it is flowing
66:17 - around the image
66:20 - but our text is right up against our
66:23 - image and we don't want this in order to
66:25 - fix this
66:26 - let's give our image 15 pixels of margin
66:29 - on all sides in order to push the text
66:31 - away from the image
66:33 - lastly in order to create a circle we're
66:35 - going to use the border radius property
66:38 - this property tells us how far we want
66:40 - to curve the edges of our border and in
66:43 - our case
66:44 - 50 percent will make a perfect circle
66:46 - since we curve
66:47 - from fifty percent all the way to the
66:50 - next fifty percent so if we save that we
66:52 - have a perfect circle with our text
66:54 - flowing around it as we expected
66:56 - if we go over here as you can see it
66:59 - doesn't quite look exactly the same
67:01 - because our image is not at the very
67:03 - center of our text it's at the very top
67:05 - but it's much easier to style from the
67:07 - very top of the text and i personally
67:09 - think it even looks better this way
67:11 - as for the actual text of our content we
67:14 - don't need to change anything because in
67:15 - our generic
67:17 - everything selector we already set the
67:19 - font family and color to be exactly the
67:21 - same as what is over here
67:23 - so the last thing we have left to do is
67:25 - address the footer which we want to use
67:28 - a light blue background around with our
67:30 - band name on the left as well as our
67:31 - three elements on the right for our
67:33 - buttons to go to youtube spotify and
67:35 - facebook
67:37 - in order to do this we're going to need
67:39 - to supply some classes to the footer
67:41 - we're going to use the class
67:43 - of main footer similarly to how we used
67:46 - main header to specify that this is the
67:48 - main footer on our web page
67:50 - then we're going to use the band name
67:52 - class
67:54 - and apply that
67:55 - to our band name
67:57 - and if we save that
67:59 - and go back here
68:00 - you'll see that our band name has
68:02 - already updated to be white text and the
68:04 - correct font and font color and font
68:06 - size just because we already created
68:08 - that band name style before which is the
68:10 - power of using classes since they're so
68:12 - reusable to create many different
68:14 - elements and just copy and paste them
68:16 - along your page as you see fit
68:18 - so now let's go back to our styles.css
68:20 - and style that
68:22 - main footer element
68:27 - our main footer is overall very simple
68:29 - all we need to do is add a background
68:31 - color
68:32 - that's going to be that light blue color
68:34 - here which i just copied over
68:36 - and then we're going to make all the
68:38 - text in this main footer white so we're
68:40 - going to use a color of white
68:42 - and then lastly we want to have a little
68:44 - bit of padding between our elements and
68:46 - the edge of the background so we'll use
68:48 - a padding of 0.25 em on the top and
68:51 - bottom and then zero on the left and
68:53 - right and if we save that scroll down
68:55 - you see that we now have that light blue
68:57 - background as well as all of our text is
68:59 - white
69:01 - but we have the problem of our footer
69:04 - being stacked vertically when we want it
69:06 - to be stacked horizontally
69:08 - in order to fix this problem we're going
69:10 - to go back to our about.html and we're
69:13 - going to use a second div element in
69:15 - here
69:17 - with the class of container
69:21 - and main footer container
69:26 - that will wrap all the content inside of
69:28 - our footer
69:33 - there we go
69:34 - and now in our styles.css
69:37 - we'll make the main footer container
69:42 - the purpose of this main footer
69:43 - container is to wrap our elements
69:45 - in and display flex element
69:49 - a flex display or also known as flexbox
69:53 - is a very complex layout element that
69:55 - you can use in css but we're only going
69:58 - to skim over the top of it because in
70:00 - this video we don't have the time to
70:02 - cover the full complexities of flexbox
70:04 - but in the future i will make a video
70:06 - covering flexbox in depth
70:08 - if we scroll down here we see that
70:10 - already our elements have lined up next
70:11 - to each other on the left and the right
70:13 - which is great
70:15 - but we want our right side element to
70:17 - take up as much space as possible while
70:19 - our left side element should be as small
70:21 - as possible
70:23 - in order to do this
70:24 - we'll make it so that main footer
70:26 - container the ul inside of it which is
70:29 - our navigation on the right here
70:32 - we want it to grow
70:33 - to take up as much space as possible so
70:35 - we'll use flex grow and give it a value
70:37 - of one to tell it to grow
70:40 - then we also want to align our text in
70:42 - that element to the end of the element
70:44 - so we'll use text line and to tell our
70:47 - text to be on the right side instead of
70:49 - left side
70:51 - we also want it so that our youtube
70:53 - spotify and facebook links will be
70:55 - centered with this band logo on the left
70:57 - here to do this
70:59 - we'll use the align items property
71:02 - and set it to center
71:04 - to say to center everything vertically
71:06 - inside of this flexbox
71:09 - next all we need to do is style our
71:11 - navigation which we've already created a
71:13 - class for so on our ul
71:16 - we'll add a class of nav
71:18 - as well as footer nav
71:21 - so that we can use specific stylings for
71:22 - our footer and save that
71:25 - as you can see it has already changed
71:26 - that we have the background hover and
71:28 - the elements have lost their period on
71:30 - the left side denoting that it's a list
71:32 - item
71:33 - now all we need to do in here
71:35 - is change our footer nav
71:37 - li so that we have a different set of
71:39 - padding around these elements
71:41 - we'll use a padding of 0 on the top and
71:44 - bottom and 0.5 em on the left and right
71:46 - to give these elements a little bit of
71:48 - space around each other
71:50 - next we're going to make it so the
71:51 - images are going to be quite a bit
71:53 - smaller than they are right now since
71:55 - they're a bit oversized so we'll use the
71:57 - footer nav select all the images
72:00 - give them a width of 30 pixels
72:02 - and a height of 30 pixels
72:05 - if we save that we see that now
72:07 - everything is center aligned together
72:09 - inside of the footer our images are
72:11 - smaller they have the hover element
72:13 - which is the same from this navigation
72:15 - up here
72:16 - and they also allow us to click them and
72:18 - go to their links
72:21 - the great thing about this web page is
72:23 - that it's also responsive on different
72:24 - sizes so if we increase the size of our
72:27 - page you see that everything flows great
72:29 - around each other without breaking
72:32 - everything's working everything looks
72:34 - great whether it's full size
72:36 - or small
72:38 - it doesn't matter it'll work flawlessly
72:41 - this web page is though not designed
72:44 - specifically with mobile sizing in mind
72:46 - so it doesn't look as good on a small
72:48 - screen size as it does on a slightly
72:50 - larger screen size but either way
72:53 - it looks great no matter which size the
72:55 - browser is at
72:56 - and that is all there is to creating the
72:58 - about band page for this website we have
73:01 - all the styling so that our page looks
73:03 - almost exactly the same as the mock-up
73:05 - that we had before
73:06 - and it is even scalable to different
73:08 - browser sizes and looks good on all
73:10 - those different sizes
73:12 - the best part about this is since that
73:14 - we used very generic named classes such
73:17 - as container band name and nav we're
73:20 - able to apply these classes to the rest
73:22 - of our pages such as the home page here
73:24 - and the store page here in order to get
73:26 - a head start without having to restyle
73:28 - the elements such as this navigation and
73:31 - the footer every single time
73:34 - if you guys want to follow along with
73:35 - this project and use the exact same code
73:37 - that i have to style this about page
73:39 - here
73:40 - all this code is going to be available
73:42 - on my github which will be linked in the
73:43 - description below from there you can get
73:46 - these font files that i'm using as well
73:48 - as the different logos and background
73:49 - images that i'm using and even the
73:51 - actual code for this video is available
73:54 - on my github
73:57 - we're going to tackle styling the
73:58 - homepage of our website to look exactly
74:00 - as this image on the right here
74:02 - in order to get started with this
74:04 - let's open up our index.html page with
74:06 - live server
74:09 - and here we have all the html with no
74:11 - css stylings applied to it the first
74:14 - thing that we want to do
74:15 - is to go into our about.html
74:18 - copy our link tag from the head
74:20 - and paste this into our index.html file
74:24 - this way we'll be able to load the
74:26 - styles in from our styles.css file into
74:28 - our home page here
74:30 - as you can see this already made some
74:32 - changes by changing our font font color
74:34 - and etc based on our everything selector
74:37 - the next thing that we need to do is
74:39 - apply our styles to our header that we
74:41 - created in the last episode such as the
74:43 - class of main header
74:49 - if we save this we'll see that on the
74:51 - right our header will update and then we
74:53 - have our navigation which we can apply
74:54 - the classes of nav
74:56 - and main nav to
74:59 - and there we go we'll get rid of this hr
75:01 - here as well as these two line breaks
75:04 - and our comment since these are no
75:05 - longer needed since we have a background
75:07 - image and these line breaks will be
75:09 - taken care of using css
75:11 - let's save that
75:13 - and then add our final class here
75:16 - for the band name
75:18 - and band name large
75:22 - if we save that our header now looks
75:24 - very similar to how our about page
75:26 - header looks but we have these two
75:27 - buttons down here that we need to style
75:29 - still
75:30 - the first thing we want to do is create
75:32 - a button class for all of our buttons
75:35 - we'll do this in a similar way that we
75:36 - styled our navigation elements by having
75:39 - a nav class and then another class to
75:41 - style what type of nav it is but first
75:43 - we'll just create this generic button
75:45 - class that all of our buttons will be
75:47 - able to use
75:48 - inside of our styles.css let's add the
75:50 - selector for that button class and start
75:52 - applying the different styles we need
75:54 - we know that we want all of our buttons
75:56 - text to be centered in the middle and
75:58 - center of our button so we'll use text
76:00 - align
76:01 - center to put our text
76:03 - in the center horizontally
76:06 - and then we'll be using vertical line of
76:08 - middle to put our text in the middle
76:10 - vertically
76:12 - if we save that we'll notice that no
76:13 - changes were made over here because our
76:15 - buttons aren't tall enough or wide
76:16 - enough for our text to need to be
76:18 - aligned to the middle yet but as we
76:19 - start adding different paddings and
76:21 - different heights and widths we'll see
76:22 - that our text will always be in the
76:24 - center
76:25 - next let's add a little bit of padding
76:27 - around our button so that we have more
76:28 - space between the text and the edge of
76:30 - our button to do this we'll use padding
76:33 - and then we'll give it 0.67 em of
76:36 - padding
76:36 - on both the top bottom left and right
76:39 - by just doing one number if we save that
76:41 - we'll see our buttons have gotten
76:43 - slightly larger
76:44 - last thing we want to do is when we
76:46 - hover over a button we want our cursor
76:48 - to change to a pointer icon as opposed
76:50 - to the normal arrow icon so we're going
76:52 - to go into here change our cursor to
76:55 - pointer and save that and now when we
76:57 - hover over our buttons we'll get the
76:59 - pointer icon instead of the typical
77:01 - arrow icon
77:02 - the next thing we want to do is apply
77:04 - our button specific classes for our
77:06 - header and we'll just call this button
77:09 - header
77:11 - now if we go into our styles.css
77:13 - use the selector for our button header
77:15 - class
77:16 - we can start adding styles that are
77:17 - specific for this get or latest album
77:20 - button
77:21 - the first thing we want to do is use the
77:23 - margins around our button to be able to
77:25 - position it where we want if we look at
77:27 - our image here we can see that our
77:28 - button is positioned so it is slightly
77:31 - offset from the center and offset from
77:33 - the left edge of the screen
77:35 - we're going to be using margins with
77:36 - percentages and ems in order to
77:38 - accomplish this
77:40 - so if we use margin the first value if
77:42 - we use all four values of margin
77:44 - corresponds to the top margin which we
77:46 - want to set to 0.5 em which will be half
77:49 - the size of the font
77:50 - we then want to use 15
77:53 - to correspond to our right side margin
77:55 - which will take up 15 percent of the
77:57 - total space our object can occupy
77:59 - then we can use two em as the bottom
78:02 - margin and another fifteen percent as
78:04 - the left side margin
78:06 - if we save this we see that our object
78:08 - already aligns itself slightly offset
78:10 - from the left and not quite centered in
78:12 - our space this is exactly what we want
78:15 - next we want to style the button to look
78:18 - like it does on this page
78:20 - the first thing that we're going to want
78:21 - to do is change the text color to be
78:23 - white
78:28 - and then we want to add a border around
78:30 - our object
78:32 - it's going to be two pixels
78:34 - solid and we're going to use this color
78:37 - which is a slightly bluish color as our
78:39 - border color now if we save that and go
78:42 - back we already see that our text colors
78:44 - change to white and we have blue border
78:46 - around the object but we still have this
78:47 - gray background
78:48 - in order to get rid of that we just set
78:50 - the background color
78:53 - and we're going to use a very very
78:54 - opaque white color which would be rgba
78:57 - 255 255
79:01 - and 0.1
79:03 - and if we save that we now get a button
79:06 - that looks very similar to this button
79:08 - in color but spacing it's still not
79:10 - quite right
79:11 - what we need to do is set the border
79:13 - radius of our object to be zero which
79:16 - means completely remove the rounded
79:17 - corners of our object so that we now
79:19 - have a perfectly square cornered object
79:21 - over here just like in this image
79:24 - the border radius corresponds to how
79:26 - rounded the corners are so by setting to
79:27 - zero we have no rounded edges to our
79:29 - corner
79:30 - next we want to increase the font size
79:33 - we're just going to set that to 1.5 em
79:35 - to be about 50 percent larger and then
79:37 - we want to make the font weight to be
79:39 - lighter so that the text is slightly
79:41 - thinner
79:42 - and if we save that
79:43 - our button is looking very similar to
79:45 - our button over here but you'll notice
79:47 - that we don't quite have the same
79:48 - padding on the left and right
79:50 - in order to fix this we'll set our
79:52 - padding on the left
79:54 - to be 2em
79:55 - and our padding on the right to also be
79:58 - 2em
80:01 - now if we save that our button looks
80:03 - almost exactly the same as our button in
80:05 - here this is perfect
80:08 - but when we hover over this button
80:09 - nothing actually happens we have no way
80:11 - to know we're actually hovering over it
80:13 - in order to fix that we use the button
80:16 - header
80:17 - hover selector here and we'll set the
80:19 - background color
80:21 - and we'll just make it a slightly less
80:23 - opaque version of the color that it
80:24 - already is which is white
80:27 - but we'll use 0.3 instead of 0.1 as our
80:30 - opacity so now if we hover over it you
80:32 - see that our button gets slightly
80:34 - lighter so that way we know that we're
80:36 - actually hovering over top of it
80:38 - one thing that you may notice is if we
80:40 - zoom out here on our image and we
80:43 - increase our font or our window size to
80:45 - be even larger
80:46 - our button will become very offset to
80:48 - the left and not as centered as we like
80:50 - it to be
80:51 - in order to fix this
80:53 - in our index.html page let's wrap
80:56 - this button here
80:58 - inside of a div with the class of
81:01 - container
81:04 - if we do this we've already created this
81:05 - container class which has a limited
81:07 - width this means the padding of our
81:09 - button on the left and right will be
81:11 - inside of that confined width space of
81:13 - the container
81:14 - so if we save this and increase our size
81:17 - of our browser to be even larger you see
81:19 - that our button will always stay similar
81:21 - to the center of the screen because it's
81:23 - inside of a container with a limited
81:25 - width
81:26 - that's exactly what we want our thing
81:27 - our web page to react as
81:29 - now let's zoom that back in so it's
81:31 - easier for you guys to see
81:37 - there we go and now let's work on
81:39 - styling this button right here for the
81:41 - play button
81:42 - we'll use very similar styles to our
81:44 - header button
81:46 - but we'll also add a play button class
81:48 - to this
81:49 - if we save that we already see that this
81:51 - is very similar to our style over here
81:54 - what we want to do is we want to make
81:55 - this button entirely round and we want
81:57 - to make the icon on the inside blue as
81:59 - opposed to white
82:00 - in order to do this we'll go to our
82:02 - styles.css here and we'll use our button
82:05 - play class
82:06 - to style our play button how we want the
82:09 - first thing we want to do is center a
82:10 - button horizontally in the screen so
82:12 - we're going to use margin
82:15 - with zero on the top and bottom and auto
82:17 - on the left and right in order to tell
82:18 - our button to center itself in the
82:20 - screen but as you'll notice our button
82:22 - actually just centers over onto the left
82:24 - side this is because buttons are not
82:26 - block level elements and only block
82:28 - elements can have an auto margin to get
82:31 - around this we'll change our button to
82:33 - be displayed block
82:35 - and now if we save that we'll notice our
82:36 - button is perfectly centered in our
82:37 - screen
82:39 - the next thing we want to do is change
82:40 - the color of this icon
82:42 - to be our blue color here which we can
82:44 - just copy from our border
82:47 - save that and now we have that same blue
82:49 - color inside of our button we want to
82:51 - increase the font size in order to make
82:53 - the icon larger we'll use 4em
82:56 - and then we want to change our border
82:58 - radius to be 50
82:59 - in order to make a perfect circle
83:04 - and there we go but you'll notice that
83:06 - our button is more of an oval than a
83:08 - circle and that's because our button has
83:10 - different padding on it so we need to
83:12 - completely remove the padding from our
83:14 - button
83:15 - in order to make it a perfect circle
83:17 - but you'll see there's a slide problem
83:19 - where a button gets really scrunched up
83:21 - so we want to give our button a width
83:23 - and a height and we're going to make
83:25 - these exactly the same so our button is
83:27 - a perfect circle as opposed to an oval
83:30 - we'll just use 100
83:32 - pixels if we save that you see that we
83:35 - now have a perfect circle button in the
83:37 - center of our screen that is slightly
83:39 - offset from our button up here
83:41 - very similarly to over here
83:44 - and if we increase the size of our
83:45 - screen
83:46 - you see that our buttons will stay
83:48 - positioned how we want them no matter
83:50 - what size our screen is
83:52 - that's exactly what we want and
83:53 - everything that we need to do in order
83:55 - to make the header of our page look
83:57 - exactly the same as this image over here
84:00 - the next thing that we need to do is
84:01 - work on this section of our page which
84:04 - contains our tour dates and is the main
84:06 - content of this home page
84:08 - the first thing we can do is use our
84:10 - styles that we created in our previous
84:11 - video we can use our class over here of
84:15 - content section in order to specify that
84:18 - this is a content section and we can
84:20 - also use the class container in order to
84:22 - specify that we don't want the width to
84:24 - grow over a certain size
84:26 - next we can use the class here of
84:28 - section header
84:30 - just as we created in our other video
84:32 - that'll mark this header as a section
84:34 - header and center and give it the right
84:35 - font that we want
84:37 - now we need to tackle the individual
84:39 - rows of our tour date
84:41 - the first thing we can do is remove the
84:43 - hr as well as these less than and
84:45 - greater than symbols since these were
84:47 - only there in order to be used for
84:49 - spacing in our html and we will do all
84:51 - that with css now instead
84:54 - so now if we save that we see that our
84:56 - row is completely scrunched together
84:57 - which is perfect for us to start styling
85:00 - we also want to give our row a class of
85:03 - to a row so that we can say each row
85:06 - will be styled in the same exact way
85:08 - let's go into our styles.css here add
85:11 - that to a row selector and get started
85:13 - styling it the main thing we want our
85:15 - tour row to do is to give us padding
85:17 - between our different rows as well as
85:19 - give us a border on the bottom of the
85:21 - row
85:22 - so to start let's use border bottom to
85:24 - give a bottom border to our row and
85:26 - we'll make it one pixel solid black
85:29 - if we save that we see that we now have
85:31 - that border on the bottom of our object
85:33 - similar to how the hr worked
85:35 - but we also want there to be a little
85:37 - space between the row and the row below
85:39 - it as well as between the row and the
85:40 - border
85:42 - in order to give us space between the
85:43 - row and the border we'll use padding
85:45 - since padding is spaced between the
85:47 - content and the border and we'll set
85:49 - this to 1em
85:51 - if we save that we now have space
85:52 - between our content and our border and
85:54 - in order to give us space between the
85:56 - content below in our border we use
85:58 - margin which is on the outside of our
86:00 - border
86:01 - and we'll set that to the same 1em
86:03 - now if you save that we have space in
86:05 - between all of our rows here
86:07 - let's take this tour item or to a row
86:09 - class and give it to all of the
86:11 - different rows inside of our content
86:12 - here
86:13 - we can just copy and paste that into all
86:15 - these divs
86:17 - and after we're done with that
86:19 - if we save it we'll see that we now have
86:21 - borders on the bottom here
86:23 - let's get rid of all these hr's so it's
86:25 - easier to see
86:27 - and you'll see now that we have borders
86:28 - on the bottom of all these different
86:30 - rows
86:31 - very similar to over here but you'll
86:33 - notice there should be no border on our
86:35 - last row here
86:37 - and you may think oh we'll just remove
86:38 - the class and that'll solve the problem
86:40 - but that will get rid of all of our
86:41 - padding and margins
86:43 - in order to fix this problem we can use
86:45 - what is called the last
86:47 - child selector so if we do to a row last
86:50 - child this will select the last child
86:52 - with this to a row class
86:55 - and if we just give it a border
86:57 - bottom
86:58 - of none to say that there should be no
87:00 - border and save it you'll see the border
87:03 - on this last child has been completely
87:04 - removed
87:06 - now we can get started on styling the
87:07 - different elements inside of our row
87:10 - let's first start with the date element
87:11 - here
87:12 - and we're going to give this a class
87:14 - of tour item which will give to all the
87:17 - items in our row and we'll give it a
87:18 - specific class of tour date and this
87:21 - will work very similar to how we've done
87:23 - buttons and navs so far
87:25 - let's first start by styling the tour
87:28 - item
87:29 - element
87:30 - in here all we want to do is set very
87:33 - specific paddings margins spacings all
87:35 - of that we want between all of our tour
87:37 - items
87:38 - so first we want to add a padding right
87:40 - between all of our elements to give them
87:42 - a little bit of space
87:44 - of 0.5 em if we save that we'll see that
87:47 - now there's a little bit of padding to
87:49 - the right side of our date element here
87:51 - which is exactly what we want
87:53 - but we also want these elements to
87:54 - display in line
87:56 - with a specific width as we know inline
87:59 - elements cannot have any width applied
88:00 - to them for example if we were to apply
88:03 - a width of a thousand pixels here and
88:05 - save this
88:06 - our object does not actually become a
88:08 - thousand pixels wide and that's because
88:10 - it's an inline element so what we want
88:12 - to do is change the display to the
88:14 - inline block which will make this
88:16 - act like an inline element as in it
88:18 - won't break the line when it's done but
88:20 - it'll also be able to have widths and
88:22 - heights applied to it like a block
88:24 - element and if we save that we see our
88:26 - element is now 1000 pixels wide we don't
88:28 - actually want that so we'll remove that
88:29 - line
88:31 - perfect the only downside of inline
88:33 - block is it does add a tiny bit of space
88:36 - between each element that we cannot
88:38 - actually remove but that is okay for now
88:41 - now let's use that tour date class that
88:43 - we also assigned it and start styling
88:45 - that as well
88:46 - first we want to give it a slightly
88:48 - darker color than the rest of our row to
88:50 - match the styling in this page so we'll
88:52 - give it a color of
88:54 - five five five which is a slightly
88:56 - darker version of our 777 color and if
88:59 - we save that you'll see our colors a
89:00 - little bit darker
89:02 - we also want to make it so that it's
89:03 - bold so we use font weight of bold
89:07 - if you save that you notice not much
89:09 - actually changes and that's because we
89:10 - used a strong tag over here for our
89:13 - element strong tags are meant only when
89:15 - you want to emphasize something and in
89:17 - this case our bolding is only for visual
89:20 - instead of for emphasis so we want to
89:22 - change this to a span tag in order to
89:24 - remove the special emphasis applied to
89:27 - it since it is only meant to be visually
89:28 - bolded and not actually emphasized for
89:31 - importance
89:32 - now if we save that you'll see it'll
89:34 - look perfect let's go back to our
89:35 - style.css and give this a specific width
89:38 - and we'll just use 11
89:40 - for our width here and save that and now
89:43 - it gives us a little bit of extra
89:44 - spacing and as we increase the size of
89:46 - our browser the spacing will increase
89:48 - with it
89:49 - perfect now let's move on to the other
89:51 - elements of our tour item
89:53 - instead of our index.html let's give all
89:55 - of our elements the tour item class
89:59 - as well as a specific class in this case
90:02 - this is our city so we'll call it tour
90:03 - city
90:05 - this next one
90:06 - is going to be our arena so we'll give
90:08 - it to our item and to our arena
90:12 - and this last one is our button
90:14 - so we'll give it the class
90:16 - of button
90:18 - we'll also give it a tour item class
90:21 - and a tour
90:23 - button class
90:25 - and save that
90:26 - now our row looks a little bit better
90:28 - there's a little bit of space in between
90:29 - our elements but everything's not quite
90:31 - lined up how we want it so in our
90:33 - styles.css here let's style our
90:35 - individual tour elements starting with
90:36 - the city element
90:38 - which we're just going to give a width
90:40 - of 24
90:41 - since this is a slightly larger text
90:43 - than our date is
90:45 - let me save that and now it gives us a
90:46 - little bit of spacing we'll go on to our
90:49 - tour arena
90:50 - and we'll give this a width of 42 since
90:53 - this is our largest element by far
90:56 - and then lastly we use the tour button
90:59 - and instead of giving this an actual
91:00 - width because if we give it a width for
91:02 - example
91:03 - of 19 percent
91:05 - and we say that
91:07 - as we increase our screen size we'll see
91:08 - that our button will get wider which we
91:10 - don't actually want to happen so instead
91:13 - we'll use max width as opposed to widths
91:15 - which means our element will never be
91:17 - larger than 19 percent of the screen
91:21 - so now if we shrink this
91:23 - our button will stay exactly the same no
91:25 - matter how large or how small it goes
91:27 - because the width will always be the
91:29 - same as the content but it will never
91:31 - become larger than 19 of the screen so
91:33 - if we make our screen very small you'll
91:36 - see that our button will break onto two
91:37 - lines instead of shrinking even further
91:39 - that's exactly what we want
91:42 - you also may be wondering by looking at
91:44 - these widths why they don't exactly add
91:47 - up to 100
91:48 - because you would think we want to fill
91:49 - up 100 of the space and you are correct
91:52 - we do want to fill up 100 of this space
91:55 - but as i talked about inline block
91:57 - elements add some amount of spacing
91:59 - between each other inline block element
92:01 - that we cannot remove
92:02 - we have to account for this by making
92:04 - our widths slightly less than one
92:06 - hundred percent when added together to
92:08 - do this i subtracted about one percent
92:11 - from each of these widths after making
92:13 - them total up to 100 percent this way we
92:15 - have 96 percent width taken care of so
92:18 - that way our screen won't break onto
92:19 - multiple different lines until it
92:21 - becomes very very small and in that case
92:23 - you'll see it does break onto multiple
92:25 - lines but that is okay because our size
92:27 - our screen is not really meant to be
92:29 - viewed on mobile this is mostly for
92:31 - desktop design
92:33 - let's make that size a little bit larger
92:34 - here
92:36 - there we go and let's copy these styles
92:39 - onto all of our different elements over
92:41 - here
92:42 - in all of our different rows i'll do
92:43 - that really quick
92:54 - there we go as you can see now all of
92:56 - our rows are styled correctly but they
92:58 - all line up exactly so the spacing is
93:00 - exactly what we wanted to look like and
93:02 - if we increase the size of our browser
93:04 - everything stays in line in all of our
93:06 - different columns and scales to be
93:07 - responsive with the size of our browser
93:10 - this is perfect
93:11 - the only thing we have left to do is
93:13 - style our buttons so they look the same
93:15 - on this page as they do on this page
93:17 - in order to do that let's add one final
93:19 - class to our buttons which will be
93:21 - button primary since it'll be the
93:23 - primary button of our site and this
93:26 - primary attribute really refers mostly
93:29 - to the coloring of our button since our
93:31 - button base class already applies all
93:33 - the styling for the different sizing
93:35 - padding and margins that we need
93:37 - so now if we go over to our styles.css
93:40 - add this button primary class and here
93:43 - we can now style the different colors we
93:45 - need to
93:46 - let's first start by adding the color
93:48 - of white which will make our text color
93:50 - white as well as our background color
93:53 - which we want to set
93:54 - to this color
93:56 - and if we say that we now see our
93:57 - buttons are the exact same color as over
94:00 - here
94:01 - we next want to remove all the border
94:04 - from this element so we don't have this
94:05 - gray border around here anymore
94:07 - and then we want to make our border
94:09 - radius to be slightly bent around the
94:12 - corners as you can see over here we have
94:14 - a slight bend in the corner so we'll
94:16 - make our border radius be 0.3 em
94:20 - and if we save that you see that our
94:22 - button is already looking great but our
94:23 - text is a little bit dull in here so
94:25 - let's make the font weight bold
94:28 - to make our text pop a little bit and if
94:30 - we save that our buttons now look
94:32 - perfect and they look exactly the same
94:34 - as our buttons over here
94:35 - the only thing we have left to do is add
94:37 - a hover element to this so that we can
94:39 - tell that we're hovering over our
94:40 - element
94:41 - we'll do this exactly the same way by
94:43 - using our button primary with the hover
94:45 - selector
94:46 - and we'll just give it a background
94:47 - color
94:48 - that is going to be slightly darker
94:51 - so in here we'll go background color
94:54 - and we'll just set that
94:55 - to this color right here
94:58 - now if we hover over a button you'll see
95:00 - that it'll get darker to note that we
95:01 - are hovering over this button and it is
95:03 - easier for our users to know what's
95:04 - going on
95:05 - the last thing we have left to do is
95:07 - style the footer to be exactly the same
95:09 - as the footer on our about page
95:11 - so in order to do this we'll just go to
95:14 - our about page go down to the footer and
95:16 - copy
95:17 - all the footer elements ids classes all
95:20 - of that and we'll paste it over our
95:22 - footer here
95:23 - since we know that we want them to be
95:24 - exactly the same and now if we save that
95:27 - we scroll down here our photo now looks
95:29 - exactly the same as our footer over here
95:32 - which is exactly what we want
95:34 - now if we zoom out our web page here a
95:35 - little bit to be a hundred percent
95:38 - increase the size you'll see that our
95:39 - content stays inside of these bounds and
95:42 - that is due to the container class that
95:44 - we added this is perfect for making our
95:46 - site responsive without stretching too
95:48 - far on larger screens and also making it
95:51 - look decent on smaller screens such as
95:53 - this
95:54 - or this
95:55 - that's all there really is to creating
95:57 - the css for this home page you'll notice
95:59 - that this was much easier than doing our
96:01 - about page and that is because all the
96:03 - styles that we used in our about page we
96:05 - were able to copy over and use in our
96:07 - home page
96:10 - we're going to be taking the store page
96:12 - that we've designed earlier with html
96:14 - and style it to look exactly like this
96:16 - image on the right here
96:17 - now let's get started here by opening up
96:19 - our store html page using live server to
96:22 - see what we have to get started with
96:24 - here we go
96:25 - and the first thing that we need to do
96:26 - is copy over the style sheet that we've
96:28 - already created and link it so we'll
96:30 - just copy this link here
96:32 - from the index page paste it into our
96:34 - store page so we now have access to all
96:36 - the styles that we've already written
96:38 - and as you can see it's already taken
96:39 - effect
96:40 - the next thing that we need to do is go
96:42 - into our header here and we need to
96:44 - style our header to be exactly like our
96:46 - home page and our about page as you can
96:48 - see here
96:49 - so to do that let's just add the classes
96:51 - that we've already created of main
96:53 - header
96:54 - in our nav we're going to add the class
96:56 - of main nav
97:00 - and then nav
97:02 - and there we go that looks good to
97:04 - remove this hr and then finally style
97:06 - our band name here with band name
97:09 - and band name large
97:14 - we save that and there we go we have the
97:16 - same header that we have on all of our
97:17 - other pages
97:18 - and luckily for us this is the only
97:20 - thing we need to do in our header here
97:22 - the next thing we can do is move on to
97:23 - this section and work on this music cart
97:26 - section right here
97:27 - we can get started here by styling our
97:29 - section with the classes that we already
97:31 - have such as container and content
97:34 - section
97:36 - if we save that you'll see we get a
97:37 - little bit of padding from doing that
97:39 - and then we can also title our header
97:40 - here by using the class of section
97:42 - header
97:44 - which we've already created
97:46 - if we save that we now see that our
97:48 - header for our section is
97:49 - properly styled and now we can move on
97:52 - to styling the actual items that are
97:53 - going to be going into our cart
97:55 - let's first look at what we actually
97:57 - want the style to look like over here in
97:59 - our image and we can see that we have
98:00 - the title of the item at the very top
98:02 - centered we have the image here and then
98:05 - we have the price and the button to add
98:07 - it to the cart on the bottom that are
98:09 - slightly inset from the sides of the
98:11 - album image
98:12 - so in order to do that let's first add a
98:15 - class to this div that wraps all of this
98:17 - content here and we're just going to
98:19 - call this
98:20 - shop
98:21 - item
98:23 - and this is just going to represent a
98:25 - single item that we have for sale in our
98:26 - shop and this will be usable in the
98:28 - music and the merch section
98:30 - the next thing we can do is we can
98:31 - actually remove the divs that wrap this
98:34 - album since we can use css in order to
98:37 - make album on its own line without
98:39 - having to use a div to do that so let's
98:41 - remove these divs here
98:43 - and then we can also change the strong
98:44 - tag to a span since we know that the
98:48 - we want this album one to be bolded but
98:50 - we don't actually want to put emphasis
98:52 - on it that the strong tag does for
98:53 - things like screen readers we just want
98:55 - to style that in css
98:57 - so let's add a class to this here and
98:59 - we're just going to call this
99:01 - shop
99:02 - item
99:03 - title since this is going to be the
99:05 - title and the name of our shop item that
99:07 - we have here
99:08 - next we have our image which we are
99:10 - going to add a class to as well we can
99:13 - just call this shop item
99:16 - image
99:18 - so that we can style our image to resize
99:20 - it as we need
99:21 - and then lastly we have this bottom div
99:23 - here which are the details of our shop
99:24 - item so we're just going to give this a
99:26 - class
99:28 - we'll call it shop item details
99:31 - and inside of that we have the price of
99:33 - the shop item here so we can get that
99:35 - the class of shop
99:37 - item price
99:39 - and then we have our button here
99:41 - which we already have two classes for a
99:44 - button and button primary since this
99:46 - would be the bluish colored primary
99:48 - button that we have and then we'll add
99:50 - another class to it of shop item button
99:53 - so we can style this button specifically
99:55 - for the shop item as needed
99:57 - and if we save that
99:58 - go back to here
100:00 - you'll see that some of the things in
100:01 - our page have already changed we got the
100:03 - blue button now
100:04 - and now we can actually go into our
100:05 - styles.css and starts dialing these
100:08 - elements
100:09 - the first thing that we're going to want
100:10 - to do is we're going to want to give
100:12 - some margin around our shop items so
100:14 - that they don't run up right next to
100:16 - each other as you can see that these two
100:17 - items are
100:18 - so if we go in here
100:20 - we select our shop item we can just give
100:22 - it a margin on all sides of 30 pixels if
100:25 - we say that you now see that we have
100:26 - spacing on the sides bottom top of these
100:28 - shop items so they won't run right up
100:30 - against each other
100:32 - the next thing we can do
100:34 - is style this shop item title right here
100:37 - to do that we'll just select the shop
100:38 - item title
100:41 - and we'll get started styling it the
100:43 - first thing we want to do is we want to
100:44 - make it so that it is display block so
100:46 - that way it'll be on its own line as
100:48 - opposed to being in front of the image
100:50 - if the width of our browser is large
100:51 - enough
100:53 - the next thing we're going to do is we
100:54 - want to make this item 100 width so that
100:57 - it'll take up the entire width of the
100:59 - top of the image and that way when we do
101:01 - text align center
101:03 - the text will actually center itself
101:04 - above the image just like that
101:07 - the next thing we can do is change the
101:09 - actual size and color of the font so if
101:11 - we go in here we can make the font
101:13 - weight bold so it is a little bit larger
101:15 - we can make the font
101:16 - size the 1.5 em so it is also slightly
101:20 - bit bigger
101:22 - and then lastly add a color
101:24 - that is slightly darker than our current
101:26 - color here
101:27 - if we save that you see that we now have
101:29 - a great title but it's really close to
101:31 - our image so we'll just add a margin
101:33 - on the bottom here
101:35 - we'll make that about 15 pixels and we
101:37 - save that and now we see it spaced out
101:39 - above our image which is perfect this is
101:41 - exactly what we want for our title
101:43 - the next thing that we should tackle is
101:45 - the actual image of our shop item
101:47 - right now this image is quite large and
101:48 - takes up almost the entire screen so
101:51 - what we want to do is we just want to
101:52 - change that so that our shop
101:54 - item image
101:55 - is slightly smaller than it is right now
101:58 - so we'll just give it a height of 250
102:00 - pixels
102:01 - if we save that you'll see that our
102:03 - image shrinks down a little bit
102:04 - and the width and the aspect ratio stays
102:07 - the same because by default the width
102:10 - will be automatically
102:12 - as large as it needs to be for the image
102:13 - to be the same aspect ratio when the
102:15 - height is 250 pixels this is because we
102:18 - didn't actually set a width so it
102:19 - defaults to auto
102:21 - next we want to work on this details row
102:23 - down here where we have the price and
102:25 - the button for adding it to our cart
102:27 - so let's go into here and we'll do shop
102:29 - item details
102:31 - to select the wrapper that goes around
102:33 - our details
102:35 - for our price
102:36 - and our button here
102:38 - and we'll make this display
102:40 - flex we go the reason we're using
102:43 - display effects is because we want to
102:44 - center these items vertically so that
102:46 - they are all within the same line as you
102:48 - can see this price is at the top of the
102:50 - line here we want it to line up with the
102:51 - text in our button so to do that we'll
102:54 - use align items center in order to
102:56 - centerly align all of the items inside
102:58 - this container and as you can see this
103:00 - looks perfect over here
103:02 - the last thing we want to do is add a
103:04 - little bit of padding with 5 pixels on
103:07 - the top bottom left and right so that
103:08 - way it's slightly inset from the image
103:10 - and doesn't quite touch the image on the
103:11 - top
103:13 - next we can move on to styling the
103:15 - actual price of our shop item so we'll
103:17 - do shop item
103:18 - price
103:20 - and this doesn't take many styles all we
103:21 - want to do is make it so that the button
103:23 - is shoved all the way to the right side
103:25 - of the screen so we'll set flex grow to
103:27 - 1 so that our price will take up as much
103:30 - width as possible if we say that you see
103:32 - that it pushes this add to cart button
103:34 - all the way to the end of our container
103:36 - right here
103:37 - next thing we want to do is change the
103:39 - color to make it slightly darker
103:41 - and that's really all there is to
103:42 - styling the actual item of our shop but
103:45 - what we want to do is we want to make it
103:47 - so these shop items will all flow around
103:49 - each other and as you can see our shop
103:51 - item doesn't quite fit within the space
103:53 - of the image it's taking up way too much
103:54 - of the width of the screen in order to
103:56 - fix this we can go back to our html here
103:59 - and we can wrap all of these shop items
104:01 - inside of a div and we'll just give it a
104:04 - class of shop items so if we go up here
104:07 - create a div
104:08 - give it a class of shop items
104:13 - there we go
104:15 - we put the end of this div at the end of
104:17 - all of our shop items for the
104:19 - music section
104:21 - right here
104:22 - and indent everything so that it looks
104:24 - nice
104:27 - there we go
104:28 - and now we can actually select that shop
104:30 - items
104:32 - div that we created and we can give it a
104:34 - display
104:36 - of flex
104:38 - and if we say that you now see that
104:39 - everything's all in one line and it goes
104:41 - all the way way past the edge of our
104:43 - screen we do not want that we want these
104:45 - items to actually wrap so we can use the
104:47 - property flex wrap in order to make
104:49 - these elements wrap and we'll just set
104:51 - it to wrap so that if it goes past the
104:52 - edge of our screen they'll wrap down and
104:54 - as you can see now they all fill up in
104:56 - one column instead of wrapping all the
104:58 - way to the end of the screen
105:00 - you'll also see by changing flex
105:03 - our display to flex here for the shop
105:04 - items our image is the total width of
105:07 - our item so that our add to cart button
105:09 - doesn't get put all the way to the end
105:11 - here in our album one title is properly
105:13 - centered above the image
105:15 - this is exactly what we want
105:17 - the last thing we want to do is when our
105:18 - screen is larger these items will be
105:21 - right next to each other like this
105:23 - and we want to make sure that there's
105:24 - space between them in the middle left
105:26 - and right so we'll use justify content
105:29 - space around which will put an even
105:32 - amount of space on the left and right of
105:34 - every single
105:35 - element inside of our container and if
105:37 - we save that we now see we have spacing
105:39 - between these elements and on the left
105:41 - and right of them
105:42 - that's exactly what we want for these
105:43 - shop items
105:45 - now all that's left to do
105:46 - is to create all these different classes
105:48 - and add them to all the different shop
105:50 - items which i'll do real quick here
106:10 - and there we go that's all the styles
106:11 - that we need for our shop item so now as
106:14 - you can see as we scroll down all of our
106:16 - buttons and prices are styled correctly
106:18 - everything is lined up properly and if
106:20 - we increase the size of our screen
106:23 - you'll see that our items will line up
106:24 - next to each other which means that our
106:26 - site is actually responsive to different
106:28 - screen sizes
106:29 - this is because we use display flex with
106:31 - the wrap property so that if it became
106:34 - too large for our screen it would just
106:35 - wrap to the next line and if our screen
106:37 - was large enough to allow multiple items
106:38 - they would all stay on the same line
106:40 - this is perfect for our situation since
106:42 - we didn't want our albums to only take
106:44 - up one line or be two on a line when our
106:46 - screen was very small
106:48 - so now what we need to do is do the same
106:50 - thing to our merge section as we've done
106:52 - to this section here by wrapping our
106:54 - container in a shop items div and then
106:56 - adding all these different classes down
106:58 - to these elements here i'll do that real
107:00 - quick now
107:24 - and there we go i've added all the
107:26 - different styles to our merge section
107:27 - since it's pretty much exactly the same
107:30 - as this music section here
107:32 - and as you can see if we increase our
107:33 - screen size
107:35 - should be large enough
107:41 - there we go our items will be side by
107:43 - side and if the screen size is not large
107:45 - enough they'll stack on top of each
107:46 - other just like this
107:48 - and this is a perfect example of our
107:50 - flexbox working because as you can see
107:51 - these are side by side but these are not
107:54 - because this coffee image is actually
107:55 - wider than these images up here so it
107:58 - needs a wider screen size in order for
108:00 - them to stack side by side like this
108:03 - now the last thing that we have to
108:04 - tackle is the actual cart down here
108:06 - which is going to be the most complex
108:07 - part of this page so stick with me
108:10 - the first thing we need to do is go back
108:12 - into our html and style the different
108:14 - html elements that we need with classes
108:17 - so that we can style that to look
108:19 - exactly like the cart down here
108:21 - so first let's take the classes that we
108:23 - know we already have for this section we
108:25 - can do container
108:26 - and we can do content section
108:30 - there we go we can also style this
108:32 - header here
108:33 - with content
108:35 - i'm sorry section header
108:38 - there we go
108:39 - and now let's get into the actual rows
108:40 - and headers of our cart
108:42 - right here we don't need these less than
108:44 - greater than signs anymore since we're
108:45 - going to be putting the spacing in using
108:47 - css and same with these strong tags we
108:50 - can replace these with spans so let's do
108:52 - that real quick
108:54 - there we go and now let's start adding
108:55 - the actual classes that we need
108:58 - the first thing that we want to do is
108:59 - style the wrapper that goes around each
109:01 - of our rows
109:02 - and we're going to just give that a
109:03 - class
109:05 - of cart bro
109:07 - and then we want to do classes for our
109:09 - different items so we have our item
109:11 - column our price column and our quantity
109:13 - column since we want all these to line
109:15 - up and be the same width we'll give this
109:18 - a class and we're going to give that
109:21 - cart
109:22 - item and we'll also give it a class of
109:24 - cart header
109:26 - since this item is in the header of our
109:28 - cart and then lastly we'll use the cart
109:31 - column class which we're going to give
109:33 - to all of our different columns of our
109:35 - cart section so that way we can do
109:37 - consistent styling between all of our
109:38 - columns without having to copy and paste
109:40 - it other places let's do a similar thing
109:42 - for the price there we're going to give
109:44 - it a class of cart price
109:48 - class of cart header
109:51 - and a class of cart
109:53 - column
109:55 - then lastly same thing for quantity
109:58 - give it a class
109:59 - cart quantity
110:02 - card header
110:04 - and cart column
110:06 - and there we go that's everything we
110:07 - need to do in order to style the header
110:09 - row of our cart
110:11 - let's start by styling that in our style
110:13 - sheet right now
110:14 - the first thing we want to do is style
110:15 - the actual headers of our columns so to
110:18 - do this we can use the class cart
110:21 - header to select them and then set a
110:24 - font weight of bold since these are
110:26 - going to be bolded
110:27 - we can set a font size to be slightly
110:29 - larger at 1.2 em
110:32 - and then lastly we want to make the
110:33 - color darker so we'll just use this
110:35 - color that's slightly darker and then we
110:38 - can move on to styling the actual
110:40 - individual columns themselves so let's
110:42 - use the selector cart column here
110:45 - and get started styling that in here we
110:48 - can use a border bottom
110:50 - we'll just use one pixel solid black
110:53 - border
110:54 - in order to put a border on the bottom
110:56 - here but we also need space in between
110:58 - our elements because if we go back here
111:00 - you'll notice that our borders are all
111:02 - running right up against each other and
111:04 - this image is even overlaying over the
111:05 - top of our borders in order to get
111:07 - around this we're going to use some
111:08 - margins around our elements here
111:11 - first let's use a margin
111:14 - on the right side
111:15 - in order to space our columns away from
111:17 - each other
111:18 - and we're just going to use a margin of
111:19 - 1.5 em here
111:21 - if we save that you'll see that now
111:23 - there's some space in between our
111:24 - different columns
111:26 - we're also going to put a padding on the
111:27 - bottom so there's spacing between the
111:29 - column and the actual underline
111:31 - so we'll use padding
111:33 - bottom here of 10 pixels
111:35 - and then we'll also put a margin on the
111:37 - top of our columns in order to put a
111:39 - little bit of space between the top of
111:41 - our column and everything above it so in
111:43 - this case the actual border of the
111:44 - element for this column
111:46 - so we'll use margin top
111:49 - 10 pixels here
111:51 - and perfect
111:53 - now we need to actually add these
111:55 - classes to the rest of our items inside
111:57 - of our columns
111:58 - to do this let's go back to our store
112:00 - html and copy over all of these classes
112:03 - to these other different elements here
112:05 - let's do this for the first one we'll
112:07 - copy over this class cartrow put it onto
112:09 - this div here
112:11 - we also have the cart item which is
112:13 - going to include both the image here
112:15 - and this t-shirt name so we need to wrap
112:18 - this inside of a div
112:19 - with the class of cart item so we say
112:22 - this is our item column and we'll also
112:24 - give it a cart column class since it's
112:27 - going to be a column
112:28 - inside of our section here
112:31 - put the end of the div down at the
112:32 - bottom
112:34 - and now if we save this you already see
112:35 - that we started getting borders on the
112:36 - bottom which is perfect
112:38 - next we can move over this cart price to
112:40 - be inside of this span here since this
112:42 - is the price for item so we'll give a
112:44 - class of cart price
112:47 - and another class of cart column
112:50 - there we go we can also remove these
112:52 - less than and greater than symbols here
112:53 - again since they're just used for
112:55 - spacing
112:56 - and then lastly we have our cart
112:58 - quantity which includes the input and
112:59 - button down here so we can do a similar
113:02 - thing where we wrap them inside of a div
113:04 - so if we paste this div here instead of
113:06 - cart item we want cart quantity
113:09 - and then inside of that div we just want
113:11 - the input and the button
113:14 - and there we go now we have everything
113:15 - we need but you'll see that they're
113:17 - spaced out so that they're all on their
113:19 - line of their own in order to get around
113:21 - this what we want to do is we want to
113:23 - use flexbox again in order to align
113:24 - these items properly
113:26 - so if we go back to our styles.css
113:29 - let's style that cartro
113:31 - and we'll use display flex
113:33 - in order to get all these items onto one
113:35 - line just like that that's perfect
113:38 - we're now running into the problem
113:39 - though where our columns are different
113:41 - widths as you can see this item column
113:44 - here is not wide enough to support all
113:45 - the stuff in it the price column doesn't
113:47 - line up with the actual price here and
113:49 - the quantity is way off in order to fix
113:51 - this we'll use these cart item class
113:55 - the cart price class
113:58 - and the cart quantity class
114:02 - that we applied to our different columns
114:03 - in order to style the widths of these
114:05 - columns so they're all exactly the same
114:07 - for our item let's use a width of 45
114:10 - percent
114:14 - there we go for the price we're going to
114:16 - use a width
114:17 - of 20 percent
114:19 - and lastly for the quantity we'll use a
114:21 - width of 35
114:25 - if you save that you'll see that now
114:26 - everything lines up inside of the
114:28 - columns that they should be inside of
114:30 - you'll also notice that if you add these
114:32 - numbers up they equal 100 percent but if
114:34 - you remember from our first video
114:37 - when we are styling actually our second
114:38 - video i'm sorry when we were installing
114:40 - the home page you'll notice that we had
114:42 - to not quite equal 100 when we were
114:44 - creating our widths
114:45 - this is because we are using inline
114:47 - block elements to style those and inline
114:49 - block elements have spacing around them
114:52 - here we're using flexbox to align our
114:54 - items so we can actually use widths that
114:57 - add up to exactly 100 percent because
114:59 - flexbox does not add any spaces in
115:01 - between the items inside of its
115:02 - container this is why i almost always
115:05 - use flexbox when laying out elements as
115:07 - opposed to inline block
115:09 - flexbox is also great at aligning
115:11 - content inside of its box to be centered
115:14 - horizontally or vertically which is a
115:16 - problem you'll notice on the right here
115:17 - where our content should be centered
115:19 - horizontally or vertically i'm sorry in
115:21 - order to look
115:22 - like this so that all of our text is
115:25 - right in the center here but over here
115:27 - our text is either at the bottom
115:29 - over here or the top over here so to fix
115:31 - that we'll go back to our cart column
115:33 - here since if you remember all of our
115:35 - content for each of these columns has
115:37 - this cart column class around it
115:39 - and we'll make this display of flex and
115:41 - then we'll use align items
115:43 - center in order to center our items
115:46 - along the vertical right here if we save
115:48 - that
115:49 - you'll see that now all of our items are
115:51 - vertically aligned exactly as they
115:52 - should be and this is looking really
115:54 - close to what we have over here minus
115:56 - all the coloring that we need to do for
115:58 - our different elements
116:00 - in order to specifically select the
116:02 - different elements we want to style
116:03 - let's go back into our html here and add
116:05 - some classes to our different elements
116:08 - the first element that we want to style
116:09 - here is the span tag with the title of
116:12 - the element
116:13 - so we'll do here is we'll add a class
116:15 - we'll give it the title or the
116:17 - name of cart item title specify this as
116:21 - a title of our cart item we also want to
116:23 - add a class here to our image so we just
116:25 - use cart item image specify this is the
116:28 - image of our cart item
116:30 - our cart price is already styled which
116:32 - is perfect and then we just need to add
116:34 - styles to our input and our button here
116:36 - so let's do class here we'll just give
116:38 - it cart
116:40 - quantity input in order to specify this
116:43 - is the input for our cart quantity and
116:45 - then our button will have the class of
116:47 - button which we've already defined
116:49 - button danger which will specify a red
116:52 - colored button
116:53 - and then also
116:54 - cart quantity
116:57 - button in order to specify that this is
116:58 - the button for our cart quantity if we
117:01 - save that you'll notice nothing over
117:02 - here changes other than the button
117:04 - styles are applied to this button
117:06 - so then we can go into our styles.css
117:08 - and actually start selecting and styling
117:10 - these elements
117:11 - so let's go down here and first let's
117:13 - style the actual title the t-shirt title
117:16 - here
117:16 - by using cart item title selector
117:20 - and then inside of this title selector
117:22 - we'll put the color to be a slightly
117:23 - darker color
117:25 - we'll give it a little bit of margin on
117:26 - the left side so that it's not quite
117:28 - right up against our image here as you
117:30 - see
117:31 - so we'll just use 0.5 em for this
117:33 - and then lastly we'll increase the font
117:35 - size slightly to 1.2 em if you save that
117:39 - you'll now see that our image is
117:41 - slightly pushed away from our item name
117:43 - which is exactly what we want
117:45 - next thing we can style is the actual
117:47 - image since our image is a little bit
117:48 - too large right here so we can go in
117:50 - here
117:51 - cart item image
117:54 - we'll change the width
117:55 - to be 75 pixels
117:57 - so this image is smaller if we save that
118:00 - you see our image is now smaller but the
118:01 - height is too tall so we're going to
118:03 - give it a height of auto so the height
118:05 - will automatically adjust to the width
118:08 - if we save that it's now within perfect
118:10 - aspect aspect ratio that it was before
118:13 - and lastly we'll just add a slight
118:15 - rounding of the corners here
118:17 - so we're just going to use
118:19 - border radius
118:22 - and we'll just say for example 10 pixels
118:25 - if we save that now rounds the borders
118:27 - just a little bit which adds a little
118:28 - bit of extra aesthetic to the image i
118:30 - think
118:31 - the next thing we want to target is this
118:33 - price over here
118:34 - and we already have a cart price
118:35 - selector so let's just do it inside of
118:37 - that
118:38 - we'll increase the font size slightly to
118:40 - be 1.2 em
118:42 - and we'll make the color slightly darker
118:46 - and if we save that we'll see that the
118:48 - price now looks good and we really don't
118:50 - have to do anything to do that
118:51 - the last two elements though our input
118:54 - and our button are going to take a
118:55 - little bit more work
118:57 - let's go down here and we can select
118:59 - that button
119:01 - danger class that we added earlier to
119:02 - apply this reddish colored button and we
119:05 - can start adding our classes to this the
119:07 - first thing that we want to do is change
119:08 - the color of the text to be white
119:11 - and we want to give it a background
119:13 - color
119:16 - here that is going to be a reddish color
119:19 - just paste that in here that'll be a red
119:21 - color and if we save that we'll see that
119:23 - we now have this reddish button
119:24 - we want to remove the border from the
119:26 - button
119:28 - give it a slight border radius so that
119:31 - has rounded corners
119:33 - and then lastly increases so that is a
119:35 - bold font here and if we say that we now
119:38 - have a good looking button but we have
119:39 - no hover that happens when we go over
119:41 - the button
119:42 - so let's add
119:44 - our hover effect using the hover
119:46 - selector here
119:48 - and we can just give it another
119:49 - background color
119:50 - that is going to be slightly darker here
119:55 - and if we save that
119:57 - and we hover we now get a slightly
119:58 - darker red color when we hover over the
120:00 - button which is perfect
120:02 - the next thing we can select is our cart
120:05 - quantity
120:06 - input
120:07 - which is going to take quite a few
120:09 - styles applied to it in order to give it
120:11 - a bluish border and a smaller size
120:13 - the first thing we want to do for this
120:15 - is to make it the same height as our
120:16 - button over here so to do that we'll use
120:19 - a height of 34 pixels
120:21 - save that and we'll see that our input
120:23 - is now the same height as our button
120:26 - we also want to change the width of this
120:28 - input to be quite a bit smaller so we'll
120:30 - use a width of 50 pixels
120:32 - which should be enough space in order to
120:34 - put our text and have these buttons for
120:36 - incrementing and decrementing the number
120:38 - inside of here
120:40 - the next thing we want to do is we want
120:42 - to give it a border radius so it has
120:43 - slightly rounded corners we'll give it a
120:45 - border radius of 5 pixels
120:47 - we'll give it also a border
120:49 - that's going to be one pixel
120:52 - it's going to be solid colored and we
120:53 - want it to be the same exact color as
120:55 - our buttons up here
120:57 - so we'll just copy that background color
120:58 - from our button
121:01 - and we'll paste that in here
121:03 - now we say that you'll see that we now
121:05 - have the border around our element which
121:06 - is great we need to give it a slightly
121:10 - darker colored background
121:12 - which is just slightly darker than white
121:15 - and if we say that you can see that
121:17 - we want to change our text color to be
121:19 - slightly darker
121:22 - and then we want to make sure we have no
121:23 - padding around this element at all
121:26 - and if we save that
121:27 - our input element is starting to come up
121:29 - together we just want to move our text
121:31 - to the center and make it slightly
121:32 - bigger here
121:34 - so we'll do text align center in order
121:36 - to center align our text
121:38 - we'll use a font size here
121:40 - of 1.2 em to make our font slightly
121:43 - larger and then lastly let's use some
121:45 - margin on the right here 25 pixels in
121:48 - order to separate our input from our
121:50 - button
121:50 - and if you save that you see that now
121:53 - this looks a lot like our mock-up over
121:56 - here for our button and input
121:58 - and that's pretty much all we need to do
122:00 - in order to style our row properly
122:02 - now i'm going to copy these styles from
122:04 - this row onto the second row and see
122:06 - what we have from there
122:26 - there we go that's all the styles that
122:28 - i'm going to need in order to make this
122:30 - we can also remove the hr down here at
122:32 - the bottom
122:34 - and we can also remove this cart
122:36 - quantity button class since we never
122:38 - actually ended up using that class so
122:40 - let's remove that from both of our
122:41 - buttons here
122:43 - and save that and you'll notice that
122:44 - everything still looks exactly the same
122:47 - you will notice however though that our
122:49 - underlined borders here don't quite look
122:51 - the same as over here as you can see we
122:53 - have a solid border on the bottom for
122:55 - our last row and over here we have a
122:57 - separated border on the bottom
122:59 - in order to do this we can use the last
123:01 - child selector in our css in order to
123:04 - change the border for the last child
123:06 - but the child element selector only
123:09 - works for the last child inside of a
123:11 - container and right now these cart rows
123:15 - are not the last child of the container
123:16 - that they're inside as you can see this
123:18 - div right here is the last child
123:20 - so let's wrap the rows of our cart here
123:23 - inside of a container
123:26 - and we'll just
123:27 - give this container here
123:29 - a class
123:30 - of cart
123:31 - items
123:35 - move this div down to the bottom here
123:38 - now we can indent all this so it looks
123:40 - pretty
123:41 - save it and you'll notice nothing over
123:43 - here actually changes which is perfect
123:45 - but now when we select the last child of
123:47 - the cart row it'll be this cart row
123:49 - right here since it's the last child of
123:51 - this cart items container so now let's
123:54 - do that inside of our styles.css here
123:57 - first thing that we're going to do is
123:59 - select the cartrow
124:01 - flash child of it
124:04 - and in here we're going to use that
124:06 - border bottom property in order to set a
124:08 - one pixel solid
124:10 - black border that is going to go across
124:13 - the entire row here if we save that
124:15 - you'll see that we now have one solid
124:17 - border on the bottom but we still have
124:19 - our individual borders that we want to
124:20 - remove
124:21 - to do that
124:22 - we'll again select the cartrow last
124:24 - child
124:26 - but we'll also select the cart columns
124:29 - that are children of
124:31 - that actual cart row and we'll remove
124:33 - the border from them
124:35 - and if we save that you'll see that now
124:37 - we have removed these individual borders
124:39 - and all we have is this solid lined
124:41 - border right here on the bottom and that
124:43 - looks exactly the same as over here
124:45 - which is perfect
124:47 - now all we need to do is title type
124:49 - style this total section and this
124:51 - purchase button and we'll be done with
124:53 - this entire band website let's first
124:55 - start by going into our html and adding
124:58 - some classes that we can select these
124:59 - elements with
125:00 - first we'll use the class here
125:03 - of cart total
125:05 - that'll wrap our total and the price of
125:07 - the total
125:08 - and then we'll also use
125:09 - class here
125:11 - of cart
125:12 - total
125:13 - title
125:15 - so this is going to be the title of
125:17 - total and then in here we have the class
125:20 - of cart total
125:22 - price since this is the actual total
125:24 - price
125:25 - and then inside of our styles.css we can
125:28 - select those so we have cart
125:30 - total which is the row that wraps all of
125:32 - these
125:33 - we'll give that a text
125:34 - align
125:36 - of end so that our text will go to the
125:38 - end of the line here
125:40 - just as it does over here
125:42 - and then we can use the selector for our
125:43 - cart
125:45 - total title
125:47 - in order to change the actual text here
125:49 - of this
125:50 - the first thing we want to do is make
125:52 - the font weight bold since it is bolded
125:54 - in our design so we'll change that to
125:56 - bold
125:58 - we'll increase the font size to 1.5 em
126:01 - make the color black so it stands out
126:04 - and we'll give it a little bit of margin
126:06 - on the right side
126:07 - that way it'll be spaced away from our
126:09 - actual price and we'll just say 20
126:11 - pixels for that
126:12 - and if we save that that's starting to
126:14 - look a lot like over here which is great
126:17 - last thing we need to do is just style
126:19 - the actual total price so we can use
126:22 - cart total
126:24 - price to select that
126:26 - you can give it a color that's slightly
126:27 - darker
126:29 - and a slightly larger font size
126:32 - just so it sticks out a little bit more
126:34 - of 1.1 em
126:36 - if you save that this now looks almost
126:38 - exactly the same as this but you'll
126:40 - notice that our total is very scrunched
126:42 - up here against the bar so we just want
126:45 - to add a little bit of margin so we'll
126:47 - say margin
126:49 - on the top
126:50 - here from our cart total is going to be
126:52 - 10 pixels
126:53 - we'll also add a margin on the right of
126:55 - 10 pixels so that our total isn't
126:58 - squished right up against the edge of
126:59 - our screen and instead it has a little
127:01 - bit extra space and that looks great
127:03 - right there
127:04 - our cart section is now exactly as over
127:06 - here the only thing we have left to do
127:08 - is this purchase button which will be
127:10 - fairly simple since most of the classes
127:12 - we have are already defined
127:14 - let's go back to our store.html here we
127:17 - can remove this div that wraps this
127:19 - section since we don't actually need
127:21 - that and inside of here we can add some
127:23 - classes
127:24 - a button and button primary since this
127:27 - has a primary colored button and we'll
127:29 - also add a class of button purchase
127:32 - since this is going to be a purchase
127:33 - button and if we save that you'll see
127:35 - that we already here styled here from
127:37 - the primary button class
127:38 - if we go into our styles.css we can add
127:41 - some styles specifically for this
127:43 - purchase button here
127:45 - the first thing we want to do change the
127:47 - display to block here so that way we can
127:50 - center this
127:51 - button by using auto margins so we'll
127:53 - use a margin here on the top we want 40
127:56 - pixels to space it away from our total
127:58 - section
128:00 - on the left we want auto margin
128:03 - on the bottom we want 80 pixels and on
128:05 - the right we want another auto margin
128:08 - and if we save that you'll see that our
128:10 - purchase button is now centered with
128:12 - padding or margin i mean on the top and
128:14 - an even larger margin on the bottom to
128:15 - put it away from the footer
128:17 - the last thing we want to do is increase
128:19 - the font size to 1.75 em so that is a
128:23 - much larger button
128:25 - and there we go that looks great that's
128:26 - a huge button for them to click when
128:27 - they want to purchase their items
128:29 - now all we need to do is style the
128:31 - footer down here and this is going to be
128:33 - very easy all we can do is go into our
128:36 - index page here
128:37 - we can copy our footer since we know
128:39 - it's exactly the same
128:41 - and we can just paste that into our
128:42 - store html and if we save that we now
128:45 - have the footer down here and it looks
128:47 - amazing this looks exactly as the page
128:50 - over here
128:51 - and as we increase the size of our
128:52 - browser
128:54 - our elements will flow naturally around
128:56 - each other you'll see all of our columns
128:58 - stay lined up here no matter how large
129:01 - or how small our browser is everything
129:03 - looks great
129:05 - and that's pretty much all there is to
129:06 - creating this store page for our banned
129:08 - website
129:09 - i really hope you guys were able to
129:10 - learn something from this video thank
129:12 - you guys very much

Cleaned transcript:

hello everybody in this video you will learn the structure of an html file as well as a few basic html elements i will walk you through the process of creating your very first web page and by the end of the video you will have created a very basic web page let's get started by opening up visual studio code and creating a new file type any sentence you want into the file such as this is my first webpage and save the file you can call this file anything you want but it must have the extension.html at the end of the name now if you open that file on google chrome you will see your web browser rendering the sentence you typed into the html file while this technically works the file we just created is not actually valid html behind the scenes the browser surrounding our sentence invalid html tags to see what these tags look like we will need to open the developer tools of google chrome to do this press ctrl shift i or command shift i if you are on a mac upon doing this you will be greeted with a fairly complex looking window the data in these tabs is extremely useful in certain scenarios but for this course we will only care about the information in the elements tab the elements tab shows us all the html elements our page is composed of and as you can see our page has three elements html head and body there's also a fourth element that every html page has and this is called the doctype the doctype is the first element of an html page and must be the first thing in the html file the doctype tells the browser which version of html you are using for all of our videos we'll be using html as our doctype this tells our browser to use the most uptodate version of html available the next element is the html element this element tells the browser that all the code inside the html element is html this tag should contain everything inside of your html file except the doctype and should come after the talk type the head element is the next element and is technically optional the information in the head element is never displayed in the browser but is instead used to set information such as the title or description of the page this element is generally the first element inside the html element but it does not have to be our last element is the body element the body element contains all the information that we want to display inside the browser this can include text images videos and much more try updating your html file to include all these elements and also change the text to something else then save the file you may notice that google chrome does not update and render your changes in order to force google chrome to update you will need to refresh the browser this can become quite annoying though if you must refresh each time you make a change so we'll download a plugin for visual studio code called live server this plugin will automatically refresh our browser every time we make a change in order to download this plugin go to the extensions tab in the bottom left of the sidebar and type live server into the search bar next click the install button on the live server plugin and then click the reload button after the install is complete this will restart visual studio code with the new plugin enabled now if you open your html file you will see a go live button on the bottom of the screen this button will open your html file in your default browser and every time you save your html file it'll automatically reload your browser you may notice that the url in your browser has changed it now looks something like this this is because the live server plugin actually uses your computer as a server to serve the files to the web browser on your computer let's break down what this url means the first set of numbers from the url 127.0.0.1 is the ip address of your localhost this ip address is exactly the same on all computers and is the i p address of the computer server the second set of numbers after the colon is the port number these two numbers work similarly to how an address of an apartment complex works the ip address is like the address of the apartment complex while the port number represents the apartment number of a single room in the apartment complex if you do not specify a port number the browser will automatically use port 80 which is the default port for http communication you now have all the setup complete to efficiently develop html pages we'll begin learning new html elements as well as the structure of an html element we'll also start building the project that we'll work on over the duration of the entire introduction to web development course the project is to create a website for your favorite musician or band i will walk you through the exact steps needed to create the website and i'll explain all the concepts along the way as you follow along with this course i want you to choose your favorite musician or band and create the website for them instead of copying exactly what i do in this video we'll be creating the html for the about page of the fanned website you may notice that it looks ugly now but remember that html is only for the content of the site later we'll use css to style the page let's get started by going over the structure of an html element most html elements are composed of a start tag an end tag and some content between these tags the content inside these tags can either be text or other html elements there are some tags however that have no content and thus have no end tag these are called empty elements the image tag and an example of an empty element as you may notice the image tag has an attribute called source all html elements can have attributes set on them to define certain characteristics of the element such as the source for an image tag and that is all there is to an html element we will now jump into the actual coding of the about page for the website and learn about many different types of html elements hello everybody welcome to the coding section of this video as you can see on the left side of my screen i have visual studio code open with the html from the previous video i also have an images folder containing all of the images that we're going to be used to create the about page of this website on the right of my screen you can see the final version of the about page created for a band called the generics for you this band will be completely different but you should be able to follow the same template that i am using on this right side in order to get started creating this band page let's first right click on our about page and click open with live server this will allow us to see our changes live as we make them now let's go back to the final band page and take a look at the different components of the page the first thing you may notice is that at the top of the page we have a header this header contains a navigation with three links going to the home page the store page and the about page as well as a title for the band the generics there's also a line in between the two separating them let me paste in some code that will render this for us now let me open this code in the browser as you can see we have our navigation links at the top of the page our title at the bottom and a horizontal line separating them let me explain how this works first all of our content is wrapped with this header tag this header tag is just a way of telling the browser this is a header element it doesn't apply any styling to these elements it just says this block of code is the header for our page the next element inside of our page is the nav element this is very similar to the header element in that it doesn't apply any styling but it tells the browser that this is the navigation section of our web page you could have multiple navs throughout your page but most likely you're going to just have one nav either in the top of your page or on the side of your page next we have the ul element this stands for unordered list there are two types of lists that you can create in html an ol which is an ordered list and a ul which is an unordered list in our case we are using an unordered list or a ul because the elements in our list have no particular order to them next we have three li elements li elements stand for list item and can only be used inside of a ul or an ol these denote the actual items of your list and as you can see on the right are styled with a bullet point when they're inside of an unordered list and they are styled with numbers when they are inside of an ordered list next we have an hr element this element as you can see has no closing tag which means it is an empty element this hr element supplies us this horizontal line in our page and stands for horizontal rule lastly we have an h1 element the h1 element is a heading element and there's six different sizes of h of heading elements there's the h1 h2 h3 h4 h5 and h6 each one is progressively smaller than the last one with the h1 being the largest and the h6 being the smallest now let's go back to our final version of the web page and look at the next section of code that we have this is the about section at the top you can see that we have a header element which is called about a grouping of text with an image and another group of text only paste over some code that will define this section and view this in the browser as you can see we have that about heading a grouping of text our image and another grouping of text on the left here we can view the actual code and break it down the first thing you'll notice is that we have a section element that wraps all the other code in this section the section element is very similar to a header element in that it implies this is a grouping of stuff that is all inside of one section while the header element says this is the header of our page the section element says this is just a generic section of some form in which all the content is related next we have an h2 element for the about header this is very similar to our h1 header except for that an h2 header is always going to be smaller than h1 header because h1 is the largest header h6 is the smallest as you remember so h2 is just one step below in h1 and as you can see on the right here our h1 for the generics is larger than our h2 for about next we have a p element also known as a paragraph element a paragraph element defines a grouping of text that is usually long form paragraph form text with many sentences and it is much smaller font than our headings next we have an image tag the image tag as you can see is an empty element and has no end tag it also has this source attribute that we talked about earlier the source attribute defines the path to the image to be displayed on the page in relation to the actual page you're on so as you can see we are in this about.html page and in the images folder we have an image called bandmembers.png so in order to get this image we go into the images folder and then get the image bandmembers.png this must be a path related to the about.html file so if we moved this about.html file into our images folder for example then this path would have to be bandmembers.png as opposed to images bandmembers.png and if we reopen this in live server you'll see that this now works let's move that back to where it was though and then make this images slash bandmembers.png and open it in live server again and there we go the image works now and lastly we have another paragraph element with another section of text now let's go back to our final page and look at the last element that we have the footer element as you can see in the footer we have the generics heading as well as a youtube image a spotify image and a facebook image let me paste over some code that will define this in html and view this in the browser as you can see we have that heading as well as our three images if we go over and look at the actual html code you'll notice that almost all of the elements are something that we've already used before the footer element just like the header and section element defines a grouping of text and html that is going to be in the footer of the page which is almost always going to be at the very bottom of your page we then have our h3 element which just like the h2 and h1 is a large text heading for the page and it is going to be smaller than the h2 element we then have another unordered list with three list items in it and each one has an image which links to the facebook logo spotify logo and youtube logo in our images folder and that's all there is to creating the html for this about page as you may notice our actual final page looks very different than what our current page looks like but that is because this final page is styled using css as you remember from earlier videos html is only used to define the content of the page and this right here is all of the content that goes onto our page the styling for the fonts font size background colors and all these images that'll all come later in css all the content though the html is complete for this about page some common problems that you may run into as you create the html for your own band about page is that you forget to include the ending tag for your html elements if you do this your html will not look correct or it may not even render at all in order to check that you have created all the ending tags for your html elements if you click on either the start tag or the end tag visual studio code will automatically highlight the ending tag for you or the start tag if you had selected the ending tag this is an easy way to check if you have actually created the ending tags and starting tags for all of your elements another common problem is with your images not displaying in order to get around this problem make sure that the path for your image is in relation to your actual html page that it is on for example our about page is in the same folder as the images folder so we must first navigate through the images folder to get to the images inside of it we'll dive into more html elements as we build the home page of the banned website and by the end of this video we'll have created all of the html needed for the homepage of our website before we get started coding let's cover a few of the concepts that we will be utilizing starting with html elements if you have ever tried to use a greater than or less than sign in the text of your html you may notice that it does not render and actually messes with your entire page rendering this is because these symbols along with many more are special symbols that are used in html for signifying start and end tags in order to render these symbols we must use html entities an html entity is written by writing an ampersand and pound sign followed by the number that corresponds to the symbol for example this is the code that will render the less than symbol remembering which numbers correspond to which symbols can be quite difficult though this is why the most common symbols such as the less than sign have a name that can be used instead of the number this is the code for the less than symbol using the name as opposed to the number when you use the name of the symbol instead of the number make sure that you do not include the pound sign after the ampersand the next major concept is the idea of meaningless elements so far we have only learned about elements that have inherent meaning for example the header element is used to wrap the header of a page the nav element is for the navigation section and the h1 element is for a heading html has many many elements that have specific meaning but sometimes a section of your page does not have any special meaning or there is no html that conveys the meaning you want this is where meaningless elements come in there are two different meaningless elements div and span these elements are the same in every way except that the div element is a block element meaning that it will appear on a separate line from the content around it similar to the paragraph tag the span element on the other hand is an inline element and thus appears in line with the content around it if this does not make sense yet the differences between these two elements will become apparent as we write the html for this lesson essentially all you need to know about meaningless elements is that they should be used anytime you need to group together html that either has no meaning or there is no html tag to describe the meaning now that we got that out of the way let's jump into the coding of the homepage for the band website hello everybody welcome to the coding section of this video as you can see on the left i have visual studio code open with the project we left off in the last video and on the right i have the final version of the band homepage to get started we should copy the about.html page and rename it to index.html this is because the about page shares the same header and the same footer as our home page we now can get rid of the section in the middle that contains the about content since we will not need that on the home page the reason that we named this page index.html is because the index page is the page that is shown when you leave nothing after the website url so if we remove this slash index.html and hit enter you'll see that it renders the exact same thing that is inside the index.html and if we change this save it you'll see it shows up there now let's get started with the actual content of this page let's jump back to the image that we have to use as a reference and get started with the header as you can see inside the header we have an additional button for get our late latest album and another button for the play button to create these elements we'll use the button element the button element will render a button on the page as we can see here and if we give it some text such as what is on this page you get our latest album you'll see that it renders a button that we can click on our page let's do the same exact thing for the play button now we can't actually just show this image with a normal button key press we have to use an htl1 entity that we talked about earlier the code for this entity is as follows this will render the play button as we can see here as you may notice our two buttons on this same line as opposed to on different lines like they are in this image this is because the button is an inline element as opposed to a block element in order to get around this problem we can use a tag called the line break tag which is the br tag the br tag adds a line break whatever it is so if we put it after this button it'll create a line break right here before the next button and if we save that on the right you can see that they are on separate lines now we want a little bit more spacing than this between our elements so we'll use another line break element in order to create a little bit of a gap between our two buttons that is all the html that we're going to need for the header section but as you can see in this home page view that there is a giant background image that is applied for the entire header in order to remind us that we need to create this background image and find it later let's add a comment into the code to do this use an exclamation point followed by two dashes which will create a comment in the code comments do not actually render any information on the html page but they show up in the code so that you can remind yourself or other people that use this code what certain things mean or what to do so for example let's create just a todo comment that tells us that we need to find a suitable background image there we go so now if we go back to our page you can see that that does not actually render but it shows up in the code for us to reference later now let's go on to the middle section of our page in the middle section of our page we will use a section element just as we did for the about section of our code to wrap all of this stuff in our tours section and you can see that we have a header called tours just like we had in the about section so let's create an h2 and add the text tours into that and view that to make sure that that shows up correctly next we have a few rows that display all the tour dates for our upcoming tours of the generics band there is no actual html element to denote a row for example in this scenario so what we are going to do is we are going to wrap our entire set of rows in a div which is a meaningless element that we talked about earlier this will make it a block element so that way these items will not appear on the exact same line as each other we will then wrap each individual row in a div of its own so this outside div here is wrapping all of these rows and then each one of these rows has its own div that will contain just the text inside of it now let me add the text inside of the rows now as you can see if we go over to our page we have the different text rendered for all the text in the row but it doesn't quite look right first off we need this july 16th date to be bolded in order to do this in html we will use what's called a strong tag the strong tag denotes something that is important in most cases it means that the text inside of the strong tags will be bolded but in some scenarios the text will actually not be bolded for example if you're using a screen reader if you are blind the text will have special emphasis when it speaks it back to you because you cannot actually see bold versus nonbold let's put our july 16th inside of that strong tag save it and go back to our browser to see that that is actually bolded now next we have the text for detroit and the text for the actual place that the performance is in let's wrap these in span tags span tags are the other meaningless element that we talked about and this denotes an inline element if we go to our rendered version of our page you can see that these elements do not break the lines as these block elements from the div do if we were to change this to be a div you can see that now it breaks both on the top and the bottom of the line let's change that back to a span lastly we need to create the button for our final element let's wrap this by tickets text inside of a button element now if we go back to our page we can see that that is now a clickable button one more thing to note about these buttons is that they can have a type to them which is an html attribute in this case you can have the type of button menu reset or submit in our case since this is just a generic button we want to use the button type let's copy that and paste that into our other buttons as well since they are also generic buttons lastly we need to add an hr element that we talked about in the previous video to the end of our row because we have this underline here that we want to incorporate now if we go back we can see that we have this underline under our row you may notice that the text is very close together with almost no spacing between them you may think that in order to fix this you can add a bunch of spaces after your text and if you save that you would think that a bunch of spaces would show up after this but if you say that you see that that does not happen html actually removes all of the extra spaces after any element whether it's a space a tab even if you put an enter new line in here and save it it'll remove all of those at the end of your element in order to get around this and actually include some space in between our elements we're going to use use temporary the less than and greater than symbols that we talked about earlier with the html entities let's go after our strong tag here and write the code for less than and the code for greater than now you can see that we have a little bit of a space between our text let's copy and paste this in between all the different elements of the row and now there's a little bit of spacing so that is easier to see which element is which the last thing that we need to do in order to get our page to be exactly the same as this is copy this row and create all the text needed for the rest of these rows i'm going to do that real quick now we now have all the code that we need for these sections if we go back to this page we can see that all of our rows are now being rendered and they all look correct except you see that we have this additional underline on the last row so go back to our code and remove that final hr element now we have exactly the same html that we have on this page last thing we should do is delete this placeholder text that we added in here at the beginning and now we are perfect the only thing left to do is to add some elements to the head as you can see at the top this title of our page it just shows the url of the page that we are on if we want to change that we can use a title element in the head section of our html this will actually not show up anywhere on the body of our page but it will be used by the browser to set the title of our page on the tab let's just set the title to the generics and if we save you can see that now it recreates the title of our page another common element in the head section is a meta tag the meta tag has a bunch of different things that we can define for it based on what we set for the name attribute but in our case we want to set the description of our page this description is used by the browser to show a little bit of a description of your page under the title whenever you search in google for example along with other places first let's just set any title which we set inside of the content section of this tag let's just say this is the description and close off that meta tag now as you see when we save nothing actually changes on our page because this is inside of the head of our page if we were to upload this page to the internet and do a google search for it you'll see that this description will show up underneath the title of our page inside of the google browser results now let's go to our about page and do the exact same thing in the side of the head just paste this in here change the title from generics to the generics about and we can keep the description exactly the same that's all that there is to creating the html for our index page we'll dive into one more crucial html element as we build the store page of the band website by the end of this we have created all the html that we need for the entire project before we get started coding we need to cover one of the most important and most common html elements the anchor tag the anchor tag also known as the a tag is the html element that allows us to add links to our web pages the structure of the anchor tag is very similar to that of an image tag but instead of specifying a source attribute for an image an anchor tag uses an href attribute which stands for hypertext reference the href attribute works exactly like the source attribute when trying to find the file you specified this means that the href attribute value should be relative to the html file that the anchor tag is in for example if you had a file called page.html in the same folder as the html file with the anchor tag then you would use page.html as the href of the anchor tag to link to page.html another use of the href tag is to link to other web pages by their url this also works exactly the same as the source attribute of the image tag if you want to create a link to google then you would create an anchor tag and set the href to google's url this url must be the full url of the website which includes http at the beginning in order for an anchor tag to work the href attribute must be defined another common attribute the target attribute on the other hand is optional the target attribute specifies where the link should open by default the value of the target attribute is self which means the link should open in the current browser tab the only other value for the target attribute is blank that means that the link opens in a separate tab don't forget to make sure you include the underscore in the front of the self and blank target attribute values or they will not work we will cover both target types in the coding section of this video so if this does not make sense yet it will become obvious in a bit now that we got that out of the way let's jump into the coding of the store page for the band website hello everybody welcome to the coding section of this video as you can see on the left i have visual studio code open with the project from the last video that we left off on the only difference is that inside the images folder i've added all the images that we're going to need to create the store page of the band website on the right of my screen i have a picture of the store webpage pulled up so we can use this as a reference to create the html for the band page let's get started by copying the about.html page and renaming it to store.html this is because our store page and our about page both share the same header and the same footer now let's delete the content in the center about the about page that we do not actually need in the store page what we do need is we need to create a section for the music section for merge and a section for cart let's do that inside of each of these sections we're also going to have a header for the title of music merch and cart now let's take a look at the content inside of each of these sections as you can see the music and merch section both share the same template for its content where it has an album or tshirt or coffee cup whatever's being sold a picture of that the price of it and then a button to add it to the cart so let's create these elements we're going to want to do we're going to want to wrap this entire element inside of a div element so that way we know it is one contained content inside of that div we're going to want to have a div for the album name this is because we want this to be on its own line so we can't just use a span and inside of that div since this is bolded we'll use a strong tag to put the title of album one next we're going to want to add the image tag and it's going to have a source attribute which in our case is going to be images slash album1.png and lastly we need to add a final div that's going to wrap both the price and button for adding to cart we're going to put the price inside of a span and then we're going to add the button for add to cart and make sure to add the roll of button since this is just a general generic button now let's open that up using live server to see what our changes look like as you can see we have the album name picture of the album and then the line containing the price and the button to add to cart the only thing left to do now is to copy this and paste it down four times so that we have a section like this for all of the albums that we are selling in the music section of our store i'm going to do that now now if we open that up we can see that we have our four different albums being displayed with the title top picture in the middle and the button at the bottom you may notice however though that they are all on an individual line as opposed to being side by side as they are in this image this is because we are wrapping all of them inside of a div and divs break the line as we talked about earlier later we are going to fix this in the css portion of our course but for now we will just keep it like this because as you remember html is only for content and css is where we talk about layout and display now if we go back to the image of our store page we can see that in the merge section we have almost the exact same layout that we do inside of the music section of our store so i'm just going to copy one of the templates from the music section paste it into the merge section and change it accordingly now if we go view this you'll see that these also show up at the bottom inside the merch section the last thing that we have to look at is the cart section of our store this is slightly different than the rest of our sections and includes a few new elements that we haven't talked about yet let's first get started by creating the header row of item price and quantity to do this we will wrap all three of these in a div so that they appear on the same line and we will use strong tags to wrap all the content because it is bolded now if we go take a look at that we'll see that we have item price and quantity all displayed on the same line but we will use the same spacing trick that we used in the last video in order to show the space between these because right now it is difficult to read so in our code we are going to add a less than and a greater than sign this will add a little bit of spacing between our elements we'll just copy this one more time so it's between price and quantity as well next we are going to work on adding in each of the individual rows of this section we'll do this by using another div tag to wrap the entire row followed by an image tag to store the image for the first item we'll use the source to be album one as we talked about earlier and close that and we'll go look at it and we'll see that this image is way too large we want this image to be much smaller in order to do that we can set a width and height property on the actual image element itself this attribute we're going to set to 100 which will stand for 100 pixels if we leave off the height element it'll automatically adjust the height to be an aspect ratio with the width so if we had an image that was 200 pixels by 400 pixels so 200 pixels wide 400 pixels tall and we set the width to 100 the new height would be 200 which would automatically be set if we however set both the height and the width it'll automatically set both those for us to be 100 and 100. next we're going to want to add the name of the actual item inside of a span we'll just call this tshirt and then we'll want to add in the price inside of a span as well and between those we're going to want to use the less than and greater than signs that we talked about for our spacing now if we view that we'll see that we have the name of the item followed by the price of the item next we need to add in this input that allows users to select the quantity of item that they want where they can type in any number that they want in here in order to do this we are going to use an input element an input element is an empty element that allows us to create an input of various different types in this case we're using a number input so we'll set the type equal to number there are many different types of input that you can create but the most common types are a number input and a text input we will then close that off and if we go back to our page we'll see that we have an input in here that allows us to enter only numbers into it we cannot enter anything that is not a number just numbers but in our example you can see that we have this prepopulated with a 1. in order to do this we'll set the value property the value property corresponds to the value of the actual input element and as we change it as we type in different numbers into the input this value will automatically adjust to be the same as whatever number we typed in here so over here let's just put the value of one because that is what is in our picture here i'm also going to use the same spacing tricks that we talked about with less than greater sign to add a space between this price and the input and lastly we need to add in a button this button will have the roll of button because it is a generic button and inside of it we will just put the text remove now if we go back to our page we can see that we have all the elements here that we have in our image over here now let's copy this div one time and fill it in with the information from the second row down here now if we go back we can see that we have the correct information here i also changed this first image to be the shirt image because i forgot to change that and as we can see we have the value of 2 in here which corresponds to the value of the input element here lastly let's add an hr after all of these in order to put the line at the bottom of the page that we have here before we get to total the reason i'm not including an hr under these item price and quantity views is because we will add these later with css this is because an hr takes up the entire space that is given which in our case will be all the way from the far left of our page to the far right of our page with no breaks in between now let's add a final div which is going to contain the information for the total and the price as we can see the total is emphasized with bold so we'll use a strong tag and type in total and then we'll have the price inside of a span lastly we want to add this purchase button at the very bottom underneath of everything else so inside of a div of its own so that is on its own line we'll add in a button with the roll of button and we'll give it the text of purchase that's all there is to creating this html here and as we can see if we look over here we have all the elements that we have on this page created in html here the last thing we have left to do is add in links so that we can navigate with the home store and about buttons that we have up here in order to do that let's scroll to the very top and wrap this text inside of an a tag as we talked about earlier so that now our text is a link but in order for this link to work we need the href that we talked about earlier since our store page is in the same page as our index page which is our homepage all we need to type in is index.html and now when we save this we'll have a link here that when we click on it will bring us to the index.html page now let's go back to the store page and do this for all of our different links now you can see that we have buttons for the home page store page and the about page and when clicked on they'll bring us to the different pages at the very bottom you'll notice that we also have buttons for youtube spotify and facebook so now we need to add anchor tags wrapped around this but as you can see there's no text for us to wrap around all there is is this image tag but that is okay we can wrap this image tag inside of an anchor tag and it'll work as a button in order to do this create the anchor tag give it a href which in this case is going to be the url of youtube which is https colon backslash backslash youtube.com and then we will put the image tag inside of this a tag now we say that if we hover over youtube we can see that as a button and if we click it it'll bring us to youtube.com let's do the same thing for spotify and facebook now if we save that we can see that the youtube link spotify link and facebook link are all working as you can see we click here we go to the spotify website and so on but one problem is that when we click these links it'll override the tab that we're in and we don't want that for these bottom links so we're going to use the target attribute on our href and we're going to set it to underscore blank i'm going to copy this over to all the rest of our links and now when we click on a link for spotify for example it'll open in a new tab while keeping the tab for our original page now all we need to do is copy these new links that we created over to our home and our about page and our html will be completely finished for the entire website and there we go now if we go to any of these pages you'll see that we have links that work on all of our pages one last thing i forgot to mention is that in our store page we want to change the title of our page from the generics about to the generics store and there we go that is all the html that we need for this entire project in our next set of videos we'll be covering css css is what is going to allow us to take this boring bland looking html and converting it over to this beautiful looking mockup that we have over here after we're done with the css for all of our pages we're then going to jump into javascript which will allow us to make our store page interactive this will make it so the add cart button actually adds elements to the cart down here the remove element actually removes them and changing the numbers inside of the quantity will actually update the total and that is all there is to html while we have covered many html elements there are still many more html elements that we have not covered i have only selected the most important and useful html elements to cover in this introductory course because many of the html elements are either obsolete or only useful in very specific scenarios we're going to be taking the banned web pages that we created and style the about page to look exactly as this image on the right here to give you an idea of what we're starting with over here is going to be our about page that we have currently designed with just the html and ocss also as a side note before watching this video if you know nothing about css make sure you watch my learn css in 20 minutes video in order to get primed on what you'll need to know in order to watch this video and follow along now let's get started into the css design for this page the first thing i want to note is that i've added a fonts folder into our project and included the two fonts that we're going to be using to style some of our elements i also in our images folder changed our bandmembers.png to be a square image so that it'll fit perfectly inside of a circle and i changed our footer images the facebook logo spotify logo and youtube logo to be white instead of black so they're going to show up on top of our light blue background that our footer will have now that we have that out of the way let's create our css file that we're going to be writing all of our code in we're just going to call this styles.css then inside of our about.html page in the head let's add in a link give it a row of stylesheet and an href of style.css now if we save that nothing over here will change because we don't actually have anything loaded into our styles.css but to test this let's just give our html a background color and we'll make it red if we save that perfect our background changes to red which means that everything in our styles.css is being loaded into our about.html page now let's clear that out of the way and get started the first thing that we're going to want to do is we're going to want to style the header portion of our site if we go into our about.html page here we see that our header we have our navigation which is these three buttons at the top here as well as our header for the generics which is our band name the very first thing that we're going to do is give our header element a background image that is equal to the background image that you see over here in order to do that let's first give our header class and we'll just call it main header in our styles.css we'll use a selector to select that class and then use the background image property to set an image for our background now this background image property works very similar to the href for an anchor tag we'll use url and then inside of the url we'll specify where our image comes from in our case the image comes from our images folder over here this header background.jpg so we'll just put inside of here images slash header background.jpg if we save that and go back to here we'll see that our image is going to be behind here right now this doesn't quite look right though in order to fix that we're going to use the background size property and set this to cover what this is going to do is it's going to tell the background to expand as much as it can until one of the borders is at the very edge of either the width or the height so it'll expand either as wide as it can or as tall as it can until it can't get any larger without surpassing the size of the image so if we say that you see that our image has expanded all the way as wide as it can and as tall as it can and the last edge to hit is the width this is the full width of our image and it cut off the top and the bottom of our image that's exactly what we want our image to do this means that if we resize our page our image will grow and shrink as needed without us having it enter any extra code as you can see in our example photo the background image has a slightly darker hue to it than over here so in order to do that we're going to add a second background this time we're going to use a background color and we're going to set it to rgba and we'll just use black with a 60 transparency now if we save that you'll see that nothing actually changed about our background this is because by default you can only use either a background color or a background image okay to get around this we're going to use what's called background blend mode this is essentially telling the browser how do you want to blend these two different backgrounds together and we're going to use multiply which is essentially just going to combine these two together over top of each other and as you can see on the right we now have a grayish dark color to our background instead of it just being entirely opaque now all we need to do is add a little bit of padding underneath of this lettering down here so that we match the spacing we have over here and to do that we can just use padding bottom and we'll set it to something like 30 pixels if we save that we now have a nice gap on the bottom here you may also notice that around our background image we have some white space in between here even though in our about.html this is the very first thing in our body this is because css styles are being defaulted onto certain elements such as the html element and body element if we go into our style sheet and at the very top here just put html and body as our two selectors and we set the margin to zero and the padding to zero we save that we'll see that now those margins and paddings go away on the side here but we still have a margin on the top this is because our ul element also has a default margin on the top so if we go in set our ul element to have a margin of zero as well and save that you now see that our background takes up the entire width and goes all the way to the very top of our page generally though you don't want a style using elements such as getting rid of the margin on all uls so in our about here we're going to give our nav a class of nav to indicate that this is our navigation and in here we use the nav class that we just created followed by ul to say that all the uls inside of the nav will now have no margin if we say that this will look exactly as before but now all of our normal uls will still have a margin but the ul's inside of a navigation class will not have a margin now before we get started on styling the nav we're going to want to use the everything selector to set a few general styles that will apply to all the elements in our html the first one that we're going to want to use is box sizing and we're going to want to set this to border box what this does is it makes it so that the size of our elements are determined by the padding and the margin as well as the actual size of the content so if we had a box and we set the width to be 200 pixels and we set the padding to be 20 pixels without border box the width of that object would be 200 pixels wide plus 20 pixels on the right for padding and 20 pixels on the left for padding making it 240 pixels wide with border box though the width attribute takes into account the padding as well so if we set a width of 200 pixels our element will be exactly 200 pixels wide and the padding will be on the inside of those pixels if that doesn't make any sense we'll be able to see more examples of this as we continue on styling this page another attribute that we want to apply to all of our elements is going to be our font family this will be the default font family that where all of our text is going to use in our case we're going to use the railway font but since this font is not a generic font that can be used on websites we need to import this font in order to do that we're going to use google fonts and import it using this url this url can be found on the google fonts webpage and you can search for any font on that you want and then all you have to do is click on that font click the import and it will give you this link to copy and paste into your css now if we save this you'll see all of our font will change to railway the last thing that i want to apply to all of our elements is a default text color in general black on white is very high contrast and can be tiresome on your eyes to read so i like to use a more subtle text color of 777 here which is just going to be a light gray which is much easier than eyes to read now that we have that out of the way let's style our navigation element first let's go to our about.html and remove this hr tag this hr tag was only there to add an underline for our navigation but we'll do that in css as borders are much easier represented in css i also want to give our navigation another class of main nav this is because we will have multiple different types of navigations that we want to style similarly but we only have one main navigation that's going to be at the top of our page so now if we go back to our styles.css let's style our actual nav class first we've already admitted so that the margin is zero so that our nav will no longer have any margins around it but we want to maybe make our elements that they are in line with each other as opposed to on separate lines as they are over here to do this we'll select the nav element and then we'll select the li elements under that nav and we will give them a display of inline this tells us that the browser should render all these elements in line with each other as opposed to on separate outlines which is the default for a list next we want to style the actual links themselves that are in our navigation element to do this we want to give them some padding so let's say we'll use a padding of 0.5 em which will just space out these elements a little bit from each other we also want to give them a white text color to match our mockup that we have of our image and then lastly we want to set it to text decoration none which will remove that underline from underneath of our elements over here and if we save that we see that our l text expiration has removed the underline from these elements changed the color to white but our padding has only added padding to the left and right and not the top and bottom as padding should do when you give it just one number this is because these are inline elements and inline elements cannot apply padding on the top or bottom what we need to do is we need to change the display to the inline block inline block is very similar to inline except for it allows you to do certain things such as add padding and height to elements that inline elements do not allow you to do so now as you see we have padding on the top bottom left and right of all these elements due to the being inline block the last thing we want to do is we want to make it so that it is easy to tell which element we are hovering over to give the user some feedback to do this we'll style the a tag again and we'll use the hover selector to say when we hover over the element we want to do something and all we want to do is change the background color and we'll just use a light grayish color here so we'll use white but we'll use transparency of 30 percent so the white will show mostly as gray as you can see we hover over these elements we are now getting a background color that tells us hey this is being hovered this is all the styles that we want to apply to our general navigation though now we want to move on to our main nav gus because this is going to be styles that are applied to only the main navigation and not all of our other navigations the first thing that we want to do is we want to make it so the text will be in the center of our screen since our navigation should be centered at the very top of the screen we also want to make it so the font size is a little bit bigger so it is easier to read we'll just use 1.1 em which will make it about 10 bigger and then we'll change the font weight to be lighter as opposed to the stronger font weight so that way it blends a little bit better into the background and then lastly we want to add a border bottom to our element to replace that hr that we deleted and it'll be one pixel wide completely solid and we'll just use another light gray color here and if we save that we now see that we have a border on the bottom and our elements at the very top the last thing that we need to do is space out our elements from each other because right now they're very close to each other to do this we'll use the main nav again and we'll select the li elements and we'll just give them a little bit of padding so we'll say padding of zero on the top and bottom and five percent on the left and right there we go now our elements are spaced out from each other and as our screen grows the elements stay spaced out from each other and as it shrinks they stay spaced out again the last thing we have to style on our header is going to be the actual name of the band here if we go back to our mockup over here you see that this is going to be much larger and of a completely different font than we have right here by the default so to do this let's go back to our about page and let's add a class here and we'll just call it band name we're also at a second class of band name large because we have two instances where our band name will be rendered once in the header where it is very large and a second time in the footer where it is a more normal size this is why we are going to use this band name class to style all of the elements that we need to make the band name look good and then this band name large class to make the band name in the header larger let's first start with the just normal band name class in this class we're going to first want to make the text align center this will cause it to appear in the center of the screen and then we want to remove all margins from this element because h1 elements by default have margin if we save that it'll get squished a little bit closer together and then we want to increase the font size and since this is just going to be our normal band name and not the large one we're just going to use this font size of 4em and save that then we want to change the font family this font family is going to be booter 0 0 but if we save that you'll see on my local machine this updates to be the correct font that's because i have booter zero zero installed on my computer normally this will not be the case especially when you upload your website to be hosted somewhere else in order to load this style in we first want to grab our font files here and we want to import them using the at font phase property in here we want to use the font family this essentially tells our browser what name do we want to use for this font we are going to use booter zero zero this is the name that you will set when you set the font family down here then we need the source this essentially tells the browser where is this font coming from this is just like the background image url so we're going to use fonts slash booter0 and we'll use the first one here the woff and tell it that this format is wff then we want to import our other source which is url fonts buddha zero zero waff2 let me get rid of these backslashes here and we'll use the format of waff2 this tells the browser that we have these two different types of fonts here the booter zero zero waff and booter zero zero waff2 and it tells it which format is each one the reason we have multiple sources is because some browsers don't support all types of sources such as waft2 or just the normal waff this is so now with having multiple sources here the browser will take the very first source and if that one works it'll use it and then if that one's not acceptable it'll go down to the second source here lastly we want to put a font weight which tells us what weight is this font and it is just normal and same with font style this is just a normal font not italics or anything so we'll put normal here now we have that font loaded into our page so we have glitter 0 0 that is normal and normal style but over here you see that our font is bolded and doesn't quite look the same as our mockup this is because h1 tags by default bold their font to get around this we're going to set the font weight to be normal if we say that our font now looks exactly as it does over here the last thing we need to do is set the color of the font to be white and if we save that this now looks almost exactly the same as our mockup does over here and that's everything that we need to do except for this font is a little bit too small this is why we use that band name large class inside of the band name large class we're going to set the font size we're going to make it 9 em if we save that that is now going to be much larger and it is going to look almost identical to how large it is over here and if you want you can play around with this number make it 8am for example and save it and it'll look great either way now that we have the header completely styled let's move on to styling the section content of our web page over in the about.html page let's add a class to our section and we're just going to call this content section essentially clarifying that this section is just for content and we can reuse this on all of our other content sections across our index and our store page i also want to give it a class container which we will use to specify a maximum size as well as some paddings on the outsides of our text so that way it's not quite squished up all the way against the edge of the screen back in styles.css let's use the dot content section class that we just created and give it a margin of 1 em this will give us a little bit of spacing on the top left right and bottom of our element so that way it distinguishes itself from the previous element then we'll use our dot container class that we just created and in here we'll style a max width which says that the max width of our element is going to be 900 pixels wide this means if our element tries to get any larger than 900 pixels it'll just stay at 900 pixels if i save that and increase my screen size you can see that this element stops at 900 pixels but as you saw it was showing up on the left side instead of centered to center it we're going to set the margin on top and bottom to zero and then we're going to use auto as the left and right margin this tells it that the margins on the left and right will be as large as they need to be and be exactly the same so that way the text will be always in the center and if we bring this all the way over to the side you'll see that we have a large margin on the right and left which centers our text on the middle and then lastly we just want to add a little bit of padding back to this container to push it away from the sides so we'll use zero on the top and bottom and 1.5 em on the left and right in order to give us a little space so that our text does not run right up against the edge of our web page next we need to style the actual heading for this element we can use another class on our h2 here and we'll just call it section header there we go this is because all of our sections are going to be styled with the same exact header so we will use this class again on our home page and our about page now in our styles.css let's grab that section header class and in here we're going to just use a font family and this font family is called metal mania which again is not on the computer by default so we have to use another import url from google fonts and this import url like i said before you can find by going onto the google fonts web page and searching your font this is what the url is going to be for the metal mania font and if we save that you see that our text changes you can also see that we have the same problem where text is bolded as it was over here in the generics so we'll just change the font weight to be normal and now if we say that you'll see that our text is no longer bolded but it still doesn't look exactly as we want it to this is because we need to change the color on this to be slightly darker we'll use just 333 which is about halfway between our light gray and completely black and then we want to center this text in the middle of our screen text align center if we save that you'll see that our section header is now in the middle of our screen it's the right color but it's slightly too small and we'll use the font size property 2.5 em to make it about two and a half times bigger save that and there we go our heading is perfect now the next element we need to take care of is the image in our about section as you can see on here the image is a circle and is displayed towards the top of our text the text just flows perfectly around the image no matter how large or small the image is in order to do this let's first add a class to our image and we'll just call it our about band image because this is a class we're only going to be using for our about band and then in here select that about band image and now in order to make it so that our text flows around this image what we want to do is we want to use the float property and tell it to float left this means that the image will remove itself from the flow and flow completely to the left side of the document also as you can see our image is quite large here so let's give it a height of 200 pixels and a width as well of 200 pixels and if we save that you see that our text is flowing perfectly around this but we want it to flow from the top so in our about here let's move our image above our p tags and save it and now as you can see from the very start of our text it is flowing around the image but our text is right up against our image and we don't want this in order to fix this let's give our image 15 pixels of margin on all sides in order to push the text away from the image lastly in order to create a circle we're going to use the border radius property this property tells us how far we want to curve the edges of our border and in our case 50 percent will make a perfect circle since we curve from fifty percent all the way to the next fifty percent so if we save that we have a perfect circle with our text flowing around it as we expected if we go over here as you can see it doesn't quite look exactly the same because our image is not at the very center of our text it's at the very top but it's much easier to style from the very top of the text and i personally think it even looks better this way as for the actual text of our content we don't need to change anything because in our generic everything selector we already set the font family and color to be exactly the same as what is over here so the last thing we have left to do is address the footer which we want to use a light blue background around with our band name on the left as well as our three elements on the right for our buttons to go to youtube spotify and facebook in order to do this we're going to need to supply some classes to the footer we're going to use the class of main footer similarly to how we used main header to specify that this is the main footer on our web page then we're going to use the band name class and apply that to our band name and if we save that and go back here you'll see that our band name has already updated to be white text and the correct font and font color and font size just because we already created that band name style before which is the power of using classes since they're so reusable to create many different elements and just copy and paste them along your page as you see fit so now let's go back to our styles.css and style that main footer element our main footer is overall very simple all we need to do is add a background color that's going to be that light blue color here which i just copied over and then we're going to make all the text in this main footer white so we're going to use a color of white and then lastly we want to have a little bit of padding between our elements and the edge of the background so we'll use a padding of 0.25 em on the top and bottom and then zero on the left and right and if we save that scroll down you see that we now have that light blue background as well as all of our text is white but we have the problem of our footer being stacked vertically when we want it to be stacked horizontally in order to fix this problem we're going to go back to our about.html and we're going to use a second div element in here with the class of container and main footer container that will wrap all the content inside of our footer there we go and now in our styles.css we'll make the main footer container the purpose of this main footer container is to wrap our elements in and display flex element a flex display or also known as flexbox is a very complex layout element that you can use in css but we're only going to skim over the top of it because in this video we don't have the time to cover the full complexities of flexbox but in the future i will make a video covering flexbox in depth if we scroll down here we see that already our elements have lined up next to each other on the left and the right which is great but we want our right side element to take up as much space as possible while our left side element should be as small as possible in order to do this we'll make it so that main footer container the ul inside of it which is our navigation on the right here we want it to grow to take up as much space as possible so we'll use flex grow and give it a value of one to tell it to grow then we also want to align our text in that element to the end of the element so we'll use text line and to tell our text to be on the right side instead of left side we also want it so that our youtube spotify and facebook links will be centered with this band logo on the left here to do this we'll use the align items property and set it to center to say to center everything vertically inside of this flexbox next all we need to do is style our navigation which we've already created a class for so on our ul we'll add a class of nav as well as footer nav so that we can use specific stylings for our footer and save that as you can see it has already changed that we have the background hover and the elements have lost their period on the left side denoting that it's a list item now all we need to do in here is change our footer nav li so that we have a different set of padding around these elements we'll use a padding of 0 on the top and bottom and 0.5 em on the left and right to give these elements a little bit of space around each other next we're going to make it so the images are going to be quite a bit smaller than they are right now since they're a bit oversized so we'll use the footer nav select all the images give them a width of 30 pixels and a height of 30 pixels if we save that we see that now everything is center aligned together inside of the footer our images are smaller they have the hover element which is the same from this navigation up here and they also allow us to click them and go to their links the great thing about this web page is that it's also responsive on different sizes so if we increase the size of our page you see that everything flows great around each other without breaking everything's working everything looks great whether it's full size or small it doesn't matter it'll work flawlessly this web page is though not designed specifically with mobile sizing in mind so it doesn't look as good on a small screen size as it does on a slightly larger screen size but either way it looks great no matter which size the browser is at and that is all there is to creating the about band page for this website we have all the styling so that our page looks almost exactly the same as the mockup that we had before and it is even scalable to different browser sizes and looks good on all those different sizes the best part about this is since that we used very generic named classes such as container band name and nav we're able to apply these classes to the rest of our pages such as the home page here and the store page here in order to get a head start without having to restyle the elements such as this navigation and the footer every single time if you guys want to follow along with this project and use the exact same code that i have to style this about page here all this code is going to be available on my github which will be linked in the description below from there you can get these font files that i'm using as well as the different logos and background images that i'm using and even the actual code for this video is available on my github we're going to tackle styling the homepage of our website to look exactly as this image on the right here in order to get started with this let's open up our index.html page with live server and here we have all the html with no css stylings applied to it the first thing that we want to do is to go into our about.html copy our link tag from the head and paste this into our index.html file this way we'll be able to load the styles in from our styles.css file into our home page here as you can see this already made some changes by changing our font font color and etc based on our everything selector the next thing that we need to do is apply our styles to our header that we created in the last episode such as the class of main header if we save this we'll see that on the right our header will update and then we have our navigation which we can apply the classes of nav and main nav to and there we go we'll get rid of this hr here as well as these two line breaks and our comment since these are no longer needed since we have a background image and these line breaks will be taken care of using css let's save that and then add our final class here for the band name and band name large if we save that our header now looks very similar to how our about page header looks but we have these two buttons down here that we need to style still the first thing we want to do is create a button class for all of our buttons we'll do this in a similar way that we styled our navigation elements by having a nav class and then another class to style what type of nav it is but first we'll just create this generic button class that all of our buttons will be able to use inside of our styles.css let's add the selector for that button class and start applying the different styles we need we know that we want all of our buttons text to be centered in the middle and center of our button so we'll use text align center to put our text in the center horizontally and then we'll be using vertical line of middle to put our text in the middle vertically if we save that we'll notice that no changes were made over here because our buttons aren't tall enough or wide enough for our text to need to be aligned to the middle yet but as we start adding different paddings and different heights and widths we'll see that our text will always be in the center next let's add a little bit of padding around our button so that we have more space between the text and the edge of our button to do this we'll use padding and then we'll give it 0.67 em of padding on both the top bottom left and right by just doing one number if we save that we'll see our buttons have gotten slightly larger last thing we want to do is when we hover over a button we want our cursor to change to a pointer icon as opposed to the normal arrow icon so we're going to go into here change our cursor to pointer and save that and now when we hover over our buttons we'll get the pointer icon instead of the typical arrow icon the next thing we want to do is apply our button specific classes for our header and we'll just call this button header now if we go into our styles.css use the selector for our button header class we can start adding styles that are specific for this get or latest album button the first thing we want to do is use the margins around our button to be able to position it where we want if we look at our image here we can see that our button is positioned so it is slightly offset from the center and offset from the left edge of the screen we're going to be using margins with percentages and ems in order to accomplish this so if we use margin the first value if we use all four values of margin corresponds to the top margin which we want to set to 0.5 em which will be half the size of the font we then want to use 15 to correspond to our right side margin which will take up 15 percent of the total space our object can occupy then we can use two em as the bottom margin and another fifteen percent as the left side margin if we save this we see that our object already aligns itself slightly offset from the left and not quite centered in our space this is exactly what we want next we want to style the button to look like it does on this page the first thing that we're going to want to do is change the text color to be white and then we want to add a border around our object it's going to be two pixels solid and we're going to use this color which is a slightly bluish color as our border color now if we save that and go back we already see that our text colors change to white and we have blue border around the object but we still have this gray background in order to get rid of that we just set the background color and we're going to use a very very opaque white color which would be rgba 255 255 and 0.1 and if we save that we now get a button that looks very similar to this button in color but spacing it's still not quite right what we need to do is set the border radius of our object to be zero which means completely remove the rounded corners of our object so that we now have a perfectly square cornered object over here just like in this image the border radius corresponds to how rounded the corners are so by setting to zero we have no rounded edges to our corner next we want to increase the font size we're just going to set that to 1.5 em to be about 50 percent larger and then we want to make the font weight to be lighter so that the text is slightly thinner and if we save that our button is looking very similar to our button over here but you'll notice that we don't quite have the same padding on the left and right in order to fix this we'll set our padding on the left to be 2em and our padding on the right to also be 2em now if we save that our button looks almost exactly the same as our button in here this is perfect but when we hover over this button nothing actually happens we have no way to know we're actually hovering over it in order to fix that we use the button header hover selector here and we'll set the background color and we'll just make it a slightly less opaque version of the color that it already is which is white but we'll use 0.3 instead of 0.1 as our opacity so now if we hover over it you see that our button gets slightly lighter so that way we know that we're actually hovering over top of it one thing that you may notice is if we zoom out here on our image and we increase our font or our window size to be even larger our button will become very offset to the left and not as centered as we like it to be in order to fix this in our index.html page let's wrap this button here inside of a div with the class of container if we do this we've already created this container class which has a limited width this means the padding of our button on the left and right will be inside of that confined width space of the container so if we save this and increase our size of our browser to be even larger you see that our button will always stay similar to the center of the screen because it's inside of a container with a limited width that's exactly what we want our thing our web page to react as now let's zoom that back in so it's easier for you guys to see there we go and now let's work on styling this button right here for the play button we'll use very similar styles to our header button but we'll also add a play button class to this if we save that we already see that this is very similar to our style over here what we want to do is we want to make this button entirely round and we want to make the icon on the inside blue as opposed to white in order to do this we'll go to our styles.css here and we'll use our button play class to style our play button how we want the first thing we want to do is center a button horizontally in the screen so we're going to use margin with zero on the top and bottom and auto on the left and right in order to tell our button to center itself in the screen but as you'll notice our button actually just centers over onto the left side this is because buttons are not block level elements and only block elements can have an auto margin to get around this we'll change our button to be displayed block and now if we save that we'll notice our button is perfectly centered in our screen the next thing we want to do is change the color of this icon to be our blue color here which we can just copy from our border save that and now we have that same blue color inside of our button we want to increase the font size in order to make the icon larger we'll use 4em and then we want to change our border radius to be 50 in order to make a perfect circle and there we go but you'll notice that our button is more of an oval than a circle and that's because our button has different padding on it so we need to completely remove the padding from our button in order to make it a perfect circle but you'll see there's a slide problem where a button gets really scrunched up so we want to give our button a width and a height and we're going to make these exactly the same so our button is a perfect circle as opposed to an oval we'll just use 100 pixels if we save that you see that we now have a perfect circle button in the center of our screen that is slightly offset from our button up here very similarly to over here and if we increase the size of our screen you see that our buttons will stay positioned how we want them no matter what size our screen is that's exactly what we want and everything that we need to do in order to make the header of our page look exactly the same as this image over here the next thing that we need to do is work on this section of our page which contains our tour dates and is the main content of this home page the first thing we can do is use our styles that we created in our previous video we can use our class over here of content section in order to specify that this is a content section and we can also use the class container in order to specify that we don't want the width to grow over a certain size next we can use the class here of section header just as we created in our other video that'll mark this header as a section header and center and give it the right font that we want now we need to tackle the individual rows of our tour date the first thing we can do is remove the hr as well as these less than and greater than symbols since these were only there in order to be used for spacing in our html and we will do all that with css now instead so now if we save that we see that our row is completely scrunched together which is perfect for us to start styling we also want to give our row a class of to a row so that we can say each row will be styled in the same exact way let's go into our styles.css here add that to a row selector and get started styling it the main thing we want our tour row to do is to give us padding between our different rows as well as give us a border on the bottom of the row so to start let's use border bottom to give a bottom border to our row and we'll make it one pixel solid black if we save that we see that we now have that border on the bottom of our object similar to how the hr worked but we also want there to be a little space between the row and the row below it as well as between the row and the border in order to give us space between the row and the border we'll use padding since padding is spaced between the content and the border and we'll set this to 1em if we save that we now have space between our content and our border and in order to give us space between the content below in our border we use margin which is on the outside of our border and we'll set that to the same 1em now if you save that we have space in between all of our rows here let's take this tour item or to a row class and give it to all of the different rows inside of our content here we can just copy and paste that into all these divs and after we're done with that if we save it we'll see that we now have borders on the bottom here let's get rid of all these hr's so it's easier to see and you'll see now that we have borders on the bottom of all these different rows very similar to over here but you'll notice there should be no border on our last row here and you may think oh we'll just remove the class and that'll solve the problem but that will get rid of all of our padding and margins in order to fix this problem we can use what is called the last child selector so if we do to a row last child this will select the last child with this to a row class and if we just give it a border bottom of none to say that there should be no border and save it you'll see the border on this last child has been completely removed now we can get started on styling the different elements inside of our row let's first start with the date element here and we're going to give this a class of tour item which will give to all the items in our row and we'll give it a specific class of tour date and this will work very similar to how we've done buttons and navs so far let's first start by styling the tour item element in here all we want to do is set very specific paddings margins spacings all of that we want between all of our tour items so first we want to add a padding right between all of our elements to give them a little bit of space of 0.5 em if we save that we'll see that now there's a little bit of padding to the right side of our date element here which is exactly what we want but we also want these elements to display in line with a specific width as we know inline elements cannot have any width applied to them for example if we were to apply a width of a thousand pixels here and save this our object does not actually become a thousand pixels wide and that's because it's an inline element so what we want to do is change the display to the inline block which will make this act like an inline element as in it won't break the line when it's done but it'll also be able to have widths and heights applied to it like a block element and if we save that we see our element is now 1000 pixels wide we don't actually want that so we'll remove that line perfect the only downside of inline block is it does add a tiny bit of space between each element that we cannot actually remove but that is okay for now now let's use that tour date class that we also assigned it and start styling that as well first we want to give it a slightly darker color than the rest of our row to match the styling in this page so we'll give it a color of five five five which is a slightly darker version of our 777 color and if we save that you'll see our colors a little bit darker we also want to make it so that it's bold so we use font weight of bold if you save that you notice not much actually changes and that's because we used a strong tag over here for our element strong tags are meant only when you want to emphasize something and in this case our bolding is only for visual instead of for emphasis so we want to change this to a span tag in order to remove the special emphasis applied to it since it is only meant to be visually bolded and not actually emphasized for importance now if we save that you'll see it'll look perfect let's go back to our style.css and give this a specific width and we'll just use 11 for our width here and save that and now it gives us a little bit of extra spacing and as we increase the size of our browser the spacing will increase with it perfect now let's move on to the other elements of our tour item instead of our index.html let's give all of our elements the tour item class as well as a specific class in this case this is our city so we'll call it tour city this next one is going to be our arena so we'll give it to our item and to our arena and this last one is our button so we'll give it the class of button we'll also give it a tour item class and a tour button class and save that now our row looks a little bit better there's a little bit of space in between our elements but everything's not quite lined up how we want it so in our styles.css here let's style our individual tour elements starting with the city element which we're just going to give a width of 24 since this is a slightly larger text than our date is let me save that and now it gives us a little bit of spacing we'll go on to our tour arena and we'll give this a width of 42 since this is our largest element by far and then lastly we use the tour button and instead of giving this an actual width because if we give it a width for example of 19 percent and we say that as we increase our screen size we'll see that our button will get wider which we don't actually want to happen so instead we'll use max width as opposed to widths which means our element will never be larger than 19 percent of the screen so now if we shrink this our button will stay exactly the same no matter how large or how small it goes because the width will always be the same as the content but it will never become larger than 19 of the screen so if we make our screen very small you'll see that our button will break onto two lines instead of shrinking even further that's exactly what we want you also may be wondering by looking at these widths why they don't exactly add up to 100 because you would think we want to fill up 100 of the space and you are correct we do want to fill up 100 of this space but as i talked about inline block elements add some amount of spacing between each other inline block element that we cannot remove we have to account for this by making our widths slightly less than one hundred percent when added together to do this i subtracted about one percent from each of these widths after making them total up to 100 percent this way we have 96 percent width taken care of so that way our screen won't break onto multiple different lines until it becomes very very small and in that case you'll see it does break onto multiple lines but that is okay because our size our screen is not really meant to be viewed on mobile this is mostly for desktop design let's make that size a little bit larger here there we go and let's copy these styles onto all of our different elements over here in all of our different rows i'll do that really quick there we go as you can see now all of our rows are styled correctly but they all line up exactly so the spacing is exactly what we wanted to look like and if we increase the size of our browser everything stays in line in all of our different columns and scales to be responsive with the size of our browser this is perfect the only thing we have left to do is style our buttons so they look the same on this page as they do on this page in order to do that let's add one final class to our buttons which will be button primary since it'll be the primary button of our site and this primary attribute really refers mostly to the coloring of our button since our button base class already applies all the styling for the different sizing padding and margins that we need so now if we go over to our styles.css add this button primary class and here we can now style the different colors we need to let's first start by adding the color of white which will make our text color white as well as our background color which we want to set to this color and if we say that we now see our buttons are the exact same color as over here we next want to remove all the border from this element so we don't have this gray border around here anymore and then we want to make our border radius to be slightly bent around the corners as you can see over here we have a slight bend in the corner so we'll make our border radius be 0.3 em and if we save that you see that our button is already looking great but our text is a little bit dull in here so let's make the font weight bold to make our text pop a little bit and if we save that our buttons now look perfect and they look exactly the same as our buttons over here the only thing we have left to do is add a hover element to this so that we can tell that we're hovering over our element we'll do this exactly the same way by using our button primary with the hover selector and we'll just give it a background color that is going to be slightly darker so in here we'll go background color and we'll just set that to this color right here now if we hover over a button you'll see that it'll get darker to note that we are hovering over this button and it is easier for our users to know what's going on the last thing we have left to do is style the footer to be exactly the same as the footer on our about page so in order to do this we'll just go to our about page go down to the footer and copy all the footer elements ids classes all of that and we'll paste it over our footer here since we know that we want them to be exactly the same and now if we save that we scroll down here our photo now looks exactly the same as our footer over here which is exactly what we want now if we zoom out our web page here a little bit to be a hundred percent increase the size you'll see that our content stays inside of these bounds and that is due to the container class that we added this is perfect for making our site responsive without stretching too far on larger screens and also making it look decent on smaller screens such as this or this that's all there really is to creating the css for this home page you'll notice that this was much easier than doing our about page and that is because all the styles that we used in our about page we were able to copy over and use in our home page we're going to be taking the store page that we've designed earlier with html and style it to look exactly like this image on the right here now let's get started here by opening up our store html page using live server to see what we have to get started with here we go and the first thing that we need to do is copy over the style sheet that we've already created and link it so we'll just copy this link here from the index page paste it into our store page so we now have access to all the styles that we've already written and as you can see it's already taken effect the next thing that we need to do is go into our header here and we need to style our header to be exactly like our home page and our about page as you can see here so to do that let's just add the classes that we've already created of main header in our nav we're going to add the class of main nav and then nav and there we go that looks good to remove this hr and then finally style our band name here with band name and band name large we save that and there we go we have the same header that we have on all of our other pages and luckily for us this is the only thing we need to do in our header here the next thing we can do is move on to this section and work on this music cart section right here we can get started here by styling our section with the classes that we already have such as container and content section if we save that you'll see we get a little bit of padding from doing that and then we can also title our header here by using the class of section header which we've already created if we save that we now see that our header for our section is properly styled and now we can move on to styling the actual items that are going to be going into our cart let's first look at what we actually want the style to look like over here in our image and we can see that we have the title of the item at the very top centered we have the image here and then we have the price and the button to add it to the cart on the bottom that are slightly inset from the sides of the album image so in order to do that let's first add a class to this div that wraps all of this content here and we're just going to call this shop item and this is just going to represent a single item that we have for sale in our shop and this will be usable in the music and the merch section the next thing we can do is we can actually remove the divs that wrap this album since we can use css in order to make album on its own line without having to use a div to do that so let's remove these divs here and then we can also change the strong tag to a span since we know that the we want this album one to be bolded but we don't actually want to put emphasis on it that the strong tag does for things like screen readers we just want to style that in css so let's add a class to this here and we're just going to call this shop item title since this is going to be the title and the name of our shop item that we have here next we have our image which we are going to add a class to as well we can just call this shop item image so that we can style our image to resize it as we need and then lastly we have this bottom div here which are the details of our shop item so we're just going to give this a class we'll call it shop item details and inside of that we have the price of the shop item here so we can get that the class of shop item price and then we have our button here which we already have two classes for a button and button primary since this would be the bluish colored primary button that we have and then we'll add another class to it of shop item button so we can style this button specifically for the shop item as needed and if we save that go back to here you'll see that some of the things in our page have already changed we got the blue button now and now we can actually go into our styles.css and starts dialing these elements the first thing that we're going to want to do is we're going to want to give some margin around our shop items so that they don't run up right next to each other as you can see that these two items are so if we go in here we select our shop item we can just give it a margin on all sides of 30 pixels if we say that you now see that we have spacing on the sides bottom top of these shop items so they won't run right up against each other the next thing we can do is style this shop item title right here to do that we'll just select the shop item title and we'll get started styling it the first thing we want to do is we want to make it so that it is display block so that way it'll be on its own line as opposed to being in front of the image if the width of our browser is large enough the next thing we're going to do is we want to make this item 100 width so that it'll take up the entire width of the top of the image and that way when we do text align center the text will actually center itself above the image just like that the next thing we can do is change the actual size and color of the font so if we go in here we can make the font weight bold so it is a little bit larger we can make the font size the 1.5 em so it is also slightly bit bigger and then lastly add a color that is slightly darker than our current color here if we save that you see that we now have a great title but it's really close to our image so we'll just add a margin on the bottom here we'll make that about 15 pixels and we save that and now we see it spaced out above our image which is perfect this is exactly what we want for our title the next thing that we should tackle is the actual image of our shop item right now this image is quite large and takes up almost the entire screen so what we want to do is we just want to change that so that our shop item image is slightly smaller than it is right now so we'll just give it a height of 250 pixels if we save that you'll see that our image shrinks down a little bit and the width and the aspect ratio stays the same because by default the width will be automatically as large as it needs to be for the image to be the same aspect ratio when the height is 250 pixels this is because we didn't actually set a width so it defaults to auto next we want to work on this details row down here where we have the price and the button for adding it to our cart so let's go into here and we'll do shop item details to select the wrapper that goes around our details for our price and our button here and we'll make this display flex we go the reason we're using display effects is because we want to center these items vertically so that they are all within the same line as you can see this price is at the top of the line here we want it to line up with the text in our button so to do that we'll use align items center in order to centerly align all of the items inside this container and as you can see this looks perfect over here the last thing we want to do is add a little bit of padding with 5 pixels on the top bottom left and right so that way it's slightly inset from the image and doesn't quite touch the image on the top next we can move on to styling the actual price of our shop item so we'll do shop item price and this doesn't take many styles all we want to do is make it so that the button is shoved all the way to the right side of the screen so we'll set flex grow to 1 so that our price will take up as much width as possible if we say that you see that it pushes this add to cart button all the way to the end of our container right here next thing we want to do is change the color to make it slightly darker and that's really all there is to styling the actual item of our shop but what we want to do is we want to make it so these shop items will all flow around each other and as you can see our shop item doesn't quite fit within the space of the image it's taking up way too much of the width of the screen in order to fix this we can go back to our html here and we can wrap all of these shop items inside of a div and we'll just give it a class of shop items so if we go up here create a div give it a class of shop items there we go we put the end of this div at the end of all of our shop items for the music section right here and indent everything so that it looks nice there we go and now we can actually select that shop items div that we created and we can give it a display of flex and if we say that you now see that everything's all in one line and it goes all the way way past the edge of our screen we do not want that we want these items to actually wrap so we can use the property flex wrap in order to make these elements wrap and we'll just set it to wrap so that if it goes past the edge of our screen they'll wrap down and as you can see now they all fill up in one column instead of wrapping all the way to the end of the screen you'll also see by changing flex our display to flex here for the shop items our image is the total width of our item so that our add to cart button doesn't get put all the way to the end here in our album one title is properly centered above the image this is exactly what we want the last thing we want to do is when our screen is larger these items will be right next to each other like this and we want to make sure that there's space between them in the middle left and right so we'll use justify content space around which will put an even amount of space on the left and right of every single element inside of our container and if we save that we now see we have spacing between these elements and on the left and right of them that's exactly what we want for these shop items now all that's left to do is to create all these different classes and add them to all the different shop items which i'll do real quick here and there we go that's all the styles that we need for our shop item so now as you can see as we scroll down all of our buttons and prices are styled correctly everything is lined up properly and if we increase the size of our screen you'll see that our items will line up next to each other which means that our site is actually responsive to different screen sizes this is because we use display flex with the wrap property so that if it became too large for our screen it would just wrap to the next line and if our screen was large enough to allow multiple items they would all stay on the same line this is perfect for our situation since we didn't want our albums to only take up one line or be two on a line when our screen was very small so now what we need to do is do the same thing to our merge section as we've done to this section here by wrapping our container in a shop items div and then adding all these different classes down to these elements here i'll do that real quick now and there we go i've added all the different styles to our merge section since it's pretty much exactly the same as this music section here and as you can see if we increase our screen size should be large enough there we go our items will be side by side and if the screen size is not large enough they'll stack on top of each other just like this and this is a perfect example of our flexbox working because as you can see these are side by side but these are not because this coffee image is actually wider than these images up here so it needs a wider screen size in order for them to stack side by side like this now the last thing that we have to tackle is the actual cart down here which is going to be the most complex part of this page so stick with me the first thing we need to do is go back into our html and style the different html elements that we need with classes so that we can style that to look exactly like the cart down here so first let's take the classes that we know we already have for this section we can do container and we can do content section there we go we can also style this header here with content i'm sorry section header there we go and now let's get into the actual rows and headers of our cart right here we don't need these less than greater than signs anymore since we're going to be putting the spacing in using css and same with these strong tags we can replace these with spans so let's do that real quick there we go and now let's start adding the actual classes that we need the first thing that we want to do is style the wrapper that goes around each of our rows and we're going to just give that a class of cart bro and then we want to do classes for our different items so we have our item column our price column and our quantity column since we want all these to line up and be the same width we'll give this a class and we're going to give that cart item and we'll also give it a class of cart header since this item is in the header of our cart and then lastly we'll use the cart column class which we're going to give to all of our different columns of our cart section so that way we can do consistent styling between all of our columns without having to copy and paste it other places let's do a similar thing for the price there we're going to give it a class of cart price class of cart header and a class of cart column then lastly same thing for quantity give it a class cart quantity card header and cart column and there we go that's everything we need to do in order to style the header row of our cart let's start by styling that in our style sheet right now the first thing we want to do is style the actual headers of our columns so to do this we can use the class cart header to select them and then set a font weight of bold since these are going to be bolded we can set a font size to be slightly larger at 1.2 em and then lastly we want to make the color darker so we'll just use this color that's slightly darker and then we can move on to styling the actual individual columns themselves so let's use the selector cart column here and get started styling that in here we can use a border bottom we'll just use one pixel solid black border in order to put a border on the bottom here but we also need space in between our elements because if we go back here you'll notice that our borders are all running right up against each other and this image is even overlaying over the top of our borders in order to get around this we're going to use some margins around our elements here first let's use a margin on the right side in order to space our columns away from each other and we're just going to use a margin of 1.5 em here if we save that you'll see that now there's some space in between our different columns we're also going to put a padding on the bottom so there's spacing between the column and the actual underline so we'll use padding bottom here of 10 pixels and then we'll also put a margin on the top of our columns in order to put a little bit of space between the top of our column and everything above it so in this case the actual border of the element for this column so we'll use margin top 10 pixels here and perfect now we need to actually add these classes to the rest of our items inside of our columns to do this let's go back to our store html and copy over all of these classes to these other different elements here let's do this for the first one we'll copy over this class cartrow put it onto this div here we also have the cart item which is going to include both the image here and this tshirt name so we need to wrap this inside of a div with the class of cart item so we say this is our item column and we'll also give it a cart column class since it's going to be a column inside of our section here put the end of the div down at the bottom and now if we save this you already see that we started getting borders on the bottom which is perfect next we can move over this cart price to be inside of this span here since this is the price for item so we'll give a class of cart price and another class of cart column there we go we can also remove these less than and greater than symbols here again since they're just used for spacing and then lastly we have our cart quantity which includes the input and button down here so we can do a similar thing where we wrap them inside of a div so if we paste this div here instead of cart item we want cart quantity and then inside of that div we just want the input and the button and there we go now we have everything we need but you'll see that they're spaced out so that they're all on their line of their own in order to get around this what we want to do is we want to use flexbox again in order to align these items properly so if we go back to our styles.css let's style that cartro and we'll use display flex in order to get all these items onto one line just like that that's perfect we're now running into the problem though where our columns are different widths as you can see this item column here is not wide enough to support all the stuff in it the price column doesn't line up with the actual price here and the quantity is way off in order to fix this we'll use these cart item class the cart price class and the cart quantity class that we applied to our different columns in order to style the widths of these columns so they're all exactly the same for our item let's use a width of 45 percent there we go for the price we're going to use a width of 20 percent and lastly for the quantity we'll use a width of 35 if you save that you'll see that now everything lines up inside of the columns that they should be inside of you'll also notice that if you add these numbers up they equal 100 percent but if you remember from our first video when we are styling actually our second video i'm sorry when we were installing the home page you'll notice that we had to not quite equal 100 when we were creating our widths this is because we are using inline block elements to style those and inline block elements have spacing around them here we're using flexbox to align our items so we can actually use widths that add up to exactly 100 percent because flexbox does not add any spaces in between the items inside of its container this is why i almost always use flexbox when laying out elements as opposed to inline block flexbox is also great at aligning content inside of its box to be centered horizontally or vertically which is a problem you'll notice on the right here where our content should be centered horizontally or vertically i'm sorry in order to look like this so that all of our text is right in the center here but over here our text is either at the bottom over here or the top over here so to fix that we'll go back to our cart column here since if you remember all of our content for each of these columns has this cart column class around it and we'll make this display of flex and then we'll use align items center in order to center our items along the vertical right here if we save that you'll see that now all of our items are vertically aligned exactly as they should be and this is looking really close to what we have over here minus all the coloring that we need to do for our different elements in order to specifically select the different elements we want to style let's go back into our html here and add some classes to our different elements the first element that we want to style here is the span tag with the title of the element so we'll do here is we'll add a class we'll give it the title or the name of cart item title specify this as a title of our cart item we also want to add a class here to our image so we just use cart item image specify this is the image of our cart item our cart price is already styled which is perfect and then we just need to add styles to our input and our button here so let's do class here we'll just give it cart quantity input in order to specify this is the input for our cart quantity and then our button will have the class of button which we've already defined button danger which will specify a red colored button and then also cart quantity button in order to specify that this is the button for our cart quantity if we save that you'll notice nothing over here changes other than the button styles are applied to this button so then we can go into our styles.css and actually start selecting and styling these elements so let's go down here and first let's style the actual title the tshirt title here by using cart item title selector and then inside of this title selector we'll put the color to be a slightly darker color we'll give it a little bit of margin on the left side so that it's not quite right up against our image here as you see so we'll just use 0.5 em for this and then lastly we'll increase the font size slightly to 1.2 em if you save that you'll now see that our image is slightly pushed away from our item name which is exactly what we want next thing we can style is the actual image since our image is a little bit too large right here so we can go in here cart item image we'll change the width to be 75 pixels so this image is smaller if we save that you see our image is now smaller but the height is too tall so we're going to give it a height of auto so the height will automatically adjust to the width if we save that it's now within perfect aspect aspect ratio that it was before and lastly we'll just add a slight rounding of the corners here so we're just going to use border radius and we'll just say for example 10 pixels if we save that now rounds the borders just a little bit which adds a little bit of extra aesthetic to the image i think the next thing we want to target is this price over here and we already have a cart price selector so let's just do it inside of that we'll increase the font size slightly to be 1.2 em and we'll make the color slightly darker and if we save that we'll see that the price now looks good and we really don't have to do anything to do that the last two elements though our input and our button are going to take a little bit more work let's go down here and we can select that button danger class that we added earlier to apply this reddish colored button and we can start adding our classes to this the first thing that we want to do is change the color of the text to be white and we want to give it a background color here that is going to be a reddish color just paste that in here that'll be a red color and if we save that we'll see that we now have this reddish button we want to remove the border from the button give it a slight border radius so that has rounded corners and then lastly increases so that is a bold font here and if we say that we now have a good looking button but we have no hover that happens when we go over the button so let's add our hover effect using the hover selector here and we can just give it another background color that is going to be slightly darker here and if we save that and we hover we now get a slightly darker red color when we hover over the button which is perfect the next thing we can select is our cart quantity input which is going to take quite a few styles applied to it in order to give it a bluish border and a smaller size the first thing we want to do for this is to make it the same height as our button over here so to do that we'll use a height of 34 pixels save that and we'll see that our input is now the same height as our button we also want to change the width of this input to be quite a bit smaller so we'll use a width of 50 pixels which should be enough space in order to put our text and have these buttons for incrementing and decrementing the number inside of here the next thing we want to do is we want to give it a border radius so it has slightly rounded corners we'll give it a border radius of 5 pixels we'll give it also a border that's going to be one pixel it's going to be solid colored and we want it to be the same exact color as our buttons up here so we'll just copy that background color from our button and we'll paste that in here now we say that you'll see that we now have the border around our element which is great we need to give it a slightly darker colored background which is just slightly darker than white and if we say that you can see that we want to change our text color to be slightly darker and then we want to make sure we have no padding around this element at all and if we save that our input element is starting to come up together we just want to move our text to the center and make it slightly bigger here so we'll do text align center in order to center align our text we'll use a font size here of 1.2 em to make our font slightly larger and then lastly let's use some margin on the right here 25 pixels in order to separate our input from our button and if you save that you see that now this looks a lot like our mockup over here for our button and input and that's pretty much all we need to do in order to style our row properly now i'm going to copy these styles from this row onto the second row and see what we have from there there we go that's all the styles that i'm going to need in order to make this we can also remove the hr down here at the bottom and we can also remove this cart quantity button class since we never actually ended up using that class so let's remove that from both of our buttons here and save that and you'll notice that everything still looks exactly the same you will notice however though that our underlined borders here don't quite look the same as over here as you can see we have a solid border on the bottom for our last row and over here we have a separated border on the bottom in order to do this we can use the last child selector in our css in order to change the border for the last child but the child element selector only works for the last child inside of a container and right now these cart rows are not the last child of the container that they're inside as you can see this div right here is the last child so let's wrap the rows of our cart here inside of a container and we'll just give this container here a class of cart items move this div down to the bottom here now we can indent all this so it looks pretty save it and you'll notice nothing over here actually changes which is perfect but now when we select the last child of the cart row it'll be this cart row right here since it's the last child of this cart items container so now let's do that inside of our styles.css here first thing that we're going to do is select the cartrow flash child of it and in here we're going to use that border bottom property in order to set a one pixel solid black border that is going to go across the entire row here if we save that you'll see that we now have one solid border on the bottom but we still have our individual borders that we want to remove to do that we'll again select the cartrow last child but we'll also select the cart columns that are children of that actual cart row and we'll remove the border from them and if we save that you'll see that now we have removed these individual borders and all we have is this solid lined border right here on the bottom and that looks exactly the same as over here which is perfect now all we need to do is title type style this total section and this purchase button and we'll be done with this entire band website let's first start by going into our html and adding some classes that we can select these elements with first we'll use the class here of cart total that'll wrap our total and the price of the total and then we'll also use class here of cart total title so this is going to be the title of total and then in here we have the class of cart total price since this is the actual total price and then inside of our styles.css we can select those so we have cart total which is the row that wraps all of these we'll give that a text align of end so that our text will go to the end of the line here just as it does over here and then we can use the selector for our cart total title in order to change the actual text here of this the first thing we want to do is make the font weight bold since it is bolded in our design so we'll change that to bold we'll increase the font size to 1.5 em make the color black so it stands out and we'll give it a little bit of margin on the right side that way it'll be spaced away from our actual price and we'll just say 20 pixels for that and if we save that that's starting to look a lot like over here which is great last thing we need to do is just style the actual total price so we can use cart total price to select that you can give it a color that's slightly darker and a slightly larger font size just so it sticks out a little bit more of 1.1 em if you save that this now looks almost exactly the same as this but you'll notice that our total is very scrunched up here against the bar so we just want to add a little bit of margin so we'll say margin on the top here from our cart total is going to be 10 pixels we'll also add a margin on the right of 10 pixels so that our total isn't squished right up against the edge of our screen and instead it has a little bit extra space and that looks great right there our cart section is now exactly as over here the only thing we have left to do is this purchase button which will be fairly simple since most of the classes we have are already defined let's go back to our store.html here we can remove this div that wraps this section since we don't actually need that and inside of here we can add some classes a button and button primary since this has a primary colored button and we'll also add a class of button purchase since this is going to be a purchase button and if we save that you'll see that we already here styled here from the primary button class if we go into our styles.css we can add some styles specifically for this purchase button here the first thing we want to do change the display to block here so that way we can center this button by using auto margins so we'll use a margin here on the top we want 40 pixels to space it away from our total section on the left we want auto margin on the bottom we want 80 pixels and on the right we want another auto margin and if we save that you'll see that our purchase button is now centered with padding or margin i mean on the top and an even larger margin on the bottom to put it away from the footer the last thing we want to do is increase the font size to 1.75 em so that is a much larger button and there we go that looks great that's a huge button for them to click when they want to purchase their items now all we need to do is style the footer down here and this is going to be very easy all we can do is go into our index page here we can copy our footer since we know it's exactly the same and we can just paste that into our store html and if we save that we now have the footer down here and it looks amazing this looks exactly as the page over here and as we increase the size of our browser our elements will flow naturally around each other you'll see all of our columns stay lined up here no matter how large or how small our browser is everything looks great and that's pretty much all there is to creating this store page for our banned website i really hope you guys were able to learn something from this video thank you guys very much
