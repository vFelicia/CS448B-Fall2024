With timestamps:

00:00 - hi
00:01 - i'm titi i'm a software engineer at
00:03 - google and i'm here to talk about
00:06 - webassembly
00:08 - so um
00:09 - what is webassembly um webassembly is a
00:13 - portable efficient binary format
00:16 - so say you have a c c plus plus a robust
00:19 - program
00:20 - you can compile it to webassembly and
00:23 - run it on the web so there's a couple of
00:25 - interesting things on the slide
00:28 - the first one that says that the initial
00:30 - version of webassembly has reached
00:32 - cross-browser consensus
00:33 - what this means is uh that
00:35 - representatives from different browser
00:37 - vendors like chrome
00:39 - firefox edge webkit
00:43 - they've all agreed on what the api
00:46 - surface should look like and the binary
00:48 - format
00:49 - the other super exciting thing to me is
00:52 - that webassembly is being designed in an
00:54 - open standard in a community group w3c
00:57 - community group um so aside from the
00:59 - fact that it includes representatives
01:02 - from all of the major browser vendors
01:04 - there's also representatives from intel
01:06 - arm of different
01:09 - companies that are potential users for
01:11 - web assembly
01:14 - so um
01:16 - some of the things that uh are awesome
01:19 - about webassembly are that it's
01:21 - efficient and fast
01:22 - um it's load time efficient in the sense
01:25 - that it's designed as a binary format so
01:27 - it's fewer bits over the wire and it's
01:30 - more efficient to load
01:33 - it's fast because it tries by design
01:36 - webassembly tries to make use of
01:38 - hardware capabilities to give it the
01:40 - speed that it needs
01:43 - so it's safe
01:45 - because it
01:47 - tries to enforce the same origin uh
01:49 - security policies that are in use in the
01:52 - rest of the web
01:54 - the other exciting thing about this is
01:56 - that it's part of the open web platform
01:58 - in the sense that
02:00 - it can call in and out of javascript it
02:03 - uses the same
02:06 - api surface that javascript uses to use
02:09 - browser functionality
02:12 - and i think the important thing to talk
02:14 - about here is also what webassembly
02:16 - tries to not be it is not a replacement
02:20 - for javascript by design uh webassembly
02:23 - is a
02:24 - try webassembly should interoperate well
02:27 - with uh javascript if you noticed a logo
02:30 - it has list this tiny slot on the top
02:33 - where the javascript logo is supposed to
02:35 - kind of fit
02:37 - so it's definitely not a replacement for
02:39 - javascript
02:40 - the other thing to note that it is not a
02:42 - programming language
02:44 - i guess you could think of it as a
02:45 - programming language if you think of
02:47 - assembly as a programming language as
02:48 - well in the sense that this is something
02:51 - that the compiler should generate and
02:53 - not something you should be writing by
02:55 - hand
02:56 - you can write it by hand to try it out
02:58 - but
02:59 - to make it efficient and get it to use
03:01 - all of the optimizations you want the
03:04 - compiler to generate this for you
03:07 - it is not a plugin in the sense that is
03:10 - internal to the browser engine so it
03:13 - shares the same stack
03:15 - the other important thing that you want
03:17 - to note here is that it's not a target
03:20 - for dynamic languages yet in the sense
03:22 - that we have proposals that are ongoing
03:24 - that uh
03:26 - you know that
03:28 - we're exploring to support gcd objects
03:30 - and in webassembly so you can have
03:32 - different languages that are not
03:35 - limited to a linear memory model like c
03:37 - c plus plus or rust
03:41 - so
03:42 - one of the primary uh motivations for
03:45 - webassembly is that you want native code
03:48 - on the web
03:51 - so um what is
03:53 - what exactly is
03:55 - native code and why do we want it
03:57 - uh
03:58 - so if you look at applications now
04:02 - there's more and more complex
04:03 - applications that you want to port to
04:05 - the web these are game engines image
04:08 - decoders uh a whole variety of computer
04:11 - intensive
04:12 - performance intensive applications that
04:14 - you want to port to the web and ideally
04:17 - you would want these to work at near
04:19 - native speed so have the performance
04:21 - that native applications give you
04:24 - you want it to be portable in the sense
04:26 - that you want to compile once and run on
04:29 - different platforms
04:31 - so
04:32 - you want it to be safe you want it to
04:34 - run in a sandboxed execution environment
04:38 - so those are the things that native code
04:40 - offers you and these are some of the
04:42 - primary motivations for working on
04:44 - webassembly
04:45 - the other
04:46 - interesting thing is that you can you
04:49 - have all of this existing native code
04:51 - that uses webgl different
04:54 - native capabilities that you can now
04:56 - compile to run on the web
04:59 - one of the reasons why webassembly is
05:02 - actually useful is the fact that
05:04 - it's challenging to use machine
05:06 - capabilities through javascript so if
05:09 - you have threads uh simdee these are
05:12 - things that
05:13 - are easier to use if you're on a native
05:15 - application but you have to jump through
05:17 - a whole bunch of hoops to actually be
05:19 - able to use any of this on
05:21 - javascript
05:23 - there have been previous attempts to get
05:26 - native code on the web uh one of these
05:28 - was a chrome's solution which is
05:31 - portable native client uh this gave you
05:34 - a performance security a lot of native
05:37 - uh functionality but it was only
05:40 - supported on chrome so it wasn't uh
05:42 - portable
05:43 - uh i mean it's portable in the sense
05:45 - that you can run it on different
05:46 - architectures but it's just it's
05:48 - specific to chrome and you can't
05:49 - possibly run it on firefox because of
05:52 - architecture limitations
05:55 - the other
05:56 - mozilla's approach to this is ashi azam
05:59 - js
06:00 - so
06:01 - let's talk a little bit more about
06:03 - azim.js so asim.js is a subset of
06:08 - javascript
06:09 - that can be optimized and used as a
06:12 - low-level target for compilers
06:14 - if you see that program on the right
06:17 - there
06:19 - it so one of the things about javascript
06:21 - is that it's a dynamically typed
06:23 - language so
06:24 - the engine has to do a lot of work to
06:26 - figure out what types
06:29 - exist in your program and optimize
06:31 - according to those asm.js gets rid of
06:33 - some of that in the sense that it uses
06:35 - type annotations for its parameters and
06:37 - return types so you can optimize based
06:40 - on that you you can give the compiler
06:43 - give the engine a hint and say okay use
06:44 - azim and um this it would try to use the
06:49 - specific subset of javascript that
06:50 - asm.js specifies
06:53 - so
06:53 - why not just use asm.js why do we want a
06:56 - whole different thing uh like
06:58 - webassembly
07:00 - um
07:01 - first off uh slower startup that's also
07:04 - known as parsing is expensive um
07:07 - asim.js is a textual format so textual
07:10 - formats are usually orders of magnitude
07:12 - slower than binary formats to parse um
07:16 - so that's uh
07:18 - it gives you
07:20 - it kind of hinders speed in that way
07:22 - um
07:24 - you also have limited functionality what
07:26 - do i mean by this it's just that uh
07:29 - where asimjs is still a subset of
07:32 - javascript so you there's a whole bunch
07:35 - of things that you can't actually use
07:36 - like 64-bit integers if you have loads
07:39 - and stores you need to
07:41 - unalign loads and stores you need to
07:43 - mask them
07:45 - it's again harder to get to cpu specific
07:47 - features
07:49 - the other thing is that even though
07:51 - you're kind of giving the engine a hint
07:53 - that says use azim
07:55 - on a validation failure this falls back
07:58 - to uh regular javascript so the
08:00 - performance in this sense can be
08:02 - inconsistent
08:03 - the most uh important reason why we
08:06 - cannot use asm.js that is that it's not
08:08 - a standard so different browsers have
08:11 - different ways that they
08:14 - optimize asm.js so you have varying
08:17 - levels of performance across browsers
08:23 - so we're at the node summit why are we
08:24 - talking about webassembly
08:28 - so
08:29 - first off uh node 8 supports webassembly
08:33 - so node 8 is built on top of
08:35 - v8 5.8 which enables webassembly by
08:38 - default so you kind of get this for free
08:43 - the other thing is that one of
08:45 - webassembly's
08:47 - high level goals is actually to support
08:49 - non-web embeddings reasonably well
08:52 - and
08:53 - webassembly modules can be imported into
08:56 - a node.js app so you can expose
08:58 - webassembly functions for use via
09:00 - javascript
09:03 - so
09:05 - the what are the benefits of you know
09:07 - having
09:08 - a webassembly module in your app
09:12 - at on the back end because webassembly
09:14 - is a portable ir you can ship a single
09:17 - binary to any platform in the sense you
09:20 - build ones and you can ship it for
09:22 - different platforms
09:24 - the important thing to note here is that
09:27 - portability comes with a cost so if you
09:31 - want portabilities there's there's a
09:33 - chance that you're making a performance
09:34 - trade-off in the sense that your native
09:36 - binary is always going to be faster i
09:38 - mean
09:39 - with caveats but uh your native binaries
09:41 - will be faster because they can directly
09:43 - go to uh
09:45 - the machine code but it's just
09:48 - it's just something to keep in mind
09:49 - whether you want portability or whether
09:51 - you want the same speed um another way
09:54 - uh to think about this is
09:56 - you know think about your app in general
09:59 - so you have the client side and the
10:00 - server side so when on client side
10:02 - applications that things you do like
10:04 - image compression and
10:06 - language detection and other things
10:08 - mainly image compression let's take
10:09 - image compression as an example
10:11 - this is something that if your image is
10:14 - large enough you would want to send to
10:15 - the server
10:17 - but with webassembly you have
10:20 - you can do this kind of compression on
10:22 - the client side itself so you can kind
10:24 - of rethink what goes on the client side
10:26 - and
10:27 - what
10:28 - goes on the server
10:30 - so we talked about importing a
10:34 - webassembly module into your node.js app
10:37 - so what does a webassembly module look
10:39 - like so
10:42 - this is a webassembly module a
10:43 - webassembly module has a linear memory
10:46 - which is a contiguous uh pythagorean
10:50 - byte addressable range of memory um and
10:52 - it can go from like the offset of zero
10:54 - to whatever dynamic memory size and
10:57 - whatever memory size and you can also
10:58 - dynamically resize this memory
11:02 - a table is similar to a linear memory so
11:06 - instead of being bytes these are opaque
11:08 - values of particular table element type
11:11 - the main use of this in the webassembly
11:13 - mvp is
11:15 - you we use this for indirect calls
11:19 - other
11:20 - interesting
11:21 - elements of the module are you have
11:23 - globals
11:24 - so you store a single value of a fixed
11:27 - type in a global and that
11:30 - you know it's it's kind of separate from
11:32 - your linear memory so it can be
11:33 - arbitrarily accessed
11:35 - um functions obviously are the most uh
11:38 - interesting part of your module because
11:40 - they have all the code um
11:42 - so this is this is kind of these are the
11:45 - basic uh building blocks of a
11:46 - webassembly module
11:48 - um
11:49 - so the webassembly module can also
11:52 - define
11:53 - imports
11:54 - so a module can declare a sequence of
11:58 - imports at instantiation optionally
12:00 - these can be memory table functions
12:02 - globals uh
12:04 - the the main point here to note is that
12:07 - you can only have one linear memory and
12:09 - one table right now in the mvp
12:13 - you also have exports
12:15 - so
12:16 - a module can declare a sequence of
12:18 - exports that are returned
12:20 - to the host environment at instantiation
12:24 - so with all of this i've been talking
12:26 - about instantiation so the instance
12:28 - is
12:29 - the one
12:30 - that has all of the static state that
12:33 - you need to run
12:34 - a module
12:36 - so if you look at this like the imports
12:38 - and the exports are uh you know kind of
12:41 - open-ended in the sense of how you
12:43 - interact with your host environment so
12:44 - you can
12:46 - import
12:47 - functions that are defined by the host
12:48 - environment that can interact with your
12:50 - webassembly module or you can export
12:52 - functions from your webassembly module
12:54 - to your host environment
12:55 - and
12:56 - it's it's kind of open-ended what you
12:58 - want to do with it
13:04 - so we've been talking about uh
13:07 - webassembly module what does it look
13:09 - like so
13:10 - there's two things that have been uh
13:13 - defined in the mvp which is the textual
13:15 - format and the binary uh
13:17 - uh format so the code below is what
13:21 - the disassembly of a function looks like
13:24 - so if you this function is just like an
13:26 - arbitrary function that has some memory
13:29 - operations and it takes two parameters
13:31 - and it adds them
13:32 - so if you look at it the first uh
13:34 - section is the textual representation of
13:37 - the function so
13:38 - and you have a one-to-one mapping at the
13:40 - bottom to the binary format um
13:42 - everything on the left is offset so the
13:45 - actual compressed uh code is just yeah
13:48 - so if you look at it it's if you look at
13:49 - the i32 ad line 6a is the op code for
13:53 - i32 add
13:54 - so you can see how much it's been
13:56 - compressed so it's just you know a
13:58 - string of bytes
14:00 - that represent that function
14:02 - um so if we want to take a step back
14:06 - and uh see what a module looks like
14:09 - um so this is
14:10 - a webassembly module and
14:14 - it's just again it's a string of bytes
14:16 - everything on the left hand side is
14:18 - actually just offset and you can see
14:20 - what the bytes uh the bytes after the
14:23 - colon in the sense the first colored
14:24 - section there represents the binary
14:26 - version you have a section that defines
14:29 - uh what
14:30 - functions are present so you have
14:33 - you know
14:35 - you have a function you just number of
14:37 - functions is one you the signature index
14:40 - you also have a memory section which
14:42 - defines the number of memories memory
14:44 - index 0 what what are its limits etc
14:48 - in this case
14:49 - we have one exported function so the
14:51 - exported export section also defines
14:54 - that and the function
14:57 - body is what i've kind of splayed out
14:59 - there to look at
15:05 - so how
15:06 - is webassembly implemented in v8
15:09 - when
15:10 - [Music]
15:11 - we look at this uh this is how
15:15 - your
15:16 - v8 parses javascript code so if i'm
15:18 - sorry v8 the compiler pipeline this is
15:20 - what the compiler pipeline of way it
15:22 - looks
15:22 - like uh kind of glossing over some of
15:25 - the things there but if you have
15:27 - javascript source code it gets parsed
15:29 - and
15:31 - you generate these asds and the
15:34 - javascript graphs are then
15:36 - get inlined lowered and passed to the
15:39 - javascript optimized so so you have it
15:42 - it tries to figure out what the type
15:44 - information is and run all of these
15:46 - optimization passes
15:48 - um so
15:49 - how does webassembly fit into this
15:51 - picture
15:52 - so what the wasm compiler does is
15:55 - webassembly all is already optimized it
15:57 - has a static type information so you
15:59 - just directly feed it into the machine
16:02 - graph
16:03 - which goes to the back end and it
16:06 - generates machine codes specific to the
16:08 - platforms which could be on intel arm
16:12 - mips whatever a native code
16:14 - you want to generate
16:21 - so there's some things that i want to
16:23 - point out here we've been talking about
16:26 - performance we've been talking about
16:27 - speed uh some of the caveats that you
16:31 - should take into account is performance
16:33 - is really tricky to measure so based on
16:36 - your bench if you decide you want to put
16:38 - something over to webassembly this
16:40 - doesn't mean that this will make it fast
16:42 - on all your benchmarks uh it's it's on a
16:46 - case-to-case basis it's you know it's
16:48 - just there's a lot of
16:50 - things that you have to worry about when
16:52 - you're doing performance measurement
16:54 - the other thing that is also important
16:56 - to note is webassembly is an emerging
16:59 - standard so you know there's use cases
17:02 - where you assume that webassembly is
17:03 - fast and in case it's not
17:05 - you know
17:06 - we have bugs like everybody else does
17:09 - and it's something that we're still
17:11 - working on
17:12 - um the other important thing to note is
17:14 - you have to use the right language for
17:16 - the job so
17:18 - if you have computation intensive
17:20 - programs or cpu intensive programs
17:22 - webassembly makes a good case uh for you
17:25 - it makes a good case for you to use uh
17:27 - port your application to webassembly but
17:29 - if you don't um you know there's cases
17:32 - where javascript does the job right and
17:34 - there's cases where webassembly is the
17:35 - right way to do it
17:38 - ties into the same thing that
17:39 - webassembly tackles specific use cases
17:41 - and it's not a blanket solution to all
17:43 - your performance problems
17:47 - so
17:49 - what are some of the use cases that you
17:51 - can use
17:52 - webassembly for you have encryption
17:55 - video augmentation
17:57 - game distribution
17:59 - you have image video editing there's
18:01 - just a whole bunch of applications a
18:04 - server-side computation of untrusted
18:06 - code
18:07 - there's a lot more
18:09 - applications and use cases that i
18:10 - haven't actually put on the slide but
18:13 - you kind of get the general idea there
18:19 - so um
18:21 - we're at mvp and what are some of the
18:24 - post mvp features that we're actually
18:26 - considering so
18:29 - we are considering threads atomic
18:31 - operators it's basically to provide low
18:34 - level building blocks for a p thread
18:36 - style shared memory
18:39 - you shared memory between threads you
18:41 - have atomics and futexes
18:44 - the other thing that we're exploring is
18:47 - fixed with simdee
18:49 - we've made efforts to do this in
18:51 - javascript with simdi.js but it's it's
18:54 - been tricky in the sense that you know
18:57 - it's
18:58 - probably not going to be as performant
19:00 - in the javascript cases there's not as
19:02 - many use cases but it fits well into the
19:05 - webassembly use case
19:09 - there's also exception handling you can
19:11 - emulate exception handling uh through
19:14 - javascript but you know it gives you the
19:16 - correct semantics but it's not going to
19:18 - be fast so one of the things that's in
19:21 - progress is uh stereocast exceptions
19:26 - so i talked a little bit earlier about c
19:28 - c plus plus and rust and uh you know use
19:31 - these modules in
19:33 - compile these to webassembly so we want
19:35 - to be able to support different
19:37 - languages so what do we want to do when
19:39 - it comes to dynamic languages
19:42 - we're trying to build a
19:44 - you know build like a garbage collection
19:46 - mechanism that can efficiently uh
19:49 - allocate and manipulate gc objects in
19:52 - wasm code
19:57 - so
19:58 - um
19:59 - contributing like i said earlier with
20:02 - webassembly one of the high level goals
20:05 - is that we want to work well for non-web
20:07 - use cases so uh
20:10 - you know it's we appreciate input from
20:14 - different web communities to see if this
20:17 - actually fits their use case if it
20:18 - doesn't we would love for you to come up
20:20 - to us and tell us why it doesn't work
20:22 - there's a lot of information on
20:24 - webassembly.org including a really cool
20:28 - tanks demo that's
20:30 - based on the unity engine
20:32 - there's also lots of
20:34 - tips and tricks to get started
20:37 - that the github page is up there
20:40 - like i said earlier we work as a part of
20:42 - the w3c community group
20:45 - we have regular meetings that are over
20:47 - we see and sometimes in person to
20:49 - discuss uh use cases to discuss uh
20:52 - future features to discuss
20:54 - implementation like what all the kind of
20:56 - applications that we're trying to cover
20:58 - so um
21:00 - you know if this is something that
21:03 - interests you we would love for you to
21:05 - come up to us and uh tell us how this
21:07 - doesn't cover your use case and
21:09 - you know talk about it to the other
21:11 - implementers as well
21:15 - um thanks

Cleaned transcript:

hi i'm titi i'm a software engineer at google and i'm here to talk about webassembly so um what is webassembly um webassembly is a portable efficient binary format so say you have a c c plus plus a robust program you can compile it to webassembly and run it on the web so there's a couple of interesting things on the slide the first one that says that the initial version of webassembly has reached crossbrowser consensus what this means is uh that representatives from different browser vendors like chrome firefox edge webkit they've all agreed on what the api surface should look like and the binary format the other super exciting thing to me is that webassembly is being designed in an open standard in a community group w3c community group um so aside from the fact that it includes representatives from all of the major browser vendors there's also representatives from intel arm of different companies that are potential users for web assembly so um some of the things that uh are awesome about webassembly are that it's efficient and fast um it's load time efficient in the sense that it's designed as a binary format so it's fewer bits over the wire and it's more efficient to load it's fast because it tries by design webassembly tries to make use of hardware capabilities to give it the speed that it needs so it's safe because it tries to enforce the same origin uh security policies that are in use in the rest of the web the other exciting thing about this is that it's part of the open web platform in the sense that it can call in and out of javascript it uses the same api surface that javascript uses to use browser functionality and i think the important thing to talk about here is also what webassembly tries to not be it is not a replacement for javascript by design uh webassembly is a try webassembly should interoperate well with uh javascript if you noticed a logo it has list this tiny slot on the top where the javascript logo is supposed to kind of fit so it's definitely not a replacement for javascript the other thing to note that it is not a programming language i guess you could think of it as a programming language if you think of assembly as a programming language as well in the sense that this is something that the compiler should generate and not something you should be writing by hand you can write it by hand to try it out but to make it efficient and get it to use all of the optimizations you want the compiler to generate this for you it is not a plugin in the sense that is internal to the browser engine so it shares the same stack the other important thing that you want to note here is that it's not a target for dynamic languages yet in the sense that we have proposals that are ongoing that uh you know that we're exploring to support gcd objects and in webassembly so you can have different languages that are not limited to a linear memory model like c c plus plus or rust so one of the primary uh motivations for webassembly is that you want native code on the web so um what is what exactly is native code and why do we want it uh so if you look at applications now there's more and more complex applications that you want to port to the web these are game engines image decoders uh a whole variety of computer intensive performance intensive applications that you want to port to the web and ideally you would want these to work at near native speed so have the performance that native applications give you you want it to be portable in the sense that you want to compile once and run on different platforms so you want it to be safe you want it to run in a sandboxed execution environment so those are the things that native code offers you and these are some of the primary motivations for working on webassembly the other interesting thing is that you can you have all of this existing native code that uses webgl different native capabilities that you can now compile to run on the web one of the reasons why webassembly is actually useful is the fact that it's challenging to use machine capabilities through javascript so if you have threads uh simdee these are things that are easier to use if you're on a native application but you have to jump through a whole bunch of hoops to actually be able to use any of this on javascript there have been previous attempts to get native code on the web uh one of these was a chrome's solution which is portable native client uh this gave you a performance security a lot of native uh functionality but it was only supported on chrome so it wasn't uh portable uh i mean it's portable in the sense that you can run it on different architectures but it's just it's specific to chrome and you can't possibly run it on firefox because of architecture limitations the other mozilla's approach to this is ashi azam js so let's talk a little bit more about azim.js so asim.js is a subset of javascript that can be optimized and used as a lowlevel target for compilers if you see that program on the right there it so one of the things about javascript is that it's a dynamically typed language so the engine has to do a lot of work to figure out what types exist in your program and optimize according to those asm.js gets rid of some of that in the sense that it uses type annotations for its parameters and return types so you can optimize based on that you you can give the compiler give the engine a hint and say okay use azim and um this it would try to use the specific subset of javascript that asm.js specifies so why not just use asm.js why do we want a whole different thing uh like webassembly um first off uh slower startup that's also known as parsing is expensive um asim.js is a textual format so textual formats are usually orders of magnitude slower than binary formats to parse um so that's uh it gives you it kind of hinders speed in that way um you also have limited functionality what do i mean by this it's just that uh where asimjs is still a subset of javascript so you there's a whole bunch of things that you can't actually use like 64bit integers if you have loads and stores you need to unalign loads and stores you need to mask them it's again harder to get to cpu specific features the other thing is that even though you're kind of giving the engine a hint that says use azim on a validation failure this falls back to uh regular javascript so the performance in this sense can be inconsistent the most uh important reason why we cannot use asm.js that is that it's not a standard so different browsers have different ways that they optimize asm.js so you have varying levels of performance across browsers so we're at the node summit why are we talking about webassembly so first off uh node 8 supports webassembly so node 8 is built on top of v8 5.8 which enables webassembly by default so you kind of get this for free the other thing is that one of webassembly's high level goals is actually to support nonweb embeddings reasonably well and webassembly modules can be imported into a node.js app so you can expose webassembly functions for use via javascript so the what are the benefits of you know having a webassembly module in your app at on the back end because webassembly is a portable ir you can ship a single binary to any platform in the sense you build ones and you can ship it for different platforms the important thing to note here is that portability comes with a cost so if you want portabilities there's there's a chance that you're making a performance tradeoff in the sense that your native binary is always going to be faster i mean with caveats but uh your native binaries will be faster because they can directly go to uh the machine code but it's just it's just something to keep in mind whether you want portability or whether you want the same speed um another way uh to think about this is you know think about your app in general so you have the client side and the server side so when on client side applications that things you do like image compression and language detection and other things mainly image compression let's take image compression as an example this is something that if your image is large enough you would want to send to the server but with webassembly you have you can do this kind of compression on the client side itself so you can kind of rethink what goes on the client side and what goes on the server so we talked about importing a webassembly module into your node.js app so what does a webassembly module look like so this is a webassembly module a webassembly module has a linear memory which is a contiguous uh pythagorean byte addressable range of memory um and it can go from like the offset of zero to whatever dynamic memory size and whatever memory size and you can also dynamically resize this memory a table is similar to a linear memory so instead of being bytes these are opaque values of particular table element type the main use of this in the webassembly mvp is you we use this for indirect calls other interesting elements of the module are you have globals so you store a single value of a fixed type in a global and that you know it's it's kind of separate from your linear memory so it can be arbitrarily accessed um functions obviously are the most uh interesting part of your module because they have all the code um so this is this is kind of these are the basic uh building blocks of a webassembly module um so the webassembly module can also define imports so a module can declare a sequence of imports at instantiation optionally these can be memory table functions globals uh the the main point here to note is that you can only have one linear memory and one table right now in the mvp you also have exports so a module can declare a sequence of exports that are returned to the host environment at instantiation so with all of this i've been talking about instantiation so the instance is the one that has all of the static state that you need to run a module so if you look at this like the imports and the exports are uh you know kind of openended in the sense of how you interact with your host environment so you can import functions that are defined by the host environment that can interact with your webassembly module or you can export functions from your webassembly module to your host environment and it's it's kind of openended what you want to do with it so we've been talking about uh webassembly module what does it look like so there's two things that have been uh defined in the mvp which is the textual format and the binary uh uh format so the code below is what the disassembly of a function looks like so if you this function is just like an arbitrary function that has some memory operations and it takes two parameters and it adds them so if you look at it the first uh section is the textual representation of the function so and you have a onetoone mapping at the bottom to the binary format um everything on the left is offset so the actual compressed uh code is just yeah so if you look at it it's if you look at the i32 ad line 6a is the op code for i32 add so you can see how much it's been compressed so it's just you know a string of bytes that represent that function um so if we want to take a step back and uh see what a module looks like um so this is a webassembly module and it's just again it's a string of bytes everything on the left hand side is actually just offset and you can see what the bytes uh the bytes after the colon in the sense the first colored section there represents the binary version you have a section that defines uh what functions are present so you have you know you have a function you just number of functions is one you the signature index you also have a memory section which defines the number of memories memory index 0 what what are its limits etc in this case we have one exported function so the exported export section also defines that and the function body is what i've kind of splayed out there to look at so how is webassembly implemented in v8 when we look at this uh this is how your v8 parses javascript code so if i'm sorry v8 the compiler pipeline this is what the compiler pipeline of way it looks like uh kind of glossing over some of the things there but if you have javascript source code it gets parsed and you generate these asds and the javascript graphs are then get inlined lowered and passed to the javascript optimized so so you have it it tries to figure out what the type information is and run all of these optimization passes um so how does webassembly fit into this picture so what the wasm compiler does is webassembly all is already optimized it has a static type information so you just directly feed it into the machine graph which goes to the back end and it generates machine codes specific to the platforms which could be on intel arm mips whatever a native code you want to generate so there's some things that i want to point out here we've been talking about performance we've been talking about speed uh some of the caveats that you should take into account is performance is really tricky to measure so based on your bench if you decide you want to put something over to webassembly this doesn't mean that this will make it fast on all your benchmarks uh it's it's on a casetocase basis it's you know it's just there's a lot of things that you have to worry about when you're doing performance measurement the other thing that is also important to note is webassembly is an emerging standard so you know there's use cases where you assume that webassembly is fast and in case it's not you know we have bugs like everybody else does and it's something that we're still working on um the other important thing to note is you have to use the right language for the job so if you have computation intensive programs or cpu intensive programs webassembly makes a good case uh for you it makes a good case for you to use uh port your application to webassembly but if you don't um you know there's cases where javascript does the job right and there's cases where webassembly is the right way to do it ties into the same thing that webassembly tackles specific use cases and it's not a blanket solution to all your performance problems so what are some of the use cases that you can use webassembly for you have encryption video augmentation game distribution you have image video editing there's just a whole bunch of applications a serverside computation of untrusted code there's a lot more applications and use cases that i haven't actually put on the slide but you kind of get the general idea there so um we're at mvp and what are some of the post mvp features that we're actually considering so we are considering threads atomic operators it's basically to provide low level building blocks for a p thread style shared memory you shared memory between threads you have atomics and futexes the other thing that we're exploring is fixed with simdee we've made efforts to do this in javascript with simdi.js but it's it's been tricky in the sense that you know it's probably not going to be as performant in the javascript cases there's not as many use cases but it fits well into the webassembly use case there's also exception handling you can emulate exception handling uh through javascript but you know it gives you the correct semantics but it's not going to be fast so one of the things that's in progress is uh stereocast exceptions so i talked a little bit earlier about c c plus plus and rust and uh you know use these modules in compile these to webassembly so we want to be able to support different languages so what do we want to do when it comes to dynamic languages we're trying to build a you know build like a garbage collection mechanism that can efficiently uh allocate and manipulate gc objects in wasm code so um contributing like i said earlier with webassembly one of the high level goals is that we want to work well for nonweb use cases so uh you know it's we appreciate input from different web communities to see if this actually fits their use case if it doesn't we would love for you to come up to us and tell us why it doesn't work there's a lot of information on webassembly.org including a really cool tanks demo that's based on the unity engine there's also lots of tips and tricks to get started that the github page is up there like i said earlier we work as a part of the w3c community group we have regular meetings that are over we see and sometimes in person to discuss uh use cases to discuss uh future features to discuss implementation like what all the kind of applications that we're trying to cover so um you know if this is something that interests you we would love for you to come up to us and uh tell us how this doesn't cover your use case and you know talk about it to the other implementers as well um thanks
