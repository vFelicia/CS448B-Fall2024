With timestamps:

00:00 - we are going to start learning about the
00:02 - flask web framework
00:03 - now this is a micro framework that
00:05 - allows everyone to
00:06 - build their own web applications using
00:09 - the python programming language and what
00:11 - is so
00:11 - great with flask it allows everyone to
00:14 - build
00:14 - web application with only a few lines of
00:16 - code so
00:17 - it turns the experience of building a
00:20 - website to a lot quicker and easier
00:22 - and in this series of videos we are also
00:24 - going to start with a very minimal
00:26 - application
00:27 - and we are going to push forward until
00:29 - we have an advanced website
00:31 - where real users can start using it so i
00:34 - really believe that in this series of
00:36 - videos
00:36 - we will cover everything that you need
00:38 - to know about the flask web framework
00:40 - in order to come with a great looking
00:42 - website alright so let's have a quick
00:44 - look to the website
00:45 - that we are going to build throughout
00:47 - this series okay so this is the final
00:49 - result of the website that we are going
00:51 - to build throughout this series
00:52 - now the main idea of this website will
00:54 - be to create a marketing system
00:57 - where different users can buy or sell
00:59 - their items
01:00 - so in order to get started i can press
01:02 - in here in that button
01:04 - and then you can see that i see a
01:06 - warning here that i
01:07 - should log in to access that page now if
01:10 - i'm happened to not have a user here
01:13 - then i can basically go ahead and click
01:15 - register now i'm going to
01:17 - mismatch these details a bit so you can
01:19 - be aware of the different error handling
01:21 - that we are going to apply on this
01:23 - website
01:24 - and once i click on create account then
01:26 - we can see that we receive
01:28 - several errors regarding to that website
01:30 - so
01:31 - as you can understand we are going to
01:33 - apply a lot of error handling
01:35 - like in real websites so now i will go
01:37 - ahead and create a valid account here
01:40 - so once i click on create account then
01:42 - we can see that we
01:44 - are inside a real looking web page
01:47 - and you can see on the left pane that we
01:49 - have the available items on market
01:51 - and each item has its name and also
01:54 - its barcode and price and we can display
01:57 - more information
01:58 - about each of our products and as you
02:01 - can see in
02:02 - up top here we have our budget that is
02:05 - set by default
02:06 - to 15 grand so that means that we are
02:08 - going to create a budget system for our
02:11 - users
02:12 - as well and if i go ahead and purchase
02:14 - that item
02:15 - which its price is 520
02:19 - then you can see that we receive a nice
02:22 - message
02:23 - with the purchase item and we can also
02:25 - pay attention that
02:26 - our budget has been changed over here
02:29 - and further than that we can see in the
02:31 - right pane
02:32 - that now on my items i see that we have
02:36 - a new item
02:37 - that we have the option to sell it so if
02:40 - i'm going ahead and sell this item back
02:42 - to
02:42 - the market then we can see that our
02:45 - budget
02:45 - is back at 15 grand and we can also see
02:48 - that
02:48 - this page is refreshed to what it was
02:51 - before
02:52 - i purchased that item so it is going to
02:54 - be a lot of fun building this website
02:57 - and let's go ahead and get started
03:01 - all right everyone so you can pay
03:03 - attention that i'm inside the terminal
03:05 - in a windows machine but of course don't
03:07 - worry if you use a mac or any kind of
03:09 - linux distribution because i'm going to
03:11 - say the same command that is going to
03:14 - work on those operating systems
03:16 - as well and also one more important
03:18 - point here i'm going to assume that you
03:20 - have python 3.8
03:22 - or any version above installed and also
03:25 - a
03:25 - ready ide installed that you'll work
03:27 - with so it could be visual code
03:29 - sublime text or pycharm and just to
03:32 - mention off i'm going to use pycharm
03:34 - in this series but it is not quite
03:36 - important which id you are working with
03:38 - just make sure that it is configured
03:39 - with python correctly
03:41 - okay so let's go ahead and create our
03:43 - directory that we are going to store our
03:46 - project files
03:47 - inside it so i will go here and write in
03:51 - make directory and this is the same
03:53 - command for any linux distribution as
03:55 - well
03:55 - and i will type in here the name of the
03:58 - directory
03:59 - that i want to make so it will be flask
04:02 - market and then i will go ahead and use
04:05 - the
04:05 - cd command to change the directory and i
04:08 - will basically type in
04:10 - the name of the directory that we
04:11 - created and now before we
04:13 - go ahead and actually launch this
04:16 - directory in
04:17 - our pycharm i want to install the
04:19 - dependencies that are quite
04:21 - important in order to start building our
04:24 - first
04:24 - flask application so i will go here and
04:28 - use the pip to install some package and
04:31 - you can use basically the same command
04:33 - for any linux machine as well
04:34 - and i'm going to type in here pip
04:36 - install
04:37 - flask and once i have done that then you
04:41 - can see that we got some warnings that
04:43 - are saying that requirement already
04:45 - satisfied because when you go ahead and
04:47 - install flask it is basically going to
04:50 - install
04:50 - some secondary packages that are kind of
04:53 - dependent to
04:54 - flask so just make sure that you hit
04:57 - this command correctly
04:58 - and then there is no any output of
05:00 - errors or something like that
05:02 - and once you have done that let me just
05:04 - clean our screen here
05:06 - then we can basically go ahead and test
05:08 - out if we
05:09 - installed flash correctly and i will do
05:12 - that by type in here
05:13 - flask dash dash version and if you don't
05:17 - see any errors in this command
05:19 - then we should go ahead and try to start
05:22 - our first flask application
05:24 - because we received a correct output
05:27 - that
05:27 - just specifies the versions of some of
05:31 - the dependencies that are related to the
05:33 - flask
05:34 - framework so let's go ahead and build
05:36 - our first application in python
05:38 - okay so i have already opened my pycharm
05:40 - here and
05:41 - you can basically pay attention that i
05:44 - opened it in a directory that is the
05:46 - same directory that we created
05:48 - so make sure that you point your id to
05:50 - the directory that we created a few
05:52 - minutes ago
05:53 - and then inside our directory we are
05:55 - going to create our first python file
05:58 - and you can do that by that way in
06:00 - python so
06:01 - i will call it market and then once i
06:04 - have done that
06:05 - it is a great idea to bring in from the
06:07 - web browser
06:09 - the starter template to basically build
06:11 - up your first
06:12 - flask application now flask
06:15 - documentation already includes
06:16 - some basic structure that is going to
06:20 - allow us to build our first hello world
06:22 - application
06:23 - so let's go ahead and bring this in our
06:26 - screen
06:27 - and make that a little bigger and you
06:29 - can see here
06:30 - that inside that website we have a
06:33 - minimal
06:34 - application that is looking something
06:36 - like the following and i will allow
06:38 - myself to
06:39 - copy the entire code from here and paste
06:42 - this in
06:43 - our python so let's open our ide again
06:46 - and i will paste this here and
06:49 - let's see what is going on here so as
06:52 - the first line
06:53 - we can already see that we import the
06:55 - flask instance
06:56 - from the entire flask package so it is
06:59 - quite obvious and
07:00 - it is not surprising but then we can see
07:03 - that we initialize the instance of the
07:05 - flask
07:06 - with the given argument of double
07:08 - underscore name double underscore
07:10 - now if you never saw this variable
07:12 - before i have a video that is quite
07:14 - explaining
07:15 - what this magic variable is about
07:17 - basically this is a built-in variable
07:19 - that you can always call from any python
07:21 - file
07:22 - and it is referring to the local python
07:25 - file
07:25 - that you are working with so the flask
07:28 - instance
07:29 - is requiring to receive this parameter
07:31 - and this is why you are going to
07:32 - see that and don't worry too much about
07:34 - that if you don't understand it
07:36 - basically just leave it as it is and now
07:39 - we can see that
07:40 - in the fault line we have something that
07:43 - is called a decorator in python
07:46 - now a decorator is basically a one step
07:49 - before
07:49 - a function that is going to be executed
07:53 - now when you see here app.route it is
07:56 - basically
07:57 - saying that what url in your website i
08:01 - am going to
08:01 - navigate through and display you some
08:04 - html
08:05 - code so you can see that inside here we
08:08 - have an argument
08:09 - that is basically saying a full slash
08:12 - inside the string
08:14 - now this is the home page of your
08:16 - built-in website
08:17 - so if you just basically go ahead and
08:20 - type in some url without navigating for
08:23 - a specific page
08:24 - then it is going to lead you by default
08:27 - to
08:27 - that specific page so you can refer it
08:30 - as your
08:31 - root url of your website
08:34 - and then we can see that we have a
08:36 - function that is defined here
08:38 - and then it returns a string that says
08:40 - hello world
08:41 - now this is the exact place that we
08:44 - should see some html code in the future
08:46 - but for now we are only returning a
08:48 - basic string
08:49 - that is saying hello world and those in
08:52 - flask are trended to call
08:56 - routes or views sometimes people call it
08:58 - wheels because in django it is called
09:01 - views and django is another web
09:02 - framework of python
09:04 - but i will try to stick with one word
09:06 - when i'm going to
09:07 - refer to those functions that are
09:09 - routing to a specific page
09:11 - and we are going to call them routes so
09:13 - once we understand what is going on
09:15 - inside this startup template then
09:17 - it is a great idea to raise our terminal
09:20 - here and
09:21 - run in some commands to start this
09:23 - application
09:24 - so let me clean the screen here and in
09:26 - order to make our application run
09:28 - successfully
09:29 - we are required to set up several
09:31 - environment variables
09:32 - so i will go here and write up set
09:36 - flask app like this and make sure that
09:39 - all the letters are capitalized here
09:41 - and if you are working on a linux
09:42 - machine this command is basically should
09:44 - be
09:45 - export and not set so if you are on
09:48 - windows set will work and i'm going to
09:50 - make that to be equal
09:52 - to the same name of the python file that
09:55 - we have just created
09:56 - and if you remember we call this market
10:00 - dot pi and once we have set that
10:03 - then we can basically go ahead and
10:05 - execute our application
10:06 - by saying here flask run and once i have
10:10 - done that
10:11 - you can see that we receive several
10:13 - warnings
10:14 - that we are going to explain them in the
10:16 - future but that last
10:18 - line is quite important to understand so
10:20 - you can see that it says that it's
10:22 - running on http 127.001
10:26 - and then we see a column here and then a
10:29 - number after that
10:30 - now if you know a little bit about basic
10:32 - networking
10:33 - then you can understand that this ip is
10:36 - a convention
10:37 - ip address that is basically referring
10:40 - to
10:40 - your local machine so this ip is going
10:43 - to be the same for each
10:45 - machine that this application is running
10:47 - on and
10:48 - we have something that is called the
10:50 - ports that are basically
10:52 - describing the application that you are
10:54 - hosting
10:55 - as numbers so for flask
10:58 - by default it will be 5000 so
11:02 - if i will copy this url from here
11:05 - and paste this in our web browser
11:08 - then we should see a message
11:12 - hello world and that is perfect because
11:15 - we were able to complete
11:16 - the entire starting process successfully
11:19 - in the flask web framework so we can
11:23 - basically go ahead and continue from
11:25 - here and one more point that i did not
11:27 - mention
11:28 - you'll see this hello world text because
11:30 - this is the root url of your web
11:32 - application
11:32 - and basically the hello world function
11:34 - that we saw before knows how to handle
11:36 - this
11:37 - so for example if i was to go here
11:40 - and type in slash about for example
11:43 - then we should receive an error that
11:45 - this is not found because we are not
11:47 - having
11:48 - a route that is handling the slash
11:51 - about so this is the reason we saw the
11:54 - hello world
11:54 - message properly okay so i'm back to my
11:57 - pycharm and
11:58 - let's actually go ahead and try to
12:00 - customize this string a little bit
12:02 - to return a better looking page
12:06 - so we can basically go inside the
12:09 - string that we are returning and type in
12:12 - here some html code
12:14 - that will basically be rendered in
12:17 - the page that we are displaying so we
12:20 - can go here
12:21 - and use the h1 tag which is basically
12:25 - the biggest header tag that is possible
12:27 - in html
12:28 - and we can write in here some text again
12:31 - like hello world
12:33 - but bigger and then we can go ahead and
12:36 - close our tag
12:38 - like this now if you don't know anything
12:41 - about
12:42 - html don't worry too much about that
12:44 - because most of the html code that i'm
12:46 - going to
12:47 - write here i'm going to explain what i'm
12:49 - going to do or i'm just basically going
12:51 - to
12:52 - copying and pasting several html code
12:55 - snippets so
12:56 - we can make our lives easier when we
12:59 - display
12:59 - nicer pages okay so let's go ahead and
13:02 - save this out
13:03 - and go back to our terminal and restart
13:07 - our server so i will stop the execution
13:10 - of
13:10 - our web server and type in again flask
13:14 - run and then we will go to our web
13:16 - browser again
13:18 - and basically navigate back to the
13:21 - root url so i will just hit enter here
13:24 - then we can see that we receive this
13:26 - message
13:27 - of hello rolled but bigger now
13:30 - you could see that in order to display
13:34 - this text i went ahead to my terminal
13:38 - and restarted our web application and
13:41 - you are probably asking yourself if this
13:43 - process
13:44 - is required to accomplish every time
13:47 - that you are changing your code
13:49 - well the answer for that is for sure no
13:52 - because you probably don't want to go
13:54 - ahead and
13:55 - restart your application every time that
13:57 - you are taking several changes
13:59 - within your project so in order to
14:01 - prevent
14:02 - such a behavior we should go back to our
14:05 - terminal
14:06 - and look up for something that is called
14:09 - debug mode
14:10 - right here now you can see that we are
14:13 - having the debug mode
14:14 - off and you want to turn it on basically
14:17 - because
14:18 - this will allow your application to
14:20 - being synchronized
14:22 - every time you change your code within
14:25 - your market.pi
14:27 - file so if i was to exit
14:30 - our web application that time and let's
14:32 - actually clean our screen again
14:34 - and we can basically go ahead and set up
14:36 - one more environment variable
14:38 - that will turn the debug mode on and
14:41 - that will be
14:42 - by the set command again and i will set
14:45 - the flask on the scar debug to
14:48 - one so basically this turns on the debug
14:51 - mode
14:52 - and then i will allow myself to run
14:55 - flask run again and then now that time
14:58 - we can see that the debug mode is on
15:02 - now let's go to our python again and
15:04 - change the
15:05 - string that we are returning on our root
15:08 - url
15:08 - and see if those changes will be
15:10 - synchronized without restarting
15:12 - our web server so i will go here and i
15:15 - will basically type in here
15:18 - change text something like that and i
15:20 - will go back to my web browser
15:23 - and refresh that out and then you can
15:25 - see that the changes
15:27 - have been affected without restarting
15:30 - our web server
15:31 - so we can test this one more time by
15:33 - adding some explanation marks here
15:35 - and save that out and go back to our web
15:38 - browser and
15:39 - refresh it and then you can see that the
15:41 - changes
15:42 - are being synchronized when you are on
15:45 - debug mode
15:46 - now the debug mode is something that you
15:48 - always want to turn on
15:50 - when you develop your application but
15:52 - once you go ahead and
15:54 - deploy this application in production
15:56 - then you definitely don't want to turn
15:58 - the debug mode on
16:00 - because this will cause the clients that
16:02 - are
16:03 - basically surfing on that web server to
16:06 - see errors of your web application
16:08 - and it is always not nice to see your
16:11 - bugs
16:11 - as the one who uses your services so
16:15 - make sure that if you deploy your web
16:17 - application in the future
16:19 - then prevent the debug mode on because
16:22 - this is
16:22 - very important okay so let's see what
16:24 - else we can do
16:26 - with our routes here so
16:29 - let's actually revert this back to hello
16:32 - world again and i will basically create
16:34 - here one more route
16:36 - just to practice how routes are working
16:39 - because we are going to create a lot of
16:40 - them in the future
16:42 - so i will write here the decorator that
16:44 - is
16:45 - required to make the route to understand
16:49 - which url you want to enable in your web
16:52 - application
16:53 - so i will go ahead here and type in
16:56 - slash
16:57 - about and then once i have done that you
17:00 - should go ahead and create your function
17:03 - that will handle
17:04 - all the requests that are arriving to
17:07 - this url which is slash about and i will
17:11 - call this function about underscore page
17:14 - and i will close this out and i will go
17:17 - ahead
17:18 - and return one more html string here
17:21 - that will say about
17:24 - page so as you paid attention i created
17:27 - those h1 tags again and just to test
17:30 - this off in that stage
17:32 - let's go ahead to our web browser again
17:35 - and try to
17:36 - navigate through slash about and this
17:39 - time you could guess that
17:40 - the slash about is going to work because
17:42 - we are handling
17:44 - what the slash about supposed to do
17:47 - so i just wanted to show you that you
17:49 - can create as much as routes
17:50 - as you want and then you can basically
17:53 - return some html
17:55 - response to your web pages now
17:58 - sometimes you don't always want to go
18:01 - ahead and
18:02 - hard coding your routes like we
18:05 - did until now so if you imagine a
18:08 - situation
18:09 - like in facebook where you have
18:11 - different urls for like
18:13 - millions of profiles then you probably
18:16 - can understand
18:17 - that the facebook developers are not
18:19 - going ahead and creating
18:20 - millions of routes by hard coding their
18:23 - profile names
18:25 - so besides that we can accept something
18:28 - that is called dynamic routes and
18:31 - what i mean by that is that basically
18:34 - you can go ahead to your route in your
18:37 - flask application
18:38 - and receive a variable name that is
18:42 - going to be
18:43 - accepted as well so let's imagine a
18:45 - situation that we want to
18:47 - display an about page for different
18:50 - people so let's go here and
18:51 - type in one more forward slash and then
18:54 - basically
18:55 - call the tags and add in here
18:58 - username now what i have done by this
19:02 - is basically i allowed this
19:05 - route to receive any string that we want
19:08 - after the
19:09 - about page and since i have done that
19:12 - i can go here and change this return
19:16 - to something else so let's go here and
19:19 - write in a formatted string and i will
19:21 - open this
19:22 - h1 tags again and i will close it like
19:25 - this and then between those i will go
19:28 - ahead and type in
19:29 - this is the about page of
19:33 - and then let's call here the user name
19:36 - that we receive here now you can pay
19:39 - attention that
19:39 - this returns us an error because we
19:42 - should handle this
19:44 - variable inside our function as well so
19:47 - let's
19:47 - accept this as a parameter so i will go
19:50 - here and type in username
19:52 - and now i can basically go back to our
19:54 - web browser
19:55 - and check out if this works properly so
19:59 - i will go back to our web browser again
20:01 - and i will type in here forward slash
20:04 - and then let's give a random name
20:06 - like john and then you can see that we
20:09 - receive
20:10 - a page so we see the message here of
20:13 - this is the about page of john
20:15 - and i could go here and change this to
20:17 - whatever i want
20:18 - i can change it to michael to jim and
20:22 - to more names if i'd like to so the
20:24 - important point here
20:25 - is to understand the behavior of
20:29 - dynamic routes so just make sure that
20:31 - you understand the behavior of that
20:33 - as well
20:37 - okay so as you could notice here i
20:40 - deleted
20:40 - the about route from the last episode
20:43 - because i want to focus on the next
20:45 - topic that i am going to talk about just
20:48 - now
20:48 - so until now we raised our html text
20:52 - within our routes
20:54 - in a hard coded text like you
20:57 - see here now when we go ahead and design
21:01 - complex html pages you probably want to
21:04 - avoid storing long strings within only a
21:08 - single file
21:09 - so in order to overcome this we have a
21:12 - convention in flask to a way we can
21:14 - achieve such a task and the way we can
21:17 - basically
21:18 - do this is by creating a new directory
21:21 - that is called templates and then inside
21:24 - the
21:25 - templates directory we will start
21:27 - creating our html
21:29 - files and then we will separate our html
21:32 - code
21:32 - within this directory and we will refer
21:36 - our routes to those different html
21:40 - files so let's go ahead and get started
21:42 - and see how we can do this
21:44 - okay so i will start by creating a new
21:47 - directory here
21:48 - and you can see that i'm creating that
21:50 - inside our flask market
21:52 - project so it is very important and you
21:55 - want to
21:55 - name it templates so make sure that you
21:58 - don't give it another name like html
22:00 - pages or something else
22:02 - just basically go with templates because
22:04 - the templates
22:05 - name is actually a convention to a flask
22:08 - so
22:08 - the package can understand that you are
22:10 - going to locate there
22:12 - some html files and within our templates
22:15 - directory
22:15 - we will go ahead and create one more
22:17 - file and you can directly
22:19 - select the html file if you use the
22:22 - pycharm
22:23 - so i will name it home and then you can
22:26 - see that it already
22:27 - returns us some default html code
22:30 - and just for now i'm going to delete
22:33 - what is inside here
22:34 - and let's make our font bigger so we can
22:37 - understand what we are going to type in
22:39 - here just in a second
22:41 - now again for a basic example and
22:44 - to understand the process of referring
22:47 - a route to an html file we will
22:50 - basically
22:50 - go ahead here and type in hello
22:54 - i mean home page it might be a better
22:56 - way to do that so we will call it home
22:59 - page
23:00 - and basically i will save this file and
23:02 - go back to our
23:03 - market dot py and then besides
23:06 - returning the hard-coded string like we
23:09 - did previously
23:10 - we want to look for a way to point
23:14 - this route to the home.html
23:17 - that we have just created so it
23:20 - basically makes more sense to
23:22 - change this route a little bit and let's
23:25 - do that okay and let's go ahead
23:27 - and call this home page and then we
23:30 - will close this out and then write a
23:33 - column here
23:34 - and then we will return render
23:37 - underscore template now you could
23:40 - already pay attention that
23:41 - this returns us an error because we did
23:43 - not import it
23:45 - so we have to realize that we are going
23:47 - to import a lot of built-in functions
23:49 - that are inside the flask package so one
23:52 - of them will be
23:53 - render template and the render template
23:56 - knows how to handle your requests and
23:59 - basically
24:00 - direct them into html files so let's go
24:03 - ahead here
24:04 - to our first line and import here one
24:07 - more function
24:08 - from our flask package and it will be
24:11 - render underscore
24:12 - template and as i have done that i have
24:15 - to specify here one more argument
24:17 - and for sure this will be the name of
24:19 - our html file
24:20 - so i will go here and type in home.html
24:24 - and once i have done that let's go to
24:27 - our terminal and
24:28 - make sure that our server is still
24:30 - running and it is
24:32 - so let's go to our web browser
24:35 - and navigate to our root url and then
24:38 - you can see that we
24:39 - have completed the render template
24:42 - function successfully
24:43 - so this is the proper way that you
24:45 - always want to work when you
24:46 - organize your flask projects you always
24:49 - want to create that
24:50 - directory that is called templates and
24:53 - then you want to start
24:54 - storing your html files in this specific
24:58 - directory okay so now that we
25:00 - understood how we can refer our routes
25:02 - into
25:03 - different html files it is about time to
25:05 - start working
25:06 - on styling our pages so our application
25:09 - could start be looking like a real
25:12 - website so in order to start styling
25:15 - we probably want to import one of the
25:17 - styling frameworks that are already
25:19 - existing out there so the most popular
25:22 - styling framework
25:23 - will be a styling framework that is
25:26 - called bootstrap
25:27 - and you may have heard about bootstrap
25:29 - already because this is the most
25:31 - popular framework to style your pages
25:34 - and the main reason that you want to use
25:36 - a ready styling framework
25:38 - is to save time by the process of
25:41 - styling
25:42 - each of our html elements because we
25:44 - really want to focus on the python side
25:46 - of our web application so you can import
25:49 - the bootstrap
25:50 - styling by going ahead to your web
25:53 - browser
25:54 - and basically searching bootstrap
25:56 - starter template
25:57 - and this starter template will help you
25:59 - to get started
26:01 - with all the requirements that are
26:03 - necessary
26:04 - to style your web pages so let's
26:06 - actually go
26:07 - into getbootstrap.com like i have
26:10 - already done here
26:12 - and go to that docs 4.5
26:15 - so this is right here is the version of
26:17 - bootstrap so you want to make sure that
26:19 - you
26:20 - use the same version as i do currently
26:22 - because this
26:23 - might lead to differences if you just
26:26 - work with another version
26:27 - so just make sure to work with 4.5 as
26:30 - well so i will allow myself to
26:32 - copy the entire html code from here
26:35 - and paste this in into our home.html
26:39 - that we have just created
26:41 - so i will open back our pycharm again
26:43 - and i will
26:44 - go inside our home.html and i will paste
26:48 - this
26:48 - over here now i know that it is a lot of
26:51 - html code to sync in
26:53 - but i'm going to go over each of the
26:55 - lines once
26:56 - so we can really understand how an html
26:58 - structure looks like
27:00 - so let's go to the first line here and
27:02 - make our phone
27:03 - a little bit smaller so we can see most
27:06 - of the parts of this file
27:07 - alright so at the top here at the very
27:10 - first two lines
27:11 - we have some lines that should be
27:14 - located in each html file
27:16 - so basically this specifies that this
27:19 - document is going to be within a type of
27:20 - html
27:21 - and the language that we are going to
27:23 - use is going to be english so this is
27:25 - why we see the e
27:26 - and n letters now each html
27:30 - file is divided into two
27:33 - important sections or what is so called
27:36 - html tags
27:37 - and those sections are called head
27:41 - and body now inside a head tag
27:44 - you are probably going to see a lot of
27:47 - things
27:48 - that are pretty much meta information or
27:51 - some
27:51 - imports that is pulling the styling
27:54 - and also some necessary information to
27:57 - change
27:58 - your tab name when you navigate for that
28:01 - specific
28:02 - page so for example if we
28:05 - see here inside our head tag another
28:08 - html tag that is called title so this
28:11 - should be
28:11 - our name of the tab that we currently
28:15 - looking on so i will show the result of
28:17 - this html file just in a second
28:19 - and we can verify that the tab name is
28:21 - going to be hello
28:23 - comma road so one more important line
28:26 - inside our head tag will be this line
28:29 - over here
28:30 - so you don't want to touch it at all
28:32 - because this is what importing the
28:34 - entire
28:34 - styling for our home.html file
28:38 - so you can basically see that by the
28:40 - link tag
28:41 - and the href attribute is the
28:44 - url that is probably pointing to that
28:47 - complex
28:48 - styling so this is something that is
28:50 - called css
28:51 - and the css allows pages to look a lot
28:55 - better
28:55 - and more dynamic so it is important to
28:58 - leave those lines over here
28:59 - okay so i will allow myself to close the
29:02 - head tag and let's talk about the body
29:04 - now the body tag is what is really
29:07 - important and what really matters when
29:10 - you want to display some
29:11 - information within your pages now you
29:14 - can see that we
29:15 - also have here the h1 tag that we used
29:18 - previously
29:19 - and you can see that its text is hello
29:21 - world as well
29:22 - and you know what let's actually go
29:24 - ahead and change this to home page
29:26 - so we can have a better understanding of
29:29 - how this is going to be
29:30 - look like now when you see the tag
29:34 - explanation mark and then the dashes two
29:36 - times
29:37 - it is basically saying that the
29:39 - following line is going to be
29:41 - a comment now you can already understand
29:43 - that because this is uncolored
29:44 - in pycharm so this is basically a
29:47 - comment
29:48 - and down here you can see two more tags
29:51 - that are called
29:52 - script now when you see script tags
29:55 - those
29:55 - are javascript libraries that are also
29:58 - going to be
29:59 - important and this is also a huge part
30:01 - when you design a webpage
30:03 - so you also don't want to touch that
30:05 - because it
30:06 - deals with all the functionality within
30:09 - our pages
30:10 - so you don't want to touch those script
30:12 - tags as well
30:13 - so just make sure to keep them in your
30:15 - file and you can also see that we
30:17 - have one more long comment here but you
30:20 - can see that we have script tags within
30:22 - those comments
30:23 - so what that means it means that we can
30:26 - go ahead in the future
30:27 - and uncomment those lines so we can make
30:30 - use of more javascript libraries
30:32 - but i will leave it now as it is okay so
30:35 - now we understood the structure of a
30:37 - basic html file
30:39 - let's go back to our web browser again
30:42 - and see the results of this page
30:45 - so i will go here and close this starter
30:49 - template and refresh our page then you
30:52 - can see that already the font
30:54 - of our page has been changed now i
30:58 - noticed that i
30:59 - zoomed in much in this page so i will
31:01 - basically revert this back
31:03 - okay so you can see that the font has
31:06 - been already changed
31:07 - and this is what bootstrap is
31:09 - responsible
31:10 - for so when we go ahead and add more
31:13 - html code
31:14 - you are probably going to see that in a
31:16 - nicer way because of this bootstrap
31:19 - starter template
31:20 - that we already imported now you can
31:23 - also
31:24 - see here that our tab name is hello
31:27 - comma world as we have said a few
31:30 - minutes ago
31:31 - so this is also something nice that we
31:33 - can control by ourselves
31:34 - and we will for sure do that in the
31:36 - future okay so i think this will be it
31:38 - about the explanation of how
31:40 - html page is looking like so as i said
31:43 - before i really want to keep on
31:45 - decreasing my
31:46 - explanations about each of the html
31:48 - lines that i'm going to
31:49 - write in so we will have a better focus
31:52 - on the python side of this flask
31:54 - application
31:54 - but for sure if you have any questions
31:56 - about the html
31:58 - in general make sure to comment them out
32:00 - so i can read them off and respond you
32:03 - all right so let's go back to our market
32:05 - dot py
32:06 - and take care of something that is quite
32:09 - bothering me
32:09 - until now now you can see that our
32:12 - homepage
32:13 - is basically rendered when we went ahead
32:17 - and did not specify any extra
32:19 - information after our ip address and our
32:22 - poll
32:22 - now in most of the websites if you go
32:25 - ahead and type in slash home here
32:27 - basically this will be responsible to
32:29 - render you the same result
32:31 - like we saw previously now in order to
32:34 - handle
32:35 - two routes for a single html file
32:38 - it is as easy as going down to our
32:42 - pycharm
32:43 - and right in here one more decorator
32:46 - so it will be app dot
32:49 - route and then this time we will write
32:52 - here
32:53 - slash home and if we want to test this
32:56 - out
32:56 - we can basically refresh our page and
32:58 - then you can see that we see the same
33:00 - result like previously
33:01 - and if i delete everything from here the
33:04 - result is going to be same
33:06 - so this is something that you want to
33:08 - keep on your web pages because it makes
33:10 - sense to display the home page
33:12 - in both of the cases okay so now that we
33:14 - have
33:15 - understand how we can design our pages
33:18 - nicer
33:18 - it is about time to give our page a
33:21 - little bit
33:22 - nicer style rather than displaying a
33:24 - home page so we will start by adding a
33:26 - navigation bar
33:27 - so our users could have the option to
33:31 - navigate through different pages so
33:34 - the page that i will bring in here
33:37 - will be my personal website and
33:40 - throughout
33:40 - this video or in the future
33:44 - episodes i am going to go into my
33:47 - personal website a lot
33:48 - and copying some html code snippets
33:52 - that will help us to write html a little
33:54 - bit faster
33:55 - so i'm going to include a lot of html
33:58 - code snippets throughout
33:59 - this tutorial so just make sure to go to
34:03 - the description of that video
34:05 - and navigate through the url that is
34:07 - going to be specified
34:09 - as the code snippets url and get those
34:12 - code snippets so it will be much easier
34:14 - to you to follow this video
34:16 - so for this example to add a navigation
34:19 - bar
34:20 - i will go here and select the second
34:23 - part of this tutorial
34:24 - and i will basically go and navigate for
34:27 - our code
34:28 - and then you can see that as the first
34:30 - code snippet
34:31 - i have here the code snippet of navbar
34:34 - so i will allow myself to copy
34:36 - everything here
34:37 - and paste this in just under
34:40 - our body tag so let's fix the
34:43 - indentation here
34:44 - and paste this in and now we should see
34:48 - a nice navigation bar inside
34:51 - our homepage so let's fix the
34:54 - indentation here a little bit more so we
34:57 - can have a better understanding
34:59 - which tag is inside another tag so i'm
35:02 - just
35:02 - going to fix that and i think that will
35:06 - be
35:06 - enough okay so what let's
35:11 - delete those indentations and now i
35:14 - think we are fine
35:15 - okay so now i will save this up and go
35:18 - to our website and refresh
35:21 - that out and then you can see that we
35:23 - have this nice navigation bar
35:26 - up top here and then you can see that we
35:29 - have its
35:30 - name which is called gymshade coding
35:33 - market
35:34 - now we can change this whatever text we
35:36 - want we just
35:37 - need to find this specific html tag
35:40 - that is responsible to display this text
35:43 - so
35:44 - let's actually go ahead and find it so
35:45 - we can have a better practice
35:47 - of how we can find specific html tags
35:51 - so i see that we have this text here and
35:54 - i can basically go ahead and change this
35:56 - to
35:56 - flask market and if i save this up and
35:59 - refresh it you can see that the changes
36:01 - are affected now you can see that we
36:04 - have this navigation bar
36:06 - but we don't have any extra links that
36:08 - we can click on them
36:10 - and actually navigate through different
36:12 - pages
36:13 - so to add those links we have to go to
36:17 - our python
36:18 - and basically add some optional links
36:21 - so that the user can see which pages he
36:24 - can
36:24 - navigate so to ease on that process
36:28 - i can also go to my website
36:31 - i mean to my original website and then
36:33 - copy the
36:34 - second code snippet here which is called
36:38 - navbar dash options i mean underscore
36:41 - so let's go back to our pycharm and we
36:44 - want to paste this
36:45 - in right here where we see
36:48 - a div tag which is with a class
36:52 - that is named as collapsed navbar
36:54 - collapse okay so we will paste this in
36:57 - over here and once we do that
37:00 - then we should see a better result of
37:03 - the items that
37:04 - should be available inside our
37:06 - navigation bar so if we
37:08 - go to our website and refresh
37:11 - that out then we can already see a
37:13 - better result of how
37:14 - a real navigation bar looks like and we
37:17 - can see that we have home
37:19 - market and we have login and register
37:22 - now for sure when i go ahead and click
37:24 - on them
37:25 - it should not lead us to any different
37:27 - page
37:28 - because we did not configure those
37:30 - routes yet
37:31 - and we will do them in the near future
37:34 - now
37:35 - just to have a better understanding what
37:37 - is going on inside the second code
37:39 - snippet that we have just copied
37:41 - and pasted you can see that we have some
37:44 - li tags over here and this
37:47 - is a shortened version of a list tag
37:50 - so you can see that each one of them
37:52 - just responsible to
37:54 - display some item that is available
37:57 - inside our navigation bar
37:58 - so we have here this which is basically
38:02 - a link to
38:03 - our home and we have that one which is
38:06 - going to be the link for the market in
38:08 - the future
38:09 - and as you could pay attention we have
38:11 - in the right side
38:12 - the login and register which we will
38:15 - configure
38:16 - in the future as well okay so one more
38:18 - customization that i want to apply
38:21 - for this home page is to return it into
38:24 - a dark mode
38:25 - now in order to allow the page to be in
38:28 - dark mode
38:28 - basically you have to override some
38:31 - styling
38:32 - attributes and then your page will be
38:34 - displayed in a background color of black
38:36 - and all the text
38:37 - that you are going to provide are going
38:40 - to be displayed as
38:41 - white colors so in order to accomplish
38:43 - that i'm going to
38:45 - navigate down in this home.html file
38:48 - and let's make our font a little bit
38:50 - bigger here so you can have a better
38:52 - look
38:52 - and right after our closure of the body
38:55 - tag
38:56 - i'm going to open up a new tag that is
38:59 - named
39:00 - style and i will close this up and
39:03 - between those i am going to provide some
39:06 - extra attributes
39:08 - that will override the attributes of our
39:11 - entire body
39:12 - so it will be something like the
39:14 - following so we will start by typing in
39:17 - body
39:17 - and then we will open and close curly
39:20 - brackets
39:20 - and press enter here so we can enter
39:22 - inside our
39:24 - brackets and then here we will override
39:26 - the two
39:27 - attributes and the first one will be
39:29 - background
39:30 - dash color and i'm going to add here a
39:32 - column sign as well
39:34 - and this will be equal to a hexadecimal
39:37 - value
39:38 - that i already know that it is going to
39:40 - display a back color
39:41 - so if you don't know what an hexadecimal
39:44 - value is
39:45 - it is basically another way to define
39:48 - colors
39:48 - rather than just text so this is pretty
39:52 - much equal to
39:53 - writing here black inside a string
39:56 - but this is going to make it a little
39:58 - bit more
39:59 - close to gray rather than just black so
40:02 - this is why i defined it
40:04 - with an hexadecimal value now in order
40:07 - to
40:08 - close this attribute we should add a
40:10 - semicolon here
40:11 - and our second attribute that we want to
40:14 - override
40:15 - will be color and that time i will give
40:18 - it as a pure text so it will be
40:20 - white now once i go ahead
40:24 - and save this file and go back to
40:27 - our page and refresh that out
40:30 - then you can see that our page is turned
40:33 - into
40:33 - dark mode so make sure that you apply
40:36 - those configurations as well
40:37 - in your home.html file in order to turn
40:40 - your website into a cool looking dark
40:43 - mode and i just realized that our tab
40:45 - name
40:46 - over here is still hello world so let's
40:49 - go ahead
40:49 - and change this to finalize our styling
40:53 - so i will go back to our pycharm and
40:56 - let's find this title tag that is
40:59 - responsible to display the tab name so i
41:02 - will expand our head tag back
41:04 - and we should change this into something
41:07 - that they are currently in the homepage
41:10 - so
41:11 - let's change this to homepage and remove
41:14 - the explanation mark
41:16 - and let's separate those words here and
41:19 - save that out and
41:20 - if we go ahead and refresh this then you
41:23 - can see that our tab name
41:24 - is changed so i think that will be it
41:27 - for the
41:27 - styling part of our website and in the
41:30 - future for sure we will add some extra
41:33 - elements
41:33 - to make our site even nicer
41:39 - alright so now it makes sense to start
41:42 - working on some new python code to
41:44 - deliver
41:45 - a new items page to our users so this is
41:48 - why i will be starting to create here a
41:50 - new route
41:51 - and we will render a new html template
41:54 - so
41:54 - let's go ahead and do this so i will
41:57 - jump to a new line here
41:59 - and we will start creating a new route
42:01 - so i will call
42:02 - the app dot route decorator here
42:06 - and it quite makes sense to send our
42:08 - users to a url that is looking like
42:10 - slash
42:11 - market so i will write it like this and
42:14 - i will continue on and create
42:16 - our function and we will name it market
42:19 - page and currently we will receive
42:21 - nothing as parameters and we will go
42:23 - ahead here and
42:24 - return vendor template and we will
42:27 - send them to a new html file that is
42:30 - called market.html
42:32 - now i know that we did not create this
42:34 - yet so
42:35 - let's go ahead and do this so as you
42:37 - remember previously
42:39 - we just went inside our templates
42:41 - directory
42:42 - and we created an html file
42:45 - and we should name it market so this
42:48 - route could understand where
42:49 - we should send our users so let's go
42:52 - ahead and
42:53 - name this market and if you use pycharm
42:56 - then you will receive this
42:57 - auto-generated html
42:59 - now to make our lives easier a little
43:02 - bit
43:02 - i'm going to copy everything from the
43:04 - home.html
43:06 - and i'm going to customize it a little
43:08 - bit so we can understand
43:09 - that we are inside the market page and
43:12 - not inside the home page
43:14 - so i will go to our home page here
43:17 - and i will grab everything that is
43:20 - inside the home.html and i will paste
43:23 - this in inside our market page and let's
43:26 - make the font a little bit bigger here
43:28 - now several changes that it might be a
43:30 - great idea to
43:31 - done here is for sure this title tag
43:34 - that
43:35 - is changing the tab name so let's change
43:38 - this to
43:38 - market and i will scroll down here
43:42 - let's minimize this navbar and we will
43:45 - change this home page h1 tag to
43:48 - market page so we can understand where
43:51 - we are currently at
43:52 - now for myself here the website is
43:55 - currently not running
43:56 - so let's go ahead and complete the steps
43:58 - that we are required to
44:00 - run our website quickly so set flask
44:03 - app equals to market dot py
44:06 - and we also have to set the flask
44:08 - underscore debug
44:10 - to one and now we are ready to go ahead
44:13 - and execute
44:14 - flask run and as we have completed this
44:17 - let's go to our web browser
44:19 - and try to navigate through the slash
44:21 - market route that we have just created
44:24 - and we can see that the results are
44:26 - quite great so now we are ready to
44:28 - work on to see how we can send
44:31 - information
44:32 - to this html from our route now to
44:36 - do this i am basically going to go back
44:39 - to my pycharm
44:40 - and we are going to work on the route of
44:43 - market that we have created and we will
44:45 - try to send some random data
44:47 - from this route to our html and see how
44:50 - we can access it
44:51 - now the way we can do this is as easy as
44:55 - going here and
44:56 - sending more arguments that we will be
44:59 - accessing
45:00 - by their keys so let's go ahead and see
45:03 - an example for that
45:05 - so let's write in here item underscore
45:08 - name equals to phone and i will close
45:12 - the parameters here
45:13 - back again and let's make this to be
45:17 - in the pip 8 style and now the way that
45:20 - we can access this
45:22 - is by this key name item underscore name
45:26 - now it makes sense to go back to our
45:28 - market page now and see how we can
45:30 - see the value of the item name argument
45:34 - so i will go to our market and actually
45:37 - to
45:37 - access that information we have to start
45:40 - using some new web templating
45:42 - engine that is called jinja template now
45:45 - this might be sound weird what i'm
45:46 - saying now
45:47 - but if you remember when we went ahead
45:50 - and
45:51 - installed the flask library we kind of
45:53 - saw a lot of secondary libraries
45:55 - that the flask library is required to
45:58 - have them
45:59 - and one of those libraries are actually
46:01 - named jinja
46:03 - now as i said jinja is a special web
46:06 - templating
46:07 - syntax that we are able to access
46:10 - through html
46:11 - because it is specially designed for
46:14 - python
46:14 - web frameworks so to do this i am going
46:18 - to
46:18 - go here and let's open here a new html
46:21 - tag
46:22 - for example a p tag so it will be a new
46:24 - paragraph
46:25 - and the way we can access this is by
46:28 - calling
46:28 - the variable syntax and that will be
46:32 - by double curly brackets opening and
46:35 - closing like the following
46:36 - now as i have set those curly brackets
46:39 - here
46:40 - we are allowed to access the information
46:43 - that we have sent
46:44 - from our route and as you remember we
46:46 - have sent
46:47 - the key value of item underscore name so
46:50 - if i was to go inside our curly brackets
46:54 - and type in here item underscore name
46:57 - then we should see the value of this
46:59 - variable on our page
47:01 - so to test this out i will go to
47:04 - my web browser and refresh it and then
47:06 - you can see that we
47:08 - see the value of the item underscore
47:11 - name so this is a quite great
47:13 - achievement and i hope that you
47:14 - understood all the process of how we can
47:16 - display information
47:18 - from our routes because to be honest
47:20 - when i saw the ginger syntax first i
47:22 - really was shocked and did not
47:24 - understand anything but i hope that this
47:26 - was a clear explanation
47:28 - and that you understand correctly why we
47:30 - have to include
47:31 - ginger syntax in our html templates
47:34 - so i will go back to our html file here
47:38 - and continue from here okay so as you
47:40 - see i'm back on my
47:42 - market.py file and now we have to look
47:45 - forward to
47:46 - how we can display multiple items on our
47:48 - website
47:49 - now to do this we can basically change
47:52 - the value that we
47:53 - send to a list now i already have some
47:56 - information that i already generated up
47:59 - and this is basically a list of
48:01 - dictionaries so we will be able to
48:03 - display better
48:04 - data on our website when it comes to
48:06 - displaying some random items
48:08 - so to bring this code snippet that i
48:10 - already have generated up
48:11 - let's go to my website again and
48:14 - navigate
48:15 - through the third part of this flask
48:18 - series and bring these items list of
48:20 - dictionaries called snippet
48:22 - now as you can see we are only having a
48:24 - long list
48:25 - with three dictionaries here so let's
48:28 - copy this
48:29 - up and paste this inside
48:32 - our market page now let's have a quick
48:34 - look in this long
48:35 - list here basically what we are having
48:37 - is three
48:38 - dictionaries that they are happening to
48:41 - have the same keys
48:42 - so we have id for this and this and that
48:46 - and also the name key and as well as
48:49 - barcode and
48:50 - a price now once i have copied
48:53 - this out it might be a better idea to
48:55 - change our send information
48:57 - in this renderer template and i will
49:00 - basically delete this item underscore
49:02 - name equals to phone
49:03 - and i will change this up to items
49:06 - equals to items so now we will be able
49:10 - to access this entire list of items
49:13 - with calling the variable of items
49:16 - because this is what we have named
49:18 - over here now to test this out again
49:21 - we can basically go to our market.html
49:25 - and change this to items so
49:28 - if we save our file and refresh
49:31 - our website then you can see that we see
49:34 - this exact
49:35 - dictionary i mean the list of
49:37 - dictionaries
49:38 - over here now you can pay attention that
49:41 - this looks quite ugly
49:42 - so to style this up i am going to insert
49:46 - these values inside a nice designed
49:49 - bootstrap table
49:50 - so let's go ahead and do this all right
49:52 - so we will go back to our
49:55 - market.html file and in here
49:58 - we will just delete this paragraph for
50:00 - now and we have to use an html tag
50:02 - that is named table and inside here i
50:05 - have to provide some information
50:07 - regarding to my tables rows and columns
50:10 - and to save this work from us i already
50:13 - have generated a table that is going to
50:15 - look quite nice
50:16 - and we are going to add to it some extra
50:19 - information
50:20 - to design our rows and columns so to
50:23 - bring this code snippet
50:24 - here we will go to my website here and
50:27 - we will bring this bootstrap table code
50:29 - snippet from the third part
50:31 - so i will get this html code snippet
50:35 - and here i will just replace this with
50:38 - those table tags so
50:40 - if we copy this then we can see that we
50:42 - have here the table tag again
50:44 - but we have an attribute that we did not
50:46 - talk about it before
50:48 - basically when you see the class
50:50 - attribute inside an html file
50:52 - it basically refers to bootstrap classes
50:55 - that
50:55 - their main goal is to give a nicer
50:58 - design
50:58 - to your specific html templates so for
51:01 - example if we see a class that is named
51:03 - table hover then we should see a special
51:06 - effect when we
51:06 - bring our mouse and hover inside our
51:09 - table and if we see table dark then you
51:11 - can probably understand that this table
51:13 - is going to be
51:14 - in dark design so in here we
51:18 - have our table head and table body
51:21 - and as you can see i already commented
51:24 - here that we have to create certain
51:26 - columns here
51:27 - now since our dictionary includes some
51:30 - more than one key values then it might
51:32 - be a great idea to create more columns
51:34 - to our table so this is why i will go
51:37 - down here and i will start copying and
51:40 - pasting this code snippet
51:42 - three more times and i will replace
51:45 - those
51:45 - by the values of the keys that we have
51:48 - inside our dictionaries
51:50 - so if you remember we had a dictionary
51:52 - with a key of name
51:54 - and we had an id so i did not touch this
51:56 - column at
51:57 - all and i'm going to change this to
52:00 - barcode
52:01 - and i'm going to write here price
52:04 - as well so as we have done that the way
52:08 - that we can
52:09 - fill in rows to our table will be
52:12 - easily by going down to the table
52:15 - body and writing some extra information
52:19 - inside those table row tags so tr is a
52:23 - shortened version
52:24 - of table row now as you can see we have
52:27 - here
52:27 - some more tag that is called table data
52:30 - and this is basically a reference to the
52:34 - first column that you see here
52:37 - so if we are happened to copy this out
52:41 - and paste this in then since this is the
52:44 - second table data inside this table row
52:48 - then this is going to be located right
52:50 - under
52:51 - the column of name so this is why it is
52:54 - a great idea to change this to value for
52:57 - name and i'm going to repeat this two
53:00 - more times so this will be
53:01 - barcode and this will be
53:05 - um price okay so as we have done that
53:08 - let's test the results inside our
53:11 - website so i will go to my web browser
53:13 - and we will navigate through our market
53:16 - page
53:16 - and refresh that out and you can see
53:20 - that we see here a nice table and you
53:23 - can see that
53:24 - those are the headers as you can pay
53:26 - attention that its color is a little bit
53:28 - more bold
53:29 - and we can see that we have here
53:32 - information
53:33 - that is inside our table so it is quite
53:36 - great achievement
53:37 - okay so now that we have done this we
53:40 - still don't
53:41 - display the real information that we
53:43 - have sent
53:44 - from our market page route so let's
53:47 - bring up this for a second to
53:48 - remember this so i will open back our
53:51 - pycharm
53:51 - and i will go to market.py for a second
53:55 - so if you remember we sent this items
53:57 - list
53:58 - towards our market.html but we did not
54:02 - display the actual values
54:04 - of those dictionaries that are inside
54:07 - the items list so to do this
54:10 - we have to iterate over this items
54:13 - list over here and once we iterate over
54:17 - this list then we have to access each of
54:20 - those
54:21 - keys in some way so
54:24 - let's see how we can do this okay so
54:25 - let's go back to our market
54:27 - dot html well i'm not going to touch the
54:31 - html code
54:32 - inside our table head because in table
54:35 - head we done a great
54:36 - job because we only want to display here
54:40 - the columns names so i'm not going to
54:42 - touch it at all so let's
54:44 - minimize the table head for a second and
54:47 - now
54:47 - as you paid attention each of our tr
54:50 - tags are responsible to create a new row
54:53 - inside our table so it might make sense
54:57 - to
54:57 - start to launch here a for loop and
55:00 - start iterating over our items but how
55:04 - we are going to do this with the
55:05 - ginger template so if you remember the
55:07 - ginger template is that special template
55:09 - that allows us to access the information
55:11 - that arrives from the route
55:14 - so i'm going to write here new ginger
55:16 - syntax that we did not see
55:18 - so besides doing curly brackets twice
55:22 - i am going to replace the inner curly
55:25 - brackets with percentage signs and
55:28 - what that means it means that you are
55:31 - going to
55:32 - call a logic code so if until now we
55:35 - were able to access
55:36 - variables that are arriving from ginger
55:39 - syntax
55:40 - this time when you see the percentage
55:42 - signs basically you can
55:44 - write a code that is quite looking like
55:47 - a python code
55:48 - but this time it is not going to be
55:50 - variable names and stuff like that
55:52 - besides those are going to be if
55:54 - statements
55:55 - for loops and stuff related to actual
55:59 - logic so in here i can go with
56:02 - four item in
56:05 - items now the reason i write here items
56:08 - because this is
56:09 - accessible from the market route and
56:13 - to close our for loop here i will
56:16 - call those code blocks once again
56:19 - and i will right here and four
56:22 - together combined so this is the exact
56:24 - syntax of how you can
56:27 - bring in a for loop inside your html
56:29 - template
56:30 - and now i'm going to cut this entire
56:34 - tr html block here and i'm going to
56:37 - paste
56:38 - this in inside this for loop that we
56:41 - have just created
56:42 - so once we paste this in let's organize
56:45 - the
56:46 - indentation for a second great
56:49 - so now we should see this table row
56:52 - three times and the reason we should see
56:54 - this three times because we have three
56:56 - dictionaries in our items list
56:58 - so if we save this and go here and
57:02 - refresh that out
57:03 - then this is the exact result that i was
57:05 - talking about
57:06 - so again the reason we see this three
57:08 - times because we have three dictionaries
57:10 - inside our items list okay so
57:12 - our next problem is quite clear and the
57:15 - problem is that we
57:16 - don't see the values yet although we
57:19 - iterate over
57:20 - this items list so to access each of the
57:23 - keys that are inside those dictionaries
57:26 - we can basically go and open our pycharm
57:29 - back
57:29 - and replace those strings here that are
57:32 - inside the html tags
57:34 - with the actual value so to do this
57:37 - i can basically delete this up and call
57:41 - the variable block again by typing in
57:44 - curly brackets twice
57:45 - and i can basically type in here item
57:48 - dot
57:48 - id now the id is the key name of the
57:52 - dictionary
57:52 - and the item is the variable that i'm
57:54 - iterating on so this is why i can access
57:57 - this item variable
57:58 - and i can change all those three table
58:01 - datas here to the same
58:02 - as this one so let's go ahead and do
58:05 - this so i will
58:06 - replace this with item dot
58:09 - name and i will replace this
58:13 - with item dot
58:17 - barcode and i can replace this for sure
58:20 - weight item dot barcode
58:23 - and we will close our curly brackets and
58:26 - create a space here
58:28 - so sorry this should be price okay so we
58:30 - should change this to price
58:31 - and now we can go to our html page again
58:35 - and refresh it then you can see the
58:38 - actual information
58:39 - that we meant to display from the real
58:42 - beginning okay so
58:43 - this is great achievement so if we are
58:46 - happened
58:47 - to add some more information inside our
58:50 - market.py
58:51 - then this page is for sure going to be
58:53 - updated automatically so
58:55 - one more final thing here to customize
58:57 - this page a little bit better
58:59 - we can add here a dollar sign or
59:01 - something that the
59:02 - customer that uses this website could
59:05 - understand that we are referring to
59:06 - actual money
59:08 - so we can basically go back here and add
59:11 - here the
59:12 - dollar sign and see the effect of that
59:15 - over
59:15 - here all right so one more final thing
59:18 - that i'd like to do
59:19 - in this table is enabling our users the
59:22 - options of seeing
59:23 - more information regarding to a specific
59:25 - item and also the option of purchasing a
59:28 - specific item
59:30 - because we actually want to simulate a
59:32 - situation
59:33 - where we have items in market so to do
59:36 - this
59:36 - we can basically create one more column
59:38 - here and we can name it
59:40 - options and we can add two more buttons
59:43 - in each of our item
59:44 - rows so let's go ahead to pycharm and do
59:47 - this so i will open
59:49 - my pycharm here and i will find the
59:51 - table that we
59:53 - have created so as you remember our
59:55 - columns are located
59:57 - inside an html tag that is called t head
60:00 - so we will expand this back and we will
60:04 - add here
60:04 - one more column so we will create a th
60:08 - tag and our scope will be
60:12 - col so this is a shortened version of
60:14 - column
60:15 - and here we will add options and so
60:18 - we added the column here and now we have
60:21 - to add
60:22 - its value in each of our rows so
60:25 - to do this we can basically go here to
60:28 - our table
60:29 - body and find our for loop and
60:32 - add here one more td tag which is table
60:36 - data and over here i will basically hit
60:39 - enter
60:39 - so we can add more html elements and i
60:42 - will call the button element to
60:45 - display a nice looking button to
60:48 - show our users the options that he can
60:50 - do
60:51 - so let's create here the button tag and
60:54 - over here i want to
60:55 - customize this button a little bit so i
60:57 - will call the class attribute
60:59 - and inside the strings here i will
61:02 - specify
61:03 - the classes so i will write in here
61:06 - several classes that i already know that
61:08 - they are going to customize this button
61:10 - a little bit better
61:11 - so we will write here button like this
61:14 - and we will also write button dash
61:17 - outline
61:18 - and we will also write here button dash
61:21 - info now again those classes are made
61:24 - for
61:25 - specialize our styling in each of our
61:27 - html tags
61:28 - so let's go ahead and close our button
61:30 - tag and you can see that we already have
61:33 - the closure for this button
61:35 - and so now i want to write here a text
61:38 - like more info and i want to scroll down
61:42 - a bit so you can see
61:43 - what i am doing here and so now that we
61:46 - have completed
61:46 - this button basically i want to repeat
61:49 - the same process
61:50 - to allowing our users to purchase that
61:53 - specific item
61:54 - so it will be the button tag again and
61:57 - this time
61:57 - our classes are going to be again to btn
62:01 - and button dash outline and that time i
62:04 - will type in here button dash success so
62:07 - the differences between button dash info
62:09 - to button dash success the button info
62:12 - is going to
62:13 - fade into our button a more blue color
62:15 - and the button success will fade in
62:18 - the green color so when i go ahead and
62:20 - close those tags
62:22 - i can basically write in here purchase
62:26 - this item now let's go ahead and
62:30 - test this out so i will open my browser
62:32 - again and i will
62:34 - refresh our page and you can see that we
62:37 - receive the options
62:39 - right here so this is quite great
62:42 - now for sure if i click on one of those
62:45 - buttons
62:45 - nothing is going to happen because we
62:48 - did not configure the functionality
62:50 - behind those buttons
62:52 - but we will do this in the future so
62:54 - don't worry about it right now
62:58 - alright so previously we were able to
63:01 - display a nice looking
63:02 - market page by writing this html code
63:06 - and it was responsible to display a nice
63:09 - looking page
63:10 - with several items now if you remember
63:14 - to display this nice looking page i went
63:17 - for my home.html and i copied
63:20 - the entire code from here and i pasted
63:23 - in
63:23 - inside mymarket.html and then later on
63:26 - we
63:27 - gave it our own customizations now if we
63:30 - consider
63:31 - a situation that our website could be
63:34 - divided into
63:34 - 10 or 20 different pages that will mean
63:38 - that we have to copy and paste some
63:40 - basic html code
63:42 - every time that we want to come up with
63:44 - a new page
63:45 - and the reason is we want to keep
63:47 - certain elements in each page
63:49 - that we display so for example if you
63:53 - see in the home.html we
63:56 - happen to have this long nav
64:00 - html tag now it is obvious that we want
64:03 - to display the navigation bar
64:05 - in each page that our users navigate on
64:08 - because we want to allow our users to
64:10 - see the pages that
64:12 - they can navigate so the main point here
64:15 - is to think about some method that will
64:18 - avoid copying and pasting a lot of html
64:21 - code
64:21 - and to overcome this we have something
64:23 - that is called
64:24 - template inheritance now the idea behind
64:27 - that
64:28 - will be to have one base template html
64:31 - that we will always inherit from and
64:34 - that way
64:34 - we will save a lot of copying and
64:36 - pasting html code
64:38 - so in order to achieve this what we have
64:41 - to do is creating one more html template
64:44 - and it makes sense to give it a name
64:46 - like base
64:47 - layout template whatever you like to and
64:50 - then basically put in there some html
64:52 - code
64:53 - that will be always displayed to our
64:56 - users
64:57 - so let's go ahead and do this okay let's
64:59 - go inside
65:00 - our template directory and create an
65:03 - html file
65:04 - that we will name it base so let's
65:07 - go here and select new html
65:11 - file and i will call it base as i said
65:14 - and i will delete everything from the
65:15 - auto generated html
65:17 - now as you could guess i already came up
65:20 - with a base dot html
65:22 - that is going to save us a lot of time
65:24 - from writing some base template html
65:27 - now in order to get that base.html we
65:30 - will basically go to
65:31 - my website and bring it on here so we
65:34 - will go to the fourth part of this
65:37 - entire tutorial
65:38 - which is happen to be right there and we
65:41 - will select the code and
65:42 - bring in the base.html and for sure once
65:45 - i paste it i will go over what is going
65:48 - on here
65:48 - so we have our base template
65:52 - and in the next few minutes we are going
65:53 - to show how we can inherit the entire
65:56 - html code
65:57 - from this base template now let's see
66:00 - what
66:00 - is going on inside the head tag now in
66:03 - the head tag we have the same
66:04 - tags that we were happened to copy
66:07 - previously in this tutorial from the
66:09 - bootstrap starter template so
66:11 - there's nothing really different in here
66:13 - only what i have done here
66:15 - is named our title base title so we can
66:18 - see the effects of it
66:19 - now if we close up our head tag and
66:22 - focus on what is inside the body
66:24 - then we can see that i already have
66:26 - commented out the location where we want
66:28 - to
66:29 - see the navigation bar and also i also
66:32 - wrote here one more comment
66:33 - for the future contents that we are
66:35 - going to add to this base template so
66:37 - that way we can understand where we have
66:39 - to insert different html templates
66:41 - now down here again we see some
66:43 - javascript libraries that we import like
66:45 - we saw previously
66:47 - and this style here is again here to
66:51 - allow our site to be in dark mode so if
66:54 - you paid attention
66:55 - then we see that background color inside
66:57 - the body
66:58 - and we also see the color which is the
67:00 - foreground color as
67:02 - white so let's also close our style tank
67:04 - over here now
67:05 - once we understood what is going on
67:07 - inside our base.html
67:09 - it is a great idea to go inside our
67:12 - home.html
67:13 - and try to inherit whatever is inside
67:16 - this base.html
67:18 - that we have just created so in order to
67:20 - ease our lives here i will use the
67:22 - future of pycharm to split
67:24 - some html files into two or three
67:27 - different displays
67:28 - so let's go ahead and do this very
67:29 - quickly so i will click here
67:32 - split vertically and on our left pane
67:36 - we will keep our base.html and
67:39 - on our right pane we will display the
67:41 - home.html okay
67:43 - so now i will basically delete
67:44 - everything from the home.html
67:47 - and i will use some special ginger
67:49 - syntax to
67:50 - inherit the code that is inside the
67:54 - base.html
67:55 - so that will be by the code block
67:58 - syntax we saw previously so it will be
68:01 - curly brackets and then the percentage
68:03 - signs
68:03 - in that case and then we will use a
68:05 - function that is called
68:07 - extends so we are extending this base
68:10 - template
68:11 - and basically here inside our string we
68:14 - can specify the name of the html file
68:16 - that we want to extend from
68:18 - because all the html files are located
68:20 - in the same directory
68:22 - that we called templates so i will go
68:24 - here and write in
68:26 - base.html and once i have done that
68:30 - i should expect to see pretty much
68:31 - nothing in our home.html
68:33 - so let's go ahead and see this in action
68:35 - so i will go to
68:37 - our website and i will basically
68:40 - navigate for our home page
68:41 - and then you can see that we are happen
68:43 - to have this black page
68:45 - so now that we achieve this basically
68:48 - now we can decide which content we want
68:50 - to
68:50 - put inside base.html and which content
68:54 - we want
68:54 - our inside home.html so for example
68:58 - our long navigation bar html tags
69:01 - are must located inside our base.html so
69:05 - let's go ahead and do
69:06 - that so i will go to our pycharm and
69:09 - let's actually bring this long
69:10 - nav tag from the market.html so i will
69:14 - locate our market.html over here
69:18 - so let's grab our navigation bar
69:21 - so that will be the entire tag that is
69:24 - called
69:25 - nav and i will copy that out and i will
69:29 - paste it in where we located this
69:32 - command which is says
69:34 - navbar here so once i paste this then
69:37 - we should see a great result where
69:40 - our base template is having the
69:42 - navigation bar
69:43 - so let me customize the indentation a
69:47 - little bit and i think this looks okay
69:49 - so we will go to our website again
69:52 - and we will refresh that out and then
69:54 - you can see that our navigation bar
69:57 - is back up again now the beauty in that
70:00 - process
70:01 - is that no matter which html file i'm
70:03 - going to create in the future
70:05 - all i have to do is using this extends
70:08 - method
70:08 - that we saw just a minute ago and then
70:10 - each time i do this
70:12 - then we will see our navigation bar so
70:14 - this is a quite great achievement
70:16 - okay so even though we have completed
70:18 - the inheritance successfully
70:19 - there are still some problems left that
70:21 - we have to understand how we can figure
70:23 - out
70:23 - for example one of them will be the fact
70:26 - that
70:27 - you see that our tab name is base title
70:31 - now we are inside our home page so it
70:34 - does not make sense to display to our
70:36 - users
70:36 - base title each time so what i mean by
70:39 - that
70:40 - is that we have to figure out how we can
70:42 - differentiate between
70:44 - content that we want to display up on
70:47 - our each page
70:48 - to a content that is going to be unique
70:50 - per page
70:51 - so let's go ahead and do this so i will
70:54 - open my pycharm here
70:56 - and basically on the left pane we got
70:58 - our base template and on the right pane
71:00 - the home.html again
71:01 - and now what i can do is basically
71:04 - marking any area
71:05 - in our template that is going to be
71:08 - unique per page
71:09 - so the way i can do that is as
71:12 - easy as going for example inside our
71:15 - title tag
71:16 - and write in here some special ginger
71:19 - syntax
71:20 - so it will be by using the brackets
71:23 - and then the percentage sign and then we
71:26 - have to use the function
71:27 - that is called block so i will use
71:30 - this function and i will give it a name
71:33 - like
71:34 - title and i will close our block by
71:37 - using and block now if what i have done
71:41 - until now
71:41 - is quite weird for you i can totally
71:44 - understand that but you will get that in
71:46 - a few minutes
71:46 - so once i have done this then i am
71:49 - allowed to go
71:51 - inside our home.html and
71:54 - call this block of code by simply
71:57 - writing block title and then inside here
72:01 - i can write anything that i want and the
72:04 - content that i'm going to put in right
72:06 - after our blog title
72:08 - is going to be replaced and use the
72:11 - content
72:12 - that we write in home page so let's see
72:14 - that in action so i will
72:16 - right here and block again just to close
72:19 - our block and then inside here let's
72:22 - write a text like
72:23 - home page and use the indentation here
72:26 - so it will give it a cleaner look and
72:28 - once i have done that
72:29 - we can basically save this and go to our
72:32 - website again
72:33 - and once i refresh it then you can see
72:35 - that our tab name
72:37 - is changed to home page so the ability
72:39 - to
72:40 - mark certain areas in our base template
72:43 - as
72:43 - unique per page areas is quite great
72:46 - because it is going to allow us to
72:48 - write more organized code and now
72:50 - basically we can use this block
72:52 - functions
72:53 - in more areas inside our base dot html
72:56 - and then we can call those blocks in our
72:59 - different pages
73:00 - inside our project so i will go to our
73:03 - python
73:04 - and declare here one more area that is
73:07 - going to be
73:07 - as the area of our body in each page
73:11 - so we can basically go here and
73:14 - use the block again and now we can name
73:19 - it something like
73:20 - content so let's fix our indentation
73:23 - here
73:24 - like that and then we can write again
73:28 - and block and once i have done
73:32 - that we can basically go back to our
73:35 - home.html
73:36 - and try to call this content block again
73:39 - and write whatever that we want to write
73:42 - to display it inside our homepage so
73:45 - i'm going to go back to my home.html
73:48 - again
73:49 - and i'm going to use the block
73:52 - content and then i will close
73:55 - our block by simply saying end block
73:59 - and now we can write a text like
74:02 - this is our content for the
74:05 - home page and once i save this
74:08 - then we should see the this is our
74:10 - content for the home page
74:12 - only in our home page so let's
74:15 - test this out so once i refresh that out
74:18 - then you can see that
74:20 - we see this text right here all right so
74:23 - now that we have applied the inheritance
74:26 - correctly for our homepage
74:27 - let's also do this for our items page so
74:30 - we will basically go to our market.html
74:34 - and take the same actions over there so
74:37 - i will open my pycharm in
74:39 - market.html and before i actually go
74:42 - ahead and delete everything from here
74:44 - it is a great idea to copy the table
74:47 - that we have created previously
74:49 - and then later on we will paste it
74:51 - inside our blog
74:53 - content block so let's go ahead and do
74:56 - that okay so i will navigate
74:58 - down here and i will find our table and
75:00 - you can see that it is right
75:02 - here and then i will find the closure of
75:05 - this tag
75:06 - and i will grab the entire table
75:09 - and i will basically copy this entire
75:13 - html snippet
75:14 - and now i am pretty much ready to delete
75:17 - everything from here
75:18 - and using the methods that we have
75:21 - applied for our home.html so
75:23 - i will start by writing extends
75:28 - base dot html
75:32 - and i will continue on here as using the
75:35 - blog
75:36 - title and the block and the end block
75:40 - again
75:40 - and then we should do the same process
75:42 - for
75:43 - block content so it will be block
75:46 - content
75:47 - and again we have to close our block
75:49 - once again
75:51 - so once i have done that basically
75:53 - inside our title
75:54 - we just have to give it a text like
75:57 - market page
75:58 - and inside our content it is a great
76:01 - idea to paste our table
76:02 - back in so we can have pretty much the
76:05 - same page
76:06 - that we had previously so i will go in
76:09 - here
76:10 - and then create an indentation a little
76:12 - bit and then paste
76:13 - back our table so i think this should
76:15 - work let's test this out
76:17 - by going to chrome again and refresh our
76:20 - homepage and then you can see that the
76:21 - behavior is quite same
76:23 - now i will navigate also to our market
76:26 - and then you can see that we still get
76:28 - pretty much the same result like we have
76:30 - done previously
76:31 - what we can do is basically adding a
76:33 - title like market page
76:35 - and we will just continue with the
76:36 - customizations
76:38 - in the future so this is a pretty much
76:40 - great results until now
76:41 - and i hope that the entire process of
76:43 - how we can use
76:45 - the template inheritance was pretty much
76:47 - clear for you
76:48 - okay so there are still customizations
76:50 - left before we
76:51 - close this template inheritance topic
76:54 - and basically
76:55 - inside our navigation bar we currently
76:57 - don't have the functionality to
76:59 - navigate between different pages so to
77:02 - test this up if i click on home page
77:04 - nothing happens and as well as in our
77:07 - market
77:07 - over here so let's go ahead and
77:09 - configure them so i will open our
77:11 - pycharm again
77:12 - and we will open our base template and
77:15 - inside our navigation bar
77:18 - we can basically look up for those
77:21 - a tags now those a tags are what
77:25 - responsible to navigate users to
77:28 - different pages and so if you look at
77:31 - the
77:32 - href attribute inside the a tags this
77:35 - is what is actually sending our users to
77:38 - different areas now we could have done
77:41 - here
77:41 - something like slash home so in that
77:44 - case it will navigate our users to slash
77:46 - home
77:47 - but this is not a great idea because you
77:51 - don't want to hard code your urls in
77:54 - that way
77:55 - so what happens if in one day you want
77:57 - to change the route to
77:59 - something else then it is not considered
78:02 - as a best practice
78:03 - now again this is going to work i'm not
78:05 - saying that it is not going to work
78:07 - but it is quite wrong and we can even
78:09 - check this out if it works properly so
78:11 - we can go to here
78:12 - and refresh our page and click on home
78:16 - and then this will basically navigate
78:17 - our users to home page
78:19 - but we can do this in a more pretty way
78:21 - and i like to apply that okay so i'll
78:23 - open back
78:24 - our pycharm and in here besides hard
78:27 - coding for slash home
78:29 - we can basically use a built-in function
78:31 - from the ginger syntax
78:32 - that is going to look like url
78:35 - underscore
78:36 - four so let's call this up in here and
78:39 - pay attention that i use the double
78:41 - curly brackets
78:42 - so in here i can close this function
78:45 - like that
78:46 - and between here the url underscore 4
78:49 - expects for one special argument now the
78:53 - argument that we are going to
78:54 - give for that function will be the value
78:57 - of the name of our
78:59 - route that we want to navigate our users
79:02 - so in this case if we want to navigate
79:06 - our users to the home page then we
79:08 - should type in here the name
79:10 - of our route that we have created to
79:13 - navigate our users to the home page
79:15 - and in our case if you remember our
79:18 - route
79:18 - name was home underscore page so we can
79:21 - basically go here
79:23 - and type in home underscore page
79:26 - and once i save this let's go to our web
79:29 - page
79:29 - and test this out so i will basically
79:32 - navigate back
79:33 - to market and i will click on the home
79:35 - page
79:36 - and then you can see that it knows
79:38 - automatically to navigate our users
79:41 - to forward slash home now this would
79:44 - even work
79:45 - if i was to go inside our market dot py
79:49 - and change this to something else like
79:52 - home
79:52 - three times okay let's just do this for
79:54 - testing reasons
79:55 - and test that out so i will go to
79:59 - market again and try to navigate back to
80:03 - our home page
80:04 - then you can see that now we were able
80:06 - to achieve a kind of a dynamic way
80:09 - to navigate our users to the home page
80:12 - so we only have to specify the name of
80:15 - our functions
80:16 - rather than specifying the hard-coded
80:18 - urls
80:19 - so of course i'm not going to leave this
80:21 - home home home so let's revert this back
80:24 - and i will delete this from here and
80:27 - that will be it so let's apply the same
80:29 - thing for the
80:30 - market url as well so i will basically
80:33 - copy
80:34 - everything from here and i will paste it
80:37 - in
80:38 - inside our href where the market is
80:41 - located
80:41 - and since our function name was market
80:44 - page then i will basically
80:46 - change this to market underscore page
80:48 - and once i have done that
80:50 - let's test the results one final time so
80:53 - for sure now if i refresh
80:55 - then our flask could not find anything
80:58 - that is related to
80:59 - home home home so we will write in here
81:02 - home back and click on market then you
81:05 - can see that the behavior is quite great
81:07 - so the
81:08 - url 4 is quite useful
81:11 - in that case
81:14 - okay so just a quick reminder here this
81:17 - is the final situation that we have
81:19 - reached until now on our website
81:21 - so if you remember those items that you
81:24 - see
81:24 - on the slash market page was basically
81:27 - because of the list of dictionaries
81:30 - that is arriving from here and is sent
81:34 - directly to our template and now we want
81:37 - to look for a way to change this
81:39 - behavior
81:40 - so we will be able to store information
81:42 - inside
81:43 - an organized database so the way we are
81:46 - going to do that
81:47 - is by configuring several configurations
81:49 - on our flask application
81:50 - and we are basically going to use a real
81:52 - database that
81:54 - is going to store our information inside
81:56 - tables
81:57 - now if you never worked with databases
81:59 - before basically it allows you to store
82:01 - organized information
82:02 - within tables where each table describes
82:05 - some
82:06 - data that you want to store so for
82:08 - example you may have a table
82:10 - that its name is item and it may have a
82:13 - columns
82:14 - such as name barcode and price and this
82:17 - is exactly what we are going to do in
82:19 - order to
82:19 - store organized information inside an
82:22 - organized database
82:24 - so just a quick brief for the way that
82:26 - we are going to implement this
82:27 - basically we are going to use a new file
82:30 - and that file is going to
82:32 - store all our information now normally
82:35 - when you want to store a large amount of
82:36 - information you should execute a
82:39 - database service that is running in the
82:41 - background of your machine
82:42 - but we are not going to do that because
82:45 - we are only working on a local
82:46 - environment
82:47 - and currently we don't have any case
82:49 - where a lot of users
82:50 - are going to cause traffic on our
82:52 - website so this is why we can allow
82:54 - ourselves
82:55 - to use a minimal database and we can
82:58 - store our information
83:00 - inside a file besides running a database
83:03 - service
83:03 - on our machine so the way we are going
83:05 - to do this is by using
83:07 - sqlite3 so sqlite3 is an extension of a
83:11 - file
83:11 - that allows to store information and we
83:14 - are going to connect that file
83:16 - to our flask application so let's go
83:19 - ahead and do that
83:20 - okay so first of first we need a flask
83:23 - tool
83:23 - that allows to create tables within that
83:27 - database that we are going to work with
83:29 - with using python code now when it comes
83:32 - to developing websites with python
83:34 - basically you can create your database
83:36 - tables
83:37 - with python classes so in order to
83:40 - use this feature we need to go ahead and
83:43 - install some flask tool that allows us
83:46 - to do so
83:47 - so we will basically go ahead to our
83:50 - terminal
83:51 - and stop our website for a second so we
83:54 - will basically go ahead and write in
83:56 - pip install flask dash sql
84:00 - alchemy now this is the exact package
84:03 - that will
84:04 - allow us to write database tables
84:07 - with python classes and we are going to
84:09 - see how we are going to
84:11 - do the conversion from python to actual
84:14 - database information just in a few
84:16 - minutes so let's go ahead and install
84:17 - that and once i click in here
84:20 - then we can see that we receive a
84:22 - successfully installed flask alchemy
84:24 - message
84:25 - and if you do not receive any errors
84:27 - here then you should be fine
84:29 - now let's clean our screen here just a
84:31 - minute
84:32 - okay so now we can go basically back to
84:35 - our pycharm and continue on with the
84:37 - configurations that we should apply
84:40 - okay so once we install it we can
84:42 - basically go ahead and import that flask
84:45 - underscore sql alchemy so let's make our
84:48 - phone
84:49 - a little bit bigger here and we will
84:51 - basically
84:52 - say from flask
84:55 - underscore sql alchemy import
84:58 - sql alchemy like that
85:01 - and once we have done that basically we
85:04 - can go ahead and create an instance of
85:06 - that class that we have imported
85:07 - now the convention here would be to call
85:09 - that variable db
85:10 - because this is going to be our database
85:13 - instance and we are going to
85:14 - rely on that in the future so we will
85:17 - type in here
85:18 - db equals to sql alchemy and we will
85:21 - close parenthesis
85:23 - to initialize an instance of that class
85:26 - and once we have done that we
85:27 - need to pass our application as an
85:30 - argument to that sql alchemy class so we
85:32 - will basically type in here
85:34 - at and if you remember that arrives from
85:37 - here
85:38 - where we created a flask instance so it
85:40 - is important to
85:41 - complete that line by writing in here
85:44 - app
85:44 - now once we have done that basically we
85:47 - can start creating
85:48 - our own classes and later on they will
85:51 - be converted
85:52 - into database table now those special
85:55 - classes that are going to be converted
85:57 - in the future to database table
85:59 - are called models so we are going to
86:01 - create one module
86:03 - that its name is going to be item and we
86:06 - are going to define several
86:08 - columns that are going to be inside our
86:10 - database in the future
86:11 - so just basically let's go ahead and see
86:13 - what i said
86:14 - with a python code so we will go down
86:17 - here a few lines
86:18 - and we will create here a new class and
86:21 - we will
86:22 - name it item and once i have done that
86:25 - basically i should
86:26 - import from a special class that is
86:28 - going to say to our flask application
86:30 - that this is a model that is going to be
86:34 - table
86:34 - inside our database so this is why i
86:37 - will open up a parenthesis here
86:39 - and i will inherit from a class that is
86:41 - called db
86:43 - dot model so we will basically start by
86:46 - creating some fields and we will start
86:48 - by creating a field
86:50 - that its name is going to be named
86:52 - because it quite makes sense to describe
86:54 - our items
86:55 - with a name so we will go ahead and type
86:57 - in here
86:58 - name equals to and the way we are going
87:00 - to create a column
87:02 - will be by db.com and you want to close
87:05 - the parentheses so we can understand
87:06 - that we are creating an instance of this
87:09 - column class
87:10 - and once i create this then we should
87:13 - pass in here some extra information in
87:15 - order to create this column successfully
87:17 - now one of them will be the type of the
87:18 - column that you want to
87:20 - create so we want to make it in string
87:23 - type so
87:23 - this is why i will go ahead and type in
87:25 - your db dot string and i will close the
87:28 - parenthesis here
87:29 - as well now inside the string
87:32 - we can basically limit the amount of
87:34 - characters
87:35 - that we should put in each of our names
87:38 - so i can limit it to
87:39 - 30 characters by basically typing in
87:42 - here
87:43 - length equals to 30. so when i go ahead
87:46 - and do this
87:47 - basically i am not allowed to create an
87:50 - item instance
87:51 - and describe a name with more than 30
87:53 - characters
87:54 - and this is something that you want to
87:56 - do because
87:57 - you probably want to avoid the situation
87:59 - where you
88:00 - allow your users to create items with
88:03 - a large amount of characters because
88:06 - this could cause
88:07 - from database to store too much
88:09 - information and you probably don't want
88:11 - to do that
88:12 - so 30 characters for a name should be
88:14 - enough
88:15 - okay so once i have done that i can
88:17 - basically go
88:18 - outside of our string class in here
88:22 - and pass in here some more arguments
88:25 - right there so one of the first
88:27 - arguments that we want to pass
88:29 - is to describe to that column that we
88:32 - don't want to have
88:33 - null fields so we can go ahead and do
88:36 - that by passing in here
88:38 - nullable equals to false and the next
88:41 - argument that i'm going to specify here
88:43 - is going to allow our names to
88:46 - not have the same name when it comes to
88:49 - storing a large amount of items
88:52 - so you probably want to avoid the
88:53 - situation where
88:55 - you have two or more items that their
88:58 - name
88:58 - are iphone 10 for example so you want
89:01 - each item
89:02 - name to be unique and you can do that by
89:06 - easily saying unique equals to
89:10 - true now if you remember
89:13 - we also had some more fields that are
89:16 - describing our items in this website
89:19 - so if you remember from the dummy
89:20 - information that we have generated
89:22 - from that list we also had barcode
89:25 - price and also id so let's go ahead and
89:29 - create those columns as well
89:31 - so i will basically go in here and
89:33 - create
89:34 - price equals to db dot column and that
89:38 - time we want to change our type of
89:40 - column to db dot integer and
89:43 - this will allow our column to store
89:46 - integers and not
89:47 - strings like we did previously so now we
89:50 - don't have to pass in
89:51 - length for example because this is an
89:53 - integer and so
89:54 - we can also continue on by typing in
89:57 - here
89:58 - nullable equals to false and by the way
90:01 - if you never heard about the null
90:02 - keyword before
90:03 - basically this is just another way to
90:05 - say none so if you saw
90:07 - none from python then you should be fine
90:10 - to understand
90:11 - null as well because this is just quite
90:13 - the same
90:14 - okay so i will delete that from here and
90:16 - continue on creating
90:17 - some more fields now one more field will
90:20 - be the barcode that we also want to
90:22 - create so it will be
90:23 - db dot column and although it is going
90:26 - to contain some
90:28 - digits i still want to pass it in as
90:31 - strings because i'm not going to do any
90:34 - calculation with this barcode
90:35 - i'm just going to store 12 characters
90:38 - that they happen to be
90:40 - digits so i will go in here and create
90:43 - string and we will just pass in here
90:46 - length
90:47 - equals 12 so each barcode will be 12
90:49 - characters and again we will type in
90:52 - nullable equals false and this should be
90:55 - unique as well so we will type in here
90:58 - unique
90:58 - equals to true like that
91:02 - and once i have done that i also want to
91:04 - add one more field that we
91:06 - did not see before and this is going to
91:08 - be like a paragraph that is describing
91:11 - what this item is about so it makes
91:14 - sense to go down here and
91:16 - type in description equals to db
91:19 - dot string excuse me db
91:22 - dot column and now we will pass in here
91:25 - db
91:26 - dot string and now we probably want to
91:29 - give
91:30 - a huge amount of length in here
91:32 - something like
91:34 - 1024 something like that just because we
91:37 - want to
91:37 - probably describe our items with a nice
91:40 - paragraph
91:41 - so once i have done that i can continue
91:43 - on to nullable
91:44 - equals false and we can create unique
91:48 - equals to
91:49 - true here as well but i am assuming that
91:53 - we are not going to have the same
91:54 - description
91:55 - for our items if their size are
91:58 - almost 1000 characters but again the
92:01 - best practice will be to create unique
92:03 - equals true
92:04 - and now i also want to create one more
92:06 - special field that is
92:08 - quite required when it comes to
92:11 - sql alchemy now the one more field that
92:14 - you want to create is called
92:15 - identifier and this is a type that is
92:18 - called
92:19 - primary key so this is just a convention
92:22 - column that
92:23 - you should create when you create your
92:25 - models when it comes to
92:27 - creating models with the flask framework
92:30 - so we will go ahead and do that as well
92:32 - and we will type in here
92:34 - id equals to db dot
92:37 - column and its type will be db
92:40 - dot integer and we will basically go
92:43 - ahead and type in here
92:45 - primary underscore key equals to
92:48 - true now if you not quite understand why
92:51 - i'm doing this
92:52 - basically this is a convention to our
92:54 - flask models
92:55 - so it can understand the unique objects
92:58 - that are going to be inside our items
93:00 - so it is a must thing that you should do
93:03 - when you create modules with flask okay
93:06 - so there are still some steps left to
93:08 - see that item table within a nice
93:11 - looking database
93:12 - and we need to add several
93:14 - configurations to our application
93:16 - in order the flask to recognize a
93:18 - database
93:19 - so the way that we can do that is by
93:22 - grabbing the
93:23 - app object and adding in some new
93:26 - configuration so it will be
93:27 - add dot config and basically this
93:31 - statement here is a dictionary that is
93:34 - going to accept some new key values
93:37 - from us so we will basically go ahead
93:39 - and pass in here
93:41 - some new key value and we can do that by
93:43 - typing in here
93:44 - sql alchemy underscore database
93:50 - underscore uri and then we will point it
93:54 - to where we are going to store our
93:58 - file which is going to be the database
94:00 - file so we can do that by
94:01 - referring this configuration to a sqlite
94:05 - 3
94:05 - file so i will basically go ahead and
94:07 - type in here
94:09 - sqli3 and this is going to be like a url
94:13 - but
94:13 - not besides it is going to be uri and i
94:16 - will explain the differences just in a
94:18 - second
94:18 - so i will basically type in here sqli3
94:21 - column
94:22 - slash and we should add two more four
94:25 - slashes here
94:26 - as well and once i have done that we
94:28 - will just give a name to our database
94:29 - file
94:30 - so it will be market dot db
94:33 - okay so i know this line might confuse
94:35 - everyone here so let's go ahead
94:37 - step by step to understand this so first
94:39 - of first we see
94:41 - this app flask equals to double
94:43 - underscore name that we have created in
94:45 - the
94:46 - very first steps so we use this app
94:49 - object
94:49 - and we add extra configuration so our
94:53 - flask application
94:54 - can recognize its database and the way
94:57 - you can do that
94:58 - is by adding key values that are
95:01 - considered as conventions
95:03 - so the flask application can understand
95:06 - where the database is located at
95:08 - so the convention will be to create a
95:10 - key that
95:11 - its name is sql alchemy underscore
95:14 - database underscore
95:15 - uri so uri stands for uniform
95:19 - resource identifier and this is
95:21 - different from url that you probably saw
95:24 - everywhere because
95:25 - this is not a link to a website this is
95:27 - why we see the l
95:28 - at the end of this statement this is an
95:31 - identifier that
95:32 - is just a file that is going to be
95:34 - identified as database and basically the
95:36 - way that flask application wants us to
95:38 - do it
95:39 - is by passing in here sqlite colon
95:42 - three four slashes and then just give a
95:44 - random name to the file
95:46 - that you're going to create okay so once
95:48 - we have configured this successfully
95:51 - then we should go ahead and execute some
95:52 - commands in order to create this actual
95:55 - file and then we can see it visible
95:58 - inside our project
95:59 - directory so i will open our terminal
96:02 - here and inside our command line we want
96:04 - to enter to python shell because we
96:06 - want to import the information from our
96:09 - market dot py
96:11 - file so i can basically go ahead and
96:14 - type in here
96:15 - python and make sure that you do that in
96:17 - the same directory as your project so
96:19 - you will not receive any errors so once
96:22 - i have done that
96:23 - basically i can import our market.py
96:26 - file
96:27 - like a python module so i will type in
96:30 - here
96:30 - import i mean from
96:33 - market because this is the name of our
96:35 - python file
96:36 - import db now the reason i want to
96:40 - import
96:40 - db it is basically because i want to
96:42 - take several actions within that
96:44 - db variable that we created previously
96:47 - now once i will execute this you might
96:50 - receive a warning about some of the
96:51 - features that are going to be disabled
96:53 - in the near future
96:54 - but don't worry too much about that this
96:56 - is not an error so
96:58 - you are totally fine if you see this
97:00 - output
97:01 - now i want to split our display a little
97:03 - bit just to see you the result of
97:06 - what happens when i run the following
97:09 - command so i will basically locate our
97:11 - terminal in here
97:13 - and we'll make it a little bit bigger
97:15 - like that and now i will go ahead
97:17 - and create our database now the way that
97:21 - we can do that
97:22 - is by saying to our shell to
97:25 - create all our tables that we have
97:28 - created inside that python file
97:30 - and if you remember our modules are
97:33 - what considered as database tables to
97:36 - our flask application so i will run
97:38 - here db dot create underscore
97:42 - all and if you do not receive any errors
97:45 - after this command
97:46 - then you should be totally fine now once
97:49 - i have
97:50 - executed this then you should see
97:53 - the market.db file right
97:56 - here inside our project directory so
97:59 - that means that we have created database
98:03 - successfully so this is quite great now
98:06 - currently
98:06 - our database is totally empty from
98:08 - information so we probably want to go
98:10 - ahead and create some items
98:12 - inside our database and the way we can
98:14 - do that is by accessing our database
98:17 - like python code so this is what exactly
98:19 - sq alchemy allows us to do so if by any
98:22 - chance you
98:23 - come from django world then you should
98:25 - understand that the sql alchemy
98:28 - is quite like the object relation mapper
98:31 - of django so this is why we
98:33 - work with the sql alchemy okay so let's
98:35 - go ahead and create some items in here
98:37 - so i will basically
98:38 - import the item model that we have
98:41 - created so it will be
98:42 - from market import item
98:45 - and once i do that then i can basically
98:48 - go ahead and create an item like that so
98:51 - let's create a variable
98:53 - and it will be equal to item one and
98:56 - this will be equal to
98:57 - the item class so we will initialize an
99:00 - item
99:00 - and we will pass in here name equals to
99:04 - phone let's call it
99:08 - iphone 10 like that and we will also
99:12 - pass in price so it will be 500
99:16 - and we will also pass in some barcode so
99:19 - if you remember this is a string so i
99:21 - will just create some
99:23 - random numbers in here
99:26 - and we should have
99:29 - 12 characters so this is quite great and
99:32 - we should also pass in
99:34 - description and this will be equal to
99:38 - just let's pass in a short description
99:40 - now once i
99:42 - enter this then we should be fine now
99:44 - you probably have
99:46 - noticed that we did not
99:49 - pass in anything about the id
99:52 - over here and the reason we did not pass
99:54 - anything about the id
99:56 - it is because the fact that we passed in
99:59 - here primary key
100:00 - equals to true so if this item is
100:03 - happened to be
100:03 - our first item in our database then its
100:07 - id is going to be one and we are going
100:09 - to see that just in a second
100:11 - okay so let's go back to our shell here
100:14 - and once we have created an instance of
100:16 - item
100:16 - then we want to save our changes to our
100:19 - database so the way that we can do that
100:21 - is by going ahead and typing here
100:24 - db.session
100:27 - dot add and we should pass in here the
100:30 - argument of the
100:31 - object that we have created which is
100:33 - item one
100:34 - and the next line here will be db dot
100:38 - session dot commit and you should close
100:41 - the parenthesis here
100:42 - like that and this should do the job of
100:45 - saving information
100:47 - inside our database now to verify that
100:50 - you already have
100:51 - one item inside your database then you
100:54 - can basically
100:54 - run a command like the following and the
100:57 - correct command for that will be
101:00 - item.query.org
101:01 - and once i run that then we should see a
101:04 - result
101:05 - of one object that is located inside
101:08 - our database and let's actually show
101:10 - what happens if we create one more item
101:12 - and commit our changes to our database
101:15 - so we will just type in here item two
101:17 - equals to item
101:19 - and we will pass pretty much the same
101:20 - information like we did previously so it
101:22 - will be name equals to
101:24 - let's type in here laptop and price
101:27 - would be 600 and
101:30 - this time the description again will be
101:34 - just a short description like that
101:37 - and what else we got we have to pass in
101:41 - barcode so let's pass in some
101:44 - random 12 digits like that
101:48 - and again we can basically go ahead and
101:51 - add this object to our db session so
101:54 - it will be the following command and we
101:57 - can basically
101:58 - run here db.session.com
102:02 - so it will commit our changes and again
102:05 - now i can execute the item
102:07 - dot query dot all and
102:10 - this should display us two items now you
102:13 - may notice how the objects
102:16 - are defined as the model name
102:20 - space the identifying number that i
102:23 - talked about now this is something that
102:25 - you can actually
102:26 - override and you can give your own
102:29 - customization
102:30 - to the way that you want to see your
102:32 - items when you
102:34 - try to query them by the python shell
102:37 - so let's go ahead and see how we can do
102:40 - that
102:40 - okay so i'm back inside our pycharm
102:43 - and this is as easy as overriding a
102:47 - magic method
102:48 - that is called dunder or epr now if you
102:51 - don't know what dunder repr
102:53 - is then i have a video on that special
102:56 - magic method and basically you can check
102:58 - my channel out to
102:59 - see the thunder r apr video okay so
103:03 - besides returning the default option
103:05 - that we saw previously
103:07 - we can basically return a
103:10 - formatted string and it will be item
103:13 - and then we will just pass in here self
103:16 - dot name inside curly brackets just to
103:20 - refer to that variable okay so once i
103:23 - save my changes here
103:25 - then we should load our information
103:28 - again from the beginning so i will exit
103:31 - our shell here and i will enter
103:34 - it back but before i will clean our
103:36 - screen and i will
103:38 - type in here python and i will go here
103:41 - and
103:41 - write form market import db
103:45 - and as well as we will throw market
103:49 - import item and now if i'm executing the
103:52 - same command like before
103:54 - so it will be item.query.org
103:57 - then you can see the differences from
103:59 - the previous
104:01 - result as we see our objects
104:04 - that they are defined in a different way
104:06 - so this is quite
104:07 - great okay so i just cleaned my screen
104:10 - here to show some more examples
104:12 - now i'm going to show how you can
104:14 - iterate over all of your items for
104:16 - example
104:17 - so it will be four item in
104:20 - item dot query dot all
104:23 - because this is the exact statement that
104:25 - returns all of our
104:27 - objects and once i iterate over it then
104:30 - we can access each
104:31 - field like the fields that we have
104:34 - created
104:35 - within our item model so it will be for
104:38 - example item dot
104:39 - name and it can be also item.price
104:43 - and it also can be item dot description
104:46 - and as well as item dot id and
104:50 - also item dot barcode now once i hit
104:53 - enter here then we should see all of our
104:56 - results
104:57 - that being shown like here so just
104:59 - remember that you can access each of
105:01 - your fields
105:02 - like we defined them inside our model
105:06 - okay so if we want to filter our objects
105:09 - by some specific condition
105:11 - this is something that is quite possible
105:13 - as well so let's go ahead and show that
105:15 - but just before let's clean our screen
105:17 - here so we can have a better look
105:20 - like that okay so the way you can
105:24 - filter by some condition would be by
105:26 - item
105:27 - dot query dot filter
105:30 - underscore by now the underscore by is
105:34 - actually
105:34 - referring to some key value that you
105:37 - want to specify
105:38 - in between those parentheses now let's
105:40 - say that i want to filter by
105:42 - items that they that its price is
105:45 - 500 so it could be basically price
105:48 - equals to 500 and once i click enter
105:52 - then it returns us a base query object
105:55 - like that now the reason you see this
105:58 - it is basically because you may have
106:00 - more than
106:01 - one result by executing that command
106:05 - so to see the actual result of what
106:08 - this exact statement returns you then
106:11 - you
106:11 - should iterate over it so it will be
106:14 - full item in item dot
106:17 - query dot filter underscore
106:20 - by and again i will just type right in
106:23 - here
106:24 - price equals to 500 and once i do that
106:28 - then i am allowed to access each of our
106:31 - items
106:32 - that their price are 500 dollars so we
106:35 - can basically type in here item dot
106:38 - name and once i execute this then we can
106:41 - see that we
106:42 - only have one item that its price
106:45 - is 500 and its name is
106:48 - iphone 10. now again just remember that
106:51 - you will receive this result because the
106:53 - filter on the score by
106:55 - can return you more than one option that
106:58 - this condition is actually a true
107:00 - statement for those
107:02 - objects okay so now that we pretty much
107:04 - understood everything
107:05 - that is relating to modules and
107:08 - databases
107:09 - it makes totally sense to scroll down
107:12 - here
107:13 - and change this dummy information to
107:15 - something
107:16 - else now you could probably guess what
107:19 - i'm going to
107:20 - write besides this long list that we
107:23 - have created
107:24 - so it will be as easy as typing in here
107:27 - item
107:28 - dot query dot all because this will
107:32 - basically
107:33 - return all the object of items that we
107:36 - have stored inside our database
107:38 - so once i save this and go
107:41 - back to our shell here and let's
107:44 - actually
107:45 - exit from our python shell and execute
107:48 - our server so it will be
107:50 - set flask underscore app equals to
107:53 - market dot py and it will be also
107:56 - flask underscore debug equals to one
108:00 - and we can execute here flask run okay
108:04 - so
108:04 - in here as you remember those three
108:07 - items are used to be the information
108:09 - that we have passed in as a dummy
108:11 - information
108:12 - now if i refresh it then you can see
108:15 - that it is updated with the information
108:18 - that is stored inside our database
108:21 - and this is the behavior that we want to
108:24 - reach
108:24 - when we want to display some information
108:26 - inside our website so this is totally
108:28 - fine and it works correctly
108:30 - so this means that we have done a great
108:32 - job by creating a database that is
108:35 - connected to
108:36 - our web application okay so one final
108:38 - thing that i'd like to
108:39 - discuss about is the option to inspect
108:42 - your database
108:43 - in a visual graphical user interface
108:46 - now because we use sqlite 3
108:49 - as our database engine then we can
108:52 - download
108:53 - a browser that knows how to display
108:56 - information
108:57 - when it is done by sqlite3
109:00 - so basically you can go ahead and search
109:03 - in
109:03 - google for a db browser for
109:06 - sqlite and then you can see that it has
109:10 - a lot of options for any kind of
109:12 - operation system so
109:14 - if i'm clicking here for example then
109:16 - you can see that it has
109:17 - download links for mac os and as well as
109:21 - for windows applications
109:23 - but basically this is something that
109:25 - you'll maybe want to do because you want
109:26 - to really have an
109:28 - actual look for what is inside your
109:29 - database so since i'm using windows
109:32 - machine
109:32 - currently then i already have downloaded
109:35 - this software
109:36 - and then i'm going to display you how
109:38 - you can browse your information
109:40 - in a visual graphical interface so let's
109:43 - go ahead and have a look
109:44 - okay so i will open our sqlite3
109:48 - weaver and in here what i have to do
109:51 - is only browsing the file of
109:54 - our database files so once i click on
109:58 - file and choose the open database option
110:01 - then i should point it to the file that
110:04 - we have just created
110:05 - and as you can see i'm inside the
110:07 - directory of
110:08 - our project and what i have to do is
110:11 - just selecting this and click on open
110:14 - now once i do that then you can see that
110:16 - we
110:17 - have in here our tables and we
110:20 - have only one table that its name is
110:22 - item
110:23 - now if we want to see its columns then
110:27 - we can basically click here on that
110:29 - arrow
110:29 - and this will display you the columns
110:31 - that we have created
110:32 - to create this table so you can see that
110:35 - we see
110:36 - all the columns in here and if you want
110:38 - to see the actual information inside
110:40 - that table
110:41 - then you can go easily by right clicking
110:44 - and click on browse table
110:46 - and you can see here that we have
110:48 - actually stored information
110:50 - and you can see the exact information
110:52 - that i showed you from the python shell
110:55 - so this is something that is optional
110:58 - for me
110:58 - this tool was very comfortable when i
111:01 - developed some flask
111:02 - projects and i really recommended to
111:05 - look up for
111:06 - such a tool that will display the
111:07 - information for you visually
111:09 - so it will make your lives easier in
111:11 - certain cases
111:15 - all right so now if we take a look to
111:18 - what is inside the market.py file
111:20 - currently
111:21 - we have a model here and down below
111:24 - we have several routes that we have
111:27 - created
111:28 - now we are going to create more models
111:30 - and more routes in the future
111:32 - and so it might be a great idea to have
111:34 - a python file that its name is going to
111:37 - be models.py
111:38 - and also routes.py where we will store
111:42 - all the routes now we are going to spend
111:44 - a few minutes on how to reorganize our
111:46 - project because it is not going to be
111:48 - as easy as grabbing the models to a
111:50 - models dot py file and import stuff
111:53 - because we are going to end up with a
111:55 - forbidden import and we are going to
111:57 - explain that
111:58 - in a few minutes so let's actually try
112:00 - to split
112:02 - our different flask elements to
112:03 - different python files
112:05 - so i will start with creating a new
112:07 - python file
112:08 - and for sure i will name it modules dot
112:11 - py
112:12 - and in here i will grab our single item
112:16 - module
112:17 - and i will try to paste it in inside our
112:20 - modules
112:21 - and currently i will allow myself to
112:23 - ignore that db variable that is not
112:25 - existing here
112:26 - and i will go back to the market dot py
112:29 - and i will do the same process
112:31 - by creating routes.py and then i will go
112:34 - back to our market.py and i will
112:37 - grab in everything from here and paste
112:40 - this in
112:41 - over here so we could pay attention that
112:45 - we have several
112:46 - arrows because several functions are
112:49 - not loaded inside that particular file
112:52 - so how we are going to get out of this
112:54 - so let's first go back to our
112:57 - market dot py now as you know in python
113:00 - when you
113:00 - use the import keyword to import some
113:03 - file then what python does
113:04 - it executes the entire file line by line
113:08 - so if you remember before we actually
113:10 - moved the routes and the models
113:12 - we used to have a market.py file
113:15 - with modules over here and with routes
113:19 - down below
113:20 - now we could basically go ahead and
113:23 - use here import modules and import
113:26 - routes
113:27 - but we still have to figure out how we
113:29 - are going to
113:30 - give these models.py the db variable
113:34 - that it's missing so again we could try
113:38 - to
113:38 - solve that by moving that line
113:42 - to modules dot py so i will paste this
113:45 - in
113:46 - inside here now we also end up
113:49 - with missing the sql alchemy
113:52 - instance so again we could grab this
113:56 - in from here and paste this in
114:00 - above here but we are never
114:03 - going to get out of this because there
114:05 - is always going to be something
114:07 - missing in each file and then we will
114:11 - end up
114:11 - with something that is called circular
114:14 - imports now what secular imports are
114:18 - it is basically two files are trying to
114:22 - import from each other and it is
114:24 - something that is forbidden in python
114:26 - because
114:27 - each file will end up with some missing
114:30 - variables
114:30 - when it tries to load some variable from
114:34 - python memory so in order to avoid this
114:37 - python comes up with something that is
114:39 - named packages
114:40 - now we can basically package our entire
114:44 - application
114:45 - inside a new directory let's call it
114:48 - something like
114:48 - market and then we can create one more
114:51 - python file
114:52 - for example we can name it run execute
114:55 - start something like that
114:56 - and then that python file will know how
114:59 - to
115:00 - import everything step by step and the
115:02 - only thing that we
115:04 - will have to do is calling that specific
115:06 - file
115:07 - and then that python file will take care
115:09 - of the rest
115:11 - so this is the design that we are going
115:13 - to implement
115:14 - in that video and so by the end of this
115:16 - video every
115:17 - file will be at its own place and
115:20 - everything will totally make sense for
115:21 - you
115:22 - so let's actually get rid of those lines
115:25 - that i just pasted in over here
115:27 - and revert them back inside our market
115:31 - dot py
115:32 - and then we will remove those again and
115:34 - then now we will basically go ahead and
115:36 - create a package
115:37 - and then we will name it market so let's
115:39 - see how we can do that
115:40 - great so first of all we will go ahead
115:43 - inside our flask market directory
115:46 - and we will create that single file that
115:48 - is going to take care of everything that
115:50 - i just discussed about
115:51 - and i will name it something like run
115:54 - okay so
115:55 - it is going to be responsible to execute
115:57 - our application
115:58 - and what i will do now is grab
116:01 - everything
116:01 - from our market dot py and
116:05 - i will cut everything from here and i
116:07 - will basically paste
116:09 - this in over here now as i have
116:12 - completed this basically i can allow
116:15 - myself to delete the market.py
116:17 - file because the routes are here and
116:20 - then the models
116:21 - are here so the market.py is quite empty
116:24 - and i can allow myself to delete that so
116:26 - let's go ahead and delete that
116:28 - i will use the safe delete option all
116:31 - right
116:31 - and our next step here will be to create
116:34 - new directory
116:35 - and move our templates modules and
116:38 - routes dot py
116:40 - into that directory so we are packaging
116:43 - every flask element
116:44 - into a new directory that is named
116:47 - market
116:48 - so let's go ahead and create a new
116:51 - directory here
116:52 - and i will name it market and then we
116:55 - will
116:56 - basically move everything from here
116:59 - to that market directory so
117:02 - in python that will be as easy as
117:04 - grabbing it
117:05 - and just hovering it inside the market
117:09 - here
117:09 - then you can see that pycharm auto
117:11 - completes me by asking
117:13 - if i want to move some files into
117:16 - that directory so i will basically use
117:19 - the refactor option here
117:21 - and then you can see that our modules
117:23 - for example is located
117:24 - inside the new directory now i will do
117:27 - the same
117:28 - with routes and also with
117:31 - our templates
117:34 - great and last we will also move in
117:38 - our market.db okay so let's close each
117:41 - file over here
117:42 - so our structure right now is that we
117:46 - have our
117:46 - market directory and we have our run.py
117:50 - python file which is outside of that
117:53 - market
117:54 - directory so let's see how we continue
117:56 - from here okay so if we actually take a
117:58 - look to the lines that
118:00 - are left inside our run.py file they are
118:03 - basically
118:03 - some initialization lines that contains
118:06 - very important information about our web
118:10 - application
118:11 - now what we must do with those lines of
118:13 - code that are left over here
118:15 - is to move them to a special python file
118:19 - that is called double underscore init
118:21 - now when
118:22 - you work with python packages every
118:25 - python package that is considered as a
118:27 - regular package
118:28 - is going to include one special python
118:30 - file that its name
118:32 - is always going to be double underscore
118:34 - init double underscore
118:36 - and what is so special with that file is
118:38 - that when you
118:39 - import it then before it loads what you
118:42 - want to import to your file it is
118:45 - basically going to execute that
118:47 - particular file that is named double
118:50 - underscore init double underscore
118:52 - so it totally makes sense because
118:53 - whenever we want to import some objects
118:56 - or variables from our application
118:58 - then we probably want to execute those
119:00 - lines of code because those lines of
119:02 - code are
119:03 - what responsible to start our
119:06 - flask application so we will go ahead
119:09 - and do that
119:10 - so i will basically go inside our market
119:13 - directory and i will create an
119:16 - initialization
119:18 - file that will be responsible to define
119:21 - this directory as a package so i will
119:25 - name it double underscore init double
119:26 - unscore as i said
119:28 - and i will move in whatever is inside
119:31 - that
119:32 - run that py to that double
119:35 - underscore init double underscore file
119:38 - now what is so
119:39 - special with the process that we have
119:40 - done until now is that if we are going
119:43 - ahead
119:44 - from our run dot py file and we
119:47 - try to import market then it is going to
119:50 - recognize it as a package because we
119:52 - have included that double underscore
119:54 - init file
119:55 - so if we were to try to import that
119:58 - app variable that we have created then
120:00 - it is going to be perfectly fine
120:02 - because it recognizes that variable
120:06 - from our double underscore init file and
120:08 - anyway it is going to execute it as a
120:10 - first step because this is why
120:12 - we have that double underscore indeed
120:14 - file and actually the next line that i
120:16 - can allow myself to do here
120:18 - is using app.run and
120:21 - this file is going to be that pointer
120:24 - file that is going to do the rest of the
120:26 - job of importing everything so this is
120:28 - how it is going to work right we are
120:30 - basically going to import
120:31 - our application from market package and
120:34 - then we are going to
120:35 - run it but before we actually try this
120:37 - out
120:38 - let's add here one more argument and it
120:41 - is going to accept some arguments that
120:43 - we
120:44 - already familiar with and it is going to
120:46 - accept here debug
120:47 - equals true so we don't have to set up
120:50 - those environment variables anymore
120:52 - and one more thing that i'd like to add
120:54 - here as a convention in python
120:57 - is to test out if this run.py file
121:00 - has executed directly now the way that
121:04 - we can check that
121:05 - is by writing the conditional of if
121:08 - double underscore
121:09 - name is equal to
121:12 - double underscore main and again if you
121:15 - don't know what this conditional is
121:17 - about i have a video on my channel that
121:19 - you can definitely check out
121:21 - what this special if name equals main
121:24 - does but basically it checks if our
121:27 - run.py file
121:28 - has executed directly okay so now let's
121:31 - go ahead
121:32 - to our terminal and try to see what will
121:35 - happen if we
121:36 - execute that run.py file now i know that
121:39 - there is a great chance that we are
121:40 - going to
121:41 - fail and receive some errors but i want
121:43 - to show you step by step how we are
121:45 - going to overcome those errors
121:47 - now that we have our package set up so i
121:50 - will open
121:50 - my terminal and basically the only thing
121:53 - that i have to do now
121:54 - is going ahead and execute that run.py
121:58 - file
121:59 - now our web application will start and
122:01 - if we actually
122:02 - try to access it then you can see that
122:05 - we receive errors
122:06 - that the root url is not found
122:09 - now that doesn't make sense because if
122:12 - we take a look
122:13 - to our python then we can see inside our
122:16 - routes dot py
122:18 - that that we have the route for our
122:21 - root url but the reason this fails it is
122:24 - because the double underscore
122:26 - init file does not recognize the routes
122:29 - that we have created
122:31 - inside that route dot py file so
122:34 - our first step here is going to be to
122:37 - complete this dunder emit file
122:39 - by saying from market
122:43 - import routes and as you remember
122:46 - if we import certain file then python
122:50 - is going to try to execute what is
122:53 - inside that file
122:54 - so now we can go back to our
122:57 - web browser and the test results out now
123:00 - you can see that our web application is
123:02 - probably down right now because we
123:04 - see that this site can't be reached and
123:07 - as you can see
123:08 - we started to receive certain errors
123:10 - about the import
123:12 - so in that route.py file
123:15 - we don't have the application defined so
123:18 - let's go ahead and fix that
123:20 - so i will go to our python
123:23 - and i will basically type in
123:26 - from market import
123:30 - app and as you can see that app errors
123:33 - are started to disappear
123:35 - but we still have left with the render
123:37 - template error
123:38 - so we can also go ahead and fix it by
123:41 - saying
123:42 - from flask import vendor
123:45 - template and then we also have one more
123:49 - error
123:50 - that we must fix in here and that will
123:52 - be the import of
123:54 - our models dot py because as you can see
123:56 - we have a line here that says
123:59 - item.query.org
124:00 - and it doesn't know anything about it
124:02 - because it is not a recognized
124:04 - model and i can basically import it like
124:06 - we can
124:07 - import from a regular package in python
124:09 - and that will be by
124:11 - saying from market dot
124:14 - models import item so now we have pretty
124:18 - much everything set up in our routes dot
124:20 - py
124:21 - and if we have a look inside our models
124:23 - dot py
124:24 - then we still have some errors over here
124:27 - left over
124:28 - so i can basically fix it by saying
124:31 - from market import db
124:34 - because we can import it from our dander
124:38 - init file
124:39 - and now everything should work so we can
124:41 - basically test this up by
124:43 - going to our terminal and re-run our
124:47 - application and i will clean my screen
124:49 - again
124:49 - and i will try to run that py file again
124:53 - and now our website is up and running
124:56 - and i can basically test if everything
124:58 - works properly
124:59 - and if i refresh it then you can see
125:01 - that we receive our web application
125:03 - as it's supposed to now if i navigate to
125:06 - that market page
125:07 - then you can also see that everything is
125:09 - quite great
125:10 - so this means that everything works
125:13 - great
125:14 - and we have completed our packaging
125:16 - successfully
125:17 - now i know that there was a lot of
125:19 - information that will probably have to
125:21 - sink in
125:21 - but i hope that the packaging process
125:24 - was clear and you pretty much understood
125:25 - everything about what i have done here
125:27 - so again the main idea was to package
125:29 - everything that
125:30 - is related to market and then having one
125:34 - single file that we basically can
125:36 - execute it
125:37 - and then this file will be responsible
125:39 - to do everything for us
125:43 - now i just realized that i did not
125:44 - specify a lot of times throughout this
125:46 - tutorial
125:47 - that our code is available from the
125:49 - github and you can definitely go
125:51 - down below to the description and bring
125:54 - the link
125:55 - for the repository that includes the
125:57 - code
125:58 - of that tutorial and you can download it
126:00 - in the way that you like them so you can
126:02 - also use the command of git clone
126:04 - or you can download it as a zip file up
126:07 - to you
126:07 - but basically it is a great idea to go
126:09 - to that link and
126:10 - follow the code that i'm writing
126:12 - throughout this tutorial okay so let's
126:14 - go ahead and continue so
126:16 - i will basically have to deal with
126:19 - a way how i can accept users to our
126:22 - website
126:23 - and the way that we are going to do that
126:25 - is obviously by storing some information
126:28 - regarding our users
126:29 - in a database so it totally makes sense
126:32 - to
126:32 - go ahead and create a new module and
126:35 - then we will store some special fields
126:37 - like
126:37 - username password and stuff like that
126:40 - that is going to be
126:41 - our columns within that model so let's
126:44 - go ahead and do that so i will go
126:46 - up top here basically i'd like to remain
126:50 - the item as our second module
126:52 - and i will write in top here class
126:55 - user and it will inherit from db.module
126:59 - like we did in our previous modules and
127:02 - our first
127:03 - column would be the id again so
127:06 - as you remember i said previously that
127:08 - it is a convention
127:09 - and it is a must thing to have that id
127:13 - field because this is how the flask
127:16 - wants to identify each of your objects
127:19 - by their id numbers
127:21 - so i will allow myself to copy this line
127:23 - from
127:24 - here and paste this in as a first line
127:27 - over there
127:28 - and now i can allow myself to continue
127:30 - and creating some new fields so i will
127:32 - go ahead
127:33 - and create username equals to db
127:36 - dot column and i will make that to be
127:39 - equal to
127:40 - db dot string and i will close this
127:43 - out and it is a great idea to limit our
127:46 - users
127:47 - by saying length equals to 30 so it will
127:50 - be maximum 30 characters per each
127:52 - username
127:53 - and this is something that we want to
127:56 - keep unique
127:57 - because we probably don't want to let
127:59 - our website users to have
128:01 - multiple usernames that they are the
128:03 - same so unique
128:05 - could be true and we will also
128:09 - specify nullable equals false and just
128:11 - to follow this exact same order like we
128:13 - did previously
128:14 - i will go here and type in nullable
128:17 - equals
128:18 - false and i realize that i missed the
128:21 - comma here
128:22 - so let's complete that out okay so this
128:24 - is our username field
128:26 - and as you know in most of the websites
128:29 - we also have to
128:30 - provide our email address when we
128:32 - register to a different site
128:34 - so it is also a great idea to have an
128:36 - email field
128:37 - so it will be email address
128:41 - equals to db.column and this time i want
128:44 - to
128:45 - limit this email address as well
128:48 - but i have to raise our limit a bit so
128:50 - if there is a username with a length of
128:52 - 30 characters
128:53 - then it might be a greater idea to give
128:56 - our
128:56 - email address a limit of 50 characters
128:59 - so there is a lot of space for
129:01 - at email.com something like that so i
129:04 - will also make that
129:05 - nullable equals to false and also unique
129:08 - equals true that is quite making sense
129:11 - and our next field here would be our
129:14 - password now i'm going to
129:16 - name this field a little bit different
129:18 - because we are not going to store
129:20 - passwords as plain text
129:21 - inside our database now doing something
129:24 - like this could lead to a lot of
129:25 - security risks
129:26 - and that is something that is basically
129:29 - called make hackers life easier
129:31 - to pull some information from your
129:33 - website's database
129:34 - so you'll probably want to avoid this by
129:36 - storing the password
129:38 - not as plain text but besides you'll
129:40 - want to apply some hashing algorithm
129:43 - or some another way that will encrypt
129:45 - that password
129:46 - so even if there is a hacker that is
129:48 - going to steal some password information
129:49 - from your website
129:50 - he doesn't have a lot of things to do
129:52 - with that because it is encrypted
129:54 - so i will name this field by saying
129:57 - password
129:58 - underscore hash and that will be equal
130:00 - to db
130:01 - dot column and we are going to
130:05 - receive here string again now i'm going
130:08 - to
130:08 - give this length 60 because the mostly
130:11 - used hashing algorithm that flask allows
130:13 - us to use
130:14 - will always convert the passwords to
130:17 - being
130:18 - 60 characters so this is why i'm going
130:20 - to specify here
130:21 - length equals to 60 and i will continue
130:24 - on by
130:25 - saying nullable equals to false and
130:28 - i actually don't have to write here
130:30 - unique equals true because
130:32 - it is totally fine if two people have
130:34 - the exact same password in our website
130:37 - now this is the password field we still
130:39 - have some more fields to set up for our
130:41 - users
130:42 - and the next one will be the budget now
130:45 - if you remember from the very beginning
130:47 - of this tutorial i said that we are
130:48 - going to
130:49 - apply a budget system for our users so
130:52 - it totally makes sense to describe
130:54 - our user's attributes by one more
130:57 - attribute that its name
130:58 - would be budget so i will go ahead and
131:01 - say
131:01 - budget equals to db dot column
131:05 - and that time this will be equal to db
131:08 - dot integer and we will go
131:11 - here and continue by saying nullable
131:15 - equals false and we are also going to
131:17 - set a default
131:19 - value when this user object is created
131:22 - now you'll probably want to give some
131:25 - amount of money for your new users to
131:27 - start buying and selling
131:29 - stuff from the market so we will set the
131:32 - default
131:32 - value for that for example to 1000
131:36 - so the users can at least have 1000
131:39 - coins
131:39 - at the very first registration attempt
131:42 - okay so it totally makes sense to set up
131:44 - a value like that
131:45 - and one final field that i like to add
131:48 - here before we close up this module
131:50 - will be a field that is going to be
131:53 - related to our items module now what
131:56 - that means it means that we want to
131:58 - allow our users to
132:00 - own several items because this is what
132:03 - this website is going to be about
132:05 - so in database definitions this is
132:07 - something that is called
132:09 - relationship between a two tables now in
132:12 - our case we use modules because we work
132:14 - with python but
132:15 - we have to use some special field that
132:17 - is called
132:18 - relationship and inside that
132:21 - relationship
132:22 - field we are going to describe several
132:24 - arguments
132:25 - to make the model to understand that the
132:28 - user can own some items okay so let's
132:32 - go to here and write in
132:36 - items equals to so we will type in
132:39 - db dot relationship
132:42 - like that and we will close our
132:44 - parentheses and the relationship is
132:46 - going to be
132:47 - with our item model so we will say that
132:50 - by
132:51 - writing the model name inside a string
132:54 - like
132:54 - this now continuing from here i am also
132:57 - going to type in
132:58 - back riff equals to and we will open a
133:01 - single code and
133:02 - inside here we will say owned
133:06 - user and what backref does it is
133:09 - basically a
133:10 - back reference to that user model so for
133:13 - example if we have one user and then we
133:16 - want to know the items that this user
133:18 - owns
133:18 - we are basically going to grab the
133:20 - object of the user and we will access
133:22 - the attribute of items
133:24 - but let's consider a situation that you
133:26 - have an iphone item
133:27 - inside your database and you want to
133:30 - know
133:30 - its owner now you are going to grab the
133:34 - item object
133:35 - and then you will access it by the
133:37 - attribute of
133:38 - owned user and that is because you
133:40 - specify the back reference
133:42 - of that item so it is quite important to
133:46 - provide this back reference
133:47 - because it will allow us to see the
133:49 - owner of specific
133:51 - items so the last argument that i will
133:53 - say here will be
133:54 - lazy equals true and that is something
133:57 - that we also have
133:58 - to set up here because if you don't set
134:00 - up the lazy equals true
134:02 - then the sql alchemy will not grab all
134:04 - the objects
134:05 - of items in one shot so it is quite
134:08 - important to specify the lazy equals
134:11 - true
134:11 - in that case now i want you to take a
134:13 - look how
134:14 - this db is not actually a column
134:17 - besides it is a relationship so what
134:20 - that means it means that this is not
134:22 - actually going to be stored as a column
134:24 - when we try to inspect inside our
134:26 - database
134:27 - so it is quite wrong because we also
134:29 - want to store
134:30 - information about certain users that are
134:34 - owning some items now the way that we
134:36 - are going to do that
134:37 - is by saying to our items module
134:40 - which user is owning it so we will go
134:43 - back to our items module and
134:45 - specify one more column that we must
134:48 - create
134:48 - in order to make this relationship to
134:51 - work
134:51 - successfully so we will go here and we
134:54 - will type in
134:55 - owner equals to db dot
134:58 - column and this will be an integer
135:02 - and the next thing that we want to write
135:04 - here is the relationship to the user
135:06 - model so i will say
135:08 - db dot foreign
135:11 - key like this now what foreign key does
135:14 - it
135:14 - search for the primary key of your model
135:17 - from the
135:18 - module that is related to now if you
135:21 - remember i said previously that
135:23 - there is a great reason that we have to
135:25 - create
135:26 - this id in here in order to the
135:29 - sql alchemy to understand each row that
135:32 - is going to be stored inside our
135:34 - databases
135:35 - so now if we go ahead and create foreign
135:37 - key we can basically say
135:39 - that this foreign key is going to be
135:41 - related
135:42 - to the other modules primary key
135:45 - so we will say in here user dot
135:49 - id and this is related
135:52 - to the each unique row that is going to
135:56 - be stored in that id so it is quite
135:59 - important
136:00 - to write here user dot id in lowercase
136:03 - okay so now i'm back at my terminal and
136:06 - i like to
136:07 - create all the tables from scratch
136:09 - inside our database so we will go with
136:11 - python
136:12 - and we will use here from market.modules
136:17 - import db and then we can basically
136:21 - say db.drop all now this will
136:25 - delete entire information from your
136:27 - database including all the tables
136:29 - so we will say that and then we will
136:32 - recreate
136:33 - everything now i'm doing this just
136:35 - because we want to clean our information
136:37 - before we test
136:38 - new things out but in production when
136:41 - you add a new table you don't always
136:42 - have to delete the entire information
136:44 - basically you could also execute create
136:47 - underscore all but i just wanted to show
136:49 - you that there is the option of
136:51 - drop underscore all as well so now if i
136:54 - go ahead and create everything
136:56 - then if i don't receive arrows then it
136:58 - means that everything looks great
137:00 - now we can continue by importing the
137:03 - modules so we will say
137:04 - import user and item again
137:08 - from our market dot modules now we can
137:11 - basically try to create a new user to
137:13 - see if
137:13 - everything has worked properly so we
137:15 - will say u1
137:17 - equals to user and we will specify the
137:20 - username
137:21 - this will be equal to jsc for example
137:24 - and we will write in
137:25 - password underscore hash this will be
137:28 - equal to
137:28 - just random string of numbers and we
137:32 - will also say
137:33 - email equals to
137:36 - something like the following now if you
137:39 - remember we also have the
137:41 - fields of budget and the owner now
137:44 - i did not specify nullable equals to
137:46 - false on both of those
137:48 - so that means that it should be enough
137:53 - now i guess i missed the email here so
137:55 - we should
137:56 - fix that to underscore address and now
137:59 - we are fine
138:00 - now let's clean the screen a bit we will
138:03 - say
138:04 - os dot system and we will execute
138:07 - this cls inside here and now i can
138:10 - basically
138:11 - go with db.session.ad
138:14 - and we will add the u1 in here and we
138:18 - can commit our changes by saying
138:23 - dot db.session.com okay so now this
138:26 - should be enough for our user to be
138:28 - stored inside our database
138:29 - now to see this we can basically execute
138:33 - user.query.all
138:35 - and then you can see that we have one
138:36 - user with
138:38 - the user one statement right here so it
138:41 - means that everything worked
138:42 - great okay so i cleaned the screen a
138:44 - little bit here so i also want to test
138:47 - up the relationship
138:48 - if it works great so we can basically
138:51 - create several items quickly
138:52 - and set their owners to the user that we
138:55 - have just created
138:56 - and see if everything works well so i
138:58 - will go ahead and say
139:00 - i1 equals to an item and i will go
139:03 - by saying the name equals to iphone 10
139:07 - for example
139:08 - and we will type in description and we
139:10 - will just write in a short description
139:12 - here
139:12 - and we will say barcode equals to
139:16 - a string like that and we will type in
139:20 - price equals to 800 for example
139:24 - so i just missed up the desk we should
139:27 - create the description
139:29 - like that okay so everything works great
139:32 - and i will go
139:34 - by saying db.session.ad
139:37 - and i will add i1 and i will now
139:40 - use commit so we will commit our changes
139:44 - now let's repeat ourselves with another
139:46 - item so i will clean the screen here
139:48 - quickly
139:50 - and i can load the previous commands by
139:52 - using the arrow signs
139:54 - so i can basically change this to i2 and
139:57 - this to laptop
140:00 - and i will change the description to
140:02 - description too
140:03 - and the barcode here will be a little
140:06 - bit different
140:08 - and the price will be 1000 that time
140:11 - and we can repeat ourselves again by
140:13 - saying
140:16 - [Music]
140:20 - like that okay so now we have two items
140:22 - stored inside our database so we can
140:24 - verify this
140:25 - by saying query dot all and now let's
140:29 - try to assign an ownership to the iphone
140:32 - 10 item so
140:33 - we have to go and filter this specific
140:36 - iphone 10 object and we can do that by
140:39 - saying
140:40 - item.query that filter underscore by
140:43 - and i can filter by name equals to
140:47 - iphone 10
140:50 - like that okay so it also makes sense to
140:53 - assign this into a new variable so i
140:55 - will
140:55 - go ahead and with item one i will assign
140:59 - it
140:59 - and now if i access item one then you
141:01 - can see that it returns us a base query
141:04 - and now we can basically use this first
141:08 - method to grab the specific object
141:10 - itself so now
141:12 - i have the item1 object in here
141:15 - and now i want to test up the results if
141:17 - i try to access the attribute of owner
141:20 - and now you can see that it returns us
141:22 - nothing because
141:23 - it doesn't have a owner now to continue
141:26 - from here i can basically
141:28 - say that i want to assign the owner of
141:31 - item 1
141:32 - to the specific object of the user that
141:35 - we have just created previously
141:37 - with the username of jsc so it will look
141:40 - like something
141:41 - like the following so it will be
141:43 - item1.owner
141:44 - and this will be equal to
141:47 - user.query.filter
141:49 - underscoreby and i want to filter by the
141:52 - username equals to
141:54 - jsc and if you remember this entire
141:56 - statement here returns us a base object
141:59 - and we have to access the actual object
142:01 - by saying
142:03 - that first and as i have done that then
142:06 - i can continue on to
142:08 - db.session.com and i can assign the item
142:12 - one and now sorry i should have
142:16 - type in here add great and then
142:19 - i should have continue to commit
142:23 - now as i have done that then we can see
142:25 - a several errors over here
142:28 - now i can see that we have this update
142:31 - item set owner where item.id
142:34 - equals to a question mark now i have a
142:37 - feeling that i know why this happened
142:40 - and it sometimes that always may confuse
142:42 - every one of us
142:43 - and the point is we have to understand
142:46 - that the only way that we can assign the
142:49 - attribute of
142:50 - owner is by specifying the id
142:53 - of the user so if you remember our
142:56 - foreign key
142:57 - is only going to accept the attribute of
143:00 - id
143:00 - so this is why we have done a great job
143:03 - by filtering the specific user
143:05 - but only we had to give it the attribute
143:07 - of id
143:08 - so let's go ahead and fix that so before
143:10 - everything let's clean the screen
143:12 - for a minute so it will be cls inside os
143:15 - dot system
143:16 - and before i actually take different
143:18 - changes inside our item one
143:20 - we have to execute this command which is
143:22 - going to
143:23 - look like db.session.rollback
143:26 - so we can roll back our previous changes
143:29 - and commits
143:30 - and once i execute that if i did not
143:32 - receive any errors
143:33 - then it should be fine and now i will
143:36 - just type in the exact same command
143:38 - that we wrote previously so it will be
143:42 - item1.owner and it will be
143:45 - query dot filter underscore by
143:48 - and we will filter by jsc
143:51 - and after the dot first in here
143:54 - we have to give it the attribute of id
143:58 - and once i have done that then i can
144:00 - basically
144:01 - add it to our session which is clean
144:04 - because we have rolled back the previous
144:07 - commits
144:08 - and now we can try to execute the commit
144:11 - and this should work so if i was to go
144:14 - ahead
144:15 - and see the owner then you can see that
144:18 - it returns us
144:19 - one and the reason it returns as one it
144:22 - is basically because this is the foreign
144:24 - key
144:24 - of the owned user now we can also test
144:27 - this by
144:28 - filtering the item specifically so we
144:31 - can go with i
144:32 - equals to item dot query
144:36 - dot filter underscore by and we want to
144:39 - filter by name
144:40 - equals to iphone 10 like that and now we
144:43 - can basically try to see the back
144:46 - reference of the item that i talked
144:47 - about
144:48 - so if you remember we had that
144:51 - backref attribute set up so if i was to
144:55 - go ahead
144:56 - and execute i dot owned user
144:59 - then we would receive some errors
145:01 - because again i missed the
145:03 - dot first in here and now i can run in
145:07 - on user then you can see that it returns
145:10 - us the actual
145:11 - user that owns this item so this is
145:14 - quite great
145:16 - and this is a great achievement that we
145:18 - have done until now
145:19 - so so i hope you understood everything
145:22 - about how relationships of databases
145:24 - working
145:25 - because it is quite important to be
145:26 - aware of that situation
145:28 - so this is the actual idea of our
145:29 - website right we want to own
145:31 - items as users inside our web
145:36 - application
145:38 - okay so previously we have created our
145:40 - user module
145:41 - but we currently don't have any special
145:43 - way to create users to our website
145:45 - besides the only way to do that will be
145:47 - by our terminal and we are probably
145:49 - looking for a way to customize a nice
145:51 - looking html page for our customers
145:54 - so they will have the ability to
145:56 - register to our website
145:57 - so the way we can do that is by
145:59 - customizing an html form now we probably
146:02 - want to make this form
146:04 - smart enough to check certain things to
146:07 - see if this information is valid
146:10 - so for example you can't create a user
146:13 - if there is already a user with the same
146:15 - name or if your password
146:17 - linked does not meet the requirements of
146:20 - your
146:20 - website or anything else that is quite
146:23 - dealing
146:24 - with validating stuff when it comes to
146:27 - register to
146:28 - a website so in order to create our
146:30 - forms to register smart enough
146:32 - flask delivers already a built-in
146:34 - package to create phones and this also
146:37 - allow us to
146:38 - display it nicer on our html templates
146:41 - so in order to start working with this
146:44 - we need to go ahead to our terminal and
146:46 - install some packages so this is why i
146:48 - will open my terminal here
146:50 - and i will basically type in some pip
146:53 - install commands
146:55 - so the first one will be pip install
146:58 - flask dash and this is the first package
147:03 - that will allow us to
147:04 - create nice looking forms and then later
147:07 - on to display them
147:08 - on our html templates so i will clean
147:10 - the screen here and
147:12 - our second package will be pip install
147:15 - wt forms so you can see that it is
147:18 - already installed probably this was a
147:20 - secondary package under the
147:21 - flask wtf so anyway just write this
147:24 - command
147:25 - as well for safety and let's continue
147:27 - from here
147:28 - okay so as i said previously the forms
147:31 - are going to be a quite different
147:33 - element
147:34 - in our flask application so this is why
147:36 - it totally makes sense to
147:38 - create a python file that we will name
147:40 - it phones.py
147:42 - and then each form that we are going to
147:44 - create for some situation
147:45 - will be stored there so let's go ahead
147:48 - and do that
147:49 - so i will go under my market directory
147:52 - and i will create a new python file we
147:54 - will name it
147:55 - forms and here we will write our forms
147:59 - that we want to display them on our html
148:01 - templates
148:02 - now the way that this is going to behave
148:04 - is quite
148:05 - similar to models because we are going
148:07 - to create classes
148:09 - and then we are going to create some
148:11 - fields inside our classes
148:13 - and then that way those fields are going
148:16 - to be the
148:17 - required fields for our customers that
148:20 - they have to
148:21 - fill in in order to register to our
148:23 - website so let's go ahead and do that
148:25 - but the first step is to
148:26 - actually import those libraries that we
148:28 - have just installed
148:30 - in order to create those forms so i will
148:32 - basically
148:33 - go with form flask underscore
148:37 - wtf import flask form
148:40 - and then we also want to import some
148:43 - special fields
148:44 - that are going to be recognized by a
148:47 - special type of field
148:48 - so for example we might have an integer
148:51 - field for our users if we want to ask
148:53 - them about
148:54 - the year of birth or we might have a
148:56 - string field if we want to ask them
148:58 - about their name
148:59 - so this is why we should go ahead and
149:02 - also import the special fields by saying
149:05 - from wt form import string
149:09 - field now we can also go ahead and
149:12 - import
149:12 - more types of fields but currently we
149:15 - will only start with the
149:16 - string field okay so we will start by
149:18 - creating our register form so it is
149:20 - going to be
149:21 - by saying class register form
149:24 - and this will inherit from the flask
149:27 - form class
149:28 - that we have imported over here so this
149:31 - is why i will type in here flask form
149:34 - so the next thing that i will do here is
149:36 - creating some fields
149:37 - that they are going to be recognized as
149:39 - our form fields
149:41 - so i will start by creating a username
149:43 - field because it totally makes sense to
149:45 - register
149:46 - our users to ask for a username so it
149:49 - will be equal to
149:50 - string field because this is a string
149:54 - and then there is a convention to give a
149:56 - label for each of our fields so i will
149:59 - provide in here label
150:01 - equals to username and i think that will
150:03 - be it for the username field
150:05 - now we are also going to ask the email
150:07 - address from our user so i will go ahead
150:10 - by saying
150:11 - email underscore address equals to
150:14 - the string field again and that time i
150:17 - will
150:17 - label it by email only so this should be
150:20 - enough now i am also going to create two
150:24 - different fields for
150:25 - our passwords so it will be password one
150:29 - and also password two now the reason you
150:32 - want to do this
150:33 - because mostly in each website you see a
150:35 - field about the password
150:37 - and also about the confirmation of that
150:39 - password
150:40 - so this is why it makes sense to create
150:42 - two separated fields
150:44 - and then later on we are going to write
150:46 - a validation
150:47 - that is going to check if password one
150:50 - is equal to password two so we can
150:52 - submit the register form successfully so
150:55 - to create this
150:56 - a string field is not considered as a
150:59 - best
151:00 - practice because the wt forms has a
151:03 - dedicated field
151:04 - for password fields so i will go here
151:08 - and i will import it by saying password
151:11 - field and then i will create it as a
151:14 - password field over here
151:16 - like that and i will close the
151:18 - parentheses and the same
151:20 - will be for the password tool as well so
151:23 - i will create it as a password field
151:25 - now let's give it their labels as well
151:28 - so it will be password1
151:30 - for the label of that and for the label
151:33 - of password2
151:34 - it will be password2 alright so now that
151:37 - we have created those fields
151:39 - we also have to create the field that
151:42 - will allow the users to
151:43 - submit their actual information now when
151:46 - you see some forms
151:47 - not only you'll see areas where you have
151:50 - to fill in some information
151:51 - but you also see a button that you have
151:53 - to submit your final information so this
151:56 - is why i will create a field
151:58 - that is going to be by the type of
152:00 - submit so i will go
152:02 - to our second line here and i will
152:05 - import
152:05 - that submit field and then i will create
152:08 - one submit field so
152:10 - it will be submit equals to submit field
152:13 - and again its label is going to be
152:16 - submit
152:16 - so i think this should be enough for now
152:19 - for
152:19 - our registered form later on we are
152:22 - going to go back to that register form
152:24 - to write some validations in order to
152:27 - make our form more secure okay so now it
152:30 - is a great idea to
152:32 - import this registered form class from
152:35 - our routes now we currently don't have
152:38 - any route for our registration page
152:40 - so let's go ahead and create one so i
152:43 - will go to my
152:44 - routes dot py and i will zoom in the
152:47 - phone here and i will
152:48 - start creating a new route for our
152:51 - register page
152:52 - so it will be at act dot route
152:56 - and i will navigate our users to forward
152:58 - slash
152:59 - register and then we will create this
153:02 - register page route
153:03 - by calling this function register page
153:06 - now the first step here would be to
153:10 - import that form from the forms dot py
153:13 - so i will go up top here and i will
153:16 - import it
153:17 - by saying from market dot forms
153:21 - import register form
153:24 - and inside that function i will
153:26 - basically
153:27 - use the register form class to create
153:30 - one instance of it so it will be form
153:33 - equals to register form and i will close
153:37 - this up
153:37 - like this now as we have completed that
153:40 - we have to look up for a way to display
153:42 - the fields of that phone
153:44 - inside an html page now the way that we
153:47 - can do that is for sure by
153:49 - rendering a template with the name of
153:51 - register for example and then we can
153:53 - pass as information
153:55 - our form instance so we will say
153:58 - here return render underscore template
154:01 - and then we will send
154:03 - our users to a template named
154:06 - register.html
154:07 - and i know that we did not create it yet
154:09 - but we will do it very shortly
154:11 - and the information that we want to send
154:13 - to that template
154:15 - will be that form instance that we have
154:17 - created here
154:18 - so it will be form equals to form
154:22 - and i think that will be enough for this
154:23 - stage and now let's go ahead and create
154:26 - this register.html
154:28 - template so it will be here and i will
154:31 - basically create a new html
154:33 - file we will name it register
154:36 - and then we will replace it with some
154:39 - html code that is going to be
154:41 - responsible
154:42 - to display that form in a very nice way
154:45 - now i will delete the auto generated
154:47 - html and i will start by
154:49 - for sure extending our base template so
154:52 - if you remember we have our base
154:54 - template
154:55 - that we have to inherit when we create a
154:57 - new template
154:58 - so it will be curly brackets and then
155:00 - the percentage signs
155:02 - and then the closure for our curly
155:04 - brackets
155:05 - and between those we will type in
155:07 - extends
155:08 - and then we will extend our base.html
155:12 - now as i have completed that we have two
155:15 - blocks that we should use and then
155:18 - contain some information
155:20 - inside there so if you remember we had
155:23 - inside our
155:24 - base dot html a blog title
155:27 - and also a blog content
155:30 - so i will copy the blog title and i will
155:34 - paste this in
155:35 - and i will also copy the blog content
155:39 - and i will paste this in as well now
155:42 - let's fix
155:42 - the indentation here a little bit and
155:46 - we will continue from here now if you
155:48 - remember in the blog title we are
155:50 - allowed to provide
155:51 - information that is going to be
155:53 - displayed as our tab names
155:55 - so it makes sense to type in something
155:57 - like
155:58 - register page and in here let's actually
156:01 - give a random information currently to
156:03 - test
156:04 - if everything works properly so i can
156:06 - validate myself by only writing some
156:08 - basic html code so
156:10 - let's write in here register form inside
156:13 - the h1 tag
156:14 - all right so we have one more step to
156:16 - complete before we can go ahead and
156:17 - actually test this out
156:19 - and that will be to create a special
156:21 - secret key
156:22 - that is going to be identified as the
156:25 - secret key of our flask application
156:27 - now the main reason that you want to do
156:29 - that in this stage
156:30 - it is because if you go ahead and test
156:33 - the
156:34 - form out right now nothing is going to
156:36 - show up because when you create
156:38 - forms in html you actually have to
156:41 - provide one more security layer
156:43 - in order to show this form up and that
156:45 - is simply because we change our request
156:47 - type to our clients
156:48 - so until now we were able to display
156:51 - html pages
156:53 - for our clients but when it comes to
156:55 - forms
156:56 - now our clients are going to be able
156:59 - to submit actual information towards our
157:03 - database so
157:04 - this is a quite different action that
157:06 - must be secure enough
157:07 - so this is why we have to create a
157:09 - secret key
157:10 - for our flask application so the way
157:12 - that we can do that
157:14 - is by generating some series of
157:16 - characters that
157:17 - is going to be used as our secret key
157:20 - so i will open our terminal and i will
157:23 - go
157:23 - inside python and i will import the os
157:26 - library because
157:27 - simply we can generate there a
157:29 - hexadecimal random characters
157:31 - so it will be by import os and then we
157:34 - can basically go ahead and say
157:37 - os dot u random and then we can provide
157:40 - here the value of 12 so it will be by
157:43 - the value of 12 bytes and then we can
157:46 - basically
157:47 - go ahead and convert this to hexadecimal
157:50 - values
157:51 - and then the value that we'll be
157:52 - receiving back would be the secret key
157:55 - that we auto generated for our
157:57 - application
157:58 - now there is nothing wrong with going
158:01 - ahead and generate
158:02 - more secret keys but just make sure that
158:04 - if you
158:05 - use one then stick to it throughout the
158:07 - development of that application
158:09 - so let's grab this secret key
158:13 - and go back to our python and
158:16 - navigate inside our init.pi and then
158:19 - here we have to
158:20 - write in some new configuration so it
158:23 - will be app.config
158:26 - and then our key here will be secret
158:29 - underscore key
158:30 - and if we paste this in right there
158:33 - and this should be inside single quotes
158:36 - as well
158:36 - then this should be enough to display
158:39 - the form
158:40 - that we just created so i will go back
158:43 - to my terminal
158:44 - and we can exit the python shell now and
158:47 - we can basically
158:49 - execute our application with python
158:51 - run.py and then we can navigate
158:54 - back to our website and try to see what
158:57 - will happen
158:58 - if i go to fort slash register and then
159:01 - you can see that we have our page up and
159:04 - running so this is quite great
159:06 - now one more thing that i like to do
159:07 - before we continue is to
159:09 - actually configure that navbar button
159:12 - where we can click on it and then this
159:14 - will lead us to the route of the
159:16 - register page
159:17 - so if you remember previously we learned
159:19 - about the url underscore 4
159:22 - built in so let's go ahead and configure
159:25 - that so it will be as easy
159:27 - as going to our base dot html
159:30 - and identify that register page
159:34 - which is right there so this is the
159:36 - anchor tag for our register page
159:38 - and if you remember from previous
159:40 - examples
159:41 - for example for the home page we use
159:44 - this built-in
159:45 - url for function so i will allow myself
159:48 - to copy the
159:49 - exact statement and paste this in
159:52 - inside our href attribute and then this
159:55 - could be
159:56 - changed to register underscore page
159:59 - and now we can test this out by
160:02 - refreshing our page
160:03 - and for example navigate to our four
160:06 - slash home
160:07 - and we can click on slash register then
160:10 - you can see that it works great so now
160:12 - we can continue on customizing that form
160:15 - okay so i'm back in my register.html
160:18 - and in here you could notice how i
160:20 - deleted the code inside our blog
160:23 - content now inside the content we are
160:26 - going to
160:26 - put the form itself and the way that we
160:30 - can access the form instance
160:32 - is referring to the variable that is
160:34 - passed from our route
160:36 - with jinja syntax so it will be by
160:38 - saying
160:39 - form within double curly brackets so
160:42 - just to check if this works properly we
160:44 - can basically navigate back to our
160:46 - website
160:47 - and see what happens if we go with fold
160:50 - slash register
160:51 - then you can see that we see the object
160:54 - itself of the form
160:56 - so this means that we can access the
160:57 - form itself now to access the actual
161:00 - fields and to visualize them better we
161:03 - are going to
161:04 - take some different actions in here so
161:06 - we have to
161:07 - create the form tag which is a built-in
161:10 - tag in html syntax
161:12 - and we also have to specify some more
161:14 - attributes in order to
161:16 - the form to work successfully so one of
161:18 - them will be the meta type
161:20 - now i did not talk about request methods
161:22 - before but basically when it comes to
161:25 - websites
161:25 - you have a lot of request methods that
161:28 - the clients can provide and the most
161:30 - known request method will be the get
161:33 - method where
161:34 - clients are requesting to display some
161:36 - information
161:37 - on different web pages but there is also
161:40 - one more different request method that
161:42 - is called
161:43 - post and the post request is a kind of
161:46 - request that is going to
161:48 - affect the database of your website
161:51 - so since this is a critical action to
161:54 - take as a website client
161:56 - then you have to specify that the method
161:59 - is going to be
162:00 - post so it is important to provide this
162:03 - kind of information in here
162:05 - and i will continue on by saying class
162:08 - equals to form dash register and the
162:11 - last attribute in here
162:13 - will be the styling so we want to style
162:17 - our
162:17 - foreground color to white so it will be
162:20 - color
162:21 - column white so i'm doing this because
162:23 - we are working on dark mode
162:25 - and it is quite important to have the
162:27 - foreground color
162:29 - set as white okay so inside
162:32 - our form tag we can basically refer
162:36 - to our form fields by
162:39 - saying so i will open the curly brackets
162:42 - one more time
162:42 - in here and i will first call the label
162:45 - of our form fields
162:47 - and then i will call the field itself so
162:50 - you will see the effect of that just in
162:52 - a second
162:52 - so i will say form.username dot
162:55 - label and i will open and close the
162:58 - parenthesis here
162:59 - and below that we can say form dot
163:02 - username
163:03 - and i can open the parentheses and close
163:06 - them up here again
163:08 - now what is so special with that flask
163:10 - forums
163:11 - is that this statement is going to
163:14 - accept attributes
163:15 - like in real html code so we could say
163:19 - here
163:19 - class and then we could basically give
163:22 - it a bootstrap
163:23 - class so i will say form dash control so
163:27 - it will be responsible to
163:28 - display that field a little bit nicer
163:30 - and we can also give it a placeholder so
163:33 - our clients
163:34 - can understand that this field is
163:37 - designed for providing the username so
163:39 - we can say
163:40 - first of all let's add a comma here and
163:42 - we can say placeholder
163:45 - equals to user name
163:48 - like that and let's see the actual
163:50 - results of a code
163:52 - like this so if i'm going to our web
163:55 - browser
163:56 - and refreshing that out then you can see
163:58 - that we see
163:59 - an empty field where we can provide some
164:02 - information
164:03 - now i know that this looks quite ugly
164:06 - and
164:06 - in most of the websites the information
164:09 - of filling a form
164:11 - is starting not from the left position
164:14 - so we can fix that by containerizing
164:18 - those fields inside one more
164:21 - special html field so let's go ahead and
164:25 - do that so i will open our pycharm
164:28 - and in here we can containerize our
164:32 - form inside div tag so i will allow
164:35 - myself to
164:36 - type in here the class container
164:40 - so i will allow myself to paste this
164:42 - form
164:43 - inside those div tags and let's fix the
164:47 - indentation here a little bit and then
164:49 - let's test out
164:50 - the differences so i will refresh this
164:53 - out now
164:53 - you might be bothered by the results
164:56 - from that username in here
164:57 - but this is something that we can change
165:00 - in our forms dot py so this is the
165:04 - label of our username field so we called
165:07 - basically open
165:08 - our forms dot py and we could change
165:12 - the label so now you can understand what
165:14 - the label
165:15 - does it basically gives a kind of
165:17 - secondary title
165:19 - for our fields so we called say here
165:22 - user name like that and we could also
165:25 - change
165:26 - that to email address
165:29 - like this and we could also add
165:32 - here password like the following
165:36 - and we could also change this to confirm
165:41 - password like that so it makes a lot of
165:44 - sense to display the label of our
165:46 - password tool as confirmed password
165:48 - because it probably looks nicer to our
165:50 - clients so let's see the results of that
165:52 - so if i refresh it
165:54 - then you can see that we have a nice
165:56 - secondary title
165:57 - for that field now the way that we are
165:59 - going to continue
166:01 - is going to be by copying and pasting
166:04 - those
166:04 - form labels and the form fields itself
166:08 - so we can basically copy and paste
166:10 - ourselves
166:11 - four times and we can change this to
166:14 - email
166:15 - we can also change that to email as well
166:18 - and we can change the placeholder to
166:21 - email
166:22 - address like that and we can
166:26 - do this for our passwords as well
166:29 - so i will paste this in over here
166:32 - and this will change to password
166:36 - one and this is going to be changed to
166:40 - let's scroll down password in here
166:44 - and this is going to be password one as
166:47 - well
166:48 - great so now i can duplicate this one
166:52 - more time and we can change this to
166:55 - password tool
166:56 - we can change this to password two and
166:58 - this will be
166:59 - confirm password now to test the results
167:03 - of that
167:04 - we can refresh it you can see that we
167:07 - receive an
167:08 - error and that is fine because
167:11 - we defined the email field as email
167:14 - underscore address so
167:16 - let's fix that quickly so it will be
167:18 - underscore address
167:20 - and underscore address as well now you
167:23 - can see that
167:24 - i trained to not cut the arrows that i
167:27 - received throughout this video sometimes
167:29 - because
167:30 - i really want you to be aware of the
167:32 - possible arrows that you can
167:34 - meet throughout the process of writing
167:36 - any html code
167:37 - or any python related code so this is
167:40 - the reason that
167:41 - i'm okay with the arrows and handling
167:44 - them on the fly
167:45 - okay so i will refresh that out then you
167:47 - can see that we
167:48 - receive a lot of nicer form in here now
167:52 - i want to give a nice image
167:54 - for this form and i also want to give a
167:56 - h1 tag
167:57 - so the users can see a nice big title
168:01 - now the code that i'm going to paste in
168:03 - here you can find it from my website
168:05 - because i put all the code snippets in
168:07 - the flask tutorial section
168:09 - which you can find in my courses so
168:12 - i will paste it in over here and
168:16 - you can see in the first tag here
168:19 - that i have an image tag which is going
168:22 - to be
168:22 - responsible simply displaying the logo
168:25 - of my website
168:26 - and the h1 tag in here that is going to
168:29 - say to our users
168:31 - please create your account so let's just
168:33 - fix the indentation in here
168:36 - and i think this should be it and i also
168:39 - want to add here a
168:40 - break line tag so we can have a
168:43 - separation
168:44 - between our header to our fields
168:47 - okay so if we test the results then you
168:50 - can see that we have a
168:52 - great result where we see the logo of my
168:56 - website
168:56 - and we also have a nice title now
168:59 - it could be a lot better if we could
169:02 - centralize
169:03 - these objects so this is something that
169:06 - we
169:06 - also can apply and the way we can do
169:09 - that
169:10 - is by going in here and overriding
169:13 - the body tag of our html
169:17 - file so i will allow myself to make the
169:20 - font a little bit smaller here
169:22 - and what we can do here is basically
169:25 - wrapping the entire
169:27 - div with a body tag so we can
169:31 - say here body and then we can basically
169:35 - use the class
169:36 - of text dash sender and we can close
169:40 - this out and we can move the closure of
169:43 - our body
169:45 - to the very last line just above the end
169:49 - block and now if i refresh that
169:52 - out then you can see that we receive a
169:55 - nice looking form
169:56 - where everything looks pretty clean in
169:58 - my opinion now there is one more thing
170:00 - left that
170:01 - is remained to close out this form and
170:04 - this is the submit field that is missing
170:07 - in here
170:08 - so we can basically go back to our
170:11 - register.html
170:12 - and we can add it in here so i will
170:16 - call the ginger syntax in here by using
170:19 - the double curly bracket
170:20 - and i will call the submit field so it
170:22 - will be form dot
170:23 - submit and now in here we can provide
170:26 - some bootstrap classes as well so it
170:28 - will be
170:28 - class equals to and then we will type in
170:31 - the
170:32 - classes that we want to include to
170:34 - customize this submit button a little
170:36 - bit better so it will be btn
170:38 - and i will type in btn-lg which will
170:41 - responsible to display this button
170:43 - larger and i will also
170:44 - say btn-block and this will expand
170:47 - the button to the entire forum and i
170:50 - will also type in
170:52 - btn-primary so this should be
170:54 - responsible to display the button
170:56 - in a nice blue colored version so i will
170:59 - save this out
171:00 - and i will also add in here one more
171:04 - vr tag so we will have a nice separation
171:06 - between those
171:07 - and okay so now we can basically test
171:10 - the results
171:11 - by refreshing this page and now you can
171:14 - see that we
171:15 - got the submit button but we have the
171:17 - annoying
171:18 - submit text with all the lowercase now
171:21 - this
171:21 - happens because of the labels
171:25 - that we have created for each of our
171:27 - field again so we should
171:28 - change this to something like create
171:32 - account and once i have done that then i
171:35 - can
171:35 - verify myself by refreshing it now you
171:38 - can see that we receive a nice button
171:41 - for the create account now nothing is
171:44 - going to happen
171:45 - when i click on create account and when
171:47 - i fill in some information
171:49 - and actually this is something that we
171:50 - have to handle in a separated way
171:53 - inside our routes.py and we will do that
171:56 - very soon
172:00 - all right so until now we were not able
172:02 - to configure the
172:03 - behind the scenes actions of what
172:05 - happens when we create the
172:07 - create account button now to do this we
172:09 - have to go to our routes.py file
172:12 - and then we have to go for the route
172:15 - where the register form is located
172:17 - and then write some pure python code
172:19 - over there so to do this i will open
172:21 - my python and in here i can basically
172:24 - handle
172:25 - what happens when the user submits on
172:28 - the create account button
172:29 - so the best practice in that case will
172:31 - be to start by
172:33 - this conditional so it will be if form
172:36 - dot validate on submit
172:40 - now there are two main reasons that
172:43 - you want to execute this conditional
172:45 - before you
172:46 - actually go ahead and submit changes
172:48 - into your database okay so the first
172:50 - reason you want to execute that
172:52 - is you'll want to verify that those
172:55 - comments that
172:56 - i'm going to write in here are only
172:58 - going to be executed when the user is
173:00 - submitted on that button
173:01 - so this on submit part is actually
173:05 - checking if the
173:06 - user has clicked on the submit button of
173:09 - that form and the second reason you want
173:11 - to execute this
173:12 - it is mainly because we are going to
173:14 - write some validations
173:16 - that are going to check for certain
173:18 - requirements
173:19 - before this form becomes valid so i'm
173:22 - talking about conditions like you see
173:24 - in real register pages in real websites
173:27 - for example your password
173:29 - should be matched or your user
173:32 - name should not contain more than 20
173:35 - characters and stuff like that so this
173:37 - is why it is very important to
173:38 - execute this conditional in here and
173:41 - once this returns true
173:42 - then i can basically go ahead with
173:46 - user to create
173:49 - like that and i will make that to be
173:50 - equal to an instance
173:52 - of user and it is a great idea to
173:55 - import it from the market.models in here
173:58 - so i will basically add a comma and i
174:01 - will import the user
174:03 - and once i have done that then i can
174:05 - basically give the arguments that are
174:07 - required to create a user so i will
174:10 - start by saying
174:11 - username equals to and in here i
174:14 - actually want to provide the value
174:16 - that is received from the username field
174:19 - within
174:20 - the form so i can do this by saying from
174:24 - dot username dot data so this is the way
174:28 - that we are going to pass
174:29 - our fields from the form and i will
174:31 - continue on doing this
174:33 - with the email address as well so i will
174:35 - say email underscore address
174:37 - equals to form dot email
174:41 - underscore address dot data and i will
174:44 - perform the exact same action with
174:47 - password so
174:48 - it will be password equals to
174:51 - form dot password one and in here i'm
174:54 - passing password one
174:55 - by purpose and you will see in a few
174:57 - minutes why i am doing this
174:58 - so i will say that data in here again
175:02 - okay so this should be enough to create
175:04 - the instance of our user
175:06 - and once i have done that then i can
175:08 - basically execute the same commands
175:10 - to submit the changes towards our
175:12 - database
175:13 - so it will be db session dot add
175:17 - and i will pass in the argument of user
175:20 - to create and i know that we did not
175:23 - import the
175:24 - db variable in here so it is a great
175:27 - idea to import it
175:29 - now i will go down here and
175:32 - i will say from market import
175:36 - db now the reason i can import it
175:38 - directly from the
175:39 - market package it is mainly because it
175:42 - is located in the
175:43 - under init file so i don't have to go
175:46 - inside
175:46 - dot something okay so it is quite great
175:49 - to import it
175:50 - that way and now i will go back to our
175:52 - route
175:53 - and i will say
175:56 - dot db.session.com and this will save
175:59 - our changes to the database and once we
176:01 - have done that
176:02 - then we probably want to redirect
176:05 - our users to a different page now
176:08 - it quite makes sense because now they
176:10 - are registered to
176:12 - the website and now we can show the user
176:16 - the items that are available on the
176:18 - market so i will use the built-in
176:20 - redirect function
176:22 - that the flask package offers us so i
176:24 - can go
176:25 - up here and i can go for that line
176:28 - and i can basically import the built-in
176:32 - function which is called redirect and i
176:34 - will also import the built-in
176:36 - url underscore four function that we
176:39 - used
176:40 - previously in our templates so we will
176:43 - go
176:44 - down here and we will see how we can
176:46 - redirect our users to a different page
176:48 - after the user is clicking on the create
176:51 - account
176:51 - button so i will go right after our
176:54 - commit
176:55 - command and i will say return
176:58 - redirect and in here the redirect
177:01 - function
177:02 - expects for an hard-coded url now if you
177:05 - remember previously
177:06 - in that tutorial we said that it is not
177:09 - a great idea to
177:10 - give arguments as a hard-coded urls
177:14 - so besides doing this i will say url
177:18 - underscore
177:18 - form and i will give the url underscore
177:22 - for the name of the route itself so it
177:25 - will be
177:25 - market underscore page and this should
177:29 - send our
177:30 - users right to here so it is quite
177:34 - great okay so we can just test this out
177:36 - by going back to our chrome browser
177:39 - and refresh that out and then now let's
177:42 - try to create a random account and see
177:44 - what happens okay so we will
177:46 - say here jsc 2 for example and we will
177:49 - fill
177:50 - in some dummy email and i will just type
177:54 - in
177:54 - very basic password and i will try to
177:56 - create account
177:57 - now you can see that we receive method
177:59 - not allowed and actually there's a
178:01 - reason that i wanted us to
178:03 - see this message because it is quite
178:05 - important to apply
178:06 - the step that i'm going to talk about
178:08 - now when it comes to web requests we
178:11 - said that we have several
178:12 - request methods and we should allow our
178:15 - routes
178:16 - to handle post requests and the way that
178:18 - we can do that
178:20 - is by customizing the decorator of our
178:22 - route function
178:24 - so i will go right here and i will say
178:28 - methods equals to and i will open here a
178:31 - list and i will insert two elements
178:35 - and i will give get and i will also give
178:38 - post okay so it is important to apply
178:40 - this step so our
178:42 - route could handle post requests and
178:45 - before we continue
178:46 - sorry about that but i think that we
178:48 - mismatched this line in here
178:50 - and this should be password underscore
178:53 - hash
178:54 - equals to form.password1.data so make
178:58 - sure to fix that
178:59 - before you continue alright so once we
179:01 - have enabled the post
179:03 - request in that route then there is one
179:06 - more important step that we have to
179:07 - configure before we test this out
179:09 - now when you send information from
179:12 - client to a server
179:13 - then it gives a huge opportunity to the
179:15 - hackers out there
179:16 - to steal that information and one of the
179:19 - known
179:20 - malicious attacks is called cross
179:23 - site request forgery and this
179:26 - attack is basically just a way to steal
179:29 - or perform
179:30 - actions against your database that are
179:32 - unwanted
179:33 - and to protect our website from such an
179:36 - attack
179:37 - flask delivers us a very easy future to
179:40 - apply a protection
179:41 - so the way that we are going to do that
179:43 - is as easy
179:44 - as going to our register.html
179:48 - and right under our form method post
179:51 - html tags we are basically going to
179:55 - say so we will open our curly brackets
179:58 - to
179:58 - refer to ginger syntax and we will
180:00 - easily say
180:01 - form dot hidden underscore
180:05 - tag and what this is going to do it is
180:08 - going to protect us from the
180:10 - attack that i was talking about by
180:12 - generating some
180:13 - token that is basically again just going
180:16 - to protect us from such an attack
180:18 - and okay now we can save that file and
180:20 - once we have completed this
180:22 - let's actually test if our website is up
180:25 - and running
180:26 - and we will now go to our website and we
180:29 - will
180:30 - navigate to our register page and we
180:32 - will try to create a new account
180:34 - so it will be jc2 for example and we
180:37 - will try to provide in some random email
180:40 - here
180:41 - and we will try to fill in some password
180:44 - and now if i'm going to press on create
180:46 - account and going to be redirected to
180:48 - the market page
180:49 - then it means that the user has been
180:51 - created and if i click on that
180:54 - then you can see that this is the exact
180:56 - result so that means that we have
180:57 - created
180:58 - this account and we can test this by
181:01 - easily
181:02 - going to python shell and type in
181:04 - user.query.org
181:06 - and this will be responsible to give all
181:08 - the users and we probably will see the
181:10 - jsc tool
181:11 - account that we have just created okay
181:14 - so although now we have the ability to
181:16 - register
181:16 - users we did not set up any special
181:19 - policy
181:20 - regarding to how we want to register our
181:23 - users
181:24 - and what i mean by that is you saw
181:26 - previously
181:27 - how i created a user with a password
181:31 - that only contains six characters and we
181:34 - did not even write a python code
181:36 - anywhere in our project
181:37 - that verifies that the password and the
181:41 - confirm
181:41 - password are match so this is very
181:44 - wrong when it comes to web applications
181:47 - and not secure
181:48 - and actually this is a huge bug now to
181:51 - solve this we can basically write in
181:54 - some
181:54 - validations to solve that problem and
181:57 - then those validations are going to be
181:59 - executed before the form is submitted
182:03 - and the way that we can do that is by
182:05 - the flask validations
182:07 - package that is offered by the flask
182:10 - itself so let's go ahead and
182:12 - try to apply some validations to
182:15 - see that the data that we are receiving
182:18 - is actually
182:19 - valid so i will make the font a little
182:22 - bit bigger here
182:23 - and i will say down here from
182:26 - wt forms dot validators
182:30 - and in here there are a lot of built-in
182:32 - classes
182:33 - that are going to check for certain
182:36 - validations
182:37 - so let's say that we want to validate
182:39 - that the
182:40 - username length is maximum 30 characters
182:44 - and
182:44 - minimum two characters so we can do that
182:46 - by importing a
182:48 - built-in class that is called linked
182:51 - and now once i have done that then we
182:54 - can go
182:55 - inside our username field and we can
182:58 - call the validators argument
183:02 - and basically we can say that we want to
183:04 - validate
183:05 - the length so it will be length
183:08 - and then i will open the parenthesis
183:10 - here and i will say minimum
183:12 - equals to 2 and i will also say
183:15 - max equals to 30. so
183:19 - what this line of code does it basically
183:22 - verifies before the submission that the
183:25 - username value includes between 2
183:28 - to 30 characters and we can write more
183:31 - validations like that in each of the
183:34 - fields that we
183:35 - want so let's say that we want to apply
183:38 - the exact
183:39 - same step for our passwords so it will
183:41 - be as
183:42 - easy as going to our password one field
183:46 - and say valley datos again
183:49 - and this will be equal again to a class
183:52 - of length
183:52 - i mean an instance of the length class
183:55 - and we can now provide here
183:57 - minimum equals to six and i actually
184:00 - don't want to set a maximum
184:01 - value for our passwords because if our
184:04 - users want to
184:05 - have a huge password then it is quite
184:07 - okay
184:08 - now we could copy the exact
184:11 - validation to our password tool as well
184:14 - but we probably want to avoid that
184:17 - because if this validation is going to
184:19 - be executed on password one
184:21 - then we probably don't need to execute
184:23 - it again on our password too
184:24 - because we want those fields to be
184:28 - matched and as i said that how we are
184:30 - going to verify
184:31 - that password two matches password one
184:34 - well the way that we can do that is by
184:37 - importing
184:38 - one more class from the
184:41 - wtforms.validators
184:42 - and we can basically check if password2
184:45 - is equal to password1 when the form is
184:48 - submitted
184:49 - so it will be as easy as importing the
184:52 - equal
184:53 - to class here and go to our password
184:56 - tool
184:57 - and say validators equals to
185:01 - equal to and then in here we will
185:04 - pass in as a string our field that we
185:08 - want to verify that it's equal to so it
185:10 - is
185:11 - password one and it is quite important
185:14 - to
185:14 - write this down because that is what is
185:17 - going to verify
185:18 - that the password and the confirm
185:20 - password are
185:21 - match now if you remember the password
185:24 - too is the confirm password and you can
185:26 - memorize this because we have this label
185:29 - in here
185:30 - so this is actually a very important
185:32 - validation okay so
185:33 - some more validations that we want to
185:35 - provide in here
185:36 - is probably to check if the ad sign is
185:39 - located
185:40 - in the email address and the way that we
185:42 - can do that
185:43 - is also as easy as importing the
185:46 - email class from the validators
185:49 - and we can just say validators
185:53 - equals to email and this is easily going
185:56 - to check if the
185:57 - given value in the email address is
186:00 - actually
186:00 - an email address and one more thing that
186:02 - we can do with the validators
186:04 - we can basically give one more
186:06 - validation to each field
186:08 - and it will be as easy as converting the
186:11 - validator's
186:12 - value to a list in each of our fields
186:15 - so let's go ahead and do that we will
186:17 - just add square brackets
186:19 - in the end and in the beginning of each
186:21 - our values
186:23 - so i will do that in here and i will
186:25 - also
186:26 - do that in here and i will do that
186:29 - in the password too as well now there is
186:32 - one more reason that i have done this
186:33 - because we also want to verify that each
186:36 - of our fields
186:37 - are filled in with some information so i
186:40 - can basically
186:41 - import the data required class here
186:45 - and i can add one more validation by
186:48 - going here
186:49 - and press comma and now we can type
186:52 - data required and close this up like
186:55 - this and we probably want to copy and
186:58 - paste
186:58 - the same validation for each of our
187:01 - fields because we want them to be filled
187:03 - up
187:04 - so i will copy this out and i will paste
187:07 - this in
187:08 - in here and as well as in here and also
187:12 - in here and i will just go back to
187:15 - here and i think we are pretty much done
187:18 - with all the
187:19 - validations that we want to apply
187:22 - okay so now that we have completed this
187:24 - let's see
187:25 - in our routes dot py how we are going to
187:28 - handle
187:29 - those validations so we will open
187:32 - our routes dot p y and we will
187:35 - zoom in here a little bit and down
187:38 - here we want to check if some of the
187:42 - validations are failing or not so for
187:45 - example let's say that we had
187:47 - a user that provided a username with
187:50 - only a one
187:51 - character well in that case it is quite
187:53 - obvious that
187:54 - our python conditional is not going to
187:57 - go inside our form dot
187:59 - validate on submit because one of the
188:02 - validations
188:03 - are not meeting our requirements to
188:05 - create a user successfully
188:07 - so to check for errors that are arriving
188:10 - from the
188:11 - validations it is as easy as checking
188:14 - the
188:14 - form dot errors so if one of our
188:18 - validations are going to fail
188:20 - then it is going to be stored inside
188:22 - this field
188:23 - and since it is a built-in dictionary
188:26 - field
188:27 - then we probably want to check if it is
188:29 - empty
188:30 - or not before we actually put in some
188:33 - more python code
188:34 - so i will say if form
188:38 - dot errors is not equal to
188:41 - empty dictionary and what i say by
188:44 - writing this conditional
188:46 - is just as easy as saying if there are
188:49 - no arrows that
188:50 - are arrived from the validations so i
188:52 - will comment this out
188:54 - if there are not arrows
189:00 - from the validations like that okay so
189:03 - it is quite important to write in this
189:05 - conditional
189:06 - and once i have done that then we can
189:09 - basically
189:09 - iterate over the arrows that are
189:12 - arriving
189:12 - from the validations so since there
189:15 - could be more than one
189:16 - validation error then we have to iterate
189:19 - over
189:20 - the form.arrow so it will be for
189:23 - err message so just a shortened way to
189:26 - say
189:27 - error message in form
189:30 - dot arrows and as i said that this is a
189:33 - dictionary then we can basically
189:35 - access the values of that so i will say
189:38 - dot values
189:39 - and i will close this up and we will
189:42 - enter this conditional
189:43 - and temporarily we will basically print
189:46 - the message in the server side
189:47 - so i will just print the message and
189:50 - then we should see the error message
189:52 - in the python shell where we see certain
189:55 - logs
189:55 - about our web server that is running so
189:58 - i will basically print the error
190:00 - msg up and it is a better idea to
190:03 - actually write a formatted message
190:05 - so it will be something like there was
190:08 - an error
190:10 - with creating a user and then
190:14 - we will call the variable that we are
190:17 - iterating on
190:18 - okay so i think that we are all set up
190:21 - to test
190:22 - if that works properly so now i will
190:25 - open
190:26 - our website on the left pane and i will
190:30 - locate our terminal in the right pane
190:33 - okay so we can be aware if there are
190:36 - going to be any arrows
190:37 - when we create a user so now i will try
190:40 - to register
190:41 - and i will verify that our website is
190:44 - running so i will execute python
190:46 - run dot py and now we can see that we
190:49 - receive
190:50 - an unexpected exception here so it says
190:54 - that let's actually
190:57 - see it like that it says that we must
191:00 - install the email underscore
191:02 - validator for email validation
191:05 - support so i will say down here pip
191:08 - install email underscore validator so
191:12 - just make sure to run that
191:14 - and i believe this should solve the
191:16 - problem so once we go ahead
191:18 - and install this up and now we can run
191:21 - our web server again
191:24 - and now i see that everything works
191:26 - properly now we can refresh this
191:28 - and we are right in the register page so
191:31 - now
191:31 - i want to create a user with only a one
191:36 - character so it will be just j and i
191:38 - will put
191:39 - a valid email address so
191:42 - just something like that and i will not
191:45 - mismatch the password
191:46 - by purpose so i will create an account
191:48 - and then you can see that it did not
191:51 - redirect us to the items page
191:54 - unlike the previous result and in our
191:57 - web browser we can see that we received
192:00 - there was an error creating a user
192:03 - and we can also see that we have here
192:06 - field must be between 2 and 30
192:08 - characters
192:09 - along so what that means it means that
192:12 - our
192:12 - validations are working properly
192:15 - now if we want to test multiple
192:18 - validations that are going to
192:19 - fail then we can basically try to
192:22 - mismatch the email in here by writing
192:25 - some numbers
192:26 - and we can unmatch the password and
192:29 - confirm password
192:31 - and we can try to click on create
192:32 - account and now we can see
192:34 - multiple arrows so we have the there was
192:37 - another creating a user
192:39 - with this message and we also have it
192:42 - for the message here as well
192:46 - and i think we saw this twice because i
192:48 - was looking up here
192:49 - so sorry and there should be three
192:52 - arrows so
192:53 - the third is that field must be equal to
192:55 - password one
192:56 - and we also see that invalid email
192:59 - address
193:00 - and i think that this explains that our
193:03 - validations are working
193:04 - perfect because we saw the results
193:08 - as expected now i know that this is not
193:11 - a
193:12 - great idea to display those kind of
193:14 - messages
193:15 - on the server side and in the near
193:18 - future
193:19 - we are going to turn those messages and
193:22 - we are going to
193:23 - flash them up right in our website
193:26 - so it is going to be very cool to do
193:28 - that because this way
193:30 - our users could also be aware of the
193:32 - different
193:33 - arrows that are arriving from the
193:36 - validations
193:39 - all right so if you remember this was
193:42 - the line that was responsible to display
193:46 - some errors within the terminal of
193:49 - our web server now to change this to
193:52 - being
193:53 - displayed on our html templates flask
193:56 - gives us a built-in function that is
193:58 - called
193:59 - flash and this is basically a function
194:02 - that will allow us to display
194:04 - all the given information inside our
194:07 - html templates
194:08 - so it will be as easy as changing this
194:12 - print to flash and for sure this is a
194:15 - built-in function
194:17 - that we should import in our first lines
194:20 - over here so we should type in here
194:22 - flash so we are importing that built-in
194:25 - function
194:26 - and the way that we are going to do that
194:28 - is
194:29 - by first flashing some messages and then
194:32 - we are going to go inside our html
194:34 - templates
194:35 - and we are going to use a built-in
194:37 - function
194:38 - that is called get flashed messages and
194:41 - what is so beautiful with the get
194:43 - flashed messages it will allow us to
194:45 - gather all the
194:47 - flashed messages as the function says
194:49 - okay but we are going to do that
194:51 - on our template with ginger syntax so it
194:54 - is not quite
194:55 - necessary to import it over here i just
194:57 - wanted to show you
194:58 - the function that we will be using so
195:01 - once i have done that
195:03 - then i can basically go to our
195:06 - template and use that built-in get
195:08 - flashed messages
195:10 - so it will be as easy as going to our
195:12 - templates
195:13 - and going inside our base dot html
195:17 - and we actually want to think of an area
195:20 - where it could be
195:21 - nice to display those kind of flashed
195:23 - messages
195:24 - now the reason we don't do this in our
195:27 - register.html
195:28 - it is because we want to gain the
195:30 - ability to
195:31 - display flashed messages for all of our
195:34 - templates so it doesn't make sense to
195:37 - call the get flashed messages in a
195:39 - specific template besides it totally
195:42 - makes sense to call it
195:43 - from our base.html so we will go
195:46 - right under our navigation bar and
195:50 - we will display the flashed messages
195:52 - right
195:53 - before our block content so i will just
195:56 - go here and i will use the jinja syntax
196:00 - to grab the flashed messages now the way
196:04 - that we are going to do that is by
196:05 - context
196:06 - manager so it will be with messages
196:10 - equals to get flashed
196:15 - excuse me like that messages and then we
196:17 - will close
196:18 - this function and we will pass in an
196:22 - argument
196:22 - that is going to look quite weird for
196:25 - you in the first look but we will
196:26 - explain in a second
196:27 - and i'm going to pass in here with
196:30 - categories
196:31 - equals to true now the reason that we
196:34 - are going to do this
196:35 - it is because in the future we are going
196:37 - to add certain categories for the
196:40 - different
196:40 - messages that we want to display so the
196:43 - important point here
196:44 - is to understand that not only we can
196:46 - display some arrows but we can also
196:48 - display regular information or
196:49 - success messages and we are going to see
196:51 - how we are going to do that
196:53 - in a few minutes now i just realized
196:56 - that
196:56 - i implemented the variable block and
196:59 - with the
197:00 - get flashed messages it expects for the
197:03 - block code so i will change the inner
197:06 - curly brackets
197:07 - to parentheses and i mean percentage
197:10 - signs
197:11 - and this should be great now we should
197:14 - close this with and
197:18 - wait like that now inside this
197:21 - block of code we also want to check if
197:24 - there are going to be any messages
197:26 - when each page loads so we can do that
197:30 - by easily saying so i will call the
197:32 - block code again
197:34 - and i will say if messages
197:37 - and i will close this up
197:41 - by saying end
197:44 - if and i will fix the indentation in
197:46 - here so what we got until now
197:49 - is a messages variable that is trying to
197:52 - grab all the flashed messages and then
197:54 - later on
197:55 - we are also verifying that the
197:58 - messages is not known so it is quite
198:01 - important to do that because we probably
198:03 - want to check if our messages
198:05 - are filled with some flashed message
198:08 - from our route now when we reach this
198:11 - situation
198:12 - it quite makes sense to iterate over the
198:14 - messages if
198:15 - it is not none because if you remember
198:18 - in
198:18 - some cases we could have more than one
198:21 - messages that we want to display to our
198:23 - users
198:24 - so this is why right inside our if
198:27 - statement in here
198:28 - we are going to say and we will call the
198:31 - block code again and we will type in for
198:34 - message
198:35 - in messages and then we will
198:38 - close this up by saying
198:42 - and for and now this is the actual area
198:45 - where we want to display some nice
198:47 - html output to display the different
198:50 - messages
198:51 - to our users so i will start by
198:54 - displaying this message in a very simple
198:56 - p tag
198:57 - so it will be just easily p and then we
199:00 - will say
199:01 - message inside a variable block so it
199:04 - will be
199:05 - message in here and then later on we are
199:08 - going to give this a little bit nicer
199:10 - customization
199:11 - but we will do that in a few minutes now
199:13 - we can go
199:14 - to our website and check if this works
199:17 - properly
199:18 - so if you remember in our route.py
199:21 - we actually flashing a message to our
199:24 - clients
199:25 - so this should be fine by only verifying
199:28 - that our website is up and running and
199:31 - actually
199:32 - try to go back to home and try to
199:35 - register again to our
199:36 - website so i will type in some wrong
199:38 - information
199:39 - in here and let's see if everything
199:42 - works properly so we will try to create
199:44 - account
199:44 - and then you can see that we receive
199:47 - those arrows
199:48 - with the actual errors that we had when
199:51 - we try to create account
199:53 - now if we zoom in here a little bit
199:57 - we could see that we received the output
200:00 - as python tuples so what that means
200:04 - it means that our get flashed messages
200:07 - divides in the output into
200:10 - two important things and the first one
200:12 - is the category
200:14 - and the second one is the actual message
200:17 - so what that means it means that we can
200:20 - change our iteration a little bit to
200:22 - make it look
200:23 - even nicer so we could go back to our
200:26 - pycharm
200:27 - and actually let's go to our base.html
200:30 - again
200:31 - and we could add in here one more
200:33 - variable
200:34 - so we could unpack the results of
200:38 - what is inside the messages so i will
200:40 - say category
200:42 - and then we will add a comma and then we
200:45 - will only display
200:46 - the message itself and once i do this
200:49 - then we can basically try to refresh it
200:52 - and click actually continue and then we
200:55 - can see that
200:56 - the result is quite different okay so
200:58 - this could be one way that you could
201:00 - display different messages to
201:02 - your users but we probably want to
201:05 - give the user a little bit nice
201:09 - display to those kind of messages so the
201:12 - user could be aware if this is an
201:14 - error message or just an information
201:16 - message
201:17 - or a success message or something like
201:20 - that and we probably want to design it
201:22 - a little bit more colored rather than
201:24 - just displaying
201:26 - a blank white text so the way that we
201:29 - are going to
201:30 - do that is by going back to our pycharm
201:34 - and adding in here some categories to
201:37 - our flash
201:38 - message so if you remember the
201:41 - get flashed messages from the base.html
201:45 - are also responsible to grab the
201:48 - categories because we
201:49 - passed in this statement with categories
201:53 - equals to true
201:54 - so what that means it means that this
201:56 - grabs the categories as well so let's
201:58 - give our messages a category okay so we
202:01 - could go back here
202:02 - and we could say category
202:05 - equals to danger and there's actually a
202:09 - great reason why i typed in here
202:12 - danger and you will see that just in a
202:14 - second
202:15 - okay so once i have done that then i
202:17 - should re-customize
202:19 - this line in here to display a nicer
202:22 - message
202:22 - so the way that we are going to do that
202:24 - is by writing
202:25 - in some pure html code to display a nice
202:28 - message
202:29 - and also doing that with pulling some
202:31 - classes from the
202:32 - bootstrap framework that we have
202:34 - imported in the very beginning of this
202:36 - tutorial
202:37 - so i will start by saying div
202:40 - and i will continue by typing the class
202:43 - and i will say alert and then i will
202:46 - also say
202:47 - alert dash and then here i will
202:51 - pass in the category that we
202:54 - send from our route now here is the
202:58 - reason why i
202:59 - wrote danger it is because alert
203:02 - dash danger is going to pull
203:05 - the bootstrap class that its name is
203:08 - alert
203:08 - dash danger and that is responsible to
203:12 - display a red looking message so
203:16 - our users could understand that this is
203:18 - basically an
203:19 - error and something went wrong and
203:22 - inside
203:22 - those div tags i'm going to continue
203:26 - on by typing here button so this is
203:29 - going to be
203:30 - like a wide paragraph where the users
203:33 - could have the option to close the
203:35 - different alerts so i will continue
203:38 - giving here
203:38 - some more html attributes very quick so
203:41 - i will say by type
203:42 - equals button and i will also say class
203:46 - equals to m1-2
203:50 - and i will also say mb-1
203:54 - and then i will type in here close so
203:57 - those are
203:58 - some bootstrap classes that i memorize
204:00 - that will be responsible to just display
204:02 - it nicer
204:03 - so i don't want to waste a lot of time
204:05 - explaining what each class does
204:07 - and i will also say here data dash
204:10 - dismiss
204:11 - equals to alert and then i will also
204:15 - say area label equals to
204:18 - close so i'm going to explain some of
204:22 - the attributes when we see the actual
204:23 - results and this will totally make sense
204:25 - for
204:26 - you so i will go back to here and i will
204:29 - continue
204:30 - typing inside sorry about that and i
204:32 - will continue typing inside
204:34 - our button the message that we want to
204:37 - display
204:38 - so i will call here the span tag
204:41 - and i will type in here area hidden
204:45 - equals to true and inside
204:48 - our span i am going to type in some
204:51 - convention characters that the
204:54 - html could understand that i'm referring
204:57 - to an
204:58 - x icon so i want to show like an
205:01 - x close button like we have here in our
205:04 - pycharm
205:05 - this is the exact symbol that i want to
205:08 - refer to
205:08 - so i can just say times and then
205:12 - colon semicolon like that so once i have
205:15 - done that
205:16 - let's see the results and let's see the
205:18 - logic behind this html code okay so
205:21 - let's
205:21 - go here and let's actually put the
205:24 - pycharm in the
205:25 - left pane and our website
205:28 - in here so it would totally make sense
205:31 - to see those together so i will
205:33 - make the phones a little bit smaller
205:36 - and i will continue on from here so now
205:40 - i can
205:40 - zoom out our website and i can
205:44 - go to our homepage and try to register
205:47 - back again
205:48 - and i will again dismiss some
205:50 - information
205:51 - by purpose so i will say jc4
205:54 - and i will type in some passwords and
205:57 - once i click
205:58 - on create account then we don't see the
206:02 - message
206:02 - and that is because i did not insert
206:05 - the message itself anywhere but you can
206:08 - already see the x symbol that i was
206:11 - talking about
206:12 - and if i click on then on that then it
206:15 - closes
206:16 - so i will just go inside our
206:19 - button here and i will just call the
206:22 - message
206:23 - by only calling the variable block and
206:25 - pass in
206:26 - message and actually i think this should
206:28 - be out of our button here so i will
206:31 - move this right under the closure of the
206:35 - button tag okay so once i have done that
206:38 - let's test the results again so i will
206:40 - go and try to
206:41 - register and i will type in a valid
206:44 - email
206:45 - but only i will not create proper
206:48 - password so i will just type in here
206:51 - some random characters and click on
206:53 - create account
206:54 - and then you can see that we see a nice
206:56 - looking
206:57 - error and our clients could really
207:00 - understand
207:00 - that we have something wrong and we also
207:03 - have the
207:04 - option to close this button by clicking
207:07 - on the x
207:08 - right there now the attribute of data
207:12 - dismiss and area label and area hidden
207:15 - equals true
207:17 - are what responsible to configure what
207:20 - the x symbol should do when we
207:23 - click on it but i don't want to get into
207:26 - much complex detail about html and
207:29 - javascript and
207:30 - some more further information that is
207:32 - quite not relevant for now
207:33 - all right everyone so i hope you
207:35 - understood the entire topic of how we
207:37 - can
207:38 - display nicer flashed messages to our
207:41 - clients
207:42 - now there is going to be one more thing
207:44 - that we want to
207:45 - solve about this registration form
207:48 - now i will try to create a user
207:52 - with a username that is already existing
207:55 - on our database so if you remember in
207:58 - the
207:58 - previous actions that i have completed
208:01 - in this tutorial
208:03 - i created already a user with name of
208:06 - jsc now if we try to create a user with
208:10 - an existing username
208:11 - let's see the result okay so let's go
208:13 - ahead and try to pass
208:15 - in some valid email and actually a valid
208:18 - password as well
208:19 - and if i click here then you can see
208:22 - that it leads us to an
208:24 - error where it says that the
208:27 - unique constraint failed now
208:30 - i know it jumped down here and this is
208:34 - actually referring to actual error but
208:36 - this is the error that i want to talk
208:38 - about so
208:39 - unique constraint field means that
208:42 - we tried to insert a user
208:46 - row to that item table that we have and
208:49 - then
208:50 - it failed because we already have a
208:52 - username with the name of
208:54 - jsc so we probably
208:57 - want to avoid display such a message to
209:00 - our users
209:02 - one this doesn't look nice and two we
209:04 - probably don't want to show
209:06 - our bugs and our code problems to
209:09 - the users so the way that we can
209:11 - overcome this
209:12 - is by easily catching this error
209:16 - a lot earlier before it leads
209:19 - to that sq alchemy integrity error so
209:22 - let's see how we can
209:24 - do that in python okay so i will
209:26 - basically open back our pycharm here
209:29 - and you can see that i'm already inside
209:31 - our forms dot py and there is a great
209:34 - reason for that
209:35 - now in here we want to write validation
209:39 - that is going to check if the attempted
209:42 - user from the registration form is
209:45 - existing or not
209:46 - and then we can catch up this unique
209:49 - error before
209:50 - it leads to the error from the sql
209:53 - alchemy
209:54 - itself so that way we will have a
209:57 - validation error
209:58 - and then we will be able to display to
210:01 - our users
210:02 - this nice red colored error message that
210:05 - we
210:06 - saw previously let's go ahead and do
210:08 - this and i will go inside
210:10 - the flask form class here i mean the
210:13 - register from glass
210:14 - and i will type in some function which
210:17 - i'm going to
210:17 - name validate username and i'm going to
210:21 - receive the cell
210:22 - for sure and i also want to receive one
210:24 - more parameter
210:25 - and we will name it username underscore
210:28 - tool underscore check okay so we are
210:32 - checking if the given username is
210:34 - already existing in our database
210:36 - and once we have done that then we want
210:39 - to query
210:40 - our user model to check if this username
210:43 - to check
210:44 - is already existing or not so i will go
210:46 - up top here and i will import our module
210:49 - and it will be from market dot modules
210:53 - import user and i will go down here with
210:56 - two lines so we will have a cleaner look
210:59 - and i will continue inside our validate
211:02 - username
211:03 - function and i will say user
211:07 - equals to user dot query
211:10 - dot filter underscore by and we want to
211:14 - filter the user object by
211:17 - username equals to username
211:22 - to check and what i'm doing by writing
211:25 - this line i'm basically asking our
211:28 - entire
211:28 - user object if there is a user
211:32 - with the username to check that is
211:35 - arriving from the registration form
211:37 - and once i do that then you can remember
211:40 - from the previous sessions of this
211:43 - tutorial that this entire
211:45 - expression returns us an object and in
211:48 - order to
211:48 - access the first object of it then we
211:51 - should go and type in
211:53 - first like that okay so if this user
211:56 - object
211:57 - is filled in with some information
212:00 - meaning that this entire statement
212:02 - returns an object then this means that
212:04 - there is already a user with that
212:06 - username existing in the database
212:09 - so we probably want to go ahead and type
212:11 - in a conditional like if
212:13 - user so i'm checking if the user is not
212:17 - none and in here i want to raise a
212:20 - validation arrow so it will be race
212:24 - validation error and i will just type in
212:27 - a message
212:28 - like username already exists
212:32 - please try a different
212:36 - username and you could pay attention
212:38 - that this
212:39 - gives us an error in here because we
212:42 - should import
212:43 - this built-in exception class from
212:46 - that line so i will say valley
212:49 - validation error
212:50 - right there okay so there is one more
212:52 - thing that i bet that confuses you
212:54 - in that case so we were able to write
212:58 - a nice block of code in here that
213:01 - is basically verifying that the
213:04 - user is not exist and then we raise an
213:07 - error if there is actually a user
213:09 - with the username that he tries to
213:12 - create now you're probably asking
213:15 - yourself
213:16 - how this validate underscore username is
213:19 - going to be
213:20 - executed in somewhere in our project
213:23 - now in that case what is so
213:26 - special with the validators library
213:30 - is that you are allowed to create
213:33 - certain functions in very specific
213:37 - usernames and then the flask form
213:40 - class is going to take care of the rest
213:43 - so
213:43 - by writing validate underscore
213:46 - username like that then what flask form
213:50 - is going to do it is going to search for
213:53 - all the functions that are starting
213:57 - with the prefix of validate
214:00 - underscore and then later on it is
214:03 - going to check for the next name
214:07 - after the underscore and then it is
214:09 - going to search
214:10 - if there is even a field with that
214:14 - given name and we happen to have this
214:17 - username
214:18 - field so this way our flask form
214:22 - class that we inherit from will know to
214:25 - validate underscore username because we
214:28 - have a
214:29 - field with the username right here so it
214:32 - is quite important to understand
214:34 - why i named this function that way
214:38 - okay so the flask form called understand
214:40 - that
214:41 - we are going to execute a validation for
214:44 - the username itself and we could also
214:48 - do that with our validate email address
214:52 - so we probably want to check
214:55 - if there is an email address that is
214:58 - already existing
214:59 - if our users are trying to create an
215:02 - account with an existing email address
215:04 - so we could do the exact same thing by
215:08 - going
215:08 - down here and typing in validate
215:13 - underscore and here we want to
215:16 - give the email address as our function
215:20 - name so i will go by again saying
215:23 - email address to check
215:27 - and then we will go inside our function
215:30 - and we will continue on by saying
215:33 - email address equals to
215:36 - user dot query dot filter underscore
215:40 - by and we will try to filter by
215:44 - email address equals to email address to
215:47 - check
215:48 - and we have to execute that dot first in
215:51 - here
215:51 - again and then we can say if email
215:55 - address then we can raise a validation
215:59 - error and then we could type in
216:02 - email address
216:07 - already exists
216:11 - please try a different
216:16 - email address okay so there's a great
216:19 - reason that i'm not copying and pasting
216:21 - because as long as i'm doing that
216:24 - then you are practicing how you can
216:27 - write such a complex code
216:29 - when it comes to sometimes rays arrows
216:31 - and
216:32 - conditionals and then functions with a
216:35 - very unique name
216:36 - so this is why i did not copy and paste
216:39 - um
216:40 - and i think this should be enough to see
216:42 - the actual results
216:43 - so i will basically go to our
216:48 - web you know what let's verify that our
216:50 - website is running
216:51 - and it is not so let's execute python1
216:54 - dot py
216:56 - and then you can see that our website is
216:58 - up back again
216:59 - and now i can try to refresh our page
217:03 - and let's actually go to
217:06 - home and now we can try to
217:10 - go back to register and try to create
217:13 - some account and see the results of that
217:15 - and in here
217:16 - let's try to create again an account
217:18 - with an existing
217:19 - username but not with an existing email
217:22 - address so i will give here an email
217:24 - address like that
217:25 - and i will type in correct passwords and
217:28 - if we
217:29 - click on create account then we see an
217:31 - error again so
217:33 - probably something that we missed with
217:35 - writing the validations
217:37 - so i think we see this
217:41 - unsupported type when we creating
217:45 - the validation so
217:51 - and let's actually have a look if our
217:53 - validation is proper or not
217:55 - um so it is a great idea to go here
217:58 - and user equals to
218:01 - user query filter by and then we pass in
218:05 - this
218:06 - this username to check but i think that
218:10 - this should be a little bit different so
218:12 - i might see what is going on here
218:15 - now if you remember from our route
218:18 - dot py we used to access our actual
218:23 - fields with accessing the data
218:26 - attribute so i think this is what we
218:28 - have to pass in here
218:30 - to query our users so
218:33 - this is just the same approach so in
218:35 - here we create the users with grabbing
218:38 - the
218:38 - dot data and we should do that in our
218:40 - forms dot py
218:42 - as well so i will go
218:45 - here and i will say that data
218:48 - in here and i will do the same
218:52 - in our user query filter in the validate
218:55 - username so i will
218:56 - type in dot data and i think this should
219:00 - be enough to
219:01 - test it out back again because we
219:03 - probably don't want to refer to
219:05 - actual object of the username to check
219:07 - we want to refer to that
219:08 - dot data so let's go
219:11 - back to here and test the results of
219:14 - that
219:15 - so i will try to register back again
219:19 - and i will type in again a username that
219:22 - is already exist
219:24 - and we will change the email a little
219:27 - bit
219:27 - and the password like that and now if we
219:30 - click on create account
219:32 - then you can see that we receive an
219:35 - alert
219:36 - besides receiving a complex error
219:39 - so our users could be notified
219:42 - with that kind of unique arrow as well
219:46 - and you can see the message there was an
219:47 - error with creating a username
219:49 - username already exist please try a
219:52 - different username and that is happened
219:54 - to be the
219:55 - error that we have raised by ourselves
219:58 - now if we want to test this with the
220:01 - email address as well then we can go
220:03 - ahead and do that
220:04 - so if i remember correctly then we
220:07 - had an email with jsc at
220:11 - jsc.com so this should fail
220:14 - and if i click on the same password
220:18 - and try to create a new account then you
220:20 - can see that our validation error about
220:22 - email address is also very very fine
220:26 - and i think that this is beyond then
220:28 - enough to
220:29 - really have a very stable registration
220:32 - form
220:33 - for our clients
220:37 - okay so i'd like to start with changing
220:40 - the way that we maintain our passwords
220:42 - in the database
220:43 - now if you remember i said previously in
220:46 - that course that we are not going to
220:48 - store passwords as plain text now
220:50 - actually what happens now
220:52 - if we actually inspect to our database
220:55 - with the sqlite3 gui tool that i talked
220:57 - about previously in that course
220:59 - then we can see that we have two users
221:03 - but we see their passwords as plain text
221:07 - now this is something that is not
221:09 - considered as a
221:10 - secure thing to do so we are going to
221:13 - change this and we are going to
221:15 - store a hashed password and that is
221:17 - going to allow us to store
221:19 - crypted passwords so let's go ahead and
221:22 - do that and the
221:23 - first step for that will be to install a
221:26 - library with pip install command
221:28 - so i will pause our website for a minute
221:31 - and i will say pip install
221:35 - flask underscore be crypt
221:40 - okay so as i install that then i can
221:43 - clean my screen again
221:44 - and i can go to pycharm and import
221:48 - this library now again what this is
221:50 - going to do it is going to allow us to
221:52 - store the password as hashed password
221:55 - and
221:56 - not as plain text as we saw so i'm
221:59 - already located inside my thunder init
222:01 - file
222:02 - and in here we need to initialize this
222:05 - decrypt
222:06 - library i mean an instance of a bcrypt
222:09 - class
222:09 - inside that library so it will be from
222:12 - flask underscore be crypt import
222:16 - be crypt like that and i just realized
222:19 - that we forgot to
222:21 - delete this vendor template from here so
222:24 - let's go ahead and do that
222:25 - and down here i'm going to create an
222:27 - instance of that and we are going to
222:29 - rely on that
222:30 - to use it in our entire application so i
222:33 - will say
222:33 - be crypt equals to be crypt and i will
222:37 - pass our
222:38 - app as an argument inside the bcrypt
222:41 - class okay so once we have done that
222:44 - then we can basically
222:45 - rely on the bcrypt to start
222:48 - generating hash passwords rather than
222:51 - storing them as plain text
222:53 - so the way that we can do this is by
222:56 - going
222:56 - to our user model and start creating
222:59 - some additional properties now if what i
223:02 - say right now does not make sense to you
223:04 - then it is quite fine but in object
223:06 - oriented programming
223:07 - there are something that is called
223:10 - getters and
223:11 - setters so what this means it means that
223:13 - we can
223:14 - basically configure the way that we
223:17 - want to receive back in attribute
223:21 - and the way that we want to set the
223:23 - attribute
223:24 - so this is going to help us because we
223:27 - need to
223:28 - create one more property and we can name
223:31 - it password and then once we set that
223:33 - password then we can
223:34 - execute additional code to turn this
223:38 - password
223:38 - to enhash password so let's see that in
223:41 - action and i think when i
223:43 - write the code of that it will totally
223:45 - make sense for you so i will open
223:47 - my modules.py and in here
223:50 - we will start creating some additional
223:54 - properties
223:55 - now the properties are going to be set
223:58 - unique per instance so it is important
224:00 - to understand that
224:02 - and i'm going to go down here and i'm
224:04 - going to use the
224:05 - decorator of property so again this is
224:08 - just going to be like an additional
224:10 - attribute that is going to be accessible
224:12 - from
224:12 - each instance and once i have done that
224:15 - then i will basically name it password
224:18 - and not password hash like i did here
224:21 - and i will say
224:22 - return self.password so those lines of
224:26 - code are not doing anything special
224:28 - right now
224:28 - because what this says it says that okay
224:31 - i have a new property
224:32 - and i basically return it back when the
224:35 - user wants it or myself as a developer
224:37 - who wants to
224:38 - see some attributes and the tricky line
224:42 - is actually starting from here so i will
224:44 - now say
224:44 - password dot setter so basically we can
224:48 - allow ourselves to execute some lines of
224:51 - code
224:51 - before we actually set a password to
224:55 - an user instance so it will be
224:58 - dev password in here again and this time
225:01 - i will receive
225:02 - additional parameter and this parameter
225:05 - is going to be
225:06 - the password that is going to be filled
225:09 - in
225:09 - when we want to set that up so the
225:12 - parameter
225:12 - name is going to be plain text password
225:16 - like that and i will go
225:19 - down our password.setter and i will
225:23 - basically
225:23 - override what is going to be stored as
225:27 - password hash now this time i'm not
225:30 - going to
225:30 - make that to be equal to plain text
225:33 - password
225:34 - besides we are going to use the
225:36 - functionality of the decrypt variable
225:39 - that we have created so i will go
225:42 - to here and i will say from market
225:45 - import b crypt now if you remember this
225:48 - is accessible from the dunder init file
225:51 - because we
225:51 - initialized it over there and now i will
225:54 - go back to our models dot py
225:57 - and i will use some of the
225:58 - functionalities of this b
226:00 - crypt instance so i will
226:03 - remove this for a minute and i will say
226:06 - b
226:06 - crypt dot generate
226:10 - password hash
226:13 - and this generate password hash is
226:15 - probably going to receive
226:17 - a plain text password as an argument so
226:19 - it will be
226:20 - as easy as giving this plain text
226:22 - password
226:23 - as an argument to this function or to
226:26 - this method excuse me
226:28 - so now as we have done that then i like
226:30 - to apply some decoding in here so
226:33 - it will be just dot decode and we will
226:36 - use the utf-8
226:38 - to decode this generated password hash
226:42 - okay so once we have set this then we
226:44 - should go to our routes.py
226:47 - and take some additional changes in
226:49 - there because if you remember
226:51 - in our entire project the only code
226:54 - that is responsible to create instances
226:57 - of that
226:57 - user is actually the route dot py
227:01 - so i will go to here and right under
227:04 - our register page if you remember we
227:07 - set our password underscore hash to
227:10 - a plain text password now the only thing
227:13 - that i
227:14 - have to do here is basically
227:17 - besides giving the password hash
227:19 - argument
227:20 - is giving the password argument so
227:24 - this will be responsible to complete the
227:26 - entire process
227:27 - of storing passwords as hashed passwords
227:30 - because
227:31 - we set our password and this line of
227:35 - code
227:35 - goes inside the password dot setter
227:39 - because we set a new password to a new
227:41 - user
227:42 - and then this line of code is getting
227:44 - executed and this is
227:46 - exactly what we need because we storing
227:49 - enhanced password so this is the process
227:52 - and we want to test this up actually
227:54 - in the next user that we are going to
227:56 - register so
227:57 - i will go to our terminal and i will
228:01 - say clean the screen again and
228:04 - we will execute python run dot py
228:07 - and once we have this then we can verify
228:11 - this
228:11 - by refreshing our page and going to
228:15 - register
228:16 - and now i will create jsc
228:19 - 2 3 because we had jst2
228:22 - and we will set a valid email and now i
228:25 - want to prove you that we are using
228:27 - one two six again so i will just cut
228:29 - this out from here
228:31 - and paste this in twice and once we
228:34 - create an account
228:35 - then the results are quite great but now
228:37 - to actually verify this i'd like to show
228:40 - you the results from the
228:41 - gui that we use so we can
228:45 - go to here and we can
228:48 - basically refresh that out by pressing
228:50 - f5
228:51 - and now you can see that we have a
228:54 - hashed password
228:55 - for the jsc 3 users so this is exactly
228:58 - what we wanted to achieve
229:00 - by using the getter and the setter to
229:03 - differentiate between what happens
229:05 - when we do each one of them all right so
229:08 - now that we have secured our passwords
229:11 - it is about time to start working on the
229:14 - way that we can
229:15 - log in our users now currently we will
229:17 - start by
229:18 - designing what is required to basically
229:21 - display a login page
229:23 - successfully to our users so it will
229:26 - mostly require the steps that we
229:27 - probably have done until now
229:29 - so we will create a login form within
229:32 - our forms.py
229:34 - and for sure we will set up a new route
229:36 - and we will create a separator template
229:38 - for that
229:39 - so let's go ahead and start working on
229:41 - this okay so i will go
229:43 - to our route dot py as you see i'm
229:45 - already here
229:46 - and we can basically start working on
229:50 - the same process like we have done
229:52 - to design our register page so i will
229:55 - zoom in here to make the font bigger so
229:58 - we will start by saying at app
230:01 - dot route and we want to send our users
230:05 - to
230:06 - forward slash login and we want
230:09 - to allow the methods of get and post
230:13 - like we have done in the register page
230:16 - so
230:16 - it will be get and then post
230:21 - like we did previously and then we can
230:24 - basically
230:24 - name it login page and we can
230:28 - go inside our function now i want this
230:30 - to be more centralized
230:32 - so excuse me for pressing enter a lot of
230:34 - time
230:35 - and now in here we will just start by
230:38 - returning a render template
230:41 - and we will send our users to login.html
230:47 - like that okay so let's go ahead and
230:50 - create this template as we did not
230:52 - create it yet
230:53 - so it will be just as easy as going here
230:57 - and create
230:57 - the html file and we will name it login
231:01 - we will delete the auto-generated html
231:04 - now i will rely on the register.html to
231:07 - kind of help us a little bit
231:08 - so i will open the register.html
231:11 - and i will copy everything from here and
231:14 - i will paste this
231:16 - in in the login.html and
231:19 - now i want to delete everything that is
231:21 - under our body text
231:23 - so i will just minimize the div class
231:26 - container
231:27 - and i will just delete everything that
231:30 - is
231:31 - right here and there we go we only left
231:34 - with the
231:35 - body so i will also change that to login
231:38 - page
231:39 - it makes a lot of sense and i will test
231:41 - our results out
231:43 - so we will go to our website
231:46 - and we will go to slash login
231:50 - and you can see that we are inside a
231:52 - blank new page so everything works well
231:54 - now if you remember in the navigation
231:57 - bar as you see the register works
231:59 - because i clicked on it but the login
232:01 - page is not working
232:03 - so let's go ahead and fix that quickly
232:05 - so i will go to our pycharm
232:08 - and it should be inside our base.html
232:12 - and we should go down and we should
232:15 - identify this line in the
232:19 - login style so this is right here and we
232:22 - can basically
232:23 - copy the url underscore 4. so you should
232:26 - already be familiar with this function
232:28 - and we should paste this in right
232:31 - here in the href of the login and we
232:34 - should
232:35 - change this to login underscore page
232:37 - because this is the name of our route
232:40 - so now that we have done this we can
232:43 - test the changes from clicking here and
232:47 - let's refresh the page to
232:48 - changes to take effect so i will go to
232:51 - home i will click
232:52 - login and you can see that everything
232:54 - works fine okay so once we have done
232:56 - that
232:56 - then let's start working on our forms so
233:00 - it makes sense to go to our forms dot py
233:02 - and basically create one
233:04 - new form like we did for the
233:07 - registration
233:08 - so it will be as easy as going to our
233:10 - forums dot py
233:12 - and start working on a new class
233:15 - but this time we are not going to create
233:17 - all the fields like in here
233:19 - basically to log in our users we only
233:22 - require to have username and the
233:25 - password
233:26 - and for sure the submit field to take
233:28 - some actions
233:29 - so i will go down here and i will start
233:32 - creating a new class so it will be
233:34 - class login form and this will inherit
233:38 - from the
233:38 - flask form as well and we will go inside
233:42 - our
233:43 - login form and we will start saying
233:46 - username
233:47 - equals to string field and
233:50 - the label that we're going to give here
233:52 - is going to be
233:54 - just user name like that and
233:57 - the only validation that i like to
233:59 - create here
234:00 - is the data required so i will say
234:03 - validators
234:04 - equals to a new list and inside that i
234:07 - will
234:08 - initialize the data required and i will
234:11 - close the instance of
234:13 - this class by adding parentheses now the
234:16 - same
234:16 - approach will go for the password as
234:19 - well
234:20 - so i will allow myself to copy
234:22 - everything from the username
234:24 - and paste this in and change this to
234:27 - password and change this string field
234:30 - to password fill and change the label to
234:35 - password and delete the name and this is
234:38 - fine to
234:39 - leave it in here and the last action
234:41 - will be
234:42 - to submit so now i will also allow
234:45 - myself
234:46 - to copy that from the registration form
234:49 - and paste this in
234:51 - and the label for that will be something
234:54 - like
234:55 - sign in and this should be fine for
234:58 - creating our login form okay so once we
235:00 - have done that
235:01 - let's go ahead to our routes.py
235:05 - and create an instance of this login
235:08 - form
235:09 - so i will start first by importing it
235:13 - right here in the market.forms line so i
235:16 - will say
235:16 - login form and i will go here
235:20 - and right before our render template i
235:23 - will say
235:24 - form equals to login
235:27 - form and i will close the parentheses
235:30 - and
235:30 - now i can basically use here
235:33 - form equals to form exactly
235:36 - like we do in the registration
235:40 - page as well so once we have sent the
235:43 - information of the form
235:45 - then it is a great idea to go to our
235:48 - login.html
235:49 - and customize this html page now
235:53 - again since we pretty much implemented
235:55 - this html
235:56 - logic in our registration form and
235:58 - actually to save us a little bit of time
236:00 - then i already have created this form
236:03 - html tag
236:04 - so you can find this code snippet in my
236:06 - website by
236:07 - easily going to part 11 of the flask
236:10 - series
236:11 - and search for a code snippet that is
236:13 - going to be named
236:15 - login form and also make sure that you
236:17 - paste this in
236:18 - under the body class text center like we
236:21 - have in here
236:22 - and i'm going to paste the form tag and
236:25 - let's actually go over what is going on
236:27 - here
236:28 - so the first here is the div with class
236:31 - of
236:31 - container and if you remember this is
236:33 - responsible to
236:35 - centralize our information from being
236:38 - this wide to something like that okay so
236:41 - this is
236:42 - containing the information inside of it
236:44 - and here we have our form tag
236:47 - with the class of form dash sign in
236:50 - and right under it we have the hidden
236:53 - tag which
236:53 - is necessary for generating the csrf
236:56 - token so you should be familiar with
236:57 - this because we covered this in the
236:59 - registration part
237:00 - and in here we have a header with please
237:03 - login and
237:04 - an image with the logo of our website
237:07 - and in here we basically use the ginger
237:10 - syntax
237:10 - to grab the fields of username and the
237:14 - password
237:15 - and once we have done that then we have
237:17 - a breaker line that is separating
237:20 - our field from the next html information
237:24 - now right above the submit
237:27 - in here we have something new that we
237:29 - did not see before
237:31 - so this is the div and inside here we
237:34 - have a text
237:35 - do not have an account so i decided to
237:39 - create this
237:39 - just because to allow our users to go
237:42 - back easily to the register page
237:44 - if they don't have an account so you can
237:46 - identify this by
237:48 - seeing the href with the anchor tag
237:51 - and you can see that it leads our users
237:54 - to the url of register page so
237:58 - let's actually see this in action so i
238:00 - will go to our
238:02 - website and i will log in
238:05 - and now you can see that we have the
238:07 - username field
238:08 - and we have the password field and we
238:10 - also have the do not have an account
238:13 - and we have a button that says register
238:16 - now if i click on it then you can see
238:18 - that it leads us
238:20 - back to the register page now
238:22 - functionality like this could be also
238:25 - a lot nicer if we have implemented it in
238:28 - the register page
238:29 - so i'm going to do that just in a second
238:31 - so we will go to our python
238:34 - and we will easily grab this code
238:37 - snippet from here
238:38 - and we will paste this in inside
238:42 - our register.html so i just opened our
238:45 - register.html temporarily
238:47 - and i'm going to go
238:50 - as we did in the login page and i'm
238:53 - going to paste this in
238:55 - right above the forum dot submit
238:58 - and that time i will say
239:02 - already have an account like that
239:06 - and i will lead our users to
239:09 - login page and it makes totally sense to
239:13 - change the text in here as well
239:15 - so once we have done that then we will
239:18 - see
239:18 - the same result in the register page as
239:21 - well so if we click in here
239:23 - then you can see that it leads us back
239:25 - to login page
239:27 - okay so just to memorize what we have
239:28 - done until now well
239:30 - probably we want to complete the
239:32 - functionality of that sign in button
239:34 - because we
239:35 - don't do anything special when we click
239:38 - on the sign in and we want to throw
239:40 - some errors if there are some wrong
239:41 - information and we want to proceed our
239:43 - users to the market page when the
239:46 - login is successful so it is going to be
239:48 - a lot of stuff
239:49 - that we have to configure on our back
239:51 - side of the application
239:53 - so first of first we will start by
239:56 - installing
239:56 - the library that will allow us to manage
240:00 - our login system easily with flask
240:03 - so it will be basically going to
240:07 - our web application and saying here
240:10 - pip install flask underscore login
240:14 - and once i have done that then you can
240:17 - see that everything is fine and i can
240:19 - clean my screen
240:20 - and now we can continue to pycharm and
240:23 - start working on importing this library
240:26 - so the library itself is like a
240:29 - login manager for your entire
240:31 - application
240:32 - so it has to recognize which flask
240:35 - application you
240:36 - want to manage the login system with so
240:39 - this is why we are going to start
240:41 - importing it
240:42 - from the dunder init file so we will say
240:46 - from flask underscore login
240:50 - import login manager like that
240:54 - great and once we have done that then we
240:57 - can say
240:58 - right here login underscore
241:02 - manager equals to login manager so we
241:05 - will start an instance of that
241:07 - and we will pass the application as the
241:10 - argument
241:10 - so nothing is different than the sql
241:12 - alchemy or the pcrypt that we have
241:15 - done previously throughout this tutorial
241:17 - all right so
241:18 - once we have done this we are ready to
241:21 - work on
241:21 - our login route to really
241:24 - write the functionality of what happens
241:27 - when your clients are going to click on
241:29 - sign in so we will go to our routes dot
241:32 - py
241:33 - and we will navigate to our login
241:36 - underscore page
241:37 - and we are going to pretty much apply
241:39 - the same
241:41 - logic like we did in our register page
241:44 - so if you remember
241:45 - we used to call this conditional
241:48 - if formed validate on submit and then
241:52 - if this conditional hits true then we
241:54 - are going to take several actions
241:56 - so it might be a great idea to start
241:58 - with that okay so i will say
242:00 - in our login page so we will zoom in
242:03 - here
242:04 - and we will say if forum
242:07 - dot validate on submit
242:11 - now if you don't remember this actually
242:13 - runs two
242:14 - functions behind the scenes and the
242:16 - first is to validate that all the
242:18 - information is valid
242:19 - and it also going to hit this
242:22 - conditional
242:23 - when we click on that submit button that
242:25 - we have created for our
242:27 - login form so i will go inside our form
242:31 - and now we are ready to pretty much
242:32 - verify if our users
242:34 - have provided a great information
242:38 - so this means that when we put in some
242:42 - information like username and password
242:44 - there are going to be two
242:45 - important steps that we want to verify
242:48 - and the first will be if the user is
242:51 - exist
242:52 - and the second one if the user is exists
242:55 - then if the password
242:57 - is actually the correct password of that
243:00 - user so the implementation of that in
243:02 - python
243:03 - will be like the following so we can say
243:05 - attempted
243:06 - underscore user equals to
243:09 - user dot query dot
243:12 - get and we want to receive only
243:16 - one user object and in here i'm going to
243:18 - provide the
243:19 - data that is filled in the form so we
243:22 - will say
243:22 - form dot username dot
243:25 - data so again this entire statement is
243:28 - going to
243:29 - filter out the user by
243:32 - the provided username but if you
243:35 - remember in that case we should execute
243:37 - that dot first method
243:39 - to really grab the object of the user
243:42 - now if attempted user is
243:45 - none then we can say that the client is
243:49 - providing some wrong information about
243:51 - its username
243:52 - so we can write a conditional and say if
243:55 - attempted user and that will be enough
243:57 - to test out
243:58 - if this is filled with some information
244:01 - and
244:02 - not none now sorry for deleting that
244:05 - this is not enough to really
244:08 - log in our users because now we should
244:09 - check if the password
244:11 - matches the user that tries to sign in
244:14 - but if you remember we store
244:15 - our passwords as hash passwords so we
244:19 - kind of
244:20 - ask ourselves how we are going to check
244:22 - if the
244:23 - user from the form matches the user from
244:27 - the database
244:28 - so it is never going to be match because
244:29 - the password we store
244:31 - is a hash password and the password that
244:34 - the client fills in
244:35 - is a regular string of password so to
244:39 - overcome this we can basically use some
244:42 - functionality that we have inside the
244:44 - bcrip library
244:45 - that is going to help us to verify
244:48 - that the passwords are match so
244:51 - now i want to stop writing this
244:53 - conditional in here
244:55 - and go to our modules.py
244:58 - and start working on some function that
245:01 - could be accessible from each user
245:02 - object that is going to
245:04 - really help us to overcome the problem
245:06 - that i specified
245:07 - so i will go down here and i will zoom
245:11 - in
245:11 - a little bit so we can see better and i
245:13 - will start writing a function and we can
245:16 - say
245:16 - check password correction
245:20 - and this is going to receive the self as
245:22 - a parameter
245:23 - and also it is going to receive the
245:25 - attempted password
245:27 - to really grab the password that is
245:30 - filled in
245:31 - within the form so in here we can say
245:34 - if b crypt dot check
245:37 - password hash and now this function is
245:40 - going to accept two arguments
245:42 - it is going to first accept the password
245:45 - that is hashed
245:46 - and then the password that is going to
245:48 - be filled in from the form so we can put
245:51 - in here
245:53 - self.password hash
245:55 - and as the second argument we can say
245:58 - attempted
245:58 - password now this entire statement here
246:02 - is going to return true or false so
246:05 - if we actually hit this conditional we
246:08 - can
246:08 - return true and to actually make this a
246:11 - little bit more efficient
246:12 - we can do something like the following
246:14 - now since
246:16 - this entire statement here is going to
246:19 - return us
246:20 - true or false then we can basically
246:23 - avoid using the if statement in here and
246:26 - we can
246:27 - basically return whatever this statement
246:30 - is going to return
246:31 - so if i change this to return then
246:34 - basically what i'm saying
246:36 - is execute this function and
246:39 - return its value back when we call the
246:42 - check password collection so this is
246:44 - going to return
246:44 - us either true or false so once we have
246:48 - done that
246:49 - then basically we can go to our
246:52 - routes dot py now you can remember
246:56 - how the attempted user is going to be
246:59 - stored within a user object if this
247:02 - entire statement
247:03 - is going to return a user object or not
247:06 - so i can continue my conditional by
247:08 - saying and
247:10 - attempted user dot check
247:14 - password correction so basically i am
247:17 - calling the
247:18 - function that we excuse me the method
247:21 - that we
247:22 - wrote inside our user module and now i
247:24 - can close this in
247:26 - and if you remember this function
247:27 - received the attempted password as a
247:29 - parameter
247:30 - so we can say attempted
247:33 - password and i will continue on from
247:36 - here
247:37 - and we will say form dot
247:40 - password dot data and
247:43 - this should be enough to really write
247:46 - this
247:46 - long conditional now i'm going to write
247:49 - in
247:50 - this in splitted lines because it
247:52 - doesn't look a lot friendly so i can
247:54 - basically
247:56 - go with something like this
247:59 - and no not like that but we can
248:02 - divide that and
248:05 - that okay so now things look a lot
248:08 - better
248:08 - so this entire thing is actually a one
248:11 - long if statement but this is required
248:14 - because of the explanation that i made
248:16 - in the previous minutes okay so once we
248:19 - hit this conditional
248:20 - then we can really start logging our
248:22 - users now we are going to use a built-in
248:25 - function
248:25 - that is already existing inside the
248:28 - library that we installed previously
248:30 - so let's go ahead and import this in our
248:32 - routes dot py
248:34 - so we can say from flask underscore
248:37 - login import login underscore
248:40 - user and this should be enough for now
248:43 - we are going to import more stuff from
248:45 - this flask login in the future
248:47 - and i will scroll down back to our login
248:50 - page route and now
248:51 - we can call this function like that
248:55 - and we can provide as the argument the
248:58 - user object that we want to
249:00 - log in so it will be attempted user
249:03 - and this should be enough to really log
249:05 - in our users now we probably
249:07 - want to provide some extra information
249:09 - to our clients
249:10 - when they have logged in successfully so
249:13 - we could
249:14 - say flash so if you remember not flask
249:17 - but
249:18 - flash if you remember the flash is the
249:21 - built-in function that is going to help
249:22 - us to
249:23 - provide extra messages for our users
249:26 - when some important thing happens
249:28 - and we can type in a message like
249:31 - success
249:32 - and we can say you are logged in
249:36 - as and now we can really give the
249:39 - username that
249:40 - is logged in so we can turn this into a
249:43 - formatted swing
249:44 - and we can say attempted
249:48 - user dot username now
249:51 - again if we are going to hit this
249:52 - conditional then it means that the
249:54 - attempted user is not
249:56 - none so this is why i can access this
249:58 - attribute so it is fine
250:00 - doing this and once we have done that
250:02 - then we want to probably direct our
250:04 - users to the
250:05 - market page to start buying
250:08 - some products so it will be basically
250:12 - return redirect and we can call it
250:16 - and we can call the url underscore for
250:18 - built-in function
250:20 - and if you remember this function is
250:22 - going to receive as the argument
250:25 - the name of the route that you want to
250:26 - redirect your users
250:28 - so if you remember we have a route that
250:30 - we called
250:31 - market page so i will copy its name and
250:34 - paste it in over here and
250:37 - once we have done this then basically it
250:40 - is a great idea to really finish
250:42 - up what happens if we don't hit
250:45 - this long conditional in here so we
250:48 - want to write the else statement for
250:52 - that so i will say
250:53 - else and in that case i want to raise a
250:57 - message
250:58 - like this so we can
251:01 - say username and password
251:04 - are not match please try
251:08 - again something like that and i just
251:10 - remembered
251:11 - that i did not put in some categories to
251:15 - our flash messages so obviously we want
251:19 - to provide
251:20 - here category equals to
251:24 - success like that and
251:27 - this is for the conditional that we hit
251:30 - so if we were able to log in and
251:34 - this one should be category
251:37 - equals to danger so danger is what going
251:41 - to help us to
251:42 - display a red colored message because it
251:45 - is going to be translated
251:46 - in our base template if you remember to
251:49 - a
251:50 - danger message so this is why we have to
251:52 - provide this danger
251:54 - as it is okay so this should be enough
251:56 - to test for the first time
251:58 - if we can log in our users so we can
252:02 - go now to our web browser and we can
252:06 - refresh our login page but we did not
252:09 - verify
252:09 - if our website is running so
252:12 - we should go and execute python run.py
252:16 - and once we have done that then we can
252:19 - go to here and see some exception that i
252:22 - really wanted to see
252:24 - and so we can solve this together now
252:27 - this is actually a perfect example for
252:29 - an exception
252:30 - where you really want to carefully read
252:32 - what exception
252:33 - is about and provide some extra steps to
252:36 - really
252:37 - complete this login system successfully
252:39 - so
252:40 - you can see that it saves us exception
252:43 - missing
252:43 - user underscore loader or request
252:46 - underscore loader
252:47 - so we should refer to this documentation
252:51 - and see how it works so we will copy
252:54 - this and we will paste this in
252:58 - here and we can really start looking
253:01 - of what this documentation is about so
253:04 - we can see that there is some message
253:07 - that says how the
253:08 - flask login works and you can also see
253:11 - that we will need
253:12 - to provide a user loader callback
253:15 - to really make our flask application
253:18 - to understand that if we navigate from
253:22 - different pages
253:23 - when we are authenticated then each
253:26 - refresh there is a different request
253:29 - session
253:30 - that the flask application has to
253:32 - understand
253:33 - if the user is logged in or not so
253:36 - this is why we have this decorated
253:39 - function in here
253:40 - that needs to be executed every time we
253:43 - load some different page so we should
253:46 - copy this and paste this in inside
253:50 - our modules dot py and this is why i
253:53 - will grab this entire code from here
253:56 - and paste this in inside our
253:59 - modules dot py right here
254:02 - so once we have done that then it is
254:05 - also a great idea to import this login
254:07 - manager that
254:08 - i talked about so now you really can
254:10 - understand
254:11 - why we created this login manager
254:14 - instance in the beginning of this video
254:16 - so i have done this for this exact step
254:20 - that we should provide later on so
254:23 - i will go here and i will say login
254:26 - manager
254:26 - like that okay so before we continue i'd
254:29 - like to add a personal correction to
254:31 - that line
254:32 - because i remember myself when i
254:34 - developed the project that we are
254:35 - working on
254:36 - this tutorial then this wasn't the
254:39 - return statement so i'd like to change
254:42 - this a little bit to
254:43 - something like query dot
254:46 - get and in here we will convert
254:50 - the received user id to an integer
254:53 - before we really try to get this user so
254:56 - i will say user id
254:58 - right between the built-in in function
255:00 - and
255:01 - this should be enough now if i quickly
255:04 - go back to our
255:05 - documentation then we can also see some
255:08 - more instructions about how to
255:10 - make this login system to work
255:13 - now you can see that we have to provide
255:15 - some extra
255:16 - methods to our user module
255:20 - so you can see that we have to hard code
255:22 - this method
255:24 - that method and as well as those two in
255:27 - here
255:27 - so this really should mean that we have
255:29 - to go ahead and write those methods in
255:32 - our user model
255:33 - because this is what flask requires us
255:36 - to
255:37 - do but to really overcome this i already
255:40 - know
255:40 - a class that is already going to provide
255:43 - those methods
255:44 - to be accessible within our user model
255:47 - so what that means it means that we need
255:49 - to inherit from some additional class
255:51 - that this class will automatically
255:53 - include
255:54 - those methods so let's go ahead and see
255:57 - how we can
255:58 - do that so i will go back to our
256:00 - modules.py
256:02 - and i will say here so it will be
256:06 - from flask underscore login
256:09 - import user mix in
256:13 - now this class is going to include all
256:15 - the methods that we
256:16 - saw in the documentation and to really
256:19 - prove my point
256:20 - i will allow myself to go inside this
256:23 - class
256:24 - by pressing the combination of control b
256:27 - if you use visual code then this should
256:29 - be f12
256:30 - or in any id you use just make sure how
256:33 - you can inspect to
256:34 - your classes so if we go here then you
256:37 - can see that
256:38 - this user mixing class already includes
256:41 - the
256:42 - is active is authenticated is anonymous
256:45 - and e
256:46 - and get id so this should be enough to
256:49 - inherit from this class
256:50 - in our user model so i will say here
256:54 - comma and i will write user mixing
256:57 - so this really saves us a lot of time to
257:00 - really go ahead and hard code some four
257:01 - methods
257:02 - that the flask asks us to do so it is
257:05 - enough to add it as an additional
257:08 - class that we want to inherit from okay
257:10 - so once we have done that
257:12 - then we can really go ahead and test for
257:14 - another time
257:15 - if we can log in our users so i will go
257:18 - to our terminal and check if our website
257:21 - is up and running
257:22 - and it is so it is a great idea to go
257:26 - back here and go to our homepage for a
257:29 - minute
257:30 - and now go back to our login and now we
257:33 - will try to login by the
257:34 - latest user that we created so it will
257:37 - be jc3 if i remember correctly
257:40 - and we can say the password as one to
257:42 - six because this was the password
257:44 - and now if i click on sign in then we
257:48 - receive this non-type object has no
257:51 - attribute first
257:53 - so this means that we wrote something
257:55 - wrong in our
257:56 - query.get inside our rouse.py and
258:00 - i think we should fix this
258:03 - by using some another method after the
258:06 - user.query
258:07 - so i will go here and
258:10 - we will close the mixins it is not
258:13 - necessary now and we will go to our
258:15 - routes.py
258:17 - now i will allow myself to ignore these
258:19 - warnings in here
258:20 - basically this happens because we
258:22 - inherited from some another
258:23 - class right now and it thinks that these
258:26 - arguments are now not accessible or
258:29 - something like that so i will ignore
258:30 - that
258:31 - because this is not going to affect the
258:34 - registration
258:36 - and the exception was in that line
258:40 - so i think we should change this to
258:42 - filter on the score by
258:43 - and one other wow another wrong thing
258:47 - that i have done
258:48 - here is i did not provide the key that i
258:51 - want to
258:52 - filter out from so excuse me really for
258:55 - mismatching the filter on the score by
258:57 - with the get function
258:59 - basically i'm doing this because it is
259:01 - working in another way
259:02 - in django the other framework of python
259:05 - so this should really be enough to
259:08 - go ahead and log in our users so let's
259:11 - test this out one more time okay we will
259:13 - go to home
259:14 - and we will click on login and we will
259:17 - right here jstree
259:19 - and we will try to sign in and you can
259:21 - see that
259:22 - now our user is logged in and we see
259:26 - this success message that we can also
259:28 - close when we want
259:30 - okay so the final customization left to
259:33 - really close this
259:34 - login system topic is really giving our
259:38 - navigation bar
259:39 - a little bit more styling because now
259:42 - our users
259:42 - is logged in so we really want to avoid
259:45 - to
259:46 - show the users the options of login
259:49 - and register and we probably want to
259:52 - show stuff like
259:53 - log out or some extra information that
259:56 - the current
259:56 - logged in user should see so let's go
259:59 - ahead and
260:00 - start doing this all right everyone so
260:02 - right now i'm inside our base.html that
260:05 - we have created for the template
260:06 - inheritance
260:08 - way a long time ago now i'm going to
260:10 - take a lot of changes in here because
260:12 - we want to differentiate between the
260:14 - options that we
260:15 - show to our users whether if they are
260:17 - logged in or not
260:18 - so to do this we can basically go down
260:22 - and we can start writing some conditions
260:24 - with the ginger syntax
260:25 - so for example we'd like to check if the
260:28 - user
260:29 - is logged in or not and if the user is
260:32 - logged in
260:33 - then we probably want to show another
260:36 - information
260:37 - rather than log in and register
260:40 - so let's go ahead and start implementing
260:42 - this so we always want to display this
260:44 - home and market options
260:46 - to our users so i will leave that and i
260:48 - will start writing a conditional
260:50 - right here so we will start saying
260:54 - so curly brackets and then presented
260:57 - sign and we will start writing and if
260:59 - condition
261:00 - if current underscore user
261:03 - now you might be confused how we can
261:06 - access this variable and
261:08 - what this is about so if i go to our
261:11 - router.py
261:12 - i said that this flask login is going to
261:15 - have a lot of built-in functions that is
261:17 - going to help throughout
261:19 - this session of creating the login
261:21 - system so this flask login
261:23 - includes a function that knows to grab
261:26 - the current
261:26 - user whether if the user is anonymous
261:29 - user
261:30 - or if it is actually a logged-in user so
261:33 - this is why i can
261:35 - access it from our base.html so i will
261:38 - say
261:38 - in base.html current user dot
261:42 - is underscore authenticated
261:45 - like that and if you remember this is a
261:47 - method that is arriving from the user
261:49 - mixing
261:50 - that we have inherited so now once i
261:52 - have done that
261:53 - then we will type in else
261:58 - like this and we will also say and
262:01 - if like that and now we can
262:05 - move our different nav elements between
262:08 - the if current user is authenticated and
262:11 - also
262:12 - some of them inside the else statement
262:15 - right here so if the user is
262:17 - authenticated
262:19 - then we probably don't want to display
262:21 - the login and the register
262:23 - navigation elements but if the user is
262:26 - not
262:26 - authenticated then we want to display
262:28 - them so it is a great idea to
262:31 - copy this entire thing from here
262:34 - actually to cut it and paste this
262:37 - in between the else statement
262:40 - right here so now i will fix the
262:43 - navigation i mean the indentation in
262:46 - here
262:47 - and this is great and once we have done
262:50 - that
262:50 - then we probably want to display a
262:53 - nice output like welcome and then comma
262:57 - and then write in the user's username
263:00 - and also we want to display one more
263:02 - element that
263:03 - will allow our users to log out now i'm
263:06 - going to configure the functionality of
263:08 - the logout very soon so don't worry
263:10 - about that okay so i will
263:12 - copy this entire thing from here and
263:14 - paste this in here
263:16 - and now we can work on customizing our
263:18 - navigation
263:19 - elements now if you remember this li tag
263:22 - is actually a one navigation
263:24 - so i can just delete one of them
263:27 - and as a beginner we can say here log
263:30 - out and i will just delete everything
263:34 - from the href and add here an aztec sign
263:36 - to really not send our users to anywhere
263:39 - if they click here
263:40 - because we don't have currently the
263:41 - functionality of the log
263:43 - out and the other thing that i want to
263:45 - do here
263:46 - is copying this again and
263:49 - paste this in over here and the next
263:51 - thing that i will provide here
263:53 - is something like the following so it
263:55 - will be welcome
263:57 - and we will add a comma and then we will
264:00 - use
264:00 - ginger syntax to refer to the username
264:03 - of the
264:03 - currently authenticated user so it will
264:06 - be
264:06 - user i mean current
264:10 - underscore user dot username
264:13 - and i think we can delete this href
264:15 - attribute from here
264:16 - so it really doesn't need this href
264:18 - attribute
264:19 - and this should be enough now the reason
264:23 - i left this in here
264:24 - is is because we are going to add an
264:25 - href in the future
264:27 - and this is never going to send our
264:29 - users to anywhere
264:30 - so i'm fine with this approach okay so i
264:33 - will go to our
264:34 - website and refresh it out and you can
264:37 - see that we receive here welcome
264:39 - jsc3 and we have the option of logout
264:42 - that doesn't send our users to anywhere
264:44 - so this is great now one other thing
264:47 - that i'd like to do here
264:49 - is adding the budget of our users
264:52 - in a nice colored way so i will
264:56 - allow myself to copy one of those in
264:59 - here
264:59 - and paste this in right above it and
265:02 - take some different actions in here
265:04 - so between our anchor tags we really
265:07 - want to delete this welcome message
265:09 - and we want to hit enter now if you
265:11 - remember from the
265:12 - very beginning of this tutorial i said
265:14 - that there are
265:15 - a lot of styling frameworks that
265:18 - does some job to really make our lives
265:21 - easier
265:21 - to import from some already designed
265:23 - styling
265:24 - now we also have one of those to
265:27 - use different icons now it could be a
265:30 - lot nicer if we will display an icon
265:33 - of a coins or something like that for
265:35 - our users
265:36 - so the user can really understand that
265:38 - this is his budget so we can do this by
265:41 - calling the i tag
265:45 - like this and we can say class
265:48 - equals to f a s f a
265:51 - dash coins and now we can say
265:54 - between those something like current
265:58 - underscore user dot budget because if
266:01 - you remember this is the attribute
266:03 - that returns back the budget of our
266:05 - users
266:06 - now i'd like to give this a little bit
266:08 - more styling now i also
266:10 - want to add some styling to our anchor
266:12 - tag so i will go
266:14 - here and i will say style equals to
266:17 - something like color equals to long
266:21 - green so i already know that this is a
266:23 - nice way to display the
266:24 - color of green and i also like to
266:27 - display
266:28 - this entire thing here between the
266:30 - anchor tags
266:32 - as a ball text so we can do that by font
266:35 - dash weight and column
266:38 - and we can say bold and this should be
266:40 - enough to really display some nice
266:42 - information to our users
266:43 - about their budget so we can go now to
266:46 - here and we can refresh
266:48 - and you can see that we have the icon of
266:51 - coins
266:52 - and we also have the number right here
266:55 - now i see that the aligning could be
266:57 - better in here
266:58 - so let's see what i have done wrong and
267:01 - i think
267:02 - this is the fact that i put the text
267:05 - between the
267:06 - eye tags so we should cut this from here
267:09 - and go down a line and locate it over
267:12 - here so this should be
267:13 - a little bit better now and now if i
267:15 - refresh our page
267:16 - then you can see that the aligning is
267:18 - quite great now we could also
267:20 - go here and display a comma
267:24 - if the budget is going to be higher than
267:26 - a thousand
267:27 - because this is not the standard way to
267:29 - really display
267:30 - a number so if we will have a user with
267:32 - a six digit of a budget
267:34 - then you will see a text like
267:37 - this so i will show you that here you
267:40 - will see
267:40 - a coin like this so we should
267:44 - write a function that is going to add a
267:46 - comma every time that we have
267:48 - larger than four digits and also it
267:50 - should be located from the
267:52 - fourth position starting from right so
267:55 - we can do this
267:56 - by going back to our project
268:00 - and we can go to our modules.py and we
268:03 - can
268:03 - write here some more property that is
268:06 - going to be
268:07 - responsible to display our budget a
268:10 - little bit more
268:10 - pretty so we can say add property
268:14 - in user and we can say here def
268:18 - prettier budget like that
268:21 - and we can receive the self as a
268:23 - parameter and the way that we can
268:24 - implement this
268:25 - is first of first check if the budget
268:28 - includes
268:29 - four digits or more so we can say if
268:33 - length of the string version of our
268:36 - self.budget
268:38 - is actually greater or equal to four
268:42 - now the logic implementation of this
268:44 - case is not going to be easy so i will
268:46 - allow myself currently to
268:48 - say pass here and i will also say else
268:51 - in here
268:51 - and if this is actually not greater or
268:54 - equal to 4
268:55 - then i can basically return the value
268:57 - itself so
268:59 - this should be return and we will add
269:02 - the
269:02 - f for formatted string and we can say
269:05 - self
269:06 - dot budget and right after it we can add
269:09 - the dollar sign okay so i think i close
269:12 - this by
269:13 - mistake let's open it back and now i
269:15 - want to show you
269:16 - how we can really work on displaying
269:20 - comma only in the fourth position
269:24 - starting from the right so to explain
269:27 - this
269:27 - i will open our terminal and i will
269:31 - clean the screen and enter inside python
269:34 - okay so let's say that we have a number
269:36 - and we will call it p
269:37 - and this should be equal to 1000 and now
269:40 - i want to
269:42 - say that we should convert this into a
269:45 - string
269:46 - okay so this should return us a
269:49 - thousand with a single quotes right here
269:51 - and so
269:52 - now if i go here and index the
269:55 - character at the -3 position it will
269:58 - start
269:59 - counting from right till it reaches the
270:02 - index of three so
270:03 - this is minus one this is minus two
270:07 - and this is minus three so if i grab
270:10 - this then this gives us back the zero
270:14 - now i always want to add a comma only
270:18 - after we reach the third digit
270:21 - starting from the right so this is why
270:25 - i can go with something like the
270:26 - following so that time
270:28 - i will display the value of str
270:32 - p and then we will index it by -3 and
270:36 - then we
270:36 - add a column to really display all the
270:39 - elements
270:40 - right after the -3 position so this
270:43 - should be responsible to display all the
270:45 - zeros and so if we could say something
270:49 - like the following
270:50 - so for example let's give a right now
270:52 - and we can add a formatted string
270:55 - and we can wrap
270:59 - those with the curly brackets and now i
271:02 - can add a comma
271:04 - now you can see if i print a then we
271:06 - kind of starting to reach the behavior
271:08 - that we want to
271:09 - reach so once we reached this stage then
271:12 - we should look for a way to
271:13 - grab all the digits and we want to
271:17 - stop at the -3 position so this is also
271:20 - going to be a little bit complex but now
271:22 - i can say
271:24 - here so we will add more one more curly
271:26 - bracket
271:27 - and now we will call the strp again
271:30 - so pay attention where i am located in
271:32 - the terminal
271:33 - and now i can index this by the
271:36 - following statement
271:37 - so i could say give me all the digits
271:41 - from the beginning until -3
271:45 - like that and now if i enter and
271:48 - hit a now you can see that it works
271:52 - for the 1000 itself now to prove my
271:55 - point
271:56 - i could basically overwrite the p by
271:59 - saying 1 000 like that i mean
272:02 - 100 000 and now we could call the
272:06 - exact same statement and print a now you
272:09 - can see that this works as well
272:11 - so this is why i can grab this
272:15 - code from here and copy that
272:18 - out and paste this in
272:21 - right here as a return
272:25 - function like that okay so after it we
272:27 - should change the self.budget
272:30 - with p so this should be something like
272:32 - that
272:33 - and now we can add a dollar sign right
272:36 - here so i know that this was a complex
272:39 - topic but i really wanted to show
272:41 - how i thought when i wanted to done such
272:44 - a task
272:45 - because you could probably pay attention
272:47 - that i prepared to
272:48 - show you how i developed this project
272:51 - and so this was one of the greatest
272:53 - challenges that i had to deal with
272:55 - so i really wanted to make this
272:57 - explanation okay so
272:58 - now we have this dynamic property
273:02 - that its name is prettier underscore
273:04 - budget
273:05 - so we should go back to our base.html
273:08 - and
273:08 - change this current user.budget to
273:12 - paying three tier underscore budget and
273:15 - once we have
273:16 - done this then we can go to our terminal
273:18 - and
273:19 - run our website by saying python run dot
273:22 - py
273:23 - and now our website is up and running
273:26 - and so now we could refresh this page
273:29 - and you could see that now we got the
273:32 - comma
273:32 - right here but this is great because
273:35 - this is going to be dynamic
273:36 - so in the future when i'm going to
273:38 - purchase some items
273:39 - then you could see that this comma is
273:41 - going to be disappeared
273:43 - because of the way that we implemented
273:45 - this property
273:49 - okay so till that point we were able to
273:52 - customize our login system successfully
273:55 - but
273:55 - currently if we press on that log out
273:58 - nothing happens
273:59 - so let's go ahead and start configuring
274:01 - this so the way that we are going to do
274:03 - this
274:04 - is by adding an additional route to our
274:07 - application
274:08 - and then this route will know to log out
274:11 - the logged in user and then we will
274:14 - finish it with
274:14 - redirecting our users back to homepage
274:17 - so we will open our pycharm here
274:19 - and actually i see that i'm inside my
274:22 - base.html
274:23 - and it might be a great idea to show you
274:25 - what i'm going to configure in the
274:27 - future
274:28 - so if you remember then we have this
274:32 - log out anchor tag and then inside here
274:35 - we are going to
274:37 - send our users to that url underscore
274:40 - for
274:41 - so actually if i'm on the base.html then
274:44 - i'm going to do that
274:45 - so i will zoom in and i will basically
274:49 - copy this from here and
274:52 - paste this in to here and i will change
274:56 - this to log out now you are probably
275:00 - asking yourself
275:01 - why you are using this url for logout
275:03 - page although you didn't create the
275:05 - route
275:06 - because now i'm going to create this
275:08 - route okay so
275:09 - we will go to our route dot py and we
275:13 - will go down here don't be don't get too
275:16 - much worried about that we said that
275:17 - this might occur
275:19 - because we inherited from some another
275:21 - class and that is fine
275:23 - so we will go down here and we will
275:26 - say at
275:29 - app.route and actually let's zoom in a
275:33 - little bit
275:34 - and we will send our users to slash
275:38 - log out like that and then we will say
275:41 - def log out underscore page
275:44 - and then inside of it we have to use
275:48 - a built-in function that is already
275:50 - inside the
275:51 - flask framework that will allow us to
275:54 - log out the current existing
275:55 - users so in order to do that i will
275:58 - scroll up
275:59 - here i will import the log out
276:01 - underscore
276:02 - user built in function from here and
276:06 - actually once we imported this then we
276:09 - can
276:09 - scroll down and use the function
276:12 - like log out underscore user
276:15 - and that is actually it okay so this
276:17 - will be enough
276:19 - to grab the current logged in user and
276:22 - log it out okay so this should be enough
276:25 - and
276:25 - the next step is probably the flash
276:28 - message that we want to raise here
276:30 - because once we log out our users
276:32 - it totally makes sense to display a nice
276:35 - alert to our users
276:36 - so the user could be basically aware
276:38 - that he is logged out
276:39 - so we could say flash and then we could
276:43 - say you have been
276:46 - logged out like that and actually it is
276:49 - a better idea to send its category as
276:52 - info because it just looks nicer in blue
276:55 - when we log out users
276:57 - rather than just green color okay so
277:00 - this is actually an informative message
277:01 - that we want to display
277:03 - and it totally makes sense to redirect
277:05 - our users back to home page
277:07 - once the user is logged out okay so we
277:10 - will say
277:11 - return re direct
277:14 - and we will use the url for
277:17 - and we will say home underscore page
277:21 - now again the home underscore page comes
277:24 - from
277:24 - here okay so our users will come to here
277:28 - once they are logged out now we can
277:30 - actually save this out and already test
277:32 - this because
277:33 - if you remember we configured as well as
277:36 - the
277:36 - button of log out on our navigation bar
277:40 - so i will go to our website and i will
277:42 - refresh
277:44 - our website and it totally makes sense
277:46 - to check if it is up and running so we
277:48 - will do that
277:50 - so once our website is up and running
277:53 - and then
277:54 - you can see that our
277:57 - user is currently logged in and you can
278:00 - see it from
278:01 - this message now if i click on log out
278:04 - then you can see that we are back on our
278:06 - home page
278:06 - and then there is an informative message
278:08 - that says us you have been logged out
278:11 - so everything works perfect okay so i
278:13 - think that
278:14 - our customization about the market page
278:18 - is pretty much finished because now we
278:20 - have all our
278:22 - navigation elements functioning
278:24 - correctly but currently i'm not quite
278:25 - satisfied with how our home page looks
278:27 - like so it could have been a lot nicer
278:29 - if we had our
278:30 - logo on that home page and as well as a
278:33 - button that says get started or
278:35 - something like that
278:36 - now i already have an html code that is
278:39 - ready to display such an home page so
278:42 - let's go ahead and paste this in in our
278:44 - home.html
278:45 - and as usual you can grab this home
278:48 - snippet
278:48 - from our website only thing you will
278:50 - have to do is
278:52 - going to part 13 of my flask course from
278:55 - my website
278:56 - so let's go back to our pycharm and
278:59 - find the home.html template
279:03 - and actually i'm going to delete
279:04 - everything from here and i'm going to
279:06 - paste this in now let's have a quick
279:10 - look what is going on here
279:11 - now here we extend the base.html we
279:14 - already know how to do that
279:16 - and we also have the welcome to gymshare
279:19 - coding market message
279:20 - wrapped around the blog title because we
279:23 - want to customize our tab
279:24 - name and in the blog content we have
279:28 - some elements that customizing
279:30 - the image that we want to display if you
279:32 - remember this is our
279:33 - logo of our website and this is arriving
279:36 - from this
279:37 - big div tag now in here we also display
279:41 - some nice
279:42 - h1 text and inside here we have a
279:45 - paragraph that says
279:46 - start purchasing products by clicking
279:48 - the link below
279:49 - now the link below is this line
279:53 - so this line is an anchor tag with a
279:55 - button of class button dash primary
279:58 - you already know that from our previous
279:59 - episodes as we
280:01 - created this kind of button when we
280:03 - register or
280:04 - log in our users and you can see that it
280:06 - takes our users to the
280:08 - market page if they click on get started
280:11 - so this is actually something that
280:14 - should be pretty enough for the
280:16 - for the most basic home page for any
280:18 - website
280:19 - so if i save this and go back to our
280:22 - home.html
280:24 - and refresh that out then you can see
280:26 - that we have a nice
280:27 - home kind of a banner that really shows
280:30 - that
280:30 - this is our homepage now if i click on
280:33 - get started
280:34 - you can already see that it leads us to
280:37 - the market page
280:38 - thanks to that url for market page that
280:42 - is inside that angle tag now here
280:45 - we actually have some problem that you
280:47 - already maybe paid attention or not
280:50 - now you can see how currently the
280:54 - user that is using this website is not
280:56 - logged in
280:57 - so we probably ask ourselves if we want
281:00 - to
281:00 - take our users to the market page if the
281:03 - user is
281:04 - not logged in well i think that this is
281:06 - something that we can customize
281:08 - so we probably want to avoid from our
281:11 - users
281:12 - to see that page if they are not logged
281:15 - in
281:16 - so it totally makes sense if they are
281:17 - trying to click on get started
281:19 - and then it will lead them to the login
281:21 - page first
281:23 - and then if the login has been completed
281:25 - successfully
281:26 - then it will take them back to the
281:28 - market page like it's supposed to
281:30 - so we actually have a built-in function
281:32 - for that as well so
281:34 - let's go ahead to pycharm and see how we
281:36 - can use it okay so we will go to our
281:38 - pycharm
281:39 - and we will go inside our routes dot py
281:43 - and we will import this function that
281:45 - will be responsible to not take our
281:48 - users to that market page
281:50 - if the user is not logged in so
281:53 - it will be as easy as going to that from
281:56 - flask underscore login line and say
282:00 - login underscore required okay so once
282:03 - we import this
282:05 - then we can use it as a decorator now if
282:08 - you remember from the very beginning of
282:10 - this entire tutorial
282:12 - i said that the decorators are
282:15 - like functions that execute before the
282:18 - actual function itself so there is a
282:21 - reason why we
282:22 - put in app.route because we want to
282:25 - execute
282:25 - this functionality before we create the
282:28 - route itself
282:29 - so the same approach goes to login
282:33 - required we could actually use this
282:36 - function as a decorator right before
282:40 - our market underscore page route
282:42 - executes
282:43 - so it will be app.route slash market
282:47 - and then right after it we could
282:49 - basically
282:50 - say login underscore required
282:54 - so it will be something like okay we are
282:57 - going to that market page so
282:59 - this line executes and then this line
283:02 - executes
283:02 - so this line will be responsible to take
283:05 - our users
283:06 - automatically to the login page now
283:09 - let's actually see if only adding this
283:11 - line
283:12 - is enough to complete our functionality
283:14 - so i will save that file
283:16 - and i will go to our website and i will
283:19 - click on home
283:20 - and then i will click again on our get
283:22 - started and you can see that
283:24 - we receive an unauthorized message here
283:28 - that says us the server could not verify
283:31 - that you are authorized to access the
283:33 - url that is requested
283:35 - now this is fine but we would like to
283:38 - display the login page
283:39 - automatically if we require our users to
283:42 - log in before accessing this page so we
283:45 - actually have to say to our application
283:48 - where is that login page located
283:51 - so i can redirect the user that wants to
283:53 - log in
283:54 - so it totally makes sense because if you
283:57 - take a look in that
283:58 - login required decorator we actually do
284:00 - not provide any
284:01 - extra information about where it should
284:04 - send our users
284:05 - so to configure this up we should go to
284:09 - our underscore init.py file and we
284:12 - should
284:13 - specify to our login underscore manager
284:16 - where is the login route actually
284:19 - located so once we go down here
284:23 - and we say login underscore
284:27 - manager dot login underscore
284:30 - view equals to and this actually expects
284:33 - for the
284:34 - name as a string of our login
284:37 - route so if we take a look if you
284:41 - remember this is how we named our
284:44 - login route so i will copy the name of
284:47 - the
284:48 - function and i will paste this in
284:50 - between those
284:51 - double quotes so now that we have added
284:54 - this
284:54 - this should be enough to redirect our
284:56 - users to the login page
284:58 - before the market page so let's test
285:01 - this out okay i will go back to
285:03 - home and i will go to
285:06 - get started and now you can see that it
285:09 - already leads us
285:10 - to the login page now you could pay
285:13 - attention that it shows us the alert not
285:16 - in the
285:16 - nicest way but we will solve that in a
285:19 - minute but i actually want you to take a
285:21 - closer look to what's going on
285:22 - in the url bar in here now you can see
285:25 - that we see the slash login
285:28 - but we see a syntax of query with a
285:31 - question mark that says us that the
285:34 - next url from here will be
285:37 - market so you can understand this from
285:40 - this html expression in here
285:42 - so this means that everything is
285:43 - actually working
285:45 - properly now let's fix this alert in
285:48 - here
285:49 - so we probably want to specify to that
285:52 - login manager
285:53 - how we want to display a flashed message
285:56 - because when we use the built-in login
285:59 - required it automatically takes
286:00 - responsibility to flash a message so we
286:03 - want to give it a category
286:05 - so it can understand to display this in
286:07 - a blue color or something like that
286:09 - so i will go back to our dunder init
286:12 - file
286:13 - and right under this line i will
286:17 - say login manager
286:20 - dot login message category and you can
286:23 - already see that it is a
286:25 - built-in field that i can fill in
286:29 - so this will be equal to info because we
286:32 - probably want to display this in a blue
286:34 - color
286:34 - so once we save this then we can test
286:37 - this out again
286:38 - so we can go back to home and again
286:40 - click on get started
286:41 - and now you can see that it really works
286:44 - like we
286:44 - expect okay so we see our regular
286:48 - flashed messages like we used to see
286:50 - when we
286:51 - try to login log out or register
286:54 - okay so now i can basically try to log
286:56 - in with a random user that already
286:58 - exists
286:59 - so we will try to log in with that gst4
287:02 - user and i will click on sign in
287:04 - and now everything is back and works
287:06 - properly so
287:08 - this is a really great addition to our
287:10 - website because this way our clients
287:12 - could not access this
287:13 - slash market page unless if they are
287:16 - logged in
287:17 - already now i'd also like to show you
287:19 - the behavior when we try to register to
287:22 - that website very quick
287:23 - so let's try to create an account with
287:25 - jc6
287:27 - and we will specify a valid mail
287:30 - like that and we will type a basic
287:33 - password
287:34 - and now if we click on create account
287:37 - then you can see that
287:38 - it created this account and it already
287:42 - shows us that please login to access
287:45 - this page
287:46 - now you can see that it tries to lead
287:49 - the
287:50 - created account to the market page
287:53 - as well but it requires the currently
287:56 - registered user
287:58 - to login now it could have been a lot
288:01 - nicer if we
288:03 - raised a message that the user is
288:06 - created successfully
288:07 - and then already log in that user so
288:10 - this is something
288:11 - we probably wanted to do a lot earlier
288:13 - than right now
288:14 - but let's actually do that okay so we
288:18 - will
288:18 - go to pycharm and i'm already in my
288:21 - route dot py
288:23 - now i want you to take a look right in
288:26 - here so actually in the part that we try
288:29 - to
288:30 - redirect our users to the market page it
288:32 - could have been a lot nicer if we
288:35 - do those two things here so first we'd
288:38 - like to
288:39 - flash a new message and also we'd like
288:41 - to
288:42 - log in our users so we can already see
288:45 - the market page
288:46 - as a new user so
288:49 - i will grab those two lines from our
288:53 - login route so i will copy those
288:57 - and i will go back and paste this
289:00 - in right here now in the argument
289:04 - let's actually delete the entire message
289:05 - from here
289:07 - great now as the argument of the
289:10 - login user we could basically
289:14 - pass in the user object
289:17 - that is user to create so
289:20 - we can say user underscore 2 underscore
289:23 - great now if nothing goes wrong with
289:26 - those two lines
289:27 - then it means that the user has been
289:29 - created successfully so we can
289:31 - log in that user now once we do this
289:34 - then we can type in a message like the
289:38 - following
289:38 - so it will be let's write in a formatted
289:41 - string here
289:42 - and we can say account
289:46 - created successfully
289:49 - and we can say you are now
289:52 - logged in as and we can say
289:56 - user to create dot username like that
290:00 - okay so let's test this out with another
290:03 - user that
290:04 - we probably want to create now now i
290:06 - forgot to specify the category so
290:08 - excuse me for that and it is a great
290:11 - idea to actually
290:12 - go ahead and say category
290:16 - equals to success exactly like that
290:20 - okay so now we can go here and we can
290:23 - try to register again so we will create
290:27 - the jsc
290:28 - 7 that time and we will try to
290:32 - create the we will try to fill in
290:35 - valid information so we can click on
290:37 - create account
290:38 - and now you can see that we are already
290:40 - in the slash market
290:42 - and it saves us that we are logged in as
290:44 - jsc 7
290:45 - so it is a lot better now because the
290:48 - new clients that are going to register
290:50 - to that website
290:51 - are going to have a lot better
290:53 - experience with
290:55 - this approach
290:58 - okay so if we take a closer look on how
291:01 - our market page is displayed to our
291:03 - users
291:03 - we'd actually like to change this
291:06 - display a little bit
291:07 - and the way that we want to do this
291:09 - probably a
291:10 - one way that we can do that is to divide
291:13 - this page
291:14 - into two main sections and then the
291:17 - first part of this page
291:19 - is going to be responsible to display
291:21 - the available items on the market
291:23 - and the other part is going to be
291:26 - responsible to show the items that
291:29 - i already purchased as a user from the
291:32 - market so it could have been a lot nicer
291:34 - if we had a division
291:36 - where we display all the items in the
291:39 - left pane and the purchase items in the
291:42 - right pane so it is going to be more
291:45 - focus page
291:46 - about the entire website itself so
291:49 - the way that we can do this is by
291:51 - grading system of the
291:53 - bootstrap styling framework so let's
291:55 - have a look in the bootstrap
291:56 - documentation
291:57 - so i will go to here and i'm inside the
292:01 - greeting
292:02 - system documentation of bootstrap now
292:05 - you can see that we have several
292:07 - examples how we can divide
292:10 - our page now i'd like to show this
292:13 - section in here so this section includes
292:16 - a div tag and it says that
292:18 - class equals to row now the grading
292:21 - system could be implemented
292:22 - the second that you create a div tag
292:25 - with a class
292:26 - of row because it is just as it is
292:28 - sounds
292:29 - because it is going to create a row that
292:32 - is going to be expanded
292:33 - to the entire page so we could
292:36 - grab the row that is created and we
292:38 - could customize
292:40 - the way that we'd like to divide it so
292:42 - the way that
292:43 - this could be divided is by creating
292:47 - some call tags i mean column
292:50 - inside this div class equals to row so
292:54 - the second that you
292:55 - see this and this this is going to be
292:58 - responsible to
293:00 - align our html pages in the
293:03 - following way so we could already start
293:06 - imagining this because in the
293:08 - call dash 8 area we are going to display
293:10 - the available items on our market
293:13 - and on the call dash 4 area
293:16 - we are going to display the purchased
293:18 - items so
293:19 - let's go ahead and start implementing
293:21 - this and if you did not understand what
293:23 - i explained then it is fine
293:24 - you probably will get it as we will
293:26 - start implementing this on our
293:28 - real website so i will allow myself to
293:31 - copy
293:31 - this code statement from here and paste
293:34 - this in
293:35 - right under our block content
293:39 - like that okay so let's fix the
293:42 - indentation
293:42 - a little bit and then we are good to go
293:46 - so the second that i do this then let's
293:49 - see the results what is going to look
293:50 - like so i will allow myself to
293:52 - refresh our website and then you can see
293:55 - the alignment okay this is exactly what
293:57 - we
293:57 - want so we are going to grab our entire
294:01 - table and we are going to locate it
294:04 - right where the
294:05 - call dash 8 starts so let's go back to
294:08 - our pycharm
294:09 - and actually i will allow myself to cut
294:13 - this entire table from here and
294:16 - paste this in under our call dash 8
294:20 - div tag so we will delete this text from
294:23 - here and we will click on enter
294:26 - and we will basically paste our table
294:29 - now i know that the indentation is quite
294:31 - ugly but i'm going to fix that with a
294:32 - pretty fire just in a second
294:34 - so if we save that and go
294:38 - and see the results of that then you can
294:40 - see that
294:41 - this is perfect and this is exactly what
294:43 - we want
294:44 - because the available items are exactly
294:46 - on the left pane
294:47 - now we'd also like to give some spacing
294:50 - to that table
294:51 - so i will create some more styling
294:54 - elements to that row so our table
294:58 - will have a little bit more spacing
294:59 - starting from the left and also
295:01 - from the top so let's go back and
295:04 - do this so i will start writing
295:07 - right where our div class row is
295:10 - something like style
295:12 - equals to margin dash
295:15 - top then add a column and then
295:18 - we could say 20 pixels so we'd like to
295:20 - give a spacing of 20 pixels
295:23 - and we could do the exact same thing for
295:26 - margin dash left and we will say
295:30 - 20 pixels as well now
295:33 - this is going to be responsible to show
295:36 - the table i mean the division of the
295:38 - grading system
295:39 - in that way and i think this looks a lot
295:42 - cleaner
295:42 - right now okay so i said that we like to
295:45 - fix the indentation
295:47 - now you got a couple of ways to do that
295:49 - you can install some plugin to pycharm
295:51 - that is going to
295:52 - customize the annotation automatically
295:54 - for you but
295:55 - you could also basically search for an
295:58 - html prettifier
295:59 - in the web browser so it will be as easy
296:02 - as
296:02 - going to google chrome and search for
296:05 - something like html
296:07 - freetifier and we could go and click on
296:11 - the first result
296:12 - and we could grab our code and we could
296:15 - paste this in
296:16 - and we could click on format html and
296:19 - this will be responsible to
296:21 - already customize the indentation for us
296:24 - so you could click the
296:25 - copy to clipboard section and go back to
296:28 - pycharm
296:29 - and paste this back in and we are good
296:32 - to go okay so you got a lot of ways
296:35 - of how you can do this so i like this
296:38 - approach as well but you can definitely
296:39 - go ahead and install
296:40 - some plug-in to your pycharm or if you
296:43 - use another idea like visual code there
296:45 - are a lot of plugins
296:46 - for those kind of stuff all right so
296:49 - let's continue
296:50 - implementing the logic of the buttons
296:53 - that we
296:53 - like to give their functionality now to
296:56 - avoid actually confusions and to
296:58 - remember for the future
297:00 - i like to give the call dash for
297:04 - name something else so we could say here
297:07 - owned items something like that and we
297:10 - call fix
297:11 - here the div tags like this as well
297:14 - so it will be easier to remember in the
297:16 - future that we
297:18 - like to implement here the owned items
297:20 - with some ginger syntax as well
297:22 - okay so if we scroll up here then you
297:25 - can see that we don't got
297:27 - any title that describes what the
297:30 - left pane is about so it could have been
297:33 - a lot nicer
297:34 - if we would go right above the table tag
297:38 - and we could write in some h2 tags for
297:42 - example and we will close those tags
297:44 - and we could say available
297:49 - items on the market something like that
297:52 - so it will be a lot easier for the users
297:54 - to catch up
297:55 - what the left pane of our page is about
297:58 - now further than that we could also add
298:01 - one more paragraph in here
298:03 - that says click on one of the items
298:08 - to start buying okay
298:11 - so something like that could be a nice
298:13 - secondary title as well
298:15 - and we should write here
298:18 - lower i so it makes a lot more sense and
298:21 - i'd actually like to add some more br
298:23 - tags in here to really see how it
298:25 - affects the entire page
298:27 - so let's see the result of that and you
298:29 - can totally see that it looks a lot
298:31 - cleaner on our eyes when we
298:33 - look at it we can really understand what
298:36 - the left pane is about
298:37 - and we could really do the exact same
298:39 - steps
298:40 - in the right pane where we'd like to
298:42 - display the owned items
298:44 - so we could basically go back to pycharm
298:47 - and copy those lines and
298:51 - paste this in right here so we could
298:54 - say in here
298:57 - let's change the text to own
299:01 - items like that and we could say
299:07 - click on cell item to put an item
299:11 - back on the market something like that
299:14 - okay so the results of that would be
299:18 - something like the following so i'm just
299:20 - thinking the indentation
299:22 - and if we go back to the market page
299:25 - then we can see that now
299:26 - the items page are totally fine and we
299:29 - could continue on
299:30 - implementing the logic behind those
299:32 - buttons okay so now i'm inside the
299:34 - bootstrap documentation again and i'd
299:36 - like to show you some of the nicest
299:38 - features that the bootstrap styling
299:41 - framework
299:42 - gives us so we have something in
299:44 - bootstrap that is called
299:45 - models now this is not the models like
299:48 - we see
299:49 - in the flask itself okay so models
299:52 - allows us
299:53 - to kind of display a nice new output to
299:56 - our users
299:57 - and it totally focuses us to really look
300:00 - at the
300:00 - new output that appears to us because it
300:03 - graze the entire background of the
300:05 - webpage so let's actually see a demo of
300:08 - that
300:08 - so we have this html code in here which
300:11 - is basically
300:12 - responsible to display the model that
300:15 - i'm talking about
300:15 - and basically this model could be
300:17 - configured as a behind-the-scenes
300:19 - functionality of what happens when we
300:22 - click on a button
300:23 - so when we click on launch demo model in
300:26 - here
300:27 - then you can see the result of that so
300:30 - this is exactly what we like to do
300:32 - when we want to display some more
300:34 - information about each one of our items
300:37 - and the exact same process is going to
300:40 - be like displaying an ensuring form if
300:43 - we are sure that we want to purchase
300:45 - that item
300:46 - so this is perfectly what we need for
300:48 - our website
300:49 - now the way that we can implement this
300:51 - on our site is probably the
300:53 - exact same steps like creating an html
300:56 - code
300:57 - that is quite similar to that and then
301:00 - we could connect our buttons
301:02 - with that modal now to actually save us
301:05 - a little bit of time
301:06 - i already customized a nice looking
301:08 - model for us
301:10 - so let's go ahead and see how we can do
301:13 - this on our itunes html
301:15 - okay so i'm back inside our market.html
301:18 - file
301:19 - now if you remember from the
301:20 - demonstration that we saw previously
301:23 - that the button and the modal element
301:25 - that was
301:26 - faded out are actually located in the
301:29 - same code
301:30 - snippet so what this means it means that
301:32 - the modal and the button
301:34 - itself should be located in the same
301:36 - html file
301:38 - but actually pasting the modal itself in
301:41 - this market.html file could be very
301:44 - confusing because it is going to be a
301:45 - lot of lines of html code in this
301:47 - market.html
301:49 - and this is just not organized and could
301:51 - lead to misunderstanding
301:53 - what each html code is responsible for
301:56 - so to avoid this we could locate
301:59 - our model in a separated html template
302:02 - and then this market.html could import
302:06 - this model that we want to create
302:09 - now the way that is going to be designed
302:12 - it is by creating one more directory
302:14 - that we will name it includes and within
302:17 - that includes directory that we are
302:19 - going to create
302:20 - we are going to create some html files
302:22 - that are going to be like helper files
302:24 - so we could import the code snippet from
302:27 - each one of them
302:29 - now let's go ahead and do that okay so i
302:31 - will go inside
302:32 - our templates directory and we will
302:34 - create
302:35 - a new directory and we will name it
302:37 - includes
302:39 - now once we have done that then we can
302:42 - create a
302:42 - html file inside that includes directory
302:45 - that we have created
302:47 - and we'd like to name it items
302:49 - underscore
302:50 - models like that and let's actually
302:52 - delete the auto-generated html from here
302:55 - and in here i'm going to paste the model
302:57 - that i talked about to really save us
303:00 - some time
303:00 - so if we paste this in then this is how
303:04 - the modal
303:05 - looks like when it comes to implementing
303:07 - this in html
303:09 - now i want to give a short overview
303:11 - about what this html code is about
303:13 - so you can see that we have this div tag
303:16 - and then we have a class
303:17 - that says modal fade so this is going to
303:19 - be faded
303:20 - and this is the identifier takes from
303:23 - here
303:24 - now we are going to use it in the future
303:26 - so this attribute is actually quite
303:28 - important for us
303:29 - and we can also see that we have some h5
303:32 - tag
303:33 - inside our model content and
303:36 - i said that the title is actually goes
303:39 - here
303:39 - and we also see that we have a class
303:42 - with modal body
303:43 - and here we are going to display the
303:46 - actual information that we'd like to
303:48 - display
303:49 - in the body of the model okay so this is
303:52 - pretty much the
303:53 - important sections of what this model is
303:55 - about
303:56 - now the way that this could be imported
303:59 - in the
304:00 - market.html is by using the ginger
304:03 - syntax
304:04 - so if we go to here then we could
304:07 - basically import it let's say that we
304:10 - want to import this in here
304:12 - now we could say something like the
304:14 - following so i will zoom in a little bit
304:16 - and we could say include and we will
304:20 - open a single code here
304:22 - and then we want to give the location of
304:24 - that html file that we'd like to include
304:27 - so it is going to be includes
304:32 - four slash items underscore models
304:36 - dot html like that okay so
304:39 - once we have done this then it is
304:42 - basically going to
304:43 - use the code from here and located
304:46 - inside
304:48 - this market.html now to explain the next
304:51 - topic that i'm going to talk about
304:53 - i'd like to divide the display here so i
304:56 - will go to
304:57 - window and edit all tabs and select
304:59 - split
305:00 - vertically okay so in the
305:03 - left pane we have our items modals
305:06 - and in the right pane we have the
305:08 - market.html
305:10 - so let's zoom in here and as well as
305:14 - let's go here to the button
305:17 - of more info now if
305:20 - i now go to our web browser
305:24 - and refresh our page and click on more
305:27 - info then you can see that
305:29 - nothing happens and the reason that
305:31 - nothing happens it is basically because
305:33 - this button doesn't know which model it
305:36 - should
305:36 - trigger so we should specify some more
305:39 - attributes to that button
305:40 - so let's go to our pycharm and right in
305:44 - here so i'm going to scroll a bit and
305:47 - right where our
305:48 - more info button is i am going to
305:50 - specify
305:51 - some html attributes that are quite
305:54 - important for
305:55 - this trigger to work so i will say data
305:58 - dash
305:59 - toggle equals to modal
306:02 - like that and i'm going to scroll here a
306:05 - little bit more and
306:06 - zoom in so we can all see and
306:09 - right after it i'm also going to say
306:12 - data dash target equals to
306:16 - now the value that we'd like to
306:19 - give here is the exact same
306:23 - name of the identifier of the model that
306:26 - we'd like to
306:27 - display so this is why i said previously
306:31 - that
306:31 - this identifier string is going to be
306:33 - quite important for us in the future
306:35 - so i will allow myself to copy this
306:39 - entire string
306:40 - and paste this in right inside our data
306:43 - target
306:44 - now we should also include the hashtag
306:47 - sign
306:48 - to really specify correctly the
306:51 - target that is going to basically
306:53 - displayed when we click on that button
306:55 - okay so now we can allow ourselves to
306:58 - test this out
306:59 - so i will go to our page and if we
307:02 - refresh that out and click on more info
307:05 - then you can see that we can see our
307:08 - model
307:09 - and this is quite great now we can also
307:11 - see if we click on the
307:13 - other more info because it is
307:15 - implemented for both of the buttons
307:17 - now you could pay attention that the
307:19 - background of this model is white
307:21 - and we probably want to change it to
307:23 - really make it fit to our entire website
307:26 - so the way that we can do that is going
307:29 - to our items dot
307:30 - models which is right there and
307:34 - write in some more styling that will be
307:36 - responsible to
307:37 - customize the background color for the
307:40 - background color that we want
307:42 - so we will create some style tags and
307:44 - inside that
307:45 - style tags i will say dot model
307:49 - dash content and i will open
307:53 - a curly brackets in here and inside that
307:57 - i can say
307:58 - background color
308:02 - is going to be equal to the hexadecimal
308:05 - value of our background color so it will
308:07 - be two one two one
308:09 - two one like that okay so we can save
308:12 - this out
308:12 - and refresh our page with f5
308:17 - now if the regular refresh doesn't work
308:19 - for you sometimes the combination of
308:21 - control f5
308:23 - is a stronger refresh so it also loads
308:27 - the entire styling
308:28 - again so i recommend you to do that if
308:31 - the regular refresh is not working for
308:33 - you so i will do that as well
308:35 - and if i click now on more info then you
308:38 - can see that it is implemented correctly
308:40 - and we can also see the title unlike the
308:42 - previous result
308:43 - and the reason we did not see this
308:45 - before it is basically because the
308:47 - title color was also white so we could
308:50 - not see that
308:51 - and now it looks a lot better than the
308:54 - previous result
308:55 - all right so now i want to solve some
308:57 - important problem that we have on the
308:59 - website
309:00 - now i will open this from here and we
309:04 - want to display the button
309:07 - itself right here okay so
309:11 - if you paid attention in the website
309:13 - itself we
309:14 - saw that if we click on more info
309:17 - no matter which item is then we see the
309:21 - exact same information
309:23 - now we probably look for a way to change
309:26 - this behavior
309:27 - because we want to show different
309:29 - paragraphs for each of our items
309:32 - so what this means it means that our
309:35 - modals
309:36 - should be unique per item so
309:39 - the way that we can implement the logic
309:42 - that i talked about
309:44 - is by the following way so let's go back
309:46 - to our pycharm and see that
309:47 - okay so right here you can see
309:51 - that we have an iteration with a for
309:53 - loop that
309:54 - is right inside our market.html and
309:57 - this is why we see the different items
310:00 - now
310:01 - you can see that our button is targeting
310:04 - to the model more info
310:08 - so it is always going to pull
310:11 - that model itself and it is not going to
310:15 - be
310:15 - unique per item so the way that we can
310:19 - change this is changing the location
310:22 - of where we import that model and
310:25 - actually
310:26 - import it inside our for loop and that
310:29 - way we can customize it to be unique per
310:32 - item so let's go ahead and do that now
310:35 - i will make this market.html bigger for
310:38 - a second
310:39 - and i will grab the code snippet which
310:43 - is
310:43 - include includes items html and i will
310:47 - paste this in right inside our
310:51 - for loop like that okay so now i made
310:53 - the items on the score models a little
310:55 - bit bigger in here
310:57 - and the market is still on the right
310:58 - pane so now that i have completed this
311:01 - step
311:02 - basically what is happening here now is
311:05 - that
311:05 - we start our for loop and then we load
311:09 - our items models html and we
311:12 - do that for each item that we are
311:15 - iterating on
311:16 - so what that means it means that this
311:20 - items underscore modal html is having
311:23 - the
311:23 - access for the item object
311:26 - and i'm talking about this exact
311:29 - variable where my
311:30 - mouse is located at so what this means
311:33 - it means that we can refer to
311:36 - that item right inside our items
311:38 - model.html file
311:40 - so this is quite important because we
311:42 - want to turn
311:43 - our models to be unique per item
311:47 - so we will start by changing the
311:49 - identifier
311:50 - to something like dash and then we will
311:54 - call those
311:55 - ginger brackets and we can say item
311:58 - dash id now by doing this we basically
312:02 - give a unique id for each modal
312:05 - and now we could also do that for the
312:09 - title of our model so we probably want
312:12 - to display the title as the item's name
312:15 - so we could say item
312:19 - dot name like that and we could
312:22 - also say inside our
312:25 - modal body something like
312:28 - the following so we could say item dot
312:31 - description
312:32 - because if you remember we have a
312:34 - description field
312:36 - for each of our items and now
312:39 - this is great and we have completed the
312:41 - customization of the itunes underscore
312:43 - model
312:44 - now i'm going to work on the market.html
312:48 - and if you can remember our data target
312:51 - is now pointing to a wrong
312:54 - location because it should be the same
312:57 - as the
312:58 - identifier string of the model
313:01 - itself so now i will copy this out
313:04 - and i will paste this in like that
313:07 - and now that i have done this then
313:09 - basically we were able to
313:11 - achieve to create models that are unique
313:14 - per item
313:15 - so let's test the result of that okay
313:17 - i'm going to go to our browser
313:19 - and i'm going to refresh that out and
313:22 - now if i click on
313:23 - more info then you can see that we have
313:26 - the title as
313:27 - iphone 10 and we have the description
313:29 - that we have created for the iphone 10
313:32 - now if i close this and click on more
313:35 - info
313:36 - in the second item then you can see that
313:38 - the title is changing and as well as the
313:41 - description so this is perfect because
313:43 - now we have
313:45 - models that are unique per item
313:48 - okay so now we know that when we click
313:52 - on more info that the result is great
313:55 - but the purchase this item is not
313:57 - configured yet
313:58 - now the entire process for the purchase
314:01 - this item is going to be quite same
314:02 - because all we have to do now
314:04 - is basically creating one new model that
314:07 - is going to be
314:08 - dedicated for purchasing an item and we
314:11 - probably want to display the same model
314:13 - pretty much
314:14 - and this is going to be like a
314:16 - verification model
314:18 - that asks the user if
314:21 - he is sure that he wants to purchase
314:23 - this item
314:24 - so it is also a good opportunity to
314:26 - really understand the entire process
314:28 - that we have
314:29 - done here so this is going to be just
314:31 - basically the same as
314:33 - what we have done with more info so
314:35 - let's go ahead and
314:36 - implement this as well so i will go back
314:38 - to our python
314:39 - and i will make the items models bigger
314:43 - a little bit and we will make the font
314:46 - smaller now you could pay attention that
314:50 - this is the code for the entire model so
314:52 - i can basically copy the exact
314:54 - same code and change the attributes that
314:58 - we have
314:59 - changed in the previous example as well
315:03 - so i will copy the entire code
315:06 - and i will paste this in right here
315:09 - now you can see that this gives us an
315:12 - error because it says us that we have a
315:15 - duplicate
315:16 - id reference now this is great because
315:19 - we probably want to avoid
315:20 - to having the same identifier string so
315:23 - this is why it makes a lot of sense to
315:26 - change this
315:27 - to something like purchase
315:30 - confirm like that and maybe
315:34 - in the title itself we'd like to leave
315:37 - it
315:37 - as the item underscore name but it makes
315:40 - totally sense
315:42 - to go inside our model body and
315:45 - give it here some different text so this
315:48 - could be
315:49 - something like are you sure
315:52 - you want to buy and then we could say
315:57 - item dot name and then we could continue
316:01 - this sentence
316:01 - by saying for and now we can add the
316:06 - price for that item so it will be
316:08 - item.price
316:09 - and if you remember it displays it just
316:12 - as the number itself so we could add a
316:14 - dollar sign
316:15 - and right after it we could include a
316:17 - question mark okay so
316:19 - it is important that we display this
316:22 - sentence in here
316:23 - and i think this is pretty much great
316:26 - for now
316:26 - and only we'd like to change the comment
316:29 - here to
316:30 - something like purchase
316:34 - confirm like that okay so now we have a
316:37 - new identifier that should be
316:39 - implemented for the green button that we
316:42 - have on our website
316:43 - so now we can create the market html
316:46 - bigger and we could
316:48 - change the values for this button
316:51 - so we should also create the same
316:54 - attributes like we did in the previous
316:56 - button as well
316:57 - so we could create data
317:01 - toggle equals to model like that
317:04 - and we could say data dash target
317:07 - equals to and here is again the exact
317:10 - location that i want to paste the value
317:13 - of the identifier so i will paste this
317:15 - in and make sure that
317:16 - you do the exact same thing as well so
317:20 - this is great and now i can save this
317:22 - and
317:23 - go to our website and if we refresh that
317:26 - out
317:27 - then we could basically try to click on
317:29 - purchase this item for iphone 10
317:31 - and nothing happens so
317:34 - what we have missed let's see
317:38 - that the target okay
317:42 - good mistake so don't forget to add the
317:44 - hashtag sign as well it is quite
317:46 - important so we also have done that for
317:48 - the previous one so it is very important
317:50 - and now if we refresh this page and
317:53 - click on purchase this item then you can
317:55 - see the perfect result that we probably
317:57 - wanted to see so we see the title again
318:00 - and we see the sentence that says are
318:02 - you sure you want to buy
318:04 - iphone 10 for 800 so this is perfect
318:07 - okay this is actually
318:09 - the logic that we wanted to implement
318:11 - from the very beginning
318:12 - and on the next part we are also going
318:15 - to
318:15 - include some more buttons inside this
318:18 - model
318:18 - that are probably going to be
318:20 - responsible to actually buy this item
318:23 - so the close button only closes the
318:25 - model but we'd like to add some more
318:27 - buttons into that model and then if we
318:29 - click on that button
318:31 - then it will make sure that the process
318:33 - of purchasing
318:35 - is going to be implemented for that
318:37 - specific user
318:38 - all right so if we remember previously
318:41 - we
318:42 - wrote the model for purchasing an item
318:45 - now i said that this model is going to
318:48 - lead for an external form
318:50 - that is going to ask us if we are sure
318:53 - that we want to
318:54 - buy this item so to demonstrate that
318:57 - this is exactly what is happening when i
319:00 - click on purchase
319:01 - this item now we'd like to have here one
319:04 - more button
319:04 - that is going to confirm that we want to
319:07 - purchase it
319:08 - so to achieve this we have to create a
319:11 - form
319:12 - and then we have to create inside that
319:14 - form a submit field
319:15 - which is pretty much the exact same
319:17 - thing that we did in login and register
319:20 - but this time the action that we are
319:22 - going to take behind the scenes when we
319:24 - post a request is going to be quite
319:26 - different so
319:28 - let's see how we can do that okay so i
319:30 - will close this
319:31 - and we will go to here and the location
319:34 - that we have to
319:35 - put the form is going to be right here
319:39 - in items on the score of models
319:41 - so if we scroll down a bit then maybe
319:44 - under the
319:45 - question mark i mean the question itself
319:47 - that asks us if we want to buy this item
319:49 - for
319:50 - that amount of price we probably want to
319:52 - create a
319:53 - form so i will just start with creating
319:57 - the
319:57 - tags of it so it will be form and then
320:01 - we will say method equals to
320:03 - post like we did with the
320:06 - login and with the register system now
320:09 - i'm going to stop here
320:10 - and i'm going to create those forms in
320:13 - our forms.html
320:15 - so let's go ahead and see how we can do
320:17 - that so i will go to
320:18 - our forms.py and we will go to
320:23 - here and we will create two new classes
320:26 - now if you remember we said that we want
320:29 - to implement the
320:30 - selling process as well so it is going
320:33 - to be quite same so this is why i'm
320:35 - going to
320:35 - create here two forms so i will start by
320:38 - saying
320:39 - class purchase item form
320:42 - and this is going to inherit from flask
320:44 - form as well and the only thing that i
320:47 - like to create here for this stage will
320:49 - be submit
320:50 - field okay so it will be just the exact
320:53 - same line like
320:54 - we did in register or with login okay so
320:58 - this should be enough
321:00 - now i will scroll up a bit and we will
321:03 - change the label
321:04 - to purchase item okay so now i can
321:09 - copy this class and i could paste this
321:12 - in
321:13 - and we could change this to cell item
321:16 - form so this is something that i already
321:18 - create for the future and we could say
321:21 - cell item like that okay so i think we
321:24 - are done with the forms
321:25 - now there might be some other fields
321:27 - that we might create in the form html
321:30 - itself
321:30 - but actually creating the submit fields
321:32 - in the backend side
321:34 - is pretty much enough for me right now
321:36 - so now
321:37 - i have to send these forms as a context
321:40 - to our templates
321:42 - so if you remember if i open our
321:43 - routes.py
321:45 - then we can totally remember that we
321:47 - send our
321:48 - form instance as an information to our
321:52 - template
321:52 - so i'm going to do the exact same thing
321:54 - with the items.html
321:57 - but we will start first with sending the
322:01 - information of
322:02 - purchase item form okay so it is
322:05 - imported
322:05 - up top here and now i can go just in the
322:08 - first line of our
322:10 - app.route so i will zoom in a little bit
322:12 - and i can say
322:14 - purchase form equals to
322:17 - purchase item form and create an
322:19 - instance of that
322:20 - like this now if you pay attention then
322:23 - we already send the items as an
322:25 - information in this route
322:27 - so we could basically add a comma here
322:29 - and send one more information
322:31 - and we could say purchase form equals to
322:36 - purchase form like that and then this
322:38 - purchase form is going to be accessible
322:40 - from the
322:41 - items.html itself now once we save this
322:45 - then you could remember that this is
322:48 - sent to market.html sorry for saying
322:51 - items.html basically i refer to
322:54 - that html template so if i open the
322:56 - market.html
322:58 - then we have this include in here
323:01 - so what this means it means that we
323:03 - could access the purchase form variable
323:05 - within this template as well so we could
323:09 - go
323:09 - here and in here we could do the actions
323:13 - that i'd like to do
323:14 - right now okay so we said that the
323:17 - purchase underscore form is accessible
323:20 - from here now if you remember from the
323:22 - previous examples of login and register
323:25 - in order to perform a post request
323:27 - successfully
323:28 - we have to create this secure hidden tag
323:31 - that we always initialize so this is why
323:34 - i will go and
323:35 - write a code like the following and now
323:37 - i'd like to
323:38 - give this entire div a little bit nicer
323:41 - customization
323:42 - so to apply this maybe it is a greater
323:45 - idea to
323:46 - move this text here to an h4 tag or
323:50 - h3 track something like that so i just
323:53 - cut this text from here and i'm going to
323:56 - locate it inside our form so i will
323:59 - delete the line here
324:01 - and i will go down here and i will open
324:05 - a new h4 tag for example and we could
324:08 - paste
324:08 - the sentence back in here
324:11 - now we could also say style
324:15 - or class excuse me text dash center and
324:18 - it will centralize the text itself
324:21 - now it is also a great idea to write
324:24 - here even a smaller text than that
324:26 - and to centralize it as well by saying
324:29 - class equals to text center and we could
324:31 - continue on by
324:33 - saying by clicking
324:37 - purchase you will
324:40 - purchase this item so
324:44 - this is a great sentence to write here
324:47 - because the user can totally understand
324:49 - that there is no
324:50 - way to go back if he clicks on purchase
324:54 - this item button
324:55 - okay so once we have wrote those h4 and
324:58 - h6 tags
325:00 - then we can basically continue on with
325:03 - creating the submit field
325:05 - so if you remember the way that we can
325:08 - do that
325:09 - is by calling the ginger syntax and we
325:11 - could refer
325:12 - to that purchase form
325:15 - variable and we could initialize the
325:18 - submit field that we have created
325:20 - previously and now i can give it a class
325:22 - like class equals to and we could say
325:25 - here
325:26 - btn btn-outline
325:29 - dash success so it will give it a green
325:32 - color
325:33 - and we'd like to initialize the button
325:36 - block as well so
325:37 - the entire button will be expanded to
325:39 - the entire form
325:41 - okay so i think this should be enough
325:42 - for now and
325:44 - let's test the results of that okay so i
325:46 - will verify that our website is up and
325:48 - running
325:49 - and it is so it is great and now i can
325:51 - go back to my web browser
325:53 - and close this alert and refresh our
325:56 - page
325:57 - now if i click on purchase this item in
325:59 - here then we can see that we see
326:01 - this nice title and also we see
326:04 - the smaller text that says by clicking
326:07 - purchase you will purchase this item
326:10 - now i pay attention that it might be a
326:11 - great idea to throw some brs in
326:14 - here so we could throw a br in
326:17 - here and we could do the exact same
326:19 - thing
326:20 - in here okay so now let's test the
326:23 - results of that
326:24 - and i think now it looks a lot cleaner
326:26 - so let's continue from
326:28 - here okay so we do not do anything
326:30 - special when we click on purchase item
326:33 - right after we enter the modal
326:35 - so let's see what we have to do when we
326:38 - click on it
326:39 - so if we actually go to our pycharm
326:42 - then i am already inside the routes.py
326:46 - and you can see that we initialize this
326:48 - purchase underscore forum
326:50 - now regularly we would like to go
326:53 - with the approach that we have done for
326:57 - the login and the register
326:58 - forms as well so we probably want to
327:02 - run such a code which is going to be
327:04 - like purchase form
327:06 - dot validate on submit
327:09 - okay so it is going to be exactly the
327:11 - same thing but
327:12 - let's not forget the if statement in
327:14 - here so
327:16 - now everything works fine now before we
327:18 - actually continue on writing
327:19 - some more code within this conditional
327:21 - i'd like to show you
327:22 - how the purchase form looks like when we
327:26 - print it on the server side so if we
327:28 - actually go ahead and
327:29 - do only print purchase form when we
327:32 - click on purchase item
327:34 - let's see the results first so you can
327:36 - understand the following things that i'm
327:38 - going to do right after it
327:39 - okay so once we have done with this then
327:42 - it is a great idea to go to our website
327:44 - and make sure that it is up and running
327:47 - and maybe it might be a better idea if
327:49 - we
327:50 - restart it great okay so now
327:53 - i will refresh our page and now i will
327:56 - try to click on purchase this item
327:58 - and we receive method not allowed okay
328:01 - so we should add this as a
328:04 - method that are allowed in our decorator
328:08 - so we already know how to do that so
328:11 - let's just copy one from our register
328:13 - page
328:13 - so it will be copying from here and
328:16 - pasting in
328:18 - right there okay so now if we click on
328:20 - purchase this item
328:22 - then we are totally fine and now i want
328:24 - to show you the results of that on the
328:25 - server side
328:26 - now you can see here that we
328:29 - receive the object of the form itself
328:32 - and there's nothing surprising with that
328:34 - now i want to show you a little bit nice
328:36 - trick that we have in
328:37 - class instances and that is the
328:40 - attribute of underscore
328:43 - dict like that so this takes the entire
328:46 - instance
328:47 - and displays it in a nice dictionary so
328:50 - it will really give you a
328:51 - look of what are the keys and values
328:54 - that are available
328:55 - within this purchase form instance so
328:58 - once i save this
328:59 - and i go back to our web browser and
329:02 - let's try to click again on purchase
329:03 - item
329:04 - to really launch the sprint line and now
329:07 - i can go back to our terminal
329:09 - and we could see down here that we got
329:12 - some
329:13 - more information now if we search
329:17 - for the key of submit then you can see
329:20 - that
329:21 - we actually see the submit field
329:25 - as an object itself now this means
329:28 - that we have an available key within
329:31 - this instance
329:32 - so we could access it with a square
329:35 - brackets
329:35 - so we could go to here and we could
329:38 - delete this
329:39 - from here like that and we could say
329:43 - submit like a dictionary okay so it is
329:46 - fine to
329:47 - run such a code and now let's see the
329:50 - results of that
329:51 - again so i'm going to go and
329:54 - click on purchase this item and i'm
329:56 - going to go
329:57 - back to here and now you can see
330:00 - that this is actually translated to
330:03 - an html code so this means that we can
330:06 - pretty much implement the same html code
330:09 - hard coded inside our form
330:11 - and then this way we will have our
330:14 - custom
330:15 - form that is also going to be accessible
330:18 - within the route itself now let's see
330:20 - what i mean by that okay so
330:22 - let me grab this code snippet from
330:25 - here and go back to our
330:28 - items underscore models and right
330:32 - before the submit form in here
330:35 - i'm going to paste this in and customize
330:37 - this a little bit
330:39 - now you could remember that this ginger
330:41 - syntax is actually
330:43 - responsible to this ginger syntax
330:45 - because this is what we saw so i'm going
330:47 - to change this
330:48 - to being in id of purchased
330:52 - item and i'm also going to change this
330:55 - name to
330:55 - purchased item and then i'm going to
330:58 - change the type to
330:59 - hidden now when i do this hidden
331:03 - this means that this input is not going
331:05 - to be displayed within the form
331:07 - basically this is just a background
331:09 - information
331:10 - that we are going to consume in the back
331:13 - end of our application
331:15 - meaning in the route of market itself
331:18 - so this is why i put in here hidden now
331:22 - the value for that
331:23 - is going to be the item dot name
331:27 - and the reason i am doing this it is
331:29 - because the second that i click on
331:31 - purchase item
331:32 - i want to know which item the user tried
331:35 - to purchase
331:36 - so then we can continue on taking the
331:38 - action that we need
331:39 - to assign this item to that user so
331:42 - once we have done this then we can go
331:45 - back to our routes dot
331:47 - py and we can take some different
331:49 - actions in here
331:50 - now i'm going to change this code from
331:52 - here to
331:54 - something else and let's try to see what
331:57 - happen if we try to
331:59 - write in here purchased item
332:02 - now the reason i may think that this is
332:05 - going to work it is basically because
332:07 - in the submit field we were able to
332:10 - access it by the
332:11 - square brackets and type in submit as a
332:13 - string so
332:15 - if we create a field with the name of
332:17 - purchase item
332:18 - then why it won't be accessible so let's
332:20 - see the results of that now if i
332:22 - actually go to our website and try to
332:24 - click on purchase this item
332:27 - then we will end up with receiving key
332:29 - error
332:30 - now the reason for this it is because
332:32 - this purchase item
332:34 - is not going to be accessible within the
332:36 - form itself
332:37 - beside it is going to be accessible from
332:39 - an entire different area
332:41 - now as we know already there are a lot
332:43 - of request types that we create to
332:45 - actually manage this website
332:47 - so flask library gives us access to that
332:51 - built-in request object
332:53 - to really have a fully control of how
332:55 - the request object looks like
332:57 - every time that we create some requests
332:59 - like get or post
333:01 - so in that case we try to create a post
333:03 - request
333:04 - and then this means that the information
333:07 - about the purchased item
333:08 - is going to be available within the
333:10 - built-in request object
333:13 - so let's go ahead and import that okay
333:15 - i'm going to go to
333:16 - python and i'm going to go to that
333:19 - second line
333:20 - where from flask is and i'm going to
333:23 - import the built-in
333:25 - object that is request like that
333:28 - so now that i have done this basically i
333:31 - can
333:32 - allow myself to go down here
333:35 - and change this code to something like
333:38 - the following
333:39 - so it will be request dot form
333:42 - now the reason that i have this form
333:45 - attribute
333:46 - it is because the built-in request
333:48 - object already includes a lot of
333:49 - information about all the forms that are
333:52 - built in in the request itself so here
333:56 - i could say something like dot get
333:59 - and here i could access the value of the
334:02 - purchased
334:03 - item so now that i have done this
334:07 - then let's test the results of that okay
334:09 - so i'm going to save that file
334:11 - and i'm going to verify that our website
334:14 - is up and running
334:15 - and i'm going to try to go back to
334:17 - homepage
334:18 - and then go back to get started which is
334:20 - the market page
334:21 - and let's try to purchase the iphone 10
334:24 - so i'm going to
334:25 - click on purchase item and once i have
334:27 - done that
334:28 - then you can see that we see the output
334:30 - of iphone 10
334:31 - so that means that we have now fully
334:34 - controlled
334:34 - and we are aware which item our user
334:37 - tried to purchase
334:39 - so now we can continue on taking more
334:41 - actions from here
334:42 - alright so if you remember i said that
334:45 - we are going to fix the
334:46 - always being shown output about the form
334:50 - resubmission thing so if we actually go
334:53 - to
334:53 - here and we try to refresh this page
334:56 - then we
334:57 - always will end up with receiving this
334:59 - message from javascript
335:00 - that says us that you are in the middle
335:03 - of form submission
335:04 - so to avoid this we actually have to get
335:07 - rid of the conditional
335:09 - form.validate on submit because the
335:11 - reason this pop-up
335:13 - shows here it is because every time that
335:15 - we go inside this route
335:17 - then it tries to submit some form that
335:20 - executes
335:21 - and the reason is because we don't
335:23 - differentiate
335:24 - between get request to post request
335:28 - but now that we have fully control of
335:30 - the request object
335:32 - we can differentiate between those
335:33 - request types so
335:35 - let's go ahead and do that okay so i'm
335:37 - going to cancel this
335:38 - and i'm going to go to pycharm actually
335:40 - i'm going to cut this
335:41 - code snippet from here so we can copy
335:45 - this back later on
335:46 - and i'm going to delete this entire
335:48 - conditional and now we can change this
335:50 - to
335:50 - something like the following which is
335:52 - going to be look like
335:54 - if request dot method
335:58 - equals to post like that
336:01 - so this is pretty much equal to
336:03 - form.validate on submit but
336:05 - again this is going to avoid displaying
336:07 - the output that we saw about form
336:09 - resubmission
336:10 - so now i can basically go with something
336:14 - like purchased underscore item
336:17 - equals to and i'm going to paste back in
336:19 - the code that i cut previously
336:21 - so it is going to be equal to
336:22 - request.form dot get
336:25 - purchased item like that and once we
336:28 - have
336:28 - done this then we can continue on
336:31 - and we can try to filter the item object
336:35 - based on the value of purchased item
336:38 - so we could say let's actually write
336:41 - this in a
336:42 - shortened version so i will say p
336:44 - underscore item underscore
336:46 - object like that and we could make this
336:49 - to be equal to item
336:50 - dot query dot filter underscore
336:54 - by and we'd like to filter by its name
336:57 - so
336:58 - it will be name equals to
337:01 - purchased item like that
337:04 - now if you remember i know it is been a
337:07 - long time ago since we applied this
337:09 - but to actually inspect into the object
337:11 - of the item
337:12 - we have to execute this dot first method
337:15 - so we will really have fully access to
337:17 - the
337:17 - purchased item object now okay so now
337:20 - that we have done this
337:22 - it is a great idea to verify that this
337:24 - object is not
337:25 - none before we continue on and before we
337:28 - continue and take some more actions
337:30 - so i'm going to say if p item object
337:34 - and then enter this conditional and now
337:36 - once we have this p
337:38 - item object we'd like to assign an
337:40 - ownership to the
337:42 - user that is currently logged in now
337:45 - we did not see this before but we have a
337:47 - built-in object
337:49 - that is always going to refer to the
337:51 - current logged in
337:52 - user object so the way that we can
337:55 - import this
337:56 - is going to be as easy as going up top
337:58 - here and
337:59 - import from flask login the
338:02 - current user built in object so make
338:04 - sure to do that
338:05 - like i did as well and now i could
338:09 - basically
338:10 - access each user field like we have in
338:13 - our user modules
338:14 - okay so now we should remember how we
338:17 - can assign an ownership
338:18 - to a specific user so let's go ahead and
338:21 - remember that
338:22 - now i'm going to go inside my modules
338:25 - dot py
338:26 - and i'm going to show you the item
338:29 - module which is right here and if you
338:32 - remember
338:33 - for each item object we have the option
338:37 - to assign
338:38 - an owner feel to it so in that stage we
338:41 - can assign the owner field
338:43 - to the item object that we have filtered
338:45 - out by using the filter underscore by
338:47 - function
338:48 - just a minute ago so we could basically
338:50 - go back to
338:51 - here and say p underscore item
338:56 - underscore object dot owner
339:00 - equals to and then i can basically refer
339:03 - to that current user object that we have
339:05 - imported
339:06 - and now to assign the ownership
339:08 - successfully
339:09 - i have to put in the id of the current
339:12 - user so it will be
339:14 - dot id like that and if you're confused
339:17 - by that line
339:18 - it is mainly because in modules.py we
339:21 - gave the foreign key of user.id
339:24 - so our database expects for the id of
339:27 - the
339:28 - user that we are going to give the
339:30 - ownership to it
339:31 - so i'm going to go back to our routes
339:33 - dot py
339:34 - and in that stage it is not enough to
339:38 - leave it as it is
339:39 - because in real life when you purchase
339:41 - some item
339:42 - it makes great sense to decrease the
339:45 - amount of the budget
339:46 - of the current user so the way that we
339:48 - can do that
339:49 - is by easily decreasing the budget of
339:52 - the user
339:54 - by basically subtracting the current
339:56 - budget
339:57 - by the items price itself so it will be
340:01 - something like the following so i can
340:04 - say current
340:05 - underscore user dot budget
340:08 - minus equals to the p
340:11 - underscore item object and then we could
340:14 - basically say
340:16 - dot price like that and once we have
340:19 - done such a change
340:20 - we need to execute that db.session
340:24 - dot commit line to really perform a
340:28 - save operation towards our database and
340:30 - this should be pretty much enough to
340:32 - really
340:33 - writing the algorithm of how a user can
340:36 - purchase some item okay so
340:37 - let's test this out so i'm going to go
340:39 - to our website
340:41 - and i'm going to refresh to home page
340:43 - and before that let's make sure that our
340:45 - website is up and running
340:48 - great so now i can go to our website
340:51 - and we can try to purchase the
340:54 - iphone 10 now the next thing that i
340:57 - expect to happen
340:59 - is to really see again the market page
341:01 - but now i should see the budget of 2
341:04 - 200 so if i click on purchase this item
341:07 - and let's actually see the result okay
341:10 - so we see that
341:11 - two hundred dollars and this is perfect
341:14 - now i know that there are a lot of steps
341:16 - that we have to complete here
341:18 - and first of them is to actually remove
341:20 - now this iphone 10 from here
341:23 - now the way that we can do this is
341:25 - displaying the items
341:27 - that their owner is none only
341:31 - so let's see what i mean by that so i'm
341:33 - going to go to our pycharm
341:35 - and let's zoom out a little bit so we
341:38 - can see what is going on here
341:40 - and i'm talking about the line
341:43 - that is responsible to send as
341:47 - context to our market.html so if you pay
341:50 - attention
341:51 - right here in the item query dot all
341:54 - here is our mistake now we'd like to
341:57 - filter those items
341:59 - by owner equals to none because it makes
342:02 - sense to display those items in
342:04 - available
342:04 - items section only if they don't have an
342:08 - owner so this is why we should change
342:10 - this line
342:11 - to something like item dot query
342:14 - dot filter underscore by and we should
342:17 - filter by owner equals to none
342:20 - all right so now that we have changed
342:22 - this in the next reload we should expect
342:25 - to not see the item that i purchased
342:28 - so if you remember i purchased actually
342:30 - the iphone 10
342:31 - and now if i actually refresh this page
342:34 - we again see that resubmission
342:36 - output but don't worry we said that we
342:39 - want to totally differentiate between
342:41 - get to post request
342:42 - and we did not write in a conditional
342:45 - that is looking like
342:47 - equals to get so this is why we still
342:50 - see this message so don't worry about
342:52 - that
342:52 - and let's actually go back to home and
342:55 - then we could
342:56 - go to market now you can see that we
342:58 - only have
342:59 - one item that is available on market now
343:02 - one more thing that we'd like to
343:03 - implement here is to
343:05 - basically display a message that we
343:07 - purchased some item
343:09 - so we could flash a success message or
343:11 - something like that
343:12 - so let's go ahead and fix this so once
343:15 - we
343:16 - commit our changes we could say flash
343:20 - and we could raise a message like
343:23 - congratulations
343:25 - you purchased and now
343:29 - we could refer to the variable of the
343:32 - item name by changing this to formatted
343:34 - string
343:35 - and we could say p item object dot name
343:39 - you purchased item object.name for
343:42 - and we could specify the price of the
343:45 - item itself so we could say p item
343:48 - object again
343:49 - and we could refer to that price
343:52 - attribute
343:52 - so this should be great to really flash
343:54 - the message itself
343:56 - now i said that we should fix the
343:59 - resubmission output that we see always
344:02 - so let's go ahead and fix that
344:04 - and the way that we can fix this is as
344:07 - easy
344:07 - as going down here and to
344:11 - conditional this up like if request
344:14 - dot method equals to get
344:18 - and then we could basically execute
344:20 - those lines
344:22 - only if the request type is get
344:25 - and this should be enough to really not
344:27 - see that confirm resubmission
344:29 - output that we see always so
344:32 - if we want to verify that then we could
344:36 - now refresh the page and you can see
344:38 - that now it is totally fine and it works
344:40 - correctly
344:41 - and we don't see that from resubmission
344:43 - output okay so
344:44 - now we are going to continue on to
344:47 - adding some more security layers in here
344:49 - and now think about it if i am going to
344:53 - click ahead
344:55 - to that purchase this item then it will
344:58 - probably end up purchasing it because we
345:00 - don't have any logic implemented
345:02 - that says if the budget is actually
345:06 - not greater than the item object price
345:10 - then raise an error we don't have a
345:11 - logic like that so
345:13 - this is why we should write some logic
345:16 - to prevent from our users
345:18 - to have the ability to purchase an item
345:21 - that their budget is not
345:22 - enough for it so this is why we should
345:25 - write some more python code
345:27 - so i'm going to go here and now we could
345:30 - basically imagine a code that
345:32 - is going to say something
345:35 - like if current user can
345:39 - purchase okay so executing a conditional
345:41 - before we actually assign the ownership
345:44 - could be something really great and
345:45 - amazing so this
345:47 - is why what we could do in that case is
345:50 - writing some function in our user model
345:54 - that is going to receive the item object
345:56 - as an argument
345:57 - and we could really verify that if the
346:00 - user's budget is not greater
346:04 - than the item object price itself then
346:07 - we should prevent from them to purchase
346:09 - this item
346:09 - so this is why i'm actually going to
346:11 - remain this code in here but
346:13 - you could guess that we don't have such
346:15 - a method yet
346:16 - but let's go ahead and create it so i'm
346:18 - going to go inside
346:19 - our modules dot py and i'm going to
346:23 - scroll up to our users
346:24 - and we could write some more functions
346:28 - i mean methods in here so we could say
346:31 - def can
346:32 - purchase like we wrote in the
346:37 - routes dot py and i'm going to receive
346:39 - as an argument
346:41 - item object so it will be item
346:43 - underscore obj
346:45 - something like that and we could
346:47 - basically
346:48 - return self
346:51 - dot budget greater or equal
346:55 - than item object dot price
346:59 - so by doing this i am returning a
347:02 - boolean
347:02 - value that is basically going to return
347:04 - true or false
347:05 - and this step is going to really verify
347:08 - that the user could purchase this item
347:10 - so once we have this in here then it is
347:14 - a great idea to
347:15 - go to our routes dot p y and this now
347:18 - needs an
347:19 - argument so the argument is for sure
347:21 - going to be the
347:23 - p item object like that
347:26 - and this should be enough to really
347:28 - verify that our users
347:30 - could purchase this item so now
347:33 - if we don't hit this conditional then it
347:36 - quite makes sense
347:37 - to go here in else statement
347:41 - and raise one more flash message that
347:44 - is going to say let's actually
347:48 - scroll up a bit before we write this
347:50 - message
347:51 - and we could basically say unfold
347:53 - through
347:54 - nately you don't have
347:57 - enough money to purchase and let's
348:01 - actually refer
348:02 - to the object itself in here and we
348:05 - should change this to formatted string
348:08 - and now we could say p item object dot
348:11 - name like that and now
348:15 - we should add some categories to both of
348:17 - these flash messages so here we should
348:19 - say
348:19 - category equals to danger and
348:24 - up top it is obvious that we should say
348:26 - category
348:28 - equals to success like that okay so
348:32 - now that we have completed this there's
348:34 - one more step that we have to complete
348:36 - before we really test this out
348:38 - now pay attention to the following code
348:41 - that we have in app.route
348:43 - so we have request method equals to post
348:47 - and we execute some lines of code
348:48 - and we have request method equals to get
348:51 - and we execute some lines of code
348:53 - but if you pay attention we don't send
348:55 - our users to
348:56 - anywhere right after the post request
348:59 - completes so this
349:00 - is why we should decide where we want to
349:03 - send our users
349:04 - once the entire conditional of if
349:07 - request dot method equals to post
349:09 - finishes so it totally makes sense to
349:12 - grab the indentation in here
349:14 - and redirect our users back to this
349:17 - exact route
349:18 - so the user could really continue on
349:21 - purchasing some items
349:23 - so i'm going to say here return redirect
349:27 - and i'm going to launch the url
349:29 - underscore for
349:30 - built-in function and i'm going to write
349:33 - here market
349:34 - underscore page okay so this really
349:37 - should be enough to test the entire flow
349:40 - so i'm going to verify that our website
349:42 - is up and running
349:43 - and it is and now i can refresh our
349:46 - website
349:46 - and now we should expect for a red
349:49 - colored
349:50 - message if we try to purchase the laptop
349:53 - because we only have
349:54 - 200 left so if we click on
349:57 - purchase item then you can see that we
350:00 - receive this output
350:02 - that says unfortunately you don't have
350:04 - enough money to purchase laptop
350:06 - we could add an explanation mark two
350:08 - here to really make it nicer
350:10 - but the point is it works and this looks
350:13 - great
350:14 - and we actually completed the entire
350:16 - process of how we can assign
350:18 - an item to a user that is logged in
350:21 - okay so one more thing that i'd like to
350:23 - do before we close out this topic
350:26 - is to moving those three lines of code
350:29 - into being a method inside our item
350:31 - model
350:32 - so if you imagine a situation it could
350:34 - have been a lot nicer if we
350:36 - don't have those three lines of code and
350:39 - besides that
350:40 - we could have a code that is going to
350:43 - look like p item object
350:45 - dot assign ownership something
350:48 - like that or basically this could also
350:51 - be
350:52 - dot by okay so anything that you like
350:54 - will do
350:55 - so let's go ahead and do this okay so
350:58 - i'm going to undo here
350:59 - several times to really not ruin things
351:02 - out in here
351:03 - and we are going to create an additional
351:05 - method inside our
351:07 - items model and this will be responsible
351:11 - to
351:11 - turn the entire flow of this items route
351:14 - to a lot nicer
351:16 - so i am going to go to our modules.py
351:20 - and i am going to create a method this
351:22 - time in the
351:23 - item module itself because now we should
351:26 - assign an ownership
351:27 - to a specific user so it is going to be
351:30 - something like the following so we could
351:32 - say
351:33 - def by and we could receive a parameter
351:36 - that we will name it user and the
351:40 - lines of code that i'm going to be
351:41 - executed in here is pretty much going to
351:43 - be the same as in routes.py
351:46 - besides we are going to change the p
351:49 - item object to self so i'm going to
351:53 - cut this out from here and i'm going to
351:57 - paste this in under by and
352:00 - every place that we see p item object
352:03 - is going to be changed to self so for
352:06 - that and for that we should change to
352:08 - self and for the user we should
352:11 - replace those with the user that we are
352:15 - going to
352:16 - fill in as an argument so now that we
352:19 - have this method which we name it
352:21 - by we could basically execute it
352:24 - by only going here and
352:27 - say p underscore item object
352:31 - dot by and we only have to pass
352:34 - in the current user object so it will be
352:37 - just typing in here current user and we
352:40 - pretty much done with the entire process
352:42 - okay so now
352:44 - to actually test this out we have to
352:47 - create a new user because it will save
352:49 - us some time
352:50 - because the jsc 6 user is having
352:53 - currently
352:54 - 200 and we'd like to test this with a
352:58 - new user that is going to have as
353:00 - default
353:01 - 1 000 so we could log out for a minute
353:05 - and you can see that we see this
353:07 - informative message
353:08 - which is perfect and we could register
353:11 - with a new user so
353:12 - i think this will be jc8 that time and
353:15 - we could
353:16 - put in some valid information
353:19 - and we called create the account okay so
353:22 - we are inside the market page
353:24 - and now we only want to test if this
353:27 - change and moving the code to model.py
353:30 - is going to work for us so i'm going to
353:32 - click on purchase
353:34 - item and now you can see that we see
353:37 - this message
353:38 - that we see you purchase laptop for 1
353:41 - 000
353:42 - and i see that we forgot the dollar sign
353:44 - in here and now you can see that we
353:46 - don't have any items remaining
353:48 - in this available items on the market
353:51 - section so this is perfect
353:53 - and the budget is updated as well to
353:56 - zero dollars
353:57 - so really the entire flow is starting to
353:59 - work and this is perfect
354:01 - only i will just change this message to
354:03 - being with a dollar sign
354:05 - and this is going to be as easy as
354:07 - adding it
354:08 - in here and this is now
354:12 - perfect
354:15 - all right everyone so i'm currently
354:17 - logged in with the latest user that we
354:19 - have created which
354:20 - its name is jsc8 and if you remember
354:23 - with this user we purchased an item that
354:25 - its price was one thousand dollars and
354:28 - this is why our budget is zero over here
354:30 - now to really show you how we should
354:33 - display the owned items for a specific
354:36 - user
354:36 - i am showing you our page because i
354:38 - imagine that
354:39 - we could basically create some bootstrap
354:42 - cards
354:43 - and by saying cards i mean like a nice
354:45 - looking square shapes
354:46 - where we will display the old items that
354:48 - the user has
354:50 - and each of those cards will include
354:53 - some buttons that says sell this item so
354:56 - let's go ahead and start working on this
354:58 - but first of first
355:00 - we should be able to query all the items
355:03 - that
355:03 - the current user owns so this is why i
355:07 - will go to my pycharm
355:09 - and i will start by going to routes dot
355:12 - p
355:12 - y and if you remember we have this
355:15 - built-in
355:16 - object that says current user and it
355:18 - knows how to identify
355:20 - the object of the user that is currently
355:22 - logged in so we could write
355:24 - a query that basically filters out the
355:27 - items
355:28 - that the current user owns so let's go
355:31 - ahead and do this
355:32 - right under our market page route
355:35 - but it totally makes sense to write such
355:38 - a filtration
355:39 - under the if request dot method equals
355:42 - to get conditional
355:44 - so i will go here and i will
355:47 - say something like owned underscore
355:49 - items
355:50 - equals to item dot query dot
355:54 - filter underscore by and as the
355:57 - expression in here
355:58 - i will say owner equals to username
356:02 - dot id i mean current user
356:06 - dot id okay so the reason i'm doing id
356:09 - because if you remember from the db
356:12 - relationship that we created
356:14 - we mark the relation between
356:17 - item and the user by its identifying
356:21 - number so this is why i can allow myself
356:24 - to filter this out by current user
356:26 - dot id and this should be enough to
356:28 - bring all the items that the current
356:30 - user owns them
356:31 - so now i will pass this as a context
356:35 - by saying owned underscore items equals
356:38 - to
356:40 - owned items like that
356:43 - okay so this really should be enough to
356:46 - go now to our market.html
356:48 - and start working on the implementation
356:50 - of how we want to display this
356:52 - okay so if you remember we have this
356:54 - call dash 8 which displays
356:56 - available items on the market and right
356:59 - here we have div class 4 which is
357:03 - basically designed for displaying the
357:04 - items that the current user owns them
357:07 - now in here i can write some nice html
357:09 - code to really start working on the way
357:11 - that i want to design this
357:13 - so we can say div class equals to row
357:16 - and you will see in a second why i'm
357:18 - creating one more
357:19 - row under this column and i can now
357:23 - start writing the iteration that we'd
357:26 - like to do probably
357:27 - so we could say for owned item
357:31 - in own underscore items and we could
357:35 - close our expression
357:38 - like that and right here i will say
357:42 - div class equals to call dash
357:45 - md-6 okay so i will stop here and really
357:49 - explain
357:49 - why i did what i did okay
357:53 - so by purpose we want to declare this as
357:56 - 6
357:56 - because if you remember from the
357:57 - previous session that we created div
357:59 - class equals to
358:00 - row div element we implemented the
358:03 - reading system of bootstrap
358:04 - and the maximum size that you can locate
358:07 - an html element within a row
358:09 - is only 12. so this is why
358:12 - if i create six and there is more than
358:16 - two items
358:17 - then each two items it has to force
358:19 - itself to
358:20 - jump down a row and it looks nice if you
358:23 - display only two cards in a single row
358:25 - so this is why
358:26 - i implemented this in that way okay so
358:28 - right
358:29 - between those div tags i'd like to paste
358:32 - some html code that will be responsible
358:34 - to create those
358:35 - bootstrap cards that i talked about now
358:38 - you can find the code that i'm going to
358:39 - paste
358:40 - it in in my official website so just
358:43 - navigate to the episode 16 of this
358:45 - entire
358:46 - tutorial okay so i will paste this in in
358:48 - here
358:49 - and explain what is going on here as
358:51 - well
358:52 - so we have one more div tag that says
358:54 - card
358:55 - text center and bg dark so nothing
358:58 - really complex in here
358:59 - and right after it we have the card body
359:02 - class
359:03 - and right after this we have some class
359:06 - to display car title so we could imagine
359:08 - that
359:09 - this code is responsible to display
359:11 - probably in the up top of the card
359:13 - and the button is basically made for
359:16 - the option to sell the item that the
359:19 - current user owns
359:20 - and you can see the data toggle and data
359:23 - target as well
359:24 - and you should be familiar with this if
359:26 - you watch the last episode
359:28 - and here we have some paragraph that
359:31 - says additional text
359:33 - so we could edit this by displaying some
359:35 - more text about this item
359:36 - okay so if i save this file and go back
359:39 - to our website
359:40 - and refresh that out then you can see
359:43 - what the
359:44 - code that we wrote is responsible for
359:46 - and you can see that this is a really
359:48 - nice card that displays the item that
359:50 - the user owns
359:52 - now you can see that there are a lot of
359:54 - placeholders that we have to
359:55 - change them so the way that we can
359:58 - change them is easily
359:59 - by going here and edit the
360:02 - text that we should edit them okay so in
360:05 - the card title
360:07 - we probably want to display the item's
360:09 - name so
360:10 - it will be by accessing the variable
360:13 - block of jinja
360:14 - and we could say owned item and
360:18 - this is actually accessible because of
360:20 - this
360:21 - for loop and we could refer to the
360:24 - attribute of name
360:25 - of this item and by doing this this will
360:28 - be responsible to display
360:29 - laptop besides the placeholder that we
360:32 - saw previously
360:33 - and we could leave the cell this item
360:35 - because this is the actual purpose of
360:37 - the button
360:38 - and in the additional text we could
360:40 - basically
360:41 - give a nice informative sentence that
360:44 - says something like the following so
360:46 - this could be
360:48 - this item costs and then we could refer
360:52 - to the price attribute
360:53 - so it will be owned item dot price
360:57 - and we could add a dollar sign right
361:01 - here
361:01 - and by doing this you can already guess
361:03 - that this is going to display the
361:05 - following line
361:06 - so now things are looking a lot cleaner
361:09 - and you can already see that
361:10 - if there is going to be more than two
361:12 - items in here
361:13 - so this card would be located in here
361:17 - and then the third card will have to
361:19 - force itself to
361:20 - locate in here so this is why
361:24 - i went with the following approach okay
361:27 - so from now
361:28 - each step that i will be configuring
361:31 - will be basically
361:32 - the same as we did for purchasing an
361:35 - item
361:35 - so if you remember in the last episode
361:39 - we also created in forms.py
361:43 - a form for cell item form as well
361:46 - so this is why i'd like to create an
361:49 - instance of that
361:50 - and send it as a context to the route.py
361:54 - as well so it will be by going here
361:58 - and say selling form
362:01 - equals to cell item form and this is
362:04 - probably not
362:05 - up top here as the import line so we
362:08 - could say
362:09 - sell item form like that and
362:12 - this selling form should be sent as
362:14 - context to the
362:16 - market.html as well so down here
362:20 - we could send this like selling
362:23 - underscore form equals to selling
362:25 - underscore form
362:27 - like that now if you remember
362:30 - when we implemented the purchasing item
362:33 - we
362:34 - search for request.form dot get
362:38 - purchased underscore item because this
362:41 - was a reference to
362:42 - an input that its name was purchased
362:45 - item
362:46 - so we will go back to this route dot py
362:49 - to really write python code to perform
362:53 - action
362:54 - like for selling the item itself okay so
362:57 - this should be enough for now in the
362:59 - routes.py
363:00 - and now let's go ahead to our
363:02 - market.html
363:04 - and create a model for selling an item
363:07 - like we did for purchasing so i will
363:11 - open
363:11 - our market.html and i will also show you
363:16 - a kind reminder that in order to display
363:19 - a purchasing item modal
363:21 - we created this items underscore models
363:25 - html page
363:26 - now to really have a nice separation
363:29 - between selling and purchasing
363:31 - i'd like to create one more html file
363:35 - that we called name it something
363:38 - like owned items models like that
363:42 - and we could delete the auto generated
363:45 - html
363:46 - and like i said because the logic
363:48 - implementation is going to be quite the
363:50 - same
363:51 - i can allow myself to grab the exact
363:54 - same model from the purchasing item
363:56 - model
363:57 - and later on we could change some of the
363:59 - identifier strings or html text
364:02 - to make it dedicated for selling an item
364:05 - okay so i will go to items underscore
364:08 - models
364:09 - and i will copy the entire code under
364:12 - the purchase confirm
364:14 - and i will paste this in here and
364:18 - if you remember we had some special
364:20 - style for
364:21 - this model as well so i will grab the
364:24 - style tags and paste this in as a
364:27 - first line okay so now this is some
364:30 - dirty job but we have to do it okay so
364:32 - let's go over the
364:34 - areas that we have to change from
364:37 - purchasing
364:38 - to selling or sell or something in that
364:40 - kind
364:41 - okay so you could already notice that we
364:44 - have an identifier that says
364:46 - model purchase confirms so we could
364:48 - change this to
364:50 - selling confirm like that and we can
364:52 - also change the comment in here to
364:55 - make it nicer and if i scroll
364:58 - down a bit then i think it is okay to
365:01 - leave the item name
365:02 - like that and now in
365:05 - here you can see that there is a
365:08 - reference to an hidden tag
365:10 - that comes from purchase form and if you
365:12 - remember we also
365:14 - initialized the selling form as well so
365:17 - we could
365:17 - change this to that and now here we have
365:20 - a sentence that says are sure you want
365:22 - to buy so we can say
365:24 - change this to sell and in here
365:28 - we could say by clicking sell you
365:31 - will put this item
365:36 - back on market like that now
365:39 - you can already see the input inside
365:42 - this model
365:43 - as well and you can see that it has an
365:45 - identifier that says purchased item
365:48 - so it totally makes sense to change this
365:50 - to
365:51 - sold item okay so we
365:54 - created this in past tense so we will
365:56 - leave it as it is
365:57 - and this will be sold item as well and
366:00 - we'd like to keep this in hidden and the
366:02 - value
366:02 - as the same so again we have this
366:05 - purchase form here and this has to be
366:08 - selling form and besides doing this
366:12 - success we'd like to do is danger to
366:15 - really differentiate between the
366:17 - different actions
366:18 - so one will be green and the ceiling
366:20 - will be
366:21 - red okay so the close button that is
366:25 - here we could leave it as
366:26 - it is and that will be pretty much it
366:29 - now if you remember to trigger a model
366:33 - we have to trigger this identifier
366:36 - in here so i will allow myself to
366:39 - copy this statement and to really start
366:43 - working
366:43 - on two separated windows to not confuse
366:46 - us so we could really understand the
366:48 - further changes that we make from this
366:50 - point so i will split our panes and this
366:53 - will be by window
366:54 - editor tabs and we like to do this split
366:57 - vertically
366:58 - and in the left pane we will keep the
367:02 - owned items models
367:03 - and in the right pane we will open the
367:07 - not the items model excuse me we will
367:09 - open market.html
367:10 - okay so from here we are good to go and
367:14 - let's scroll down a bit in here and you
367:18 - can see that we have under call for
367:22 - some more things that we'd like to
367:24 - change in here
367:25 - so we have this button right and this
367:27 - button is actually what responsible to
367:30 - trigger sell this item model and if you
367:33 - paid attention
367:34 - we have here a data target that says
367:38 - your data target now this should be
367:42 - changed to something that is related
367:45 - with the
367:45 - owned item variable to really have
367:48 - a unique model per item so
367:52 - this is why i will make the owned items
367:55 - modal a little bit
367:56 - bigger and i will change this
368:00 - to owned underscore
368:02 - [Music]
368:04 - item like that and we should probably
368:06 - change
368:07 - all of those for all the places that we
368:10 - see item
368:11 - to owned item so i will do that just in
368:14 - a minute and that will be
368:15 - in here and as well as in here
368:19 - and also in here
368:22 - and let's catch up if we have more of
368:24 - that
368:25 - so to really make our lives easier in
368:27 - here we could basically
368:28 - search for item and we could
368:31 - pay attention that every item is with
368:35 - owned item right now so we are good to
368:37 - go from
368:38 - here and now i can really copy this
368:41 - identifier string
368:42 - and copy that out and now i will make
368:45 - the market.html bigger
368:47 - and we could paste this in
368:50 - right in here like that and
368:53 - this should be pretty much enough to
368:55 - really see the model itself
368:58 - when we want to sell an item so
369:01 - now i can go to our website and we could
369:04 - refresh it
369:05 - and if we click on sell this item
369:07 - nothing happens
369:09 - and this really means that we probably
369:11 - forgot something important
369:13 - and this is why i will focus for a
369:15 - minute in what is going on in
369:17 - market.html
369:18 - and have a look in here so in here
369:22 - we start our iteration and yeah we
369:26 - i think it is because we did not trigger
369:29 - this include line so if you remember to
369:32 - really
369:32 - trigger the model itself it should be
369:35 - recognized as an html code in the exact
369:37 - same
369:38 - page so this is why in each iteration we
369:40 - have to use this include
369:42 - in order to really have the model
369:45 - implemented
369:46 - inside the for loop so each item will
369:48 - trigger
369:49 - a separated model regarding the
369:50 - information inside of it
369:52 - so this is why i could go with something
369:54 - like this we
369:55 - could grab the code from here and we
369:59 - could paste this in right under the
370:02 - for loop and we should change this to
370:06 - owned underscore like that because we
370:09 - want to import the
370:11 - models html that we have just now
370:13 - created
370:14 - now i want to have a look in owned items
370:17 - models
370:18 - to really ensure that we don't have any
370:21 - leftovers
370:22 - with the owned underscore item because
370:24 - we iterate over a different
370:26 - variable name so here we are good
370:30 - and here we go as well and as well as in
370:32 - here
370:33 - and if we take a look
370:36 - in the input okay here we should also
370:39 - change this to
370:41 - own underscore item as well so i have a
370:44 - really nice trick that you can
370:46 - do for such a scenario where you want to
370:49 - make sure that you replace
370:50 - all the variables with something so you
370:52 - can basically use the control
370:54 - f and search for a specific text in your
370:57 - entire page
370:58 - now if i search for double curly
371:00 - brackets and item
371:02 - then you can see that we are good to go
371:04 - and nothing really exists
371:05 - with this expression so we could now
371:09 - go to our page and refresh it out and
371:12 - test if this works
371:14 - and you can see that the result is quite
371:16 - great now we see
371:17 - the title in here and we see this
371:20 - sentence and this button currently will
371:22 - not do anything because we did not
371:23 - configure the functionality of this
371:25 - button so let's go ahead and do that
371:27 - okay so in the left pane we have our
371:29 - route dot py
371:31 - and in the right pane we will work on
371:33 - some html code to display some
371:34 - differences
371:35 - now if you remember the way
371:39 - that we grab the item that was attempted
371:42 - for purchasing in the previous sessions
371:45 - was by going to here
371:49 - and say request dot form
371:52 - dot get and then we use the name
371:55 - of the input itself so this really
371:59 - came from this name attribute
372:03 - of this specific input now if we take a
372:06 - look
372:06 - in owned on underscore items dot model
372:09 - so i will put it in here
372:11 - then we have an input with a
372:14 - name sold underscore item so basically
372:18 - what we could do in route dot py
372:21 - we could really implement the same logic
372:25 - for selling the item like we did
372:28 - in purchasing it so i will close
372:31 - those and start working on the way that
372:34 - this should be implemented
372:35 - okay so we could go after the if
372:40 - expression in here and start working on
372:42 - the area what happens if the user wants
372:44 - to
372:45 - sell the item so to really differentiate
372:48 - between those
372:49 - i'd like to add a comment here that says
372:52 - purchase item logic and
372:55 - down here we could say cell
372:59 - item logic like that okay so we
373:02 - can say here sold underscore item
373:06 - equals to request dot form dot
373:09 - get and right here we could say sold
373:12 - underscore item
373:13 - now pay attention how i am keeping the
373:15 - same logic like in purchase
373:18 - okay so once we have this sold item then
373:21 - we probably
373:22 - want to grab the object of the item
373:24 - itself
373:25 - because in here we only try to
373:28 - get the items value itself
373:31 - so we could say s underscore item
373:34 - underscore object equals to item
373:38 - dot query dot filter underscore by
373:41 - and we could say name equals to
373:44 - sold underscore item and we could hit
373:47 - the dot first method in here
373:49 - now like in previous sessions if this
373:52 - item object is going to be
373:54 - not null then we can really start
373:57 - working on assigning this item to
373:59 - no one so we could go ahead
374:03 - and say if s underscore item underscore
374:06 - object and hit the column sign and enter
374:10 - this conditional all right so now
374:13 - we probably want to look to execute
374:16 - some method that will ensure that the
374:19 - logged in user
374:20 - is really have an ownership on this item
374:24 - so the way that we can do this
374:27 - is by creating a method in the user
374:30 - module
374:31 - we could name it can underscore cell and
374:35 - the can underscore cell will return
374:38 - a boolean variable true or false that
374:41 - will basically explain if the user has
374:43 - this item
374:44 - for real so this will be by
374:47 - saying something like if current user
374:51 - that can underscore cell and
374:54 - we call pass the item object in here
374:58 - now i know that we don't have this
374:59 - method but this is just in theory
375:02 - so we can really understand the idea of
375:04 - how i'm going to implement this
375:06 - now again you could pay attention how
375:08 - this is quite
375:09 - equal to what we did for purchasing the
375:12 - item itself
375:13 - so if you remember if we press here
375:15 - control b
375:16 - then this can purchase returns a boolean
375:20 - variable
375:21 - that basically ensures that the user can
375:23 - purchase this item
375:25 - so by creating a method that will say
375:28 - def can sell and this will receive the
375:32 - item object
375:33 - one more time like that
375:37 - we could really verify in here that the
375:40 - user really owns this item
375:42 - and the way that we can do this is by
375:45 - the following expression
375:47 - now if you remember up top here
375:50 - we have these items which is basically
375:54 - responsible to be a reference for
375:57 - all the items that this user owns so
376:00 - we could say return
376:04 - item underscore object in self
376:07 - dot items and this should be really
376:09 - enough to
376:10 - return us true or false because if this
376:13 - item object is
376:14 - in self dot items then it means that the
376:17 - user
376:18 - really owns this item and he can sell it
376:21 - so we could go back to here and
376:24 - if we hit this conditional again this is
376:28 - going to be the same
376:29 - approach like we did in item purchasing
376:32 - so here we called execute again in
376:35 - theory
376:36 - something like s item object
376:40 - dot cell and we again
376:43 - like to pass in here the current user
376:46 - object
376:47 - for this method and this cell
376:50 - should do the exact opposite action
376:54 - from the buy method so if we inspect
376:57 - inside buy
376:58 - then you could see that first or first
377:01 - we assigned a new owner
377:03 - and then we decrease the budget and then
377:06 - we
377:07 - executed the tb.session.comit so the
377:10 - exact opposite of this method
377:12 - would be def cell and we could receive
377:15 - the user object as a parameter
377:18 - and we could say self dot owner
377:21 - equals to none so this is the exact
377:24 - opposite action of assigning an
377:26 - ownership
377:27 - we assign the ownership to nobody
377:30 - so we could say here again user dot
377:33 - budget
377:33 - and you could already guess what i'm
377:35 - going to do here this time beside
377:38 - minus equals this will be plus equals
377:41 - because we want to give the money back
377:43 - and
377:44 - this will be again for sure self.price
377:47 - and again we can say here db.session.com
377:51 - it
377:52 - like that okay so as we have done that
377:55 - we can continue on the logic
377:57 - implementation so i can go back to our
377:59 - routes dot py
378:00 - and after we perform this action we
378:04 - could grab the flash from the
378:07 - conditional of purchasing
378:08 - and paste this in here and we could
378:12 - change this
378:12 - a little bit so we could say
378:14 - congratulations
378:16 - you sold s item object dot name
378:22 - back to market
378:26 - and i think this should be enough okay
378:28 - back to market and we could add an
378:30 - explanation mark
378:31 - and we could delete this and we forgot
378:34 - to close the
378:35 - double quotes in here and so this should
378:38 - be enough and we will leave the category
378:39 - success as it is
378:41 - okay so let's scroll left in here and go
378:44 - down now if the user could
378:48 - not sell this item then we probably want
378:50 - to
378:51 - raise a flash message that something
378:53 - went wrong and the user does not really
378:55 - own this item
378:56 - so we could say else and we could
379:00 - grab this from here and paste this in
379:03 - and we called say in general
379:06 - something went wrong
379:09 - with selling and we could refer to
379:13 - s item object dot name
379:17 - and we could leave the category equals
379:19 - to danger as
379:20 - it is all right so i think we are ready
379:22 - to test this out
379:24 - now i hope that the actions that we have
379:26 - taken in the last minutes
379:27 - made a lot of sense for you because the
379:30 - selling
379:30 - implementation is pretty much the same
379:33 - like purchasing it
379:34 - so this is why you saw a lot of copying
379:37 - and pasting stuff
379:38 - so i hope that you understood everything
379:40 - pretty much clear because
379:41 - from this point if the selling item
379:43 - works properly then it means that we
379:44 - finished everything with this website
379:46 - so let's go ahead and see if this works
379:49 - great so i will
379:50 - refresh our page and we can now click on
379:53 - sell this
379:54 - item and once i click on sell this item
379:57 - then you can see that everything is
379:58 - pretty much working and we
380:00 - see congratulations you sold laptop back
380:04 - to market
380:05 - and you can see that we have a new one
380:07 - thousand dollars
380:08 - and you can also see that the available
380:11 - items on the market
380:13 - is really updated with the information
380:15 - that it's supposed to
380:16 - so this really means that the selling
380:19 - logic implementation is working perfect
380:21 - as well
380:22 - alright everyone so i think this will
380:24 - close out our episode
380:25 - and like i said in the beginning the
380:27 - feedback of how this series was for you
380:29 - is really important for me so i can
380:31 - really know what i should improve in the
380:33 - next series that i will be creating in
380:35 - the future
380:36 - and i will be creating one more episode
380:38 - that will basically
380:39 - explain in general how you can deploy a
380:41 - flask application to production
380:43 - but this is not going to be specifically
380:46 - for this website
380:47 - basically i will be creating a general
380:49 - video that will help everybody with
380:51 - their flask projects how they can deploy
380:53 - it on production
380:54 - alright so if you like this video please
380:56 - hit the like button and also consider
380:58 - subscribing to my channel if you already
381:00 - did not
381:00 - and i will see you very soon

Cleaned transcript:

we are going to start learning about the flask web framework now this is a micro framework that allows everyone to build their own web applications using the python programming language and what is so great with flask it allows everyone to build web application with only a few lines of code so it turns the experience of building a website to a lot quicker and easier and in this series of videos we are also going to start with a very minimal application and we are going to push forward until we have an advanced website where real users can start using it so i really believe that in this series of videos we will cover everything that you need to know about the flask web framework in order to come with a great looking website alright so let's have a quick look to the website that we are going to build throughout this series okay so this is the final result of the website that we are going to build throughout this series now the main idea of this website will be to create a marketing system where different users can buy or sell their items so in order to get started i can press in here in that button and then you can see that i see a warning here that i should log in to access that page now if i'm happened to not have a user here then i can basically go ahead and click register now i'm going to mismatch these details a bit so you can be aware of the different error handling that we are going to apply on this website and once i click on create account then we can see that we receive several errors regarding to that website so as you can understand we are going to apply a lot of error handling like in real websites so now i will go ahead and create a valid account here so once i click on create account then we can see that we are inside a real looking web page and you can see on the left pane that we have the available items on market and each item has its name and also its barcode and price and we can display more information about each of our products and as you can see in up top here we have our budget that is set by default to 15 grand so that means that we are going to create a budget system for our users as well and if i go ahead and purchase that item which its price is 520 then you can see that we receive a nice message with the purchase item and we can also pay attention that our budget has been changed over here and further than that we can see in the right pane that now on my items i see that we have a new item that we have the option to sell it so if i'm going ahead and sell this item back to the market then we can see that our budget is back at 15 grand and we can also see that this page is refreshed to what it was before i purchased that item so it is going to be a lot of fun building this website and let's go ahead and get started all right everyone so you can pay attention that i'm inside the terminal in a windows machine but of course don't worry if you use a mac or any kind of linux distribution because i'm going to say the same command that is going to work on those operating systems as well and also one more important point here i'm going to assume that you have python 3.8 or any version above installed and also a ready ide installed that you'll work with so it could be visual code sublime text or pycharm and just to mention off i'm going to use pycharm in this series but it is not quite important which id you are working with just make sure that it is configured with python correctly okay so let's go ahead and create our directory that we are going to store our project files inside it so i will go here and write in make directory and this is the same command for any linux distribution as well and i will type in here the name of the directory that i want to make so it will be flask market and then i will go ahead and use the cd command to change the directory and i will basically type in the name of the directory that we created and now before we go ahead and actually launch this directory in our pycharm i want to install the dependencies that are quite important in order to start building our first flask application so i will go here and use the pip to install some package and you can use basically the same command for any linux machine as well and i'm going to type in here pip install flask and once i have done that then you can see that we got some warnings that are saying that requirement already satisfied because when you go ahead and install flask it is basically going to install some secondary packages that are kind of dependent to flask so just make sure that you hit this command correctly and then there is no any output of errors or something like that and once you have done that let me just clean our screen here then we can basically go ahead and test out if we installed flash correctly and i will do that by type in here flask dash dash version and if you don't see any errors in this command then we should go ahead and try to start our first flask application because we received a correct output that just specifies the versions of some of the dependencies that are related to the flask framework so let's go ahead and build our first application in python okay so i have already opened my pycharm here and you can basically pay attention that i opened it in a directory that is the same directory that we created so make sure that you point your id to the directory that we created a few minutes ago and then inside our directory we are going to create our first python file and you can do that by that way in python so i will call it market and then once i have done that it is a great idea to bring in from the web browser the starter template to basically build up your first flask application now flask documentation already includes some basic structure that is going to allow us to build our first hello world application so let's go ahead and bring this in our screen and make that a little bigger and you can see here that inside that website we have a minimal application that is looking something like the following and i will allow myself to copy the entire code from here and paste this in our python so let's open our ide again and i will paste this here and let's see what is going on here so as the first line we can already see that we import the flask instance from the entire flask package so it is quite obvious and it is not surprising but then we can see that we initialize the instance of the flask with the given argument of double underscore name double underscore now if you never saw this variable before i have a video that is quite explaining what this magic variable is about basically this is a builtin variable that you can always call from any python file and it is referring to the local python file that you are working with so the flask instance is requiring to receive this parameter and this is why you are going to see that and don't worry too much about that if you don't understand it basically just leave it as it is and now we can see that in the fault line we have something that is called a decorator in python now a decorator is basically a one step before a function that is going to be executed now when you see here app.route it is basically saying that what url in your website i am going to navigate through and display you some html code so you can see that inside here we have an argument that is basically saying a full slash inside the string now this is the home page of your builtin website so if you just basically go ahead and type in some url without navigating for a specific page then it is going to lead you by default to that specific page so you can refer it as your root url of your website and then we can see that we have a function that is defined here and then it returns a string that says hello world now this is the exact place that we should see some html code in the future but for now we are only returning a basic string that is saying hello world and those in flask are trended to call routes or views sometimes people call it wheels because in django it is called views and django is another web framework of python but i will try to stick with one word when i'm going to refer to those functions that are routing to a specific page and we are going to call them routes so once we understand what is going on inside this startup template then it is a great idea to raise our terminal here and run in some commands to start this application so let me clean the screen here and in order to make our application run successfully we are required to set up several environment variables so i will go here and write up set flask app like this and make sure that all the letters are capitalized here and if you are working on a linux machine this command is basically should be export and not set so if you are on windows set will work and i'm going to make that to be equal to the same name of the python file that we have just created and if you remember we call this market dot pi and once we have set that then we can basically go ahead and execute our application by saying here flask run and once i have done that you can see that we receive several warnings that we are going to explain them in the future but that last line is quite important to understand so you can see that it says that it's running on http 127.001 and then we see a column here and then a number after that now if you know a little bit about basic networking then you can understand that this ip is a convention ip address that is basically referring to your local machine so this ip is going to be the same for each machine that this application is running on and we have something that is called the ports that are basically describing the application that you are hosting as numbers so for flask by default it will be 5000 so if i will copy this url from here and paste this in our web browser then we should see a message hello world and that is perfect because we were able to complete the entire starting process successfully in the flask web framework so we can basically go ahead and continue from here and one more point that i did not mention you'll see this hello world text because this is the root url of your web application and basically the hello world function that we saw before knows how to handle this so for example if i was to go here and type in slash about for example then we should receive an error that this is not found because we are not having a route that is handling the slash about so this is the reason we saw the hello world message properly okay so i'm back to my pycharm and let's actually go ahead and try to customize this string a little bit to return a better looking page so we can basically go inside the string that we are returning and type in here some html code that will basically be rendered in the page that we are displaying so we can go here and use the h1 tag which is basically the biggest header tag that is possible in html and we can write in here some text again like hello world but bigger and then we can go ahead and close our tag like this now if you don't know anything about html don't worry too much about that because most of the html code that i'm going to write here i'm going to explain what i'm going to do or i'm just basically going to copying and pasting several html code snippets so we can make our lives easier when we display nicer pages okay so let's go ahead and save this out and go back to our terminal and restart our server so i will stop the execution of our web server and type in again flask run and then we will go to our web browser again and basically navigate back to the root url so i will just hit enter here then we can see that we receive this message of hello rolled but bigger now you could see that in order to display this text i went ahead to my terminal and restarted our web application and you are probably asking yourself if this process is required to accomplish every time that you are changing your code well the answer for that is for sure no because you probably don't want to go ahead and restart your application every time that you are taking several changes within your project so in order to prevent such a behavior we should go back to our terminal and look up for something that is called debug mode right here now you can see that we are having the debug mode off and you want to turn it on basically because this will allow your application to being synchronized every time you change your code within your market.pi file so if i was to exit our web application that time and let's actually clean our screen again and we can basically go ahead and set up one more environment variable that will turn the debug mode on and that will be by the set command again and i will set the flask on the scar debug to one so basically this turns on the debug mode and then i will allow myself to run flask run again and then now that time we can see that the debug mode is on now let's go to our python again and change the string that we are returning on our root url and see if those changes will be synchronized without restarting our web server so i will go here and i will basically type in here change text something like that and i will go back to my web browser and refresh that out and then you can see that the changes have been affected without restarting our web server so we can test this one more time by adding some explanation marks here and save that out and go back to our web browser and refresh it and then you can see that the changes are being synchronized when you are on debug mode now the debug mode is something that you always want to turn on when you develop your application but once you go ahead and deploy this application in production then you definitely don't want to turn the debug mode on because this will cause the clients that are basically surfing on that web server to see errors of your web application and it is always not nice to see your bugs as the one who uses your services so make sure that if you deploy your web application in the future then prevent the debug mode on because this is very important okay so let's see what else we can do with our routes here so let's actually revert this back to hello world again and i will basically create here one more route just to practice how routes are working because we are going to create a lot of them in the future so i will write here the decorator that is required to make the route to understand which url you want to enable in your web application so i will go ahead here and type in slash about and then once i have done that you should go ahead and create your function that will handle all the requests that are arriving to this url which is slash about and i will call this function about underscore page and i will close this out and i will go ahead and return one more html string here that will say about page so as you paid attention i created those h1 tags again and just to test this off in that stage let's go ahead to our web browser again and try to navigate through slash about and this time you could guess that the slash about is going to work because we are handling what the slash about supposed to do so i just wanted to show you that you can create as much as routes as you want and then you can basically return some html response to your web pages now sometimes you don't always want to go ahead and hard coding your routes like we did until now so if you imagine a situation like in facebook where you have different urls for like millions of profiles then you probably can understand that the facebook developers are not going ahead and creating millions of routes by hard coding their profile names so besides that we can accept something that is called dynamic routes and what i mean by that is that basically you can go ahead to your route in your flask application and receive a variable name that is going to be accepted as well so let's imagine a situation that we want to display an about page for different people so let's go here and type in one more forward slash and then basically call the tags and add in here username now what i have done by this is basically i allowed this route to receive any string that we want after the about page and since i have done that i can go here and change this return to something else so let's go here and write in a formatted string and i will open this h1 tags again and i will close it like this and then between those i will go ahead and type in this is the about page of and then let's call here the user name that we receive here now you can pay attention that this returns us an error because we should handle this variable inside our function as well so let's accept this as a parameter so i will go here and type in username and now i can basically go back to our web browser and check out if this works properly so i will go back to our web browser again and i will type in here forward slash and then let's give a random name like john and then you can see that we receive a page so we see the message here of this is the about page of john and i could go here and change this to whatever i want i can change it to michael to jim and to more names if i'd like to so the important point here is to understand the behavior of dynamic routes so just make sure that you understand the behavior of that as well okay so as you could notice here i deleted the about route from the last episode because i want to focus on the next topic that i am going to talk about just now so until now we raised our html text within our routes in a hard coded text like you see here now when we go ahead and design complex html pages you probably want to avoid storing long strings within only a single file so in order to overcome this we have a convention in flask to a way we can achieve such a task and the way we can basically do this is by creating a new directory that is called templates and then inside the templates directory we will start creating our html files and then we will separate our html code within this directory and we will refer our routes to those different html files so let's go ahead and get started and see how we can do this okay so i will start by creating a new directory here and you can see that i'm creating that inside our flask market project so it is very important and you want to name it templates so make sure that you don't give it another name like html pages or something else just basically go with templates because the templates name is actually a convention to a flask so the package can understand that you are going to locate there some html files and within our templates directory we will go ahead and create one more file and you can directly select the html file if you use the pycharm so i will name it home and then you can see that it already returns us some default html code and just for now i'm going to delete what is inside here and let's make our font bigger so we can understand what we are going to type in here just in a second now again for a basic example and to understand the process of referring a route to an html file we will basically go ahead here and type in hello i mean home page it might be a better way to do that so we will call it home page and basically i will save this file and go back to our market dot py and then besides returning the hardcoded string like we did previously we want to look for a way to point this route to the home.html that we have just created so it basically makes more sense to change this route a little bit and let's do that okay and let's go ahead and call this home page and then we will close this out and then write a column here and then we will return render underscore template now you could already pay attention that this returns us an error because we did not import it so we have to realize that we are going to import a lot of builtin functions that are inside the flask package so one of them will be render template and the render template knows how to handle your requests and basically direct them into html files so let's go ahead here to our first line and import here one more function from our flask package and it will be render underscore template and as i have done that i have to specify here one more argument and for sure this will be the name of our html file so i will go here and type in home.html and once i have done that let's go to our terminal and make sure that our server is still running and it is so let's go to our web browser and navigate to our root url and then you can see that we have completed the render template function successfully so this is the proper way that you always want to work when you organize your flask projects you always want to create that directory that is called templates and then you want to start storing your html files in this specific directory okay so now that we understood how we can refer our routes into different html files it is about time to start working on styling our pages so our application could start be looking like a real website so in order to start styling we probably want to import one of the styling frameworks that are already existing out there so the most popular styling framework will be a styling framework that is called bootstrap and you may have heard about bootstrap already because this is the most popular framework to style your pages and the main reason that you want to use a ready styling framework is to save time by the process of styling each of our html elements because we really want to focus on the python side of our web application so you can import the bootstrap styling by going ahead to your web browser and basically searching bootstrap starter template and this starter template will help you to get started with all the requirements that are necessary to style your web pages so let's actually go into getbootstrap.com like i have already done here and go to that docs 4.5 so this is right here is the version of bootstrap so you want to make sure that you use the same version as i do currently because this might lead to differences if you just work with another version so just make sure to work with 4.5 as well so i will allow myself to copy the entire html code from here and paste this in into our home.html that we have just created so i will open back our pycharm again and i will go inside our home.html and i will paste this over here now i know that it is a lot of html code to sync in but i'm going to go over each of the lines once so we can really understand how an html structure looks like so let's go to the first line here and make our phone a little bit smaller so we can see most of the parts of this file alright so at the top here at the very first two lines we have some lines that should be located in each html file so basically this specifies that this document is going to be within a type of html and the language that we are going to use is going to be english so this is why we see the e and n letters now each html file is divided into two important sections or what is so called html tags and those sections are called head and body now inside a head tag you are probably going to see a lot of things that are pretty much meta information or some imports that is pulling the styling and also some necessary information to change your tab name when you navigate for that specific page so for example if we see here inside our head tag another html tag that is called title so this should be our name of the tab that we currently looking on so i will show the result of this html file just in a second and we can verify that the tab name is going to be hello comma road so one more important line inside our head tag will be this line over here so you don't want to touch it at all because this is what importing the entire styling for our home.html file so you can basically see that by the link tag and the href attribute is the url that is probably pointing to that complex styling so this is something that is called css and the css allows pages to look a lot better and more dynamic so it is important to leave those lines over here okay so i will allow myself to close the head tag and let's talk about the body now the body tag is what is really important and what really matters when you want to display some information within your pages now you can see that we also have here the h1 tag that we used previously and you can see that its text is hello world as well and you know what let's actually go ahead and change this to home page so we can have a better understanding of how this is going to be look like now when you see the tag explanation mark and then the dashes two times it is basically saying that the following line is going to be a comment now you can already understand that because this is uncolored in pycharm so this is basically a comment and down here you can see two more tags that are called script now when you see script tags those are javascript libraries that are also going to be important and this is also a huge part when you design a webpage so you also don't want to touch that because it deals with all the functionality within our pages so you don't want to touch those script tags as well so just make sure to keep them in your file and you can also see that we have one more long comment here but you can see that we have script tags within those comments so what that means it means that we can go ahead in the future and uncomment those lines so we can make use of more javascript libraries but i will leave it now as it is okay so now we understood the structure of a basic html file let's go back to our web browser again and see the results of this page so i will go here and close this starter template and refresh our page then you can see that already the font of our page has been changed now i noticed that i zoomed in much in this page so i will basically revert this back okay so you can see that the font has been already changed and this is what bootstrap is responsible for so when we go ahead and add more html code you are probably going to see that in a nicer way because of this bootstrap starter template that we already imported now you can also see here that our tab name is hello comma world as we have said a few minutes ago so this is also something nice that we can control by ourselves and we will for sure do that in the future okay so i think this will be it about the explanation of how html page is looking like so as i said before i really want to keep on decreasing my explanations about each of the html lines that i'm going to write in so we will have a better focus on the python side of this flask application but for sure if you have any questions about the html in general make sure to comment them out so i can read them off and respond you all right so let's go back to our market dot py and take care of something that is quite bothering me until now now you can see that our homepage is basically rendered when we went ahead and did not specify any extra information after our ip address and our poll now in most of the websites if you go ahead and type in slash home here basically this will be responsible to render you the same result like we saw previously now in order to handle two routes for a single html file it is as easy as going down to our pycharm and right in here one more decorator so it will be app dot route and then this time we will write here slash home and if we want to test this out we can basically refresh our page and then you can see that we see the same result like previously and if i delete everything from here the result is going to be same so this is something that you want to keep on your web pages because it makes sense to display the home page in both of the cases okay so now that we have understand how we can design our pages nicer it is about time to give our page a little bit nicer style rather than displaying a home page so we will start by adding a navigation bar so our users could have the option to navigate through different pages so the page that i will bring in here will be my personal website and throughout this video or in the future episodes i am going to go into my personal website a lot and copying some html code snippets that will help us to write html a little bit faster so i'm going to include a lot of html code snippets throughout this tutorial so just make sure to go to the description of that video and navigate through the url that is going to be specified as the code snippets url and get those code snippets so it will be much easier to you to follow this video so for this example to add a navigation bar i will go here and select the second part of this tutorial and i will basically go and navigate for our code and then you can see that as the first code snippet i have here the code snippet of navbar so i will allow myself to copy everything here and paste this in just under our body tag so let's fix the indentation here and paste this in and now we should see a nice navigation bar inside our homepage so let's fix the indentation here a little bit more so we can have a better understanding which tag is inside another tag so i'm just going to fix that and i think that will be enough okay so what let's delete those indentations and now i think we are fine okay so now i will save this up and go to our website and refresh that out and then you can see that we have this nice navigation bar up top here and then you can see that we have its name which is called gymshade coding market now we can change this whatever text we want we just need to find this specific html tag that is responsible to display this text so let's actually go ahead and find it so we can have a better practice of how we can find specific html tags so i see that we have this text here and i can basically go ahead and change this to flask market and if i save this up and refresh it you can see that the changes are affected now you can see that we have this navigation bar but we don't have any extra links that we can click on them and actually navigate through different pages so to add those links we have to go to our python and basically add some optional links so that the user can see which pages he can navigate so to ease on that process i can also go to my website i mean to my original website and then copy the second code snippet here which is called navbar dash options i mean underscore so let's go back to our pycharm and we want to paste this in right here where we see a div tag which is with a class that is named as collapsed navbar collapse okay so we will paste this in over here and once we do that then we should see a better result of the items that should be available inside our navigation bar so if we go to our website and refresh that out then we can already see a better result of how a real navigation bar looks like and we can see that we have home market and we have login and register now for sure when i go ahead and click on them it should not lead us to any different page because we did not configure those routes yet and we will do them in the near future now just to have a better understanding what is going on inside the second code snippet that we have just copied and pasted you can see that we have some li tags over here and this is a shortened version of a list tag so you can see that each one of them just responsible to display some item that is available inside our navigation bar so we have here this which is basically a link to our home and we have that one which is going to be the link for the market in the future and as you could pay attention we have in the right side the login and register which we will configure in the future as well okay so one more customization that i want to apply for this home page is to return it into a dark mode now in order to allow the page to be in dark mode basically you have to override some styling attributes and then your page will be displayed in a background color of black and all the text that you are going to provide are going to be displayed as white colors so in order to accomplish that i'm going to navigate down in this home.html file and let's make our font a little bit bigger here so you can have a better look and right after our closure of the body tag i'm going to open up a new tag that is named style and i will close this up and between those i am going to provide some extra attributes that will override the attributes of our entire body so it will be something like the following so we will start by typing in body and then we will open and close curly brackets and press enter here so we can enter inside our brackets and then here we will override the two attributes and the first one will be background dash color and i'm going to add here a column sign as well and this will be equal to a hexadecimal value that i already know that it is going to display a back color so if you don't know what an hexadecimal value is it is basically another way to define colors rather than just text so this is pretty much equal to writing here black inside a string but this is going to make it a little bit more close to gray rather than just black so this is why i defined it with an hexadecimal value now in order to close this attribute we should add a semicolon here and our second attribute that we want to override will be color and that time i will give it as a pure text so it will be white now once i go ahead and save this file and go back to our page and refresh that out then you can see that our page is turned into dark mode so make sure that you apply those configurations as well in your home.html file in order to turn your website into a cool looking dark mode and i just realized that our tab name over here is still hello world so let's go ahead and change this to finalize our styling so i will go back to our pycharm and let's find this title tag that is responsible to display the tab name so i will expand our head tag back and we should change this into something that they are currently in the homepage so let's change this to homepage and remove the explanation mark and let's separate those words here and save that out and if we go ahead and refresh this then you can see that our tab name is changed so i think that will be it for the styling part of our website and in the future for sure we will add some extra elements to make our site even nicer alright so now it makes sense to start working on some new python code to deliver a new items page to our users so this is why i will be starting to create here a new route and we will render a new html template so let's go ahead and do this so i will jump to a new line here and we will start creating a new route so i will call the app dot route decorator here and it quite makes sense to send our users to a url that is looking like slash market so i will write it like this and i will continue on and create our function and we will name it market page and currently we will receive nothing as parameters and we will go ahead here and return vendor template and we will send them to a new html file that is called market.html now i know that we did not create this yet so let's go ahead and do this so as you remember previously we just went inside our templates directory and we created an html file and we should name it market so this route could understand where we should send our users so let's go ahead and name this market and if you use pycharm then you will receive this autogenerated html now to make our lives easier a little bit i'm going to copy everything from the home.html and i'm going to customize it a little bit so we can understand that we are inside the market page and not inside the home page so i will go to our home page here and i will grab everything that is inside the home.html and i will paste this in inside our market page and let's make the font a little bit bigger here now several changes that it might be a great idea to done here is for sure this title tag that is changing the tab name so let's change this to market and i will scroll down here let's minimize this navbar and we will change this home page h1 tag to market page so we can understand where we are currently at now for myself here the website is currently not running so let's go ahead and complete the steps that we are required to run our website quickly so set flask app equals to market dot py and we also have to set the flask underscore debug to one and now we are ready to go ahead and execute flask run and as we have completed this let's go to our web browser and try to navigate through the slash market route that we have just created and we can see that the results are quite great so now we are ready to work on to see how we can send information to this html from our route now to do this i am basically going to go back to my pycharm and we are going to work on the route of market that we have created and we will try to send some random data from this route to our html and see how we can access it now the way we can do this is as easy as going here and sending more arguments that we will be accessing by their keys so let's go ahead and see an example for that so let's write in here item underscore name equals to phone and i will close the parameters here back again and let's make this to be in the pip 8 style and now the way that we can access this is by this key name item underscore name now it makes sense to go back to our market page now and see how we can see the value of the item name argument so i will go to our market and actually to access that information we have to start using some new web templating engine that is called jinja template now this might be sound weird what i'm saying now but if you remember when we went ahead and installed the flask library we kind of saw a lot of secondary libraries that the flask library is required to have them and one of those libraries are actually named jinja now as i said jinja is a special web templating syntax that we are able to access through html because it is specially designed for python web frameworks so to do this i am going to go here and let's open here a new html tag for example a p tag so it will be a new paragraph and the way we can access this is by calling the variable syntax and that will be by double curly brackets opening and closing like the following now as i have set those curly brackets here we are allowed to access the information that we have sent from our route and as you remember we have sent the key value of item underscore name so if i was to go inside our curly brackets and type in here item underscore name then we should see the value of this variable on our page so to test this out i will go to my web browser and refresh it and then you can see that we see the value of the item underscore name so this is a quite great achievement and i hope that you understood all the process of how we can display information from our routes because to be honest when i saw the ginger syntax first i really was shocked and did not understand anything but i hope that this was a clear explanation and that you understand correctly why we have to include ginger syntax in our html templates so i will go back to our html file here and continue from here okay so as you see i'm back on my market.py file and now we have to look forward to how we can display multiple items on our website now to do this we can basically change the value that we send to a list now i already have some information that i already generated up and this is basically a list of dictionaries so we will be able to display better data on our website when it comes to displaying some random items so to bring this code snippet that i already have generated up let's go to my website again and navigate through the third part of this flask series and bring these items list of dictionaries called snippet now as you can see we are only having a long list with three dictionaries here so let's copy this up and paste this inside our market page now let's have a quick look in this long list here basically what we are having is three dictionaries that they are happening to have the same keys so we have id for this and this and that and also the name key and as well as barcode and a price now once i have copied this out it might be a better idea to change our send information in this renderer template and i will basically delete this item underscore name equals to phone and i will change this up to items equals to items so now we will be able to access this entire list of items with calling the variable of items because this is what we have named over here now to test this out again we can basically go to our market.html and change this to items so if we save our file and refresh our website then you can see that we see this exact dictionary i mean the list of dictionaries over here now you can pay attention that this looks quite ugly so to style this up i am going to insert these values inside a nice designed bootstrap table so let's go ahead and do this all right so we will go back to our market.html file and in here we will just delete this paragraph for now and we have to use an html tag that is named table and inside here i have to provide some information regarding to my tables rows and columns and to save this work from us i already have generated a table that is going to look quite nice and we are going to add to it some extra information to design our rows and columns so to bring this code snippet here we will go to my website here and we will bring this bootstrap table code snippet from the third part so i will get this html code snippet and here i will just replace this with those table tags so if we copy this then we can see that we have here the table tag again but we have an attribute that we did not talk about it before basically when you see the class attribute inside an html file it basically refers to bootstrap classes that their main goal is to give a nicer design to your specific html templates so for example if we see a class that is named table hover then we should see a special effect when we bring our mouse and hover inside our table and if we see table dark then you can probably understand that this table is going to be in dark design so in here we have our table head and table body and as you can see i already commented here that we have to create certain columns here now since our dictionary includes some more than one key values then it might be a great idea to create more columns to our table so this is why i will go down here and i will start copying and pasting this code snippet three more times and i will replace those by the values of the keys that we have inside our dictionaries so if you remember we had a dictionary with a key of name and we had an id so i did not touch this column at all and i'm going to change this to barcode and i'm going to write here price as well so as we have done that the way that we can fill in rows to our table will be easily by going down to the table body and writing some extra information inside those table row tags so tr is a shortened version of table row now as you can see we have here some more tag that is called table data and this is basically a reference to the first column that you see here so if we are happened to copy this out and paste this in then since this is the second table data inside this table row then this is going to be located right under the column of name so this is why it is a great idea to change this to value for name and i'm going to repeat this two more times so this will be barcode and this will be um price okay so as we have done that let's test the results inside our website so i will go to my web browser and we will navigate through our market page and refresh that out and you can see that we see here a nice table and you can see that those are the headers as you can pay attention that its color is a little bit more bold and we can see that we have here information that is inside our table so it is quite great achievement okay so now that we have done this we still don't display the real information that we have sent from our market page route so let's bring up this for a second to remember this so i will open back our pycharm and i will go to market.py for a second so if you remember we sent this items list towards our market.html but we did not display the actual values of those dictionaries that are inside the items list so to do this we have to iterate over this items list over here and once we iterate over this list then we have to access each of those keys in some way so let's see how we can do this okay so let's go back to our market dot html well i'm not going to touch the html code inside our table head because in table head we done a great job because we only want to display here the columns names so i'm not going to touch it at all so let's minimize the table head for a second and now as you paid attention each of our tr tags are responsible to create a new row inside our table so it might make sense to start to launch here a for loop and start iterating over our items but how we are going to do this with the ginger template so if you remember the ginger template is that special template that allows us to access the information that arrives from the route so i'm going to write here new ginger syntax that we did not see so besides doing curly brackets twice i am going to replace the inner curly brackets with percentage signs and what that means it means that you are going to call a logic code so if until now we were able to access variables that are arriving from ginger syntax this time when you see the percentage signs basically you can write a code that is quite looking like a python code but this time it is not going to be variable names and stuff like that besides those are going to be if statements for loops and stuff related to actual logic so in here i can go with four item in items now the reason i write here items because this is accessible from the market route and to close our for loop here i will call those code blocks once again and i will right here and four together combined so this is the exact syntax of how you can bring in a for loop inside your html template and now i'm going to cut this entire tr html block here and i'm going to paste this in inside this for loop that we have just created so once we paste this in let's organize the indentation for a second great so now we should see this table row three times and the reason we should see this three times because we have three dictionaries in our items list so if we save this and go here and refresh that out then this is the exact result that i was talking about so again the reason we see this three times because we have three dictionaries inside our items list okay so our next problem is quite clear and the problem is that we don't see the values yet although we iterate over this items list so to access each of the keys that are inside those dictionaries we can basically go and open our pycharm back and replace those strings here that are inside the html tags with the actual value so to do this i can basically delete this up and call the variable block again by typing in curly brackets twice and i can basically type in here item dot id now the id is the key name of the dictionary and the item is the variable that i'm iterating on so this is why i can access this item variable and i can change all those three table datas here to the same as this one so let's go ahead and do this so i will replace this with item dot name and i will replace this with item dot barcode and i can replace this for sure weight item dot barcode and we will close our curly brackets and create a space here so sorry this should be price okay so we should change this to price and now we can go to our html page again and refresh it then you can see the actual information that we meant to display from the real beginning okay so this is great achievement so if we are happened to add some more information inside our market.py then this page is for sure going to be updated automatically so one more final thing here to customize this page a little bit better we can add here a dollar sign or something that the customer that uses this website could understand that we are referring to actual money so we can basically go back here and add here the dollar sign and see the effect of that over here all right so one more final thing that i'd like to do in this table is enabling our users the options of seeing more information regarding to a specific item and also the option of purchasing a specific item because we actually want to simulate a situation where we have items in market so to do this we can basically create one more column here and we can name it options and we can add two more buttons in each of our item rows so let's go ahead to pycharm and do this so i will open my pycharm here and i will find the table that we have created so as you remember our columns are located inside an html tag that is called t head so we will expand this back and we will add here one more column so we will create a th tag and our scope will be col so this is a shortened version of column and here we will add options and so we added the column here and now we have to add its value in each of our rows so to do this we can basically go here to our table body and find our for loop and add here one more td tag which is table data and over here i will basically hit enter so we can add more html elements and i will call the button element to display a nice looking button to show our users the options that he can do so let's create here the button tag and over here i want to customize this button a little bit so i will call the class attribute and inside the strings here i will specify the classes so i will write in here several classes that i already know that they are going to customize this button a little bit better so we will write here button like this and we will also write button dash outline and we will also write here button dash info now again those classes are made for specialize our styling in each of our html tags so let's go ahead and close our button tag and you can see that we already have the closure for this button and so now i want to write here a text like more info and i want to scroll down a bit so you can see what i am doing here and so now that we have completed this button basically i want to repeat the same process to allowing our users to purchase that specific item so it will be the button tag again and this time our classes are going to be again to btn and button dash outline and that time i will type in here button dash success so the differences between button dash info to button dash success the button info is going to fade into our button a more blue color and the button success will fade in the green color so when i go ahead and close those tags i can basically write in here purchase this item now let's go ahead and test this out so i will open my browser again and i will refresh our page and you can see that we receive the options right here so this is quite great now for sure if i click on one of those buttons nothing is going to happen because we did not configure the functionality behind those buttons but we will do this in the future so don't worry about it right now alright so previously we were able to display a nice looking market page by writing this html code and it was responsible to display a nice looking page with several items now if you remember to display this nice looking page i went for my home.html and i copied the entire code from here and i pasted in inside mymarket.html and then later on we gave it our own customizations now if we consider a situation that our website could be divided into 10 or 20 different pages that will mean that we have to copy and paste some basic html code every time that we want to come up with a new page and the reason is we want to keep certain elements in each page that we display so for example if you see in the home.html we happen to have this long nav html tag now it is obvious that we want to display the navigation bar in each page that our users navigate on because we want to allow our users to see the pages that they can navigate so the main point here is to think about some method that will avoid copying and pasting a lot of html code and to overcome this we have something that is called template inheritance now the idea behind that will be to have one base template html that we will always inherit from and that way we will save a lot of copying and pasting html code so in order to achieve this what we have to do is creating one more html template and it makes sense to give it a name like base layout template whatever you like to and then basically put in there some html code that will be always displayed to our users so let's go ahead and do this okay let's go inside our template directory and create an html file that we will name it base so let's go here and select new html file and i will call it base as i said and i will delete everything from the auto generated html now as you could guess i already came up with a base dot html that is going to save us a lot of time from writing some base template html now in order to get that base.html we will basically go to my website and bring it on here so we will go to the fourth part of this entire tutorial which is happen to be right there and we will select the code and bring in the base.html and for sure once i paste it i will go over what is going on here so we have our base template and in the next few minutes we are going to show how we can inherit the entire html code from this base template now let's see what is going on inside the head tag now in the head tag we have the same tags that we were happened to copy previously in this tutorial from the bootstrap starter template so there's nothing really different in here only what i have done here is named our title base title so we can see the effects of it now if we close up our head tag and focus on what is inside the body then we can see that i already have commented out the location where we want to see the navigation bar and also i also wrote here one more comment for the future contents that we are going to add to this base template so that way we can understand where we have to insert different html templates now down here again we see some javascript libraries that we import like we saw previously and this style here is again here to allow our site to be in dark mode so if you paid attention then we see that background color inside the body and we also see the color which is the foreground color as white so let's also close our style tank over here now once we understood what is going on inside our base.html it is a great idea to go inside our home.html and try to inherit whatever is inside this base.html that we have just created so in order to ease our lives here i will use the future of pycharm to split some html files into two or three different displays so let's go ahead and do this very quickly so i will click here split vertically and on our left pane we will keep our base.html and on our right pane we will display the home.html okay so now i will basically delete everything from the home.html and i will use some special ginger syntax to inherit the code that is inside the base.html so that will be by the code block syntax we saw previously so it will be curly brackets and then the percentage signs in that case and then we will use a function that is called extends so we are extending this base template and basically here inside our string we can specify the name of the html file that we want to extend from because all the html files are located in the same directory that we called templates so i will go here and write in base.html and once i have done that i should expect to see pretty much nothing in our home.html so let's go ahead and see this in action so i will go to our website and i will basically navigate for our home page and then you can see that we are happen to have this black page so now that we achieve this basically now we can decide which content we want to put inside base.html and which content we want our inside home.html so for example our long navigation bar html tags are must located inside our base.html so let's go ahead and do that so i will go to our pycharm and let's actually bring this long nav tag from the market.html so i will locate our market.html over here so let's grab our navigation bar so that will be the entire tag that is called nav and i will copy that out and i will paste it in where we located this command which is says navbar here so once i paste this then we should see a great result where our base template is having the navigation bar so let me customize the indentation a little bit and i think this looks okay so we will go to our website again and we will refresh that out and then you can see that our navigation bar is back up again now the beauty in that process is that no matter which html file i'm going to create in the future all i have to do is using this extends method that we saw just a minute ago and then each time i do this then we will see our navigation bar so this is a quite great achievement okay so even though we have completed the inheritance successfully there are still some problems left that we have to understand how we can figure out for example one of them will be the fact that you see that our tab name is base title now we are inside our home page so it does not make sense to display to our users base title each time so what i mean by that is that we have to figure out how we can differentiate between content that we want to display up on our each page to a content that is going to be unique per page so let's go ahead and do this so i will open my pycharm here and basically on the left pane we got our base template and on the right pane the home.html again and now what i can do is basically marking any area in our template that is going to be unique per page so the way i can do that is as easy as going for example inside our title tag and write in here some special ginger syntax so it will be by using the brackets and then the percentage sign and then we have to use the function that is called block so i will use this function and i will give it a name like title and i will close our block by using and block now if what i have done until now is quite weird for you i can totally understand that but you will get that in a few minutes so once i have done this then i am allowed to go inside our home.html and call this block of code by simply writing block title and then inside here i can write anything that i want and the content that i'm going to put in right after our blog title is going to be replaced and use the content that we write in home page so let's see that in action so i will right here and block again just to close our block and then inside here let's write a text like home page and use the indentation here so it will give it a cleaner look and once i have done that we can basically save this and go to our website again and once i refresh it then you can see that our tab name is changed to home page so the ability to mark certain areas in our base template as unique per page areas is quite great because it is going to allow us to write more organized code and now basically we can use this block functions in more areas inside our base dot html and then we can call those blocks in our different pages inside our project so i will go to our python and declare here one more area that is going to be as the area of our body in each page so we can basically go here and use the block again and now we can name it something like content so let's fix our indentation here like that and then we can write again and block and once i have done that we can basically go back to our home.html and try to call this content block again and write whatever that we want to write to display it inside our homepage so i'm going to go back to my home.html again and i'm going to use the block content and then i will close our block by simply saying end block and now we can write a text like this is our content for the home page and once i save this then we should see the this is our content for the home page only in our home page so let's test this out so once i refresh that out then you can see that we see this text right here all right so now that we have applied the inheritance correctly for our homepage let's also do this for our items page so we will basically go to our market.html and take the same actions over there so i will open my pycharm in market.html and before i actually go ahead and delete everything from here it is a great idea to copy the table that we have created previously and then later on we will paste it inside our blog content block so let's go ahead and do that okay so i will navigate down here and i will find our table and you can see that it is right here and then i will find the closure of this tag and i will grab the entire table and i will basically copy this entire html snippet and now i am pretty much ready to delete everything from here and using the methods that we have applied for our home.html so i will start by writing extends base dot html and i will continue on here as using the blog title and the block and the end block again and then we should do the same process for block content so it will be block content and again we have to close our block once again so once i have done that basically inside our title we just have to give it a text like market page and inside our content it is a great idea to paste our table back in so we can have pretty much the same page that we had previously so i will go in here and then create an indentation a little bit and then paste back our table so i think this should work let's test this out by going to chrome again and refresh our homepage and then you can see that the behavior is quite same now i will navigate also to our market and then you can see that we still get pretty much the same result like we have done previously what we can do is basically adding a title like market page and we will just continue with the customizations in the future so this is a pretty much great results until now and i hope that the entire process of how we can use the template inheritance was pretty much clear for you okay so there are still customizations left before we close this template inheritance topic and basically inside our navigation bar we currently don't have the functionality to navigate between different pages so to test this up if i click on home page nothing happens and as well as in our market over here so let's go ahead and configure them so i will open our pycharm again and we will open our base template and inside our navigation bar we can basically look up for those a tags now those a tags are what responsible to navigate users to different pages and so if you look at the href attribute inside the a tags this is what is actually sending our users to different areas now we could have done here something like slash home so in that case it will navigate our users to slash home but this is not a great idea because you don't want to hard code your urls in that way so what happens if in one day you want to change the route to something else then it is not considered as a best practice now again this is going to work i'm not saying that it is not going to work but it is quite wrong and we can even check this out if it works properly so we can go to here and refresh our page and click on home and then this will basically navigate our users to home page but we can do this in a more pretty way and i like to apply that okay so i'll open back our pycharm and in here besides hard coding for slash home we can basically use a builtin function from the ginger syntax that is going to look like url underscore four so let's call this up in here and pay attention that i use the double curly brackets so in here i can close this function like that and between here the url underscore 4 expects for one special argument now the argument that we are going to give for that function will be the value of the name of our route that we want to navigate our users so in this case if we want to navigate our users to the home page then we should type in here the name of our route that we have created to navigate our users to the home page and in our case if you remember our route name was home underscore page so we can basically go here and type in home underscore page and once i save this let's go to our web page and test this out so i will basically navigate back to market and i will click on the home page and then you can see that it knows automatically to navigate our users to forward slash home now this would even work if i was to go inside our market dot py and change this to something else like home three times okay let's just do this for testing reasons and test that out so i will go to market again and try to navigate back to our home page then you can see that now we were able to achieve a kind of a dynamic way to navigate our users to the home page so we only have to specify the name of our functions rather than specifying the hardcoded urls so of course i'm not going to leave this home home home so let's revert this back and i will delete this from here and that will be it so let's apply the same thing for the market url as well so i will basically copy everything from here and i will paste it in inside our href where the market is located and since our function name was market page then i will basically change this to market underscore page and once i have done that let's test the results one final time so for sure now if i refresh then our flask could not find anything that is related to home home home so we will write in here home back and click on market then you can see that the behavior is quite great so the url 4 is quite useful in that case okay so just a quick reminder here this is the final situation that we have reached until now on our website so if you remember those items that you see on the slash market page was basically because of the list of dictionaries that is arriving from here and is sent directly to our template and now we want to look for a way to change this behavior so we will be able to store information inside an organized database so the way we are going to do that is by configuring several configurations on our flask application and we are basically going to use a real database that is going to store our information inside tables now if you never worked with databases before basically it allows you to store organized information within tables where each table describes some data that you want to store so for example you may have a table that its name is item and it may have a columns such as name barcode and price and this is exactly what we are going to do in order to store organized information inside an organized database so just a quick brief for the way that we are going to implement this basically we are going to use a new file and that file is going to store all our information now normally when you want to store a large amount of information you should execute a database service that is running in the background of your machine but we are not going to do that because we are only working on a local environment and currently we don't have any case where a lot of users are going to cause traffic on our website so this is why we can allow ourselves to use a minimal database and we can store our information inside a file besides running a database service on our machine so the way we are going to do this is by using sqlite3 so sqlite3 is an extension of a file that allows to store information and we are going to connect that file to our flask application so let's go ahead and do that okay so first of first we need a flask tool that allows to create tables within that database that we are going to work with with using python code now when it comes to developing websites with python basically you can create your database tables with python classes so in order to use this feature we need to go ahead and install some flask tool that allows us to do so so we will basically go ahead to our terminal and stop our website for a second so we will basically go ahead and write in pip install flask dash sql alchemy now this is the exact package that will allow us to write database tables with python classes and we are going to see how we are going to do the conversion from python to actual database information just in a few minutes so let's go ahead and install that and once i click in here then we can see that we receive a successfully installed flask alchemy message and if you do not receive any errors here then you should be fine now let's clean our screen here just a minute okay so now we can go basically back to our pycharm and continue on with the configurations that we should apply okay so once we install it we can basically go ahead and import that flask underscore sql alchemy so let's make our phone a little bit bigger here and we will basically say from flask underscore sql alchemy import sql alchemy like that and once we have done that basically we can go ahead and create an instance of that class that we have imported now the convention here would be to call that variable db because this is going to be our database instance and we are going to rely on that in the future so we will type in here db equals to sql alchemy and we will close parenthesis to initialize an instance of that class and once we have done that we need to pass our application as an argument to that sql alchemy class so we will basically type in here at and if you remember that arrives from here where we created a flask instance so it is important to complete that line by writing in here app now once we have done that basically we can start creating our own classes and later on they will be converted into database table now those special classes that are going to be converted in the future to database table are called models so we are going to create one module that its name is going to be item and we are going to define several columns that are going to be inside our database in the future so just basically let's go ahead and see what i said with a python code so we will go down here a few lines and we will create here a new class and we will name it item and once i have done that basically i should import from a special class that is going to say to our flask application that this is a model that is going to be table inside our database so this is why i will open up a parenthesis here and i will inherit from a class that is called db dot model so we will basically start by creating some fields and we will start by creating a field that its name is going to be named because it quite makes sense to describe our items with a name so we will go ahead and type in here name equals to and the way we are going to create a column will be by db.com and you want to close the parentheses so we can understand that we are creating an instance of this column class and once i create this then we should pass in here some extra information in order to create this column successfully now one of them will be the type of the column that you want to create so we want to make it in string type so this is why i will go ahead and type in your db dot string and i will close the parenthesis here as well now inside the string we can basically limit the amount of characters that we should put in each of our names so i can limit it to 30 characters by basically typing in here length equals to 30. so when i go ahead and do this basically i am not allowed to create an item instance and describe a name with more than 30 characters and this is something that you want to do because you probably want to avoid the situation where you allow your users to create items with a large amount of characters because this could cause from database to store too much information and you probably don't want to do that so 30 characters for a name should be enough okay so once i have done that i can basically go outside of our string class in here and pass in here some more arguments right there so one of the first arguments that we want to pass is to describe to that column that we don't want to have null fields so we can go ahead and do that by passing in here nullable equals to false and the next argument that i'm going to specify here is going to allow our names to not have the same name when it comes to storing a large amount of items so you probably want to avoid the situation where you have two or more items that their name are iphone 10 for example so you want each item name to be unique and you can do that by easily saying unique equals to true now if you remember we also had some more fields that are describing our items in this website so if you remember from the dummy information that we have generated from that list we also had barcode price and also id so let's go ahead and create those columns as well so i will basically go in here and create price equals to db dot column and that time we want to change our type of column to db dot integer and this will allow our column to store integers and not strings like we did previously so now we don't have to pass in length for example because this is an integer and so we can also continue on by typing in here nullable equals to false and by the way if you never heard about the null keyword before basically this is just another way to say none so if you saw none from python then you should be fine to understand null as well because this is just quite the same okay so i will delete that from here and continue on creating some more fields now one more field will be the barcode that we also want to create so it will be db dot column and although it is going to contain some digits i still want to pass it in as strings because i'm not going to do any calculation with this barcode i'm just going to store 12 characters that they happen to be digits so i will go in here and create string and we will just pass in here length equals 12 so each barcode will be 12 characters and again we will type in nullable equals false and this should be unique as well so we will type in here unique equals to true like that and once i have done that i also want to add one more field that we did not see before and this is going to be like a paragraph that is describing what this item is about so it makes sense to go down here and type in description equals to db dot string excuse me db dot column and now we will pass in here db dot string and now we probably want to give a huge amount of length in here something like 1024 something like that just because we want to probably describe our items with a nice paragraph so once i have done that i can continue on to nullable equals false and we can create unique equals to true here as well but i am assuming that we are not going to have the same description for our items if their size are almost 1000 characters but again the best practice will be to create unique equals true and now i also want to create one more special field that is quite required when it comes to sql alchemy now the one more field that you want to create is called identifier and this is a type that is called primary key so this is just a convention column that you should create when you create your models when it comes to creating models with the flask framework so we will go ahead and do that as well and we will type in here id equals to db dot column and its type will be db dot integer and we will basically go ahead and type in here primary underscore key equals to true now if you not quite understand why i'm doing this basically this is a convention to our flask models so it can understand the unique objects that are going to be inside our items so it is a must thing that you should do when you create modules with flask okay so there are still some steps left to see that item table within a nice looking database and we need to add several configurations to our application in order the flask to recognize a database so the way that we can do that is by grabbing the app object and adding in some new configuration so it will be add dot config and basically this statement here is a dictionary that is going to accept some new key values from us so we will basically go ahead and pass in here some new key value and we can do that by typing in here sql alchemy underscore database underscore uri and then we will point it to where we are going to store our file which is going to be the database file so we can do that by referring this configuration to a sqlite 3 file so i will basically go ahead and type in here sqli3 and this is going to be like a url but not besides it is going to be uri and i will explain the differences just in a second so i will basically type in here sqli3 column slash and we should add two more four slashes here as well and once i have done that we will just give a name to our database file so it will be market dot db okay so i know this line might confuse everyone here so let's go ahead step by step to understand this so first of first we see this app flask equals to double underscore name that we have created in the very first steps so we use this app object and we add extra configuration so our flask application can recognize its database and the way you can do that is by adding key values that are considered as conventions so the flask application can understand where the database is located at so the convention will be to create a key that its name is sql alchemy underscore database underscore uri so uri stands for uniform resource identifier and this is different from url that you probably saw everywhere because this is not a link to a website this is why we see the l at the end of this statement this is an identifier that is just a file that is going to be identified as database and basically the way that flask application wants us to do it is by passing in here sqlite colon three four slashes and then just give a random name to the file that you're going to create okay so once we have configured this successfully then we should go ahead and execute some commands in order to create this actual file and then we can see it visible inside our project directory so i will open our terminal here and inside our command line we want to enter to python shell because we want to import the information from our market dot py file so i can basically go ahead and type in here python and make sure that you do that in the same directory as your project so you will not receive any errors so once i have done that basically i can import our market.py file like a python module so i will type in here import i mean from market because this is the name of our python file import db now the reason i want to import db it is basically because i want to take several actions within that db variable that we created previously now once i will execute this you might receive a warning about some of the features that are going to be disabled in the near future but don't worry too much about that this is not an error so you are totally fine if you see this output now i want to split our display a little bit just to see you the result of what happens when i run the following command so i will basically locate our terminal in here and we'll make it a little bit bigger like that and now i will go ahead and create our database now the way that we can do that is by saying to our shell to create all our tables that we have created inside that python file and if you remember our modules are what considered as database tables to our flask application so i will run here db dot create underscore all and if you do not receive any errors after this command then you should be totally fine now once i have executed this then you should see the market.db file right here inside our project directory so that means that we have created database successfully so this is quite great now currently our database is totally empty from information so we probably want to go ahead and create some items inside our database and the way we can do that is by accessing our database like python code so this is what exactly sq alchemy allows us to do so if by any chance you come from django world then you should understand that the sql alchemy is quite like the object relation mapper of django so this is why we work with the sql alchemy okay so let's go ahead and create some items in here so i will basically import the item model that we have created so it will be from market import item and once i do that then i can basically go ahead and create an item like that so let's create a variable and it will be equal to item one and this will be equal to the item class so we will initialize an item and we will pass in here name equals to phone let's call it iphone 10 like that and we will also pass in price so it will be 500 and we will also pass in some barcode so if you remember this is a string so i will just create some random numbers in here and we should have 12 characters so this is quite great and we should also pass in description and this will be equal to just let's pass in a short description now once i enter this then we should be fine now you probably have noticed that we did not pass in anything about the id over here and the reason we did not pass anything about the id it is because the fact that we passed in here primary key equals to true so if this item is happened to be our first item in our database then its id is going to be one and we are going to see that just in a second okay so let's go back to our shell here and once we have created an instance of item then we want to save our changes to our database so the way that we can do that is by going ahead and typing here db.session dot add and we should pass in here the argument of the object that we have created which is item one and the next line here will be db dot session dot commit and you should close the parenthesis here like that and this should do the job of saving information inside our database now to verify that you already have one item inside your database then you can basically run a command like the following and the correct command for that will be item.query.org and once i run that then we should see a result of one object that is located inside our database and let's actually show what happens if we create one more item and commit our changes to our database so we will just type in here item two equals to item and we will pass pretty much the same information like we did previously so it will be name equals to let's type in here laptop and price would be 600 and this time the description again will be just a short description like that and what else we got we have to pass in barcode so let's pass in some random 12 digits like that and again we can basically go ahead and add this object to our db session so it will be the following command and we can basically run here db.session.com so it will commit our changes and again now i can execute the item dot query dot all and this should display us two items now you may notice how the objects are defined as the model name space the identifying number that i talked about now this is something that you can actually override and you can give your own customization to the way that you want to see your items when you try to query them by the python shell so let's go ahead and see how we can do that okay so i'm back inside our pycharm and this is as easy as overriding a magic method that is called dunder or epr now if you don't know what dunder repr is then i have a video on that special magic method and basically you can check my channel out to see the thunder r apr video okay so besides returning the default option that we saw previously we can basically return a formatted string and it will be item and then we will just pass in here self dot name inside curly brackets just to refer to that variable okay so once i save my changes here then we should load our information again from the beginning so i will exit our shell here and i will enter it back but before i will clean our screen and i will type in here python and i will go here and write form market import db and as well as we will throw market import item and now if i'm executing the same command like before so it will be item.query.org then you can see the differences from the previous result as we see our objects that they are defined in a different way so this is quite great okay so i just cleaned my screen here to show some more examples now i'm going to show how you can iterate over all of your items for example so it will be four item in item dot query dot all because this is the exact statement that returns all of our objects and once i iterate over it then we can access each field like the fields that we have created within our item model so it will be for example item dot name and it can be also item.price and it also can be item dot description and as well as item dot id and also item dot barcode now once i hit enter here then we should see all of our results that being shown like here so just remember that you can access each of your fields like we defined them inside our model okay so if we want to filter our objects by some specific condition this is something that is quite possible as well so let's go ahead and show that but just before let's clean our screen here so we can have a better look like that okay so the way you can filter by some condition would be by item dot query dot filter underscore by now the underscore by is actually referring to some key value that you want to specify in between those parentheses now let's say that i want to filter by items that they that its price is 500 so it could be basically price equals to 500 and once i click enter then it returns us a base query object like that now the reason you see this it is basically because you may have more than one result by executing that command so to see the actual result of what this exact statement returns you then you should iterate over it so it will be full item in item dot query dot filter underscore by and again i will just type right in here price equals to 500 and once i do that then i am allowed to access each of our items that their price are 500 dollars so we can basically type in here item dot name and once i execute this then we can see that we only have one item that its price is 500 and its name is iphone 10. now again just remember that you will receive this result because the filter on the score by can return you more than one option that this condition is actually a true statement for those objects okay so now that we pretty much understood everything that is relating to modules and databases it makes totally sense to scroll down here and change this dummy information to something else now you could probably guess what i'm going to write besides this long list that we have created so it will be as easy as typing in here item dot query dot all because this will basically return all the object of items that we have stored inside our database so once i save this and go back to our shell here and let's actually exit from our python shell and execute our server so it will be set flask underscore app equals to market dot py and it will be also flask underscore debug equals to one and we can execute here flask run okay so in here as you remember those three items are used to be the information that we have passed in as a dummy information now if i refresh it then you can see that it is updated with the information that is stored inside our database and this is the behavior that we want to reach when we want to display some information inside our website so this is totally fine and it works correctly so this means that we have done a great job by creating a database that is connected to our web application okay so one final thing that i'd like to discuss about is the option to inspect your database in a visual graphical user interface now because we use sqlite 3 as our database engine then we can download a browser that knows how to display information when it is done by sqlite3 so basically you can go ahead and search in google for a db browser for sqlite and then you can see that it has a lot of options for any kind of operation system so if i'm clicking here for example then you can see that it has download links for mac os and as well as for windows applications but basically this is something that you'll maybe want to do because you want to really have an actual look for what is inside your database so since i'm using windows machine currently then i already have downloaded this software and then i'm going to display you how you can browse your information in a visual graphical interface so let's go ahead and have a look okay so i will open our sqlite3 weaver and in here what i have to do is only browsing the file of our database files so once i click on file and choose the open database option then i should point it to the file that we have just created and as you can see i'm inside the directory of our project and what i have to do is just selecting this and click on open now once i do that then you can see that we have in here our tables and we have only one table that its name is item now if we want to see its columns then we can basically click here on that arrow and this will display you the columns that we have created to create this table so you can see that we see all the columns in here and if you want to see the actual information inside that table then you can go easily by right clicking and click on browse table and you can see here that we have actually stored information and you can see the exact information that i showed you from the python shell so this is something that is optional for me this tool was very comfortable when i developed some flask projects and i really recommended to look up for such a tool that will display the information for you visually so it will make your lives easier in certain cases all right so now if we take a look to what is inside the market.py file currently we have a model here and down below we have several routes that we have created now we are going to create more models and more routes in the future and so it might be a great idea to have a python file that its name is going to be models.py and also routes.py where we will store all the routes now we are going to spend a few minutes on how to reorganize our project because it is not going to be as easy as grabbing the models to a models dot py file and import stuff because we are going to end up with a forbidden import and we are going to explain that in a few minutes so let's actually try to split our different flask elements to different python files so i will start with creating a new python file and for sure i will name it modules dot py and in here i will grab our single item module and i will try to paste it in inside our modules and currently i will allow myself to ignore that db variable that is not existing here and i will go back to the market dot py and i will do the same process by creating routes.py and then i will go back to our market.py and i will grab in everything from here and paste this in over here so we could pay attention that we have several arrows because several functions are not loaded inside that particular file so how we are going to get out of this so let's first go back to our market dot py now as you know in python when you use the import keyword to import some file then what python does it executes the entire file line by line so if you remember before we actually moved the routes and the models we used to have a market.py file with modules over here and with routes down below now we could basically go ahead and use here import modules and import routes but we still have to figure out how we are going to give these models.py the db variable that it's missing so again we could try to solve that by moving that line to modules dot py so i will paste this in inside here now we also end up with missing the sql alchemy instance so again we could grab this in from here and paste this in above here but we are never going to get out of this because there is always going to be something missing in each file and then we will end up with something that is called circular imports now what secular imports are it is basically two files are trying to import from each other and it is something that is forbidden in python because each file will end up with some missing variables when it tries to load some variable from python memory so in order to avoid this python comes up with something that is named packages now we can basically package our entire application inside a new directory let's call it something like market and then we can create one more python file for example we can name it run execute start something like that and then that python file will know how to import everything step by step and the only thing that we will have to do is calling that specific file and then that python file will take care of the rest so this is the design that we are going to implement in that video and so by the end of this video every file will be at its own place and everything will totally make sense for you so let's actually get rid of those lines that i just pasted in over here and revert them back inside our market dot py and then we will remove those again and then now we will basically go ahead and create a package and then we will name it market so let's see how we can do that great so first of all we will go ahead inside our flask market directory and we will create that single file that is going to take care of everything that i just discussed about and i will name it something like run okay so it is going to be responsible to execute our application and what i will do now is grab everything from our market dot py and i will cut everything from here and i will basically paste this in over here now as i have completed this basically i can allow myself to delete the market.py file because the routes are here and then the models are here so the market.py is quite empty and i can allow myself to delete that so let's go ahead and delete that i will use the safe delete option all right and our next step here will be to create new directory and move our templates modules and routes dot py into that directory so we are packaging every flask element into a new directory that is named market so let's go ahead and create a new directory here and i will name it market and then we will basically move everything from here to that market directory so in python that will be as easy as grabbing it and just hovering it inside the market here then you can see that pycharm auto completes me by asking if i want to move some files into that directory so i will basically use the refactor option here and then you can see that our modules for example is located inside the new directory now i will do the same with routes and also with our templates great and last we will also move in our market.db okay so let's close each file over here so our structure right now is that we have our market directory and we have our run.py python file which is outside of that market directory so let's see how we continue from here okay so if we actually take a look to the lines that are left inside our run.py file they are basically some initialization lines that contains very important information about our web application now what we must do with those lines of code that are left over here is to move them to a special python file that is called double underscore init now when you work with python packages every python package that is considered as a regular package is going to include one special python file that its name is always going to be double underscore init double underscore and what is so special with that file is that when you import it then before it loads what you want to import to your file it is basically going to execute that particular file that is named double underscore init double underscore so it totally makes sense because whenever we want to import some objects or variables from our application then we probably want to execute those lines of code because those lines of code are what responsible to start our flask application so we will go ahead and do that so i will basically go inside our market directory and i will create an initialization file that will be responsible to define this directory as a package so i will name it double underscore init double unscore as i said and i will move in whatever is inside that run that py to that double underscore init double underscore file now what is so special with the process that we have done until now is that if we are going ahead from our run dot py file and we try to import market then it is going to recognize it as a package because we have included that double underscore init file so if we were to try to import that app variable that we have created then it is going to be perfectly fine because it recognizes that variable from our double underscore init file and anyway it is going to execute it as a first step because this is why we have that double underscore indeed file and actually the next line that i can allow myself to do here is using app.run and this file is going to be that pointer file that is going to do the rest of the job of importing everything so this is how it is going to work right we are basically going to import our application from market package and then we are going to run it but before we actually try this out let's add here one more argument and it is going to accept some arguments that we already familiar with and it is going to accept here debug equals true so we don't have to set up those environment variables anymore and one more thing that i'd like to add here as a convention in python is to test out if this run.py file has executed directly now the way that we can check that is by writing the conditional of if double underscore name is equal to double underscore main and again if you don't know what this conditional is about i have a video on my channel that you can definitely check out what this special if name equals main does but basically it checks if our run.py file has executed directly okay so now let's go ahead to our terminal and try to see what will happen if we execute that run.py file now i know that there is a great chance that we are going to fail and receive some errors but i want to show you step by step how we are going to overcome those errors now that we have our package set up so i will open my terminal and basically the only thing that i have to do now is going ahead and execute that run.py file now our web application will start and if we actually try to access it then you can see that we receive errors that the root url is not found now that doesn't make sense because if we take a look to our python then we can see inside our routes dot py that that we have the route for our root url but the reason this fails it is because the double underscore init file does not recognize the routes that we have created inside that route dot py file so our first step here is going to be to complete this dunder emit file by saying from market import routes and as you remember if we import certain file then python is going to try to execute what is inside that file so now we can go back to our web browser and the test results out now you can see that our web application is probably down right now because we see that this site can't be reached and as you can see we started to receive certain errors about the import so in that route.py file we don't have the application defined so let's go ahead and fix that so i will go to our python and i will basically type in from market import app and as you can see that app errors are started to disappear but we still have left with the render template error so we can also go ahead and fix it by saying from flask import vendor template and then we also have one more error that we must fix in here and that will be the import of our models dot py because as you can see we have a line here that says item.query.org and it doesn't know anything about it because it is not a recognized model and i can basically import it like we can import from a regular package in python and that will be by saying from market dot models import item so now we have pretty much everything set up in our routes dot py and if we have a look inside our models dot py then we still have some errors over here left over so i can basically fix it by saying from market import db because we can import it from our dander init file and now everything should work so we can basically test this up by going to our terminal and rerun our application and i will clean my screen again and i will try to run that py file again and now our website is up and running and i can basically test if everything works properly and if i refresh it then you can see that we receive our web application as it's supposed to now if i navigate to that market page then you can also see that everything is quite great so this means that everything works great and we have completed our packaging successfully now i know that there was a lot of information that will probably have to sink in but i hope that the packaging process was clear and you pretty much understood everything about what i have done here so again the main idea was to package everything that is related to market and then having one single file that we basically can execute it and then this file will be responsible to do everything for us now i just realized that i did not specify a lot of times throughout this tutorial that our code is available from the github and you can definitely go down below to the description and bring the link for the repository that includes the code of that tutorial and you can download it in the way that you like them so you can also use the command of git clone or you can download it as a zip file up to you but basically it is a great idea to go to that link and follow the code that i'm writing throughout this tutorial okay so let's go ahead and continue so i will basically have to deal with a way how i can accept users to our website and the way that we are going to do that is obviously by storing some information regarding our users in a database so it totally makes sense to go ahead and create a new module and then we will store some special fields like username password and stuff like that that is going to be our columns within that model so let's go ahead and do that so i will go up top here basically i'd like to remain the item as our second module and i will write in top here class user and it will inherit from db.module like we did in our previous modules and our first column would be the id again so as you remember i said previously that it is a convention and it is a must thing to have that id field because this is how the flask wants to identify each of your objects by their id numbers so i will allow myself to copy this line from here and paste this in as a first line over there and now i can allow myself to continue and creating some new fields so i will go ahead and create username equals to db dot column and i will make that to be equal to db dot string and i will close this out and it is a great idea to limit our users by saying length equals to 30 so it will be maximum 30 characters per each username and this is something that we want to keep unique because we probably don't want to let our website users to have multiple usernames that they are the same so unique could be true and we will also specify nullable equals false and just to follow this exact same order like we did previously i will go here and type in nullable equals false and i realize that i missed the comma here so let's complete that out okay so this is our username field and as you know in most of the websites we also have to provide our email address when we register to a different site so it is also a great idea to have an email field so it will be email address equals to db.column and this time i want to limit this email address as well but i have to raise our limit a bit so if there is a username with a length of 30 characters then it might be a greater idea to give our email address a limit of 50 characters so there is a lot of space for at email.com something like that so i will also make that nullable equals to false and also unique equals true that is quite making sense and our next field here would be our password now i'm going to name this field a little bit different because we are not going to store passwords as plain text inside our database now doing something like this could lead to a lot of security risks and that is something that is basically called make hackers life easier to pull some information from your website's database so you'll probably want to avoid this by storing the password not as plain text but besides you'll want to apply some hashing algorithm or some another way that will encrypt that password so even if there is a hacker that is going to steal some password information from your website he doesn't have a lot of things to do with that because it is encrypted so i will name this field by saying password underscore hash and that will be equal to db dot column and we are going to receive here string again now i'm going to give this length 60 because the mostly used hashing algorithm that flask allows us to use will always convert the passwords to being 60 characters so this is why i'm going to specify here length equals to 60 and i will continue on by saying nullable equals to false and i actually don't have to write here unique equals true because it is totally fine if two people have the exact same password in our website now this is the password field we still have some more fields to set up for our users and the next one will be the budget now if you remember from the very beginning of this tutorial i said that we are going to apply a budget system for our users so it totally makes sense to describe our user's attributes by one more attribute that its name would be budget so i will go ahead and say budget equals to db dot column and that time this will be equal to db dot integer and we will go here and continue by saying nullable equals false and we are also going to set a default value when this user object is created now you'll probably want to give some amount of money for your new users to start buying and selling stuff from the market so we will set the default value for that for example to 1000 so the users can at least have 1000 coins at the very first registration attempt okay so it totally makes sense to set up a value like that and one final field that i like to add here before we close up this module will be a field that is going to be related to our items module now what that means it means that we want to allow our users to own several items because this is what this website is going to be about so in database definitions this is something that is called relationship between a two tables now in our case we use modules because we work with python but we have to use some special field that is called relationship and inside that relationship field we are going to describe several arguments to make the model to understand that the user can own some items okay so let's go to here and write in items equals to so we will type in db dot relationship like that and we will close our parentheses and the relationship is going to be with our item model so we will say that by writing the model name inside a string like this now continuing from here i am also going to type in back riff equals to and we will open a single code and inside here we will say owned user and what backref does it is basically a back reference to that user model so for example if we have one user and then we want to know the items that this user owns we are basically going to grab the object of the user and we will access the attribute of items but let's consider a situation that you have an iphone item inside your database and you want to know its owner now you are going to grab the item object and then you will access it by the attribute of owned user and that is because you specify the back reference of that item so it is quite important to provide this back reference because it will allow us to see the owner of specific items so the last argument that i will say here will be lazy equals true and that is something that we also have to set up here because if you don't set up the lazy equals true then the sql alchemy will not grab all the objects of items in one shot so it is quite important to specify the lazy equals true in that case now i want you to take a look how this db is not actually a column besides it is a relationship so what that means it means that this is not actually going to be stored as a column when we try to inspect inside our database so it is quite wrong because we also want to store information about certain users that are owning some items now the way that we are going to do that is by saying to our items module which user is owning it so we will go back to our items module and specify one more column that we must create in order to make this relationship to work successfully so we will go here and we will type in owner equals to db dot column and this will be an integer and the next thing that we want to write here is the relationship to the user model so i will say db dot foreign key like this now what foreign key does it search for the primary key of your model from the module that is related to now if you remember i said previously that there is a great reason that we have to create this id in here in order to the sql alchemy to understand each row that is going to be stored inside our databases so now if we go ahead and create foreign key we can basically say that this foreign key is going to be related to the other modules primary key so we will say in here user dot id and this is related to the each unique row that is going to be stored in that id so it is quite important to write here user dot id in lowercase okay so now i'm back at my terminal and i like to create all the tables from scratch inside our database so we will go with python and we will use here from market.modules import db and then we can basically say db.drop all now this will delete entire information from your database including all the tables so we will say that and then we will recreate everything now i'm doing this just because we want to clean our information before we test new things out but in production when you add a new table you don't always have to delete the entire information basically you could also execute create underscore all but i just wanted to show you that there is the option of drop underscore all as well so now if i go ahead and create everything then if i don't receive arrows then it means that everything looks great now we can continue by importing the modules so we will say import user and item again from our market dot modules now we can basically try to create a new user to see if everything has worked properly so we will say u1 equals to user and we will specify the username this will be equal to jsc for example and we will write in password underscore hash this will be equal to just random string of numbers and we will also say email equals to something like the following now if you remember we also have the fields of budget and the owner now i did not specify nullable equals to false on both of those so that means that it should be enough now i guess i missed the email here so we should fix that to underscore address and now we are fine now let's clean the screen a bit we will say os dot system and we will execute this cls inside here and now i can basically go with db.session.ad and we will add the u1 in here and we can commit our changes by saying dot db.session.com okay so now this should be enough for our user to be stored inside our database now to see this we can basically execute user.query.all and then you can see that we have one user with the user one statement right here so it means that everything worked great okay so i cleaned the screen a little bit here so i also want to test up the relationship if it works great so we can basically create several items quickly and set their owners to the user that we have just created and see if everything works well so i will go ahead and say i1 equals to an item and i will go by saying the name equals to iphone 10 for example and we will type in description and we will just write in a short description here and we will say barcode equals to a string like that and we will type in price equals to 800 for example so i just missed up the desk we should create the description like that okay so everything works great and i will go by saying db.session.ad and i will add i1 and i will now use commit so we will commit our changes now let's repeat ourselves with another item so i will clean the screen here quickly and i can load the previous commands by using the arrow signs so i can basically change this to i2 and this to laptop and i will change the description to description too and the barcode here will be a little bit different and the price will be 1000 that time and we can repeat ourselves again by saying like that okay so now we have two items stored inside our database so we can verify this by saying query dot all and now let's try to assign an ownership to the iphone 10 item so we have to go and filter this specific iphone 10 object and we can do that by saying item.query that filter underscore by and i can filter by name equals to iphone 10 like that okay so it also makes sense to assign this into a new variable so i will go ahead and with item one i will assign it and now if i access item one then you can see that it returns us a base query and now we can basically use this first method to grab the specific object itself so now i have the item1 object in here and now i want to test up the results if i try to access the attribute of owner and now you can see that it returns us nothing because it doesn't have a owner now to continue from here i can basically say that i want to assign the owner of item 1 to the specific object of the user that we have just created previously with the username of jsc so it will look like something like the following so it will be item1.owner and this will be equal to user.query.filter underscoreby and i want to filter by the username equals to jsc and if you remember this entire statement here returns us a base object and we have to access the actual object by saying that first and as i have done that then i can continue on to db.session.com and i can assign the item one and now sorry i should have type in here add great and then i should have continue to commit now as i have done that then we can see a several errors over here now i can see that we have this update item set owner where item.id equals to a question mark now i have a feeling that i know why this happened and it sometimes that always may confuse every one of us and the point is we have to understand that the only way that we can assign the attribute of owner is by specifying the id of the user so if you remember our foreign key is only going to accept the attribute of id so this is why we have done a great job by filtering the specific user but only we had to give it the attribute of id so let's go ahead and fix that so before everything let's clean the screen for a minute so it will be cls inside os dot system and before i actually take different changes inside our item one we have to execute this command which is going to look like db.session.rollback so we can roll back our previous changes and commits and once i execute that if i did not receive any errors then it should be fine and now i will just type in the exact same command that we wrote previously so it will be item1.owner and it will be query dot filter underscore by and we will filter by jsc and after the dot first in here we have to give it the attribute of id and once i have done that then i can basically add it to our session which is clean because we have rolled back the previous commits and now we can try to execute the commit and this should work so if i was to go ahead and see the owner then you can see that it returns us one and the reason it returns as one it is basically because this is the foreign key of the owned user now we can also test this by filtering the item specifically so we can go with i equals to item dot query dot filter underscore by and we want to filter by name equals to iphone 10 like that and now we can basically try to see the back reference of the item that i talked about so if you remember we had that backref attribute set up so if i was to go ahead and execute i dot owned user then we would receive some errors because again i missed the dot first in here and now i can run in on user then you can see that it returns us the actual user that owns this item so this is quite great and this is a great achievement that we have done until now so so i hope you understood everything about how relationships of databases working because it is quite important to be aware of that situation so this is the actual idea of our website right we want to own items as users inside our web application okay so previously we have created our user module but we currently don't have any special way to create users to our website besides the only way to do that will be by our terminal and we are probably looking for a way to customize a nice looking html page for our customers so they will have the ability to register to our website so the way we can do that is by customizing an html form now we probably want to make this form smart enough to check certain things to see if this information is valid so for example you can't create a user if there is already a user with the same name or if your password linked does not meet the requirements of your website or anything else that is quite dealing with validating stuff when it comes to register to a website so in order to create our forms to register smart enough flask delivers already a builtin package to create phones and this also allow us to display it nicer on our html templates so in order to start working with this we need to go ahead to our terminal and install some packages so this is why i will open my terminal here and i will basically type in some pip install commands so the first one will be pip install flask dash and this is the first package that will allow us to create nice looking forms and then later on to display them on our html templates so i will clean the screen here and our second package will be pip install wt forms so you can see that it is already installed probably this was a secondary package under the flask wtf so anyway just write this command as well for safety and let's continue from here okay so as i said previously the forms are going to be a quite different element in our flask application so this is why it totally makes sense to create a python file that we will name it phones.py and then each form that we are going to create for some situation will be stored there so let's go ahead and do that so i will go under my market directory and i will create a new python file we will name it forms and here we will write our forms that we want to display them on our html templates now the way that this is going to behave is quite similar to models because we are going to create classes and then we are going to create some fields inside our classes and then that way those fields are going to be the required fields for our customers that they have to fill in in order to register to our website so let's go ahead and do that but the first step is to actually import those libraries that we have just installed in order to create those forms so i will basically go with form flask underscore wtf import flask form and then we also want to import some special fields that are going to be recognized by a special type of field so for example we might have an integer field for our users if we want to ask them about the year of birth or we might have a string field if we want to ask them about their name so this is why we should go ahead and also import the special fields by saying from wt form import string field now we can also go ahead and import more types of fields but currently we will only start with the string field okay so we will start by creating our register form so it is going to be by saying class register form and this will inherit from the flask form class that we have imported over here so this is why i will type in here flask form so the next thing that i will do here is creating some fields that they are going to be recognized as our form fields so i will start by creating a username field because it totally makes sense to register our users to ask for a username so it will be equal to string field because this is a string and then there is a convention to give a label for each of our fields so i will provide in here label equals to username and i think that will be it for the username field now we are also going to ask the email address from our user so i will go ahead by saying email underscore address equals to the string field again and that time i will label it by email only so this should be enough now i am also going to create two different fields for our passwords so it will be password one and also password two now the reason you want to do this because mostly in each website you see a field about the password and also about the confirmation of that password so this is why it makes sense to create two separated fields and then later on we are going to write a validation that is going to check if password one is equal to password two so we can submit the register form successfully so to create this a string field is not considered as a best practice because the wt forms has a dedicated field for password fields so i will go here and i will import it by saying password field and then i will create it as a password field over here like that and i will close the parentheses and the same will be for the password tool as well so i will create it as a password field now let's give it their labels as well so it will be password1 for the label of that and for the label of password2 it will be password2 alright so now that we have created those fields we also have to create the field that will allow the users to submit their actual information now when you see some forms not only you'll see areas where you have to fill in some information but you also see a button that you have to submit your final information so this is why i will create a field that is going to be by the type of submit so i will go to our second line here and i will import that submit field and then i will create one submit field so it will be submit equals to submit field and again its label is going to be submit so i think this should be enough for now for our registered form later on we are going to go back to that register form to write some validations in order to make our form more secure okay so now it is a great idea to import this registered form class from our routes now we currently don't have any route for our registration page so let's go ahead and create one so i will go to my routes dot py and i will zoom in the phone here and i will start creating a new route for our register page so it will be at act dot route and i will navigate our users to forward slash register and then we will create this register page route by calling this function register page now the first step here would be to import that form from the forms dot py so i will go up top here and i will import it by saying from market dot forms import register form and inside that function i will basically use the register form class to create one instance of it so it will be form equals to register form and i will close this up like this now as we have completed that we have to look up for a way to display the fields of that phone inside an html page now the way that we can do that is for sure by rendering a template with the name of register for example and then we can pass as information our form instance so we will say here return render underscore template and then we will send our users to a template named register.html and i know that we did not create it yet but we will do it very shortly and the information that we want to send to that template will be that form instance that we have created here so it will be form equals to form and i think that will be enough for this stage and now let's go ahead and create this register.html template so it will be here and i will basically create a new html file we will name it register and then we will replace it with some html code that is going to be responsible to display that form in a very nice way now i will delete the auto generated html and i will start by for sure extending our base template so if you remember we have our base template that we have to inherit when we create a new template so it will be curly brackets and then the percentage signs and then the closure for our curly brackets and between those we will type in extends and then we will extend our base.html now as i have completed that we have two blocks that we should use and then contain some information inside there so if you remember we had inside our base dot html a blog title and also a blog content so i will copy the blog title and i will paste this in and i will also copy the blog content and i will paste this in as well now let's fix the indentation here a little bit and we will continue from here now if you remember in the blog title we are allowed to provide information that is going to be displayed as our tab names so it makes sense to type in something like register page and in here let's actually give a random information currently to test if everything works properly so i can validate myself by only writing some basic html code so let's write in here register form inside the h1 tag all right so we have one more step to complete before we can go ahead and actually test this out and that will be to create a special secret key that is going to be identified as the secret key of our flask application now the main reason that you want to do that in this stage it is because if you go ahead and test the form out right now nothing is going to show up because when you create forms in html you actually have to provide one more security layer in order to show this form up and that is simply because we change our request type to our clients so until now we were able to display html pages for our clients but when it comes to forms now our clients are going to be able to submit actual information towards our database so this is a quite different action that must be secure enough so this is why we have to create a secret key for our flask application so the way that we can do that is by generating some series of characters that is going to be used as our secret key so i will open our terminal and i will go inside python and i will import the os library because simply we can generate there a hexadecimal random characters so it will be by import os and then we can basically go ahead and say os dot u random and then we can provide here the value of 12 so it will be by the value of 12 bytes and then we can basically go ahead and convert this to hexadecimal values and then the value that we'll be receiving back would be the secret key that we auto generated for our application now there is nothing wrong with going ahead and generate more secret keys but just make sure that if you use one then stick to it throughout the development of that application so let's grab this secret key and go back to our python and navigate inside our init.pi and then here we have to write in some new configuration so it will be app.config and then our key here will be secret underscore key and if we paste this in right there and this should be inside single quotes as well then this should be enough to display the form that we just created so i will go back to my terminal and we can exit the python shell now and we can basically execute our application with python run.py and then we can navigate back to our website and try to see what will happen if i go to fort slash register and then you can see that we have our page up and running so this is quite great now one more thing that i like to do before we continue is to actually configure that navbar button where we can click on it and then this will lead us to the route of the register page so if you remember previously we learned about the url underscore 4 built in so let's go ahead and configure that so it will be as easy as going to our base dot html and identify that register page which is right there so this is the anchor tag for our register page and if you remember from previous examples for example for the home page we use this builtin url for function so i will allow myself to copy the exact statement and paste this in inside our href attribute and then this could be changed to register underscore page and now we can test this out by refreshing our page and for example navigate to our four slash home and we can click on slash register then you can see that it works great so now we can continue on customizing that form okay so i'm back in my register.html and in here you could notice how i deleted the code inside our blog content now inside the content we are going to put the form itself and the way that we can access the form instance is referring to the variable that is passed from our route with jinja syntax so it will be by saying form within double curly brackets so just to check if this works properly we can basically navigate back to our website and see what happens if we go with fold slash register then you can see that we see the object itself of the form so this means that we can access the form itself now to access the actual fields and to visualize them better we are going to take some different actions in here so we have to create the form tag which is a builtin tag in html syntax and we also have to specify some more attributes in order to the form to work successfully so one of them will be the meta type now i did not talk about request methods before but basically when it comes to websites you have a lot of request methods that the clients can provide and the most known request method will be the get method where clients are requesting to display some information on different web pages but there is also one more different request method that is called post and the post request is a kind of request that is going to affect the database of your website so since this is a critical action to take as a website client then you have to specify that the method is going to be post so it is important to provide this kind of information in here and i will continue on by saying class equals to form dash register and the last attribute in here will be the styling so we want to style our foreground color to white so it will be color column white so i'm doing this because we are working on dark mode and it is quite important to have the foreground color set as white okay so inside our form tag we can basically refer to our form fields by saying so i will open the curly brackets one more time in here and i will first call the label of our form fields and then i will call the field itself so you will see the effect of that just in a second so i will say form.username dot label and i will open and close the parenthesis here and below that we can say form dot username and i can open the parentheses and close them up here again now what is so special with that flask forums is that this statement is going to accept attributes like in real html code so we could say here class and then we could basically give it a bootstrap class so i will say form dash control so it will be responsible to display that field a little bit nicer and we can also give it a placeholder so our clients can understand that this field is designed for providing the username so we can say first of all let's add a comma here and we can say placeholder equals to user name like that and let's see the actual results of a code like this so if i'm going to our web browser and refreshing that out then you can see that we see an empty field where we can provide some information now i know that this looks quite ugly and in most of the websites the information of filling a form is starting not from the left position so we can fix that by containerizing those fields inside one more special html field so let's go ahead and do that so i will open our pycharm and in here we can containerize our form inside div tag so i will allow myself to type in here the class container so i will allow myself to paste this form inside those div tags and let's fix the indentation here a little bit and then let's test out the differences so i will refresh this out now you might be bothered by the results from that username in here but this is something that we can change in our forms dot py so this is the label of our username field so we called basically open our forms dot py and we could change the label so now you can understand what the label does it basically gives a kind of secondary title for our fields so we called say here user name like that and we could also change that to email address like this and we could also add here password like the following and we could also change this to confirm password like that so it makes a lot of sense to display the label of our password tool as confirmed password because it probably looks nicer to our clients so let's see the results of that so if i refresh it then you can see that we have a nice secondary title for that field now the way that we are going to continue is going to be by copying and pasting those form labels and the form fields itself so we can basically copy and paste ourselves four times and we can change this to email we can also change that to email as well and we can change the placeholder to email address like that and we can do this for our passwords as well so i will paste this in over here and this will change to password one and this is going to be changed to let's scroll down password in here and this is going to be password one as well great so now i can duplicate this one more time and we can change this to password tool we can change this to password two and this will be confirm password now to test the results of that we can refresh it you can see that we receive an error and that is fine because we defined the email field as email underscore address so let's fix that quickly so it will be underscore address and underscore address as well now you can see that i trained to not cut the arrows that i received throughout this video sometimes because i really want you to be aware of the possible arrows that you can meet throughout the process of writing any html code or any python related code so this is the reason that i'm okay with the arrows and handling them on the fly okay so i will refresh that out then you can see that we receive a lot of nicer form in here now i want to give a nice image for this form and i also want to give a h1 tag so the users can see a nice big title now the code that i'm going to paste in here you can find it from my website because i put all the code snippets in the flask tutorial section which you can find in my courses so i will paste it in over here and you can see in the first tag here that i have an image tag which is going to be responsible simply displaying the logo of my website and the h1 tag in here that is going to say to our users please create your account so let's just fix the indentation in here and i think this should be it and i also want to add here a break line tag so we can have a separation between our header to our fields okay so if we test the results then you can see that we have a great result where we see the logo of my website and we also have a nice title now it could be a lot better if we could centralize these objects so this is something that we also can apply and the way we can do that is by going in here and overriding the body tag of our html file so i will allow myself to make the font a little bit smaller here and what we can do here is basically wrapping the entire div with a body tag so we can say here body and then we can basically use the class of text dash sender and we can close this out and we can move the closure of our body to the very last line just above the end block and now if i refresh that out then you can see that we receive a nice looking form where everything looks pretty clean in my opinion now there is one more thing left that is remained to close out this form and this is the submit field that is missing in here so we can basically go back to our register.html and we can add it in here so i will call the ginger syntax in here by using the double curly bracket and i will call the submit field so it will be form dot submit and now in here we can provide some bootstrap classes as well so it will be class equals to and then we will type in the classes that we want to include to customize this submit button a little bit better so it will be btn and i will type in btnlg which will responsible to display this button larger and i will also say btnblock and this will expand the button to the entire forum and i will also type in btnprimary so this should be responsible to display the button in a nice blue colored version so i will save this out and i will also add in here one more vr tag so we will have a nice separation between those and okay so now we can basically test the results by refreshing this page and now you can see that we got the submit button but we have the annoying submit text with all the lowercase now this happens because of the labels that we have created for each of our field again so we should change this to something like create account and once i have done that then i can verify myself by refreshing it now you can see that we receive a nice button for the create account now nothing is going to happen when i click on create account and when i fill in some information and actually this is something that we have to handle in a separated way inside our routes.py and we will do that very soon all right so until now we were not able to configure the behind the scenes actions of what happens when we create the create account button now to do this we have to go to our routes.py file and then we have to go for the route where the register form is located and then write some pure python code over there so to do this i will open my python and in here i can basically handle what happens when the user submits on the create account button so the best practice in that case will be to start by this conditional so it will be if form dot validate on submit now there are two main reasons that you want to execute this conditional before you actually go ahead and submit changes into your database okay so the first reason you want to execute that is you'll want to verify that those comments that i'm going to write in here are only going to be executed when the user is submitted on that button so this on submit part is actually checking if the user has clicked on the submit button of that form and the second reason you want to execute this it is mainly because we are going to write some validations that are going to check for certain requirements before this form becomes valid so i'm talking about conditions like you see in real register pages in real websites for example your password should be matched or your user name should not contain more than 20 characters and stuff like that so this is why it is very important to execute this conditional in here and once this returns true then i can basically go ahead with user to create like that and i will make that to be equal to an instance of user and it is a great idea to import it from the market.models in here so i will basically add a comma and i will import the user and once i have done that then i can basically give the arguments that are required to create a user so i will start by saying username equals to and in here i actually want to provide the value that is received from the username field within the form so i can do this by saying from dot username dot data so this is the way that we are going to pass our fields from the form and i will continue on doing this with the email address as well so i will say email underscore address equals to form dot email underscore address dot data and i will perform the exact same action with password so it will be password equals to form dot password one and in here i'm passing password one by purpose and you will see in a few minutes why i am doing this so i will say that data in here again okay so this should be enough to create the instance of our user and once i have done that then i can basically execute the same commands to submit the changes towards our database so it will be db session dot add and i will pass in the argument of user to create and i know that we did not import the db variable in here so it is a great idea to import it now i will go down here and i will say from market import db now the reason i can import it directly from the market package it is mainly because it is located in the under init file so i don't have to go inside dot something okay so it is quite great to import it that way and now i will go back to our route and i will say dot db.session.com and this will save our changes to the database and once we have done that then we probably want to redirect our users to a different page now it quite makes sense because now they are registered to the website and now we can show the user the items that are available on the market so i will use the builtin redirect function that the flask package offers us so i can go up here and i can go for that line and i can basically import the builtin function which is called redirect and i will also import the builtin url underscore four function that we used previously in our templates so we will go down here and we will see how we can redirect our users to a different page after the user is clicking on the create account button so i will go right after our commit command and i will say return redirect and in here the redirect function expects for an hardcoded url now if you remember previously in that tutorial we said that it is not a great idea to give arguments as a hardcoded urls so besides doing this i will say url underscore form and i will give the url underscore for the name of the route itself so it will be market underscore page and this should send our users right to here so it is quite great okay so we can just test this out by going back to our chrome browser and refresh that out and then now let's try to create a random account and see what happens okay so we will say here jsc 2 for example and we will fill in some dummy email and i will just type in very basic password and i will try to create account now you can see that we receive method not allowed and actually there's a reason that i wanted us to see this message because it is quite important to apply the step that i'm going to talk about now when it comes to web requests we said that we have several request methods and we should allow our routes to handle post requests and the way that we can do that is by customizing the decorator of our route function so i will go right here and i will say methods equals to and i will open here a list and i will insert two elements and i will give get and i will also give post okay so it is important to apply this step so our route could handle post requests and before we continue sorry about that but i think that we mismatched this line in here and this should be password underscore hash equals to form.password1.data so make sure to fix that before you continue alright so once we have enabled the post request in that route then there is one more important step that we have to configure before we test this out now when you send information from client to a server then it gives a huge opportunity to the hackers out there to steal that information and one of the known malicious attacks is called cross site request forgery and this attack is basically just a way to steal or perform actions against your database that are unwanted and to protect our website from such an attack flask delivers us a very easy future to apply a protection so the way that we are going to do that is as easy as going to our register.html and right under our form method post html tags we are basically going to say so we will open our curly brackets to refer to ginger syntax and we will easily say form dot hidden underscore tag and what this is going to do it is going to protect us from the attack that i was talking about by generating some token that is basically again just going to protect us from such an attack and okay now we can save that file and once we have completed this let's actually test if our website is up and running and we will now go to our website and we will navigate to our register page and we will try to create a new account so it will be jc2 for example and we will try to provide in some random email here and we will try to fill in some password and now if i'm going to press on create account and going to be redirected to the market page then it means that the user has been created and if i click on that then you can see that this is the exact result so that means that we have created this account and we can test this by easily going to python shell and type in user.query.org and this will be responsible to give all the users and we probably will see the jsc tool account that we have just created okay so although now we have the ability to register users we did not set up any special policy regarding to how we want to register our users and what i mean by that is you saw previously how i created a user with a password that only contains six characters and we did not even write a python code anywhere in our project that verifies that the password and the confirm password are match so this is very wrong when it comes to web applications and not secure and actually this is a huge bug now to solve this we can basically write in some validations to solve that problem and then those validations are going to be executed before the form is submitted and the way that we can do that is by the flask validations package that is offered by the flask itself so let's go ahead and try to apply some validations to see that the data that we are receiving is actually valid so i will make the font a little bit bigger here and i will say down here from wt forms dot validators and in here there are a lot of builtin classes that are going to check for certain validations so let's say that we want to validate that the username length is maximum 30 characters and minimum two characters so we can do that by importing a builtin class that is called linked and now once i have done that then we can go inside our username field and we can call the validators argument and basically we can say that we want to validate the length so it will be length and then i will open the parenthesis here and i will say minimum equals to 2 and i will also say max equals to 30. so what this line of code does it basically verifies before the submission that the username value includes between 2 to 30 characters and we can write more validations like that in each of the fields that we want so let's say that we want to apply the exact same step for our passwords so it will be as easy as going to our password one field and say valley datos again and this will be equal again to a class of length i mean an instance of the length class and we can now provide here minimum equals to six and i actually don't want to set a maximum value for our passwords because if our users want to have a huge password then it is quite okay now we could copy the exact validation to our password tool as well but we probably want to avoid that because if this validation is going to be executed on password one then we probably don't need to execute it again on our password too because we want those fields to be matched and as i said that how we are going to verify that password two matches password one well the way that we can do that is by importing one more class from the wtforms.validators and we can basically check if password2 is equal to password1 when the form is submitted so it will be as easy as importing the equal to class here and go to our password tool and say validators equals to equal to and then in here we will pass in as a string our field that we want to verify that it's equal to so it is password one and it is quite important to write this down because that is what is going to verify that the password and the confirm password are match now if you remember the password too is the confirm password and you can memorize this because we have this label in here so this is actually a very important validation okay so some more validations that we want to provide in here is probably to check if the ad sign is located in the email address and the way that we can do that is also as easy as importing the email class from the validators and we can just say validators equals to email and this is easily going to check if the given value in the email address is actually an email address and one more thing that we can do with the validators we can basically give one more validation to each field and it will be as easy as converting the validator's value to a list in each of our fields so let's go ahead and do that we will just add square brackets in the end and in the beginning of each our values so i will do that in here and i will also do that in here and i will do that in the password too as well now there is one more reason that i have done this because we also want to verify that each of our fields are filled in with some information so i can basically import the data required class here and i can add one more validation by going here and press comma and now we can type data required and close this up like this and we probably want to copy and paste the same validation for each of our fields because we want them to be filled up so i will copy this out and i will paste this in in here and as well as in here and also in here and i will just go back to here and i think we are pretty much done with all the validations that we want to apply okay so now that we have completed this let's see in our routes dot py how we are going to handle those validations so we will open our routes dot p y and we will zoom in here a little bit and down here we want to check if some of the validations are failing or not so for example let's say that we had a user that provided a username with only a one character well in that case it is quite obvious that our python conditional is not going to go inside our form dot validate on submit because one of the validations are not meeting our requirements to create a user successfully so to check for errors that are arriving from the validations it is as easy as checking the form dot errors so if one of our validations are going to fail then it is going to be stored inside this field and since it is a builtin dictionary field then we probably want to check if it is empty or not before we actually put in some more python code so i will say if form dot errors is not equal to empty dictionary and what i say by writing this conditional is just as easy as saying if there are no arrows that are arrived from the validations so i will comment this out if there are not arrows from the validations like that okay so it is quite important to write in this conditional and once i have done that then we can basically iterate over the arrows that are arriving from the validations so since there could be more than one validation error then we have to iterate over the form.arrow so it will be for err message so just a shortened way to say error message in form dot arrows and as i said that this is a dictionary then we can basically access the values of that so i will say dot values and i will close this up and we will enter this conditional and temporarily we will basically print the message in the server side so i will just print the message and then we should see the error message in the python shell where we see certain logs about our web server that is running so i will basically print the error msg up and it is a better idea to actually write a formatted message so it will be something like there was an error with creating a user and then we will call the variable that we are iterating on okay so i think that we are all set up to test if that works properly so now i will open our website on the left pane and i will locate our terminal in the right pane okay so we can be aware if there are going to be any arrows when we create a user so now i will try to register and i will verify that our website is running so i will execute python run dot py and now we can see that we receive an unexpected exception here so it says that let's actually see it like that it says that we must install the email underscore validator for email validation support so i will say down here pip install email underscore validator so just make sure to run that and i believe this should solve the problem so once we go ahead and install this up and now we can run our web server again and now i see that everything works properly now we can refresh this and we are right in the register page so now i want to create a user with only a one character so it will be just j and i will put a valid email address so just something like that and i will not mismatch the password by purpose so i will create an account and then you can see that it did not redirect us to the items page unlike the previous result and in our web browser we can see that we received there was an error creating a user and we can also see that we have here field must be between 2 and 30 characters along so what that means it means that our validations are working properly now if we want to test multiple validations that are going to fail then we can basically try to mismatch the email in here by writing some numbers and we can unmatch the password and confirm password and we can try to click on create account and now we can see multiple arrows so we have the there was another creating a user with this message and we also have it for the message here as well and i think we saw this twice because i was looking up here so sorry and there should be three arrows so the third is that field must be equal to password one and we also see that invalid email address and i think that this explains that our validations are working perfect because we saw the results as expected now i know that this is not a great idea to display those kind of messages on the server side and in the near future we are going to turn those messages and we are going to flash them up right in our website so it is going to be very cool to do that because this way our users could also be aware of the different arrows that are arriving from the validations all right so if you remember this was the line that was responsible to display some errors within the terminal of our web server now to change this to being displayed on our html templates flask gives us a builtin function that is called flash and this is basically a function that will allow us to display all the given information inside our html templates so it will be as easy as changing this print to flash and for sure this is a builtin function that we should import in our first lines over here so we should type in here flash so we are importing that builtin function and the way that we are going to do that is by first flashing some messages and then we are going to go inside our html templates and we are going to use a builtin function that is called get flashed messages and what is so beautiful with the get flashed messages it will allow us to gather all the flashed messages as the function says okay but we are going to do that on our template with ginger syntax so it is not quite necessary to import it over here i just wanted to show you the function that we will be using so once i have done that then i can basically go to our template and use that builtin get flashed messages so it will be as easy as going to our templates and going inside our base dot html and we actually want to think of an area where it could be nice to display those kind of flashed messages now the reason we don't do this in our register.html it is because we want to gain the ability to display flashed messages for all of our templates so it doesn't make sense to call the get flashed messages in a specific template besides it totally makes sense to call it from our base.html so we will go right under our navigation bar and we will display the flashed messages right before our block content so i will just go here and i will use the jinja syntax to grab the flashed messages now the way that we are going to do that is by context manager so it will be with messages equals to get flashed excuse me like that messages and then we will close this function and we will pass in an argument that is going to look quite weird for you in the first look but we will explain in a second and i'm going to pass in here with categories equals to true now the reason that we are going to do this it is because in the future we are going to add certain categories for the different messages that we want to display so the important point here is to understand that not only we can display some arrows but we can also display regular information or success messages and we are going to see how we are going to do that in a few minutes now i just realized that i implemented the variable block and with the get flashed messages it expects for the block code so i will change the inner curly brackets to parentheses and i mean percentage signs and this should be great now we should close this with and wait like that now inside this block of code we also want to check if there are going to be any messages when each page loads so we can do that by easily saying so i will call the block code again and i will say if messages and i will close this up by saying end if and i will fix the indentation in here so what we got until now is a messages variable that is trying to grab all the flashed messages and then later on we are also verifying that the messages is not known so it is quite important to do that because we probably want to check if our messages are filled with some flashed message from our route now when we reach this situation it quite makes sense to iterate over the messages if it is not none because if you remember in some cases we could have more than one messages that we want to display to our users so this is why right inside our if statement in here we are going to say and we will call the block code again and we will type in for message in messages and then we will close this up by saying and for and now this is the actual area where we want to display some nice html output to display the different messages to our users so i will start by displaying this message in a very simple p tag so it will be just easily p and then we will say message inside a variable block so it will be message in here and then later on we are going to give this a little bit nicer customization but we will do that in a few minutes now we can go to our website and check if this works properly so if you remember in our route.py we actually flashing a message to our clients so this should be fine by only verifying that our website is up and running and actually try to go back to home and try to register again to our website so i will type in some wrong information in here and let's see if everything works properly so we will try to create account and then you can see that we receive those arrows with the actual errors that we had when we try to create account now if we zoom in here a little bit we could see that we received the output as python tuples so what that means it means that our get flashed messages divides in the output into two important things and the first one is the category and the second one is the actual message so what that means it means that we can change our iteration a little bit to make it look even nicer so we could go back to our pycharm and actually let's go to our base.html again and we could add in here one more variable so we could unpack the results of what is inside the messages so i will say category and then we will add a comma and then we will only display the message itself and once i do this then we can basically try to refresh it and click actually continue and then we can see that the result is quite different okay so this could be one way that you could display different messages to your users but we probably want to give the user a little bit nice display to those kind of messages so the user could be aware if this is an error message or just an information message or a success message or something like that and we probably want to design it a little bit more colored rather than just displaying a blank white text so the way that we are going to do that is by going back to our pycharm and adding in here some categories to our flash message so if you remember the get flashed messages from the base.html are also responsible to grab the categories because we passed in this statement with categories equals to true so what that means it means that this grabs the categories as well so let's give our messages a category okay so we could go back here and we could say category equals to danger and there's actually a great reason why i typed in here danger and you will see that just in a second okay so once i have done that then i should recustomize this line in here to display a nicer message so the way that we are going to do that is by writing in some pure html code to display a nice message and also doing that with pulling some classes from the bootstrap framework that we have imported in the very beginning of this tutorial so i will start by saying div and i will continue by typing the class and i will say alert and then i will also say alert dash and then here i will pass in the category that we send from our route now here is the reason why i wrote danger it is because alert dash danger is going to pull the bootstrap class that its name is alert dash danger and that is responsible to display a red looking message so our users could understand that this is basically an error and something went wrong and inside those div tags i'm going to continue on by typing here button so this is going to be like a wide paragraph where the users could have the option to close the different alerts so i will continue giving here some more html attributes very quick so i will say by type equals button and i will also say class equals to m12 and i will also say mb1 and then i will type in here close so those are some bootstrap classes that i memorize that will be responsible to just display it nicer so i don't want to waste a lot of time explaining what each class does and i will also say here data dash dismiss equals to alert and then i will also say area label equals to close so i'm going to explain some of the attributes when we see the actual results and this will totally make sense for you so i will go back to here and i will continue typing inside sorry about that and i will continue typing inside our button the message that we want to display so i will call here the span tag and i will type in here area hidden equals to true and inside our span i am going to type in some convention characters that the html could understand that i'm referring to an x icon so i want to show like an x close button like we have here in our pycharm this is the exact symbol that i want to refer to so i can just say times and then colon semicolon like that so once i have done that let's see the results and let's see the logic behind this html code okay so let's go here and let's actually put the pycharm in the left pane and our website in here so it would totally make sense to see those together so i will make the phones a little bit smaller and i will continue on from here so now i can zoom out our website and i can go to our homepage and try to register back again and i will again dismiss some information by purpose so i will say jc4 and i will type in some passwords and once i click on create account then we don't see the message and that is because i did not insert the message itself anywhere but you can already see the x symbol that i was talking about and if i click on then on that then it closes so i will just go inside our button here and i will just call the message by only calling the variable block and pass in message and actually i think this should be out of our button here so i will move this right under the closure of the button tag okay so once i have done that let's test the results again so i will go and try to register and i will type in a valid email but only i will not create proper password so i will just type in here some random characters and click on create account and then you can see that we see a nice looking error and our clients could really understand that we have something wrong and we also have the option to close this button by clicking on the x right there now the attribute of data dismiss and area label and area hidden equals true are what responsible to configure what the x symbol should do when we click on it but i don't want to get into much complex detail about html and javascript and some more further information that is quite not relevant for now all right everyone so i hope you understood the entire topic of how we can display nicer flashed messages to our clients now there is going to be one more thing that we want to solve about this registration form now i will try to create a user with a username that is already existing on our database so if you remember in the previous actions that i have completed in this tutorial i created already a user with name of jsc now if we try to create a user with an existing username let's see the result okay so let's go ahead and try to pass in some valid email and actually a valid password as well and if i click here then you can see that it leads us to an error where it says that the unique constraint failed now i know it jumped down here and this is actually referring to actual error but this is the error that i want to talk about so unique constraint field means that we tried to insert a user row to that item table that we have and then it failed because we already have a username with the name of jsc so we probably want to avoid display such a message to our users one this doesn't look nice and two we probably don't want to show our bugs and our code problems to the users so the way that we can overcome this is by easily catching this error a lot earlier before it leads to that sq alchemy integrity error so let's see how we can do that in python okay so i will basically open back our pycharm here and you can see that i'm already inside our forms dot py and there is a great reason for that now in here we want to write validation that is going to check if the attempted user from the registration form is existing or not and then we can catch up this unique error before it leads to the error from the sql alchemy itself so that way we will have a validation error and then we will be able to display to our users this nice red colored error message that we saw previously let's go ahead and do this and i will go inside the flask form class here i mean the register from glass and i will type in some function which i'm going to name validate username and i'm going to receive the cell for sure and i also want to receive one more parameter and we will name it username underscore tool underscore check okay so we are checking if the given username is already existing in our database and once we have done that then we want to query our user model to check if this username to check is already existing or not so i will go up top here and i will import our module and it will be from market dot modules import user and i will go down here with two lines so we will have a cleaner look and i will continue inside our validate username function and i will say user equals to user dot query dot filter underscore by and we want to filter the user object by username equals to username to check and what i'm doing by writing this line i'm basically asking our entire user object if there is a user with the username to check that is arriving from the registration form and once i do that then you can remember from the previous sessions of this tutorial that this entire expression returns us an object and in order to access the first object of it then we should go and type in first like that okay so if this user object is filled in with some information meaning that this entire statement returns an object then this means that there is already a user with that username existing in the database so we probably want to go ahead and type in a conditional like if user so i'm checking if the user is not none and in here i want to raise a validation arrow so it will be race validation error and i will just type in a message like username already exists please try a different username and you could pay attention that this gives us an error in here because we should import this builtin exception class from that line so i will say valley validation error right there okay so there is one more thing that i bet that confuses you in that case so we were able to write a nice block of code in here that is basically verifying that the user is not exist and then we raise an error if there is actually a user with the username that he tries to create now you're probably asking yourself how this validate underscore username is going to be executed in somewhere in our project now in that case what is so special with the validators library is that you are allowed to create certain functions in very specific usernames and then the flask form class is going to take care of the rest so by writing validate underscore username like that then what flask form is going to do it is going to search for all the functions that are starting with the prefix of validate underscore and then later on it is going to check for the next name after the underscore and then it is going to search if there is even a field with that given name and we happen to have this username field so this way our flask form class that we inherit from will know to validate underscore username because we have a field with the username right here so it is quite important to understand why i named this function that way okay so the flask form called understand that we are going to execute a validation for the username itself and we could also do that with our validate email address so we probably want to check if there is an email address that is already existing if our users are trying to create an account with an existing email address so we could do the exact same thing by going down here and typing in validate underscore and here we want to give the email address as our function name so i will go by again saying email address to check and then we will go inside our function and we will continue on by saying email address equals to user dot query dot filter underscore by and we will try to filter by email address equals to email address to check and we have to execute that dot first in here again and then we can say if email address then we can raise a validation error and then we could type in email address already exists please try a different email address okay so there's a great reason that i'm not copying and pasting because as long as i'm doing that then you are practicing how you can write such a complex code when it comes to sometimes rays arrows and conditionals and then functions with a very unique name so this is why i did not copy and paste um and i think this should be enough to see the actual results so i will basically go to our web you know what let's verify that our website is running and it is not so let's execute python1 dot py and then you can see that our website is up back again and now i can try to refresh our page and let's actually go to home and now we can try to go back to register and try to create some account and see the results of that and in here let's try to create again an account with an existing username but not with an existing email address so i will give here an email address like that and i will type in correct passwords and if we click on create account then we see an error again so probably something that we missed with writing the validations so i think we see this unsupported type when we creating the validation so and let's actually have a look if our validation is proper or not um so it is a great idea to go here and user equals to user query filter by and then we pass in this this username to check but i think that this should be a little bit different so i might see what is going on here now if you remember from our route dot py we used to access our actual fields with accessing the data attribute so i think this is what we have to pass in here to query our users so this is just the same approach so in here we create the users with grabbing the dot data and we should do that in our forms dot py as well so i will go here and i will say that data in here and i will do the same in our user query filter in the validate username so i will type in dot data and i think this should be enough to test it out back again because we probably don't want to refer to actual object of the username to check we want to refer to that dot data so let's go back to here and test the results of that so i will try to register back again and i will type in again a username that is already exist and we will change the email a little bit and the password like that and now if we click on create account then you can see that we receive an alert besides receiving a complex error so our users could be notified with that kind of unique arrow as well and you can see the message there was an error with creating a username username already exist please try a different username and that is happened to be the error that we have raised by ourselves now if we want to test this with the email address as well then we can go ahead and do that so if i remember correctly then we had an email with jsc at jsc.com so this should fail and if i click on the same password and try to create a new account then you can see that our validation error about email address is also very very fine and i think that this is beyond then enough to really have a very stable registration form for our clients okay so i'd like to start with changing the way that we maintain our passwords in the database now if you remember i said previously in that course that we are not going to store passwords as plain text now actually what happens now if we actually inspect to our database with the sqlite3 gui tool that i talked about previously in that course then we can see that we have two users but we see their passwords as plain text now this is something that is not considered as a secure thing to do so we are going to change this and we are going to store a hashed password and that is going to allow us to store crypted passwords so let's go ahead and do that and the first step for that will be to install a library with pip install command so i will pause our website for a minute and i will say pip install flask underscore be crypt okay so as i install that then i can clean my screen again and i can go to pycharm and import this library now again what this is going to do it is going to allow us to store the password as hashed password and not as plain text as we saw so i'm already located inside my thunder init file and in here we need to initialize this decrypt library i mean an instance of a bcrypt class inside that library so it will be from flask underscore be crypt import be crypt like that and i just realized that we forgot to delete this vendor template from here so let's go ahead and do that and down here i'm going to create an instance of that and we are going to rely on that to use it in our entire application so i will say be crypt equals to be crypt and i will pass our app as an argument inside the bcrypt class okay so once we have done that then we can basically rely on the bcrypt to start generating hash passwords rather than storing them as plain text so the way that we can do this is by going to our user model and start creating some additional properties now if what i say right now does not make sense to you then it is quite fine but in object oriented programming there are something that is called getters and setters so what this means it means that we can basically configure the way that we want to receive back in attribute and the way that we want to set the attribute so this is going to help us because we need to create one more property and we can name it password and then once we set that password then we can execute additional code to turn this password to enhash password so let's see that in action and i think when i write the code of that it will totally make sense for you so i will open my modules.py and in here we will start creating some additional properties now the properties are going to be set unique per instance so it is important to understand that and i'm going to go down here and i'm going to use the decorator of property so again this is just going to be like an additional attribute that is going to be accessible from each instance and once i have done that then i will basically name it password and not password hash like i did here and i will say return self.password so those lines of code are not doing anything special right now because what this says it says that okay i have a new property and i basically return it back when the user wants it or myself as a developer who wants to see some attributes and the tricky line is actually starting from here so i will now say password dot setter so basically we can allow ourselves to execute some lines of code before we actually set a password to an user instance so it will be dev password in here again and this time i will receive additional parameter and this parameter is going to be the password that is going to be filled in when we want to set that up so the parameter name is going to be plain text password like that and i will go down our password.setter and i will basically override what is going to be stored as password hash now this time i'm not going to make that to be equal to plain text password besides we are going to use the functionality of the decrypt variable that we have created so i will go to here and i will say from market import b crypt now if you remember this is accessible from the dunder init file because we initialized it over there and now i will go back to our models dot py and i will use some of the functionalities of this b crypt instance so i will remove this for a minute and i will say b crypt dot generate password hash and this generate password hash is probably going to receive a plain text password as an argument so it will be as easy as giving this plain text password as an argument to this function or to this method excuse me so now as we have done that then i like to apply some decoding in here so it will be just dot decode and we will use the utf8 to decode this generated password hash okay so once we have set this then we should go to our routes.py and take some additional changes in there because if you remember in our entire project the only code that is responsible to create instances of that user is actually the route dot py so i will go to here and right under our register page if you remember we set our password underscore hash to a plain text password now the only thing that i have to do here is basically besides giving the password hash argument is giving the password argument so this will be responsible to complete the entire process of storing passwords as hashed passwords because we set our password and this line of code goes inside the password dot setter because we set a new password to a new user and then this line of code is getting executed and this is exactly what we need because we storing enhanced password so this is the process and we want to test this up actually in the next user that we are going to register so i will go to our terminal and i will say clean the screen again and we will execute python run dot py and once we have this then we can verify this by refreshing our page and going to register and now i will create jsc 2 3 because we had jst2 and we will set a valid email and now i want to prove you that we are using one two six again so i will just cut this out from here and paste this in twice and once we create an account then the results are quite great but now to actually verify this i'd like to show you the results from the gui that we use so we can go to here and we can basically refresh that out by pressing f5 and now you can see that we have a hashed password for the jsc 3 users so this is exactly what we wanted to achieve by using the getter and the setter to differentiate between what happens when we do each one of them all right so now that we have secured our passwords it is about time to start working on the way that we can log in our users now currently we will start by designing what is required to basically display a login page successfully to our users so it will mostly require the steps that we probably have done until now so we will create a login form within our forms.py and for sure we will set up a new route and we will create a separator template for that so let's go ahead and start working on this okay so i will go to our route dot py as you see i'm already here and we can basically start working on the same process like we have done to design our register page so i will zoom in here to make the font bigger so we will start by saying at app dot route and we want to send our users to forward slash login and we want to allow the methods of get and post like we have done in the register page so it will be get and then post like we did previously and then we can basically name it login page and we can go inside our function now i want this to be more centralized so excuse me for pressing enter a lot of time and now in here we will just start by returning a render template and we will send our users to login.html like that okay so let's go ahead and create this template as we did not create it yet so it will be just as easy as going here and create the html file and we will name it login we will delete the autogenerated html now i will rely on the register.html to kind of help us a little bit so i will open the register.html and i will copy everything from here and i will paste this in in the login.html and now i want to delete everything that is under our body text so i will just minimize the div class container and i will just delete everything that is right here and there we go we only left with the body so i will also change that to login page it makes a lot of sense and i will test our results out so we will go to our website and we will go to slash login and you can see that we are inside a blank new page so everything works well now if you remember in the navigation bar as you see the register works because i clicked on it but the login page is not working so let's go ahead and fix that quickly so i will go to our pycharm and it should be inside our base.html and we should go down and we should identify this line in the login style so this is right here and we can basically copy the url underscore 4. so you should already be familiar with this function and we should paste this in right here in the href of the login and we should change this to login underscore page because this is the name of our route so now that we have done this we can test the changes from clicking here and let's refresh the page to changes to take effect so i will go to home i will click login and you can see that everything works fine okay so once we have done that then let's start working on our forms so it makes sense to go to our forms dot py and basically create one new form like we did for the registration so it will be as easy as going to our forums dot py and start working on a new class but this time we are not going to create all the fields like in here basically to log in our users we only require to have username and the password and for sure the submit field to take some actions so i will go down here and i will start creating a new class so it will be class login form and this will inherit from the flask form as well and we will go inside our login form and we will start saying username equals to string field and the label that we're going to give here is going to be just user name like that and the only validation that i like to create here is the data required so i will say validators equals to a new list and inside that i will initialize the data required and i will close the instance of this class by adding parentheses now the same approach will go for the password as well so i will allow myself to copy everything from the username and paste this in and change this to password and change this string field to password fill and change the label to password and delete the name and this is fine to leave it in here and the last action will be to submit so now i will also allow myself to copy that from the registration form and paste this in and the label for that will be something like sign in and this should be fine for creating our login form okay so once we have done that let's go ahead to our routes.py and create an instance of this login form so i will start first by importing it right here in the market.forms line so i will say login form and i will go here and right before our render template i will say form equals to login form and i will close the parentheses and now i can basically use here form equals to form exactly like we do in the registration page as well so once we have sent the information of the form then it is a great idea to go to our login.html and customize this html page now again since we pretty much implemented this html logic in our registration form and actually to save us a little bit of time then i already have created this form html tag so you can find this code snippet in my website by easily going to part 11 of the flask series and search for a code snippet that is going to be named login form and also make sure that you paste this in under the body class text center like we have in here and i'm going to paste the form tag and let's actually go over what is going on here so the first here is the div with class of container and if you remember this is responsible to centralize our information from being this wide to something like that okay so this is containing the information inside of it and here we have our form tag with the class of form dash sign in and right under it we have the hidden tag which is necessary for generating the csrf token so you should be familiar with this because we covered this in the registration part and in here we have a header with please login and an image with the logo of our website and in here we basically use the ginger syntax to grab the fields of username and the password and once we have done that then we have a breaker line that is separating our field from the next html information now right above the submit in here we have something new that we did not see before so this is the div and inside here we have a text do not have an account so i decided to create this just because to allow our users to go back easily to the register page if they don't have an account so you can identify this by seeing the href with the anchor tag and you can see that it leads our users to the url of register page so let's actually see this in action so i will go to our website and i will log in and now you can see that we have the username field and we have the password field and we also have the do not have an account and we have a button that says register now if i click on it then you can see that it leads us back to the register page now functionality like this could be also a lot nicer if we have implemented it in the register page so i'm going to do that just in a second so we will go to our python and we will easily grab this code snippet from here and we will paste this in inside our register.html so i just opened our register.html temporarily and i'm going to go as we did in the login page and i'm going to paste this in right above the forum dot submit and that time i will say already have an account like that and i will lead our users to login page and it makes totally sense to change the text in here as well so once we have done that then we will see the same result in the register page as well so if we click in here then you can see that it leads us back to login page okay so just to memorize what we have done until now well probably we want to complete the functionality of that sign in button because we don't do anything special when we click on the sign in and we want to throw some errors if there are some wrong information and we want to proceed our users to the market page when the login is successful so it is going to be a lot of stuff that we have to configure on our back side of the application so first of first we will start by installing the library that will allow us to manage our login system easily with flask so it will be basically going to our web application and saying here pip install flask underscore login and once i have done that then you can see that everything is fine and i can clean my screen and now we can continue to pycharm and start working on importing this library so the library itself is like a login manager for your entire application so it has to recognize which flask application you want to manage the login system with so this is why we are going to start importing it from the dunder init file so we will say from flask underscore login import login manager like that great and once we have done that then we can say right here login underscore manager equals to login manager so we will start an instance of that and we will pass the application as the argument so nothing is different than the sql alchemy or the pcrypt that we have done previously throughout this tutorial all right so once we have done this we are ready to work on our login route to really write the functionality of what happens when your clients are going to click on sign in so we will go to our routes dot py and we will navigate to our login underscore page and we are going to pretty much apply the same logic like we did in our register page so if you remember we used to call this conditional if formed validate on submit and then if this conditional hits true then we are going to take several actions so it might be a great idea to start with that okay so i will say in our login page so we will zoom in here and we will say if forum dot validate on submit now if you don't remember this actually runs two functions behind the scenes and the first is to validate that all the information is valid and it also going to hit this conditional when we click on that submit button that we have created for our login form so i will go inside our form and now we are ready to pretty much verify if our users have provided a great information so this means that when we put in some information like username and password there are going to be two important steps that we want to verify and the first will be if the user is exist and the second one if the user is exists then if the password is actually the correct password of that user so the implementation of that in python will be like the following so we can say attempted underscore user equals to user dot query dot get and we want to receive only one user object and in here i'm going to provide the data that is filled in the form so we will say form dot username dot data so again this entire statement is going to filter out the user by the provided username but if you remember in that case we should execute that dot first method to really grab the object of the user now if attempted user is none then we can say that the client is providing some wrong information about its username so we can write a conditional and say if attempted user and that will be enough to test out if this is filled with some information and not none now sorry for deleting that this is not enough to really log in our users because now we should check if the password matches the user that tries to sign in but if you remember we store our passwords as hash passwords so we kind of ask ourselves how we are going to check if the user from the form matches the user from the database so it is never going to be match because the password we store is a hash password and the password that the client fills in is a regular string of password so to overcome this we can basically use some functionality that we have inside the bcrip library that is going to help us to verify that the passwords are match so now i want to stop writing this conditional in here and go to our modules.py and start working on some function that could be accessible from each user object that is going to really help us to overcome the problem that i specified so i will go down here and i will zoom in a little bit so we can see better and i will start writing a function and we can say check password correction and this is going to receive the self as a parameter and also it is going to receive the attempted password to really grab the password that is filled in within the form so in here we can say if b crypt dot check password hash and now this function is going to accept two arguments it is going to first accept the password that is hashed and then the password that is going to be filled in from the form so we can put in here self.password hash and as the second argument we can say attempted password now this entire statement here is going to return true or false so if we actually hit this conditional we can return true and to actually make this a little bit more efficient we can do something like the following now since this entire statement here is going to return us true or false then we can basically avoid using the if statement in here and we can basically return whatever this statement is going to return so if i change this to return then basically what i'm saying is execute this function and return its value back when we call the check password collection so this is going to return us either true or false so once we have done that then basically we can go to our routes dot py now you can remember how the attempted user is going to be stored within a user object if this entire statement is going to return a user object or not so i can continue my conditional by saying and attempted user dot check password correction so basically i am calling the function that we excuse me the method that we wrote inside our user module and now i can close this in and if you remember this function received the attempted password as a parameter so we can say attempted password and i will continue on from here and we will say form dot password dot data and this should be enough to really write this long conditional now i'm going to write in this in splitted lines because it doesn't look a lot friendly so i can basically go with something like this and no not like that but we can divide that and that okay so now things look a lot better so this entire thing is actually a one long if statement but this is required because of the explanation that i made in the previous minutes okay so once we hit this conditional then we can really start logging our users now we are going to use a builtin function that is already existing inside the library that we installed previously so let's go ahead and import this in our routes dot py so we can say from flask underscore login import login underscore user and this should be enough for now we are going to import more stuff from this flask login in the future and i will scroll down back to our login page route and now we can call this function like that and we can provide as the argument the user object that we want to log in so it will be attempted user and this should be enough to really log in our users now we probably want to provide some extra information to our clients when they have logged in successfully so we could say flash so if you remember not flask but flash if you remember the flash is the builtin function that is going to help us to provide extra messages for our users when some important thing happens and we can type in a message like success and we can say you are logged in as and now we can really give the username that is logged in so we can turn this into a formatted swing and we can say attempted user dot username now again if we are going to hit this conditional then it means that the attempted user is not none so this is why i can access this attribute so it is fine doing this and once we have done that then we want to probably direct our users to the market page to start buying some products so it will be basically return redirect and we can call it and we can call the url underscore for builtin function and if you remember this function is going to receive as the argument the name of the route that you want to redirect your users so if you remember we have a route that we called market page so i will copy its name and paste it in over here and once we have done this then basically it is a great idea to really finish up what happens if we don't hit this long conditional in here so we want to write the else statement for that so i will say else and in that case i want to raise a message like this so we can say username and password are not match please try again something like that and i just remembered that i did not put in some categories to our flash messages so obviously we want to provide here category equals to success like that and this is for the conditional that we hit so if we were able to log in and this one should be category equals to danger so danger is what going to help us to display a red colored message because it is going to be translated in our base template if you remember to a danger message so this is why we have to provide this danger as it is okay so this should be enough to test for the first time if we can log in our users so we can go now to our web browser and we can refresh our login page but we did not verify if our website is running so we should go and execute python run.py and once we have done that then we can go to here and see some exception that i really wanted to see and so we can solve this together now this is actually a perfect example for an exception where you really want to carefully read what exception is about and provide some extra steps to really complete this login system successfully so you can see that it saves us exception missing user underscore loader or request underscore loader so we should refer to this documentation and see how it works so we will copy this and we will paste this in here and we can really start looking of what this documentation is about so we can see that there is some message that says how the flask login works and you can also see that we will need to provide a user loader callback to really make our flask application to understand that if we navigate from different pages when we are authenticated then each refresh there is a different request session that the flask application has to understand if the user is logged in or not so this is why we have this decorated function in here that needs to be executed every time we load some different page so we should copy this and paste this in inside our modules dot py and this is why i will grab this entire code from here and paste this in inside our modules dot py right here so once we have done that then it is also a great idea to import this login manager that i talked about so now you really can understand why we created this login manager instance in the beginning of this video so i have done this for this exact step that we should provide later on so i will go here and i will say login manager like that okay so before we continue i'd like to add a personal correction to that line because i remember myself when i developed the project that we are working on this tutorial then this wasn't the return statement so i'd like to change this a little bit to something like query dot get and in here we will convert the received user id to an integer before we really try to get this user so i will say user id right between the builtin in function and this should be enough now if i quickly go back to our documentation then we can also see some more instructions about how to make this login system to work now you can see that we have to provide some extra methods to our user module so you can see that we have to hard code this method that method and as well as those two in here so this really should mean that we have to go ahead and write those methods in our user model because this is what flask requires us to do but to really overcome this i already know a class that is already going to provide those methods to be accessible within our user model so what that means it means that we need to inherit from some additional class that this class will automatically include those methods so let's go ahead and see how we can do that so i will go back to our modules.py and i will say here so it will be from flask underscore login import user mix in now this class is going to include all the methods that we saw in the documentation and to really prove my point i will allow myself to go inside this class by pressing the combination of control b if you use visual code then this should be f12 or in any id you use just make sure how you can inspect to your classes so if we go here then you can see that this user mixing class already includes the is active is authenticated is anonymous and e and get id so this should be enough to inherit from this class in our user model so i will say here comma and i will write user mixing so this really saves us a lot of time to really go ahead and hard code some four methods that the flask asks us to do so it is enough to add it as an additional class that we want to inherit from okay so once we have done that then we can really go ahead and test for another time if we can log in our users so i will go to our terminal and check if our website is up and running and it is so it is a great idea to go back here and go to our homepage for a minute and now go back to our login and now we will try to login by the latest user that we created so it will be jc3 if i remember correctly and we can say the password as one to six because this was the password and now if i click on sign in then we receive this nontype object has no attribute first so this means that we wrote something wrong in our query.get inside our rouse.py and i think we should fix this by using some another method after the user.query so i will go here and we will close the mixins it is not necessary now and we will go to our routes.py now i will allow myself to ignore these warnings in here basically this happens because we inherited from some another class right now and it thinks that these arguments are now not accessible or something like that so i will ignore that because this is not going to affect the registration and the exception was in that line so i think we should change this to filter on the score by and one other wow another wrong thing that i have done here is i did not provide the key that i want to filter out from so excuse me really for mismatching the filter on the score by with the get function basically i'm doing this because it is working in another way in django the other framework of python so this should really be enough to go ahead and log in our users so let's test this out one more time okay we will go to home and we will click on login and we will right here jstree and we will try to sign in and you can see that now our user is logged in and we see this success message that we can also close when we want okay so the final customization left to really close this login system topic is really giving our navigation bar a little bit more styling because now our users is logged in so we really want to avoid to show the users the options of login and register and we probably want to show stuff like log out or some extra information that the current logged in user should see so let's go ahead and start doing this all right everyone so right now i'm inside our base.html that we have created for the template inheritance way a long time ago now i'm going to take a lot of changes in here because we want to differentiate between the options that we show to our users whether if they are logged in or not so to do this we can basically go down and we can start writing some conditions with the ginger syntax so for example we'd like to check if the user is logged in or not and if the user is logged in then we probably want to show another information rather than log in and register so let's go ahead and start implementing this so we always want to display this home and market options to our users so i will leave that and i will start writing a conditional right here so we will start saying so curly brackets and then presented sign and we will start writing and if condition if current underscore user now you might be confused how we can access this variable and what this is about so if i go to our router.py i said that this flask login is going to have a lot of builtin functions that is going to help throughout this session of creating the login system so this flask login includes a function that knows to grab the current user whether if the user is anonymous user or if it is actually a loggedin user so this is why i can access it from our base.html so i will say in base.html current user dot is underscore authenticated like that and if you remember this is a method that is arriving from the user mixing that we have inherited so now once i have done that then we will type in else like this and we will also say and if like that and now we can move our different nav elements between the if current user is authenticated and also some of them inside the else statement right here so if the user is authenticated then we probably don't want to display the login and the register navigation elements but if the user is not authenticated then we want to display them so it is a great idea to copy this entire thing from here actually to cut it and paste this in between the else statement right here so now i will fix the navigation i mean the indentation in here and this is great and once we have done that then we probably want to display a nice output like welcome and then comma and then write in the user's username and also we want to display one more element that will allow our users to log out now i'm going to configure the functionality of the logout very soon so don't worry about that okay so i will copy this entire thing from here and paste this in here and now we can work on customizing our navigation elements now if you remember this li tag is actually a one navigation so i can just delete one of them and as a beginner we can say here log out and i will just delete everything from the href and add here an aztec sign to really not send our users to anywhere if they click here because we don't have currently the functionality of the log out and the other thing that i want to do here is copying this again and paste this in over here and the next thing that i will provide here is something like the following so it will be welcome and we will add a comma and then we will use ginger syntax to refer to the username of the currently authenticated user so it will be user i mean current underscore user dot username and i think we can delete this href attribute from here so it really doesn't need this href attribute and this should be enough now the reason i left this in here is is because we are going to add an href in the future and this is never going to send our users to anywhere so i'm fine with this approach okay so i will go to our website and refresh it out and you can see that we receive here welcome jsc3 and we have the option of logout that doesn't send our users to anywhere so this is great now one other thing that i'd like to do here is adding the budget of our users in a nice colored way so i will allow myself to copy one of those in here and paste this in right above it and take some different actions in here so between our anchor tags we really want to delete this welcome message and we want to hit enter now if you remember from the very beginning of this tutorial i said that there are a lot of styling frameworks that does some job to really make our lives easier to import from some already designed styling now we also have one of those to use different icons now it could be a lot nicer if we will display an icon of a coins or something like that for our users so the user can really understand that this is his budget so we can do this by calling the i tag like this and we can say class equals to f a s f a dash coins and now we can say between those something like current underscore user dot budget because if you remember this is the attribute that returns back the budget of our users now i'd like to give this a little bit more styling now i also want to add some styling to our anchor tag so i will go here and i will say style equals to something like color equals to long green so i already know that this is a nice way to display the color of green and i also like to display this entire thing here between the anchor tags as a ball text so we can do that by font dash weight and column and we can say bold and this should be enough to really display some nice information to our users about their budget so we can go now to here and we can refresh and you can see that we have the icon of coins and we also have the number right here now i see that the aligning could be better in here so let's see what i have done wrong and i think this is the fact that i put the text between the eye tags so we should cut this from here and go down a line and locate it over here so this should be a little bit better now and now if i refresh our page then you can see that the aligning is quite great now we could also go here and display a comma if the budget is going to be higher than a thousand because this is not the standard way to really display a number so if we will have a user with a six digit of a budget then you will see a text like this so i will show you that here you will see a coin like this so we should write a function that is going to add a comma every time that we have larger than four digits and also it should be located from the fourth position starting from right so we can do this by going back to our project and we can go to our modules.py and we can write here some more property that is going to be responsible to display our budget a little bit more pretty so we can say add property in user and we can say here def prettier budget like that and we can receive the self as a parameter and the way that we can implement this is first of first check if the budget includes four digits or more so we can say if length of the string version of our self.budget is actually greater or equal to four now the logic implementation of this case is not going to be easy so i will allow myself currently to say pass here and i will also say else in here and if this is actually not greater or equal to 4 then i can basically return the value itself so this should be return and we will add the f for formatted string and we can say self dot budget and right after it we can add the dollar sign okay so i think i close this by mistake let's open it back and now i want to show you how we can really work on displaying comma only in the fourth position starting from the right so to explain this i will open our terminal and i will clean the screen and enter inside python okay so let's say that we have a number and we will call it p and this should be equal to 1000 and now i want to say that we should convert this into a string okay so this should return us a thousand with a single quotes right here and so now if i go here and index the character at the 3 position it will start counting from right till it reaches the index of three so this is minus one this is minus two and this is minus three so if i grab this then this gives us back the zero now i always want to add a comma only after we reach the third digit starting from the right so this is why i can go with something like the following so that time i will display the value of str p and then we will index it by 3 and then we add a column to really display all the elements right after the 3 position so this should be responsible to display all the zeros and so if we could say something like the following so for example let's give a right now and we can add a formatted string and we can wrap those with the curly brackets and now i can add a comma now you can see if i print a then we kind of starting to reach the behavior that we want to reach so once we reached this stage then we should look for a way to grab all the digits and we want to stop at the 3 position so this is also going to be a little bit complex but now i can say here so we will add more one more curly bracket and now we will call the strp again so pay attention where i am located in the terminal and now i can index this by the following statement so i could say give me all the digits from the beginning until 3 like that and now if i enter and hit a now you can see that it works for the 1000 itself now to prove my point i could basically overwrite the p by saying 1 000 like that i mean 100 000 and now we could call the exact same statement and print a now you can see that this works as well so this is why i can grab this code from here and copy that out and paste this in right here as a return function like that okay so after it we should change the self.budget with p so this should be something like that and now we can add a dollar sign right here so i know that this was a complex topic but i really wanted to show how i thought when i wanted to done such a task because you could probably pay attention that i prepared to show you how i developed this project and so this was one of the greatest challenges that i had to deal with so i really wanted to make this explanation okay so now we have this dynamic property that its name is prettier underscore budget so we should go back to our base.html and change this current user.budget to paying three tier underscore budget and once we have done this then we can go to our terminal and run our website by saying python run dot py and now our website is up and running and so now we could refresh this page and you could see that now we got the comma right here but this is great because this is going to be dynamic so in the future when i'm going to purchase some items then you could see that this comma is going to be disappeared because of the way that we implemented this property okay so till that point we were able to customize our login system successfully but currently if we press on that log out nothing happens so let's go ahead and start configuring this so the way that we are going to do this is by adding an additional route to our application and then this route will know to log out the logged in user and then we will finish it with redirecting our users back to homepage so we will open our pycharm here and actually i see that i'm inside my base.html and it might be a great idea to show you what i'm going to configure in the future so if you remember then we have this log out anchor tag and then inside here we are going to send our users to that url underscore for so actually if i'm on the base.html then i'm going to do that so i will zoom in and i will basically copy this from here and paste this in to here and i will change this to log out now you are probably asking yourself why you are using this url for logout page although you didn't create the route because now i'm going to create this route okay so we will go to our route dot py and we will go down here don't be don't get too much worried about that we said that this might occur because we inherited from some another class and that is fine so we will go down here and we will say at app.route and actually let's zoom in a little bit and we will send our users to slash log out like that and then we will say def log out underscore page and then inside of it we have to use a builtin function that is already inside the flask framework that will allow us to log out the current existing users so in order to do that i will scroll up here i will import the log out underscore user built in function from here and actually once we imported this then we can scroll down and use the function like log out underscore user and that is actually it okay so this will be enough to grab the current logged in user and log it out okay so this should be enough and the next step is probably the flash message that we want to raise here because once we log out our users it totally makes sense to display a nice alert to our users so the user could be basically aware that he is logged out so we could say flash and then we could say you have been logged out like that and actually it is a better idea to send its category as info because it just looks nicer in blue when we log out users rather than just green color okay so this is actually an informative message that we want to display and it totally makes sense to redirect our users back to home page once the user is logged out okay so we will say return re direct and we will use the url for and we will say home underscore page now again the home underscore page comes from here okay so our users will come to here once they are logged out now we can actually save this out and already test this because if you remember we configured as well as the button of log out on our navigation bar so i will go to our website and i will refresh our website and it totally makes sense to check if it is up and running so we will do that so once our website is up and running and then you can see that our user is currently logged in and you can see it from this message now if i click on log out then you can see that we are back on our home page and then there is an informative message that says us you have been logged out so everything works perfect okay so i think that our customization about the market page is pretty much finished because now we have all our navigation elements functioning correctly but currently i'm not quite satisfied with how our home page looks like so it could have been a lot nicer if we had our logo on that home page and as well as a button that says get started or something like that now i already have an html code that is ready to display such an home page so let's go ahead and paste this in in our home.html and as usual you can grab this home snippet from our website only thing you will have to do is going to part 13 of my flask course from my website so let's go back to our pycharm and find the home.html template and actually i'm going to delete everything from here and i'm going to paste this in now let's have a quick look what is going on here now here we extend the base.html we already know how to do that and we also have the welcome to gymshare coding market message wrapped around the blog title because we want to customize our tab name and in the blog content we have some elements that customizing the image that we want to display if you remember this is our logo of our website and this is arriving from this big div tag now in here we also display some nice h1 text and inside here we have a paragraph that says start purchasing products by clicking the link below now the link below is this line so this line is an anchor tag with a button of class button dash primary you already know that from our previous episodes as we created this kind of button when we register or log in our users and you can see that it takes our users to the market page if they click on get started so this is actually something that should be pretty enough for the for the most basic home page for any website so if i save this and go back to our home.html and refresh that out then you can see that we have a nice home kind of a banner that really shows that this is our homepage now if i click on get started you can already see that it leads us to the market page thanks to that url for market page that is inside that angle tag now here we actually have some problem that you already maybe paid attention or not now you can see how currently the user that is using this website is not logged in so we probably ask ourselves if we want to take our users to the market page if the user is not logged in well i think that this is something that we can customize so we probably want to avoid from our users to see that page if they are not logged in so it totally makes sense if they are trying to click on get started and then it will lead them to the login page first and then if the login has been completed successfully then it will take them back to the market page like it's supposed to so we actually have a builtin function for that as well so let's go ahead to pycharm and see how we can use it okay so we will go to our pycharm and we will go inside our routes dot py and we will import this function that will be responsible to not take our users to that market page if the user is not logged in so it will be as easy as going to that from flask underscore login line and say login underscore required okay so once we import this then we can use it as a decorator now if you remember from the very beginning of this entire tutorial i said that the decorators are like functions that execute before the actual function itself so there is a reason why we put in app.route because we want to execute this functionality before we create the route itself so the same approach goes to login required we could actually use this function as a decorator right before our market underscore page route executes so it will be app.route slash market and then right after it we could basically say login underscore required so it will be something like okay we are going to that market page so this line executes and then this line executes so this line will be responsible to take our users automatically to the login page now let's actually see if only adding this line is enough to complete our functionality so i will save that file and i will go to our website and i will click on home and then i will click again on our get started and you can see that we receive an unauthorized message here that says us the server could not verify that you are authorized to access the url that is requested now this is fine but we would like to display the login page automatically if we require our users to log in before accessing this page so we actually have to say to our application where is that login page located so i can redirect the user that wants to log in so it totally makes sense because if you take a look in that login required decorator we actually do not provide any extra information about where it should send our users so to configure this up we should go to our underscore init.py file and we should specify to our login underscore manager where is the login route actually located so once we go down here and we say login underscore manager dot login underscore view equals to and this actually expects for the name as a string of our login route so if we take a look if you remember this is how we named our login route so i will copy the name of the function and i will paste this in between those double quotes so now that we have added this this should be enough to redirect our users to the login page before the market page so let's test this out okay i will go back to home and i will go to get started and now you can see that it already leads us to the login page now you could pay attention that it shows us the alert not in the nicest way but we will solve that in a minute but i actually want you to take a closer look to what's going on in the url bar in here now you can see that we see the slash login but we see a syntax of query with a question mark that says us that the next url from here will be market so you can understand this from this html expression in here so this means that everything is actually working properly now let's fix this alert in here so we probably want to specify to that login manager how we want to display a flashed message because when we use the builtin login required it automatically takes responsibility to flash a message so we want to give it a category so it can understand to display this in a blue color or something like that so i will go back to our dunder init file and right under this line i will say login manager dot login message category and you can already see that it is a builtin field that i can fill in so this will be equal to info because we probably want to display this in a blue color so once we save this then we can test this out again so we can go back to home and again click on get started and now you can see that it really works like we expect okay so we see our regular flashed messages like we used to see when we try to login log out or register okay so now i can basically try to log in with a random user that already exists so we will try to log in with that gst4 user and i will click on sign in and now everything is back and works properly so this is a really great addition to our website because this way our clients could not access this slash market page unless if they are logged in already now i'd also like to show you the behavior when we try to register to that website very quick so let's try to create an account with jc6 and we will specify a valid mail like that and we will type a basic password and now if we click on create account then you can see that it created this account and it already shows us that please login to access this page now you can see that it tries to lead the created account to the market page as well but it requires the currently registered user to login now it could have been a lot nicer if we raised a message that the user is created successfully and then already log in that user so this is something we probably wanted to do a lot earlier than right now but let's actually do that okay so we will go to pycharm and i'm already in my route dot py now i want you to take a look right in here so actually in the part that we try to redirect our users to the market page it could have been a lot nicer if we do those two things here so first we'd like to flash a new message and also we'd like to log in our users so we can already see the market page as a new user so i will grab those two lines from our login route so i will copy those and i will go back and paste this in right here now in the argument let's actually delete the entire message from here great now as the argument of the login user we could basically pass in the user object that is user to create so we can say user underscore 2 underscore great now if nothing goes wrong with those two lines then it means that the user has been created successfully so we can log in that user now once we do this then we can type in a message like the following so it will be let's write in a formatted string here and we can say account created successfully and we can say you are now logged in as and we can say user to create dot username like that okay so let's test this out with another user that we probably want to create now now i forgot to specify the category so excuse me for that and it is a great idea to actually go ahead and say category equals to success exactly like that okay so now we can go here and we can try to register again so we will create the jsc 7 that time and we will try to create the we will try to fill in valid information so we can click on create account and now you can see that we are already in the slash market and it saves us that we are logged in as jsc 7 so it is a lot better now because the new clients that are going to register to that website are going to have a lot better experience with this approach okay so if we take a closer look on how our market page is displayed to our users we'd actually like to change this display a little bit and the way that we want to do this probably a one way that we can do that is to divide this page into two main sections and then the first part of this page is going to be responsible to display the available items on the market and the other part is going to be responsible to show the items that i already purchased as a user from the market so it could have been a lot nicer if we had a division where we display all the items in the left pane and the purchase items in the right pane so it is going to be more focus page about the entire website itself so the way that we can do this is by grading system of the bootstrap styling framework so let's have a look in the bootstrap documentation so i will go to here and i'm inside the greeting system documentation of bootstrap now you can see that we have several examples how we can divide our page now i'd like to show this section in here so this section includes a div tag and it says that class equals to row now the grading system could be implemented the second that you create a div tag with a class of row because it is just as it is sounds because it is going to create a row that is going to be expanded to the entire page so we could grab the row that is created and we could customize the way that we'd like to divide it so the way that this could be divided is by creating some call tags i mean column inside this div class equals to row so the second that you see this and this this is going to be responsible to align our html pages in the following way so we could already start imagining this because in the call dash 8 area we are going to display the available items on our market and on the call dash 4 area we are going to display the purchased items so let's go ahead and start implementing this and if you did not understand what i explained then it is fine you probably will get it as we will start implementing this on our real website so i will allow myself to copy this code statement from here and paste this in right under our block content like that okay so let's fix the indentation a little bit and then we are good to go so the second that i do this then let's see the results what is going to look like so i will allow myself to refresh our website and then you can see the alignment okay this is exactly what we want so we are going to grab our entire table and we are going to locate it right where the call dash 8 starts so let's go back to our pycharm and actually i will allow myself to cut this entire table from here and paste this in under our call dash 8 div tag so we will delete this text from here and we will click on enter and we will basically paste our table now i know that the indentation is quite ugly but i'm going to fix that with a pretty fire just in a second so if we save that and go and see the results of that then you can see that this is perfect and this is exactly what we want because the available items are exactly on the left pane now we'd also like to give some spacing to that table so i will create some more styling elements to that row so our table will have a little bit more spacing starting from the left and also from the top so let's go back and do this so i will start writing right where our div class row is something like style equals to margin dash top then add a column and then we could say 20 pixels so we'd like to give a spacing of 20 pixels and we could do the exact same thing for margin dash left and we will say 20 pixels as well now this is going to be responsible to show the table i mean the division of the grading system in that way and i think this looks a lot cleaner right now okay so i said that we like to fix the indentation now you got a couple of ways to do that you can install some plugin to pycharm that is going to customize the annotation automatically for you but you could also basically search for an html prettifier in the web browser so it will be as easy as going to google chrome and search for something like html freetifier and we could go and click on the first result and we could grab our code and we could paste this in and we could click on format html and this will be responsible to already customize the indentation for us so you could click the copy to clipboard section and go back to pycharm and paste this back in and we are good to go okay so you got a lot of ways of how you can do this so i like this approach as well but you can definitely go ahead and install some plugin to your pycharm or if you use another idea like visual code there are a lot of plugins for those kind of stuff all right so let's continue implementing the logic of the buttons that we like to give their functionality now to avoid actually confusions and to remember for the future i like to give the call dash for name something else so we could say here owned items something like that and we call fix here the div tags like this as well so it will be easier to remember in the future that we like to implement here the owned items with some ginger syntax as well okay so if we scroll up here then you can see that we don't got any title that describes what the left pane is about so it could have been a lot nicer if we would go right above the table tag and we could write in some h2 tags for example and we will close those tags and we could say available items on the market something like that so it will be a lot easier for the users to catch up what the left pane of our page is about now further than that we could also add one more paragraph in here that says click on one of the items to start buying okay so something like that could be a nice secondary title as well and we should write here lower i so it makes a lot more sense and i'd actually like to add some more br tags in here to really see how it affects the entire page so let's see the result of that and you can totally see that it looks a lot cleaner on our eyes when we look at it we can really understand what the left pane is about and we could really do the exact same steps in the right pane where we'd like to display the owned items so we could basically go back to pycharm and copy those lines and paste this in right here so we could say in here let's change the text to own items like that and we could say click on cell item to put an item back on the market something like that okay so the results of that would be something like the following so i'm just thinking the indentation and if we go back to the market page then we can see that now the items page are totally fine and we could continue on implementing the logic behind those buttons okay so now i'm inside the bootstrap documentation again and i'd like to show you some of the nicest features that the bootstrap styling framework gives us so we have something in bootstrap that is called models now this is not the models like we see in the flask itself okay so models allows us to kind of display a nice new output to our users and it totally focuses us to really look at the new output that appears to us because it graze the entire background of the webpage so let's actually see a demo of that so we have this html code in here which is basically responsible to display the model that i'm talking about and basically this model could be configured as a behindthescenes functionality of what happens when we click on a button so when we click on launch demo model in here then you can see the result of that so this is exactly what we like to do when we want to display some more information about each one of our items and the exact same process is going to be like displaying an ensuring form if we are sure that we want to purchase that item so this is perfectly what we need for our website now the way that we can implement this on our site is probably the exact same steps like creating an html code that is quite similar to that and then we could connect our buttons with that modal now to actually save us a little bit of time i already customized a nice looking model for us so let's go ahead and see how we can do this on our itunes html okay so i'm back inside our market.html file now if you remember from the demonstration that we saw previously that the button and the modal element that was faded out are actually located in the same code snippet so what this means it means that the modal and the button itself should be located in the same html file but actually pasting the modal itself in this market.html file could be very confusing because it is going to be a lot of lines of html code in this market.html and this is just not organized and could lead to misunderstanding what each html code is responsible for so to avoid this we could locate our model in a separated html template and then this market.html could import this model that we want to create now the way that is going to be designed it is by creating one more directory that we will name it includes and within that includes directory that we are going to create we are going to create some html files that are going to be like helper files so we could import the code snippet from each one of them now let's go ahead and do that okay so i will go inside our templates directory and we will create a new directory and we will name it includes now once we have done that then we can create a html file inside that includes directory that we have created and we'd like to name it items underscore models like that and let's actually delete the autogenerated html from here and in here i'm going to paste the model that i talked about to really save us some time so if we paste this in then this is how the modal looks like when it comes to implementing this in html now i want to give a short overview about what this html code is about so you can see that we have this div tag and then we have a class that says modal fade so this is going to be faded and this is the identifier takes from here now we are going to use it in the future so this attribute is actually quite important for us and we can also see that we have some h5 tag inside our model content and i said that the title is actually goes here and we also see that we have a class with modal body and here we are going to display the actual information that we'd like to display in the body of the model okay so this is pretty much the important sections of what this model is about now the way that this could be imported in the market.html is by using the ginger syntax so if we go to here then we could basically import it let's say that we want to import this in here now we could say something like the following so i will zoom in a little bit and we could say include and we will open a single code here and then we want to give the location of that html file that we'd like to include so it is going to be includes four slash items underscore models dot html like that okay so once we have done this then it is basically going to use the code from here and located inside this market.html now to explain the next topic that i'm going to talk about i'd like to divide the display here so i will go to window and edit all tabs and select split vertically okay so in the left pane we have our items modals and in the right pane we have the market.html so let's zoom in here and as well as let's go here to the button of more info now if i now go to our web browser and refresh our page and click on more info then you can see that nothing happens and the reason that nothing happens it is basically because this button doesn't know which model it should trigger so we should specify some more attributes to that button so let's go to our pycharm and right in here so i'm going to scroll a bit and right where our more info button is i am going to specify some html attributes that are quite important for this trigger to work so i will say data dash toggle equals to modal like that and i'm going to scroll here a little bit more and zoom in so we can all see and right after it i'm also going to say data dash target equals to now the value that we'd like to give here is the exact same name of the identifier of the model that we'd like to display so this is why i said previously that this identifier string is going to be quite important for us in the future so i will allow myself to copy this entire string and paste this in right inside our data target now we should also include the hashtag sign to really specify correctly the target that is going to basically displayed when we click on that button okay so now we can allow ourselves to test this out so i will go to our page and if we refresh that out and click on more info then you can see that we can see our model and this is quite great now we can also see if we click on the other more info because it is implemented for both of the buttons now you could pay attention that the background of this model is white and we probably want to change it to really make it fit to our entire website so the way that we can do that is going to our items dot models which is right there and write in some more styling that will be responsible to customize the background color for the background color that we want so we will create some style tags and inside that style tags i will say dot model dash content and i will open a curly brackets in here and inside that i can say background color is going to be equal to the hexadecimal value of our background color so it will be two one two one two one like that okay so we can save this out and refresh our page with f5 now if the regular refresh doesn't work for you sometimes the combination of control f5 is a stronger refresh so it also loads the entire styling again so i recommend you to do that if the regular refresh is not working for you so i will do that as well and if i click now on more info then you can see that it is implemented correctly and we can also see the title unlike the previous result and the reason we did not see this before it is basically because the title color was also white so we could not see that and now it looks a lot better than the previous result all right so now i want to solve some important problem that we have on the website now i will open this from here and we want to display the button itself right here okay so if you paid attention in the website itself we saw that if we click on more info no matter which item is then we see the exact same information now we probably look for a way to change this behavior because we want to show different paragraphs for each of our items so what this means it means that our modals should be unique per item so the way that we can implement the logic that i talked about is by the following way so let's go back to our pycharm and see that okay so right here you can see that we have an iteration with a for loop that is right inside our market.html and this is why we see the different items now you can see that our button is targeting to the model more info so it is always going to pull that model itself and it is not going to be unique per item so the way that we can change this is changing the location of where we import that model and actually import it inside our for loop and that way we can customize it to be unique per item so let's go ahead and do that now i will make this market.html bigger for a second and i will grab the code snippet which is include includes items html and i will paste this in right inside our for loop like that okay so now i made the items on the score models a little bit bigger in here and the market is still on the right pane so now that i have completed this step basically what is happening here now is that we start our for loop and then we load our items models html and we do that for each item that we are iterating on so what that means it means that this items underscore modal html is having the access for the item object and i'm talking about this exact variable where my mouse is located at so what this means it means that we can refer to that item right inside our items model.html file so this is quite important because we want to turn our models to be unique per item so we will start by changing the identifier to something like dash and then we will call those ginger brackets and we can say item dash id now by doing this we basically give a unique id for each modal and now we could also do that for the title of our model so we probably want to display the title as the item's name so we could say item dot name like that and we could also say inside our modal body something like the following so we could say item dot description because if you remember we have a description field for each of our items and now this is great and we have completed the customization of the itunes underscore model now i'm going to work on the market.html and if you can remember our data target is now pointing to a wrong location because it should be the same as the identifier string of the model itself so now i will copy this out and i will paste this in like that and now that i have done this then basically we were able to achieve to create models that are unique per item so let's test the result of that okay i'm going to go to our browser and i'm going to refresh that out and now if i click on more info then you can see that we have the title as iphone 10 and we have the description that we have created for the iphone 10 now if i close this and click on more info in the second item then you can see that the title is changing and as well as the description so this is perfect because now we have models that are unique per item okay so now we know that when we click on more info that the result is great but the purchase this item is not configured yet now the entire process for the purchase this item is going to be quite same because all we have to do now is basically creating one new model that is going to be dedicated for purchasing an item and we probably want to display the same model pretty much and this is going to be like a verification model that asks the user if he is sure that he wants to purchase this item so it is also a good opportunity to really understand the entire process that we have done here so this is going to be just basically the same as what we have done with more info so let's go ahead and implement this as well so i will go back to our python and i will make the items models bigger a little bit and we will make the font smaller now you could pay attention that this is the code for the entire model so i can basically copy the exact same code and change the attributes that we have changed in the previous example as well so i will copy the entire code and i will paste this in right here now you can see that this gives us an error because it says us that we have a duplicate id reference now this is great because we probably want to avoid to having the same identifier string so this is why it makes a lot of sense to change this to something like purchase confirm like that and maybe in the title itself we'd like to leave it as the item underscore name but it makes totally sense to go inside our model body and give it here some different text so this could be something like are you sure you want to buy and then we could say item dot name and then we could continue this sentence by saying for and now we can add the price for that item so it will be item.price and if you remember it displays it just as the number itself so we could add a dollar sign and right after it we could include a question mark okay so it is important that we display this sentence in here and i think this is pretty much great for now and only we'd like to change the comment here to something like purchase confirm like that okay so now we have a new identifier that should be implemented for the green button that we have on our website so now we can create the market html bigger and we could change the values for this button so we should also create the same attributes like we did in the previous button as well so we could create data toggle equals to model like that and we could say data dash target equals to and here is again the exact location that i want to paste the value of the identifier so i will paste this in and make sure that you do the exact same thing as well so this is great and now i can save this and go to our website and if we refresh that out then we could basically try to click on purchase this item for iphone 10 and nothing happens so what we have missed let's see that the target okay good mistake so don't forget to add the hashtag sign as well it is quite important so we also have done that for the previous one so it is very important and now if we refresh this page and click on purchase this item then you can see the perfect result that we probably wanted to see so we see the title again and we see the sentence that says are you sure you want to buy iphone 10 for 800 so this is perfect okay this is actually the logic that we wanted to implement from the very beginning and on the next part we are also going to include some more buttons inside this model that are probably going to be responsible to actually buy this item so the close button only closes the model but we'd like to add some more buttons into that model and then if we click on that button then it will make sure that the process of purchasing is going to be implemented for that specific user all right so if we remember previously we wrote the model for purchasing an item now i said that this model is going to lead for an external form that is going to ask us if we are sure that we want to buy this item so to demonstrate that this is exactly what is happening when i click on purchase this item now we'd like to have here one more button that is going to confirm that we want to purchase it so to achieve this we have to create a form and then we have to create inside that form a submit field which is pretty much the exact same thing that we did in login and register but this time the action that we are going to take behind the scenes when we post a request is going to be quite different so let's see how we can do that okay so i will close this and we will go to here and the location that we have to put the form is going to be right here in items on the score of models so if we scroll down a bit then maybe under the question mark i mean the question itself that asks us if we want to buy this item for that amount of price we probably want to create a form so i will just start with creating the tags of it so it will be form and then we will say method equals to post like we did with the login and with the register system now i'm going to stop here and i'm going to create those forms in our forms.html so let's go ahead and see how we can do that so i will go to our forms.py and we will go to here and we will create two new classes now if you remember we said that we want to implement the selling process as well so it is going to be quite same so this is why i'm going to create here two forms so i will start by saying class purchase item form and this is going to inherit from flask form as well and the only thing that i like to create here for this stage will be submit field okay so it will be just the exact same line like we did in register or with login okay so this should be enough now i will scroll up a bit and we will change the label to purchase item okay so now i can copy this class and i could paste this in and we could change this to cell item form so this is something that i already create for the future and we could say cell item like that okay so i think we are done with the forms now there might be some other fields that we might create in the form html itself but actually creating the submit fields in the backend side is pretty much enough for me right now so now i have to send these forms as a context to our templates so if you remember if i open our routes.py then we can totally remember that we send our form instance as an information to our template so i'm going to do the exact same thing with the items.html but we will start first with sending the information of purchase item form okay so it is imported up top here and now i can go just in the first line of our app.route so i will zoom in a little bit and i can say purchase form equals to purchase item form and create an instance of that like this now if you pay attention then we already send the items as an information in this route so we could basically add a comma here and send one more information and we could say purchase form equals to purchase form like that and then this purchase form is going to be accessible from the items.html itself now once we save this then you could remember that this is sent to market.html sorry for saying items.html basically i refer to that html template so if i open the market.html then we have this include in here so what this means it means that we could access the purchase form variable within this template as well so we could go here and in here we could do the actions that i'd like to do right now okay so we said that the purchase underscore form is accessible from here now if you remember from the previous examples of login and register in order to perform a post request successfully we have to create this secure hidden tag that we always initialize so this is why i will go and write a code like the following and now i'd like to give this entire div a little bit nicer customization so to apply this maybe it is a greater idea to move this text here to an h4 tag or h3 track something like that so i just cut this text from here and i'm going to locate it inside our form so i will delete the line here and i will go down here and i will open a new h4 tag for example and we could paste the sentence back in here now we could also say style or class excuse me text dash center and it will centralize the text itself now it is also a great idea to write here even a smaller text than that and to centralize it as well by saying class equals to text center and we could continue on by saying by clicking purchase you will purchase this item so this is a great sentence to write here because the user can totally understand that there is no way to go back if he clicks on purchase this item button okay so once we have wrote those h4 and h6 tags then we can basically continue on with creating the submit field so if you remember the way that we can do that is by calling the ginger syntax and we could refer to that purchase form variable and we could initialize the submit field that we have created previously and now i can give it a class like class equals to and we could say here btn btnoutline dash success so it will give it a green color and we'd like to initialize the button block as well so the entire button will be expanded to the entire form okay so i think this should be enough for now and let's test the results of that okay so i will verify that our website is up and running and it is so it is great and now i can go back to my web browser and close this alert and refresh our page now if i click on purchase this item in here then we can see that we see this nice title and also we see the smaller text that says by clicking purchase you will purchase this item now i pay attention that it might be a great idea to throw some brs in here so we could throw a br in here and we could do the exact same thing in here okay so now let's test the results of that and i think now it looks a lot cleaner so let's continue from here okay so we do not do anything special when we click on purchase item right after we enter the modal so let's see what we have to do when we click on it so if we actually go to our pycharm then i am already inside the routes.py and you can see that we initialize this purchase underscore forum now regularly we would like to go with the approach that we have done for the login and the register forms as well so we probably want to run such a code which is going to be like purchase form dot validate on submit okay so it is going to be exactly the same thing but let's not forget the if statement in here so now everything works fine now before we actually continue on writing some more code within this conditional i'd like to show you how the purchase form looks like when we print it on the server side so if we actually go ahead and do only print purchase form when we click on purchase item let's see the results first so you can understand the following things that i'm going to do right after it okay so once we have done with this then it is a great idea to go to our website and make sure that it is up and running and maybe it might be a better idea if we restart it great okay so now i will refresh our page and now i will try to click on purchase this item and we receive method not allowed okay so we should add this as a method that are allowed in our decorator so we already know how to do that so let's just copy one from our register page so it will be copying from here and pasting in right there okay so now if we click on purchase this item then we are totally fine and now i want to show you the results of that on the server side now you can see here that we receive the object of the form itself and there's nothing surprising with that now i want to show you a little bit nice trick that we have in class instances and that is the attribute of underscore dict like that so this takes the entire instance and displays it in a nice dictionary so it will really give you a look of what are the keys and values that are available within this purchase form instance so once i save this and i go back to our web browser and let's try to click again on purchase item to really launch the sprint line and now i can go back to our terminal and we could see down here that we got some more information now if we search for the key of submit then you can see that we actually see the submit field as an object itself now this means that we have an available key within this instance so we could access it with a square brackets so we could go to here and we could delete this from here like that and we could say submit like a dictionary okay so it is fine to run such a code and now let's see the results of that again so i'm going to go and click on purchase this item and i'm going to go back to here and now you can see that this is actually translated to an html code so this means that we can pretty much implement the same html code hard coded inside our form and then this way we will have our custom form that is also going to be accessible within the route itself now let's see what i mean by that okay so let me grab this code snippet from here and go back to our items underscore models and right before the submit form in here i'm going to paste this in and customize this a little bit now you could remember that this ginger syntax is actually responsible to this ginger syntax because this is what we saw so i'm going to change this to being in id of purchased item and i'm also going to change this name to purchased item and then i'm going to change the type to hidden now when i do this hidden this means that this input is not going to be displayed within the form basically this is just a background information that we are going to consume in the back end of our application meaning in the route of market itself so this is why i put in here hidden now the value for that is going to be the item dot name and the reason i am doing this it is because the second that i click on purchase item i want to know which item the user tried to purchase so then we can continue on taking the action that we need to assign this item to that user so once we have done this then we can go back to our routes dot py and we can take some different actions in here now i'm going to change this code from here to something else and let's try to see what happen if we try to write in here purchased item now the reason i may think that this is going to work it is basically because in the submit field we were able to access it by the square brackets and type in submit as a string so if we create a field with the name of purchase item then why it won't be accessible so let's see the results of that now if i actually go to our website and try to click on purchase this item then we will end up with receiving key error now the reason for this it is because this purchase item is not going to be accessible within the form itself beside it is going to be accessible from an entire different area now as we know already there are a lot of request types that we create to actually manage this website so flask library gives us access to that builtin request object to really have a fully control of how the request object looks like every time that we create some requests like get or post so in that case we try to create a post request and then this means that the information about the purchased item is going to be available within the builtin request object so let's go ahead and import that okay i'm going to go to python and i'm going to go to that second line where from flask is and i'm going to import the builtin object that is request like that so now that i have done this basically i can allow myself to go down here and change this code to something like the following so it will be request dot form now the reason that i have this form attribute it is because the builtin request object already includes a lot of information about all the forms that are built in in the request itself so here i could say something like dot get and here i could access the value of the purchased item so now that i have done this then let's test the results of that okay so i'm going to save that file and i'm going to verify that our website is up and running and i'm going to try to go back to homepage and then go back to get started which is the market page and let's try to purchase the iphone 10 so i'm going to click on purchase item and once i have done that then you can see that we see the output of iphone 10 so that means that we have now fully controlled and we are aware which item our user tried to purchase so now we can continue on taking more actions from here alright so if you remember i said that we are going to fix the always being shown output about the form resubmission thing so if we actually go to here and we try to refresh this page then we always will end up with receiving this message from javascript that says us that you are in the middle of form submission so to avoid this we actually have to get rid of the conditional form.validate on submit because the reason this popup shows here it is because every time that we go inside this route then it tries to submit some form that executes and the reason is because we don't differentiate between get request to post request but now that we have fully control of the request object we can differentiate between those request types so let's go ahead and do that okay so i'm going to cancel this and i'm going to go to pycharm actually i'm going to cut this code snippet from here so we can copy this back later on and i'm going to delete this entire conditional and now we can change this to something like the following which is going to be look like if request dot method equals to post like that so this is pretty much equal to form.validate on submit but again this is going to avoid displaying the output that we saw about form resubmission so now i can basically go with something like purchased underscore item equals to and i'm going to paste back in the code that i cut previously so it is going to be equal to request.form dot get purchased item like that and once we have done this then we can continue on and we can try to filter the item object based on the value of purchased item so we could say let's actually write this in a shortened version so i will say p underscore item underscore object like that and we could make this to be equal to item dot query dot filter underscore by and we'd like to filter by its name so it will be name equals to purchased item like that now if you remember i know it is been a long time ago since we applied this but to actually inspect into the object of the item we have to execute this dot first method so we will really have fully access to the purchased item object now okay so now that we have done this it is a great idea to verify that this object is not none before we continue on and before we continue and take some more actions so i'm going to say if p item object and then enter this conditional and now once we have this p item object we'd like to assign an ownership to the user that is currently logged in now we did not see this before but we have a builtin object that is always going to refer to the current logged in user object so the way that we can import this is going to be as easy as going up top here and import from flask login the current user built in object so make sure to do that like i did as well and now i could basically access each user field like we have in our user modules okay so now we should remember how we can assign an ownership to a specific user so let's go ahead and remember that now i'm going to go inside my modules dot py and i'm going to show you the item module which is right here and if you remember for each item object we have the option to assign an owner feel to it so in that stage we can assign the owner field to the item object that we have filtered out by using the filter underscore by function just a minute ago so we could basically go back to here and say p underscore item underscore object dot owner equals to and then i can basically refer to that current user object that we have imported and now to assign the ownership successfully i have to put in the id of the current user so it will be dot id like that and if you're confused by that line it is mainly because in modules.py we gave the foreign key of user.id so our database expects for the id of the user that we are going to give the ownership to it so i'm going to go back to our routes dot py and in that stage it is not enough to leave it as it is because in real life when you purchase some item it makes great sense to decrease the amount of the budget of the current user so the way that we can do that is by easily decreasing the budget of the user by basically subtracting the current budget by the items price itself so it will be something like the following so i can say current underscore user dot budget minus equals to the p underscore item object and then we could basically say dot price like that and once we have done such a change we need to execute that db.session dot commit line to really perform a save operation towards our database and this should be pretty much enough to really writing the algorithm of how a user can purchase some item okay so let's test this out so i'm going to go to our website and i'm going to refresh to home page and before that let's make sure that our website is up and running great so now i can go to our website and we can try to purchase the iphone 10 now the next thing that i expect to happen is to really see again the market page but now i should see the budget of 2 200 so if i click on purchase this item and let's actually see the result okay so we see that two hundred dollars and this is perfect now i know that there are a lot of steps that we have to complete here and first of them is to actually remove now this iphone 10 from here now the way that we can do this is displaying the items that their owner is none only so let's see what i mean by that so i'm going to go to our pycharm and let's zoom out a little bit so we can see what is going on here and i'm talking about the line that is responsible to send as context to our market.html so if you pay attention right here in the item query dot all here is our mistake now we'd like to filter those items by owner equals to none because it makes sense to display those items in available items section only if they don't have an owner so this is why we should change this line to something like item dot query dot filter underscore by and we should filter by owner equals to none all right so now that we have changed this in the next reload we should expect to not see the item that i purchased so if you remember i purchased actually the iphone 10 and now if i actually refresh this page we again see that resubmission output but don't worry we said that we want to totally differentiate between get to post request and we did not write in a conditional that is looking like equals to get so this is why we still see this message so don't worry about that and let's actually go back to home and then we could go to market now you can see that we only have one item that is available on market now one more thing that we'd like to implement here is to basically display a message that we purchased some item so we could flash a success message or something like that so let's go ahead and fix this so once we commit our changes we could say flash and we could raise a message like congratulations you purchased and now we could refer to the variable of the item name by changing this to formatted string and we could say p item object dot name you purchased item object.name for and we could specify the price of the item itself so we could say p item object again and we could refer to that price attribute so this should be great to really flash the message itself now i said that we should fix the resubmission output that we see always so let's go ahead and fix that and the way that we can fix this is as easy as going down here and to conditional this up like if request dot method equals to get and then we could basically execute those lines only if the request type is get and this should be enough to really not see that confirm resubmission output that we see always so if we want to verify that then we could now refresh the page and you can see that now it is totally fine and it works correctly and we don't see that from resubmission output okay so now we are going to continue on to adding some more security layers in here and now think about it if i am going to click ahead to that purchase this item then it will probably end up purchasing it because we don't have any logic implemented that says if the budget is actually not greater than the item object price then raise an error we don't have a logic like that so this is why we should write some logic to prevent from our users to have the ability to purchase an item that their budget is not enough for it so this is why we should write some more python code so i'm going to go here and now we could basically imagine a code that is going to say something like if current user can purchase okay so executing a conditional before we actually assign the ownership could be something really great and amazing so this is why what we could do in that case is writing some function in our user model that is going to receive the item object as an argument and we could really verify that if the user's budget is not greater than the item object price itself then we should prevent from them to purchase this item so this is why i'm actually going to remain this code in here but you could guess that we don't have such a method yet but let's go ahead and create it so i'm going to go inside our modules dot py and i'm going to scroll up to our users and we could write some more functions i mean methods in here so we could say def can purchase like we wrote in the routes dot py and i'm going to receive as an argument item object so it will be item underscore obj something like that and we could basically return self dot budget greater or equal than item object dot price so by doing this i am returning a boolean value that is basically going to return true or false and this step is going to really verify that the user could purchase this item so once we have this in here then it is a great idea to go to our routes dot p y and this now needs an argument so the argument is for sure going to be the p item object like that and this should be enough to really verify that our users could purchase this item so now if we don't hit this conditional then it quite makes sense to go here in else statement and raise one more flash message that is going to say let's actually scroll up a bit before we write this message and we could basically say unfold through nately you don't have enough money to purchase and let's actually refer to the object itself in here and we should change this to formatted string and now we could say p item object dot name like that and now we should add some categories to both of these flash messages so here we should say category equals to danger and up top it is obvious that we should say category equals to success like that okay so now that we have completed this there's one more step that we have to complete before we really test this out now pay attention to the following code that we have in app.route so we have request method equals to post and we execute some lines of code and we have request method equals to get and we execute some lines of code but if you pay attention we don't send our users to anywhere right after the post request completes so this is why we should decide where we want to send our users once the entire conditional of if request dot method equals to post finishes so it totally makes sense to grab the indentation in here and redirect our users back to this exact route so the user could really continue on purchasing some items so i'm going to say here return redirect and i'm going to launch the url underscore for builtin function and i'm going to write here market underscore page okay so this really should be enough to test the entire flow so i'm going to verify that our website is up and running and it is and now i can refresh our website and now we should expect for a red colored message if we try to purchase the laptop because we only have 200 left so if we click on purchase item then you can see that we receive this output that says unfortunately you don't have enough money to purchase laptop we could add an explanation mark two here to really make it nicer but the point is it works and this looks great and we actually completed the entire process of how we can assign an item to a user that is logged in okay so one more thing that i'd like to do before we close out this topic is to moving those three lines of code into being a method inside our item model so if you imagine a situation it could have been a lot nicer if we don't have those three lines of code and besides that we could have a code that is going to look like p item object dot assign ownership something like that or basically this could also be dot by okay so anything that you like will do so let's go ahead and do this okay so i'm going to undo here several times to really not ruin things out in here and we are going to create an additional method inside our items model and this will be responsible to turn the entire flow of this items route to a lot nicer so i am going to go to our modules.py and i am going to create a method this time in the item module itself because now we should assign an ownership to a specific user so it is going to be something like the following so we could say def by and we could receive a parameter that we will name it user and the lines of code that i'm going to be executed in here is pretty much going to be the same as in routes.py besides we are going to change the p item object to self so i'm going to cut this out from here and i'm going to paste this in under by and every place that we see p item object is going to be changed to self so for that and for that we should change to self and for the user we should replace those with the user that we are going to fill in as an argument so now that we have this method which we name it by we could basically execute it by only going here and say p underscore item object dot by and we only have to pass in the current user object so it will be just typing in here current user and we pretty much done with the entire process okay so now to actually test this out we have to create a new user because it will save us some time because the jsc 6 user is having currently 200 and we'd like to test this with a new user that is going to have as default 1 000 so we could log out for a minute and you can see that we see this informative message which is perfect and we could register with a new user so i think this will be jc8 that time and we could put in some valid information and we called create the account okay so we are inside the market page and now we only want to test if this change and moving the code to model.py is going to work for us so i'm going to click on purchase item and now you can see that we see this message that we see you purchase laptop for 1 000 and i see that we forgot the dollar sign in here and now you can see that we don't have any items remaining in this available items on the market section so this is perfect and the budget is updated as well to zero dollars so really the entire flow is starting to work and this is perfect only i will just change this message to being with a dollar sign and this is going to be as easy as adding it in here and this is now perfect all right everyone so i'm currently logged in with the latest user that we have created which its name is jsc8 and if you remember with this user we purchased an item that its price was one thousand dollars and this is why our budget is zero over here now to really show you how we should display the owned items for a specific user i am showing you our page because i imagine that we could basically create some bootstrap cards and by saying cards i mean like a nice looking square shapes where we will display the old items that the user has and each of those cards will include some buttons that says sell this item so let's go ahead and start working on this but first of first we should be able to query all the items that the current user owns so this is why i will go to my pycharm and i will start by going to routes dot p y and if you remember we have this builtin object that says current user and it knows how to identify the object of the user that is currently logged in so we could write a query that basically filters out the items that the current user owns so let's go ahead and do this right under our market page route but it totally makes sense to write such a filtration under the if request dot method equals to get conditional so i will go here and i will say something like owned underscore items equals to item dot query dot filter underscore by and as the expression in here i will say owner equals to username dot id i mean current user dot id okay so the reason i'm doing id because if you remember from the db relationship that we created we mark the relation between item and the user by its identifying number so this is why i can allow myself to filter this out by current user dot id and this should be enough to bring all the items that the current user owns them so now i will pass this as a context by saying owned underscore items equals to owned items like that okay so this really should be enough to go now to our market.html and start working on the implementation of how we want to display this okay so if you remember we have this call dash 8 which displays available items on the market and right here we have div class 4 which is basically designed for displaying the items that the current user owns them now in here i can write some nice html code to really start working on the way that i want to design this so we can say div class equals to row and you will see in a second why i'm creating one more row under this column and i can now start writing the iteration that we'd like to do probably so we could say for owned item in own underscore items and we could close our expression like that and right here i will say div class equals to call dash md6 okay so i will stop here and really explain why i did what i did okay so by purpose we want to declare this as 6 because if you remember from the previous session that we created div class equals to row div element we implemented the reading system of bootstrap and the maximum size that you can locate an html element within a row is only 12. so this is why if i create six and there is more than two items then each two items it has to force itself to jump down a row and it looks nice if you display only two cards in a single row so this is why i implemented this in that way okay so right between those div tags i'd like to paste some html code that will be responsible to create those bootstrap cards that i talked about now you can find the code that i'm going to paste it in in my official website so just navigate to the episode 16 of this entire tutorial okay so i will paste this in in here and explain what is going on here as well so we have one more div tag that says card text center and bg dark so nothing really complex in here and right after it we have the card body class and right after this we have some class to display car title so we could imagine that this code is responsible to display probably in the up top of the card and the button is basically made for the option to sell the item that the current user owns and you can see the data toggle and data target as well and you should be familiar with this if you watch the last episode and here we have some paragraph that says additional text so we could edit this by displaying some more text about this item okay so if i save this file and go back to our website and refresh that out then you can see what the code that we wrote is responsible for and you can see that this is a really nice card that displays the item that the user owns now you can see that there are a lot of placeholders that we have to change them so the way that we can change them is easily by going here and edit the text that we should edit them okay so in the card title we probably want to display the item's name so it will be by accessing the variable block of jinja and we could say owned item and this is actually accessible because of this for loop and we could refer to the attribute of name of this item and by doing this this will be responsible to display laptop besides the placeholder that we saw previously and we could leave the cell this item because this is the actual purpose of the button and in the additional text we could basically give a nice informative sentence that says something like the following so this could be this item costs and then we could refer to the price attribute so it will be owned item dot price and we could add a dollar sign right here and by doing this you can already guess that this is going to display the following line so now things are looking a lot cleaner and you can already see that if there is going to be more than two items in here so this card would be located in here and then the third card will have to force itself to locate in here so this is why i went with the following approach okay so from now each step that i will be configuring will be basically the same as we did for purchasing an item so if you remember in the last episode we also created in forms.py a form for cell item form as well so this is why i'd like to create an instance of that and send it as a context to the route.py as well so it will be by going here and say selling form equals to cell item form and this is probably not up top here as the import line so we could say sell item form like that and this selling form should be sent as context to the market.html as well so down here we could send this like selling underscore form equals to selling underscore form like that now if you remember when we implemented the purchasing item we search for request.form dot get purchased underscore item because this was a reference to an input that its name was purchased item so we will go back to this route dot py to really write python code to perform action like for selling the item itself okay so this should be enough for now in the routes.py and now let's go ahead to our market.html and create a model for selling an item like we did for purchasing so i will open our market.html and i will also show you a kind reminder that in order to display a purchasing item modal we created this items underscore models html page now to really have a nice separation between selling and purchasing i'd like to create one more html file that we called name it something like owned items models like that and we could delete the auto generated html and like i said because the logic implementation is going to be quite the same i can allow myself to grab the exact same model from the purchasing item model and later on we could change some of the identifier strings or html text to make it dedicated for selling an item okay so i will go to items underscore models and i will copy the entire code under the purchase confirm and i will paste this in here and if you remember we had some special style for this model as well so i will grab the style tags and paste this in as a first line okay so now this is some dirty job but we have to do it okay so let's go over the areas that we have to change from purchasing to selling or sell or something in that kind okay so you could already notice that we have an identifier that says model purchase confirms so we could change this to selling confirm like that and we can also change the comment in here to make it nicer and if i scroll down a bit then i think it is okay to leave the item name like that and now in here you can see that there is a reference to an hidden tag that comes from purchase form and if you remember we also initialized the selling form as well so we could change this to that and now here we have a sentence that says are sure you want to buy so we can say change this to sell and in here we could say by clicking sell you will put this item back on market like that now you can already see the input inside this model as well and you can see that it has an identifier that says purchased item so it totally makes sense to change this to sold item okay so we created this in past tense so we will leave it as it is and this will be sold item as well and we'd like to keep this in hidden and the value as the same so again we have this purchase form here and this has to be selling form and besides doing this success we'd like to do is danger to really differentiate between the different actions so one will be green and the ceiling will be red okay so the close button that is here we could leave it as it is and that will be pretty much it now if you remember to trigger a model we have to trigger this identifier in here so i will allow myself to copy this statement and to really start working on two separated windows to not confuse us so we could really understand the further changes that we make from this point so i will split our panes and this will be by window editor tabs and we like to do this split vertically and in the left pane we will keep the owned items models and in the right pane we will open the not the items model excuse me we will open market.html okay so from here we are good to go and let's scroll down a bit in here and you can see that we have under call for some more things that we'd like to change in here so we have this button right and this button is actually what responsible to trigger sell this item model and if you paid attention we have here a data target that says your data target now this should be changed to something that is related with the owned item variable to really have a unique model per item so this is why i will make the owned items modal a little bit bigger and i will change this to owned underscore item like that and we should probably change all of those for all the places that we see item to owned item so i will do that just in a minute and that will be in here and as well as in here and also in here and let's catch up if we have more of that so to really make our lives easier in here we could basically search for item and we could pay attention that every item is with owned item right now so we are good to go from here and now i can really copy this identifier string and copy that out and now i will make the market.html bigger and we could paste this in right in here like that and this should be pretty much enough to really see the model itself when we want to sell an item so now i can go to our website and we could refresh it and if we click on sell this item nothing happens and this really means that we probably forgot something important and this is why i will focus for a minute in what is going on in market.html and have a look in here so in here we start our iteration and yeah we i think it is because we did not trigger this include line so if you remember to really trigger the model itself it should be recognized as an html code in the exact same page so this is why in each iteration we have to use this include in order to really have the model implemented inside the for loop so each item will trigger a separated model regarding the information inside of it so this is why i could go with something like this we could grab the code from here and we could paste this in right under the for loop and we should change this to owned underscore like that because we want to import the models html that we have just now created now i want to have a look in owned items models to really ensure that we don't have any leftovers with the owned underscore item because we iterate over a different variable name so here we are good and here we go as well and as well as in here and if we take a look in the input okay here we should also change this to own underscore item as well so i have a really nice trick that you can do for such a scenario where you want to make sure that you replace all the variables with something so you can basically use the control f and search for a specific text in your entire page now if i search for double curly brackets and item then you can see that we are good to go and nothing really exists with this expression so we could now go to our page and refresh it out and test if this works and you can see that the result is quite great now we see the title in here and we see this sentence and this button currently will not do anything because we did not configure the functionality of this button so let's go ahead and do that okay so in the left pane we have our route dot py and in the right pane we will work on some html code to display some differences now if you remember the way that we grab the item that was attempted for purchasing in the previous sessions was by going to here and say request dot form dot get and then we use the name of the input itself so this really came from this name attribute of this specific input now if we take a look in owned on underscore items dot model so i will put it in here then we have an input with a name sold underscore item so basically what we could do in route dot py we could really implement the same logic for selling the item like we did in purchasing it so i will close those and start working on the way that this should be implemented okay so we could go after the if expression in here and start working on the area what happens if the user wants to sell the item so to really differentiate between those i'd like to add a comment here that says purchase item logic and down here we could say cell item logic like that okay so we can say here sold underscore item equals to request dot form dot get and right here we could say sold underscore item now pay attention how i am keeping the same logic like in purchase okay so once we have this sold item then we probably want to grab the object of the item itself because in here we only try to get the items value itself so we could say s underscore item underscore object equals to item dot query dot filter underscore by and we could say name equals to sold underscore item and we could hit the dot first method in here now like in previous sessions if this item object is going to be not null then we can really start working on assigning this item to no one so we could go ahead and say if s underscore item underscore object and hit the column sign and enter this conditional all right so now we probably want to look to execute some method that will ensure that the logged in user is really have an ownership on this item so the way that we can do this is by creating a method in the user module we could name it can underscore cell and the can underscore cell will return a boolean variable true or false that will basically explain if the user has this item for real so this will be by saying something like if current user that can underscore cell and we call pass the item object in here now i know that we don't have this method but this is just in theory so we can really understand the idea of how i'm going to implement this now again you could pay attention how this is quite equal to what we did for purchasing the item itself so if you remember if we press here control b then this can purchase returns a boolean variable that basically ensures that the user can purchase this item so by creating a method that will say def can sell and this will receive the item object one more time like that we could really verify in here that the user really owns this item and the way that we can do this is by the following expression now if you remember up top here we have these items which is basically responsible to be a reference for all the items that this user owns so we could say return item underscore object in self dot items and this should be really enough to return us true or false because if this item object is in self dot items then it means that the user really owns this item and he can sell it so we could go back to here and if we hit this conditional again this is going to be the same approach like we did in item purchasing so here we called execute again in theory something like s item object dot cell and we again like to pass in here the current user object for this method and this cell should do the exact opposite action from the buy method so if we inspect inside buy then you could see that first or first we assigned a new owner and then we decrease the budget and then we executed the tb.session.comit so the exact opposite of this method would be def cell and we could receive the user object as a parameter and we could say self dot owner equals to none so this is the exact opposite action of assigning an ownership we assign the ownership to nobody so we could say here again user dot budget and you could already guess what i'm going to do here this time beside minus equals this will be plus equals because we want to give the money back and this will be again for sure self.price and again we can say here db.session.com it like that okay so as we have done that we can continue on the logic implementation so i can go back to our routes dot py and after we perform this action we could grab the flash from the conditional of purchasing and paste this in here and we could change this a little bit so we could say congratulations you sold s item object dot name back to market and i think this should be enough okay back to market and we could add an explanation mark and we could delete this and we forgot to close the double quotes in here and so this should be enough and we will leave the category success as it is okay so let's scroll left in here and go down now if the user could not sell this item then we probably want to raise a flash message that something went wrong and the user does not really own this item so we could say else and we could grab this from here and paste this in and we called say in general something went wrong with selling and we could refer to s item object dot name and we could leave the category equals to danger as it is all right so i think we are ready to test this out now i hope that the actions that we have taken in the last minutes made a lot of sense for you because the selling implementation is pretty much the same like purchasing it so this is why you saw a lot of copying and pasting stuff so i hope that you understood everything pretty much clear because from this point if the selling item works properly then it means that we finished everything with this website so let's go ahead and see if this works great so i will refresh our page and we can now click on sell this item and once i click on sell this item then you can see that everything is pretty much working and we see congratulations you sold laptop back to market and you can see that we have a new one thousand dollars and you can also see that the available items on the market is really updated with the information that it's supposed to so this really means that the selling logic implementation is working perfect as well alright everyone so i think this will close out our episode and like i said in the beginning the feedback of how this series was for you is really important for me so i can really know what i should improve in the next series that i will be creating in the future and i will be creating one more episode that will basically explain in general how you can deploy a flask application to production but this is not going to be specifically for this website basically i will be creating a general video that will help everybody with their flask projects how they can deploy it on production alright so if you like this video please hit the like button and also consider subscribing to my channel if you already did not and i will see you very soon
