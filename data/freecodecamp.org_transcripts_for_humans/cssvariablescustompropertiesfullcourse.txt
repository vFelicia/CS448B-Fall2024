With timestamps:

00:03 - hey there and welcome to this course on
00:06 - css variables
00:08 - so why do you want to learn css
00:10 - variables well first of all because in
00:12 - css you very often end up in situations
00:14 - like this where you have for example a
00:17 - main red color throughout your app which
00:19 - you are using at multiple places and the
00:21 - old way of doing that would simply be to
00:23 - reuse the same hexadecimal value like
00:26 - that however with css variables you're
00:28 - able to declare it as a variable first
00:33 - and then use that variable wherever you
00:35 - want later on the obvious benefit here
00:37 - is that now you can simply update this
00:40 - value here and these two will be
00:42 - automatically updated and also
00:44 - semantically it makes more sense
00:47 - it's easier to see that yeah this title
00:49 - is red
00:50 - than it is to see that this title here
00:52 - is red unless you can parse hexadecimal
00:55 - values quickly in your head
00:59 - and some of you might say that well i've
01:01 - had less and sas variables for years so
01:04 - what's new with css variables well first
01:06 - of all it's easier to get started this
01:08 - is native to the browser so you need no
01:10 - transpiling which is pretty nice
01:12 - secondly css variables have access to
01:14 - the dom so you can create local scopes
01:18 - meaning css variables that only work in
01:20 - a certain section of your app for
01:21 - example you can also change the
01:23 - variables with javascript which is
01:25 - really handy for example if you want to
01:27 - enable your users to
01:28 - let's say change the font size of your
01:30 - page and it's also ideal for
01:32 - responsiveness as you can change
01:34 - variables for example based upon media
01:35 - queries and neither of these use cases
01:37 - which i'll show you later would be
01:39 - possible with less and sass
01:41 - and finally as we'll see it's perfect
01:43 - for themes
01:44 - and by that i don't necessarily mean
01:46 - themes as in your website visitors being
01:49 - able to change the layout with component
01:52 - specific themes for example for items
01:54 - which you want to change a little bit
01:55 - could be a product after it has been
01:58 - added to a shopping cart or an or an
02:00 - article you want to feature or whatever
02:02 - basically it's a very common use case
02:03 - and css variables make it really easy
02:06 - and throughout this course you'll become
02:08 - a css variables master in eight
02:10 - screencasts they're pretty quick i
02:12 - explain my goal with this course is to
02:14 - get you up to speed as quickly as
02:16 - possible there are also some interactive
02:18 - challenges or i will at least challenge
02:20 - you to jump into the code and perform
02:22 - tasks in some of the costs and there's a
02:24 - q a section in each of the costs so feel
02:26 - free to ask questions there and i will
02:28 - try to reply as best as i can or
02:30 - sometimes other people actually also
02:31 - reply
02:33 - and that's great
02:34 - if you see a question and you know the
02:35 - answer feel free to help other people
02:37 - out as that's great for your karma
02:40 - finally this is me i'm a front-end
02:42 - developer and a co-founder of this site
02:44 - scrimba you can reach out to me via
02:46 - twitter if you want or feel free to join
02:49 - our gear chat room if you have any
02:50 - comments or questions
02:53 - so finally
02:54 - this is the project we'll be working on
02:56 - throughout this course so you'll get
02:58 - very familiar with this here is the
03:00 - markup
03:01 - and in the index.css the css which we'll
03:05 - be working with and in the next
03:06 - screencast you'll create your very first
03:09 - css variable so i'll see you there
03:15 - hey in this screencast you're going to
03:17 - learn how to create your very first css
03:19 - variable so here we have an example of a
03:22 - portfolio website it consists of a
03:24 - navbar
03:26 - a main section with some items and then
03:28 - a footer and this is what we'll be
03:30 - working with throughout this course the
03:32 - css is defined here or at least the css
03:36 - that we care about i've also added a
03:38 - bunch of styling in the basic.css file
03:41 - but that styling won't be relevant for
03:43 - what you're going to learn in this
03:44 - course so i've extracted out the css we
03:46 - want to work with just to make it easier
03:48 - for us the markup is defined here in the
03:51 - index.html and that's just
03:53 - straightforward html so let's not which
03:56 - i'm not going to explain because i'm
03:58 - assuming that you are familiar with html
04:00 - so we have three different colors
04:03 - so as you can see we have three
04:05 - different colors on our portfolio
04:07 - website it's the red which is our
04:09 - default text color the beige background
04:12 - and the yellow color for the items here
04:15 - and as you can see from the css we're
04:18 - reusing the hexadecimal values quite a
04:20 - few places we're setting the main red
04:22 - color here and we're also setting it
04:24 - explicitly on the
04:26 - paragraph and h1 tag and i'll tell you
04:28 - why a bit later in the course
04:30 - and also on the anchor tags and the
04:32 - background of the
04:34 - button and whenever you see a css value
04:37 - being reused like this it's a perfect
04:40 - example for introducing css variables
04:42 - so let's do that we'll start by defining
04:45 - our variable then we first have to
04:47 - decide which scope we want the variable
04:49 - to live in
04:50 - we'll choose the root
04:55 - which is a pseudo class that points to
04:57 - the root element in the document
05:00 - in our case that is the html element
05:02 - itself and when we defined it on the top
05:05 - level element like that the variables we
05:08 - declare inside here will be available
05:11 - throughout the entire app it'll be a
05:13 - so-called global variable
05:15 - to define it we'll do
05:18 - red
05:20 - then
05:21 - simply copy this value here like that
05:27 - we can now use this variable
05:30 - through this
05:31 - weird syntax
05:32 - r
05:33 - then dash dash
05:35 - red
05:36 - and this might seem a little bit strange
05:38 - with the two dashes
05:40 - and the var
05:41 - and then passing in the variable but
05:43 - that's just how the
05:45 - spec is written so you have to do it
05:47 - like this
05:49 - two dashes when you declare a variable
05:51 - and use it
05:53 - and always use var otherwise it won't
05:55 - work
05:56 - so let's reuse this in all the other
05:59 - places where we're using the red color
06:02 - here
06:04 - air
06:06 - and down here
06:09 - so now let's do the same thing with the
06:11 - beige background
06:13 - even though that's now just being used
06:16 - one place here though i still think we
06:18 - should put it in a variable as it also
06:20 - makes the code easier to read
06:22 - so let's do
06:25 - ace
06:27 - and copy this value
06:29 - paste it in here
06:30 - and then replace this with var
06:33 - dash
06:36 - so i think we start to see the benefit
06:38 - here already we don't have to repeat
06:40 - ourselves again and again and the code
06:42 - here is actually
06:43 - more understandable than if we were
06:45 - simply using the hexadecimal values as
06:48 - this here as the variable names allows
06:51 - you to quickly glance over the code and
06:53 - understand okay yeah so the color of the
06:55 - h1 and the p tags is indeed red and then
06:58 - there's also the obvious benefit that if
07:00 - we want to change
07:01 - a value for example adjust our red color
07:04 - a little bit then we can simply change
07:06 - the value of the red variable i happen
07:08 - to have a different shade of red on my
07:10 - clipboard so i'll paste that in and as
07:13 - you can see that updated the red color
07:15 - throughout the entire app
07:17 - so let's get back to the old one like
07:18 - that
07:19 - okay what i want you to do now is to
07:21 - take our third color the yellow color
07:24 - which is used here
07:26 - and here and create a variable
07:29 - do it on the root element and then use
07:32 - it down here so pause this green cost
07:35 - jump into the code and do that and when
07:37 - you're finished just resume back to this
07:39 - screencast and then i'll do it as well
07:41 - so go ahead and do that now as i think
07:43 - it's really important for you to
07:44 - actually get your hands dirty with the
07:46 - code
07:47 - okay hopefully you managed to do the
07:49 - task now i'm going to do it so we'll
07:51 - create a
07:53 - yellow variable
07:55 - and we'll grab the color value here
07:58 - and then we can replace
08:00 - this value here with var
08:03 - dash dash yellow
08:05 - and we can do
08:07 - the exact same thing
08:08 - down here and
08:10 - okay so that was it i'll see you in the
08:12 - next screencast
08:17 - hey in this screencast you're going to
08:19 - learn how to override variables because
08:22 - in the previous one you learned how to
08:24 - create variables on the root element
08:26 - which points to the
08:28 - root element in our document which is
08:30 - this html tag here
08:33 - and css variables works so that all the
08:35 - children of the element in which you
08:38 - declare the variable on
08:39 - have access to that variable and as our
08:42 - entire markup
08:44 - on the page is a descendant of the html
08:47 - tag our css variables were available
08:50 - throughout the entire application
08:52 - however there might be cases where you
08:54 - for example want the variables to change
08:57 - a little bit
08:58 - in certain sections of the app and
09:00 - that's where overwriting comes in which
09:02 - is really handy and not something
09:04 - something you can do with sas and list
09:06 - variables is they know nothing of the
09:08 - dom whereas css variable does
09:11 - so you can tell a css variable that you
09:13 - want the value to change for example
09:16 - inside a given element and we're going
09:18 - to do that in the items because here we
09:20 - want our because here we want our red
09:22 - color to be a little bit softer and i've
09:25 - actually added the new value down here
09:27 - so i'm going to copy that and inside of
09:30 - the item we'll do the exact same thing
09:32 - as we did up in the root
09:34 - we'll simply do dash dash red
09:39 - and we'll paste in this value
09:42 - and now you can see that the red color
09:45 - inside the items changed what's
09:47 - happening here is that the h1 tag
09:50 - which is using the red variable
09:53 - and the button which is also using the
09:56 - red variable for its background now has
09:58 - a red variable which refers to the
10:01 - updated value
10:02 - since they are inside of the item
10:05 - let's have a look at that in the html
10:08 - here is the item elements you can see it
10:10 - has an h1 wrapped inside of it and a
10:12 - button as well and inside of each of
10:14 - these items we've flipped the the red
10:18 - variable from
10:19 - this value up here
10:21 - to
10:22 - this value down here and the red
10:24 - variable is inherited down to its
10:27 - children so all the elements inside of
10:29 - the items get their red variables
10:31 - updated as well
10:33 - that's a really neat thing that the
10:35 - variables are inherited down in the
10:37 - document tree notice though that for the
10:39 - h1 tag up here which as we can see
10:42 - is outside
10:44 - of the divs with the class of item
10:46 - the red value is still the original one
10:49 - up here
10:50 - okay so that was it
10:56 - i'll see you in the next screencast
11:02 - hey in this screencast we're going to do
11:04 - almost the same thing as we did in the
11:06 - previous one where we overrode variable
11:08 - in a local scope however this time we're
11:10 - going to create a new variable in a
11:12 - local scope and this is relevant for
11:14 - cases where you know that the variable
11:16 - will only be used in that section of the
11:18 - app so it's no need putting it in the
11:21 - global scope here up in the root let's
11:23 - for example say that we want the red
11:25 - color in our navbar
11:27 - to have a different shade than it has
11:28 - throughout the app what we then can do
11:30 - is that on the navbar let's target it
11:34 - navbar
11:36 - simply create a new variable just as we
11:39 - do it in the root
11:40 - by doing dash dash
11:42 - let's call it navred
11:46 - then
11:47 - let's paste this value in actually and
11:50 - just change it a little bit i'm going to
11:52 - remove this 6 and add 1.
11:55 - that should make it a bit different
11:56 - though still pretty red and then down in
11:59 - the anchor tags in the navbar where we
12:01 - previously referred to the global red
12:04 - variable we're now going to refer to the
12:06 - nav red
12:07 - there
12:09 - as you can see
12:10 - the color changed to more red orange-ish
12:13 - color
12:15 - and now this navred
12:17 - is only available
12:19 - in the nav bar which is
12:21 - the markup here meaning that only the
12:24 - children inside
12:26 - this element can access
12:29 - the nav red variable
12:31 - so if i now try to use this nav red
12:34 - variable outside of the navbar let's for
12:37 - example try down in the button make the
12:40 - background use the nav red you can see
12:42 - that just broke the layout because
12:45 - navrat doesn't exist
12:48 - down here
12:49 - it only exists inside here
12:53 - so what i want you to do now is create a
12:55 - local variable inside of the item you
12:58 - can for example call it item yellow and
13:00 - then use that yellow inside of the items
13:04 - so go ahead and do that pause the
13:06 - screencast create a new variable in the
13:08 - item and then re-and then use that
13:11 - variable somehow inside of the items
13:16 - okay so hopefully you managed to do that
13:18 - now i'll show you how to do it as well
13:21 - it's really simple
13:23 - simply do
13:25 - item yellow
13:28 - then set the
13:30 - value
13:32 - to this here but let's modify it a
13:34 - little bit let's swap out this c with an
13:37 - f
13:38 - that should change it substantially and
13:40 - now we'll use the item yellow here
13:43 - copy this
13:44 - and paste it in and boom you can see the
13:46 - yellow color inside here is updated
13:49 - however inside of the button we're still
13:52 - referring to the global yellow so let's
13:54 - paste that one in there as well and
13:56 - there it's starting to look good or ugly
13:58 - depending on your design preferences
14:01 - and finally i want to point out that
14:03 - some people
14:04 - prefer to separate the declaration of
14:07 - variables
14:08 - and the reference so what you could do
14:10 - then is
14:11 - take this one and remove it
14:14 - and then
14:15 - item
14:16 - and then paste it in there
14:18 - so now we're declaring it here and
14:21 - referencing it down here that's
14:22 - basically a matter of personal
14:24 - preferences as you can do whatever you
14:26 - want
14:27 - okay that was it so i'll see you in the
14:29 - next screencast
14:34 - hey in this screencast we're going to
14:35 - talk about themes because that's an area
14:38 - where css variables come in really handy
14:41 - and you might think well i'm not going
14:43 - to allow my users to switch themes on my
14:45 - site anyway so why do i need to learn
14:47 - this well i'm not just talking about
14:50 - user specific themes but also component
14:52 - specific themes that's a much more
14:54 - normal use case
14:56 - for example it could be that you want to
14:58 - mark an item in your ecommerce store as
15:01 - purchased or added to cart or it could
15:03 - be that you have a section of your site
15:05 - maybe an admin section which has a
15:06 - different theme perhaps it's darker than
15:09 - the website itself or as we are going to
15:11 - do perhaps you want to feature something
15:14 - on your site and by simply giving the
15:16 - item a featured class make it stand out
15:18 - from the rest so that's what we're going
15:20 - to do here now we want to simply be able
15:22 - to add a featured class to one of these
15:25 - items and thereby make it stand out from
15:27 - the rest we basically want to be able to
15:30 - do
15:31 - like
15:32 - this feature which should result in a
15:35 - style change for both the div hair
15:37 - itself and the h1 and buttons and
15:40 - normally in order to do this you'd have
15:43 - to create a
15:44 - featured
15:46 - class and then also target
15:49 - the
15:50 - button
15:52 - and
15:53 - also the
15:55 - h1 tag
15:57 - it could result in quite a lot of extra
15:59 - css in order to achieve that but the
16:02 - beautiful thing with css variables is
16:04 - that you can scrap all this
16:06 - and
16:07 - inside of this featured class here we're
16:09 - simply going to change the value of a
16:11 - few variables we're going to override
16:13 - them which we learned in the previous
16:14 - screencast
16:16 - i've cheated a little bit and copied in
16:18 - the new values for yellow and red
16:21 - in here and simply paste that in and
16:23 - boom as you can see now this project d
16:26 - item stands out from the other items
16:30 - it's not a particularly nice color but
16:33 - it proves the point
16:35 - so what happens here is that the h1
16:38 - which is inside of featured
16:41 - now refers to the red value which we
16:44 - have declared here and not the red
16:47 - value we declared up here
16:49 - and also the button it's red and yellow
16:52 - now refer to the local values for red
16:55 - and yellow
16:57 - now we can add feature to
17:00 - this item here as well for example run
17:02 - the code and here you can see now both
17:04 - of these are featured
17:07 - so technically we're just doing the same
17:09 - thing that we did in the screencast
17:11 - where we were overriding variables
17:13 - however now we've put it in a more
17:14 - useful context
17:17 - okay that was it i'll see you in the
17:19 - next screencast
17:24 - hey in this screencast we're going to
17:26 - learn how to work with css variables in
17:28 - javascript because as i've mentioned
17:30 - before css variables live in the dom
17:33 - meaning that you can update them with
17:35 - javascript that's super cool not
17:38 - something you could do with for example
17:39 - sas or less variables as they are
17:41 - transpiled down to regular css so let's
17:44 - head over to the index.js
17:47 - and the first thing we need to do is to
17:49 - grab hold of the route which is where we
17:52 - declared the variables
17:54 - you can see here and that now refers to
17:57 - the html as that is the root of our
17:59 - document
18:02 - so we'll do var root equals
18:05 - document
18:06 - dot
18:08 - query selector
18:11 - then grab the root
18:13 - let's
18:15 - log that out
18:17 - as you can see that logs out the html
18:20 - element itself
18:21 - to get the styles we've defined on root
18:24 - we'll do var
18:25 - root
18:26 - styles
18:28 - and then use the get
18:30 - computed style method which we have
18:32 - access to
18:33 - and which returns the properties and
18:35 - values for the element we pass in
18:38 - and we'll pass in the root and then to
18:41 - get one of the variables let's let's for
18:43 - example grab the red one
18:45 - we'll do
18:46 - root styles
18:48 - dot get
18:50 - property value and then simply pass in
18:53 - the name of the variable
18:55 - which is red
18:57 - now console log out
18:59 - red
19:03 - you'll see that we get the correct value
19:06 - you can see
19:08 - this one here so now that we know that
19:10 - we can fetch the variable let's also
19:13 - change it
19:14 - to that
19:15 - we'll refer to the routine
19:18 - root style
19:20 - set
19:21 - prop
19:22 - property
19:24 - and then the first parameter is the name
19:26 - of the variable which is
19:28 - red and the second one is whatever we
19:30 - want to update it to so let's just
19:32 - change it for the sake of this tutorial
19:34 - to green
19:36 - run the code and boom as you can see the
19:38 - entire page has been updated as we've
19:40 - simply
19:42 - changed this here and it's inherited
19:44 - down to all the elements which is using
19:46 - it throughout this app so this is super
19:49 - useful just imagine that you for example
19:52 - want your users to change the font size
19:54 - on the page or maybe you actually want
19:56 - them to be able to pick themes or change
19:58 - colors at some in some sections css
20:01 - variables make that really easy for you
20:04 - okay what i want you to do now is to
20:06 - fetch this yellow color here which we
20:09 - are using in the background for the
20:10 - items fetch it out using javascript and
20:13 - change it to something else for example
20:15 - to orange
20:17 - so go ahead and do that
20:19 - and when you come back i'll do it as
20:20 - well
20:23 - okay hopefully you managed to do the
20:25 - task it's really simple all you have to
20:27 - do is
20:29 - in order to fetch this
20:31 - yellow color here is
20:35 - simply change the red
20:38 - to
20:39 - yellow instead
20:40 - let's also change the
20:42 - other references to yellow like that
20:46 - and then let's set it to
20:48 - orange
20:51 - and
20:52 - there we go we've changed the yellow
20:54 - variable to orange and that affects
20:57 - not only the background of the items
21:00 - themselves as it uses the yellow
21:02 - variable but also the text color inside
21:05 - of the button
21:06 - both of them are now orange
21:09 - okay that was it i'll see you in the
21:11 - next screencast
21:17 - hey in this screencast i'm going to
21:18 - teach you how to change a variable based
21:21 - upon
21:21 - the width of the screen
21:24 - because
21:25 - shrink the screen down to a typical
21:26 - mobile width the items become too wide
21:29 - for the screen so we need to rearrange
21:31 - on our grid we want them to rather
21:33 - appear on top of each other so stacked
21:35 - downwards
21:37 - and to do that you have to learn a
21:39 - little bit about css grid as well
21:42 - because i've pulled in the grid styling
21:43 - which is the styling for the grid
21:46 - and i actually have a full css grid
21:48 - course which i've linked to in the about
21:50 - section in this screencast so be sure to
21:53 - check that one out as well and if you
21:55 - haven't seen css grid before it's pretty
21:57 - straightforward but what we're saying
21:59 - here is that our element with the class
22:01 - of grid which is the
22:03 - grid here
22:04 - which wraps these four items
22:08 - let's do like this
22:11 - so this one here
22:13 - is getting a display of grid
22:15 - and we're defining the columns here
22:17 - we're saying that we want two columns
22:19 - each being 200 pixels wide so these two
22:22 - columns are 200 pixels wide each
22:25 - and grid auto rows means that the rows
22:27 - will be 140 pixels tall because we're
22:30 - setting that here and grid gap sets the
22:33 - gap in between the items and justify
22:35 - content center basically centers the
22:37 - content
22:38 - so check out my grid course if you think
22:40 - this is hard but you don't really need
22:43 - to understand this all you need to
22:45 - understand is this line here which is
22:47 - saying that we want two columns each
22:49 - being 200 pixels wide
22:51 - because that's what we need to change
22:52 - with with our media query meaning that
22:54 - we need to extract this out in a
22:57 - variable
22:58 - and
22:59 - i actually like to declare my variables
23:01 - at the top
23:03 - so have have it like this
23:09 - variable declarations and then
23:13 - have the
23:15 - styles here
23:18 - so that we separate
23:20 - here we'll do grid
23:23 - and paste in grid template columns but
23:26 - we'll change this to
23:29 - columns
23:32 - and then when we're using that value
23:36 - you just have to do var
23:38 - dash dash columns like that so this
23:41 - should be pretty straightforward for you
23:43 - by now
23:44 - we're declaring a variable and we're
23:46 - using it
23:48 - now let's change it when the width of
23:49 - the screen becomes less than 450 pixels
23:53 - video
23:55 - all
23:56 - and
23:57 - max
23:58 - width of
24:00 - 450px
24:04 - and you might be fooled to think that
24:06 - you could just
24:07 - do like this columns 200 px as that's
24:10 - the change we want we want to
24:13 - remove one of the
24:15 - columns here we have two columns each
24:17 - being 200 pixels you want to reduce that
24:20 - to one which basically results in the
24:22 - items stacking on top of each other
24:24 - however we can't just change it here we
24:27 - have to wrap it in the scope in which we
24:29 - defined
24:30 - it with a grid
24:34 - like that
24:36 - here
24:38 - so at the width which is below
24:40 - 450px we're going to change the columns
24:44 - variable inside of grid to 200 px
24:48 - instead of 200 bx 200 bx
24:51 - let's try that we'll narrow the screen
24:53 - and boom as you can see
24:55 - now they're stacked on top of each other
24:59 - and this isn't something that you could
25:01 - have done with less or sass variables as
25:03 - they have no information of what's going
25:05 - on in the dom they're already transpiled
25:07 - down to regular css however as these css
25:10 - variables live in the dom they have
25:12 - access to this and you can change them
25:14 - based upon for example screen resize or
25:16 - screen size in general now what i want
25:18 - you to do is
25:20 - also change the background the beige
25:23 - color when the screen is less than 450px
25:27 - so jump into the code and try to do that
25:29 - and when you come back i'll show you how
25:31 - to do it as well
25:33 - okay so hopefully you managed to do the
25:34 - task
25:35 - changing the beige color
25:38 - and do that i have to refer to the root
25:40 - again and
25:43 - the page
25:45 - and then give it a new value
25:48 - let's copy this and
25:51 - paste it in and change it a little bit
25:54 - run the code
25:56 - and then when we shrink on the page boom
25:59 - you can see that the background also
26:01 - changed
26:05 - okay that was it i'll see you in the
26:07 - next screencast
26:13 - hey in this screencast i want to talk a
26:14 - little bit about inheritance as you as
26:17 - you've seen throughout this course css
26:19 - variables behave very much as other css
26:21 - properties in that their values are
26:23 - inherited and cascade however there are
26:25 - a few things that you maybe would think
26:27 - that would work but which doesn't and i
26:30 - want to explain those two in this
26:31 - screencast now the first one is that
26:33 - you can create variables based upon
26:36 - other variables let's say that we're for
26:38 - example
26:39 - all one variable main color and we want
26:42 - it to simply be the red color
26:45 - now we can refer to main color instead
26:47 - of red for example down here in the
26:49 - anchor tags in the nav bar let's do that
26:53 - they are still red now and here you
26:55 - might be fooled to think that you could
26:58 - actually
27:00 - do like this and update the red or
27:03 - override the red variable here to
27:06 - something else let's just
27:07 - just change it to orange instead for
27:09 - example and you could expect that that
27:11 - would override the red which again would
27:13 - override main color but as you can see
27:15 - that isn't happening because main color
27:19 - the value of that has already been
27:21 - resolved to the value of red so main
27:25 - color doesn't have a reference to the
27:28 - variable it only points to the
27:31 - value however if you were to
27:34 - rather update the
27:36 - main color here
27:38 - like that as you can see
27:40 - then it works
27:43 - so that's something you should be aware
27:45 - of
27:46 - the second thing is that we've here set
27:49 - the color of the age ones and the
27:52 - paragraphs to
27:53 - read specifically
27:55 - and you don't actually need this we
27:57 - could have just taken this away and
28:00 - the page would look identical
28:02 - however if you now were to for example
28:05 - update the
28:09 - red value here
28:11 - let's take the orange here as well
28:15 - then you can see that the h1 isn't
28:17 - updated and that's because it has
28:19 - inherited the h1
28:22 - the color red
28:24 - from the body though though it has only
28:26 - inherited the
28:28 - value of the variable doesn't inherit
28:31 - the variable itself so again it's this
28:33 - about
28:34 - referencing the value or the variable
28:37 - and we have to explicitly tell it to
28:41 - reference the variable in order to be
28:43 - able to then change the h1 tag with this
28:47 - overriding here now you can see
28:50 - it is indeed orange
28:52 - so i hope that wasn't too confusing if
28:55 - it was feel free to ask any questions in
28:56 - the q a section and i'll reply as

Cleaned transcript:

hey there and welcome to this course on css variables so why do you want to learn css variables well first of all because in css you very often end up in situations like this where you have for example a main red color throughout your app which you are using at multiple places and the old way of doing that would simply be to reuse the same hexadecimal value like that however with css variables you're able to declare it as a variable first and then use that variable wherever you want later on the obvious benefit here is that now you can simply update this value here and these two will be automatically updated and also semantically it makes more sense it's easier to see that yeah this title is red than it is to see that this title here is red unless you can parse hexadecimal values quickly in your head and some of you might say that well i've had less and sas variables for years so what's new with css variables well first of all it's easier to get started this is native to the browser so you need no transpiling which is pretty nice secondly css variables have access to the dom so you can create local scopes meaning css variables that only work in a certain section of your app for example you can also change the variables with javascript which is really handy for example if you want to enable your users to let's say change the font size of your page and it's also ideal for responsiveness as you can change variables for example based upon media queries and neither of these use cases which i'll show you later would be possible with less and sass and finally as we'll see it's perfect for themes and by that i don't necessarily mean themes as in your website visitors being able to change the layout with component specific themes for example for items which you want to change a little bit could be a product after it has been added to a shopping cart or an or an article you want to feature or whatever basically it's a very common use case and css variables make it really easy and throughout this course you'll become a css variables master in eight screencasts they're pretty quick i explain my goal with this course is to get you up to speed as quickly as possible there are also some interactive challenges or i will at least challenge you to jump into the code and perform tasks in some of the costs and there's a q a section in each of the costs so feel free to ask questions there and i will try to reply as best as i can or sometimes other people actually also reply and that's great if you see a question and you know the answer feel free to help other people out as that's great for your karma finally this is me i'm a frontend developer and a cofounder of this site scrimba you can reach out to me via twitter if you want or feel free to join our gear chat room if you have any comments or questions so finally this is the project we'll be working on throughout this course so you'll get very familiar with this here is the markup and in the index.css the css which we'll be working with and in the next screencast you'll create your very first css variable so i'll see you there hey in this screencast you're going to learn how to create your very first css variable so here we have an example of a portfolio website it consists of a navbar a main section with some items and then a footer and this is what we'll be working with throughout this course the css is defined here or at least the css that we care about i've also added a bunch of styling in the basic.css file but that styling won't be relevant for what you're going to learn in this course so i've extracted out the css we want to work with just to make it easier for us the markup is defined here in the index.html and that's just straightforward html so let's not which i'm not going to explain because i'm assuming that you are familiar with html so we have three different colors so as you can see we have three different colors on our portfolio website it's the red which is our default text color the beige background and the yellow color for the items here and as you can see from the css we're reusing the hexadecimal values quite a few places we're setting the main red color here and we're also setting it explicitly on the paragraph and h1 tag and i'll tell you why a bit later in the course and also on the anchor tags and the background of the button and whenever you see a css value being reused like this it's a perfect example for introducing css variables so let's do that we'll start by defining our variable then we first have to decide which scope we want the variable to live in we'll choose the root which is a pseudo class that points to the root element in the document in our case that is the html element itself and when we defined it on the top level element like that the variables we declare inside here will be available throughout the entire app it'll be a socalled global variable to define it we'll do red then simply copy this value here like that we can now use this variable through this weird syntax r then dash dash red and this might seem a little bit strange with the two dashes and the var and then passing in the variable but that's just how the spec is written so you have to do it like this two dashes when you declare a variable and use it and always use var otherwise it won't work so let's reuse this in all the other places where we're using the red color here air and down here so now let's do the same thing with the beige background even though that's now just being used one place here though i still think we should put it in a variable as it also makes the code easier to read so let's do ace and copy this value paste it in here and then replace this with var dash so i think we start to see the benefit here already we don't have to repeat ourselves again and again and the code here is actually more understandable than if we were simply using the hexadecimal values as this here as the variable names allows you to quickly glance over the code and understand okay yeah so the color of the h1 and the p tags is indeed red and then there's also the obvious benefit that if we want to change a value for example adjust our red color a little bit then we can simply change the value of the red variable i happen to have a different shade of red on my clipboard so i'll paste that in and as you can see that updated the red color throughout the entire app so let's get back to the old one like that okay what i want you to do now is to take our third color the yellow color which is used here and here and create a variable do it on the root element and then use it down here so pause this green cost jump into the code and do that and when you're finished just resume back to this screencast and then i'll do it as well so go ahead and do that now as i think it's really important for you to actually get your hands dirty with the code okay hopefully you managed to do the task now i'm going to do it so we'll create a yellow variable and we'll grab the color value here and then we can replace this value here with var dash dash yellow and we can do the exact same thing down here and okay so that was it i'll see you in the next screencast hey in this screencast you're going to learn how to override variables because in the previous one you learned how to create variables on the root element which points to the root element in our document which is this html tag here and css variables works so that all the children of the element in which you declare the variable on have access to that variable and as our entire markup on the page is a descendant of the html tag our css variables were available throughout the entire application however there might be cases where you for example want the variables to change a little bit in certain sections of the app and that's where overwriting comes in which is really handy and not something something you can do with sas and list variables is they know nothing of the dom whereas css variable does so you can tell a css variable that you want the value to change for example inside a given element and we're going to do that in the items because here we want our because here we want our red color to be a little bit softer and i've actually added the new value down here so i'm going to copy that and inside of the item we'll do the exact same thing as we did up in the root we'll simply do dash dash red and we'll paste in this value and now you can see that the red color inside the items changed what's happening here is that the h1 tag which is using the red variable and the button which is also using the red variable for its background now has a red variable which refers to the updated value since they are inside of the item let's have a look at that in the html here is the item elements you can see it has an h1 wrapped inside of it and a button as well and inside of each of these items we've flipped the the red variable from this value up here to this value down here and the red variable is inherited down to its children so all the elements inside of the items get their red variables updated as well that's a really neat thing that the variables are inherited down in the document tree notice though that for the h1 tag up here which as we can see is outside of the divs with the class of item the red value is still the original one up here okay so that was it i'll see you in the next screencast hey in this screencast we're going to do almost the same thing as we did in the previous one where we overrode variable in a local scope however this time we're going to create a new variable in a local scope and this is relevant for cases where you know that the variable will only be used in that section of the app so it's no need putting it in the global scope here up in the root let's for example say that we want the red color in our navbar to have a different shade than it has throughout the app what we then can do is that on the navbar let's target it navbar simply create a new variable just as we do it in the root by doing dash dash let's call it navred then let's paste this value in actually and just change it a little bit i'm going to remove this 6 and add 1. that should make it a bit different though still pretty red and then down in the anchor tags in the navbar where we previously referred to the global red variable we're now going to refer to the nav red there as you can see the color changed to more red orangeish color and now this navred is only available in the nav bar which is the markup here meaning that only the children inside this element can access the nav red variable so if i now try to use this nav red variable outside of the navbar let's for example try down in the button make the background use the nav red you can see that just broke the layout because navrat doesn't exist down here it only exists inside here so what i want you to do now is create a local variable inside of the item you can for example call it item yellow and then use that yellow inside of the items so go ahead and do that pause the screencast create a new variable in the item and then reand then use that variable somehow inside of the items okay so hopefully you managed to do that now i'll show you how to do it as well it's really simple simply do item yellow then set the value to this here but let's modify it a little bit let's swap out this c with an f that should change it substantially and now we'll use the item yellow here copy this and paste it in and boom you can see the yellow color inside here is updated however inside of the button we're still referring to the global yellow so let's paste that one in there as well and there it's starting to look good or ugly depending on your design preferences and finally i want to point out that some people prefer to separate the declaration of variables and the reference so what you could do then is take this one and remove it and then item and then paste it in there so now we're declaring it here and referencing it down here that's basically a matter of personal preferences as you can do whatever you want okay that was it so i'll see you in the next screencast hey in this screencast we're going to talk about themes because that's an area where css variables come in really handy and you might think well i'm not going to allow my users to switch themes on my site anyway so why do i need to learn this well i'm not just talking about user specific themes but also component specific themes that's a much more normal use case for example it could be that you want to mark an item in your ecommerce store as purchased or added to cart or it could be that you have a section of your site maybe an admin section which has a different theme perhaps it's darker than the website itself or as we are going to do perhaps you want to feature something on your site and by simply giving the item a featured class make it stand out from the rest so that's what we're going to do here now we want to simply be able to add a featured class to one of these items and thereby make it stand out from the rest we basically want to be able to do like this feature which should result in a style change for both the div hair itself and the h1 and buttons and normally in order to do this you'd have to create a featured class and then also target the button and also the h1 tag it could result in quite a lot of extra css in order to achieve that but the beautiful thing with css variables is that you can scrap all this and inside of this featured class here we're simply going to change the value of a few variables we're going to override them which we learned in the previous screencast i've cheated a little bit and copied in the new values for yellow and red in here and simply paste that in and boom as you can see now this project d item stands out from the other items it's not a particularly nice color but it proves the point so what happens here is that the h1 which is inside of featured now refers to the red value which we have declared here and not the red value we declared up here and also the button it's red and yellow now refer to the local values for red and yellow now we can add feature to this item here as well for example run the code and here you can see now both of these are featured so technically we're just doing the same thing that we did in the screencast where we were overriding variables however now we've put it in a more useful context okay that was it i'll see you in the next screencast hey in this screencast we're going to learn how to work with css variables in javascript because as i've mentioned before css variables live in the dom meaning that you can update them with javascript that's super cool not something you could do with for example sas or less variables as they are transpiled down to regular css so let's head over to the index.js and the first thing we need to do is to grab hold of the route which is where we declared the variables you can see here and that now refers to the html as that is the root of our document so we'll do var root equals document dot query selector then grab the root let's log that out as you can see that logs out the html element itself to get the styles we've defined on root we'll do var root styles and then use the get computed style method which we have access to and which returns the properties and values for the element we pass in and we'll pass in the root and then to get one of the variables let's let's for example grab the red one we'll do root styles dot get property value and then simply pass in the name of the variable which is red now console log out red you'll see that we get the correct value you can see this one here so now that we know that we can fetch the variable let's also change it to that we'll refer to the routine root style set prop property and then the first parameter is the name of the variable which is red and the second one is whatever we want to update it to so let's just change it for the sake of this tutorial to green run the code and boom as you can see the entire page has been updated as we've simply changed this here and it's inherited down to all the elements which is using it throughout this app so this is super useful just imagine that you for example want your users to change the font size on the page or maybe you actually want them to be able to pick themes or change colors at some in some sections css variables make that really easy for you okay what i want you to do now is to fetch this yellow color here which we are using in the background for the items fetch it out using javascript and change it to something else for example to orange so go ahead and do that and when you come back i'll do it as well okay hopefully you managed to do the task it's really simple all you have to do is in order to fetch this yellow color here is simply change the red to yellow instead let's also change the other references to yellow like that and then let's set it to orange and there we go we've changed the yellow variable to orange and that affects not only the background of the items themselves as it uses the yellow variable but also the text color inside of the button both of them are now orange okay that was it i'll see you in the next screencast hey in this screencast i'm going to teach you how to change a variable based upon the width of the screen because shrink the screen down to a typical mobile width the items become too wide for the screen so we need to rearrange on our grid we want them to rather appear on top of each other so stacked downwards and to do that you have to learn a little bit about css grid as well because i've pulled in the grid styling which is the styling for the grid and i actually have a full css grid course which i've linked to in the about section in this screencast so be sure to check that one out as well and if you haven't seen css grid before it's pretty straightforward but what we're saying here is that our element with the class of grid which is the grid here which wraps these four items let's do like this so this one here is getting a display of grid and we're defining the columns here we're saying that we want two columns each being 200 pixels wide so these two columns are 200 pixels wide each and grid auto rows means that the rows will be 140 pixels tall because we're setting that here and grid gap sets the gap in between the items and justify content center basically centers the content so check out my grid course if you think this is hard but you don't really need to understand this all you need to understand is this line here which is saying that we want two columns each being 200 pixels wide because that's what we need to change with with our media query meaning that we need to extract this out in a variable and i actually like to declare my variables at the top so have have it like this variable declarations and then have the styles here so that we separate here we'll do grid and paste in grid template columns but we'll change this to columns and then when we're using that value you just have to do var dash dash columns like that so this should be pretty straightforward for you by now we're declaring a variable and we're using it now let's change it when the width of the screen becomes less than 450 pixels video all and max width of 450px and you might be fooled to think that you could just do like this columns 200 px as that's the change we want we want to remove one of the columns here we have two columns each being 200 pixels you want to reduce that to one which basically results in the items stacking on top of each other however we can't just change it here we have to wrap it in the scope in which we defined it with a grid like that here so at the width which is below 450px we're going to change the columns variable inside of grid to 200 px instead of 200 bx 200 bx let's try that we'll narrow the screen and boom as you can see now they're stacked on top of each other and this isn't something that you could have done with less or sass variables as they have no information of what's going on in the dom they're already transpiled down to regular css however as these css variables live in the dom they have access to this and you can change them based upon for example screen resize or screen size in general now what i want you to do is also change the background the beige color when the screen is less than 450px so jump into the code and try to do that and when you come back i'll show you how to do it as well okay so hopefully you managed to do the task changing the beige color and do that i have to refer to the root again and the page and then give it a new value let's copy this and paste it in and change it a little bit run the code and then when we shrink on the page boom you can see that the background also changed okay that was it i'll see you in the next screencast hey in this screencast i want to talk a little bit about inheritance as you as you've seen throughout this course css variables behave very much as other css properties in that their values are inherited and cascade however there are a few things that you maybe would think that would work but which doesn't and i want to explain those two in this screencast now the first one is that you can create variables based upon other variables let's say that we're for example all one variable main color and we want it to simply be the red color now we can refer to main color instead of red for example down here in the anchor tags in the nav bar let's do that they are still red now and here you might be fooled to think that you could actually do like this and update the red or override the red variable here to something else let's just just change it to orange instead for example and you could expect that that would override the red which again would override main color but as you can see that isn't happening because main color the value of that has already been resolved to the value of red so main color doesn't have a reference to the variable it only points to the value however if you were to rather update the main color here like that as you can see then it works so that's something you should be aware of the second thing is that we've here set the color of the age ones and the paragraphs to read specifically and you don't actually need this we could have just taken this away and the page would look identical however if you now were to for example update the red value here let's take the orange here as well then you can see that the h1 isn't updated and that's because it has inherited the h1 the color red from the body though though it has only inherited the value of the variable doesn't inherit the variable itself so again it's this about referencing the value or the variable and we have to explicitly tell it to reference the variable in order to be able to then change the h1 tag with this overriding here now you can see it is indeed orange so i hope that wasn't too confusing if it was feel free to ask any questions in the q a section and i'll reply as
