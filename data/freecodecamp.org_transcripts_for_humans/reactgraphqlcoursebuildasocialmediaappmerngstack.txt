With timestamps:

00:00 - well hello there
00:02 - welcome to this series where we make
00:03 - this beautiful simple application that
00:06 - you see right here that is uh akin to
00:08 - like a facebook or a twitter or any
00:10 - social media application where we allow
00:13 - the users to register or log in after
00:16 - they register and then create and share
00:19 - posts with other users and interact with
00:22 - the with those posts and those other
00:24 - users so if i were to demonstrate this
00:27 - app right now
00:28 - we could go to the register page which
00:30 - you see right here that shows us this
00:32 - form and if click on register you can
00:34 - see that we're going to be implementing
00:36 - validation so that's going to be done on
00:38 - the server side and represented on the
00:40 - client side as you see right here and i
00:43 - already registered so i can straight
00:45 - away go to login and have a user called
00:48 - user
00:49 - with a password of one through six so i
00:51 - hit enter and it logs me in and now i
00:54 - can have this form right here which
00:56 - allows me to submit a new post so i'm
00:58 - gonna do that
01:00 - here is
01:01 - my new post i hit enter and it
01:05 - immediately shows here and there's like
01:06 - a really simple slick animation that
01:09 - fades in
01:11 - like i said we can interact with these
01:12 - posts so for example i can like this
01:15 - post here and the in
01:17 - increments instantly and it changes
01:19 - color i can as well comment on it so i
01:21 - go here and i'll say
01:23 - yeah it's the new thing
01:27 - and i hit enter and it's posted and as
01:29 - you see anything that is posted by our
01:31 - own user will have this delete button
01:33 - right here which
01:35 - in this case is the delete comment and
01:37 - if i go back it's a delete post and if
01:39 - you click it it shows you this uh
01:41 - confirm model you click ok and indeed
01:44 - that post is gone
01:46 - so this application uses uh react on the
01:50 - front end
01:51 - so this is something that i hope you're
01:53 - at least a little bit familiar with if
01:55 - not it's okay this is a
01:56 - beginner-friendly series i'm gonna go
01:58 - through every uh single thing that i use
02:01 - and explain it why i'm writing it in
02:03 - that way
02:04 - so alongside of react on the front end
02:06 - we're gonna be using semantic ui to
02:08 - style it and give it this very simple
02:10 - but still elegant uh style uh if you
02:14 - used something like bootstrap before
02:15 - you're gonna feel very comfortable using
02:17 - this it's a very similar kind of uh
02:19 - approach to the uh to styling but it has
02:22 - some extra elements and uh some
02:25 - simplicity to it and that's why i chose
02:26 - it for this series
02:28 - and uh in terms of the focus of the
02:30 - series it's going to be on graphql which
02:32 - is a query language that sits as an
02:34 - interface between our application and
02:37 - the server and the database and i'm
02:39 - going to explain in a little bit more
02:41 - about graphql so stick around for that
02:45 - [Music]
02:48 - but what is graphql well i'm glad you
02:51 - asked graphql is a query language that
02:54 - we can use as part of our server-side
02:56 - code and it sits on our existing api
02:59 - graphql is technology agnostic meaning
03:02 - that it doesn't care what programming
03:04 - language or database you're using
03:07 - whether your api is some code that
03:09 - fetches and writes data on a database or
03:12 - it's code that consumes another api and
03:14 - gets data from there as long as you
03:17 - shape the data properly according to
03:19 - type definitions defined by you
03:21 - it will receive and send data to the web
03:24 - client without any problems
03:26 - there are three types of graphql
03:28 - operations that we can perform
03:30 - queries for reading data for example
03:32 - fetching one or multiple posts and
03:36 - mutations for writing data which
03:38 - includes creating updating and deleting
03:41 - examples of this would be
03:44 - creating a post updating user details or
03:48 - deleting a comment um or deleting a like
03:51 - and subscriptions for listening to
03:54 - changes in our data in real real time
03:57 - this is done using websockets in the
03:58 - background and it's useful for things
04:01 - like chat or polling apps mostly you'll
04:04 - use queries and mutations
04:07 - when using graphql whether reading or
04:09 - writing data we always send a post
04:11 - request with a body that contains some
04:14 - information about what type of data that
04:16 - we want to get back or save on the
04:18 - database
04:19 - rest apis were created to have a
04:22 - conventional way of sending and
04:23 - receiving data between the client and
04:25 - the server but even though these
04:28 - conventions make rest apis easier to
04:30 - deal with there can be different types
04:32 - of resources and there can be different
04:35 - endpoint names and endpoint parameter
04:37 - variables etc
04:39 - graphql reduces the amount of
04:41 - information needed for developers to
04:43 - learn how to consume an api by having
04:46 - one main endpoint fewer operations and
04:49 - self-documenting apis
04:51 - this will become clearer as we start to
04:53 - implement it
04:55 - a lot of companies like facebook twitter
04:58 - paypal and many more are now using
05:01 - graphql in some of their services to
05:04 - benefit from the improvements that it
05:06 - offers over a traditional rest api
05:09 - the major advantage of using graphql is
05:12 - the control over the amount of data
05:14 - requested and sent back to the client
05:17 - let's send let's say for example in our
05:19 - home page of our app we want to fetch
05:22 - recent posts and we want to show a
05:24 - couple of things about them like
05:26 - timestamps body username and number of
05:30 - likes and comments
05:31 - using rest api we would send a request
05:35 - and get an array of posts each one
05:37 - looking like this
05:39 - and then display the details that we
05:41 - want and ignore the rest of the data
05:43 - that we don't need
05:44 - this isn't strictly speaking a problem
05:47 - but because in this example we don't
05:49 - need the comments and likes themselves
05:52 - just the number of them it would be
05:54 - better if we were to receive something
05:57 - like this
05:58 - by reducing the amount of data sent back
06:00 - from the server we decrease bandwidth
06:02 - usage and latency time
06:05 - we could actually do this by adding
06:07 - another endpoint that returns just that
06:10 - data and use that on the home page but
06:12 - this becomes a problem as we find
06:14 - ourselves writing more endpoints the
06:17 - more pages we have and which will
06:20 - drastically increase the amount of code
06:22 - that we have to write on the back end
06:24 - and we have to document all of these
06:26 - endpoints for our front-end developers
06:28 - or for anyone consuming this api you can
06:31 - now see why this approach isn't optimal
06:34 - graphql solves this by letting us send a
06:37 - post request to one endpoint and specify
06:40 - what resource we want in this case posts
06:43 - and what fields we want in this case
06:45 - everything except likes and comments we
06:48 - can also specify many more factors like
06:51 - what post uh what the post body contains
06:53 - if we were for example to search for a
06:55 - specific post
06:57 - or post by a certain user
06:59 - or a specific number of posts etc
07:02 - all of these can be done through one
07:05 - single endpoint and just by changing the
07:08 - request body itself
07:10 - so
07:11 - these are the tech that we're going to
07:12 - be using for this series
07:14 - basically mern plus graphql well mern if
07:19 - you will
07:20 - will use apollo server which uses an
07:23 - express server in the background or you
07:25 - can also use something like express
07:26 - graphql or graphql yoga they all do the
07:30 - job well but i personally prefer the
07:32 - tools that come shipped with apollo
07:34 - server
07:35 - like i mentioned this series will be a
07:37 - standalone and right after the series
07:39 - we'll implement the front end using
07:41 - react with hooks and context api and
07:44 - we'll use apollo clients there and the
07:47 - new apollo react hooks library to make
07:50 - sure that we write our app using the
07:52 - most up-to-date features of the
07:54 - frameworks that we're using so i wanted
07:56 - to do a demonstration of the server that
07:58 - we're going to be building so this is
08:00 - our server application running at port
08:03 - 5000 uh you can have it at slash
08:06 - graphql or you can have it just at the
08:09 - base url it doesn't make a difference um
08:12 - so this is the graphql playground and
08:15 - one of the tools that we get from apollo
08:17 - server and here i wanted to show you
08:19 - some examples from our application that
08:22 - we'll build
08:23 - so this is an example of a query so
08:26 - right here you specify the type of
08:28 - operation in this case it's a query and
08:30 - then you specify the name of the query
08:32 - that we want to use depending on the
08:34 - type definitions that you have so i've
08:36 - already written this query get posts
08:39 - which returns us just that the posts
08:41 - from our database
08:43 - and here we specify the fields from that
08:46 - query that we want and these are of
08:48 - course defined as well in our type
08:50 - definitions that what each resource
08:52 - returns in terms of fields
08:54 - and if i press the play button here it's
08:57 - actually going to fetch from our
08:58 - database our data and returns it in a in
09:00 - this object inside of this data inside
09:03 - of this get posts object so each time we
09:05 - send a query our result is sent back in
09:08 - a object that has the same name as that
09:10 - query unless we have some errors and
09:12 - then we will get an object um errors
09:15 - right here and then we'll have our
09:16 - errors there so here as you can see we
09:18 - get exactly the data that we asked for
09:21 - id body all the way through a comment
09:24 - count and here to demonstrate to you the
09:26 - flexibility of
09:28 - graphql we can say just let's just get
09:31 - the id and the body and if we press play
09:34 - we get exactly that data so bear in mind
09:38 - that this is on the server right now
09:40 - that means
09:40 - none of this data has been sent to the
09:43 - client so the server gets this request
09:46 - and then on the server decides what data
09:48 - to fetch it fetches all of the data from
09:51 - the database and then it filters out the
09:53 - data that the user didn't ask for and
09:55 - then returns a smaller payload of data
09:58 - so here if you want to add more fields
10:00 - we can actually do control space and
10:03 - this tool self documents and it fetches
10:05 - automatically our types and knows what
10:07 - to expect so here if we forgot our
10:09 - fields we can just do
10:11 - control space and then click on create
10:13 - that and if i want to get the username
10:15 - now i add these two and i hit enter and
10:18 - we get those fields now as well
10:20 - now this tool is available for your
10:22 - front-end developer once you expose this
10:24 - once you deploy this app and you give
10:26 - this base url which will be something
10:28 - other than localhost if you deploy it
10:30 - live
10:31 - your front-end developer will have
10:32 - access to this tool and then we'll learn
10:34 - how your api works your graphql api
10:37 - works without you having to write any
10:39 - documentation they can just click on the
10:41 - schema tab and they will see all the
10:43 - queries and mutations available for
10:45 - example if they want to see how the get
10:47 - get posts query works they can click on
10:49 - it and they will see the type and the
10:51 - type of data each of the fields have and
10:54 - they will learn how to actually interact
10:56 - with your api without you having to
10:58 - write any documentation this is what i
11:00 - mentioned earlier by graphql being
11:02 - self-documenting now let's look at
11:04 - mutations so let me close this if we go
11:07 - here i've already written these two
11:09 - mutations for login and register
11:12 - if i were to run the login user or pass
11:14 - it of course i've already written the
11:16 - code for this saying that look at the
11:17 - login requires a username and a password
11:20 - and returns a couple of things one of
11:22 - them is a json web token that we will
11:24 - use on our client to
11:26 - authenticate the user and keep them
11:27 - authenticated for a period of time if i
11:30 - click here and i click on the login user
11:32 - um mutation there we go we get our token
11:35 - back which we will use later to
11:38 - access protected routes like creating
11:40 - posts or liking or commenting on posts
11:43 - and
11:44 - i've already like as well
11:46 - thought about validation and server
11:48 - validation which is an important thing
11:50 - for us to learn to validate the data and
11:53 - for example as we see here we already
11:55 - have a user with the username user if we
11:58 - were to try to register another user
11:59 - with that username and click here on
12:02 - register user we get errors and we get
12:04 - as well an array of errors right here
12:07 - and saying confirm password passwords
12:09 - must match actually it validated the
12:11 - passwords before the user
12:14 - if i were to put two matching passwords
12:16 - it will still have an error saying that
12:19 - the username is taken because it is
12:21 - taken and now if i solve all the uh the
12:24 - errors let's say user to which doesn't
12:27 - exist on our database and we say the
12:29 - email um well i set it up to be jane so
12:32 - i was meant to type jane here as a
12:34 - username and this should go through and
12:37 - we're requesting more fields than just
12:39 - the token and we click
12:41 - here register and there we go we get all
12:43 - the details back of from our user table
12:47 - record and we can use this on the client
12:49 - to authenticate and send protected route
12:52 - requests so yeah
12:54 - and by the way i didn't mean protected
12:56 - route and then protected operations
12:58 - since there's only one route when using
13:00 - graphql so i just wanted to demonstrate
13:02 - quickly our app and yeah this is of
13:04 - course we have more mutations and
13:06 - queries to build once we start building
13:08 - this app
13:09 - i hope that this gave you a clear
13:10 - understanding of what graphql is and
13:13 - that you're excited for building this
13:14 - project i know i'm excited about
13:16 - releasing this series thank you for
13:18 - watching and will see you in the next
13:19 - video cheers
13:23 - all right welcome to the first class of
13:26 - this series
13:27 - uh i decided to call them classes
13:29 - because lesson is way overused someone
13:32 - beat me to that and
13:34 - to be honest it sounds boring i wouldn't
13:36 - use lesson and video it's like
13:39 - everything is a video so i had to stand
13:41 - out okay
13:42 - all right enough of that
13:44 - now that you know what this project is
13:45 - about and what technology that we're
13:47 - going to use and why we're going to use
13:49 - it let's actually start to set up our
13:51 - development environment
13:53 - just to make sure to be on the safe side
13:56 - make sure you have node installed and
13:58 - npm i'm pretty sure you have it if you
14:00 - don't go to nodejs.org and download the
14:03 - latest stable version or the current one
14:06 - to make sure that you have it open up a
14:08 - terminal window and do node v
14:11 - and i have it i have 10 15 3 whatever
14:14 - and do mpm-v to make sure that you have
14:17 - npm installed
14:18 - all right other than node
14:21 - we're going to use mongodb atlas which
14:23 - is a cool service by mongodb which lets
14:26 - us create
14:27 - one free cluster
14:29 - just because it's one it doesn't mean
14:30 - we're limited we can have as many
14:32 - databases and collections within that
14:34 - one cluster so yeah we're going to use
14:36 - this so go to mongodb.com and let's go
14:40 - to try free sign up for an account if
14:43 - you don't have one
14:44 - i'll sign up for one here as well so
14:47 - put my email
14:50 - my name
14:52 - misspelled my own name
14:55 - for the
14:56 - password and that's okay we need to
15:00 - agree guys
15:02 - all right let's create an account
15:08 - alright asks us to set up a couple of
15:10 - things
15:11 - i'll say i'm learning mongodb
15:14 - i'll select aws and select the uh the
15:17 - one that's nearest to you i'll select
15:20 - okay i don't have three tier in london
15:21 - so i'll select the ireland one if you're
15:23 - in america you're probably gonna select
15:24 - north virginia or or origin oregon i
15:28 - don't know what that is
15:30 - sorry americans i don't know what that
15:32 - reads like all right so
15:34 - make sure that you select stuff that's
15:36 - just the free tier you can sign up of
15:38 - course for a paid account it's based on
15:40 - uh it's hosted with aws so the
15:42 - performance will be great
15:44 - so cluster name
15:46 - i'm just going to give it cluster 0
15:48 - that's fine i'll just say create cluster
15:53 - and there we go my cluster has been or
15:55 - is being created um
15:59 - while it creates let's create a user
16:02 - that we can use to connect to this
16:04 - cluster and edit databases and stuff
16:06 - like that so here let's go to security
16:09 - and then go to
16:10 - add new user here i'll give it a
16:13 - username say
16:14 - just classed like this
16:17 - and i'll have it auto generate a
16:19 - password actually i want to see that
16:20 - password because i'm going to need it
16:22 - and let's say add user
16:25 - make sure that your user
16:27 - if you want you can as well customize
16:29 - the role what
16:30 - what type of permissions they get read
16:33 - and write any database is okay for me
16:35 - but if you want to just lock it down to
16:37 - a specific database know that you can do
16:39 - that as well
16:40 - all right so one more thing that we need
16:42 - to do is go to ipwhitelist we need to as
16:46 - well give
16:47 - a certain ip address that we allow that
16:50 - ip address to connect to our database
16:52 - otherwise no machine is able to connect
16:54 - to this database so go to security
16:56 - ipwhitelist and go here add ip
17:00 - address you can add your current machine
17:03 - ip but i find the problem with this is
17:05 - that sometimes your ip changes and you
17:08 - fail to connect to it and you find
17:09 - yourself coming back to this
17:11 - dashboard and adding a new ip so as a
17:14 - just because we're in development i'm
17:16 - gonna click here allow access from
17:18 - anywhere which will allow any machine to
17:20 - connect to this cluster
17:23 - but in production of course that's not a
17:24 - good idea you only want your server to
17:26 - access your database all right so our
17:28 - cluster is still being created so i'll
17:31 - be back once this is done
17:33 - [Music]
17:36 - okay so our cluster has now been created
17:40 - uh let's leave it like that for now
17:42 - i'm gonna go to the desktop let's create
17:44 - our project i'm just going to create a
17:46 - folder here
17:47 - i'll call it merge
17:49 - like this and open it using vs code
17:54 - and here i'll open up the terminal
17:56 - window
17:57 - uh when i create
17:59 - uh actually we need to initialize an npm
18:01 - project so let's do npm init i'm just
18:03 - going to do dash y but you can as well
18:05 - write any details that you want i'm just
18:07 - going to leave it right like that
18:10 - i'm going to create two files
18:12 - so here i'll create an index.js and i'll
18:15 - create a dot get ignore
18:18 - file
18:19 - and by the way i'm going to initialize a
18:22 - get repository here
18:24 - and i'm going to have the pro the files
18:27 - for this project are going to be in a
18:28 - repository depending on whether i've
18:30 - finished the whole project and uploaded
18:32 - it on the github or not there will be a
18:34 - link in the description which is with
18:36 - each
18:37 - part of the video each class in its own
18:40 - branch so for example this would be
18:41 - class one and it will have the complete
18:43 - code for this
18:44 - class for this video all right so let me
18:47 - close this actually we need to install
18:50 - some dependencies so here we'll say npm
18:52 - install
18:53 - and we will need apollo server
18:57 - and graphql
18:59 - and mongoose that we will use to connect
19:02 - to our database so let's leave that to
19:04 - install i'll go to the index.js
19:07 - here i'll bring the apollo server so
19:09 - i'll say const apollo
19:12 - server
19:13 - equals require
19:15 - and i'll require apollo
19:18 - server like this which hasn't been
19:21 - installed but that's fine
19:23 - and here
19:25 - the thing is we need to have something
19:27 - called type definitions
19:30 - we'll say const
19:31 - type
19:32 - usually referred to as type defs like
19:35 - this
19:36 - and
19:37 - for this we need uh something called gql
19:39 - we can import that say const gql
19:43 - not from equals require
19:46 - and here we'll get it from something
19:47 - called graphql tag which is one of the
19:51 - the dependencies of apollo server so
19:53 - that's installed with apollo server here
19:55 - we'll say gql
19:57 - um and do backticks like this which is a
19:59 - tag template string and here we will
20:02 - write our types our graphql types
20:05 - and
20:06 - here we will start with type query
20:09 - and by the way to get um to get syntax
20:12 - highlighting inside of this ticks
20:14 - you need to install something called
20:16 - where is it it's right here graphql for
20:18 - vs code so this will have synth will
20:21 - allow you to have syntax highlighting
20:23 - inside of these backticks for graphql
20:25 - all right so here we'll have type query
20:28 - and inside of our types
20:30 - when we have the type query inside of
20:32 - here we will have all of our queries set
20:34 - them up and say what type they return so
20:37 - one of the queries that we're going to
20:38 - have just to test it out i'll call this
20:42 - say hi
20:44 - and it will return so
20:46 - kind of like typescript if you've used
20:48 - we need to say a return type for this it
20:50 - will return a string
20:52 - and we can add an exclamation mark to it
20:54 - that means it's required it has to
20:56 - return a string or we can leave it like
20:58 - that
20:58 - it's always better to have the required
21:01 - fields as required so you know you will
21:03 - have more type safety
21:05 - all right so
21:07 - here we need as well something else
21:08 - called resolvers so we'll say cost
21:11 - resolvers
21:13 - and what resolvers do is for each query
21:16 - or mutation or subscription it has its
21:19 - corresponding
21:21 - resolver so if this query is called say
21:24 - hi it needs a resolver called say hi
21:27 - which processes some sort of logic and
21:29 - then returns what this query returns so
21:32 - here
21:33 - we will say query again
21:35 - because we need to group all of our
21:37 - queries inside the query object and all
21:38 - of our mutations inside the mutation
21:40 - object so here we'll say query and we
21:43 - only have one right now which is this
21:44 - say hi so we can say say hi
21:48 - as a function and here we need to return
21:51 - we can have as well we can have it as an
21:53 - arrow function i think and for this it's
21:55 - simple enough to just have it as an
21:56 - arrow function so here this will just
21:59 - return
22:00 - or actually we don't need to the return
22:02 - keyword here it will just return
22:05 - hello
22:06 - world
22:07 - like this
22:08 - now we need to set up our apollo server
22:11 - actually let me close that here i'll say
22:13 - const server
22:16 - equals
22:17 - new
22:18 - apollo
22:19 - server
22:20 - and this takes two options for now the
22:24 - type definitions so you you see there is
22:26 - an option called typedefs and i can say
22:29 - the typedef is our typedefs but since
22:32 - this is es6 we don't need to do that it
22:35 - infers on its own if the
22:37 - key and the value are the same it will
22:39 - take that
22:40 - so and we have as well the resolvers
22:42 - which are called resolvers so this will
22:44 - do like this all right so now that we
22:46 - have our
22:47 - server instance we can actually start
22:49 - our server so we can say server
22:52 - dot listen
22:54 - and we can leave it like that or we can
22:56 - specify a port i'll specify a port and
22:59 - i'll say
23:00 - 5000 and this returns a promise so we
23:03 - need to say that then and we get a
23:05 - result object
23:07 - and there are a couple of things in this
23:08 - result object but we're not going to
23:10 - need them we only need one just um i'll
23:13 - show you so i'll say console.log once
23:15 - the server starts
23:17 - and i'll do backticks and say server
23:20 - running at and an injector variable here
23:24 - a template variable we say result or res
23:27 - dot url so this will log it to the
23:30 - console so that we can control click it
23:32 - and open our server
23:34 - all right uh like i told you just to
23:37 - show you
23:38 - that apollo server actually if you open
23:40 - your node modules and you go down here
23:42 - you'll see that express is installed
23:44 - it's only running an express server in
23:45 - the back we're not going to write any
23:47 - specific express routes but just to show
23:49 - you that it's actually using express uh
23:51 - in
23:52 - in the you know behind the scenes all
23:54 - right so here we can say node oops node
23:57 - index to run our index file
24:00 - and there we go we get server running at
24:02 - localhost 5000 and if we go to our
24:06 - um
24:07 - to our
24:08 - actually not 8000 we need to go to 5000
24:11 - localhost 5000 there we go we get our
24:14 - graphql playground
24:16 - here we can say query to test out the
24:19 - query that we created we can do control
24:21 - space and it will tell us all the
24:23 - queries that we have right now which are
24:25 - just the say hi right now and you can
24:27 - also go to the schema and it will tell
24:29 - you what queries and mutations and
24:31 - subscriptions that you have obviously we
24:33 - have the just the one right now and of
24:36 - course you can go and it will tell you
24:37 - that this
24:38 - returns a string and explains what the
24:41 - string is of course you don't need that
24:43 - alright so here we can press play and
24:46 - there we go we get hello world simple as
24:48 - that and if we change it or like we can
24:51 - say hello world with a couple of
24:53 - exclamation marks we save and we stop
24:55 - and run the server again node index
24:59 - and we go back and we do control by the
25:02 - way you can do control enter to execute
25:05 - it and there we go we get this has
25:07 - changed now all right so let's actually
25:09 - connect to our database
25:11 - for this we're gonna need mongoose so
25:13 - here let's say const mongoose
25:16 - equals require
25:18 - mongoose so mongoose is the
25:21 - orm library object relational mapper
25:24 - which lets us interface with the mongodb
25:27 - database that we have
25:29 - so here
25:30 - at the bottom actually we need to
25:32 - connect to the database before we start
25:34 - our server so let's do here
25:36 - mongoose.connect
25:39 - and for us to connect we need an actual
25:41 - connection string and we can get that
25:43 - from our
25:45 - mongodb
25:46 - atlas
25:47 - dashboard so here we go to connect
25:50 - and do i have that password still in the
25:52 - clipboard i do call actually i need that
25:54 - password that i copied from earlier
25:56 - so i'm just going to paste it here
25:58 - and then i'll go back go to connect
26:00 - again and go to connect your application
26:02 - and grab this connection string so click
26:04 - copy here
26:05 - and it's better practice that you put
26:07 - these
26:08 - sensitive key data in their own file so
26:12 - here i'll create the file call it config
26:15 - click on gig
26:17 - config.js
26:19 - and here i'll say module.exports
26:23 - equals and i'll export an object i'll
26:25 - have a key
26:27 - db
26:28 - and this will hold the connection string
26:30 - so i'll do a string and paste that
26:32 - and here instead of this tag password i
26:35 - need my actual password so i'll cut that
26:37 - from there and put it instead of this
26:39 - password so that's my user that's the
26:41 - password that's the cluster
26:44 - the cluster address so we can connect to
26:46 - it
26:47 - and i'll go to the get ignore and
26:50 - of course we need to remove the node
26:52 - modules
26:54 - so that it doesn't track that and we
26:56 - need to remove as well the
26:58 - config.js so that if we push this code
27:00 - to a github repository or
27:02 - any or bitbucket or whatever we don't
27:05 - actually push this because this is
27:06 - sensitive data
27:08 - all right so let's save all files and
27:11 - here in the mongoose connect we need to
27:12 - bring that mongodb connection string so
27:14 - here we'll say const
27:17 -  or actually we need to destructure
27:19 - it
27:22 - db
27:25 - equals require
27:27 - so from the same directory
27:30 - config.js like this
27:32 - all right so now that we have that
27:34 - string
27:35 - inside of here we need to say mongodb
27:37 - like that
27:39 - and
27:40 - here we need to pass some an object some
27:43 - options we only need this uh use new url
27:47 - parser otherwise it's going to give us
27:48 - some deprecation warning if we don't and
27:51 - this returns a promise so we need to say
27:52 - dot then
27:54 - and we don't need the result there's
27:56 - nothing there but then we actually do
27:59 - this
28:00 - server.listen
28:02 - so here we need to say return
28:05 - server.listen like this and import 5000
28:08 - and then we need to as well chain this
28:10 - dot then to the end of this
28:12 - and then
28:13 - everything will run the same but except
28:16 - now it will actually connect to the
28:18 - database
28:20 - let's actually as well log something
28:22 - from here to just show that we've
28:24 - connected to the database successfully
28:25 - so i'll say console.log
28:28 - mongodb connected
28:31 - like this
28:33 - let's save uh stop this development
28:35 - server and say node index again
28:40 - all right so i get an error
28:43 - can't find module config.js
28:48 - oh because
28:49 - here it's an actual file and not a
28:52 - dependency
28:54 - so here i'll say node index again
28:57 - and there we go get no mongodb connected
28:59 - and server running at 5000. of course
29:02 - right now we're not doing anything to
29:03 - the database so we we're just connected
29:06 - without performing any operations all
29:08 - right so what i want to start to do now
29:10 - is to create the database models so that
29:12 - we can use them to interface with the
29:14 - database with so here i'll create a
29:17 - folder called models
29:19 - and inside of here i'll create the user
29:21 - model so user with a capital u dot js
29:25 - and this will hold
29:26 - details about the schema
29:29 - mongodb is schema-less but with mongoose
29:31 - we can specify a schema to have more
29:33 - safety when working with our server code
29:35 - so here i'll
29:37 - bring two things from
29:39 - mongoose so const and this structure
29:41 - model and schema with a capital s
29:46 - like this
29:47 - let's say equals require
29:50 - mongoose
29:54 - here i'll say const
29:56 - user
29:57 - schema
29:58 - equals
29:59 - i'll say new schema
30:02 - and here we'll pass it the fields
30:04 - and our user will have a username which
30:07 - will be unique to each user and here
30:10 - i'll say string now we could say on each
30:13 - entry that it's a string and it's
30:16 - required we could specify it here but
30:18 - because we're using graphql as a
30:20 - middleman we can use graphql itself to
30:23 - say that these fields are required or
30:24 - not so we will handle that on the
30:27 - graphql layer and not the mongoose layer
30:31 - so here we'll have a password for our
30:33 - user it's going to be a string as well
30:36 - we're going to have a username actually
30:38 - we've had the username i'm going to have
30:39 - an email
30:40 - it's going to be a string
30:42 - and a created ad which is i'm going to
30:44 - store it as a string you can store it as
30:46 - a date it doesn't make a difference as
30:48 - long as your code works well with it so
30:50 - here we'll say module.export and we need
30:52 - to export our model so module.exports
30:56 - equals
30:57 - model we need to call the model pass it
30:59 - a name so the name of our model will be
31:01 - user with a capital u and the schema it
31:04 - uses is going to be the user schema
31:06 - all right so now we're going to create
31:08 - another model for the post so we'll say
31:10 - post.js
31:13 - and here we'll
31:14 - bring the same stuff the model and the
31:16 - schema so we can copy that paste it here
31:19 - and we'll say const
31:20 - post schema equals
31:23 - new schema
31:25 - and we'll pass it a couple of things
31:28 - each post will have a body which is
31:29 - going to be a
31:30 - string and we'll have a username so who
31:34 - posted this which is going to be a
31:35 - string as well it's going to be the
31:36 - user's username it will have a created
31:39 - ad
31:40 - which is going to be a string now we can
31:42 - as well specify a default value for the
31:44 - created at here but we will do that on
31:46 - the graphql resolvers i prefer to do
31:49 - that on the graphql resolvers
31:51 - so here each post could have as well an
31:54 - array of comments
31:55 - so here we'll say comments
31:57 - and do like this square brackets as an
32:00 - array and here do curly braces to have
32:02 - an object and each comment will have a
32:05 - body so this will be a string it will
32:08 - have a username so who posted this
32:11 - and this will be a string as well
32:13 - and a created add
32:16 - a string as well
32:18 - so after comments we'll have likes
32:21 - it's going to be an array
32:23 - and we could just have user names but
32:26 - you could um it's better to give them a
32:29 - created at as well
32:31 - so that you can have some you know you
32:33 - can have some analytics on your
32:35 - application and know what's going on and
32:37 - when likes are being submitted and all
32:38 - of that good stuff all right so i'll
32:40 - give it a creator that which is going to
32:41 - be a string and
32:43 - even though that mongodb like i said is
32:45 - a
32:46 - schema less and it's a nosql so there's
32:49 - it's not uh doesn't have relations but
32:51 - the rm itself lets us have relations
32:53 - between our models now we don't have to
32:55 - do this but you could link your data
32:58 - models so i could as well say user here
33:01 - and link it to a specific user this post
33:03 - and then here we can say type
33:06 - this is going to be referred to another
33:09 - schema object so we'll say schema dot
33:12 - types like this dot
33:15 - object
33:17 - id
33:19 - and here we'll say ref and we'll pass it
33:21 - the table or the collection which is
33:24 - users so this allows us to later use
33:27 - mongoose to
33:29 - automatically populate this user field
33:31 - if we want using some mongoose methods
33:34 - all right so
33:36 - here we need to export this so we say
33:38 - module.exports equals model
33:41 - again we give the name of the model
33:42 - which is post
33:44 - and we give the schema which is going to
33:46 - be
33:46 - post
33:47 - schema
33:49 - all right
33:50 - now let's go back to our index let's
33:52 - import our post model so here we'll say
33:54 - const post
33:56 - equals
33:57 - uh why i'm separating these because it's
33:59 - it's just general convention that you
34:01 - keep your relative imports here and then
34:03 - your dependency imports up here so here
34:06 - i'll say require
34:07 - and
34:08 - go to the models folder models oops
34:11 - models slash
34:13 - post
34:14 - so now that we have the model
34:16 - uh what i want to do now is i want to
34:18 - create a query for fetching all the
34:20 - posts from the database
34:22 - i'll actually get rid of this say hi and
34:24 - say get posts here
34:27 - so this get post will get all the posts
34:30 - from our database and it's going to go
34:32 - to the collection
34:33 - posts and bring all the documents from
34:36 - there and return them back to our user
34:38 - but before that actually i want to
34:39 - create a post on our database so that we
34:41 - can fetch because there isn't any right
34:42 - now so let's go to our cluster
34:45 - and let's go to collections
34:48 - so here we have no collection right now
34:50 - let's click on add my own data let's
34:53 - create a database i'll just call this
34:55 - merg
34:56 - and
34:57 - collection we're just going to create
34:59 - the first collection call it posts let's
35:01 - click create
35:04 - let's insert a dummy document here
35:07 - it's going to give an automatic id here
35:09 - i'm going to give it a field body
35:12 - and this will say
35:13 - this is a sample post
35:17 - and i'm gonna give it
35:22 - i'm gonna give it another another field
35:24 - click this uh add this plus button here
35:27 - i'll give it a user
35:29 - name and this will say user
35:32 - click the plus button again and give it
35:34 - a created oops
35:36 - created
35:38 - add
35:39 - just give it some gibberish it's just a
35:41 - string after all we're gonna later have
35:44 - our code create these instead of just
35:46 - create them manually of course
35:49 - actually i'm just going to leave it like
35:50 - that say insert
35:54 - all right now that we have our document
35:55 - let's actually fetch it let's go to our
35:57 - code here our get posts let me close
36:00 - this terminal uh our get posts is going
36:03 - to return a type of uh post so it's
36:06 - going to return an array of posts so we
36:08 - do these
36:10 - square brackets and say post which is a
36:12 - graphql type that we haven't created yet
36:14 - so let's create that we will say our
36:17 - post so type post will have a couple of
36:20 - fields so we'll have an id it's going to
36:22 - be of type id like this and we put an
36:25 - exclamation mark saying that this is
36:26 - required we need to have it you will
36:28 - have a body
36:30 - of type string and it's going to be
36:31 - required you have a created ad
36:35 - a required string as well
36:37 - we'll have a username oops
36:42 - username
36:43 - of type string
36:45 - and you will have
36:47 - actually i'm just going to leave
36:49 - let's forget about comments and likes
36:51 - for now and let's keep it like that and
36:54 - here for our query so we have um get
36:57 - posts let's actually create a resolver
36:59 - for it i'm going to get rid of that say
37:01 - hi we don't need that anymore i'll say
37:03 - get posts
37:04 - and as a function like this
37:07 - and here we need to use our post model
37:09 - to fetch these posts
37:11 - so actually i'm going to use async await
37:14 - syntax so i'll add the keyword async
37:17 - before this
37:19 - function
37:20 - and here i'll say try because the thing
37:22 - is is like maybe your query will never
37:24 - fail but if you don't do this if you if
37:26 - your query fails it might stop your
37:29 - actual server which is not good so here
37:31 - we'll say const posts so let's first
37:34 - choose both we'll say await because this
37:36 - is an async operation post our model
37:39 - dot find
37:41 - and uh so yeah this is it it's don't
37:44 - find if you don't specify any uh
37:46 - condition it's gonna find all of them
37:48 - it's gonna fetch all of them so here
37:50 - we're just going to say return posts
37:53 - and here we'll say catch
37:55 - if we get any error we'll say throw
37:58 - new
38:00 - error
38:01 - and we pass it that error
38:03 - all right this should do let's save all
38:05 - files make sure you save all files
38:07 - and let's stop our server and start it
38:09 - again say node index
38:12 - all right it runs without any errors and
38:14 - we go to our local host 5000
38:17 - you can press this refresh sometimes you
38:19 - need to refresh it to get the new
38:20 - queries and here it's it's having error
38:23 - because this query doesn't exist anymore
38:25 - so we can use the other query which is
38:27 - get posts and it gives us some
38:28 - intellisense so we need to open these
38:30 - curly braces and specify which fields we
38:32 - want so here if we press control space
38:35 - it tells us that we can get these fields
38:37 - which is exactly like the type that we
38:38 - defined so let's actually get all of
38:40 - these fields so
38:42 - select all of them body what else do we
38:45 - have created add and the username
38:48 - and let's click control enter
38:51 - and we get an empty array
38:53 - all right let's check our code
38:56 - interesting let's check our database
38:59 - oh okay i know why
39:01 - my bad i forgot something so let's go to
39:03 - our config right here it says test but
39:06 - this is actually the database name we
39:08 - need to give the database name uh the db
39:11 - name is merg
39:13 - it's and it's not test and by the way
39:15 - even if you don't have a database on
39:17 - atlas and you just give a name here and
39:19 - you perform
39:20 - persistence like you create
39:23 - a document it's actually going to create
39:25 - this database if you have the
39:26 - permissions for it so i'm going to stop
39:28 - the server and run it again and this
39:30 - time it should work
39:32 - all right let's go and let's run the
39:34 - same query and there we go i get the
39:37 - post that we just created and yeah so
39:40 - the query is working all right so this
39:42 - is it for this video
39:46 - hey
39:47 - welcome back to class number two
39:50 - all right you might have heard the terms
39:51 - ui and ux and those have to be good in
39:54 - your application but have you heard this
39:56 - term called dx let me know in the
39:58 - comments if you have if you haven't dx
40:00 - is developer experience
40:02 - and right now we don't have a really
40:03 - good one
40:04 - because
40:05 - a
40:06 - our type type definitions are all in the
40:09 - index and these will grow bigger and our
40:11 - resolvers as well are an index and each
40:13 - time we have to restart our server we
40:15 - have to do it manually let's fix these
40:17 - before we dive into more functionality
40:20 - so these type devs will be in their own
40:22 - file so here i'll create a folder called
40:24 - graphql
40:26 - and here i'll create a file called type
40:29 - defs
40:30 - dot js
40:32 - so here i'm going to cut these typedefs
40:36 - paste them here
40:37 - we need to bring gql so we're going to
40:39 - say const
40:41 - gql
40:42 - equals require
40:44 - you can import it from apollo server as
40:46 - well because graphql tag is just a
40:49 - subdependency of that as well and we
40:50 - need to export this so we'll say module
40:52 - dot exports
40:55 - equals gql blah blah blah
40:58 - all right so here we need to import
41:00 - those so here we'll say cons
41:02 - type defs
41:03 - equals require
41:05 - and we require what is it
41:08 - graphql slash type defs
41:11 - and the resolvers as well and for the
41:14 - resolvers i'm going to divide them
41:16 - we're going to have the resolvers for
41:18 - posts in their own file and resolvers
41:20 - for
41:21 - users in their own file as well because
41:23 - otherwise we're going to have one
41:24 - massive file with all the resolvers so
41:26 - here i'll create a folder called
41:28 - resolvers
41:29 - i've said resolvers like 10 times
41:31 - resolvers resolves
41:33 - i'll create an index js and i'll come
41:35 - back to this
41:36 - and here i'll create a post
41:39 - dot js
41:41 - and uses
41:43 - js
41:44 - and let's go back to our index so here
41:48 - let's cut this actually let's just cut
41:50 - this
41:52 - or just this query
41:54 - remove this
41:56 - and here in the where is it the post
41:58 - let's say module oops module dot exports
42:03 - equals this object and it's going to
42:05 - have a query actually no we copied the
42:06 - query we just paste that in
42:08 - we need the post module or mod model so
42:12 - we'll say const post
42:15 - equals require
42:17 - uh we go back one level actually we go
42:19 - back two levels to model slash
42:22 - post
42:23 - all right
42:25 - and
42:26 - we need a way to combine all these
42:28 - resolvers so here in the index
42:31 - we want to import that
42:32 - post resolver so we'll say
42:34 - const
42:36 - of course it's the default um export so
42:38 - we can name it anything so we'll call
42:40 - them
42:41 - posts resolvers
42:43 - solvers like this
42:46 - all right here we get them from the same
42:48 - directory posts
42:50 - and uh let's import the uh
42:52 - the user's resolvers as well while we're
42:54 - here resolvers
42:56 - even though it's empty right now
42:58 - so we'll save from users
43:01 - and here we'll uh export
43:04 - this um object so let's say
43:07 - module.exports so this object will
43:09 - combine both of them we'll say query
43:12 - for now we have just query from post
43:14 - resolvers so we'll say we'll do the
43:17 - spread operator
43:18 - posts resolvers dot query
43:22 - and here we'll say mutation actually we
43:25 - don't have any mutations right now we'll
43:26 - just leave it like that
43:28 - and because right now we only have this
43:29 - one query
43:31 - all right so
43:32 - now our type devs are there
43:34 - and um
43:36 - our
43:37 - resolvers are there so we need to import
43:39 - these resolvers
43:40 - so we don't need this post model anymore
43:42 - we can get rid of that and say const
43:44 - resolvers
43:46 - equals require
43:48 - and we say slash graphql slash resolvers
43:52 - because uh it's in the index we don't
43:54 - need to say anything more
43:56 - and the names are still the same so
43:58 - everything should work the same we don't
43:59 - need gql anymore here
44:01 - and let's save everything
44:03 - let's stop the development server and
44:06 - actually
44:06 - now i want to install nodemon you
44:09 - probably have heard of this
44:10 - module or a library if you haven't it's
44:12 - just something that starts a node
44:14 - application and whenever we change any
44:16 - file within this directory it restarts
44:18 - the server for us
44:20 - so i'm going to say mpm oops
44:22 - npm install dash capital d as a so it
44:26 - installs as a dev dependency and say
44:29 - nodemon
44:30 - and here i'll write the script for it so
44:32 - i'll say the script start will say
44:35 - nodemon
44:37 - index.js
44:39 - or we can just say index
44:41 - all right i'll save that i'll wait for
44:43 - it to finish okay now that it's done we
44:45 - can just say npm start
44:48 - all right it started then let's test out
44:50 - our query
44:52 - all right oh it's so instant that i
44:53 - think that it's not actually sending it
44:56 - let me make sure
44:57 - yeah okay it is sending that query all
44:59 - right so everything is working the same
45:00 - now we can uh get going with the rest of
45:02 - the functionality so before implementing
45:05 - the rest of the crud functionalities on
45:07 - our posts like creating posts and
45:09 - editing them or deleting them let's
45:11 - actually create ways for our users to
45:14 - authenticate because the create and
45:16 - delete posts
45:18 - actions or resolvers
45:21 - have to be from protected user or
45:23 - authenticated users so let's actually
45:25 - start with registering users so first
45:28 - thing is we add an actual query for or
45:31 - mutation for that so here we'll say
45:34 - mutation or type
45:36 - mutation
45:39 - because this is making a change in our
45:40 - database so here we'll say register
45:43 - and
45:44 - here we can have
45:46 - input from our users as arguments and
45:49 - take that and do stuff with it in our
45:52 - business logic so here we can say that
45:55 - we can take a username a password a
45:57 - confirm password and email but we can
46:00 - create a type for that as well if we
46:01 - don't want this to be a massive line
46:03 - here so i'll say register
46:06 - input like this of type
46:09 - register
46:10 - uh register oops no register input with
46:13 - a capital r like this and i'll create
46:15 - that type here so i'll say
46:17 - and this is not a type this is an input
46:19 - which is a different
46:20 - type of type which is given as an input
46:23 - to um to a resolver
46:26 - for it to return something for us so
46:27 - here i'll say type
46:29 - register
46:30 - oops
46:32 - register input
46:34 - and this will have the four fields so
46:36 - username
46:38 - type string is going to be required a
46:41 - password
46:43 - type string required again
46:45 - a confirm password
46:48 - because again this is for the register
46:49 - form so we need two uh the confirm
46:52 - passwords as well so and we need the
46:54 - email as well we'll say string and it's
46:58 - required
46:59 - all right and this needs to return
47:01 - something so it will return a type user
47:04 - so let's create this user and it's
47:06 - required so let's say type
47:09 - user
47:11 - and this will have an id of type id
47:14 - and it will have an email
47:17 - type string
47:18 - and by the way even if we specify
47:20 - required it doesn't mean that the user
47:22 - has to get these you know this that
47:24 - means we have to return them from our
47:25 - resolver but the user can still opt out
47:28 - from not getting these
47:29 - so
47:30 - it will return an authentication token
47:34 - and it will return what else the
47:36 - username of the user
47:39 - which is a string
47:41 - and the created at
47:46 - all right so let's actually implement
47:48 - this resolver for this register
47:51 - and here i'll go here actually here
47:54 - let's add a mutation field mutation
47:57 - and this will take
47:59 - from the user's resolver
48:01 - that mutation object which we haven't
48:03 - created yet but we will so let's save
48:06 - this and close it
48:08 - let's go to our users here we'll need
48:10 - our user mongoose model so we say const
48:13 - user equals require
48:15 - and we go back two levels to models
48:19 - models slash user
48:22 - and here we'll say module dot
48:26 - exports
48:27 - and we'll export this object and for now
48:29 - we'll have a mutation
48:31 - and here we need to implement our
48:33 - resolver for the register so we'll say
48:35 - register
48:37 - and now this needs to take some input
48:39 - and we have four things that we can
48:42 - get in our
48:44 - resolver arguments so the first will be
48:46 - parent i'll explain these in a second
48:49 - the second is args arguments
48:52 - the third will be context and the fourth
48:54 - will be info
48:56 - most of the time we'll just be using
48:57 - args
48:58 - but parent
49:00 - is it it gives you the result of what
49:03 - was the input from the last step but
49:05 - here it will be undefined because there
49:06 - is no there was no step before this but
49:09 - in some cases you could have multiple
49:11 - resolvers so data goes from one resolver
49:14 - and then it goes to the other and then
49:15 - it goes to the other and then
49:17 - it gets processed in different ways and
49:19 - then returned to the user but here we
49:21 - don't need it so we can just say um
49:23 - underscore like this so it doesn't you
49:25 - know take up any space
49:27 - so arguments here this is these
49:30 - arguments from here it's this register
49:32 - input so args right now for this
49:35 - resolver will have a register input and
49:37 - inside of that we'll have these four
49:39 - fields
49:40 - and here we have context which i'll
49:42 - explain later you'll see what this does
49:44 - and info just has some general
49:46 - information about um some metadata that
49:48 - we actually almost never need all right
49:51 - so here inside of here we're gonna have
49:53 - a couple of steps what we need to do i'm
49:55 - gonna put a couple of to do's and come
49:58 - back to them so the first thing is we
50:00 - need to validate the data so let's say
50:02 - validate user data
50:04 - and this means like we could have empty
50:06 - fields so we need to make sure to to
50:08 - have server validation in case we have
50:10 - some problems like passwords don't match
50:12 - email already exists etc
50:15 - in our case emails are not um
50:17 - unique but usernames are so we need to
50:19 - check for that
50:20 - so we will do a special check for that
50:22 - because we need to check in our database
50:24 - so here we'll say
50:25 - make sure
50:27 - user
50:29 - doesn't
50:30 - already exist
50:33 - and then the first step will be to
50:36 - the hash the password before we store it
50:38 - in our database of course
50:41 - and create an authentication token so an
50:44 - auth token
50:47 - all right so we will skip the validation
50:49 - for now we'll come back to it later and
50:52 - let's first hash the password and return
50:55 - the data to our user for this we're
50:57 - going to install two packages so i'll
50:59 - say npm install
51:01 - first will be b crypt
51:04 - bcrib js
51:05 - and json web token
51:08 - so bcrypt will help us script the
51:10 - password and json web token will help us
51:13 - encrypt encode some data in a token and
51:15 - return it to our user
51:17 - so here we need to get that data that
51:19 - the user sent we can destructure it here
51:22 - but we can as well do it here i prefer
51:23 - this structuring from here so here we
51:25 - can say curly braces to destructure from
51:27 - the args and we need to further
51:30 - destructure the register input so we'll
51:32 - say register input colon and here we'll
51:34 - get our fields so we'll have our
51:36 - username
51:38 - we have an email
51:40 - the password
51:42 - oops password
51:44 - and the confirm password
51:46 - like this let prettier format it and now
51:49 - we have access to these four fields
51:51 - separately
51:52 - so here we'll say
51:54 - we'll edit the password we'll change the
51:55 - value to it to the hashed password so
51:57 - we'll say await
51:59 - because
52:00 - the bcrypt function the hashing function
52:02 - is actually asynchronous so we need to
52:05 - add as well the async keyword here to
52:07 - the function and we'll say await
52:10 - bcrypt actually we need to import it
52:12 - let's import both right now so we'll say
52:14 - const be
52:16 - crypt equals require
52:20 - b crypt
52:21 - js
52:23 - and we'll get
52:24 - the json web token so we'll say cons jwt
52:27 - equals require
52:28 - json web
52:30 - token all right
52:33 - so here we'll say
52:34 - and weight b
52:36 - crypt dot hash
52:39 - and this will take the password
52:41 - and it will ask us for the number of
52:43 - rounds usually 12 is a good number based
52:45 - on what i've seen so
52:47 - const here we want to form our
52:50 - user object so we'll say const new user
52:53 - equals and we'll call new
52:56 - user
52:57 - our model and we'll pass it the data
52:59 - that we have so the email will be email
53:02 - so we don't need to say email
53:04 - username
53:05 - oops user name
53:08 - and the password
53:10 - as well will be password so we keep
53:12 - these fields like that and we need to
53:14 - have a created at so this will be new
53:17 - date
53:18 - and we need to change the
53:20 - to iso string method to convert it to a
53:24 - string
53:25 - so here we'll say const result equals
53:28 - await
53:30 - a new user dot save
53:32 - to the database
53:34 - and now we need to return this data to
53:36 - the user but before that we need to
53:38 - actually create a token for our user so
53:41 - here we'll say const token
53:44 - token
53:44 - equals
53:46 - jwt dot sign
53:48 - and this will take some data like a
53:51 - payload to put inside the token and we
53:53 - want to encode the id so this will be
53:56 - result.id
53:58 - i want to encode the email this will be
54:00 - result.email
54:02 - and the username as well
54:05 - so res.username
54:08 - and uh
54:10 - here let's um we need to give it a
54:12 - secret
54:13 - and let's actually store this secret in
54:15 - the config file as well so we don't have
54:18 - it in our um
54:20 - in a git repository we don't make a
54:21 - mistake by sharing it with people so i'm
54:23 - going to import it before creating it
54:25 - i'll say const
54:27 - secret
54:29 - key
54:30 - like this equals require
54:32 - we go back two levels to the config file
54:36 - and let's go to that config file and
54:38 - create
54:40 - an entry here
54:41 - and say
54:42 - secret oops
54:44 - secret
54:46 - key
54:47 - equals some
54:50 - very
54:51 - secret key i don't know it doesn't
54:54 - matter this will be used as the um key
54:57 - to encrypt your uh
55:00 - encode your uh token so
55:03 - only our server will be able to decode
55:05 - this stuff
55:06 - here i'll give an array of options and
55:09 - actually here the secret goes here so
55:11 - secret key and the third parameter will
55:13 - be some options and i only need the
55:16 - option of expires in
55:18 - to give it a an expiration
55:21 - time which is going to be 1h for one
55:24 - hour so now let's say return
55:29 - here we want to spread the data of our
55:32 - user so we'll say
55:33 - spread res dot
55:35 - underscore doc where our document is
55:38 - stored i want to give the id because
55:40 - it's not by default in a doc so we'll
55:42 - say res id equals rest dot
55:45 - underscore id
55:46 - and we want to give the token as well
55:49 - so let's save all of this and see if
55:51 - this is working
55:53 - let's go to our app
55:55 - and here we can say
55:57 - mutation
55:59 - we can actually do this in a new tab
56:01 - same mutation
56:03 - and this will be register
56:06 - and we'll take a register input
56:08 - which is going to be this object that
56:10 - will have a username
56:12 - oops
56:13 - use the name
56:15 - of user
56:17 - i have a password of
56:20 - one two three
56:21 - through six
56:22 - a confirmed password
56:24 - of
56:26 - one through six and an email of
56:29 - user
56:30 - email.com
56:32 - let's send this oh actually we need to
56:34 - get some fields back so let's open curly
56:36 - braces and let's
56:38 - let's get all of them so the id
56:40 - email
56:42 - token uh what is it um
56:45 - username
56:47 - and what else the created ad right let's
56:49 - send this
56:50 - there we go we get our id email
56:53 - everything our authentication token and
56:55 - if we look at our database and we
56:58 - refresh
56:59 - we see this
57:00 - user's collection was created and it's
57:03 - got one document which has the details
57:05 - for our user cool so we're now
57:07 - successfully registering users
57:10 - but of course right now if we send this
57:12 - request it will register another user
57:15 - with the same username of course we
57:16 - don't want that so let's actually make
57:18 - make sure that this doesn't happen so
57:20 - let's go to our app
57:22 - right here we need to get a user so um
57:25 - so this is done so we can remove this to
57:27 - do and by the way you can get this
57:29 - to do what is it to do highlight
57:31 - extension to have this um highlight that
57:35 - all right so here we'll say const user
57:38 - construct
57:40 - user equals
57:42 - user dot find oops
57:44 - find
57:46 - one
57:47 - and here we need to pass a filter or a
57:49 - condition and this condition will be the
57:51 - username has to be like the username so
57:54 - we can just pass it like this
57:56 - and of course this is asynchronous so we
57:58 - need to say wait and here we'll say if
58:01 - user
58:02 - so if there is a user this is not going
58:04 - to be null if not it's going to be null
58:06 - so if user then we need to return an
58:09 - error because user already exists uh we
58:12 - can just say throw error but we can as
58:14 - well use specific errors from apollo so
58:17 - we we can import those so we say import
58:20 - i'm going to import the user
58:23 - input
58:24 - error
58:25 - this will become useful when we uh
58:27 - it's because later apollo client will be
58:30 - able to recognize the type of error and
58:32 - handle it differently so here we'll say
58:34 - require
58:36 - apollo server
58:38 - and here we'll throw we'll say
58:41 - throw
58:41 - new oops
58:43 - throw new
58:45 - what is a user
58:47 - bad input or input error and this will
58:50 - say username
58:52 - is taken
58:54 - and actually we're going to pass a
58:56 - payload for with our errors that we will
58:58 - use as well on the client so the payload
59:00 - will have an errors object and inside of
59:03 - here it will have a username key and
59:06 - this will say this username is taken
59:11 - this
59:11 - errors object will be used later on our
59:14 - front end to
59:16 - display these errors on on the form
59:18 - and actually right here this info and
59:20 - context we're not using them so we can
59:21 - just omit them we we still have to say
59:24 - to use the parent one to have the access
59:26 - to the args
59:28 - all right let's save this
59:30 - and let's check on our
59:32 - playground and let's send this request
59:35 - and there we go it says username is
59:36 - taken and if i do another username say
59:39 - john
59:40 - um we can keep everything else the same
59:42 - and we send i actually registered john
59:45 - and if i send again it doesn't register
59:47 - john because that username is taken all
59:49 - right let's now implement some
59:51 - validation as well because right now if
59:54 - we just submit some empty fields it's
59:56 - still gonna register the you know a user
59:58 - with an empty username and all that
60:00 - stuff of course we don't want that so
60:02 - let's go here
60:03 - let's create a folder here called util
60:07 - for utilities and i'm going to create a
60:09 - file inside of it called validate
60:12 - validators
60:14 - oops validators dot js
60:18 - and here i'll import
60:20 - a function so here we'll say
60:22 - module.exports or export rather and here
60:25 - i'll call it validate
60:27 - register
60:28 - oops
60:29 - register
60:31 - input
60:32 - and this will take the four fields so
60:35 - username
60:38 - email
60:39 - password
60:42 - confirm password
60:45 - and that's it and they will um do okay
60:48 - this i said this to be an arrow function
60:50 - so i'll do this
60:51 - and so here we'll do const errors
60:54 - equals an empty object for now
60:57 - and we'll say if
60:58 - username
61:00 - dot trim
61:02 - equals
61:04 - an empty string so if username is empty
61:06 - we'll say errors dot username
61:09 - equals
61:10 - username
61:12 - must not be empty
61:15 - [Music]
61:18 - here let's copy this
61:20 - let's do the same thing for email so
61:22 - ctrl d here and say email so if email is
61:25 - empty we'll say email must not must not
61:27 - be empty but as well even if email is
61:30 - not empty we need to check if it's a
61:31 - valid email so here i'll say const
61:34 - regex and i'm gonna match this string to
61:38 - a regular expression that checks that
61:40 - this
61:41 - string is an email i'm going to put this
61:43 - in this description you'll find this in
61:45 - the description so now i'm just going to
61:46 - paste it in and here i'll say
61:49 - if
61:50 - not email dot match
61:53 - and we pass this regex
61:55 - so if it doesn't match this regular
61:57 - expression that means it's not it's not
61:59 - in a format it's not in a pattern of an
62:01 - email so we'll say actually not errors
62:03 - errors dot email equals
62:07 - email
62:08 - must be a valid
62:11 - email address
62:12 - like this
62:14 - we need to check the password so we'll
62:15 - say if
62:17 - password
62:18 - dot trim
62:21 - equals
62:23 - uh empty string
62:24 - actually for password we don't add the
62:26 - trim we can have white spaces as part of
62:28 - the password that's fine and we'll say
62:31 - errors
62:32 - dot
62:32 - password equals
62:35 - um
62:36 - password
62:38 - must not
62:39 - be empty
62:41 - and if the password is not empty we need
62:43 - to make sure that the password is the
62:44 - same as the confirm password so here
62:46 - we'll say else or say else if
62:50 - password
62:51 - does not equal
62:53 - confirm password
62:55 - so we'll say
62:56 - errors dot confirm password equals
63:00 - passwords um must match
63:04 - if you've seen any of my tutorials
63:06 - before for validation this is a pattern
63:08 - that i always use
63:10 - so here i'll say
63:11 - return
63:12 - and we're gonna return the errors and a
63:16 - value for valid and this will be object
63:20 - so this valid if it's true that means
63:22 - there's no errors so we'll say object
63:25 - dot keys
63:26 - and we pass the errors
63:28 - dot length so if the length of
63:31 - object.keys of errors is smaller than
63:34 - one that means there is no errors inside
63:36 - of this so the for the data is valid so
63:39 - let's save this
63:41 - let's go to our users and bring this in
63:43 - so here we'll say const validate
63:47 - what is it
63:49 - register
63:51 - input
63:52 - and this is const
63:56 - equals require and go back two levels to
64:00 - util slash validators and actually we
64:02 - need this structuring because it's not
64:04 - the default export
64:07 - and here
64:08 - under here we'll say const and we'll get
64:11 - the valid
64:12 - and errors
64:14 - from so equals validate uh register
64:17 - input and we want to pass all these
64:19 - fields so here we'll pass them like this
64:22 - and we get that data so we remove the
64:24 - to-do's because this is done now and
64:26 - here we'll say if
64:28 - not
64:29 - valid
64:30 - then we want to return these errors that
64:32 - means we have some errors so we'll say
64:34 - throw new
64:36 - user input error and we'll just say
64:39 - errors here this doesn't matter but we
64:41 - want to pass a payload with the object
64:45 - errors so with the name errors and with
64:47 - the value of those
64:48 - errors
64:49 - so here we'll save
64:52 - let's check our app and here we send
64:54 - empty fields and we'll check
64:57 - it says validate register input is not a
64:59 - function
65:04 - i just mis misspelled this register
65:07 - let's try again
65:10 - all right we get errors and we get that
65:12 - the username is not um must not be empty
65:14 - and the password must not be empty so if
65:16 - we put some stuff in the username
65:18 - we'll get the password must not be empty
65:20 - and if we put passwords that don't match
65:23 - we get that they don't match and if we
65:25 - put an email that's not valid we get
65:27 - that
65:28 - email must be valid if we revert that
65:30 - change and we put
65:31 - past passwords that match oops
65:34 - we actually go through cool and we get
65:36 - our user nice
65:38 - let's actually quickly implement the
65:41 - login
65:42 - uh functionality
65:43 - actually for this i'm going to create a
65:44 - validator for login data as well so
65:46 - we'll say module dot
65:49 - exports exports
65:52 - dot validate
65:54 - login
65:55 - input
65:56 - and this will take only two things so
65:59 - username and password
66:02 - and then it will have
66:04 - the same as the other one an empty
66:06 - errors object and we'll say we can just
66:09 - copy this
66:11 - and paste it twice so if username
66:15 - then username must not be empty and then
66:17 - if password
66:18 - and password must not be empty
66:21 - this needs to be capital p
66:23 - and here we'll do the same we return
66:25 - errors and
66:27 - and that and now prettier will format it
66:29 - and let's copy that let's go to our
66:31 - users here we
66:33 - want to import it as well so here we'll
66:35 - say
66:37 - put it next to that and of course before
66:39 - we create our mutation we need to add it
66:40 - to our type definitions so here we'll
66:43 - say
66:44 - login we'll take we don't need the type
66:46 - because it only takes two things so
66:47 - we'll take a username
66:50 - of type string and required and a
66:53 - password
66:54 - of type string and it's required as well
66:57 - and you return a user and that's
66:59 - required let's save let's go back
67:02 - here you know mutation we'll say async
67:06 - login
67:08 - oops
67:09 - login it will take
67:11 - so it will take the parent we don't need
67:14 - that so we'll do that underscore and
67:16 - here we'll destructure username and
67:19 - password
67:20 - and remember because we have them
67:21 - straight away as arguments in the type
67:23 - defs where is it here we don't need to
67:25 - actually just destruct from a type
67:28 - all right so here we'll say
67:31 - const
67:33 - errors
67:34 - and valid equals
67:37 - validate login input and we pass the
67:39 - username
67:40 - and the password
67:43 - actually let's uh let's put a comma here
67:45 - so that squiggly line goes away
67:47 - and here we'll say
67:49 - we need to get this user from the
67:50 - database
67:52 - because if it doesn't exist we need to
67:53 - return an error because we can't log in
67:55 - a new user that doesn't exist so here
67:57 - we'll say const user equals
67:59 - await
68:00 - user dot find
68:02 - one
68:03 - and the condition will be the username
68:06 - must equal the username so just by
68:07 - username like that
68:09 - and here it will say if not user so if
68:12 - this user doesn't exist we need to throw
68:14 - an error but this will be a different
68:16 - error this is not an error for the for
68:18 - the fields themselves this is a another
68:20 - error so i'm going to give it its own
68:22 - name so we'll say errors dot general
68:26 - equals
68:27 - user
68:28 - not
68:29 - found
68:30 - and here i'll say throw new oops
68:34 - throw new
68:35 - what is it user input error
68:39 - and i'll just say wrong
68:43 - wrong threads or credentials
68:47 - oops
68:48 - initials
68:50 - and pass an object with the object
68:52 - errors in it
68:54 - else
68:55 - we want to compare this password to the
68:57 - actual password of the user to make sure
68:59 - that the password is correct so we'll
69:01 - say const
69:03 - match
69:04 - and we'll be we'll say
69:07 - await
69:08 - be crypt we'll use bcrypt again to
69:10 - compare them bcrib dot compare
69:13 - and we're going to compare the password
69:16 - to the password of the user so to user
69:18 - dot password
69:21 - and
69:22 - here it will say if not match if they
69:25 - don't match
69:26 - then we want to return an error again so
69:28 - we'll do
69:30 - actually here it's not wrong credentials
69:32 - here it's user not found
69:35 - user not found
69:38 - we'll copy the same stuff
69:40 - here we'll say here it's actually here
69:42 - that's wrong credentials so wrong
69:45 - credentials
69:47 - like that
69:49 - and if we get here that means the user
69:51 - has successfully logged in i mean the
69:53 - password is correct so let's actually
69:55 - issue a token for them so we'll say
69:57 - const token and uh
70:00 - we need to use the same function from
70:02 - here so let's actually make this into
70:04 - its own function
70:06 - let's copy this code
70:08 - and i'm going to create a function here
70:10 - a helper function will say
70:12 - constor function
70:14 - generate
70:16 - token
70:17 - and you will take a user
70:19 - and you will return
70:21 - the
70:22 - this jws dot sign and you will replace
70:26 - res with user
70:28 - and it will return us a token with the
70:30 - with this data so here let's copy this
70:34 - so here we'll say token equals
70:36 - generate token from res
70:39 - and let's copy this
70:41 - let's go up here
70:43 - do the same here but here we called it
70:45 - user so it will generate token from user
70:48 - and it will return the same data that we
70:50 - returned here so we can just copy this
70:53 - and go up here
70:54 - we will return the token except here the
70:56 - user is called user and not response or
70:59 - result all right let's save this
71:02 - and
71:03 - let's see if our validation is working
71:05 - and our
71:06 - red login
71:08 - resolver is working so here we'll say
71:10 - mutation login
71:13 - and this will take a username
71:16 - which is going to be user
71:18 - and the password which is going to be
71:21 - actually let's leave them empty to test
71:23 - out the validation
71:24 - and here let's uh let's get all fields
71:27 - so email
71:29 - token
71:30 - uh username
71:32 - and created at
71:35 - send
71:36 - okay
71:37 - oh because we we have actually a user
71:40 - that's got um that's got a username and
71:42 - a password of empty strings
71:44 - plus i forgot to throw an error if
71:47 - if the valid is false from the
71:49 - validation not even using that value so
71:51 - here before we find the user we want to
71:53 - say if
71:54 - not valid
71:56 - then here we want to
71:58 - throw the same type of error
72:01 - and here we'll say
72:03 - we'll just say errors
72:06 - and pass this errors here let's save
72:09 - and if i go back here i should get some
72:11 - errors
72:13 - okay the development server didn't start
72:16 - okay it started now
72:19 - send the same query and there we go you
72:21 - get errors user name must not be empty
72:23 - and if i put user here that goes away
72:26 - but we still get password must not be
72:27 - empty and we do one two three four
72:30 - to seven that's the wrong password we'll
72:32 - say wrong credentials and if i put the
72:35 - correct password it should log us in
72:38 - and it does cool all right so we're done
72:40 - with authentication this has been a long
72:42 - one but we've done quite a lot now we've
72:45 - refactored our app our dx developer
72:48 - experience is going to be much much
72:50 - better
72:53 - our application is coming together now
72:55 - in the last video we were able to
72:57 - implement the register and login
73:00 - mutations to register users and log them
73:03 - in and give them authentication tokens
73:04 - that they will use to now post and
73:07 - delete
73:08 - posts from our database which we haven't
73:10 - implemented yet but we will in this
73:11 - video
73:12 - will also implement a query for fetching
73:15 - a single post for the single post page
73:17 - in our front end later but before we do
73:20 - any of that i wanted to address this
73:22 - comment
73:24 - by
73:25 - sherman no rot i hope i didn't butcher
73:28 - the pronunciation of your name he's got
73:30 - the picture of the shaman from
73:32 - hearthstone which is pretty cool all
73:34 - right so
73:35 - he says would be nice to show what the
73:37 - say hi function returns in the front end
73:39 - i know it's useless but it shows us how
73:41 - all wires connect uh it's not useless
73:43 - it's actually pretty important to try to
73:45 - understand things on a lower level and
73:46 - what's actually happening behind the
73:47 - scenes
73:48 - uh i will not demonstrate the say hi
73:50 - because that's too basic i will
73:52 - demonstrate the login mutation and guys
73:56 - don't confuse yourself at the end of the
73:57 - day what graphql is is just we're still
74:01 - sending an http request a post request
74:04 - with somebody the only difference is now
74:06 - that graphql
74:07 - processes this body and re replies um
74:10 - responds in a different manner than
74:12 - traditional rest so what i'm going to do
74:15 - is i'm going to demonstrate that on
74:17 - postman so i'll copy this localhost 5000
74:21 - paste that here
74:23 - and i'll copy this body
74:25 - and let me make sure to change the post
74:27 - to
74:29 - the request to the post request and the
74:31 - body to raw
74:33 - application json
74:35 - and here i will have a body
74:37 - an object and you will have a key query
74:41 - and by the way this needs to always be
74:42 - query even if it's a mutation this key
74:44 - has to be called query and here we'll
74:46 - have a string and inside of that we'll
74:48 - put our mutation but this is not a
74:50 - multi-line string so this needs to be on
74:52 - one line let's
74:54 - put this back on one line like this
74:58 - like this and i got my server running so
75:01 - that should be fine
75:03 - all right so the only difference we need
75:04 - to escape these quotation marks
75:06 - otherwise they just
75:08 - end our string so we put the back
75:11 - um slash on them and here we just send
75:14 - our request
75:16 - and there we go we get a 200 response
75:18 - and we get our token and all the data
75:20 - that we got on the graphql playground
75:23 - the exact same thing guys it's just at
75:25 - the end of the day it's just a post
75:26 - request with a query body with your
75:29 - mutation or query inside it you can as
75:31 - well have another field for variables
75:34 - here and you can put those variables
75:37 - there and that's less confusing but
75:39 - we're not going to use this method
75:41 - because even on the client we're not
75:43 - going to send the requests like this and
75:45 - actually you can do this from the client
75:46 - using any http library like axios or
75:48 - anything but we will use apollo client
75:50 - which makes it even easier to interact
75:52 - with our graphql server all right so
75:55 - that's that let's actually jump into the
75:57 - code of our application and implement
75:59 - some more functionality all right let's
76:02 - go to our type definitions and create
76:05 - three more um queries and mutations here
76:08 - we'll have a query called get post and
76:11 - this will take a post id
76:13 - of type id and that's required and in
76:16 - return it will return a post so this
76:18 - will get only one post
76:20 - and here we will add two more mutations
76:23 - and this will be the create post
76:25 - mutation
76:26 - uh to create a post and this will take
76:29 - only a body of type string and that's
76:32 - required and it will return a post and
76:34 - that's required
76:36 - and here we'll have the delete post
76:39 - it will take a post id of type id and
76:43 - that's required and it will return just
76:45 - a string it doesn't matter what it
76:46 - returns as long as it deletes it
76:48 - successfully all right let's save that
76:50 - and let's go to posts resolvers and here
76:53 - we'll add the other resolver for get
76:55 - post so here we'll say async get post
76:59 - and we'll get the parent and we will get
77:02 - from the argument we'll destructure this
77:04 - um post id
77:07 - and here we'll say try
77:09 - and here we'll say const post
77:12 - equals
77:13 - await
77:14 - post the model dot
77:16 - find by id and we'll pass it the post id
77:21 - and here we need to say if post because
77:23 - we could give it like a wrong id or some
77:26 - or an id of a post that's been deleted
77:28 - and that could be null so we'll say if
77:30 - post so if it exists we just returns it
77:33 - return it so return post
77:35 - else we need to
77:38 - throw
77:39 - new
77:40 - error
77:41 - and say post not found
77:44 - and here
77:45 - if the try catch
77:47 - if the uh there was any error we'll say
77:49 - catch error and we'll say throw oops
77:52 - throw
77:53 - [Music]
77:54 - new
77:55 - error
77:57 - with the error object all right let's
77:59 - test that out so the server is already
78:02 - running it's restarting for me i'm going
78:04 - to refresh here just to make sure i get
78:06 - all the new queries so here instead of
78:09 - saying get posts and by the way um the
78:11 - playground inference the query if you
78:14 - omit this if you don't say query it will
78:16 - think that this is a query so we'll say
78:18 - get post and we'll pass it the post id
78:21 - of this one post that we have in our
78:23 - database so pass it here and we will get
78:27 - the id body created at
78:31 - and the username
78:33 - all right let's hit that and we get that
78:35 - post and if i give it a wrong id
78:38 - we get post not found and we get this
78:40 - error all right cool so that's working
78:43 - let's work on the create post
78:46 - um
78:47 - resolver so we go to users
78:49 - and here in mutation
78:51 - we go
78:52 - down here is that
78:54 - yeah that's the register
78:56 - so here we'll say
78:57 - async
78:59 - create post or actually let's put this
79:02 - in the um in the posts um resolvers it
79:05 - doesn't make a difference but since this
79:07 - has a lot of code already i'll put it
79:08 - here so yeah so that's not there
79:12 - we go here and we say underneath this
79:15 - query we'll say mutation
79:18 - and we'll say
79:19 - async create post
79:22 - and this will take the parent
79:24 - and it will take so
79:26 - we will destructure the body
79:29 - and inside of here what we need to do is
79:31 - um the way our protected resolver is
79:34 - going to work is that our user will log
79:36 - in and get an authentication token and
79:38 - then they need to put it in an
79:40 - authorization header and send that
79:42 - header with the request and we need to
79:44 - get that token and then decode it and
79:46 - get information from it make sure that
79:48 - the user is authenticated and then
79:50 - create a post we don't want anyone
79:52 - creating a post and i see a lot of
79:54 - people making the mistake and adding
79:56 - this authentication middleware as a
79:58 - middleware for express itself that means
80:00 - that we'll run each on each request even
80:02 - on non-protected routes the way we're
80:04 - going to do it here we're going to have
80:06 - the third argument in the apollo server
80:08 - which is the context here we'll say
80:09 - context
80:11 - and this will take a call back and here
80:14 - we get
80:15 - anything that's passed from from before
80:17 - this poll server and we get the request
80:19 - and the response from express so we need
80:22 - to say uh request actually we get we get
80:25 - them in an object so here we'll say
80:26 - request we destructure the request and
80:29 - we just want to forward that request so
80:31 - what this will do it will take that
80:32 - request body and we'll forward it to the
80:35 - context and now we can access the
80:36 - request body in our context so if we go
80:40 - back to posts
80:41 - now if we use this third argument
80:43 - context inside this context we will have
80:45 - the request body so we can access the
80:47 - headers and determine that this user is
80:49 - authenticated and we can do all of that
80:51 - inside of here but since we will use
80:54 - this
80:55 - middleware or helper function in
80:57 - multiple routes so we need to put it in
80:59 - its own function so here in the util i'm
81:01 - going to create a new file call it check
81:04 - auth like this
81:06 - and here we will need a json web token
81:09 - to decode the token that we got so we'll
81:11 - say jwt equals require
81:14 - json web token
81:17 - and here we'll say
81:19 - module dot exports
81:22 - equals this function that will take the
81:24 - context and do the following and we also
81:28 - need the secret that we have because we
81:31 - will use that as well to
81:33 - verify the tokens because we used it to
81:35 - encode the tokens so here we'll say
81:36 - const and this structure the secret
81:40 - key uh and this will be equal require
81:44 - and from the same level actually not
81:46 - from the sale level it's back one level
81:49 - config
81:50 - all right so here we need to get this
81:52 - header so we will say const
81:55 - auth
81:57 - header
81:59 - equals because at the end of the day
82:00 - this context will have a
82:03 - context will have an object and amongst
82:06 - many things it will have headers inside
82:08 - of it and inside the headers we need to
82:10 - get to this authorization header and
82:12 - here we'll say the auth header equals
82:14 - context
82:17 - dot
82:18 - actually.request
82:20 - dot headers
82:22 - dot authorization
82:26 - so here we need to check for it because
82:28 - maybe someone didn't send this header so
82:29 - we'll say if auth header
82:32 - now if we have it then we need to get
82:33 - the token from it and a convention when
82:36 - working with authorization tokens
82:38 - that we send this header with a value of
82:41 - bearer space and then we put the token
82:43 - here so what we need to say here we need
82:45 - to get that token itself and we say cons
82:49 - token equals
82:50 - auth header dot split
82:54 - and we split this by uh
82:57 - bearer
82:58 - space meaning it will have two strings
83:01 - the first one is bearer space and the
83:02 - second is the actual token so we need to
83:05 - get the second so we need to get index
83:07 - one
83:08 - because a split returns an array of
83:10 - couple of strings so here we'll say if
83:12 - token because this can as well still not
83:14 - exist so we'll say if token
83:17 - now we need to verify the token and make
83:19 - sure that this we issued this token and
83:21 - is still valid and not expired so we'll
83:24 - say try
83:25 - and because this could fail and we'll
83:27 - say const user equals
83:30 - jwt dot yeah verify
83:34 - and we pass it the token and we pass it
83:37 - our secret key
83:40 - and now we'll say return user so this if
83:43 - this fails it will go to the catch block
83:45 - and we'll say
83:46 - catch error
83:49 - and here we can we can throw any type of
83:51 - error but let's be more specific and
83:53 - let's uh import this type of error we'll
83:56 - say const and we need to import
83:59 - authentication
84:01 - error
84:03 - from not from equals require
84:07 - require
84:08 - apollo
84:10 - server like this
84:13 - and now if we fail in verifying that we
84:16 - want to throw that so we throw
84:19 - throw
84:20 - new
84:22 - authentication error
84:24 - and we will say
84:26 - invalid
84:27 - slash expired
84:30 - token
84:32 - because if this fails it will come here
84:34 - that means it's either invalid or
84:35 - expired or blacklisted as well but we're
84:38 - not doing that in our application now
84:41 - after these if statements we need to
84:42 - throw some errors as well because if
84:44 - this if statements failed um
84:46 - if these if uh conditions failed um that
84:50 - means we don't we either don't have a
84:52 - token or we don't have an auth header so
84:53 - we need to as well tell the user that
84:56 - why this failed so we'll say here throw
84:59 - new
85:00 - error
85:02 - and this will say
85:03 - authentication
85:05 - token
85:07 - must be
85:10 - well actually not provided here was
85:11 - provided but maybe it was the wrong
85:13 - format so we'll say must be
85:15 - and we escape a
85:18 - thing quotation mark and we'll say
85:21 - like this bearer space and token
85:25 - formatted like that and then we will
85:27 - close this
85:28 - and here we need to throw another error
85:30 - if we that means if we didn't get an
85:32 - auth header we'll say let's just copy
85:35 - this
85:35 - and we'll say uh authentication token
85:38 - must be we'll say provided
85:41 - provided
85:43 - or actually authentication header
85:45 - because here if we get here that means
85:47 - we didn't have the header itself
85:49 - all right let's save all of this and
85:51 - let's go to posts and actually get this
85:53 - check auth function so we'll say const
85:56 - check
85:57 - auth equals require oops
86:01 - require and we go back
86:04 - what is it two levels
86:05 - yeah two levels into util slash check
86:10 - dash auth like this
86:13 - now here we will use the context to get
86:15 - the user so we'll say const user equals
86:18 - check auth and we pass it the context
86:23 - now because the way we structured it
86:25 - here that if we don't have a headache
86:27 - throws an error here if the the token is
86:29 - not valid it throws an error here so if
86:31 - there's anything wrong with the token an
86:33 - error will be thrown here otherwise we
86:35 - will get a user and this will return a
86:37 - user which means if we get to this block
86:41 - of code right here after this that means
86:43 - there was no errors that means there is
86:44 - a user definitely here that means we can
86:47 - proceed with this action and allow it
86:50 - and actually create this post so we'll
86:52 - say const new post equals new post we
86:57 - have yeah we have the model we have the
86:59 - model here so we'll say new post
87:02 - and we'll pass it the body
87:05 - like that because we already destructed
87:07 - it from here and we need to pass it the
87:09 - user remember in our post model uh where
87:12 - is it right here
87:14 - uh right here the post we gave it this
87:16 - user we can still attach that id and it
87:18 - will auto populate it if we want to get
87:21 - the user from the post later so we'll
87:23 - say user is user
87:27 - dot id
87:28 - oops id i don't know why it's auto
87:30 - correcting me
87:31 - and here we'll say username
87:33 - is user.username
87:37 - like that
87:38 - and we need to give a created add which
87:41 - is new date
87:44 - to
87:45 - iso string like that
87:48 - now we need to save this post so we'll
87:49 - say const post equals
87:53 - new post
87:54 - dot save
87:56 - and actually i forgot to put a wait
87:58 - because this is asynchronous
88:00 - and here we need to just return this
88:02 - post to return post all right let's see
88:05 - if all of this works and we're checking
88:07 - the uh the thing let's do here a console
88:10 - log just to make sure that we have our
88:12 - user so we console.log user
88:15 - and let's test this out all right so we
88:17 - go here
88:19 - and
88:20 - let's open a new tab and here i'll say
88:22 - mutation
88:25 - create post i want to pass it a body and
88:28 - this body will say
88:30 - this is another
88:32 - post
88:33 - and let's get from it all the fields
88:37 - so create that and the username all
88:40 - right this should fail and tell us that
88:41 - we need an authentication token
88:44 - but it doesn't it says cannot return oh
88:47 - because we didn't add this mutation so
88:49 - here in the index
88:51 - uh we want to say as well that we want
88:53 - the mutations from post resolvers oops
88:56 - what is the what is that
88:57 - resolvers.mutation
89:00 - all right let's save make sure that it
89:02 - started it has
89:04 - let's go here let's send that
89:06 - cool it says
89:07 - authentication header must be provided
89:10 - that's actually a wrong authorization
89:11 - header let me change that
89:14 - so
89:14 - authentication token that's fine but
89:16 - here it's an authorization header
89:18 - although which is actually a misnomer
89:21 - it should be authentication but whatever
89:23 - so if we send okay let's send again it's
89:26 - still restarting the server cool
89:27 - authorization header must be provided so
89:29 - let's provide one so if we just
89:32 - uh slide this up like extend this
89:35 - we can here add some http headers so
89:38 - here we say authorization
89:40 - and here let's put an empty string and
89:42 - see what happens
89:44 - okay
89:45 - i see even an empty string is counted as
89:47 - that it's it's not truthy so let's put
89:50 - something some gibberish and then now it
89:52 - says that it must be bearer space token
89:55 - all right let's put bearer space and
89:57 - then some gibberish that's not actually
89:58 - a valid token it will say invalid slash
90:01 - expired token now let's actually put in
90:03 - a real token so here let's log in again
90:06 - let's copy this token
90:08 - go to create post and here bearer space
90:11 - and we paste that and now let's run it
90:13 - and there we go we get this and the post
90:15 - was created and the username was
90:17 - assigned that user that we logged in
90:20 - with
90:20 - and if we go to get post here let's
90:23 - change this into get posts and get all
90:25 - of them
90:26 - okay let me remove that actually
90:29 - and there we go we get this um another
90:31 - post has been sent and it's added to our
90:34 - database
90:36 - there's one little problem here is that
90:38 - the latest post is big is coming
90:41 - last in the array but we don't want that
90:43 - we want the latest posts to be first and
90:45 - on the array to show them on our website
90:47 - so we can just sort the result from get
90:50 - posts so let's go to the post resolvers
90:53 - and here in gut posts we just need to
90:55 - chain another method here called uh
90:57 - sort
90:58 - and the sort will take a condition and
91:00 - we will sort by created at and to tell
91:04 - mongoose that we want to in descending
91:05 - order we just say -1
91:07 - let's save make sure that it's restarted
91:11 - i think it's restarted mode nodemon is
91:13 - behaving a bit weird lately
91:15 - all right there we go so another another
91:17 - post now it's first instead of being
91:19 - last all right let's now implement the
91:21 - delete post let's go here let's go down
91:24 - here in mutation we add another one
91:27 - we'll say async delete post
91:31 - and this will take um
91:33 - the parent and it will take the
91:35 - structure the post id from the arguments
91:38 - and of course we need the context as
91:40 - well
91:40 - and here we'll do the same we'll say
91:42 - const user equals check auth and we pass
91:46 - it the context and now even if we have
91:48 - the user this isn't enough because we
91:50 - need to make sure that this user is the
91:52 - creator of the post they want to delete
91:54 - we don't want any user to delete any
91:56 - post they're only allowed to delete
91:58 - their own posts so here we'll simply say
92:01 - if
92:02 - user dot username
92:05 - equals
92:06 - the post dot
92:08 - actually we need to get the post first
92:10 - and we need to wrap everything in a try
92:12 - block so we'll say try
92:14 - const post we need to find that post
92:16 - first
92:17 - is a weight
92:20 - equals
92:21 - a weight
92:22 - post dot
92:23 - find by id post id
92:27 - and then here we put the if statement
92:29 - and we'll say if user the username is
92:32 - the same as post.username that means
92:34 - this is the owner of the post so we just
92:36 - await post dot
92:38 - delete ops delete i hate the word delete
92:43 - here we just after it's deleted we just
92:45 - return the string post deleted
92:49 - successfully
92:51 - and then here else if it's not that
92:55 - means
92:56 - we're like yo this is not your post you
92:58 - can't delete it
92:59 - so we say throw new
93:01 - did we bring that i want to bring
93:03 - authentication error here as well so
93:05 - it's got to check also get the same one
93:07 - from a pulse server copy it and
93:09 - actually this is from the library so
93:12 - i'll put it up there and we'll say throw
93:14 - new authentication error and this will
93:17 - say action
93:18 - not allowed
93:21 - and we need to handle as well if this
93:23 - try block fails so we'll say catch
93:26 - error
93:27 - and we'll say throw
93:29 - oops throw
93:30 - new
93:31 - error
93:32 - error like that all right let's save
93:35 - let's look at our post so we have two
93:37 - posts
93:38 - by user i actually added the two new
93:41 - users let's try to log in with a
93:43 - different user so i'll log in with jane
93:47 - and she has the same password because
93:49 - why not
93:50 - and let's go here
93:52 - and we can actually have multiple
93:54 - mutations so i'll call this create post
93:56 - i mean multiple operations on the same
93:59 - tab so here i'll have the other mutation
94:01 - and you can name it whatever you want
94:02 - i'll name this as well the same delete
94:04 - post and this will be the mutation
94:06 - delete post and it will take a post id
94:09 - and we'll give it the post id of
94:13 - where is it this one that was created by
94:15 - user so we'll try to delete that but the
94:18 - thing is let's try to delete it with the
94:20 - token of jane so this shouldn't be
94:23 - allowed okay so here
94:25 - i will paste that token from jane and
94:28 - hit
94:29 - play and hit the delete post and it says
94:31 - authentication or error action not
94:34 - allowed cool so j can't delete users
94:36 - post but if i go here and press ctrl z
94:38 - it will go back to the token from user
94:41 - and uh or actually let's get a new token
94:43 - because why not so here we'll say user
94:46 - and we'll get that token from user
94:49 - and then go here
94:50 - and bearer and paste that token and
94:53 - press play delete post there we go post
94:55 - deleted successfully and if we fetch all
94:58 - posts again we find that that post has
95:00 - actually been deleted
95:05 - hello class
95:07 - nice to see you again
95:09 - i have missed you have you missed me
95:11 - well actually no wait wait a second
95:14 - maybe you've been doing like the classes
95:15 - in a row and you've done you've just
95:17 - finished class three and you're now here
95:19 - and you're like wait a second i'm just
95:20 - listening to your voice like five
95:21 - minutes ago anyway for me it's been like
95:24 - 24 hours ago since i recorded the last
95:26 - video so i definitely have missed you
95:28 - all right enough of that let's actually
95:30 - crack into this video where we will
95:33 - implement
95:34 - holy implement yes comments and likes
95:36 - all right we'll implement ways of
95:38 - submitting comments and likes to our
95:40 - posts because right now actually if we
95:42 - look at our database right here this is
95:44 - the only post i have
95:46 - and if you look there is a comment and
95:48 - likes array but they're empty but and we
95:50 - can't fetch them with graphql we can't
95:52 - edit them so let's actually fix that
95:55 - okay let's go to vs code or whatever
95:58 - editor you're using i'm going to go to
96:00 - the type definitions and i'm going to
96:02 - close this terminal
96:04 - and keep the server running here in post
96:06 - i'm going to add the arrays for likes
96:08 - and comments so here i'm going to say
96:10 - comments
96:11 - and this will be an array so we do
96:13 - square brackets and we say
96:15 - this is a different type that we'll
96:17 - create
96:18 - and here we'll put the exclamation mark
96:20 - and you can as well put an exclamation
96:21 - mark inside which means this array has
96:24 - to contain at least one element we
96:26 - rarely ever do that there are some use
96:29 - cases but we're not going to do that now
96:30 - we're only going to require that we
96:32 - return an array even if it's an empty
96:34 - array that's fine all right let's say
96:36 - likes as well here will return an array
96:39 - of likes so like and then it's required
96:43 - so let's create these types so here we
96:45 - have the oops didn't mean to do that all
96:48 - right here we say type comment
96:50 - and uh well let's look at our post
96:53 - so yeah this will have a um
96:56 - a body a created ad and a username so
96:58 - here we'll of course we will have an id
97:00 - as well so we'll do id and that's
97:02 - required enough type id we'll have a
97:04 - created add
97:06 - and that's a string and it's required
97:09 - we'll have a username
97:11 - a required string and the body of the
97:14 - comment and that's as well a required
97:16 - string let's do the uh
97:18 - type like
97:21 - this will hold an id
97:26 - and a created ad
97:29 - which is a string
97:30 - and what else yeah username of who
97:33 - actually liked this
97:35 - so this will be a string
97:37 - all right so here we're going to add our
97:39 - mutations to create and delete a comment
97:42 - and to like a post so here we'll say
97:46 - create
97:47 - comment
97:48 - and this will take two things the post
97:51 - id
97:53 - so which post do you want to comment on
97:55 - or does the user want to comment on
97:57 - actually that's a lowercase d
97:59 - and this is a string and that's required
98:02 - and the body of the comment so body and
98:04 - that's a string as well and we will
98:06 - return that post that's been
98:09 - commented on
98:10 - and here we'll say delete comment as
98:12 - well to delete a comment
98:14 - and
98:15 - does this take yeah it will take a post
98:17 - id so post id
98:19 - um
98:20 - id
98:22 - and comment id
98:24 - you can take just the comment id but uh
98:26 - taking the post id
98:27 - provides us the ability to check whether
98:29 - that post is still up or not
98:32 - uh here we'll say post because usually
98:35 - you might have a mechanism where if a
98:36 - post is deleted you delete all the
98:38 - comments and then if you look for a
98:39 - comment that doesn't exist anymore it
98:41 - might cause a problem all right here
98:42 - we'll add another one which is like post
98:46 - so it will take the id
98:48 - and that's it just the id of the post
98:50 - oops id and that's required
98:53 - and it will return that post and notice
98:55 - we don't have a
98:57 - an unlike mutation because this like
99:00 - post will work as a toggle so if we've
99:02 - liked that post we will unlike it and if
99:04 - we haven't liked it we will uh like it
99:07 - from zero from i mean from scratch
99:10 - whatever i don't know what i was going
99:12 - with that all right let's go to posts
99:15 - so
99:16 - here at the bottom we'll add this uh
99:18 - these mutations
99:19 - or actually
99:21 - post is getting a bit massive we have no
99:23 - obligation to put them in
99:25 - like in a specific file we can even
99:27 - create as many files as we want i'll
99:29 - create another one actually for comments
99:31 - here i'll say comments.js
99:33 - and here i'll say
99:36 - what do we need we need the post
99:38 - model so here we will say require and we
99:40 - go back to levels and we go to models
99:44 - slash post
99:46 - and here we'll
99:47 - say module dot exports
99:50 - and here we'll have a mutation key
99:53 - and before i forget uh let's add that to
99:56 - our index so here we'll say we'll import
99:59 - that file i'll just copy this and paste
100:00 - it and replace users with comments
100:04 - and here we'll add that mutation field
100:06 - from the comments resolvers
100:08 - so we'll say comments
100:10 - resolvers dot mutation like this
100:14 - all right let's go back here we have the
100:16 - create comment so we'll say async
100:18 - create
100:20 - create
100:21 - and by the way guys you can have it as
100:23 - error functions it doesn't make a
100:24 - difference i'll use that syntax for now
100:26 - just to show you that you can do that as
100:28 - well so we'll say create comment and
100:30 - that will be an async function and you
100:33 - will take the parent so actually we
100:35 - don't need it so we can just say uh like
100:37 - this just an underscore and we will
100:39 - destructure from the arguments the two
100:41 - things the post id and the body and of
100:44 - course we'll need the context to make
100:45 - sure that our user has
100:47 - actually logged in so here we'll do that
100:50 - arrow and here we need to get our user
100:52 - so we'll say const user equals
100:55 - check
100:56 - auth
100:57 - and he will pass it the context
101:00 - and
101:01 - of course when we get here if you know
101:03 - by now that that means we're logged in
101:06 - so we'll do some basic validation and
101:08 - we'll say if body
101:10 - dot trim
101:12 - equals an empty string that means
101:14 - someone tried to submit an empty um
101:16 - comment so we'll throw an error so we'll
101:18 - say throw
101:20 - not just any error we'll get the user
101:22 - input error so here we'll say
101:24 - const
101:25 - user input
101:28 - error
101:29 - equals require
101:31 - apollo
101:33 - server like this
101:34 - all right so here we'll throw that error
101:36 - through new
101:38 - user input error and it will say
101:41 - empty comment and i'll attach a payload
101:44 - of errors to it with just one error i'm
101:47 - not actually sure i'm gonna use these in
101:49 - the on the client but i'm gonna send
101:51 - this payload anyway
101:53 - uh here we'll say comment
101:56 - body must
101:58 - must not
101:59 - be empty almost said must be empty which
102:02 - is ridiculous
102:03 - so here after the if statement so if
102:05 - it's not empty then let's get this post
102:07 - so we'll say const post equals
102:10 - post dot
102:11 - find by id and we pass it the post id
102:15 - and here we'll say if post oops
102:19 - if post
102:20 - so because it could be null actually i
102:22 - forgot to add a weight here this is a
102:24 - weight because it's asynchronous
102:26 - and here we'll say if post then we want
102:28 - to say post because mongoose turns our
102:31 - um data models into like just json
102:34 - objects and i mean just like normal
102:36 - javascript objects so i can just access
102:38 - the comments array like this
102:39 - post.comments which is pretty cool and
102:41 - here we'll add it to it but we want to
102:43 - add it to the top because it's the
102:45 - newest one so use the unshift method and
102:48 - say unshift and we want to add
102:50 - a body of body so we can just say that
102:53 - a username
102:55 - of user
102:56 - actually we're gonna need just the
102:58 - username from user so we can destructure
103:00 - that and say username like this and here
103:03 - we can just say username
103:05 - cool all right here we'll say created at
103:08 - and this will be a new date
103:12 - to
103:13 - iso
103:14 - string like this
103:16 - all right now we need to save the post
103:20 - so here we'll say
103:21 - await post dot save
103:24 - and we need to return it so we'll return
103:27 - this post
103:28 - so else if the post doesn't exist then
103:31 - we throw
103:32 - uh what is this this is gonna be um
103:35 - is this gonna be an a user input error
103:37 - yeah it is a user input error
103:40 - because
103:41 - yeah because they try to access um an id
103:44 - that doesn't exist and usually our
103:46 - client shouldn't expose an id that
103:47 - doesn't exist
103:48 - and we say
103:50 - post not found and uh yeah that's it for
103:54 - the create comment
103:55 - all right let's save that let's save the
103:57 - index make sure our server has restarted
104:00 - successfully because nodemon has been a
104:02 - bit weird i don't know why it's getting
104:04 - stuck on this restarting all right i had
104:06 - to restart node 1 i don't know why it's
104:08 - doing that all right let's refresh here
104:10 - and let's log in to get a new token
104:12 - because the other token is probably
104:14 - expired it's been 24 hours
104:16 - so here we'll go to
104:19 - so here we'll get posts to make sure
104:21 - that we have this post actually we can
104:22 - do a
104:24 - multiple operations here so they will
104:26 - call this um we'll just call this posts
104:28 - and here we'll do our create comment
104:30 - mutation here we'll say mutation uh
104:34 - comment it doesn't matter what you name
104:35 - it here you just need to say here create
104:38 - comment not post comment
104:41 - and this takes a post id
104:45 - and before because i have the token on
104:47 - the clipboard i want to put the token
104:49 - first here so i'll say authorization
104:53 - as
104:55 - bearer
104:56 - space and paste that token and here i'm
104:58 - going to copy this id and paste it here
105:00 - and i'll do body
105:02 - and by the way this uh this comma is not
105:05 - necessary you can omit it or you can
105:06 - leave it depends on your preference and
105:08 - the body will be
105:10 - new comment
105:11 - on
105:13 - only post i don't know
105:15 - and we will get a post back so we can
105:17 - just get the id
105:18 - the body and let's actually get the
105:20 - comments because now we can have that
105:22 - array the id the created ad the username
105:25 - and the body
105:27 - let's uh hit control enter
105:30 - check auth is not defined oh yeah i
105:32 - didn't import it so here we want to say
105:35 - here const
105:37 - check
105:38 - auth
105:39 - equals require
105:41 - and we want to go back two levels to
105:45 - util slash check auth
105:48 - all right let's save
105:50 - come on node one you can do it
105:53 - yes
105:54 - thank you
105:56 - all right here we can um say comment
105:59 - there we go we get our data and we get
106:00 - the comment and now if we even fetch
106:02 - posts
106:03 - actually we need to add comments
106:06 - i mean it's got it just to make sure
106:08 - with the other
106:09 - um
106:10 - with the other query so we fetch the
106:13 - post there we go our post has a comment
106:15 - and we can even submit another one and
106:17 - uh
106:18 - say
106:20 - another one
106:22 - and say comment and there we go we got
106:25 - our post with two comments sweet let's
106:27 - now um create the delete comment
106:30 - uh
106:31 - what is it resolver yeah resolver
106:35 - here we'll say
106:37 - async i'm gonna close the terminal
106:40 - uh delete
106:42 - com
106:42 - i hate delete comment
106:45 - and of course this will take the parent
106:47 - and
106:48 - the post id
106:50 - and comment
106:52 - id
106:54 - and we'll take the context
106:57 - and here we'll say const
107:00 - username will this
107:01 - destructure the username
107:03 - check auth
107:05 - and we pass it the context
107:07 - get the user from the token
107:09 - find the post oops
107:11 - const post equals await
107:15 - post to the model
107:17 - dot find by id and we pass it the post
107:21 - id
107:22 - and we need to say if post
107:25 - say
107:26 - uh here what we need to do is
107:29 - what do we do oh yeah okay we get the
107:31 - index of um so we find that comment we
107:34 - find the index of that comment in the
107:35 - array of comments and then we delete
107:38 - that at that index
107:40 - and here we'll say const
107:43 - what is a comma let's call it comment
107:45 - index
107:47 - in index equals post dot comments
107:52 - dot find index
107:54 - and of comment i'll say c where comment
107:59 - dot id
108:00 - equals
108:01 - this comment id that we passed
108:04 - to our
108:05 - to our function and here we'll say so
108:07 - because we need to check because maybe
108:09 - some other user is trying to delete some
108:11 - other user's comments so we will say if
108:13 - post dot comments
108:16 - add that index so comment
108:19 - index
108:21 - index like this dot
108:23 - username
108:25 - equals
108:26 - username that we got from this token
108:28 - that means this is the owner of the
108:30 - comment so we can delete it so we'll say
108:32 - post
108:32 - dot comments
108:34 - dot
108:36 - remove oh i mean
108:38 - splice there is no such thing as remove
108:40 - i just made that up so splice comment we
108:44 - start at the comment index and we remove
108:46 - just one
108:47 - and here of course we need to save we'll
108:49 - say await post dot save
108:52 - and did i say oh wait here yeah i did
108:53 - okay
108:54 - we'll se and then we'll return that post
108:57 - else if it's not to the owner of the
108:59 - post this is a different
109:01 - person we'll throw
109:03 - throw
109:04 - new
109:05 - authentication
109:07 - authentication we haven't imported that
109:10 - error
109:12 - and we'll say action not
109:15 - allowed and you notice sometimes we're
109:17 - throwing an error without throwing a um
109:20 - without sending a payload with errors
109:22 - because we don't need to show this on
109:23 - the client because there will never be a
109:26 - delete button for a user that doesn't
109:27 - own that uh that comment this is just a
109:30 - safety check instead of safety net
109:32 - instead of like in case a user actually
109:35 - tries to delete a comment that that's
109:37 - not theirs using some sort of like code
109:40 - all right so here so this is if the post
109:43 - exists so we need to chain an else on
109:45 - this if it doesn't exist we want to
109:47 - throw
109:48 - a new user input error and we'll say
109:52 - post not
109:54 - found
109:55 - sweet let's test this
109:57 - actually uh we need to import this
109:59 - authentication error
110:01 - here actually it needs to be
110:03 - in alphabetical order let's save
110:06 - all right cool nodemon was nice this
110:08 - time all right so let's actually create
110:11 - a new window i'm just going to copy
110:12 - these headers from here create a new tab
110:15 - and paste the same headers here
110:18 - and here we'll say
110:20 - delete actually mutation
110:24 - delete
110:25 - comment
110:27 - and the post id
110:29 - will be
110:31 - let's uh this well we all we have only
110:33 - one post here so post id is this and i
110:36 - can put this on a different line and say
110:38 - comment id is
110:40 - let's delete the first comment so we
110:42 - leave the another one so we'll take this
110:44 - id and then we put the id here and we
110:47 - get the post back so we can say id of
110:49 - the post and then let's just get
110:51 - comments and id and username and body
110:55 - all right let's send this
110:58 - oh it get it gets the post back
111:01 - yeah okay it's working
111:04 - all right
111:05 - so we get the post back when we delete
111:07 - the comment and if we try to delete the
111:09 - other comments so let's take this id and
111:11 - we put it here and we send it and there
111:13 - we go our comments are empty so we
111:15 - removed all the comments that we just
111:16 - posted all right let's now create a way
111:19 - to um
111:21 - get the likes and actually add a like to
111:23 - um to our
111:25 - posts so here in
111:28 - i'm gonna add it to the posts
111:30 - here at the bottom
111:32 - i'll say async like
111:36 - post
111:37 - and this will take
111:39 - so the usual parent which is going to be
111:41 - just an underscore
111:42 - uh post id
111:44 - and the context
111:46 - it's getting a bit repetitive but
111:49 - sometimes it happens like this with crud
111:52 - that you have to write the same code for
111:53 - different resources so here we'll say
111:55 - check auth and we pass context
111:59 - and we need to find the post so we'll
112:01 - say const
112:02 - post equals weight
112:05 - post dot find by id and we pass it the
112:09 - post id like this
112:11 - and of course we need to say if post
112:15 - and here we'll say
112:17 - uh what we need to do is we need to find
112:19 - this like we need to make sure that it
112:22 - exists so we'll say if
112:24 - because we could later delete it you
112:26 - know so what we need to do we'll say if
112:28 - post dot likes
112:30 - dot find
112:32 - a like where the like dot id
112:36 - equals
112:37 - or is it actually no the like username
112:39 - because we don't have access to the id
112:41 - we have access to the username because
112:44 - a
112:44 - user can have only one like on a post so
112:46 - if they have this like already we just
112:49 - delete it so we'll say
112:50 - like this because username so this is
112:53 - this returns a um an object right and if
112:57 - it doesn't find it it will return
112:58 - undefined so it will be not truthy so
113:01 - we'll say if and if this returns if it's
113:04 - true if the returns alike that means
113:06 - we've already liked let's put a comment
113:08 - here we'll say post already liked
113:11 - unlike
113:12 - it
113:13 - and here else that means we don't have a
113:15 - like so it's not liked we'll say not
113:18 - liked
113:19 - uh like
113:20 - post
113:21 - so here we want to unlike it we want to
113:23 - remove that like so we'll say post
113:26 - likes like this equals post dot likes
113:30 - dot filter
113:32 - [Music]
113:33 - like where
113:36 - like dot username
113:38 - equal uh does not equal
113:41 - the username so we leave at all of them
113:43 - uh all the ones that don't have the same
113:46 - username as our user so we just remove
113:48 - that one with this username
113:50 - all right and here we need to say await
113:53 - post dot save
113:55 - and then here we need to add a like so
113:57 - here we'll say post
113:59 - dot likes
114:00 - dot push it doesn't matter if you add it
114:02 - to the end or to the beginning because
114:03 - uh
114:04 - we're not gonna show likes based on
114:06 - created that just going to show a number
114:08 - of them so we'll say the username is
114:10 - username and it needs a created ad
114:13 - and that's new
114:15 - date
114:17 - dot 2 iso
114:19 - string
114:21 - and yeah that's it just the username and
114:23 - the date and here we'll say await post
114:27 - or actually no
114:29 - uh this await post because we're editing
114:31 - the post no matter what so this await
114:33 - post can be after this if statement so
114:35 - after we're done we either we remove the
114:38 - like or we added the like now here we
114:40 - will say await post dot save
114:44 - and we'll say return
114:45 - post like this
114:47 - and this is an if else if the post
114:50 - doesn't exist we will say we're not in a
114:52 - block we'll just say like this throw new
114:56 - user input what is this
114:59 - user
115:00 - input
115:02 - error
115:03 - and this will say post
115:05 - not found oh because it's not imported
115:08 - that's why it
115:09 - it's finished with that
115:11 - user input error
115:14 - sweet i think we're done here
115:16 - so this works for both liking and
115:18 - disliking or unlike and rather so and we
115:21 - are returning the likes because we added
115:23 - that to our
115:24 - type so let's actually test this
115:27 - so let's go here and instead of delete
115:29 - comment we will have a different
115:30 - mutation here we'll say like post
115:34 - did our server restart
115:36 - yes
115:37 - thank you nodemon i feel like i should
115:39 - be grateful each time all right here is
115:41 - a post id and it will be this id right
115:43 - here
115:45 - and we'll pass it like this
115:48 - and we want to get the id
115:50 - or just the body and username
115:53 - username
115:55 - i want to get the likes array and from
115:57 - the likes i'm going to get the id and
115:59 - the username so let's submit this cool
116:02 - so we get a like and if we look here
116:04 - just to make sure we fetch posts
116:06 - actually let's add likes here likes
116:09 - and we get the id they create that
116:12 - or just like id and username cool so you
116:15 - get a like and here if i press again
116:17 - that like is gone and if i press it's
116:19 - back i pressed it's gone cool we just uh
116:22 - did the two functionalities in one
116:24 - route or one operation one mutation
116:28 - whatever
116:30 - all right so
116:31 - this is it for this video
116:34 - or actually no let me add
116:36 - because there's some
116:38 - cool thing i want to show you and i
116:39 - don't want to make a video just for that
116:41 - i want to show you how to do a
116:42 - subscription now we're not going to
116:44 - implement it in our front end you can if
116:46 - you want but i'm just going to show you
116:48 - how subscriptions work because they're
116:50 - pretty cool so i'll say type
116:52 - subscription
116:54 - generally people don't use them when
116:56 - like getting new posts or new uh
116:58 - comments and stuff like this because if
117:00 - your app is massive it will be too much
117:02 - traffic and too much bandwidth people
117:04 - use them for polling and for chat apps
117:06 - and whatever i might do like if you want
117:08 - me to do some sort of like pulling up or
117:10 - like chat up let me know in the comments
117:12 - all right here i'll add a subscription
117:15 - and let's call this new post
117:17 - i want the subscription to each time
117:19 - when a new post is created to like um
117:23 - show whoever is subscribed to this that
117:25 - look this is the new post that's been
117:27 - subscribe
117:28 - created
117:29 - all right so in our index we're gonna
117:31 - need something else from apollo server
117:33 - called pub
117:34 - sub
117:36 - which means publish subscribe or publish
117:38 - a subscribe it's a pattern anyway here
117:41 - we'll say const pub sub
117:44 - not like this pub sub like this we'll
117:46 - say new
117:47 - instantiate a
117:49 - an instance of this and we just pass it
117:51 - to our context
117:52 - so we can use it in uh in our resolvers
117:55 - let's save this
117:56 - where do we go let's go to
118:00 - posts yeah posts
118:02 - here um
118:04 - here i want to add so we got to this
118:07 - mutation it ends like here
118:10 - and here we'll say subscription
118:15 - and here we'll have our subscription new
118:17 - post
118:18 - and this will have an object inside of
118:20 - there will have a subscribe
118:23 - uh like this oops what is that subscribe
118:27 - and the inside of here will return or
118:29 - actually let's do it as an arrow
118:30 - function because it will be like shorter
118:32 - the syntax will be shorter so here we'll
118:34 - do like this and it will take the parent
118:37 - and our we have no arguments so we can
118:39 - omit this as well so we can do two
118:41 - underscores
118:42 - and here we need to get the um pub sub
118:45 - pub
118:46 - sub like this
118:49 - here we'll say
118:50 - we'll return pub sub
118:52 - dot async iterator iterator
118:57 - and here let's call this uh
119:00 - i'll just call it a new post new
119:03 - post
119:04 - uh it's the convention to have like all
119:07 - caps like this as a
119:09 - it's a an event type and
119:11 - it's like a type of kind of received
119:13 - type thing i don't know
119:16 - it's just a convention all right so here
119:18 - we want to as well publish because this
119:20 - is the subscription we want as well the
119:22 - publication from where we create a post
119:25 - so right here after the post has been
119:27 - created and saved we're gonna say we
119:29 - have access to our context which holds
119:31 - the pub sub and we'll say context
119:34 - dot pub
119:36 - sub
119:37 - dot what is it publish yes publish
119:41 - publish and we publish
119:43 - a name a trigger name of
119:46 - the same name that we had earlier so new
119:48 - underscore post
119:50 - and the payload will have new post
119:54 - with the value of that post that's been
119:56 - created this one right here
119:58 - all right let's save
120:00 - okay we'll save subscription
120:03 - and our subscription is new post and
120:05 - we'll get
120:06 - the id the body
120:08 - the creator that
120:10 - username
120:13 - comments everything everything
120:16 - we just get the created out of the
120:17 - comments and likes because we don't have
120:19 - even comments right now on likes
120:21 - okay subscription field must return
120:24 - async iterable
120:25 - received undefined
120:27 - ready
120:34 - where are we
120:35 - returns async iterate oh okay my bad
120:39 - here we need to actually add a field
120:41 - subscription subscription
120:44 - and here we want to spread the did i put
120:47 - it in post here i put it in post posts
120:49 - resolvers
120:50 - sorry guys it's the end of the day and
120:52 - i'm a bit tired so these mistakes happen
120:54 - all right let's make sure all right
120:56 - there's something wrong i've crashed
120:59 - post resolver oh it's resolvers
121:02 - save
121:05 - come on
121:07 - oh no demand is
121:09 - being a bit annoying
121:11 - so i had to restart
121:13 - okay there's another problem throw new
121:15 - there's something learning defining
121:16 - resolvers feeling not in schema
121:21 - oh
121:22 - this is not mutation this is
121:24 - subscription
121:25 - subscription like this all right
121:27 - another mistake
121:30 - all right so npm start
121:34 - cool server is running this time it
121:36 - should work we start it and there we go
121:39 - it starts to listen i want the animation
121:41 - to happen so i'm just going to do it on
121:43 - a new tab
121:44 - so do like this there we go so we get
121:46 - this cool animation of the spin and
121:48 - let's try to now create another post so
121:51 - he will say
121:52 - [Music]
121:54 - a post
121:55 - for subscribers
121:57 - by the way subscribe if you haven't
121:59 - subscribed yet to the channel nice segue
122:02 - alright so let's send this create post
122:04 - damn it invalid token let's get a valid
122:07 - token
122:08 - let's go here
122:10 - let's add this
122:13 - all right let's send create post and if
122:15 - we go here we see that we got a post
122:17 - here and if we create another one number
122:20 - two we send it create post there we go
122:22 - we received another post you see like
122:24 - we're like now listening using
122:26 - websockets in the background and
122:28 - actively listening to the new post event
122:30 - and each time it publishes a new post we
122:32 - actually get it we can listen on the
122:34 - client and we will get this these posts
122:36 - in real time as they've been posted all
122:38 - right i want to show you one more thing
122:41 - that is kind of useful a lot of the
122:43 - times this time it's not that useful but
122:45 - it's a cool trick that you can do all
122:47 - right so here
122:49 - i could add it here actually no i can't
122:51 - add it here i'm going to add it here
122:52 - what i want to do is
122:54 - on the client later we're going to need
122:57 - a number for the number of likes and
122:59 - number of comments and we can calculate
123:01 - that on our client by just saying the
123:03 - array of comments dot length but we can
123:05 - as well calculate that on the server and
123:07 - send it to the client to minimize the
123:08 - amount of computation that's happening
123:10 - on the client so here we can add two
123:12 - fields say like count
123:14 - like count
123:16 - and that's a
123:18 - number
123:19 - it's required and we have comment
123:21 - count
123:23 - as i make a mistake actually no in a
123:25 - graphql it's not a number it's an int so
123:27 - here it's an int as well and it's
123:30 - required as well and we can get these uh
123:33 - we can actually compute these and send
123:35 - them
123:36 - not through the mutation itself but we
123:38 - can have like um
123:40 - i think they're called modifiers i'm not
123:42 - sure what they're called
123:43 - i call them modifiers so here we can say
123:45 - if we have a name of the type so if we
123:48 - say post
123:49 - and then we do stuff here to change any
123:51 - of the fields each time any mutation or
123:54 - query of subscription that returns a
123:56 - post it will go through this post
123:59 - modifier and apply these modifications
124:01 - which is pretty cool so we can do all
124:04 - sorts of um you know scenarios here so
124:07 - here we will have that field name we'll
124:08 - say like count
124:10 - and we will say that it's an arrow
124:12 - function and it will take the
124:15 - parent we'll need the parent here
124:17 - actually we'll need just the parent
124:18 - because the parent holds the data that
124:20 - comes from
124:22 - the previous step actually let me show
124:24 - you i'll put it as a normal function so
124:26 - like count like this
124:28 - and um oh it takes parent
124:30 - i'm going to console log the parent just
124:32 - to show you clg
124:34 - parent
124:35 - and here what we want to do we want to
124:37 - say return we want to return a value for
124:39 - this like count so what we will return
124:41 - parent will hold that data for the post
124:43 - and it will hold the likes in it so
124:44 - we'll say return parent.likes.length
124:47 - and we will do the same for comment
124:49 - count
124:51 - and for comment count i'm just gonna
124:53 - return the value and not console.log
124:55 - anything because we'll see it from the
124:57 - likes one so i'll say parent and here
125:00 - we'll say
125:01 - no return just parent dot
125:03 - comments
125:05 - comments dot
125:07 - length like this
125:09 - all right let's save this make sure our
125:11 - server starts okay it doesn't
125:14 - oh yeah no no column um no semicolon
125:16 - needed there
125:17 - okay let me start it again okay let's
125:20 - maximize our
125:22 - terminal and let's go here well what
125:24 - happened here
125:26 - let's
125:27 - what what happened to my tabs
125:29 - that's strange and the font size is tiny
125:33 - all right that was definitely not
125:34 - planned so let me put back the font size
125:36 - to 24.
125:38 - and let's go here we'll put
125:41 - the query get posts
125:43 - and here i'll get id
125:45 - body and we'll get the like count
125:49 - and the comment
125:51 - count
125:52 - all right we'll send and there we go we
125:53 - get 0 0 because these don't have any
125:56 - comments on them or actually you know
125:57 - what let's create them so let's say
126:00 - mutation
126:03 - create post
126:05 - and here we'll have a body
126:07 - actually no not create post
126:09 - create
126:10 - comment
126:12 - and we'll have a
126:14 - post id
126:18 - of this post right here
126:21 - and we will have a body
126:24 - that will say
126:26 - comment
126:28 - and we'll just get the id back and
126:31 - we need to actually log in so you say
126:33 - mutation
126:35 - login
126:37 - username
126:40 - is user
126:42 - and password is one through six
126:47 - and get just the token we send this we
126:49 - get the token
126:50 - we go here we add
126:54 - an authorization
126:58 - header with the value bearer
127:00 - space our token
127:02 - and we send our thing and we get that
127:05 - and we send our query here we get that
127:06 - the co we have one comment and the
127:08 - comment count is one cool so it's
127:10 - actually calculating them and if we look
127:13 - this is the value of what parent returns
127:14 - it's actually the post that's been sent
127:17 - so here that's the post these are all
127:19 - the posts so that's the first post and
127:20 - it's got that so this is what the parent
127:22 - is is the data that comes from
127:25 - get posts and if you send any type of
127:27 - query or mutation that returns a post it
127:29 - will have to go through this modifier
127:31 - and add these properties all right let's
127:33 - set this to be a
127:36 - an arrow function to just make it
127:38 - smaller
127:39 - right here we'll do like this remove
127:41 - that remove this
127:44 - remove the return and just do that
127:47 - okay that's fine all right so we are
127:50 - done with the back end i think i think
127:52 - if there's any modification i'll let you
127:54 - know i think yeah this is it for the
127:55 - back end yeah so we're done for the
127:57 - server code
128:00 - i want to tell you that i made one
128:02 - little change in the post
128:04 - resolvers right here in the create post
128:07 - i just added this if statement right
128:09 - here if the body of the post is empty it
128:11 - throws an error because this is a valid
128:13 - a server validation thing that i forgot
128:15 - to do in the series you just add this
128:17 - one if statement
128:19 - all right let's open up our code base
128:21 - using vs code
128:23 - and
128:24 - so here i want to create a folder and
128:26 - put our
128:27 - react app in there but we don't need to
128:30 - do that because we're going to use the
128:31 - create react app to tool and it's going
128:33 - to do that for us so here we'll say npx
128:36 - create
128:37 - react
128:39 - app i'll call this folder client because
128:42 - that's the the client application and
128:44 - the rest of the code on this folder is
128:46 - the server application all right so i'll
128:49 - let that install and i'll be back once
128:50 - it's done
128:51 - all right now that it's done installing
128:53 - let's open up this client folder
128:56 - and uh
128:57 - here i'll clean a couple of things so
128:59 - we'll not be using this logo so i'll
129:01 - delete it
129:02 - we will not be using this index css so
129:05 - i'll delete that
129:06 - i'll delete everything like remove
129:08 - everything in the app css because we're
129:10 - going to be using semantic ui
129:12 - i'll delete this app test file
129:15 - and
129:16 - actually in the public i'm gonna change
129:18 - the title of the app
129:19 - i decided to call this hi world because
129:21 - it's a social media app so i'll call
129:24 - this um hi
129:26 - hi world like this
129:29 - and save that
129:31 - let's go back to the source folder and
129:33 - here in the app i'm going to delete
129:35 - everything inside of here i'll just have
129:37 - a div for now and i'll have a header one
129:40 - says hi
129:42 - on hi world like this
129:44 - of course we'll remove the import to
129:46 - logo because that doesn't exist anymore
129:48 - and
129:50 - yeah let's save all of this and let's
129:52 - see
129:53 - let's start our server so here we'll say
129:55 - npm start
129:57 - and in a different terminal we'll go to
129:59 - the um we'll cd into the client folder
130:02 - and we'll say npm start so now we
130:04 - started the server now we'll start the
130:06 - client okay it says can't resolve index
130:08 - css yes because something is important
130:10 - yeah it's the index js is importing that
130:14 - and we deleted it all right so the app
130:16 - has started
130:17 - and cool we get high world and uh
130:19 - hopefully no errors probably none yes no
130:22 - errors
130:23 - and if we go back to our app i notice if
130:26 - each time i save
130:27 - both the development server of the
130:29 - server and the client are restarting
130:30 - because of nodemon on the server so
130:33 - let's go here
130:34 - and
130:35 - in the package json we don't want
130:37 - nodemon right now because we're not
130:39 - making any changes on the server on the
130:41 - server code so we'll add another
130:44 - script here and say serve and here we'll
130:47 - say just node index
130:49 - and of course now if we run serve let's
130:52 - say npm
130:55 - run serve
130:57 - now each time we make any changes it
130:59 - will not uh re-trigger that run in
131:01 - restart the server
131:03 - the uh the server server not the client
131:05 - server all right so
131:07 - should be fine now
131:09 - and here in the app what we need to do
131:12 - right now we want to set up our apollo
131:14 - client
131:15 - our apollo provider and provide our
131:18 - apollo client to our application so that
131:20 - we will be able to connect to our
131:21 - graphql server
131:23 - we could do it in the app.js but
131:26 - i would rather have it in a separate
131:30 - component or
131:31 - and here we'll say we'll call it apollo
131:34 - provider
131:36 - js and actually we need to install a
131:38 - couple of dependencies to get that so
131:40 - here um in a terminal window let's say
131:42 - i'll actually make sure you're in the
131:44 - client folder so cd client
131:46 - and here in the client folder i'm going
131:48 - to say npm install we're going to
131:49 - install a couple of things
131:51 - first is the apollo
131:53 - slash react hooks did i mention we're
131:56 - going to be using only hooks here
131:58 - if you're not familiar with hooks i have
132:00 - a series on hooks on this channel if you
132:01 - want to dive deeper into that so we're
132:03 - going to install apollo cache in memory
132:10 - what we need let me look so we need
132:12 - apollo link http
132:16 - link http
132:19 - and we need apollo client of course
132:21 - so apollo client
132:23 - all right that's it for now
132:26 - let them install and let's go to the
132:28 - provider
132:29 - here this provider is basically going to
132:30 - export a jsx element so we need uh react
132:34 - so we'll say import react from
132:36 - react
132:37 - uh
132:38 - here what we're going to export is a
132:41 - apollo provider that wraps the
132:42 - application the the entire app so we
132:45 - need to import the app into this
132:46 - provider so here we'll say import
132:49 - app from the same directory slash
132:52 - app like this
132:53 - and we need apollo client so we say
132:56 - import apollo client from
132:59 - apollo dash client
133:02 - here we have we import the
133:05 - uh the in-memory the cache in memory
133:09 - um
133:10 - libraries so here we'll say import
133:13 - and what is it called in memory caches
133:16 - in memory
133:18 - cache
133:20 - from
133:22 - apollo
133:23 - cache
133:25 - in memory
133:27 - and usually you'll install a library
133:29 - called apollo boost and it does all of
133:31 - this for you but i've had issues with
133:34 - apollo boost when it comes to
133:35 - authentication tokens and saving them
133:37 - and setting a middleware for checking a
133:39 - token so i'm gonna do the setup myself
133:42 - um here we'll say import it's just a
133:44 - tiny setup just one file that you write
133:46 - and you'll never touch again so here
133:47 - we'll say create
133:49 - http link we need um
133:51 - we need this from
133:53 - um
133:54 - let me type this we need it from apollo
133:57 - link http so here we'll say from
134:00 - apollo
134:02 - link
134:03 - http we're importing a bunch of things
134:06 - this is the last one
134:09 - this is apollo provider
134:12 - so this is the jsx element that will
134:14 - provide the client to our app and this
134:16 - is going to come from apollo at apollo
134:18 - slash react hooks
134:20 - all right so here we'll say const http
134:22 - link
134:24 - we'll just instantiate or actually we
134:27 - need to call that
134:28 - so we'll say create
134:30 - http link
134:31 - and here we'll pass it some options we
134:34 - just need the uri for now and this is
134:36 - going to be pointing to our graphql
134:38 - server so what is the endpoint for our
134:41 - server which is just local host 5000 so
134:44 - we'll say http
134:46 - and here we'll say local
134:48 - host
134:49 - 5000 of course this in production this
134:52 - will be different so bear in mind
134:55 - here we'll create our client so say
134:56 - const client equals new
134:59 - apollo client
135:02 - and here we'll pass
135:04 - a link which is this http link that we
135:07 - created
135:08 - and we'll pass
135:10 - a cache value that will store any um
135:13 - cached
135:14 - data and here we'll just instantiate the
135:17 - in-memory cache so you say in new in
135:20 - memory cache like this call it like that
135:23 - and here we just need to export this
135:24 - provider so we say export default
135:27 - and we'll export
135:30 - apollo
135:31 - provider and this takes a client which
135:34 - is going to be
135:35 - the client that created right here
135:37 - and this will wrap the app so we need to
135:39 - put the app here
135:41 - and now we need to use this in the index
135:44 - js so here we'll say
135:46 - import
135:48 - what is the apollo
135:50 - provider
135:52 - provider
135:54 - from
135:55 - uh same directory apollo provider and
135:58 - here instead of rendering the app we
135:59 - just passed this apollo provider
136:02 - so like this so we don't need the app
136:04 - and actually we don't need any jsx
136:06 - elements here so we don't need react so
136:08 - we can just do that
136:10 - uh let's save everything
136:12 - let's make sure that our app is still
136:14 - running
136:15 - okay so
136:16 - import error apollo provider not
136:17 - exported
136:22 - is it not exported
136:25 - oh here it's apollo provider like that
136:29 - and we need to put it here as well pull
136:31 - up provider let's save all right it runs
136:34 - just fine
136:35 - and if we go to our app it says hi world
136:37 - of course there's no difference but
136:39 - uh by the way did i mention um you need
136:42 - to install
136:43 - apollo dev tools for chrome you can say
136:46 - apollo dev tools chrome
136:48 - and go here and just add it to your uh
136:50 - chrome as an extension and if you're
136:52 - using any other
136:54 - browser maybe you'll find it maybe not i
136:56 - don't know so you just add it to your
136:58 - browser and here if i click f12 actually
137:01 - let me refresh this
137:02 - click f12
137:04 - uh where is the apollo did i not add it
137:07 - okay for some reason i had to close the
137:09 - dev tools and open them again all right
137:11 - so here in apollo we get this graphq
137:14 - graphical tool the same tool that we get
137:16 - on our server endpoint and here if we
137:18 - say query
137:21 - say get there we go we're getting our
137:23 - queries right here that means our
137:26 - apollo provider in our app is actually
137:28 - accessing the server and if we say get
137:30 - posts i want to get the id
137:32 - and get the body
137:34 - and click control enter and there we go
137:36 - we're actually fetching the posts from
137:39 - our database and uh
137:41 - apollo provider is connected to our
137:43 - server and everything is working fine
137:50 - well hello class and welcome to class 2
137:53 - on the channel clast so many classes
137:56 - and we're not even using class-based
137:58 - component how did that come to be
138:00 - all right so enough of the nuances so
138:02 - now that we've hooked up our application
138:04 - with uh apollo and by hooked up our
138:06 - application with apollo i mean we set up
138:08 - our apollo provider and we connected our
138:10 - apollo client to our apollo server
138:13 - apollo apollo so before we use any um
138:17 - graphql queries and mutations and fetch
138:18 - any data and show it we need to set up
138:20 - as um our application because we need to
138:23 - set up some basic markup because this
138:25 - doesn't look good alright so
138:28 - uh what i want to focus on this video is
138:30 - to introduce the router and create
138:32 - different pages mainly we're going to
138:34 - create the home and login page
138:36 - page login and register page all right
138:40 - i'm gonna stop talking and start writing
138:42 - code
138:43 - okay
138:44 - so make sure you got your server running
138:46 - at port 5000 and
138:49 - the client running
138:50 - and let's open up a new tab and here
138:52 - let's install uh react router dom so
138:54 - let's say npm install
138:57 - and react
138:58 - uh router
139:00 - and dom and since we're installing stuff
139:02 - i just want to quick say quickly we're
139:03 - gonna be using like i said semantic ui
139:06 - uh it's really cool you can actually
139:08 - install it through the um command line
139:11 - and kind of customize a couple of things
139:12 - but i'm just gonna install it
139:14 - just install the css and install this
139:17 - react integration called semantic ui
139:19 - react very creative
139:22 - and
139:23 - so what we're going to do is we're just
139:25 - okay let's go to get started we're just
139:27 - going to run this yarn add or npm
139:29 - install semantic ui react and we need to
139:31 - install the css as well so we're going
139:33 - to say install semantic ui css so we're
139:37 - going to add those two so here we'll say
139:39 - semantic
139:41 - ui css and semantic
139:45 - ui
139:46 - react
139:47 - let those install and uh here in the app
139:50 - uh js file uh let's bring the router and
139:54 - route so here we'll say import
139:56 - browser
139:58 - router
139:59 - i'm gonna give it an lds router because
140:02 - it makes more sense
140:04 - i'm pretty sure one day they'll change
140:05 - it to just router
140:07 - all right so here we'll say react from
140:09 - react router dom
140:12 - and uh here above our css we want to
140:15 - bring semantic ui
140:17 - um
140:18 - just in case you don't know the reason
140:19 - why because we if we want to change
140:21 - anything uh we will change it through
140:23 - our custom css and the fact that we have
140:25 - it after it's going to override the
140:27 - default styles from semantic ui aka
140:31 - cascading so semantic ui css slash
140:34 - semantic
140:36 - dot min dot css like this
140:39 - so now the css we we have it in our app
140:42 - and we can use the semantic ui react and
140:45 - just use those react components
140:47 - um
140:48 - so here actually here instead of this
140:50 - div we're going to put the router so
140:52 - we'll say router
140:54 - and inside of here we'll have
140:57 - so we'll have our routes so first route
140:59 - will be the home route so we'll say
141:02 - exact
141:03 - path and the path will be to slash
141:06 - component
141:07 - component will be home
141:09 - by the way i just want to say quickly
141:10 - i'm not going to be explaining the kind
141:13 - of the basics of react because this is
141:15 - more of a apollo um course if you want
141:18 - to know the basics to react you can do
141:20 - my
141:20 - 0 to 60 tutorial or you can do anyone
141:23 - else's as long as you learn the basics
141:26 - all right so here's another route is the
141:28 - login route so it will say exact path
141:31 - equals
141:32 - oh not equals actually oh yeah equals
141:35 - i'm confusing myself guys all right so
141:37 - register or login
141:42 - and component
141:44 - will be login
141:46 - of course we'll create these components
141:48 - in a second let's just copy this
141:50 - click here and do register
141:53 - this will be
141:54 - capital r
141:56 - so here it will create a um
141:58 - oh i've already created the folder
142:00 - components but i'll create another
142:02 - folder called pages
142:03 - and inside of here we'll have
142:05 - login.js
142:08 - we'll have
142:09 - home.js
142:12 - and we'll have a register.js
142:16 - here we'll say rfc why is it not working
142:20 - or rcf yeah rcf
142:22 - all right so here we'll say at the
142:24 - bottom export default
142:27 - register
142:29 - and this by the way even though they're
142:30 - functions but you have to have them
142:33 - pascal cased meaning the first letter
142:35 - has to be capital some reason it doesn't
142:37 - work if it's not
142:38 - um all right so here we'll just say
142:41 - we'll just have a header one for now
142:43 - saying register
142:46 - page
142:47 - save let's copy all of this go to the
142:49 - home and just ctrl d here and say home
142:53 - so home page and these are rename to
142:54 - home let's go to the login as well paste
142:57 - this and just
142:59 - say log in here just to have a couple of
143:00 - different pages for now we'll populate
143:02 - them later
143:03 - let's close them
143:06 - let's import them so here we'll say
143:08 - import
143:09 - we'll have home from
143:12 - same directory pages
143:15 - pages slash
143:17 - home
143:18 - and we can just copy this two more times
143:22 - so here we'll say login
143:25 - and here we'll say register
143:27 - all right one thing that i want to do is
143:29 - i want to have a navbar at the top and
143:32 - we can go here in
143:34 - react semantic ui.com and go to
143:38 - right here menu
143:40 - they call it menu and
143:42 - i want to get this one oh no not this
143:44 - one this one this one that looks like
143:45 - tabs looks cool
143:47 - let's actually just copy this entire
143:50 - component just copy that
143:52 - and let's go to our app
143:54 - and i'm going to create a component here
143:56 - call it menu
143:57 - bar
143:58 - they call it menu so i'm going to call
144:00 - it menu why not
144:01 - i'm going to close this terminal
144:03 - so here um
144:05 - this is a class-based component of
144:06 - course we need to change that because we
144:08 - only want functional components
144:11 - so here we'll say function
144:13 - what is it menu bar
144:16 - and i'm going to export it
144:19 - export default
144:22 - menu bar
144:24 - and here instead of component we're
144:26 - going to get use state
144:29 - and
144:30 - right here instead of state like this
144:33 - we will say
144:34 - const
144:36 - active
144:38 - item
144:39 - and set
144:41 - active
144:42 - item
144:44 - equals use state
144:46 - and this will start with an empty string
144:49 - and the way these works uh work is that
144:51 - each menu item you have here has a name
144:54 - and if the active property is true that
144:57 - means it's going to be highlighted that
144:59 - means we're active on this page right
145:01 - now and this name will be
145:03 - rendered as the name of the tab with the
145:05 - first letter capitalized so if this
145:08 - returns true that means if the active
145:10 - item right here has the value of
145:12 - messages the tab messages will be
145:13 - highlighted or the nav link will be
145:15 - highlighted so each time we click one we
145:18 - want to change the active item name
145:21 - to that to the name of that
145:23 - menu item if that makes sense
145:25 - i think it does all right so
145:27 - we need to say this is either a const or
145:30 - a function i'm just going to keep it as
145:31 - an arrow function like that but the
145:33 - difference here instead of setting state
145:36 - we're going to say
145:37 - set
145:38 - active item and just pass it this name
145:41 - so that it changes it
145:42 - and we don't need a render because this
145:45 - is a functional component we just return
145:47 - and we need to remove this parent curly
145:49 - brace here
145:50 - i'm going to remove this segment i'm not
145:52 - going to have any image remove this wrap
145:54 - in div
145:55 - just keep the menu
145:57 - and here we don't need to import segment
145:58 - we just need menu so we've set up our
146:01 - navbar but of course we don't want
146:03 - messages and friends and logout we want
146:06 - um so the first one we want it to be the
146:08 - home so we will give it a name home and
146:10 - the active
146:12 - uh will be will be active when it's home
146:15 - and here we don't pass the on click
146:17 - event will be this handle click but we
146:19 - don't give it this dot because this is
146:21 - not a
146:22 - class-based component anymore we just
146:24 - pass it like that and here we'll have
146:27 - we have a
146:29 - login
146:31 - tab or nav link and this will be login
146:34 - as well
146:35 - and actually i want the login and the
146:36 - logout button or the register button to
146:38 - be on the right so i'm going to put put
146:40 - it inside of this
146:42 - other menu that's positioned on the
146:43 - right
146:44 - so that's the login that's fine and
146:46 - instead of logout we'll have register
146:48 - here register make sure to change this
146:50 - one as well
146:51 - okay let's save let's see what this
146:53 - looks like but we're not going to see it
146:55 - because we have we haven't used it here
146:57 - so let's say here import
147:00 - menu bar from
147:03 - components
147:05 - slash menu bar
147:08 - and we're going to put it at the top
147:10 - here
147:10 - so
147:12 - menu bar so it's going to be on the page
147:14 - regardless of what what page we're in
147:16 - all right let's save everything let's
147:18 - make sure our app is running without any
147:20 - errors it's compiling all right it runs
147:23 - successfully let's look at our app
147:26 - let's refresh
147:27 - okay there's a problem on click this
147:29 - handle effect oh did i not save
147:32 - i did
147:34 - oh yeah i thought i removed this this
147:36 - this okay
147:38 - now it should work
147:39 - all right so we get the menu
147:41 - but it's huge so let's put everything in
147:44 - a container uh so we go back to the
147:47 - semantic ui the container where is it
147:51 - uh
147:52 - right here all right what's cool about
147:54 - this documentation is that you can see
147:57 - as well what it renders eventually so uh
148:00 - let's use it and i want to show you
148:02 - something as well so we'll just copy
148:03 - that
148:04 - and let's go in the app or close this
148:06 - terminal window
148:08 - and here we'll say import container from
148:09 - semantic ui react and let's wrap
148:12 - everything let's cut everything and wrap
148:14 - it in a container component
148:16 - so tab and put everything inside
148:18 - and let's look at our app
148:20 - we have two home buttons let's fix that
148:23 - so here
148:25 - um let's remove this
148:28 - and save
148:29 - all right so we get our buttons uh none
148:32 - of them is active but if you click one
148:34 - it becomes active but we're not browsing
148:36 - to different pages
148:38 - but i want to show you something quickly
148:39 - so we got the container right but don't
148:41 - forget at the end of the day we've
148:43 - linked the css so we can actually just
148:45 - here just replace this container with
148:47 - div
148:48 - and give it a class name
148:50 - of
148:51 - ui container because if you look at the
148:54 - documentation at the end of the day it's
148:56 - just going to render a ui container i
148:59 - did with a class ui container which
149:01 - tells um our css that you know which
149:04 - tells our page that this is from
149:06 - the semantic ui css and in fact we have
149:08 - the same effect here but just don't
149:11 - forget with semantic ui you have to
149:13 - always have this ui thing if you just
149:14 - say div dot container it's not going to
149:16 - work all right we're just going to
149:18 - revert back to using the
149:20 - container component just wanted to show
149:22 - you that
149:23 - and
149:24 - here
149:25 - we want these to be links so these menu
149:27 - items what's cool about these components
149:30 - from a semantic ui react it's an
149:32 - integration so we can still say as and
149:36 - we can have it as a different um
149:38 - component
149:40 - we can have it behave as a different
149:41 - component as well and we want it to
149:42 - behave as a link so we want to import
149:44 - that so let's say import
149:46 - link
149:47 - from
149:49 - brow to dom and here we want it to
149:51 - behave as link so here we can uh pass
149:54 - the
149:55 - props that will be on the link which
149:57 - would we just need two so this is the
149:59 - home we want it to go to just slash
150:01 - let's copy these two and paste them here
150:03 - this will go to slash
150:05 - login
150:07 - because
150:07 - those pages are there if we so if you go
150:09 - to login slash login we will see that
150:12 - the login page is there it's just that
150:13 - they're not linked
150:15 - let's go back so this will go to slash
150:17 - login and this will go to slash register
150:19 - like this let's save all files
150:23 - and let's look at our app
150:25 - all right so we get the navigation but
150:28 - the home initially is not active all
150:31 - right so the way we can solve this is
150:33 - that
150:34 - what i wanted to do is i wanted to be by
150:37 - default on the home and then when we
150:38 - click it changes
150:40 - so
150:40 - we can start by saying home here use
150:43 - state home
150:44 - and it starts there and if we go there
150:47 - to any other page it goes to that one
150:49 - and as well it highlights that one
150:52 - let's make these buttons bigger
150:54 - and let's go here so in our menu
150:58 - we can i think we can yeah we have a
151:00 - property size and by the way you can do
151:01 - control space and you can um scroll up
151:05 - you can see all the properties that you
151:06 - can add of course you can see them on
151:07 - the documentation uh here we have a
151:10 - property size and we have these sizes i
151:12 - think the biggest is massive
151:14 - and i want to give a um a color as well
151:17 - to the active item of teal
151:20 - let's save
151:21 - let's look alright so there for some
151:23 - reason like the biggest size is actually
151:25 - not that big but that's fine that's fine
151:27 - by me the those are big enough all right
151:29 - so it's got this cool teal color um one
151:32 - thing that we need to fix though if you
151:34 - just go to the page slash login like
151:37 - this
151:38 - it's not gonna highlight login it's just
151:40 - gonna it's not it's just gonna set the
151:42 - home as active so what we want to do is
151:45 - we want to each time the menu bar loads
151:47 - it it looks at the link that we're at
151:51 - and the temp
151:52 - there depending on this link we actually
151:55 - set the link active so if this link says
151:58 - login we set this active if this link
152:00 - says slash register we set this to
152:02 - active
152:03 - so let's go to our menu bar
152:07 - and
152:08 - here we can say
152:09 - const path name and we can get this just
152:12 - from the javascript from the window
152:13 - object
152:15 - this is just javascript window.location
152:17 - and the path
152:19 - name
152:21 - and depending on where we we're at this
152:23 - can uh this can be just slash this can
152:25 - be slash about whatever page you're in
152:28 - so
152:28 - uh the way we're gonna determine that
152:30 - we're in the homepage it's not gonna be
152:31 - slash home it's just gonna be slash so
152:33 - we're gonna check for that so here we'll
152:35 - have another variable called
152:38 - just path
152:39 - and we'll say if path name so we'll do a
152:41 - ternary operator
152:43 - equals
152:44 - just slash then we want to set the path
152:47 - to the word home
152:50 - else so colon um what do we do yeah okay
152:53 - so what we do here is that we have slash
152:56 - about for example or slash login because
152:59 - that's more the case in our app we don't
153:01 - want it to set it to a slash login
153:03 - because though that will confuse these
153:05 - items and they will not be active we
153:06 - just want this so we can use the
153:08 - javascript function substring so we'll
153:11 - say path name
153:12 - dot sub
153:14 - dot
153:15 - sub string or actually just sub sdr
153:19 - and
153:20 - we can start at a
153:22 - an index we want to start at the index
153:24 - one which is this one and we want to get
153:26 - the rest of the string so just leave it
153:28 - like that
153:29 - so if it's login it's just going to take
153:31 - this without taking the slash and it's
153:33 - going to set it to that page now we want
153:35 - to as well set the active item to that
153:37 - path so we want to pass it to our use
153:39 - date
153:40 - and of course this will come after
153:43 - this logic right here
153:45 - all right let me remove this comment and
153:47 - save and this should work
153:50 - all right it works so if we go to slash
153:51 - login it
153:53 - it sets that to active and if we go to
153:55 - slash
153:57 - register
153:58 - it says that to active and if we change
154:00 - them they do change and the page
154:02 - actually changes all right so that's
154:04 - that with setting the routes and
154:06 - implementing semantic ui
154:11 - hello class welcome to part three of
154:13 - this series i mean class three i don't
154:15 - know what part is i'm trying to have a
154:17 - theme here
154:19 - by the way if you've reached this file
154:20 - and especially if you've done the server
154:22 - code as well give credit to yourself
154:24 - seriously you're in the one percent of
154:26 - people that are trying to improve and
154:28 - kind of improve their skills and learn
154:30 - more stuff you're like this guy right
154:32 - here you are the hero on a
154:34 - self-actualization and self-development
154:36 - journey
154:37 - all right so enough of that and let's
154:39 - actually write some code okay so here in
154:41 - the uh
154:42 - merge folder
154:44 - i'm actually not going to open the whole
154:46 - folder anymore i'm just going to open
154:47 - the client folder because we don't need
154:49 - to write
154:50 - any server code anymore so it's less to
154:52 - look at on the left side so i'm going to
154:54 - see the one level back and i'm going to
154:56 - say npm run serve to run the server and
154:59 - i'll open a new tab what is this go away
155:02 - and here i'll say npm start to start the
155:04 - client
155:06 - so here in the home page it's currently
155:08 - empty just says
155:09 - all right it's currently empty it just
155:11 - says home page uh let's let's actually
155:14 - use some query the get posts query and
155:17 - fetch them and show them on this page
155:19 - i'm going to open uh close this client
155:21 - the terminal so it doesn't take space
155:23 - uh here we'll need the
155:26 - use query hook use
155:28 - query
155:30 - we're going to get that from
155:31 - apollo react hooks and actually we need
155:34 - to install a couple things so let me
155:36 - open a new tab new terminal tab and here
155:39 - we'll say npm install make sure again
155:41 - you're in the client folder and we'll
155:43 - install graph
155:45 - graphql and graph
155:48 - graphql
155:50 - dash tag like this
155:52 - and here let's get the graphql tag let's
155:54 - say import and the convention is to call
155:57 - it gql from
155:59 - uh graphql
156:02 - and uh here we need to write this
156:04 - graphql query that we're gonna
156:06 - you know we're gonna use or we're going
156:08 - to
156:09 - i don't even know what you do to a
156:10 - graphql
156:12 - query all right so here we'll call this
156:14 - fetch
156:15 - underscore
156:17 - uh posts underscore query
156:20 - here we'll say g equals gql
156:23 - and we'll put our uh our query here and
156:26 - it's the get posts query
156:28 - and we're going to get uh
156:30 - essentially everything so we'll get the
156:32 - id we'll get the body
156:34 - we get the created ad
156:37 - and we'll get the username
156:39 - and we get the like count
156:42 - and from the likes as well we'll get so
156:44 - let's do like this we'll get the
156:46 - username of
156:47 - of the person that liked we'll get the
156:50 - comment count
156:52 - and we'll get from comments
156:54 - array we'll get the id username
156:58 - and created ad
157:00 - and the body of the comment all right
157:03 - um by the way i've mentioned this before
157:04 - if you want syntax highlighting instead
157:06 - of the gql tag template you can get this
157:09 - graphql for vs code extension and that
157:11 - will do that for you all right let's
157:13 - save let it format
157:14 - what is it not format
157:16 - of course because i need to wrap this in
157:18 - a query tag so do like that and then
157:21 - save all right cool
157:23 - so here we'll um
157:26 - we'll um actually run this query so
157:28 - we'll say
157:29 - uh const
157:30 - and from use query we get a couple of
157:33 - things
157:34 - from them there is loading which is true
157:36 - when we're actually loading and there's
157:38 - data
157:39 - and which has the data so here we'll say
157:41 - equals use query and then we'll pass it
157:44 - our fetch posts query and yeah that's it
157:48 - so here we can just say if data so we
157:51 - have if we have data we can say uh
157:54 - console.log data so we'll see what we
157:56 - get so let's save this let's actually
157:59 - close this terminal because taking too
158:01 - much space or let me close it
158:03 - all right so there's a problem here
158:04 - graphql does not contain
158:06 - uh oh because it's from graphql tag not
158:09 - graphql
158:11 - let's go back
158:12 - let's open up our console
158:14 - and there we go we get an object and
158:15 - it's got four posts all right and our
158:18 - posts are stored in the get posts object
158:20 - because that's how queries and mutations
158:22 - work so what we can do we can um just
158:25 - destructure that so from that we get um
158:28 - get posts and we can even give it an
158:30 - alias which is just post because it
158:32 - makes more sense
158:34 - so here what we need to do we need to
158:36 - iterate through these posts and show
158:38 - them and for this i'm going to use the
158:40 - semantic ui okay we're here
158:43 - where is it
158:44 - we need we need the grid i'm going to
158:47 - use a 3 grid 3 column grid layout so we
158:51 - can just copy this
158:53 - grid tag
158:54 - from here let's go to our home
158:57 - i'll paste this here
158:59 - and we need to close the grid
159:02 - component
159:04 - let's remove these uh
159:06 - three or two columns and here we need to
159:09 - import that so we need to say import
159:11 - grid
159:12 - from
159:13 - semantic ui react
159:16 - i'm going to remove the divided because
159:17 - i don't want that divider line and here
159:20 - i'm going to put another row at the top
159:23 - to put like a title of the page
159:25 - and here we'll say
159:26 - put a header one and say recent
159:29 - posts
159:31 - and here we'll have another row under
159:33 - that row and this will have a column but
159:36 - actually
159:37 - let's cut this column
159:38 - and inside of this row we want to check
159:40 - if we're loading because i want to add
159:42 - like a loading spinner thing
159:44 - and if we're loading so if that's true
159:48 - we do a ternary operator and here for
159:50 - now i'm just gonna put a header one and
159:52 - say loading posts dot dot
159:56 - and then here we'll put colon so else
159:59 - then uh we're gonna actually iterate
160:01 - through our posts so here we'll say uh
160:04 - and the thing is by the way we could
160:05 - this can be null or undefined because
160:08 - data itself is not uh populated so we
160:11 - need to check for it first if it's
160:13 - truthy so we'll say if post so posts and
160:16 - end now we can loop through them so
160:18 - we'll say post
160:19 - dot
160:20 - map and for each post
160:22 - actually what's up oh actually we don't
160:24 - need this because we're already in a
160:26 - javascript block so we can say for each
160:28 - post
160:29 - we want to return the following
160:32 - and uh here we will paste that column
160:35 - back but we're not gonna have an image
160:37 - and inside of here we can put everything
160:39 - that relates to the post but of course
160:41 - we're gonna let's put this in its own
160:43 - component so that we'll have smaller
160:44 - components and uh you know better
160:46 - modularity so here i'll call this
160:48 - postcard because we haven't created it
160:51 - yet and let's pass it the post so we'll
160:53 - pass it a property called post with the
160:55 - value of this post
160:57 - all right let's close this and uh
160:59 - because we're iterating through and in
161:01 - react when we iterate through we need to
161:02 - give a key value to our topmost
161:05 - component or key attribute
161:08 - and this will be the post id because
161:10 - that's unique so we don't have to worry
161:11 - about non-unique keys
161:13 - let's remove this if data console log
161:16 - data
161:17 - and let's save this of course this is
161:19 - going to have an error because we don't
161:20 - have a postcard yet
161:23 - let's import it and then create it so
161:24 - we'll say import postcard from
161:28 - we put it in components so we go back
161:29 - one level we go to components slash post
161:32 - card like this
161:34 - let's create that so post
161:37 - card dot js
161:40 - and here we'll import
161:42 - react
161:46 - and we'll import
161:48 - a couple of things from semantic ui so
161:50 - we'll have the card
161:52 - we'll have the icon
161:54 - and we'll have the label
161:57 - i think that's it for now from semantic
162:00 - ui
162:01 - css react
162:03 - and here we'll say function
162:06 - post card
162:08 - and we'll get the props because we're
162:10 - passing some props down here we need to
162:12 - say export default
162:14 - postcard
162:16 - and
162:17 - here we will
162:18 - say return
162:21 - before we turn we need to get our
162:22 - properties so we can say const
162:26 - so we're going to get the body we're
162:28 - going to get the created add we're going
162:30 - to get
162:31 - what else id
162:33 - username
162:36 - body oh we got body already
162:39 - what do we get like count yeah
162:41 - and
162:43 - so we need to get comment count
162:46 - count like that
162:48 - and the likes
162:51 - all right i think that's it let me look
162:53 - back
162:55 - likes
162:57 - yeah that's it common count and like
162:58 - count yeah that's fine so we get them
163:00 - from props dot uh post
163:02 - or actually
163:04 - let's just copy all of this we can
163:05 - destructure it straight away inside of
163:07 - here so here we'll say from
163:10 - props
163:11 - and from post
163:12 - we're gonna destructor all of this so we
163:15 - don't need to do this expression here
163:17 - all right so here we will return a card
163:23 - and
163:24 - actually we can just copy one card from
163:26 - here just go
163:28 - i have to type everything when it's
163:30 - already here i want something that looks
163:32 - like this i want to get the molly one
163:34 - let's get the second one so all of this
163:37 - card tag copy that
163:39 - our card component
163:41 - all right so here we have our card card
163:43 - content floated right that's fine
163:46 - uh actually yeah that's fine i want to
163:48 - leave that image uh but here instead of
163:51 - this relative path we need to get the
163:52 - actual path of that or the the link to
163:54 - that image so let's do this let's get
163:56 - that link copy it and let's paste it
163:59 - here
164:00 - all right so the header is not molly
164:02 - thomas it's actually the username of
164:04 - whoever posted this post so here we'll
164:06 - put the username
164:08 - and here the the meta will be the
164:10 - created at date so here but the created
164:13 - add date right now is a iso string so we
164:16 - need to format it so let's open a new
164:18 - terminal tab and install moment so let's
164:21 - say npm install moment
164:23 - and give that a moment to install hahaha
164:27 - so here we'll say import moment
164:30 - from
164:31 - moment
164:32 - and um
164:34 - here in the meta we'll say moment
164:36 - and we'll pass it the created ad oops
164:38 - what is that created add and here we'll
164:41 - say dot from now
164:43 - which
164:44 - which we'll do like kind of like an hour
164:46 - ago or five hours ago etc
164:49 - so here let's um in the description this
164:51 - is the body of the card we'll just say
164:53 - body which is the body of the post
164:56 - and here let's remove this stuff and
164:58 - because we're gonna have some different
164:59 - buttons here let's just put a paragraph
165:01 - saying buttons
165:03 - here
165:04 - and
165:05 - let's save everything
165:07 - see if there's no
165:09 - there's something wrong
165:12 - oh okay i did i just didn't save
165:15 - i didn't save when i added this import
165:16 - line at the top
165:18 - okay let's close this
165:21 - okay image is not defined
165:23 - oh yeah because we didn't import image
165:25 - so here image from symantec ui
165:28 - all right cool so we get our posts and
165:31 - um
165:32 - they don't have any margin between them
165:34 - so let's fix that so here let's go back
165:36 - here to the home
165:38 - uh this column right here let's give it
165:40 - some inline styling just say
165:42 - margin
165:44 - bottom
165:45 - let's give it 20 pixels
165:47 - save that
165:49 - uh cool we got some margin bottom
165:52 - and
165:53 - okay so i want to remove this ago
165:55 - because obviously if it's to two hours
165:57 - that means it's two hours ago we can do
165:59 - that by here in the from now we can by
166:02 - default it passes it false we'll pass it
166:04 - through and it will remove that ago all
166:06 - right so just two hours two hours and
166:09 - the thing is these cards are not taking
166:11 - the um the full width of uh of the
166:14 - container div
166:15 - or not the container i mean this uh
166:17 - column div
166:18 - so what we need to do
166:20 - so here in the card we can just add this
166:22 - property called fluid which will let
166:24 - them take up more space cool all right
166:26 - they look better now
166:28 - let's make just like facebook let's make
166:30 - this um timestamp a link into the post
166:33 - itself
166:34 - so here
166:35 - for this uh card meta we're going to say
166:38 - as
166:39 - and it's going to be a link
166:40 - i'm going to give it a property too and
166:43 - this let's do a backticks and we'll say
166:45 - slash posts slash dollar sign curly
166:47 - braces and here we'll put the id of the
166:50 - post of course we need to import link as
166:52 - well so let's import
166:55 - link
166:56 - from react
166:58 - router
166:59 - dom
167:00 - and let's save let's look at it all
167:03 - right so this becomes a link and it
167:05 - takes us there of course there's nothing
167:06 - here all right cool so this takes us to
167:08 - that id etc etc
167:10 - all right so let's actually add these
167:12 - buttons the like and comment buttons
167:15 - so
167:15 - the way i want to do it i want to use
167:17 - this button right here whereas
167:19 - button
167:21 - button button
167:23 - yeah button here
167:24 - i should have opened it already
167:26 - so i want to use this button i think it
167:28 - looks sick
167:29 - so here let's uh copy this first button
167:33 - right here
167:36 - and here in the extra div
167:38 - let's paste it and of course that's the
167:40 - import button from from semantic ui we
167:43 - already have label and icon installed i
167:46 - mean imported
167:47 - and here in this button is going to be
167:48 - as div label position right that's fine
167:51 - but i want this to be a teal because
167:53 - it's the like button
167:54 - and i'm going to leave it as a heart and
167:56 - i don't want it to say like because
167:58 - that's kind of self-explanatory
168:00 - and here we'll have a label it's not
168:01 - going to be an anchor tag so we'll
168:02 - remove that the color will be teal
168:05 - and instead of this just hard coded
168:07 - value we'll have a number and this will
168:09 - be the like count
168:11 - let's save let's see what this looks
168:12 - like
168:14 - cool it looks uh but it looks like as if
168:17 - we already liked it so i want it to be
168:18 - just um
168:20 - kind of outline only so i think yeah
168:23 - this button right here i think we just
168:24 - need to add it
168:25 - yeah yeah it's just we add basic here
168:28 - all right cool it's uh just outlined
168:30 - because i wanted to because of course we
168:32 - need to later implement when we log in
168:35 - or uh when we're logged in that we can
168:37 - like but when we're logged out i want it
168:39 - to be kind of um
168:40 - outlined like this and when we click it
168:42 - it takes us to the login page right now
168:44 - when we click it it doesn't do anything
168:45 - actually let's add a on click button
168:47 - event
168:49 - so here we'll say on click
168:50 - equals
168:51 - let's call this function like post
168:54 - and let's create that right here say
168:56 - function
168:58 - like post
169:00 - of course for now it's just going to
169:01 - console.log
169:03 - like post
169:05 - like that
169:06 - and we want as well another button for
169:08 - the comment for comments so let's cut
169:10 - that and paste copy and paste it so div
169:14 - that's fine right on click it's going to
169:16 - say comment
169:18 - on
169:19 - post
169:20 - we can create that as well so here we'll
169:22 - say
169:23 - function
169:24 - comment on post it's just gonna
169:27 - console.log
169:28 - um
169:29 - comment on
169:31 - post
169:32 - so here we have comment on post we have
169:34 - a button but the this button i want it
169:36 - to be blue
169:37 - and the icon is to be comments
169:41 - and the label is going to be
169:44 - of color blue and basic that's fine
169:46 - pointing left and here we will have the
169:48 - uh comment count and not the like count
169:52 - all right let's save all right we get
169:55 - the uh
169:56 - this is interesting actually this is a
169:57 - different icon
169:58 - i think i'm meant to type comment not
170:01 - comments
170:03 - yeah okay i was using this icon but
170:05 - actually i prefer the new icon because
170:06 - it has multiple comments instead of just
170:08 - one okay yeah cool so now we're showing
170:11 - the actual comment count and the like
170:13 - count and we're showing these two
170:15 - buttons of course they don't do anything
170:16 - right now they they just print some
170:20 - some logs to our console but of course
170:22 - we need to implement this functionality
170:24 - later to have them do stuff but uh
170:27 - that's gonna come after we handle
170:28 - authentication because of course we need
170:30 - to be logged in for us to be able to
170:32 - like and comment on posts one thing i
170:34 - want to fix though is this um title this
170:36 - recent post so i want to put it in the
170:38 - middle and have some margin to the top
170:41 - so let's go to the home
170:43 - right here let's give this a class so
170:45 - here this row let's give it a class name
170:50 - and let's call this page dash title
170:53 - let's go to our app.css say page title
170:58 - and let's give it a display
171:01 - block
171:02 - and let's say text
171:06 - text align center
171:08 - and let's say font size let's give it
171:10 - some font size uh some bigger font size
171:13 - of two ram
171:15 - and some margin top as well margin
171:18 - top
171:19 - of
171:20 - 10 pixels
171:22 - let's save let's save all files
171:25 - um
171:26 - all right there's something wrong
171:30 - okay let's look at here
171:32 - i don't know here
171:35 - okay the display block is not being
171:36 - applied because it's being overridden by
171:38 - the dot row uh we can just simply say um
171:43 - uh we can add the important
171:45 - thing to it
171:46 - yeah okay now it's fixed all right
171:48 - that's just these minor effects that i
171:50 - wanted to do in the next video we're
171:51 - going to work on logging in and
171:53 - registering users so look forward to
171:55 - that
171:58 - hey class and welcome back i have
172:01 - nothing cringey to say in this intro so
172:03 - let's just get to it all right so in the
172:04 - last class we fetched all our posts and
172:07 - showed them on the home page so it'd be
172:09 - nice to actually now have a login and a
172:10 - registered form so let's do just that
172:13 - all right let's go to our app
172:14 - and here in the
172:16 - register component we're going to use a
172:18 - form so let's say up here import form
172:22 - from
172:23 - symantec ui react and the waveform works
172:26 - if you go to the semantic ui react
172:29 - documentation is that you just put a
172:31 - form and inside of it you put a form
172:33 - field and then inside of that you can
172:34 - put a label and then an input with all
172:36 - the props that you wanted to have or the
172:38 - attributes but there's another way which
172:40 - is better in my opinion to do is that
172:42 - you just have a form input here and you
172:44 - put all those props inside of just this
172:46 - one component so we'll use that approach
172:49 - so here inside of the
172:51 - div here
172:52 - instead of saying just a header one we
172:54 - put a form so let's say form
172:56 - and then we'll have an on submit
172:59 - which is on
173:00 - submit which we haven't created yet but
173:02 - we will
173:03 - and we will say as well no
173:05 - validate because html5 by default tries
173:08 - to validate email
173:10 - fields so here we'll say we'll have a
173:12 - header one saying register
173:14 - and here we'll have our first form field
173:16 - so we'll say form dot
173:18 - field or input rather
173:20 - and here we'll say actually will not
173:23 - close it we'll have a couple of
173:24 - attributes here we'll have a label for
173:26 - the register and it will
173:28 - actually this is the first for a field
173:30 - which is going to be the um
173:32 - the username field so we'll have a label
173:35 - saying username
173:36 - and we'll have a placeholder
173:39 - saying username like this
173:42 - actually this needs to be capital uh u
173:44 - as well
173:45 - uh we'll have a name which we'll use to
173:47 - identify what field this is when we're
173:49 - like changing and submitting stuff so
173:52 - this will be username like that
173:54 - and we'll have a value
173:56 - i'm going to give this actually we can
173:59 - initialize this right now so we'll say
174:00 - const
174:02 - and we'll have values
174:04 - and we'll have set values
174:07 - equals use state
174:09 - and it's going to be um
174:11 - this these uh default values will be a
174:14 - username
174:16 - we'll have an empty string and we'll
174:17 - have
174:18 - a password
174:20 - which is an empty string we'll have an
174:22 - email
174:23 - which is an empty string and we'll have
174:25 - a
174:27 - confirm password
174:29 - which is an empty string as well okay
174:31 - this doesn't make a sense in terms of
174:32 - order doesn't matter that much but i
174:34 - just like to keep it kind of
174:37 - the same order that i'll put to the
174:38 - fields all right so here we'll have the
174:40 - value would be value.username or
174:42 - values.username
174:45 - and here we'll have
174:47 - an on change so on change
174:50 - will be
174:51 - on change which we'll create in a moment
174:53 - so let's close this so this is our first
174:55 - input let's copy this
174:57 - three more times one two three
175:00 - so the second one will be the email so
175:02 - the label will say email
175:04 - the placeholder will say email
175:07 - the name will say email and i should
175:09 - have ctrl d but i'll do in the next one
175:11 - the values as well values.email so here
175:13 - let's click here and ctrl d once and say
175:17 - password
175:19 - and the name click here and ctrl d1 and
175:21 - say password like this with a lowercase
175:23 - p
175:23 - and here let's click here
175:25 - and say
175:26 - confirm
175:29 - password
175:30 - like this
175:31 - and here this will be confirm password
175:34 - like that
175:35 - and of course we need a button for
175:37 - submitting this form so we'll have a
175:40 - button
175:41 - this is a semantic ui button so we need
175:43 - to import it in a second so this will be
175:45 - of type submit because it's a form and
175:47 - let's give it the
175:49 - the primary attribute so that it becomes
175:51 - blue and you will say register
175:54 - let's go up here we need to bring button
175:57 - and we also need to import uh use state
175:59 - from react because we're using it so
176:01 - we'll say use state like that
176:04 - let's now write these uh um on on submit
176:07 - and on change so it will say um
176:10 - const
176:11 - on change
176:14 - equals we'll take an event
176:17 - and it will
176:18 - it's just going to set a set to the
176:21 - values
176:22 - but remember here we need to spread our
176:24 - existing values otherwise it's just
176:26 - going to override it with one key value
176:28 - attribute
176:30 - pair and here we need to get
176:32 - event dot target
176:35 - dot name this is going to be the name of
176:36 - the field because it's going to be this
176:38 - name right here
176:39 - and
176:40 - event dot target dot value to give it
176:44 - that to to give you the value of that
176:46 - all right so that's that for unchanged
176:48 - now we need the on submit so here we'll
176:50 - say const on submit
176:54 - submit
176:56 - equals it's going to take the event
176:58 - and we're going to
177:01 - first of course prevent default so
177:03 - prevent
177:04 - default
177:06 - and here we need to um
177:08 - check and send our actually we don't
177:11 - check we're not going to do any client
177:12 - side validation because we already have
177:14 - our server side validation so we need to
177:16 - straight away send a mutation to our
177:18 - server and uh persist these users if the
177:20 - data is valid so here we actually will
177:23 - actually write our
177:25 - graphql mutation so here we'll say const
177:28 - register
177:30 - user
177:32 - and it will be gql
177:34 - we need to import this as well so we'll
177:36 - say mutation
177:38 - uh register
177:40 - and this will take a couple of variables
177:42 - so it will take a username of type
177:44 - string and that's required we can just
177:46 - copy this just to be like quick so three
177:49 - more times so we'll have a an email
177:53 - a a password
177:56 - a confirm
177:57 - password
177:59 - and here so after this we'll say like
178:02 - that and this will trigger the register
178:05 - mutation which takes a register input if
178:08 - from if you remember our server code and
178:11 - this will have a couple of things and
178:13 - this will have a username it's the same
178:16 - it's the same thing but we need to give
178:17 - them as variables here
178:19 - so username and we can just copy this
178:22 - three more times
178:25 - and here will be an email
178:28 - here will be the password
178:30 - and here will be the oops i need to ctrl
178:33 - d and say confirm
178:35 - password
178:37 - all right so after this is triggered we
178:40 - need to get a couple of fields back so
178:41 - we'll get all of them so the id the
178:43 - email the username the created
178:46 - ad and of course most importantly the uh
178:49 - the token the jwt token of course we
178:52 - need to import gql so let's go up here
178:54 - we'll say
178:55 - import
178:56 - gql
178:57 - from
178:58 - graphql tag
179:01 - and uh we need to as well the use
179:03 - mutation hook so we'll say import
179:05 - use
179:06 - mutation
179:08 - from
179:09 - uh at apollo slash react hooks not
179:12 - common hooks
179:14 - all right so here we'll say let's remove
179:17 - this white space and we'll say const
179:19 - oops const
179:21 - and we'll get a couple of things from
179:22 - here from this so
179:24 - we'll use a radius structuring and let's
179:26 - call this a function add user
179:28 - and we'll have a couple of things from
179:30 - here but we'll just get the loading
179:32 - and here we'll say equals use mutation
179:36 - and we'll pass it our register user
179:38 - mutation and here for the um
179:41 - for the options we'll have a function
179:43 - called update
179:45 - and this will be triggered if the
179:47 - mutation is successfully um executed so
179:50 - this will give us two um a couple of
179:53 - things the proxy that this will we will
179:55 - rarely use it's got some metadata and
179:58 - here we'll have a result this will hold
180:00 - the result of the mutation so here let's
180:02 - just console.log the result for now and
180:04 - see what happens
180:05 - and um
180:06 - i think yeah this is it for now oh we
180:09 - also we need to give the um the
180:12 - variables because this is a mutation we
180:14 - need to give some variables
180:16 - of the mutations we can all we can do
180:18 - here so username is
180:21 - values.username and then attach the
180:23 - other three but since the object of
180:26 - values is the same this that is those
180:28 - values that we want to send we can just
180:30 - say variables is values simple as that
180:33 - and now of course we need to trigger
180:35 - this add user function
180:37 - when we submit our form but the thing is
180:40 - we can't just put it here and we can't
180:42 - put this
180:44 - um above here or can we well actually we
180:46 - can yeah we can just put this above here
180:49 - and so we have access to the add user
180:51 - yeah so you can just add user like this
180:53 - and that will work
180:55 - all right let's um i think this is it
180:57 - let's save
180:58 - let's make sure that we have no errors
181:00 - here
181:01 - we don't cool
181:02 - it says that we're not using loading but
181:04 - we'll use it in a second all right so
181:06 - let's look at our form all right it's
181:08 - way too wide let's um let's fix that
181:11 - so here
181:13 - for our wrapping div we can give it a
181:15 - class name
181:17 - of
181:18 - form
181:19 - container
181:21 - or container like this
181:24 - and let's go to our app.css
181:26 - here we'll say
181:27 - dot form
181:29 - dash container
181:31 - and we can just say
181:33 - width is
181:35 - 400 pixels
181:37 - and let's give it a margin auto so it's
181:39 - pushed to the middle
181:40 - auto let's save let's save all files
181:44 - all right it looks much better now okay
181:46 - let's open up the console window put
181:48 - them side by side and see what happens
181:50 - if we just send yeah if we just send a
181:53 - form empty like that we get uh errors we
181:55 - can't see them here but they're actually
181:57 - encapsulated in the errors object that
181:59 - we can get from this but if we register
182:02 - a new user successfully let's say new
182:04 - let's give some valid data so new and
182:06 - new email.com
182:08 - and here we'll say one through six
182:11 - and
182:12 - oh actually i forgot to say this is of
182:14 - type password so let's quickly change
182:16 - that
182:17 - so here this uh these passwords are
182:20 - where are they oh i didn't even give the
182:22 - type actually so let's give the type to
182:24 - these
182:24 - [Music]
182:25 - just for good measure so this one will
182:27 - be type this is the username type text
182:30 - just copy this here we can just give a
182:33 - type of email
182:34 - and for the password we'll give a type
182:36 - of password
182:38 - and we can just copy this one more time
182:40 - and give it to the confirm password a
182:42 - type of password as well
182:44 - all right
182:45 - let's look at our app now if we type
182:47 - something here it's um it's hidden so
182:49 - here we'll say new and the email will be
182:51 - new at email.com
182:53 - and the password will be one through six
182:56 - and the confirm password will be the
182:57 - same thing
182:59 - and we hit enter there we go we get data
183:01 - back which holds a data object
183:03 - which holds a register object because
183:05 - that's the name of the mutation and we
183:07 - get exactly the fields we want all right
183:09 - that's brilliant but what we want to do
183:11 - is we want to redirect to the home page
183:14 - once the user is registered successfully
183:16 - and we want to use that loading loading
183:18 - boolean when we send some data we want
183:21 - it to see like spinning
183:23 - that's really easy with semantic ui
183:25 - what we can do let's go to our form here
183:29 - we can give it a class name
183:32 - and if the class name is loading it's
183:34 - going to be it's going to have a spinner
183:35 - in the middle so here we'll have a
183:38 - actually a dynamic value and we'll say
183:40 - if loading it's the loading that we got
183:42 - from the user mutation
183:44 - then we give it a class of loading
183:47 - else we give it like just an empty class
183:49 - like that all right let's save
183:51 - let's go to our app
183:53 - and here you can see briefly the
183:55 - the loading spinner comes for a second
183:57 - and then goes because like the response
183:59 - comes way too fast but it does have a
184:00 - loading effect
184:03 - all right so what we need to do now is
184:05 - we need to handle um errors because we
184:07 - can we can get some errors from our
184:09 - request and we need to show them on our
184:11 - form so here
184:13 - after the update i'm going to say on
184:15 - error
184:16 - which is this other function or
184:18 - other function that we have and it holds
184:20 - the error and here we'll say
184:23 - um
184:24 - we will say actually what do we do oh we
184:26 - need to actually have some errors in our
184:28 - component and then we set them here if
184:30 - they exist so here we'll say const and
184:32 - we'll have errors
184:35 - like this and we'll have a set
184:37 - errors
184:38 - function equals
184:40 - use state and we'll pass this an empty
184:42 - object like that
184:44 - and inside of here so if we get errors
184:46 - we just want to say set errors
184:49 - let's put a comma here
184:50 - and these will be inside of error dot
184:54 - graph
184:55 - ql errors i get some autocomplete
184:57 - because i typed it before but here
185:00 - graphql errors you can return multiple
185:02 - errors but the way our server code is is
185:04 - written is that we get we give one error
185:07 - and inside of that there's an object
185:08 - that holds all those errors so we will
185:10 - access the first error like this in this
185:12 - array and we say dot extensions
185:16 - extensions which is this object that's
185:18 - inside of it dot exception
185:21 - exception
185:22 - and here we've we have put our errors if
185:25 - you remember
185:26 - when we wrote this code in our server
185:28 - code
185:29 - so here we set those errors to these
185:31 - errors and we can actually console log
185:34 - them just to make sure that these this
185:35 - is what we're looking for so here we'll
185:37 - say console.log and we console.log
185:39 - exactly that and then we set it to our
185:41 - errors
185:42 - but of course we need to show them on
185:44 - our markup
185:45 - so i didn't find a way how to do this
185:47 - with semantic ui react but so i'm just
185:49 - going to use the semantic ui css because
185:51 - we have access to that as well so here
185:53 - we'll have a um a div
185:56 - or just like this dot ui dot error dot
185:59 - message
186:01 - and here we need to put a ul with a
186:03 - class of list
186:05 - and here we need to to loop through our
186:07 - errors and access them but the way our
186:09 - errors work is we get a key called for
186:11 - example username and then we get an
186:13 - error called username must not be empty
186:15 - so we don't need the keys we just need
186:17 - to show the errors so what we need to do
186:18 - is object dot
186:20 - values
186:21 - so we access the values and not the keys
186:24 - of errors because we have that in our
186:26 - state or like set state variable
186:29 - dot map and we map through them so for
186:31 - each value
186:32 - we want to display an ally so we just do
186:34 - like this parenthesis and we'll display
186:36 - an ally since we're iterating through an
186:38 - array we need to say we need to give it
186:40 - an key because we're in react and this
186:42 - key will be the value because these are
186:44 - unique
186:45 - and here we'll say and the what it
186:47 - contains as well is the value of this
186:49 - error and of course this is conditional
186:51 - because we might not have errors at all
186:53 - so let's cut that and here we'll say
186:56 - we can if we check to if we just have
186:59 - errors it will be truthy because we have
187:01 - errors all the time and it's an empty
187:02 - object at the beginning so what we need
187:04 - to check we need to check if this errors
187:06 - has any keys so we'll say object dot
187:09 - keys
187:10 - of errors
187:12 - dot length
187:14 - bigger than zero so if the length of it
187:16 - is bigger than zero then there is some
187:17 - keys and that means we have some errors
187:19 - so let's show this so we'll say and and
187:22 - and we put parentheses and we put
187:24 - everything back in here
187:25 - all right so let's save that
187:28 - and let's go to our app okay let's
187:30 - submit an empty form and right now we
187:32 - should get an error for username for
187:34 - email and for password as well
187:36 - and we do so a username must not be
187:38 - empty email must not be empty and
187:40 - password must not be empty but let's
187:42 - invalidate these as well because it
187:43 - makes more sense to see the ones that
187:45 - are not valid invalidated we can simply
187:48 - do that by
187:49 - um so in the field we'll add this error
187:52 - property so error property which is a
187:54 - boolean so it's either true or false but
187:56 - here we'll give it a dynamic value so
187:58 - for username we're going to check for
188:00 - errors dot username
188:02 - and if that's truthy so
188:05 - we'll give we'll put a ternary operator
188:07 - and say true else it's false there's no
188:10 - error for username so let's copy this
188:13 - paste it here for email and change oops
188:15 - change this to email
188:17 - let's paste it for the password and
188:19 - change it to password
188:21 - and let's put it to the confirm password
188:24 - and change it to confirm password
188:26 - let's save that
188:28 - let's look at our form let's make it
188:30 - full screen
188:32 - and here let's say
188:33 - so let's have no username and let's put
188:36 - a valid uh email so
188:39 - new at email.com and put like i'll put
188:42 - one through six and then here put one
188:45 - through
188:46 - seven
188:47 - so there we go it says username must not
188:48 - be empty and passwords must match so
188:51 - let's fix that that's fixed you get just
188:53 - username and if i put new here and say
188:55 - register just press enter
188:57 - actually the username is taken because
188:59 - we registered that new
189:01 - new user so here we can say new to
189:05 - and the regis oh it says username is
189:08 - taken do i have new tool as well
189:11 - okay so i have a new and i have a new
189:12 - two in the database so i'm just gonna
189:14 - delete those for now and test again
189:17 - let's delete this as well or is it
189:19 - yeah oh that's confusing news here let's
189:22 - delete that oh actually one thing i
189:24 - forgot
189:25 - um so here
189:27 - once we submit and it's successful and
189:30 - we add a user on the update here once we
189:32 - get our successful result we need to
189:34 - redirect to the home page so here we'll
189:36 - say props
189:37 - dot props dot
189:39 - history
189:41 - push and we'll just push the slash which
189:44 - is the home uh homepage and of course we
189:46 - need to take our props as well from the
189:48 - parent component
189:49 - all right so let's save that
189:51 - proxy we don't need to use it so we can
189:53 - omit it and just put an underscore here
189:55 - so let's uh
189:56 - let's go to our app right here
189:58 - and here let's put some valid data so we
190:01 - deleted that new user so we can use this
190:02 - again so let's say new
190:04 - at email.com and let's put one through
190:07 - six one through six
190:10 - register
190:11 - there we go you get a cool spinner and
190:12 - we are logged in
190:14 - and we go to the home page and we get
190:16 - this token back now of course we're not
190:18 - putting this token in any application
190:20 - state or anything for now but the
190:22 - register is working and it's sending a
190:24 - request and we're successfully
190:25 - registering this user
190:27 - and if we check there we go new at
190:29 - email.com all right let's do the same
190:31 - for the login
190:33 - page as well so what we need to do is
190:36 - actually we can copy everything from
190:38 - here from the register page and we go to
190:40 - the login component and paste everything
190:45 - here actually one thing that i want to
190:46 - do is let's put this
190:49 - this
190:50 - on change and the on submit let's put
190:53 - them in a custom hook because otherwise
190:55 - we're repeating the same code across two
190:56 - components
190:58 - so let's copy this um
191:01 - actually let's open up the
191:03 - the side here let's put a create a new
191:06 - file inside a folder called util so util
191:08 - slash hooks and here we'll keep our
191:10 - custom hooks
191:12 - so from the login we can copy the
191:14 - onchange
191:15 - and here let's uh
191:18 - import we'll need use state because we
191:20 - want to store the values here as well
191:22 - from react
191:24 - and here we'll say
191:25 - const
191:27 - export const i've written this hook for
191:30 - the
191:31 - custom hook video that i have so you
191:33 - might be familiar with it so this will
191:36 - be
191:37 - it will take a callback and i'll explain
191:38 - what this does in a second
191:40 - and it will take an initial
191:42 - state
191:43 - and this will be by default an empty
191:45 - object and you will do the following
191:48 - and here we'll have let's let's paste
191:50 - that and then let's copy as well this
191:52 - values from here or like this
191:55 - from here
191:57 - and um
191:58 - spaced it here but this will be actually
192:00 - the initial state so here in the login
192:03 - actually in the register
192:05 - let's fix the register first so here
192:07 - we'll say const
192:08 - initial
192:10 - state equals that
192:13 - and here in the hook if we take an
192:15 - initial state and then we and you use
192:17 - state and we pass it the initial state
192:20 - like that and the own change will be i
192:23 - think the same
192:24 - yeah it's the same so we get an event
192:25 - and we set values these values to that
192:28 - that's fine and then we'll have the on
192:30 - submit so we'll say const on submit
192:34 - take an event and it will oops
192:38 - it will
192:40 - event dot prevent default
192:45 - oops i misspelled default like that
192:48 - and here it will call that callback
192:50 - because the thing is we don't uh
192:52 - depending on what page this used form is
192:54 - used in the callback can be different
192:56 - right i know in our case it's not but we
192:58 - make it more generic by passing this
192:59 - callback and then calling it from here
193:01 - now of course we need to return these
193:03 - values and the on change in the on
193:04 - submit so that we can use them in the in
193:06 - the component so we'll say return and we
193:08 - turn an object with the onchange
193:11 - the onsubmit
193:13 - and the values like that all right so
193:15 - our hook is done let's save it
193:17 - and here in the register let's import
193:19 - that hook so here we'll say import
193:22 - uh what is it called used for
193:24 - actually
193:25 - because it's not the default we need to
193:27 - do like that
193:28 - from go back one level to util slash
193:32 - hooks
193:33 - so here we don't need to say this like
193:35 - that
193:36 - we just need to extract those so we'll
193:38 - say const
193:40 - and we'll get the on change
193:42 - the on submit
193:45 - and the values
193:47 - from use form
193:50 - so this will take a callback uh let's
193:52 - give it the add add user
193:55 - function as the callback and let's give
193:57 - it the initial state which is going to
193:59 - be this so let's copy what's inside of
194:01 - this initial state
194:03 - we can just pass it like that without
194:05 - actually declaring a variable here
194:07 - so here we have those we have the on
194:09 - change in the on submit so we can just
194:10 - remove this and we can remove this
194:14 - so but the problem here of course the
194:16 - the add user is not recognized up here
194:18 - but as well if we take this and we put
194:21 - it underneath here the values up here
194:23 - will not be recognized because they're
194:25 - coming from here so a workaround around
194:28 - this is
194:29 - we can declare a function here say
194:31 - function
194:33 - let's call it register user
194:35 - and this will simply just call the add
194:38 - user
194:39 - uh function which we get from here and
194:41 - then we can pass this as uh this
194:44 - callback right here now you might be
194:46 - wondering what the hell why does this
194:47 - not be um not be recognized up here but
194:51 - this will but the way javascript works
194:53 - is that all the functions with a keyword
194:54 - function in front of them at the
194:56 - beginning of the program are hoisted
194:59 - meaning that they are brought up and
195:01 - kind of read through initially and then
195:03 - even if it's down here but it has the
195:06 - function keyword it's actually
195:07 - recognized up here
195:08 - unlike the const
195:10 - variable functions all right so this
195:12 - should be fine
195:14 - let's we didn't actually see our console
195:15 - log errors but of course
195:17 - seeing the result of what happened we
195:19 - are getting the pro the proper error so
195:21 - we can remove these console logs
195:23 - and let's uh save everything
195:26 - do we not yeah we don't have any errors
195:28 - let's check let's make sure that
195:30 - everything works the same in a login
195:31 - form
195:32 - so we go here
195:34 - all right cool so everything works the
195:36 - same the on submit is working
195:38 - and as well if we submit some valid uh
195:40 - data so you will say i don't know some
195:42 - just random email
195:44 - for now and put one through six
195:50 - there we go registered and we're
195:52 - redirected to the home page so the the
195:54 - hook is working fine now we need to
195:55 - integrate it in the login form so here
196:00 - let's import it so let's say import
196:03 - use form
196:05 - from
196:06 - and go back one level to
196:08 - util slash hooks
196:12 - and here this is login not register
196:15 - oops log
196:16 - in
196:17 - and here we have the errors the same way
196:19 - we'll have a const and this will be
196:21 - let's call it login user
196:24 - and this will call a mutation of a login
196:26 - user which we'll create in a second
196:29 - and update
196:30 - it will let's not
196:32 - console.log that we will push to the
196:33 - home page the same way and we will set
196:35 - the errors the same way nothing changes
196:37 - here and the on submit is the same
196:39 - except it's gonna call uh what is it
196:41 - gonna call it's gonna call the login
196:43 - user
196:44 - from here
196:45 - and then
196:47 - actually no we don't have a lot on
196:48 - submit we're going to use the
196:50 - use form hook excuse me so here we'll
196:52 - have the on change
196:55 - the on
196:56 - submit
196:57 - and we'll have the values
196:59 - from
197:00 - use
197:01 - form
197:03 - and i'll call back so let's make this
197:05 - the callback so here we'll say
197:07 - function
197:08 - uh login
197:10 - user since we already have a login user
197:11 - let's just call this login user callback
197:14 - like that
197:15 - and it will only it will simply call the
197:17 - login user
197:19 - so we'll pass it here as the callback in
197:21 - the login form and the initial state
197:23 - will be a username so we only have a
197:26 - username and a password on the login
197:28 - form it's going to be an empty username
197:31 - and the password will be an empty
197:33 - password so the login user will do that
197:35 - we'll call that and we'll get
197:37 - we'll do the same thing the callback all
197:39 - right so here in our markup
197:41 - we have a form same thing same uh
197:44 - stuff here but for the header we'll say
197:46 - login
197:47 - and for the input we'll have just two
197:50 - inputs so here let's remove this
197:52 - let's keep the password input and remove
197:54 - the email input
197:55 - so here we'll have a username the same
197:57 - stuff nothing changes and the password
197:59 - as well the same stuff nothing changes
198:01 - so here in the button we'll say login
198:03 - instead of register
198:05 - and here for errors nothing changes as
198:07 - well
198:08 - but here instead of register user we'll
198:10 - have a login
198:12 - user
198:14 - and here we'll have the mutation of
198:17 - login and we will remove the email and
198:20 - we'll remove the confirm password
198:22 - and here we'll have the
198:24 - mutation
198:25 - login and we don't have a register input
198:27 - so we can remove that like this like
198:29 - this
198:30 - and we can remove the email
198:32 - and we can do the password like that
198:35 - we can remove this
198:37 - and we'll get the same data as well from
198:38 - the login mutation all right let's save
198:40 - everything
198:42 - let's check if this is working we have
198:43 - no errors or we have an error so
198:45 - register is not defined
198:46 - oh because i'm exporting register at the
198:48 - bottom all right so here we will export
198:50 - login let's save
198:52 - all right cool no errors let's check our
198:54 - app
198:56 - all right login form we get this form
198:58 - and if we log in with empty it says
198:59 - username must not be empty and if we put
199:01 - a username
199:02 - it says password must not be empty if we
199:04 - put the wrong password so i'll put 137
199:07 - click login it loads and then it says
199:09 - wrong credentials but if i put the
199:10 - correct credentials one through six i
199:12 - click enter and voila we are logged in
199:15 - and we get redirected to the homepage
199:17 - now of course we're not changing the
199:19 - navbar right here because we still have
199:21 - those buttons because we don't have an
199:22 - actually application-wide kind of
199:25 - context that knows that we're logged in
199:26 - or not which we will do in the next
199:29 - class so look forward to that
199:34 - i shouldn't have had the third coffee
199:36 - coders problems eh
199:38 - okay whatever let's do this
199:41 - hello class and welcome to class five uh
199:44 - so we've done a lot so far we have
199:47 - created the login and registered pages
199:48 - and they redirect us to the homepage if
199:50 - we log in successfully or register
199:52 - successfully but the caveat is we're not
199:55 - doing anything with this data right now
199:56 - because if we log in if i just type in
199:59 - some valid credentials we just receive
200:02 - some data from our server but we're not
200:03 - doing anything with it because for
200:05 - example you can see that our
200:07 - navbar is still saying login and
200:09 - register so we need a way to store this
200:11 - user data globally in our application so
200:14 - that whenever a component needs to know
200:15 - whether we're logged in or not
200:18 - whether we need some permission to do
200:20 - some behavior that's only allowed when
200:22 - we're logged in so that needs to access
200:24 - it aka a global state which we can do
200:27 - through either context or redux or
200:29 - through uh some other stuff we're going
200:30 - to use context because this app is too
200:32 - small for redux because
200:34 - we're only going to manage some user
200:36 - data that's it so
200:38 - let's actually start to make that a
200:40 - reality
200:41 - all right so let's go to our app
200:43 - here i'm going to create a new file
200:45 - inside of a folder called context
200:48 - so call it auth.js because it's going to
200:51 - be our auth context
200:52 - so here we'll import
200:54 - react oops react
200:58 - from react
201:00 - so what we're going to create we're
201:01 - going to create in a context so we'll
201:03 - just
201:04 - actually create this context actually i
201:05 - forgot to
201:07 - get create context from react and here
201:09 - we'll say const auth
201:12 - context equals create
201:15 - context
201:16 - context
201:18 - and here we'll
201:20 - so we'll pass a couple of things our
201:22 - context will hold a user object and
201:24 - initially this will be null
201:26 - and here we'll have a login
201:29 - uh function and this will take some data
201:32 - and we'll do something this is just like
201:34 - kind of a placeholder to have like
201:36 - some sort of like intelligence later
201:38 - it's not uh it's not necessary you can
201:40 - actually emit these two but it's a good
201:41 - practice i think and we'll have a logout
201:44 - which will take nothing and do something
201:46 - all right so here what we need to create
201:48 - is we need to create a reducer and
201:51 - if you don't know about a reducer i
201:53 - suggest you get familiar with the
201:54 - patterns of redux and uh and then you
201:57 - will know what a reducer is i'm not
201:58 - gonna like kind of go in depth it's
202:00 - basically it receives uh an action with
202:02 - a type and a payload and then it
202:04 - determines what to do with those two
202:06 - depending on your
202:07 - functionality of your application so
202:10 - here we'll have a reducer and we'll call
202:11 - it uh auth reducer
202:14 - oops reducer like this
202:17 - and this will take like i said the state
202:20 - actually i didn't mention that it takes
202:21 - the state because it needs to uh change
202:24 - the state
202:26 - and an action and it will switch on the
202:29 - action
202:30 - dot state so on um or rather the dot
202:33 - type not state so depending on the type
202:35 - of the action it's going to do something
202:37 - of course any switch needs a default
202:39 - case and in the default case we're just
202:41 - going to return the state
202:43 - okay state like this
202:45 - now we'll have another case here usually
202:48 - you'd have like you'd put them in
202:49 - variables but we only have two so i'm
202:51 - just going to have them as strings here
202:52 - uh one i'll call login like this
202:55 - and
202:56 - when we log in we need to return of
202:58 - course we spread the existing state and
203:01 - we want to add the user
203:03 - so because we're logging in and we're
203:04 - getting some data and we want to set our
203:07 - user in our state to this data so we'll
203:09 - say action user equals action.payload
203:13 - now i'll have another case
203:15 - which is
203:16 - case logout so here we'll say log out
203:18 - like this
203:20 - so when we log out we simply want to
203:22 - clear the data we want to set the user
203:24 - back to null
203:26 - so here we'll spread the state oops
203:28 - spread the state and say user is null
203:32 - all right so of course we need to use
203:34 - this reducer somewhere and we'll use it
203:37 - in our auth provider so here we'll
203:38 - create a an auth provider so function
203:41 - auth
203:43 - context pro
203:44 - vita like this
203:46 - and this will take a props and i'll tell
203:48 - you later why it takes a props take some
203:50 - props so here we'll say const state
203:53 - and dispatch actually we need to get
203:56 - user
203:57 - the user reducer hook use
203:59 - reducer
204:02 - and the user reducer hook takes a
204:04 - reducer and returns
204:05 - a state and a dispatch and we need to as
204:08 - well give it um so we'll say reuse
204:10 - reducer we need to
204:13 - give it our reducer so the auth reducer
204:15 - and we need to give it an initial state
204:17 - which is going to be a user
204:19 - of null
204:20 - but this is our initial state so now
204:23 - that we have our this dispatch we can
204:25 - use it to uh dispatch any action and
204:28 - then attach to it uh some type and a
204:31 - payload and then that when that's
204:32 - dispatched this reducer will listen to
204:35 - it and then do um you know perform any
204:38 - action according to that dispatched
204:40 - action so here we need to actually write
204:42 - our login and log out functions so that
204:44 - will pass them down to our component
204:46 - tree so here we'll say const login
204:49 - and
204:50 - so the login is just a function that
204:52 - will take some data and actually
204:55 - since i'm using the keyword function a
204:57 - lot in this project i'm just going to
204:59 - stick to that so i'll say function login
205:01 - takes data
205:04 - and here what he needs to do is just
205:05 - gonna
205:06 - dispatch um
205:09 - it's a action with a type
205:11 - of login
205:14 - and a payload oops
205:17 - a payload
205:18 - of this data that you got
205:20 - well actually it would make sense more
205:23 - sense if we name this user data because
205:24 - we'll know what what it is and we can as
205:27 - well here change it to user data even
205:29 - though it doesn't matter it's just a an
205:31 - argument name but
205:32 - but it's more readable like this
205:34 - all right so here we want to have our
205:37 - logout function as well so function
205:39 - logout
205:40 - and here our logout will actually won't
205:43 - take anything and it will dispatch
205:48 - an action with a type
205:51 - um
205:52 - log out and this will not have any
205:54 - payload because that's how logout works
205:57 - all right so here we need to return this
205:59 - provider so we can use it somewhere else
206:01 - so here we'll say return and we'll open
206:04 - a component and say auth
206:07 - context
206:09 - dot provider
206:10 - and now we need to have a value because
206:13 - this is what we need to pass what this
206:15 - is what we're going to pass to our
206:16 - components that are underneath this
206:18 - context provider so here our value will
206:21 - be a javascript object so we wrap it in
206:23 - two curly braces so we'll say uh user
206:27 - is the state.user so we need to pass the
206:30 - user down
206:31 - and here we'll pass the login function
206:34 - and the logout function as well
206:36 - and here we'll do we'll spread props
206:38 - like this
206:40 - because we might get some props from the
206:42 - top down component and now we need to
206:45 - export
206:47 - two things we need to export our auth
206:48 - context
206:50 - because that's what we're going to use
206:51 - from our components to access our
206:52 - context and we need to um
206:55 - export the auth provider which will use
206:58 - in our app to wrap all of our
206:59 - applications so that it would have
207:01 - access to this uh provider to these
207:04 - functions from the context all right so
207:06 - this is what's going to happen when we
207:07 - log in we want to call the login
207:10 - function or this dispatch this login
207:13 - type with this data which will change
207:15 - the data inside of our context and set
207:17 - our user to the user details that we
207:19 - have so that our application will know
207:21 - that we're logged in all right first
207:23 - thing before we go to any login or
207:25 - register page we need to actually give
207:27 - our application this provider so here
207:29 - we'll say
207:30 - import
207:31 - auth
207:32 - provider
207:34 - from
207:35 - uh so from util or not util actually
207:39 - from all context
207:41 - slash auth
207:42 - so here we'll wrap our entire um
207:45 - so we'll cut this and we'll say auth
207:48 - not context provider
207:50 - and do like this and put everything
207:52 - inside of that so everything inside of
207:54 - here will have access to that
207:56 - to that context all right so first
207:59 - things first we need to go to login and
208:01 - here once we're logged in so we get our
208:03 - login data inside of this
208:05 - result.data.login object so we need
208:08 - to
208:09 - hit this login function and actually
208:11 - pass it this data so that our context
208:13 - will set the user to uh to the actual
208:16 - user data so we need to get that context
208:18 - so here we'll say import
208:21 - ask context
208:23 - from we go back one level and we go to
208:26 - context
208:27 - slash auth like this and we need the use
208:30 - context hook so here we'll say use
208:32 - context from react and here at the top
208:35 - of our component we'll say const
208:37 - actually let me close this
208:38 - const
208:39 - context equals
208:41 - use context
208:43 - and we give it the auth context that we
208:46 - imported and now we have access to that
208:48 - context and remember this this context
208:50 - holds a user a login and a logout so we
208:53 - need this login right here so here
208:55 - before we redirect to the home page once
208:58 - we successfully log in we simply say
209:01 - context dot
209:03 - login and we pass it the data which is
209:06 - going to be a result.data.login
209:08 - right here
209:09 - right right here it kind of doesn't make
209:12 - a lot of sense to have it called login
209:13 - so what we can do we can from result we
209:16 - can destructure data and from data we
209:19 - can destructure login and login we need
209:21 - we can give it an alias and let's call
209:23 - this user data now we can just pass user
209:26 - data right here
209:28 - oops what did i copy
209:30 - so we can just pass user data right here
209:31 - which makes so much more sense than just
209:33 - passing result data login okay we can
209:36 - remove this console log because we know
209:37 - we're getting the correct data and let's
209:39 - do the exact same thing from the um from
209:42 - the register component so we go to the
209:44 - register component and
209:46 - here at the top we got our context so we
209:49 - can say import
209:50 - auth
209:52 - context
209:53 - from we go back oops we go back one
209:56 - level to context slash auth
209:59 - and of course we need to use
210:01 - context hook
210:03 - and here we'll say const context
210:07 - equals
210:08 - what is it use context
210:10 - and we give our auth context
210:13 - and we do the same thing right here we
210:15 - can destructure as well here we'll say
210:17 - from result we get data and from data we
210:20 - get register
210:22 - and
210:24 - register and we will call this or
210:26 - actually no i made a mistake from data
210:29 - yeah we open curly braces and we get
210:31 - register
210:33 - register and then we give it an alias
210:35 - and we call it user data
210:37 - so here we'll say context dot
210:40 - the same login even though this is a
210:41 - register but we don't need to have two
210:44 - functions for
210:46 - something that does the same so we'll
210:47 - say context.login because when
210:49 - registering we're logging in users
210:51 - so we'll say context.login user data
210:54 - simple as that
210:55 - all right so now once we log in or
210:58 - register our entire application will
211:00 - have this data inside of the context so
211:03 - let's save everything
211:05 - and let's go to our app
211:07 - to remove that let it reload so now if
211:10 - we
211:11 - log in say
211:13 - user actually can i see the context all
211:15 - right so let's go to the react dev tools
211:17 - let's open this
211:19 - we see that we have a context provider
211:22 - right here and it has actually this is
211:24 - the apollo provider so we need to have
211:26 - the context provider of the auth
211:28 - provider which has a value here so as we
211:31 - see we have a value result
211:33 - user rather of null and a login and a
211:36 - logout function so if we log in
211:38 - successfully here one two three
211:40 - let's actually put seven we log in there
211:44 - we go we got our user and we get our
211:45 - user's name is um
211:48 - actually get a type name because it's
211:50 - kind of um that's strange that looks
211:52 - like a graphql kind of
211:55 - actually graphql has this type name so
211:57 - ignore myself so we get created that
211:59 - email an id and the token and the
212:01 - username
212:02 - so we have this user in our context but
212:05 - of course we're not using that in our
212:06 - application to change the behavior of
212:08 - our application because for example we
212:10 - want to change this to
212:12 - have our username here and we want to
212:15 - have a logout button here so that we can
212:17 - use it to log up all right so let's go
212:19 - here we can close this we no longer need
212:21 - the app
212:22 - so let's go to our
212:24 - menu bar so menu bar
212:26 - and here we need to get our context
212:29 - because we want to show a different menu
212:30 - bar depending on whether we're logged in
212:32 - or not so it will say import
212:34 - auth context
212:36 - oops
212:38 - these typos
212:40 - from
212:41 - i go back to context slash auth
212:45 - and here at the top again actually i've
212:47 - got the use context as well this context
212:50 - and here at the top we'll say const
212:54 - or actually we can destructure from it
212:56 - the user and the logout so that we don't
212:58 - have to type context dot
213:00 - here we'll say use context and we pass
213:02 - it our auth context
213:05 - and um in case you're wondering by the
213:07 - way just quickly i wanted to explain
213:09 - here i didn't want to destructure the
213:10 - log out uh the login rather and just use
213:12 - login here because it's kind of
213:14 - confusing there's too many login words
213:17 - in this component so if by having here
213:19 - context.login
213:21 - if someone reads this code and says
213:23 - context.login it's obvious that this
213:24 - context is a login from the context so
213:26 - it's more readable right i can have it
213:28 - like this like by destructuring it and
213:30 - just having it like this by super
213:31 - confusing so i prefer to leave the uh
213:33 - the context right there just uh
213:36 - just as a heads up all right so what i
213:38 - want to do here is that so let's cut all
213:41 - of this this is the menu that we want to
213:43 - show when we're not logged in all right
213:45 - i'm going to create a variable i'll call
213:47 - it menu bar
213:48 - because the menu bar is going to be
213:50 - dynamic so we'll say const menu bar
213:53 - equals and we'll say user so if user if
213:56 - we're logged in then we want to show
213:58 - something
213:59 - else we want to show this menu that we
214:01 - had this is what we show when we're not
214:03 - logged in but when we're logged in let's
214:06 - actually paste the same menu but we'll
214:08 - change a couple of things so it's the
214:10 - same menu but here instead of home we'll
214:12 - have a button with the username so we'll
214:14 - say user dot username will have uh their
214:19 - name there instead of the home and i
214:20 - want it to always be active so i'll just
214:22 - remove that condition
214:23 - and it's not gonna have an on click
214:26 - but it's going to be a link to the home
214:28 - right so
214:30 - here
214:31 - see here as well on the right let's
214:33 - remove one and keep one and this will be
214:35 - the log out
214:36 - and this will not will never be active
214:38 - because once you log out the buttons
214:40 - will change so it will not have an on
214:42 - click as well or will it actually it
214:44 - will
214:45 - its on click will be the log out so here
214:47 - we'll say log out because once you click
214:49 - it we want to trigger the context logout
214:52 - function and it will not go anywhere
214:55 - so we can remove this as link and to
214:57 - slash login all right let's save that
215:00 - and let's see if that works
215:02 - so we get our context
215:05 - and we look here and we see that oh yeah
215:08 - of course we need to log in again let's
215:10 - say a user and we log in
215:13 - and we log in cool so our navbar changed
215:16 - and now we have user i mean it says user
215:18 - because this user is actually user if i
215:20 - would log in as
215:22 - i see it worked i wanted to test it and
215:24 - i clicked log out all right so the
215:26 - logout work worked because our user is
215:28 - null and if i want to log in as another
215:31 - user like jane now this says jane and
215:34 - now i have the user jane in my context
215:36 - and if i click log out that's removed
215:39 - okay but there's now one problem because
215:42 - right now if i
215:43 - log in
215:44 - and if i just refresh the page we're
215:47 - back to zero we're not logged in again
215:49 - we need some way to persist this we can
215:51 - simply do this by just storing this
215:53 - token locally on our on this device that
215:56 - we're using and then once the app loads
215:58 - we try to fetch a token if this token is
216:01 - there then we set ourselves to logged in
216:03 - else we set ourselves to be uh not
216:05 - logged out i mean the app does it not
216:08 - we're not doing anything as a user all
216:10 - right so in the auth right here
216:13 - we need to persist the uh the token in
216:16 - the local storage once we log in or log
216:18 - out so here once we log in so
216:21 - we'll say local
216:22 - storage dot set
216:25 - item
216:26 - and we can call this token
216:29 - let's call it jwt token
216:33 - and the data will be inside of this user
216:36 - data so we'll say userdata.token
216:40 - and uh yeah that's it
216:42 - well actually here in the logout we need
216:43 - to remove it so here we'll say
216:45 - log local storage dot remove
216:50 - item and the name is jwt token
216:54 - okay now we have this token but we're
216:56 - not we're not actually checking if we
216:58 - have it once we start the app so let's
217:00 - go up here
217:02 - here we can say if
217:04 - local storage dot
217:07 - get item
217:08 - and it's the jwt token item if this is
217:12 - truthy that means this item exists um
217:15 - actually i want to do an extra step here
217:17 - what i want to do because this token
217:19 - stores an expiration date and time right
217:22 - and
217:22 - i don't want to set our app to be logged
217:25 - in if this one hour long token has
217:27 - expired so i need to check whether it's
217:29 - expired or not but this expiration is
217:32 - actually encoded inside of the token so
217:34 - we need to decode it for this we'll um
217:37 - install a library called jwt decode so
217:41 - we'll say npm install
217:43 - jwt
217:44 - dash decode
217:46 - all right let's let that install we can
217:48 - import that we'll say import
217:51 - let's call it jwt the code like this
217:54 - from
217:55 - jwt dash decode
217:58 - all right now we can use this to decode
217:59 - our token so we'll say now that we've
218:01 - got the token actually we can put it in
218:03 - a variable so we'll say const
218:05 - token
218:06 - equals
218:08 - we can just decode it here actually so
218:09 - we'll say jwt decode
218:12 - and we'll call we'll we'll pass it this
218:15 - this token right here
218:17 - so we'll pass it actually makes more
218:18 - sense to call it decoded token here
218:20 - decoded token
218:22 - okay so now that we have our decoded
218:24 - token we can say if
218:27 - decoded token oops what is that decoded
218:31 - token
218:33 - dot exp because this is where that
218:36 - expiration time is stored and this is
218:38 - stored in
218:39 - in like a
218:40 - what do you call like time from epoch uh
218:42 - date string and we need to times it by a
218:46 - thousand because this is like in seconds
218:47 - we need in milliseconds if this is
218:50 - smaller than or lesser than date dot now
218:55 - that means it's actually expired so what
218:57 - we need to do is we need to delete it
219:00 - and we set ourselves to not be logged in
219:02 - so we need to say local storage
219:04 - dot remove
219:06 - item we need to remove it because it's
219:08 - actually expired
219:09 - we need uh not token jwt
219:12 - token like this
219:14 - else if it's not expired we want to set
219:17 - our user to this decoded token data
219:19 - because it's it's a valid token and
219:21 - we're actually logged in
219:23 - uh
219:24 - but how do we do oh actually no i made a
219:27 - mistake here we don't just pass this
219:29 - initial state like this we can create a
219:31 - variable initial
219:33 - state i mean it's not a mistake but we
219:35 - need to have this as a dynamic value
219:37 - okay let's copy that and here at the top
219:40 - we'll have our const
219:43 - initial state as an object with a user
219:46 - that's null initially but once we do
219:49 - this check if the token is expired we
219:52 - remove it and we leave that initial
219:53 - state with a null user with a user
219:55 - that's not but if you if we're not we
219:58 - need to set this user and then so once
220:00 - we get here we actually set our user to
220:02 - this user so we don't set it to no so
220:05 - here we'll say initial
220:08 - initial state dot user i still
220:12 - misspelled it did i misspell that
220:13 - initial state no that's fine all right
220:16 - user equals decoded
220:18 - no again
220:20 - token
220:21 - like that uh these misspells are getting
220:23 - out of hand guys
220:24 - all right so that should do the trick so
220:27 - let's save
220:28 - and let's go to our app make sure
220:31 - actually we don't get any errors
220:33 - we don't let's go to our app
220:35 - so let's go to our console or not
220:37 - console actually application
220:39 - and here in local storage
220:42 - whoa what is all of this
220:44 - i'm just going to delete everything it's
220:46 - firebase stuff
220:47 - all right so here let's log in
220:49 - as user
220:51 - 136.
220:52 - there we go we get a jwt token and if we
220:55 - log out it deletes it all right but now
220:58 - we need to make sure that it's actually
221:00 - fetching this data once we um re reload
221:03 - so now that we have this in our storage
221:06 - let's actually
221:07 - refresh the page there we go if we
221:09 - refresh the page it's actually getting
221:11 - this data and
221:12 - giving it to our context because again
221:15 - if i check in the react dev tools and
221:18 - open this app open the auth provider and
221:20 - the provider of it
221:22 - the context we'll see here
221:24 - if we expand this value we'll see that
221:27 - the user is set to our current user and
221:29 - you see that xp is here and that
221:32 - i don't know what that is is there it's
221:34 - probably something that has to do with
221:36 - some time to live thing
221:38 - looks like to be the same i don't know
221:39 - whatever all right so
221:41 - yeah so that's that for managing um our
221:45 - user state uh we will use this in the
221:48 - well actually i forgot to do something i
221:50 - forgot to handle some edge case because
221:52 - if we now still go to register
221:55 - that page is still accessible now of
221:57 - course that's not good behavior because
221:58 - we're logged in we wanna we don't wanna
222:00 - see we don't want to be able to access
222:03 - the login and the register pages all
222:05 - right let's fix that
222:06 - so let's go to our app
222:09 - for we can do this or actually let's uh
222:11 - make this into its own component because
222:13 - uh we'll make the app uh component
222:16 - massive otherwise or the uh the app file
222:19 - so here in the util i'll create what am
222:21 - i doing i'll close everything i'll
222:23 - create a uh
222:25 - a thing called auth route
222:28 - so this is essentially going to be the
222:30 - opposite of a protected route component
222:33 - what this will do is that
222:34 - instead of these two login and register
222:36 - routes we'll have an auth route that
222:38 - checks if we're logged in and we try to
222:41 - go to slash login or stash register it's
222:43 - actually going to redirect us to the to
222:45 - the um
222:46 - to the actual home page because we don't
222:48 - need to go to those pages if we're
222:49 - logged in
222:50 - so here of course we need react
222:53 - and we need use context because we need
222:56 - to access our context our auth context
222:59 - from react
223:01 - and here we need to import
223:04 - route and uh what is redirect yeah
223:08 - redirect redirect
223:11 - from react
223:13 - router
223:15 - dom
223:17 - and here we'll say const
223:20 - call this auth
223:22 - route
223:23 - or we can have it as a function function
223:26 - uh auth route and this will take um
223:29 - this will take some props and inside
223:31 - these props we'll have a component so
223:33 - we'll pass down our actual route
223:35 - component but let's give this an alias
223:38 - of component with a capital
223:41 - c so that we can use it as a component i
223:44 - know that's confusing but
223:46 - hopefully you'll understand when you see
223:47 - what i'm gonna type later
223:49 - so here we need to get our user
223:51 - so we say const
223:53 - um or actually i need to get to the
223:55 - context so here let's say import let's
223:58 - make space between them and say auth
224:01 - context
224:03 - context
224:04 - from
224:05 - go back one level to context slash auth
224:10 - and here we can destructure our user
224:12 - from use context
224:15 - and auth context so now that we have our
224:18 - user we can check so we'll say return
224:20 - let's return
224:22 - we return a route
224:25 - and inside of this route we'll spread
224:27 - whatever we got passed from um from the
224:30 - uh from the thing that wraps this
224:33 - and then we will do a render prop uh
224:35 - expression here we'll say render and
224:38 - we'll open the curly braces and we'll
224:39 - say
224:40 - props
224:41 - and we'll um
224:44 - do an arrow and then we will check for
224:46 - the user here so oops what is this
224:48 - all right so here i'll say i'll tap this
224:50 - in and we'll say user and then do a
224:53 - ternary operator so if we have the user
224:56 - then we just return a redirect redirect
225:00 - to um
225:02 - to slash like this
225:04 - and then
225:05 - else we will just return that component
225:08 - that we got passed down
225:10 - component and we will give it these
225:12 - our props that we we have received so
225:15 - props and then we close it like this now
225:18 - of course we need to export this
225:21 - actually i need to close this route so
225:23 - like that
225:24 - and here we'll say export
225:26 - default
225:28 - auth oops auth route
225:31 - all right let's save that let's go back
225:33 - to our app and here we'll import that
225:35 - we'll say import
225:37 - auth route
225:39 - from
225:40 - uh the same level util slash auth route
225:44 - and here instead of doing that
225:46 - we'll just say auth
225:48 - route
225:50 - and here as well we'll say auth route
225:52 - and pass the same stuff so what this
225:54 - essentially does is uh we'll do an
225:57 - author out which is this component right
225:58 - here and we'll pass all these attributes
226:01 - right here the exact the path and the
226:03 - component and once we get here and we
226:05 - get our user
226:07 - if we have this user inside of this
226:09 - route we will render oops inside of this
226:12 - wrap we'll actually return it as a
226:13 - redirect which will just if we click it
226:16 - it will just i mean if we trigger it it
226:17 - will just redirect to slash but if we
226:19 - don't have a user we're just going to
226:21 - put that component that we have uh with
226:23 - these props that we just passed down
226:25 - here
226:25 - i hope that makes sense
226:27 - all right so let's look at our app
226:29 - so now that we're logged in if we go to
226:32 - our
226:33 - uh to our login page to log in
226:36 - now we get redirected immediately to the
226:38 - home page and if we go to
226:40 - register as well we get redirected all
226:43 - right so this is it for this class in
226:45 - the next class we will actually start to
226:48 - work on posting data and we will add the
226:52 - post form here and we will be able to
226:54 - add some more posts as this user that
226:57 - we're logged in
227:00 - so now that we've set up our auth
227:02 - context for our application to know
227:04 - whether we're logged in or not now we
227:05 - can use that the information to
227:08 - decide on whether to show something or
227:10 - not one example of this is we're gonna
227:12 - now uh add a post form for us to be able
227:16 - to submit a post as a user from the home
227:18 - page so let's get to that all right
227:20 - let's go to our app make sure you have
227:22 - your server and client running uh i do
227:25 - on mine so i'm just going to close this
227:26 - terminal window
227:28 - let's go to the home page
227:30 - so home and here right here at the top i
227:34 - want to show another column if we're
227:36 - logged in and put that post form in that
227:39 - column so here um before this loading
227:42 - tag here we'll say
227:44 - grid actually no we need to get the user
227:46 - from the context first here i'll say
227:48 - actually here we'll say we'll import the
227:51 - context so import
227:54 - auth context
227:56 - from
227:57 - go back to
227:58 - context slash auth
228:01 - so here we'll actually need to use
228:04 - we need to get the use context hook as
228:06 - well
228:07 - so here we'll say const we can
228:09 - destructure the user
228:11 - equals
228:13 - use context and we'll pass it our auth
228:16 - context
228:17 - like that
228:18 - now now that we have the user so here
228:20 - we'll say if user
228:23 - we will render this markup actually not
228:25 - percentage we'll do and and like this so
228:28 - if we have a user that means if we're
228:30 - logged in let's show this form so here
228:32 - we'll say uh what is it grid
228:35 - dot column that we want to show
228:37 - and let's close that and inside of here
228:39 - we'll put our form but i want to put
228:41 - this in its own component because
228:43 - otherwise this will be massive and we'll
228:44 - have another mutation written as well
228:47 - here on top of this query that we have
228:48 - so here i'll simply say post form and
228:52 - close this tag
228:53 - of course we haven't created it yet but
228:55 - we will so here we'll say import post
228:58 - post form from so here we're in pages so
229:01 - we have to go back one level and go to
229:03 - component slash post form
229:07 - all right let's uh
229:08 - close this let's go to our components
229:11 - and create a file called post form so js
229:16 - and let's say rcf and tab
229:19 - doesn't work
229:20 - oh it's rfc
229:23 - anyway it refuses to work for some
229:25 - reason let's type it manually
229:27 - these snippets sometimes are weird maybe
229:29 - it's interacting with another extension
229:31 - all right so here we'll say function
229:34 - post form
229:35 - oops
229:37 - and it's going to do something and we
229:40 - need to export it as well so export
229:42 - default
229:43 - post form
229:46 - all right let me close that
229:48 - so here what we need to do is we need to
229:50 - actually import the uh
229:52 - the form from semantic ui so it's a
229:55 - import form
229:56 - from semantic ui react
229:59 - and we need our custom use form hook as
230:02 - well so here we'll say import use form
230:07 - from go back one level to util slash
230:10 - hooks
230:12 - so all right let's go to our component
230:13 - here we'll say return
230:16 - and let's open our form
230:20 - this will have a on submit of on submit
230:25 - on submit
230:27 - and let's close that and inside of here
230:29 - we're going to have uh actually let's
230:31 - put a header first let's put a header
230:32 - too saying create a post colon and here
230:36 - we'll have only one field
230:38 - but i'm going to have it as a field
230:39 - because i want the button to be inside
230:41 - of it contained in it so here we'll say
230:43 - form
230:44 - dot field
230:45 - and close this and inside of here we'll
230:47 - have the form
230:48 - dot input
230:49 - element and this will have a couple of
230:52 - props so we will have a place
230:54 - holder
230:56 - holder will say
230:58 - hi world like the name of the app
231:01 - and
231:02 - we'll have a name
231:04 - let's call this body because this is the
231:05 - body of the post we have the non change
231:08 - of
231:10 - on change
231:11 - we'll get this from the use form hook so
231:14 - he'll have a value which is going to be
231:16 - values.body oops
231:18 - dot
231:20 - body
231:21 - and
231:22 - we'll have as well an error
231:24 - which we will handle later or actually
231:27 - we'll we'll handle the error later for
231:28 - now let's just have it like this
231:30 - and let's put a button a submit button
231:33 - so it will be of type
231:36 - submit
231:37 - and let's give it a teal color so color
231:40 - teal
231:41 - let's close that and it will say submit
231:44 - and here let's bring the button as well
231:46 - from semantic ui
231:48 - all right so now we need to use our use
231:51 - form and create these values and
231:53 - unchange and whatnot so you will say
231:55 - const values
231:57 - and on change
231:59 - and on submit
232:02 - submit
232:03 - as you're used to the custom hook we'll
232:05 - say use form and we'll have a callback
232:08 - let's call it create post callback
232:12 - and we'll have an initial state which
232:14 - will just have a body of
232:16 - that's an empty string all right now we
232:19 - need to actually write our mutation to
232:21 - persist a post to our database so here
232:23 - let's write the mutation so here we'll
232:26 - say const what do we call it create
232:29 - create post mutation
232:33 - and we need to bring gql so let's say
232:36 - import
232:37 - gql from graphql
232:41 - tag
232:43 - graphql
232:46 - so here we'll say
232:47 - gql
232:49 - open the template string and we'll say
232:51 - mutation oops
232:54 - all right let me type that down
232:56 - we'll say mutation
232:58 - let's call this create post
233:00 - and this will take a body
233:03 - of type string and that's required and
233:06 - inside of here it will call the create
233:08 - post mutation that we created and it
233:10 - will pass it a body of the value body
233:13 - like that
233:14 - so let's actually get everything that we
233:16 - get back so the id
233:18 - the body the created add
233:20 - the username
233:23 - we've got the likes with everything
233:25 - inside of them so we get the id of the
233:27 - like the username
233:29 - and the created ad
233:31 - and we'll get the like count
233:35 - we'll get the comments
233:36 - and from comments we're gonna get the id
233:38 - the body
233:40 - uh the username and the created at
233:44 - same stuff that we get from uh fetch all
233:46 - posts and here we'll get the comment
233:48 - count as well
233:49 - and yeah that's everything
233:51 - all right so now we need to use this
233:52 - mutation so here uh okay we need the
233:54 - used mutation hook so here we'll say
233:56 - import
233:57 - use mutation
234:00 - from
234:01 - uh at apollo slash react hooks
234:05 - and here we'll say
234:06 - const uh create post and uh
234:11 - we'll get actually the way we handled
234:13 - errors on the register and login page
234:15 - was that and we did we used the on error
234:18 - method and then we set them to local
234:20 - errors but here it doesn't make sense
234:22 - because we only have one error and we
234:24 - don't want we're not going to extra
234:25 - extract it from a deeply nested property
234:27 - so i'm just going to get it like this
234:29 - i'm just going to get it from the
234:30 - um this second parameter so we will say
234:33 - error like that and we'll say use
234:35 - mutation
234:38 - and we'll pass it our create post
234:39 - mutation and we'll pass it our variables
234:44 - which will be the values which only
234:45 - holds the body
234:47 - so we'll have an update
234:49 - and
234:50 - or have i been used i think i've been
234:52 - using the function form so i'll stick to
234:53 - that so update and we'll emit the proxy
234:57 - and we'll have the
234:58 - result and here we'll say
235:01 - um we're just going to console.log the
235:03 - result
235:05 - for now
235:06 - and
235:07 - we need to reset actually the the body
235:09 - field because we want to empty the the
235:11 - body field once we submit it
235:13 - all right this should be uh fine we
235:15 - shouldn't have any errors so let's save
235:17 - and let's look at our app cool we don't
235:19 - have any errors
235:20 - all right let's look at our app
235:22 - okay we get an error now because
235:25 - create post callback yeah it's not
235:26 - defined and on change i'm gonna
235:28 - misspelled something here
235:31 - uh yeah on change like that and we need
235:33 - this callback so this callback needs to
235:35 - be here
235:36 - and it will only call the
235:38 - create
235:39 - post
235:41 - like that actually i forgot to add the
235:43 - function keyword function
235:45 - like that
235:46 - all right let's save
235:48 - okay so let's open our developer tools
235:51 - and uh
235:53 - let's login
235:57 - we log in okay now that we have a token
236:01 - but now if i submit a post of course
236:03 - it's going to fail because it's going to
236:04 - ask me authorization header must be
236:06 - provided now we need to set up our
236:08 - apollo client in a way that once we have
236:10 - a
236:11 - token in our storage we need to get that
236:14 - token get it and add it as an
236:16 - authorization header automatically
236:17 - without having to add it each time we
236:19 - send the request we can do this by using
236:21 - something called uh apollo
236:23 - an apollo link context
236:25 - link context
236:27 - and let's go to the apollo graphql
236:30 - website
236:31 - and so yeah this actually no it's not
236:33 - this page i was looking for a different
236:35 - page apollo link context okay so yeah
236:38 - we'll use this uh set context uh
236:41 - function from apollo link context and
236:43 - the way this works is uh it kind of
236:45 - works like a middleware so it sets a
236:47 - context of this request and kind of
236:49 - modifies whatever you want to like do
236:51 - before that request is pros um kind of
236:54 - forwarded towards the http link so let's
236:57 - install this and actually set it up so
237:00 - i'm going to open a new window and say
237:01 - npm install actually let's cd into the
237:04 - client first
237:05 - and i'll say npm install apollo
237:09 - link context like that
237:12 - so we need to set it up in our
237:14 - apollo provider so let's go to our
237:16 - apollo provider
237:18 - and here let's import that so we'll
237:20 - import the set context function set
237:22 - context
237:24 - from apollo
237:26 - link
237:27 - context
237:30 - and here we'll
237:32 - create this new link and we'll say uh
237:35 - const
237:36 - auth link equals set context
237:40 - and this will have a handler this takes
237:42 - a request and a previous context that we
237:46 - can kind of get data from and edit and
237:49 - forward uh to the next operation but we
237:52 - don't need any of these parameters
237:54 - so we can just emit them and just do
237:57 - like this
237:58 - just an empty
237:59 - empty argument list and here we need to
238:02 - get our token from the local storage so
238:04 - we'll say cons token equals local
238:08 - storage dot get item
238:10 - and remember we named the jwt token
238:13 - so now that we have it we need to set it
238:16 - as a as a authorization header so here
238:18 - we'll say return because this will
238:20 - modify the um
238:22 - modify the current request so here we'll
238:24 - say return and we'll do an object and
238:26 - inside of that there's another object
238:28 - and we have a or actually no that's
238:31 - going to be inside of the header so
238:32 - we'll join object and inside of that we
238:34 - have a headers and we'll add an
238:36 - authorization header so author
238:39 - authorization
238:42 - and we need to check if we have the
238:44 - token because we might not have it so
238:45 - we'll say token and we'll do a ternary
238:48 - operator so if it's the case if it's uh
238:50 - if we have a token want to say bearer
238:53 - and do like a template string so we can
238:55 - add a variable here and then let's put
238:56 - the uh token here
238:58 - else we'll just uh add an authorization
239:01 - header with an empty string uh value now
239:04 - this will kind of merge the existing
239:06 - headers of the request with this uh
239:08 - headers object that we gave so it will
239:10 - just add this authorization header all
239:12 - right of course now we're not using this
239:14 - yet so let's use that or actually let me
239:16 - put this on top of the
239:18 - client declaration here because we need
239:20 - to use it here
239:21 - and here we just need to
239:24 - add concatenate it to this link but it
239:26 - needs to go before the http link so we
239:29 - can say auth link dot we'll use the
239:32 - javascript concat function and say
239:35 - concat and pass this
239:37 - our http link all right this should
239:40 - actually add the token to our request
239:42 - and
239:43 - successfully send any protected
239:46 - api calls all right let's save this
239:50 - and let's go to our app
239:53 - let's make sure we have a token all
239:54 - right we do we have a token and it's uh
239:56 - it's valid i logged in less than an hour
239:58 - ago so now if we say let's go to our
240:02 - network clear everything out and we just
240:04 - send some gibberish we press enter
240:07 - we get a request here
240:10 - all right it says args is not defined
240:15 - let me check the server code
240:17 - okay i added this line for validation
240:19 - last time but instead of saying just
240:21 - body i actually added this args object
240:23 - so let me save that and run the server
240:26 - again and test
240:27 - all right let's test it
240:29 - click submit
240:30 - and there we go we get a 200 response
240:33 - and we get create opt create post and it
240:36 - actually you know returns us the post
240:38 - that's been created so it's successfully
240:40 - been created now of course it's not
240:41 - showing on the front end because we
240:43 - hadn't added any code to uh to do that
240:46 - all right so if we refresh and we fetch
240:48 - the post again there we go that's our
240:49 - post right there
240:51 - now the way we're going to show this
240:52 - post on the front end is we're not going
240:55 - to use context we're going to use apollo
240:56 - cache in memory but the problem with
240:58 - that is if we look at the apollo dev
241:00 - tools if we go to cache
241:03 - you'll see by the way in the polar dev
241:04 - tools you can see right here the queries
241:07 - the queries that we're sending so once
241:08 - the app loaded it just sent this get
241:11 - posts query to get all the posts and if
241:14 - we go to cache there are a couple of
241:16 - things here but if you go to root query
241:18 - you'll see that all the queries that we
241:20 - sent
241:21 - we send are actually stored separately
241:23 - so the get post query right now is
241:25 - caching five posts we need a way to
241:28 - directly access this cache and modify
241:30 - and add this new post that we just added
241:33 - and we can do this
241:34 - uh i hope this time
241:37 - the google search works so let's go to
241:39 - yeah caching data
241:42 - let's go a bit down
241:46 - it's right here yeah direct cache access
241:48 - so what we need to do we're going to
241:50 - access the cache directly and we're
241:51 - going to use
241:52 - now here they're using render props and
241:54 - they're using the client variable or
241:57 - object but we don't have access to that
241:59 - but instead we have access to the pro
242:01 - the proxy object which will let us
242:03 - perform this is a bit confusing but you
242:05 - will understand it the more you use it
242:07 - we actually gonna gonna perform
242:09 - graphql queries on our existing client
242:12 - data instead of actually reaching to the
242:14 - server all right let's actually apply
242:15 - this
242:17 - so let's go to our
242:19 - post form
242:20 - and here on the update instead of just
242:22 - log in the result we want to access this
242:24 - cache so here actually we're not going
242:26 - to omit the proxy we're going to write
242:28 - proxy like that and we're going to say
242:31 - proxy
242:32 - dot
242:33 - read
242:35 - read
242:36 - query
242:37 - and we need to pass a query here and
242:39 - this query will be let's say if you had
242:42 - the po get posts query and you sent it
242:44 - here it will actually fetch the post
242:47 - from the client data that's stored in
242:49 - the cache but the problem here we're
242:51 - already using this query in the home
242:52 - page we want we don't want to type it
242:54 - again so what we can do we can outsource
242:56 - it to its own file so let's copy this
242:58 - entire query from the home page let's
243:01 - copy let's cut it actually
243:03 - and in the util folder let's create a
243:05 - file called graphql.js
243:10 - and here we'll say
243:11 - we'll export it we'll export const
243:14 - fetch post query like that and of course
243:17 - we need gql so here we'll say import gql
243:20 - from
243:21 - graph
243:22 - ql tag now in the home we need to import
243:25 - it and use it so here we'll say
243:27 - import
243:29 - fetch
243:31 - posts query
243:33 - from we go back one level to util slash
243:36 - graphql now we don't need gql anymore so
243:40 - in the home it's going to work the same
243:42 - the same way it did before and in the
243:44 - post form now we need to get that
243:47 - fetch
243:49 - fetch posts uh query so we'll say fetch
243:53 - posts
243:54 - query
243:56 - query
243:58 - from we go back uh one level to util
244:03 - slash graph ql
244:05 - all right so now in read query we just
244:07 - pass this fetch posts query
244:12 - like actually but we need to give it uh
244:14 - to put it in a query variable and we
244:16 - just pass it like that
244:17 - now
244:18 - let's put this in a variable so we'll
244:20 - say const data equals proxy dot read
244:22 - query and we pass that query now all
244:25 - that data that's in our cache is sitting
244:26 - inside of this data variable so but it's
244:30 - inside of an another variable called get
244:32 - post because remember this is this data
244:35 - that we're getting is the root query
244:36 - it's this data right here so our posts
244:39 - are inside of get posts
244:41 - so here we need to edit that get posts
244:43 - entry so we'll say data dot get posts
244:47 - equals now that we have the result here
244:50 - we can just say open a an array and we
244:52 - want to put it at the top because this
244:53 - is the newest post so we'll say result
244:56 - dot data dot get post because this is
244:59 - where our response is stored and then
245:02 - comma and then we'll spread the existing
245:04 - get post
245:06 - so we'll spread the existing posts now
245:09 - of course we need to persist this so for
245:11 - this we'll use proxy.writequery
245:15 - and here we'll say the query is
245:18 - fetch
245:20 - post query and the data will be just
245:22 - this data object right here all right
245:24 - let's save everything
245:26 - actually let's save all files make sure
245:28 - you save all files now let's go to our
245:29 - app
245:30 - okay so it says graphql
245:32 - cannot resolve graphql
245:34 - i misspelled the name of the file here
245:36 - graph
245:38 - graph ql
245:40 - let's save
245:42 - let's refresh
245:45 - no such okay i misspelled it somewhere
245:48 - else probably in the home
245:51 - okay that's uh renamed
245:54 - and here as well it's renamed okay
245:57 - third time is the charm all right cool
245:59 - so now if we go to our cache we see that
246:01 - we have five posts and if we post a new
246:04 - one
246:05 - all right it breaks
246:08 - so it can't cannot read property id of
246:10 - undefined
246:14 - okay because i made a mistake here the
246:16 - data is actually stored in create post
246:17 - not get post
246:19 - because that's the name of the mutation
246:22 - all right so let's save this should work
246:24 - now
246:25 - it did send that mutation but it didn't
246:27 - persist it properly in the cache because
246:29 - i misspelled the i made the gave the
246:32 - wrong mutation name so now if i post one
246:35 - and if we look at the cache so look at
246:37 - the root query we have six posts so if
246:40 - we submit this now it's seven posts and
246:42 - it actually shows so if we say another
246:44 - one
246:45 - it's actually shown on our front end all
246:47 - right that's cool one thing that i
246:49 - wanted to show you is that here when you
246:50 - look at the queries if we go to this
246:53 - post and we go back it sends another
246:55 - query called um get posts
246:57 - but i've set up our server code in a way
247:00 - that each time we send a request from
247:03 - each of the resolvers let's say the
247:04 - create post resolvers is gonna
247:06 - console.log create posts and the other
247:08 - the get posts will console.log that and
247:10 - the getpost will console.log that just
247:12 - for us to see when the these actual
247:15 - resolvers are being hit so here you see
247:18 - we get posts once but in our app in our
247:21 - front end if we go back and if we go
247:23 - back to the home page it sends that
247:25 - query but from our server it doesn't
247:28 - print that again because it's actually
247:29 - sending that query to the client side um
247:33 - cache not to the server side the first
247:35 - one is the only one that's actually
247:36 - being sent to the server but the other
247:38 - two are actually sent to the client side
247:40 - cache just for you to bear in mind if
247:43 - you see this list of queries and you're
247:45 - thinking this is actually sending too
247:47 - many requests to our servers it's not
247:49 - it's just sending that one first request
247:54 - hello my dear class it's nice to have
247:56 - you here
247:57 - welcome to class number seven where we
248:00 - write some more code
248:02 - all right actually one thing that i
248:03 - forgot to uh to do last time is to show
248:06 - the validation error if we actually
248:08 - submit an empty post because if we click
248:10 - submit if we open our console we see
248:12 - that we get an error but we're not
248:14 - showing it to the user so let's fix that
248:16 - let's go to our app let's go to the make
248:19 - sure you have your server running
248:21 - let's go to the post form
248:23 - so here
248:25 - we've already extracted the error object
248:27 - so we just need to go under the form
248:29 - here and we check for it so we'll say um
248:31 - error
248:33 - and end and that means if we have this
248:35 - error then let's show a div with the
248:37 - class of ui so dot ui dot error
248:41 - dot message
248:43 - let's tab
248:44 - this has given us an error because we
248:46 - can't put two uh sibling com
248:49 - elements under one component so we can
248:51 - just do this which is shorthand for
248:53 - fragment and we can just put that code
248:55 - back in and now we can say we can put a
248:58 - ul with a class of list
249:00 - and put our errors and we only have one
249:02 - so we don't need to loop through
249:03 - anything we just put in an ally and
249:05 - inside of that we'll put error dot graph
249:08 - ql errors and we get the first one
249:11 - dot message like that and that should
249:14 - take care of it
249:15 - uh one more thing actually here inside
249:17 - of the input we want to
249:19 - use the error boolean to invalidate the
249:21 - input itself and make it red so here
249:23 - we'll check for error we'll do a ternary
249:26 - so if error is truthy then uh the error
249:28 - is true else it's false all right let's
249:31 - save
249:32 - and make sure we have no errors and i've
249:34 - said error like a bazillion times all
249:37 - right let's check now if i don't type
249:38 - anything and i press enter there we go
249:40 - again post body must not be empty now
249:43 - let's give this some margin because that
249:44 - looks uh
249:46 - that looks weird
249:47 - all right so here let's go let's give
249:49 - this a style just an inline style and
249:51 - we'll say
249:52 - put another object we'll say
249:54 - margin
249:55 - bottom
249:56 - oops bottom
249:59 - uh let's give it 20. let's save let's
250:02 - look at that
250:03 - even if you put spaces by the way it
250:05 - will still be not valid all right cool
250:07 - that looks better
250:08 - okay so actually one other thing that i
250:11 - wanted to add is the transition group
250:12 - because right now if we just post
250:14 - something it just kind of snaps in which
250:16 - doesn't look that good uh semantic ui
250:19 - makes it really easy to use these like
250:21 - really cool like transitions if you look
250:23 - at this leaf how it shows how it leaves
250:25 - and we can control
250:26 - uh no pun intended with the leave and
250:28 - leave we can control as well like the
250:30 - duration of the transition we're just
250:32 - going to use this group transition thing
250:34 - which is pretty cool
250:36 - if we look you just get transition from
250:38 - semantic ui and you wrap everything in a
250:40 - transition group here they're using a
250:42 - divider and size and everything but
250:44 - we'll just use the duration so let's go
250:46 - to our
250:48 - actually you know in the home so home
250:51 - and here we'll get transition from a
250:53 - semantic ui transition
250:57 - so right here where we loop through all
250:59 - of our uh posts we need to wrap all of
251:02 - this inside of a transition group so
251:04 - let's cut to this and then here we'll
251:07 - say transition
251:09 - position
251:10 - dot group
251:12 - and here we'll actually we need to put
251:14 - it in curly braces and we'll paste it
251:16 - back so let's save that
251:19 - let's look at it so if we add another
251:21 - one
251:22 - there you go it doesn't just snap in it
251:24 - just shows kind of like it fades in and
251:27 - later when we delete them as well they
251:28 - fade out and then it kind of moves back
251:31 - all right so in this class we're going
251:33 - to work on these buttons make them
251:35 - actually functional and add like a
251:36 - delete button
251:38 - by the way just as a reminder if you
251:40 - haven't subscribed please subscribe to
251:42 - the channel and hit the bell button so
251:44 - that i will annoy you with every video
251:46 - that i drop i usually post three a week
251:49 - so i'm not going to be that annoying
251:50 - okay
251:52 - all right so let's actually jump into
251:54 - the code all right before we work on the
251:56 - like button i just want to um make this
251:58 - comment button it's gonna have simple
252:01 - functionality which is when we click on
252:02 - it it's just going to take us to the
252:04 - page of that
252:05 - of that post and i want to add the
252:07 - delete button on this side as well if
252:09 - it's our post so that we can delete it
252:11 - all right so let's go here
252:13 - let's go to the postcard
252:17 - so right here this um right here this is
252:19 - the comment uh button we're just gonna
252:22 - wrap the whole thing in a link
252:25 - or can we make the button itself as a
252:26 - link actually let's try that so let's
252:28 - remove the on click and here we'll say
252:30 - as
252:31 - uh link
252:33 - and we'll say two equals slash actually
252:36 - this is dynamic value dynamic value so
252:38 - we'll do backticks we'll do a slash
252:40 - posts slash
252:42 - the id because we already have access
252:44 - from
252:45 - to the id from the props
252:47 - all right let's see if that works do we
252:48 - have link imported yeah we do okay let's
252:51 - look at our app
252:52 - all right cool it works so if we click
252:54 - on that it takes us to the id of that
252:56 - post
252:56 - okay let's add the delete button
252:59 - i'm not going to add functionality but
253:00 - i'm just going to add the dummy button
253:02 - for now
253:03 - for us to have the delete button we need
253:04 - to access the user because of course we
253:06 - need to
253:07 - if we have to be logged in and we have
253:09 - to have this post as our post for us to
253:11 - be able to see a delete button on it so
253:14 - here we'll get the we'll import the alt
253:16 - context so we'll say import auth context
253:20 - from we go back one level to context
253:23 - slash auth and we need the use context
253:26 - hook so let's say here
253:28 - use
253:30 - context
253:32 - context like that
253:34 - and here at the top we'll say const will
253:36 - extract our user or destructure our user
253:39 - from use context
253:41 - auth
253:42 - context
253:44 - so right here we don't need this comment
253:47 - on post anymore
253:48 - and here at the bottom
253:52 - right
253:52 - actually yeah here after the uh the like
253:55 - button we'll do a an expression and
253:57 - we'll check for the user so if we have a
253:59 - user so we're logged in and
254:02 - user.username
254:03 - equals
254:05 - username so what this means the username
254:07 - of the user that we're logged in as if
254:10 - it's equal to the username of this post
254:12 - that means this is the owner so we need
254:14 - to show a delete button on this postcard
254:17 - so we'll say and end like this that
254:19 - means if all of this is true then we'll
254:21 - show the following and the following is
254:23 - a button so button
254:25 - um as div
254:27 - and we'll give it a color of red because
254:30 - the delete button and we'll give it an
254:33 - on click for now this is just gonna
254:35 - like um we'll just have like a callback
254:38 - and it will console.log delete post like
254:41 - that
254:42 - and we'll put a an icon inside of here
254:44 - so icon
254:46 - and the name of the icon is trash which
254:49 - is going to give us a um a kind of a
254:52 - trash bin icon
254:54 - all right let's see if that okay so it
254:56 - vs code auto imported those things for
254:58 - me which is pretty cool so let's save
255:00 - let's look at our app
255:02 - so there we go so user all the posts by
255:05 - user which is the user that we're logged
255:06 - in as have this delete button in them
255:09 - but this delete button looks a bit weird
255:11 - let's
255:12 - inspect it
255:14 - okay for some reason this uh
255:17 - ui button inside has some margin some
255:20 - like negative margin on the side yeah
255:22 - negative three let's uh just override
255:24 - that so this icon we can just say style
255:27 - equals
255:28 - uh oops put an object here and we'll
255:31 - just say margin 0.
255:33 - let's see if that fixes it
255:35 - all right cool
255:37 - we can give
255:38 - this button a floated property so this
255:40 - button right here will say floated
255:43 - and let's give it the floater to the
255:45 - right so it floats to the right
255:47 - all right cool it looks much better now
255:49 - it's floated to the right and we can
255:51 - click it and if you click it it's just
255:53 - going to say delete post of course we'll
255:55 - add functionality later
255:57 - all right so the like button what i want
255:59 - to do with it i want to make it into its
256:01 - own component so that we can have like
256:03 - leaner components like i said more
256:04 - modularity plus we're going to need this
256:06 - button on the single post page as well
256:08 - so that will we don't re repeat code
256:12 - across components so
256:14 - this is the like button
256:16 - uh no not this actually it's this let's
256:18 - copy let's cut the whole thing
256:20 - and here we'll put a like button
256:23 - component like that oops
256:25 - like that
256:27 - and
256:29 - so here we'll import that so we'll
256:31 - import import
256:34 - like
256:35 - like button
256:37 - from i'm gonna put this in
256:39 - where are we in components
256:42 - yeah we're in components so so from the
256:44 - same directory
256:45 - like button
256:47 - now this like button is going to need to
256:49 - access some things because this like
256:51 - button needs to know uh the use um not
256:54 - the username it needs to know the number
256:56 - of likes so that it shows it and he
256:58 - needs to know the likes of this post so
257:01 - it determines whether this user has
257:03 - liked this post or not and it needs to
257:05 - know the idea of the post itself so that
257:07 - it would look in those post we can pass
257:09 - it the
257:10 - entire post but that's not necessary
257:12 - well we can pass it a new object
257:14 - uh with just the id
257:16 - the likes and what else uh yeah the like
257:19 - count the like count like that
257:22 - all right let's save and let's create
257:25 - this new component so here we'll say new
257:27 - file
257:28 - like uh button
257:31 - dot js
257:32 - we'll get a couple of things so react
257:35 - and
257:36 - use state oops not parentheses black
257:39 - curly brackets
257:41 - or braces so let me get use state
257:44 - uh from react
257:47 - uh we'll need link
257:49 - because we could be not logged in and we
257:51 - want to go to the home page if we click
257:53 - this
257:54 - or the login page rather from react
257:57 - oops router
257:59 - dom
258:00 - we'll need
258:02 - the use mutation hook from react from
258:05 - apollo
258:07 - from
258:08 - apollo react hooks
258:10 - and we'll need gql as well to write our
258:13 - graphql query
258:14 - or mutation from graphql tag
258:18 - okay so we'll say function
258:21 - like
258:22 - button
258:24 - it's gonna take the props that we had so
258:26 - from that we'll destructure from the
258:28 - post
258:29 - we're gonna get the id
258:30 - the like count
258:34 - count and the likes
258:37 - all right
258:39 - so here at the bottom we'll say export
258:41 - default
258:42 - like
258:43 - button
258:44 - okay we need to access the user here
258:47 - actually we can just pass it here i mean
258:48 - we can access it with the with with
258:51 - importing the context but it will be
258:53 - kind of easier to just prop drill it
258:55 - will say user equals
258:57 - the user
258:58 - and inside of here using that user
259:00 - object we're going to determine whether
259:01 - we've liked this or not because we've if
259:03 - we've already liked this post we want to
259:05 - show the button okay our app is broken
259:08 - but we want to show the button like kind
259:10 - of filled with green otherwise you want
259:12 - to show it like outlined and as well if
259:14 - we're not logged in we want to show it
259:15 - outlined and if we click on it it takes
259:17 - us to the login page
259:18 - so here we need to determine whether
259:20 - we've liked it or not so first thing we
259:23 - use use effect so
259:24 - actually we need to import use effect so
259:26 - we say use
259:28 - effect and
259:31 - our callback
259:33 - so callback like this
259:35 - will uh check
259:37 - so here we'll say if user
259:39 - so of course we have to check if we have
259:41 - a user first if we're logged in
259:43 - and now that we have the likes we can
259:45 - check and user dot find and let's find a
259:48 - like
259:49 - where the like dot username
259:52 - equals
259:53 - the user dot
259:56 - username
259:58 - so here we'll say like that
260:00 - which means if any of the likes on this
260:03 - post have a username of this user that
260:05 - means this user that we're logged in in
260:06 - or logged in as has liked this post so
260:09 - we'll say oh actually we need a liked
260:12 - boolean as well so here we'll say const
260:14 - liked
260:15 - and set
260:17 - liked
260:18 - equals use state
260:20 - let's just give it a default value of
260:22 - false
260:23 - and here if this is true that means
260:26 - it's like so we'll say set liked
260:28 - to true
260:30 - else
260:31 - set liked
260:33 - to false
260:36 - and
260:36 - here we'll give it a dependency array of
260:39 - the user
260:41 - and the likes themselves if any of these
260:43 - change recalculate the value
260:46 - here we need to return our button
260:49 - so
260:50 - so what we copied from earlier we put it
260:52 - here and
260:54 - i think we're going to change actually
260:56 - we're not going to change much here this
260:58 - will be a dynamic value because we don't
261:00 - want to either fill it or not we want we
261:02 - need to determine whether we've liked
261:03 - this post or not so here we'll say
261:06 - we cut that we'll say const like
261:09 - button
261:11 - button like this equals
261:13 - and uh actually we're gonna put it here
261:15 - so let's just put it now like button
261:19 - now here we need to check for the user
261:21 - so i'll write this and i'll explain it
261:23 - right we'll do a ternary operator and
261:25 - then parentheses so if user and now if
261:28 - liked so another ternary operator and
261:31 - here we'll paste that back in but here
261:33 - instead of basic we're gonna have the
261:35 - filled button because we've liked it so
261:37 - it's gonna be filled so else if we've
261:40 - not liked it let's paste that back in
261:42 - and it's gonna be that it's gonna be the
261:43 - outline button
261:45 - now here outside of this parenthesis we
261:47 - do another colon so else if we if we
261:49 - don't have a user that means we're not
261:51 - logged in so we'll have the same button
261:53 - and it's going to have basic because
261:54 - it's going to be outlined but this
261:56 - should be a link to the login page so
261:58 - here we'll say as
262:00 - link
262:02 - did we import link yes so as link to
262:06 - um this is going to be to slash or
262:08 - actually just like that slash
262:10 - login
262:12 - all right i think that should take care
262:13 - of it
262:14 - uh now one thing of course we need to
262:17 - have an on click this like post we need
262:19 - to have the mutation so let's write the
262:20 - mutation down here
262:22 - here we'll say const
262:24 - like
262:26 - post
262:28 - mutation
262:29 - equals
262:31 - gql gql
262:33 - [Music]
262:36 - oh i misspelled that
262:38 - okay gql mutation
262:41 - like post
262:43 - is going to take a post id
262:46 - our server code and it's going to be of
262:48 - type id and that's that's required and
262:50 - it's going to trigger the po like post
262:53 - mutation
262:54 - and we'll pass this a post id of dollar
262:57 - sign post id
263:00 - and we'll get a couple of things and
263:01 - i'll explain later why we got those
263:03 - things and hopefully this time i won't
263:04 - forget to explain because i did this
263:06 - thing last time where i said i'll
263:08 - explain later i forgot to explain that
263:09 - thing
263:10 - all right if i do that by the way you
263:12 - can drop a comment and tell me oh you
263:14 - forgot to explain that and i'll explain
263:15 - it to you in a comment
263:17 - okay so i'll leave that like that and
263:18 - now we need to use use mutation to get
263:21 - that function so here we'll say const
263:25 - like post
263:27 - here we'll get the error actually we're
263:29 - not gonna have any errors
263:31 - so here we'll say use mutation
263:34 - we might have an error but the error
263:35 - would have to be that our token is
263:37 - expired or something and that has
263:38 - nothing to do with the like post so
263:40 - we'll just get the like post function
263:42 - so here we'll say use mutation of course
263:44 - we'll pass it our like post mutation and
263:47 - we'll have some variables
263:49 - and the variables will be uh the post id
263:52 - and that's going to be the id that we
263:54 - have from here from our props
263:56 - all right that should take care of that
263:58 - and that's named the same as this one so
264:00 - that should be fine
264:02 - uh everything here should be fine
264:04 - actually let's save all files
264:06 - let's look at our console okay there's a
264:08 - couple of problems here
264:09 - we need to get button and label
264:12 - from semantic ui
264:14 - so let's say actually up here we'll say
264:16 - import
264:19 - button
264:21 - label
264:23 - and icon
264:23 - [Music]
264:26 - from symantec ui react let's save
264:29 - user is not defined oh yeah we need to
264:31 - actually get the user as well from our
264:33 - props
264:35 - uh like post is defined but not be used
264:38 - in postcard yeah okay
264:41 - postcard oh yeah okay so this is useless
264:44 - now let's remove that
264:46 - and let's save
264:48 - no duplicate props allowed in postcard
264:50 - line 30.
264:52 - okay so we're passing
264:54 - we're passing the user oh no hi here
264:56 - okay this should be as the link let's
264:58 - remove the div
265:00 - all right
265:02 - okay cool so
265:04 - oh that's working all right so this one
265:06 - that we've liked is actually filled this
265:08 - one that we haven't liked is empty and
265:09 - if we click
265:10 - there we go it likes and it actually
265:12 - increments it and if you notice if we go
265:15 - to our apollo cache
265:17 - you'll see that it's actually updating
265:19 - okay let's make this a bit bigger
265:21 - cache root query so let's look at the
265:23 - first one right it has zero likes but if
265:25 - i like it now it's actually updating it
265:28 - now you might be wondering how is it
265:29 - updating the cache without us having to
265:31 - say proxy.right query or something like
265:33 - that but the way that's happening is
265:36 - because
265:37 - let's close that if we look at our
265:39 - mutation
265:40 - we're specifying the id of the post that
265:43 - we're getting back so we're getting back
265:45 - a resource of type post and apollo is
265:48 - smart enough to realize okay we're
265:50 - getting a resource of type post and it's
265:52 - got this id that means let's update our
265:55 - uh the post that we have with this id
265:57 - with any of these fields these new
265:59 - fields that we've received so it does it
266:01 - automatically we don't have to do
266:02 - anything which is pretty amazing
266:04 - actually so we didn't have to write any
266:06 - code to change our client-side state
266:09 - one thing that i don't like right now is
266:11 - that if we like a post it kind of stays
266:14 - focused focused when we have to click
266:15 - away for the color to change
266:17 - so let's inspect this
266:20 - and
266:22 - this the ui button
266:24 - okay so the button has this color so
266:26 - let's copy this this is the normal color
266:28 - so if we focus it becomes this dark
266:30 - color
266:31 - okay so it's this rule right right here
266:33 - let's copy this rule
266:35 - all of that
266:37 - okay
266:37 - [Music]
266:40 - okay let's go to our app css
266:44 - and here let's paste that
266:46 - and we'll say background color
266:49 - background
266:51 - color
266:53 - and let's take that color again from
266:55 - here it's got that
266:57 - let's paste it here let's save
266:59 - everything
267:01 - all right so now even if it's focused
267:03 - it's going to be that bright color and
267:05 - not the darker color
267:07 - all right so that's working
267:09 - and so that's i think that's it for this
267:11 - video yeah that's it
267:16 - hello class
267:17 - so instead of going to sleep on time
267:19 - tonight i decided to record this video
267:22 - sleep is for the week hey let's hope i
267:24 - don't regret this decision in the
267:26 - morning
267:27 - all right so welcome to class number
267:29 - eight
267:30 - i think it's number eight
267:32 - yeah all right so last in the last class
267:35 - we did these buttons and we uh added
267:37 - functionality for the like button but
267:40 - right now we're going to work on the
267:41 - single post page because right now if we
267:43 - go to it it's just empty
267:45 - so
267:46 - um the way we're going to approach this
267:47 - we're going to we're going to get this
267:49 - id from the url and then use the get
267:52 - post get singular post mutation or
267:55 - rather query and then fetch that post
267:57 - and display it in this page so let's get
268:00 - to that okay first thing is let's create
268:02 - a route for that
268:03 - by the way make sure your server and
268:05 - your client are running as per usual
268:07 - let's go to the app.js
268:10 - and here at the bottom of the container
268:12 - we're going to add another route so
268:14 - route
268:15 - and we'll have exact path
268:18 - will be slash
268:20 - posts slash
268:22 - colon post id
268:25 - like that and the component
268:27 - will be a new page called let's call it
268:29 - single
268:31 - post
268:34 - let's import that up here
268:36 - so import
268:40 - single post oops
268:43 - from
268:44 - pages slash single
268:48 - post okay let's create that so here in
268:51 - pages i'm going to create
268:54 - excuse me singlepost.js
268:57 - and here the usual will get react
269:01 - from react
269:02 - and we'll say function
269:05 - what's wrong with that
269:06 - import
269:09 - okay there's some ts thing
269:12 - for some reason
269:13 - but let's let's ignore that for now
269:15 - let's say single post
269:19 - i'm gonna need the props and i'll tell
269:21 - you why later
269:22 - here let's uh export default
269:25 - single post
269:28 - so here first thing we need to get the
269:30 - post id from the url so we'll say const
269:32 - post id equals and we'll get this from
269:35 - props dot actually this is one other
269:38 - reason why we need props
269:40 - dot match dot params so the url
269:42 - parameters and we call this post id so
269:45 - we'll get that
269:47 - and let's write the mutation right now
269:49 - or the query rather
269:51 - so here we'll say const
269:54 - we'll call this fetch
269:56 - post
269:57 - query
269:59 - this will be gql
270:01 - this would be a good time to import gql
270:03 - as well so here we'll say import gql
270:06 - actually gql from
270:09 - graph ql
270:11 - oops graphql tag
270:14 - and here we'll say
270:16 - query
270:18 - and this needs to take a post id
270:23 - of type id and that's required
270:26 - and this will run the get post query and
270:29 - we'll take a post id
270:31 - that's actually our post id
270:34 - and here let's get everything so id body
270:38 - created add
270:40 - username
270:42 - and get like count
270:44 - i'm gonna get likes and from that we'll
270:47 - get uh just the username
270:49 - and we'll get a comment account
270:54 - we'll get the comments and get from the
270:57 - comments we'll get the id the username
270:59 - uh the created ad
271:02 - and the body
271:03 - yeah that's it let's uh save so that
271:06 - formats
271:07 - and here let's start to create our
271:09 - markup and then
271:10 - and then see what we need so this will
271:13 - be conditional so we'll say let
271:15 - because this depends on whether we're
271:16 - logged in or not so we'll say post
271:19 - markup or actually not not logged in
271:21 - whether we
271:22 - have the data from the query or not yet
271:25 - so we'll say if
271:27 - um actually
271:29 - let me get the get post so
271:32 - we'll get the use query hook so we'll
271:34 - say import use
271:36 - query from
271:39 - at apollo react hooks
271:42 - and here we'll say const
271:44 - and we'll get
271:46 - data and straight away from that we'll
271:48 - get the get post
271:50 - field and here we'll say equals use
271:54 - query
271:55 - and we'll pass it the oops fetch
271:58 - post query
272:00 - and this needs some variables
272:02 - and the variables will be
272:05 - will be our
272:06 - actually we'll do an object and we'll
272:08 - say post id like this meaning it's going
272:10 - to be post id and the value will be this
272:12 - post id right here
272:15 - um
272:16 - we can here do a console log of post id
272:19 - to make sure that we're getting our post
272:20 - id just in case
272:22 - and here so here we'll say if not get
272:26 - post because we might be still loading
272:29 - we'll say post
272:30 - markup
272:32 - equals
272:33 - and here we'll just put a paragraph and
272:35 - say loading post
272:37 - uh feel free to put a spinner here but
272:39 - i'm just gonna leave it as a um
272:41 - as a paragraph for now and we'll say
272:44 - else so else if we have the post
272:46 - uh we need to get all the fields from
272:48 - the post so we'll say const and we'll
272:50 - use destructuring and we'll say id
272:53 - body
272:55 - created
272:56 - at
272:58 - get username
273:00 - what else comments
273:03 - get likes
273:05 - uh like count
273:07 - and comment count
273:10 - say equals uh what is it uh from
273:14 - yeah from get post
273:16 - let's make this wrap so press alt z okay
273:20 - so now we can say post markup
273:24 - equals
273:26 - and we'll use the grid
273:28 - and inside of here of course we will
273:30 - need to import these in a bit but let's
273:31 - uh
273:32 - do a row here
273:35 - and uh right here i want to have the um
273:37 - an image but of course this is hard
273:39 - coded so it's the same like in the
273:40 - postcard component so i'm going to grab
273:42 - this source attribute so i'll just copy
273:45 - that
273:46 - and we'll come back here we'll say
273:48 - so this will be inside of the image tag
273:52 - oops image like that
273:56 - and let's paste that source attribute
273:59 - and i'm going to give this a size of
274:02 - small
274:03 - and let's make this float to the right
274:05 - so we'll say float
274:07 - oops float equals
274:09 - right
274:10 - and we can close it like that
274:14 - actually this needs to be in a column so
274:16 - i'll cut that and say grid
274:19 - red dot
274:21 - column
274:25 - and let's actually give this a
274:27 - width of
274:29 - two
274:30 - and here we'll put our image back
274:33 - and now we're gonna have the rest so the
274:35 - rest will be a grid with a width of 10
274:38 - because that's the
274:39 - the number of remaining spaces let's
274:42 - remove this image and
274:44 - here we'll have our card so let's put
274:46 - card
274:47 - let's give it the property fluid so it
274:49 - takes up all the width and here we'll
274:51 - have as per usual card dot content
274:56 - here we'll have a header so card
274:59 - dot header
275:00 - this will be the user name so i'll put
275:02 - uh
275:03 - an expression and say username or curly
275:05 - braces but username
275:07 - we'll get meta which is the
275:09 - created art so card dot
275:12 - mata
275:13 - and oops here we'll say curly braces and
275:15 - we'll say
275:17 - actually we need to format it so i will
275:19 - say we need to import moment a moment
275:22 - it will say import
275:24 - moment from
275:26 - moment
275:28 - let's go down here we'll say moment
275:31 - we'll pass it the created at
275:34 - and say dot from
275:37 - now
275:38 - and uh yeah that's fine
275:40 - here we'll say card
275:43 - description scription
275:46 - and here we'll just put the body of the
275:49 - post
275:50 - um underneath these uh this card content
275:53 - let's put a ruler a horizontal ruler to
275:56 - have a line between them and here i want
275:58 - to put the like button and the comment
276:00 - button just like in the card since we
276:02 - have those in their own component we can
276:04 - just attach them here so here we'll say
276:06 - um another card
276:09 - uh content
276:11 - this will be the x we'll give this extra
276:14 - the extra attribute
276:15 - and here we'll say
276:17 - like button
276:20 - we need to import that but let's
276:22 - actually we need to pass the user to the
276:23 - like button so
276:25 - we need to import the um the auth
276:28 - context
276:29 - so here we'll say import auth
276:32 - context
276:34 - from go back one level to um context
276:37 - slash auth
276:39 - and we need to get the use context hook
276:41 - from react so use
276:43 - context up here oops con
276:48 - text
276:49 - and up here we'll say
276:51 - const and we can destructure it we'll
276:53 - say const user like that equals use
276:57 - context
276:58 - and we'll pass our auth
277:00 - context
277:02 - so here we'll pass our user and it
277:04 - doesn't matter if we're not logged in
277:06 - so right here in the like button we're
277:08 - going to say user equals user
277:11 - and we'll pass the post like we did in
277:13 - the postcard but we're just gonna of
277:15 - course pass the id the like
277:17 - count
277:19 - and the likes array so that the button
277:21 - determines whether we've liked it or not
277:24 - and uh here let's close that and let's
277:27 - put the
277:28 - comment button
277:30 - which is not going to do anything for
277:32 - now but we'll make it do in stuff in the
277:34 - future
277:35 - let's give it the basic attribute
277:38 - and
277:38 - or actually no
277:40 - let's make it as a div
277:43 - and here let's say label position
277:47 - equals
277:48 - right
277:49 - so we'll have that um kind of
277:53 - arrow to the left so let's say on click
277:56 - equals
277:57 - for now it's just gonna console.log
278:00 - console.log
278:01 - and let's just say comment on post
278:06 - we'll make this do stuff in the future
278:08 - but for now we'll just leave it like
278:09 - that
278:10 - and inside this button we're gonna have
278:12 - another button so a button
278:16 - this is the basic button because this is
278:18 - the uh kind of cloud thing
278:20 - uh here we'll say color is blue
278:23 - oops and inside of the button we're
278:24 - going to put the icon so it'll say icon
278:28 - um
278:28 - the name of the icon did we use comment
278:31 - or comments
278:32 - so right here yeah comments so we'll
278:35 - keep using the same icon so here we'll
278:38 - say
278:38 - comments
278:39 - let's close that
278:41 - and
278:42 - underneath this button we need the label
278:44 - and we need to show the number of
278:47 - of comments so here we'll say label
278:49 - basic
278:51 - and the color is blue
278:54 - and this label will be pointing
278:58 - to the left
279:00 - pointing left like that and inside the
279:02 - label we're just going to have comment
279:04 - count
279:06 - um
279:07 - here actually we need to show the um the
279:10 - delete button
279:11 - uh but we already have that in the
279:13 - postcard
279:15 - but actually it's not doing anything
279:16 - right now i forgot to add functionality
279:19 - to the delete button because right now
279:20 - it's not actually deleting the post so
279:22 - we can take care of that right now so
279:25 - what we need to do we need to put this
279:27 - delete button into its own component so
279:30 - let's go to the
279:31 - yeah right here so where this button is
279:33 - we can just cut this
279:35 - and we'll say if
279:37 - user and the username of the user is the
279:39 - same as the username of the person that
279:40 - posted this
279:42 - so we'll say here
279:43 - delete
279:45 - button
279:47 - and this delete button is to access the
279:49 - uh post id so that it would use the
279:52 - delete post uh or remove post mutation
279:57 - so here we'll say post id equals
280:00 - we have this id yeah we have this id and
280:03 - id we can just say post id equals id
280:06 - like that
280:07 - and uh we need to pass it um
280:10 - actually i don't think we need to pass
280:12 - it anything here
280:13 - yeah let's just um close it off and here
280:16 - let's say import
280:18 - delete
280:20 - button from
280:23 - uh same directory
280:25 - delete
280:26 - button because remember this is we're in
280:28 - the postcard
280:30 - and here in the components let's create
280:32 - a delete
280:35 - button.js file
280:37 - and here we'll
280:39 - import
280:42 - react
280:47 - and of course we'll import gql
280:50 - from graph ql tag
280:54 - and here we'll import the
280:57 - use mutation hook
281:00 - from
281:01 - add apollo react hooks
281:05 - and uh we're gonna need the
281:08 - button because that's what we copied
281:10 - actually let me make sure let me check
281:12 - what we copied so here i'll say function
281:15 - delete
281:16 - uh
281:17 - yeah that's showing an error because of
281:19 - this i'll just comment this for a second
281:21 - delete button
281:23 - it's going to take the props
281:27 - and let's just export that for now
281:29 - export default
281:32 - delete
281:33 - button
281:36 - let's say return
281:39 - let's put that okay so we need button
281:41 - and icon so here we'll uncomment that
281:44 - we'll say button
281:46 - and icon
281:48 - from
281:49 - semantic
281:51 - ui react
281:53 - so let's go to the bottom here and let's
281:55 - write the delete post mutation so we'll
281:58 - say const
282:00 - delete post
282:03 - mutation
282:04 - equals
282:05 - gql
282:07 - open the tag template
282:09 - and we'll say mutation
282:11 - delete
282:14 - post
282:17 - and this will take a post id
282:20 - of type id and that's required
282:22 - and it will just call the delete post
282:25 - mutation
282:27 - and pass a post id
282:29 - of value post id
282:31 - now we don't need the return um from
282:34 - this we just need to make sure that it
282:35 - runs successfully so we can just leave
282:37 - it like that
282:39 - and we'll go here and use our used
282:41 - mutation hook and get the uh
282:43 - the callback function from that or the
282:45 - trigger function so we'll say
282:48 - um const
282:50 - i'll say delete oops delete post
282:55 - equals
282:56 - use
282:57 - mutation
282:59 - and we'll pass our
283:01 - delete post mutation and here we'll need
283:05 - some
283:06 - variables so inside of this we'll say
283:08 - variables
283:11 - and we'll have post id like that
283:15 - and we'll have an update here update
283:20 - i've
283:21 - we can get a proxy
283:23 - well i don't think we need the proxy
283:24 - actually for now
283:26 - we'll just say update
283:28 - and um
283:30 - the way i want to set up this i want to
283:31 - set it up so we have like a confirm uh
283:34 - model because we don't want to if a user
283:37 - by mistake clicks the delete button we
283:39 - don't want it to immediately click we
283:41 - want kind of like a model to appear that
283:43 - says are you sure you want to delete
283:44 - this post and then when a user then
283:47 - clicks yes i'm sure then it actually
283:49 - deletes it
283:50 - so what i'm gonna do here
283:53 - we're gonna
283:54 - get something called confirm from
283:57 - from symantec ui so get that confirmed
284:00 - but this this has a boolean like whether
284:03 - it's open or not so here we'll uh
284:05 - actually let's get use state as well
284:08 - so bear with me a moment this will make
284:10 - sense in a in a second
284:12 - so here we'll say const
284:15 - confirm
284:17 - open
284:19 - and we'll have set
284:20 - confirm
284:22 - open
284:25 - equals use state and by default it will
284:28 - be false oops
284:30 - false
284:32 - and
284:33 - let's go down here in the um
284:36 - in here so underneath the button we're
284:38 - going to put the confirm so we'll say
284:40 - confirm
284:43 - and here we'll have an open um
284:47 - boolean which will be the confirm
284:50 - open so confirm open like that and by
284:52 - the way this is in the documentation if
284:54 - you want to check check it out and
284:56 - you'll have a an on cancel
284:59 - function
285:00 - and this is when you click so you get
285:03 - this model and it says
285:04 - yes or no and this would happen when you
285:07 - click no so when we click now we just
285:09 - want to close the uh the confirm model
285:12 - we don't want to do anything so we'll
285:13 - just set this confirm open to false so
285:16 - we'll say set confirm open
285:20 - and we'll pass it the value false
285:22 - and we need an unconfirm so on
285:26 - uh confirm and this is so this is when
285:29 - we actually uh say yes we are sure we
285:31 - want to delete the post so we want this
285:34 - to call the uh the delete post function
285:37 - from used mutation
285:38 - and here let's close
285:40 - our confirm
285:42 - this is a problem because we have two
285:43 - sibling
285:45 - components inside one component
285:47 - or
285:48 - rather you know elements so here we can
285:50 - just wrap everything in a fragment so
285:52 - that error is gone now
285:54 - and let's go up here
285:56 - so here in the update uh once the once
286:00 - we reach the update that means the post
286:01 - has been deleted successfully we want to
286:03 - close the model so we'll say set confirm
286:06 - open
286:08 - to false
286:10 - and of course
286:11 - this will not disappear from from our
286:13 - front end because we're not removing it
286:15 - from the cache but let's do this later
286:17 - so i'll put a to-do here so i'll put a
286:20 - comment and say to do
286:22 - and say uh remove post from cache
286:26 - so that the change is reflected on the
286:28 - front end without us having to fetch the
286:30 - posts again
286:32 - and um okay so we'll say here oh okay we
286:36 - need to put a comma here
286:37 - by the way this is the to do highlight
286:39 - extension that that highlights the to do
286:42 - all right so
286:44 - i think that's fine
286:46 - or actually here
286:48 - the post id is not just post id it's
286:50 - coming from the props so we need to say
286:52 - uh prop or actually we need to just
286:54 - destructure it so here we'll say
286:56 - post id like that
286:59 - uh i think that's fine so let's save the
287:02 - delete button
287:05 - and let's save the postcard but let's
287:07 - not save the single post and let's go to
287:09 - the pay uh to the app component uh and
287:13 - just remove a comment for a second the
287:15 - route and the import so that we can just
287:17 - test the um
287:19 - we can test the postcard alone let's
287:21 - make sure we don't have any errors okay
287:23 - so set confirm open is not defined
287:25 - because i misspelled that
287:27 - right here that's a capital c save all
287:31 - right cool it's running let's check it
287:33 - out
287:34 - okay so we get syntax error name found
287:37 - something
287:39 - let's check our mutation there's a
287:40 - problem there
287:43 - mutation delete post
287:46 - okay here it's just a post id like that
287:48 - and uh
287:50 - i'm gonna do it like that here all right
287:53 - okay so we get this and if we click on
287:56 - the delete okay nothing happens
287:59 - it doesn't delete it
288:00 - okay there's something wrong
288:04 - okay we want when we click this button
288:06 - it doesn't just say delete post it
288:08 - actually sets the model to
288:11 - to open so we'll say set confirm open to
288:14 - true
288:15 - and let's save
288:18 - okay let's look at our app so now if we
288:20 - click it sets the model to open if we
288:22 - click cancel it just closes it and it
288:24 - doesn't delete it we can just refresh to
288:25 - make sure it doesn't delete it and if we
288:27 - click delete now and you click ok
288:30 - it actually deletes if we open the um if
288:33 - we do f12 when we go to the network
288:35 - and uh for some reason
288:38 - they didn't show up because i didn't
288:39 - open it previously but if i um refresh
288:42 - you see that that post was deleted so if
288:44 - we post a new one and we click here and
288:47 - we delete it of course it doesn't remove
288:48 - it like i said but if we refresh it's
288:50 - actually deleted okay so the delete post
288:53 - button is working so now in the single
288:55 - post we can um we can start to we can
288:58 - put that delete post button and it will
289:00 - work as well
289:01 - okay let's close this terminal and let's
289:04 - uncomment the import of the single post
289:06 - component and
289:08 - uncommented the route let's save that
289:11 - let's go back to our single post
289:13 - so now now here at the bottom
289:17 - right here after this button we can put
289:19 - the delete button so we'll say if user
289:23 - so the same stuff from
289:24 - from single post
289:26 - uh from postcard rather so if user and
289:29 - user
289:30 - dot username
289:32 - equals
289:33 - username
289:34 - which is the username of the post
289:38 - we'll say and and
289:40 - we need to render our delete button
289:42 - so you can say
289:44 - delete
289:45 - button and we're going to import it in a
289:47 - second and we're going to pass it post
289:49 - id equals id
289:51 - oops
289:52 - id like that
289:54 - and let's close that
289:56 - and let's go up here and we'll say
289:59 - oh we didn't even import the like button
290:00 - actually we need to import a bunch of
290:02 - things here so we'll say import oops
290:05 - import
290:06 - like
290:08 - button
290:09 - from
290:13 - go back one level to components slash
290:17 - like button
290:19 - and we can copy this one line paste it
290:21 - one more time and ctrl d and say delete
290:25 - button
290:27 - and we need to import a bunch of things
290:29 - from
290:30 - semantic ui so we get the grid
290:33 - the image the card
290:35 - the button
290:37 - okay so here we'll say
290:40 - port
290:41 - button
290:43 - card
290:44 - um
290:46 - grid
290:48 - image
290:49 - from
290:51 - semantic ui react
290:53 - and let's save
290:55 - okay so we need icon and label as well
290:57 - so we'll say icon
290:59 - and label let's save
291:02 - all right so it says
291:04 - post markup is assigned a value but
291:06 - never used because we need to return it
291:08 - we need to return something actually
291:09 - some markup so here at the bottom we'll
291:11 - say return
291:13 - post markup
291:16 - let's say all right says comment
291:18 - comments is assigned a value but we're
291:20 - not gonna worry about showing comments
291:21 - right now
291:23 - all right so let's look at our post all
291:24 - right there we go so this is a post by
291:27 - user
291:29 - okay flux
291:30 - this is a post by user
291:32 - and we get the delete button so if we
291:34 - click on that
291:37 - okay so it deletes it
291:39 - because
291:40 - it actually deletes it but it doesn't we
291:42 - need to redirect to the home page so you
291:43 - see if i go to the home page that post
291:45 - that was called another one is removed
291:48 - so
291:49 - the way we can do that
291:51 - uh we can pass a call back to the delete
291:53 - button
291:55 - so here let's say callback
291:57 - equals
291:58 - and
292:00 - let's call this delete oops
292:05 - delete
292:06 - button
292:08 - callback let's be
292:11 - let's be kind of uh or delete post
292:15 - expressive with our
292:17 - function naming so here up here
292:20 - we can say function
292:22 - delete post
292:24 - callback
292:27 - we say props dot
292:30 - history
292:33 - push
292:34 - and we'll just go to the home page so we
292:36 - got props so that should work and inside
292:39 - the delete button
292:40 - uh we need to take that call back so
292:42 - here we'll
292:44 - destructure as well callback
292:46 - and
292:48 - so right here actually in the update
292:50 - once the uh
292:52 - the post is deleted we need to call the
292:54 - callback
292:56 - okay but the problem with this actually
292:57 - the callback might not we might not have
292:59 - a callback so we can say
293:02 - if callback
293:03 - we call callback like that
293:06 - because from the
293:07 - postcard we don't actually have a
293:09 - callback so
293:11 - we'll do this if check
293:13 - okay let's check that we have we have no
293:15 - errors we don't
293:17 - so if we go here go to this thanks guys
293:20 - and we click on
293:22 - delete and we click ok
293:24 - there we go actually read our access to
293:26 - the home page and is deleted because if
293:27 - we refresh we see that it's actually
293:30 - deleted
293:32 - all right
293:33 - let's now add this um
293:35 - remove let's remove this post from the
293:38 - cache once it's deleted so let's remove
293:40 - this to do comment
293:42 - and we need the proxy right now so we'll
293:45 - from the update we'll take proxy
293:48 - and we'll say we need that fetch posts
293:52 - query
293:53 - so here let's say
293:55 - import
293:57 - fetch
294:00 - posts
294:01 - query
294:03 - from
294:04 - actually what is that where is that util
294:07 - slash graphql
294:08 - ql if i can talk
294:11 - so graphql like that
294:14 - and uh right here
294:17 - yeah right here before calling the
294:18 - callback we'll say
294:20 - uh like we did for the adding post we'll
294:23 - say const
294:24 - data equals
294:26 - proxy dot
294:28 - read query
294:31 - and we'll pass a actually an object
294:34 - oops an object
294:36 - with the field query and that query will
294:38 - be the fetch
294:40 - post query
294:41 - so now that we got the data we'll say
294:43 - data dot get posts
294:46 - and we'll say equals data
294:48 - now we need to remove a post so we'll
294:50 - say data
294:51 - get posts
294:53 - dot filter
294:55 - so we want to keep all posts so we'll
294:57 - say postwar
294:58 - post.id we want to keep all posts that
295:01 - don't have
295:03 - the same id as this post id that we just
295:05 - deleted
295:06 - and we'll say proxy dot
295:09 - write
295:10 - query and here we'll say query is
295:15 - fetch posts query
295:17 - and the data is data like that
295:20 - okay let's save
295:22 - let's check out our app
295:24 - let's post a new one
295:26 - and now if i click delete and i confirm
295:29 - there we go it's gone and uh
295:31 - if we go to the single post page
295:34 - well by the way the uh we can test the
295:36 - like button so we can like and go back
295:38 - to the home page and it's actually liked
295:40 - so that's working from within this
295:41 - component
295:43 - so from uh from within this page we can
295:45 - click delete post
295:47 - it redirects us and it deletes the post
295:50 - okay so that's it for this video
295:54 - welcome back to class number nine in
295:57 - this series
295:58 - um in this one we're going to be adding
296:01 - the comments on the single post page
296:04 - and allowing users to post them and
296:06 - delete them and all that good jazz
296:09 - all right so let's get to it
296:11 - okay let's go to our code codebase so
296:14 - here in the single post
296:16 - component i'm going to scroll down
296:20 - actually here where this card ends still
296:24 - inside of the column
296:25 - we're gonna do the way we're gonna we're
296:27 - gonna display them is i could put them
296:29 - in a
296:30 - component of their own but i don't see
296:31 - any need in an application this small
296:35 - so we already have comments out of this
296:38 - um
296:39 - thing like destructured from get post
296:42 - which by the way is the reason why we
296:43 - have a warning here because we're not
296:44 - using comments but we're gonna use them
296:47 - now
296:47 - so here underneath the card we're going
296:50 - to open an expression say comments
296:52 - oops not comment count comments dot map
296:57 - and for each comment
297:00 - we're gonna oops not like that yeah like
297:02 - that actually confuse myself
297:04 - for age comment we're going to return
297:06 - the following
297:08 - so the comment is going to be a card of
297:09 - its own
297:10 - and yes we can nest cards
297:12 - so let's give it the property of fluid
297:14 - so it takes all the width
297:16 - and here we'll give it a key of
297:18 - comment dot id which is unique
297:22 - so inside of the card we're gonna have a
297:24 - card content so card content
297:29 - and inside of here we're gonna have the
297:31 - header so
297:33 - card dot header
297:35 - and this will be the username of the of
297:38 - the person that commented so comment dot
297:40 - username
297:42 - like that
297:43 - and underneath here we'll have the meta
297:46 - card
297:47 - dot meta which is when it was posted so
297:51 - here we'll use moments to format it i
297:53 - think we have yeah we have moments
297:55 - because we formatted the date of the
297:56 - post itself
297:58 - so here we'll say moment oops moment
298:01 - uh
298:03 - moment with one m in the middle and here
298:05 - we'll pass
298:07 - comment
298:08 - dot created
298:10 - at
298:11 - and we'll say dot from
298:13 - now
298:14 - like that
298:15 - and here we'll have the card
298:18 - description
298:20 - kind of similar to the actually almost
298:22 - the same as the actual post but this is
298:25 - these are comments so here we'll say
298:26 - comment dot body
298:29 - all right let's save
298:30 - let's make sure there's no errors there
298:32 - shouldn't be any errors cool that
298:34 - warning for comments is gone and if we
298:36 - switch to our app
298:38 - okay this one has no comments we can go
298:40 - to this one has three comments and there
298:42 - we go we get comments and uh
298:45 - yeah i agree with this comment
298:47 - okay so let's make it so that
298:49 - um our comments we can delete and by the
298:53 - way i need to log in here so i'll say
298:55 - user
298:56 - and the password is one through six
298:59 - so let's go back to that one
299:01 - where is it this one
299:03 - so here uh since i'm the user i want to
299:05 - be able to delete this comment
299:07 - so let's go back to code and
299:11 - i'm going to add the button right here
299:14 - inside of the content so here we'll say
299:16 - if user because we already have user
299:19 - from the context
299:21 - we say as well and
299:23 - user.username
299:26 - and equals
299:28 - the comment
299:29 - dot username which means i am or whoever
299:33 - this user is is the owner of this
299:35 - comment so we'll say and and we'll
299:38 - render the following and we're actually
299:40 - just going to render the delete button
299:42 - and we'll pass it the post id
299:45 - and which is the id and we'll pass it
299:48 - the comment id
299:50 - and uh i'll explain in a second which is
299:53 - comment dot id
299:55 - now what we're gonna do we're gonna go
299:56 - to the delete button component so let's
299:59 - go to the delete button
300:02 - and here we're gonna make it so that
300:04 - this can delete a post and it can delete
300:07 - a comment as well and the way we're
300:09 - going to do this we're going to make
300:10 - this mutation right here dynamic
300:12 - let's go down here
300:15 - let's write the delete
300:18 - comment mutation so i'll say const
300:20 - delete
300:22 - oops delete
300:23 - yep that's spelled correctly
300:25 - comment
300:27 - mutation
300:29 - this will be
300:31 - gql
300:32 - open template string and inside of here
300:34 - we'll say
300:35 - mutation
300:37 - and delete
300:39 - oops delete comment
300:42 - and we'll pass it the post id
300:45 - which is of type id and it's required
300:48 - and here i need to put a
300:50 - dollar sign
300:52 - and here we'll say dollar sign comment
300:55 - id
300:56 - and this will be an id as well
300:58 - and that's required
301:00 - and here we'll say delete
301:03 - comment
301:05 - and we'll pass the post id
301:08 - which is going to be the dollar sign
301:10 - post id
301:12 - and the comment id which is going to be
301:15 - the dollar sign comment
301:18 - oops id
301:22 - i'll get the id
301:24 - we get the comments
301:26 - and get the from the comments we'll get
301:28 - the id the username the created
301:32 - ad
301:33 - and the body of course
301:36 - and here we'll say we need to get the
301:38 - comment count
301:40 - and yeah that's fine we can save
301:43 - let's go up here
301:45 - now here what we're going to do is
301:47 - instead of just saying delete post
301:48 - mutation here we're going to put another
301:50 - variable we'll just call it mutation
301:52 - like this
301:53 - and this will be dynamic so we'll say
301:55 - const mutation equals
301:58 - and
301:59 - here
302:00 - here where we destructure post id let's
302:02 - as well destructor um instructor
302:06 - i can't talk guys sorry
302:09 - so we'll destructure a comment id and
302:12 - here what we need to say is comment id
302:16 - uh we'll do a ternary operator so if we
302:19 - want to delete um if you want to put
302:21 - this button to delete a post we're just
302:22 - going to give it a post id and a
302:24 - callback or maybe not a callback and if
302:27 - we want to delete the comment we're
302:28 - going to give both of them so if we have
302:30 - a comment id that means this button is a
302:32 - on a comment and not on a post so we
302:34 - want the uh delete actually no we want
302:38 - the delete
302:40 - comment mutation here if we do have a
302:42 - comment id
302:44 - else that means this button is on a post
302:46 - so we want to use this mutation the
302:48 - delete post mutation
302:50 - now here we can change the function name
302:54 - we don't have to but it's better if we
302:55 - do and i'll call this delete post or
302:58 - mutation because it can be either
303:01 - and we'll do the same we'll say use
303:03 - mutation or we'll pass this mutation
303:05 - whichever one it is
303:07 - and um
303:08 - one thing we need to change by the way
303:09 - here is let's wrap all of this let's cut
303:12 - this and we'll say if
303:15 - not
303:15 - comment
303:16 - id
303:18 - do all of that
303:19 - oops uh paste because if we're deleting
303:22 - a comment we don't want to do this
303:23 - because um
303:25 - it automatically removes the comment and
303:27 - we don't want to remove any posts from
303:29 - our get posts but if we do delete a post
303:33 - then we will not have a comment id then
303:35 - this will execute and everything will
303:37 - run just fine
303:38 - and here in variables we need to also
303:40 - pass the comment id
303:43 - and by the way this is not a problem if
303:44 - we're calling the delete post
303:48 - mutation this will just be ignored in
303:50 - that one and it will be null anyway
303:53 - so here
303:54 - uh i think everything is fine except
303:56 - here we need to change delete post or
303:58 - mutation right right there and let's
304:01 - save this let's go back to our single
304:03 - post save that
304:05 - and let's look at our app
304:07 - so there we go we get a button
304:09 - and if we click it and we say okay there
304:12 - we go it deletes the the comment and
304:14 - with hopefully no errors
304:17 - yes no errors cool
304:18 - all right let's add a input here so that
304:22 - if we're logged in we are able to post
304:24 - uh comments to this post
304:26 - all right let's go here actually right
304:28 - here just above the comments we're gonna
304:30 - say i'm going to open an expression and
304:32 - say
304:33 - if user
304:35 - because we want to be able um we only
304:37 - show the comment input if we're logged
304:39 - in so if we use a if user render the
304:42 - following and we'll have a card as well
304:44 - here it's going to be fluid
304:46 - and before we do any of this let's
304:49 - create the
304:51 - create comment mutation
304:53 - so let's go down here
304:55 - let's say const
304:58 - let's call it um or submit makes more
305:01 - sense
305:02 - uh it doesn't matter this name but
305:05 - so uh submit comment mutation
305:09 - equals
305:10 - gql
305:12 - and here we'll say whoops
305:14 - we'll say mutation
305:17 - and it will take two things the post id
305:20 - uh which is an id and that's required
305:22 - and actually here a dollar sign
305:25 - and here we'll take the body and that's
305:28 - a string and that's required
305:31 - inside of here we'll say create
305:33 - comment
305:35 - and we will pass a post id which is
305:38 - going to be dollar sign post id
305:41 - and here we'll pass a body which is
305:43 - going to be dollar sign oops dollar sign
305:45 - body
305:46 - and we're going to get back
305:48 - a post so here we'll get the id
305:51 - because we need to get the id so that
305:54 - apollo knows which post to update
305:56 - and we need to get the comments because
305:57 - that's what's been updated in this
305:59 - object and we want to get id body
306:02 - created
306:04 - at
306:05 - and username
306:07 - all right inside of here we'll say
306:09 - comment count
306:10 - because that updates as well so we need
306:12 - to get it back and update it
306:14 - and yeah that's fine let's go
306:17 - way up here underneath here we'll say
306:20 - const and will this
306:23 - array destructor the structure
306:26 - submit comment from
306:29 - use mutation and we got used mutation no
306:31 - we don't let's get that
306:33 - use
306:34 - mutation from react polar hooks and here
306:38 - we'll say mutation
306:40 - and we'll pass the submit comment
306:42 - mutation
306:44 - and we're going to have a
306:46 - an object here
306:48 - i have an update function
306:51 - or just a regular function an arrow
306:55 - and here we'll uh what we need to do is
306:57 - actually we need to as well create a
307:00 - comment state variable so we'll say
307:03 - const
307:04 - and i'll have a comment
307:06 - do we have your state actually we need
307:07 - to use state
307:09 - use state
307:11 - and here we'll have a set
307:13 - comment
307:15 - whoops
307:16 - equals use state
307:19 - and the original state of the comment is
307:21 - just an empty string
307:23 - all right so
307:24 - we want once we submit the comment we
307:26 - want to empty the uh the input so here
307:29 - we'll say set comment
307:32 - back to an empty string and we need to
307:34 - pass the variables for this mutation so
307:36 - variables
307:38 - is
307:39 - this object with the post id
307:42 - which is just this post id so we'll
307:45 - leave that like that
307:46 - and with the body of um comment
307:50 - this one right here
307:51 - there's something wrong here i'd put
307:53 - double colon all right
307:55 - that's fine so everything's fine here we
307:57 - just go back to our mock-up here and we
307:59 - actually add oops where is it
308:03 - oh right here
308:04 - oh yeah right here it closed itself
308:06 - that's why it confused me
308:08 - all right so here we'll close the card
308:12 - here we'll have a form
308:14 - actually before we need to to have like
308:16 - a sort of paragraph that says post a
308:18 - comment
308:20 - and here we'll have a form
308:23 - uh do we have form
308:25 - yeah we don't so here we'll say
308:29 - form
308:30 - and let's go back down here inside the
308:33 - form we'll have an input
308:35 - um thing is i want to use form input but
308:38 - there's a problem which i'll uh i'll
308:40 - explain later why i'm using just the
308:43 - regular material sorry not material ui
308:46 - semantic ui
308:48 - css i'll explain later so here we'll
308:51 - just say div with a class
308:53 - of
308:54 - ui
308:55 - action
308:57 - input
308:58 - oops input
309:00 - and fluid
309:01 - which is kind of like the equivalent of
309:03 - using
309:05 - field input or input or rather form
309:08 - input
309:09 - so here we'll have a traditional html
309:11 - input
309:12 - and here we'll have a type of
309:15 - text
309:17 - and a place oops place
309:20 - holder
309:22 - and we'll say comment dot dot i have a
309:26 - name
309:28 - we will say just comment like that
309:31 - will have a value
309:34 - which will be the state variable comment
309:38 - we'll have an unchanged
309:40 - on change
309:42 - we can just inline it here we'll say
309:44 - event we'll take an event the event and
309:47 - we'll say set comment
309:50 - to
309:51 - event dot target dot value
309:55 - like that
309:57 - all right
309:58 - let's close this input
310:01 - and here we need a submit button so say
310:03 - button
310:04 - type
310:06 - submit
310:08 - and here we'll have a class name
310:10 - of
310:12 - uh ui
310:14 - button
310:16 - and teal for the color teal
310:19 - and here we'll say disabled if
310:23 - the comment
310:25 - uh if there's no comment there's no
310:27 - nothing written in the input field i
310:29 - want this button to be so disabled to
310:31 - not have to deal with the validation
310:33 - so if comment.trim equals an empty
310:36 - string then this button will be disabled
310:38 - otherwise it will be enabled and it will
310:40 - be clickable and if it's clicked we'll
310:43 - say so we'll say on click
310:45 - submit
310:47 - comment
310:49 - all right
310:51 - here we'll say submit
310:54 - all right that's gonna that should work
310:56 - fine
310:57 - it should trigger the submit comment
310:59 - and that will send a submit comment
311:02 - mutation with the variable comment which
311:04 - has changed because we typed stuff
311:06 - all right let's save this and let's make
311:08 - sure there's no errors there isn't sweet
311:11 - let's go back here
311:13 - and
311:14 - oh that looks weird
311:16 - let me make sure
311:18 - i got everything right
311:22 - oh yeah because everything inside of a
311:24 - card needs to be in a card content so
311:26 - let's cut everything and say card
311:28 - dot content it gives it that padding
311:31 - amongst other things
311:33 - let's paste everything back
311:35 - save let's go back to our app there we
311:38 - go that looks much better
311:40 - now
311:41 - if i write something now this is
311:43 - clickable and if i press enter nothing
311:46 - happens
311:47 - all right let's uh inspect
311:49 - so many errors
311:51 - uh error code 400 response not
311:54 - successful
311:56 - let's check out what happened with the
311:57 - actual
311:59 - so let's go to apollo mutations and we
312:03 - get this mutation
312:04 - the body is okay and the post id is
312:07 - correct
312:09 - um
312:11 - let's try to run this mutation
312:15 - strange
312:17 - post id
312:18 - okay post id
312:20 - variable post that is used expecting
312:22 - type string really
312:26 - uh let's go to our graphql
312:29 - type definitions create comment oh i
312:32 - made a mistake here post id instead of
312:34 - putting that i'm expecting an id i put
312:36 - i'm expecting a string well i'm not
312:38 - going to change it here because for
312:40 - those of you that are just doing the
312:41 - react bit who will you'll be maybe
312:42 - confused or something
312:44 - i'm just gonna go to the
312:46 - um this is just a patch by the way if in
312:49 - an actual app i'm not gonna do this uh
312:51 - fix like this i'm just gonna change this
312:54 - actually not delete it's the create
312:56 - comment or submit comment here i'm just
312:59 - gonna take uh change the type to string
313:03 - all right that work i mean that runs
313:05 - let's go here if i type some
313:08 - some random
313:11 - comment and i click enter there we go
313:14 - it's uh it's submitted and i get it here
313:16 - and i can delete it and i can delete it
313:19 - and if i keep typing comments it keeps
313:21 - adding them without any problem and we
313:23 - have no errors sweet
313:26 - all right so there's one little problem
313:28 - that bothers me is that once we type
313:30 - something and we click enter this gets
313:32 - emptied but this field is still um
313:34 - active like kind of um i can still type
313:37 - stuff i don't want it to do that i want
313:38 - it to be kind of go back to this state
313:41 - blurred
313:42 - all right so
313:43 - and this and here i can explain why i
313:46 - did this approach where i just used an
313:48 - input because now i can give it a
313:50 - reference so we'll say ref equals
313:53 - say comment
313:55 - input
313:56 - ref
313:57 - because i can't give a reference to the
314:00 - form input
314:01 - component of a semantic ui react because
314:04 - that's actually a react functional
314:06 - component
314:07 - all right so let's actually create this
314:09 - reference let's copy that let's go to
314:12 - the top
314:14 - and right here underneath user we'll say
314:17 - const comment input ref equals
314:20 - use ref
314:22 - and initially you'll just pass it the
314:24 - value of null and we need to get user f
314:26 - so here we'll say
314:28 - use ref from react
314:31 - and right here we're just going to say
314:34 - actually
314:35 - not here and the submit comment after we
314:37 - set the comment to an empty comment
314:39 - we're just going to say
314:41 - the reference to that input dot current
314:44 - dot blur
314:46 - like this call it like a function like
314:48 - that and that's going to blur the input
314:50 - once we submit oops once we submit that
314:54 - so
314:55 - right here
314:57 - uh yeah here i'll type a comment and
314:59 - i'll submit it and there we go it
315:01 - becomes the
315:03 - like out of focus like blurred if i do
315:05 - that again it blurs out the comment um
315:09 - comment input
315:10 - sweet i think that's it for this video
315:14 - yeah let me check yeah that's it
315:18 - all right sorry guys by the way if i'm
315:20 - like kind of i sound less energetic and
315:23 - excited about stuff i am excited but i'm
315:25 - really really tired so
315:30 - hello class welcome back
315:32 - so this video is going to be one of two
315:34 - last videos in the series um this one is
315:36 - very going to be a very brief one where
315:38 - we implement pop-ups and i'll explain
315:40 - them in a second and in next one we're
315:42 - going to have a deployment so we're
315:44 - going to deploy both the back and then
315:45 - the front end of our application to
315:47 - heroku
315:48 - so back to the pop-up thing so what i
315:50 - noticed right now in our app is that
315:53 - most of our buttons are just icon
315:55 - buttons these buttons right here the
315:57 - like the comment delete etc
315:59 - the only problem with this is that
316:01 - there's no text and some users might be
316:03 - confused as to what this button does so
316:05 - what we can do is um introduce these
316:07 - tool tips these pop-ups that if you
316:09 - hover over it tells you what this button
316:11 - does of course you can do many other
316:13 - things with them so the idea behind this
316:15 - is to improve user experience and make
316:17 - your app more
316:18 - more easy to use and more
316:21 - intuitive
316:22 - so there's more complex implementations
316:24 - of pop-ups for example this one right
316:26 - here that shows info about the user
316:28 - actually this could be a cool challenge
316:29 - for you that you can implement where if
316:32 - you hover over this image it tells you
316:34 - since when this user has signed up or
316:36 - you can show any other things and of
316:38 - course this you can embed any html in it
316:40 - you can
316:41 - see here the
316:42 - show your rating and there's some other
316:44 - cool implementations um of the pop-up uh
316:47 - for now we're just gonna use the basic
316:48 - one to display some text so let's get to
316:51 - that all right so let's go to our code
316:54 - base oops now you my sql let's go to the
316:57 - code base uh make sure both the server
316:59 - and the client are running as per usual
317:01 - i'm going to close this console
317:04 - uh first i want to start with the
317:07 - comment button so here i want to say
317:08 - comment on post when i hover over it so
317:11 - let's go to the postcard
317:13 - and here
317:15 - we're going to import pop up from
317:17 - semantic ui react
317:19 - and let's go
317:21 - so the way it works is that you
317:24 - basically wrap your um
317:26 - your element that you want to
317:29 - use as a trigger when you hover the
317:30 - pop-up and you put this pop-up and you
317:32 - put your element inside of the trigger
317:35 - component or attribute and or prop
317:38 - rather
317:39 - and you have your content here which is
317:41 - what the pop-up says
317:42 - so let's go and actually apply this
317:45 - so we have our
317:47 - button here it's the comment uh button
317:50 - so we can take all of this or actually
317:52 - just type here say popup
317:55 - and the
317:56 - content
317:58 - content
317:59 - will say
318:00 - um comment
318:02 - oops
318:04 - comment on post
318:06 - and here we'll have a trigger which
318:08 - triggers this and the trigger will be
318:10 - all of this button right here so we can
318:12 - just cut this and paste it here and
318:14 - let's close this tag let's save to let
318:16 - prettier format and let's have a look at
318:18 - it so let's go to our app
318:21 - so this is our comment button and there
318:22 - we go we got our pop-up but i don't like
318:25 - the white pop-up because our background
318:26 - is already white so i'm going to use the
318:28 - inverted
318:30 - version of it to make it be black with
318:33 - white text so we are right here we can
318:35 - just add this prop inverted
318:39 - and save
318:40 - and go back
318:42 - and there we go i think this is a better
318:43 - contrast for our application all right
318:46 - let's do the same for the like and the
318:48 - delete buttons so
318:50 - i'll start with the delete one so let's
318:52 - go to delete button here
318:53 - let's close that
318:55 - so our button is right here
318:58 - so we can just
318:59 - we need to import popup from semantic ui
319:02 - first so pop up
319:04 - and here we can uh cut this button for
319:07 - now
319:08 - and here we'll say pop-up
319:10 - and
319:11 - we'll have content
319:13 - and this will say delete
319:16 - post
319:17 - i have a trigger
319:19 - and in the trigger we paste back our
319:20 - button and of course we add inverted
319:23 - to uh have it um be black all right
319:26 - let's save
319:28 - let's look at our delete button and
319:30 - there we go it says delete post
319:32 - um one problem with this though because
319:34 - we're using the delete button for the
319:35 - comments as well and it will still still
319:37 - say delete post here while it should say
319:40 - delete um
319:43 - thing comment
319:44 - we can make take a um
319:47 - a message but for our use case we only
319:50 - have two things so we can have a
319:51 - conditional here so where are we right
319:54 - here
319:55 - in the content we can make it dynamic
319:58 - and what we're going to do is we know if
320:00 - we have a comment id that means we're
320:01 - deleting a comment
320:03 - a comment if we don't it's a post so we
320:05 - can say
320:07 - comment
320:08 - id
320:09 - so a ternary operator so if we have that
320:11 - that means we're deleting a comment so
320:13 - we'll say delete
320:15 - comment
320:16 - else that means we're deleting a post so
320:18 - we'll say delete
320:20 - post like this
320:22 - save uh why is this
320:25 - happening squiggly
320:26 - oh sorry this um
320:29 - this should go on the content my bad
320:32 - not the inverted the inverted is just a
320:34 - bullion prop
320:35 - and here it says delete post and here it
320:38 - says delete comment cool so that's
320:39 - working
320:40 - uh we'll do the same for the like now
320:43 - one thing that i noticed is that we're
320:44 - using inverted each time and we're kind
320:46 - of typing the same thing and it's taken
320:49 - multiple lines of code and we're going
320:50 - to use it in multiple instances so we
320:52 - can outsource this into its own
320:54 - component
320:56 - i mean maybe this is not the best use
320:57 - case for this but this is just to show
320:59 - you a good practice of how to outsource
321:01 - these mini
321:03 - elements that you have shared in
321:05 - multiple places in your app so here
321:07 - we'll create a new file in the util
321:09 - folder and we'll call it my
321:10 - popup call it whatever you want
321:14 - so here
321:15 - i'll say of course we need to import the
321:17 - pop-up so we'll say import popup
321:20 - from oops
321:23 - from
321:24 - semantic ui react
321:27 - of course we need to react itself
321:33 - here we'll have our function so function
321:37 - my pop-up
321:39 - i will take props
321:42 - and it will return
321:44 - the pop-up
321:47 - and our pop-up is always inverted so
321:49 - let's say invert it here
321:51 - and we'll have content actually we can
321:53 - destructure from the props so we want to
321:55 - pass the content we can pass whatever we
321:57 - want but we only need content for now
321:59 - and we want to pass uh children
322:02 - because that's where the trigger element
322:05 - we need to pass an element for the
322:07 - trigger prop so here the content will be
322:10 - content from props from the props and
322:13 - the trigger
322:15 - will be
322:17 - the children
322:18 - so whatever that's inside of this
322:21 - component
322:22 - here of course we need to export
322:24 - default
322:26 - my
322:27 - pop-up
322:29 - save this
322:30 - so let's go to the delete button
322:33 - let's remove this import and here we'll
322:36 - have our relative import so we'll say
322:39 - import my popup
322:42 - from go back one level to util slash my
322:46 - pop-up
322:48 - and here we replace pop-up with my
322:50 - pop-up and the content will be the same
322:52 - but we don't need to say inverted
322:54 - anymore and this trigger stuff will be
322:58 - in the children so here we'll have
323:01 - actual content inside of our
323:03 - um my popup element
323:06 - and here we'll put our trigger stuff as
323:08 - a child for this component
323:10 - all right let's look at our app
323:13 - let's refresh just in case and it still
323:15 - functions the same
323:16 - all right let's uh implement the same
323:19 - for the
323:20 - uh what is it the comment button so here
323:23 - we'll remove the pop-up and actually you
323:25 - can just copy this line from here
323:27 - or from here
323:29 - the import my pop-up
323:32 - i would have typed it already if i
323:33 - didn't just go to copy and paste it but
323:35 - whatever so here we'll say my
323:38 - pop-up
323:40 - and here the content will be the same
323:42 - it's static and we remove all that from
323:44 - the trigger and
323:46 - we put it inside
323:48 - my pop-up here
323:50 - paste
323:51 - just to make sure that it's still
323:52 - working
323:57 - okay it's not working inside of here we
323:58 - need to investigate this
324:01 - so
324:03 - oh yeah actually that's because it's
324:04 - coming from the single post
324:06 - that's a different um it's different
324:08 - it's here it's from here so in the
324:10 - single post
324:11 - let's uh do the same import oops
324:14 - actually i had a different thing in my
324:16 - clipboard so here we'll say my pop-up
324:20 - from
324:21 - back to util to my pop-up
324:24 - and let's look for that comment button
324:27 - should be
324:30 - yeah it's here so all of this so we can
324:32 - just copy all of this button
324:35 - and here we'll say
324:37 - my
324:38 - pop-up
324:39 - and the content will be
324:41 - the same as the other one so comment on
324:44 - post
324:46 - and the um doesn't have a trigger we
324:48 - will just have content
324:50 - child content inside of it
324:53 - and there we go we have comment on post
324:54 - so let's do the same for like let's go
324:57 - to the
324:58 - so that will be here
324:59 - in the actual
325:01 - in a postcard
325:02 - or excuse me in the like button so here
325:05 - we'll
325:06 - import that
325:07 - so import
325:09 - my
325:10 - pop-up
325:11 - from
325:14 - util slash my pop-up
325:17 - or your pop-up
325:19 - so here
325:20 - this like button
325:22 - we can just cut this let's say
325:26 - my pop-up
325:28 - and here the content as well is dynamic
325:32 - because um it can be for liking or
325:35 - unliking so what we're gonna do is we're
325:37 - gonna say liked
325:38 - and do a ternary so if it is liked the
325:41 - tooltip will say unlike
325:43 - unlike
325:45 - else it will say um like
325:48 - or you can put unlike post or like um
325:51 - post it's up to you
325:53 - all right so we paste back actually this
325:55 - should should be in an expression in
325:56 - curly braces and let's save
325:59 - let's look at our app
326:00 - there we go it says unlike and if i like
326:02 - uh if i unlike it says like again cool
326:05 - it's switching
326:08 - hello class and welcome back to the last
326:11 - class in this series where we deploy our
326:13 - application and have it live on the
326:15 - internet so i might have misled you in
326:18 - the last class by saying that we're
326:20 - going to deploy both the front end and
326:22 - the back end on heroku we're not going
326:23 - to do that we're going to deploy the
326:24 - back end on heroku and the front end on
326:27 - netlify which is something that i've
326:29 - used on this channel before and i've
326:30 - used for personal projects before it's
326:33 - pretty cool it's really easy to start
326:34 - with you just log in with your github
326:36 - and literally like two clicks and you
326:38 - deploy your front-end app
326:40 - and
326:41 - in terms of the back end we're going to
326:42 - use heroku like i said it's really easy
326:45 - as well to get started with i'm not sure
326:48 - if it's to be honest if it's something
326:50 - that people use a lot in production
326:51 - personally i would use something like
326:53 - aws or
326:55 - even google cloud or what is known as
326:57 - firebase uh but i don't know maybe they
327:00 - have some good pricing you can check
327:02 - that out for yourself but for us we're
327:03 - just prototyping just you know it's a
327:06 - hobby it's a project of passion i should
327:08 - say all right so let's actually get
327:10 - cracking okay first things first i
327:13 - noticed that there are certain
327:15 - things that need to be fixed about our
327:17 - in our code base first is
327:19 - i noticed that in the package json here
327:21 - on the server there are certain um
327:24 - dependencies that are for the client so
327:26 - we need to move this to the client so
327:28 - i'm going to do here on the
327:30 - on this on the server level i'm going to
327:32 - say
327:33 - npm
327:35 - uninstall
327:36 - um
327:37 - react
327:39 - router
327:40 - tom
327:41 - semantic
327:43 - ui
327:45 - css
327:46 - and semantic
327:49 - ui oops
327:50 - semantic
327:52 - ui
327:53 - react
327:54 - so we need to move these can i copy from
327:56 - here yeah i can copy from here okay so
327:59 - we need to move this into the client so
328:01 - i'm going to say cd client and say npm
328:04 - install
328:05 - and uh paste that in
328:08 - and
328:09 - that should be fixed
328:11 - so
328:12 - one other thing so in the index i
328:14 - noticed here when we connected a
328:16 - database uh we don't handle like we
328:18 - don't catch an exception or an error if
328:21 - it happens
328:22 - that's not good because um
328:25 - you know this can actually crash your
328:26 - server and your app wouldn't even run at
328:28 - all so here we're gonna say we're just
328:30 - gonna say console.error
328:33 - the error
328:34 - uh it's not going to change a lot but we
328:36 - catch the uh the error if it happens
328:39 - 16 000 vulnerabilities this this npm
328:42 - order is getting out of hand anyway i'm
328:44 - going to ignore this vulnerabilities
328:45 - thing for now
328:47 - um one more thing i want to change is
328:49 - the
328:50 - port
328:51 - so where's the port
328:54 - right here so it says 5000 it's a static
328:56 - port but
328:57 - in actual environments deployment
328:59 - environments we could have like an
329:01 - environment variable that holds the port
329:03 - and we might need to use that instead so
329:05 - i'm going to do i'm going to say here
329:07 - const port equals
329:09 - oops i'm going to take the environment
329:11 - variable so we're going to say process
329:13 - dot env and this is how you um access
329:16 - environment variables uh port
329:19 - like this
329:20 - um or
329:22 - so where's the ore right here the pipe
329:24 - thing or 5000 meaning if this is null
329:28 - we're going to get 5000 and here instead
329:30 - of 5000 we're just going to say port
329:33 - all right so that's fixed um
329:37 - i think we're done with fixing stuff
329:39 - all right so one thing that i'm going to
329:41 - do we can actually deploy both of them
329:43 - um like in one code base like the front
329:46 - end and the back end but i've found
329:48 - certain problems that happen on netlify
329:50 - where if you have like a subdirectory
329:52 - that contains actual app there are
329:54 - certain shenanigans that we could avoid
329:56 - by just separating the client and the
329:57 - server to their own repositories i mean
330:00 - it's better for separation of concerns
330:01 - anyways so i'm gonna do i'm gonna go
330:03 - back to my desktop so i'm gonna cd twice
330:06 - i'm gonna create two files or folders
330:09 - rather directories so make the i'm going
330:12 - to say
330:12 - mang
330:14 - client and mug
330:17 - server
330:19 - cool so we have those repositories
330:22 - uh let's go to our desktop actually i'm
330:24 - going to open this
330:25 - folder
330:26 - so here i'm just i'm going to need the
330:28 - stuff for the server so let's select
330:30 - everything except for client and node
330:32 - modules
330:33 - uh copy that and then in the server um
330:36 - yeah in the merge server here i'm going
330:38 - to paste them and the client stuff
330:41 - everything except the node modules and
330:43 - paste the client stuff here oops paste
330:47 - cool so we got the client stuff here and
330:48 - the server stuff here
330:50 - all right let's create let's start with
330:51 - the server let's create a repository for
330:53 - this
330:54 - on github
330:56 - so oops not here
330:57 - let's go to
330:59 - github
331:01 - and here i'm going to create a new
331:03 - repository
331:04 - i can make it public or private doesn't
331:06 - make a difference
331:07 - so here i'm going to call it moong
331:10 - actually i'm going to prefix it with
331:11 - clast
331:12 - i'll probably delete this because it's
331:14 - not that
331:16 - important people won't need this so i'm
331:17 - going to say mung
331:19 - server
331:20 - and
331:21 - i'm just going to create the repo
331:24 - here i'm going to copy this i'll copy
331:26 - the ssh one
331:28 - it's the same but i think to push you
331:31 - can't do the uh the https one so here
331:33 - i'm going to open up
331:35 - git bash in the server directory
331:38 - i'm going to initialize the git repo
331:40 - actually get in it
331:42 - and here i'll say git add everything
331:45 - get commit
331:46 - oops if i can type
331:49 - all right so get commit
331:51 - i'm gonna say
331:52 - oops just in it
331:54 - i'm gonna now add the remote so i'm
331:57 - gonna say get remote add
332:00 - origin
332:01 - and i'm gonna need to paste that origin
332:05 - so here we're gonna double check say get
332:06 - remote dash v there we go that origin is
332:09 - added so we just now need to push the
332:11 - code so we're gonna say get push
332:14 - origin
332:15 - master
332:19 - all right so that's done so if we go
332:21 - here we refresh
332:22 - we see that our code is here
332:24 - all right let's do the same for the
332:25 - client and then deploy both of them so
332:27 - let's create another repo
332:30 - so here we'll say clast obviously you're
332:32 - going to say something other than clast
332:34 - if you want to say you can say that i
332:36 - don't mind all right so here classed man
332:38 - client
332:39 - create repo
332:41 - let's do the same thing grab this copy
332:43 - it
332:44 - and then go to the client
332:46 - uh
332:47 - open the terminal
332:49 - and here we need to say get
332:52 - in it
332:53 - i don't know why i'm adding that flag
332:55 - and
332:57 - and here i'm going to say get add
332:58 - everything
332:59 - get commit
333:01 - and i'm just gonna say init
333:04 - and here we're gonna say get remote add
333:07 - origin
333:08 - and because i don't have this button
333:10 - this like the inside button on my
333:12 - keyboard i have to like right click and
333:13 - put paste
333:14 - here we're going to say get push origin
333:17 - master
333:18 - and the same thing will happen to this
333:19 - repo for refresh
333:22 - we get our client wait we don't we do we
333:25 - do we get our client code here
333:27 - cool all right let's deploy our server
333:29 - code now so if we go to heroku actually
333:31 - let's create an account
333:33 - so sign up i've already done this but
333:35 - i'm going to show you how to do this so
333:37 - i'm going to put my name
333:39 - i'm going to put my email my class email
333:42 - so
333:43 - gmail.com
333:46 - company name not applicable professional
333:49 - developer
333:50 - united kingdom i'm gonna
333:52 - this doesn't matter it's just for the
333:54 - data collection stuff i'm just going to
333:56 - say no just there
333:57 - create free account
333:59 - and i'm going to now go
334:02 - in a side window and activate my account
334:06 - gmail
334:12 - there we go it says create new password
334:14 - i'm going to create a new password
334:24 - sweet click here to proceed
334:26 - all right so now that we've set up with
334:28 - an account um let's go back here
334:31 - i want to go to the documentation so
334:33 - documentation
334:34 - uh first of all we need to install the
334:36 - cli actually let's go to node and
334:39 - yeah getting started with on heroku with
334:42 - node
334:43 - so here introduction
334:45 - setup we need to install the heroku cli
334:48 - so if you're on a mac you just run this
334:49 - brew command you're on a linux you run
334:51 - this sudo install but if you're on
334:54 - windows like i am you just download this
334:57 - installer so i'm going to
334:59 - install it now yes
335:02 - next next
335:05 - and it's really simple you just install
335:06 - the cli and then you do this heroku
335:08 - login and uh it just opens up a
335:11 - browser window where you confirm your
335:14 - authorization and then that's it you're
335:16 - logged in
335:18 - i'm going to wait for it to install
335:20 - all right so that's done close it
335:22 - and i'm gonna close all this stuff here
335:27 - i'm gonna open bash
335:30 - so here i'm gonna say heroku
335:33 - login
335:35 - press any key to open the browser
335:39 - all right log in
335:42 - you are now logged in
335:44 - i should be logged in now
335:47 - how do i check actually
335:49 - well
335:51 - i think there's like a command to check
335:52 - but i'm just gonna keep going i'm gonna
335:54 - assume we're logged in yeah that says
335:56 - i'm logged in cool
335:57 - so stop that
336:00 - and now we need to get our app started
336:03 - now our app is already started we have
336:05 - the app so i'm going to browse into it
336:07 - so cd desktop
336:10 - and i believe it's smart server yeah
336:14 - server
336:15 - all right so this is our app now we need
336:17 - to push this to heroku so we go to
336:19 - deploy the app so we're going to say
336:21 - heroku create which creates an app now
336:23 - there's a lot of options that you can
336:25 - adjust here to change the name of the
336:27 - app and a bunch of other stuff but i'm
336:29 - just gonna go with the most basic uh
336:31 - deployment right now
336:32 - so in that repo here in the server we're
336:34 - gonna say hiroku
336:36 - create
336:40 - boom so that's done
336:42 - and now we're gonna say get push
336:45 - heroku
336:46 - master
336:48 - so now that everything is pushed
336:51 - okay so that's done
336:53 - now um let's go check our app where do
336:56 - we go actually
337:02 - apps where's apps
337:07 - or maybe in the command
337:09 - so here it says that this is the app so
337:12 - this is the endpoint for the app
337:14 - and let's paste that
337:17 - well it says error check logs
337:21 - so i'm just going to run roku logs
337:29 - okay now i know why because the npm
337:32 - start is using a dependency like a
337:35 - developer dependency i should have fixed
337:36 - that which is nodemon and instead it
337:39 - should just use the node index instead
337:41 - of nodemon that's not available during
337:43 - production so i'm just going to change
337:45 - this to node index and
337:48 - push this and hopefully that will fix it
337:50 - actually i should change it in the other
337:52 - in the other repo or in the other code
337:54 - base so let me open this
337:58 - and here i'm going to go to the
337:59 - package.json and change this start to
338:02 - just node index
338:04 - now let's open the terminal get add
338:06 - everything get commit
338:09 - and here i'll say fixed start
338:12 - script
338:14 - here i'll push to origin
338:17 - master
338:19 - actually i need to push to heroku master
338:21 - as well so get push
338:25 - heroku master
338:31 - all right so it's deploying that again
338:34 - all right so let's check out our app
338:36 - uh actually still deploying
338:40 - it's gonna give us the um the base url
338:42 - in a second there we go so let's
338:46 - click this control click this
338:48 - to open link
338:51 - we'll wait for it
338:52 - now obviously the performance on an
338:54 - actual paid account will be better than
338:55 - this you're not gonna have to wait this
338:56 - much this is just a test account it's
338:58 - just a free account just not charging us
339:00 - anything yet
339:02 - okay so that failed again and i checked
339:04 - the logs again and i made a boo-boo and
339:07 - it's uh right here so what is it
339:10 - so process existed because
339:13 - where's the error
339:15 - yeah it's right here process failed to
339:17 - point to port because actually
339:19 - apparently port has to be um
339:22 - all uppercase
339:23 - so let's go here
339:26 - let's make another change
339:28 - this could have been way smoother
339:30 - um so right here in the index.js
339:36 - so it's here port is all caps like that
339:41 - sorry about this guys but
339:43 - in real
339:44 - in real production things like this
339:46 - happen all the time so maybe not cutting
339:48 - them is actually giving you a better
339:50 - um
339:52 - a better like view of how things work in
339:54 - the real world so here i'm just i'm not
339:57 - even gonna push to
339:58 - um to github i'm just going to push to
340:01 - heroku master
340:04 - so now it's going to deploy again
340:07 - hopefully this time it works
340:08 - [Music]
340:09 - all right so let's control click this
340:12 - base url and i guess third time is the
340:13 - charm
340:16 - all right so we get get query missing
340:19 - but i believe this is just a like a um
340:22 - because this is just our graphql server
340:23 - i believe it's working so if we go to
340:25 - postman open a new tab and here let's
340:29 - send a request to this and as you
340:31 - remember graphql stuff is always a post
340:33 - request so let's go to the body we can
340:35 - use this graphql
340:37 - type of like body here
340:39 - here let's actually send like a get
340:41 - posts query
340:43 - i'm just going to get the body
340:46 - and the created at
340:48 - and start that query
340:50 - sweet we get 200 and we actually get all
340:53 - of our data so our server has been
340:55 - successfully deployed
340:56 - let's actually now deploy the client
340:59 - side of this
341:00 - all right so i'm going to close this
341:03 - close this
341:04 - and let's go to
341:07 - so here
341:08 - oh obs go away so in the client
341:11 - so let's open this
341:14 - now i'm going to make a couple of
341:15 - changes here as well so
341:17 - in the package json uh
341:19 - down
341:21 - down here i'm going to add something
341:22 - called a proxy because this is not on
341:24 - the same server like as the actual
341:26 - server
341:27 - so i'm gonna this is actually not super
341:30 - necessary but i'm gonna add it anyway so
341:32 - the proxy will be the base url of our
341:35 - app so here i'm just gonna copy that
341:37 - and go back and put
341:40 - here paste that
341:41 - and we're going to change something else
341:43 - so inside of our apollo provider the
341:46 - base uri for our
341:49 - api is that deployed app so we're going
341:52 - to paste that here as well
341:54 - so let's push these changes so i'm going
341:56 - to open the terminal say get add
341:59 - get commit
342:01 - and edited
342:02 - proxy and server
342:05 - base url
342:08 - let's push this
342:11 - wait have i added the heroku here
342:13 - actually no there is no heroku what am i
342:14 - saying
342:16 - all right so let's go to netlify
342:19 - and here you can sign up or log in i'm
342:21 - going to log in with my github account
342:24 - i already have like an app here deployed
342:26 - and here i'm going to deploy another one
342:28 - so i'll say new site from git
342:30 - and click github here
342:33 - and it's going to now authorize my
342:34 - github account or have authorized
342:36 - netlife to access my repos
342:39 - so
342:40 - i believe i named it clast
342:42 - monk
342:44 - client
342:46 - yes it's this one
342:48 - and we need the master branch and yeah
342:50 - we need to run actually this is all
342:52 - correct because the eventually when you
342:54 - build the app it's going to be in the
342:56 - build directory
342:58 - not in public actually so here we'll
343:00 - just say deploy site
343:03 - this will take some time you can click
343:04 - here to see what's actually happening
343:05 - behind the scenes in the deployment it's
343:08 - just going to install all the
343:09 - dependencies and build the app and then
343:12 - serve it from that directory that was
343:14 - specified which is the build directory
343:16 - so i'm just going to wait for this to
343:17 - finish and then carry on
343:21 - sweet so that's deployed successfully
343:23 - that's indicating by the indicated by
343:26 - the green color
343:27 - and we open our app and there we go so
343:30 - we get all of our content that's being
343:32 - served from our server and from our
343:34 - database and we get the app and it's
343:36 - fully functional so we can actually log
343:39 - in here
343:40 - if i haven't changed this password yeah
343:42 - it's 136.
343:44 - cool so we can log in we can post stuff
343:46 - it's working exactly like it worked on
343:48 - our machine guys so
343:50 - yes so this video has been a bit rocky
343:52 - has been a bit a bit of like errors i
343:55 - could have cut all this these errors but
343:58 - yeah this these things happen in the
343:59 - real world so yeah maybe it's better
344:01 - that i left them all right anyway thanks
344:04 - for watching guys this series has been
344:06 - exciting it's been uh sorry for the
344:08 - delay for the last video and i hope
344:11 - you've enjoyed it i hope you hope you've
344:12 - learned a lot uh please let me know in
344:14 - the comment sections any suggestions
344:16 - anything you want to learn or anything
344:18 - you want to
344:20 - dig into i'll
344:21 - happily make a video about it all right
344:24 - thank you very much and i hope to see
344:25 - you soon bye

Cleaned transcript:

well hello there welcome to this series where we make this beautiful simple application that you see right here that is uh akin to like a facebook or a twitter or any social media application where we allow the users to register or log in after they register and then create and share posts with other users and interact with the with those posts and those other users so if i were to demonstrate this app right now we could go to the register page which you see right here that shows us this form and if click on register you can see that we're going to be implementing validation so that's going to be done on the server side and represented on the client side as you see right here and i already registered so i can straight away go to login and have a user called user with a password of one through six so i hit enter and it logs me in and now i can have this form right here which allows me to submit a new post so i'm gonna do that here is my new post i hit enter and it immediately shows here and there's like a really simple slick animation that fades in like i said we can interact with these posts so for example i can like this post here and the in increments instantly and it changes color i can as well comment on it so i go here and i'll say yeah it's the new thing and i hit enter and it's posted and as you see anything that is posted by our own user will have this delete button right here which in this case is the delete comment and if i go back it's a delete post and if you click it it shows you this uh confirm model you click ok and indeed that post is gone so this application uses uh react on the front end so this is something that i hope you're at least a little bit familiar with if not it's okay this is a beginnerfriendly series i'm gonna go through every uh single thing that i use and explain it why i'm writing it in that way so alongside of react on the front end we're gonna be using semantic ui to style it and give it this very simple but still elegant uh style uh if you used something like bootstrap before you're gonna feel very comfortable using this it's a very similar kind of uh approach to the uh to styling but it has some extra elements and uh some simplicity to it and that's why i chose it for this series and uh in terms of the focus of the series it's going to be on graphql which is a query language that sits as an interface between our application and the server and the database and i'm going to explain in a little bit more about graphql so stick around for that but what is graphql well i'm glad you asked graphql is a query language that we can use as part of our serverside code and it sits on our existing api graphql is technology agnostic meaning that it doesn't care what programming language or database you're using whether your api is some code that fetches and writes data on a database or it's code that consumes another api and gets data from there as long as you shape the data properly according to type definitions defined by you it will receive and send data to the web client without any problems there are three types of graphql operations that we can perform queries for reading data for example fetching one or multiple posts and mutations for writing data which includes creating updating and deleting examples of this would be creating a post updating user details or deleting a comment um or deleting a like and subscriptions for listening to changes in our data in real real time this is done using websockets in the background and it's useful for things like chat or polling apps mostly you'll use queries and mutations when using graphql whether reading or writing data we always send a post request with a body that contains some information about what type of data that we want to get back or save on the database rest apis were created to have a conventional way of sending and receiving data between the client and the server but even though these conventions make rest apis easier to deal with there can be different types of resources and there can be different endpoint names and endpoint parameter variables etc graphql reduces the amount of information needed for developers to learn how to consume an api by having one main endpoint fewer operations and selfdocumenting apis this will become clearer as we start to implement it a lot of companies like facebook twitter paypal and many more are now using graphql in some of their services to benefit from the improvements that it offers over a traditional rest api the major advantage of using graphql is the control over the amount of data requested and sent back to the client let's send let's say for example in our home page of our app we want to fetch recent posts and we want to show a couple of things about them like timestamps body username and number of likes and comments using rest api we would send a request and get an array of posts each one looking like this and then display the details that we want and ignore the rest of the data that we don't need this isn't strictly speaking a problem but because in this example we don't need the comments and likes themselves just the number of them it would be better if we were to receive something like this by reducing the amount of data sent back from the server we decrease bandwidth usage and latency time we could actually do this by adding another endpoint that returns just that data and use that on the home page but this becomes a problem as we find ourselves writing more endpoints the more pages we have and which will drastically increase the amount of code that we have to write on the back end and we have to document all of these endpoints for our frontend developers or for anyone consuming this api you can now see why this approach isn't optimal graphql solves this by letting us send a post request to one endpoint and specify what resource we want in this case posts and what fields we want in this case everything except likes and comments we can also specify many more factors like what post uh what the post body contains if we were for example to search for a specific post or post by a certain user or a specific number of posts etc all of these can be done through one single endpoint and just by changing the request body itself so these are the tech that we're going to be using for this series basically mern plus graphql well mern if you will will use apollo server which uses an express server in the background or you can also use something like express graphql or graphql yoga they all do the job well but i personally prefer the tools that come shipped with apollo server like i mentioned this series will be a standalone and right after the series we'll implement the front end using react with hooks and context api and we'll use apollo clients there and the new apollo react hooks library to make sure that we write our app using the most uptodate features of the frameworks that we're using so i wanted to do a demonstration of the server that we're going to be building so this is our server application running at port 5000 uh you can have it at slash graphql or you can have it just at the base url it doesn't make a difference um so this is the graphql playground and one of the tools that we get from apollo server and here i wanted to show you some examples from our application that we'll build so this is an example of a query so right here you specify the type of operation in this case it's a query and then you specify the name of the query that we want to use depending on the type definitions that you have so i've already written this query get posts which returns us just that the posts from our database and here we specify the fields from that query that we want and these are of course defined as well in our type definitions that what each resource returns in terms of fields and if i press the play button here it's actually going to fetch from our database our data and returns it in a in this object inside of this data inside of this get posts object so each time we send a query our result is sent back in a object that has the same name as that query unless we have some errors and then we will get an object um errors right here and then we'll have our errors there so here as you can see we get exactly the data that we asked for id body all the way through a comment count and here to demonstrate to you the flexibility of graphql we can say just let's just get the id and the body and if we press play we get exactly that data so bear in mind that this is on the server right now that means none of this data has been sent to the client so the server gets this request and then on the server decides what data to fetch it fetches all of the data from the database and then it filters out the data that the user didn't ask for and then returns a smaller payload of data so here if you want to add more fields we can actually do control space and this tool self documents and it fetches automatically our types and knows what to expect so here if we forgot our fields we can just do control space and then click on create that and if i want to get the username now i add these two and i hit enter and we get those fields now as well now this tool is available for your frontend developer once you expose this once you deploy this app and you give this base url which will be something other than localhost if you deploy it live your frontend developer will have access to this tool and then we'll learn how your api works your graphql api works without you having to write any documentation they can just click on the schema tab and they will see all the queries and mutations available for example if they want to see how the get get posts query works they can click on it and they will see the type and the type of data each of the fields have and they will learn how to actually interact with your api without you having to write any documentation this is what i mentioned earlier by graphql being selfdocumenting now let's look at mutations so let me close this if we go here i've already written these two mutations for login and register if i were to run the login user or pass it of course i've already written the code for this saying that look at the login requires a username and a password and returns a couple of things one of them is a json web token that we will use on our client to authenticate the user and keep them authenticated for a period of time if i click here and i click on the login user um mutation there we go we get our token back which we will use later to access protected routes like creating posts or liking or commenting on posts and i've already like as well thought about validation and server validation which is an important thing for us to learn to validate the data and for example as we see here we already have a user with the username user if we were to try to register another user with that username and click here on register user we get errors and we get as well an array of errors right here and saying confirm password passwords must match actually it validated the passwords before the user if i were to put two matching passwords it will still have an error saying that the username is taken because it is taken and now if i solve all the uh the errors let's say user to which doesn't exist on our database and we say the email um well i set it up to be jane so i was meant to type jane here as a username and this should go through and we're requesting more fields than just the token and we click here register and there we go we get all the details back of from our user table record and we can use this on the client to authenticate and send protected route requests so yeah and by the way i didn't mean protected route and then protected operations since there's only one route when using graphql so i just wanted to demonstrate quickly our app and yeah this is of course we have more mutations and queries to build once we start building this app i hope that this gave you a clear understanding of what graphql is and that you're excited for building this project i know i'm excited about releasing this series thank you for watching and will see you in the next video cheers all right welcome to the first class of this series uh i decided to call them classes because lesson is way overused someone beat me to that and to be honest it sounds boring i wouldn't use lesson and video it's like everything is a video so i had to stand out okay all right enough of that now that you know what this project is about and what technology that we're going to use and why we're going to use it let's actually start to set up our development environment just to make sure to be on the safe side make sure you have node installed and npm i'm pretty sure you have it if you don't go to nodejs.org and download the latest stable version or the current one to make sure that you have it open up a terminal window and do node v and i have it i have 10 15 3 whatever and do mpmv to make sure that you have npm installed all right other than node we're going to use mongodb atlas which is a cool service by mongodb which lets us create one free cluster just because it's one it doesn't mean we're limited we can have as many databases and collections within that one cluster so yeah we're going to use this so go to mongodb.com and let's go to try free sign up for an account if you don't have one i'll sign up for one here as well so put my email my name misspelled my own name for the password and that's okay we need to agree guys all right let's create an account alright asks us to set up a couple of things i'll say i'm learning mongodb i'll select aws and select the uh the one that's nearest to you i'll select okay i don't have three tier in london so i'll select the ireland one if you're in america you're probably gonna select north virginia or or origin oregon i don't know what that is sorry americans i don't know what that reads like all right so make sure that you select stuff that's just the free tier you can sign up of course for a paid account it's based on uh it's hosted with aws so the performance will be great so cluster name i'm just going to give it cluster 0 that's fine i'll just say create cluster and there we go my cluster has been or is being created um while it creates let's create a user that we can use to connect to this cluster and edit databases and stuff like that so here let's go to security and then go to add new user here i'll give it a username say just classed like this and i'll have it auto generate a password actually i want to see that password because i'm going to need it and let's say add user make sure that your user if you want you can as well customize the role what what type of permissions they get read and write any database is okay for me but if you want to just lock it down to a specific database know that you can do that as well all right so one more thing that we need to do is go to ipwhitelist we need to as well give a certain ip address that we allow that ip address to connect to our database otherwise no machine is able to connect to this database so go to security ipwhitelist and go here add ip address you can add your current machine ip but i find the problem with this is that sometimes your ip changes and you fail to connect to it and you find yourself coming back to this dashboard and adding a new ip so as a just because we're in development i'm gonna click here allow access from anywhere which will allow any machine to connect to this cluster but in production of course that's not a good idea you only want your server to access your database all right so our cluster is still being created so i'll be back once this is done okay so our cluster has now been created uh let's leave it like that for now i'm gonna go to the desktop let's create our project i'm just going to create a folder here i'll call it merge like this and open it using vs code and here i'll open up the terminal window uh when i create uh actually we need to initialize an npm project so let's do npm init i'm just going to do dash y but you can as well write any details that you want i'm just going to leave it right like that i'm going to create two files so here i'll create an index.js and i'll create a dot get ignore file and by the way i'm going to initialize a get repository here and i'm going to have the pro the files for this project are going to be in a repository depending on whether i've finished the whole project and uploaded it on the github or not there will be a link in the description which is with each part of the video each class in its own branch so for example this would be class one and it will have the complete code for this class for this video all right so let me close this actually we need to install some dependencies so here we'll say npm install and we will need apollo server and graphql and mongoose that we will use to connect to our database so let's leave that to install i'll go to the index.js here i'll bring the apollo server so i'll say const apollo server equals require and i'll require apollo server like this which hasn't been installed but that's fine and here the thing is we need to have something called type definitions we'll say const type usually referred to as type defs like this and for this we need uh something called gql we can import that say const gql not from equals require and here we'll get it from something called graphql tag which is one of the the dependencies of apollo server so that's installed with apollo server here we'll say gql um and do backticks like this which is a tag template string and here we will write our types our graphql types and here we will start with type query and by the way to get um to get syntax highlighting inside of this ticks you need to install something called where is it it's right here graphql for vs code so this will have synth will allow you to have syntax highlighting inside of these backticks for graphql all right so here we'll have type query and inside of our types when we have the type query inside of here we will have all of our queries set them up and say what type they return so one of the queries that we're going to have just to test it out i'll call this say hi and it will return so kind of like typescript if you've used we need to say a return type for this it will return a string and we can add an exclamation mark to it that means it's required it has to return a string or we can leave it like that it's always better to have the required fields as required so you know you will have more type safety all right so here we need as well something else called resolvers so we'll say cost resolvers and what resolvers do is for each query or mutation or subscription it has its corresponding resolver so if this query is called say hi it needs a resolver called say hi which processes some sort of logic and then returns what this query returns so here we will say query again because we need to group all of our queries inside the query object and all of our mutations inside the mutation object so here we'll say query and we only have one right now which is this say hi so we can say say hi as a function and here we need to return we can have as well we can have it as an arrow function i think and for this it's simple enough to just have it as an arrow function so here this will just return or actually we don't need to the return keyword here it will just return hello world like this now we need to set up our apollo server actually let me close that here i'll say const server equals new apollo server and this takes two options for now the type definitions so you you see there is an option called typedefs and i can say the typedef is our typedefs but since this is es6 we don't need to do that it infers on its own if the key and the value are the same it will take that so and we have as well the resolvers which are called resolvers so this will do like this all right so now that we have our server instance we can actually start our server so we can say server dot listen and we can leave it like that or we can specify a port i'll specify a port and i'll say 5000 and this returns a promise so we need to say that then and we get a result object and there are a couple of things in this result object but we're not going to need them we only need one just um i'll show you so i'll say console.log once the server starts and i'll do backticks and say server running at and an injector variable here a template variable we say result or res dot url so this will log it to the console so that we can control click it and open our server all right uh like i told you just to show you that apollo server actually if you open your node modules and you go down here you'll see that express is installed it's only running an express server in the back we're not going to write any specific express routes but just to show you that it's actually using express uh in in the you know behind the scenes all right so here we can say node oops node index to run our index file and there we go we get server running at localhost 5000 and if we go to our um to our actually not 8000 we need to go to 5000 localhost 5000 there we go we get our graphql playground here we can say query to test out the query that we created we can do control space and it will tell us all the queries that we have right now which are just the say hi right now and you can also go to the schema and it will tell you what queries and mutations and subscriptions that you have obviously we have the just the one right now and of course you can go and it will tell you that this returns a string and explains what the string is of course you don't need that alright so here we can press play and there we go we get hello world simple as that and if we change it or like we can say hello world with a couple of exclamation marks we save and we stop and run the server again node index and we go back and we do control by the way you can do control enter to execute it and there we go we get this has changed now all right so let's actually connect to our database for this we're gonna need mongoose so here let's say const mongoose equals require mongoose so mongoose is the orm library object relational mapper which lets us interface with the mongodb database that we have so here at the bottom actually we need to connect to the database before we start our server so let's do here mongoose.connect and for us to connect we need an actual connection string and we can get that from our mongodb atlas dashboard so here we go to connect and do i have that password still in the clipboard i do call actually i need that password that i copied from earlier so i'm just going to paste it here and then i'll go back go to connect again and go to connect your application and grab this connection string so click copy here and it's better practice that you put these sensitive key data in their own file so here i'll create the file call it config click on gig config.js and here i'll say module.exports equals and i'll export an object i'll have a key db and this will hold the connection string so i'll do a string and paste that and here instead of this tag password i need my actual password so i'll cut that from there and put it instead of this password so that's my user that's the password that's the cluster the cluster address so we can connect to it and i'll go to the get ignore and of course we need to remove the node modules so that it doesn't track that and we need to remove as well the config.js so that if we push this code to a github repository or any or bitbucket or whatever we don't actually push this because this is sensitive data all right so let's save all files and here in the mongoose connect we need to bring that mongodb connection string so here we'll say const or actually we need to destructure it db equals require so from the same directory config.js like this all right so now that we have that string inside of here we need to say mongodb like that and here we need to pass some an object some options we only need this uh use new url parser otherwise it's going to give us some deprecation warning if we don't and this returns a promise so we need to say dot then and we don't need the result there's nothing there but then we actually do this server.listen so here we need to say return server.listen like this and import 5000 and then we need to as well chain this dot then to the end of this and then everything will run the same but except now it will actually connect to the database let's actually as well log something from here to just show that we've connected to the database successfully so i'll say console.log mongodb connected like this let's save uh stop this development server and say node index again all right so i get an error can't find module config.js oh because here it's an actual file and not a dependency so here i'll say node index again and there we go get no mongodb connected and server running at 5000. of course right now we're not doing anything to the database so we we're just connected without performing any operations all right so what i want to start to do now is to create the database models so that we can use them to interface with the database with so here i'll create a folder called models and inside of here i'll create the user model so user with a capital u dot js and this will hold details about the schema mongodb is schemaless but with mongoose we can specify a schema to have more safety when working with our server code so here i'll bring two things from mongoose so const and this structure model and schema with a capital s like this let's say equals require mongoose here i'll say const user schema equals i'll say new schema and here we'll pass it the fields and our user will have a username which will be unique to each user and here i'll say string now we could say on each entry that it's a string and it's required we could specify it here but because we're using graphql as a middleman we can use graphql itself to say that these fields are required or not so we will handle that on the graphql layer and not the mongoose layer so here we'll have a password for our user it's going to be a string as well we're going to have a username actually we've had the username i'm going to have an email it's going to be a string and a created ad which is i'm going to store it as a string you can store it as a date it doesn't make a difference as long as your code works well with it so here we'll say module.export and we need to export our model so module.exports equals model we need to call the model pass it a name so the name of our model will be user with a capital u and the schema it uses is going to be the user schema all right so now we're going to create another model for the post so we'll say post.js and here we'll bring the same stuff the model and the schema so we can copy that paste it here and we'll say const post schema equals new schema and we'll pass it a couple of things each post will have a body which is going to be a string and we'll have a username so who posted this which is going to be a string as well it's going to be the user's username it will have a created ad which is going to be a string now we can as well specify a default value for the created at here but we will do that on the graphql resolvers i prefer to do that on the graphql resolvers so here each post could have as well an array of comments so here we'll say comments and do like this square brackets as an array and here do curly braces to have an object and each comment will have a body so this will be a string it will have a username so who posted this and this will be a string as well and a created add a string as well so after comments we'll have likes it's going to be an array and we could just have user names but you could um it's better to give them a created at as well so that you can have some you know you can have some analytics on your application and know what's going on and when likes are being submitted and all of that good stuff all right so i'll give it a creator that which is going to be a string and even though that mongodb like i said is a schema less and it's a nosql so there's it's not uh doesn't have relations but the rm itself lets us have relations between our models now we don't have to do this but you could link your data models so i could as well say user here and link it to a specific user this post and then here we can say type this is going to be referred to another schema object so we'll say schema dot types like this dot object id and here we'll say ref and we'll pass it the table or the collection which is users so this allows us to later use mongoose to automatically populate this user field if we want using some mongoose methods all right so here we need to export this so we say module.exports equals model again we give the name of the model which is post and we give the schema which is going to be post schema all right now let's go back to our index let's import our post model so here we'll say const post equals uh why i'm separating these because it's it's just general convention that you keep your relative imports here and then your dependency imports up here so here i'll say require and go to the models folder models oops models slash post so now that we have the model uh what i want to do now is i want to create a query for fetching all the posts from the database i'll actually get rid of this say hi and say get posts here so this get post will get all the posts from our database and it's going to go to the collection posts and bring all the documents from there and return them back to our user but before that actually i want to create a post on our database so that we can fetch because there isn't any right now so let's go to our cluster and let's go to collections so here we have no collection right now let's click on add my own data let's create a database i'll just call this merg and collection we're just going to create the first collection call it posts let's click create let's insert a dummy document here it's going to give an automatic id here i'm going to give it a field body and this will say this is a sample post and i'm gonna give it i'm gonna give it another another field click this uh add this plus button here i'll give it a user name and this will say user click the plus button again and give it a created oops created add just give it some gibberish it's just a string after all we're gonna later have our code create these instead of just create them manually of course actually i'm just going to leave it like that say insert all right now that we have our document let's actually fetch it let's go to our code here our get posts let me close this terminal uh our get posts is going to return a type of uh post so it's going to return an array of posts so we do these square brackets and say post which is a graphql type that we haven't created yet so let's create that we will say our post so type post will have a couple of fields so we'll have an id it's going to be of type id like this and we put an exclamation mark saying that this is required we need to have it you will have a body of type string and it's going to be required you have a created ad a required string as well we'll have a username oops username of type string and you will have actually i'm just going to leave let's forget about comments and likes for now and let's keep it like that and here for our query so we have um get posts let's actually create a resolver for it i'm going to get rid of that say hi we don't need that anymore i'll say get posts and as a function like this and here we need to use our post model to fetch these posts so actually i'm going to use async await syntax so i'll add the keyword async before this function and here i'll say try because the thing is is like maybe your query will never fail but if you don't do this if you if your query fails it might stop your actual server which is not good so here we'll say const posts so let's first choose both we'll say await because this is an async operation post our model dot find and uh so yeah this is it it's don't find if you don't specify any uh condition it's gonna find all of them it's gonna fetch all of them so here we're just going to say return posts and here we'll say catch if we get any error we'll say throw new error and we pass it that error all right this should do let's save all files make sure you save all files and let's stop our server and start it again say node index all right it runs without any errors and we go to our local host 5000 you can press this refresh sometimes you need to refresh it to get the new queries and here it's it's having error because this query doesn't exist anymore so we can use the other query which is get posts and it gives us some intellisense so we need to open these curly braces and specify which fields we want so here if we press control space it tells us that we can get these fields which is exactly like the type that we defined so let's actually get all of these fields so select all of them body what else do we have created add and the username and let's click control enter and we get an empty array all right let's check our code interesting let's check our database oh okay i know why my bad i forgot something so let's go to our config right here it says test but this is actually the database name we need to give the database name uh the db name is merg it's and it's not test and by the way even if you don't have a database on atlas and you just give a name here and you perform persistence like you create a document it's actually going to create this database if you have the permissions for it so i'm going to stop the server and run it again and this time it should work all right let's go and let's run the same query and there we go i get the post that we just created and yeah so the query is working all right so this is it for this video hey welcome back to class number two all right you might have heard the terms ui and ux and those have to be good in your application but have you heard this term called dx let me know in the comments if you have if you haven't dx is developer experience and right now we don't have a really good one because a our type type definitions are all in the index and these will grow bigger and our resolvers as well are an index and each time we have to restart our server we have to do it manually let's fix these before we dive into more functionality so these type devs will be in their own file so here i'll create a folder called graphql and here i'll create a file called type defs dot js so here i'm going to cut these typedefs paste them here we need to bring gql so we're going to say const gql equals require you can import it from apollo server as well because graphql tag is just a subdependency of that as well and we need to export this so we'll say module dot exports equals gql blah blah blah all right so here we need to import those so here we'll say cons type defs equals require and we require what is it graphql slash type defs and the resolvers as well and for the resolvers i'm going to divide them we're going to have the resolvers for posts in their own file and resolvers for users in their own file as well because otherwise we're going to have one massive file with all the resolvers so here i'll create a folder called resolvers i've said resolvers like 10 times resolvers resolves i'll create an index js and i'll come back to this and here i'll create a post dot js and uses js and let's go back to our index so here let's cut this actually let's just cut this or just this query remove this and here in the where is it the post let's say module oops module dot exports equals this object and it's going to have a query actually no we copied the query we just paste that in we need the post module or mod model so we'll say const post equals require uh we go back one level actually we go back two levels to model slash post all right and we need a way to combine all these resolvers so here in the index we want to import that post resolver so we'll say const of course it's the default um export so we can name it anything so we'll call them posts resolvers solvers like this all right here we get them from the same directory posts and uh let's import the uh the user's resolvers as well while we're here resolvers even though it's empty right now so we'll save from users and here we'll uh export this um object so let's say module.exports so this object will combine both of them we'll say query for now we have just query from post resolvers so we'll say we'll do the spread operator posts resolvers dot query and here we'll say mutation actually we don't have any mutations right now we'll just leave it like that and because right now we only have this one query all right so now our type devs are there and um our resolvers are there so we need to import these resolvers so we don't need this post model anymore we can get rid of that and say const resolvers equals require and we say slash graphql slash resolvers because uh it's in the index we don't need to say anything more and the names are still the same so everything should work the same we don't need gql anymore here and let's save everything let's stop the development server and actually now i want to install nodemon you probably have heard of this module or a library if you haven't it's just something that starts a node application and whenever we change any file within this directory it restarts the server for us so i'm going to say mpm oops npm install dash capital d as a so it installs as a dev dependency and say nodemon and here i'll write the script for it so i'll say the script start will say nodemon index.js or we can just say index all right i'll save that i'll wait for it to finish okay now that it's done we can just say npm start all right it started then let's test out our query all right oh it's so instant that i think that it's not actually sending it let me make sure yeah okay it is sending that query all right so everything is working the same now we can uh get going with the rest of the functionality so before implementing the rest of the crud functionalities on our posts like creating posts and editing them or deleting them let's actually create ways for our users to authenticate because the create and delete posts actions or resolvers have to be from protected user or authenticated users so let's actually start with registering users so first thing is we add an actual query for or mutation for that so here we'll say mutation or type mutation because this is making a change in our database so here we'll say register and here we can have input from our users as arguments and take that and do stuff with it in our business logic so here we can say that we can take a username a password a confirm password and email but we can create a type for that as well if we don't want this to be a massive line here so i'll say register input like this of type register uh register oops no register input with a capital r like this and i'll create that type here so i'll say and this is not a type this is an input which is a different type of type which is given as an input to um to a resolver for it to return something for us so here i'll say type register oops register input and this will have the four fields so username type string is going to be required a password type string required again a confirm password because again this is for the register form so we need two uh the confirm passwords as well so and we need the email as well we'll say string and it's required all right and this needs to return something so it will return a type user so let's create this user and it's required so let's say type user and this will have an id of type id and it will have an email type string and by the way even if we specify required it doesn't mean that the user has to get these you know this that means we have to return them from our resolver but the user can still opt out from not getting these so it will return an authentication token and it will return what else the username of the user which is a string and the created at all right so let's actually implement this resolver for this register and here i'll go here actually here let's add a mutation field mutation and this will take from the user's resolver that mutation object which we haven't created yet but we will so let's save this and close it let's go to our users here we'll need our user mongoose model so we say const user equals require and we go back two levels to models models slash user and here we'll say module dot exports and we'll export this object and for now we'll have a mutation and here we need to implement our resolver for the register so we'll say register and now this needs to take some input and we have four things that we can get in our resolver arguments so the first will be parent i'll explain these in a second the second is args arguments the third will be context and the fourth will be info most of the time we'll just be using args but parent is it it gives you the result of what was the input from the last step but here it will be undefined because there is no there was no step before this but in some cases you could have multiple resolvers so data goes from one resolver and then it goes to the other and then it goes to the other and then it gets processed in different ways and then returned to the user but here we don't need it so we can just say um underscore like this so it doesn't you know take up any space so arguments here this is these arguments from here it's this register input so args right now for this resolver will have a register input and inside of that we'll have these four fields and here we have context which i'll explain later you'll see what this does and info just has some general information about um some metadata that we actually almost never need all right so here inside of here we're gonna have a couple of steps what we need to do i'm gonna put a couple of to do's and come back to them so the first thing is we need to validate the data so let's say validate user data and this means like we could have empty fields so we need to make sure to to have server validation in case we have some problems like passwords don't match email already exists etc in our case emails are not um unique but usernames are so we need to check for that so we will do a special check for that because we need to check in our database so here we'll say make sure user doesn't already exist and then the first step will be to the hash the password before we store it in our database of course and create an authentication token so an auth token all right so we will skip the validation for now we'll come back to it later and let's first hash the password and return the data to our user for this we're going to install two packages so i'll say npm install first will be b crypt bcrib js and json web token so bcrypt will help us script the password and json web token will help us encrypt encode some data in a token and return it to our user so here we need to get that data that the user sent we can destructure it here but we can as well do it here i prefer this structuring from here so here we can say curly braces to destructure from the args and we need to further destructure the register input so we'll say register input colon and here we'll get our fields so we'll have our username we have an email the password oops password and the confirm password like this let prettier format it and now we have access to these four fields separately so here we'll say we'll edit the password we'll change the value to it to the hashed password so we'll say await because the bcrypt function the hashing function is actually asynchronous so we need to add as well the async keyword here to the function and we'll say await bcrypt actually we need to import it let's import both right now so we'll say const be crypt equals require b crypt js and we'll get the json web token so we'll say cons jwt equals require json web token all right so here we'll say and weight b crypt dot hash and this will take the password and it will ask us for the number of rounds usually 12 is a good number based on what i've seen so const here we want to form our user object so we'll say const new user equals and we'll call new user our model and we'll pass it the data that we have so the email will be email so we don't need to say email username oops user name and the password as well will be password so we keep these fields like that and we need to have a created at so this will be new date and we need to change the to iso string method to convert it to a string so here we'll say const result equals await a new user dot save to the database and now we need to return this data to the user but before that we need to actually create a token for our user so here we'll say const token token equals jwt dot sign and this will take some data like a payload to put inside the token and we want to encode the id so this will be result.id i want to encode the email this will be result.email and the username as well so res.username and uh here let's um we need to give it a secret and let's actually store this secret in the config file as well so we don't have it in our um in a git repository we don't make a mistake by sharing it with people so i'm going to import it before creating it i'll say const secret key like this equals require we go back two levels to the config file and let's go to that config file and create an entry here and say secret oops secret key equals some very secret key i don't know it doesn't matter this will be used as the um key to encrypt your uh encode your uh token so only our server will be able to decode this stuff here i'll give an array of options and actually here the secret goes here so secret key and the third parameter will be some options and i only need the option of expires in to give it a an expiration time which is going to be 1h for one hour so now let's say return here we want to spread the data of our user so we'll say spread res dot underscore doc where our document is stored i want to give the id because it's not by default in a doc so we'll say res id equals rest dot underscore id and we want to give the token as well so let's save all of this and see if this is working let's go to our app and here we can say mutation we can actually do this in a new tab same mutation and this will be register and we'll take a register input which is going to be this object that will have a username oops use the name of user i have a password of one two three through six a confirmed password of one through six and an email of user email.com let's send this oh actually we need to get some fields back so let's open curly braces and let's let's get all of them so the id email token uh what is it um username and what else the created ad right let's send this there we go we get our id email everything our authentication token and if we look at our database and we refresh we see this user's collection was created and it's got one document which has the details for our user cool so we're now successfully registering users but of course right now if we send this request it will register another user with the same username of course we don't want that so let's actually make make sure that this doesn't happen so let's go to our app right here we need to get a user so um so this is done so we can remove this to do and by the way you can get this to do what is it to do highlight extension to have this um highlight that all right so here we'll say const user construct user equals user dot find oops find one and here we need to pass a filter or a condition and this condition will be the username has to be like the username so we can just pass it like this and of course this is asynchronous so we need to say wait and here we'll say if user so if there is a user this is not going to be null if not it's going to be null so if user then we need to return an error because user already exists uh we can just say throw error but we can as well use specific errors from apollo so we we can import those so we say import i'm going to import the user input error this will become useful when we uh it's because later apollo client will be able to recognize the type of error and handle it differently so here we'll say require apollo server and here we'll throw we'll say throw new oops throw new what is a user bad input or input error and this will say username is taken and actually we're going to pass a payload for with our errors that we will use as well on the client so the payload will have an errors object and inside of here it will have a username key and this will say this username is taken this errors object will be used later on our front end to display these errors on on the form and actually right here this info and context we're not using them so we can just omit them we we still have to say to use the parent one to have the access to the args all right let's save this and let's check on our playground and let's send this request and there we go it says username is taken and if i do another username say john um we can keep everything else the same and we send i actually registered john and if i send again it doesn't register john because that username is taken all right let's now implement some validation as well because right now if we just submit some empty fields it's still gonna register the you know a user with an empty username and all that stuff of course we don't want that so let's go here let's create a folder here called util for utilities and i'm going to create a file inside of it called validate validators oops validators dot js and here i'll import a function so here we'll say module.exports or export rather and here i'll call it validate register oops register input and this will take the four fields so username email password confirm password and that's it and they will um do okay this i said this to be an arrow function so i'll do this and so here we'll do const errors equals an empty object for now and we'll say if username dot trim equals an empty string so if username is empty we'll say errors dot username equals username must not be empty here let's copy this let's do the same thing for email so ctrl d here and say email so if email is empty we'll say email must not must not be empty but as well even if email is not empty we need to check if it's a valid email so here i'll say const regex and i'm gonna match this string to a regular expression that checks that this string is an email i'm going to put this in this description you'll find this in the description so now i'm just going to paste it in and here i'll say if not email dot match and we pass this regex so if it doesn't match this regular expression that means it's not it's not in a format it's not in a pattern of an email so we'll say actually not errors errors dot email equals email must be a valid email address like this we need to check the password so we'll say if password dot trim equals uh empty string actually for password we don't add the trim we can have white spaces as part of the password that's fine and we'll say errors dot password equals um password must not be empty and if the password is not empty we need to make sure that the password is the same as the confirm password so here we'll say else or say else if password does not equal confirm password so we'll say errors dot confirm password equals passwords um must match if you've seen any of my tutorials before for validation this is a pattern that i always use so here i'll say return and we're gonna return the errors and a value for valid and this will be object so this valid if it's true that means there's no errors so we'll say object dot keys and we pass the errors dot length so if the length of object.keys of errors is smaller than one that means there is no errors inside of this so the for the data is valid so let's save this let's go to our users and bring this in so here we'll say const validate what is it register input and this is const equals require and go back two levels to util slash validators and actually we need this structuring because it's not the default export and here under here we'll say const and we'll get the valid and errors from so equals validate uh register input and we want to pass all these fields so here we'll pass them like this and we get that data so we remove the todo's because this is done now and here we'll say if not valid then we want to return these errors that means we have some errors so we'll say throw new user input error and we'll just say errors here this doesn't matter but we want to pass a payload with the object errors so with the name errors and with the value of those errors so here we'll save let's check our app and here we send empty fields and we'll check it says validate register input is not a function i just mis misspelled this register let's try again all right we get errors and we get that the username is not um must not be empty and the password must not be empty so if we put some stuff in the username we'll get the password must not be empty and if we put passwords that don't match we get that they don't match and if we put an email that's not valid we get that email must be valid if we revert that change and we put past passwords that match oops we actually go through cool and we get our user nice let's actually quickly implement the login uh functionality actually for this i'm going to create a validator for login data as well so we'll say module dot exports exports dot validate login input and this will take only two things so username and password and then it will have the same as the other one an empty errors object and we'll say we can just copy this and paste it twice so if username then username must not be empty and then if password and password must not be empty this needs to be capital p and here we'll do the same we return errors and and that and now prettier will format it and let's copy that let's go to our users here we want to import it as well so here we'll say put it next to that and of course before we create our mutation we need to add it to our type definitions so here we'll say login we'll take we don't need the type because it only takes two things so we'll take a username of type string and required and a password of type string and it's required as well and you return a user and that's required let's save let's go back here you know mutation we'll say async login oops login it will take so it will take the parent we don't need that so we'll do that underscore and here we'll destructure username and password and remember because we have them straight away as arguments in the type defs where is it here we don't need to actually just destruct from a type all right so here we'll say const errors and valid equals validate login input and we pass the username and the password actually let's uh let's put a comma here so that squiggly line goes away and here we'll say we need to get this user from the database because if it doesn't exist we need to return an error because we can't log in a new user that doesn't exist so here we'll say const user equals await user dot find one and the condition will be the username must equal the username so just by username like that and here it will say if not user so if this user doesn't exist we need to throw an error but this will be a different error this is not an error for the for the fields themselves this is a another error so i'm going to give it its own name so we'll say errors dot general equals user not found and here i'll say throw new oops throw new what is it user input error and i'll just say wrong wrong threads or credentials oops initials and pass an object with the object errors in it else we want to compare this password to the actual password of the user to make sure that the password is correct so we'll say const match and we'll be we'll say await be crypt we'll use bcrypt again to compare them bcrib dot compare and we're going to compare the password to the password of the user so to user dot password and here it will say if not match if they don't match then we want to return an error again so we'll do actually here it's not wrong credentials here it's user not found user not found we'll copy the same stuff here we'll say here it's actually here that's wrong credentials so wrong credentials like that and if we get here that means the user has successfully logged in i mean the password is correct so let's actually issue a token for them so we'll say const token and uh we need to use the same function from here so let's actually make this into its own function let's copy this code and i'm going to create a function here a helper function will say constor function generate token and you will take a user and you will return the this jws dot sign and you will replace res with user and it will return us a token with the with this data so here let's copy this so here we'll say token equals generate token from res and let's copy this let's go up here do the same here but here we called it user so it will generate token from user and it will return the same data that we returned here so we can just copy this and go up here we will return the token except here the user is called user and not response or result all right let's save this and let's see if our validation is working and our red login resolver is working so here we'll say mutation login and this will take a username which is going to be user and the password which is going to be actually let's leave them empty to test out the validation and here let's uh let's get all fields so email token uh username and created at send okay oh because we we have actually a user that's got um that's got a username and a password of empty strings plus i forgot to throw an error if if the valid is false from the validation not even using that value so here before we find the user we want to say if not valid then here we want to throw the same type of error and here we'll say we'll just say errors and pass this errors here let's save and if i go back here i should get some errors okay the development server didn't start okay it started now send the same query and there we go you get errors user name must not be empty and if i put user here that goes away but we still get password must not be empty and we do one two three four to seven that's the wrong password we'll say wrong credentials and if i put the correct password it should log us in and it does cool all right so we're done with authentication this has been a long one but we've done quite a lot now we've refactored our app our dx developer experience is going to be much much better our application is coming together now in the last video we were able to implement the register and login mutations to register users and log them in and give them authentication tokens that they will use to now post and delete posts from our database which we haven't implemented yet but we will in this video will also implement a query for fetching a single post for the single post page in our front end later but before we do any of that i wanted to address this comment by sherman no rot i hope i didn't butcher the pronunciation of your name he's got the picture of the shaman from hearthstone which is pretty cool all right so he says would be nice to show what the say hi function returns in the front end i know it's useless but it shows us how all wires connect uh it's not useless it's actually pretty important to try to understand things on a lower level and what's actually happening behind the scenes uh i will not demonstrate the say hi because that's too basic i will demonstrate the login mutation and guys don't confuse yourself at the end of the day what graphql is is just we're still sending an http request a post request with somebody the only difference is now that graphql processes this body and re replies um responds in a different manner than traditional rest so what i'm going to do is i'm going to demonstrate that on postman so i'll copy this localhost 5000 paste that here and i'll copy this body and let me make sure to change the post to the request to the post request and the body to raw application json and here i will have a body an object and you will have a key query and by the way this needs to always be query even if it's a mutation this key has to be called query and here we'll have a string and inside of that we'll put our mutation but this is not a multiline string so this needs to be on one line let's put this back on one line like this like this and i got my server running so that should be fine all right so the only difference we need to escape these quotation marks otherwise they just end our string so we put the back um slash on them and here we just send our request and there we go we get a 200 response and we get our token and all the data that we got on the graphql playground the exact same thing guys it's just at the end of the day it's just a post request with a query body with your mutation or query inside it you can as well have another field for variables here and you can put those variables there and that's less confusing but we're not going to use this method because even on the client we're not going to send the requests like this and actually you can do this from the client using any http library like axios or anything but we will use apollo client which makes it even easier to interact with our graphql server all right so that's that let's actually jump into the code of our application and implement some more functionality all right let's go to our type definitions and create three more um queries and mutations here we'll have a query called get post and this will take a post id of type id and that's required and in return it will return a post so this will get only one post and here we will add two more mutations and this will be the create post mutation uh to create a post and this will take only a body of type string and that's required and it will return a post and that's required and here we'll have the delete post it will take a post id of type id and that's required and it will return just a string it doesn't matter what it returns as long as it deletes it successfully all right let's save that and let's go to posts resolvers and here we'll add the other resolver for get post so here we'll say async get post and we'll get the parent and we will get from the argument we'll destructure this um post id and here we'll say try and here we'll say const post equals await post the model dot find by id and we'll pass it the post id and here we need to say if post because we could give it like a wrong id or some or an id of a post that's been deleted and that could be null so we'll say if post so if it exists we just returns it return it so return post else we need to throw new error and say post not found and here if the try catch if the uh there was any error we'll say catch error and we'll say throw oops throw new error with the error object all right let's test that out so the server is already running it's restarting for me i'm going to refresh here just to make sure i get all the new queries so here instead of saying get posts and by the way um the playground inference the query if you omit this if you don't say query it will think that this is a query so we'll say get post and we'll pass it the post id of this one post that we have in our database so pass it here and we will get the id body created at and the username all right let's hit that and we get that post and if i give it a wrong id we get post not found and we get this error all right cool so that's working let's work on the create post um resolver so we go to users and here in mutation we go down here is that yeah that's the register so here we'll say async create post or actually let's put this in the um in the posts um resolvers it doesn't make a difference but since this has a lot of code already i'll put it here so yeah so that's not there we go here and we say underneath this query we'll say mutation and we'll say async create post and this will take the parent and it will take so we will destructure the body and inside of here what we need to do is um the way our protected resolver is going to work is that our user will log in and get an authentication token and then they need to put it in an authorization header and send that header with the request and we need to get that token and then decode it and get information from it make sure that the user is authenticated and then create a post we don't want anyone creating a post and i see a lot of people making the mistake and adding this authentication middleware as a middleware for express itself that means that we'll run each on each request even on nonprotected routes the way we're going to do it here we're going to have the third argument in the apollo server which is the context here we'll say context and this will take a call back and here we get anything that's passed from from before this poll server and we get the request and the response from express so we need to say uh request actually we get we get them in an object so here we'll say request we destructure the request and we just want to forward that request so what this will do it will take that request body and we'll forward it to the context and now we can access the request body in our context so if we go back to posts now if we use this third argument context inside this context we will have the request body so we can access the headers and determine that this user is authenticated and we can do all of that inside of here but since we will use this middleware or helper function in multiple routes so we need to put it in its own function so here in the util i'm going to create a new file call it check auth like this and here we will need a json web token to decode the token that we got so we'll say jwt equals require json web token and here we'll say module dot exports equals this function that will take the context and do the following and we also need the secret that we have because we will use that as well to verify the tokens because we used it to encode the tokens so here we'll say const and this structure the secret key uh and this will be equal require and from the same level actually not from the sale level it's back one level config all right so here we need to get this header so we will say const auth header equals because at the end of the day this context will have a context will have an object and amongst many things it will have headers inside of it and inside the headers we need to get to this authorization header and here we'll say the auth header equals context dot actually.request dot headers dot authorization so here we need to check for it because maybe someone didn't send this header so we'll say if auth header now if we have it then we need to get the token from it and a convention when working with authorization tokens that we send this header with a value of bearer space and then we put the token here so what we need to say here we need to get that token itself and we say cons token equals auth header dot split and we split this by uh bearer space meaning it will have two strings the first one is bearer space and the second is the actual token so we need to get the second so we need to get index one because a split returns an array of couple of strings so here we'll say if token because this can as well still not exist so we'll say if token now we need to verify the token and make sure that this we issued this token and is still valid and not expired so we'll say try and because this could fail and we'll say const user equals jwt dot yeah verify and we pass it the token and we pass it our secret key and now we'll say return user so this if this fails it will go to the catch block and we'll say catch error and here we can we can throw any type of error but let's be more specific and let's uh import this type of error we'll say const and we need to import authentication error from not from equals require require apollo server like this and now if we fail in verifying that we want to throw that so we throw throw new authentication error and we will say invalid slash expired token because if this fails it will come here that means it's either invalid or expired or blacklisted as well but we're not doing that in our application now after these if statements we need to throw some errors as well because if this if statements failed um if these if uh conditions failed um that means we don't we either don't have a token or we don't have an auth header so we need to as well tell the user that why this failed so we'll say here throw new error and this will say authentication token must be well actually not provided here was provided but maybe it was the wrong format so we'll say must be and we escape a thing quotation mark and we'll say like this bearer space and token formatted like that and then we will close this and here we need to throw another error if we that means if we didn't get an auth header we'll say let's just copy this and we'll say uh authentication token must be we'll say provided provided or actually authentication header because here if we get here that means we didn't have the header itself all right let's save all of this and let's go to posts and actually get this check auth function so we'll say const check auth equals require oops require and we go back what is it two levels yeah two levels into util slash check dash auth like this now here we will use the context to get the user so we'll say const user equals check auth and we pass it the context now because the way we structured it here that if we don't have a headache throws an error here if the the token is not valid it throws an error here so if there's anything wrong with the token an error will be thrown here otherwise we will get a user and this will return a user which means if we get to this block of code right here after this that means there was no errors that means there is a user definitely here that means we can proceed with this action and allow it and actually create this post so we'll say const new post equals new post we have yeah we have the model we have the model here so we'll say new post and we'll pass it the body like that because we already destructed it from here and we need to pass it the user remember in our post model uh where is it right here uh right here the post we gave it this user we can still attach that id and it will auto populate it if we want to get the user from the post later so we'll say user is user dot id oops id i don't know why it's auto correcting me and here we'll say username is user.username like that and we need to give a created add which is new date to iso string like that now we need to save this post so we'll say const post equals new post dot save and actually i forgot to put a wait because this is asynchronous and here we need to just return this post to return post all right let's see if all of this works and we're checking the uh the thing let's do here a console log just to make sure that we have our user so we console.log user and let's test this out all right so we go here and let's open a new tab and here i'll say mutation create post i want to pass it a body and this body will say this is another post and let's get from it all the fields so create that and the username all right this should fail and tell us that we need an authentication token but it doesn't it says cannot return oh because we didn't add this mutation so here in the index uh we want to say as well that we want the mutations from post resolvers oops what is the what is that resolvers.mutation all right let's save make sure that it started it has let's go here let's send that cool it says authentication header must be provided that's actually a wrong authorization header let me change that so authentication token that's fine but here it's an authorization header although which is actually a misnomer it should be authentication but whatever so if we send okay let's send again it's still restarting the server cool authorization header must be provided so let's provide one so if we just uh slide this up like extend this we can here add some http headers so here we say authorization and here let's put an empty string and see what happens okay i see even an empty string is counted as that it's it's not truthy so let's put something some gibberish and then now it says that it must be bearer space token all right let's put bearer space and then some gibberish that's not actually a valid token it will say invalid slash expired token now let's actually put in a real token so here let's log in again let's copy this token go to create post and here bearer space and we paste that and now let's run it and there we go we get this and the post was created and the username was assigned that user that we logged in with and if we go to get post here let's change this into get posts and get all of them okay let me remove that actually and there we go we get this um another post has been sent and it's added to our database there's one little problem here is that the latest post is big is coming last in the array but we don't want that we want the latest posts to be first and on the array to show them on our website so we can just sort the result from get posts so let's go to the post resolvers and here in gut posts we just need to chain another method here called uh sort and the sort will take a condition and we will sort by created at and to tell mongoose that we want to in descending order we just say 1 let's save make sure that it's restarted i think it's restarted mode nodemon is behaving a bit weird lately all right there we go so another another post now it's first instead of being last all right let's now implement the delete post let's go here let's go down here in mutation we add another one we'll say async delete post and this will take um the parent and it will take the structure the post id from the arguments and of course we need the context as well and here we'll do the same we'll say const user equals check auth and we pass it the context and now even if we have the user this isn't enough because we need to make sure that this user is the creator of the post they want to delete we don't want any user to delete any post they're only allowed to delete their own posts so here we'll simply say if user dot username equals the post dot actually we need to get the post first and we need to wrap everything in a try block so we'll say try const post we need to find that post first is a weight equals a weight post dot find by id post id and then here we put the if statement and we'll say if user the username is the same as post.username that means this is the owner of the post so we just await post dot delete ops delete i hate the word delete here we just after it's deleted we just return the string post deleted successfully and then here else if it's not that means we're like yo this is not your post you can't delete it so we say throw new did we bring that i want to bring authentication error here as well so it's got to check also get the same one from a pulse server copy it and actually this is from the library so i'll put it up there and we'll say throw new authentication error and this will say action not allowed and we need to handle as well if this try block fails so we'll say catch error and we'll say throw oops throw new error error like that all right let's save let's look at our post so we have two posts by user i actually added the two new users let's try to log in with a different user so i'll log in with jane and she has the same password because why not and let's go here and we can actually have multiple mutations so i'll call this create post i mean multiple operations on the same tab so here i'll have the other mutation and you can name it whatever you want i'll name this as well the same delete post and this will be the mutation delete post and it will take a post id and we'll give it the post id of where is it this one that was created by user so we'll try to delete that but the thing is let's try to delete it with the token of jane so this shouldn't be allowed okay so here i will paste that token from jane and hit play and hit the delete post and it says authentication or error action not allowed cool so j can't delete users post but if i go here and press ctrl z it will go back to the token from user and uh or actually let's get a new token because why not so here we'll say user and we'll get that token from user and then go here and bearer and paste that token and press play delete post there we go post deleted successfully and if we fetch all posts again we find that that post has actually been deleted hello class nice to see you again i have missed you have you missed me well actually no wait wait a second maybe you've been doing like the classes in a row and you've done you've just finished class three and you're now here and you're like wait a second i'm just listening to your voice like five minutes ago anyway for me it's been like 24 hours ago since i recorded the last video so i definitely have missed you all right enough of that let's actually crack into this video where we will implement holy implement yes comments and likes all right we'll implement ways of submitting comments and likes to our posts because right now actually if we look at our database right here this is the only post i have and if you look there is a comment and likes array but they're empty but and we can't fetch them with graphql we can't edit them so let's actually fix that okay let's go to vs code or whatever editor you're using i'm going to go to the type definitions and i'm going to close this terminal and keep the server running here in post i'm going to add the arrays for likes and comments so here i'm going to say comments and this will be an array so we do square brackets and we say this is a different type that we'll create and here we'll put the exclamation mark and you can as well put an exclamation mark inside which means this array has to contain at least one element we rarely ever do that there are some use cases but we're not going to do that now we're only going to require that we return an array even if it's an empty array that's fine all right let's say likes as well here will return an array of likes so like and then it's required so let's create these types so here we have the oops didn't mean to do that all right here we say type comment and uh well let's look at our post so yeah this will have a um a body a created ad and a username so here we'll of course we will have an id as well so we'll do id and that's required enough type id we'll have a created add and that's a string and it's required we'll have a username a required string and the body of the comment and that's as well a required string let's do the uh type like this will hold an id and a created ad which is a string and what else yeah username of who actually liked this so this will be a string all right so here we're going to add our mutations to create and delete a comment and to like a post so here we'll say create comment and this will take two things the post id so which post do you want to comment on or does the user want to comment on actually that's a lowercase d and this is a string and that's required and the body of the comment so body and that's a string as well and we will return that post that's been commented on and here we'll say delete comment as well to delete a comment and does this take yeah it will take a post id so post id um id and comment id you can take just the comment id but uh taking the post id provides us the ability to check whether that post is still up or not uh here we'll say post because usually you might have a mechanism where if a post is deleted you delete all the comments and then if you look for a comment that doesn't exist anymore it might cause a problem all right here we'll add another one which is like post so it will take the id and that's it just the id of the post oops id and that's required and it will return that post and notice we don't have a an unlike mutation because this like post will work as a toggle so if we've liked that post we will unlike it and if we haven't liked it we will uh like it from zero from i mean from scratch whatever i don't know what i was going with that all right let's go to posts so here at the bottom we'll add this uh these mutations or actually post is getting a bit massive we have no obligation to put them in like in a specific file we can even create as many files as we want i'll create another one actually for comments here i'll say comments.js and here i'll say what do we need we need the post model so here we will say require and we go back to levels and we go to models slash post and here we'll say module dot exports and here we'll have a mutation key and before i forget uh let's add that to our index so here we'll say we'll import that file i'll just copy this and paste it and replace users with comments and here we'll add that mutation field from the comments resolvers so we'll say comments resolvers dot mutation like this all right let's go back here we have the create comment so we'll say async create create and by the way guys you can have it as error functions it doesn't make a difference i'll use that syntax for now just to show you that you can do that as well so we'll say create comment and that will be an async function and you will take the parent so actually we don't need it so we can just say uh like this just an underscore and we will destructure from the arguments the two things the post id and the body and of course we'll need the context to make sure that our user has actually logged in so here we'll do that arrow and here we need to get our user so we'll say const user equals check auth and he will pass it the context and of course when we get here if you know by now that that means we're logged in so we'll do some basic validation and we'll say if body dot trim equals an empty string that means someone tried to submit an empty um comment so we'll throw an error so we'll say throw not just any error we'll get the user input error so here we'll say const user input error equals require apollo server like this all right so here we'll throw that error through new user input error and it will say empty comment and i'll attach a payload of errors to it with just one error i'm not actually sure i'm gonna use these in the on the client but i'm gonna send this payload anyway uh here we'll say comment body must must not be empty almost said must be empty which is ridiculous so here after the if statement so if it's not empty then let's get this post so we'll say const post equals post dot find by id and we pass it the post id and here we'll say if post oops if post so because it could be null actually i forgot to add a weight here this is a weight because it's asynchronous and here we'll say if post then we want to say post because mongoose turns our um data models into like just json objects and i mean just like normal javascript objects so i can just access the comments array like this post.comments which is pretty cool and here we'll add it to it but we want to add it to the top because it's the newest one so use the unshift method and say unshift and we want to add a body of body so we can just say that a username of user actually we're gonna need just the username from user so we can destructure that and say username like this and here we can just say username cool all right here we'll say created at and this will be a new date to iso string like this all right now we need to save the post so here we'll say await post dot save and we need to return it so we'll return this post so else if the post doesn't exist then we throw uh what is this this is gonna be um is this gonna be an a user input error yeah it is a user input error because yeah because they try to access um an id that doesn't exist and usually our client shouldn't expose an id that doesn't exist and we say post not found and uh yeah that's it for the create comment all right let's save that let's save the index make sure our server has restarted successfully because nodemon has been a bit weird i don't know why it's getting stuck on this restarting all right i had to restart node 1 i don't know why it's doing that all right let's refresh here and let's log in to get a new token because the other token is probably expired it's been 24 hours so here we'll go to so here we'll get posts to make sure that we have this post actually we can do a multiple operations here so they will call this um we'll just call this posts and here we'll do our create comment mutation here we'll say mutation uh comment it doesn't matter what you name it here you just need to say here create comment not post comment and this takes a post id and before because i have the token on the clipboard i want to put the token first here so i'll say authorization as bearer space and paste that token and here i'm going to copy this id and paste it here and i'll do body and by the way this uh this comma is not necessary you can omit it or you can leave it depends on your preference and the body will be new comment on only post i don't know and we will get a post back so we can just get the id the body and let's actually get the comments because now we can have that array the id the created ad the username and the body let's uh hit control enter check auth is not defined oh yeah i didn't import it so here we want to say here const check auth equals require and we want to go back two levels to util slash check auth all right let's save come on node one you can do it yes thank you all right here we can um say comment there we go we get our data and we get the comment and now if we even fetch posts actually we need to add comments i mean it's got it just to make sure with the other um with the other query so we fetch the post there we go our post has a comment and we can even submit another one and uh say another one and say comment and there we go we got our post with two comments sweet let's now um create the delete comment uh what is it resolver yeah resolver here we'll say async i'm gonna close the terminal uh delete com i hate delete comment and of course this will take the parent and the post id and comment id and we'll take the context and here we'll say const username will this destructure the username check auth and we pass it the context get the user from the token find the post oops const post equals await post to the model dot find by id and we pass it the post id and we need to say if post say uh here what we need to do is what do we do oh yeah okay we get the index of um so we find that comment we find the index of that comment in the array of comments and then we delete that at that index and here we'll say const what is a comma let's call it comment index in index equals post dot comments dot find index and of comment i'll say c where comment dot id equals this comment id that we passed to our to our function and here we'll say so because we need to check because maybe some other user is trying to delete some other user's comments so we will say if post dot comments add that index so comment index index like this dot username equals username that we got from this token that means this is the owner of the comment so we can delete it so we'll say post dot comments dot remove oh i mean splice there is no such thing as remove i just made that up so splice comment we start at the comment index and we remove just one and here of course we need to save we'll say await post dot save and did i say oh wait here yeah i did okay we'll se and then we'll return that post else if it's not to the owner of the post this is a different person we'll throw throw new authentication authentication we haven't imported that error and we'll say action not allowed and you notice sometimes we're throwing an error without throwing a um without sending a payload with errors because we don't need to show this on the client because there will never be a delete button for a user that doesn't own that uh that comment this is just a safety check instead of safety net instead of like in case a user actually tries to delete a comment that that's not theirs using some sort of like code all right so here so this is if the post exists so we need to chain an else on this if it doesn't exist we want to throw a new user input error and we'll say post not found sweet let's test this actually uh we need to import this authentication error here actually it needs to be in alphabetical order let's save all right cool nodemon was nice this time all right so let's actually create a new window i'm just going to copy these headers from here create a new tab and paste the same headers here and here we'll say delete actually mutation delete comment and the post id will be let's uh this well we all we have only one post here so post id is this and i can put this on a different line and say comment id is let's delete the first comment so we leave the another one so we'll take this id and then we put the id here and we get the post back so we can say id of the post and then let's just get comments and id and username and body all right let's send this oh it get it gets the post back yeah okay it's working all right so we get the post back when we delete the comment and if we try to delete the other comments so let's take this id and we put it here and we send it and there we go our comments are empty so we removed all the comments that we just posted all right let's now create a way to um get the likes and actually add a like to um to our posts so here in i'm gonna add it to the posts here at the bottom i'll say async like post and this will take so the usual parent which is going to be just an underscore uh post id and the context it's getting a bit repetitive but sometimes it happens like this with crud that you have to write the same code for different resources so here we'll say check auth and we pass context and we need to find the post so we'll say const post equals weight post dot find by id and we pass it the post id like this and of course we need to say if post and here we'll say uh what we need to do is we need to find this like we need to make sure that it exists so we'll say if because we could later delete it you know so what we need to do we'll say if post dot likes dot find a like where the like dot id equals or is it actually no the like username because we don't have access to the id we have access to the username because a user can have only one like on a post so if they have this like already we just delete it so we'll say like this because username so this is this returns a um an object right and if it doesn't find it it will return undefined so it will be not truthy so we'll say if and if this returns if it's true if the returns alike that means we've already liked let's put a comment here we'll say post already liked unlike it and here else that means we don't have a like so it's not liked we'll say not liked uh like post so here we want to unlike it we want to remove that like so we'll say post likes like this equals post dot likes dot filter like where like dot username equal uh does not equal the username so we leave at all of them uh all the ones that don't have the same username as our user so we just remove that one with this username all right and here we need to say await post dot save and then here we need to add a like so here we'll say post dot likes dot push it doesn't matter if you add it to the end or to the beginning because uh we're not gonna show likes based on created that just going to show a number of them so we'll say the username is username and it needs a created ad and that's new date dot 2 iso string and yeah that's it just the username and the date and here we'll say await post or actually no uh this await post because we're editing the post no matter what so this await post can be after this if statement so after we're done we either we remove the like or we added the like now here we will say await post dot save and we'll say return post like this and this is an if else if the post doesn't exist we will say we're not in a block we'll just say like this throw new user input what is this user input error and this will say post not found oh because it's not imported that's why it it's finished with that user input error sweet i think we're done here so this works for both liking and disliking or unlike and rather so and we are returning the likes because we added that to our type so let's actually test this so let's go here and instead of delete comment we will have a different mutation here we'll say like post did our server restart yes thank you nodemon i feel like i should be grateful each time all right here is a post id and it will be this id right here and we'll pass it like this and we want to get the id or just the body and username username i want to get the likes array and from the likes i'm going to get the id and the username so let's submit this cool so we get a like and if we look here just to make sure we fetch posts actually let's add likes here likes and we get the id they create that or just like id and username cool so you get a like and here if i press again that like is gone and if i press it's back i pressed it's gone cool we just uh did the two functionalities in one route or one operation one mutation whatever all right so this is it for this video or actually no let me add because there's some cool thing i want to show you and i don't want to make a video just for that i want to show you how to do a subscription now we're not going to implement it in our front end you can if you want but i'm just going to show you how subscriptions work because they're pretty cool so i'll say type subscription generally people don't use them when like getting new posts or new uh comments and stuff like this because if your app is massive it will be too much traffic and too much bandwidth people use them for polling and for chat apps and whatever i might do like if you want me to do some sort of like pulling up or like chat up let me know in the comments all right here i'll add a subscription and let's call this new post i want the subscription to each time when a new post is created to like um show whoever is subscribed to this that look this is the new post that's been subscribe created all right so in our index we're gonna need something else from apollo server called pub sub which means publish subscribe or publish a subscribe it's a pattern anyway here we'll say const pub sub not like this pub sub like this we'll say new instantiate a an instance of this and we just pass it to our context so we can use it in uh in our resolvers let's save this where do we go let's go to posts yeah posts here um here i want to add so we got to this mutation it ends like here and here we'll say subscription and here we'll have our subscription new post and this will have an object inside of there will have a subscribe uh like this oops what is that subscribe and the inside of here will return or actually let's do it as an arrow function because it will be like shorter the syntax will be shorter so here we'll do like this and it will take the parent and our we have no arguments so we can omit this as well so we can do two underscores and here we need to get the um pub sub pub sub like this here we'll say we'll return pub sub dot async iterator iterator and here let's call this uh i'll just call it a new post new post uh it's the convention to have like all caps like this as a it's a an event type and it's like a type of kind of received type thing i don't know it's just a convention all right so here we want to as well publish because this is the subscription we want as well the publication from where we create a post so right here after the post has been created and saved we're gonna say we have access to our context which holds the pub sub and we'll say context dot pub sub dot what is it publish yes publish publish and we publish a name a trigger name of the same name that we had earlier so new underscore post and the payload will have new post with the value of that post that's been created this one right here all right let's save okay we'll save subscription and our subscription is new post and we'll get the id the body the creator that username comments everything everything we just get the created out of the comments and likes because we don't have even comments right now on likes okay subscription field must return async iterable received undefined ready where are we returns async iterate oh okay my bad here we need to actually add a field subscription subscription and here we want to spread the did i put it in post here i put it in post posts resolvers sorry guys it's the end of the day and i'm a bit tired so these mistakes happen all right let's make sure all right there's something wrong i've crashed post resolver oh it's resolvers save come on oh no demand is being a bit annoying so i had to restart okay there's another problem throw new there's something learning defining resolvers feeling not in schema oh this is not mutation this is subscription subscription like this all right another mistake all right so npm start cool server is running this time it should work we start it and there we go it starts to listen i want the animation to happen so i'm just going to do it on a new tab so do like this there we go so we get this cool animation of the spin and let's try to now create another post so he will say a post for subscribers by the way subscribe if you haven't subscribed yet to the channel nice segue alright so let's send this create post damn it invalid token let's get a valid token let's go here let's add this all right let's send create post and if we go here we see that we got a post here and if we create another one number two we send it create post there we go we received another post you see like we're like now listening using websockets in the background and actively listening to the new post event and each time it publishes a new post we actually get it we can listen on the client and we will get this these posts in real time as they've been posted all right i want to show you one more thing that is kind of useful a lot of the times this time it's not that useful but it's a cool trick that you can do all right so here i could add it here actually no i can't add it here i'm going to add it here what i want to do is on the client later we're going to need a number for the number of likes and number of comments and we can calculate that on our client by just saying the array of comments dot length but we can as well calculate that on the server and send it to the client to minimize the amount of computation that's happening on the client so here we can add two fields say like count like count and that's a number it's required and we have comment count as i make a mistake actually no in a graphql it's not a number it's an int so here it's an int as well and it's required as well and we can get these uh we can actually compute these and send them not through the mutation itself but we can have like um i think they're called modifiers i'm not sure what they're called i call them modifiers so here we can say if we have a name of the type so if we say post and then we do stuff here to change any of the fields each time any mutation or query of subscription that returns a post it will go through this post modifier and apply these modifications which is pretty cool so we can do all sorts of um you know scenarios here so here we will have that field name we'll say like count and we will say that it's an arrow function and it will take the parent we'll need the parent here actually we'll need just the parent because the parent holds the data that comes from the previous step actually let me show you i'll put it as a normal function so like count like this and um oh it takes parent i'm going to console log the parent just to show you clg parent and here what we want to do we want to say return we want to return a value for this like count so what we will return parent will hold that data for the post and it will hold the likes in it so we'll say return parent.likes.length and we will do the same for comment count and for comment count i'm just gonna return the value and not console.log anything because we'll see it from the likes one so i'll say parent and here we'll say no return just parent dot comments comments dot length like this all right let's save this make sure our server starts okay it doesn't oh yeah no no column um no semicolon needed there okay let me start it again okay let's maximize our terminal and let's go here well what happened here let's what what happened to my tabs that's strange and the font size is tiny all right that was definitely not planned so let me put back the font size to 24. and let's go here we'll put the query get posts and here i'll get id body and we'll get the like count and the comment count all right we'll send and there we go we get 0 0 because these don't have any comments on them or actually you know what let's create them so let's say mutation create post and here we'll have a body actually no not create post create comment and we'll have a post id of this post right here and we will have a body that will say comment and we'll just get the id back and we need to actually log in so you say mutation login username is user and password is one through six and get just the token we send this we get the token we go here we add an authorization header with the value bearer space our token and we send our thing and we get that and we send our query here we get that the co we have one comment and the comment count is one cool so it's actually calculating them and if we look this is the value of what parent returns it's actually the post that's been sent so here that's the post these are all the posts so that's the first post and it's got that so this is what the parent is is the data that comes from get posts and if you send any type of query or mutation that returns a post it will have to go through this modifier and add these properties all right let's set this to be a an arrow function to just make it smaller right here we'll do like this remove that remove this remove the return and just do that okay that's fine all right so we are done with the back end i think i think if there's any modification i'll let you know i think yeah this is it for the back end yeah so we're done for the server code i want to tell you that i made one little change in the post resolvers right here in the create post i just added this if statement right here if the body of the post is empty it throws an error because this is a valid a server validation thing that i forgot to do in the series you just add this one if statement all right let's open up our code base using vs code and so here i want to create a folder and put our react app in there but we don't need to do that because we're going to use the create react app to tool and it's going to do that for us so here we'll say npx create react app i'll call this folder client because that's the the client application and the rest of the code on this folder is the server application all right so i'll let that install and i'll be back once it's done all right now that it's done installing let's open up this client folder and uh here i'll clean a couple of things so we'll not be using this logo so i'll delete it we will not be using this index css so i'll delete that i'll delete everything like remove everything in the app css because we're going to be using semantic ui i'll delete this app test file and actually in the public i'm gonna change the title of the app i decided to call this hi world because it's a social media app so i'll call this um hi hi world like this and save that let's go back to the source folder and here in the app i'm going to delete everything inside of here i'll just have a div for now and i'll have a header one says hi on hi world like this of course we'll remove the import to logo because that doesn't exist anymore and yeah let's save all of this and let's see let's start our server so here we'll say npm start and in a different terminal we'll go to the um we'll cd into the client folder and we'll say npm start so now we started the server now we'll start the client okay it says can't resolve index css yes because something is important yeah it's the index js is importing that and we deleted it all right so the app has started and cool we get high world and uh hopefully no errors probably none yes no errors and if we go back to our app i notice if each time i save both the development server of the server and the client are restarting because of nodemon on the server so let's go here and in the package json we don't want nodemon right now because we're not making any changes on the server on the server code so we'll add another script here and say serve and here we'll say just node index and of course now if we run serve let's say npm run serve now each time we make any changes it will not uh retrigger that run in restart the server the uh the server server not the client server all right so should be fine now and here in the app what we need to do right now we want to set up our apollo client our apollo provider and provide our apollo client to our application so that we will be able to connect to our graphql server we could do it in the app.js but i would rather have it in a separate component or and here we'll say we'll call it apollo provider js and actually we need to install a couple of dependencies to get that so here um in a terminal window let's say i'll actually make sure you're in the client folder so cd client and here in the client folder i'm going to say npm install we're going to install a couple of things first is the apollo slash react hooks did i mention we're going to be using only hooks here if you're not familiar with hooks i have a series on hooks on this channel if you want to dive deeper into that so we're going to install apollo cache in memory what we need let me look so we need apollo link http link http and we need apollo client of course so apollo client all right that's it for now let them install and let's go to the provider here this provider is basically going to export a jsx element so we need uh react so we'll say import react from react uh here what we're going to export is a apollo provider that wraps the application the the entire app so we need to import the app into this provider so here we'll say import app from the same directory slash app like this and we need apollo client so we say import apollo client from apollo dash client here we have we import the uh the inmemory the cache in memory um libraries so here we'll say import and what is it called in memory caches in memory cache from apollo cache in memory and usually you'll install a library called apollo boost and it does all of this for you but i've had issues with apollo boost when it comes to authentication tokens and saving them and setting a middleware for checking a token so i'm gonna do the setup myself um here we'll say import it's just a tiny setup just one file that you write and you'll never touch again so here we'll say create http link we need um we need this from um let me type this we need it from apollo link http so here we'll say from apollo link http we're importing a bunch of things this is the last one this is apollo provider so this is the jsx element that will provide the client to our app and this is going to come from apollo at apollo slash react hooks all right so here we'll say const http link we'll just instantiate or actually we need to call that so we'll say create http link and here we'll pass it some options we just need the uri for now and this is going to be pointing to our graphql server so what is the endpoint for our server which is just local host 5000 so we'll say http and here we'll say local host 5000 of course this in production this will be different so bear in mind here we'll create our client so say const client equals new apollo client and here we'll pass a link which is this http link that we created and we'll pass a cache value that will store any um cached data and here we'll just instantiate the inmemory cache so you say in new in memory cache like this call it like that and here we just need to export this provider so we say export default and we'll export apollo provider and this takes a client which is going to be the client that created right here and this will wrap the app so we need to put the app here and now we need to use this in the index js so here we'll say import what is the apollo provider provider from uh same directory apollo provider and here instead of rendering the app we just passed this apollo provider so like this so we don't need the app and actually we don't need any jsx elements here so we don't need react so we can just do that uh let's save everything let's make sure that our app is still running okay so import error apollo provider not exported is it not exported oh here it's apollo provider like that and we need to put it here as well pull up provider let's save all right it runs just fine and if we go to our app it says hi world of course there's no difference but uh by the way did i mention um you need to install apollo dev tools for chrome you can say apollo dev tools chrome and go here and just add it to your uh chrome as an extension and if you're using any other browser maybe you'll find it maybe not i don't know so you just add it to your browser and here if i click f12 actually let me refresh this click f12 uh where is the apollo did i not add it okay for some reason i had to close the dev tools and open them again all right so here in apollo we get this graphq graphical tool the same tool that we get on our server endpoint and here if we say query say get there we go we're getting our queries right here that means our apollo provider in our app is actually accessing the server and if we say get posts i want to get the id and get the body and click control enter and there we go we're actually fetching the posts from our database and uh apollo provider is connected to our server and everything is working fine well hello class and welcome to class 2 on the channel clast so many classes and we're not even using classbased component how did that come to be all right so enough of the nuances so now that we've hooked up our application with uh apollo and by hooked up our application with apollo i mean we set up our apollo provider and we connected our apollo client to our apollo server apollo apollo so before we use any um graphql queries and mutations and fetch any data and show it we need to set up as um our application because we need to set up some basic markup because this doesn't look good alright so uh what i want to focus on this video is to introduce the router and create different pages mainly we're going to create the home and login page page login and register page all right i'm gonna stop talking and start writing code okay so make sure you got your server running at port 5000 and the client running and let's open up a new tab and here let's install uh react router dom so let's say npm install and react uh router and dom and since we're installing stuff i just want to quick say quickly we're gonna be using like i said semantic ui uh it's really cool you can actually install it through the um command line and kind of customize a couple of things but i'm just gonna install it just install the css and install this react integration called semantic ui react very creative and so what we're going to do is we're just okay let's go to get started we're just going to run this yarn add or npm install semantic ui react and we need to install the css as well so we're going to say install semantic ui css so we're going to add those two so here we'll say semantic ui css and semantic ui react let those install and uh here in the app uh js file uh let's bring the router and route so here we'll say import browser router i'm gonna give it an lds router because it makes more sense i'm pretty sure one day they'll change it to just router all right so here we'll say react from react router dom and uh here above our css we want to bring semantic ui um just in case you don't know the reason why because we if we want to change anything uh we will change it through our custom css and the fact that we have it after it's going to override the default styles from semantic ui aka cascading so semantic ui css slash semantic dot min dot css like this so now the css we we have it in our app and we can use the semantic ui react and just use those react components um so here actually here instead of this div we're going to put the router so we'll say router and inside of here we'll have so we'll have our routes so first route will be the home route so we'll say exact path and the path will be to slash component component will be home by the way i just want to say quickly i'm not going to be explaining the kind of the basics of react because this is more of a apollo um course if you want to know the basics to react you can do my 0 to 60 tutorial or you can do anyone else's as long as you learn the basics all right so here's another route is the login route so it will say exact path equals oh not equals actually oh yeah equals i'm confusing myself guys all right so register or login and component will be login of course we'll create these components in a second let's just copy this click here and do register this will be capital r so here it will create a um oh i've already created the folder components but i'll create another folder called pages and inside of here we'll have login.js we'll have home.js and we'll have a register.js here we'll say rfc why is it not working or rcf yeah rcf all right so here we'll say at the bottom export default register and this by the way even though they're functions but you have to have them pascal cased meaning the first letter has to be capital some reason it doesn't work if it's not um all right so here we'll just say we'll just have a header one for now saying register page save let's copy all of this go to the home and just ctrl d here and say home so home page and these are rename to home let's go to the login as well paste this and just say log in here just to have a couple of different pages for now we'll populate them later let's close them let's import them so here we'll say import we'll have home from same directory pages pages slash home and we can just copy this two more times so here we'll say login and here we'll say register all right one thing that i want to do is i want to have a navbar at the top and we can go here in react semantic ui.com and go to right here menu they call it menu and i want to get this one oh no not this one this one this one that looks like tabs looks cool let's actually just copy this entire component just copy that and let's go to our app and i'm going to create a component here call it menu bar they call it menu so i'm going to call it menu why not i'm going to close this terminal so here um this is a classbased component of course we need to change that because we only want functional components so here we'll say function what is it menu bar and i'm going to export it export default menu bar and here instead of component we're going to get use state and right here instead of state like this we will say const active item and set active item equals use state and this will start with an empty string and the way these works uh work is that each menu item you have here has a name and if the active property is true that means it's going to be highlighted that means we're active on this page right now and this name will be rendered as the name of the tab with the first letter capitalized so if this returns true that means if the active item right here has the value of messages the tab messages will be highlighted or the nav link will be highlighted so each time we click one we want to change the active item name to that to the name of that menu item if that makes sense i think it does all right so we need to say this is either a const or a function i'm just going to keep it as an arrow function like that but the difference here instead of setting state we're going to say set active item and just pass it this name so that it changes it and we don't need a render because this is a functional component we just return and we need to remove this parent curly brace here i'm going to remove this segment i'm not going to have any image remove this wrap in div just keep the menu and here we don't need to import segment we just need menu so we've set up our navbar but of course we don't want messages and friends and logout we want um so the first one we want it to be the home so we will give it a name home and the active uh will be will be active when it's home and here we don't pass the on click event will be this handle click but we don't give it this dot because this is not a classbased component anymore we just pass it like that and here we'll have we have a login tab or nav link and this will be login as well and actually i want the login and the logout button or the register button to be on the right so i'm going to put put it inside of this other menu that's positioned on the right so that's the login that's fine and instead of logout we'll have register here register make sure to change this one as well okay let's save let's see what this looks like but we're not going to see it because we have we haven't used it here so let's say here import menu bar from components slash menu bar and we're going to put it at the top here so menu bar so it's going to be on the page regardless of what what page we're in all right let's save everything let's make sure our app is running without any errors it's compiling all right it runs successfully let's look at our app let's refresh okay there's a problem on click this handle effect oh did i not save i did oh yeah i thought i removed this this this okay now it should work all right so we get the menu but it's huge so let's put everything in a container uh so we go back to the semantic ui the container where is it uh right here all right what's cool about this documentation is that you can see as well what it renders eventually so uh let's use it and i want to show you something as well so we'll just copy that and let's go in the app or close this terminal window and here we'll say import container from semantic ui react and let's wrap everything let's cut everything and wrap it in a container component so tab and put everything inside and let's look at our app we have two home buttons let's fix that so here um let's remove this and save all right so we get our buttons uh none of them is active but if you click one it becomes active but we're not browsing to different pages but i want to show you something quickly so we got the container right but don't forget at the end of the day we've linked the css so we can actually just here just replace this container with div and give it a class name of ui container because if you look at the documentation at the end of the day it's just going to render a ui container i did with a class ui container which tells um our css that you know which tells our page that this is from the semantic ui css and in fact we have the same effect here but just don't forget with semantic ui you have to always have this ui thing if you just say div dot container it's not going to work all right we're just going to revert back to using the container component just wanted to show you that and here we want these to be links so these menu items what's cool about these components from a semantic ui react it's an integration so we can still say as and we can have it as a different um component we can have it behave as a different component as well and we want it to behave as a link so we want to import that so let's say import link from brow to dom and here we want it to behave as link so here we can uh pass the props that will be on the link which would we just need two so this is the home we want it to go to just slash let's copy these two and paste them here this will go to slash login because those pages are there if we so if you go to login slash login we will see that the login page is there it's just that they're not linked let's go back so this will go to slash login and this will go to slash register like this let's save all files and let's look at our app all right so we get the navigation but the home initially is not active all right so the way we can solve this is that what i wanted to do is i wanted to be by default on the home and then when we click it changes so we can start by saying home here use state home and it starts there and if we go there to any other page it goes to that one and as well it highlights that one let's make these buttons bigger and let's go here so in our menu we can i think we can yeah we have a property size and by the way you can do control space and you can um scroll up you can see all the properties that you can add of course you can see them on the documentation uh here we have a property size and we have these sizes i think the biggest is massive and i want to give a um a color as well to the active item of teal let's save let's look alright so there for some reason like the biggest size is actually not that big but that's fine that's fine by me the those are big enough all right so it's got this cool teal color um one thing that we need to fix though if you just go to the page slash login like this it's not gonna highlight login it's just gonna it's not it's just gonna set the home as active so what we want to do is we want to each time the menu bar loads it it looks at the link that we're at and the temp there depending on this link we actually set the link active so if this link says login we set this active if this link says slash register we set this to active so let's go to our menu bar and here we can say const path name and we can get this just from the javascript from the window object this is just javascript window.location and the path name and depending on where we we're at this can uh this can be just slash this can be slash about whatever page you're in so uh the way we're gonna determine that we're in the homepage it's not gonna be slash home it's just gonna be slash so we're gonna check for that so here we'll have another variable called just path and we'll say if path name so we'll do a ternary operator equals just slash then we want to set the path to the word home else so colon um what do we do yeah okay so what we do here is that we have slash about for example or slash login because that's more the case in our app we don't want it to set it to a slash login because though that will confuse these items and they will not be active we just want this so we can use the javascript function substring so we'll say path name dot sub dot sub string or actually just sub sdr and we can start at a an index we want to start at the index one which is this one and we want to get the rest of the string so just leave it like that so if it's login it's just going to take this without taking the slash and it's going to set it to that page now we want to as well set the active item to that path so we want to pass it to our use date and of course this will come after this logic right here all right let me remove this comment and save and this should work all right it works so if we go to slash login it it sets that to active and if we go to slash register it says that to active and if we change them they do change and the page actually changes all right so that's that with setting the routes and implementing semantic ui hello class welcome to part three of this series i mean class three i don't know what part is i'm trying to have a theme here by the way if you've reached this file and especially if you've done the server code as well give credit to yourself seriously you're in the one percent of people that are trying to improve and kind of improve their skills and learn more stuff you're like this guy right here you are the hero on a selfactualization and selfdevelopment journey all right so enough of that and let's actually write some code okay so here in the uh merge folder i'm actually not going to open the whole folder anymore i'm just going to open the client folder because we don't need to write any server code anymore so it's less to look at on the left side so i'm going to see the one level back and i'm going to say npm run serve to run the server and i'll open a new tab what is this go away and here i'll say npm start to start the client so here in the home page it's currently empty just says all right it's currently empty it just says home page uh let's let's actually use some query the get posts query and fetch them and show them on this page i'm going to open uh close this client the terminal so it doesn't take space uh here we'll need the use query hook use query we're going to get that from apollo react hooks and actually we need to install a couple things so let me open a new tab new terminal tab and here we'll say npm install make sure again you're in the client folder and we'll install graph graphql and graph graphql dash tag like this and here let's get the graphql tag let's say import and the convention is to call it gql from uh graphql and uh here we need to write this graphql query that we're gonna you know we're gonna use or we're going to i don't even know what you do to a graphql query all right so here we'll call this fetch underscore uh posts underscore query here we'll say g equals gql and we'll put our uh our query here and it's the get posts query and we're going to get uh essentially everything so we'll get the id we'll get the body we get the created ad and we'll get the username and we get the like count and from the likes as well we'll get so let's do like this we'll get the username of of the person that liked we'll get the comment count and we'll get from comments array we'll get the id username and created ad and the body of the comment all right um by the way i've mentioned this before if you want syntax highlighting instead of the gql tag template you can get this graphql for vs code extension and that will do that for you all right let's save let it format what is it not format of course because i need to wrap this in a query tag so do like that and then save all right cool so here we'll um we'll um actually run this query so we'll say uh const and from use query we get a couple of things from them there is loading which is true when we're actually loading and there's data and which has the data so here we'll say equals use query and then we'll pass it our fetch posts query and yeah that's it so here we can just say if data so we have if we have data we can say uh console.log data so we'll see what we get so let's save this let's actually close this terminal because taking too much space or let me close it all right so there's a problem here graphql does not contain uh oh because it's from graphql tag not graphql let's go back let's open up our console and there we go we get an object and it's got four posts all right and our posts are stored in the get posts object because that's how queries and mutations work so what we can do we can um just destructure that so from that we get um get posts and we can even give it an alias which is just post because it makes more sense so here what we need to do we need to iterate through these posts and show them and for this i'm going to use the semantic ui okay we're here where is it we need we need the grid i'm going to use a 3 grid 3 column grid layout so we can just copy this grid tag from here let's go to our home i'll paste this here and we need to close the grid component let's remove these uh three or two columns and here we need to import that so we need to say import grid from semantic ui react i'm going to remove the divided because i don't want that divider line and here i'm going to put another row at the top to put like a title of the page and here we'll say put a header one and say recent posts and here we'll have another row under that row and this will have a column but actually let's cut this column and inside of this row we want to check if we're loading because i want to add like a loading spinner thing and if we're loading so if that's true we do a ternary operator and here for now i'm just gonna put a header one and say loading posts dot dot and then here we'll put colon so else then uh we're gonna actually iterate through our posts so here we'll say uh and the thing is by the way we could this can be null or undefined because data itself is not uh populated so we need to check for it first if it's truthy so we'll say if post so posts and end now we can loop through them so we'll say post dot map and for each post actually what's up oh actually we don't need this because we're already in a javascript block so we can say for each post we want to return the following and uh here we will paste that column back but we're not gonna have an image and inside of here we can put everything that relates to the post but of course we're gonna let's put this in its own component so that we'll have smaller components and uh you know better modularity so here i'll call this postcard because we haven't created it yet and let's pass it the post so we'll pass it a property called post with the value of this post all right let's close this and uh because we're iterating through and in react when we iterate through we need to give a key value to our topmost component or key attribute and this will be the post id because that's unique so we don't have to worry about nonunique keys let's remove this if data console log data and let's save this of course this is going to have an error because we don't have a postcard yet let's import it and then create it so we'll say import postcard from we put it in components so we go back one level we go to components slash post card like this let's create that so post card dot js and here we'll import react and we'll import a couple of things from semantic ui so we'll have the card we'll have the icon and we'll have the label i think that's it for now from semantic ui css react and here we'll say function post card and we'll get the props because we're passing some props down here we need to say export default postcard and here we will say return before we turn we need to get our properties so we can say const so we're going to get the body we're going to get the created add we're going to get what else id username body oh we got body already what do we get like count yeah and so we need to get comment count count like that and the likes all right i think that's it let me look back likes yeah that's it common count and like count yeah that's fine so we get them from props dot uh post or actually let's just copy all of this we can destructure it straight away inside of here so here we'll say from props and from post we're gonna destructor all of this so we don't need to do this expression here all right so here we will return a card and actually we can just copy one card from here just go i have to type everything when it's already here i want something that looks like this i want to get the molly one let's get the second one so all of this card tag copy that our card component all right so here we have our card card content floated right that's fine uh actually yeah that's fine i want to leave that image uh but here instead of this relative path we need to get the actual path of that or the the link to that image so let's do this let's get that link copy it and let's paste it here all right so the header is not molly thomas it's actually the username of whoever posted this post so here we'll put the username and here the the meta will be the created at date so here but the created add date right now is a iso string so we need to format it so let's open a new terminal tab and install moment so let's say npm install moment and give that a moment to install hahaha so here we'll say import moment from moment and um here in the meta we'll say moment and we'll pass it the created ad oops what is that created add and here we'll say dot from now which which we'll do like kind of like an hour ago or five hours ago etc so here let's um in the description this is the body of the card we'll just say body which is the body of the post and here let's remove this stuff and because we're gonna have some different buttons here let's just put a paragraph saying buttons here and let's save everything see if there's no there's something wrong oh okay i did i just didn't save i didn't save when i added this import line at the top okay let's close this okay image is not defined oh yeah because we didn't import image so here image from symantec ui all right cool so we get our posts and um they don't have any margin between them so let's fix that so here let's go back here to the home uh this column right here let's give it some inline styling just say margin bottom let's give it 20 pixels save that uh cool we got some margin bottom and okay so i want to remove this ago because obviously if it's to two hours that means it's two hours ago we can do that by here in the from now we can by default it passes it false we'll pass it through and it will remove that ago all right so just two hours two hours and the thing is these cards are not taking the um the full width of uh of the container div or not the container i mean this uh column div so what we need to do so here in the card we can just add this property called fluid which will let them take up more space cool all right they look better now let's make just like facebook let's make this um timestamp a link into the post itself so here for this uh card meta we're going to say as and it's going to be a link i'm going to give it a property too and this let's do a backticks and we'll say slash posts slash dollar sign curly braces and here we'll put the id of the post of course we need to import link as well so let's import link from react router dom and let's save let's look at it all right so this becomes a link and it takes us there of course there's nothing here all right cool so this takes us to that id etc etc all right so let's actually add these buttons the like and comment buttons so the way i want to do it i want to use this button right here whereas button button button yeah button here i should have opened it already so i want to use this button i think it looks sick so here let's uh copy this first button right here and here in the extra div let's paste it and of course that's the import button from from semantic ui we already have label and icon installed i mean imported and here in this button is going to be as div label position right that's fine but i want this to be a teal because it's the like button and i'm going to leave it as a heart and i don't want it to say like because that's kind of selfexplanatory and here we'll have a label it's not going to be an anchor tag so we'll remove that the color will be teal and instead of this just hard coded value we'll have a number and this will be the like count let's save let's see what this looks like cool it looks uh but it looks like as if we already liked it so i want it to be just um kind of outline only so i think yeah this button right here i think we just need to add it yeah yeah it's just we add basic here all right cool it's uh just outlined because i wanted to because of course we need to later implement when we log in or uh when we're logged in that we can like but when we're logged out i want it to be kind of um outlined like this and when we click it it takes us to the login page right now when we click it it doesn't do anything actually let's add a on click button event so here we'll say on click equals let's call this function like post and let's create that right here say function like post of course for now it's just going to console.log like post like that and we want as well another button for the comment for comments so let's cut that and paste copy and paste it so div that's fine right on click it's going to say comment on post we can create that as well so here we'll say function comment on post it's just gonna console.log um comment on post so here we have comment on post we have a button but the this button i want it to be blue and the icon is to be comments and the label is going to be of color blue and basic that's fine pointing left and here we will have the uh comment count and not the like count all right let's save all right we get the uh this is interesting actually this is a different icon i think i'm meant to type comment not comments yeah okay i was using this icon but actually i prefer the new icon because it has multiple comments instead of just one okay yeah cool so now we're showing the actual comment count and the like count and we're showing these two buttons of course they don't do anything right now they they just print some some logs to our console but of course we need to implement this functionality later to have them do stuff but uh that's gonna come after we handle authentication because of course we need to be logged in for us to be able to like and comment on posts one thing i want to fix though is this um title this recent post so i want to put it in the middle and have some margin to the top so let's go to the home right here let's give this a class so here this row let's give it a class name and let's call this page dash title let's go to our app.css say page title and let's give it a display block and let's say text text align center and let's say font size let's give it some font size uh some bigger font size of two ram and some margin top as well margin top of 10 pixels let's save let's save all files um all right there's something wrong okay let's look at here i don't know here okay the display block is not being applied because it's being overridden by the dot row uh we can just simply say um uh we can add the important thing to it yeah okay now it's fixed all right that's just these minor effects that i wanted to do in the next video we're going to work on logging in and registering users so look forward to that hey class and welcome back i have nothing cringey to say in this intro so let's just get to it all right so in the last class we fetched all our posts and showed them on the home page so it'd be nice to actually now have a login and a registered form so let's do just that all right let's go to our app and here in the register component we're going to use a form so let's say up here import form from symantec ui react and the waveform works if you go to the semantic ui react documentation is that you just put a form and inside of it you put a form field and then inside of that you can put a label and then an input with all the props that you wanted to have or the attributes but there's another way which is better in my opinion to do is that you just have a form input here and you put all those props inside of just this one component so we'll use that approach so here inside of the div here instead of saying just a header one we put a form so let's say form and then we'll have an on submit which is on submit which we haven't created yet but we will and we will say as well no validate because html5 by default tries to validate email fields so here we'll say we'll have a header one saying register and here we'll have our first form field so we'll say form dot field or input rather and here we'll say actually will not close it we'll have a couple of attributes here we'll have a label for the register and it will actually this is the first for a field which is going to be the um the username field so we'll have a label saying username and we'll have a placeholder saying username like this actually this needs to be capital uh u as well uh we'll have a name which we'll use to identify what field this is when we're like changing and submitting stuff so this will be username like that and we'll have a value i'm going to give this actually we can initialize this right now so we'll say const and we'll have values and we'll have set values equals use state and it's going to be um this these uh default values will be a username we'll have an empty string and we'll have a password which is an empty string we'll have an email which is an empty string and we'll have a confirm password which is an empty string as well okay this doesn't make a sense in terms of order doesn't matter that much but i just like to keep it kind of the same order that i'll put to the fields all right so here we'll have the value would be value.username or values.username and here we'll have an on change so on change will be on change which we'll create in a moment so let's close this so this is our first input let's copy this three more times one two three so the second one will be the email so the label will say email the placeholder will say email the name will say email and i should have ctrl d but i'll do in the next one the values as well values.email so here let's click here and ctrl d once and say password and the name click here and ctrl d1 and say password like this with a lowercase p and here let's click here and say confirm password like this and here this will be confirm password like that and of course we need a button for submitting this form so we'll have a button this is a semantic ui button so we need to import it in a second so this will be of type submit because it's a form and let's give it the the primary attribute so that it becomes blue and you will say register let's go up here we need to bring button and we also need to import uh use state from react because we're using it so we'll say use state like that let's now write these uh um on on submit and on change so it will say um const on change equals we'll take an event and it will it's just going to set a set to the values but remember here we need to spread our existing values otherwise it's just going to override it with one key value attribute pair and here we need to get event dot target dot name this is going to be the name of the field because it's going to be this name right here and event dot target dot value to give it that to to give you the value of that all right so that's that for unchanged now we need the on submit so here we'll say const on submit submit equals it's going to take the event and we're going to first of course prevent default so prevent default and here we need to um check and send our actually we don't check we're not going to do any client side validation because we already have our server side validation so we need to straight away send a mutation to our server and uh persist these users if the data is valid so here we actually will actually write our graphql mutation so here we'll say const register user and it will be gql we need to import this as well so we'll say mutation uh register and this will take a couple of variables so it will take a username of type string and that's required we can just copy this just to be like quick so three more times so we'll have a an email a a password a confirm password and here so after this we'll say like that and this will trigger the register mutation which takes a register input if from if you remember our server code and this will have a couple of things and this will have a username it's the same it's the same thing but we need to give them as variables here so username and we can just copy this three more times and here will be an email here will be the password and here will be the oops i need to ctrl d and say confirm password all right so after this is triggered we need to get a couple of fields back so we'll get all of them so the id the email the username the created ad and of course most importantly the uh the token the jwt token of course we need to import gql so let's go up here we'll say import gql from graphql tag and uh we need to as well the use mutation hook so we'll say import use mutation from uh at apollo slash react hooks not common hooks all right so here we'll say let's remove this white space and we'll say const oops const and we'll get a couple of things from here from this so we'll use a radius structuring and let's call this a function add user and we'll have a couple of things from here but we'll just get the loading and here we'll say equals use mutation and we'll pass it our register user mutation and here for the um for the options we'll have a function called update and this will be triggered if the mutation is successfully um executed so this will give us two um a couple of things the proxy that this will we will rarely use it's got some metadata and here we'll have a result this will hold the result of the mutation so here let's just console.log the result for now and see what happens and um i think yeah this is it for now oh we also we need to give the um the variables because this is a mutation we need to give some variables of the mutations we can all we can do here so username is values.username and then attach the other three but since the object of values is the same this that is those values that we want to send we can just say variables is values simple as that and now of course we need to trigger this add user function when we submit our form but the thing is we can't just put it here and we can't put this um above here or can we well actually we can yeah we can just put this above here and so we have access to the add user yeah so you can just add user like this and that will work all right let's um i think this is it let's save let's make sure that we have no errors here we don't cool it says that we're not using loading but we'll use it in a second all right so let's look at our form all right it's way too wide let's um let's fix that so here for our wrapping div we can give it a class name of form container or container like this and let's go to our app.css here we'll say dot form dash container and we can just say width is 400 pixels and let's give it a margin auto so it's pushed to the middle auto let's save let's save all files all right it looks much better now okay let's open up the console window put them side by side and see what happens if we just send yeah if we just send a form empty like that we get uh errors we can't see them here but they're actually encapsulated in the errors object that we can get from this but if we register a new user successfully let's say new let's give some valid data so new and new email.com and here we'll say one through six and oh actually i forgot to say this is of type password so let's quickly change that so here this uh these passwords are where are they oh i didn't even give the type actually so let's give the type to these just for good measure so this one will be type this is the username type text just copy this here we can just give a type of email and for the password we'll give a type of password and we can just copy this one more time and give it to the confirm password a type of password as well all right let's look at our app now if we type something here it's um it's hidden so here we'll say new and the email will be new at email.com and the password will be one through six and the confirm password will be the same thing and we hit enter there we go we get data back which holds a data object which holds a register object because that's the name of the mutation and we get exactly the fields we want all right that's brilliant but what we want to do is we want to redirect to the home page once the user is registered successfully and we want to use that loading loading boolean when we send some data we want it to see like spinning that's really easy with semantic ui what we can do let's go to our form here we can give it a class name and if the class name is loading it's going to be it's going to have a spinner in the middle so here we'll have a actually a dynamic value and we'll say if loading it's the loading that we got from the user mutation then we give it a class of loading else we give it like just an empty class like that all right let's save let's go to our app and here you can see briefly the the loading spinner comes for a second and then goes because like the response comes way too fast but it does have a loading effect all right so what we need to do now is we need to handle um errors because we can we can get some errors from our request and we need to show them on our form so here after the update i'm going to say on error which is this other function or other function that we have and it holds the error and here we'll say um we will say actually what do we do oh we need to actually have some errors in our component and then we set them here if they exist so here we'll say const and we'll have errors like this and we'll have a set errors function equals use state and we'll pass this an empty object like that and inside of here so if we get errors we just want to say set errors let's put a comma here and these will be inside of error dot graph ql errors i get some autocomplete because i typed it before but here graphql errors you can return multiple errors but the way our server code is is written is that we get we give one error and inside of that there's an object that holds all those errors so we will access the first error like this in this array and we say dot extensions extensions which is this object that's inside of it dot exception exception and here we've we have put our errors if you remember when we wrote this code in our server code so here we set those errors to these errors and we can actually console log them just to make sure that these this is what we're looking for so here we'll say console.log and we console.log exactly that and then we set it to our errors but of course we need to show them on our markup so i didn't find a way how to do this with semantic ui react but so i'm just going to use the semantic ui css because we have access to that as well so here we'll have a um a div or just like this dot ui dot error dot message and here we need to put a ul with a class of list and here we need to to loop through our errors and access them but the way our errors work is we get a key called for example username and then we get an error called username must not be empty so we don't need the keys we just need to show the errors so what we need to do is object dot values so we access the values and not the keys of errors because we have that in our state or like set state variable dot map and we map through them so for each value we want to display an ally so we just do like this parenthesis and we'll display an ally since we're iterating through an array we need to say we need to give it an key because we're in react and this key will be the value because these are unique and here we'll say and the what it contains as well is the value of this error and of course this is conditional because we might not have errors at all so let's cut that and here we'll say we can if we check to if we just have errors it will be truthy because we have errors all the time and it's an empty object at the beginning so what we need to check we need to check if this errors has any keys so we'll say object dot keys of errors dot length bigger than zero so if the length of it is bigger than zero then there is some keys and that means we have some errors so let's show this so we'll say and and and we put parentheses and we put everything back in here all right so let's save that and let's go to our app okay let's submit an empty form and right now we should get an error for username for email and for password as well and we do so a username must not be empty email must not be empty and password must not be empty but let's invalidate these as well because it makes more sense to see the ones that are not valid invalidated we can simply do that by um so in the field we'll add this error property so error property which is a boolean so it's either true or false but here we'll give it a dynamic value so for username we're going to check for errors dot username and if that's truthy so we'll give we'll put a ternary operator and say true else it's false there's no error for username so let's copy this paste it here for email and change oops change this to email let's paste it for the password and change it to password and let's put it to the confirm password and change it to confirm password let's save that let's look at our form let's make it full screen and here let's say so let's have no username and let's put a valid uh email so new at email.com and put like i'll put one through six and then here put one through seven so there we go it says username must not be empty and passwords must match so let's fix that that's fixed you get just username and if i put new here and say register just press enter actually the username is taken because we registered that new new user so here we can say new to and the regis oh it says username is taken do i have new tool as well okay so i have a new and i have a new two in the database so i'm just gonna delete those for now and test again let's delete this as well or is it yeah oh that's confusing news here let's delete that oh actually one thing i forgot um so here once we submit and it's successful and we add a user on the update here once we get our successful result we need to redirect to the home page so here we'll say props dot props dot history push and we'll just push the slash which is the home uh homepage and of course we need to take our props as well from the parent component all right so let's save that proxy we don't need to use it so we can omit it and just put an underscore here so let's uh let's go to our app right here and here let's put some valid data so we deleted that new user so we can use this again so let's say new at email.com and let's put one through six one through six register there we go you get a cool spinner and we are logged in and we go to the home page and we get this token back now of course we're not putting this token in any application state or anything for now but the register is working and it's sending a request and we're successfully registering this user and if we check there we go new at email.com all right let's do the same for the login page as well so what we need to do is actually we can copy everything from here from the register page and we go to the login component and paste everything here actually one thing that i want to do is let's put this this on change and the on submit let's put them in a custom hook because otherwise we're repeating the same code across two components so let's copy this um actually let's open up the the side here let's put a create a new file inside a folder called util so util slash hooks and here we'll keep our custom hooks so from the login we can copy the onchange and here let's uh import we'll need use state because we want to store the values here as well from react and here we'll say const export const i've written this hook for the custom hook video that i have so you might be familiar with it so this will be it will take a callback and i'll explain what this does in a second and it will take an initial state and this will be by default an empty object and you will do the following and here we'll have let's let's paste that and then let's copy as well this values from here or like this from here and um spaced it here but this will be actually the initial state so here in the login actually in the register let's fix the register first so here we'll say const initial state equals that and here in the hook if we take an initial state and then we and you use state and we pass it the initial state like that and the own change will be i think the same yeah it's the same so we get an event and we set values these values to that that's fine and then we'll have the on submit so we'll say const on submit take an event and it will oops it will event dot prevent default oops i misspelled default like that and here it will call that callback because the thing is we don't uh depending on what page this used form is used in the callback can be different right i know in our case it's not but we make it more generic by passing this callback and then calling it from here now of course we need to return these values and the on change in the on submit so that we can use them in the in the component so we'll say return and we turn an object with the onchange the onsubmit and the values like that all right so our hook is done let's save it and here in the register let's import that hook so here we'll say import uh what is it called used for actually because it's not the default we need to do like that from go back one level to util slash hooks so here we don't need to say this like that we just need to extract those so we'll say const and we'll get the on change the on submit and the values from use form so this will take a callback uh let's give it the add add user function as the callback and let's give it the initial state which is going to be this so let's copy what's inside of this initial state we can just pass it like that without actually declaring a variable here so here we have those we have the on change in the on submit so we can just remove this and we can remove this so but the problem here of course the the add user is not recognized up here but as well if we take this and we put it underneath here the values up here will not be recognized because they're coming from here so a workaround around this is we can declare a function here say function let's call it register user and this will simply just call the add user uh function which we get from here and then we can pass this as uh this callback right here now you might be wondering what the hell why does this not be um not be recognized up here but this will but the way javascript works is that all the functions with a keyword function in front of them at the beginning of the program are hoisted meaning that they are brought up and kind of read through initially and then even if it's down here but it has the function keyword it's actually recognized up here unlike the const variable functions all right so this should be fine let's we didn't actually see our console log errors but of course seeing the result of what happened we are getting the pro the proper error so we can remove these console logs and let's uh save everything do we not yeah we don't have any errors let's check let's make sure that everything works the same in a login form so we go here all right cool so everything works the same the on submit is working and as well if we submit some valid uh data so you will say i don't know some just random email for now and put one through six there we go registered and we're redirected to the home page so the the hook is working fine now we need to integrate it in the login form so here let's import it so let's say import use form from and go back one level to util slash hooks and here this is login not register oops log in and here we have the errors the same way we'll have a const and this will be let's call it login user and this will call a mutation of a login user which we'll create in a second and update it will let's not console.log that we will push to the home page the same way and we will set the errors the same way nothing changes here and the on submit is the same except it's gonna call uh what is it gonna call it's gonna call the login user from here and then actually no we don't have a lot on submit we're going to use the use form hook excuse me so here we'll have the on change the on submit and we'll have the values from use form and i'll call back so let's make this the callback so here we'll say function uh login user since we already have a login user let's just call this login user callback like that and it will only it will simply call the login user so we'll pass it here as the callback in the login form and the initial state will be a username so we only have a username and a password on the login form it's going to be an empty username and the password will be an empty password so the login user will do that we'll call that and we'll get we'll do the same thing the callback all right so here in our markup we have a form same thing same uh stuff here but for the header we'll say login and for the input we'll have just two inputs so here let's remove this let's keep the password input and remove the email input so here we'll have a username the same stuff nothing changes and the password as well the same stuff nothing changes so here in the button we'll say login instead of register and here for errors nothing changes as well but here instead of register user we'll have a login user and here we'll have the mutation of login and we will remove the email and we'll remove the confirm password and here we'll have the mutation login and we don't have a register input so we can remove that like this like this and we can remove the email and we can do the password like that we can remove this and we'll get the same data as well from the login mutation all right let's save everything let's check if this is working we have no errors or we have an error so register is not defined oh because i'm exporting register at the bottom all right so here we will export login let's save all right cool no errors let's check our app all right login form we get this form and if we log in with empty it says username must not be empty and if we put a username it says password must not be empty if we put the wrong password so i'll put 137 click login it loads and then it says wrong credentials but if i put the correct credentials one through six i click enter and voila we are logged in and we get redirected to the homepage now of course we're not changing the navbar right here because we still have those buttons because we don't have an actually applicationwide kind of context that knows that we're logged in or not which we will do in the next class so look forward to that i shouldn't have had the third coffee coders problems eh okay whatever let's do this hello class and welcome to class five uh so we've done a lot so far we have created the login and registered pages and they redirect us to the homepage if we log in successfully or register successfully but the caveat is we're not doing anything with this data right now because if we log in if i just type in some valid credentials we just receive some data from our server but we're not doing anything with it because for example you can see that our navbar is still saying login and register so we need a way to store this user data globally in our application so that whenever a component needs to know whether we're logged in or not whether we need some permission to do some behavior that's only allowed when we're logged in so that needs to access it aka a global state which we can do through either context or redux or through uh some other stuff we're going to use context because this app is too small for redux because we're only going to manage some user data that's it so let's actually start to make that a reality all right so let's go to our app here i'm going to create a new file inside of a folder called context so call it auth.js because it's going to be our auth context so here we'll import react oops react from react so what we're going to create we're going to create in a context so we'll just actually create this context actually i forgot to get create context from react and here we'll say const auth context equals create context context and here we'll so we'll pass a couple of things our context will hold a user object and initially this will be null and here we'll have a login uh function and this will take some data and we'll do something this is just like kind of a placeholder to have like some sort of like intelligence later it's not uh it's not necessary you can actually emit these two but it's a good practice i think and we'll have a logout which will take nothing and do something all right so here what we need to create is we need to create a reducer and if you don't know about a reducer i suggest you get familiar with the patterns of redux and uh and then you will know what a reducer is i'm not gonna like kind of go in depth it's basically it receives uh an action with a type and a payload and then it determines what to do with those two depending on your functionality of your application so here we'll have a reducer and we'll call it uh auth reducer oops reducer like this and this will take like i said the state actually i didn't mention that it takes the state because it needs to uh change the state and an action and it will switch on the action dot state so on um or rather the dot type not state so depending on the type of the action it's going to do something of course any switch needs a default case and in the default case we're just going to return the state okay state like this now we'll have another case here usually you'd have like you'd put them in variables but we only have two so i'm just going to have them as strings here uh one i'll call login like this and when we log in we need to return of course we spread the existing state and we want to add the user so because we're logging in and we're getting some data and we want to set our user in our state to this data so we'll say action user equals action.payload now i'll have another case which is case logout so here we'll say log out like this so when we log out we simply want to clear the data we want to set the user back to null so here we'll spread the state oops spread the state and say user is null all right so of course we need to use this reducer somewhere and we'll use it in our auth provider so here we'll create a an auth provider so function auth context pro vita like this and this will take a props and i'll tell you later why it takes a props take some props so here we'll say const state and dispatch actually we need to get user the user reducer hook use reducer and the user reducer hook takes a reducer and returns a state and a dispatch and we need to as well give it um so we'll say reuse reducer we need to give it our reducer so the auth reducer and we need to give it an initial state which is going to be a user of null but this is our initial state so now that we have our this dispatch we can use it to uh dispatch any action and then attach to it uh some type and a payload and then that when that's dispatched this reducer will listen to it and then do um you know perform any action according to that dispatched action so here we need to actually write our login and log out functions so that will pass them down to our component tree so here we'll say const login and so the login is just a function that will take some data and actually since i'm using the keyword function a lot in this project i'm just going to stick to that so i'll say function login takes data and here what he needs to do is just gonna dispatch um it's a action with a type of login and a payload oops a payload of this data that you got well actually it would make sense more sense if we name this user data because we'll know what what it is and we can as well here change it to user data even though it doesn't matter it's just a an argument name but but it's more readable like this all right so here we want to have our logout function as well so function logout and here our logout will actually won't take anything and it will dispatch an action with a type um log out and this will not have any payload because that's how logout works all right so here we need to return this provider so we can use it somewhere else so here we'll say return and we'll open a component and say auth context dot provider and now we need to have a value because this is what we need to pass what this is what we're going to pass to our components that are underneath this context provider so here our value will be a javascript object so we wrap it in two curly braces so we'll say uh user is the state.user so we need to pass the user down and here we'll pass the login function and the logout function as well and here we'll do we'll spread props like this because we might get some props from the top down component and now we need to export two things we need to export our auth context because that's what we're going to use from our components to access our context and we need to um export the auth provider which will use in our app to wrap all of our applications so that it would have access to this uh provider to these functions from the context all right so this is what's going to happen when we log in we want to call the login function or this dispatch this login type with this data which will change the data inside of our context and set our user to the user details that we have so that our application will know that we're logged in all right first thing before we go to any login or register page we need to actually give our application this provider so here we'll say import auth provider from uh so from util or not util actually from all context slash auth so here we'll wrap our entire um so we'll cut this and we'll say auth not context provider and do like this and put everything inside of that so everything inside of here will have access to that to that context all right so first things first we need to go to login and here once we're logged in so we get our login data inside of this result.data.login object so we need to hit this login function and actually pass it this data so that our context will set the user to uh to the actual user data so we need to get that context so here we'll say import ask context from we go back one level and we go to context slash auth like this and we need the use context hook so here we'll say use context from react and here at the top of our component we'll say const actually let me close this const context equals use context and we give it the auth context that we imported and now we have access to that context and remember this this context holds a user a login and a logout so we need this login right here so here before we redirect to the home page once we successfully log in we simply say context dot login and we pass it the data which is going to be a result.data.login right here right right here it kind of doesn't make a lot of sense to have it called login so what we can do we can from result we can destructure data and from data we can destructure login and login we need we can give it an alias and let's call this user data now we can just pass user data right here oops what did i copy so we can just pass user data right here which makes so much more sense than just passing result data login okay we can remove this console log because we know we're getting the correct data and let's do the exact same thing from the um from the register component so we go to the register component and here at the top we got our context so we can say import auth context from we go back oops we go back one level to context slash auth and of course we need to use context hook and here we'll say const context equals what is it use context and we give our auth context and we do the same thing right here we can destructure as well here we'll say from result we get data and from data we get register and register and we will call this or actually no i made a mistake from data yeah we open curly braces and we get register register and then we give it an alias and we call it user data so here we'll say context dot the same login even though this is a register but we don't need to have two functions for something that does the same so we'll say context.login because when registering we're logging in users so we'll say context.login user data simple as that all right so now once we log in or register our entire application will have this data inside of the context so let's save everything and let's go to our app to remove that let it reload so now if we log in say user actually can i see the context all right so let's go to the react dev tools let's open this we see that we have a context provider right here and it has actually this is the apollo provider so we need to have the context provider of the auth provider which has a value here so as we see we have a value result user rather of null and a login and a logout function so if we log in successfully here one two three let's actually put seven we log in there we go we got our user and we get our user's name is um actually get a type name because it's kind of um that's strange that looks like a graphql kind of actually graphql has this type name so ignore myself so we get created that email an id and the token and the username so we have this user in our context but of course we're not using that in our application to change the behavior of our application because for example we want to change this to have our username here and we want to have a logout button here so that we can use it to log up all right so let's go here we can close this we no longer need the app so let's go to our menu bar so menu bar and here we need to get our context because we want to show a different menu bar depending on whether we're logged in or not so it will say import auth context oops these typos from i go back to context slash auth and here at the top again actually i've got the use context as well this context and here at the top we'll say const or actually we can destructure from it the user and the logout so that we don't have to type context dot here we'll say use context and we pass it our auth context and um in case you're wondering by the way just quickly i wanted to explain here i didn't want to destructure the log out uh the login rather and just use login here because it's kind of confusing there's too many login words in this component so if by having here context.login if someone reads this code and says context.login it's obvious that this context is a login from the context so it's more readable right i can have it like this like by destructuring it and just having it like this by super confusing so i prefer to leave the uh the context right there just uh just as a heads up all right so what i want to do here is that so let's cut all of this this is the menu that we want to show when we're not logged in all right i'm going to create a variable i'll call it menu bar because the menu bar is going to be dynamic so we'll say const menu bar equals and we'll say user so if user if we're logged in then we want to show something else we want to show this menu that we had this is what we show when we're not logged in but when we're logged in let's actually paste the same menu but we'll change a couple of things so it's the same menu but here instead of home we'll have a button with the username so we'll say user dot username will have uh their name there instead of the home and i want it to always be active so i'll just remove that condition and it's not gonna have an on click but it's going to be a link to the home right so here see here as well on the right let's remove one and keep one and this will be the log out and this will not will never be active because once you log out the buttons will change so it will not have an on click as well or will it actually it will its on click will be the log out so here we'll say log out because once you click it we want to trigger the context logout function and it will not go anywhere so we can remove this as link and to slash login all right let's save that and let's see if that works so we get our context and we look here and we see that oh yeah of course we need to log in again let's say a user and we log in and we log in cool so our navbar changed and now we have user i mean it says user because this user is actually user if i would log in as i see it worked i wanted to test it and i clicked log out all right so the logout work worked because our user is null and if i want to log in as another user like jane now this says jane and now i have the user jane in my context and if i click log out that's removed okay but there's now one problem because right now if i log in and if i just refresh the page we're back to zero we're not logged in again we need some way to persist this we can simply do this by just storing this token locally on our on this device that we're using and then once the app loads we try to fetch a token if this token is there then we set ourselves to logged in else we set ourselves to be uh not logged out i mean the app does it not we're not doing anything as a user all right so in the auth right here we need to persist the uh the token in the local storage once we log in or log out so here once we log in so we'll say local storage dot set item and we can call this token let's call it jwt token and the data will be inside of this user data so we'll say userdata.token and uh yeah that's it well actually here in the logout we need to remove it so here we'll say log local storage dot remove item and the name is jwt token okay now we have this token but we're not we're not actually checking if we have it once we start the app so let's go up here here we can say if local storage dot get item and it's the jwt token item if this is truthy that means this item exists um actually i want to do an extra step here what i want to do because this token stores an expiration date and time right and i don't want to set our app to be logged in if this one hour long token has expired so i need to check whether it's expired or not but this expiration is actually encoded inside of the token so we need to decode it for this we'll um install a library called jwt decode so we'll say npm install jwt dash decode all right let's let that install we can import that we'll say import let's call it jwt the code like this from jwt dash decode all right now we can use this to decode our token so we'll say now that we've got the token actually we can put it in a variable so we'll say const token equals we can just decode it here actually so we'll say jwt decode and we'll call we'll we'll pass it this this token right here so we'll pass it actually makes more sense to call it decoded token here decoded token okay so now that we have our decoded token we can say if decoded token oops what is that decoded token dot exp because this is where that expiration time is stored and this is stored in in like a what do you call like time from epoch uh date string and we need to times it by a thousand because this is like in seconds we need in milliseconds if this is smaller than or lesser than date dot now that means it's actually expired so what we need to do is we need to delete it and we set ourselves to not be logged in so we need to say local storage dot remove item we need to remove it because it's actually expired we need uh not token jwt token like this else if it's not expired we want to set our user to this decoded token data because it's it's a valid token and we're actually logged in uh but how do we do oh actually no i made a mistake here we don't just pass this initial state like this we can create a variable initial state i mean it's not a mistake but we need to have this as a dynamic value okay let's copy that and here at the top we'll have our const initial state as an object with a user that's null initially but once we do this check if the token is expired we remove it and we leave that initial state with a null user with a user that's not but if you if we're not we need to set this user and then so once we get here we actually set our user to this user so we don't set it to no so here we'll say initial initial state dot user i still misspelled it did i misspell that initial state no that's fine all right user equals decoded no again token like that uh these misspells are getting out of hand guys all right so that should do the trick so let's save and let's go to our app make sure actually we don't get any errors we don't let's go to our app so let's go to our console or not console actually application and here in local storage whoa what is all of this i'm just going to delete everything it's firebase stuff all right so here let's log in as user 136. there we go we get a jwt token and if we log out it deletes it all right but now we need to make sure that it's actually fetching this data once we um re reload so now that we have this in our storage let's actually refresh the page there we go if we refresh the page it's actually getting this data and giving it to our context because again if i check in the react dev tools and open this app open the auth provider and the provider of it the context we'll see here if we expand this value we'll see that the user is set to our current user and you see that xp is here and that i don't know what that is is there it's probably something that has to do with some time to live thing looks like to be the same i don't know whatever all right so yeah so that's that for managing um our user state uh we will use this in the well actually i forgot to do something i forgot to handle some edge case because if we now still go to register that page is still accessible now of course that's not good behavior because we're logged in we wanna we don't wanna see we don't want to be able to access the login and the register pages all right let's fix that so let's go to our app for we can do this or actually let's uh make this into its own component because uh we'll make the app uh component massive otherwise or the uh the app file so here in the util i'll create what am i doing i'll close everything i'll create a uh a thing called auth route so this is essentially going to be the opposite of a protected route component what this will do is that instead of these two login and register routes we'll have an auth route that checks if we're logged in and we try to go to slash login or stash register it's actually going to redirect us to the to the um to the actual home page because we don't need to go to those pages if we're logged in so here of course we need react and we need use context because we need to access our context our auth context from react and here we need to import route and uh what is redirect yeah redirect redirect from react router dom and here we'll say const call this auth route or we can have it as a function function uh auth route and this will take um this will take some props and inside these props we'll have a component so we'll pass down our actual route component but let's give this an alias of component with a capital c so that we can use it as a component i know that's confusing but hopefully you'll understand when you see what i'm gonna type later so here we need to get our user so we say const um or actually i need to get to the context so here let's say import let's make space between them and say auth context context from go back one level to context slash auth and here we can destructure our user from use context and auth context so now that we have our user we can check so we'll say return let's return we return a route and inside of this route we'll spread whatever we got passed from um from the uh from the thing that wraps this and then we will do a render prop uh expression here we'll say render and we'll open the curly braces and we'll say props and we'll um do an arrow and then we will check for the user here so oops what is this all right so here i'll say i'll tap this in and we'll say user and then do a ternary operator so if we have the user then we just return a redirect redirect to um to slash like this and then else we will just return that component that we got passed down component and we will give it these our props that we we have received so props and then we close it like this now of course we need to export this actually i need to close this route so like that and here we'll say export default auth oops auth route all right let's save that let's go back to our app and here we'll import that we'll say import auth route from uh the same level util slash auth route and here instead of doing that we'll just say auth route and here as well we'll say auth route and pass the same stuff so what this essentially does is uh we'll do an author out which is this component right here and we'll pass all these attributes right here the exact the path and the component and once we get here and we get our user if we have this user inside of this route we will render oops inside of this wrap we'll actually return it as a redirect which will just if we click it it will just i mean if we trigger it it will just redirect to slash but if we don't have a user we're just going to put that component that we have uh with these props that we just passed down here i hope that makes sense all right so let's look at our app so now that we're logged in if we go to our uh to our login page to log in now we get redirected immediately to the home page and if we go to register as well we get redirected all right so this is it for this class in the next class we will actually start to work on posting data and we will add the post form here and we will be able to add some more posts as this user that we're logged in so now that we've set up our auth context for our application to know whether we're logged in or not now we can use that the information to decide on whether to show something or not one example of this is we're gonna now uh add a post form for us to be able to submit a post as a user from the home page so let's get to that all right let's go to our app make sure you have your server and client running uh i do on mine so i'm just going to close this terminal window let's go to the home page so home and here right here at the top i want to show another column if we're logged in and put that post form in that column so here um before this loading tag here we'll say grid actually no we need to get the user from the context first here i'll say actually here we'll say we'll import the context so import auth context from go back to context slash auth so here we'll actually need to use we need to get the use context hook as well so here we'll say const we can destructure the user equals use context and we'll pass it our auth context like that now now that we have the user so here we'll say if user we will render this markup actually not percentage we'll do and and like this so if we have a user that means if we're logged in let's show this form so here we'll say uh what is it grid dot column that we want to show and let's close that and inside of here we'll put our form but i want to put this in its own component because otherwise this will be massive and we'll have another mutation written as well here on top of this query that we have so here i'll simply say post form and close this tag of course we haven't created it yet but we will so here we'll say import post post form from so here we're in pages so we have to go back one level and go to component slash post form all right let's uh close this let's go to our components and create a file called post form so js and let's say rcf and tab doesn't work oh it's rfc anyway it refuses to work for some reason let's type it manually these snippets sometimes are weird maybe it's interacting with another extension all right so here we'll say function post form oops and it's going to do something and we need to export it as well so export default post form all right let me close that so here what we need to do is we need to actually import the uh the form from semantic ui so it's a import form from semantic ui react and we need our custom use form hook as well so here we'll say import use form from go back one level to util slash hooks so all right let's go to our component here we'll say return and let's open our form this will have a on submit of on submit on submit and let's close that and inside of here we're going to have uh actually let's put a header first let's put a header too saying create a post colon and here we'll have only one field but i'm going to have it as a field because i want the button to be inside of it contained in it so here we'll say form dot field and close this and inside of here we'll have the form dot input element and this will have a couple of props so we will have a place holder holder will say hi world like the name of the app and we'll have a name let's call this body because this is the body of the post we have the non change of on change we'll get this from the use form hook so he'll have a value which is going to be values.body oops dot body and we'll have as well an error which we will handle later or actually we'll we'll handle the error later for now let's just have it like this and let's put a button a submit button so it will be of type submit and let's give it a teal color so color teal let's close that and it will say submit and here let's bring the button as well from semantic ui all right so now we need to use our use form and create these values and unchange and whatnot so you will say const values and on change and on submit submit as you're used to the custom hook we'll say use form and we'll have a callback let's call it create post callback and we'll have an initial state which will just have a body of that's an empty string all right now we need to actually write our mutation to persist a post to our database so here let's write the mutation so here we'll say const what do we call it create create post mutation and we need to bring gql so let's say import gql from graphql tag graphql so here we'll say gql open the template string and we'll say mutation oops all right let me type that down we'll say mutation let's call this create post and this will take a body of type string and that's required and inside of here it will call the create post mutation that we created and it will pass it a body of the value body like that so let's actually get everything that we get back so the id the body the created add the username we've got the likes with everything inside of them so we get the id of the like the username and the created ad and we'll get the like count we'll get the comments and from comments we're gonna get the id the body uh the username and the created at same stuff that we get from uh fetch all posts and here we'll get the comment count as well and yeah that's everything all right so now we need to use this mutation so here uh okay we need the used mutation hook so here we'll say import use mutation from uh at apollo slash react hooks and here we'll say const uh create post and uh we'll get actually the way we handled errors on the register and login page was that and we did we used the on error method and then we set them to local errors but here it doesn't make sense because we only have one error and we don't want we're not going to extra extract it from a deeply nested property so i'm just going to get it like this i'm just going to get it from the um this second parameter so we will say error like that and we'll say use mutation and we'll pass it our create post mutation and we'll pass it our variables which will be the values which only holds the body so we'll have an update and or have i been used i think i've been using the function form so i'll stick to that so update and we'll emit the proxy and we'll have the result and here we'll say um we're just going to console.log the result for now and we need to reset actually the the body field because we want to empty the the body field once we submit it all right this should be uh fine we shouldn't have any errors so let's save and let's look at our app cool we don't have any errors all right let's look at our app okay we get an error now because create post callback yeah it's not defined and on change i'm gonna misspelled something here uh yeah on change like that and we need this callback so this callback needs to be here and it will only call the create post like that actually i forgot to add the function keyword function like that all right let's save okay so let's open our developer tools and uh let's login we log in okay now that we have a token but now if i submit a post of course it's going to fail because it's going to ask me authorization header must be provided now we need to set up our apollo client in a way that once we have a token in our storage we need to get that token get it and add it as an authorization header automatically without having to add it each time we send the request we can do this by using something called uh apollo an apollo link context link context and let's go to the apollo graphql website and so yeah this actually no it's not this page i was looking for a different page apollo link context okay so yeah we'll use this uh set context uh function from apollo link context and the way this works is uh it kind of works like a middleware so it sets a context of this request and kind of modifies whatever you want to like do before that request is pros um kind of forwarded towards the http link so let's install this and actually set it up so i'm going to open a new window and say npm install actually let's cd into the client first and i'll say npm install apollo link context like that so we need to set it up in our apollo provider so let's go to our apollo provider and here let's import that so we'll import the set context function set context from apollo link context and here we'll create this new link and we'll say uh const auth link equals set context and this will have a handler this takes a request and a previous context that we can kind of get data from and edit and forward uh to the next operation but we don't need any of these parameters so we can just emit them and just do like this just an empty empty argument list and here we need to get our token from the local storage so we'll say cons token equals local storage dot get item and remember we named the jwt token so now that we have it we need to set it as a as a authorization header so here we'll say return because this will modify the um modify the current request so here we'll say return and we'll do an object and inside of that there's another object and we have a or actually no that's going to be inside of the header so we'll join object and inside of that we have a headers and we'll add an authorization header so author authorization and we need to check if we have the token because we might not have it so we'll say token and we'll do a ternary operator so if it's the case if it's uh if we have a token want to say bearer and do like a template string so we can add a variable here and then let's put the uh token here else we'll just uh add an authorization header with an empty string uh value now this will kind of merge the existing headers of the request with this uh headers object that we gave so it will just add this authorization header all right of course now we're not using this yet so let's use that or actually let me put this on top of the client declaration here because we need to use it here and here we just need to add concatenate it to this link but it needs to go before the http link so we can say auth link dot we'll use the javascript concat function and say concat and pass this our http link all right this should actually add the token to our request and successfully send any protected api calls all right let's save this and let's go to our app let's make sure we have a token all right we do we have a token and it's uh it's valid i logged in less than an hour ago so now if we say let's go to our network clear everything out and we just send some gibberish we press enter we get a request here all right it says args is not defined let me check the server code okay i added this line for validation last time but instead of saying just body i actually added this args object so let me save that and run the server again and test all right let's test it click submit and there we go we get a 200 response and we get create opt create post and it actually you know returns us the post that's been created so it's successfully been created now of course it's not showing on the front end because we hadn't added any code to uh to do that all right so if we refresh and we fetch the post again there we go that's our post right there now the way we're going to show this post on the front end is we're not going to use context we're going to use apollo cache in memory but the problem with that is if we look at the apollo dev tools if we go to cache you'll see by the way in the polar dev tools you can see right here the queries the queries that we're sending so once the app loaded it just sent this get posts query to get all the posts and if we go to cache there are a couple of things here but if you go to root query you'll see that all the queries that we sent we send are actually stored separately so the get post query right now is caching five posts we need a way to directly access this cache and modify and add this new post that we just added and we can do this uh i hope this time the google search works so let's go to yeah caching data let's go a bit down it's right here yeah direct cache access so what we need to do we're going to access the cache directly and we're going to use now here they're using render props and they're using the client variable or object but we don't have access to that but instead we have access to the pro the proxy object which will let us perform this is a bit confusing but you will understand it the more you use it we actually gonna gonna perform graphql queries on our existing client data instead of actually reaching to the server all right let's actually apply this so let's go to our post form and here on the update instead of just log in the result we want to access this cache so here actually we're not going to omit the proxy we're going to write proxy like that and we're going to say proxy dot read read query and we need to pass a query here and this query will be let's say if you had the po get posts query and you sent it here it will actually fetch the post from the client data that's stored in the cache but the problem here we're already using this query in the home page we want we don't want to type it again so what we can do we can outsource it to its own file so let's copy this entire query from the home page let's copy let's cut it actually and in the util folder let's create a file called graphql.js and here we'll say we'll export it we'll export const fetch post query like that and of course we need gql so here we'll say import gql from graph ql tag now in the home we need to import it and use it so here we'll say import fetch posts query from we go back one level to util slash graphql now we don't need gql anymore so in the home it's going to work the same the same way it did before and in the post form now we need to get that fetch fetch posts uh query so we'll say fetch posts query query from we go back uh one level to util slash graph ql all right so now in read query we just pass this fetch posts query like actually but we need to give it uh to put it in a query variable and we just pass it like that now let's put this in a variable so we'll say const data equals proxy dot read query and we pass that query now all that data that's in our cache is sitting inside of this data variable so but it's inside of an another variable called get post because remember this is this data that we're getting is the root query it's this data right here so our posts are inside of get posts so here we need to edit that get posts entry so we'll say data dot get posts equals now that we have the result here we can just say open a an array and we want to put it at the top because this is the newest post so we'll say result dot data dot get post because this is where our response is stored and then comma and then we'll spread the existing get post so we'll spread the existing posts now of course we need to persist this so for this we'll use proxy.writequery and here we'll say the query is fetch post query and the data will be just this data object right here all right let's save everything actually let's save all files make sure you save all files now let's go to our app okay so it says graphql cannot resolve graphql i misspelled the name of the file here graph graph ql let's save let's refresh no such okay i misspelled it somewhere else probably in the home okay that's uh renamed and here as well it's renamed okay third time is the charm all right cool so now if we go to our cache we see that we have five posts and if we post a new one all right it breaks so it can't cannot read property id of undefined okay because i made a mistake here the data is actually stored in create post not get post because that's the name of the mutation all right so let's save this should work now it did send that mutation but it didn't persist it properly in the cache because i misspelled the i made the gave the wrong mutation name so now if i post one and if we look at the cache so look at the root query we have six posts so if we submit this now it's seven posts and it actually shows so if we say another one it's actually shown on our front end all right that's cool one thing that i wanted to show you is that here when you look at the queries if we go to this post and we go back it sends another query called um get posts but i've set up our server code in a way that each time we send a request from each of the resolvers let's say the create post resolvers is gonna console.log create posts and the other the get posts will console.log that and the getpost will console.log that just for us to see when the these actual resolvers are being hit so here you see we get posts once but in our app in our front end if we go back and if we go back to the home page it sends that query but from our server it doesn't print that again because it's actually sending that query to the client side um cache not to the server side the first one is the only one that's actually being sent to the server but the other two are actually sent to the client side cache just for you to bear in mind if you see this list of queries and you're thinking this is actually sending too many requests to our servers it's not it's just sending that one first request hello my dear class it's nice to have you here welcome to class number seven where we write some more code all right actually one thing that i forgot to uh to do last time is to show the validation error if we actually submit an empty post because if we click submit if we open our console we see that we get an error but we're not showing it to the user so let's fix that let's go to our app let's go to the make sure you have your server running let's go to the post form so here we've already extracted the error object so we just need to go under the form here and we check for it so we'll say um error and end and that means if we have this error then let's show a div with the class of ui so dot ui dot error dot message let's tab this has given us an error because we can't put two uh sibling com elements under one component so we can just do this which is shorthand for fragment and we can just put that code back in and now we can say we can put a ul with a class of list and put our errors and we only have one so we don't need to loop through anything we just put in an ally and inside of that we'll put error dot graph ql errors and we get the first one dot message like that and that should take care of it uh one more thing actually here inside of the input we want to use the error boolean to invalidate the input itself and make it red so here we'll check for error we'll do a ternary so if error is truthy then uh the error is true else it's false all right let's save and make sure we have no errors and i've said error like a bazillion times all right let's check now if i don't type anything and i press enter there we go again post body must not be empty now let's give this some margin because that looks uh that looks weird all right so here let's go let's give this a style just an inline style and we'll say put another object we'll say margin bottom oops bottom uh let's give it 20. let's save let's look at that even if you put spaces by the way it will still be not valid all right cool that looks better okay so actually one other thing that i wanted to add is the transition group because right now if we just post something it just kind of snaps in which doesn't look that good uh semantic ui makes it really easy to use these like really cool like transitions if you look at this leaf how it shows how it leaves and we can control uh no pun intended with the leave and leave we can control as well like the duration of the transition we're just going to use this group transition thing which is pretty cool if we look you just get transition from semantic ui and you wrap everything in a transition group here they're using a divider and size and everything but we'll just use the duration so let's go to our actually you know in the home so home and here we'll get transition from a semantic ui transition so right here where we loop through all of our uh posts we need to wrap all of this inside of a transition group so let's cut to this and then here we'll say transition position dot group and here we'll actually we need to put it in curly braces and we'll paste it back so let's save that let's look at it so if we add another one there you go it doesn't just snap in it just shows kind of like it fades in and later when we delete them as well they fade out and then it kind of moves back all right so in this class we're going to work on these buttons make them actually functional and add like a delete button by the way just as a reminder if you haven't subscribed please subscribe to the channel and hit the bell button so that i will annoy you with every video that i drop i usually post three a week so i'm not going to be that annoying okay all right so let's actually jump into the code all right before we work on the like button i just want to um make this comment button it's gonna have simple functionality which is when we click on it it's just going to take us to the page of that of that post and i want to add the delete button on this side as well if it's our post so that we can delete it all right so let's go here let's go to the postcard so right here this um right here this is the comment uh button we're just gonna wrap the whole thing in a link or can we make the button itself as a link actually let's try that so let's remove the on click and here we'll say as uh link and we'll say two equals slash actually this is dynamic value dynamic value so we'll do backticks we'll do a slash posts slash the id because we already have access from to the id from the props all right let's see if that works do we have link imported yeah we do okay let's look at our app all right cool it works so if we click on that it takes us to the id of that post okay let's add the delete button i'm not going to add functionality but i'm just going to add the dummy button for now for us to have the delete button we need to access the user because of course we need to if we have to be logged in and we have to have this post as our post for us to be able to see a delete button on it so here we'll get the we'll import the alt context so we'll say import auth context from we go back one level to context slash auth and we need the use context hook so let's say here use context context like that and here at the top we'll say const will extract our user or destructure our user from use context auth context so right here we don't need this comment on post anymore and here at the bottom right actually yeah here after the uh the like button we'll do a an expression and we'll check for the user so if we have a user so we're logged in and user.username equals username so what this means the username of the user that we're logged in as if it's equal to the username of this post that means this is the owner so we need to show a delete button on this postcard so we'll say and end like this that means if all of this is true then we'll show the following and the following is a button so button um as div and we'll give it a color of red because the delete button and we'll give it an on click for now this is just gonna like um we'll just have like a callback and it will console.log delete post like that and we'll put a an icon inside of here so icon and the name of the icon is trash which is going to give us a um a kind of a trash bin icon all right let's see if that okay so it vs code auto imported those things for me which is pretty cool so let's save let's look at our app so there we go so user all the posts by user which is the user that we're logged in as have this delete button in them but this delete button looks a bit weird let's inspect it okay for some reason this uh ui button inside has some margin some like negative margin on the side yeah negative three let's uh just override that so this icon we can just say style equals uh oops put an object here and we'll just say margin 0. let's see if that fixes it all right cool we can give this button a floated property so this button right here will say floated and let's give it the floater to the right so it floats to the right all right cool it looks much better now it's floated to the right and we can click it and if you click it it's just going to say delete post of course we'll add functionality later all right so the like button what i want to do with it i want to make it into its own component so that we can have like leaner components like i said more modularity plus we're going to need this button on the single post page as well so that will we don't re repeat code across components so this is the like button uh no not this actually it's this let's copy let's cut the whole thing and here we'll put a like button component like that oops like that and so here we'll import that so we'll import import like like button from i'm gonna put this in where are we in components yeah we're in components so so from the same directory like button now this like button is going to need to access some things because this like button needs to know uh the use um not the username it needs to know the number of likes so that it shows it and he needs to know the likes of this post so it determines whether this user has liked this post or not and it needs to know the idea of the post itself so that it would look in those post we can pass it the entire post but that's not necessary well we can pass it a new object uh with just the id the likes and what else uh yeah the like count the like count like that all right let's save and let's create this new component so here we'll say new file like uh button dot js we'll get a couple of things so react and use state oops not parentheses black curly brackets or braces so let me get use state uh from react uh we'll need link because we could be not logged in and we want to go to the home page if we click this or the login page rather from react oops router dom we'll need the use mutation hook from react from apollo from apollo react hooks and we'll need gql as well to write our graphql query or mutation from graphql tag okay so we'll say function like button it's gonna take the props that we had so from that we'll destructure from the post we're gonna get the id the like count count and the likes all right so here at the bottom we'll say export default like button okay we need to access the user here actually we can just pass it here i mean we can access it with the with with importing the context but it will be kind of easier to just prop drill it will say user equals the user and inside of here using that user object we're going to determine whether we've liked this or not because we've if we've already liked this post we want to show the button okay our app is broken but we want to show the button like kind of filled with green otherwise you want to show it like outlined and as well if we're not logged in we want to show it outlined and if we click on it it takes us to the login page so here we need to determine whether we've liked it or not so first thing we use use effect so actually we need to import use effect so we say use effect and our callback so callback like this will uh check so here we'll say if user so of course we have to check if we have a user first if we're logged in and now that we have the likes we can check and user dot find and let's find a like where the like dot username equals the user dot username so here we'll say like that which means if any of the likes on this post have a username of this user that means this user that we're logged in in or logged in as has liked this post so we'll say oh actually we need a liked boolean as well so here we'll say const liked and set liked equals use state let's just give it a default value of false and here if this is true that means it's like so we'll say set liked to true else set liked to false and here we'll give it a dependency array of the user and the likes themselves if any of these change recalculate the value here we need to return our button so so what we copied from earlier we put it here and i think we're going to change actually we're not going to change much here this will be a dynamic value because we don't want to either fill it or not we want we need to determine whether we've liked this post or not so here we'll say we cut that we'll say const like button button like this equals and uh actually we're gonna put it here so let's just put it now like button now here we need to check for the user so i'll write this and i'll explain it right we'll do a ternary operator and then parentheses so if user and now if liked so another ternary operator and here we'll paste that back in but here instead of basic we're gonna have the filled button because we've liked it so it's gonna be filled so else if we've not liked it let's paste that back in and it's gonna be that it's gonna be the outline button now here outside of this parenthesis we do another colon so else if we if we don't have a user that means we're not logged in so we'll have the same button and it's going to have basic because it's going to be outlined but this should be a link to the login page so here we'll say as link did we import link yes so as link to um this is going to be to slash or actually just like that slash login all right i think that should take care of it uh now one thing of course we need to have an on click this like post we need to have the mutation so let's write the mutation down here here we'll say const like post mutation equals gql gql oh i misspelled that okay gql mutation like post is going to take a post id our server code and it's going to be of type id and that's that's required and it's going to trigger the po like post mutation and we'll pass this a post id of dollar sign post id and we'll get a couple of things and i'll explain later why we got those things and hopefully this time i won't forget to explain because i did this thing last time where i said i'll explain later i forgot to explain that thing all right if i do that by the way you can drop a comment and tell me oh you forgot to explain that and i'll explain it to you in a comment okay so i'll leave that like that and now we need to use use mutation to get that function so here we'll say const like post here we'll get the error actually we're not gonna have any errors so here we'll say use mutation we might have an error but the error would have to be that our token is expired or something and that has nothing to do with the like post so we'll just get the like post function so here we'll say use mutation of course we'll pass it our like post mutation and we'll have some variables and the variables will be uh the post id and that's going to be the id that we have from here from our props all right that should take care of that and that's named the same as this one so that should be fine uh everything here should be fine actually let's save all files let's look at our console okay there's a couple of problems here we need to get button and label from semantic ui so let's say actually up here we'll say import button label and icon from symantec ui react let's save user is not defined oh yeah we need to actually get the user as well from our props uh like post is defined but not be used in postcard yeah okay postcard oh yeah okay so this is useless now let's remove that and let's save no duplicate props allowed in postcard line 30. okay so we're passing we're passing the user oh no hi here okay this should be as the link let's remove the div all right okay cool so oh that's working all right so this one that we've liked is actually filled this one that we haven't liked is empty and if we click there we go it likes and it actually increments it and if you notice if we go to our apollo cache you'll see that it's actually updating okay let's make this a bit bigger cache root query so let's look at the first one right it has zero likes but if i like it now it's actually updating it now you might be wondering how is it updating the cache without us having to say proxy.right query or something like that but the way that's happening is because let's close that if we look at our mutation we're specifying the id of the post that we're getting back so we're getting back a resource of type post and apollo is smart enough to realize okay we're getting a resource of type post and it's got this id that means let's update our uh the post that we have with this id with any of these fields these new fields that we've received so it does it automatically we don't have to do anything which is pretty amazing actually so we didn't have to write any code to change our clientside state one thing that i don't like right now is that if we like a post it kind of stays focused focused when we have to click away for the color to change so let's inspect this and this the ui button okay so the button has this color so let's copy this this is the normal color so if we focus it becomes this dark color okay so it's this rule right right here let's copy this rule all of that okay okay let's go to our app css and here let's paste that and we'll say background color background color and let's take that color again from here it's got that let's paste it here let's save everything all right so now even if it's focused it's going to be that bright color and not the darker color all right so that's working and so that's i think that's it for this video yeah that's it hello class so instead of going to sleep on time tonight i decided to record this video sleep is for the week hey let's hope i don't regret this decision in the morning all right so welcome to class number eight i think it's number eight yeah all right so last in the last class we did these buttons and we uh added functionality for the like button but right now we're going to work on the single post page because right now if we go to it it's just empty so um the way we're going to approach this we're going to we're going to get this id from the url and then use the get post get singular post mutation or rather query and then fetch that post and display it in this page so let's get to that okay first thing is let's create a route for that by the way make sure your server and your client are running as per usual let's go to the app.js and here at the bottom of the container we're going to add another route so route and we'll have exact path will be slash posts slash colon post id like that and the component will be a new page called let's call it single post let's import that up here so import single post oops from pages slash single post okay let's create that so here in pages i'm going to create excuse me singlepost.js and here the usual will get react from react and we'll say function what's wrong with that import okay there's some ts thing for some reason but let's let's ignore that for now let's say single post i'm gonna need the props and i'll tell you why later here let's uh export default single post so here first thing we need to get the post id from the url so we'll say const post id equals and we'll get this from props dot actually this is one other reason why we need props dot match dot params so the url parameters and we call this post id so we'll get that and let's write the mutation right now or the query rather so here we'll say const we'll call this fetch post query this will be gql this would be a good time to import gql as well so here we'll say import gql actually gql from graph ql oops graphql tag and here we'll say query and this needs to take a post id of type id and that's required and this will run the get post query and we'll take a post id that's actually our post id and here let's get everything so id body created add username and get like count i'm gonna get likes and from that we'll get uh just the username and we'll get a comment account we'll get the comments and get from the comments we'll get the id the username uh the created ad and the body yeah that's it let's uh save so that formats and here let's start to create our markup and then and then see what we need so this will be conditional so we'll say let because this depends on whether we're logged in or not so we'll say post markup or actually not not logged in whether we have the data from the query or not yet so we'll say if um actually let me get the get post so we'll get the use query hook so we'll say import use query from at apollo react hooks and here we'll say const and we'll get data and straight away from that we'll get the get post field and here we'll say equals use query and we'll pass it the oops fetch post query and this needs some variables and the variables will be will be our actually we'll do an object and we'll say post id like this meaning it's going to be post id and the value will be this post id right here um we can here do a console log of post id to make sure that we're getting our post id just in case and here so here we'll say if not get post because we might be still loading we'll say post markup equals and here we'll just put a paragraph and say loading post uh feel free to put a spinner here but i'm just gonna leave it as a um as a paragraph for now and we'll say else so else if we have the post uh we need to get all the fields from the post so we'll say const and we'll use destructuring and we'll say id body created at get username what else comments get likes uh like count and comment count say equals uh what is it uh from yeah from get post let's make this wrap so press alt z okay so now we can say post markup equals and we'll use the grid and inside of here of course we will need to import these in a bit but let's uh do a row here and uh right here i want to have the um an image but of course this is hard coded so it's the same like in the postcard component so i'm going to grab this source attribute so i'll just copy that and we'll come back here we'll say so this will be inside of the image tag oops image like that and let's paste that source attribute and i'm going to give this a size of small and let's make this float to the right so we'll say float oops float equals right and we can close it like that actually this needs to be in a column so i'll cut that and say grid red dot column and let's actually give this a width of two and here we'll put our image back and now we're gonna have the rest so the rest will be a grid with a width of 10 because that's the the number of remaining spaces let's remove this image and here we'll have our card so let's put card let's give it the property fluid so it takes up all the width and here we'll have as per usual card dot content here we'll have a header so card dot header this will be the user name so i'll put uh an expression and say username or curly braces but username we'll get meta which is the created art so card dot mata and oops here we'll say curly braces and we'll say actually we need to format it so i will say we need to import moment a moment it will say import moment from moment let's go down here we'll say moment we'll pass it the created at and say dot from now and uh yeah that's fine here we'll say card description scription and here we'll just put the body of the post um underneath these uh this card content let's put a ruler a horizontal ruler to have a line between them and here i want to put the like button and the comment button just like in the card since we have those in their own component we can just attach them here so here we'll say um another card uh content this will be the x we'll give this extra the extra attribute and here we'll say like button we need to import that but let's actually we need to pass the user to the like button so we need to import the um the auth context so here we'll say import auth context from go back one level to um context slash auth and we need to get the use context hook from react so use context up here oops con text and up here we'll say const and we can destructure it we'll say const user like that equals use context and we'll pass our auth context so here we'll pass our user and it doesn't matter if we're not logged in so right here in the like button we're going to say user equals user and we'll pass the post like we did in the postcard but we're just gonna of course pass the id the like count and the likes array so that the button determines whether we've liked it or not and uh here let's close that and let's put the comment button which is not going to do anything for now but we'll make it do in stuff in the future let's give it the basic attribute and or actually no let's make it as a div and here let's say label position equals right so we'll have that um kind of arrow to the left so let's say on click equals for now it's just gonna console.log console.log and let's just say comment on post we'll make this do stuff in the future but for now we'll just leave it like that and inside this button we're gonna have another button so a button this is the basic button because this is the uh kind of cloud thing uh here we'll say color is blue oops and inside of the button we're going to put the icon so it'll say icon um the name of the icon did we use comment or comments so right here yeah comments so we'll keep using the same icon so here we'll say comments let's close that and underneath this button we need the label and we need to show the number of of comments so here we'll say label basic and the color is blue and this label will be pointing to the left pointing left like that and inside the label we're just going to have comment count um here actually we need to show the um the delete button uh but we already have that in the postcard but actually it's not doing anything right now i forgot to add functionality to the delete button because right now it's not actually deleting the post so we can take care of that right now so what we need to do we need to put this delete button into its own component so let's go to the yeah right here so where this button is we can just cut this and we'll say if user and the username of the user is the same as the username of the person that posted this so we'll say here delete button and this delete button is to access the uh post id so that it would use the delete post uh or remove post mutation so here we'll say post id equals we have this id yeah we have this id and id we can just say post id equals id like that and uh we need to pass it um actually i don't think we need to pass it anything here yeah let's just um close it off and here let's say import delete button from uh same directory delete button because remember this is we're in the postcard and here in the components let's create a delete button.js file and here we'll import react and of course we'll import gql from graph ql tag and here we'll import the use mutation hook from add apollo react hooks and uh we're gonna need the button because that's what we copied actually let me make sure let me check what we copied so here i'll say function delete uh yeah that's showing an error because of this i'll just comment this for a second delete button it's going to take the props and let's just export that for now export default delete button let's say return let's put that okay so we need button and icon so here we'll uncomment that we'll say button and icon from semantic ui react so let's go to the bottom here and let's write the delete post mutation so we'll say const delete post mutation equals gql open the tag template and we'll say mutation delete post and this will take a post id of type id and that's required and it will just call the delete post mutation and pass a post id of value post id now we don't need the return um from this we just need to make sure that it runs successfully so we can just leave it like that and we'll go here and use our used mutation hook and get the uh the callback function from that or the trigger function so we'll say um const i'll say delete oops delete post equals use mutation and we'll pass our delete post mutation and here we'll need some variables so inside of this we'll say variables and we'll have post id like that and we'll have an update here update i've we can get a proxy well i don't think we need the proxy actually for now we'll just say update and um the way i want to set up this i want to set it up so we have like a confirm uh model because we don't want to if a user by mistake clicks the delete button we don't want it to immediately click we want kind of like a model to appear that says are you sure you want to delete this post and then when a user then clicks yes i'm sure then it actually deletes it so what i'm gonna do here we're gonna get something called confirm from from symantec ui so get that confirmed but this this has a boolean like whether it's open or not so here we'll uh actually let's get use state as well so bear with me a moment this will make sense in a in a second so here we'll say const confirm open and we'll have set confirm open equals use state and by default it will be false oops false and let's go down here in the um in here so underneath the button we're going to put the confirm so we'll say confirm and here we'll have an open um boolean which will be the confirm open so confirm open like that and by the way this is in the documentation if you want to check check it out and you'll have a an on cancel function and this is when you click so you get this model and it says yes or no and this would happen when you click no so when we click now we just want to close the uh the confirm model we don't want to do anything so we'll just set this confirm open to false so we'll say set confirm open and we'll pass it the value false and we need an unconfirm so on uh confirm and this is so this is when we actually uh say yes we are sure we want to delete the post so we want this to call the uh the delete post function from used mutation and here let's close our confirm this is a problem because we have two sibling components inside one component or rather you know elements so here we can just wrap everything in a fragment so that error is gone now and let's go up here so here in the update uh once the once we reach the update that means the post has been deleted successfully we want to close the model so we'll say set confirm open to false and of course this will not disappear from from our front end because we're not removing it from the cache but let's do this later so i'll put a todo here so i'll put a comment and say to do and say uh remove post from cache so that the change is reflected on the front end without us having to fetch the posts again and um okay so we'll say here oh okay we need to put a comma here by the way this is the to do highlight extension that that highlights the to do all right so i think that's fine or actually here the post id is not just post id it's coming from the props so we need to say uh prop or actually we need to just destructure it so here we'll say post id like that uh i think that's fine so let's save the delete button and let's save the postcard but let's not save the single post and let's go to the pay uh to the app component uh and just remove a comment for a second the route and the import so that we can just test the um we can test the postcard alone let's make sure we don't have any errors okay so set confirm open is not defined because i misspelled that right here that's a capital c save all right cool it's running let's check it out okay so we get syntax error name found something let's check our mutation there's a problem there mutation delete post okay here it's just a post id like that and uh i'm gonna do it like that here all right okay so we get this and if we click on the delete okay nothing happens it doesn't delete it okay there's something wrong okay we want when we click this button it doesn't just say delete post it actually sets the model to to open so we'll say set confirm open to true and let's save okay let's look at our app so now if we click it sets the model to open if we click cancel it just closes it and it doesn't delete it we can just refresh to make sure it doesn't delete it and if we click delete now and you click ok it actually deletes if we open the um if we do f12 when we go to the network and uh for some reason they didn't show up because i didn't open it previously but if i um refresh you see that that post was deleted so if we post a new one and we click here and we delete it of course it doesn't remove it like i said but if we refresh it's actually deleted okay so the delete post button is working so now in the single post we can um we can start to we can put that delete post button and it will work as well okay let's close this terminal and let's uncomment the import of the single post component and uncommented the route let's save that let's go back to our single post so now now here at the bottom right here after this button we can put the delete button so we'll say if user so the same stuff from from single post uh from postcard rather so if user and user dot username equals username which is the username of the post we'll say and and we need to render our delete button so you can say delete button and we're going to import it in a second and we're going to pass it post id equals id oops id like that and let's close that and let's go up here and we'll say oh we didn't even import the like button actually we need to import a bunch of things here so we'll say import oops import like button from go back one level to components slash like button and we can copy this one line paste it one more time and ctrl d and say delete button and we need to import a bunch of things from semantic ui so we get the grid the image the card the button okay so here we'll say port button card um grid image from semantic ui react and let's save okay so we need icon and label as well so we'll say icon and label let's save all right so it says post markup is assigned a value but never used because we need to return it we need to return something actually some markup so here at the bottom we'll say return post markup let's say all right says comment comments is assigned a value but we're not gonna worry about showing comments right now all right so let's look at our post all right there we go so this is a post by user okay flux this is a post by user and we get the delete button so if we click on that okay so it deletes it because it actually deletes it but it doesn't we need to redirect to the home page so you see if i go to the home page that post that was called another one is removed so the way we can do that uh we can pass a call back to the delete button so here let's say callback equals and let's call this delete oops delete button callback let's be let's be kind of uh or delete post expressive with our function naming so here up here we can say function delete post callback we say props dot history push and we'll just go to the home page so we got props so that should work and inside the delete button uh we need to take that call back so here we'll destructure as well callback and so right here actually in the update once the uh the post is deleted we need to call the callback okay but the problem with this actually the callback might not we might not have a callback so we can say if callback we call callback like that because from the postcard we don't actually have a callback so we'll do this if check okay let's check that we have we have no errors we don't so if we go here go to this thanks guys and we click on delete and we click ok there we go actually read our access to the home page and is deleted because if we refresh we see that it's actually deleted all right let's now add this um remove let's remove this post from the cache once it's deleted so let's remove this to do comment and we need the proxy right now so we'll from the update we'll take proxy and we'll say we need that fetch posts query so here let's say import fetch posts query from actually what is that where is that util slash graphql ql if i can talk so graphql like that and uh right here yeah right here before calling the callback we'll say uh like we did for the adding post we'll say const data equals proxy dot read query and we'll pass a actually an object oops an object with the field query and that query will be the fetch post query so now that we got the data we'll say data dot get posts and we'll say equals data now we need to remove a post so we'll say data get posts dot filter so we want to keep all posts so we'll say postwar post.id we want to keep all posts that don't have the same id as this post id that we just deleted and we'll say proxy dot write query and here we'll say query is fetch posts query and the data is data like that okay let's save let's check out our app let's post a new one and now if i click delete and i confirm there we go it's gone and uh if we go to the single post page well by the way the uh we can test the like button so we can like and go back to the home page and it's actually liked so that's working from within this component so from uh from within this page we can click delete post it redirects us and it deletes the post okay so that's it for this video welcome back to class number nine in this series um in this one we're going to be adding the comments on the single post page and allowing users to post them and delete them and all that good jazz all right so let's get to it okay let's go to our code codebase so here in the single post component i'm going to scroll down actually here where this card ends still inside of the column we're gonna do the way we're gonna we're gonna display them is i could put them in a component of their own but i don't see any need in an application this small so we already have comments out of this um thing like destructured from get post which by the way is the reason why we have a warning here because we're not using comments but we're gonna use them now so here underneath the card we're going to open an expression say comments oops not comment count comments dot map and for each comment we're gonna oops not like that yeah like that actually confuse myself for age comment we're going to return the following so the comment is going to be a card of its own and yes we can nest cards so let's give it the property of fluid so it takes all the width and here we'll give it a key of comment dot id which is unique so inside of the card we're gonna have a card content so card content and inside of here we're gonna have the header so card dot header and this will be the username of the of the person that commented so comment dot username like that and underneath here we'll have the meta card dot meta which is when it was posted so here we'll use moments to format it i think we have yeah we have moments because we formatted the date of the post itself so here we'll say moment oops moment uh moment with one m in the middle and here we'll pass comment dot created at and we'll say dot from now like that and here we'll have the card description kind of similar to the actually almost the same as the actual post but this is these are comments so here we'll say comment dot body all right let's save let's make sure there's no errors there shouldn't be any errors cool that warning for comments is gone and if we switch to our app okay this one has no comments we can go to this one has three comments and there we go we get comments and uh yeah i agree with this comment okay so let's make it so that um our comments we can delete and by the way i need to log in here so i'll say user and the password is one through six so let's go back to that one where is it this one so here uh since i'm the user i want to be able to delete this comment so let's go back to code and i'm going to add the button right here inside of the content so here we'll say if user because we already have user from the context we say as well and user.username and equals the comment dot username which means i am or whoever this user is is the owner of this comment so we'll say and and we'll render the following and we're actually just going to render the delete button and we'll pass it the post id and which is the id and we'll pass it the comment id and uh i'll explain in a second which is comment dot id now what we're gonna do we're gonna go to the delete button component so let's go to the delete button and here we're gonna make it so that this can delete a post and it can delete a comment as well and the way we're going to do this we're going to make this mutation right here dynamic let's go down here let's write the delete comment mutation so i'll say const delete oops delete yep that's spelled correctly comment mutation this will be gql open template string and inside of here we'll say mutation and delete oops delete comment and we'll pass it the post id which is of type id and it's required and here i need to put a dollar sign and here we'll say dollar sign comment id and this will be an id as well and that's required and here we'll say delete comment and we'll pass the post id which is going to be the dollar sign post id and the comment id which is going to be the dollar sign comment oops id i'll get the id we get the comments and get the from the comments we'll get the id the username the created ad and the body of course and here we'll say we need to get the comment count and yeah that's fine we can save let's go up here now here what we're going to do is instead of just saying delete post mutation here we're going to put another variable we'll just call it mutation like this and this will be dynamic so we'll say const mutation equals and here here where we destructure post id let's as well destructor um instructor i can't talk guys sorry so we'll destructure a comment id and here what we need to say is comment id uh we'll do a ternary operator so if we want to delete um if you want to put this button to delete a post we're just going to give it a post id and a callback or maybe not a callback and if we want to delete the comment we're going to give both of them so if we have a comment id that means this button is a on a comment and not on a post so we want the uh delete actually no we want the delete comment mutation here if we do have a comment id else that means this button is on a post so we want to use this mutation the delete post mutation now here we can change the function name we don't have to but it's better if we do and i'll call this delete post or mutation because it can be either and we'll do the same we'll say use mutation or we'll pass this mutation whichever one it is and um one thing we need to change by the way here is let's wrap all of this let's cut this and we'll say if not comment id do all of that oops uh paste because if we're deleting a comment we don't want to do this because um it automatically removes the comment and we don't want to remove any posts from our get posts but if we do delete a post then we will not have a comment id then this will execute and everything will run just fine and here in variables we need to also pass the comment id and by the way this is not a problem if we're calling the delete post mutation this will just be ignored in that one and it will be null anyway so here uh i think everything is fine except here we need to change delete post or mutation right right there and let's save this let's go back to our single post save that and let's look at our app so there we go we get a button and if we click it and we say okay there we go it deletes the the comment and with hopefully no errors yes no errors cool all right let's add a input here so that if we're logged in we are able to post uh comments to this post all right let's go here actually right here just above the comments we're gonna say i'm going to open an expression and say if user because we want to be able um we only show the comment input if we're logged in so if we use a if user render the following and we'll have a card as well here it's going to be fluid and before we do any of this let's create the create comment mutation so let's go down here let's say const let's call it um or submit makes more sense uh it doesn't matter this name but so uh submit comment mutation equals gql and here we'll say whoops we'll say mutation and it will take two things the post id uh which is an id and that's required and actually here a dollar sign and here we'll take the body and that's a string and that's required inside of here we'll say create comment and we will pass a post id which is going to be dollar sign post id and here we'll pass a body which is going to be dollar sign oops dollar sign body and we're going to get back a post so here we'll get the id because we need to get the id so that apollo knows which post to update and we need to get the comments because that's what's been updated in this object and we want to get id body created at and username all right inside of here we'll say comment count because that updates as well so we need to get it back and update it and yeah that's fine let's go way up here underneath here we'll say const and will this array destructor the structure submit comment from use mutation and we got used mutation no we don't let's get that use mutation from react polar hooks and here we'll say mutation and we'll pass the submit comment mutation and we're going to have a an object here i have an update function or just a regular function an arrow and here we'll uh what we need to do is actually we need to as well create a comment state variable so we'll say const and i'll have a comment do we have your state actually we need to use state use state and here we'll have a set comment whoops equals use state and the original state of the comment is just an empty string all right so we want once we submit the comment we want to empty the uh the input so here we'll say set comment back to an empty string and we need to pass the variables for this mutation so variables is this object with the post id which is just this post id so we'll leave that like that and with the body of um comment this one right here there's something wrong here i'd put double colon all right that's fine so everything's fine here we just go back to our mockup here and we actually add oops where is it oh right here oh yeah right here it closed itself that's why it confused me all right so here we'll close the card here we'll have a form actually before we need to to have like a sort of paragraph that says post a comment and here we'll have a form uh do we have form yeah we don't so here we'll say form and let's go back down here inside the form we'll have an input um thing is i want to use form input but there's a problem which i'll uh i'll explain later why i'm using just the regular material sorry not material ui semantic ui css i'll explain later so here we'll just say div with a class of ui action input oops input and fluid which is kind of like the equivalent of using field input or input or rather form input so here we'll have a traditional html input and here we'll have a type of text and a place oops place holder and we'll say comment dot dot i have a name we will say just comment like that will have a value which will be the state variable comment we'll have an unchanged on change we can just inline it here we'll say event we'll take an event the event and we'll say set comment to event dot target dot value like that all right let's close this input and here we need a submit button so say button type submit and here we'll have a class name of uh ui button and teal for the color teal and here we'll say disabled if the comment uh if there's no comment there's no nothing written in the input field i want this button to be so disabled to not have to deal with the validation so if comment.trim equals an empty string then this button will be disabled otherwise it will be enabled and it will be clickable and if it's clicked we'll say so we'll say on click submit comment all right here we'll say submit all right that's gonna that should work fine it should trigger the submit comment and that will send a submit comment mutation with the variable comment which has changed because we typed stuff all right let's save this and let's make sure there's no errors there isn't sweet let's go back here and oh that looks weird let me make sure i got everything right oh yeah because everything inside of a card needs to be in a card content so let's cut everything and say card dot content it gives it that padding amongst other things let's paste everything back save let's go back to our app there we go that looks much better now if i write something now this is clickable and if i press enter nothing happens all right let's uh inspect so many errors uh error code 400 response not successful let's check out what happened with the actual so let's go to apollo mutations and we get this mutation the body is okay and the post id is correct um let's try to run this mutation strange post id okay post id variable post that is used expecting type string really uh let's go to our graphql type definitions create comment oh i made a mistake here post id instead of putting that i'm expecting an id i put i'm expecting a string well i'm not going to change it here because for those of you that are just doing the react bit who will you'll be maybe confused or something i'm just gonna go to the um this is just a patch by the way if in an actual app i'm not gonna do this uh fix like this i'm just gonna change this actually not delete it's the create comment or submit comment here i'm just gonna take uh change the type to string all right that work i mean that runs let's go here if i type some some random comment and i click enter there we go it's uh it's submitted and i get it here and i can delete it and i can delete it and if i keep typing comments it keeps adding them without any problem and we have no errors sweet all right so there's one little problem that bothers me is that once we type something and we click enter this gets emptied but this field is still um active like kind of um i can still type stuff i don't want it to do that i want it to be kind of go back to this state blurred all right so and this and here i can explain why i did this approach where i just used an input because now i can give it a reference so we'll say ref equals say comment input ref because i can't give a reference to the form input component of a semantic ui react because that's actually a react functional component all right so let's actually create this reference let's copy that let's go to the top and right here underneath user we'll say const comment input ref equals use ref and initially you'll just pass it the value of null and we need to get user f so here we'll say use ref from react and right here we're just going to say actually not here and the submit comment after we set the comment to an empty comment we're just going to say the reference to that input dot current dot blur like this call it like a function like that and that's going to blur the input once we submit oops once we submit that so right here uh yeah here i'll type a comment and i'll submit it and there we go it becomes the like out of focus like blurred if i do that again it blurs out the comment um comment input sweet i think that's it for this video yeah let me check yeah that's it all right sorry guys by the way if i'm like kind of i sound less energetic and excited about stuff i am excited but i'm really really tired so hello class welcome back so this video is going to be one of two last videos in the series um this one is very going to be a very brief one where we implement popups and i'll explain them in a second and in next one we're going to have a deployment so we're going to deploy both the back and then the front end of our application to heroku so back to the popup thing so what i noticed right now in our app is that most of our buttons are just icon buttons these buttons right here the like the comment delete etc the only problem with this is that there's no text and some users might be confused as to what this button does so what we can do is um introduce these tool tips these popups that if you hover over it tells you what this button does of course you can do many other things with them so the idea behind this is to improve user experience and make your app more more easy to use and more intuitive so there's more complex implementations of popups for example this one right here that shows info about the user actually this could be a cool challenge for you that you can implement where if you hover over this image it tells you since when this user has signed up or you can show any other things and of course this you can embed any html in it you can see here the show your rating and there's some other cool implementations um of the popup uh for now we're just gonna use the basic one to display some text so let's get to that all right so let's go to our code base oops now you my sql let's go to the code base uh make sure both the server and the client are running as per usual i'm going to close this console uh first i want to start with the comment button so here i want to say comment on post when i hover over it so let's go to the postcard and here we're going to import pop up from semantic ui react and let's go so the way it works is that you basically wrap your um your element that you want to use as a trigger when you hover the popup and you put this popup and you put your element inside of the trigger component or attribute and or prop rather and you have your content here which is what the popup says so let's go and actually apply this so we have our button here it's the comment uh button so we can take all of this or actually just type here say popup and the content content will say um comment oops comment on post and here we'll have a trigger which triggers this and the trigger will be all of this button right here so we can just cut this and paste it here and let's close this tag let's save to let prettier format and let's have a look at it so let's go to our app so this is our comment button and there we go we got our popup but i don't like the white popup because our background is already white so i'm going to use the inverted version of it to make it be black with white text so we are right here we can just add this prop inverted and save and go back and there we go i think this is a better contrast for our application all right let's do the same for the like and the delete buttons so i'll start with the delete one so let's go to delete button here let's close that so our button is right here so we can just we need to import popup from semantic ui first so pop up and here we can uh cut this button for now and here we'll say popup and we'll have content and this will say delete post i have a trigger and in the trigger we paste back our button and of course we add inverted to uh have it um be black all right let's save let's look at our delete button and there we go it says delete post um one problem with this though because we're using the delete button for the comments as well and it will still still say delete post here while it should say delete um thing comment we can make take a um a message but for our use case we only have two things so we can have a conditional here so where are we right here in the content we can make it dynamic and what we're going to do is we know if we have a comment id that means we're deleting a comment a comment if we don't it's a post so we can say comment id so a ternary operator so if we have that that means we're deleting a comment so we'll say delete comment else that means we're deleting a post so we'll say delete post like this save uh why is this happening squiggly oh sorry this um this should go on the content my bad not the inverted the inverted is just a bullion prop and here it says delete post and here it says delete comment cool so that's working uh we'll do the same for the like now one thing that i noticed is that we're using inverted each time and we're kind of typing the same thing and it's taken multiple lines of code and we're going to use it in multiple instances so we can outsource this into its own component i mean maybe this is not the best use case for this but this is just to show you a good practice of how to outsource these mini elements that you have shared in multiple places in your app so here we'll create a new file in the util folder and we'll call it my popup call it whatever you want so here i'll say of course we need to import the popup so we'll say import popup from oops from semantic ui react of course we need to react itself here we'll have our function so function my popup i will take props and it will return the popup and our popup is always inverted so let's say invert it here and we'll have content actually we can destructure from the props so we want to pass the content we can pass whatever we want but we only need content for now and we want to pass uh children because that's where the trigger element we need to pass an element for the trigger prop so here the content will be content from props from the props and the trigger will be the children so whatever that's inside of this component here of course we need to export default my popup save this so let's go to the delete button let's remove this import and here we'll have our relative import so we'll say import my popup from go back one level to util slash my popup and here we replace popup with my popup and the content will be the same but we don't need to say inverted anymore and this trigger stuff will be in the children so here we'll have actual content inside of our um my popup element and here we'll put our trigger stuff as a child for this component all right let's look at our app let's refresh just in case and it still functions the same all right let's uh implement the same for the uh what is it the comment button so here we'll remove the popup and actually you can just copy this line from here or from here the import my popup i would have typed it already if i didn't just go to copy and paste it but whatever so here we'll say my popup and here the content will be the same it's static and we remove all that from the trigger and we put it inside my popup here paste just to make sure that it's still working okay it's not working inside of here we need to investigate this so oh yeah actually that's because it's coming from the single post that's a different um it's different it's here it's from here so in the single post let's uh do the same import oops actually i had a different thing in my clipboard so here we'll say my popup from back to util to my popup and let's look for that comment button should be yeah it's here so all of this so we can just copy all of this button and here we'll say my popup and the content will be the same as the other one so comment on post and the um doesn't have a trigger we will just have content child content inside of it and there we go we have comment on post so let's do the same for like let's go to the so that will be here in the actual in a postcard or excuse me in the like button so here we'll import that so import my popup from util slash my popup or your popup so here this like button we can just cut this let's say my popup and here the content as well is dynamic because um it can be for liking or unliking so what we're gonna do is we're gonna say liked and do a ternary so if it is liked the tooltip will say unlike unlike else it will say um like or you can put unlike post or like um post it's up to you all right so we paste back actually this should should be in an expression in curly braces and let's save let's look at our app there we go it says unlike and if i like uh if i unlike it says like again cool it's switching hello class and welcome back to the last class in this series where we deploy our application and have it live on the internet so i might have misled you in the last class by saying that we're going to deploy both the front end and the back end on heroku we're not going to do that we're going to deploy the back end on heroku and the front end on netlify which is something that i've used on this channel before and i've used for personal projects before it's pretty cool it's really easy to start with you just log in with your github and literally like two clicks and you deploy your frontend app and in terms of the back end we're going to use heroku like i said it's really easy as well to get started with i'm not sure if it's to be honest if it's something that people use a lot in production personally i would use something like aws or even google cloud or what is known as firebase uh but i don't know maybe they have some good pricing you can check that out for yourself but for us we're just prototyping just you know it's a hobby it's a project of passion i should say all right so let's actually get cracking okay first things first i noticed that there are certain things that need to be fixed about our in our code base first is i noticed that in the package json here on the server there are certain um dependencies that are for the client so we need to move this to the client so i'm going to do here on the on this on the server level i'm going to say npm uninstall um react router tom semantic ui css and semantic ui oops semantic ui react so we need to move these can i copy from here yeah i can copy from here okay so we need to move this into the client so i'm going to say cd client and say npm install and uh paste that in and that should be fixed so one other thing so in the index i noticed here when we connected a database uh we don't handle like we don't catch an exception or an error if it happens that's not good because um you know this can actually crash your server and your app wouldn't even run at all so here we're gonna say we're just gonna say console.error the error uh it's not going to change a lot but we catch the uh the error if it happens 16 000 vulnerabilities this this npm order is getting out of hand anyway i'm going to ignore this vulnerabilities thing for now um one more thing i want to change is the port so where's the port right here so it says 5000 it's a static port but in actual environments deployment environments we could have like an environment variable that holds the port and we might need to use that instead so i'm going to do i'm going to say here const port equals oops i'm going to take the environment variable so we're going to say process dot env and this is how you um access environment variables uh port like this um or so where's the ore right here the pipe thing or 5000 meaning if this is null we're going to get 5000 and here instead of 5000 we're just going to say port all right so that's fixed um i think we're done with fixing stuff all right so one thing that i'm going to do we can actually deploy both of them um like in one code base like the front end and the back end but i've found certain problems that happen on netlify where if you have like a subdirectory that contains actual app there are certain shenanigans that we could avoid by just separating the client and the server to their own repositories i mean it's better for separation of concerns anyways so i'm gonna do i'm gonna go back to my desktop so i'm gonna cd twice i'm gonna create two files or folders rather directories so make the i'm going to say mang client and mug server cool so we have those repositories uh let's go to our desktop actually i'm going to open this folder so here i'm just i'm going to need the stuff for the server so let's select everything except for client and node modules uh copy that and then in the server um yeah in the merge server here i'm going to paste them and the client stuff everything except the node modules and paste the client stuff here oops paste cool so we got the client stuff here and the server stuff here all right let's create let's start with the server let's create a repository for this on github so oops not here let's go to github and here i'm going to create a new repository i can make it public or private doesn't make a difference so here i'm going to call it moong actually i'm going to prefix it with clast i'll probably delete this because it's not that important people won't need this so i'm going to say mung server and i'm just going to create the repo here i'm going to copy this i'll copy the ssh one it's the same but i think to push you can't do the uh the https one so here i'm going to open up git bash in the server directory i'm going to initialize the git repo actually get in it and here i'll say git add everything get commit oops if i can type all right so get commit i'm gonna say oops just in it i'm gonna now add the remote so i'm gonna say get remote add origin and i'm gonna need to paste that origin so here we're gonna double check say get remote dash v there we go that origin is added so we just now need to push the code so we're gonna say get push origin master all right so that's done so if we go here we refresh we see that our code is here all right let's do the same for the client and then deploy both of them so let's create another repo so here we'll say clast obviously you're going to say something other than clast if you want to say you can say that i don't mind all right so here classed man client create repo let's do the same thing grab this copy it and then go to the client uh open the terminal and here we need to say get in it i don't know why i'm adding that flag and and here i'm going to say get add everything get commit and i'm just gonna say init and here we're gonna say get remote add origin and because i don't have this button this like the inside button on my keyboard i have to like right click and put paste here we're going to say get push origin master and the same thing will happen to this repo for refresh we get our client wait we don't we do we do we get our client code here cool all right let's deploy our server code now so if we go to heroku actually let's create an account so sign up i've already done this but i'm going to show you how to do this so i'm going to put my name i'm going to put my email my class email so gmail.com company name not applicable professional developer united kingdom i'm gonna this doesn't matter it's just for the data collection stuff i'm just going to say no just there create free account and i'm going to now go in a side window and activate my account gmail there we go it says create new password i'm going to create a new password sweet click here to proceed all right so now that we've set up with an account um let's go back here i want to go to the documentation so documentation uh first of all we need to install the cli actually let's go to node and yeah getting started with on heroku with node so here introduction setup we need to install the heroku cli so if you're on a mac you just run this brew command you're on a linux you run this sudo install but if you're on windows like i am you just download this installer so i'm going to install it now yes next next and it's really simple you just install the cli and then you do this heroku login and uh it just opens up a browser window where you confirm your authorization and then that's it you're logged in i'm going to wait for it to install all right so that's done close it and i'm gonna close all this stuff here i'm gonna open bash so here i'm gonna say heroku login press any key to open the browser all right log in you are now logged in i should be logged in now how do i check actually well i think there's like a command to check but i'm just gonna keep going i'm gonna assume we're logged in yeah that says i'm logged in cool so stop that and now we need to get our app started now our app is already started we have the app so i'm going to browse into it so cd desktop and i believe it's smart server yeah server all right so this is our app now we need to push this to heroku so we go to deploy the app so we're going to say heroku create which creates an app now there's a lot of options that you can adjust here to change the name of the app and a bunch of other stuff but i'm just gonna go with the most basic uh deployment right now so in that repo here in the server we're gonna say hiroku create boom so that's done and now we're gonna say get push heroku master so now that everything is pushed okay so that's done now um let's go check our app where do we go actually apps where's apps or maybe in the command so here it says that this is the app so this is the endpoint for the app and let's paste that well it says error check logs so i'm just going to run roku logs okay now i know why because the npm start is using a dependency like a developer dependency i should have fixed that which is nodemon and instead it should just use the node index instead of nodemon that's not available during production so i'm just going to change this to node index and push this and hopefully that will fix it actually i should change it in the other in the other repo or in the other code base so let me open this and here i'm going to go to the package.json and change this start to just node index now let's open the terminal get add everything get commit and here i'll say fixed start script here i'll push to origin master actually i need to push to heroku master as well so get push heroku master all right so it's deploying that again all right so let's check out our app uh actually still deploying it's gonna give us the um the base url in a second there we go so let's click this control click this to open link we'll wait for it now obviously the performance on an actual paid account will be better than this you're not gonna have to wait this much this is just a test account it's just a free account just not charging us anything yet okay so that failed again and i checked the logs again and i made a booboo and it's uh right here so what is it so process existed because where's the error yeah it's right here process failed to point to port because actually apparently port has to be um all uppercase so let's go here let's make another change this could have been way smoother um so right here in the index.js so it's here port is all caps like that sorry about this guys but in real in real production things like this happen all the time so maybe not cutting them is actually giving you a better um a better like view of how things work in the real world so here i'm just i'm not even gonna push to um to github i'm just going to push to heroku master so now it's going to deploy again hopefully this time it works all right so let's control click this base url and i guess third time is the charm all right so we get get query missing but i believe this is just a like a um because this is just our graphql server i believe it's working so if we go to postman open a new tab and here let's send a request to this and as you remember graphql stuff is always a post request so let's go to the body we can use this graphql type of like body here here let's actually send like a get posts query i'm just going to get the body and the created at and start that query sweet we get 200 and we actually get all of our data so our server has been successfully deployed let's actually now deploy the client side of this all right so i'm going to close this close this and let's go to so here oh obs go away so in the client so let's open this now i'm going to make a couple of changes here as well so in the package json uh down down here i'm going to add something called a proxy because this is not on the same server like as the actual server so i'm gonna this is actually not super necessary but i'm gonna add it anyway so the proxy will be the base url of our app so here i'm just gonna copy that and go back and put here paste that and we're going to change something else so inside of our apollo provider the base uri for our api is that deployed app so we're going to paste that here as well so let's push these changes so i'm going to open the terminal say get add get commit and edited proxy and server base url let's push this wait have i added the heroku here actually no there is no heroku what am i saying all right so let's go to netlify and here you can sign up or log in i'm going to log in with my github account i already have like an app here deployed and here i'm going to deploy another one so i'll say new site from git and click github here and it's going to now authorize my github account or have authorized netlife to access my repos so i believe i named it clast monk client yes it's this one and we need the master branch and yeah we need to run actually this is all correct because the eventually when you build the app it's going to be in the build directory not in public actually so here we'll just say deploy site this will take some time you can click here to see what's actually happening behind the scenes in the deployment it's just going to install all the dependencies and build the app and then serve it from that directory that was specified which is the build directory so i'm just going to wait for this to finish and then carry on sweet so that's deployed successfully that's indicating by the indicated by the green color and we open our app and there we go so we get all of our content that's being served from our server and from our database and we get the app and it's fully functional so we can actually log in here if i haven't changed this password yeah it's 136. cool so we can log in we can post stuff it's working exactly like it worked on our machine guys so yes so this video has been a bit rocky has been a bit a bit of like errors i could have cut all this these errors but yeah this these things happen in the real world so yeah maybe it's better that i left them all right anyway thanks for watching guys this series has been exciting it's been uh sorry for the delay for the last video and i hope you've enjoyed it i hope you hope you've learned a lot uh please let me know in the comment sections any suggestions anything you want to learn or anything you want to dig into i'll happily make a video about it all right thank you very much and i hope to see you soon bye
