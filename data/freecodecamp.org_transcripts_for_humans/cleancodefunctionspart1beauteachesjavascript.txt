With timestamps:

00:00 - cling code
00:01 - clean code is code that's readable
00:04 - reusable and refactorable and i'm going
00:07 - to be talking about how to write clean
00:09 - code in javascript specifically this is
00:11 - about functions this is part one of my
00:14 - clean code functions the first thing to
00:16 - consider when writing functions is the
00:19 - function arguments ideally there should
00:21 - be two or fewer arguments so instead of
00:24 - having this function with one two three
00:26 - four arguments we're going to pull the
00:28 - arguments into an object we're going to
00:31 - put
00:37 - and then we're just going to call the
00:39 - menu with
00:41 - just the one argument
00:47 - the next thing is that functions should
00:49 - do only one thing
00:53 - you can see in this function is function
00:55 - email clients it's sending the clients
00:58 - in and for each client it's a setting um
01:02 - the client record equals database.lookup
01:04 - client and then if client record is
01:05 - active it's going to email client so
01:07 - it's actually doing two things it's
01:09 - checking if the client is active and
01:12 - then it's emailing the client so a
01:14 - better way would be to change this into
01:16 - two functions
01:17 - so now we have the function email client
01:22 - and it's going to only
01:26 - email the client it's going to filter it
01:27 - by its client active and that's going to
01:29 - call this other function is client
01:31 - active where this is going to look up
01:33 - the client and it's going to return if
01:35 - it's active so now instead of doing two
01:38 - things each there's two functions that
01:39 - each do one thing
01:41 - next up is that function name should say
01:43 - what they do
01:44 - so look at this function function add
01:46 - the date we're passing in a date and
01:48 - we're gonna pass in a month
01:51 - so
01:52 - why are we passing in the month what
01:53 - what exactly are we adding if you if you
01:56 - call this add to date date one it's not
01:58 - exactly clear what's happening so we're
02:01 - going to change this to add
02:03 - month to date
02:06 - and then we're going to put the month
02:07 - first
02:08 - but the date second
02:12 - and so we're going to add the first
02:14 - month to the date
02:17 - and now it's more obvious that we're
02:19 - adding the month to date instead of just
02:20 - add today add month to date so it's more
02:22 - clear what the function is doing
02:25 - the next thing is that function should
02:26 - only be one level of abstraction this
02:29 - kind of goes along with functions should
02:31 - only do one thing
02:33 - so let me put in a function here
02:36 - and when you do split up functions it
02:38 - leads to reusable and easier testing
02:41 - so let's look at this function we've got
02:43 - parts better json alternative and now
02:46 - this is a pretty long function code
02:48 - we're passing the code we have the red
02:50 - regexes we have statements equals
02:52 - code.split splitting at the space
02:55 - and
02:56 - we have tokens empty array
03:00 - then for each regex we're going
03:02 - to call this function for um each of the
03:06 - statements we have the cons ast
03:09 - empty array tokens for each token uh s
03:13 - dot par s dot for each node
03:15 - and we're going to actually just try to
03:17 - break this up into a few different
03:19 - things
03:21 - we're going to try to separate this into
03:23 - a few sep a few different things we're
03:24 - going to separate this token section
03:26 - from from the ast section
03:29 - and let me just paste that in there and
03:32 - then we can talk about it
03:34 - okay so here's
03:36 - here's the original and here's um where
03:38 - it's broken up a little more where so
03:40 - we're going to end with the parts better
03:42 - json alternatives now that's the the
03:44 - same as um what the original function
03:48 - was called but now instead of doing all
03:50 - these things in one function we're
03:51 - pushing out some of the things so const
03:53 - tokens equals tokenize code
03:56 - const ast equals lexir tokens and then
03:59 - that for each node and we're going to
04:00 - parse each one so
04:02 - first we're just going to um get the
04:05 - tokens tokens tokenize
04:08 - so if you go up
04:11 - and tokenize so we're gonna we're gonna
04:14 - take this this is basically just the the
04:15 - first
04:16 - um
04:18 - step of some of the things up there and
04:19 - then we're going to
04:21 - take the do the
04:23 - get the a return the ast down here so
04:25 - we're just breaking that up a little bit
04:27 - to make it more readable and also so
04:29 - it's only one lit later of
04:31 - abstraction for each function
04:34 - so let's go to this next one remove
04:36 - duplicate code
04:37 - duplicate code is bad because there's
04:39 - that means there's more than one place
04:41 - to change something if you need to
04:42 - change some logic
04:44 - so if you only have code in one spot
04:46 - then you only have to change it in one
04:47 - spot if something needs to be changed
04:54 - so here's an
04:55 - example of two functions functions show
04:57 - developer list developers developer for
05:00 - each developer con's expected salary
05:02 - equals developer.calculated expected
05:03 - salary cons experience equals
05:06 - developer.experience.cons github link
05:07 - equals developer.github link but if you
05:09 - look down here um
05:12 - function show manager list managers
05:14 - managers. for each manager contact
05:16 - expected salary equals management
05:17 - calculate expected salary contact
05:19 - experience equals managed get experience
05:21 - accounts portfolio so the only thing
05:23 - different between these two functions is
05:26 - one is called developer one is called
05:27 - manager and the developer has a github
05:30 - link and the manager has a portfolio and
05:33 - then the data up here equals it has the
05:36 - github link and the data down here is
05:37 - the portfolio but the expected salary
05:39 - and experience are the same the expected
05:40 - salary and experience are the same so
05:42 - it's almost exactly the same this is a
05:44 - perfect example of something that you
05:46 - should be able to
05:48 - break down so you don't have the
05:50 - duplicate duplicate code
05:52 - so what we're going to do is we're going
05:54 - to
05:55 - completely remove this second function
06:00 - i want to update this first one so it's
06:03 - it can apply to both developers and
06:06 - managers
06:07 - so we're going to change this just show
06:09 - list
06:11 - instead of passing a developer we're
06:12 - going to pass in an employee
06:22 - and change this all at one time
06:24 - i just did um command d
06:27 - after changing my settings so it used um
06:29 - sublime text
06:31 - key mappings
06:33 - now the github link is things that's
06:34 - going to be different so github link is
06:37 - still considered kind of a portfolio
06:41 - for for
06:42 - developers so we're going to call that
06:44 - portfolio but here's where we're going
06:46 - to make it a little different
06:54 - we're going to do the employ.github
06:56 - blank but then down here if we find out
06:58 - as a manager then we're going to get mba
07:00 - projects and since we're going to be
07:01 - possibly changing this we're going to
07:03 - instead of const we're going to put let
07:05 - here because let allows you to change
07:06 - and const does not and if there is no in
07:10 - github link up here
07:12 - this is just going to be either
07:13 - null so then you can actually
07:16 - get the mba projects down here now for
07:19 - the const data we're just going to
07:20 - change this to portfolio
07:24 - and now we've just combined those two
07:26 - functions into one function
07:28 - last up is don't use flags as function
07:30 - parameters flags tell your user that the
07:32 - function does more than one thing
07:34 - functions should just do one thing so
07:35 - you can split your functions if they're
07:37 - following different code paths based on
07:38 - a boolean for example
07:41 - if you have this function create file we
07:43 - have the name and temp if temp
07:46 - um
07:46 - function fs.create and you're going to
07:48 - create this else fs.create name so it's
07:51 - based on what this
07:53 - boolean is or what this flag is instead
07:56 - of doing like this we can take off this
07:59 - temp here
08:00 - and
08:01 - just if
08:03 - we need to create the file
08:05 - we can do that and we're not going to
08:06 - have an else we're just going to have
08:07 - another function so
08:15 - so if you need to create the temp file
08:17 - then you just call a different function
08:23 - there instead of just one function that
08:25 - you use a boolean or a flag to figure
08:27 - out what you're going to do just create
08:28 - two functions and you just call a
08:30 - different function depending on what you
08:31 - want to do
08:32 - well that's it for part one of functions
08:35 - if you check the description you can see
08:36 - a link to what inspired this video don't
08:39 - forget to subscribe and remember use
08:42 - your code for good

Cleaned transcript:

cling code clean code is code that's readable reusable and refactorable and i'm going to be talking about how to write clean code in javascript specifically this is about functions this is part one of my clean code functions the first thing to consider when writing functions is the function arguments ideally there should be two or fewer arguments so instead of having this function with one two three four arguments we're going to pull the arguments into an object we're going to put and then we're just going to call the menu with just the one argument the next thing is that functions should do only one thing you can see in this function is function email clients it's sending the clients in and for each client it's a setting um the client record equals database.lookup client and then if client record is active it's going to email client so it's actually doing two things it's checking if the client is active and then it's emailing the client so a better way would be to change this into two functions so now we have the function email client and it's going to only email the client it's going to filter it by its client active and that's going to call this other function is client active where this is going to look up the client and it's going to return if it's active so now instead of doing two things each there's two functions that each do one thing next up is that function name should say what they do so look at this function function add the date we're passing in a date and we're gonna pass in a month so why are we passing in the month what what exactly are we adding if you if you call this add to date date one it's not exactly clear what's happening so we're going to change this to add month to date and then we're going to put the month first but the date second and so we're going to add the first month to the date and now it's more obvious that we're adding the month to date instead of just add today add month to date so it's more clear what the function is doing the next thing is that function should only be one level of abstraction this kind of goes along with functions should only do one thing so let me put in a function here and when you do split up functions it leads to reusable and easier testing so let's look at this function we've got parts better json alternative and now this is a pretty long function code we're passing the code we have the red regexes we have statements equals code.split splitting at the space and we have tokens empty array then for each regex we're going to call this function for um each of the statements we have the cons ast empty array tokens for each token uh s dot par s dot for each node and we're going to actually just try to break this up into a few different things we're going to try to separate this into a few sep a few different things we're going to separate this token section from from the ast section and let me just paste that in there and then we can talk about it okay so here's here's the original and here's um where it's broken up a little more where so we're going to end with the parts better json alternatives now that's the the same as um what the original function was called but now instead of doing all these things in one function we're pushing out some of the things so const tokens equals tokenize code const ast equals lexir tokens and then that for each node and we're going to parse each one so first we're just going to um get the tokens tokens tokenize so if you go up and tokenize so we're gonna we're gonna take this this is basically just the the first um step of some of the things up there and then we're going to take the do the get the a return the ast down here so we're just breaking that up a little bit to make it more readable and also so it's only one lit later of abstraction for each function so let's go to this next one remove duplicate code duplicate code is bad because there's that means there's more than one place to change something if you need to change some logic so if you only have code in one spot then you only have to change it in one spot if something needs to be changed so here's an example of two functions functions show developer list developers developer for each developer con's expected salary equals developer.calculated expected salary cons experience equals developer.experience.cons github link equals developer.github link but if you look down here um function show manager list managers managers. for each manager contact expected salary equals management calculate expected salary contact experience equals managed get experience accounts portfolio so the only thing different between these two functions is one is called developer one is called manager and the developer has a github link and the manager has a portfolio and then the data up here equals it has the github link and the data down here is the portfolio but the expected salary and experience are the same the expected salary and experience are the same so it's almost exactly the same this is a perfect example of something that you should be able to break down so you don't have the duplicate duplicate code so what we're going to do is we're going to completely remove this second function i want to update this first one so it's it can apply to both developers and managers so we're going to change this just show list instead of passing a developer we're going to pass in an employee and change this all at one time i just did um command d after changing my settings so it used um sublime text key mappings now the github link is things that's going to be different so github link is still considered kind of a portfolio for for developers so we're going to call that portfolio but here's where we're going to make it a little different we're going to do the employ.github blank but then down here if we find out as a manager then we're going to get mba projects and since we're going to be possibly changing this we're going to instead of const we're going to put let here because let allows you to change and const does not and if there is no in github link up here this is just going to be either null so then you can actually get the mba projects down here now for the const data we're just going to change this to portfolio and now we've just combined those two functions into one function last up is don't use flags as function parameters flags tell your user that the function does more than one thing functions should just do one thing so you can split your functions if they're following different code paths based on a boolean for example if you have this function create file we have the name and temp if temp um function fs.create and you're going to create this else fs.create name so it's based on what this boolean is or what this flag is instead of doing like this we can take off this temp here and just if we need to create the file we can do that and we're not going to have an else we're just going to have another function so so if you need to create the temp file then you just call a different function there instead of just one function that you use a boolean or a flag to figure out what you're going to do just create two functions and you just call a different function depending on what you want to do well that's it for part one of functions if you check the description you can see a link to what inspired this video don't forget to subscribe and remember use your code for good
