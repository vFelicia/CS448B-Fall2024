With timestamps:

00:15 - what's up everybody
00:16 - uh we are back for another
00:19 - live stream today we are going to be
00:21 - finishing up
00:22 - our shopping list looking at
00:26 - generators classes
00:29 - iterators and uh maybe
00:32 - even a little puzzle that that's one of
00:35 - my
00:36 - favorite little puzzles to do so all
00:38 - right thanks for joining us today
00:41 - if you are new i am sam i
00:44 - am from python basics and beau
00:47 - and quincy are hey jan how are you
00:51 - um allowing me this wonderful
00:53 - opportunity to
00:55 - share my joy and love for python
00:58 - so all right like i said i think we're
01:01 - on our
01:02 - uh eight
01:05 - i don't know jan wait this eighth or
01:07 - ninth
01:08 - jan helps me stay on task he's a
01:11 - he's a champ for me all right so let's
01:14 - let's one
01:15 - get into what i i completely forgot
01:20 - so we need to start looking at this so
01:22 - this is how you solve the problem
01:24 - if you have a file that has spaces
01:27 - and you're calling from dos it's a
01:29 - double quote i
01:30 - forgot and i was using a single quote
01:33 - code camp dot py close that out
01:37 - and boom you get you get your file
01:41 - so let's look at a couple of problems
01:44 - right here
01:45 - so we've solved
01:49 - we've solved a lot and i want to add
01:52 - this i can't remember if i talked about
01:56 - tell or not what tell does
02:00 - it is this it is very handy so if you
02:03 - lose track of where you are
02:05 - and oh and forgive me for the coughing
02:08 - uh
02:08 - i've been trying to treat my throat uh
02:12 - ben actually didn't talk most of
02:14 - yesterday my kids made fun of me
02:16 - they started whispering but uh no i'm
02:18 - gonna try to hang in there as much as i
02:20 - can i think we can get through
02:21 - everything and i have a pile of cough
02:23 - drops in front of me uh
02:25 - dude did some tea and some uh honey
02:29 - and even tried uh letting dark chocolate
02:32 - melt sorry if i cough a lot i greatly
02:34 - apologize but all right
02:36 - tell it actually tells you where you are
02:39 - in the stream of the file so
02:42 - we're gonna i have this here and if you
02:45 - get
02:46 - if you're getting an error especially
02:48 - then input output
02:50 - can't read or write
02:56 - yes it tells you the position where you
02:57 - are in the file stream
02:59 - so that's actually kind of where i
03:01 - theorize where the term stream
03:03 - came from it's a stream of data so when
03:06 - i have an open file
03:08 - it's uh in the documentation it called
03:10 - it
03:13 - it called this
03:16 - uh did it open
03:22 - this is where you are return a stream
03:26 - so there we go so what tell does is it
03:28 - tells you the position
03:30 - so if you're at the top of the file
03:31 - you're zero and then
03:33 - um like if we're gonna run this
03:37 - let's get into it let's just stay right
03:40 - here
03:42 - and then i have it as an easter egg as
03:46 - please tell
03:50 - please tell so
03:53 - i'm at 71. so one thing that
03:58 - we need to go over is what is happening
04:02 - right down here so we
04:06 - are we grabbing our
04:10 - list our our file
04:13 - we're turning it into a list that we
04:15 - enumerate
04:17 - let's bring this back up here uh
04:21 - shoot i got okay you guys should be able
04:23 - to see that
04:26 - yeah perfect so then
04:29 - i'm wrapping this in an enumerator then
04:32 - i'm turning it into a list so that i can
04:33 - count it
04:34 - then i'm unpacking it then printing it
04:37 - to the screen
04:39 - now what happens is once i choose
04:43 - which one to delete if i pick a non-zero
04:47 - then i go back to my
04:50 - list sorry something just fell behind
04:54 - the computer
04:57 - hang on one second
05:02 - sorry guys i thought something was back
05:04 - there probably something's about to fall
05:06 - hopefully it's nothing plugged in here
05:08 - all right sorry about that guys would be
05:11 - about right
05:12 - okay so then i go back to my list
05:16 - and and i have to
05:19 - i'm going to then delete something out
05:21 - of the list
05:23 - and i'm enumerating so that's why i'm
05:25 - subtracting one so
05:26 - i know because we have to adjust
05:30 - from the user to the file the user is
05:33 - not going to tolerate
05:36 - this this being zero
05:39 - through whatever number they're going to
05:41 - want to see one
05:42 - through however many so that's why we're
05:45 - adjusting
05:47 - this to minus one then we're literally
05:50 - just taking that list
05:52 - and rewriting it to the file so that's
05:55 - why we go w here
05:56 - so we don't have to go and get fancy
05:59 - we're just gonna
06:00 - literally reopen the file
06:03 - with w completely recreate it right over
06:07 - it
06:07 - and write our new list now i want to
06:09 - show you
06:10 - this right here
06:14 - the user will not want to
06:20 - they're going to sit there and if
06:21 - they're in this part of their
06:23 - list they're going to want to maybe
06:26 - delete
06:27 - more than one thing at a time so we need
06:30 - to figure out
06:34 - how to get that list to come back up so
06:37 - we're already here writing
06:39 - so what did i tell you guys how
06:43 - you can do both at the same time
06:46 - anybody remember
06:53 - all right so what we're going to do is
06:54 - we're going to add a
06:56 - plus sign so we can do write
07:00 - and read so when we write
07:04 - we are at the end
07:08 - so basically it's going to be because as
07:11 - we're writing down
07:13 - we're putting in we're inputting we're
07:15 - at the end of the string a
07:17 - we're at the end of the file so we just
07:20 - wrote we went to the file
07:21 - now we've changed this so we can read it
07:23 - as well
07:24 - so now we need to do is come here
07:29 - and after this let me make sure this is
07:32 - going to be in the right spot
07:38 - yep so now we need to go
07:42 - file file dot
07:45 - seek because we're jumping
07:48 - we want to jump to the top and then
07:50 - literally
07:52 - it's just this all again
07:56 - so it's items equals list
08:01 - all right so since it's the exact same
08:03 - i'm going to copy it i know i know i
08:04 - know it's probably going to
08:06 - break but i don't want you guys to be
08:11 - have to be tolerant of so all right what
08:13 - did i do there i did not do tabs i did
08:15 - control
08:16 - close bracket and how i need new to do
08:20 - control close bracket is indent
08:24 - indent region control close bracket
08:27 - so then i save this again then i exit
08:32 - then i run
08:37 - so then i list okay then i want to
08:40 - delete
08:40 - shoes
08:44 - so then i want to delete jelly so boom i
08:48 - get the list
08:48 - back every single time after
08:52 - i write it and then
08:57 - i come back up here and i'm back to the
08:59 - top
09:01 - so there all right so that wraps
09:04 - that up so 0 to continue
09:08 - and then exit all right
09:11 - so now onward onward to new things we
09:15 - have wrapped that up
09:16 - so i hope everybody has had a good week
09:20 - um but yeah i just always want to
09:22 - appreciate uh bo
09:24 - and quincy for affording me
09:27 - this awesome opportunity but yeah uh if
09:30 - you're new here
09:30 - um i've been studying python
09:34 - for about seven seven years and teaching
09:38 - for about five and have had my youtube
09:41 - channel
09:41 - for three and a half oh my goodness
09:45 - almost
09:46 - almost exactly three and a half years so
09:48 - any of these videos
09:50 - actually all of this content has already
09:52 - been done
09:53 - once before in micro videos and i'm not
09:56 - smart enough to come up with that name
09:58 - micro video
09:59 - one of my subscribers did so all right
10:01 - let's comment this
10:03 - out and if you're new here
10:10 - no but i you look down
10:15 - thank you i got you all right so
10:19 - if you are completely new highlighter
10:21 - region
10:22 - alt shift comments out everything
10:26 - and then alt s saves here's
10:29 - actually here's one thing if you are
10:31 - super super new
10:32 - awesome glad you're here but here is a
10:35 - fantastic way to know
10:38 - if you have not let me see how bright
10:39 - big that is if you do not know if you
10:41 - have saved the file
10:43 - so it's going to have this asterisk up
10:45 - here and also
10:46 - you run f5 and it's gonna jump because
10:48 - this is gonna tell you
10:50 - hey you did something even if you even
10:52 - if i
10:53 - even if i do one return it's gonna jump
10:56 - up here and it's gonna ask me to save
10:58 - again
10:58 - so there we go all right classes and
11:01 - generators
11:04 - all right we're going to go super slow
11:06 - because this can get
11:08 - out of hand really really really quickly
11:12 - all everything in python is an object
11:17 - a type of variable a variable
11:21 - is a class and
11:26 - so
11:40 - all right x is an object
11:44 - it's a variable that 5 is assigned to x
11:49 - and that type of variable is an int
11:53 - all right that's our starting point
11:55 - that's how we're going to move forward
12:01 - okay now
12:04 - let me see sorry i don't know what's
12:05 - happened
12:08 - i'm falling apart i'm 43 and
12:11 - everything's
12:12 - everything either hurts something always
12:13 - hurts or something sore like
12:15 - nothing's always working all the time so
12:17 - all right
12:18 - we're gonna build we're gonna create an
12:20 - object that's a rectangle
12:22 - and um and also let's look at list
12:27 - because this is this is a great one so
12:32 - so we have der on y
12:35 - so this is this is what we're going to
12:38 - be doing
12:40 - has anybody ever heard the term double
12:42 - underscore
12:44 - you won't ever hear me say dunder have
12:46 - you ever heard of dunder
12:47 - i'm not just asking i will never use
12:49 - dunder
12:50 - but this is double underscore and let's
12:54 - see
12:56 - in it there's iter so we're going to get
12:59 - into iter
13:00 - we're going to get into uh
13:04 - len we're gonna get into uh repper
13:08 - and now there we go and where's string
13:11 - okay these are the things that are
13:14 - happening in the background
13:16 - and here are methods that we can use
13:19 - these
13:20 - happen and python uses
13:24 - all right i'll say that again this is
13:27 - what
13:28 - we use these are what python uses
13:32 - so we're going to create an object we're
13:34 - going to create our own class
13:37 - rectangle and we're just going to go
13:40 - from there
13:42 - okay and of course we're going to use
13:45 - the keyword class
13:49 - and we need to look at
13:53 - in it do i have this position right all
13:55 - right
13:57 - so in it i thought it was literally
14:01 - in it this is in it the first time i saw
14:04 - it
14:04 - but it's initiate and it uses new
14:08 - so as you can see where did we go let's
14:12 - close it let's string that down
14:14 - uh new boom
14:18 - all right
14:21 - there's in it okay so new and in it
14:25 - all go together but what this does
14:28 - is how do we create what do we do to
14:31 - create
14:32 - how does this object come into existence
14:35 - so we're going to set the rules of how
14:37 - this object comes into existence
14:39 - so literally you're creating a brand
14:41 - think about it as you're creating a
14:44 - integer or we already know how to use
14:47 - integers
14:48 - and lists and tuples but now we're gonna
14:50 - you're creating a
14:51 - new something new that you're gonna need
14:54 - to use
14:56 - that is gonna react on its own you're
14:58 - creating a new object like a list
15:00 - you have a list things can come into it
15:02 - can come out of it and you can do things
15:04 - to the list so here
15:08 - and when you're creating an object a
15:10 - class
15:12 - just these are methods right
15:15 - and i said that they act like functions
15:18 - we know how to create a function
15:20 - so it's the same structure you just
15:23 - utilize them with the dot notation
15:25 - method
15:26 - so the very first thing you have to do
15:31 - is initiate it now this next word
15:34 - can get really weird really really fast
15:38 - self
15:42 - the best way that i have found to
15:44 - explain this is
15:47 - like this
15:50 - that y is a list
15:53 - but it is its own self right
15:57 - so this is each time
16:01 - you're going to create an object it is
16:04 - this type but it is itself
16:08 - all right does that make sense to
16:20 - everybody
16:22 - you'd only if you need to jan if you
16:25 - need to
16:26 - um if it's super complicated
16:29 - possibly but you wouldn't want to get
16:31 - into any import air probably
16:33 - you'd already want that in the file that
16:35 - you'd want to be using
16:38 - like a pie game file you already have
16:40 - that in
16:41 - with your loop you wouldn't want to
16:44 - have any issues with bringing it in
16:47 - unless it is ace
16:50 - even a overly complicated or an
16:52 - excessive
16:53 - object it wouldn't be so big that you
16:55 - wouldn't be able to fit it in the file
16:57 - and i would uh this is reference
17:01 - re shuffle
17:04 - you only want to have your own files
17:06 - because then when you get to having
17:09 - uh then we're talking about packages uh
17:12 - not only would you have modules but then
17:14 - uh
17:15 - then packages i mean you could but
17:18 - oh actually that might be a good lesson
17:20 - for us to get into
17:21 - um the double underscore main
17:25 - maybe we can do that next time oh uh one
17:27 - important admin note
17:29 - i haven't gotten to tell bo and uh
17:32 - quincy yet
17:33 - uh we're not gonna have a live stream
17:35 - next week
17:36 - uh i've got i've gotten a little behind
17:40 - a little bit so i need to take a
17:43 - a week off i'm not gonna even have any
17:45 - videos on my channel
17:47 - so we need to do that you you can't you
17:50 - can
17:50 - jan but i i don't recommend it unless it
17:53 - is a
17:53 - super super complicated item and then we
17:56 - can go from there
17:57 - so all right a rectangle basically we
18:01 - have
18:02 - uh the rules of a rectangle
18:06 - two sides two sides so
18:10 - length length
18:13 - width all right so
18:16 - same rules same rules apply
18:20 - now here's where this gets
18:24 - weird so since
18:27 - this
18:31 - this is its own self in this
18:35 - instance so you have to think of these
18:38 - as their own instance
18:40 - so we do self dot length
18:45 - equals length
18:49 - all right so you're bringing this in
18:52 - you're taking in input
18:56 - you're then going to assign this
18:59 - to this i know it feels so weird right
19:02 - now
19:03 - but am i spelling everything right yeah
19:06 - okay so then
19:10 - self.width
19:14 - equals width okay now we're going to do
19:18 - something
19:20 - let's see any questions no not yet all
19:23 - right
19:24 - so let's put this into memory
19:32 - what do we call this
19:38 - didn't mean to do that sorry guys
19:43 - so much to talk about about our shopping
19:45 - list still but
19:47 - who who said it was making them hungry
19:49 - the shopping list
19:50 - yeah i was glad i was able to get up and
19:52 - uh but uh
19:55 - oh tech what's up tech okay
19:58 - so all right we have our
20:01 - our new x we just dumped memory
20:05 - aha so it knows to
20:08 - have it's going to when you need to pass
20:12 - in our length
20:13 - and our width so we're just going to go
20:15 - three
20:16 - by three okay
20:20 - so then i call oops so then i call my
20:23 - object
20:27 - so right now we've
20:32 - created it we've initiated it but we've
20:34 - done absolutely nothing
20:36 - with it now this is where
20:40 - this is where the programming and the
20:43 - fun starts
20:45 - let's just add a little bit here and
20:49 - because i'm going to show you the wrong
20:50 - way and i'm going to show you the better
20:51 - way just
20:52 - just to show that we've done something
20:56 - sorry um
20:59 - oops i really would have bet any amount
21:01 - of money that i
21:03 - that i muted that
21:08 - all right any questions so far
21:14 - you're
21:18 - is links
21:28 - by
21:31 - width and then
21:35 - close that out save this
21:41 - boom so i now have something go out to
21:45 - the screen
21:46 - that the that our
21:50 - programming user goes okay i know
21:53 - something happened you put something out
21:55 - to the screen
21:56 - awesome thank you for doing that
22:00 - okay well we have a we have a rectangle
22:06 - we usually want to know stuff about it
22:07 - right
22:09 - so now we are going to look at a way
22:13 - so that python uses this now
22:17 - why don't we make a method that
22:25 - we can use all right
22:29 - not a big speller as i'm sure you guys
22:31 - have noticed
22:32 - so this is going to be short for
22:34 - perimeter if i start typing perimeter
22:37 - it's not going to go good all right
22:41 - let's see so
22:45 - again i'm using myself so we're using
22:48 - this
22:48 - we're regarding the object that we just
22:52 - created
22:54 - are our x which is a rectangle
22:59 - all right and let's see where we are
23:04 - uh oh okay so perimeter
23:08 - it is our length times width
23:11 - times two so
23:15 - so let's do that two times
23:20 - self
23:22 - width times
23:25 - self length
23:30 - all right let's run this
23:40 - boom so now
23:45 - now i want to challenge you guys with
23:49 - something that is a method
23:53 - what attributes do we know right now
23:57 - about x
24:00 - anybody got any thoughts and it's fine
24:04 - if you don't
24:06 - because this was one of the things that
24:08 - threw me off for a very very long time
24:10 - about a natural difference between an
24:11 - attribute and the method and
24:13 - things like this
24:17 - so the attributes that i have right now
24:22 - are length and width and it's just
24:25 - information that is associated
24:28 - and this is where my self comes into
24:31 - place
24:33 - the self length and self width
24:37 - take in from here and assign it
24:40 - back to itself that's why this comes up
24:44 - i guess i should have done 3 and 4 so we
24:46 - can see to make sure that we did
24:48 - did this right and now my perimeter
24:52 - so 3 times 3 times
24:56 - 2 is 18. so i did the math correctly
25:00 - here so now let's do
25:03 - what's the other one area why don't we
25:05 - look at area
25:11 - def area
25:14 - self then print
25:19 - uh so what that's just uh
25:22 - side by side self width
25:27 - times self length
25:31 - one glue good there we go i'm sorry if
25:35 - sorry about the cough drop hopefully
25:36 - it's not driving anybody nuts
25:39 - okay put this back in memory
25:42 - hopefully that's not too loud either
25:44 - sorry uh
25:46 - yeah let's change this up a little bit
25:48 - make sure should we show that we're
25:50 - doing all right
25:50 - your rectangle is three by four so then
25:53 - we call
25:55 - perimeter 24
25:58 - let's check that make sure nothing
25:59 - changed right 4 times 2 24
26:02 - okay so now x dot
26:06 - area 12.
26:09 - so the area is 12
26:14 - square whatever centimeters square feet
26:17 - uh don't know i guess we did not uh
26:20 - maybe that's something else and then our
26:22 - x
26:23 - uh let's check this length
26:26 - boom width boom perfect
26:30 - so everything's going
26:33 - pretty good right now so now
26:36 - now let's get into
26:40 - a little bit more stuff so right now i
26:43 - have my double underscore
26:45 - in it and that's that's a cleaner nicer
26:48 - way to say double underscore and the
26:49 - reason why it's called double underscore
26:52 - let's look really really close if i can
26:55 - get you the right
26:57 - one there it is so
27:00 - one two one two
27:04 - never found in the pep why it was two
27:07 - um but that's why it's double
27:11 - double underscore because you literally
27:12 - are depressing
27:14 - and putting in place two underscores
27:18 - all right so now in our init
27:23 - we have this we're getting something out
27:26 - of the screen to share to the
27:27 - programming user
27:29 - that you have created something and
27:32 - this is it right here but
27:36 - that's not best practice
27:39 - i'm going to show you
27:43 - what the best practice is
27:46 - something that's called
27:50 - wrapper the official rep string
27:53 - representation of an object
27:55 - and guess what it has a
28:00 - double underscore method and then we're
28:01 - going to go into
28:03 - double underscore string so right
28:07 - and it's called by the wrapper function
28:08 - so if anybody has not noticed this
28:12 - when you create
28:16 - a double underscore method it is
28:18 - associated
28:20 - with a method
28:24 - a built-in python method so you're
28:26 - telling python
28:28 - hey when this method gets used
28:31 - come here and use it come in here and do
28:33 - this
28:35 - all right so now let's fix this right
28:39 - now uh okay
28:42 - so we commented that out so we need to
28:46 - get
28:46 - our double underscore wrapper
28:52 - and did anybody notice what i did i left
28:54 - out a double or i left out an underscore
28:58 - all right and
29:05 - so we stick with self
29:10 - sorry my light seems brighter today so
29:13 - you can see my cheery face
29:14 - all right so this is the official
29:17 - documentation
29:19 - excuse me this is the official string
29:21 - representation of the object
29:23 - so basically what this is saying is when
29:25 - you call this object back
29:27 - is what did we do here
29:33 - what is that do we have any idea what
29:35 - that is
29:37 - i don't and i don't think you do all
29:39 - this is saying
29:40 - is we got we got this
29:43 - yeah we're going to be doing double
29:45 - underscore main soon
29:46 - that's a cool um run through so
29:49 - it's that it's in this it's in that file
29:52 - that you just ran the main file
29:54 - it's this object and it's livid in this
29:58 - memory other than that i i got i got no
30:01 - idea i got nothing for you
30:02 - here's here's here's the best that i can
30:04 - do for you
30:06 - but when we use wrapper double
30:10 - underscore wrapper
30:11 - we're going to tell python what to put
30:13 - out on the screen
30:22 - and i want
30:26 - print
30:32 - your rectangle
30:38 - so when we used this up here it created
30:42 - and came out to the screen and did this
30:44 - but
30:46 - let's do it
30:50 - here is that where i have it
31:01 - no that's not the one i want that as
31:05 - our yes i want that as our string
31:09 - this is wrapper
31:15 - double underscore string so all right so
31:17 - what i'm doing here
31:21 - is we're going to just spit out this
31:25 - let's just show it and then we'll go
31:26 - through it
31:29 - so before when i would press
31:32 - when i would call our object a rectangle
31:36 - object i would get this so now when i
31:39 - call it i
31:40 - get boom this right here
31:44 - so i'm kicking out and i'm making this
31:47 - nice neat and pretty and you can
31:51 - use it now now let's look
31:54 - and see our double underscore str
31:59 - now that this is where it gets all right
32:01 - str
32:02 - called by string object with built-in
32:04 - functions format
32:06 - so it is the informal or printable
32:10 - string representation of objects so if
32:12 - by chance you did not
32:14 - have a double underscore wrapper it
32:17 - would come down here and pull
32:19 - the string so let's do this because this
32:21 - is where
32:24 - this should go double underscore st
32:28 - str double underscore self
32:34 - and then does this return yeah this is
32:40 - return
32:47 - oh we got to put in memory
32:55 - so when we call
33:01 - so let's go over this real slow
33:04 - so whatever when these are called as you
33:07 - go through and
33:09 - you all of the and we and we'll see this
33:11 - in a second when we get to
33:13 - iterators and generators all right
33:17 - so the built-in functions that python
33:20 - has
33:21 - done all this tremendous work for us
33:24 - when you want to interact when you have
33:27 - an object
33:28 - when you want to when you want to
33:29 - interact with those
33:31 - functions this is how you do it
33:35 - all right i haven't clicked over and
33:36 - looked at chat in a while
33:41 - yes that is the memory ram address that
33:43 - is exactly it
33:49 - yes uh actually
33:53 - that would be something that we can do
33:55 - because i do want to get into
33:57 - um is
34:00 - and uh because copy
34:04 - because you can get very lost into copy
34:08 - very quickly so yes but that is the
34:10 - memory address location
34:12 - um how to deal with those but yes you're
34:14 - correct you're absolutely correct
34:16 - jan jan's got always got good questions
34:19 - that is the ram address
34:20 - on your system all right uh i digress
34:24 - i can get i can get sucked in to this so
34:26 - quickly but you guys
34:28 - you guys are absolutely awesome and
34:30 - absolutely awesome ask
34:31 - awesome questions all right but this is
34:34 - how you interact with python this is
34:36 - where you begin
34:38 - to control and have the
34:42 - program user get what they need out of
34:44 - it so when they
34:46 - are using functions
34:50 - this is how you control what comes out
34:52 - to the screen
34:53 - all right so we're 35 in
34:56 - oh we have got to touch on inheritance
35:00 - because that gets
35:02 - very cool very quickly as well so
35:05 - alright
35:06 - so right here we just created a really
35:08 - simple object
35:10 - let me get
35:14 - this hopefully i didn't drop this that
35:16 - bad
35:18 - so we created a little object
35:22 - takes in two arguments
35:26 - and then we know how to use
35:30 - well create it then we know how to use
35:32 - and interact with
35:34 - the wrapper and the string
35:37 - built in functions for python you
35:39 - creating and using our
35:41 - double underscore methods wrapper and
35:42 - double underscore string
35:46 - and then created two new methods
35:50 - or two methods for our object
35:53 - so where where python gets very very
35:56 - powerful very quickly
35:58 - it's called inheritance and what that is
36:02 - is especially when you're wanting to
36:05 - borrow
36:06 - i'll give you a perfect example of
36:08 - something and hopefully we're still
36:10 - working together and we can
36:12 - touch on it but you don't want to create
36:14 - a new object
36:15 - you just want to bring one in and either
36:18 - shrink it or expand upon it
36:22 - typically you'd expand upon it i don't
36:24 - know why i said shrink it
36:26 - but you go okay i like i like everything
36:29 - about this
36:30 - but there's a couple more things i'd
36:32 - like to do
36:34 - with it so you bring in this object
36:37 - then you just add some so we're going to
36:42 - sorry i think i have a delivery so
36:44 - hopefully my dogs aren't going to go
36:46 - to nuts for you all right
36:50 - so we're going to deal with a
36:55 - species dog and then
36:58 - jump into breed
37:02 - so we go class
37:05 - [Music]
37:06 - dog
37:08 - species let's see if i spell this right
37:13 - k9
37:16 - so i'm gonna then we need to talk about
37:19 - what i'm
37:21 - there we go what i'm doing right now
37:24 - voice and they bark
37:30 - all right
37:33 - so now what i'm doing here is i'm
37:35 - hardwiring
37:37 - so right now i haven't brought i don't
37:39 - have anybody interacting
37:41 - with any part of this i'm just creating
37:45 - these attributes and i'm hardwiring them
37:48 - in
37:49 - so now when i call when i do
37:53 - let's say uh
37:56 - buster and he's a dog
38:03 - boom buster
38:07 - so there's my there's my object
38:10 - and buster is
38:21 - did i spell that right i didn't even
38:24 - know yeah
38:24 - sometimes okay so he's a canine
38:28 - and then buster's voice
38:35 - he barks now
38:39 - this is where it gets cool alright so
38:45 - so now if i bring in and i'm gonna
38:49 - i want to do so what a breed of a dog
38:53 - poodle
38:58 - so i bring in dog
39:01 - i'm going to inherit and
39:04 - i don't know if we talked about pass
39:07 - before keyword pass
39:10 - basically it's telling python hey uh
39:13 - i know i got some stuff here i have some
39:15 - indention
39:16 - just go ahead and ignore it for now and
39:19 - i promise i'll fill it in later
39:21 - sometime you don't have to but it'd be
39:23 - odd if you had it there and didn't fill
39:24 - it in
39:25 - okay so um so now um
39:30 - we have uh
39:34 - rusty he's a poodle
39:41 - oop did i not put that nope here
39:44 - check this out so how did i make that
39:46 - mistake
39:48 - right here came up here so of course
39:52 - poodle's not in memory right
39:53 - because i didn't save it
39:58 - rusty now i didn't pass anything
40:01 - into all i did was come up here and say
40:04 - go and grab
40:06 - everything throw it into poodle
40:09 - rusty then
40:13 - his voice
40:18 - he barks and then
40:21 - [Music]
40:23 - rusty dot you already see where this is
40:26 - going
40:28 - species he's a canine so all right
40:31 - these are the building blocks and i want
40:34 - to let this sit
40:35 - and go from there but
40:38 - and i'll just give you a little tease
40:42 - so when you're building so it took me a
40:44 - while to understand
40:47 - what how how something can happen
40:50 - so think about think about a character
40:52 - in a video game
40:54 - or even a block that's just sitting
40:56 - there and
40:57 - yeah how do we keep this sorry a bird
41:00 - just flew into my window glad i didn't
41:02 - yell
41:03 - um so instead of doing functions so
41:07 - th this is the beginnings of object
41:10 - oriented
41:11 - uh programming oop
41:15 - you and i have we've been interacting
41:17 - with functionality
41:18 - functional programming lots of lots of
41:21 - uh
41:22 - lots of functions doing things this is
41:25 - the building block where you set rules
41:27 - and when an input happens to this object
41:31 - or an event
41:33 - you have all of these scenarios and
41:35 - conditions
41:36 - and then so like if you have
41:39 - let's just go with the block so if it
41:42 - gets hit with another
41:43 - object you have rules for that and
41:46 - methods that then go from there and
41:48 - things happen
41:49 - then if you get when you get more
41:51 - complicated you have a character in a
41:53 - game
41:54 - you press the up button they do
41:56 - something they'll move forward
41:57 - and now with game sophisticated you're
42:00 - going to need to then have the shoulders
42:01 - move
42:02 - maybe the head the torso and all of
42:04 - these things
42:05 - but instead of going through and having
42:09 - to think of all these scenarios
42:11 - you create an object then then that's
42:14 - the player
42:15 - then you create a player off that object
42:19 - just like we do strings so just like
42:22 - if i so i could do let's bring this back
42:25 - this is a perfect
42:26 - time to do this
42:30 - so i have my x
42:33 - let's keep this here then i have my y
42:39 - and it's
42:45 - you're getting the idea that's exactly
42:48 - but
42:49 - it wouldn't be quite as each each input
42:52 - each input would have its own and then
42:54 - you don't have to think about it
42:55 - so as you're looping through like here's
42:57 - a perfect example
42:58 - with um with pygame
43:02 - update so as you run the update you have
43:05 - an update method for that object
43:07 - so each time through if something's
43:09 - happening if this condition is met
43:11 - do this so then i have y and this is
43:14 - going to be 2
43:15 - by 6. so i have y
43:19 - and x 2 separate rectangle
43:24 - objects that are acting independently
43:26 - from each other
43:28 - it's all right all right my voice is
43:31 - already fading so let's try to get
43:32 - through we got i want to get through our
43:34 - puzzle
43:35 - i want to get through iterators and
43:36 - generators
43:39 - so all right i know this can get very
43:42 - complicated very very quickly
43:44 - let me get a cough drop i hope i haven't
43:46 - been hacking too much for you guys
43:48 - i know i love i love this stuff it's i
43:51 - mean it's it's crazy to me
43:53 - that it's still going down
43:56 - to a processor either having power run
43:59 - through it
44:01 - or it's closed still still blows my mind
44:04 - how sophisticated we've come from a
44:07 - light lighting up or
44:08 - not okay
44:12 - there we go i could talk about this
44:15 - forever
44:16 - okay so we need to we need to talk about
44:20 - iterables and iterators does anybody
44:23 - have any idea the difference between the
44:25 - two
44:29 - so you iterate through
44:33 - iterable objects so
44:36 - iterators and iterables are like your
44:39 - hand
44:40 - all right all
44:45 - all iterables
44:49 - no i haven't said this in a while so i'm
44:51 - going to mess this up
44:57 - so you can iterate through iterables and
45:00 - iterators
45:01 - but not all iterables
45:06 - are iterators let's look at it
45:09 - so here is a perfect example
45:15 - of me turning and iterable and we're
45:18 - going to build upon it
45:19 - and we're going to look at it so name
45:23 - sam put this into memory
45:27 - then we call dir
45:30 - on name
45:36 - which i want you to look
45:40 - so we got our in it enter
45:49 - oh okay
45:53 - get an iterator from an object
45:57 - callable iterable
46:04 - so i can go through this
46:07 - because they act the same but they are
46:10 - not the same
46:12 - and the main difference is the next
46:15 - function
46:16 - so i like to lead iterator into
46:20 - generator all right
46:26 - so an iterator uses
46:30 - the next and double underscore
46:38 - all right so right now i do not have a
46:41 - double underscore
46:43 - next so watch
46:48 - so now for i am
46:51 - whoa that's how many times i type that
46:55 - then
46:56 - print i
47:00 - boom i get sam
47:04 - i don't know why the birds are so active
47:06 - today
47:09 - all right so now now let's
47:13 - wrap this up
47:29 - it's an inner object so now let's run
47:31 - dur on name
47:41 - so we're going to get into it we're
47:43 - going to get sophisticated really really
47:45 - quickly after this and one of the things
47:50 - that i love to do and i want to
47:54 - i just don't want to jump into the time
47:55 - module
47:57 - i like to let this stuff sit and
47:58 - percolate and then we go from there
48:01 - so the basically the the main difference
48:06 - oh wrong way
48:09 - it's okay because you can iterate
48:14 - over an aider and an iterable
48:18 - all right because it has
48:23 - next works so now now we need to look at
48:28 - next this is how you go
48:32 - through return the next item
48:35 - from an iterator so where these become
48:39 - very powerful
48:41 - is let's say
48:44 - when you have a command and you want to
48:47 - go
48:48 - through a iterable
48:52 - but you don't want it to happen all at
48:54 - one time
48:55 - you just want to go through it
48:58 - so let me put so now this is exhausted
49:02 - so i need to turn this
49:05 - off so i have i call name
49:12 - name so there is my iterator
49:15 - object then i call next on name
49:20 - next on name
49:24 - next on name and i call next on name one
49:27 - more time
49:28 - and it is exhausted so
49:32 - all right so now that is our
49:36 - that is our 4a this is our warm up to a
49:40 - generator
49:41 - so generator does and the reason why
49:43 - generators are so very powerful
49:45 - is they don't use up memory
49:49 - so again when we do our time and i'm
49:52 - going to show you
49:53 - and they're fast they're ridiculously
49:56 - fast so they're just sitting and
49:59 - waiting to be used it's almost like they
50:01 - have a set of instructions but they
50:02 - haven't created anything
50:03 - that's the best that i've uh come up to
50:06 - explain it
50:07 - they are a set of instructions and they
50:10 - just go and do it when they need it
50:11 - they haven't created anything they just
50:13 - know what to do they go and touch it
50:15 - come back
50:16 - and just wait for the next one
50:20 - kind of pun was intended i thought i'd
50:22 - get well you guys just have to sit there
50:24 - but i have a very captive audience i
50:26 - have a very awesome audience you guys
50:27 - are
50:28 - um absolutely awesome
50:32 - so yeah i think we can get to at least
50:34 - 75 minutes because we're going to do
50:35 - generator
50:36 - then i'm going to show you a little
50:37 - puzzle that
50:39 - i love to really get people to think
50:41 - about
50:42 - especially newer programmers of how to
50:45 - set a rule
50:46 - set up a rule of instructions because
50:49 - you saw that with our
50:51 - with our list here where we were
50:53 - bouncing around and you had flow
50:55 - all right i digress
50:58 - sorry guys okay so a generator what in
51:01 - the world is a generator
51:03 - so basically a generator
51:06 - is something that has a set of
51:09 - instructions
51:10 - that is sitting out there and waiting to
51:11 - be done it's all right
51:13 - uh seeing a jump up here so if you guys
51:16 - are new here thanks for joining us today
51:18 - i am sam from python basics this is our
51:21 - uh
51:23 - eighth ninth stream um and we are going
51:27 - through
51:27 - the absolute basics of python from the
51:30 - beginning
51:31 - heading towards intermediate and the
51:33 - sky's
51:34 - sky's the limit so um
51:37 - all of these videos are uh
51:40 - one are the pre all the previous
51:44 - live streams are in a playlist
51:47 - uh on free code camp and every single
51:50 - topic that i have done here
51:52 - are in micro videos on my channel in the
51:54 - description down below
51:55 - all right that's a little um admin right
51:58 - there because i did see that it went
52:00 - from about 200 to 250.
52:02 - so i know i know sometimes i can get
52:06 - all wound up and fly through some stuff
52:09 - generators and very soon we will we will
52:14 - show a awesome example i want wanna i
52:17 - wanna
52:18 - we haven't really messed with modules
52:19 - that much
52:21 - but uh time can be very tricky one
52:24 - and so i just wanna introduce you guys
52:27 - to generators and then we'll go from
52:29 - there
52:30 - so let's look at this and the difference
52:34 - in the keyword so we know that return is
52:37 - with a function
52:38 - and literally how you go from a function
52:41 - object to a generator
52:45 - is is it where was it yeah iterator
52:48 - object and this is how
52:52 - you then are going to turn these into a
52:55 - generator so n equals 0
52:58 - then while in
53:02 - less than num
53:06 - yield
53:10 - now how did i know i spelled that wrong
53:11 - you guys could look at it and see
53:15 - my word because it didn't go orange
53:21 - then n plus equals one
53:25 - boom then five equals
53:28 - series i'm going to do this the short
53:31 - way
53:32 - we'll just do three so i'm creating a
53:40 - well i could i should at least do that
53:42 - since i'm calling it five
53:44 - i realized that i complained about this
53:46 - when i did it
53:48 - so five okay generator object
53:52 - series at this memory location
54:04 - well jan you know what i really
54:05 - appreciate that note jan is absolutely
54:07 - correct
54:08 - everything i'm a huge believer
54:12 - in trying to be very thorough and also
54:16 - building upon the next because look i
54:17 - want you guys i
54:20 - all right a little side note i remember
54:23 - somebody told me
54:24 - well just you just need to be more
54:25 - confident go go get some confidence
54:29 - what does that mean how do you just go
54:31 - get some confidence all right
54:33 - i want you to do these little skills
54:35 - these little building blocks
54:37 - i want you to know how to do it i want
54:38 - you to have success
54:40 - success and confidence are they're the
54:43 - same
54:44 - so i want you to be able to build these
54:45 - things these little little things
54:48 - have success building these things
54:51 - get confident building these things and
54:54 - then become more confident
54:55 - one of the coolest things that i get to
54:58 - do
54:58 - is read the comments of of these huge
55:03 - programs these lines of code that people
55:05 - write because of the things that i
55:07 - showed them
55:08 - that's probably the coolest thing that's
55:10 - part of all this so jan that is a great
55:12 - shout out
55:13 - if you're seeing this for the first time
55:15 - if you're seeing me for the first time
55:16 - thanks for being here
55:17 - do not be intimidated just a side note
55:20 - to remind everybody
55:22 - i started learning to program when i was
55:24 - 36 years old
55:25 - i'm dyslexic can't type can't spell um
55:29 - i have add if i can do it anybody can do
55:33 - it okay
55:34 - that's just type
55:38 - code follow along
55:41 - go back rewatch them do it again all
55:44 - right
55:44 - awesome shout out jan thank you so much
55:47 - okay
55:48 - so now let's run dur on five
55:55 - boom so then i do next
55:58 - on five i get
56:04 - zero i go next on five i go one
56:07 - that's done five two next time five
56:11 - three so where should this exhaust
56:15 - boom one
56:19 - two three four five now we could have
56:22 - started it
56:22 - one and gone through but i have i have
56:26 - five objects in and we're gonna we're
56:30 - gonna expand upon this
56:31 - and we're gonna go from we're gonna go
56:33 - from here but this is our
56:35 - introduction to objects
56:38 - generators iterables so now
56:42 - all right so we're at 56 we're gonna do
56:45 - a cool little puzzle
56:46 - to get us to think of patterns
56:50 - i love i love going back to this so if
56:53 - you guys haven't seen this
56:55 - oh is that i got to draw my little sad
56:58 - little stick figure
56:59 - i think so so a guy a robot
57:03 - whatever standing here he's got a bobble
57:06 - head
57:07 - so he's got to walk and go through here
57:10 - so how can he touch
57:11 - all nine circles with a repeatable
57:15 - pattern
57:16 - and this was one of the first ones that
57:18 - i saw
57:19 - and that i don't that i liked in my kids
57:22 - class of how that they had to solve this
57:24 - everything else was
57:27 - open for interpretation but i thought it
57:29 - was great for loops
57:32 - so here's a set of instructions to touch
57:34 - all of these and then you can put
57:35 - that one set of instructions into a loop
57:37 - of three
57:39 - so go forward go all the way down turn
57:41 - 180 degrees
57:43 - come all the way up turn to the right
57:46 - boom completely repeatable
57:49 - so step forward turn to the right go
57:52 - forward
57:53 - two turn 180 degrees go forward two
57:56 - turn to the right you're literally in
57:59 - this position
58:00 - right here so that loop you can repeat
58:04 - then two more times so literally those
58:06 - set of instructions you would do
58:08 - three times and i want you to think
58:09 - about it we did that
58:12 - with our loop right here we're coming
58:15 - through
58:15 - we're setting down and then we've solved
58:17 - this problem down here
58:18 - where we loop back through and turn that
58:20 - into a plus
58:21 - so here is the puzzle that we're going
58:24 - to do right now
58:26 - and it's i i think it's a great example
58:28 - and especially
58:30 - to get us to think of how to solve this
58:32 - and be very concise and we're going to
58:34 - we're going to be exposed to a new
58:38 - a new keyword
58:42 - so the puzzle is round to the nearest
58:46 - 5 if so it's a grading scale it's a
58:50 - it's a math puzzle for programming
58:54 - and the teacher wants to have
58:57 - wants to round up two so if
59:01 - if a kid gets
59:07 - the student gets a
59:11 - 78 it'll round up
59:15 - to a 80.
59:18 - they get a 77
59:21 - it stays a 77.
59:26 - so if it is within
59:29 - so if it's if it is within
59:32 - 2 of the next 10 so if it is a
59:37 - then a 90 so would that be a 93
59:42 - 93 it rounds
59:46 - up to a 95.
59:49 - now we could do this longhand and have
59:51 - every single
59:53 - one of these scenarios but
59:57 - that's not pythonic that's not
59:59 - programming that's not concise
60:02 - that's cheating so this is a great
60:06 - mental exercise
60:07 - and recognition of a pattern that's what
60:10 - this is
60:11 - this is a recognition of a recognition
60:14 - of a pattern
60:16 - forward turn right
60:20 - turn 180 degrees one way or the other go
60:22 - forward two more
60:24 - turn to the right again repeatable
60:27 - consistent
60:28 - concise one set of four five
60:31 - sets of instructions repeated three
60:33 - times
60:35 - so here's here's our dilemma
60:38 - so this is what i want you guys to think
60:40 - about so if it was a 72
60:44 - it would stay a 72 because it is not
60:47 - within
60:50 - it is not within
60:54 - 2 of the next 95 now if it was a 74
60:58 - which these would be these would be my
61:00 - grades when i was in school
61:02 - 74 would be rounded up to a 75.
61:05 - all right so let's get into it so first
61:09 - we're going to take in
61:10 - so we need to figure out how we're going
61:11 - to do this
61:16 - and we're just going to take the
61:17 - function so let's just let's just take
61:19 - in a function
61:21 - or we're going to call it fives
61:28 - now we need to we need to think of it
61:31 - think about this
61:35 - how can we then
61:39 - get
61:46 - what information do we care about we
61:49 - care
61:50 - how close where it is what it is
61:54 - how close to the to the five right so we
61:57 - need to start examining
62:00 - let's bring this down
62:03 - all right i think that's good am i still
62:05 - within frame all right
62:08 - okay good let's bring that up a little
62:11 - bit
62:12 - yeah okay pass
62:23 - so we're going to start so if i want to
62:25 - so if i'm if i only care about
62:27 - a number if it's close to five well wait
62:30 - a second
62:31 - if it's close to five i'm going by units
62:33 - of five
62:35 - so what tool do i have to keep up with
62:39 - counting by fives this is a perfect
62:42 - example
62:42 - how do we how do we find out if
62:44 - something was an even or an odd number
62:46 - jan do you remember how we did that with
62:48 - even or odd
62:50 - because basically we're counting by twos
62:52 - so now we're going to be counting by
62:53 - fives
62:58 - no i never tested to see how delayed the
63:00 - module
63:02 - the uh oops i almost said it modulos
63:04 - bingo
63:10 - so 74 divided uh modulo
63:13 - 4. excuse me modulo 5
63:17 - get a remainder of 4.
63:21 - so let's do this a little longhand i'm a
63:24 - huge fan of longhand until we begin to
63:26 - see
63:29 - what a pattern is so
63:33 - 74 would be rounded up to 75.
63:40 - 72 modulo 5 would
63:45 - oops whoa 72
63:51 - modulo 5 is a remainder of
63:54 - 2. so that wouldn't get rounded up
63:59 - but 73 modulo
64:03 - 5 would get rounded up
64:08 - so let's look on the other side so let's
64:10 - do so 80
64:12 - 88 would be rounded up to 100 right
64:17 - 90 98 or excuse me 98.99 would both be
64:21 - rounded up to
64:24 - 100.
64:27 - so wouldn't get rounded up
64:31 - would get rounded up
64:35 - would get rounded up would get rounded
64:38 - up
64:39 - would not get rounded up anybody
64:46 - anybody noticing the pattern yet
64:51 - so when when would
64:57 - anybody see it yet
65:02 - so basically
65:05 - if my remainders are
65:08 - three and four
65:12 - i will round up to the next
65:15 - five so we're going to do this
65:19 - a very long way
65:23 - and then i'm going to show you a very
65:25 - cool
65:26 - concise so we got if x
65:30 - modulo 5
65:34 - equals x
65:40 - plus equals 1.
65:48 - so
65:56 - that is that is absolutely very very
65:58 - true
66:00 - uh you can just you can just put your
66:03 - head down and whatever
66:04 - the assignment whatever the workload is
66:06 - so all right
66:08 - so if it's five we know we're gonna have
66:09 - a remainder if the remainder is four
66:12 - we know we're going to need to add one
66:14 - because what we're rounding to the next
66:16 - five so let's look at this really close
66:23 - and then
66:28 - l if
66:32 - x modulo 5
66:36 - 3 x
66:40 - plus equals 2.
66:48 - so how did i come up with two
66:53 - two and three equals five
66:57 - rounding up to the next five
67:00 - so if i come here
67:08 - and i test so if i have a list
67:13 - grades
67:19 - uh what 72 98
67:24 - 94 83
67:28 - 71 73
67:32 - and uh
67:37 - 100. let's see if i did this right
67:43 - for grade in grades
67:54 - 5's grade
68:01 - so 72
68:06 - actually let's get fancy
68:24 - i haven't done that in a while does that
68:36 - work
68:40 - you have to forgive me i haven't tested
68:41 - any of that there we go
68:49 - there we go so shouldn't have rounded
68:51 - rounded
68:52 - rounded rounded
68:56 - shouldn't have rounded rounded and
68:58 - shouldn't around it
68:59 - so there we go now
69:05 - bingo they add up to five so
69:08 - let's get let's get fancier
69:12 - let's get a little bit more
69:16 - let's get a little bit more logic based
69:18 - so we're still kind of manually
69:20 - manipulating this because we're still
69:24 - going through and doing math
69:28 - but what is what is a more
69:34 - concise
69:46 - realization of this pattern
69:50 - and we're going to learn who's used or
69:53 - keyword or i'm just thinking about that
69:56 - we need to do one for and
69:58 - and it's eluding me right now okay i
70:01 - know i mean i know i have one
70:02 - but uh who's seen the or keyword anybody
70:05 - jan
70:09 - okay all right this is where it gets
70:13 - really really concise very very quickly
70:17 - so i can put this all on three line i
70:20 - put all this on three lines
70:23 - but it's just thinking through the
70:25 - problem thinking through the pattern
70:29 - 5 equals
70:33 - 3 or
70:38 - so this being true
70:42 - or this being true so we're going to
70:44 - look at this
70:46 - um 1
70:49 - equals 1 or 1
70:52 - equals 2. true
70:57 - so 1 equals 2
71:02 - or 1 equals
71:05 - 3. false
71:10 - so
71:14 - right it only has to have one true
71:17 - and has to have both or all oh yeah we
71:21 - need to do all
71:22 - we need to do and any and all i need to
71:25 - make a note of that
71:27 - hang on let me do that now
71:31 - for two weeks from now uh
71:34 - and all any
71:38 - and time we'll do time all right
71:41 - so dude where are we where are we all
71:44 - right
71:45 - we're boiling we're boiling this down uh
71:48 - or x modulo 5
71:52 - equals right so it's
71:56 - this scenario or this scenario
71:59 - now here's where the math gets really
72:01 - fun and this is
72:02 - this is the math that i love i love to
72:05 - do
72:06 - all right
72:13 - no no no look you guys are doing
72:15 - phenomenal i forget who was saying that
72:17 - they had already done a bot
72:19 - i don't care about jargon i don't care
72:21 - if you use the right
72:23 - jargon or or not i mean if you have the
72:25 - underlying concept
72:27 - uh yeah that's that's exactly it
72:31 - having the jargon and typing exactly
72:34 - right
72:34 - that's practice understanding how to lay
72:37 - these out
72:38 - that's the important part you can go and
72:40 - google
72:42 - wow what where where to use it but if
72:46 - you don't know what to use it's
72:47 - pointless
72:48 - that you don't have to remember any of
72:50 - this there have been so many times
72:52 - i've gone back that's why you never
72:55 - delete anything don't
72:56 - ever delete anything just comment it out
72:59 - or make or shove it over and and com
73:02 - yeah comment that out do a new one
73:04 - just go back and it's for a variety of
73:06 - reasons one it's a resource that you
73:08 - have that you've already done and a
73:09 - problem you've already solved that you
73:10 - can go back and look at
73:12 - two it's to then also see the
73:14 - development that you've done
73:16 - sorry let's do this and start wrapping
73:18 - it up because
73:20 - my voice is my voice is uh fading fast
73:31 - i like that yes reed have the
73:36 - if you guys don't know the zen of python
73:38 - make sure you
73:39 - make sure you look at it let's do this
73:43 - jan you remember how to bring it in
73:50 - boom zen of python
73:53 - it's literally that import this
73:58 - yep bam bingo all right
74:02 - so now let's clean this up make this
74:05 - very concise
74:06 - just like our picture well not my
74:08 - picture but the concept
74:10 - forward turn right go forward two more
74:13 - 180
74:14 - right or left forward two turn right
74:18 - boom you're done repeat those
74:20 - instructions three times
74:22 - all right uh let's see bring this down
74:26 - so now what pattern have we noticed
74:30 - with this so check this out
74:33 - x plus equals
74:38 - 5
74:41 - minus x modulo
74:46 - 5.
74:51 - so if it's off by 4 we add one
74:57 - if it's off by three we add two
75:00 - so as long we just want these to equal
75:03 - five
75:04 - right so that's why this modulo
75:07 - if it equals three we subtract that 3
75:12 - from 5.
75:15 - we get 2 we add 2 to x
75:19 - if this is equal to 4 5 minus this
75:27 - would be one we only add one
75:33 - print x
75:36 - it's a boom and
75:42 - helps if you use the correct
75:46 - boom same same output
75:50 - exact same output not move
75:54 - should move should move should move not
75:57 - move
75:58 - should move not move so boom
76:01 - so there we go this is probably one of
76:03 - my
76:04 - favorite one of my favorite puzzles
76:08 - uh well i got a i got a couple
76:11 - i love the chicken nugget one from um uh
76:14 - the mit puzzle
76:17 - have we done that yet jan have we done
76:19 - the
76:20 - finding finding chicken nugget
76:22 - combinations yet
76:25 - i know we did nth prime number and then
76:29 - we did
76:30 - what was our decorator we did a nested
76:33 - function
76:35 - for uh i can't remember what it was
76:39 - but this is one of my favorites the um
76:42 - chicken nugget count is one
76:46 - if we haven't done that i'll go back and
76:47 - look at the notes i guess well i guess
76:49 - i'd
76:49 - look right here
76:52 - uh
76:56 - chicken no we haven't and then also
76:58 - second conversion
77:00 - so we're gonna do all these so i'll
77:01 - sprinkle in these puzzles
77:04 - in between uh in between the concept
77:07 - for um for our
77:10 - for our python so i appreciate everybody
77:14 - and to remind everybody
77:15 - uh we will be off next week we will
77:17 - rejoin
77:18 - in two weeks um be a great time to go
77:21 - back and catch up
77:23 - watch the previous live streams beau has
77:25 - done an awesome job they are sitting
77:27 - in their own little playlist you can go
77:29 - back and watch
77:30 - uh all of them any of them and any
77:33 - concept that
77:34 - you can't remember where what stream it
77:36 - was in you can jump back over
77:38 - and i really like to
77:52 - i gotcha um
77:55 - uh oh any of these concepts that
77:59 - uh or items in here
78:03 - i have a i have a single specific video
78:06 - for every single topic that we've ever
78:07 - done here so if you can't remember what
78:10 - live stream it was
78:10 - jump over to my channel do a search for
78:13 - it it'll jump right up
78:14 - but i just want to tell you guys thank
78:16 - you i greatly appreciate
78:19 - all your attention all your questions
78:21 - and all your awesome support
78:23 - and i will see you guys in two weeks
78:26 - and always thanks again guys and we'll
78:28 - see you guys next time
78:30 - bye

Cleaned transcript:

what's up everybody uh we are back for another live stream today we are going to be finishing up our shopping list looking at generators classes iterators and uh maybe even a little puzzle that that's one of my favorite little puzzles to do so all right thanks for joining us today if you are new i am sam i am from python basics and beau and quincy are hey jan how are you um allowing me this wonderful opportunity to share my joy and love for python so all right like i said i think we're on our uh eight i don't know jan wait this eighth or ninth jan helps me stay on task he's a he's a champ for me all right so let's let's one get into what i i completely forgot so we need to start looking at this so this is how you solve the problem if you have a file that has spaces and you're calling from dos it's a double quote i forgot and i was using a single quote code camp dot py close that out and boom you get you get your file so let's look at a couple of problems right here so we've solved we've solved a lot and i want to add this i can't remember if i talked about tell or not what tell does it is this it is very handy so if you lose track of where you are and oh and forgive me for the coughing uh i've been trying to treat my throat uh ben actually didn't talk most of yesterday my kids made fun of me they started whispering but uh no i'm gonna try to hang in there as much as i can i think we can get through everything and i have a pile of cough drops in front of me uh dude did some tea and some uh honey and even tried uh letting dark chocolate melt sorry if i cough a lot i greatly apologize but all right tell it actually tells you where you are in the stream of the file so we're gonna i have this here and if you get if you're getting an error especially then input output can't read or write yes it tells you the position where you are in the file stream so that's actually kind of where i theorize where the term stream came from it's a stream of data so when i have an open file it's uh in the documentation it called it it called this uh did it open this is where you are return a stream so there we go so what tell does is it tells you the position so if you're at the top of the file you're zero and then um like if we're gonna run this let's get into it let's just stay right here and then i have it as an easter egg as please tell please tell so i'm at 71. so one thing that we need to go over is what is happening right down here so we are we grabbing our list our our file we're turning it into a list that we enumerate let's bring this back up here uh shoot i got okay you guys should be able to see that yeah perfect so then i'm wrapping this in an enumerator then i'm turning it into a list so that i can count it then i'm unpacking it then printing it to the screen now what happens is once i choose which one to delete if i pick a nonzero then i go back to my list sorry something just fell behind the computer hang on one second sorry guys i thought something was back there probably something's about to fall hopefully it's nothing plugged in here all right sorry about that guys would be about right okay so then i go back to my list and and i have to i'm going to then delete something out of the list and i'm enumerating so that's why i'm subtracting one so i know because we have to adjust from the user to the file the user is not going to tolerate this this being zero through whatever number they're going to want to see one through however many so that's why we're adjusting this to minus one then we're literally just taking that list and rewriting it to the file so that's why we go w here so we don't have to go and get fancy we're just gonna literally reopen the file with w completely recreate it right over it and write our new list now i want to show you this right here the user will not want to they're going to sit there and if they're in this part of their list they're going to want to maybe delete more than one thing at a time so we need to figure out how to get that list to come back up so we're already here writing so what did i tell you guys how you can do both at the same time anybody remember all right so what we're going to do is we're going to add a plus sign so we can do write and read so when we write we are at the end so basically it's going to be because as we're writing down we're putting in we're inputting we're at the end of the string a we're at the end of the file so we just wrote we went to the file now we've changed this so we can read it as well so now we need to do is come here and after this let me make sure this is going to be in the right spot yep so now we need to go file file dot seek because we're jumping we want to jump to the top and then literally it's just this all again so it's items equals list all right so since it's the exact same i'm going to copy it i know i know i know it's probably going to break but i don't want you guys to be have to be tolerant of so all right what did i do there i did not do tabs i did control close bracket and how i need new to do control close bracket is indent indent region control close bracket so then i save this again then i exit then i run so then i list okay then i want to delete shoes so then i want to delete jelly so boom i get the list back every single time after i write it and then i come back up here and i'm back to the top so there all right so that wraps that up so 0 to continue and then exit all right so now onward onward to new things we have wrapped that up so i hope everybody has had a good week um but yeah i just always want to appreciate uh bo and quincy for affording me this awesome opportunity but yeah uh if you're new here um i've been studying python for about seven seven years and teaching for about five and have had my youtube channel for three and a half oh my goodness almost almost exactly three and a half years so any of these videos actually all of this content has already been done once before in micro videos and i'm not smart enough to come up with that name micro video one of my subscribers did so all right let's comment this out and if you're new here no but i you look down thank you i got you all right so if you are completely new highlighter region alt shift comments out everything and then alt s saves here's actually here's one thing if you are super super new awesome glad you're here but here is a fantastic way to know if you have not let me see how bright big that is if you do not know if you have saved the file so it's going to have this asterisk up here and also you run f5 and it's gonna jump because this is gonna tell you hey you did something even if you even if i even if i do one return it's gonna jump up here and it's gonna ask me to save again so there we go all right classes and generators all right we're going to go super slow because this can get out of hand really really really quickly all everything in python is an object a type of variable a variable is a class and so all right x is an object it's a variable that 5 is assigned to x and that type of variable is an int all right that's our starting point that's how we're going to move forward okay now let me see sorry i don't know what's happened i'm falling apart i'm 43 and everything's everything either hurts something always hurts or something sore like nothing's always working all the time so all right we're gonna build we're gonna create an object that's a rectangle and um and also let's look at list because this is this is a great one so so we have der on y so this is this is what we're going to be doing has anybody ever heard the term double underscore you won't ever hear me say dunder have you ever heard of dunder i'm not just asking i will never use dunder but this is double underscore and let's see in it there's iter so we're going to get into iter we're going to get into uh len we're gonna get into uh repper and now there we go and where's string okay these are the things that are happening in the background and here are methods that we can use these happen and python uses all right i'll say that again this is what we use these are what python uses so we're going to create an object we're going to create our own class rectangle and we're just going to go from there okay and of course we're going to use the keyword class and we need to look at in it do i have this position right all right so in it i thought it was literally in it this is in it the first time i saw it but it's initiate and it uses new so as you can see where did we go let's close it let's string that down uh new boom all right there's in it okay so new and in it all go together but what this does is how do we create what do we do to create how does this object come into existence so we're going to set the rules of how this object comes into existence so literally you're creating a brand think about it as you're creating a integer or we already know how to use integers and lists and tuples but now we're gonna you're creating a new something new that you're gonna need to use that is gonna react on its own you're creating a new object like a list you have a list things can come into it can come out of it and you can do things to the list so here and when you're creating an object a class just these are methods right and i said that they act like functions we know how to create a function so it's the same structure you just utilize them with the dot notation method so the very first thing you have to do is initiate it now this next word can get really weird really really fast self the best way that i have found to explain this is like this that y is a list but it is its own self right so this is each time you're going to create an object it is this type but it is itself all right does that make sense to everybody you'd only if you need to jan if you need to um if it's super complicated possibly but you wouldn't want to get into any import air probably you'd already want that in the file that you'd want to be using like a pie game file you already have that in with your loop you wouldn't want to have any issues with bringing it in unless it is ace even a overly complicated or an excessive object it wouldn't be so big that you wouldn't be able to fit it in the file and i would uh this is reference re shuffle you only want to have your own files because then when you get to having uh then we're talking about packages uh not only would you have modules but then uh then packages i mean you could but oh actually that might be a good lesson for us to get into um the double underscore main maybe we can do that next time oh uh one important admin note i haven't gotten to tell bo and uh quincy yet uh we're not gonna have a live stream next week uh i've got i've gotten a little behind a little bit so i need to take a a week off i'm not gonna even have any videos on my channel so we need to do that you you can't you can jan but i i don't recommend it unless it is a super super complicated item and then we can go from there so all right a rectangle basically we have uh the rules of a rectangle two sides two sides so length length width all right so same rules same rules apply now here's where this gets weird so since this this is its own self in this instance so you have to think of these as their own instance so we do self dot length equals length all right so you're bringing this in you're taking in input you're then going to assign this to this i know it feels so weird right now but am i spelling everything right yeah okay so then self.width equals width okay now we're going to do something let's see any questions no not yet all right so let's put this into memory what do we call this didn't mean to do that sorry guys so much to talk about about our shopping list still but who who said it was making them hungry the shopping list yeah i was glad i was able to get up and uh but uh oh tech what's up tech okay so all right we have our our new x we just dumped memory aha so it knows to have it's going to when you need to pass in our length and our width so we're just going to go three by three okay so then i call oops so then i call my object so right now we've created it we've initiated it but we've done absolutely nothing with it now this is where this is where the programming and the fun starts let's just add a little bit here and because i'm going to show you the wrong way and i'm going to show you the better way just just to show that we've done something sorry um oops i really would have bet any amount of money that i that i muted that all right any questions so far you're is links by width and then close that out save this boom so i now have something go out to the screen that the that our programming user goes okay i know something happened you put something out to the screen awesome thank you for doing that okay well we have a we have a rectangle we usually want to know stuff about it right so now we are going to look at a way so that python uses this now why don't we make a method that we can use all right not a big speller as i'm sure you guys have noticed so this is going to be short for perimeter if i start typing perimeter it's not going to go good all right let's see so again i'm using myself so we're using this we're regarding the object that we just created are our x which is a rectangle all right and let's see where we are uh oh okay so perimeter it is our length times width times two so so let's do that two times self width times self length all right let's run this boom so now now i want to challenge you guys with something that is a method what attributes do we know right now about x anybody got any thoughts and it's fine if you don't because this was one of the things that threw me off for a very very long time about a natural difference between an attribute and the method and things like this so the attributes that i have right now are length and width and it's just information that is associated and this is where my self comes into place the self length and self width take in from here and assign it back to itself that's why this comes up i guess i should have done 3 and 4 so we can see to make sure that we did did this right and now my perimeter so 3 times 3 times 2 is 18. so i did the math correctly here so now let's do what's the other one area why don't we look at area def area self then print uh so what that's just uh side by side self width times self length one glue good there we go i'm sorry if sorry about the cough drop hopefully it's not driving anybody nuts okay put this back in memory hopefully that's not too loud either sorry uh yeah let's change this up a little bit make sure should we show that we're doing all right your rectangle is three by four so then we call perimeter 24 let's check that make sure nothing changed right 4 times 2 24 okay so now x dot area 12. so the area is 12 square whatever centimeters square feet uh don't know i guess we did not uh maybe that's something else and then our x uh let's check this length boom width boom perfect so everything's going pretty good right now so now now let's get into a little bit more stuff so right now i have my double underscore in it and that's that's a cleaner nicer way to say double underscore and the reason why it's called double underscore let's look really really close if i can get you the right one there it is so one two one two never found in the pep why it was two um but that's why it's double double underscore because you literally are depressing and putting in place two underscores all right so now in our init we have this we're getting something out of the screen to share to the programming user that you have created something and this is it right here but that's not best practice i'm going to show you what the best practice is something that's called wrapper the official rep string representation of an object and guess what it has a double underscore method and then we're going to go into double underscore string so right and it's called by the wrapper function so if anybody has not noticed this when you create a double underscore method it is associated with a method a builtin python method so you're telling python hey when this method gets used come here and use it come in here and do this all right so now let's fix this right now uh okay so we commented that out so we need to get our double underscore wrapper and did anybody notice what i did i left out a double or i left out an underscore all right and so we stick with self sorry my light seems brighter today so you can see my cheery face all right so this is the official documentation excuse me this is the official string representation of the object so basically what this is saying is when you call this object back is what did we do here what is that do we have any idea what that is i don't and i don't think you do all this is saying is we got we got this yeah we're going to be doing double underscore main soon that's a cool um run through so it's that it's in this it's in that file that you just ran the main file it's this object and it's livid in this memory other than that i i got i got no idea i got nothing for you here's here's here's the best that i can do for you but when we use wrapper double underscore wrapper we're going to tell python what to put out on the screen and i want print your rectangle so when we used this up here it created and came out to the screen and did this but let's do it here is that where i have it no that's not the one i want that as our yes i want that as our string this is wrapper double underscore string so all right so what i'm doing here is we're going to just spit out this let's just show it and then we'll go through it so before when i would press when i would call our object a rectangle object i would get this so now when i call it i get boom this right here so i'm kicking out and i'm making this nice neat and pretty and you can use it now now let's look and see our double underscore str now that this is where it gets all right str called by string object with builtin functions format so it is the informal or printable string representation of objects so if by chance you did not have a double underscore wrapper it would come down here and pull the string so let's do this because this is where this should go double underscore st str double underscore self and then does this return yeah this is return oh we got to put in memory so when we call so let's go over this real slow so whatever when these are called as you go through and you all of the and we and we'll see this in a second when we get to iterators and generators all right so the builtin functions that python has done all this tremendous work for us when you want to interact when you have an object when you want to when you want to interact with those functions this is how you do it all right i haven't clicked over and looked at chat in a while yes that is the memory ram address that is exactly it yes uh actually that would be something that we can do because i do want to get into um is and uh because copy because you can get very lost into copy very quickly so yes but that is the memory address location um how to deal with those but yes you're correct you're absolutely correct jan jan's got always got good questions that is the ram address on your system all right uh i digress i can get i can get sucked in to this so quickly but you guys you guys are absolutely awesome and absolutely awesome ask awesome questions all right but this is how you interact with python this is where you begin to control and have the program user get what they need out of it so when they are using functions this is how you control what comes out to the screen all right so we're 35 in oh we have got to touch on inheritance because that gets very cool very quickly as well so alright so right here we just created a really simple object let me get this hopefully i didn't drop this that bad so we created a little object takes in two arguments and then we know how to use well create it then we know how to use and interact with the wrapper and the string built in functions for python you creating and using our double underscore methods wrapper and double underscore string and then created two new methods or two methods for our object so where where python gets very very powerful very quickly it's called inheritance and what that is is especially when you're wanting to borrow i'll give you a perfect example of something and hopefully we're still working together and we can touch on it but you don't want to create a new object you just want to bring one in and either shrink it or expand upon it typically you'd expand upon it i don't know why i said shrink it but you go okay i like i like everything about this but there's a couple more things i'd like to do with it so you bring in this object then you just add some so we're going to sorry i think i have a delivery so hopefully my dogs aren't going to go to nuts for you all right so we're going to deal with a species dog and then jump into breed so we go class dog species let's see if i spell this right k9 so i'm gonna then we need to talk about what i'm there we go what i'm doing right now voice and they bark all right so now what i'm doing here is i'm hardwiring so right now i haven't brought i don't have anybody interacting with any part of this i'm just creating these attributes and i'm hardwiring them in so now when i call when i do let's say uh buster and he's a dog boom buster so there's my there's my object and buster is did i spell that right i didn't even know yeah sometimes okay so he's a canine and then buster's voice he barks now this is where it gets cool alright so so now if i bring in and i'm gonna i want to do so what a breed of a dog poodle so i bring in dog i'm going to inherit and i don't know if we talked about pass before keyword pass basically it's telling python hey uh i know i got some stuff here i have some indention just go ahead and ignore it for now and i promise i'll fill it in later sometime you don't have to but it'd be odd if you had it there and didn't fill it in okay so um so now um we have uh rusty he's a poodle oop did i not put that nope here check this out so how did i make that mistake right here came up here so of course poodle's not in memory right because i didn't save it rusty now i didn't pass anything into all i did was come up here and say go and grab everything throw it into poodle rusty then his voice he barks and then rusty dot you already see where this is going species he's a canine so all right these are the building blocks and i want to let this sit and go from there but and i'll just give you a little tease so when you're building so it took me a while to understand what how how something can happen so think about think about a character in a video game or even a block that's just sitting there and yeah how do we keep this sorry a bird just flew into my window glad i didn't yell um so instead of doing functions so th this is the beginnings of object oriented uh programming oop you and i have we've been interacting with functionality functional programming lots of lots of uh lots of functions doing things this is the building block where you set rules and when an input happens to this object or an event you have all of these scenarios and conditions and then so like if you have let's just go with the block so if it gets hit with another object you have rules for that and methods that then go from there and things happen then if you get when you get more complicated you have a character in a game you press the up button they do something they'll move forward and now with game sophisticated you're going to need to then have the shoulders move maybe the head the torso and all of these things but instead of going through and having to think of all these scenarios you create an object then then that's the player then you create a player off that object just like we do strings so just like if i so i could do let's bring this back this is a perfect time to do this so i have my x let's keep this here then i have my y and it's you're getting the idea that's exactly but it wouldn't be quite as each each input each input would have its own and then you don't have to think about it so as you're looping through like here's a perfect example with um with pygame update so as you run the update you have an update method for that object so each time through if something's happening if this condition is met do this so then i have y and this is going to be 2 by 6. so i have y and x 2 separate rectangle objects that are acting independently from each other it's all right all right my voice is already fading so let's try to get through we got i want to get through our puzzle i want to get through iterators and generators so all right i know this can get very complicated very very quickly let me get a cough drop i hope i haven't been hacking too much for you guys i know i love i love this stuff it's i mean it's it's crazy to me that it's still going down to a processor either having power run through it or it's closed still still blows my mind how sophisticated we've come from a light lighting up or not okay there we go i could talk about this forever okay so we need to we need to talk about iterables and iterators does anybody have any idea the difference between the two so you iterate through iterable objects so iterators and iterables are like your hand all right all all iterables no i haven't said this in a while so i'm going to mess this up so you can iterate through iterables and iterators but not all iterables are iterators let's look at it so here is a perfect example of me turning and iterable and we're going to build upon it and we're going to look at it so name sam put this into memory then we call dir on name which i want you to look so we got our in it enter oh okay get an iterator from an object callable iterable so i can go through this because they act the same but they are not the same and the main difference is the next function so i like to lead iterator into generator all right so an iterator uses the next and double underscore all right so right now i do not have a double underscore next so watch so now for i am whoa that's how many times i type that then print i boom i get sam i don't know why the birds are so active today all right so now now let's wrap this up it's an inner object so now let's run dur on name so we're going to get into it we're going to get sophisticated really really quickly after this and one of the things that i love to do and i want to i just don't want to jump into the time module i like to let this stuff sit and percolate and then we go from there so the basically the the main difference oh wrong way it's okay because you can iterate over an aider and an iterable all right because it has next works so now now we need to look at next this is how you go through return the next item from an iterator so where these become very powerful is let's say when you have a command and you want to go through a iterable but you don't want it to happen all at one time you just want to go through it so let me put so now this is exhausted so i need to turn this off so i have i call name name so there is my iterator object then i call next on name next on name next on name and i call next on name one more time and it is exhausted so all right so now that is our that is our 4a this is our warm up to a generator so generator does and the reason why generators are so very powerful is they don't use up memory so again when we do our time and i'm going to show you and they're fast they're ridiculously fast so they're just sitting and waiting to be used it's almost like they have a set of instructions but they haven't created anything that's the best that i've uh come up to explain it they are a set of instructions and they just go and do it when they need it they haven't created anything they just know what to do they go and touch it come back and just wait for the next one kind of pun was intended i thought i'd get well you guys just have to sit there but i have a very captive audience i have a very awesome audience you guys are um absolutely awesome so yeah i think we can get to at least 75 minutes because we're going to do generator then i'm going to show you a little puzzle that i love to really get people to think about especially newer programmers of how to set a rule set up a rule of instructions because you saw that with our with our list here where we were bouncing around and you had flow all right i digress sorry guys okay so a generator what in the world is a generator so basically a generator is something that has a set of instructions that is sitting out there and waiting to be done it's all right uh seeing a jump up here so if you guys are new here thanks for joining us today i am sam from python basics this is our uh eighth ninth stream um and we are going through the absolute basics of python from the beginning heading towards intermediate and the sky's sky's the limit so um all of these videos are uh one are the pre all the previous live streams are in a playlist uh on free code camp and every single topic that i have done here are in micro videos on my channel in the description down below all right that's a little um admin right there because i did see that it went from about 200 to 250. so i know i know sometimes i can get all wound up and fly through some stuff generators and very soon we will we will show a awesome example i want wanna i wanna we haven't really messed with modules that much but uh time can be very tricky one and so i just wanna introduce you guys to generators and then we'll go from there so let's look at this and the difference in the keyword so we know that return is with a function and literally how you go from a function object to a generator is is it where was it yeah iterator object and this is how you then are going to turn these into a generator so n equals 0 then while in less than num yield now how did i know i spelled that wrong you guys could look at it and see my word because it didn't go orange then n plus equals one boom then five equals series i'm going to do this the short way we'll just do three so i'm creating a well i could i should at least do that since i'm calling it five i realized that i complained about this when i did it so five okay generator object series at this memory location well jan you know what i really appreciate that note jan is absolutely correct everything i'm a huge believer in trying to be very thorough and also building upon the next because look i want you guys i all right a little side note i remember somebody told me well just you just need to be more confident go go get some confidence what does that mean how do you just go get some confidence all right i want you to do these little skills these little building blocks i want you to know how to do it i want you to have success success and confidence are they're the same so i want you to be able to build these things these little little things have success building these things get confident building these things and then become more confident one of the coolest things that i get to do is read the comments of of these huge programs these lines of code that people write because of the things that i showed them that's probably the coolest thing that's part of all this so jan that is a great shout out if you're seeing this for the first time if you're seeing me for the first time thanks for being here do not be intimidated just a side note to remind everybody i started learning to program when i was 36 years old i'm dyslexic can't type can't spell um i have add if i can do it anybody can do it okay that's just type code follow along go back rewatch them do it again all right awesome shout out jan thank you so much okay so now let's run dur on five boom so then i do next on five i get zero i go next on five i go one that's done five two next time five three so where should this exhaust boom one two three four five now we could have started it one and gone through but i have i have five objects in and we're gonna we're gonna expand upon this and we're gonna go from we're gonna go from here but this is our introduction to objects generators iterables so now all right so we're at 56 we're gonna do a cool little puzzle to get us to think of patterns i love i love going back to this so if you guys haven't seen this oh is that i got to draw my little sad little stick figure i think so so a guy a robot whatever standing here he's got a bobble head so he's got to walk and go through here so how can he touch all nine circles with a repeatable pattern and this was one of the first ones that i saw and that i don't that i liked in my kids class of how that they had to solve this everything else was open for interpretation but i thought it was great for loops so here's a set of instructions to touch all of these and then you can put that one set of instructions into a loop of three so go forward go all the way down turn 180 degrees come all the way up turn to the right boom completely repeatable so step forward turn to the right go forward two turn 180 degrees go forward two turn to the right you're literally in this position right here so that loop you can repeat then two more times so literally those set of instructions you would do three times and i want you to think about it we did that with our loop right here we're coming through we're setting down and then we've solved this problem down here where we loop back through and turn that into a plus so here is the puzzle that we're going to do right now and it's i i think it's a great example and especially to get us to think of how to solve this and be very concise and we're going to we're going to be exposed to a new a new keyword so the puzzle is round to the nearest 5 if so it's a grading scale it's a it's a math puzzle for programming and the teacher wants to have wants to round up two so if if a kid gets the student gets a 78 it'll round up to a 80. they get a 77 it stays a 77. so if it is within so if it's if it is within 2 of the next 10 so if it is a then a 90 so would that be a 93 93 it rounds up to a 95. now we could do this longhand and have every single one of these scenarios but that's not pythonic that's not programming that's not concise that's cheating so this is a great mental exercise and recognition of a pattern that's what this is this is a recognition of a recognition of a pattern forward turn right turn 180 degrees one way or the other go forward two more turn to the right again repeatable consistent concise one set of four five sets of instructions repeated three times so here's here's our dilemma so this is what i want you guys to think about so if it was a 72 it would stay a 72 because it is not within it is not within 2 of the next 95 now if it was a 74 which these would be these would be my grades when i was in school 74 would be rounded up to a 75. all right so let's get into it so first we're going to take in so we need to figure out how we're going to do this and we're just going to take the function so let's just let's just take in a function or we're going to call it fives now we need to we need to think of it think about this how can we then get what information do we care about we care how close where it is what it is how close to the to the five right so we need to start examining let's bring this down all right i think that's good am i still within frame all right okay good let's bring that up a little bit yeah okay pass so we're going to start so if i want to so if i'm if i only care about a number if it's close to five well wait a second if it's close to five i'm going by units of five so what tool do i have to keep up with counting by fives this is a perfect example how do we how do we find out if something was an even or an odd number jan do you remember how we did that with even or odd because basically we're counting by twos so now we're going to be counting by fives no i never tested to see how delayed the module the uh oops i almost said it modulos bingo so 74 divided uh modulo 4. excuse me modulo 5 get a remainder of 4. so let's do this a little longhand i'm a huge fan of longhand until we begin to see what a pattern is so 74 would be rounded up to 75. 72 modulo 5 would oops whoa 72 modulo 5 is a remainder of 2. so that wouldn't get rounded up but 73 modulo 5 would get rounded up so let's look on the other side so let's do so 80 88 would be rounded up to 100 right 90 98 or excuse me 98.99 would both be rounded up to 100. so wouldn't get rounded up would get rounded up would get rounded up would get rounded up would not get rounded up anybody anybody noticing the pattern yet so when when would anybody see it yet so basically if my remainders are three and four i will round up to the next five so we're going to do this a very long way and then i'm going to show you a very cool concise so we got if x modulo 5 equals x plus equals 1. so that is that is absolutely very very true uh you can just you can just put your head down and whatever the assignment whatever the workload is so all right so if it's five we know we're gonna have a remainder if the remainder is four we know we're going to need to add one because what we're rounding to the next five so let's look at this really close and then l if x modulo 5 3 x plus equals 2. so how did i come up with two two and three equals five rounding up to the next five so if i come here and i test so if i have a list grades uh what 72 98 94 83 71 73 and uh 100. let's see if i did this right for grade in grades 5's grade so 72 actually let's get fancy i haven't done that in a while does that work you have to forgive me i haven't tested any of that there we go there we go so shouldn't have rounded rounded rounded rounded shouldn't have rounded rounded and shouldn't around it so there we go now bingo they add up to five so let's get let's get fancier let's get a little bit more let's get a little bit more logic based so we're still kind of manually manipulating this because we're still going through and doing math but what is what is a more concise realization of this pattern and we're going to learn who's used or keyword or i'm just thinking about that we need to do one for and and it's eluding me right now okay i know i mean i know i have one but uh who's seen the or keyword anybody jan okay all right this is where it gets really really concise very very quickly so i can put this all on three line i put all this on three lines but it's just thinking through the problem thinking through the pattern 5 equals 3 or so this being true or this being true so we're going to look at this um 1 equals 1 or 1 equals 2. true so 1 equals 2 or 1 equals 3. false so right it only has to have one true and has to have both or all oh yeah we need to do all we need to do and any and all i need to make a note of that hang on let me do that now for two weeks from now uh and all any and time we'll do time all right so dude where are we where are we all right we're boiling we're boiling this down uh or x modulo 5 equals right so it's this scenario or this scenario now here's where the math gets really fun and this is this is the math that i love i love to do all right no no no look you guys are doing phenomenal i forget who was saying that they had already done a bot i don't care about jargon i don't care if you use the right jargon or or not i mean if you have the underlying concept uh yeah that's that's exactly it having the jargon and typing exactly right that's practice understanding how to lay these out that's the important part you can go and google wow what where where to use it but if you don't know what to use it's pointless that you don't have to remember any of this there have been so many times i've gone back that's why you never delete anything don't ever delete anything just comment it out or make or shove it over and and com yeah comment that out do a new one just go back and it's for a variety of reasons one it's a resource that you have that you've already done and a problem you've already solved that you can go back and look at two it's to then also see the development that you've done sorry let's do this and start wrapping it up because my voice is my voice is uh fading fast i like that yes reed have the if you guys don't know the zen of python make sure you make sure you look at it let's do this jan you remember how to bring it in boom zen of python it's literally that import this yep bam bingo all right so now let's clean this up make this very concise just like our picture well not my picture but the concept forward turn right go forward two more 180 right or left forward two turn right boom you're done repeat those instructions three times all right uh let's see bring this down so now what pattern have we noticed with this so check this out x plus equals 5 minus x modulo 5. so if it's off by 4 we add one if it's off by three we add two so as long we just want these to equal five right so that's why this modulo if it equals three we subtract that 3 from 5. we get 2 we add 2 to x if this is equal to 4 5 minus this would be one we only add one print x it's a boom and helps if you use the correct boom same same output exact same output not move should move should move should move not move should move not move so boom so there we go this is probably one of my favorite one of my favorite puzzles uh well i got a i got a couple i love the chicken nugget one from um uh the mit puzzle have we done that yet jan have we done the finding finding chicken nugget combinations yet i know we did nth prime number and then we did what was our decorator we did a nested function for uh i can't remember what it was but this is one of my favorites the um chicken nugget count is one if we haven't done that i'll go back and look at the notes i guess well i guess i'd look right here uh chicken no we haven't and then also second conversion so we're gonna do all these so i'll sprinkle in these puzzles in between uh in between the concept for um for our for our python so i appreciate everybody and to remind everybody uh we will be off next week we will rejoin in two weeks um be a great time to go back and catch up watch the previous live streams beau has done an awesome job they are sitting in their own little playlist you can go back and watch uh all of them any of them and any concept that you can't remember where what stream it was in you can jump back over and i really like to i gotcha um uh oh any of these concepts that uh or items in here i have a i have a single specific video for every single topic that we've ever done here so if you can't remember what live stream it was jump over to my channel do a search for it it'll jump right up but i just want to tell you guys thank you i greatly appreciate all your attention all your questions and all your awesome support and i will see you guys in two weeks and always thanks again guys and we'll see you guys next time bye
