With timestamps:

00:00 - django is a high-level python web
00:02 - framework that enables rapid development
00:04 - of secure and maintainable websites in
00:07 - this five-hour course you will learn
00:09 - django by building a simple social media
00:11 - application
00:12 - this is a great course for people new to
00:14 - django and for people who are familiar
00:16 - with django and want to learn how to
00:18 - build a social media application
00:20 - tommy taco teaches this course he has
00:23 - created many popular courses on the
00:26 - freecodecamp channel and his own channel
00:29 - i encourage you to leave a comment with
00:31 - the most interesting thing you learn
00:33 - from for the benefit of other campers
00:35 - who are watching this course hi guys
00:38 - welcome to this video and i want to say
00:40 - thank you to free code cam for
00:41 - publishing this course and you're going
00:43 - to check out more tutorials like this
00:44 - you can check out my channel at kobitomi
00:46 - and for more of my content you can also
00:48 - follow me on twitter i'm going to leave
00:50 - a link in the description below
00:55 - so now let me show you around
00:57 - everything we're going to be building in
00:59 - this project
01:00 - so this is the end product of this
01:02 - project
01:03 - so as you can see we have a feed so this
01:06 - is just a post feed where we see the
01:08 - post of the users that we are following
01:11 - and then once we have this we also
01:13 - implemented a fixture which can allow us
01:15 - to like a user support and just click on
01:18 - the button and now you see it says like
01:20 - by one person so now we can also click
01:23 - on the button again and no likes so we
01:25 - can like and unlike a post
01:28 - we can also click on the name on that
01:31 - post and then it takes us to the profile
01:33 - page of that post
01:34 - so now in this profile page we can see
01:36 - the profile image username the bio the
01:41 - amount of posts these users have the
01:43 - followers and the following
01:45 - so now if we unfollow this user we see
01:48 - now that this is our zero follower let's
01:51 - follow him back just to support him now
01:53 - we asked one follower so we added these
01:56 - followers and following feature because
01:58 - also social media without the followers
02:00 - and following feature
02:02 - and now after that
02:04 - right here we can just see a list of all
02:07 - the posts the users have and we can
02:09 - click on it
02:10 - and once we click on one we'll be able
02:12 - to scroll through all the images of all
02:15 - the posts the user have easily
02:17 - now we can come back to the um
02:20 - and as you can see we right here we have
02:22 - this users you can follow
02:24 - so we did a little bit of suggestion
02:27 - field here
02:28 - the currently logged in user will make
02:31 - sure that the users that has been
02:33 - suggested and not people that is
02:35 - following already that's so right now if
02:38 - we click on view user you see that we
02:40 - are not following this user that's why
02:42 - it has been suggested
02:43 - and this is a brand new user he has no
02:45 - post no follower no
02:48 - if we follow this user right now
02:50 - he has one follower and we go back to
02:52 - the home you see that that user is not
02:54 - suggested again now that's because we
02:57 - already followed our user so we can be
02:58 - suggesting someone that you already
03:00 - follow
03:01 - now after that we also added a picture
03:03 - which will allow us to upload pictures
03:06 - so we can just choose the picture write
03:08 - the caption hit upload and then
03:11 - the people that are following us will be
03:13 - able to see our new our latest book
03:17 - and we also have this
03:18 - account settings feature for that the
03:21 - first thing we did in this project was
03:23 - to
03:24 - do the user authentication where a user
03:27 - can sign into our platform and register
03:30 - on our platform which is very important
03:32 - and also when it's logged in you can log
03:34 - out
03:35 - if i log out right now
03:37 - you'll see
03:38 - that we have this login so i can just
03:40 - log in since it's already autofilled
03:43 - and now we have that
03:45 - and we come here and we can click on
03:47 - account settings and right here we can
03:49 - change our profile image of bio our
03:53 - location and everything we need to
03:54 - change
03:55 - press cancel just takes us back
03:58 - and we also have this search function
04:00 - which is also key so we know we have a
04:04 - user that is named jasper so let's come
04:05 - here and just say jazz
04:07 - and let's set you see that it gives us
04:10 - jasper uses his location la and his bio
04:14 - if we click on just bar we can see his
04:16 - page this is also a brand new user so
04:18 - this is basically what we're going to be
04:20 - building
04:21 - and note that you can add a lot of
04:23 - pictures that you want to add yourself
04:25 - also because after this project the main
04:28 - purpose of this project is to introduce
04:30 - you to things you can do with jungle so
04:32 - i hope that after this course you will
04:34 - be
04:35 - comfortable with django and you can take
04:37 - what you learned from this course into
04:39 - your own project to build your own
04:40 - project or even enhance this at our
04:42 - point having all this said i also want
04:45 - to say that the source code to this
04:48 - project
04:50 - here you can get the template file so as
04:51 - you can see we're using a template for
04:53 - this project where you can get the
04:54 - template file we use and the old source
04:56 - code to everything we coded
04:58 - i'm going to have a github link to the
05:00 - source code
05:02 - and you can just easily get the template
05:04 - file and full and code along
05:06 - and
05:07 - you can just get your source code also
05:08 - so if you are stuck somewhere and just
05:11 - easily check that out
05:16 - so for the beginners taking this
05:17 - tutorial i'm just going to quickly give
05:19 - a brief introduction to chango
05:22 - so what exactly is django
05:24 - django is a python web framework and
05:26 - what i mean by that is that using django
05:29 - you can build web applications with the
05:31 - python programming language
05:33 - now if you recently learnt python or you
05:35 - know python already and you are looking
05:37 - to go into the web development view and
05:40 - django is a good choice for you
05:42 - now there are various reasons why
05:44 - companies and developers choose to use
05:45 - django
05:46 - some of these reasons are because django
05:48 - is fast there's a large community
05:51 - jungle provides security to your
05:52 - application django is also very scalable
05:55 - and these are just few of the reasons
05:57 - why developers choose to use django but
06:00 - one key one is that django has a very
06:02 - large community now this is important so
06:04 - that when you encounter an error when
06:06 - you're stuck on something you can easily
06:08 - search that error and there's
06:09 - probability that someone has already
06:11 - solved it for you online maybe on stack
06:13 - overflow or something now this is very
06:15 - important so that
06:17 - you can easily fix your bugs or fix your
06:20 - errors by just a google search so django
06:22 - has that large community of a lot of
06:24 - developers around it
06:27 - so having this said
06:28 - i hope you have an understanding of what
06:31 - django is and why you should even choose
06:33 - django let's go to the next section
06:40 - now the first thing we want to do
06:42 - is to create a new django project
06:44 - so i'm in this folder here which is just
06:47 - i created a new folder named socialbook
06:50 - the social book is gonna be the name of
06:52 - the
06:53 - social media application that we are
06:54 - building
06:55 - i just created a new folder on
06:58 - on my computer in documents that doesn't
07:00 - really matter but what i just need is to
07:02 - get this
07:04 - directory to that folder so this is
07:06 - where i want to create my django project
07:08 - and
07:09 - develop everything
07:11 - so now that i have the directory to that
07:13 - folder i'm just going to open up my
07:15 - command prompt
07:17 - right here
07:18 - so you might be on a mac you might just
07:19 - open up your terminal or any other osu i
07:22 - just open up the terminal in there
07:24 - so right here i'm just going to go into
07:27 - that particular directory so right now
07:29 - i'm in that directory if i press dir you
07:31 - see it's empty
07:33 - let me press cls to close it up
07:35 - i'm going to be building this
07:37 - social media application from scratch to
07:39 - the finish so i'm going to show you how
07:41 - i build
07:43 - applications
07:45 - when i'm developing my site project or
07:47 - something so you can totally relate with
07:49 - it
07:50 - so right now we are in this directory
07:53 - and
07:53 - if you are new to django
07:56 - when we want to create a jungle project
07:58 - we use some command lines so to create a
08:01 - new jungle project what we will do is to
08:02 - say jungle
08:04 - i think admin
08:06 - start project
08:09 - and then the name of the project right
08:11 - here so this will be the name of the
08:12 - project so this is the command line we
08:14 - use to create a new tango project
08:16 - but before you even want to create a
08:18 - jungle project you need to make sure
08:19 - that you have django installed
08:21 - now you know in python we have pip which
08:24 - is a python package manager if you
08:27 - install python we have python installed
08:29 - already it should come with it
08:31 - just to make sure we have django
08:32 - installed we're going to
08:34 - keep
08:35 - install
08:36 - tango
08:39 - so this is going to install the latest
08:40 - version of django for us
08:42 - now i already have this installed on my
08:44 - computer on my laptop
08:46 - so it should tell me that requirements
08:48 - already satisfied now that's because i
08:50 - already have it installed but for you if
08:52 - you don't have it installed if you're
08:54 - new to django as i said it should go
08:55 - ahead and install that for you so it's
08:58 - going to pop up now and tell me
09:00 - requirement already
09:02 - so we should do that
09:04 - second
09:05 - okay we can just
09:08 - out of that
09:09 - and
09:10 - so i canceled the operation because i
09:12 - already have that
09:14 - so i'm just closed i like cleaning up
09:16 - the command
09:18 - so right now let's just create a new
09:20 - django project in this particular folder
09:23 - so what i did i first came into the
09:25 - folder make sure i have django installed
09:26 - and now it's time to create a new jungle
09:28 - project
09:29 - i'll say django
09:32 - in admin
09:34 - that project
09:36 - i'm going to name it social
09:40 - book
09:42 - so this is going to create a new folder
09:44 - named social book this particular
09:46 - directory now if i press d ir you see
09:49 - now that i have a new directory a folder
09:51 - named socialbook i also go back to that
09:54 - folder now i have a new folder name so
09:57 - i go into it you're gonna see that it
09:59 - creates this
10:01 - other folder name socialbook and the
10:03 - file name manage.p
10:05 - so
10:06 - just gonna go into that particular
10:10 - jungle project i just created by saying
10:12 - cd social book
10:14 - now i should have money dot py and
10:16 - social brokerage
10:17 - i come back here and enter the social
10:19 - book again i'm gonna see some files
10:22 - which is basically just the files that
10:24 - django create get application
10:27 - so now that we have this django app
10:29 - running we can just test it out by
10:31 - running it on our server but what we're
10:33 - going to do first is to create
10:36 - our django app so we have a jungle
10:37 - project and we have a jungle app to take
10:39 - all the functionality
10:41 - so let me just quickly explain the
10:43 - difference between a jungle project and
10:45 - an app so take facebook.com for example
10:49 - we have facebook.com which is the main
10:52 - project so for here we have socialbook
10:54 - which is the main project but let's say
10:56 - you want to have a picture like messages
10:59 - or notifications or post feed each of
11:02 - those can be different apps no now it
11:04 - depends on how you want to do it me
11:06 - personally i like having one project and
11:08 - one app and that app can take all the
11:10 - functionalities like all the pictures
11:12 - the logging in signing of authentication
11:14 - and everything
11:15 - but
11:16 - normally you can have a project and
11:19 - different functionalities as the app so
11:21 - let's say facebook.com as i said is the
11:23 - main project facebook is a project here
11:26 - then
11:26 - we can have like the authentication
11:29 - scheme as
11:30 - a different app just to take care of the
11:32 - authentication and what i mean by that
11:34 - is user authentication means logging in
11:36 - and registering a user
11:38 - we can also have another app to take
11:40 - care of the notifications we can have
11:42 - another app for the messaging platform
11:44 - so that is just
11:46 - the basic understanding of difference
11:48 - between django app and jungle project so
11:51 - you can see a django app is like a
11:54 - subset of django project but for this
11:56 - project we're just going to have one app
11:58 - that's going to take care of everything
12:00 - so now that we're in here let's just
12:01 - create a new django app
12:03 - and the command is similar to creating a
12:05 - django project so we'll do django
12:08 - iphone admin
12:11 - that app
12:12 - and we'll name the app
12:14 - because it's taking care of everything
12:15 - and we're not giving it a specific name
12:18 - and just say call
12:19 - but i like maybe my app score just
12:22 - that's just me or you can name it
12:24 - anything you want totally
12:26 - now if i press dir i have a new folder
12:29 - named core i come back in now i have a
12:31 - new folder name call and in there i have
12:33 - this bunch of files
12:35 - that we're going to be looking into
12:37 - later when we are using them to develop
12:40 - so right now i have everything taken
12:41 - care of i've created my jungle widget
12:43 - and i've added an app to it
12:45 - now let me just run this project and
12:47 - make sure that everything is working
12:48 - fine on the server
12:50 - so to run your project or even see if
12:52 - the installation has worked successfully
12:54 - all you need to do is to say python
12:57 - manage dot py
12:59 - run server
13:00 - now note that if you're on a mac you
13:02 - need to add python three money dot pyro
13:04 - server because the recent version of
13:06 - django doesn't support python 2.
13:09 - so as you can see it gives us this
13:12 - output just ignore this for now and what
13:15 - you just want us to do is to go to this
13:17 - url
13:18 - on our browser
13:21 - right here we can paste it
13:23 - and then it should
13:25 - boom so this is it what this is now is
13:28 - that it's saying that we have
13:29 - successfully created our django project
13:32 - and is working successfully
13:34 - and see here
13:36 - is the install work successfully
13:37 - congratulations now this simply means
13:39 - that everything we created has worked
13:42 - successfully so
13:44 - this is the url that we're going to be
13:47 - seeing all our project or the output of
13:49 - our project in
13:51 - so that's the local oh sport 8000 that's
13:54 - the default url for django when you run
13:56 - your jungle on your local server on your
13:57 - machine
13:59 - it is
14:00 - now that we've created our jungle
14:01 - project and stuff
14:03 - this is basically the home url of our
14:05 - website but when a user comes to our
14:07 - website like socialbook.com we don't
14:09 - want this to show right we want to show
14:11 - like our own template our own design you
14:14 - know our on social media so let's get
14:16 - into that
14:22 - let's go ahead and set up our urls
14:25 - we're gonna go into visual studio code
14:27 - now
14:28 - if i come here i have my visual studio
14:31 - code open and i have imported the
14:32 - project we just created let me quickly
14:35 - walk you through how to do that so
14:38 - just make sure you have visual studio
14:39 - code or any other you know code editor
14:41 - that you're using
14:42 - and on right here
14:45 - click on open folder and once you click
14:48 - on noble folder just go to the folder
14:49 - where we created
14:51 - this django project and it's going to
14:53 - open up that project for you right here
14:55 - like
14:56 - this so what we just want to do
15:00 - as you can see right here we have core
15:02 - which is the app we created and we have
15:03 - sociable which is the
15:06 - main project we created but we don't
15:08 - have money dot py and some other files
15:10 - if i come back to my folder right here
15:13 - see that we should have money dot py and
15:15 - sqlite database but it's not there that
15:17 - means they didn't import why
15:20 - i was selecting so what we just need to
15:22 - do is to come to file open
15:24 - folder and make sure you don't select
15:27 - anything just open the old folder and
15:30 - you should
15:31 - so we don't want to save anything yet
15:34 - because this is seeing it as a workspace
15:35 - we just want to open it as before
15:38 - now you should go ahead and open that
15:40 - folder up for us and then once we have
15:43 - this opened
15:44 - what we just need to do is to set up our
15:46 - urls
15:47 - and so this answer is
15:51 - as you can see now we have everything
15:52 - imported or opened but now let's go
15:55 - ahead and set up our urls
15:57 - so if you don't understand what i mean
15:58 - by urls what i just simply mean is the
16:01 - path
16:02 - of our website so when a user comes to
16:05 - socialbook.com should it go or what
16:08 - should happen or when a user comes to
16:09 - socialbook.com profile what should
16:12 - happen so basically each of those paths
16:15 - are urls like socialbook.com
16:17 - profile is a url that we need to set up
16:20 - once the user comes to slash profile
16:22 - something will happen but we don't set
16:24 - that url up then it doesn't exist don't
16:26 - worry you're gonna get this
16:29 - the first thing we want to do
16:31 - to come into our app
16:33 - and create a new file in there and name
16:35 - it urls.py
16:38 - so right here now we're just going to
16:40 - import something from django
16:43 - if from
16:45 - angle.urls
16:48 - import path
16:51 - now this part is going to allow us to be
16:53 - able to set up our urls and now we're
16:55 - going to have a new list and name it url
16:57 - buttons
17:00 - and now to set up our home url a path
17:04 - and we leave it blank once we leave it
17:06 - blank like this this is signifying that
17:08 - we're setting up our own url where we do
17:10 - something like
17:11 - profile
17:13 - this is signifying our setting up our
17:16 - website slash profile
17:19 - so now
17:20 - after this we put a comma
17:22 - and we'll say
17:24 - use dot
17:25 - index
17:27 - and we'll give it a name of index
17:30 - so what this is doing is that this views
17:32 - is where basically
17:34 - do most of our coding so
17:36 - you are going to understand what i mean
17:38 - by view dot index in a bit but first of
17:40 - all before we can even access these
17:42 - views so these views right here that
17:44 - we're saying is this view.py file in the
17:46 - same directory i'm just going to go
17:48 - ahead and open that
17:49 - so before we can access that file we
17:51 - need to import it
17:53 - so we'll save from
17:55 - dot
17:56 - import
17:57 - use
17:59 - now we have views imported we can use
18:01 - views.index
18:03 - but if risingviews.index is no function
18:06 - or no class or anything like index in
18:08 - here so we need to set that up also i'm
18:11 - just giving it a name like a keyword for
18:13 - this particular url
18:15 - index
18:16 - so basically what is the same is that
18:18 - once the user comes to the home url
18:21 - go to the views.index whatever is being
18:24 - done there
18:25 - just basically show that to the user so
18:27 - now we can save this
18:29 - i'm going to come into views now we need
18:31 - to set up a new function for the index
18:35 - i need to take a request
18:40 - now we can return a simple http response
18:42 - but first we need to import that
18:45 - from
18:46 - django.http
18:48 - import
18:49 - http
18:50 - response
18:52 - now we can just say
18:54 - return an http response
19:02 - h1
19:07 - and
19:08 - say welcome
19:11 - to
19:12 - social book
19:15 - now this is what we need to say so let
19:17 - me explain what i did here so as i said
19:20 - right here what we did was imported
19:22 - parts imported views and then we set up
19:25 - a new url named
19:28 - the home url which is empty and we said
19:30 - it should go to the views.index and this
19:33 - view.index basically is coming to this
19:36 - views file i need to go to dot index
19:38 - look for any function that is not index
19:40 - so now that it has dot index whatever is
19:43 - being done here in this function is what
19:45 - is going to serve that particular url
19:48 - so now since we're just sending an http
19:50 - response this is just what it's going to
19:52 - show
19:53 - let me save it now
19:55 - one more thing
19:56 - before we can
19:58 - this can reflect on our main project we
20:00 - need to set the urls up on our main
20:02 - project as you can see we set it up on
20:04 - our app but if we come into social book
20:08 - coming to urls here what we just need to
20:11 - do
20:11 - is to import something called include
20:16 - and now we just have to set up the home
20:18 - url that's the only thing we need to set
20:20 - up right here
20:21 - and we'll say if someone comes to the
20:22 - home url
20:24 - just include
20:27 - or
20:29 - dot urls
20:30 - what this is saying is that if someone
20:32 - comes into the home url in code
20:34 - cloud.urls now this call to arrays is
20:36 - our app which is for dot urls which is
20:40 - so it's going to go into code urls and
20:43 - look for any path that is similar to
20:45 - this and whatever is being done there is
20:46 - what
20:48 - which is this path
20:49 - and then this part also links to
20:51 - views.index which is right here so
20:54 - everything just link back to returning
20:56 - this http response now this is done
20:59 - let's just make sure our server is
21:00 - running
21:01 - so this gave us an error when we use
21:04 - views.index but we haven't defined index
21:07 - in the views wire file let's go ahead
21:10 - and refresh this
21:13 - right and refresh this now
21:15 - it should update
21:17 - and not give us any error because
21:20 - obviously we've already added that index
21:22 - function in our views
21:24 - so it still says index is not defined so
21:26 - let's make sure we saved our views of
21:29 - people
21:31 - right here
21:36 - also
21:39 - it's reloading
21:40 - let's see
21:42 - okay
21:44 - let's make sure everything is working
21:46 - fine too this one is first of all
21:48 - okay so
21:49 - you have
21:51 - or the two arrows in line five you say
21:54 - index
22:00 - in here first of all
22:04 - save that so it can reload so sometimes
22:08 - we need to like reload and let's just do
22:12 - use
22:14 - dot
22:15 - index
22:17 - name
22:18 - x
22:20 - save again
22:21 - now let's see once it reloads
22:26 - dude as you can see now everything is
22:28 - working so sometimes
22:30 - jungle just need a little bit of
22:31 - tweaking or reloading so it can update
22:35 - now let's go back to
22:37 - this that we run and we shouldn't see
22:39 - this again now
22:40 - what we should see now is that http
22:42 - response welcome to social books as you
22:45 - can see what we see now is welcome to
22:47 - subscriber so basically we've removed
22:49 - that default jungle template i was
22:51 - showing in stores work and we've given
22:54 - this http response on our own url but
22:57 - this is still not what we want what we
22:59 - want is to show a template basically
23:03 - that's what we're gonna do
23:08 - now let's go ahead and set up our
23:10 - template
23:11 - so if i come in here into the folder
23:14 - it's going to go right here
23:17 - right here and you see i have one folder
23:19 - called template here so this is just
23:21 - basically the template for that we're
23:23 - going to use in this tutorial so it's
23:26 - just a free template
23:27 - and everything the whole template and
23:29 - everything will be
23:31 - in the github link of this project so
23:34 - you can get the template also
23:36 - and i have these two templates here one
23:38 - is for the profile one is what is for
23:40 - the main
23:41 - for the index sign up everything
23:43 - and what i just want to do is to
23:46 - drag this
23:48 - i'll select it first of all and i'm
23:50 - going to drag the html files into a
23:53 - particular folder but before that let's
23:56 - come into our visual studio code
23:58 - so before we can
24:00 - even use any template we need to do some
24:02 - configurations writing vs code
24:04 - let's close this social book where else
24:07 - we don't need that again
24:09 - now we want to go into our settings.py
24:11 - file
24:12 - and right underneath here we just want
24:15 - to import os first of all and
24:19 - let's scroll down
24:20 - so in installed apps when you first
24:22 - create an app it's always advisable to
24:25 - add the app in here now this is not
24:27 - relating to the template but just so we
24:29 - don't get an error later let's add that
24:31 - up
24:32 - so now that we have that
24:34 - let's scroll down
24:35 - right here where you see this template
24:39 - is a list
24:40 - and what you're just going to do is to
24:41 - come into dares and this desk is just
24:43 - specifying the
24:45 - where jungle should go and look for all
24:47 - our template files so let's just
24:51 - stop and in the
24:53 - base directory of this project now when
24:55 - i say base directory i mean the same
24:58 - directory which contains the money.py
25:00 - file
25:01 - so the base directory of this project
25:02 - we're going to create a new file and
25:03 - we'll name it templates
25:06 - and in here is where all the html files
25:09 - of this project is going to be so we
25:12 - need to tell django that that is where
25:13 - everything is going to be that's what
25:15 - we're going to do right here so first of
25:16 - all we need to import os as we d we're
25:18 - going to come right here under this i'm
25:21 - going to say
25:22 - os the path
25:24 - the join
25:28 - page there which is the base directory
25:33 - go into template
25:36 - so it says from the base they're going
25:37 - to template that's where you should look
25:39 - for all our templates files it that's
25:41 - basically all we need in telling jungle
25:44 - where to look for our templates files so
25:46 - we just save that and right here in our
25:48 - template files now we need to load it up
25:50 - with our html files let's come
25:53 - back here
25:54 - and we'll drag that
25:58 - just copy it in there good so now we
26:00 - have that in there we need to copy one
26:03 - more
26:04 - which is
26:07 - from the profile
26:09 - so go to static dom profile
26:12 - now i will explain what i mean by this
26:13 - static dom profile later
26:15 - let's just take this profile
26:18 - so again all this is going to be
26:19 - available in the github link of this
26:23 - tutorial so you can easily grab them
26:26 - and yeah so right now we have all the
26:28 - html files of this template now
26:30 - and what we can just do now if i close
26:33 - this up
26:35 - don't need this for now
26:37 - we can go into the views file
26:40 - and instead of returning an http
26:42 - response we can now render an html page
26:45 - so this is the index function obviously
26:47 - we want to render the index.html
26:50 - what we do say return
26:52 - render
26:54 - take a request
26:57 - get index.html
27:00 - so this is just the line of code we need
27:02 - to show this index.html file
27:05 - now
27:06 - let's make sure everything is running
27:08 - good and let's come back here and hit
27:10 - refresh i should see this again and we
27:12 - should see that template
27:15 - let's give it a moment to
27:17 - load that up okay good as you can see
27:20 - now
27:20 - we see all the template we see the
27:22 - template but it is looking
27:26 - bad
27:27 - so this is because we have not set up
27:29 - our static files
27:31 - our static files is basically any other
27:33 - file
27:34 - that we're going to use in our template
27:36 - file so any other apart from my html
27:39 - this might be an image file a javascript
27:41 - file or css file any other file we're
27:43 - going to use
27:44 - in this our template it needs to go into
27:46 - static and we're gonna do that in the
27:48 - next session
27:54 - so as i said the reason why our template
27:56 - is not looking good right now is because
27:58 - we haven't connected or set up our
28:00 - static files let's go ahead and do that
28:03 - i'm going to come back to visual studio
28:05 - code
28:06 - the static files as i explained in the
28:08 - last video is basically
28:11 - any other file that we're going to use
28:13 - in our template file apart from the html
28:15 - file so any other image css for
28:17 - javascript file any other file we're
28:19 - going to use goes to the static but how
28:21 - do we set this up let's do that
28:24 - so let's close out this again
28:26 - and similarly to what we did in the last
28:29 - video we're also going to create a new
28:31 - folder name is static
28:33 - and as you might have guessed we're
28:34 - going to go into the settings of pyr
28:36 - file also
28:38 - and then we're going to set static up
28:41 - right here it just shows this that the
28:43 - static url but we need to set up the
28:45 - static root and the static files
28:47 - directory so let's do that
28:49 - so static
28:52 - underscore root
28:54 - goes to os dot
28:56 - path dot join
29:02 - is there
29:07 - static files
29:08 - i don't mind why this is different from
29:11 - this
29:12 - but this the next one now is the main
29:14 - connection so says static
29:19 - files
29:21 - there's
29:23 - first two
29:25 - is
29:26 - the path
29:27 - the join
29:33 - is there
29:37 - comma
29:38 - static
29:40 - right here
29:42 - now let's save this
29:44 - now let me quickly take a moment to
29:46 - explain why we're even doing this
29:48 - so jungle whenever we're connecting
29:51 - like images or css files it doesn't
29:54 - connect it the normal way that html
29:56 - connected so if you work with html very
29:59 - well you know that when you want to link
30:01 - for example an image file
30:03 - what we do is
30:05 - you have an image
30:07 - and we say src
30:09 - equals to then right here
30:12 - we have like the
30:14 - directory to the image file in my bin
30:16 - assets
30:18 - slash
30:19 - image.jpg
30:21 - so for example in
30:24 - html these i will link an image file but
30:27 - in django is quite different
30:30 - what we just need to do in jungle
30:32 - we need to make sure that this asset
30:34 - slash image file is inside the folder
30:36 - named static so it must be inside this
30:38 - folder and after it's been inside our
30:41 - folder when we are going to the html we
30:43 - need to put something like this and say
30:46 - with a percentage sign we say static
30:49 - with this
30:52 - that to close
30:54 - so this is the way jungle basically sees
30:56 - any external file and we're gonna do
30:58 - this for anytime we are linking to any
31:00 - standard file it might be css it might
31:02 - be javascript images any other file but
31:05 - this is what we're gonna do
31:07 - so for django to be able to recognize
31:09 - this we need to set all these things up
31:10 - like setting up static creating a new
31:13 - folder and putting the static files in
31:14 - there i hope you understood what i just
31:17 - now i can just close that up and save
31:20 - so now that we have all this set up
31:22 - next thing we want to do is to move copy
31:25 - all our static folders and files into
31:28 - this static folder right here
31:30 - gonna come into
31:34 - well
31:36 - first of all in this template
31:39 - right here
31:40 - this asset is where all the static
31:43 - for all those html is located
31:47 - external files for all these files
31:50 - in this asset that means we just need to
31:52 - drag the asset
31:54 - into this static folder and
31:57 - do not add folder to workspace copy the
31:59 - folder
32:00 - so i copied it we've copied it there but
32:03 - as i said the profile
32:05 - and the rest have different
32:08 - settings or different files either so
32:11 - what we just want to do now
32:13 - also copy all the static
32:16 - steps
32:17 - yes store
32:19 - and just select that out
32:22 - and now let's copy the rest
32:27 - attic
32:28 - opening food
32:30 - now everything is going to copy it's
32:32 - just going to take a few seconds because
32:34 - some files might be larger than the
32:35 - other so that's
32:38 - done and we actually do not need this
32:41 - so we have seen
32:44 - okay this is still
32:46 - okay but as that is doing
32:49 - we're gonna close this settings now we
32:52 - don't need it
32:53 - and we're gonna actually open this
32:56 - index.html file right here in the code
32:58 - editor
33:00 - i'm going to come to template and open
33:02 - index.html
33:04 - we're going to get back to this also
33:06 - let's just make sure all this has worked
33:08 - i have one two three four five six seven
33:13 - for the profile
33:14 - so
33:15 - seven items selected good but we don't
33:17 - need a static down template it's not
33:19 - part i just added that so we're gonna
33:21 - have to
33:23 - kind of remove that
33:26 - contempt
33:28 - go
33:30 - delete it
33:33 - equipping
33:36 - so you don't need to understand what i
33:37 - did there what i just did was i added a
33:38 - file that i want to remove basically
33:41 - so now as you can see
33:44 - this html5 is quite different because on
33:47 - top we have something named load static
33:49 - right here remember what i explained
33:52 - when i said we don't link files normally
33:54 - so just to save time
33:56 - and not
33:57 - let you watch
33:58 - hours of tutorial on something not
34:01 - necessary so i already you know
34:04 - configured all the linking for the way
34:07 - jungle will see it like django template
34:09 - and stuff so before you can do this
34:12 - before you can even like go to a css
34:14 - file and add a static and also close it
34:17 - at the top of the file
34:19 - you need to add something named load
34:21 - static
34:22 - if we don't add this it's going to give
34:23 - us an error it's basically loading all
34:25 - the static settings the static file so
34:27 - this file can use it so i already did
34:29 - all this for all the wall
34:32 - you know
34:33 - html files are copied so
34:35 - that's why if i come back here
34:38 - if i come into template
34:40 - i come into so you can see i said static
34:43 - non-template i have the normal template
34:45 - that doesn't have all these
34:46 - configurations done but before i started
34:49 - filming this tutorial i just made sure i
34:52 - you know tweaked everything so that
34:54 - it will save time but i hope you
34:56 - understand what i mean by this static so
34:59 - basically we need to load static first
35:01 - of all and then
35:03 - anywhere we are linking something we
35:05 - just need to add this static at the
35:07 - beginning and at the end so throughout
35:09 - the whole file i did that anyway we are
35:12 - linking a file i added everything if we
35:15 - scroll all the way to the bottom
35:17 - writing the javascript also i did that
35:20 - so that's just how to
35:22 - configure that and if we scroll up
35:26 - and notice that right here we are
35:28 - linking a png
35:30 - but
35:33 - we didn't add static let's add static
35:38 - piece
35:40 - and we close it like this
35:43 - that's basically how to do it
35:45 - now if we go into our
35:48 - browser
35:49 - and we hit that refresh button
35:52 - see our website in good
35:56 - let's see
35:58 - second
36:00 - things
36:05 - the color
36:09 - yeah boom as you can see right now
36:12 - basically have all of this loaded
36:16 - everything good
36:17 - such username the post is as you can
36:20 - follow so this is just the basic
36:22 - template i used for this as you can see
36:25 - everything is fine the static files have
36:27 - been loaded
36:29 - load more javascript is also working so
36:32 - everything is totally good
36:35 - so now that we have all of this
36:37 - let's just try ahead
36:40 - by
36:41 - starting with the registration and
36:43 - signing up of a user
36:49 - now let's start with the authentication
36:52 - of our website so
36:54 - basically what i mean is allowing a user
36:56 - to register and login to our website
36:59 - so before we do this
37:00 - we need to create a model so first of
37:03 - all let's
37:04 - close this index.html we don't need it
37:06 - for now and then we're going to come
37:09 - into
37:10 - modules.py right here
37:13 - so this models.py file is basically the
37:16 - file where we create our jungle models
37:19 - so we can use it as a database for our
37:22 - project
37:23 - so now we want to create a profile model
37:27 - this profile module is going to have
37:28 - different things like the user profile
37:31 - picture
37:32 - the user bio the user location and stuff
37:35 - like that so
37:37 - first of all let me explain why we are
37:38 - creating this profile module
37:40 - so we know that django as
37:43 - in as default it gives us this user
37:45 - model which a user is going to be able
37:47 - to you know sign in sign up and have
37:49 - some information like their first name
37:52 - username email and stuff but we want
37:54 - more
37:55 - so the jungle
37:57 - alt user model authentication it gives
38:00 - us the username
38:02 - the first name last name email and
38:04 - password so those are the only fields it
38:06 - gives us but we want more so we want to
38:09 - be able to add the user by you the user
38:12 - profile image the
38:14 - location maybe like a country is from or
38:16 - something so there are various ways we
38:18 - can go about this we can create a custom
38:21 - user model or we can just extend
38:24 - that user model that jungle already
38:26 - gives us or we can create a separate
38:28 - model for the profile
38:30 - and link it to user model using a
38:33 - foreign key
38:34 - so that's what we're going to do i'm
38:36 - going to create a separate model for the
38:37 - profile and link it to the user model
38:39 - using a foreign key so i'm going to show
38:41 - you how we're going to go about this now
38:44 - you might want to do it anyhow you like
38:46 - if you're already familiar with jungle
38:47 - you might want to extend the database or
38:49 - anyhow you feel it's easier for you
38:51 - but this is the way i'm going to do it
38:53 - in this tutorial
38:54 - so first of all
38:56 - let's create
38:58 - a class and we're going to name it
39:00 - profile
39:03 - and that will be take from the models
39:05 - dot model
39:08 - and now i want to give this field the
39:09 - user
39:11 - just pass on everything first
39:13 - i want to have like the id of the user
39:16 - so
39:19 - now i'm not going to say user underscore
39:21 - id and i'm going to explain what i'm not
39:23 - going to say it's why i do id user
39:25 - so we have user this is going to be a
39:28 - foreign key that is going to link to
39:30 - that model i'm going to we're going to
39:32 - do that the id user this is going to be
39:34 - the id
39:36 - of the user that has this profile
39:39 - and we also want to buy you
39:43 - we want
39:44 - profile image
39:46 - profile img
39:49 - pass again
39:51 - we want the location
39:56 - so these are basically the things we
39:58 - want for this our modules
40:01 - but for this profile image we're going
40:04 - to use an image field so if you're
40:06 - familiar with jungle you know we have
40:07 - different model field we have character
40:10 - field the text field integer field but
40:12 - when we want to do something like a
40:13 - profile image we can use the file field
40:16 - but that file will be able to call it
40:18 - like videos pdf files or we want to
40:21 - narrow it down to
40:23 - but this view to connect all the images
40:25 - so we're going to use an image view
40:28 - so what we're going to do is something
40:30 - like this models
40:32 - dot
40:33 - image
40:34 - field
40:36 - now we need to configure some things
40:38 - like where will this image upload to
40:41 - when a user uploads the image
40:43 - which folder will you upload to
40:45 - so just the way we set up static files
40:48 - and all those type of stuff we also need
40:50 - to set up media the media is gonna
40:53 - like take care of uploading like
40:55 - basically the storage where all these
40:57 - files are gonna be stored because also
41:00 - when we go deeper into this application
41:02 - when we allow a user to upload a post
41:06 - the user will want to upload an image
41:07 - with that post so where would that image
41:09 - go to so we need to store we need to
41:11 - configure all these things also and this
41:13 - one is quite different from the others
41:15 - the only similarity is that we are going
41:18 - to create
41:19 - a new folder again in the base directory
41:22 - as i said the page directory is the
41:24 - folder which contains the money.py file
41:26 - of that project
41:28 - so now we're going to create a new file
41:30 - i'm going to name it
41:31 - media
41:34 - this media basically is going to store
41:36 - all the images we're going to be
41:37 - uploading
41:38 - and now that we've created that file we
41:40 - need to come into
41:42 - our settings dot py so i'm going to open
41:44 - our proof our project
41:47 - and go to settings
41:49 - now right here we just make sure we
41:50 - scroll down
41:52 - and we'll say media
41:55 - underscore url
41:58 - a
41:59 - flash media
42:01 - flash
42:04 - dash like this
42:06 - and we also need to specify the media
42:10 - routes
42:13 - the os dot
42:14 - path the join
42:19 - based directory
42:22 - and
42:23 - media so the name of this folder must
42:26 - correlate with the name we gave it here
42:28 - let's save that and we can quit this the
42:31 - next thing we need to do is to go into
42:33 - the urls of py file of our project not
42:36 - of our app so we need to come into
42:38 - social cookie's main project go to the
42:41 - urls of your wifi
42:43 - all right here we're going to import two
42:44 - things
42:45 - i'm going to import settings and static
42:48 - if from
42:50 - jungle
42:52 - and configuration we shorten it to conf
42:55 - import
42:57 - settings
42:59 - next one is from
43:00 - jungle.configurations.urls.static
43:08 - import
43:10 - static
43:14 - good so this is what we need to import
43:17 - and now to specify the url for this our
43:20 - media
43:21 - specify or to configure our media url to
43:24 - finalize it the urls patterns
43:28 - goes to
43:30 - variable pattern above
43:34 - plus static
43:40 - settings
43:42 - dot media
43:44 - underscore url
43:47 - have a comma
43:49 - and just bring it down here
43:51 - and say
43:52 - document
43:55 - underscore root
43:58 - equals to settings
44:01 - dot media
44:03 - root
44:06 - now we can save this
44:08 - so what this is doing is it's just
44:10 - specifying the url
44:12 - of our media so uh media files so this
44:15 - is just the way we set up anything
44:17 - dealing with media let me quickly recap
44:20 - so we we started with our modules which
44:24 - we are going to finish in a minute
44:26 - but because we are going to use an image
44:27 - field and that is a file
44:30 - we need we need to create a new folder
44:32 - called media which is going to take care
44:35 - of the uploading of the image where it's
44:37 - going to be stored and we need to go
44:39 - into settings.py file to
44:42 - assign these two variables media url
44:44 - media root and we needed to import that
44:47 - into the url.py file socialbook
44:50 - and just
44:51 - configure url path
44:54 - now we can close this and now we'll be
44:56 - able to use
44:57 - an image field in our module
44:59 - so now
45:00 - we say models.image huge
45:04 - but one more thing we need to specify
45:07 - some things that django is going to
45:09 - understand so
45:10 - when a user wants to submit a form of
45:13 - this field or when he doesn't want to
45:16 - submit a profile image
45:18 - where does that image upload to i know i
45:20 - said it's going to upload to the media
45:23 - folder or where in that media folder is
45:25 - it going to upload
45:27 - so we want to have different categories
45:29 - or different folders under this media
45:31 - folder here so we might have one that
45:33 - says profile images my vendor folder
45:35 - that say post images so we don't mix all
45:38 - the images together so let's say
45:41 - this should upload and use the upload
45:44 - tool
45:46 - profile
45:48 - images
45:49 - now i know that under media folder we
45:51 - don't have any older name profile images
45:54 - but if we don't have any folder what
45:55 - django is going to do is that for the
45:57 - first time it's going to create a new
45:59 - folder there called profile images and
46:01 - then from that time
46:03 - any image being stored through this
46:05 - field or through this model is going to
46:07 - be stored under media on a profile image
46:10 - so basically since we don't have that
46:11 - created now we can create it manually
46:13 - but i prefer for django to do it
46:14 - automatically so you're just going to
46:16 - create profile images folder and it's
46:19 - going to store it today
46:20 - but now that we have that out of the way
46:22 - one more thing
46:23 - so you know when you sign up to like
46:26 - facebook and you don't yet have
46:28 - a profile picture there's actually a
46:30 - default profile picture that facebook
46:32 - puts for you
46:33 - so we also want to do that so that if
46:35 - the user doesn't have a profile picture
46:37 - yet want to give him a default profile
46:38 - picture
46:39 - but what we're going to do now right
46:41 - here if you come into your static
46:44 - and you come into images
46:46 - you're going to see that we have a image
46:48 - called blank profile picture
46:50 - that's the name of the image blank
46:52 - profile picture dot png
46:54 - i would love to show you yeah if that is
46:57 - going to open but that's just basically
46:58 - a default profile picture that we're
47:00 - going to give the user so okay that's
47:02 - going to open good as you can see this
47:04 - is just a default like profile picture
47:05 - for user that didn't upload the profile
47:07 - picture yet
47:08 - so now let's just
47:11 - copy the name of that file
47:14 - and quit this
47:18 - and then what we just want to do is to
47:21 - say
47:22 - default equals to
47:26 - blankprofilepicture.png
47:28 - but remember again i said that anything
47:30 - dealing with these images
47:32 - of files in a jungle model it needs to
47:36 - be done in this like media folder so
47:39 - when we are getting the default image
47:42 - this blank profile picture.png how does
47:44 - django know that it's supposed to go
47:45 - into static images then look for this no
47:48 - jungle doesn't know that so what we are
47:50 - going to do these blank profile images
47:52 - we're just going to drag it
47:53 - from there and paste it in media
47:57 - don't want to move that so now it's the
47:59 - media so when
48:01 - we say blank profile picture that image
48:03 - tango is going to go into this media
48:06 - folder and look for that file
48:08 - since now that we know django can see
48:10 - that file we can continue with
48:12 - configuring the rest of our module files
48:15 - our model fields this profile image now
48:18 - is done model dot image field
48:20 - it's uploaded to profile images and it
48:23 - defaults as if the user didn't upload
48:26 - profile image yet
48:27 - or doesn't want to upload the profile
48:28 - image you should just use this as the
48:30 - user's profile image
48:32 - so now that we have that out of the way
48:34 - let's start from the beginning right
48:35 - here
48:36 - so here in this user
48:39 - we want to link this particular profile
48:40 - to the user model
48:43 - using a foreign key so what we need to
48:45 - do first is to get the
48:47 - model of the current user that is logged
48:49 - in or that is authenticated
48:51 - and then that is going to be
48:54 - like
48:55 - be the default for this foreign key so
48:57 - we are going to understand that now when
48:59 - we do that
49:00 - first of all let's do from
49:04 - django.contrib.org
49:07 - on trip
49:10 - dot auth
49:12 - import
49:14 - get user model so i want to
49:18 - import this
49:20 - attribute name get user model but you're
49:22 - just going to get the model of the
49:24 - currently authenticated user so let's
49:27 - give it
49:28 - variable and say user equals to
49:31 - get user model
49:37 - we're just initiating that
49:39 - and now that we say user equals to this
49:41 - get user model
49:43 - anytime we use this user now is just
49:45 - basically going to be
49:47 - model of the currently logging user
49:50 - so now right here we're going to say
49:51 - models
49:53 - dot foreign key
49:57 - user
50:01 - on delete
50:04 - first modules
50:06 - cascade
50:13 - that's good so now what this is just
50:15 - doing is we have a foreign key that is
50:17 - linking to the
50:19 - connector to this user which is
50:22 - this user variable which is this get
50:25 - user model
50:27 - that's been imported
50:28 - you have that done now this id user is
50:32 - just meant to be an integer field so
50:33 - model
50:34 - dot
50:35 - integer field
50:40 - that's that's that doesn't need any
50:42 - attributes in here
50:44 - so i know you might not understand why
50:46 - we like have this id user or while we
50:49 - have
50:50 - this user foreign key
50:52 - related to a foreign key that is
50:53 - connected to this that if you are new
50:55 - you might not understand that but when
50:57 - we are using this in our you know
50:59 - project when we are getting the post
51:00 - when we are allowing the user to be able
51:02 - to follow another user you know why or
51:05 - you understand why all these
51:07 - are being done like this so just follow
51:09 - along for now and let's get back so
51:12 - now we have the bio the bio we just want
51:15 - the bio to be a text field
51:17 - so same model the text field
51:20 - and
51:21 - we can give it blank equals true now
51:24 - this is because the user might not want
51:26 - to have a value it's not compulsory and
51:28 - allow it to be blank
51:30 - now the location
51:32 - models dot character field this time
51:35 - around and a character field
51:38 - has a max length
51:41 - of hundred
51:42 - i just give it a maximum length of
51:44 - hundred and let's also give it blank
51:46 - equals true because the user might not
51:48 - want to put his location that's not
51:49 - compulsion
51:50 - all this is good
51:52 - we have the user
51:53 - id of the user the value of that user
51:56 - profile image the location
51:59 - now let's just return
52:02 - the
52:03 - basically the username
52:05 - so say dev
52:08 - str
52:11 - self
52:13 - return
52:16 - self.user
52:19 - so this self.user is just this let's get
52:22 - the username that model
52:25 - so what this is doing this is not
52:26 - compulsion you can remove these if you
52:28 - don't want this is just in the name of
52:30 - the model so that when we are seeing the
52:32 - model in our admin panel it's going to
52:34 - be showing the username and it's not
52:37 - going to be showing object 1 or object
52:38 - 2. i'm going to show you that like in a
52:40 - couple of seconds
52:42 - so now we have this done
52:44 - now let's just go back to our command
52:46 - prompt and let's make migrations and
52:49 - migrate everything to our database
52:52 - first of all note that before you
52:55 - run migrations or anything the app where
52:57 - you have this module.py for us it is
53:00 - core that's the name of the app this app
53:02 - must be added to install apps in the
53:04 - settings of your wifi if we come down
53:07 - here remember in the beginning i said
53:09 - let's just add this to avoid any error
53:10 - later that is the main reason so because
53:14 - we want django to be able to see this
53:16 - app as part of this project we need to
53:18 - add it to installed apps so now we
53:21 - can be able to
53:22 - upgrade our database
53:24 - so basically if you don't know the
53:26 - meaning of migrate or what i'm talking
53:28 - about in jungle once we create all this
53:32 - data here so this is basically like the
53:34 - name of the database and these are
53:36 - tables in the database so think about it
53:38 - like that this is the name and these are
53:40 - tables but these are row each row
53:44 - each row like this
53:46 - i wish i can like visualize this for you
53:48 - in a table but just think about it like
53:50 - this the name of that database and this
53:52 - is each row in the table of that data
53:54 - so now all this that we've done we need
53:57 - to migrate it to our database i'm going
53:59 - to show you that also so we have to come
54:03 - right here
54:05 - let's opt out of the server real quick
54:11 - out
54:15 - so yeah done and now to migrate our
54:17 - server we just manage
54:20 - python
54:21 - manage dot py make migrations
54:26 - and once we make migrations what this is
54:28 - doing is that any changes that we made
54:30 - in our models dot py file is gonna save
54:34 - that change before migrating it to our
54:35 - database so if we come here and let's
54:38 - say we add
54:40 - blank equals false or something blank
54:42 - doesn't have a false but if we remove
54:44 - blank or something since we've made it
54:46 - change we need to come here and do
54:48 - python manage write make migrations to
54:50 - save that change then migrate again
54:52 - anytime you touch this file you need to
54:55 - do that it's just
54:57 - that
54:58 - now that that changes has been
55:01 - made let's just say
55:04 - python manage dot py
55:08 - migrate
55:10 - so now this is going to migrate that
55:12 - database
55:13 - that model into our database this is the
55:16 - first time we're running it that's why
55:17 - it's migrating the earth admin and every
55:19 - other thing but the main thing we want
55:21 - to see
55:22 - migrating is this call that's my great
55:24 - thing
55:25 - and
55:26 - now
55:28 - um i want us to run our project and go
55:31 - to the admin to see our
55:33 - you know database but we can go to the
55:35 - admin to see our database because
55:38 - if we go there we don't have any login
55:40 - yet
55:41 - that a user can use to
55:44 - log into the admin panel so to create
55:46 - that we're going to say python
55:50 - manage
55:54 - dot py
55:56 - create
55:58 - super
55:59 - user
56:00 - this command line is going to create a
56:03 - super user now this super user means
56:06 - like
56:06 - a user that can access the admin panel
56:09 - so any normal user that sign up from our
56:11 - site can just use their login details to
56:13 - log into the admin panel only we
56:15 - developers that can create a specific
56:17 - super user and log into the admin panel
56:21 - so now let's just say admin
56:24 - give it
56:31 - book
56:32 - dot com
56:33 - i'll give you the password password
56:36 - again
56:37 - it says the password is to come on to
56:38 - the username let's just bypass that but
56:40 - that is created successfully now let's
56:42 - run our server again
56:45 - ui run server
56:49 - but that is preparing to run i'm going
56:51 - to come back into our browser
56:55 - actually let's open a
56:57 - private window this private window is
57:00 - just for our admin panel so that we'll
57:02 - be able to log into our admin panel and
57:05 - not
57:06 - interfere with logging in
57:08 - to a normal user so
57:10 - it is
57:14 - in private browsing
57:16 - and go to our website now
57:19 - slash admin our website should be
57:21 - running now
57:23 - just come here and see
57:27 - so as you can see right there our
57:28 - website is running
57:30 - let's come down good this is what we
57:32 - want to see
57:33 - it basically gives us this
57:36 - login form to log into the django
57:37 - administration now django administration
57:39 - doesn't have a signup form
57:41 - the only way you can sign up to this
57:43 - generation is from your console it's
57:46 - from your command line
57:48 - now let's log in with the details we
57:50 - just created
57:52 - i mean
57:55 - again with the password also
57:57 - and we hit again
58:00 - good but now that we use login you can
58:02 - see we have just two
58:04 - database we have groups and we have
58:06 - users this is created by default
58:10 - in django
58:12 - if we open these users we're going to
58:13 - see one user which is us the
58:16 - super user admin user so let's wait for
58:19 - that so as you can see the username
58:21 - admin email address
58:23 - and staff status so remember i said that
58:27 - django as a default gives us this user
58:29 - model but it doesn't have enough fields
58:32 - for us to build this social media
58:34 - platform it just gives us only username
58:36 - email address first name last name
58:38 - and a password but we want more than
58:41 - that as i said so that's why we created
58:43 - a profile model now let's go back to our
58:46 - visual studio code because
58:48 - we come back to home you see that the
58:50 - model we just created which is profile
58:52 - is not showing here so we also need to
58:54 - make sure that that shows here so we can
58:56 - manage that database
58:58 - do that it's very simple just like two
59:00 - lines of code
59:02 - we come into a file named admin.py
59:06 - now this file is going to be in your app
59:08 - just click on the file
59:10 - and the first thing to do right here is
59:12 - to import the model that you want to
59:14 - show
59:15 - in your admin panel
59:16 - if from dot models
59:19 - import profile since this profile we
59:22 - want
59:23 - show in our admin panel or register to
59:25 - administer
59:26 - now say admin
59:28 - dot site
59:30 - does register
59:32 - profile
59:34 - now i register now
59:35 - it's profile mode into the admin if i
59:38 - save this now
59:39 - just gonna come back here and make sure
59:41 - everything loads successfully
59:43 - once that loads i'm gonna go back to my
59:46 - admin panel and now i should see my
59:48 - profile
59:50 - done
59:51 - i'm gonna come here
59:53 - if i refresh this now good now i see
59:57 - under this core app see profiles right
60:01 - click on it no profile yet because we've
60:03 - not done anything to the profile but
60:06 - this is the first step in the user
60:07 - authentication
60:09 - so
60:10 - i hope you understand what we've done
60:12 - till this point created a specific
60:15 - profile model for each user so when
60:17 - users sign up
60:19 - a profile mode is automatically going to
60:21 - be created for them now we're going to
60:24 - do the
60:25 - registering of a user of the signing up
60:27 - of the user in export
60:34 - the next thing to do now is to set up
60:37 - the view for
60:38 - our registration
60:40 - to be able to register a user into our
60:42 - platform basically
60:44 - what we want to do now
60:46 - let's just come into views.py
60:49 - we want to create a new url for our sign
60:52 - up
60:53 - so let's just collapse these
60:56 - and this
60:58 - just to make everything clean
61:00 - first of all we're gonna have to come
61:01 - into urls and create a new url
61:04 - for that view so what we want to do want
61:07 - a user to be able to come to our website
61:09 - slash sign up and you'll be able to sign
61:12 - up to our platform or register on our
61:14 - platform
61:15 - so let's add it here
61:19 - right now just put sign up
61:24 - and right here sign up
61:27 - and the name also should be sign up
61:30 - so basically
61:31 - our website slash sign up then you
61:33 - should go into views dot sign up and it
61:35 - has a name of sign up but we know we
61:37 - don't have user sign up yet we're gonna
61:39 - have to come into views
61:41 - create a new function named sign up
61:46 - it's gonna take a request
61:50 - and let's just render
61:53 - our html template return render
61:57 - request
62:01 - sign up.html now this signup.html
62:05 - basically
62:06 - this page is signup.html
62:09 - that's what we are rendering when user
62:10 - goes to slash signup
62:12 - let's save this
62:14 - also save our urls
62:16 - basically we have that done
62:19 - and let's just make sure that when we go
62:20 - to slash sign up it really renders this
62:23 - first of all
62:25 - as you can see right here our website is
62:27 - running so we can go test that out
62:30 - now let's go to slash sign
62:33 - up
62:36 - enter good so as you can see our website
62:38 - is showing and we
62:41 - are going to do some configurations
62:42 - first of all
62:43 - we
62:44 - want this to be sign up on the changes
62:47 - to sign up once it changes to social
62:49 - book and maybe change the title let's go
62:51 - do that first
62:53 - we will come back here
62:55 - and then in
62:57 - signup.html
63:00 - so this again remember as i said i
63:03 - already tweaked the
63:06 - all the links for static
63:09 - so now i'm just gonna
63:11 - change this to
63:17 - up
63:24 - okay
63:25 - okay and let's scroll down
63:29 - right here where we see
63:30 - youtube
63:32 - social
63:33 - book
63:38 - all right here we see signing we have to
63:40 - change it to sign
63:42 - up yeah so that's that
63:46 - and
63:48 - this
63:50 - could be
63:51 - fine
63:54 - let's just
63:55 - use changes
63:58 - sign up social work social book sign up
64:01 - this is i know
64:03 - we change this instead of this so
64:07 - to see with that
64:09 - then right here which is sign
64:13 - up
64:15 - that should work now
64:16 - i know about this was logging good
64:20 - now once that to be able to sign up with
64:22 - just the username
64:23 - the
64:24 - email and the password we don't really
64:27 - need the first name if you want to
64:28 - collect the first name in your own
64:30 - application you can do that but we don't
64:32 - really need the first name and last name
64:34 - let's just call it the username the
64:35 - email and
64:37 - because user have to have a password
64:39 - right here where we see
64:41 - this
64:43 - form
64:44 - let's just image this for rest
64:49 - make
64:49 - our work
64:53 - we have this form here
64:55 - what we're gonna do is
64:58 - a name let's change it
65:01 - and let's make it have
65:04 - so we have all this style and everything
65:05 - done
65:06 - let's just
65:08 - username is okay
65:10 - let's have an email type should be an
65:12 - email
65:14 - this order should be email
65:17 - and
65:17 - all of them needs to have a name
65:20 - because when we are collecting the data
65:22 - in our back end
65:24 - we're going to collect them using the
65:25 - name
65:26 - of the particular thing
65:29 - so right here after
65:32 - type
65:33 - the name
65:34 - so this is the username should have name
65:36 - of username
65:38 - so let's just copy this
65:44 - you have email
65:46 - and this is what the password right so
65:50 - password
65:54 - and this is
65:55 - as you say password to
65:58 - confirm password and we can also change
66:01 - this to password the type
66:03 - your password type
66:04 - more security
66:08 - and what again i agree to terms and
66:10 - condition that is not really
66:14 - let's just comment that out
66:18 - now let's go ahead and see what we have
66:21 - now
66:22 - so it automatically fuse it in
66:24 - basically
66:27 - let's just remove that
66:33 - hdd
66:34 - it doesn't fill it in again
66:36 - now we have sign up we have all of these
66:39 - which is good
66:40 - what we want to do let's also scroll
66:43 - down
66:46 - button
66:47 - everything is working
66:50 - good
66:51 - so now right here in this form we want
66:54 - the action
66:56 - we leave it blank now when we leave this
66:57 - action blank it means that once we hit
67:00 - sign up all this data that has been
67:02 - inputted in here is going to be sent
67:04 - back to the signup page i'm going to
67:06 - show you why we do that
67:08 - so now we have the action blank
67:10 - another thing we want to have
67:13 - is the method
67:14 - we want to use a post method now in
67:17 - django there are
67:18 - two different
67:20 - type of methods we use when submitting a
67:21 - form
67:22 - use the guest method and the post method
67:25 - let me tell you why and when we use any
67:28 - of the two
67:29 - we use a guest method basically when we
67:31 - are passing
67:32 - like an information that is not
67:34 - confidential so like let's say a user
67:36 - wants to search like
67:38 - python you have a search engine here and
67:40 - the user also search like python
67:42 - so on that search form
67:44 - you can use a get method because the
67:47 - value being shown
67:49 - is not confidential it's just what the
67:50 - user is searching for
67:52 - and when you're asking the post method
67:54 - is basically where when you have
67:55 - confidential
67:57 - inputs like a password we don't want the
67:59 - password to show so if you use a guest
68:02 - method whatever is being searched or
68:04 - whatever it means submitted is going to
68:06 - be shown in the url we've used a post
68:09 - method those values are going to be
68:10 - hidden
68:11 - those are the major two difference
68:14 - so
68:15 - if we're going to show an input in the
68:17 - url that input has to be an input that
68:20 - is basically not confidential as i said
68:22 - because if we are using
68:24 - like this signup form and why is in a
68:27 - get method we don't want to show the
68:30 - user sign the user's password in the url
68:32 - bar that is not a good practice so
68:35 - that's why we use post method or let's
68:37 - say you have a
68:39 - platform where a user pays using his
68:41 - credit card information
68:43 - and you don't want to use a guest method
68:45 - in that situation because credit card
68:48 - information can be shown in the url so
68:50 - basically those are the majors to
68:51 - difference you can also
68:52 - do a quick search on google if you want
68:54 - to dive deeper that
68:57 - another thing is that when we use a post
68:59 - method in django
69:01 - we need to add this
69:04 - templating style called csrf token now
69:06 - this just take care of some what malware
69:09 - because this dsrf stands for cross site
69:12 - request for audrey so it's basically
69:14 - like an attack but when you put this it
69:16 - basically takes care of that
69:18 - jungle way we're not going to get too
69:20 - much
69:21 - into that
69:22 - now let's save this
69:24 - and let's come here and hit refresh
69:27 - and
69:28 - just put
69:30 - random things
69:33 - just to make sure that everything is
69:35 - working
69:39 - once we sign up it brings us back to
69:41 - this page that's what we want
69:43 - so now that all this information is
69:45 - being sent to sign up view using a post
69:48 - method
69:49 - what we're just going to do now
69:51 - in the views
69:52 - we're going to get all of them using an
69:54 - if statement so what we're going to say
69:56 - is that
70:00 - if requests does method
70:04 - equals to post
70:08 - so this simply means that if the
70:10 - when a user wants to
70:12 - look for this site or when user comes to
70:14 - this particular page
70:15 - if this page has been summoned using a
70:17 - post method then we're going to do a
70:19 - pool of things if not just show
70:22 - sign up so when we just come to this
70:25 - page normally and just enter like this
70:26 - it's just a it's not a post method yet
70:29 - so but when we submit a form i need to
70:31 - sign up we are
70:32 - sending back some information to this
70:34 - page using a post method that's when
70:36 - we're going to be able to get those
70:38 - values
70:39 - so what we're going to do now
70:42 - that if the request of meta disposed
70:45 - we're gonna do some things let's pass
70:47 - first
70:49 - else
70:51 - i mean there's not a post method and
70:52 - just
70:53 - on this particular
70:56 - page so now there is a post method let's
71:00 - get all the value that has been sent to
71:02 - this
71:03 - view
71:05 - so we can get that same
71:07 - name
71:08 - first to request
71:10 - let's post
71:14 - their name
71:15 - what i just did was that i added a new
71:17 - variable and i said request.post
71:20 - username that means the the data that
71:23 - has been posted here is going to get the
71:25 - value of that data using the name of the
71:27 - input if i come back to sign up
71:30 - remember i said they have to have a name
71:31 - when this is submitted it's going to
71:33 - have like a name and a value so using
71:36 - the name of this input which is username
71:38 - now
71:39 - in this views file we'll be able to get
71:40 - the value now if we just do something
71:43 - like print
71:45 - username
71:47 - it's going to basically print whatever
71:49 - we input here in our console just give
71:51 - me a minute and let's just add something
71:54 - and um just fill it up and test what i
71:57 - just said
71:59 - so as you can see it's not yet getting
72:01 - any error like the password don't match
72:04 - um
72:05 - all this type of stuff like the username
72:07 - is taking the email is taking we're
72:08 - still going to do that but now we hit
72:10 - sign up
72:12 - let's see
72:14 - gives us a value error
72:16 - they said views dot signup didn't return
72:18 - so it didn't return anything because
72:20 - we're not returning i'm not giving it a
72:22 - response we're just getting the value
72:24 - but we're going to undo that but let's
72:26 - come back here first and you'll see
72:28 - that right here
72:30 - gives me this value which i put in the
72:32 - form as the username basically we are
72:35 - getting the value of that form
72:37 - and once we have the value that is being
72:39 - sent to that form and just use that
72:41 - create a new object in our user model
72:45 - now let's go back here
72:47 - and what we're just going to do is to
72:49 - copy this four times
72:51 - so now we need to have email
72:56 - password and password two which is
72:58 - repeat password
73:03 - so now the email
73:05 - has a name of email
73:07 - just advisable to copy it so you don't
73:10 - contain any error in the names and stuff
73:12 - like that even if you know you are
73:14 - correct
73:15 - password
73:20 - password two
73:23 - now we have all these values
73:25 - now that we have all these values
73:27 - and create
73:29 - now first check some things we first
73:30 - check if the password one is because of
73:33 - the password two because
73:35 - when was saying confirm password the two
73:37 - passwords have to be the same we also
73:39 - check if the email exists we also check
73:41 - if the username exists
73:43 - before we do all those we need to import
73:44 - something and what we need to import is
73:47 - the user model
73:49 - user model which is
73:51 - um
73:53 - right here
73:55 - which is this user model where all the
73:57 - users has been stored
73:59 - so we need to import that right here
74:01 - so
74:04 - first of all
74:05 - let's say
74:06 - from
74:08 - tango
74:10 - dot contrib
74:13 - that's earth
74:15 - that's models
74:19 - import
74:21 - user
74:24 - good i also want to import something
74:26 - named alt now this is going to allow us
74:28 - to authenticate the user
74:31 - now i think that's what we need for now
74:35 - just come down here back
74:37 - so now
74:38 - this
74:39 - is we're just gonna have another if
74:42 - statement
74:45 - and yeah what i'm gonna say is
74:48 - if
74:50 - password
74:51 - equals to password two
74:54 - and if the passwords are the same
74:57 - then
74:58 - something
74:59 - fast for now
75:01 - else
75:05 - we'll have to give it an error
75:07 - saying that the password does not match
75:10 - so to give an error we're going to use
75:12 - something called messages we also need
75:14 - to import that
75:16 - so we have to scroll all the way up
75:20 - right here where we have
75:22 - we could have imported it from this
75:25 - let's just
75:28 - angle
75:30 - dot contrib
75:33 - import
75:35 - messages okay so this is going to be
75:37 - able to send a message if it's an error
75:39 - or a warning
75:40 - just gonna be able to send a message to
75:41 - the front end
75:43 - so now
75:44 - if the password is equals if the two
75:46 - passwords are the same we're gonna
75:48 - continue and will not check again if the
75:50 - email is taken or use any mistake but
75:52 - before we even go for that if the
75:54 - passwords are not the same let's first
75:55 - send an error and tell the person that
75:58 - the passwords
76:00 - don't match
76:01 - we're going to say messages
76:04 - let's use an info
76:06 - message is the info
76:09 - the request
76:12 - and we just turn the message
76:16 - password
76:18 - not matching
76:22 - and then
76:23 - we have to redirect the user back to the
76:26 - sign up page
76:30 - but before we even use redirect we also
76:32 - need to import redirect but that's easy
76:34 - because we are importing redirect from
76:36 - django.shortcut which we already have
76:38 - here so let's just say redirect
76:42 - now that we have that we just say return
76:45 - direct
76:48 - to the sign up
76:50 - so we are redirecting the user to the
76:52 - sign up
76:53 - by sending this
76:55 - message so that the user will be able to
76:57 - fill that form again basically
77:00 - now that we have this as if the password
77:04 - are not equal but if the password is
77:06 - equal
77:07 - let's have another statement by saying
77:09 - if
77:10 - user which is the user model
77:13 - dot objects
77:15 - dot filter
77:18 - email
77:19 - equals
77:21 - email
77:24 - dot exists
77:32 - i want to do something so what this is
77:34 - saying is that if
77:37 - we go to the user model we check each of
77:39 - the objects then we filter and we find
77:42 - an object in which the email which is
77:45 - being
77:46 - which is in the user model is equal to
77:48 - the email which is being
77:50 - posted to this view if that exists then
77:52 - we just want to tell the user that this
77:54 - email already exists i mean this email
77:56 - is already taken the message is dot info
78:02 - request
78:05 - email
78:07 - taken
78:09 - and then once we tell the user that
78:10 - email is taken we want to redirect the
78:14 - return
78:15 - redirect
78:21 - user to the sign up
78:26 - now that we have that
78:27 - we will use another if state member a
78:29 - leaf so else if
78:33 - we want to check if the
78:35 - username is taken so say user
78:38 - dot objects dot filter
78:45 - name
78:47 - goes to username
78:49 - but exists
78:54 - and we just want to do the same thing by
78:56 - saying messages
78:58 - that's info
79:02 - request
79:06 - username
79:08 - taken
79:10 - and then we're gonna
79:12 - direct the person back to this page
79:24 - so now
79:25 - for what if
79:27 - password is equal
79:29 - the
79:29 - username does not exist and you and the
79:32 - email does not exist
79:34 - just say else sometimes if there is no
79:37 - error nothing but happen what we just do
79:41 - now we want to create that new user so
79:43 - we just say user
79:45 - equals to user
79:48 - dot objects
79:50 - dot
79:51 - create
79:52 - user this one this one is going to be
79:56 - able to create a new user for us
79:58 - and we just say user name
80:01 - goes to this username that has been
80:03 - passed
80:07 - and then the email
80:09 - equals to the email that has been passed
80:12 - and also the password of that user
80:15 - we just take one password because we
80:17 - don't need to sort to passwords
80:19 - just to pass
80:22 - so we're storing the username
80:25 - password
80:27 - and the email basically
80:28 - now that we have that
80:31 - just say
80:32 - user
80:34 - dot save
80:36 - now that we save the user
80:39 - this should work
80:41 - but before you know saving the user or
80:43 - doing anything like that before testing
80:46 - it
80:47 - as i said we created this profile model
80:50 - so once we create a new user we also
80:52 - want to create a profile model for that
80:53 - user but before we test that out let's
80:56 - just save this first of all
80:58 - and let's go to our
81:01 - page
81:03 - and we have this one
81:06 - so what we want to do now we want to
81:08 - test the error that
81:10 - we
81:11 - configured in here remember we said if
81:13 - password is not equal it should give an
81:14 - error so let's even test if that is
81:17 - working
81:18 - so our
81:20 - that is
81:24 - okay good
81:25 - so now
81:27 - that
81:31 - um give it this
81:34 - i'll give another one
81:37 - okay so when i sign up now
81:41 - if i come into
81:43 - my users
81:45 - you'll see that there's no
81:47 - additionalization
81:48 - and this is because obviously the
81:50 - password was not the same so it can
81:52 - create a two different password but
81:54 - didn't even tell us anything like the
81:56 - password is not matching i didn't create
81:58 - or whatever how would the user know what
82:00 - happened so we need to do that
82:02 - what we are going to do is to go into
82:05 - the html file here we are going to use a
82:07 - for loop
82:08 - we are just basically going to pass
82:10 - those messages that has been sent
82:12 - and show it here like password no
82:13 - matching or password correct or username
82:17 - taking and stuff like that let's quickly
82:19 - go back to our vs code
82:22 - but since we are sending all these
82:23 - messages already
82:25 - writing them to redirect it should be
82:26 - easy
82:28 - what we just want to do
82:29 - from above
82:32 - form
82:34 - let's have a new div tag
82:37 - in there we want to have
82:41 - say
82:45 - for message
82:49 - in
82:50 - messages
82:55 - and h5
82:57 - let's just
82:59 - print that message
83:01 - this is just going to basically print
83:02 - the message for us
83:04 - let's end our for loop
83:10 - but we want this to show like an arrow
83:12 - so it should be like a color red or
83:13 - something and it should be bold or
83:15 - something like that
83:16 - so let's have a styling
83:19 - now
83:26 - right here we can just say h5
83:30 - let's give an initial
83:33 - color of red
83:38 - let's save that
83:40 - and
83:45 - very loose good so we refresh that page
83:48 - and the data we posted before was
83:50 - reposted back as you can see now it says
83:52 - password not matching if we try to
83:54 - create let's say admin because we
83:56 - already have a username admin if you
83:57 - tell us username
83:59 - taken
84:00 - let's just give it blank
84:06 - let's make sure this
84:09 - name
84:12 - nice it gives the username taken because
84:14 - the admin
84:15 - taken so as you can see now the error is
84:18 - being cut successfully what we want to
84:20 - do now
84:22 - if we make sure that there's no error
84:24 - that means a new username email and
84:26 - password is going to create a new user
84:29 - for us in here
84:31 - but we don't want to do that yet because
84:32 - if we create a new user now only the
84:35 - user object is created but a profile
84:37 - just won't be created for that user so
84:39 - let's go back to our code and make sure
84:40 - that
84:41 - once a user is created right here
84:44 - once we have a new user created we also
84:46 - want to create
84:48 - a new profile
84:50 - let's say a new profile object for that
84:52 - user
84:53 - so
84:55 - first thing we're going to do let's log
84:57 - the user in
84:59 - it will say
85:04 - the user no we're not going to log the
85:05 - user in first of all
85:07 - the first thing i want us to do
85:12 - okay so before we log the user in i'm
85:14 - not going to log design yet
85:18 - that's because
85:19 - when we log the user in i want the user
85:21 - to be automatically redirected to like
85:23 - the settings page where you can upload
85:24 - profile and put this by you and location
85:28 - but since we don't have that yet
85:30 - let's just create a profile model for
85:32 - that user first
85:33 - before then when we have the settings
85:35 - done we can come back and change that
85:38 - so let's just
85:40 - have a comment here and say
85:44 - user in
85:46 - and
85:47 - direct
85:49 - to
85:50 - settings
85:52 - page
85:53 - so we don't forget about that and now
85:57 - right here let's just create
86:00 - a profile
86:03 - object
86:05 - for the new user
86:09 - we're going to do now is say user
86:11 - underscore module
86:16 - user.object
86:19 - dot get
86:23 - that name goes to youtube
86:30 - what i'm doing now is that
86:33 - first of all because in here also create
86:36 - a new profile we need to give that
86:39 - profile the user that owns this profile
86:43 - if that user will be able to give it
86:45 - this value we need to have the object of
86:48 - the user we don't just need to have the
86:49 - username or the id of the user we need
86:51 - to have the object of that specif
86:54 - now what i'm getting now i'm saying the
86:56 - user model should be user the object.get
87:00 - the one which the username is equals to
87:02 - the username that was just created right
87:04 - now
87:05 - and then once we have that with the new
87:08 - profile
87:10 - and the equals to profile
87:13 - dot objects
87:16 - dot create
87:19 - user
87:20 - because to the user
87:22 - model
87:24 - and also the id of the user
87:27 - once you get the id of the user
87:31 - id user was what we used
87:34 - and we equals to the user model dot id
87:38 - so these are the only two things we want
87:40 - to give as default
87:41 - come back here
87:43 - to our modules
87:46 - gave it this value the user
87:48 - object and we gave you the idea of use
87:50 - so the biography the
87:52 - profile image and the location the user
87:55 - is going to create that
87:56 - stuff
87:58 - so now
87:59 - let's just save this user basically and
88:02 - analyze the creating of
88:04 - the
88:04 - profile model
88:06 - so we just say
88:08 - new
88:10 - profile
88:13 - let's save
88:17 - then
88:21 - and just redirect the user
88:28 - the login page
88:30 - but right now we don't have a login page
88:32 - so
88:34 - since we don't have a login page
88:36 - i'm gonna be able to
88:38 - i'm not gonna be able to redirect the
88:39 - user anywhere so let's just redirect the
88:40 - user back
88:43 - sign up when we create a login page
88:45 - we're going to be able to direct the
88:47 - user
88:48 - so let's save this now
88:50 - once we have this saved now we can come
88:55 - project
88:57 - that
88:58 - let's make sure our project
89:00 - yeah
89:01 - good
89:02 - so since it's running now let's create a
89:04 - new utah let's say john
89:12 - let's give him a password
89:16 - let's sign him up
89:20 - it gives us
89:21 - name error
89:23 - now this is because it said name profile
89:25 - is not defined and this is because we
89:28 - are using this profile name but we
89:30 - didn't import it right here so we need
89:33 - to import that profile model
89:35 - from the py file if from
89:39 - dot models
89:41 - import
89:42 - profile
89:44 - good this should work now
89:46 - if we come back in here
89:54 - done
89:59 - energy.com
90:01 - in my password
90:04 - now it's sign up
90:06 - so it says email taking now this is
90:08 - where the error comes because we
90:12 - tried to create
90:13 - a new user so we created a new user
90:17 - for right now when it says name profile
90:21 - not defined
90:22 - the error was here that profile was not
90:24 - defined but that didn't stop that from
90:26 - creating a new user the new user was
90:28 - already created but the profile object
90:30 - was not created for it
90:32 - so this is just what's in the testing
90:34 - phase so right now
90:37 - we come back here
90:39 - and it's refresh see john as a new user
90:43 - and as you can see is not a staff this
90:45 - stuff means he can't access this admin
90:46 - panel come into profiles see that we
90:50 - don't have any profile right here but we
90:52 - are supposed to have a profile for john
90:55 - this was because
90:57 - john was already created before we fixed
90:59 - the bug about the profile name not
91:02 - defined so now let's delete john first
91:04 - of all
91:06 - now let's try to
91:08 - login again good i refresh that page
91:10 - once i refresh that page from this
91:12 - button
91:13 - it's going to send that post data again
91:15 - but if i refresh it from here just gonna
91:17 - load the page normally so since opposite
91:20 - i was sent the game
91:21 - john
91:22 - user is now created and jump profile
91:24 - model is now created so let's go check
91:26 - that
91:27 - hit refresh
91:29 - so it didn't create it if i come to
91:31 - profile also didn't create it that means
91:34 - when i hit refresh didn't submit that
91:36 - post again normally in like normal
91:39 - browsers like i think chrome once you
91:41 - hit refresh you're supposed to submit
91:42 - that again but i'm using microsoft edge
91:45 - this video so i think that's why it
91:46 - didn't work but let's just quickly go
91:48 - ahead and
91:50 - that
91:52 - energy.com
91:55 - password
91:56 - sign up
91:58 - good
91:59 - let's just
92:03 - save it here so we have this sign up
92:06 - done
92:07 - normally you know it's supposed to like
92:08 - take us to the login page to log in or
92:10 - you just automatically authenticate us
92:12 - into the platform but since we've not
92:14 - yet done all those stuff
92:16 - we just made it redirect back to this
92:17 - page first of all but since we came out
92:19 - to this page without an error we should
92:21 - be expecting now that the user and the
92:23 - profile object has been created if we
92:25 - come back here
92:27 - come to users
92:28 - see now that we have user john
92:30 - johnnergy.com
92:32 - come to profile code we have a new
92:34 - profile for john
92:36 - that is good
92:37 - so the user is basically this done user
92:40 - and this is the id of the user
92:43 - so
92:44 - also
92:45 - we're going to be able to allow them to
92:47 - update that bio update our profile image
92:50 - and location as you can see as a default
92:52 - the profile image is blank profile
92:54 - picture.png
92:56 - is this that we gave it
92:58 - good that's working fine
93:00 - everything is fine to this point right
93:02 - now
93:03 - next step is to be able to allow the
93:05 - user
93:06 - login into our platform
93:13 - now let's create the login view for our
93:15 - application
93:16 - i want the user to be able to go to
93:18 - slash sign in
93:19 - and then the user should be able to sign
93:22 - in to the application
93:23 - let's go back to vs code
93:26 - but now let's just
93:28 - collapse this
93:30 - right here in urls let's create a new
93:35 - view i will name it sign in
93:39 - let's just take that copy it
93:42 - paste
93:42 - paste
93:44 - right here also
93:45 - open this again scroll down and create a
93:48 - new view
93:51 - cdf sign in
93:55 - quest
93:59 - return
94:01 - render
94:08 - sign in dot html
94:11 - now that we have this
94:13 - let's first of all go ahead and collapse
94:15 - this let's save this
94:17 - and let's also save this
94:19 - so now once a user goes to slide sign in
94:22 - we should have that
94:24 - so let's
94:25 - go test that out
94:29 - sign in
94:31 - good so it gives us this let's also you
94:33 - know tweak this very well for everything
94:35 - to work good
94:37 - and we'll come back here
94:39 - but before we even do that let's go back
94:40 - to the sign up page and you know once i
94:42 - use that clicks on this login let's take
94:43 - this out to the sign in view and also
94:45 - right here
94:47 - if we go to
94:49 - sign up before we have login let's say
94:52 - f
94:53 - to search and search for
94:56 - login
95:00 - so do you have an account this should be
95:02 - to
95:05 - slash
95:07 - sign in
95:09 - or the second one
95:13 - is right here
95:14 - at the top right corner of our
95:16 - application
95:17 - let's take them to slash sign in
95:23 - good
95:24 - now we have this if we come back and hit
95:26 - refresh
95:28 - now it says do you have an account if we
95:30 - click login it takes us to login good
95:32 - now let's open up our login page
95:35 - sign in right here
95:37 - and then where we have sign in
95:42 - let's sign into sociopoo
95:48 - and let's scroll down
95:50 - on the changes also to social book
96:00 - it and what else so this is login login
96:03 - let's create an account and register
96:06 - want to change create an account and
96:07 - register
96:08 - to
96:10 - make it go to
96:12 - the sign up view the register
96:18 - go to the sign up
96:21 - flash sign
96:22 - up
96:24 - now
96:26 - create an account goes to
96:30 - sign up
96:31 - good so this is done
96:34 - let's come back in here and hit refresh
96:37 - to share book
96:40 - now
96:41 - let's just
96:43 - you remember me
96:44 - you are not really using that
96:48 - this video so let's just comment that
96:50 - out too
96:51 - good now what we just need is
96:54 - to
96:55 - you know configure this make it have a
96:57 - post method and all those fun stuff
96:59 - first of all as i did last time let's
97:01 - just leave a space
97:03 - in our form just to finish it and right
97:06 - here let's have a name
97:10 - name
97:12 - and this is the password if i
97:19 - type of dish
97:20 - password
97:21 - and the placeholder i would love it e
97:25 - password
97:29 - good
97:30 - now this is working fine let me save and
97:33 - see
97:35 - sending password and each of them have a
97:36 - name now so the action should come back
97:39 - to this plugin view
97:41 - and
97:41 - method
97:42 - repost
97:44 - as i said whenever we use a post method
97:46 - we need to add
97:47 - csrf token
97:51 - good
97:52 - now that we have this
97:53 - once a user hit submit or login
97:57 - send that to our login view let's see
98:02 - is
98:03 - we have this
98:04 - again
98:05 - okay so
98:08 - that's basically because we didn't
98:09 - refresh the page so let's refresh this
98:12 - yes
98:14 - anything in there login okay so it just
98:17 - comes back here which is what we want
98:19 - and let's do a similar approach to what
98:20 - we did in our sign up so right you know
98:24 - sign up now
98:25 - login view i'm just going to say i'm
98:27 - going to leave an if statement again
98:29 - just like we used earlier so let's just
98:32 - say
98:37 - if request
98:39 - method
98:43 - equals to post
98:48 - we're gonna do something
98:51 - else
98:53 - just return this page
98:55 - this is what we want to do now
98:57 - and this is quite easy what we just want
98:59 - to do is we get the username and
99:00 - password
99:02 - just to request
99:05 - dot
99:06 - post
99:10 - name
99:15 - and copy and paste this
99:17 - password
99:20 - it is pasted
99:25 - right now
99:26 - what we want to do is to create a new
99:29 - variable and say user equals to earth
99:32 - dot authenticate
99:36 - onto authenticate with any
99:40 - post
99:41 - name
99:46 - password
99:48 - goes to password while dedicating with
99:50 - username and password
99:53 - good
99:56 - now that we have that
99:59 - initialized use an if statement will say
100:01 - if
100:02 - user
100:03 - is
100:04 - not
100:05 - none
100:07 - what this mean is that
100:09 - if the user is not known
100:11 - so
100:13 - for this to be able to work that means
100:15 - we need to even have a user
100:17 - with this password in our database so if
100:20 - we have it that means if it's not none
100:23 - that means
100:24 - if is
100:25 - there if he's
100:27 - present in our database and let's just
100:29 - authenticate and say alt
100:32 - dot login
100:37 - take a request
100:39 - i want to log in this user
100:43 - i'll say return
100:48 - direct
100:51 - to the home page so now when we log the
100:53 - user in we want to return to that to the
100:56 - home page
100:57 - else
100:58 - now this just simply means that if the
101:00 - user is none that means if he's not
101:03 - you know
101:04 - he doesn't
101:05 - really have an account and he's trying
101:06 - to log in with a credential
101:09 - then the message error so the messages
101:11 - that info
101:14 - request
101:17 - let's say
101:20 - again
101:21 - girls
101:23 - invalid
101:27 - and then we just redirected yeah let's
101:30 - copy from here paste so we're just
101:32 - redirecting the user
101:35 - back to this sign-in page
101:38 - did so
101:40 - for
101:41 - need
101:42 - everything is working here if this
101:45 - if it's the post method get it
101:48 - initialize the authenticate
101:50 - the auth and
101:51 - check if the user is not known then
101:53 - authenticate if it's none give him an
101:55 - error
101:56 - and yeah now let's save this and we also
101:59 - have to come into our signing to add
102:02 - the
102:03 - gift tag that is going to take care of
102:04 - the error messages so we can just come
102:08 - down here and copy that
102:11 - basically the same thing
102:13 - sign in
102:18 - save
102:21 - you come here
102:24 - to sign in and we say
102:26 - if something that is not
102:29 - in our database
102:31 - as soon as it says credential invalid so
102:34 - that's an invalid credential but it
102:37 - really gives something that's in our
102:38 - database which is done
102:46 - and see now
102:48 - it is authenticating and boom it takes
102:51 - us to the home page so this is working
102:54 - fine and and once a user authenticates
102:56 - it takes user to the home page now we
102:59 - want to do two more things we want the
103:01 - user to be able to
103:03 - log out so once these are coming and
103:05 - click logout that should be able to log
103:07 - out and normally be authenticated
103:09 - and also
103:10 - we wanted that where user can access
103:13 - this page the user must be logged in if
103:15 - user tries to
103:17 - come to this page when it's not logging
103:19 - in to be directed to the login url i'm
103:21 - going to show you how to do that
103:23 - first of all
103:25 - let's create a new
103:26 - path for log out
103:32 - out log out
103:35 - onto views
103:41 - f log out
103:43 - and i take a request also so let's just
103:46 - close that up so this logout view is
103:49 - quite easy all we just need to do
103:54 - here
103:56 - the auth
103:57 - a log
103:59 - out
104:02 - request
104:06 - and we now
104:07 - find
104:09 - direct
104:13 - sign in
104:17 - since we have this now
104:21 - and just easily come into the index
104:26 - and search for log out
104:30 - right here
104:32 - out
104:37 - actually where we have log out now
104:39 - just say
104:41 - log out
104:43 - come back in on each refresh
104:49 - from here
104:50 - they log out
104:52 - boom we are logged out and it takes us
104:54 - to the login page to login
104:56 - but one more thing want to do as i said
104:58 - is that if i come to this home page now
105:01 - you see i'm still able to even access
105:03 - this home page while i'm not even
105:05 - logging
105:06 - we want that to stop so for us to do
105:08 - this we're going to use a decorator
105:11 - kangoo has this built-in function
105:13 - that allows us to basically take care of
105:15 - this login
105:17 - like when a user is not logged in or not
105:20 - authenticated
105:21 - want to redirect the user to a page
105:23 - before bringing it back to another
105:26 - so let me show you what i mean by this
105:29 - first of all we are going to need to
105:31 - import something
105:33 - so let's scroll all the way up
105:37 - right here i say from
105:41 - angle
105:42 - dot country
105:44 - dot
105:46 - dot decorators
105:49 - import
105:51 - plugin required this login required is
105:53 - going to allow us to be able to
105:56 - direct a user to the login page if it is
105:59 - not logged in onto our csep
106:01 - as i said also is i want to access this
106:04 - index page you need to be logged in for
106:06 - me to do that now you know i can easily
106:08 - like configure this and say
106:11 - if user is not logged in or is not
106:13 - dedicated then redirect the person well
106:15 - i don't want to do that
106:17 - so what i want to do
106:20 - is because that is like
106:22 - this is a better way to do it just like
106:24 - a line of code i'm just going to say at
106:27 - login required
106:29 - i'm going to specify the login url so
106:31 - that means
106:32 - url it should redirect the user into
106:36 - that is
106:37 - sign in url
106:39 - so
106:40 - if i save this now
106:43 - and i come here
106:45 - this home page
106:47 - as you can see it takes me to this login
106:50 - because i am not logged in and you see
106:52 - automatically after i sign in it takes
106:55 - me to the omp let me go to john
106:59 - and
107:02 - okay that was
107:03 - valid credentials john
107:08 - so right now i can view this page
107:12 - one more thing i need to do is to also
107:13 - put that login required in logout
107:16 - because a user can be logged out already
107:20 - and now come to log out
107:23 - to try and log out so let's just make
107:25 - sure that the user is logging first
107:27 - before you can log out so let's just
107:30 - copy this
107:33 - that's good to go that's basically how
107:35 - to do that
107:37 - and save that
107:39 - and now we have everything done about
107:42 - the authentication to this point so now
107:44 - we can just
107:45 - log in
107:50 - good
107:51 - so to this point now we're able to log
107:53 - in
107:57 - so now let's go ahead and continue with
108:00 - the settings view so this settings view
108:03 - basically is going to be where the user
108:05 - can upload or change his profile image
108:08 - or
108:09 - you can also like add this bio on like a
108:12 - location or change it by you on location
108:15 - so what we want to do first of all in
108:17 - the urls let's create a new url and
108:20 - we're gonna name the url
108:22 - settings
108:23 - we'll just say settings
108:27 - and if you take from the views.settings
108:29 - and name equals settings also views now
108:33 - we need to come here
108:35 - and create a new view and let's mw
108:39 - settings
108:40 - take a request
108:44 - and we just render
108:51 - settings.html which is this page
108:56 - 13.html
108:57 - so now we can save this but before we
108:59 - save we also want to give it this login
109:02 - require decorator and this is because a
109:04 - user can come to
109:06 - settings or to change profile image or
109:08 - something like that if they are not
109:09 - logged in that's just not possible so we
109:12 - give it that and let's save it
109:15 - so now if we go back to
109:17 - check our application
109:19 - to be able to go to slash settings
109:23 - so let's see
109:26 - settings s-e-t
109:29 - s
109:30 - once we come here it should basically
109:32 - load up that page good so we have this
109:34 - from here right now
109:36 - so we're going to tweak this form a lot
109:38 - we don't need this
109:40 - we basically don't need most of this
109:42 - what we just want is
109:44 - a file field or an image field
109:47 - the
109:48 - text field for the bio something like
109:49 - this and a location field that's what we
109:52 - want but you know if you want to add
109:54 - your own customization you can add
109:56 - anything you want you can allow these
109:58 - apps to be able to you know update
109:59 - first name and last name work in a
110:01 - relationship even all of this but just
110:03 - for this
110:04 - tutorial
110:06 - what we're going to be doing is just
110:07 - basically the fields we created in our
110:09 - profile model
110:11 - which we didn't set so if i come into
110:13 - model.py you know that we've already set
110:15 - user and user id for each user but we
110:17 - haven't set by your profile image and
110:20 - location so that is the form where user
110:22 - will be able to you know set all of that
110:24 - so what i want to do now
110:26 - i'm going to come to
110:28 - the sign up
110:30 - so now once a user
110:32 - basically is
110:34 - logged in
110:35 - so a user creates an account and right
110:37 - here i said log in user and then
110:40 - redirect to the settings page so that
110:43 - one want to do now
110:45 - so we want to automatically log in that
110:47 - user and redirect to the settings page
110:50 - because now if you're following along
110:51 - you know that once the user sign up
110:54 - nothing is going to happen it just bring
110:55 - the user back to this page but what we
110:57 - want to do is that once the user sign up
111:00 - it should take the user first of all
111:02 - automatically log in the user and then
111:04 - take the user to
111:07 - settings page let's do that so
111:10 - say user
111:13 - underscore login
111:18 - equals to
111:20 - auth.authenticate
111:23 - i want to authenticate with username
111:26 - password i'm going to give you the
111:28 - username that just been created
111:31 - and also password
111:34 - with the password
111:36 - that has just been created so now once
111:38 - we have this we can just use say
111:40 - odds.login
111:42 - down here we'll say earth
111:44 - login
111:48 - take a request
111:51 - i want to log in using this login
111:55 - right here so now it's going to log the
111:57 - user in and then once it logs user in
112:00 - it's going to create a profile object
112:01 - for that user
112:02 - and after saving that profile object we
112:04 - want to redirect the user this settings
112:07 - page
112:08 - by taking the user to the settings page
112:10 - and not back to this i know so this is
112:12 - what we want
112:14 - so we can just go ahead and close this
112:16 - up
112:17 - and if you come to the signing that is
112:18 - taken care of so once the user is logged
112:21 - in just take the user to the home page
112:22 - they can see the post feeds and
112:25 - so that is done and we can just save
112:28 - that
112:28 - what we want to do now
112:30 - is to come into the settings
112:33 - and we want to
112:35 - first of all go to the html page and
112:38 - change some things in here
112:40 - so if basically just go into
112:43 - settings.html
112:46 - so right here we're going to change some
112:47 - things we're going to remove some form
112:49 - tweak some from
112:51 - and yeah so let's get started with that
112:55 - so
112:56 - right here where we have let's see what
112:58 - we want to remove but we have account
113:00 - settings we don't want to remove it
113:01 - actually we just want to add some things
113:04 - in there so you can see here we have
113:06 - account settings right here we want to
113:09 - show like
113:10 - account setting for this user like maybe
113:13 - for john which is the user so whichever
113:15 - user is currently logged in we want to
113:17 - show so first of all
113:19 - and we also want to have a link here
113:21 - where user can go to the home page back
113:23 - because right now isa can just go it has
113:25 - to start removing the url bar to go or
113:29 - pressing back we don't want that we want
113:30 - a link here that will allow user to go
113:32 - so we'll come back here
113:36 - and we have an
113:38 - a tag
113:41 - and i should just take user to the boom
113:43 - i will close it
113:45 - and say home
113:48 - save that and come back here
113:52 - hit refresh so it says um account
113:55 - settings if i click on this um it takes
113:58 - me to the um
113:59 - home page but i want to do something
114:01 - like home slash account settings so we
114:03 - know that that's the directory we are in
114:05 - so let's say um
114:07 - slash account setting
114:09 - but now we say account setting
114:12 - for
114:13 - then we show the user but that user has
114:16 - to be in a bold tag
114:18 - so to show the currently logging user in
114:21 - the jungle template on the html file
114:23 - is what we do
114:25 - you do
114:26 - we open two curly braces and close it
114:29 - and we'll say user.username
114:32 - that's what we do if you want to show
114:33 - the email which i don't know why you
114:35 - showed that but we want to show it to
114:36 - you dot email so let's just hit
114:40 - refresh button so as you can see there's
114:42 - home slash account settings for john
114:44 - rj.com which is the email the user puts
114:47 - when he was logging in
114:49 - let's just say user dot username
114:53 - now we save this it refresh
114:56 - the account settings for john
114:58 - and that is good we've done that next
115:01 - thing we want to do to go back here and
115:04 - then we are going to scroll down
115:07 - first of all
115:09 - all of this ul tag basically don't need
115:12 - it
115:13 - just gonna
115:17 - i mean that out
115:19 - so i'm actually building this from
115:20 - scratcher you know you understand
115:22 - everything that we're going to be doing
115:24 - here
115:27 - and after this let's have like
115:30 - a break just to leave this space
115:35 - so there's a little bit of space there
115:37 - unless i have like
115:39 - a line to demarcate
115:42 - her
115:47 - fresh so there's just a line there just
115:49 - to demarcate this is the title and this
115:52 - the main page
115:53 - now that we have this
115:55 - just close that gap
115:57 - we're gonna come here in this basic we
115:59 - want something like general settings so
116:01 - this should be like the general set
116:02 - let's just change it to general
116:09 - and that's done
116:10 - and now let's tweak the form but before
116:13 - we even do that we don't need privacy
116:15 - also so we're going to scroll down
116:19 - scroll down right here
116:24 - you see where we have this privacy
116:26 - so all the way from here
116:28 - to the end of the privacy div tag
116:32 - i have to close all of that
116:35 - so from here
116:38 - close this
116:43 - that so now that just basically close
116:45 - that div tag for us
116:47 - scroll down
116:51 - yeah so that's good and if we save it
116:54 - and go back
116:55 - you don't have that again because we
116:57 - don't need it and the next thing we want
116:58 - to do is to remove first name last name
117:01 - we want to remove email that about me
117:03 - want to change it to bio want to leave
117:05 - location remove working art and remove
117:07 - relationship so basically just removing
117:09 - the things we don't need and keeping the
117:12 - things that we need
117:15 - yeah
117:18 - first name
117:29 - out me we change this to bio
117:35 - give it an id of bio
117:38 - aim of bio
117:40 - actually we can leave the id but what we
117:42 - need to change is the name
117:44 - because that we're going to be using to
117:46 - get
117:47 - it's in a back end so now the location
117:49 - we're going to leave that
117:50 - and what we need to add is the name for
117:53 - this location so since we have a name
117:56 - just say name equals location
118:01 - good come back here and hit refresh we
118:03 - have value we have location and we don't
118:06 - need working out and relationship so
118:09 - working out
118:10 - relationship
118:13 - click on
118:15 - we will remove that
118:16 - let's save and refresh
118:19 - it so what we want to have now is
118:21 - another field for the profile image so
118:23 - we're going to go
118:25 - up here
118:28 - i've
118:29 - like like this
118:32 - and then
118:33 - when i say profile
118:36 - image
118:38 - this would be a file field
118:40 - a name
118:42 - a profile
118:44 - let's just give the name image
118:49 - let's save this
118:52 - it's refresh
118:55 - so now we have this
118:56 - we have the profile image the bio and
118:58 - the location
119:00 - so
119:01 - i'm also also going to do something like
119:04 - you know when you go to like instagram
119:06 - and you already have a bio once you come
119:08 - to the settings you'll see the bio you
119:09 - already have there so for example let's
119:12 - say we have a value here
119:14 - and we hit save
119:17 - if we hit save and it saves our database
119:19 - when we come back here we don't see that
119:21 - by you yet we want to be able to see
119:23 - that by you so i'm going to do that
119:24 - later and you're basically going to
119:26 - understand what i'm talking about when
119:27 - we do that but first of all since we
119:29 - have all of this done
119:31 - let's just make sure we have our form
119:33 - because all of this needs to be in a
119:34 - form so we can send it to the view
119:38 - so right here
119:39 - that general right
119:42 - yeah
119:43 - but we just need to have here now
119:47 - the form
119:49 - the form
119:54 - i'm gonna go ahead and close that form
119:57 - at the bottom so we using the form
120:00 - right before this other comment
120:05 - somewhere
120:07 - we also have a button to save that
120:10 - we have this save button here
120:13 - okay
120:14 - so we have the save button
120:22 - button
120:23 - it should be right here
120:30 - so let's just leave it down like that
120:32 - and then since we have this done already
120:35 - let's just set an action
120:42 - let's set an action
120:44 - so as always we wanted to come back here
120:47 - another method of post
120:51 - we also need to set up the csrf token
120:55 - so now that we have all this set up
120:57 - we in this button here this button
121:00 - should be
121:01 - submit button first of all we don't need
121:03 - this cancel
121:06 - what or we can do something like once
121:09 - they eat cancer
121:11 - take them
121:13 - to the home page
121:15 - let's just put that in there
121:19 - bash
121:20 - so if they cancel and they don't want to
121:22 - do that again
121:24 - look at the
121:25 - bottom left corner you see that it's
121:28 - taking them to the home page so that's
121:29 - what we want
121:31 - and this save button
121:32 - type button
121:34 - actually the type should be submit
121:38 - just so that it submits this form
121:40 - now we hit refresh
121:44 - maybe
121:45 - okay when it brings back here good so
121:47 - now all of this is working fine
121:49 - next step is to go into our views
121:52 - right here in our views
121:54 - where we have these settings
121:56 - we're gonna have to do a little bit of
122:00 - coding here so what we're gonna do first
122:02 - of all
122:03 - we want to get the
122:06 - particular profile object of this user
122:08 - of the logged in user the user
122:11 - profile
122:13 - goes to profile
122:15 - dot
122:16 - objects dot get
122:21 - user
122:22 - equals to request
122:25 - dot user
122:26 - so basically what this is doing
122:29 - is saying that we have a new variable
122:30 - named user profile and the value we're
122:32 - giving that is
122:34 - profile.object.get that means we're
122:36 - getting a particular object
122:38 - so we're getting the profile object in
122:40 - which the user
122:41 - come back here in which the user
122:45 - is the currently logged in user
122:47 - rightly authenticated user since we have
122:50 - that
122:51 - what we want to do
122:53 - is to pass the mixture in that
122:58 - pass that into our html view like this
123:02 - user profile
123:04 - and user profile so now that we have
123:07 - this
123:07 - if i come into my
123:10 - html settings.html i can actually do
123:13 - something now
123:14 - so
123:15 - as you know as default a user already
123:17 - have
123:18 - like a
123:20 - profile picture i already have a profile
123:22 - image that we gave the user winning
123:25 - first of all from here you'll see that
123:28 - profile image has a default of blank
123:30 - profile picture
123:31 - so
123:32 - let's use that as a profile maybe we
123:33 - should be able to tell the user that
123:35 - there is a profile image here we should
123:36 - be able to give it like a value a
123:38 - default value here and if the user wants
123:40 - to change then you can go ahead and
123:41 - change and also the same thing if the
123:43 - user already has a bio you want to show
123:44 - it here so you can edit or change same
123:47 - for location we're going to come back to
123:49 - settings
123:51 - first of all let's start with the bio
123:53 - so
123:54 - we don't have
123:56 - a value so let's have a value in the bio
123:59 - i know since this is a text area we
124:02 - don't put the value here in here we put
124:04 - the value
124:05 - so we just use it poly braces and we say
124:08 - user profile dot bio since we already
124:12 - sent that from the views
124:14 - in html it should be fine
124:16 - so user profile.bio location this is an
124:20 - input so it needs to have a value if
124:22 - it's having a value it doesn't need a
124:23 - placeholder so
124:25 - let's give value
124:28 - and let's say user profile dot
124:31 - location
124:32 - and this is gonna automatically fill
124:35 - this place in if the user has a buyer or
124:37 - location we refresh we shouldn't see
124:39 - anything yet so we're not submitting it
124:41 - does it enter won't say anything here
124:43 - because this user doesn't even have a
124:45 - buy your location
124:46 - but now let's come to profile image
124:49 - first to do this is gonna be
124:52 - the same actually so what we're just
124:54 - gonna do is say
124:57 - after place order or we don't even need
124:59 - a placeholder i will say value
125:02 - equals to
125:06 - userprofile.profile
125:09 - img now we save this and come here and
125:12 - hit refresh
125:15 - now right here we're supposed to see the
125:17 - current
125:19 - profile image of the user
125:21 - but we're gonna fix that again you know
125:25 - after we do something and i'm gonna also
125:27 - explain why we do that but first of all
125:30 - let's leave this like this and what we
125:32 - want to do
125:33 - is basically
125:34 - just come into use
125:37 - right now once the user hits submit
125:41 - you want to be able to send all these
125:42 - data the views update the data or even
125:45 - create a new data
125:47 - for that particular user so for this
125:49 - image
125:50 - html has this security system that
125:53 - doesn't
125:54 - give a default image so that's why we're
125:57 - not going to be able to use this value
125:59 - for this image
126:00 - now i remember working on a few projects
126:03 - a while ago and we tried to do this but
126:06 - because html has this
126:08 - security system as i said that it won't
126:10 - allow you to put
126:12 - an image or a default image when a form
126:16 - loads just you know for some kind of
126:18 - securities
126:19 - and that's why we're not going to put
126:21 - value for that but the other way to go
126:24 - about this
126:25 - first of all if there is a user we can
126:27 - just display
126:28 - you know the
126:31 - url here that you already have you a
126:34 - profile or you want to update or
126:35 - something or we can just even showcase
126:37 - the profile image here so let's see
126:41 - let's see what we can do
126:43 - and this is not too important but just
126:45 - to make sure that we do something there
126:47 - we can have an image
126:50 - src
126:52 - and that can be from
126:55 - profile user profile
126:57 - dot profile
127:00 - img dot url so let's make sure we change
127:03 - it
127:04 - to dot
127:09 - let's save this first of all and hit
127:10 - refresh
127:11 - as you can see it basically just shows
127:13 - the current
127:14 - profile and if we change it
127:17 - and we're going to change it in a bit
127:19 - where we change it this should change
127:21 - also
127:22 - let's try to
127:28 - i don't know 25
127:30 - height
127:32 - five
127:33 - i'm just testing the size first
127:35 - how small okay that's too small so let's
127:38 - give it like hundred
127:41 - hundred
127:45 - okay so that is good now we might you
127:47 - might want to put it in another way or
127:50 - any how you want to do it so first of
127:52 - all let me let's say we should have like
127:55 - current image or any i want to do but
127:57 - let's just leave it like this first of
127:59 - all so this is the current profile image
128:01 - that is good now what we just want to do
128:03 - now is to come into the views
128:05 - and right here in the views we're going
128:08 - to say
128:13 - if
128:15 - request
128:16 - dot method
128:21 - equals to post
128:24 - i want to get something
128:27 - and what we want to get first of all
128:31 - once we get if the user actually tries
128:34 - to update the profile image or not and
128:36 - this is because in our models we make
128:38 - sure that
128:39 - this profile image right here is
128:42 - compulsory when submitting a new form
128:44 - we're supposed to have a profile image
128:47 - so we can say
128:49 - if
128:52 - request
128:54 - dot files
128:59 - dot get
129:03 - image
129:04 - equals to none
129:08 - so again there are plenty ways you can
129:10 - do all these things like this is just
129:12 - the way i i'm going to do it in this
129:14 - tutorial so what we're just saying now
129:15 - is that if the request of file.get is
129:18 - equals to none so that means if there is
129:21 - no
129:22 - image being sent
129:24 - then we just want to
129:26 - get only
129:28 - so if we scroll down
129:30 - here well we just say
129:34 - they let's even get the image also image
129:38 - goes to user underscore profile dot
129:40 - profile image
129:45 - what this is doing is that if the user
129:47 - didn't
129:48 - submit any image it's just getting the
129:50 - current image that is ready that these
129:53 - already have and just like submitting
129:55 - that again basically
129:57 - so then we are just getting the bio
130:00 - quest
130:04 - dot post
130:07 - i o
130:10 - and we also do the same
130:12 - for the location
130:15 - let's get the location
130:17 - so now since we have all of this we can
130:19 - just update the user's profile object
130:24 - so now
130:26 - what we want to do first of all because
130:28 - we already have
130:31 - a file being sent so for us to have a
130:33 - file being sent we come into this form
130:35 - right here
130:37 - whenever you are sending a file
130:39 - you need to make sure that you have
130:41 - another like attribute in here
130:44 - so what we want to do
130:46 - because html when and also when working
130:49 - with django we need to configure some
130:52 - things like you know when we use post
130:53 - method we have the csrf token when we're
130:55 - submitting a file in the form we need to
130:58 - make sure that we have enc type
131:03 - and then we'll say multipath slash form
131:06 - data now this must be there because if
131:09 - this is not there it's not going to
131:12 - submit that form it's going to submit
131:14 - the rest it takes the
131:17 - the text area all those values is going
131:19 - to submit them but not going to submit
131:20 - the image or the file and you must make
131:22 - sure you have the same
131:24 - let's just save that now we can come
131:26 - back to the views
131:27 - and in here let's just basically say use
131:29 - the profile dot
131:31 - profile image
131:34 - goes to image
131:36 - do the same thing and say
131:37 - userprofile.bio
131:40 - i want to make it equal to bio
131:42 - also use our profile dot location
131:47 - make it to be exposed to
131:49 - location
131:52 - now that we have all of this
131:54 - let's just say
131:56 - user profile dot save
131:59 - now we've updated
132:01 - that particular model but what if the
132:05 - user is submitting an image so
132:09 - let's say
132:10 - if request
132:15 - quest
132:16 - dot files
132:19 - let's get
132:21 - image
132:24 - it's not equals to none
132:26 - it's exclamation mark
132:29 - it is not none
132:32 - and that means there's something there
132:33 - so now
132:34 - since we have that we're basically just
132:36 - gonna get
132:38 - that image that these are sent to the
132:39 - image
132:41 - equals to
132:42 - quest and now when we're getting image
132:44 - if we write in a post method it's going
132:46 - to be quite different they request dots
132:50 - get
132:52 - result files
132:54 - because we're dealing with files and dot
132:56 - gets
132:58 - when you have
132:59 - a bracket
133:01 - the image so i want to get the value
133:04 - sorry that's image
133:06 - and then we just want to basically do
133:07 - the same thing for the bio so we just
133:09 - copy this
133:12 - so by you adjusting request oppose bio
133:14 - location request of post location and we
133:16 - are saying user profile
133:19 - dot profile image goes to image and the
133:21 - same for bio on location and then we are
133:23 - saving it and once we save it
133:25 - we want to redirect the user
133:30 - to say return
133:33 - direct
133:34 - back to this settings
133:38 - now
133:38 - now we have all of this configured it
133:40 - should totally work
133:42 - let's go ahead test that out
133:45 - and come back here
133:48 - hit refresh
133:50 - now let's change this profile image
133:53 - let's see what we can change it to
133:59 - just allowing that to load up orders
134:04 - and we have all of these images here
134:06 - let's just change it to one of it so it
134:09 - gives it this and let's say bio
134:11 - i am john
134:17 - first
134:18 - nerd
134:20 - and location let's just say manchester
134:25 - now we can save once we save boom see it
134:28 - brings us back to this page but now this
134:30 - profile image has been updated now the
134:32 - buyer says i am joined and i am the
134:34 - coolest net and it gives us okay
134:38 - sk
134:41 - doesn't need to be a nerd so we save
134:43 - that and you can see that also updates
134:45 - let's come to home
134:47 - and if i go back to account settings not
134:50 - sure if i've updated that okay it's just
134:52 - saying settings.html but if we go
134:55 - slash settings
134:58 - you'll see that that bio is there so it
135:00 - has been saved in our database we have
135:02 - the location there also and the profile
135:04 - image saved
135:05 - so if we come right here
135:08 - and then we go to john's profile object
135:12 - what we should see now is john the id is
135:15 - id is bio
135:17 - a link to is profile image under
135:20 - manchester and that thing i want you to
135:22 - see is how this profile image up uh
135:25 - uploaded basically so remember that in
135:28 - here
135:29 - now models
135:30 - said you should upload to profile images
135:33 - as you can see here that's what it did
135:34 - uploaded to prefer images slash i dot
135:37 - jpg whatever the name of the file is
135:40 - so if i come into media now
135:43 - on social book media you can see now
135:45 - that i have a new folder named profile
135:47 - images and in there i have the image
135:50 - that the user uploaded
135:53 - basically that's how we can you know
135:54 - configure these settings
135:56 - so what we just want to do the last
135:58 - thing is to come into index right here
136:00 - we have account setting
136:03 - i want that to go to slash settings
136:06 - that should work and we do not need
136:08 - explore
136:10 - i'm not also up so let's save this and
136:13 - come back
136:15 - here go to home
136:20 - from here now you should be able to
136:22 - go to the account settings to see it and
136:24 - we can change the location let's say it
136:27 - moved
136:29 - unless hit toronto
136:32 - and we save it now
136:35 - the location is toronto go to home
136:38 - come back to the account settings
136:41 - so that is cda basic
136:43 - and we can also cancel like we don't
136:44 - want to do it brings us back here
136:47 - so for now we've been able to
136:51 - have the account settings for the user
136:52 - where he can update his bio his location
136:55 - and his profile image
136:56 - now let's move to the next step
137:04 - let's get working with a user being able
137:06 - to upload a post
137:09 - the first thing we want to do
137:11 - is to go into
137:13 - our models.py file
137:15 - and right here i want to create a new
137:18 - model
137:20 - for the post
137:22 - to say class post
137:26 - models dot model
137:30 - and we wanted to have an id
137:34 - we also wanted to have
137:37 - the user
137:38 - and it should be the user name
137:44 - i wanted to have
137:45 - the image which the user is uploading
137:48 - a caption of that image
137:53 - created at as a date
137:56 - posted a name that created that
137:59 - and the number of likes
138:05 - so uh giving it all of this
138:08 - field
138:09 - and id
138:10 - we're gonna use the uuid field so first
138:13 - of all we need to come up
138:15 - and import
138:18 - uid
138:19 - so this uuid just helps us to generate a
138:23 - unique id
138:24 - for
138:25 - you know this particular field for each
138:28 - of the post and we also want to import
138:30 - something else want to import date time
138:33 - so say from
138:34 - date time
138:36 - import
138:38 - date time
138:42 - so this date time is going to take care
138:43 - of this created at so it will get the
138:46 - data that
138:47 - post was created or uploaded now for the
138:50 - id let's say models
138:52 - dot uuid fit
138:57 - and we'll say primary key equals true
139:05 - so this primary key question means is
139:07 - like
139:08 - this is the id now of this particular
139:11 - post the identification of each of the
139:13 - objects now this is because once we have
139:16 - an id
139:17 - as a default
139:19 - jungle creates an id for us which just
139:21 - has like the first post we have an id of
139:23 - zero second post one two three and so on
139:26 - but we want to change that i want to
139:28 - give you this unique id
139:30 - so it's gonna have like a long character
139:32 - but it's going to be very unique i want
139:34 - to set that to the main id of each of
139:37 - the objects so it's basically replacing
139:40 - the initial id when we say primary key
139:42 - equals true
139:44 - but anyways anytime we are using an id
139:46 - field in a django model we need to say
139:50 - primary key equals true in order to just
139:51 - give us an error anyway
139:53 - so now let's say default
139:58 - pause
140:00 - uid dot uid4
140:04 - so now this is what we need we are using
140:06 - the uuid field primary key is set to
140:09 - true and the default is guid dot uid4
140:14 - so now the user this time around we're
140:16 - not using a foreign key i know he's in
140:19 - i'm not joining them together what i'm
140:21 - just going to use is a character field
140:23 - and this is what is going to go in here
140:25 - is the username that's the owner of the
140:29 - post
140:31 - so let's just say android
140:33 - and then image
140:35 - image is going to be an image field
140:37 - the models dot image
140:40 - field
140:43 - upload
140:45 - to
140:48 - and then we'll say
140:50 - let's upload it to
140:52 - let's say post images the other one
140:55 - which was this we uploaded it to profile
140:58 - images but this time around we want to
141:00 - upload it to post images
141:03 - they post
141:04 - underscore images
141:08 - so that is done
141:10 - and the next one is caption now this is
141:12 - just going to be a text field
141:14 - in models dot text field
141:18 - and you don't need to put anything in
141:20 - there created at is going to be a dates
141:22 - time field we'll say models dots date
141:27 - time field
141:29 - right here i'll give a default of date
141:31 - time equals now
141:35 - it'll say default
141:37 - will have to be equals to deep time
141:54 - close that up
141:56 - so defaults
141:59 - date time
142:03 - equals
142:10 - that
142:11 - and now
142:12 - next one is the number of likes okay
142:15 - models
142:17 - that's integer field
142:20 - i have to give it a default equals zero
142:23 - because when a user just upload a post
142:26 - the initial likes number should be zero
142:28 - and when someone like then it will be
142:30 - increasing when someone dislikes you to
142:32 - decrease
142:33 - so let's just return it in with
142:38 - close itself
142:42 - we'll say return
142:45 - self dot user this time not a
142:47 - user.username
142:49 - go to user just because this is not a
142:51 - foreign key so it's not an object that
142:53 - has been passed in here philippine
142:54 - patent here is just the username so dot
142:57 - user now we can save this
143:00 - and now that we have this saved we can
143:02 - just
143:03 - come into
143:05 - our command prompt
143:07 - first of all we want to opt out of a
143:09 - server that is already running and then
143:12 - we are going to
143:13 - make migrations and migrate python
143:16 - manage dot py
143:20 - make migrations
143:24 - so this command line is just gonna as i
143:26 - said earlier you're gonna change or make
143:28 - this the changes
143:30 - save the changes that we made in our
143:32 - windows or py file it's going to save it
143:35 - into a file named initial i'm going to
143:37 - save it into okay so it gives us an
143:39 - error as no attributes uid field
143:43 - okay so the error right here is that
143:45 - this uid field
143:48 - supposed to be
143:50 - more better let's just run that again
143:54 - each of the changes is saved into a
143:56 - brand new file so if we
143:58 - come to this file use
144:03 - yes so zero zero one initial then the
144:07 - more migrations we make
144:10 - um
144:11 - let's just wait for that make migrations
144:14 - and when we migrate you're going to see
144:15 - that there's a new file here okay
144:17 - exactly so we made migrations that
144:20 - worked a new file is being created it's
144:22 - just updating it that's the way django
144:24 - just so you don't really need to
144:25 - understand why that is that's just the
144:27 - way django
144:28 - works with
144:30 - make migrations and migrate that's what
144:32 - happens when you run that command
144:34 - i need dot py migrate
144:38 - and now this is just going to migrate
144:39 - into our database for us
144:41 - very simple stuff
144:43 - good now let's run our server again
144:47 - and
144:48 - that's good so now that we have this in
144:51 - our
144:53 - database let's make sure that it's
144:55 - running so we can go check
144:57 - before we check let's register this in
145:00 - our admin panel
145:02 - to open admin dot py
145:08 - just say post
145:14 - post
145:16 - now that we have that we can close this
145:17 - up and we can basically just go into our
145:20 - admin panel right here
145:22 - and we come to
145:25 - home
145:26 - so once we come to home now under core
145:28 - and that is called app we should see
145:31 - profiles and we should also see posts
145:33 - with yes
145:35 - just
145:36 - wait for that to load
145:40 - click on good as you can see now we have
145:42 - this post
145:43 - model and this is where we're going to
145:46 - be storing all the posts that every
145:47 - single user on our platform makes
145:50 - so that's good now let's go back in
145:53 - there
145:54 - and the next thing we want to do now
145:56 - is to
145:57 - go
145:58 - into urls.py and create a new url for
146:02 - take care of uploading a post
146:06 - should be upload
146:10 - load
146:11 - upload i will come into our views
146:15 - on
146:17 - and just right here we have a new
146:22 - view a new function
146:24 - takes a request
146:27 - and let's just
146:30 - turn
146:32 - an http response for now
146:39 - upload view
146:41 - we don't just want to leave the response
146:42 - block so we don't get an error by just
146:44 - returning an http response and one more
146:46 - thing let's also add this
146:49 - plugin required in upload so that a user
146:52 - can just go to our website
146:54 - and try to upload or try to you know
146:56 - send some data to it even
147:00 - let's save this and let's save this now
147:03 - that we have that done i'm going to come
147:05 - into our index.html let me quickly go to
147:08 - our website
147:09 - right here where we see upload pics
147:13 - or videos
147:14 - so once we click on it it's going to
147:16 - open this so we want the user to be able
147:17 - to choose file and we want there to be a
147:19 - box for caption so you know the user can
147:23 - see
147:24 - a caption or see a field where you can
147:27 - input the caption and they should also
147:28 - be a submit field
147:30 - so now let's just go ahead and do that
147:33 - first of all
147:35 - we're not uploading videos so we just
147:37 - changed upload peaks too
147:40 - that's
147:41 - but where it is between
147:45 - peaks
147:51 - right here changes
147:55 - it peaks
147:58 - here also
147:59 - changes to x
148:03 - now let's see the next thing we want to
148:05 - do
148:07 - so before we even continue i want us to
148:10 - be able to have like a text around that
148:14 - area that says welcome user so
148:17 - the user might be around this area that
148:19 - can say
148:20 - welcome like john i think john is the
148:22 - one logged in now so john we know he is
148:25 - logged in
148:26 - and another thing is we want to change
148:29 - this
148:31 - particular
148:32 - icon this is just a default icon now we
148:34 - want to change it to the
148:36 - profile picture of the currently logged
148:39 - in user let's go ahead and do that
148:42 - now
148:44 - let's go to where we have this image
148:49 - what i'm just gonna do
148:51 - right click on it and i'm going to copy
148:53 - the image link
148:55 - i'm going to search for that image right
148:57 - here but i'm going to
149:00 - set up
149:04 - here
149:07 - good
149:08 - right here we can see it
149:11 - what we're looking for
149:13 - we actually have it in i think 10
149:15 - different plates
149:17 - as we can see here so
149:19 - okay i think this is it so right here
149:21 - what we just need to do
149:23 - we need to pass
149:25 - we need to go into the views of the
149:27 - index and we need to get the profile
149:30 - object and then pass it in here
149:34 - so
149:34 - we're going to
149:36 - come into use
149:38 - right here i'm going to say
149:41 - user object so let's get the user object
149:45 - and we'll say user
149:47 - dot
149:49 - objects
149:51 - that get
149:53 - one in which the username
149:57 - is equals to request
150:00 - that user
150:02 - name
150:03 - so now we have the object of the
150:04 - currently logged in user and now we want
150:07 - to get the user profile object the user
150:10 - profile
150:13 - will be equals to
150:15 - profile
150:16 - dot objects
150:19 - dot get
150:21 - the one in which the user
150:24 - equals to the user object now i hope you
150:26 - understand what i did
150:28 - so first of all i got the object of the
150:29 - currently logging user now that i have
150:32 - that object i use it to get the profile
150:34 - now if we come into models file
150:37 - we will be able to see that in here
150:39 - first to get
150:41 - the particular object with the user we
150:43 - need to provide the object of the user
150:45 - since we're using a foreign key
150:47 - why isn't a foreign camera connecting it
150:49 - to this user model so to get the objects
150:53 - a profile object of a specific user we
150:55 - need to provide the
150:58 - profile the user object if you
151:00 - understand we can also drive it another
151:02 - way we can provide the user id but i
151:05 - just feel like this is better way
151:07 - so now that we have the
151:09 - that profile object what we can just do
151:12 - is to pass that into our html
151:17 - just copy this now
151:20 - let's say user profile
151:23 - goes to user profile and what this is
151:25 - doing is i basically just
151:27 - sending
151:28 - this variable
151:30 - of user profile into our html so right
151:34 - here now if i come to index
151:36 - and remove this we can access that using
151:38 - the user profile
151:40 - the dots and let's see what we use to
151:43 - save it is profile image
151:46 - dot profile image dot url
151:49 - so we use dot url when i want to get the
151:52 - url of an image view or a file field in
151:54 - general
151:55 - now if i save this and i come here
151:58 - and i hit refresh
152:00 - but i shouldn't see this image yet good
152:03 - so i see
152:04 - the
152:05 - image of the
152:06 - currently logged in user if i go to
152:08 - account settings and change the profile
152:10 - image
152:11 - the new profile image
152:13 - so we have that done the next thing we
152:16 - want to do is to have the welcome
152:19 - done or welcome whatever the username is
152:22 - so we're gonna scroll
152:24 - up a little bit
152:27 - first of all
152:28 - now to some things
152:36 - so
152:42 - right from this div
152:48 - up here
152:49 - and a comment that out
152:52 - and also
152:55 - this
152:58 - just
152:59 - as we are going the ones we don't need
153:01 - what can speed them up
153:03 - now that we have that
153:05 - all i just want to do
153:08 - and it fresh let's see
153:11 - we have upload page before this upload
153:13 - peaks we want to have
153:16 - let's see
153:19 - i think we can cancel this now
153:21 - and we have the upload here
153:25 - so let's look for something
153:27 - behind it so
153:29 - let's see please upload uh
153:34 - for that good so now we are in the form
153:37 - basically
153:42 - right here this is the input for the
153:44 - file
153:45 - where it says choose
153:46 - file and
153:48 - what we can do right now
153:51 - we need to make sure that this is inside
153:53 - a form
153:54 - so we can basically post that form
153:57 - in there so
154:00 - up in here
154:09 - where we see import videos from youtube
154:13 - that's not here but okay so let's just
154:16 - scroll up
154:18 - uh so basically when you have a template
154:20 - you just
154:21 - wait to look for how to or where to put
154:24 - your
154:25 - form okay so this is please upload uh so
154:28 - we want to put the formula say around
154:30 - here before upload peaks
154:34 - see
154:35 - okay good so the form should be
154:39 - here
154:44 - we have the form here
154:48 - cut this out
154:50 - and wherever that div is ending
154:55 - that is where we're going
154:57 - he says the div ends here
155:00 - close it
155:04 - is actually
155:05 - that okay so we're closing the
155:08 - form here we're opening the form here
155:10 - and this is not part of the can actually
155:12 - leave this but
155:15 - age it's maximum
155:20 - and yes so now all of this is inside the
155:22 - form now that all of this is inside the
155:24 - form we can have like an input for each
155:26 - of them
155:27 - so what we just want to do
155:29 - right here
155:31 - where we have
155:34 - scroll up a little bit
155:37 - peaks of videos i'm going to scroll up
155:39 - to the
155:40 - pain of the form
155:42 - so
155:44 - this
155:48 - combine that out
155:52 - and hit refresh
155:55 - let's see okay
155:57 - so
155:58 - you don't need to comment that out
156:00 - upload peaks
156:01 - or videos so let's just say upload x
156:09 - if we say that now we have a file field
156:12 - is what we want
156:15 - just hit refresh
156:17 - make sure everything is working
156:20 - all right so now we have a file field
156:22 - which is what we want
156:24 - and what we're just going to do is to
156:26 - come here
156:27 - we're going to remove it from
156:29 - this custom
156:31 - div
156:32 - i'm going to
156:33 - a from custom
156:36 - i'm going to save that
156:38 - and now under here we're going to have
156:42 - type so from here af class uk text
156:47 - all right so now what we want to do is
156:49 - to say
156:51 - the type of the file
156:53 - and then
156:54 - name
156:56 - equals to
156:59 - image
157:02 - underscore upload
157:05 - so we save that
157:08 - hit refresh
157:11 - okay so we have this field now we don't
157:13 - need this
157:15 - of all
157:20 - so it says
157:22 - choose file which is the image that we
157:24 - want to upload
157:26 - and the next thing we want to have is
157:28 - like a text area
157:30 - so let's
157:32 - go back there
157:37 - so we want to have a text area
157:40 - beneath
157:42 - so we can still be inside this div tag
157:46 - just have
157:48 - text
157:50 - area
157:52 - let's just close
157:58 - now that we have this
158:01 - say let's give it a class
158:08 - button
158:09 - soft
158:10 - running and small just give it a styling
158:18 - fix that in there so now that we have
158:20 - that we can give you the name and the
158:22 - placeholder and stuff like that let's
158:24 - say name
158:27 - equals
158:29 - caption
158:32 - placeholder
158:36 - equals
158:38 - caption
158:40 - and just have like three dots
158:45 - now let's hit refresh and see how the
158:47 - form looks
158:50 - if we upload ps okay good so now right
158:53 - here
158:54 - basically have here where it says choose
158:57 - image
158:58 - and
158:59 - right here also
159:01 - we have the
159:02 - place for the form to place for the
159:04 - caption in the form so now let's have
159:08 - a break
159:13 - i have a button
159:16 - so what we want to do in this button is
159:20 - button
159:29 - i want to give it a class so it would
159:32 - you know have the styling so let's say
159:34 - class
159:36 - pause
159:40 - to
159:41 - 700
159:43 - and let's give it a name
159:46 - or a type
159:48 - this button should be a submit type
159:53 - so since we have these
159:55 - right in here
159:56 - and say
159:59 - upload
160:01 - since we have upload
160:03 - let's also give this this styling of
160:05 - button
160:09 - from here
160:11 - that class let's see our button looks
160:18 - alright so it says upload the caption
160:21 - the image and good don't want to remove
160:23 - this or upload
160:26 - i don't need that
160:30 - and actually
160:31 - what we can do is we can have our form
160:34 - right here
160:38 - and we can close the form after
160:42 - this div tag
160:44 - right here i just close the form
160:48 - then
160:51 - indented well
160:54 - and then we can come down
160:57 - here we add that form
161:01 - get the form somewhere
161:06 - so
161:08 - right here
161:10 - move the form there
161:12 - scroll up
161:16 - or not there
161:20 - so this is
161:21 - in a form
161:23 - that's good actually
161:25 - what we just need to
161:28 - do go up to where the phone begins for
161:32 - this we have added the formula yes and
161:35 - remove that now
161:38 - through back of it down
161:40 - that phone
161:42 - so now that is good
161:45 - so now that we have this form we can
161:47 - basically continue with what we want to
161:48 - do what we just want to do now is to you
161:51 - know allow these to be able to upload an
161:52 - image put the caption hit upload send it
161:56 - to our view and then
161:58 - create a new object for those data
162:02 - with those data so now
162:05 - where we have our form right here
162:10 - right here
162:17 - and say action
162:20 - should go
162:21 - upload
162:24 - and
162:24 - then method should be post
162:31 - and one more thing since we are dealing
162:33 - with we have files in here we have to
162:35 - put
162:36 - nc type
162:42 - multi-part
162:47 - flash from
162:48 - iphone data
162:50 - and this works and now we can hit save
162:54 - so since we have all of this now being
162:56 - sent
162:57 - to this upload view
162:59 - and come back in here
163:01 - and in our upload view we can basically
163:03 - get all those data
163:06 - so now in our upload view the first
163:09 - thing we want to get is
163:11 - if the request the method is post
163:17 - if
163:20 - request
163:22 - the method
163:26 - equals to post
163:31 - will do a specific thing
163:35 - that's when we'll create
163:37 - data but if it's not equals to post
163:40 - that means if it is i just try to go to
163:42 - slash
163:43 - upload without even posting anything
163:45 - let's just return the user
163:50 - to the home page
163:55 - so that's good now if it's a post method
163:58 - let's first of all
164:01 - get
164:02 - the
164:03 - user
164:05 - the image
164:06 - caption
164:08 - and yeah that's all we need so for the
164:10 - user
164:11 - it equals to request
164:14 - dot user
164:15 - that username
164:18 - so if we come into our module.py
164:21 - let's see what we need to give in our
164:23 - post we don't need to put the uuid as a
164:26 - default
164:28 - we need to give it a user we need to
164:30 - give it the image and the caption you
164:32 - don't need to give it the creator that
164:34 - and no like so just the image and
164:36 - caption right now
164:38 - so say
164:40 - image
164:42 - caption
164:46 - the image is equals to
164:49 - quest
164:50 - dot files
164:52 - dot get
164:57 - image upload
164:59 - let's just go ahead and confirm that
165:02 - right here in our form this image name
165:05 - was image upload
165:08 - and then for caption
165:10 - press
165:12 - dot post
165:16 - caption
165:19 - that's that and now we can just easily
165:22 - create a new one we can just say
165:26 - new post
165:31 - and be equals to post
165:33 - well we use post yeah we need to import
165:35 - posts probably not imported that
165:38 - we imported profiles
165:41 - now that we have post imported we can
165:43 - say post
165:44 - dot objects
165:48 - dot create
165:51 - user equals to the
165:55 - the
165:56 - also want to give it the image
165:59 - so you will
166:02 - give it user image and caption
166:05 - so the image
166:09 - goes to image
166:11 - caption
166:13 - equals to caption
166:16 - now we've given it all these details and
166:18 - come to the next line now and say new
166:20 - post let's say
166:27 - so
166:28 - after saving it we just want to redirect
166:31 - a return
166:33 - direct
166:37 - on page now this should work
166:40 - come back here
166:42 - and let's hit refresh
166:46 - okay it's not running let's wait for
166:48 - this to reload
166:50 - and once they should load we can test
166:52 - that out basically
166:57 - so
166:58 - loading
167:00 - now we can come into upload peaks unless
167:04 - the peak from here
167:07 - that should open up
167:09 - oda
167:11 - our money job is
167:14 - i'm sure able to choose a
167:15 - peak
167:16 - and let's just anyone
167:20 - and we'll say
167:21 - nature
167:26 - let's upload
167:28 - so it gives us this for three forbidden
167:31 - and now this is because in our form
167:33 - right here
167:34 - we used
167:36 - a post method but we didn't add the srf2
167:44 - so that must yeah
167:47 - let's save this and go back
167:50 - try to upload again
167:54 - um
167:57 - here
168:02 - it's upload
168:06 - good so it brings us back here it
168:07 - doesn't tell us anything doesn't show us
168:09 - anything yet
168:10 - well we come into
168:12 - the admin panel and hit refresh
168:16 - be able to see a new post object created
168:19 - so let's wait for that to load
168:22 - do it so now we see a new post object
168:24 - created for john and we can have all the
168:27 - details of that post
168:29 - so
168:30 - let's wait for that too
168:32 - and i'm also going to explain something
168:34 - in this url so you can see now the id
168:36 - which we includes the
168:39 - name
168:40 - a link to the image
168:42 - option the date it was rated at and now
168:45 - it has zero like
168:47 - so remember when i said
168:49 - this uuid now replaces the id when we
168:52 - say primary key equals true so now in
168:55 - the link that is the identification for
168:58 - that post
168:59 - so that's what i was talking about when
169:02 - i say
169:04 - when we set primary key equals true so
169:07 - that replaces the initial id that django
169:09 - provides and use that as the id
169:14 - so now
169:15 - we are able to upload the post and
169:17 - allow
169:19 - everything show like this and allow you
169:22 - know it to save into our database and
169:25 - allow everything show like this what we
169:27 - should do now is to
169:30 - return
169:32 - everything and show it in the post feed
169:35 - when we come in here as you can see this
169:37 - is still just showing all this
169:39 - static images or these dumb images that
169:41 - we put there
169:43 - so what we want to do now is to change
169:44 - this and once we get all these images
169:47 - and the person that it whatever once we
169:50 - get it from our database
169:52 - let's do that
169:58 - so now what we want to do is to go ahead
170:01 - and customize this post feed
170:03 - so right here once a user logs in what
170:06 - we want the user to see is a list of
170:08 - posts a random post
170:10 - but for now because we've not
170:12 - implemented the
170:13 - picture of being able to follow a user
170:16 - what we're just going to do is to show
170:19 - a post of a list of all the posts we
170:22 - have in our database
170:23 - so because
170:25 - we don't have the followers i'm
170:27 - following when we implement that we're
170:28 - going to be able to show only the posts
170:31 - of the users that the logged in user is
170:34 - following so you know like when you log
170:36 - into instagram or any other social media
170:38 - that you see
170:39 - the post of people you're following or
170:40 - related or anything related to that so
170:43 - that we're gonna do later in this video
170:46 - but for now let's just take away these
170:48 - static images and stuff and let's change
170:51 - it to a list of all the posts we have in
170:52 - our database
170:54 - so actually this is very easy what we
170:56 - just need to do is to come into our
170:58 - index view
171:01 - and right here in our index view
171:03 - we're just gonna say
171:05 - so we don't need upload again
171:09 - and collapse that
171:11 - and right here what we want to get is
171:14 - we can say feed list
171:19 - or let's just say post
171:24 - equals to post dot object
171:29 - dot o
171:30 - now this is all we need to write
171:32 - and we can just pass it in here
171:38 - by
171:39 - using a comma
171:40 - and then
171:44 - like that so now we can save this and
171:47 - now that we have this saved we can come
171:48 - into index
171:50 - and right here in index
171:52 - what we can just search for
171:58 - first of all we want to come
172:01 - and look for where we have these these
172:03 - other ones the ones below it we want to
172:05 - delete any other one we have below it we
172:08 - just want to leave this one and then
172:09 - we're going to loop through it
172:11 - so we're going to come so we have this
172:14 - right here
172:16 - but since we have this right here
172:18 - at
172:19 - some middle underscore ml we know that
172:21 - that's the one for this
172:24 - so
172:25 - post error post one but this is under
172:28 - post one good
172:30 - post too let's also collapse that
172:34 - load more
172:35 - let's collab that we're gonna just
172:37 - remove all this basically
172:39 - post three
172:42 - post four
172:45 - load more yeah so we want to delete all
172:48 - of this
172:50 - we just want to keep only one so we
172:52 - deleted everything to those two now if i
172:55 - save it and come back in here
172:57 - what i should be seeing is just only
172:58 - this first plus good so this is all we
173:00 - have now
173:02 - and
173:03 - what we just want to do is to open that
173:05 - back
173:08 - let's close that back first of all so
173:10 - this post want to loop through it in
173:11 - jungle when we are sending a list
173:14 - we come back here now
173:18 - when we are sending a list from here
173:21 - so we said post.object or this is
173:23 - basically returning to us as a list so
173:25 - this that we pass into the view is a
173:28 - list if we come in here now
173:32 - we can basically look through that list
173:33 - and just display the data we got so we
173:35 - can say
173:38 - for posts
173:40 - in posts
173:42 - and then we're gonna
173:46 - end the for loop
173:50 - now that we've used the for loop we can
173:53 - change this to
173:55 - the post
173:57 - dot now coming to our models dot py file
174:00 - to depose the user
174:04 - so this will change to the username of
174:06 - the person that posted it and let's try
174:08 - that out
174:09 - so that is john
174:11 - so for now is we just have this job
174:13 - basically just because
174:15 - you know
174:16 - the
174:17 - what is getting from the database as the
174:19 - user of john so we also want to change
174:21 - the image to the image that this john
174:23 - uploaded and yeah
174:25 - so
174:26 - i'm going to scroll down
174:29 - so we have this delete post function
174:31 - which you're also going to take care of
174:32 - later right here where we have image src
174:36 - so i want to have post dot
174:40 - image
174:41 - dot url
174:43 - and we hit refresh
174:46 - good so you can see that is the image we
174:49 - uploaded that we have here now
174:51 - and i just want to change the link
174:54 - because right now if i click on this
174:56 - it's still going to that image
174:58 - that we had earlier but now i want to
175:00 - change that to this image
175:02 - so let's just change that
175:06 - this image so whatever image it is is
175:08 - what it should go to
175:10 - if i click on it it opens that image
175:13 - larger
175:14 - so now the next thing we want to do is
175:15 - to have like a caption
175:18 - so for us to have a caption we're just
175:20 - going to look for where we can put that
175:23 - caption
175:24 - so we're going to scroll down
175:26 - here we have the likes
175:31 - so if we come down here i think we have
175:33 - it right here where it says like spy
175:36 - so in this place we're just gonna
175:38 - basically have a caption
175:41 - and we can
175:42 - say first of all let's see once you
175:45 - remove all of these
175:47 - so
175:50 - you need this
176:01 - not need this
176:04 - and
176:06 - let it refresh
176:10 - okay good so
176:12 - we're just basically taking out all the
176:14 - things we don't want
176:17 - and now
176:19 - let's see
176:26 - let's see what we have now
176:29 - you know we need that
176:33 - take this away
176:35 - see
176:36 - okay so right under here we want to have
176:38 - the caption
176:40 - and
176:41 - well we have the caption we have like
176:43 - the person that posted it and then the
176:45 - caption so let's do that right now and
176:48 - what we're just going to do so having it
176:50 - right under here
176:52 - so where we have is
176:55 - right here
176:58 - we are just going to say
177:00 - let's have a p tag
177:02 - and in that b tag
177:04 - let's have
177:06 - an a tag
177:09 - so this a tag is going to be the user
177:11 - so say post.user
177:15 - and then
177:16 - we also want to have the caption
177:21 - of that post
177:24 - post dot caption
177:28 - let's save it and hit refresh so now we
177:31 - have this this is the user
177:33 - and then we have the caption
177:35 - so now we have this but doesn't look
177:38 - well let's like give this one a strong
177:40 - tag
177:41 - and
177:42 - let's also link it
177:44 - so what i want to do now is to cut this
177:46 - out
177:48 - this trunk
177:50 - paste that in there
177:54 - so we have john now strong and this so
177:57 - this and this we wanted that once a user
178:00 - clicks on one of these if you take the
178:03 - user to the profile page of this user
178:05 - we've now yet set up the profile page
178:07 - fixture but let's just give it an a tag
178:10 - first of all
178:11 - so this has an a tag but it should stop
178:16 - here
178:19 - so let's just give it a link let it go
178:22 - to ash first of all and if we scroll up
178:26 - where we have the post
178:28 - dot user that should also be in a link
178:31 - like so a
178:34 - put that back in there
178:37 - give it that and give it an ash
178:39 - now we come back here and hit refresh
178:42 - once we click on it it just basically
178:44 - brings us to this ash but later when
178:46 - we've taken care of the
178:48 - profile
178:49 - in the profile page feature then we'll
178:52 - be able to link that
178:54 - and also we're also going to do it that
178:55 - if this post is for
178:57 - logged in user then the user should be
178:59 - able to delete this post but basically
179:01 - now we are able to upload a picture and
179:05 - just showcase it in the feed let's try
179:08 - that out now if we upload a pix
179:11 - we wait for that to load up the
179:14 - files
179:15 - and now let's upload this
179:18 - and let's say
179:21 - the word
179:24 - it's beautiful
179:30 - and then we hit upload
179:31 - so now that we upload we have this right
179:35 - here
179:36 - so you can see now that we have the
179:39 - second image right here like what is in
179:42 - our
179:43 - database is what is showing right here
179:45 - now
179:46 - but as you can see the second one is
179:49 - what is down so we basically want to
179:51 - have the latest posts at the top so to
179:55 - do that we can come in here and say for
179:57 - post in post
180:00 - reversed
180:08 - hit refresh now you see we have the
180:10 - latest boost right here
180:12 - so we've been able to take care of the
180:15 - field the
180:16 - photos feed
180:17 - and let's move to the next step
180:25 - so now we stopped at this post feed
180:28 - where we can just easily get the data of
180:30 - all the objects we have in the post
180:33 - model in our database so as you can see
180:35 - right now we just have
180:38 - all the
180:39 - posts we have stored in our database
180:42 - well normally
180:43 - we are not going to stop this post feed
180:46 - just like this because that doesn't make
180:47 - sense we want to be able to customize it
180:50 - for each specific user that means we
180:52 - want to get the post of the user that i
180:55 - am following so not just all the posts
180:58 - we have in the database but since as i
181:00 - said in the last section since we've not
181:02 - implemented that yet we're just going to
181:04 - stick to this stick with this for now
181:06 - and what i want to do is to be able to
181:08 - like a post so this button here once the
181:10 - user clicks on it we want the user to be
181:12 - able to like that post and also right
181:14 - here it should be updated like um this
181:16 - post has three like this blues has four
181:18 - likes and we should once we unclick from
181:21 - that button again we should be able to
181:23 - unlike the post so let's just go ahead
181:25 - and do that
181:27 - now we're just gonna come in here the
181:29 - first thing we want to do is to have a
181:31 - url where we're gonna be submitting you
181:34 - know the data of which post we are
181:36 - liking and who is liking that post so
181:38 - we're going to come here now we're just
181:40 - going to copy and paste that and we're
181:42 - going to have a new
181:44 - path
181:45 - we're going to name it like i think post
181:52 - so we're just gonna copy this
181:54 - put it in there for the name
181:56 - and then for the views the views can't
181:57 - have an iphone it needs to have an
181:59 - underscore
182:00 - so now let's just copy that for the view
182:03 - and right here in views
182:06 - we're going to close this for now
182:08 - let's create a like post
182:11 - function and then we can just create it
182:13 - like under upload right here
182:20 - df like post
182:22 - take a request
182:26 - and
182:27 - let's pass first of all and we also want
182:30 - it to have
182:33 - login required so urls we save these
182:36 - also now this is good the next thing we
182:38 - want to do is to come into our
182:40 - index.html
182:41 - so right here
182:43 - let's see where we have that like button
182:47 - we want to be able to link it to
182:49 - submit like a mini form not really a
182:53 - form but let's see where we have the
182:55 - like button first of all
182:57 - so
183:00 - this like button right above john and
183:02 - then
183:03 - that should be
183:06 - down here
183:08 - okay
183:09 - so this is the like button i suppose
183:13 - no this is the
183:15 - other button to download so now this is
183:17 - the like button
183:19 - and as you can see that like button is
183:20 - already linking somewhere which has an
183:22 - edge so what we want to do is to change
183:24 - it to slash like post
183:28 - like i've imposed so now once you use
183:31 - that click on this you go to slash like
183:32 - i've imposed but you want to go there
183:36 - by sending some data so let's send
183:39 - posts
183:41 - id so want to send the post id
183:44 - and the post id will be
183:49 - post dot id
183:51 - let's save this and check this out
183:54 - i'm gonna refresh this page now
183:56 - and then once i overrun this button if
183:59 - you look at the bottom left corner
184:01 - you're gonna see that we have slash like
184:04 - posts
184:05 - a question mark name post underscore id
184:07 - equals to the id of that specific post
184:10 - now we go to the next one we see the id
184:13 - of that post so each post has a
184:15 - different unique id but since now once
184:18 - we click on that we're sending it to
184:19 - that view it's going to give us an error
184:21 - now that this
184:23 - particular place does not return
184:24 - anything so it doesn't have written an
184:26 - http object but that's for now but what
184:29 - we want to do is once we click on that
184:31 - it will take us to that view but within
184:33 - like a millisecond it's going to take us
184:36 - to that view automatically
184:39 - create a new object in our database and
184:41 - that object is going to be under a model
184:43 - that we're going to create and that
184:45 - model is going to take you over liking
184:46 - post so when a user likes a post you're
184:48 - going to create an object app this post
184:51 - id was liked by this user so that object
184:53 - is that module is going to have two
184:55 - fields
184:56 - and then once it does that it's going to
184:58 - check if the user has liked this post
184:59 - already or he has not liked this post so
185:02 - if he has like this post is going to
185:03 - update that and he does not like this
185:05 - post
185:06 - if he has liked this post he's going to
185:07 - update that here by reducing the likes
185:09 - but we are not like this post what
185:10 - you're going to do is to increase the
185:12 - likes so now let's just go ahead and do
185:14 - that and once that is done we want you
185:15 - to redirect us back to this
185:19 - right here in our modules file first
185:21 - thing we want to do is to have a new
185:24 - model
185:25 - say class
185:27 - like post
185:30 - and that should obviously take from the
185:32 - model dot
185:35 - models
185:38 - and what we just want to do is to have a
185:39 - post
185:40 - underscore id
185:43 - and that should just be a models dot
185:47 - character field
185:48 - and let's have a max length
185:53 - like
185:53 - 100
185:55 - and the username that's the
185:58 - name of the user that is liking this
185:59 - post let's say
186:01 - models.character field
186:03 - and i should have a max length
186:07 - 100
186:09 - and let's say df
186:13 - the r
186:15 - itself
186:18 - i'm just gonna do is to return
186:22 - self.username
186:24 - so this is what we have now and what we
186:26 - want to do before we have unreal
186:27 - migration is to go ahead and import that
186:30 - here in admins.py file so we can
186:33 - register it in our admin panel
186:36 - copy paste
186:38 - copy this
186:40 - paste and save so now that should be
186:42 - registered but before we go and view
186:44 - that let's make sure we come here
186:47 - it gives us an error i said models.model
186:50 - does not
186:52 - doesn't exist should be model.model that
186:55 - models dot model
186:57 - i come back in now i'm cut out of that
187:01 - okay so that you just got out of that
187:03 - and i will say python
187:05 - manage dot py make migrations
187:10 - and this will save the changes and tell
187:12 - us what has been updated
187:14 - now we can say python
187:16 - manage dot py migrate
187:23 - now this is just going to migrate that
187:25 - to our database good now let's run our
187:27 - server back
187:28 - and once we have our server running
187:31 - good we can just come back to
187:33 - our browser and actually the tab where i
187:38 - remember i opened an incognito tab by
187:41 - private window where i log the admin
187:43 - user in i close that tab so just have to
187:46 - open that again and quickly log in the
187:48 - admin user so slash admin and remember
187:51 - that earlier in this tutorial we created
187:55 - unique admin user
187:56 - let's just log that in
187:59 - good so now we log in now we now see a
188:01 - new model called like posts so now once
188:04 - a user like a post issue update here i'm
188:06 - also using unlike you should also update
188:07 - here let's just go ahead and do that
188:10 - so to this point now we've created the
188:12 - model
188:13 - right here we've been able to link to
188:16 - where
188:17 - the user will be able to save whatever
188:19 - the user is doing without liking your
188:21 - own liking and what we just need to do
188:23 - nice to go to this view
188:24 - the view of this url and now collect
188:27 - this data and do the rest
188:29 - so now let's import like post
188:33 - and right here where we have this like
188:35 - post
188:36 - the first thing that we want to do
188:38 - to just get the username
188:41 - of the currently logged in user
188:43 - to say
188:44 - request.user but username
188:48 - so that's that
188:50 - just got the username of the currently
188:52 - logged in user
188:53 - and then the post id which was sent from
188:55 - our template
188:57 - so say request
189:00 - dot
189:00 - get
189:02 - dot get
189:05 - and what we just want to do is to get
189:07 - post underscore
189:10 - id
189:11 - so we have that now
189:13 - and then what we want to do
189:14 - is to get the post object
189:17 - so since we have the id of that post we
189:19 - want to get the object the entire object
189:21 - of that post to say post
189:24 - is equal to posts
189:27 - posts dot objects so this post is
189:30 - actually the post model which we
189:32 - imported if i scroll up here
189:35 - right here you see we have that post
189:37 - suppose dot objects
189:39 - dot get
189:42 - want to get the one in which the id is
189:45 - equal to the post id that has been sent
189:48 - so now that we have that
189:50 - what we just want to do we want to first
189:52 - of all
189:53 - check
189:54 - as this user liked this post before so
189:57 - we want to check if this specific post
189:59 - has been liked by the currently logged
190:02 - in user so that we know whether we want
190:04 - to like or unlike
190:06 - so what we're just going to do is say
190:07 - like like filter
190:10 - don't want to filter the database and
190:12 - say like post dot objects
190:18 - dot filter
190:22 - post
190:23 - underscore id
190:26 - equals post underscore id
190:29 - so let me before i continue let me
190:30 - quickly explain what i want to do so i
190:32 - want to
190:33 - get if there is actually an object in
190:35 - our database in which the post id if i
190:38 - come to my models in which the post id
190:41 - is equals to the currently post the
190:43 - current post that has been sent here and
190:45 - the username is equals to the currently
190:47 - logged in username now if we have an
190:49 - object like that that means this user
190:51 - has really liked this post so we know
190:53 - that we need to unlock that's what i
190:55 - want to do
190:56 - well if you are very familiar with
190:57 - jungle you know that when i want to get
190:59 - just one model i mean just one object i
191:02 - need to use dot gets not the filter
191:06 - but that's when i want to get just one
191:08 - model and that's what i want to do here
191:09 - i just want to check if one model exists
191:12 - but if i do that in this case it's going
191:14 - to throw me an error because right here
191:16 - i am basically not
191:18 - if that does not exist it's going to
191:20 - throw me an error now i can use an if
191:22 - statement and say if like those post
191:23 - dots
191:24 - gets blah blah blah exists or not but
191:26 - it's still going to throw me an error
191:28 - and
191:29 - to solve that what we just want to do is
191:31 - to use filter
191:33 - now when we have filter we can just say
191:36 - onto fuel tank with the post style is
191:37 - equal to this post id and then
191:40 - the
191:41 - username
191:44 - is equals to this username that we got
191:47 - which is the currently logged in user
191:50 - so
191:51 - if we have that already
191:53 - what we want to do now is to say at the
191:56 - end of this because as we know this is
191:59 - going to give us back a list but we
192:00 - don't want to get one module one object
192:03 - we'll say dot first
192:09 - so now this is going to give us just the
192:10 - first one it gets which should even be
192:12 - only one in the first place
192:14 - so now that we have this what we can
192:16 - just say is i'm just going to come here
192:19 - and i'm going to say if
192:21 - like filter
192:23 - is equals to none
192:27 - now this means that if it checked
192:29 - through the database and you didn't see
192:30 - any object that corresponds with these
192:32 - inputs that i gave
192:34 - then that means the user has no you like
192:36 - this post so we want the user to be able
192:38 - to like display us so say new like
192:41 - would be equals to
192:43 - like post
192:45 - dot object
192:48 - dot create
192:52 - i want to create a new one in which the
192:53 - post id
192:55 - equals to post id
193:00 - the username
193:02 - equals to username
193:05 - now we can just say new like
193:07 - dot save
193:11 - and now
193:12 - the next thing we want to do the reason
193:14 - why we got this
193:16 - post object so remember that once we got
193:18 - to the id of the post we have to get the
193:21 - object that post now this is because if
193:23 - we come back here we'll see that in this
193:25 - post object we have a field called
193:27 - number of likes now we just want to
193:29 - increase the number of likes when a user
193:31 - likes that post and decrease the number
193:33 - of like when the user unlikes that post
193:35 - so let's do that
193:38 - right here now after saving that after
193:40 - creating a new like object
193:42 - what we can just do is to say post dot
193:45 - number
193:47 - of
193:49 - likes
193:50 - should be equals to
193:52 - post
193:54 - dot number of likes
193:57 - for this time around plus one since a
193:59 - new user is liking this post now we can
194:02 - just also say post dot save
194:06 - after saving the letters
194:08 - return
194:11 - redirect
194:12 - the user
194:15 - back to the home page so this should
194:17 - work now when a user tries to like the
194:19 - post it should create a new object in
194:21 - the database
194:23 - but after this what if
194:26 - this
194:27 - query that we try to search for already
194:30 - exists that means the user already likes
194:31 - this post then we want users to be able
194:33 - to unlike this post what we would just
194:35 - say is like
194:37 - filter dot delete
194:41 - so we just want to delete that
194:43 - particular object that we got since it
194:45 - is i want to unlike it and then we'll
194:48 - say post the number of likes
194:53 - this time around -1
194:55 - and we can just say post
194:57 - dot save
195:00 - and we can also do the same thing by
195:02 - redirecting the user we say return
195:04 - redirect
195:05 - the user back to the home page
195:10 - so now let's save this and then let's go
195:12 - ahead and test this out so first of all
195:15 - if we
195:16 - click refresh we see that we have no
195:18 - post object here but we come here now
195:21 - and hit refresh
195:22 - and we try to like this
195:25 - so
195:26 - nothing shows it didn't return any
195:28 - response but if we come back here and
195:30 - hit refresh
195:32 - we now see that we have a new object and
195:35 - if we go in there we have the post id
195:37 - and the username of the user that liked
195:39 - that post
195:40 - well if we click on that like button
195:43 - again
195:44 - and we come here and hit refresh we'll
195:46 - see that that is gone and that is
195:48 - because these are unliked so these are
195:50 - unliked we don't want to have that
195:51 - object again so one more thing let's
195:53 - just try to like this other post
195:56 - so now we come here
195:58 - we obviously have that here now and if
196:00 - we go to that post
196:02 - which is i think the latest one
196:05 - will now see okay so it's not this one
196:08 - is the second one
196:10 - that's post
196:12 - you go to the second one now we see that
196:14 - it has the number of likes is one well
196:16 - if i come back here and
196:18 - pick it again and i come here i need to
196:21 - refresh now the number of likes is
196:23 - but that basically just
196:27 - fix
196:28 - or solves that that we want to do
196:31 - now the next thing we want to do is to
196:32 - just show like the number of likes this
196:34 - particular post have we want to show it
196:36 - on there so what we should do in there
196:40 - is to go into the index the py index
196:43 - index.html actually i'm going to come in
196:46 - here
196:47 - and then
196:48 - just write on the
196:51 - here
196:55 - so right here what we want to have
196:57 - is just to say
197:00 - let's just make sure we are in the right
197:01 - place here right here okay so what we
197:04 - want to have right now
197:06 - is
197:09 - have it on the inside the same div tag
197:12 - so want to have like a p tag
197:16 - and
197:17 - let's just say
197:19 - liked
197:21 - by
197:24 - one person let's give it like that
197:27 - unless it refresh
197:30 - okay so
197:31 - it just is like by one person for
197:33 - everything but we're gonna get the data
197:34 - from the back end
197:36 - so this is liked by one person okay but
197:39 - even if it's not like by one person it
197:41 - just says that
197:42 - to change this now what we want to do to
197:44 - come into our views dot py actually we
197:47 - don't need to go into our views.py
197:49 - because right here we're already getting
197:52 - all the post objects and we are sending
197:54 - it here so each of what we are looking
197:57 - through already as the number of likes
197:59 - because each of the post object has the
198:01 - number of likes filled in there so now
198:03 - we can use this field just come in here
198:05 - and say liked by
198:09 - post.number of likes person
198:13 - so now you see this one says like by
198:14 - zero person you don't say like by zero
198:17 - person if i
198:18 - like it now it says like by one person
198:21 - but this is the same like by zero person
198:22 - because nobody liked it but if i say
198:26 - if i like it
198:28 - one person i dislike this zero person so
198:31 - that's what
198:32 - we want to do to that but
198:35 - this is wrong grammatically in english
198:38 - so let's just change this
198:40 - to be right so what we want to do is use
198:42 - an if statement in the jungle templating
198:44 - style
198:45 - so we can say
198:50 - if
198:51 - post dot number of likes
198:54 - is equals to zero
198:56 - then what we want to do
198:59 - let's copy and paste this is to say
199:02 - no likes
199:05 - no likes
199:07 - so since reports have no likes let's
199:09 - just say no likes
199:11 - but
199:13 - want to have
199:15 - an else if statement so just say
199:20 - alif
199:24 - post
199:25 - dot number
199:28 - of
199:29 - likes
199:30 - if it's equals to one
199:33 - i will say liked by one person
199:36 - but now
199:38 - if it's equals to anything except zero
199:41 - and one that means
199:43 - it is from two above
199:45 - so now we can say else
199:55 - liked by
199:57 - whatever people just
199:59 - make sure that is right
200:01 - and now we can just simply end that if
200:03 - statement
200:06 - so this is just the way we write a
200:08 - simple if statement in the jungle time
200:09 - register so we create this statement
200:12 - like this and this is where we end it
200:14 - now in python we just end the statement
200:16 - using the indentations python already
200:18 - understand but since html the
200:20 - indentation doesn't really matter here
200:22 - we have to end it using the tags
200:24 - so now we save that we are coming and
200:26 - hit refresh this says no likes because
200:29 - it doesn't have a like but this is like
200:31 - by one person so this i have no likes if
200:33 - i like it now it says like by one person
200:36 - wonder person like it now it should say
200:38 - liked by two people
200:40 - so now we've taken care of that
200:44 - everything is working with the likes to
200:46 - this section
200:53 - so now that we are done with allowing a
200:54 - user to like a post and showing the
200:57 - amount of likes that that post have the
200:59 - next thing we want to do is to customize
201:01 - the profile page so right now to this
201:04 - point we don't have any profile page so
201:05 - that means if we see a post and we click
201:07 - on the username it doesn't take us the
201:09 - profile page of that user and we can't
201:12 - even see our own profile page so let's
201:14 - go ahead and add that picture
201:16 - now we're just going to go back to vs
201:18 - code
201:19 - and we're going to come into the urls.py
201:21 - file so in here the first thing i want
201:24 - to do is to create a new url so under
201:28 - let's say
201:29 - upload i can just say profile
201:32 - and what i can say after this profile is
201:35 - slash
201:36 - and i'll say str column pk
201:40 - and then i can close it
201:42 - so now this is basically just gonna
201:44 - have the profile page slash the user so
201:48 - that's gonna be the link to get a user's
201:50 - profile page and i can take it to views
201:54 - dot profile right here
201:58 - and the name can also be profile
202:00 - so now i can come into views
202:03 - and i can just close up this like post
202:06 - and right here
202:08 - i can say def profile
202:13 - request
202:16 - and i'll just return
202:19 - render
202:21 - request
202:26 - profile
202:29 - dot html
202:33 - so this profile is coming from
202:35 - this profile.html
202:37 - so that's the template we're gonna use
202:39 - so now to be able to go to user's
202:40 - profile we need to go to profile slash
202:42 - the username that's what we're gonna do
202:44 - so first of all let's go
202:47 - into our app and see what that is going
202:50 - to give us so let's say profile
202:53 - slash so the username goes here
202:55 - but now nothing is going to happen
202:57 - because we didn't even collect this so
203:00 - right here after
203:03 - you know specifying requests we also
203:05 - need to specify the pk so the pk is what
203:08 - we collected from the url right here we
203:10 - said
203:10 - pk is the name or is the key and the
203:13 - data type is a string so we can come
203:15 - back here and just save this since we
203:17 - collected it
203:19 - yes it refresh
203:22 - press yeah our app is running
203:24 - and let's see
203:27 - good so this is just the demo profile
203:29 - page very simple
203:30 - and as you can see just have this image
203:33 - we can go to the ohm and it has this
203:35 - dummy like numbers now right here and
203:39 - there's a button to follow
203:41 - and all this so what i want to do now is
203:42 - to customize this so
203:45 - first of all like when we enter like
203:47 - john
203:49 - then we should see all the details of
203:50 - john of this if you see his profile
203:52 - image
203:53 - user name is bio of the post and me as
203:56 - the currently login user should be able
203:58 - to follow him i'm also going to do that
204:00 - after this section
204:02 - what we want to do now is to go
204:04 - into the views of this profile first of
204:07 - all let's also add this login required
204:12 - and now what we just want to do is to
204:14 - get the user object
204:17 - first of all of this user that we're
204:18 - passing i'm going to say user
204:21 - underscore object
204:24 - it'll be equals to user
204:27 - dot objects
204:31 - dot get
204:34 - user name
204:36 - equals to pk
204:38 - now that we have the user object we can
204:39 - get the user profile using the object
204:42 - the user underscore profile
204:45 - equals to
204:46 - profile
204:48 - dot
204:49 - objects
204:52 - dot get
204:55 - the one in which user
204:57 - is equals to user
205:00 - object
205:01 - and now that we have that
205:03 - we can basically pass this user profile
205:07 - what we want to do first of all is to
205:09 - pass the let's pass the user object
205:14 - okay because we're going to pass a lot
205:15 - of things like if we come in here we're
205:17 - going to pass the user object user
205:19 - profile i'm going to pass the amount of
205:22 - posts that i use i have it's better we
205:24 - do this in the context so
205:26 - let's move this first of all and say
205:29 - context
205:31 - and the equals to no not a list
205:36 - like this and we can say
205:39 - user object
205:41 - give it user object
205:44 - and
205:45 - also the user profile
205:51 - give it the user profile
205:53 - and let's see another thing we need to
205:55 - pass so we are passing the user object
205:57 - just so we can guess like the username
206:00 - of the user we already have that but
206:02 - let's just pass it we later we might
206:04 - want to get you might need a data from
206:06 - that object later but what we really
206:08 - need is this pro user profile because
206:10 - that's where the profile is made by your
206:12 - goals but another thing you want to get
206:14 - is the amount of posts that specific
206:16 - user have
206:17 - so to do this we are going to have to
206:19 - say
206:20 - user
206:22 - posts
206:24 - now is equal to post
206:26 - dot object
206:29 - dot
206:30 - filter i want to filter the one in which
206:34 - user is equals to pk
206:37 - so if we come here to confirm in the
206:40 - post model the user is just a character
206:43 - field which we are giving us the
206:45 - username so the one in which user is
206:46 - equals to pk as we know this pk is the
206:49 - username of the currently viewed user so
206:53 - the one in which users go to pk that's a
206:56 - post that is belonging to this user that
206:58 - we're looking for so once we have that
207:01 - we just query all of it and what we can
207:04 - just do we can say user
207:07 - post length
207:11 - is equals
207:12 - to let's say
207:15 - len
207:17 - and we can just find the length
207:21 - of this outpost
207:24 - now once we find the length
207:26 - or once we get the length of this user
207:28 - post we can be able to use that
207:31 - right here so we can just say the amount
207:33 - of post another thing we can do now
207:35 - since we already have all the users all
207:37 - the posts of this user we can just
207:39 - render it here so we can also click on
207:41 - it you know to view that specific image
207:45 - so we're just gonna do is to come back
207:48 - and once we come back here now
207:50 - we're gonna pass this
207:58 - and say use our post
208:00 - and also
208:02 - user post length
208:07 - and they just have a comma and now we
208:09 - can just pass context
208:14 - now let's save this now that we have
208:16 - this saved what we can do first of all
208:19 - we can use this user profile now we're
208:21 - going to come into profile.ht
208:25 - and right here you can see that we have
208:28 - the username of
208:30 - what we're just gonna say is
208:32 - user profile
208:34 - dot
208:36 - user
208:38 - dot username and we come here and hit
208:41 - refresh
208:43 - what we should see in the title is
208:46 - profile iphone john let's come back here
208:49 - and see what's up
208:51 - so okay right here we have one we didn't
208:56 - let's see
209:00 - okay right here should be
209:02 - colon
209:04 - and that should reload
209:07 - good so if we come here now and hit
209:09 - refresh
209:10 - as you can see now we have profile
209:12 - iphone john good
209:14 - so now what we want to do
209:17 - is to just scroll down
209:20 - first of all let's copy this profile i
209:23 - think john so we're just gonna
209:26 - copy this tag
209:28 - i'm gonna come down to
209:31 - where we have
209:33 - the user name
209:37 - so let's see
209:39 - this is where the bio is damaged
209:41 - username should be up
209:44 - right here where we have the user name
209:46 - we are just going to say user profile
209:48 - user.username
209:50 - and for the bio
209:52 - value goes here so right here we say
209:54 - userprofile.bio
209:56 - it doesn't need a user anymore any other
209:58 - thing
210:00 - so that's for that
210:02 - and let's go ahead and check that out so
210:05 - now we see
210:06 - john
210:08 - and here we see user provided by you
210:09 - that's because
210:11 - we used only one
210:14 - we scroll down only one tag to close it
210:17 - so that should not be now if we hit
210:19 - refresh we see the value of the user i
210:21 - am done i am the coolest kid
210:23 - now let's scroll up back
210:25 - and let's add the profile image of
210:28 - john so what do we need to do that
210:32 - is right here
210:35 - what we need
210:39 - is user profile dot profile
210:43 - img
210:45 - let's save that and hit refresh
210:48 - that doesn't work because we need to say
210:51 - dot url so whenever we're getting an
210:53 - image we need a dot url to get a
210:55 - specific area of that image that it
210:58 - refreshed good so now we have the
210:59 - profile image of john
211:01 - and
211:03 - this
211:04 - where we have
211:06 - let's see
211:08 - scroll down here
211:10 - we have upload profile photo we don't
211:13 - need this because we already have where
211:16 - so if you come here you see we have this
211:17 - we don't want that because right there
211:19 - where user can
211:20 - upload
211:21 - profile photo in the home page but this
211:24 - is working so
211:25 - we have the username profile picture the
211:28 - bio i want to have
211:31 - the amount of posts we're not going to
211:32 - do for these followers i'm following for
211:34 - now because we haven't implemented our
211:36 - picture we're going to come back to it
211:37 - once we have done that
211:39 - so let's go ahead
211:41 - and say and configure this post
211:44 - so let's search for where we have 11
211:46 - post
211:49 - so right here what we're just going to
211:50 - say
211:51 - is
211:55 - come back in here now you see we passed
211:58 - user post length
212:00 - so we're just going to say we're going
212:02 - to change this 11
212:04 - user post length post
212:07 - so these are two posts
212:09 - so what we can just do here also now
212:12 - is to use an if statement so let's just
212:17 - and say
212:21 - if zappos lens dot post
212:25 - is equals to zero
212:27 - then we can just simply say
212:30 - no post
212:33 - like you just have no post
212:36 - and we can copy this again
212:42 - and we can say l if is that personality
212:45 - equals one and we can say one post
212:50 - dummies with anything more than that
212:55 - then
212:58 - copy these
212:59 - and paste and we can say
213:02 - posts now we have that so now you say
213:05 - two posts with an s so we have an error
213:10 - so
213:11 - use our post length
213:13 - so right here
213:15 - says we didn't close the if tag what we
213:18 - just need to do
213:19 - to come
213:22 - down where we have this
213:25 - and just basically post close that if
213:27 - tag by saying end if
213:30 - now we save that and hit refresh
213:32 - we have to post
213:34 - the next thing we want to do now is this
213:36 - profile
213:37 - is this posts
213:39 - as you can see we just have three lists
213:41 - of posts right here but what we really
213:43 - want to have is the
213:44 - amount of post the user has then it
213:47 - should just show the image and one user
213:49 - clicks on that image should open the
213:51 - image
213:52 - wider
213:53 - so that is what we want to have and
213:55 - let's go ahead that
213:57 - if we come back in here now
214:00 - oh we're just gonna say
214:02 - i'm gonna scroll down
214:06 - all the way down to
214:08 - right here so you can see we have one
214:10 - two
214:11 - three
214:13 - gonna remove that
214:15 - and what we're gonna say is
214:17 - right here in this list
214:19 - i'm gonna say
214:23 - for
214:25 - let's say for posts in
214:28 - and right here
214:30 - we sent user posts
214:33 - all the posts and user posts let's just
214:36 - go ahead and enter a for loop right here
214:40 - i'm saying for post in user posts
214:43 - what we want to do
214:44 - is just to
214:47 - show
214:48 - the url of that image
214:50 - that post
214:51 - we're going to remove all of these
214:56 - we're gonna say
214:58 - post
214:59 - dot
215:01 - image dot url
215:03 - let's save it and hit refresh
215:05 - and we see the two posts and that in
215:08 - those images
215:09 - we click we click on it still take us to
215:11 - this image so to do that
215:14 - i'm just going to copy exactly the same
215:16 - thing
215:17 - and change it for you
215:20 - so let's just cancel of that
215:25 - let's hit refresh
215:28 - once we click on one it takes us to
215:30 - the one for that you click on the other
215:32 - one takes us to the full image of that
215:35 - so as you can see what we are just doing
215:37 - now is that we got
215:40 - everything we need all the data we need
215:42 - and then we just looped through it in
215:44 - here
215:45 - since we have all of this done now we
215:48 - are pretty much
215:50 - done with
215:52 - this profile image
215:54 - so
215:55 - yeah now let's continue with the next
215:58 - part of this project
216:04 - so in the template of this profile page
216:07 - once we click on this image it's just
216:09 - meant to like pop up a model here that's
216:11 - going to allow us to like slide through
216:13 - all of the images as posted
216:16 - so
216:17 - that is not working what is just
216:19 - happening is that it's taking us to the
216:20 - full image
216:22 - so that means there is a problem
216:24 - somewhere if we try to look for it
216:27 - we'll notice that
216:29 - it's probably from the static because
216:31 - all those type of stuff would will for
216:34 - sure be done with javascript so we
216:36 - should make sure we link all the
216:37 - javascript in here and we scroll here
216:39 - we'll see that this is just a plain
216:41 - linking without the static or the jungle
216:44 - static
216:45 - template so what we just need to do is
216:47 - to add static
216:53 - and also close it right here
216:56 - so once we have that on it's safe so
216:58 - let's wait for that to
217:00 - refresh and now that that has reloaded
217:04 - once we click on it boom what it just
217:06 - does down here you see it says one out
217:09 - of two so
217:10 - if we scroll it takes us to the next
217:12 - image if these are plus another one
217:14 - takes us to the next one now that's what
217:16 - is beautiful about this time
217:23 - so now the fixture we want to add now is
217:26 - the following and unfollowing feature
217:28 - right now we just have those button if
217:29 - we click on it nothing is going to
217:31 - happen
217:32 - what we want to do is that once we click
217:33 - on this follow we want the user that is
217:37 - currently logged in to be able to follow
217:39 - the user that is on this page
217:41 - so that is basically what we want now
217:45 - but first of all let's go ahead and go
217:48 - to the home
217:50 - and once we go to the home let's just
217:53 - log out
217:56 - so i want us to create a new account
218:00 - and let's create thumb
218:05 - on my g dot co
218:07 - let's give it a password
218:11 - and sign up
218:14 - so now that we have that
218:16 - and save that let's just
218:19 - give it this default profile image and
218:21 - say
218:22 - i am tom
218:24 - and i screw
218:27 - student
218:30 - and i can say is located
218:34 - let's say new york
218:38 - and let's just hit save now we can go
218:41 - home
218:42 - and basically we just still see the post
218:44 - of john you know we can like the post
218:47 - likes by one person
218:48 - and what we want to do now is to be able
218:50 - to go to john's profile
218:54 - so now we are in jump profile the reason
218:56 - why i did this is because we want to be
218:59 - able to
219:00 - follow john from another pro another
219:02 - account because we are logged in as john
219:04 - and we're viewing our own profile and
219:06 - later i was still going to change that
219:09 - if i am logged in i am i'm viewing my
219:11 - own profile i shouldn't even see this
219:14 - follow button like i can't follow myself
219:16 - that's impossible so i shouldn't see
219:18 - that i'm also going to add that at
219:20 - some time in this video but first of all
219:23 - since we have this now let's go ahead
219:25 - and coding so we're just going to come
219:27 - back to
219:28 - ps code
219:30 - first we want to do is to create a model
219:32 - for this followers account
219:35 - so again we'll say
219:38 - class
219:40 - and we just say followers
219:45 - count
219:48 - i'll say models dot model
219:52 - and this will just take two fields
219:54 - first one will be follower
219:58 - that's the person that is following
220:01 - that dot chart field
220:06 - max underscore length
220:08 - so what's going to go into this
220:11 - particular field is the username of the
220:14 - person that is following another user
220:16 - and user now is the person that is being
220:18 - followed
220:21 - character field
220:25 - marks on the score length
220:27 - was 100 so now let's
220:30 - just turn
220:33 - or show
220:36 - person that has been followed as the
220:37 - username of the person that has been
220:39 - followed
220:40 - the return
220:42 - of that user
220:44 - we can save this now and come into our
220:46 - command prompt
220:47 - we're just going to go ahead and opt out
220:49 - of this server first of all
220:51 - and we're going to run
220:54 - make migrations
220:55 - and then
220:56 - after making migrations we just want to
220:59 - migrate the database is
221:02 - python money dot py migrate
221:04 - that's done and let's just run our
221:06 - server again
221:07 - so as that is trying to run we're gonna
221:10 - come in here and we want to register
221:12 - these new followers account model
221:15 - we want to register it in our admin
221:18 - panel so we have to open admin dot py
221:21 - import that
221:24 - and register it
221:26 - like this so that's going to register it
221:28 - for us and now if we come right here
221:32 - and we go to home
221:34 - we should now see followers count so
221:36 - this is just going to store the
221:38 - data of everybody following each other
221:40 - who is following who
221:43 - is being followed
221:44 - that's going to store it and later on
221:46 - we're going to be able to use that to
221:47 - guess
221:48 - get the amount of people that is
221:49 - following a user and the amount of
221:51 - people that user is following
221:53 - so now that we have these we have this
221:55 - followers account
221:56 - let's now create a new url now this new
221:59 - url is gonna
222:01 - so let me come back here once you use
222:03 - that click on follow the request is
222:04 - gonna be sent to that url to you know
222:07 - create or update that particular
222:10 - followers object
222:11 - let's come back here now we're gonna
222:13 - create a new url on this url
222:17 - we can just make it
222:21 - we can make it follow
222:24 - so we can save views that follow name
222:27 - dot name cos follow and we can add a new
222:34 - view
222:35 - and say request
222:39 - and let's just pass first of all and
222:41 - then this we also need to be logged in
222:43 - before we can access
222:45 - following picture before we can follow a
222:47 - user
222:48 - now let's just save that
222:50 - so now that we have all of these what we
222:52 - just want to do
222:53 - is to come into our profile page
222:58 - then we're gonna just
223:00 - wrap this is already wrapped in a form
223:02 - and what we're just gonna do is to have
223:04 - some
223:05 - fields and use this follow like as a
223:07 - submit button to trigger that the
223:09 - trigger that requests to be sent to this
223:12 - photo url and then once we do that we're
223:14 - going to come here get all those values
223:15 - and then create an object
223:17 - let's come into profile and as you can
223:20 - see with the template already
223:22 - wraps this in the form
223:24 - and since this is enough form already
223:26 - what we can just do is to specify the
223:30 - method
223:31 - and the action so we can say action
223:33 - first of all that's where is this going
223:35 - to
223:36 - let's take you to dot follow
223:38 - slash follow and the method
223:42 - is post whenever using a post method
223:45 - make sure to add our csrf token
223:50 - so now that we have all of these what we
223:52 - just want to do is to come in here
223:55 - right here
223:57 - where we have this button
224:01 - let's just
224:03 - make that a part what we want to do now
224:06 - first of all we want to have
224:08 - an input field
224:10 - but the type of this field wants it to
224:12 - be hidden
224:14 - and want to give it like a value
224:22 - of user dot user name
224:26 - so what we're getting is a currently
224:27 - logged in user actually we can also do
224:30 - this on the you know on the back end on
224:32 - the views like
224:33 - when we trigger that button once we come
224:35 - here we can just get it currently logged
224:37 - in user you can do it anyhow you like
224:39 - this is just showing you know multiple
224:40 - ways you can do it or anyhow you feel is
224:42 - more secure
224:43 - or that you prefer to run your
224:44 - application or counsel do it like this
224:47 - might not be as secure as donated
224:48 - backing but this is also another method
224:51 - what we can just do now is to say name
224:55 - is equals to follower so this is the
224:58 - person that is following another user
225:01 - that's a currently logged in user that's
225:02 - the authenticated user i want to have
225:05 - another field also
225:07 - so the other field is also going to be
225:09 - hidden and this one is going to be user
225:12 - object dot username so this user object
225:16 - is
225:17 - this the user of this person who are
225:19 - viewing the profile we're viewing or
225:21 - just getting a username
225:23 - and then
225:24 - this one should be user so since we have
225:27 - those two inputs now
225:30 - right here this button we're going to
225:32 - make it
225:33 - submit button so we can just say type
225:35 - equals
225:37 - button
225:39 - so since this is already been made
225:42 - submit button
225:44 - we are basically good to go
225:46 - because this is ready
225:48 - a submit button that means
225:50 - what when we click this button it sends
225:53 - these two values
225:54 - to slash follow now you can go to slash
225:56 - follow and go collect all of these
225:58 - values
225:59 - so right here in follow
226:01 - first thing we're going to do is to say
226:03 - if request
226:05 - the
226:06 - method equals to
226:09 - post
226:12 - first of all let's pass
226:14 - then we can say else
226:17 - return
226:19 - redirect
226:24 - let's say
226:26 - to the home page so if is a post method
226:29 - we're going to do what we want to do why
226:31 - is there a post method and someone just
226:32 - trying to access slash follow without
226:34 - doing anything just redirect the person
226:36 - to the home page
226:37 - so now that we have that what we want to
226:40 - do now is to get the follower
226:42 - as the person being full not the person
226:45 - that is following someone else
226:47 - we can say request
226:49 - dot post
226:53 - follower
226:55 - now let's also say for the user
226:58 - and that's request the exposed user so
227:01 - since we have these details now
227:04 - let's first of all import
227:06 - that follower account
227:09 - model
227:10 - now that we have this model
227:13 - we can come in here and what we want to
227:15 - do we first of all want to check
227:18 - if this person is already following
227:21 - if the currently logging user is already
227:23 - following this user so the only way we
227:25 - can check is we're going to query the
227:27 - database and say
227:29 - does
227:30 - is there an object in which the follower
227:32 - is the currently logged in user and the
227:35 - user is the person that is being viewed
227:37 - so if there's an object like that that
227:39 - means that this user is already
227:41 - following that user and is trying to
227:43 - unfollow that user or if there's not an
227:45 - object like that that means the user
227:47 - wants to follow this
227:49 - to say if
227:51 - follower count
227:53 - dot objects
227:54 - dot filter
227:56 - now i don't want to get one object but i
227:58 - explained earlier in this tutorial why
227:59 - we are using dot filter
228:01 - but filter the one in which follower
228:04 - is equals to follower
228:07 - and then user
228:09 - is equals to user
228:12 - then
228:12 - dot first very important
228:16 - so if this exists
228:18 - we want to delete that so say delete
228:22 - follower
228:25 - now because of follower account
228:28 - dot object
228:30 - dot get this time around since you
228:33 - already know that exists
228:35 - equals follower
228:37 - and
228:38 - user
228:41 - is equals to user
228:42 - so we're just getting the specific
228:45 - object in which this is true
228:48 - and once we have that
228:50 - i'm just going to say
228:51 - delete your follower
228:54 - dot delete
228:58 - and now we can just return
229:01 - redirect
229:04 - back to the profile page of that
229:07 - specific user
229:10 - but this is only if the person already
229:13 - follows and is trying to unfollow but
229:15 - what if the person doesn't follow yet
229:17 - and is trying to really follow this user
229:20 - say else
229:21 - new follower
229:26 - equals to
229:28 - follow account.object.create
229:35 - the one in which follower is equals to
229:37 - follower
229:40 - and user
229:42 - equals to user
229:45 - now say new follower.save
229:49 - and we're just also gonna redirect back
229:52 - to
229:55 - the page of that user
229:57 - now
229:59 - let's see
230:05 - all this is working now it should be
230:07 - working now let's go ahead and test it
230:10 - we're gonna come
230:12 - in here
230:13 - let's first come to our
230:15 - modules and make sure that
230:18 - i confirm that there is no object here
230:21 - we hit the refresh button now
230:24 - and we say
230:26 - follow
230:28 - as you can see it brings us back to this
230:29 - page we don't get anything we don't even
230:32 - know that we followed we're gonna do
230:33 - that later and show the user that you
230:34 - really follow this user but we come back
230:37 - here and hit refresh
230:39 - you see a new object being created so as
230:42 - we can see a new object wasn't created
230:45 - from here let's see why
230:48 - okay it doesn't even give us an error
230:50 - here
230:51 - let's try to opt out of the server
230:56 - and run that again
230:59 - and everything
231:00 - seems to be working here so that should
231:02 - definitely work
231:04 - let's try to do that again
231:06 - let's first of all refresh this page i
231:08 - think that was the error we did we
231:09 - didn't refresh the page but anyways
231:12 - let's say follow so now it brings us
231:14 - back to this page come back here and hit
231:17 - refresh
231:19 - as we hit refresh it still
231:22 - doesn't update that so it doesn't create
231:25 - a new user or anything like that
231:27 - so now let's go back to our code and go
231:30 - see what's wrong
231:32 - so if we come back here
231:34 - we are saying
231:36 - if
231:37 - the request that object
231:40 - filter
231:42 - is there and we just want to delete that
231:45 - follower i'm doing that by followers
231:48 - count.objects.get
231:51 - follower follower yeah and then we're
231:53 - deleting the user right here and after
231:56 - that we're redirecting the user to the
231:59 - after doing that
232:01 - blower equals
232:03 - account
232:04 - create yeah
232:06 - and then we are saving this one this
232:09 - time around
232:10 - and then after doing that we are
232:12 - redirecting the apache
232:14 - page
232:15 - so this should totally work let's just
232:18 - make sure our
232:20 - url's
232:21 - specified correctly
232:23 - if we come here let's see
232:25 - from also works
232:27 - so the action is going to slash follow
232:32 - that works
232:33 - and
232:34 - another thing we should check using the
232:36 - csi of token
232:39 - we have this inputs
232:41 - so everything should be working fine
232:44 - let's just go ahead and try that again
232:46 - now let's hit refresh
232:50 - and just
232:52 - so if we hover over this
232:56 - we're gonna see if you look at the left
232:58 - bottom corner
233:00 - bottom left you're gonna see that it's
233:03 - as
233:04 - is linking to slash profile slash john
233:07 - we shouldn't be so there's like an a tag
233:10 - that is linking to that
233:12 - let's check that out if that's okay so
233:15 - we see that this is in an a tag and it's
233:19 - basically linking to
233:21 - this page so let's first of all clear
233:23 - that out we don't want that to link to
233:25 - anything we want it to submit
233:28 - but since we have that cleared out we
233:30 - can come here and refresh
233:32 - now we don't see that link at the bottom
233:34 - left corner now let's get this follow
233:39 - let's refresh the page
233:42 - okay ready for that to load
233:44 - and we hit follow
233:46 - so as we do this nothing happens so
233:49 - first of all let's see nothing happens
233:52 - so that means there's something
233:54 - wrong right here in our
233:56 - code
233:57 - and what is wrong we just need to check
234:00 - so
234:01 - we have an a tag
234:05 - we need this title just clearing our
234:08 - code
234:09 - and then in there we have this button
234:12 - this button we need type submit as a
234:14 - style
234:16 - and does the border also
234:21 - take so everything seems to be working
234:24 - and this button should
234:28 - let's see
234:30 - let's hit refresh again and let's try
234:33 - to click on the button
234:35 - so i think
234:37 - we just need to change this tag let's
234:39 - see if it's a p tag
234:44 - so that takes that away from there but
234:46 - let's click on this button now and see
234:49 - that still doesn't work
234:51 - we're just going to try to do
234:54 - to see if this is linear to any class
234:57 - let's take that back to an a tag
235:01 - data repo
235:03 - let's see
235:04 - let's hit refresh button
235:08 - and it follow
235:10 - so now that we don't have the data repo
235:12 - it just isn't working but what we can do
235:14 - now is just to take this out
235:17 - okay
235:19 - so i'm sure some of you may have noticed
235:21 - the error
235:22 - while i've been searching for it
235:24 - so there's nothing wrong with this data
235:27 - reported class basically what is wrong
235:30 - is the type is meant to be submit and
235:33 - not button
235:35 - let's just try that out again
235:38 - allowing this to load and
235:41 - yeah so now it brings us back to this
235:43 - page that means something must have
235:45 - worked let's go back in here and hit
235:47 - refresh
235:49 - good so now we can see that we have a
235:51 - new
235:52 - object polarized term under
235:58 - that is what we want to see
236:01 - now that we
236:03 - have this
236:04 - the next thing we want to do
236:06 - is to show the amount of users that this
236:11 - specific user has
236:13 - the amount of users this user
236:15 - have
236:16 - now to do that
236:18 - are going to have to
236:20 - come into the views of profile
236:25 - so we've taken care of a user following
236:27 - and unfollowing let's just test that one
236:29 - more time if we click on this follow
236:31 - button now
236:34 - and then we come in here and hit refresh
236:37 - that's gone
236:38 - now i said we want to get the amount of
236:40 - followers i'm following but before we
236:42 - even do that there's one thing that is
236:43 - important that we do
236:45 - what we want to do is that once the user
236:47 - has followed the user we want we don't
236:49 - want to show follow a game now we want
236:51 - to show unfollow so the user can know
236:53 - that
236:54 - okay this user is a user i'm following
236:56 - already so i want to follow this user
236:58 - now
236:59 - and another thing i want to do is that
237:02 - if
237:03 - this user is viewing his own profile we
237:06 - don't want him to even see the follow
237:08 - button what we want him to see is like a
237:11 - button that goes to his account settings
237:13 - for example so the user can go to
237:16 - now
237:17 - let's do that first of all let's make
237:19 - sure that if this user
237:21 - is himself
237:23 - he should not be seeing the
237:25 - the follow button
237:26 - so we're gonna come back in here
237:30 - what we're gonna do
237:32 - i'm gonna say come back right
237:36 - yeah so no not here index
237:40 - as profile
237:49 - if
237:54 - the user object.username
238:02 - so if the user object the username it's
238:04 - just equals to
238:07 - user dot username i'm zip is equal to
238:10 - the currently logged in user
238:12 - we don't want to show this
238:14 - so
238:16 - else
238:22 - we want to show this then let's end the
238:24 - if
238:29 - so we've entered the if tag
238:31 - and now
238:32 - what we want to do
238:34 - just to say
238:36 - instead of this button it's gonna be a
238:38 - button also what i'm gonna do is to
238:41 - copy this
238:42 - paste it here
238:43 - and it's not going to have a type
238:48 - button
238:49 - and this data is going to have weights
238:51 - linking to and that should be slash
238:53 - settings
238:56 - save that now if a communion is
238:58 - refreshed
238:59 - only seeing this follow button because
239:00 - we are viewing the profile page of
239:02 - another user but we logged in as tom
239:05 - and i review tom
239:08 - actually this
239:09 - should be
239:11 - account settings okay now the reason why
239:14 - that is not account settings because we
239:15 - didn't change that here
239:17 - let's say account
239:19 - settings
239:22 - and we hit refresh
239:24 - what we see now is account settings and
239:26 - if we click on that
239:28 - it should take us to the page where we
239:30 - can
239:33 - let's see
239:35 - if we overall what
239:38 - it just brings us back to this page
239:40 - let's make sure that it's working well
239:42 - if we look at the bottom left corner we
239:44 - see that it's supposed to link to
239:45 - account settings
239:47 - so
239:48 - yeah if we come back here now
239:51 - what we can just do
239:53 - is to basically make sure
239:55 - all right
239:57 - so we don't need
240:00 - this
240:03 - gonna come
240:05 - here
240:07 - not for you it's for the account
240:10 - settings
240:14 - you don't need a button
240:18 - you just need the a tag
240:21 - now that we have this we can hit refresh
240:25 - and once we click on account settings it
240:27 - take us
240:28 - to the settings page for this user now
240:31 - we can go back to wherever we were and
240:33 - we can view the profile page of
240:37 - john
240:38 - good so this is what we want to see so
240:40 - the next thing we want to see
240:43 - is to be able to
240:46 - change this to like
240:48 - unfollow when we are following the user
240:51 - so let's come back here first of all
240:52 - because this has been altered
240:56 - so let's save this and see if that
240:58 - affects
241:00 - this button
241:02 - that doesn't
241:04 - go back
241:06 - gonna
241:08 - redo
241:09 - okay so let's see
241:20 - let's just save that first of all come
241:23 - back here and hit refresh
241:25 - this is the button for this
241:27 - and then if we remove the button for
241:29 - account settings let's see
241:39 - refresh
241:42 - so that doesn't alter it when we go to
241:44 - tom
241:46 - that's our terms on looks
241:49 - and if we come back here good so we have
241:52 - that settled and what we want to do as i
241:54 - said is to change this from follow when
241:56 - we are following that specific user
241:59 - for us to do this we need to come into
242:03 - view
242:05 - so now
242:07 - in this view we don't need follow view
242:09 - again what we need is this profile view
242:12 - and one thing we want to get
242:15 - is
242:17 - follower
242:21 - equals to
242:23 - request
242:24 - dot user dot username that is the person
242:27 - that is following
242:30 - and user
242:32 - is equals to
242:34 - bk
242:35 - so now that we have these two what we
242:37 - can just say is
242:40 - if
242:42 - follower
242:44 - account
242:45 - dot objects
242:48 - dot filter
242:52 - follower
242:54 - equals to follower
242:57 - and user
242:59 - goes to user
243:02 - but first
243:04 - so if this
243:05 - is actually in our database
243:08 - then that means the user is already
243:10 - following this user that is viewing so
243:12 - let's say button
243:14 - text we're just having a new variable
243:16 - and then we want it to be on follow
243:21 - else
243:25 - one button text
243:27 - equals to follow
243:30 - so now we want to pass button text
243:34 - part of the context
243:39 - so what we just did there was we checked
243:40 - if
243:41 - there's an object which are those fields
243:44 - and if there is damage the user already
243:46 - following that user so we want to
243:48 - unfollow
243:49 - if not
243:50 - should follow
243:51 - so now that we have this we can save it
243:54 - coming to profile
243:56 - what we want to do now
243:58 - is right here where we have follow we
244:01 - want to remove that now and put
244:05 - butting text so this button text now is
244:07 - dynamic is it ah
244:08 - it
244:09 - changes the text
244:11 - to whatever is basically in our database
244:14 - adjust
244:16 - if we come back here and hit refresh
244:22 - and we hit follow now
244:24 - see now it changes to unfollow because
244:25 - we're following this user the refreshes
244:27 - page are still there
244:31 - so
244:32 - let's refresh
244:35 - and follow so now we can follow
244:38 - so that is basically working now
244:41 - and the next thing we want to do is to
244:44 - have
244:45 - followers count right here
244:48 - so another thing to do now is just to
244:51 - come into
244:53 - views
244:56 - right here
244:58 - i'm gonna say user
245:01 - follow us
245:03 - will be equals to
245:06 - follow us
245:08 - counts.object
245:12 - dot filter
245:15 - one in which user is equals to pk
245:18 - what we're doing is that we are getting
245:20 - his full last count model and we're
245:22 - filtering only the one in which the user
245:25 - now this user is the person that has
245:27 - been followed so i think the one in
245:29 - which the user is gross to pk and pk is
245:32 - the username of this user that we are
245:34 - viewing so all the times that this user
245:37 - is being followed is what we want to get
245:39 - and what we just want to do is to
245:41 - calculate the length of that
245:45 - so now that is an integer which
245:47 - calculates the length
245:49 - and we want to do exactly the same thing
245:51 - for the following
245:53 - um
245:56 - back
245:57 - come back to views
245:59 - you want to do exactly the same thing
246:01 - and change this to user
246:04 - following
246:06 - and now
246:08 - blue scans dot object or filter the one
246:11 - in which the follower
246:13 - equals to pk
246:14 - now we have all of these let's also pass
246:16 - it in this context
246:23 - and the user following
246:30 - so now we have all of this in this
246:31 - context dictionary we now come into
246:36 - this place into the profile.html page
246:40 - where we have all these followers and
246:42 - following what we can just do now these
246:44 - followers we can change it to
246:47 - user followers
246:49 - and this following
246:52 - you can change it to user following
246:55 - now let's go back and hit refresh and
246:57 - see what's up
246:58 - so it says zero follower zero following
247:01 - but if i follow this user now
247:04 - what so it gives us an error of unbound
247:07 - error at profile john blah blah blah
247:10 - it doesn't work
247:11 - what we just want to do
247:14 - i'm in here but we need to make sure
247:17 - that everything's coming from so it's
247:18 - coming from user followers
247:22 - right here so it says assigned before
247:24 - use
247:25 - what we can just do
247:28 - back to views
247:32 - okay so it's because all of these we put
247:34 - it inside the else
247:37 - indentation so inside the else block
247:39 - that's why if we have anything the else
247:42 - block we're supposed to have it in the
247:43 - if block but we don't even want it in
247:45 - there so
247:46 - we just want it on its own but now that
247:48 - should work and let's just hit refresh
247:51 - now it has one follower i unfollow
247:55 - followers back
247:57 - yeah so that is working another thing we
248:00 - want to change is this follower so it is
248:03 - zero follower it shouldn't have an s so
248:05 - let's just quickly
248:07 - fix that the way we've been doing it
248:09 - with the other ones
248:11 - so what we just want to do
248:13 - is to come up here
248:18 - in the profile
248:22 - and we're gonna go to where we have this
248:24 - followers
248:26 - i just disagree from
248:28 - these are following
248:30 - so now we're going to say
248:34 - if follow us
248:38 - if user followers
248:45 - is equal to zero
248:48 - or
248:49 - user followers
248:56 - is equals
248:58 - to one
249:01 - and if is equal to zero one we just say
249:03 - follower so zero follower or one
249:05 - follower
249:06 - else
249:08 - let's copy paste this
249:11 - and right here we will say
249:14 - else
249:18 - want to add an s
249:20 - and then we just
249:24 - end the if tag
249:26 - now we have this we come here and hit
249:30 - refresh now we see one follower we
249:33 - unfollow
249:34 - this is zero follower so this is working
249:37 - now let me follow this user
249:40 - so that means
249:41 - this user has one follower so that means
249:43 - i am following one person if i come to
249:46 - my accounts now i see that my following
249:49 - is one i am following one person
249:51 - so that is
249:54 - basically what we
249:56 - have achieved this profile
249:59 - per section so
250:02 - so far we've been able to get the
250:03 - profile image basically get all the
250:05 - details of the user and we'll be able to
250:07 - implement the following following
250:10 - we made this the text in your dynamics
250:13 - so user is following already that should
250:15 - be unfollow but if the user is not
250:17 - following that should be
250:19 - now let's move to the next section
250:27 - so at this point now we are able to see
250:30 - a profile
250:31 - a user's profile we're able to follow
250:33 - that user you know we'll see the amount
250:34 - of followers the user have amount of
250:36 - posts we're able to see all the posts
250:38 - and all this good stuff
250:40 - but in the beginning of this tutorial
250:43 - when we come to home
250:45 - we are just able to see the list of all
250:48 - the posts we have in on this platform
250:50 - that's all the posts we have in our
250:51 - database that's what is shown we're not
250:54 - customizing this feed for a user and
250:57 - that is bad because we want a user to be
250:59 - able to see
251:01 - the posts of the people is following not
251:04 - just anybody's post so right now it's
251:06 - just showing all the opals we have on
251:08 - the platform which doesn't really make
251:10 - sense
251:11 - what we want to do now is to be able to
251:13 - customize this
251:15 - to
251:16 - be able to show only the posts that the
251:20 - user is
251:21 - the post of the people that the user is
251:23 - following basically so that's what we
251:25 - want to do
251:26 - right now
251:27 - so let's
251:29 - click on this so the first thing we want
251:31 - to do let's make sure that once we click
251:34 - on this
251:35 - and right here it takes us to the
251:37 - profile page of the user
251:40 - so we're going to come into index
251:43 - and we'll say
251:45 - user
251:47 - post.user
251:49 - right here it should take us to slash
251:54 - profile
251:56 - slash
251:58 - close the user so we can just copy that
252:04 - we can just search for
252:06 - the other post.user
252:10 - we write here
252:14 - i will
252:16 - refresh this
252:18 - to be able to go to the
252:20 - that's good and we are following this
252:21 - user so now let's just go back to the
252:24 - home page
252:25 - and right now i'm going to come into the
252:28 - views of this index and we actually need
252:30 - to do a little bit of tweaking in here
252:33 - what we're going to do first of all
252:35 - let's assign like two
252:38 - empty lists first of all we'll see
252:41 - these are following
252:43 - list
252:45 - so this is the list
252:47 - this will contain all the users that
252:50 - the logged in user is following
252:53 - and let's just say feed
252:54 - so this feed is also a list where to
252:57 - contain like the list we're gonna con
253:00 - we're gonna first
253:01 - query the database to get
253:04 - only the
253:05 - post of the persons that the user is
253:08 - following and then that's gonna give us
253:10 - in like a query set but we're not going
253:12 - to have to convert that into a list so
253:15 - the first thing we want to do is to say
253:18 - user following
253:23 - equals to
253:25 - account
253:27 - dot object
253:29 - dot filter by just getting all the users
253:32 - the objects of
253:33 - all the users that the user is following
253:36 - the one in which the follower
253:38 - equals to request
253:40 - dot user
253:42 - dot username
253:44 - so that's the user following and with
253:46 - the follow passive for users
253:50 - in user following
253:54 - what we just want to do
253:56 - is to say
253:57 - user
253:59 - following list want to append
254:03 - the user name of each of everybody the
254:06 - user is following so we say user
254:08 - following does append
254:11 - users
254:12 - does user
254:15 - and that is good so now we want to
254:18 - append to the feed list so say user
254:21 - names
254:24 - in the user following list that we have
254:27 - now
254:29 - the feed lists
254:33 - should be equals to
254:37 - post.object
254:41 - dot filter
254:44 - the one in which the user is equals to
254:46 - the names
254:53 - and let's just say feed dot append and i
254:56 - want to append
254:58 - this feed
255:00 - this feed list
255:02 - now that we have that this is like a
255:04 - query set now i want to convert that to
255:07 - a list so we can look through it in the
255:09 - template
255:10 - what we're going to do now is to say
255:13 - feed
255:16 - list it's without an s now because this
255:19 - is a new variable on its own
255:21 - it'll be equals to
255:23 - now we're going to use
255:26 - a function that we need to import so
255:28 - we're going to say
255:30 - from
255:33 - there tools
255:35 - or
255:36 - chain
255:38 - so chain is going to be able to convert
255:40 - it to a list for us
255:42 - now we can just use this you know when
255:44 - we have
255:46 - speed
255:48 - because what we want to do right now is
255:49 - now convert this fee to a list
255:52 - you know we can do something like list
255:53 - then in there we have feed but we can't
255:55 - just do that here so what we want to do
255:58 - is to say
256:01 - lists
256:04 - chain
256:06 - and in there we have
256:07 - an aesthetic mark and we say feed
256:11 - so now that we have this we can just
256:13 - pass it
256:14 - into the html
256:17 - right here instead of sending posts now
256:20 - or we can just send
256:23 - bid list
256:25 - now if i come here and hit refresh
256:28 - we make sure
256:30 - our server is running
256:32 - so that
256:34 - that's done
256:35 - and let me come here and hit refresh
256:38 - and let's see what we see
256:41 - we still see this and the reason why we
256:43 - see this is because this user is
256:44 - following john
256:46 - so what we're going to do now first of
256:48 - all a storm
256:50 - let me choose a file
256:53 - i want to upload an image as tom
256:57 - and what i'm just gonna do
256:59 - is put an image put in a caption i'm
257:02 - gonna log out and log in as john and i'm
257:05 - gonna follow tom
257:06 - then what you're gonna see is that i
257:08 - don't see the images of
257:12 - john
257:13 - which is myself image i see now is of
257:16 - tom
257:26 - so
257:27 - as i upload this now you're going to see
257:30 - that it doesn't show yet it doesn't
257:32 - appear yet because i don't want to see
257:33 - my image i can just easily go to my
257:35 - profile but i'm going to log out now and
257:37 - login as john
257:40 - now that i login as john
257:44 - and i it's login you see i can't see
257:46 - anybody profile image right here it's
257:48 - just blank because i'm not following
257:50 - anybody but now if i go to slash profile
257:54 - slash tom
257:57 - you can see tom has one post if i follow
258:00 - tom now
258:01 - i go to um you now see that i'm able to
258:04 - see the posts of tom
258:06 - so this is a very good picture let's
258:09 - just log out and log in back as tom
258:15 - so now john i go in there
258:19 - i unfollow
258:21 - come back home
258:23 - i can't see any post because i'm not
258:25 - following anybody once i follow john
258:28 - i go back home i see john's post this is
258:32 - what i want
258:38 - right now want to have a unique picture
258:41 - which is going to be
258:42 - a downloading feature this means that a
258:45 - user is going to be able to download
258:47 - the image you see is on someone's post
258:49 - like this is image and he loves it this
258:53 - button here once you click on it you
258:55 - should be able to download that image so
258:57 - right now the button doesn't do anything
258:59 - but let's go ahead and add that feature
259:02 - come back to vs code right now
259:04 - and we go to index so this is actually
259:06 - very simple and fast
259:08 - what we're just going to do is to look
259:10 - for where we have that button
259:11 - so we have it
259:13 - wrote down
259:16 - no is inside the for loop so
259:19 - that's how we know
259:21 - and this is the caption
259:24 - we have
259:25 - as a caption
259:29 - caption is down below so it should be
259:31 - before it so
259:34 - right
259:40 - what we're just gonna do now is touch
259:43 - and search for where we have svg image
259:50 - it's
259:52 - this is for the like
259:56 - and right here is for the download what
259:59 - we just want to do is to have this
260:02 - go to
260:03 - this post
260:05 - dot image
260:08 - dot
260:10 - url well we don't just want it to go
260:13 - there because right now if i save this
260:14 - and hit refresh if i try to click on
260:16 - this what it's just gonna do it's gonna
260:18 - take me to that url i want you to
260:20 - download that url for me without even
260:22 - going away from this page very easy with
260:25 - html we can just add download right here
260:28 - and we leave it blank so that is just
260:30 - going to do that first
260:32 - come here and hit refresh
260:34 - now if we click on this
260:37 - you're gonna see that it's gonna
260:38 - download that image from
260:41 - so as you can see at the top right
260:43 - corner right here
260:44 - something is about to start downloading
260:47 - so as you can see
260:48 - that has been downloaded i can open that
260:51 - file here just gonna open that in a new
260:54 - tab and that is downloaded so that's
260:57 - just the feature i wanted to add thought
260:58 - it was cool and let's move on with the
261:00 - project
261:06 - now we want to add to our website is the
261:09 - search functionality let's just go ahead
261:11 - and refresh this page so now if we
261:14 - want to be able to search for something
261:17 - and it's enter press the search button
261:21 - and then
261:22 - it should bring
261:23 - uh
261:24 - results corresponding to whatever the
261:27 - user searched
261:28 - so let's go ahead and do that first of
261:30 - all as we can see once the user input
261:32 - something we don't even have a button
261:34 - where the user can click search let's
261:36 - fix that first of all in the ui
261:39 - we're gonna come in here now
261:42 - and before we do that i just want to say
261:45 - that i brought in the search.html
261:48 - from
261:49 - the my template so
261:51 - if you have been watching from the
261:53 - beginning you know that there was no
261:54 - search.html yet i just brought it from
261:56 - my template but you don't need to worry
261:58 - about that all these files are going to
262:00 - be in the github link so
262:03 - don't worry about that
262:05 - now what we need to do is to come into
262:07 - index.html
262:10 - and right here actually where we have a
262:13 - diana we want to have a form
262:17 - and then we're just gonna close the form
262:23 - so we should be able to
262:26 - have a form here
262:30 - before left side yeah i close the form
262:33 - somewhere around
262:35 - scroll down
262:37 - here right here
262:44 - now that we have that done next thing we
262:46 - want to do is to come into the field so
262:49 - if we scroll
262:51 - right here see that we have this type of
262:54 - text we want to give it a name
263:00 - username
263:03 - and since we're giving it a name now
263:05 - next thing we just want to do is to
263:08 - first of all
263:10 - remove
263:11 - this particular search that is beside it
263:14 - we don't want to search there or want to
263:16 - have this dash after it so this should
263:18 - be like in a box and like a search
263:20 - button after it let's go ahead and do
263:23 - that
263:26 - right here we do not need this we don't
263:28 - need any of this
263:32 - and what we can just do
263:34 - is to say
263:36 - button
263:40 - type
263:41 - goes
263:42 - submit
263:47 - and we can close that button
263:52 - and now we want to use an icon here so
263:55 - first of all let's
263:56 - comment out this d we don't want this to
263:59 - be in this div tag just so it won't
264:02 - affect this i want you to be like
264:04 - outside that box of this editor because
264:06 - it was in that div tag the changes i'm
264:08 - making is not going to work i'm also
264:10 - going to show you that
264:11 - so now what we just want to do is to
264:13 - come into that search.html that i
264:15 - imported
264:16 - and right here we want to copy this
264:19 - so what this is is it's basically just
264:22 - the same thing once i run the search at
264:24 - html you see that it's very the header
264:27 - right here is very similar to the other
264:29 - of the index.html but indeed the
264:31 - search.html already has like its own
264:34 - form tweaked
264:35 - so
264:36 - that's why we can come in here and just
264:39 - copy what we need
264:42 - and paste it right here one more thing
264:45 - we need since we're using that icon we
264:47 - need to import it
264:50 - so i'm just gonna link css
264:54 - just scroll up
264:57 - and right here
265:00 - paste
265:02 - so now that that is done
265:05 - if we come here and hit refresh
265:07 - we should see that we can search for
265:09 - something i'm kind of here to sub
265:12 - if i come in here now
265:14 - and as i said if i don't remove this
265:16 - from this
265:18 - give tag
265:20 - and i hit refresh
265:22 - now you see it's just not looking well
265:25 - that's why
265:26 - i remove that from the deep line
265:28 - having that said let's also leave a
265:30 - space right here
265:34 - let's have and
265:36 - nbsp
265:39 - hold on
265:42 - copy that paste let's have two of it
265:45 - once we hit refresh now we have a good
265:47 - space beside it so that is good now we
265:50 - just have this name of username and this
265:52 - submit what we want to do in this form
265:54 - we want it to go to
265:56 - the action url no the search url
266:00 - want the action to go to the search
266:06 - flash search run this action to go to
266:08 - slash search
266:10 - and with a method of post
266:17 - and once we're using the post method we
266:18 - need to add a csrf token
266:25 - so now we know that there is no url
266:28 - named search so we need to go ahead and
266:30 - create that
266:31 - so let's just copy paste
266:39 - and say search
266:46 - i'm gonna come in here
266:49 - and create a new
266:50 - view
266:53 - search
266:59 - turn
267:00 - render
267:02 - request
267:06 - search
267:07 - dot html
267:09 - we can save that let's also give it
267:13 - this login required
267:19 - save that also
267:20 - now let's make sure that our app will
267:22 - successfully once it reloads
267:24 - successfully test it out
267:27 - i'm back in here now
267:29 - hit refresh if i search for j.o
267:32 - my search it takes me to this
267:34 - slide search page and i just want to
267:36 - search that html as you can see it's not
267:39 - really showing a result now just
267:41 - showing this dummy data this static data
267:44 - that we put in the search.html
267:47 - but now what i want to do is that it
267:49 - will show a result that is correlating
267:51 - to whatever the user search
267:54 - now first to do this we're going to have
267:56 - to come into this view.py we're going to
267:59 - have to get
268:02 - the
268:02 - username that the user sends it by
268:05 - whatever user input we need to get it
268:07 - here to save request
268:10 - a method
268:12 - equals to post
268:15 - there is a post method say request
268:18 - that's post
268:21 - username
268:23 - that should be
268:26 - username so we basically just got the
268:28 - username
268:30 - and then what we want to do next is to
268:33 - filter the data
268:34 - so when we filter the data to only
268:39 - any username that contains what the user
268:41 - says just send it back
268:43 - that page
268:44 - what we want to do now
268:46 - okay
268:49 - we're gonna get
268:51 - a
268:52 - user object so this is just because
268:57 - right here
268:58 - we can see it is welcome tom which is
269:00 - good but right here it doesn't show the
269:02 - profile so if we go back
269:04 - to the home page it shows the profile of
269:06 - the user we also wanted to show the
269:08 - profile we are just gonna
269:10 - say
269:12 - user object
269:16 - equals to
269:18 - user
269:20 - dot objects
269:23 - dot get
269:25 - the one in which the user name
269:27 - is equals to request
269:31 - that's user
269:32 - that's username
269:34 - and this doesn't really correlate with
269:36 - the search form but we just want to take
269:37 - care of that now
269:38 - and since we have that user object what
269:40 - we just want to get is the user profile
269:45 - it goes to profile
269:47 - dot object
269:50 - dot get
269:53 - one in which the user
269:55 - equals to user
269:58 - object
270:00 - and if i pass this
270:05 - to the html
270:07 - so
270:08 - right here
270:15 - valley what i want to pass is
270:18 - use our profile not use object
270:22 - i come back here now and
270:24 - refresh
270:29 - now you see that i chose to update that
270:32 - so that is taken care of now back to
270:34 - searching so if we the method is equal
270:37 - to post get the username and then we get
270:41 - the
270:42 - jose user
270:45 - name
270:47 - object
270:49 - and that will be user
270:51 - dot objects
270:54 - the filter
270:57 - one name with the username
270:59 - i'm just going to i contains
271:05 - equals username
271:06 - what this is doing is that by getting a
271:08 - list of all the objects
271:10 - in which
271:12 - whatever the user search is contained in
271:14 - the username so if the user search for
271:16 - if there is a if they are if the user
271:19 - search for tom then what it's going to
271:21 - do is that it's going to go into our
271:22 - database look for any user in which tom
271:25 - is in the username and it's going to
271:27 - return that
271:28 - into this variable
271:30 - now that we have that
271:32 - let's first specify to
271:34 - empty list so say user name on scope
271:37 - profile
271:39 - we have the object let's get the profile
271:42 - the username underscore profile
271:44 - underscore list now remember that
271:47 - we have to convert it to a list let's
271:49 - just
271:50 - have that also as a blank
271:53 - list
271:54 - now save for users
271:57 - in username object
272:05 - user
272:06 - name profile
272:13 - it will stay
272:15 - here right here designing profile append
272:20 - what we want to append is
272:24 - so what we're doing is
272:26 - for users in username objects we'll say
272:28 - username profile what's append each of
272:30 - this user
272:32 - does
272:33 - that id so i want to get this one using
272:35 - the idd seminar
272:37 - so now i want to say append users.id now
272:40 - that we have their id we say for
272:44 - ids in
272:46 - name
272:48 - profile that's each of the id that we
272:50 - get we now say profile list
272:55 - it because of profile
272:57 - dot object
273:00 - dot filter
273:02 - the one in which the id user
273:05 - equals to ids so the one in which the id
273:08 - user if we come into our models
273:11 - we go to
273:13 - profile see how we have a few name id
273:15 - user which is the
273:17 - id of the specific user which
273:20 - which has been
273:22 - talked about or used right here
273:24 - right here we have id
273:27 - user equal to ids now say user
273:30 - name
273:31 - underscore profile
273:33 - underscore list
273:36 - append
273:37 - now we just want to append profile
273:40 - lists
273:41 - to it
273:44 - and now that we have that
273:46 - we can just say
273:48 - username
273:50 - profile
273:52 - list
273:54 - so now we just want to update that with
273:56 - itself but this time i'll convert it so
273:59 - we'll say list
274:02 - chain
274:04 - then
274:05 - aesthetic
274:08 - a steric of the username profile disk
274:15 - you should be profile
274:17 - the stereotype of the username profile
274:18 - is
274:21 - like this
274:22 - but now that we have this what we can
274:24 - just do is take it
274:30 - into
274:35 - like this we are taking it into
274:37 - search.html
274:38 - we are taking it as username profile
274:40 - list so if we have that we can just
274:43 - simply come here into search.html now
274:46 - we're gonna scroll down i'm gonna loop
274:48 - through that database what i'm gonna do
274:51 - is i'm gonna scroll down
274:53 - and when we scroll down
274:55 - actually
274:57 - it's in a section
275:00 - right here
275:01 - so we're gonna say four
275:09 - let's say user
275:12 - does in username profile list
275:15 - let's end the for loop immediately after
275:18 - that session is closed
275:21 - so end for
275:23 - now that we end our for loop we can now
275:26 - use this to customize it so what we want
275:28 - to do now is to get the profile image so
275:31 - we'll say
275:33 - users
275:39 - that's profile
275:41 - img.url
275:44 - and then
275:46 - once you get the username
275:49 - the users
275:52 - get the username dot
275:56 - name
275:58 - they've come into profile
276:02 - there was actually
276:03 - if we come into these models
276:05 - we have to say user dot user
276:10 - on it what we can just do right now is
276:12 - to say users.user
276:16 - and after that we're going to do the
276:18 - same thing for location
276:20 - the users
276:22 - the location
276:25 - and we do exactly the same thing for the
276:27 - bio
276:31 - good now what we want to do is that once
276:34 - a user clicks on any of these you take
276:36 - the user to the profile page of that
276:38 - user
276:41 - so now we say slash profile
276:46 - flash
276:52 - user
276:54 - does user
276:56 - and let's also do the same thing right
276:59 - here
277:03 - good
277:04 - so now we have this done let's now come
277:07 - back here
277:09 - let's go to the home page
277:11 - right here now let's search for j o h
277:14 - once we search for that
277:16 - so it says i contain
277:18 - a chaff with adrenal permitted so
277:21 - if we come in here
277:23 - it should be i contains with an s
277:27 - just close that now
277:30 - let's try that again
277:34 - now let's say j o h
277:36 - boom so as you can see now it says john
277:39 - toronto i am john so he just shows us
277:42 - the value the profile image
277:44 - good and we can go to the profile of
277:46 - that person
277:48 - now let's search for like
277:51 - term
277:52 - now you can see we have some it gives us
277:54 - the profile image the location and the
277:56 - bio
277:57 - and go to the profile of that user so
278:00 - this is basically what we have
278:02 - and this is how to you know build a very
278:05 - simple search
278:06 - picture so we can search for john and
278:09 - now it just shows us that we have one
278:11 - user named john
278:13 - this is what we want to do
278:21 - now
278:22 - last picture we want to add
278:24 - is the suggestions feature
278:27 - so
278:28 - this
278:29 - right here has been with us as the
278:31 - beginning of this project
278:32 - and what i want to do here is just to
278:35 - say users you can follow and it's going
278:37 - to recommend users that
278:39 - you are not already following and
278:42 - users that is not you so it's just a
278:44 - very simple algorithm we're going to use
278:46 - anybody that are not following it can
278:48 - recommend it and as long as that person
278:50 - is not you which is a login user it can
278:53 - also recommend it and if you do that at
278:55 - random so just randomly going to pick
278:58 - different people for you to recommend
279:00 - let's just go ahead and do that
279:02 - so we're going to come into vs code now
279:06 - and what we want to do is to open up
279:08 - this index
279:10 - so we don't even need this post again
279:12 - right here
279:14 - let's just come here let me give it like
279:16 - a comment and say
279:19 - user
279:20 - suggestion
279:24 - stats
279:27 - now first of all
279:29 - i want to get all the users in this
279:32 - platform on this platform
279:35 - i'll say user.object
279:38 - dot all
279:42 - and
279:44 - i'll have
279:46 - the following
279:48 - all
279:49 - so this is just an empty list
279:51 - but what this is going to be
279:53 - is
279:55 - all the people that the user is already
279:57 - following that's what i want to do so
279:59 - i'll say for
280:01 - user
280:03 - in
280:04 - user following
280:08 - remember that we already have this year
280:11 - right here so i'll say for user in user
280:14 - following
280:15 - user
280:16 - underscore
280:18 - list
280:20 - equals to
280:21 - user
280:23 - dot object
280:26 - dot get
280:27 - the one in which user name equals to
280:30 - this user
280:32 - dot user
280:34 - now we can ask the user
280:36 - following
280:37 - let's go following
280:40 - underscore all dot append
280:45 - user list
280:50 - so now that we have this what we can
280:52 - just do now is to say
280:54 - new suggestion list what we want to
280:56 - suggest now is the people that
280:59 - this user is not already following the
281:01 - new suggestions
281:03 - on the skull list
281:05 - equals two
281:07 - now this is gonna be in at least but in
281:10 - here we're to have like a for loop so
281:12 - it's like a specific style you see x4
281:17 - x
281:18 - in
281:20 - list
281:22 - all users
281:25 - we're just converting this all users
281:26 - query set into a list
281:29 - so
281:30 - and then we'll say
281:32 - if
281:36 - x not
281:38 - in list
281:41 - so you might already understand where
281:43 - we're going with this
281:46 - following so this is just the user
281:48 - following all
281:53 - just open and close this
281:56 - so you might already guess where we what
281:58 - this is so this is the suggestion list
282:00 - so it's looping through the list of all
282:03 - the users and saying
282:05 - if
282:06 - this list
282:07 - is not in this list and that is the new
282:10 - list so it's just getting all the lists
282:12 - of the users we are following
282:14 - and removing it from audio users on the
282:16 - platform
282:17 - so now that we have that
282:19 - the next thing we want to do is to
282:21 - remove
282:23 - the current user from this list because
282:25 - what we have now
282:26 - in this new suggestion list is audio
282:30 - users on the platform that we are not
282:31 - following and as you know we can follow
282:34 - ourselves that means we're also part of
282:35 - the suggestion list and we can suggest
282:37 - ourselves to ourselves can suggest a
282:40 - user to himself
282:41 - so what we just need to do
282:43 - is to make sure that we remove
282:46 - the current user from that list
282:49 - so we say current
282:52 - underscore user
282:54 - will be equals to user
282:56 - dot object
282:59 - dot filter
283:02 - username
283:04 - was request
283:06 - dot user but
283:08 - username
283:11 - and now let's have like
283:14 - a list but like for the final suggestion
283:17 - so let me see let's name it final
283:20 - underscore suggestions
283:22 - underscore list
283:24 - now should be equal to x
283:27 - for
283:28 - x
283:29 - in list but now
283:31 - in
283:32 - new suggestions list
283:35 - that is not
283:38 - current user and we just say
283:42 - if
283:44 - x naught
283:46 - in list
283:49 - and what we just say is current user
283:55 - current underscore user so we're just
283:57 - saying that he this current user must
284:01 - not be
284:02 - in that list so he's basically
284:04 - eliminating current user from that list
284:06 - and then what we can just do
284:09 - to make sure that all of these
284:12 - in
284:13 - square brackets
284:14 - that is a list
284:16 - so unscrew brackets as close right there
284:20 - but now that we have this
284:22 - what we can just do
284:24 - since we have this final suggestion is
284:27 - now this is just a list of everybody
284:30 - that we are not following
284:31 - and
284:33 - that is not us
284:34 - so now we just have that unique list
284:37 - but now if we pass it to the front end
284:40 - or to the template and we say we just
284:42 - get like let's see
284:46 - yeah want to get like five
284:49 - so if we just get like the first five or
284:50 - something that means that's the same
284:52 - thing that's just gonna show only those
284:54 - people are gonna be suggested but what
284:55 - we want to do is to shuffle that list
284:57 - that we already have and make it random
285:00 - so like once we even refresh this page a
285:02 - new random random list of suggestions
285:05 - comes up
285:06 - so to do that first of all i have to
285:08 - import random from here
285:14 - to say import random
285:19 - and then right here now
285:22 - after this what we can just say
285:25 - is to say random
285:27 - dot shuffle
285:33 - is final suggestion only so i want to
285:35 - shuffle this final suggestion list and
285:38 - what's in shuffle
285:39 - what we want to get is
285:42 - the final like just five from that list
285:44 - right from that short foot list
285:46 - but since
285:48 - before we
285:49 - get that we don't want to get that now
285:52 - we can what we can actually do since we
285:54 - already have this list we can you know
285:57 - pass that list into the html but before
286:00 - we pass that list
286:02 - what we want to get is the profile
286:04 - object of each of this list because
286:06 - right now
286:07 - from here
286:09 - what we have is the user object so we
286:11 - need to get the profile object so we can
286:12 - return the profile picture the username
286:14 - and maybe the location of the bio or
286:16 - something so that's the main thing we
286:18 - need to get this is just a step from
286:21 - getting that
286:22 - so let's go ahead and say
286:27 - user
286:29 - name on the scope profile
286:32 - equals to
286:35 - empty then username let's go profile
286:38 - let's go list
286:40 - be empty also
286:42 - and we just do
286:44 - similar technique to what we did in the
286:45 - search so the users in final
286:50 - questions list
286:51 - each of the user
286:56 - they will say username profile
286:59 - but append users.id
287:05 - dot id
287:07 - now that we have that
287:09 - i cannot say for
287:11 - ids in
287:14 - username underscore profile
287:19 - we'll say profile
287:21 - on the sql list
287:24 - equals to profile
287:28 - dot object
287:30 - dot filter
287:33 - id underscore user
287:40 - equals to ids
287:43 - now that we have that we can see user
287:46 - name
287:47 - underscore profile dot underscore list
287:51 - underscore list
287:53 - let's append
287:57 - profile underscore
288:01 - so now we have this what we can just say
288:04 - is
288:05 - let's have a new
288:07 - list and say suggestions
288:12 - underscore user name
288:15 - underscore profile
288:16 - underscore list
288:19 - so the suggestions the username profile
288:21 - list
288:23 - goes to list
288:26 - okay
288:29 - we have to use the aesthetic
288:31 - line here
288:32 - the username profile list
288:37 - that is what we need to do now that we
288:40 - have these
288:41 - we can just pass that
288:43 - into
288:45 - if i come here now
288:47 - copy this this this is the final list is
288:49 - being shuffled and everything
288:52 - but i can just do now is to say
288:55 - questions designing profile list that's
288:57 - a weird name but
288:59 - and
289:00 - give it that but we get only
289:05 - ps4
289:06 - because does have to just get the first
289:08 - four
289:09 - and then we save it
289:11 - now that we've saved it
289:13 - we can come into the index
289:15 - and right here in the index
289:17 - what we just want to do
289:20 - is to throw
289:24 - so once let's search actually
289:28 - let's search for
289:31 - let's move to
289:33 - let's just move down instead of
289:34 - searching so as all the way down because
289:38 - what we're looking for is these users
289:39 - you can follow but this is it right here
289:42 - we do not need this
289:45 - and then good so i think this is it
289:49 - so
289:50 - what we need now
289:53 - just to loop through this basic
289:56 - so we have
289:58 - refresh
290:00 - and right here
290:02 - you can see
290:10 - for
290:13 - suggestion
290:18 - just changes our name proof
290:22 - what we want to do with each of these
290:24 - suggestions
290:25 - first of all let's
290:28 - okay so what i'm supposed to do first of
290:31 - all is just to
290:33 - have one of it
290:35 - but let's end the full loop here
290:44 - so
290:44 - we just need one let's
290:46 - remove this remaining three
290:49 - right here
290:54 - just remove this
290:57 - do the same here
291:03 - and we do exactly the same thing here
291:06 - now that is good if i
291:08 - hit save
291:11 - and press refresh i'm just gonna see
291:12 - this four times so it says list is not
291:15 - callable so let's come back here
291:18 - and
291:20 - what we just need to do is right here
291:22 - this doesn't need the two
291:25 - value braces just need
291:27 - one for this i want to close this
291:31 - now we save it
291:33 - and then we go back here and hit refresh
291:39 - let's make sure our site is running
291:42 - so now you see
291:44 - that it works but nothing is showing
291:46 - here and this is because remember we got
291:48 - all the users on our platform
291:50 - and we said
291:52 - basically it should render
291:56 - the ones i'm not following and the ones
291:57 - that are not me
291:59 - so
292:00 - um the ones that is me
292:02 - and the ones that i'm not following is
292:04 - basically everybody on the platform so
292:06 - that's why it doesn't have anything yet
292:08 - but let's see let's see
292:10 - let's come back here
292:13 - come into index
292:16 - so for suggestion in suggestion
292:20 - what i can just do
292:23 - is to say
292:25 - suggestion
292:30 - action
292:31 - that's user
292:33 - i'm gonna save it
292:35 - and then right here i'm gonna hit
292:36 - refresh
292:39 - so still the same thing what i'm gonna
292:41 - do is to come here
292:43 - and then unfollow john
292:46 - now that i am not following john
292:49 - if i go back home
292:54 - it's refreshed on this oh boom now you
292:57 - can see now that it recommends john for
292:58 - me since just because i'm not following
293:01 - john again so this is actually what i
293:03 - want so if i follow john it won't
293:05 - recommend john for me again
293:07 - what i just want to do is to go back to
293:10 - follow john
293:13 - slash profile
293:16 - slash john
293:20 - let me follow john
293:24 - once i come here doesn't recommend
293:25 - anybody because i'm following everybody
293:27 - on the platform
293:28 - but now let me log out and what i want
293:30 - to do is to create a bunch of accounts
293:33 - so i can say
293:36 - you can just say i don't know tammy
293:40 - e
293:41 - at g dot co
293:44 - your password
293:47 - sign up
293:49 - so
293:51 - is doug jane
293:54 - i am tommy
293:57 - from the uk
294:02 - and right here we can just say london
294:07 - now we can save that
294:09 - and once we come home we have an account
294:11 - for tommy and you can see that tommy has
294:13 - been recommended john and tom because
294:16 - she isn't following any of those users
294:18 - i'm also going to change this to
294:20 - the profile image of the user and these
294:22 - followers are just going to put like the
294:24 - bio or something
294:25 - so
294:27 - but now let's just log out again and
294:29 - create like two more accounts
294:32 - so let's just say
294:38 - emry
294:40 - hrg.co
294:43 - and
294:44 - deserve
294:45 - password
294:47 - and let's wait for that to create
294:51 - to remove that let's say
294:53 - a
294:56 - i am henry
294:59 - and you should know that
295:07 - listen new
295:10 - jersey
295:12 - and we can save that
295:14 - and go to the home page and now it's
295:16 - been recommended tom tammy and john
295:20 - so let's just go back
295:24 - log out
295:26 - create a new account
295:28 - now let's just create jasper
295:33 - a rg dot co
295:35 - let's give it a password submit
295:39 - and now
295:41 - you just see
295:42 - just per year
295:45 - and let's say
295:48 - i'm from
295:50 - l.a
295:51 - now let's just save that and go to home
295:55 - so it's been recommended and rejoined
295:56 - tommy and tom
295:58 - so
295:59 - one thing is if i refresh this you see
296:01 - it's random now time is on top if we
296:04 - have a bunch of people like android
296:06 - people is just going to be picking them
296:08 - randomly so now let me log out and log
296:12 - in back as tom
296:15 - now you see that i've been recommending
296:17 - three people been recommended just part
296:19 - time me and henry now let me go back and
296:21 - finish that up so right here in
296:24 - suggestion.user
296:25 - let's change this to suggestion.
296:30 - bio
296:33 - and
296:34 - also where we have this follow want it
296:37 - to be view user so to take them to the
296:40 - you the profile page of the user
296:43 - and then once it takes them there they
296:45 - can follow the user right there
296:47 - right here now we can just say slash
296:49 - profile
296:51 - slash
296:52 - suggestion.user
296:53 - and one more thing is the image
296:56 - so we can just say
296:59 - suggestion that's profile
297:03 - img.url
297:06 - and
297:08 - i am going to slash profile
297:11 - slash suggestion.user so now let's save
297:15 - this
297:15 - from here and hit refresh
297:18 - okay and as you can see we have this
297:21 - angry i am henry and you should know
297:24 - that we have jasper jasper here we have
297:26 - tommy tommy i'm from the uk
297:29 - so we have all this good we can go ahead
297:31 - and view henry he doesn't have no
297:33 - follower no post
297:35 - he doesn't have anything but we can
297:37 - support him and follow him
297:39 - and now that we're following him if we
297:41 - come to home we don't see henry there
297:43 - again we are only being recommended
297:45 - these two people but now if every
297:48 - creates a new post we're gonna see every
297:50 - post right here
297:53 - now we've been successfully able to add
297:56 - these
297:56 - suggestions
297:59 - right here so this very simple and basic
298:01 - algorithm we built right here
298:03 - i hope you understood everything we did
298:05 - to this point
298:12 - we are pretty much done with this
298:13 - project
298:14 - so let's just go
298:16 - like got the project like give it a
298:18 - final review but just recap on
298:20 - everything we've done
298:22 - so
298:23 - right now you can see it suggests me to
298:25 - follow a username jasper but it is
298:27 - feature where he just suggests us random
298:30 - users
298:31 - if i follow jasper now
298:34 - now he has one follower but they also
298:36 - added his followers and following style
298:39 - and now if i go home it doesn't suggest
298:41 - me jasper again
298:43 - and it also
298:45 - shows me
298:46 - the post of the users i'm following so
298:50 - if jasper that i just followed if he
298:52 - uploads a post i'm going to see it in my
298:54 - feed so we customize the feed but only
298:57 - the users are following and we can like
299:00 - post
299:01 - like it
299:03 - you liked it like by one person now if
299:05 - you like it no likes
299:07 - and we can also click on this
299:10 - on and then it's going to take us to the
299:12 - profile page of john
299:14 - and we can follow on follow him
299:16 - and show us the bio his username is
299:19 - profile pics and if we click on
299:21 - images he posted we can just slide
299:23 - through
299:25 - all the images
299:27 - back to the own
299:29 - and we can also use this search
299:31 - functionality like we know we have john
299:33 - so let's say we are looking for john i
299:35 - will just search joh
299:37 - it's search
299:38 - now you see that it brings us john
299:41 - gives us the location and this bio so if
299:44 - we click on that
299:45 - we're gonna see
299:47 - profile
299:48 - and we also added
299:50 - this way user can upload a pics
299:53 - and choose the file and the caption
299:56 - right here we also have this account
299:58 - settings they can change this profile
300:00 - picture changes by your update is look
300:04 - so this is a basic word true of
300:06 - everything that we did in this video in
300:08 - this course
300:10 - so there's still a lot that can be done
300:12 - to this project so but i hope with
300:16 - everything you've learned and the
300:17 - knowledge you've learned from this you
300:19 - can customize it and also add your own
300:21 - pictures you know if you want to do the
300:22 - comments or you want to do
300:24 - anything you want to do i hope it's what
300:26 - you've learned you can be able to
300:30 - thank you for watching or taking this
300:31 - course and finishing you up to this
300:33 - point
300:34 - thank you so much

Cleaned transcript:

django is a highlevel python web framework that enables rapid development of secure and maintainable websites in this fivehour course you will learn django by building a simple social media application this is a great course for people new to django and for people who are familiar with django and want to learn how to build a social media application tommy taco teaches this course he has created many popular courses on the freecodecamp channel and his own channel i encourage you to leave a comment with the most interesting thing you learn from for the benefit of other campers who are watching this course hi guys welcome to this video and i want to say thank you to free code cam for publishing this course and you're going to check out more tutorials like this you can check out my channel at kobitomi and for more of my content you can also follow me on twitter i'm going to leave a link in the description below so now let me show you around everything we're going to be building in this project so this is the end product of this project so as you can see we have a feed so this is just a post feed where we see the post of the users that we are following and then once we have this we also implemented a fixture which can allow us to like a user support and just click on the button and now you see it says like by one person so now we can also click on the button again and no likes so we can like and unlike a post we can also click on the name on that post and then it takes us to the profile page of that post so now in this profile page we can see the profile image username the bio the amount of posts these users have the followers and the following so now if we unfollow this user we see now that this is our zero follower let's follow him back just to support him now we asked one follower so we added these followers and following feature because also social media without the followers and following feature and now after that right here we can just see a list of all the posts the users have and we can click on it and once we click on one we'll be able to scroll through all the images of all the posts the user have easily now we can come back to the um and as you can see we right here we have this users you can follow so we did a little bit of suggestion field here the currently logged in user will make sure that the users that has been suggested and not people that is following already that's so right now if we click on view user you see that we are not following this user that's why it has been suggested and this is a brand new user he has no post no follower no if we follow this user right now he has one follower and we go back to the home you see that that user is not suggested again now that's because we already followed our user so we can be suggesting someone that you already follow now after that we also added a picture which will allow us to upload pictures so we can just choose the picture write the caption hit upload and then the people that are following us will be able to see our new our latest book and we also have this account settings feature for that the first thing we did in this project was to do the user authentication where a user can sign into our platform and register on our platform which is very important and also when it's logged in you can log out if i log out right now you'll see that we have this login so i can just log in since it's already autofilled and now we have that and we come here and we can click on account settings and right here we can change our profile image of bio our location and everything we need to change press cancel just takes us back and we also have this search function which is also key so we know we have a user that is named jasper so let's come here and just say jazz and let's set you see that it gives us jasper uses his location la and his bio if we click on just bar we can see his page this is also a brand new user so this is basically what we're going to be building and note that you can add a lot of pictures that you want to add yourself also because after this project the main purpose of this project is to introduce you to things you can do with jungle so i hope that after this course you will be comfortable with django and you can take what you learned from this course into your own project to build your own project or even enhance this at our point having all this said i also want to say that the source code to this project here you can get the template file so as you can see we're using a template for this project where you can get the template file we use and the old source code to everything we coded i'm going to have a github link to the source code and you can just easily get the template file and full and code along and you can just get your source code also so if you are stuck somewhere and just easily check that out so for the beginners taking this tutorial i'm just going to quickly give a brief introduction to chango so what exactly is django django is a python web framework and what i mean by that is that using django you can build web applications with the python programming language now if you recently learnt python or you know python already and you are looking to go into the web development view and django is a good choice for you now there are various reasons why companies and developers choose to use django some of these reasons are because django is fast there's a large community jungle provides security to your application django is also very scalable and these are just few of the reasons why developers choose to use django but one key one is that django has a very large community now this is important so that when you encounter an error when you're stuck on something you can easily search that error and there's probability that someone has already solved it for you online maybe on stack overflow or something now this is very important so that you can easily fix your bugs or fix your errors by just a google search so django has that large community of a lot of developers around it so having this said i hope you have an understanding of what django is and why you should even choose django let's go to the next section now the first thing we want to do is to create a new django project so i'm in this folder here which is just i created a new folder named socialbook the social book is gonna be the name of the social media application that we are building i just created a new folder on on my computer in documents that doesn't really matter but what i just need is to get this directory to that folder so this is where i want to create my django project and develop everything so now that i have the directory to that folder i'm just going to open up my command prompt right here so you might be on a mac you might just open up your terminal or any other osu i just open up the terminal in there so right here i'm just going to go into that particular directory so right now i'm in that directory if i press dir you see it's empty let me press cls to close it up i'm going to be building this social media application from scratch to the finish so i'm going to show you how i build applications when i'm developing my site project or something so you can totally relate with it so right now we are in this directory and if you are new to django when we want to create a jungle project we use some command lines so to create a new jungle project what we will do is to say jungle i think admin start project and then the name of the project right here so this will be the name of the project so this is the command line we use to create a new tango project but before you even want to create a jungle project you need to make sure that you have django installed now you know in python we have pip which is a python package manager if you install python we have python installed already it should come with it just to make sure we have django installed we're going to keep install tango so this is going to install the latest version of django for us now i already have this installed on my computer on my laptop so it should tell me that requirements already satisfied now that's because i already have it installed but for you if you don't have it installed if you're new to django as i said it should go ahead and install that for you so it's going to pop up now and tell me requirement already so we should do that second okay we can just out of that and so i canceled the operation because i already have that so i'm just closed i like cleaning up the command so right now let's just create a new django project in this particular folder so what i did i first came into the folder make sure i have django installed and now it's time to create a new jungle project i'll say django in admin that project i'm going to name it social book so this is going to create a new folder named social book this particular directory now if i press d ir you see now that i have a new directory a folder named socialbook i also go back to that folder now i have a new folder name so i go into it you're gonna see that it creates this other folder name socialbook and the file name manage.p so just gonna go into that particular jungle project i just created by saying cd social book now i should have money dot py and social brokerage i come back here and enter the social book again i'm gonna see some files which is basically just the files that django create get application so now that we have this django app running we can just test it out by running it on our server but what we're going to do first is to create our django app so we have a jungle project and we have a jungle app to take all the functionality so let me just quickly explain the difference between a jungle project and an app so take facebook.com for example we have facebook.com which is the main project so for here we have socialbook which is the main project but let's say you want to have a picture like messages or notifications or post feed each of those can be different apps no now it depends on how you want to do it me personally i like having one project and one app and that app can take all the functionalities like all the pictures the logging in signing of authentication and everything but normally you can have a project and different functionalities as the app so let's say facebook.com as i said is the main project facebook is a project here then we can have like the authentication scheme as a different app just to take care of the authentication and what i mean by that is user authentication means logging in and registering a user we can also have another app to take care of the notifications we can have another app for the messaging platform so that is just the basic understanding of difference between django app and jungle project so you can see a django app is like a subset of django project but for this project we're just going to have one app that's going to take care of everything so now that we're in here let's just create a new django app and the command is similar to creating a django project so we'll do django iphone admin that app and we'll name the app because it's taking care of everything and we're not giving it a specific name and just say call but i like maybe my app score just that's just me or you can name it anything you want totally now if i press dir i have a new folder named core i come back in now i have a new folder name call and in there i have this bunch of files that we're going to be looking into later when we are using them to develop so right now i have everything taken care of i've created my jungle widget and i've added an app to it now let me just run this project and make sure that everything is working fine on the server so to run your project or even see if the installation has worked successfully all you need to do is to say python manage dot py run server now note that if you're on a mac you need to add python three money dot pyro server because the recent version of django doesn't support python 2. so as you can see it gives us this output just ignore this for now and what you just want us to do is to go to this url on our browser right here we can paste it and then it should boom so this is it what this is now is that it's saying that we have successfully created our django project and is working successfully and see here is the install work successfully congratulations now this simply means that everything we created has worked successfully so this is the url that we're going to be seeing all our project or the output of our project in so that's the local oh sport 8000 that's the default url for django when you run your jungle on your local server on your machine it is now that we've created our jungle project and stuff this is basically the home url of our website but when a user comes to our website like socialbook.com we don't want this to show right we want to show like our own template our own design you know our on social media so let's get into that let's go ahead and set up our urls we're gonna go into visual studio code now if i come here i have my visual studio code open and i have imported the project we just created let me quickly walk you through how to do that so just make sure you have visual studio code or any other you know code editor that you're using and on right here click on open folder and once you click on noble folder just go to the folder where we created this django project and it's going to open up that project for you right here like this so what we just want to do as you can see right here we have core which is the app we created and we have sociable which is the main project we created but we don't have money dot py and some other files if i come back to my folder right here see that we should have money dot py and sqlite database but it's not there that means they didn't import why i was selecting so what we just need to do is to come to file open folder and make sure you don't select anything just open the old folder and you should so we don't want to save anything yet because this is seeing it as a workspace we just want to open it as before now you should go ahead and open that folder up for us and then once we have this opened what we just need to do is to set up our urls and so this answer is as you can see now we have everything imported or opened but now let's go ahead and set up our urls so if you don't understand what i mean by urls what i just simply mean is the path of our website so when a user comes to socialbook.com should it go or what should happen or when a user comes to socialbook.com profile what should happen so basically each of those paths are urls like socialbook.com profile is a url that we need to set up once the user comes to slash profile something will happen but we don't set that url up then it doesn't exist don't worry you're gonna get this the first thing we want to do to come into our app and create a new file in there and name it urls.py so right here now we're just going to import something from django if from angle.urls import path now this part is going to allow us to be able to set up our urls and now we're going to have a new list and name it url buttons and now to set up our home url a path and we leave it blank once we leave it blank like this this is signifying that we're setting up our own url where we do something like profile this is signifying our setting up our website slash profile so now after this we put a comma and we'll say use dot index and we'll give it a name of index so what this is doing is that this views is where basically do most of our coding so you are going to understand what i mean by view dot index in a bit but first of all before we can even access these views so these views right here that we're saying is this view.py file in the same directory i'm just going to go ahead and open that so before we can access that file we need to import it so we'll save from dot import use now we have views imported we can use views.index but if risingviews.index is no function or no class or anything like index in here so we need to set that up also i'm just giving it a name like a keyword for this particular url index so basically what is the same is that once the user comes to the home url go to the views.index whatever is being done there just basically show that to the user so now we can save this i'm going to come into views now we need to set up a new function for the index i need to take a request now we can return a simple http response but first we need to import that from django.http import http response now we can just say return an http response h1 and say welcome to social book now this is what we need to say so let me explain what i did here so as i said right here what we did was imported parts imported views and then we set up a new url named the home url which is empty and we said it should go to the views.index and this view.index basically is coming to this views file i need to go to dot index look for any function that is not index so now that it has dot index whatever is being done here in this function is what is going to serve that particular url so now since we're just sending an http response this is just what it's going to show let me save it now one more thing before we can this can reflect on our main project we need to set the urls up on our main project as you can see we set it up on our app but if we come into social book coming to urls here what we just need to do is to import something called include and now we just have to set up the home url that's the only thing we need to set up right here and we'll say if someone comes to the home url just include or dot urls what this is saying is that if someone comes into the home url in code cloud.urls now this call to arrays is our app which is for dot urls which is so it's going to go into code urls and look for any path that is similar to this and whatever is being done there is what which is this path and then this part also links to views.index which is right here so everything just link back to returning this http response now this is done let's just make sure our server is running so this gave us an error when we use views.index but we haven't defined index in the views wire file let's go ahead and refresh this right and refresh this now it should update and not give us any error because obviously we've already added that index function in our views so it still says index is not defined so let's make sure we saved our views of people right here also it's reloading let's see okay let's make sure everything is working fine too this one is first of all okay so you have or the two arrows in line five you say index in here first of all save that so it can reload so sometimes we need to like reload and let's just do use dot index name x save again now let's see once it reloads dude as you can see now everything is working so sometimes jungle just need a little bit of tweaking or reloading so it can update now let's go back to this that we run and we shouldn't see this again now what we should see now is that http response welcome to social books as you can see what we see now is welcome to subscriber so basically we've removed that default jungle template i was showing in stores work and we've given this http response on our own url but this is still not what we want what we want is to show a template basically that's what we're gonna do now let's go ahead and set up our template so if i come in here into the folder it's going to go right here right here and you see i have one folder called template here so this is just basically the template for that we're going to use in this tutorial so it's just a free template and everything the whole template and everything will be in the github link of this project so you can get the template also and i have these two templates here one is for the profile one is what is for the main for the index sign up everything and what i just want to do is to drag this i'll select it first of all and i'm going to drag the html files into a particular folder but before that let's come into our visual studio code so before we can even use any template we need to do some configurations writing vs code let's close this social book where else we don't need that again now we want to go into our settings.py file and right underneath here we just want to import os first of all and let's scroll down so in installed apps when you first create an app it's always advisable to add the app in here now this is not relating to the template but just so we don't get an error later let's add that up so now that we have that let's scroll down right here where you see this template is a list and what you're just going to do is to come into dares and this desk is just specifying the where jungle should go and look for all our template files so let's just stop and in the base directory of this project now when i say base directory i mean the same directory which contains the money.py file so the base directory of this project we're going to create a new file and we'll name it templates and in here is where all the html files of this project is going to be so we need to tell django that that is where everything is going to be that's what we're going to do right here so first of all we need to import os as we d we're going to come right here under this i'm going to say os the path the join page there which is the base directory go into template so it says from the base they're going to template that's where you should look for all our templates files it that's basically all we need in telling jungle where to look for our templates files so we just save that and right here in our template files now we need to load it up with our html files let's come back here and we'll drag that just copy it in there good so now we have that in there we need to copy one more which is from the profile so go to static dom profile now i will explain what i mean by this static dom profile later let's just take this profile so again all this is going to be available in the github link of this tutorial so you can easily grab them and yeah so right now we have all the html files of this template now and what we can just do now if i close this up don't need this for now we can go into the views file and instead of returning an http response we can now render an html page so this is the index function obviously we want to render the index.html what we do say return render take a request get index.html so this is just the line of code we need to show this index.html file now let's make sure everything is running good and let's come back here and hit refresh i should see this again and we should see that template let's give it a moment to load that up okay good as you can see now we see all the template we see the template but it is looking bad so this is because we have not set up our static files our static files is basically any other file that we're going to use in our template file so any other apart from my html this might be an image file a javascript file or css file any other file we're going to use in this our template it needs to go into static and we're gonna do that in the next session so as i said the reason why our template is not looking good right now is because we haven't connected or set up our static files let's go ahead and do that i'm going to come back to visual studio code the static files as i explained in the last video is basically any other file that we're going to use in our template file apart from the html file so any other image css for javascript file any other file we're going to use goes to the static but how do we set this up let's do that so let's close out this again and similarly to what we did in the last video we're also going to create a new folder name is static and as you might have guessed we're going to go into the settings of pyr file also and then we're going to set static up right here it just shows this that the static url but we need to set up the static root and the static files directory so let's do that so static underscore root goes to os dot path dot join is there static files i don't mind why this is different from this but this the next one now is the main connection so says static files there's first two is the path the join is there comma static right here now let's save this now let me quickly take a moment to explain why we're even doing this so jungle whenever we're connecting like images or css files it doesn't connect it the normal way that html connected so if you work with html very well you know that when you want to link for example an image file what we do is you have an image and we say src equals to then right here we have like the directory to the image file in my bin assets slash image.jpg so for example in html these i will link an image file but in django is quite different what we just need to do in jungle we need to make sure that this asset slash image file is inside the folder named static so it must be inside this folder and after it's been inside our folder when we are going to the html we need to put something like this and say with a percentage sign we say static with this that to close so this is the way jungle basically sees any external file and we're gonna do this for anytime we are linking to any standard file it might be css it might be javascript images any other file but this is what we're gonna do so for django to be able to recognize this we need to set all these things up like setting up static creating a new folder and putting the static files in there i hope you understood what i just now i can just close that up and save so now that we have all this set up next thing we want to do is to move copy all our static folders and files into this static folder right here gonna come into well first of all in this template right here this asset is where all the static for all those html is located external files for all these files in this asset that means we just need to drag the asset into this static folder and do not add folder to workspace copy the folder so i copied it we've copied it there but as i said the profile and the rest have different settings or different files either so what we just want to do now also copy all the static steps yes store and just select that out and now let's copy the rest attic opening food now everything is going to copy it's just going to take a few seconds because some files might be larger than the other so that's done and we actually do not need this so we have seen okay this is still okay but as that is doing we're gonna close this settings now we don't need it and we're gonna actually open this index.html file right here in the code editor i'm going to come to template and open index.html we're going to get back to this also let's just make sure all this has worked i have one two three four five six seven for the profile so seven items selected good but we don't need a static down template it's not part i just added that so we're gonna have to kind of remove that contempt go delete it equipping so you don't need to understand what i did there what i just did was i added a file that i want to remove basically so now as you can see this html5 is quite different because on top we have something named load static right here remember what i explained when i said we don't link files normally so just to save time and not let you watch hours of tutorial on something not necessary so i already you know configured all the linking for the way jungle will see it like django template and stuff so before you can do this before you can even like go to a css file and add a static and also close it at the top of the file you need to add something named load static if we don't add this it's going to give us an error it's basically loading all the static settings the static file so this file can use it so i already did all this for all the wall you know html files are copied so that's why if i come back here if i come into template i come into so you can see i said static nontemplate i have the normal template that doesn't have all these configurations done but before i started filming this tutorial i just made sure i you know tweaked everything so that it will save time but i hope you understand what i mean by this static so basically we need to load static first of all and then anywhere we are linking something we just need to add this static at the beginning and at the end so throughout the whole file i did that anyway we are linking a file i added everything if we scroll all the way to the bottom writing the javascript also i did that so that's just how to configure that and if we scroll up and notice that right here we are linking a png but we didn't add static let's add static piece and we close it like this that's basically how to do it now if we go into our browser and we hit that refresh button see our website in good let's see second things the color yeah boom as you can see right now basically have all of this loaded everything good such username the post is as you can follow so this is just the basic template i used for this as you can see everything is fine the static files have been loaded load more javascript is also working so everything is totally good so now that we have all of this let's just try ahead by starting with the registration and signing up of a user now let's start with the authentication of our website so basically what i mean is allowing a user to register and login to our website so before we do this we need to create a model so first of all let's close this index.html we don't need it for now and then we're going to come into modules.py right here so this models.py file is basically the file where we create our jungle models so we can use it as a database for our project so now we want to create a profile model this profile module is going to have different things like the user profile picture the user bio the user location and stuff like that so first of all let me explain why we are creating this profile module so we know that django as in as default it gives us this user model which a user is going to be able to you know sign in sign up and have some information like their first name username email and stuff but we want more so the jungle alt user model authentication it gives us the username the first name last name email and password so those are the only fields it gives us but we want more so we want to be able to add the user by you the user profile image the location maybe like a country is from or something so there are various ways we can go about this we can create a custom user model or we can just extend that user model that jungle already gives us or we can create a separate model for the profile and link it to user model using a foreign key so that's what we're going to do i'm going to create a separate model for the profile and link it to the user model using a foreign key so i'm going to show you how we're going to go about this now you might want to do it anyhow you like if you're already familiar with jungle you might want to extend the database or anyhow you feel it's easier for you but this is the way i'm going to do it in this tutorial so first of all let's create a class and we're going to name it profile and that will be take from the models dot model and now i want to give this field the user just pass on everything first i want to have like the id of the user so now i'm not going to say user underscore id and i'm going to explain what i'm not going to say it's why i do id user so we have user this is going to be a foreign key that is going to link to that model i'm going to we're going to do that the id user this is going to be the id of the user that has this profile and we also want to buy you we want profile image profile img pass again we want the location so these are basically the things we want for this our modules but for this profile image we're going to use an image field so if you're familiar with jungle you know we have different model field we have character field the text field integer field but when we want to do something like a profile image we can use the file field but that file will be able to call it like videos pdf files or we want to narrow it down to but this view to connect all the images so we're going to use an image view so what we're going to do is something like this models dot image field now we need to configure some things like where will this image upload to when a user uploads the image which folder will you upload to so just the way we set up static files and all those type of stuff we also need to set up media the media is gonna like take care of uploading like basically the storage where all these files are gonna be stored because also when we go deeper into this application when we allow a user to upload a post the user will want to upload an image with that post so where would that image go to so we need to store we need to configure all these things also and this one is quite different from the others the only similarity is that we are going to create a new folder again in the base directory as i said the page directory is the folder which contains the money.py file of that project so now we're going to create a new file i'm going to name it media this media basically is going to store all the images we're going to be uploading and now that we've created that file we need to come into our settings dot py so i'm going to open our proof our project and go to settings now right here we just make sure we scroll down and we'll say media underscore url a flash media flash dash like this and we also need to specify the media routes the os dot path the join based directory and media so the name of this folder must correlate with the name we gave it here let's save that and we can quit this the next thing we need to do is to go into the urls of py file of our project not of our app so we need to come into social cookie's main project go to the urls of your wifi all right here we're going to import two things i'm going to import settings and static if from jungle and configuration we shorten it to conf import settings next one is from jungle.configurations.urls.static import static good so this is what we need to import and now to specify the url for this our media specify or to configure our media url to finalize it the urls patterns goes to variable pattern above plus static settings dot media underscore url have a comma and just bring it down here and say document underscore root equals to settings dot media root now we can save this so what this is doing is it's just specifying the url of our media so uh media files so this is just the way we set up anything dealing with media let me quickly recap so we we started with our modules which we are going to finish in a minute but because we are going to use an image field and that is a file we need we need to create a new folder called media which is going to take care of the uploading of the image where it's going to be stored and we need to go into settings.py file to assign these two variables media url media root and we needed to import that into the url.py file socialbook and just configure url path now we can close this and now we'll be able to use an image field in our module so now we say models.image huge but one more thing we need to specify some things that django is going to understand so when a user wants to submit a form of this field or when he doesn't want to submit a profile image where does that image upload to i know i said it's going to upload to the media folder or where in that media folder is it going to upload so we want to have different categories or different folders under this media folder here so we might have one that says profile images my vendor folder that say post images so we don't mix all the images together so let's say this should upload and use the upload tool profile images now i know that under media folder we don't have any older name profile images but if we don't have any folder what django is going to do is that for the first time it's going to create a new folder there called profile images and then from that time any image being stored through this field or through this model is going to be stored under media on a profile image so basically since we don't have that created now we can create it manually but i prefer for django to do it automatically so you're just going to create profile images folder and it's going to store it today but now that we have that out of the way one more thing so you know when you sign up to like facebook and you don't yet have a profile picture there's actually a default profile picture that facebook puts for you so we also want to do that so that if the user doesn't have a profile picture yet want to give him a default profile picture but what we're going to do now right here if you come into your static and you come into images you're going to see that we have a image called blank profile picture that's the name of the image blank profile picture dot png i would love to show you yeah if that is going to open but that's just basically a default profile picture that we're going to give the user so okay that's going to open good as you can see this is just a default like profile picture for user that didn't upload the profile picture yet so now let's just copy the name of that file and quit this and then what we just want to do is to say default equals to blankprofilepicture.png but remember again i said that anything dealing with these images of files in a jungle model it needs to be done in this like media folder so when we are getting the default image this blank profile picture.png how does django know that it's supposed to go into static images then look for this no jungle doesn't know that so what we are going to do these blank profile images we're just going to drag it from there and paste it in media don't want to move that so now it's the media so when we say blank profile picture that image tango is going to go into this media folder and look for that file since now that we know django can see that file we can continue with configuring the rest of our module files our model fields this profile image now is done model dot image field it's uploaded to profile images and it defaults as if the user didn't upload profile image yet or doesn't want to upload the profile image you should just use this as the user's profile image so now that we have that out of the way let's start from the beginning right here so here in this user we want to link this particular profile to the user model using a foreign key so what we need to do first is to get the model of the current user that is logged in or that is authenticated and then that is going to be like be the default for this foreign key so we are going to understand that now when we do that first of all let's do from django.contrib.org on trip dot auth import get user model so i want to import this attribute name get user model but you're just going to get the model of the currently authenticated user so let's give it variable and say user equals to get user model we're just initiating that and now that we say user equals to this get user model anytime we use this user now is just basically going to be model of the currently logging user so now right here we're going to say models dot foreign key user on delete first modules cascade that's good so now what this is just doing is we have a foreign key that is linking to the connector to this user which is this user variable which is this get user model that's been imported you have that done now this id user is just meant to be an integer field so model dot integer field that's that's that doesn't need any attributes in here so i know you might not understand why we like have this id user or while we have this user foreign key related to a foreign key that is connected to this that if you are new you might not understand that but when we are using this in our you know project when we are getting the post when we are allowing the user to be able to follow another user you know why or you understand why all these are being done like this so just follow along for now and let's get back so now we have the bio the bio we just want the bio to be a text field so same model the text field and we can give it blank equals true now this is because the user might not want to have a value it's not compulsory and allow it to be blank now the location models dot character field this time around and a character field has a max length of hundred i just give it a maximum length of hundred and let's also give it blank equals true because the user might not want to put his location that's not compulsion all this is good we have the user id of the user the value of that user profile image the location now let's just return the basically the username so say dev str self return self.user so this self.user is just this let's get the username that model so what this is doing this is not compulsion you can remove these if you don't want this is just in the name of the model so that when we are seeing the model in our admin panel it's going to be showing the username and it's not going to be showing object 1 or object 2. i'm going to show you that like in a couple of seconds so now we have this done now let's just go back to our command prompt and let's make migrations and migrate everything to our database first of all note that before you run migrations or anything the app where you have this module.py for us it is core that's the name of the app this app must be added to install apps in the settings of your wifi if we come down here remember in the beginning i said let's just add this to avoid any error later that is the main reason so because we want django to be able to see this app as part of this project we need to add it to installed apps so now we can be able to upgrade our database so basically if you don't know the meaning of migrate or what i'm talking about in jungle once we create all this data here so this is basically like the name of the database and these are tables in the database so think about it like that this is the name and these are tables but these are row each row each row like this i wish i can like visualize this for you in a table but just think about it like this the name of that database and this is each row in the table of that data so now all this that we've done we need to migrate it to our database i'm going to show you that also so we have to come right here let's opt out of the server real quick out so yeah done and now to migrate our server we just manage python manage dot py make migrations and once we make migrations what this is doing is that any changes that we made in our models dot py file is gonna save that change before migrating it to our database so if we come here and let's say we add blank equals false or something blank doesn't have a false but if we remove blank or something since we've made it change we need to come here and do python manage write make migrations to save that change then migrate again anytime you touch this file you need to do that it's just that now that that changes has been made let's just say python manage dot py migrate so now this is going to migrate that database that model into our database this is the first time we're running it that's why it's migrating the earth admin and every other thing but the main thing we want to see migrating is this call that's my great thing and now um i want us to run our project and go to the admin to see our you know database but we can go to the admin to see our database because if we go there we don't have any login yet that a user can use to log into the admin panel so to create that we're going to say python manage dot py create super user this command line is going to create a super user now this super user means like a user that can access the admin panel so any normal user that sign up from our site can just use their login details to log into the admin panel only we developers that can create a specific super user and log into the admin panel so now let's just say admin give it book dot com i'll give you the password password again it says the password is to come on to the username let's just bypass that but that is created successfully now let's run our server again ui run server but that is preparing to run i'm going to come back into our browser actually let's open a private window this private window is just for our admin panel so that we'll be able to log into our admin panel and not interfere with logging in to a normal user so it is in private browsing and go to our website now slash admin our website should be running now just come here and see so as you can see right there our website is running let's come down good this is what we want to see it basically gives us this login form to log into the django administration now django administration doesn't have a signup form the only way you can sign up to this generation is from your console it's from your command line now let's log in with the details we just created i mean again with the password also and we hit again good but now that we use login you can see we have just two database we have groups and we have users this is created by default in django if we open these users we're going to see one user which is us the super user admin user so let's wait for that so as you can see the username admin email address and staff status so remember i said that django as a default gives us this user model but it doesn't have enough fields for us to build this social media platform it just gives us only username email address first name last name and a password but we want more than that as i said so that's why we created a profile model now let's go back to our visual studio code because we come back to home you see that the model we just created which is profile is not showing here so we also need to make sure that that shows here so we can manage that database do that it's very simple just like two lines of code we come into a file named admin.py now this file is going to be in your app just click on the file and the first thing to do right here is to import the model that you want to show in your admin panel if from dot models import profile since this profile we want show in our admin panel or register to administer now say admin dot site does register profile now i register now it's profile mode into the admin if i save this now just gonna come back here and make sure everything loads successfully once that loads i'm gonna go back to my admin panel and now i should see my profile done i'm gonna come here if i refresh this now good now i see under this core app see profiles right click on it no profile yet because we've not done anything to the profile but this is the first step in the user authentication so i hope you understand what we've done till this point created a specific profile model for each user so when users sign up a profile mode is automatically going to be created for them now we're going to do the registering of a user of the signing up of the user in export the next thing to do now is to set up the view for our registration to be able to register a user into our platform basically what we want to do now let's just come into views.py we want to create a new url for our sign up so let's just collapse these and this just to make everything clean first of all we're gonna have to come into urls and create a new url for that view so what we want to do want a user to be able to come to our website slash sign up and you'll be able to sign up to our platform or register on our platform so let's add it here right now just put sign up and right here sign up and the name also should be sign up so basically our website slash sign up then you should go into views dot sign up and it has a name of sign up but we know we don't have user sign up yet we're gonna have to come into views create a new function named sign up it's gonna take a request and let's just render our html template return render request sign up.html now this signup.html basically this page is signup.html that's what we are rendering when user goes to slash signup let's save this also save our urls basically we have that done and let's just make sure that when we go to slash sign up it really renders this first of all as you can see right here our website is running so we can go test that out now let's go to slash sign up enter good so as you can see our website is showing and we are going to do some configurations first of all we want this to be sign up on the changes to sign up once it changes to social book and maybe change the title let's go do that first we will come back here and then in signup.html so this again remember as i said i already tweaked the all the links for static so now i'm just gonna change this to up okay okay and let's scroll down right here where we see youtube social book all right here we see signing we have to change it to sign up yeah so that's that and this could be fine let's just use changes sign up social work social book sign up this is i know we change this instead of this so to see with that then right here which is sign up that should work now i know about this was logging good now once that to be able to sign up with just the username the email and the password we don't really need the first name if you want to collect the first name in your own application you can do that but we don't really need the first name and last name let's just call it the username the email and because user have to have a password right here where we see this form let's just image this for rest make our work we have this form here what we're gonna do is a name let's change it and let's make it have so we have all this style and everything done let's just username is okay let's have an email type should be an email this order should be email and all of them needs to have a name because when we are collecting the data in our back end we're going to collect them using the name of the particular thing so right here after type the name so this is the username should have name of username so let's just copy this you have email and this is what the password right so password and this is as you say password to confirm password and we can also change this to password the type your password type more security and what again i agree to terms and condition that is not really let's just comment that out now let's go ahead and see what we have now so it automatically fuse it in basically let's just remove that hdd it doesn't fill it in again now we have sign up we have all of these which is good what we want to do let's also scroll down button everything is working good so now right here in this form we want the action we leave it blank now when we leave this action blank it means that once we hit sign up all this data that has been inputted in here is going to be sent back to the signup page i'm going to show you why we do that so now we have the action blank another thing we want to have is the method we want to use a post method now in django there are two different type of methods we use when submitting a form use the guest method and the post method let me tell you why and when we use any of the two we use a guest method basically when we are passing like an information that is not confidential so like let's say a user wants to search like python you have a search engine here and the user also search like python so on that search form you can use a get method because the value being shown is not confidential it's just what the user is searching for and when you're asking the post method is basically where when you have confidential inputs like a password we don't want the password to show so if you use a guest method whatever is being searched or whatever it means submitted is going to be shown in the url we've used a post method those values are going to be hidden those are the major two difference so if we're going to show an input in the url that input has to be an input that is basically not confidential as i said because if we are using like this signup form and why is in a get method we don't want to show the user sign the user's password in the url bar that is not a good practice so that's why we use post method or let's say you have a platform where a user pays using his credit card information and you don't want to use a guest method in that situation because credit card information can be shown in the url so basically those are the majors to difference you can also do a quick search on google if you want to dive deeper that another thing is that when we use a post method in django we need to add this templating style called csrf token now this just take care of some what malware because this dsrf stands for cross site request for audrey so it's basically like an attack but when you put this it basically takes care of that jungle way we're not going to get too much into that now let's save this and let's come here and hit refresh and just put random things just to make sure that everything is working once we sign up it brings us back to this page that's what we want so now that all this information is being sent to sign up view using a post method what we're just going to do now in the views we're going to get all of them using an if statement so what we're going to say is that if requests does method equals to post so this simply means that if the when a user wants to look for this site or when user comes to this particular page if this page has been summoned using a post method then we're going to do a pool of things if not just show sign up so when we just come to this page normally and just enter like this it's just a it's not a post method yet so but when we submit a form i need to sign up we are sending back some information to this page using a post method that's when we're going to be able to get those values so what we're going to do now that if the request of meta disposed we're gonna do some things let's pass first else i mean there's not a post method and just on this particular page so now there is a post method let's get all the value that has been sent to this view so we can get that same name first to request let's post their name what i just did was that i added a new variable and i said request.post username that means the the data that has been posted here is going to get the value of that data using the name of the input if i come back to sign up remember i said they have to have a name when this is submitted it's going to have like a name and a value so using the name of this input which is username now in this views file we'll be able to get the value now if we just do something like print username it's going to basically print whatever we input here in our console just give me a minute and let's just add something and um just fill it up and test what i just said so as you can see it's not yet getting any error like the password don't match um all this type of stuff like the username is taking the email is taking we're still going to do that but now we hit sign up let's see gives us a value error they said views dot signup didn't return so it didn't return anything because we're not returning i'm not giving it a response we're just getting the value but we're going to undo that but let's come back here first and you'll see that right here gives me this value which i put in the form as the username basically we are getting the value of that form and once we have the value that is being sent to that form and just use that create a new object in our user model now let's go back here and what we're just going to do is to copy this four times so now we need to have email password and password two which is repeat password so now the email has a name of email just advisable to copy it so you don't contain any error in the names and stuff like that even if you know you are correct password password two now we have all these values now that we have all these values and create now first check some things we first check if the password one is because of the password two because when was saying confirm password the two passwords have to be the same we also check if the email exists we also check if the username exists before we do all those we need to import something and what we need to import is the user model user model which is um right here which is this user model where all the users has been stored so we need to import that right here so first of all let's say from tango dot contrib that's earth that's models import user good i also want to import something named alt now this is going to allow us to authenticate the user now i think that's what we need for now just come down here back so now this is we're just gonna have another if statement and yeah what i'm gonna say is if password equals to password two and if the passwords are the same then something fast for now else we'll have to give it an error saying that the password does not match so to give an error we're going to use something called messages we also need to import that so we have to scroll all the way up right here where we have we could have imported it from this let's just angle dot contrib import messages okay so this is going to be able to send a message if it's an error or a warning just gonna be able to send a message to the front end so now if the password is equals if the two passwords are the same we're gonna continue and will not check again if the email is taken or use any mistake but before we even go for that if the passwords are not the same let's first send an error and tell the person that the passwords don't match we're going to say messages let's use an info message is the info the request and we just turn the message password not matching and then we have to redirect the user back to the sign up page but before we even use redirect we also need to import redirect but that's easy because we are importing redirect from django.shortcut which we already have here so let's just say redirect now that we have that we just say return direct to the sign up so we are redirecting the user to the sign up by sending this message so that the user will be able to fill that form again basically now that we have this as if the password are not equal but if the password is equal let's have another statement by saying if user which is the user model dot objects dot filter email equals email dot exists i want to do something so what this is saying is that if we go to the user model we check each of the objects then we filter and we find an object in which the email which is being which is in the user model is equal to the email which is being posted to this view if that exists then we just want to tell the user that this email already exists i mean this email is already taken the message is dot info request email taken and then once we tell the user that email is taken we want to redirect the return redirect user to the sign up now that we have that we will use another if state member a leaf so else if we want to check if the username is taken so say user dot objects dot filter name goes to username but exists and we just want to do the same thing by saying messages that's info request username taken and then we're gonna direct the person back to this page so now for what if password is equal the username does not exist and you and the email does not exist just say else sometimes if there is no error nothing but happen what we just do now we want to create that new user so we just say user equals to user dot objects dot create user this one this one is going to be able to create a new user for us and we just say user name goes to this username that has been passed and then the email equals to the email that has been passed and also the password of that user we just take one password because we don't need to sort to passwords just to pass so we're storing the username password and the email basically now that we have that just say user dot save now that we save the user this should work but before you know saving the user or doing anything like that before testing it as i said we created this profile model so once we create a new user we also want to create a profile model for that user but before we test that out let's just save this first of all and let's go to our page and we have this one so what we want to do now we want to test the error that we configured in here remember we said if password is not equal it should give an error so let's even test if that is working so our that is okay good so now that um give it this i'll give another one okay so when i sign up now if i come into my users you'll see that there's no additionalization and this is because obviously the password was not the same so it can create a two different password but didn't even tell us anything like the password is not matching i didn't create or whatever how would the user know what happened so we need to do that what we are going to do is to go into the html file here we are going to use a for loop we are just basically going to pass those messages that has been sent and show it here like password no matching or password correct or username taking and stuff like that let's quickly go back to our vs code but since we are sending all these messages already writing them to redirect it should be easy what we just want to do from above form let's have a new div tag in there we want to have say for message in messages and h5 let's just print that message this is just going to basically print the message for us let's end our for loop but we want this to show like an arrow so it should be like a color red or something and it should be bold or something like that so let's have a styling now right here we can just say h5 let's give an initial color of red let's save that and very loose good so we refresh that page and the data we posted before was reposted back as you can see now it says password not matching if we try to create let's say admin because we already have a username admin if you tell us username taken let's just give it blank let's make sure this name nice it gives the username taken because the admin taken so as you can see now the error is being cut successfully what we want to do now if we make sure that there's no error that means a new username email and password is going to create a new user for us in here but we don't want to do that yet because if we create a new user now only the user object is created but a profile just won't be created for that user so let's go back to our code and make sure that once a user is created right here once we have a new user created we also want to create a new profile let's say a new profile object for that user so first thing we're going to do let's log the user in it will say the user no we're not going to log the user in first of all the first thing i want us to do okay so before we log the user in i'm not going to log design yet that's because when we log the user in i want the user to be automatically redirected to like the settings page where you can upload profile and put this by you and location but since we don't have that yet let's just create a profile model for that user first before then when we have the settings done we can come back and change that so let's just have a comment here and say user in and direct to settings page so we don't forget about that and now right here let's just create a profile object for the new user we're going to do now is say user underscore module user.object dot get that name goes to youtube what i'm doing now is that first of all because in here also create a new profile we need to give that profile the user that owns this profile if that user will be able to give it this value we need to have the object of the user we don't just need to have the username or the id of the user we need to have the object of that specif now what i'm getting now i'm saying the user model should be user the object.get the one which the username is equals to the username that was just created right now and then once we have that with the new profile and the equals to profile dot objects dot create user because to the user model and also the id of the user once you get the id of the user id user was what we used and we equals to the user model dot id so these are the only two things we want to give as default come back here to our modules gave it this value the user object and we gave you the idea of use so the biography the profile image and the location the user is going to create that stuff so now let's just save this user basically and analyze the creating of the profile model so we just say new profile let's save then and just redirect the user the login page but right now we don't have a login page so since we don't have a login page i'm gonna be able to i'm not gonna be able to redirect the user anywhere so let's just redirect the user back sign up when we create a login page we're going to be able to direct the user so let's save this now once we have this saved now we can come project that let's make sure our project yeah good so since it's running now let's create a new utah let's say john let's give him a password let's sign him up it gives us name error now this is because it said name profile is not defined and this is because we are using this profile name but we didn't import it right here so we need to import that profile model from the py file if from dot models import profile good this should work now if we come back in here done energy.com in my password now it's sign up so it says email taking now this is where the error comes because we tried to create a new user so we created a new user for right now when it says name profile not defined the error was here that profile was not defined but that didn't stop that from creating a new user the new user was already created but the profile object was not created for it so this is just what's in the testing phase so right now we come back here and it's refresh see john as a new user and as you can see is not a staff this stuff means he can't access this admin panel come into profiles see that we don't have any profile right here but we are supposed to have a profile for john this was because john was already created before we fixed the bug about the profile name not defined so now let's delete john first of all now let's try to login again good i refresh that page once i refresh that page from this button it's going to send that post data again but if i refresh it from here just gonna load the page normally so since opposite i was sent the game john user is now created and jump profile model is now created so let's go check that hit refresh so it didn't create it if i come to profile also didn't create it that means when i hit refresh didn't submit that post again normally in like normal browsers like i think chrome once you hit refresh you're supposed to submit that again but i'm using microsoft edge this video so i think that's why it didn't work but let's just quickly go ahead and that energy.com password sign up good let's just save it here so we have this sign up done normally you know it's supposed to like take us to the login page to log in or you just automatically authenticate us into the platform but since we've not yet done all those stuff we just made it redirect back to this page first of all but since we came out to this page without an error we should be expecting now that the user and the profile object has been created if we come back here come to users see now that we have user john johnnergy.com come to profile code we have a new profile for john that is good so the user is basically this done user and this is the id of the user so also we're going to be able to allow them to update that bio update our profile image and location as you can see as a default the profile image is blank profile picture.png is this that we gave it good that's working fine everything is fine to this point right now next step is to be able to allow the user login into our platform now let's create the login view for our application i want the user to be able to go to slash sign in and then the user should be able to sign in to the application let's go back to vs code but now let's just collapse this right here in urls let's create a new view i will name it sign in let's just take that copy it paste paste right here also open this again scroll down and create a new view cdf sign in quest return render sign in dot html now that we have this let's first of all go ahead and collapse this let's save this and let's also save this so now once a user goes to slide sign in we should have that so let's go test that out sign in good so it gives us this let's also you know tweak this very well for everything to work good and we'll come back here but before we even do that let's go back to the sign up page and you know once i use that clicks on this login let's take this out to the sign in view and also right here if we go to sign up before we have login let's say f to search and search for login so do you have an account this should be to slash sign in or the second one is right here at the top right corner of our application let's take them to slash sign in good now we have this if we come back and hit refresh now it says do you have an account if we click login it takes us to login good now let's open up our login page sign in right here and then where we have sign in let's sign into sociopoo and let's scroll down on the changes also to social book it and what else so this is login login let's create an account and register want to change create an account and register to make it go to the sign up view the register go to the sign up flash sign up now create an account goes to sign up good so this is done let's come back in here and hit refresh to share book now let's just you remember me you are not really using that this video so let's just comment that out too good now what we just need is to you know configure this make it have a post method and all those fun stuff first of all as i did last time let's just leave a space in our form just to finish it and right here let's have a name name and this is the password if i type of dish password and the placeholder i would love it e password good now this is working fine let me save and see sending password and each of them have a name now so the action should come back to this plugin view and method repost as i said whenever we use a post method we need to add csrf token good now that we have this once a user hit submit or login send that to our login view let's see is we have this again okay so that's basically because we didn't refresh the page so let's refresh this yes anything in there login okay so it just comes back here which is what we want and let's do a similar approach to what we did in our sign up so right you know sign up now login view i'm just going to say i'm going to leave an if statement again just like we used earlier so let's just say if request method equals to post we're gonna do something else just return this page this is what we want to do now and this is quite easy what we just want to do is we get the username and password just to request dot post name and copy and paste this password it is pasted right now what we want to do is to create a new variable and say user equals to earth dot authenticate onto authenticate with any post name password goes to password while dedicating with username and password good now that we have that initialized use an if statement will say if user is not none what this mean is that if the user is not known so for this to be able to work that means we need to even have a user with this password in our database so if we have it that means if it's not none that means if is there if he's present in our database and let's just authenticate and say alt dot login take a request i want to log in this user i'll say return direct to the home page so now when we log the user in we want to return to that to the home page else now this just simply means that if the user is none that means if he's not you know he doesn't really have an account and he's trying to log in with a credential then the message error so the messages that info request let's say again girls invalid and then we just redirected yeah let's copy from here paste so we're just redirecting the user back to this signin page did so for need everything is working here if this if it's the post method get it initialize the authenticate the auth and check if the user is not known then authenticate if it's none give him an error and yeah now let's save this and we also have to come into our signing to add the gift tag that is going to take care of the error messages so we can just come down here and copy that basically the same thing sign in save you come here to sign in and we say if something that is not in our database as soon as it says credential invalid so that's an invalid credential but it really gives something that's in our database which is done and see now it is authenticating and boom it takes us to the home page so this is working fine and and once a user authenticates it takes user to the home page now we want to do two more things we want the user to be able to log out so once these are coming and click logout that should be able to log out and normally be authenticated and also we wanted that where user can access this page the user must be logged in if user tries to come to this page when it's not logging in to be directed to the login url i'm going to show you how to do that first of all let's create a new path for log out out log out onto views f log out and i take a request also so let's just close that up so this logout view is quite easy all we just need to do here the auth a log out request and we now find direct sign in since we have this now and just easily come into the index and search for log out right here out actually where we have log out now just say log out come back in on each refresh from here they log out boom we are logged out and it takes us to the login page to login but one more thing want to do as i said is that if i come to this home page now you see i'm still able to even access this home page while i'm not even logging we want that to stop so for us to do this we're going to use a decorator kangoo has this builtin function that allows us to basically take care of this login like when a user is not logged in or not authenticated want to redirect the user to a page before bringing it back to another so let me show you what i mean by this first of all we are going to need to import something so let's scroll all the way up right here i say from angle dot country dot dot decorators import plugin required this login required is going to allow us to be able to direct a user to the login page if it is not logged in onto our csep as i said also is i want to access this index page you need to be logged in for me to do that now you know i can easily like configure this and say if user is not logged in or is not dedicated then redirect the person well i don't want to do that so what i want to do is because that is like this is a better way to do it just like a line of code i'm just going to say at login required i'm going to specify the login url so that means url it should redirect the user into that is sign in url so if i save this now and i come here this home page as you can see it takes me to this login because i am not logged in and you see automatically after i sign in it takes me to the omp let me go to john and okay that was valid credentials john so right now i can view this page one more thing i need to do is to also put that login required in logout because a user can be logged out already and now come to log out to try and log out so let's just make sure that the user is logging first before you can log out so let's just copy this that's good to go that's basically how to do that and save that and now we have everything done about the authentication to this point so now we can just log in good so to this point now we're able to log in so now let's go ahead and continue with the settings view so this settings view basically is going to be where the user can upload or change his profile image or you can also like add this bio on like a location or change it by you on location so what we want to do first of all in the urls let's create a new url and we're gonna name the url settings we'll just say settings and if you take from the views.settings and name equals settings also views now we need to come here and create a new view and let's mw settings take a request and we just render settings.html which is this page 13.html so now we can save this but before we save we also want to give it this login require decorator and this is because a user can come to settings or to change profile image or something like that if they are not logged in that's just not possible so we give it that and let's save it so now if we go back to check our application to be able to go to slash settings so let's see settings set s once we come here it should basically load up that page good so we have this from here right now so we're going to tweak this form a lot we don't need this we basically don't need most of this what we just want is a file field or an image field the text field for the bio something like this and a location field that's what we want but you know if you want to add your own customization you can add anything you want you can allow these apps to be able to you know update first name and last name work in a relationship even all of this but just for this tutorial what we're going to be doing is just basically the fields we created in our profile model which we didn't set so if i come into model.py you know that we've already set user and user id for each user but we haven't set by your profile image and location so that is the form where user will be able to you know set all of that so what i want to do now i'm going to come to the sign up so now once a user basically is logged in so a user creates an account and right here i said log in user and then redirect to the settings page so that one want to do now so we want to automatically log in that user and redirect to the settings page because now if you're following along you know that once the user sign up nothing is going to happen it just bring the user back to this page but what we want to do is that once the user sign up it should take the user first of all automatically log in the user and then take the user to settings page let's do that so say user underscore login equals to auth.authenticate i want to authenticate with username password i'm going to give you the username that just been created and also password with the password that has just been created so now once we have this we can just use say odds.login down here we'll say earth login take a request i want to log in using this login right here so now it's going to log the user in and then once it logs user in it's going to create a profile object for that user and after saving that profile object we want to redirect the user this settings page by taking the user to the settings page and not back to this i know so this is what we want so we can just go ahead and close this up and if you come to the signing that is taken care of so once the user is logged in just take the user to the home page they can see the post feeds and so that is done and we can just save that what we want to do now is to come into the settings and we want to first of all go to the html page and change some things in here so if basically just go into settings.html so right here we're going to change some things we're going to remove some form tweak some from and yeah so let's get started with that so right here where we have let's see what we want to remove but we have account settings we don't want to remove it actually we just want to add some things in there so you can see here we have account settings right here we want to show like account setting for this user like maybe for john which is the user so whichever user is currently logged in we want to show so first of all and we also want to have a link here where user can go to the home page back because right now isa can just go it has to start removing the url bar to go or pressing back we don't want that we want a link here that will allow user to go so we'll come back here and we have an a tag and i should just take user to the boom i will close it and say home save that and come back here hit refresh so it says um account settings if i click on this um it takes me to the um home page but i want to do something like home slash account settings so we know that that's the directory we are in so let's say um slash account setting but now we say account setting for then we show the user but that user has to be in a bold tag so to show the currently logging user in the jungle template on the html file is what we do you do we open two curly braces and close it and we'll say user.username that's what we do if you want to show the email which i don't know why you showed that but we want to show it to you dot email so let's just hit refresh button so as you can see there's home slash account settings for john rj.com which is the email the user puts when he was logging in let's just say user dot username now we save this it refresh the account settings for john and that is good we've done that next thing we want to do to go back here and then we are going to scroll down first of all all of this ul tag basically don't need it just gonna i mean that out so i'm actually building this from scratcher you know you understand everything that we're going to be doing here and after this let's have like a break just to leave this space so there's a little bit of space there unless i have like a line to demarcate her fresh so there's just a line there just to demarcate this is the title and this the main page now that we have this just close that gap we're gonna come here in this basic we want something like general settings so this should be like the general set let's just change it to general and that's done and now let's tweak the form but before we even do that we don't need privacy also so we're going to scroll down scroll down right here you see where we have this privacy so all the way from here to the end of the privacy div tag i have to close all of that so from here close this that so now that just basically close that div tag for us scroll down yeah so that's good and if we save it and go back you don't have that again because we don't need it and the next thing we want to do is to remove first name last name we want to remove email that about me want to change it to bio want to leave location remove working art and remove relationship so basically just removing the things we don't need and keeping the things that we need yeah first name out me we change this to bio give it an id of bio aim of bio actually we can leave the id but what we need to change is the name because that we're going to be using to get it's in a back end so now the location we're going to leave that and what we need to add is the name for this location so since we have a name just say name equals location good come back here and hit refresh we have value we have location and we don't need working out and relationship so working out relationship click on we will remove that let's save and refresh it so what we want to have now is another field for the profile image so we're going to go up here i've like like this and then when i say profile image this would be a file field a name a profile let's just give the name image let's save this it's refresh so now we have this we have the profile image the bio and the location so i'm also also going to do something like you know when you go to like instagram and you already have a bio once you come to the settings you'll see the bio you already have there so for example let's say we have a value here and we hit save if we hit save and it saves our database when we come back here we don't see that by you yet we want to be able to see that by you so i'm going to do that later and you're basically going to understand what i'm talking about when we do that but first of all since we have all of this done let's just make sure we have our form because all of this needs to be in a form so we can send it to the view so right here that general right yeah but we just need to have here now the form the form i'm gonna go ahead and close that form at the bottom so we using the form right before this other comment somewhere we also have a button to save that we have this save button here okay so we have the save button button it should be right here so let's just leave it down like that and then since we have this done already let's just set an action let's set an action so as always we wanted to come back here another method of post we also need to set up the csrf token so now that we have all this set up we in this button here this button should be submit button first of all we don't need this cancel what or we can do something like once they eat cancer take them to the home page let's just put that in there bash so if they cancel and they don't want to do that again look at the bottom left corner you see that it's taking them to the home page so that's what we want and this save button type button actually the type should be submit just so that it submits this form now we hit refresh maybe okay when it brings back here good so now all of this is working fine next step is to go into our views right here in our views where we have these settings we're gonna have to do a little bit of coding here so what we're gonna do first of all we want to get the particular profile object of this user of the logged in user the user profile goes to profile dot objects dot get user equals to request dot user so basically what this is doing is saying that we have a new variable named user profile and the value we're giving that is profile.object.get that means we're getting a particular object so we're getting the profile object in which the user come back here in which the user is the currently logged in user rightly authenticated user since we have that what we want to do is to pass the mixture in that pass that into our html view like this user profile and user profile so now that we have this if i come into my html settings.html i can actually do something now so as you know as default a user already have like a profile picture i already have a profile image that we gave the user winning first of all from here you'll see that profile image has a default of blank profile picture so let's use that as a profile maybe we should be able to tell the user that there is a profile image here we should be able to give it like a value a default value here and if the user wants to change then you can go ahead and change and also the same thing if the user already has a bio you want to show it here so you can edit or change same for location we're going to come back to settings first of all let's start with the bio so we don't have a value so let's have a value in the bio i know since this is a text area we don't put the value here in here we put the value so we just use it poly braces and we say user profile dot bio since we already sent that from the views in html it should be fine so user profile.bio location this is an input so it needs to have a value if it's having a value it doesn't need a placeholder so let's give value and let's say user profile dot location and this is gonna automatically fill this place in if the user has a buyer or location we refresh we shouldn't see anything yet so we're not submitting it does it enter won't say anything here because this user doesn't even have a buy your location but now let's come to profile image first to do this is gonna be the same actually so what we're just gonna do is say after place order or we don't even need a placeholder i will say value equals to userprofile.profile img now we save this and come here and hit refresh now right here we're supposed to see the current profile image of the user but we're gonna fix that again you know after we do something and i'm gonna also explain why we do that but first of all let's leave this like this and what we want to do is basically just come into use right now once the user hits submit you want to be able to send all these data the views update the data or even create a new data for that particular user so for this image html has this security system that doesn't give a default image so that's why we're not going to be able to use this value for this image now i remember working on a few projects a while ago and we tried to do this but because html has this security system as i said that it won't allow you to put an image or a default image when a form loads just you know for some kind of securities and that's why we're not going to put value for that but the other way to go about this first of all if there is a user we can just display you know the url here that you already have you a profile or you want to update or something or we can just even showcase the profile image here so let's see let's see what we can do and this is not too important but just to make sure that we do something there we can have an image src and that can be from profile user profile dot profile img dot url so let's make sure we change it to dot let's save this first of all and hit refresh as you can see it basically just shows the current profile and if we change it and we're going to change it in a bit where we change it this should change also let's try to i don't know 25 height five i'm just testing the size first how small okay that's too small so let's give it like hundred hundred okay so that is good now we might you might want to put it in another way or any how you want to do it so first of all let me let's say we should have like current image or any i want to do but let's just leave it like this first of all so this is the current profile image that is good now what we just want to do now is to come into the views and right here in the views we're going to say if request dot method equals to post i want to get something and what we want to get first of all once we get if the user actually tries to update the profile image or not and this is because in our models we make sure that this profile image right here is compulsory when submitting a new form we're supposed to have a profile image so we can say if request dot files dot get image equals to none so again there are plenty ways you can do all these things like this is just the way i i'm going to do it in this tutorial so what we're just saying now is that if the request of file.get is equals to none so that means if there is no image being sent then we just want to get only so if we scroll down here well we just say they let's even get the image also image goes to user underscore profile dot profile image what this is doing is that if the user didn't submit any image it's just getting the current image that is ready that these already have and just like submitting that again basically so then we are just getting the bio quest dot post i o and we also do the same for the location let's get the location so now since we have all of this we can just update the user's profile object so now what we want to do first of all because we already have a file being sent so for us to have a file being sent we come into this form right here whenever you are sending a file you need to make sure that you have another like attribute in here so what we want to do because html when and also when working with django we need to configure some things like you know when we use post method we have the csrf token when we're submitting a file in the form we need to make sure that we have enc type and then we'll say multipath slash form data now this must be there because if this is not there it's not going to submit that form it's going to submit the rest it takes the the text area all those values is going to submit them but not going to submit the image or the file and you must make sure you have the same let's just save that now we can come back to the views and in here let's just basically say use the profile dot profile image goes to image do the same thing and say userprofile.bio i want to make it equal to bio also use our profile dot location make it to be exposed to location now that we have all of this let's just say user profile dot save now we've updated that particular model but what if the user is submitting an image so let's say if request quest dot files let's get image it's not equals to none it's exclamation mark it is not none and that means there's something there so now since we have that we're basically just gonna get that image that these are sent to the image equals to quest and now when we're getting image if we write in a post method it's going to be quite different they request dots get result files because we're dealing with files and dot gets when you have a bracket the image so i want to get the value sorry that's image and then we just want to basically do the same thing for the bio so we just copy this so by you adjusting request oppose bio location request of post location and we are saying user profile dot profile image goes to image and the same for bio on location and then we are saving it and once we save it we want to redirect the user to say return direct back to this settings now now we have all of this configured it should totally work let's go ahead test that out and come back here hit refresh now let's change this profile image let's see what we can change it to just allowing that to load up orders and we have all of these images here let's just change it to one of it so it gives it this and let's say bio i am john first nerd and location let's just say manchester now we can save once we save boom see it brings us back to this page but now this profile image has been updated now the buyer says i am joined and i am the coolest net and it gives us okay sk doesn't need to be a nerd so we save that and you can see that also updates let's come to home and if i go back to account settings not sure if i've updated that okay it's just saying settings.html but if we go slash settings you'll see that that bio is there so it has been saved in our database we have the location there also and the profile image saved so if we come right here and then we go to john's profile object what we should see now is john the id is id is bio a link to is profile image under manchester and that thing i want you to see is how this profile image up uh uploaded basically so remember that in here now models said you should upload to profile images as you can see here that's what it did uploaded to prefer images slash i dot jpg whatever the name of the file is so if i come into media now on social book media you can see now that i have a new folder named profile images and in there i have the image that the user uploaded basically that's how we can you know configure these settings so what we just want to do the last thing is to come into index right here we have account setting i want that to go to slash settings that should work and we do not need explore i'm not also up so let's save this and come back here go to home from here now you should be able to go to the account settings to see it and we can change the location let's say it moved unless hit toronto and we save it now the location is toronto go to home come back to the account settings so that is cda basic and we can also cancel like we don't want to do it brings us back here so for now we've been able to have the account settings for the user where he can update his bio his location and his profile image now let's move to the next step let's get working with a user being able to upload a post the first thing we want to do is to go into our models.py file and right here i want to create a new model for the post to say class post models dot model and we wanted to have an id we also wanted to have the user and it should be the user name i wanted to have the image which the user is uploading a caption of that image created at as a date posted a name that created that and the number of likes so uh giving it all of this field and id we're gonna use the uuid field so first of all we need to come up and import uid so this uuid just helps us to generate a unique id for you know this particular field for each of the post and we also want to import something else want to import date time so say from date time import date time so this date time is going to take care of this created at so it will get the data that post was created or uploaded now for the id let's say models dot uuid fit and we'll say primary key equals true so this primary key question means is like this is the id now of this particular post the identification of each of the objects now this is because once we have an id as a default jungle creates an id for us which just has like the first post we have an id of zero second post one two three and so on but we want to change that i want to give you this unique id so it's gonna have like a long character but it's going to be very unique i want to set that to the main id of each of the objects so it's basically replacing the initial id when we say primary key equals true but anyways anytime we are using an id field in a django model we need to say primary key equals true in order to just give us an error anyway so now let's say default pause uid dot uid4 so now this is what we need we are using the uuid field primary key is set to true and the default is guid dot uid4 so now the user this time around we're not using a foreign key i know he's in i'm not joining them together what i'm just going to use is a character field and this is what is going to go in here is the username that's the owner of the post so let's just say android and then image image is going to be an image field the models dot image field upload to and then we'll say let's upload it to let's say post images the other one which was this we uploaded it to profile images but this time around we want to upload it to post images they post underscore images so that is done and the next one is caption now this is just going to be a text field in models dot text field and you don't need to put anything in there created at is going to be a dates time field we'll say models dots date time field right here i'll give a default of date time equals now it'll say default will have to be equals to deep time close that up so defaults date time equals that and now next one is the number of likes okay models that's integer field i have to give it a default equals zero because when a user just upload a post the initial likes number should be zero and when someone like then it will be increasing when someone dislikes you to decrease so let's just return it in with close itself we'll say return self dot user this time not a user.username go to user just because this is not a foreign key so it's not an object that has been passed in here philippine patent here is just the username so dot user now we can save this and now that we have this saved we can just come into our command prompt first of all we want to opt out of a server that is already running and then we are going to make migrations and migrate python manage dot py make migrations so this command line is just gonna as i said earlier you're gonna change or make this the changes save the changes that we made in our windows or py file it's going to save it into a file named initial i'm going to save it into okay so it gives us an error as no attributes uid field okay so the error right here is that this uid field supposed to be more better let's just run that again each of the changes is saved into a brand new file so if we come to this file use yes so zero zero one initial then the more migrations we make um let's just wait for that make migrations and when we migrate you're going to see that there's a new file here okay exactly so we made migrations that worked a new file is being created it's just updating it that's the way django just so you don't really need to understand why that is that's just the way django works with make migrations and migrate that's what happens when you run that command i need dot py migrate and now this is just going to migrate into our database for us very simple stuff good now let's run our server again and that's good so now that we have this in our database let's make sure that it's running so we can go check before we check let's register this in our admin panel to open admin dot py just say post post now that we have that we can close this up and we can basically just go into our admin panel right here and we come to home so once we come to home now under core and that is called app we should see profiles and we should also see posts with yes just wait for that to load click on good as you can see now we have this post model and this is where we're going to be storing all the posts that every single user on our platform makes so that's good now let's go back in there and the next thing we want to do now is to go into urls.py and create a new url for take care of uploading a post should be upload load upload i will come into our views on and just right here we have a new view a new function takes a request and let's just turn an http response for now upload view we don't just want to leave the response block so we don't get an error by just returning an http response and one more thing let's also add this plugin required in upload so that a user can just go to our website and try to upload or try to you know send some data to it even let's save this and let's save this now that we have that done i'm going to come into our index.html let me quickly go to our website right here where we see upload pics or videos so once we click on it it's going to open this so we want the user to be able to choose file and we want there to be a box for caption so you know the user can see a caption or see a field where you can input the caption and they should also be a submit field so now let's just go ahead and do that first of all we're not uploading videos so we just changed upload peaks too that's but where it is between peaks right here changes it peaks here also changes to x now let's see the next thing we want to do so before we even continue i want us to be able to have like a text around that area that says welcome user so the user might be around this area that can say welcome like john i think john is the one logged in now so john we know he is logged in and another thing is we want to change this particular icon this is just a default icon now we want to change it to the profile picture of the currently logged in user let's go ahead and do that now let's go to where we have this image what i'm just gonna do right click on it and i'm going to copy the image link i'm going to search for that image right here but i'm going to set up here good right here we can see it what we're looking for we actually have it in i think 10 different plates as we can see here so okay i think this is it so right here what we just need to do we need to pass we need to go into the views of the index and we need to get the profile object and then pass it in here so we're going to come into use right here i'm going to say user object so let's get the user object and we'll say user dot objects that get one in which the username is equals to request that user name so now we have the object of the currently logged in user and now we want to get the user profile object the user profile will be equals to profile dot objects dot get the one in which the user equals to the user object now i hope you understand what i did so first of all i got the object of the currently logging user now that i have that object i use it to get the profile now if we come into models file we will be able to see that in here first to get the particular object with the user we need to provide the object of the user since we're using a foreign key why isn't a foreign camera connecting it to this user model so to get the objects a profile object of a specific user we need to provide the profile the user object if you understand we can also drive it another way we can provide the user id but i just feel like this is better way so now that we have the that profile object what we can just do is to pass that into our html just copy this now let's say user profile goes to user profile and what this is doing is i basically just sending this variable of user profile into our html so right here now if i come to index and remove this we can access that using the user profile the dots and let's see what we use to save it is profile image dot profile image dot url so we use dot url when i want to get the url of an image view or a file field in general now if i save this and i come here and i hit refresh but i shouldn't see this image yet good so i see the image of the currently logged in user if i go to account settings and change the profile image the new profile image so we have that done the next thing we want to do is to have the welcome done or welcome whatever the username is so we're gonna scroll up a little bit first of all now to some things so right from this div up here and a comment that out and also this just as we are going the ones we don't need what can speed them up now that we have that all i just want to do and it fresh let's see we have upload page before this upload peaks we want to have let's see i think we can cancel this now and we have the upload here so let's look for something behind it so let's see please upload uh for that good so now we are in the form basically right here this is the input for the file where it says choose file and what we can do right now we need to make sure that this is inside a form so we can basically post that form in there so up in here where we see import videos from youtube that's not here but okay so let's just scroll up uh so basically when you have a template you just wait to look for how to or where to put your form okay so this is please upload uh so we want to put the formula say around here before upload peaks see okay good so the form should be here we have the form here cut this out and wherever that div is ending that is where we're going he says the div ends here close it is actually that okay so we're closing the form here we're opening the form here and this is not part of the can actually leave this but age it's maximum and yes so now all of this is inside the form now that all of this is inside the form we can have like an input for each of them so what we just want to do right here where we have scroll up a little bit peaks of videos i'm going to scroll up to the pain of the form so this combine that out and hit refresh let's see okay so you don't need to comment that out upload peaks or videos so let's just say upload x if we say that now we have a file field is what we want just hit refresh make sure everything is working all right so now we have a file field which is what we want and what we're just going to do is to come here we're going to remove it from this custom div i'm going to a from custom i'm going to save that and now under here we're going to have type so from here af class uk text all right so now what we want to do is to say the type of the file and then name equals to image underscore upload so we save that hit refresh okay so we have this field now we don't need this of all so it says choose file which is the image that we want to upload and the next thing we want to have is like a text area so let's go back there so we want to have a text area beneath so we can still be inside this div tag just have text area let's just close now that we have this say let's give it a class button soft running and small just give it a styling fix that in there so now that we have that we can give you the name and the placeholder and stuff like that let's say name equals caption placeholder equals caption and just have like three dots now let's hit refresh and see how the form looks if we upload ps okay good so now right here basically have here where it says choose image and right here also we have the place for the form to place for the caption in the form so now let's have a break i have a button so what we want to do in this button is button i want to give it a class so it would you know have the styling so let's say class pause to 700 and let's give it a name or a type this button should be a submit type so since we have these right in here and say upload since we have upload let's also give this this styling of button from here that class let's see our button looks alright so it says upload the caption the image and good don't want to remove this or upload i don't need that and actually what we can do is we can have our form right here and we can close the form after this div tag right here i just close the form then indented well and then we can come down here we add that form get the form somewhere so right here move the form there scroll up or not there so this is in a form that's good actually what we just need to do go up to where the phone begins for this we have added the formula yes and remove that now through back of it down that phone so now that is good so now that we have this form we can basically continue with what we want to do what we just want to do now is to you know allow these to be able to upload an image put the caption hit upload send it to our view and then create a new object for those data with those data so now where we have our form right here right here and say action should go upload and then method should be post and one more thing since we are dealing with we have files in here we have to put nc type multipart flash from iphone data and this works and now we can hit save so since we have all of this now being sent to this upload view and come back in here and in our upload view we can basically get all those data so now in our upload view the first thing we want to get is if the request the method is post if request the method equals to post will do a specific thing that's when we'll create data but if it's not equals to post that means if it is i just try to go to slash upload without even posting anything let's just return the user to the home page so that's good now if it's a post method let's first of all get the user the image caption and yeah that's all we need so for the user it equals to request dot user that username so if we come into our module.py let's see what we need to give in our post we don't need to put the uuid as a default we need to give it a user we need to give it the image and the caption you don't need to give it the creator that and no like so just the image and caption right now so say image caption the image is equals to quest dot files dot get image upload let's just go ahead and confirm that right here in our form this image name was image upload and then for caption press dot post caption that's that and now we can just easily create a new one we can just say new post and be equals to post well we use post yeah we need to import posts probably not imported that we imported profiles now that we have post imported we can say post dot objects dot create user equals to the the also want to give it the image so you will give it user image and caption so the image goes to image caption equals to caption now we've given it all these details and come to the next line now and say new post let's say so after saving it we just want to redirect a return direct on page now this should work come back here and let's hit refresh okay it's not running let's wait for this to reload and once they should load we can test that out basically so loading now we can come into upload peaks unless the peak from here that should open up oda our money job is i'm sure able to choose a peak and let's just anyone and we'll say nature let's upload so it gives us this for three forbidden and now this is because in our form right here we used a post method but we didn't add the srf2 so that must yeah let's save this and go back try to upload again um here it's upload good so it brings us back here it doesn't tell us anything doesn't show us anything yet well we come into the admin panel and hit refresh be able to see a new post object created so let's wait for that to load do it so now we see a new post object created for john and we can have all the details of that post so let's wait for that too and i'm also going to explain something in this url so you can see now the id which we includes the name a link to the image option the date it was rated at and now it has zero like so remember when i said this uuid now replaces the id when we say primary key equals true so now in the link that is the identification for that post so that's what i was talking about when i say when we set primary key equals true so that replaces the initial id that django provides and use that as the id so now we are able to upload the post and allow everything show like this and allow you know it to save into our database and allow everything show like this what we should do now is to return everything and show it in the post feed when we come in here as you can see this is still just showing all this static images or these dumb images that we put there so what we want to do now is to change this and once we get all these images and the person that it whatever once we get it from our database let's do that so now what we want to do is to go ahead and customize this post feed so right here once a user logs in what we want the user to see is a list of posts a random post but for now because we've not implemented the picture of being able to follow a user what we're just going to do is to show a post of a list of all the posts we have in our database so because we don't have the followers i'm following when we implement that we're going to be able to show only the posts of the users that the logged in user is following so you know like when you log into instagram or any other social media that you see the post of people you're following or related or anything related to that so that we're gonna do later in this video but for now let's just take away these static images and stuff and let's change it to a list of all the posts we have in our database so actually this is very easy what we just need to do is to come into our index view and right here in our index view we're just gonna say so we don't need upload again and collapse that and right here what we want to get is we can say feed list or let's just say post equals to post dot object dot o now this is all we need to write and we can just pass it in here by using a comma and then like that so now we can save this and now that we have this saved we can come into index and right here in index what we can just search for first of all we want to come and look for where we have these these other ones the ones below it we want to delete any other one we have below it we just want to leave this one and then we're going to loop through it so we're going to come so we have this right here but since we have this right here at some middle underscore ml we know that that's the one for this so post error post one but this is under post one good post too let's also collapse that load more let's collab that we're gonna just remove all this basically post three post four load more yeah so we want to delete all of this we just want to keep only one so we deleted everything to those two now if i save it and come back in here what i should be seeing is just only this first plus good so this is all we have now and what we just want to do is to open that back let's close that back first of all so this post want to loop through it in jungle when we are sending a list we come back here now when we are sending a list from here so we said post.object or this is basically returning to us as a list so this that we pass into the view is a list if we come in here now we can basically look through that list and just display the data we got so we can say for posts in posts and then we're gonna end the for loop now that we've used the for loop we can change this to the post dot now coming to our models dot py file to depose the user so this will change to the username of the person that posted it and let's try that out so that is john so for now is we just have this job basically just because you know the what is getting from the database as the user of john so we also want to change the image to the image that this john uploaded and yeah so i'm going to scroll down so we have this delete post function which you're also going to take care of later right here where we have image src so i want to have post dot image dot url and we hit refresh good so you can see that is the image we uploaded that we have here now and i just want to change the link because right now if i click on this it's still going to that image that we had earlier but now i want to change that to this image so let's just change that this image so whatever image it is is what it should go to if i click on it it opens that image larger so now the next thing we want to do is to have like a caption so for us to have a caption we're just going to look for where we can put that caption so we're going to scroll down here we have the likes so if we come down here i think we have it right here where it says like spy so in this place we're just gonna basically have a caption and we can say first of all let's see once you remove all of these so you need this not need this and let it refresh okay good so we're just basically taking out all the things we don't want and now let's see let's see what we have now you know we need that take this away see okay so right under here we want to have the caption and well we have the caption we have like the person that posted it and then the caption so let's do that right now and what we're just going to do so having it right under here so where we have is right here we are just going to say let's have a p tag and in that b tag let's have an a tag so this a tag is going to be the user so say post.user and then we also want to have the caption of that post post dot caption let's save it and hit refresh so now we have this this is the user and then we have the caption so now we have this but doesn't look well let's like give this one a strong tag and let's also link it so what i want to do now is to cut this out this trunk paste that in there so we have john now strong and this so this and this we wanted that once a user clicks on one of these if you take the user to the profile page of this user we've now yet set up the profile page fixture but let's just give it an a tag first of all so this has an a tag but it should stop here so let's just give it a link let it go to ash first of all and if we scroll up where we have the post dot user that should also be in a link like so a put that back in there give it that and give it an ash now we come back here and hit refresh once we click on it it just basically brings us to this ash but later when we've taken care of the profile in the profile page feature then we'll be able to link that and also we're also going to do it that if this post is for logged in user then the user should be able to delete this post but basically now we are able to upload a picture and just showcase it in the feed let's try that out now if we upload a pix we wait for that to load up the files and now let's upload this and let's say the word it's beautiful and then we hit upload so now that we upload we have this right here so you can see now that we have the second image right here like what is in our database is what is showing right here now but as you can see the second one is what is down so we basically want to have the latest posts at the top so to do that we can come in here and say for post in post reversed hit refresh now you see we have the latest boost right here so we've been able to take care of the field the photos feed and let's move to the next step so now we stopped at this post feed where we can just easily get the data of all the objects we have in the post model in our database so as you can see right now we just have all the posts we have stored in our database well normally we are not going to stop this post feed just like this because that doesn't make sense we want to be able to customize it for each specific user that means we want to get the post of the user that i am following so not just all the posts we have in the database but since as i said in the last section since we've not implemented that yet we're just going to stick to this stick with this for now and what i want to do is to be able to like a post so this button here once the user clicks on it we want the user to be able to like that post and also right here it should be updated like um this post has three like this blues has four likes and we should once we unclick from that button again we should be able to unlike the post so let's just go ahead and do that now we're just gonna come in here the first thing we want to do is to have a url where we're gonna be submitting you know the data of which post we are liking and who is liking that post so we're going to come here now we're just going to copy and paste that and we're going to have a new path we're going to name it like i think post so we're just gonna copy this put it in there for the name and then for the views the views can't have an iphone it needs to have an underscore so now let's just copy that for the view and right here in views we're going to close this for now let's create a like post function and then we can just create it like under upload right here df like post take a request and let's pass first of all and we also want it to have login required so urls we save these also now this is good the next thing we want to do is to come into our index.html so right here let's see where we have that like button we want to be able to link it to submit like a mini form not really a form but let's see where we have the like button first of all so this like button right above john and then that should be down here okay so this is the like button i suppose no this is the other button to download so now this is the like button and as you can see that like button is already linking somewhere which has an edge so what we want to do is to change it to slash like post like i've imposed so now once you use that click on this you go to slash like i've imposed but you want to go there by sending some data so let's send posts id so want to send the post id and the post id will be post dot id let's save this and check this out i'm gonna refresh this page now and then once i overrun this button if you look at the bottom left corner you're gonna see that we have slash like posts a question mark name post underscore id equals to the id of that specific post now we go to the next one we see the id of that post so each post has a different unique id but since now once we click on that we're sending it to that view it's going to give us an error now that this particular place does not return anything so it doesn't have written an http object but that's for now but what we want to do is once we click on that it will take us to that view but within like a millisecond it's going to take us to that view automatically create a new object in our database and that object is going to be under a model that we're going to create and that model is going to take you over liking post so when a user likes a post you're going to create an object app this post id was liked by this user so that object is that module is going to have two fields and then once it does that it's going to check if the user has liked this post already or he has not liked this post so if he has like this post is going to update that and he does not like this post if he has liked this post he's going to update that here by reducing the likes but we are not like this post what you're going to do is to increase the likes so now let's just go ahead and do that and once that is done we want you to redirect us back to this right here in our modules file first thing we want to do is to have a new model say class like post and that should obviously take from the model dot models and what we just want to do is to have a post underscore id and that should just be a models dot character field and let's have a max length like 100 and the username that's the name of the user that is liking this post let's say models.character field and i should have a max length 100 and let's say df the r itself i'm just gonna do is to return self.username so this is what we have now and what we want to do before we have unreal migration is to go ahead and import that here in admins.py file so we can register it in our admin panel copy paste copy this paste and save so now that should be registered but before we go and view that let's make sure we come here it gives us an error i said models.model does not doesn't exist should be model.model that models dot model i come back in now i'm cut out of that okay so that you just got out of that and i will say python manage dot py make migrations and this will save the changes and tell us what has been updated now we can say python manage dot py migrate now this is just going to migrate that to our database good now let's run our server back and once we have our server running good we can just come back to our browser and actually the tab where i remember i opened an incognito tab by private window where i log the admin user in i close that tab so just have to open that again and quickly log in the admin user so slash admin and remember that earlier in this tutorial we created unique admin user let's just log that in good so now we log in now we now see a new model called like posts so now once a user like a post issue update here i'm also using unlike you should also update here let's just go ahead and do that so to this point now we've created the model right here we've been able to link to where the user will be able to save whatever the user is doing without liking your own liking and what we just need to do nice to go to this view the view of this url and now collect this data and do the rest so now let's import like post and right here where we have this like post the first thing that we want to do to just get the username of the currently logged in user to say request.user but username so that's that just got the username of the currently logged in user and then the post id which was sent from our template so say request dot get dot get and what we just want to do is to get post underscore id so we have that now and then what we want to do is to get the post object so since we have the id of that post we want to get the object the entire object of that post to say post is equal to posts posts dot objects so this post is actually the post model which we imported if i scroll up here right here you see we have that post suppose dot objects dot get want to get the one in which the id is equal to the post id that has been sent so now that we have that what we just want to do we want to first of all check as this user liked this post before so we want to check if this specific post has been liked by the currently logged in user so that we know whether we want to like or unlike so what we're just going to do is say like like filter don't want to filter the database and say like post dot objects dot filter post underscore id equals post underscore id so let me before i continue let me quickly explain what i want to do so i want to get if there is actually an object in our database in which the post id if i come to my models in which the post id is equals to the currently post the current post that has been sent here and the username is equals to the currently logged in username now if we have an object like that that means this user has really liked this post so we know that we need to unlock that's what i want to do well if you are very familiar with jungle you know that when i want to get just one model i mean just one object i need to use dot gets not the filter but that's when i want to get just one model and that's what i want to do here i just want to check if one model exists but if i do that in this case it's going to throw me an error because right here i am basically not if that does not exist it's going to throw me an error now i can use an if statement and say if like those post dots gets blah blah blah exists or not but it's still going to throw me an error and to solve that what we just want to do is to use filter now when we have filter we can just say onto fuel tank with the post style is equal to this post id and then the username is equals to this username that we got which is the currently logged in user so if we have that already what we want to do now is to say at the end of this because as we know this is going to give us back a list but we don't want to get one module one object we'll say dot first so now this is going to give us just the first one it gets which should even be only one in the first place so now that we have this what we can just say is i'm just going to come here and i'm going to say if like filter is equals to none now this means that if it checked through the database and you didn't see any object that corresponds with these inputs that i gave then that means the user has no you like this post so we want the user to be able to like display us so say new like would be equals to like post dot object dot create i want to create a new one in which the post id equals to post id the username equals to username now we can just say new like dot save and now the next thing we want to do the reason why we got this post object so remember that once we got to the id of the post we have to get the object that post now this is because if we come back here we'll see that in this post object we have a field called number of likes now we just want to increase the number of likes when a user likes that post and decrease the number of like when the user unlikes that post so let's do that right here now after saving that after creating a new like object what we can just do is to say post dot number of likes should be equals to post dot number of likes for this time around plus one since a new user is liking this post now we can just also say post dot save after saving the letters return redirect the user back to the home page so this should work now when a user tries to like the post it should create a new object in the database but after this what if this query that we try to search for already exists that means the user already likes this post then we want users to be able to unlike this post what we would just say is like filter dot delete so we just want to delete that particular object that we got since it is i want to unlike it and then we'll say post the number of likes this time around 1 and we can just say post dot save and we can also do the same thing by redirecting the user we say return redirect the user back to the home page so now let's save this and then let's go ahead and test this out so first of all if we click refresh we see that we have no post object here but we come here now and hit refresh and we try to like this so nothing shows it didn't return any response but if we come back here and hit refresh we now see that we have a new object and if we go in there we have the post id and the username of the user that liked that post well if we click on that like button again and we come here and hit refresh we'll see that that is gone and that is because these are unliked so these are unliked we don't want to have that object again so one more thing let's just try to like this other post so now we come here we obviously have that here now and if we go to that post which is i think the latest one will now see okay so it's not this one is the second one that's post you go to the second one now we see that it has the number of likes is one well if i come back here and pick it again and i come here i need to refresh now the number of likes is but that basically just fix or solves that that we want to do now the next thing we want to do is to just show like the number of likes this particular post have we want to show it on there so what we should do in there is to go into the index the py index index.html actually i'm going to come in here and then just write on the here so right here what we want to have is just to say let's just make sure we are in the right place here right here okay so what we want to have right now is have it on the inside the same div tag so want to have like a p tag and let's just say liked by one person let's give it like that unless it refresh okay so it just is like by one person for everything but we're gonna get the data from the back end so this is liked by one person okay but even if it's not like by one person it just says that to change this now what we want to do to come into our views dot py actually we don't need to go into our views.py because right here we're already getting all the post objects and we are sending it here so each of what we are looking through already as the number of likes because each of the post object has the number of likes filled in there so now we can use this field just come in here and say liked by post.number of likes person so now you see this one says like by zero person you don't say like by zero person if i like it now it says like by one person but this is the same like by zero person because nobody liked it but if i say if i like it one person i dislike this zero person so that's what we want to do to that but this is wrong grammatically in english so let's just change this to be right so what we want to do is use an if statement in the jungle templating style so we can say if post dot number of likes is equals to zero then what we want to do let's copy and paste this is to say no likes no likes so since reports have no likes let's just say no likes but want to have an else if statement so just say alif post dot number of likes if it's equals to one i will say liked by one person but now if it's equals to anything except zero and one that means it is from two above so now we can say else liked by whatever people just make sure that is right and now we can just simply end that if statement so this is just the way we write a simple if statement in the jungle time register so we create this statement like this and this is where we end it now in python we just end the statement using the indentations python already understand but since html the indentation doesn't really matter here we have to end it using the tags so now we save that we are coming and hit refresh this says no likes because it doesn't have a like but this is like by one person so this i have no likes if i like it now it says like by one person wonder person like it now it should say liked by two people so now we've taken care of that everything is working with the likes to this section so now that we are done with allowing a user to like a post and showing the amount of likes that that post have the next thing we want to do is to customize the profile page so right now to this point we don't have any profile page so that means if we see a post and we click on the username it doesn't take us the profile page of that user and we can't even see our own profile page so let's go ahead and add that picture now we're just going to go back to vs code and we're going to come into the urls.py file so in here the first thing i want to do is to create a new url so under let's say upload i can just say profile and what i can say after this profile is slash and i'll say str column pk and then i can close it so now this is basically just gonna have the profile page slash the user so that's gonna be the link to get a user's profile page and i can take it to views dot profile right here and the name can also be profile so now i can come into views and i can just close up this like post and right here i can say def profile request and i'll just return render request profile dot html so this profile is coming from this profile.html so that's the template we're gonna use so now to be able to go to user's profile we need to go to profile slash the username that's what we're gonna do so first of all let's go into our app and see what that is going to give us so let's say profile slash so the username goes here but now nothing is going to happen because we didn't even collect this so right here after you know specifying requests we also need to specify the pk so the pk is what we collected from the url right here we said pk is the name or is the key and the data type is a string so we can come back here and just save this since we collected it yes it refresh press yeah our app is running and let's see good so this is just the demo profile page very simple and as you can see just have this image we can go to the ohm and it has this dummy like numbers now right here and there's a button to follow and all this so what i want to do now is to customize this so first of all like when we enter like john then we should see all the details of john of this if you see his profile image user name is bio of the post and me as the currently login user should be able to follow him i'm also going to do that after this section what we want to do now is to go into the views of this profile first of all let's also add this login required and now what we just want to do is to get the user object first of all of this user that we're passing i'm going to say user underscore object it'll be equals to user dot objects dot get user name equals to pk now that we have the user object we can get the user profile using the object the user underscore profile equals to profile dot objects dot get the one in which user is equals to user object and now that we have that we can basically pass this user profile what we want to do first of all is to pass the let's pass the user object okay because we're going to pass a lot of things like if we come in here we're going to pass the user object user profile i'm going to pass the amount of posts that i use i have it's better we do this in the context so let's move this first of all and say context and the equals to no not a list like this and we can say user object give it user object and also the user profile give it the user profile and let's see another thing we need to pass so we are passing the user object just so we can guess like the username of the user we already have that but let's just pass it we later we might want to get you might need a data from that object later but what we really need is this pro user profile because that's where the profile is made by your goals but another thing you want to get is the amount of posts that specific user have so to do this we are going to have to say user posts now is equal to post dot object dot filter i want to filter the one in which user is equals to pk so if we come here to confirm in the post model the user is just a character field which we are giving us the username so the one in which user is equals to pk as we know this pk is the username of the currently viewed user so the one in which users go to pk that's a post that is belonging to this user that we're looking for so once we have that we just query all of it and what we can just do we can say user post length is equals to let's say len and we can just find the length of this outpost now once we find the length or once we get the length of this user post we can be able to use that right here so we can just say the amount of post another thing we can do now since we already have all the users all the posts of this user we can just render it here so we can also click on it you know to view that specific image so we're just gonna do is to come back and once we come back here now we're gonna pass this and say use our post and also user post length and they just have a comma and now we can just pass context now let's save this now that we have this saved what we can do first of all we can use this user profile now we're going to come into profile.ht and right here you can see that we have the username of what we're just gonna say is user profile dot user dot username and we come here and hit refresh what we should see in the title is profile iphone john let's come back here and see what's up so okay right here we have one we didn't let's see okay right here should be colon and that should reload good so if we come here now and hit refresh as you can see now we have profile iphone john good so now what we want to do is to just scroll down first of all let's copy this profile i think john so we're just gonna copy this tag i'm gonna come down to where we have the user name so let's see this is where the bio is damaged username should be up right here where we have the user name we are just going to say user profile user.username and for the bio value goes here so right here we say userprofile.bio it doesn't need a user anymore any other thing so that's for that and let's go ahead and check that out so now we see john and here we see user provided by you that's because we used only one we scroll down only one tag to close it so that should not be now if we hit refresh we see the value of the user i am done i am the coolest kid now let's scroll up back and let's add the profile image of john so what do we need to do that is right here what we need is user profile dot profile img let's save that and hit refresh that doesn't work because we need to say dot url so whenever we're getting an image we need a dot url to get a specific area of that image that it refreshed good so now we have the profile image of john and this where we have let's see scroll down here we have upload profile photo we don't need this because we already have where so if you come here you see we have this we don't want that because right there where user can upload profile photo in the home page but this is working so we have the username profile picture the bio i want to have the amount of posts we're not going to do for these followers i'm following for now because we haven't implemented our picture we're going to come back to it once we have done that so let's go ahead and say and configure this post so let's search for where we have 11 post so right here what we're just going to say is come back in here now you see we passed user post length so we're just going to say we're going to change this 11 user post length post so these are two posts so what we can just do here also now is to use an if statement so let's just and say if zappos lens dot post is equals to zero then we can just simply say no post like you just have no post and we can copy this again and we can say l if is that personality equals one and we can say one post dummies with anything more than that then copy these and paste and we can say posts now we have that so now you say two posts with an s so we have an error so use our post length so right here says we didn't close the if tag what we just need to do to come down where we have this and just basically post close that if tag by saying end if now we save that and hit refresh we have to post the next thing we want to do now is this profile is this posts as you can see we just have three lists of posts right here but what we really want to have is the amount of post the user has then it should just show the image and one user clicks on that image should open the image wider so that is what we want to have and let's go ahead that if we come back in here now oh we're just gonna say i'm gonna scroll down all the way down to right here so you can see we have one two three gonna remove that and what we're gonna say is right here in this list i'm gonna say for let's say for posts in and right here we sent user posts all the posts and user posts let's just go ahead and enter a for loop right here i'm saying for post in user posts what we want to do is just to show the url of that image that post we're going to remove all of these we're gonna say post dot image dot url let's save it and hit refresh and we see the two posts and that in those images we click we click on it still take us to this image so to do that i'm just going to copy exactly the same thing and change it for you so let's just cancel of that let's hit refresh once we click on one it takes us to the one for that you click on the other one takes us to the full image of that so as you can see what we are just doing now is that we got everything we need all the data we need and then we just looped through it in here since we have all of this done now we are pretty much done with this profile image so yeah now let's continue with the next part of this project so in the template of this profile page once we click on this image it's just meant to like pop up a model here that's going to allow us to like slide through all of the images as posted so that is not working what is just happening is that it's taking us to the full image so that means there is a problem somewhere if we try to look for it we'll notice that it's probably from the static because all those type of stuff would will for sure be done with javascript so we should make sure we link all the javascript in here and we scroll here we'll see that this is just a plain linking without the static or the jungle static template so what we just need to do is to add static and also close it right here so once we have that on it's safe so let's wait for that to refresh and now that that has reloaded once we click on it boom what it just does down here you see it says one out of two so if we scroll it takes us to the next image if these are plus another one takes us to the next one now that's what is beautiful about this time so now the fixture we want to add now is the following and unfollowing feature right now we just have those button if we click on it nothing is going to happen what we want to do is that once we click on this follow we want the user that is currently logged in to be able to follow the user that is on this page so that is basically what we want now but first of all let's go ahead and go to the home and once we go to the home let's just log out so i want us to create a new account and let's create thumb on my g dot co let's give it a password and sign up so now that we have that and save that let's just give it this default profile image and say i am tom and i screw student and i can say is located let's say new york and let's just hit save now we can go home and basically we just still see the post of john you know we can like the post likes by one person and what we want to do now is to be able to go to john's profile so now we are in jump profile the reason why i did this is because we want to be able to follow john from another pro another account because we are logged in as john and we're viewing our own profile and later i was still going to change that if i am logged in i am i'm viewing my own profile i shouldn't even see this follow button like i can't follow myself that's impossible so i shouldn't see that i'm also going to add that at some time in this video but first of all since we have this now let's go ahead and coding so we're just going to come back to ps code first we want to do is to create a model for this followers account so again we'll say class and we just say followers count i'll say models dot model and this will just take two fields first one will be follower that's the person that is following that dot chart field max underscore length so what's going to go into this particular field is the username of the person that is following another user and user now is the person that is being followed character field marks on the score length was 100 so now let's just turn or show person that has been followed as the username of the person that has been followed the return of that user we can save this now and come into our command prompt we're just going to go ahead and opt out of this server first of all and we're going to run make migrations and then after making migrations we just want to migrate the database is python money dot py migrate that's done and let's just run our server again so as that is trying to run we're gonna come in here and we want to register these new followers account model we want to register it in our admin panel so we have to open admin dot py import that and register it like this so that's going to register it for us and now if we come right here and we go to home we should now see followers count so this is just going to store the data of everybody following each other who is following who is being followed that's going to store it and later on we're going to be able to use that to guess get the amount of people that is following a user and the amount of people that user is following so now that we have these we have this followers account let's now create a new url now this new url is gonna so let me come back here once you use that click on follow the request is gonna be sent to that url to you know create or update that particular followers object let's come back here now we're gonna create a new url on this url we can just make it we can make it follow so we can save views that follow name dot name cos follow and we can add a new view and say request and let's just pass first of all and then this we also need to be logged in before we can access following picture before we can follow a user now let's just save that so now that we have all of these what we just want to do is to come into our profile page then we're gonna just wrap this is already wrapped in a form and what we're just gonna do is to have some fields and use this follow like as a submit button to trigger that the trigger that requests to be sent to this photo url and then once we do that we're going to come here get all those values and then create an object let's come into profile and as you can see with the template already wraps this in the form and since this is enough form already what we can just do is to specify the method and the action so we can say action first of all that's where is this going to let's take you to dot follow slash follow and the method is post whenever using a post method make sure to add our csrf token so now that we have all of these what we just want to do is to come in here right here where we have this button let's just make that a part what we want to do now first of all we want to have an input field but the type of this field wants it to be hidden and want to give it like a value of user dot user name so what we're getting is a currently logged in user actually we can also do this on the you know on the back end on the views like when we trigger that button once we come here we can just get it currently logged in user you can do it anyhow you like this is just showing you know multiple ways you can do it or anyhow you feel is more secure or that you prefer to run your application or counsel do it like this might not be as secure as donated backing but this is also another method what we can just do now is to say name is equals to follower so this is the person that is following another user that's a currently logged in user that's the authenticated user i want to have another field also so the other field is also going to be hidden and this one is going to be user object dot username so this user object is this the user of this person who are viewing the profile we're viewing or just getting a username and then this one should be user so since we have those two inputs now right here this button we're going to make it submit button so we can just say type equals button so since this is already been made submit button we are basically good to go because this is ready a submit button that means what when we click this button it sends these two values to slash follow now you can go to slash follow and go collect all of these values so right here in follow first thing we're going to do is to say if request the method equals to post first of all let's pass then we can say else return redirect let's say to the home page so if is a post method we're going to do what we want to do why is there a post method and someone just trying to access slash follow without doing anything just redirect the person to the home page so now that we have that what we want to do now is to get the follower as the person being full not the person that is following someone else we can say request dot post follower now let's also say for the user and that's request the exposed user so since we have these details now let's first of all import that follower account model now that we have this model we can come in here and what we want to do we first of all want to check if this person is already following if the currently logging user is already following this user so the only way we can check is we're going to query the database and say does is there an object in which the follower is the currently logged in user and the user is the person that is being viewed so if there's an object like that that means that this user is already following that user and is trying to unfollow that user or if there's not an object like that that means the user wants to follow this to say if follower count dot objects dot filter now i don't want to get one object but i explained earlier in this tutorial why we are using dot filter but filter the one in which follower is equals to follower and then user is equals to user then dot first very important so if this exists we want to delete that so say delete follower now because of follower account dot object dot get this time around since you already know that exists equals follower and user is equals to user so we're just getting the specific object in which this is true and once we have that i'm just going to say delete your follower dot delete and now we can just return redirect back to the profile page of that specific user but this is only if the person already follows and is trying to unfollow but what if the person doesn't follow yet and is trying to really follow this user say else new follower equals to follow account.object.create the one in which follower is equals to follower and user equals to user now say new follower.save and we're just also gonna redirect back to the page of that user now let's see all this is working now it should be working now let's go ahead and test it we're gonna come in here let's first come to our modules and make sure that i confirm that there is no object here we hit the refresh button now and we say follow as you can see it brings us back to this page we don't get anything we don't even know that we followed we're gonna do that later and show the user that you really follow this user but we come back here and hit refresh you see a new object being created so as we can see a new object wasn't created from here let's see why okay it doesn't even give us an error here let's try to opt out of the server and run that again and everything seems to be working here so that should definitely work let's try to do that again let's first of all refresh this page i think that was the error we did we didn't refresh the page but anyways let's say follow so now it brings us back to this page come back here and hit refresh as we hit refresh it still doesn't update that so it doesn't create a new user or anything like that so now let's go back to our code and go see what's wrong so if we come back here we are saying if the request that object filter is there and we just want to delete that follower i'm doing that by followers count.objects.get follower follower yeah and then we're deleting the user right here and after that we're redirecting the user to the after doing that blower equals account create yeah and then we are saving this one this time around and then after doing that we are redirecting the apache page so this should totally work let's just make sure our url's specified correctly if we come here let's see from also works so the action is going to slash follow that works and another thing we should check using the csi of token we have this inputs so everything should be working fine let's just go ahead and try that again now let's hit refresh and just so if we hover over this we're gonna see if you look at the left bottom corner bottom left you're gonna see that it's as is linking to slash profile slash john we shouldn't be so there's like an a tag that is linking to that let's check that out if that's okay so we see that this is in an a tag and it's basically linking to this page so let's first of all clear that out we don't want that to link to anything we want it to submit but since we have that cleared out we can come here and refresh now we don't see that link at the bottom left corner now let's get this follow let's refresh the page okay ready for that to load and we hit follow so as we do this nothing happens so first of all let's see nothing happens so that means there's something wrong right here in our code and what is wrong we just need to check so we have an a tag we need this title just clearing our code and then in there we have this button this button we need type submit as a style and does the border also take so everything seems to be working and this button should let's see let's hit refresh again and let's try to click on the button so i think we just need to change this tag let's see if it's a p tag so that takes that away from there but let's click on this button now and see that still doesn't work we're just going to try to do to see if this is linear to any class let's take that back to an a tag data repo let's see let's hit refresh button and it follow so now that we don't have the data repo it just isn't working but what we can do now is just to take this out okay so i'm sure some of you may have noticed the error while i've been searching for it so there's nothing wrong with this data reported class basically what is wrong is the type is meant to be submit and not button let's just try that out again allowing this to load and yeah so now it brings us back to this page that means something must have worked let's go back in here and hit refresh good so now we can see that we have a new object polarized term under that is what we want to see now that we have this the next thing we want to do is to show the amount of users that this specific user has the amount of users this user have now to do that are going to have to come into the views of profile so we've taken care of a user following and unfollowing let's just test that one more time if we click on this follow button now and then we come in here and hit refresh that's gone now i said we want to get the amount of followers i'm following but before we even do that there's one thing that is important that we do what we want to do is that once the user has followed the user we want we don't want to show follow a game now we want to show unfollow so the user can know that okay this user is a user i'm following already so i want to follow this user now and another thing i want to do is that if this user is viewing his own profile we don't want him to even see the follow button what we want him to see is like a button that goes to his account settings for example so the user can go to now let's do that first of all let's make sure that if this user is himself he should not be seeing the the follow button so we're gonna come back in here what we're gonna do i'm gonna say come back right yeah so no not here index as profile if the user object.username so if the user object the username it's just equals to user dot username i'm zip is equal to the currently logged in user we don't want to show this so else we want to show this then let's end the if so we've entered the if tag and now what we want to do just to say instead of this button it's gonna be a button also what i'm gonna do is to copy this paste it here and it's not going to have a type button and this data is going to have weights linking to and that should be slash settings save that now if a communion is refreshed only seeing this follow button because we are viewing the profile page of another user but we logged in as tom and i review tom actually this should be account settings okay now the reason why that is not account settings because we didn't change that here let's say account settings and we hit refresh what we see now is account settings and if we click on that it should take us to the page where we can let's see if we overall what it just brings us back to this page let's make sure that it's working well if we look at the bottom left corner we see that it's supposed to link to account settings so yeah if we come back here now what we can just do is to basically make sure all right so we don't need this gonna come here not for you it's for the account settings you don't need a button you just need the a tag now that we have this we can hit refresh and once we click on account settings it take us to the settings page for this user now we can go back to wherever we were and we can view the profile page of john good so this is what we want to see so the next thing we want to see is to be able to change this to like unfollow when we are following the user so let's come back here first of all because this has been altered so let's save this and see if that affects this button that doesn't go back gonna redo okay so let's see let's just save that first of all come back here and hit refresh this is the button for this and then if we remove the button for account settings let's see refresh so that doesn't alter it when we go to tom that's our terms on looks and if we come back here good so we have that settled and what we want to do as i said is to change this from follow when we are following that specific user for us to do this we need to come into view so now in this view we don't need follow view again what we need is this profile view and one thing we want to get is follower equals to request dot user dot username that is the person that is following and user is equals to bk so now that we have these two what we can just say is if follower account dot objects dot filter follower equals to follower and user goes to user but first so if this is actually in our database then that means the user is already following this user that is viewing so let's say button text we're just having a new variable and then we want it to be on follow else one button text equals to follow so now we want to pass button text part of the context so what we just did there was we checked if there's an object which are those fields and if there is damage the user already following that user so we want to unfollow if not should follow so now that we have this we can save it coming to profile what we want to do now is right here where we have follow we want to remove that now and put butting text so this button text now is dynamic is it ah it changes the text to whatever is basically in our database adjust if we come back here and hit refresh and we hit follow now see now it changes to unfollow because we're following this user the refreshes page are still there so let's refresh and follow so now we can follow so that is basically working now and the next thing we want to do is to have followers count right here so another thing to do now is just to come into views right here i'm gonna say user follow us will be equals to follow us counts.object dot filter one in which user is equals to pk what we're doing is that we are getting his full last count model and we're filtering only the one in which the user now this user is the person that has been followed so i think the one in which the user is gross to pk and pk is the username of this user that we are viewing so all the times that this user is being followed is what we want to get and what we just want to do is to calculate the length of that so now that is an integer which calculates the length and we want to do exactly the same thing for the following um back come back to views you want to do exactly the same thing and change this to user following and now blue scans dot object or filter the one in which the follower equals to pk now we have all of these let's also pass it in this context and the user following so now we have all of this in this context dictionary we now come into this place into the profile.html page where we have all these followers and following what we can just do now these followers we can change it to user followers and this following you can change it to user following now let's go back and hit refresh and see what's up so it says zero follower zero following but if i follow this user now what so it gives us an error of unbound error at profile john blah blah blah it doesn't work what we just want to do i'm in here but we need to make sure that everything's coming from so it's coming from user followers right here so it says assigned before use what we can just do back to views okay so it's because all of these we put it inside the else indentation so inside the else block that's why if we have anything the else block we're supposed to have it in the if block but we don't even want it in there so we just want it on its own but now that should work and let's just hit refresh now it has one follower i unfollow followers back yeah so that is working another thing we want to change is this follower so it is zero follower it shouldn't have an s so let's just quickly fix that the way we've been doing it with the other ones so what we just want to do is to come up here in the profile and we're gonna go to where we have this followers i just disagree from these are following so now we're going to say if follow us if user followers is equal to zero or user followers is equals to one and if is equal to zero one we just say follower so zero follower or one follower else let's copy paste this and right here we will say else want to add an s and then we just end the if tag now we have this we come here and hit refresh now we see one follower we unfollow this is zero follower so this is working now let me follow this user so that means this user has one follower so that means i am following one person if i come to my accounts now i see that my following is one i am following one person so that is basically what we have achieved this profile per section so so far we've been able to get the profile image basically get all the details of the user and we'll be able to implement the following following we made this the text in your dynamics so user is following already that should be unfollow but if the user is not following that should be now let's move to the next section so at this point now we are able to see a profile a user's profile we're able to follow that user you know we'll see the amount of followers the user have amount of posts we're able to see all the posts and all this good stuff but in the beginning of this tutorial when we come to home we are just able to see the list of all the posts we have in on this platform that's all the posts we have in our database that's what is shown we're not customizing this feed for a user and that is bad because we want a user to be able to see the posts of the people is following not just anybody's post so right now it's just showing all the opals we have on the platform which doesn't really make sense what we want to do now is to be able to customize this to be able to show only the posts that the user is the post of the people that the user is following basically so that's what we want to do right now so let's click on this so the first thing we want to do let's make sure that once we click on this and right here it takes us to the profile page of the user so we're going to come into index and we'll say user post.user right here it should take us to slash profile slash close the user so we can just copy that we can just search for the other post.user we write here i will refresh this to be able to go to the that's good and we are following this user so now let's just go back to the home page and right now i'm going to come into the views of this index and we actually need to do a little bit of tweaking in here what we're going to do first of all let's assign like two empty lists first of all we'll see these are following list so this is the list this will contain all the users that the logged in user is following and let's just say feed so this feed is also a list where to contain like the list we're gonna con we're gonna first query the database to get only the post of the persons that the user is following and then that's gonna give us in like a query set but we're not going to have to convert that into a list so the first thing we want to do is to say user following equals to account dot object dot filter by just getting all the users the objects of all the users that the user is following the one in which the follower equals to request dot user dot username so that's the user following and with the follow passive for users in user following what we just want to do is to say user following list want to append the user name of each of everybody the user is following so we say user following does append users does user and that is good so now we want to append to the feed list so say user names in the user following list that we have now the feed lists should be equals to post.object dot filter the one in which the user is equals to the names and let's just say feed dot append and i want to append this feed this feed list now that we have that this is like a query set now i want to convert that to a list so we can look through it in the template what we're going to do now is to say feed list it's without an s now because this is a new variable on its own it'll be equals to now we're going to use a function that we need to import so we're going to say from there tools or chain so chain is going to be able to convert it to a list for us now we can just use this you know when we have speed because what we want to do right now is now convert this fee to a list you know we can do something like list then in there we have feed but we can't just do that here so what we want to do is to say lists chain and in there we have an aesthetic mark and we say feed so now that we have this we can just pass it into the html right here instead of sending posts now or we can just send bid list now if i come here and hit refresh we make sure our server is running so that that's done and let me come here and hit refresh and let's see what we see we still see this and the reason why we see this is because this user is following john so what we're going to do now first of all a storm let me choose a file i want to upload an image as tom and what i'm just gonna do is put an image put in a caption i'm gonna log out and log in as john and i'm gonna follow tom then what you're gonna see is that i don't see the images of john which is myself image i see now is of tom so as i upload this now you're going to see that it doesn't show yet it doesn't appear yet because i don't want to see my image i can just easily go to my profile but i'm going to log out now and login as john now that i login as john and i it's login you see i can't see anybody profile image right here it's just blank because i'm not following anybody but now if i go to slash profile slash tom you can see tom has one post if i follow tom now i go to um you now see that i'm able to see the posts of tom so this is a very good picture let's just log out and log in back as tom so now john i go in there i unfollow come back home i can't see any post because i'm not following anybody once i follow john i go back home i see john's post this is what i want right now want to have a unique picture which is going to be a downloading feature this means that a user is going to be able to download the image you see is on someone's post like this is image and he loves it this button here once you click on it you should be able to download that image so right now the button doesn't do anything but let's go ahead and add that feature come back to vs code right now and we go to index so this is actually very simple and fast what we're just going to do is to look for where we have that button so we have it wrote down no is inside the for loop so that's how we know and this is the caption we have as a caption caption is down below so it should be before it so right what we're just gonna do now is touch and search for where we have svg image it's this is for the like and right here is for the download what we just want to do is to have this go to this post dot image dot url well we don't just want it to go there because right now if i save this and hit refresh if i try to click on this what it's just gonna do it's gonna take me to that url i want you to download that url for me without even going away from this page very easy with html we can just add download right here and we leave it blank so that is just going to do that first come here and hit refresh now if we click on this you're gonna see that it's gonna download that image from so as you can see at the top right corner right here something is about to start downloading so as you can see that has been downloaded i can open that file here just gonna open that in a new tab and that is downloaded so that's just the feature i wanted to add thought it was cool and let's move on with the project now we want to add to our website is the search functionality let's just go ahead and refresh this page so now if we want to be able to search for something and it's enter press the search button and then it should bring uh results corresponding to whatever the user searched so let's go ahead and do that first of all as we can see once the user input something we don't even have a button where the user can click search let's fix that first of all in the ui we're gonna come in here now and before we do that i just want to say that i brought in the search.html from the my template so if you have been watching from the beginning you know that there was no search.html yet i just brought it from my template but you don't need to worry about that all these files are going to be in the github link so don't worry about that now what we need to do is to come into index.html and right here actually where we have a diana we want to have a form and then we're just gonna close the form so we should be able to have a form here before left side yeah i close the form somewhere around scroll down here right here now that we have that done next thing we want to do is to come into the field so if we scroll right here see that we have this type of text we want to give it a name username and since we're giving it a name now next thing we just want to do is to first of all remove this particular search that is beside it we don't want to search there or want to have this dash after it so this should be like in a box and like a search button after it let's go ahead and do that right here we do not need this we don't need any of this and what we can just do is to say button type goes submit and we can close that button and now we want to use an icon here so first of all let's comment out this d we don't want this to be in this div tag just so it won't affect this i want you to be like outside that box of this editor because it was in that div tag the changes i'm making is not going to work i'm also going to show you that so now what we just want to do is to come into that search.html that i imported and right here we want to copy this so what this is is it's basically just the same thing once i run the search at html you see that it's very the header right here is very similar to the other of the index.html but indeed the search.html already has like its own form tweaked so that's why we can come in here and just copy what we need and paste it right here one more thing we need since we're using that icon we need to import it so i'm just gonna link css just scroll up and right here paste so now that that is done if we come here and hit refresh we should see that we can search for something i'm kind of here to sub if i come in here now and as i said if i don't remove this from this give tag and i hit refresh now you see it's just not looking well that's why i remove that from the deep line having that said let's also leave a space right here let's have and nbsp hold on copy that paste let's have two of it once we hit refresh now we have a good space beside it so that is good now we just have this name of username and this submit what we want to do in this form we want it to go to the action url no the search url want the action to go to the search flash search run this action to go to slash search and with a method of post and once we're using the post method we need to add a csrf token so now we know that there is no url named search so we need to go ahead and create that so let's just copy paste and say search i'm gonna come in here and create a new view search turn render request search dot html we can save that let's also give it this login required save that also now let's make sure that our app will successfully once it reloads successfully test it out i'm back in here now hit refresh if i search for j.o my search it takes me to this slide search page and i just want to search that html as you can see it's not really showing a result now just showing this dummy data this static data that we put in the search.html but now what i want to do is that it will show a result that is correlating to whatever the user search now first to do this we're going to have to come into this view.py we're going to have to get the username that the user sends it by whatever user input we need to get it here to save request a method equals to post there is a post method say request that's post username that should be username so we basically just got the username and then what we want to do next is to filter the data so when we filter the data to only any username that contains what the user says just send it back that page what we want to do now okay we're gonna get a user object so this is just because right here we can see it is welcome tom which is good but right here it doesn't show the profile so if we go back to the home page it shows the profile of the user we also wanted to show the profile we are just gonna say user object equals to user dot objects dot get the one in which the user name is equals to request that's user that's username and this doesn't really correlate with the search form but we just want to take care of that now and since we have that user object what we just want to get is the user profile it goes to profile dot object dot get one in which the user equals to user object and if i pass this to the html so right here valley what i want to pass is use our profile not use object i come back here now and refresh now you see that i chose to update that so that is taken care of now back to searching so if we the method is equal to post get the username and then we get the jose user name object and that will be user dot objects the filter one name with the username i'm just going to i contains equals username what this is doing is that by getting a list of all the objects in which whatever the user search is contained in the username so if the user search for if there is a if they are if the user search for tom then what it's going to do is that it's going to go into our database look for any user in which tom is in the username and it's going to return that into this variable now that we have that let's first specify to empty list so say user name on scope profile we have the object let's get the profile the username underscore profile underscore list now remember that we have to convert it to a list let's just have that also as a blank list now save for users in username object user name profile it will stay here right here designing profile append what we want to append is so what we're doing is for users in username objects we'll say username profile what's append each of this user does that id so i want to get this one using the idd seminar so now i want to say append users.id now that we have their id we say for ids in name profile that's each of the id that we get we now say profile list it because of profile dot object dot filter the one in which the id user equals to ids so the one in which the id user if we come into our models we go to profile see how we have a few name id user which is the id of the specific user which which has been talked about or used right here right here we have id user equal to ids now say user name underscore profile underscore list append now we just want to append profile lists to it and now that we have that we can just say username profile list so now we just want to update that with itself but this time i'll convert it so we'll say list chain then aesthetic a steric of the username profile disk you should be profile the stereotype of the username profile is like this but now that we have this what we can just do is take it into like this we are taking it into search.html we are taking it as username profile list so if we have that we can just simply come here into search.html now we're gonna scroll down i'm gonna loop through that database what i'm gonna do is i'm gonna scroll down and when we scroll down actually it's in a section right here so we're gonna say four let's say user does in username profile list let's end the for loop immediately after that session is closed so end for now that we end our for loop we can now use this to customize it so what we want to do now is to get the profile image so we'll say users that's profile img.url and then once you get the username the users get the username dot name they've come into profile there was actually if we come into these models we have to say user dot user on it what we can just do right now is to say users.user and after that we're going to do the same thing for location the users the location and we do exactly the same thing for the bio good now what we want to do is that once a user clicks on any of these you take the user to the profile page of that user so now we say slash profile flash user does user and let's also do the same thing right here good so now we have this done let's now come back here let's go to the home page right here now let's search for j o h once we search for that so it says i contain a chaff with adrenal permitted so if we come in here it should be i contains with an s just close that now let's try that again now let's say j o h boom so as you can see now it says john toronto i am john so he just shows us the value the profile image good and we can go to the profile of that person now let's search for like term now you can see we have some it gives us the profile image the location and the bio and go to the profile of that user so this is basically what we have and this is how to you know build a very simple search picture so we can search for john and now it just shows us that we have one user named john this is what we want to do now last picture we want to add is the suggestions feature so this right here has been with us as the beginning of this project and what i want to do here is just to say users you can follow and it's going to recommend users that you are not already following and users that is not you so it's just a very simple algorithm we're going to use anybody that are not following it can recommend it and as long as that person is not you which is a login user it can also recommend it and if you do that at random so just randomly going to pick different people for you to recommend let's just go ahead and do that so we're going to come into vs code now and what we want to do is to open up this index so we don't even need this post again right here let's just come here let me give it like a comment and say user suggestion stats now first of all i want to get all the users in this platform on this platform i'll say user.object dot all and i'll have the following all so this is just an empty list but what this is going to be is all the people that the user is already following that's what i want to do so i'll say for user in user following remember that we already have this year right here so i'll say for user in user following user underscore list equals to user dot object dot get the one in which user name equals to this user dot user now we can ask the user following let's go following underscore all dot append user list so now that we have this what we can just do now is to say new suggestion list what we want to suggest now is the people that this user is not already following the new suggestions on the skull list equals two now this is gonna be in at least but in here we're to have like a for loop so it's like a specific style you see x4 x in list all users we're just converting this all users query set into a list so and then we'll say if x not in list so you might already understand where we're going with this following so this is just the user following all just open and close this so you might already guess where we what this is so this is the suggestion list so it's looping through the list of all the users and saying if this list is not in this list and that is the new list so it's just getting all the lists of the users we are following and removing it from audio users on the platform so now that we have that the next thing we want to do is to remove the current user from this list because what we have now in this new suggestion list is audio users on the platform that we are not following and as you know we can follow ourselves that means we're also part of the suggestion list and we can suggest ourselves to ourselves can suggest a user to himself so what we just need to do is to make sure that we remove the current user from that list so we say current underscore user will be equals to user dot object dot filter username was request dot user but username and now let's have like a list but like for the final suggestion so let me see let's name it final underscore suggestions underscore list now should be equal to x for x in list but now in new suggestions list that is not current user and we just say if x naught in list and what we just say is current user current underscore user so we're just saying that he this current user must not be in that list so he's basically eliminating current user from that list and then what we can just do to make sure that all of these in square brackets that is a list so unscrew brackets as close right there but now that we have this what we can just do since we have this final suggestion is now this is just a list of everybody that we are not following and that is not us so now we just have that unique list but now if we pass it to the front end or to the template and we say we just get like let's see yeah want to get like five so if we just get like the first five or something that means that's the same thing that's just gonna show only those people are gonna be suggested but what we want to do is to shuffle that list that we already have and make it random so like once we even refresh this page a new random random list of suggestions comes up so to do that first of all i have to import random from here to say import random and then right here now after this what we can just say is to say random dot shuffle is final suggestion only so i want to shuffle this final suggestion list and what's in shuffle what we want to get is the final like just five from that list right from that short foot list but since before we get that we don't want to get that now we can what we can actually do since we already have this list we can you know pass that list into the html but before we pass that list what we want to get is the profile object of each of this list because right now from here what we have is the user object so we need to get the profile object so we can return the profile picture the username and maybe the location of the bio or something so that's the main thing we need to get this is just a step from getting that so let's go ahead and say user name on the scope profile equals to empty then username let's go profile let's go list be empty also and we just do similar technique to what we did in the search so the users in final questions list each of the user they will say username profile but append users.id dot id now that we have that i cannot say for ids in username underscore profile we'll say profile on the sql list equals to profile dot object dot filter id underscore user equals to ids now that we have that we can see user name underscore profile dot underscore list underscore list let's append profile underscore so now we have this what we can just say is let's have a new list and say suggestions underscore user name underscore profile underscore list so the suggestions the username profile list goes to list okay we have to use the aesthetic line here the username profile list that is what we need to do now that we have these we can just pass that into if i come here now copy this this this is the final list is being shuffled and everything but i can just do now is to say questions designing profile list that's a weird name but and give it that but we get only ps4 because does have to just get the first four and then we save it now that we've saved it we can come into the index and right here in the index what we just want to do is to throw so once let's search actually let's search for let's move to let's just move down instead of searching so as all the way down because what we're looking for is these users you can follow but this is it right here we do not need this and then good so i think this is it so what we need now just to loop through this basic so we have refresh and right here you can see for suggestion just changes our name proof what we want to do with each of these suggestions first of all let's okay so what i'm supposed to do first of all is just to have one of it but let's end the full loop here so we just need one let's remove this remaining three right here just remove this do the same here and we do exactly the same thing here now that is good if i hit save and press refresh i'm just gonna see this four times so it says list is not callable so let's come back here and what we just need to do is right here this doesn't need the two value braces just need one for this i want to close this now we save it and then we go back here and hit refresh let's make sure our site is running so now you see that it works but nothing is showing here and this is because remember we got all the users on our platform and we said basically it should render the ones i'm not following and the ones that are not me so um the ones that is me and the ones that i'm not following is basically everybody on the platform so that's why it doesn't have anything yet but let's see let's see let's come back here come into index so for suggestion in suggestion what i can just do is to say suggestion action that's user i'm gonna save it and then right here i'm gonna hit refresh so still the same thing what i'm gonna do is to come here and then unfollow john now that i am not following john if i go back home it's refreshed on this oh boom now you can see now that it recommends john for me since just because i'm not following john again so this is actually what i want so if i follow john it won't recommend john for me again what i just want to do is to go back to follow john slash profile slash john let me follow john once i come here doesn't recommend anybody because i'm following everybody on the platform but now let me log out and what i want to do is to create a bunch of accounts so i can say you can just say i don't know tammy e at g dot co your password sign up so is doug jane i am tommy from the uk and right here we can just say london now we can save that and once we come home we have an account for tommy and you can see that tommy has been recommended john and tom because she isn't following any of those users i'm also going to change this to the profile image of the user and these followers are just going to put like the bio or something so but now let's just log out again and create like two more accounts so let's just say emry hrg.co and deserve password and let's wait for that to create to remove that let's say a i am henry and you should know that listen new jersey and we can save that and go to the home page and now it's been recommended tom tammy and john so let's just go back log out create a new account now let's just create jasper a rg dot co let's give it a password submit and now you just see just per year and let's say i'm from l.a now let's just save that and go to home so it's been recommended and rejoined tommy and tom so one thing is if i refresh this you see it's random now time is on top if we have a bunch of people like android people is just going to be picking them randomly so now let me log out and log in back as tom now you see that i've been recommending three people been recommended just part time me and henry now let me go back and finish that up so right here in suggestion.user let's change this to suggestion. bio and also where we have this follow want it to be view user so to take them to the you the profile page of the user and then once it takes them there they can follow the user right there right here now we can just say slash profile slash suggestion.user and one more thing is the image so we can just say suggestion that's profile img.url and i am going to slash profile slash suggestion.user so now let's save this from here and hit refresh okay and as you can see we have this angry i am henry and you should know that we have jasper jasper here we have tommy tommy i'm from the uk so we have all this good we can go ahead and view henry he doesn't have no follower no post he doesn't have anything but we can support him and follow him and now that we're following him if we come to home we don't see henry there again we are only being recommended these two people but now if every creates a new post we're gonna see every post right here now we've been successfully able to add these suggestions right here so this very simple and basic algorithm we built right here i hope you understood everything we did to this point we are pretty much done with this project so let's just go like got the project like give it a final review but just recap on everything we've done so right now you can see it suggests me to follow a username jasper but it is feature where he just suggests us random users if i follow jasper now now he has one follower but they also added his followers and following style and now if i go home it doesn't suggest me jasper again and it also shows me the post of the users i'm following so if jasper that i just followed if he uploads a post i'm going to see it in my feed so we customize the feed but only the users are following and we can like post like it you liked it like by one person now if you like it no likes and we can also click on this on and then it's going to take us to the profile page of john and we can follow on follow him and show us the bio his username is profile pics and if we click on images he posted we can just slide through all the images back to the own and we can also use this search functionality like we know we have john so let's say we are looking for john i will just search joh it's search now you see that it brings us john gives us the location and this bio so if we click on that we're gonna see profile and we also added this way user can upload a pics and choose the file and the caption right here we also have this account settings they can change this profile picture changes by your update is look so this is a basic word true of everything that we did in this video in this course so there's still a lot that can be done to this project so but i hope with everything you've learned and the knowledge you've learned from this you can customize it and also add your own pictures you know if you want to do the comments or you want to do anything you want to do i hope it's what you've learned you can be able to thank you for watching or taking this course and finishing you up to this point thank you so much
