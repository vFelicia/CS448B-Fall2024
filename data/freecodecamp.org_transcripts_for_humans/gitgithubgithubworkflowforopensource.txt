With timestamps:

00:00 - So we talked about the GitHub workflow
how you branch, introduce changes on
00:04 - commits, and then merge your branch back
into master but that only works if
00:09 - you're working on a project that you
have a write access to. Maybe you're
00:13 - working on a project that you don't have
collaborator access to, like if I wanted
00:17 - to make changes on Free Code Camp. That's
when you would need the open-source
00:21 - workflow which includes forking. When you
create a fork on github.com you're
00:28 - creating a copy of that repository but
under your own account so you have write
00:32 - access. So let's say I fork Free Code
Camp's repository, now I have write access
00:38 - to it, I can make commits directly to
that repository but they can't see them
00:43 - on Free Code Camp yet -
00:45 - that's ok - once I create my own fork then
I make commits on my for kind of make
00:51 - the changes that I think you know Free
Code Camp should include and then I can
00:55 - open a pull request from my fork
directly to free code camps fork the
01:00 - process is overall a little bit similar
to the branching process because it
01:04 - includes another copy of the code making
commits in a safe place and then
01:09 - introducing them with a pull request but
the main difference is the ownership of
01:13 - the separate repositories the original
fork would be under Free Code Camp my
01:18 - for could be under my name. When we
aren't using the branching process
01:21 - everything is still a part of that same
repository. So just to review, this fork
01:27 - and pull workflow is really helpful in
open-source. It includes creating a fork
01:31 - of the repository, making commits there,
and then opening a pull request against
01:36 - the original fork.

Cleaned transcript:

So we talked about the GitHub workflow how you branch, introduce changes on commits, and then merge your branch back into master but that only works if you're working on a project that you have a write access to. Maybe you're working on a project that you don't have collaborator access to, like if I wanted to make changes on Free Code Camp. That's when you would need the opensource workflow which includes forking. When you create a fork on github.com you're creating a copy of that repository but under your own account so you have write access. So let's say I fork Free Code Camp's repository, now I have write access to it, I can make commits directly to that repository but they can't see them on Free Code Camp yet that's ok once I create my own fork then I make commits on my for kind of make the changes that I think you know Free Code Camp should include and then I can open a pull request from my fork directly to free code camps fork the process is overall a little bit similar to the branching process because it includes another copy of the code making commits in a safe place and then introducing them with a pull request but the main difference is the ownership of the separate repositories the original fork would be under Free Code Camp my for could be under my name. When we aren't using the branching process everything is still a part of that same repository. So just to review, this fork and pull workflow is really helpful in opensource. It includes creating a fork of the repository, making commits there, and then opening a pull request against the original fork.
