With timestamps:

00:00 - hey this is Andrew Brown your favorite
00:01 - Cloud instructor hey it's ashishan your
00:04 - favorite Cloud security instructor today
00:05 - I'm here to talk about GI of advanced
00:07 - security certification or as called ghas
00:10 - with love um and the way we're going to
00:13 - get certified is as always we're going
00:15 - to do our Hands-On labs in our own
00:18 - accounts the lecture content and uh
00:21 - going through a practice exam and you
00:23 - know as always we provide you a free
00:25 - practice exam I want to remind you if
00:26 - you like uh Cloud certifications and
00:29 - this expansion into security
00:30 - certifications with our uh friend aish
00:33 - the best way to do that is to purchase
00:35 - the optional uh additional study
00:37 - materials on the exam Pro platform but
00:41 - let shees tell you a little bit about
00:42 - himself for those of you who probably
00:44 - have not heard of me before I am the
00:46 - host of a popular podcast called Cloud
00:48 - security podcast I've been in the cyber
00:49 - security industry for over 14 years
00:51 - teaching cloud and Cloud security to a
00:53 - lot of people as well through Sans in
00:56 - fact I was part of Andrew's free Court
00:58 - camp that we did uh a few month ago for
01:00 - AWS so I look forward to having all of
01:02 - you enjoy the certification course that
01:04 - we have created here for you guys let's
01:06 - get into the course all right see you
01:08 - soon ciao
01:11 - [Music]
01:14 - ciao what is gup foundations GitHub
01:17 - Foundation is the entry level GitHub
01:19 - certification that teaches you GitHub
01:22 - Version Control
01:23 - Basics how do you develop programs how
01:26 - do you manage projects that are running
01:29 - in GitHub there's a lot more that's
01:31 - involved in this The Unofficial course
01:33 - code for this is ghf but one thing to
01:36 - note over here is that GitHub is still
01:38 - the leading Version Control service in
01:39 - the world and giup is still the most
01:42 - common way most developers showcase
01:44 - their code either to their employers or
01:47 - companies using it for storing their own
01:49 - private code as well so from that
01:51 - perspective understanding getup and giup
01:54 - related products are quite crucial for
01:56 - most developers out there who is the
01:58 - certification for consider this GAA
02:01 - Foundation is important for people who
02:04 - are either new to Cloud programming you
02:06 - may not even be a developer in a tech
02:08 - role but want to develop the skills for
02:10 - a developer and you want to showcase
02:12 - that portfolio to a potential future
02:14 - employer or you just want to learn
02:16 - Version Control
02:17 - fundamentals all these reasons could be
02:21 - substantial enough for a lot of people
02:22 - based on where you are in your journey
02:24 - on learning and understanding GitHub and
02:27 - it would test your skills for how much
02:30 - you understand git by itself and git has
02:34 - its own I guess knowledge curve that you
02:36 - need to understand before you jump on
02:38 - the GitHub so in case you're thinking of
02:40 - going for GitHub Foundation I would
02:41 - definitely encourage you to learn git
02:44 - first and then come for the GitHub
02:47 - certification talking about GitHub
02:49 - certification road map it is advisable
02:51 - that you probably start with GitHub
02:53 - Foundation which is considered level 100
02:55 - especially if you've never done much
02:57 - work in GitHub yourselves you probably
02:59 - having understanding of Kit and GitHub
03:01 - would be very valuable and probably
03:03 - worthwhile spending some time on GitHub
03:06 - Foundation passing that exam followed by
03:08 - either you can choose the G of advanced
03:10 - security which is great for cloud
03:11 - security Engineers who probably look at
03:15 - programming and are also looking at
03:17 - automating a lot of the cloud security
03:18 - features that they may be working on
03:20 - whether it's building infrastructure
03:22 - scode or whether it is using terraform
03:25 - or other languages in cloud formation I
03:27 - can keep going on or you can just choose
03:30 - the path of being a better developer by
03:32 - understanding giup actions now having a
03:35 - understanding gith up actions is good
03:36 - both from a security and from a
03:38 - development
03:39 - perspective as you get better at this
03:42 - from a security perspective the next
03:43 - Evolution would be to become an
03:45 - Enterprise engineer now it's worthwhile
03:47 - calling out GitHub does not validate
03:49 - programming technical diagramming code
03:51 - management and a lot of other skills are
03:53 - required for the role of a developer or
03:56 - even a cloud secured engineer in any
03:58 - organization however ever this at least
04:01 - is a way for you to Showcase to your
04:03 - future employer or your current employer
04:05 - that you understand some features and
04:08 - essential things that you might need to
04:10 - work on on a day-to-day basis in GitHub
04:12 - how long it would take you to study
04:15 - depending on where you are with your
04:16 - level of understanding of Kit GitHub
04:18 - already you could be looking at anywhere
04:21 - if you are starting today and have never
04:23 - done GitHub or it any kind line of code
04:26 - be probably looking at 20 hours plus of
04:28 - work however if you're an experienced
04:30 - person who's looking to do GitHub
04:31 - Advanced security you and you have
04:33 - enough years of experience in GitHub
04:36 - itself you probably already have some
04:39 - technical knowledge in GitHub and git
04:41 - and have a strong background in
04:42 - technology and doesn't have to be all
04:44 - kinds of Technology at least one or two
04:46 - which is just good enough for you to be
04:48 - decent and understanding the flow of how
04:51 - languages are stored in Version Control
04:54 - how you can manage them a lot more of
04:55 - those Basics as well in that case you
04:58 - probably only need 4 Hour hours but on
05:00 - average you're probably looking at at 14
05:03 - hours of average study time with 50%
05:05 - lecture in lab and
05:07 - 50% practice exams I would definitely
05:10 - recommend you to study 1 to two hours a
05:11 - day for a 14-day what does it take to
05:13 - pass the exam exam Pro and myself are
05:16 - huge Believers of video textures lab
05:19 - Hands-On Labs that are related to an
05:20 - actual project and doing some online
05:23 - practice exams are definitely if you can
05:25 - find the paid one definitely great there
05:27 - are some free ones as well on exam Pro
05:28 - if you wanted to check that out but
05:31 - doing those three just watching lectures
05:33 - one video from an experience trainer
05:36 - having Hands-On Labs that you can follow
05:38 - along on your own GitHub account and
05:42 - having a way for you to practice online
05:45 - tests that are available from other
05:47 - organizers or even free and paid ones as
05:49 - well definitely would be a great way to
05:51 - make sure you definitely pass the exam
05:53 - now from a Content perspective there are
05:55 - seven domains that have been shared by
05:58 - GitHub the domain one will describe ghs
06:02 - or GitHub Advanced security features and
06:04 - functionality domain two 10% for
06:07 - configure and use secret scanning domain
06:09 - three 15% for configure and use
06:12 - dependency management domain four for
06:14 - 15% configure and use cod scanning
06:17 - domain five for use cod scanning with
06:20 - cql and domain 6 20% describe GitHub
06:24 - Advanced security best practices and
06:26 - domain 7 10% for configure get GitHub
06:29 - Advanced secureity Tools in GitHub
06:32 - Enterprise now how would you even take
06:34 - the exam you can give the exam in person
06:37 - or online at your own convenience from
06:40 - your home uh you would be using the
06:42 - provider PSI online or they have a
06:44 - network of test centers as well you
06:46 - could find the closest one that is in
06:49 - the city that you're in using the Google
06:51 - search just find out the closest Center
06:53 - you have for PSI next to you now it's
06:56 - worthwh calling out online version would
06:59 - have a proctor or someone who's
07:01 - basically supervising and looking at
07:03 - what you're doing while you're giving
07:05 - the online exam so just something that
07:07 - you be should be wary of in a t in a
07:10 - test center there are already people
07:12 - monitoring you so uh I guess depends on
07:14 - what you're more comfortable with doing
07:16 - doing it online or doing it in person
07:19 - now it's worthwhile calling out GitHub
07:20 - does not provide a passing score but
07:23 - having a scoring of 75% correct answers
07:27 - would ensure that you pass the
07:29 - certificate ification as I said there is
07:31 - no passing score but at least aiming for
07:33 - that 75% correct answer would ensure
07:36 - that you pass the certification there
07:37 - are 75 questions in the exam 60 scored
07:40 - and 50 unscored now unscored are the
07:43 - tricky ones where they don't really Mark
07:45 - you on them but they're definitely there
07:47 - and you would not know which ones are
07:48 - those so you can technically afford to
07:51 - have 15 CT scored questions wrong there
07:54 - is no penalty for wrong answers so you
07:56 - might as well give answers to all the
07:57 - multiple choice and multiple answers
07:59 - that are available 15 questions of the
08:02 - exams are unscored so they would not
08:03 - count towards your final score um
08:05 - unscored just means that they would not
08:07 - be used to Mark you but they would be
08:11 - used for introducing any new questions
08:13 - in the future this also helps them
08:15 - determine of the exam is too easy and
08:16 - the passing score the question
08:17 - difficulty needs to be increased and
08:19 - also discover users who are attempting
08:20 - to cheat the exam or just steal dump
08:22 - questions hopefully you're not one of
08:24 - them and you're just basically following
08:25 - what we teach you which is video
08:27 - tutorials Hands-On Labs that you follow
08:28 - along and and finally just some practice
08:31 - online Labs or practice exam that you're
08:33 - following along and one final point if
08:36 - you encounter an ex a question that
08:37 - you've never sted for keep it cool and
08:40 - remember there would be unscored
08:41 - questions as well now the total duration
08:44 - is 2 hours and 1.6 minutes per question
08:48 - is the time you have I would say it
08:51 - probably exam Time by itself is 1 120
08:53 - Minutes the seating time is 150 because
08:56 - you have to account for the fact that
08:57 - when you start if it's an online exam or
08:59 - if if you're going to in person you
09:01 - would have that 105 minutes of showing
09:03 - your ID verifying uh if you're doing the
09:06 - online exam they would look at the
09:08 - webcam that you have given them and also
09:10 - consider the fact are there any desk any
09:13 - items on your desk they would make you
09:14 - clear it so 15 20 minutes that would be
09:17 - probably in the beginning maybe 20
09:19 - minutes and then towards the tail end as
09:21 - well where you might be ask for a midd
09:23 - of
09:24 - [Music]
09:27 - feedback assuming you have done git
09:29 - foundation and you've gone through some
09:31 - of the other lectures we have on git
09:33 - Foundation having a basic understanding
09:35 - of git I'll just do a quick refresher
09:37 - for everyone to be on the same page in
09:39 - case the last time you went through this
09:41 - was some time ago G is a distributed
09:44 - version control system or dvcs which is
09:47 - created by lonus telt hopefully I did
09:50 - not mispronounce the name but lonus was
09:53 - the creator of Linux kernel so
09:55 - potentially it's Linux but I don't want
09:57 - to call it I feel it's Linus so
10:00 - apologies if I got that name wrong now
10:03 - git is how you interact with the Version
10:08 - Control System each change on your code
10:11 - which can be committed which by a
10:12 - command called git commit and can be
10:15 - tracked before for how it was before the
10:18 - change how it is after the change and
10:21 - what is the change being
10:22 - [Music]
10:25 - made now GitHub is a Version Control
10:29 - service I would even say it's like a SAS
10:31 - service which allows you to access kit
10:34 - based version control system from
10:35 - anywhere on the internet it is a hosting
10:37 - manag remote gate repository to I guess
10:40 - people like the technical term but they
10:41 - have expanded to other offerings as well
10:43 - like for example now you can also have
10:45 - project management tools pull requests
10:47 - code reviews GitHub has even got GitHub
10:49 - pages and wikis GitHub action is
10:51 - something that you would hear about in
10:53 - other certification but also as someone
10:55 - who's working in cyber security you
10:57 - would also hear about GitHub actions as
10:59 - a way to automate a lot of the cord and
11:02 - being able to trigger security tooling
11:04 - when a certain action happens G pilot is
11:07 - also catching a lot of traction which is
11:08 - the AI uh based product that has been
11:11 - launched by GitHub GitHub code base code
11:13 - spaces Marketplace G there's a lot more
11:16 - that's being added on and worthwhile
11:17 - knowing that you don't need to know all
11:19 - of these for the exam but this is just a
11:20 - quick refresher on one GitHub is and fun
11:22 - fact GAA was originally written using
11:25 - Ruby un rails
11:26 - [Music]
11:31 - common git terms for those who don't
11:33 - remember at the moment repository commit
11:35 - three I would probably say the most
11:37 - common one that you would use quite
11:39 - often uh even if you start from the top
11:41 - which is repository which represents a
11:43 - logical container holding the to base so
11:46 - a lot of people talk about hey this is
11:47 - my link to my repository very common
11:49 - word commit is a change of
11:53 - the data that you do to your local
11:55 - repository that you commit
11:58 - onto the the branch that is local on
12:00 - your laptop now you would use something
12:03 - like a branch to create a new Branch uh
12:06 - depending on the practice you have and
12:08 - your organization now remote would be if
12:11 - you are a have hosting a project a
12:14 - version of your project somewhere but
12:16 - you want to exchange commit you would be
12:18 - a remote cloning or clone clone is
12:23 - basically you know a friend of yours or
12:25 - someone you know on the internet has
12:27 - created amazing Repository that you want
12:29 - to work with you can use clone to clone
12:32 - that repository and make it better or
12:34 - just start using it yourself as well uh
12:36 - also make sure when you're using a
12:38 - repository that you're cloning make sure
12:41 - you have uh at least have a look at the
12:43 - license that they have Apache license or
12:45 - MIT license these are important for
12:48 - Enterprise that are using it because not
12:51 - all repositories on GitHub are free to
12:53 - use they do have license requirements
12:57 - that you should look at especially the
12:59 - read me file now we spoke about
13:01 - repository commit Branch clone checkout
13:05 - is to switch between different branches
13:07 - in your local repository and probably
13:10 - the our next two important ones are pull
13:12 - and push now the pull example is that I
13:16 - have been working on a local repository
13:18 - for some time and now I have finally May
13:22 - realize that oh my God people have been
13:24 - still pushing changes onto the main
13:26 - repository so now I am running a few
13:28 - comits behind
13:29 - the main branch and that's how you can
13:32 - pull some of the changes from your Remo
13:35 - repository which may be at ker.com and
13:38 - merge that into your branch so your
13:39 - branch has the latest information on the
13:42 - all the code changes that happen now
13:44 - once you have done that you may want to
13:47 - push that change the keyword being push
13:49 - you should want you may want to push
13:51 - that change to the local repo from the
13:53 - local repository to your remote
13:55 - repository on k.com uh the same goes for
13:58 - fetch you can download data from a
14:00 - remote repo without integrating it into
14:02 - your work reset undoes any local changes
14:06 - with options to unstage or revert commit
14:08 - basically you might make some changes
14:10 - but you're not like oh I don't really
14:12 - think I wanted to make those you can
14:14 - just use the Reser button to undo all
14:16 - those changes now this is uh going to
14:19 - unstage any com any commits you would
14:22 - have dat locally that you have not
14:23 - pushed to the remote repository so
14:27 - worthwh knowing the changes should still
14:29 - be on your local repository if they have
14:31 - been pushed onto the remote repository
14:34 - then the reset is not really going to
14:35 - change anything on the remote repository
14:38 - itself merge can combine commit
14:41 - histories into one chaging files
14:43 - prepares and organizes changes for a
14:45 - commit now commit saves your changes as
14:47 - a snapshot in the local repository and
14:50 - add adds changes to the staging Raz of
14:52 - the next
14:54 - [Music]
14:57 - comit now we we have explained what
14:59 - repository is a GitHub repo is your
15:01 - GitHub repo when you push Upstream to
15:04 - GitHub GitHub allows you to access and
15:06 - manage your G repo with several
15:07 - functionality you could use GitHub
15:12 - installed locally on your laptop to view
15:15 - different branches if you have cloned a
15:17 - repository you can view different
15:18 - branches you can look at the tags that
15:21 - are being used commit history and a lot
15:23 - of related information around releases
15:25 - code bases but you can also perform
15:27 - actions like for example you can put
15:30 - yourself on the watch list you can start
15:32 - watching the repository for any changes
15:34 - you can even Fork from it where you can
15:36 - create a a separate Branch or a separate
15:39 - I probably say a separate version or a
15:41 - separate version of the project and make
15:43 - it your own or you can clone that to
15:46 - download that
15:47 - [Music]
15:50 - locally a git commit represents the
15:53 - incremental changes to a code base
15:56 - represented with a git tree graph at a
15:58 - specific time the simplest example for
16:00 - this is that you have made some changes
16:03 - after you have cloned a repository from
16:07 - github.com or another source and that
16:09 - you made into a repository and you're
16:12 - ready to commit that into a branch
16:14 - potentially the main branch of the
16:16 - GitHub you're working with then you can
16:19 - use git commit to commit the changes
16:23 - onto GitHub now each Comet does have a
16:26 - sha hash that acts as an ID and and it
16:29 - can have actions like addition
16:32 - modification
16:33 - deletion and it can it contains pieces
16:37 - of information for the changes but it
16:39 - may not contain the whole
16:41 - [Music]
16:44 - file a get branch is a Divergence of the
16:47 - state of repo it's almost like you want
16:50 - to keep the original code base intact
16:53 - but you would want to start making some
16:55 - changes that you can bring back onto the
16:57 - main code base in this case the example
17:00 - we have provided is a feature Branch one
17:02 - and feature Branch two a production
17:04 - Branch a main branch now going by
17:07 - feature branch and main main branch is
17:09 - the active code that is something that
17:12 - everyone is happy with it is stable and
17:15 - that is then pushed onto production
17:17 - which is the production Branch now you
17:19 - may choose that you want to add a new
17:21 - feature to the application you're
17:22 - working in you may create a separate
17:24 - Branch for it you would make all your
17:27 - changes you would commit your changes
17:29 - you can test your changes and when
17:30 - you're happy that youve just have
17:32 - succeeded you would come back to the
17:34 - merge over here and so you'll go from
17:36 - the feature branch and merge it onto the
17:39 - main branch and once things are good and
17:41 - tested on the main branch they can be
17:43 - pushed on production that would be an
17:46 - example of a workflow which is also
17:49 - similar to something called a GitHub
17:51 - flow as well that you would get to
17:54 - [Music]
17:57 - know now get mode has a concept called
18:00 - upstream and downstream Upstream would
18:02 - mean that you're sending it from your
18:04 - local repository or your local develop
18:07 - environment onto Upstream to where the
18:11 - changes are being pushed to now in this
18:13 - case it could be the remote github.com
18:16 - and when you do a pull from remote
18:20 - GitHub repository then you're doing a
18:22 - downstream change basically a repository
18:24 - that pulls or clones from another
18:26 - repository that is called upstream or
18:28 - down on
18:29 - [Music]
18:33 - screen what is GitHub Advanced security
18:36 - ghas ghas or GitHub Advanced security
18:39 - refers to the understanding on how to
18:41 - use security features of GitHub to
18:44 - secure your code from security
18:45 - vulnerabilities now if you are already
18:47 - on GitHub you can probably just go to a
18:49 - repository of your choice I've just gone
18:51 - to www. cloudcity bootcamp.com which is
18:54 - a website that we run for cloud security
18:55 - boot camp you can go to the security Tab
18:58 - and you can all already see services
18:59 - that you have turned on and are
19:01 - available for you based on whether you
19:03 - have a private or a public repo depend
19:06 - about code scanning and secret
19:09 - [Music]
19:12 - scanning it is important to know there
19:14 - are more features as well for a gup
19:17 - security but these are based on the paid
19:19 - plan for example from a free and team
19:23 - tier code scanning secret scanning and
19:26 - reviewing or dependency is AA available
19:29 - for all in public repos however no
19:32 - security overview or repo rules are
19:35 - available for free achiev if you were
19:37 - Enterprise however you would get
19:40 - everything for all public and basically
19:44 - if you're an Enterprise however you
19:46 - would get code scanning secret scanning
19:47 - review dependency with Advanced security
19:50 - and would also include security overview
19:52 - and reper rules when it comes to
19:55 - depender board alerts and security
19:56 - updates and version updates that is
19:58 - equal for everyone for teams and free
20:02 - tier as well as Enterprise tier for a
20:04 - free tier you would require required
20:07 - reviews can be made required status
20:09 - checks can be done with public repos uh
20:11 - in teams plan as well as Enterprise plan
20:14 - you can require review and require
20:17 - status checks but you can do that for
20:19 - all types of Reapers both public and
20:22 - private get up security advisory is only
20:24 - available for public repos if you are on
20:26 - a free or team plan it is available like
20:29 - get up security advisory will be
20:32 - available Enterprise Cloud because
20:34 - Enterprise license usually expensive now
20:36 - you do have the capability to do ro
20:38 - based Access Control require MFA audit
20:42 - logging however there is no audit log
20:45 - API or GitHub connect or samles ssos or
20:49 - even an IP allow list if you want to
20:51 - free your team plan however if you're on
20:53 - an Enterprise plan you would get audit
20:55 - log API GitHub connect saml single sign
20:58 - on L app and you would also get an IP
21:01 - allow list with your Enterprise Cloud as
21:04 - [Music]
21:07 - well ghas or GitHub Advanced security
21:11 - before you dive into this you probably
21:13 - want to understand why is GitHub
21:14 - security feature important now as a
21:17 - developer or as someone who writes
21:19 - shares and perhaps even develops code
21:22 - you would want to be proud of the
21:24 - quality of the code you create now
21:26 - usually the quality of the code is is
21:28 - deteriorated either by not using the
21:31 - right kind of syntax or creating code
21:34 - that is unsafe which contains a lot of
21:36 - security vulnerabilities that can
21:38 - potentially harm the production
21:40 - environment that your organization is
21:42 - working on now get of advanced security
21:44 - ghas is integrated within GitHub and can
21:47 - allow you to check for secrets that are
21:49 - in stored in your code it can allow you
21:51 - to look at vulnerability that are
21:53 - probably coming from a open source
21:55 - library that may be used by either a
21:58 - package
21:59 - or a set of libraries in your code it
22:01 - could also detect vulnerabilities that
22:03 - just could be in the logic of the code
22:05 - or the way the program has been written
22:08 - other things to note that are available
22:09 - from GitHub Advanced security which are
22:12 - in addition to looking at just how safe
22:15 - the quality of the cord is would be
22:17 - security overview GitHub account
22:19 - repository rules management audit logs
22:22 - GitHub security advisory and GitHub
22:24 - repository policies these are security
22:26 - features you can enable around the use
22:28 - of repository and how GitHub is used in
22:31 - your entire organization which is quite
22:34 - crucial to manage access to sensitive
22:36 - areas of kup
22:37 - for developers like for example you
22:40 - don't want someone or anyone in the
22:42 - organization to be able to Simply go and
22:44 - delete production repositories which is
22:47 - a big no no so managing the repository
22:50 - rules and having an overview of what
22:52 - security looks like in terms of the
22:53 - quality of the code across the board
22:56 - definitely is where GI Advanced security
22:58 - [Music]
23:02 - if you're still not convinced cisq or
23:05 - Consortium for information and software
23:08 - quality they found that poor software
23:10 - quality cost they found that the poor
23:13 - software quality costed us companies
23:15 - approximately 2.08 trillion annually
23:18 - this is from the 2022 report uh and the
23:21 - key contributors to poor software
23:23 - quality was cyber crime Tech debt or
23:26 - technical debt and software supply chain
23:29 - problems now cyber crime and software
23:32 - supply chain problems could definitely
23:35 - be very easily measured and corrected to
23:37 - an extent using GitHub like for example
23:39 - if you remove Secrets which potentially
23:41 - could be leaked in the code or if you
23:42 - remove software cord vulnerabilities you
23:44 - can even inform technical debt work with
23:47 - the required time to complete a tasks to
23:51 - manage some of the tech as well and last
23:53 - but not least soft is Supply in
23:55 - vulnerability GitHub has options to
23:57 - detect help you remove software Supply
24:01 - [Music]
24:04 - vulnerable now there are three
24:06 - components to ghas G Advanced security
24:10 - secret scanning Depend and code scanning
24:13 - Now secret scanning on face value it is
24:16 - Secrets stored of past in your
24:18 - repository it allows you to scan for
24:20 - secrets and raise alerts it also can
24:23 - take actions from GitHub dependabot is
24:26 - an open- Source vulnerability scan it
24:28 - looks for vulnerabilities in open source
24:31 - libraries used in your container so
24:32 - dependencies or just the libraries that
24:36 - are used by packages which could be
24:38 - vulnerable it can help raise an alert
24:40 - for it it can also take an action from
24:42 - GitHub on vulnerabilities that it
24:43 - identifies as well and third is code
24:47 - scanning scans for code vulnerabilities
24:50 - and raises alerts on vulnerabilities
24:52 - that are identified and you can use
24:55 - GitHub action workflow and code ql to
24:57 - perform from sophisticated Cod scanning
25:00 - by integrating other SEC security tools
25:02 - in there as well which are non GitHub
25:04 - security tools
25:05 - [Music]
25:09 - too now what do I do with these GitHub
25:11 - security alerts like we been talking
25:13 - about ghs can give you alerts on these
25:16 - special things but what do you do when
25:18 - you get these alerts now as a alert now
25:22 - as it stands if the alert makes sense
25:26 - instantly when you read it like yep I
25:28 - understand that
25:28 - it's basically asking me to remove a
25:30 - secret that I've accidentally put in or
25:32 - it's asking you to resolve vulnerability
25:34 - by replacing a open source vulnerability
25:36 - which is potentially a library that you
25:38 - had recently uh linked from somewhere
25:41 - you can easily work on that yourself
25:45 - however if the alert does not make sense
25:47 - now whether it's a dependent Bo alert or
25:49 - Cod scanning alert or a secret scanning
25:51 - alert the security alerts in your GTO
25:54 - repository May sometimes require ition
25:58 - say from your product owner or manager
26:00 - so it's worthwhile raising it with them
26:02 - so you can work with the application
26:04 - security teams of your organization to
26:06 - understand the vulnerability and
26:08 - understand what the required action
26:09 - could be now if the alert is not on your
26:13 - own
26:14 - repository uh there are processes in
26:17 - most Organization for you to raise
26:20 - alerts for any vulnerability you find in
26:23 - a repository that you don't normally own
26:26 - so you should be able to inform them
26:27 - privately
26:28 - now there is a private vulnerability
26:30 - reporting feature available in GitHub
26:33 - but if you have any internal processes
26:36 - that are used perhaps to inform this you
26:38 - can use that as
26:40 - [Music]
26:43 - well now keeping all the excitement
26:46 - aside we have been talking about ghs and
26:49 - you may or may not already be using this
26:51 - but it's worthwhile knowing that
26:53 - depending
26:54 - on whether you are in organization level
26:58 - user on GitHub or you are a personal or
27:00 - individual level user on GitHub you may
27:03 - have to enable get H GitHub Advanced
27:06 - security different way now the personal
27:09 - one as I would as it was shown in the
27:12 - lab earlier in terms of the plans you
27:15 - have certain capability are available by
27:18 - default for personal accounts on all
27:20 - public repositories on an organization
27:22 - level it helps you enable GitHub
27:25 - Advanced security at an organization
27:27 - level especially if you work in an
27:28 - organization where any developer can
27:31 - create as many repositories as they want
27:34 - and instead of manually scanning for
27:37 - what new repositories have been added
27:39 - and what new repositories need to be
27:41 - added to ghs and enabled you can use the
27:44 - organization
27:45 - level enabling of ghs as to understand
27:49 - how you can quickly apply that to every
27:52 - repository that is in within your
27:54 - organization
27:55 - [Music]
27:59 - at an organization level you can simply
28:02 - go onto the organization click on
28:03 - settings on the right hand side this is
28:05 - an example for my cloud security boot
28:07 - camp organization and on the settings
28:10 - tab you should
28:12 - have within the security column you
28:15 - should be able to see authentication
28:16 - security code security verified and
28:18 - approved domains and my favorite
28:21 - especially for the ghas lab secrets and
28:25 - variables now once you go on ghs the
28:28 - personal account however is a bit
28:30 - different uh you can have a look at the
28:33 - settings and go into code security
28:35 - analysis and you should be able to
28:37 - access the security features there
28:39 - however it is important to know that the
28:41 - personal account does not have access to
28:43 - all ghs features such as authentication
28:46 - security verified approved domains
28:48 - secrets and
28:51 - variables if you are looking to only en
28:54 - if you're looking to enable ghas only on
28:56 - individual repositories you can do that
28:58 - as well so not just at an organization
29:00 - level or a personal level you can go on
29:03 - to a repository that you want to enable
29:05 - ghs on perhaps it's your own personal
29:07 - repository you can click on settings
29:09 - under settings there is security you
29:11 - have code security deploy keys and
29:13 - secret variables under the security
29:16 - [Music]
29:20 - column it is important to understand
29:22 - that the level of G of security you have
29:25 - would give you the I mean you can to
29:28 - if you don't have ghs features turned on
29:30 - you probably would not get any alerting
29:33 - however knowing where they are and
29:36 - understanding that hey I can just
29:37 - completely go to my repository name put
29:39 - a/ Security in the end of it and you
29:41 - would be able to see the current
29:43 - security posture of what is enabled on
29:46 - your repository from GitHub
29:48 - security you can enable it automatically
29:51 - for all new repositories by simply
29:53 - clicking on the button automatically
29:54 - enable again this is under the security
29:56 - settings for the
29:58 - repository um and you would be able to
30:01 - at least have that in such a way that
30:03 - all new repositories moving forward are
30:05 - automatically turned down however any
30:08 - existing repositories that were not
30:10 - enabled for ghs before would have to be
30:13 - retroactively enabled
30:15 - [Music]
30:20 - individually okay in this lab we're
30:22 - going to show you how you can look into
30:25 - what kind of plan you're in now this is
30:27 - me Lo into my profile that's my icon
30:30 - over there so if I just click on that
30:32 - profile and go you can simply click on
30:36 - your profile which should bring you to
30:38 - this page which is basically what
30:41 - everyone sees usually when they go
30:42 - online so you can have a look at
30:45 - everything you have on your your
30:48 - repository 55 projects packages and
30:50 - everything else now if I do edit profile
30:53 - I can edit a lot of the information
30:56 - provided over here but but I'm after
30:59 - information about what kind of packages
31:01 - do I have so if I go on to here I go to
31:05 - settings and I go building and plan plan
31:08 - and usage I'm currently paying nothing
31:11 - so I have the GitHub free proudly now I
31:15 - can click on now this is what allows me
31:18 - at the moment I have all these actions
31:21 - what is not included is also provided as
31:23 - well and what I can also do is I can go
31:25 - compare all plans and I can see
31:28 - what can I upgrade to for
31:30 - $4 that I think is Australian I would
31:33 - say or us uh depending on the currency
31:36 - you're in and can get all these
31:38 - features I only care about the security
31:41 - compliance F because we on the ghas
31:43 - class as I was talking in
31:46 - the as I was showing in the slides CT
31:49 - scanning for public repository secret
31:51 - scanning for public repository depends
31:52 - the review for public repository but no
31:54 - security overview for me no depend alert
31:57 - and and you do get depend about alert
32:00 - but no repository rules all that
32:03 - required tofa audit logging is also
32:06 - available and R based access control is
32:08 - also available and get of advisory
32:10 - available for public services but for
32:12 - the moment this is how you check whether
32:15 - you have a plan that is a team plan or
32:19 - Pro Plan or a free plan or Enterprise
32:22 - plan now if you are on an Enterprise
32:24 - plan or a team plan I would definitely
32:26 - be mindful uh that you obviously are
32:29 - working with other people as well so uh
32:32 - if this is the first time you are
32:34 - looking at get and making it some of
32:36 - these changes maybe you may not even
32:37 - have access to the bills and plan most
32:40 - likely because someone else in your
32:41 - organization is managing it for you so
32:43 - you may not be able to see it this is my
32:45 - personal account not my organization
32:47 - account which is why I can see pretty
32:50 - much billing and plans if I come just to
32:52 - here and go settings but you may see
32:55 - different things based on where you are
32:57 - okay now that is a lab that I wanted to
33:00 - show you on how you can check the plans
33:01 - let's go back to the
33:03 - [Music]
33:11 - slides okay now we're back on the GitHub
33:14 - security uh now we're back on the
33:17 - GitHub now we back on GitHub let's just
33:19 - show you how you can look at an
33:21 - individual repository and see what the
33:24 - ghs level in your personal repository as
33:27 - well as organization repository so if
33:29 - this is my personal account I go into my
33:33 - settings and I can go
33:36 - into Cod security and
33:39 - Analysis and I can see that I don't have
33:43 - anything automatically turned on at the
33:45 - moment for dependent about alert depend
33:48 - about security updates secret scanning
33:50 - as well I can either disable it or
33:52 - enable it and I can also have it
33:55 - automatically enabled for so I can just
33:57 - take this box and we have enabled for
33:59 - everything I don't have to hit a save
34:01 - button anywhere as you can see the tick
34:03 - box over here is the way for me to know
34:05 - yep makes sense now I have removed it
34:09 - similarly I can just have hey Dependable
34:11 - now dependency graph is the only thing
34:13 - that I have enabled for all new private
34:16 - repositories I'm not asking for any
34:19 - Wonder reporting for that so I'm going
34:21 - to enable this now also for private
34:24 - repositories as well so this is how you
34:26 - see how your ghas is enabled I can have
34:30 - it for enable all it should enable that
34:33 - for everyone but you know this is just
34:35 - one of the ways to see it now another
34:37 - way for you to see this would be if I
34:39 - was in the organization now I have an
34:42 - organization as well so if I go to
34:45 - organization now as you can see it shows
34:47 - me I am logged in now as Cloud security
34:49 - boot camp which is the organization now
34:52 - if I go to settings under this and then
34:57 - within settings
34:58 - if I come to security I have
34:59 - authentication
35:01 - security which I can sign up for
35:03 - requires two Factor authentication for
35:05 - everyone in the organization so I can
35:08 - enforce multiactor
35:12 - authentication code security and
35:14 - Analysis I can as mentioned earlier I
35:17 - can have this enabled for every new
35:19 - repository that is created inside the
35:23 - organization but anything old would have
35:25 - to be retro retroactively fit in
35:30 - so I don't have any actions of Secrets
35:31 - but you can see it
35:34 - depend all of them have been put in here
35:37 - now this is also to verify the
35:42 - domain y that's pretty much how you
35:45 - would verify what ghs access you have
35:48 - now let's take a bit more um I guess
35:51 - better example where I can just go into
35:54 - one of my repositories let just go this
35:57 - one this is a public
35:59 - repository I can go to
36:02 - security I can see that I don't have
36:05 - enabl dependa board alert I don't have
36:07 - Cod scanning I don't have secret
36:10 - scanning because I Haven enabled it so I
36:12 - don't have aert however go depender
36:14 - board these are disabled as well code
36:18 - scanning is disabled secret scanning
36:20 - well okay now now that you know because
36:23 - I don't have I have not enabled anything
36:25 - now I can just simply come to settings
36:28 - and I can apply this
36:31 - directly oh this one over here and now I
36:34 - can just basically enable it
36:36 - individually if I like to but I rather
36:39 - do it at a top level so I'm going to go
36:42 - to my profile
36:45 - settings and I'm going to go under
36:50 - security so I'm going to say dependency
36:53 - graph yes I want depend alert and depend
36:57 - savings as well okay sweet so I have
37:00 - that set now so this is what how most
37:03 - people do that as well so welcome to how
37:06 - it is done in real life okay so this is
37:09 - the repository I can go to security and
37:12 - I can see security is enabled but I have
37:15 - because this is an existing repository
37:17 - and I just enabled depender board for
37:19 - all the new repositories I have to
37:21 - enable this manually so I'm going to do
37:25 - enable alerts I've have done
37:28 - that yep I have enabled dependency code
37:31 - I'm going to
37:33 - enable the Oney
37:36 - reporting for this repository as you can
37:42 - see
37:44 - and let's do security upates as well and
37:51 - alerts all right so now we have a
37:54 - private vulnerability reporting as well
37:55 - as the
37:58 - dependency graph and depend the board so
38:01 - it should start populating information
38:03 - over here but this time you would Noti
38:05 - is that if I go to
38:07 - security my Dependable alerts are
38:09 - enabled my private reporting is enabled
38:11 - because I've enabled them now I can do
38:15 - Secret scanning alerts if I just do
38:16 - enableing
38:18 - setting uh thought I
38:21 - had oh yeah yeah secret scanning was
38:23 - right at the bottom so I didn't really
38:25 - see it so now secret scanning has also
38:27 - been turned on for this particular
38:29 - repository now if it was it would get
38:31 - appeared under security and you should
38:34 - be able to see under here if there are
38:36 - any secrets now at the moment there have
38:38 - not been any secrets found there has not
38:41 - been any vulnerable or detend dependo
38:45 - but I know I have a vable repository
38:47 - that I
38:48 - have that I keep for occasion like these
38:51 - when I want to show you something so if
38:54 - I can
38:55 - name the challenges just do not remember
38:58 - the name of the
38:59 - repository it was I want to say npm
39:03 - package so it
39:04 - was nope maybe it was
39:09 - node
39:12 - nope maybe I called it
39:14 - [Music]
39:15 - vulnerable nope I did not that CL
39:18 - vulnerability is a different
39:20 - repository uh this is basically how you
39:24 - identify uh and slowly uh make sure that
39:27 - you don't end up having a lot of
39:29 - repositories because what happens you're
39:30 - trying to look for just want one
39:32 - repository that I know I
39:35 - have which I just cannot remember the
39:37 - name of for the life of
39:41 - me but this is what people would be oh
39:43 - there you go Cognito V2 demo that's the
39:45 - one now this is a really old repository
39:48 - that I've had for a while 6 years ago as
39:51 - you can see so I know it has a lot of
39:53 - there you go it has already got seven
39:55 - security alerts for me I didn't have the
39:57 - secret scanning enabl so let's just
39:59 - enable that and maybe that comes up with
40:00 - something as
40:03 - well okay so let's go to security I had
40:07 - dependabot alert I had security advisory
40:09 - I can see seven dependabot alerts this
40:12 - is what it looks like when you have a
40:14 - Dependable alert now we're going into
40:16 - bit more detail about what these are and
40:18 - what you do with them but this is how
40:19 - you would notice how you to see alerts
40:22 - within a repository now this is at the
40:25 - moment a if I go back to code this is a
40:28 - public repository however we want a
40:30 - private repository as well what can we
40:33 - do with a private repository so I'm
40:35 - going to go customize
40:39 - repositories I want it to be type is
40:42 - private I have one private
40:46 - collection and if I go in
40:48 - here if I go to security if you notice I
40:52 - only have depend board because that's
40:54 - what my plan allows me for so that's all
40:57 - I have uh I do not get any lot more
41:01 - features so I can find out more about
41:03 - how to do code scanning I can enable
41:05 - alerts but primarily I can just do
41:09 - dependabot if I only have a regular plan
41:13 - and if I although I can I'm allowed to
41:15 - create private repositories but I don't
41:17 - get a lot of security features for
41:18 - private
41:19 - repositories that's
41:25 - the yeah that is the end of the lab
41:28 - let's continue the
41:29 - [Music]
41:32 - lon now so far we've been talking about
41:34 - security vulnerability alerting what to
41:36 - do with it but we haven't really covered
41:39 - what is a security vulnerability
41:41 - security vulnerability is a potential
41:42 - risk to an organization that can be
41:45 - exploited by a malicious attacker to
41:48 - misuse or negatively impact the
41:50 - organization notice how it did not say a
41:52 - hacker uh because technically as a
41:55 - security person I'm respectful of the
41:56 - fact that a hacker could be a good
41:58 - person and Al alternatively a bad person
42:01 - as well but uh collectively calling
42:04 - every bad person hacker is probably not
42:05 - fair which is why the industry uses the
42:08 - word malicious attacker so anyone who is
42:10 - attacking or uh looking to impact an
42:13 - organization in a negative way would be
42:15 - a malicious attacker uh the way they
42:18 - would do this would be they are
42:19 - exploiting a vulnerability that perhaps
42:22 - exist in the software
42:25 - itself or where theof software is hosted
42:28 - or it could be misus by anyone who is a
42:31 - legitimate uh user or it could be a
42:34 - misuse by anyone who's a legitimate user
42:36 - and potentially internal threat who just
42:38 - happens to have the right access to the
42:40 - code that they want to maliciously
42:42 - [Music]
42:46 - change there are different kinds of
42:48 - security vulnerabilities depending on
42:50 - where and how you're looking you can
42:52 - have web based security
42:54 - vulnerabilities which are like common
42:56 - examples like xss
42:57 - csrf
42:59 - ssrf the open source vulnerabilities
43:01 - which are vulnerabilities found in
43:03 - libraries that are referenced in
43:06 - libraries used by bigger softwares and
43:08 - open source vulnerability could be a
43:10 - vulnerability that happens to be
43:12 - publicly listed as a free software or
43:15 - free library for use and perhaps doesn't
43:18 - have a patched library or patch
43:22 - component which allows for someone to
43:25 - basically take over the software or
43:26 - impact the software negatively now other
43:29 - kinds also could include stored Secrets
43:32 - like username password or API access
43:34 - access tokens and more cloud
43:36 - misconfiguration is another one these
43:38 - days now that a lot of cloud
43:40 - infrastructure is being produced by
43:42 - infrastructure as code languages stored
43:44 - in GitHub as well you could have a lot
43:46 - of cloud misconfiguration that could be
43:48 - triggered just from the infrastructure
43:52 - scored uh so Cloud misconfiguration come
43:54 - for that as well
43:58 - [Music]
43:59 - now zero day is a unique one where you I
44:02 - mean no one really knows when a zero day
44:04 - is going to come by zero day but the
44:06 - idea behind zero day is that no one knew
44:09 - about it before today hence zero day uh
44:12 - so anyone basically is planning for zero
44:15 - day is looking at it from a very
44:18 - likely looking at it from a very low
44:20 - likely possibility because no one really
44:22 - ever knows when a zero day is going to
44:23 - come out
44:28 - the final one which is probably the most
44:29 - common one a lot of people already know
44:31 - of viruses and malware and if you happen
44:34 - to work in an organization you probably
44:37 - have heard of ransomware which is very
44:39 - popular these days as well which has
44:41 - been locking at a lot of machines now
44:43 - all of this could be discovered by doing
44:45 - regular security scanning which allows
44:47 - for bugs to be discovered so that you
44:49 - can fix them before a misuse can
44:52 - [Music]
44:55 - happen how do you ident identify what
44:58 - kind of vulnerabilities are there or
45:00 - what type of vulnerabilities are there
45:01 - in your GitHub at the moment now
45:04 - fortunately ghs has Services which help
45:06 - you identify secrets dependencies and in
45:09 - even and even software security bugs
45:12 - which is under the security section of
45:14 - each repository you would find depend
45:16 - abort code scanning and secret scanning
45:18 - Now secret scanning helps you identify
45:20 - Secrets passwords password access tokens
45:23 - and any sensitive information which you
45:25 - may classify as a secret with the high
45:27 - entropy essentially uh your a AWS access
45:30 - keys are another great example as well
45:32 - now in terms of dependencies depend
45:35 - board helps you identify security
45:36 - vulnerabilities in open source libraries
45:39 - that are used by the code in your
45:41 - repository and finally code scanning
45:44 - helps you identify Security vulnerables
45:46 - in the code itself which may be just
45:48 - simply because there is poor code
45:50 - quality used in the
45:52 - [Music]
45:55 - Repository something which should be
45:57 - really helpful is that there are of
45:59 - course a lot of vulnerabilities lot of
46:01 - software types lot of software uh
46:05 - practices that are followed across the
46:07 - board so it may be hard to keep up with
46:10 - the wabil what is the final detail of a
46:14 - vulnerability now on the screen I have
46:16 - an example of vulnerability which is
46:17 - from the GitHub advisory database which
46:19 - is a list maintained by GitHub for all
46:22 - the security vulnerabilities based on
46:24 - cves uh which are collected from
46:26 - multiple thread intelligence sources and
46:28 - in fact also includes github's own
46:31 - Wonder T research for multiple languages
46:34 - so that they can keep their customers
46:35 - informed now this is free for anyone to
46:37 - be using if you use a URL there you'll
46:39 - be able to find the advisory yourself
46:42 - and go through all the vulnerabilities
46:44 - that they have discovered and advised
46:46 - their customers on all 16796 at the time
46:49 - of the recording uh across so many
46:51 - different languages to help understand
46:54 - more about the security vulnerability
46:56 - you have found
46:57 - [Music]
47:01 - let's talk about ghs secret scanning
47:04 - secret scanning is scanning repository
47:07 - for more than one type of secret using
47:09 - regular expression by more than one type
47:12 - of secret I mean it could be a username
47:14 - password it could be access token it
47:16 - could be aw secret keys and many more
47:19 - this service from GitHub aims to prevent
47:20 - any company secrets from being
47:22 - accidentally leaked on any of their
47:24 - public or private Repository before
47:27 - misuse or
47:29 - potential misuse by a pricious
47:32 - [Music]
47:35 - attacker now in terms of location for
47:38 - where secrets are scanned it is your
47:40 - entire GitHub
47:42 - repository it is your entire git history
47:45 - on all branches present in your GitHub
47:46 - repository the description and comments
47:48 - in issues title descriptions comments in
47:51 - your open and closed historical issues
47:54 - pull request which is still in beta as a
47:57 - 2024 and get our discussions as
48:00 - [Music]
48:03 - well now to Simply turn on secret
48:05 - scanning you can go under Secrets go for
48:07 - secret scanning and just simply turn on
48:09 - by clicking on the enable
48:11 - [Music]
48:14 - button ghs secret scanning partner
48:17 - program now there are partner programs
48:21 - available from GitHub which is
48:22 - essentially integration that GitHub has
48:25 - with other product companies
48:27 - to be able to notify you of any of their
48:29 - secrets being linked on a public or an
48:31 - internal G repository now the partner
48:34 - will provide a regular expression to
48:36 - detect possible secret like for example
48:38 - there is association with uh hashiko
48:41 - terraform AWS npm packages Ruby and uh
48:46 - AWS Amazon Azure Google
48:52 - cloud in case of an Amazon example if a
48:56 - user makes a commit or pushes a change
48:59 - GitHub would run a secret reject pattern
49:01 - based on what the partner has shared so
49:03 - in this case of if it was AWS or Amazon
49:06 - web services a cloud service provider if
49:08 - they were to say all our access keys or
49:10 - secrets are shared in this particular
49:13 - format GitHub would be able to run a Rex
49:16 - pattern on the information being
49:19 - committed by the user to GitHub they
49:21 - would be able to send a match to verify
49:23 - with the endpoint that is from the
49:25 - partner to determine if the match secret
49:27 - is real and uh that is how you can have
49:32 - other extended parties not just the
49:34 - GitHub Secrets but also potential
49:36 - secrets from popular services that your
49:38 - organization may be working with to
49:40 - identify any secrets being
49:43 - [Music]
49:46 - leaked how can you use
49:49 - ghs now you obviously need the ghas
49:52 - license is required to scan both private
49:54 - and internal repository owned by
49:56 - organization
49:57 - especially if you are on a GitHub
49:59 - Enterprise Cloud Now secret scanning is
50:01 - disabled by default follow repositories
50:04 - which you can simply enabled by clicking
50:05 - the enable Button as a GitHub
50:07 - administrator either on the repository
50:10 - that you want it to be running on or at
50:12 - an organization
50:13 - [Music]
50:17 - level now to enable ghs secret scanning
50:21 - once enabled it runs continuously and
50:24 - can be trickered to run always or when a
50:26 - commit is made to the repository you can
50:29 - run it as a push protection or a
50:30 - continous scan in terms of push
50:32 - protection a secret is scanned for every
50:35 - commit and it prevents secrets from
50:38 - appearing into the repository in the
50:39 - first place so it's more of a prevention
50:41 - based approach continous scan is more of
50:43 - a detection based approach where it
50:45 - detects and alerts on any existing
50:47 - secrets that you may have now it does
50:51 - not prevent any new secrets from being
50:53 - added because it's simply scanning for
50:56 - any secrets being present the full list
50:59 - of current secret patterns can be seen
51:02 - on the documentation for secret scanning
51:04 - but I would say the balance would be
51:06 - defined between push protection and the
51:09 - con
51:10 - [Music]
51:15 - scan okay folks in this part of the lab
51:18 - we would run secret scanning now I
51:22 - already have a repository which is a
51:24 - public repository under Cloud Security
51:26 - Board in GitHub it's called
51:29 - ghas example lab files that's the URL
51:33 - I'll make this available later on as
51:35 - well I have given each folder for each
51:38 - of the scanning in secret scanning as
51:41 - you can see I have three files at this
51:43 - point in time I have Secret in all of
51:45 - them all of those
51:47 - files and so I've got one there I've got
51:50 - one here somewhere but the idea is let's
51:54 - enable secret scanning
51:57 - at an individual repository level and
51:59 - then see how quickly it picks up so to
52:01 - do that if I go to settings I click on
52:04 - code security and
52:06 - Analysis and if I scroll down there's an
52:09 - option here it says secret scanning
52:11 - receive alerts on GitHub for detected
52:13 - Secrets keys and other tokens so once I
52:16 - enable this oh look at that instantly it
52:19 - picked up three files which is exactly
52:22 - the three files I have so GitHub
52:24 - credential you yes so this is where you
52:25 - see the file
52:27 - and I've got the AWS access AWS secret
52:29 - access all right perfect so it's picked
52:32 - up the files that I had I can go into
52:34 - each one of them and I can see oh that's
52:37 - the file that I had and that is the
52:40 - exact thing that's called out in the
52:42 - file that's the file name now I can
52:45 - either
52:46 - close as revoked or used in test Market
52:49 - as a false positive uh whatever the
52:51 - action that I decide is the use case
52:54 - here I can just say it's using test in
52:56 - order uction code so it's okay for me to
52:58 - put the code in here and that could be
53:01 - the end of it but that is basically the
53:04 - lab to end to enable it once and to
53:07 - enable it go into settings and code
53:10 - security analysis at the bottom of the
53:12 - page secret scanning now if you ever
53:15 - enable it and if you see the numbers
53:17 - that's basically that's basically
53:19 - numbers which could include other things
53:21 - as well in our case we don't have um I
53:24 - think we only have depend aboard code
53:26 - scanning and secret scanning all three
53:28 - enabled it didn't have any findings for
53:30 - dependo or code scanning because I guess
53:33 - all TW are working as expected so no
53:35 - issues there so for this secret scanning
53:39 - three alerts and you can go into each
53:41 - one of the D you get now that is the end
53:44 - of this lab I'll see you in the next
53:48 - [Music]
53:52 - class all right in the next part of the
53:54 - lab we will cover how you can exclude
53:58 - directories from Secret scanning for
53:59 - alerts so if I go into any of my
54:02 - repository oh let me just come back to
54:04 - my actual profile yep that's my profile
54:07 - I'm just going to go to one of my
54:09 - repositories let just say this one and
54:12 - within this I want to include I want to
54:15 - exclude a few directories like for
54:16 - example I want to exclude the directory
54:19 - for I need something with a few more
54:22 - directories in
54:24 - there so let me just find another
54:26 - repository we've got a few folders so I
54:28 - can actually show you the
54:30 - structure uh repository I think it's
54:34 - called Uh
54:41 - view uh nope not that one I haven't
54:44 - created the
54:46 - folder terap collection I'm trying to
54:49 - find a place effect oh there you go okay
54:51 - so I this is one place where I have uh
54:55 - enabled cloud trail I just want to see
54:57 - do I have any security turned on over
54:59 - here I only have dependo uh this is a
55:02 - private repository where it makes sense
55:05 - for me to have a doget ignore file now
55:08 - what I'll do is I
55:09 - [Music]
55:11 - will add a file now for me to exclude
55:15 - I'm going to add a file create a new
55:20 - file and I will put a link so I
55:24 - obviously want the file type to be
55:26 - secretor scanning so I'll just put that
55:29 - in here uh which is within the GAA
55:31 - folder secret scanning and now parts to
55:36 - ignore it could be anything it could be
55:38 - a pi file or yaml file I just put yam
55:43 - file for the sake of
55:47 - this uh yeah I'm I look I think I'm
55:49 - pretty happy with it so I'm just going
55:51 - to go ahead and do commit
55:53 - change uh create it
55:56 - uh
55:58 - added
55:59 - Fubar for not secret scanning it's
56:05 - important to want make it as descriptive
56:07 - as possible me the shortest number of
56:09 - words possible probably two opposite
56:11 - ends of what I'm trying to say
56:12 - essentially is that keep it succinct if
56:15 - you can but it should also be obvious
56:17 - what you're trying to do so I am clear
56:19 - on what I've done I've created a folder
56:21 - as well now if I come back onto my tree
56:24 - you should see dog ignore the GitHub f
56:27 - file as well so which
56:29 - has my secrets file in there as well so
56:34 - that's it uh that is how you would
56:36 - configure what uh folders or files to
56:40 - ignore as part of your alerts uh for
56:43 - from coming from showing up on your
56:44 - secret scanning alerts this is how you
56:46 - would do it and for you to see any
56:49 - alerts uh well this is a private
56:51 - repository you would not see it because
56:53 - I don't have a paid version but if you
56:54 - were to go to any of my my public
56:57 - repositories if you go to security you
56:59 - should see secret scanning and any open
57:02 - alerts would come over here all right
57:04 - that's the end of the secret skying lab
57:06 - I'll see you in the next
57:07 - [Music]
57:12 - Club hello hello all right let's go
57:15 - through the lab for understanding how to
57:17 - set notification alerts I'm going to go
57:19 - back to my cloud KY boot camp my website
57:22 - repository um in there now if you look
57:26 - at watch in in this which is the column
57:29 - that I clicked on right now at the
57:31 - moment it is set for all activity now I
57:33 - can set it for custom and I can pick
57:36 - security alerts as my uh reason for what
57:40 - I want to watch for I click on apply
57:42 - once I've applied this I come into
57:44 - settings and now over here as I go
57:48 - through this I should be able to pick uh
57:50 - let's find the option oops not going to
57:53 - go in the danger zone uh uh where is it
57:57 - I think I'm looking for something called
57:59 - email notification that's the one it was
58:00 - right on the left now I'm going to put
58:02 - my super secret password in before
58:04 - anyone else sees
58:12 - it okay so now I can have my email
58:15 - notification for say info@ ken.com
58:20 - and approved head I said the approved
58:23 - automatic approve the message is read
58:25 - only now now I can just simply do I
58:27 - don't really want to set the approval
58:29 - header uh I can basically say uh
58:35 - GitHub security as my approved header so
58:38 - I know how I can uh describe them
58:41 - separately and I go Set up
58:44 - notification and voila now I should get
58:47 - notification for security alerts
58:57 - now this basically means every time I do
59:00 - have a update
59:02 - setting yeah
59:08 - so yeah so at this point in time we have
59:11 - configured uh the notification to be
59:14 - sent as email now another thing that you
59:18 - have to look out for is under
59:19 - notification usually if you had on a
59:21 - paid version unlike myself which I'm not
59:24 - you would also see a button for for
59:26 - watching as well I've basically put the
59:28 - notification at the moment that you
59:30 - should get emails now this is uh going
59:33 - to send me emails of everything as well
59:35 - and not just this but I can also go to
59:39 - my organization so if I go to my
59:42 - organization and I can go into settings
59:45 - for my
59:46 - organization and if I look at the bottom
59:49 - left I should have notifications here as
59:52 - well uh
60:16 - oops okay
60:36 - okay for most a lot of the things I
60:37 - actually need like a k up Enterprise so
60:39 - I might not be able to do the remaining
60:41 - part but this is how you at least would
60:44 - explore
60:46 - sorry this is how you would explore what
60:48 - you can do with it now you can also
60:50 - Grant a team
60:52 - member a way to manage permission or
60:55 - manage these so you can just simply come
60:57 - in here I can put my
61:00 - name actually I realized I don't have
61:02 - any team members in there so or teams in
61:06 - there but if you have a team you can
61:07 - definitely include the team to be able
61:09 - to manage your um security alerts as
61:11 - well that's pretty much what I want to
61:13 - cover on this lab I'll see you in the
61:16 - next
61:22 - Lab before we start talking about GitHub
61:25 - dependable the first thing you probably
61:27 - want to know is just how prolific open
61:29 - source projects are as per the November
61:32 - 2023 report the state of the Octo report
61:35 - from GitHub it was shared that in 2023
61:38 - developers made 301 million total
61:41 - contributions onto open source projects
61:43 - across
61:44 - [Music]
61:47 - GitHub open source are projects or
61:51 - repositories or libraries on the
61:52 - internet that are maintained by someone
61:54 - called maintainers now there are
61:57 - repositories for open source that may be
61:59 - maintained for a while but may no longer
62:02 - be maintained anymore because either the
62:04 - maintainers have not had the time to go
62:06 - back and look at the open source
62:08 - repositories or open source libraries
62:11 - itself have had developed some
62:12 - vulnerabilities and there probably was
62:14 - no awareness on how to resolve those
62:16 - vulnerabilities now there could be
62:17 - multiple reasons for why an open source
62:19 - is not being
62:24 - maintained in get the dependency graph
62:26 - is a good place to see what open source
62:28 - dependencies are in use in your project
62:31 - this is a great way for you to identify
62:34 - where you may have dependencies and what
62:36 - may or may not be a security
62:38 - [Music]
62:41 - risk the example on the top is showing
62:44 - you there has a high or at least two
62:46 - high
62:48 - dependencies which are high risk that's
62:50 - why they marked as high and the bottom
62:53 - one there are open source libraries that
62:54 - do not have any security vulnerable so
62:57 - you can totally ignore them and let them
63:00 - continue unless one day they
63:02 - [Music]
63:05 - do dependency graph by itself is not
63:07 - enough this is when dependabot comes in
63:10 - now dependabot is part of the GitHub
63:13 - Advanced security it uses the dependency
63:15 - graph that we spoke about just before to
63:17 - scan and alert on any insecure
63:20 - dependencies
63:21 - [Music]
63:25 - easiest way to understand dependency is
63:28 - that if you I guess the example of
63:31 - grocery store is the best one if you go
63:33 - to a grocery store and if you're trying
63:35 - to buy a bread if you T if you turn the
63:38 - food around or turn the packaging around
63:40 - you would notice that there is something
63:42 - called ingredients and if you go through
63:43 - the ingredients one by one you can find
63:45 - out which ones you're comfortable with
63:47 - which ones are organic which ones are
63:48 - not organic which ones are chemical acid
63:50 - or whatever similarly in the code that
63:54 - people write a lot of us use libraries
63:57 - open- Source projects and a lot more
63:59 - information that may be helpful for the
64:01 - project to run but necessarily might not
64:04 - have been created by us this is where
64:06 - the dependency graph for hey this
64:08 - particular file seems to use this
64:10 - particular version of this particular
64:12 - language which probably has some
64:15 - replications or maybe not but dependabot
64:18 - is able to scan on triggers for GitHub
64:23 - action it can also scan packages as long
64:26 - as they had dependency graft enabled on
64:28 - that
64:29 - [Music]
64:33 - repository the alerts are based on
64:35 - GitHub advisory database entri which is
64:38 - maintained and an example of it for the
64:41 - kind of format is shown on the left for
64:43 - the different kind of package managers
64:45 - that can be available now it is worth
64:47 - noting that you cannot scan an archived
64:49 - repository and this is not your
64:51 - antivirus so you can't scan for males
64:54 - again I go back to the ingredient an
64:55 - example as long as you care about the
64:58 - ingredients that are like your libraries
65:01 - files classes that are being used in
65:04 - your code that dependency craft should
65:06 - be able to show you for the languages it
65:09 - supports which I have some called out in
65:11 - the example
65:12 - [Music]
65:16 - here how does one enable depend board
65:18 - for your repository depender board is
65:21 - always enabled by default for all public
65:23 - repositories and some private
65:26 - repositories hence the ASX you can
65:29 - enable get of advanced security
65:31 - dependency scan for all repositories
65:34 - inside an organization if it's your own
65:36 - private repository you would have to
65:38 - still enable it but for all public
65:40 - repositories it is enable by
65:43 - [Music]
65:46 - default going a bit more deeper into the
65:48 - private repositories if your repository
65:51 - is private dependo requires you to have
65:53 - an additional ghas license for you to be
65:57 - able to use dependabot on your private
66:00 - [Music]
66:03 - repositories now this is a good example
66:05 - of how dependency graph is used for
66:08 - creating Dependable alerts using
66:11 - security updates and the version updates
66:12 - which you can review thought it was a
66:14 - good explanation of what it could look
66:16 - like if it was being used however as I
66:18 - mentioned for dependency review by
66:21 - itself for private repositories it
66:22 - requires a ghas license
66:25 - [Music]
66:29 - now once you've identified depend about
66:31 - alerts and this can be configured on
66:34 - pull requests get up actions and other
66:37 - activities that happen but identifying
66:40 - vulnerability is a first step once youve
66:42 - identified vulnerability the next thing
66:44 - you would want to do is you can look at
66:46 - hey is the vulnerability valid or is it
66:49 - a false
66:50 - positive if it's a false positive you
66:52 - can ignore the
66:53 - alert if it's not a false positive if
66:57 - it's valid but downgrading to an older
67:00 - version without the vulnerability may be
67:02 - an easy solution that you can quickly do
67:04 - perhaps the solution is also could be
67:06 - you may have to upgrade to a newer
67:08 - version now both of these scenarios
67:10 - would require you to work with the
67:12 - developing team to understand the
67:15 - implications of upgrading or downgrading
67:17 - a version of a library as the usage
67:20 - varies per organization and depending on
67:22 - the software or the library it may be a
67:25 - crucial part of your production
67:26 - environment so you simply don't want to
67:29 - have all the uh upgrades and downgrades
67:32 - happen by
67:34 - [Music]
67:37 - yourself in spite of all the things I
67:39 - called out I would share some
67:42 - limitations of depend abort as well just
67:43 - to close off this lesson all alerts need
67:46 - to be reviewed by validating for false
67:48 - positive or actual vulnerabilities not
67:50 - all alerts would have a security patch
67:52 - so depending what security update is not
67:54 - a fullprof plan
67:56 - especially if you don't have a version
67:58 - to upgrade or downgrade to this is quite
68:01 - common if open source vulnerability is
68:03 - on an open source project that is not no
68:06 - longer maintained and unless someone
68:08 - takes responsibility of maintaining the
68:10 - open source project you are in a bit of
68:12 - a pickle or Mexican standoff whatever
68:14 - the right word would be now there are
68:17 - only limited languages that are
68:18 - supported by dependabot so in case your
68:20 - organization uses a language that is not
68:22 - currently supported by dependabot you
68:24 - may have to rec consider this option
68:26 - last but not least if you are using a
68:29 - private repository you are required to
68:31 - have a ghas license for you to be able
68:33 - to use depend Port but for public it's
68:35 - enabled by default that's all I want to
68:37 - cover for this lesson I will see you in
68:39 - the next
68:41 - [Music]
68:46 - lesson okay so in this lab we'll talk
68:49 - about enabling dependo alerts for public
68:52 - and private repository by the way just
68:54 - notice on the right hand top right hand
68:56 - side you can click on this to have your
68:59 - state of octe report which I was
69:00 - referring to earlier in terms of how
69:02 - much how much open source is being used
69:05 - okay to start with I'm going to find a
69:07 - public repository of mine I've got this
69:10 - uh I think I've got a few but I'm just
69:12 - going to start with the yeah I'm just
69:14 - going to start with this public one so
69:16 - just to show you how it's enabled if I
69:18 - go into security so security depend
69:23 - abort at the moment I have it turned on
69:26 - but I don't have any vulnerabilities
69:27 - this is what it would look like if it
69:28 - was already enabled let's find one where
69:31 - we don't have this
69:32 - enabled perhaps over here we don't have
69:35 - it enabled okay so this is a good one
69:38 - when you come on to this uh security Tab
69:41 - and you click on dependo you probably
69:42 - would see this as disabled if it hasn't
69:44 - been turned on now there are two ways to
69:46 - turn on dependo alert similar to some of
69:49 - the other GitHub Advanced security
69:51 - features you can either enable this on
69:54 - both public and private
69:55 - repositories or you can have this
69:58 - enabled at an organization level this is
70:01 - a public repository as I would show you
70:05 - here because it's public so I'll go to
70:08 - settings I come on to code security and
70:12 - Analysis over here I can see okay so I
70:14 - want to enable I want to receive alerts
70:16 - for vulnerabilities that affect
70:18 - dependencies manually generate the
70:20 - depend Bo pull request to automatically
70:23 - attempting to pull request or group all
70:26 - security updates to resolve allow depend
70:30 - to open pull request out automatically
70:32 - to keep your dependencies up to date if
70:34 - you notice the theme over here now to
70:37 - open pull request to open pull request
70:40 - and to open pull request so any pull
70:44 - request that is open and it has
70:46 - potentially adding a library that has
70:49 - wondery onto it this is how you would do
70:51 - it now I would personally recommend you
70:54 - to just have my person favorite is just
70:55 - to enable all of them uh but then that
70:58 - depends on how I guess what your posture
71:02 - may be like for example uh the
71:05 - dependency graph is enabled by default
71:07 - now I just enabled dependo alert I can
71:09 - also add dependo rules as well we can
71:12 - have my custom rules for how my alerts
71:14 - are going now this is obviously for part
71:16 - two of the lab but for the moment I'm
71:19 - just going to enable all of these
71:21 - because I definitely want to be notified
71:24 - every time there's a pull record
71:26 - and what I could be doing with it as
71:27 - well okay version update uh oh yeah so
71:31 - this what's I calling out the depend
71:32 - about version update requires you to
71:35 - check the frequency uh and to blah blah
71:38 - blah where the package manifestor
71:40 - located and you can get more information
71:43 - from configuration option for dependabot
71:46 - this is by default sing it to weekly uh
71:48 - if you're okay with that you can
71:50 - definitely make that change the file
71:51 - would be saved in GitHub dependabot yaml
71:55 - uh if you remember our previous lab on
71:57 - secret scanning do GitHub is a location
72:00 - where we store for secret scanning as
72:02 - well the files that need to be ignored
72:04 - similarly in dependo within the do
72:06 - gethub folder you can save on what
72:10 - libraries uh where the Manifest would be
72:12 - and how often do you want the schedule
72:14 - to run at the moment I think this is a
72:16 - bit Advanced for this class so I'm going
72:17 - to ignore that and I'm going to come
72:20 - back to my SEC security uh
72:24 - settings code security and
72:27 - Analysis I see how I have everything now
72:29 - you can obviously learn more about
72:31 - depend Bo alert on the page over here it
72:34 - talks you how you can configure your
72:36 - repository that dependable automatically
72:38 - updates the packages that you use um at
72:40 - the moment we are just focused on
72:44 - getting the alerts so I have enabled
72:46 - them now I go to security and I go on to
72:50 - dependo alerts are enabled now I can
72:52 - either click on here to save your
72:54 - dependo alerts or or I can click on this
72:55 - directly so it looks like at the moment
72:58 - there are no alerts for this right this
73:00 - is good I don't want to create any
73:02 - alerts but it's a good thing that there
73:03 - are no alerts now let's look at a
73:06 - private repository so if I go to
73:08 - repositories and let me just find a
73:10 - private one uh perhaps I can filter
73:15 - yes all right this is my private
73:17 - repository now this should have uh my
73:21 - understanding depend what it's disabled
73:24 - again s similar process I can now this
73:26 - time instead of going to settings I'm
73:28 - going to come over here and click on
73:30 - this reports setting and I can now
73:32 - enable the same things from here as
73:35 - well right so now that is enabled for my
73:39 - private Wonder oh sorry private
73:41 - repository as well now it's worthwhile
73:44 - noting that there would be some
73:46 - limitation that you will come across in
73:47 - terms of how and when it can be scanned
73:51 - but uh at least you're able to use diend
73:54 - about by default on your private and
73:55 - public report which is a good
73:57 - thing now we have that was the first
74:00 - part of the lab next part is to enable
74:02 - this at an organization level so I'll go
74:04 - to my
74:05 - organization
74:06 - specifically and now if I go to
74:11 - settings and I would go for code
74:13 - security and Analysis now over here
74:16 - depend alert affects your dependencies
74:19 - automatically enabled for all my
74:22 - repositories and it is enabled
74:26 - and automatically enable for all my
74:29 - repositories you want group okay now
74:33 - doing this has enabled it for all my
74:36 - repositories at least all the new ones
74:37 - I'll come through and that's from that
74:40 - point onwards you're doing depend alerts
74:43 - okay in the next part of the lab we'll
74:44 - talk about some actual Wonder abilities
74:46 - but this is the first part of the lab
74:50 - [Music]
74:56 - okay uh in this particular part of the
74:58 - lab we'll talk about vulnerabilities on
75:01 - dependencies that we may have so for
75:03 - this I have a repository that I had from
75:07 - before I'm just going to find the
75:09 - repository quickly so if I just go into
75:11 - this now it's worthwhile knowing that if
75:13 - you don't have a file that doesn't have
75:14 - an open source you probably would not
75:16 - find anything on the depender board but
75:19 - I think it was called view I want to say
75:21 - oh yeah perfect so this is a one this is
75:23 - a lab that uh I maintain with a friend
75:26 - of mine with that we have intentionally
75:28 - kept it vulnerable uh in terms of the
75:30 - libraries that are there that are
75:32 - vulnerable as you can see there hasn't
75:33 - been any change done for six seven years
75:35 - on this particular repository that has
75:37 - been intentional so uh the purpose of
75:40 - this lab is to show you I can already
75:42 - see seven alerts on my security so if I
75:44 - go onto that depender board is aler
75:48 - depender board alerts are enabled and
75:50 - when I click on depender board I can
75:52 - already see that I have a few by few
75:55 - moderate Wonder abilities in total seven
75:58 - open so this is what it would look like
76:00 - now the big question over here as we
76:03 - were talking and will be looking at this
76:05 - as a developer you have a look at this
76:07 - and you have to understand okay hook
76:10 - subject to provoke what does that really
76:12 - mean I don't know but I think what it
76:14 - does mean to me is that this was open
76:16 - two months ago some of them were open
76:18 - two years 5 years so this is to show you
76:21 - the fact that 7 years ago when I created
76:24 - the Repository none of these Wonder
76:26 - abilities existed but 5 years ago there
76:28 - was one discovered for cross scripting
76:30 - on the on a package in the file that I
76:33 - have for my npm which is a web packet
76:36 - bundle analyzer in the package.json file
76:39 - all of them seem to be on the
76:40 - package.json file and if I click on any
76:43 - one of them I can see how I can resolve
76:47 - it upgrade the web package to fix the
76:49 - depend board alert from going from
76:52 - 3.2.2 I can go from uh depend I can
76:55 - change the dependency and the
76:57 - recommendation is version of prior to
77:00 - our vulnerable packages use uh string
77:03 - without blah blah blah okay so patched
77:06 - version is 3.3.2 so instead of going
77:09 - for less than oh sorry that is that what
77:12 - it is oh yeah so I need to go for
77:13 - greater than or equal to 3.2 instead of
77:15 - less than 3.2 so that's if I change that
77:18 - update and if I would put a pull request
77:20 - in and that should be able to resolve
77:23 - the vulnerability
77:25 - now as you can see then four year later
77:27 - 2 year later 5 months ago 6 years ago 2
77:31 - years ago two months ago so uh the
77:34 - important parts over here is to do the
77:36 - same thing so if I go to each
77:37 - vulnerability and identify okay am I
77:40 - using this package it is saying that my
77:42 - package.json file has
77:45 - ho uh if I pronounce that right as set
77:48 - to 6.1.3 but there is no patch available
77:52 - now as an organization I have to make a
77:54 - Cho Choice fa looks like the
77:57 - vulnerability the severity is high uh
78:00 - and am I someone who's not click on this
78:03 - package or Json file uh if I just do a
78:05 - command F I can already see yep I am
78:08 - using it and I'm using a version
78:10 - 5.0.3 which is vulnerable and it affects
78:14 - every version Which is less than 6.1.3
78:17 - now I can make a choice and go the issue
78:20 - has been patched in version
78:22 - 9.0.3 I can go all the way there or
78:25 - backport it to
78:28 - 8.5.1 this is a obviously a bigger
78:31 - change uh for people who are developers
78:33 - you probably understand it now that I
78:35 - have been using version five in my where
78:39 - was it
78:40 - 5.0.3 moving from
78:43 - 5.0.3 to 8.5.1 or even .x that's a big
78:48 - change for people who have been the
78:49 - development background would understand
78:51 - this so This requires a lot more
78:53 - understanding of what other options are
78:55 - there how would we change it would
78:57 - changing the ho file would that affect
78:59 - anything else we have in the code so
79:00 - there's a lot more that needs to go into
79:02 - this as well as you understand the
79:04 - depend board alerts now you probably
79:08 - want to send email notifications for
79:09 - this as well so you would have email
79:11 - notification and you can even set up
79:13 - notification for how and where that
79:15 - should be going or uh in terms of I
79:18 - guess getting an email rather than going
79:20 - into this every single time and you can
79:23 - also have the these Auto triage feature
79:26 - which is still in beta at the moment so
79:28 - I'm not going to experiment on this lab
79:31 - but you can definitely if by the time
79:32 - you come to this recording it's already
79:34 - enabled you may want to give that a
79:36 - short where uh where dependent Bo opens
79:38 - a pull request and ignores false
79:40 - positive and SS alerts as well but this
79:43 - is how you would start and investigate
79:45 - any alert that you would get on depender
79:47 - board where after that as a business
79:49 - you'll make the call for are we going to
79:52 - fix this wondery create a poll request
79:54 - and update the package.json file which
79:56 - is the
79:58 - vulnerable which carries the vulnerable
80:00 - open source package or are we just going
80:03 - to leave it I leave that choice to you
80:05 - but that is the end of the
80:08 - [Music]
80:11 - lab Cod scanning is a service from
80:15 - GitHub which allows you to use code ql
80:17 - which is a proprietary service from
80:19 - GitHub or a code analysis engine if
80:22 - that's what you prefer if that's if
80:24 - that's EAS to understand basically code
80:26 - scanning helps you analyze a code in the
80:28 - G repository to find security
80:30 - vulnerabilities and coding
80:32 - [Music]
80:35 - errors Cod scanning is available for all
80:38 - public repositories and private
80:40 - repositories owned by organization as
80:42 - long as you have GitHub Advanced
80:43 - security enabled for the private
80:45 - repository code scanning needs to be
80:47 - enabled for public repositories as well
80:50 - and depending on whether you are happy
80:52 - with the default settings of code ql you
80:54 - are also welcome to use third party
80:58 - tools by GitHub through the integration
81:00 - they have provided for the languages
81:02 - they
81:03 - [Music]
81:06 - support code scanning uses GitHub action
81:09 - for workflow especially if you are
81:11 - folking a repository you would find that
81:13 - you won't be able to enable code
81:15 - scanning without having GitHub actions
81:18 - enabled because when you enable code
81:20 - scanning it runs a set of workflows
81:22 - which is in GitHub actions which is
81:24 - required for COD scan to
81:26 - [Music]
81:29 - work now similar to secret scanning and
81:32 - cod scanning the language is being
81:35 - supported and once enabled it fairly
81:39 - quickly goes through the code repository
81:41 - and even if you go for the default
81:42 - option but you can also go for the
81:44 - advanced option but I wanted to call it
81:46 - out that if you are folking a repository
81:48 - so it's not as simple as code scanning
81:51 - being enabled and we'll go through a lab
81:53 - later on in this lesson where we'll help
81:55 - you enable the Cod scanning
81:59 - [Music]
82:02 - capability now to enable code scanning
82:04 - when you simply click on enable you get
82:07 - this default configuration if you go for
82:09 - the default option by simply going into
82:12 - your repository clicking on code
82:14 - security and Analysis and on the right
82:16 - hand side in the middle you'll see code
82:18 - ql analysis setup and you just pick the
82:20 - default option once you pick the default
82:23 - option you should see the window on the
82:24 - the left and you simply hit enable code
82:27 - ql now it doesn't happen instantly it
82:30 - does take a few minutes for code ql to
82:32 - enable so you'll see the setting up
82:33 - screen and you would need to wait a few
82:36 - minutes before it actually gets enabled
82:38 - you would get to see this in the lab at
82:40 - the end of this lesson but for now this
82:43 - is how you enable code
82:45 - [Music]
82:48 - ql now as I mentioned there are two
82:51 - options when you click on the setup
82:53 - option for your codee ql analysis you
82:54 - can either use a default option or you
82:57 - can use the advanced option if you use
82:59 - the advanced option you're basically
83:00 - saying you're going to write a
83:02 - configuration file in yaml and you would
83:05 - not be using the default options
83:07 - provided by GitHub you would be using
83:10 - your own so that's the difference
83:12 - between a default and an advanced for
83:14 - the purpose of Simplicity and if you're
83:15 - learning I would say focus on the
83:17 - default it gives you the GitHub
83:19 - recommended option to start off with but
83:22 - if you are an advanced user definitely
83:23 - go ahead and write your own code ql
83:26 - [Music]
83:30 - configuration now it is possible to use
83:32 - code ql with third party as I called out
83:33 - earlier the simple workflow could be if
83:36 - you have Microsoft Defender if you have
83:39 - a container image being created or any
83:43 - thirdparty integration that is available
83:45 - in the GitHub Marketplace for the
83:47 - category of security they would all be
83:50 - available for you to use in the third
83:52 - party tool as integration for COD ql now
83:55 - the list keeps changing the at the time
83:58 - of the screenshot when I clicked on
84:00 - explore workflow after enabling code ql
84:04 - I only got 74 workflow options for
84:06 - security and again these are all going
84:08 - to use GitHub actions but this may be
84:11 - different if you see it on your GitHub
84:14 - profile depending on when you're
84:16 - watching this
84:17 - [Music]
84:20 - course it's worthwhile calling out why
84:23 - is code scanning important in the
84:24 - context of software development life
84:26 - cycle now software development life
84:28 - cycle goes through code where you where
84:30 - you actually write the code you build
84:32 - the code you test the code and then you
84:34 - release and deploy the code now you can
84:37 - run code scanning on every pull request
84:39 - which I would not recommend in fact
84:42 - GitHub doesn't recommend either GitHub
84:44 - in fact recommends the use of on P
84:47 - request path as a way or even request
84:51 - path ignore as a way to only scan for
84:53 - files which you want to include and use
84:56 - the pull request path ignore to exclude
85:00 - or not initiate any code scanning for
85:03 - the files that you have called out but
85:05 - if you know the location of what files
85:08 - you want to be scanned for code scanning
85:10 - then use the path variable but if you
85:13 - don't want to include certain files use
85:15 - the paths ignore
85:18 - [Music]
85:21 - variable actions on repository can have
85:23 - a set of actions that can occur on
85:25 - pre-merge pull request or push request
85:27 - so every stage of the software
85:29 - development life cycle if you're looking
85:30 - to integrate not just Cod scanning but
85:33 - security these options are
85:35 - [Music]
85:39 - available now to run a code scanning it
85:41 - is a trigger now the trigger could be
85:44 - multiple the trigger could also be from
85:46 - a push to the repository where you're
85:48 - pushing a line of code into the
85:50 - repository or someone has asked or
85:53 - triggered a pull quest which is
85:55 - triggered in a manner that it identifies
85:59 - that there is potential vulnerable code
86:00 - in there or you can write it on a or you
86:03 - can run it on a schedule basis the
86:05 - default is weekly provided by GitHub now
86:08 - code scanning configuration would allow
86:10 - you to change the code scanning schedule
86:12 - as well as event but that is also the
86:15 - advanced option if you decide to go the
86:17 - advanced path of writing your own yaml
86:18 - then that is definitely the path you can
86:20 - take now prevention is better than cure
86:23 - as someone said so if you are able to
86:26 - apply this preventatively or at an
86:29 - organization level enable it so that
86:32 - people have the option to do Cod
86:34 - scanning you may have a short of
86:37 - enabling code scanning made available
86:39 - for
86:40 - [Music]
86:43 - everyone welcome to the code scanning
86:46 - lab in this lab I already have created
86:48 - an example file if you are on GitHub you
86:52 - can go to github.com code
86:54 - Cloud security boot camp I have a
86:57 - repository that I've created over here
86:59 - which is public so you should be able to
87:00 - access it and I can put this uh in there
87:03 - as well but essentially it just Cloud
87:05 - secy boot camp and within that ghas
87:08 - example lab files which is the GitHub
87:09 - advanc security I'll create each folder
87:12 - for each of
87:15 - the different types of advanced security
87:17 - you can do in this particular lab we're
87:19 - talking about code scanning so let's do
87:21 - code scanning as you can see uh there's
87:23 - one file in here I haven't added a lot
87:26 - so the first one first thing you need to
87:29 - do is go into settings and the lab will
87:32 - talk about how do you enable
87:35 - GitHub code scanning to do that in your
87:39 - repository you can go to settings go
87:41 - into code
87:43 - security I don't have anything enabled
87:45 - as you can see depender board none of
87:46 - them are available Cod scanning is
87:49 - available which is under again code
87:51 - security analysis under the settings of
87:54 - your repository if you go into code
87:56 - security and Analysis by clicking on
87:59 - code security
88:00 - analysis and if you scroll down you
88:03 - should see a question said code ql
88:06 - analysis now as I mentioned in the
88:08 - lesson code scanning uses code ql so to
88:11 - enable that you need to click on setup
88:13 - default I would show you Advan in
88:15 - another example but for now we'll just
88:18 - use the default option it does take a
88:21 - few minutes it has recognized that the
88:23 - file that that I have is a python file
88:25 - in this
88:26 - repository it is important to know that
88:30 - code ql can only work against languages
88:32 - that we or that GitHub allows for in
88:36 - this case I picked one that it does I
88:39 - have picked the on push and pull request
88:41 - to protected Branch as well as the main
88:43 - I'm happy with that and it would do a
88:46 - weekly schedule now I'll enable this I
88:49 - can edit this if I want uh but I HP I'm
88:53 - happy with this so I'm just going to not
88:54 - going to change any of this I'm just
88:55 - going to go okay I'm going to say
88:58 - enable now it does take a few minutes
89:01 - and if you're curious as to if it's
89:03 - setting up over here if you're curious
89:04 - as to what it's doing if you come to
89:06 - actions you should start seeing over
89:08 - here basically uh as I've called out in
89:11 - the lab as well it uses GitHub actions
89:14 - to do it and because it's a public
89:15 - repository it is going to queue up a set
89:18 - of workflows in GitHub work in GitHub
89:21 - actions and at the moment I've kicked
89:23 - out the workflow for code qu setup it
89:25 - takes a few
89:27 - minutes once it completes we can
89:29 - continue the lab so I'm just going to
89:31 - pause the video and come
89:34 - back or I might just keep continue the
89:36 - recording and it might just uh or what I
89:40 - might do is I might just fast forward it
89:42 - there would be different parts to it as
89:44 - code ql is added and enabled just for
89:48 - you
89:53 - know for
90:12 - [Music]
90:28 - sh
90:54 - okay looks like code ql is set up now so
90:56 - if I go back to
90:59 - settings and code security
91:03 - analysis okay I can see the file last
91:06 - scan was 1 minute ago now if I go to
91:09 - security and I should see code scanning
91:12 - is enabled and I can click over here for
91:16 - view
91:17 - alerts it doesn't have any alerts it
91:19 - hasn't found anything on this yet it's a
91:22 - good thing so that means we are safe for
91:24 - now uh but if I go into
91:29 - code code
91:33 - scanning so it doesn't look like there's
91:35 - a lot I would have thought this would be
91:38 - picked up but this is a good example
91:40 - where it is not being picked up but to
91:44 - make it work what we can do is there's a
92:01 - I have this repository that I'm going to
92:14 - fork okay so while it's forking uh this
92:17 - is a website or this is a Juice Shop is
92:21 - by an OS Project which if you don't know
92:24 - is open web application security
92:27 - project they have a lot of these
92:28 - wonderful applications that you can use
92:30 - to identify if you have any uh
92:34 - vulnerabilities to so to continue to
92:36 - show you how it can work I'm going to
92:38 - click on actions CU I understand my
92:40 - workflow go ahead blah blah blah I need
92:42 - to
92:43 - do so if I go to settings for this and I
92:46 - click on code security analysis if I
92:50 - find my code scanning as you can see it
92:53 - would not be enable a because I don't
92:54 - have GitHub actions to enable that I can
92:57 - go into actions I understand my work and
93:00 - go ahead I clicked on that green button
93:02 - that appeared now it takes only a few
93:05 - seconds now I go back so
93:09 - okay now that I've enabled GitHub
93:12 - actions I can go into
93:14 - settings and if I go into code security
93:18 - and analysis on the left I should see
93:21 - the code ql analysis now to enable the
93:23 - for a repository the easiest thing to do
93:26 - is to click simply click on setup and
93:28 - use the default option you can use it
93:32 - has recognized there is Javascript files
93:34 - in here and python files in here so
93:36 - we'll do
93:38 - enable and if you want to see the act
93:41 - the set of actions that are taking place
93:43 - either you can just stop on this page
93:44 - and see what's going on and it would not
93:46 - show you anything or you can go to
93:48 - actions tab and you can see how it set
93:51 - up
93:56 - we'll fast forward the video to the
93:58 - point where it enables it but this is
94:01 - how you would enable code ql or code
94:04 - scanning another thing you can do while
94:07 - this comes up so I might open a new
94:09 - tab and I can show you how it works in
94:12 - an organization as
94:19 - well so if I go into this is my
94:22 - organization I can go into
94:25 - settings and within settings I have code
94:28 - security and I can use global settings
94:31 - under clo security and as you can see I
94:35 - can configure it I can and I can call it
94:40 - out recommend the extended query suite
94:41 - for repositories enabling default the
94:44 - extended query includes the default
94:46 - Suite
94:51 - plus lower severity issues so once I
94:55 - enable that I it would be enabled
94:57 - for extending queries to default Suite
95:01 - however it doesn't mean it automatically
95:02 - enables it for all the repositories
95:05 - however you can at least configure the
95:07 - recommendation for query seats to happen
95:10 - that is a global setting now there is a
95:12 - beta feature as well where you can see
95:16 - that I have two and I can
95:18 - apply uh to all repositories uh
95:21 - configuration for COD security uh I can
95:24 - even configure I can actually say hey
95:26 - I'm going to select these and I'm going
95:28 - to apply configuration for G recommended
95:30 - ones so I can just go k k up recommended
95:33 - to public
95:34 - repositories I want it to be as default
95:37 - for newly created repositories I want
95:39 - only public private and internal all
95:43 - repositories I want the code security
95:45 - configuration to be applied for all
95:48 - repositories once I apply
95:51 - that and it should kick off and it now
95:54 - has GitHub
95:57 - recommended okay so that is how you
96:01 - enable on a organization level if you
96:05 - however were on a personal account so
96:08 - I'm just going to go to my personal
96:09 - account if I just click on your profile
96:12 - so this is my personal account I can go
96:15 - into any of the packages I think I have
96:18 - the same package here as well but let me
96:20 - just go to
96:22 - repositories and I have have one called
96:24 - Juice Shop over here as well which I've
96:27 - basically foled earlier as you can
96:29 - see uh I had enabled Cod scanning before
96:33 - so I have a lot of alerts already on for
96:36 - COD scanning on everything is found that
96:39 - is the name of the file that it is
96:40 - looking at so it has found a lot of the
96:42 - code scanning wabil this is what it
96:44 - looks like I can look into the warning
96:46 - but for the time being what what I would
96:49 - do is the same thing uh maybe let me
96:51 - show you a file which
96:54 - I'll show you a file where I don't have
96:56 - it enabled so if I come back to
96:58 - the personal page I can pick any
97:00 - repository I just say I pick Cloud
97:03 - security Wonder
97:05 - Chief now to enable secret so to enable
97:09 - uh to enable scanning or code scanning
97:11 - on this if you notice I don't have code
97:14 - scanning enabled because I clicked on
97:16 - security and it show that it's not
97:18 - enabled so if I go to
97:20 - settings and I click on code security
97:24 - and Analysis and I come down I can see
97:28 - that code ql analysis is available I can
97:30 - click on setup same thing that you see
97:33 - at an organization repository it would
97:35 - not be any different when it's a
97:36 - personal account so you can do that and
97:40 - if you want you can click on edit and
97:42 - you can have a look at these but I don't
97:44 - believe you can change them unless you
97:46 - want to extend the default Suite in any
97:48 - other way but simply clicking on enable
97:50 - code ql should enable that for disal
97:53 - tutory
97:54 - now it's worthwhile noting I don't have
97:56 - uh I have a plenty of Json nothing
97:58 - really sophisticated over here it's just
98:00 - a readme file I'm not expecting it to do
98:03 - a lot of things here but I should see
98:05 - the same if I click on actions I should
98:08 - be able to see that I don't have much in
98:10 - there apart from I have all these
98:13 - Services enabled and to always confirm
98:15 - if you have Services enabled click on
98:17 - security for any repository and you
98:19 - should be able to see what services are
98:21 - enabled that's pretty much it that's
98:23 - what I want to cover in terms of
98:25 - enabling code secure code scanning for
98:28 - repositories and that's the end of this
98:30 - uh chapter I'll see you in the
98:33 - [Music]
98:36 - class using code ql to do code scanning
98:39 - this is how you enable code scanning by
98:42 - going to settings code security and
98:44 - Analysis code ql analysis and setup now
98:48 - for this we are picking the default
98:49 - option for now but we will talk about
98:51 - advaned in a bit in the same module this
98:53 - is how you would enable it for an
98:55 - individual repository but you can also
98:57 - enable that for a organization in GitHub
98:59 - as
99:00 - [Music]
99:03 - well if you are working for an
99:05 - Enterprise you probably already have
99:07 - third party tools that you may be using
99:09 - already that are already scanning cord
99:12 - doing wable scanning and a lot more
99:14 - fortunately GitHub Advanced security
99:16 - also allows you to import alerts from
99:18 - thirdparty code scan results in the form
99:21 - of sarif files that is static anal is
99:23 - results interchange format so Mouse full
99:26 - but s a r i f those who did not get the
99:29 - full thing so sarif files are basically
99:31 - alerts that have been captured in a
99:34 - third party scan of the same code that
99:37 - is in your repository right
99:39 - [Music]
99:42 - now so sarif files now you can upload
99:45 - these files using Cod scanning API Cod
99:48 - ql CLI or even GitHub actions however
99:51 - worthwhile calling out if you do use
99:52 - GitHub action method it still requires
99:55 - the use of giup actions workflow using
99:57 - the upload sarif action with the sarif
100:00 - file as the input and for those of you
100:03 - who probably know GitHub actions in
100:04 - detail you understand this this would be
100:06 - a step inside a GitHub actions
100:09 - [Music]
100:12 - file here I have in the screenshot an
100:14 - example of what a sarif file looks like
100:17 - it has configuration this is from a
100:19 - JavaScript typescript SF file that I
100:22 - downloaded from G iub the First Column
100:25 - is configuration second as a rule source
100:27 - and third as the unique identifier and
100:29 - fourth as the alert now this is a
100:32 - standard format that is recommended to
100:34 - be used if you're importing third party
100:36 - scan results into GitHub so that you can
100:38 - see them in code scanning in the way it
100:40 - should be
100:42 - [Music]
100:45 - seen now in case you're wondering what
100:47 - happens when you click on code ql enable
100:51 - it basically runs a set of GitHub
100:52 - actions in the background and we'll show
100:54 - this in the lab as well you can even
100:56 - have workflow files created as yaml
100:59 - format in the GitHub workflow SL cq. now
101:04 - the name of the file is not important
101:06 - you can call it anything you like but
101:08 - you can refer to it in the spe in the
101:12 - action that should happen when code
101:14 - scanning is enabled and it would
101:16 - understand oh this is the file that I
101:18 - need to use now Cod scanning obviously
101:20 - is once enabled kicks off actions by
101:24 - itself first one would be to install
101:25 - code ql and second one if you have a
101:28 - schedule it would set up a schedule for
101:31 - a periodic scan to run of code scanning
101:34 - for the repository that you have in
101:35 - front of
101:36 - [Music]
101:39 - it now if you choose to go down the
101:42 - custom configuration path that is
101:43 - instead of using default configuration
101:45 - if you choose custom
101:47 - configuration in this example I'm using
101:49 - a code q. yaml file that's the file
101:52 - would define what configuration would be
101:54 - used for scanning code in that
101:58 - [Music]
102:01 - repository another thing that also
102:03 - happens automatically is that it detects
102:06 - what language is being used for code
102:07 - scanning uh code qy is pretty smart like
102:10 - that they obviously support a a certain
102:13 - number of languages and they have
102:15 - detection capability
102:17 - for understanding that the repository
102:20 - that they're working on has a certain
102:21 - kind of language and code k pretty smart
102:24 - to detect it however you are able to add
102:27 - query Suite uh into it as well now more
102:30 - on query Suite later to enhance your
102:34 - [Music]
102:37 - findings that we understand what happens
102:39 - when code scanning is enabled it is
102:41 - important to know that code scanning
102:42 - essentially is running a code ql
102:45 - analysis engine in the background which
102:47 - is why get up action starts off by
102:49 - installing code ql the analysis engine
102:52 - first
102:53 - creates a database using information
102:56 - from the code repository and the
102:58 - database itself is a single directory
103:00 - created to analyze relational data
103:02 - copyed source file and a language
103:04 - specific database schema that specifies
103:06 - a mutual relationship in the data which
103:08 - goes back to what I was referring to
103:10 - that it automatically detects what
103:11 - language is in use that's how it will be
103:13 - able to work on
103:15 - [Music]
103:18 - it once the database is created code ql
103:21 - can run queries again against that code
103:23 - ql database for code ql queries you need
103:27 - ql or query language which is object
103:30 - oriented query language and the language
103:32 - is used to run against the code ql
103:35 - database which has the information on
103:38 - the code
103:39 - [Music]
103:42 - database now let's Deep dive into code
103:45 - ql GitHub code ql is a sematic code
103:48 - analysis engine that's you query data as
103:50 - so it were data in this case it would be
103:52 - a cql database which would have the
103:55 - relational context of the source code of
103:58 - all the files that are in the repository
104:00 - cql is not just to find information that
104:03 - is relevant for a non-security activity
104:06 - you can also use it for identifying
104:13 - vulnerabilities pql files usually have
104:15 - AQL extension and there usually two
104:18 - types of queries one is alert based and
104:20 - the second one is path-based and alert
104:23 - based highlights issues in a specific
104:25 - location in your code that's what would
104:27 - raising alert a path query would
104:30 - describe the flow of information between
104:31 - a source and a link to your
104:36 - code the screen also has an example of a
104:39 - code ql query if you notice a fourth
104:42 - line or even if you just look at the
104:43 - format and I'm going to talk a bit more
104:45 - about the format it does look like a
104:46 - databased query it has import from where
104:50 - select
104:51 - [Music]
104:55 - dive a bit more deeper into this
104:57 - essentially import would be defining the
104:58 - library or modules that you want to
105:00 - import into the query now this is your
105:03 - cql classes for people who are used to
105:05 - programming they might understand this
105:07 - already but I would say the easiest way
105:09 - to understand this is that uh first it
105:11 - starts off by having a lot of comments
105:14 - it helps you understand what each
105:16 - information needs to be the very first
105:18 - section is a commented section for query
105:21 - metadata that is if you have any some
105:23 - queries that you wanted to include in
105:24 - your code qul execution second line is
105:27 - for import where you can import
105:30 - different code ql libraries or modules
105:33 - by calling them out in your code ql file
105:35 - as you create them now this could also
105:37 - be code ql classes and predicates as
105:41 - [Music]
105:44 - well now there are other variables you
105:46 - can also use in a code query for example
105:48 - you can use name to define a label for
105:50 - the query you're currently to create
105:52 - description could be description in
105:54 - detail on what the query would be
105:55 - related to the kind as I mentioned
105:58 - earlier there are two kinds either alert
106:00 - or path and the prompt for that would be
106:02 - either problem or path problem problem
106:05 - severity defines the level of severity
106:07 - error warning or
106:09 - note Precision defines the priority of
106:11 - the problem is this a very high or a
106:14 - high or a medium or a low risk ID is a
106:17 - unique identifier and tags are labels
106:20 - you can attach to identify the query
106:25 - [Music]
106:28 - easily so let's put this into practice
106:31 - if I had the above which is if error
106:33 - handle the error as a comment the if
106:36 - expression in this Ruby is a bit
106:38 - redundant because there is nothing
106:39 - really going on if I use the if
106:41 - statement but what if I wrot it the way
106:44 - that it is at the bottom I first import
106:46 - the Ruby abstract syntax tree which is
106:48 - ASG file for code ql after that I use
106:52 - the if Express now it calls if Express
106:55 - which is from that ruby. ASG file that I
106:58 - imported just before now where not exist
107:01 - ex if express. getet then is basically
107:05 - where the content of the if then
107:07 - expression does not exist and select is
107:10 - a as I said earlier is a filter that you
107:12 - apply for what you want the result to be
107:15 - filtered by so in this case it would be
107:18 - it would be a human readable message of
107:20 - the problem based on this if expression
107:23 - is redundant that is if it matches a
107:25 - criteria it is going to display the
107:28 - [Music]
107:31 - result that was just a single query but
107:34 - you could also have something called a
107:35 - query Suite which is basically grouping
107:38 - of code queries that run against your
107:40 - cord but a grouping of it not just one
107:43 - or two but you can have as many that
107:46 - makes sense and are available in your
107:48 - code quer Suite
107:51 - [Music]
107:55 - GitHub also has a built-in code Suite
107:57 - which is set as default but you can also
107:59 - do security extended version to it as
108:00 - well now queries included in the Bild
108:02 - feed also are supported by languages
108:04 - like C C++ C go Java cing queries Java
108:09 - and typescript which is the example I
108:11 - showed you earlier python queries which
108:13 - is the lab we'll be seeing soon
108:15 - JavaScript is also in the lab Ruby
108:18 - queries for code ql analysis Swift
108:21 - queries for people who are the Apple
108:22 - iPhone people writing quotes for apps
108:25 - that would be swift queries for code
108:27 - [Music]
108:31 - analysis the buil-in queries for the
108:33 - query suet can be viewed in your GitHub
108:35 - documentation which is easy to find this
108:37 - is specific one is for python analysis
108:40 - you can see the first one being
108:42 - accepting unknown SSH host Keys when
108:46 - using paramiko aary file right during
108:50 - tar file
108:51 - extraction bed HTML filtering
108:54 - rejects all of these are definitely
108:57 - things you can call out as well as
108:59 - things that are helpful for you to
109:00 - quickly understand what the query would
109:02 - relate
109:06 - to there also code ql packs now cql
109:10 - packs are consisting of not just cql
109:13 - queries libraries which you can use the
109:15 - pack to share create and us it as a
109:18 - dependency as well and in your metadata
109:20 - if you'd like to include that in there
109:22 - as well a Cod ql pack contains queries
109:25 - Library files query sues
109:28 - [Music]
109:31 - metadata but there are three kinds of
109:33 - cod Q packs for example you have query
109:36 - pack Library pack and the Mortal pack
109:38 - query pack is a pre-compiled query which
109:40 - was what we were looking at just in the
109:42 - previous slide Library pack is to be
109:45 - used with a query pack but they do not
109:47 - contain any query these queries are not
109:49 - compiled separately but these could be
109:51 - custom on that you would created
109:53 - yourself model packs used to expand code
109:55 - scanning to recognize libraries and
109:57 - Frameworks that are not supported by
109:58 - default like for example if you may have
110:01 - an organization specific code ql query
110:03 - that you would want to include you can
110:05 - use this for
110:06 - [Music]
110:09 - that now that we understand the anatomy
110:12 - of code ql and what happens when code ql
110:14 - is running it is worthwhile knowing once
110:16 - you've enabled code scanning you can use
110:19 - two ways to run code ql code scanning
110:23 - one is code scanning workflow where it's
110:25 - a default you are either using Code ql
110:27 - packs or code ql queries to inform your
110:30 - code Quil analysis engine on what test
110:32 - to run the second option is your custom
110:35 - configuration file which is if you have
110:37 - used the Advan option for setting up
110:39 - code ql you could use that as a way to
110:42 - start building up code ql packs as well
110:45 - as code ql queries that you can be
110:47 - adding to the scan
110:48 - [Music]
110:53 - about the registry of standard code ql
110:55 - packs it maintains on GitHub which also
110:57 - reminds me that you can use code qul
111:00 - code ql to scan containers as well
111:03 - either using third party tools or simply
111:06 - using existing packages available in
111:09 - your code ql now different kind of
111:11 - packages do exist you can install
111:14 - standard packages like your code ql CPP
111:16 - C go Java JavaScript Python and Ruby as
111:20 - well which can be automatic downloaded
111:21 - if not download
111:24 - [Music]
111:27 - already worthwhile knowing that if you
111:29 - have both that is if you already have a
111:31 - workflow defined but you also Define
111:34 - queries in your configuration file the
111:37 - workflow files queries would be the only
111:40 - ones used unless you add the plus symbol
111:44 - to include the configuration file
111:45 - queries when the workflow kicks off more
111:48 - information can this be F can more
111:50 - advanced information on this can be
111:51 - found on the gab
111:53 - [Music]
111:57 - website now so far we've been talking
111:59 - about how to enable code scanning we've
112:01 - spoke about how to use code ql and what
112:05 - really happens when you start it and
112:07 - what kind of rules you can have now we
112:09 - can go a lot more deeper into it and I
112:12 - would highly encourage you to do that
112:14 - but GitHub Advanced security is a bit
112:16 - more than
112:18 - just configuration files it's also about
112:21 - all these alerts that you're going to
112:23 - get perhaps could be over 100 alerts
112:26 - when you run it on a file all these
112:28 - alerts may appear on under your security
112:31 - tab for your repository and please don't
112:35 - send this as it is to your development
112:37 - team or whoever supposed to be
112:38 - responsible for looking after the
112:40 - results of vable instances in your code
112:44 - repository instead I would encourage you
112:46 - to have this workflow for your alerts
112:48 - first one would be someone in your team
112:50 - is triaging whether the Cod scan alerts
112:53 - are genuinely a false positive that is
112:56 - they are not true or are they a true
112:58 - positive which means they are true and
113:00 - someone needs to investigate this
113:01 - further because you have identified it
113:04 - is a one and it can be
113:07 - [Music]
113:11 - exploited now the step two on this
113:13 - workflow would be now that you've
113:15 - identified that it's a true
113:17 - positive your organization most likely
113:19 - has a security risk Matrix to identify
113:22 - hey what do you do with high medium or
113:25 - low rating of risk for security and
113:28 - specifically technical risk of security
113:30 - and you would be expected to follow the
113:33 - appropriate procedure to take steps
113:34 - towards resolving the
113:36 - vity that is if it makes sense for the
113:38 - identified risk
113:40 - rating at this point in time you are
113:42 - engaging with the development team the
113:44 - product management team and anyone else
113:46 - who probably is supposed to be in the
113:48 - loop for them to be aware of a
113:51 - vulnerability being identif ified
113:52 - especially if it's a very high or a high
113:54 - vulnerability and the rating may change
113:56 - from organization to organization but
113:59 - the processes on the at least on a very
114:01 - very high level are very similar the
114:04 - steps to take after you've identified a
114:07 - true positive may vary from an
114:09 - organization as
114:11 - [Music]
114:16 - well okay welcome to the lab for module
114:19 - 5 we can talk about code ql to start off
114:22 - with I am in my cloud security boot
114:25 - camp get a repository I only have one
114:29 - just an example lab file that I created
114:32 - I had that enabled for so just for me to
114:36 - see what how I have enabled and what I
114:39 - have enabl for security I can simply
114:40 - click on the security tab on the top and
114:43 - clicking on that which has number three
114:45 - next to it I can simply go and see okay
114:48 - my dependabot alert is enabled my code
114:51 - scanning en is en enabled and my
114:53 - scanning for Secrets is also enabled but
114:55 - looks like I only have three Secrets
114:59 - which is probably a bad thing but
115:01 - still but I don't have any dependabot
115:04 - vulnerability I don't have any code
115:06 - scanning vulnerability now I'll be
115:09 - honest I'm not the best programmer in
115:10 - the world but one thing I know for sure
115:13 - is I at least know how to find wable
115:16 - cord which I can fix so in this scenario
115:19 - I have an example for you that I've
115:21 - looked into before
115:22 - uh oh there a very popular organization
115:24 - called oosp and what I'll do is I will
115:28 - copy that repository over here so this
115:31 - is called Juice Shop which is a
115:32 - repository from oosp Juice Shop oosp is
115:36 - a open source vulnerability management
115:39 - project they are they stand for open web
115:41 - application security project and the
115:43 - intent behind had U is the most modern
115:46 - sophisticated insecure web application
115:49 - that's how they describe it because the
115:51 - intent behind creating this repositories
115:53 - for people like you and me for us to
115:55 - learn on how we can do security and what
115:57 - are some of the bad things we can look
115:59 - at but in our specific scenario we can
116:01 - use this to test out the GitHub Advanced
116:04 - security get code scanning option so for
116:06 - this I would do a fork that is I would
116:10 - create a copy of this for myself I can
116:12 - do that by clicking on the fork button
116:14 - you can click on the drop down if you
116:15 - like and you can say where you want to
116:17 - create it I already have a folk on my
116:18 - personal but I want to create a new one
116:20 - so I'll just click on create a new new
116:22 - one and I can choose the owner to be my
116:26 - organization now there is no other
116:27 - repository under Cloud security boot
116:29 - camp with that name so that's what would
116:31 - stick and I can probably say number two
116:35 - so just it's a bit different and I can
116:38 - copy the master Branch only I don't
116:40 - really want to have any of the sub
116:42 - branches uh if I've done all of that I
116:44 - can just click on the green button which
116:46 - is create Fork now it does take a few
116:49 - seconds sometimes few minutes but well
116:52 - it only take a few second but it that is
116:54 - how it would be and now you you notice
116:57 - this is under Cloud security boot camp
116:59 - if you see where my mouse is highlighted
117:01 - uh it is a public repository called
117:04 - Juice Shop under Cloud boot camp and
117:06 - it's folked from the actual original
117:09 - repository now we're not done yet we
117:11 - obviously only have a one rable
117:13 - repository that I have just brought into
117:16 - my uh GitHub organization I don't really
117:20 - know how to do I I don't really know yet
117:22 - how to learn code scanning so what I'll
117:24 - do is I'll go and enable this first so
117:27 - if I go to settings on the top right and
117:30 - code security and Analysis now I've
117:32 - mentioned this before but I'll call it
117:34 - again because this is a
117:36 - fork and because we just learned from
117:38 - the class that code ql code scanning
117:41 - requires GitHub actions we would not be
117:43 - able to do anything just yet so let me
117:46 - show you why if I go to code security
117:49 - analysis and if I see look at that it's
117:51 - not not enabled because GitHub action is
117:54 - not available now I can either click on
117:57 - enable it here or I can submit a code
118:00 - scanning result which is the s a file I
118:04 - can click on that and basically talks
118:06 - about how you can upload a SF file using
118:08 - the three options that are available but
118:11 - I'm going to keep it simple for you guys
118:12 - so I'm just going to Simply click on
118:14 - enable it now it's going to ask me hey
118:17 - you understand you can either look at
118:19 - the workflow directory yourself but you
118:21 - can look at it after as well but you can
118:23 - say I understand my workflow go ahead
118:25 - and enable them because we are smart
118:27 - people so I'm going to click on the
118:28 - green button all right now we are under
118:31 - the actions tab which is your GitHub
118:34 - actions tab workflow and as we just
118:37 - learned in the class um workflow is
118:40 - where you define all the automated
118:42 - action that the GitHub action is about
118:44 - to take we're obviously keen on the code
118:46 - key scan uh it hasn't run yet so that's
118:50 - why you don't see it but you can see the
118:51 - file
118:52 - that would be triggered when code ql is
118:54 - enabled so if I click on
118:56 - that you would be able to see the file
119:00 - which is the workflow and code analysis
119:02 - file this is the file that we run this
119:04 - is what
119:05 - a code ql custom would look like custom
119:10 - Advance would look
119:11 - like the easiest way to understand this
119:14 - uh this is a GitHub exper this is a
119:17 - GitHub action file more than a codee ql
119:20 - file so the simple way to understand
119:22 - this if you've never seen codee ql is
119:24 - that this would run on push as well as a
119:27 - pull request this also calls out that
119:29 - hey when you are running a job called
119:31 - analyze run the analyze function run it
119:34 - on an Ubuntu container it should have
119:37 - action and content as the read and the
119:40 - security event should be written down it
119:42 - should be on JavaScript and typescript
119:45 - language now once it's defined what the
119:49 - analysis directory database container
119:51 - would be you can then look at the number
119:53 - of steps each name is the step that
119:56 - would be taken that's name code checkout
119:59 - repository initial initialize code ql
120:03 - and then Auto build perform code ql
120:05 - analysis now all of that is triggering a
120:08 - GitHub /ql action and it's already
120:11 - called out the file and the checkout it
120:14 - needs to run that's how that's the
120:16 - simplest example of a code ql scan now
120:20 - that we've done all of this you you
120:22 - should come back onto security which is
120:24 - in the top if I click on that you would
120:26 - notice that depend of what was already
120:28 - set up so it has identified that I have
120:32 - 13 Oneil in my depender board which I'm
120:36 - going to ignore for now because we are
120:37 - focused on code scanning at the moment
120:39 - it's not if I click on code scanning
120:41 - it's not configured but instead of
120:43 - configuring here let me just take you to
120:46 - settings and code security and
120:50 - Analysis you scroll scroll down should
120:53 - see Cod scanning and now look at that
120:55 - looks a bit different doesn't it now I
120:58 - have spoken about the third party tools
121:00 - I will talk about it again but for now
121:02 - let's just choose setup and default I'm
121:05 - happy with this it's identified that I
121:07 - have python as well as JavaScript in
121:11 - my
121:12 - repository it has extended some query
121:15 - suets as well and I have it on push and
121:18 - pull it would run on weekly schedule now
121:20 - I can edit this if I want but I don't
121:22 - really want to so I'm just going to go
121:23 - enable code ql now once this is starting
121:27 - to set up you should see assigned
121:28 - repository setting save may take a while
121:31 - because Code full scan of the repository
121:33 - now if you look at the bottom it says
121:35 - it's setting up so code ql is still
121:38 - setting up if you want to see what it's
121:39 - about you can go to the actions tab
121:41 - which is on the top and you can see it's
121:44 - running a code Q all set up now if you
121:46 - give it a few minutes uh it should run
121:49 - the code ql and hopefully because we
121:52 - definitely have aable code in here the
121:54 - security number should update from 13 to
121:57 - a larger number with a bit more than
121:59 - just my dependency B alert but while
122:02 - it's doing that I wanted to show you
122:05 - what third party tools you can use as
122:08 - well now if I go into
122:12 - settings I come back over
122:16 - here and if I click on the explore
122:20 - workflow
122:23 - these are there are 74 code
122:26 - scanning workflows that are available
122:28 - for us to use the best one obviously
122:31 - being the code ql analysis from GitHub
122:33 - itself if you just want to stick to that
122:35 - but there are a lot of third parties
122:36 - that you can also use for code scanning
122:39 - there are Microsoft products
122:41 - non-microsoft
122:42 - products uh a lot of them basically you
122:45 - can keep going through all of them pick
122:47 - the one that your organization has
122:49 - already gotten an allegiance with or
122:51 - probably already working with uh they
122:53 - also as you can see this is by GitHub
122:55 - actions as well I would probably only go
122:58 - for the one that you recognize there's
123:00 - one from meta for a python compliance
123:03 - one uh I would only look at the ones
123:06 - that you are comfortable to run in your
123:09 - organization and are bu I guess for lack
123:12 - of better word identities that you trust
123:15 - or organizations that you trust I think
123:17 - at this point in time I'm only only
123:19 - accepting GitHub actions as the OWN ERS
123:22 - or Microsoft as the owner that's
123:24 - probably trustworthy for me I can
123:27 - probably use those uh Microsoft
123:29 - Corporation quite a few of them
123:31 - depending on the purpose you can search
123:33 - the one that makes the most sense for
123:35 - you and just use that so you can
123:38 - integrate that to integrate that let's
123:40 - just do
123:41 - configure if you click on configure it
123:44 - takes you to the code ql file now this
123:47 - is exactly what we spoke about in the
123:49 - class we gave it the name when do we
123:52 - want it on what branches do we want it
123:55 - how often should the schedule run for
123:57 - that
123:58 - workflow what should the analyze job
124:03 - have whether the security event should
124:05 - be
124:06 - written you should fetch internal or
124:09 - private code ql
124:11 - packs the
124:15 - strategy and then we are on to the steps
124:18 - this is exactly what I was showing you
124:19 - in the previous one if you notice over
124:22 - here you can first initialize code ql
124:24 - that's what's going to kick off it's
124:26 - going to identify the language from its
124:28 - existing Matrix and also the
124:32 - build and if the build is manual it's
124:35 - going to run a shell command and the
124:38 - shell command is going to basically if
124:39 - you are manual make bootstrap make
124:41 - release and
124:43 - exit and the rest of the analysis would
124:45 - happen at the same time as well that's
124:47 - when it would use the perform code
124:49 - analysis now this is how code ql itself
124:53 - runs which is what we would seeing over
124:55 - here uh if I just refresh this page
124:59 - sorry just one
125:00 - second oops not that I wanted to do that
125:04 - uh it is still setting up so um the if I
125:07 - come back to the action it can still set
125:09 - up still in progress give it a few
125:11 - minutes and it should just basically
125:12 - work after that so I'm going to pause
125:15 - the video and I'll come
125:20 - back
125:50 - for
126:20 - e
126:50 - e
127:20 - e
127:50 - e
128:20 - e e
128:59 - okay look like my okay I'm back and
129:01 - looks like my code ql is setup is
129:03 - finished so I go into code ql I can see
129:10 - that there was an a bit of an error as
129:12 - you can see over here realtime shooting
129:14 - of the error uh for some reason it was
129:16 - not able to make a connection and was
129:18 - timed out but it's still finished so I'm
129:20 - not going to question it now because of
129:21 - a success uh but let's just quickly see
129:24 - what it did so if I click on analyze I
129:27 - can see it did a
129:28 - [Music]
129:31 - perform it a setup so if I click
129:34 - clicking on this it you can see what it
129:36 - did exactly what was called out in the
129:39 - file it basically had a checkout
129:41 - repository with the with it basically
129:44 - called out
129:46 - the image it called out the GitHub token
129:49 - to be used and as it went through it it
129:52 - initialized it set a code ql and perform
129:56 - post initialize you can actually see the
129:58 - entire job over here the more important
130:01 - thing over here is the output cleaning
130:03 - up orphan
130:05 - evaluate there are no errors over here
130:07 - which is a good thing so it definitely
130:10 - worked uh so did analyzing the python
130:13 - files and it did a great job of looking
130:17 - at it and it did some adjusting required
130:20 - nope not required quired okay so now if
130:23 - you look at the top you probably will
130:24 - notice that hey there are
130:27 - 132 things that have been wrong which is
130:30 - probably not a bad well it is a bad
130:32 - thing as I was saying in my example
130:34 - there are
130:36 - 119 uh incorrect there are 119 wable
130:41 - files potentially if impacting this
130:43 - particular code repository it is mod is
130:45 - meant to be so uh if you see more don't
130:48 - be afraid because it just could be that
130:50 - when you're running this
130:52 - Cod scan against the version of Juice
130:54 - Shop that you're running there may have
130:55 - been more one that have been discovered
130:57 - but the important thing over here is I
130:59 - have it enabled and now I can see my
131:01 - code scanning results as as you would
131:03 - have noticed it does take a few minutes
131:05 - even after it's turned on for to finish
131:08 - a full scan but this is what I am facing
131:11 - at this point in time I have 119 open
131:14 - issues now it is important to understand
131:17 - the criticality so if I click on
131:19 - severity you would see there's low
131:22 - medium high and critical this is what I
131:24 - was referring to in the class that
131:27 - critical means that it is really
131:28 - critical that this should be looked at
131:31 - today like right now and it may be
131:34 - different for different organizations
131:36 - but I would still looking at the
131:38 - critical that we have if I just filter
131:40 - this by critical you would notice that
131:44 - there is a lot of critical right there
131:46 - right so I'm just going to go okay I
131:49 - can't clue everything here so I'm going
131:51 - to
131:52 - sort uh how do I what's the best way to
131:54 - approach this I have 119 code ql 19 of
131:58 - them out of the 119 have been found to
132:01 - be critical so I would as a first step
132:05 - if I was most
132:07 - organization I would just go through
132:08 - these uh let's take the first one ex oh
132:12 - now remember we are doing it based on
132:15 - the severity we're not doing it based on
132:18 - oh what looks the most interesting it is
132:20 - very important for for you to know that
132:22 - you're responding based on the
132:23 - criticality of the severity of the ra
132:28 - alert raised over here critical being
132:30 - the most important followed by high
132:31 - followed by medium followed by
132:34 - low and when there are 119 the last
132:37 - thing you want to do is send it all to
132:39 - your developers because as we saw in the
132:42 - class this could have a lot of false
132:44 - positive in there as well so let's check
132:47 - let's investigate the first one just for
132:49 - you know actually how about we do code
132:51 - section that probably is the more
132:52 - enticing one or even hardcoded
132:54 - credential as well that could be
132:56 - something people should look at so if I
132:57 - click on hardcoded credential oh look at
133:00 - that it has a beer token right there
133:02 - which it looks like it definitely looks
133:04 - like a password so I probably would this
133:07 - is definitely in my opinion it is it is
133:09 - a critical because I can see it's a code
133:12 - now me as a security analyst who's
133:15 - reviewing this I can either copy out
133:17 - this entire token and if I have an
133:19 - internal validator for for o tokens or
133:22 - just oo jot tokens I can simply use that
133:26 - to identify is this coded is this key
133:29 - still vulnerable or is it still active
133:32 - and uh if it is I need to ask the
133:36 - developer responsible for this
133:37 - repository to replace them and probably
133:40 - remove them as well especially if this
133:42 - is a public repository which in my case
133:43 - it is what about another one let's just
133:46 - go code injection which we were looking
133:48 - at just
133:49 - slightly this this is based on the fact
133:52 - that I am not filtering the input that
133:56 - I'm taking from the user that's where
133:58 - it's calling out that hey by the way if
134:01 - you're directly evaluating user input
134:03 - code without properly sanitizing the
134:05 - input first allows an attack's arbitary
134:08 - code execution so I could literally send
134:10 - it some kind of injection attack and it
134:13 - would be interpreting it and running
134:15 - that instead of running the actual code
134:17 - now these are some of the examples and
134:19 - as you would have seen in the class we
134:21 - spoke about how these are uh to be
134:24 - triaged don't send all of them to the
134:26 - developers in one go make sure you at
134:28 - least have a look
134:30 - at whether they are false positive or
134:33 - true positiv now if you notice it's
134:35 - reported a bit of a warning for me so if
134:37 - I go into
134:39 - this I can see that the status of the
134:41 - tool now there's two ways to come here
134:43 - you can either click on that button or I
134:45 - can go back on tools go back one more
134:49 - you can see over here it says add tool
134:50 - and and says tools if you press in tools
134:54 - you should see I only have one tool
134:55 - called code ql and it last Rand 10 n
134:59 - minutes ago it is looking for it has
135:03 - looked at 571 file 571 that for
135:06 - typescript three files that were Python
135:08 - and 14 files that were JavaScript so
135:11 - it's primarily a typescript uh file or
135:14 - typescript repository I can click on
135:17 - this and view the setup I can go okay it
135:20 - is the code ql that I had enabled it is
135:23 - set with default nothing to see there I
135:25 - can click on view configuration I can
135:27 - see when it was last configured and look
135:30 - at that I'm actually on the same screen
135:31 - that I was on before now if this was
135:34 - important for me when it last ran the
135:36 - scan and I found that it could not
135:39 - process a file due to syntax error a
135:42 - part error for syntax was to now I have
135:46 - two options either this is a legit like
135:50 - I can go into the last
135:51 - scan and look at where it was where it
135:54 - found what it found and look at that all
135:57 - of that and there was one particular
136:00 - place it was called out
136:03 - as it should not be right okay so all of
136:06 - these looks like name changes that need
136:09 - to
136:10 - happen
136:12 - and yeah that has not been called
136:15 - out and to ignore the white space for
136:19 - now yeah so it's basically showing us
136:22 - hey this is a change that we can uh we
136:26 - can commit if you want by making by
136:29 - fixing broker links and it is being
136:30 - shared by someone else and at this point
136:33 - in time I don't want to accept any
136:35 - queries from so I'm going to keep going
136:36 - back one more step back I can cancel it
136:39 - all right now the syntax error at this
136:43 - point in time I have the choice of uh
136:45 - either I can use the exclude option in
136:47 - my configuration file to exclude the
136:49 - folder altoe where that JavaScript is
136:52 - because we didn't have a lot of java
136:54 - files but if I want to I can just
136:56 - correct that as well and use that as a
136:59 - way to um I guess continue my scanner
137:02 - full Glory now these are just the
137:04 - standard tools that are available from
137:06 - code ql if I keep going back you can OB
137:09 - obviously worthwhile knowing you can
137:11 - also add tools as well which takes you
137:13 - back to the workflow screen and you can
137:15 - set up a work for yourself that is how
137:18 - you
137:19 - would identify
137:22 - enable as well as triage Cod ql results
137:27 - for based on COD scanning done by GitHub
137:30 - Advanced
137:33 - security that is all that is all I
137:35 - wanted to cover in this lab I will see
137:37 - you in the next
137:39 - [Music]
137:43 - one it's important to understand how
137:45 - GitHub Advanced security works with the
137:47 - software development life cycle now if
137:49 - you are a developer you you probably
137:51 - understand a software development life
137:53 - cycle but if you've never heard that
137:54 - before a software development life cycle
137:56 - is what you see as a diagram at the
137:58 - bottom from the time you write your
138:00 - first line of code in your
138:03 - IDE all the way up to you deploying that
138:05 - into your version control system and all
138:08 - the way into an environment that entire
138:10 - process is called software development
138:11 - cycle now security can be integrated at
138:15 - various parts and it's the same with
138:18 - ghas GitHub Advanced security allows you
138:20 - to integrate things like security
138:22 - policies code scanning secret scanning
138:25 - depend the board and also provides you a
138:28 - security
138:29 - [Music]
138:33 - overview depending on the organization
138:35 - you're working for this may look
138:37 - slightly different and based on the plan
138:40 - you have with GitHub this may look a bit
138:42 - different as well but one thing is for
138:44 - certain you do want appropriate security
138:46 - access controls for all the findings you
138:49 - don't really want everyone in your
138:50 - organization to be aware of all the
138:52 - vulnerabilities that have identified for
138:55 - a repository especially if it's a
138:57 - production repository so you may decide
139:00 - and choose to have only a small set of
139:02 - team members or individuals who can
139:04 - access these services and get
139:06 - notifications from it that is probably
139:08 - the number one best practice I'll call
139:09 - out right as the
139:11 - [Music]
139:14 - bat As you move into a bit more detail
139:17 - on how and what services can be applied
139:21 - the First Security Service that I'll
139:22 - call out in GitHub Advanced security
139:24 - that you can use in your organization
139:27 - especially if you have a GitHub
139:29 - Enterprise unfortunately this is not
139:30 - available for non-enterprise license the
139:33 - service that I'm talking about is called
139:35 - security overview security overview
139:37 - helps you get an overall security status
139:40 - across all your repositories within an
139:42 - organization now that helps you look at
139:44 - all the risk posture secret scanning Cod
139:49 - scanning as well as dependenc as well in
139:52 - one good
139:53 - [Music]
139:57 - picture if you are someone who has
139:59 - looked at security policies before that
140:02 - is usually in the beginning where you
140:03 - can configure how people can inform
140:07 - certain threats that may be in your
140:09 - repository usually security team would
140:11 - Define the policy and how this can be
140:13 - used to report on any threats this is
140:16 - usually done at the project
140:17 - configuration status where you are
140:19 - defining where
140:21 - before someone code has import into the
140:23 - repository on how you want your
140:26 - vulnerabilities to be
140:28 - [Music]
140:31 - disclosed this is no particular order
140:33 - it's just my preference to have secret
140:35 - scanning as a first thing that I
140:37 - normally get implemented if you're
140:39 - thinking of implementing security into
140:41 - your GitHub pipeline I would say GitHub
140:44 - Advanced security secret scanning or
140:46 - secret scanning in general could be a
140:47 - good place to start integrating security
140:49 - because secret scanning is known to most
140:51 - people and as we have done in other
140:53 - modules here you probably would
140:55 - understand what secrets are and why you
140:58 - don't want them there but if it's not
141:01 - implemented you probably want to work
141:02 - with the security team to integrate that
141:04 - or extend your GitHub Advanced security
141:07 - to enable secret
141:09 - [Music]
141:13 - scanning the other concept after secret
141:15 - scanning which is a great place for
141:17 - security is dependable and dependency
141:19 - review these are looking at dependencies
141:22 - based on the open source libraries that
141:25 - are available in the code we obviously
141:27 - spoke about it detail about these in the
141:29 - previous module so I'll definitely
141:31 - encourage you to find out a bit more but
141:34 - in terms of who gets actioned or who
141:37 - gets a request here even though the
141:39 - service may be integrated into your
141:41 - pipeline similar to secret scanning
141:43 - Dependable depend scanning as well as
141:45 - code scanning they all
141:48 - work independently they all have their
141:50 - own set of results and based on the
141:53 - organization you may be working with one
141:55 - or more security team for each one of
141:56 - these or a dedicated security individual
141:59 - who would be helping your tregs as
142:02 - [Music]
142:05 - well we have been talking about
142:07 - vulnerabilities it's important to
142:09 - understand how usually security
142:11 - vulnerabilities are reported globally
142:13 - there are two big parameters common
142:15 - vulnerability and exposure which is cve
142:18 - and common weakness enumeration which is
142:21 - cwe following is a screenshot from
142:24 - GitHub advisory where you can see the
142:27 - rating on the right hand side with cwe
142:28 - 400 cve 2024
142:32 - 32476 now this number is different for
142:35 - different vulnerabilities and different
142:37 - weaknesses when I talk about
142:39 - vulnerability I'm specifically referring
142:41 - to the cve number and a cve score is
142:44 - basically a reference method for
142:46 - publicly known vulnerabilities of a
142:48 - software or a hardware for a particular
142:50 - version of software and Hardware like it
142:53 - could be a nodejs version
142:56 - 1.0.0 has a certain vulnerability and
142:59 - that would be disclosed as
143:01 - cve on the other hand common weakness
143:03 - alumination or cwe is a globally
143:05 - recognized reference as well however
143:08 - that focuses on type of classes of
143:10 - weaknesses rather than individual
143:12 - versions it looks as family of class for
143:13 - weaknesses side
143:16 - [Music]
143:20 - this is also a good point to talk about
143:22 - GitHub advisory database that is a URL
143:24 - that I've provided github.com advisories
143:27 - is a great way for you to identify all
143:29 - the advisory security advisory
143:32 - specifically for all the vulnerabilities
143:34 - cve packages and others that have been
143:36 - disclosed and GitHub maintains a
143:39 - database of all the known
143:40 - vulnerabilities for certain known
143:43 - languages now in case your language is
143:45 - not in the one supported then I would
143:47 - encourage you to have your own
143:49 - third-party way of identifying threats
143:52 - cves and cwe for the code that you may
143:55 - be running in your GitHub
143:57 - Enterprise GitHub organization GitHub
144:00 - repository or GitHub
144:02 - [Music]
144:06 - Enterprise now that you understand where
144:10 - software security development life cycle
144:12 - can work with security you also
144:14 - understand advisory and the types of
144:16 - vulnerabilities it's important to also
144:18 - understand where does the line get drawn
144:21 - for roles and responsibilities now again
144:23 - I would put the cavar that not
144:25 - everything that I share here is
144:27 - applicable to all organizations it may
144:30 - be different to for different
144:31 - organizations but generally speaking you
144:34 - would know that developers are
144:35 - responsible for developing code they are
144:38 - usually contributors into a repository
144:40 - or could be more than one repository at
144:43 - the same time there are project owners
144:45 - project managers and team leads and
144:48 - other managers who are encourag to be
144:51 - participating as a username who are also
144:54 - given a user account in GitHub the
144:57 - reason for this could be approval
144:58 - required for a certain commit or a
145:01 - certain kind of commit or it just could
145:03 - be review of the code for the individual
145:05 - contributor who has been contributing
145:07 - the
145:08 - [Music]
145:12 - codin security team also gets access to
145:15 - repositories that are used by developers
145:17 - this could be based on secret scan
145:20 - scanning or any of the other
145:22 - ghas services they may have identified
145:25 - something that they want to work on and
145:26 - they may require access to repository so
145:29 - sometimes they may also have a similar
145:30 - role to a developer depending on how
145:33 - extensive or how involved they are in
145:35 - terms of the
145:37 - [Music]
145:40 - repository last but not least is GI of
145:43 - administrator this may be in the
145:45 - development team this may be in the
145:46 - platform team this may be people who are
145:49 - in the corporate department but they are
145:52 - responsible for managing the security as
145:55 - well as your user management as well as
145:59 - your repository management to to an
146:01 - extent depending on which organization
146:03 - you're talking about they are
146:04 - responsible for anything to do with
146:06 - configuration of GitHub itself like if
146:08 - you need access to a certain repository
146:11 - they would be able to help you
146:13 - [Music]
146:16 - out and probably the other side of the
146:18 - coin the security roles
146:20 - usually there is someone called an
146:22 - application security expert who works
146:24 - with a project team whether it's a
146:26 - developer or a project owner to help
146:28 - them triage vulnerabilities have been
146:31 - identified by the GitHub Advanced
146:33 - security tool now obviously there are
146:37 - people who would primarily work on
146:39 - building the workflow for this as well
146:41 - because they may be just starting off in
146:43 - their Journey they may even only have
146:46 - secret scanning enabled and none of the
146:48 - other GitHub Advanced security servic
146:50 - enabled so it may be just their job is
146:53 - to figure out what that workflow would
146:56 - be and enable those Services they could
146:59 - also be contributors in one or more
147:00 - repositories especially if they are uh
147:03 - talking about security repositories or
147:05 - trying
147:06 - to eradicate vulnerabilities from
147:09 - certain
147:10 - [Music]
147:13 - repositories which brings me to security
147:15 - policy security policy are definitions
147:19 - you can have in a security. MD file
147:21 - which lies in the do GitHub folder of
147:24 - your repositories you can enable it for
147:27 - entire organization as well if you like
147:29 - but in general what they're meant to be
147:31 - is they are a way to securely report
147:34 - security vulnerabilities for a
147:36 - particular repository so in the previous
147:38 - slide we spoke about the different
147:40 - workflows you may have based on what
147:43 - GitHub advaned Security Service you may
147:45 - have turned on each one of them would
147:47 - give you a certain number of
147:48 - vulnerabilities and depending on how and
147:51 - what you should be doing that could be
147:53 - defined in the security MD file so next
147:56 - time you find a vulnerability definitely
147:58 - look into the security. MD file or
148:00 - markdown file inside your GitHub folder
148:03 - for the repository to identify how can
148:05 - you disclose the vulnerability to the
148:09 - owner of that repository
148:12 - [Music]
148:15 - responsibly depending on your
148:17 - organization you may obviously have all
148:19 - of the services turned on or you may
148:21 - take my advice and if you've never done
148:23 - get of advanced security before you may
148:25 - start off by enabling a secret scanning
148:27 - and then move through dependency alert
148:29 - and then move to code scanning
148:30 - irrespective of the path you chose
148:33 - depending on how many of these services
148:35 - are
148:36 - integrated the workflow would depend on
148:39 - the rating that your cve or cwe has your
148:42 - organization may decide that any CV
148:44 - score of nine and above could mean that
148:47 - you have to escalate to a senior or get
148:50 - manager involved however if it's a loss
148:53 - Wonder te you may not have to do that
148:55 - and you can just triage that yourself
148:56 - but what that workflow can look like
148:58 - would differ from organization to
149:00 - organization but in general there is a
149:03 - known rating provided to everyone in the
149:06 - organization for them to know on a
149:08 - glance that hey if I get a Oneil which
149:11 - is of a certain CV score or if I get a
149:13 - Oneil which is marked as high by GitHub
149:17 - Advanced security I should use a
149:19 - security policy that I've we find just
149:20 - now in the repository to inform the
149:23 - right people in the organization about
149:26 - the vulnerability that I have discovered
149:28 - and how I can help perhaps remediate
149:32 - [Music]
149:36 - that GitHub Advanced Security
149:38 - Administration now one of the biggest
149:41 - part about administration of GitHub
149:43 - Advanced security would be to enable
149:45 - GitHub Advanced security itself the
149:47 - choices could vary based on how many
149:49 - public reports repositories private
149:51 - repositories you may have as you can see
149:53 - from the diagram here public
149:55 - repositories have all these Services
149:57 - already enabled by default it's only
149:59 - when you switch to private repository
150:01 - you would get features only if Advanced
150:05 - security is
150:06 - [Music]
150:09 - enabled to enable you can enable
150:12 - obviously on all repositories in one go
150:15 - and you can do that across the board on
150:17 - your GitHub organization level by
150:19 - automatically enabling it the question
150:21 - remains that would you enable that for
150:23 - only the ones that are existing in your
150:26 - GitHub Advanced security at the moment
150:28 - or GitHub repository GitHub organization
150:31 - at the moment or would you enable that
150:33 - for all new private repositories as well
150:36 - that is something that you would have to
150:38 - make a decision on and perhaps require
150:40 - an interaction with other other team
150:42 - members and managers to make that call
150:44 - on how much of GitHub Advanced security
150:46 - would you enable across the board
150:51 - [Music]
150:52 - there are two ways to enable GitHub
150:54 - Advanced Security One is using the
150:56 - GitHub user interface simply loging into
150:58 - the website and enabling Services either
151:01 - at a per repository level or at the
151:03 - organization level or you could use
151:06 - administrative shell provided by GitHub
151:08 - CLI to activate GitHub Advanced security
151:12 - and perhaps all services of GitHub
151:15 - Advanced security for your organization
151:18 - in GitHub the biggest question here
151:20 - still remember is should everyone have
151:23 - access to all the findings and also
151:26 - should you really have all the services
151:27 - turned on or has there been a staged
151:30 - approach so that you're able to identify
151:33 - and remediate vulnerability and not just
151:35 - have a lot of Vil to triage without uh
151:39 - having a proper process around
151:41 - [Music]
151:44 - it now that you've enabled GitHub
151:46 - Advanced security you probably want to
151:48 - have restrictions on on who can view
151:51 - what alerts and from what GI of advanced
151:54 - Security Services you may already be
151:56 - aware that by Nature security
151:59 - vulnerabilities are sensitive and by the
152:02 - same nature disclosing all the
152:05 - vulnerabilities to individuals who may
152:07 - perhaps may not have the right kind of
152:10 - access or may not be even informed about
152:13 - the right steps to
152:14 - take you may want to be mindful of Who
152:17 - You disclose the alerts to so alert
152:20 - rules for example the depend rule for
152:23 - alert similarly Cod scanning alert
152:25 - secret scanning alert can be used to
152:27 - identify who the appropriate owner would
152:29 - be for any alerts that are created for
152:33 - identifying a code scanning alert or a
152:35 - secret scanning alert or dependabot
152:38 - [Music]
152:41 - alert the example shown over here is for
152:44 - dependo alert which you can find in your
152:46 - personal applications in your personal
152:48 - repositories in GitHub as well and there
152:50 - are certain amount of minimum
152:52 - permissions required if you notice
152:55 - except for code scanning everything else
152:57 - requires at least a repository
152:59 - administrator or a organization owner
153:02 - role which is super user level role so
153:04 - you get an administrative Privileges and
153:07 - that's why it would be important for you
153:09 - to think about the workflow that you
153:11 - choose and who you should choose to
153:14 - expose the alerts to
153:20 - now you may need a owner or security
153:23 - manager to perform you may need an owner
153:25 - or a security manager permission to view
153:27 - security of all repositories because you
153:30 - decide that hey only the security team
153:32 - should have access to it but you can
153:35 - like any all the other features of get
153:37 - Advanced security you can enable this
153:39 - per repo or for a team or for entire
153:42 - organization as well but this is a great
153:44 - way to identify the overall risk and
153:46 - vulnerable T posture of your
153:49 - repositories and projects in your GitHub
153:51 - [Music]
153:55 - account talking about alerts in your
153:58 - repository there is a service called
154:00 - security overview which is only
154:02 - available for GitHub Enterprise plan
154:04 - users but if you look at the screenshot
154:08 - it's a great service that helps you look
154:09 - at all your repositories in one single
154:12 - glass pane for knowing what the overall
154:14 - security landscape looks like now
154:16 - whether it's in terms of how many
154:18 - repositories are impacted by by code
154:20 - scanning how many are impacted by
154:22 - depender board or secret scanning and
154:24 - what the overall risk posture looks
154:26 - [Music]
154:30 - like GitHub also provides you with
154:32 - logging in terms of administration you
154:34 - are able to identify and audit what
154:37 - users have been doing if you are on a
154:39 - personal account you get access to
154:41 - things like security log and sponsorship
154:43 - log for all the activity that your user
154:46 - may have performed in that particular in
154:50 - that particular account similarly
154:52 - organization level uh the security logs
154:54 - are called audit logs and both
154:57 - organization level as well as personal
154:58 - account has sponsorship logs uh which
155:01 - are because you can get sponsor for your
155:03 - repositories you can also see the
155:04 - activity performed by the sponsors
155:06 - themselves as
155:08 - [Music]
155:11 - well there's another way to manage and
155:14 - administer GitHub Advanced security if
155:17 - you have access to GitHub access token
155:19 - which you can easily generate from your
155:21 - GitHub account you would be able to log
155:24 - in into the API and make specific
155:27 - requests for secret scanning or code
155:29 - scanning undependable mod alert please
155:31 - be mindful this is an automated way or
155:33 - programmatic way of accessing this so a
155:36 - lot of the usual features perhaps audit
155:38 - log or security log would be the only
155:40 - two helpful things that you can actually
155:41 - find out you can use to identify if
155:44 - someone is using programmatic access
155:46 - that would be one kind of administration
155:48 - you may want to do is is now that you
155:50 - know the logs you know that there is API
155:52 - actions possible you would use the
155:54 - logging mechanism to understand who
155:57 - which user has performed what action in
155:59 - GitHub if there is a suspicious one

Cleaned transcript:

hey this is Andrew Brown your favorite Cloud instructor hey it's ashishan your favorite Cloud security instructor today I'm here to talk about GI of advanced security certification or as called ghas with love um and the way we're going to get certified is as always we're going to do our HandsOn labs in our own accounts the lecture content and uh going through a practice exam and you know as always we provide you a free practice exam I want to remind you if you like uh Cloud certifications and this expansion into security certifications with our uh friend aish the best way to do that is to purchase the optional uh additional study materials on the exam Pro platform but let shees tell you a little bit about himself for those of you who probably have not heard of me before I am the host of a popular podcast called Cloud security podcast I've been in the cyber security industry for over 14 years teaching cloud and Cloud security to a lot of people as well through Sans in fact I was part of Andrew's free Court camp that we did uh a few month ago for AWS so I look forward to having all of you enjoy the certification course that we have created here for you guys let's get into the course all right see you soon ciao ciao what is gup foundations GitHub Foundation is the entry level GitHub certification that teaches you GitHub Version Control Basics how do you develop programs how do you manage projects that are running in GitHub there's a lot more that's involved in this The Unofficial course code for this is ghf but one thing to note over here is that GitHub is still the leading Version Control service in the world and giup is still the most common way most developers showcase their code either to their employers or companies using it for storing their own private code as well so from that perspective understanding getup and giup related products are quite crucial for most developers out there who is the certification for consider this GAA Foundation is important for people who are either new to Cloud programming you may not even be a developer in a tech role but want to develop the skills for a developer and you want to showcase that portfolio to a potential future employer or you just want to learn Version Control fundamentals all these reasons could be substantial enough for a lot of people based on where you are in your journey on learning and understanding GitHub and it would test your skills for how much you understand git by itself and git has its own I guess knowledge curve that you need to understand before you jump on the GitHub so in case you're thinking of going for GitHub Foundation I would definitely encourage you to learn git first and then come for the GitHub certification talking about GitHub certification road map it is advisable that you probably start with GitHub Foundation which is considered level 100 especially if you've never done much work in GitHub yourselves you probably having understanding of Kit and GitHub would be very valuable and probably worthwhile spending some time on GitHub Foundation passing that exam followed by either you can choose the G of advanced security which is great for cloud security Engineers who probably look at programming and are also looking at automating a lot of the cloud security features that they may be working on whether it's building infrastructure scode or whether it is using terraform or other languages in cloud formation I can keep going on or you can just choose the path of being a better developer by understanding giup actions now having a understanding gith up actions is good both from a security and from a development perspective as you get better at this from a security perspective the next Evolution would be to become an Enterprise engineer now it's worthwhile calling out GitHub does not validate programming technical diagramming code management and a lot of other skills are required for the role of a developer or even a cloud secured engineer in any organization however ever this at least is a way for you to Showcase to your future employer or your current employer that you understand some features and essential things that you might need to work on on a daytoday basis in GitHub how long it would take you to study depending on where you are with your level of understanding of Kit GitHub already you could be looking at anywhere if you are starting today and have never done GitHub or it any kind line of code be probably looking at 20 hours plus of work however if you're an experienced person who's looking to do GitHub Advanced security you and you have enough years of experience in GitHub itself you probably already have some technical knowledge in GitHub and git and have a strong background in technology and doesn't have to be all kinds of Technology at least one or two which is just good enough for you to be decent and understanding the flow of how languages are stored in Version Control how you can manage them a lot more of those Basics as well in that case you probably only need 4 Hour hours but on average you're probably looking at at 14 hours of average study time with 50% lecture in lab and 50% practice exams I would definitely recommend you to study 1 to two hours a day for a 14day what does it take to pass the exam exam Pro and myself are huge Believers of video textures lab HandsOn Labs that are related to an actual project and doing some online practice exams are definitely if you can find the paid one definitely great there are some free ones as well on exam Pro if you wanted to check that out but doing those three just watching lectures one video from an experience trainer having HandsOn Labs that you can follow along on your own GitHub account and having a way for you to practice online tests that are available from other organizers or even free and paid ones as well definitely would be a great way to make sure you definitely pass the exam now from a Content perspective there are seven domains that have been shared by GitHub the domain one will describe ghs or GitHub Advanced security features and functionality domain two 10% for configure and use secret scanning domain three 15% for configure and use dependency management domain four for 15% configure and use cod scanning domain five for use cod scanning with cql and domain 6 20% describe GitHub Advanced security best practices and domain 7 10% for configure get GitHub Advanced secureity Tools in GitHub Enterprise now how would you even take the exam you can give the exam in person or online at your own convenience from your home uh you would be using the provider PSI online or they have a network of test centers as well you could find the closest one that is in the city that you're in using the Google search just find out the closest Center you have for PSI next to you now it's worthwh calling out online version would have a proctor or someone who's basically supervising and looking at what you're doing while you're giving the online exam so just something that you be should be wary of in a t in a test center there are already people monitoring you so uh I guess depends on what you're more comfortable with doing doing it online or doing it in person now it's worthwhile calling out GitHub does not provide a passing score but having a scoring of 75% correct answers would ensure that you pass the certificate ification as I said there is no passing score but at least aiming for that 75% correct answer would ensure that you pass the certification there are 75 questions in the exam 60 scored and 50 unscored now unscored are the tricky ones where they don't really Mark you on them but they're definitely there and you would not know which ones are those so you can technically afford to have 15 CT scored questions wrong there is no penalty for wrong answers so you might as well give answers to all the multiple choice and multiple answers that are available 15 questions of the exams are unscored so they would not count towards your final score um unscored just means that they would not be used to Mark you but they would be used for introducing any new questions in the future this also helps them determine of the exam is too easy and the passing score the question difficulty needs to be increased and also discover users who are attempting to cheat the exam or just steal dump questions hopefully you're not one of them and you're just basically following what we teach you which is video tutorials HandsOn Labs that you follow along and and finally just some practice online Labs or practice exam that you're following along and one final point if you encounter an ex a question that you've never sted for keep it cool and remember there would be unscored questions as well now the total duration is 2 hours and 1.6 minutes per question is the time you have I would say it probably exam Time by itself is 1 120 Minutes the seating time is 150 because you have to account for the fact that when you start if it's an online exam or if if you're going to in person you would have that 105 minutes of showing your ID verifying uh if you're doing the online exam they would look at the webcam that you have given them and also consider the fact are there any desk any items on your desk they would make you clear it so 15 20 minutes that would be probably in the beginning maybe 20 minutes and then towards the tail end as well where you might be ask for a midd of feedback assuming you have done git foundation and you've gone through some of the other lectures we have on git Foundation having a basic understanding of git I'll just do a quick refresher for everyone to be on the same page in case the last time you went through this was some time ago G is a distributed version control system or dvcs which is created by lonus telt hopefully I did not mispronounce the name but lonus was the creator of Linux kernel so potentially it's Linux but I don't want to call it I feel it's Linus so apologies if I got that name wrong now git is how you interact with the Version Control System each change on your code which can be committed which by a command called git commit and can be tracked before for how it was before the change how it is after the change and what is the change being made now GitHub is a Version Control service I would even say it's like a SAS service which allows you to access kit based version control system from anywhere on the internet it is a hosting manag remote gate repository to I guess people like the technical term but they have expanded to other offerings as well like for example now you can also have project management tools pull requests code reviews GitHub has even got GitHub pages and wikis GitHub action is something that you would hear about in other certification but also as someone who's working in cyber security you would also hear about GitHub actions as a way to automate a lot of the cord and being able to trigger security tooling when a certain action happens G pilot is also catching a lot of traction which is the AI uh based product that has been launched by GitHub GitHub code base code spaces Marketplace G there's a lot more that's being added on and worthwhile knowing that you don't need to know all of these for the exam but this is just a quick refresher on one GitHub is and fun fact GAA was originally written using Ruby un rails common git terms for those who don't remember at the moment repository commit three I would probably say the most common one that you would use quite often uh even if you start from the top which is repository which represents a logical container holding the to base so a lot of people talk about hey this is my link to my repository very common word commit is a change of the data that you do to your local repository that you commit onto the the branch that is local on your laptop now you would use something like a branch to create a new Branch uh depending on the practice you have and your organization now remote would be if you are a have hosting a project a version of your project somewhere but you want to exchange commit you would be a remote cloning or clone clone is basically you know a friend of yours or someone you know on the internet has created amazing Repository that you want to work with you can use clone to clone that repository and make it better or just start using it yourself as well uh also make sure when you're using a repository that you're cloning make sure you have uh at least have a look at the license that they have Apache license or MIT license these are important for Enterprise that are using it because not all repositories on GitHub are free to use they do have license requirements that you should look at especially the read me file now we spoke about repository commit Branch clone checkout is to switch between different branches in your local repository and probably the our next two important ones are pull and push now the pull example is that I have been working on a local repository for some time and now I have finally May realize that oh my God people have been still pushing changes onto the main repository so now I am running a few comits behind the main branch and that's how you can pull some of the changes from your Remo repository which may be at ker.com and merge that into your branch so your branch has the latest information on the all the code changes that happen now once you have done that you may want to push that change the keyword being push you should want you may want to push that change to the local repo from the local repository to your remote repository on k.com uh the same goes for fetch you can download data from a remote repo without integrating it into your work reset undoes any local changes with options to unstage or revert commit basically you might make some changes but you're not like oh I don't really think I wanted to make those you can just use the Reser button to undo all those changes now this is uh going to unstage any com any commits you would have dat locally that you have not pushed to the remote repository so worthwh knowing the changes should still be on your local repository if they have been pushed onto the remote repository then the reset is not really going to change anything on the remote repository itself merge can combine commit histories into one chaging files prepares and organizes changes for a commit now commit saves your changes as a snapshot in the local repository and add adds changes to the staging Raz of the next comit now we we have explained what repository is a GitHub repo is your GitHub repo when you push Upstream to GitHub GitHub allows you to access and manage your G repo with several functionality you could use GitHub installed locally on your laptop to view different branches if you have cloned a repository you can view different branches you can look at the tags that are being used commit history and a lot of related information around releases code bases but you can also perform actions like for example you can put yourself on the watch list you can start watching the repository for any changes you can even Fork from it where you can create a a separate Branch or a separate I probably say a separate version or a separate version of the project and make it your own or you can clone that to download that locally a git commit represents the incremental changes to a code base represented with a git tree graph at a specific time the simplest example for this is that you have made some changes after you have cloned a repository from github.com or another source and that you made into a repository and you're ready to commit that into a branch potentially the main branch of the GitHub you're working with then you can use git commit to commit the changes onto GitHub now each Comet does have a sha hash that acts as an ID and and it can have actions like addition modification deletion and it can it contains pieces of information for the changes but it may not contain the whole file a get branch is a Divergence of the state of repo it's almost like you want to keep the original code base intact but you would want to start making some changes that you can bring back onto the main code base in this case the example we have provided is a feature Branch one and feature Branch two a production Branch a main branch now going by feature branch and main main branch is the active code that is something that everyone is happy with it is stable and that is then pushed onto production which is the production Branch now you may choose that you want to add a new feature to the application you're working in you may create a separate Branch for it you would make all your changes you would commit your changes you can test your changes and when you're happy that youve just have succeeded you would come back to the merge over here and so you'll go from the feature branch and merge it onto the main branch and once things are good and tested on the main branch they can be pushed on production that would be an example of a workflow which is also similar to something called a GitHub flow as well that you would get to know now get mode has a concept called upstream and downstream Upstream would mean that you're sending it from your local repository or your local develop environment onto Upstream to where the changes are being pushed to now in this case it could be the remote github.com and when you do a pull from remote GitHub repository then you're doing a downstream change basically a repository that pulls or clones from another repository that is called upstream or down on screen what is GitHub Advanced security ghas ghas or GitHub Advanced security refers to the understanding on how to use security features of GitHub to secure your code from security vulnerabilities now if you are already on GitHub you can probably just go to a repository of your choice I've just gone to www. cloudcity bootcamp.com which is a website that we run for cloud security boot camp you can go to the security Tab and you can all already see services that you have turned on and are available for you based on whether you have a private or a public repo depend about code scanning and secret scanning it is important to know there are more features as well for a gup security but these are based on the paid plan for example from a free and team tier code scanning secret scanning and reviewing or dependency is AA available for all in public repos however no security overview or repo rules are available for free achiev if you were Enterprise however you would get everything for all public and basically if you're an Enterprise however you would get code scanning secret scanning review dependency with Advanced security and would also include security overview and reper rules when it comes to depender board alerts and security updates and version updates that is equal for everyone for teams and free tier as well as Enterprise tier for a free tier you would require required reviews can be made required status checks can be done with public repos uh in teams plan as well as Enterprise plan you can require review and require status checks but you can do that for all types of Reapers both public and private get up security advisory is only available for public repos if you are on a free or team plan it is available like get up security advisory will be available Enterprise Cloud because Enterprise license usually expensive now you do have the capability to do ro based Access Control require MFA audit logging however there is no audit log API or GitHub connect or samles ssos or even an IP allow list if you want to free your team plan however if you're on an Enterprise plan you would get audit log API GitHub connect saml single sign on L app and you would also get an IP allow list with your Enterprise Cloud as well ghas or GitHub Advanced security before you dive into this you probably want to understand why is GitHub security feature important now as a developer or as someone who writes shares and perhaps even develops code you would want to be proud of the quality of the code you create now usually the quality of the code is is deteriorated either by not using the right kind of syntax or creating code that is unsafe which contains a lot of security vulnerabilities that can potentially harm the production environment that your organization is working on now get of advanced security ghas is integrated within GitHub and can allow you to check for secrets that are in stored in your code it can allow you to look at vulnerability that are probably coming from a open source library that may be used by either a package or a set of libraries in your code it could also detect vulnerabilities that just could be in the logic of the code or the way the program has been written other things to note that are available from GitHub Advanced security which are in addition to looking at just how safe the quality of the cord is would be security overview GitHub account repository rules management audit logs GitHub security advisory and GitHub repository policies these are security features you can enable around the use of repository and how GitHub is used in your entire organization which is quite crucial to manage access to sensitive areas of kup for developers like for example you don't want someone or anyone in the organization to be able to Simply go and delete production repositories which is a big no no so managing the repository rules and having an overview of what security looks like in terms of the quality of the code across the board definitely is where GI Advanced security if you're still not convinced cisq or Consortium for information and software quality they found that poor software quality cost they found that the poor software quality costed us companies approximately 2.08 trillion annually this is from the 2022 report uh and the key contributors to poor software quality was cyber crime Tech debt or technical debt and software supply chain problems now cyber crime and software supply chain problems could definitely be very easily measured and corrected to an extent using GitHub like for example if you remove Secrets which potentially could be leaked in the code or if you remove software cord vulnerabilities you can even inform technical debt work with the required time to complete a tasks to manage some of the tech as well and last but not least soft is Supply in vulnerability GitHub has options to detect help you remove software Supply vulnerable now there are three components to ghas G Advanced security secret scanning Depend and code scanning Now secret scanning on face value it is Secrets stored of past in your repository it allows you to scan for secrets and raise alerts it also can take actions from GitHub dependabot is an open Source vulnerability scan it looks for vulnerabilities in open source libraries used in your container so dependencies or just the libraries that are used by packages which could be vulnerable it can help raise an alert for it it can also take an action from GitHub on vulnerabilities that it identifies as well and third is code scanning scans for code vulnerabilities and raises alerts on vulnerabilities that are identified and you can use GitHub action workflow and code ql to perform from sophisticated Cod scanning by integrating other SEC security tools in there as well which are non GitHub security tools too now what do I do with these GitHub security alerts like we been talking about ghs can give you alerts on these special things but what do you do when you get these alerts now as a alert now as it stands if the alert makes sense instantly when you read it like yep I understand that it's basically asking me to remove a secret that I've accidentally put in or it's asking you to resolve vulnerability by replacing a open source vulnerability which is potentially a library that you had recently uh linked from somewhere you can easily work on that yourself however if the alert does not make sense now whether it's a dependent Bo alert or Cod scanning alert or a secret scanning alert the security alerts in your GTO repository May sometimes require ition say from your product owner or manager so it's worthwhile raising it with them so you can work with the application security teams of your organization to understand the vulnerability and understand what the required action could be now if the alert is not on your own repository uh there are processes in most Organization for you to raise alerts for any vulnerability you find in a repository that you don't normally own so you should be able to inform them privately now there is a private vulnerability reporting feature available in GitHub but if you have any internal processes that are used perhaps to inform this you can use that as well now keeping all the excitement aside we have been talking about ghs and you may or may not already be using this but it's worthwhile knowing that depending on whether you are in organization level user on GitHub or you are a personal or individual level user on GitHub you may have to enable get H GitHub Advanced security different way now the personal one as I would as it was shown in the lab earlier in terms of the plans you have certain capability are available by default for personal accounts on all public repositories on an organization level it helps you enable GitHub Advanced security at an organization level especially if you work in an organization where any developer can create as many repositories as they want and instead of manually scanning for what new repositories have been added and what new repositories need to be added to ghs and enabled you can use the organization level enabling of ghs as to understand how you can quickly apply that to every repository that is in within your organization at an organization level you can simply go onto the organization click on settings on the right hand side this is an example for my cloud security boot camp organization and on the settings tab you should have within the security column you should be able to see authentication security code security verified and approved domains and my favorite especially for the ghas lab secrets and variables now once you go on ghs the personal account however is a bit different uh you can have a look at the settings and go into code security analysis and you should be able to access the security features there however it is important to know that the personal account does not have access to all ghs features such as authentication security verified approved domains secrets and variables if you are looking to only en if you're looking to enable ghas only on individual repositories you can do that as well so not just at an organization level or a personal level you can go on to a repository that you want to enable ghs on perhaps it's your own personal repository you can click on settings under settings there is security you have code security deploy keys and secret variables under the security column it is important to understand that the level of G of security you have would give you the I mean you can to if you don't have ghs features turned on you probably would not get any alerting however knowing where they are and understanding that hey I can just completely go to my repository name put a/ Security in the end of it and you would be able to see the current security posture of what is enabled on your repository from GitHub security you can enable it automatically for all new repositories by simply clicking on the button automatically enable again this is under the security settings for the repository um and you would be able to at least have that in such a way that all new repositories moving forward are automatically turned down however any existing repositories that were not enabled for ghs before would have to be retroactively enabled individually okay in this lab we're going to show you how you can look into what kind of plan you're in now this is me Lo into my profile that's my icon over there so if I just click on that profile and go you can simply click on your profile which should bring you to this page which is basically what everyone sees usually when they go online so you can have a look at everything you have on your your repository 55 projects packages and everything else now if I do edit profile I can edit a lot of the information provided over here but but I'm after information about what kind of packages do I have so if I go on to here I go to settings and I go building and plan plan and usage I'm currently paying nothing so I have the GitHub free proudly now I can click on now this is what allows me at the moment I have all these actions what is not included is also provided as well and what I can also do is I can go compare all plans and I can see what can I upgrade to for $4 that I think is Australian I would say or us uh depending on the currency you're in and can get all these features I only care about the security compliance F because we on the ghas class as I was talking in the as I was showing in the slides CT scanning for public repository secret scanning for public repository depends the review for public repository but no security overview for me no depend alert and and you do get depend about alert but no repository rules all that required tofa audit logging is also available and R based access control is also available and get of advisory available for public services but for the moment this is how you check whether you have a plan that is a team plan or Pro Plan or a free plan or Enterprise plan now if you are on an Enterprise plan or a team plan I would definitely be mindful uh that you obviously are working with other people as well so uh if this is the first time you are looking at get and making it some of these changes maybe you may not even have access to the bills and plan most likely because someone else in your organization is managing it for you so you may not be able to see it this is my personal account not my organization account which is why I can see pretty much billing and plans if I come just to here and go settings but you may see different things based on where you are okay now that is a lab that I wanted to show you on how you can check the plans let's go back to the slides okay now we're back on the GitHub security uh now we're back on the GitHub now we back on GitHub let's just show you how you can look at an individual repository and see what the ghs level in your personal repository as well as organization repository so if this is my personal account I go into my settings and I can go into Cod security and Analysis and I can see that I don't have anything automatically turned on at the moment for dependent about alert depend about security updates secret scanning as well I can either disable it or enable it and I can also have it automatically enabled for so I can just take this box and we have enabled for everything I don't have to hit a save button anywhere as you can see the tick box over here is the way for me to know yep makes sense now I have removed it similarly I can just have hey Dependable now dependency graph is the only thing that I have enabled for all new private repositories I'm not asking for any Wonder reporting for that so I'm going to enable this now also for private repositories as well so this is how you see how your ghas is enabled I can have it for enable all it should enable that for everyone but you know this is just one of the ways to see it now another way for you to see this would be if I was in the organization now I have an organization as well so if I go to organization now as you can see it shows me I am logged in now as Cloud security boot camp which is the organization now if I go to settings under this and then within settings if I come to security I have authentication security which I can sign up for requires two Factor authentication for everyone in the organization so I can enforce multiactor authentication code security and Analysis I can as mentioned earlier I can have this enabled for every new repository that is created inside the organization but anything old would have to be retro retroactively fit in so I don't have any actions of Secrets but you can see it depend all of them have been put in here now this is also to verify the domain y that's pretty much how you would verify what ghs access you have now let's take a bit more um I guess better example where I can just go into one of my repositories let just go this one this is a public repository I can go to security I can see that I don't have enabl dependa board alert I don't have Cod scanning I don't have secret scanning because I Haven enabled it so I don't have aert however go depender board these are disabled as well code scanning is disabled secret scanning well okay now now that you know because I don't have I have not enabled anything now I can just simply come to settings and I can apply this directly oh this one over here and now I can just basically enable it individually if I like to but I rather do it at a top level so I'm going to go to my profile settings and I'm going to go under security so I'm going to say dependency graph yes I want depend alert and depend savings as well okay sweet so I have that set now so this is what how most people do that as well so welcome to how it is done in real life okay so this is the repository I can go to security and I can see security is enabled but I have because this is an existing repository and I just enabled depender board for all the new repositories I have to enable this manually so I'm going to do enable alerts I've have done that yep I have enabled dependency code I'm going to enable the Oney reporting for this repository as you can see and let's do security upates as well and alerts all right so now we have a private vulnerability reporting as well as the dependency graph and depend the board so it should start populating information over here but this time you would Noti is that if I go to security my Dependable alerts are enabled my private reporting is enabled because I've enabled them now I can do Secret scanning alerts if I just do enableing setting uh thought I had oh yeah yeah secret scanning was right at the bottom so I didn't really see it so now secret scanning has also been turned on for this particular repository now if it was it would get appeared under security and you should be able to see under here if there are any secrets now at the moment there have not been any secrets found there has not been any vulnerable or detend dependo but I know I have a vable repository that I have that I keep for occasion like these when I want to show you something so if I can name the challenges just do not remember the name of the repository it was I want to say npm package so it was nope maybe it was node nope maybe I called it vulnerable nope I did not that CL vulnerability is a different repository uh this is basically how you identify uh and slowly uh make sure that you don't end up having a lot of repositories because what happens you're trying to look for just want one repository that I know I have which I just cannot remember the name of for the life of me but this is what people would be oh there you go Cognito V2 demo that's the one now this is a really old repository that I've had for a while 6 years ago as you can see so I know it has a lot of there you go it has already got seven security alerts for me I didn't have the secret scanning enabl so let's just enable that and maybe that comes up with something as well okay so let's go to security I had dependabot alert I had security advisory I can see seven dependabot alerts this is what it looks like when you have a Dependable alert now we're going into bit more detail about what these are and what you do with them but this is how you would notice how you to see alerts within a repository now this is at the moment a if I go back to code this is a public repository however we want a private repository as well what can we do with a private repository so I'm going to go customize repositories I want it to be type is private I have one private collection and if I go in here if I go to security if you notice I only have depend board because that's what my plan allows me for so that's all I have uh I do not get any lot more features so I can find out more about how to do code scanning I can enable alerts but primarily I can just do dependabot if I only have a regular plan and if I although I can I'm allowed to create private repositories but I don't get a lot of security features for private repositories that's the yeah that is the end of the lab let's continue the lon now so far we've been talking about security vulnerability alerting what to do with it but we haven't really covered what is a security vulnerability security vulnerability is a potential risk to an organization that can be exploited by a malicious attacker to misuse or negatively impact the organization notice how it did not say a hacker uh because technically as a security person I'm respectful of the fact that a hacker could be a good person and Al alternatively a bad person as well but uh collectively calling every bad person hacker is probably not fair which is why the industry uses the word malicious attacker so anyone who is attacking or uh looking to impact an organization in a negative way would be a malicious attacker uh the way they would do this would be they are exploiting a vulnerability that perhaps exist in the software itself or where theof software is hosted or it could be misus by anyone who is a legitimate uh user or it could be a misuse by anyone who's a legitimate user and potentially internal threat who just happens to have the right access to the code that they want to maliciously change there are different kinds of security vulnerabilities depending on where and how you're looking you can have web based security vulnerabilities which are like common examples like xss csrf ssrf the open source vulnerabilities which are vulnerabilities found in libraries that are referenced in libraries used by bigger softwares and open source vulnerability could be a vulnerability that happens to be publicly listed as a free software or free library for use and perhaps doesn't have a patched library or patch component which allows for someone to basically take over the software or impact the software negatively now other kinds also could include stored Secrets like username password or API access access tokens and more cloud misconfiguration is another one these days now that a lot of cloud infrastructure is being produced by infrastructure as code languages stored in GitHub as well you could have a lot of cloud misconfiguration that could be triggered just from the infrastructure scored uh so Cloud misconfiguration come for that as well now zero day is a unique one where you I mean no one really knows when a zero day is going to come by zero day but the idea behind zero day is that no one knew about it before today hence zero day uh so anyone basically is planning for zero day is looking at it from a very likely looking at it from a very low likely possibility because no one really ever knows when a zero day is going to come out the final one which is probably the most common one a lot of people already know of viruses and malware and if you happen to work in an organization you probably have heard of ransomware which is very popular these days as well which has been locking at a lot of machines now all of this could be discovered by doing regular security scanning which allows for bugs to be discovered so that you can fix them before a misuse can happen how do you ident identify what kind of vulnerabilities are there or what type of vulnerabilities are there in your GitHub at the moment now fortunately ghs has Services which help you identify secrets dependencies and in even and even software security bugs which is under the security section of each repository you would find depend abort code scanning and secret scanning Now secret scanning helps you identify Secrets passwords password access tokens and any sensitive information which you may classify as a secret with the high entropy essentially uh your a AWS access keys are another great example as well now in terms of dependencies depend board helps you identify security vulnerabilities in open source libraries that are used by the code in your repository and finally code scanning helps you identify Security vulnerables in the code itself which may be just simply because there is poor code quality used in the Repository something which should be really helpful is that there are of course a lot of vulnerabilities lot of software types lot of software uh practices that are followed across the board so it may be hard to keep up with the wabil what is the final detail of a vulnerability now on the screen I have an example of vulnerability which is from the GitHub advisory database which is a list maintained by GitHub for all the security vulnerabilities based on cves uh which are collected from multiple thread intelligence sources and in fact also includes github's own Wonder T research for multiple languages so that they can keep their customers informed now this is free for anyone to be using if you use a URL there you'll be able to find the advisory yourself and go through all the vulnerabilities that they have discovered and advised their customers on all 16796 at the time of the recording uh across so many different languages to help understand more about the security vulnerability you have found let's talk about ghs secret scanning secret scanning is scanning repository for more than one type of secret using regular expression by more than one type of secret I mean it could be a username password it could be access token it could be aw secret keys and many more this service from GitHub aims to prevent any company secrets from being accidentally leaked on any of their public or private Repository before misuse or potential misuse by a pricious attacker now in terms of location for where secrets are scanned it is your entire GitHub repository it is your entire git history on all branches present in your GitHub repository the description and comments in issues title descriptions comments in your open and closed historical issues pull request which is still in beta as a 2024 and get our discussions as well now to Simply turn on secret scanning you can go under Secrets go for secret scanning and just simply turn on by clicking on the enable button ghs secret scanning partner program now there are partner programs available from GitHub which is essentially integration that GitHub has with other product companies to be able to notify you of any of their secrets being linked on a public or an internal G repository now the partner will provide a regular expression to detect possible secret like for example there is association with uh hashiko terraform AWS npm packages Ruby and uh AWS Amazon Azure Google cloud in case of an Amazon example if a user makes a commit or pushes a change GitHub would run a secret reject pattern based on what the partner has shared so in this case of if it was AWS or Amazon web services a cloud service provider if they were to say all our access keys or secrets are shared in this particular format GitHub would be able to run a Rex pattern on the information being committed by the user to GitHub they would be able to send a match to verify with the endpoint that is from the partner to determine if the match secret is real and uh that is how you can have other extended parties not just the GitHub Secrets but also potential secrets from popular services that your organization may be working with to identify any secrets being leaked how can you use ghs now you obviously need the ghas license is required to scan both private and internal repository owned by organization especially if you are on a GitHub Enterprise Cloud Now secret scanning is disabled by default follow repositories which you can simply enabled by clicking the enable Button as a GitHub administrator either on the repository that you want it to be running on or at an organization level now to enable ghs secret scanning once enabled it runs continuously and can be trickered to run always or when a commit is made to the repository you can run it as a push protection or a continous scan in terms of push protection a secret is scanned for every commit and it prevents secrets from appearing into the repository in the first place so it's more of a prevention based approach continous scan is more of a detection based approach where it detects and alerts on any existing secrets that you may have now it does not prevent any new secrets from being added because it's simply scanning for any secrets being present the full list of current secret patterns can be seen on the documentation for secret scanning but I would say the balance would be defined between push protection and the con scan okay folks in this part of the lab we would run secret scanning now I already have a repository which is a public repository under Cloud Security Board in GitHub it's called ghas example lab files that's the URL I'll make this available later on as well I have given each folder for each of the scanning in secret scanning as you can see I have three files at this point in time I have Secret in all of them all of those files and so I've got one there I've got one here somewhere but the idea is let's enable secret scanning at an individual repository level and then see how quickly it picks up so to do that if I go to settings I click on code security and Analysis and if I scroll down there's an option here it says secret scanning receive alerts on GitHub for detected Secrets keys and other tokens so once I enable this oh look at that instantly it picked up three files which is exactly the three files I have so GitHub credential you yes so this is where you see the file and I've got the AWS access AWS secret access all right perfect so it's picked up the files that I had I can go into each one of them and I can see oh that's the file that I had and that is the exact thing that's called out in the file that's the file name now I can either close as revoked or used in test Market as a false positive uh whatever the action that I decide is the use case here I can just say it's using test in order uction code so it's okay for me to put the code in here and that could be the end of it but that is basically the lab to end to enable it once and to enable it go into settings and code security analysis at the bottom of the page secret scanning now if you ever enable it and if you see the numbers that's basically that's basically numbers which could include other things as well in our case we don't have um I think we only have depend aboard code scanning and secret scanning all three enabled it didn't have any findings for dependo or code scanning because I guess all TW are working as expected so no issues there so for this secret scanning three alerts and you can go into each one of the D you get now that is the end of this lab I'll see you in the next class all right in the next part of the lab we will cover how you can exclude directories from Secret scanning for alerts so if I go into any of my repository oh let me just come back to my actual profile yep that's my profile I'm just going to go to one of my repositories let just say this one and within this I want to include I want to exclude a few directories like for example I want to exclude the directory for I need something with a few more directories in there so let me just find another repository we've got a few folders so I can actually show you the structure uh repository I think it's called Uh view uh nope not that one I haven't created the folder terap collection I'm trying to find a place effect oh there you go okay so I this is one place where I have uh enabled cloud trail I just want to see do I have any security turned on over here I only have dependo uh this is a private repository where it makes sense for me to have a doget ignore file now what I'll do is I will add a file now for me to exclude I'm going to add a file create a new file and I will put a link so I obviously want the file type to be secretor scanning so I'll just put that in here uh which is within the GAA folder secret scanning and now parts to ignore it could be anything it could be a pi file or yaml file I just put yam file for the sake of this uh yeah I'm I look I think I'm pretty happy with it so I'm just going to go ahead and do commit change uh create it uh added Fubar for not secret scanning it's important to want make it as descriptive as possible me the shortest number of words possible probably two opposite ends of what I'm trying to say essentially is that keep it succinct if you can but it should also be obvious what you're trying to do so I am clear on what I've done I've created a folder as well now if I come back onto my tree you should see dog ignore the GitHub f file as well so which has my secrets file in there as well so that's it uh that is how you would configure what uh folders or files to ignore as part of your alerts uh for from coming from showing up on your secret scanning alerts this is how you would do it and for you to see any alerts uh well this is a private repository you would not see it because I don't have a paid version but if you were to go to any of my my public repositories if you go to security you should see secret scanning and any open alerts would come over here all right that's the end of the secret skying lab I'll see you in the next Club hello hello all right let's go through the lab for understanding how to set notification alerts I'm going to go back to my cloud KY boot camp my website repository um in there now if you look at watch in in this which is the column that I clicked on right now at the moment it is set for all activity now I can set it for custom and I can pick security alerts as my uh reason for what I want to watch for I click on apply once I've applied this I come into settings and now over here as I go through this I should be able to pick uh let's find the option oops not going to go in the danger zone uh uh where is it I think I'm looking for something called email notification that's the one it was right on the left now I'm going to put my super secret password in before anyone else sees it okay so now I can have my email notification for say info@ ken.com and approved head I said the approved automatic approve the message is read only now now I can just simply do I don't really want to set the approval header uh I can basically say uh GitHub security as my approved header so I know how I can uh describe them separately and I go Set up notification and voila now I should get notification for security alerts now this basically means every time I do have a update setting yeah so yeah so at this point in time we have configured uh the notification to be sent as email now another thing that you have to look out for is under notification usually if you had on a paid version unlike myself which I'm not you would also see a button for for watching as well I've basically put the notification at the moment that you should get emails now this is uh going to send me emails of everything as well and not just this but I can also go to my organization so if I go to my organization and I can go into settings for my organization and if I look at the bottom left I should have notifications here as well uh oops okay okay for most a lot of the things I actually need like a k up Enterprise so I might not be able to do the remaining part but this is how you at least would explore sorry this is how you would explore what you can do with it now you can also Grant a team member a way to manage permission or manage these so you can just simply come in here I can put my name actually I realized I don't have any team members in there so or teams in there but if you have a team you can definitely include the team to be able to manage your um security alerts as well that's pretty much what I want to cover on this lab I'll see you in the next Lab before we start talking about GitHub dependable the first thing you probably want to know is just how prolific open source projects are as per the November 2023 report the state of the Octo report from GitHub it was shared that in 2023 developers made 301 million total contributions onto open source projects across GitHub open source are projects or repositories or libraries on the internet that are maintained by someone called maintainers now there are repositories for open source that may be maintained for a while but may no longer be maintained anymore because either the maintainers have not had the time to go back and look at the open source repositories or open source libraries itself have had developed some vulnerabilities and there probably was no awareness on how to resolve those vulnerabilities now there could be multiple reasons for why an open source is not being maintained in get the dependency graph is a good place to see what open source dependencies are in use in your project this is a great way for you to identify where you may have dependencies and what may or may not be a security risk the example on the top is showing you there has a high or at least two high dependencies which are high risk that's why they marked as high and the bottom one there are open source libraries that do not have any security vulnerable so you can totally ignore them and let them continue unless one day they do dependency graph by itself is not enough this is when dependabot comes in now dependabot is part of the GitHub Advanced security it uses the dependency graph that we spoke about just before to scan and alert on any insecure dependencies easiest way to understand dependency is that if you I guess the example of grocery store is the best one if you go to a grocery store and if you're trying to buy a bread if you T if you turn the food around or turn the packaging around you would notice that there is something called ingredients and if you go through the ingredients one by one you can find out which ones you're comfortable with which ones are organic which ones are not organic which ones are chemical acid or whatever similarly in the code that people write a lot of us use libraries open Source projects and a lot more information that may be helpful for the project to run but necessarily might not have been created by us this is where the dependency graph for hey this particular file seems to use this particular version of this particular language which probably has some replications or maybe not but dependabot is able to scan on triggers for GitHub action it can also scan packages as long as they had dependency graft enabled on that repository the alerts are based on GitHub advisory database entri which is maintained and an example of it for the kind of format is shown on the left for the different kind of package managers that can be available now it is worth noting that you cannot scan an archived repository and this is not your antivirus so you can't scan for males again I go back to the ingredient an example as long as you care about the ingredients that are like your libraries files classes that are being used in your code that dependency craft should be able to show you for the languages it supports which I have some called out in the example here how does one enable depend board for your repository depender board is always enabled by default for all public repositories and some private repositories hence the ASX you can enable get of advanced security dependency scan for all repositories inside an organization if it's your own private repository you would have to still enable it but for all public repositories it is enable by default going a bit more deeper into the private repositories if your repository is private dependo requires you to have an additional ghas license for you to be able to use dependabot on your private repositories now this is a good example of how dependency graph is used for creating Dependable alerts using security updates and the version updates which you can review thought it was a good explanation of what it could look like if it was being used however as I mentioned for dependency review by itself for private repositories it requires a ghas license now once you've identified depend about alerts and this can be configured on pull requests get up actions and other activities that happen but identifying vulnerability is a first step once youve identified vulnerability the next thing you would want to do is you can look at hey is the vulnerability valid or is it a false positive if it's a false positive you can ignore the alert if it's not a false positive if it's valid but downgrading to an older version without the vulnerability may be an easy solution that you can quickly do perhaps the solution is also could be you may have to upgrade to a newer version now both of these scenarios would require you to work with the developing team to understand the implications of upgrading or downgrading a version of a library as the usage varies per organization and depending on the software or the library it may be a crucial part of your production environment so you simply don't want to have all the uh upgrades and downgrades happen by yourself in spite of all the things I called out I would share some limitations of depend abort as well just to close off this lesson all alerts need to be reviewed by validating for false positive or actual vulnerabilities not all alerts would have a security patch so depending what security update is not a fullprof plan especially if you don't have a version to upgrade or downgrade to this is quite common if open source vulnerability is on an open source project that is not no longer maintained and unless someone takes responsibility of maintaining the open source project you are in a bit of a pickle or Mexican standoff whatever the right word would be now there are only limited languages that are supported by dependabot so in case your organization uses a language that is not currently supported by dependabot you may have to rec consider this option last but not least if you are using a private repository you are required to have a ghas license for you to be able to use depend Port but for public it's enabled by default that's all I want to cover for this lesson I will see you in the next lesson okay so in this lab we'll talk about enabling dependo alerts for public and private repository by the way just notice on the right hand top right hand side you can click on this to have your state of octe report which I was referring to earlier in terms of how much how much open source is being used okay to start with I'm going to find a public repository of mine I've got this uh I think I've got a few but I'm just going to start with the yeah I'm just going to start with this public one so just to show you how it's enabled if I go into security so security depend abort at the moment I have it turned on but I don't have any vulnerabilities this is what it would look like if it was already enabled let's find one where we don't have this enabled perhaps over here we don't have it enabled okay so this is a good one when you come on to this uh security Tab and you click on dependo you probably would see this as disabled if it hasn't been turned on now there are two ways to turn on dependo alert similar to some of the other GitHub Advanced security features you can either enable this on both public and private repositories or you can have this enabled at an organization level this is a public repository as I would show you here because it's public so I'll go to settings I come on to code security and Analysis over here I can see okay so I want to enable I want to receive alerts for vulnerabilities that affect dependencies manually generate the depend Bo pull request to automatically attempting to pull request or group all security updates to resolve allow depend to open pull request out automatically to keep your dependencies up to date if you notice the theme over here now to open pull request to open pull request and to open pull request so any pull request that is open and it has potentially adding a library that has wondery onto it this is how you would do it now I would personally recommend you to just have my person favorite is just to enable all of them uh but then that depends on how I guess what your posture may be like for example uh the dependency graph is enabled by default now I just enabled dependo alert I can also add dependo rules as well we can have my custom rules for how my alerts are going now this is obviously for part two of the lab but for the moment I'm just going to enable all of these because I definitely want to be notified every time there's a pull record and what I could be doing with it as well okay version update uh oh yeah so this what's I calling out the depend about version update requires you to check the frequency uh and to blah blah blah where the package manifestor located and you can get more information from configuration option for dependabot this is by default sing it to weekly uh if you're okay with that you can definitely make that change the file would be saved in GitHub dependabot yaml uh if you remember our previous lab on secret scanning do GitHub is a location where we store for secret scanning as well the files that need to be ignored similarly in dependo within the do gethub folder you can save on what libraries uh where the Manifest would be and how often do you want the schedule to run at the moment I think this is a bit Advanced for this class so I'm going to ignore that and I'm going to come back to my SEC security uh settings code security and Analysis I see how I have everything now you can obviously learn more about depend Bo alert on the page over here it talks you how you can configure your repository that dependable automatically updates the packages that you use um at the moment we are just focused on getting the alerts so I have enabled them now I go to security and I go on to dependo alerts are enabled now I can either click on here to save your dependo alerts or or I can click on this directly so it looks like at the moment there are no alerts for this right this is good I don't want to create any alerts but it's a good thing that there are no alerts now let's look at a private repository so if I go to repositories and let me just find a private one uh perhaps I can filter yes all right this is my private repository now this should have uh my understanding depend what it's disabled again s similar process I can now this time instead of going to settings I'm going to come over here and click on this reports setting and I can now enable the same things from here as well right so now that is enabled for my private Wonder oh sorry private repository as well now it's worthwhile noting that there would be some limitation that you will come across in terms of how and when it can be scanned but uh at least you're able to use diend about by default on your private and public report which is a good thing now we have that was the first part of the lab next part is to enable this at an organization level so I'll go to my organization specifically and now if I go to settings and I would go for code security and Analysis now over here depend alert affects your dependencies automatically enabled for all my repositories and it is enabled and automatically enable for all my repositories you want group okay now doing this has enabled it for all my repositories at least all the new ones I'll come through and that's from that point onwards you're doing depend alerts okay in the next part of the lab we'll talk about some actual Wonder abilities but this is the first part of the lab okay uh in this particular part of the lab we'll talk about vulnerabilities on dependencies that we may have so for this I have a repository that I had from before I'm just going to find the repository quickly so if I just go into this now it's worthwhile knowing that if you don't have a file that doesn't have an open source you probably would not find anything on the depender board but I think it was called view I want to say oh yeah perfect so this is a one this is a lab that uh I maintain with a friend of mine with that we have intentionally kept it vulnerable uh in terms of the libraries that are there that are vulnerable as you can see there hasn't been any change done for six seven years on this particular repository that has been intentional so uh the purpose of this lab is to show you I can already see seven alerts on my security so if I go onto that depender board is aler depender board alerts are enabled and when I click on depender board I can already see that I have a few by few moderate Wonder abilities in total seven open so this is what it would look like now the big question over here as we were talking and will be looking at this as a developer you have a look at this and you have to understand okay hook subject to provoke what does that really mean I don't know but I think what it does mean to me is that this was open two months ago some of them were open two years 5 years so this is to show you the fact that 7 years ago when I created the Repository none of these Wonder abilities existed but 5 years ago there was one discovered for cross scripting on the on a package in the file that I have for my npm which is a web packet bundle analyzer in the package.json file all of them seem to be on the package.json file and if I click on any one of them I can see how I can resolve it upgrade the web package to fix the depend board alert from going from 3.2.2 I can go from uh depend I can change the dependency and the recommendation is version of prior to our vulnerable packages use uh string without blah blah blah okay so patched version is 3.3.2 so instead of going for less than oh sorry that is that what it is oh yeah so I need to go for greater than or equal to 3.2 instead of less than 3.2 so that's if I change that update and if I would put a pull request in and that should be able to resolve the vulnerability now as you can see then four year later 2 year later 5 months ago 6 years ago 2 years ago two months ago so uh the important parts over here is to do the same thing so if I go to each vulnerability and identify okay am I using this package it is saying that my package.json file has ho uh if I pronounce that right as set to 6.1.3 but there is no patch available now as an organization I have to make a Cho Choice fa looks like the vulnerability the severity is high uh and am I someone who's not click on this package or Json file uh if I just do a command F I can already see yep I am using it and I'm using a version 5.0.3 which is vulnerable and it affects every version Which is less than 6.1.3 now I can make a choice and go the issue has been patched in version 9.0.3 I can go all the way there or backport it to 8.5.1 this is a obviously a bigger change uh for people who are developers you probably understand it now that I have been using version five in my where was it 5.0.3 moving from 5.0.3 to 8.5.1 or even .x that's a big change for people who have been the development background would understand this so This requires a lot more understanding of what other options are there how would we change it would changing the ho file would that affect anything else we have in the code so there's a lot more that needs to go into this as well as you understand the depend board alerts now you probably want to send email notifications for this as well so you would have email notification and you can even set up notification for how and where that should be going or uh in terms of I guess getting an email rather than going into this every single time and you can also have the these Auto triage feature which is still in beta at the moment so I'm not going to experiment on this lab but you can definitely if by the time you come to this recording it's already enabled you may want to give that a short where uh where dependent Bo opens a pull request and ignores false positive and SS alerts as well but this is how you would start and investigate any alert that you would get on depender board where after that as a business you'll make the call for are we going to fix this wondery create a poll request and update the package.json file which is the vulnerable which carries the vulnerable open source package or are we just going to leave it I leave that choice to you but that is the end of the lab Cod scanning is a service from GitHub which allows you to use code ql which is a proprietary service from GitHub or a code analysis engine if that's what you prefer if that's if that's EAS to understand basically code scanning helps you analyze a code in the G repository to find security vulnerabilities and coding errors Cod scanning is available for all public repositories and private repositories owned by organization as long as you have GitHub Advanced security enabled for the private repository code scanning needs to be enabled for public repositories as well and depending on whether you are happy with the default settings of code ql you are also welcome to use third party tools by GitHub through the integration they have provided for the languages they support code scanning uses GitHub action for workflow especially if you are folking a repository you would find that you won't be able to enable code scanning without having GitHub actions enabled because when you enable code scanning it runs a set of workflows which is in GitHub actions which is required for COD scan to work now similar to secret scanning and cod scanning the language is being supported and once enabled it fairly quickly goes through the code repository and even if you go for the default option but you can also go for the advanced option but I wanted to call it out that if you are folking a repository so it's not as simple as code scanning being enabled and we'll go through a lab later on in this lesson where we'll help you enable the Cod scanning capability now to enable code scanning when you simply click on enable you get this default configuration if you go for the default option by simply going into your repository clicking on code security and Analysis and on the right hand side in the middle you'll see code ql analysis setup and you just pick the default option once you pick the default option you should see the window on the the left and you simply hit enable code ql now it doesn't happen instantly it does take a few minutes for code ql to enable so you'll see the setting up screen and you would need to wait a few minutes before it actually gets enabled you would get to see this in the lab at the end of this lesson but for now this is how you enable code ql now as I mentioned there are two options when you click on the setup option for your codee ql analysis you can either use a default option or you can use the advanced option if you use the advanced option you're basically saying you're going to write a configuration file in yaml and you would not be using the default options provided by GitHub you would be using your own so that's the difference between a default and an advanced for the purpose of Simplicity and if you're learning I would say focus on the default it gives you the GitHub recommended option to start off with but if you are an advanced user definitely go ahead and write your own code ql configuration now it is possible to use code ql with third party as I called out earlier the simple workflow could be if you have Microsoft Defender if you have a container image being created or any thirdparty integration that is available in the GitHub Marketplace for the category of security they would all be available for you to use in the third party tool as integration for COD ql now the list keeps changing the at the time of the screenshot when I clicked on explore workflow after enabling code ql I only got 74 workflow options for security and again these are all going to use GitHub actions but this may be different if you see it on your GitHub profile depending on when you're watching this course it's worthwhile calling out why is code scanning important in the context of software development life cycle now software development life cycle goes through code where you where you actually write the code you build the code you test the code and then you release and deploy the code now you can run code scanning on every pull request which I would not recommend in fact GitHub doesn't recommend either GitHub in fact recommends the use of on P request path as a way or even request path ignore as a way to only scan for files which you want to include and use the pull request path ignore to exclude or not initiate any code scanning for the files that you have called out but if you know the location of what files you want to be scanned for code scanning then use the path variable but if you don't want to include certain files use the paths ignore variable actions on repository can have a set of actions that can occur on premerge pull request or push request so every stage of the software development life cycle if you're looking to integrate not just Cod scanning but security these options are available now to run a code scanning it is a trigger now the trigger could be multiple the trigger could also be from a push to the repository where you're pushing a line of code into the repository or someone has asked or triggered a pull quest which is triggered in a manner that it identifies that there is potential vulnerable code in there or you can write it on a or you can run it on a schedule basis the default is weekly provided by GitHub now code scanning configuration would allow you to change the code scanning schedule as well as event but that is also the advanced option if you decide to go the advanced path of writing your own yaml then that is definitely the path you can take now prevention is better than cure as someone said so if you are able to apply this preventatively or at an organization level enable it so that people have the option to do Cod scanning you may have a short of enabling code scanning made available for everyone welcome to the code scanning lab in this lab I already have created an example file if you are on GitHub you can go to github.com code Cloud security boot camp I have a repository that I've created over here which is public so you should be able to access it and I can put this uh in there as well but essentially it just Cloud secy boot camp and within that ghas example lab files which is the GitHub advanc security I'll create each folder for each of the different types of advanced security you can do in this particular lab we're talking about code scanning so let's do code scanning as you can see uh there's one file in here I haven't added a lot so the first one first thing you need to do is go into settings and the lab will talk about how do you enable GitHub code scanning to do that in your repository you can go to settings go into code security I don't have anything enabled as you can see depender board none of them are available Cod scanning is available which is under again code security analysis under the settings of your repository if you go into code security and Analysis by clicking on code security analysis and if you scroll down you should see a question said code ql analysis now as I mentioned in the lesson code scanning uses code ql so to enable that you need to click on setup default I would show you Advan in another example but for now we'll just use the default option it does take a few minutes it has recognized that the file that that I have is a python file in this repository it is important to know that code ql can only work against languages that we or that GitHub allows for in this case I picked one that it does I have picked the on push and pull request to protected Branch as well as the main I'm happy with that and it would do a weekly schedule now I'll enable this I can edit this if I want uh but I HP I'm happy with this so I'm just going to not going to change any of this I'm just going to go okay I'm going to say enable now it does take a few minutes and if you're curious as to if it's setting up over here if you're curious as to what it's doing if you come to actions you should start seeing over here basically uh as I've called out in the lab as well it uses GitHub actions to do it and because it's a public repository it is going to queue up a set of workflows in GitHub work in GitHub actions and at the moment I've kicked out the workflow for code qu setup it takes a few minutes once it completes we can continue the lab so I'm just going to pause the video and come back or I might just keep continue the recording and it might just uh or what I might do is I might just fast forward it there would be different parts to it as code ql is added and enabled just for you know for sh okay looks like code ql is set up now so if I go back to settings and code security analysis okay I can see the file last scan was 1 minute ago now if I go to security and I should see code scanning is enabled and I can click over here for view alerts it doesn't have any alerts it hasn't found anything on this yet it's a good thing so that means we are safe for now uh but if I go into code code scanning so it doesn't look like there's a lot I would have thought this would be picked up but this is a good example where it is not being picked up but to make it work what we can do is there's a I have this repository that I'm going to fork okay so while it's forking uh this is a website or this is a Juice Shop is by an OS Project which if you don't know is open web application security project they have a lot of these wonderful applications that you can use to identify if you have any uh vulnerabilities to so to continue to show you how it can work I'm going to click on actions CU I understand my workflow go ahead blah blah blah I need to do so if I go to settings for this and I click on code security analysis if I find my code scanning as you can see it would not be enable a because I don't have GitHub actions to enable that I can go into actions I understand my work and go ahead I clicked on that green button that appeared now it takes only a few seconds now I go back so okay now that I've enabled GitHub actions I can go into settings and if I go into code security and analysis on the left I should see the code ql analysis now to enable the for a repository the easiest thing to do is to click simply click on setup and use the default option you can use it has recognized there is Javascript files in here and python files in here so we'll do enable and if you want to see the act the set of actions that are taking place either you can just stop on this page and see what's going on and it would not show you anything or you can go to actions tab and you can see how it set up we'll fast forward the video to the point where it enables it but this is how you would enable code ql or code scanning another thing you can do while this comes up so I might open a new tab and I can show you how it works in an organization as well so if I go into this is my organization I can go into settings and within settings I have code security and I can use global settings under clo security and as you can see I can configure it I can and I can call it out recommend the extended query suite for repositories enabling default the extended query includes the default Suite plus lower severity issues so once I enable that I it would be enabled for extending queries to default Suite however it doesn't mean it automatically enables it for all the repositories however you can at least configure the recommendation for query seats to happen that is a global setting now there is a beta feature as well where you can see that I have two and I can apply uh to all repositories uh configuration for COD security uh I can even configure I can actually say hey I'm going to select these and I'm going to apply configuration for G recommended ones so I can just go k k up recommended to public repositories I want it to be as default for newly created repositories I want only public private and internal all repositories I want the code security configuration to be applied for all repositories once I apply that and it should kick off and it now has GitHub recommended okay so that is how you enable on a organization level if you however were on a personal account so I'm just going to go to my personal account if I just click on your profile so this is my personal account I can go into any of the packages I think I have the same package here as well but let me just go to repositories and I have have one called Juice Shop over here as well which I've basically foled earlier as you can see uh I had enabled Cod scanning before so I have a lot of alerts already on for COD scanning on everything is found that is the name of the file that it is looking at so it has found a lot of the code scanning wabil this is what it looks like I can look into the warning but for the time being what what I would do is the same thing uh maybe let me show you a file which I'll show you a file where I don't have it enabled so if I come back to the personal page I can pick any repository I just say I pick Cloud security Wonder Chief now to enable secret so to enable uh to enable scanning or code scanning on this if you notice I don't have code scanning enabled because I clicked on security and it show that it's not enabled so if I go to settings and I click on code security and Analysis and I come down I can see that code ql analysis is available I can click on setup same thing that you see at an organization repository it would not be any different when it's a personal account so you can do that and if you want you can click on edit and you can have a look at these but I don't believe you can change them unless you want to extend the default Suite in any other way but simply clicking on enable code ql should enable that for disal tutory now it's worthwhile noting I don't have uh I have a plenty of Json nothing really sophisticated over here it's just a readme file I'm not expecting it to do a lot of things here but I should see the same if I click on actions I should be able to see that I don't have much in there apart from I have all these Services enabled and to always confirm if you have Services enabled click on security for any repository and you should be able to see what services are enabled that's pretty much it that's what I want to cover in terms of enabling code secure code scanning for repositories and that's the end of this uh chapter I'll see you in the class using code ql to do code scanning this is how you enable code scanning by going to settings code security and Analysis code ql analysis and setup now for this we are picking the default option for now but we will talk about advaned in a bit in the same module this is how you would enable it for an individual repository but you can also enable that for a organization in GitHub as well if you are working for an Enterprise you probably already have third party tools that you may be using already that are already scanning cord doing wable scanning and a lot more fortunately GitHub Advanced security also allows you to import alerts from thirdparty code scan results in the form of sarif files that is static anal is results interchange format so Mouse full but s a r i f those who did not get the full thing so sarif files are basically alerts that have been captured in a third party scan of the same code that is in your repository right now so sarif files now you can upload these files using Cod scanning API Cod ql CLI or even GitHub actions however worthwhile calling out if you do use GitHub action method it still requires the use of giup actions workflow using the upload sarif action with the sarif file as the input and for those of you who probably know GitHub actions in detail you understand this this would be a step inside a GitHub actions file here I have in the screenshot an example of what a sarif file looks like it has configuration this is from a JavaScript typescript SF file that I downloaded from G iub the First Column is configuration second as a rule source and third as the unique identifier and fourth as the alert now this is a standard format that is recommended to be used if you're importing third party scan results into GitHub so that you can see them in code scanning in the way it should be seen now in case you're wondering what happens when you click on code ql enable it basically runs a set of GitHub actions in the background and we'll show this in the lab as well you can even have workflow files created as yaml format in the GitHub workflow SL cq. now the name of the file is not important you can call it anything you like but you can refer to it in the spe in the action that should happen when code scanning is enabled and it would understand oh this is the file that I need to use now Cod scanning obviously is once enabled kicks off actions by itself first one would be to install code ql and second one if you have a schedule it would set up a schedule for a periodic scan to run of code scanning for the repository that you have in front of it now if you choose to go down the custom configuration path that is instead of using default configuration if you choose custom configuration in this example I'm using a code q. yaml file that's the file would define what configuration would be used for scanning code in that repository another thing that also happens automatically is that it detects what language is being used for code scanning uh code qy is pretty smart like that they obviously support a a certain number of languages and they have detection capability for understanding that the repository that they're working on has a certain kind of language and code k pretty smart to detect it however you are able to add query Suite uh into it as well now more on query Suite later to enhance your findings that we understand what happens when code scanning is enabled it is important to know that code scanning essentially is running a code ql analysis engine in the background which is why get up action starts off by installing code ql the analysis engine first creates a database using information from the code repository and the database itself is a single directory created to analyze relational data copyed source file and a language specific database schema that specifies a mutual relationship in the data which goes back to what I was referring to that it automatically detects what language is in use that's how it will be able to work on it once the database is created code ql can run queries again against that code ql database for code ql queries you need ql or query language which is object oriented query language and the language is used to run against the code ql database which has the information on the code database now let's Deep dive into code ql GitHub code ql is a sematic code analysis engine that's you query data as so it were data in this case it would be a cql database which would have the relational context of the source code of all the files that are in the repository cql is not just to find information that is relevant for a nonsecurity activity you can also use it for identifying vulnerabilities pql files usually have AQL extension and there usually two types of queries one is alert based and the second one is pathbased and alert based highlights issues in a specific location in your code that's what would raising alert a path query would describe the flow of information between a source and a link to your code the screen also has an example of a code ql query if you notice a fourth line or even if you just look at the format and I'm going to talk a bit more about the format it does look like a databased query it has import from where select dive a bit more deeper into this essentially import would be defining the library or modules that you want to import into the query now this is your cql classes for people who are used to programming they might understand this already but I would say the easiest way to understand this is that uh first it starts off by having a lot of comments it helps you understand what each information needs to be the very first section is a commented section for query metadata that is if you have any some queries that you wanted to include in your code qul execution second line is for import where you can import different code ql libraries or modules by calling them out in your code ql file as you create them now this could also be code ql classes and predicates as well now there are other variables you can also use in a code query for example you can use name to define a label for the query you're currently to create description could be description in detail on what the query would be related to the kind as I mentioned earlier there are two kinds either alert or path and the prompt for that would be either problem or path problem problem severity defines the level of severity error warning or note Precision defines the priority of the problem is this a very high or a high or a medium or a low risk ID is a unique identifier and tags are labels you can attach to identify the query easily so let's put this into practice if I had the above which is if error handle the error as a comment the if expression in this Ruby is a bit redundant because there is nothing really going on if I use the if statement but what if I wrot it the way that it is at the bottom I first import the Ruby abstract syntax tree which is ASG file for code ql after that I use the if Express now it calls if Express which is from that ruby. ASG file that I imported just before now where not exist ex if express. getet then is basically where the content of the if then expression does not exist and select is a as I said earlier is a filter that you apply for what you want the result to be filtered by so in this case it would be it would be a human readable message of the problem based on this if expression is redundant that is if it matches a criteria it is going to display the result that was just a single query but you could also have something called a query Suite which is basically grouping of code queries that run against your cord but a grouping of it not just one or two but you can have as many that makes sense and are available in your code quer Suite GitHub also has a builtin code Suite which is set as default but you can also do security extended version to it as well now queries included in the Bild feed also are supported by languages like C C++ C go Java cing queries Java and typescript which is the example I showed you earlier python queries which is the lab we'll be seeing soon JavaScript is also in the lab Ruby queries for code ql analysis Swift queries for people who are the Apple iPhone people writing quotes for apps that would be swift queries for code analysis the builin queries for the query suet can be viewed in your GitHub documentation which is easy to find this is specific one is for python analysis you can see the first one being accepting unknown SSH host Keys when using paramiko aary file right during tar file extraction bed HTML filtering rejects all of these are definitely things you can call out as well as things that are helpful for you to quickly understand what the query would relate to there also code ql packs now cql packs are consisting of not just cql queries libraries which you can use the pack to share create and us it as a dependency as well and in your metadata if you'd like to include that in there as well a Cod ql pack contains queries Library files query sues metadata but there are three kinds of cod Q packs for example you have query pack Library pack and the Mortal pack query pack is a precompiled query which was what we were looking at just in the previous slide Library pack is to be used with a query pack but they do not contain any query these queries are not compiled separately but these could be custom on that you would created yourself model packs used to expand code scanning to recognize libraries and Frameworks that are not supported by default like for example if you may have an organization specific code ql query that you would want to include you can use this for that now that we understand the anatomy of code ql and what happens when code ql is running it is worthwhile knowing once you've enabled code scanning you can use two ways to run code ql code scanning one is code scanning workflow where it's a default you are either using Code ql packs or code ql queries to inform your code Quil analysis engine on what test to run the second option is your custom configuration file which is if you have used the Advan option for setting up code ql you could use that as a way to start building up code ql packs as well as code ql queries that you can be adding to the scan about the registry of standard code ql packs it maintains on GitHub which also reminds me that you can use code qul code ql to scan containers as well either using third party tools or simply using existing packages available in your code ql now different kind of packages do exist you can install standard packages like your code ql CPP C go Java JavaScript Python and Ruby as well which can be automatic downloaded if not download already worthwhile knowing that if you have both that is if you already have a workflow defined but you also Define queries in your configuration file the workflow files queries would be the only ones used unless you add the plus symbol to include the configuration file queries when the workflow kicks off more information can this be F can more advanced information on this can be found on the gab website now so far we've been talking about how to enable code scanning we've spoke about how to use code ql and what really happens when you start it and what kind of rules you can have now we can go a lot more deeper into it and I would highly encourage you to do that but GitHub Advanced security is a bit more than just configuration files it's also about all these alerts that you're going to get perhaps could be over 100 alerts when you run it on a file all these alerts may appear on under your security tab for your repository and please don't send this as it is to your development team or whoever supposed to be responsible for looking after the results of vable instances in your code repository instead I would encourage you to have this workflow for your alerts first one would be someone in your team is triaging whether the Cod scan alerts are genuinely a false positive that is they are not true or are they a true positive which means they are true and someone needs to investigate this further because you have identified it is a one and it can be exploited now the step two on this workflow would be now that you've identified that it's a true positive your organization most likely has a security risk Matrix to identify hey what do you do with high medium or low rating of risk for security and specifically technical risk of security and you would be expected to follow the appropriate procedure to take steps towards resolving the vity that is if it makes sense for the identified risk rating at this point in time you are engaging with the development team the product management team and anyone else who probably is supposed to be in the loop for them to be aware of a vulnerability being identif ified especially if it's a very high or a high vulnerability and the rating may change from organization to organization but the processes on the at least on a very very high level are very similar the steps to take after you've identified a true positive may vary from an organization as well okay welcome to the lab for module 5 we can talk about code ql to start off with I am in my cloud security boot camp get a repository I only have one just an example lab file that I created I had that enabled for so just for me to see what how I have enabled and what I have enabl for security I can simply click on the security tab on the top and clicking on that which has number three next to it I can simply go and see okay my dependabot alert is enabled my code scanning en is en enabled and my scanning for Secrets is also enabled but looks like I only have three Secrets which is probably a bad thing but still but I don't have any dependabot vulnerability I don't have any code scanning vulnerability now I'll be honest I'm not the best programmer in the world but one thing I know for sure is I at least know how to find wable cord which I can fix so in this scenario I have an example for you that I've looked into before uh oh there a very popular organization called oosp and what I'll do is I will copy that repository over here so this is called Juice Shop which is a repository from oosp Juice Shop oosp is a open source vulnerability management project they are they stand for open web application security project and the intent behind had U is the most modern sophisticated insecure web application that's how they describe it because the intent behind creating this repositories for people like you and me for us to learn on how we can do security and what are some of the bad things we can look at but in our specific scenario we can use this to test out the GitHub Advanced security get code scanning option so for this I would do a fork that is I would create a copy of this for myself I can do that by clicking on the fork button you can click on the drop down if you like and you can say where you want to create it I already have a folk on my personal but I want to create a new one so I'll just click on create a new new one and I can choose the owner to be my organization now there is no other repository under Cloud security boot camp with that name so that's what would stick and I can probably say number two so just it's a bit different and I can copy the master Branch only I don't really want to have any of the sub branches uh if I've done all of that I can just click on the green button which is create Fork now it does take a few seconds sometimes few minutes but well it only take a few second but it that is how it would be and now you you notice this is under Cloud security boot camp if you see where my mouse is highlighted uh it is a public repository called Juice Shop under Cloud boot camp and it's folked from the actual original repository now we're not done yet we obviously only have a one rable repository that I have just brought into my uh GitHub organization I don't really know how to do I I don't really know yet how to learn code scanning so what I'll do is I'll go and enable this first so if I go to settings on the top right and code security and Analysis now I've mentioned this before but I'll call it again because this is a fork and because we just learned from the class that code ql code scanning requires GitHub actions we would not be able to do anything just yet so let me show you why if I go to code security analysis and if I see look at that it's not not enabled because GitHub action is not available now I can either click on enable it here or I can submit a code scanning result which is the s a file I can click on that and basically talks about how you can upload a SF file using the three options that are available but I'm going to keep it simple for you guys so I'm just going to Simply click on enable it now it's going to ask me hey you understand you can either look at the workflow directory yourself but you can look at it after as well but you can say I understand my workflow go ahead and enable them because we are smart people so I'm going to click on the green button all right now we are under the actions tab which is your GitHub actions tab workflow and as we just learned in the class um workflow is where you define all the automated action that the GitHub action is about to take we're obviously keen on the code key scan uh it hasn't run yet so that's why you don't see it but you can see the file that would be triggered when code ql is enabled so if I click on that you would be able to see the file which is the workflow and code analysis file this is the file that we run this is what a code ql custom would look like custom Advance would look like the easiest way to understand this uh this is a GitHub exper this is a GitHub action file more than a codee ql file so the simple way to understand this if you've never seen codee ql is that this would run on push as well as a pull request this also calls out that hey when you are running a job called analyze run the analyze function run it on an Ubuntu container it should have action and content as the read and the security event should be written down it should be on JavaScript and typescript language now once it's defined what the analysis directory database container would be you can then look at the number of steps each name is the step that would be taken that's name code checkout repository initial initialize code ql and then Auto build perform code ql analysis now all of that is triggering a GitHub /ql action and it's already called out the file and the checkout it needs to run that's how that's the simplest example of a code ql scan now that we've done all of this you you should come back onto security which is in the top if I click on that you would notice that depend of what was already set up so it has identified that I have 13 Oneil in my depender board which I'm going to ignore for now because we are focused on code scanning at the moment it's not if I click on code scanning it's not configured but instead of configuring here let me just take you to settings and code security and Analysis you scroll scroll down should see Cod scanning and now look at that looks a bit different doesn't it now I have spoken about the third party tools I will talk about it again but for now let's just choose setup and default I'm happy with this it's identified that I have python as well as JavaScript in my repository it has extended some query suets as well and I have it on push and pull it would run on weekly schedule now I can edit this if I want but I don't really want to so I'm just going to go enable code ql now once this is starting to set up you should see assigned repository setting save may take a while because Code full scan of the repository now if you look at the bottom it says it's setting up so code ql is still setting up if you want to see what it's about you can go to the actions tab which is on the top and you can see it's running a code Q all set up now if you give it a few minutes uh it should run the code ql and hopefully because we definitely have aable code in here the security number should update from 13 to a larger number with a bit more than just my dependency B alert but while it's doing that I wanted to show you what third party tools you can use as well now if I go into settings I come back over here and if I click on the explore workflow these are there are 74 code scanning workflows that are available for us to use the best one obviously being the code ql analysis from GitHub itself if you just want to stick to that but there are a lot of third parties that you can also use for code scanning there are Microsoft products nonmicrosoft products uh a lot of them basically you can keep going through all of them pick the one that your organization has already gotten an allegiance with or probably already working with uh they also as you can see this is by GitHub actions as well I would probably only go for the one that you recognize there's one from meta for a python compliance one uh I would only look at the ones that you are comfortable to run in your organization and are bu I guess for lack of better word identities that you trust or organizations that you trust I think at this point in time I'm only only accepting GitHub actions as the OWN ERS or Microsoft as the owner that's probably trustworthy for me I can probably use those uh Microsoft Corporation quite a few of them depending on the purpose you can search the one that makes the most sense for you and just use that so you can integrate that to integrate that let's just do configure if you click on configure it takes you to the code ql file now this is exactly what we spoke about in the class we gave it the name when do we want it on what branches do we want it how often should the schedule run for that workflow what should the analyze job have whether the security event should be written you should fetch internal or private code ql packs the strategy and then we are on to the steps this is exactly what I was showing you in the previous one if you notice over here you can first initialize code ql that's what's going to kick off it's going to identify the language from its existing Matrix and also the build and if the build is manual it's going to run a shell command and the shell command is going to basically if you are manual make bootstrap make release and exit and the rest of the analysis would happen at the same time as well that's when it would use the perform code analysis now this is how code ql itself runs which is what we would seeing over here uh if I just refresh this page sorry just one second oops not that I wanted to do that uh it is still setting up so um the if I come back to the action it can still set up still in progress give it a few minutes and it should just basically work after that so I'm going to pause the video and I'll come back for e e e e e e okay look like my okay I'm back and looks like my code ql is setup is finished so I go into code ql I can see that there was an a bit of an error as you can see over here realtime shooting of the error uh for some reason it was not able to make a connection and was timed out but it's still finished so I'm not going to question it now because of a success uh but let's just quickly see what it did so if I click on analyze I can see it did a perform it a setup so if I click clicking on this it you can see what it did exactly what was called out in the file it basically had a checkout repository with the with it basically called out the image it called out the GitHub token to be used and as it went through it it initialized it set a code ql and perform post initialize you can actually see the entire job over here the more important thing over here is the output cleaning up orphan evaluate there are no errors over here which is a good thing so it definitely worked uh so did analyzing the python files and it did a great job of looking at it and it did some adjusting required nope not required quired okay so now if you look at the top you probably will notice that hey there are 132 things that have been wrong which is probably not a bad well it is a bad thing as I was saying in my example there are 119 uh incorrect there are 119 wable files potentially if impacting this particular code repository it is mod is meant to be so uh if you see more don't be afraid because it just could be that when you're running this Cod scan against the version of Juice Shop that you're running there may have been more one that have been discovered but the important thing over here is I have it enabled and now I can see my code scanning results as as you would have noticed it does take a few minutes even after it's turned on for to finish a full scan but this is what I am facing at this point in time I have 119 open issues now it is important to understand the criticality so if I click on severity you would see there's low medium high and critical this is what I was referring to in the class that critical means that it is really critical that this should be looked at today like right now and it may be different for different organizations but I would still looking at the critical that we have if I just filter this by critical you would notice that there is a lot of critical right there right so I'm just going to go okay I can't clue everything here so I'm going to sort uh how do I what's the best way to approach this I have 119 code ql 19 of them out of the 119 have been found to be critical so I would as a first step if I was most organization I would just go through these uh let's take the first one ex oh now remember we are doing it based on the severity we're not doing it based on oh what looks the most interesting it is very important for for you to know that you're responding based on the criticality of the severity of the ra alert raised over here critical being the most important followed by high followed by medium followed by low and when there are 119 the last thing you want to do is send it all to your developers because as we saw in the class this could have a lot of false positive in there as well so let's check let's investigate the first one just for you know actually how about we do code section that probably is the more enticing one or even hardcoded credential as well that could be something people should look at so if I click on hardcoded credential oh look at that it has a beer token right there which it looks like it definitely looks like a password so I probably would this is definitely in my opinion it is it is a critical because I can see it's a code now me as a security analyst who's reviewing this I can either copy out this entire token and if I have an internal validator for for o tokens or just oo jot tokens I can simply use that to identify is this coded is this key still vulnerable or is it still active and uh if it is I need to ask the developer responsible for this repository to replace them and probably remove them as well especially if this is a public repository which in my case it is what about another one let's just go code injection which we were looking at just slightly this this is based on the fact that I am not filtering the input that I'm taking from the user that's where it's calling out that hey by the way if you're directly evaluating user input code without properly sanitizing the input first allows an attack's arbitary code execution so I could literally send it some kind of injection attack and it would be interpreting it and running that instead of running the actual code now these are some of the examples and as you would have seen in the class we spoke about how these are uh to be triaged don't send all of them to the developers in one go make sure you at least have a look at whether they are false positive or true positiv now if you notice it's reported a bit of a warning for me so if I go into this I can see that the status of the tool now there's two ways to come here you can either click on that button or I can go back on tools go back one more you can see over here it says add tool and and says tools if you press in tools you should see I only have one tool called code ql and it last Rand 10 n minutes ago it is looking for it has looked at 571 file 571 that for typescript three files that were Python and 14 files that were JavaScript so it's primarily a typescript uh file or typescript repository I can click on this and view the setup I can go okay it is the code ql that I had enabled it is set with default nothing to see there I can click on view configuration I can see when it was last configured and look at that I'm actually on the same screen that I was on before now if this was important for me when it last ran the scan and I found that it could not process a file due to syntax error a part error for syntax was to now I have two options either this is a legit like I can go into the last scan and look at where it was where it found what it found and look at that all of that and there was one particular place it was called out as it should not be right okay so all of these looks like name changes that need to happen and yeah that has not been called out and to ignore the white space for now yeah so it's basically showing us hey this is a change that we can uh we can commit if you want by making by fixing broker links and it is being shared by someone else and at this point in time I don't want to accept any queries from so I'm going to keep going back one more step back I can cancel it all right now the syntax error at this point in time I have the choice of uh either I can use the exclude option in my configuration file to exclude the folder altoe where that JavaScript is because we didn't have a lot of java files but if I want to I can just correct that as well and use that as a way to um I guess continue my scanner full Glory now these are just the standard tools that are available from code ql if I keep going back you can OB obviously worthwhile knowing you can also add tools as well which takes you back to the workflow screen and you can set up a work for yourself that is how you would identify enable as well as triage Cod ql results for based on COD scanning done by GitHub Advanced security that is all that is all I wanted to cover in this lab I will see you in the next one it's important to understand how GitHub Advanced security works with the software development life cycle now if you are a developer you you probably understand a software development life cycle but if you've never heard that before a software development life cycle is what you see as a diagram at the bottom from the time you write your first line of code in your IDE all the way up to you deploying that into your version control system and all the way into an environment that entire process is called software development cycle now security can be integrated at various parts and it's the same with ghas GitHub Advanced security allows you to integrate things like security policies code scanning secret scanning depend the board and also provides you a security overview depending on the organization you're working for this may look slightly different and based on the plan you have with GitHub this may look a bit different as well but one thing is for certain you do want appropriate security access controls for all the findings you don't really want everyone in your organization to be aware of all the vulnerabilities that have identified for a repository especially if it's a production repository so you may decide and choose to have only a small set of team members or individuals who can access these services and get notifications from it that is probably the number one best practice I'll call out right as the bat As you move into a bit more detail on how and what services can be applied the First Security Service that I'll call out in GitHub Advanced security that you can use in your organization especially if you have a GitHub Enterprise unfortunately this is not available for nonenterprise license the service that I'm talking about is called security overview security overview helps you get an overall security status across all your repositories within an organization now that helps you look at all the risk posture secret scanning Cod scanning as well as dependenc as well in one good picture if you are someone who has looked at security policies before that is usually in the beginning where you can configure how people can inform certain threats that may be in your repository usually security team would Define the policy and how this can be used to report on any threats this is usually done at the project configuration status where you are defining where before someone code has import into the repository on how you want your vulnerabilities to be disclosed this is no particular order it's just my preference to have secret scanning as a first thing that I normally get implemented if you're thinking of implementing security into your GitHub pipeline I would say GitHub Advanced security secret scanning or secret scanning in general could be a good place to start integrating security because secret scanning is known to most people and as we have done in other modules here you probably would understand what secrets are and why you don't want them there but if it's not implemented you probably want to work with the security team to integrate that or extend your GitHub Advanced security to enable secret scanning the other concept after secret scanning which is a great place for security is dependable and dependency review these are looking at dependencies based on the open source libraries that are available in the code we obviously spoke about it detail about these in the previous module so I'll definitely encourage you to find out a bit more but in terms of who gets actioned or who gets a request here even though the service may be integrated into your pipeline similar to secret scanning Dependable depend scanning as well as code scanning they all work independently they all have their own set of results and based on the organization you may be working with one or more security team for each one of these or a dedicated security individual who would be helping your tregs as well we have been talking about vulnerabilities it's important to understand how usually security vulnerabilities are reported globally there are two big parameters common vulnerability and exposure which is cve and common weakness enumeration which is cwe following is a screenshot from GitHub advisory where you can see the rating on the right hand side with cwe 400 cve 2024 32476 now this number is different for different vulnerabilities and different weaknesses when I talk about vulnerability I'm specifically referring to the cve number and a cve score is basically a reference method for publicly known vulnerabilities of a software or a hardware for a particular version of software and Hardware like it could be a nodejs version 1.0.0 has a certain vulnerability and that would be disclosed as cve on the other hand common weakness alumination or cwe is a globally recognized reference as well however that focuses on type of classes of weaknesses rather than individual versions it looks as family of class for weaknesses side this is also a good point to talk about GitHub advisory database that is a URL that I've provided github.com advisories is a great way for you to identify all the advisory security advisory specifically for all the vulnerabilities cve packages and others that have been disclosed and GitHub maintains a database of all the known vulnerabilities for certain known languages now in case your language is not in the one supported then I would encourage you to have your own thirdparty way of identifying threats cves and cwe for the code that you may be running in your GitHub Enterprise GitHub organization GitHub repository or GitHub Enterprise now that you understand where software security development life cycle can work with security you also understand advisory and the types of vulnerabilities it's important to also understand where does the line get drawn for roles and responsibilities now again I would put the cavar that not everything that I share here is applicable to all organizations it may be different to for different organizations but generally speaking you would know that developers are responsible for developing code they are usually contributors into a repository or could be more than one repository at the same time there are project owners project managers and team leads and other managers who are encourag to be participating as a username who are also given a user account in GitHub the reason for this could be approval required for a certain commit or a certain kind of commit or it just could be review of the code for the individual contributor who has been contributing the codin security team also gets access to repositories that are used by developers this could be based on secret scan scanning or any of the other ghas services they may have identified something that they want to work on and they may require access to repository so sometimes they may also have a similar role to a developer depending on how extensive or how involved they are in terms of the repository last but not least is GI of administrator this may be in the development team this may be in the platform team this may be people who are in the corporate department but they are responsible for managing the security as well as your user management as well as your repository management to to an extent depending on which organization you're talking about they are responsible for anything to do with configuration of GitHub itself like if you need access to a certain repository they would be able to help you out and probably the other side of the coin the security roles usually there is someone called an application security expert who works with a project team whether it's a developer or a project owner to help them triage vulnerabilities have been identified by the GitHub Advanced security tool now obviously there are people who would primarily work on building the workflow for this as well because they may be just starting off in their Journey they may even only have secret scanning enabled and none of the other GitHub Advanced security servic enabled so it may be just their job is to figure out what that workflow would be and enable those Services they could also be contributors in one or more repositories especially if they are uh talking about security repositories or trying to eradicate vulnerabilities from certain repositories which brings me to security policy security policy are definitions you can have in a security. MD file which lies in the do GitHub folder of your repositories you can enable it for entire organization as well if you like but in general what they're meant to be is they are a way to securely report security vulnerabilities for a particular repository so in the previous slide we spoke about the different workflows you may have based on what GitHub advaned Security Service you may have turned on each one of them would give you a certain number of vulnerabilities and depending on how and what you should be doing that could be defined in the security MD file so next time you find a vulnerability definitely look into the security. MD file or markdown file inside your GitHub folder for the repository to identify how can you disclose the vulnerability to the owner of that repository responsibly depending on your organization you may obviously have all of the services turned on or you may take my advice and if you've never done get of advanced security before you may start off by enabling a secret scanning and then move through dependency alert and then move to code scanning irrespective of the path you chose depending on how many of these services are integrated the workflow would depend on the rating that your cve or cwe has your organization may decide that any CV score of nine and above could mean that you have to escalate to a senior or get manager involved however if it's a loss Wonder te you may not have to do that and you can just triage that yourself but what that workflow can look like would differ from organization to organization but in general there is a known rating provided to everyone in the organization for them to know on a glance that hey if I get a Oneil which is of a certain CV score or if I get a Oneil which is marked as high by GitHub Advanced security I should use a security policy that I've we find just now in the repository to inform the right people in the organization about the vulnerability that I have discovered and how I can help perhaps remediate that GitHub Advanced Security Administration now one of the biggest part about administration of GitHub Advanced security would be to enable GitHub Advanced security itself the choices could vary based on how many public reports repositories private repositories you may have as you can see from the diagram here public repositories have all these Services already enabled by default it's only when you switch to private repository you would get features only if Advanced security is enabled to enable you can enable obviously on all repositories in one go and you can do that across the board on your GitHub organization level by automatically enabling it the question remains that would you enable that for only the ones that are existing in your GitHub Advanced security at the moment or GitHub repository GitHub organization at the moment or would you enable that for all new private repositories as well that is something that you would have to make a decision on and perhaps require an interaction with other other team members and managers to make that call on how much of GitHub Advanced security would you enable across the board there are two ways to enable GitHub Advanced Security One is using the GitHub user interface simply loging into the website and enabling Services either at a per repository level or at the organization level or you could use administrative shell provided by GitHub CLI to activate GitHub Advanced security and perhaps all services of GitHub Advanced security for your organization in GitHub the biggest question here still remember is should everyone have access to all the findings and also should you really have all the services turned on or has there been a staged approach so that you're able to identify and remediate vulnerability and not just have a lot of Vil to triage without uh having a proper process around it now that you've enabled GitHub Advanced security you probably want to have restrictions on on who can view what alerts and from what GI of advanced Security Services you may already be aware that by Nature security vulnerabilities are sensitive and by the same nature disclosing all the vulnerabilities to individuals who may perhaps may not have the right kind of access or may not be even informed about the right steps to take you may want to be mindful of Who You disclose the alerts to so alert rules for example the depend rule for alert similarly Cod scanning alert secret scanning alert can be used to identify who the appropriate owner would be for any alerts that are created for identifying a code scanning alert or a secret scanning alert or dependabot alert the example shown over here is for dependo alert which you can find in your personal applications in your personal repositories in GitHub as well and there are certain amount of minimum permissions required if you notice except for code scanning everything else requires at least a repository administrator or a organization owner role which is super user level role so you get an administrative Privileges and that's why it would be important for you to think about the workflow that you choose and who you should choose to expose the alerts to now you may need a owner or security manager to perform you may need an owner or a security manager permission to view security of all repositories because you decide that hey only the security team should have access to it but you can like any all the other features of get Advanced security you can enable this per repo or for a team or for entire organization as well but this is a great way to identify the overall risk and vulnerable T posture of your repositories and projects in your GitHub account talking about alerts in your repository there is a service called security overview which is only available for GitHub Enterprise plan users but if you look at the screenshot it's a great service that helps you look at all your repositories in one single glass pane for knowing what the overall security landscape looks like now whether it's in terms of how many repositories are impacted by by code scanning how many are impacted by depender board or secret scanning and what the overall risk posture looks like GitHub also provides you with logging in terms of administration you are able to identify and audit what users have been doing if you are on a personal account you get access to things like security log and sponsorship log for all the activity that your user may have performed in that particular in that particular account similarly organization level uh the security logs are called audit logs and both organization level as well as personal account has sponsorship logs uh which are because you can get sponsor for your repositories you can also see the activity performed by the sponsors themselves as well there's another way to manage and administer GitHub Advanced security if you have access to GitHub access token which you can easily generate from your GitHub account you would be able to log in into the API and make specific requests for secret scanning or code scanning undependable mod alert please be mindful this is an automated way or programmatic way of accessing this so a lot of the usual features perhaps audit log or security log would be the only two helpful things that you can actually find out you can use to identify if someone is using programmatic access that would be one kind of administration you may want to do is is now that you know the logs you know that there is API actions possible you would use the logging mechanism to understand who which user has performed what action in GitHub if there is a suspicious one
