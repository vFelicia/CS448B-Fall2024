With timestamps:

00:00 - hi everyone and welcome my name is
00:02 - saldina i am a software engineer and i
00:05 - make programming related videos on code
00:07 - beauty youtube channel and in this video
00:10 - i want to talk about oop so object
00:13 - oriented programming
00:15 - this course will start on a beginner
00:17 - basic level and then as the course
00:19 - progresses we will see some of the more
00:21 - advanced concepts i will explain those
00:24 - advanced concepts and i will show you
00:26 - how you can implement all of those
00:28 - concepts in code you can find the full
00:31 - content of this course in the
00:32 - description of this video so make sure
00:34 - to check that out and then if you want
00:36 - to see some different examples if you
00:38 - want to learn more c plus and you want
00:40 - to upgrade your knowledge
00:42 - i have a lot more videos like this one
00:44 - on my channel so i invite you to visit
00:46 - code beauty youtube channel and i'm
00:48 - going to see you there in some other
00:49 - video so let's start with this video
00:53 - so the first thing that i want to
00:54 - explain is what is oop what is object
00:57 - oriented programming
00:59 - oop is programming paradigm which means
01:02 - that it is a set of rules and ideas and
01:06 - concepts it is basically a standard in
01:09 - programming that we use to solve a
01:12 - specific type of problem now besides
01:15 - object-oriented paradigm there are other
01:17 - programming paradigms as well you may
01:20 - ask why well we as humans have a lot of
01:23 - different types of problems and our
01:25 - computers help us solve those different
01:28 - types of problems and if one paradigm is
01:30 - good to solve one type of problem for
01:32 - example that does not necessarily mean
01:35 - that it is good to solve all other types
01:37 - of problems that we have so the idea
01:40 - behind object-oriented paradigm is we
01:43 - want to be able to represent real-life
01:46 - objects real-life entities together with
01:49 - their characteristics with their
01:51 - attributes and their behaviors we want
01:54 - to be able to explain those objects to
01:57 - our computer and to represent those
01:59 - objects in our program and that is
02:01 - exactly what oop is used for so how does
02:05 - this work on a real life example let's
02:08 - use the example of car so a car as an
02:11 - entity in real life has many different
02:14 - attributes many different
02:15 - characteristics and some of those are
02:17 - manufacturer of that car so is that car
02:20 - a volvo a ferrari or
02:22 - a ford or some other type of car and
02:25 - then that car certainly has a collar it
02:27 - has price it has max speed that that car
02:30 - can obtain and many more characteristics
02:33 - i'm sure that you can think of many more
02:35 - characteristics of a car than i can do
02:38 - so
02:39 - those would be some of the attributes
02:41 - and characteristics of a car in real
02:43 - life and then some of the behaviors of a
02:47 - car are for example a car can drive a
02:49 - car can accelerate it can uh stop you
02:52 - can open the door of a car you can tank
02:54 - your car so you can put fuel in your car
02:57 - and then you should also have the option
02:59 - to show how much fuel that car has left
03:02 - so those would be some behaviors that
03:05 - car has and as i said object oriented
03:08 - programming the idea of object oriented
03:11 - programming is to be able to represent
03:14 - that car from real life in your program
03:18 - so how do we do that how can i represent
03:20 - a real life entity like a car in my
03:23 - program or another entity like a game or
03:26 - a sport or student or a book or animal
03:30 - you know so the answer to this question
03:32 - is by using classes now class is very
03:36 - important concept in oop class is
03:39 - building block of object oriented
03:41 - programming
03:42 - and um a class is basically user
03:44 - user-defined data type and in order to
03:47 - be able to understand what are
03:49 - user-defined data types you first need
03:52 - to understand what are pre-defined data
03:54 - types what are built-in data types so
03:57 - data types like integer and float and
04:00 - double and character and so on and if
04:02 - you are not familiar with these i am
04:04 - going to refer you to my video
04:06 - that i made on my channel
04:08 - related to variables and data types so
04:11 - just search code beauty variables data
04:13 - types and you should be able to find
04:15 - that video
04:16 - and then
04:17 - if you are familiar with these
04:19 - predefined data types i'm going to tell
04:21 - you that a class is a little bit more
04:23 - complex data type
04:26 - and in what way well let's say for
04:28 - example that in your program you want to
04:30 - represent username of your user
04:33 - in order to be able to do that you will
04:35 - just create a variable of type string
04:37 - and call it username and you should be
04:40 - able to store the username of your user
04:43 - in that variable but
04:45 - what happens if you want to store the
04:47 - entire user in your program
04:50 - that user has many more characteristics
04:53 - than just username user has his name as
04:56 - well and then gender and email address
04:59 - and then he has height and width and um
05:02 - i'm sorry wait
05:03 - he has weight
05:04 - and then he also has some other
05:07 - characteristics and all of these
05:09 - characteristics are going to be
05:11 - variables that have its own type and
05:14 - then all of these variables together are
05:16 - going to make one group which will be a
05:18 - class that represents your user one
05:22 - thing to keep in mind though is that you
05:23 - will need to store the information that
05:25 - is important for your specific program
05:28 - for example if we are talking about
05:30 - facebook user then height and weight of
05:33 - that user is not that important but if
05:36 - you are building a fitness application
05:38 - then height and weight of your user is
05:40 - extremely important so you should store
05:43 - the information that is important for
05:44 - your specific program so let me show you
05:48 - now how we can build a class in c plus
05:51 - code and the ide that i'm using
05:54 - here is called visual studio and you can
05:57 - download community version of visual
05:59 - studio for free in case that you want to
06:01 - follow this tutorial and type at the
06:03 - same time together with me
06:05 - so
06:06 - let me show you now how you can create a
06:08 - class in c
06:10 - code the class that i want to create is
06:13 - called employee so let's do that now
06:15 - let's create an employee class in this
06:18 - program here so the first thing is you
06:21 - type class keyword and then you give a
06:24 - name to your class so i'm going to call
06:26 - my employee
06:30 - like this
06:31 - and then you use these curly brackets
06:34 - and at the end of these curly brackets
06:37 - you need to put semicolon because if you
06:40 - don't if you forget this semicolon you
06:42 - will get a compile time error and if i
06:45 - try to run this program now
06:48 - that is not going to be possible as you
06:49 - can see here and it says here
06:51 - immediately it says expected a semi
06:54 - column so you need to put semicolon here
06:57 - okay now that we have created this
07:00 - employee class we see that this class is
07:02 - empty and what we need to put inside
07:05 - this class here so inside these curly
07:07 - brackets because that is the body of our
07:09 - class
07:10 - we need to put members of this class now
07:13 - the members of this class are going to
07:15 - be its attributes and its behaviors so
07:18 - what kind of attributes an employee has
07:21 - well an employee definitely has a name
07:23 - so let's put that in so i'm going to say
07:26 - std
07:28 - string
07:29 - and then name
07:30 - like this
07:31 - okay and then employee definitely has a
07:34 - company that he works for so let's add
07:36 - that as well i'm going to say std
07:39 - string
07:42 - company like this
07:45 - okay and i want to move this uh string
07:47 - i'm going to include it here so i'm
07:48 - going to say using
07:50 - std
07:52 - string
07:53 - so that i don't need to type it every
07:55 - time that i'm using string
07:57 - okay and now i can remove this
08:00 - now it looks much more readable okay so
08:02 - so far we have added a name and a
08:05 - company for our employee and let's add
08:06 - one more thing let's say that every
08:08 - employee has age so inch
08:10 - age we are going to we are going to
08:13 - represent
08:14 - age as an integer number so as you can
08:17 - see at the end of each of these
08:19 - attributes you put semicolon as well
08:22 - okay so far our employee has three
08:24 - attributes name company and age and you
08:27 - can add many more attributes here if you
08:30 - want you can add his title you can add
08:32 - his email you can add employment date
08:34 - his birth date uh and so many more but
08:37 - i'm not going to do that in this
08:39 - situation because i don't want to add a
08:41 - bunch of code that we will not be using
08:43 - because i'm going to add that code as we
08:45 - need it
08:46 - later in the program
08:48 - so this class here does not represent
08:50 - data this class here represents a
08:53 - blueprint so whenever you want to create
08:56 - an employee this class here will serve
08:59 - as a model for that employee so this
09:01 - class here will say hey your employee
09:04 - needs to have a name a company name and
09:07 - age so how do you create an instance of
09:09 - this class how do you create an object
09:11 - of this class let's show that now so how
09:14 - do you create a variable of type int for
09:16 - example well you type
09:19 - data type first so int and then you give
09:22 - the name to that variable so let's call
09:24 - it
09:24 - number
09:26 - okay and with this we have successfully
09:28 - created a variable of type int and it is
09:31 - going to be the same with the variable
09:33 - of type employee so you first specify
09:36 - the name of that type and the name is
09:38 - going to be employee so this here is
09:40 - user defined type which is called
09:43 - employee
09:45 - okay
09:46 - and then how do i want to name this
09:47 - variable let's call it employee 1
09:51 - like this
09:52 - and with this we have successfully
09:54 - created a variable of type employee this
09:57 - here is going to be an object of this
09:59 - class here so let's remove this because
10:01 - we don't need it anymore it was just for
10:04 - demonstration purposes
10:05 - so
10:06 - how do you access now these
10:09 - attributes how do you access these
10:10 - members of employee class well the
10:13 - approach would be the following you type
10:15 - the name of that
10:16 - object like this
10:19 - and then if i put dot here we should be
10:22 - able to see all of these members here
10:25 - but that is not happening so why is that
10:27 - the case well
10:29 - there is one rule that says that
10:31 - everything inside class in c plus plus
10:34 - is private by default which means that
10:37 - all of these members here are private
10:40 - and in order to be able to understand
10:42 - this and fix the problem that we have i
10:44 - need to tell you a little story about
10:46 - access modifiers so in c plus plus we
10:50 - have three access modifiers we have
10:53 - private we have public and then we have
10:55 - protected and let's explain now what
10:58 - each of these mean well
11:00 - private means that whatever is private
11:03 - in your class that is not going to be
11:05 - accessible outside of your class that is
11:08 - basically going to be hidden
11:10 - and that public means that whatever is
11:12 - public in your class you will be able to
11:15 - access that outside of your class as
11:17 - well so anyone else outside of your
11:19 - class is going to be able to access
11:21 - public members of your class and then
11:24 - protect it is somewhere in between
11:25 - private and public and it has certain
11:28 - rules to it so we will be talking more
11:30 - about protected access modifier when we
11:33 - start talking about inheritance later in
11:35 - this course so for now you need to
11:38 - remember that there are three of them
11:39 - there is private there is public and
11:41 - protected so in this particular
11:44 - situation one rule is that everything
11:48 - inside your class is private by default
11:51 - so
11:53 - this situation here is the same as if we
11:56 - wrote it like this
11:59 - okay
11:59 - this is just explicit way to say hey
12:03 - everything beneath this private access
12:06 - modifier is going to be
12:08 - private so this situation is the same as
12:12 - this situation
12:14 - now let's return our private access
12:16 - modifier and let's see how we can fix
12:17 - the problem that we have and the problem
12:19 - is that we cannot access these members
12:21 - of our employee class and we want to do
12:23 - that so
12:24 - let's try to change this private access
12:26 - modifier with a different access
12:28 - modifier let's try protected for example
12:32 - well
12:33 - if i try to access
12:36 - these members name company and age now
12:38 - if i press dot as you can see nothing is
12:41 - happening so i cannot access these name
12:43 - company names if i try to type for
12:45 - example name
12:46 - i get an error which says
12:49 - member employee name is inaccessible so
12:52 - protected is not helping as well so
12:54 - let's try the third one let's try public
12:58 - okay
12:59 - and now as you can see the error has
13:02 - disappeared and if i try to do this once
13:05 - more we have all of these members name
13:08 - company name and age we have all of them
13:11 - here they are offered to us so
13:13 - that means that by changing this access
13:16 - modifier to public we will be able to
13:19 - see all of these properties here so
13:22 - let's now set the values of these
13:25 - members let's say that the name
13:28 - of our employee will be for example
13:30 - saldina that's my name
13:33 - okay and then
13:35 - let's copy this two more times like this
13:39 - so the company
13:41 - will be
13:42 - let's say for example
13:43 - youtube and then
13:45 - code
13:46 - beauty which is my channel let's say
13:48 - that that is the company that i work for
13:50 - and then um
13:52 - age
13:54 - okay age is
13:56 - an integer variable so we are going to
13:58 - set it as an integer and age is going to
14:00 - be 25. okay so with this here we have
14:05 - created an object of type
14:08 - of type employee that object is called
14:10 - employee 1 and here we have set
14:13 - values for the properties we have set
14:15 - values for name company and age of this
14:19 - employee object here but we also said
14:22 - that we can describe behaviors as well
14:24 - so how can we describe a behavior of an
14:27 - employee let's first think of a behavior
14:29 - that an employee has
14:31 - let's say for example that he can
14:33 - introduce himself so he comes to work
14:35 - and he says hello my name is so and so i
14:38 - work for this company and i am 25 years
14:41 - old
14:42 - so how can we describe that behavior in
14:45 - this class here well
14:47 - we can describe that with a class method
14:50 - and what a class method is it is
14:52 - basically a function so we are going to
14:55 - create a function inside this class
14:58 - employee so let's do that i'm going to
15:00 - create a function
15:02 - of return type void and i'm going to
15:05 - call that function
15:06 - introduce yourself
15:12 - like this
15:14 - okay
15:14 - and then inside this function what i
15:17 - want to do is you can write hello my
15:19 - name is and then you put this name and
15:21 - then i work for this company and i am 20
15:24 - years old for example
15:26 - but i'm going to make it a little bit
15:27 - more formal so i'm going to say the
15:29 - following
15:31 - c out and then i'm going to write out
15:34 - name
15:36 - like this
15:38 - okay and then let's put name
15:42 - and
15:43 - i'm going to add endline and then i'm
15:45 - going to write out these two
15:47 - informations as well
15:49 - so company
15:52 - and then paste here company and then
15:55 - age as well
15:58 - okay
15:59 - now how can i invoke this introduce
16:02 - yourself function well the same way as
16:04 - we did here i'm going to say
16:07 - employee and then i put dot and as you
16:10 - can see this introduce yourself function
16:12 - is available here
16:14 - so let's invoke that function
16:17 - like this
16:18 - and now we should be able to test this
16:21 - so if i run my program
16:25 - okay
16:26 - as you can see here it says name salina
16:29 - company youtube code beauty and then age
16:31 - 25
16:33 - okay great and now if we needed to
16:35 - introduce our employee five times for
16:38 - example we just copy this function five
16:41 - times like this and our user is going to
16:44 - introduce himself five times and if we
16:46 - didn't have this class method here we
16:49 - would have to copy this code five times
16:52 - so each time that we want to introduce
16:54 - our user we would have to copy this code
16:57 - here
16:58 - instead of doing that we can create a
17:00 - class method which represents a behavior
17:03 - and then we can invoke that class method
17:05 - whenever we need it and if i run this
17:08 - program
17:09 - this user should introduce himself five
17:12 - times okay two three
17:15 - four
17:16 - and then oh sorry four and then five
17:19 - okay
17:21 - let's now delete
17:22 - this because i don't need it anymore
17:24 - because i want to show you something
17:26 - else so let's say that we want to create
17:29 - another employee in our program so how
17:31 - would we do that well we would use the
17:33 - same approach that we had here so
17:35 - employee the name of my class and then
17:38 - employee let's call it employee 2 which
17:41 - is going to be the name of the object
17:43 - so let's assign the values for these
17:46 - attributes for our second employee as
17:48 - well i'm going to say
17:50 - employee two
17:52 - like this
17:53 - and his name is going to be john for
17:57 - example
17:58 - like this let's copy this two more times
18:02 - so
18:02 - company
18:04 - will be amazon for example
18:07 - john works for amazon and
18:10 - he has
18:11 - uh let's say 35 years like this
18:15 - okay so now if i want to introduce john
18:18 - i'm going to say
18:20 - employee 2
18:21 - dot
18:22 - introduce yourself
18:24 - excellent so if i run this program now
18:28 - as you can see
18:29 - here is me salina youtube code beauty
18:32 - and then here is john john amazon35 okay
18:37 - now one problem that i already see here
18:39 - is this part of the code and then this
18:42 - part of the code what would happen if we
18:44 - wanted to create 10 more users or 100
18:47 - more users we would have to repeat this
18:51 - for every single user that we create and
18:53 - that is not really optimal because there
18:56 - is a better way there is a better
18:58 - approach of constructing our objects and
19:01 - in order for you to be able to
19:03 - understand this i will have to tell you
19:05 - a story about constructors so
19:08 - now you may wonder salvino what is a
19:11 - constructor well a constructor is a
19:13 - special type of method that is invoked
19:16 - each time that an object of a class is
19:21 - created so whenever you create an object
19:24 - of a class a constructor is invoked so
19:27 - does that mean that here and here as
19:30 - well a constructor is invoked the answer
19:33 - to that question is yes
19:35 - now you may wonder okay we have not
19:36 - created any constructor you must be
19:38 - lying well let me demonstrate you
19:41 - something let's comment this code here
19:44 - and now let's comment this code here as
19:46 - well
19:47 - and let's see what will happen if i run
19:50 - my program so we are not assigning any
19:53 - values to the attributes of this
19:55 - employee nor this employee here so if i
19:58 - run my program
20:00 - okay here is what happens as you can see
20:03 - this is our first user and this here is
20:05 - our second user so
20:07 - here we don't have anything and then
20:09 - here we here we also don't have anything
20:11 - and then here is a number which
20:13 - i am not going to try to read okay
20:15 - but basically this here is the work of
20:19 - default constructor so what is default
20:21 - constructor default constructor is a
20:24 - term to describe a constructor that is
20:27 - automatically generated by your compiler
20:30 - so in case that you don't create a
20:32 - constructor of your own your compiler is
20:35 - going to automatically give you a
20:37 - constructor which is called default
20:39 - constructor okay
20:41 - now let's stop this
20:43 - and let's see how we can create our own
20:45 - constructor because those values that
20:46 - you saw that is something that we cannot
20:48 - work with i mean we don't want to work
20:50 - with those values we want to use our own
20:52 - values we want to use this and this and
20:56 - then this here and for our second user
20:58 - we want to use these values here so how
21:01 - can you create a constructor of your own
21:04 - there are a few rules when it comes to
21:05 - creating constructors there are three
21:08 - rules actually so the first rule is
21:10 - following we already said that a
21:13 - constructor is just a method but unlike
21:16 - other methods a constructor does not
21:18 - have a return type so let's scroll this
21:22 - up and
21:24 - as you can see this method here
21:25 - introduce yourself this method has a
21:27 - return type of void which is nothing but
21:30 - we still have to specify that but a
21:32 - constructor will not have this at all so
21:36 - that's going to be the first rule the
21:38 - second rule is that a constructor has
21:40 - the same name as the class that it
21:42 - belongs to so the constructor of class
21:45 - employee will be called employee
21:48 - so that is the second rule the third
21:51 - rule is that constructor must be public
21:54 - now this i'm seeing as a rule at this
21:57 - level of knowledge because a constructor
21:59 - does not necessarily need to be public
22:01 - always there are certain situations
22:04 - specific situations when you would want
22:05 - to make your constructor private but at
22:08 - this level of knowledge i would advise
22:10 - you to make sure that your constructors
22:12 - are public because if you remember when
22:14 - we talked about access modifiers and
22:16 - when we said what private means
22:18 - that means that everything that is
22:20 - private is locked is hidden inside your
22:22 - class and you most definitely don't want
22:25 - to make your constructor hidden so
22:28 - uh third three rules uh the first one is
22:31 - that constructor does not have return
22:33 - type the second one is that constructor
22:36 - has the same name as the class so
22:39 - let's create
22:40 - constructor of this class here it will
22:42 - be called employee and i am going to put
22:46 - that constructor in this public area
22:50 - because if i decided for some reason to
22:52 - put this constructor
22:54 - if i decided to make this private let's
22:57 - do
22:58 - let's make this private like this as you
23:01 - can see immediately here we get an error
23:04 - so our employee one and then our
23:06 - employees too this error says employee
23:10 - constructor is inaccessible and here as
23:13 - well because we have made this
23:16 - constructor private and we cannot access
23:18 - it outside of this class here and we do
23:21 - not want to do that we want our
23:22 - constructor to be public so i'm going to
23:25 - remove this private access modifier and
23:28 - as you can see this error here has
23:30 - disappeared now
23:32 - so the job of this constructor here is
23:34 - going to be to construct the object of
23:37 - employee that means that whenever we
23:39 - create employee we want to pass these
23:42 - three values here so name company and
23:45 - age we want to pass that to our
23:47 - constructor here so we are going to
23:49 - receive that in our employee constructor
23:52 - as parameters so i'm going to say string
23:57 - name
23:58 - and then
23:59 - string
24:00 - company
24:02 - like this and int
24:05 - age
24:06 - okay
24:07 - now that we have received these three
24:09 - parameters here what i want to do with
24:11 - them is i want to assign them to these
24:14 - three properties here so i'm going to
24:16 - say
24:16 - name of my employee will be
24:19 - this name here
24:22 - like this and then company
24:25 - that our employee works in it will be
24:27 - this value here so
24:29 - company
24:31 - and then age
24:33 - like this
24:34 - will be whatever we passed as this
24:38 - parameter here okay and now if you look
24:41 - at our employee here we have an error
24:43 - again so let's check what their what
24:45 - that error is it says no default
24:48 - constructor exists for class employee
24:52 - so what this error here means it means
24:54 - that when we decided to create our own
24:57 - constructor at that moment we lost the
25:01 - default constructor that was
25:03 - automatically generated for us so when
25:06 - you decide to create your own
25:08 - constructor you are going to lose that
25:10 - default constructor and you can fix that
25:12 - by either making your own default
25:14 - constructor or by
25:16 - providing here these three values that
25:20 - we have specified that our constructor
25:22 - is going to receive so let's do that
25:24 - let's provide here name company name and
25:28 - age so how do we do that well
25:30 - let me show you how we can use this
25:32 - constructor here so in this line i'm
25:36 - going to say
25:37 - that my employee 1 is going to be equal
25:39 - to
25:40 - and i'm going to invoke this constructor
25:43 - basically so i'm going to say
25:46 - hey i am invoking this constructor here
25:49 - and here it expects to receive argument
25:52 - list what is argument list it is these
25:55 - three parameters so name company and age
25:58 - so here i'm going to pass name
26:01 - which is
26:02 - salvina
26:04 - and then company is going to be
26:06 - this company here so youtube code beauty
26:08 - i'm going to copy that
26:10 - and then
26:11 - age is going to be 25
26:14 - okay so with this we have successfully
26:17 - constructed our employee one object
26:20 - which means that i can delete this code
26:23 - here and then if we do this same for our
26:27 - employee tool we will be able to delete
26:29 - this code here as well so let's do that
26:32 - i'm going to say
26:33 - employee
26:35 - and then here i want to pass these three
26:38 - values so name is john
26:43 - okay and then company is
26:45 - amazon
26:48 - like this and then age is 35.
26:52 - excellent
26:53 - so i am able to delete this as well
26:57 - and let's
26:58 - check what is going to happen if i run
27:01 - my program i'm just going to format this
27:04 - so if i run my program nothing should
27:06 - change i should still be able to
27:08 - introduce this user and then this user
27:11 - as well so let's do that let's run our
27:13 - program
27:15 - okay
27:16 - and as you can see selena youtube code
27:19 - beauty and then 25 john amazon 35.
27:23 - so now we have managed to reduce the
27:25 - code that we had in our main function to
27:28 - only two lines per employee so
27:31 - the first line is to construct that
27:33 - object and then second line is to
27:35 - introduce that user and we have managed
27:37 - to do that with our employee constructor
27:40 - which is now doing that work of
27:42 - constructing the object based on based
27:44 - on the parameters that we passed to that
27:46 - constructor that constructor receives
27:48 - those parameters here and then it
27:51 - constructs the object here it
27:52 - initializes the values of that object
27:55 - and then in our introduce yourself
27:57 - function whatever we invoke that
27:59 - function for an object of an employee
28:02 - that function is going to do this code
28:04 - here so it is going to basically
28:06 - introduce that employee so
28:09 - i hope that this part so far was
28:11 - understandable for you because here i'm
28:13 - going to take a quick break and i'm
28:15 - going to pause the video and then i
28:17 - might be back in a couple of minutes or
28:18 - in a couple of hours or even in a couple
28:20 - of days but that is going to be just a
28:22 - couple of seconds for you and i want to
28:25 - make a transition that i never did on my
28:28 - channel i never did this on code beauty
28:29 - but i'm going to do it here and that is
28:31 - this transition here
28:35 - hello and welcome back
28:38 - and let's continue talking about object
28:40 - oriented programming but before i
28:42 - continue i want to make a quick summary
28:44 - of the things that we have learned so
28:46 - far in this course so first i have
28:49 - explained what is object-oriented
28:50 - programming and what is the main idea
28:52 - behind object-oriented paradigm
28:55 - and then i have explained what our
28:56 - classes and what our objects and how you
28:59 - can use those classes and objects in
29:01 - order to represent real life entities
29:05 - together with their attributes and their
29:07 - methods in your programs describe them
29:09 - to your computer
29:11 - and then we also talked about access
29:13 - modifiers so private public and
29:16 - protected
29:17 - and then we have seen what our
29:19 - constructors and how you can create and
29:22 - use constructors and now the time has
29:25 - come to talk about
29:26 - four most important principles four
29:29 - pillars for most important concepts of
29:31 - object-oriented programming and those
29:34 - are encapsulation abstraction
29:36 - inheritance and polymorphism
29:39 - so the first one that i want to talk
29:40 - about is encapsulation so what is
29:43 - encapsulation the idea of encapsulation
29:46 - is idea of
29:48 - bundling or tying together data and
29:51 - methods that operate on that data so
29:53 - that they are grouped together within a
29:56 - class
29:56 - and why do we do this well we do this
29:59 - with the purpose of preventing anyone or
30:02 - anything outside of our class to be able
30:05 - to directly access our data and to
30:07 - interact with it and to modify it
30:10 - so
30:11 - i am not saying that we don't want
30:12 - anyone to access our data at all i'm
30:15 - just saying that i don't want that to
30:17 - happen directly i don't want that other
30:19 - class to be able to directly modify and
30:22 - change and interact with my data because
30:25 - i want to provide my own way for that to
30:28 - happen so how do i do that how do i
30:30 - provide a way for other classes to
30:33 - interact with the properties of my class
30:35 - well i provide very specific public
30:38 - functions that that other class can
30:41 - invoke and in that way interact with my
30:43 - data so again how do you access
30:46 - encapsulated properties of a class the
30:49 - answer is through its methods
30:52 - and these methods are very often
30:55 - implemented as getters and setters so
30:58 - now i'm going to show you in code how
31:00 - those getters and setters look like and
31:02 - how we can modify this program that i
31:05 - have here so that we obey that rule of
31:08 - encapsulation
31:10 - so the first thing that i want to do
31:11 - here in this program is
31:14 - i want to make these three properties i
31:17 - want to make them private so i want to
31:19 - encapsulate these three properties hide
31:21 - them within this class so let's do that
31:25 - here i'm going to put private
31:28 - modifier
31:30 - so
31:31 - this here is private access modifier and
31:33 - we don't actually have to write this
31:35 - because everything that does not have a
31:38 - modifier at all in c plus plus is
31:40 - private by default within a class but i
31:42 - just find it more readable if i do it
31:44 - this way so now here in this private
31:47 - area i am going to move these three
31:49 - properties
31:51 - okay and then paste them here
31:54 - like this
31:55 - and now we have hidden these three
31:58 - properties within this class
32:00 - called employee which means that now we
32:02 - will not be able to access these three
32:05 - properties anymore outside of our class
32:07 - let me just collapse this and let me
32:09 - prove you what i just said okay so if i
32:13 - try to access name or company or age
32:16 - on my employee object i should not be
32:18 - able to do that now so if i type
32:22 - employee
32:23 - 1 for example and then i type this dot
32:26 - you can see that the only thing that we
32:28 - can access is this introduce your
32:30 - introduce yourself method which is this
32:33 - one here and that is the only thing that
32:35 - is public besides this constructor here
32:38 - so
32:39 - how can we access these properties then
32:41 - well as i said we have to expose our own
32:44 - methods which are going to be public and
32:47 - then by using those methods other
32:49 - classes and other users will be able to
32:52 - interact with this data here with these
32:55 - three properties
32:56 - so let's create getters and setters for
32:58 - these three properties let's first do it
33:01 - for for our name property so i'm going
33:04 - to do it here
33:05 - uh let's say void
33:08 - set name
33:10 - and then what this method what this
33:12 - function is going to receive
33:14 - well that is going to be a string
33:18 - name okay string
33:21 - like this
33:22 - and then once this function receives
33:25 - this parameter called name what i want
33:27 - to do with this is i want to assign this
33:29 - value to this property here so i'm going
33:31 - to say name is equal to
33:34 - name
33:35 - okay
33:36 - and then i want to create so this here
33:38 - is a setter and then i want to create a
33:40 - getter method as well so i am going to
33:42 - say string
33:44 - get name
33:46 - like this and then here i'm just going
33:48 - to say return
33:52 - name
33:53 - okay
33:54 - now this method here receives one
33:56 - parameter which is called name and then
33:59 - it sets the value of our property which
34:02 - is encapsulated which is this one here
34:04 - to that value that we have received in
34:07 - this setter and then this method here
34:10 - get name that method is going to return
34:13 - the value of our name property that is
34:15 - also encapsulated and that value is
34:18 - going to be returned to whoever invokes
34:20 - this method and because these two
34:23 - methods are public anyone outside of our
34:26 - class is going to be able to invoke set
34:28 - name and get name so
34:30 - these
34:31 - are examples of setter and getter and
34:34 - now i'm going to do the same for our
34:35 - company property and age property and i
34:37 - will be back to show you that code in a
34:40 - moment
34:41 - so i have created getters and setters
34:44 - for our
34:45 - name property here so this is sether
34:47 - this is getter for our name property and
34:48 - then here is a setter for our company
34:51 - and then getter for company property and
34:53 - then here are
34:54 - setter and getter methods for age and
34:58 - now because these methods here are
35:01 - public everyone outside of our class
35:03 - should be able to access these methods
35:05 - whereas these three properties are now
35:08 - encapsulated which means that they are
35:10 - private they are hidden within this
35:12 - class and no one else besides members of
35:16 - this class here are going to be able to
35:18 - access them directly so let's test now
35:21 - these getters and setters in our main
35:24 - function
35:25 - okay so let's say that employee 1
35:28 - and let's say set age and i'm going to
35:31 - say for example that my employee 1 now
35:33 - has
35:35 - let's say
35:36 - 39 years for example
35:39 - okay
35:40 - and in order to test these
35:43 - gutters i'm going to say for example std
35:46 - c out
35:48 - and then let's say
35:49 - employee
35:51 - 1
35:52 - dot get name okay so our getter should
35:56 - work
35:57 - like this and then let's say employee
36:00 - one is
36:02 - and i'm going to test if this value has
36:04 - been applied successfully so i'm going
36:06 - to say
36:08 - employee one oh what is this
36:11 - employee one dot get age
36:15 - okay
36:17 - and here i want to say
36:20 - employee one is
36:22 - 39
36:23 - years
36:25 - old like this
36:31 - okay
36:33 - and now if i run this program we should
36:36 - get the result of this line here and we
36:38 - should be able to see if our getters and
36:40 - setters work as they should
36:42 - so let's run our program
36:46 - okay
36:47 - and now this last line of code here
36:50 - says salina is 39 years old okay so i
36:54 - shouldn't have done this for myself i
36:55 - should have done this for john for
36:57 - example
36:58 - so i'm going to close this program and
37:00 - as you could see these get name and get
37:03 - age and also
37:05 - get company and then set their methods
37:07 - as well are now public whereas the
37:09 - properties that they are hiding are
37:11 - hidden within the class and they are
37:13 - encapsulated so the only way to access
37:16 - these three properties is going to be
37:17 - using these methods now what we can do
37:20 - with these methods is we can provide
37:22 - special rules to interact with this data
37:25 - here for example let's say that employee
37:29 - cannot be anyone who is not older than
37:32 - 18 years old so here when actually here
37:36 - when i'm trying to set the age of our
37:38 - employee i'm going to add a check
37:41 - so i'm going to add a validation rule
37:44 - and i will say if
37:46 - age
37:47 - age this age that i have received in my
37:50 - setter
37:51 - is
37:52 - greater than 18 years old or actually
37:55 - greater
37:56 - or equal to than 18 because person that
37:58 - has 18 years old is of age
38:01 - only in the case that this property here
38:03 - is greater than 18 years old only then i
38:06 - am going to assign that to my age
38:08 - property here in the case that our user
38:11 - anyone else decides to assign value
38:13 - which is less than 18 so 17 or 15 or 10
38:16 - or whatever i am not going to apply
38:19 - those changes so let's test this also
38:24 - here instead of setting age to 39 i'm
38:27 - going to say that salina now is 15
38:30 - so
38:31 - let's test those changes
38:34 - okay and now as you can see it says
38:36 - selena is 25 years old why
38:39 - because this set age method here says
38:41 - that only valid age is 18 or greater
38:45 - than 18 and only in that case those
38:47 - changes are going to be applied okay so
38:50 - you can apply certain validation rules
38:52 - to your setter methods and then i'm
38:55 - going to leave to you to apply certain
38:57 - validation rules to your set company
38:59 - name and then set employee name this
39:02 - property here
39:04 - so you can do that as a homework you can
39:07 - decide if you want to allow only letters
39:10 - or you want to allow also numbers and
39:12 - special characters as the name for your
39:14 - employee and then as the name for your
39:16 - company okay so once more the idea of
39:19 - encapsulation is to make this let me
39:21 - close this
39:22 - so the idea of encapsulation is to make
39:25 - these properties private and then
39:28 - whoever wants to access these properties
39:30 - outside of this class will have to go
39:33 - through the methods that you expose that
39:36 - do have access to your private
39:39 - properties okay so let's collapse this
39:43 - and
39:44 - here are those six getters and setters
39:47 - for these three properties here
39:50 - the second principle that i want to talk
39:52 - about is called abstraction what is
39:55 - abstraction
39:56 - abstraction means hiding complex things
39:59 - behind a procedure that makes those
40:01 - things look simple
40:04 - so in order to explain this let's use an
40:06 - everyday life example let's use the
40:09 - example of your smartphone so
40:12 - one of the main characteristics that
40:13 - smartphones have these days is that they
40:15 - can take pictures so how does that
40:18 - procedure of taking a picture looks like
40:20 - well it's pretty simple at least on your
40:22 - side you just press a button and you
40:24 - have taken a picture where you press a
40:26 - button and then you make a call or you
40:29 - send a message but
40:31 - that is not really that simple because
40:34 - for you it is just a button click but
40:36 - for the company that makes those
40:37 - smartphones there is much more complex
40:40 - logic that they need to implement in
40:43 - order for you to be able to press a
40:45 - button and then take a picture
40:48 - so
40:48 - there is some sort of interface between
40:52 - you
40:52 - and then that company that produces
40:54 - those smartphones so on your side
40:56 - everything is pretty simple and easy you
40:58 - just press a button and you make a call
41:00 - you press a button and you send a
41:02 - message but then all of that complexity
41:05 - behind those functionalities is hidden
41:07 - from you and that complexity is on the
41:10 - side of the company that produces those
41:12 - smartphones
41:14 - now
41:15 - all of this complexity that is hidden
41:16 - from you you don't actually need to know
41:18 - anything about this in order to be able
41:20 - to use this site here in order to be
41:23 - able to make calls and send messages and
41:25 - take pictures
41:27 - so what happens if another company comes
41:30 - and they decide that they want to
41:31 - produce smartphones as well what they
41:34 - have to do is they have to sign this
41:36 - contract here they have to provide you
41:39 - as a user with this nice and beautiful
41:42 - and clean and simple interface so that
41:44 - you are able to press a button and take
41:46 - a picture and then they have to take
41:49 - care on their side to implement all of
41:52 - that complex logic which is hidden from
41:55 - you because if they decide to show you
41:57 - that
41:58 - ugly side that complex side chances are
42:01 - that no one is going to want to use
42:02 - their smartphones at all and even if
42:05 - someone decides that they do want to use
42:07 - their smartphones they will probably not
42:10 - understand this complex logic well so
42:12 - that they will so they will make
42:14 - mistakes and they will use those
42:15 - smartphones in wrong ways
42:18 - so this process of hiding that
42:20 - complexity from you as a user is called
42:24 - abstraction and in that way this very
42:26 - very complex system is hidden and this
42:29 - system here is represented as very
42:32 - simple system by this contract so let's
42:36 - see how we can implement this contract
42:38 - here that makes one side look simple and
42:41 - then other side very complex let's
42:43 - implement that on the code and example
42:45 - that we have here in our visual studio
42:47 - so let's take a look at this employee
42:49 - class here
42:51 - what kind of functionality complex
42:53 - functionality can we implement on this
42:55 - class here
42:56 - let's say for example that every
42:58 - employee can ask for promotion so he
43:01 - goes to his boss and he says hey boss
43:04 - can i get a promotion
43:06 - and then his boss needs to go through
43:08 - this very complex thought process in
43:10 - order to decide if this person deserves
43:13 - a promotion or not
43:16 - so his boss needs to consider many
43:18 - things he needs to consider consider for
43:20 - example how long this person has been
43:23 - working for the company how much
43:24 - knowledge this person has
43:26 - and then what kind of relationship this
43:28 - person has with their colleagues how
43:30 - much this person is contributing to the
43:31 - company um and then is this person
43:34 - always late for work are they breaking
43:36 - deadlines and many many more things
43:39 - so how about abstracting that
43:42 - functionality and in this situation we
43:45 - are doing that for another developer
43:47 - that is going to use our class so here
43:49 - in this situation
43:51 - we are the ones who are making this
43:54 - class so we are producing that
43:56 - smartphone so we are the ones who should
43:58 - provide that complex logic for those
44:01 - functionalities that are complex and
44:03 - then we should provide that simple and
44:06 - basic interface for anyone who wants to
44:09 - use this class here
44:11 - so how do you do that how do you create
44:14 - that contract
44:16 - well the answer is by using abstract
44:19 - classes
44:20 - for those of you who are coming from c
44:22 - sharp or java world there is already
44:25 - this concept of interface that some of
44:27 - you might be familiar with and in c plus
44:29 - plus you can simulate behavior of
44:32 - interface by using abstract class so
44:36 - let's create an abstract class
44:39 - so here on the top i am going to create
44:42 - a class and let's create a class
44:45 - called abstract employee
44:51 - like this or you can call it
44:54 - i employee if you want
44:56 - so this class here is going to serve as
44:59 - a contract and this contract will have
45:02 - only one rule and that rule is that
45:05 - whichever class decides to sign this
45:08 - contract that class will need to provide
45:11 - implementation for a method called ask
45:13 - for promotion so a method
45:16 - of return type void called
45:18 - ask
45:20 - for promotion
45:24 - like this
45:26 - and we are also going to make this
45:29 - obligatory which means that we will
45:31 - force any class that signs this contract
45:34 - here to implement this method here so
45:37 - how can we make this obligatory the
45:39 - answer is by making this function here a
45:42 - pure virtual function so i'm going to
45:45 - say here
45:47 - virtual
45:50 - and then
45:51 - here i'm going to say is equal to
45:54 - zero
45:55 - and now this class here has become an
45:58 - abstract class and this method here this
46:01 - function is pure virtual function or an
46:05 - abstract function and this means that
46:08 - whoever decides to sign this contract
46:10 - called
46:13 - that abstractemployee.com
46:14 - that signs this contract will have to
46:16 - provide implementation for this method
46:19 - here
46:20 - so now the question is how can my class
46:22 - my employee class sign this contract
46:25 - here the answer is pretty simple you add
46:28 - here column sign and then you specify
46:31 - the name of your contract which is
46:33 - abstract employee
46:35 - like this
46:37 - okay
46:38 - and now my class has successfully signed
46:40 - this contract and immediately if you
46:43 - could notice these two red dots that
46:45 - appeared below
46:47 - if we hover over these errors because
46:49 - these are errors you can see that it
46:51 - says
46:52 - pure virtual function abstract employee
46:55 - ask for promotion has no overrider which
46:59 - means hey you signed this contract here
47:02 - but you are not obeying the rules of
47:04 - that contract you are not providing
47:06 - implementation for this function here
47:09 - so in order to avoid these errors and
47:12 - fix these errors that we have now what
47:14 - we have to do is we have to provide
47:16 - implementation for this method here so
47:19 - let's do that
47:21 - okay i am going to copy it here and then
47:24 - i will come here
47:26 - and paste it
47:28 - and here in these curly brackets we are
47:30 - going to implement that method but as
47:32 - you could see immediately the errors
47:34 - that we had below
47:36 - have disappeared so here inside this
47:39 - class i want to provide logic for ask
47:42 - for promotion method so once more we
47:45 - said that that logic is pretty complex
47:47 - and that we should take in consideration
47:49 - many things so things like how long that
47:52 - person has been working for a company
47:54 - how much that person is contributing to
47:56 - the company what kind of relationship
47:57 - they have with their colleagues and so
47:59 - on but considering that we don't have
48:02 - all of that information what i'm going
48:04 - to do is i'm going to make it a little
48:05 - bit more simple so i'm going to say for
48:08 - example any employee that is older than
48:12 - 30 years old can get a promotion for
48:14 - example so i'm going to say here if
48:18 - age
48:19 - is greater than 30.
48:22 - i will do the following i will say std
48:25 - see out
48:27 - and then let's write the name of this
48:29 - employee i'm going to say name
48:32 - and i'm going to say got promoted
48:37 - like this
48:39 - okay
48:42 - excellent and then
48:44 - in the else case so in the case that
48:46 - person has less than 30 years i'm going
48:48 - to write something else so i'm going to
48:51 - deny that promotion to the person who is
48:53 - younger than 30. so i'm going to say
48:56 - name and then
48:58 - let's write out
48:59 - sorry
49:00 - no promotion for you
49:05 - okay
49:06 - excellent
49:07 - and now let's test this method here so
49:11 - i'm going to go to my main function and
49:14 - i will delete all of this code here
49:19 - okay
49:21 - and now i want to test this method here
49:23 - on my employee 1 and employee 2 so that
49:26 - i see if any of them can get promotion
49:29 - so let's say employee
49:31 - one dot ask for promotion
49:35 - and then
49:36 - employee two
49:38 - dot ask for promotion as well
49:41 - and if i run my program
49:45 - it says
49:46 - salinas sorry no promotion for you and
49:48 - then john got promoted
49:51 - and why that happened because let me
49:54 - close this because salina is 25 and then
49:58 - john is 35 and this rule here says that
50:01 - whoever is older than 30 which is john
50:04 - he gets promoted and then if that person
50:07 - is younger than 30 that person is not
50:10 - going to be promoted
50:12 - okay
50:13 - so with this we have accomplished the
50:15 - following we have implemented a contract
50:18 - which is actually an abstract class and
50:21 - that abstract class or that contract has
50:24 - only one rule and that rule is this pure
50:28 - virtual function here which is called
50:30 - ask for promotion so that means that
50:34 - whichever class signs this contract
50:36 - whichever class
50:38 - inherits from this abstract employee
50:41 - which is this class here that class will
50:44 - have to provide implementation for this
50:47 - method here so ask for promotion so
50:51 - in this situation our employee is
50:53 - inheriting from our abstract employees
50:55 - so our employee class is signing that
50:58 - contract
50:59 - which means that that class needs to
51:01 - provide implementation for the method
51:03 - that is
51:05 - in that contract
51:06 - okay now what this allows us to do when
51:09 - another developer comes to our code and
51:12 - wants to use our employee class that
51:15 - developer will see this contract here
51:17 - and he will say oh so this employee
51:19 - class has method which is called ask for
51:22 - promotion
51:23 - so that means that if i use employee
51:26 - class i can invoke this method here and
51:29 - i don't need to worry about complexity
51:31 - of this method i don't need to worry
51:33 - about how this promotion is given or
51:36 - rejected
51:38 - because that is the worry of the person
51:40 - who implemented this class here so that
51:44 - is the worry of the person who is going
51:46 - to sign this contract and in this
51:48 - situation we are that person we are the
51:50 - person who is producing that smartphone
51:52 - we are the person who is writing this
51:54 - class and this class is signing the
51:57 - contract which means that we have to
52:00 - provide implementation for this method
52:03 - here as we did in this situation and we
52:06 - tested it and as you could see i didn't
52:09 - get promotion and john did so that is
52:12 - the idea of abstraction and this ask for
52:15 - promotion method is just that button
52:18 - that we mentioned a button on your
52:20 - smartphone from the beginning of this
52:22 - chapter
52:23 - the third principle of object oriented
52:25 - programming that i want to talk about is
52:27 - called inheritance the idea of
52:30 - inheritance is the following
52:32 - so there is this base class also known
52:35 - as super class or parent class and then
52:38 - there is derived class also known as
52:41 - child class or subclass
52:44 - now this base class here this parent
52:46 - class has certain attributes and
52:49 - behaviors it has members and then if
52:52 - this class here decides to inherit from
52:55 - the base class at that moment this class
52:58 - becomes a child class and by that this
53:02 - class is going to obtain
53:04 - all of the members of this base class
53:06 - here which means this class is going to
53:09 - have all the same attributes and
53:12 - behaviors as its base class
53:15 - and then this derived class can also
53:18 - have its own members that are specific
53:20 - for that class only which this class
53:23 - here does not have so in order to
53:26 - explain this let's use an example that
53:29 - is going to be familiar to you let's
53:32 - let's return to the example of a car
53:34 - that i used in the beginning of this
53:36 - video so
53:38 - a car as a class is going to have
53:41 - certain attributes for example a name a
53:44 - model price a color
53:46 - and so on and then it is going to have
53:49 - behaviors as well for example it has a
53:51 - method called drive now
53:54 - what kind of derived classes can we
53:56 - create from this base class what kind of
53:59 - classes are more specific so what kind
54:02 - of car types are more specific than just
54:05 - car
54:07 - let's say for example that we are going
54:08 - to have one derived class that is called
54:11 - electric car and then another derived
54:13 - class which is called conventional car
54:16 - or gas car
54:17 - now this electric car is also going to
54:20 - have all the same properties that a car
54:22 - has so it is going to have um it is
54:25 - going to have a name a model a color a
54:27 - price and then it is going to have a
54:29 - method called drive and then this
54:31 - conventional car is also going to have
54:33 - all those same properties but they are
54:36 - going to be different between them this
54:38 - car for example is going to have a
54:40 - method called charge because this is
54:43 - electric car and we need to use
54:45 - electricity to charge it and then it is
54:47 - going to have an attribute called for
54:49 - example battery status and then this car
54:52 - which is gas car conventional car is
54:55 - going to have a method called think
54:58 - which means a method of putting fuel in
55:00 - that car and then it is going to have a
55:03 - property an attribute which is named
55:06 - tank status which shows you how much how
55:08 - much gas do you have left in your tank
55:11 - so each one of these derived classes is
55:13 - going to have their specific attributes
55:15 - but they will also inherit all of those
55:18 - attributes that their base class has so
55:22 - now let's see how we can implement that
55:24 - on the example that we have here so here
55:27 - i have class called employee and what i
55:30 - want to do is i want to create a derived
55:32 - class for this class here so what kind
55:35 - of class can inherit from employee class
55:38 - logically what is more specific type of
55:41 - employee
55:42 - let's say for example that we want to
55:45 - create a class called developer so let's
55:47 - do that
55:48 - here i'm going to say class
55:51 - and then let's call this class developer
55:56 - like this
55:57 - okay so with this we have created a
56:00 - class called developer and now what i
56:02 - want to do is i want to make this class
56:05 - inherit from this class here so how do
56:07 - you do that the answer is pretty simple
56:10 - you put column sign here and then you
56:13 - specify the name of your base class and
56:15 - the name is employee
56:18 - so
56:19 - with this
56:20 - a few things happened this class here
56:23 - developer became a child class which
56:26 - means a subclass or divide or derived
56:29 - class and then this class here employee
56:32 - is now called base class or super class
56:35 - or parent class
56:37 - and also another thing that happened is
56:39 - that this developer class here now has
56:43 - all of these properties
56:45 - and then these ones here as well that
56:47 - our employee class has so developer has
56:52 - all of the properties that employee has
56:54 - and then let's create one more property
56:55 - that is going to be specific for
56:57 - developer only so i'm going to make that
57:00 - property public
57:01 - so here i'm not obeying the rules of
57:03 - encapsulation you can do that for
57:05 - homework for example
57:06 - so let's create a property that only
57:09 - developer has but employee does not
57:13 - that is going to be for example favorite
57:15 - programming language developer has
57:17 - favorite programming language but an
57:19 - employee does not necessarily have to be
57:20 - a developer so he does not necessarily
57:23 - need to have a favorite programming
57:25 - language so i'm going to say string
57:28 - favorite
57:30 - programming
57:32 - language
57:35 - like this
57:36 - i hope that i didn't make a typo here so
57:40 - now let's check if everything that i
57:42 - said is correct so if this developer
57:46 - indeed has access to
57:48 - all the properties that our employee has
57:50 - and then to this one here which is
57:53 - specific for developer only so let's
57:56 - delete this code here
57:58 - and then i want to create an object of
58:01 - class developer so i'm going to say
58:03 - developer
58:06 - and let's call that object d
58:09 - like this
58:10 - okay and the first thing that happens is
58:12 - we get an error and it says
58:16 - okay
58:17 - it says
58:18 - default constructor of developer cannot
58:20 - be referenced so
58:22 - this error here is happening obviously
58:25 - because we don't have a default
58:26 - constructor and if you remember when we
58:28 - were talking about constructors we said
58:30 - that every class when you create it
58:33 - every class has automatically generated
58:36 - default constructor but once you decide
58:39 - to create your own constructor you lose
58:41 - that default constructor so now you may
58:44 - ask well selena we have not created
58:47 - constructor for this developer class and
58:49 - i'm going to say you're right but
58:52 - we have inherited from employee class
58:55 - and that employee class has a
58:57 - constructor that we created so that
58:59 - means that we need to provide a
59:01 - constructor for the derived classes of
59:04 - employee class which is our developer
59:07 - class so now what i'm going to do is i'm
59:10 - going to create a constructor for
59:11 - developer class so
59:14 - if you remember three rules of creating
59:16 - constructors first rule is
59:18 - that it does not have return type second
59:20 - rule is that it has the same name as the
59:23 - class and then third rule is that it
59:26 - needs to be public so i'm going to call
59:29 - this constructor developer
59:32 - like this
59:33 - oh sorry
59:36 - and then i need to put these curly
59:37 - brackets here
59:39 - okay so
59:40 - now the job of this constructor here is
59:42 - going to be to construct developer
59:44 - object and considering that this
59:46 - developer object inherited from employee
59:49 - class that means that developer has
59:52 - these properties so these attributes and
59:55 - then this one which is specific for only
59:58 - developer class so now we have to
60:01 - provide this constructor with those
60:04 - parameters so i'm going to copy these
60:06 - three here because i already have them
60:09 - and then paste them here and then i will
60:11 - add this parameter which is specific for
60:14 - developer class so i will say string
60:18 - string
60:19 - language
60:21 - like this so this is favorite
60:23 - programming language or actually let's
60:25 - call it favorite programming language so
60:28 - that we are consistent
60:30 - okay
60:31 - now once we have passed these four
60:35 - parameters to our developer constructor
60:38 - what we have to do is we have to
60:39 - initialize
60:41 - this attribute here and then these three
60:43 - attributes here because those are
60:45 - attributes that our developer class has
60:48 - but one thing that i want to show you is
60:49 - following considering that this
60:52 - developer class is inheriting from
60:54 - employee class and that employee class
60:57 - has a constructor of its own which is
60:59 - this one here that constructor already
61:01 - knows how to construct name and company
61:04 - at age so that means that we don't have
61:07 - to worry about these three properties in
61:09 - our developer class we should only worry
61:12 - about a specific properties of our
61:14 - developer class and these three
61:16 - properties that actually belong to our
61:18 - employee we can pass these three to our
61:20 - employee constructor so i'm going to do
61:23 - that
61:24 - like this
61:25 - here so after this parentheses you put a
61:29 - column sign and then you specify the
61:32 - name of that constructor so employee
61:36 - so the name of your base class and then
61:40 - here i will pass these parameters that
61:43 - our base class constructor receives so
61:46 - name and then
61:48 - company
61:49 - and age
61:52 - okay
61:53 - so now this constructor the constructor
61:56 - of our base class is going to take care
61:57 - of these three properties and we are
62:00 - left with this property here which is
62:02 - specific for our developer class so here
62:05 - i want to initialize our favorite
62:08 - language
62:10 - property so i'm going to say that
62:12 - favorite language is equal to whatever
62:14 - has been passed to this constructor
62:18 - okay
62:19 - now if i go down there to my main
62:22 - function where i tried to create my
62:24 - developer
62:25 - let's try to construct an object of type
62:28 - developer let's try to invoke this
62:30 - constructor here like we did in this
62:32 - line here and then in this line here for
62:34 - our employee so i'm going to say that a
62:37 - developer is going to be equal to
62:40 - developer
62:41 - and then here i want to pass values for
62:45 - this constructor here so those are name
62:47 - and company name and age and favorite
62:49 - programming language so let's call this
62:52 - developer also salvina i'm going to
62:54 - delete these two because we will not
62:56 - need them anymore
62:58 - okay
62:59 - and then
63:00 - let's
63:01 - say that i work for youtube code beauty
63:06 - and then i am 25 years old and my
63:09 - favorite programming language is c plus
63:12 - plus for example
63:15 - so now that i have successfully created
63:17 - an object for developer class let's test
63:19 - this
63:20 - so how am i going to test this well
63:23 - let's create a method on our developer
63:25 - class that is going to use some of these
63:28 - values here so that we can know if these
63:30 - values have indeed been set successfully
63:33 - so
63:34 - what kind of method can we implement on
63:36 - developer class
63:37 - for example we can implement a method
63:39 - called fix bug so i'm going to do that
63:42 - let's collapse this constructor and
63:44 - let's say here void
63:47 - fix
63:48 - bug
63:50 - and then what i want this method here to
63:52 - do is i wanted to say
63:54 - selena is fixing bug using c plus or
63:58 - selena fixed but using c plus plus so
64:01 - here i'm going to do that i'm going to
64:03 - say std
64:05 - c out and then in order to access the
64:08 - name of this employee i'm going to use
64:10 - getter so i'm going to say get name
64:13 - which we created previously
64:15 - and then here i'm going to say
64:17 - fixed
64:19 - bug
64:20 - using
64:22 - and then let's use this programming
64:25 - language here
64:29 - like this
64:31 - okay and now if i want to test this
64:34 - method here i can invoke it on my
64:36 - developer class so i'm going to say d
64:38 - dot fix
64:39 - bug
64:40 - and if i run my program
64:43 - as you can see
64:44 - this method here works and then the
64:47 - values that we passed in our constructor
64:49 - have successfully been set so here it
64:51 - says selena and then fixed bug using and
64:53 - then here is my favorite programming
64:55 - language
64:56 - okay
64:57 - let's close this
64:58 - and now there is one more thing that i
65:00 - want to show you and that is this part
65:02 - here so i want you to notice
65:05 - that this here
65:06 - is the way that we are using in order to
65:09 - access properties of our employee class
65:12 - and then we are accessing directly
65:14 - properties of our developer class so
65:18 - can i access properties of my employee
65:21 - class directly can i access
65:24 - this property here for example name or
65:27 - do i have to access it by using getter
65:30 - write me your answers in the comments
65:31 - down below
65:33 - so i am going to test that now here i'm
65:35 - going to save
65:37 - name
65:38 - and we get an error it says
65:41 - employee name is inaccessible so we
65:44 - cannot access this property here name
65:48 - which is the property of our employee
65:50 - class
65:51 - why
65:52 - well if you remember when we were
65:54 - talking about access modifiers we said
65:56 - that
65:57 - whatever is private that is going to be
65:59 - locked hidden that is going to be
66:01 - accessible only inside that class and
66:05 - then whatever is public we will be able
66:07 - to access that outside of the class so
66:10 - how can i make this property here how
66:13 - can i make this name accessible in the
66:16 - derived classes of this class here
66:18 - again when we were talking about access
66:21 - modifiers we said that there are three
66:23 - of them
66:24 - public private and protected and i
66:27 - promised you that i am going to explain
66:29 - what this
66:30 - what protected access modifier means so
66:34 - in this situation if we make this
66:36 - property here if we make this name
66:38 - property protected that will make name
66:41 - available in derived classes of this
66:44 - employee class here so
66:46 - i am going to say protected
66:50 - like this
66:51 - and then i'm going to take this property
66:54 - and i will move it to my protected area
66:57 - and then if i return to my developer
67:00 - class as you can see the error that we
67:03 - previously had is now gone so now this
67:07 - name property is accessible directly
67:10 - from this derived class here and if i
67:13 - run the program it should work the same
67:15 - as it did
67:17 - and as you can see it indeed works the
67:19 - same so selena fixed bug using c plus
67:22 - okay now there is one more very
67:25 - important thing related to inheritance
67:27 - that i want to show you and that is the
67:29 - following
67:30 - let's say for example that this
67:31 - developer here fixes a lot of bugs
67:34 - so if i run my program you can see that
67:37 - salvina indeed is fixing a lot of bugs
67:40 - so
67:41 - what this developer here decides then is
67:44 - he or she in this situation she decides
67:46 - to ask for promotion so i'm going to try
67:50 - to do that now i'm going to say d dot
67:53 - but if you look at the list that i have
67:56 - here it only has the access to favorite
67:58 - programming language and then fix bug so
68:02 - if you look at this you can see that i
68:03 - don't have access to the other
68:05 - properties that i have inherited from my
68:08 - employee class i do have access to them
68:11 - here so if i try to invoke them in this
68:14 - method here so if i say here for example
68:17 - ask for promotion as you can see i do
68:20 - have access to them here but as you
68:23 - could see on my developer object i
68:25 - cannot access those properties so how
68:29 - can i fix that problem well the answer
68:31 - is pretty simple
68:33 - this inheritance here so this part of
68:35 - the code here this inheritance is
68:38 - private by default and in order to fix
68:40 - the problem that we have we need to make
68:42 - it public so here i'm going to say
68:45 - public
68:47 - and the problem should disappear so if i
68:50 - return to my developer object now and if
68:52 - i try to ask for promotion as you can
68:55 - see that method is available so
68:58 - maybe i'll get a promotion this time
69:00 - let's test this
69:03 - and unfortunately i am not getting a
69:05 - promotion but at least my code is
69:07 - working so now we have access to this
69:11 - method here which is implemented in my
69:13 - employee class so in my base class and
69:16 - we have achieved that by making this
69:19 - inheritance public
69:21 - so while we are talking about
69:22 - inheritance let's create one more class
69:25 - that is going to inherit from this
69:27 - employee class so let's create one more
69:30 - derived class besides this developer so
69:33 - what kind of class can inherit from
69:36 - employee what is more specific class
69:39 - than employee for example let's create a
69:42 - class called teacher so here i'm going
69:45 - to go one more time through this process
69:47 - of creating derived class
69:50 - so i will say
69:52 - class
69:53 - and then i will call it teacher
69:56 - like this
69:58 - okay and with this we have successfully
70:00 - created a class called teacher and now
70:03 - what i want to do is i want to inherit
70:06 - from my employee class
70:09 - like this
70:10 - okay and then what i need to do is let's
70:13 - first create some specific attributes
70:16 - for my teacher so let's say for example
70:18 - that a teacher
70:19 - has
70:20 - attribute called subject
70:23 - so this here is the subject that my
70:25 - teacher is teaching and then let's say
70:28 - also that the teacher will have a
70:31 - functionality that is going to be
70:32 - specific for this class only and that
70:35 - functionality will be called
70:37 - prepare lesson for example so i'm going
70:39 - to say void
70:41 - prepare
70:43 - lesson
70:46 - like this
70:49 - okay
70:49 - and what i want to do here is i want to
70:53 - do something like this so i want to say
70:55 - for example the name of that teacher and
70:57 - then i won't say that he or she is
70:59 - preparing lesson from this subject here
71:02 - so
71:03 - let's delete this empty space so i'm
71:06 - going to say
71:07 - std
71:08 - c out
71:10 - and then let's put the name of my
71:12 - teacher so name
71:14 - like this and then let's say
71:18 - is preparing
71:20 - and then here i want to put the name of
71:23 - my subject
71:25 - like this
71:26 - and then let's add
71:29 - lesson
71:36 - okay
71:37 - now there are a few problems that we
71:40 - have with this class here the first
71:42 - problem is that these here are private
71:45 - which means that we will not be able to
71:46 - access them outside of this class here
71:49 - because everything inside the class is
71:51 - private by default so that is going to
71:53 - be the first problem and let's fix it so
71:56 - i'm going to say
71:57 - public
71:58 - like this
72:00 - okay now second thing that is going to
72:02 - be a problem for us is that this teacher
72:04 - class here does not have a constructor
72:06 - so if i try to create an object of type
72:09 - teacher i will not be able to do that so
72:11 - let's demonstrate that error now i'm
72:14 - going to say
72:15 - teacher
72:17 - like this and let's call it t
72:20 - and well if i do this only we should get
72:23 - an error which says default constructor
72:25 - of teacher cannot be referenced which
72:28 - means that we need to implement a
72:29 - constructor for this class here as we
72:32 - did for this class here so as we did for
72:35 - our developer class so let's do that
72:37 - i am going to create a constructor
72:40 - called
72:40 - teacher
72:44 - like this
72:46 - and then this teacher constructor will
72:48 - receive these three properties that our
72:51 - employee has
72:53 - like this and then it will receive
72:55 - another
72:56 - parameter called
72:58 - subject
73:00 - subject
73:02 - okay
73:03 - now this constructor is going to pass
73:06 - these three properties to constructor of
73:08 - base class so this one here
73:11 - let's do that let's say
73:14 - let's say here
73:16 - employee and then inside i will pass
73:20 - name and company
73:23 - and age and then here this teacher class
73:27 - will take care of constructing this part
73:30 - so i'm going to say that my subject is
73:32 - equal to
73:34 - this subject that we received in our
73:36 - constructor
73:37 - okay and now if i return down here and i
73:41 - try to make a teacher
73:45 - let's name the teacher jack
73:47 - for example and he is going to work
73:50 - in a school called cool school
73:53 - if such thing exists
73:56 - okay
73:57 - and then he's going to be 35 years old
74:00 - and he is going to be history teacher
74:03 - for example
74:05 - okay now we have successfully created
74:08 - our teacher jack
74:10 - and i am going to collapse this and then
74:12 - i want to test this method here so i'm
74:15 - going to say
74:17 - teacher t dot and then prepare lesson
74:21 - okay and if i run this program
74:25 - it says that jack is preparing history
74:28 - lesson
74:29 - okay and then one more problem that we
74:32 - have with this class here is that our
74:34 - teacher t does not have access to
74:36 - properties of our employee class so if i
74:39 - type t dot as you can see it has access
74:43 - only to these two properties so in order
74:46 - to fix that problem i am going to add
74:48 - public
74:49 - here
74:50 - okay and if i try to make
74:53 - jack ask for promotion let's see if jack
74:56 - gets the promotion
74:57 - because i didn't get promotion okay it
75:01 - says jack got promoted excellent and i
75:04 - didn't and that is because jack is 35
75:06 - years old and i am 25 years old okay
75:10 - so if you don't know what i'm talking
75:12 - about you will have to return to the
75:14 - part where we are talking about
75:16 - um encapsulation i believe
75:19 - okay
75:20 - so that was the story of inheritance we
75:23 - created two derived classes one is
75:25 - developer and the other one is teacher
75:28 - and those two classes are inheriting
75:30 - from a class called employee as you can
75:33 - see here and here and we will be using
75:36 - these classes
75:38 - in our next example to explain our next
75:41 - concept which is polymorphism
75:44 - as i said fourth principle of
75:45 - object-oriented programming is called
75:48 - polymorphism and this is the one that i
75:50 - see people struggle with the most for
75:52 - some reason i don't know why because it
75:54 - is pretty simple and cool as you will
75:56 - see
75:57 - so it is very simple but only if you
76:00 - understand the things that i have
76:01 - explained so far in this course
76:04 - so the first thing that i want to
76:06 - explain is what is
76:07 - polymorphism uh the word itself comes
76:10 - from greek language and it is a compound
76:12 - of poly and morph which means many forms
76:17 - and in programming polymorphism
76:18 - describes the ability
76:20 - of an object or a method to have many
76:24 - forms now the most common use of
76:26 - polymorphism in programming is when a
76:28 - parent class reference is used to refer
76:31 - to an object of a child class does that
76:34 - sound a little bit complex when i say it
76:36 - like that i believe that it does and i
76:38 - agree but stick with me for a couple of
76:40 - minutes and let me show you how simple
76:43 - this really is on the example that we
76:45 - have here so in order to explain how
76:48 - polymorphism works let's return to our
76:50 - employee class
76:52 - so this one here i'm going to collapse
76:55 - this and then what i want to do in my
76:57 - employee class is i want to implement
76:59 - one more method and let's call that
77:02 - method work so i'm going to say void
77:06 - work
77:08 - and then here in this method what i want
77:11 - to do is i want to say for example
77:15 - out
77:16 - um let's say name of this employee and
77:20 - then let's say that
77:21 - that employee
77:23 - is checking email
77:27 - and then he is checking also task
77:29 - backlog
77:33 - okay it's backglog
77:36 - okay task backlog and then he is
77:38 - performing those tasks
77:44 - and so on okay and let's add
77:47 - end line
77:50 - like this
77:52 - okay
77:52 - now
77:53 - let's return to this main function here
77:56 - and what i want to do is i want to
77:58 - invoke that new work method that i just
78:01 - implemented
78:02 - and i want to invoke that method on this
78:05 - developer and teacher class because
78:07 - considering the developer and teacher
78:09 - are inheriting from that employee class
78:12 - we should be able to do that so if i say
78:15 - d dot
78:16 - work
78:18 - and then t dot work
78:21 - let's see what will we get if i run this
78:24 - program
78:26 - okay it says here selena is checking
78:29 - email task backlog performing tasks and
78:32 - so on and then jack is also checking
78:34 - email task backlog and performing those
78:37 - tasks
78:39 - but one thing that i don't like is i
78:41 - don't like me checking emails and
78:44 - checking task backlog and so on what i
78:46 - like is i like to write code so
78:49 - how about implementing this work method
78:52 - on my developer class as well so let's
78:55 - return here to my developer class and
78:57 - what i want to do here is i want to copy
79:00 - this method
79:03 - like this but instead of checking email
79:06 - and checking task backlog and so on what
79:08 - i want to do here is i want to say that
79:12 - i am writing code so let's say
79:14 - salina
79:16 - is
79:18 - writing and then let's put this
79:21 - programming language here
79:23 - like this
79:24 - and then let's say
79:27 - code
79:29 - okay
79:29 - and now i'm going to do the same for
79:32 - this teacher class here so let's copy
79:35 - this method and then paste it in my
79:38 - teacher class but instead of writing
79:40 - code teacher is going to be doing
79:42 - something else so
79:44 - what teacher does well teacher teaches
79:47 - so i'm going to say the name of my
79:49 - teacher which is jack in this situation
79:52 - so jack
79:55 - is teaching
79:58 - and then let's put the name of his
80:00 - subject
80:02 - which is history i believe
80:04 - okay
80:05 - now one thing that you must notice is
80:07 - that this work method has the same name
80:11 - here and then here as well and it also
80:14 - has the same name in this base class so
80:16 - it is called work but the
80:19 - implementations of this method this work
80:22 - method are different here it says that
80:25 - an employee is checking an email and
80:27 - checking task backlog and so on and then
80:30 - developer has also its own
80:32 - implementation which says that developer
80:35 - is writing code because that is his work
80:38 - and then teacher is teaching his subject
80:41 - which is his job so
80:43 - i have here invoked these two work
80:46 - methods and let's see what will happen
80:49 - if i run my program now
80:51 - okay now it is better it says that
80:54 - salvina is writing c plus code and jack
80:57 - is teaching history
81:00 - okay
81:00 - now let's make one small improvement to
81:03 - the code that we have here or actually
81:05 - two improvements and the first one is
81:07 - going to be this writing with double t
81:10 - okay what is this this is criminal
81:13 - and then the second one is going to be
81:15 - the rule that i mentioned in the
81:17 - beginning when i said the most common
81:19 - use of polymorphism so let me copy that
81:23 - definition here and then we will
81:24 - implement it literally word by word so
81:28 - here it is and it says the most common
81:31 - use of polymorphism is when a parent
81:34 - class reference is used to refer to a
81:37 - child class object so let's see what
81:40 - this means in practice
81:42 - i'm going to delete these two lines
81:44 - because i don't need them anymore and
81:47 - then what i want to do is i want to
81:48 - create a pointer of type employee
81:54 - like this
81:55 - and one quick disclaimer if you are not
81:57 - familiar with pointers i am going to
82:00 - refer you to my channel which is code
82:01 - beauty with where i have an entire
82:04 - playlist which is dedicated to pointers
82:06 - so make sure to watch that and then you
82:08 - can continue with this example here so
82:11 - again i have created
82:13 - an employee pointer and what i want to
82:16 - assign to this pointer is not going to
82:18 - be an employee object so i want to
82:21 - assign to this pointer here a reference
82:24 - of this developer and then this teacher
82:27 - class so here i'm going to say you are
82:30 - going to hold
82:31 - a reference to this developer here
82:34 - and this here is the rule so a pointer
82:37 - of base class which is this here
82:40 - can hold reference to derive class
82:44 - object which is this part here so so
82:46 - that is just the rule why well because
82:50 - this developer here this developer is
82:53 - deep down inside it is an employee
82:56 - because developer is inheriting from
82:59 - employee as we already could see in the
83:01 - previous examples of this course so
83:04 - now that i have done this let's do the
83:06 - same for our teacher so i'm going to
83:08 - copy this line and then here i'm going
83:11 - to name this employee 1 and then this is
83:13 - going to be my employee 2 and here i
83:16 - will say that employee 2 will hold the
83:19 - reference of my teacher here
83:22 - so
83:23 - now what i want to do and what i want to
83:25 - achieve with this is the following
83:27 - wouldn't it be nice if i could do
83:29 - something like this so employee one dot
83:33 - work okay
83:35 - and then employee two dot work
83:39 - and this
83:41 - symbol here is used when you want to
83:43 - access members using a pointer so
83:46 - instead of dot symbol when you use a
83:48 - pointer you use this symbol here okay so
83:52 - wouldn't it be nice if this here worked
83:54 - well let's see maybe it does
83:57 - if i run my program
83:58 - as you can see it again says alina is
84:01 - checking email and task backlog and
84:03 - performing tasks and so on and jack is
84:05 - doing the same and he's a teacher and
84:06 - i'm developer so that means that this
84:09 - here does not work
84:11 - but
84:12 - if you only knew how close we are to
84:15 - making this work you are literally
84:17 - missing only one tiny little thing that
84:20 - i didn't tell you to make this here work
84:24 - so
84:24 - what that thing is
84:26 - well let's return to our employee class
84:30 - and then
84:31 - here
84:32 - this work method
84:34 - let's make this work method virtual so
84:36 - i'm going to say
84:38 - virtual here
84:40 - so let's run our program now and as you
84:43 - can see it says saudina is writing c
84:46 - plus code and jack is teaching history
84:49 - so it works
84:52 - wait i have to explain this
84:54 - okay
84:56 - so let's return to our employee class to
84:58 - explain what just happened well
85:01 - look at this function here this virtual
85:03 - void function this function with this
85:06 - virtual keyword is known as virtual
85:09 - function and what that means well it
85:12 - means that when a virtual function is
85:14 - invoked it says hey can you please check
85:18 - if there is implementation of this
85:20 - function in my derived classes and if
85:23 - yes please execute that instead so what
85:26 - ends up happening is that the most
85:28 - derived version of this function here is
85:31 - going to be executed and that is
85:34 - this function here for developer and
85:36 - then this function here for teacher
85:40 - so does that mean that if we didn't for
85:43 - example have implementation of function
85:45 - called work in our developer that our
85:48 - developer then would do this that our
85:51 - employee has in its work function the
85:53 - answer is yes so let me comment this
85:56 - just to demonstrate how it would behave
85:59 - so now i commented implementation of
86:01 - work function in my developer class so
86:04 - if i run the program now as you can see
86:07 - it says salina is checking email and
86:10 - task backlog and performing some random
86:12 - tasks and then jack is teaching and this
86:15 - is happening because teacher class has
86:17 - its own implementation of work method
86:20 - work function but developer class does
86:23 - not so here developer is going to
86:26 - execute parents class method work which
86:29 - is this method here so that's why i am
86:32 - checking email and task backlog and
86:34 - performing random tasks instead of
86:37 - writing c plus code so let's close this
86:41 - and let's now return this i'm going to
86:43 - uncomment it
86:45 - like this and let's run my program once
86:48 - more and as you can see everything works
86:51 - again and we have this polymorphic
86:53 - behavior so that ladies and gentlemen is
86:56 - polymorphism
87:00 - so let me give you one little tip of
87:02 - what we can do with this knowledge now
87:04 - so let's close this
87:06 - and i'm going to return to my main
87:08 - function
87:09 - and here as you can see
87:11 - here we are creating
87:12 - a base class pointer to a derived class
87:15 - object which is in the situation
87:17 - developer and then in this situation it
87:19 - is teacher and then in some other
87:21 - situation it can be some other type of
87:23 - employee so if we created more derived
87:26 - classes which we could do we could
87:28 - create for example derived class called
87:31 - bus driver or pilot or singer or actor
87:35 - doctor and so on and then we could keep
87:39 - objects of those derived classes like
87:41 - this so we could reference them with
87:43 - this base class pointer because they
87:46 - would derive from employee as well and
87:48 - then imagine situation where you had
87:51 - 100 or thousand or even 10 000 employees
87:55 - and then you are storing those like this
87:58 - like we did with our developer and our
88:00 - teacher and then you could literally in
88:02 - one line say
88:04 - employee dot work and what would happen
88:07 - is that all of those different types of
88:09 - employees would start doing their own
88:12 - job so painters would paint singers
88:14 - would sing
88:16 - actors would act doctors would talk with
88:18 - patients or something i don't know so
88:21 - that is the most beautiful thing that we
88:23 - have achieved with this here
88:26 - so i hope that you enjoyed this video if
88:28 - you did give it a thumbs up and then
88:30 - also if you want more videos like this
88:32 - one you can visit my channel which is
88:35 - code beauty and there i have a lot of
88:37 - videos related to programming and c plus
88:40 - and also leave me a comment i would love
88:42 - to read something like hey i am coming
88:44 - from precode camp or something like that
88:47 - on one of my videos
88:49 - so thank you very much for watching and
88:51 - i'm going to see you in some next video
88:53 - on this channel and then if you decide
88:55 - to visit code beauty youtube channel i
88:57 - will definitely see you in one of my
88:59 - videos
89:00 - bye
89:02 - so now i'm going to take a break for a
89:04 - couple of hours but for you it is going
89:06 - to be just a couple of seconds because
89:08 - i'm going to pause the video here and
89:10 - for this i want to try a transition that
89:12 - i never did before and it is this one
89:24 - so what is polymorphism the word
89:26 - polymorphism comes from latin language
89:28 - and it means
89:30 - or is it greek
89:44 - 2 000 years later
89:51 - i'm just going to skip this information
89:54 - so if i hover over this as you can see
89:57 - we still have an error but we have a
89:59 - different error which means that we are
90:01 - making progress
90:03 - also visit me on my channel which is
90:06 - code beauty and subscribe there and also
90:08 - leave me a comment i would love to read
90:10 - something like hey selena i am coming
90:12 - from free code camp and your course was
90:14 - great or
90:16 - hey salina i am coming from free code
90:18 - camp and your course was excellent or
90:20 - perfect or outstanding or something like
90:23 - that you know

Cleaned transcript:

hi everyone and welcome my name is saldina i am a software engineer and i make programming related videos on code beauty youtube channel and in this video i want to talk about oop so object oriented programming this course will start on a beginner basic level and then as the course progresses we will see some of the more advanced concepts i will explain those advanced concepts and i will show you how you can implement all of those concepts in code you can find the full content of this course in the description of this video so make sure to check that out and then if you want to see some different examples if you want to learn more c plus and you want to upgrade your knowledge i have a lot more videos like this one on my channel so i invite you to visit code beauty youtube channel and i'm going to see you there in some other video so let's start with this video so the first thing that i want to explain is what is oop what is object oriented programming oop is programming paradigm which means that it is a set of rules and ideas and concepts it is basically a standard in programming that we use to solve a specific type of problem now besides objectoriented paradigm there are other programming paradigms as well you may ask why well we as humans have a lot of different types of problems and our computers help us solve those different types of problems and if one paradigm is good to solve one type of problem for example that does not necessarily mean that it is good to solve all other types of problems that we have so the idea behind objectoriented paradigm is we want to be able to represent reallife objects reallife entities together with their characteristics with their attributes and their behaviors we want to be able to explain those objects to our computer and to represent those objects in our program and that is exactly what oop is used for so how does this work on a real life example let's use the example of car so a car as an entity in real life has many different attributes many different characteristics and some of those are manufacturer of that car so is that car a volvo a ferrari or a ford or some other type of car and then that car certainly has a collar it has price it has max speed that that car can obtain and many more characteristics i'm sure that you can think of many more characteristics of a car than i can do so those would be some of the attributes and characteristics of a car in real life and then some of the behaviors of a car are for example a car can drive a car can accelerate it can uh stop you can open the door of a car you can tank your car so you can put fuel in your car and then you should also have the option to show how much fuel that car has left so those would be some behaviors that car has and as i said object oriented programming the idea of object oriented programming is to be able to represent that car from real life in your program so how do we do that how can i represent a real life entity like a car in my program or another entity like a game or a sport or student or a book or animal you know so the answer to this question is by using classes now class is very important concept in oop class is building block of object oriented programming and um a class is basically user userdefined data type and in order to be able to understand what are userdefined data types you first need to understand what are predefined data types what are builtin data types so data types like integer and float and double and character and so on and if you are not familiar with these i am going to refer you to my video that i made on my channel related to variables and data types so just search code beauty variables data types and you should be able to find that video and then if you are familiar with these predefined data types i'm going to tell you that a class is a little bit more complex data type and in what way well let's say for example that in your program you want to represent username of your user in order to be able to do that you will just create a variable of type string and call it username and you should be able to store the username of your user in that variable but what happens if you want to store the entire user in your program that user has many more characteristics than just username user has his name as well and then gender and email address and then he has height and width and um i'm sorry wait he has weight and then he also has some other characteristics and all of these characteristics are going to be variables that have its own type and then all of these variables together are going to make one group which will be a class that represents your user one thing to keep in mind though is that you will need to store the information that is important for your specific program for example if we are talking about facebook user then height and weight of that user is not that important but if you are building a fitness application then height and weight of your user is extremely important so you should store the information that is important for your specific program so let me show you now how we can build a class in c plus code and the ide that i'm using here is called visual studio and you can download community version of visual studio for free in case that you want to follow this tutorial and type at the same time together with me so let me show you now how you can create a class in c code the class that i want to create is called employee so let's do that now let's create an employee class in this program here so the first thing is you type class keyword and then you give a name to your class so i'm going to call my employee like this and then you use these curly brackets and at the end of these curly brackets you need to put semicolon because if you don't if you forget this semicolon you will get a compile time error and if i try to run this program now that is not going to be possible as you can see here and it says here immediately it says expected a semi column so you need to put semicolon here okay now that we have created this employee class we see that this class is empty and what we need to put inside this class here so inside these curly brackets because that is the body of our class we need to put members of this class now the members of this class are going to be its attributes and its behaviors so what kind of attributes an employee has well an employee definitely has a name so let's put that in so i'm going to say std string and then name like this okay and then employee definitely has a company that he works for so let's add that as well i'm going to say std string company like this okay and i want to move this uh string i'm going to include it here so i'm going to say using std string so that i don't need to type it every time that i'm using string okay and now i can remove this now it looks much more readable okay so so far we have added a name and a company for our employee and let's add one more thing let's say that every employee has age so inch age we are going to we are going to represent age as an integer number so as you can see at the end of each of these attributes you put semicolon as well okay so far our employee has three attributes name company and age and you can add many more attributes here if you want you can add his title you can add his email you can add employment date his birth date uh and so many more but i'm not going to do that in this situation because i don't want to add a bunch of code that we will not be using because i'm going to add that code as we need it later in the program so this class here does not represent data this class here represents a blueprint so whenever you want to create an employee this class here will serve as a model for that employee so this class here will say hey your employee needs to have a name a company name and age so how do you create an instance of this class how do you create an object of this class let's show that now so how do you create a variable of type int for example well you type data type first so int and then you give the name to that variable so let's call it number okay and with this we have successfully created a variable of type int and it is going to be the same with the variable of type employee so you first specify the name of that type and the name is going to be employee so this here is user defined type which is called employee okay and then how do i want to name this variable let's call it employee 1 like this and with this we have successfully created a variable of type employee this here is going to be an object of this class here so let's remove this because we don't need it anymore it was just for demonstration purposes so how do you access now these attributes how do you access these members of employee class well the approach would be the following you type the name of that object like this and then if i put dot here we should be able to see all of these members here but that is not happening so why is that the case well there is one rule that says that everything inside class in c plus plus is private by default which means that all of these members here are private and in order to be able to understand this and fix the problem that we have i need to tell you a little story about access modifiers so in c plus plus we have three access modifiers we have private we have public and then we have protected and let's explain now what each of these mean well private means that whatever is private in your class that is not going to be accessible outside of your class that is basically going to be hidden and that public means that whatever is public in your class you will be able to access that outside of your class as well so anyone else outside of your class is going to be able to access public members of your class and then protect it is somewhere in between private and public and it has certain rules to it so we will be talking more about protected access modifier when we start talking about inheritance later in this course so for now you need to remember that there are three of them there is private there is public and protected so in this particular situation one rule is that everything inside your class is private by default so this situation here is the same as if we wrote it like this okay this is just explicit way to say hey everything beneath this private access modifier is going to be private so this situation is the same as this situation now let's return our private access modifier and let's see how we can fix the problem that we have and the problem is that we cannot access these members of our employee class and we want to do that so let's try to change this private access modifier with a different access modifier let's try protected for example well if i try to access these members name company and age now if i press dot as you can see nothing is happening so i cannot access these name company names if i try to type for example name i get an error which says member employee name is inaccessible so protected is not helping as well so let's try the third one let's try public okay and now as you can see the error has disappeared and if i try to do this once more we have all of these members name company name and age we have all of them here they are offered to us so that means that by changing this access modifier to public we will be able to see all of these properties here so let's now set the values of these members let's say that the name of our employee will be for example saldina that's my name okay and then let's copy this two more times like this so the company will be let's say for example youtube and then code beauty which is my channel let's say that that is the company that i work for and then um age okay age is an integer variable so we are going to set it as an integer and age is going to be 25. okay so with this here we have created an object of type of type employee that object is called employee 1 and here we have set values for the properties we have set values for name company and age of this employee object here but we also said that we can describe behaviors as well so how can we describe a behavior of an employee let's first think of a behavior that an employee has let's say for example that he can introduce himself so he comes to work and he says hello my name is so and so i work for this company and i am 25 years old so how can we describe that behavior in this class here well we can describe that with a class method and what a class method is it is basically a function so we are going to create a function inside this class employee so let's do that i'm going to create a function of return type void and i'm going to call that function introduce yourself like this okay and then inside this function what i want to do is you can write hello my name is and then you put this name and then i work for this company and i am 20 years old for example but i'm going to make it a little bit more formal so i'm going to say the following c out and then i'm going to write out name like this okay and then let's put name and i'm going to add endline and then i'm going to write out these two informations as well so company and then paste here company and then age as well okay now how can i invoke this introduce yourself function well the same way as we did here i'm going to say employee and then i put dot and as you can see this introduce yourself function is available here so let's invoke that function like this and now we should be able to test this so if i run my program okay as you can see here it says name salina company youtube code beauty and then age 25 okay great and now if we needed to introduce our employee five times for example we just copy this function five times like this and our user is going to introduce himself five times and if we didn't have this class method here we would have to copy this code five times so each time that we want to introduce our user we would have to copy this code here instead of doing that we can create a class method which represents a behavior and then we can invoke that class method whenever we need it and if i run this program this user should introduce himself five times okay two three four and then oh sorry four and then five okay let's now delete this because i don't need it anymore because i want to show you something else so let's say that we want to create another employee in our program so how would we do that well we would use the same approach that we had here so employee the name of my class and then employee let's call it employee 2 which is going to be the name of the object so let's assign the values for these attributes for our second employee as well i'm going to say employee two like this and his name is going to be john for example like this let's copy this two more times so company will be amazon for example john works for amazon and he has uh let's say 35 years like this okay so now if i want to introduce john i'm going to say employee 2 dot introduce yourself excellent so if i run this program now as you can see here is me salina youtube code beauty and then here is john john amazon35 okay now one problem that i already see here is this part of the code and then this part of the code what would happen if we wanted to create 10 more users or 100 more users we would have to repeat this for every single user that we create and that is not really optimal because there is a better way there is a better approach of constructing our objects and in order for you to be able to understand this i will have to tell you a story about constructors so now you may wonder salvino what is a constructor well a constructor is a special type of method that is invoked each time that an object of a class is created so whenever you create an object of a class a constructor is invoked so does that mean that here and here as well a constructor is invoked the answer to that question is yes now you may wonder okay we have not created any constructor you must be lying well let me demonstrate you something let's comment this code here and now let's comment this code here as well and let's see what will happen if i run my program so we are not assigning any values to the attributes of this employee nor this employee here so if i run my program okay here is what happens as you can see this is our first user and this here is our second user so here we don't have anything and then here we here we also don't have anything and then here is a number which i am not going to try to read okay but basically this here is the work of default constructor so what is default constructor default constructor is a term to describe a constructor that is automatically generated by your compiler so in case that you don't create a constructor of your own your compiler is going to automatically give you a constructor which is called default constructor okay now let's stop this and let's see how we can create our own constructor because those values that you saw that is something that we cannot work with i mean we don't want to work with those values we want to use our own values we want to use this and this and then this here and for our second user we want to use these values here so how can you create a constructor of your own there are a few rules when it comes to creating constructors there are three rules actually so the first rule is following we already said that a constructor is just a method but unlike other methods a constructor does not have a return type so let's scroll this up and as you can see this method here introduce yourself this method has a return type of void which is nothing but we still have to specify that but a constructor will not have this at all so that's going to be the first rule the second rule is that a constructor has the same name as the class that it belongs to so the constructor of class employee will be called employee so that is the second rule the third rule is that constructor must be public now this i'm seeing as a rule at this level of knowledge because a constructor does not necessarily need to be public always there are certain situations specific situations when you would want to make your constructor private but at this level of knowledge i would advise you to make sure that your constructors are public because if you remember when we talked about access modifiers and when we said what private means that means that everything that is private is locked is hidden inside your class and you most definitely don't want to make your constructor hidden so uh third three rules uh the first one is that constructor does not have return type the second one is that constructor has the same name as the class so let's create constructor of this class here it will be called employee and i am going to put that constructor in this public area because if i decided for some reason to put this constructor if i decided to make this private let's do let's make this private like this as you can see immediately here we get an error so our employee one and then our employees too this error says employee constructor is inaccessible and here as well because we have made this constructor private and we cannot access it outside of this class here and we do not want to do that we want our constructor to be public so i'm going to remove this private access modifier and as you can see this error here has disappeared now so the job of this constructor here is going to be to construct the object of employee that means that whenever we create employee we want to pass these three values here so name company and age we want to pass that to our constructor here so we are going to receive that in our employee constructor as parameters so i'm going to say string name and then string company like this and int age okay now that we have received these three parameters here what i want to do with them is i want to assign them to these three properties here so i'm going to say name of my employee will be this name here like this and then company that our employee works in it will be this value here so company and then age like this will be whatever we passed as this parameter here okay and now if you look at our employee here we have an error again so let's check what their what that error is it says no default constructor exists for class employee so what this error here means it means that when we decided to create our own constructor at that moment we lost the default constructor that was automatically generated for us so when you decide to create your own constructor you are going to lose that default constructor and you can fix that by either making your own default constructor or by providing here these three values that we have specified that our constructor is going to receive so let's do that let's provide here name company name and age so how do we do that well let me show you how we can use this constructor here so in this line i'm going to say that my employee 1 is going to be equal to and i'm going to invoke this constructor basically so i'm going to say hey i am invoking this constructor here and here it expects to receive argument list what is argument list it is these three parameters so name company and age so here i'm going to pass name which is salvina and then company is going to be this company here so youtube code beauty i'm going to copy that and then age is going to be 25 okay so with this we have successfully constructed our employee one object which means that i can delete this code here and then if we do this same for our employee tool we will be able to delete this code here as well so let's do that i'm going to say employee and then here i want to pass these three values so name is john okay and then company is amazon like this and then age is 35. excellent so i am able to delete this as well and let's check what is going to happen if i run my program i'm just going to format this so if i run my program nothing should change i should still be able to introduce this user and then this user as well so let's do that let's run our program okay and as you can see selena youtube code beauty and then 25 john amazon 35. so now we have managed to reduce the code that we had in our main function to only two lines per employee so the first line is to construct that object and then second line is to introduce that user and we have managed to do that with our employee constructor which is now doing that work of constructing the object based on based on the parameters that we passed to that constructor that constructor receives those parameters here and then it constructs the object here it initializes the values of that object and then in our introduce yourself function whatever we invoke that function for an object of an employee that function is going to do this code here so it is going to basically introduce that employee so i hope that this part so far was understandable for you because here i'm going to take a quick break and i'm going to pause the video and then i might be back in a couple of minutes or in a couple of hours or even in a couple of days but that is going to be just a couple of seconds for you and i want to make a transition that i never did on my channel i never did this on code beauty but i'm going to do it here and that is this transition here hello and welcome back and let's continue talking about object oriented programming but before i continue i want to make a quick summary of the things that we have learned so far in this course so first i have explained what is objectoriented programming and what is the main idea behind objectoriented paradigm and then i have explained what our classes and what our objects and how you can use those classes and objects in order to represent real life entities together with their attributes and their methods in your programs describe them to your computer and then we also talked about access modifiers so private public and protected and then we have seen what our constructors and how you can create and use constructors and now the time has come to talk about four most important principles four pillars for most important concepts of objectoriented programming and those are encapsulation abstraction inheritance and polymorphism so the first one that i want to talk about is encapsulation so what is encapsulation the idea of encapsulation is idea of bundling or tying together data and methods that operate on that data so that they are grouped together within a class and why do we do this well we do this with the purpose of preventing anyone or anything outside of our class to be able to directly access our data and to interact with it and to modify it so i am not saying that we don't want anyone to access our data at all i'm just saying that i don't want that to happen directly i don't want that other class to be able to directly modify and change and interact with my data because i want to provide my own way for that to happen so how do i do that how do i provide a way for other classes to interact with the properties of my class well i provide very specific public functions that that other class can invoke and in that way interact with my data so again how do you access encapsulated properties of a class the answer is through its methods and these methods are very often implemented as getters and setters so now i'm going to show you in code how those getters and setters look like and how we can modify this program that i have here so that we obey that rule of encapsulation so the first thing that i want to do here in this program is i want to make these three properties i want to make them private so i want to encapsulate these three properties hide them within this class so let's do that here i'm going to put private modifier so this here is private access modifier and we don't actually have to write this because everything that does not have a modifier at all in c plus plus is private by default within a class but i just find it more readable if i do it this way so now here in this private area i am going to move these three properties okay and then paste them here like this and now we have hidden these three properties within this class called employee which means that now we will not be able to access these three properties anymore outside of our class let me just collapse this and let me prove you what i just said okay so if i try to access name or company or age on my employee object i should not be able to do that now so if i type employee 1 for example and then i type this dot you can see that the only thing that we can access is this introduce your introduce yourself method which is this one here and that is the only thing that is public besides this constructor here so how can we access these properties then well as i said we have to expose our own methods which are going to be public and then by using those methods other classes and other users will be able to interact with this data here with these three properties so let's create getters and setters for these three properties let's first do it for for our name property so i'm going to do it here uh let's say void set name and then what this method what this function is going to receive well that is going to be a string name okay string like this and then once this function receives this parameter called name what i want to do with this is i want to assign this value to this property here so i'm going to say name is equal to name okay and then i want to create so this here is a setter and then i want to create a getter method as well so i am going to say string get name like this and then here i'm just going to say return name okay now this method here receives one parameter which is called name and then it sets the value of our property which is encapsulated which is this one here to that value that we have received in this setter and then this method here get name that method is going to return the value of our name property that is also encapsulated and that value is going to be returned to whoever invokes this method and because these two methods are public anyone outside of our class is going to be able to invoke set name and get name so these are examples of setter and getter and now i'm going to do the same for our company property and age property and i will be back to show you that code in a moment so i have created getters and setters for our name property here so this is sether this is getter for our name property and then here is a setter for our company and then getter for company property and then here are setter and getter methods for age and now because these methods here are public everyone outside of our class should be able to access these methods whereas these three properties are now encapsulated which means that they are private they are hidden within this class and no one else besides members of this class here are going to be able to access them directly so let's test now these getters and setters in our main function okay so let's say that employee 1 and let's say set age and i'm going to say for example that my employee 1 now has let's say 39 years for example okay and in order to test these gutters i'm going to say for example std c out and then let's say employee 1 dot get name okay so our getter should work like this and then let's say employee one is and i'm going to test if this value has been applied successfully so i'm going to say employee one oh what is this employee one dot get age okay and here i want to say employee one is 39 years old like this okay and now if i run this program we should get the result of this line here and we should be able to see if our getters and setters work as they should so let's run our program okay and now this last line of code here says salina is 39 years old okay so i shouldn't have done this for myself i should have done this for john for example so i'm going to close this program and as you could see these get name and get age and also get company and then set their methods as well are now public whereas the properties that they are hiding are hidden within the class and they are encapsulated so the only way to access these three properties is going to be using these methods now what we can do with these methods is we can provide special rules to interact with this data here for example let's say that employee cannot be anyone who is not older than 18 years old so here when actually here when i'm trying to set the age of our employee i'm going to add a check so i'm going to add a validation rule and i will say if age age this age that i have received in my setter is greater than 18 years old or actually greater or equal to than 18 because person that has 18 years old is of age only in the case that this property here is greater than 18 years old only then i am going to assign that to my age property here in the case that our user anyone else decides to assign value which is less than 18 so 17 or 15 or 10 or whatever i am not going to apply those changes so let's test this also here instead of setting age to 39 i'm going to say that salina now is 15 so let's test those changes okay and now as you can see it says selena is 25 years old why because this set age method here says that only valid age is 18 or greater than 18 and only in that case those changes are going to be applied okay so you can apply certain validation rules to your setter methods and then i'm going to leave to you to apply certain validation rules to your set company name and then set employee name this property here so you can do that as a homework you can decide if you want to allow only letters or you want to allow also numbers and special characters as the name for your employee and then as the name for your company okay so once more the idea of encapsulation is to make this let me close this so the idea of encapsulation is to make these properties private and then whoever wants to access these properties outside of this class will have to go through the methods that you expose that do have access to your private properties okay so let's collapse this and here are those six getters and setters for these three properties here the second principle that i want to talk about is called abstraction what is abstraction abstraction means hiding complex things behind a procedure that makes those things look simple so in order to explain this let's use an everyday life example let's use the example of your smartphone so one of the main characteristics that smartphones have these days is that they can take pictures so how does that procedure of taking a picture looks like well it's pretty simple at least on your side you just press a button and you have taken a picture where you press a button and then you make a call or you send a message but that is not really that simple because for you it is just a button click but for the company that makes those smartphones there is much more complex logic that they need to implement in order for you to be able to press a button and then take a picture so there is some sort of interface between you and then that company that produces those smartphones so on your side everything is pretty simple and easy you just press a button and you make a call you press a button and you send a message but then all of that complexity behind those functionalities is hidden from you and that complexity is on the side of the company that produces those smartphones now all of this complexity that is hidden from you you don't actually need to know anything about this in order to be able to use this site here in order to be able to make calls and send messages and take pictures so what happens if another company comes and they decide that they want to produce smartphones as well what they have to do is they have to sign this contract here they have to provide you as a user with this nice and beautiful and clean and simple interface so that you are able to press a button and take a picture and then they have to take care on their side to implement all of that complex logic which is hidden from you because if they decide to show you that ugly side that complex side chances are that no one is going to want to use their smartphones at all and even if someone decides that they do want to use their smartphones they will probably not understand this complex logic well so that they will so they will make mistakes and they will use those smartphones in wrong ways so this process of hiding that complexity from you as a user is called abstraction and in that way this very very complex system is hidden and this system here is represented as very simple system by this contract so let's see how we can implement this contract here that makes one side look simple and then other side very complex let's implement that on the code and example that we have here in our visual studio so let's take a look at this employee class here what kind of functionality complex functionality can we implement on this class here let's say for example that every employee can ask for promotion so he goes to his boss and he says hey boss can i get a promotion and then his boss needs to go through this very complex thought process in order to decide if this person deserves a promotion or not so his boss needs to consider many things he needs to consider consider for example how long this person has been working for the company how much knowledge this person has and then what kind of relationship this person has with their colleagues how much this person is contributing to the company um and then is this person always late for work are they breaking deadlines and many many more things so how about abstracting that functionality and in this situation we are doing that for another developer that is going to use our class so here in this situation we are the ones who are making this class so we are producing that smartphone so we are the ones who should provide that complex logic for those functionalities that are complex and then we should provide that simple and basic interface for anyone who wants to use this class here so how do you do that how do you create that contract well the answer is by using abstract classes for those of you who are coming from c sharp or java world there is already this concept of interface that some of you might be familiar with and in c plus plus you can simulate behavior of interface by using abstract class so let's create an abstract class so here on the top i am going to create a class and let's create a class called abstract employee like this or you can call it i employee if you want so this class here is going to serve as a contract and this contract will have only one rule and that rule is that whichever class decides to sign this contract that class will need to provide implementation for a method called ask for promotion so a method of return type void called ask for promotion like this and we are also going to make this obligatory which means that we will force any class that signs this contract here to implement this method here so how can we make this obligatory the answer is by making this function here a pure virtual function so i'm going to say here virtual and then here i'm going to say is equal to zero and now this class here has become an abstract class and this method here this function is pure virtual function or an abstract function and this means that whoever decides to sign this contract called that abstractemployee.com that signs this contract will have to provide implementation for this method here so now the question is how can my class my employee class sign this contract here the answer is pretty simple you add here column sign and then you specify the name of your contract which is abstract employee like this okay and now my class has successfully signed this contract and immediately if you could notice these two red dots that appeared below if we hover over these errors because these are errors you can see that it says pure virtual function abstract employee ask for promotion has no overrider which means hey you signed this contract here but you are not obeying the rules of that contract you are not providing implementation for this function here so in order to avoid these errors and fix these errors that we have now what we have to do is we have to provide implementation for this method here so let's do that okay i am going to copy it here and then i will come here and paste it and here in these curly brackets we are going to implement that method but as you could see immediately the errors that we had below have disappeared so here inside this class i want to provide logic for ask for promotion method so once more we said that that logic is pretty complex and that we should take in consideration many things so things like how long that person has been working for a company how much that person is contributing to the company what kind of relationship they have with their colleagues and so on but considering that we don't have all of that information what i'm going to do is i'm going to make it a little bit more simple so i'm going to say for example any employee that is older than 30 years old can get a promotion for example so i'm going to say here if age is greater than 30. i will do the following i will say std see out and then let's write the name of this employee i'm going to say name and i'm going to say got promoted like this okay excellent and then in the else case so in the case that person has less than 30 years i'm going to write something else so i'm going to deny that promotion to the person who is younger than 30. so i'm going to say name and then let's write out sorry no promotion for you okay excellent and now let's test this method here so i'm going to go to my main function and i will delete all of this code here okay and now i want to test this method here on my employee 1 and employee 2 so that i see if any of them can get promotion so let's say employee one dot ask for promotion and then employee two dot ask for promotion as well and if i run my program it says salinas sorry no promotion for you and then john got promoted and why that happened because let me close this because salina is 25 and then john is 35 and this rule here says that whoever is older than 30 which is john he gets promoted and then if that person is younger than 30 that person is not going to be promoted okay so with this we have accomplished the following we have implemented a contract which is actually an abstract class and that abstract class or that contract has only one rule and that rule is this pure virtual function here which is called ask for promotion so that means that whichever class signs this contract whichever class inherits from this abstract employee which is this class here that class will have to provide implementation for this method here so ask for promotion so in this situation our employee is inheriting from our abstract employees so our employee class is signing that contract which means that that class needs to provide implementation for the method that is in that contract okay now what this allows us to do when another developer comes to our code and wants to use our employee class that developer will see this contract here and he will say oh so this employee class has method which is called ask for promotion so that means that if i use employee class i can invoke this method here and i don't need to worry about complexity of this method i don't need to worry about how this promotion is given or rejected because that is the worry of the person who implemented this class here so that is the worry of the person who is going to sign this contract and in this situation we are that person we are the person who is producing that smartphone we are the person who is writing this class and this class is signing the contract which means that we have to provide implementation for this method here as we did in this situation and we tested it and as you could see i didn't get promotion and john did so that is the idea of abstraction and this ask for promotion method is just that button that we mentioned a button on your smartphone from the beginning of this chapter the third principle of object oriented programming that i want to talk about is called inheritance the idea of inheritance is the following so there is this base class also known as super class or parent class and then there is derived class also known as child class or subclass now this base class here this parent class has certain attributes and behaviors it has members and then if this class here decides to inherit from the base class at that moment this class becomes a child class and by that this class is going to obtain all of the members of this base class here which means this class is going to have all the same attributes and behaviors as its base class and then this derived class can also have its own members that are specific for that class only which this class here does not have so in order to explain this let's use an example that is going to be familiar to you let's let's return to the example of a car that i used in the beginning of this video so a car as a class is going to have certain attributes for example a name a model price a color and so on and then it is going to have behaviors as well for example it has a method called drive now what kind of derived classes can we create from this base class what kind of classes are more specific so what kind of car types are more specific than just car let's say for example that we are going to have one derived class that is called electric car and then another derived class which is called conventional car or gas car now this electric car is also going to have all the same properties that a car has so it is going to have um it is going to have a name a model a color a price and then it is going to have a method called drive and then this conventional car is also going to have all those same properties but they are going to be different between them this car for example is going to have a method called charge because this is electric car and we need to use electricity to charge it and then it is going to have an attribute called for example battery status and then this car which is gas car conventional car is going to have a method called think which means a method of putting fuel in that car and then it is going to have a property an attribute which is named tank status which shows you how much how much gas do you have left in your tank so each one of these derived classes is going to have their specific attributes but they will also inherit all of those attributes that their base class has so now let's see how we can implement that on the example that we have here so here i have class called employee and what i want to do is i want to create a derived class for this class here so what kind of class can inherit from employee class logically what is more specific type of employee let's say for example that we want to create a class called developer so let's do that here i'm going to say class and then let's call this class developer like this okay so with this we have created a class called developer and now what i want to do is i want to make this class inherit from this class here so how do you do that the answer is pretty simple you put column sign here and then you specify the name of your base class and the name is employee so with this a few things happened this class here developer became a child class which means a subclass or divide or derived class and then this class here employee is now called base class or super class or parent class and also another thing that happened is that this developer class here now has all of these properties and then these ones here as well that our employee class has so developer has all of the properties that employee has and then let's create one more property that is going to be specific for developer only so i'm going to make that property public so here i'm not obeying the rules of encapsulation you can do that for homework for example so let's create a property that only developer has but employee does not that is going to be for example favorite programming language developer has favorite programming language but an employee does not necessarily have to be a developer so he does not necessarily need to have a favorite programming language so i'm going to say string favorite programming language like this i hope that i didn't make a typo here so now let's check if everything that i said is correct so if this developer indeed has access to all the properties that our employee has and then to this one here which is specific for developer only so let's delete this code here and then i want to create an object of class developer so i'm going to say developer and let's call that object d like this okay and the first thing that happens is we get an error and it says okay it says default constructor of developer cannot be referenced so this error here is happening obviously because we don't have a default constructor and if you remember when we were talking about constructors we said that every class when you create it every class has automatically generated default constructor but once you decide to create your own constructor you lose that default constructor so now you may ask well selena we have not created constructor for this developer class and i'm going to say you're right but we have inherited from employee class and that employee class has a constructor that we created so that means that we need to provide a constructor for the derived classes of employee class which is our developer class so now what i'm going to do is i'm going to create a constructor for developer class so if you remember three rules of creating constructors first rule is that it does not have return type second rule is that it has the same name as the class and then third rule is that it needs to be public so i'm going to call this constructor developer like this oh sorry and then i need to put these curly brackets here okay so now the job of this constructor here is going to be to construct developer object and considering that this developer object inherited from employee class that means that developer has these properties so these attributes and then this one which is specific for only developer class so now we have to provide this constructor with those parameters so i'm going to copy these three here because i already have them and then paste them here and then i will add this parameter which is specific for developer class so i will say string string language like this so this is favorite programming language or actually let's call it favorite programming language so that we are consistent okay now once we have passed these four parameters to our developer constructor what we have to do is we have to initialize this attribute here and then these three attributes here because those are attributes that our developer class has but one thing that i want to show you is following considering that this developer class is inheriting from employee class and that employee class has a constructor of its own which is this one here that constructor already knows how to construct name and company at age so that means that we don't have to worry about these three properties in our developer class we should only worry about a specific properties of our developer class and these three properties that actually belong to our employee we can pass these three to our employee constructor so i'm going to do that like this here so after this parentheses you put a column sign and then you specify the name of that constructor so employee so the name of your base class and then here i will pass these parameters that our base class constructor receives so name and then company and age okay so now this constructor the constructor of our base class is going to take care of these three properties and we are left with this property here which is specific for our developer class so here i want to initialize our favorite language property so i'm going to say that favorite language is equal to whatever has been passed to this constructor okay now if i go down there to my main function where i tried to create my developer let's try to construct an object of type developer let's try to invoke this constructor here like we did in this line here and then in this line here for our employee so i'm going to say that a developer is going to be equal to developer and then here i want to pass values for this constructor here so those are name and company name and age and favorite programming language so let's call this developer also salvina i'm going to delete these two because we will not need them anymore okay and then let's say that i work for youtube code beauty and then i am 25 years old and my favorite programming language is c plus plus for example so now that i have successfully created an object for developer class let's test this so how am i going to test this well let's create a method on our developer class that is going to use some of these values here so that we can know if these values have indeed been set successfully so what kind of method can we implement on developer class for example we can implement a method called fix bug so i'm going to do that let's collapse this constructor and let's say here void fix bug and then what i want this method here to do is i wanted to say selena is fixing bug using c plus or selena fixed but using c plus plus so here i'm going to do that i'm going to say std c out and then in order to access the name of this employee i'm going to use getter so i'm going to say get name which we created previously and then here i'm going to say fixed bug using and then let's use this programming language here like this okay and now if i want to test this method here i can invoke it on my developer class so i'm going to say d dot fix bug and if i run my program as you can see this method here works and then the values that we passed in our constructor have successfully been set so here it says selena and then fixed bug using and then here is my favorite programming language okay let's close this and now there is one more thing that i want to show you and that is this part here so i want you to notice that this here is the way that we are using in order to access properties of our employee class and then we are accessing directly properties of our developer class so can i access properties of my employee class directly can i access this property here for example name or do i have to access it by using getter write me your answers in the comments down below so i am going to test that now here i'm going to save name and we get an error it says employee name is inaccessible so we cannot access this property here name which is the property of our employee class why well if you remember when we were talking about access modifiers we said that whatever is private that is going to be locked hidden that is going to be accessible only inside that class and then whatever is public we will be able to access that outside of the class so how can i make this property here how can i make this name accessible in the derived classes of this class here again when we were talking about access modifiers we said that there are three of them public private and protected and i promised you that i am going to explain what this what protected access modifier means so in this situation if we make this property here if we make this name property protected that will make name available in derived classes of this employee class here so i am going to say protected like this and then i'm going to take this property and i will move it to my protected area and then if i return to my developer class as you can see the error that we previously had is now gone so now this name property is accessible directly from this derived class here and if i run the program it should work the same as it did and as you can see it indeed works the same so selena fixed bug using c plus okay now there is one more very important thing related to inheritance that i want to show you and that is the following let's say for example that this developer here fixes a lot of bugs so if i run my program you can see that salvina indeed is fixing a lot of bugs so what this developer here decides then is he or she in this situation she decides to ask for promotion so i'm going to try to do that now i'm going to say d dot but if you look at the list that i have here it only has the access to favorite programming language and then fix bug so if you look at this you can see that i don't have access to the other properties that i have inherited from my employee class i do have access to them here so if i try to invoke them in this method here so if i say here for example ask for promotion as you can see i do have access to them here but as you could see on my developer object i cannot access those properties so how can i fix that problem well the answer is pretty simple this inheritance here so this part of the code here this inheritance is private by default and in order to fix the problem that we have we need to make it public so here i'm going to say public and the problem should disappear so if i return to my developer object now and if i try to ask for promotion as you can see that method is available so maybe i'll get a promotion this time let's test this and unfortunately i am not getting a promotion but at least my code is working so now we have access to this method here which is implemented in my employee class so in my base class and we have achieved that by making this inheritance public so while we are talking about inheritance let's create one more class that is going to inherit from this employee class so let's create one more derived class besides this developer so what kind of class can inherit from employee what is more specific class than employee for example let's create a class called teacher so here i'm going to go one more time through this process of creating derived class so i will say class and then i will call it teacher like this okay and with this we have successfully created a class called teacher and now what i want to do is i want to inherit from my employee class like this okay and then what i need to do is let's first create some specific attributes for my teacher so let's say for example that a teacher has attribute called subject so this here is the subject that my teacher is teaching and then let's say also that the teacher will have a functionality that is going to be specific for this class only and that functionality will be called prepare lesson for example so i'm going to say void prepare lesson like this okay and what i want to do here is i want to do something like this so i want to say for example the name of that teacher and then i won't say that he or she is preparing lesson from this subject here so let's delete this empty space so i'm going to say std c out and then let's put the name of my teacher so name like this and then let's say is preparing and then here i want to put the name of my subject like this and then let's add lesson okay now there are a few problems that we have with this class here the first problem is that these here are private which means that we will not be able to access them outside of this class here because everything inside the class is private by default so that is going to be the first problem and let's fix it so i'm going to say public like this okay now second thing that is going to be a problem for us is that this teacher class here does not have a constructor so if i try to create an object of type teacher i will not be able to do that so let's demonstrate that error now i'm going to say teacher like this and let's call it t and well if i do this only we should get an error which says default constructor of teacher cannot be referenced which means that we need to implement a constructor for this class here as we did for this class here so as we did for our developer class so let's do that i am going to create a constructor called teacher like this and then this teacher constructor will receive these three properties that our employee has like this and then it will receive another parameter called subject subject okay now this constructor is going to pass these three properties to constructor of base class so this one here let's do that let's say let's say here employee and then inside i will pass name and company and age and then here this teacher class will take care of constructing this part so i'm going to say that my subject is equal to this subject that we received in our constructor okay and now if i return down here and i try to make a teacher let's name the teacher jack for example and he is going to work in a school called cool school if such thing exists okay and then he's going to be 35 years old and he is going to be history teacher for example okay now we have successfully created our teacher jack and i am going to collapse this and then i want to test this method here so i'm going to say teacher t dot and then prepare lesson okay and if i run this program it says that jack is preparing history lesson okay and then one more problem that we have with this class here is that our teacher t does not have access to properties of our employee class so if i type t dot as you can see it has access only to these two properties so in order to fix that problem i am going to add public here okay and if i try to make jack ask for promotion let's see if jack gets the promotion because i didn't get promotion okay it says jack got promoted excellent and i didn't and that is because jack is 35 years old and i am 25 years old okay so if you don't know what i'm talking about you will have to return to the part where we are talking about um encapsulation i believe okay so that was the story of inheritance we created two derived classes one is developer and the other one is teacher and those two classes are inheriting from a class called employee as you can see here and here and we will be using these classes in our next example to explain our next concept which is polymorphism as i said fourth principle of objectoriented programming is called polymorphism and this is the one that i see people struggle with the most for some reason i don't know why because it is pretty simple and cool as you will see so it is very simple but only if you understand the things that i have explained so far in this course so the first thing that i want to explain is what is polymorphism uh the word itself comes from greek language and it is a compound of poly and morph which means many forms and in programming polymorphism describes the ability of an object or a method to have many forms now the most common use of polymorphism in programming is when a parent class reference is used to refer to an object of a child class does that sound a little bit complex when i say it like that i believe that it does and i agree but stick with me for a couple of minutes and let me show you how simple this really is on the example that we have here so in order to explain how polymorphism works let's return to our employee class so this one here i'm going to collapse this and then what i want to do in my employee class is i want to implement one more method and let's call that method work so i'm going to say void work and then here in this method what i want to do is i want to say for example out um let's say name of this employee and then let's say that that employee is checking email and then he is checking also task backlog okay it's backglog okay task backlog and then he is performing those tasks and so on okay and let's add end line like this okay now let's return to this main function here and what i want to do is i want to invoke that new work method that i just implemented and i want to invoke that method on this developer and teacher class because considering the developer and teacher are inheriting from that employee class we should be able to do that so if i say d dot work and then t dot work let's see what will we get if i run this program okay it says here selena is checking email task backlog performing tasks and so on and then jack is also checking email task backlog and performing those tasks but one thing that i don't like is i don't like me checking emails and checking task backlog and so on what i like is i like to write code so how about implementing this work method on my developer class as well so let's return here to my developer class and what i want to do here is i want to copy this method like this but instead of checking email and checking task backlog and so on what i want to do here is i want to say that i am writing code so let's say salina is writing and then let's put this programming language here like this and then let's say code okay and now i'm going to do the same for this teacher class here so let's copy this method and then paste it in my teacher class but instead of writing code teacher is going to be doing something else so what teacher does well teacher teaches so i'm going to say the name of my teacher which is jack in this situation so jack is teaching and then let's put the name of his subject which is history i believe okay now one thing that you must notice is that this work method has the same name here and then here as well and it also has the same name in this base class so it is called work but the implementations of this method this work method are different here it says that an employee is checking an email and checking task backlog and so on and then developer has also its own implementation which says that developer is writing code because that is his work and then teacher is teaching his subject which is his job so i have here invoked these two work methods and let's see what will happen if i run my program now okay now it is better it says that salvina is writing c plus code and jack is teaching history okay now let's make one small improvement to the code that we have here or actually two improvements and the first one is going to be this writing with double t okay what is this this is criminal and then the second one is going to be the rule that i mentioned in the beginning when i said the most common use of polymorphism so let me copy that definition here and then we will implement it literally word by word so here it is and it says the most common use of polymorphism is when a parent class reference is used to refer to a child class object so let's see what this means in practice i'm going to delete these two lines because i don't need them anymore and then what i want to do is i want to create a pointer of type employee like this and one quick disclaimer if you are not familiar with pointers i am going to refer you to my channel which is code beauty with where i have an entire playlist which is dedicated to pointers so make sure to watch that and then you can continue with this example here so again i have created an employee pointer and what i want to assign to this pointer is not going to be an employee object so i want to assign to this pointer here a reference of this developer and then this teacher class so here i'm going to say you are going to hold a reference to this developer here and this here is the rule so a pointer of base class which is this here can hold reference to derive class object which is this part here so so that is just the rule why well because this developer here this developer is deep down inside it is an employee because developer is inheriting from employee as we already could see in the previous examples of this course so now that i have done this let's do the same for our teacher so i'm going to copy this line and then here i'm going to name this employee 1 and then this is going to be my employee 2 and here i will say that employee 2 will hold the reference of my teacher here so now what i want to do and what i want to achieve with this is the following wouldn't it be nice if i could do something like this so employee one dot work okay and then employee two dot work and this symbol here is used when you want to access members using a pointer so instead of dot symbol when you use a pointer you use this symbol here okay so wouldn't it be nice if this here worked well let's see maybe it does if i run my program as you can see it again says alina is checking email and task backlog and performing tasks and so on and jack is doing the same and he's a teacher and i'm developer so that means that this here does not work but if you only knew how close we are to making this work you are literally missing only one tiny little thing that i didn't tell you to make this here work so what that thing is well let's return to our employee class and then here this work method let's make this work method virtual so i'm going to say virtual here so let's run our program now and as you can see it says saudina is writing c plus code and jack is teaching history so it works wait i have to explain this okay so let's return to our employee class to explain what just happened well look at this function here this virtual void function this function with this virtual keyword is known as virtual function and what that means well it means that when a virtual function is invoked it says hey can you please check if there is implementation of this function in my derived classes and if yes please execute that instead so what ends up happening is that the most derived version of this function here is going to be executed and that is this function here for developer and then this function here for teacher so does that mean that if we didn't for example have implementation of function called work in our developer that our developer then would do this that our employee has in its work function the answer is yes so let me comment this just to demonstrate how it would behave so now i commented implementation of work function in my developer class so if i run the program now as you can see it says salina is checking email and task backlog and performing some random tasks and then jack is teaching and this is happening because teacher class has its own implementation of work method work function but developer class does not so here developer is going to execute parents class method work which is this method here so that's why i am checking email and task backlog and performing random tasks instead of writing c plus code so let's close this and let's now return this i'm going to uncomment it like this and let's run my program once more and as you can see everything works again and we have this polymorphic behavior so that ladies and gentlemen is polymorphism so let me give you one little tip of what we can do with this knowledge now so let's close this and i'm going to return to my main function and here as you can see here we are creating a base class pointer to a derived class object which is in the situation developer and then in this situation it is teacher and then in some other situation it can be some other type of employee so if we created more derived classes which we could do we could create for example derived class called bus driver or pilot or singer or actor doctor and so on and then we could keep objects of those derived classes like this so we could reference them with this base class pointer because they would derive from employee as well and then imagine situation where you had 100 or thousand or even 10 000 employees and then you are storing those like this like we did with our developer and our teacher and then you could literally in one line say employee dot work and what would happen is that all of those different types of employees would start doing their own job so painters would paint singers would sing actors would act doctors would talk with patients or something i don't know so that is the most beautiful thing that we have achieved with this here so i hope that you enjoyed this video if you did give it a thumbs up and then also if you want more videos like this one you can visit my channel which is code beauty and there i have a lot of videos related to programming and c plus and also leave me a comment i would love to read something like hey i am coming from precode camp or something like that on one of my videos so thank you very much for watching and i'm going to see you in some next video on this channel and then if you decide to visit code beauty youtube channel i will definitely see you in one of my videos bye so now i'm going to take a break for a couple of hours but for you it is going to be just a couple of seconds because i'm going to pause the video here and for this i want to try a transition that i never did before and it is this one so what is polymorphism the word polymorphism comes from latin language and it means or is it greek 2 000 years later i'm just going to skip this information so if i hover over this as you can see we still have an error but we have a different error which means that we are making progress also visit me on my channel which is code beauty and subscribe there and also leave me a comment i would love to read something like hey selena i am coming from free code camp and your course was great or hey salina i am coming from free code camp and your course was excellent or perfect or outstanding or something like that you know
