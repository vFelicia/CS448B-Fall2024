With timestamps:

00:00 - hello world so today i want to talk why
00:02 - serverless is a really cool tool
00:05 - i don't know software engineering
00:08 - technique or whatever it is
00:11 - for empowering developers so the first
00:14 - question to ask is why you're interested
00:16 - in learning this so maybe to start out
00:19 - we should go one step backwards and
00:22 - answer the question what is serverless
00:24 - i'm sure you already heard it million
00:26 - times but it will be brief so serverless
00:29 - is competing execution as an utility so
00:31 - it's like the water top at your house
00:33 - you just drink it you flush your toilet
00:36 - you wash your clothes use it to solve
00:38 - different problems that you have at your
00:40 - house but you really don't care how
00:42 - you're building have structured the
00:44 - pipes and how the city managed to
00:47 - deliver the water from the central water
00:50 - tower to your house and you don't care
00:52 - how the country gets that water and how
00:55 - it comes to you
00:57 - you don't care about the infrastructure
00:58 - about the water you care that it's just
01:00 - there
01:02 - and you can drink it whenever you need
01:03 - it
01:04 - and
01:05 - one thing about water or other utility
01:07 - is that you just pay as much as you so
01:09 - if one day it's hot and you want to
01:12 - water all your garden
01:14 - you will pay quite a lot of water
01:16 - because you fill your pool you water
01:17 - your garden
01:19 - it's very hot summer day
01:21 - so yeah but then maybe you went on
01:24 - holidays and you didn't spend anything
01:26 - no water use because there was no one at
01:28 - home and then your bill of water is
01:30 - close to zero
01:32 - same happens with electricity and other
01:34 - utilities and the idea behind serverless
01:36 - is similar is to
01:38 - have computing execution as in utilities
01:41 - so you can use it as much as you want it
01:44 - can be scale so if you need to fill
01:47 - pools of computing power you are able to
01:50 - and you don't care how your provider of
01:53 - computing power solves that problem for
01:55 - you but if some months you are on
01:57 - holidays and you don't want to have any
01:59 - computing power you just don't pay for
02:02 - it so to summarize serverless is
02:04 - computing power as an utility it can
02:06 - scale automatically
02:09 - and you pay as much as you use so why
02:11 - you care about learning this why you
02:14 - care that's a valid question and you
02:16 - should ask it all the time before
02:18 - starting to learn something there's so
02:20 - many technologies around and it's hard
02:22 - to decide when which ones you should
02:25 - choose
02:26 - and so
02:27 - first i will give my answer to server
02:29 - developers if you're a server developer
02:31 - serverless is the next thing after
02:33 - containers i'm sure you learned docker a
02:35 - couple of years ago now it's time to
02:37 - learn serverless it's just how the
02:40 - evolution goes if you want to keep on
02:42 - the trend and you want to have a cool
02:44 - job
02:45 - for the future you should learn this so
02:48 - sorry man
02:50 - but if you're a client developer then
02:53 - the story becomes a little bit different
02:55 - because your main job is not to produce
02:57 - server
02:58 - so why you should care if you're a web
03:00 - developer or an android developer ios
03:03 - developer game developer all these
03:05 - client-facing
03:07 - developers that are not working in the
03:09 - server why they care about learning
03:12 - serverless and i think my first answer
03:14 - is if you're a client developer
03:17 - and you learn serverless you will become
03:19 - way free
03:22 - yes
03:23 - free
03:24 - how i how you become free as a developer
03:27 - because i think it's a very easy fast
03:29 - step to become a full stack developer
03:33 - and i'm not meaning with this that
03:35 - server developers will be
03:37 - like discarded and we don't need them
03:39 - anymore no no no no i'm meaning that now
03:42 - as a game developer or a web developer
03:44 - you're able to solve some problems that
03:46 - are pretty simple
03:48 - without the need of asking
03:50 - another developer for help
03:52 - so
03:53 - if you're at home doing side projects or
03:55 - you have a small company or you have a
03:58 - project with little people then you can
04:00 - be more independent and solve more
04:03 - problems
04:04 - so you can create a small server that
04:06 - connects to a database and returns
04:08 - something or that process some data or
04:11 - resizes some image or you are able to
04:15 - get done a lot of things with very
04:18 - little knowledge because if you're a web
04:19 - developer you might already know
04:20 - javascript very well so it's just about
04:22 - learning
04:23 - some tools to work in the serverless
04:25 - world if you're a game developer maybe
04:27 - you're using c sharp so you can also go
04:29 - to net and start working with serverless
04:33 - so there is
04:34 - quite easy
04:36 - steps in order to get started and i
04:39 - think serverless is a really good way
04:41 - to get started with the cloud
04:43 - because
04:45 - i think the whole
04:46 - at least in aws the whole serverless
04:49 - landscape has been done with the
04:50 - mentality that people don't need to be
04:53 - experts to get started so getting
04:56 - started with these tools is way easier
04:58 - to get started with instances and bbc's
05:01 - and all that kind of
05:03 - older stuff if you want to get started
05:05 - with cloud if you want to be more
05:06 - independent if you want to become a full
05:08 - stack developer you should learn
05:10 - serverless so now that i convince you i
05:12 - will show you some steps to get started
05:15 - so let's go to the screen and let's go
05:17 - to it
05:18 - so the first thing you need to do in
05:20 - order to get started with serverless if
05:22 - you don't have one is to create your aws
05:24 - account i have made a video about this i
05:27 - will link the link of this video in a
05:29 - card in the corner or then in the
05:31 - description box below
05:34 - so you can go there and check how to
05:36 - create a secure free aws account
05:39 - so follow the instructions
05:41 - and you will be ready
05:43 - after doing that you need to go to the
05:46 - serverless.com web page and
05:49 - install
05:51 - and configure serverless framework and
05:53 - for that there are instructions they're
05:54 - pretty straightforward so just follow
05:57 - those four steps from which you have
05:59 - already done one that is number three
06:01 - that you created your account download
06:04 - now download serverless and then
06:06 - configure the provider credentials after
06:09 - you have your aws account and then
06:11 - you're ready to go after you have that
06:13 - done those two things now you're ready
06:15 - to go to your terminal create a new
06:18 - directory i will call it first
06:20 - serverless project you can call it
06:22 - whatever you want i will get inside the
06:25 - directory and then i will create my
06:26 - first serverless project that is pretty
06:28 - straightforward sls create that's just
06:31 - template
06:32 - aws node.js that's just name and the
06:35 - name of the project so this is
06:38 - the easiest way to create a new
06:40 - serverless project
06:42 - you just do sls that is serverless that
06:44 - is what you just have installed a
06:46 - serverless framework create to create
06:48 - the project you pass the template name
06:51 - in this case we are going to use aws
06:53 - ours our cloud and node.js as our
06:55 - framework and then the name of the
06:57 - project that we will need it's pretty
06:59 - straightforward just press enter
07:01 - and serverless framework will generate
07:03 - some files for you
07:05 - then i always do npm init
07:08 - that's yes because that creates a empty
07:11 - packet json so if i need dependencies or
07:14 - something i will put them there after
07:16 - that i open this in atom
07:18 - and
07:19 - you can see that we have three files
07:22 - first one is the handler js packet json
07:24 - and serverless yaml let's visit the
07:26 - serverless yaml first the serverless yml
07:29 - is the file where all the serverless
07:31 - framework configuration is so this is a
07:33 - file specific for the serverless
07:35 - framework here you will define the
07:37 - service name that is the name that we
07:39 - just put when we created the project the
07:41 - provider
07:42 - and under runtime that's come from the
07:44 - template in this case it's aws and then
07:47 - ojs 6.10
07:49 - and then you will also define all the
07:51 - resources aws resources
07:54 - including the lambdas and the api
07:56 - gateway so if you scroll down
07:58 - the template already has one lambda
08:00 - function called hello that is managed
08:03 - with the handler code that is in the
08:06 - file handler and in the method hello we
08:09 - are going to go there in a second
08:11 - but if we want to define an api gateway
08:13 - that is a front door to our lambda that
08:16 - is the end point we just do this event
08:20 - then we put htp because this will be
08:22 - triggered by an http event that is the
08:25 - path hello and in the method get
08:28 - so easy like that we create a new
08:30 - endpoint
08:31 - that will trigger this piece of code
08:33 - it's very very simple
08:35 - then we can go check this package json
08:37 - that doesn't have anything interesting
08:39 - for now
08:40 - and there you have the handler.js that
08:44 - has the information has the code on how
08:47 - to run this
08:49 - lambda
08:50 - and here is a very simple
08:52 - hello method that comes out from the
08:55 - template
08:56 - and the only thing you will see is an
08:58 - object response and a callback that is
09:01 - returning that response
09:04 - we are going to modify that response
09:06 - object
09:07 - to just change the message hello and
09:09 - congrats on your first serverless
09:11 - project
09:12 - so you can see that we are deploying the
09:14 - right project
09:16 - and then this body will include also an
09:20 - event
09:21 - that is the event that comes from the
09:23 - handler so usually in the handlers you
09:26 - have
09:27 - three parameters the vent the contacts
09:29 - and the callback the event is the
09:31 - information the lambda
09:33 - is getting from the trigger in this case
09:35 - from the api gateway and you will be
09:38 - able to see it in the body and the
09:40 - response is a 200 status code
09:43 - so
09:44 - then when we
09:46 - save this
09:48 - and
09:49 - we go back to our terminal we can run
09:52 - sls deploy that means serverless deploy
09:56 - so this is deploying this project into
09:58 - aws because we have configured the
10:00 - credentials from serverless framework
10:03 - your your aws credentials into
10:04 - serverless framework is possible to just
10:07 - with a small command put all this
10:09 - project into your cloud serverless
10:11 - framework will package this and then
10:13 - deploy it serverless framework is using
10:15 - cloud formation but you don't need to
10:17 - know what is going on in the background
10:19 - to understand what is going on at the
10:21 - beginning
10:22 - so i will speed this up because usually
10:24 - this takes a couple of minutes
10:26 - and you cannot do anything after the
10:28 - deployment is complete you will see this
10:31 - service information
10:32 - that will show you the service name the
10:34 - stage we have not defined the stage but
10:36 - serverless framework by default if you
10:38 - don't define the stage we'll put it to
10:40 - the stage step you can have any name if
10:43 - you defined it same with the region if
10:45 - you don't define any region it will just
10:47 - deploy us east one that is north
10:50 - virginia
10:51 - you can put in the aws region that you
10:54 - like the stack name that's the cloud
10:56 - formation name of the stock that you
10:58 - don't need to know for now we don't have
11:00 - any api keys we have one endpoint that
11:02 - is that one and one function that is
11:04 - also there and then if we grab the
11:07 - endpoint that url and we paste it in our
11:09 - browser we can call the lambda you see
11:12 - that the endpoint is a get
11:15 - in the path hello
11:16 - so if we put it in the browser we will
11:19 - see that there is the message hello
11:22 - congrats on your first serverless
11:23 - project and then the input that is all
11:26 - the event that this lambda is getting
11:29 - from the api gateway this was a video
11:32 - for today i hope you like it if you did
11:34 - give a big thumbs up
11:35 - and if you have any questions comments
11:37 - concerns things you want to see in the
11:39 - future just let them know in the comment
11:42 - box below i always happy to make content
11:45 - that you want to watch

Cleaned transcript:

hello world so today i want to talk why serverless is a really cool tool i don't know software engineering technique or whatever it is for empowering developers so the first question to ask is why you're interested in learning this so maybe to start out we should go one step backwards and answer the question what is serverless i'm sure you already heard it million times but it will be brief so serverless is competing execution as an utility so it's like the water top at your house you just drink it you flush your toilet you wash your clothes use it to solve different problems that you have at your house but you really don't care how you're building have structured the pipes and how the city managed to deliver the water from the central water tower to your house and you don't care how the country gets that water and how it comes to you you don't care about the infrastructure about the water you care that it's just there and you can drink it whenever you need it and one thing about water or other utility is that you just pay as much as you so if one day it's hot and you want to water all your garden you will pay quite a lot of water because you fill your pool you water your garden it's very hot summer day so yeah but then maybe you went on holidays and you didn't spend anything no water use because there was no one at home and then your bill of water is close to zero same happens with electricity and other utilities and the idea behind serverless is similar is to have computing execution as in utilities so you can use it as much as you want it can be scale so if you need to fill pools of computing power you are able to and you don't care how your provider of computing power solves that problem for you but if some months you are on holidays and you don't want to have any computing power you just don't pay for it so to summarize serverless is computing power as an utility it can scale automatically and you pay as much as you use so why you care about learning this why you care that's a valid question and you should ask it all the time before starting to learn something there's so many technologies around and it's hard to decide when which ones you should choose and so first i will give my answer to server developers if you're a server developer serverless is the next thing after containers i'm sure you learned docker a couple of years ago now it's time to learn serverless it's just how the evolution goes if you want to keep on the trend and you want to have a cool job for the future you should learn this so sorry man but if you're a client developer then the story becomes a little bit different because your main job is not to produce server so why you should care if you're a web developer or an android developer ios developer game developer all these clientfacing developers that are not working in the server why they care about learning serverless and i think my first answer is if you're a client developer and you learn serverless you will become way free yes free how i how you become free as a developer because i think it's a very easy fast step to become a full stack developer and i'm not meaning with this that server developers will be like discarded and we don't need them anymore no no no no i'm meaning that now as a game developer or a web developer you're able to solve some problems that are pretty simple without the need of asking another developer for help so if you're at home doing side projects or you have a small company or you have a project with little people then you can be more independent and solve more problems so you can create a small server that connects to a database and returns something or that process some data or resizes some image or you are able to get done a lot of things with very little knowledge because if you're a web developer you might already know javascript very well so it's just about learning some tools to work in the serverless world if you're a game developer maybe you're using c sharp so you can also go to net and start working with serverless so there is quite easy steps in order to get started and i think serverless is a really good way to get started with the cloud because i think the whole at least in aws the whole serverless landscape has been done with the mentality that people don't need to be experts to get started so getting started with these tools is way easier to get started with instances and bbc's and all that kind of older stuff if you want to get started with cloud if you want to be more independent if you want to become a full stack developer you should learn serverless so now that i convince you i will show you some steps to get started so let's go to the screen and let's go to it so the first thing you need to do in order to get started with serverless if you don't have one is to create your aws account i have made a video about this i will link the link of this video in a card in the corner or then in the description box below so you can go there and check how to create a secure free aws account so follow the instructions and you will be ready after doing that you need to go to the serverless.com web page and install and configure serverless framework and for that there are instructions they're pretty straightforward so just follow those four steps from which you have already done one that is number three that you created your account download now download serverless and then configure the provider credentials after you have your aws account and then you're ready to go after you have that done those two things now you're ready to go to your terminal create a new directory i will call it first serverless project you can call it whatever you want i will get inside the directory and then i will create my first serverless project that is pretty straightforward sls create that's just template aws node.js that's just name and the name of the project so this is the easiest way to create a new serverless project you just do sls that is serverless that is what you just have installed a serverless framework create to create the project you pass the template name in this case we are going to use aws ours our cloud and node.js as our framework and then the name of the project that we will need it's pretty straightforward just press enter and serverless framework will generate some files for you then i always do npm init that's yes because that creates a empty packet json so if i need dependencies or something i will put them there after that i open this in atom and you can see that we have three files first one is the handler js packet json and serverless yaml let's visit the serverless yaml first the serverless yml is the file where all the serverless framework configuration is so this is a file specific for the serverless framework here you will define the service name that is the name that we just put when we created the project the provider and under runtime that's come from the template in this case it's aws and then ojs 6.10 and then you will also define all the resources aws resources including the lambdas and the api gateway so if you scroll down the template already has one lambda function called hello that is managed with the handler code that is in the file handler and in the method hello we are going to go there in a second but if we want to define an api gateway that is a front door to our lambda that is the end point we just do this event then we put htp because this will be triggered by an http event that is the path hello and in the method get so easy like that we create a new endpoint that will trigger this piece of code it's very very simple then we can go check this package json that doesn't have anything interesting for now and there you have the handler.js that has the information has the code on how to run this lambda and here is a very simple hello method that comes out from the template and the only thing you will see is an object response and a callback that is returning that response we are going to modify that response object to just change the message hello and congrats on your first serverless project so you can see that we are deploying the right project and then this body will include also an event that is the event that comes from the handler so usually in the handlers you have three parameters the vent the contacts and the callback the event is the information the lambda is getting from the trigger in this case from the api gateway and you will be able to see it in the body and the response is a 200 status code so then when we save this and we go back to our terminal we can run sls deploy that means serverless deploy so this is deploying this project into aws because we have configured the credentials from serverless framework your your aws credentials into serverless framework is possible to just with a small command put all this project into your cloud serverless framework will package this and then deploy it serverless framework is using cloud formation but you don't need to know what is going on in the background to understand what is going on at the beginning so i will speed this up because usually this takes a couple of minutes and you cannot do anything after the deployment is complete you will see this service information that will show you the service name the stage we have not defined the stage but serverless framework by default if you don't define the stage we'll put it to the stage step you can have any name if you defined it same with the region if you don't define any region it will just deploy us east one that is north virginia you can put in the aws region that you like the stack name that's the cloud formation name of the stock that you don't need to know for now we don't have any api keys we have one endpoint that is that one and one function that is also there and then if we grab the endpoint that url and we paste it in our browser we can call the lambda you see that the endpoint is a get in the path hello so if we put it in the browser we will see that there is the message hello congrats on your first serverless project and then the input that is all the event that this lambda is getting from the api gateway this was a video for today i hope you like it if you did give a big thumbs up and if you have any questions comments concerns things you want to see in the future just let them know in the comment box below i always happy to make content that you want to watch
