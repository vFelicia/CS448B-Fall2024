With timestamps:

00:04 - [Music]
00:05 - awesome
00:06 - thanks pj anyone have any other job
00:08 - announcements or
00:10 - anyone looking for a job that wants to
00:12 - come say hi
00:18 - awesome
00:19 - well this has been a lot of fun to um
00:23 - to start presenting here's the part
00:24 - where i say
00:26 - i'm definitely going to post the slides
00:27 - on my blog tonight and you go check
00:30 - tonight and they're not there
00:32 - and you check tomorrow and they're not
00:34 - there next week next month
00:37 - in three months you're gonna get tired
00:38 - of waiting you're gonna email me
00:40 - in six months i'm gonna reply and say no
00:42 - i'm definitely gonna post them on my
00:43 - blog tonight and i will never post them
00:45 - on my blog
00:46 - which is why you can go to robrich.org
00:48 - right now
00:50 - and click on presentations right here
00:52 - scroll down to our meetup right here
00:54 - post jquery and you can pop open the
00:56 - slides that we're going to look at right
00:58 - now
00:59 - feel free to get ahead all of these blue
01:01 - links are links that will click you off
01:04 - into the details about that which is
01:06 - really cool
01:08 - so while you're here on my blog click on
01:10 - about me and you'll get to this page and
01:12 - this talks a little bit about things
01:14 - that i've done
01:15 - i'm a microsoft mvp i'm a friend of red
01:18 - gate
01:19 - az gift camp is really exciting az gift
01:21 - camp brings volunteer developers
01:23 - together with charities who otherwise
01:25 - couldn't afford software services we
01:27 - sell form teams friday after work sunday
01:30 - afternoon we deliver completed projects
01:32 - sleep is optional caffeine provided
01:35 - if you're ever in phoenix come look us
01:37 - up because easy gift camp is really
01:39 - really cool
01:40 - uh i worked on sql server source control
01:42 - basics that's a lot of fun um mine is
01:44 - chapter eight
01:46 - it's a cool book i was a core
01:48 - contributor um to gulp in version two
01:51 - and version three so that's kind of
01:52 - where i cut my teeth in
01:54 - javascript which is pretty fun
01:56 - some of the user groups that i'm
01:57 - familiar with associated with um i help
02:00 - with the phoenix angular meetup and also
02:02 - the southeast valley.net user group
02:05 - i said southeast valley.net user group
02:06 - earlier and somebody said
02:09 - is that by hollywood
02:11 - southeast valley in phoenix it's
02:13 - actually in chandler arizona so that's
02:15 - pretty cool
02:19 - so one of the things i'm particularly
02:20 - proud of is i replied to an episode of
02:22 - the.net rocks podcast they read my
02:25 - comment on the air they sent me a mug
02:28 - i got a mug
02:30 - so enough about me let's talk about
02:32 - jquery
02:35 - so we talked about this guy
02:37 - jquery
02:39 - jquery the write more do less javascript
02:41 - library jquery was invented in a
02:45 - in a time when the web was really
02:48 - hard to use and jquery was great in
02:51 - paving over the differences between
02:53 - browsers making javascript much more
02:55 - approachable and it was great
02:58 - in its day
03:00 - so jquery came out in january 2006 and i
03:03 - i grant that you know some of us learned
03:05 - it yesterday but um it started in
03:08 - january 2006.
03:10 - so in january 2006 the the browsers of
03:14 - choice were internet explorer 7
03:17 - netscape 8 firefox 2 we're up to like
03:21 - firefox 50 something right
03:24 - safari 2
03:26 - those are kind of the browsers of the
03:27 - day does anyone still support ie7
03:33 - this is the era that jquery was built
03:35 - for
03:37 - so what else happened in uh 2006 well
03:40 - youtube is one year old
03:42 - um
03:43 - yelp
03:44 - is two years old
03:45 - myspace is three
03:47 - awesome way to go buy space
03:50 - some other websites that were really
03:51 - popular in 2006.
03:54 - um apparently shockwave games were all
03:56 - the rage
03:57 - tailrank.com was a great news aggregator
04:00 - uh deadspin.com was a great sports has
04:03 - anyone ever heard of any of these
04:06 - zipcar
04:09 - yeah i think i've heard a shockwave
04:11 - yeah this was 2006.
04:14 - so
04:15 - the state of the web in 2006 we had this
04:18 - really inconsistent
04:20 - browser experience
04:22 - each browser implemented the dom
04:25 - differently
04:26 - javascript the engine was cloned in
04:29 - great detail and very carefully and
04:31 - although the javascript engines were
04:33 - very consistent across the browsers but
04:35 - the dom the way that we interacted with
04:38 - the page was very very different
04:40 - so javascript is hard well javascript
04:44 - wasn't hard the dom was hard but
04:47 - javascript was hard and so what jquery
04:49 - brought us was this really elegant
04:52 - simple paradigm of how to deal with
04:55 - javascript in the browser it paved over
04:58 - all of these browser inconsistencies and
05:00 - it gave us a really really simple
05:03 - experience
05:04 - to be able to target any browser
05:07 - which is wonderful that's a great and uh
05:09 - noble goal it did a great job it's on
05:11 - you know 90 some odd percent of the
05:13 - websites and you know now we've gotten
05:15 - to that point where
05:17 - it did a great job and browsers have
05:19 - caught up
05:22 - well
05:22 - 2006
05:24 - what's the state of the web today
05:27 - today
05:28 - we have evergreen browsers
05:30 - we have html5 which arguably now is more
05:33 - of a marketing term than a technical
05:34 - term but it's really hard
05:37 - to not
05:39 - upgrade chrome
05:41 - when you restart it it's really hard to
05:43 - not have the latest version of firefox
05:46 - or safari
05:47 - or edge
05:49 - in all of the places where we use
05:50 - browsers as soon as they finish
05:53 - inventing the thing
05:55 - within the next six weeks we're going to
05:56 - have that
05:58 - on every browser that we're working with
06:01 - yeah
06:02 - safari for windows is dead
06:05 - um
06:06 - ie 4.5 for mac was awesome
06:09 - and painful
06:12 - yeah safari is the new ie6 so you know
06:14 - that'll be kind of interesting
06:18 - but these browsers update automatically
06:20 - html5 html is now a living standard and
06:23 - so all of these features come in
06:25 - automatically javascript is a living
06:27 - standard and so we move forward we can
06:29 - take advantage of the features that come
06:32 - today
06:33 - almost universally across every browser
06:35 - experience
06:40 - so here's my pitch
06:42 - jquery was great
06:44 - but jquery is old the web is different
06:46 - now jquery solved the problem that we
06:49 - had yesterday
06:51 - the problem that we have today is
06:52 - different
06:54 - probably we have muscle memory built up
06:57 - where we're like i need to solve a
06:58 - problem i need to oh let me just pull in
07:00 - jquery and let me do you know dollar dot
07:03 - paren and um now we're into jquery land
07:07 - that's interesting
07:09 - but we probably don't need jquery just
07:12 - to be able to grab
07:15 - dollar open print
07:17 - probably we can do these things with
07:19 - native browser tools
07:23 - any questions so far
07:28 - i'm totally gonna make vj dizzy this is
07:31 - gonna be fun
07:36 - okay so let's dig into what is jquery
07:40 - jquery is for the most part these four
07:43 - main functional groups we have ajax dom
07:46 - manipulation event handling and
07:48 - animation
07:51 - are there any things that you do with
07:52 - jquery that aren't these four
08:01 - uh yeah i printed out on toilet paper
08:03 - and i use it no i'm just kidding
08:06 - ajax dom manipulation event handling and
08:09 - animation it made these really easy for
08:11 - us back in 2006 and it gave us a really
08:13 - elegant experience on these four topics
08:17 - today
08:18 - all of these are much easier in other
08:20 - places let's look at each one
08:23 - ajax
08:25 - can we build it
08:27 - well with anything that we look at here
08:30 - there's that obvious argument of build
08:32 - versus buy
08:34 - should i pull in jquery should i write
08:36 - my own
08:37 - should i pull in a different library i
08:39 - love this micro js site because there's
08:41 - all kinds of really really tiny
08:44 - libraries to do interesting things
08:47 - jquery is
08:48 - two megs
08:50 - g-zipped and compressed
08:52 - so
08:53 - competing with two megs
08:55 - let's look for an ajax library
08:59 - and see if we can get something smaller
09:00 - than two megs
09:02 - 1.8 k
09:03 - 4.2 k
09:05 - 3.5 k
09:06 - 0.6 k
09:10 - one of the things that makes jquery
09:11 - wonderful is it's that great user
09:13 - experience one of the things that makes
09:14 - it painful is it's two megs
09:18 - that's big
09:20 - so you might want to just cruise through
09:23 - looking for the feature that you want
09:24 - here on microjs.com go grab the micro
09:27 - library pull in that library and you
09:30 - might get to that goal a lot sooner
09:35 - so as you grab these slides later click
09:37 - on micro js.com and you'll get straight
09:39 - there
09:43 - so ajax
09:45 - ajax is built on top of xml http request
09:49 - that's kind of the object that makes
09:51 - this happen and xml http request now is
09:54 - built into every browser
09:56 - let's pull up
09:58 - can i use
10:00 - and let's talk about
10:02 - xml http request
10:07 - can i use is a great site that will
10:12 - that will highlight
10:14 - the particular feature
10:16 - and what browser versions it's supported
10:19 - in so along the main line is the current
10:22 - version of that particular browser and
10:24 - if there are older versions or newer
10:26 - versions that are also released you know
10:28 - canary versions or beta builds then
10:31 - they'll be listed here too so i can just
10:33 - kind of walk across this chart and i can
10:35 - see oh yeah xml http request is
10:37 - supported everywhere
10:39 - except for upper mini
10:41 - does anyone use opera mini
10:46 - so it'll even show ie 11 that's the last
10:49 - version supported by microsoft and so
10:51 - you can see you know all of the things
10:53 - xml http request is supported everywhere
10:57 - xml http request is great and xml http
11:00 - request actually has a
11:02 - library that
11:03 - a newer api
11:06 - called fetch and fetch
11:08 - is promise based and fetch is also
11:12 - built into all the browsers um if you're
11:14 - supporting ie11 there's a quick polyfill
11:17 - that'll give you a fetch api that just
11:19 - falls back to xml http request and you
11:22 - know makes that happen which is really
11:23 - elegant
11:25 - so xml http request is baked in back in
11:28 - the day we used to need to
11:30 - try and figure out if xml http request
11:32 - was defined and if it wasn't defined we
11:35 - had to go instantiate the activex
11:37 - control that was xml http request 2
11:40 - and maybe sometimes that was defined so
11:42 - we had to
11:42 - look at xml http request for
11:45 - and
11:46 - we don't need to do that
11:48 - xml http request is now baked in we
11:50 - don't need to do all of that gyration to
11:53 - get to it
11:55 - so xml http request
11:58 - the ajax library
12:00 - that we can pull off now
12:02 - fits on a slide
12:04 - and it's hard to you know kind of digest
12:06 - all of this code at once but it fits on
12:09 - a slide
12:10 - i pass in the method i pass in the url i
12:13 - might pass in a post data and i pass in
12:16 - a callback
12:17 - it's going to go create a new xml http
12:20 - request pass in that url and method it
12:22 - may post data i'm making the assumption
12:24 - here that it's json data that i'm
12:27 - sending off and so i'm also setting the
12:29 - json
12:31 - accept and content type headers
12:34 - then once i'm done
12:36 - if i'm
12:37 - um ready state four whatever that means
12:40 - and i've succeeded then i'm going to
12:42 - call the callback with my response text
12:47 - if all you're doing is reaching for
12:49 - jquery so you can do dollar.ajax
12:53 - do this
12:56 - what's really interesting is i have this
12:57 - ajax method and i'll just pull this into
13:00 - visual studio code
13:03 - if i want to for example
13:08 - add my authentication header
13:26 - i can just customize that to add
13:29 - my authorization details
13:32 - because this code now sits in my library
13:35 - instead of jqueries i don't have to
13:36 - figure out how to hack into their api to
13:38 - add additional headers
13:41 - i may want to add additional error
13:43 - handling here
13:55 - that's not a great api surface but we
13:56 - understand now i can reach into this and
13:59 - do
14:00 - all kinds of interesting things to make
14:02 - that work for my business logic i now
14:05 - have control over the ajax function
14:13 - any questions on ajax so far
14:25 - this json library
14:27 - yes
14:28 - let's go back to canius.com and let's
14:31 - ask for json
14:34 - there's json
14:35 - it is built into every library
14:37 - everywhere we used to pull in json2 just
14:40 - in case
14:41 - we don't need to do that anymore
14:46 - that was a great question thank you
14:55 - so that's just javascript
14:57 - this is just straight javascript yes
15:01 - yep stick it in the js file and run it
15:06 - stick it in chrome developer tools
15:10 - ah stick it in chrome developer tools
15:13 - right here
15:14 - and you can run it that way too
15:21 - i'm not actually gonna run it because
15:22 - that would be kind of interesting but
15:24 - yeah exactly
15:25 - it's just javascript
15:38 - exactly what if i want to consider not
15:42 - just 200 of success but anything
15:46 - less than
15:49 - 400 to be a success
15:51 - oh that's not code i can type in
15:57 - anything less than 400 is success so 201
16:01 - um 301
16:03 - 302 you know ideally
16:05 - the xml http request has already
16:07 - resolved the 201s and the are the 301s
16:09 - and the 302s but yes i can reach into
16:12 - all kinds of interesting things and do
16:14 - interesting logic there i control this
16:16 - code
16:20 - yeah stick it in your utility library
16:22 - somewhere and you're all set
16:28 - so ajax we've kind of solved ajax let's
16:31 - talk about dom manipulation
16:33 - well the first part of dom manipulation
16:36 - is dom selection
16:38 - and we can pull up can i use again and
16:40 - look at document.getelementbyid
16:43 - and see that that's been in the native
16:45 - browser spec for quite some time all
16:47 - html5 browsers support
16:49 - document.getelementbyid
16:51 - and what's really cool jquery kind of
16:54 - invented this of passing in css
16:55 - selectors
16:57 - into a selection engine to be able to
16:59 - get the results there too
17:01 - we now have
17:02 - document.queryselector where we can do
17:04 - exactly that
17:06 - i can do really funky css selectors i
17:09 - can pass them to document query
17:10 - selectoral and it will return to me an
17:12 - array of matching dom elements
17:18 - so if you're reaching for jquery just so
17:20 - you can select stuff
17:21 - just use document.queryselectorall
17:26 - so one could do something like this
17:32 - for dollar sign equals document dot
17:36 - query selector all
17:41 - now i can do stuff like
17:45 - that
17:46 - does that look familiar
18:05 - is that life familiar
18:10 - document.queryselectorall and
18:12 - document.elementbyd are baked into the
18:14 - browser and we can leverage them we no
18:16 - longer need to reach for jquery just to
18:18 - pick things
18:19 - so when we're doing this we're not just
18:21 - picking things but we're also modifying
18:24 - things we really like add class and
18:26 - remove class you know that's one of the
18:28 - ones that i reach for all the time
18:30 - we have dot
18:32 - dot class list on all the things in
18:34 - addition to class name which is that
18:36 - full string we have class list which is
18:38 - an array of those things
18:40 - so now i can add and remove into this
18:43 - array in the way that i would add and
18:45 - remove any other array
18:49 - so i just add some class over the top of
18:51 - this thing and it just concatenates that
18:54 - to the list not duplicating it if it
18:56 - already exists i can do the same thing
18:58 - to remove it and it will remove it out
18:59 - of that list sticking it back on that
19:01 - dom element
19:07 - we always go for that text method and
19:10 - that dot html method which is really
19:12 - cool
19:13 - we have inner html and
19:16 - text content that can do exactly that as
19:18 - well and it's just a property so we can
19:20 - go grab the content out of an element or
19:23 - we can set the content into an element
19:25 - to
19:26 - to be able to manipulate the html and
19:28 - the text in this way
19:37 - any questions so far about dom
19:39 - multiplication
19:46 - yep
19:52 - what has changed in the browser to make
19:53 - this happen
19:54 - this was uh
19:57 - the focus of this was html5 when they
19:59 - said html5 is a thing they said all
20:02 - browsers must have these minimum
20:04 - features
20:05 - and going forward html has kind of
20:07 - become this living standard and so
20:08 - browsers are kind of pushing that edge
20:10 - but any browser that was html5 compliant
20:13 - had these
20:17 - all of them are and therefore we have
20:19 - that we have it in all the browsers now
20:23 - that was a great question yep so it's
20:25 - all standardized now there's not a trick
20:28 - trick word for
20:30 - edge
20:31 - versus firefox it's all inner html or
20:34 - text content yes all of these property
20:37 - names are the same in every browser
20:39 - where we used to have some that used
20:42 - this name and some that use that name
20:44 - they've all standardized
20:47 - there's now a html consortium that also
20:50 - validates this and you know as proposals
20:53 - come into place they have various levels
20:55 - of these proposals getting accepted that
20:58 - give us you know validation in one
21:00 - browser or validation in two browsers or
21:02 - you know a complete set across all of
21:03 - them
21:07 - yeah
21:08 - what about the other
21:10 - jquery method like select the closest
21:13 - discipline and also
21:16 - a gbs next
21:18 - all those kind of handy utility not
21:21 - utility
21:22 - other methods
21:28 - that is a great question what about all
21:30 - of those other methods sibling and
21:36 - closest and next and previous this site
21:39 - is you might not need jquery.com
21:42 - and i love this site because you start
21:43 - out by picking your internet explorer
21:45 - version i wish there was a none button
21:48 - here
21:49 - because i'm like
21:50 - totally don't care
21:53 - but then given an internet explorer
21:55 - version which is you know the oldest
21:57 - browser i can now flip through this and
21:59 - i can look for the thing that i want to
22:01 - do so
22:03 - closest
22:05 - sibling
22:07 - so in jquery we say dot next
22:10 - the next element sibling
22:13 - is that thing that we can use in every
22:14 - browser
22:17 - so i can go for
22:20 - oh is is pretty nice that's cool
22:22 - is this class we can do this matches
22:25 - function which is pretty cool
22:28 - usually when i'm reaching for a jquery
22:30 - function and i'm like but
22:32 - but i just need this jquery thing to to
22:34 - work i'll pull up you
22:37 - you might not need jquery.com and i'll
22:39 - search for that javascript that jquery
22:41 - function and i'll go find the javascript
22:43 - that makes that happen
22:45 - i really love this site
22:51 - any other questions here
22:55 - yep
22:56 - um
22:59 - i thought there was a bit of
23:00 - a security issue where people could
23:02 - start inserting script tags into your
23:04 - values and so we were told to use dot
23:06 - text but both of those being the
23:08 - equivalent to the value
23:10 - is there a way to get around that with
23:11 - the new
23:12 - without using
23:14 - that is a great question so i have
23:16 - something like this
23:23 - and that's the script that i have
23:27 - now that's great
23:31 - shame on the guy who typed that but
23:32 - still
23:34 - this is a cross-side scripting attack
23:36 - i'm trying to get this into the dom so
23:39 - that i can do something and i'm probably
23:40 - not going to just alert i'm probably
23:43 - going to i don't know
23:44 - swipe your session cookie or
23:47 - post data to your bank on your behalf
23:49 - and transfer transfer all your money off
23:52 - or
23:53 - log in to use facebook and post some
23:55 - interesting posts to all your friends
23:57 - so i have this string that is supposed
23:59 - to do malicious stuff
24:01 - so i could do something like this
24:03 - string template equals
24:06 - i want to say div class equals make it
24:10 - pretty
24:13 - plus
24:14 - some string
24:16 - plus
24:18 - end div
24:20 - and so my goal here is to you know add
24:22 - that text together with my other stuff
24:24 - and and that becomes my template and i'm
24:26 - not going to show this and and now my ui
24:29 - looks awesome
24:30 - if my string said
24:32 - hello bob
24:34 - because my string doesn't say hello bob
24:36 - because my string says go execute this
24:38 - javascript what i'm going to do when i
24:40 - say
24:42 - var div equals
24:44 - document.get
24:46 - by id
24:49 - my div
24:50 - so i'm going to go grab that div and i'm
24:52 - going to say div dot inner html equals
24:56 - template
24:58 - now what happened
25:01 - boom
25:05 - [Applause]
25:06 - i want to not do that
25:09 - i want to say
25:12 - make this
25:15 - not execute that javascript i want i
25:17 - don't want it to treat it like markup i
25:19 - want it to treat it like text
25:22 - so what i'm going to do is i'm going to
25:24 - say
25:26 - i'm not going to get my div i'm going to
25:28 - go get the
25:29 - make it pretty
25:32 - id
25:33 - so i'm going to presume that this is
25:35 - already in my page somewhere i may need
25:37 - to show it that's okay but that markup
25:39 - is already in my page
25:41 - and so because of that i'm not going to
25:43 - use template anymore
25:45 - and i'm going to say
26:00 - because i'm using the text property
26:04 - then the browser will correctly html
26:06 - encode that
26:07 - and now i'll just have a bunch of you
26:09 - know angle brackets on my page where
26:12 - that you know hello name
26:15 - piece used to be
26:17 - i've chosen to use this as text
26:20 - to guard myself against that cross-side
26:22 - scripting attack
26:26 - jquery makes it something like this to
26:28 - say
26:35 - here's a function
26:37 - that may take in some
26:39 - some stuff
26:41 - and basically what they're doing is
26:42 - they're saying
26:48 - that
26:51 - we just built the text method in jquery
26:54 - that's cool
26:57 - maybe i need that text method
27:00 - maybe i can just call inner text
27:02 - directly
27:06 - now they're also going to do something
27:07 - like this
27:13 - so that i can do you know get the text
27:15 - back out if i don't pass it in
27:22 - you might not need jquery
27:24 - that was a great question what other
27:26 - questions do you have right here
27:32 - dot inner text on uh so pre-div dot your
27:35 - text
27:38 - it's assigning some string to it how do
27:40 - we get what the text is at that point
27:41 - like
27:42 - whereas jquery right there it returns it
27:49 - great question how do i get the text
27:51 - back out
27:52 - i just read the property
28:00 - your teacher's gonna be so mad at me
28:02 - tomorrow
28:03 - sorry
28:07 - okay
28:08 - so we've gotten content we've
28:10 - manipulated it we've added classes and
28:12 - removed classes
28:14 - um
28:15 - yep go ahead
28:22 - what's the difference between inner text
28:23 - and text content
28:26 - somebody did
28:29 - a typo and should have used this
28:30 - property everywhere um shame on that guy
28:33 - good thing that we have a peer review
28:35 - thank you
28:37 - it's not called inner text it's called
28:38 - text content
28:41 - good catch
28:46 - text content
28:50 - i think
28:52 - let me go ask can i use
28:56 - yup text content
29:00 - yes text is definitely a gentler method
29:03 - to get into this
29:07 - text content
29:10 - yeah inner html and text content it's
29:13 - like
29:16 - can you like at the very least
29:18 - capitalize it consistently
29:24 - yeah either do uppercase or camel case
29:26 - or um
29:28 - you know do we do dashes or do we not do
29:31 - dashes or
29:32 - we can go like this and we can um
29:38 - do both of them
29:43 - yes because standards are
29:52 - xml in the awesome because you would
29:54 - never want to do an http request if it
29:56 - wasn't for xml
29:58 - oh of course
30:00 - why is it xml instead of just http
30:02 - request well because when microsoft put
30:05 - together the thing to make outlook web
30:08 - access the html part of the thing had
30:11 - already been code frozen but the xml
30:12 - part wasn't
30:14 - so if they called it xml http request
30:16 - then they could get it into the browser
30:20 - yeah
30:21 - oops
30:24 - okay so we've changed the content
30:28 - and so we could for example
30:31 - start looking at something like this and
30:33 - we already coded this which was really
30:34 - interesting if we just set
30:36 - document.queryselectorall to
30:39 - dollar sign and then we can do something
30:41 - like dollar.go grab the thing and then
30:43 - go loop through each of these doing
30:45 - interesting things let's add a class
30:47 - let's remove a class let's set some text
30:50 - content into each one we're starting to
30:52 - do that same thing that we do with
30:54 - jquery.each instead of jquery we have an
30:57 - actual array and we just you know for
30:59 - reach through that array
31:08 - so the next thing that we want to do is
31:10 - we like that click event you know dollar
31:12 - dot
31:13 - dollar paren
31:15 - dot click
31:16 - well it turns out there's this browser
31:18 - event called add event listener where we
31:20 - can pass in the thing that we want to
31:22 - listen to like click
31:24 - and so we can go do exactly what we
31:26 - wanted to do before
31:29 - so
31:30 - we really like that click methodology
31:33 - let's build a click function
31:38 - and i'm going to take in an element and
31:39 - a function
31:44 - element dot
31:50 - add event listener
32:00 - i just built myself a click function
32:08 - well let's do that so i have this click
32:11 - function
32:14 - and it's just going to take in some
32:16 - element and some function and by wire up
32:19 - the click event handler
32:22 - and so now it's not quite the same
32:24 - experience as jquery
32:26 - because i'm passing in that get element
32:28 - by id result that actual element but i'm
32:31 - getting that same kind of you know
32:33 - jqueryish kind of feel
32:36 - without that 2meg download
32:47 - so i've got the events and that's
32:49 - interesting but i really like this
32:51 - i really like how jquery binds this in
32:54 - an interesting way and i really want
32:56 - this
32:59 - this this this as opposed to the other
33:01 - this is
33:02 - so i like this
33:05 - so the way we we accomplish this in
33:07 - jquery in javascript is we call
33:10 - function.bind and pass in to bind what
33:13 - this should be
33:16 - so the only difference then in my click
33:18 - event handler is i create this click
33:20 - function and i pass in
33:22 - function.bind element
33:25 - and now the element is this and now i
33:27 - can do this dot id and this dot attra
33:30 - and you know all those interesting
33:31 - things this dot class name
33:36 - rather than just taking the function
33:37 - we're calling function.bind to set this
33:39 - correctly
33:47 - so
33:48 - let's go rebuild jquery we've kind of
33:50 - got enough of these tools that we could
33:52 - do interesting things and try try to see
33:55 - if those five or eight features that we
33:57 - definitely reach for jquery for because
33:58 - it you know kind of makes
34:00 - sense for us let's see if we can do
34:02 - those
34:04 - well we really like that
34:05 - document.queryselectorall setting that
34:07 - to the dollar sign
34:10 - and then we like that click event
34:11 - handler so i'm just going to stick that
34:12 - click onto that
34:14 - dollar sign as well
34:18 - so i go i go stick this in the top of my
34:22 - utility class
34:26 - and then i'll say
34:28 - hey
34:32 - let me go grab the things
34:37 - results dot for each
34:46 - item and now i want to do item.click but
34:49 - that's not the way i built this i want
34:51 - to say click
34:53 - item
34:59 - and now i'm doing the the content that i
35:02 - i just wired up a click event handler i
35:04 - selected all the things and that feels
35:06 - very
35:08 - jqueryish
35:09 - i could do a similar thing
35:12 - if i only want one i can say
35:22 - go grab the thing
35:24 - i only want one result
35:27 - and i'm going to wire that up into my
35:29 - click event handler
35:37 - not quite jquery but really close
35:42 - and the code to pull that off
35:44 - was four lines
35:46 - compared to two megs
35:49 - that's interesting
35:55 - so the next step is we may want to stick
35:57 - on that ajax function so you know i'm
35:59 - just going to take that dollar.ajax and
36:02 - i'm going to assign it to that function
36:03 - that we built
36:05 - method url data callback
36:08 - now i kind of like that i take in an
36:10 - argument instead so i'm going to take
36:13 - this ajax function and i'm going to
36:14 - stick it in our library and i'm going to
36:16 - say instead of just calling it
36:18 - method url data and callback
36:21 - i'll just take in args
36:24 - and so args.url
36:28 - args.method
36:30 - and i may say
36:31 - and if you don't pass it in it's get
36:36 - args.body
36:42 - and then
36:44 - this is args.success
36:50 - so now we've got ajax in our library
36:58 - any questions so far
37:06 - but but i i really want it to be this
37:09 - dollar dot and then go click and do the
37:12 - things okay so let's take it to the next
37:15 - level
37:17 - so here's that
37:18 - function that will take in a selection
37:21 - and we're going to go wire up some cool
37:23 - events to this selection so that jquery
37:26 - can do some things auto magically so
37:28 - let's go first grab our matches
37:31 - and we'll do the 4-h around those
37:33 - matches and we'll say for each thing
37:36 - let's wire up an on
37:39 - method
37:40 - let's wire up a click method
37:42 - an add class method a remove class
37:45 - method here we've got the text and html
37:47 - method and so ultimately what we're
37:49 - returning down here at the bottom
37:52 - is this array
37:54 - of all of the things that are wired up
37:57 - to do all of this stuff
38:00 - and in our application if we also need
38:02 - on blur and on focus then we can you
38:05 - know rig up focus and blur events
38:08 - or the interesting thing with this on
38:10 - event is it's just going to get passed
38:13 - in whatever
38:14 - event you want it to so you could use on
38:17 - click and then wire up click event
38:20 - handlers that way
38:25 - if all you need is that much
38:27 - that's jquery
38:29 - and it has an identical look and feel
38:31 - here's our ajax library and we did all
38:34 - of the things that we you know just
38:36 - sticking out on dollar.ajax
38:40 - and we've kind of built up this ajax
38:43 - clone
38:45 - any questions so far
38:54 - yep they just condense their library
38:57 - why don't they just condense their
38:58 - library good call
39:04 - yes exactly it supports really really
39:07 - old browsers
39:09 - jquery 1 supports ie6
39:12 - and if ever they
39:13 - stopped supporting ie6 that would be a
39:15 - breaking change jquery 2 drops support
39:18 - for ie6 but supports ie8
39:21 - jquery 3
39:22 - hopefully they'll take it a bit farther
39:24 - i hear they're specking out jquery 4
39:26 - maybe they'll move more modern and you
39:29 - know drop support for all things and at
39:31 - that point maybe it could be as simple
39:33 - as the library we built here
39:38 - right now it's still two megs though and
39:39 - that's after getting rid of ie6
39:42 - so you know they've got a ways
39:48 - yep
39:55 - determine um browser what's the color of
39:58 - line for the browser support
40:00 - go back all the way to 98
40:03 - so that
40:04 - will affect your decision
40:08 - good call how do i know what browsers i
40:11 - need to support and because of those
40:13 - browsers how do i know what features i
40:14 - can use
40:16 - ideally
40:17 - you look to something like google
40:19 - analytics or a similar platform where it
40:21 - can tell you the browsers of
40:24 - your users and based on those browser
40:27 - selections you know that hey if we stop
40:29 - supporting ie6 we're going to lose
40:32 - 0.5 percent of our users 0.5 percent of
40:35 - our users relates to this much of our
40:38 - sales and so we're going to lose
40:42 - 20 000 in sales next year if we stop
40:44 - supporting ie6
40:46 - maybe our business can handle that maybe
40:48 - it can't
40:50 - maybe we look at the analytics and we go
40:52 - 0.02 percent of our users use ie6 if we
40:56 - stop supporting ie6 we will lose
40:59 - 20
41:00 - what's our development costs in
41:02 - supporting ie6 well it's definitely more
41:05 - than twenty dollars it's probably more
41:06 - than twenty thousand dollars let's stop
41:10 - supporting ie6
41:16 - google analytics is great because google
41:18 - analytics very specifically targets your
41:21 - market in a really elegant way if you
41:23 - want kind of
41:26 - more
41:28 - broad versions
41:34 - let me see if i can find it in 28
41:36 - seconds or less
41:42 - can i use has a really interesting table
41:45 - of usage statistics and this is you know
41:47 - them harvesting usage statistics across
41:49 - the world
41:50 - and there are interesting npm packages
41:52 - that are based on this
41:54 - can i use
41:56 - that
41:57 - that will pull in interesting things
42:03 - and i'm completely browser list there we
42:06 - go
42:09 - so i can say inside browser list i would
42:13 - like to support the last one version and
42:16 - browsers that are more than one percent
42:18 - of the global market
42:19 - and
42:21 - that will cap that off at that version
42:23 - and so i can you know do some really
42:25 - interesting things there
42:26 - um
42:30 - uh browser list is cool and there's
42:32 - another site that lets me explore what
42:34 - browsers um relate to this
42:37 - that the name has escaped me i'm gonna
42:39 - remember it on the way home today though
42:46 - so ultimately what browsers can i
42:48 - support
42:49 - ideally that's less of a technical
42:52 - decision and more of a business decision
42:54 - let's look at our market share and the
42:56 - impact to our customer base if we stop
42:58 - supporting that browser
43:00 - so if i stop supporting the browser what
43:02 - features can i use now or what features
43:05 - do i need to not use and that's where we
43:07 - go look at can i use
43:09 - we've been using var today which is es5
43:13 - can i use let and const yet
43:18 - yep
43:21 - well how about fetch can i use fetch
43:23 - and so i'll do exactly this i'll come
43:25 - poke into all of these
43:28 - as i find a new api that i like i'll
43:30 - come to can i use and i'll plug that
43:32 - feature in and i'll say so based on my
43:34 - usage statistics and what browsers that
43:36 - i think that i'll support can i use this
43:39 - feature yet
43:42 - can i use sv
43:44 - svn
43:46 - svg
43:48 - yep
43:50 - can i use canvas
43:52 - can i use for each can i use array.sort
43:56 - come ask can i use and that will help
43:58 - you make that determination
44:05 - what other questions do you have so far
44:16 - i think you're doing a pretty good job
44:17 - explaining it
44:19 - awesome
44:21 - so jquery is four things jquery is dom
44:23 - manipulation jquery is ajax jquery is
44:30 - and
44:31 - animation and we haven't talked about
44:34 - animation yet what's up with animation
44:36 - post jquery i have this show and this
44:38 - hide thing going and i have this you
44:40 - know open and it's a nice fade and
44:44 - animation
44:46 - animation is cool
44:50 - back in 2006 when we wanted to do this
44:52 - the way we did this is we set up a timer
44:54 - and we said okay every 100 milliseconds
44:57 - move it a little bit more
44:59 - 100 seconds more move it well now it's a
45:01 - little bit jacky well how about every 10
45:03 - milliseconds
45:05 - oh i'll make it really smooth how about
45:06 - every one millisecond
45:09 - well
45:10 - how does that relate to
45:12 - my
45:13 - screen's refresh rate
45:16 - well it doesn't so am i calculating
45:18 - frames that the browser is just ignoring
45:21 - or am i
45:22 - not calculating enough frames and now my
45:24 - animation looks choppy
45:27 - so now we have a new api that is request
45:30 - animation frame and this is baked into
45:33 - all browsers as well
45:34 - let's go check can i use because you
45:36 - know it's a thing
45:38 - so request animation frame is even in ie
45:40 - 11 which is wonderful
45:44 - whenever the browser is ready to display
45:48 - another frame
45:50 - it will call request animation frame
45:53 - i'll do my calculation i'll be able to
45:55 - show it what happened and at that point
45:58 - now it's showing the animation as fast
46:01 - as i can possibly see it
46:05 - jquery doesn't use request animation
46:07 - frame under the hood jquery 3 may but
46:09 - you know for backwards compatibility it
46:11 - couldn't
46:14 - if i want to do animation and i want to
46:16 - make it performant request animation
46:17 - frame is definitely the way to go
46:19 - and so we should move away from using
46:21 - jquery for those types of things and use
46:24 - request animation frame
46:27 - well i really like show
46:30 - and hide
46:32 - well
46:34 - here's a css class that gives me show
46:37 - and hide
46:39 - and it just happens to have a transition
46:41 - so i've got css3 animations here which
46:44 - is really cool keyframe animation so i
46:46 - just add the show
46:49 - class and i remove the hide class and i
46:51 - get that fade in
46:54 - effect that's cool
46:58 - if you just want to hide
47:00 - hide is just setting the style.display
47:02 - to none
47:03 - show is removing the none and it goes
47:06 - back to wherever you need it to be
47:10 - so you could set it to block you could
47:13 - set it to inline inline block and that
47:16 - will show it
47:22 - so if you want to take animation a bit
47:24 - farther probably you want to look for a
47:26 - framework green sock and animate.css are
47:29 - great css animation libraries that will
47:32 - give you access to really rich
47:34 - javascript apis as well where i can say
47:37 - kick off this css animation and when it
47:39 - finishes call my callback
47:41 - or let me interrupt it or let me do
47:44 - interesting things both of them are
47:45 - great apis they definitely have a very
47:48 - different api surface than jquery
47:51 - but they'll give you modern really
47:53 - smooth
47:55 - animations
48:00 - ultimately as we look towards these
48:02 - animation things we're also looking
48:05 - towards other frameworks and will land
48:07 - on something like this
48:09 - angular react vue or aurelia
48:15 - we're probably fighting over reactant
48:17 - view right now
48:19 - angular 6 is definitely a thing and
48:22 - aurelia is really awesome they really
48:24 - embrace web standards and really try to
48:25 - get the framework to
48:27 - fade away from you which is wonderful
48:30 - if you're leveraging one of these
48:33 - component libraries
48:34 - you probably have an animation system
48:36 - built into that as well
48:39 - you probably also have a text templating
48:41 - engine and so you don't need to do that
48:43 - you know
48:44 - raw inner html and text content thing
48:49 - as you're leveraging these libraries you
48:50 - may also have an ajax library
48:54 - angular has very specifically leaned on
48:56 - rxjs for this
48:58 - react has one built in and vue has one
49:00 - built in aurelia says hey there's this
49:02 - king thing in browsers called fetch
49:06 - go fetch
49:08 - and so that's really cool too
49:12 - as you're moving in this direction these
49:14 - libraries probably will have a lot more
49:17 - interesting things for you
49:28 - a high-level yep on uh angular versus
49:32 - uh
49:34 - framework if you going to build and
49:36 - touch on which one would you
49:38 - choose
49:40 - good question so we have some javascript
49:43 - frameworks here
49:45 - which one is the best
49:50 - what size is the perfect coffee mug
50:00 - each of these libraries has different
50:02 - preferences different opinions different
50:05 - strengths and weaknesses and i would
50:07 - invite you to try out many of them and
50:09 - find which one best matches your needs
50:12 - and your skills and best matches the
50:14 - problem that you have
50:17 - if you don't have the problem that
50:18 - angular solves don't use angular
50:21 - if you don't have the problem that react
50:23 - solves don't use react
50:25 - ultimately compare angular in react and
50:28 - view and get comfortable with the one
50:30 - that you like the best
50:34 - or walk into your team and say angular
50:36 - view and react and somebody's going to
50:38 - talk to you for an hour and a half about
50:40 - why that's exactly their favorite tool
50:43 - and i agree for your team that one is
50:45 - the perfect choice
50:50 - what is the best framework
50:52 - the best framework is the one that makes
50:54 - you happy
50:55 - the one that makes you productive
50:59 - my best framework may or may not be your
51:01 - best framework and that's okay
51:06 - does that unanswer your question
51:12 - what other questions do you have so far
51:16 - yep
51:18 - promises good question can i use
51:20 - promises
51:22 - can i use
51:25 - promise
51:27 - yes i can
51:29 - into all evergreen browsers promises are
51:31 - built in
51:32 - what's really cool is promises then
51:34 - become the foundation
51:36 - for things like service workers and the
51:38 - fetch api and so anything that supports
51:41 - fetch api and service workers which by
51:43 - the way is all of them
51:44 - will support promises as well
51:51 - so how about async and await
52:00 - all of them
52:04 - you can use async and await in
52:05 - production on your real site today
52:09 - unless you're selling to those guys in
52:10 - china that use xp with internet explorer
52:17 - that's not 8. joke
52:19 - yep
52:21 - i wish i was
52:29 - [Music]
52:31 - win kidding
52:33 - yes
52:34 - a year ago
52:35 - yeah
52:37 - you can do some really cool things in
52:40 - niche markets where they have very
52:41 - specific and eclectic browser habits
52:45 - i've been dissing on opera mini a little
52:47 - bit but
52:49 - in some markets opera mini is perfect
52:52 - because what opera mini does is it
52:54 - downloads the content to their servers
52:57 - minifies it and then sends it to your
53:00 - browser
53:01 - that can be wonderful if you have a 2g
53:04 - connection
53:05 - and you pump your own water
53:09 - the next billion users may use
53:11 - opera mini
53:13 - and if that's the market you're catering
53:15 - for exactly go after opera mini
53:18 - and understand both the cost of
53:20 - development involved and also the
53:22 - benefits to your business
53:27 - if you're building a platform as a
53:29 - service a modern cloud app
53:32 - probably that's less important
53:40 - what other questions do you have so far
53:44 - yep
53:45 - that's kind of an interesting rule of
53:47 - thumb i like that if the project lasts
53:49 - more than a few weeks then jquery may
53:51 - not be a great choice and maybe you want
53:53 - to lean on one of these frameworks i
53:55 - like that
53:56 - where's that magic cut off
53:58 - i look at the durability of the project
54:01 - you know is the goal to like deliver
54:03 - fast and throw it away in a week you
54:04 - know a really quick marketing site or is
54:07 - the goal for this application to sit in
54:08 - an enterprise for
54:10 - a few years
54:13 - what's the skill level of the team that
54:15 - i'm working on
54:16 - also what's the complexity of the thing
54:18 - do i just need that submit button to
54:20 - work or do i need to do a whole lot of
54:22 - animation around making that submit
54:24 - button turn into this animation and and
54:27 - reload the page in interesting ways
54:32 - and ultimately
54:34 - you'll get a feel for this and you'll go
54:36 - you know
54:37 - this was hard
54:39 - let's find an easier way to do that
54:41 - let's lean on one of these frameworks
54:42 - that will do a lot of that for us
54:44 - or wow we have a lot of frameworks
54:46 - involved let's see if we can simplify it
54:48 - by removing some of these frameworks
54:51 - did that unanswer your question
54:52 - yeah
54:54 - that's cool complexity is kind of an
54:56 - interesting thing to poke at there
55:01 - so we've got yep go ahead
55:05 - good question
55:08 - so this guy told us to get rid of jquery
55:11 - when is this a bad idea
55:13 - when do i not want to do that thing
55:16 - well if i've got a site that it has you
55:19 - know five or eight
55:21 - ten years of labor built into building
55:23 - this and it's built on jquery you
55:25 - probably don't want to spend five or
55:27 - eight or ten years rebuilding that
55:29 - without jquery
55:30 - if your base framework depends on jquery
55:33 - then probably you don't want to rip out
55:35 - jquery angularjs angular 1 depends on
55:38 - jquery bootstrap 3 depends on jquery
55:41 - underscore depends on jquery
55:44 - but
55:45 - angular 2 does not angular 6 doesn't
55:48 - bootstrap 4 doesn't
55:51 - um
55:52 - underscore unfortunately is no longer a
55:54 - thing
55:56 - so as you kind of upgrade your stack
55:58 - then you can probably get away from
56:00 - these what is underscore no why is
56:04 - underscore did you say underscore is not
56:05 - a thing underscore isn't one of the
56:07 - popular frameworks right now underscore
56:10 - was great in getting us past jquery's
56:13 - nested wing into kind of a more
56:16 - frameworky approach and then angular
56:18 - came out and underscore kind of fell off
56:20 - as a
56:22 - as a framework
56:23 - if i've got a modern thing with
56:25 - bootstrap 4 and angular material i
56:28 - probably don't need jquery
56:30 - so if we're in a highly regulated
56:32 - environment and our code base is you
56:34 - know a little bit crusty
56:36 - probably removing jquery isn't a good
56:38 - option as well
56:39 - you know there are some industries where
56:42 - it's like
56:42 - we need to ship exactly this stuff
56:46 - um we need very specific validation of
56:48 - our application we need to be able to
56:50 - prove that it works in all the ways so
56:53 - the moment that you touch that thing is
56:54 - the moment that we have to retest
56:57 - everything don't rip that jquery out of
56:59 - that
57:01 - but the new content that you build today
57:04 - you might be able to get away with just
57:06 - a helper library maybe dollar sign isn't
57:08 - the variable that you craft for it
57:10 - or a few of these little helper methods
57:12 - like click and
57:14 - text and you know those types of things
57:16 - might make your life a little bit easier
57:18 - and you're moving in the right direction
57:20 - to get to a more modern stack
57:22 - if you're focusing on the wordpress type
57:24 - of thing like i just need a marketing
57:26 - site and your wordpress template uses
57:28 - jquery
57:30 - yeah it's probably not a good idea to
57:32 - rip out jquery out of your template
57:34 - maybe it makes sense but probably it
57:36 - doesn't
57:37 - look towards that cost benefit analysis
57:39 - how much time is involved in yanking
57:41 - jquery out of my project versus how much
57:43 - revenue will i gain from doing so
57:46 - if seo is really the killer feature of
57:48 - your business and you really want to
57:50 - rank high in google
57:51 - having really fast page load times and
57:53 - really light pages
57:55 - will definitely help you
57:57 - and so maybe removing jquery will really
57:59 - help
58:01 - maybe you'll get that much cost savings
58:03 - by telling the boss that that hero image
58:05 - in the top left corner that's you know
58:07 - five megs
58:08 - optimizing that image to be 500k or 50k
58:12 - might gain you that much seo benefit as
58:15 - well
58:15 - that was a great question thanks
58:17 - what other questions do we have so far
58:19 - so jquery was really elegant
58:22 - in solving our problems in 2006.
58:26 - today's browsers are different
58:28 - and we might not need jquery
58:30 - we looked at you might not need
58:32 - jquery.com already that's the site where
58:34 - i pick the ie version and i can scroll
58:36 - down to the features i'll frequently use
58:39 - that site to go say
58:41 - but my muscle memory is doing this
58:42 - what's the uh regular javascript way to
58:45 - do that
58:46 - which one is my favorite
58:54 - yes i do like working with them
58:56 - and that's definitely my framework of
58:58 - choice
59:00 - ultimately i walk down through a couple
59:02 - of things
59:03 - as i'm looking at which framework i want
59:04 - to choose i look at what are the
59:06 - cultural implications in my business you
59:08 - know some people are like i definitely
59:10 - won't use microsoft or i must use
59:12 - microsoft
59:14 - i'll look at
59:15 - the team that may take over for me
59:18 - and you know what skills do they have do
59:20 - they have more skills in this particular
59:22 - framework or that particular framework
59:24 - i'll look at what are the problems that
59:27 - i'm trying to solve and which tools best
59:30 - match those problems
59:32 - and then if all else is equal in all of
59:34 - those
59:35 - then my preferences start to take choice
59:38 - but ultimately usually i'll hit one of
59:40 - these business or technical
59:42 - answers before the preference piece
59:45 - comes into play
59:46 - we have a.net shop and so we're going to
59:49 - use net or we have an angular shop and
59:51 - we really like typescript okay let's
59:53 - build this in angular
59:55 - or if i'm given a problem where it's
59:57 - like
59:58 - just solve this business problem now i
60:00 - can go look at all the things and i can
60:01 - pick and that's really fun too
60:04 - which one's my favorite
60:06 - the one that accomplishes the job that
60:08 - delivers value to my customers the
60:10 - fastest so you know this is kind of an
60:12 - interesting meme in that direction what
60:14 - if drivers were hired like programmers i
60:16 - love this blog post that's really cool
60:18 - job requirements professional skills in
60:20 - driving normal and heavy freight cars
60:22 - buses and trucks trolley buses trains
60:24 - subways tractors shovel diggers
60:26 - contemporary light and heavy tanks
60:28 - currently in use by nato countries
60:30 - skills and rally and extreme driving are
60:32 - obligatory formula one driving
60:33 - experience is a plus knowledge and
60:35 - experience and repairing of piston and
60:36 - rotor winkle engines automatic and
60:38 - manual transmissions ignition ignition
60:40 - systems board computers abs abd gps and
60:43 - car audio systems by world known
60:44 - manufacturers obligatory experience with
60:47 - car painting and tin smithing tasks is a
60:49 - plus the applicants must have
60:51 - certifications by bmw general motors and
60:53 - bosch but not older than two years
60:55 - compensation 15 to 20 an hour depending
60:57 - on the interview result
61:01 - which basically is every job posting
61:03 - everywhere yeah education requirements
61:05 - bachelor's degree of engineering
61:07 - at 20 an hour so that is my pitch if the
61:11 - only reach reason that you are reaching
61:14 - for jquery is because it was familiar
61:17 - you might do better and you can save
61:18 - yourself the 2 meg download
61:21 - ultimately look to the framework that
61:22 - makes you happy and really enjoy coding
61:25 - this is a lot of fun to do thanks for
61:26 - coming everybody
61:29 - [Applause]

Cleaned transcript:

awesome thanks pj anyone have any other job announcements or anyone looking for a job that wants to come say hi awesome well this has been a lot of fun to um to start presenting here's the part where i say i'm definitely going to post the slides on my blog tonight and you go check tonight and they're not there and you check tomorrow and they're not there next week next month in three months you're gonna get tired of waiting you're gonna email me in six months i'm gonna reply and say no i'm definitely gonna post them on my blog tonight and i will never post them on my blog which is why you can go to robrich.org right now and click on presentations right here scroll down to our meetup right here post jquery and you can pop open the slides that we're going to look at right now feel free to get ahead all of these blue links are links that will click you off into the details about that which is really cool so while you're here on my blog click on about me and you'll get to this page and this talks a little bit about things that i've done i'm a microsoft mvp i'm a friend of red gate az gift camp is really exciting az gift camp brings volunteer developers together with charities who otherwise couldn't afford software services we sell form teams friday after work sunday afternoon we deliver completed projects sleep is optional caffeine provided if you're ever in phoenix come look us up because easy gift camp is really really cool uh i worked on sql server source control basics that's a lot of fun um mine is chapter eight it's a cool book i was a core contributor um to gulp in version two and version three so that's kind of where i cut my teeth in javascript which is pretty fun some of the user groups that i'm familiar with associated with um i help with the phoenix angular meetup and also the southeast valley.net user group i said southeast valley.net user group earlier and somebody said is that by hollywood southeast valley in phoenix it's actually in chandler arizona so that's pretty cool so one of the things i'm particularly proud of is i replied to an episode of the.net rocks podcast they read my comment on the air they sent me a mug i got a mug so enough about me let's talk about jquery so we talked about this guy jquery jquery the write more do less javascript library jquery was invented in a in a time when the web was really hard to use and jquery was great in paving over the differences between browsers making javascript much more approachable and it was great in its day so jquery came out in january 2006 and i i grant that you know some of us learned it yesterday but um it started in january 2006. so in january 2006 the the browsers of choice were internet explorer 7 netscape 8 firefox 2 we're up to like firefox 50 something right safari 2 those are kind of the browsers of the day does anyone still support ie7 this is the era that jquery was built for so what else happened in uh 2006 well youtube is one year old um yelp is two years old myspace is three awesome way to go buy space some other websites that were really popular in 2006. um apparently shockwave games were all the rage tailrank.com was a great news aggregator uh deadspin.com was a great sports has anyone ever heard of any of these zipcar yeah i think i've heard a shockwave yeah this was 2006. so the state of the web in 2006 we had this really inconsistent browser experience each browser implemented the dom differently javascript the engine was cloned in great detail and very carefully and although the javascript engines were very consistent across the browsers but the dom the way that we interacted with the page was very very different so javascript is hard well javascript wasn't hard the dom was hard but javascript was hard and so what jquery brought us was this really elegant simple paradigm of how to deal with javascript in the browser it paved over all of these browser inconsistencies and it gave us a really really simple experience to be able to target any browser which is wonderful that's a great and uh noble goal it did a great job it's on you know 90 some odd percent of the websites and you know now we've gotten to that point where it did a great job and browsers have caught up well 2006 what's the state of the web today today we have evergreen browsers we have html5 which arguably now is more of a marketing term than a technical term but it's really hard to not upgrade chrome when you restart it it's really hard to not have the latest version of firefox or safari or edge in all of the places where we use browsers as soon as they finish inventing the thing within the next six weeks we're going to have that on every browser that we're working with yeah safari for windows is dead um ie 4.5 for mac was awesome and painful yeah safari is the new ie6 so you know that'll be kind of interesting but these browsers update automatically html5 html is now a living standard and so all of these features come in automatically javascript is a living standard and so we move forward we can take advantage of the features that come today almost universally across every browser experience so here's my pitch jquery was great but jquery is old the web is different now jquery solved the problem that we had yesterday the problem that we have today is different probably we have muscle memory built up where we're like i need to solve a problem i need to oh let me just pull in jquery and let me do you know dollar dot paren and um now we're into jquery land that's interesting but we probably don't need jquery just to be able to grab dollar open print probably we can do these things with native browser tools any questions so far i'm totally gonna make vj dizzy this is gonna be fun okay so let's dig into what is jquery jquery is for the most part these four main functional groups we have ajax dom manipulation event handling and animation are there any things that you do with jquery that aren't these four uh yeah i printed out on toilet paper and i use it no i'm just kidding ajax dom manipulation event handling and animation it made these really easy for us back in 2006 and it gave us a really elegant experience on these four topics today all of these are much easier in other places let's look at each one ajax can we build it well with anything that we look at here there's that obvious argument of build versus buy should i pull in jquery should i write my own should i pull in a different library i love this micro js site because there's all kinds of really really tiny libraries to do interesting things jquery is two megs gzipped and compressed so competing with two megs let's look for an ajax library and see if we can get something smaller than two megs 1.8 k 4.2 k 3.5 k 0.6 k one of the things that makes jquery wonderful is it's that great user experience one of the things that makes it painful is it's two megs that's big so you might want to just cruise through looking for the feature that you want here on microjs.com go grab the micro library pull in that library and you might get to that goal a lot sooner so as you grab these slides later click on micro js.com and you'll get straight there so ajax ajax is built on top of xml http request that's kind of the object that makes this happen and xml http request now is built into every browser let's pull up can i use and let's talk about xml http request can i use is a great site that will that will highlight the particular feature and what browser versions it's supported in so along the main line is the current version of that particular browser and if there are older versions or newer versions that are also released you know canary versions or beta builds then they'll be listed here too so i can just kind of walk across this chart and i can see oh yeah xml http request is supported everywhere except for upper mini does anyone use opera mini so it'll even show ie 11 that's the last version supported by microsoft and so you can see you know all of the things xml http request is supported everywhere xml http request is great and xml http request actually has a library that a newer api called fetch and fetch is promise based and fetch is also built into all the browsers um if you're supporting ie11 there's a quick polyfill that'll give you a fetch api that just falls back to xml http request and you know makes that happen which is really elegant so xml http request is baked in back in the day we used to need to try and figure out if xml http request was defined and if it wasn't defined we had to go instantiate the activex control that was xml http request 2 and maybe sometimes that was defined so we had to look at xml http request for and we don't need to do that xml http request is now baked in we don't need to do all of that gyration to get to it so xml http request the ajax library that we can pull off now fits on a slide and it's hard to you know kind of digest all of this code at once but it fits on a slide i pass in the method i pass in the url i might pass in a post data and i pass in a callback it's going to go create a new xml http request pass in that url and method it may post data i'm making the assumption here that it's json data that i'm sending off and so i'm also setting the json accept and content type headers then once i'm done if i'm um ready state four whatever that means and i've succeeded then i'm going to call the callback with my response text if all you're doing is reaching for jquery so you can do dollar.ajax do this what's really interesting is i have this ajax method and i'll just pull this into visual studio code if i want to for example add my authentication header i can just customize that to add my authorization details because this code now sits in my library instead of jqueries i don't have to figure out how to hack into their api to add additional headers i may want to add additional error handling here that's not a great api surface but we understand now i can reach into this and do all kinds of interesting things to make that work for my business logic i now have control over the ajax function any questions on ajax so far this json library yes let's go back to canius.com and let's ask for json there's json it is built into every library everywhere we used to pull in json2 just in case we don't need to do that anymore that was a great question thank you so that's just javascript this is just straight javascript yes yep stick it in the js file and run it stick it in chrome developer tools ah stick it in chrome developer tools right here and you can run it that way too i'm not actually gonna run it because that would be kind of interesting but yeah exactly it's just javascript exactly what if i want to consider not just 200 of success but anything less than 400 to be a success oh that's not code i can type in anything less than 400 is success so 201 um 301 302 you know ideally the xml http request has already resolved the 201s and the are the 301s and the 302s but yes i can reach into all kinds of interesting things and do interesting logic there i control this code yeah stick it in your utility library somewhere and you're all set so ajax we've kind of solved ajax let's talk about dom manipulation well the first part of dom manipulation is dom selection and we can pull up can i use again and look at document.getelementbyid and see that that's been in the native browser spec for quite some time all html5 browsers support document.getelementbyid and what's really cool jquery kind of invented this of passing in css selectors into a selection engine to be able to get the results there too we now have document.queryselector where we can do exactly that i can do really funky css selectors i can pass them to document query selectoral and it will return to me an array of matching dom elements so if you're reaching for jquery just so you can select stuff just use document.queryselectorall so one could do something like this for dollar sign equals document dot query selector all now i can do stuff like that does that look familiar is that life familiar document.queryselectorall and document.elementbyd are baked into the browser and we can leverage them we no longer need to reach for jquery just to pick things so when we're doing this we're not just picking things but we're also modifying things we really like add class and remove class you know that's one of the ones that i reach for all the time we have dot dot class list on all the things in addition to class name which is that full string we have class list which is an array of those things so now i can add and remove into this array in the way that i would add and remove any other array so i just add some class over the top of this thing and it just concatenates that to the list not duplicating it if it already exists i can do the same thing to remove it and it will remove it out of that list sticking it back on that dom element we always go for that text method and that dot html method which is really cool we have inner html and text content that can do exactly that as well and it's just a property so we can go grab the content out of an element or we can set the content into an element to to be able to manipulate the html and the text in this way any questions so far about dom multiplication yep what has changed in the browser to make this happen this was uh the focus of this was html5 when they said html5 is a thing they said all browsers must have these minimum features and going forward html has kind of become this living standard and so browsers are kind of pushing that edge but any browser that was html5 compliant had these all of them are and therefore we have that we have it in all the browsers now that was a great question yep so it's all standardized now there's not a trick trick word for edge versus firefox it's all inner html or text content yes all of these property names are the same in every browser where we used to have some that used this name and some that use that name they've all standardized there's now a html consortium that also validates this and you know as proposals come into place they have various levels of these proposals getting accepted that give us you know validation in one browser or validation in two browsers or you know a complete set across all of them yeah what about the other jquery method like select the closest discipline and also a gbs next all those kind of handy utility not utility other methods that is a great question what about all of those other methods sibling and closest and next and previous this site is you might not need jquery.com and i love this site because you start out by picking your internet explorer version i wish there was a none button here because i'm like totally don't care but then given an internet explorer version which is you know the oldest browser i can now flip through this and i can look for the thing that i want to do so closest sibling so in jquery we say dot next the next element sibling is that thing that we can use in every browser so i can go for oh is is pretty nice that's cool is this class we can do this matches function which is pretty cool usually when i'm reaching for a jquery function and i'm like but but i just need this jquery thing to to work i'll pull up you you might not need jquery.com and i'll search for that javascript that jquery function and i'll go find the javascript that makes that happen i really love this site any other questions here yep um i thought there was a bit of a security issue where people could start inserting script tags into your values and so we were told to use dot text but both of those being the equivalent to the value is there a way to get around that with the new without using that is a great question so i have something like this and that's the script that i have now that's great shame on the guy who typed that but still this is a crossside scripting attack i'm trying to get this into the dom so that i can do something and i'm probably not going to just alert i'm probably going to i don't know swipe your session cookie or post data to your bank on your behalf and transfer transfer all your money off or log in to use facebook and post some interesting posts to all your friends so i have this string that is supposed to do malicious stuff so i could do something like this string template equals i want to say div class equals make it pretty plus some string plus end div and so my goal here is to you know add that text together with my other stuff and and that becomes my template and i'm not going to show this and and now my ui looks awesome if my string said hello bob because my string doesn't say hello bob because my string says go execute this javascript what i'm going to do when i say var div equals document.get by id my div so i'm going to go grab that div and i'm going to say div dot inner html equals template now what happened boom i want to not do that i want to say make this not execute that javascript i want i don't want it to treat it like markup i want it to treat it like text so what i'm going to do is i'm going to say i'm not going to get my div i'm going to go get the make it pretty id so i'm going to presume that this is already in my page somewhere i may need to show it that's okay but that markup is already in my page and so because of that i'm not going to use template anymore and i'm going to say because i'm using the text property then the browser will correctly html encode that and now i'll just have a bunch of you know angle brackets on my page where that you know hello name piece used to be i've chosen to use this as text to guard myself against that crossside scripting attack jquery makes it something like this to say here's a function that may take in some some stuff and basically what they're doing is they're saying that we just built the text method in jquery that's cool maybe i need that text method maybe i can just call inner text directly now they're also going to do something like this so that i can do you know get the text back out if i don't pass it in you might not need jquery that was a great question what other questions do you have right here dot inner text on uh so prediv dot your text it's assigning some string to it how do we get what the text is at that point like whereas jquery right there it returns it great question how do i get the text back out i just read the property your teacher's gonna be so mad at me tomorrow sorry okay so we've gotten content we've manipulated it we've added classes and removed classes um yep go ahead what's the difference between inner text and text content somebody did a typo and should have used this property everywhere um shame on that guy good thing that we have a peer review thank you it's not called inner text it's called text content good catch text content i think let me go ask can i use yup text content yes text is definitely a gentler method to get into this text content yeah inner html and text content it's like can you like at the very least capitalize it consistently yeah either do uppercase or camel case or um you know do we do dashes or do we not do dashes or we can go like this and we can um do both of them yes because standards are xml in the awesome because you would never want to do an http request if it wasn't for xml oh of course why is it xml instead of just http request well because when microsoft put together the thing to make outlook web access the html part of the thing had already been code frozen but the xml part wasn't so if they called it xml http request then they could get it into the browser yeah oops okay so we've changed the content and so we could for example start looking at something like this and we already coded this which was really interesting if we just set document.queryselectorall to dollar sign and then we can do something like dollar.go grab the thing and then go loop through each of these doing interesting things let's add a class let's remove a class let's set some text content into each one we're starting to do that same thing that we do with jquery.each instead of jquery we have an actual array and we just you know for reach through that array so the next thing that we want to do is we like that click event you know dollar dot dollar paren dot click well it turns out there's this browser event called add event listener where we can pass in the thing that we want to listen to like click and so we can go do exactly what we wanted to do before so we really like that click methodology let's build a click function and i'm going to take in an element and a function element dot add event listener i just built myself a click function well let's do that so i have this click function and it's just going to take in some element and some function and by wire up the click event handler and so now it's not quite the same experience as jquery because i'm passing in that get element by id result that actual element but i'm getting that same kind of you know jqueryish kind of feel without that 2meg download so i've got the events and that's interesting but i really like this i really like how jquery binds this in an interesting way and i really want this this this this as opposed to the other this is so i like this so the way we we accomplish this in jquery in javascript is we call function.bind and pass in to bind what this should be so the only difference then in my click event handler is i create this click function and i pass in function.bind element and now the element is this and now i can do this dot id and this dot attra and you know all those interesting things this dot class name rather than just taking the function we're calling function.bind to set this correctly so let's go rebuild jquery we've kind of got enough of these tools that we could do interesting things and try try to see if those five or eight features that we definitely reach for jquery for because it you know kind of makes sense for us let's see if we can do those well we really like that document.queryselectorall setting that to the dollar sign and then we like that click event handler so i'm just going to stick that click onto that dollar sign as well so i go i go stick this in the top of my utility class and then i'll say hey let me go grab the things results dot for each item and now i want to do item.click but that's not the way i built this i want to say click item and now i'm doing the the content that i i just wired up a click event handler i selected all the things and that feels very jqueryish i could do a similar thing if i only want one i can say go grab the thing i only want one result and i'm going to wire that up into my click event handler not quite jquery but really close and the code to pull that off was four lines compared to two megs that's interesting so the next step is we may want to stick on that ajax function so you know i'm just going to take that dollar.ajax and i'm going to assign it to that function that we built method url data callback now i kind of like that i take in an argument instead so i'm going to take this ajax function and i'm going to stick it in our library and i'm going to say instead of just calling it method url data and callback i'll just take in args and so args.url args.method and i may say and if you don't pass it in it's get args.body and then this is args.success so now we've got ajax in our library any questions so far but but i i really want it to be this dollar dot and then go click and do the things okay so let's take it to the next level so here's that function that will take in a selection and we're going to go wire up some cool events to this selection so that jquery can do some things auto magically so let's go first grab our matches and we'll do the 4h around those matches and we'll say for each thing let's wire up an on method let's wire up a click method an add class method a remove class method here we've got the text and html method and so ultimately what we're returning down here at the bottom is this array of all of the things that are wired up to do all of this stuff and in our application if we also need on blur and on focus then we can you know rig up focus and blur events or the interesting thing with this on event is it's just going to get passed in whatever event you want it to so you could use on click and then wire up click event handlers that way if all you need is that much that's jquery and it has an identical look and feel here's our ajax library and we did all of the things that we you know just sticking out on dollar.ajax and we've kind of built up this ajax clone any questions so far yep they just condense their library why don't they just condense their library good call yes exactly it supports really really old browsers jquery 1 supports ie6 and if ever they stopped supporting ie6 that would be a breaking change jquery 2 drops support for ie6 but supports ie8 jquery 3 hopefully they'll take it a bit farther i hear they're specking out jquery 4 maybe they'll move more modern and you know drop support for all things and at that point maybe it could be as simple as the library we built here right now it's still two megs though and that's after getting rid of ie6 so you know they've got a ways yep determine um browser what's the color of line for the browser support go back all the way to 98 so that will affect your decision good call how do i know what browsers i need to support and because of those browsers how do i know what features i can use ideally you look to something like google analytics or a similar platform where it can tell you the browsers of your users and based on those browser selections you know that hey if we stop supporting ie6 we're going to lose 0.5 percent of our users 0.5 percent of our users relates to this much of our sales and so we're going to lose 20 000 in sales next year if we stop supporting ie6 maybe our business can handle that maybe it can't maybe we look at the analytics and we go 0.02 percent of our users use ie6 if we stop supporting ie6 we will lose 20 what's our development costs in supporting ie6 well it's definitely more than twenty dollars it's probably more than twenty thousand dollars let's stop supporting ie6 google analytics is great because google analytics very specifically targets your market in a really elegant way if you want kind of more broad versions let me see if i can find it in 28 seconds or less can i use has a really interesting table of usage statistics and this is you know them harvesting usage statistics across the world and there are interesting npm packages that are based on this can i use that that will pull in interesting things and i'm completely browser list there we go so i can say inside browser list i would like to support the last one version and browsers that are more than one percent of the global market and that will cap that off at that version and so i can you know do some really interesting things there um uh browser list is cool and there's another site that lets me explore what browsers um relate to this that the name has escaped me i'm gonna remember it on the way home today though so ultimately what browsers can i support ideally that's less of a technical decision and more of a business decision let's look at our market share and the impact to our customer base if we stop supporting that browser so if i stop supporting the browser what features can i use now or what features do i need to not use and that's where we go look at can i use we've been using var today which is es5 can i use let and const yet yep well how about fetch can i use fetch and so i'll do exactly this i'll come poke into all of these as i find a new api that i like i'll come to can i use and i'll plug that feature in and i'll say so based on my usage statistics and what browsers that i think that i'll support can i use this feature yet can i use sv svn svg yep can i use canvas can i use for each can i use array.sort come ask can i use and that will help you make that determination what other questions do you have so far i think you're doing a pretty good job explaining it awesome so jquery is four things jquery is dom manipulation jquery is ajax jquery is and animation and we haven't talked about animation yet what's up with animation post jquery i have this show and this hide thing going and i have this you know open and it's a nice fade and animation animation is cool back in 2006 when we wanted to do this the way we did this is we set up a timer and we said okay every 100 milliseconds move it a little bit more 100 seconds more move it well now it's a little bit jacky well how about every 10 milliseconds oh i'll make it really smooth how about every one millisecond well how does that relate to my screen's refresh rate well it doesn't so am i calculating frames that the browser is just ignoring or am i not calculating enough frames and now my animation looks choppy so now we have a new api that is request animation frame and this is baked into all browsers as well let's go check can i use because you know it's a thing so request animation frame is even in ie 11 which is wonderful whenever the browser is ready to display another frame it will call request animation frame i'll do my calculation i'll be able to show it what happened and at that point now it's showing the animation as fast as i can possibly see it jquery doesn't use request animation frame under the hood jquery 3 may but you know for backwards compatibility it couldn't if i want to do animation and i want to make it performant request animation frame is definitely the way to go and so we should move away from using jquery for those types of things and use request animation frame well i really like show and hide well here's a css class that gives me show and hide and it just happens to have a transition so i've got css3 animations here which is really cool keyframe animation so i just add the show class and i remove the hide class and i get that fade in effect that's cool if you just want to hide hide is just setting the style.display to none show is removing the none and it goes back to wherever you need it to be so you could set it to block you could set it to inline inline block and that will show it so if you want to take animation a bit farther probably you want to look for a framework green sock and animate.css are great css animation libraries that will give you access to really rich javascript apis as well where i can say kick off this css animation and when it finishes call my callback or let me interrupt it or let me do interesting things both of them are great apis they definitely have a very different api surface than jquery but they'll give you modern really smooth animations ultimately as we look towards these animation things we're also looking towards other frameworks and will land on something like this angular react vue or aurelia we're probably fighting over reactant view right now angular 6 is definitely a thing and aurelia is really awesome they really embrace web standards and really try to get the framework to fade away from you which is wonderful if you're leveraging one of these component libraries you probably have an animation system built into that as well you probably also have a text templating engine and so you don't need to do that you know raw inner html and text content thing as you're leveraging these libraries you may also have an ajax library angular has very specifically leaned on rxjs for this react has one built in and vue has one built in aurelia says hey there's this king thing in browsers called fetch go fetch and so that's really cool too as you're moving in this direction these libraries probably will have a lot more interesting things for you a highlevel yep on uh angular versus uh framework if you going to build and touch on which one would you choose good question so we have some javascript frameworks here which one is the best what size is the perfect coffee mug each of these libraries has different preferences different opinions different strengths and weaknesses and i would invite you to try out many of them and find which one best matches your needs and your skills and best matches the problem that you have if you don't have the problem that angular solves don't use angular if you don't have the problem that react solves don't use react ultimately compare angular in react and view and get comfortable with the one that you like the best or walk into your team and say angular view and react and somebody's going to talk to you for an hour and a half about why that's exactly their favorite tool and i agree for your team that one is the perfect choice what is the best framework the best framework is the one that makes you happy the one that makes you productive my best framework may or may not be your best framework and that's okay does that unanswer your question what other questions do you have so far yep promises good question can i use promises can i use promise yes i can into all evergreen browsers promises are built in what's really cool is promises then become the foundation for things like service workers and the fetch api and so anything that supports fetch api and service workers which by the way is all of them will support promises as well so how about async and await all of them you can use async and await in production on your real site today unless you're selling to those guys in china that use xp with internet explorer that's not 8. joke yep i wish i was win kidding yes a year ago yeah you can do some really cool things in niche markets where they have very specific and eclectic browser habits i've been dissing on opera mini a little bit but in some markets opera mini is perfect because what opera mini does is it downloads the content to their servers minifies it and then sends it to your browser that can be wonderful if you have a 2g connection and you pump your own water the next billion users may use opera mini and if that's the market you're catering for exactly go after opera mini and understand both the cost of development involved and also the benefits to your business if you're building a platform as a service a modern cloud app probably that's less important what other questions do you have so far yep that's kind of an interesting rule of thumb i like that if the project lasts more than a few weeks then jquery may not be a great choice and maybe you want to lean on one of these frameworks i like that where's that magic cut off i look at the durability of the project you know is the goal to like deliver fast and throw it away in a week you know a really quick marketing site or is the goal for this application to sit in an enterprise for a few years what's the skill level of the team that i'm working on also what's the complexity of the thing do i just need that submit button to work or do i need to do a whole lot of animation around making that submit button turn into this animation and and reload the page in interesting ways and ultimately you'll get a feel for this and you'll go you know this was hard let's find an easier way to do that let's lean on one of these frameworks that will do a lot of that for us or wow we have a lot of frameworks involved let's see if we can simplify it by removing some of these frameworks did that unanswer your question yeah that's cool complexity is kind of an interesting thing to poke at there so we've got yep go ahead good question so this guy told us to get rid of jquery when is this a bad idea when do i not want to do that thing well if i've got a site that it has you know five or eight ten years of labor built into building this and it's built on jquery you probably don't want to spend five or eight or ten years rebuilding that without jquery if your base framework depends on jquery then probably you don't want to rip out jquery angularjs angular 1 depends on jquery bootstrap 3 depends on jquery underscore depends on jquery but angular 2 does not angular 6 doesn't bootstrap 4 doesn't um underscore unfortunately is no longer a thing so as you kind of upgrade your stack then you can probably get away from these what is underscore no why is underscore did you say underscore is not a thing underscore isn't one of the popular frameworks right now underscore was great in getting us past jquery's nested wing into kind of a more frameworky approach and then angular came out and underscore kind of fell off as a as a framework if i've got a modern thing with bootstrap 4 and angular material i probably don't need jquery so if we're in a highly regulated environment and our code base is you know a little bit crusty probably removing jquery isn't a good option as well you know there are some industries where it's like we need to ship exactly this stuff um we need very specific validation of our application we need to be able to prove that it works in all the ways so the moment that you touch that thing is the moment that we have to retest everything don't rip that jquery out of that but the new content that you build today you might be able to get away with just a helper library maybe dollar sign isn't the variable that you craft for it or a few of these little helper methods like click and text and you know those types of things might make your life a little bit easier and you're moving in the right direction to get to a more modern stack if you're focusing on the wordpress type of thing like i just need a marketing site and your wordpress template uses jquery yeah it's probably not a good idea to rip out jquery out of your template maybe it makes sense but probably it doesn't look towards that cost benefit analysis how much time is involved in yanking jquery out of my project versus how much revenue will i gain from doing so if seo is really the killer feature of your business and you really want to rank high in google having really fast page load times and really light pages will definitely help you and so maybe removing jquery will really help maybe you'll get that much cost savings by telling the boss that that hero image in the top left corner that's you know five megs optimizing that image to be 500k or 50k might gain you that much seo benefit as well that was a great question thanks what other questions do we have so far so jquery was really elegant in solving our problems in 2006. today's browsers are different and we might not need jquery we looked at you might not need jquery.com already that's the site where i pick the ie version and i can scroll down to the features i'll frequently use that site to go say but my muscle memory is doing this what's the uh regular javascript way to do that which one is my favorite yes i do like working with them and that's definitely my framework of choice ultimately i walk down through a couple of things as i'm looking at which framework i want to choose i look at what are the cultural implications in my business you know some people are like i definitely won't use microsoft or i must use microsoft i'll look at the team that may take over for me and you know what skills do they have do they have more skills in this particular framework or that particular framework i'll look at what are the problems that i'm trying to solve and which tools best match those problems and then if all else is equal in all of those then my preferences start to take choice but ultimately usually i'll hit one of these business or technical answers before the preference piece comes into play we have a.net shop and so we're going to use net or we have an angular shop and we really like typescript okay let's build this in angular or if i'm given a problem where it's like just solve this business problem now i can go look at all the things and i can pick and that's really fun too which one's my favorite the one that accomplishes the job that delivers value to my customers the fastest so you know this is kind of an interesting meme in that direction what if drivers were hired like programmers i love this blog post that's really cool job requirements professional skills in driving normal and heavy freight cars buses and trucks trolley buses trains subways tractors shovel diggers contemporary light and heavy tanks currently in use by nato countries skills and rally and extreme driving are obligatory formula one driving experience is a plus knowledge and experience and repairing of piston and rotor winkle engines automatic and manual transmissions ignition ignition systems board computers abs abd gps and car audio systems by world known manufacturers obligatory experience with car painting and tin smithing tasks is a plus the applicants must have certifications by bmw general motors and bosch but not older than two years compensation 15 to 20 an hour depending on the interview result which basically is every job posting everywhere yeah education requirements bachelor's degree of engineering at 20 an hour so that is my pitch if the only reach reason that you are reaching for jquery is because it was familiar you might do better and you can save yourself the 2 meg download ultimately look to the framework that makes you happy and really enjoy coding this is a lot of fun to do thanks for coming everybody
