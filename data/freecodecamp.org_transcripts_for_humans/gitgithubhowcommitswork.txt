With timestamps:

00:00 - Let's talk a little bit about what
exactly a commit is. Now,  we talked
00:04 - about to commit being a snapshot and
that's exactly what it is. A commit  is
00:08 - represented by a 40 character sha-1 hash and I wrote a couple little short versions
00:13 - over here but in that 40 characters
there's a lot more than just numbers and
00:18 - letters. There is a blob of the changes,
so blobs represent files, so you made
00:25 - changes say to index.html, Git stores a
blob of that file which is a reduced
00:30 - version of that code in a very
lightweight way. It also includes some
00:35 - metadata. That means who made the
commit,
00:38 - what time did they make the commit, and
what's the parent commit? Now what's the
00:41 - commit that was made right before this
on this working branch. All that
00:46 - information is stored and compressed in
that 40 characters sha-1 hash, which
00:50 - means that commit ID is very, very
important.

Cleaned transcript:

Let's talk a little bit about what exactly a commit is. Now, we talked about to commit being a snapshot and that's exactly what it is. A commit is represented by a 40 character sha1 hash and I wrote a couple little short versions over here but in that 40 characters there's a lot more than just numbers and letters. There is a blob of the changes, so blobs represent files, so you made changes say to index.html, Git stores a blob of that file which is a reduced version of that code in a very lightweight way. It also includes some metadata. That means who made the commit, what time did they make the commit, and what's the parent commit? Now what's the commit that was made right before this on this working branch. All that information is stored and compressed in that 40 characters sha1 hash, which means that commit ID is very, very important.
