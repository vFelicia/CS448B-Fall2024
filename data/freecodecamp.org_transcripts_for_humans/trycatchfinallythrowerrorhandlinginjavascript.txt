With timestamps:

00:00 - errors can be coding errors made by the
00:03 - programmer
00:04 - errors due to wrong input or other
00:06 - unforeseeable things i will be
00:08 - discussing how to handle errors in
00:11 - javascript
00:12 - error handling is used most when working
00:15 - with data from other sources or user
00:18 - input
00:18 - since those can be unreliable
00:21 - it is common to see error handling
00:24 - associated with ajax calls and
00:26 - asynchronous code
00:28 - error handling uses the keywords try
00:31 - catch
00:32 - finally and throw
00:34 - the try statement lets you test a block
00:37 - of code for errors
00:39 - the catch statement lets you handle the
00:41 - error
00:43 - the throw statement lets you create
00:45 - custom errors
00:47 - and the final statement lets you execute
00:50 - code after try and catch regardless of
00:53 - the result
00:55 - so let's see some code
00:57 - okay here's the first part we're going
00:59 - to try some code to see if there's going
01:02 - to be any error and we're going to
01:04 - console.log start of try runs and then
01:06 - this part right here is the error
01:09 - because there is nothing in the program
01:11 - called unicycle
01:13 - and then it's going to try to run some
01:15 - more code here
01:16 - and then it's going to catch the error
01:20 - and then we're going to have the final
01:21 - statement i'm going to run this and then
01:24 - we'll talk about what's in the logs here
01:27 - so start of try runs that's right here
01:30 - and then it reached the error so since
01:33 - the error was reached here it never goes
01:36 - to this next statement once the error is
01:38 - reached it goes straight to the catch
01:41 - statement right down here it says error
01:43 - has occurred reference error unicycle is
01:45 - not defined at
01:48 - pin.js143 so
01:50 - we pass in an error object to the catch
01:53 - statement and then i'm going to
01:55 - console.log error has occurred and then
01:57 - we console.logged error dot stack
02:00 - now dot stack is is when it's going to
02:03 - show this part right here we can also do
02:05 - it without the dot stack where we just
02:07 - log the error and if i run that
02:12 - you're going to see this bar and this is
02:13 - what's going to be used usually not all
02:16 - browsers can handle the dot stack so
02:19 - when the error occurs javascript
02:20 - generates an object containing the
02:22 - details about it so so that's what this
02:25 - error object is
02:26 - and it's going to have two main
02:28 - properties name and message so the name
02:31 - is the reference error right here and
02:33 - then the message is unicycle is not
02:36 - defined
02:37 - and then i also already showed you about
02:39 - getting the call stack then it's going
02:40 - to go down to the finally statement
02:42 - whether or not an error happens we're
02:45 - going to always run the code in the
02:47 - final statement this is always run
02:50 - and then at the end you can see the
02:52 - execution continues so that's just after
02:54 - the the try catch statement is over it
02:57 - continues now for the try catch to work
03:00 - the code must be runnable
03:02 - in other words it should be valid
03:04 - javascript it won't work if the syntax
03:06 - is wrong like if i have a an opening
03:09 - brace here and then i don't have the
03:11 - ending brace and then if i if i try to
03:14 - run that
03:15 - well that's not going to work this is
03:17 - called a parse time error
03:19 - well try catch only handles runtime
03:22 - errors so the code has to be able to run
03:24 - so i'm just going to delete that here
03:27 - and then run that and then we can
03:28 - actually see it run this time there are
03:30 - many built-in errors that already exist
03:33 - but you can also create your own custom
03:34 - errors with the throw statement i'm
03:36 - going to talk about throw errors in the
03:38 - context of a more realistic use case for
03:40 - try-catch statements
03:42 - okay let's say you're going to get data
03:43 - from a server often from a server you're
03:46 - going to get json data sometimes through
03:47 - an ajax call but we're just going to
03:50 - pretend like we got this data from a
03:52 - server
03:53 - and then we're going to try this
03:55 - let user equal
03:56 - json.parse we're going to parse the data
03:59 - that we got from the server and then
04:02 - if there is no user.name we're going to
04:05 - throw a new syntax error and complete
04:08 - data no name so let's say we're
04:10 - expecting the data from the server to
04:11 - have a name but this doesn't have a name
04:14 - so we're going to throw a new syntax
04:15 - error input incomplete data no name now
04:18 - you can actually throw a number or a
04:20 - string or
04:22 - or a boolean but also you can create a
04:25 - new error like a new syntax error or a
04:27 - new error and you can pass in the
04:30 - message so syntax error is gonna be the
04:32 - name of the error and then this is gonna
04:34 - be the message of the error so if i run
04:36 - that you'll see what i mean
04:39 - so you can see down here we're gonna
04:40 - console.log jsonair and then we're just
04:43 - going to log the message e dot message
04:47 - so the message is incomplete data no
04:49 - name
04:51 - the name of the error will be syntax
04:52 - error so if we log the e dot name down
04:55 - here i run that
04:58 - you'll see json air syntax error or we
05:02 - can just log the entire thing and just
05:04 - do e
05:06 - and it's going to say json air syntax
05:08 - air incomplete data no name so it got
05:10 - the json error then it says the syntax
05:12 - error that's the name of the error right
05:13 - here and then it's going to have the
05:14 - message incomplete data no name so in
05:17 - this code if there was a name it would
05:19 - console.log the name but there's not a
05:21 - name as soon as it throws this error
05:23 - here it's going to go to the catch
05:25 - statement and that's when it logs the
05:28 - error statement right here
05:29 - so that's the basics of error handling
05:32 - in javascript check the description for
05:34 - a link to more information and also to
05:37 - the code used thanks for watching my
05:40 - name is beau carnes don't forget to
05:42 - subscribe and remember use your code for
05:44 - good

Cleaned transcript:

errors can be coding errors made by the programmer errors due to wrong input or other unforeseeable things i will be discussing how to handle errors in javascript error handling is used most when working with data from other sources or user input since those can be unreliable it is common to see error handling associated with ajax calls and asynchronous code error handling uses the keywords try catch finally and throw the try statement lets you test a block of code for errors the catch statement lets you handle the error the throw statement lets you create custom errors and the final statement lets you execute code after try and catch regardless of the result so let's see some code okay here's the first part we're going to try some code to see if there's going to be any error and we're going to console.log start of try runs and then this part right here is the error because there is nothing in the program called unicycle and then it's going to try to run some more code here and then it's going to catch the error and then we're going to have the final statement i'm going to run this and then we'll talk about what's in the logs here so start of try runs that's right here and then it reached the error so since the error was reached here it never goes to this next statement once the error is reached it goes straight to the catch statement right down here it says error has occurred reference error unicycle is not defined at pin.js143 so we pass in an error object to the catch statement and then i'm going to console.log error has occurred and then we console.logged error dot stack now dot stack is is when it's going to show this part right here we can also do it without the dot stack where we just log the error and if i run that you're going to see this bar and this is what's going to be used usually not all browsers can handle the dot stack so when the error occurs javascript generates an object containing the details about it so so that's what this error object is and it's going to have two main properties name and message so the name is the reference error right here and then the message is unicycle is not defined and then i also already showed you about getting the call stack then it's going to go down to the finally statement whether or not an error happens we're going to always run the code in the final statement this is always run and then at the end you can see the execution continues so that's just after the the try catch statement is over it continues now for the try catch to work the code must be runnable in other words it should be valid javascript it won't work if the syntax is wrong like if i have a an opening brace here and then i don't have the ending brace and then if i if i try to run that well that's not going to work this is called a parse time error well try catch only handles runtime errors so the code has to be able to run so i'm just going to delete that here and then run that and then we can actually see it run this time there are many builtin errors that already exist but you can also create your own custom errors with the throw statement i'm going to talk about throw errors in the context of a more realistic use case for trycatch statements okay let's say you're going to get data from a server often from a server you're going to get json data sometimes through an ajax call but we're just going to pretend like we got this data from a server and then we're going to try this let user equal json.parse we're going to parse the data that we got from the server and then if there is no user.name we're going to throw a new syntax error and complete data no name so let's say we're expecting the data from the server to have a name but this doesn't have a name so we're going to throw a new syntax error input incomplete data no name now you can actually throw a number or a string or or a boolean but also you can create a new error like a new syntax error or a new error and you can pass in the message so syntax error is gonna be the name of the error and then this is gonna be the message of the error so if i run that you'll see what i mean so you can see down here we're gonna console.log jsonair and then we're just going to log the message e dot message so the message is incomplete data no name the name of the error will be syntax error so if we log the e dot name down here i run that you'll see json air syntax error or we can just log the entire thing and just do e and it's going to say json air syntax air incomplete data no name so it got the json error then it says the syntax error that's the name of the error right here and then it's going to have the message incomplete data no name so in this code if there was a name it would console.log the name but there's not a name as soon as it throws this error here it's going to go to the catch statement and that's when it logs the error statement right here so that's the basics of error handling in javascript check the description for a link to more information and also to the code used thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good
