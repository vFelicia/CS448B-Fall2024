With timestamps:

00:00 - So, we talked about merging but there's
another way that you can introduce your
00:04 - changes into a branch. That's with 'git
rebase'. Now, I do want to have a
00:08 - disclaimer here: when you use 'git rebase'
you are changing history, but that might
00:13 - be your preference and might be what
your team chooses to do.
00:16 - Let's talk about the differences. Say we
have two branches working here, this is the
00:20 - 'git merge' model and there's A B C and D
on one branch and E F on a separate
00:27 - branch. Once we merge this branch into
the other branch, the way that's going to
00:32 - appear in history is A B E C F D. So, it's
when the changes were made it -
00:39 - it's accurate - but you might want your
history to be reflective of a different
00:44 - nature you might want your history to
show when those changes were introduced
00:48 - and make it more linear. That's when you
would use 'git rebase'. With rebase in the
00:53 - same situation instead of merge it will
show the commits A B C D E F and their
00:59 - logical order like I said it's really a
matter of preference and what your team
01:03 - chooses to do. So, just be sure to check
with your collaborators and make sure
01:07 - you know which one you're expected to be working with.

Cleaned transcript:

So, we talked about merging but there's another way that you can introduce your changes into a branch. That's with 'git rebase'. Now, I do want to have a disclaimer here when you use 'git rebase' you are changing history, but that might be your preference and might be what your team chooses to do. Let's talk about the differences. Say we have two branches working here, this is the 'git merge' model and there's A B C and D on one branch and E F on a separate branch. Once we merge this branch into the other branch, the way that's going to appear in history is A B E C F D. So, it's when the changes were made it it's accurate but you might want your history to be reflective of a different nature you might want your history to show when those changes were introduced and make it more linear. That's when you would use 'git rebase'. With rebase in the same situation instead of merge it will show the commits A B C D E F and their logical order like I said it's really a matter of preference and what your team chooses to do. So, just be sure to check with your collaborators and make sure you know which one you're expected to be working with.
