With timestamps:

00:01 - hey everyone i'm cody and welcome to
00:02 - part four of building a full stack web
00:04 - application using vue.js and express.js
00:08 - so if you remember in part three we
00:10 - built this login panel
00:12 - and we built that login endpoint in the
00:14 - backend
00:15 - we also brought in view x to kind of
00:17 - manage some of the
00:19 - shared state
00:20 - of our application such as the token or
00:23 - the user
00:24 - or this boolean is user logged in and we
00:26 - used it to hide and show different
00:29 - things in this header
00:32 - so another thing i'm going to do are i
00:34 - guess
00:35 - what we can start doing now is let's
00:37 - add a log out button
00:41 - and okay so to do that we should be
00:43 - familiar by now as how to add a button
00:46 - to that header so if i go to the header
00:48 - in my components tab
00:50 - i could easily just copy and paste that
00:52 - copy pasta
00:54 - and then go ahead and say display it if
00:56 - the user is
00:59 - is logged in right
01:02 - so i'll just say log out
01:05 - what we could do is when the user clicks
01:07 - this
01:09 - we could just say log out
01:14 - and then down here
01:15 - under methods we could just go ahead and
01:17 - add a log out method
01:21 - which is going to do a couple of things
01:22 - the first thing it's going to do is
01:25 - dispatch
01:28 - so i do
01:29 - this.store.dispatch
01:30 - it's going to set the token
01:32 - equal to null
01:34 - and then we also want to set the user
01:36 - equal to null
01:38 - and because we're calling set token of
01:40 - null remember in our store it should set
01:43 - is user logged in to false
01:45 - not sure if this is the best way to do
01:46 - it but hey it works for now um
01:49 - and then finally
01:52 - i think we could probably
01:55 - go here and just do it to do redirect
01:57 - to
01:58 - home page or something
02:00 - in fact i'll just i'll just do that now
02:02 - right so i'll do router.push
02:05 - and then i'll say go to my root
02:11 - so go ahead and save that header file
02:13 - and if i go back here i have a log out
02:15 - button if i click it
02:17 - it logged me out you saw that it
02:20 - did set token
02:22 - and it also did a site user and now
02:25 - in our final state of our app we have
02:26 - token is null users null and is logged
02:29 - in is also equal to false and then of
02:32 - course up here login and sign up
02:34 - are displayed now because we are logged
02:36 - out
02:40 - right so
02:42 - go ahead and log back in
02:55 - so i think the next step
02:57 - is we can actually start working on that
02:59 - whole browse
03:00 - button that i added earlier in part
03:02 - three so if i go back to the
03:06 - header i have this
03:08 - to do implement me comment i'll go ahead
03:10 - and uncomment that stuff
03:12 - and what we want to do
03:16 - actually let me go over here let's go
03:18 - ahead and copy this button you know
03:19 - this button's got some good styles
03:21 - so go here and say if the user is
03:24 - actually i don't need to do an if just
03:26 - always display the browse because you
03:27 - want users to be able to access your
03:29 - tabs regardless of if they're logged in
03:32 - or logged out so what we can do here
03:35 - is we'll say when you click on this
03:37 - browse button
03:39 - it's going to take you to the
03:41 - songs route
03:44 - so then of course we don't have a songs
03:46 - route so if i were to go back
03:48 - to my router
03:50 - and i add a songs into my
03:52 - routes array
03:58 - and then here i'll just go ahead and add
04:00 - a songs component which again we do not
04:02 - have yet so i'll go ahead and say
04:04 - songs.view
04:09 - and i should probably find some type of
04:11 - like
04:12 - generator that makes these blank files
04:14 - for me
04:16 - i guarantee you
04:17 - vs code has it but i just haven't really
04:19 - taken the time to look at it so anyway
04:22 - that's going to be our bare bones file
04:24 - in fact i'll just do blank dot view here
04:28 - just put a blank template there so i can
04:29 - use that in the future
04:31 - all right so we have a link called
04:34 - browse and when we click it it takes us
04:36 - to that songs url
04:39 - and the first thing that we want to do
04:42 - is we want to have a panel which
04:44 - displays all of the songs
04:48 - so
04:49 - starting off
04:52 - we could have a panel called um
04:55 - let me just clean this up a little bit
04:59 - go to the register page
05:00 - i'm going to grab all of this
05:03 - all that goodies
05:05 - and go ahead and just paste it right
05:06 - there
05:11 - so that now we have a blank register tab
05:13 - which we don't really care about so i
05:15 - can just say songs
05:17 - and in here we can just go ahead and
05:22 - clear that out all right so we have a
05:25 - blank panel which we can put
05:26 - all of our songs or you know song
05:29 - renders here
05:34 - and so one thing you might notice now is
05:36 - that we have all these different pages
05:37 - which have this like
05:38 - this panel and i'm copying pasting code
05:42 - throughout a majority of my application
05:44 - right so if you notice that you have the
05:46 - same
05:48 - component which is being shared
05:49 - throughout your application by just
05:51 - sharing code what you can do
05:53 - is create a new
05:54 - component
05:56 - so i'll say panel.view
06:00 - and then inside this panel
06:07 - i'll go into blank
06:09 - put in the panel
06:11 - cool beans
06:12 - we actually want to just go ahead and
06:13 - create that same type of panel structure
06:15 - so if we go back to the register
06:19 - and find the div where we declare that
06:21 - panel so i think it's starting here
06:24 - boom
06:27 - all right so we have a panel now and we
06:29 - want to make this a very generic
06:31 - component so it's a panel that you can
06:32 - change the title as needed so i'm going
06:34 - to change that to
06:36 - curly brace curly brace which is a
06:38 - binding a one-way binding in view
06:41 - so basically if title is defined in my
06:44 - data so down here remember we have
06:46 - data
06:51 - or if it's defined in your props which
06:54 - we'll cover in a second so here i can
06:56 - say title is equal to hello world
06:59 - so if title
07:01 - is defining your data which it is on
07:03 - line 40 it's going to render whatever
07:05 - the value is right there
07:08 - and then
07:09 - something else we want to do is just go
07:11 - ahead and add
07:13 - a slot here
07:17 - and i will show you what a slot does in
07:19 - one second
07:23 - so i'll go ahead and remove all this
07:25 - extra jazz that we don't need
07:27 - and go ahead and save this file
07:31 - so again this should make sense we just
07:32 - made a new view
07:34 - component called panel
07:36 - and it's just going to display that
07:37 - white
07:38 - panel with the top
07:41 - cyan
07:42 - toolbar
07:43 - and then it has the content here with
07:45 - some padding and then a slot
07:49 - so if i were to go back to let's say
07:51 - that songs page i can go ahead and
07:53 - import that so i'll say import panel
07:55 - from
07:56 - component slash panel
07:59 - make sure to capitalize that right
08:04 - and then here i can say i want to be
08:06 - able to access that
08:08 - components
08:10 - so i'll say
08:11 - i want to be able to access the panel
08:14 - and then here
08:16 - remember that same code that was copy
08:18 - and pasted throughout those three
08:19 - different pages we could just say panel
08:21 - and close that off
08:25 - and now if i were to save this file
08:27 - we get hello world
08:29 - no slot content defined
08:33 - all right so that's that should make
08:34 - sense we're just making a sub component
08:36 - and displaying it inside another
08:37 - component and we're including it here on
08:39 - line 13 to be able to access it on line
08:41 - four and there's a little bit of magic
08:43 - behind how this panel gets named
08:45 - basically if your panel is named like my
08:48 - awesome panel
08:49 - this is going to be converted to
08:52 - my awesome panel just like that so it's
08:55 - a little bit of magic on going on behind
08:57 - the scenes that you kind of have to know
08:58 - going off of what i was going to talk
09:00 - about for slot basically
09:02 - if inside a parent component you want to
09:05 - pass down
09:06 - something so let's say here
09:09 - [Music]
09:11 - i want to pass down
09:13 - a something special like an h3
09:18 - yo
09:19 - yo yo
09:20 - and then maybe like a paragraph tag
09:25 - and this is the one thing i sometimes
09:27 - hate about autocomplete
09:28 - maybe i just don't know how to use it
09:29 - correctly huh
09:37 - all right so
09:38 - now when i save this
09:40 - you see yoyoyo hello there i'm a
09:43 - paragraph tag we inspect this element
09:46 - you can see oh wow we have an h3 and a p
09:49 - that was kind of passed down into that
09:52 - panel slot
09:54 - so if you remember here we have a slot
09:56 - and basically what this is going to do
09:57 - is we're going to take
10:00 - when you do this when you declare some
10:01 - type of content inside panel you're
10:03 - basically just
10:05 - copying and pasting it over there so
10:07 - whenever this
10:08 - panel subcomponent renders it just takes
10:11 - whatever is declared inside panel
10:14 - and puts it directly into wherever you
10:16 - had that panel or wherever you had that
10:18 - slot defined
10:20 - and you can also name slots i think you
10:22 - can do like name equals like
10:24 - hello
10:25 - and then i could say like
10:27 - slot name musical to hello
10:30 - and this time if this doesn't work i'm
10:32 - going to go ahead and look up the docs
10:40 - all right so this is going to be put in
10:41 - the slot hello
10:43 - and then if i do
10:45 - buy
10:49 - five five five
10:51 - a little bit of backstreet boys now
10:53 - anyone
10:54 - okay so if i go here and do
10:58 - is that in sync don't even know man
10:59 - let's do electronica so
11:02 - now if i add a buy name slot
11:05 - i think this should
11:09 - you know what i don't know what i'm
11:10 - doing so let me look up the docs
11:20 - so you guys can watch me struggle with
11:21 - this just as well
11:23 - so you can do name slots down here
11:26 - inside you can do slot name equals
11:28 - whatever
11:34 - and inside the parent you do the slot
11:36 - equals the name okay so i had this right
11:38 - in the songs or not in the songs in the
11:40 - panel down here i have these two slots
11:42 - with different names hello and bye
11:45 - and then if i were to do
11:46 - i already forgot what i was looking at
11:48 - oh if i do slot
11:49 - equals by
11:51 - instead of
11:52 - what i have there
11:56 - and go back
12:09 - i think i actually need to like change
12:10 - this to uh
12:13 - div
12:17 - there we go okay so
12:20 - again i haven't really messed too much
12:21 - around with slots or name slots but it's
12:24 - just good to know that you can name the
12:26 - slots and kind of insert html from a
12:28 - parent component down into a sub
12:30 - component
12:31 - like whichever way you like
12:33 - but since we've kind of already covered
12:35 - what slots are we can just go ahead and
12:37 - get rid of all that since you should
12:39 - understand or at least kind of
12:40 - understand
12:41 - what i was trying to achieve there
12:44 - so again go ahead change that up
12:47 - now we want to make this sub component
12:49 - panel a little bit more modular so
12:52 - something useful is we want to be able
12:53 - to pass in a title
12:55 - so let's say we want to pass in
12:57 - something called songs
12:59 - instead of having data title defined
13:01 - here instead we can have props defined
13:05 - and just define title like that and we
13:06 - can actually get rid of data because
13:08 - we're not even
13:09 - using data in that case
13:12 - so now
13:13 - if i go back we see that
13:17 - probably didn't save something one
13:18 - second
13:26 - there we go yeah sometimes the uh hot
13:28 - reload doesn't reload you have to do a
13:30 - hard refresh
13:32 - probably have to look into that but now
13:34 - we can easily just pass in
13:37 - whatever we want inside of an attribute
13:40 - so you saw i just added hello and it got
13:42 - passed down to my
13:43 - my panel
13:45 - and that's because we're saying this
13:46 - panel has the ability to be passed in a
13:48 - title prop and then we're using that
13:50 - title prop here
13:54 - so very cool very cool if we wanted to
13:57 - let's say go back and
13:59 - refactor
14:02 - [Music]
14:04 - so let's go ahead and just go back to
14:06 - those other pages like register
14:10 - go ahead and import
14:12 - panel
14:17 - now it's kind of a pain that you have to
14:19 - declare and import in every single one
14:22 - and i'm pretty sure you can do a global
14:24 - include in view
14:26 - but
14:27 - honestly i think it makes more sense to
14:28 - not even use globals because then when
14:31 - you try to copy and paste
14:33 - stuff from one app to the other you're
14:35 - not really sure what the heck like why
14:37 - did it fail it's like oh because you
14:38 - have like 15 globals it's trying to
14:40 - access of course it's going to fail but
14:42 - if you just have it like explicit that
14:44 - this requires a panel component and
14:45 - that's it it makes it much easier to
14:48 - understand like
14:50 - how everything is working
14:53 - so for the register and login pages we
14:55 - went ahead and included the panel and up
14:58 - here i could just say panel titles equal
15:01 - to register
15:03 - and i'm going to go ahead and just get
15:05 - rid of all that stuff
15:11 - uh i think it was just like that
15:16 - template layout flex panel
15:18 - typically i'll flex panel
15:23 - i don't think i need that
15:29 - all right let's see if the register page
15:30 - is working so i go to sign up
15:32 - and a hard refresh just in case and yep
15:35 - it's still working so that's awesome
15:37 - and then i go to the login page
15:41 - again we can just say a panel is going
15:43 - to be called login
15:45 - and get rid of all that extra fluff
15:49 - and then get rid of that and say that
15:52 - could be a panel
15:53 - and
15:54 - unindent all that stuff
15:56 - so now we go to login page
15:59 - hard refresh just in case it's also
16:02 - working just as fine as
16:04 - the other panel instance
16:08 - cool so again
16:10 - should all make sense recap i made a
16:11 - panel sub component which takes a title
16:14 - as a prop
16:15 - and you can pass that in
16:17 - and now in my register login in songs
16:19 - page we simply simply just call panel
16:22 - pass it whatever title we want and it
16:24 - will
16:25 - render that panel for us
16:30 - all right so now at this point we have
16:31 - the songs panel and we want to display
16:34 - a list of songs right or tabs in this
16:38 - case we're calling songs and if you dive
16:40 - into a song it's a tab but anyway so if
16:43 - we go to the songs panel
16:47 - we can first assume that we have an
16:49 - array or collection that's going to be
16:52 - returned from the back end and we need
16:53 - to loop over it and render it x amount
16:56 - of times right so in vue.js
16:59 - you can do a v4
17:04 - like this
17:08 - so basically this is a for loop so i can
17:10 - say for song and songs
17:13 - we want to go ahead and render something
17:17 - so if i were to go to
17:19 - make a data thing and return
17:22 - songs as an array
17:36 - uh actually i'll say um
17:40 - float on modest mouse
17:43 - album good news
17:45 - for people who
17:46 - hate
17:48 - or love bad news i think that's the
17:50 - album i don't know
17:53 - so
17:54 - first i need to wrap that in an object
18:10 - oh
18:11 - i think i'm just forgetting to bind a
18:13 - key
18:25 - nice okay so
18:27 - the issue there is anytime you do a v4
18:29 - and in the error like if i go back to
18:31 - the error
18:32 - it was actually telling me exactly what
18:34 - was wrong i just wasn't reading it so it
18:36 - says elements in iteration e or
18:39 - iteration expect to have a v bind
18:44 - colon key directive
18:46 - so what that means
18:49 - is we need to pass it a key directive
18:52 - saying okay the title will be the unique
18:54 - identifier
18:55 - for the song
19:04 - so now if we were to go back to here we
19:06 - see that it's printing out
19:07 - float on
19:08 - modest mouse good news for people who
19:10 - love bad news and if i were to add
19:12 - just little hyphens in between there we
19:14 - see let's bring that out
19:16 - and just kind of show you what the
19:18 - 4 or v4 is doing
19:20 - if i were to copy and paste this like a
19:22 - lot and save it
19:25 - we see that it's rendering let's see
19:27 - five times and that's because i have
19:29 - five objects inside this songs array
19:33 - so at this point it should make sense as
19:35 - to
19:36 - how and why the v4 is working
19:39 - so it just loops over the songs array
19:41 - for each one we have access to that song
19:43 - object we're just telling it to print
19:45 - out the title the artist the album and
19:48 - then we also need to pass in a key and
19:50 - that's being passed down into the slot
19:51 - of the panel and then rendered here
19:57 - so what we want to do at this point is
19:59 - we need to dynamically load songs in
20:01 - from a back-end right
20:04 - so if i were to instead just set that
20:05 - equal to an empty array
20:07 - and i'll just go ahead and delete all
20:09 - that
20:12 - actually i think if i set that to null
20:13 - let's see what happens okay so i'll just
20:15 - set it to an off right now but what we
20:17 - want this component to do is the moment
20:19 - it's mounted
20:21 - onto the page
20:22 - we want to go ahead and do a request to
20:25 - the back end
20:27 - for all the songs
20:31 - um
20:33 - so at this point
20:35 - you remember how to make
20:37 - services so if we were to copy and paste
20:39 - authentication service
20:41 - and we can rename it to songservice.js
20:46 - and in here we could just say make
20:48 - a index call
20:51 - it's a get request
20:54 - to slash songs
20:57 - doesn't require any credentials or
20:59 - anything so basically we have a song
21:00 - service which will make a get request to
21:02 - the songs in point
21:04 - and that should return
21:06 - some amount of songs to us and you can
21:08 - name this whatever you want like it
21:09 - could be called get all songs
21:11 - um
21:13 - but if you use like ruby on rails i
21:15 - think
21:16 - index is typically used for just like
21:18 - slash songs
21:20 - show is used for like
21:23 - songs
21:24 - of id
21:26 - so i like to keep it consistent and
21:28 - you'll see me using these same like
21:29 - paradigms uh in the back end most of the
21:31 - times for like your crud methods
21:34 - but again you're welcome to name this
21:36 - whatever you like
21:38 - to make it make more sense to you in
21:39 - your web app
21:41 - so anyway we have a services a
21:43 - songservice.js file and we can now use
21:46 - that
21:48 - so i'll go ahead and do import song
21:50 - service
21:51 - from
21:53 - services song service
22:00 - and then inside the mounted function
22:03 - we can just say song service dot index
22:07 - and i guess who const
22:09 - or actually this dot songs is equal to
22:11 - await
22:12 - song service index and of course if
22:14 - we're doing a wait we need to make sure
22:16 - we have async here
22:17 - and this is going to do a get request
22:19 - the moment the page is
22:21 - mounted or the moment the song's
22:23 - view component is mounted on the page so
22:26 - if i save this and go back
22:29 - go to the network tab and refresh the
22:31 - page with a hard refresh
22:33 - we see that it makes a get request here
22:37 - to the songs endpoint
22:39 - of course you get a 404 not found
22:40 - because we haven't yet
22:42 - implemented a song's endpoint
22:47 - so
22:48 - with that being said let's go ahead and
22:50 - implement
22:51 - the songs endpoint in the server so i'm
22:54 - going to go ahead and just minimize
22:56 - clients go to the server
22:58 - i'm going to first go to routes
23:02 - and we need to get a songs in point
23:08 - so i'll do an app.get meaning
23:11 - listen for get request on the slash
23:12 - songs in point
23:14 - i'm going to go ahead and just pretend
23:16 - like we have a songs controller here
23:21 - and pretend like it's already defined
23:23 - and we can just do an index call on it
23:28 - and save that and now at this point we
23:30 - don't have
23:31 - a songs controller so let's go ahead and
23:33 - just copy and paste this one
23:36 - name it songs controller dot js
23:40 - and then it's pretty much gutted out
23:45 - we don't need json web tokens we don't
23:46 - need config and we don't need any of
23:49 - this stuff
23:51 - so i'll just remove pretty much all this
23:52 - stuff and just change this one to an
23:54 - index
23:58 - keep the try catch because it's going to
23:59 - be useful
24:03 - so
24:04 - we have a songs controller now with an
24:06 - index function
24:07 - and what do we want to do well
24:09 - first of all we don't have a song model
24:12 - defined right so if we wanted to keep
24:14 - track of all the songs that are in our
24:15 - database we're going to have a song
24:18 - model
24:19 - so i'm going to do a song.js file
24:22 - and again just copy and paste existing
24:24 - code
24:25 - and get rid of that
24:28 - you might as well just keep that format
24:30 - in case i need to do something special
24:33 - don't need to worry about hashing it
24:35 - don't need to worry about any of that
24:40 - okay so what
24:42 - exactly would go into a song
24:47 - so if we think about it we would have
24:50 - a
24:51 - title
24:54 - and that's just going to be a string
25:01 - we're going to need an artist
25:03 - we're going to need a genre
25:07 - we're going to need an album
25:10 - we're going to do an album image which
25:12 - is just going to be a string that points
25:13 - to
25:14 - some freely hosted i don't like image
25:17 - girl or something
25:18 - image title or image album art
25:20 - we're going to need a youtube id because
25:22 - we want to kind of link
25:24 - or display an embedded youtube player
25:27 - for whatever tab we're trying to learn
25:30 - it'd be nice to keep track of lyrics
25:32 - and of course most importantly we need
25:34 - the tab for the song
25:37 - so this shouldn't be foreign to you at
25:39 - this point we're just declaring a new
25:40 - sequel eyes model called song it just
25:42 - has these attributes here and they're
25:44 - all going to be strings actually
25:49 - this should be text
25:59 - because typically string and sqlize i
26:01 - think is a 255
26:03 - var care
26:04 - so 255 character limit so hopefully the
26:07 - images the image url doesn't
26:10 - bypass that i'll go ahead and rename it
26:12 - to image url
26:14 - um
26:15 - then youtube id is only like what eight
26:17 - characters or something so work should
26:18 - be good lyrics and tabs could be a lot
26:20 - of characters which is why i'm setting
26:22 - them as text
26:27 - so we have a songs model we have that
26:30 - songs controller
26:32 - at this point we can go into our songs
26:34 - controller and say
26:37 - we want to
26:39 - create the song using cons song is equal
26:42 - to song dot create rec dot body
26:46 - and that's going to call our sequel eyes
26:47 - object pass it direct.body whatever we
26:49 - pass in it'll create us a song object
26:52 - and then we can of course just send that
26:54 - back
26:56 - like so
27:00 - and actually i am creating the wrong
27:02 - method i'm actually creating the post
27:06 - so sorry about that but anyway we're
27:08 - going to need a method to
27:10 - create songs
27:12 - so i'm just going to go ahead and create
27:13 - a post method here
27:15 - and then above that i'm going to create
27:16 - an index method
27:18 - so
27:19 - again apologize for jumping around but
27:23 - so assuming we have an index method here
27:26 - we can actually do a find
27:28 - and then we can pass it where and just
27:30 - pass it an empty where clause
27:34 - so that will return us every single song
27:38 - and in fact i don't even think
27:41 - actually i think we need to find all
27:43 - here
27:46 - so instead i'll just do find all limit
27:48 - of let's say just give us back 10 songs
27:49 - because i don't want the ui to be
27:52 - overloaded with you know potentially a
27:54 - million songs
27:56 - change out the songs change that to
27:57 - songs okay
27:59 - so
28:01 - now we have two endpoints
28:02 - in the controller we have this index
28:04 - method which is going to find all the
28:06 - songs in the database and limit it to 10
28:09 - and return that back in the payload
28:11 - and of course if there is an error we
28:13 - can just say
28:16 - an error has occurred
28:18 - trying to fetch
28:20 - the songs
28:24 - and for posting i can say an error has
28:27 - occurred trying to create the song
28:41 - all righty
28:42 - and then lastly i think we need to add
28:45 - a
28:46 - post method
28:48 - for the songs
28:51 - so if i do a
28:53 - post request to slash songs
28:56 - that's going to call the songs
28:57 - controller.postmethod
29:00 - which is again what we accidentally
29:01 - created and we also
29:03 - intentionally created our index
29:06 - method
29:08 - and at this point i think everything
29:10 - should be okay
29:12 - knock on wood what we can do now is
29:14 - let's go ahead and create a new
29:18 - endpoint to try to test with
29:29 - let me rename this to
29:31 - songs and i'm going to change that to a
29:32 - get request
29:34 - change it to songs
29:37 - save that
29:39 - if we hit it it should return an empty
29:41 - array
29:42 - let's see is fulfilled is rejected
29:46 - oh duh
29:47 - all right so i haven't actually
29:48 - restarted my database yet so let me just
29:51 - create these anyway so i say create song
29:56 - get all songs
29:59 - i just say get songs
30:02 - and then for this one it's going to be a
30:04 - post request to these songs in point and
30:08 - it's going to contain
30:11 - all the necessary data
30:16 - which you see here
30:19 - in fact let me just make this a little
30:21 - bit easier
30:38 - that's weird you can't do that in
30:40 - visual studios huh
30:47 - good thing i have adam opened
30:51 - all right so
30:53 - we need to be able to easily create new
30:55 - songs here
30:58 - so if i try this i think this should
30:59 - crash as well because obviously
31:01 - we don't have that
31:05 - defined
31:13 - in fact now i'm looking at this why is
31:14 - this returning a 200
31:19 - is fulfilled equals false is rejected
31:21 - equals false
31:23 - because i'm pretty sure
31:25 - we should be getting this catch
31:29 - let me just i'm just going to try
31:31 - something out really quick
31:48 - [Music]
31:55 - well this must be crashing at a earlier
31:58 - point
31:59 - must not be at this point
32:02 - maybe it is
32:10 - bear with me just one second
32:14 - it's always fun looking into why stuff's
32:15 - working and why stuff isn't working
32:18 - yeah so i guess if your database table
32:20 - doesn't actually exist
32:23 - sqlize will not throw an exception when
32:26 - you do song.create oh i know why
32:29 - so
32:30 - this is the one pain that i've noticed
32:32 - with using async and wait
32:34 - is that
32:35 - for some reason
32:38 - if you forget to put that keyword await
32:41 - bad things happen
32:43 - because you'd expect that exception to
32:45 - be caught here and then thrown down here
32:47 - right
32:48 - but for some reason it wasn't
32:50 - so now when i change it to a weight
32:53 - an error has occurred when trying to
32:54 - create your song
32:56 - and we're actually catching that
32:57 - exception here
33:01 - right so async weight is also something
33:03 - that i'm
33:04 - trying to learn
33:06 - i've i've been using promises
33:08 - since the beginning since i started
33:09 - working so
33:11 - since es6 is allowed async and await i'm
33:13 - starting to try to use that more but i
33:15 - haven't really used it much in node
33:17 - but yeah just remember
33:19 - do not forget you're await
33:21 - if you're trying to make a promise call
33:23 - like this
33:26 - all right so
33:28 - now that we're done trying to fix that
33:29 - bug
33:31 - if i go back to app.js and i say force
33:34 - true
33:36 - remember we can kind of clear the
33:38 - database using that
33:42 - and save the file it should have
33:43 - restarted and dropped all the tables
33:44 - which it did
33:46 - and i'll go ahead and set that back to
33:47 - false save it
33:51 - and we get those
33:53 - tables recreated so now at this point
33:56 - okay take a breather that was a lot of
33:58 - work nice nice fun debugging
34:01 - we can now start posting songs so if i
34:03 - wanted to say
34:05 - float on
34:07 - artist is modest mouse
34:09 - genre is
34:11 - alternative rock or something
34:13 - album
34:15 - blah blah
34:18 - blah i'm actually going to find real
34:21 - album urls so we can actually start
34:23 - playing around with this so i'll say mod
34:24 - is mouse
34:33 - go to images
34:36 - this one looks good
34:39 - go to view image
34:41 - copy image address
34:47 - youtube id so now i can go to
34:50 - see
34:52 - modest mouse youtube
34:57 - oh hey float on number one
35:00 - it's probably just my history
35:03 - so put that in the youtube id
35:16 - and i'm actually going to do real data
35:17 - because it makes it a lot easier to
35:20 - design and see what your app looks like
35:22 - with real data
35:29 - but for lyrics and tabs
35:34 - maybe i should not worry about doing
35:36 - that because it's going to be a lot
35:38 - so anyway if i were to save this and
35:40 - just send it to the endpoint
35:42 - it's going to create that song and send
35:44 - it back to us
35:45 - and now if we were to go to get songs
35:48 - hit that end point it returns us an
35:50 - array of all those songs
35:53 - so if you remember now in the ui
35:56 - we are already set up
35:58 - to fetch from that songs in point so
36:01 - when i refresh the page
36:04 - it's hitting songs over here
36:07 - which is going to return us
36:09 - that one song inside of an array
36:12 - and the reason it's rendering these is
36:14 - because we need to update the key so if
36:16 - i go back to the client and go to songs
36:19 - and go to the key
36:21 - what i actually want to do
36:23 - is probably set it to the id that's the
36:25 - unique identifier for the song so i say
36:27 - id
36:29 - go back over here
36:42 - that's why
36:44 - i keep forgetting it's not
36:46 - i need to do um the response
36:50 - that data
36:51 - so it should be that is actually what
36:53 - i'm looking for
36:55 - there we go
36:57 - all right so i'll make a mental note to
36:58 - just always remember to do dot data
37:00 - because that's how axios returns us
37:02 - our data
37:06 - cool so
37:07 - just
37:08 - i'm probably going to jump around again
37:10 - to a a way to create songs
37:14 - mainly because that was very painful to
37:17 - do it in a ui at least we have an end
37:19 - point here that we can just quickly
37:20 - create songs if needed
37:24 - but it makes it easier in my opinion to
37:26 - be able to
37:27 - create and fetch songs from a ui
37:31 - so i think the next step is let's go
37:33 - ahead and work on
37:35 - creating a song by having like songs
37:38 - create endpoint
37:43 - all right so to create that
37:46 - create songs view or whatever i can say
37:50 - i'll just say create songs dot view
37:57 - create song dot view okay
38:00 - go to my blank
38:01 - paste that in
38:02 - and then of course go to our router
38:07 - and we need to put in that new view
38:12 - so here i could do song slash add
38:15 - and i could say
38:16 - or she'll say create since you know
38:22 - songs hyphen create
38:26 - create song
38:29 - import that create song component that
38:31 - we just created
38:35 - and go ahead and save that
38:39 - and make sure we can hit song create up
38:41 - here
38:44 - and we can
38:47 - so what would be useful is we need to
38:50 - have
38:52 - the same amount of input boxes for all
38:54 - those attributes that we have for our
38:56 - song model
38:58 - so if i were to go
39:03 - here
39:09 - and just say
39:11 - data and then return
39:13 - that array
39:16 - remember we have all those different
39:18 - attributes let's see if i can find them
39:19 - really quick
39:21 - go to songs
39:23 - go here
39:39 - alright so we have all the same
39:43 - attributes which are on our songs model
39:47 - so at this point we need to create
39:51 - an input field or text field for all of
39:54 - them
39:57 - so the first thing we can do if again
39:58 - we're probably going to wrap it in a
39:59 - panel just because it looks nicer so i'm
40:02 - going to say import panel from
40:04 - components
40:06 - panel
40:08 - and then down here i'll say components
40:13 - panel
40:16 - which gives us access to that
40:18 - custom panel thing that we created
40:24 - and i'm going to say panel title is
40:26 - equal to
40:28 - song metadata
40:31 - and inside the metadata panel
40:34 - we can go ahead and create a text field
40:37 - for all the
40:38 - metadata related stuff so if i go to v
40:41 - text field
40:43 - in fact i much rather just copy and
40:45 - paste this from like our login
40:47 - controller
40:49 - so
40:50 - go ahead and copy this go back to create
40:52 - song
40:53 - and put that in right there
40:56 - and the label here is going to be title
40:59 - and it's going to be a type of
41:02 - i guess text i could just type off i
41:04 - think but basically v model is going to
41:06 - be text
41:07 - or title
41:10 - so if i save this
41:13 - go over here we have a title thing
41:15 - awesome
41:21 - and we want to do the same for all the
41:23 - other stuff
41:29 - so we need one for
41:32 - artists
41:37 - we're gonna need one for genre
41:42 - we need one for album
41:48 - we need one for album image url so i'll
41:51 - just go ahead and copy this
41:59 - what is left lyrics in tab
42:03 - oh and youtube id
42:12 - and for the other ones
42:15 - i'm actually going to be using
42:20 - a multi-line text field
42:22 - so to start off let's go ahead and just
42:24 - um save this make sure this seems like
42:26 - it creates all the necessary metadata
42:29 - inputs
42:30 - which it does cool
42:33 - go ahead and just minimize this a little
42:35 - bit so we can see it all
42:36 - and what i want to do here is on the
42:38 - left i want to have the metadata and on
42:39 - the right i want to have
42:41 - a much larger view of the lyrics in the
42:44 - tab
42:45 - so what we can do
42:47 - is using that whole v layout thing so
42:49 - let's see be layout
42:55 - and then here we can say v flex and i
42:58 - want to flex it of a six
43:00 - and just put all that stuff
43:02 - that was defined in the panel inside
43:04 - that v flex
43:06 - save that
43:07 - and we see that it makes it a swift of
43:09 - six
43:11 - in fact that's a little bit too big
43:13 - let's make it a four or five
43:15 - maybe just a four
43:17 - but then underneath this we can just go
43:19 - ahead and make another v
43:24 - flex that's going to be a width of i
43:28 - think the opposite of that so 8 9 10 11
43:30 - 12 columns out of the 12 in this
43:33 - beautify framework
43:35 - and what we want to do now is for the
43:37 - other ones
43:39 - which would be of course tab and lyric
43:41 - tab and lyrics
43:47 - we want to go ahead actually update the
43:50 - label as well
43:54 - we can add a
43:55 - multi-line attribute to v-text field
43:59 - and that's going to
44:00 - basically
44:02 - make it
44:04 - multiple lines so you see here we can
44:06 - do new lines and stuff like that
44:10 - and you notice here i completely forgot
44:12 - to put that in a panel
44:14 - so i'll put panel here i'll do title and
44:16 - i'll do song
44:20 - structure maybe there's a better name
44:23 - for that but that's what we're going to
44:24 - do for right now
44:26 - save that
44:27 - we're given a panel that says song
44:29 - structure
44:31 - and i want to give a little bit of
44:33 - padding
44:34 - or margin to that so i could say class
44:38 - margin
44:39 - left of four
44:42 - maybe two
44:44 - we'll see what that looks like
44:47 - i guess two is okay it's really small
44:49 - space but that's good enough
44:51 - all right so
44:53 - we have now two panels
44:56 - and all of these are going to be
44:57 - updating the
44:59 - song data down here
45:02 - and we also finally want to add
45:05 - a button to create so if i were to go
45:08 - down
45:09 - here and just say v button
45:15 - in fact i'm not going to do this off my
45:17 - head anymore too much to remember
45:21 - to put that here and i'll say
45:23 - create song and on click it'll call
45:26 - create
45:28 - we don't have a create method so again
45:30 - let's go down here and say methods
45:32 - create
45:34 - and then call
45:36 - api
45:41 - cool so we have a button called create
45:43 - song
45:44 - which will hopefully send all this stuff
45:46 - to the back end
45:48 - so at this point if you remember under
45:50 - services we have a song service has an
45:52 - index call what we want to do is add
45:55 - that post call
45:58 - and we could just
46:00 - pass it whatever song data here
46:03 - make it do a post request to the songs
46:05 - in point and pass the song
46:09 - so here i can say
46:12 - import song service from
46:15 - services
46:16 - song service
46:20 - go here and say post
46:22 - and this
46:23 - dot
46:25 - song
46:28 - and at this point song is not defined so
46:31 - let me just wrap all that stuff inside
46:33 - something called song
46:36 - indent that one
46:43 - and then anywhere we have b model
46:47 - i'm just going to say song dot
46:54 - and again wrap this in a try catch
46:58 - just in case for whatever reason
47:01 - this
47:02 - errors out
47:04 - for right now we don't really need to
47:06 - display
47:07 - a message to the user
47:08 - we may want to say like hey
47:10 - like
47:11 - this stuff has to be required or defined
47:13 - and we can actually do that in one
47:14 - second
47:15 - but first of all let's make sure that
47:17 - this is working as intended
47:20 - so if i were to go here and say abc 123
47:24 - and just fill in with some blank data
47:29 - and click create
47:31 - let me go to network tab first
47:34 - and clear it and hit create song we see
47:36 - that it does a request to
47:38 - slash songs with a post we got back at
47:41 - 200 okay
47:43 - we got a response back with all the song
47:45 - information
47:48 - and
47:49 - right now
47:50 - it just kind of stays on the page which
47:52 - is not that great
47:55 - what i'd rather do is just redirect us
47:57 - to the song it created but since we
47:59 - don't have a way to view the song we
48:00 - just created let's go ahead and just
48:03 - go back to
48:05 - this dot router.push let's go back to
48:09 - songs
48:12 - so i'll save that
48:14 - do some more stuff here
48:16 - and now when we click create song
48:18 - we should go back to our songs page and
48:20 - look it's creating the songs from that's
48:24 - create songs endpoint that we've been
48:25 - using
48:30 - all right so that's pretty cool
48:32 - um
48:34 - maybe we could add a button here to be
48:36 - able to dive into that create songs
48:40 - uh whatever it's called
48:42 - view
48:50 - so to do that
48:53 - if we go to
48:57 - where are we doing that
49:00 - so in our songs panel here
49:03 - again what i'm trying to do here is i
49:04 - just want to add a fab button here so it
49:06 - looks like a plus sign with a circle
49:08 - when i click it it'll navigate me to
49:10 - that
49:11 - song that i'm trying to get to
49:20 - so i think what we can do
49:23 - is i think we may need
49:26 - an additional slot
49:29 - so if i go back to panel
49:31 - this is how you do this in beautify
49:33 - basically you just have a v button here
49:40 - and also do a v icon
49:43 - and give it an ad icon
49:46 - i'm not sure if the icons work yet let
49:48 - me just
49:50 - see if something shows up
50:05 - yeah i don't think icons work yet
50:07 - because i haven't even included
50:10 - the style sheet for the material design
50:12 - icons
50:13 - so i think that's an easy change let me
50:15 - just go to the index html file really
50:17 - quick
50:18 - go ahead and add that in
50:20 - and then hopefully that will refresh and
50:23 - have a plus sign yes okay so
50:27 - another thing
50:28 - that forgot the setup
50:31 - as you just saw
50:34 - let me just i'm getting overwhelmed
50:36 - there's too many tabs open
50:38 - so the icon is another view thing that
50:41 - you can do and just pass in the name of
50:43 - the icon
50:44 - and there's a bunch of material icons so
50:47 - if i were to go to material io icons
50:50 - any of these can be displayed so if i
50:52 - want to change it to circ check circle
50:55 - like say check circle
50:57 - save that
50:59 - go back to my page it's a check circle
51:03 - but we want to add
51:05 - so let's go ahead and keep it at add
51:09 - but originally we wanted a fab icon
51:11 - right so
51:12 - in order to achieve that
51:16 - there's a couple of attributes you need
51:17 - to add to your button
51:18 - so the first one is of course add fab
51:22 - so if we save that i think the button
51:24 - will become round
51:25 - awesome
51:26 - and then if we do class
51:28 - uh cyan
51:30 - accent 2
51:32 - just to give it some color
51:34 - maybe i'll just do green you know green
51:35 - for add i don't know i'm not a designer
51:37 - but
51:39 - yeah i'll do what i had before it
51:41 - probably looks better
51:43 - all right so really light cyan add
51:45 - button
51:47 - we want uh let's see
51:52 - if we add light it makes the color
51:55 - oh yeah i'll keep light if you don't
51:57 - know if you saw that but the the font
51:58 - color is darker when you do light
52:01 - i can say i want it to be a medium
52:02 - button
52:04 - you could also do something like large
52:06 - here so if you do large it's going to be
52:07 - much larger
52:09 - but i'll keep it at medium
52:11 - i want it to be absolute positioning
52:15 - so you see how that changes to be
52:16 - directly in the center
52:19 - and then i want it to be on the right
52:21 - and i want it to be in the middle
52:29 - so the reason why this
52:31 - is over there is because i do believe
52:34 - this is supposed to be in the toolbar so
52:36 - if i were to cut this out and put that
52:37 - in the toolbar instead
52:43 - it gets added right there
52:50 - and so what i was going with or going at
52:52 - originally is
52:54 - we need to have another slot so i'll say
52:56 - slot name is
52:58 - action
53:00 - i guess we just name it action for now
53:03 - and we want to be able to
53:09 - let's see if they don't have it defined
53:11 - we don't want to do anything
53:13 - so i'll do this i'm going to cut this
53:14 - out and we actually want that to be
53:16 - configurable and passed in
53:18 - from our panel because we don't want
53:19 - every single panel to have that action
53:21 - button necessarily
53:23 - so what we can do is we can say div
53:25 - slot is equal to action
53:29 - and i'll paste that code there
53:33 - save that
53:34 - and our button will show up over here in
53:36 - the top right
53:39 - in fact i think we could just add it to
53:42 - this
53:44 - if we wanted to
53:47 - and that might make it go back to where
53:49 - it was yes cool
53:51 - so basically by adding slot equal action
53:54 - we're passing that down to the panel and
53:56 - rendering it right there in the correct
53:58 - position that we need
54:01 - and so what we can also do
54:04 - is i'm going to use a router link
54:06 - in this
54:08 - instance where i can say if someone were
54:11 - to click this go ahead and go to the
54:12 - name
54:14 - songs create
54:18 - i think that's what we named it
54:29 - all right so let's see how this looks if
54:31 - we were to instead make this a slot
54:39 - so position got jacked up a little bit
54:42 - but hey it's still working as intended
54:49 - good thing to do when your program is
54:51 - just mess around with stuff like see
54:53 - see what happens if you change around
54:54 - stuff or you can go to the docs and re
54:56 - re-read the docs
54:58 - but again since router link seemed to
55:00 - has messed up the
55:02 - positioning of that plus sign
55:04 - instead i am just going to go here and
55:06 - say
55:08 - add a click listener and say navigate to
55:12 - and i'm going to say
55:14 - name is songs create
55:23 - instead of using router link
55:26 - and again if you have a better way of
55:27 - doing that like if there's an already a
55:29 - directive where i can just say like
55:31 - navigate to let me know maybe i should
55:34 - actually read the docs after this
55:38 - make sure it's called songs create
55:42 - and inside methods we need to create
55:45 - that navigate
55:47 - to
55:49 - method
55:52 - i'll say route
55:53 - say this dot router dot push route
56:02 - cool
56:03 - so easily navigating through all of our
56:05 - pages
56:07 - that's all working
56:09 - we can go to this page and add our new
56:11 - random song
56:13 - and it gets added to our songs list and
56:16 - again this obviously looks
56:17 - pretty horrendous right now so we can
56:19 - kind of style this in a second
56:22 - uh but i think one thing would be nice
56:23 - to do is i want to make sure that all
56:25 - these are required i don't want people
56:27 - uploading bad data to my app
56:30 - so what we can do
56:33 - is if we were to go back to that
56:35 - create song view
56:37 - or component
56:39 - an interesting thing you can add to all
56:41 - these is required so if i were to add
56:43 - required the title
56:45 - we see here that a star appears next to
56:47 - it
56:48 - and then if i fail to actually add
56:50 - something in
56:54 - it doesn't turn red yet because i
56:55 - haven't defined any rules so first i'm
56:57 - going to add required to it
57:00 - and then second we can add
57:02 - a list of rules
57:06 - so if we pretend like we have
57:08 - a rules object
57:10 - with some required stuff attached to it
57:17 - we can go down to the data so i'll say
57:19 - data here
57:21 - and i'm going to add
57:23 - some rules which is going to be an
57:25 - object
57:27 - and basically the rule is
57:31 - we're going to say make the required
57:33 - thing
57:40 - make sure the value is actually
57:43 - defined
57:57 - so basically this is going to pass that
57:59 - rules dot required
58:01 - and it's going to make sure that the
58:03 - value is defined for that in fact i
58:04 - don't know if i need that rules
58:07 - i can just say required
58:12 - so up here i can just say
58:14 - rules is required
58:17 - go back here
58:19 - and see how it turns red and then it
58:20 - prints out required if you fail to fill
58:22 - it in
58:24 - pretty awesome so now i could just go
58:27 - ahead and
58:28 - do that for everything
58:38 - cool now they're all required
58:42 - now the only thing is we need to also
58:44 - check that
58:46 - everything has been filled in
58:49 - before we try to create and there might
58:50 - be a better way to do this but
58:53 - what i'm going to do here
58:55 - is
58:57 - simply just say
58:58 - are all fields filled in
59:01 - and i'm going to just loop over all the
59:04 - keys of my song
59:09 - and verify
59:12 - that every single value of those keys
59:15 - so i can say key
59:21 - so make sure that every single
59:24 - value using that key is defined because
59:27 - that's kind of what we
59:29 - we care
59:30 - about and then if for whatever reason
59:33 - you did not fill that in
59:36 - so if that's false
59:39 - we can say this area is
59:41 - please fill in
59:43 - all the required fields
59:47 - and then return
59:48 - and of course we don't have an error
59:50 - saying so i say error null
59:52 - and then up here we need to actually
59:53 - display it above the button
59:55 - i'll just say span class is equal to
59:57 - error
60:07 - and only display it if error is defined
60:11 - and what we could do here is say is that
60:13 - error is equal to null to kind of set it
60:14 - back to a default state every time you
60:16 - click the button
60:24 - this needs to be this dot song
60:29 - i think
60:30 - yeah
60:31 - alright so please fill in all the
60:33 - required fields
60:35 - let's actually make that a div and not a
60:37 - span
60:42 - and it's also super ugly as to why it's
60:44 - like that
60:45 - so i think beautify has a built-in error
60:47 - class
60:49 - so maybe instead
60:52 - i'm just gonna add a
60:54 - red alert
61:03 - or maybe danger alert so if i go back to
61:05 - view over here
61:06 - and just
61:08 - do danger alert color red
61:12 - and then go back here
61:14 - cool it's red now
61:16 - and we should not be able to fill in
61:18 - anything let me just refresh the page to
61:20 - make sure that goes away
61:22 - so we should not be able to fill in
61:23 - anything
61:26 - or create the song until we filled out
61:28 - every single field
61:30 - and i did and it added the song
61:36 - okay so for the last thing i'm going to
61:38 - do in this
61:39 - part of the video is just try to style
61:41 - these songs
61:45 - so
61:46 - if i were to just start with a blank
61:48 - slate and go to
61:50 - the songs panel
61:53 - it would be nice that for um
61:57 - to have these actually have like a nice
61:58 - style to them
62:04 - so with that being said let's go ahead
62:05 - and try to create a
62:07 - simplified layout here so if i were to
62:09 - go here
62:10 - and basically for
62:12 - a super simple layout
62:15 - we can just do v
62:16 - layouts
62:18 - v layout and then inside the speed
62:20 - layout is going to be so we're going to
62:22 - have a row here
62:24 - and inside the row we want to kind of
62:26 - split it up
62:37 - actually i think what we could do
62:41 - panel has songs v layout
62:51 - yeah let's just go with this and see
62:52 - what happens but basically we want a
62:54 - left and a right side so i'm going to do
62:56 - a v flex
62:57 - of six and then another one of six so we
62:59 - have a left and a right side
63:03 - and on the left side
63:05 - let's just go ahead and
63:07 - do a let's see
63:09 - song title
63:15 - so you do song.title here
63:21 - and i could do the other ones
63:25 - song artist
63:27 - and song genre
63:33 - so get rid of these and then on the
63:35 - right side
63:38 - we want
63:43 - to include an image i'll say class
63:46 - album image
63:48 - and we want to point that so in in a
63:51 - view
63:52 - if you do the colon i think it's the
63:53 - same as doing b bind
63:56 - so basically we want to bind that source
63:58 - attribute to whatever the song album
64:02 - image url is
64:11 - so hopefully if we save this let's see
64:12 - what happens
64:16 - all right so one thing we'll notice is
64:17 - that this image is
64:20 - expanded to its complete size so which
64:22 - is why we added this class
64:24 - album image here
64:26 - so if we go down to the scoped we can
64:28 - say
64:29 - album image
64:31 - is equal to width of 100
64:37 - so it looks a little bit better there
64:43 - even so i think that's a little bit too
64:44 - big
64:45 - then we also want to center it so i'll
64:47 - do that
64:51 - all right so that looks a little bit
64:52 - better and for the title the artist in
64:56 - the genre we can say song title
65:00 - song artist
65:03 - song
65:04 - genre
65:06 - look at this font size of 18 pixels i'll
65:08 - give this one a font size of
65:10 - 24 pixels and then i'll give this one a
65:12 - font size of 30 pixels
65:18 - all right so that looks a little bit
65:19 - better now
65:25 - and then let's go ahead and just wrap
65:27 - all this into a song so i'll say
65:29 - give it a padding of 20
65:31 - let's say height of 330 pixels
65:34 - overflow hidden because we don't want
65:35 - anything overflowing
65:37 - and then up here
65:39 - where we're doing that for loop
65:42 - i'll just say class of song
65:48 - cool so all the songs other than these
65:50 - that are missing the
65:52 - images
65:53 - are being displayed in such a way
66:04 - so it looks a little bit better still
66:06 - not that great but hey it it's a start
66:11 - and then what we want to probably add
66:13 - is a way to if i were to say like a view
66:16 - button here so i can easily go in and
66:18 - view the tabs of that song
66:20 - so we should know how to do that if we
66:22 - want to add it to the left column here
66:24 - we of course have to go here and say the
66:27 - button
66:31 - and again let's just go ahead and find a
66:33 - v button
66:36 - um
66:37 - let's see how about the create song
66:38 - button
66:47 - that's the great thing as after your app
66:48 - starts becoming larger you have a lot
66:50 - more
66:51 - copying and pasting resources
66:57 - so here i can say navigate to i'll say
67:00 - name
67:01 - song
67:04 - prams
67:08 - song id of
67:11 - song dot id
67:22 - and it's always nice to make sure you
67:23 - format your
67:25 - objects so they're very easy to change
67:27 - and read
67:36 - all right so now we have a view button
67:38 - which if we click it it calls navigate
67:40 - to which will go down to
67:44 - the songs
67:46 - or it will go to the song view
67:49 - and then it will pass a parameter
67:52 - called song id which will grab from the
67:54 - song
67:57 - so again right now we don't really have
67:59 - a song
68:00 - route so let's go ahead and add one
68:02 - and then we can implement that later in
68:04 - the next part
68:05 - so if i were to do song id here so path
68:07 - is slash song slash
68:09 - id what this does is it allows us to put
68:12 - in variables inside the url parameter
68:16 - or your url query or whatever you want
68:19 - to call it
68:21 - and so
68:23 - change that to shh
68:25 - song and i'll change this to just
68:29 - view song
68:32 - which means we have to come up here and
68:33 - say view song
68:35 - and over here components we have to say
68:38 - view song view
68:40 - and i'll go ahead and just create it
68:41 - from a blank
68:47 - all right so if we go back
68:50 - we now have a view button and if we were
68:51 - to click it it takes us to song
68:54 - one
68:55 - and the one is coming from the song id
68:57 - so remember in the database every time
68:58 - we create a new record it's going to
69:00 - assign it a unique id an auto
69:03 - incrementing unique
69:04 - id so then again if you think about the
69:07 - future we could just
69:09 - have this page load in that song
69:11 - information and display it
69:17 - so i think that's a good stopping point
69:19 - for this part 4 of the full stack
69:21 - tutorial
69:22 - again be sure to subscribe to my twitter
69:25 - it's in the description link if you want
69:27 - to get updates for when i paste the
69:29 - latest part 5 video
69:32 - and again feel free to leave me comments
69:33 - or give me suggestions or feedback as to
69:36 - how to make these tutorials better or if
69:38 - you have
69:39 - maybe a different way that you think i
69:40 - should be doing something in view
69:42 - because again this is more of a learning
69:44 - um effort on my approach it's not me
69:46 - trying to say i'm an expert i'm trying
69:47 - to teach you it's more of hey let's try
69:49 - to reinforce what i have learned from
69:51 - view and make sure i can teach it well
69:54 - all right so again thanks for watching
69:56 - and stay tuned for the next part that
69:57 - should be coming soon

Cleaned transcript:

hey everyone i'm cody and welcome to part four of building a full stack web application using vue.js and express.js so if you remember in part three we built this login panel and we built that login endpoint in the backend we also brought in view x to kind of manage some of the shared state of our application such as the token or the user or this boolean is user logged in and we used it to hide and show different things in this header so another thing i'm going to do are i guess what we can start doing now is let's add a log out button and okay so to do that we should be familiar by now as how to add a button to that header so if i go to the header in my components tab i could easily just copy and paste that copy pasta and then go ahead and say display it if the user is is logged in right so i'll just say log out what we could do is when the user clicks this we could just say log out and then down here under methods we could just go ahead and add a log out method which is going to do a couple of things the first thing it's going to do is dispatch so i do this.store.dispatch it's going to set the token equal to null and then we also want to set the user equal to null and because we're calling set token of null remember in our store it should set is user logged in to false not sure if this is the best way to do it but hey it works for now um and then finally i think we could probably go here and just do it to do redirect to home page or something in fact i'll just i'll just do that now right so i'll do router.push and then i'll say go to my root so go ahead and save that header file and if i go back here i have a log out button if i click it it logged me out you saw that it did set token and it also did a site user and now in our final state of our app we have token is null users null and is logged in is also equal to false and then of course up here login and sign up are displayed now because we are logged out right so go ahead and log back in so i think the next step is we can actually start working on that whole browse button that i added earlier in part three so if i go back to the header i have this to do implement me comment i'll go ahead and uncomment that stuff and what we want to do actually let me go over here let's go ahead and copy this button you know this button's got some good styles so go here and say if the user is actually i don't need to do an if just always display the browse because you want users to be able to access your tabs regardless of if they're logged in or logged out so what we can do here is we'll say when you click on this browse button it's going to take you to the songs route so then of course we don't have a songs route so if i were to go back to my router and i add a songs into my routes array and then here i'll just go ahead and add a songs component which again we do not have yet so i'll go ahead and say songs.view and i should probably find some type of like generator that makes these blank files for me i guarantee you vs code has it but i just haven't really taken the time to look at it so anyway that's going to be our bare bones file in fact i'll just do blank dot view here just put a blank template there so i can use that in the future all right so we have a link called browse and when we click it it takes us to that songs url and the first thing that we want to do is we want to have a panel which displays all of the songs so starting off we could have a panel called um let me just clean this up a little bit go to the register page i'm going to grab all of this all that goodies and go ahead and just paste it right there so that now we have a blank register tab which we don't really care about so i can just say songs and in here we can just go ahead and clear that out all right so we have a blank panel which we can put all of our songs or you know song renders here and so one thing you might notice now is that we have all these different pages which have this like this panel and i'm copying pasting code throughout a majority of my application right so if you notice that you have the same component which is being shared throughout your application by just sharing code what you can do is create a new component so i'll say panel.view and then inside this panel i'll go into blank put in the panel cool beans we actually want to just go ahead and create that same type of panel structure so if we go back to the register and find the div where we declare that panel so i think it's starting here boom all right so we have a panel now and we want to make this a very generic component so it's a panel that you can change the title as needed so i'm going to change that to curly brace curly brace which is a binding a oneway binding in view so basically if title is defined in my data so down here remember we have data or if it's defined in your props which we'll cover in a second so here i can say title is equal to hello world so if title is defining your data which it is on line 40 it's going to render whatever the value is right there and then something else we want to do is just go ahead and add a slot here and i will show you what a slot does in one second so i'll go ahead and remove all this extra jazz that we don't need and go ahead and save this file so again this should make sense we just made a new view component called panel and it's just going to display that white panel with the top cyan toolbar and then it has the content here with some padding and then a slot so if i were to go back to let's say that songs page i can go ahead and import that so i'll say import panel from component slash panel make sure to capitalize that right and then here i can say i want to be able to access that components so i'll say i want to be able to access the panel and then here remember that same code that was copy and pasted throughout those three different pages we could just say panel and close that off and now if i were to save this file we get hello world no slot content defined all right so that's that should make sense we're just making a sub component and displaying it inside another component and we're including it here on line 13 to be able to access it on line four and there's a little bit of magic behind how this panel gets named basically if your panel is named like my awesome panel this is going to be converted to my awesome panel just like that so it's a little bit of magic on going on behind the scenes that you kind of have to know going off of what i was going to talk about for slot basically if inside a parent component you want to pass down something so let's say here i want to pass down a something special like an h3 yo yo yo and then maybe like a paragraph tag and this is the one thing i sometimes hate about autocomplete maybe i just don't know how to use it correctly huh all right so now when i save this you see yoyoyo hello there i'm a paragraph tag we inspect this element you can see oh wow we have an h3 and a p that was kind of passed down into that panel slot so if you remember here we have a slot and basically what this is going to do is we're going to take when you do this when you declare some type of content inside panel you're basically just copying and pasting it over there so whenever this panel subcomponent renders it just takes whatever is declared inside panel and puts it directly into wherever you had that panel or wherever you had that slot defined and you can also name slots i think you can do like name equals like hello and then i could say like slot name musical to hello and this time if this doesn't work i'm going to go ahead and look up the docs all right so this is going to be put in the slot hello and then if i do buy five five five a little bit of backstreet boys now anyone okay so if i go here and do is that in sync don't even know man let's do electronica so now if i add a buy name slot i think this should you know what i don't know what i'm doing so let me look up the docs so you guys can watch me struggle with this just as well so you can do name slots down here inside you can do slot name equals whatever and inside the parent you do the slot equals the name okay so i had this right in the songs or not in the songs in the panel down here i have these two slots with different names hello and bye and then if i were to do i already forgot what i was looking at oh if i do slot equals by instead of what i have there and go back i think i actually need to like change this to uh div there we go okay so again i haven't really messed too much around with slots or name slots but it's just good to know that you can name the slots and kind of insert html from a parent component down into a sub component like whichever way you like but since we've kind of already covered what slots are we can just go ahead and get rid of all that since you should understand or at least kind of understand what i was trying to achieve there so again go ahead change that up now we want to make this sub component panel a little bit more modular so something useful is we want to be able to pass in a title so let's say we want to pass in something called songs instead of having data title defined here instead we can have props defined and just define title like that and we can actually get rid of data because we're not even using data in that case so now if i go back we see that probably didn't save something one second there we go yeah sometimes the uh hot reload doesn't reload you have to do a hard refresh probably have to look into that but now we can easily just pass in whatever we want inside of an attribute so you saw i just added hello and it got passed down to my my panel and that's because we're saying this panel has the ability to be passed in a title prop and then we're using that title prop here so very cool very cool if we wanted to let's say go back and refactor so let's go ahead and just go back to those other pages like register go ahead and import panel now it's kind of a pain that you have to declare and import in every single one and i'm pretty sure you can do a global include in view but honestly i think it makes more sense to not even use globals because then when you try to copy and paste stuff from one app to the other you're not really sure what the heck like why did it fail it's like oh because you have like 15 globals it's trying to access of course it's going to fail but if you just have it like explicit that this requires a panel component and that's it it makes it much easier to understand like how everything is working so for the register and login pages we went ahead and included the panel and up here i could just say panel titles equal to register and i'm going to go ahead and just get rid of all that stuff uh i think it was just like that template layout flex panel typically i'll flex panel i don't think i need that all right let's see if the register page is working so i go to sign up and a hard refresh just in case and yep it's still working so that's awesome and then i go to the login page again we can just say a panel is going to be called login and get rid of all that extra fluff and then get rid of that and say that could be a panel and unindent all that stuff so now we go to login page hard refresh just in case it's also working just as fine as the other panel instance cool so again should all make sense recap i made a panel sub component which takes a title as a prop and you can pass that in and now in my register login in songs page we simply simply just call panel pass it whatever title we want and it will render that panel for us all right so now at this point we have the songs panel and we want to display a list of songs right or tabs in this case we're calling songs and if you dive into a song it's a tab but anyway so if we go to the songs panel we can first assume that we have an array or collection that's going to be returned from the back end and we need to loop over it and render it x amount of times right so in vue.js you can do a v4 like this so basically this is a for loop so i can say for song and songs we want to go ahead and render something so if i were to go to make a data thing and return songs as an array uh actually i'll say um float on modest mouse album good news for people who hate or love bad news i think that's the album i don't know so first i need to wrap that in an object oh i think i'm just forgetting to bind a key nice okay so the issue there is anytime you do a v4 and in the error like if i go back to the error it was actually telling me exactly what was wrong i just wasn't reading it so it says elements in iteration e or iteration expect to have a v bind colon key directive so what that means is we need to pass it a key directive saying okay the title will be the unique identifier for the song so now if we were to go back to here we see that it's printing out float on modest mouse good news for people who love bad news and if i were to add just little hyphens in between there we see let's bring that out and just kind of show you what the 4 or v4 is doing if i were to copy and paste this like a lot and save it we see that it's rendering let's see five times and that's because i have five objects inside this songs array so at this point it should make sense as to how and why the v4 is working so it just loops over the songs array for each one we have access to that song object we're just telling it to print out the title the artist the album and then we also need to pass in a key and that's being passed down into the slot of the panel and then rendered here so what we want to do at this point is we need to dynamically load songs in from a backend right so if i were to instead just set that equal to an empty array and i'll just go ahead and delete all that actually i think if i set that to null let's see what happens okay so i'll just set it to an off right now but what we want this component to do is the moment it's mounted onto the page we want to go ahead and do a request to the back end for all the songs um so at this point you remember how to make services so if we were to copy and paste authentication service and we can rename it to songservice.js and in here we could just say make a index call it's a get request to slash songs doesn't require any credentials or anything so basically we have a song service which will make a get request to the songs in point and that should return some amount of songs to us and you can name this whatever you want like it could be called get all songs um but if you use like ruby on rails i think index is typically used for just like slash songs show is used for like songs of id so i like to keep it consistent and you'll see me using these same like paradigms uh in the back end most of the times for like your crud methods but again you're welcome to name this whatever you like to make it make more sense to you in your web app so anyway we have a services a songservice.js file and we can now use that so i'll go ahead and do import song service from services song service and then inside the mounted function we can just say song service dot index and i guess who const or actually this dot songs is equal to await song service index and of course if we're doing a wait we need to make sure we have async here and this is going to do a get request the moment the page is mounted or the moment the song's view component is mounted on the page so if i save this and go back go to the network tab and refresh the page with a hard refresh we see that it makes a get request here to the songs endpoint of course you get a 404 not found because we haven't yet implemented a song's endpoint so with that being said let's go ahead and implement the songs endpoint in the server so i'm going to go ahead and just minimize clients go to the server i'm going to first go to routes and we need to get a songs in point so i'll do an app.get meaning listen for get request on the slash songs in point i'm going to go ahead and just pretend like we have a songs controller here and pretend like it's already defined and we can just do an index call on it and save that and now at this point we don't have a songs controller so let's go ahead and just copy and paste this one name it songs controller dot js and then it's pretty much gutted out we don't need json web tokens we don't need config and we don't need any of this stuff so i'll just remove pretty much all this stuff and just change this one to an index keep the try catch because it's going to be useful so we have a songs controller now with an index function and what do we want to do well first of all we don't have a song model defined right so if we wanted to keep track of all the songs that are in our database we're going to have a song model so i'm going to do a song.js file and again just copy and paste existing code and get rid of that you might as well just keep that format in case i need to do something special don't need to worry about hashing it don't need to worry about any of that okay so what exactly would go into a song so if we think about it we would have a title and that's just going to be a string we're going to need an artist we're going to need a genre we're going to need an album we're going to do an album image which is just going to be a string that points to some freely hosted i don't like image girl or something image title or image album art we're going to need a youtube id because we want to kind of link or display an embedded youtube player for whatever tab we're trying to learn it'd be nice to keep track of lyrics and of course most importantly we need the tab for the song so this shouldn't be foreign to you at this point we're just declaring a new sequel eyes model called song it just has these attributes here and they're all going to be strings actually this should be text because typically string and sqlize i think is a 255 var care so 255 character limit so hopefully the images the image url doesn't bypass that i'll go ahead and rename it to image url um then youtube id is only like what eight characters or something so work should be good lyrics and tabs could be a lot of characters which is why i'm setting them as text so we have a songs model we have that songs controller at this point we can go into our songs controller and say we want to create the song using cons song is equal to song dot create rec dot body and that's going to call our sequel eyes object pass it direct.body whatever we pass in it'll create us a song object and then we can of course just send that back like so and actually i am creating the wrong method i'm actually creating the post so sorry about that but anyway we're going to need a method to create songs so i'm just going to go ahead and create a post method here and then above that i'm going to create an index method so again apologize for jumping around but so assuming we have an index method here we can actually do a find and then we can pass it where and just pass it an empty where clause so that will return us every single song and in fact i don't even think actually i think we need to find all here so instead i'll just do find all limit of let's say just give us back 10 songs because i don't want the ui to be overloaded with you know potentially a million songs change out the songs change that to songs okay so now we have two endpoints in the controller we have this index method which is going to find all the songs in the database and limit it to 10 and return that back in the payload and of course if there is an error we can just say an error has occurred trying to fetch the songs and for posting i can say an error has occurred trying to create the song all righty and then lastly i think we need to add a post method for the songs so if i do a post request to slash songs that's going to call the songs controller.postmethod which is again what we accidentally created and we also intentionally created our index method and at this point i think everything should be okay knock on wood what we can do now is let's go ahead and create a new endpoint to try to test with let me rename this to songs and i'm going to change that to a get request change it to songs save that if we hit it it should return an empty array let's see is fulfilled is rejected oh duh all right so i haven't actually restarted my database yet so let me just create these anyway so i say create song get all songs i just say get songs and then for this one it's going to be a post request to these songs in point and it's going to contain all the necessary data which you see here in fact let me just make this a little bit easier that's weird you can't do that in visual studios huh good thing i have adam opened all right so we need to be able to easily create new songs here so if i try this i think this should crash as well because obviously we don't have that defined in fact now i'm looking at this why is this returning a 200 is fulfilled equals false is rejected equals false because i'm pretty sure we should be getting this catch let me just i'm just going to try something out really quick well this must be crashing at a earlier point must not be at this point maybe it is bear with me just one second it's always fun looking into why stuff's working and why stuff isn't working yeah so i guess if your database table doesn't actually exist sqlize will not throw an exception when you do song.create oh i know why so this is the one pain that i've noticed with using async and wait is that for some reason if you forget to put that keyword await bad things happen because you'd expect that exception to be caught here and then thrown down here right but for some reason it wasn't so now when i change it to a weight an error has occurred when trying to create your song and we're actually catching that exception here right so async weight is also something that i'm trying to learn i've i've been using promises since the beginning since i started working so since es6 is allowed async and await i'm starting to try to use that more but i haven't really used it much in node but yeah just remember do not forget you're await if you're trying to make a promise call like this all right so now that we're done trying to fix that bug if i go back to app.js and i say force true remember we can kind of clear the database using that and save the file it should have restarted and dropped all the tables which it did and i'll go ahead and set that back to false save it and we get those tables recreated so now at this point okay take a breather that was a lot of work nice nice fun debugging we can now start posting songs so if i wanted to say float on artist is modest mouse genre is alternative rock or something album blah blah blah i'm actually going to find real album urls so we can actually start playing around with this so i'll say mod is mouse go to images this one looks good go to view image copy image address youtube id so now i can go to see modest mouse youtube oh hey float on number one it's probably just my history so put that in the youtube id and i'm actually going to do real data because it makes it a lot easier to design and see what your app looks like with real data but for lyrics and tabs maybe i should not worry about doing that because it's going to be a lot so anyway if i were to save this and just send it to the endpoint it's going to create that song and send it back to us and now if we were to go to get songs hit that end point it returns us an array of all those songs so if you remember now in the ui we are already set up to fetch from that songs in point so when i refresh the page it's hitting songs over here which is going to return us that one song inside of an array and the reason it's rendering these is because we need to update the key so if i go back to the client and go to songs and go to the key what i actually want to do is probably set it to the id that's the unique identifier for the song so i say id go back over here that's why i keep forgetting it's not i need to do um the response that data so it should be that is actually what i'm looking for there we go all right so i'll make a mental note to just always remember to do dot data because that's how axios returns us our data cool so just i'm probably going to jump around again to a a way to create songs mainly because that was very painful to do it in a ui at least we have an end point here that we can just quickly create songs if needed but it makes it easier in my opinion to be able to create and fetch songs from a ui so i think the next step is let's go ahead and work on creating a song by having like songs create endpoint all right so to create that create songs view or whatever i can say i'll just say create songs dot view create song dot view okay go to my blank paste that in and then of course go to our router and we need to put in that new view so here i could do song slash add and i could say or she'll say create since you know songs hyphen create create song import that create song component that we just created and go ahead and save that and make sure we can hit song create up here and we can so what would be useful is we need to have the same amount of input boxes for all those attributes that we have for our song model so if i were to go here and just say data and then return that array remember we have all those different attributes let's see if i can find them really quick go to songs go here alright so we have all the same attributes which are on our songs model so at this point we need to create an input field or text field for all of them so the first thing we can do if again we're probably going to wrap it in a panel just because it looks nicer so i'm going to say import panel from components panel and then down here i'll say components panel which gives us access to that custom panel thing that we created and i'm going to say panel title is equal to song metadata and inside the metadata panel we can go ahead and create a text field for all the metadata related stuff so if i go to v text field in fact i much rather just copy and paste this from like our login controller so go ahead and copy this go back to create song and put that in right there and the label here is going to be title and it's going to be a type of i guess text i could just type off i think but basically v model is going to be text or title so if i save this go over here we have a title thing awesome and we want to do the same for all the other stuff so we need one for artists we're gonna need one for genre we need one for album we need one for album image url so i'll just go ahead and copy this what is left lyrics in tab oh and youtube id and for the other ones i'm actually going to be using a multiline text field so to start off let's go ahead and just um save this make sure this seems like it creates all the necessary metadata inputs which it does cool go ahead and just minimize this a little bit so we can see it all and what i want to do here is on the left i want to have the metadata and on the right i want to have a much larger view of the lyrics in the tab so what we can do is using that whole v layout thing so let's see be layout and then here we can say v flex and i want to flex it of a six and just put all that stuff that was defined in the panel inside that v flex save that and we see that it makes it a swift of six in fact that's a little bit too big let's make it a four or five maybe just a four but then underneath this we can just go ahead and make another v flex that's going to be a width of i think the opposite of that so 8 9 10 11 12 columns out of the 12 in this beautify framework and what we want to do now is for the other ones which would be of course tab and lyric tab and lyrics we want to go ahead actually update the label as well we can add a multiline attribute to vtext field and that's going to basically make it multiple lines so you see here we can do new lines and stuff like that and you notice here i completely forgot to put that in a panel so i'll put panel here i'll do title and i'll do song structure maybe there's a better name for that but that's what we're going to do for right now save that we're given a panel that says song structure and i want to give a little bit of padding or margin to that so i could say class margin left of four maybe two we'll see what that looks like i guess two is okay it's really small space but that's good enough all right so we have now two panels and all of these are going to be updating the song data down here and we also finally want to add a button to create so if i were to go down here and just say v button in fact i'm not going to do this off my head anymore too much to remember to put that here and i'll say create song and on click it'll call create we don't have a create method so again let's go down here and say methods create and then call api cool so we have a button called create song which will hopefully send all this stuff to the back end so at this point if you remember under services we have a song service has an index call what we want to do is add that post call and we could just pass it whatever song data here make it do a post request to the songs in point and pass the song so here i can say import song service from services song service go here and say post and this dot song and at this point song is not defined so let me just wrap all that stuff inside something called song indent that one and then anywhere we have b model i'm just going to say song dot and again wrap this in a try catch just in case for whatever reason this errors out for right now we don't really need to display a message to the user we may want to say like hey like this stuff has to be required or defined and we can actually do that in one second but first of all let's make sure that this is working as intended so if i were to go here and say abc 123 and just fill in with some blank data and click create let me go to network tab first and clear it and hit create song we see that it does a request to slash songs with a post we got back at 200 okay we got a response back with all the song information and right now it just kind of stays on the page which is not that great what i'd rather do is just redirect us to the song it created but since we don't have a way to view the song we just created let's go ahead and just go back to this dot router.push let's go back to songs so i'll save that do some more stuff here and now when we click create song we should go back to our songs page and look it's creating the songs from that's create songs endpoint that we've been using all right so that's pretty cool um maybe we could add a button here to be able to dive into that create songs uh whatever it's called view so to do that if we go to where are we doing that so in our songs panel here again what i'm trying to do here is i just want to add a fab button here so it looks like a plus sign with a circle when i click it it'll navigate me to that song that i'm trying to get to so i think what we can do is i think we may need an additional slot so if i go back to panel this is how you do this in beautify basically you just have a v button here and also do a v icon and give it an ad icon i'm not sure if the icons work yet let me just see if something shows up yeah i don't think icons work yet because i haven't even included the style sheet for the material design icons so i think that's an easy change let me just go to the index html file really quick go ahead and add that in and then hopefully that will refresh and have a plus sign yes okay so another thing that forgot the setup as you just saw let me just i'm getting overwhelmed there's too many tabs open so the icon is another view thing that you can do and just pass in the name of the icon and there's a bunch of material icons so if i were to go to material io icons any of these can be displayed so if i want to change it to circ check circle like say check circle save that go back to my page it's a check circle but we want to add so let's go ahead and keep it at add but originally we wanted a fab icon right so in order to achieve that there's a couple of attributes you need to add to your button so the first one is of course add fab so if we save that i think the button will become round awesome and then if we do class uh cyan accent 2 just to give it some color maybe i'll just do green you know green for add i don't know i'm not a designer but yeah i'll do what i had before it probably looks better all right so really light cyan add button we want uh let's see if we add light it makes the color oh yeah i'll keep light if you don't know if you saw that but the the font color is darker when you do light i can say i want it to be a medium button you could also do something like large here so if you do large it's going to be much larger but i'll keep it at medium i want it to be absolute positioning so you see how that changes to be directly in the center and then i want it to be on the right and i want it to be in the middle so the reason why this is over there is because i do believe this is supposed to be in the toolbar so if i were to cut this out and put that in the toolbar instead it gets added right there and so what i was going with or going at originally is we need to have another slot so i'll say slot name is action i guess we just name it action for now and we want to be able to let's see if they don't have it defined we don't want to do anything so i'll do this i'm going to cut this out and we actually want that to be configurable and passed in from our panel because we don't want every single panel to have that action button necessarily so what we can do is we can say div slot is equal to action and i'll paste that code there save that and our button will show up over here in the top right in fact i think we could just add it to this if we wanted to and that might make it go back to where it was yes cool so basically by adding slot equal action we're passing that down to the panel and rendering it right there in the correct position that we need and so what we can also do is i'm going to use a router link in this instance where i can say if someone were to click this go ahead and go to the name songs create i think that's what we named it all right so let's see how this looks if we were to instead make this a slot so position got jacked up a little bit but hey it's still working as intended good thing to do when your program is just mess around with stuff like see see what happens if you change around stuff or you can go to the docs and re reread the docs but again since router link seemed to has messed up the positioning of that plus sign instead i am just going to go here and say add a click listener and say navigate to and i'm going to say name is songs create instead of using router link and again if you have a better way of doing that like if there's an already a directive where i can just say like navigate to let me know maybe i should actually read the docs after this make sure it's called songs create and inside methods we need to create that navigate to method i'll say route say this dot router dot push route cool so easily navigating through all of our pages that's all working we can go to this page and add our new random song and it gets added to our songs list and again this obviously looks pretty horrendous right now so we can kind of style this in a second uh but i think one thing would be nice to do is i want to make sure that all these are required i don't want people uploading bad data to my app so what we can do is if we were to go back to that create song view or component an interesting thing you can add to all these is required so if i were to add required the title we see here that a star appears next to it and then if i fail to actually add something in it doesn't turn red yet because i haven't defined any rules so first i'm going to add required to it and then second we can add a list of rules so if we pretend like we have a rules object with some required stuff attached to it we can go down to the data so i'll say data here and i'm going to add some rules which is going to be an object and basically the rule is we're going to say make the required thing make sure the value is actually defined so basically this is going to pass that rules dot required and it's going to make sure that the value is defined for that in fact i don't know if i need that rules i can just say required so up here i can just say rules is required go back here and see how it turns red and then it prints out required if you fail to fill it in pretty awesome so now i could just go ahead and do that for everything cool now they're all required now the only thing is we need to also check that everything has been filled in before we try to create and there might be a better way to do this but what i'm going to do here is simply just say are all fields filled in and i'm going to just loop over all the keys of my song and verify that every single value of those keys so i can say key so make sure that every single value using that key is defined because that's kind of what we we care about and then if for whatever reason you did not fill that in so if that's false we can say this area is please fill in all the required fields and then return and of course we don't have an error saying so i say error null and then up here we need to actually display it above the button i'll just say span class is equal to error and only display it if error is defined and what we could do here is say is that error is equal to null to kind of set it back to a default state every time you click the button this needs to be this dot song i think yeah alright so please fill in all the required fields let's actually make that a div and not a span and it's also super ugly as to why it's like that so i think beautify has a builtin error class so maybe instead i'm just gonna add a red alert or maybe danger alert so if i go back to view over here and just do danger alert color red and then go back here cool it's red now and we should not be able to fill in anything let me just refresh the page to make sure that goes away so we should not be able to fill in anything or create the song until we filled out every single field and i did and it added the song okay so for the last thing i'm going to do in this part of the video is just try to style these songs so if i were to just start with a blank slate and go to the songs panel it would be nice that for um to have these actually have like a nice style to them so with that being said let's go ahead and try to create a simplified layout here so if i were to go here and basically for a super simple layout we can just do v layouts v layout and then inside the speed layout is going to be so we're going to have a row here and inside the row we want to kind of split it up actually i think what we could do panel has songs v layout yeah let's just go with this and see what happens but basically we want a left and a right side so i'm going to do a v flex of six and then another one of six so we have a left and a right side and on the left side let's just go ahead and do a let's see song title so you do song.title here and i could do the other ones song artist and song genre so get rid of these and then on the right side we want to include an image i'll say class album image and we want to point that so in in a view if you do the colon i think it's the same as doing b bind so basically we want to bind that source attribute to whatever the song album image url is so hopefully if we save this let's see what happens all right so one thing we'll notice is that this image is expanded to its complete size so which is why we added this class album image here so if we go down to the scoped we can say album image is equal to width of 100 so it looks a little bit better there even so i think that's a little bit too big then we also want to center it so i'll do that all right so that looks a little bit better and for the title the artist in the genre we can say song title song artist song genre look at this font size of 18 pixels i'll give this one a font size of 24 pixels and then i'll give this one a font size of 30 pixels all right so that looks a little bit better now and then let's go ahead and just wrap all this into a song so i'll say give it a padding of 20 let's say height of 330 pixels overflow hidden because we don't want anything overflowing and then up here where we're doing that for loop i'll just say class of song cool so all the songs other than these that are missing the images are being displayed in such a way so it looks a little bit better still not that great but hey it it's a start and then what we want to probably add is a way to if i were to say like a view button here so i can easily go in and view the tabs of that song so we should know how to do that if we want to add it to the left column here we of course have to go here and say the button and again let's just go ahead and find a v button um let's see how about the create song button that's the great thing as after your app starts becoming larger you have a lot more copying and pasting resources so here i can say navigate to i'll say name song prams song id of song dot id and it's always nice to make sure you format your objects so they're very easy to change and read all right so now we have a view button which if we click it it calls navigate to which will go down to the songs or it will go to the song view and then it will pass a parameter called song id which will grab from the song so again right now we don't really have a song route so let's go ahead and add one and then we can implement that later in the next part so if i were to do song id here so path is slash song slash id what this does is it allows us to put in variables inside the url parameter or your url query or whatever you want to call it and so change that to shh song and i'll change this to just view song which means we have to come up here and say view song and over here components we have to say view song view and i'll go ahead and just create it from a blank all right so if we go back we now have a view button and if we were to click it it takes us to song one and the one is coming from the song id so remember in the database every time we create a new record it's going to assign it a unique id an auto incrementing unique id so then again if you think about the future we could just have this page load in that song information and display it so i think that's a good stopping point for this part 4 of the full stack tutorial again be sure to subscribe to my twitter it's in the description link if you want to get updates for when i paste the latest part 5 video and again feel free to leave me comments or give me suggestions or feedback as to how to make these tutorials better or if you have maybe a different way that you think i should be doing something in view because again this is more of a learning um effort on my approach it's not me trying to say i'm an expert i'm trying to teach you it's more of hey let's try to reinforce what i have learned from view and make sure i can teach it well all right so again thanks for watching and stay tuned for the next part that should be coming soon
