With timestamps:

00:00 - hi and welcome to my javascript tutorial
00:02 - in which i will teach you how to code in
00:04 - javascript by building your very own
00:06 - basic game of tetris i always find that
00:08 - learning is easy by doing so if you're
00:10 - the same this tutorial is definitely for
00:12 - you and hey you'll have a pretty neat
00:14 - javascript game by the end of it
00:17 - this tutorial is for super beginners and
00:18 - we will be going through the
00:19 - fundamentals of javascript as well as
00:21 - some inbuilt functions that are going to
00:23 - help us build our tetris game
00:25 - if you have never touched code before
00:27 - this is a pretty good place to start
00:29 - we will be going through some css and
00:31 - html as well but just the basics as you
00:33 - know this is a javascript tutorial
00:36 - if you do have some prior knowledge of
00:38 - html and css please do not skip the
00:40 - first few lessons we need them in order
00:42 - to set up our game feel free to watch
00:44 - them on double speed if you prefer
00:47 - tetris is a simple grid-based game in
00:49 - which you as a user have to navigate
00:51 - five shapes or tetraminos down to the
00:53 - bottom of your bridge the aim of the
00:55 - game is to get the highest score by
00:57 - filling up rows on your grid in order
01:00 - for them to disappear and for you to
01:01 - gain points you as the user can rotate
01:04 - your shapes and you also have insider
01:06 - knowledge by knowing which shape is
01:07 - coming up next thanks to a grid to the
01:09 - side of your grid
01:11 - in this game we are not going to have
01:13 - levels we are simply going to do a basic
01:15 - version of the game
01:17 - basic functionality and basic styling
01:19 - this is so you can take it and make it
01:21 - fully your own
01:22 - i would love to see all your finished
01:24 - projects how you have made them your own
01:26 - in terms of styling or leveling up so
01:29 - please do share them with me please do
01:32 - get in touch if you get stuck at any
01:34 - point in this tutorial i am always more
01:36 - than happy to help again please do use
01:38 - my social links below
01:40 - so yeah let's get going
01:48 - in this walkthrough i'm going to show
01:50 - you my preferred code editor as well as
01:52 - the bonus of how to set it up so that it
01:55 - works for you like a sort of spell
01:57 - checker if you will it will check your
01:58 - code for mistakes and prompt you to
02:01 - change things in order for it to work i
02:03 - am also going to show you what a command
02:05 - tool is and how to use it to access
02:07 - files and folders on your computer as
02:09 - well as speak to them and download
02:11 - things from it
02:12 - okay so let's get going
02:15 - first off start by downloading a code
02:17 - editor i'm going to use atom
02:20 - if you go to atom.io and download the
02:22 - program that will be the tool you use to
02:25 - write code in your project
02:28 - now copy it into your applications
02:30 - folder and add it to your doc
02:34 - once that has been downloaded you will
02:36 - use the command line system to create a
02:39 - folder to store your project
02:41 - if you have a mac simply search for
02:43 - terminal in your launchpad
02:45 - if you're on a pc you need to search for
02:47 - your command prompt tool
02:49 - now open up your terminal and using ls
02:52 - you can list all the directories
02:55 - now using cd to enter a directory we
02:58 - navigate to the desktop
03:01 - it is on the desktop that we're going to
03:03 - create our project called basic tetris
03:06 - so using a command called mukdart we're
03:08 - going to make a directory called basic
03:11 - tetris
03:12 - okay great we now have a folder to store
03:15 - all our code files in it to go into this
03:19 - folder again we use cd
03:21 - let's use the command cd to go into this
03:24 - project
03:25 - if you ever want to get out of this
03:27 - project we use cd with two dots like
03:30 - this
03:31 - but we don't so let's go back into it
03:33 - once in this folder we need to create
03:35 - files to go in it we do so using a
03:38 - command called touch
03:40 - touch will create files we need to
03:42 - create an html file css file for our
03:45 - styling and a javascript file to hold
03:47 - our javascript i'm going to choose to
03:49 - call them index.html
03:51 - style css
03:53 - and app.js
03:54 - okay perfect now using atom dot
03:59 - as we are using the atom code editor we
04:01 - will prompt the project to open in our
04:03 - atom code editor
04:06 - and there we go we are now set up to
04:08 - start writing some code
04:11 - now i'm going to show you some useful
04:13 - settings on atom that will make your
04:14 - life a whole lot simpler
04:17 - atom allows us to add packages
04:20 - there are literally loads and loads of
04:21 - packages out there that you can pick and
04:23 - choose so i'm simply going to go through
04:25 - ones that i find useful for my projects
04:28 - open atom and click on the atom menu
04:31 - then install shell commands
04:34 - now click on the drop down and
04:36 - preferences
04:38 - in preferences
04:40 - in the editor panel make the following
04:43 - changes
04:44 - show indent guide check
04:47 - show invisibles check
04:49 - and tab type soft
04:53 - now let's go over to our terminal and
04:55 - type the following code
04:59 - what we are essentially doing here is
05:01 - downloading packages for atom to use via
05:04 - the command line tool
05:41 - once these have all downloaded let's
05:43 - quit atom
05:46 - now let's reopen it to see the packages
05:49 - that we installed and go through them
05:51 - all a little bit more one by one
05:54 - in the navigation find packages and
05:57 - click on the drop down
06:00 - you will see here all the packages we
06:02 - installed using the command line and apm
06:04 - command
06:10 - we have auto indent autoident will auto
06:14 - indent your code correctly in your files
06:16 - this is good for code readability and
06:18 - considered best practice
06:35 - atom tanjs is a package that adds
06:38 - support for es5 es6 es7 es8 node.js and
06:44 - more
06:45 - this means that it will let us use
06:46 - features of all of them in your code
06:48 - editor for example an arrow function
06:51 - which you will definitely come across is
06:53 - something that is a feature of
06:54 - javascript es6 and above
06:57 - we are also going to have something that
06:58 - will spell check our code
07:00 - and
07:01 - check our javascript code in a way that
07:04 - will notify us if something isn't
07:05 - working correctly for this we will use
07:08 - linte.js standard
07:41 - okay great you are now all set up to
07:43 - start writing javascript projects
07:46 - let's carry on
07:51 - hi and welcome back in this project
07:53 - we're going to be using an html file and
07:56 - a javascript file in order to make our
07:58 - project html is a hyper text markup
08:01 - language used as the basis of a web page
08:04 - html consists of tags surrounded in
08:06 - angular brackets like this
08:09 - the html tag can be used to define
08:11 - headings titles images
08:14 - links buttons there's a whole load of
08:17 - tags available to your disposal in this
08:19 - lesson we're going to be focusing on the
08:21 - html file and how to link it to our
08:24 - other files such as our javascript file
08:26 - and css style sheet
08:28 - the first thing we're going to do is
08:30 - make sure to check our files
08:33 - are named accordingly the most important
08:36 - thing is the ending or file extension we
08:40 - need to make sure that we use js to let
08:42 - our code editor know that we are going
08:44 - to be writing javascript code in this
08:46 - file and to treat it like a javascript
08:48 - file we also need to do this for the
08:50 - stylesheet or css file css stands for
08:54 - cascading stylesheet we will cover that
08:57 - in the next lesson
08:58 - now we need to link the javascript file
09:01 - to the html file we will do so by
09:04 - putting a script tag in between the head
09:06 - tag then using a dom event listener in
09:08 - our javascript to make sure this tag is
09:10 - read after all the code in this html
09:13 - file has been read an alternative way to
09:16 - do this is by putting the script tag at
09:18 - the end of the document in the footer
09:20 - but this is the way we're doing it for
09:21 - the sake of the tutorial
09:23 - it is important to note that in this
09:25 - script tag the source or src as you can
09:29 - see here the text in between the
09:32 - quotation marks needs to be the relative
09:35 - path
09:36 - of where the javascript file is as the
09:38 - file is in the root of our folder we
09:40 - simply write app.js
09:43 - if your app.js file happens to be in a
09:45 - folder you will need to change this
09:46 - relative path in the script tag
09:49 - so to recap if the file is in the same
09:51 - location as your html file we write this
09:55 - and if it's in a subfolder to your
09:58 - index.html file we write this replacing
10:01 - the green folder with whatever you have
10:04 - named your folder please do remember to
10:06 - keep your index html file at the root of
10:08 - your folder if you do not our browser
10:10 - will not be able to read this project
10:12 - well not without loads of configuration
10:14 - anyway i am actually going to flip over
10:16 - to our javascript file and add the dom
10:19 - event listener now to
10:21 - we must make sure all our javascript in
10:23 - the future is written in between these
10:25 - two parentheses we need to make sure
10:27 - this is done so that it's picked up by
10:29 - the script tag we wrote earlier in our
10:31 - html file
10:33 - okay so let's go ahead and add that
10:35 - event listener to our javascript file
10:37 - like so
10:38 - again the dom content loaded event
10:42 - fires when the initial html document has
10:45 - been completely loaded and passed this
10:47 - is without waiting for the style sheets
10:49 - images and subframes to finish loading
10:51 - the target of our event is the document
10:55 - referring to the html document
11:00 - okay now back to our html file so now
11:03 - we're going to link our style sheet in a
11:05 - very similar way but using a link tag
11:07 - instead
11:09 - add the following tag in between your
11:12 - head tag
11:15 - again make sure the relative path of the
11:18 - file is correct
11:20 - we do not need to add anything into our
11:22 - css file for this to be picked up
11:26 - now that we have licked our two other
11:28 - files in our html file let's start by
11:31 - adding some code to our body
11:33 - now we first need to plan exactly what
11:35 - we want our tetris game to look like in
11:37 - terms of shape
11:38 - as we're going to be making a grid-based
11:40 - game i would suggest drawing this out
11:42 - first or using something like google
11:44 - sheets like me to get an idea of what we
11:46 - have to get on with and tackle i'm gonna
11:48 - flip over to google sheets now i have
11:51 - actually pre-drawn this to give you an
11:53 - idea of what to be aiming for you can
11:56 - make your own grid as big or as little
11:58 - as you want it's up to you
12:00 - um so you can see here i want to make my
12:02 - grid 20 squares tall and 10 squares in
12:05 - height so how would we make these 200
12:08 - squares we need to make them in our html
12:11 - file and then add styling to them with
12:13 - our stylesheet or css file
12:16 - so let's do it let's code out 200 divs
12:18 - in our html file
12:20 - there are other ways of doing this from
12:23 - the javascript file that involve
12:25 - creating an element 200 times using a
12:28 - for loop but as we are just starting out
12:30 - i think it's important to focus on a
12:32 - more visual way of learning so we can
12:34 - see what's happening
12:36 - now let's put these 200 divs and a div
12:38 - of its own that we are going to give a
12:40 - class name of grid to we are doing this
12:43 - so we can contain the 200 divs in a div
12:46 - of its own that we are going to start in
12:47 - our css later
12:59 - now we are gonna want to display the
13:01 - score
13:02 - let's do that in an h3 tag like this
13:05 - with a span inside of it like this
13:08 - h1 h2 h3 tags are all header tags h1
13:13 - being your main one and going down in
13:16 - size all the way to you hit h8
13:18 - okay moving on
13:20 - let's give this span an id of score so
13:24 - we know exactly which span tag to
13:25 - display the future score in just in case
13:28 - we used another span tag in our project
13:30 - as opposed to class names ids are unique
13:33 - and can only be used once i am also
13:36 - going to hard code a zero here for now
13:40 - finally i'm gonna add a button using the
13:42 - button tag
13:43 - as i want this button to start the game
13:45 - i'm gonna give a very clear id of start
13:48 - button
13:54 - okay let's save these files
13:56 - we are going to right click just here so
13:59 - we can open this file in our browser
14:04 - amazing
14:05 - though you won't see the 200 divs as
14:07 - they have no styling applied yet you can
14:10 - see them if you inspect the page
14:12 - if you do not know how to inspect the
14:14 - page you can simply do so by pressing
14:16 - down the control button on your keyboard
14:19 - and left clicking the browser like this
14:21 - check out this nifty animation i did
14:23 - here
14:26 - it is also where you view the console
14:28 - log we will be using the console log
14:30 - later
14:31 - it's a tool that allows us to see what's
14:33 - going on under the hood when writing
14:34 - javascript and is super useful
14:37 - okay great thanks for this lesson let's
14:39 - move on after just a few questions
14:52 - in this lesson we're going to be
14:53 - covering css or cascading style sheets
14:57 - css is a simple mechanism that allows
14:59 - you to add styles so fonts add colors
15:03 - to your web documents becoming a pro at
15:05 - this takes a lot of practice we are
15:08 - simply going to be doing the basics in
15:10 - order for us to carry on learning
15:12 - javascript as this is a javascript
15:14 - tutorial this will include styling to
15:16 - make our grid look like a grid
15:19 - add colors to our tetraminos and
15:22 - touching a little bit on flexbox once
15:24 - you have finished this tutorial please
15:26 - do go back and add as much styling as
15:28 - you want feel free to share it with me i
15:30 - would love to see your finished games
15:32 - okay let's start off by giving some
15:34 - styling to our grid
15:35 - the first thing we're going to do is
15:37 - navigate to our style css file
15:40 - now let's pick out the div with a class
15:43 - name of grid
15:45 - we tell our style sheet we are looking
15:47 - for a class by using this dot before the
15:49 - class name
15:51 - so as a recap we are picking up the div
15:54 - with a class name of grid that has 200
15:57 - divs inside of it
15:59 - let's say we want our squares to be 20
16:02 - by 20 pixels
16:04 - at a 10 by 20 grid that would mean we
16:06 - need to make the width of our grid 200
16:08 - pixels and the height 400 pixels
16:12 - i'm going to make it yellow so we can
16:13 - see it in our browser
16:16 - now we are also going to style the divs
16:18 - in the grid
16:20 - we do so like this
16:22 - we put the div element
16:24 - after the element with a class name of
16:26 - grid
16:28 - by doing this we are saying that we want
16:30 - to start only the divs in that element
16:33 - like this
16:34 - so essentially all other divs we use in
16:36 - the future in our project will be
16:38 - unaffected by this styling
16:41 - okay so inside the parenthesis we're
16:43 - going to assign the height and the width
16:46 - let's also make them red just so we can
16:48 - see them in our browser
16:50 - okay let's save that file and refresh
16:52 - our browser
16:54 - you will see the red squares show up as
16:56 - a stack over each other
16:59 - this is the case by default
17:01 - divs do this
17:03 - they stack of each other unlike h3 tags
17:05 - which appear in line
17:07 - this is where flexbox comes in
17:09 - we need to use flexbox to make sure the
17:12 - red squares appear stacked in a line and
17:14 - then stack over each other as soon as
17:16 - they don't fit in the grid div with
17:18 - parameter
17:20 - let's add display flex
17:25 - and save
17:27 - and refresh the browser
17:29 - and there we have it we now have a grid
17:32 - we can work with and start adding some
17:33 - javascript code and game functionality
17:35 - too let's move on just after a few
17:38 - questions
17:50 - in this video i want to take a break
17:52 - just to explain what variables are and
17:54 - how we use them in javascript so in
17:56 - javascript you can store values in
17:58 - something called variables they are
18:00 - legal identifiers quite simply it is
18:03 - this so the variable x here equals one
18:07 - it is important to note that when you
18:09 - declare a variable its name must be
18:12 - unique
18:13 - you can assign numeric value to your
18:15 - variable like the number 1
18:17 - or a string value such as 1 in quick
18:20 - marks
18:21 - an array such as 1 and 2 in an array
18:25 - a boolean such as true or false
18:28 - or you can just leave it undefined for
18:31 - later use like this now by definition
18:34 - variables mean anything that can vary so
18:36 - let's see this in action let's get x and
18:39 - assign it to the value 23 note we do not
18:42 - use var again as we have defined x above
18:45 - let's go ahead and console log that
18:48 - and you will see x has now changed value
18:52 - now let's talk about scope when defining
18:54 - variables it is important to know that
18:56 - they have scope
18:57 - variables have two types of scope global
19:00 - scope or function scope meaning they can
19:03 - only be accessed inside our function
19:05 - let's have a look at this in action
19:09 - here is a function i have written to
19:11 - alert me with a name
19:28 - let's put the var name here
19:31 - outside the function
19:36 - okay that works
19:38 - this is because it's a globally scoped
19:41 - variable now i'm going to move it here
19:44 - inside the function
19:57 - this also worked as the variable is
19:59 - declared inside the function
20:02 - however what happens if i now want to
20:04 - show the alert outside of this function
20:17 - it will not work as the variable is not
20:20 - being picked up
20:21 - as it's inside this function's scope
20:25 - essentially it's out of our reach now
20:28 - okay got it now let's talk a little bit
20:30 - more about const and let and how they
20:34 - differ from bar so when es6 came in it
20:37 - introduced two new ways to create
20:39 - variables let and const so what's the
20:42 - difference let's talk a little bit about
20:44 - the difference between let and var fast
20:46 - let allows you to declare variables that
20:49 - are limited to a scope of a block
20:51 - statement unlike var what does this mean
20:54 - well let's have a look at an example
20:57 - okay so i'm going to declare variable x
21:00 - here as one
21:03 - now i'm gonna write a function here
21:04 - called find x
21:06 - inside i'm gonna declare variable x
21:09 - again
21:10 - as two
21:12 - now if i want an alert telling me what 2
21:15 - is inside this function i will get 2.
21:18 - however
21:19 - what will i get if i want to move the
21:22 - alert outside of this function
21:26 - i will get 2 as variable is global and
21:29 - we declared it after the first
21:30 - declaration
21:34 - now let's do the same but using let
21:37 - so all i'm doing is writing the same
21:39 - thing but replacing bar with let
21:56 - you will now see that we are getting a
21:57 - one as the other let inside the find x
22:00 - function is out of our scope
22:02 - now finally const
22:05 - const works in the same way let does in
22:08 - that you cannot access it if it is
22:10 - inside a function however it is also
22:13 - constant as const would allude to once
22:16 - you have defined it you cannot change it
22:18 - later on this is pretty useful when
22:20 - working with big projects and declaring
22:22 - what you do not want to be changed
22:25 - let's have a look at this in our code
22:27 - editor
22:41 - okay so there we have it let's recap
22:44 - bar
22:44 - a function scoped or globally scoped
22:48 - variable
22:50 - let
22:50 - a block scoped variable
22:54 - and const
22:56 - a block scoped variable that cannot be
22:58 - reassigned
23:00 - okay now we have a grasp on variables
23:02 - let's go back to our game of tetris
23:09 - in this lesson we're going to start
23:11 - adding functionality to our project by
23:13 - adding some javascript code we will
23:15 - especially be focusing on javascript
23:17 - arrays and how we will be using them in
23:19 - order to make our game an array is a
23:22 - special variable which can hold more
23:24 - than one value at one time if you have a
23:28 - list of items so a list of tetramino
23:30 - names for example storing the tetraminos
23:33 - as single constants would look like this
23:35 - however what if you want to loop through
23:36 - these tetraminos and find a specific one
23:39 - and what if you had not 5 but 200 of
23:42 - them the solution is an array an array
23:45 - can hold many values under a single name
23:48 - and you can access the value by
23:49 - referring to an index number we will be
23:52 - using the index number a lot in this
23:54 - course javascript arrays are zero
23:56 - indexed meaning that the first element
23:59 - of the array is at index 0 and the last
24:02 - element is at the index equal to the
24:04 - value of the array's length property
24:06 - minus one this is important for our game
24:09 - but also for javascript array knowledge
24:11 - in general the first thing we're going
24:13 - to do is tell our javascript the width
24:16 - of our grid in squares using const so
24:19 - let's flip over to our javascript file
24:22 - now
24:22 - as the value will not change we are
24:26 - going to use a const so as a reminder
24:29 - the const keyword denotes a non-mutable
24:32 - view of mutable data
24:34 - next
24:35 - we are going to use something called a
24:37 - query selector to look through our html
24:39 - document and find the element with a
24:42 - class name of grid
24:44 - document query selector is an inbuilt
24:46 - javascript method you will see here we
24:49 - are using dot again as we are looking
24:51 - for a class name once we find it
24:55 - sign it to the constant we have decided
24:57 - to call grid
24:59 - now our javascript knows that every time
25:01 - we type grid and do something to grid we
25:04 - want it to affect the element with a
25:06 - class name of grid in our html file
25:09 - now we also want our javascript to talk
25:12 - to all the squares in our grid using the
25:14 - query selector again but this time using
25:17 - document query selector all as we want
25:20 - to collect all the divs inside the
25:22 - element with the class name of grid
25:25 - we do this
25:26 - now what we are going to do involves an
25:29 - inbuilt javascript method called array
25:31 - from we are going to use it to in layman
25:34 - terms collect all the divs in our grid
25:36 - or 200 of them and turn them into an
25:39 - array we can work with now each div will
25:43 - have a specific index number
25:46 - let's pass these collected divs through
25:48 - array from to make them an array and
25:50 - assign it to let squares
25:53 - let's get our console up here so we can
25:56 - see what our console log tells us
26:00 - now hit refresh on your browser
26:04 - okay great you will now see that these
26:07 - squares is an array of 200 divs
26:10 - with index numbers from 0 to 199
26:13 - the reason it says 0 to 199 instead of 1
26:16 - to 200 is that the index count always
26:19 - starts at 0. what does this mean for us
26:23 - and our game well we just need to learn
26:25 - how to count a little differently let's
26:26 - have a look at our grid and the squares
26:29 - inside numbered by their indexes this is
26:32 - something i made in google sheets
26:34 - earlier to make it easier for us to
26:35 - understand you will see that if we want
26:38 - to be in the fifth square
26:40 - so this would be the fifth square here
26:43 - we would need to tell our javascript we
26:45 - want to be in the index four of our
26:47 - square's array
26:49 - why is this an array again because we
26:51 - collected all the divs and passed them
26:52 - through array from
26:54 - okay let's move on the last thing i'm
26:57 - going to do for this section is get a
26:59 - few more things from our html document
27:07 - we are using a hash here to indicate we
27:10 - are looking for an id so
27:12 - if we look at our html page
27:14 - as a reminder we gave the span tag an
27:18 - idea of score and this button an id of
27:21 - start button let's go ahead and pick
27:24 - them out again with our query selector
27:26 - there is also a get element by id feel
27:29 - free to use that as well i'm going to
27:30 - use this query selector okay great
27:33 - that's it for this lesson let's recap
27:35 - with just a few questions
27:46 - in this video we're going to take a
27:48 - quick break to go over exactly what a
27:50 - function is and why we use them
27:52 - functions are one of the main building
27:54 - blocks of javascript and in fact most
27:56 - languages in javascript a function
27:59 - allows you to write a block of code
28:01 - define it with a name
28:03 - and execute it as many times as you like
28:06 - it's all about recycling code with
28:07 - functions in this video i will be
28:10 - showing you how to write a super basic
28:12 - function that we will later be adapting
28:14 - to use in our own game of tetris okay so
28:16 - let's flip over to our code editor so
28:18 - that i can show you a super basic
28:19 - example of a function first so the
28:22 - simplest example i'm going to show you
28:24 - is a function that sets off an alert the
28:27 - first thing we're going to do is write
28:29 - function
28:30 - like this
28:32 - followed by a word i've chosen to call
28:34 - my function this word should really
28:36 - convey what is happening in my function
28:39 - we do this to make our code more
28:40 - readable for colleagues or simply if
28:42 - we're forgetful i'm going to choose to
28:44 - call my function show alert
28:47 - i am using camelcase for this camelcase
28:50 - is the practice of writing more than one
28:52 - word joined as one but visually
28:54 - separated by making each word after the
28:56 - first start with a capital letter it has
29:00 - no spaces or punctuation i consider this
29:02 - the best practice for writing functions
29:04 - okay so after naming our function we
29:07 - write these two brackets these two
29:09 - brackets are for passing down parameters
29:11 - into our function as we don't have any
29:13 - just yet i will leave this blank
29:16 - now we have to put our block of code
29:18 - that defines a function in parenthesis
29:21 - i'm going to make my function show an
29:22 - alert like this
29:24 - you will see i'm writing the inbuilt
29:26 - method of alert and passing through a
29:27 - string
29:29 - a string is defined as a word in these
29:31 - quick marks okay great now let's test
29:34 - out what we have written we can invoke a
29:36 - function
29:37 - like this
29:39 - amazing so that's the basics now let's
29:42 - pass a parameter or two into our
29:44 - function so the thing about parameters
29:46 - is that if you choose to pass one it
29:48 - needs to be one and this needs to be
29:50 - reflected in the code we write if you
29:52 - try pass any more than one the rest of
29:54 - these parameters will be ignored
29:56 - let's have a look at it now
29:57 - so say i want to pass down a first name
30:00 - into my function
30:16 - and somewhere else in my code i have
30:18 - recycled this function and written this
30:23 - okay let's uncomment that
30:37 - but as soon as i pass down my last name
30:39 - that part will be ignored
30:52 - it is the same for if i ask for the last
30:54 - name in the function but i do not pass
30:56 - it through
30:57 - i will get undefined
31:12 - we can also use argument objects and
31:15 - functions
31:16 - if we declare them outside of the
31:18 - function we do not need to pass them
31:20 - through to use them
31:22 - for example i'm going to write an array
31:24 - called name
31:35 - now using my function i'm going to
31:37 - access the first item in my array so
31:39 - index is zero
31:41 - like this
31:51 - okay great we are now ready to carry on
31:53 - with our tetris walkthrough
32:01 - in this video we're going to talk a
32:03 - little bit about arrow functions and how
32:05 - we're going to use them in order to draw
32:07 - our tetraminos onto our grid in this
32:09 - lesson we're going to be doing more
32:11 - array work and be introducing something
32:13 - called the narrow function as well as an
32:15 - inbuilt javascript method called for
32:16 - each
32:17 - arrow functions were introduced in es6
32:19 - and allow us to write shorter function
32:22 - syntax here is the original way we would
32:24 - write what was and the evolution to what
32:27 - we now know as the arrow function if you
32:30 - have parameters you can pass them
32:31 - through the brackets like this
32:33 - this is what we're going to be doing and
32:35 - involving the for each method the for
32:38 - each method calls a provided callback
32:40 - function
32:41 - once for each element in an array in
32:43 - ascending order
32:45 - the callback is invoked with three
32:48 - arguments
32:49 - the value of the element the index of
32:52 - the element and the array object being
32:54 - traversed or in layman terms we're going
32:57 - to get an array with a bunch of values
32:59 - and apply logic to each one
33:01 - here we can see an example of for each
33:03 - working on an array i've called item
33:06 - array using this code i'm also going to
33:08 - pick out each item of that array so i
33:11 - can apply logic to it you can see here
33:13 - i've chosen to call it item
33:15 - i can call it anything i want really
33:17 - javascript will know what i mean
33:19 - it will know it's an item in my array
33:21 - now using an arrow function i do this
33:24 - and add two to each item in my array so
33:27 - that's the syntax let's see an action
33:30 - the simplest example i can show you of
33:32 - this happening is when we choose to add
33:34 - something to each item in our array
33:37 - let's make an array of names so an array
33:40 - with strings as indicated by these two
33:42 - quick marks here
33:43 - and separated by covers and put them in
33:46 - square brackets
33:49 - now it's super important to remember
33:50 - what is inbuilt and what isn't here
33:53 - names
33:54 - names are array that we made above
33:57 - for each is the inbuilt method that
33:59 - comes with some magic that will make our
34:01 - javascript do things without us writing
34:03 - any logic for it name here is something
34:05 - that we have chosen
34:07 - to call the items in our array i could
34:09 - call this whatever i want chair dog my
34:11 - javascript will know i mean an item in
34:13 - my name's array
34:15 - this arrow is the arrow function we
34:17 - referred to in our last video
34:19 - so what we are saying here is that for
34:21 - each item or name in our names array we
34:25 - want to print out individually that name
34:28 - and add the string is the best to it
34:36 - okay let's check that out
34:41 - okay and that has worked great
34:43 - now this is a super simple example of
34:45 - how to use four each with an array there
34:48 - are literally so many different ways to
34:49 - use this inbuilt method i always think
34:51 - it's better to learn with a working
34:53 - example so let's get going and use the
34:55 - for each method and arrow function to
34:58 - draw our five tetramino shapes onto the
35:00 - grid
35:01 - let's do this in the next lesson
35:09 - okay and welcome back this is a
35:10 - continuation from the last lesson where
35:13 - we learned about four each and how we're
35:15 - going to use it in order to draw the
35:16 - tetraminos onto our grid game
35:20 - the first thing we're going to do is get
35:22 - out our google sheets again and draw out
35:24 - every single rotation of each shape
35:27 - note the o touch amino will stay the
35:29 - same during each rotation and the
35:31 - z-tetramino and elto-trimino will only
35:34 - have two versions of itself
35:36 - once we are happy with each of the
35:39 - shapes for rotations it's time to draw
35:40 - them using our width constant
35:43 - remember we set that as 10 in our
35:44 - javascript file let's get going and
35:46 - start with our el tetramino we will set
35:49 - it as const as the shape and its full
35:51 - rotations will not change
35:54 - we will make the l-tetramino an array
35:56 - with four arrays inside it
35:59 - each of the four arrays is one of its
36:01 - rotations
36:03 - if you see here what i'm doing is using
36:06 - my drawing to draw the shape onto the
36:08 - grid as if i was only allowed to use the
36:11 - grid indexes
36:14 - so
36:14 - drawing in the index for number one on
36:16 - our grid shape and index with the number
36:19 - 10 plus one on our grid shape 10 being
36:22 - the
36:22 - width
36:23 - and index number 21
36:26 - and the index number two
36:28 - it will give us this shape right here
36:32 - okay now let's draw the other three
36:34 - rotations
36:35 - we can do them all starting from like
36:37 - zero no need to draw them in their
36:39 - locations or my drawing
36:40 - let's do that now
37:07 - once we have done that we need to do the
37:09 - other four shapes in the same way
37:11 - now because i have done this before i'm
37:14 - simply going to copy this into my
37:15 - project from my github account
37:18 - you are welcome to go and grab the
37:20 - tetramina arrays as well but i would
37:22 - stress that i do advise against it and
37:24 - only suggest it if you are stuck and
37:27 - getting some strange shapes or error
37:28 - messages
37:29 - by trying to make all the shapes
37:31 - yourself you will get a better
37:32 - understanding of what we are doing here
37:34 - and what we are trying to achieve it
37:37 - would also defeat the purpose of the
37:38 - tutorial if you're trying to understand
37:40 - javascript a little bit better i mean
37:42 - this is the perfect erase exercise
37:47 - okay once we have our four shapes let's
37:49 - put them in an array of their own
37:58 - let's put this as a const and call it
38:00 - the tetraminos
38:07 - okay great we now have our tetraminos
38:09 - but we can't see them
38:11 - that's because we need to add some
38:12 - styling to them to see them first
38:15 - let's decide that we're going to make
38:16 - them all one color for now just to make
38:18 - it easier we can change this later so
38:21 - let's flip over to our style sheet and
38:22 - add the following
38:35 - okay now let's decide where we want to
38:37 - start drawing our tetraminos on the
38:40 - squares grid
38:42 - let's say the first square of our chosen
38:43 - tetramino's first rotation array is
38:45 - going to start at the square with index
38:47 - four
38:48 - so let current position equal four
38:51 - now let's pick a touch amino and its
38:53 - first rotation
38:55 - so let's go to our the tetramino's array
38:57 - of arrays
38:58 - by putting a zero in square brackets
39:01 - like this we are saying we want to
39:02 - access the first item on our array
39:06 - let's look at this slowly
39:10 - okay so first let's console log the
39:12 - tetraminos our array of arrays
39:15 - you can see that here we have an array
39:18 - of five things
39:19 - or as indexed zero to four
39:22 - these are our five tetramino shapes
39:26 - if you click on the first one so index
39:28 - zero you will see inside it has its own
39:31 - four things in it
39:32 - these are the first tetramino shape
39:34 - rotations we wrote earlier
39:37 - let's click on the first one so again
39:39 - index zero
39:40 - this should look familiar it is the
39:42 - first rotation in our l touch amino
39:46 - let's go ahead and now console log the
39:48 - tetraminos
39:50 - zero and again in brackets zero
39:55 - and amazing it's the same
39:58 - we now assign this variable to current
40:02 - just so we are all clear i have picked
40:03 - the el tetramino's first rotation this
40:06 - is now my current shape
40:10 - okay now let's draw this using for each
40:12 - to see if that's true
40:14 - let's write a function called draw
40:16 - and in that function let's get our
40:18 - current array or what we have assigned
40:20 - as current above
40:29 - now for each item in that array we want
40:31 - to add a class of tetramino which would
40:33 - color that item which is technically a
40:35 - div inside the element with the class
40:37 - name of grid
40:48 - so this is how for each works it applies
40:50 - logic to each item of an array
40:53 - we use the arrow function here as we saw
40:55 - above to add the code inside the
40:57 - parenthesis to each index of the current
41:00 - array
41:02 - just like we pass the zero into the
41:03 - array above to access the first item we
41:06 - are passing on a number to the squares
41:08 - array to color it blue
41:10 - we access this css style sheet by using
41:13 - classless add to add the style of
41:15 - tetraminos to the squares in the
41:17 - tetraminos it is in in this occasion we
41:20 - are passing through a four
41:22 - this is because we set the current
41:23 - position as four plus each index of the
41:26 - currently chosen tetramina array okay
41:29 - so now let's invoke this draw function
41:32 - like this
41:35 - now save your file
41:38 - and quickly go back to your css file to
41:40 - get rid of the red background we gave
41:42 - all our divs at the beginning we no
41:44 - longer need this
41:46 - hit save again
41:50 - and let's refresh our browser
41:54 - and great there we go you can now see a
41:56 - blue tetramino shape it is the ltch
42:00 - amino in its first rotation
42:03 - okay now let's go back to our javascript
42:06 - and select one of the tetraminos
42:08 - randomly
42:14 - for this we're going to be using three
42:15 - more input javascript methods
42:17 - math random which will give us a random
42:19 - number from our array length
42:22 - length which is an inbuilt method that
42:24 - will tell us exactly how long our array
42:26 - is
42:27 - and math floor which will round down to
42:30 - the nearest integer
42:32 - so let's add a variable that we're going
42:34 - to call random
42:37 - to randomly select a centrum you know
42:39 - from our tetrominus array we use an
42:42 - inbuilt javascript method called math
42:43 - random and multiply it by the length of
42:46 - our tetrameter's array
42:48 - length being invo as well
42:50 - we then pass this through another input
42:53 - method called math floor this will round
42:55 - down the number to its nearest full
42:57 - integer
42:58 - okay so let's see if that has worked
43:01 - we should get a new number each time we
43:03 - refresh the page
43:13 - refresh again
43:14 - and great
43:17 - now we have that let's go back to our
43:19 - current variable and replace the first
43:21 - zero with random
43:23 - now what's happening here is that
43:24 - instead of passing through a zero and
43:26 - accessing the first item of our h time
43:29 - we are passing through a number from
43:30 - zero to four randomly
43:32 - this will give back the first second
43:33 - third fourth or fifth tetramino in other
43:36 - tetramino's array once we have one of
43:38 - these five shapes we want to access
43:41 - again but always picking is first
43:42 - rotation
43:44 - let's set this as let current rotation
43:47 - equal zero
43:53 - now if we pass this through we will
43:56 - always start at the first rotation of
43:58 - any random tetramino chosen
44:01 - i'm just going to change this here to
44:03 - more accurately reflect what is
44:05 - happening now just
44:07 - to be as transparent as possible
44:11 - let's uninvoke the draw function here
44:12 - too by getting rid of this code
44:15 - okay now the last thing we want to do is
44:16 - write a function to undraw the randomly
44:18 - chosen tetramino and its current
44:20 - rotation
44:22 - we do the same as we did to draw it so
44:25 - once again we name the function undraw
44:28 - we use a four each so for each item or
44:32 - index in our current shapes array
44:35 - we look at each of their current
44:37 - positions
44:38 - add the index of the shape and pass it
44:40 - through our squares array
44:42 - now the only difference here is apart
44:44 - from adding the class we are removing
44:46 - the class of touch amino from its
44:48 - current location in the grid so it will
44:50 - visibly disappear from our grid
45:02 - okay great we now officially have all
45:04 - our touch aminos i can draw each one on
45:06 - our grid please do if you're not quite
45:09 - sure pause here and just have a go at
45:12 - messing around some of the numbers
45:13 - replace the current position so on just
45:16 - to see exactly what's happening refresh
45:17 - the browser lows to see if you're
45:19 - getting a random tetramino if not go
45:22 - over this lesson again i will provide
45:23 - the code below as well so don't worry if
45:25 - you feel stuck
45:27 - in the next lesson we're going to be
45:29 - focusing on moving the tetraminos around
45:31 - our grid
45:37 - hey and welcome back
45:38 - in this lesson we're going to learn a
45:40 - little bit about timer ids and an
45:42 - inbuilt method called set interval set
45:46 - interval allows us to invoke a function
45:48 - that we pass through it after x amount
45:50 - of time
45:51 - in this example the time is 1000
45:54 - milliseconds or in other words one
45:57 - second
45:58 - we are going to be using set interval
45:59 - for this project because we want our
46:01 - tetrameter shape to auto move down the
46:03 - grid every second just like in the real
46:05 - game
46:06 - as mentioned in the example we do this
46:09 - by passing through a function that we
46:11 - will call move down into the set
46:13 - interval as well as the milliseconds we
46:15 - want to invoke this function at
46:22 - we are going to assign this to timer id
46:25 - this is so we can stop the set interval
46:28 - in the future
46:35 - now let's write the move down function
46:37 - using the functions of undraw and draw
46:39 - we wrote in our previous lessons
46:43 - so we want to undraw the shape from its
46:45 - current position and add a whole width
46:48 - to the current position
46:49 - and draw again in its new position
46:52 - let's check if that has worked
46:58 - okay great we can see that the shape is
47:00 - now also moving down our screen
47:03 - sadly it's not stopping and going
47:05 - through the bottom of our grid
47:07 - this is something that we need to solve
47:09 - we are going to do this simply by
47:10 - flicking back to our html and adding 10
47:13 - more divs to the bottom of our 200 divs
47:15 - this time with a class name of taken
47:19 - as these do not have a style in our
47:21 - style sheet they will not show up
47:22 - visibly we just know that they have that
47:24 - class
47:25 - if i inspect the page you will see them
47:28 - there
47:43 - next we need to write a freeze function
47:46 - in this function we want to write an if
47:48 - statement
47:50 - an if statement looks like this
47:52 - we pass through a condition in brackets
47:54 - before an if
47:56 - whatever the condition between these
47:57 - brackets is has to give us a boolean
47:59 - response so a true or a false
48:03 - if the condition is true we carry out
48:06 - the next steps of whatever is in between
48:08 - these two parentheses
48:10 - so here we have an example
48:13 - if the temperature is above 20 degrees
48:15 - so this statement is true we return it
48:18 - is hot
48:20 - now we can also write an if else
48:22 - statement
48:23 - an if else statement is the same as an
48:25 - if statement however if the condition is
48:28 - now false
48:29 - we can also return a response
48:31 - so in this example here if the
48:33 - temperature is not over 20 degrees we
48:36 - return it is cold
48:38 - now we can also keep adding and adding
48:40 - with this else if and go on forever just
48:43 - like in this example here
48:46 - so here if the temperature is not above
48:49 - 20 degrees so false
48:51 - we bypass this if statement and check
48:53 - the else f
48:55 - if the temperature is deeply equal to
48:58 - indicated by these three equal signs
49:00 - that is deeply equal deeply equal to 18
49:03 - then we return it is warm and of course
49:06 - if it is not then this statement is also
49:08 - false and we return a it is called
49:11 - so let's go back to what we want to
49:12 - happen in our if statement
49:15 - if some
49:17 - sum another inbuilt javascript method
49:19 - similar to how four each works however
49:22 - instead of applying logic to each item
49:24 - in an array like for each
49:26 - with sum we are checking that the logic
49:28 - we write in the brackets is true
49:30 - for some of the items in our array
49:33 - so basically if we ever get one true
49:36 - back we are good to go
49:38 - so
49:40 - if some of the squares that make up the
49:43 - current tetramino
49:45 - if they're indexed plus a whole width
49:48 - so essentially we are checking the next
49:49 - space down from each square
49:52 - contains a square with the class name of
49:54 - taken
49:56 - so if this statement is true
49:58 - for at least one item
50:00 - in our current doctrinal array
50:02 - we turn each of the tetramena squares
50:04 - into a square that contains the class of
50:06 - taken
50:17 - got it
50:18 - we then also immediately select a new
50:20 - tetramino to be our current tetramino
50:23 - this will be familiar
50:24 - let's get a random tetramino number
50:39 - we then passes through our tetramino's
50:41 - array and its first rotation
50:44 - we then set this as our current
50:46 - tetramino
50:48 - then we put it at the current position
50:51 - so four
50:52 - and finally we draw this new randomly
50:54 - selected trimino
50:56 - okay that is it that is our freeze
50:58 - function
50:59 - let's add this freeze function into our
51:01 - move down function so that it gets
51:03 - invoked to check every second
51:06 - oops i missed the capital m of math here
51:09 - that is really important please don't
51:10 - forget to add this here
51:12 - okay great now let's flip over to our
51:14 - browser and see if that has worked
51:28 - amazing
51:29 - let's move on to the next lesson
51:41 - okay so we now have an array of squares
51:44 - great and we have wrapped these squares
51:46 - over each other to appear like a grid
51:48 - amazing however in reality how does our
51:51 - computer know when we are at the very
51:54 - left hand side of our grid what stops
51:56 - our tetramino from going from this
51:58 - position
51:59 - to this position when moving right
52:02 - technically we are in an array so this
52:04 - would be the next logical step
52:07 - we need to write a set of rules to let
52:09 - our javascript know when any of our
52:11 - squares that make up our tetramino are
52:13 - in a certain indexed square
52:17 - we're going to do this using good
52:19 - old-fashioned maths as we can see here
52:22 - our grid has a width of 10 made up of an
52:25 - array of squares with indexes 0 to 199
52:29 - i want to make sure that if the
52:30 - tetramino is in the square with index 10
52:33 - i don't want it to move left anymore
52:36 - i want to stop it as otherwise it will
52:38 - appear in the square with index number
52:39 - 11.
52:41 - so i need to write a rule that will stop
52:43 - our squares if they are in the square
52:45 - with index 10 20 30 and so on
52:49 - let's get started by defining what is a
52:52 - move left function what we're going to
52:54 - be doing is visually moving the
52:56 - tetramino left by drawing it and
52:58 - undrawing it in the squares we start off
53:00 - by removing any trace of the shape in
53:02 - its current location before we start so
53:04 - that we have a clean slate next we
53:06 - define what is the left edge and if the
53:10 - shape is in it this is where our mouth
53:11 - comes in
53:13 - for this we use the inbuilt method
53:15 - called sum again
53:17 - as a recap sum is a method that looks at
53:19 - each item in the array and checks if the
53:21 - statement is true for at least one of
53:24 - the items
53:26 - if it is the whole statement is
53:28 - therefore true
53:29 - so once again let's use current
53:32 - as a reminder current is our current
53:35 - randomly selected detrimental and its
53:37 - current rotation
53:39 - we are checking that sum of the current
53:41 - tetramino's item indexes
53:44 - if divided by the width leave exactly no
53:47 - remainder
53:49 - so again if one of the tetramino squares
53:51 - is in a square
53:53 - let's say that has an index of 10 we
53:55 - also know that 10 divided by the width
53:57 - so 10 gives us exactly zero as a
54:00 - remainder
54:01 - this means our statement is true and the
54:03 - shape is at the left hand side of our
54:06 - grid this is also true for index 20 30
54:09 - 40 and so on let's use this information
54:12 - and only allow our shape to move left or
54:16 - -1 from its current position in the
54:17 - array
54:18 - if the shape is not at the left edge
54:21 - indicated by this exclamation or bang
54:25 - here we also want our tetramina to stop
54:28 - if there is another tetramina already
54:30 - there that has been frozen
54:32 - for this we are going to have to have a
54:34 - taken class
54:36 - we are not going to style this class we
54:38 - just want to assign it to the spaces
54:39 - that have been taken and we can't go
54:42 - into
54:42 - we will use an if statement for this
54:46 - what we want to write is if some of the
54:48 - squares in our central amino shape
54:50 - suddenly go into a space that contains a
54:52 - class of taken while traveling left you
54:55 - want to push it back one space so it
54:57 - appears not to have moved
55:04 - we want to do this for every index in
55:06 - our tetramino shape so use an arrow
55:08 - function to do that like this and pass
55:11 - through the current position and add
55:13 - every index as it gets passed through
55:19 - then we add one to the current position
55:22 - so that moves back to its original space
55:24 - in the array
55:25 - and finally we draw the tetramino
55:35 - okay so that was a lot to take in so
55:37 - before we start writing the move right
55:39 - move down and move up function let's
55:42 - wire this all up to see if it works
55:44 - first before we move on
55:53 - key codes are pretty cool every single
55:55 - key on your keyboard has an assigned
55:58 - code to it that we can access through
55:59 - our javascript
56:01 - we are going to use this to make our
56:03 - tetramino move left
56:05 - if you press key code 37
56:08 - right
56:08 - if you press key code 39 and make some
56:11 - javascript magic happen if you press the
56:13 - button down and so on you can
56:15 - technically make your touch and move
56:17 - left if you press just about any key on
56:19 - your keyboard that you choose
56:21 - there is actually a pretty cool site
56:23 - called keycode.info that will give you
56:25 - the keycode as soon as you press it when
56:28 - you're on the site we will also be
56:29 - looking at passing through events into
56:32 - functions so that we can use them so
56:34 - let's get started by assigning key codes
56:36 - to functions let's write a function
56:38 - called control and add a document event
56:41 - listener to listen for any time we press
56:44 - a key on our keyboard
56:46 - anytime you press a key on our keyboard
56:48 - we're going to listen out for which one
56:50 - was clicked and invoke the control
56:52 - function
56:53 - we are also going to pass through an e
56:55 - here for event
56:57 - now with if statement we're going to
56:59 - decide what happens when you press a key
57:01 - if we press the key
57:04 - that deeply equals key code 37 we want
57:07 - our tetramino to invoke this function
57:10 - move left let's see if this works as we
57:12 - wrote the function in the previous
57:13 - lesson now i'll give you the coolest
57:15 - part about javascript is making stuff
57:17 - happen in your browser well you'll be
57:19 - glad to know this is exactly what the
57:20 - event listener does the event target
57:23 - method at event listener sets up a
57:25 - function that will be called whenever
57:27 - the specified event is delivered to the
57:29 - target
57:30 - common targets are elements
57:33 - document and window in layman's terms if
57:36 - you attach an event listener to
57:38 - something like a div and click it in
57:39 - your browser cool stuff will happen
57:41 - you just have to attach it to the
57:43 - element you have chosen like this you
57:44 - can see here that we are passing through
57:46 - two things
57:48 - the type of event so in this case key up
57:52 - and a function in this case is the
57:54 - function control we have just written
57:57 - you can also do remove event listener to
57:59 - deactivate any listening happening there
58:02 - are literally so many events you can use
58:04 - here are just a few of the top of my
58:06 - head
58:09 - so once again the event listener here
58:11 - listens out to any time you press a key
58:13 - on our keyboard using the key up event
58:16 - if a key is pressed we invoke the
58:18 - control function we have just written
58:21 - we attach this event listener to our
58:23 - whole html document
58:26 - okay let's refresh our browser
58:36 - and great it works
58:38 - the tetramino is even stopping when we
58:40 - hit the left hand side which is great
58:44 - now let's figure out what we're going to
58:45 - do for the rest of the key codes
58:47 - i have commented out the other functions
58:50 - for now as we have not written them yet
58:52 - but just so you know what we need to do
58:55 - so if i press up i want the shape to
58:58 - rotate if i press key code 39 i want the
59:02 - shape to go right and if i press down i
59:05 - want the shape to go down but faster
59:08 - this is something we already have so we
59:10 - can pass it through here again
59:21 - let's do the move right function based
59:24 - on the same logic as the move left and
59:26 - leave the rotate function for the next
59:28 - lesson
59:44 - so once again we undraw the squares that
59:46 - make up our detrimental from their
59:48 - current indexes
59:50 - we define what it means when some of the
59:52 - squares that make up our current
59:53 - detriment are in certain indexes and
59:56 - call this a constant of is that right
59:59 - edge
60:00 - what you can see is happening here is
60:02 - that if an index is divisible by the
60:04 - width and its remainder deeply equals
60:07 - the width minus 1 so in this case 9 or
60:10 - 18 or 27 and so on this statement is
60:13 - true and we are at the right edge
60:17 - so if we are not at the right edge
60:20 - indicated by the bank here we can freely
60:23 - move each square in the touch amino plus
60:26 - one down the array
60:39 - then if some of the squares that make up
60:42 - artichomino are suddenly in a square
60:44 - that contains the claws taken we have to
60:46 - push them back
60:48 - a space in our array visually making
60:51 - them appear like they haven't moved at
60:52 - all
61:16 - and finally we redraw the tetramino in
61:19 - its new position
61:32 - let's try this out
61:46 - okay great we can now move left to right
61:49 - without going off the grid and to the
61:51 - bottom without our touch aminos going
61:52 - past the squares with the class of taken
61:55 - let's move on to our next lesson
62:05 - in this lesson we're going to be doing
62:06 - more array work and also looking a
62:08 - little bit into the increment operator
62:10 - the increment operator is going to help
62:12 - us access the next item in our
62:14 - tetramino's array we are going to be
62:16 - doing this as we need to access all four
62:18 - of each of our tetramino rotations on
62:21 - the click of a key code
62:23 - we are going to be doing this using the
62:24 - double plus so plus plus which works in
62:28 - a way that simply means we are adding
62:29 - plus one to the defined value before it
62:32 - it is called an increment operator
62:36 - in this example you can see how it works
62:39 - if y is 5 and we use the increment
62:42 - operator on it the y will now have a
62:45 - value of 6 and you guessed it there is
62:48 - also a decrement operator using the
62:51 - double minus will make the value of our
62:53 - y change from 5 to 4.
62:56 - now let's use this in our code
62:59 - we are going to write a function to
63:01 - rotate the tetramino
63:03 - this is actually us just skipping to the
63:05 - next rotation in the current rotation
63:08 - array as always let's start by undoing
63:10 - the shape
63:21 - next we use the increment operator to
63:23 - move down to the next item in our array
63:26 - so the layout of our next rotation we
63:28 - drew out for the current search amino
63:58 - using an if statement we say that if the
64:00 - current rotation index
64:02 - is equal to the amount of rotations in
64:05 - our current tetramino shape so 4 we want
64:08 - to go back to the first item in our
64:10 - array so in other words the first
64:12 - rotation layout again
64:35 - if the statement is false we simply want
64:37 - to pass through that new current
64:39 - rotation number into our current
64:40 - tetramina like this
65:00 - and then we draw
65:06 - it okay now let's not forget to
65:09 - uncomment this out here
65:12 - we need to do this so that when we press
65:14 - the up key the shape will rotate
65:18 - now let's refresh our page and see how
65:20 - that works
65:33 - okay great we are now ready to move on
65:42 - in this lesson we're going to be
65:43 - covering everything we've learned before
65:45 - to essentially build a mini grid to the
65:47 - right of our grid right now we will be
65:50 - doing this so that we can display the
65:52 - upcoming shapes for our user
65:54 - this is a great lesson as it can also be
65:56 - considered a mini recap of all the work
65:58 - we have done so far
66:00 - we will be going over how to create a
66:02 - grid
66:03 - pick out elements to style in our style
66:05 - sheet
66:06 - pick out elements add functionality to
66:09 - and how to work with arrays in order to
66:11 - pick our next shape okay so let's get
66:13 - started the first thing we're going to
66:15 - do is go over to our hml and do the
66:18 - following
66:19 - we are going to add a 4x4 grid to our
66:21 - game so how do we do this the same way
66:24 - as we did it before
66:26 - we add 16 divs here and put them in a
66:29 - div we will choose to call our mini grid
66:47 - now let's flip over to our style sheet
66:49 - and similarly to the other grid make our
66:51 - mini grid 80 by 80 pixels
66:53 - i'm going to use flexbox again and then
66:57 - wrap them over themselves like this
67:21 - okay great and there we have our mini
67:23 - grid now i want it to display to the
67:25 - right of my main grid however to do this
67:28 - i'm simply going to put two grids uh and
67:31 - the two greens only into a div of its
67:34 - own that i'm going to choose the cool
67:35 - container
68:10 - now back in our style sheet i'm going to
68:12 - use flexbox again to make these two
68:15 - items display in line
68:27 - i am also going to do one thing to make
68:29 - it look a little better and that is at a
68:31 - margin left of 50 pixels
68:42 - okay great now we can see that there are
68:44 - two separate grids next to one another
68:50 - now let's move on to our javascript code
68:58 - so the first thing i want to do is pick
68:59 - out each div in our mini grid and call
69:02 - it display squares instead of squares
69:05 - once again we do this using query
69:07 - selector all as we want all the divs
69:09 - inside the div with the class name mini
69:11 - grid
69:25 - note we are not using away from this
69:27 - time just to show you a slightly
69:29 - different approach
69:31 - the next thing we need to do is tell our
69:33 - javascript how big the width of our mini
69:35 - grid is
69:37 - let's use display width instead of width
69:40 - for naming this constant
69:42 - we are also going to need to set our
69:44 - index at zero
69:45 - let's call this our display index so our
69:48 - javascript knows we want to talk to the
69:50 - mini grid only
69:51 - now we need another array
69:54 - we need an array of our five tetraminos
69:56 - as their first rotations for our mini
69:59 - grid to show
70:00 - we do not need all the rotations as we
70:02 - just need to display our tetramino here
70:11 - as you can see i am simply rewriting the
70:13 - l tetramina's first rotation here
70:16 - same for the zed
70:18 - tea touch amino and so on
71:33 - okay now let's get to writing a function
71:36 - that will display our shape
71:45 - using the display squares i have
71:47 - collected so all the divs in our mini
71:49 - grid
71:50 - i am using for each to get each item or
71:54 - as i'm going to call it square
71:56 - and remove any trace of a tetra amino
71:58 - class from it so that's for the whole
72:00 - mini grid i'm removing the cluster to
72:02 - sharina from the whole mini grid
72:17 - next i'm going into the nexus
72:19 - tetramina's array
72:21 - and using next random
72:23 - so let's define next random as a value
72:26 - i'm going to start with the value of
72:28 - zero
72:29 - so next round be zero
72:32 - let's actually move this up to the very
72:34 - top of our file
72:37 - we are doing this as we also need to use
72:38 - it in the freeze function
72:58 - so right before we choose a random
72:59 - detriment for our main grid we are
73:02 - adding one more step what is happening
73:04 - here the value next random is being
73:06 - passed on to the random value
73:09 - so we choose a next randomly selected
73:11 - tetramino assign this value to next
73:14 - random
73:15 - this means we now have a value
73:18 - okay let's get back to writing our
73:20 - display shape function
73:36 - for each square that makes up our now
73:38 - randomly selected up next centromino we
73:41 - want to add a class of tetramino to it
73:45 - we then want to pass it through on
73:47 - display squares
73:49 - hopefully this approach is now familiar
73:50 - to you
74:03 - let's see if that has now worked
74:05 - save your file flip over to the browser
74:08 - hit refresh
74:19 - and great that has now worked now what
74:21 - would be really great is if we can get
74:23 - this shape to display as soon as our
74:25 - game starts
74:27 - for this we're going to start to hook up
74:29 - the start and pause button
74:31 - this was quite a tough section so i
74:34 - would recommend going slowly on the
74:35 - section and trying to console log each
74:38 - step as you code just to make sure you
74:40 - understand what is happening under the
74:42 - hood
74:44 - feel free to go over the section once
74:45 - more if you need to
74:53 - this lesson is going to be all about
74:55 - setting intervals and clearing intervals
74:59 - this is an extension of what we touched
75:01 - on previously when we told our
75:03 - javascript that we want the move down
75:05 - function to invoke every thousand
75:07 - milliseconds we are now essentially
75:09 - going to move that function into an
75:11 - event listener that is attached to our
75:13 - button that we have an id of start
75:16 - button for this means that every time we
75:18 - press the start button we are going to
75:20 - invoke the function move down with its
75:23 - set interval we are also going to go a
75:25 - step further to see how timer ids work
75:28 - by adding a pause functionality
75:30 - the first thing we're going to do is
75:32 - grab our button we get an id of start
75:34 - button 2 that we called start button
75:37 - above and attach it to an event listener
75:46 - ah it's saying not to find
75:49 - let's see why not
75:52 - uh okay i used a capital here
75:54 - i'm going to change this i'm also going
75:56 - to change this for the score display
75:59 - okay let's carry on as you can see
76:01 - everything's really case sensitive and
76:03 - spelling is really important when coding
76:06 - i'm also going to let our timer id be
76:08 - null by leaving it blank like this okay
76:12 - so if the button is clicked
76:16 - and we have a timely d value so the
76:19 - value is not null
76:20 - we want to pause the game
76:23 - we do this by passing timer id through
76:25 - clear interval like this and setting the
76:28 - value of our timer id to null
76:30 - else when the start button is pressed we
76:33 - draw the tetramino in what is the
76:35 - default current position so four
76:38 - put the time ray d on a set interval of
76:40 - invoking the move down function every
76:42 - thousand milliseconds
76:44 - select the next random shape we want to
76:46 - display in our mini grid and invoke the
76:48 - display shape function we wrote that
76:50 - will display the randomly selected
76:51 - testimonial we just determined
77:11 - okay great we now need to uninvoke the
77:13 - move down function that is on a timer
77:14 - that we wrote previously from our code
77:17 - so get rid of it unless it's in the
77:19 - start button event listener
77:36 - so what is happening here is that
77:38 - because we have this line of code the
77:40 - set interval that starts at amino moving
77:42 - down and invoked on the load of the
77:44 - browser
77:45 - we want it to be invoked only if we
77:47 - press the start button so let's comment
77:49 - this out here
77:52 - and let's refresh our browser
77:55 - and perfect let's carry on
78:07 - in this video we're going to take a
78:09 - break to look into what exactly splice
78:11 - is and does
78:13 - using a splice on an array can totally
78:16 - change its content
78:17 - we can remove items from the array or
78:20 - remove them and replace them with
78:22 - totally new ones
78:23 - it is important to note that it will
78:25 - change the original array once this
78:28 - particular javascript method is used
78:30 - in other words we are mutating the array
78:33 - so to recap splice can remove an item or
78:36 - items from any position in an array
78:39 - splice can also remove an item or items
78:42 - from any position in an array and
78:44 - replace them with new ones let's have a
78:46 - look at how this works by flipping over
78:48 - to our code okay let's get an array we
78:51 - can work with
78:52 - i'm going to call it planets
78:56 - so we now have an array of four planets
78:59 - now what if i want to remove pluto from
79:01 - my ray as i'm not sure if it's a planet
79:03 - now any days i would use splice to do
79:05 - this
79:06 - typing my planets array i would attach
79:09 - splice to it like this
79:12 - next i would pass through the index of
79:14 - the item in my array i want to remove
79:16 - as i only want to remove that one item
79:18 - i'm going to pass in a
79:20 - one
79:22 - so two
79:24 - one
79:25 - okay great let's console log planet
79:27 - splice two one in brackets
79:30 - you will see that we should get pluto
79:33 - if you console log planets you will see
79:36 - that our original planets array now only
79:38 - contains three planets without pluto
79:42 - okay now what if i have changed my mind
79:44 - i want to re-add pluto but also add
79:46 - uranus
79:48 - we can use splice to do this
79:51 - let's say i want to put in the first
79:52 - index of my row but not remove anything
79:55 - just put pluto back as well as add
79:56 - uranus
79:58 - i would do so like this
80:00 - we pass through a one for the first
80:02 - index and a zero as we don't want to
80:04 - remove anything
80:06 - and then the two strings we want to add
80:07 - at index one
80:09 - let's have a look at what this gives us
80:12 - and perfect
80:14 - as you can probably tell by now the
80:16 - first two parameters are the start index
80:18 - and the delete count respectively
80:20 - leaving the delete count 0 will not
80:22 - remove anything from the array
80:24 - you might also notice that we get a
80:26 - return of the removed items or item
80:29 - every time we use splice i have just one
80:31 - more example to show you before we move
80:33 - on to implementing this in our tetris
80:35 - project
80:36 - so say i want to remove every single
80:38 - item from my array after mars
80:41 - that's right and i believe that mars is
80:42 - the only planet we can do this by simply
80:45 - passing through the index number into
80:47 - splice
80:49 - passing this through returns all of our
80:52 - planets and if we console log planets we
80:55 - will now see it only consists of mars
80:58 - okay great now that we have covered
81:00 - splice let's move on to implementing it
81:02 - into tetris
81:10 - in this section we're going to be
81:12 - focusing on what happens when the user
81:13 - manages to fill a whole row with
81:15 - tetramino squares we need to do a few
81:17 - things here we need to remove the row
81:20 - from our grid or array
81:22 - add an increased score to our score
81:24 - tally
81:25 - display the score on our browser and add
81:28 - a new fresh row to our grid or array so
81:31 - the grid doesn't appear to shrink in
81:32 - size for this we're going to be focusing
81:34 - on splice
81:36 - concat and append child as we now know
81:39 - the splice method adds and removes items
81:42 - to and from arrays
81:45 - and returns removed items
81:47 - let's move on to concat
81:49 - concat allows us to merge two arrays
81:52 - together
81:53 - let's use the same tetramine as a row
81:56 - now let's say we want to add another
81:57 - array to it
81:58 - we do so using concat
82:01 - here is my second array and i'm going to
82:03 - call it shapes
82:05 - by using the syntax and passing through
82:07 - the shapes area like this we get the two
82:09 - arrays joined together
82:17 - and finally append child
82:20 - append child is an inbuilt javascript
82:22 - method that allows us to append elements
82:24 - to an existing element for example our
82:26 - grid
82:28 - let's have a look at how this works in
82:30 - an example
82:32 - first let's recreate a grid
82:34 - so make a div with a class of grids now
82:38 - we're going to be appending divs into
82:40 - this div with a class of grid so let's
82:42 - add some styling so we can actually see
82:45 - them
82:57 - now let's get the div with the class of
82:59 - grid using our query selector and call
83:02 - it grid for our javascript
83:04 - now using create element
83:07 - so that's another inbuilt method
83:09 - let's create a div in our javascript
83:21 - now let's put this created div into our
83:23 - grid using a pen chart like this
83:27 - and tada we have now put a little red
83:30 - square into our div with a class of grid
83:34 - now let's use these three inbuilt
83:36 - methods in our project
83:38 - let's get the lesson started by creating
83:40 - our add score function where we want all
83:42 - the steps outlined to happen the first
83:44 - thing we're going to do is write a for
83:46 - loop this loop will loop over entire
83:49 - grid and all that squares every 10
83:50 - squares so width by width
83:54 - the for loop syntax in javascript looks
83:57 - a little bit like this
83:59 - in this example what we are doing here
84:01 - is three things setting a variable
84:04 - before the loop starts so var equals
84:07 - zero
84:08 - defining the condition for the loop to
84:10 - run so i must be less than five
84:14 - and incrementing the value by one using
84:16 - the increment operator we move on to the
84:19 - next item in our array to loop over
84:23 - so what will this look like
84:26 - let's have a look with an example an
84:28 - array that i have called shapes
84:31 - now if we use the for loop to loop over
84:34 - the length of the array
84:36 - and loop over each item one by one
84:39 - what will we get if we console log
84:41 - shapes
84:42 - you will get a list of the shapes
84:44 - printed out in our console log
84:46 - okay now let's use this in our project
84:58 - we next define what we want our row to
85:00 - be
85:01 - this will be the i plus every square
85:03 - that makes up a row
85:19 - now we use an inbuilt method called
85:21 - every to check if every square in our
85:24 - defined row contains a div with a class
85:26 - up taken
85:28 - if it does and the statement is true we
85:30 - do a few things
85:32 - we add 10 to the score
85:34 - we display this to our user using the
85:37 - score display and an input method called
85:39 - inner html
85:41 - and for each item in the row we remove
85:43 - the class of taken
86:05 - and we take out this row using splice
86:08 - like this
86:11 - i have assigned this taken out row to a
86:12 - const called squares removed
86:15 - let's console log this to see what is
86:16 - happening
87:21 - okay great you can see here what our row
87:24 - is and what it's made up of
87:27 - now let's re-add these squares to our
87:29 - squares array so that the grid doesn't
87:31 - appear smaller
87:35 - so what we're going to do is we're going
87:36 - to append these new squares to our grid
88:08 - let's go back to our browser
88:11 - hit refresh
88:33 - and great you will see here that our row
88:36 - has cut itself out and appended itself
88:39 - to the beginning of our array
88:42 - okay let's remove the closed touch amino
88:44 - so the blue so that it looks like it
88:47 - should
89:18 - amazing we are now down to the final
89:19 - stage of our game which is defining what
89:22 - a game over is
89:30 - we are now nearly at the end of our
89:31 - tetris course
89:33 - by now you would have covered all the
89:34 - following inbuilt javascript methods and
89:37 - use them in our project this is pretty
89:39 - impressive
89:40 - we only have one more thing left to do
89:42 - and that is define what is our game over
89:46 - now as you know tetris finishes when you
89:48 - stack up all your touch aminos so that
89:50 - they don't fit in the grid anymore this
89:52 - makes our writing of the game over
89:54 - definition super simple all we have to
89:56 - do is tell our javascript that if there
89:59 - is a taken shape present in the original
90:01 - default position or index 4 we call it a
90:04 - game over okay let's write our game over
90:08 - function
90:09 - we're going to write a game of a
90:10 - function
90:12 - in it we are going to have an if
90:14 - statement that says if some of our
90:16 - current tetramino shape that is in play
90:19 - if some of its items or indexes
90:22 - at the current tetramino's current
90:24 - position contain the class of taken
90:27 - we call it a game over
90:34 - we then display this in our score
90:36 - display
90:39 - we then also clear the game's timer ids
90:41 - so that the auto move down function
90:43 - stops
91:11 - and there we have it a fully functioning
91:14 - game of tetris now i would love for you
91:16 - to take this game make it your own share
91:18 - it with me on youtube my channel is
91:20 - anukubo or on twitter at any underscore
91:23 - kubo i would love to see what you've
91:24 - made and how you've taken this and made
91:26 - your own and taking it to the next level
91:28 - the options for you to do this are
91:30 - adding levels adding a line count maybe
91:34 - adding some music to the game
91:36 - or just styling your game to the max
91:38 - i do have one final lesson for you that
91:40 - i think might be quite interesting that
91:42 - is to do with styling of the tetramino
91:44 - colours if you want to learn how to do
91:46 - this and also want to learn how to tidy
91:48 - up your code for best practice please do
91:50 - watch my final video for this series
92:02 - hi and welcome to the last video in my
92:04 - javascript games tutorial
92:07 - if you want to learn how to assign
92:08 - colors to each texture amino and also
92:10 - want to learn how to tidy up your code
92:12 - for best practice definitely watch this
92:14 - last video in the series once again i
92:17 - hope you have enjoyed this series and if
92:20 - you do have any questions please do not
92:22 - hesitate to contact me on my socials
92:24 - below okay so the last thing we want to
92:27 - do is assign colors to each of our
92:29 - tetraminos
92:31 - we will do this in our javascript file
92:34 - first we want to make a const called
92:36 - colors
92:38 - in it i'm going to put the colors i want
92:40 - my tetraminos to be in in the same order
92:43 - as they appear in my tetramino's array
92:46 - this means my l-tetramina will now be
92:48 - orange my zed tatumino will now be red
92:51 - and so on
93:04 - now that we have that we need to find
93:06 - each time we add and remove the
93:08 - classlist of tetromino in our code
93:10 - so we can add this color on top of it
93:13 - so after that line of code has been
93:15 - written
93:16 - the first instance i can see this in is
93:19 - in the draw function
93:21 - let's use style and background color to
93:23 - add styling in our javascript file
93:26 - we also pass through whatever value is
93:28 - currently random into our colors array
93:32 - this means that if the random tetramino
93:34 - is currently the l tetramino the color
93:37 - we will get back will be orange each
93:39 - time
93:40 - as we are passing through zero
93:42 - to remove the color as we need to do for
93:45 - undraw we just leave an empty string
93:47 - like this
94:00 - we also need to do this for the mini
94:02 - grid where it displays the next shape
94:04 - let's do the same passing through next
94:06 - random instead of random
95:03 - finally the only place to remove the
95:05 - color is here in the add score function
95:29 - let's see if that has worked
95:32 - and great
95:44 - now just a quick clean up
95:46 - you can see here getting rid of any
95:48 - additional lines commented out codes and
95:52 - changing this as it should be a cons not
95:56 - a let
96:00 - and there we have it thank you so much
96:02 - for watching my video

Cleaned transcript:

hi and welcome to my javascript tutorial in which i will teach you how to code in javascript by building your very own basic game of tetris i always find that learning is easy by doing so if you're the same this tutorial is definitely for you and hey you'll have a pretty neat javascript game by the end of it this tutorial is for super beginners and we will be going through the fundamentals of javascript as well as some inbuilt functions that are going to help us build our tetris game if you have never touched code before this is a pretty good place to start we will be going through some css and html as well but just the basics as you know this is a javascript tutorial if you do have some prior knowledge of html and css please do not skip the first few lessons we need them in order to set up our game feel free to watch them on double speed if you prefer tetris is a simple gridbased game in which you as a user have to navigate five shapes or tetraminos down to the bottom of your bridge the aim of the game is to get the highest score by filling up rows on your grid in order for them to disappear and for you to gain points you as the user can rotate your shapes and you also have insider knowledge by knowing which shape is coming up next thanks to a grid to the side of your grid in this game we are not going to have levels we are simply going to do a basic version of the game basic functionality and basic styling this is so you can take it and make it fully your own i would love to see all your finished projects how you have made them your own in terms of styling or leveling up so please do share them with me please do get in touch if you get stuck at any point in this tutorial i am always more than happy to help again please do use my social links below so yeah let's get going in this walkthrough i'm going to show you my preferred code editor as well as the bonus of how to set it up so that it works for you like a sort of spell checker if you will it will check your code for mistakes and prompt you to change things in order for it to work i am also going to show you what a command tool is and how to use it to access files and folders on your computer as well as speak to them and download things from it okay so let's get going first off start by downloading a code editor i'm going to use atom if you go to atom.io and download the program that will be the tool you use to write code in your project now copy it into your applications folder and add it to your doc once that has been downloaded you will use the command line system to create a folder to store your project if you have a mac simply search for terminal in your launchpad if you're on a pc you need to search for your command prompt tool now open up your terminal and using ls you can list all the directories now using cd to enter a directory we navigate to the desktop it is on the desktop that we're going to create our project called basic tetris so using a command called mukdart we're going to make a directory called basic tetris okay great we now have a folder to store all our code files in it to go into this folder again we use cd let's use the command cd to go into this project if you ever want to get out of this project we use cd with two dots like this but we don't so let's go back into it once in this folder we need to create files to go in it we do so using a command called touch touch will create files we need to create an html file css file for our styling and a javascript file to hold our javascript i'm going to choose to call them index.html style css and app.js okay perfect now using atom dot as we are using the atom code editor we will prompt the project to open in our atom code editor and there we go we are now set up to start writing some code now i'm going to show you some useful settings on atom that will make your life a whole lot simpler atom allows us to add packages there are literally loads and loads of packages out there that you can pick and choose so i'm simply going to go through ones that i find useful for my projects open atom and click on the atom menu then install shell commands now click on the drop down and preferences in preferences in the editor panel make the following changes show indent guide check show invisibles check and tab type soft now let's go over to our terminal and type the following code what we are essentially doing here is downloading packages for atom to use via the command line tool once these have all downloaded let's quit atom now let's reopen it to see the packages that we installed and go through them all a little bit more one by one in the navigation find packages and click on the drop down you will see here all the packages we installed using the command line and apm command we have auto indent autoident will auto indent your code correctly in your files this is good for code readability and considered best practice atom tanjs is a package that adds support for es5 es6 es7 es8 node.js and more this means that it will let us use features of all of them in your code editor for example an arrow function which you will definitely come across is something that is a feature of javascript es6 and above we are also going to have something that will spell check our code and check our javascript code in a way that will notify us if something isn't working correctly for this we will use linte.js standard okay great you are now all set up to start writing javascript projects let's carry on hi and welcome back in this project we're going to be using an html file and a javascript file in order to make our project html is a hyper text markup language used as the basis of a web page html consists of tags surrounded in angular brackets like this the html tag can be used to define headings titles images links buttons there's a whole load of tags available to your disposal in this lesson we're going to be focusing on the html file and how to link it to our other files such as our javascript file and css style sheet the first thing we're going to do is make sure to check our files are named accordingly the most important thing is the ending or file extension we need to make sure that we use js to let our code editor know that we are going to be writing javascript code in this file and to treat it like a javascript file we also need to do this for the stylesheet or css file css stands for cascading stylesheet we will cover that in the next lesson now we need to link the javascript file to the html file we will do so by putting a script tag in between the head tag then using a dom event listener in our javascript to make sure this tag is read after all the code in this html file has been read an alternative way to do this is by putting the script tag at the end of the document in the footer but this is the way we're doing it for the sake of the tutorial it is important to note that in this script tag the source or src as you can see here the text in between the quotation marks needs to be the relative path of where the javascript file is as the file is in the root of our folder we simply write app.js if your app.js file happens to be in a folder you will need to change this relative path in the script tag so to recap if the file is in the same location as your html file we write this and if it's in a subfolder to your index.html file we write this replacing the green folder with whatever you have named your folder please do remember to keep your index html file at the root of your folder if you do not our browser will not be able to read this project well not without loads of configuration anyway i am actually going to flip over to our javascript file and add the dom event listener now to we must make sure all our javascript in the future is written in between these two parentheses we need to make sure this is done so that it's picked up by the script tag we wrote earlier in our html file okay so let's go ahead and add that event listener to our javascript file like so again the dom content loaded event fires when the initial html document has been completely loaded and passed this is without waiting for the style sheets images and subframes to finish loading the target of our event is the document referring to the html document okay now back to our html file so now we're going to link our style sheet in a very similar way but using a link tag instead add the following tag in between your head tag again make sure the relative path of the file is correct we do not need to add anything into our css file for this to be picked up now that we have licked our two other files in our html file let's start by adding some code to our body now we first need to plan exactly what we want our tetris game to look like in terms of shape as we're going to be making a gridbased game i would suggest drawing this out first or using something like google sheets like me to get an idea of what we have to get on with and tackle i'm gonna flip over to google sheets now i have actually predrawn this to give you an idea of what to be aiming for you can make your own grid as big or as little as you want it's up to you um so you can see here i want to make my grid 20 squares tall and 10 squares in height so how would we make these 200 squares we need to make them in our html file and then add styling to them with our stylesheet or css file so let's do it let's code out 200 divs in our html file there are other ways of doing this from the javascript file that involve creating an element 200 times using a for loop but as we are just starting out i think it's important to focus on a more visual way of learning so we can see what's happening now let's put these 200 divs and a div of its own that we are going to give a class name of grid to we are doing this so we can contain the 200 divs in a div of its own that we are going to start in our css later now we are gonna want to display the score let's do that in an h3 tag like this with a span inside of it like this h1 h2 h3 tags are all header tags h1 being your main one and going down in size all the way to you hit h8 okay moving on let's give this span an id of score so we know exactly which span tag to display the future score in just in case we used another span tag in our project as opposed to class names ids are unique and can only be used once i am also going to hard code a zero here for now finally i'm gonna add a button using the button tag as i want this button to start the game i'm gonna give a very clear id of start button okay let's save these files we are going to right click just here so we can open this file in our browser amazing though you won't see the 200 divs as they have no styling applied yet you can see them if you inspect the page if you do not know how to inspect the page you can simply do so by pressing down the control button on your keyboard and left clicking the browser like this check out this nifty animation i did here it is also where you view the console log we will be using the console log later it's a tool that allows us to see what's going on under the hood when writing javascript and is super useful okay great thanks for this lesson let's move on after just a few questions in this lesson we're going to be covering css or cascading style sheets css is a simple mechanism that allows you to add styles so fonts add colors to your web documents becoming a pro at this takes a lot of practice we are simply going to be doing the basics in order for us to carry on learning javascript as this is a javascript tutorial this will include styling to make our grid look like a grid add colors to our tetraminos and touching a little bit on flexbox once you have finished this tutorial please do go back and add as much styling as you want feel free to share it with me i would love to see your finished games okay let's start off by giving some styling to our grid the first thing we're going to do is navigate to our style css file now let's pick out the div with a class name of grid we tell our style sheet we are looking for a class by using this dot before the class name so as a recap we are picking up the div with a class name of grid that has 200 divs inside of it let's say we want our squares to be 20 by 20 pixels at a 10 by 20 grid that would mean we need to make the width of our grid 200 pixels and the height 400 pixels i'm going to make it yellow so we can see it in our browser now we are also going to style the divs in the grid we do so like this we put the div element after the element with a class name of grid by doing this we are saying that we want to start only the divs in that element like this so essentially all other divs we use in the future in our project will be unaffected by this styling okay so inside the parenthesis we're going to assign the height and the width let's also make them red just so we can see them in our browser okay let's save that file and refresh our browser you will see the red squares show up as a stack over each other this is the case by default divs do this they stack of each other unlike h3 tags which appear in line this is where flexbox comes in we need to use flexbox to make sure the red squares appear stacked in a line and then stack over each other as soon as they don't fit in the grid div with parameter let's add display flex and save and refresh the browser and there we have it we now have a grid we can work with and start adding some javascript code and game functionality too let's move on just after a few questions in this video i want to take a break just to explain what variables are and how we use them in javascript so in javascript you can store values in something called variables they are legal identifiers quite simply it is this so the variable x here equals one it is important to note that when you declare a variable its name must be unique you can assign numeric value to your variable like the number 1 or a string value such as 1 in quick marks an array such as 1 and 2 in an array a boolean such as true or false or you can just leave it undefined for later use like this now by definition variables mean anything that can vary so let's see this in action let's get x and assign it to the value 23 note we do not use var again as we have defined x above let's go ahead and console log that and you will see x has now changed value now let's talk about scope when defining variables it is important to know that they have scope variables have two types of scope global scope or function scope meaning they can only be accessed inside our function let's have a look at this in action here is a function i have written to alert me with a name let's put the var name here outside the function okay that works this is because it's a globally scoped variable now i'm going to move it here inside the function this also worked as the variable is declared inside the function however what happens if i now want to show the alert outside of this function it will not work as the variable is not being picked up as it's inside this function's scope essentially it's out of our reach now okay got it now let's talk a little bit more about const and let and how they differ from bar so when es6 came in it introduced two new ways to create variables let and const so what's the difference let's talk a little bit about the difference between let and var fast let allows you to declare variables that are limited to a scope of a block statement unlike var what does this mean well let's have a look at an example okay so i'm going to declare variable x here as one now i'm gonna write a function here called find x inside i'm gonna declare variable x again as two now if i want an alert telling me what 2 is inside this function i will get 2. however what will i get if i want to move the alert outside of this function i will get 2 as variable is global and we declared it after the first declaration now let's do the same but using let so all i'm doing is writing the same thing but replacing bar with let you will now see that we are getting a one as the other let inside the find x function is out of our scope now finally const const works in the same way let does in that you cannot access it if it is inside a function however it is also constant as const would allude to once you have defined it you cannot change it later on this is pretty useful when working with big projects and declaring what you do not want to be changed let's have a look at this in our code editor okay so there we have it let's recap bar a function scoped or globally scoped variable let a block scoped variable and const a block scoped variable that cannot be reassigned okay now we have a grasp on variables let's go back to our game of tetris in this lesson we're going to start adding functionality to our project by adding some javascript code we will especially be focusing on javascript arrays and how we will be using them in order to make our game an array is a special variable which can hold more than one value at one time if you have a list of items so a list of tetramino names for example storing the tetraminos as single constants would look like this however what if you want to loop through these tetraminos and find a specific one and what if you had not 5 but 200 of them the solution is an array an array can hold many values under a single name and you can access the value by referring to an index number we will be using the index number a lot in this course javascript arrays are zero indexed meaning that the first element of the array is at index 0 and the last element is at the index equal to the value of the array's length property minus one this is important for our game but also for javascript array knowledge in general the first thing we're going to do is tell our javascript the width of our grid in squares using const so let's flip over to our javascript file now as the value will not change we are going to use a const so as a reminder the const keyword denotes a nonmutable view of mutable data next we are going to use something called a query selector to look through our html document and find the element with a class name of grid document query selector is an inbuilt javascript method you will see here we are using dot again as we are looking for a class name once we find it sign it to the constant we have decided to call grid now our javascript knows that every time we type grid and do something to grid we want it to affect the element with a class name of grid in our html file now we also want our javascript to talk to all the squares in our grid using the query selector again but this time using document query selector all as we want to collect all the divs inside the element with the class name of grid we do this now what we are going to do involves an inbuilt javascript method called array from we are going to use it to in layman terms collect all the divs in our grid or 200 of them and turn them into an array we can work with now each div will have a specific index number let's pass these collected divs through array from to make them an array and assign it to let squares let's get our console up here so we can see what our console log tells us now hit refresh on your browser okay great you will now see that these squares is an array of 200 divs with index numbers from 0 to 199 the reason it says 0 to 199 instead of 1 to 200 is that the index count always starts at 0. what does this mean for us and our game well we just need to learn how to count a little differently let's have a look at our grid and the squares inside numbered by their indexes this is something i made in google sheets earlier to make it easier for us to understand you will see that if we want to be in the fifth square so this would be the fifth square here we would need to tell our javascript we want to be in the index four of our square's array why is this an array again because we collected all the divs and passed them through array from okay let's move on the last thing i'm going to do for this section is get a few more things from our html document we are using a hash here to indicate we are looking for an id so if we look at our html page as a reminder we gave the span tag an idea of score and this button an id of start button let's go ahead and pick them out again with our query selector there is also a get element by id feel free to use that as well i'm going to use this query selector okay great that's it for this lesson let's recap with just a few questions in this video we're going to take a quick break to go over exactly what a function is and why we use them functions are one of the main building blocks of javascript and in fact most languages in javascript a function allows you to write a block of code define it with a name and execute it as many times as you like it's all about recycling code with functions in this video i will be showing you how to write a super basic function that we will later be adapting to use in our own game of tetris okay so let's flip over to our code editor so that i can show you a super basic example of a function first so the simplest example i'm going to show you is a function that sets off an alert the first thing we're going to do is write function like this followed by a word i've chosen to call my function this word should really convey what is happening in my function we do this to make our code more readable for colleagues or simply if we're forgetful i'm going to choose to call my function show alert i am using camelcase for this camelcase is the practice of writing more than one word joined as one but visually separated by making each word after the first start with a capital letter it has no spaces or punctuation i consider this the best practice for writing functions okay so after naming our function we write these two brackets these two brackets are for passing down parameters into our function as we don't have any just yet i will leave this blank now we have to put our block of code that defines a function in parenthesis i'm going to make my function show an alert like this you will see i'm writing the inbuilt method of alert and passing through a string a string is defined as a word in these quick marks okay great now let's test out what we have written we can invoke a function like this amazing so that's the basics now let's pass a parameter or two into our function so the thing about parameters is that if you choose to pass one it needs to be one and this needs to be reflected in the code we write if you try pass any more than one the rest of these parameters will be ignored let's have a look at it now so say i want to pass down a first name into my function and somewhere else in my code i have recycled this function and written this okay let's uncomment that but as soon as i pass down my last name that part will be ignored it is the same for if i ask for the last name in the function but i do not pass it through i will get undefined we can also use argument objects and functions if we declare them outside of the function we do not need to pass them through to use them for example i'm going to write an array called name now using my function i'm going to access the first item in my array so index is zero like this okay great we are now ready to carry on with our tetris walkthrough in this video we're going to talk a little bit about arrow functions and how we're going to use them in order to draw our tetraminos onto our grid in this lesson we're going to be doing more array work and be introducing something called the narrow function as well as an inbuilt javascript method called for each arrow functions were introduced in es6 and allow us to write shorter function syntax here is the original way we would write what was and the evolution to what we now know as the arrow function if you have parameters you can pass them through the brackets like this this is what we're going to be doing and involving the for each method the for each method calls a provided callback function once for each element in an array in ascending order the callback is invoked with three arguments the value of the element the index of the element and the array object being traversed or in layman terms we're going to get an array with a bunch of values and apply logic to each one here we can see an example of for each working on an array i've called item array using this code i'm also going to pick out each item of that array so i can apply logic to it you can see here i've chosen to call it item i can call it anything i want really javascript will know what i mean it will know it's an item in my array now using an arrow function i do this and add two to each item in my array so that's the syntax let's see an action the simplest example i can show you of this happening is when we choose to add something to each item in our array let's make an array of names so an array with strings as indicated by these two quick marks here and separated by covers and put them in square brackets now it's super important to remember what is inbuilt and what isn't here names names are array that we made above for each is the inbuilt method that comes with some magic that will make our javascript do things without us writing any logic for it name here is something that we have chosen to call the items in our array i could call this whatever i want chair dog my javascript will know i mean an item in my name's array this arrow is the arrow function we referred to in our last video so what we are saying here is that for each item or name in our names array we want to print out individually that name and add the string is the best to it okay let's check that out okay and that has worked great now this is a super simple example of how to use four each with an array there are literally so many different ways to use this inbuilt method i always think it's better to learn with a working example so let's get going and use the for each method and arrow function to draw our five tetramino shapes onto the grid let's do this in the next lesson okay and welcome back this is a continuation from the last lesson where we learned about four each and how we're going to use it in order to draw the tetraminos onto our grid game the first thing we're going to do is get out our google sheets again and draw out every single rotation of each shape note the o touch amino will stay the same during each rotation and the ztetramino and eltotrimino will only have two versions of itself once we are happy with each of the shapes for rotations it's time to draw them using our width constant remember we set that as 10 in our javascript file let's get going and start with our el tetramino we will set it as const as the shape and its full rotations will not change we will make the ltetramino an array with four arrays inside it each of the four arrays is one of its rotations if you see here what i'm doing is using my drawing to draw the shape onto the grid as if i was only allowed to use the grid indexes so drawing in the index for number one on our grid shape and index with the number 10 plus one on our grid shape 10 being the width and index number 21 and the index number two it will give us this shape right here okay now let's draw the other three rotations we can do them all starting from like zero no need to draw them in their locations or my drawing let's do that now once we have done that we need to do the other four shapes in the same way now because i have done this before i'm simply going to copy this into my project from my github account you are welcome to go and grab the tetramina arrays as well but i would stress that i do advise against it and only suggest it if you are stuck and getting some strange shapes or error messages by trying to make all the shapes yourself you will get a better understanding of what we are doing here and what we are trying to achieve it would also defeat the purpose of the tutorial if you're trying to understand javascript a little bit better i mean this is the perfect erase exercise okay once we have our four shapes let's put them in an array of their own let's put this as a const and call it the tetraminos okay great we now have our tetraminos but we can't see them that's because we need to add some styling to them to see them first let's decide that we're going to make them all one color for now just to make it easier we can change this later so let's flip over to our style sheet and add the following okay now let's decide where we want to start drawing our tetraminos on the squares grid let's say the first square of our chosen tetramino's first rotation array is going to start at the square with index four so let current position equal four now let's pick a touch amino and its first rotation so let's go to our the tetramino's array of arrays by putting a zero in square brackets like this we are saying we want to access the first item on our array let's look at this slowly okay so first let's console log the tetraminos our array of arrays you can see that here we have an array of five things or as indexed zero to four these are our five tetramino shapes if you click on the first one so index zero you will see inside it has its own four things in it these are the first tetramino shape rotations we wrote earlier let's click on the first one so again index zero this should look familiar it is the first rotation in our l touch amino let's go ahead and now console log the tetraminos zero and again in brackets zero and amazing it's the same we now assign this variable to current just so we are all clear i have picked the el tetramino's first rotation this is now my current shape okay now let's draw this using for each to see if that's true let's write a function called draw and in that function let's get our current array or what we have assigned as current above now for each item in that array we want to add a class of tetramino which would color that item which is technically a div inside the element with the class name of grid so this is how for each works it applies logic to each item of an array we use the arrow function here as we saw above to add the code inside the parenthesis to each index of the current array just like we pass the zero into the array above to access the first item we are passing on a number to the squares array to color it blue we access this css style sheet by using classless add to add the style of tetraminos to the squares in the tetraminos it is in in this occasion we are passing through a four this is because we set the current position as four plus each index of the currently chosen tetramina array okay so now let's invoke this draw function like this now save your file and quickly go back to your css file to get rid of the red background we gave all our divs at the beginning we no longer need this hit save again and let's refresh our browser and great there we go you can now see a blue tetramino shape it is the ltch amino in its first rotation okay now let's go back to our javascript and select one of the tetraminos randomly for this we're going to be using three more input javascript methods math random which will give us a random number from our array length length which is an inbuilt method that will tell us exactly how long our array is and math floor which will round down to the nearest integer so let's add a variable that we're going to call random to randomly select a centrum you know from our tetrominus array we use an inbuilt javascript method called math random and multiply it by the length of our tetrameter's array length being invo as well we then pass this through another input method called math floor this will round down the number to its nearest full integer okay so let's see if that has worked we should get a new number each time we refresh the page refresh again and great now we have that let's go back to our current variable and replace the first zero with random now what's happening here is that instead of passing through a zero and accessing the first item of our h time we are passing through a number from zero to four randomly this will give back the first second third fourth or fifth tetramino in other tetramino's array once we have one of these five shapes we want to access again but always picking is first rotation let's set this as let current rotation equal zero now if we pass this through we will always start at the first rotation of any random tetramino chosen i'm just going to change this here to more accurately reflect what is happening now just to be as transparent as possible let's uninvoke the draw function here too by getting rid of this code okay now the last thing we want to do is write a function to undraw the randomly chosen tetramino and its current rotation we do the same as we did to draw it so once again we name the function undraw we use a four each so for each item or index in our current shapes array we look at each of their current positions add the index of the shape and pass it through our squares array now the only difference here is apart from adding the class we are removing the class of touch amino from its current location in the grid so it will visibly disappear from our grid okay great we now officially have all our touch aminos i can draw each one on our grid please do if you're not quite sure pause here and just have a go at messing around some of the numbers replace the current position so on just to see exactly what's happening refresh the browser lows to see if you're getting a random tetramino if not go over this lesson again i will provide the code below as well so don't worry if you feel stuck in the next lesson we're going to be focusing on moving the tetraminos around our grid hey and welcome back in this lesson we're going to learn a little bit about timer ids and an inbuilt method called set interval set interval allows us to invoke a function that we pass through it after x amount of time in this example the time is 1000 milliseconds or in other words one second we are going to be using set interval for this project because we want our tetrameter shape to auto move down the grid every second just like in the real game as mentioned in the example we do this by passing through a function that we will call move down into the set interval as well as the milliseconds we want to invoke this function at we are going to assign this to timer id this is so we can stop the set interval in the future now let's write the move down function using the functions of undraw and draw we wrote in our previous lessons so we want to undraw the shape from its current position and add a whole width to the current position and draw again in its new position let's check if that has worked okay great we can see that the shape is now also moving down our screen sadly it's not stopping and going through the bottom of our grid this is something that we need to solve we are going to do this simply by flicking back to our html and adding 10 more divs to the bottom of our 200 divs this time with a class name of taken as these do not have a style in our style sheet they will not show up visibly we just know that they have that class if i inspect the page you will see them there next we need to write a freeze function in this function we want to write an if statement an if statement looks like this we pass through a condition in brackets before an if whatever the condition between these brackets is has to give us a boolean response so a true or a false if the condition is true we carry out the next steps of whatever is in between these two parentheses so here we have an example if the temperature is above 20 degrees so this statement is true we return it is hot now we can also write an if else statement an if else statement is the same as an if statement however if the condition is now false we can also return a response so in this example here if the temperature is not over 20 degrees we return it is cold now we can also keep adding and adding with this else if and go on forever just like in this example here so here if the temperature is not above 20 degrees so false we bypass this if statement and check the else f if the temperature is deeply equal to indicated by these three equal signs that is deeply equal deeply equal to 18 then we return it is warm and of course if it is not then this statement is also false and we return a it is called so let's go back to what we want to happen in our if statement if some sum another inbuilt javascript method similar to how four each works however instead of applying logic to each item in an array like for each with sum we are checking that the logic we write in the brackets is true for some of the items in our array so basically if we ever get one true back we are good to go so if some of the squares that make up the current tetramino if they're indexed plus a whole width so essentially we are checking the next space down from each square contains a square with the class name of taken so if this statement is true for at least one item in our current doctrinal array we turn each of the tetramena squares into a square that contains the class of taken got it we then also immediately select a new tetramino to be our current tetramino this will be familiar let's get a random tetramino number we then passes through our tetramino's array and its first rotation we then set this as our current tetramino then we put it at the current position so four and finally we draw this new randomly selected trimino okay that is it that is our freeze function let's add this freeze function into our move down function so that it gets invoked to check every second oops i missed the capital m of math here that is really important please don't forget to add this here okay great now let's flip over to our browser and see if that has worked amazing let's move on to the next lesson okay so we now have an array of squares great and we have wrapped these squares over each other to appear like a grid amazing however in reality how does our computer know when we are at the very left hand side of our grid what stops our tetramino from going from this position to this position when moving right technically we are in an array so this would be the next logical step we need to write a set of rules to let our javascript know when any of our squares that make up our tetramino are in a certain indexed square we're going to do this using good oldfashioned maths as we can see here our grid has a width of 10 made up of an array of squares with indexes 0 to 199 i want to make sure that if the tetramino is in the square with index 10 i don't want it to move left anymore i want to stop it as otherwise it will appear in the square with index number 11. so i need to write a rule that will stop our squares if they are in the square with index 10 20 30 and so on let's get started by defining what is a move left function what we're going to be doing is visually moving the tetramino left by drawing it and undrawing it in the squares we start off by removing any trace of the shape in its current location before we start so that we have a clean slate next we define what is the left edge and if the shape is in it this is where our mouth comes in for this we use the inbuilt method called sum again as a recap sum is a method that looks at each item in the array and checks if the statement is true for at least one of the items if it is the whole statement is therefore true so once again let's use current as a reminder current is our current randomly selected detrimental and its current rotation we are checking that sum of the current tetramino's item indexes if divided by the width leave exactly no remainder so again if one of the tetramino squares is in a square let's say that has an index of 10 we also know that 10 divided by the width so 10 gives us exactly zero as a remainder this means our statement is true and the shape is at the left hand side of our grid this is also true for index 20 30 40 and so on let's use this information and only allow our shape to move left or 1 from its current position in the array if the shape is not at the left edge indicated by this exclamation or bang here we also want our tetramina to stop if there is another tetramina already there that has been frozen for this we are going to have to have a taken class we are not going to style this class we just want to assign it to the spaces that have been taken and we can't go into we will use an if statement for this what we want to write is if some of the squares in our central amino shape suddenly go into a space that contains a class of taken while traveling left you want to push it back one space so it appears not to have moved we want to do this for every index in our tetramino shape so use an arrow function to do that like this and pass through the current position and add every index as it gets passed through then we add one to the current position so that moves back to its original space in the array and finally we draw the tetramino okay so that was a lot to take in so before we start writing the move right move down and move up function let's wire this all up to see if it works first before we move on key codes are pretty cool every single key on your keyboard has an assigned code to it that we can access through our javascript we are going to use this to make our tetramino move left if you press key code 37 right if you press key code 39 and make some javascript magic happen if you press the button down and so on you can technically make your touch and move left if you press just about any key on your keyboard that you choose there is actually a pretty cool site called keycode.info that will give you the keycode as soon as you press it when you're on the site we will also be looking at passing through events into functions so that we can use them so let's get started by assigning key codes to functions let's write a function called control and add a document event listener to listen for any time we press a key on our keyboard anytime you press a key on our keyboard we're going to listen out for which one was clicked and invoke the control function we are also going to pass through an e here for event now with if statement we're going to decide what happens when you press a key if we press the key that deeply equals key code 37 we want our tetramino to invoke this function move left let's see if this works as we wrote the function in the previous lesson now i'll give you the coolest part about javascript is making stuff happen in your browser well you'll be glad to know this is exactly what the event listener does the event target method at event listener sets up a function that will be called whenever the specified event is delivered to the target common targets are elements document and window in layman's terms if you attach an event listener to something like a div and click it in your browser cool stuff will happen you just have to attach it to the element you have chosen like this you can see here that we are passing through two things the type of event so in this case key up and a function in this case is the function control we have just written you can also do remove event listener to deactivate any listening happening there are literally so many events you can use here are just a few of the top of my head so once again the event listener here listens out to any time you press a key on our keyboard using the key up event if a key is pressed we invoke the control function we have just written we attach this event listener to our whole html document okay let's refresh our browser and great it works the tetramino is even stopping when we hit the left hand side which is great now let's figure out what we're going to do for the rest of the key codes i have commented out the other functions for now as we have not written them yet but just so you know what we need to do so if i press up i want the shape to rotate if i press key code 39 i want the shape to go right and if i press down i want the shape to go down but faster this is something we already have so we can pass it through here again let's do the move right function based on the same logic as the move left and leave the rotate function for the next lesson so once again we undraw the squares that make up our detrimental from their current indexes we define what it means when some of the squares that make up our current detriment are in certain indexes and call this a constant of is that right edge what you can see is happening here is that if an index is divisible by the width and its remainder deeply equals the width minus 1 so in this case 9 or 18 or 27 and so on this statement is true and we are at the right edge so if we are not at the right edge indicated by the bank here we can freely move each square in the touch amino plus one down the array then if some of the squares that make up artichomino are suddenly in a square that contains the claws taken we have to push them back a space in our array visually making them appear like they haven't moved at all and finally we redraw the tetramino in its new position let's try this out okay great we can now move left to right without going off the grid and to the bottom without our touch aminos going past the squares with the class of taken let's move on to our next lesson in this lesson we're going to be doing more array work and also looking a little bit into the increment operator the increment operator is going to help us access the next item in our tetramino's array we are going to be doing this as we need to access all four of each of our tetramino rotations on the click of a key code we are going to be doing this using the double plus so plus plus which works in a way that simply means we are adding plus one to the defined value before it it is called an increment operator in this example you can see how it works if y is 5 and we use the increment operator on it the y will now have a value of 6 and you guessed it there is also a decrement operator using the double minus will make the value of our y change from 5 to 4. now let's use this in our code we are going to write a function to rotate the tetramino this is actually us just skipping to the next rotation in the current rotation array as always let's start by undoing the shape next we use the increment operator to move down to the next item in our array so the layout of our next rotation we drew out for the current search amino using an if statement we say that if the current rotation index is equal to the amount of rotations in our current tetramino shape so 4 we want to go back to the first item in our array so in other words the first rotation layout again if the statement is false we simply want to pass through that new current rotation number into our current tetramina like this and then we draw it okay now let's not forget to uncomment this out here we need to do this so that when we press the up key the shape will rotate now let's refresh our page and see how that works okay great we are now ready to move on in this lesson we're going to be covering everything we've learned before to essentially build a mini grid to the right of our grid right now we will be doing this so that we can display the upcoming shapes for our user this is a great lesson as it can also be considered a mini recap of all the work we have done so far we will be going over how to create a grid pick out elements to style in our style sheet pick out elements add functionality to and how to work with arrays in order to pick our next shape okay so let's get started the first thing we're going to do is go over to our hml and do the following we are going to add a 4x4 grid to our game so how do we do this the same way as we did it before we add 16 divs here and put them in a div we will choose to call our mini grid now let's flip over to our style sheet and similarly to the other grid make our mini grid 80 by 80 pixels i'm going to use flexbox again and then wrap them over themselves like this okay great and there we have our mini grid now i want it to display to the right of my main grid however to do this i'm simply going to put two grids uh and the two greens only into a div of its own that i'm going to choose the cool container now back in our style sheet i'm going to use flexbox again to make these two items display in line i am also going to do one thing to make it look a little better and that is at a margin left of 50 pixels okay great now we can see that there are two separate grids next to one another now let's move on to our javascript code so the first thing i want to do is pick out each div in our mini grid and call it display squares instead of squares once again we do this using query selector all as we want all the divs inside the div with the class name mini grid note we are not using away from this time just to show you a slightly different approach the next thing we need to do is tell our javascript how big the width of our mini grid is let's use display width instead of width for naming this constant we are also going to need to set our index at zero let's call this our display index so our javascript knows we want to talk to the mini grid only now we need another array we need an array of our five tetraminos as their first rotations for our mini grid to show we do not need all the rotations as we just need to display our tetramino here as you can see i am simply rewriting the l tetramina's first rotation here same for the zed tea touch amino and so on okay now let's get to writing a function that will display our shape using the display squares i have collected so all the divs in our mini grid i am using for each to get each item or as i'm going to call it square and remove any trace of a tetra amino class from it so that's for the whole mini grid i'm removing the cluster to sharina from the whole mini grid next i'm going into the nexus tetramina's array and using next random so let's define next random as a value i'm going to start with the value of zero so next round be zero let's actually move this up to the very top of our file we are doing this as we also need to use it in the freeze function so right before we choose a random detriment for our main grid we are adding one more step what is happening here the value next random is being passed on to the random value so we choose a next randomly selected tetramino assign this value to next random this means we now have a value okay let's get back to writing our display shape function for each square that makes up our now randomly selected up next centromino we want to add a class of tetramino to it we then want to pass it through on display squares hopefully this approach is now familiar to you let's see if that has now worked save your file flip over to the browser hit refresh and great that has now worked now what would be really great is if we can get this shape to display as soon as our game starts for this we're going to start to hook up the start and pause button this was quite a tough section so i would recommend going slowly on the section and trying to console log each step as you code just to make sure you understand what is happening under the hood feel free to go over the section once more if you need to this lesson is going to be all about setting intervals and clearing intervals this is an extension of what we touched on previously when we told our javascript that we want the move down function to invoke every thousand milliseconds we are now essentially going to move that function into an event listener that is attached to our button that we have an id of start button for this means that every time we press the start button we are going to invoke the function move down with its set interval we are also going to go a step further to see how timer ids work by adding a pause functionality the first thing we're going to do is grab our button we get an id of start button 2 that we called start button above and attach it to an event listener ah it's saying not to find let's see why not uh okay i used a capital here i'm going to change this i'm also going to change this for the score display okay let's carry on as you can see everything's really case sensitive and spelling is really important when coding i'm also going to let our timer id be null by leaving it blank like this okay so if the button is clicked and we have a timely d value so the value is not null we want to pause the game we do this by passing timer id through clear interval like this and setting the value of our timer id to null else when the start button is pressed we draw the tetramino in what is the default current position so four put the time ray d on a set interval of invoking the move down function every thousand milliseconds select the next random shape we want to display in our mini grid and invoke the display shape function we wrote that will display the randomly selected testimonial we just determined okay great we now need to uninvoke the move down function that is on a timer that we wrote previously from our code so get rid of it unless it's in the start button event listener so what is happening here is that because we have this line of code the set interval that starts at amino moving down and invoked on the load of the browser we want it to be invoked only if we press the start button so let's comment this out here and let's refresh our browser and perfect let's carry on in this video we're going to take a break to look into what exactly splice is and does using a splice on an array can totally change its content we can remove items from the array or remove them and replace them with totally new ones it is important to note that it will change the original array once this particular javascript method is used in other words we are mutating the array so to recap splice can remove an item or items from any position in an array splice can also remove an item or items from any position in an array and replace them with new ones let's have a look at how this works by flipping over to our code okay let's get an array we can work with i'm going to call it planets so we now have an array of four planets now what if i want to remove pluto from my ray as i'm not sure if it's a planet now any days i would use splice to do this typing my planets array i would attach splice to it like this next i would pass through the index of the item in my array i want to remove as i only want to remove that one item i'm going to pass in a one so two one okay great let's console log planet splice two one in brackets you will see that we should get pluto if you console log planets you will see that our original planets array now only contains three planets without pluto okay now what if i have changed my mind i want to readd pluto but also add uranus we can use splice to do this let's say i want to put in the first index of my row but not remove anything just put pluto back as well as add uranus i would do so like this we pass through a one for the first index and a zero as we don't want to remove anything and then the two strings we want to add at index one let's have a look at what this gives us and perfect as you can probably tell by now the first two parameters are the start index and the delete count respectively leaving the delete count 0 will not remove anything from the array you might also notice that we get a return of the removed items or item every time we use splice i have just one more example to show you before we move on to implementing this in our tetris project so say i want to remove every single item from my array after mars that's right and i believe that mars is the only planet we can do this by simply passing through the index number into splice passing this through returns all of our planets and if we console log planets we will now see it only consists of mars okay great now that we have covered splice let's move on to implementing it into tetris in this section we're going to be focusing on what happens when the user manages to fill a whole row with tetramino squares we need to do a few things here we need to remove the row from our grid or array add an increased score to our score tally display the score on our browser and add a new fresh row to our grid or array so the grid doesn't appear to shrink in size for this we're going to be focusing on splice concat and append child as we now know the splice method adds and removes items to and from arrays and returns removed items let's move on to concat concat allows us to merge two arrays together let's use the same tetramine as a row now let's say we want to add another array to it we do so using concat here is my second array and i'm going to call it shapes by using the syntax and passing through the shapes area like this we get the two arrays joined together and finally append child append child is an inbuilt javascript method that allows us to append elements to an existing element for example our grid let's have a look at how this works in an example first let's recreate a grid so make a div with a class of grids now we're going to be appending divs into this div with a class of grid so let's add some styling so we can actually see them now let's get the div with the class of grid using our query selector and call it grid for our javascript now using create element so that's another inbuilt method let's create a div in our javascript now let's put this created div into our grid using a pen chart like this and tada we have now put a little red square into our div with a class of grid now let's use these three inbuilt methods in our project let's get the lesson started by creating our add score function where we want all the steps outlined to happen the first thing we're going to do is write a for loop this loop will loop over entire grid and all that squares every 10 squares so width by width the for loop syntax in javascript looks a little bit like this in this example what we are doing here is three things setting a variable before the loop starts so var equals zero defining the condition for the loop to run so i must be less than five and incrementing the value by one using the increment operator we move on to the next item in our array to loop over so what will this look like let's have a look with an example an array that i have called shapes now if we use the for loop to loop over the length of the array and loop over each item one by one what will we get if we console log shapes you will get a list of the shapes printed out in our console log okay now let's use this in our project we next define what we want our row to be this will be the i plus every square that makes up a row now we use an inbuilt method called every to check if every square in our defined row contains a div with a class up taken if it does and the statement is true we do a few things we add 10 to the score we display this to our user using the score display and an input method called inner html and for each item in the row we remove the class of taken and we take out this row using splice like this i have assigned this taken out row to a const called squares removed let's console log this to see what is happening okay great you can see here what our row is and what it's made up of now let's readd these squares to our squares array so that the grid doesn't appear smaller so what we're going to do is we're going to append these new squares to our grid let's go back to our browser hit refresh and great you will see here that our row has cut itself out and appended itself to the beginning of our array okay let's remove the closed touch amino so the blue so that it looks like it should amazing we are now down to the final stage of our game which is defining what a game over is we are now nearly at the end of our tetris course by now you would have covered all the following inbuilt javascript methods and use them in our project this is pretty impressive we only have one more thing left to do and that is define what is our game over now as you know tetris finishes when you stack up all your touch aminos so that they don't fit in the grid anymore this makes our writing of the game over definition super simple all we have to do is tell our javascript that if there is a taken shape present in the original default position or index 4 we call it a game over okay let's write our game over function we're going to write a game of a function in it we are going to have an if statement that says if some of our current tetramino shape that is in play if some of its items or indexes at the current tetramino's current position contain the class of taken we call it a game over we then display this in our score display we then also clear the game's timer ids so that the auto move down function stops and there we have it a fully functioning game of tetris now i would love for you to take this game make it your own share it with me on youtube my channel is anukubo or on twitter at any underscore kubo i would love to see what you've made and how you've taken this and made your own and taking it to the next level the options for you to do this are adding levels adding a line count maybe adding some music to the game or just styling your game to the max i do have one final lesson for you that i think might be quite interesting that is to do with styling of the tetramino colours if you want to learn how to do this and also want to learn how to tidy up your code for best practice please do watch my final video for this series hi and welcome to the last video in my javascript games tutorial if you want to learn how to assign colors to each texture amino and also want to learn how to tidy up your code for best practice definitely watch this last video in the series once again i hope you have enjoyed this series and if you do have any questions please do not hesitate to contact me on my socials below okay so the last thing we want to do is assign colors to each of our tetraminos we will do this in our javascript file first we want to make a const called colors in it i'm going to put the colors i want my tetraminos to be in in the same order as they appear in my tetramino's array this means my ltetramina will now be orange my zed tatumino will now be red and so on now that we have that we need to find each time we add and remove the classlist of tetromino in our code so we can add this color on top of it so after that line of code has been written the first instance i can see this in is in the draw function let's use style and background color to add styling in our javascript file we also pass through whatever value is currently random into our colors array this means that if the random tetramino is currently the l tetramino the color we will get back will be orange each time as we are passing through zero to remove the color as we need to do for undraw we just leave an empty string like this we also need to do this for the mini grid where it displays the next shape let's do the same passing through next random instead of random finally the only place to remove the color is here in the add score function let's see if that has worked and great now just a quick clean up you can see here getting rid of any additional lines commented out codes and changing this as it should be a cons not a let and there we have it thank you so much for watching my video
