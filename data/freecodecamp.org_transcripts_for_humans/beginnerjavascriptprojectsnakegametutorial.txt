With timestamps:

00:00 - improve your web dev skills by coding a
00:02 - retro snake game using HTML CSS and
00:05 - JavaScript you'll learn how to use
00:07 - JavaScript to draw the game board create
00:09 - the snake and randomly generate food
00:11 - make the snake move increase the snake
00:13 - size when it eats and a bunch of other
00:15 - features adamir is great at breaking
00:17 - down concepts for beginners and he
00:19 - teaches this course we are making this
00:21 - retro snake game inspired by the iconic
00:25 - Nokia snake game we will style this
00:28 - awesome retro design using HTML and CSS
00:32 - then we'll set up our game logic we'll
00:35 - draw the game board create the snake and
00:38 - food elements we'll learn how to make
00:40 - the snake move and increase its size
00:43 - when the snake eats as well as increase
00:46 - its speed to make the game more fun and
00:49 - challenging we're also going to learn
00:50 - how to keep score of our snake size as
00:53 - the game progresses and also to track
00:56 - when the snake collides with the walls
00:58 - or itself we are we are also keeping
01:00 - track of the largest our snake has ever
01:02 - been in our high score so when we do
01:05 - lose a game we can keep track of what we
01:07 - need to beat the next time around by the
01:10 - end of this tutorial you will have made
01:12 - the best snake game on YouTube from
01:15 - scratch and you will understand all the
01:17 - JavaScript that makes it run and this
01:20 - video is intended for beginners to
01:22 - JavaScript as I will be explaining all
01:24 - the code we use to make this game take
01:26 - Life by the end you will have learned to
01:28 - create and manipulate HTML elements
01:31 - using JavaScript and you will have
01:33 - learned simple game logic and design and
01:36 - we will be using VSS code as our code
01:38 - editor Google fonts for our retro font
01:41 - as well as an AI generated image for our
01:43 - snake game logo as always you can find
01:46 - deployed game and GitHub repo in the
01:49 - description below if you're ready to
01:50 - make your own addictive version of the
01:53 - very best snake game you will find on
01:55 - YouTube let's get started the first
01:57 - thing we're going to do is open up our
01:59 - vs code open an empty project I am just
02:02 - going to create a new folder on my
02:05 - desktop and I am going to rename that to
02:08 - snake game and I'm going to drag that
02:11 - into vs code so now we have that open in
02:14 - our Explorer the first thing we are
02:17 - making is our index file so new file
02:21 - we're going to create an
02:23 - index.html file and then we are going to
02:27 - write exclamation mark and then we get
02:29 - these shortcuts here with emit
02:31 - abbreviation we're going to hit the
02:34 - first uh the single exclamation mark to
02:37 - give us some boilerplate HTML let's give
02:40 - it a title of let's say snake
02:44 - game save
02:46 - that and then let's actually if you
02:50 - don't have that install already there's
02:52 - an extension tab here you can look for
02:56 - live
02:58 - server by which we day so install that
03:02 - uh if you don't have that installed
03:04 - that's going to enable us to run this
03:07 - game uh live without having to kind of
03:11 - refresh the page to get the latest
03:13 - changes and also to make some of the
03:15 - JavaScript work we're going to need to
03:17 - run it live so let's hit that little go
03:21 - live button and you'll have that if you
03:24 - installed the extension and that is
03:27 - opening up our browser here here as we
03:30 - can see snake game is written in the top
03:34 - here so we see that is correctly
03:37 - rendering the little HTML that we have
03:40 - so far then I'm going to go in here in
03:43 - View and I'm going to turn on word wrap
03:46 - to get all the text neatly visible on
03:49 - the screen let's now also create our CSS
03:53 - our style. CSS file and let's also just
03:58 - create our script
04:00 - .js file uh while we are at it those are
04:04 - the three files we need nothing else now
04:07 - let's link these files up with each
04:09 - other so in the head of our HTML under
04:13 - the title we are going to first link to
04:16 - the
04:17 - stylesheet and writing link we can now
04:20 - choose the third option which is going
04:23 - to give us the standard way of writing a
04:26 - stylesheet and we've already cheated a
04:28 - bit because we've called it exactly what
04:30 - the standard is so now let's just check
04:33 - that by writing body in our
04:36 - stylesheet and some curly brackets and
04:39 - giving it a background color of red
04:42 - hitting save and we see that that is
04:44 - updating correctly so let's just remove
04:47 - that for
04:49 - now same thing with uh the script we're
04:52 - going to link that up now writing script
04:56 - script and Source third one and here
05:00 - we're going to give it
05:04 - script.js and hit save so here let's try
05:08 - console logging a shortcut is just
05:10 - writing log and hitting enter or tab
05:13 - depending on your um system
05:16 - preferences and that gives us the full
05:19 - console log so we're going to console
05:21 - log
05:22 - test and then in our browser we're going
05:25 - to
05:26 - inspect and we're going to go up to the
05:28 - console here and we see that we have
05:31 - test indeed getting uh logged so it is
05:35 - working as
05:37 - well let's now remove that back in our
05:40 - index file let's also be sure to write
05:44 - uh the defer
05:46 - attribute inside of the script opening
05:49 - script tag which is going to say that
05:51 - it's going to run the script after it
05:54 - has run everything in the HTML which is
05:57 - going to help us avoid a lot of error
05:59 - and that also makes us be able to put
06:02 - the script neatly in the head which is
06:05 - the best
06:06 - practice so inside the body we're going
06:08 - to write a
06:10 - div and that is just not going to have
06:13 - any class or anything but inside of that
06:15 - div we're going to write another div and
06:19 - it is going to have the class of
06:22 - scores that is going to keep our score
06:26 - then inside of here we are going to have
06:28 - an H1
06:30 - it is going to have an ID of
06:33 - score and here we can just put that to 0
06:36 - 0 for now and also another
06:40 - H1 with an
06:42 - ID of let's see high score with capital
06:48 - S and we're also going to put that
06:51 - initialize that as 0 0 0 then under this
06:55 - div we're going to create another div
06:57 - and it is going to have a class
07:00 - of game
07:03 - border
07:04 - one and hit enter or tab so what just
07:08 - happened well I used emit
07:11 - abbreviation um and you can actually
07:13 - create a div and if you write div and
07:17 - then dot that dot signals that that's
07:19 - going to be a whatever you write after
07:22 - here is going to be the class name so
07:25 - like so so that can save you a bit of
07:27 - typing inside the game border one we are
07:30 - going to create the game border two cuz
07:33 - it's getting a bit meta here we have
07:35 - some nice borders around our main um
07:40 - game board and we're simply using these
07:42 - divs to style and give them different
07:45 - colors and
07:47 - borders so this one is going to be game
07:49 - border
07:51 - 2 and then third
07:54 - one with a class of game border
08:00 - let's see three and inside of the third
08:04 - game border we're creating the div that
08:07 - is actually going to have the ID of game
08:12 - board like so so obviously we don't see
08:15 - anything yet CU we haven't given them
08:17 - any style whatsoever or any properties
08:19 - they don't have any height no width
08:21 - nothing then just above the closing body
08:25 - tag we're going to create another
08:28 - H1 it's going to have an ID of
08:33 - instruction
08:35 - text and that is going to be the one
08:37 - that says press space bar to start the
08:43 - game like so and then also under there
08:47 - we're going to have an
08:48 - image and that is going to have let's
08:52 - see the alt is going to be the Snake
08:57 - logo so we don't have the image just now
09:00 - but if you look in the description there
09:02 - will be a link to the Snake logo image
09:07 - this is free of use it's an AI generated
09:09 - image so feel free to use it for your
09:12 - project so go in the description uh look
09:15 - for the snake image uh link download it
09:19 - and then drag that into the um
09:23 - repository here I'm doing the same it's
09:26 - called snake game AI gen
09:29 - PNG so now in our source attribute here
09:32 - in the image we can uh link to that so
09:36 - snake game AI gen and we hit save there
09:42 - we go cool so now we can move on to our
09:46 - style. CSS let's actually first before
09:50 - we move on let's target both the H1 and
09:52 - the image and just comment those out if
09:55 - you hit uh control
09:58 - KC that's going to comment that out or
10:01 - command KC for on
10:04 - Mac and then we hit save because um we
10:08 - are hiding and unhiding those elements
10:11 - on our in our JavaScript later but in
10:13 - the meantime uh just to make it a bit
10:15 - easier for us to see what's going on
10:17 - we're just going to hide them for now so
10:19 - now we can pop up into our style. CSS
10:23 - file let's also inspect in our browser
10:27 - and we can stay in the elements I'm
10:30 - going to open the body here the div just
10:34 - so you can see that we have all the
10:35 - elements here we have our game
10:37 - border with literally no
10:40 - properties all these no properties
10:43 - they're just empty divs so now we're
10:45 - going to give these div more life and
10:47 - make this actually look like a game so
10:52 - body going to Target that first we are
10:55 - going to say display
10:58 - Flex so that we can have things neatly
11:01 - under each other and centered we're
11:04 - going to align it align items to the
11:09 - center we are going to justify the
11:12 - content to the center as well this is
11:16 - going to align items uh both uh
11:19 - vertically and horizontally to the
11:22 - center then we're going to give the body
11:25 - the height of 100 view height so it
11:27 - takes the entire
11:29 - height of the
11:31 - screen then we are going to give it a
11:33 - margin because by default you see we
11:36 - have this scroll bar here that's because
11:39 - the body as you can see here when I
11:41 - hover over it has this orange by default
11:44 - margin of what is it uh 8
11:47 - pixels so we're going to remove that and
11:49 - say zero and that removes the scroll
11:53 - bar then we are going to give a fult
11:57 - family which is going to be something
11:59 - we're going to get from Google fonts to
12:02 - make these numbers and the text we write
12:05 - more game like more retro and more like
12:07 - pixelated we are going to get that from
12:10 - fonts. goole.com it's completely free to
12:13 - use and quite easy in Google fonts
12:16 - you're going to search font you're going
12:17 - to write
12:18 - VT and then you're going to see this
12:23 - vt323 that is the font we're going to be
12:25 - using if you scroll down you're going to
12:27 - see a select Reg 400 you're going to hit
12:30 - that and then you're going to go in the
12:32 - top right corner you going see we have
12:34 - that selected you're going to copy this
12:37 - link here we're going to head over to
12:39 - the
12:40 - index.html file Under The Meta tags here
12:44 - and over the title you're going to paste
12:46 - that in and then this preconnect stuff
12:50 - basically loads the the font a bit
12:53 - sooner and then this link redirects to
12:56 - the correct font hosted on Google
12:59 - fonts so here we're telling our
13:01 - stylesheet that basically now you have
13:04 - access to this font and how we use it is
13:07 - we use this CSS rule here so we can copy
13:11 - that head back to our CSS and let's also
13:15 - go back to our snake game we have our
13:17 - zeros here if we save the CSS we see
13:21 - that it reloads because of the live
13:23 - server now when I paste in here the font
13:27 - family we see that we get our nice retro
13:31 - design cool now we are ready to move on
13:34 - so next we're going to Target our body
13:38 - as well as our DOT snake class that we
13:43 - haven't used yet but we're going to be
13:45 - using in our JavaScript so we're just
13:47 - going to Target it at the same time we
13:50 - are giving them a background color that
13:53 - is quite dark uh so it's hash
13:57 - 414141
13:59 - which gives us this uh dark grayish
14:05 - color then we are also going to Target
14:08 - the ID game board game
14:13 - dashboard and we're going to give it a
14:15 - border radius of 100
14:19 - pixels we are going to give it a display
14:22 - of
14:23 - grid so this is where we're actually
14:26 - making the game board with this grid and
14:29 - then we're going to give it a grid
14:31 - template columns so how many columns is
14:33 - this grid going to have well it's going
14:35 - to be repeat 20 columns and each of them
14:40 - are going to be 20 pixels
14:44 - wide and then same with rows grid
14:48 - template
14:50 - rows that is going to be repeat 20 by 20
14:56 - pixels like so so let's check out our
14:59 - body
15:01 - now game board game board two border
15:05 - game board here we
15:08 - go can we see that okay so we see now
15:12 - that we have if we hover over game board
15:15 - here we see that we actually see the
15:17 - game board it is 400 * 400 pixels wide
15:21 - and um size basically and it has 20 * 20
15:27 - a little squares in inside of it so
15:29 - that's the grid we just
15:31 - made this is our playing field that
15:33 - we're going to be using throughout the
15:37 - game lastly here we're going to also
15:39 - give it a margin of five
15:42 - pixels because later on we are going to
15:45 - have a border here and this margin
15:49 - basically makes it so that our snake
15:51 - when it hits the Border it's not going
15:53 - to overlap the border and it's going to
15:54 - create a neat um uh visual aesthetic so
15:58 - it's simply for visuals this margin then
16:01 - we're going to Target the game border
16:05 - one and we are going to say we're going
16:09 - to give it a border of
16:11 - hashtag and that's going to be 5
16:15 - 95
16:18 - f43 and that's going to be a solid
16:20 - border and it's going to be 10 pixels
16:24 - wide there we
16:27 - go and and then we're going to give it a
16:30 - border radius of 30 pixels to round that
16:34 - out a
16:36 - bit as well as a box shadow of inset and
16:42 - I'm going to explain in a bit why we're
16:44 - using box Shadow here in addition to uh
16:48 - the Border but it's easier to see once
16:52 - we actually have some more elements this
16:55 - is also going to be 10 pixels and it's
16:57 - going to be the color of it's going to
17:00 - be the same color actually 59 5
17:05 - f43 save that so you slightly see the
17:09 - the Border here so if I comment that out
17:12 - control
17:13 - KC you see that the Border actually goes
17:17 - on the outside of the game board whilst
17:21 - the if I comment this in again you see
17:24 - that the uh box shadow goes on the
17:27 - inside
17:28 - it's a bit hard to see because it covers
17:30 - it but you see that the border is
17:32 - basically here so the Border goes out
17:36 - the box shadow box shadow goes in and
17:40 - because we have different radiuses on
17:42 - these different game borders without the
17:45 - Box Shadow it would basically give a a
17:48 - little gap between one and the other so
17:51 - that's why we're adding a box shadow in
17:53 - addition to a border but I can show you
17:55 - that and then you'll see why so let's
17:58 - just call copy this whole game border
18:00 - one down so shift alt down or shift
18:04 - option down if you're on Mac and you can
18:08 - hit that twice and I'm just going to
18:09 - copy that
18:11 - code so let's say game border two and
18:15 - game border three hit
18:18 - save and now let's alter it so it's the
18:21 - correct colors so here it's going to
18:25 - be um let's see a
18:29 - BB
18:30 - 78
18:33 - a and we're going to give that the same
18:35 - color here A B B 78 a and the third one
18:41 - is going to
18:43 - be 8 B 9 66 C and the same color for the
18:50 - Box
18:52 - Shadow there we go hit save now we can
18:56 - see the difference between them so now
18:58 - let me me remove the Box
19:02 - Shadows like so by commenting them out
19:04 - hitting save and that's here you can see
19:08 - why we are adding those box Shadows
19:11 - because we're avoiding that little Gap
19:14 - there because these have different
19:16 - border radiuses if they had matching
19:19 - border radiuses but they don't and we
19:21 - don't want to have it either because
19:23 - that's the visual aesthetic that gives
19:25 - it that more uh cartoony and
19:29 - Vibe so let's comment that back
19:32 - again but we're going to change the um
19:36 - the different properties here in game
19:38 - border 2 The Box radius is going to be
19:40 - 26
19:42 - pixels in game border three the Box
19:45 - radius is going to be 20
19:48 - pixels like
19:51 - so and in game border two it's going to
19:55 - be for the Border it's going to be not
19:58 - 10 pixels but
20:00 - 8 and for the third one it's not going
20:03 - to be 10 but
20:06 - 30 like so let's see if we can see the
20:10 - allall there we go starting to look more
20:13 - like it and the same here in the third
20:18 - uh game border 3 the Box Shadow is not
20:20 - going to be 10 pixels but five so that
20:23 - is all for the borders now let's move on
20:26 - to the instructions
20:29 - text
20:31 - instruction
20:36 - text then we are going to Let's comment
20:39 - back these in the
20:43 - index.html so control
20:46 - KU that's going to make them show up
20:48 - again so just to see
20:52 - them then we are going to position
20:57 - it we're going to position it
21:00 - absolute like
21:02 - so we're going to position it from the
21:06 - top
21:10 - 60% we are going to give it the color of
21:14 - #
21:17 - 333 we are going to give it a
21:21 - width of 300 pixels which makes it also
21:26 - um fold under each other
21:29 - we're going to text align it to the
21:33 - center we are also going to text
21:37 - transform this to capitalize to
21:41 - capitalize each
21:43 - word we're going to give it a padding of
21:46 - 30
21:48 - pixels and we're going to give it a
21:50 - margin of
21:53 - zero these are all just simple stylistic
21:57 - choices just to to make it look good uh
22:00 - it's not still not looking good because
22:02 - we have this snake image here that is
22:04 - still positioned relative to the other
22:07 - elements whilst the positioning of
22:09 - absolute kind of frees it to be just
22:12 - positioned within the
22:15 - frame so now we're going to Target the
22:18 - scores as well that's our two scores up
22:25 - here we are going to say display of
22:30 - flex and then we are going to justify
22:33 - the content to
22:36 - space between like so then we are going
22:40 - to Target the
22:44 - score and we're going to give it a
22:48 - color of hasht
22:52 - ABB
22:56 - 788 gives us that nice
23:01 - green then we are going to Target both
23:04 - score
23:06 - and
23:07 - high score capital
23:10 - S and we're going to give it a font size
23:14 - of 40
23:16 - pixels we're going to give it a
23:19 - font
23:21 - weight of
23:22 - [Music]
23:24 - Boulder and we're going to give it a
23:26 - margin
23:28 - of 10
23:30 - pixels and
23:32 - zero hm why is
23:36 - the they should not be so score should
23:40 - be on this side and high score should be
23:42 - here but it's not happening so this
23:44 - scores here is not targeting
23:47 - properly let's see
23:50 - class ah I see I think yeah okay so this
23:56 - is a class as we can see here class
23:59 - scores and we have defined it as an ID
24:02 - here so let's just remove the hashtag
24:04 - and another the
24:05 - dot and that solves it there we
24:08 - go looking way way better and as
24:11 - intended now let's target only the high
24:15 - score again remember capital S we're
24:19 - going to give it a color of
24:22 - Hash
24:26 - d8 D D
24:29 - CA like so bit more whiter but still on
24:33 - the green
24:35 - scale and we are going to give it a
24:38 - display for now of none cuz until we
24:41 - start the game the first time and
24:43 - actually um hit into something so we can
24:46 - save the score we had we're going to
24:49 - kind of remove the high score to give
24:52 - more of a visual um um element to it so
24:56 - there's something new happening once you
24:58 - actually have played the game then we
25:00 - are going to Target the game border 3
25:04 - together with the logo and we're going
25:07 - to give both of them a background color
25:11 - of hasht C4
25:18 - cf3 starting to look good then we are
25:22 - going to Target the
25:25 - snake and we're going to give it a
25:27 - background color we're not going to be
25:29 - able to see this yet now but uh we're
25:31 - going to see it soon once we start with
25:33 - our JavaScript 41 41
25:36 - 41 actually we have that already here so
25:40 - we don't need that let's remove
25:43 - that we're going to give it simply a
25:46 - border of #
25:50 - five A5 A5 a one pixel and that's going
25:56 - to be dotted there then we're are
25:58 - targeting the snakes
26:00 - food and that is going to have a
26:02 - background
26:04 - color of
26:06 - hhde
26:09 - DDE as well as a
26:12 - border of #
26:17 - 9995 pixels and
26:21 - solid and then lastly in the CSS we're
26:25 - going to Target the logo and we are
26:28 - going to position it absolute straight
26:32 - in the
26:33 - middle H we did we
26:36 - add we didn't add the class in the HTML
26:39 - so go to the HTML and then the image
26:43 - we're going to give it a class of logo
26:46 - sorry an ID of
26:48 - logo save that and then we see we have
26:52 - something looking better here now we are
26:56 - ready to move on to our JavaScript so
26:59 - let's save the style and the index and
27:03 - then we can open our script file and the
27:05 - first thing we're going to do here is
27:06 - we're going to Define HTML
27:12 - elements that we need from uh the HTML
27:15 - that we're going to manipulate here in
27:17 - the JavaScript so the first we're going
27:19 - to uh get a hold of is the game board
27:23 - because we need it to do anything in the
27:25 - game so we're going to Define that using
27:28 - the cost and we're going to say we're
27:30 - going to give that board as a name and
27:34 - then we're going to use the
27:39 - document property and then the get
27:42 - element by ID
27:44 - method so then here we're saying uh the
27:48 - constant board that is going to be
27:52 - equivalent to if you go into the
27:54 - document that means the entire page here
27:57 - the entire HTML document and then you
27:59 - get the element by the ID and then let's
28:02 - go to the HTML and see what the ID is
28:05 - game board so let's copy
28:08 - that and head over back to our script
28:11 - and then be sure to add some brackets
28:14 - here and gameboard and hit
28:17 - save and then let's log that just to
28:21 - test log board and then let's inspect
28:29 - go into our console and we see that it
28:31 - has successfully logged the game board
28:34 - with a div uh with the ID of game board
28:39 - so it works
28:40 - cool let's remove that and it disappears
28:43 - so then we are ready to start actually
28:46 - the functions of our game so we're ready
28:49 - to start the game well we can't start
28:51 - the game just yet because we first we
28:53 - actually need to draw the map so we're
28:56 - going to create a function
28:58 - called
29:02 - Draw and this essentially is going to
29:05 - draw let's see draw game map it's going
29:10 - to draw the snake and also the
29:13 - food so we are going to first we're
29:17 - going to take the event that if we have
29:20 - started this game before we're going to
29:22 - need to reset the board so we're
29:24 - targeting the board we just made here
29:28 - and we're going to say inner
29:31 - HTML and we're going to say set that to
29:34 - just empty strings so that it's
29:37 - empty so then every time we draw this
29:41 - board is going to be
29:45 - reset then we are going to call another
29:48 - function because we're going to draw our
29:50 - snake so we don't have this function
29:53 - made but that's what we're going to make
29:55 - just now so so next thing we're going to
29:59 - draw
30:02 - Snake by defining this function we just
30:05 - used or called function draw
30:10 - Snake and inside of
30:13 - here we are going to need basically to
30:16 - Define how our snake looks and the way
30:20 - we are doing that is by actually using
30:24 - um an array an object inside of it so if
30:29 - we go back to the top here under the
30:31 - const
30:32 - board we are going to
30:34 - also
30:36 - Define game
30:39 - variables and here we're going to say
30:42 - let snake and we're using the let and
30:45 - not the const because the board stays
30:47 - the same but the snake is going to
30:49 - change in
30:50 - size so let snake equals an array with
30:56 - one object object inside and that object
30:59 - or in fact all the objects that the
31:01 - snake is going to have throughout the
31:03 - game is going to be um positions within
31:07 - the game map so it's going to have an X
31:10 - position that is going to be
31:12 - 10 and it's going to have a y position
31:15 - that is also going to be
31:17 - 10 this essentially if we go back and we
31:20 - inspect our game map
31:23 - here we see that we have a game board
31:26 - and it has 20 rows and 20 columns so the
31:31 - 10th row and the 10th column more oress
31:35 - in the middle is going to be where the
31:37 - snake
31:39 - starts so that is what we have defined
31:41 - here let snake is this
31:46 - position now currently it's only a
31:48 - position it's nothing else there's
31:51 - there's nothing tying it to the game
31:53 - board but we'll get to that so now we
31:57 - are uh continuing with our draw Snake
31:59 - function inside of
32:03 - here we are going to take the snake that
32:07 - we just made and we're going to say four
32:10 - each which is an array method so we're
32:13 - going to say for each of the children it
32:16 - has in here so for everything that is
32:19 - inside this array so now it's just one
32:22 - object so that's going to be for each
32:24 - object which is just one
32:27 - for
32:29 - now we're going to say for all for all
32:32 - those segments for each segment do
32:35 - something we're going to call an arrow
32:39 - function and inside of here we're
32:41 - basically running some code on every
32:45 - single element that is inside of the
32:47 - snake so at the start of the snake is
32:49 - just one dot so what are we going to do
32:52 - well we're going to define a new const
32:53 - here we're going to say snake l
32:57 - element is equal to
33:01 - create
33:03 - create
33:05 - game element this is something we
33:08 - haven't as a function that we haven't
33:11 - made yet but we're going to make shortly
33:13 - so we're going to say create game
33:16 - element you're going to create a
33:20 - div and then that div is going to have
33:25 - the snake class
33:27 - let's also go to view and word wrap like
33:32 - so so basically this function that we're
33:36 - going to create is going to be
33:38 - responsible for creating every snake
33:41 - element and for giving it the snake
33:43 - class it's going to be a div with a
33:46 - snake class that we have already styled
33:49 - here in our CSS that has a border and
33:52 - the background
33:54 - color and that essentially gives the
33:57 - illusion in a way that there is a snake
33:59 - on the board here so before we move on
34:01 - here and do something with the snake
34:03 - element let's actually make that
34:06 - function so it's going to be the
34:10 - function that is responsible for
34:11 - creating a snake and or or food Cube or
34:20 - div so that's going to be the
34:23 - function create game element
34:28 - and it is going to take uh an
34:31 - argument tag and it's going to take
34:35 - class
34:37 - name so as we can see here create G
34:41 - element we're giving it a div and we're
34:43 - giving it the class name snake so that's
34:46 - the tag is a div and the class name is
34:48 - the
34:50 - snake and then we're going to say
34:54 - const
34:55 - element
34:58 - is equal to document dot
35:03 - create
35:04 - [Music]
35:07 - create
35:09 - element like
35:11 - so
35:14 - tag so inside of the create G element we
35:17 - are creating a new constant element that
35:20 - is using the same way to Target the the
35:25 - HTML but here instead of targeting an
35:27 - existing element by ID like we did here
35:30 - we're actually just creating a new uh
35:32 - HTML element inside of our JavaScript
35:35 - that's what this inbuilt method
35:39 - does and we are saying that you should
35:42 - create a tag and the tag is whatever is
35:45 - sent in here in this
35:47 - position and we can see here that the
35:50 - div is sent in so here B essentially
35:52 - what is saying here is document create
35:54 - element div when it's used like this
35:56 - this but if we used it somewhere else or
35:59 - if we change that to P that would be a
36:02 - paragraph that would be created then we
36:05 - are going to go into the element that we
36:08 - just created we're going to go to the
36:11 - class name of the element and we're
36:14 - going to give it the same as class name
36:17 - so this might be a bit confusing because
36:20 - this is what we call the um argument
36:24 - here in the the function but it's also
36:27 - the same name as what the actual um
36:31 - property on this element is so class
36:33 - name is also the inbuilt definition of a
36:37 - just simple class which is what we use
36:39 - in um
36:43 - HTML but essentially what we're doing
36:45 - here is we're taking this snake here
36:48 - inside of the great game element and
36:50 - we're adding that to the div that we are
36:54 - creating as the class so what this does
36:56 - is creates a div with the class name of
37:01 - snake and then we need to also return
37:05 - this element that we just
37:07 - made like
37:09 - so so now con snake element is
37:14 - equivalent to a div with a class of
37:18 - snake then we can move on inside of the
37:21 - draw Snake function so the next thing
37:24 - we're going to do then is we're going to
37:26 - call another uh function that we haven't
37:29 - made yet so it's going to be set
37:34 - position and here
37:37 - oops set position is also going to
37:41 - basically take similar arguments snake
37:45 - element and also segment let's scroll
37:49 - down and create that set position
37:52 - function what this set position is going
37:54 - to do is going to set
37:57 - the
37:58 - position of the
38:02 - snake or the
38:05 - food so once we've made it it's going to
38:07 - actually set it on the game
38:12 - board or actually Define the position
38:15 - it's going to have on the game board so
38:18 - we're going to create that set
38:22 - position and that's going to take the
38:25 - arguments of
38:28 - element as well as position and inside
38:31 - of there we're going to take the element
38:34 - we're going to go into the style of it
38:37 - and we are going to say grid
38:41 - column is going to be equal to
38:45 - position
38:47 - X so essentially what we're doing here
38:51 - we see that we are using the set
38:53 - position here we have created the snake
38:55 - element we created create a div with a
38:58 - class of snake then we're sending that
39:01 - into set position and that's the element
39:04 - here so here we're we have a div class
39:08 - snake I'm going into its style we're
39:10 - going into this grid column which is a
39:14 - CSS uh property and we're setting that
39:17 - equal to position dox so what is
39:21 - position well here we're sending in
39:25 - segment and segment if you remember is
39:28 - for each segment here that's basically
39:31 - every single object here that is a
39:35 - coordinate inside of the snake so as the
39:38 - snake
39:39 - grows basically it's going to have many
39:41 - of these uh object inside but at the
39:44 - start it's just X10 y10 so that's what
39:48 - we are sending in here so position X
39:52 - means this position here 10
39:57 - because position is
40:01 - this and that is this segment and
40:05 - segment is simply
40:08 - this so segment
40:13 - X segment
40:16 - y position
40:19 - X segment X okay I hope that makes sense
40:24 - um we are going to see that soon in
40:27 - action and then it's going to be more
40:29 - clear to see what is going on we also
40:31 - need to set the element.
40:35 - style grid
40:38 - row and then we set that to position
40:42 - y so that we both have the X which is
40:46 - the horizontal coordinate and also the y
40:50 - coordinate which is the vertical now
40:53 - let's actually see how this works uh in
40:57 - practice so now let's actually go to the
40:59 - draw Snake function under set position
41:03 - we are going to Target the
41:05 - board we are going to append child we're
41:09 - going to actually take the board element
41:11 - the HTML board here and we're going to
41:13 - add the snake that we just
41:15 - created snake element like
41:19 - so now if we actually call this function
41:23 - draw we should be able to see our snake
41:29 - element
41:31 - so
41:33 - testing draw
41:37 - function draw we're not going to call it
41:40 - like this but just to test if it works
41:43 - and then let's also remove our two texts
41:47 - here so we can
41:49 - see like so there we go there's our
41:52 - snake let's go back to the script let's
41:55 - comment out our draw
41:57 - function there is no snake and once we
42:00 - call the
42:01 - draw we see in the game board we have a
42:05 - div class snake and look at the style
42:09 - here if you can read that it's small I
42:11 - know but if you can look it there has
42:13 - style grid area 10 * 10 if I now edit
42:18 - this in the element dot style
42:21 - here and I change that to let's say two
42:25 - you see that it goes here
42:27 - one here 2 3 4 and it goes gradually
42:33 - down if I give it a one
42:38 - two if I give it a 20 it's at the end 18
42:44 - so that is what we have been positioning
42:48 - here you can also do that directly in
42:51 - the JavaScript if we change that to 20
42:54 - and 20 that should be the bottom right
42:59 - like so and
43:01 - 120 should be the bottom uh left like
43:08 - so so I hope it makes a bit more sense
43:11 - and pat yourself on the back we just
43:13 - made our first snake element we made the
43:16 - snake head so now we can actually remove
43:21 - this I'm just going to comment it out
43:22 - for now and we are going to create our
43:26 - actual food as well so
43:29 - draw
43:33 - food like so inside of the draw food
43:37 - we're going to create a
43:39 - const called food
43:43 - element which is going to be equal to
43:46 - using that create game element function
43:49 - again we are going to create a div but
43:53 - this time instead of snake it's going to
43:55 - have a a class of
43:57 - food which we are of course targeting in
44:00 - our CSS then we are going to set
44:02 - position so this is as you can see it is
44:06 - similar to the draw Snake uh
44:10 - function so set
44:13 - position we are also using the already
44:16 - made uh function we're going to give it
44:19 - the food
44:22 - element as the element and then for the
44:25 - position we're going to give it
44:28 - food which we haven't made yet so let's
44:31 - make that if we scroll back up under let
44:36 - snake we're going to say let
44:39 - food equals and because food is going to
44:43 - be automatically generated it's not
44:46 - going to have the same position every
44:48 - time cuz that would be boring wouldn't
44:50 - make a very fun game we are going to
44:53 - call a function here to give it a
44:55 - randomize
44:57 - position so generate
45:02 - food is going to be called here we have
45:06 - not created this so let's copy that
45:10 - name and create a function generate food
45:15 - and let's just leave that blank for
45:17 - now continuing inside of the draw food
45:21 - function we also need to actually append
45:25 - this food to the actual board so board
45:30 - append
45:32 - child and then food element like so so
45:37 - it's pretty much the same setup as in
45:39 - the draw
45:43 - Snake now in actually to actually get
45:46 - this food position uh cuz now it's not
45:50 - going to work it's not getting the
45:51 - function is not returning anything so
45:54 - let's move on to our gener generate food
45:58 - function let's also just comment here
46:00 - this is draw
46:04 - food
46:06 - function inside of our generate food
46:09 - function we are going to create a new
46:11 - constant called X which is going to be
46:15 - its X position we are going to use the
46:17 - inbuilt math object here which has some
46:21 - cool inbuilt methods like random which
46:25 - gives us a random number uh in
46:29 - JavaScript so this is currently just
46:32 - going to give us math random is going to
46:34 - give you a random number between zero
46:37 - and up to one not including one though
46:40 - so it's going to be 0.1 0 uh 39 0.
46:48 - 99.9999 so everything apart from one so
46:52 - 0 to up to one then we are going to
46:57 - times that times 20 we could do that
47:01 - like uh put 20 here because we know the
47:04 - grid size is 20 but let's rather go up
47:08 - to our game variables and let's just
47:11 - Define a new constant
47:14 - here call it grid size equals
47:20 - 20 and then we can use that here instead
47:23 - so if we want to change the grid size
47:24 - later we can easily do that here and
47:27 - then because we are getting this math
47:29 - random you know up from zero we don't
47:32 - want a zero position cuz the grid starts
47:35 - at one right so we're just going to take
47:38 - all of
47:40 - that and we are going to plus
47:45 - one but then we also have a new problem
47:48 - is that this is basically giving us um
47:51 - not whole numbers it's giving us commas
47:55 - so we need to also use something called
47:58 - math floor on it which basically takes
48:03 - whatever this expression is and it
48:05 - floors it so if it's
48:09 - 1.99 it's going to turn into one if it's
48:13 - 3.20 it's going to turn into three so
48:16 - that's what the math floor
48:18 - does and the one at the end is simply to
48:22 - raise this from zero to start from one
48:26 - all the way up to 20 so that gives us
48:29 - the X it's going to be the exact same
48:32 - thing for the Y so let's just copy that
48:37 - call it Y and then we are going to
48:41 - return this as an
48:43 - object X and
48:47 - Y and save that so now generate food
48:51 - returns a random coordinate in X and Y
48:54 - position let's draw the function again
48:58 - let's uncomment the draw function and
49:00 - let's see let's see generate food are we
49:04 - actually using it
49:05 - anywhere I see we have not added the
49:09 - draw food uh function here
49:13 - so we haven't actually called this
49:15 - function ever we're calling the
49:18 - draw but we're not calling the draw food
49:22 - inside of it so draw food
49:26 - like
49:27 - so there we go now we have our snake if
49:32 - I hit save again here it should as it is
49:36 - doing giving us a random position for
49:39 - our food uh di here how cool is that so
49:44 - now when we start a game it has a random
49:47 - position well snake is always at 10 10
49:51 - okay now let's move on to actually
49:53 - getting this snake to move let me just
49:56 - comment here generate food it's a bit
50:01 - self-explanatory but we've started
50:03 - commenting every function so we might as
50:05 - well continue next one is going to
50:08 - moving the
50:11 - snake so function
50:15 - move it's going to be called and then
50:18 - inside of that function we're going to
50:20 - create a new constant we're going to
50:23 - call it head and this is basically going
50:26 - to be the head of the snake but it's not
50:28 - the direct head uh it's not actually
50:31 - this object here the first object we
50:35 - don't want to manipulate that uh we want
50:37 - to make something that is called a
50:39 - shallow copy because if we don't then
50:44 - we're basically going to run into some
50:46 - problems very usual in JavaScript where
50:48 - you don't actually want to alter the
50:50 - original object or the original array we
50:53 - want to use the position of the head but
50:56 - we don't want to actually alter it so we
50:58 - are going to call the spread operator on
51:01 - the
51:02 - snake zero which is going to be the head
51:05 - here cuz in an object it's zero index
51:09 - base so the first object or in an array
51:11 - sorry the first position in the index is
51:14 - zero so we're getting a hold of the
51:17 - snake zeroth position which is 10 10 and
51:21 - we're simply spreading it into this new
51:23 - object this is basically a copy of this
51:27 - but it is not changing this otherwise we
51:29 - could just call it like
51:31 - this but if you try doing that you're
51:34 - going to see that it's not working and
51:36 - you're going to run into some uh weird
51:39 - uh Behavior basically then we're going
51:42 - to create a switch statement
51:46 - here where we are taking the
51:50 - direction of the
51:53 - snake now we haven't made this yet we're
51:56 - going to create it now and the direction
51:58 - in the start if we go up to the game
52:00 - variables here
52:03 - let
52:04 - direction is going to be by default to
52:07 - the
52:08 - right let's scroll back down so we're
52:12 - taking the direction we're running a
52:15 - switch case on it and inside of the
52:18 - switch case we're going to have
52:19 - different uh cases so if the case is
52:23 - like it is now
52:26 - let's see
52:28 - right then we're going to take the
52:32 - head and we're going to say take the
52:35 - head take its X
52:38 - position and you are going
52:41 - to iterate that or you're going to
52:44 - increment that what that mean means is
52:47 - you're going to increase it by one so if
52:50 - you press
52:52 - right you're going to go into the x
52:54 - coordinate that's here that's X and
52:57 - you're going to go one up so that's from
53:00 - this place to that place which kind of
53:04 - fits if you're going right you want to
53:05 - go right so that is what this is doing
53:08 - so the direction by default is going to
53:10 - start moving the snake in the right
53:13 - direction we need a couple of more cases
53:14 - though well we need three
53:16 - more so let's
53:19 - just copy those
53:23 - in so if the case is up we're going to
53:27 - actually go to the y
53:29 - coordinate and we are going to go Y and
53:34 - decrement because the position up here
53:37 - is
53:38 - one and if we go if we press actually
53:42 - from the start it's 10 if we go up we're
53:45 - going closer to one so we actually want
53:48 - to go down in uh numbers so that's why
53:52 - this might seem a bit counterintuitive
53:54 - but it makes sense then we're going to
53:57 - take that down then it's going to go Y
54:01 - ++ and then left is going to be x -
54:06 - minus now we have the start of our move
54:09 - function but we're missing something
54:10 - here so basically here we
54:13 - are um moving the head but here we are
54:17 - actually taking the head we are un
54:20 - shifting
54:22 - it and we're giving it the head
54:26 - so what unshift does is it basically
54:28 - adds a head object to the beginning of
54:32 - the snake array so this head here which
54:36 - is a copy of the original
54:40 - head it is basically putting that at the
54:43 - start of the snake array here so now it
54:47 - only has
54:49 - one um object here but when we for
54:53 - example go uh uh up we are going to be
54:58 - pushing or un shifting a new uh object
55:03 - inside of here so up would be X same y
55:08 - it would be nine so that's what happens
55:10 - if you would to press up from the start
55:13 - of the game and that is what we are
55:18 - doing here uh after the snake unshift we
55:22 - want to also take the snake
55:26 - pop like
55:29 - so because what we are doing here when
55:32 - we're moving as you might have noticed
55:34 - if we're un Shifting the head we're
55:36 - adding a new part to the snake we are
55:41 - actually just elongating the snake so if
55:43 - we were to move 1 2 3 4 you would see
55:47 - that the snake doesn't move it just
55:48 - grows in that direction so that's why
55:51 - we're also taking the snake and we're
55:53 - calling pop on it because as you can see
55:55 - here it removes the last element from an
55:57 - array so when we go right let's say we
56:01 - are adding a piece here but we're
56:04 - removing the last piece so it gives this
56:07 - illusion we're actually just building a
56:09 - snake a new elements in One Direction
56:12 - and we're removing the elements behind
56:14 - it so it gives the illusion of movement
56:17 - but actually it's just being rebuilt and
56:19 - destroyed uh one after the other now
56:22 - let's simply test this function test
56:28 - moving so we're going to call a set
56:34 - interval uh in build
56:38 - function because we want to move more
56:41 - than
56:43 - once and we want to call the move
56:47 - function that we just
56:50 - made so that's going to move first
56:55 - and then we want to draw
56:58 - again cuz uh if we don't draw then we're
57:01 - not going to see the new changes so then
57:05 - draw
57:06 - again new
57:11 - position and let's also comment that out
57:14 - like
57:16 - so and then finally we also need to have
57:20 - a time on this so let's give it a 200
57:25 - milliseconds and as you can see now when
57:27 - I start the game and I reload for every
57:32 - 200 M seconds or 1/5 of a second the
57:36 - snake is moving in the direction of
57:40 - Direction which we have put to right
57:43 - let's change that to
57:46 - up as we can see it goes up and then
57:49 - down let's
57:52 - say working
57:56 - left
57:57 - working so you can choose whichever you
58:00 - want to have by default I'm just leaving
58:02 - it as a right so cool our moving
58:05 - function works so now we are actually
58:08 - ready to also make the
58:10 - snake uh become bigger if it hits the uh
58:16 - food and it's actually quite simple and
58:18 - elegant solution so as I told you if I
58:22 - uncomment this now look what happens
58:25 - the snake by default just grows because
58:29 - that's actually the move is actually
58:31 - more of a grow function it is that we
58:34 - remove the last part so the only thing
58:37 - we need to uh do to make the snake grow
58:41 - when it hits the uh food is to just
58:45 - remove this function when it hits the
58:47 - same coordinates as the food element so
58:51 - let's just take this away let's uh
58:54 - comment that out so we can uh see what's
58:57 - going on let's go back inside of the
59:00 - move
59:02 - function under this snake pop we're
59:04 - actually going to comment that
59:07 - out we are going to create an if
59:09 - statement and if
59:12 - head remember that's what we defined
59:14 - here as the shallow copy if the head x
59:18 - coordinate is equal to the
59:21 - food x coordinate and as you can
59:25 - remember the food we have here randomly
59:28 - generated that's this coordinate
59:31 - here so if those two are
59:34 - equal
59:36 - and head Y is equal to food
59:43 - y so basically if they're on the same
59:47 - spot then we're going to run some code
59:50 - so
59:51 - then we're going to say food
59:56 - equals generate food because that means
59:59 - that we have run into the food so we
60:01 - need a new food placed on the
60:04 - map so then that would happen so if we
60:07 - hit it it's going to create a new random
60:10 - location for the food then we also want
60:13 - to uh clear the interval it's another
60:16 - inbuilt method or
60:20 - function because otherwise we're also
60:22 - going to run into some um issues and
60:25 - it's basically we just want to reset the
60:28 - movement and the whole uh move function
60:31 - here otherwise uh a lot of bugs are
60:34 - going to
60:36 - happen so we're
60:38 - clearing clear past interval then we
60:42 - want to go into the game interval which
60:46 - we have not defined
60:49 - yet we going to go back up to our
60:52 - variables we are going to Define let
60:57 - game
60:59 - interval and we're just going to Define
61:01 - it that it
61:04 - exists and we're going to go down here
61:06 - it's keeping track of when we are
61:08 - running the our game basically so we're
61:11 - going to take the game interval we're
61:12 - going to set it to a new interval cuz we
61:15 - already had paused the other
61:18 - one and here we are going to
61:22 - run some code we're going to run a new
61:25 - move we're going to reset that we are
61:28 - going to also run a new draw and reset
61:32 - that and then we are going
61:35 - to add that we're going to add the
61:39 - game
61:41 - speed
61:43 - delay because instead of uh setting it
61:46 - to 200 here we might want to change it
61:49 - which we actually do when we eat a food
61:52 - we are decreasing this delay and thereby
61:55 - increasing the game speed so we also
61:58 - need to Define this let
62:02 - game speed delay and we're going to
62:05 - start with 200
62:08 - milliseconds so then scrolling back
62:12 - down then if our
62:16 - head is on the same position as the food
62:20 - we generate a new food and we then skip
62:24 - the snake
62:26 - pop so snake pop is not happening here
62:29 - and
62:30 - thereby this one uh div snake is going
62:34 - to turn into a two div snake it's going
62:36 - to basically turn into the
62:39 - position uh of the food else we are
62:43 - going to run the snake
62:47 - pop so I hope that makes sense basically
62:50 - if we don't run into food we're going to
62:53 - be continuously building building the
62:54 - snake One Direction and then we're
62:57 - moving the snake back or the tail and
63:01 - then if we hit the food we're just going
63:03 - to not remove the tail and therefore the
63:06 - snake is going to grow now we're going
63:08 - to move on to actually creating our
63:11 - start game
63:13 - function which is going to be called
63:17 - originally start game inside of the
63:20 - start game
63:23 - function we we are going
63:25 - to use the game started variable that we
63:31 - are going to create and we're going to
63:32 - set it to true so let's scroll
63:35 - up and let's create let
63:40 - game started and initially it's going to
63:43 - be set to false like
63:46 - so and then when we start the game it's
63:49 - going to be set to true so here we're
63:51 - going to basically keep track
63:54 - of a running game that's going to be
63:58 - very
63:59 - useful um to enable us to basically if
64:03 - we want to start the game we want to hit
64:05 - enter and we don't want to be able to
64:08 - start the game over again while the game
64:10 - is running things like that so it's very
64:12 - useful to keep track of if it's running
64:14 - or
64:15 - not then we want to take the
64:21 - instruction we haven't defined those
64:23 - either let's scroll up and let's get a
64:26 - hold of
64:28 - const
64:31 - instruction text
64:35 - equals
64:37 - document get element by
64:40 - ID and we are going to Target the
64:45 - instruction
64:46 - text let's just see if we gave that
64:50 - correctly let's also uncomment them in
64:53 - the JavaScript code
64:55 - so now we see that they are taking the
64:59 - space and we want to actually hide them
65:02 - when we start the game so yeah
65:04 - instruction text let's just copy that
65:06 - for safety and paste that in there we
65:11 - also want to define a
65:14 - const logo
65:19 - document equals
65:22 - document get mement by
65:25 - ID and that's going to be
65:29 - logo like
65:32 - so now we scroll down and we can use
65:36 - them here in the start game so
65:39 - instruction text we are going to go into
65:44 - that
65:46 - style and
65:49 - display and we are going to set that to
65:53 - none
65:55 - when we start let's also shift all down
66:00 - and we're going to do the same with the
66:03 - logo so when we start the game we're
66:06 - going to hide these two and basically
66:09 - we're going to get then view the snake
66:11 - and the food again
66:15 - unobstructed then we are also going to
66:18 - go to the game interval and we're going
66:20 - to set the new
66:23 - interval
66:27 - and when we start we're going to call
66:29 - the
66:31 - move we are going to call the check
66:36 - Collision function that we haven't made
66:39 - yet
66:44 - collision and we're going to also call
66:47 - the
66:48 - draw and that is also going to be run on
66:51 - the game speed delay
66:54 - like so let's comment out the check
66:57 - Collision for now that is the function
66:59 - we're going to create to basically see
67:01 - if the snake is running into the corners
67:03 - or into itself but let's not get ahead
67:06 - of ourselves we're going to create that
67:08 - later so for now it's just comment that
67:10 - out and let's also we are calling draw
67:14 - here in our start game let's go up to
67:18 - line
67:19 - 45 let's um comment that out
67:24 - like so then we are ready to actually
67:28 - make to start our game so here it says
67:31 - press space bar well if we do that
67:33 - nothing happens because we're not
67:34 - listening for the space bar that's what
67:37 - we're going to create now we're going to
67:40 - create a key press
67:45 - listener event
67:51 - listener like so
67:54 - and that is going to be function
67:58 - handle key press is taking an
68:04 - event and inside of
68:08 - here we are going to call the start game
68:12 - but not um at any point so if we press
68:17 - up Arrow we don't want to start the game
68:19 - we just want to move the the snake so if
68:25 - the
68:27 - game started so if the game is not
68:31 - started with the exclamation
68:33 - mark and the
68:37 - event. code
68:40 - equals
68:42 - space then we want to let's see like so
68:48 - then we want to start the game called
68:52 - that function and this doesn't work for
68:56 - every browser so we also need to
68:59 - call let's
69:02 - see
69:04 - or like so and let's wrap
69:09 - these in uh in parentheses like so and
69:15 - then we
69:16 - can create another one here let's just
69:19 - copy
69:22 - this so if game started an event code
69:26 - equals space or if game hasn't started
69:29 - an
69:30 - event
69:32 - key is just an empty space like so so
69:36 - that's going to basically handle um
69:39 - every browser's um handling of space key
69:44 - if the game hasn't started and we press
69:46 - the space then we're going to start the
69:49 - game else we are going to handle the
69:52 - arrow keys so another switch case
69:56 - here and we're going to handle the event
69:59 - key because that's the event we're
70:02 - getting in here that's the key we press
70:04 - first case is going to be Arrow up so
70:09 - these are the basically the shorthand uh
70:12 - phrases for the different Keys they're
70:17 - inbuilt and let's see we want to handle
70:21 - it like this call on then we're going to
70:25 - take the
70:26 - direction and we're going to set that to
70:29 - up so remember the direction is what we
70:32 - have defined here it's by default right
70:35 - but if we press now we're listening to
70:37 - key presses if we press up it's going to
70:40 - change to up and that is going to affect
70:44 - how the move function moves and it's
70:46 - going to change the direction of the
70:48 - snake so here we are basically listening
70:50 - for the handle key press and that sets
70:52 - the chain of motion for the snake
70:54 - Direction and then we are going to break
70:57 - after that then we're going to copy this
71:00 - down one 2 three times
71:04 - arrow
71:06 - down that is going to change it to
71:11 - down
71:13 - arrow
71:16 - left and that is going to be left and
71:19 - arrow right that is going to be
71:24 - right like
71:26 - so and we're breaking out of that switch
71:29 - case after each uh case then we have our
71:34 - handle uh key press function ready now
71:36 - we need to call it so now we're just
71:38 - going to go to the document we're going
71:41 - to add an event
71:43 - listener and we're just going to listen
71:45 - to that all the time I'm going to listen
71:48 - to key press actually key
71:52 - down and for every key down we're going
71:55 - to call the handle key press so when we
71:59 - that's the event we take in
72:02 - here and we're going to call handle key
72:06 - press so if we have clicked something or
72:09 - press something that is the space it's
72:11 - going to call the start game if we click
72:13 - something else then we are going to move
72:17 - the um the snake so let's
72:21 - try enter
72:24 - it
72:25 - works how cool reload enter it works and
72:30 - now I am also hitting the
72:34 - arrow
72:36 - keys how cool is that now we have a
72:39 - snake that is moving let's see if we can
72:42 - eat and there we go oh we are speeding
72:46 - up by a
72:49 - lot that is a bug but we are moving
72:52 - around around and we are increasing our
72:56 - size as
72:58 - well sped up a lot it's hard to eat the
73:01 - second one in any case we have
73:03 - successfully started the game we have
73:06 - successfully changed the direction of
73:09 - the uh snake and we are making it grow
73:13 - by eating food we have a bug somewhere
73:16 - where it's actually increasing the um
73:19 - speed drastically so let's go to our
73:24 - uh start game let's
73:26 - see no that's uh
73:30 - correct maybe we have something in
73:34 - our um when we eat it changes when we
73:40 - eat so here we're also going to call the
73:45 - uh
73:46 - check
73:49 - Collision
73:52 - function
73:54 - like so we're just going to comment it
73:56 - out for
73:59 - now so be sure to add that uh in the if
74:03 - statement in the move so game interval
74:05 - we're setting an interval we
74:09 - are let's see we're calling the move
74:12 - we're calling the check Collision we're
74:13 - calling draw on the game speed
74:18 - delay else no no it looks good I wonder
74:22 - if we are
74:25 - simply
74:28 - um unknowingly to us we're altering this
74:31 - game speed delay so let's
74:34 - just um go into
74:38 - here into the if statement here we're
74:41 - going to create a new
74:44 - function under or over clear interval
74:47 - we're going to call
74:50 - increase speed function
74:54 - and we're going to create that right
74:57 - away so under our event listener going
75:01 - to call the function
75:05 - increase increase
75:09 - speed and
75:17 - then we're going to
75:19 - log
75:22 - the
75:23 - game speed
75:26 - delay let's see now what happens if we
75:31 - start it's 200
75:36 - okay 200 okay so it's not to do with the
75:42 - game
75:45 - speed
75:51 - H let's Try by adding the if statement
75:57 - if game speed
76:00 - delay is bigger than
76:04 - 150 then we are going to decrease
76:09 - it like
76:12 - so by
76:17 - five let's start
76:21 - again still speed speing
76:24 - up very
76:27 - fast
76:30 - H let's comment out that start again
76:35 - it's 200
76:37 - 195 so it has nothing to do with the
76:39 - game speed delay at least uh I see what
76:42 - we did wrong okay here in the clear
76:46 - interval we are actually not clearing
76:49 - anything we need to clear the actual
76:51 - interval game interval there we go now
76:56 - let's see if we start the
77:00 - game ah there we go now we're also
77:04 - logging the
77:06 - speed as we can
77:09 - see we are
77:12 - successfully eating food growing the
77:15 - snake and it is
77:17 - not um increasing in speed uh
77:22 - drastically it is increasing in speed
77:24 - normally as you can see going from 200
77:27 - to now
77:32 - 155 which is a way more uh normal and
77:35 - easier way to play the
77:37 - game and now we've hit
77:40 - our uh only condition in our speed uh
77:44 - like increase speed function which is
77:47 - 150 so it's not increasing
77:49 - more also you can see we don't have the
77:52 - Collision function working so we can
77:54 - just walk through our own snake our own
77:57 - body we can hit the corners nothing
78:00 - really happens then down again into the
78:04 - increased speed function let's add an
78:08 - else if statement here else if game
78:13 - Speed game speed
78:18 - delay is bigger than 100
78:25 - then we're going to run uh
78:28 - different uh let's see game speed delay
78:31 - is going to be minus equal to 3 so
78:35 - basically we're going to decrease the
78:38 - speed increase the faster it gets so
78:42 - that it's not going to get to a point
78:45 - too quickly where it's unplayable
78:48 - basically but it's still going to
78:49 - increase incrementally then let's copy
78:53 - this paste that
78:55 - there two more
78:58 - times for the 50 Mark and also the 25
79:04 - Mark which is starting to become very
79:06 - very fast so one and
79:11 - two now if we save and we restart the
79:14 - game we can
79:17 - see that when we hit 150 it is going to
79:22 - be
79:24 - um decreasing by three instead of five
79:27 - here we go when we hit under 150 we are
79:31 - going to 147 144 141 so uh decreasing by
79:37 - three instead of five which is exactly
79:40 - what we have coded right now if you're
79:42 - wondering how I'm resetting the game I'm
79:44 - simply just saving the script file now
79:47 - we can go on to actually make our
79:49 - Collision like check Collision function
79:52 - that we've been using
79:53 - uh in at Le at least two places so check
79:58 - collision and this is going to be the
80:00 - thing that resets the game if we hit the
80:03 - wall or we hit our own body so const
80:09 - head is equal to
80:13 - snake and zero so here compared to the
80:17 - spread operator we have up here we are
80:21 - not uh us using it here we are simply uh
80:25 - say setting it exactly equal to the
80:28 - zeroth index of snake namely the
80:33 - head then
80:35 - if head X
80:39 - position is less than one meaning that
80:44 - it's here is the one meaning is zero
80:47 - it's going to hit the
80:49 - wall
80:51 - or
80:55 - or head
80:58 - X is a larger than grid size which is 20
81:05 - it means it's going to go on the right
81:08 - side over so it's going to hit either
81:10 - here or
81:12 - here so this
81:15 - one or head
81:21 - y
81:25 - is also smaller than
81:29 - one
81:31 - or head
81:34 - Y is bigger than grid
81:39 - size in that case we are going to
81:45 - reset
81:48 - game and that's a function we haven't
81:51 - made yet
81:55 - but that function is going to basically
81:57 - reset our game when we hit uh the
82:00 - borders of the wall now we need to take
82:03 - the we need to check also for the times
82:08 - when it hits itself so here we're going
82:10 - to need a for
82:12 - Loop so four we're going to Define
82:16 - I let I equals one starting at one and I
82:23 - is going to go towards snake.
82:28 - length and then when that happens it's
82:31 - going to increment by
82:34 - one so what that means is we have an I
82:38 - that we just randomly defined as one we
82:41 - just made and I as long as I is smaller
82:45 - than the snake length which is at the
82:47 - start it's just uh
82:50 - one then we are are going to increment
82:56 - it so we're going to go basically
82:59 - through the entire snake length that's
83:02 - the point of this so for every part of
83:04 - the snake we're going to run a piece of
83:06 - code that's the point of the for
83:09 - Loop and then inside of here we're going
83:11 - to have an if statement and we're going
83:14 - to check if head
83:15 - X is equal to
83:19 - snake in the position of I because the
83:23 - position of I is going to be starting
83:26 - with the body and going
83:29 - upwards so if snake
83:32 - i
83:34 - x so here we're checking if the head is
83:38 - the same position of the snake uh body
83:43 - in the E
83:48 - position and the same
83:51 - snake one I equals
83:57 - snake I position and y coordinate
84:02 - because otherwise it might be on the
84:03 - same position in the X Direction here
84:07 - but it might not be in the Y so we need
84:09 - to check for
84:10 - both unless it's uh hitting on both the
84:14 - X and the Y it's not in the same exact
84:16 - position but if it is we're also going
84:19 - to reset the game then we are we going
84:22 - to create our reset game
84:26 - function reset
84:30 - game also let's go and uncomment the
84:34 - check Collis we have let's see by
84:38 - searching for it contrl
84:39 - f we're going to
84:42 - remove those comments
84:46 - here and
84:49 - here there we go now we're using it
84:56 - now we just need to create the reset
84:58 - game function inside of
85:02 - here we are going to
85:05 - call the
85:08 - snake and we are going to reset
85:11 - that to its original uh position
85:16 - x equals
85:20 - 10 we need to create a object in here x
85:24 - = 10 and Y =
85:29 - 10 we're also going to take the
85:33 - food and we're going to reset that by
85:36 - generating the food again
85:39 - randomly we're going to reset the
85:41 - direction to
85:43 - right which was its original
85:50 - position and we're also going to reset
85:53 - the game speed delay to its original 200
85:59 - when that happens when we reset the game
86:01 - we also want to update the
86:05 - score so
86:08 - update
86:09 - score let's make that function right now
86:13 - function update
86:19 - score we're going to create a constant
86:25 - here
86:27 - current
86:29 - score is equal to
86:32 - snake dot length the length of the
86:37 - snake Min - one because the snake length
86:41 - starts at one so we don't want to start
86:43 - the square at one all the time we just
86:45 - want to start it at zero makes more
86:47 - sense but you're free to
86:50 - choose then we want to go go into the
86:53 - score that we have made up
86:56 - here oh we haven't actually we haven't
87:00 - made that yet so let's create a constant
87:03 - score is equal to
87:07 - document dot get element by
87:11 - ID and it's going to Target the score
87:14 - element and here we're going to go into
87:17 - that element we are going to go into the
87:19 - text content
87:23 - and we are going to set that equals to
87:25 - the current score two
87:30 - string and then we are going to pad that
87:33 - to the
87:35 - start with
87:39 - three uh numbers and that's going to be
87:43 - zero so what does this mean well we're
87:46 - basically setting the score text content
87:51 - here equals to the uh snake length and
87:55 - we're turning that into a
87:57 - string so that we can also make that a
88:02 - triple digit number without this PAAD
88:06 - start it would turn it into one it would
88:09 - remove the uh two zeros and turn it into
88:12 - one so this is just simply some flare to
88:15 - make it a triple digit number and start
88:19 - uh counting from the end here which is
88:21 - the P start here it's going to add zeros
88:25 - if the number is not big enough so if
88:27 - the number is 20 it's just going to add
88:29 - one zero if the number is two it's going
88:31 - to add two zeros then we need to
88:33 - actually call this function we're going
88:35 - to go up to our let's
88:38 - see our
88:41 - draw and we're going to call the update
88:44 - score
88:46 - here now if we start the game let's
88:51 - try
88:53 - and there we go we see that we have our
88:55 - score starting to
88:56 - tick how
89:00 - cool now it's starting to become an
89:02 - addictive
89:04 - game okay and let me also just
89:07 - demonstrate if we H remove that and we
89:11 - said two to the pad
89:13 - start let's start the
89:18 - game we see that now we have two numbers
89:21 - in instead of
89:26 - three change that back to three like so
89:30 - but there are more things we want in our
89:31 - reset game we also want to actually once
89:35 - we have hit something we want to also
89:37 - have our high score so we need to also
89:42 - update
89:44 - high
89:48 - score and also stop game
89:54 - so those are two functions we're going
89:55 - to create right
89:59 - now so first let's take the stop game
90:03 - function so stop
90:09 - game and inside of here whenever we want
90:12 - to stop the game we want to actually
90:13 - clear the interval and what interval the
90:17 - game
90:20 - interval
90:22 - then we want to go into the
90:25 - game
90:27 - started and we want to say well now it's
90:30 - not started anymore now it's
90:33 - stopped and then we want to go to the
90:36 - instruction text style
90:40 - display and we want to say that it's a
90:44 - block because before it was
90:47 - hidden and the same with the
90:50 - logo
90:52 - we're going to go into the
90:54 - style
90:55 - display and we're going to say
91:00 - block that's for the Stop game then
91:04 - creating our update high
91:08 - score we want to then call a constant
91:13 - current score similar to earlier we're
91:16 - going to say that it's length actually
91:19 - snake do length
91:22 - minus
91:25 - one then if the current
91:30 - score
91:31 - is
91:33 - bigger than the high
91:39 - score then we want to set the high
91:44 - score to current
91:47 - score now we don't have the score May
91:52 - yet or the high
91:54 - score Let's see we are missing the
91:58 - const
92:01 - high
92:02 - score
92:05 - text equals
92:08 - document get element by
92:12 - ID and that's going to be high score
92:15 - like
92:17 - so now we have
92:19 - that we also need to actually Define the
92:22 - high score in the this is just the
92:25 - element for the text but we also need to
92:27 - define the high score here so under our
92:30 - generate food
92:32 - let high score equals to zero at the
92:39 - start now let's scroll back
92:45 - down so if high score if if current
92:49 - score is bigger than high score
92:52 - that's this one if it's bigger than what
92:54 - we have here it is going to be set as
92:57 - the new high score that's what we're
92:59 - doing
93:01 - here and then we're also going to unhide
93:03 - the high score
93:05 - text text
93:07 - content equals high score
93:14 - to string and it's the same as last pad
93:20 - start
93:22 - and it's going to be three digits and
93:24 - it's going to be with
93:27 - zeros then here we are unhiding it high
93:30 - score text style
93:34 - display and equals to block so now if we
93:39 - start the
93:41 - game and we get a score let's just crash
93:45 - into something we also see that our
93:48 - Collision is working and we crashed and
93:51 - we we had only one in score let's start
93:54 - again and we
93:56 - see so now we have
93:58 - one let's try to get a bit higher number
94:02 - two high score stays the same but score
94:06 - is incrementing
94:08 - three and four and crash and then four
94:12 - is saved here so now we're starting to
94:14 - get the real game elements that want
94:17 - want makes you want to keep playing more
94:19 - and more so now we have most of our game
94:23 - done but I don't know if you
94:25 - see uh when I restart the
94:30 - game you see that
94:34 - sometimes the food is generated here and
94:37 - it doesn't really look good uh like here
94:39 - we want to have the logo we want to have
94:41 - like press space bar this food looks a
94:44 - bit off so the way we're going to do
94:47 - that we're going to scroll up and we're
94:50 - going to fix or tweak speak the draw
94:53 - food function a little
94:55 - bit so where is it draw food here it
94:59 - goes so you know how we have this game
95:02 - started function here well we're
95:05 - basically going to wrap this draw food
95:08 - in that in an if statement so
95:12 - if
95:13 - game
95:15 - started then we are going to allow this
95:19 - uh stuff to happen but but if not well
95:23 - it's not going to
95:25 - happen now draw food is only drawing
95:28 - food if the game is already started and
95:31 - on this screen it hasn't started until
95:33 - we press space bar so now if we start
95:38 - the game over again we can
95:41 - see that the food actually starts dra uh
95:44 - drawing rendering on the page once we
95:47 - have started the
95:48 - game and now it's not going to show up
95:51 - and is never going to show up on this
95:53 - page when we have our logo and our text
95:56 - showing and there we go let's do a final
96:03 - trial I am eating the snake eating the
96:07 - food sorry I am the
96:13 - snake let's
96:16 - see and we are successfully growing
96:23 - let's see if I hit
96:25 - myself then it's game over high score is
96:28 - updated score is
96:31 - reset if I hit the edges same
96:36 - thing great now we can remove this
96:40 - console log as
96:44 - well let's see console log you can just
96:50 - comment out that
96:54 - that is everything for our snake game I
96:57 - hope you enjoyed it I hope you now can
97:00 - also have fun playing this game you can
97:03 - also tweak it further if you want there
97:04 - are many things you could add here you
97:06 - could customize the way the score is
97:09 - counted you could add for example if you
97:12 - are eating food close to the snake body
97:16 - or the edges that could maybe
97:18 - potentially give you more score you
97:21 - could add score a bit depending on the
97:23 - time that you have been playing so the
97:25 - more you play the more score you also uh
97:28 - increase or you could also make it more
97:31 - um Advanced the way the speed is
97:34 - increased maybe also based on the score
97:37 - so there's many things here you could do
97:39 - to increase and further tweak the game
97:42 - to your liking you can also change the
97:44 - style you can change the design of the
97:46 - snake and the food there's many things
97:49 - here you could do and I encourage you to
97:51 - to play around with the uh code that we
97:54 - now have and make it your own as well um
97:58 - I really hope you enjoyed this game uh
98:01 - if you liked uh if you would like to put
98:04 - it uh online and you don't know how to
98:06 - do that then here is a video that
98:08 - explains how to host your game live for
98:12 - free using netlify and I'm looking
98:14 - forward to see you in the next video
98:16 - Until then see you

Cleaned transcript:

improve your web dev skills by coding a retro snake game using HTML CSS and JavaScript you'll learn how to use JavaScript to draw the game board create the snake and randomly generate food make the snake move increase the snake size when it eats and a bunch of other features adamir is great at breaking down concepts for beginners and he teaches this course we are making this retro snake game inspired by the iconic Nokia snake game we will style this awesome retro design using HTML and CSS then we'll set up our game logic we'll draw the game board create the snake and food elements we'll learn how to make the snake move and increase its size when the snake eats as well as increase its speed to make the game more fun and challenging we're also going to learn how to keep score of our snake size as the game progresses and also to track when the snake collides with the walls or itself we are we are also keeping track of the largest our snake has ever been in our high score so when we do lose a game we can keep track of what we need to beat the next time around by the end of this tutorial you will have made the best snake game on YouTube from scratch and you will understand all the JavaScript that makes it run and this video is intended for beginners to JavaScript as I will be explaining all the code we use to make this game take Life by the end you will have learned to create and manipulate HTML elements using JavaScript and you will have learned simple game logic and design and we will be using VSS code as our code editor Google fonts for our retro font as well as an AI generated image for our snake game logo as always you can find deployed game and GitHub repo in the description below if you're ready to make your own addictive version of the very best snake game you will find on YouTube let's get started the first thing we're going to do is open up our vs code open an empty project I am just going to create a new folder on my desktop and I am going to rename that to snake game and I'm going to drag that into vs code so now we have that open in our Explorer the first thing we are making is our index file so new file we're going to create an index.html file and then we are going to write exclamation mark and then we get these shortcuts here with emit abbreviation we're going to hit the first uh the single exclamation mark to give us some boilerplate HTML let's give it a title of let's say snake game save that and then let's actually if you don't have that install already there's an extension tab here you can look for live server by which we day so install that uh if you don't have that installed that's going to enable us to run this game uh live without having to kind of refresh the page to get the latest changes and also to make some of the JavaScript work we're going to need to run it live so let's hit that little go live button and you'll have that if you installed the extension and that is opening up our browser here here as we can see snake game is written in the top here so we see that is correctly rendering the little HTML that we have so far then I'm going to go in here in View and I'm going to turn on word wrap to get all the text neatly visible on the screen let's now also create our CSS our style. CSS file and let's also just create our script .js file uh while we are at it those are the three files we need nothing else now let's link these files up with each other so in the head of our HTML under the title we are going to first link to the stylesheet and writing link we can now choose the third option which is going to give us the standard way of writing a stylesheet and we've already cheated a bit because we've called it exactly what the standard is so now let's just check that by writing body in our stylesheet and some curly brackets and giving it a background color of red hitting save and we see that that is updating correctly so let's just remove that for now same thing with uh the script we're going to link that up now writing script script and Source third one and here we're going to give it script.js and hit save so here let's try console logging a shortcut is just writing log and hitting enter or tab depending on your um system preferences and that gives us the full console log so we're going to console log test and then in our browser we're going to inspect and we're going to go up to the console here and we see that we have test indeed getting uh logged so it is working as well let's now remove that back in our index file let's also be sure to write uh the defer attribute inside of the script opening script tag which is going to say that it's going to run the script after it has run everything in the HTML which is going to help us avoid a lot of error and that also makes us be able to put the script neatly in the head which is the best practice so inside the body we're going to write a div and that is just not going to have any class or anything but inside of that div we're going to write another div and it is going to have the class of scores that is going to keep our score then inside of here we are going to have an H1 it is going to have an ID of score and here we can just put that to 0 0 for now and also another H1 with an ID of let's see high score with capital S and we're also going to put that initialize that as 0 0 0 then under this div we're going to create another div and it is going to have a class of game border one and hit enter or tab so what just happened well I used emit abbreviation um and you can actually create a div and if you write div and then dot that dot signals that that's going to be a whatever you write after here is going to be the class name so like so so that can save you a bit of typing inside the game border one we are going to create the game border two cuz it's getting a bit meta here we have some nice borders around our main um game board and we're simply using these divs to style and give them different colors and borders so this one is going to be game border 2 and then third one with a class of game border let's see three and inside of the third game border we're creating the div that is actually going to have the ID of game board like so so obviously we don't see anything yet CU we haven't given them any style whatsoever or any properties they don't have any height no width nothing then just above the closing body tag we're going to create another H1 it's going to have an ID of instruction text and that is going to be the one that says press space bar to start the game like so and then also under there we're going to have an image and that is going to have let's see the alt is going to be the Snake logo so we don't have the image just now but if you look in the description there will be a link to the Snake logo image this is free of use it's an AI generated image so feel free to use it for your project so go in the description uh look for the snake image uh link download it and then drag that into the um repository here I'm doing the same it's called snake game AI gen PNG so now in our source attribute here in the image we can uh link to that so snake game AI gen and we hit save there we go cool so now we can move on to our style. CSS let's actually first before we move on let's target both the H1 and the image and just comment those out if you hit uh control KC that's going to comment that out or command KC for on Mac and then we hit save because um we are hiding and unhiding those elements on our in our JavaScript later but in the meantime uh just to make it a bit easier for us to see what's going on we're just going to hide them for now so now we can pop up into our style. CSS file let's also inspect in our browser and we can stay in the elements I'm going to open the body here the div just so you can see that we have all the elements here we have our game border with literally no properties all these no properties they're just empty divs so now we're going to give these div more life and make this actually look like a game so body going to Target that first we are going to say display Flex so that we can have things neatly under each other and centered we're going to align it align items to the center we are going to justify the content to the center as well this is going to align items uh both uh vertically and horizontally to the center then we're going to give the body the height of 100 view height so it takes the entire height of the screen then we are going to give it a margin because by default you see we have this scroll bar here that's because the body as you can see here when I hover over it has this orange by default margin of what is it uh 8 pixels so we're going to remove that and say zero and that removes the scroll bar then we are going to give a fult family which is going to be something we're going to get from Google fonts to make these numbers and the text we write more game like more retro and more like pixelated we are going to get that from fonts. goole.com it's completely free to use and quite easy in Google fonts you're going to search font you're going to write VT and then you're going to see this vt323 that is the font we're going to be using if you scroll down you're going to see a select Reg 400 you're going to hit that and then you're going to go in the top right corner you going see we have that selected you're going to copy this link here we're going to head over to the index.html file Under The Meta tags here and over the title you're going to paste that in and then this preconnect stuff basically loads the the font a bit sooner and then this link redirects to the correct font hosted on Google fonts so here we're telling our stylesheet that basically now you have access to this font and how we use it is we use this CSS rule here so we can copy that head back to our CSS and let's also go back to our snake game we have our zeros here if we save the CSS we see that it reloads because of the live server now when I paste in here the font family we see that we get our nice retro design cool now we are ready to move on so next we're going to Target our body as well as our DOT snake class that we haven't used yet but we're going to be using in our JavaScript so we're just going to Target it at the same time we are giving them a background color that is quite dark uh so it's hash 414141 which gives us this uh dark grayish color then we are also going to Target the ID game board game dashboard and we're going to give it a border radius of 100 pixels we are going to give it a display of grid so this is where we're actually making the game board with this grid and then we're going to give it a grid template columns so how many columns is this grid going to have well it's going to be repeat 20 columns and each of them are going to be 20 pixels wide and then same with rows grid template rows that is going to be repeat 20 by 20 pixels like so so let's check out our body now game board game board two border game board here we go can we see that okay so we see now that we have if we hover over game board here we see that we actually see the game board it is 400 * 400 pixels wide and um size basically and it has 20 * 20 a little squares in inside of it so that's the grid we just made this is our playing field that we're going to be using throughout the game lastly here we're going to also give it a margin of five pixels because later on we are going to have a border here and this margin basically makes it so that our snake when it hits the Border it's not going to overlap the border and it's going to create a neat um uh visual aesthetic so it's simply for visuals this margin then we're going to Target the game border one and we are going to say we're going to give it a border of hashtag and that's going to be 5 95 f43 and that's going to be a solid border and it's going to be 10 pixels wide there we go and and then we're going to give it a border radius of 30 pixels to round that out a bit as well as a box shadow of inset and I'm going to explain in a bit why we're using box Shadow here in addition to uh the Border but it's easier to see once we actually have some more elements this is also going to be 10 pixels and it's going to be the color of it's going to be the same color actually 59 5 f43 save that so you slightly see the the Border here so if I comment that out control KC you see that the Border actually goes on the outside of the game board whilst the if I comment this in again you see that the uh box shadow goes on the inside it's a bit hard to see because it covers it but you see that the border is basically here so the Border goes out the box shadow box shadow goes in and because we have different radiuses on these different game borders without the Box Shadow it would basically give a a little gap between one and the other so that's why we're adding a box shadow in addition to a border but I can show you that and then you'll see why so let's just call copy this whole game border one down so shift alt down or shift option down if you're on Mac and you can hit that twice and I'm just going to copy that code so let's say game border two and game border three hit save and now let's alter it so it's the correct colors so here it's going to be um let's see a BB 78 a and we're going to give that the same color here A B B 78 a and the third one is going to be 8 B 9 66 C and the same color for the Box Shadow there we go hit save now we can see the difference between them so now let me me remove the Box Shadows like so by commenting them out hitting save and that's here you can see why we are adding those box Shadows because we're avoiding that little Gap there because these have different border radiuses if they had matching border radiuses but they don't and we don't want to have it either because that's the visual aesthetic that gives it that more uh cartoony and Vibe so let's comment that back again but we're going to change the um the different properties here in game border 2 The Box radius is going to be 26 pixels in game border three the Box radius is going to be 20 pixels like so and in game border two it's going to be for the Border it's going to be not 10 pixels but 8 and for the third one it's not going to be 10 but 30 like so let's see if we can see the allall there we go starting to look more like it and the same here in the third uh game border 3 the Box Shadow is not going to be 10 pixels but five so that is all for the borders now let's move on to the instructions text instruction text then we are going to Let's comment back these in the index.html so control KU that's going to make them show up again so just to see them then we are going to position it we're going to position it absolute like so we're going to position it from the top 60% we are going to give it the color of # 333 we are going to give it a width of 300 pixels which makes it also um fold under each other we're going to text align it to the center we are also going to text transform this to capitalize to capitalize each word we're going to give it a padding of 30 pixels and we're going to give it a margin of zero these are all just simple stylistic choices just to to make it look good uh it's not still not looking good because we have this snake image here that is still positioned relative to the other elements whilst the positioning of absolute kind of frees it to be just positioned within the frame so now we're going to Target the scores as well that's our two scores up here we are going to say display of flex and then we are going to justify the content to space between like so then we are going to Target the score and we're going to give it a color of hasht ABB 788 gives us that nice green then we are going to Target both score and high score capital S and we're going to give it a font size of 40 pixels we're going to give it a font weight of Boulder and we're going to give it a margin of 10 pixels and zero hm why is the they should not be so score should be on this side and high score should be here but it's not happening so this scores here is not targeting properly let's see class ah I see I think yeah okay so this is a class as we can see here class scores and we have defined it as an ID here so let's just remove the hashtag and another the dot and that solves it there we go looking way way better and as intended now let's target only the high score again remember capital S we're going to give it a color of Hash d8 D D CA like so bit more whiter but still on the green scale and we are going to give it a display for now of none cuz until we start the game the first time and actually um hit into something so we can save the score we had we're going to kind of remove the high score to give more of a visual um um element to it so there's something new happening once you actually have played the game then we are going to Target the game border 3 together with the logo and we're going to give both of them a background color of hasht C4 cf3 starting to look good then we are going to Target the snake and we're going to give it a background color we're not going to be able to see this yet now but uh we're going to see it soon once we start with our JavaScript 41 41 41 actually we have that already here so we don't need that let's remove that we're going to give it simply a border of # five A5 A5 a one pixel and that's going to be dotted there then we're are targeting the snakes food and that is going to have a background color of hhde DDE as well as a border of # 9995 pixels and solid and then lastly in the CSS we're going to Target the logo and we are going to position it absolute straight in the middle H we did we add we didn't add the class in the HTML so go to the HTML and then the image we're going to give it a class of logo sorry an ID of logo save that and then we see we have something looking better here now we are ready to move on to our JavaScript so let's save the style and the index and then we can open our script file and the first thing we're going to do here is we're going to Define HTML elements that we need from uh the HTML that we're going to manipulate here in the JavaScript so the first we're going to uh get a hold of is the game board because we need it to do anything in the game so we're going to Define that using the cost and we're going to say we're going to give that board as a name and then we're going to use the document property and then the get element by ID method so then here we're saying uh the constant board that is going to be equivalent to if you go into the document that means the entire page here the entire HTML document and then you get the element by the ID and then let's go to the HTML and see what the ID is game board so let's copy that and head over back to our script and then be sure to add some brackets here and gameboard and hit save and then let's log that just to test log board and then let's inspect go into our console and we see that it has successfully logged the game board with a div uh with the ID of game board so it works cool let's remove that and it disappears so then we are ready to start actually the functions of our game so we're ready to start the game well we can't start the game just yet because we first we actually need to draw the map so we're going to create a function called Draw and this essentially is going to draw let's see draw game map it's going to draw the snake and also the food so we are going to first we're going to take the event that if we have started this game before we're going to need to reset the board so we're targeting the board we just made here and we're going to say inner HTML and we're going to say set that to just empty strings so that it's empty so then every time we draw this board is going to be reset then we are going to call another function because we're going to draw our snake so we don't have this function made but that's what we're going to make just now so so next thing we're going to draw Snake by defining this function we just used or called function draw Snake and inside of here we are going to need basically to Define how our snake looks and the way we are doing that is by actually using um an array an object inside of it so if we go back to the top here under the const board we are going to also Define game variables and here we're going to say let snake and we're using the let and not the const because the board stays the same but the snake is going to change in size so let snake equals an array with one object object inside and that object or in fact all the objects that the snake is going to have throughout the game is going to be um positions within the game map so it's going to have an X position that is going to be 10 and it's going to have a y position that is also going to be 10 this essentially if we go back and we inspect our game map here we see that we have a game board and it has 20 rows and 20 columns so the 10th row and the 10th column more oress in the middle is going to be where the snake starts so that is what we have defined here let snake is this position now currently it's only a position it's nothing else there's there's nothing tying it to the game board but we'll get to that so now we are uh continuing with our draw Snake function inside of here we are going to take the snake that we just made and we're going to say four each which is an array method so we're going to say for each of the children it has in here so for everything that is inside this array so now it's just one object so that's going to be for each object which is just one for now we're going to say for all for all those segments for each segment do something we're going to call an arrow function and inside of here we're basically running some code on every single element that is inside of the snake so at the start of the snake is just one dot so what are we going to do well we're going to define a new const here we're going to say snake l element is equal to create create game element this is something we haven't as a function that we haven't made yet but we're going to make shortly so we're going to say create game element you're going to create a div and then that div is going to have the snake class let's also go to view and word wrap like so so basically this function that we're going to create is going to be responsible for creating every snake element and for giving it the snake class it's going to be a div with a snake class that we have already styled here in our CSS that has a border and the background color and that essentially gives the illusion in a way that there is a snake on the board here so before we move on here and do something with the snake element let's actually make that function so it's going to be the function that is responsible for creating a snake and or or food Cube or div so that's going to be the function create game element and it is going to take uh an argument tag and it's going to take class name so as we can see here create G element we're giving it a div and we're giving it the class name snake so that's the tag is a div and the class name is the snake and then we're going to say const element is equal to document dot create create element like so tag so inside of the create G element we are creating a new constant element that is using the same way to Target the the HTML but here instead of targeting an existing element by ID like we did here we're actually just creating a new uh HTML element inside of our JavaScript that's what this inbuilt method does and we are saying that you should create a tag and the tag is whatever is sent in here in this position and we can see here that the div is sent in so here B essentially what is saying here is document create element div when it's used like this this but if we used it somewhere else or if we change that to P that would be a paragraph that would be created then we are going to go into the element that we just created we're going to go to the class name of the element and we're going to give it the same as class name so this might be a bit confusing because this is what we call the um argument here in the the function but it's also the same name as what the actual um property on this element is so class name is also the inbuilt definition of a just simple class which is what we use in um HTML but essentially what we're doing here is we're taking this snake here inside of the great game element and we're adding that to the div that we are creating as the class so what this does is creates a div with the class name of snake and then we need to also return this element that we just made like so so now con snake element is equivalent to a div with a class of snake then we can move on inside of the draw Snake function so the next thing we're going to do then is we're going to call another uh function that we haven't made yet so it's going to be set position and here oops set position is also going to basically take similar arguments snake element and also segment let's scroll down and create that set position function what this set position is going to do is going to set the position of the snake or the food so once we've made it it's going to actually set it on the game board or actually Define the position it's going to have on the game board so we're going to create that set position and that's going to take the arguments of element as well as position and inside of there we're going to take the element we're going to go into the style of it and we are going to say grid column is going to be equal to position X so essentially what we're doing here we see that we are using the set position here we have created the snake element we created create a div with a class of snake then we're sending that into set position and that's the element here so here we're we have a div class snake I'm going into its style we're going into this grid column which is a CSS uh property and we're setting that equal to position dox so what is position well here we're sending in segment and segment if you remember is for each segment here that's basically every single object here that is a coordinate inside of the snake so as the snake grows basically it's going to have many of these uh object inside but at the start it's just X10 y10 so that's what we are sending in here so position X means this position here 10 because position is this and that is this segment and segment is simply this so segment X segment y position X segment X okay I hope that makes sense um we are going to see that soon in action and then it's going to be more clear to see what is going on we also need to set the element. style grid row and then we set that to position y so that we both have the X which is the horizontal coordinate and also the y coordinate which is the vertical now let's actually see how this works uh in practice so now let's actually go to the draw Snake function under set position we are going to Target the board we are going to append child we're going to actually take the board element the HTML board here and we're going to add the snake that we just created snake element like so now if we actually call this function draw we should be able to see our snake element so testing draw function draw we're not going to call it like this but just to test if it works and then let's also remove our two texts here so we can see like so there we go there's our snake let's go back to the script let's comment out our draw function there is no snake and once we call the draw we see in the game board we have a div class snake and look at the style here if you can read that it's small I know but if you can look it there has style grid area 10 * 10 if I now edit this in the element dot style here and I change that to let's say two you see that it goes here one here 2 3 4 and it goes gradually down if I give it a one two if I give it a 20 it's at the end 18 so that is what we have been positioning here you can also do that directly in the JavaScript if we change that to 20 and 20 that should be the bottom right like so and 120 should be the bottom uh left like so so I hope it makes a bit more sense and pat yourself on the back we just made our first snake element we made the snake head so now we can actually remove this I'm just going to comment it out for now and we are going to create our actual food as well so draw food like so inside of the draw food we're going to create a const called food element which is going to be equal to using that create game element function again we are going to create a div but this time instead of snake it's going to have a a class of food which we are of course targeting in our CSS then we are going to set position so this is as you can see it is similar to the draw Snake uh function so set position we are also using the already made uh function we're going to give it the food element as the element and then for the position we're going to give it food which we haven't made yet so let's make that if we scroll back up under let snake we're going to say let food equals and because food is going to be automatically generated it's not going to have the same position every time cuz that would be boring wouldn't make a very fun game we are going to call a function here to give it a randomize position so generate food is going to be called here we have not created this so let's copy that name and create a function generate food and let's just leave that blank for now continuing inside of the draw food function we also need to actually append this food to the actual board so board append child and then food element like so so it's pretty much the same setup as in the draw Snake now in actually to actually get this food position uh cuz now it's not going to work it's not getting the function is not returning anything so let's move on to our gener generate food function let's also just comment here this is draw food function inside of our generate food function we are going to create a new constant called X which is going to be its X position we are going to use the inbuilt math object here which has some cool inbuilt methods like random which gives us a random number uh in JavaScript so this is currently just going to give us math random is going to give you a random number between zero and up to one not including one though so it's going to be 0.1 0 uh 39 0. 99.9999 so everything apart from one so 0 to up to one then we are going to times that times 20 we could do that like uh put 20 here because we know the grid size is 20 but let's rather go up to our game variables and let's just Define a new constant here call it grid size equals 20 and then we can use that here instead so if we want to change the grid size later we can easily do that here and then because we are getting this math random you know up from zero we don't want a zero position cuz the grid starts at one right so we're just going to take all of that and we are going to plus one but then we also have a new problem is that this is basically giving us um not whole numbers it's giving us commas so we need to also use something called math floor on it which basically takes whatever this expression is and it floors it so if it's 1.99 it's going to turn into one if it's 3.20 it's going to turn into three so that's what the math floor does and the one at the end is simply to raise this from zero to start from one all the way up to 20 so that gives us the X it's going to be the exact same thing for the Y so let's just copy that call it Y and then we are going to return this as an object X and Y and save that so now generate food returns a random coordinate in X and Y position let's draw the function again let's uncomment the draw function and let's see let's see generate food are we actually using it anywhere I see we have not added the draw food uh function here so we haven't actually called this function ever we're calling the draw but we're not calling the draw food inside of it so draw food like so there we go now we have our snake if I hit save again here it should as it is doing giving us a random position for our food uh di here how cool is that so now when we start a game it has a random position well snake is always at 10 10 okay now let's move on to actually getting this snake to move let me just comment here generate food it's a bit selfexplanatory but we've started commenting every function so we might as well continue next one is going to moving the snake so function move it's going to be called and then inside of that function we're going to create a new constant we're going to call it head and this is basically going to be the head of the snake but it's not the direct head uh it's not actually this object here the first object we don't want to manipulate that uh we want to make something that is called a shallow copy because if we don't then we're basically going to run into some problems very usual in JavaScript where you don't actually want to alter the original object or the original array we want to use the position of the head but we don't want to actually alter it so we are going to call the spread operator on the snake zero which is going to be the head here cuz in an object it's zero index base so the first object or in an array sorry the first position in the index is zero so we're getting a hold of the snake zeroth position which is 10 10 and we're simply spreading it into this new object this is basically a copy of this but it is not changing this otherwise we could just call it like this but if you try doing that you're going to see that it's not working and you're going to run into some uh weird uh Behavior basically then we're going to create a switch statement here where we are taking the direction of the snake now we haven't made this yet we're going to create it now and the direction in the start if we go up to the game variables here let direction is going to be by default to the right let's scroll back down so we're taking the direction we're running a switch case on it and inside of the switch case we're going to have different uh cases so if the case is like it is now let's see right then we're going to take the head and we're going to say take the head take its X position and you are going to iterate that or you're going to increment that what that mean means is you're going to increase it by one so if you press right you're going to go into the x coordinate that's here that's X and you're going to go one up so that's from this place to that place which kind of fits if you're going right you want to go right so that is what this is doing so the direction by default is going to start moving the snake in the right direction we need a couple of more cases though well we need three more so let's just copy those in so if the case is up we're going to actually go to the y coordinate and we are going to go Y and decrement because the position up here is one and if we go if we press actually from the start it's 10 if we go up we're going closer to one so we actually want to go down in uh numbers so that's why this might seem a bit counterintuitive but it makes sense then we're going to take that down then it's going to go Y ++ and then left is going to be x minus now we have the start of our move function but we're missing something here so basically here we are um moving the head but here we are actually taking the head we are un shifting it and we're giving it the head so what unshift does is it basically adds a head object to the beginning of the snake array so this head here which is a copy of the original head it is basically putting that at the start of the snake array here so now it only has one um object here but when we for example go uh uh up we are going to be pushing or un shifting a new uh object inside of here so up would be X same y it would be nine so that's what happens if you would to press up from the start of the game and that is what we are doing here uh after the snake unshift we want to also take the snake pop like so because what we are doing here when we're moving as you might have noticed if we're un Shifting the head we're adding a new part to the snake we are actually just elongating the snake so if we were to move 1 2 3 4 you would see that the snake doesn't move it just grows in that direction so that's why we're also taking the snake and we're calling pop on it because as you can see here it removes the last element from an array so when we go right let's say we are adding a piece here but we're removing the last piece so it gives this illusion we're actually just building a snake a new elements in One Direction and we're removing the elements behind it so it gives the illusion of movement but actually it's just being rebuilt and destroyed uh one after the other now let's simply test this function test moving so we're going to call a set interval uh in build function because we want to move more than once and we want to call the move function that we just made so that's going to move first and then we want to draw again cuz uh if we don't draw then we're not going to see the new changes so then draw again new position and let's also comment that out like so and then finally we also need to have a time on this so let's give it a 200 milliseconds and as you can see now when I start the game and I reload for every 200 M seconds or 1/5 of a second the snake is moving in the direction of Direction which we have put to right let's change that to up as we can see it goes up and then down let's say working left working so you can choose whichever you want to have by default I'm just leaving it as a right so cool our moving function works so now we are actually ready to also make the snake uh become bigger if it hits the uh food and it's actually quite simple and elegant solution so as I told you if I uncomment this now look what happens the snake by default just grows because that's actually the move is actually more of a grow function it is that we remove the last part so the only thing we need to uh do to make the snake grow when it hits the uh food is to just remove this function when it hits the same coordinates as the food element so let's just take this away let's uh comment that out so we can uh see what's going on let's go back inside of the move function under this snake pop we're actually going to comment that out we are going to create an if statement and if head remember that's what we defined here as the shallow copy if the head x coordinate is equal to the food x coordinate and as you can remember the food we have here randomly generated that's this coordinate here so if those two are equal and head Y is equal to food y so basically if they're on the same spot then we're going to run some code so then we're going to say food equals generate food because that means that we have run into the food so we need a new food placed on the map so then that would happen so if we hit it it's going to create a new random location for the food then we also want to uh clear the interval it's another inbuilt method or function because otherwise we're also going to run into some um issues and it's basically we just want to reset the movement and the whole uh move function here otherwise uh a lot of bugs are going to happen so we're clearing clear past interval then we want to go into the game interval which we have not defined yet we going to go back up to our variables we are going to Define let game interval and we're just going to Define it that it exists and we're going to go down here it's keeping track of when we are running the our game basically so we're going to take the game interval we're going to set it to a new interval cuz we already had paused the other one and here we are going to run some code we're going to run a new move we're going to reset that we are going to also run a new draw and reset that and then we are going to add that we're going to add the game speed delay because instead of uh setting it to 200 here we might want to change it which we actually do when we eat a food we are decreasing this delay and thereby increasing the game speed so we also need to Define this let game speed delay and we're going to start with 200 milliseconds so then scrolling back down then if our head is on the same position as the food we generate a new food and we then skip the snake pop so snake pop is not happening here and thereby this one uh div snake is going to turn into a two div snake it's going to basically turn into the position uh of the food else we are going to run the snake pop so I hope that makes sense basically if we don't run into food we're going to be continuously building building the snake One Direction and then we're moving the snake back or the tail and then if we hit the food we're just going to not remove the tail and therefore the snake is going to grow now we're going to move on to actually creating our start game function which is going to be called originally start game inside of the start game function we we are going to use the game started variable that we are going to create and we're going to set it to true so let's scroll up and let's create let game started and initially it's going to be set to false like so and then when we start the game it's going to be set to true so here we're going to basically keep track of a running game that's going to be very useful um to enable us to basically if we want to start the game we want to hit enter and we don't want to be able to start the game over again while the game is running things like that so it's very useful to keep track of if it's running or not then we want to take the instruction we haven't defined those either let's scroll up and let's get a hold of const instruction text equals document get element by ID and we are going to Target the instruction text let's just see if we gave that correctly let's also uncomment them in the JavaScript code so now we see that they are taking the space and we want to actually hide them when we start the game so yeah instruction text let's just copy that for safety and paste that in there we also want to define a const logo document equals document get mement by ID and that's going to be logo like so now we scroll down and we can use them here in the start game so instruction text we are going to go into that style and display and we are going to set that to none when we start let's also shift all down and we're going to do the same with the logo so when we start the game we're going to hide these two and basically we're going to get then view the snake and the food again unobstructed then we are also going to go to the game interval and we're going to set the new interval and when we start we're going to call the move we are going to call the check Collision function that we haven't made yet collision and we're going to also call the draw and that is also going to be run on the game speed delay like so let's comment out the check Collision for now that is the function we're going to create to basically see if the snake is running into the corners or into itself but let's not get ahead of ourselves we're going to create that later so for now it's just comment that out and let's also we are calling draw here in our start game let's go up to line 45 let's um comment that out like so then we are ready to actually make to start our game so here it says press space bar well if we do that nothing happens because we're not listening for the space bar that's what we're going to create now we're going to create a key press listener event listener like so and that is going to be function handle key press is taking an event and inside of here we are going to call the start game but not um at any point so if we press up Arrow we don't want to start the game we just want to move the the snake so if the game started so if the game is not started with the exclamation mark and the event. code equals space then we want to let's see like so then we want to start the game called that function and this doesn't work for every browser so we also need to call let's see or like so and let's wrap these in uh in parentheses like so and then we can create another one here let's just copy this so if game started an event code equals space or if game hasn't started an event key is just an empty space like so so that's going to basically handle um every browser's um handling of space key if the game hasn't started and we press the space then we're going to start the game else we are going to handle the arrow keys so another switch case here and we're going to handle the event key because that's the event we're getting in here that's the key we press first case is going to be Arrow up so these are the basically the shorthand uh phrases for the different Keys they're inbuilt and let's see we want to handle it like this call on then we're going to take the direction and we're going to set that to up so remember the direction is what we have defined here it's by default right but if we press now we're listening to key presses if we press up it's going to change to up and that is going to affect how the move function moves and it's going to change the direction of the snake so here we are basically listening for the handle key press and that sets the chain of motion for the snake Direction and then we are going to break after that then we're going to copy this down one 2 three times arrow down that is going to change it to down arrow left and that is going to be left and arrow right that is going to be right like so and we're breaking out of that switch case after each uh case then we have our handle uh key press function ready now we need to call it so now we're just going to go to the document we're going to add an event listener and we're just going to listen to that all the time I'm going to listen to key press actually key down and for every key down we're going to call the handle key press so when we that's the event we take in here and we're going to call handle key press so if we have clicked something or press something that is the space it's going to call the start game if we click something else then we are going to move the um the snake so let's try enter it works how cool reload enter it works and now I am also hitting the arrow keys how cool is that now we have a snake that is moving let's see if we can eat and there we go oh we are speeding up by a lot that is a bug but we are moving around around and we are increasing our size as well sped up a lot it's hard to eat the second one in any case we have successfully started the game we have successfully changed the direction of the uh snake and we are making it grow by eating food we have a bug somewhere where it's actually increasing the um speed drastically so let's go to our uh start game let's see no that's uh correct maybe we have something in our um when we eat it changes when we eat so here we're also going to call the uh check Collision function like so we're just going to comment it out for now so be sure to add that uh in the if statement in the move so game interval we're setting an interval we are let's see we're calling the move we're calling the check Collision we're calling draw on the game speed delay else no no it looks good I wonder if we are simply um unknowingly to us we're altering this game speed delay so let's just um go into here into the if statement here we're going to create a new function under or over clear interval we're going to call increase speed function and we're going to create that right away so under our event listener going to call the function increase increase speed and then we're going to log the game speed delay let's see now what happens if we start it's 200 okay 200 okay so it's not to do with the game speed H let's Try by adding the if statement if game speed delay is bigger than 150 then we are going to decrease it like so by five let's start again still speed speing up very fast H let's comment out that start again it's 200 195 so it has nothing to do with the game speed delay at least uh I see what we did wrong okay here in the clear interval we are actually not clearing anything we need to clear the actual interval game interval there we go now let's see if we start the game ah there we go now we're also logging the speed as we can see we are successfully eating food growing the snake and it is not um increasing in speed uh drastically it is increasing in speed normally as you can see going from 200 to now 155 which is a way more uh normal and easier way to play the game and now we've hit our uh only condition in our speed uh like increase speed function which is 150 so it's not increasing more also you can see we don't have the Collision function working so we can just walk through our own snake our own body we can hit the corners nothing really happens then down again into the increased speed function let's add an else if statement here else if game Speed game speed delay is bigger than 100 then we're going to run uh different uh let's see game speed delay is going to be minus equal to 3 so basically we're going to decrease the speed increase the faster it gets so that it's not going to get to a point too quickly where it's unplayable basically but it's still going to increase incrementally then let's copy this paste that there two more times for the 50 Mark and also the 25 Mark which is starting to become very very fast so one and two now if we save and we restart the game we can see that when we hit 150 it is going to be um decreasing by three instead of five here we go when we hit under 150 we are going to 147 144 141 so uh decreasing by three instead of five which is exactly what we have coded right now if you're wondering how I'm resetting the game I'm simply just saving the script file now we can go on to actually make our Collision like check Collision function that we've been using uh in at Le at least two places so check collision and this is going to be the thing that resets the game if we hit the wall or we hit our own body so const head is equal to snake and zero so here compared to the spread operator we have up here we are not uh us using it here we are simply uh say setting it exactly equal to the zeroth index of snake namely the head then if head X position is less than one meaning that it's here is the one meaning is zero it's going to hit the wall or or head X is a larger than grid size which is 20 it means it's going to go on the right side over so it's going to hit either here or here so this one or head y is also smaller than one or head Y is bigger than grid size in that case we are going to reset game and that's a function we haven't made yet but that function is going to basically reset our game when we hit uh the borders of the wall now we need to take the we need to check also for the times when it hits itself so here we're going to need a for Loop so four we're going to Define I let I equals one starting at one and I is going to go towards snake. length and then when that happens it's going to increment by one so what that means is we have an I that we just randomly defined as one we just made and I as long as I is smaller than the snake length which is at the start it's just uh one then we are are going to increment it so we're going to go basically through the entire snake length that's the point of this so for every part of the snake we're going to run a piece of code that's the point of the for Loop and then inside of here we're going to have an if statement and we're going to check if head X is equal to snake in the position of I because the position of I is going to be starting with the body and going upwards so if snake i x so here we're checking if the head is the same position of the snake uh body in the E position and the same snake one I equals snake I position and y coordinate because otherwise it might be on the same position in the X Direction here but it might not be in the Y so we need to check for both unless it's uh hitting on both the X and the Y it's not in the same exact position but if it is we're also going to reset the game then we are we going to create our reset game function reset game also let's go and uncomment the check Collis we have let's see by searching for it contrl f we're going to remove those comments here and here there we go now we're using it now we just need to create the reset game function inside of here we are going to call the snake and we are going to reset that to its original uh position x equals 10 we need to create a object in here x = 10 and Y = 10 we're also going to take the food and we're going to reset that by generating the food again randomly we're going to reset the direction to right which was its original position and we're also going to reset the game speed delay to its original 200 when that happens when we reset the game we also want to update the score so update score let's make that function right now function update score we're going to create a constant here current score is equal to snake dot length the length of the snake Min one because the snake length starts at one so we don't want to start the square at one all the time we just want to start it at zero makes more sense but you're free to choose then we want to go go into the score that we have made up here oh we haven't actually we haven't made that yet so let's create a constant score is equal to document dot get element by ID and it's going to Target the score element and here we're going to go into that element we are going to go into the text content and we are going to set that equals to the current score two string and then we are going to pad that to the start with three uh numbers and that's going to be zero so what does this mean well we're basically setting the score text content here equals to the uh snake length and we're turning that into a string so that we can also make that a triple digit number without this PAAD start it would turn it into one it would remove the uh two zeros and turn it into one so this is just simply some flare to make it a triple digit number and start uh counting from the end here which is the P start here it's going to add zeros if the number is not big enough so if the number is 20 it's just going to add one zero if the number is two it's going to add two zeros then we need to actually call this function we're going to go up to our let's see our draw and we're going to call the update score here now if we start the game let's try and there we go we see that we have our score starting to tick how cool now it's starting to become an addictive game okay and let me also just demonstrate if we H remove that and we said two to the pad start let's start the game we see that now we have two numbers in instead of three change that back to three like so but there are more things we want in our reset game we also want to actually once we have hit something we want to also have our high score so we need to also update high score and also stop game so those are two functions we're going to create right now so first let's take the stop game function so stop game and inside of here whenever we want to stop the game we want to actually clear the interval and what interval the game interval then we want to go into the game started and we want to say well now it's not started anymore now it's stopped and then we want to go to the instruction text style display and we want to say that it's a block because before it was hidden and the same with the logo we're going to go into the style display and we're going to say block that's for the Stop game then creating our update high score we want to then call a constant current score similar to earlier we're going to say that it's length actually snake do length minus one then if the current score is bigger than the high score then we want to set the high score to current score now we don't have the score May yet or the high score Let's see we are missing the const high score text equals document get element by ID and that's going to be high score like so now we have that we also need to actually Define the high score in the this is just the element for the text but we also need to define the high score here so under our generate food let high score equals to zero at the start now let's scroll back down so if high score if if current score is bigger than high score that's this one if it's bigger than what we have here it is going to be set as the new high score that's what we're doing here and then we're also going to unhide the high score text text content equals high score to string and it's the same as last pad start and it's going to be three digits and it's going to be with zeros then here we are unhiding it high score text style display and equals to block so now if we start the game and we get a score let's just crash into something we also see that our Collision is working and we crashed and we we had only one in score let's start again and we see so now we have one let's try to get a bit higher number two high score stays the same but score is incrementing three and four and crash and then four is saved here so now we're starting to get the real game elements that want want makes you want to keep playing more and more so now we have most of our game done but I don't know if you see uh when I restart the game you see that sometimes the food is generated here and it doesn't really look good uh like here we want to have the logo we want to have like press space bar this food looks a bit off so the way we're going to do that we're going to scroll up and we're going to fix or tweak speak the draw food function a little bit so where is it draw food here it goes so you know how we have this game started function here well we're basically going to wrap this draw food in that in an if statement so if game started then we are going to allow this uh stuff to happen but but if not well it's not going to happen now draw food is only drawing food if the game is already started and on this screen it hasn't started until we press space bar so now if we start the game over again we can see that the food actually starts dra uh drawing rendering on the page once we have started the game and now it's not going to show up and is never going to show up on this page when we have our logo and our text showing and there we go let's do a final trial I am eating the snake eating the food sorry I am the snake let's see and we are successfully growing let's see if I hit myself then it's game over high score is updated score is reset if I hit the edges same thing great now we can remove this console log as well let's see console log you can just comment out that that is everything for our snake game I hope you enjoyed it I hope you now can also have fun playing this game you can also tweak it further if you want there are many things you could add here you could customize the way the score is counted you could add for example if you are eating food close to the snake body or the edges that could maybe potentially give you more score you could add score a bit depending on the time that you have been playing so the more you play the more score you also uh increase or you could also make it more um Advanced the way the speed is increased maybe also based on the score so there's many things here you could do to increase and further tweak the game to your liking you can also change the style you can change the design of the snake and the food there's many things here you could do and I encourage you to to play around with the uh code that we now have and make it your own as well um I really hope you enjoyed this game uh if you liked uh if you would like to put it uh online and you don't know how to do that then here is a video that explains how to host your game live for free using netlify and I'm looking forward to see you in the next video Until then see you
