With timestamps:

00:00 - this comprehensive course guides you
00:02 - through crafting a robust e-commerce
00:04 - website similar to amazon.com using
00:08 - nexjs 13.4 and its new app router Master
00:12 - next.js server actions database
00:14 - intricacies with Prisma seamless
00:16 - authentication via next auth and mongodb
00:19 - and create a stellar UI using Tailwind
00:22 - CSS and Daisy UI Beyond building you'll
00:25 - also dive into deploying your project on
00:27 - versel optimizing metadata for each page
00:30 - duplicating Prisma requests and setting
00:33 - up essential tools like prettier and
00:35 - eslint for a streamlined development
00:38 - experience Florian Walther created this
00:40 - course he is an experienced developer
00:42 - and popular teacher hola Muchachos in
00:46 - this tutorial we will build an amazing
00:48 - e-commerce website using next.js13 to
00:52 - get a ref react server components and
00:54 - silver actions which are still in Alpha
00:56 - right now for the styling of our website
00:59 - we will use 10 a win CSS together with a
01:02 - really nice component Library called
01:04 - Daisy UI we will store our data in
01:06 - mongodb and to connect to our database
01:09 - we will use the Prisma orm which works
01:12 - really nicely together with nexjs and we
01:15 - will even Implement authentication into
01:17 - our website so that a user can log in
01:19 - and for this we will use next auth so
01:22 - this is a full stack project where we
01:24 - build both the front end and the back
01:26 - end right in next.js and we are really
01:29 - using The Cutting Edge technology right
01:31 - now in this tutorial the latest of the
01:33 - latest some of these features are still
01:35 - in Alpha so this tutorial will really
01:37 - equip you for the future if you want to
01:39 - be an xjs developer okay so without
01:42 - further Ado let's take a look at the
01:44 - project we will be building here so our
01:46 - website is called flomazon and it's a
01:49 - place where you can spend all your money
01:50 - and as you can see on the front page we
01:53 - see the list of products available on
01:55 - our eCommerce website they are ordered
01:57 - in descending order with the newest
01:59 - product and top and this is completely
02:01 - Dynamic so this featured product here at
02:04 - the top which is displayed in this large
02:06 - box is not hard coded if we added a new
02:08 - product to the database the new product
02:10 - would be shown at the top and the pen
02:12 - would be shown here as the second
02:14 - product but the featured product is only
02:16 - shown on the first page so if we
02:18 - navigate to Page tour we don't have this
02:20 - featured product at the top anymore
02:23 - so we Implement pagination as well the
02:26 - cool thing is the way next.js renders
02:28 - and caches Pages makes them open really
02:31 - fast so if I click on a product the page
02:33 - is there instantly there is no loading
02:35 - time because this data is pre-rendered
02:38 - and then cached we can of course add
02:40 - items to our cart and this is executed
02:43 - in a server action server actions are a
02:46 - next JS feature that's still in Alpha
02:48 - right now and they are basically a way
02:50 - to execute post requests on our server
02:53 - like adding an item to the card as we
02:55 - just did without having to set up a
02:57 - separate endpoint so this happens all
02:59 - directly in our components server
03:01 - actions are still in Alpha right now and
03:03 - you will learn how they work throughout
03:05 - this tutorial let's add a few more items
03:07 - to our card maybe a banana
03:11 - and
03:12 - the Game Boy here
03:14 - we can see how many items we have in the
03:17 - card and when we click on it we even see
03:19 - the subtotal so the current total price
03:21 - for all items we can navigate to the
03:24 - cart page where we see a list of all
03:26 - items in our account here we can also
03:28 - change the quantity of each item similar
03:31 - to how it works on Amazon and again this
03:33 - is executed in a server action and when
03:36 - we change the quantity of an item of
03:38 - course the subtotal updates as well our
03:40 - navbar updates and everything just works
03:43 - now the checkout button is just the
03:45 - dummy it doesn't actually do anything
03:47 - when we click it I know that many of you
03:49 - would like to see a tutorial with stripe
03:51 - implementation but I think stripe should
03:53 - be covered in a separate tutorial to not
03:55 - make one tutorial too bloated with too
03:58 - many different topics so if you want to
04:00 - see a stripe tutorial by me then leave a
04:02 - comment below if there is enough
04:04 - interest I might make one and of course
04:06 - leave a like on this video because only
04:08 - this way I know that there's actually
04:09 - more interest in tutorials like this but
04:12 - I haven't shown you the coolest feature
04:14 - of this project right now so I really
04:16 - wanted to make the shopping cart
04:17 - professional I wanted to have it work
04:19 - like in a real production website like
04:22 - Amazon and every professional e-commerce
04:24 - website should have an anonymous
04:26 - shopping cart in my example and I've
04:27 - implemented this so if I sign out I
04:30 - still have a shopping cart which right
04:32 - now is empty because I'm not logged into
04:34 - my account anymore but I can still add
04:37 - items to this Anonymous shopping cart so
04:40 - here comes the cool thing when I now log
04:42 - into my account again which we can do
04:45 - via Google login but you can also add
04:47 - other authentication providers if you
04:49 - want
04:50 - if I log into my account which was this
04:53 - one here
04:54 - it now merges the anonymous shopping
04:56 - cart with the shopping cart of this user
04:59 - account so previously we had six items
05:01 - in our shopping cart in this account but
05:04 - now we have seven why because it merged
05:06 - this mouse we added to the anonymous
05:08 - shopping cart into this authenticated
05:10 - shopping cart and now when I log out
05:12 - again the anonymous shopping cart is
05:14 - emptier so maybe let's repeat this one
05:16 - more time to really see that this works
05:19 - so remember we had seven items in our
05:21 - account I add another item or let's add
05:24 - tour to this Anonymous shopping cart so
05:26 - now when we log into our account we
05:28 - should have nine items in there right
05:31 - so we log in again
05:33 - it merges the shopping carts and there
05:36 - are our nine items
05:38 - so this is really professional also all
05:41 - these pages are servers at Renault which
05:43 - doesn't only make them great for SEO
05:45 - search engine optimization but this also
05:48 - allows us to have all the data available
05:50 - when we open the web page so if I
05:52 - refresh this page you will notice that
05:54 - there is no moment where the shopping
05:56 - cart is emptier with zero items or not
05:59 - shown at all instead when we refresh the
06:01 - page we see the number nine here
06:03 - immediately when the page is opened and
06:05 - this again in my opinion feels really
06:07 - professional because there is no glitch
06:09 - in the UI and this is also how it looks
06:11 - on Amazon when you refresh the page
06:13 - there is no loading time for the
06:15 - shopping cart because we are not loading
06:17 - the shopping cart client side like in a
06:19 - classic react App instead we loaded
06:21 - server side so the data is there as soon
06:23 - as the page is visible on the screen we
06:25 - even Implement a search functionality
06:27 - which again is executed through server
06:29 - actions so let's try this out maybe
06:31 - let's search for fun let's see what we
06:33 - find we are searching in the title and
06:35 - in the description of the product so
06:37 - somewhere in here is probably word fun
06:39 - let's also search for pen I know that we
06:42 - have at least one pen there's our pen
06:45 - and somewhere in here is the word pen as
06:47 - well but you can fine tune the search
06:49 - the way you want to only show exact
06:51 - matches for example that's up to you and
06:53 - of course our website is also responsive
06:56 - so this grid here on the front page for
06:59 - example adapts to the screen size
07:01 - and shows a different amount of items
07:04 - everything moves around at the correct
07:08 - time
07:09 - and even our pagination bar here at the
07:11 - bottom is responsive so if the screen is
07:13 - too small there will not be enough place
07:15 - to show a 10 page numbers for example
07:18 - instead it changes to a
07:20 - another kind of view which looks like
07:23 - this now we have this right button that
07:26 - we can click
07:27 - and the current page number and also
07:29 - this left button and again this changes
07:31 - with the screen size really cool
07:33 - the enough but is of course responsive
07:35 - as well so this moves below
07:38 - and yeah we will learn how to do this
07:40 - with Tailwind okay so this is an amazing
07:43 - project we will be building here and the
07:45 - focus of one of the main focuses of this
07:47 - tutorial is next.js server actions
07:50 - because they haven't really been covered
07:52 - in any tutorial in detail so far because
07:55 - they are still an alpha right now and we
07:57 - will use them extensively throughout
07:59 - this tutorial in different forms we will
08:01 - use them from Silver components and from
08:03 - client components so you will see how
08:05 - you can cut them and work with them
08:07 - correctly but there are some
08:09 - prerequisites for this tutorial because
08:11 - this is not a complete beginner tutorial
08:13 - if you have never worked with nexjs
08:15 - before then you should first watch my
08:17 - nexjs 13 beginner tutorial here on
08:20 - YouTube which I will link in the top
08:23 - right corner of this video in the info
08:25 - card box because next.js does some magic
08:28 - under the hood especially when it comes
08:30 - to a caching pages and you should
08:32 - understand this when building an xjs
08:34 - project and I explain all of this in
08:36 - detail in the linked tutorial alright
08:39 - then I wish you a lot of fun with this
08:40 - tutorial and please don't forget to like
08:43 - this video this is a signal to me that I
08:45 - should make more videos like this in the
08:47 - future have fun now it's time to set up
08:49 - our project and not only will we set up
08:52 - a next JS project we will also add some
08:54 - extensions that make it Pleasant to work
08:56 - with one such extension is prettier
08:59 - which is a code formatting tool which is
09:01 - especially useful together with Tailwind
09:04 - CSS because there's a Tailwind plug-in
09:06 - that helps you order your classes
09:08 - properly otherwise working with
09:10 - tailoring classes can get really messy
09:12 - really quickly so we will learn how to
09:13 - set this up properly I will show you how
09:16 - to set up all of this manually but I
09:18 - will also put a link in the video
09:20 - description below to the starting code
09:22 - that you can download from GitHub the
09:24 - reason is that of course these different
09:26 - packages that we use get updates over
09:28 - time and sometimes these updates break
09:30 - existing features and to make sure that
09:33 - you can still watch and follow this
09:34 - tutorial one year or two years in the
09:36 - future you can download the starting
09:38 - code from GitHub where all the packages
09:40 - and other configuration is already set
09:42 - up so it's up to you if you want to
09:44 - create the project manually or download
09:46 - the starting code just know that if you
09:49 - watch this tutorial in the future and
09:50 - you do it manually then you might have
09:52 - to fix some code throughout this project
09:54 - all right to create a next.js project
09:56 - manually we open the folder where we
09:58 - want to put it and then we have to open
10:00 - the command line here on Windows we can
10:02 - do this by holding shift down right
10:04 - clicking inside this folder and click on
10:06 - open Powershell window here this might
10:08 - say open zmd or command line here this
10:11 - is also fine we just need a command line
10:13 - window
10:15 - if you are on Mac or Linux then yeah
10:17 - open the command line there as well and
10:19 - navigate to the folder where you want to
10:21 - initialize the project again you can
10:23 - skip this whole part if you downloaded
10:25 - the starting code from GitHub then you
10:27 - don't have to set up a new project just
10:29 - clone the repository into the folder
10:31 - where you want to put it if you worked
10:33 - with react or next JS before then you
10:35 - already have node installed but just to
10:37 - make sure we can check it we can type in
10:39 - node minus minus version and it should
10:42 - show a number here and it should also
10:45 - show a number if you type in npm minus
10:48 - minus version which is the node package
10:50 - manager that we use to install packages
10:52 - then as usual the easiest way to set up
10:55 - a newer next.js project is to use the
10:57 - create Next Step command which looks
10:59 - like this we write npx not npm but npx
11:03 - and then create minus next minus app and
11:09 - then add latest and then we run this
11:12 - we confirmed this year with yes with a
11:15 - wire and then we have to answer some
11:17 - questions we have to give our project a
11:20 - name I'm gonna call this next.js
11:23 - e-commerce
11:25 - enter would you like to use typescript
11:27 - with this project yes we always use
11:30 - typescript would you like the excellent
11:32 - eslint helps us find problems in our
11:35 - code and you always want to use this as
11:37 - well so again we select yes would you
11:39 - like to use Tailwind CSS with this
11:41 - project we select yes here as well which
11:44 - is really cool because this way we don't
11:45 - have to configure Tailwind CSS ourselves
11:49 - it's already set up
11:51 - would you like to use the srz directory
11:53 - and this is just for organization I
11:55 - prefer this so I select yes here as well
11:58 - use the app router recommended yes this
12:01 - way we use the new index.js13 app router
12:03 - instead of the old Pages directory again
12:06 - if you have never worked with the app
12:07 - router before you can follow my next.js
12:10 - beginner tutorial where we use the app
12:11 - router so we select yes here as well and
12:14 - this is really important because
12:15 - otherwise the project structure will be
12:17 - completely different
12:19 - so make sure to select yes would you
12:21 - like to customize the default import
12:22 - areas no
12:24 - and then we have answered all questions
12:27 - we have to wait a few seconds and this
12:29 - sets up a newer next.js project
12:31 - okay when this has finished we can close
12:34 - the command line and now we should see
12:36 - our new project here next.js e-commerce
12:39 - we want to open this in vs code so I
12:42 - right click open encode if you don't
12:44 - have this option here then you can also
12:46 - just open the S code manually and drag
12:48 - and drop the folder in there we'll open
12:50 - it over the menu you will know how to
12:53 - open a project I would assume and if you
12:56 - don't know that the starting project
12:58 - then open the starting project instead
13:00 - as usual this gives us a project with a
13:03 - lot of configuration already set up
13:05 - and we can open the command line which
13:08 - you can do overviewer terminal or use
13:11 - the shortcut next to it
13:13 - and then we run this project in
13:15 - development mode with npm run Dev we
13:19 - type this into the terminal down here
13:21 - which starts this project on localhost
13:24 - 3000.
13:25 - so now we can open a browser window
13:28 - navigate to localhost 3000 and we should
13:31 - see this default template here but this
13:34 - is not so interesting for us right now
13:36 - so we can close this again
13:38 - and we also stopped the execution of our
13:41 - npm run Dev by pressing Ctrl Z while our
13:45 - cursor is in the terminal down here and
13:48 - then we confirm this with wire because
13:50 - now we want to install some packages
13:52 - again this is only necessary if you have
13:55 - not downloaded the starting code because
13:57 - in the starting code I already installed
13:59 - all the packages to make sure that you
14:01 - have the same version number as me in
14:03 - the future so you can skip this part if
14:05 - you don't know that the starting code
14:06 - from GitHub alright and we need quite a
14:09 - few packages in this project and we will
14:11 - install them all at once now at the
14:13 - beginning
14:14 - with npmi which is short for install and
14:17 - then we type in a few different packages
14:19 - and you have to make sure that you spell
14:21 - all of them correctly because otherwise
14:23 - it will not install the correct run ok
14:25 - so Tailwind CSS is already set up we
14:28 - should actually zeal
14:30 - the dependency here in the package.json
14:33 - file because we selected Taiwan CSS when
14:36 - we run the create Next Step command so
14:39 - this is already installed typescript as
14:41 - well and some other configuration so the
14:44 - first package we install here is Daisy
14:46 - UI in our lowercase like this which is a
14:49 - component library for Tailwind CSS I
14:52 - will show you how this looks in a moment
14:54 - the second dependency is Prisma and
14:57 - between each of these packages we are at
14:59 - the space the next one is ADD
15:02 - Prisma slash client
15:06 - space the next one is next minus of
15:11 - space
15:12 - then we have ADD of Slash
15:15 - Prisma minus adapter
15:18 - space
15:19 - prettier
15:21 - the space and we are almost done
15:23 - eslint minus config minus prettier
15:30 - space and one more
15:32 - prettier minus plug in minus tail wind
15:37 - CSS so you can pause the video and type
15:40 - this out by hand if you haven't
15:41 - downloaded The Styling code
15:43 - and then we install all of them by
15:45 - pressing enter
15:47 - which we take away
15:49 - and where did I get all these install
15:51 - commands from well from the
15:53 - documentation of each of these packages
15:55 - they will tell you exactly what you have
15:57 - to install but I prepared all of this
15:59 - for you already and so you can just
16:00 - follow my instructions and now all these
16:03 - dependencies are added here to the
16:05 - dependencies Block in the package.json
16:07 - now in case you're wondering why do we
16:10 - install all of them in the dependencies
16:12 - and not in Dev dependencies because some
16:15 - things like eslint or typescript are
16:17 - only used in development so usually we
16:20 - install them in depth dependencies so
16:22 - that we don't upload our project in
16:24 - production but in xjs this is actually
16:26 - not necessary you can install everything
16:28 - in dependencies because the packages
16:31 - that we don't use in production will
16:33 - automatically be stripped away when we
16:35 - build a project so there's no reason to
16:37 - use the dev dependencies block okay and
16:39 - then I said that we also want to install
16:41 - some extensions that make working with
16:43 - our project more comfortable again all
16:45 - of the setup is explained in the
16:47 - documentation of each of these packages
16:50 - but I prepared all of this for you
16:52 - already so you just have to follow my
16:54 - instructions so this is how you normally
16:56 - set up Tailwind CSS in a project you
16:58 - have to install some stuff and you have
17:00 - to add some configuration files but this
17:02 - is already done for us when we use the
17:05 - create next app command it already takes
17:07 - care of all of this for example you can
17:09 - see these directives here we can
17:11 - actually look into our project
17:13 - and they are set up in the globals.css
17:16 - file up here
17:17 - but we still have to improve our editor
17:20 - setup which you can find here under
17:22 - editor setup in detailing documentation
17:24 - here they recommend that we install this
17:27 - intellisense extension which we will do
17:29 - and also that we set up Tailwind with
17:31 - predia which is this chord formatting
17:33 - package that we installed we will do
17:36 - both of this again most of this is
17:38 - already done in the starting code on
17:40 - GitHub but you still have to install the
17:42 - extensions so you should still follow my
17:44 - instructions even if you were downloaded
17:46 - The Styling code so back into our
17:48 - project we go to the extensions tab
17:51 - which is this button here
17:54 - and research for
17:57 - Tailwind
18:00 - and then we want this one here the
18:02 - official Taiwan CSS intellisense plugin
18:05 - we installed this
18:06 - and this gives us Auto completion for
18:08 - Tailwind classes which is very useful
18:10 - working without this is really really
18:12 - almost impossible in my opinion so we
18:15 - need is extension and they also
18:17 - recommend some configuration down here
18:20 - which you may do as well so they
18:22 - recommend this file Association setting
18:24 - and to change the editor quick
18:26 - suggestions so let's go into the
18:29 - settings which we find under file
18:31 - preferences and then here settings
18:35 - in the settings search up here we type
18:37 - in files
18:39 - Association we don't have to type it out
18:42 - completely we just want to find this
18:44 - setting here here we click on add item
18:47 - entry type in a star
18:49 - dot CSS and for the value we type in
18:53 - Taiwan CSS our lowercase like this okay
18:57 - and this way Tailwind syntax Works in
19:00 - CSS files so now when we open Global CSS
19:03 - again this quickly lines up here again
19:05 - if you remember there was quickly lines
19:07 - under these lines up here
19:09 - but not anymore with the setting and we
19:12 - want to change another setting as well
19:14 - which is really useful we search for
19:16 - editor
19:17 - quick suggestions
19:20 - and they are off for Strings by default
19:22 - we want to change this to a on
19:26 - because this way we get other completion
19:28 - inside strings and Tailwind CSS classes
19:31 - are strings and we want Auto completion
19:33 - for them to pop up automatically so we
19:35 - change this to on and these steps you
19:38 - have to do even if you downloaded the
19:40 - starting code from GitHub because I
19:42 - can't change your IDE settings for you
19:44 - you have to do this yourself then we
19:46 - also need a little bit of configuration
19:48 - for this UI which is this component
19:51 - library that we installed earlier we
19:53 - already did this step up here when we
19:55 - installed the dependence here but we
19:57 - have to add something to the Tailwind
19:59 - config file so we go back into our
20:02 - project
20:03 - and open the Tailwind
20:06 - config.js file and then we go into this
20:09 - plugins array here and then we want to
20:12 - enter this part here require there's a
20:14 - UI
20:15 - you can type this out by hand
20:18 - we can also delete this whole theme
20:20 - block here because this sets this
20:22 - background image that we don't need
20:24 - anymore we will set our own background
20:26 - color later
20:28 - and then I want to configure the daisy
20:30 - UI theme
20:31 - so again this UI is a component Library
20:34 - so we have different components here
20:35 - that are already styled like buttons for
20:38 - example in different colors
20:41 - model dialogues that we can use are
20:43 - kinds of stuff so that we don't have to
20:45 - set up all of this ourselves
20:47 - progress bars whatever and this comes
20:50 - with a custom theme but we can configure
20:52 - this theme appears actually a really
20:54 - cool theme generator you can find this
20:57 - under daisyui.com
20:59 - the docs tell you how you can customize
21:01 - the theme
21:02 - and they also have this random generator
21:05 - which is really cool so this lets you
21:07 - generate a random theme and you can just
21:10 - copy paste this into your Tailwind
21:12 - config file so if you want you can
21:14 - generate your own theme on this ui.com
21:16 - you can also keep the default theme I
21:19 - have prepared a theme which I put in the
21:21 - Tailwind config file again this is
21:24 - already added to the starting code I'm
21:26 - gonna copy paste this in here I will
21:28 - also add a link to this file under the
21:30 - video so you can copy paste it from
21:32 - there again you can skip this step or
21:34 - you can generate your own theme if you
21:36 - want but this is the theme I will use it
21:38 - sets different colors like the primary
21:40 - color accent color background color and
21:42 - so on and I also set a background color
21:45 - in here in this body block this is not
21:48 - mentioned here in the docs because this
21:50 - is not part of the default theme but
21:52 - this way we can change the background
21:54 - color we could also do this in the
21:56 - global CSS file the benefit of doing
21:58 - this here inside the theme is that we
22:00 - could later create a different theme
22:02 - like a Dark theme for example with a
22:04 - different background color instead of
22:06 - hard coding this into our globals.css
22:08 - file again you can copy paste this from
22:10 - the link under the video if you're not
22:12 - using the starting code okay we save the
22:15 - changes to this file then we go into the
22:17 - globals.css file and here we want to
22:20 - delete everything except for these three
22:22 - Tailwind lines here at the top they are
22:24 - necessary for the Tailwind configuration
22:26 - and the classes that we can use in our
22:28 - code but we already set up our own
22:30 - background color so we don't need this
22:31 - and we also don't need any of these CSS
22:34 - variables here
22:36 - so we delete this and save this file
22:38 - next we want to configure prettier for
22:42 - Tailwind CSS so we have this automatic
22:44 - class ordering I was talking about this
22:46 - is also very useful we already have
22:49 - prettier installed and we also installed
22:53 - this prettier plug-interian CSS earlier
22:56 - when we installed all the packages but
22:58 - we have to add a little bit of
22:59 - configuration as mentioned here so back
23:02 - into our project we want to open our
23:05 - Explorer here so we click on this icon
23:07 - and here in the root folder we create a
23:09 - new file
23:10 - with this execut name prettier Dot
23:15 - config.js
23:18 - and in here we insert this you can pause
23:20 - the video and type this out by hand or
23:22 - copy paste it from the GitHub Link in
23:24 - the description I know setting up all of
23:27 - these tweets is a bit tedious but it
23:28 - really makes it easier to work with our
23:30 - project later prettier also has an
23:33 - extension that we should install
23:34 - otherwise we can only execute it over
23:36 - the terminal but it's much more
23:38 - convenient to execute this with a
23:40 - shortcut with a keyboard shortcut so in
23:42 - the extension search we type in prettier
23:46 - entry one installed this extension here
23:49 - click on install
23:50 - then we want to make this the default
23:52 - format on so that when we click the
23:54 - formatting shortcut on our keyboard it
23:56 - uses pretty on instead of another
23:58 - formatter so again we open the settings
24:00 - over file preferences settings
24:04 - and research for default formatter
24:09 - and we want to change this from none to
24:12 - prettier which should be somewhere
24:15 - in this list you probably already
24:17 - thought yeah right here
24:20 - so now we can use the formatting
24:23 - shortcut which is alt shift F on Windows
24:27 - by default to use prettier to format our
24:29 - files and I just did this and as you can
24:32 - see I changed the intendation because
24:34 - prettier is very opinionated formatter
24:36 - they don't give us a lot of
24:37 - customization options instead they have
24:39 - a lot of rules that will automatically
24:41 - be applied when we use prettier to
24:43 - format the file like using two spaces
24:46 - for intendation for example pretty or is
24:48 - very useful because it also
24:50 - automatically adds semicolons in the
24:52 - correct places it adds line breaks when
24:54 - necessary it's really much better than
24:56 - the default formatter and we are almost
24:58 - done with our configuration but we still
25:01 - have to set up prettier to work properly
25:03 - together with eslant otherwise they can
25:05 - conflict again this is described in the
25:07 - next JS documentation we already
25:10 - installed eslint config prettier earlier
25:12 - now we have to go into this eslint RZ
25:16 - Json file and make a little change down
25:18 - so we search for
25:20 - Json what we do is we turn this value
25:24 - here into an array by surrounding this
25:26 - with scrap brackets entry at the second
25:29 - string in here
25:30 - which just stays prettier
25:33 - we saved us and this little change makes
25:36 - sure that eslint and prettier don't
25:38 - conflict with each other there are two
25:41 - more extensions that I want to install
25:43 - that are very useful
25:46 - for one eslint has an extension I
25:49 - already installed this one I recommend
25:51 - that you install this as well because
25:52 - this way we see our eslint warnings
25:55 - directly in our code editor and we don't
25:57 - have to execute a terminal command all
25:59 - the time and one more
26:01 - Prisma which is the orm that we will use
26:05 - with our mongodb database also has an
26:07 - extension
26:09 - this one is also incredibly useful
26:11 - because later when we set up our schema
26:13 - file we get syntax highlighting there we
26:15 - get Auto completion and this also helps
26:18 - us format this file properly so I
26:20 - recommend that you install this as well
26:22 - that's it for all the configuration and
26:25 - extensions we have to set up I just want
26:27 - to install one more package that I
26:29 - forgot earlier so again we open the
26:31 - terminal and type in npmi sort Cod again
26:35 - I will put this one in the starting code
26:37 - as well this is just another package
26:39 - that we will need later so make sure to
26:41 - install this and it should be added to
26:44 - the package.json down here okay we can
26:47 - close all of these tabs here all the
26:50 - packages and extensions are installed
26:52 - and configured I also set up a few
26:55 - images for this project again I added
26:57 - them to the starting code but if you set
26:59 - up the project manually I will also link
27:01 - these images in the description under
27:03 - the video so you can download them from
27:05 - there I added these images to this
27:07 - project for one I replaced the fluff
27:09 - icon here I use this logo instead of the
27:11 - default fav icon I also downloaded this
27:14 - open graph minus image into the app
27:16 - folder this is the social media preview
27:19 - image which will be shown when via copy
27:21 - paste a link to our website on social
27:22 - media on Twitter or Facebook for example
27:25 - this file needs this exact name and it
27:27 - has to be added right in the app folder
27:29 - again you can download it and put it in
27:31 - there if you're not using the starting
27:33 - code and two more images that we will
27:35 - use throughout this project are inside
27:37 - this assets folder so you can create a
27:40 - new folder inside the app folder here
27:42 - colored assets
27:43 - and put these two images in there for
27:46 - one it's the logo we will use for this
27:47 - website and then this profile pic
27:50 - placeholder in the case a user is logged
27:52 - in but they don't have a profile picture
27:54 - okay again I will take the project as it
27:57 - is right now I will push it to GitHub I
27:59 - will call this Branch starting code or
28:01 - starting point and I will link it under
28:03 - the video description so you can
28:05 - download this whole thing without having
28:07 - to set it up manually but it's still
28:09 - useful to know how to set up all of this
28:11 - yourself manually alright and in the
28:13 - next section we will set up our mongodb
28:16 - database and then we can start coding
28:18 - all right next we want to set up our
28:20 - mongodb database and the easiest way to
28:23 - do this is to use mongodb Atlas which is
28:25 - a cloud hosting service for mongodb and
28:28 - they also have a free tier available
28:29 - that we can use to build our project so
28:31 - you can search for mongodb Atlas on
28:34 - Google and then just click on the link
28:36 - you'll find here we have to create an
28:38 - account and log in you can click here
28:40 - and start create the website probably
28:42 - looks a bit different in the future just
28:44 - create a free account log into this
28:46 - account I already have an account and
28:49 - here I want to set up a new project I
28:52 - already have a project but that's from
28:53 - my next JS course I create a new project
28:56 - here
28:58 - again the UI might look a bit different
29:00 - on your side just find a button that
29:03 - says create a new project
29:04 - then we give this project a name again
29:07 - I'm gonna call this next.js e-commerce
29:10 - you can give this any name you want
29:12 - we click on next yeah this is already
29:15 - set our automatically then we click on
29:18 - create project and we have to wait a
29:20 - moment
29:22 - and then we want to create a database in
29:24 - this new project
29:25 - here we can select m0 which is the free
29:28 - tier but this is more than enough to
29:30 - build a little practice project you can
29:32 - even use this for a small production
29:33 - websites by the way we can select where
29:36 - our database is stored and in what
29:39 - region we can keep the default settings
29:42 - here you can change the name of this
29:45 - cluster but you can also keep it as
29:46 - cluster zero we don't have to change
29:48 - anything else and we click on Create and
29:51 - now we have to select mountains or Hills
29:54 - okay this is a hill this is a here I
29:57 - don't know if this right here is a here
29:58 - let's see here we are we are a human
30:02 - then we have to set up a username and a
30:04 - password to later log into our database
30:08 - I want to set the username to a Florian
30:11 - I keep the passport here and we click on
30:13 - create user
30:15 - then we have to add the IP address from
30:17 - where we want to connect to this
30:19 - database in development we are
30:21 - connecting from our local machine from
30:24 - our computer right so we have to add our
30:26 - current IP address with this button but
30:28 - this is already done down here
30:30 - and we have set up a user and everything
30:32 - then we can click on finish and close
30:35 - and then on go to a databases and now we
30:39 - have a hosted mongodb database I like
30:42 - mongodb Atlas because they take care of
30:44 - a lot of stuff for you and that you
30:45 - otherwise have to configure yourself
30:47 - like for example replica sets which as
30:50 - far as I know are additional observers
30:52 - that contain the exact same data as your
30:55 - database just in different locations in
30:57 - case one of them goes down at least this
30:59 - is how I understand it but this is
31:01 - already set up in mongodb Atlas by
31:03 - default okay and now what I want to do
31:06 - is I want to go to our collections which
31:08 - we can do over this button
31:10 - you can also click on data services here
31:12 - and of course we don't have any data in
31:15 - our database yet but I want to add some
31:17 - data manually I want to add some
31:19 - products here to work with and later we
31:22 - will add the page to our website where
31:24 - we can add products over a form but for
31:27 - now we add them manually
31:29 - we have to give the database a name
31:31 - I'm going to call it e-commerce we want
31:35 - to create a collection called products
31:38 - and we don't want to change any of these
31:40 - additional preferences we click on
31:42 - create
31:44 - and now we have this products collection
31:46 - here and here we want to add one product
31:49 - which we can do over in the document
31:51 - okay and for now we will just use some
31:54 - dummy data but the names of the fields
31:57 - are important because we will create our
31:59 - Prisma schema from the documentary
32:01 - Creator so we have to decide what fields
32:04 - we want to have in a product document we
32:07 - want each product to have a name right
32:10 - just gonna call this product name again
32:12 - this is just dummy data for now
32:14 - then we add another field this one will
32:17 - be the description
32:21 - product description
32:26 - each product we have in image URL
32:30 - which I spell in camera case like this
32:33 - and for now I just write hdps colon
32:35 - slash slash
32:37 - um
32:38 - product minus image Dot come whatever
32:42 - this is the URL and this is just a
32:44 - placeholder for now doesn't matter
32:47 - then we add the field for the price
32:51 - and all of these fields are strings by
32:54 - default but we want to change the price
32:56 - to Aint 32 so this is a number
33:00 - and again we put the placeholder in here
33:03 - 999 doesn't matter but we store the
33:06 - price as an integer not as a float even
33:09 - though a price can have decimals for
33:11 - cents but you can't store prices as
33:14 - floats because floats are not exact if
33:17 - you want to know why floats are not
33:19 - exact you can Google this but you should
33:21 - store prices in zense this way we always
33:24 - have the exact number so this is why we
33:26 - don't select double or decimal here but
33:28 - the normal int okay and we insert this
33:31 - dummy product into our database and now
33:34 - it's here in our products collection and
33:37 - as I already mentioned we use Prisma to
33:39 - work with our mongodb database this is a
33:42 - library that we can use in next.js or
33:44 - also in node.js and this just makes it
33:47 - easier to work with our database because
33:49 - it gives us a nice client on which we
33:51 - call these different functions for the
33:53 - different database operations it gives
33:55 - us types and everything and Prisma is a
33:58 - very popular one especially for next Js
34:01 - again the installation and set up for
34:04 - Prisma is described in the Prisma
34:06 - documentation but I will show you each
34:09 - step in this video so we go back into
34:12 - our project and we already installed the
34:15 - package for Prisma now we open the
34:18 - command line again
34:19 - entry execute npx again not npn but npx
34:26 - Prisma in it spell it out exactly like
34:29 - this we execute this
34:31 - and this does two things for one it
34:34 - created this dot end file with the
34:37 - database URL here inside it but this is
34:40 - not the correct connection string as you
34:42 - can see this is just a placeholder we
34:44 - get the correct connection string out of
34:47 - our Atlas backend here somewhere here is
34:49 - a button that says connect I think we
34:52 - see it when we click on data services
34:53 - here's the connect button
34:56 - and here on drivers we can find this
34:58 - connection string we can ignore these
35:01 - other instructions because we don't use
35:03 - the native mongodb driver we use Prisma
35:05 - to work with our database but we need
35:07 - this part here so we copy this
35:10 - into our project
35:12 - entry replace this part here in the
35:15 - string
35:17 - then we also have to replace this part
35:20 - here with the angle brackets for the
35:22 - actual password so we paste this in here
35:24 - and we also have to insert the database
35:27 - name here after the slash this is the
35:30 - name we gave our mongodb database so
35:34 - let's see here
35:35 - I think I call this just e-commerce
35:37 - right
35:38 - you can see this in the collections here
35:40 - this is the name we care about
35:43 - we enter this same name here after the
35:45 - slash otherwise this creates a newer
35:47 - database but we want to use the database
35:49 - that we already set up then we can
35:52 - delete these commands up here they are a
35:54 - bit confusing and unnecessary
35:57 - and then we also want to add this dot
35:59 - end file to the git ignore so that we
36:01 - don't push our database credentials to
36:03 - GitHub so we open the dot get ignore
36:06 - can scroll all the way to the bottom and
36:09 - add dot end here and now this is grayed
36:12 - out which indicates that this file is
36:14 - not pushed to GitHub now normally in the
36:17 - next JS project you put your credentials
36:20 - into this dot NF dot local files and
36:22 - project configuration goes into the dot
36:25 - end file the problem is Prisma by
36:27 - default doesn't look into this
36:29 - inf.logger file it looks into the normal
36:30 - end file so the easiest way to handle
36:33 - this is to just put our credentials
36:35 - directly into dot nth this is the same
36:37 - what we also do in a normal node.js
36:39 - project because otherwise we have to add
36:41 - additional packages and configuration to
36:44 - make Prisma look into this dot local
36:46 - file but I don't want to do this here
36:48 - and it's also not necessary because
36:50 - putting credentials into the normal.n
36:53 - file is totally fine you just have to
36:55 - make sure that you put it into the git
36:56 - ignore file so you don't push it to
36:58 - GitHub okay and the second thing that
37:00 - the press my Inlet command that we
37:02 - executed earlier did is it created this
37:05 - Prisma folder here with this
37:08 - schema.prisma file inside it here we
37:10 - want to change the provider inside data
37:12 - source DB not appear in the client but
37:15 - down here from broadcast SQL to a
37:18 - mongodb because we are using a mongodb
37:21 - database and you can also use Prisma
37:24 - with SQL databases and this is the part
37:27 - here that makes Prisma look in the end
37:29 - file for this database URL here that
37:32 - contains the connection string so the
37:34 - spelling of this variable has to be the
37:36 - same as whatever is entered in here and
37:39 - as you can see we also have syntax
37:41 - highlighting in here just like a normal
37:43 - typescript code for example but this
37:45 - only works because we installed the
37:47 - Prisma extension earlier
37:50 - this gives a syntax highlighting Auto
37:52 - completion formatting and so on
37:54 - otherwise the escort would handle this
37:56 - like a plain text file okay and here's a
37:59 - very cool thing we can do we already
38:01 - added the damier product to our database
38:04 - right and we added the name of the
38:06 - database to the connection string
38:08 - Ecommerce
38:09 - now we can tell Prisma to pull the data
38:13 - that we added to our collection and
38:16 - generate a schema from this data so we
38:19 - don't have to set us up ourselves so
38:21 - remember we have a name description
38:22 - image URL which are all strings and this
38:25 - price which is a number
38:27 - now in the command line we can type
38:30 - npx
38:31 - Prisma
38:34 - this is the exact command we execute
38:37 - this
38:38 - this shows an error because I haven't
38:40 - saved the changes to the schema.press
38:43 - modifier yet so we save this file and
38:46 - execute this again now it should work
38:49 - it opens this window here because we
38:51 - have to allow this to execute on windows
38:54 - so yeah just click on allow access and
38:57 - you won't have to do this again in the
38:59 - future here it says introspected one
39:01 - model and wrote it to a schema.prisma
39:04 - and as you can see now we have our
39:06 - products model here with the name
39:08 - description image URL and price the
39:11 - correct types and the idea is set up as
39:14 - a mongodb object idea this is called
39:17 - introspection this way you can invert
39:19 - the Prisma schema from the data you
39:21 - already have in the database but you can
39:23 - also do it the other way around you can
39:25 - also make changes to the schema and push
39:27 - these changes to a mongodb and we
39:30 - actually want to do this now because I
39:32 - want to add some more stuff in here that
39:35 - we can't really generate through
39:36 - introspection we want to add this
39:39 - created add
39:41 - timestamp which will be of type date
39:44 - time and again we get Auto completion
39:46 - because we installed the Prisma
39:48 - extension
39:49 - and then afterwards you write dot add
39:52 - default
39:53 - and in here we pass now
39:56 - which is a function
39:58 - this means when we create a new product
40:00 - it will automatically set the created
40:02 - timestamp to the correct time
40:04 - and then we also add an updated ad
40:09 - timestamp which again is date time
40:12 - until we add this updated ads annotation
40:15 - which takes care that this timestamp is
40:18 - automatically updated when we modify a
40:20 - product and now we have the formatting
40:23 - keyboard shortcut which on Windows is
40:25 - shift alt F we can format this file but
40:28 - they want us to configure a default
40:30 - formatter let's see here yeah here we
40:32 - select Prisma which is the Prisma
40:34 - extension
40:35 - and now it formats this file properly I
40:39 - don't know what the keyboard shortcut to
40:40 - format is on Linux and Mac but you can
40:43 - Google this if you don't know it there's
40:45 - one more thing I want to do on so our
40:46 - collection is called products right this
40:49 - is the same name our collection SEO and
40:51 - you usually call this the plural of the
40:54 - word because this contains multiple
40:55 - products but when we work with our data
40:59 - in our app we want the operations to be
41:01 - called on dot product and not DOT
41:04 - products for example I want to call
41:06 - product.create or product.find and not
41:09 - products.create because the program is a
41:12 - bit misleading and I also want the model
41:14 - name to be capitalized so we change the
41:16 - model name to a product singular but now
41:20 - we have to tear Prisma to what
41:22 - collection this is connected right
41:24 - because this collection is called
41:25 - products the name is different we can do
41:28 - this by going down here below the last
41:30 - field and then we write two ads map and
41:35 - here we can add the name of the
41:36 - collection lowercase products and plural
41:39 - now this model is connected to this
41:41 - collection and this way the model and
41:43 - the collection can have different names
41:46 - and now instead of pulling the changes
41:48 - from the database into the schema we
41:50 - want to push the changes from the schema
41:52 - into the database
41:54 - so instead of DB pull we execute npx
41:58 - Prisma DB push
42:00 - so that these changes will be applied to
42:03 - our mongodb database
42:05 - let's execute this
42:08 - okay it says that the database is
42:11 - already in sync so it seems like the
42:13 - changes we made in our schema doesn't
42:15 - require any changes in Atlas but it also
42:17 - doesn't hurt to execute this throughout
42:19 - this tutorial we will make some more
42:21 - changes to our schema here so this is
42:23 - not the last time we have modified this
42:25 - and we want to execute one more command
42:27 - npx
42:29 - Prisma generate make sure to spell it
42:33 - correctly and then we run this
42:35 - this generates the Prisma client which
42:37 - you can use to call our different
42:39 - database operations on and whenever you
42:42 - make changes to your schema like we
42:44 - changed the name of the model here then
42:46 - you have to regenerate as Prisma client
42:48 - so that you can use this new model in
42:50 - your code and you get Auto completion
42:52 - and everything but again we will do this
42:54 - a few more times throughout this
42:56 - tutorial so you will understand when you
42:58 - have to do this next we need to
43:00 - initialize this Prisma client like it is
43:02 - shown down here by calling the press my
43:05 - client Constructor and we want to make
43:07 - this prismaclient reusable throughout
43:09 - our app so we put this into a separate
43:11 - file
43:13 - for this we go into the srz folder here
43:16 - where all our project source code is in
43:18 - in here we create a new folder called
43:21 - lib lib is just a naming convention for
43:24 - a folder where people usually put like
43:26 - utility functions for example or
43:28 - functions that use other packages like
43:30 - Prisma in our case but it's up to you
43:33 - what folder structure you follow
43:36 - in lib I want to put another folder
43:39 - called DB just for organization DB
43:41 - obviously stands for database and in
43:44 - here we put a file which we call
43:46 - prisma.ts this is a typescript file
43:50 - to use Prisma in development mode and
43:52 - xjs we need a little bit of
43:55 - special configuration which is described
43:58 - in the Prisma documentation because when
44:00 - we save a project the app is restarted
44:03 - right and we don't want to set up a new
44:06 - Prisma client every time this happens
44:08 - so we use the code that is described
44:10 - down here this sets up a new Prisma
44:13 - client and adds it to This Global this
44:15 - object which is just a way to make this
44:18 - client globally available as a Singleton
44:21 - throughout our app and only if the
44:23 - Prisma client doesn't exist on This
44:25 - Global this object then we instantiate a
44:28 - new one and this is only executed in
44:30 - development in production this is not
44:32 - necessary so back into our project I
44:36 - paste the code we just saw you can pause
44:38 - the video and type this out by hand or
44:40 - again copy it from the GitHub repository
44:42 - and then I press the shortcut again to
44:45 - format this file you don't have to do
44:46 - this but the cool thing is that since we
44:48 - have pretty uninstalled it automatically
44:51 - adds semicolons for example and it also
44:54 - replace the Zinger chords for double
44:56 - quotes because again prettier is an
44:58 - opinionated chord format so they make
45:00 - some decisions for you like not using
45:02 - single chords for example but again if
45:04 - you use this or not it's up to you I
45:07 - recommend that you use it and now we are
45:09 - ready to use Prisma in our project and
45:12 - our database is already set up so now
45:14 - the fun part can begin now we write
45:17 - actual code just one more thing I want
45:20 - to delete our dummy product here we only
45:22 - needed this for introspection but we
45:25 - will later add actual products through
45:27 - our app so let's delete this document
45:31 - and in the next section we will add our
45:33 - first page to our website a page where
45:36 - we can add a newer product and for this
45:38 - we will use next.js server actions so
45:40 - this will be really interesting
45:42 - okay so back in our project we open the
45:45 - terminal again and we want to start this
45:48 - project in development mode with npm run
45:50 - Dev
45:51 - then we open localhost 3000 to see our
45:55 - website and I put this in split screen
45:57 - so that we can make changes to our
45:59 - website and see these changes live I
46:02 - want to add a new page to our website
46:03 - over which we can add a newer product
46:06 - because without products we don't have
46:08 - anything to display right so we open the
46:11 - right bar here and then in the app
46:14 - folder we create a new folder called add
46:18 - minus product
46:20 - and in here we put a fire page dot TSX
46:25 - this way we can create a page under
46:28 - localhost 3000 slash add minus product
46:31 - if you don't know how routing works in
46:34 - the next js13 app router then I highly
46:37 - recommend that you watch my Nexus 13
46:39 - beginner tutorial first because there I
46:42 - explain all of this why we have to
46:43 - create a page.tsx file how we can create
46:46 - nested sub-roads and so on in this
46:49 - tutorial here I will assume that you
46:51 - already know this stuff okay and in here
46:54 - we can write the code for this component
46:56 - for this page
46:58 - so we export a default function
47:02 - entry carlet at product page
47:06 - as usual the name of this component does
47:09 - not matter the only thing that matters
47:11 - is that we export it from a page.tsx
47:14 - file and from this component we want to
47:17 - return some UI right so let's put a div
47:21 - in here
47:22 - and let's put in H1 in here a headline
47:25 - that says
47:28 - add product let's save this and now we
47:32 - should be able to navigate to a
47:34 - localhost 3000
47:36 - slash add product which is the name we
47:39 - gave this folder where we put this page
47:41 - file in
47:43 - and there's our headline and now we can
47:46 - style this headline using class names
47:48 - and if you haven't used or heard of
47:51 - Tailwind CSS before the way this works
47:53 - is that we don't set up CSS files
47:55 - instead we write our CSS directly in
47:58 - here by using different utility classes
48:00 - that each fulfill a single purpose for
48:03 - example we want to make this text a bit
48:05 - bigger so we can type in and now we get
48:08 - Auto completion because remember we
48:10 - earlier set up Auto completion inside
48:12 - strings in the settings and together
48:15 - with the tailband we escort extension we
48:17 - get this Auto completion here which is
48:19 - really useful
48:20 - for example we have text LG and here you
48:23 - can see what this actually does which
48:25 - CSS attributes this actually changes
48:28 - this sets the font size to this 1.125
48:31 - Ram
48:32 - so when we add this and save our changes
48:35 - the font gets a bit bigger you can also
48:38 - hover over one of these Tailwind classes
48:40 - to see the CSS that this applies it
48:43 - changes the font size and the line
48:44 - height as well again this only works if
48:47 - you have the Tailwind extension
48:48 - installed where do I get these classes
48:51 - from well either you can just see what
48:54 - other completion suggests to you and
48:56 - sometimes this is enough but often you
48:58 - just have to look in the Tailwind
48:59 - documentation
49:01 - so they describe all these different
49:03 - classes that you can use at first this
49:05 - can seem overwhelming but you actually
49:07 - get used to this very fast and you don't
49:10 - have to read all of this you can just
49:12 - Google for Tailwind box Shadow for
49:15 - example or you can search in the quick
49:17 - search here and then you will find the
49:19 - necessary classes you have to use to
49:21 - apply a box Shadow for example
49:24 - so let's add some more we want to make
49:26 - the text bigger we want to add the
49:27 - margin bottom for which we have this MB
49:30 - minus classes
49:32 - we use MB minus three
49:34 - this adds a bit of margin to the next
49:37 - element below but we can't see it yet we
49:40 - also want to make the text bold which we
49:43 - can do with font minus bold
49:45 - and since we set up the prettier
49:48 - extension for Tailwind earlier we can
49:50 - now reformat this code with our
49:52 - formatting shortcut again on Windows
49:54 - this is shift IDF and it will
49:57 - automatically reorder these classes here
49:59 - to the appropriate order as you can see
50:01 - it put the margin button to the front
50:03 - Tailwind has a special convention for
50:06 - the order of these classes I don't know
50:08 - what the rules exactly they follow but
50:10 - the prettier extension makes sure that
50:12 - the same order is applied everywhere
50:14 - which really makes it easier to keep an
50:17 - overview over these Clauses then below
50:19 - the H1 I want to put a form
50:23 - and in this form we will later enter the
50:25 - product information to create a new
50:28 - product in our database so this is a
50:30 - normal HTML form tag and in here we put
50:33 - an input
50:35 - which we can give a self-closing tag
50:37 - with a slash and a closing angle bracket
50:39 - and we want to add some props to this
50:41 - input
50:42 - when we save this I think we should
50:44 - already see something here we have this
50:46 - very not good looking unstyled input
50:49 - here we can style this again with
50:52 - K1 classes by adding the class name prop
50:55 - so I want to add some Merchant bottom to
50:59 - this input and I want to set the width
51:03 - to 100 for which we have this W of foil
51:06 - table class when we save this the input
51:10 - field gets the margin and the full width
51:12 - now one downside of raw Tailwind is that
51:15 - you start with completely unstyled
51:18 - elements right and you have to Define
51:20 - all this yes as yourself this can be a
51:22 - bit overwhelming because you often have
51:25 - to add a lot of classes to create a UI
51:27 - that looks good this is why we also use
51:29 - Daisy UI in this project this UI
51:32 - basically adds more convenience classes
51:35 - that we can use to style different
51:37 - components for example somewhere here is
51:40 - a text input
51:41 - this is what we want to add to our
51:43 - project and this one here looks better
51:45 - than the one we have right now right
51:48 - and let's say we want to use text input
51:50 - with border here we can see the jsx we
51:54 - already have an input and here are the
51:56 - class names and this input and input
51:58 - border classes are coming from this UI
52:00 - they simply combine multiple Tailwind
52:03 - classes into a single one so that we
52:06 - don't have to install all of this from
52:08 - zero so let's try this out
52:10 - input and input boiler let's add them
52:12 - here import let's hover over this and as
52:16 - you can see it contains quite a lot of
52:18 - CSS
52:20 - and we want input bordered when we save
52:24 - this our input now looks much better
52:27 - of course we still need some padding
52:29 - here so that's the input field doesn't
52:31 - go all the way to the edges of the
52:33 - screen but we will take care of this in
52:35 - a moment and again we can use the
52:37 - formatting shortcuts to reorder these
52:39 - classes properly so input border moves
52:42 - to the front followed by the remaining
52:44 - classes
52:45 - okay but we still want to add some more
52:48 - props to the input field here
52:51 - for one we want to make it required so
52:54 - that we have to type something in before
52:55 - we can send this form this is taken care
52:58 - of by the browser we have to set a name
53:01 - this way we can get the value out of
53:03 - this input field later and the name will
53:05 - also be named because this field will
53:07 - contain the product name
53:10 - let's also set the placeholder let's set
53:13 - it to name as well and when we save this
53:14 - we get this placeholder here we can type
53:16 - something in and later we will get the
53:19 - product name out of this input field
53:21 - again I use the formatting shortcut to
53:24 - format this properly and it also puts
53:26 - the closing tag into a new line I really
53:29 - like prettier for this reason it also
53:31 - does stuff like adding parentheses
53:33 - automatically so if we remove these
53:35 - parentheses here from the return
53:37 - statement and put it like this instead
53:39 - and use the formatting shortcut again it
53:42 - adds these parentheses automatically and
53:44 - I really like this because it helps you
53:46 - keep your formatting consistent
53:47 - throughout the whole project okay and
53:50 - below our first input field we put
53:52 - another input field for the product
53:54 - description but since the description is
53:56 - usually longer we don't use an input
53:58 - field we use a text area
54:01 - which is basically a big input field
54:03 - where we can put in larger amounts of
54:05 - text over multiple lines
54:08 - we make this required as well
54:11 - reset the name to description
54:15 - and the placeholder as well
54:19 - just with an uppercase deal
54:23 - which by default looks like this we can
54:25 - change the size of this which is really
54:27 - cool
54:28 - but of course the one is stylus using
54:31 - Daisy UI and Tailwind classes
54:33 - Daisy UI gives us text area and text
54:39 - area border
54:41 - and then again mb3
54:44 - and W foil
54:47 - and now it looks like this with rounded
54:49 - corners
54:50 - and some highlighting
54:52 - then we need two more input Fields below
54:55 - for the image URL and the price so let's
54:57 - copy the input field that we already
54:59 - have
55:00 - paste it two times because the styling
55:02 - will be the same
55:04 - we change the name of the third one to
55:07 - image URL like this
55:09 - we change the placeholder to image URL
55:13 - as well in readable form
55:15 - and then we can set the type of this
55:18 - input field to URL this way the browser
55:21 - checks that we actually put something in
55:23 - here that looks like a URL with https
55:25 - and so on otherwise the browser will not
55:27 - accept our input which is really useful
55:30 - and this down here is of course the
55:33 - price
55:35 - we set a placeholder to price as well
55:38 - entries that the type to number because
55:41 - this way we can only type numbers in
55:43 - here and no other characters now one
55:45 - thing that happens when you use Tailwind
55:47 - is that you often have repetition
55:49 - between classes for example all our
55:51 - input Fields here have the same margin
55:53 - bottom and width class applied to them
55:55 - right now you might be inclined to try
55:58 - to get rid of this by creating
55:59 - abstractions like separate components
56:02 - that already include these classes but
56:04 - this is actually not necessary and you
56:06 - shouldn't do this too earlier
56:08 - the Taiwan documentation actually talks
56:11 - about this and one thing they recommend
56:13 - is to just use multi-cursor editing for
56:16 - example if we want to change the margin
56:18 - of all our input Fields here we can just
56:20 - click on the first one and then in vs
56:22 - chord we can press Ctrl D or command D
56:26 - on Mac to select
56:28 - the next occurrence of this word now we
56:30 - have all four Merchant bottom three
56:32 - selected and we can change all of them
56:35 - at once to a different value if you want
56:37 - so this is how you can work efficiently
56:40 - with Tailwind classes even if you have
56:42 - to repeat yourself below the last input
56:45 - field but still inside the form
56:48 - we add a button
56:50 - which was there at product
56:55 - then we go into the opening tag of the
56:57 - button and we set the type to submit and
57:01 - when we have a button with type submit
57:03 - inside the form it will automatically
57:05 - submit this form when we click this
57:07 - button this is just default HTML
57:09 - behavior and this down here is our
57:12 - Button as you can see entailment by
57:14 - default nothing has any style applied to
57:16 - it so right now it just looks like
57:18 - normal text so let's add some class
57:20 - names
57:21 - to style this button
57:25 - we use the daisy button class BTN
57:29 - which Styles this like a gray button we
57:32 - can add some color with BTM primary and
57:36 - I also want this button to take up the
57:38 - full width
57:39 - so we also set this to BTN block
57:43 - which I think just sets a width here of
57:45 - 100.
57:47 - and now it looks much better
57:49 - is our form is ready but again we need
57:52 - some padding on the edges of the screen
57:53 - it looks a bit weird right now but
57:55 - instead of doing this inside this page I
57:58 - want to do it in the layout TSX file
58:01 - remember from my next JS beginner
58:03 - tutorial that this is the root layout
58:05 - it's located directly inside the app
58:08 - folder and this wraps all pages
58:10 - throughout our whole website to be more
58:13 - exact our pages are inside this children
58:16 - component here and this is rendered
58:19 - inside this HTML body and in this layout
58:22 - we can add styling that we want to have
58:24 - applied throughout our whole website for
58:26 - example by default this Intel font from
58:29 - Google fonts is applied to the whole
58:31 - body be at this class name here and this
58:34 - body wraps all pages right now I wanna
58:37 - wrap children into another attack the
58:40 - HTML main tag
58:42 - because each page contains the main
58:44 - content of the page and we will later
58:46 - put enough bar Above This main tag and
58:49 - the footer below for now I want to apply
58:51 - some styling to this main tag again this
58:54 - styling will wrap all pages for example
58:56 - I want to add some padding which we can
58:59 - do with this P minus 4 class now it
59:01 - already looks much better I also want to
59:04 - have some Max and Min width applied to
59:06 - all pages because as you can see this
59:09 - takes up the full width of the screen no
59:11 - matter how big the screen is I want to
59:13 - constrain this for this again we have
59:15 - different Tailwind classes available
59:19 - next minus W lets us set a Max width and
59:24 - I want to use the largest one here which
59:26 - is 7xl and we can see how big this is
59:29 - when I zoom out a bit because when I
59:31 - record my videos I always increase the
59:34 - size on the screen of everything so it's
59:36 - easier to read this is to realize this
59:38 - page and form have and this is also the
59:40 - size it should have on your side so now
59:43 - our Pages don't get bigger than this
59:45 - anymore so this is a 1920 pixel Monitor
59:48 - and Max
59:50 - w7xl is 2080 pixels but of course you
59:53 - can play around with this and use
59:54 - another value if you want but of course
59:57 - I want to have this part here Zen dot on
59:59 - the screen right we can do this with
60:01 - margin order
60:03 - which we set with M minus Auto now it is
60:07 - ascended on the screen and I also want
60:09 - to set a Min width which we can do with
60:12 - Min minus W1 but here we don't have as
60:16 - many different options available there
60:18 - aren't any classes by default for
60:20 - different screen sizes like we have for
60:22 - Max width but we can actually set an
60:24 - arbitrary size and this also works with
60:27 - Max width this also works with other
60:29 - attributes when you want to do this in
60:31 - Tailwind CSS we can add the value in
60:34 - square brackets like this after another
60:36 - minus
60:37 - and in here we can write 300 PX for
60:41 - example for 300 pixels now we set the
60:44 - main width to this arbitrary value of
60:46 - 300 pixels and now when I make the
60:49 - screen very small
60:50 - the page itself never gets smaller than
60:53 - 300 pixels because we don't want to
60:56 - scratch it too much but again you can
60:58 - play around with these values and use
61:00 - other values if you want as usual we can
61:03 - press our formatting shortcuts to have
61:05 - pretty uh realign everything properly
61:08 - and then I also want to change the meta
61:10 - data here in this metadata object we
61:13 - change the title from this default
61:15 - create next app to a flomazon I explain
61:19 - metadata in my nextjs 13 beginner
61:22 - tutorial this will now be the title of
61:24 - the page when we save this we can see a
61:26 - flowmason appear in the tab and this
61:29 - will also show up for example when we
61:31 - paste a link to our website on social
61:33 - media let's also change the description
61:36 - and I set this to our tagline which is
61:40 - we make your wallet cry because we are
61:44 - in e-commerce app
61:46 - so this way we change the metadata
61:48 - throughout our whole website so all
61:50 - pages now have this flomas on as the
61:52 - title and this description which shows
61:54 - up on social media but we can also
61:57 - modify the metadata for specific Pages
61:59 - like for our ads product page for
62:01 - example we go all the way to the top
62:04 - above our component
62:07 - and we export this const metadata here
62:09 - as well
62:10 - you have to make sure that the spelling
62:12 - is correct are lowercase otherwise
62:15 - next.js will not recognize this and here
62:17 - we just want to overwrite the title
62:20 - to the name of the page
62:22 - add product minus and then again the
62:24 - flomas on and when we save this we
62:27 - change the title but only for this page
62:29 - on all other Pages we still have the
62:31 - default flowmas on title and as a
62:34 - reminder as long as we don't use the use
62:37 - client directive at the top of the file
62:39 - this whole component is rendered on the
62:41 - server if we were fetching any data in
62:44 - this component then this data would also
62:46 - be fetched server side and the client
62:48 - would only receive the finished page
62:50 - with the data inside it but here we
62:52 - don't fetch any data it's just static
62:54 - HTML and now when we submit this form we
62:57 - want to store a new product in our
62:59 - database right one way to handle this
63:01 - would be to turn this into a client
63:03 - component so that we can interact with
63:05 - this form client-side and execute
63:07 - JavaScript we could take the input of
63:10 - this form and send it via a fetch
63:12 - request to our own server endpoint which
63:15 - then adds the product to the database
63:16 - this is the usual flow why do we need a
63:19 - server endpoint where we can't make
63:21 - database operation on the client why
63:23 - because this requires us to connect to
63:26 - our database so we need our database
63:28 - credentials and we can't expose our
63:30 - database credentials on the client
63:32 - otherwise the user would be able to do
63:34 - anything they want with our database
63:36 - this is where we have to Route requests
63:38 - like this over our own server so the
63:41 - server actually has the connection to
63:42 - the database and the user can just
63:44 - request to add this object but they
63:46 - can't mess around with our database so
63:49 - again normally we would set up an API
63:52 - endpoint here in our next JS project
63:54 - which we can do with route handlers
63:56 - alternatively you could also set up a
63:58 - separate server like an Express server
64:01 - for example that runs on a completely
64:02 - different project then we would turn our
64:05 - page into a client component so that we
64:07 - can execute JavaScript which is
64:09 - necessary to make a fetch request to our
64:11 - server we would send the product data
64:13 - there and the server would then insert
64:15 - this data into the database but as you
64:17 - already see there are a lot of steps
64:19 - involved and next.js recently introduced
64:22 - other actions which are still in Alpha
64:24 - right now and in a nutshell they are
64:26 - basically a way to do a server mutations
64:28 - directly in our components without
64:30 - having to set up an end point so this is
64:32 - just more concise because we basically
64:34 - just put a function into our component
64:36 - and we can call this function it's very
64:38 - intuitive and it's less work than
64:40 - setting up a separate endpoint so let's
64:43 - go back into our project and see how
64:45 - this works we can declare such a server
64:47 - function directly in a server component
64:50 - if we had the US client directive at the
64:52 - top of the file we could not put it in
64:54 - here but since we don't have any
64:56 - client-side features in this component
64:58 - we can put our server action directly
65:00 - into this file it will be an async
65:03 - function because we make a database
65:05 - operation
65:06 - and let's call it add product
65:10 - we can call the server action from a
65:12 - server component via this form here
65:15 - by adding the action attribute this way
65:18 - we still don't need any JavaScript this
65:20 - fully Works in a server component
65:23 - and here we simply pass our ads product
65:25 - function
65:26 - now when we call this function we get
65:28 - sent the data as form data so we create
65:32 - a parameter form data and it will be of
65:35 - type form data
65:37 - then at the top of this function we add
65:40 - this string that says
65:42 - use server this is very similar to the
65:45 - use client directive that we have to put
65:47 - in a client component this states
65:49 - next.js that this is a server action
65:52 - otherwise this will just not work
65:54 - and in here we can do a database
65:56 - operation so we can cut a weight then we
65:59 - use Prisma which we import from our
66:02 - libdb folder
66:04 - that we set up earlier
66:07 - then when we click dot with the product
66:10 - here where is this coming from this is
66:13 - coming from our schema because we call
66:15 - the model product and this is connected
66:17 - to the products collection in our
66:19 - database if you don't see product then
66:22 - make sure that you executed this npx
66:26 - Prisma generate command that we run
66:29 - earlier because this generates this
66:31 - Prisma client
66:32 - and whenever you make changes to your
66:34 - personal schema you have to recreate the
66:36 - client with the new functions available
66:41 - I want to start this again with npm run
66:43 - Dev and on here we can call functions
66:46 - like
66:47 - create for example to create a new
66:50 - document
66:51 - and we add the data of this document as
66:54 - an argument Within calibrases
66:56 - now in the server function we are
66:59 - allowed to call prisma.create which
67:01 - again does a database operation if you
67:04 - try to call Prisma create in a client
67:06 - component for example when we click a
67:09 - button then this will not work because
67:10 - again database operations can only be
67:13 - done on the server even if you try this
67:15 - you will get an error message because
67:17 - Prisma protects you from accidentally
67:19 - exposing your database credentials on
67:21 - their client so it will throw an error
67:23 - if you try to do this but inside a
67:26 - server action we can do this because
67:28 - this will only be executed on the server
67:30 - this code here never gets to the client
67:32 - so again this is the same as if we would
67:35 - have set up an API route in next.js or a
67:38 - server endpoint in Express for example
67:41 - this is a little server endpoint to make
67:43 - pulse requests on and inside create we
67:46 - can pass data another pair of curly
67:48 - braces and in here we put the actual
67:50 - data of the product we want to create so
67:52 - the name the price description and so on
67:55 - but of course we first have to get the
67:56 - data out of this from data object here
67:59 - so let's go above we can get our values
68:02 - out of the form data by their name we
68:05 - gave this input fields it looks like
68:07 - this we create a cons name
68:10 - equals from data dot get
68:14 - and here we pass the name of this field
68:16 - which in this case is name
68:18 - and this value is now of type form data
68:21 - entry value
68:23 - we can get the actual input
68:25 - by calling to a string on it now the
68:28 - input can be empty so this adds the save
68:30 - call Operator so name is string or
68:33 - undefined later we will also learn how
68:35 - we can call these server actions from
68:37 - client components this is actually
68:39 - possible and then we get the data not
68:41 - passed as form data but as normal
68:43 - arguments you will see all of this later
68:45 - when we call a server action from a
68:47 - server component then we basically have
68:49 - to do it over a form action because this
68:52 - doesn't require any JavaScript and this
68:54 - passes us the data in form of form data
68:57 - okay let's get the other values out of
69:00 - here as well
69:01 - cons description equals form data.get
69:06 - description and again recall to a string
69:12 - then we do this for the image URL
69:23 - and for a price but the price is a
69:27 - number so we wrap this into this number
69:30 - Constructor which passes the number
69:33 - string into an actual number
69:35 - so in here again we pass form data get
69:39 - the name of this field is price
69:43 - we don't have to cut to a string because
69:45 - number can actually handle this value
69:47 - but again from data get can return
69:50 - undefined in which case the number will
69:52 - throw an error so we add a fallback
69:54 - value here with two vertical bars and
69:58 - then we add the zero so this will be the
70:01 - fallback value in case the price input
70:03 - is empty just so that we don't get an
70:05 - error but since we made all these fields
70:08 - here required with this required prop I
70:11 - also want to check in This Server action
70:13 - that we actually got these values
70:14 - otherwise we will throw an error because
70:16 - we don't expect any of these inputs to
70:19 - be empty so let's check if exclamation
70:22 - mark name
70:24 - or exclamation mark description
70:29 - or the image URL is missing or the price
70:33 - is missing
70:35 - then this is invalid input so we will
70:37 - throw an error
70:40 - which was a missing required Fields or
70:43 - whatever you want us to say
70:45 - so now since we checked that these
70:47 - values are defined down here they are
70:49 - guaranteed to be defined
70:51 - so now we can pass the name the
70:54 - description the image URL and the price
70:57 - to Prisma and this will create a new
71:00 - product document with this data and
71:03 - after we added the product I want to
71:05 - redirect to the front page
71:07 - so we call this redirect function but
71:11 - this import here is wrong when we select
71:14 - this it adds the import like this but we
71:16 - want to import this from next slash
71:18 - navigation this is the correct one
71:21 - and then we want to redirect to the
71:23 - front page which we can do like this
71:26 - so now we have some very simple
71:28 - validation here if I try to send this
71:31 - without typing anything in then the
71:32 - browser shows us a message here
71:36 - and it should even detect when this is
71:38 - not a valid URL
71:40 - those are the native browser validation
71:43 - methods that we are using down here with
71:45 - required and the type prop if you want
71:48 - to use something like react hook form
71:50 - here for validation then this is also
71:52 - possible but for this you have to make
71:54 - this a client component because this
71:56 - requires JavaScript but I want to keep
71:58 - this page a server component to show you
72:00 - how you can use server actions from
72:02 - server components later we will also
72:04 - learn how to cut server actions from
72:06 - client components and then you can do
72:08 - everything that requires JavaScript but
72:10 - again in the server component you use
72:12 - this form action here and this simply
72:15 - sends the form data to the server action
72:17 - and later we will also protect this
72:19 - route so that we can only add a new
72:21 - product if we are logged in but we
72:23 - haven't implemented authentication yet
72:25 - we will do this later now one more thing
72:27 - we have to change before we can try this
72:29 - out since server actions are still in
72:32 - Alpha we have to enable them explicitly
72:35 - which we do in the next config file here
72:39 - we go into this next config block we add
72:43 - this experimental block
72:45 - colon curly braces and then here we have
72:48 - this server actions field
72:50 - which we set to true this way we can use
72:53 - server actions in this project
72:55 - one more thing we will have images in
72:57 - our app that we will load from
72:59 - unsplash.com this is just a nice website
73:01 - where you can find free images and we'll
73:04 - use this for our product images if you
73:06 - watch my next JS beginner tutorial then
73:08 - you know that we have to allow the URLs
73:10 - where we want to load images from and we
73:13 - do this also inside the next config you
73:15 - can put it above or below experimental
73:18 - doesn't matter I'm gonna put it above we
73:21 - have this images field again colon curly
73:23 - braces we add a comma here
73:25 - and in here we have this remote patterns
73:28 - value to which we pass an array
73:31 - repairs an array of JavaScript objects
73:33 - so square brackets curly braces
73:36 - and in here we can define a hostname you
73:39 - can add multiple of these if you want to
73:41 - load images from multiple sources and
73:43 - the Base address where we load these
73:45 - images from we add this as a string as
73:48 - images Dot
73:51 - unsplash.com if we don't do this then we
73:54 - will get an error later when we try to
73:56 - load these images
73:58 - so we'll save this and then we have to
74:00 - restart our Dev server it stopped
74:03 - automatically if it didn't press Ctrl Z
74:06 - confirm with wire
74:07 - and execute NP and run Dev again
74:10 - otherwise the changes of next config
74:13 - will not be applied
74:14 - okay now let's add some products and to
74:17 - show you that this works with our
74:19 - JavaScript let's actually disable
74:21 - JavaScript you don't have to do this I
74:23 - just want to show this to you so in the
74:25 - Chrome Dev tools I can press Ctrl shift
74:28 - p
74:29 - can search for disabled JavaScript and
74:32 - just to make sure that this is applied I
74:34 - refresh the page but we have to keep the
74:36 - Chrome Dev tools open when we close the
74:38 - JavaScript will be enabled again again
74:40 - you can get product images from unsplash
74:43 - just go to unsplash.com and search for I
74:46 - don't know product images
74:49 - and use any of these here just open them
74:51 - right click copy image address
74:53 - and then you can use this here as the
74:56 - image URL for the name description and
74:59 - price you can write anything you want I
75:01 - have already prepared some data
75:03 - so this is the title just gonna copy
75:06 - paste this here a description and by the
75:09 - way I use chat gbt to come up with
75:12 - funnier product titles and product
75:13 - descriptions so I didn't come up with
75:15 - this myself
75:18 - so the image here is coming from
75:20 - unsplash again you can copy the image
75:22 - URL from there and I set the price for
75:25 - example to 999 which is 9.99
75:29 - remember that JavaScript is still
75:32 - disabled but when we click add product
75:34 - all of this should work
75:36 - we don't see a loading indicator yet we
75:39 - will add this later but we get
75:40 - redirected to the front page so it seems
75:43 - that this worked let's check our
75:45 - database
75:46 - so in Atlas
75:49 - in our products collection we should now
75:52 - see one entry with this data we inserted
75:54 - and it automatically generates the
75:57 - created ad and updated ad timestamps so
75:59 - this worked and we executed this over
76:01 - our server action here without having to
76:04 - set up a separate server endpoint and
76:06 - without any JavaScript but when we added
76:09 - the product we didn't have a loading
76:10 - indicator right which is not great
76:12 - because we usually want to see that some
76:14 - request is running right now we also
76:16 - want to disable the button so that we
76:18 - can't click it twice now we can't put a
76:21 - loading State into our server component
76:23 - here because the loading State requires
76:25 - JavaScript and state and those are
76:27 - client component features but in a
76:29 - client component we can't put a server
76:31 - action at least not directly in there
76:33 - like we did here but what we can do is
76:35 - we can make only the loading indicator a
76:39 - client component and we can use a
76:41 - special hook to hook into the loading
76:43 - state of this form here even if the form
76:46 - itself is in a server component this is
76:48 - a new hook their introduce just recently
76:50 - it's also still experimental but I want
76:53 - to show you how this works so you know
76:55 - all these different apis that we have
76:56 - available
76:57 - so I want to put the loading indicator
76:59 - directly into this button so we extract
77:02 - this button into a separate component
77:04 - and make it the client component so that
77:06 - we can put the loading state in there to
77:08 - make this button reusable let's put it
77:10 - into a separate components folder not
77:13 - into our app folder here so I right
77:16 - click on sr0
77:18 - entry Creator components folder
77:21 - in here we put a new file
77:24 - which we call
77:25 - from submit button.tsx
77:28 - but of course the name is up to you
77:32 - this will be a client component so we
77:35 - add the use client directive at the top
77:37 - again I explained this in my next JS
77:39 - beginner tutorial
77:41 - then we want to export a component
77:43 - function from here
77:46 - form submit button
77:50 - we want to add some props to this form
77:53 - submit button
77:55 - so we create a type that we call form
77:58 - submit button props
78:00 - equal sign curly braces now if you
78:04 - watched my other next.js and react to
78:06 - turrets then you know that I usually
78:07 - make these props in interface and not
78:09 - the type because it's generally
78:11 - recommended to use interfaces until you
78:13 - need a type but here we do need a type
78:15 - wire because I want to extend this type
78:18 - and you can't do this with interfaces I
78:20 - want to go down here after the closing
78:22 - curly brace
78:24 - right ampersand
78:26 - component props which is then import
78:29 - from react
78:31 - like this
78:32 - and then we add a type to component
78:35 - props which we do with angle brackets
78:37 - and then here we press button as a
78:40 - string
78:41 - component props is a really cool
78:43 - convenience type that we can use and
78:45 - react this way our form submit button
78:48 - will not only accept the props that we
78:50 - put into the form submit button props
78:52 - but also all the props a normal button
78:55 - accepts for example you can disable a
78:58 - normal HTML button with the disabled
79:00 - prop right and instead of putting this
79:03 - value in here directly we can just say
79:06 - okay we want to accept all the same
79:07 - props in normal button expects and this
79:10 - is what component props does again this
79:12 - only works with type and not with
79:14 - interface this is why I made the props a
79:16 - type this time okay but we still want to
79:19 - add two or more values right in our form
79:21 - submit button props
79:23 - the first one is the children prop of
79:26 - type react dot react node
79:30 - in case you don't know what the children
79:32 - prop is this allows us to pass a
79:34 - component between the opening and the
79:36 - closing tag of another component so in
79:39 - the normal button
79:40 - we enter the text inside the opening and
79:43 - the closing tag right like add product
79:45 - for example and we can do the same with
79:48 - our form submit button via this children
79:51 - prop so whatever we pass in here between
79:53 - the opening and the closing tag of our
79:55 - form submit button will be passed via
79:58 - this children prop this means that the
80:00 - name of this prop has to be spelled like
80:02 - this if you change this then this will
80:04 - not be recognized as the children prop
80:06 - anymore and we also want to be able to
80:08 - pass some styling to this button from
80:11 - the outside
80:12 - so we pass a class name but we make this
80:15 - optional with a question mark so we
80:17 - don't have to pass one
80:18 - and this will be of type string this way
80:21 - whenever we call this from submit button
80:24 - component and use it somewhere we can
80:26 - pass classes from the outside if we want
80:28 - but we don't have to
80:30 - okay and then we add these props here
80:33 - inside the parentheses of our form
80:35 - submit button
80:37 - so we wanted to structure them with
80:40 - curly braces as usual
80:42 - colon we set the type to form the mid
80:45 - button props and now between the curly
80:48 - braces we have children
80:51 - and class name
80:53 - and then we want to return some UI in
80:55 - this block down here right let's keep it
80:58 - simple for now just to see that this
80:59 - works
81:01 - we just add a normal button here
81:04 - between the opening and the closing tag
81:06 - we add the children because we want to
81:09 - render the children that we pass to the
81:10 - form submit Button as the children of
81:13 - the button we render in here
81:15 - let's save this and see if this works
81:18 - we go back to our page
81:21 - entry replace
81:23 - this button here for our
81:27 - form submit button
81:30 - save this again so it seems to work
81:32 - because we still have a button that says
81:34 - add product but it's unstyled again
81:37 - because we haven't added any styling to
81:39 - this button in here yet so let's finish
81:41 - this let's go in the opening tag of the
81:44 - button and add a class name here but we
81:47 - remove the quotation marks and put curly
81:50 - braces here instead because this way we
81:52 - can put a back text string in here a
81:55 - back tech string allows us to use normal
81:57 - string classes like BTN and BTM primary
82:01 - but we can also put our class name in
82:04 - here additionally
82:06 - because in the backtake string we can
82:08 - put a variable with a dollar sign and
82:10 - curly braces this way both the button
82:12 - classes but also our optional class name
82:15 - String are applied to this button
82:18 - let's try this out as well let's save
82:20 - this and you can immediately see that
82:22 - the styling changes
82:23 - but this also means that we don't need
82:26 - the BTN and the BTM primary class
82:30 - on our page anymore because they are
82:33 - hard-coded on this from a bit button but
82:36 - we don't want to hard code the button
82:38 - block value because I want to keep this
82:40 - optional so we pass this from the
82:42 - outside as the class name prop instead
82:45 - okay cool then I also want to set the
82:50 - type of this button to submit which of
82:53 - course again means
82:54 - we don't need this prop here anymore
82:58 - okay so now our button works the same as
83:00 - before with the same styling and now we
83:03 - want to get the loading state in here
83:04 - and as I already said there is an
83:06 - experimental new hook that we can use
83:10 - to get the loading state of this form
83:12 - here where the storm submit button is
83:15 - placed in even if the form itself is in
83:17 - a server component it's enough if the
83:20 - submit button is a client component so
83:22 - we have to add another import
83:25 - curly braces from reacts done so this is
83:30 - not coming from next.js this is actually
83:32 - coming from react 18 and in here we
83:36 - should find experimental U.S form status
83:39 - but afterwards we also add s and we
83:42 - rename this so that we don't have to use
83:44 - this awkward long name here in our code
83:46 - we rename this to just use form status
83:51 - then we can use this hook in our
83:54 - component
83:55 - so again we destructure a const and we
83:58 - call this use form status this
84:00 - automatically hooks into the parent form
84:03 - of this button
84:04 - and in here we have different values we
84:06 - care about pending which is the loading
84:09 - state
84:10 - so when we submit our form until our
84:13 - server action here has returned its
84:16 - pending will be set to true and we can
84:18 - show a loading indicator
84:20 - I also want to disable the button while
84:24 - this is loading so we set disabled
84:28 - to a pending and I also want to show a
84:32 - loading spinner here right next to the
84:34 - text inside this button
84:36 - and for this again we have Daisy UI
84:39 - classes that we can use somewhere here
84:43 - should be a
84:45 - a loading indicator
84:48 - and they are different ones available
84:50 - you can choose whatever you like I want
84:52 - to use this one here so back in our code
84:56 - I put this
84:58 - inside the button tag so between the
85:01 - opening and the closing tag
85:03 - above the children
85:05 - we add an expression in curly braces
85:08 - if pending is true so pending to Amazon
85:11 - science then we want to render this band
85:13 - with this loading indicator so this is a
85:16 - span with a safe closing tag
85:18 - which gets the class names loading
85:23 - and loading
85:25 - spinner
85:27 - we let prettier we format this properly
85:30 - so this loading spinner will be shown
85:32 - while pending is true and pending is
85:34 - coming from the form status one more
85:36 - thing we have to do we accept these
85:38 - component props from the button right
85:40 - but right now we don't apply them to our
85:43 - button here in order to do this we go
85:46 - right here where we are destructure our
85:49 - props and we write dot dot dot props
85:53 - this way catch all the remaining props
85:55 - that we pass to our form submit button
85:58 - which don't have explicit names so all
86:00 - the props that we pass
86:02 - for the button component props basically
86:04 - this is this syntax we have to use for
86:07 - this and we also want to apply them to
86:09 - our button here right so we go in the
86:12 - button tag again and we do this all the
86:15 - way at the top as the first prop this
86:17 - way the other props that we pass below
86:19 - will overwrite these props because we
86:22 - usually want these ones to have priority
86:24 - over whatever button props we pass so we
86:27 - pass the rest props as the very first
86:29 - argument
86:30 - curly braces again we write dot dot dot
86:33 - props now all these props that we pass
86:35 - here will be applied to our button tag
86:38 - okay let's save everything and then try
86:42 - this out again so now in this page we
86:44 - are using our form submit button it
86:46 - should still work the same but it should
86:48 - have a loading indicator and it should
86:50 - also be disabled while the server action
86:52 - is in progress so again I'm gonna copy
86:54 - some data over
86:56 - again you can insert anything you want
86:59 - here
87:00 - I already have a title and a description
87:02 - and an image URL prepared
87:05 - and I'm going to set the price to
87:08 - 19.99 and now when we click this add
87:12 - product button it should be disabled and
87:14 - should show a loading spinner
87:16 - and this works and after it's done we
87:18 - get redirected to the front page
87:21 - and we should see our new data
87:23 - in the database
87:26 - and there it is
87:28 - okay let's add another product and let's
87:31 - check what actually happens in the
87:33 - network tab when we execute the server
87:36 - action
87:38 - so I want to go to the ads products page
87:40 - again
87:42 - add a new product
87:46 - again I'm gonna copy paste all of this
87:48 - over
87:53 - price five dollar
87:54 - and maybe it's a good idea to disable
87:57 - the redirect for a moment
88:01 - so that we keep the data in the network
88:04 - tab so I'm going to comment this out but
88:06 - I will add this back later
88:09 - let's run this with the network tab open
88:12 - and here we have our add product call
88:15 - and in the headers tab we can see that
88:17 - this actually makes a post request to
88:20 - the same page but this is basically
88:22 - treated like a server endpoint a post
88:24 - endpoint so this works just like a
88:27 - normal server endpoint where we send a
88:29 - post request tool just like this
88:31 - endpoint is not on a separate address
88:33 - it's on the same address as this page
88:35 - okay let's confirm that this newer
88:38 - product is also in our database
88:41 - yeah that is
88:44 - let's add the redirect back in
88:47 - and lastly for this section of the
88:49 - tutorial I want to send up an error page
88:51 - which will be shown if something goes
88:53 - wrong in here and we actually throw an
88:55 - error this should usually not happen
88:57 - because we have input validation
88:58 - client-side and Prisma database
89:01 - operations also don't fail unless the
89:03 - database is actually down but we should
89:05 - still have a custom error page and if
89:07 - you watch my next JS beginner tutorial
89:09 - then you already know how this works
89:11 - we put a file with a special name into
89:14 - the app folder so right click
89:17 - we have to call it error.tsx this way
89:20 - next.js automatically turns this into
89:22 - the error page which will be shown when
89:24 - something goes wrong for example if a
89:26 - fetch fails in a server component or a
89:29 - server action the error page has to be a
89:31 - client component so we add the US client
89:33 - directive at the top
89:35 - and this is always the case for error
89:37 - TSX and xjs they always have to be in
89:39 - client components I'm not sure why I
89:42 - think because of the way the error is
89:44 - passed to them but they have to be
89:45 - client components
89:47 - export default function
89:50 - let's call it error page again the name
89:52 - is up to you and here we just want to
89:55 - return some very simple UI a div that
89:58 - says
89:59 - something went wrong
90:01 - please refresh the page of course you
90:05 - can make this more sophisticated if you
90:06 - want
90:08 - let's actually try this out so let's say
90:12 - here in our server action we just
90:15 - pass a test around buzzinga we also have
90:18 - to comment out this part just for a
90:20 - moment
90:22 - and now when we send something here
90:26 - we should see our error page something
90:28 - went wrong now I think they are also
90:30 - planning to add an error field to the
90:32 - use form status hook so that we can get
90:35 - the arrow in here and handle it
90:36 - client-side instead of redirecting to
90:38 - this error page which can be a bit of a
90:40 - jarring user experience but right now we
90:43 - only have the loading state in here
90:44 - there is no error state in here yet so
90:46 - the easiest way to handle errors
90:48 - client-side and server actions is just
90:50 - to file back to this error page but
90:53 - again usually the user shouldn't get
90:55 - there
90:56 - so let's remove this again
90:59 - and now that we have some data in our
91:01 - database we can change our front page
91:04 - and render our products here right so
91:06 - let's do that next
91:07 - okay let's go to the home page which is
91:10 - the page TSX file that's the direct
91:13 - child of the app folder
91:15 - this one here that contains the home
91:17 - component
91:19 - and then let's remove all of this crap
91:22 - here
91:23 - and set it up from scratch
91:26 - so we added div and the return block and
91:29 - then we make this an async function
91:32 - Remember by default pages in the app
91:35 - directory are server components unless
91:37 - we add the use client directive meaning
91:40 - that we can do a database operations and
91:42 - all kinds of asynchronous stuff right
91:45 - inside this component because this will
91:47 - be executed on the server not on the
91:49 - client and just like any server action
91:51 - making database requests and using
91:53 - credentials and here is also save
91:55 - because they will not be leaked to the
91:57 - client this means we can just call
91:59 - Prisma here so let's create a const
92:02 - products to fetch all the products from
92:04 - our database
92:06 - and assign this to await
92:09 - Prisma which again we import from our
92:11 - lip folder
92:13 - dot product dot find menu
92:19 - parentheses curly braces and here we can
92:22 - add a filter or a sort order entry wanna
92:26 - order products buyer
92:29 - colon
92:30 - curly braces and I want to order the
92:33 - products in descending order so that we
92:36 - have the newest one at the top
92:38 - now we could order this by the created
92:40 - ads timestamp right but it's actually
92:42 - better to use the idea why because the
92:45 - ID also contains a timestamp but the ID
92:48 - is unique reverse theoretically two
92:51 - products could have the exact same time
92:52 - stamp so when you want to order
92:54 - documents in mongodb by that timestamp
92:57 - it's better to use the idea
92:59 - colon and then in here we pass the ESC
93:02 - for descending as a string so now we
93:05 - order these products by the idea in
93:07 - descending order with the newest one at
93:09 - the top
93:10 - and then we want to render our cards for
93:13 - each of these products right and for
93:15 - this again we use Daisy UI
93:18 - which contains this card component that
93:21 - we can use so let's go back into our
93:24 - project let's put it in the components
93:27 - folder because we want to reuse this in
93:29 - different places let's call it
93:32 - product card dot TSX
93:38 - we export default function as usual with
93:43 - the same name
93:47 - this product card will also take a prop
93:50 - so let's create an interface again you
93:53 - can use a type or an interface it
93:55 - doesn't matter but it's usually
93:56 - recommended to use interface unless you
93:58 - will need a type we needed to type
94:00 - earlier tour combine it with component
94:02 - props but here an interface is enough
94:05 - let's call it product card props
94:08 - and each product card will take one
94:12 - product as input
94:14 - and the type of this is product with a
94:16 - capital P we didn't get other completion
94:19 - but we can get the product type from our
94:22 - database
94:23 - through an import from Prisma so import
94:26 - we destructure this
94:28 - from at Prisma client
94:32 - and in here should be the product type
94:35 - that's coming from our
94:37 - Prisma schema
94:39 - the whip has one of these products to
94:42 - our product card
94:46 - read this structure this here so that we
94:49 - can render the information of this
94:51 - product in this card
94:52 - for now let's save this and let's render
94:56 - one of these product cards in our div
94:58 - just a single one for now so that we can
95:01 - see the card on the screen while we are
95:03 - building the UI so in here I'm gonna put
95:07 - a product card
95:09 - and for the product for now we just
95:12 - hardcore the products at the index 0 so
95:15 - the first element here
95:17 - again just so that we can see it in the
95:19 - UI where we are building it
95:22 - we saved us but we still have to return
95:25 - UIL from the product card
95:28 - so let's put a return statement here
95:31 - I want to make the outer element of this
95:33 - card a link and next link so that when
95:37 - we click this card we get forwarded to
95:39 - the product page
95:41 - so we are at the next link here
95:44 - we set the href
95:46 - to a string
95:48 - to the page where we will see the
95:50 - details of this product we haven't set
95:52 - up this page yet but we will do so later
95:54 - we will put the URL at slash products
95:57 - slash
95:58 - and then we append the product idea
96:02 - so Auto completion or product idea
96:07 - and to this link we add the class names
96:10 - that style this card and I think we also
96:13 - have to refresh the page here to show
96:15 - our changes okay the development server
96:18 - isn't running right now
96:20 - so I restart this refresh the page again
96:23 - and we don't see anything yet but we
96:25 - will see something in a moment
96:28 - so this link gets
96:31 - the card class which is coming from this
96:34 - UI we said W minus full
96:38 - to make the card take up the full
96:40 - available width we will later display
96:42 - this card in a grid
96:44 - we said BG and base 100 this is the
96:48 - background color will be a light whitish
96:51 - color
96:53 - I also want to set hover
96:55 - colon Shadow XL this is the class name
97:00 - implies adds a shadow to our card but we
97:03 - have this modifier here have a colon it
97:06 - only applies the shadow when we hover
97:08 - over the card with the mouse you will
97:10 - see this in a moment and then we can
97:12 - also add a transition for the Shadow
97:14 - with the transition Shadow class
97:19 - okay let's close this link tag
97:22 - and in here we render the contents of
97:25 - the card let's see how this looks if we
97:27 - just put some text in here for now
97:30 - this is the card we have our Harbor
97:33 - Shadow effect but of course this doesn't
97:35 - look great yet so let's remove text and
97:39 - instead we add another diff in here
97:41 - inside the link
97:43 - with the contents of the cards
97:46 - we add a class name to this Auto diff
97:49 - called card minus body
97:52 - this adds the appropriate padding and
97:55 - everything to a stylus card body and in
97:58 - here we put an H2 headline
98:00 - but again in Tailwind CSS all components
98:03 - are unstyled by default including
98:05 - buttons and headlines
98:07 - so to style this properly we add the
98:10 - card minus title class
98:13 - and in here we want to render the name
98:16 - of the product which we get from the
98:18 - product object that we pass to this card
98:22 - okay let's save this see how this looks
98:24 - already looks better right and we have
98:27 - the square hover Shadow effect with a
98:30 - transition you can play around with this
98:32 - you can try out different styling
98:34 - different Shadow values but this is fine
98:36 - for our card here below the H2 I want to
98:40 - put some more text with the paragraph
98:42 - tag
98:43 - in here I want to render product dot
98:47 - description
98:51 - which looks like this this is coming
98:53 - from our database
98:55 - and then I also want to add a price tag
98:57 - for this first of all we need to set up
99:00 - a function that formats the price
99:02 - properly because remember the price is
99:04 - just stored in zens but we want to show
99:06 - it as dollar
99:07 - we can put this function into the lip
99:10 - folder here so let's right click on lip
99:12 - new file let's call it format.ts
99:18 - and from here we export a function
99:21 - that we call format price
99:24 - and to this we will pass the price as a
99:27 - number
99:30 - then we want to return the formatted
99:33 - value on so what we do is we turn the
99:36 - zens into a dollars first by simply
99:39 - dividing price by 100.
99:42 - then we want to format this value in US
99:45 - dollar which we can do by calling dots
99:49 - to a local string
99:51 - as the first argument we have to pass
99:54 - the local so basically the language to
99:56 - which we want to format this
99:58 - and we want to format this to en minus
100:01 - OS in uppercase like this so we
100:04 - formatted the string in American English
100:06 - then we pass a comma and the block of
100:09 - curly braces where we can do some
100:11 - configuration
100:13 - and here we can set the style
100:16 - to one currency
100:20 - entries that currency
100:23 - tour
100:25 - USD this will take care of formatting
100:28 - this price properly in US dollar with
100:31 - the US dollar symbol and the correct
100:33 - decimal point and whatever I think this
100:35 - is a bit better than doing it manually
100:38 - zombies lifters we can also reformat it
100:41 - with prettier
100:43 - then I want to create another component
100:45 - in the components folder
100:49 - called price tag.tsx again we will reuse
100:54 - this component in different places
100:58 - in here we export a default
101:01 - function
101:02 - price tag
101:05 - which will call our format price
101:07 - function that we just set up
101:09 - but to this component we are past the
101:14 - price tag props
101:16 - which needs the price which again is a
101:19 - number and again I want to be able to
101:21 - style this price tag from the outside so
101:24 - again I add this optional class name
101:26 - String here that we already saw earlier
101:30 - and then we pass these props
101:32 - to the price tag component
101:35 - and destructure them here
101:39 - and then down here I want to return
101:42 - S Pen
101:47 - which contains the format its price so
101:50 - between curly braces I call our format
101:53 - price function which we export from our
101:55 - lib folder
101:57 - and to this we simply pass our price
102:01 - and then we also want to style the span
102:04 - again with class names from this UI
102:08 - again we add the back text string here
102:10 - with curly braces and two back ticks
102:14 - this UI has this batch class yeah which
102:18 - states this like a little badge like a
102:20 - price tag and then we also want to put
102:24 - our optional class name in here
102:26 - and that's it for this component
102:28 - okay let's go back into our product card
102:31 - and here below the description
102:34 - I want to render a price tag
102:36 - and for the price prop we pass product
102:40 - dot price
102:44 - okay let's see
102:45 - the product costs five dollars and this
102:47 - is rendered by our format function with
102:49 - the dollar symbol and the decimal point
102:51 - but of course we also want to render the
102:54 - image of the product right we do this
102:56 - above the cardboard here still inside
102:59 - the card link and in the days the UI
103:02 - documentation they wrap this image into
103:05 - a figure I'm not 100 sure wire but it's
103:09 - best to follow this but in here we don't
103:11 - use one of these normal HTML images
103:14 - because in xjs we should usually use the
103:17 - next image which is an import from next
103:20 - slash image
103:22 - because these images are optimized they
103:26 - are automatically resized by next.js to
103:28 - the appropriate size and they have some
103:30 - other cool features that the normal HTML
103:31 - image doesn't have so for the sr0 so for
103:35 - the image source we pass product.image
103:37 - URL this is the image we want to show
103:41 - for the alt text we can pass
103:43 - product.name
103:46 - when we use the next image we have to
103:48 - set the width and height so next JS
103:50 - knows at which size it has to load this
103:53 - image we set this to 800 width
103:57 - and 400 height now since our cards are
104:01 - responsive the final dimensions of the
104:03 - image will actually be defined by CSS
104:06 - and not by these values here so our
104:08 - images might not be shown in 800 times
104:11 - 400. this is just the size at which we
104:14 - load this image so no matter how big the
104:16 - image is even if it's 4000 pixels next
104:19 - JS Ray resides it to 800 times 400
104:22 - pixels and I picked this value because
104:24 - those are the largest dimensions in
104:27 - which this image will be shown later if
104:29 - we would make these Dimensions smaller
104:31 - then the image would be blurry if we
104:33 - would make them bigger then we will load
104:35 - in unnecessarily a large image and to
104:37 - style this image properly we again add
104:40 - class names
104:43 - h48 that's the height of this image in
104:46 - the cards we want each card and each
104:49 - card image to have the same height
104:51 - and then to not make our image distorted
104:54 - because the dimensions of the image
104:55 - inside the cards might be different of
104:58 - the intrinsic Dimensions that the image
105:00 - file has and to not distort this image
105:03 - with that object cover
105:07 - which basically xender crops the image
105:09 - so if the image is too big or has the
105:11 - wrong dimensions then it will just be
105:13 - cut off so it fits into our card image
105:16 - okay let's save this and there's our
105:19 - image and again this image changes
105:22 - depending on the screen size and here
105:24 - you can see the object cover in action
105:29 - there's one more thing I want to do in
105:31 - this product card if the product is
105:33 - newer I want to add a little batch that
105:35 - saves newer because this looks cool
105:37 - so above the return statement in the
105:39 - product count
105:41 - we create a const is newer
105:44 - and here we simply check if date dot now
105:46 - which is the current timestamp minus we
105:50 - want to compare it to the created ads
105:52 - timestamp of the product but this is a
105:55 - string and to turn this into a date we
105:57 - have to create a new date
105:59 - and to this new date Constructor we pass
106:02 - product dot created at which turns this
106:05 - into an actual date
106:07 - and to get the timestamp out of the
106:09 - state we call Dot get time
106:13 - and now we can compare to date dot now
106:16 - which also returns a timestamp and if
106:18 - the difference between these two is
106:20 - seven days you can of course also pick
106:22 - another value then I want to show this
106:24 - its newer batch so if date.now minus the
106:28 - date of the created add timestamp is
106:30 - less than seven days but those values
106:34 - are milliseconds so we have to calculate
106:37 - the days 1000 milliseconds
106:40 - times 60 seconds or one minute times 60
106:44 - seconds or one hour times 24 hours are
106:46 - one there times seven for seven days
106:50 - so now it's newer will be truer if our
106:53 - product is less than seven days old and
106:56 - when this is newer we want to render a
106:58 - little batch which I want to put into
107:00 - the H2 attack here
107:03 - after the product name here we put an
107:06 - expression
107:07 - if it's new is true to Amazon science
107:10 - then we want to render another div in
107:13 - here
107:15 - that just stays new in all uppercase
107:18 - and we style this div to a batch with
107:22 - the batch
107:23 - and the batch secondary class name which
107:26 - gives it the secondary color that we set
107:29 - in our theme
107:30 - let's save this and there's the batch
107:32 - our secondary color is this yellow
107:35 - but now that I see it maybe it would be
107:37 - better if we don't place it inside the
107:39 - title right but rather below it maybe
107:42 - here I think this looks better
107:45 - so I put it below the H2O attack
107:48 - so our product card itself is done
107:52 - but we still want to render these
107:53 - products in a proper grid right so let's
107:56 - remove this hard-coded product card here
107:58 - and I want to render our product as a
108:01 - grid but I want to render the first
108:03 - product in the special hero view here
108:05 - that you saw in the beginning with this
108:07 - background and this button it just looks
108:09 - a bit cooler again this is coming from
108:12 - this UI so let's do it in here in this
108:15 - first diff we put another div for this
108:17 - hero viewer
108:20 - this inner div gets the class names hero
108:24 - rounded XL which gives this whole
108:27 - element rounded corners
108:30 - and BG based 200 for the background
108:33 - color
108:35 - and in here we put the next image
108:40 - which will load the image for the first
108:43 - product so again products at the first
108:46 - index
108:47 - dot image URL
108:51 - similarly at the IELTS text will contain
108:56 - the first products name
109:02 - we set the width to 400 and the height
109:07 - to 800 but again the final dimensions of
109:11 - the image will be defined by a CSS those
109:14 - are just the dimensions to which we
109:15 - resize the image before we load it
109:18 - to style this image we add the class
109:21 - names W foil
109:24 - we set the max width to SM so that the
109:28 - image at most has a width of 24 Ram
109:33 - we make the corners of the image rounded
109:36 - with rounded LG
109:38 - to LG and XL and so on are just the
109:41 - different values for the Border radius
109:43 - the rounded XL has a border radius of
109:46 - 0.75 RAM and LG has 0.5 Ram this is just
109:50 - up to your personal preference
109:52 - and I want to set Shadow 2XL to give
109:56 - this image a drop shadow
109:58 - and since this is the first image that
110:01 - we see on the screen above the fold and
110:03 - the most important image we add this
110:05 - priority prop which signals to next.js
110:08 - that it should load this image first you
110:10 - should use this on the yeah the largest
110:12 - image basically that is shown on the
110:14 - screen
110:15 - so let's save this and look what we see
110:19 - here where it doesn't look great yet we
110:21 - still need to show the product
110:22 - information and align this properly what
110:25 - we do is we wrap this image into another
110:28 - div
110:29 - so a third diff right here we put a
110:32 - closing tag below the image
110:34 - and restyle this div here
110:38 - with the class names hero minus content
110:43 - Flex call to make this a flexbox column
110:46 - where the elements are aligned below
110:48 - each other
110:49 - but then we also write LG colon
110:53 - Flex row and this is how you create
110:55 - responsive layouts in Tailwind CSS
110:58 - because this means on small screens this
111:01 - will be a flex column so the elements
111:03 - will be aligned below each other but as
111:06 - soon as we get to the LG break point
111:08 - which is a screen break point so a
111:10 - certain size of our screen then we use a
111:13 - flex row instead meaning that the
111:15 - elements will be a aligned horizontally
111:17 - instead of vertically so again whatever
111:20 - modifier we use here will be applied on
111:23 - larger screens and upwards and whatever
111:26 - we use with auto modifier will be used
111:29 - on small screens and we don't have to
111:31 - add a modifier for small screens here
111:33 - because this LG modifier basically means
111:36 - greater than or equal to one so if the
111:39 - screen is greater than or equal to LG
111:41 - then we will always use a flex row and
111:45 - if it's below that then we will use a
111:46 - flex call this needs a bit getting used
111:48 - to but this is how you create responsive
111:50 - layouts in Tailwind
111:52 - and then right below the image but
111:55 - inside this inner div we put another div
111:58 - for the text of this hero item
112:01 - this doesn't need any styling
112:04 - but in here we put in H1
112:07 - that we start with text5 XL
112:11 - which sets the text size
112:14 - we use Font bold which is
112:16 - self-explaining and in this H1 we want
112:19 - to render the name of the first product
112:21 - right so again products at the index 0
112:25 - dot name
112:29 - and there's the title of this hero
112:31 - element and since the screen is so small
112:33 - right now and we are zoomed in this Flex
112:36 - coil is applied right but if I make this
112:39 - window big then Flex row is applied and
112:41 - these elements are aligned horizontally
112:43 - and on small screens they are aligned
112:46 - vertically you can also see this switch
112:48 - here when we reach this breakpoint
112:51 - and again this breakpoint is defined by
112:53 - this LG colon you can see in the
112:55 - Tailwind documentation what exact pixel
112:58 - its value this breakpoint has you can
113:00 - also modify this but this is not
113:02 - necessary for us okay let's finish the
113:04 - diff down here below the H1 we put a P
113:08 - tag
113:09 - which we give some vertical padding
113:12 - which we can do with py minus six why is
113:16 - the vertical axis for horizontal padding
113:18 - you can use PX
113:21 - and again and here we render products at
113:24 - the index 0 Dot
113:27 - description
113:31 - and there it is
113:33 - and then I want to add a button that
113:35 - brings us to the product page
113:37 - below the paragraph tag we put the next
113:39 - link
113:41 - make sure it Imports the next link
113:44 - we set the href of the slink tour
113:49 - slash products the same UI we used
113:52 - earlier
113:54 - slash and then the ID of this first
113:56 - product so products at the index 0
114:00 - dot idea
114:02 - and we want to render this link like a
114:05 - button but you shouldn't make it a
114:07 - button first of all because this is a
114:09 - server component and we can't handle
114:11 - Clicks in a server component but also
114:13 - when we link to another page then we
114:15 - should actually render a link and not a
114:17 - button element it can look like a button
114:19 - but it should be a link which is
114:20 - important for accessibility you always
114:22 - want to use the correct HTML element but
114:25 - again we can style this as a button with
114:27 - BTN and BTN
114:30 - primary
114:32 - and then we close this link
114:36 - and here the link of course doesn't
114:38 - contain any text yet
114:41 - which we add between the linked tags
114:44 - check it out for example
114:46 - okay so this is now a link that looks
114:48 - like a button which brings us to the
114:50 - product page that we haven't set up yet
114:54 - and again this is responsive so on
114:56 - larger screens it looks like this on
114:58 - smaller screens it looks like this
115:01 - and below this hero item we want to
115:04 - render the grid with the remaining items
115:06 - just have to see in which diff we want
115:09 - to put this we want to put this below
115:11 - the hero diff here so below this one
115:13 - inside the outer div
115:15 - in here we put another div
115:18 - which we render as CSS grid again with
115:22 - Tailwind class names
115:24 - first off I will set my
115:26 - -4 which is a vertical margin again m
115:30 - stands for margin and y stands for the
115:32 - vertical axis so top and bottom we want
115:34 - to render a grid Drifter grid class
115:37 - and then we Define how many columns the
115:40 - squared should have and again this
115:42 - depends on the screen size right so we
115:44 - use different breakpoints we start with
115:46 - grit coils 1 for one column
115:50 - which will be applied on small screens
115:53 - on a medium sized screens MD colon
115:58 - we want to set create calls to Tool so
116:01 - we show two columns on slightly larger
116:04 - screens
116:05 - and then we add the third breakpoint XL
116:08 - and I figure this out by just playing
116:10 - around with different break points and
116:12 - see when it looks good
116:14 - on Notch screens we want to show three
116:18 - columns
116:19 - and to add some space between the Zinger
116:22 - cards in the script we can add the gap
116:25 - for our class
116:27 - so those are all the classes we add here
116:30 - then we close this div
116:33 - and render the actual product cards in
116:35 - here we already have the product card
116:37 - component set up right so here we can
116:40 - now put an expression we want to render
116:42 - all our products in here except for the
116:45 - first one because we already rendered
116:47 - the first one here in this hero view so
116:49 - what we do is we call products dot slice
116:53 - and pass the index one this way we turn
116:56 - a new array without the first element
116:59 - and then we want to take each of these
117:01 - product objects and map them to a
117:04 - product card right
117:06 - so in here we get past each product not
117:10 - produced but product
117:13 - and after the right arrow we add
117:16 - parentheses and in here we want to
117:18 - render a product card for each product
117:22 - if you don't know what map does then you
117:25 - probably haven't worked with react
117:26 - before and you have to watch a beginner
117:28 - tutorial first but this way we turn each
117:30 - of these products in the array into a
117:33 - product card that we can then render in
117:35 - the UI the product card expects the
117:38 - product object
117:40 - which we get passed by the map function
117:42 - and when we render a list we also have
117:45 - to set the keyer this is required for
117:47 - react to a re-render lists efficiently
117:49 - and here we have to set a unique value
117:52 - for which we can use the unique idea of
117:55 - the product and then we close this
117:59 - and when we save this there's our grid
118:01 - right now we only have three products in
118:04 - total so let's add some more
118:07 - over the edge products page
118:10 - so I'm gonna go ahead and add a few more
118:12 - products but I will skip this part in
118:15 - this video because you already know how
118:16 - this works just go ahead and add a few
118:18 - more products so that we can show
118:20 - something in our grid
118:22 - so I went ahead and added some more
118:24 - products and now we can see our full
118:27 - grid doesn't it look beautiful and each
118:29 - card has a hover Shadow and when we
118:32 - click the card we get to The Details
118:34 - page of this product which doesn't exist
118:36 - yet and this grid is fully responsive so
118:39 - on larger screens we have three columns
118:41 - when we make the screen smaller we get
118:44 - to two columns and eventually to one and
118:48 - this is the largest width at which our
118:50 - card images are displayed and this is
118:53 - around
118:54 - 700 something pixels as you can see up
118:57 - here
118:58 - this is why I set the width of the image
119:01 - in the product card to 800. this way we
119:04 - make sure that we always have an image
119:06 - that is large enough but not too large
119:09 - when we open one of these images in a
119:11 - new tab you can see that the width is
119:13 - approximately 800 pixels which again is
119:17 - the largest size at which we need this
119:20 - image
119:21 - which is shown when we only have one
119:24 - column okay later we will also add
119:26 - pagination to this page so that we
119:29 - download all products at once and as a
119:32 - reminder by default server components in
119:35 - react are statically cached meaning that
119:37 - all these products are fetched when we
119:40 - compile the project here in our server
119:42 - component and then even if we reload the
119:44 - page after we added new products we
119:46 - won't show these new products at least
119:48 - not in production in order to always
119:50 - show the newest products we have to
119:53 - revalidate this page but this will not
119:55 - be necessary when we later add the
119:58 - search param for the page that we are
120:00 - currently on because as soon as we add
120:02 - search params to a server component in
120:04 - xjs it's automatically dynamically
120:06 - rendered but don't worry if this is
120:08 - confusing to you right now you will see
120:10 - how this works later
120:11 - okay since we are already linking to our
120:14 - products detail page through our cards
120:16 - here let's set up this product detail
120:18 - page next so we go into our project and
120:22 - remember the URL for our products page
120:24 - was Slash products slash and then the ID
120:27 - of the product
120:29 - so in the app folder we create a new
120:31 - folder and again I explain how this
120:33 - routing structure works in my next js13
120:36 - beginner tutorial
120:37 - we want to have a folder called products
120:41 - and then here we want another folder
120:46 - where we put the ID of the product
120:49 - because this is part of the URL
120:51 - so slash products slash idea
120:54 - and finally in here we put a file
120:58 - page.tsx to render a page at this path
121:02 - so let's set up the props for this page
121:06 - product page props
121:09 - and in here we want to get the ID out of
121:12 - the URL so that we can use this idea to
121:14 - load the correct product from our
121:16 - database right
121:18 - and we get this over the params value
121:21 - because params will contain
121:24 - the ID placeholder that we put into our
121:26 - path here
121:28 - suprams is another object which contains
121:31 - the idea which is a string and then we
121:34 - can pass this to our page component
121:36 - which then loads the product
121:39 - so we export a default async function
121:42 - here
121:44 - which we call product page
121:48 - and it takes the product page props
121:53 - in which we can find the params and we
121:55 - destructure this further with a colon
121:57 - and a pair of curly braces and in here
122:00 - is the idea right
122:01 - and this is a normal server component so
122:04 - we can make our database requests
122:06 - directly in here
122:08 - we create a const product
122:11 - we call await Prisma
122:13 - dot product
122:15 - dot find unique
122:18 - and this allows us
122:21 - to find a product by its idea in
122:24 - parentheses and curly braces we write
122:26 - real colon
122:28 - add another pair of curly braces and in
122:30 - here we pass the idea
122:32 - so we want to find a single product
122:34 - where the idea is the same as the ID we
122:37 - pass in the URL now the product we get
122:40 - back from this find card can be null
122:42 - because it might be the case that the
122:44 - product with this ID doesn't exist right
122:46 - and in this case we don't want to render
122:49 - an empty page instead we want to forward
122:51 - the user to do 404 not found page we
122:54 - already saw this not found the page
122:56 - earlier when we just enter any road that
122:59 - doesn't exist by default it looks like
123:01 - this but this is not great for one it's
123:03 - not styled at all but also no elements
123:06 - that we put into our root layout is
123:09 - shown on this 404 page so when we later
123:11 - put enough bar in the footer in here
123:13 - this navbar and folder will not be shown
123:15 - on the 404 page and it's a really bad
123:17 - user experience because they don't have
123:19 - anything to click they just see this
123:21 - empty page but if you watched my next.js
123:23 - 13 beginner tutorial then you know that
123:25 - we can overwrite this not found page and
123:27 - show our own one which will be rendered
123:30 - inside our root layout here so let's do
123:32 - that next
123:34 - for this we are add another file to the
123:36 - app folder
123:38 - which we call not minus found.tsx and
123:42 - again as for IDs special files the
123:44 - naming of the file is important because
123:47 - only this way next.js will recognize
123:49 - this as the 404 page this page will be
123:52 - very simple we export a simple component
123:57 - that we call not found or not found page
124:00 - the name of the component itself doesn't
124:02 - matter
124:03 - and here we simply return a div that
124:05 - says
124:06 - page not found
124:08 - again you can make this more
124:09 - sophisticated but I want to keep it
124:11 - simple here now when we open a page that
124:13 - doesn't exist it renders our own not
124:15 - found page and later our navbar in our
124:18 - photo will also be shown here
124:20 - so I know with this note found page in
124:22 - place we can also redirect to it
124:25 - dynamically which we want to do if our
124:27 - product is now
124:29 - for this we check if exclamation mark
124:33 - product
124:35 - so that's now undefined
124:37 - then we call this not found function
124:40 - which is an import from next slash
124:42 - navigation again this redirects us to
124:45 - the not found page the same one we see
124:48 - here on the left side but only if
124:49 - product is null and Below we can now
124:52 - render our products page because we know
124:55 - that the product now has a value
124:58 - so in the return block we render a div
125:02 - and we add some class names to this diff
125:05 - we want to make this a flexbox
125:08 - we want to render a flex column by
125:11 - default
125:12 - but again on LG screens and larger
125:17 - we want to render a flex row instead to
125:19 - make this responsive
125:21 - and inside the div we put the product
125:24 - image and then the name and the
125:25 - description
125:27 - so in here we put a next image make sure
125:30 - it's adding the correct import
125:35 - we set sr0
125:37 - to the image URL of the product we
125:41 - loaded up here
125:45 - similarly we set the alt text
125:49 - to the name of the product
125:52 - we set the width and the height
125:55 - above to 500.
125:58 - but 10 CSS actually that's the final
126:01 - height of the image to the intrinsic
126:03 - height the image file has for example if
126:05 - the image has a width of 500 and a
126:07 - height of 200 then the image we see on
126:09 - the screen will also be 500 times 200
126:12 - and when next.js resizes an image I
126:15 - think it only takes the width into
126:16 - account the height doesn't really matter
126:18 - only to reserve space so even if the
126:21 - real height of the image is larger than
126:23 - 500 then this will still work it will
126:26 - only resize it to have the appropriate
126:28 - width anyway if you just use these
126:30 - values here then it will work and I want
126:33 - to add some rounded Corners to this
126:34 - image because this looks better
126:37 - which we do a rounded LG again and again
126:40 - this is the largest image and the only
126:43 - image shown on this page so we set the
126:46 - priority attribute
126:48 - and below this image still inside this
126:51 - div we put another div for the product
126:54 - text
126:55 - we set the H1
126:59 - to the product name
127:04 - and we style this H1
127:07 - with text 5 XL which again that's the
127:11 - font size
127:12 - and we make it bold again
127:15 - below the product name I want to render
127:18 - a price tag instead we already set up
127:21 - this component earlier
127:23 - and for the price we pass
127:26 - product.price right
127:29 - and to the price tag we can pass an
127:31 - optional class name which we want to do
127:33 - now because I also want to add some
127:36 - Mulch and top with mt minus 4 to this
127:39 - price tag
127:40 - and Below we put the product description
127:43 - which is just a paragraph tag
127:46 - products dot description
127:51 - entry at the p y minus 6 class name to
127:55 - add some vertical padding
127:57 - okay let's save this and let's navigate
128:00 - to a product page
128:02 - there it is
128:04 - responsive
128:06 - but we still need some gap between the
128:08 - text and the image
128:11 - but we already move between a flex
128:14 - column and a flex row at the appropriate
128:17 - break point
128:19 - to get some room between the image and
128:22 - the text we use Gap 4 and GAP is better
128:27 - to use than a margin here because a gap
128:29 - will work no matter if it's a flex
128:31 - column or a flex row this way we don't
128:33 - have to decide between a margin top or a
128:36 - margin and for example
128:38 - so now we get some space here which also
128:41 - works on larger screens and I also want
128:43 - to send out this text here but only when
128:46 - we have a flex row right so only on
128:48 - larger screens
128:50 - so we add LG colon
128:53 - items sender item Center is the class
128:56 - for a line item Center in CSS
129:00 - and now it should look good
129:02 - now it looks like this on larger screens
129:04 - but it's responsive and it even gets
129:08 - smaller on small screens until we reach
129:10 - the Min width which we set with 300
129:13 - pixels earlier
129:16 - okay and I also want to set the metadata
129:18 - of this page by this time I don't want
129:20 - to hot coat the title and the
129:22 - description instead I want the title to
129:24 - contain the product name and the
129:26 - description to contain the description
129:28 - of the product if we want to generate
129:30 - the metadata dynamically we don't export
129:33 - this metadata value that we used earlier
129:36 - instead we have to export another
129:38 - function
129:39 - outside of the products page component
129:42 - function
129:43 - we export another async function called
129:47 - generate metadata and the spelling of
129:51 - the function name has to be correct
129:53 - again otherwise next.js were not
129:55 - recognized as
129:57 - this will return a metadata object which
130:00 - is an import from next again
130:03 - and by defining the return value here we
130:05 - get Auto completion when we later
130:07 - construct this metadata object but since
130:09 - this is an async function we have to
130:12 - wrap this return value into a promise
130:14 - because all async functions return the
130:17 - promise why do I make this an async
130:20 - function well we actually have to fetch
130:22 - the same product from the database in
130:24 - this function here as well in order to
130:26 - get the name and the description of the
130:28 - product we actually can't share data
130:31 - between the page and generate metadata
130:33 - we have to fetch the product in both
130:35 - places but now you might say isn't it
130:38 - wasteful to fetch the data from the
130:40 - database trials and of course it's
130:41 - wasteful this is why we have to Cache
130:44 - this product that we get from our
130:45 - database so that we only fetch it once
130:48 - this is done for you automatically only
130:50 - if you use the fetch function that we
130:52 - have in JavaScript if you use fetch to
130:55 - fetch data from some API then this is
130:57 - cached and deduplicated for you
130:59 - automatically however if we use
131:01 - something like Prisma or XC yours or
131:03 - anything else to fetch our data then we
131:06 - have to Cache it manually if you don't
131:08 - do this then we actually do a two
131:10 - database operations and this of course
131:12 - is very wasteful if you want to confirm
131:14 - this then you can try out fetching the
131:17 - data here twice and lock your database
131:19 - operations
131:21 - which we can do by passing
131:25 - lock to our Prisma client here but I
131:29 - don't remember what you have to pass for
131:30 - the value you have to look this up in
131:32 - the documentation this allows you to
131:34 - lock all your database operations and
131:36 - then you can see that this is executed
131:38 - twice but I already did this so I can
131:41 - confirm it for you in order to
131:42 - de-duplicate this request we have a
131:45 - cache function from react which is also
131:47 - pretty new so what we do is we create a
131:50 - const
131:52 - that we can get product
131:54 - and then we call this cache function
131:57 - here which is coming from react
132:00 - to Cache we can pass another async
132:03 - function and the return value of this
132:05 - async function repairs here will be
132:07 - cached and here we basically want to
132:09 - execute this part we want to fetch our
132:12 - product from the database and then
132:13 - return it and for this we need the ID of
132:16 - the product right
132:17 - so in here this editing function that we
132:19 - pass
132:21 - will take one argument the IDS string
132:24 - and then we create an error function
132:26 - like this with a right arrow and a block
132:29 - of curly braces so now we pass this
132:31 - function to the react cache function and
132:35 - in here we can simply cut out this part
132:37 - put it in here
132:39 - and then we simply return this product
132:42 - and now down here where we had this
132:45 - function before
132:47 - we create a const product again
132:49 - but this time we call a weight get
132:52 - product which is this cached function up
132:55 - here
132:56 - and we pass the product ID into this
132:58 - function now we still get the same
133:00 - product but it's coming from this cached
133:03 - value here and now we can do the same
133:06 - and generate metadata and this way this
133:09 - will only be executed once and this
133:11 - value will be shared between these two
133:14 - functions we still need a product ID and
133:17 - generate metadata right and this can
133:19 - actually take the same props as the page
133:22 - so we pass this in here
133:24 - and then we only have to return the
133:26 - metadata that we now can generate from
133:28 - this product information okay so we
133:32 - return a JavaScript object and again
133:34 - since we added this return value here we
133:36 - now get Auto completion for example we
133:39 - can set the title just as we did before
133:42 - but now we can generate the title from
133:45 - the product name and then I want to
133:47 - append this Dash
133:50 - flomas on that's behind it
133:53 - like this
133:55 - I also want to set the meta description
133:58 - to the product description and again we
134:01 - can see this later when we post a link
134:03 - to our website on social media and we
134:05 - will actually do this we will actually
134:07 - deploy our project and then I will show
134:09 - you these previews and I also want to
134:11 - overwrite the open craft image so the
134:14 - image that is shown on social media by
134:16 - default that's this open graph image
134:19 - file that I put in the starting code but
134:21 - we can overwrite this dynamically for a
134:24 - specific page and I want to show the
134:25 - product image instead for this we can
134:28 - add this open graph value to the
134:31 - metadata
134:32 - which again takes a JavaScript object
134:34 - and here we can pass images colon we
134:38 - pass an array
134:39 - this array contains another block of
134:41 - curly braces and here we can set the URL
134:45 - to a product dot image URL
134:50 - again we can't see this right now
134:52 - because yeah only the title is shown
134:55 - here in the browser we have to refresh
134:57 - the page and that does Thornhill slices
134:59 - but you will later see these other
135:01 - values after we have deployed our
135:03 - project okay on this product page I also
135:06 - want to put the button that allows us to
135:08 - add this product to the cart but before
135:10 - we do this I want to create the loading
135:12 - page again I explain this in my next JS
135:15 - beginner tutorial the loading page will
135:17 - be shown when we open a server component
135:19 - and it's still loading because we are
135:20 - fetching all this data before we
135:22 - actually show this page on the screen
135:24 - right this is Alf hatched server side
135:26 - not client-side which means that it can
135:28 - take a while before the page is shown
135:30 - and to not make it feel unresponsive to
135:33 - the user we can add the loading page
135:35 - that will be shown while a page is
135:37 - loading
135:38 - we put this right in the app folder and
135:41 - again the name has to be exact
135:43 - loading.tsx
135:47 - and in here we export
135:50 - a simple component again
135:53 - which we call loading page or loading
135:57 - and from here I want to return another
136:00 - spell
136:01 - with the class names loading which again
136:04 - is coming from this UI
136:06 - loading dots is a different kind of
136:09 - loading indicator
136:12 - then the size
136:14 - loading LG
136:17 - M Oro which send us this loading
136:20 - indicator horizontally on the screen
136:23 - and the last class I want to set is
136:25 - block which sets this to display block
136:28 - this is necessary for M order to work
136:32 - and then we close this and then we have
136:34 - our loading page we should see this in
136:37 - action if we go to the front page again
136:40 - yeah there it was for a short moment but
136:43 - when we click a product we should also
136:45 - see the loading page while the product
136:47 - is loading
136:49 - it wasn't there yeah I think we don't
136:52 - see it because nextjs pre-fetches these
136:55 - pages but you see it when we refresh the
136:58 - front page right but this will also be
137:00 - shown sometimes when we open a product
137:03 - page or another page okay and the next
137:05 - step is to create the actual shopping
137:07 - cart in our database and add a button
137:10 - with which we can add products to our
137:12 - cart really exciting okay the next step
137:15 - is to add our shopping cart model to our
137:18 - database so that we can actually put
137:19 - products in there
137:21 - so let's go into our schema.prisma file
137:25 - again and we could make the changes in
137:27 - the database first and then use
137:29 - introspection again to change the schema
137:31 - here but it's actually easier to do it
137:33 - the other way around to modify the
137:35 - schema and then push the changes to our
137:37 - database so below our product model we
137:41 - create a new model which we call a card
137:43 - so model card curly braces each model in
137:48 - our database needs an idea so let's copy
137:51 - the ID line from the product model and
137:53 - paste it here
137:54 - this does the same it creates an idea
137:56 - automatically for us of type
137:59 - object idea
138:01 - and we can also copy these two
138:03 - timestamps here so that we know when we
138:05 - created and last updated a card and for
138:09 - the items we put in the cards we create
138:11 - yet another model model which we call
138:15 - card item
138:17 - and we ignore this error message here
138:20 - for now now we could also put the card
138:22 - items as an array directly into the card
138:25 - document but this makes it harder to
138:28 - work with because then we always have to
138:30 - fetch the whole array when we want to
138:32 - modify it even if we just want to change
138:34 - the quantity of a single item also
138:36 - documents in mongodb have a size
138:39 - constraint meaning that we can't make
138:41 - this card item array grow indefinitely
138:43 - now in practice this is probably not a
138:45 - problem but it's still good practice to
138:47 - put these card items into a separate
138:50 - collection in my opinion so again each
138:52 - card item needs an idea so we copy paste
138:56 - this line This is the ID of the document
138:58 - itself and each card item also needs the
139:01 - ID of the product it references right so
139:04 - we know which product is in the card so
139:06 - we create another field below product
139:08 - idea and don't worry about the alignment
139:11 - right now we will reformat this file at
139:13 - the end
139:14 - this is also of type string and it's a
139:17 - mongodb object idea so we write the same
139:20 - as here at the end of the ID line at DB
139:23 - Dot
139:25 - object idea but this product ID is not
139:29 - order generated like the ID of the
139:31 - document itself this is just the ID of
139:33 - the product we put in there then we also
139:36 - need the quantity so we know how many of
139:39 - these products we put into the card
139:41 - which will be of type int
139:44 - and we need the ID of the cards that
139:47 - this card item belongs to and a card
139:49 - then belongs to a user
139:51 - so we add another field below card idea
139:54 - which again is a string that contains a
139:57 - DB dot object ID
140:00 - okay let's format the document to align
140:02 - everything properly again on the nose
140:05 - that's shift IDF if you are on Mac or
140:08 - Linux you can also search for the format
140:10 - document shortcut here
140:12 - but right now we are just storing these
140:15 - ideas it's also useful if we tell Prisma
140:17 - what model these IDs belong to because
140:20 - this makes it easier later to work with
140:21 - for this we can use relations so what we
140:24 - do is below the product idea
140:27 - we also write product
140:30 - which will be of type product and
140:32 - product is our product model up here
140:35 - then we write add relation
140:38 - and between the parentheses we write
140:40 - Fields colon pair of scrap brackets
140:44 - and then we pass our product ID on which
140:47 - is this field up here that contains the
140:49 - idea of the product
140:51 - after the closing square bracket we
140:54 - write comma references let me make this
140:57 - big
140:58 - idea that's the ID field of the product
141:01 - here so that we know that one product
141:04 - idea is connected to a the ID of the
141:07 - product and now when we press the
141:09 - formatting shortcut I think Prisma
141:12 - should add something to the product
141:14 - model as well and of course reformat our
141:16 - code so shift IDF and it added this card
141:20 - item array to our product model this is
141:23 - the counterparts to this line down here
141:25 - so they always belong together because
141:28 - now that each card item references a
141:30 - product we can also fetch all card items
141:33 - that contain a product through the
141:35 - product model and if we deleted this
141:37 - line then we actually get an error
141:39 - because they always belong together
141:41 - and then we want to do the same for the
141:43 - card so we store the card ID here which
141:46 - belongs to a card document in our
141:48 - database So Below we write card
141:52 - off type card
141:54 - and again add relation
141:58 - which Fields does it reference the card
142:01 - idea
142:03 - which belongs to the idea in the card
142:07 - model again we press the formatting
142:09 - shortcut and it adds this line to the
142:12 - card model and this one here is
142:14 - especially useful because this allows us
142:16 - to fetch all the card items with all
142:18 - their product information that belong to
142:21 - a particular card this is important
142:23 - later to fetch the whole card with
142:24 - arlet's data but I want to rename this
142:28 - field I want to color adjust items and
142:31 - put it here above the timestamps
142:33 - and I also want to rename the
142:35 - collections again lowercase and plural
142:37 - because that's convention for mongodb so
142:40 - again below we write add add map and the
142:43 - name of the collection which will be
142:45 - cards
142:46 - and the same for the card items here
142:49 - since they are their own model they live
142:51 - in their own collection
142:53 - card items in our lowercase
142:56 - one more thing we go to our product
142:59 - relation in the card item again after
143:01 - the references field
143:03 - write comma
143:04 - on delete in camera case like this and
143:07 - then Cascade with an uppercase C
143:10 - what this does is if we delete a product
143:13 - all the card items that contain this
143:15 - product will also automatically be
143:17 - deleted because we can't have an item in
143:19 - our cards for a product that doesn't
143:21 - exist anymore right that's it with the
143:23 - changes in our model for now so again
143:26 - let's reformat this let's save it and
143:29 - then we have to push the changes to our
143:31 - database so we open the terminal
143:34 - and stop the execution of our Dev
143:36 - environment then again as I mentioned in
143:39 - the beginning we run npx
143:42 - Prisma DB push
143:46 - which pushes these new changes to our
143:48 - database here you can see what it does
143:51 - it created two new collections for the
143:53 - cards and the card items so let's take a
143:56 - look into our database here here we have
143:59 - two new collections
144:00 - and if we set up any special indexes
144:03 - also in our model then this will also
144:05 - push to the database with npxdb push but
144:09 - right now of course these collections
144:11 - are emptier so let's go back into our
144:13 - project
144:14 - and then we also run npx Prisma generate
144:19 - to regenerate our Prisma client so that
144:22 - we have our new models available on the
144:24 - Prisma object and can make database
144:26 - operations so now when we take a look
144:28 - at the place where we use our Prisma
144:31 - client like here for example and use all
144:33 - the completion we now have the card and
144:35 - the card item here available as well
144:37 - this is what Prisma generate does it
144:40 - creates a newer Prisma client with the
144:42 - correct schema inside it
144:45 - okay let's run the development
144:47 - environment again
144:49 - and then we want to add a button to our
144:51 - product detail page to add this product
144:53 - to our cart and then we want to put this
144:56 - button on our product detail page here
144:58 - below the description
145:00 - but this time I also want to have a
145:02 - success message so after we added a
145:05 - product to the card I won't have a
145:07 - little text that there's a product edit
145:09 - or something like that but the use form
145:12 - status that we are used in our form
145:15 - submit button here
145:17 - only contains this loading state it
145:19 - doesn't contain a success State at least
145:22 - not yet they might add this in the
145:24 - future but for now we have to handle the
145:26 - success State ourselves and since this
145:28 - is State we can only do this in a client
145:31 - component because only a client
145:32 - component can contain State this is why
145:35 - this time we can't execute our server
145:37 - action in a server component but what we
145:39 - can do is we can wrap all of this logic
145:41 - into the button itself so that only the
145:44 - button has to be a client component and
145:46 - the product page itself can stay a
145:47 - server component because again server
145:50 - components are more efficient since we
145:52 - will only use this button on this page
145:54 - let's put it not in the components
145:56 - folder but right here in the product ID
145:58 - folder right next to the page itself
146:00 - because in the next JS app router we can
146:03 - co-locate these files with the pages
146:07 - we call it adds tour card button dot TSX
146:14 - and then in here we create a client
146:16 - component
146:19 - with the same name
146:24 - to this add to cards button we will add
146:27 - the ID of the product that this button
146:29 - belongs to so we create an interface for
146:32 - the props
146:34 - and in here we put the product idea
146:38 - in form of a string
146:40 - and then we pass this
146:43 - to the component
146:47 - and then let's set up the layout of this
146:49 - button so we put the return block here
146:54 - we wrap this all into a diff because
146:55 - next to the button will be the success
146:57 - message
146:59 - and to align them properly we set the
147:01 - class name to flex
147:04 - items Center and GAP tour for some
147:08 - spacing
147:09 - and into the diff we put the button
147:12 - itself
147:13 - which we Style with BTN
147:15 - BTN primary
147:19 - we set an on-click Handler on this
147:22 - button but for now we just pass an empty
147:24 - Arrow function like this because we will
147:26 - take care of this later
147:28 - then we close this button tag and set
147:30 - the text to add to cart
147:34 - before we continue let's save this and
147:36 - put this button into our layout to see
147:38 - how it looks so on the product ID page
147:41 - we put the button below the description
147:45 - add to a card button
147:48 - and for the product idea we pass the ID
147:51 - of the product that we load on this page
147:55 - and there's our button
147:57 - I also want to put an icon in here a
147:59 - shopping cart icon and I have to copy
148:01 - paste this because this is an SVG
148:04 - there it is again I will link this in
148:07 - the description below and you can copy
148:08 - it from there you can also leave this
148:09 - out for now it doesn't matter the text
148:11 - here is enough and now again we want to
148:14 - handle this action via a server
148:16 - component because this way we don't have
148:17 - to set up an API route Handler and
148:20 - instead we can just call a function in
148:22 - our code right here but we can't declare
148:24 - server actions inside client components
148:26 - so we can't put the action directly here
148:28 - into this file however you can still
148:30 - import server actions into Clan
148:33 - components that's possible you just have
148:35 - to declare the server action in a
148:36 - separate file so let's put this file
148:38 - into the same folder here in the
148:41 - products idea route
148:43 - new file and the naming convention for
148:46 - this is usually just actions but you can
148:48 - give this any name you want and here we
148:50 - put the server actions that belong to
148:52 - this route
148:53 - remember when we created the server
148:55 - action on the add product page we use
148:58 - this use server directive here at the
149:00 - start of the function
149:02 - since this file will only contain the
149:04 - other actions we can put this all the
149:06 - way at the top this way we only have to
149:08 - declare at one time and not in each
149:10 - function if we added multiple functions
149:12 - to this file okay and then we export an
149:16 - async function
149:19 - let's call it increment
149:21 - product quantity because this is what
149:25 - this function does right
149:27 - and it takes the product idea as an
149:30 - argument
149:31 - and I have a very nastier typo here at
149:36 - product quantity No it should be correct
149:39 - in here we want to fetch the cards or
149:42 - create one if it doesn't exist yet but
149:44 - we haven't set up functions that let us
149:46 - create or modify a card yet and since we
149:49 - want to work with our cards from
149:50 - different places we don't put these
149:52 - database functions right in here we put
149:54 - them into a separate file so that we can
149:56 - reuse them
149:57 - this time we put them into the lip
149:59 - folder and here into a Debian let's
150:02 - create a new file called
150:04 - card.ts so here we put database
150:07 - operations on our card that we want to
150:09 - reuse in different places but those are
150:12 - not server actions those are just
150:14 - functions we use in our server actions
150:16 - so we don't have to put the your server
150:18 - directive here at the top let's start
150:20 - with the function that creates a new
150:22 - account so export async function
150:26 - create card
150:28 - doesn't take any arguments and in here
150:31 - we create a const new card
150:34 - and then we call away to Prisma which
150:36 - again we import from the Prisma file in
150:38 - the lib folder
150:40 - Dot card
150:43 - dot create I think this is safe
150:45 - explaining
150:47 - and we want to create an empty cart so
150:49 - for data we just pass an emptier pair of
150:52 - curly braces because we don't want to
150:54 - put any data in there yet we just want
150:55 - to create an empty cart but it will
150:57 - contain the timestamps now later when
151:00 - the user is logged in we can connect our
151:02 - cards to a user account but if the user
151:04 - is not logged in we also want to support
151:06 - Anonymous cards right but how do we
151:08 - later find this card in the database how
151:11 - do we know that the user belongs to a
151:13 - certain card if they are not logged in
151:15 - for this we will store the ID of the
151:17 - card in a cookie in the browser of the
151:19 - user and later we can read this cookie
151:21 - to get the correct card again and we can
151:23 - do this with this cookies function from
151:25 - next.js we can call this with
151:28 - parentheses and then we have this set
151:30 - function there
151:32 - and then we give this cookie a name I'm
151:35 - gonna call it local card idea but you
151:37 - can give it any name you want
151:39 - and in here we want to store newcart.id
151:43 - and as simple as that we can set a
151:45 - cookie now in production you should make
151:48 - this more secure you should encrypt the
151:51 - card idea because a user can modify the
151:53 - cookies and this way they could just
151:55 - guess the idea of another card and if
151:57 - they are successful they could change
151:59 - the contents of the card of another user
152:02 - theoretically of course the damage of
152:04 - doing this is lower but in a real
152:06 - production app you should take care of
152:07 - this and the cookie itself also needs
152:10 - some additional security settings but I
152:12 - skipped this step here for Simplicity
152:13 - because it doesn't really add anything
152:15 - to this tutorial and it only matters if
152:17 - you really want to deploy this eCommerce
152:19 - website to production otherwise this
152:22 - here is enough and I will leave a
152:23 - comment as a reminder so if you are
152:25 - interested in this you can look this up
152:27 - and Google those are just some
152:28 - additional steps you have to do but it
152:30 - shouldn't be too complicated
152:32 - and then we also want to create a
152:34 - function that gets the card from the
152:36 - database you can put it above or below
152:38 - does metal
152:40 - export async function get card again it
152:44 - doesn't take any arguments here we want
152:47 - to get the card idea out of the cookie
152:49 - because we are still working with
152:50 - Anonymous cards
152:52 - so let's create a const local card idea
152:56 - cookies dot get this time
152:59 - and we of course pass the same cookie
153:02 - name as a string
153:04 - and out of this we can get a value
153:06 - this can be undefined because the cookie
153:09 - might not exist this is where it adds
153:11 - the safe call operator and Below we
153:14 - create a const card
153:15 - equals
153:17 - we can only fetch the card if we have
153:19 - the local card idea so if it is defined
153:22 - it's a rewrite local cut idea question
153:24 - mark to use the ternary operator
153:27 - if the local card ID is defined
153:30 - we want to assign the cars to a weight
153:33 - make our database operation so press my
153:36 - DOT card dot find unique to find the
153:39 - card by its idea
153:42 - then we add the swear clause
153:45 - where idea colon
153:47 - is the same as the local cut idea from
153:50 - the cookie and then we can do something
153:52 - really cool so by default the card
153:56 - doesn't contain the card items right
153:58 - because we don't store them as an array
154:00 - in the card model they are in a separate
154:02 - collection similarly the card items
154:05 - don't store the product information the
154:07 - products are also in their own
154:08 - collection and this is really important
154:10 - because if we update the information of
154:12 - a product for example the price or the
154:14 - description then we also want these
154:16 - changes to be reflected in the card
154:18 - items and in the card right we don't
154:20 - want any stale data in our card because
154:22 - this would be a terrible user experience
154:24 - instead we fetch this product
154:26 - information only when we need it but
154:28 - when we make our query here we can tell
154:31 - Prisma to put the card item information
154:33 - into the cards that we fetch from the
154:36 - database and put the product information
154:38 - into the card items and it works like
154:40 - this after where we put a comma
154:43 - and then we add include colon curly
154:47 - braces
154:48 - then in here we have items which refers
154:52 - to
154:52 - items field here in the cards model
154:56 - now we could write column true this way
154:58 - we would put the card items into the
155:01 - card that we fetch from the database but
155:03 - remember that the card items don't
155:05 - contain the product information yet only
155:07 - the product idea to go one level deeper
155:11 - we don't pass through instead we pass
155:13 - another block of curly braces
155:16 - and in here we can write include again
155:19 - to include the product information into
155:21 - the cut items so again include colon
155:25 - and in here we have the product
155:27 - and then we set this to true
155:31 - this might look a bit complicated at
155:33 - first but other completion helps you
155:34 - here so just press Ctrl space or command
155:37 - space and you will see what you can
155:38 - include and what operators you can use
155:40 - but again this way we don't only fetch
155:43 - the cards with the ID and the timestamp
155:44 - we also put the card item information in
155:47 - there and we put the product information
155:48 - into the cut items so now we have our
155:51 - full card with all the latest product
155:52 - information inside
155:54 - but we are using the ternary operator
155:56 - here so we also need a colon afterwards
155:59 - let's put it here if the local card ID
156:02 - is missing we want to return null here
156:04 - because then we can't fetch a card
156:07 - this is below we check if exclamation
156:11 - mark card if it's null
156:14 - then we want to return null from this
156:16 - function
156:18 - and if the card exists we want to return
156:20 - the card
156:21 - but I don't only want to return the card
156:23 - I also want to return some additional
156:25 - meta information I want to return how
156:28 - many items there are in the cart right
156:29 - now and what's the current subtotal of
156:31 - all the prices combined so we don't just
156:33 - return the cart we return a block of
156:35 - curly braces to create a new JavaScript
156:37 - object and here we first of all spread
156:40 - the card to put all the card information
156:42 - in there and then we add additional
156:44 - Fields one is the desires and for this
156:47 - we have to do a little calculation
156:49 - because we can't just use cuts.length
156:51 - because we don't store a separate card
156:54 - item for each item we put into our cart
156:56 - instead we always have a product and a
156:59 - quantity so we have to calculate the
157:01 - size we can do this with cart dot items
157:05 - dot reduce is just a JavaScript function
157:09 - and this takes another function as an
157:11 - argument where we get the accumulated
157:12 - value
157:13 - and the next item in the list and then
157:16 - we can calculate the total quantity for
157:19 - this we take azzm but this is just a
157:21 - naming convention you can name this
157:23 - anything you want
157:25 - plus item dot quantity so it goes
157:28 - through each element in our array and it
157:31 - adds the quantity to the accumulated
157:33 - value so that we get the total quantity
157:35 - at the end and that's the second
157:37 - argument after a comma we have to pass
157:39 - the starting value I think which is zero
157:43 - okay so again reduce is just a normal
157:45 - JavaScript function that you can use for
157:47 - stuff like this
157:49 - and then we also want to add the
157:51 - subtotal
157:54 - for which again we use the reduce
157:55 - function card dot items
157:59 - dot reduce
158:02 - again we get the accumulated value and
158:05 - the next item
158:07 - and then we want to make our calculation
158:09 - acz Plus
158:11 - item dot quantity
158:14 - and we want to multiply this with the
158:17 - price of the product right to get the
158:19 - total price
158:21 - item dot product dot price
158:24 - and again comma
158:26 - and zero as the starting value
158:29 - now it would be cool if we had a type
158:31 - for this object because we want to
158:33 - return an empty card from create card as
158:35 - well with the same structure and it's
158:38 - always good to set up a type so that we
158:40 - get Auto completion and we know what
158:41 - Fields belong in there right we can
158:43 - create the type above we could also put
158:46 - it in another file but it's closely
158:48 - connected to these functions so I think
158:50 - it makes sense to put them here
158:53 - we don't use an interface we use a type
158:55 - because again I want to combine two
158:57 - types with an intersection and I'm going
159:00 - to call it shopping count
159:02 - shopping cart and not just cards because
159:04 - card is already the name of the card
159:06 - model in the database
159:09 - we want to use this card and combine it
159:11 - with the size and the subtotal that we
159:14 - add down here so we add an Amazon sign
159:17 - to create this intersection type
159:20 - and then a block of curly braces and
159:22 - then here we put the size
159:24 - of type number
159:26 - and subtotal of type number
159:30 - there's just one problem this card type
159:32 - here only contains the data that is in
159:35 - the card model the ID and the timestamps
159:37 - it doesn't contain the card item or
159:40 - product information and by default press
159:42 - my doesn't give us this populated type
159:45 - we have card item but this is not
159:47 - populated with the product information
159:48 - but we can create these types ourselves
159:51 - and Prisma has convenience functions
159:53 - that we can use for that so above the
159:56 - shopping carts type
159:57 - we export another type and we export
160:00 - them so that we can use them in
160:01 - different files later let's call it card
160:04 - with products because that's the card
160:06 - with all the product information in
160:08 - there
160:09 - and then we can use Prisma with an
160:11 - uppercase Pier we have to import this
160:13 - dots can't get payload
160:16 - and then we add a pair of angle brackets
160:19 - like this in between the angle brackets
160:21 - we put a block of curly braces and then
160:24 - we add the same include query that we
160:27 - also have down here
160:28 - and we paste them between these curly
160:30 - braces and this creates this type from
160:32 - this Caribbean so now we have a card
160:34 - with all the populated items in there
160:36 - that contain the product information
160:39 - and then we can use this down here as
160:41 - the type for our shopping cart and now
160:44 - we have a shopping cart with all the
160:46 - data inside it and this additional size
160:48 - and subtotal value and this is the same
160:50 - structure of the object we return here
160:54 - so let's add an explicit return type to
160:57 - get card this is just a good convention
160:59 - so that you make sure that you always
161:00 - return the correct object so after I get
161:03 - card rewrite colon and again we have to
161:05 - wrap this into a promise because this is
161:07 - an async function
161:08 - and we return a shopping cart or another
161:11 - if the cookie is missing and then as I
161:15 - said we also want to return an empty
161:17 - shopping cart from create card so that
161:19 - we can work with it
161:20 - so we add a return type here as well
161:23 - again a promise of type shopping cart
161:27 - and we get an error because we are not
161:29 - returning anything yet we will do that
161:31 - below after we set the cookie we return
161:34 - an object and now since we defined this
161:36 - return type we get Auto completion here
161:38 - which is really useful the card
161:40 - information so the ID of the card and
161:43 - the timestamps are contained in this new
161:45 - card object right so we spread this in
161:47 - here just like we did for the other card
161:49 - above
161:51 - for the size we simply pass zero because
161:53 - the new card is emptier and for subtotal
161:56 - as well just so that we have a cut to
161:59 - work with in our app but this day
162:01 - complains because the data of this card
162:03 - is emptier so for items we just add an
162:05 - empty array
162:06 - okay let's format and save those and
162:09 - then we can use these functions in our
162:12 - server action file
162:14 - in increment product quantity here we
162:17 - want to fetch the card from the database
162:19 - so that we can modify it so we create a
162:22 - const card
162:23 - equals
162:26 - a weight get card which is the new
162:28 - function we just created
162:31 - but if we get back now here we want to
162:33 - create a new card because a card might
162:36 - not exist yet if we open the website we
162:38 - don't create a card immediately we only
162:40 - create it when we actually modify the
162:42 - card so that we don't bloat our database
162:45 - with empty Anonymous cards so we add two
162:48 - question marks which means that the
162:50 - right side will be executed if get card
162:52 - returns null or undefined
162:55 - then we want to await create card
163:00 - and this also gives us a new card back
163:02 - right just an empty card when we
163:05 - reformat this file prettier
163:07 - automatically adds parentheses around
163:09 - these cards but I think they should not
163:12 - be necessary the logic should be the
163:14 - same this is probably just for
163:15 - readability so now we have our card and
163:19 - when we click our add to cart button we
163:21 - either want to add this product to the
163:22 - card if it doesn't exist or if it's
163:25 - already in the card we want to increase
163:26 - the quantity so we check if the article
163:29 - is already in the card let's create a
163:31 - const article in cart equals
163:36 - and then we want to find this item in
163:39 - card.items so we can use the find
163:42 - function which again is just a normal
163:44 - JavaScript function
163:46 - this passes us each item in this array
163:49 - and then we can check if an item with
163:51 - this product ID is already in the card
163:53 - so we check item dot product ID which
163:58 - remember is part of this schema so each
164:00 - card item contains the product ID and
164:03 - that it references if this product idea
164:07 - is the same
164:09 - as the product idea that we passed to
164:11 - this increment quantity function then we
164:14 - know that this item is already in the
164:16 - card and then we want to increase its
164:18 - quantity if not we want to put a newer
164:21 - item into the card
164:23 - So Below we check
164:25 - if article in cut
164:30 - we want to update the quantity of the
164:32 - existing card item so we call a weight
164:35 - Prisma which again we have to import
164:38 - Dot card item dot update to which as
164:43 - usual we pass curly braces
164:45 - here we first have to type Prisma which
164:48 - item we want to update with this where
164:50 - keyer to which again repairs curly
164:53 - braces and in here we have the idea
164:55 - that we compare to an article and cut
164:58 - dot idea because this is the one we want
165:01 - to update right
165:03 - comma and as the second value we pass
165:05 - the data of this update
165:08 - as usual we get Auto completion here we
165:11 - want to update the quantity
165:14 - again curly braces and then we have this
165:17 - increment value that we can use
165:19 - we want to increment this by one now we
165:22 - could also update it with the current
165:23 - quantity plus one this would have the
165:25 - same effect however I think increment
165:28 - avoids race conditions if you updated
165:30 - from relatively places but this
165:32 - shouldn't make any difference here
165:33 - because no user will update their card
165:35 - from many different places at once right
165:37 - but if we have this increment function
165:39 - available then we might as well use it
165:41 - okay so we increment the product
165:43 - quantity of the existing cards in the
165:46 - else block if the item is not in the
165:48 - card yet then we want to create a new
165:50 - card item
165:51 - so we call a weight Prisma Dot card item
165:56 - dot create this time
165:59 - and here we only have to pass the data
166:03 - we want to set the card idea
166:06 - to the idea of the cards that we are
166:09 - fetched again the card ideas part of our
166:13 - card item model here
166:14 - so that we know which card this item
166:17 - belongs to so we set a card idea
166:21 - then we want to set the product idea of
166:23 - the product we are adding
166:25 - now instead of writing product ID column
166:27 - product idea we can also use the short
166:29 - syntax if the value has the same name as
166:31 - the key
166:33 - and we want to set the quantity to one
166:37 - but there's one more thing we want to do
166:39 - here after this operation is done we
166:41 - want to refresh the screen so that we
166:43 - see the latest number of items in our
166:45 - cards in Enough by later for example but
166:48 - we are working mostly with server
166:49 - components so we don't have any state in
166:51 - there that we can update instead we can
166:53 - refresh the whole screen basically and
166:56 - the way this works in server actions is
166:58 - you call revalidate path with the path
167:01 - that you want to refresh which will
167:03 - fetch the latest data
167:05 - string
167:07 - off the path we want to update we want
167:09 - to update the slash products slash scrap
167:14 - records and the idea like this
167:17 - this is the path of the product page
167:20 - right we have app products and ID and
167:24 - scrap records and this is the path we
167:26 - want to refresh notice that this string
167:29 - contains the path and not the URL so we
167:32 - put the same ID between square brackets
167:35 - and here as we also have in the folder
167:37 - name because this is not the actual URL
167:39 - this is the path it has in our file
167:41 - structure
167:43 - and later when we use this server action
167:45 - this line here will take care that the
167:47 - screen refreshes with the latest data
167:49 - and we want to call This Server action
167:51 - in our add to cart button right now
167:54 - normally we could just import the server
167:56 - action here and use it in here this
167:58 - works even when this is a client
168:00 - component however there is currently a
168:02 - bug that makes this approach not work
168:04 - with next off that we will later
168:06 - Implement later we will not only have
168:09 - the anonymous card right we will also
168:11 - fetch the current user session when we
168:13 - get the card from the database and this
168:15 - currently doesn't work in server
168:17 - components that you import directly into
168:19 - client components this is a bug they
168:21 - will eventually fix this but for us
168:23 - right now this means that we can't
168:25 - import our server action right here in
168:27 - this adds to cut button component but
168:30 - what we can do instead is we can import
168:32 - it in the server component so the page
168:34 - itself and then we can pass the server
168:37 - action as a prop to the adds to cart
168:39 - button so we just pass it as another
168:41 - argument just like the product idea so
168:44 - let's do it like this let's add another
168:46 - argument to the props
168:49 - which we give the same name as The
168:51 - Silver function we just set up
168:53 - increment product quantity the name
168:57 - doesn't have to match but it makes sense
168:58 - because this is what we expect right
169:02 - so this is a function that takes in the
169:04 - product idea and it doesn't return
169:06 - anything
169:08 - so we write it like this
169:10 - colon product idea of type string and
169:15 - the return value of the function is a
169:16 - promise of type void promise again
169:19 - because it's an async function
169:21 - then we'll
169:22 - add this function down here where we
169:24 - destructure the props
169:27 - and then we want to call those when we
169:29 - click the button right
169:31 - so inside this on click block
169:34 - now the documentation about server
169:37 - actions state that when you call them
169:40 - from a client component you should wrap
169:42 - them into a use transition use
169:44 - transition is a relatively newer react
169:46 - hook which you can look up if you want
169:48 - but they don't really expand in the
169:51 - documentation why we have to use that
169:52 - here it's not really clear they just
169:54 - explained that we have to use it I spend
169:57 - a lot of time trying to figure out why
169:58 - because this is not really explained
170:00 - anywhere yet at the moment but I
170:03 - eventually got an answer on Twitter so I
170:06 - asked here
170:07 - and Tim is part of the next JS team so
170:11 - he should know start transition bounds
170:13 - the error that happened in the
170:14 - transition to the component where your
170:16 - card use transition this ensures that
170:18 - server actions when cut manually Do Not
170:20 - Crash the entire page so in a nutshell
170:23 - this means that we have to wrap this
170:25 - into a stats transition so that any
170:27 - error that happens in the server action
170:29 - is forwarded to our own error page which
170:32 - I think we haven't set up yet but we
170:34 - will do this later in other words the
170:35 - error is handled properly and doesn't
170:37 - crash our app and also when we use start
170:40 - transition we get this loading State
170:42 - here that we can use to show a loading
170:45 - indicator so let's go back into our
170:47 - project and implement this so we need
170:50 - this use transition hook that we can
170:52 - initialize here at the top so const and
170:55 - it returns a topic just like you said
170:57 - the first value is usually called is
171:00 - pending which is true while this
171:02 - transition is running
171:05 - and the second argument is usually
171:07 - called start transition you can give
171:09 - this any name you want but those are
171:11 - naming conventions and then we
171:13 - initialize this with this us transition
171:15 - hook which is a react import normally
171:18 - the purpose of use transition is to not
171:20 - block the UI when we do a state updates
171:22 - but this doesn't really have anything to
171:25 - do with our server actions here again in
171:27 - our case this use transition is
171:29 - necessary because we call a server
171:30 - action from a client component and this
171:33 - takes care of handling the error and the
171:34 - loading State properly this is what I
171:36 - showed you a moment ago
171:38 - but I also want to create a second state
171:41 - when our operation was successful we
171:43 - want to show a little message right
171:46 - so we create another toolbar that
171:48 - contains the success and set success
171:53 - and we assign this to a U.S state not
171:56 - use transition this time but use State
171:58 - make sure that it adds the correct
172:00 - import and re-initialize your state with
172:03 - faults which automatically infers this
172:05 - as a Boolean
172:07 - and then in the on-click Handler of our
172:09 - button first of all we want to set
172:11 - success back to false to hide the
172:13 - success message when we click the add to
172:15 - cart button again then we want to call
172:17 - the server action and again we have to
172:19 - wrap this into a start transition which
172:21 - is this part that we get here
172:24 - this is a function that takes another
172:26 - function as an argument in here we write
172:29 - async and add another arrow function
172:31 - like this
172:33 - async because we want to await our
172:35 - increment product quantity function
172:37 - which is an async function this one here
172:40 - we call it weight
172:41 - increment product quantity
172:44 - and pass the ID of the product so this
172:46 - is our server action that we pass to the
172:49 - clan component and then after this is
172:51 - done we want to set success to true to
172:55 - show the success message this is all
172:57 - happening inside start transition
173:00 - okay so now we have a loading stage
173:02 - through its pending and we have a
173:04 - success date from our use date now let's
173:06 - render a loading spinner and a success
173:08 - message in the UI when these values are
173:10 - true
173:11 - we do this below the button but still
173:13 - inside the stiff and we already styled
173:15 - this div to a flexbox that centers the
173:18 - items so this should be aligned
173:20 - correctly
173:21 - and here we put an expression with curly
173:23 - braces and first we check if s pending
173:27 - is true
173:29 - then we want to render a loading
173:31 - indicator which again we do with a span
173:34 - that gets a safe closing tag
173:37 - and for the class name we use Daisy UI
173:39 - classes as we did earlier loading to
173:43 - turn this into a loading indicator
173:45 - and loading spinner yeah to make it a
173:48 - loading spinner and we can set the size
173:49 - with loading minus MD
173:53 - and then another one below this time we
173:56 - want to check if success is true to show
173:59 - the success message but success will
174:01 - actually be true before we have
174:03 - revalidated the path so before we
174:06 - reloaded the page which remember we do
174:09 - in our server action we can't revalidate
174:11 - path here and this happens after the
174:13 - server action has finished however this
174:16 - is pending value will be true until the
174:18 - revalidation finished so what we do is
174:21 - we combine these two values down here we
174:23 - check that is pending is back to false
174:26 - with exclamation mark is pending
174:29 - and success is true
174:32 - only then we want to render the success
174:34 - message
174:35 - which again we put into a spin
174:38 - it will say added to cart
174:41 - you can add any text you want
174:44 - and reset the class name to attack
174:46 - success which again is a this UI class
174:49 - that just gives us a green color
174:52 - okay and now we only have to pass our
174:55 - server action from our page to our add
174:58 - to cart button and one more time to
175:00 - recap normally we can import server
175:02 - actions in client components this is not
175:04 - a problem but here we have to pass it as
175:06 - an argument because there's currently a
175:08 - little bug that happens when we later
175:10 - use next off to get the locked in user
175:13 - session this is where we passed the
175:15 - server action as an argument instead
175:18 - so to add to cart button we have to pass
175:21 - increment product quantity
175:23 - which we import from the actions file
175:26 - and then we should be all set up to try
175:29 - this out
175:30 - let's refresh the page just to make sure
175:32 - when we click the add to cart button we
175:35 - should see a loading spinner for a short
175:37 - moment and then we should see a success
175:39 - message right add to cart as the loading
175:41 - spinner added to card now there was a
175:43 - little glitch when the page reloaded but
175:46 - this glitch only happens in development
175:48 - because it's reloading the font for some
175:50 - reason but in production there is no
175:52 - glitch so it doesn't look as if we just
175:54 - refresh the page instead the image and
175:56 - the text will just stay in place and
175:58 - only the parts that have to be updated
176:00 - will refresh with the latest data but
176:02 - there is no glitch in the UI it will
176:04 - look as if we just updated some State
176:07 - and now we should see this item in our
176:10 - database right let's look in the card
176:13 - items collection and refresh this
176:16 - and there's now one product in here with
176:19 - a quantity of one and it also contains
176:21 - the ID of the card where this is added
176:23 - to us so 901 were the last digits and
176:27 - it's the same idea that the card in the
176:29 - card collection has
176:31 - let's try adding the same item again and
176:33 - see if we increase the quantity instead
176:36 - of adding a new entry here so again we
176:38 - click this button we see our loading
176:40 - spinner
176:42 - and let's refresh the database quantity
176:45 - to a perfect
176:46 - there should also now be a cookie set in
176:49 - our browser with the same card idea so
176:51 - this ends with 901 let's remember this
176:54 - open the Chrome Dev tools with F12 and
176:58 - we can see the cookies here in the
177:00 - application tab
177:01 - we can click here on cookies and on
177:03 - localhost and there's the local card ID
177:05 - that contains our current card ID and
177:08 - this cookie will still be there when we
177:09 - close the page and open it again and
177:11 - this allows us to fetch our Anonymous
177:13 - card even if we are not locked in so
177:15 - this is really professional
177:17 - this is also how big eCommerce website
177:20 - actually do it they store the identifier
177:22 - for the card in a cookie if we delete
177:25 - this cookie
177:27 - and add another item to the card then it
177:30 - should create a new card right because
177:32 - then the identifier for the card is
177:34 - missing let's try this out let's delete
177:36 - this code here just with the delete
177:38 - button
177:40 - and Let me refresh the page just to be
177:42 - sure that the changes are applied and
177:44 - click add to cart again
177:46 - and then in our database we should see a
177:49 - new card
177:52 - and there it is and now we have a cookie
177:54 - for this card ID instead now later I
177:57 - will also explain to you how you can
177:59 - delete cards automatically if they
178:01 - haven't been updated for a while so that
178:03 - we don't accumulate a lot of abandoned
178:05 - cards in our database right but for now
178:07 - let's ignore this now of course we could
178:10 - also get rid of this loading State here
178:12 - and let the database operation run in
178:14 - the background but for something like a
178:16 - shopping cart it's actually better to
178:18 - have a loading spinner and then a
178:19 - success message so that the user has a
178:21 - confirmation that the item was
178:23 - successfully added to the card because
178:25 - if they click add to cart and then
178:26 - navigate away and then the item wasn't
178:28 - actually added to the cards for some
178:30 - reason maybe it through an error maybe
178:32 - there was some other problem then it's a
178:34 - bad user experience if they don't
178:36 - actually see the item in the card this
178:38 - is why for an e-commerce app it's
178:40 - actually better if there's a loading
178:41 - spinner and a success message after the
178:43 - operation has finished and this is also
178:45 - how Amazon does it by the way let's also
178:48 - add another item just to see that this
178:51 - works as well a green bottle for example
178:54 - again adds to cart edit
178:58 - let's check the card items collection
179:02 - and now we have one of these bottles in
179:04 - here which would be this one this has
179:06 - the product idea 588a which should also
179:10 - be the idea
179:11 - of the bottle here here
179:14 - 88a now at first I was worried about
179:18 - race conditions when we click this
179:19 - button multiple times in a row because
179:22 - this also creates a new card when we
179:24 - don't have one yet right and we want to
179:26 - avoid accidentally creating multiple
179:28 - cards because we hammered this button
179:30 - multiple times in a row but when you try
179:32 - this out you will actually notice that
179:33 - these server actions are executed in
179:36 - succession so even if we click the add
179:38 - to cut button multiple times it will
179:40 - first execute the first server action
179:42 - and after this has finished it will
179:43 - execute the second one which then
179:45 - increments the quantity so there is no
179:47 - raise condition at least this is how it
179:49 - works in the moment again server actions
179:51 - are in Alpha maybe they are changing
179:53 - this behavior in the future but at least
179:55 - for now this works exactly like it
179:57 - should work let's actually try this out
179:59 - as well let's delete our cards for a
180:01 - moment we can just delete the whole
180:03 - collection it will be recreated when we
180:06 - create a new card and let's do the same
180:08 - for the card items
180:13 - gonna refresh the pitch and then I click
180:16 - adds to cut fast two times in a row and
180:19 - it should create only one card and then
180:21 - increment the quantity of the existing
180:23 - item to two so click click
180:26 - two times
180:28 - let's check our database
180:30 - let's refresh this
180:32 - zor there should be one card
180:37 - and one card item with a quantity of two
180:40 - so this works there is no race condition
180:42 - and our app works fine okay cool later
180:45 - we will add our card page where we can
180:47 - change the quantity of the existing
180:49 - items so then we will use another server
180:51 - action but for now let's add enough bar
180:53 - and the photo to our page so that we can
180:55 - navigate between our different pages and
180:58 - also show our cards and navigate to our
181:00 - card later
181:01 - okay before we set up our navbar I want
181:04 - to make one more little change to our
181:06 - schema file I want to add on delete
181:09 - Cascade not only to the product but also
181:12 - to the card
181:13 - here in the card item model so again
181:16 - comma
181:17 - on delete colon Cascade with the
181:20 - spelling because now when we delete a
181:23 - card all the corresponding card items
181:25 - will be deleted as well which I think
181:27 - makes sense
181:28 - all right and then we want to set up the
181:30 - navbar that we put at the top of our
181:33 - page
181:34 - so that we can navigate between
181:36 - different pages and we don't have to
181:38 - type in the URL all the time we could
181:40 - put enough bar into the components
181:42 - folder but since we use it throughout
181:44 - our whole app I like to put it directly
181:46 - into the app folder here
181:48 - in here we create a new folder called
181:51 - navbar because we need multiple files in
181:54 - there
181:55 - and the first file we put in there is
181:58 - navbar.tsx
182:00 - of course we used the navbar provided by
182:03 - a Tailwind UI you can find it in the
182:06 - documentation there are different
182:07 - variations you can find the code of it
182:09 - but the one we are building here
182:11 - combines different elements of this page
182:13 - into one we use the shopping cart item
182:16 - we use the search box so let's go back
182:18 - into our project and Export a default
182:22 - function
182:25 - foreign
182:28 - statement let's start building the UI of
182:32 - the snuff bar
182:34 - we start with a div
182:37 - which we give a background color
182:40 - with the class BG minus base minus 100.
182:45 - before we continue let's save this and
182:48 - then put it in the UI and we want the
182:50 - snuff bar to be a visible on all pages
182:52 - throughout our website so we put this in
182:55 - the root layout
182:56 - it's part of the HTML body but not part
182:59 - of the main tag so above the main tag
183:03 - we just render our navbar
183:05 - and save it
183:08 - let's see if we can already see
183:09 - something in the UI not yet but we will
183:12 - see something when we put content in
183:15 - here
183:16 - into this order diff we put another div
183:19 - to which again we add some class names
183:21 - so the first one is navbar which is
183:24 - coming from this uium and this adds some
183:27 - CSS attributes to a style dislike enough
183:29 - bar then I want to give the snapbar the
183:32 - same Max squid as the content of our
183:34 - pages so that the elements of the navbar
183:36 - don't stretch out throughout the whole
183:38 - screen
183:39 - so again we use max
183:41 - w7xl that's also what the value that we
183:45 - used here in our layout
183:47 - for the main container we use the same
183:49 - one here and this is why I wrap this
183:51 - into this order div which applies the
183:54 - background color of the navbar because I
183:56 - want the background color to take up the
183:58 - forward but the contents of the navbar
184:00 - be constrained within this Max squared
184:03 - field and to send that is on the screen
184:06 - we add a margin Auto
184:08 - then we make this nuff bar a flex column
184:12 - the flex class is not necessary because
184:15 - that's already included in the navbar
184:17 - here
184:18 - Flex color means the elements will be
184:20 - aligned below each other but we only
184:22 - want this to be the case on small
184:24 - screens
184:25 - so we add a break point here as M so on
184:28 - small screens and higher the only value
184:30 - below as m is XS so Flex coil will be
184:34 - applied on XS screens so on very small
184:37 - screens and on slightly larger screens
184:40 - SM
184:42 - and larger we want to set this to a flex
184:45 - row so the elements are aligned
184:47 - horizontally
184:49 - and then we also add the gap of tool to
184:51 - get some space between the items you
184:53 - will see how this looks in a moment
184:55 - after we added items to our enough bar
184:58 - so the first item I want to put in the
185:00 - navbar is the logo and the name of the
185:02 - website which we wrap into another div
185:05 - which we give the class name Flex 1
185:08 - this adds this Flex one one zero percent
185:11 - attribute which defines how these items
185:14 - stretch over the available space of the
185:17 - navbar
185:18 - then in here we put a next link
185:21 - so that we can click this item and
185:23 - navigate to the front page so we set the
185:26 - edge ref to just slash as a string to
185:29 - get to the home page and inside this
185:31 - link we put a next image that will
185:35 - contain the logo of the website again
185:37 - make sure the import is correct
185:40 - we set the sr0
185:42 - to the logo which I already included in
185:45 - the starting project if you are not
185:47 - using the starting project then you can
185:48 - get the logo out of the project on
185:51 - GitHub
185:52 - twin srz should be an assets folder and
185:55 - in here is the logo which I prepared
185:58 - we have to import this here
186:01 - so import the logo
186:03 - from
186:05 - at which is the root folder
186:08 - in here is the assets folder
186:12 - and in there is logo.png that's what we
186:16 - want to use for the image source
186:19 - and then we want to resize this to a 40
186:23 - pixels times 40 pixels
186:28 - entries that the alt text to A flomazon
186:32 - logo
186:35 - and then we close this
186:38 - okay let's save this and see how this
186:41 - looks so now we'll see our enough bar
186:43 - with this logo in there
186:45 - and I also want to put some text next to
186:47 - this logo so still inside the link but
186:49 - below the image
186:51 - we write flomazon
186:54 - but I want to style this properly else
186:56 - we add some class names directly to the
187:00 - link
187:01 - we make this a button
187:03 - or rather with status as a button it's
187:06 - still a link
187:08 - button ghost gives this a certain
187:10 - styling that looks like this
187:13 - looks pretty cool
187:14 - we make all the text in here
187:18 - larger with text XL
187:22 - but the button automatically makes this
187:24 - all uppercase we can revert this
187:27 - with normal minus case and those are all
187:30 - tailwind and Desi UI classes so now we
187:33 - have this link here with the logo and
187:35 - the name and when we click this we get
187:38 - to the front page really cool okay below
187:41 - this diff here so the flex one div
187:45 - we put another div which will contain
187:48 - the search field and the shopping cart
187:50 - button but those will be aligned on the
187:52 - right side whereas the logo is aligned
187:55 - on the left side
187:56 - so Flex 1 basically makes this part here
187:58 - grow to all the available space
188:01 - and it pushes these elements that we put
188:04 - into this div to the right side
188:07 - to this diff below we add the class
188:09 - names
188:11 - Flex none
188:13 - and GAP 2 as well to get some spacing in
188:16 - here
188:18 - then in here we want to put the search
188:19 - field for which we use a form
188:23 - so we put a form in here
188:25 - and we will use Observer action to
188:27 - execute the search again into this form
188:30 - we pass a div
188:32 - with the class name form control and
188:35 - again I'm getting these class names from
188:37 - the Desi UI documentation
188:40 - we close this div
188:43 - and add an input field in here
188:45 - which gets a safe closing tag as usual
188:49 - we give this input the name search query
188:56 - we set the placeholder to search
188:59 - entry status like we did earlier on the
189:02 - ads product page
189:04 - we make this an input
189:07 - with the input Borat styling
189:12 - then I want this input field to take up
189:15 - the full available width with W minus
189:18 - four but the width will still be
189:20 - constrained by the text that wrap this
189:22 - input field and then I also want to set
189:24 - a Min width of 200 pixels so that we
189:27 - can't shrink the input fields to a very
189:29 - tiny size where we can't use it anymore
189:31 - and again we can use an arbitrary pixel
189:34 - value like this
189:35 - and when we saved us we see our input
189:37 - field
189:39 - and the snuff bar should now also be
189:41 - responsive right so at a certain size
189:44 - they should move below it and it works
189:48 - but the input Fields doesn't get too
189:50 - small at a certain size
189:53 - it will just say no I don't want to
189:56 - shrink any further and this happens at
189:58 - 100 pixels
190:01 - and to execute the search we will use a
190:04 - server action again and since this file
190:06 - is not a client's component we can just
190:09 - declare the server action directly in
190:11 - here so we create an async function
190:14 - cut search products
190:18 - and the same as on the add product page
190:20 - this takes
190:22 - form data
190:25 - and at the top of this function
190:27 - we add the use server directive
190:30 - then we want to get the search query out
190:32 - of the form data
190:35 - so we create a const the search query
190:37 - and we have done this before
190:39 - we call formdata.get
190:43 - past the name of this input field which
190:46 - is search query
190:49 - and then recode to a string to turn this
190:52 - into a string
190:54 - and then below we check if search query
190:57 - has a value
190:59 - because we only want to execute a search
191:01 - if there's actually something typed into
191:02 - the input field then we call redirect
191:05 - which we import from next navigation
191:07 - make sure the import is correct
191:11 - and we want to navigate to the search
191:13 - page which we haven't set up yet but we
191:15 - do this later
191:17 - the URL will be a slash search
191:20 - and we will pass the search query as a
191:22 - URL query param so we add a question
191:25 - mark
191:26 - query equals
191:28 - without the space and then we append the
191:31 - search query value
191:33 - the cool thing is that redirect also
191:36 - works in server components and server
191:38 - actions so we can execute this in here
191:40 - and it doesn't require any JavaScript so
191:43 - our search will work even if JavaScript
191:45 - is disabled which is always nice to have
191:48 - and to execute this when we submit our
191:50 - form we do the same as we did earlier
191:54 - we set the action
191:56 - to the name of our server action search
191:59 - products
192:01 - now if you are experienced with HTML
192:03 - then you might think we could also just
192:06 - pass the URL that we want to navigate
192:07 - tour to the form action instead of doing
192:10 - this detour through the server action so
192:13 - we could just put this part here
192:15 - directly down here and remove the whole
192:18 - server action altogether however this
192:20 - would reload the page which is a very
192:22 - jarring user experience with our
192:24 - approach here we are not reloading the
192:26 - page we have this very resolved
192:28 - navigation we had enough bar and
192:29 - everything stays in place and this just
192:31 - looks and feels better than using the
192:33 - normal URL action okay but the button
192:37 - that shows the shopping cart will have
192:39 - to be a client component because it
192:41 - shows a pop-up menu and in order to show
192:43 - and close this pop-up menu we need
192:45 - JavaScript we don't get around this so
192:48 - to not make this whole enough bar a
192:50 - client component we put this into a
192:51 - separate file
192:53 - and we put this into the same love buff
192:55 - holder here
192:56 - let's color it a shopping cart button
193:04 - and Export a component
193:07 - with the same name as usual
193:13 - now to this shopping cart button we will
193:15 - pass the card itself so the shopping
193:18 - cart that contains the data of the card
193:20 - but we will fetch the card in our navbar
193:23 - because this way we can fetch it server
193:25 - side and we don't have to use a state or
193:27 - anything like that we just pass it to
193:29 - our client component here so at the top
193:32 - we create an interface
193:35 - the shopping cart button props
193:39 - which will contain the card
193:42 - which is off-type shopping cart that's
193:44 - the type we created earlier with all the
193:46 - card item and product information inside
193:48 - account so we import those from the lib
193:51 - folder
193:52 - but this can also be neither because we
193:54 - might not have created a card yet
193:57 - okay and then we pass this card to the
194:00 - component so here shopping cart button
194:02 - props Andrea destructure the card out of
194:06 - there
194:06 - and then rear return some UI here
194:11 - the order element is a div
194:16 - which we give the class names
194:19 - drop down
194:22 - and drop down and
194:27 - which again are these UI classes
194:30 - for now let's save this and let's put
194:32 - this shopping cart button into our
194:34 - navbar
194:35 - so first we have to fetch the shopping
194:37 - cart right we can do this right here
194:39 - because this is a server component
194:41 - but we have to make this an async
194:43 - function
194:45 - then we can create a const card
194:48 - and call await get card from our lib
194:53 - folder
194:54 - and now we have the card data and we can
194:56 - pass it to our shopping cart button
194:59 - we put a shopping cart button here right
195:01 - below the form
195:06 - opening angle bracket shopping cart
195:08 - button and it expects the card
195:12 - which we already fetched
195:15 - then let's finish the shopping cart
195:17 - button so back into this component and
195:20 - most of the mark up here is coming from
195:22 - the daisy UI documentation I just copied
195:25 - this for the most part
195:27 - in here we put a label
195:29 - which we give the tab index 0. the top
195:33 - index is necessary so that we can use
195:35 - tab to navigate between items which is
195:37 - necessary for accessibility
195:40 - we style those
195:42 - with BTN ghost
195:45 - and BTN Circle which makes this round
195:48 - yeah and the normal BTN class which is
195:51 - the base button styling
195:54 - we close this label tag
195:56 - then we wrap this into another diff
196:00 - to which we add the class name
196:03 - indicator because this way we can have a
196:06 - little batch on our cards button that
196:07 - shows the current number of items in the
196:10 - card
196:13 - then in here we copy paste the same card
196:16 - icon that we also use on the add to cart
196:18 - button here so you can either copy paste
196:21 - it from there or copy paste it from the
196:23 - GitHub repository
196:26 - when we save this we already see a
196:28 - discount I can hear and to add some
196:31 - number to this indicator here we go
196:34 - below the SVG but still inside the stuff
196:37 - and add another spin
196:42 - which contains the number that we want
196:44 - to put in there so we add an expression
196:46 - with curly braces what do we want to put
196:49 - in here we want to put the card size in
196:51 - there
196:52 - which is part of the shopping cart type
196:55 - right so when we fetch a card we return
196:58 - the size that we calculated earlier and
197:01 - we want to display the size here
197:03 - if this value is undefined because a
197:06 - card doesn't exist yet then we want to
197:08 - file back to a zero and when we left us
197:11 - it's not styled properly yet
197:13 - we have to add the class name
197:16 - to this pen as well
197:18 - the first one is batch
197:20 - then batch s m for the size
197:24 - and indicator minus item now when we
197:27 - save this this is styled properly and
197:29 - looks really cool doesn't it and this
197:32 - always reflects the actual number of
197:34 - items in our card
197:36 - so when we are
197:37 - add another item this will switch to a
197:40 - three after this has finished loading
197:42 - and number three
197:45 - but we also want to show a drop down
197:47 - menu when we click this item so we go
197:50 - below this label here
197:53 - and add another div
197:56 - again the stiff gets this Tap index zero
198:00 - value
198:01 - and some class names to style this
198:04 - the drop down will be stayed like a card
198:08 - then we have drop down content and again
198:10 - you can find instructions on how to
198:12 - style these elements properly and the
198:14 - devs the UI documentation
198:17 - then we add cards compact which adds
198:20 - some size styling
198:23 - we need a margin top
198:25 - we need a
198:27 - width
198:29 - which we set to a w minus 50 to 1 this
198:33 - is just the width of this drop down menu
198:36 - we need a background color with BG base
198:38 - 100 and we can add a drop shadow with
198:42 - the shadow class
198:44 - and one more class Z minus 30m this sets
198:50 - the Z Index this takes care that this
198:52 - drop down menu is not hidden behind
198:54 - other elements so it's on the foreground
198:57 - okay then we go inside this div and put
199:00 - the contents of this drop down menu in
199:02 - here
199:04 - again we need another div
199:06 - this is just unfortunately how HTML
199:09 - works it's stiff within divs within divs
199:13 - we style this with the card body class
199:17 - and in here again I want to show the
199:19 - size of the cards and also the subtotal
199:22 - so the total dollar amount of our items
199:25 - combined right now so inside the stiff
199:27 - we put a spin
199:30 - with the class names
199:32 - text LG for the text size
199:36 - and font bold
199:41 - and this was there
199:43 - number of items so we add an expression
199:45 - and then items behind an index
199:48 - expression we want to show the card size
199:51 - again or file back to zero if we don't
199:54 - have a card yet
199:55 - and when we click our button here we
199:58 - already see our drop down menu
200:00 - now let's add a subtotal below as
200:03 - another spin
200:06 - which we give the class name text info
200:09 - this changes the text color
200:13 - and in here we write subtotal colon
200:17 - and then we want to show the price which
200:19 - we want to format remember for this we
200:21 - have this format price function that we
200:24 - created earlier
200:27 - to this we want to pass card dot
200:30 - subtotal which again we calculate when
200:32 - we return the call again this might be
200:34 - undefined in this case we want to file
200:37 - back to zero again
200:40 - okay save this
200:41 - now we have this value in here as well
200:44 - and it's actually the correct value so
200:46 - this is correctly calculated one more
200:48 - thing I also want to have a button in
200:50 - here that brings us to the cart page
200:52 - where we can then modify our account
200:53 - right
200:54 - So Below the subtotal span
200:57 - we put another div
201:00 - with the class name card actions
201:04 - this is for buttons that we put into
201:06 - this menu but we don't use a button we
201:09 - use a next link again because we are
201:11 - linking to another URL but this import
201:14 - here is wrong we don't want to import it
201:16 - from this dist folder we want to import
201:19 - it
201:22 - from
201:23 - next
201:25 - slash link
201:26 - sometimes Auto Import doesn't work for
201:29 - whatever reason but the curly braces are
201:31 - wrong we have to remove them because
201:33 - this is the default export
201:36 - okay so this link will lead us to a
201:39 - slash code again we haven't set up this
201:42 - page yet but we will do so later
201:44 - we'll style this link like a button with
201:47 - BTN
201:49 - a primary button with BTN primary
201:53 - and to take up the full width we add BTN
201:57 - block
202:01 - and this button was there
202:03 - viewer card
202:06 - so now we have this button here that
202:08 - brings us to the cut page which doesn't
202:10 - exist yet
202:12 - now since this page doesn't exist this
202:16 - drop down menu closes when this page is
202:18 - loaded for some reason but if we adjust
202:20 - for a moment change this to a page that
202:22 - does exist
202:25 - and click this button again
202:27 - then you can see that the drop down does
202:29 - not close automatically we actually have
202:31 - to handle this ourselves this is why we
202:34 - need JavaScript unfortunately we can't
202:36 - close this drop down menu without
202:37 - JavaScript so make sure you set the href
202:40 - back to slash card and then we add
202:43 - another prop to the link
202:45 - we want to set the on click Handler here
202:48 - and we want to call close
202:50 - drop down
202:53 - and we put this function
202:55 - here above the return statement
202:59 - so we create a function
203:02 - that we give the same name
203:05 - and what we want to do is we want to
203:07 - remove the focus from this button here
203:10 - because this is what opens this drop
203:12 - down menu
203:13 - the way we do this is we get the
203:16 - currently focused element like this
203:19 - document DOT active element and you have
203:23 - to do this with these days UI elements
203:25 - you have to handle closing this drop
203:26 - down menus yourself
203:28 - then we have to cast this to an HTML
203:31 - element
203:33 - then we have to check if we found an
203:35 - element we want to remove the focus
203:37 - which we do with lm.blur
203:41 - now when we save this we will get an
203:42 - error
203:43 - because on click requires this to be a
203:46 - client component because onclick needs
203:49 - JavaScript
203:50 - so at the top we make this whole
203:52 - shopping cart button a client component
203:55 - saved us
203:56 - and then it should work again just for
203:59 - testing purposes I let this link us to
204:01 - the home page but I set this back to the
204:04 - card page in a moment
204:06 - and now when we click this button we get
204:08 - to the home page and the drop down menu
204:10 - closest okay revert the spec
204:13 - okay our enough bar is finished this is
204:16 - really cool because now we see the
204:18 - actual shopping cart data in here next
204:20 - we want to set up the cards page where
204:22 - this links us to but before we do this I
204:25 - also want to add a simple photo to our
204:27 - website just so that it looks more
204:29 - complete so let's put the folder into
204:31 - the app folder as well because it wraps
204:33 - the whole website
204:36 - photo.tsx and this time I'm just going
204:39 - to copy paste this whole thing because
204:40 - this is just some dummy markup I
204:43 - actually copied this right from the Desi
204:45 - UI documentation and I will put a link
204:47 - to this file in the description below as
204:49 - well so you can copy paste it from there
204:51 - but again this is just some placeholder
204:55 - and then reporters
204:57 - into our root layout below the main
205:00 - content
205:01 - we render the photo here
205:03 - safety and there's our beautiful
205:06 - professional photo
205:08 - that's also responsive by the way
205:11 - this looks really a like right out of
205:14 - amazon.com
205:16 - okay there's one more bug I want to
205:19 - mention right now again these server
205:20 - actions are still in Alpha so they have
205:22 - some bugs we have to wait until they are
205:24 - fixed right now while a server action is
205:27 - running we can actually not navigate to
205:29 - another page over a link to try this out
205:32 - for a moment I want to edit the layer to
205:35 - our increment quantity action again I
205:37 - will remove this in a moment
205:40 - so here I await a new promise
205:44 - and I'm trying to remember the syntax of
205:46 - this you don't have to write this this
205:47 - is just to show you something I just
205:49 - want to create an artificiality layer
205:52 - which we can do by a wedding
205:55 - a timeout
205:57 - so let's say we delay this for three
205:59 - seconds just for testing purposes
206:03 - now when I click this add to cart button
206:05 - this will take over three seconds to
206:07 - finish and while this is loading we can
206:09 - actually not navigate to the front page
206:11 - over this link
206:13 - so this is loading and I click this link
206:14 - and nothing happens
206:16 - but the short work we only navigate to
206:18 - the front page after this has finished
206:20 - but this is a bug in server actions
206:22 - right now so we just have to ignore this
206:24 - for the moment there are discussions
206:26 - about this on GitHub and I'm sure they
206:28 - will fix this eventually but just that
206:30 - you know that this bug exists so I want
206:33 - to remove This Promise here again and
206:35 - then we want to set up our cart page
206:38 - all right let's set up our cut page
206:42 - so we navigate to a slash cart when we
206:45 - click our view cards button here
206:47 - this means we need a folder in our app
206:50 - folder with this name card
206:53 - and in here we put a page.tsx
206:58 - and then we export a default async
207:02 - function
207:04 - entry colored card page
207:08 - then rear return the UI
207:11 - re-wrap this whole page into a div
207:15 - and in here we put the headline
207:17 - that says shopping cart or your card or
207:20 - whatever you want to put in here
207:23 - entry style this
207:26 - we set the text to a 3XL
207:29 - we make it bold and add some margin
207:32 - bottom
207:35 - let's see how this looks view card
207:39 - and there's the title we can also add
207:41 - some metadata to this page
207:44 - as usual by exporting a const metadata
207:48 - static metadata here is enough we don't
207:50 - need Dynamic metadata
207:53 - and we set the title tool
207:56 - your card
207:57 - Dash
208:01 - and this changes the title here in the
208:03 - tab okay so the card is a server
208:05 - component
208:07 - meaning that we can fetch data in here
208:10 - we want to fetch the card so that we can
208:12 - show it on the screen right
208:16 - get card from our lip folder
208:19 - and then I want to list all the card
208:21 - items as a vertical list here on this
208:24 - page
208:25 - with the price and the subtotal and the
208:27 - image and everything so here we put an
208:30 - expression
208:31 - we take cut dot items which remember
208:35 - contains also the product information
208:36 - because we return our populated shopping
208:39 - cart
208:40 - so all the data is contained in this
208:42 - items field
208:44 - and then we want to map
208:46 - each card item
208:49 - into a UI element this UI element will
208:52 - also contain the server action which
208:54 - allows us to change the quantity of an
208:57 - existing card item Zoo for organization
208:59 - let's put this into a separate file and
209:02 - we can co-locate this with the card page
209:04 - here
209:06 - let's call it card entry dot TSX
209:14 - again this will be a client component
209:16 - because we need JavaScript in here
209:19 - and then we export a default function
209:25 - with the same name
209:27 - now to this component I want to pass a
209:30 - Zinger card item
209:32 - so one of these card item entries here
209:35 - but I want the product information to be
209:37 - inside it right this is already taken
209:40 - care of by returning the shopping cart
209:43 - here from the get card function but we
209:46 - don't yet have a type that we can use
209:48 - for this argument
209:49 - so let's go back into the card file in
209:52 - our lib folder again where we created
209:54 - this card ref products type we also want
209:57 - the type only for this part here for a
210:00 - single item that contains the product
210:01 - information
210:03 - so let's add a second type below that we
210:05 - create in the same way
210:07 - we export a type
210:09 - that we call a card item
210:12 - with product
210:15 - again we create it with Prisma
210:18 - this time card item get payload not cart
210:22 - get payload but card item then again
210:25 - angle brackets
210:26 - curly braces
210:29 - and in here we put the query that is
210:32 - required to populate a card item
210:35 - which is include colon and to even get
210:37 - out the completion
210:39 - product colon draw so we want one card
210:43 - item with the product information inside
210:45 - it
210:46 - okay we saved this we export this type
210:49 - and then we can use it in our cart entry
210:52 - here we create an interface for the
210:55 - props as usual
210:58 - card entry props
211:01 - we need one card item which is of type
211:04 - card item with product that we just
211:07 - created
211:08 - so this is one card item with the
211:11 - quantity but also the populated product
211:14 - then we add this prop down here
211:19 - card entry props and 3D structure the
211:22 - card item out of it and then we can show
211:24 - this card item in the UI
211:27 - so let's return
211:29 - a div
211:32 - in which we put another div
211:36 - because below the card entry we also
211:39 - want to put a divider which is just a
211:41 - vertical line
211:43 - So Below this inner diff we put another
211:45 - div with a self-closing tag
211:48 - that gets the class name divider which
211:51 - again is coming from Daisy UI
211:54 - and above in the stiff we put the actual
211:56 - product information
211:58 - so this div here at the top needs some
212:00 - classes Flex
212:03 - wrap which is required for
212:06 - responsiveness so if there's not enough
212:08 - room then the elements will
212:10 - automatically move below each other
212:14 - we want to Center the items
212:17 - and give it a gap of three
212:22 - then in here we put the product image as
212:25 - usual as the next image
212:28 - we set the sr0 to the image of the
212:31 - product but we don't want to write card
212:33 - item dot product dot all the time so we
212:36 - can destructure this card item further
212:38 - with colon curly braces and we care
212:42 - about the product
212:44 - and the quantity that's the data we need
212:47 - in here and then down here in the image
212:49 - source we can just write product dot
212:53 - image URL
212:56 - for the alt text we use the product name
212:59 - again
213:02 - we set the width and the highest to a
213:05 - 200 pixels
213:07 - and we make the corners of this image
213:10 - rounded with rounded LG
213:13 - then we close this
213:17 - before we continue let's save this and
213:20 - add it to our map function here
213:23 - so we map each card item
213:26 - to one of these card entries
213:30 - to which we have to pass
213:33 - the card item of the snap function
213:36 - and again since this is a list we also
213:38 - have to add a keyer with a unique
213:40 - identifier
213:42 - which is we can use the ID or the
213:45 - product idea shouldn't matter
213:51 - and then we already see our product here
213:53 - really cool
213:55 - let's finish the cut entry layout and
213:58 - add the remaining information
213:59 - So Below the image we put another div
214:04 - then we add a link here because the name
214:06 - of the product will also be a link to
214:08 - the product detail page
214:10 - but Auto Import didn't work so we have
214:13 - to import this manually
214:15 - import link from next slash link
214:21 - we set the href of this link
214:24 - to a slash products
214:26 - slash
214:29 - and
214:30 - product idea
214:33 - because this brings us to the detail
214:35 - page
214:37 - and I want to set a class name to font
214:39 - bold
214:41 - and then this link will just contain the
214:45 - product name
214:46 - and the others
214:48 - right below this link
214:50 - I want to render the price of the
214:52 - product
214:53 - of a single item
214:56 - so in a different rate price column
214:58 - again we use our format price function
215:02 - to which repairs product dot price
215:06 - there it is that's the price for a
215:08 - single green bottle
215:10 - then below the stiff I also want to show
215:12 - the total price so the price of one item
215:15 - multiplied by the quantity so we add
215:18 - another div here
215:21 - with the class names Flex
215:24 - item Center and GAP tool
215:29 - and here we write total column
215:32 - and again we want to format the price
215:36 - but this time it's product dot Prius
215:39 - multiply it by the quantity
215:43 - it's not a product or quantity it's just
215:45 - quantity because that's part of the card
215:48 - item
215:50 - so the total price is 15.96
215:54 - which is also shown in our card drop
215:57 - down
215:57 - okay and I want to show the current
215:59 - quantity between these two diffs here
216:02 - but I also want to add a drop down
216:03 - manual with which we can change the
216:05 - quantity so we go below the price but
216:08 - above the total and here we add another
216:10 - div
216:12 - but we are almost done
216:15 - again we need some class names we need
216:17 - some vertical margin my one
216:21 - we make this a flex box with item Center
216:24 - and a gap of tool
216:27 - okay then this was a quantity column
216:31 - and in here we put the select which
216:34 - creates a drop down menu
216:36 - in HTML then we need options for this
216:39 - drop down manual I want to have the
216:41 - numbers 1 to 99 in there so that we can
216:44 - change the quantity for this we need an
216:46 - array that contains the numbers 1 to 99
216:48 - we create this array above the return
216:51 - statement
216:53 - we create a const quantity of options
216:58 - this will be of type jsx element
217:02 - but an array of jsx elements and we
217:04 - initialize this with an empty array
217:07 - yjsx element because we want to put
217:10 - these option tags in there which are
217:12 - HTML elements and we can put them into a
217:15 - jsx array but we want to do so in a loop
217:18 - that goes from 1 to 99 so we'll write 4
217:22 - and create a normal for Loop let I
217:26 - equals one that's the number we start
217:28 - with
217:30 - I less than or equal to 99
217:33 - semicolon I plus plus this is just a
217:36 - normal for Loop in JavaScript
217:39 - and for each iteration we want to take
217:41 - our quantity options
217:43 - and push a newer element in here
217:48 - as I already said we want to put such an
217:51 - option tag in there
217:55 - option tag contains a text with the
217:57 - number so we just render iron here so
218:00 - number 1 to 99 and then we also have to
218:03 - set the value
218:05 - of this option tag to the same number
218:09 - and since this is an array we also have
218:11 - to set it here for which again we use I
218:15 - so this Loop here creates a list of
218:18 - these option tags from number 1 to 99
218:20 - that's all this does and now we can
218:23 - render these options in our select tag
218:26 - here so between the opening and the
218:28 - closing tag we put in expression and we
218:31 - want to render our quantity options here
218:34 - and this is how it looks it's not styled
218:36 - properly yet so let's do that next we
218:39 - add class names to the
218:41 - select tag
218:43 - select which is a daisy UI class
218:47 - select board
218:51 - W foil
218:53 - and a Max width
218:57 - of 80 pixels
219:00 - this way this input field stays
219:03 - responsive and it can shrink but it will
219:05 - not be bigger than 80 pixels because
219:07 - that's enough and this is how it looks
219:10 - we can also set the default value to the
219:13 - current quantity because when we open
219:15 - the page we don't want this to show one
219:17 - if we have four green bottles in our
219:19 - card right
219:20 - so we can add the default value prop
219:23 - entry simply set this to the quantity of
219:26 - this current card item
219:29 - so now when we save this and refresh the
219:31 - page this shows four and now when we
219:34 - change the quantity by selecting a
219:36 - different one we want to execute a
219:38 - server action that changes the quantity
219:40 - of this item in the database
219:42 - so we add the unchange prop here which
219:46 - will be called whenever we'll select
219:48 - something in this drop down
219:50 - and here it gets past this ear argument
219:55 - which is the drop down menu itself
219:58 - so we add the function body here and
219:59 - then we can get this value out of the
220:01 - drop down menu and call our server
220:03 - action and JavaScript is required to
220:06 - execute on change this doesn't work in
220:08 - the server component unfortunately this
220:11 - is why we have to make this a client
220:12 - component but as we already learned we
220:14 - can still cause over actions in client
220:16 - components so let's set up this new
220:18 - Observer action next again we put it
220:21 - into the same folder
220:23 - again we colored actions.ts just like we
220:27 - did for the increment product quantity
220:29 - action just that this function here will
220:31 - allow us to set an arbitrary quantity
220:34 - and it will also revalidate a different
220:36 - path it will revalidate the Scout page
220:39 - to update it but besides of that we are
220:41 - not doing anything new in here
220:43 - so we make this file a server action
220:46 - file
220:48 - then we export in async function that we
220:52 - call set product quantity
220:58 - to which repairs the product idea
221:03 - but also the quantity
221:07 - in form of a number
221:10 - so this will look very similar to the
221:12 - other actions file we already have just
221:15 - that here we only needed a product idea
221:17 - because we always incremented by one but
221:19 - we also need a card in this other file
221:22 - and create one if it doesn't exist yet
221:24 - so we copy this line here
221:27 - paste it here we have to import these
221:29 - functions
221:30 - from the lip folder
221:33 - again we want to check if this article
221:36 - is already in the card so let's copy
221:38 - this line here as well
221:41 - put it here and then we want to do one
221:44 - of three things if we set the quantity
221:46 - to zero we want to remove this item from
221:49 - the card completely if we set a positive
221:52 - value and the article is already in the
221:54 - cards then we want to update this item
221:55 - with the new quantity and if the item is
221:58 - not in the card then we want to create a
222:00 - new one now with our current UI this
222:02 - third case is not actually possible
222:04 - because we can't set the quantity if the
222:06 - item is not in the card already but
222:08 - maybe you want to change the UI later so
222:11 - we will take care of this possibility as
222:13 - well so we check if quantity on that we
222:17 - pass to this function
222:19 - is equal to zero then we want to check
222:23 - if the article is in the count only then
222:26 - we can delete it right
222:29 - then we call Prisma
222:31 - dot cut item
222:34 - dot delete
222:37 - we want to delete the item where
222:41 - just follow along
222:43 - the idea
222:45 - is equal to the article and card idea
222:47 - that we just found we want to delete
222:50 - this card item else if the quantity is
222:54 - not zero but the positive number
222:56 - then again we want to check if the
222:59 - article is already in the card in this
223:01 - case we call a weight Prisma Dot card
223:04 - item dot update to change the quantity
223:09 - we want to update the same item
223:12 - as we used up here with the article and
223:15 - card idea so we can reuse the same where
223:17 - clause
223:19 - but this time we also want to set the
223:21 - data
223:22 - we want to pass the new quantity and
223:24 - again since the field and the variable
223:26 - name are the same we can use the short
223:27 - syntax here
223:29 - okay and then we add an ads block to
223:31 - this inner F here so if article and card
223:34 - is not defined if we don't already have
223:38 - this item in the card then we want to
223:41 - await press my DOT card item dot create
223:48 - and we set the data like this
223:50 - this will look similar to how we created
223:54 - the card item here
223:56 - so we can actually copy paste this over
223:59 - the data is the card idea the product
224:01 - idea but we don't want to set the
224:04 - quantity to one we want to set it to the
224:06 - quantity value that we pass to this
224:08 - function
224:09 - and at the end of our Z product quantity
224:12 - function out of this outer if block here
224:17 - we wanna revalidate the page again right
224:19 - with revalidate path this time we want
224:22 - to revalidate slash card which again
224:25 - refreshes the page and fetches the
224:27 - latest data
224:30 - and now we want to cut the server action
224:32 - in our card entry file but remember this
224:35 - is a client component and because of
224:37 - this one bug we can't import a server
224:39 - action directly in the client component
224:41 - because this will not work with next off
224:43 - later so again we have to import the
224:46 - server action in the page which is a
224:48 - server component and then pass it to the
224:50 - card entry but we haven't added the
224:53 - arguments to the card entry yet so over
224:55 - into the card entry again
224:57 - into the card entry props here we expect
225:01 - the Z product quantity tier that's a
225:06 - difficult word function which is this
225:08 - over action
225:10 - and again it gets the same signature as
225:12 - the job actually just set up
225:15 - it takes the product ID and form of a
225:17 - string
225:18 - and the quantity and form of a number
225:22 - oops and it returns a promise of type
225:26 - White
225:27 - and then we are
225:29 - edit down here as well
225:33 - but again we import the server action in
225:36 - our page and pass it to the component so
225:39 - let's go into the card entry
225:41 - tag here
225:43 - pass set product quantity for which we
225:47 - import our newer server action
225:49 - okay we save this go back into the card
225:52 - entry down to our unchanged function
225:56 - here
225:57 - first of all we want to get the
225:58 - selection out of this field here
226:01 - which we can do the following way we
226:03 - create a variable I'm gonna call it
226:06 - newer quantity
226:09 - equals
226:11 - pulse int
226:14 - because this contains a string and we
226:16 - want to pass this into a number
226:18 - and the value is contained in this ear
226:21 - value that we get here
226:23 - dot current Target dot value
226:27 - and there's the selection of this drop
226:29 - down field
226:30 - and then we want to execute our server
226:32 - action and pass this quantity to it
226:34 - remember we need a transition to execute
226:37 - the server action in a client component
226:39 - to get the appropriate loading and error
226:41 - handling so we scroll to the top of the
226:44 - card entry file again
226:46 - here inside the function at the top
226:48 - again we create this cons is pending
226:53 - comma start transition
226:56 - the same one we used in our adds to cut
226:58 - button
226:59 - and we assign this to a US transition
227:03 - back down into it the on change Handler
227:06 - we have this new quantity here
227:09 - now we start the transition
227:12 - to which we pass this async Arrow
227:15 - function again
227:17 - and in here we can call and await set
227:21 - product quantity which is the server
227:23 - action
227:24 - to which we pass the idea of the product
227:27 - comma and the newer quantity that we
227:30 - just selected
227:32 - and again to have some feedback I want
227:34 - to show a loading spinner while the
227:36 - server action is running
227:37 - we put it here below the total price we
227:41 - don't need a success tax this time
227:43 - because we see the up-to-date value in
227:46 - the drop down so a loading state is
227:48 - enough
227:49 - we add an expression here
227:51 - check if is pending is true
227:54 - and if this is true we want to render a
227:57 - span again that contains the loading
227:59 - spinner
228:00 - so spend with the class names
228:02 - loading
228:05 - loading spinner and loading SM for the
228:09 - size
228:11 - okay and when receive this this should
228:14 - not work let me select the different
228:16 - quantity three it loads
228:20 - and it changed the quantity also up here
228:23 - in the navbar and also the total price
228:25 - this all gets refreshed because we call
228:28 - revalidate perfume which revalidates
228:31 - this whole page and fetches the latest
228:33 - data but I put this loading spinner in
228:36 - the wrong place I actually want to have
228:38 - it inside the stiff here
228:40 - so that it's shown right next to the
228:42 - total price so now it looks like this
228:44 - just one more addition I also won't have
228:47 - an option for zero right so that we can
228:50 - remove an item we put this above the
228:52 - quantity options I don't make it part of
228:55 - the loop because the text will be a bit
228:57 - different so we add another option here
229:01 - and the text will not only contain the
229:03 - number zero but also remove
229:06 - in parentheses this is also how Amazon
229:08 - does it
229:10 - and the value will be zero
229:12 - and remember in our server action zero
229:15 - means that the item will be completely
229:17 - deleted from the card
229:20 - so let's try this out let's refresh this
229:23 - so we see the correct data again now we
229:25 - have zero remove
229:27 - which removes this item from the card
229:29 - completely
229:31 - by then it also makes sense to have some
229:33 - text here when our card is emptier right
229:35 - so it doesn't just look like this and
229:37 - the user might be confused so let's go
229:40 - into the cut page once again
229:42 - and go below the map function here
229:44 - inside the div
229:47 - we add another expression
229:49 - we want to check if exclamation mark
229:52 - cart dot items dot length which means
229:57 - that it's either undefined or zero
230:01 - if this is the case we want to render a
230:03 - text so we can use a paragraph tag for
230:06 - this or a div doesn't really matter
230:08 - because it's unstyled and Tailwind
230:09 - anyway
230:11 - your card is emptier
230:15 - there's the text and then I also want to
230:18 - put the total price of all card items at
230:21 - the bottom and the checkout button So
230:24 - Below this expression
230:26 - we put another div
230:28 - in here we put another paragraph tag
230:33 - to which we add the class name mb3 for
230:36 - our margin
230:37 - and font bold
230:40 - this will contain the total price just
230:42 - like we show in the navbar
230:44 - so this is total colon
230:47 - curly braces
230:49 - format price
230:51 - and to this repairs card dot subtotal
230:56 - and again if this is undefined because
230:58 - we don't have a card yet we file back to
231:00 - zero
231:02 - that's the total value at zero right now
231:06 - and Below we put the checkout button
231:09 - which will start with BTN
231:12 - and BTN primary
231:15 - and this was a checkout
231:18 - again we don't add functionality to this
231:20 - checkout button here if you want stripe
231:22 - integration then let me know in the
231:24 - comments below it then I will make a
231:25 - separate tutorial about stripe I also
231:27 - want to Center these items so we add a
231:30 - class name to this div
231:32 - we make this a flex box and a flex
231:35 - column
231:37 - and what I want to do is on very small
231:39 - screens I want the button and the total
231:41 - amount will be on the right side because
231:43 - that's usually easier to click when you
231:45 - are on your phone and you want to use
231:47 - your thumb and on larger screens I want
231:49 - to align this in the middle also I just
231:51 - think it looks cool for responsiveness
231:53 - so again we can use breakpoints for this
231:56 - we use items and
231:58 - to align the items on the right side
232:01 - and then on small screens and larger
232:05 - we use items Center instead
232:08 - one more thing I also want to change the
232:11 - size of the checkout button but only on
232:13 - this SM breakpoint
232:15 - so here we add SM colon and then I want
232:19 - to set the width of this button to a
232:21 - hard-coded 200 pixels
232:24 - which makes it a bit wider so now the
232:27 - button and the total amount are centered
232:30 - like this
232:31 - but on very small screens it moves to
232:34 - the right side and the button gets a bit
232:36 - smaller I think this just looks better
232:39 - and it's great for usability I think
232:41 - okay let's format this and just try it
232:45 - out one more time with different card
232:46 - items to make sure this works so some
232:49 - headphones add to cart
232:52 - again this glitch where the font flashes
232:54 - for a moment will not be in production
232:57 - this only happens in development so
232:59 - maybe let's add two cameras
233:02 - and maybe one boss to wear
233:06 - go to the card we see our subtotal here
233:09 - we also see it here at the bottom and we
233:12 - see the correct quantities right
233:14 - which we can also change it updates all
233:17 - these values and again if we change the
233:20 - price for example of a product in the
233:22 - database and the user comes back to
233:24 - their cart then these changes will be
233:26 - reflected in the UI the way we fetch our
233:29 - data they will always see the latest
233:31 - price and the latest product information
233:34 - so this works really cool and
233:36 - professionally in my opinion okay cool
233:39 - then the next step is to add user
233:41 - authentication into our website so that
233:43 - the user can log in and can also connect
233:45 - the shopping cart to their account it's
233:47 - a very exciting stuff you don't want to
233:49 - miss this
233:50 - to handle authentication we'll be used
233:52 - next off which is an authentication
233:54 - Library specifically for next.js it
233:57 - works with different authentication
233:59 - strategies we have a lot of different
234:01 - providers available in our app here we
234:03 - will only implement the Google provider
234:05 - to have Google log in but you can easily
234:08 - add additional login providers later if
234:10 - you want and it also has different
234:12 - database adapters that we can use there
234:15 - is an adapter for Prisma and mongodbir
234:18 - which makes it very easy to store user
234:21 - information and also session data in our
234:23 - mongodb database using Prisma here you
234:27 - can see that we have some stuff that we
234:28 - have to add to the Prisma schema but I
234:31 - will show you exactly how this works in
234:33 - a moment to implement Google
234:34 - authentication we need a project in the
234:37 - Google Cloud console so you can either
234:39 - go to a
234:41 - console.cloud.google.com or click on the
234:43 - link in the video description and then
234:45 - we want to set up a project here
234:47 - this is free to use if you already have
234:50 - a Google account then you should also be
234:52 - logged in automatically
234:54 - and here we can create a new project
234:57 - I'm going to call it next Js
235:00 - e-commerce
235:03 - and then we click on create
235:05 - this takes a moment to create this new
235:07 - project and then when this is done we
235:10 - click on select project which selects
235:13 - this project up here on the drop down
235:15 - okay and then in the sites bar we want
235:17 - to go to a credentials which is part of
235:21 - apis and services here we have
235:23 - credentials but we have to go to the O
235:25 - of content screen first because we have
235:27 - to set this up first
235:29 - okay let's go through these steps user
235:32 - type external because we want to make
235:34 - this website available to all kinds of
235:36 - users at least in theory
235:39 - create we have to give this app a name
235:42 - um
235:43 - next JS e-commerce
235:46 - user support email for this we can
235:49 - select the email address of this Google
235:51 - account we don't have to upload a logo I
235:55 - think we can leave this stuff here empty
235:56 - for now as well
235:58 - develop a contact information again I'm
236:01 - going to use the same address here
236:02 - coding and flow recording at gmail.com
236:07 - and then we click on Save and continue
236:10 - here we can select Scopes we only need
236:13 - the user profile info and the email
236:16 - address this doesn't require access to
236:19 - any specific Google servers and we also
236:22 - don't need any special permissions to
236:24 - get these values we click here on update
236:27 - we don't need any sensitive or
236:29 - restricted Scopes so we click on Save
236:31 - and continue
236:32 - we can set up test users while this app
236:35 - is not in production that are allowed to
236:37 - log in again I'm going to use the
236:39 - recording email address
236:41 - and maybe at the second one here
236:43 - infrared coding and floorpongs.com
236:47 - add
236:51 - save and continue
236:55 - okay now we can confirm this external we
236:57 - have a project name email address and so
237:00 - on Scopes test users yeah then we click
237:04 - back to dashboard
237:06 - so this app is now in testing mode if
237:08 - you ever want to publish your website
237:10 - then you also have to publish this
237:11 - Google app to make it available in
237:13 - production but for testing purposes this
237:15 - is now working and then we want to set
237:18 - up credentials so we click on credential
237:20 - C under sidebar and then on create
237:23 - credentials and we need an oauth client
237:26 - idea
237:27 - the application type is a web
237:30 - application
237:32 - name maybe let's call this next JS app
237:35 - or whatever
237:38 - then for authorized redirect Uris we add
237:41 - the URL to localhost 3000 with HTTP
237:45 - colon in front of it that's not https or
237:48 - localhost it's just HTTP and then we
237:52 - need this executive path here because
237:54 - this is what next of expects this is
237:56 - where Google will redirect us to after
237:58 - the login was successful and this is
238:00 - where next off reads the data out of the
238:03 - Google profile and gives it to us
238:05 - basically so this has to point to slash
238:08 - API slash off slash callback slash
238:10 - Google
238:11 - we add this here and of course later in
238:13 - production you have to add a second
238:15 - redirect URL with the actual deployment
238:18 - domain
238:19 - okay we click on create
238:22 - and then we get the client ID and the
238:24 - client secret and we want to put both of
238:27 - them into our end file in our project
238:29 - where we already have our database
238:32 - credentials
238:33 - so here we are at the Google client idea
238:39 - and then we are copy paste this value
238:42 - over here
238:44 - from your Google Cloud console
238:47 - and a Google client secret which was the
238:52 - second string that we got
238:55 - we paste it here as well
238:57 - then we can close the Google Cloud
238:59 - console because we shouldn't need this
239:01 - anymore now our client is set up and we
239:03 - can use this to look in via Google
239:06 - there are two more environmental
239:07 - variables that we need for next off the
239:10 - first one is next of underscore URL
239:13 - which contains the base URL of our
239:16 - website and you have to give this
239:18 - variable this exact name with the same
239:20 - spelling because next off expects a
239:23 - variable with this name
239:25 - so we set this to the base URL again
239:27 - HTTP colon slash slash localhost colon
239:31 - 3000.
239:33 - and then we also need the next of
239:36 - underscore Secret
239:38 - this is just a random string so you can
239:41 - type any letters in here that you want
239:43 - that is used to encrypt the session
239:45 - cookie later this is just needed for
239:47 - security and this is basically a
239:49 - password you can add any string you want
239:51 - here this next off secret is only
239:54 - required in production later we will
239:56 - deploy this website and then we will get
239:58 - an error if we don't have this value set
240:01 - okay let's save this and then the way
240:03 - next off works is that we have to set up
240:06 - a route Handler so an API endpoint and
240:09 - next.js under a very specific URL and
240:12 - every authentication request will then
240:14 - go to this URL and next off will handle
240:17 - this this is also where we pointed the
240:19 - redirect URL in the Google Cloud console
240:21 - to earlier so we go in the sites bar
240:24 - here in the app folder we create a new
240:26 - folder called API and we have to put
240:30 - this folder in here with this exact name
240:32 - because next off expects a very specific
240:34 - route in here we put another folder
240:37 - called off
240:40 - then another folder
240:42 - called scrap records dot dot dot
240:46 - next off as one word
240:48 - and in here finally we put the route
240:51 - Handler
240:52 - which we call road.ts route handlers are
240:56 - how you set up API endpoints so server
240:58 - endpoints in the next js13 app when you
241:01 - use the app order and this part here
241:03 - with the dot dot dot is a so-called
241:05 - catch R segment this allows next off to
241:09 - handle different routes under this
241:12 - endpoint and not just a single one okay
241:14 - and in this route dot TS file
241:19 - we export const
241:22 - of options
241:24 - and this time the name is arbitrary
241:26 - again so this doesn't have to be called
241:27 - off options
241:30 - and this will be of type next of options
241:33 - which is an import from next off
241:37 - and this will just contain the next of
241:39 - configuration the reason I put this
241:41 - configuration into a separate variable
241:43 - and Export it from this file is because
241:45 - we also need this object later in other
241:48 - places in our app okay and we set the
241:51 - adapter to Prisma adapter
241:55 - this is available in next off by default
241:57 - and this allows us to save user
242:00 - information and session data in our
242:02 - mongodb database using Prisma so this
242:04 - works together really well and to the
242:07 - Prisma adapter we pass our Prisma client
242:10 - now this complains because there's a
242:12 - typescript problem that requires us to
242:15 - also cast this
242:17 - to an adapter to a next off adapter so
242:20 - that this error message disappears
242:22 - sometimes there are some typescript
242:24 - shenanigans that you have to work around
242:26 - comma
242:28 - and then reset providers
242:30 - to an array here you can add multiple
242:33 - providers but again in this video we
242:35 - only add Google login
242:37 - so here we pass a Google provider okay
242:40 - autocomplete doesn't work
242:43 - the import is
242:46 - import Google Provider from
242:49 - next off
242:51 - slash providers
242:54 - slash Google there it is
242:57 - now we can use the Google provider down
243:00 - here
243:00 - and configure it with curly braces
243:04 - this expects the client ID and the
243:06 - client secret that we already have right
243:08 - in our environment variables
243:11 - so we can get them with process.enth
243:15 - Dot
243:17 - we need the same name
243:19 - Google client idea
243:22 - and client secret is
243:24 - process.nf Dot
243:27 - Google client Secret
243:30 - now this complaints we will get rid of
243:32 - this error in a moment but first let's
243:34 - finish this file here so we have our off
243:36 - options
243:38 - and Below we create a constantly again
243:41 - this is explained in the next of
243:43 - documentation
243:45 - here we call this next of function to
243:48 - which we pass the off options and this
243:51 - sets up next off with this configuration
243:53 - here with our Prisma adapter and the
243:56 - Google provider
243:57 - and then we have to export it the
243:59 - following way export curly braces
244:03 - Handler ascat
244:05 - comma
244:07 - Handler as post
244:09 - this weird syntax is necessary because
244:11 - right now next off is the configured to
244:14 - work with the old Pages directory and
244:16 - next.js and not with the app directory
244:18 - that we are using and this is why we
244:21 - have to write the special syntax to make
244:22 - this work with route handlers but this
244:24 - is totally valid this is also described
244:26 - in the documentation now this your
244:28 - complaints because an environment
244:30 - variable can always be undefined because
244:33 - we might have forgot to reset it but the
244:35 - Google provider expects defined values
244:38 - for client ID and client secret now one
244:40 - simple way to get around us would be to
244:42 - just add the non-net assertion operator
244:45 - here with exclamation marks but this is
244:47 - actually not great because if we
244:49 - actually forget to set these environment
244:51 - variables then we will continue with
244:53 - undefined values and this will just
244:55 - misbehave it's better to actually check
244:57 - if all our environment variables are set
245:00 - and throw an error if this is not the
245:01 - case this is why we also installed the
245:05 - zot Library here we can use this to
245:07 - validate the values for example our
245:09 - environment variables this is a very
245:12 - useful thing to do in your next JS
245:14 - projects so that you can always work
245:15 - with the find Environment variables
245:18 - and I will show you how you can set this
245:20 - up we want to go into our lib folder
245:23 - again
245:24 - and put another file in here which we
245:27 - just call nf.ts
245:31 - here we want to import sort
245:34 - of from sort
245:37 - then we create a validation schema for
245:39 - our environment variables const I'm
245:42 - going to call it INF schema
245:45 - and then we can create such a sort
245:47 - object
245:49 - in the sort object we can pass
245:51 - validation rules
245:54 - and then here we want to add the same
245:55 - variables that we also have in our
245:58 - normal.n file
246:00 - so we want to copy all these five names
246:03 - and paste them in here and now we can
246:06 - add validation words to all of them
246:09 - and they all have the same rules they
246:11 - are strings that are not emptier so
246:14 - behind each of them we write a colon and
246:16 - by the way you can duplicate the cursor
246:18 - by pressing somewhere then you hold Ctrl
246:22 - alt I guess on Mac this is command alt
246:24 - I'm not sure and then you press the down
246:27 - arrow and then we press the end button
246:29 - on the keyboard to get to the end of the
246:31 - line but you can also handle each line
246:33 - manually if you want okay as one each of
246:36 - them will be a sort dot string
246:39 - which is a function
246:41 - and then we also call non-emptier
246:44 - to guarantee that this trend contains
246:46 - something and the comma at the end of
246:48 - each line
246:49 - now below
246:51 - we export the cons that we call enf
246:54 - and we assign this to end schema dot
246:57 - pulse this way we can pass a value to
247:00 - the schema and validate it
247:02 - and what do we want to pass well we want
247:04 - to pass all our environment variables to
247:06 - it
247:08 - because we expect our environment
247:10 - variables to adhere to this exact schema
247:13 - we should have these five keys that are
247:16 - non-empty strings
247:18 - and now if one of them is missing or
247:20 - emptier then search will throw an arrow
247:22 - with a readable error message instead of
247:25 - just giving us an undefined value
247:28 - and now we go back into our route file
247:31 - and instead of process.enth we just use
247:35 - nth entry importers from our lib folder
247:37 - the file we just set up and now since we
247:40 - validated this with sort this is
247:42 - guaranteed to be a string
247:44 - if it's missing we will get an error
247:47 - okay next we go into our root layout and
247:51 - we have to wrap our whole layout into a
247:53 - session provider what this does is it
247:55 - makes the session so our locked in user
247:58 - basically available to our components
248:01 - throughout our app this is actually only
248:03 - necessary to get a session in client
248:05 - components because in server components
248:07 - it works differently entry would not
248:09 - need this in our app because we fetch
248:12 - all our session data server side but
248:14 - it's still good to add this because if
248:17 - you need a session client-side then you
248:20 - need this wrapper okay autocomplete
248:22 - doesn't work so we have to import this
248:25 - manually
248:27 - import
248:29 - destructure
248:31 - from next off
248:34 - slash react
248:36 - and in here we can find this session
248:39 - provider
248:42 - entry wanna wrap our navbar our main tag
248:45 - and the photo
248:47 - into the session provider again to make
248:49 - the session available to all our pages
248:53 - but when we save and refresh this I
248:55 - think we should get an error yeah there
248:58 - it is because this uses react context
249:00 - internally and this requires a client
249:02 - component but the root layout is a
249:04 - server component now we could make the
249:06 - whole root layout a client component to
249:08 - fix this but there's actually a better
249:10 - way to fix this
249:12 - basically what we want we want the
249:14 - session provider to have to use client
249:16 - directive at the top just like our own
249:18 - client components the problem is many of
249:21 - these libraries haven't added this yet
249:23 - because react server components are
249:25 - still newer and we can't go into the
249:27 - source code of the session provider and
249:29 - add use clients there ourselves right
249:31 - but there is an easy workaround for this
249:33 - we just have to export these third-party
249:36 - components that we want to turn into
249:38 - client components from our own client
249:41 - file
249:42 - so we go into our app folder and put a
249:45 - new file here which we give the same
249:47 - name
249:48 - session provider dot TSX
249:53 - we make this file a client component
249:57 - and then we simply re-export the session
249:59 - provider
250:01 - from next off
250:02 - so we add the same package here but this
250:05 - time we write export instead of import
250:09 - so again next off slash react
250:13 - and here we have the session provider
250:16 - but we want to make this the default
250:18 - export
250:19 - which we can do with this syntax
250:22 - then we go back into our root layout and
250:25 - we want to change the impulse statement
250:27 - here we don't want to import it from
250:29 - next off anymore
250:31 - but our own file so dot to get into the
250:34 - parent folder slash a session provider
250:36 - and since this is Now the default export
250:38 - we can delete this Cali braces
250:42 - and now the should work because we
250:43 - turned the session provider into a
250:45 - client component we can still use all
250:47 - the features of it no problem but now we
250:49 - can also use it inside a server
250:51 - component next we have to add some newer
250:54 - models to our Prisma schema this is
250:57 - described in the next of documentation
250:59 - they have instructions for the different
251:01 - adapters and we are using the Prisma
251:03 - adapter
251:04 - we have to add these models here the
251:07 - account and user version and so on and
251:10 - then we also have to make some
251:12 - modifications to make this work with
251:13 - mongodb but I already prepared all of
251:16 - this let's go back into our project and
251:21 - into the
251:23 - schema.prisma file
251:25 - and at the bottom below the card item
251:27 - model we have to copy paste a bunch of
251:30 - new models I will put a link to this
251:33 - schema file into the video description
251:35 - below so you can copy paste this from
251:37 - there
251:37 - so this includes the user account this
251:41 - contains the username email address and
251:44 - the image which we get from Google when
251:46 - the user signs in then the Google
251:48 - account information is stored as well in
251:50 - a separate collection there is some
251:52 - stuff in here that we don't actually
251:54 - need but we might need this in the
251:55 - future if we change our authentication
251:57 - strategy so it's good to add all of this
252:00 - then we also store a session in the
252:03 - database when the user is logged in
252:04 - sessions are alternative to JWT
252:07 - authentication when you connect next off
252:10 - to a database using one of these
252:12 - adapters the Prisma adapter in our case
252:14 - then authentication will automatically
252:17 - be handled with sessions session means
252:19 - that when a user logs in the association
252:22 - entry created in our database that
252:24 - contains the user ID and an expiration
252:26 - date sessions are easier to use
252:28 - correctly than Jade label your tears
252:30 - because you can invalidate sessions
252:32 - simply by deleting them from the
252:34 - database so if the user changes their
252:36 - password for example a and you want to
252:38 - lock them out everywhere else then you
252:40 - can just delete their sessions whereas
252:42 - this is not possible with jwts by
252:45 - default because they are self-contained
252:46 - in order to implement jwts properly you
252:49 - have to implement the complex refresh
252:51 - token mechanism this is also possible
252:53 - it's also possible with next auth but
252:56 - sessions are much easier to use
252:57 - correctly but again next off handles
253:00 - these sessions automatically for us we
253:03 - don't have to create them next off
253:04 - dusters and then we also have this
253:07 - verification token model as far as I
253:09 - know it these are only used if you
253:11 - implement login with an email link which
253:14 - we are not using here but again it's
253:16 - still good to add all of these models at
253:18 - once in case you want to add additional
253:20 - authentication strategies okay and then
253:23 - we also want to be able to connect a
253:25 - shopping cart to a user right so that we
253:27 - don't only have Anonymous shopping carts
253:30 - where we store the card ID in a Kobe
253:32 - instead we can also store a user ID on a
253:34 - card and this way know which user this
253:37 - belongs to the zoo on the card model and
253:40 - I put this above the timestamps
253:43 - we add a user idea
253:45 - which will be of type string this will
253:47 - contain an object idea but we make this
253:49 - value optional with a question mark
253:51 - after string because Anonymous shopping
253:53 - carts don't have a user ID right
253:56 - and then we also need this object ID
253:58 - annotation because this contains a
254:01 - mongodb object ID
254:03 - then we also add the relation below like
254:06 - we also did for the product and the
254:08 - cards on the card item
254:11 - we call this one just user
254:13 - it will be of type user which is our
254:15 - user model that we just copy pasted
254:19 - it's optional again because it's
254:21 - connected to the user ID which is also
254:23 - optional because a card could not belong
254:26 - to a user account yeah and then we add
254:28 - the same line as here basically
254:33 - just that we change this to a user idea
254:37 - we press the formatting shortcut to
254:39 - align this properly and the counterpart
254:42 - to this user field here
254:45 - is on the user model discard array I
254:49 - think if we delete this and press the
254:51 - formatting shortcut again yeah it gets
254:53 - added back automatically because this
254:56 - belongs
254:58 - to this user relation with that up here
255:00 - this relation basically allows us to do
255:03 - two things first of all when we delete a
255:06 - user we can automatically delete their
255:08 - accounts and for an existing user we can
255:11 - fetch all their cards if we allow
255:13 - multiple cards per user but again this
255:16 - whole file is linked in the video
255:18 - description below so we can copy paste
255:20 - it from there it's so good to understand
255:22 - what is going on here okay and then we
255:25 - want to push these changes to our
255:26 - database to create these new collections
255:28 - so we open the terminal stop the
255:31 - execution
255:32 - and run npx Prisma DB push again
255:40 - as you can see it created and configured
255:43 - a bunch of new collections which we
255:45 - should Now find
255:46 - in our Atlas backend
255:48 - sessions verification tokens users and
255:51 - so on they are empty right now and then
255:54 - we want to re-generate our Prisma client
255:56 - to have these new methods available I
255:59 - think this actually happens
256:00 - automatically when you run DB push but
256:03 - just to be sure
256:04 - we run npx Prisma generate again
256:08 - which generates this new updated Prisma
256:11 - client
256:12 - and then real npm run Dev again
256:16 - okay and then I want to put a newer
256:18 - button into our enough bar that shows
256:21 - the profile picture of the user when
256:22 - they are logged in and also contains a
256:25 - drop down menu to log out this button
256:27 - needs to be a client component because
256:29 - we need to handle button clicks there
256:31 - and the same as we did for the shopping
256:33 - cart button let's put it into its own
256:35 - file so that we can keep the navbar
256:38 - itself as a server component so we have
256:40 - the shopping cart button we create a new
256:42 - file
256:43 - which we call user menu button
256:51 - so then we export a default function
256:55 - user menu button
256:59 - and here we are
257:01 - return a div
257:05 - we also add props
257:08 - interface user menu button props
257:14 - we want to show the currently locked in
257:16 - user in this user button and we can get
257:18 - the user out of the session and we get
257:20 - the session from next off so we add
257:23 - session colon as a prop
257:26 - entry set the type to session from next
257:29 - off this one here so this is the import
257:31 - statement but the user might not be
257:34 - logged in so we add a vertical bar and
257:36 - now so that we can also pass null for
257:39 - the session
257:40 - now we could also fetch the session
257:42 - directly in here with this us session
257:45 - Hook from next off this fetches decision
257:48 - client-side but I want to fetch the
257:50 - session server side in our navbar which
257:53 - is a server component because this way
257:55 - decision data is available as soon as
257:57 - our Pages opened there is no short
257:59 - moment when the user is not
258:01 - authenticated instead the user is logged
258:03 - in right array and this is also how we
258:05 - set up our shopping cart right I want
258:07 - there to be a no loading time instead I
258:10 - want all the data to be there as soon as
258:12 - the page is opened again because I think
258:14 - this feels more professional and this is
258:16 - also how it works on websites like
258:18 - Amazon this is why we don't get the
258:20 - session directly in here because this
258:22 - has to be a client component
258:24 - we also add the use client directive at
258:26 - the top because we later need to handle
258:28 - on click events here and this is only
258:30 - possible in a client component then we
258:33 - destructure our props as usual here in
258:36 - the function
258:38 - user menu props and in here is our
258:41 - session
258:43 - and then
258:45 - the first line of this function
258:47 - we want to get the user object out of
258:50 - the session which we can do with session
258:53 - dot user and it adds the save call
258:56 - Operator because the session can be null
258:58 - okay and then we finish the layout
259:01 - itself we add some class names to the
259:03 - outer diff
259:05 - again we use drop down and drop down end
259:08 - which we also used before for the
259:10 - shopping cart button
259:12 - again we put a label with this tab index
259:16 - 0 in here
259:18 - and we add some class names to the label
259:20 - as well
259:22 - BTN BTN ghost and BTN Circle again the
259:28 - same classes we used on the shopping
259:29 - cart button
259:31 - okay and then in this button I want to
259:34 - show something different depending if
259:36 - the user is logged in or not so we add
259:38 - an expression that checks if the user is
259:42 - defined
259:43 - we use the ternary operator with a
259:45 - question mark
259:46 - if the user is defined I want to render
259:49 - the user image in the next image
259:52 - before we set up this image let's also
259:55 - add the second part of the ternary
259:58 - operator colon if the user is not
260:00 - defined I want to render yeah three
260:02 - little dotsier which indicate that this
260:04 - is a drop down menu
260:06 - for this we use an SVG again and again I
260:09 - will link this file in the video
260:10 - description so you can copy paste it
260:12 - from there we can't get around this
260:14 - because yeah we can't type this out by
260:15 - hand we can only copy paste these svgs
260:18 - let's press the formatting shortcut so
260:20 - this gets aligned properly and again
260:22 - prettier automatically adds these
260:23 - parentheses
260:25 - which are very useful
260:27 - for the source of the image we want to
260:30 - pass
260:31 - user.image and again we get this from
260:34 - Google when we log in this will
260:36 - automatically be filled with the image
260:38 - of the Google account of the user but
260:40 - user can be undefined right so we have
260:42 - to add a safe cut operator here
260:45 - and we want to use something else as a
260:47 - fallback for this I prepared this
260:49 - profile pic placeholder image
260:52 - which is in the assets foil this one
260:55 - here
260:56 - I want to import this and use this as a
260:58 - fileback
260:59 - so at the top we import profile pic
261:03 - placeholder
261:06 - from at slash assets slash Prof epic
261:12 - placeholder PNG
261:14 - and then we can use it as the file back
261:16 - here
261:17 - profile pic placeholder in case the user
261:20 - or the image is undefined
261:23 - we set the alt text to just profile
261:26 - picture I think this is enough
261:30 - we set the width and height both to 40
261:33 - pixels
261:35 - and then we also want to style this with
261:38 - W10
261:40 - which sets the width of the image but in
261:42 - CSS to the same 40 pixels as we also
261:46 - loaded because again the final
261:48 - dimensions are dictated by CSS not by
261:51 - these values we are using here at least
261:53 - when we use this component and then we
261:55 - want to make this a circle
261:58 - which we can do with rounded foil this
262:00 - adds the Border radius to over 9000 and
262:04 - this creates a round image
262:06 - okay so if the user is logged in we see
262:09 - their profile picture if they are not
262:11 - logged in we see this SVG which is three
262:13 - little dots basically you will see this
262:15 - in a moment
262:17 - and outside of this label but still
262:20 - inside the stiff inside the drop down
262:22 - menu we add the drop down menu items so
262:25 - in here we put a ul and unordered list
262:27 - this is just a normal HTML tag
262:30 - and to the opening tag of UL we add this
262:34 - tab index 0 again again this is
262:36 - necessary for accessibility so that we
262:39 - can use tab to navigate between our
262:40 - menus
262:42 - and again this needs a class name
262:45 - which are drop down content
262:49 - manual
262:52 - rounded box and again I got all of them
262:55 - from this URL
262:56 - menu minus SM
262:59 - then we need this c Index again to make
263:02 - sure that this menu is in the foreground
263:05 - we add the match on top with mt3
263:08 - we set the width to a w52
263:12 - let me make this bigger we set the
263:15 - background color with BG base 100
263:19 - then we need some padding and lastly we
263:21 - also want to give this a shadow not SM
263:23 - but just normal shadow
263:27 - and into the UL we put list items for
263:30 - the Zinger buttons in our drop down menu
263:35 - you can put multiple once in there we
263:38 - actually only need one but the contents
263:40 - of this item are different depending if
263:42 - we are locked in or locked out if we are
263:44 - logged in we wanna show the log out
263:46 - button and if we are logged out we want
263:48 - to show the login button right
263:50 - so we add an expression here again with
263:53 - a ternary operator
263:55 - if we have a user then we want to render
263:58 - a button
263:59 - that says
264:00 - sign out
264:03 - if the user is not logged in then we
264:06 - want to render a button that says
264:08 - sign in
264:10 - and then we give both of these buttons
264:13 - on click handlers this is why we had to
264:15 - make this a client component because we
264:17 - can only use on click with JavaScript
264:20 - and in here we pass an error function
264:22 - like this
264:24 - and in order to sign out we can call
264:26 - this sign out function which is coming
264:28 - from next off so we add this import here
264:32 - entry code this function
264:34 - we can also configure this between curly
264:37 - braces and we can zero when we are
264:40 - locked out we want to be redirected back
264:42 - to the front page so we can set the
264:44 - Callback URL to the home page
264:48 - and to sign in we also passing on click
264:50 - Handler with an anonymous function
264:53 - which simply calls sign in
264:57 - now instead of these functions we could
264:59 - also use links because they are specific
265:01 - URLs where we can navigate the user tool
265:04 - so they also get to the next of login
265:06 - screen the benefit of using design and
265:08 - function rather than design in url
265:11 - endpoint is that this automatically
265:13 - redirects us to the previous page after
265:15 - signing in so if we are on a product
265:17 - page and we sign in we get redirected to
265:20 - the product page and not to the home
265:21 - page and the same is the case for sign
265:23 - out by default but here we have changed
265:26 - this Behavior by setting the Callback
265:28 - URL explicitly you can remove this if
265:30 - you want okay let's format and save this
265:33 - and now we only have to add this user
265:36 - menu button to our love bar and then log
265:38 - in short work
265:40 - I just realized one little mistake I
265:42 - want this not to be a BG Bluer but BG
265:46 - base 100 this is the correct value
265:49 - okay then we open the NAFTA TSX file and
265:53 - we want to put the user menu button
265:55 - right next to the shopping cart button
265:58 - and it's already styled correctly
266:01 - but this expects the session as input
266:04 - right which we want to fetch here in our
266:06 - enough bar because again the navbar is a
266:08 - server component and this way we can
266:10 - fetch the session before the page is
266:12 - actually opened so here at the top we
266:15 - create a const session
266:18 - we cut a weight get a server session
266:21 - this is a function from next off that we
266:23 - can use in server components to get the
266:26 - session of the logged in user from the
266:28 - database
266:29 - now to this get server session we also
266:31 - have to pass the off options where is
266:33 - this coming from those are the next half
266:36 - options that we set up in our route
266:38 - Handler earlier this is why we export
266:41 - them here because we have to pass them
266:43 - to get server session otherwise this
266:45 - will not work
266:47 - okay so this way we get the session of
266:49 - the currently locked in user from the
266:51 - database and the way this works is that
266:53 - next offsets an encrypted cookie in the
266:56 - browser of the user to identify the
266:58 - correct session in the database and know
267:00 - if they are locked in or not and then we
267:02 - simply pass the session
267:04 - to our user menu button and save this
267:07 - and now on our website when we refresh
267:11 - the page we should see our user menu
267:14 - button and the other days we are
267:15 - currently not logged in so we see these
267:18 - three little dots which are the SVG we
267:20 - pasted and now let's try this out let's
267:23 - log in
267:24 - by clicking the sign and by default we
267:27 - get to this screen here you can
267:29 - customize this screen or replace it for
267:31 - a completely different one this is
267:32 - explained in the next of documentation
267:34 - but for our project here this is fine
267:36 - sign in with Google
267:38 - and then I want to sign in with one of
267:41 - my accounts
267:44 - then we get redirected back to the page
267:46 - and this error happens because we are
267:48 - trying to load the profile picture from
267:51 - googleusercontent.com but this will only
267:53 - work if we allow this address in our
267:56 - next config file so we go into our
267:58 - project
267:59 - open nextconfig.js
268:02 - and here we already allow images from
268:04 - unsplash.com right so here we want to
268:07 - add a second entry
268:09 - this will comma another pair of curly
268:11 - braces
268:12 - and we set the host name to this one
268:14 - here
268:15 - let's actually copy this
268:18 - put it here
268:20 - maybe the address is different for you
268:22 - copy whatever you see here as the host
268:24 - name
268:26 - this entry restart the development
268:29 - server with npm rundev but we should
268:32 - still be locked in I think
268:35 - so let's refresh the page
268:42 - and there we are and this is the profile
268:44 - picture of my Google account which you
268:46 - can also see up here
268:48 - and this user information is now stored
268:51 - in the database
268:52 - let's refresh this
268:57 - here we have the user florianwalter with
269:00 - the image from Google and in the
269:03 - accounts collection there's all the
269:06 - information about this Google account
269:07 - now right now a user account doesn't
269:10 - have their own shopping cart yet we
269:12 - still have our Anonymous shopping cart
269:14 - that's connected to the kogi we will set
269:16 - up user shopping carts in the next
269:18 - section and then we will also merge the
269:21 - anonymous card with the user's card when
269:23 - we log in let's check if logout works as
269:26 - well so I click on sign out
269:29 - entry are locked out
269:32 - let's log in again sign in with Google
269:36 - recording account
269:39 - and we are logged in
269:41 - really cool and again since we fetched
269:44 - the user server side and our enough bar
269:46 - when we refresh the page the user is
269:49 - there immediately there is no glitch in
269:51 - the UI there is no loading State we have
269:53 - the user and the shopping cart both
269:55 - available as soon as the page is opened
269:58 - but to see that we are actually
269:59 - authenticated let's add some protection
270:02 - to our ads product page we make it so
270:05 - that not anyone can open this page
270:07 - instead we have to be logged in to add a
270:09 - product of course in a real app you
270:11 - probably want to make this available
270:12 - only for an administ trailer but here we
270:15 - will just add simple authentication
270:17 - protection so the ads product page is a
270:20 - server component right this means we can
270:23 - fetch our session
270:27 - with get server session again
270:31 - to which again we have to pass the off
270:33 - options
270:35 - we also have to make this an async
270:37 - function
270:40 - and then we can simply check if
270:44 - possession is undefined on Nile
270:48 - then we want to redirect the user
270:52 - and we already have this import here
270:54 - from next navigation
270:57 - tool
270:58 - design in endpoint which we find under
271:02 - slash API
271:05 - slash off
271:07 - slash design in
271:09 - and as I explained earlier by default
271:11 - when we use the URL instead of design in
271:14 - function this doesn't redirect us to the
271:17 - page where we were previously at it
271:19 - redirects us to the front page instead
271:21 - but we can configure this manually and
271:23 - by adding the Callback URL param so
271:26 - question mark
271:29 - URL in camera case spelling like this
271:33 - and then we want to redirect tool
271:36 - slash at minus product so that we get
271:40 - back to this ad product page
271:43 - so let's try this out while we are
271:45 - logged in we should be able to access
271:48 - the add product page
271:50 - but if we logged out we should be
271:52 - redirected to the login page when we try
271:54 - to access the Edge product page we get
271:57 - to the login page
272:00 - we log in and then we should be
272:02 - redirected to the ads product page so
272:04 - this works it also makes sense to add a
272:07 - protection to the server action itself
272:08 - in case we are trying to call this while
272:10 - we are not logged in so here at the top
272:13 - after us server we fetch the session
272:16 - here as well
272:18 - with a weight get server sessions to
272:21 - which again we pass the off options now
272:23 - we basically want to do the exact same
272:25 - thing as here
272:26 - if the session is now we want to
272:29 - redirect the user but this happens when
272:31 - we click the add product button while we
272:34 - are not logged in okay before we go on
272:36 - let's also check if our nth validation
272:39 - here works so when I remove an
272:41 - environment variable from the dot nth
272:44 - file
272:45 - for example the Google client idea
272:49 - and then restart the development server
272:51 - we should see an error message because
272:53 - this will not be able to fetch the user
272:56 - information
272:58 - let's try this out
273:00 - we refresh the page
273:03 - the session is now and we get the sort
273:05 - error which is caused because it's
273:08 - trying to pass the nth schema with the
273:11 - process.n files but since the Google
273:13 - client ID is missing this throws an
273:15 - error with a very readable error message
273:17 - we immediately see what is wrong and we
273:20 - don't accidentally continue with an
273:22 - undefined value so this works as well
273:24 - let's add the Google client ID back
273:27 - restart the development server
273:31 - and open our page again
273:38 - okay now let's go into our cut TS file
273:41 - in the lip folder again
273:44 - and adapt our get card and create card
273:46 - functions to our newer user
273:49 - authentication let's start with create
273:51 - cards right now we only create an
273:53 - anonymous card that's not connected to a
273:55 - specific user right
273:57 - so in here let's fetch the session
274:00 - concession equals a weight get server
274:04 - session we can use get server session
274:06 - here because we only calculate card from
274:09 - server components
274:11 - again we have to pass the off options
274:13 - here
274:15 - and then instead of creating the new
274:18 - cards variable here we delete the const
274:21 - and instead above recreator let a new
274:24 - card
274:25 - which is of type card that's the type
274:28 - coming from the Prisma client
274:31 - this is the same type we get back when
274:33 - we call cards.create it's an unpopulated
274:36 - card
274:37 - okay then below we want to check if we
274:40 - are logged in
274:41 - so we check if session has a value
274:48 - if it doesn't have a value then we want
274:50 - to create our Anonymous card as before
274:53 - so we paste in this part
274:56 - and we also paste in
274:58 - the code that creates the cookie
275:04 - if we are locked in we also want to
275:06 - create a new card but this one will be
275:09 - tied to a user account so again a way to
275:12 - Prisma Dot card dot create
275:18 - then we pass data
275:22 - and here we want to set the user idea
275:26 - to a session
275:28 - dot user
275:30 - dot idea now the ID is by default not
275:33 - content in the user object because next
275:36 - off doesn't return it to us by default
275:39 - we have to add this ourselves so let's
275:42 - just write ID here for now this gives us
275:45 - an error
275:46 - we go into our route Handler so this
275:49 - next of Route file we created earlier
275:53 - and here we can change what data we want
275:55 - to return in the user object
275:58 - by adding a callback so under providers
276:01 - we add this callbacks field
276:04 - to which repairs curly braces
276:07 - and in here we get Auto completion
276:10 - we can use this session callback which
276:13 - will be triggered whenever we return a
276:15 - session from the database and here we
276:17 - can hook into this process and modify
276:20 - what data we get back we can also
276:22 - destructure this paramsion so we remove
276:25 - params and add curly braces instead and
276:28 - in here we want to have the session
276:31 - and the user object
276:33 - and then we can there we want to set a
276:36 - session
276:37 - Dot user.id
276:41 - to the idea that's contained in this
276:43 - user object this way we take the ID of
276:47 - the user in our database and add it to
276:49 - the version so that we can access it
276:51 - here
276:53 - but typescript doesn't recognize that
276:55 - there is an ID field on this session
276:57 - user in JavaScript this will just work
277:00 - but in typescript we also have to
277:02 - configure this type here before we do
277:04 - this let's finish this function
277:06 - at the entry have to return the session
277:09 - so that we can use it in our app
277:12 - to fix this problem here we have to
277:14 - extend this user type
277:16 - for this we go into our folder
277:19 - and outside of srz this time
277:22 - so right here with all these
277:24 - configuration files we want to create a
277:26 - new folder
277:27 - which we call adds types
277:29 - this is a naming convention for type
277:31 - files in here we put a new file that we
277:35 - call next of
277:37 - dot d dot TS
277:41 - D dot TS files are typescript
277:43 - declaration files and here we can make
277:45 - changes to existing types and in here we
277:48 - write
277:49 - declare module
277:52 - and as a string we write next off
277:54 - because this is the library where we
277:57 - want to make changes to a type
278:00 - curly braces and we want to change
278:03 - the session interface
278:07 - this is what we want to change
278:09 - this session object which contains the
278:12 - user but the user doesn't have an idea
278:15 - so in interface Obsession we write user
278:18 - column
278:19 - again a pair of curly braces and in here
278:22 - we put the ID value that we want to add
278:24 - to this user it's of type string
278:27 - but we also want to have all the other
278:29 - values that are on the user available by
278:31 - default because when we write it this
278:33 - way now the user only has an idea
278:36 - to also add these other values back to
278:38 - the user we go after the closing curly
278:41 - brace here write an Amazon sign to
278:43 - create an intersection type and then we
278:46 - use
278:48 - default session from next off
278:51 - to which we add scrap records and then
278:53 - here we write user as a string
278:56 - so this way we extend this next off user
278:59 - and add this idea field to it
279:02 - let's reformat this and save it
279:05 - and now our arrows here disappeared and
279:07 - now in our
279:09 - card file in the lip folder we also
279:12 - don't have an error anymore now the idea
279:14 - of the user is added
279:16 - to the user in the session when we
279:19 - return a session okay so now when we
279:21 - calculate cards it checks if the user is
279:24 - logged in if yes it creates a card
279:26 - connected to this user if not it creates
279:28 - an anonymous card like before now let's
279:30 - scroll up to create cards and do the
279:33 - same here as well
279:36 - in the first line we want to retrieve
279:38 - the session
279:40 - then we want to create a variable for
279:42 - this card here so we remove the const
279:45 - here
279:46 - instead we create a lead card
279:50 - by this card we've had here is populated
279:52 - with the product information right with
279:54 - these include options we used here
279:57 - so the return type of this is card with
279:59 - products the type that we created
280:01 - earlier
280:03 - so let card cartridge products or null
280:06 - if we don't have a card yet and we
280:08 - initialize this with Naya
280:10 - then again we check
280:13 - if we have a session
280:17 - or not if we don't have a session we
280:21 - want to do the same as before we want to
280:23 - fetch the cook here with the local card
280:26 - idea
280:27 - and fetch this Anonymous card
280:30 - if we have a session we want to fetch
280:32 - the card of this user so cart equates a
280:36 - weight
280:37 - Prisma dot cart
280:40 - dot find first this time it's not find
280:43 - unique because a user can have multiple
280:46 - cards but here we only support one card
280:49 - so we use find First
280:52 - and in curly braces we add the photos
280:56 - we want to fetch the card well
281:00 - the user idea in the card
281:03 - that's part of the schema
281:05 - that we modified earlier so a cardinal
281:08 - has a user ID which is optional
281:12 - we want to find the card where the user
281:14 - idea
281:16 - is the idea of the currently locked in
281:19 - user
281:21 - comma and of course we want to include
281:24 - the same populated card item data
281:28 - and the rest stays the same right so
281:30 - let's try this out when I refresh the
281:33 - page we should see an empty card because
281:35 - there is no card connected to this user
281:37 - account yet right
281:39 - so I have to start the development
281:42 - server again
281:47 - refresh the page
281:51 - and the card is emptier
281:54 - now we should be able to add an item to
281:56 - the card
281:58 - it creates a card for this particular
282:00 - user
282:02 - when we log out we should see the
282:04 - anonymous card again
282:07 - so that's the anonymous card
282:10 - and when we log in we should see this
282:13 - user's card again
282:15 - and we should also see two cards in our
282:18 - database
282:22 - there they are one has a user ID and the
282:25 - other doesn't Okay cool so this is
282:28 - working now let's implement the logic
282:30 - that merges the anonymous card with the
282:33 - user's card when we log in this is also
282:35 - how it works on Amazon so you are logged
282:37 - out you add some items to your cart and
282:40 - then you log into your account these
282:42 - items are moved into your user card for
282:45 - this let's create a new function here in
282:46 - our lib folder and our card TS file
282:49 - let's put it at the bottom
282:52 - export async function
282:56 - and I'm gonna call it merge
282:59 - Anonymous card
283:02 - into a user card it's a very long name
283:05 - but it's very descriptive
283:07 - and to this function we pass the ideal
283:10 - of the user that we want to merge the
283:13 - card into
283:15 - and here we have to write a little bit
283:16 - of logic the first step is we want to
283:19 - fetch the local card F1 access
283:22 - first we need a cookie
283:24 - just like in get cards let's copy this
283:27 - line
283:28 - put it here
283:30 - okay and we also want to get the local
283:32 - card from the database right so let's
283:34 - copy this part here as well
283:37 - where we assign logo card
283:42 - we create a const card where we assign
283:45 - this tool
283:47 - and we need to populate the items
283:49 - because we want to merge these items
283:51 - together so we need to know which items
283:53 - are in the cart but we don't need the
283:55 - product information because this is not
283:57 - necessary to merge these cards
284:00 - so what we do is we remove this part
284:02 - here include product rule and just write
284:06 - true instead this populates the items
284:08 - field but it doesn't populate the card
284:10 - items with the product information
284:11 - instead they will only contain the
284:13 - quantity and the product ID let's also
284:16 - rename this variable to local card and
284:20 - if there is no local card then there's
284:22 - nothing to merge right
284:25 - So Below we check if exclamation mark
284:27 - local card we just run a return
284:31 - if there is a local card then next we
284:33 - need the users card
284:36 - so we create a const user card
284:40 - equals await Prisma
284:43 - Dot card
284:45 - dot finder first again
284:48 - because a user can have multiple cards
284:51 - so this doesn't work with find unique
284:53 - well
284:55 - the user IDs match
284:58 - with the user ID value we passed to this
285:00 - function
285:02 - and again we want to include
285:05 - the card items in here but we don't need
285:07 - the product information
285:09 - okay and then we want to merge the items
285:12 - of the user card with the anonymous card
285:14 - then we want to delete all the currently
285:16 - existing items in the user card and
285:19 - replace them for these merged items and
285:22 - then finally we also want to delete the
285:24 - anonymous card so that it's empty again
285:26 - so we have to do a zeroa database
285:29 - operations now what we have to keep in
285:31 - mind is what happens if we get an arrow
285:33 - somewhere in the middle for example what
285:35 - happens if we delete the items from the
285:37 - user card but we get an error before we
285:39 - insert the new items and then the user
285:42 - card is suddenly emptier this is why we
285:44 - want to execute all of this in a
285:45 - transaction a database transaction is a
285:48 - process where you can do multiple
285:49 - operations but if one of them fails the
285:53 - whole transaction will be rolled back
285:54 - and none of the changes will be applied
285:56 - and I think pretty much all types of
285:59 - databases support transactions including
286:01 - mongodb and to execute the transaction
286:04 - with Prisma we go below and we write
286:07 - await
286:09 - Prisma dot transaction and it starts
286:11 - with a dollar sign this is the function
286:14 - name
286:16 - to this function we can pass an async
286:19 - function where we execute the actual
286:21 - transaction and this async function gets
286:24 - passed in argument which is again a
286:26 - Prisma client but every operation we
286:28 - call on this Prisma client and here will
286:31 - be part of the transaction and in the
286:33 - documentation they call this TX which I
286:36 - guess stands for transaction so we add
286:38 - this argument here and again TX is just
286:41 - a Prisma client on which we can do our
286:43 - usual operations now before we set up
286:46 - this transaction we have to create
286:48 - another function below outside of merge
286:51 - Anonymous card into user card
286:54 - this function will contain the actual
286:56 - logic that merges the items in these two
286:59 - cards
287:00 - so we colored merge card items
287:04 - and to this function we pass the user
287:06 - card and the anonymous card right but I
287:09 - wrote a function in a way that we can
287:11 - pass any arbitrary number of cards to it
287:14 - so if you want to merge three cards for
287:16 - whatever reason in the future then this
287:18 - will work as well for this we use this
287:21 - syntax where we start the argument with
287:23 - three dots this way we create so-called
287:25 - bar arcs meaning that we can pass as
287:27 - many of these arguments to this function
287:29 - as we want
287:30 - and we cut this arguments card items and
287:34 - the type of the swag argument
287:37 - is an array of card items from the
287:40 - Prisma client
287:41 - but then we add another array because we
287:44 - can pass as many of these card item
287:46 - arrays as we want as I just explained so
287:49 - this is an array of array of card items
287:54 - and in here we want to take each entry
287:56 - of these two cards and combine them
287:57 - together so if one has a quantity of one
288:00 - and one has a quantity of two then we
288:02 - want the quantity of three and if the
288:04 - anonymous card contains items that are
288:06 - not in the user card yet then we want to
288:08 - add them
288:09 - but instead of writing this out by hand
288:12 - I just copy paste this here you can
288:15 - pause the video and type this out this
288:17 - is nothing new it's just a bit
288:18 - complicated it uses the reduce function
288:21 - and for each Loop to go through each of
288:23 - the card items and then combine the
288:24 - quantities to be honest I had GitHub
288:27 - co-pilot write this Logic for me GitHub
288:29 - copilot in case you don't know is an AI
288:31 - plugin for vs code it's very useful to
288:34 - create boilerplate code like this
288:36 - automatically but all of this still
288:38 - makes sense so if you go through this
288:39 - step by step then you will understand
288:41 - what exactly is happening here again
288:43 - just take a moment type this out and
288:45 - then we can continue our transaction
288:47 - here so in the transaction we want to
288:50 - check if the user card exists if it
288:52 - exists we want to merge it with the
288:54 - anonymous card if it doesn't exist we
288:56 - want to create a completely newer user
288:58 - account right
288:59 - so we check if user account we do this
289:02 - inside the transaction
289:04 - and let's also add the ads block white
289:06 - array so we don't get confused by the
289:08 - nesting later
289:10 - if there is a user card we want to use
289:12 - our merge card items function to merge
289:15 - the anonymous card with the user card so
289:17 - we create a const let's call it merged
289:20 - with a deal
289:22 - card items
289:25 - and for this we call our merge card
289:27 - items function
289:30 - to which repairs local cards dot items
289:33 - comma
289:35 - and user card dot items again since we
289:39 - made this a one Arc we can pass as many
289:41 - of these card item arrays as we want
289:44 - so this now contains the merged card
289:47 - items
289:48 - the next step is to delete the existing
289:50 - items in the user card and then put this
289:53 - newer merged card items in there instead
289:56 - so we call a weight TX which is this
289:59 - Prisma client on which we do the
290:01 - transaction operations
290:04 - card item
290:06 - dot delete menu
290:09 - and in the filter we Define which ones
290:11 - we want to delete with this where
290:14 - value
290:16 - and in here we want to compare the card
290:18 - idea
290:20 - to the user card.id because we want to
290:23 - delete our card items that belong to
290:26 - this user card and then put our newer
290:28 - merge card items in there
290:30 - So Below we write a wait
290:33 - TX Dot card item dot create menu
290:39 - and for the data
290:41 - we want to pass the merged card items
290:44 - not merge card items because that's the
290:46 - name of the function merged card items
290:49 - which is our new array up here now each
290:51 - of these merged card items also contains
290:53 - the idea of this card item in the
290:55 - database it had before but we are making
290:58 - new database entries here and we want a
291:00 - new auto generated idea so we want to
291:03 - ignore this ID field we only care about
291:05 - these other three fields
291:07 - we can do this by mapping these merged
291:10 - card items
291:12 - so again in the map function we get past
291:14 - each item
291:16 - we add parentheses and curly braces
291:19 - because these curly braces are not the
291:22 - block of this function they are the
291:23 - return value the JavaScript object that
291:26 - we want to return this is why we have to
291:28 - wrap this into parentheses and as I said
291:30 - in here we want to put the card idea
291:34 - which is user card dot idea
291:39 - we want to set a product idea to item
291:43 - dot product idea
291:45 - and we want to set a quantity to
291:47 - item.quantity
291:49 - so now we put this much card items in
291:52 - here but we ignore the IDS to create a
291:55 - completely new idea and we also set the
291:57 - card ID of all of these items to the
292:00 - user card idea which is important
292:02 - because the anonymous items didn't have
292:04 - a card ID before right so we have to set
292:06 - this here and that's the ID of the card
292:09 - we found in the database the existing
292:11 - card
292:12 - and in the else block
292:14 - it means we don't have an existing user
292:17 - card yet and we want to create one
292:20 - so await
292:22 - tx.card.create
292:26 - in here we pass the data as usual curly
292:29 - braces
292:31 - we want to set the user ID of this cards
292:34 - to the user ID we pass to this function
292:36 - so we pass this as the first argument
292:39 - again this is a shorthand for writing
292:41 - user ID column user idea but the value
292:44 - and the key have the same name so we can
292:47 - use the short syntax selectors
292:49 - then we want to put the items in here
292:52 - items colon and this is a so-called
292:55 - relation query in Prisma this way we can
292:58 - create a card in the card collection but
293:01 - at the same time we can create card
293:03 - items in the card items collection in
293:05 - one operation and they will
293:07 - automatically be connected together by
293:09 - adding the card idea to these items then
293:12 - in here we calculate menu to create
293:15 - serverware card items
293:17 - and I know that this can look
293:19 - complicated at first but you just have
293:21 - to work through this because this is how
293:23 - you write these database operations
293:26 - and here we have to pass data again
293:29 - for which we want to pass
293:32 - the local card dot items
293:35 - this time it's not the merged card items
293:38 - because in this ads block a user card
293:40 - doesn't exist yet meaning there are no
293:42 - user card items they are only local card
293:44 - items but again we want to map this into
293:47 - the correct structure
293:49 - again we get past each item and we
293:53 - return a new JavaScript object for each
293:55 - of them now since we do this relation
293:58 - query where we do the operation over the
294:01 - card and not the card item we don't have
294:03 - to set the card ID this time this is
294:05 - automatically handled by this operation
294:07 - instead this time we only need the
294:10 - product idea and the quantity and the
294:13 - card ID will be set automatically
294:16 - okay and after merging the cards has
294:18 - completed we want to delete the local
294:20 - card and also delete the cookie
294:23 - so we do this below this whole F block
294:25 - here still inside the transaction
294:27 - so if user card else and below this else
294:31 - block
294:33 - we write a weight TX we are still inside
294:36 - the transaction
294:37 - Dot card dot delete
294:41 - we want to delete the card well
294:44 - the ID of the card
294:47 - is the logo card idea the local cards
294:50 - that we fetched from our cookie
294:52 - we want to delete this one and then we
294:54 - want to remove the cookie
294:56 - which we do with cookies dot set
295:01 - the same name look a card idea
295:04 - and then we set this to an empty string
295:06 - this is how you delete a cookie in xjs
295:10 - okay maybe let's recap this whole
295:12 - function one more time we fetch the
295:15 - local card from this cookie if there is
295:18 - no local cards then we return because
295:19 - there is no data that we have to merge
295:22 - into the user card if there is a local
295:24 - card then we fetch the user card from
295:26 - the database if there is no user card in
295:29 - the database yet then we just have to
295:31 - create a new one with the items
295:33 - contained in the logo card and if
295:35 - there's already a user card and a logo
295:37 - card then we merge these items and add
295:40 - them all to the user card and at the end
295:43 - we delete the local cards because we
295:45 - don't need it anymore we have merged it
295:47 - into the users card okay this function
295:49 - is ready but now the question is where
295:52 - do we call our merge function here we
295:54 - want to call dust right after we have
295:56 - logged in so before the pages open the
296:00 - merging already happened and as usual
296:02 - when we see the page all the data is
296:04 - already displayed correctly and there's
296:06 - no loading state
296:07 - so let's go into our next of Route
296:09 - Handler again
296:11 - we have the skull back here that will be
296:13 - called every time we return a session
296:15 - and Below callbacks we can also add this
296:18 - events field
296:20 - and in here we can get cult every time
296:23 - we did a certain off operation for
296:25 - example
296:27 - we have this signed in function here
296:30 - and this is the perfect place to merge
296:32 - our cards because this will be called
296:33 - right after we have signed in but before
296:36 - we are returned to our home page
296:39 - we want to make this an async function
296:41 - because our merge card functions makes
296:44 - database operations
296:46 - and we want to destructure this argument
296:48 - here
296:49 - we need this user value to get the user
296:52 - ID
296:53 - and then here we simply call a weight
296:56 - merge Anonymous Cards into user account
296:59 - which expects the user idea
297:02 - that we can get out of this user this is
297:04 - the user that just signed in
297:08 - okay let's try this out
297:10 - the locked end user has one item in the
297:14 - cart right now these shoes for 95 bucks
297:18 - let's sign out
297:20 - in the anonymous card we have the
297:23 - headphones and this boss duel
297:25 - and now when we log in these cards
297:27 - should be merged and we should have
297:28 - three items in there let's try this out
297:31 - sign in to our account
297:34 - now design and callback is fired which
297:36 - merges the cards and there we are we
297:40 - have our user card with the three items
297:42 - in there and when we log out again we
297:44 - should see an empty cart because we
297:46 - cleared the anonymous card this is by
297:49 - the way also how Amazon handles it let's
297:51 - try this one more time let's put
297:53 - something into the anonymous card
297:56 - maybe two of these plants here and again
297:58 - this real glitch doesn't happen in
298:00 - production it only happens in
298:02 - development
298:03 - so now we have two of these plants in
298:06 - here again we log in
298:09 - and these items will be merged into the
298:13 - user card
298:14 - and this eye works isn't this cool now
298:17 - let's also try if our transaction works
298:19 - properly as I explained if we have an
298:24 - error here somewhere inside this
298:25 - transaction none of these operations
298:27 - should be applied let's try this out by
298:30 - throwing an error here at the very end
298:32 - of the transaction
298:35 - throw error
298:38 - test
298:40 - just for a moment obviously we will
298:42 - remove this ladder so now I do the same
298:45 - process again
298:47 - I log out I add this card to the
298:50 - shopping cart
298:52 - but now when we log in and execute our
298:54 - merge function it will fail because of
298:57 - this error but the error is thrown at
298:59 - the very end after all these operations
299:01 - but since these operations are part of a
299:04 - transaction they shouldn't be applied
299:06 - when this error occurs within the
299:08 - transaction so let's see
299:11 - we log in again
299:14 - we should see this error in the console
299:18 - that is error test
299:21 - our user card still only has five items
299:24 - because this merging failed
299:26 - and this one item is still in our
299:28 - Anonymous card so the website still
299:30 - works but these cards are not merged but
299:33 - they are also not left in an
299:35 - inconsistent state so this is a really
299:37 - professional setup
299:38 - all right let's not forget to remove
299:41 - this error here maybe I will leave this
299:43 - as a comment
299:44 - one more thing I want to mention is
299:46 - whenever we fetch cookies like we do
299:50 - when we either get the anonymous card
299:53 - or also inside get server session then
299:56 - the route that uses this function is
299:58 - automatically dynamically rendered this
300:01 - is important because when we show the
300:03 - card of the user this data is different
300:05 - for each individual user right so we
300:08 - don't want to Cache this page on our
300:09 - backend and serve the exact same page to
300:12 - each user every user has their own card
300:14 - but we don't have to configure this
300:16 - cache ourselves because again whenever
300:18 - we get cookies which we do here but
300:21 - which is also done inside get server
300:23 - session then the page is rendered
300:26 - dynamically automatically so it fetches
300:28 - new data whenever we open the page and
300:30 - it's not cached between users this is
300:33 - where we don't have to add revalidate 0
300:36 - to our cart page for example this
300:38 - happens automatically because we
300:40 - retrieve the card here and to verify
300:43 - this we can actually build the project
300:46 - with npm run built
300:50 - which takes a moment this builds this
300:53 - project for production mode
300:55 - and here we can see from these icons how
300:58 - these pages are rendered and cached
301:00 - so this Lambda symbol here means that
301:02 - the page is not cached instead it's
301:05 - created every time the page is opened
301:08 - and when we look at the cut route here
301:10 - we see this Lambda symbol so this page
301:13 - is not statically cached which is good
301:15 - okay this was a tough part but I think
301:18 - we learned a lot and in the next section
301:20 - we will Implement pagination here for
301:22 - our front page so that we don't show our
301:24 - products at once
301:26 - okay so to have enough items that we can
301:29 - actually page in it
301:31 - let's go to the ads product page again
301:33 - which now requires authentication that's
301:36 - good
301:38 - and then let's add a bunch of newer
301:40 - products but let's do so in a loop so
301:44 - that we don't have to repeat this
301:46 - process like 50 times let's go to the
301:49 - add product page code and then just for
301:52 - this one operation I will put a loop in
301:55 - here so let's say
301:58 - for
302:01 - I
302:03 - and let's just put I don't know 50 items
302:07 - in here
302:09 - and then I want to repeat this process
302:12 - here
302:13 - and create the exact same item in the
302:16 - database 50 times just so that we can
302:18 - later see our full page generation bar
302:20 - with many pages in action so let's save
302:23 - this then we need an image again as
302:26 - usual we take this from unsplash I'm
302:28 - going to use this Clone Trooper here
302:30 - because what would be more fitting
302:33 - for 50 items with the exact same data
302:36 - and then a clone trooper
302:38 - so I paste the image URL here
302:40 - called this clone trooper
302:43 - description this is a cooler
302:45 - controller bar we have many of them of
302:49 - course this data here doesn't matter and
302:51 - the price will be I don't know 19.99
302:55 - now we should execute this in this Loop
302:58 - and add the same item 50 times right
303:01 - so this will take a moment to complete
303:08 - okay let's refresh the page
303:11 - and now we have this Clone Trooper in
303:13 - here 50 times
303:16 - let's also remove the for loop again
303:19 - because obviously we don't want to keep
303:22 - this
303:23 - and then we want to paginate this front
303:26 - page here because if we have a lot of
303:28 - items in our database we don't want to
303:30 - show all of them at once we want to show
303:32 - them in pages so let's go into our
303:35 - project and set up a pagination bar
303:39 - we will put this into the components
303:41 - folder
303:43 - because you will likely reuse this in
303:45 - different places
303:47 - pagination bar dot TSX
303:53 - as usual The Styling of this component
303:56 - is coming from Daisy UI
303:59 - this is how it looks
304:02 - and in this fire we export a default
304:06 - function which we also call pagination
304:09 - Bar
304:11 - and this component also needs props
304:15 - pagination bar props
304:18 - we need the current page so that we can
304:22 - highlight this element in the pagination
304:23 - bar and also make it not clickable
304:26 - which will be a number
304:28 - and we of course need a total number of
304:31 - pages
304:33 - so that we know how many items to show
304:35 - in this pagination bar
304:37 - then we add this propstone here
304:41 - and destructure them
304:43 - current page total pages
304:47 - now in this pagination bar I don't want
304:50 - to show all pages at once because if we
304:53 - have 100 Pages for example then we don't
304:55 - want to show all the numbers from 1 to
304:57 - 100 here right we only want to show a
305:00 - subset of these numbers for this we will
305:03 - write some logic that calculates these
305:05 - page numbers you can just follow along
305:07 - we create a const Max page that's the
305:10 - largest page number that will be shown
305:12 - in our pagination bar
305:14 - we assign this to math.min which Returns
305:17 - the smallest of the values we pass to
305:19 - this function
305:21 - to this we pass total Pages comma and
305:24 - then math.nex which is the opposite of
305:27 - math.min
305:29 - and here repairs current Page Plus 4
305:32 - comma 10.
305:34 - so the max page will be the current Page
305:37 - Plus 4. so if we are on page 13 for
305:40 - example the largest page number will be
305:43 - 17. however if we are on page 1 for
305:46 - example then there will be no pages to
305:48 - the left of page 1 right because there
305:51 - are no smaller pages in this case I want
305:53 - to show all the page numbers all the way
305:55 - up to 10 otherwise the pagination bar
305:57 - would be very small also if there is no
306:00 - current Page Plus 4 because we are on
306:03 - page 17 for example and there are only
306:05 - 18 total Pages then we want to use the
306:08 - total pages instead this is where we
306:11 - wrap this into math.min I know this is a
306:13 - bit complicated at first but you can
306:15 - just play around with this and see how
306:17 - this behaves
306:18 - then we also create a const Min page
306:22 - for which we use nav dot Max
306:27 - 1
306:28 - comma
306:31 - math dot min
306:33 - and to math.min we pass current page -5
306:38 - or next page minus nine like this
306:43 - again this calculates an appropriate
306:45 - value for the Min page that is not
306:48 - smaller than one and I just came up with
306:50 - this by playing around and zero what
306:53 - looks good
306:54 - and then we want to generate page items
306:57 - from the Min page all the way up to the
306:59 - next page we do this in a loop so we
307:03 - create another for Loop
307:05 - let's call the index page
307:09 - we start at Min page so we replace the
307:12 - zero for Min page
307:15 - entry one renders until page is less
307:18 - than or equal to the max page
307:22 - and then inside this Loop we want to add
307:25 - page items to an array so above the loop
307:28 - let's create this array
307:31 - cons numbered page items
307:35 - this will be of type jsx element array
307:39 - because this contains jsx elements
307:42 - and we initialize this with an empty
307:44 - array
307:46 - and then in the loop for each round we
307:49 - can say numbered page items dot push to
307:52 - put a new element in here
307:54 - and each page item will be a link
307:57 - so we use a next link here
308:01 - the text of the link will be the current
308:04 - page number which is the index of the
308:06 - loop
308:09 - and then we configure the link itself
308:12 - so
308:13 - we add an href
308:16 - and what we do is we navigate to the
308:18 - current page but we append this page URL
308:22 - query param with a question mark page
308:25 - equals
308:27 - plus the current page number
308:30 - so this adds this page query param to
308:32 - the current destination and we can read
308:34 - the page from the URL in our server
308:37 - component
308:38 - and then since we are in the loop we
308:40 - also have to add a key to each element
308:42 - for which we can just use the page
308:44 - number
308:45 - and then we also want to add the class
308:48 - name to each link
308:49 - we make this an expression with curly
308:52 - braces and add a back text string in
308:54 - here
308:55 - the first class we need for all of these
308:57 - items is this join item class which is
309:00 - used in Daisy uif for these pagination
309:03 - bar items
309:04 - and we also use the button class BTN
309:08 - then we put an expression in here with a
309:11 - dollar design and curly braces and what
309:13 - I want to do is I want to disable the
309:16 - currently selected page item so that we
309:19 - can't even click it so it has a
309:21 - different styling but we will also not
309:23 - make it clickable
309:25 - we can do this with a class but we want
309:27 - to apply this class conditionally
309:30 - so in this expression we check if the
309:32 - current page
309:34 - is equal to the page of this item
309:37 - then question mark ternary operator
309:41 - we want to apply another class in
309:43 - quotation marks
309:45 - we want to apply BTN active which
309:48 - changes the highlighting color of this
309:50 - item
309:51 - and then I also want to make this
309:53 - element unclickable for which we can use
309:56 - the pointer minus events minus none
310:00 - class
310:01 - which is coming from Tailwind
310:03 - then we add the second half of the
310:05 - ternary operator colon if this item is
310:08 - not the current page we don't want to
310:10 - add an additional class so we just pass
310:12 - an empty string here
310:15 - okay and then we create the pagination
310:18 - bar itself in the return statement
310:23 - so in here we put a div
310:25 - to which we add the class name join
310:29 - that's the counterpart of join item this
310:32 - connects these items visually
310:34 - and in the stuff we want to render
310:37 - our numbered page items right
310:40 - let's see how this looks let's go to our
310:42 - front page and before we actually fetch
310:45 - the count of pages and items we have
310:47 - let's just hard code This pagination Bar
310:50 - in here for now just to see how it looks
310:53 - so we have our pagination bar
310:56 - let's set the current page to three and
310:59 - the total pages to earn a large number
311:02 - 99
311:06 - and then see how this looks
311:08 - there it is let's Center this on the
311:11 - screen by adding some class names to the
311:13 - outer diff
311:15 - we add Flex
311:16 - color
311:19 - and item Center which would send
311:22 - everything including the patronation bar
311:25 - so we see the pages from 1 to 10 if I
311:28 - set the current page to 13.
311:31 - you can see the responsive page numbers
311:33 - in action now the smallest value is 8
311:35 - the largest one is 17 and we never show
311:38 - all 99 Pages at once because that would
311:40 - be too many but our pagination bar is
311:43 - still not fully responsive if the screen
311:46 - width is too small
311:48 - then this will not all fit on the screen
311:53 - so let's make this responsive by
311:55 - switching to a different kind of view
311:58 - what I want to do is when the screen is
312:00 - small I want to switch to this kind of
312:02 - pagination bar where we just have the
312:04 - current page and a button for left and
312:06 - right
312:08 - so let's go back into our
312:10 - pagination bar component and what we can
312:14 - do is we can hide this div on small
312:17 - screens or rather on very small screens
312:20 - by setting this to Hidden by default and
312:24 - then on the SM breakpoint which are
312:26 - small screens and larger
312:28 - we want to set the display back to a
312:31 - block so we show it on this screen size
312:34 - and larger and on this very small screen
312:36 - it's very hides these page numbers we
312:39 - want to show a different element instead
312:40 - and to put multiple elements into this
312:43 - return block we can wrap this into such
312:45 - a fragment
312:47 - because there always has to be one
312:49 - parent element and there's no reason to
312:51 - make this a div because only one of
312:53 - these will be shown a diff would work as
312:56 - well as the wrapper but I think a
312:58 - fragment is more semantically correct So
313:01 - Below the first diff we put executive
313:06 - and here we add the class name join
313:09 - again
313:10 - on gravy small screens we set this to
313:13 - display block by default and on small
313:15 - screens and larger this one will be
313:18 - hidden so only one of these two will be
313:20 - shown depending on the screen size and
313:23 - in here we put these elements from this
313:25 - UI I just showed you earlier so we have
313:27 - this left button
313:29 - which we only want to show
313:31 - if current page is larger than one
313:33 - because otherwise there is no previous
313:36 - page that we can navigate to right
313:39 - so if the current page is larger than
313:41 - one we want to render a link
313:46 - The Edge ref again will point to a
313:48 - question mark page equals
313:51 - and we append
313:54 - current page -1 and we wrap this into
313:56 - parentheses
313:59 - and this link needs the same join item
314:02 - and BTN classes as we used for our
314:04 - numbered page items
314:06 - so we add the class name here as well
314:09 - BTN and join item
314:15 - we close this link tag and as the text
314:18 - we use this left Arrow here which I just
314:20 - copied from Days UI I have no idea how
314:23 - to enter this in a normal keyboard but I
314:25 - will link this pagination bar again in
314:27 - the video description below so you can
314:28 - copy it from there but you can also just
314:30 - use any other icon here
314:33 - okay then we want the button for the
314:35 - current page right and then this right
314:37 - arrow
314:39 - zor below this expression here where we
314:42 - checked current page larger than one
314:45 - we add a button this doesn't have to be
314:48 - a link because this will be disabled
314:50 - anyway it will not be clickable
314:53 - so to this button we add the class names
314:55 - again join item
314:58 - BTN
314:59 - and pointer events none to make this
315:02 - unclickable
315:04 - and this was a page
315:08 - and the current page number
315:10 - then below the white Arrow
315:13 - we check
315:15 - if current page is less than
315:18 - total Pages because if we are on the
315:21 - last page
315:22 - then we don't need the right button in
315:25 - here again we put the link just like
315:27 - this one so let's actually copy this
315:30 - just that we wanna go to a current Page
315:34 - Plus One
315:35 - and the text in here will be a right
315:37 - arrow
315:39 - okay let's save this and see how this
315:42 - looks
315:44 - so this is the full pagination bar
315:48 - and if I make this small enough
315:50 - eventually it turns into this pagination
315:52 - bar
315:55 - but we can't try it out yet because we
315:58 - haven't set up pagination here yet so
316:01 - let's do that next
316:03 - let's go to the front page which is the
316:05 - page TSX in the app folder
316:08 - first of all we need to read the current
316:11 - page out of the URL because the
316:13 - pagination bar
316:15 - adds this as a UL param right
316:18 - so in our page here we can get the
316:21 - search params from the props for this we
316:24 - create an interface
316:27 - called home props
316:30 - and in here we add this search params
316:33 - field and you have to spell it exactly
316:35 - like this in camera case because this is
316:38 - how we get the search params out of the
316:40 - URL in xjs we need this exact prop name
316:44 - and this will contain an object with the
316:47 - different search params and in here we
316:49 - expect our page which will be a string
316:52 - this number page is coming from
316:56 - the pagination bar because this is how
316:58 - we are cult this search param value here
317:02 - this has to match
317:04 - and then we can destructure this page
317:06 - here in the component
317:09 - home props and this is actually not the
317:11 - page yet
317:12 - it contains the search params and the
317:15 - search params contain the page so this
317:17 - is how we destructure this
317:19 - what we can also do is we can give this
317:22 - a default value of 1 like this as a
317:25 - string because such params are strings
317:28 - this way we have a page number to work
317:30 - with even if no query param is added to
317:32 - the URL and in this case of course we
317:35 - want to load the first page
317:37 - so next we have to turn this page param
317:39 - into a number
317:41 - so we create the const current page
317:45 - and then we call Path int
317:48 - to which we pass the page param and even
317:51 - if we don't pass one it will be Z to A
317:54 - one as the fallback value then we also
317:56 - need to define a page size and let's
317:59 - store this value in a variable as well
318:01 - that's good practice because this way we
318:03 - avoid magic numbers where we just have
318:06 - numbers in our codes that we might not
318:07 - remember what the meaning was
318:10 - so let's create a const page size and
318:14 - let's set this to this you can also make
318:16 - this larger if you want to deploy this
318:18 - app but for testing purposes a small
318:20 - page size is easier to work with and
318:23 - then we also want to create a number
318:26 - for the hero item count the hero item is
318:30 - this element here at the top
318:32 - we have to take this into account when
318:34 - we paginate our results because we will
318:36 - only show this on the first page and
318:38 - again to avoid magic numbers in our code
318:40 - I store this value in a variable as well
318:42 - and maybe in the future you want to have
318:44 - more than one of these hero items then
318:46 - you have to change this number then we
318:48 - need the total number of items in our
318:51 - database so that we can calculate the
318:53 - largest page so we create a const total
318:57 - item count and we can get this through
319:00 - Prisma
319:01 - by calling a wedge
319:04 - Prisma dot product because this is what
319:07 - we want to count
319:09 - and then we have discount function here
319:11 - which Returns the total number of
319:13 - products in our database
319:15 - and from this we can calculate the
319:17 - number of total Pages we have right
319:20 - so we created const
319:22 - total pages
319:25 - equals
319:27 - this would be a total item count divided
319:29 - by a page size
319:32 - but since we have this additional hero
319:34 - item on the first page we subtract this
319:37 - from the total item count so minus zero
319:40 - item count
319:41 - of course we have to wrap this part into
319:43 - parentheses because division takes
319:46 - precedence over subtraction and this can
319:48 - return a decimal value so it can return
319:51 - something like 4.5 pages but we always
319:54 - want to round this up because if we have
319:56 - four and a half page then we need five
319:58 - pages in our pagination bar right so we
320:01 - wrap this into another pair of
320:03 - parentheses
320:04 - and before it we add math.co
320:08 - which rounds this number we pass in here
320:10 - up so 4.5 for example will be rounded up
320:14 - to a 5. okay now we have the number of
320:17 - pages and now we want to modify our
320:20 - Prisma query to only return the current
320:22 - page
320:24 - so we keep the order by we still want to
320:27 - order this with the newest product at
320:29 - the top
320:31 - and after this we add the skip field
320:33 - where we can Define how many items you
320:36 - want to skip because if we are on page 2
320:38 - we want to skip all the items of the
320:41 - first page so we want to skip current
320:44 - page minus one
320:46 - so if we are on Page tour we want to
320:48 - skip one fully page that's the first
320:50 - page
320:51 - times the page size right
320:55 - now again since we have this hero item
320:57 - on the first page we want to add
321:00 - something to this page size
321:03 - in parentheses we want to check if the
321:05 - current page is equal to one if we are
321:08 - on the first page then we don't want to
321:11 - skip any additional items because we
321:14 - show the hero item so after a question
321:16 - mark we write 0. but if we are not on
321:19 - the first page we want to skip one which
321:21 - is the hero item actually we don't want
321:23 - to skip one we want to skip here or item
321:26 - count first of all this makes it more
321:28 - readable because again we avoid this
321:30 - magic number but this can also now adapt
321:32 - to a two or more hero items
321:35 - so now we have defined how many items we
321:38 - want to skip after this we add another
321:40 - comma
321:42 - and also adds this take field which
321:45 - tells Prisma how many items to return
321:47 - for this page this is obviously the page
321:50 - size but again we have to account for
321:53 - this hero item
321:55 - so we add plus if the current page is
321:58 - the first page
322:00 - question mark
322:02 - then we want to add hero item count to
322:04 - the patreon size otherwise we don't want
322:07 - to add this
322:09 - okay now we have all our values here so
322:12 - we can use them down here on our
322:13 - pagination bar
322:15 - but I want to render this pagination bar
322:17 - only if we have more than one page
322:19 - otherwise it's a bit unnecessary
322:22 - so we check if total pages is greater
322:24 - than one only then we want to render
322:27 - This pagination Bar
322:28 - then for current page
322:31 - we pass the current page that we passed
322:33 - from the URL
322:34 - and for total Pages we pass the total
322:37 - pages that we calculated
322:40 - so now when we save this we only see six
322:44 - items and we are on page one right
322:48 - what happens if we click Page tour we
322:52 - still render our hero item at the top so
322:54 - down here we only have five items now so
322:57 - we want to hide this hero item if we are
322:59 - not on page one so let's scroll up to
323:02 - our hero item
323:04 - right here
323:05 - and render this only
323:08 - if current page
323:10 - is equal to 1.
323:12 - to Amazon science and we wrap this all
323:16 - around this hero item
323:20 - but now we still only have five items
323:23 - here because we are sliced the products
323:26 - and we remove the first item that's the
323:28 - one we were showing in the hero item so
323:31 - what we do is
323:32 - we remove this whole part
323:36 - and instead we add parentheses
323:39 - and here we check if current page is
323:42 - equal to 1
323:44 - then we want a map from
323:47 - products.slice.1 as we did before
323:50 - but if we are not on the first page
323:52 - colon we want to take the whole products
323:55 - array we don't want to remove the first
323:57 - item if we are on page 2 upwards so now
324:01 - when we save this we see six items
324:06 - let's refresh the page just to make sure
324:08 - that the changes are applied correctly
324:11 - on page three we still see the same six
324:15 - items
324:17 - and eventually we should get to our
324:20 - old items here these ones
324:23 - all of them show six items except for
324:26 - the first page which shows this
324:28 - additional hero item at the top so this
324:30 - works correctly
324:32 - and the currently selected page is
324:35 - content
324:36 - in the URL
324:37 - this is basically how you can maintain
324:40 - state in server components server
324:42 - components don't have real estate they
324:44 - can't use your state but they can put
324:47 - information in the URL like the page
324:49 - number and when you use search params in
324:53 - a server component like we are doing
324:55 - here then this page is automatically
324:57 - dynamically rendered meaning every time
325:00 - we open this page or refresh it we get
325:02 - the latest data and it's not cached this
325:04 - is because next.js recognizes that we
325:07 - are reading the search params which are
325:09 - Dynamic nextges can't know in advance
325:11 - which search params we are passing here
325:13 - for example it can't know which page we
325:16 - are trying to open so if we added newer
325:18 - products to our database they will
325:20 - always be shown here even if we don't
325:22 - compile the project again in production
325:24 - this has the same effect as adding
325:27 - export const we validate equal 0 which I
325:31 - explain in my next.js beginner course
325:33 - this also makes this page dynamically
325:36 - rendered but again search param status
325:39 - automatically and this is also to be
325:41 - heavier we want here usually because
325:43 - when you add new products to your
325:45 - database you usually want to show these
325:47 - changes immediately right okay so our
325:49 - page is already very professional next I
325:53 - want to implement this search
325:54 - functionality here
325:56 - so the search field itself already works
325:59 - right we have already implemented this
326:01 - so if I search for Trooper for example
326:04 - we get redirected to the search page and
326:07 - we add this query as a query param we
326:09 - just haven't set up the page itself yet
326:11 - so let's do that next so we create a new
326:14 - page
326:15 - in the app directory first we have to
326:19 - create a folder
326:20 - search that's the relative URL
326:23 - that we navigate to and then here we put
326:26 - the page TSX as usual
326:29 - and then we export the default function
326:33 - which we call search page
326:36 - and just like on the front page we want
326:38 - to get the search params out of the URL
326:40 - because this contains the search query
326:44 - so we create an interface search page
326:47 - props
326:48 - and here again we need the search params
326:51 - with this exact spelling
326:54 - and this time in here we expect the
326:56 - query which is a string
326:58 - and then here we want to get the search
327:00 - programs
327:02 - out of the props
327:06 - and out of these search params we want
327:08 - to get the query
327:10 - and then we want to fetch these results
327:13 - out of the database
327:15 - so we turn this into an async function
327:18 - this is just a normal server component
327:21 - and in here we create the const products
327:25 - and call await Prisma
327:28 - dot product dot find menu we want to
327:32 - return mailable products
327:34 - and then we add our filter here
327:37 - where colon curly braces
327:41 - and I want to search in both the name
327:44 - and the description of the product so we
327:46 - can use this or operator in our
327:48 - uppercase to which we can pass an array
327:51 - with multiple queries and only one of
327:54 - these queries has to match
327:56 - so we add them between curly braces
328:00 - first we want to search in the name of
328:02 - the product so we write Name colon
328:05 - curly braces and then we have this
328:07 - contents comparator here
328:10 - we want to find this if the name
328:12 - contains the query and the query is the
328:15 - search query that we get out of the URL
328:17 - and then after contains query we add the
328:20 - comma
328:21 - and we set the mode to insensitive which
328:24 - is a string this makes the search case
328:27 - insensitive so it doesn't matter if our
328:29 - query contains uppercase or lowercase
328:32 - letters this will always find the same
328:34 - results then we add a comma at the end
328:36 - and we duplicate this line to add
328:38 - another entry to our or array here
328:41 - just that this time we want to search in
328:43 - the description and again since this is
328:45 - wrapped into or only one of these has to
328:48 - match
328:49 - and I also want to order these results
328:51 - so after the wear down here
328:54 - we add order buyer colon curly braces
328:58 - again we want to order by idea in
329:00 - descending order again the ID contains a
329:03 - timestamp
329:05 - so we have our data and now we want to
329:07 - render this in the UI
329:09 - first of all I want to check if
329:12 - products.length
329:15 - is equal to zero
329:19 - then we want to return a div
329:22 - that says
329:24 - no products
329:27 - found
329:28 - and I want to send that this text on the
329:30 - screen so I add a class name text sender
329:34 - which again is coming from Tailwind
329:37 - so this is an early return in case there
329:40 - are no products that match this query
329:43 - if there are products
329:45 - we want to return them in the list so
329:48 - below we add another return statement
329:52 - we wrap this intuitive
329:55 - inside this diff we want to map our
329:57 - products
329:58 - products.map as usual we get past each
330:01 - product
330:03 - and we want to render the same product
330:05 - cards that we also use on the front page
330:09 - so to this product card we have to pass
330:12 - the product
330:14 - and the key
330:16 - with the product idea
330:18 - we also want to install the script
330:20 - properly so we can copy these class
330:23 - names here from the front page product
330:25 - card grid
330:28 - except for the mi41 we can copy this you
330:32 - can also type them out by hand if you
330:33 - prefer
330:35 - and we add them to this div here
330:39 - so let's save this and see how this
330:42 - looks
330:44 - we are still on the search page right
330:46 - let's refresh this just to be sure
330:49 - and here are our results you can
330:51 - paginate them as well if you want I
330:54 - didn't bother implementing pagination
330:55 - here but you already know how this works
330:58 - let's search for something else like
331:01 - store and it finds our bar stool of
331:04 - course you can customize the search to
331:05 - your preferences okay I also want to add
331:08 - a title to this page and I want this
331:11 - title to depend on the search query
331:13 - so to make this dynamic
331:16 - we export the function generate meta
331:20 - data again the spelling has to be exact
331:23 - as we already know this can take the
331:25 - same props as the page itself
331:29 - so we pass the search page props and get
331:32 - a query out of here
331:39 - this function will
331:41 - return
331:43 - metadata this time we don't have to wrap
331:46 - this into a promise because this will
331:47 - not be a fetched asynchronously we don't
331:50 - need to do a database operation here
331:53 - we just want to use the query itself in
331:56 - the title so I want to set the title
331:58 - tool
332:00 - back text string search column
332:04 - then I put the query in here
332:07 - and then our usual Dash
332:10 - flomas on at the end
332:14 - yeah of course there should be no colon
332:15 - after return
332:20 - so now this says search colon then the
332:23 - query we typed in and then flowmason
332:25 - really cool
332:26 - so feature-wise our app is finished but
332:28 - we still have to deploy it and there are
332:30 - some additional steps we have to take
332:32 - but there's one other thing I want to
332:34 - change first and this will require us to
332:36 - implement a Prisma extension Prisma
332:39 - extension is a brand new feature that
332:41 - just became available and this is a very
332:43 - interesting topic that you don't want to
332:45 - skip here so make sure to watch this
332:47 - tutorial all the way to the end
332:49 - the fact that we can create Anonymous
332:51 - shopping carts is really cool but one
332:53 - problem this creates is that we might
332:55 - accumulate a lot of abandoned shopping
332:57 - carts in our database because a user can
333:00 - create an anonymous shopping cart but
333:02 - then delete the cookie for example or
333:04 - maybe they were using the incognito tab
333:07 - which doesn't store cookies across
333:09 - sessions and once this cookie is deleted
333:12 - there is no connection to the shopping
333:13 - cart in the database anymore and also no
333:16 - way for the user to retrieve it anymore
333:18 - instead the next time they add an item
333:21 - to their cards they create a completely
333:23 - newer shopping cart so it might be a
333:25 - good idea to delete these abandoned
333:27 - shopping carts from the database from
333:29 - time to time for this we can check the
333:31 - updated ads timestamp of the card
333:33 - together with the user idea we can for
333:36 - example say okay if a card doesn't
333:38 - belong to a use also if it doesn't have
333:40 - a user idea and it hasn't been updated
333:42 - in a while then we want it deleted and
333:45 - then you can also go through the card
333:46 - items and delete all card items and that
333:49 - belong to the card that you just deleted
333:51 - the problem is right now when we update
333:54 - our card items in our server actions the
333:57 - updated add timestamp of the card is not
334:00 - updated because we are doing these
334:02 - updates directly over the card item
334:04 - model now we can change this and use a
334:07 - relation query as we already did before
334:09 - we use a relation query
334:12 - in our merge cut function down here
334:16 - where we create a card and the card
334:19 - items in one operation this is a
334:21 - so-called relation query because we
334:23 - create card items over this card model
334:26 - here so we create two models at the same
334:29 - time in our server actions we can do the
334:32 - same instead of doing the operation on
334:34 - the card item we change this query so
334:36 - let's start with card item dot delete in
334:39 - the server action file of the shopping
334:41 - cart page so instead of card item delete
334:44 - we can write await Prisma
334:47 - and do it over the card model but we
334:50 - don't want to delete a card we want to
334:52 - delete the card items so on the card
334:54 - itself we are doing an update
334:56 - parentheses curly braces
334:59 - we have fetched the cards that we are
335:01 - updating
335:03 - so we can say we want to update the
335:05 - cartwheel
335:07 - ideal
335:09 - is equal to the card idea
335:12 - and then we add this data field
335:15 - that contains the actual update values
335:18 - and in here we want to update the items
335:21 - which are the card items that belong
335:23 - to the card with this idea so this will
335:26 - find the items with this card idea in
335:29 - the card items collection and in here we
335:31 - can add the delete operation
335:34 - and an idea colon
335:36 - article and car dot idea article in card
335:40 - is what we've filtered up here so this
335:42 - now does the same thing as this
335:45 - operation down here it's a bit longer
335:47 - but now this delete operation is routed
335:49 - over our card model and this later
335:52 - allows us to update the updated add
335:55 - timestamp of the shopping cart of which
335:57 - we change the card items to the latest
336:00 - date so that we always know when was the
336:02 - last time we made changes to the items
336:04 - of this card so now we also delete this
336:07 - operation down here we don't need it
336:09 - anymore and we replace the other two as
336:12 - well so here we are updating card items
336:16 - to do it over the card we write a rate
336:18 - Prisma
336:19 - Dot cards dot update again
336:24 - we use this wear filter
336:28 - and for the data
336:31 - we pass items colon curly braces again
336:35 - this time we want to do an update
336:37 - operation
336:39 - again we need our filter in here well
336:45 - idea
336:47 - is article and cut dot idea
336:51 - again comma and again data with the
336:53 - update values
336:55 - and we want to update the quantity just
336:58 - like we did down here
337:01 - so let's delete this operation as well
337:03 - because we have replaced it
337:06 - and one more below
337:07 - again a weight Prisma Dot cards dot
337:12 - update
337:14 - again with the same filter
337:19 - data
337:22 - this time we're going to create card
337:24 - items
337:25 - so again items colon curly braces create
337:30 - and then they create body which contains
337:33 - the same values as down here the product
337:36 - idea
337:37 - and the quantity
337:40 - and then we delete this operation
337:47 - now let's also do the same in the auto
337:49 - server actions file where we have these
337:52 - two operations let's replace them as
337:54 - well
337:55 - so a weight Prisma Dot card dot update
338:02 - again we paste our wear filter and add
338:05 - the data here
338:07 - we want to update the items
338:11 - and on the items we want to do an update
338:13 - operation
338:15 - with the same filters as shown here so
338:17 - we can copy this part
338:19 - and paste it here
338:22 - and then we delete this old operation
338:24 - and one more
338:26 - then we should be done
338:29 - await Prisma Dot cards dot update
338:36 - where the card idea
338:38 - is this one
338:40 - and then data
338:42 - items
338:44 - and in the future you want to do all
338:46 - your card item updates over the card
338:48 - model to keep this updated as timestamp
338:50 - up to date
338:53 - and in here we write create
338:57 - and then we can copy paste
339:00 - this payload here
339:02 - and delete this operation
339:07 - let's save it
339:09 - or there's one more in the card TS file
339:12 - in the lib folder
339:14 - we have these two operations here but
339:17 - since we do them one after another in a
339:19 - transaction it's enough if we make one
339:21 - of them an update on the card model so
339:24 - let's keep card item delete menu and
339:26 - replace card item create menu
339:30 - so I wait this time it's this TX Prisma
339:33 - client
339:34 - dot cut dot update
339:38 - where
339:41 - the idea is the user card
339:44 - dot idea
339:46 - that's the one we are updating
339:50 - and the local card gets deleted
339:52 - data colon we want to update the card
339:55 - items
339:58 - we want to execute the create many
340:00 - operation and you get Auto completion
340:02 - here by the way this helps you with
340:04 - coming up with these operations and then
340:07 - we want to copy this part down here
340:12 - but we can delete the line with the card
340:15 - idea since we are doing this operation
340:17 - over the cut model this will be set
340:19 - automatically in this nested update
340:22 - and then we can delete
340:24 - to create menu operation below
340:28 - so now we are doing all our card item
340:31 - updates over the card model
340:33 - unfortunately this still doesn't update
340:35 - the updated ads timestamp because this
340:38 - by default is only updated if we
340:40 - actually make changes to a card's
340:42 - document so to a value in here there is
340:44 - an active discussion on GitHub about
340:46 - updating this updated ad timestamp of
340:50 - the parent document when we do a nested
340:52 - query like we are doing here so in the
340:54 - future there might be a setting that you
340:56 - can change to enable this so that the
340:58 - updated ads timestamp of the card is
341:01 - updated automatically even when we only
341:03 - update the card items but right now this
341:05 - doesn't work yet and we have to find our
341:07 - own workaround now one way to handle
341:09 - this would be to just add
341:12 - the updated add timestamp
341:14 - to our update operation and set this to
341:17 - our dates dot now to the current
341:18 - timestamp but of course this is very
341:20 - tedious because we have to remember to
341:22 - do this in every single update operation
341:25 - and we might forget this somewhere now a
341:28 - solution I came up with to fix this is
341:30 - to use a Prisma client extension this is
341:33 - a brand new feature available for Prisma
341:35 - client extensions allow us to hook into
341:38 - our queries for example and then do
341:41 - something in there which will be
341:42 - executed every time we do an operation
341:45 - for this let's go into our
341:48 - prisma.ts file where we initialize our
341:50 - Prisma client and then let's use such an
341:53 - extension to automatically update the
341:55 - updated ads timestamp whenever we do an
341:58 - update operation on the card so what we
342:00 - do is we remove this export from the
342:03 - default Prisma client
342:05 - and we rename it with f2l to press my
342:08 - base and down here we also assign
342:11 - prisoner base to Global for Prisma
342:14 - but the Prisma client that we want to
342:16 - export from this file is the extended
342:18 - one so below we write export const
342:22 - Prisma
342:24 - then we take our Prisma base
342:27 - and call this dollar sign extends a
342:30 - function on there
342:32 - with which we can create a client
342:34 - extension in here we have this query
342:36 - here with which we can hook into the
342:39 - query operations
342:41 - so colon curly braces we want to hook
342:44 - into the queries of the cards so card
342:48 - colon curly braces
342:50 - and in here we want to make a change to
342:53 - the update query because update is what
342:56 - we use in all our server actions when we
342:58 - make changes to the card items
343:01 - and this argument here should be an
343:04 - async function so we write async update
343:09 - parentheses
343:11 - curly braces
343:13 - and in here we can destructure arguments
343:15 - and other competition should help us we
343:18 - need the arcs
343:20 - and the query
343:22 - the arcs contain the actual body of the
343:25 - update so the data that we are passing
343:29 - and to this we want to add the updated
343:31 - Earth timestamp
343:33 - so in here we can make changes to
343:36 - arcs.data
343:38 - then we assign this to a JavaScript
343:40 - object in here we spread the existing
343:43 - arcs.data to keep all the update
343:46 - operations in here
343:47 - comma and additionally we also want to
343:50 - update the updated as timestamp
343:53 - and we want to set this to a newer date
343:57 - which gives us the current timestamp
344:00 - and then below we have to return the
344:02 - query
344:05 - to which we pass these updated arcs
344:08 - okay and this is how we create a Prisma
344:11 - client extension let's format this let's
344:14 - save it and then our route Handler here
344:17 - complaints
344:18 - that's our next off Route Handler
344:22 - it doesn't recognize our extended client
344:24 - as a Prisma client anymore they will
344:27 - probably fix this typing in the future
344:29 - again this is a very new feature but we
344:32 - can get around those
344:34 - by casting this to a Prisma client from
344:37 - Express my slash client like this
344:40 - this way we tell type script relax this
344:42 - is a normal Prisma client again in the
344:45 - future it might not be necessary to use
344:47 - a client extension if they add an option
344:49 - to automatically update the updated ads
344:52 - timestamp even if we don't make a change
344:54 - to the cards document itself but right
344:56 - now we have to go this detour so let's
344:58 - try this out
345:00 - in our database we have this one card
345:03 - right the updated ad timestamp is
345:05 - currently still the same as the created
345:07 - ads timestamp because we haven't changed
345:09 - anything in this document even though we
345:12 - added and we updated card items the
345:14 - updated ads timestamp still has the
345:17 - default value but now with our new
345:19 - changes when I make an update to the
345:21 - card
345:22 - this updated AD timestamp should change
345:25 - so I change the quantity of an item for
345:28 - example
345:29 - let's update this and you can see the
345:32 - newer timestamp let's try it one more
345:34 - time maybe let's add a new item
345:39 - a clone trooper
345:42 - and again right now this is 650 18.
345:47 - and after refreshing this this updates
345:50 - to the current time so now what you can
345:53 - do is you can set up a current job so a
345:55 - task that runs after a certain time
345:57 - interval regularly for this you can use
346:00 - vessel Crown jobs because we will deploy
346:02 - this project to Brazil and this way you
346:04 - can execute a route Handler so a server
346:07 - endpoint from time to time which then
346:09 - checks all your Anonymous cards it
346:12 - checks when they were last updated and
346:14 - if they haven't been updated for a while
346:16 - it deletes the card and the card items
346:18 - that belong to this card and the cards
346:20 - that have a user idea belong to a user
346:22 - so you usually don't want to delete them
346:24 - at all because they are tied to a user
346:27 - account we won't implement this in this
346:29 - tutorial you can figure this out
346:30 - yourself you can also keep the abandoned
346:33 - card items in the database if you want I
346:36 - just wanted to show you how you can
346:37 - update the updated ad timestamp so that
346:40 - you know which cards to delete
346:43 - okay now it's time to deploy our project
346:45 - to production so that we can actually
346:47 - open our website over the internet and
346:50 - as usual the easiest way to deploy an
346:52 - xjs project is via Versa which is a
346:55 - hosting provider and also the company
346:57 - that created and maintains next.js so as
347:00 - you can imagine this is really optimized
347:02 - to deploy an xjs project and all these
347:05 - features like server components and
347:07 - server actions will just work to deploy
347:09 - our project we first have to push it to
347:12 - GitHub you can do this right in vs code
347:15 - over the source control tab here you
347:17 - want to push your project to a GitHub
347:19 - repository this repository can be
347:21 - private doesn't have to be public and
347:24 - then you want to sign up on the sale and
347:26 - connect it to your GitHub account
347:27 - because then we can just click on ADD
347:30 - newer and add a new project
347:32 - and this shows us all our projects on
347:36 - our GitHub account right now I'm logged
347:38 - into coding and flow and here I can just
347:40 - click on import and add the next.js
347:43 - eCommerce project however before we
347:45 - deploy this we have to make a few more
347:47 - preparations first of all we go back
347:50 - into our project
347:52 - and open the package.json
347:55 - here we have to add a post and style
347:58 - script this is described in the Prisma
348:00 - documentation otherwise if we try to
348:03 - deploy this project on bezel we will get
348:05 - an error this is explained here it
348:08 - happens because of the way that they
348:10 - catches the Prisma client we have to add
348:12 - this post install script here
348:16 - in our package.json so this goes into
348:19 - the scripts block
348:21 - like this
348:23 - then we want to push this change to our
348:26 - main branch so add
348:29 - Prisma
348:30 - post install script
348:35 - commit and push
348:38 - then we also go into our Atlas backend
348:41 - go to the network access tab where right
348:45 - now we only allow connections from our
348:47 - localhost right so we click on ADD IP
348:50 - address and in order to be able to
348:52 - connect from Brazil we have to allow
348:54 - access from anywhere which adds this
348:56 - zero IP address because the cell uses
348:59 - serverless functions we don't have our
349:01 - own server machine with a single IP
349:03 - address and Status IP address can change
349:06 - so we have to allow access from anywhere
349:08 - but our database is still protected by
349:10 - the password so this doesn't mean anyone
349:13 - can make changes to our database we
349:15 - still need the correct password
349:17 - so we confirmed this then let's go back
349:20 - to Brazil
349:22 - and import our project here so we click
349:25 - on import it automatically recognizes
349:28 - that this is an xjs project
349:31 - we don't have to change any build and
349:33 - output settings but we need to add our
349:35 - environment variables
349:37 - so in here we put the same and for
349:40 - variables that we have in our DOT end
349:42 - file
349:43 - the database URL which is the same as
349:46 - here
349:49 - then we click on ADD and then we can add
349:52 - another one
349:55 - Google client idea
350:00 - add
350:06 - client Secret
350:13 - we don't have a next half URL yet
350:16 - because we don't know our URL in advance
350:19 - the cell actually gives us a Freer URL
350:22 - under dot the cell dot app but I don't
350:25 - know this one in advance so I'm gonna
350:27 - add a placeholder here
350:29 - HTTP colon slash slash
350:33 - and I'm just gonna write placeholder.com
350:35 - I think this will work we will later
350:37 - replace this for the actual URL we get
350:39 - from USA
350:42 - and the next of the secret which again
350:44 - is just any random
350:47 - combination of characters so I just type
350:50 - in a new one here
350:51 - click on ADD
350:53 - and then
350:54 - we click on deployer
350:57 - and hope that this works
351:00 - this will take a minute or so
351:02 - that's me in the corner
351:05 - that's me and the spot light oh and it
351:09 - worked nice congratulations you just
351:11 - deployed a new project to Brazil and we
351:14 - even get confetti okay let's click on
351:17 - continue to dashboard
351:19 - and then we get different domains for
351:22 - Freon and we have a separate domain for
351:24 - each commit basically that's this one
351:27 - here
351:28 - we have a domain for this main branch
351:30 - and then we have this domain here which
351:33 - basically just references the project so
351:35 - as you can see it has the project name
351:37 - next.js e-commerce recording coding and
351:39 - floor dotzel.deb let's open this one
351:42 - here because this one will stay the same
351:44 - even if we deploy more changes
351:47 - we copy this URL
351:49 - because we still have to edit as the
351:52 - redirect URL to our Google Cloud project
351:57 - so let's edit our oauth client
352:00 - and add this new redirect URL with our
352:04 - desire domain
352:06 - and then the same endpoint here after
352:08 - the slash
352:10 - because this is what next off requires
352:13 - we saved us
352:17 - and now we should be able to log in on
352:20 - our bezel domain as well so let's see if
352:23 - this works we are still locked out right
352:25 - now let's see if we can add an item to
352:28 - the card
352:30 - this seems to work
352:32 - let me close the website
352:36 - and open it again
352:39 - and see if the card is still intact
352:41 - refresh the page this seems to work
352:44 - let's take a look into our database
352:48 - where we should find a newer card
352:52 - without a user idea that's this one here
352:55 - and we should have the same card idea in
352:58 - our cookie
353:00 - so let's check the application tab
353:03 - and here is the local card idea that
353:06 - ends with 597 so this works just like in
353:10 - development let's see if we can log into
353:13 - our Google account
353:20 - yeah and it works and it merged this new
353:23 - Clone Trooper into our shopping cart and
353:25 - whenever you make a change to your
353:27 - project you only have to push these
353:29 - changes to the main branch and they will
353:31 - automatically be deployed by Brazil you
353:34 - don't even have to click anything every
353:36 - change that you push to the main branch
353:38 - will automatically be deployed and then
353:41 - a minute later it will be available on
353:43 - your website let's also check if the
353:46 - social media preview works for this we
353:49 - can use this social share preview.com
353:51 - website
353:53 - and here we can add
353:55 - our domain
353:58 - and then see if we see our open craft
354:01 - image
354:03 - so flomazon we make your wallet cry and
354:06 - there's our OG image
354:08 - as I explained
354:10 - this is this open craft image in our app
354:14 - folder I added this to the starting
354:16 - project but for a single product page
354:21 - on slash products slash idea
354:24 - we use the product image as the OG image
354:27 - so let's see if this works as well so I
354:31 - go to a single product
354:33 - I copy this URL
354:36 - and then we should see our Clone Trooper
354:39 - instead
354:42 - Clone Trooper flomas on and the
354:44 - description of the product and this is
354:46 - what you will see if you post a link to
354:48 - our website on Facebook Twitter or any
354:50 - of these social media websites really
354:52 - cool congratulations you built your own
354:55 - Ecommerce website and deployed it to
354:57 - production now you could buy a domain
355:00 - for example a real domain connected to
355:02 - your project and then put Amazon out of
355:04 - business if this tutorial was any
355:06 - helpful please do me a favor and leave a
355:08 - like on this video this shows me that
355:10 - there's more interest into turrets like
355:12 - this and also leave a comment what kind
355:15 - of project tutorials you want to see in
355:17 - the future and lastly I would be happy
355:19 - if you'll follow me on Twitter because
355:21 - there are a release regular little
355:23 - coding tips that I figure out while I'm
355:25 - preparing these projects my Twitter
355:27 - handle is coding and Flow and then I
355:30 - wish you a nice rest of the day happy
355:32 - coding take care

Cleaned transcript:

this comprehensive course guides you through crafting a robust ecommerce website similar to amazon.com using nexjs 13.4 and its new app router Master next.js server actions database intricacies with Prisma seamless authentication via next auth and mongodb and create a stellar UI using Tailwind CSS and Daisy UI Beyond building you'll also dive into deploying your project on versel optimizing metadata for each page duplicating Prisma requests and setting up essential tools like prettier and eslint for a streamlined development experience Florian Walther created this course he is an experienced developer and popular teacher hola Muchachos in this tutorial we will build an amazing ecommerce website using next.js13 to get a ref react server components and silver actions which are still in Alpha right now for the styling of our website we will use 10 a win CSS together with a really nice component Library called Daisy UI we will store our data in mongodb and to connect to our database we will use the Prisma orm which works really nicely together with nexjs and we will even Implement authentication into our website so that a user can log in and for this we will use next auth so this is a full stack project where we build both the front end and the back end right in next.js and we are really using The Cutting Edge technology right now in this tutorial the latest of the latest some of these features are still in Alpha so this tutorial will really equip you for the future if you want to be an xjs developer okay so without further Ado let's take a look at the project we will be building here so our website is called flomazon and it's a place where you can spend all your money and as you can see on the front page we see the list of products available on our eCommerce website they are ordered in descending order with the newest product and top and this is completely Dynamic so this featured product here at the top which is displayed in this large box is not hard coded if we added a new product to the database the new product would be shown at the top and the pen would be shown here as the second product but the featured product is only shown on the first page so if we navigate to Page tour we don't have this featured product at the top anymore so we Implement pagination as well the cool thing is the way next.js renders and caches Pages makes them open really fast so if I click on a product the page is there instantly there is no loading time because this data is prerendered and then cached we can of course add items to our cart and this is executed in a server action server actions are a next JS feature that's still in Alpha right now and they are basically a way to execute post requests on our server like adding an item to the card as we just did without having to set up a separate endpoint so this happens all directly in our components server actions are still in Alpha right now and you will learn how they work throughout this tutorial let's add a few more items to our card maybe a banana and the Game Boy here we can see how many items we have in the card and when we click on it we even see the subtotal so the current total price for all items we can navigate to the cart page where we see a list of all items in our account here we can also change the quantity of each item similar to how it works on Amazon and again this is executed in a server action and when we change the quantity of an item of course the subtotal updates as well our navbar updates and everything just works now the checkout button is just the dummy it doesn't actually do anything when we click it I know that many of you would like to see a tutorial with stripe implementation but I think stripe should be covered in a separate tutorial to not make one tutorial too bloated with too many different topics so if you want to see a stripe tutorial by me then leave a comment below if there is enough interest I might make one and of course leave a like on this video because only this way I know that there's actually more interest in tutorials like this but I haven't shown you the coolest feature of this project right now so I really wanted to make the shopping cart professional I wanted to have it work like in a real production website like Amazon and every professional ecommerce website should have an anonymous shopping cart in my example and I've implemented this so if I sign out I still have a shopping cart which right now is empty because I'm not logged into my account anymore but I can still add items to this Anonymous shopping cart so here comes the cool thing when I now log into my account again which we can do via Google login but you can also add other authentication providers if you want if I log into my account which was this one here it now merges the anonymous shopping cart with the shopping cart of this user account so previously we had six items in our shopping cart in this account but now we have seven why because it merged this mouse we added to the anonymous shopping cart into this authenticated shopping cart and now when I log out again the anonymous shopping cart is emptier so maybe let's repeat this one more time to really see that this works so remember we had seven items in our account I add another item or let's add tour to this Anonymous shopping cart so now when we log into our account we should have nine items in there right so we log in again it merges the shopping carts and there are our nine items so this is really professional also all these pages are servers at Renault which doesn't only make them great for SEO search engine optimization but this also allows us to have all the data available when we open the web page so if I refresh this page you will notice that there is no moment where the shopping cart is emptier with zero items or not shown at all instead when we refresh the page we see the number nine here immediately when the page is opened and this again in my opinion feels really professional because there is no glitch in the UI and this is also how it looks on Amazon when you refresh the page there is no loading time for the shopping cart because we are not loading the shopping cart client side like in a classic react App instead we loaded server side so the data is there as soon as the page is visible on the screen we even Implement a search functionality which again is executed through server actions so let's try this out maybe let's search for fun let's see what we find we are searching in the title and in the description of the product so somewhere in here is probably word fun let's also search for pen I know that we have at least one pen there's our pen and somewhere in here is the word pen as well but you can fine tune the search the way you want to only show exact matches for example that's up to you and of course our website is also responsive so this grid here on the front page for example adapts to the screen size and shows a different amount of items everything moves around at the correct time and even our pagination bar here at the bottom is responsive so if the screen is too small there will not be enough place to show a 10 page numbers for example instead it changes to a another kind of view which looks like this now we have this right button that we can click and the current page number and also this left button and again this changes with the screen size really cool the enough but is of course responsive as well so this moves below and yeah we will learn how to do this with Tailwind okay so this is an amazing project we will be building here and the focus of one of the main focuses of this tutorial is next.js server actions because they haven't really been covered in any tutorial in detail so far because they are still an alpha right now and we will use them extensively throughout this tutorial in different forms we will use them from Silver components and from client components so you will see how you can cut them and work with them correctly but there are some prerequisites for this tutorial because this is not a complete beginner tutorial if you have never worked with nexjs before then you should first watch my nexjs 13 beginner tutorial here on YouTube which I will link in the top right corner of this video in the info card box because next.js does some magic under the hood especially when it comes to a caching pages and you should understand this when building an xjs project and I explain all of this in detail in the linked tutorial alright then I wish you a lot of fun with this tutorial and please don't forget to like this video this is a signal to me that I should make more videos like this in the future have fun now it's time to set up our project and not only will we set up a next JS project we will also add some extensions that make it Pleasant to work with one such extension is prettier which is a code formatting tool which is especially useful together with Tailwind CSS because there's a Tailwind plugin that helps you order your classes properly otherwise working with tailoring classes can get really messy really quickly so we will learn how to set this up properly I will show you how to set up all of this manually but I will also put a link in the video description below to the starting code that you can download from GitHub the reason is that of course these different packages that we use get updates over time and sometimes these updates break existing features and to make sure that you can still watch and follow this tutorial one year or two years in the future you can download the starting code from GitHub where all the packages and other configuration is already set up so it's up to you if you want to create the project manually or download the starting code just know that if you watch this tutorial in the future and you do it manually then you might have to fix some code throughout this project all right to create a next.js project manually we open the folder where we want to put it and then we have to open the command line here on Windows we can do this by holding shift down right clicking inside this folder and click on open Powershell window here this might say open zmd or command line here this is also fine we just need a command line window if you are on Mac or Linux then yeah open the command line there as well and navigate to the folder where you want to initialize the project again you can skip this whole part if you downloaded the starting code from GitHub then you don't have to set up a new project just clone the repository into the folder where you want to put it if you worked with react or next JS before then you already have node installed but just to make sure we can check it we can type in node minus minus version and it should show a number here and it should also show a number if you type in npm minus minus version which is the node package manager that we use to install packages then as usual the easiest way to set up a newer next.js project is to use the create Next Step command which looks like this we write npx not npm but npx and then create minus next minus app and then add latest and then we run this we confirmed this year with yes with a wire and then we have to answer some questions we have to give our project a name I'm gonna call this next.js ecommerce enter would you like to use typescript with this project yes we always use typescript would you like the excellent eslint helps us find problems in our code and you always want to use this as well so again we select yes would you like to use Tailwind CSS with this project we select yes here as well which is really cool because this way we don't have to configure Tailwind CSS ourselves it's already set up would you like to use the srz directory and this is just for organization I prefer this so I select yes here as well use the app router recommended yes this way we use the new index.js13 app router instead of the old Pages directory again if you have never worked with the app router before you can follow my next.js beginner tutorial where we use the app router so we select yes here as well and this is really important because otherwise the project structure will be completely different so make sure to select yes would you like to customize the default import areas no and then we have answered all questions we have to wait a few seconds and this sets up a newer next.js project okay when this has finished we can close the command line and now we should see our new project here next.js ecommerce we want to open this in vs code so I right click open encode if you don't have this option here then you can also just open the S code manually and drag and drop the folder in there we'll open it over the menu you will know how to open a project I would assume and if you don't know that the starting project then open the starting project instead as usual this gives us a project with a lot of configuration already set up and we can open the command line which you can do overviewer terminal or use the shortcut next to it and then we run this project in development mode with npm run Dev we type this into the terminal down here which starts this project on localhost 3000. so now we can open a browser window navigate to localhost 3000 and we should see this default template here but this is not so interesting for us right now so we can close this again and we also stopped the execution of our npm run Dev by pressing Ctrl Z while our cursor is in the terminal down here and then we confirm this with wire because now we want to install some packages again this is only necessary if you have not downloaded the starting code because in the starting code I already installed all the packages to make sure that you have the same version number as me in the future so you can skip this part if you don't know that the starting code from GitHub alright and we need quite a few packages in this project and we will install them all at once now at the beginning with npmi which is short for install and then we type in a few different packages and you have to make sure that you spell all of them correctly because otherwise it will not install the correct run ok so Tailwind CSS is already set up we should actually zeal the dependency here in the package.json file because we selected Taiwan CSS when we run the create Next Step command so this is already installed typescript as well and some other configuration so the first package we install here is Daisy UI in our lowercase like this which is a component library for Tailwind CSS I will show you how this looks in a moment the second dependency is Prisma and between each of these packages we are at the space the next one is ADD Prisma slash client space the next one is next minus of space then we have ADD of Slash Prisma minus adapter space prettier the space and we are almost done eslint minus config minus prettier space and one more prettier minus plug in minus tail wind CSS so you can pause the video and type this out by hand if you haven't downloaded The Styling code and then we install all of them by pressing enter which we take away and where did I get all these install commands from well from the documentation of each of these packages they will tell you exactly what you have to install but I prepared all of this for you already and so you can just follow my instructions and now all these dependencies are added here to the dependencies Block in the package.json now in case you're wondering why do we install all of them in the dependencies and not in Dev dependencies because some things like eslint or typescript are only used in development so usually we install them in depth dependencies so that we don't upload our project in production but in xjs this is actually not necessary you can install everything in dependencies because the packages that we don't use in production will automatically be stripped away when we build a project so there's no reason to use the dev dependencies block okay and then I said that we also want to install some extensions that make working with our project more comfortable again all of the setup is explained in the documentation of each of these packages but I prepared all of this for you already so you just have to follow my instructions so this is how you normally set up Tailwind CSS in a project you have to install some stuff and you have to add some configuration files but this is already done for us when we use the create next app command it already takes care of all of this for example you can see these directives here we can actually look into our project and they are set up in the globals.css file up here but we still have to improve our editor setup which you can find here under editor setup in detailing documentation here they recommend that we install this intellisense extension which we will do and also that we set up Tailwind with predia which is this chord formatting package that we installed we will do both of this again most of this is already done in the starting code on GitHub but you still have to install the extensions so you should still follow my instructions even if you were downloaded The Styling code so back into our project we go to the extensions tab which is this button here and research for Tailwind and then we want this one here the official Taiwan CSS intellisense plugin we installed this and this gives us Auto completion for Tailwind classes which is very useful working without this is really really almost impossible in my opinion so we need is extension and they also recommend some configuration down here which you may do as well so they recommend this file Association setting and to change the editor quick suggestions so let's go into the settings which we find under file preferences and then here settings in the settings search up here we type in files Association we don't have to type it out completely we just want to find this setting here here we click on add item entry type in a star dot CSS and for the value we type in Taiwan CSS our lowercase like this okay and this way Tailwind syntax Works in CSS files so now when we open Global CSS again this quickly lines up here again if you remember there was quickly lines under these lines up here but not anymore with the setting and we want to change another setting as well which is really useful we search for editor quick suggestions and they are off for Strings by default we want to change this to a on because this way we get other completion inside strings and Tailwind CSS classes are strings and we want Auto completion for them to pop up automatically so we change this to on and these steps you have to do even if you downloaded the starting code from GitHub because I can't change your IDE settings for you you have to do this yourself then we also need a little bit of configuration for this UI which is this component library that we installed earlier we already did this step up here when we installed the dependence here but we have to add something to the Tailwind config file so we go back into our project and open the Tailwind config.js file and then we go into this plugins array here and then we want to enter this part here require there's a UI you can type this out by hand we can also delete this whole theme block here because this sets this background image that we don't need anymore we will set our own background color later and then I want to configure the daisy UI theme so again this UI is a component Library so we have different components here that are already styled like buttons for example in different colors model dialogues that we can use are kinds of stuff so that we don't have to set up all of this ourselves progress bars whatever and this comes with a custom theme but we can configure this theme appears actually a really cool theme generator you can find this under daisyui.com the docs tell you how you can customize the theme and they also have this random generator which is really cool so this lets you generate a random theme and you can just copy paste this into your Tailwind config file so if you want you can generate your own theme on this ui.com you can also keep the default theme I have prepared a theme which I put in the Tailwind config file again this is already added to the starting code I'm gonna copy paste this in here I will also add a link to this file under the video so you can copy paste it from there again you can skip this step or you can generate your own theme if you want but this is the theme I will use it sets different colors like the primary color accent color background color and so on and I also set a background color in here in this body block this is not mentioned here in the docs because this is not part of the default theme but this way we can change the background color we could also do this in the global CSS file the benefit of doing this here inside the theme is that we could later create a different theme like a Dark theme for example with a different background color instead of hard coding this into our globals.css file again you can copy paste this from the link under the video if you're not using the starting code okay we save the changes to this file then we go into the globals.css file and here we want to delete everything except for these three Tailwind lines here at the top they are necessary for the Tailwind configuration and the classes that we can use in our code but we already set up our own background color so we don't need this and we also don't need any of these CSS variables here so we delete this and save this file next we want to configure prettier for Tailwind CSS so we have this automatic class ordering I was talking about this is also very useful we already have prettier installed and we also installed this prettier pluginterian CSS earlier when we installed all the packages but we have to add a little bit of configuration as mentioned here so back into our project we want to open our Explorer here so we click on this icon and here in the root folder we create a new file with this execut name prettier Dot config.js and in here we insert this you can pause the video and type this out by hand or copy paste it from the GitHub Link in the description I know setting up all of these tweets is a bit tedious but it really makes it easier to work with our project later prettier also has an extension that we should install otherwise we can only execute it over the terminal but it's much more convenient to execute this with a shortcut with a keyboard shortcut so in the extension search we type in prettier entry one installed this extension here click on install then we want to make this the default format on so that when we click the formatting shortcut on our keyboard it uses pretty on instead of another formatter so again we open the settings over file preferences settings and research for default formatter and we want to change this from none to prettier which should be somewhere in this list you probably already thought yeah right here so now we can use the formatting shortcut which is alt shift F on Windows by default to use prettier to format our files and I just did this and as you can see I changed the intendation because prettier is very opinionated formatter they don't give us a lot of customization options instead they have a lot of rules that will automatically be applied when we use prettier to format the file like using two spaces for intendation for example pretty or is very useful because it also automatically adds semicolons in the correct places it adds line breaks when necessary it's really much better than the default formatter and we are almost done with our configuration but we still have to set up prettier to work properly together with eslant otherwise they can conflict again this is described in the next JS documentation we already installed eslint config prettier earlier now we have to go into this eslint RZ Json file and make a little change down so we search for Json what we do is we turn this value here into an array by surrounding this with scrap brackets entry at the second string in here which just stays prettier we saved us and this little change makes sure that eslint and prettier don't conflict with each other there are two more extensions that I want to install that are very useful for one eslint has an extension I already installed this one I recommend that you install this as well because this way we see our eslint warnings directly in our code editor and we don't have to execute a terminal command all the time and one more Prisma which is the orm that we will use with our mongodb database also has an extension this one is also incredibly useful because later when we set up our schema file we get syntax highlighting there we get Auto completion and this also helps us format this file properly so I recommend that you install this as well that's it for all the configuration and extensions we have to set up I just want to install one more package that I forgot earlier so again we open the terminal and type in npmi sort Cod again I will put this one in the starting code as well this is just another package that we will need later so make sure to install this and it should be added to the package.json down here okay we can close all of these tabs here all the packages and extensions are installed and configured I also set up a few images for this project again I added them to the starting code but if you set up the project manually I will also link these images in the description under the video so you can download them from there I added these images to this project for one I replaced the fluff icon here I use this logo instead of the default fav icon I also downloaded this open graph minus image into the app folder this is the social media preview image which will be shown when via copy paste a link to our website on social media on Twitter or Facebook for example this file needs this exact name and it has to be added right in the app folder again you can download it and put it in there if you're not using the starting code and two more images that we will use throughout this project are inside this assets folder so you can create a new folder inside the app folder here colored assets and put these two images in there for one it's the logo we will use for this website and then this profile pic placeholder in the case a user is logged in but they don't have a profile picture okay again I will take the project as it is right now I will push it to GitHub I will call this Branch starting code or starting point and I will link it under the video description so you can download this whole thing without having to set it up manually but it's still useful to know how to set up all of this yourself manually alright and in the next section we will set up our mongodb database and then we can start coding all right next we want to set up our mongodb database and the easiest way to do this is to use mongodb Atlas which is a cloud hosting service for mongodb and they also have a free tier available that we can use to build our project so you can search for mongodb Atlas on Google and then just click on the link you'll find here we have to create an account and log in you can click here and start create the website probably looks a bit different in the future just create a free account log into this account I already have an account and here I want to set up a new project I already have a project but that's from my next JS course I create a new project here again the UI might look a bit different on your side just find a button that says create a new project then we give this project a name again I'm gonna call this next.js ecommerce you can give this any name you want we click on next yeah this is already set our automatically then we click on create project and we have to wait a moment and then we want to create a database in this new project here we can select m0 which is the free tier but this is more than enough to build a little practice project you can even use this for a small production websites by the way we can select where our database is stored and in what region we can keep the default settings here you can change the name of this cluster but you can also keep it as cluster zero we don't have to change anything else and we click on Create and now we have to select mountains or Hills okay this is a hill this is a here I don't know if this right here is a here let's see here we are we are a human then we have to set up a username and a password to later log into our database I want to set the username to a Florian I keep the passport here and we click on create user then we have to add the IP address from where we want to connect to this database in development we are connecting from our local machine from our computer right so we have to add our current IP address with this button but this is already done down here and we have set up a user and everything then we can click on finish and close and then on go to a databases and now we have a hosted mongodb database I like mongodb Atlas because they take care of a lot of stuff for you and that you otherwise have to configure yourself like for example replica sets which as far as I know are additional observers that contain the exact same data as your database just in different locations in case one of them goes down at least this is how I understand it but this is already set up in mongodb Atlas by default okay and now what I want to do is I want to go to our collections which we can do over this button you can also click on data services here and of course we don't have any data in our database yet but I want to add some data manually I want to add some products here to work with and later we will add the page to our website where we can add products over a form but for now we add them manually we have to give the database a name I'm going to call it ecommerce we want to create a collection called products and we don't want to change any of these additional preferences we click on create and now we have this products collection here and here we want to add one product which we can do over in the document okay and for now we will just use some dummy data but the names of the fields are important because we will create our Prisma schema from the documentary Creator so we have to decide what fields we want to have in a product document we want each product to have a name right just gonna call this product name again this is just dummy data for now then we add another field this one will be the description product description each product we have in image URL which I spell in camera case like this and for now I just write hdps colon slash slash um product minus image Dot come whatever this is the URL and this is just a placeholder for now doesn't matter then we add the field for the price and all of these fields are strings by default but we want to change the price to Aint 32 so this is a number and again we put the placeholder in here 999 doesn't matter but we store the price as an integer not as a float even though a price can have decimals for cents but you can't store prices as floats because floats are not exact if you want to know why floats are not exact you can Google this but you should store prices in zense this way we always have the exact number so this is why we don't select double or decimal here but the normal int okay and we insert this dummy product into our database and now it's here in our products collection and as I already mentioned we use Prisma to work with our mongodb database this is a library that we can use in next.js or also in node.js and this just makes it easier to work with our database because it gives us a nice client on which we call these different functions for the different database operations it gives us types and everything and Prisma is a very popular one especially for next Js again the installation and set up for Prisma is described in the Prisma documentation but I will show you each step in this video so we go back into our project and we already installed the package for Prisma now we open the command line again entry execute npx again not npn but npx Prisma in it spell it out exactly like this we execute this and this does two things for one it created this dot end file with the database URL here inside it but this is not the correct connection string as you can see this is just a placeholder we get the correct connection string out of our Atlas backend here somewhere here is a button that says connect I think we see it when we click on data services here's the connect button and here on drivers we can find this connection string we can ignore these other instructions because we don't use the native mongodb driver we use Prisma to work with our database but we need this part here so we copy this into our project entry replace this part here in the string then we also have to replace this part here with the angle brackets for the actual password so we paste this in here and we also have to insert the database name here after the slash this is the name we gave our mongodb database so let's see here I think I call this just ecommerce right you can see this in the collections here this is the name we care about we enter this same name here after the slash otherwise this creates a newer database but we want to use the database that we already set up then we can delete these commands up here they are a bit confusing and unnecessary and then we also want to add this dot end file to the git ignore so that we don't push our database credentials to GitHub so we open the dot get ignore can scroll all the way to the bottom and add dot end here and now this is grayed out which indicates that this file is not pushed to GitHub now normally in the next JS project you put your credentials into this dot NF dot local files and project configuration goes into the dot end file the problem is Prisma by default doesn't look into this inf.logger file it looks into the normal end file so the easiest way to handle this is to just put our credentials directly into dot nth this is the same what we also do in a normal node.js project because otherwise we have to add additional packages and configuration to make Prisma look into this dot local file but I don't want to do this here and it's also not necessary because putting credentials into the normal.n file is totally fine you just have to make sure that you put it into the git ignore file so you don't push it to GitHub okay and the second thing that the press my Inlet command that we executed earlier did is it created this Prisma folder here with this schema.prisma file inside it here we want to change the provider inside data source DB not appear in the client but down here from broadcast SQL to a mongodb because we are using a mongodb database and you can also use Prisma with SQL databases and this is the part here that makes Prisma look in the end file for this database URL here that contains the connection string so the spelling of this variable has to be the same as whatever is entered in here and as you can see we also have syntax highlighting in here just like a normal typescript code for example but this only works because we installed the Prisma extension earlier this gives a syntax highlighting Auto completion formatting and so on otherwise the escort would handle this like a plain text file okay and here's a very cool thing we can do we already added the damier product to our database right and we added the name of the database to the connection string Ecommerce now we can tell Prisma to pull the data that we added to our collection and generate a schema from this data so we don't have to set us up ourselves so remember we have a name description image URL which are all strings and this price which is a number now in the command line we can type npx Prisma this is the exact command we execute this this shows an error because I haven't saved the changes to the schema.press modifier yet so we save this file and execute this again now it should work it opens this window here because we have to allow this to execute on windows so yeah just click on allow access and you won't have to do this again in the future here it says introspected one model and wrote it to a schema.prisma and as you can see now we have our products model here with the name description image URL and price the correct types and the idea is set up as a mongodb object idea this is called introspection this way you can invert the Prisma schema from the data you already have in the database but you can also do it the other way around you can also make changes to the schema and push these changes to a mongodb and we actually want to do this now because I want to add some more stuff in here that we can't really generate through introspection we want to add this created add timestamp which will be of type date time and again we get Auto completion because we installed the Prisma extension and then afterwards you write dot add default and in here we pass now which is a function this means when we create a new product it will automatically set the created timestamp to the correct time and then we also add an updated ad timestamp which again is date time until we add this updated ads annotation which takes care that this timestamp is automatically updated when we modify a product and now we have the formatting keyboard shortcut which on Windows is shift alt F we can format this file but they want us to configure a default formatter let's see here yeah here we select Prisma which is the Prisma extension and now it formats this file properly I don't know what the keyboard shortcut to format is on Linux and Mac but you can Google this if you don't know it there's one more thing I want to do on so our collection is called products right this is the same name our collection SEO and you usually call this the plural of the word because this contains multiple products but when we work with our data in our app we want the operations to be called on dot product and not DOT products for example I want to call product.create or product.find and not products.create because the program is a bit misleading and I also want the model name to be capitalized so we change the model name to a product singular but now we have to tear Prisma to what collection this is connected right because this collection is called products the name is different we can do this by going down here below the last field and then we write two ads map and here we can add the name of the collection lowercase products and plural now this model is connected to this collection and this way the model and the collection can have different names and now instead of pulling the changes from the database into the schema we want to push the changes from the schema into the database so instead of DB pull we execute npx Prisma DB push so that these changes will be applied to our mongodb database let's execute this okay it says that the database is already in sync so it seems like the changes we made in our schema doesn't require any changes in Atlas but it also doesn't hurt to execute this throughout this tutorial we will make some more changes to our schema here so this is not the last time we have modified this and we want to execute one more command npx Prisma generate make sure to spell it correctly and then we run this this generates the Prisma client which you can use to call our different database operations on and whenever you make changes to your schema like we changed the name of the model here then you have to regenerate as Prisma client so that you can use this new model in your code and you get Auto completion and everything but again we will do this a few more times throughout this tutorial so you will understand when you have to do this next we need to initialize this Prisma client like it is shown down here by calling the press my client Constructor and we want to make this prismaclient reusable throughout our app so we put this into a separate file for this we go into the srz folder here where all our project source code is in in here we create a new folder called lib lib is just a naming convention for a folder where people usually put like utility functions for example or functions that use other packages like Prisma in our case but it's up to you what folder structure you follow in lib I want to put another folder called DB just for organization DB obviously stands for database and in here we put a file which we call prisma.ts this is a typescript file to use Prisma in development mode and xjs we need a little bit of special configuration which is described in the Prisma documentation because when we save a project the app is restarted right and we don't want to set up a new Prisma client every time this happens so we use the code that is described down here this sets up a new Prisma client and adds it to This Global this object which is just a way to make this client globally available as a Singleton throughout our app and only if the Prisma client doesn't exist on This Global this object then we instantiate a new one and this is only executed in development in production this is not necessary so back into our project I paste the code we just saw you can pause the video and type this out by hand or again copy it from the GitHub repository and then I press the shortcut again to format this file you don't have to do this but the cool thing is that since we have pretty uninstalled it automatically adds semicolons for example and it also replace the Zinger chords for double quotes because again prettier is an opinionated chord format so they make some decisions for you like not using single chords for example but again if you use this or not it's up to you I recommend that you use it and now we are ready to use Prisma in our project and our database is already set up so now the fun part can begin now we write actual code just one more thing I want to delete our dummy product here we only needed this for introspection but we will later add actual products through our app so let's delete this document and in the next section we will add our first page to our website a page where we can add a newer product and for this we will use next.js server actions so this will be really interesting okay so back in our project we open the terminal again and we want to start this project in development mode with npm run Dev then we open localhost 3000 to see our website and I put this in split screen so that we can make changes to our website and see these changes live I want to add a new page to our website over which we can add a newer product because without products we don't have anything to display right so we open the right bar here and then in the app folder we create a new folder called add minus product and in here we put a fire page dot TSX this way we can create a page under localhost 3000 slash add minus product if you don't know how routing works in the next js13 app router then I highly recommend that you watch my Nexus 13 beginner tutorial first because there I explain all of this why we have to create a page.tsx file how we can create nested subroads and so on in this tutorial here I will assume that you already know this stuff okay and in here we can write the code for this component for this page so we export a default function entry carlet at product page as usual the name of this component does not matter the only thing that matters is that we export it from a page.tsx file and from this component we want to return some UI right so let's put a div in here and let's put in H1 in here a headline that says add product let's save this and now we should be able to navigate to a localhost 3000 slash add product which is the name we gave this folder where we put this page file in and there's our headline and now we can style this headline using class names and if you haven't used or heard of Tailwind CSS before the way this works is that we don't set up CSS files instead we write our CSS directly in here by using different utility classes that each fulfill a single purpose for example we want to make this text a bit bigger so we can type in and now we get Auto completion because remember we earlier set up Auto completion inside strings in the settings and together with the tailband we escort extension we get this Auto completion here which is really useful for example we have text LG and here you can see what this actually does which CSS attributes this actually changes this sets the font size to this 1.125 Ram so when we add this and save our changes the font gets a bit bigger you can also hover over one of these Tailwind classes to see the CSS that this applies it changes the font size and the line height as well again this only works if you have the Tailwind extension installed where do I get these classes from well either you can just see what other completion suggests to you and sometimes this is enough but often you just have to look in the Tailwind documentation so they describe all these different classes that you can use at first this can seem overwhelming but you actually get used to this very fast and you don't have to read all of this you can just Google for Tailwind box Shadow for example or you can search in the quick search here and then you will find the necessary classes you have to use to apply a box Shadow for example so let's add some more we want to make the text bigger we want to add the margin bottom for which we have this MB minus classes we use MB minus three this adds a bit of margin to the next element below but we can't see it yet we also want to make the text bold which we can do with font minus bold and since we set up the prettier extension for Tailwind earlier we can now reformat this code with our formatting shortcut again on Windows this is shift IDF and it will automatically reorder these classes here to the appropriate order as you can see it put the margin button to the front Tailwind has a special convention for the order of these classes I don't know what the rules exactly they follow but the prettier extension makes sure that the same order is applied everywhere which really makes it easier to keep an overview over these Clauses then below the H1 I want to put a form and in this form we will later enter the product information to create a new product in our database so this is a normal HTML form tag and in here we put an input which we can give a selfclosing tag with a slash and a closing angle bracket and we want to add some props to this input when we save this I think we should already see something here we have this very not good looking unstyled input here we can style this again with K1 classes by adding the class name prop so I want to add some Merchant bottom to this input and I want to set the width to 100 for which we have this W of foil table class when we save this the input field gets the margin and the full width now one downside of raw Tailwind is that you start with completely unstyled elements right and you have to Define all this yes as yourself this can be a bit overwhelming because you often have to add a lot of classes to create a UI that looks good this is why we also use Daisy UI in this project this UI basically adds more convenience classes that we can use to style different components for example somewhere here is a text input this is what we want to add to our project and this one here looks better than the one we have right now right and let's say we want to use text input with border here we can see the jsx we already have an input and here are the class names and this input and input border classes are coming from this UI they simply combine multiple Tailwind classes into a single one so that we don't have to install all of this from zero so let's try this out input and input boiler let's add them here import let's hover over this and as you can see it contains quite a lot of CSS and we want input bordered when we save this our input now looks much better of course we still need some padding here so that's the input field doesn't go all the way to the edges of the screen but we will take care of this in a moment and again we can use the formatting shortcuts to reorder these classes properly so input border moves to the front followed by the remaining classes okay but we still want to add some more props to the input field here for one we want to make it required so that we have to type something in before we can send this form this is taken care of by the browser we have to set a name this way we can get the value out of this input field later and the name will also be named because this field will contain the product name let's also set the placeholder let's set it to name as well and when we save this we get this placeholder here we can type something in and later we will get the product name out of this input field again I use the formatting shortcut to format this properly and it also puts the closing tag into a new line I really like prettier for this reason it also does stuff like adding parentheses automatically so if we remove these parentheses here from the return statement and put it like this instead and use the formatting shortcut again it adds these parentheses automatically and I really like this because it helps you keep your formatting consistent throughout the whole project okay and below our first input field we put another input field for the product description but since the description is usually longer we don't use an input field we use a text area which is basically a big input field where we can put in larger amounts of text over multiple lines we make this required as well reset the name to description and the placeholder as well just with an uppercase deal which by default looks like this we can change the size of this which is really cool but of course the one is stylus using Daisy UI and Tailwind classes Daisy UI gives us text area and text area border and then again mb3 and W foil and now it looks like this with rounded corners and some highlighting then we need two more input Fields below for the image URL and the price so let's copy the input field that we already have paste it two times because the styling will be the same we change the name of the third one to image URL like this we change the placeholder to image URL as well in readable form and then we can set the type of this input field to URL this way the browser checks that we actually put something in here that looks like a URL with https and so on otherwise the browser will not accept our input which is really useful and this down here is of course the price we set a placeholder to price as well entries that the type to number because this way we can only type numbers in here and no other characters now one thing that happens when you use Tailwind is that you often have repetition between classes for example all our input Fields here have the same margin bottom and width class applied to them right now you might be inclined to try to get rid of this by creating abstractions like separate components that already include these classes but this is actually not necessary and you shouldn't do this too earlier the Taiwan documentation actually talks about this and one thing they recommend is to just use multicursor editing for example if we want to change the margin of all our input Fields here we can just click on the first one and then in vs chord we can press Ctrl D or command D on Mac to select the next occurrence of this word now we have all four Merchant bottom three selected and we can change all of them at once to a different value if you want so this is how you can work efficiently with Tailwind classes even if you have to repeat yourself below the last input field but still inside the form we add a button which was there at product then we go into the opening tag of the button and we set the type to submit and when we have a button with type submit inside the form it will automatically submit this form when we click this button this is just default HTML behavior and this down here is our Button as you can see entailment by default nothing has any style applied to it so right now it just looks like normal text so let's add some class names to style this button we use the daisy button class BTN which Styles this like a gray button we can add some color with BTM primary and I also want this button to take up the full width so we also set this to BTN block which I think just sets a width here of 100. and now it looks much better is our form is ready but again we need some padding on the edges of the screen it looks a bit weird right now but instead of doing this inside this page I want to do it in the layout TSX file remember from my next JS beginner tutorial that this is the root layout it's located directly inside the app folder and this wraps all pages throughout our whole website to be more exact our pages are inside this children component here and this is rendered inside this HTML body and in this layout we can add styling that we want to have applied throughout our whole website for example by default this Intel font from Google fonts is applied to the whole body be at this class name here and this body wraps all pages right now I wanna wrap children into another attack the HTML main tag because each page contains the main content of the page and we will later put enough bar Above This main tag and the footer below for now I want to apply some styling to this main tag again this styling will wrap all pages for example I want to add some padding which we can do with this P minus 4 class now it already looks much better I also want to have some Max and Min width applied to all pages because as you can see this takes up the full width of the screen no matter how big the screen is I want to constrain this for this again we have different Tailwind classes available next minus W lets us set a Max width and I want to use the largest one here which is 7xl and we can see how big this is when I zoom out a bit because when I record my videos I always increase the size on the screen of everything so it's easier to read this is to realize this page and form have and this is also the size it should have on your side so now our Pages don't get bigger than this anymore so this is a 1920 pixel Monitor and Max w7xl is 2080 pixels but of course you can play around with this and use another value if you want but of course I want to have this part here Zen dot on the screen right we can do this with margin order which we set with M minus Auto now it is ascended on the screen and I also want to set a Min width which we can do with Min minus W1 but here we don't have as many different options available there aren't any classes by default for different screen sizes like we have for Max width but we can actually set an arbitrary size and this also works with Max width this also works with other attributes when you want to do this in Tailwind CSS we can add the value in square brackets like this after another minus and in here we can write 300 PX for example for 300 pixels now we set the main width to this arbitrary value of 300 pixels and now when I make the screen very small the page itself never gets smaller than 300 pixels because we don't want to scratch it too much but again you can play around with these values and use other values if you want as usual we can press our formatting shortcuts to have pretty uh realign everything properly and then I also want to change the meta data here in this metadata object we change the title from this default create next app to a flomazon I explain metadata in my nextjs 13 beginner tutorial this will now be the title of the page when we save this we can see a flowmason appear in the tab and this will also show up for example when we paste a link to our website on social media let's also change the description and I set this to our tagline which is we make your wallet cry because we are in ecommerce app so this way we change the metadata throughout our whole website so all pages now have this flomas on as the title and this description which shows up on social media but we can also modify the metadata for specific Pages like for our ads product page for example we go all the way to the top above our component and we export this const metadata here as well you have to make sure that the spelling is correct are lowercase otherwise next.js will not recognize this and here we just want to overwrite the title to the name of the page add product minus and then again the flomas on and when we save this we change the title but only for this page on all other Pages we still have the default flowmas on title and as a reminder as long as we don't use the use client directive at the top of the file this whole component is rendered on the server if we were fetching any data in this component then this data would also be fetched server side and the client would only receive the finished page with the data inside it but here we don't fetch any data it's just static HTML and now when we submit this form we want to store a new product in our database right one way to handle this would be to turn this into a client component so that we can interact with this form clientside and execute JavaScript we could take the input of this form and send it via a fetch request to our own server endpoint which then adds the product to the database this is the usual flow why do we need a server endpoint where we can't make database operation on the client why because this requires us to connect to our database so we need our database credentials and we can't expose our database credentials on the client otherwise the user would be able to do anything they want with our database this is where we have to Route requests like this over our own server so the server actually has the connection to the database and the user can just request to add this object but they can't mess around with our database so again normally we would set up an API endpoint here in our next JS project which we can do with route handlers alternatively you could also set up a separate server like an Express server for example that runs on a completely different project then we would turn our page into a client component so that we can execute JavaScript which is necessary to make a fetch request to our server we would send the product data there and the server would then insert this data into the database but as you already see there are a lot of steps involved and next.js recently introduced other actions which are still in Alpha right now and in a nutshell they are basically a way to do a server mutations directly in our components without having to set up an end point so this is just more concise because we basically just put a function into our component and we can call this function it's very intuitive and it's less work than setting up a separate endpoint so let's go back into our project and see how this works we can declare such a server function directly in a server component if we had the US client directive at the top of the file we could not put it in here but since we don't have any clientside features in this component we can put our server action directly into this file it will be an async function because we make a database operation and let's call it add product we can call the server action from a server component via this form here by adding the action attribute this way we still don't need any JavaScript this fully Works in a server component and here we simply pass our ads product function now when we call this function we get sent the data as form data so we create a parameter form data and it will be of type form data then at the top of this function we add this string that says use server this is very similar to the use client directive that we have to put in a client component this states next.js that this is a server action otherwise this will just not work and in here we can do a database operation so we can cut a weight then we use Prisma which we import from our libdb folder that we set up earlier then when we click dot with the product here where is this coming from this is coming from our schema because we call the model product and this is connected to the products collection in our database if you don't see product then make sure that you executed this npx Prisma generate command that we run earlier because this generates this Prisma client and whenever you make changes to your personal schema you have to recreate the client with the new functions available I want to start this again with npm run Dev and on here we can call functions like create for example to create a new document and we add the data of this document as an argument Within calibrases now in the server function we are allowed to call prisma.create which again does a database operation if you try to call Prisma create in a client component for example when we click a button then this will not work because again database operations can only be done on the server even if you try this you will get an error message because Prisma protects you from accidentally exposing your database credentials on their client so it will throw an error if you try to do this but inside a server action we can do this because this will only be executed on the server this code here never gets to the client so again this is the same as if we would have set up an API route in next.js or a server endpoint in Express for example this is a little server endpoint to make pulse requests on and inside create we can pass data another pair of curly braces and in here we put the actual data of the product we want to create so the name the price description and so on but of course we first have to get the data out of this from data object here so let's go above we can get our values out of the form data by their name we gave this input fields it looks like this we create a cons name equals from data dot get and here we pass the name of this field which in this case is name and this value is now of type form data entry value we can get the actual input by calling to a string on it now the input can be empty so this adds the save call Operator so name is string or undefined later we will also learn how we can call these server actions from client components this is actually possible and then we get the data not passed as form data but as normal arguments you will see all of this later when we call a server action from a server component then we basically have to do it over a form action because this doesn't require any JavaScript and this passes us the data in form of form data okay let's get the other values out of here as well cons description equals form data.get description and again recall to a string then we do this for the image URL and for a price but the price is a number so we wrap this into this number Constructor which passes the number string into an actual number so in here again we pass form data get the name of this field is price we don't have to cut to a string because number can actually handle this value but again from data get can return undefined in which case the number will throw an error so we add a fallback value here with two vertical bars and then we add the zero so this will be the fallback value in case the price input is empty just so that we don't get an error but since we made all these fields here required with this required prop I also want to check in This Server action that we actually got these values otherwise we will throw an error because we don't expect any of these inputs to be empty so let's check if exclamation mark name or exclamation mark description or the image URL is missing or the price is missing then this is invalid input so we will throw an error which was a missing required Fields or whatever you want us to say so now since we checked that these values are defined down here they are guaranteed to be defined so now we can pass the name the description the image URL and the price to Prisma and this will create a new product document with this data and after we added the product I want to redirect to the front page so we call this redirect function but this import here is wrong when we select this it adds the import like this but we want to import this from next slash navigation this is the correct one and then we want to redirect to the front page which we can do like this so now we have some very simple validation here if I try to send this without typing anything in then the browser shows us a message here and it should even detect when this is not a valid URL those are the native browser validation methods that we are using down here with required and the type prop if you want to use something like react hook form here for validation then this is also possible but for this you have to make this a client component because this requires JavaScript but I want to keep this page a server component to show you how you can use server actions from server components later we will also learn how to cut server actions from client components and then you can do everything that requires JavaScript but again in the server component you use this form action here and this simply sends the form data to the server action and later we will also protect this route so that we can only add a new product if we are logged in but we haven't implemented authentication yet we will do this later now one more thing we have to change before we can try this out since server actions are still in Alpha we have to enable them explicitly which we do in the next config file here we go into this next config block we add this experimental block colon curly braces and then here we have this server actions field which we set to true this way we can use server actions in this project one more thing we will have images in our app that we will load from unsplash.com this is just a nice website where you can find free images and we'll use this for our product images if you watch my next JS beginner tutorial then you know that we have to allow the URLs where we want to load images from and we do this also inside the next config you can put it above or below experimental doesn't matter I'm gonna put it above we have this images field again colon curly braces we add a comma here and in here we have this remote patterns value to which we pass an array repairs an array of JavaScript objects so square brackets curly braces and in here we can define a hostname you can add multiple of these if you want to load images from multiple sources and the Base address where we load these images from we add this as a string as images Dot unsplash.com if we don't do this then we will get an error later when we try to load these images so we'll save this and then we have to restart our Dev server it stopped automatically if it didn't press Ctrl Z confirm with wire and execute NP and run Dev again otherwise the changes of next config will not be applied okay now let's add some products and to show you that this works with our JavaScript let's actually disable JavaScript you don't have to do this I just want to show this to you so in the Chrome Dev tools I can press Ctrl shift p can search for disabled JavaScript and just to make sure that this is applied I refresh the page but we have to keep the Chrome Dev tools open when we close the JavaScript will be enabled again again you can get product images from unsplash just go to unsplash.com and search for I don't know product images and use any of these here just open them right click copy image address and then you can use this here as the image URL for the name description and price you can write anything you want I have already prepared some data so this is the title just gonna copy paste this here a description and by the way I use chat gbt to come up with funnier product titles and product descriptions so I didn't come up with this myself so the image here is coming from unsplash again you can copy the image URL from there and I set the price for example to 999 which is 9.99 remember that JavaScript is still disabled but when we click add product all of this should work we don't see a loading indicator yet we will add this later but we get redirected to the front page so it seems that this worked let's check our database so in Atlas in our products collection we should now see one entry with this data we inserted and it automatically generates the created ad and updated ad timestamps so this worked and we executed this over our server action here without having to set up a separate server endpoint and without any JavaScript but when we added the product we didn't have a loading indicator right which is not great because we usually want to see that some request is running right now we also want to disable the button so that we can't click it twice now we can't put a loading State into our server component here because the loading State requires JavaScript and state and those are client component features but in a client component we can't put a server action at least not directly in there like we did here but what we can do is we can make only the loading indicator a client component and we can use a special hook to hook into the loading state of this form here even if the form itself is in a server component this is a new hook their introduce just recently it's also still experimental but I want to show you how this works so you know all these different apis that we have available so I want to put the loading indicator directly into this button so we extract this button into a separate component and make it the client component so that we can put the loading state in there to make this button reusable let's put it into a separate components folder not into our app folder here so I right click on sr0 entry Creator components folder in here we put a new file which we call from submit button.tsx but of course the name is up to you this will be a client component so we add the use client directive at the top again I explained this in my next JS beginner tutorial then we want to export a component function from here form submit button we want to add some props to this form submit button so we create a type that we call form submit button props equal sign curly braces now if you watched my other next.js and react to turrets then you know that I usually make these props in interface and not the type because it's generally recommended to use interfaces until you need a type but here we do need a type wire because I want to extend this type and you can't do this with interfaces I want to go down here after the closing curly brace right ampersand component props which is then import from react like this and then we add a type to component props which we do with angle brackets and then here we press button as a string component props is a really cool convenience type that we can use and react this way our form submit button will not only accept the props that we put into the form submit button props but also all the props a normal button accepts for example you can disable a normal HTML button with the disabled prop right and instead of putting this value in here directly we can just say okay we want to accept all the same props in normal button expects and this is what component props does again this only works with type and not with interface this is why I made the props a type this time okay but we still want to add two or more values right in our form submit button props the first one is the children prop of type react dot react node in case you don't know what the children prop is this allows us to pass a component between the opening and the closing tag of another component so in the normal button we enter the text inside the opening and the closing tag right like add product for example and we can do the same with our form submit button via this children prop so whatever we pass in here between the opening and the closing tag of our form submit button will be passed via this children prop this means that the name of this prop has to be spelled like this if you change this then this will not be recognized as the children prop anymore and we also want to be able to pass some styling to this button from the outside so we pass a class name but we make this optional with a question mark so we don't have to pass one and this will be of type string this way whenever we call this from submit button component and use it somewhere we can pass classes from the outside if we want but we don't have to okay and then we add these props here inside the parentheses of our form submit button so we wanted to structure them with curly braces as usual colon we set the type to form the mid button props and now between the curly braces we have children and class name and then we want to return some UI in this block down here right let's keep it simple for now just to see that this works we just add a normal button here between the opening and the closing tag we add the children because we want to render the children that we pass to the form submit Button as the children of the button we render in here let's save this and see if this works we go back to our page entry replace this button here for our form submit button save this again so it seems to work because we still have a button that says add product but it's unstyled again because we haven't added any styling to this button in here yet so let's finish this let's go in the opening tag of the button and add a class name here but we remove the quotation marks and put curly braces here instead because this way we can put a back text string in here a back tech string allows us to use normal string classes like BTN and BTM primary but we can also put our class name in here additionally because in the backtake string we can put a variable with a dollar sign and curly braces this way both the button classes but also our optional class name String are applied to this button let's try this out as well let's save this and you can immediately see that the styling changes but this also means that we don't need the BTN and the BTM primary class on our page anymore because they are hardcoded on this from a bit button but we don't want to hard code the button block value because I want to keep this optional so we pass this from the outside as the class name prop instead okay cool then I also want to set the type of this button to submit which of course again means we don't need this prop here anymore okay so now our button works the same as before with the same styling and now we want to get the loading state in here and as I already said there is an experimental new hook that we can use to get the loading state of this form here where the storm submit button is placed in even if the form itself is in a server component it's enough if the submit button is a client component so we have to add another import curly braces from reacts done so this is not coming from next.js this is actually coming from react 18 and in here we should find experimental U.S form status but afterwards we also add s and we rename this so that we don't have to use this awkward long name here in our code we rename this to just use form status then we can use this hook in our component so again we destructure a const and we call this use form status this automatically hooks into the parent form of this button and in here we have different values we care about pending which is the loading state so when we submit our form until our server action here has returned its pending will be set to true and we can show a loading indicator I also want to disable the button while this is loading so we set disabled to a pending and I also want to show a loading spinner here right next to the text inside this button and for this again we have Daisy UI classes that we can use somewhere here should be a a loading indicator and they are different ones available you can choose whatever you like I want to use this one here so back in our code I put this inside the button tag so between the opening and the closing tag above the children we add an expression in curly braces if pending is true so pending to Amazon science then we want to render this band with this loading indicator so this is a span with a safe closing tag which gets the class names loading and loading spinner we let prettier we format this properly so this loading spinner will be shown while pending is true and pending is coming from the form status one more thing we have to do we accept these component props from the button right but right now we don't apply them to our button here in order to do this we go right here where we are destructure our props and we write dot dot dot props this way catch all the remaining props that we pass to our form submit button which don't have explicit names so all the props that we pass for the button component props basically this is this syntax we have to use for this and we also want to apply them to our button here right so we go in the button tag again and we do this all the way at the top as the first prop this way the other props that we pass below will overwrite these props because we usually want these ones to have priority over whatever button props we pass so we pass the rest props as the very first argument curly braces again we write dot dot dot props now all these props that we pass here will be applied to our button tag okay let's save everything and then try this out again so now in this page we are using our form submit button it should still work the same but it should have a loading indicator and it should also be disabled while the server action is in progress so again I'm gonna copy some data over again you can insert anything you want here I already have a title and a description and an image URL prepared and I'm going to set the price to 19.99 and now when we click this add product button it should be disabled and should show a loading spinner and this works and after it's done we get redirected to the front page and we should see our new data in the database and there it is okay let's add another product and let's check what actually happens in the network tab when we execute the server action so I want to go to the ads products page again add a new product again I'm gonna copy paste all of this over price five dollar and maybe it's a good idea to disable the redirect for a moment so that we keep the data in the network tab so I'm going to comment this out but I will add this back later let's run this with the network tab open and here we have our add product call and in the headers tab we can see that this actually makes a post request to the same page but this is basically treated like a server endpoint a post endpoint so this works just like a normal server endpoint where we send a post request tool just like this endpoint is not on a separate address it's on the same address as this page okay let's confirm that this newer product is also in our database yeah that is let's add the redirect back in and lastly for this section of the tutorial I want to send up an error page which will be shown if something goes wrong in here and we actually throw an error this should usually not happen because we have input validation clientside and Prisma database operations also don't fail unless the database is actually down but we should still have a custom error page and if you watch my next JS beginner tutorial then you already know how this works we put a file with a special name into the app folder so right click we have to call it error.tsx this way next.js automatically turns this into the error page which will be shown when something goes wrong for example if a fetch fails in a server component or a server action the error page has to be a client component so we add the US client directive at the top and this is always the case for error TSX and xjs they always have to be in client components I'm not sure why I think because of the way the error is passed to them but they have to be client components export default function let's call it error page again the name is up to you and here we just want to return some very simple UI a div that says something went wrong please refresh the page of course you can make this more sophisticated if you want let's actually try this out so let's say here in our server action we just pass a test around buzzinga we also have to comment out this part just for a moment and now when we send something here we should see our error page something went wrong now I think they are also planning to add an error field to the use form status hook so that we can get the arrow in here and handle it clientside instead of redirecting to this error page which can be a bit of a jarring user experience but right now we only have the loading state in here there is no error state in here yet so the easiest way to handle errors clientside and server actions is just to file back to this error page but again usually the user shouldn't get there so let's remove this again and now that we have some data in our database we can change our front page and render our products here right so let's do that next okay let's go to the home page which is the page TSX file that's the direct child of the app folder this one here that contains the home component and then let's remove all of this crap here and set it up from scratch so we added div and the return block and then we make this an async function Remember by default pages in the app directory are server components unless we add the use client directive meaning that we can do a database operations and all kinds of asynchronous stuff right inside this component because this will be executed on the server not on the client and just like any server action making database requests and using credentials and here is also save because they will not be leaked to the client this means we can just call Prisma here so let's create a const products to fetch all the products from our database and assign this to await Prisma which again we import from our lip folder dot product dot find menu parentheses curly braces and here we can add a filter or a sort order entry wanna order products buyer colon curly braces and I want to order the products in descending order so that we have the newest one at the top now we could order this by the created ads timestamp right but it's actually better to use the idea why because the ID also contains a timestamp but the ID is unique reverse theoretically two products could have the exact same time stamp so when you want to order documents in mongodb by that timestamp it's better to use the idea colon and then in here we pass the ESC for descending as a string so now we order these products by the idea in descending order with the newest one at the top and then we want to render our cards for each of these products right and for this again we use Daisy UI which contains this card component that we can use so let's go back into our project let's put it in the components folder because we want to reuse this in different places let's call it product card dot TSX we export default function as usual with the same name this product card will also take a prop so let's create an interface again you can use a type or an interface it doesn't matter but it's usually recommended to use interface unless you will need a type we needed to type earlier tour combine it with component props but here an interface is enough let's call it product card props and each product card will take one product as input and the type of this is product with a capital P we didn't get other completion but we can get the product type from our database through an import from Prisma so import we destructure this from at Prisma client and in here should be the product type that's coming from our Prisma schema the whip has one of these products to our product card read this structure this here so that we can render the information of this product in this card for now let's save this and let's render one of these product cards in our div just a single one for now so that we can see the card on the screen while we are building the UI so in here I'm gonna put a product card and for the product for now we just hardcore the products at the index 0 so the first element here again just so that we can see it in the UI where we are building it we saved us but we still have to return UIL from the product card so let's put a return statement here I want to make the outer element of this card a link and next link so that when we click this card we get forwarded to the product page so we are at the next link here we set the href to a string to the page where we will see the details of this product we haven't set up this page yet but we will do so later we will put the URL at slash products slash and then we append the product idea so Auto completion or product idea and to this link we add the class names that style this card and I think we also have to refresh the page here to show our changes okay the development server isn't running right now so I restart this refresh the page again and we don't see anything yet but we will see something in a moment so this link gets the card class which is coming from this UI we said W minus full to make the card take up the full available width we will later display this card in a grid we said BG and base 100 this is the background color will be a light whitish color I also want to set hover colon Shadow XL this is the class name implies adds a shadow to our card but we have this modifier here have a colon it only applies the shadow when we hover over the card with the mouse you will see this in a moment and then we can also add a transition for the Shadow with the transition Shadow class okay let's close this link tag and in here we render the contents of the card let's see how this looks if we just put some text in here for now this is the card we have our Harbor Shadow effect but of course this doesn't look great yet so let's remove text and instead we add another diff in here inside the link with the contents of the cards we add a class name to this Auto diff called card minus body this adds the appropriate padding and everything to a stylus card body and in here we put an H2 headline but again in Tailwind CSS all components are unstyled by default including buttons and headlines so to style this properly we add the card minus title class and in here we want to render the name of the product which we get from the product object that we pass to this card okay let's save this see how this looks already looks better right and we have the square hover Shadow effect with a transition you can play around with this you can try out different styling different Shadow values but this is fine for our card here below the H2 I want to put some more text with the paragraph tag in here I want to render product dot description which looks like this this is coming from our database and then I also want to add a price tag for this first of all we need to set up a function that formats the price properly because remember the price is just stored in zens but we want to show it as dollar we can put this function into the lip folder here so let's right click on lip new file let's call it format.ts and from here we export a function that we call format price and to this we will pass the price as a number then we want to return the formatted value on so what we do is we turn the zens into a dollars first by simply dividing price by 100. then we want to format this value in US dollar which we can do by calling dots to a local string as the first argument we have to pass the local so basically the language to which we want to format this and we want to format this to en minus OS in uppercase like this so we formatted the string in American English then we pass a comma and the block of curly braces where we can do some configuration and here we can set the style to one currency entries that currency tour USD this will take care of formatting this price properly in US dollar with the US dollar symbol and the correct decimal point and whatever I think this is a bit better than doing it manually zombies lifters we can also reformat it with prettier then I want to create another component in the components folder called price tag.tsx again we will reuse this component in different places in here we export a default function price tag which will call our format price function that we just set up but to this component we are past the price tag props which needs the price which again is a number and again I want to be able to style this price tag from the outside so again I add this optional class name String here that we already saw earlier and then we pass these props to the price tag component and destructure them here and then down here I want to return S Pen which contains the format its price so between curly braces I call our format price function which we export from our lib folder and to this we simply pass our price and then we also want to style the span again with class names from this UI again we add the back text string here with curly braces and two back ticks this UI has this batch class yeah which states this like a little badge like a price tag and then we also want to put our optional class name in here and that's it for this component okay let's go back into our product card and here below the description I want to render a price tag and for the price prop we pass product dot price okay let's see the product costs five dollars and this is rendered by our format function with the dollar symbol and the decimal point but of course we also want to render the image of the product right we do this above the cardboard here still inside the card link and in the days the UI documentation they wrap this image into a figure I'm not 100 sure wire but it's best to follow this but in here we don't use one of these normal HTML images because in xjs we should usually use the next image which is an import from next slash image because these images are optimized they are automatically resized by next.js to the appropriate size and they have some other cool features that the normal HTML image doesn't have so for the sr0 so for the image source we pass product.image URL this is the image we want to show for the alt text we can pass product.name when we use the next image we have to set the width and height so next JS knows at which size it has to load this image we set this to 800 width and 400 height now since our cards are responsive the final dimensions of the image will actually be defined by CSS and not by these values here so our images might not be shown in 800 times 400. this is just the size at which we load this image so no matter how big the image is even if it's 4000 pixels next JS Ray resides it to 800 times 400 pixels and I picked this value because those are the largest dimensions in which this image will be shown later if we would make these Dimensions smaller then the image would be blurry if we would make them bigger then we will load in unnecessarily a large image and to style this image properly we again add class names h48 that's the height of this image in the cards we want each card and each card image to have the same height and then to not make our image distorted because the dimensions of the image inside the cards might be different of the intrinsic Dimensions that the image file has and to not distort this image with that object cover which basically xender crops the image so if the image is too big or has the wrong dimensions then it will just be cut off so it fits into our card image okay let's save this and there's our image and again this image changes depending on the screen size and here you can see the object cover in action there's one more thing I want to do in this product card if the product is newer I want to add a little batch that saves newer because this looks cool so above the return statement in the product count we create a const is newer and here we simply check if date dot now which is the current timestamp minus we want to compare it to the created ads timestamp of the product but this is a string and to turn this into a date we have to create a new date and to this new date Constructor we pass product dot created at which turns this into an actual date and to get the timestamp out of the state we call Dot get time and now we can compare to date dot now which also returns a timestamp and if the difference between these two is seven days you can of course also pick another value then I want to show this its newer batch so if date.now minus the date of the created add timestamp is less than seven days but those values are milliseconds so we have to calculate the days 1000 milliseconds times 60 seconds or one minute times 60 seconds or one hour times 24 hours are one there times seven for seven days so now it's newer will be truer if our product is less than seven days old and when this is newer we want to render a little batch which I want to put into the H2 attack here after the product name here we put an expression if it's new is true to Amazon science then we want to render another div in here that just stays new in all uppercase and we style this div to a batch with the batch and the batch secondary class name which gives it the secondary color that we set in our theme let's save this and there's the batch our secondary color is this yellow but now that I see it maybe it would be better if we don't place it inside the title right but rather below it maybe here I think this looks better so I put it below the H2O attack so our product card itself is done but we still want to render these products in a proper grid right so let's remove this hardcoded product card here and I want to render our product as a grid but I want to render the first product in the special hero view here that you saw in the beginning with this background and this button it just looks a bit cooler again this is coming from this UI so let's do it in here in this first diff we put another div for this hero viewer this inner div gets the class names hero rounded XL which gives this whole element rounded corners and BG based 200 for the background color and in here we put the next image which will load the image for the first product so again products at the first index dot image URL similarly at the IELTS text will contain the first products name we set the width to 400 and the height to 800 but again the final dimensions of the image will be defined by a CSS those are just the dimensions to which we resize the image before we load it to style this image we add the class names W foil we set the max width to SM so that the image at most has a width of 24 Ram we make the corners of the image rounded with rounded LG to LG and XL and so on are just the different values for the Border radius the rounded XL has a border radius of 0.75 RAM and LG has 0.5 Ram this is just up to your personal preference and I want to set Shadow 2XL to give this image a drop shadow and since this is the first image that we see on the screen above the fold and the most important image we add this priority prop which signals to next.js that it should load this image first you should use this on the yeah the largest image basically that is shown on the screen so let's save this and look what we see here where it doesn't look great yet we still need to show the product information and align this properly what we do is we wrap this image into another div so a third diff right here we put a closing tag below the image and restyle this div here with the class names hero minus content Flex call to make this a flexbox column where the elements are aligned below each other but then we also write LG colon Flex row and this is how you create responsive layouts in Tailwind CSS because this means on small screens this will be a flex column so the elements will be aligned below each other but as soon as we get to the LG break point which is a screen break point so a certain size of our screen then we use a flex row instead meaning that the elements will be a aligned horizontally instead of vertically so again whatever modifier we use here will be applied on larger screens and upwards and whatever we use with auto modifier will be used on small screens and we don't have to add a modifier for small screens here because this LG modifier basically means greater than or equal to one so if the screen is greater than or equal to LG then we will always use a flex row and if it's below that then we will use a flex call this needs a bit getting used to but this is how you create responsive layouts in Tailwind and then right below the image but inside this inner div we put another div for the text of this hero item this doesn't need any styling but in here we put in H1 that we start with text5 XL which sets the text size we use Font bold which is selfexplaining and in this H1 we want to render the name of the first product right so again products at the index 0 dot name and there's the title of this hero element and since the screen is so small right now and we are zoomed in this Flex coil is applied right but if I make this window big then Flex row is applied and these elements are aligned horizontally and on small screens they are aligned vertically you can also see this switch here when we reach this breakpoint and again this breakpoint is defined by this LG colon you can see in the Tailwind documentation what exact pixel its value this breakpoint has you can also modify this but this is not necessary for us okay let's finish the diff down here below the H1 we put a P tag which we give some vertical padding which we can do with py minus six why is the vertical axis for horizontal padding you can use PX and again and here we render products at the index 0 Dot description and there it is and then I want to add a button that brings us to the product page below the paragraph tag we put the next link make sure it Imports the next link we set the href of the slink tour slash products the same UI we used earlier slash and then the ID of this first product so products at the index 0 dot idea and we want to render this link like a button but you shouldn't make it a button first of all because this is a server component and we can't handle Clicks in a server component but also when we link to another page then we should actually render a link and not a button element it can look like a button but it should be a link which is important for accessibility you always want to use the correct HTML element but again we can style this as a button with BTN and BTN primary and then we close this link and here the link of course doesn't contain any text yet which we add between the linked tags check it out for example okay so this is now a link that looks like a button which brings us to the product page that we haven't set up yet and again this is responsive so on larger screens it looks like this on smaller screens it looks like this and below this hero item we want to render the grid with the remaining items just have to see in which diff we want to put this we want to put this below the hero diff here so below this one inside the outer div in here we put another div which we render as CSS grid again with Tailwind class names first off I will set my 4 which is a vertical margin again m stands for margin and y stands for the vertical axis so top and bottom we want to render a grid Drifter grid class and then we Define how many columns the squared should have and again this depends on the screen size right so we use different breakpoints we start with grit coils 1 for one column which will be applied on small screens on a medium sized screens MD colon we want to set create calls to Tool so we show two columns on slightly larger screens and then we add the third breakpoint XL and I figure this out by just playing around with different break points and see when it looks good on Notch screens we want to show three columns and to add some space between the Zinger cards in the script we can add the gap for our class so those are all the classes we add here then we close this div and render the actual product cards in here we already have the product card component set up right so here we can now put an expression we want to render all our products in here except for the first one because we already rendered the first one here in this hero view so what we do is we call products dot slice and pass the index one this way we turn a new array without the first element and then we want to take each of these product objects and map them to a product card right so in here we get past each product not produced but product and after the right arrow we add parentheses and in here we want to render a product card for each product if you don't know what map does then you probably haven't worked with react before and you have to watch a beginner tutorial first but this way we turn each of these products in the array into a product card that we can then render in the UI the product card expects the product object which we get passed by the map function and when we render a list we also have to set the keyer this is required for react to a rerender lists efficiently and here we have to set a unique value for which we can use the unique idea of the product and then we close this and when we save this there's our grid right now we only have three products in total so let's add some more over the edge products page so I'm gonna go ahead and add a few more products but I will skip this part in this video because you already know how this works just go ahead and add a few more products so that we can show something in our grid so I went ahead and added some more products and now we can see our full grid doesn't it look beautiful and each card has a hover Shadow and when we click the card we get to The Details page of this product which doesn't exist yet and this grid is fully responsive so on larger screens we have three columns when we make the screen smaller we get to two columns and eventually to one and this is the largest width at which our card images are displayed and this is around 700 something pixels as you can see up here this is why I set the width of the image in the product card to 800. this way we make sure that we always have an image that is large enough but not too large when we open one of these images in a new tab you can see that the width is approximately 800 pixels which again is the largest size at which we need this image which is shown when we only have one column okay later we will also add pagination to this page so that we download all products at once and as a reminder by default server components in react are statically cached meaning that all these products are fetched when we compile the project here in our server component and then even if we reload the page after we added new products we won't show these new products at least not in production in order to always show the newest products we have to revalidate this page but this will not be necessary when we later add the search param for the page that we are currently on because as soon as we add search params to a server component in xjs it's automatically dynamically rendered but don't worry if this is confusing to you right now you will see how this works later okay since we are already linking to our products detail page through our cards here let's set up this product detail page next so we go into our project and remember the URL for our products page was Slash products slash and then the ID of the product so in the app folder we create a new folder and again I explain how this routing structure works in my next js13 beginner tutorial we want to have a folder called products and then here we want another folder where we put the ID of the product because this is part of the URL so slash products slash idea and finally in here we put a file page.tsx to render a page at this path so let's set up the props for this page product page props and in here we want to get the ID out of the URL so that we can use this idea to load the correct product from our database right and we get this over the params value because params will contain the ID placeholder that we put into our path here suprams is another object which contains the idea which is a string and then we can pass this to our page component which then loads the product so we export a default async function here which we call product page and it takes the product page props in which we can find the params and we destructure this further with a colon and a pair of curly braces and in here is the idea right and this is a normal server component so we can make our database requests directly in here we create a const product we call await Prisma dot product dot find unique and this allows us to find a product by its idea in parentheses and curly braces we write real colon add another pair of curly braces and in here we pass the idea so we want to find a single product where the idea is the same as the ID we pass in the URL now the product we get back from this find card can be null because it might be the case that the product with this ID doesn't exist right and in this case we don't want to render an empty page instead we want to forward the user to do 404 not found page we already saw this not found the page earlier when we just enter any road that doesn't exist by default it looks like this but this is not great for one it's not styled at all but also no elements that we put into our root layout is shown on this 404 page so when we later put enough bar in the footer in here this navbar and folder will not be shown on the 404 page and it's a really bad user experience because they don't have anything to click they just see this empty page but if you watched my next.js 13 beginner tutorial then you know that we can overwrite this not found page and show our own one which will be rendered inside our root layout here so let's do that next for this we are add another file to the app folder which we call not minus found.tsx and again as for IDs special files the naming of the file is important because only this way next.js will recognize this as the 404 page this page will be very simple we export a simple component that we call not found or not found page the name of the component itself doesn't matter and here we simply return a div that says page not found again you can make this more sophisticated but I want to keep it simple here now when we open a page that doesn't exist it renders our own not found page and later our navbar in our photo will also be shown here so I know with this note found page in place we can also redirect to it dynamically which we want to do if our product is now for this we check if exclamation mark product so that's now undefined then we call this not found function which is an import from next slash navigation again this redirects us to the not found page the same one we see here on the left side but only if product is null and Below we can now render our products page because we know that the product now has a value so in the return block we render a div and we add some class names to this diff we want to make this a flexbox we want to render a flex column by default but again on LG screens and larger we want to render a flex row instead to make this responsive and inside the div we put the product image and then the name and the description so in here we put a next image make sure it's adding the correct import we set sr0 to the image URL of the product we loaded up here similarly we set the alt text to the name of the product we set the width and the height above to 500. but 10 CSS actually that's the final height of the image to the intrinsic height the image file has for example if the image has a width of 500 and a height of 200 then the image we see on the screen will also be 500 times 200 and when next.js resizes an image I think it only takes the width into account the height doesn't really matter only to reserve space so even if the real height of the image is larger than 500 then this will still work it will only resize it to have the appropriate width anyway if you just use these values here then it will work and I want to add some rounded Corners to this image because this looks better which we do a rounded LG again and again this is the largest image and the only image shown on this page so we set the priority attribute and below this image still inside this div we put another div for the product text we set the H1 to the product name and we style this H1 with text 5 XL which again that's the font size and we make it bold again below the product name I want to render a price tag instead we already set up this component earlier and for the price we pass product.price right and to the price tag we can pass an optional class name which we want to do now because I also want to add some Mulch and top with mt minus 4 to this price tag and Below we put the product description which is just a paragraph tag products dot description entry at the p y minus 6 class name to add some vertical padding okay let's save this and let's navigate to a product page there it is responsive but we still need some gap between the text and the image but we already move between a flex column and a flex row at the appropriate break point to get some room between the image and the text we use Gap 4 and GAP is better to use than a margin here because a gap will work no matter if it's a flex column or a flex row this way we don't have to decide between a margin top or a margin and for example so now we get some space here which also works on larger screens and I also want to send out this text here but only when we have a flex row right so only on larger screens so we add LG colon items sender item Center is the class for a line item Center in CSS and now it should look good now it looks like this on larger screens but it's responsive and it even gets smaller on small screens until we reach the Min width which we set with 300 pixels earlier okay and I also want to set the metadata of this page by this time I don't want to hot coat the title and the description instead I want the title to contain the product name and the description to contain the description of the product if we want to generate the metadata dynamically we don't export this metadata value that we used earlier instead we have to export another function outside of the products page component function we export another async function called generate metadata and the spelling of the function name has to be correct again otherwise next.js were not recognized as this will return a metadata object which is an import from next again and by defining the return value here we get Auto completion when we later construct this metadata object but since this is an async function we have to wrap this return value into a promise because all async functions return the promise why do I make this an async function well we actually have to fetch the same product from the database in this function here as well in order to get the name and the description of the product we actually can't share data between the page and generate metadata we have to fetch the product in both places but now you might say isn't it wasteful to fetch the data from the database trials and of course it's wasteful this is why we have to Cache this product that we get from our database so that we only fetch it once this is done for you automatically only if you use the fetch function that we have in JavaScript if you use fetch to fetch data from some API then this is cached and deduplicated for you automatically however if we use something like Prisma or XC yours or anything else to fetch our data then we have to Cache it manually if you don't do this then we actually do a two database operations and this of course is very wasteful if you want to confirm this then you can try out fetching the data here twice and lock your database operations which we can do by passing lock to our Prisma client here but I don't remember what you have to pass for the value you have to look this up in the documentation this allows you to lock all your database operations and then you can see that this is executed twice but I already did this so I can confirm it for you in order to deduplicate this request we have a cache function from react which is also pretty new so what we do is we create a const that we can get product and then we call this cache function here which is coming from react to Cache we can pass another async function and the return value of this async function repairs here will be cached and here we basically want to execute this part we want to fetch our product from the database and then return it and for this we need the ID of the product right so in here this editing function that we pass will take one argument the IDS string and then we create an error function like this with a right arrow and a block of curly braces so now we pass this function to the react cache function and in here we can simply cut out this part put it in here and then we simply return this product and now down here where we had this function before we create a const product again but this time we call a weight get product which is this cached function up here and we pass the product ID into this function now we still get the same product but it's coming from this cached value here and now we can do the same and generate metadata and this way this will only be executed once and this value will be shared between these two functions we still need a product ID and generate metadata right and this can actually take the same props as the page so we pass this in here and then we only have to return the metadata that we now can generate from this product information okay so we return a JavaScript object and again since we added this return value here we now get Auto completion for example we can set the title just as we did before but now we can generate the title from the product name and then I want to append this Dash flomas on that's behind it like this I also want to set the meta description to the product description and again we can see this later when we post a link to our website on social media and we will actually do this we will actually deploy our project and then I will show you these previews and I also want to overwrite the open craft image so the image that is shown on social media by default that's this open graph image file that I put in the starting code but we can overwrite this dynamically for a specific page and I want to show the product image instead for this we can add this open graph value to the metadata which again takes a JavaScript object and here we can pass images colon we pass an array this array contains another block of curly braces and here we can set the URL to a product dot image URL again we can't see this right now because yeah only the title is shown here in the browser we have to refresh the page and that does Thornhill slices but you will later see these other values after we have deployed our project okay on this product page I also want to put the button that allows us to add this product to the cart but before we do this I want to create the loading page again I explain this in my next JS beginner tutorial the loading page will be shown when we open a server component and it's still loading because we are fetching all this data before we actually show this page on the screen right this is Alf hatched server side not clientside which means that it can take a while before the page is shown and to not make it feel unresponsive to the user we can add the loading page that will be shown while a page is loading we put this right in the app folder and again the name has to be exact loading.tsx and in here we export a simple component again which we call loading page or loading and from here I want to return another spell with the class names loading which again is coming from this UI loading dots is a different kind of loading indicator then the size loading LG M Oro which send us this loading indicator horizontally on the screen and the last class I want to set is block which sets this to display block this is necessary for M order to work and then we close this and then we have our loading page we should see this in action if we go to the front page again yeah there it was for a short moment but when we click a product we should also see the loading page while the product is loading it wasn't there yeah I think we don't see it because nextjs prefetches these pages but you see it when we refresh the front page right but this will also be shown sometimes when we open a product page or another page okay and the next step is to create the actual shopping cart in our database and add a button with which we can add products to our cart really exciting okay the next step is to add our shopping cart model to our database so that we can actually put products in there so let's go into our schema.prisma file again and we could make the changes in the database first and then use introspection again to change the schema here but it's actually easier to do it the other way around to modify the schema and then push the changes to our database so below our product model we create a new model which we call a card so model card curly braces each model in our database needs an idea so let's copy the ID line from the product model and paste it here this does the same it creates an idea automatically for us of type object idea and we can also copy these two timestamps here so that we know when we created and last updated a card and for the items we put in the cards we create yet another model model which we call card item and we ignore this error message here for now now we could also put the card items as an array directly into the card document but this makes it harder to work with because then we always have to fetch the whole array when we want to modify it even if we just want to change the quantity of a single item also documents in mongodb have a size constraint meaning that we can't make this card item array grow indefinitely now in practice this is probably not a problem but it's still good practice to put these card items into a separate collection in my opinion so again each card item needs an idea so we copy paste this line This is the ID of the document itself and each card item also needs the ID of the product it references right so we know which product is in the card so we create another field below product idea and don't worry about the alignment right now we will reformat this file at the end this is also of type string and it's a mongodb object idea so we write the same as here at the end of the ID line at DB Dot object idea but this product ID is not order generated like the ID of the document itself this is just the ID of the product we put in there then we also need the quantity so we know how many of these products we put into the card which will be of type int and we need the ID of the cards that this card item belongs to and a card then belongs to a user so we add another field below card idea which again is a string that contains a DB dot object ID okay let's format the document to align everything properly again on the nose that's shift IDF if you are on Mac or Linux you can also search for the format document shortcut here but right now we are just storing these ideas it's also useful if we tell Prisma what model these IDs belong to because this makes it easier later to work with for this we can use relations so what we do is below the product idea we also write product which will be of type product and product is our product model up here then we write add relation and between the parentheses we write Fields colon pair of scrap brackets and then we pass our product ID on which is this field up here that contains the idea of the product after the closing square bracket we write comma references let me make this big idea that's the ID field of the product here so that we know that one product idea is connected to a the ID of the product and now when we press the formatting shortcut I think Prisma should add something to the product model as well and of course reformat our code so shift IDF and it added this card item array to our product model this is the counterparts to this line down here so they always belong together because now that each card item references a product we can also fetch all card items that contain a product through the product model and if we deleted this line then we actually get an error because they always belong together and then we want to do the same for the card so we store the card ID here which belongs to a card document in our database So Below we write card off type card and again add relation which Fields does it reference the card idea which belongs to the idea in the card model again we press the formatting shortcut and it adds this line to the card model and this one here is especially useful because this allows us to fetch all the card items with all their product information that belong to a particular card this is important later to fetch the whole card with arlet's data but I want to rename this field I want to color adjust items and put it here above the timestamps and I also want to rename the collections again lowercase and plural because that's convention for mongodb so again below we write add add map and the name of the collection which will be cards and the same for the card items here since they are their own model they live in their own collection card items in our lowercase one more thing we go to our product relation in the card item again after the references field write comma on delete in camera case like this and then Cascade with an uppercase C what this does is if we delete a product all the card items that contain this product will also automatically be deleted because we can't have an item in our cards for a product that doesn't exist anymore right that's it with the changes in our model for now so again let's reformat this let's save it and then we have to push the changes to our database so we open the terminal and stop the execution of our Dev environment then again as I mentioned in the beginning we run npx Prisma DB push which pushes these new changes to our database here you can see what it does it created two new collections for the cards and the card items so let's take a look into our database here here we have two new collections and if we set up any special indexes also in our model then this will also push to the database with npxdb push but right now of course these collections are emptier so let's go back into our project and then we also run npx Prisma generate to regenerate our Prisma client so that we have our new models available on the Prisma object and can make database operations so now when we take a look at the place where we use our Prisma client like here for example and use all the completion we now have the card and the card item here available as well this is what Prisma generate does it creates a newer Prisma client with the correct schema inside it okay let's run the development environment again and then we want to add a button to our product detail page to add this product to our cart and then we want to put this button on our product detail page here below the description but this time I also want to have a success message so after we added a product to the card I won't have a little text that there's a product edit or something like that but the use form status that we are used in our form submit button here only contains this loading state it doesn't contain a success State at least not yet they might add this in the future but for now we have to handle the success State ourselves and since this is State we can only do this in a client component because only a client component can contain State this is why this time we can't execute our server action in a server component but what we can do is we can wrap all of this logic into the button itself so that only the button has to be a client component and the product page itself can stay a server component because again server components are more efficient since we will only use this button on this page let's put it not in the components folder but right here in the product ID folder right next to the page itself because in the next JS app router we can colocate these files with the pages we call it adds tour card button dot TSX and then in here we create a client component with the same name to this add to cards button we will add the ID of the product that this button belongs to so we create an interface for the props and in here we put the product idea in form of a string and then we pass this to the component and then let's set up the layout of this button so we put the return block here we wrap this all into a diff because next to the button will be the success message and to align them properly we set the class name to flex items Center and GAP tour for some spacing and into the diff we put the button itself which we Style with BTN BTN primary we set an onclick Handler on this button but for now we just pass an empty Arrow function like this because we will take care of this later then we close this button tag and set the text to add to cart before we continue let's save this and put this button into our layout to see how it looks so on the product ID page we put the button below the description add to a card button and for the product idea we pass the ID of the product that we load on this page and there's our button I also want to put an icon in here a shopping cart icon and I have to copy paste this because this is an SVG there it is again I will link this in the description below and you can copy it from there you can also leave this out for now it doesn't matter the text here is enough and now again we want to handle this action via a server component because this way we don't have to set up an API route Handler and instead we can just call a function in our code right here but we can't declare server actions inside client components so we can't put the action directly here into this file however you can still import server actions into Clan components that's possible you just have to declare the server action in a separate file so let's put this file into the same folder here in the products idea route new file and the naming convention for this is usually just actions but you can give this any name you want and here we put the server actions that belong to this route remember when we created the server action on the add product page we use this use server directive here at the start of the function since this file will only contain the other actions we can put this all the way at the top this way we only have to declare at one time and not in each function if we added multiple functions to this file okay and then we export an async function let's call it increment product quantity because this is what this function does right and it takes the product idea as an argument and I have a very nastier typo here at product quantity No it should be correct in here we want to fetch the cards or create one if it doesn't exist yet but we haven't set up functions that let us create or modify a card yet and since we want to work with our cards from different places we don't put these database functions right in here we put them into a separate file so that we can reuse them this time we put them into the lip folder and here into a Debian let's create a new file called card.ts so here we put database operations on our card that we want to reuse in different places but those are not server actions those are just functions we use in our server actions so we don't have to put the your server directive here at the top let's start with the function that creates a new account so export async function create card doesn't take any arguments and in here we create a const new card and then we call away to Prisma which again we import from the Prisma file in the lib folder Dot card dot create I think this is safe explaining and we want to create an empty cart so for data we just pass an emptier pair of curly braces because we don't want to put any data in there yet we just want to create an empty cart but it will contain the timestamps now later when the user is logged in we can connect our cards to a user account but if the user is not logged in we also want to support Anonymous cards right but how do we later find this card in the database how do we know that the user belongs to a certain card if they are not logged in for this we will store the ID of the card in a cookie in the browser of the user and later we can read this cookie to get the correct card again and we can do this with this cookies function from next.js we can call this with parentheses and then we have this set function there and then we give this cookie a name I'm gonna call it local card idea but you can give it any name you want and in here we want to store newcart.id and as simple as that we can set a cookie now in production you should make this more secure you should encrypt the card idea because a user can modify the cookies and this way they could just guess the idea of another card and if they are successful they could change the contents of the card of another user theoretically of course the damage of doing this is lower but in a real production app you should take care of this and the cookie itself also needs some additional security settings but I skipped this step here for Simplicity because it doesn't really add anything to this tutorial and it only matters if you really want to deploy this eCommerce website to production otherwise this here is enough and I will leave a comment as a reminder so if you are interested in this you can look this up and Google those are just some additional steps you have to do but it shouldn't be too complicated and then we also want to create a function that gets the card from the database you can put it above or below does metal export async function get card again it doesn't take any arguments here we want to get the card idea out of the cookie because we are still working with Anonymous cards so let's create a const local card idea cookies dot get this time and we of course pass the same cookie name as a string and out of this we can get a value this can be undefined because the cookie might not exist this is where it adds the safe call operator and Below we create a const card equals we can only fetch the card if we have the local card idea so if it is defined it's a rewrite local cut idea question mark to use the ternary operator if the local card ID is defined we want to assign the cars to a weight make our database operation so press my DOT card dot find unique to find the card by its idea then we add the swear clause where idea colon is the same as the local cut idea from the cookie and then we can do something really cool so by default the card doesn't contain the card items right because we don't store them as an array in the card model they are in a separate collection similarly the card items don't store the product information the products are also in their own collection and this is really important because if we update the information of a product for example the price or the description then we also want these changes to be reflected in the card items and in the card right we don't want any stale data in our card because this would be a terrible user experience instead we fetch this product information only when we need it but when we make our query here we can tell Prisma to put the card item information into the cards that we fetch from the database and put the product information into the card items and it works like this after where we put a comma and then we add include colon curly braces then in here we have items which refers to items field here in the cards model now we could write column true this way we would put the card items into the card that we fetch from the database but remember that the card items don't contain the product information yet only the product idea to go one level deeper we don't pass through instead we pass another block of curly braces and in here we can write include again to include the product information into the cut items so again include colon and in here we have the product and then we set this to true this might look a bit complicated at first but other completion helps you here so just press Ctrl space or command space and you will see what you can include and what operators you can use but again this way we don't only fetch the cards with the ID and the timestamp we also put the card item information in there and we put the product information into the cut items so now we have our full card with all the latest product information inside but we are using the ternary operator here so we also need a colon afterwards let's put it here if the local card ID is missing we want to return null here because then we can't fetch a card this is below we check if exclamation mark card if it's null then we want to return null from this function and if the card exists we want to return the card but I don't only want to return the card I also want to return some additional meta information I want to return how many items there are in the cart right now and what's the current subtotal of all the prices combined so we don't just return the cart we return a block of curly braces to create a new JavaScript object and here we first of all spread the card to put all the card information in there and then we add additional Fields one is the desires and for this we have to do a little calculation because we can't just use cuts.length because we don't store a separate card item for each item we put into our cart instead we always have a product and a quantity so we have to calculate the size we can do this with cart dot items dot reduce is just a JavaScript function and this takes another function as an argument where we get the accumulated value and the next item in the list and then we can calculate the total quantity for this we take azzm but this is just a naming convention you can name this anything you want plus item dot quantity so it goes through each element in our array and it adds the quantity to the accumulated value so that we get the total quantity at the end and that's the second argument after a comma we have to pass the starting value I think which is zero okay so again reduce is just a normal JavaScript function that you can use for stuff like this and then we also want to add the subtotal for which again we use the reduce function card dot items dot reduce again we get the accumulated value and the next item and then we want to make our calculation acz Plus item dot quantity and we want to multiply this with the price of the product right to get the total price item dot product dot price and again comma and zero as the starting value now it would be cool if we had a type for this object because we want to return an empty card from create card as well with the same structure and it's always good to set up a type so that we get Auto completion and we know what Fields belong in there right we can create the type above we could also put it in another file but it's closely connected to these functions so I think it makes sense to put them here we don't use an interface we use a type because again I want to combine two types with an intersection and I'm going to call it shopping count shopping cart and not just cards because card is already the name of the card model in the database we want to use this card and combine it with the size and the subtotal that we add down here so we add an Amazon sign to create this intersection type and then a block of curly braces and then here we put the size of type number and subtotal of type number there's just one problem this card type here only contains the data that is in the card model the ID and the timestamps it doesn't contain the card item or product information and by default press my doesn't give us this populated type we have card item but this is not populated with the product information but we can create these types ourselves and Prisma has convenience functions that we can use for that so above the shopping carts type we export another type and we export them so that we can use them in different files later let's call it card with products because that's the card with all the product information in there and then we can use Prisma with an uppercase Pier we have to import this dots can't get payload and then we add a pair of angle brackets like this in between the angle brackets we put a block of curly braces and then we add the same include query that we also have down here and we paste them between these curly braces and this creates this type from this Caribbean so now we have a card with all the populated items in there that contain the product information and then we can use this down here as the type for our shopping cart and now we have a shopping cart with all the data inside it and this additional size and subtotal value and this is the same structure of the object we return here so let's add an explicit return type to get card this is just a good convention so that you make sure that you always return the correct object so after I get card rewrite colon and again we have to wrap this into a promise because this is an async function and we return a shopping cart or another if the cookie is missing and then as I said we also want to return an empty shopping cart from create card so that we can work with it so we add a return type here as well again a promise of type shopping cart and we get an error because we are not returning anything yet we will do that below after we set the cookie we return an object and now since we defined this return type we get Auto completion here which is really useful the card information so the ID of the card and the timestamps are contained in this new card object right so we spread this in here just like we did for the other card above for the size we simply pass zero because the new card is emptier and for subtotal as well just so that we have a cut to work with in our app but this day complains because the data of this card is emptier so for items we just add an empty array okay let's format and save those and then we can use these functions in our server action file in increment product quantity here we want to fetch the card from the database so that we can modify it so we create a const card equals a weight get card which is the new function we just created but if we get back now here we want to create a new card because a card might not exist yet if we open the website we don't create a card immediately we only create it when we actually modify the card so that we don't bloat our database with empty Anonymous cards so we add two question marks which means that the right side will be executed if get card returns null or undefined then we want to await create card and this also gives us a new card back right just an empty card when we reformat this file prettier automatically adds parentheses around these cards but I think they should not be necessary the logic should be the same this is probably just for readability so now we have our card and when we click our add to cart button we either want to add this product to the card if it doesn't exist or if it's already in the card we want to increase the quantity so we check if the article is already in the card let's create a const article in cart equals and then we want to find this item in card.items so we can use the find function which again is just a normal JavaScript function this passes us each item in this array and then we can check if an item with this product ID is already in the card so we check item dot product ID which remember is part of this schema so each card item contains the product ID and that it references if this product idea is the same as the product idea that we passed to this increment quantity function then we know that this item is already in the card and then we want to increase its quantity if not we want to put a newer item into the card So Below we check if article in cut we want to update the quantity of the existing card item so we call a weight Prisma which again we have to import Dot card item dot update to which as usual we pass curly braces here we first have to type Prisma which item we want to update with this where keyer to which again repairs curly braces and in here we have the idea that we compare to an article and cut dot idea because this is the one we want to update right comma and as the second value we pass the data of this update as usual we get Auto completion here we want to update the quantity again curly braces and then we have this increment value that we can use we want to increment this by one now we could also update it with the current quantity plus one this would have the same effect however I think increment avoids race conditions if you updated from relatively places but this shouldn't make any difference here because no user will update their card from many different places at once right but if we have this increment function available then we might as well use it okay so we increment the product quantity of the existing cards in the else block if the item is not in the card yet then we want to create a new card item so we call a weight Prisma Dot card item dot create this time and here we only have to pass the data we want to set the card idea to the idea of the cards that we are fetched again the card ideas part of our card item model here so that we know which card this item belongs to so we set a card idea then we want to set the product idea of the product we are adding now instead of writing product ID column product idea we can also use the short syntax if the value has the same name as the key and we want to set the quantity to one but there's one more thing we want to do here after this operation is done we want to refresh the screen so that we see the latest number of items in our cards in Enough by later for example but we are working mostly with server components so we don't have any state in there that we can update instead we can refresh the whole screen basically and the way this works in server actions is you call revalidate path with the path that you want to refresh which will fetch the latest data string off the path we want to update we want to update the slash products slash scrap records and the idea like this this is the path of the product page right we have app products and ID and scrap records and this is the path we want to refresh notice that this string contains the path and not the URL so we put the same ID between square brackets and here as we also have in the folder name because this is not the actual URL this is the path it has in our file structure and later when we use this server action this line here will take care that the screen refreshes with the latest data and we want to call This Server action in our add to cart button right now normally we could just import the server action here and use it in here this works even when this is a client component however there is currently a bug that makes this approach not work with next off that we will later Implement later we will not only have the anonymous card right we will also fetch the current user session when we get the card from the database and this currently doesn't work in server components that you import directly into client components this is a bug they will eventually fix this but for us right now this means that we can't import our server action right here in this adds to cut button component but what we can do instead is we can import it in the server component so the page itself and then we can pass the server action as a prop to the adds to cart button so we just pass it as another argument just like the product idea so let's do it like this let's add another argument to the props which we give the same name as The Silver function we just set up increment product quantity the name doesn't have to match but it makes sense because this is what we expect right so this is a function that takes in the product idea and it doesn't return anything so we write it like this colon product idea of type string and the return value of the function is a promise of type void promise again because it's an async function then we'll add this function down here where we destructure the props and then we want to call those when we click the button right so inside this on click block now the documentation about server actions state that when you call them from a client component you should wrap them into a use transition use transition is a relatively newer react hook which you can look up if you want but they don't really expand in the documentation why we have to use that here it's not really clear they just explained that we have to use it I spend a lot of time trying to figure out why because this is not really explained anywhere yet at the moment but I eventually got an answer on Twitter so I asked here and Tim is part of the next JS team so he should know start transition bounds the error that happened in the transition to the component where your card use transition this ensures that server actions when cut manually Do Not Crash the entire page so in a nutshell this means that we have to wrap this into a stats transition so that any error that happens in the server action is forwarded to our own error page which I think we haven't set up yet but we will do this later in other words the error is handled properly and doesn't crash our app and also when we use start transition we get this loading State here that we can use to show a loading indicator so let's go back into our project and implement this so we need this use transition hook that we can initialize here at the top so const and it returns a topic just like you said the first value is usually called is pending which is true while this transition is running and the second argument is usually called start transition you can give this any name you want but those are naming conventions and then we initialize this with this us transition hook which is a react import normally the purpose of use transition is to not block the UI when we do a state updates but this doesn't really have anything to do with our server actions here again in our case this use transition is necessary because we call a server action from a client component and this takes care of handling the error and the loading State properly this is what I showed you a moment ago but I also want to create a second state when our operation was successful we want to show a little message right so we create another toolbar that contains the success and set success and we assign this to a U.S state not use transition this time but use State make sure that it adds the correct import and reinitialize your state with faults which automatically infers this as a Boolean and then in the onclick Handler of our button first of all we want to set success back to false to hide the success message when we click the add to cart button again then we want to call the server action and again we have to wrap this into a start transition which is this part that we get here this is a function that takes another function as an argument in here we write async and add another arrow function like this async because we want to await our increment product quantity function which is an async function this one here we call it weight increment product quantity and pass the ID of the product so this is our server action that we pass to the clan component and then after this is done we want to set success to true to show the success message this is all happening inside start transition okay so now we have a loading stage through its pending and we have a success date from our use date now let's render a loading spinner and a success message in the UI when these values are true we do this below the button but still inside the stiff and we already styled this div to a flexbox that centers the items so this should be aligned correctly and here we put an expression with curly braces and first we check if s pending is true then we want to render a loading indicator which again we do with a span that gets a safe closing tag and for the class name we use Daisy UI classes as we did earlier loading to turn this into a loading indicator and loading spinner yeah to make it a loading spinner and we can set the size with loading minus MD and then another one below this time we want to check if success is true to show the success message but success will actually be true before we have revalidated the path so before we reloaded the page which remember we do in our server action we can't revalidate path here and this happens after the server action has finished however this is pending value will be true until the revalidation finished so what we do is we combine these two values down here we check that is pending is back to false with exclamation mark is pending and success is true only then we want to render the success message which again we put into a spin it will say added to cart you can add any text you want and reset the class name to attack success which again is a this UI class that just gives us a green color okay and now we only have to pass our server action from our page to our add to cart button and one more time to recap normally we can import server actions in client components this is not a problem but here we have to pass it as an argument because there's currently a little bug that happens when we later use next off to get the locked in user session this is where we passed the server action as an argument instead so to add to cart button we have to pass increment product quantity which we import from the actions file and then we should be all set up to try this out let's refresh the page just to make sure when we click the add to cart button we should see a loading spinner for a short moment and then we should see a success message right add to cart as the loading spinner added to card now there was a little glitch when the page reloaded but this glitch only happens in development because it's reloading the font for some reason but in production there is no glitch so it doesn't look as if we just refresh the page instead the image and the text will just stay in place and only the parts that have to be updated will refresh with the latest data but there is no glitch in the UI it will look as if we just updated some State and now we should see this item in our database right let's look in the card items collection and refresh this and there's now one product in here with a quantity of one and it also contains the ID of the card where this is added to us so 901 were the last digits and it's the same idea that the card in the card collection has let's try adding the same item again and see if we increase the quantity instead of adding a new entry here so again we click this button we see our loading spinner and let's refresh the database quantity to a perfect there should also now be a cookie set in our browser with the same card idea so this ends with 901 let's remember this open the Chrome Dev tools with F12 and we can see the cookies here in the application tab we can click here on cookies and on localhost and there's the local card ID that contains our current card ID and this cookie will still be there when we close the page and open it again and this allows us to fetch our Anonymous card even if we are not locked in so this is really professional this is also how big eCommerce website actually do it they store the identifier for the card in a cookie if we delete this cookie and add another item to the card then it should create a new card right because then the identifier for the card is missing let's try this out let's delete this code here just with the delete button and Let me refresh the page just to be sure that the changes are applied and click add to cart again and then in our database we should see a new card and there it is and now we have a cookie for this card ID instead now later I will also explain to you how you can delete cards automatically if they haven't been updated for a while so that we don't accumulate a lot of abandoned cards in our database right but for now let's ignore this now of course we could also get rid of this loading State here and let the database operation run in the background but for something like a shopping cart it's actually better to have a loading spinner and then a success message so that the user has a confirmation that the item was successfully added to the card because if they click add to cart and then navigate away and then the item wasn't actually added to the cards for some reason maybe it through an error maybe there was some other problem then it's a bad user experience if they don't actually see the item in the card this is why for an ecommerce app it's actually better if there's a loading spinner and a success message after the operation has finished and this is also how Amazon does it by the way let's also add another item just to see that this works as well a green bottle for example again adds to cart edit let's check the card items collection and now we have one of these bottles in here which would be this one this has the product idea 588a which should also be the idea of the bottle here here 88a now at first I was worried about race conditions when we click this button multiple times in a row because this also creates a new card when we don't have one yet right and we want to avoid accidentally creating multiple cards because we hammered this button multiple times in a row but when you try this out you will actually notice that these server actions are executed in succession so even if we click the add to cut button multiple times it will first execute the first server action and after this has finished it will execute the second one which then increments the quantity so there is no raise condition at least this is how it works in the moment again server actions are in Alpha maybe they are changing this behavior in the future but at least for now this works exactly like it should work let's actually try this out as well let's delete our cards for a moment we can just delete the whole collection it will be recreated when we create a new card and let's do the same for the card items gonna refresh the pitch and then I click adds to cut fast two times in a row and it should create only one card and then increment the quantity of the existing item to two so click click two times let's check our database let's refresh this zor there should be one card and one card item with a quantity of two so this works there is no race condition and our app works fine okay cool later we will add our card page where we can change the quantity of the existing items so then we will use another server action but for now let's add enough bar and the photo to our page so that we can navigate between our different pages and also show our cards and navigate to our card later okay before we set up our navbar I want to make one more little change to our schema file I want to add on delete Cascade not only to the product but also to the card here in the card item model so again comma on delete colon Cascade with the spelling because now when we delete a card all the corresponding card items will be deleted as well which I think makes sense all right and then we want to set up the navbar that we put at the top of our page so that we can navigate between different pages and we don't have to type in the URL all the time we could put enough bar into the components folder but since we use it throughout our whole app I like to put it directly into the app folder here in here we create a new folder called navbar because we need multiple files in there and the first file we put in there is navbar.tsx of course we used the navbar provided by a Tailwind UI you can find it in the documentation there are different variations you can find the code of it but the one we are building here combines different elements of this page into one we use the shopping cart item we use the search box so let's go back into our project and Export a default function foreign statement let's start building the UI of the snuff bar we start with a div which we give a background color with the class BG minus base minus 100. before we continue let's save this and then put it in the UI and we want the snuff bar to be a visible on all pages throughout our website so we put this in the root layout it's part of the HTML body but not part of the main tag so above the main tag we just render our navbar and save it let's see if we can already see something in the UI not yet but we will see something when we put content in here into this order diff we put another div to which again we add some class names so the first one is navbar which is coming from this uium and this adds some CSS attributes to a style dislike enough bar then I want to give the snapbar the same Max squid as the content of our pages so that the elements of the navbar don't stretch out throughout the whole screen so again we use max w7xl that's also what the value that we used here in our layout for the main container we use the same one here and this is why I wrap this into this order div which applies the background color of the navbar because I want the background color to take up the forward but the contents of the navbar be constrained within this Max squared field and to send that is on the screen we add a margin Auto then we make this nuff bar a flex column the flex class is not necessary because that's already included in the navbar here Flex color means the elements will be aligned below each other but we only want this to be the case on small screens so we add a break point here as M so on small screens and higher the only value below as m is XS so Flex coil will be applied on XS screens so on very small screens and on slightly larger screens SM and larger we want to set this to a flex row so the elements are aligned horizontally and then we also add the gap of tool to get some space between the items you will see how this looks in a moment after we added items to our enough bar so the first item I want to put in the navbar is the logo and the name of the website which we wrap into another div which we give the class name Flex 1 this adds this Flex one one zero percent attribute which defines how these items stretch over the available space of the navbar then in here we put a next link so that we can click this item and navigate to the front page so we set the edge ref to just slash as a string to get to the home page and inside this link we put a next image that will contain the logo of the website again make sure the import is correct we set the sr0 to the logo which I already included in the starting project if you are not using the starting project then you can get the logo out of the project on GitHub twin srz should be an assets folder and in here is the logo which I prepared we have to import this here so import the logo from at which is the root folder in here is the assets folder and in there is logo.png that's what we want to use for the image source and then we want to resize this to a 40 pixels times 40 pixels entries that the alt text to A flomazon logo and then we close this okay let's save this and see how this looks so now we'll see our enough bar with this logo in there and I also want to put some text next to this logo so still inside the link but below the image we write flomazon but I want to style this properly else we add some class names directly to the link we make this a button or rather with status as a button it's still a link button ghost gives this a certain styling that looks like this looks pretty cool we make all the text in here larger with text XL but the button automatically makes this all uppercase we can revert this with normal minus case and those are all tailwind and Desi UI classes so now we have this link here with the logo and the name and when we click this we get to the front page really cool okay below this diff here so the flex one div we put another div which will contain the search field and the shopping cart button but those will be aligned on the right side whereas the logo is aligned on the left side so Flex 1 basically makes this part here grow to all the available space and it pushes these elements that we put into this div to the right side to this diff below we add the class names Flex none and GAP 2 as well to get some spacing in here then in here we want to put the search field for which we use a form so we put a form in here and we will use Observer action to execute the search again into this form we pass a div with the class name form control and again I'm getting these class names from the Desi UI documentation we close this div and add an input field in here which gets a safe closing tag as usual we give this input the name search query we set the placeholder to search entry status like we did earlier on the ads product page we make this an input with the input Borat styling then I want this input field to take up the full available width with W minus four but the width will still be constrained by the text that wrap this input field and then I also want to set a Min width of 200 pixels so that we can't shrink the input fields to a very tiny size where we can't use it anymore and again we can use an arbitrary pixel value like this and when we saved us we see our input field and the snuff bar should now also be responsive right so at a certain size they should move below it and it works but the input Fields doesn't get too small at a certain size it will just say no I don't want to shrink any further and this happens at 100 pixels and to execute the search we will use a server action again and since this file is not a client's component we can just declare the server action directly in here so we create an async function cut search products and the same as on the add product page this takes form data and at the top of this function we add the use server directive then we want to get the search query out of the form data so we create a const the search query and we have done this before we call formdata.get past the name of this input field which is search query and then recode to a string to turn this into a string and then below we check if search query has a value because we only want to execute a search if there's actually something typed into the input field then we call redirect which we import from next navigation make sure the import is correct and we want to navigate to the search page which we haven't set up yet but we do this later the URL will be a slash search and we will pass the search query as a URL query param so we add a question mark query equals without the space and then we append the search query value the cool thing is that redirect also works in server components and server actions so we can execute this in here and it doesn't require any JavaScript so our search will work even if JavaScript is disabled which is always nice to have and to execute this when we submit our form we do the same as we did earlier we set the action to the name of our server action search products now if you are experienced with HTML then you might think we could also just pass the URL that we want to navigate tour to the form action instead of doing this detour through the server action so we could just put this part here directly down here and remove the whole server action altogether however this would reload the page which is a very jarring user experience with our approach here we are not reloading the page we have this very resolved navigation we had enough bar and everything stays in place and this just looks and feels better than using the normal URL action okay but the button that shows the shopping cart will have to be a client component because it shows a popup menu and in order to show and close this popup menu we need JavaScript we don't get around this so to not make this whole enough bar a client component we put this into a separate file and we put this into the same love buff holder here let's color it a shopping cart button and Export a component with the same name as usual now to this shopping cart button we will pass the card itself so the shopping cart that contains the data of the card but we will fetch the card in our navbar because this way we can fetch it server side and we don't have to use a state or anything like that we just pass it to our client component here so at the top we create an interface the shopping cart button props which will contain the card which is offtype shopping cart that's the type we created earlier with all the card item and product information inside account so we import those from the lib folder but this can also be neither because we might not have created a card yet okay and then we pass this card to the component so here shopping cart button props Andrea destructure the card out of there and then rear return some UI here the order element is a div which we give the class names drop down and drop down and which again are these UI classes for now let's save this and let's put this shopping cart button into our navbar so first we have to fetch the shopping cart right we can do this right here because this is a server component but we have to make this an async function then we can create a const card and call await get card from our lib folder and now we have the card data and we can pass it to our shopping cart button we put a shopping cart button here right below the form opening angle bracket shopping cart button and it expects the card which we already fetched then let's finish the shopping cart button so back into this component and most of the mark up here is coming from the daisy UI documentation I just copied this for the most part in here we put a label which we give the tab index 0. the top index is necessary so that we can use tab to navigate between items which is necessary for accessibility we style those with BTN ghost and BTN Circle which makes this round yeah and the normal BTN class which is the base button styling we close this label tag then we wrap this into another diff to which we add the class name indicator because this way we can have a little batch on our cards button that shows the current number of items in the card then in here we copy paste the same card icon that we also use on the add to cart button here so you can either copy paste it from there or copy paste it from the GitHub repository when we save this we already see a discount I can hear and to add some number to this indicator here we go below the SVG but still inside the stuff and add another spin which contains the number that we want to put in there so we add an expression with curly braces what do we want to put in here we want to put the card size in there which is part of the shopping cart type right so when we fetch a card we return the size that we calculated earlier and we want to display the size here if this value is undefined because a card doesn't exist yet then we want to file back to a zero and when we left us it's not styled properly yet we have to add the class name to this pen as well the first one is batch then batch s m for the size and indicator minus item now when we save this this is styled properly and looks really cool doesn't it and this always reflects the actual number of items in our card so when we are add another item this will switch to a three after this has finished loading and number three but we also want to show a drop down menu when we click this item so we go below this label here and add another div again the stiff gets this Tap index zero value and some class names to style this the drop down will be stayed like a card then we have drop down content and again you can find instructions on how to style these elements properly and the devs the UI documentation then we add cards compact which adds some size styling we need a margin top we need a width which we set to a w minus 50 to 1 this is just the width of this drop down menu we need a background color with BG base 100 and we can add a drop shadow with the shadow class and one more class Z minus 30m this sets the Z Index this takes care that this drop down menu is not hidden behind other elements so it's on the foreground okay then we go inside this div and put the contents of this drop down menu in here again we need another div this is just unfortunately how HTML works it's stiff within divs within divs we style this with the card body class and in here again I want to show the size of the cards and also the subtotal so the total dollar amount of our items combined right now so inside the stiff we put a spin with the class names text LG for the text size and font bold and this was there number of items so we add an expression and then items behind an index expression we want to show the card size again or file back to zero if we don't have a card yet and when we click our button here we already see our drop down menu now let's add a subtotal below as another spin which we give the class name text info this changes the text color and in here we write subtotal colon and then we want to show the price which we want to format remember for this we have this format price function that we created earlier to this we want to pass card dot subtotal which again we calculate when we return the call again this might be undefined in this case we want to file back to zero again okay save this now we have this value in here as well and it's actually the correct value so this is correctly calculated one more thing I also want to have a button in here that brings us to the cart page where we can then modify our account right So Below the subtotal span we put another div with the class name card actions this is for buttons that we put into this menu but we don't use a button we use a next link again because we are linking to another URL but this import here is wrong we don't want to import it from this dist folder we want to import it from next slash link sometimes Auto Import doesn't work for whatever reason but the curly braces are wrong we have to remove them because this is the default export okay so this link will lead us to a slash code again we haven't set up this page yet but we will do so later we'll style this link like a button with BTN a primary button with BTN primary and to take up the full width we add BTN block and this button was there viewer card so now we have this button here that brings us to the cut page which doesn't exist yet now since this page doesn't exist this drop down menu closes when this page is loaded for some reason but if we adjust for a moment change this to a page that does exist and click this button again then you can see that the drop down does not close automatically we actually have to handle this ourselves this is why we need JavaScript unfortunately we can't close this drop down menu without JavaScript so make sure you set the href back to slash card and then we add another prop to the link we want to set the on click Handler here and we want to call close drop down and we put this function here above the return statement so we create a function that we give the same name and what we want to do is we want to remove the focus from this button here because this is what opens this drop down menu the way we do this is we get the currently focused element like this document DOT active element and you have to do this with these days UI elements you have to handle closing this drop down menus yourself then we have to cast this to an HTML element then we have to check if we found an element we want to remove the focus which we do with lm.blur now when we save this we will get an error because on click requires this to be a client component because onclick needs JavaScript so at the top we make this whole shopping cart button a client component saved us and then it should work again just for testing purposes I let this link us to the home page but I set this back to the card page in a moment and now when we click this button we get to the home page and the drop down menu closest okay revert the spec okay our enough bar is finished this is really cool because now we see the actual shopping cart data in here next we want to set up the cards page where this links us to but before we do this I also want to add a simple photo to our website just so that it looks more complete so let's put the folder into the app folder as well because it wraps the whole website photo.tsx and this time I'm just going to copy paste this whole thing because this is just some dummy markup I actually copied this right from the Desi UI documentation and I will put a link to this file in the description below as well so you can copy paste it from there but again this is just some placeholder and then reporters into our root layout below the main content we render the photo here safety and there's our beautiful professional photo that's also responsive by the way this looks really a like right out of amazon.com okay there's one more bug I want to mention right now again these server actions are still in Alpha so they have some bugs we have to wait until they are fixed right now while a server action is running we can actually not navigate to another page over a link to try this out for a moment I want to edit the layer to our increment quantity action again I will remove this in a moment so here I await a new promise and I'm trying to remember the syntax of this you don't have to write this this is just to show you something I just want to create an artificiality layer which we can do by a wedding a timeout so let's say we delay this for three seconds just for testing purposes now when I click this add to cart button this will take over three seconds to finish and while this is loading we can actually not navigate to the front page over this link so this is loading and I click this link and nothing happens but the short work we only navigate to the front page after this has finished but this is a bug in server actions right now so we just have to ignore this for the moment there are discussions about this on GitHub and I'm sure they will fix this eventually but just that you know that this bug exists so I want to remove This Promise here again and then we want to set up our cart page all right let's set up our cut page so we navigate to a slash cart when we click our view cards button here this means we need a folder in our app folder with this name card and in here we put a page.tsx and then we export a default async function entry colored card page then rear return the UI rewrap this whole page into a div and in here we put the headline that says shopping cart or your card or whatever you want to put in here entry style this we set the text to a 3XL we make it bold and add some margin bottom let's see how this looks view card and there's the title we can also add some metadata to this page as usual by exporting a const metadata static metadata here is enough we don't need Dynamic metadata and we set the title tool your card Dash and this changes the title here in the tab okay so the card is a server component meaning that we can fetch data in here we want to fetch the card so that we can show it on the screen right get card from our lip folder and then I want to list all the card items as a vertical list here on this page with the price and the subtotal and the image and everything so here we put an expression we take cut dot items which remember contains also the product information because we return our populated shopping cart so all the data is contained in this items field and then we want to map each card item into a UI element this UI element will also contain the server action which allows us to change the quantity of an existing card item Zoo for organization let's put this into a separate file and we can colocate this with the card page here let's call it card entry dot TSX again this will be a client component because we need JavaScript in here and then we export a default function with the same name now to this component I want to pass a Zinger card item so one of these card item entries here but I want the product information to be inside it right this is already taken care of by returning the shopping cart here from the get card function but we don't yet have a type that we can use for this argument so let's go back into the card file in our lib folder again where we created this card ref products type we also want the type only for this part here for a single item that contains the product information so let's add a second type below that we create in the same way we export a type that we call a card item with product again we create it with Prisma this time card item get payload not cart get payload but card item then again angle brackets curly braces and in here we put the query that is required to populate a card item which is include colon and to even get out the completion product colon draw so we want one card item with the product information inside it okay we saved this we export this type and then we can use it in our cart entry here we create an interface for the props as usual card entry props we need one card item which is of type card item with product that we just created so this is one card item with the quantity but also the populated product then we add this prop down here card entry props and 3D structure the card item out of it and then we can show this card item in the UI so let's return a div in which we put another div because below the card entry we also want to put a divider which is just a vertical line So Below this inner diff we put another div with a selfclosing tag that gets the class name divider which again is coming from Daisy UI and above in the stiff we put the actual product information so this div here at the top needs some classes Flex wrap which is required for responsiveness so if there's not enough room then the elements will automatically move below each other we want to Center the items and give it a gap of three then in here we put the product image as usual as the next image we set the sr0 to the image of the product but we don't want to write card item dot product dot all the time so we can destructure this card item further with colon curly braces and we care about the product and the quantity that's the data we need in here and then down here in the image source we can just write product dot image URL for the alt text we use the product name again we set the width and the highest to a 200 pixels and we make the corners of this image rounded with rounded LG then we close this before we continue let's save this and add it to our map function here so we map each card item to one of these card entries to which we have to pass the card item of the snap function and again since this is a list we also have to add a keyer with a unique identifier which is we can use the ID or the product idea shouldn't matter and then we already see our product here really cool let's finish the cut entry layout and add the remaining information So Below the image we put another div then we add a link here because the name of the product will also be a link to the product detail page but Auto Import didn't work so we have to import this manually import link from next slash link we set the href of this link to a slash products slash and product idea because this brings us to the detail page and I want to set a class name to font bold and then this link will just contain the product name and the others right below this link I want to render the price of the product of a single item so in a different rate price column again we use our format price function to which repairs product dot price there it is that's the price for a single green bottle then below the stiff I also want to show the total price so the price of one item multiplied by the quantity so we add another div here with the class names Flex item Center and GAP tool and here we write total column and again we want to format the price but this time it's product dot Prius multiply it by the quantity it's not a product or quantity it's just quantity because that's part of the card item so the total price is 15.96 which is also shown in our card drop down okay and I want to show the current quantity between these two diffs here but I also want to add a drop down manual with which we can change the quantity so we go below the price but above the total and here we add another div but we are almost done again we need some class names we need some vertical margin my one we make this a flex box with item Center and a gap of tool okay then this was a quantity column and in here we put the select which creates a drop down menu in HTML then we need options for this drop down manual I want to have the numbers 1 to 99 in there so that we can change the quantity for this we need an array that contains the numbers 1 to 99 we create this array above the return statement we create a const quantity of options this will be of type jsx element but an array of jsx elements and we initialize this with an empty array yjsx element because we want to put these option tags in there which are HTML elements and we can put them into a jsx array but we want to do so in a loop that goes from 1 to 99 so we'll write 4 and create a normal for Loop let I equals one that's the number we start with I less than or equal to 99 semicolon I plus plus this is just a normal for Loop in JavaScript and for each iteration we want to take our quantity options and push a newer element in here as I already said we want to put such an option tag in there option tag contains a text with the number so we just render iron here so number 1 to 99 and then we also have to set the value of this option tag to the same number and since this is an array we also have to set it here for which again we use I so this Loop here creates a list of these option tags from number 1 to 99 that's all this does and now we can render these options in our select tag here so between the opening and the closing tag we put in expression and we want to render our quantity options here and this is how it looks it's not styled properly yet so let's do that next we add class names to the select tag select which is a daisy UI class select board W foil and a Max width of 80 pixels this way this input field stays responsive and it can shrink but it will not be bigger than 80 pixels because that's enough and this is how it looks we can also set the default value to the current quantity because when we open the page we don't want this to show one if we have four green bottles in our card right so we can add the default value prop entry simply set this to the quantity of this current card item so now when we save this and refresh the page this shows four and now when we change the quantity by selecting a different one we want to execute a server action that changes the quantity of this item in the database so we add the unchange prop here which will be called whenever we'll select something in this drop down and here it gets past this ear argument which is the drop down menu itself so we add the function body here and then we can get this value out of the drop down menu and call our server action and JavaScript is required to execute on change this doesn't work in the server component unfortunately this is why we have to make this a client component but as we already learned we can still cause over actions in client components so let's set up this new Observer action next again we put it into the same folder again we colored actions.ts just like we did for the increment product quantity action just that this function here will allow us to set an arbitrary quantity and it will also revalidate a different path it will revalidate the Scout page to update it but besides of that we are not doing anything new in here so we make this file a server action file then we export in async function that we call set product quantity to which repairs the product idea but also the quantity in form of a number so this will look very similar to the other actions file we already have just that here we only needed a product idea because we always incremented by one but we also need a card in this other file and create one if it doesn't exist yet so we copy this line here paste it here we have to import these functions from the lip folder again we want to check if this article is already in the card so let's copy this line here as well put it here and then we want to do one of three things if we set the quantity to zero we want to remove this item from the card completely if we set a positive value and the article is already in the cards then we want to update this item with the new quantity and if the item is not in the card then we want to create a new one now with our current UI this third case is not actually possible because we can't set the quantity if the item is not in the card already but maybe you want to change the UI later so we will take care of this possibility as well so we check if quantity on that we pass to this function is equal to zero then we want to check if the article is in the count only then we can delete it right then we call Prisma dot cut item dot delete we want to delete the item where just follow along the idea is equal to the article and card idea that we just found we want to delete this card item else if the quantity is not zero but the positive number then again we want to check if the article is already in the card in this case we call a weight Prisma Dot card item dot update to change the quantity we want to update the same item as we used up here with the article and card idea so we can reuse the same where clause but this time we also want to set the data we want to pass the new quantity and again since the field and the variable name are the same we can use the short syntax here okay and then we add an ads block to this inner F here so if article and card is not defined if we don't already have this item in the card then we want to await press my DOT card item dot create and we set the data like this this will look similar to how we created the card item here so we can actually copy paste this over the data is the card idea the product idea but we don't want to set the quantity to one we want to set it to the quantity value that we pass to this function and at the end of our Z product quantity function out of this outer if block here we wanna revalidate the page again right with revalidate path this time we want to revalidate slash card which again refreshes the page and fetches the latest data and now we want to cut the server action in our card entry file but remember this is a client component and because of this one bug we can't import a server action directly in the client component because this will not work with next off later so again we have to import the server action in the page which is a server component and then pass it to the card entry but we haven't added the arguments to the card entry yet so over into the card entry again into the card entry props here we expect the Z product quantity tier that's a difficult word function which is this over action and again it gets the same signature as the job actually just set up it takes the product ID and form of a string and the quantity and form of a number oops and it returns a promise of type White and then we are edit down here as well but again we import the server action in our page and pass it to the component so let's go into the card entry tag here pass set product quantity for which we import our newer server action okay we save this go back into the card entry down to our unchanged function here first of all we want to get the selection out of this field here which we can do the following way we create a variable I'm gonna call it newer quantity equals pulse int because this contains a string and we want to pass this into a number and the value is contained in this ear value that we get here dot current Target dot value and there's the selection of this drop down field and then we want to execute our server action and pass this quantity to it remember we need a transition to execute the server action in a client component to get the appropriate loading and error handling so we scroll to the top of the card entry file again here inside the function at the top again we create this cons is pending comma start transition the same one we used in our adds to cut button and we assign this to a US transition back down into it the on change Handler we have this new quantity here now we start the transition to which we pass this async Arrow function again and in here we can call and await set product quantity which is the server action to which we pass the idea of the product comma and the newer quantity that we just selected and again to have some feedback I want to show a loading spinner while the server action is running we put it here below the total price we don't need a success tax this time because we see the uptodate value in the drop down so a loading state is enough we add an expression here check if is pending is true and if this is true we want to render a span again that contains the loading spinner so spend with the class names loading loading spinner and loading SM for the size okay and when receive this this should not work let me select the different quantity three it loads and it changed the quantity also up here in the navbar and also the total price this all gets refreshed because we call revalidate perfume which revalidates this whole page and fetches the latest data but I put this loading spinner in the wrong place I actually want to have it inside the stiff here so that it's shown right next to the total price so now it looks like this just one more addition I also won't have an option for zero right so that we can remove an item we put this above the quantity options I don't make it part of the loop because the text will be a bit different so we add another option here and the text will not only contain the number zero but also remove in parentheses this is also how Amazon does it and the value will be zero and remember in our server action zero means that the item will be completely deleted from the card so let's try this out let's refresh this so we see the correct data again now we have zero remove which removes this item from the card completely by then it also makes sense to have some text here when our card is emptier right so it doesn't just look like this and the user might be confused so let's go into the cut page once again and go below the map function here inside the div we add another expression we want to check if exclamation mark cart dot items dot length which means that it's either undefined or zero if this is the case we want to render a text so we can use a paragraph tag for this or a div doesn't really matter because it's unstyled and Tailwind anyway your card is emptier there's the text and then I also want to put the total price of all card items at the bottom and the checkout button So Below this expression we put another div in here we put another paragraph tag to which we add the class name mb3 for our margin and font bold this will contain the total price just like we show in the navbar so this is total colon curly braces format price and to this repairs card dot subtotal and again if this is undefined because we don't have a card yet we file back to zero that's the total value at zero right now and Below we put the checkout button which will start with BTN and BTN primary and this was a checkout again we don't add functionality to this checkout button here if you want stripe integration then let me know in the comments below it then I will make a separate tutorial about stripe I also want to Center these items so we add a class name to this div we make this a flex box and a flex column and what I want to do is on very small screens I want the button and the total amount will be on the right side because that's usually easier to click when you are on your phone and you want to use your thumb and on larger screens I want to align this in the middle also I just think it looks cool for responsiveness so again we can use breakpoints for this we use items and to align the items on the right side and then on small screens and larger we use items Center instead one more thing I also want to change the size of the checkout button but only on this SM breakpoint so here we add SM colon and then I want to set the width of this button to a hardcoded 200 pixels which makes it a bit wider so now the button and the total amount are centered like this but on very small screens it moves to the right side and the button gets a bit smaller I think this just looks better and it's great for usability I think okay let's format this and just try it out one more time with different card items to make sure this works so some headphones add to cart again this glitch where the font flashes for a moment will not be in production this only happens in development so maybe let's add two cameras and maybe one boss to wear go to the card we see our subtotal here we also see it here at the bottom and we see the correct quantities right which we can also change it updates all these values and again if we change the price for example of a product in the database and the user comes back to their cart then these changes will be reflected in the UI the way we fetch our data they will always see the latest price and the latest product information so this works really cool and professionally in my opinion okay cool then the next step is to add user authentication into our website so that the user can log in and can also connect the shopping cart to their account it's a very exciting stuff you don't want to miss this to handle authentication we'll be used next off which is an authentication Library specifically for next.js it works with different authentication strategies we have a lot of different providers available in our app here we will only implement the Google provider to have Google log in but you can easily add additional login providers later if you want and it also has different database adapters that we can use there is an adapter for Prisma and mongodbir which makes it very easy to store user information and also session data in our mongodb database using Prisma here you can see that we have some stuff that we have to add to the Prisma schema but I will show you exactly how this works in a moment to implement Google authentication we need a project in the Google Cloud console so you can either go to a console.cloud.google.com or click on the link in the video description and then we want to set up a project here this is free to use if you already have a Google account then you should also be logged in automatically and here we can create a new project I'm going to call it next Js ecommerce and then we click on create this takes a moment to create this new project and then when this is done we click on select project which selects this project up here on the drop down okay and then in the sites bar we want to go to a credentials which is part of apis and services here we have credentials but we have to go to the O of content screen first because we have to set this up first okay let's go through these steps user type external because we want to make this website available to all kinds of users at least in theory create we have to give this app a name um next JS ecommerce user support email for this we can select the email address of this Google account we don't have to upload a logo I think we can leave this stuff here empty for now as well develop a contact information again I'm going to use the same address here coding and flow recording at gmail.com and then we click on Save and continue here we can select Scopes we only need the user profile info and the email address this doesn't require access to any specific Google servers and we also don't need any special permissions to get these values we click here on update we don't need any sensitive or restricted Scopes so we click on Save and continue we can set up test users while this app is not in production that are allowed to log in again I'm going to use the recording email address and maybe at the second one here infrared coding and floorpongs.com add save and continue okay now we can confirm this external we have a project name email address and so on Scopes test users yeah then we click back to dashboard so this app is now in testing mode if you ever want to publish your website then you also have to publish this Google app to make it available in production but for testing purposes this is now working and then we want to set up credentials so we click on credential C under sidebar and then on create credentials and we need an oauth client idea the application type is a web application name maybe let's call this next JS app or whatever then for authorized redirect Uris we add the URL to localhost 3000 with HTTP colon in front of it that's not https or localhost it's just HTTP and then we need this executive path here because this is what next of expects this is where Google will redirect us to after the login was successful and this is where next off reads the data out of the Google profile and gives it to us basically so this has to point to slash API slash off slash callback slash Google we add this here and of course later in production you have to add a second redirect URL with the actual deployment domain okay we click on create and then we get the client ID and the client secret and we want to put both of them into our end file in our project where we already have our database credentials so here we are at the Google client idea and then we are copy paste this value over here from your Google Cloud console and a Google client secret which was the second string that we got we paste it here as well then we can close the Google Cloud console because we shouldn't need this anymore now our client is set up and we can use this to look in via Google there are two more environmental variables that we need for next off the first one is next of underscore URL which contains the base URL of our website and you have to give this variable this exact name with the same spelling because next off expects a variable with this name so we set this to the base URL again HTTP colon slash slash localhost colon 3000. and then we also need the next of underscore Secret this is just a random string so you can type any letters in here that you want that is used to encrypt the session cookie later this is just needed for security and this is basically a password you can add any string you want here this next off secret is only required in production later we will deploy this website and then we will get an error if we don't have this value set okay let's save this and then the way next off works is that we have to set up a route Handler so an API endpoint and next.js under a very specific URL and every authentication request will then go to this URL and next off will handle this this is also where we pointed the redirect URL in the Google Cloud console to earlier so we go in the sites bar here in the app folder we create a new folder called API and we have to put this folder in here with this exact name because next off expects a very specific route in here we put another folder called off then another folder called scrap records dot dot dot next off as one word and in here finally we put the route Handler which we call road.ts route handlers are how you set up API endpoints so server endpoints in the next js13 app when you use the app order and this part here with the dot dot dot is a socalled catch R segment this allows next off to handle different routes under this endpoint and not just a single one okay and in this route dot TS file we export const of options and this time the name is arbitrary again so this doesn't have to be called off options and this will be of type next of options which is an import from next off and this will just contain the next of configuration the reason I put this configuration into a separate variable and Export it from this file is because we also need this object later in other places in our app okay and we set the adapter to Prisma adapter this is available in next off by default and this allows us to save user information and session data in our mongodb database using Prisma so this works together really well and to the Prisma adapter we pass our Prisma client now this complains because there's a typescript problem that requires us to also cast this to an adapter to a next off adapter so that this error message disappears sometimes there are some typescript shenanigans that you have to work around comma and then reset providers to an array here you can add multiple providers but again in this video we only add Google login so here we pass a Google provider okay autocomplete doesn't work the import is import Google Provider from next off slash providers slash Google there it is now we can use the Google provider down here and configure it with curly braces this expects the client ID and the client secret that we already have right in our environment variables so we can get them with process.enth Dot we need the same name Google client idea and client secret is process.nf Dot Google client Secret now this complaints we will get rid of this error in a moment but first let's finish this file here so we have our off options and Below we create a constantly again this is explained in the next of documentation here we call this next of function to which we pass the off options and this sets up next off with this configuration here with our Prisma adapter and the Google provider and then we have to export it the following way export curly braces Handler ascat comma Handler as post this weird syntax is necessary because right now next off is the configured to work with the old Pages directory and next.js and not with the app directory that we are using and this is why we have to write the special syntax to make this work with route handlers but this is totally valid this is also described in the documentation now this your complaints because an environment variable can always be undefined because we might have forgot to reset it but the Google provider expects defined values for client ID and client secret now one simple way to get around us would be to just add the nonnet assertion operator here with exclamation marks but this is actually not great because if we actually forget to set these environment variables then we will continue with undefined values and this will just misbehave it's better to actually check if all our environment variables are set and throw an error if this is not the case this is why we also installed the zot Library here we can use this to validate the values for example our environment variables this is a very useful thing to do in your next JS projects so that you can always work with the find Environment variables and I will show you how you can set this up we want to go into our lib folder again and put another file in here which we just call nf.ts here we want to import sort of from sort then we create a validation schema for our environment variables const I'm going to call it INF schema and then we can create such a sort object in the sort object we can pass validation rules and then here we want to add the same variables that we also have in our normal.n file so we want to copy all these five names and paste them in here and now we can add validation words to all of them and they all have the same rules they are strings that are not emptier so behind each of them we write a colon and by the way you can duplicate the cursor by pressing somewhere then you hold Ctrl alt I guess on Mac this is command alt I'm not sure and then you press the down arrow and then we press the end button on the keyboard to get to the end of the line but you can also handle each line manually if you want okay as one each of them will be a sort dot string which is a function and then we also call nonemptier to guarantee that this trend contains something and the comma at the end of each line now below we export the cons that we call enf and we assign this to end schema dot pulse this way we can pass a value to the schema and validate it and what do we want to pass well we want to pass all our environment variables to it because we expect our environment variables to adhere to this exact schema we should have these five keys that are nonempty strings and now if one of them is missing or emptier then search will throw an arrow with a readable error message instead of just giving us an undefined value and now we go back into our route file and instead of process.enth we just use nth entry importers from our lib folder the file we just set up and now since we validated this with sort this is guaranteed to be a string if it's missing we will get an error okay next we go into our root layout and we have to wrap our whole layout into a session provider what this does is it makes the session so our locked in user basically available to our components throughout our app this is actually only necessary to get a session in client components because in server components it works differently entry would not need this in our app because we fetch all our session data server side but it's still good to add this because if you need a session clientside then you need this wrapper okay autocomplete doesn't work so we have to import this manually import destructure from next off slash react and in here we can find this session provider entry wanna wrap our navbar our main tag and the photo into the session provider again to make the session available to all our pages but when we save and refresh this I think we should get an error yeah there it is because this uses react context internally and this requires a client component but the root layout is a server component now we could make the whole root layout a client component to fix this but there's actually a better way to fix this basically what we want we want the session provider to have to use client directive at the top just like our own client components the problem is many of these libraries haven't added this yet because react server components are still newer and we can't go into the source code of the session provider and add use clients there ourselves right but there is an easy workaround for this we just have to export these thirdparty components that we want to turn into client components from our own client file so we go into our app folder and put a new file here which we give the same name session provider dot TSX we make this file a client component and then we simply reexport the session provider from next off so we add the same package here but this time we write export instead of import so again next off slash react and here we have the session provider but we want to make this the default export which we can do with this syntax then we go back into our root layout and we want to change the impulse statement here we don't want to import it from next off anymore but our own file so dot to get into the parent folder slash a session provider and since this is Now the default export we can delete this Cali braces and now the should work because we turned the session provider into a client component we can still use all the features of it no problem but now we can also use it inside a server component next we have to add some newer models to our Prisma schema this is described in the next of documentation they have instructions for the different adapters and we are using the Prisma adapter we have to add these models here the account and user version and so on and then we also have to make some modifications to make this work with mongodb but I already prepared all of this let's go back into our project and into the schema.prisma file and at the bottom below the card item model we have to copy paste a bunch of new models I will put a link to this schema file into the video description below so you can copy paste this from there so this includes the user account this contains the username email address and the image which we get from Google when the user signs in then the Google account information is stored as well in a separate collection there is some stuff in here that we don't actually need but we might need this in the future if we change our authentication strategy so it's good to add all of this then we also store a session in the database when the user is logged in sessions are alternative to JWT authentication when you connect next off to a database using one of these adapters the Prisma adapter in our case then authentication will automatically be handled with sessions session means that when a user logs in the association entry created in our database that contains the user ID and an expiration date sessions are easier to use correctly than Jade label your tears because you can invalidate sessions simply by deleting them from the database so if the user changes their password for example a and you want to lock them out everywhere else then you can just delete their sessions whereas this is not possible with jwts by default because they are selfcontained in order to implement jwts properly you have to implement the complex refresh token mechanism this is also possible it's also possible with next auth but sessions are much easier to use correctly but again next off handles these sessions automatically for us we don't have to create them next off dusters and then we also have this verification token model as far as I know it these are only used if you implement login with an email link which we are not using here but again it's still good to add all of these models at once in case you want to add additional authentication strategies okay and then we also want to be able to connect a shopping cart to a user right so that we don't only have Anonymous shopping carts where we store the card ID in a Kobe instead we can also store a user ID on a card and this way know which user this belongs to the zoo on the card model and I put this above the timestamps we add a user idea which will be of type string this will contain an object idea but we make this value optional with a question mark after string because Anonymous shopping carts don't have a user ID right and then we also need this object ID annotation because this contains a mongodb object ID then we also add the relation below like we also did for the product and the cards on the card item we call this one just user it will be of type user which is our user model that we just copy pasted it's optional again because it's connected to the user ID which is also optional because a card could not belong to a user account yeah and then we add the same line as here basically just that we change this to a user idea we press the formatting shortcut to align this properly and the counterpart to this user field here is on the user model discard array I think if we delete this and press the formatting shortcut again yeah it gets added back automatically because this belongs to this user relation with that up here this relation basically allows us to do two things first of all when we delete a user we can automatically delete their accounts and for an existing user we can fetch all their cards if we allow multiple cards per user but again this whole file is linked in the video description below so we can copy paste it from there it's so good to understand what is going on here okay and then we want to push these changes to our database to create these new collections so we open the terminal stop the execution and run npx Prisma DB push again as you can see it created and configured a bunch of new collections which we should Now find in our Atlas backend sessions verification tokens users and so on they are empty right now and then we want to regenerate our Prisma client to have these new methods available I think this actually happens automatically when you run DB push but just to be sure we run npx Prisma generate again which generates this new updated Prisma client and then real npm run Dev again okay and then I want to put a newer button into our enough bar that shows the profile picture of the user when they are logged in and also contains a drop down menu to log out this button needs to be a client component because we need to handle button clicks there and the same as we did for the shopping cart button let's put it into its own file so that we can keep the navbar itself as a server component so we have the shopping cart button we create a new file which we call user menu button so then we export a default function user menu button and here we are return a div we also add props interface user menu button props we want to show the currently locked in user in this user button and we can get the user out of the session and we get the session from next off so we add session colon as a prop entry set the type to session from next off this one here so this is the import statement but the user might not be logged in so we add a vertical bar and now so that we can also pass null for the session now we could also fetch the session directly in here with this us session Hook from next off this fetches decision clientside but I want to fetch the session server side in our navbar which is a server component because this way decision data is available as soon as our Pages opened there is no short moment when the user is not authenticated instead the user is logged in right array and this is also how we set up our shopping cart right I want there to be a no loading time instead I want all the data to be there as soon as the page is opened again because I think this feels more professional and this is also how it works on websites like Amazon this is why we don't get the session directly in here because this has to be a client component we also add the use client directive at the top because we later need to handle on click events here and this is only possible in a client component then we destructure our props as usual here in the function user menu props and in here is our session and then the first line of this function we want to get the user object out of the session which we can do with session dot user and it adds the save call Operator because the session can be null okay and then we finish the layout itself we add some class names to the outer diff again we use drop down and drop down end which we also used before for the shopping cart button again we put a label with this tab index 0 in here and we add some class names to the label as well BTN BTN ghost and BTN Circle again the same classes we used on the shopping cart button okay and then in this button I want to show something different depending if the user is logged in or not so we add an expression that checks if the user is defined we use the ternary operator with a question mark if the user is defined I want to render the user image in the next image before we set up this image let's also add the second part of the ternary operator colon if the user is not defined I want to render yeah three little dotsier which indicate that this is a drop down menu for this we use an SVG again and again I will link this file in the video description so you can copy paste it from there we can't get around this because yeah we can't type this out by hand we can only copy paste these svgs let's press the formatting shortcut so this gets aligned properly and again prettier automatically adds these parentheses which are very useful for the source of the image we want to pass user.image and again we get this from Google when we log in this will automatically be filled with the image of the Google account of the user but user can be undefined right so we have to add a safe cut operator here and we want to use something else as a fallback for this I prepared this profile pic placeholder image which is in the assets foil this one here I want to import this and use this as a fileback so at the top we import profile pic placeholder from at slash assets slash Prof epic placeholder PNG and then we can use it as the file back here profile pic placeholder in case the user or the image is undefined we set the alt text to just profile picture I think this is enough we set the width and height both to 40 pixels and then we also want to style this with W10 which sets the width of the image but in CSS to the same 40 pixels as we also loaded because again the final dimensions are dictated by CSS not by these values we are using here at least when we use this component and then we want to make this a circle which we can do with rounded foil this adds the Border radius to over 9000 and this creates a round image okay so if the user is logged in we see their profile picture if they are not logged in we see this SVG which is three little dots basically you will see this in a moment and outside of this label but still inside the stiff inside the drop down menu we add the drop down menu items so in here we put a ul and unordered list this is just a normal HTML tag and to the opening tag of UL we add this tab index 0 again again this is necessary for accessibility so that we can use tab to navigate between our menus and again this needs a class name which are drop down content manual rounded box and again I got all of them from this URL menu minus SM then we need this c Index again to make sure that this menu is in the foreground we add the match on top with mt3 we set the width to a w52 let me make this bigger we set the background color with BG base 100 then we need some padding and lastly we also want to give this a shadow not SM but just normal shadow and into the UL we put list items for the Zinger buttons in our drop down menu you can put multiple once in there we actually only need one but the contents of this item are different depending if we are locked in or locked out if we are logged in we wanna show the log out button and if we are logged out we want to show the login button right so we add an expression here again with a ternary operator if we have a user then we want to render a button that says sign out if the user is not logged in then we want to render a button that says sign in and then we give both of these buttons on click handlers this is why we had to make this a client component because we can only use on click with JavaScript and in here we pass an error function like this and in order to sign out we can call this sign out function which is coming from next off so we add this import here entry code this function we can also configure this between curly braces and we can zero when we are locked out we want to be redirected back to the front page so we can set the Callback URL to the home page and to sign in we also passing on click Handler with an anonymous function which simply calls sign in now instead of these functions we could also use links because they are specific URLs where we can navigate the user tool so they also get to the next of login screen the benefit of using design and function rather than design in url endpoint is that this automatically redirects us to the previous page after signing in so if we are on a product page and we sign in we get redirected to the product page and not to the home page and the same is the case for sign out by default but here we have changed this Behavior by setting the Callback URL explicitly you can remove this if you want okay let's format and save this and now we only have to add this user menu button to our love bar and then log in short work I just realized one little mistake I want this not to be a BG Bluer but BG base 100 this is the correct value okay then we open the NAFTA TSX file and we want to put the user menu button right next to the shopping cart button and it's already styled correctly but this expects the session as input right which we want to fetch here in our enough bar because again the navbar is a server component and this way we can fetch the session before the page is actually opened so here at the top we create a const session we cut a weight get a server session this is a function from next off that we can use in server components to get the session of the logged in user from the database now to this get server session we also have to pass the off options where is this coming from those are the next half options that we set up in our route Handler earlier this is why we export them here because we have to pass them to get server session otherwise this will not work okay so this way we get the session of the currently locked in user from the database and the way this works is that next offsets an encrypted cookie in the browser of the user to identify the correct session in the database and know if they are locked in or not and then we simply pass the session to our user menu button and save this and now on our website when we refresh the page we should see our user menu button and the other days we are currently not logged in so we see these three little dots which are the SVG we pasted and now let's try this out let's log in by clicking the sign and by default we get to this screen here you can customize this screen or replace it for a completely different one this is explained in the next of documentation but for our project here this is fine sign in with Google and then I want to sign in with one of my accounts then we get redirected back to the page and this error happens because we are trying to load the profile picture from googleusercontent.com but this will only work if we allow this address in our next config file so we go into our project open nextconfig.js and here we already allow images from unsplash.com right so here we want to add a second entry this will comma another pair of curly braces and we set the host name to this one here let's actually copy this put it here maybe the address is different for you copy whatever you see here as the host name this entry restart the development server with npm rundev but we should still be locked in I think so let's refresh the page and there we are and this is the profile picture of my Google account which you can also see up here and this user information is now stored in the database let's refresh this here we have the user florianwalter with the image from Google and in the accounts collection there's all the information about this Google account now right now a user account doesn't have their own shopping cart yet we still have our Anonymous shopping cart that's connected to the kogi we will set up user shopping carts in the next section and then we will also merge the anonymous card with the user's card when we log in let's check if logout works as well so I click on sign out entry are locked out let's log in again sign in with Google recording account and we are logged in really cool and again since we fetched the user server side and our enough bar when we refresh the page the user is there immediately there is no glitch in the UI there is no loading State we have the user and the shopping cart both available as soon as the page is opened but to see that we are actually authenticated let's add some protection to our ads product page we make it so that not anyone can open this page instead we have to be logged in to add a product of course in a real app you probably want to make this available only for an administ trailer but here we will just add simple authentication protection so the ads product page is a server component right this means we can fetch our session with get server session again to which again we have to pass the off options we also have to make this an async function and then we can simply check if possession is undefined on Nile then we want to redirect the user and we already have this import here from next navigation tool design in endpoint which we find under slash API slash off slash design in and as I explained earlier by default when we use the URL instead of design in function this doesn't redirect us to the page where we were previously at it redirects us to the front page instead but we can configure this manually and by adding the Callback URL param so question mark URL in camera case spelling like this and then we want to redirect tool slash at minus product so that we get back to this ad product page so let's try this out while we are logged in we should be able to access the add product page but if we logged out we should be redirected to the login page when we try to access the Edge product page we get to the login page we log in and then we should be redirected to the ads product page so this works it also makes sense to add a protection to the server action itself in case we are trying to call this while we are not logged in so here at the top after us server we fetch the session here as well with a weight get server sessions to which again we pass the off options now we basically want to do the exact same thing as here if the session is now we want to redirect the user but this happens when we click the add product button while we are not logged in okay before we go on let's also check if our nth validation here works so when I remove an environment variable from the dot nth file for example the Google client idea and then restart the development server we should see an error message because this will not be able to fetch the user information let's try this out we refresh the page the session is now and we get the sort error which is caused because it's trying to pass the nth schema with the process.n files but since the Google client ID is missing this throws an error with a very readable error message we immediately see what is wrong and we don't accidentally continue with an undefined value so this works as well let's add the Google client ID back restart the development server and open our page again okay now let's go into our cut TS file in the lip folder again and adapt our get card and create card functions to our newer user authentication let's start with create cards right now we only create an anonymous card that's not connected to a specific user right so in here let's fetch the session concession equals a weight get server session we can use get server session here because we only calculate card from server components again we have to pass the off options here and then instead of creating the new cards variable here we delete the const and instead above recreator let a new card which is of type card that's the type coming from the Prisma client this is the same type we get back when we call cards.create it's an unpopulated card okay then below we want to check if we are logged in so we check if session has a value if it doesn't have a value then we want to create our Anonymous card as before so we paste in this part and we also paste in the code that creates the cookie if we are locked in we also want to create a new card but this one will be tied to a user account so again a way to Prisma Dot card dot create then we pass data and here we want to set the user idea to a session dot user dot idea now the ID is by default not content in the user object because next off doesn't return it to us by default we have to add this ourselves so let's just write ID here for now this gives us an error we go into our route Handler so this next of Route file we created earlier and here we can change what data we want to return in the user object by adding a callback so under providers we add this callbacks field to which repairs curly braces and in here we get Auto completion we can use this session callback which will be triggered whenever we return a session from the database and here we can hook into this process and modify what data we get back we can also destructure this paramsion so we remove params and add curly braces instead and in here we want to have the session and the user object and then we can there we want to set a session Dot user.id to the idea that's contained in this user object this way we take the ID of the user in our database and add it to the version so that we can access it here but typescript doesn't recognize that there is an ID field on this session user in JavaScript this will just work but in typescript we also have to configure this type here before we do this let's finish this function at the entry have to return the session so that we can use it in our app to fix this problem here we have to extend this user type for this we go into our folder and outside of srz this time so right here with all these configuration files we want to create a new folder which we call adds types this is a naming convention for type files in here we put a new file that we call next of dot d dot TS D dot TS files are typescript declaration files and here we can make changes to existing types and in here we write declare module and as a string we write next off because this is the library where we want to make changes to a type curly braces and we want to change the session interface this is what we want to change this session object which contains the user but the user doesn't have an idea so in interface Obsession we write user column again a pair of curly braces and in here we put the ID value that we want to add to this user it's of type string but we also want to have all the other values that are on the user available by default because when we write it this way now the user only has an idea to also add these other values back to the user we go after the closing curly brace here write an Amazon sign to create an intersection type and then we use default session from next off to which we add scrap records and then here we write user as a string so this way we extend this next off user and add this idea field to it let's reformat this and save it and now our arrows here disappeared and now in our card file in the lip folder we also don't have an error anymore now the idea of the user is added to the user in the session when we return a session okay so now when we calculate cards it checks if the user is logged in if yes it creates a card connected to this user if not it creates an anonymous card like before now let's scroll up to create cards and do the same here as well in the first line we want to retrieve the session then we want to create a variable for this card here so we remove the const here instead we create a lead card by this card we've had here is populated with the product information right with these include options we used here so the return type of this is card with products the type that we created earlier so let card cartridge products or null if we don't have a card yet and we initialize this with Naya then again we check if we have a session or not if we don't have a session we want to do the same as before we want to fetch the cook here with the local card idea and fetch this Anonymous card if we have a session we want to fetch the card of this user so cart equates a weight Prisma dot cart dot find first this time it's not find unique because a user can have multiple cards but here we only support one card so we use find First and in curly braces we add the photos we want to fetch the card well the user idea in the card that's part of the schema that we modified earlier so a cardinal has a user ID which is optional we want to find the card where the user idea is the idea of the currently locked in user comma and of course we want to include the same populated card item data and the rest stays the same right so let's try this out when I refresh the page we should see an empty card because there is no card connected to this user account yet right so I have to start the development server again refresh the page and the card is emptier now we should be able to add an item to the card it creates a card for this particular user when we log out we should see the anonymous card again so that's the anonymous card and when we log in we should see this user's card again and we should also see two cards in our database there they are one has a user ID and the other doesn't Okay cool so this is working now let's implement the logic that merges the anonymous card with the user's card when we log in this is also how it works on Amazon so you are logged out you add some items to your cart and then you log into your account these items are moved into your user card for this let's create a new function here in our lib folder and our card TS file let's put it at the bottom export async function and I'm gonna call it merge Anonymous card into a user card it's a very long name but it's very descriptive and to this function we pass the ideal of the user that we want to merge the card into and here we have to write a little bit of logic the first step is we want to fetch the local card F1 access first we need a cookie just like in get cards let's copy this line put it here okay and we also want to get the local card from the database right so let's copy this part here as well where we assign logo card we create a const card where we assign this tool and we need to populate the items because we want to merge these items together so we need to know which items are in the cart but we don't need the product information because this is not necessary to merge these cards so what we do is we remove this part here include product rule and just write true instead this populates the items field but it doesn't populate the card items with the product information instead they will only contain the quantity and the product ID let's also rename this variable to local card and if there is no local card then there's nothing to merge right So Below we check if exclamation mark local card we just run a return if there is a local card then next we need the users card so we create a const user card equals await Prisma Dot card dot finder first again because a user can have multiple cards so this doesn't work with find unique well the user IDs match with the user ID value we passed to this function and again we want to include the card items in here but we don't need the product information okay and then we want to merge the items of the user card with the anonymous card then we want to delete all the currently existing items in the user card and replace them for these merged items and then finally we also want to delete the anonymous card so that it's empty again so we have to do a zeroa database operations now what we have to keep in mind is what happens if we get an arrow somewhere in the middle for example what happens if we delete the items from the user card but we get an error before we insert the new items and then the user card is suddenly emptier this is why we want to execute all of this in a transaction a database transaction is a process where you can do multiple operations but if one of them fails the whole transaction will be rolled back and none of the changes will be applied and I think pretty much all types of databases support transactions including mongodb and to execute the transaction with Prisma we go below and we write await Prisma dot transaction and it starts with a dollar sign this is the function name to this function we can pass an async function where we execute the actual transaction and this async function gets passed in argument which is again a Prisma client but every operation we call on this Prisma client and here will be part of the transaction and in the documentation they call this TX which I guess stands for transaction so we add this argument here and again TX is just a Prisma client on which we can do our usual operations now before we set up this transaction we have to create another function below outside of merge Anonymous card into user card this function will contain the actual logic that merges the items in these two cards so we colored merge card items and to this function we pass the user card and the anonymous card right but I wrote a function in a way that we can pass any arbitrary number of cards to it so if you want to merge three cards for whatever reason in the future then this will work as well for this we use this syntax where we start the argument with three dots this way we create socalled bar arcs meaning that we can pass as many of these arguments to this function as we want and we cut this arguments card items and the type of the swag argument is an array of card items from the Prisma client but then we add another array because we can pass as many of these card item arrays as we want as I just explained so this is an array of array of card items and in here we want to take each entry of these two cards and combine them together so if one has a quantity of one and one has a quantity of two then we want the quantity of three and if the anonymous card contains items that are not in the user card yet then we want to add them but instead of writing this out by hand I just copy paste this here you can pause the video and type this out this is nothing new it's just a bit complicated it uses the reduce function and for each Loop to go through each of the card items and then combine the quantities to be honest I had GitHub copilot write this Logic for me GitHub copilot in case you don't know is an AI plugin for vs code it's very useful to create boilerplate code like this automatically but all of this still makes sense so if you go through this step by step then you will understand what exactly is happening here again just take a moment type this out and then we can continue our transaction here so in the transaction we want to check if the user card exists if it exists we want to merge it with the anonymous card if it doesn't exist we want to create a completely newer user account right so we check if user account we do this inside the transaction and let's also add the ads block white array so we don't get confused by the nesting later if there is a user card we want to use our merge card items function to merge the anonymous card with the user card so we create a const let's call it merged with a deal card items and for this we call our merge card items function to which repairs local cards dot items comma and user card dot items again since we made this a one Arc we can pass as many of these card item arrays as we want so this now contains the merged card items the next step is to delete the existing items in the user card and then put this newer merged card items in there instead so we call a weight TX which is this Prisma client on which we do the transaction operations card item dot delete menu and in the filter we Define which ones we want to delete with this where value and in here we want to compare the card idea to the user card.id because we want to delete our card items that belong to this user card and then put our newer merge card items in there So Below we write a wait TX Dot card item dot create menu and for the data we want to pass the merged card items not merge card items because that's the name of the function merged card items which is our new array up here now each of these merged card items also contains the idea of this card item in the database it had before but we are making new database entries here and we want a new auto generated idea so we want to ignore this ID field we only care about these other three fields we can do this by mapping these merged card items so again in the map function we get past each item we add parentheses and curly braces because these curly braces are not the block of this function they are the return value the JavaScript object that we want to return this is why we have to wrap this into parentheses and as I said in here we want to put the card idea which is user card dot idea we want to set a product idea to item dot product idea and we want to set a quantity to item.quantity so now we put this much card items in here but we ignore the IDS to create a completely new idea and we also set the card ID of all of these items to the user card idea which is important because the anonymous items didn't have a card ID before right so we have to set this here and that's the ID of the card we found in the database the existing card and in the else block it means we don't have an existing user card yet and we want to create one so await tx.card.create in here we pass the data as usual curly braces we want to set the user ID of this cards to the user ID we pass to this function so we pass this as the first argument again this is a shorthand for writing user ID column user idea but the value and the key have the same name so we can use the short syntax selectors then we want to put the items in here items colon and this is a socalled relation query in Prisma this way we can create a card in the card collection but at the same time we can create card items in the card items collection in one operation and they will automatically be connected together by adding the card idea to these items then in here we calculate menu to create serverware card items and I know that this can look complicated at first but you just have to work through this because this is how you write these database operations and here we have to pass data again for which we want to pass the local card dot items this time it's not the merged card items because in this ads block a user card doesn't exist yet meaning there are no user card items they are only local card items but again we want to map this into the correct structure again we get past each item and we return a new JavaScript object for each of them now since we do this relation query where we do the operation over the card and not the card item we don't have to set the card ID this time this is automatically handled by this operation instead this time we only need the product idea and the quantity and the card ID will be set automatically okay and after merging the cards has completed we want to delete the local card and also delete the cookie so we do this below this whole F block here still inside the transaction so if user card else and below this else block we write a weight TX we are still inside the transaction Dot card dot delete we want to delete the card well the ID of the card is the logo card idea the local cards that we fetched from our cookie we want to delete this one and then we want to remove the cookie which we do with cookies dot set the same name look a card idea and then we set this to an empty string this is how you delete a cookie in xjs okay maybe let's recap this whole function one more time we fetch the local card from this cookie if there is no local cards then we return because there is no data that we have to merge into the user card if there is a local card then we fetch the user card from the database if there is no user card in the database yet then we just have to create a new one with the items contained in the logo card and if there's already a user card and a logo card then we merge these items and add them all to the user card and at the end we delete the local cards because we don't need it anymore we have merged it into the users card okay this function is ready but now the question is where do we call our merge function here we want to call dust right after we have logged in so before the pages open the merging already happened and as usual when we see the page all the data is already displayed correctly and there's no loading state so let's go into our next of Route Handler again we have the skull back here that will be called every time we return a session and Below callbacks we can also add this events field and in here we can get cult every time we did a certain off operation for example we have this signed in function here and this is the perfect place to merge our cards because this will be called right after we have signed in but before we are returned to our home page we want to make this an async function because our merge card functions makes database operations and we want to destructure this argument here we need this user value to get the user ID and then here we simply call a weight merge Anonymous Cards into user account which expects the user idea that we can get out of this user this is the user that just signed in okay let's try this out the locked end user has one item in the cart right now these shoes for 95 bucks let's sign out in the anonymous card we have the headphones and this boss duel and now when we log in these cards should be merged and we should have three items in there let's try this out sign in to our account now design and callback is fired which merges the cards and there we are we have our user card with the three items in there and when we log out again we should see an empty cart because we cleared the anonymous card this is by the way also how Amazon handles it let's try this one more time let's put something into the anonymous card maybe two of these plants here and again this real glitch doesn't happen in production it only happens in development so now we have two of these plants in here again we log in and these items will be merged into the user card and this eye works isn't this cool now let's also try if our transaction works properly as I explained if we have an error here somewhere inside this transaction none of these operations should be applied let's try this out by throwing an error here at the very end of the transaction throw error test just for a moment obviously we will remove this ladder so now I do the same process again I log out I add this card to the shopping cart but now when we log in and execute our merge function it will fail because of this error but the error is thrown at the very end after all these operations but since these operations are part of a transaction they shouldn't be applied when this error occurs within the transaction so let's see we log in again we should see this error in the console that is error test our user card still only has five items because this merging failed and this one item is still in our Anonymous card so the website still works but these cards are not merged but they are also not left in an inconsistent state so this is a really professional setup all right let's not forget to remove this error here maybe I will leave this as a comment one more thing I want to mention is whenever we fetch cookies like we do when we either get the anonymous card or also inside get server session then the route that uses this function is automatically dynamically rendered this is important because when we show the card of the user this data is different for each individual user right so we don't want to Cache this page on our backend and serve the exact same page to each user every user has their own card but we don't have to configure this cache ourselves because again whenever we get cookies which we do here but which is also done inside get server session then the page is rendered dynamically automatically so it fetches new data whenever we open the page and it's not cached between users this is where we don't have to add revalidate 0 to our cart page for example this happens automatically because we retrieve the card here and to verify this we can actually build the project with npm run built which takes a moment this builds this project for production mode and here we can see from these icons how these pages are rendered and cached so this Lambda symbol here means that the page is not cached instead it's created every time the page is opened and when we look at the cut route here we see this Lambda symbol so this page is not statically cached which is good okay this was a tough part but I think we learned a lot and in the next section we will Implement pagination here for our front page so that we don't show our products at once okay so to have enough items that we can actually page in it let's go to the ads product page again which now requires authentication that's good and then let's add a bunch of newer products but let's do so in a loop so that we don't have to repeat this process like 50 times let's go to the add product page code and then just for this one operation I will put a loop in here so let's say for I and let's just put I don't know 50 items in here and then I want to repeat this process here and create the exact same item in the database 50 times just so that we can later see our full page generation bar with many pages in action so let's save this then we need an image again as usual we take this from unsplash I'm going to use this Clone Trooper here because what would be more fitting for 50 items with the exact same data and then a clone trooper so I paste the image URL here called this clone trooper description this is a cooler controller bar we have many of them of course this data here doesn't matter and the price will be I don't know 19.99 now we should execute this in this Loop and add the same item 50 times right so this will take a moment to complete okay let's refresh the page and now we have this Clone Trooper in here 50 times let's also remove the for loop again because obviously we don't want to keep this and then we want to paginate this front page here because if we have a lot of items in our database we don't want to show all of them at once we want to show them in pages so let's go into our project and set up a pagination bar we will put this into the components folder because you will likely reuse this in different places pagination bar dot TSX as usual The Styling of this component is coming from Daisy UI this is how it looks and in this fire we export a default function which we also call pagination Bar and this component also needs props pagination bar props we need the current page so that we can highlight this element in the pagination bar and also make it not clickable which will be a number and we of course need a total number of pages so that we know how many items to show in this pagination bar then we add this propstone here and destructure them current page total pages now in this pagination bar I don't want to show all pages at once because if we have 100 Pages for example then we don't want to show all the numbers from 1 to 100 here right we only want to show a subset of these numbers for this we will write some logic that calculates these page numbers you can just follow along we create a const Max page that's the largest page number that will be shown in our pagination bar we assign this to math.min which Returns the smallest of the values we pass to this function to this we pass total Pages comma and then math.nex which is the opposite of math.min and here repairs current Page Plus 4 comma 10. so the max page will be the current Page Plus 4. so if we are on page 13 for example the largest page number will be 17. however if we are on page 1 for example then there will be no pages to the left of page 1 right because there are no smaller pages in this case I want to show all the page numbers all the way up to 10 otherwise the pagination bar would be very small also if there is no current Page Plus 4 because we are on page 17 for example and there are only 18 total Pages then we want to use the total pages instead this is where we wrap this into math.min I know this is a bit complicated at first but you can just play around with this and see how this behaves then we also create a const Min page for which we use nav dot Max 1 comma math dot min and to math.min we pass current page 5 or next page minus nine like this again this calculates an appropriate value for the Min page that is not smaller than one and I just came up with this by playing around and zero what looks good and then we want to generate page items from the Min page all the way up to the next page we do this in a loop so we create another for Loop let's call the index page we start at Min page so we replace the zero for Min page entry one renders until page is less than or equal to the max page and then inside this Loop we want to add page items to an array so above the loop let's create this array cons numbered page items this will be of type jsx element array because this contains jsx elements and we initialize this with an empty array and then in the loop for each round we can say numbered page items dot push to put a new element in here and each page item will be a link so we use a next link here the text of the link will be the current page number which is the index of the loop and then we configure the link itself so we add an href and what we do is we navigate to the current page but we append this page URL query param with a question mark page equals plus the current page number so this adds this page query param to the current destination and we can read the page from the URL in our server component and then since we are in the loop we also have to add a key to each element for which we can just use the page number and then we also want to add the class name to each link we make this an expression with curly braces and add a back text string in here the first class we need for all of these items is this join item class which is used in Daisy uif for these pagination bar items and we also use the button class BTN then we put an expression in here with a dollar design and curly braces and what I want to do is I want to disable the currently selected page item so that we can't even click it so it has a different styling but we will also not make it clickable we can do this with a class but we want to apply this class conditionally so in this expression we check if the current page is equal to the page of this item then question mark ternary operator we want to apply another class in quotation marks we want to apply BTN active which changes the highlighting color of this item and then I also want to make this element unclickable for which we can use the pointer minus events minus none class which is coming from Tailwind then we add the second half of the ternary operator colon if this item is not the current page we don't want to add an additional class so we just pass an empty string here okay and then we create the pagination bar itself in the return statement so in here we put a div to which we add the class name join that's the counterpart of join item this connects these items visually and in the stuff we want to render our numbered page items right let's see how this looks let's go to our front page and before we actually fetch the count of pages and items we have let's just hard code This pagination Bar in here for now just to see how it looks so we have our pagination bar let's set the current page to three and the total pages to earn a large number 99 and then see how this looks there it is let's Center this on the screen by adding some class names to the outer diff we add Flex color and item Center which would send everything including the patronation bar so we see the pages from 1 to 10 if I set the current page to 13. you can see the responsive page numbers in action now the smallest value is 8 the largest one is 17 and we never show all 99 Pages at once because that would be too many but our pagination bar is still not fully responsive if the screen width is too small then this will not all fit on the screen so let's make this responsive by switching to a different kind of view what I want to do is when the screen is small I want to switch to this kind of pagination bar where we just have the current page and a button for left and right so let's go back into our pagination bar component and what we can do is we can hide this div on small screens or rather on very small screens by setting this to Hidden by default and then on the SM breakpoint which are small screens and larger we want to set the display back to a block so we show it on this screen size and larger and on this very small screen it's very hides these page numbers we want to show a different element instead and to put multiple elements into this return block we can wrap this into such a fragment because there always has to be one parent element and there's no reason to make this a div because only one of these will be shown a diff would work as well as the wrapper but I think a fragment is more semantically correct So Below the first diff we put executive and here we add the class name join again on gravy small screens we set this to display block by default and on small screens and larger this one will be hidden so only one of these two will be shown depending on the screen size and in here we put these elements from this UI I just showed you earlier so we have this left button which we only want to show if current page is larger than one because otherwise there is no previous page that we can navigate to right so if the current page is larger than one we want to render a link The Edge ref again will point to a question mark page equals and we append current page 1 and we wrap this into parentheses and this link needs the same join item and BTN classes as we used for our numbered page items so we add the class name here as well BTN and join item we close this link tag and as the text we use this left Arrow here which I just copied from Days UI I have no idea how to enter this in a normal keyboard but I will link this pagination bar again in the video description below so you can copy it from there but you can also just use any other icon here okay then we want the button for the current page right and then this right arrow zor below this expression here where we checked current page larger than one we add a button this doesn't have to be a link because this will be disabled anyway it will not be clickable so to this button we add the class names again join item BTN and pointer events none to make this unclickable and this was a page and the current page number then below the white Arrow we check if current page is less than total Pages because if we are on the last page then we don't need the right button in here again we put the link just like this one so let's actually copy this just that we wanna go to a current Page Plus One and the text in here will be a right arrow okay let's save this and see how this looks so this is the full pagination bar and if I make this small enough eventually it turns into this pagination bar but we can't try it out yet because we haven't set up pagination here yet so let's do that next let's go to the front page which is the page TSX in the app folder first of all we need to read the current page out of the URL because the pagination bar adds this as a UL param right so in our page here we can get the search params from the props for this we create an interface called home props and in here we add this search params field and you have to spell it exactly like this in camera case because this is how we get the search params out of the URL in xjs we need this exact prop name and this will contain an object with the different search params and in here we expect our page which will be a string this number page is coming from the pagination bar because this is how we are cult this search param value here this has to match and then we can destructure this page here in the component home props and this is actually not the page yet it contains the search params and the search params contain the page so this is how we destructure this what we can also do is we can give this a default value of 1 like this as a string because such params are strings this way we have a page number to work with even if no query param is added to the URL and in this case of course we want to load the first page so next we have to turn this page param into a number so we create the const current page and then we call Path int to which we pass the page param and even if we don't pass one it will be Z to A one as the fallback value then we also need to define a page size and let's store this value in a variable as well that's good practice because this way we avoid magic numbers where we just have numbers in our codes that we might not remember what the meaning was so let's create a const page size and let's set this to this you can also make this larger if you want to deploy this app but for testing purposes a small page size is easier to work with and then we also want to create a number for the hero item count the hero item is this element here at the top we have to take this into account when we paginate our results because we will only show this on the first page and again to avoid magic numbers in our code I store this value in a variable as well and maybe in the future you want to have more than one of these hero items then you have to change this number then we need the total number of items in our database so that we can calculate the largest page so we create a const total item count and we can get this through Prisma by calling a wedge Prisma dot product because this is what we want to count and then we have discount function here which Returns the total number of products in our database and from this we can calculate the number of total Pages we have right so we created const total pages equals this would be a total item count divided by a page size but since we have this additional hero item on the first page we subtract this from the total item count so minus zero item count of course we have to wrap this part into parentheses because division takes precedence over subtraction and this can return a decimal value so it can return something like 4.5 pages but we always want to round this up because if we have four and a half page then we need five pages in our pagination bar right so we wrap this into another pair of parentheses and before it we add math.co which rounds this number we pass in here up so 4.5 for example will be rounded up to a 5. okay now we have the number of pages and now we want to modify our Prisma query to only return the current page so we keep the order by we still want to order this with the newest product at the top and after this we add the skip field where we can Define how many items you want to skip because if we are on page 2 we want to skip all the items of the first page so we want to skip current page minus one so if we are on Page tour we want to skip one fully page that's the first page times the page size right now again since we have this hero item on the first page we want to add something to this page size in parentheses we want to check if the current page is equal to one if we are on the first page then we don't want to skip any additional items because we show the hero item so after a question mark we write 0. but if we are not on the first page we want to skip one which is the hero item actually we don't want to skip one we want to skip here or item count first of all this makes it more readable because again we avoid this magic number but this can also now adapt to a two or more hero items so now we have defined how many items we want to skip after this we add another comma and also adds this take field which tells Prisma how many items to return for this page this is obviously the page size but again we have to account for this hero item so we add plus if the current page is the first page question mark then we want to add hero item count to the patreon size otherwise we don't want to add this okay now we have all our values here so we can use them down here on our pagination bar but I want to render this pagination bar only if we have more than one page otherwise it's a bit unnecessary so we check if total pages is greater than one only then we want to render This pagination Bar then for current page we pass the current page that we passed from the URL and for total Pages we pass the total pages that we calculated so now when we save this we only see six items and we are on page one right what happens if we click Page tour we still render our hero item at the top so down here we only have five items now so we want to hide this hero item if we are not on page one so let's scroll up to our hero item right here and render this only if current page is equal to 1. to Amazon science and we wrap this all around this hero item but now we still only have five items here because we are sliced the products and we remove the first item that's the one we were showing in the hero item so what we do is we remove this whole part and instead we add parentheses and here we check if current page is equal to 1 then we want a map from products.slice.1 as we did before but if we are not on the first page colon we want to take the whole products array we don't want to remove the first item if we are on page 2 upwards so now when we save this we see six items let's refresh the page just to make sure that the changes are applied correctly on page three we still see the same six items and eventually we should get to our old items here these ones all of them show six items except for the first page which shows this additional hero item at the top so this works correctly and the currently selected page is content in the URL this is basically how you can maintain state in server components server components don't have real estate they can't use your state but they can put information in the URL like the page number and when you use search params in a server component like we are doing here then this page is automatically dynamically rendered meaning every time we open this page or refresh it we get the latest data and it's not cached this is because next.js recognizes that we are reading the search params which are Dynamic nextges can't know in advance which search params we are passing here for example it can't know which page we are trying to open so if we added newer products to our database they will always be shown here even if we don't compile the project again in production this has the same effect as adding export const we validate equal 0 which I explain in my next.js beginner course this also makes this page dynamically rendered but again search param status automatically and this is also to be heavier we want here usually because when you add new products to your database you usually want to show these changes immediately right okay so our page is already very professional next I want to implement this search functionality here so the search field itself already works right we have already implemented this so if I search for Trooper for example we get redirected to the search page and we add this query as a query param we just haven't set up the page itself yet so let's do that next so we create a new page in the app directory first we have to create a folder search that's the relative URL that we navigate to and then here we put the page TSX as usual and then we export the default function which we call search page and just like on the front page we want to get the search params out of the URL because this contains the search query so we create an interface search page props and here again we need the search params with this exact spelling and this time in here we expect the query which is a string and then here we want to get the search programs out of the props and out of these search params we want to get the query and then we want to fetch these results out of the database so we turn this into an async function this is just a normal server component and in here we create the const products and call await Prisma dot product dot find menu we want to return mailable products and then we add our filter here where colon curly braces and I want to search in both the name and the description of the product so we can use this or operator in our uppercase to which we can pass an array with multiple queries and only one of these queries has to match so we add them between curly braces first we want to search in the name of the product so we write Name colon curly braces and then we have this contents comparator here we want to find this if the name contains the query and the query is the search query that we get out of the URL and then after contains query we add the comma and we set the mode to insensitive which is a string this makes the search case insensitive so it doesn't matter if our query contains uppercase or lowercase letters this will always find the same results then we add a comma at the end and we duplicate this line to add another entry to our or array here just that this time we want to search in the description and again since this is wrapped into or only one of these has to match and I also want to order these results so after the wear down here we add order buyer colon curly braces again we want to order by idea in descending order again the ID contains a timestamp so we have our data and now we want to render this in the UI first of all I want to check if products.length is equal to zero then we want to return a div that says no products found and I want to send that this text on the screen so I add a class name text sender which again is coming from Tailwind so this is an early return in case there are no products that match this query if there are products we want to return them in the list so below we add another return statement we wrap this intuitive inside this diff we want to map our products products.map as usual we get past each product and we want to render the same product cards that we also use on the front page so to this product card we have to pass the product and the key with the product idea we also want to install the script properly so we can copy these class names here from the front page product card grid except for the mi41 we can copy this you can also type them out by hand if you prefer and we add them to this div here so let's save this and see how this looks we are still on the search page right let's refresh this just to be sure and here are our results you can paginate them as well if you want I didn't bother implementing pagination here but you already know how this works let's search for something else like store and it finds our bar stool of course you can customize the search to your preferences okay I also want to add a title to this page and I want this title to depend on the search query so to make this dynamic we export the function generate meta data again the spelling has to be exact as we already know this can take the same props as the page itself so we pass the search page props and get a query out of here this function will return metadata this time we don't have to wrap this into a promise because this will not be a fetched asynchronously we don't need to do a database operation here we just want to use the query itself in the title so I want to set the title tool back text string search column then I put the query in here and then our usual Dash flomas on at the end yeah of course there should be no colon after return so now this says search colon then the query we typed in and then flowmason really cool so featurewise our app is finished but we still have to deploy it and there are some additional steps we have to take but there's one other thing I want to change first and this will require us to implement a Prisma extension Prisma extension is a brand new feature that just became available and this is a very interesting topic that you don't want to skip here so make sure to watch this tutorial all the way to the end the fact that we can create Anonymous shopping carts is really cool but one problem this creates is that we might accumulate a lot of abandoned shopping carts in our database because a user can create an anonymous shopping cart but then delete the cookie for example or maybe they were using the incognito tab which doesn't store cookies across sessions and once this cookie is deleted there is no connection to the shopping cart in the database anymore and also no way for the user to retrieve it anymore instead the next time they add an item to their cards they create a completely newer shopping cart so it might be a good idea to delete these abandoned shopping carts from the database from time to time for this we can check the updated ads timestamp of the card together with the user idea we can for example say okay if a card doesn't belong to a use also if it doesn't have a user idea and it hasn't been updated in a while then we want it deleted and then you can also go through the card items and delete all card items and that belong to the card that you just deleted the problem is right now when we update our card items in our server actions the updated add timestamp of the card is not updated because we are doing these updates directly over the card item model now we can change this and use a relation query as we already did before we use a relation query in our merge cut function down here where we create a card and the card items in one operation this is a socalled relation query because we create card items over this card model here so we create two models at the same time in our server actions we can do the same instead of doing the operation on the card item we change this query so let's start with card item dot delete in the server action file of the shopping cart page so instead of card item delete we can write await Prisma and do it over the card model but we don't want to delete a card we want to delete the card items so on the card itself we are doing an update parentheses curly braces we have fetched the cards that we are updating so we can say we want to update the cartwheel ideal is equal to the card idea and then we add this data field that contains the actual update values and in here we want to update the items which are the card items that belong to the card with this idea so this will find the items with this card idea in the card items collection and in here we can add the delete operation and an idea colon article and car dot idea article in card is what we've filtered up here so this now does the same thing as this operation down here it's a bit longer but now this delete operation is routed over our card model and this later allows us to update the updated add timestamp of the shopping cart of which we change the card items to the latest date so that we always know when was the last time we made changes to the items of this card so now we also delete this operation down here we don't need it anymore and we replace the other two as well so here we are updating card items to do it over the card we write a rate Prisma Dot cards dot update again we use this wear filter and for the data we pass items colon curly braces again this time we want to do an update operation again we need our filter in here well idea is article and cut dot idea again comma and again data with the update values and we want to update the quantity just like we did down here so let's delete this operation as well because we have replaced it and one more below again a weight Prisma Dot cards dot update again with the same filter data this time we're going to create card items so again items colon curly braces create and then they create body which contains the same values as down here the product idea and the quantity and then we delete this operation now let's also do the same in the auto server actions file where we have these two operations let's replace them as well so a weight Prisma Dot card dot update again we paste our wear filter and add the data here we want to update the items and on the items we want to do an update operation with the same filters as shown here so we can copy this part and paste it here and then we delete this old operation and one more then we should be done await Prisma Dot cards dot update where the card idea is this one and then data items and in the future you want to do all your card item updates over the card model to keep this updated as timestamp up to date and in here we write create and then we can copy paste this payload here and delete this operation let's save it or there's one more in the card TS file in the lib folder we have these two operations here but since we do them one after another in a transaction it's enough if we make one of them an update on the card model so let's keep card item delete menu and replace card item create menu so I wait this time it's this TX Prisma client dot cut dot update where the idea is the user card dot idea that's the one we are updating and the local card gets deleted data colon we want to update the card items we want to execute the create many operation and you get Auto completion here by the way this helps you with coming up with these operations and then we want to copy this part down here but we can delete the line with the card idea since we are doing this operation over the cut model this will be set automatically in this nested update and then we can delete to create menu operation below so now we are doing all our card item updates over the card model unfortunately this still doesn't update the updated ads timestamp because this by default is only updated if we actually make changes to a card's document so to a value in here there is an active discussion on GitHub about updating this updated ad timestamp of the parent document when we do a nested query like we are doing here so in the future there might be a setting that you can change to enable this so that the updated ads timestamp of the card is updated automatically even when we only update the card items but right now this doesn't work yet and we have to find our own workaround now one way to handle this would be to just add the updated add timestamp to our update operation and set this to our dates dot now to the current timestamp but of course this is very tedious because we have to remember to do this in every single update operation and we might forget this somewhere now a solution I came up with to fix this is to use a Prisma client extension this is a brand new feature available for Prisma client extensions allow us to hook into our queries for example and then do something in there which will be executed every time we do an operation for this let's go into our prisma.ts file where we initialize our Prisma client and then let's use such an extension to automatically update the updated ads timestamp whenever we do an update operation on the card so what we do is we remove this export from the default Prisma client and we rename it with f2l to press my base and down here we also assign prisoner base to Global for Prisma but the Prisma client that we want to export from this file is the extended one so below we write export const Prisma then we take our Prisma base and call this dollar sign extends a function on there with which we can create a client extension in here we have this query here with which we can hook into the query operations so colon curly braces we want to hook into the queries of the cards so card colon curly braces and in here we want to make a change to the update query because update is what we use in all our server actions when we make changes to the card items and this argument here should be an async function so we write async update parentheses curly braces and in here we can destructure arguments and other competition should help us we need the arcs and the query the arcs contain the actual body of the update so the data that we are passing and to this we want to add the updated Earth timestamp so in here we can make changes to arcs.data then we assign this to a JavaScript object in here we spread the existing arcs.data to keep all the update operations in here comma and additionally we also want to update the updated as timestamp and we want to set this to a newer date which gives us the current timestamp and then below we have to return the query to which we pass these updated arcs okay and this is how we create a Prisma client extension let's format this let's save it and then our route Handler here complaints that's our next off Route Handler it doesn't recognize our extended client as a Prisma client anymore they will probably fix this typing in the future again this is a very new feature but we can get around those by casting this to a Prisma client from Express my slash client like this this way we tell type script relax this is a normal Prisma client again in the future it might not be necessary to use a client extension if they add an option to automatically update the updated ads timestamp even if we don't make a change to the cards document itself but right now we have to go this detour so let's try this out in our database we have this one card right the updated ad timestamp is currently still the same as the created ads timestamp because we haven't changed anything in this document even though we added and we updated card items the updated ads timestamp still has the default value but now with our new changes when I make an update to the card this updated AD timestamp should change so I change the quantity of an item for example let's update this and you can see the newer timestamp let's try it one more time maybe let's add a new item a clone trooper and again right now this is 650 18. and after refreshing this this updates to the current time so now what you can do is you can set up a current job so a task that runs after a certain time interval regularly for this you can use vessel Crown jobs because we will deploy this project to Brazil and this way you can execute a route Handler so a server endpoint from time to time which then checks all your Anonymous cards it checks when they were last updated and if they haven't been updated for a while it deletes the card and the card items that belong to this card and the cards that have a user idea belong to a user so you usually don't want to delete them at all because they are tied to a user account we won't implement this in this tutorial you can figure this out yourself you can also keep the abandoned card items in the database if you want I just wanted to show you how you can update the updated ad timestamp so that you know which cards to delete okay now it's time to deploy our project to production so that we can actually open our website over the internet and as usual the easiest way to deploy an xjs project is via Versa which is a hosting provider and also the company that created and maintains next.js so as you can imagine this is really optimized to deploy an xjs project and all these features like server components and server actions will just work to deploy our project we first have to push it to GitHub you can do this right in vs code over the source control tab here you want to push your project to a GitHub repository this repository can be private doesn't have to be public and then you want to sign up on the sale and connect it to your GitHub account because then we can just click on ADD newer and add a new project and this shows us all our projects on our GitHub account right now I'm logged into coding and flow and here I can just click on import and add the next.js eCommerce project however before we deploy this we have to make a few more preparations first of all we go back into our project and open the package.json here we have to add a post and style script this is described in the Prisma documentation otherwise if we try to deploy this project on bezel we will get an error this is explained here it happens because of the way that they catches the Prisma client we have to add this post install script here in our package.json so this goes into the scripts block like this then we want to push this change to our main branch so add Prisma post install script commit and push then we also go into our Atlas backend go to the network access tab where right now we only allow connections from our localhost right so we click on ADD IP address and in order to be able to connect from Brazil we have to allow access from anywhere which adds this zero IP address because the cell uses serverless functions we don't have our own server machine with a single IP address and Status IP address can change so we have to allow access from anywhere but our database is still protected by the password so this doesn't mean anyone can make changes to our database we still need the correct password so we confirmed this then let's go back to Brazil and import our project here so we click on import it automatically recognizes that this is an xjs project we don't have to change any build and output settings but we need to add our environment variables so in here we put the same and for variables that we have in our DOT end file the database URL which is the same as here then we click on ADD and then we can add another one Google client idea add client Secret we don't have a next half URL yet because we don't know our URL in advance the cell actually gives us a Freer URL under dot the cell dot app but I don't know this one in advance so I'm gonna add a placeholder here HTTP colon slash slash and I'm just gonna write placeholder.com I think this will work we will later replace this for the actual URL we get from USA and the next of the secret which again is just any random combination of characters so I just type in a new one here click on ADD and then we click on deployer and hope that this works this will take a minute or so that's me in the corner that's me and the spot light oh and it worked nice congratulations you just deployed a new project to Brazil and we even get confetti okay let's click on continue to dashboard and then we get different domains for Freon and we have a separate domain for each commit basically that's this one here we have a domain for this main branch and then we have this domain here which basically just references the project so as you can see it has the project name next.js ecommerce recording coding and floor dotzel.deb let's open this one here because this one will stay the same even if we deploy more changes we copy this URL because we still have to edit as the redirect URL to our Google Cloud project so let's edit our oauth client and add this new redirect URL with our desire domain and then the same endpoint here after the slash because this is what next off requires we saved us and now we should be able to log in on our bezel domain as well so let's see if this works we are still locked out right now let's see if we can add an item to the card this seems to work let me close the website and open it again and see if the card is still intact refresh the page this seems to work let's take a look into our database where we should find a newer card without a user idea that's this one here and we should have the same card idea in our cookie so let's check the application tab and here is the local card idea that ends with 597 so this works just like in development let's see if we can log into our Google account yeah and it works and it merged this new Clone Trooper into our shopping cart and whenever you make a change to your project you only have to push these changes to the main branch and they will automatically be deployed by Brazil you don't even have to click anything every change that you push to the main branch will automatically be deployed and then a minute later it will be available on your website let's also check if the social media preview works for this we can use this social share preview.com website and here we can add our domain and then see if we see our open craft image so flomazon we make your wallet cry and there's our OG image as I explained this is this open craft image in our app folder I added this to the starting project but for a single product page on slash products slash idea we use the product image as the OG image so let's see if this works as well so I go to a single product I copy this URL and then we should see our Clone Trooper instead Clone Trooper flomas on and the description of the product and this is what you will see if you post a link to our website on Facebook Twitter or any of these social media websites really cool congratulations you built your own Ecommerce website and deployed it to production now you could buy a domain for example a real domain connected to your project and then put Amazon out of business if this tutorial was any helpful please do me a favor and leave a like on this video this shows me that there's more interest into turrets like this and also leave a comment what kind of project tutorials you want to see in the future and lastly I would be happy if you'll follow me on Twitter because there are a release regular little coding tips that I figure out while I'm preparing these projects my Twitter handle is coding and Flow and then I wish you a nice rest of the day happy coding take care
