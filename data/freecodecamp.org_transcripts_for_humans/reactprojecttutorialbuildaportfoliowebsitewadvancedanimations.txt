With timestamps:

00:00 - in this course slobodan will help you
00:02 - improve your react skills by teaching
00:05 - you how to build a portfolio website
00:07 - that has cool javascript animations
00:10 - if you're looking to build an awesome
00:12 - react portfolio website you come to a
00:14 - perfect place in this tutorial i will
00:16 - show you how to build breathtaking
00:18 - website with advanced animations using
00:20 - various techniques like gsap library
00:23 - animate.css and custom css animations
00:26 - together we will add a pacman page
00:28 - loader also i will show you how you can
00:30 - create and implement contact form using
00:33 - only email.js library without a need to
00:35 - set up a server and you will learn to
00:37 - implement maps on your website and much
00:39 - much more sounds interesting
00:42 - please join
00:43 - wait for me
00:45 - first thing first let's create react
00:47 - application using mpx create react app
00:51 - and pass in the name of the application
00:53 - in this case it's react portfolio it
00:56 - will install all the packages that you
00:57 - need for react application
01:00 - after project installation is done we
01:02 - want to change directory to the project
01:04 - itself and first let's install all the
01:06 - packages that we're going to be using so
01:08 - that we can later focus only on coding
01:11 - and not installing the first package is
01:13 - email.js which we'll be using to
01:16 - implement the contact form
01:17 - so type in mpmi email.js
01:20 - browser
01:22 - the next package is for our font icons
01:25 - so it's at fort awesome
01:27 - free brands svg icons and we're gonna
01:30 - install a couple of these font icon
01:31 - versions
01:33 - after done clear the console
01:36 - and the next one is fort awesome slash
01:39 - free solid svg icons
01:42 - so we're gonna use the free packages for
01:44 - fonts
01:46 - solid icons are going to be used for the
01:47 - navigation on the left side the next
01:50 - package is ford awesome slash react
01:53 - font awesome this is a wrap up for the
01:56 - font awesome so you can use it easily on
01:58 - react
01:59 - the next one is anime.css
02:02 - it's a css library for animating the
02:05 - objects and fonts
02:07 - it's really cool you'll see it
02:08 - now for more advanced animations we're
02:10 - gonna use gsapp i'm installing gsab
02:13 - trial as i didn't want it to create any
02:15 - accounts
02:16 - next package is
02:18 - loaders.css it's a package for loaders
02:21 - right so we're gonna add a pacman in
02:23 - between the pages in our application
02:25 - you'll see it's really cool the next one
02:27 - is react dashly fleet so on our contacts
02:30 - page we're gonna have a map and this is
02:32 - a wrap-up library for using leaflet maps
02:35 - the next package is react dash loaders
02:38 - we installed the loaders.css previously
02:41 - and this is for react integration so
02:43 - it's really easy to use the loaders
02:45 - inside of the react
02:46 - the next one is the standard package
02:48 - inside of to react is react dash router
02:51 - dash dom so as we are going to have
02:53 - three pages in our application this is
02:55 - going to help us to navigate through
02:58 - and for styling i'm going to be using
03:00 - the sas as it helps you to write less
03:02 - code
03:02 - and to use some of the operations like
03:04 - for and variables
03:06 - and we are finally done with installing
03:08 - the packages and now i want to open the
03:10 - project that we just created inside of
03:12 - the visual studio code
03:15 - the first thing that i want to add
03:17 - inside of my root folder is to print
03:19 - your configuration file
03:21 - and name of the file is dot pre-tier rc
03:24 - i'll let this plugin worry about the
03:26 - formatting and i'm going to worry about
03:28 - the coding and focus on and the default
03:30 - settings that i set up is that trailing
03:31 - commas are going to be enabled tab width
03:34 - is going to be two
03:36 - i'm going to remove the semicolons and
03:38 - add a single quotes
03:40 - also as we are going to be using scss i
03:42 - want to update app file
03:45 - and also update the import inside of the
03:47 - app component so instead of the app.css
03:51 - add just has to be sas extension
03:55 - now let's define some of the global
03:56 - styles inside of our
03:59 - file
04:00 - i'll define primary color to this yellow
04:03 - ffd700
04:05 - it's used inside of the animate.css
04:07 - library so it's needed in order to use
04:10 - it then import the anime css and let's
04:13 - define the font faces that we're going
04:15 - to be using and default font is going to
04:17 - be helvetica new
04:19 - and let's enter the url of the font
04:21 - which is going to be inside of the
04:22 - assets folder
04:24 - inside of the fonts folder and the name
04:26 - of the file is helvetica dash new dot
04:29 - ttf and format let's add ttf
04:32 - now let's add the assets folder to our
04:35 - project and inside of this assets folder
04:37 - we're gonna have images and fonts and
04:40 - i'm gonna put the link to the assets
04:41 - folder in the description so that you
04:43 - can build entire and same application as
04:47 - i'm doing here
04:48 - so okay we have the assets folder now
04:51 - let's link it inside of our app css file
04:53 - the rest of the fund families
04:55 - i'll just copy paste the first font face
04:58 - three times as we're going to use three
05:00 - fonts
05:01 - the next font is going to be named
05:03 - labelle aurora
05:04 - we're going to use this phone for
05:06 - styling the tags on our background
05:09 - very nice font
05:11 - and the name of the file is labelled
05:12 - aurora with camelcase and the format is
05:16 - buff 2
05:17 - and the last font is going to be
05:19 - colverica
05:21 - and the file name is going to be
05:23 - colverica rg for regular dash regular
05:27 - and format is going to be again well f2
05:31 - and you're done with the font faces
05:34 - and now i just want to add a default
05:36 - font for input and text areas
05:38 - so i'm gonna be using font family
05:40 - helvetica new
05:44 - now let's just start our application to
05:46 - see does it work and have we break
05:48 - anything until this point
05:50 - so run npm start from the console
05:53 - and we have our app up and running
05:57 - now the next thing which i want to do is
05:59 - inside of the index.css file i want to
06:02 - remove some of the predefined styles to
06:05 - the code
06:06 - and to change the font family
06:09 - first i'll define html selector and i'm
06:13 - going to set the font size to 62.5
06:16 - percent
06:17 - for body let's set the 300 as a font
06:20 - weight eleven as of font size pixels and
06:23 - 1.4 as a line height and a default font
06:26 - should be helvetica new
06:28 - as a fallback font we're gonna use sun
06:30 - serif for the color put the 444
06:35 - and for the background color the hash
06:37 - code is 0 2 2 c
06:39 - 4 3.
06:42 - put the overflow hidden and a display
06:44 - block
06:47 - and those should be default values for a
06:49 - body tag
06:53 - okay now let's open up a index.js file
06:57 - and close all the other files
06:59 - and inside of the index.js file i want
07:02 - to import browser auto module
07:04 - and wrap our application around it this
07:07 - provides us with ability to use the
07:10 - routes inside of our application next we
07:12 - can open up the app.js file and this is
07:15 - the file where i'm gonna be defining our
07:18 - routes
07:19 - so remove the boilerplate code
07:22 - and import the routes from react router
07:24 - dom
07:26 - next import a single route and place it
07:29 - inside of the routes here we're going to
07:31 - define the first
07:33 - path which is going to hold the layout
07:35 - component
07:36 - and we're going to create that just in a
07:37 - second
07:39 - so the element is going to be a layout
07:40 - but as we don't have this component yet
07:43 - let's create it
07:44 - first i want to create a components
07:46 - folder for all our components and i'm
07:48 - going to place that inside of the source
07:50 - directory
07:51 - now inside of the components
07:54 - let's create a new folder and name it as
07:57 - a layout
07:58 - obviously i'm gonna place layout
08:00 - component there
08:02 - then inside of that layout folder add a
08:04 - new file and call it index.js it's
08:07 - easier for later on imports
08:09 - and add index.css file
08:12 - so this is going to be the pattern that
08:14 - we're going to use for all of our
08:15 - components
08:17 - and the first thing that we want to
08:18 - import inside of our index.js file is
08:21 - our scss file so that we don't forget it
08:24 - later on
08:25 - all of our components are going to be
08:27 - functional components so i'm going to
08:29 - follow the same pattern for every single
08:31 - component const name layout is equal the
08:34 - arrow function
08:36 - here we're just going to create a
08:37 - boilerplate code so that we can import
08:39 - it inside of our app file
08:41 - and export default layout now we can
08:43 - remove the logo which is from
08:45 - boilerplate code
08:46 - and import our layout component
08:50 - and let's save it and preview it
08:52 - and we haven't imported the route so
08:54 - let's do that
08:57 - and now as we can see it works correctly
08:59 - so we set up our first component and our
09:01 - first route
09:03 - we can start building our layout first
09:05 - we're gonna build left sidebar so inside
09:08 - of the components folder
09:10 - create another folder named sidebar
09:12 - inside of this folder we want to create
09:14 - index.js file and
09:16 - index.scss file
09:18 - same as we do for other
09:20 - components close other files so they are
09:23 - not confusing us and the first thing
09:25 - that i always do is to import styles on
09:28 - top of our index.js file
09:31 - and now let's create a sidebar dummy
09:33 - component so that we can import it
09:35 - inside of the layout
09:36 - so add const sidebar equals a dummy fat
09:39 - arrow function
09:40 - and export default sidebar and just put
09:43 - the text hello from the parentheses
09:47 - and now we can import that inside of the
09:49 - layout
09:50 - and continue building
09:53 - so inside of the layout index.js file
09:55 - instead of the hello
09:56 - just import the sidebar component
10:00 - and we have connected that as you can
10:01 - see
10:06 - remove this dummy text and inside of the
10:08 - parentheses
10:09 - we want to add a div with a class name
10:11 - of a navbar
10:13 - navbar actually
10:14 - inside of the nail bar import the link
10:17 - from react router dom
10:19 - and edit the name
10:20 - class name logo
10:22 - and this is going to be a default home
10:24 - page so
10:26 - two is going to route to the slash to
10:28 - home page
10:29 - inside of the logo
10:31 - we want to obviously display the logo so
10:34 - add the image with the source
10:36 - and let's import the logo s for slobodan
10:39 - or slova
10:40 - so import os from assets folder images
10:45 - and the name of the file is logo dash
10:48 - s.png
10:50 - place the image inside of the source
10:52 - file
10:53 - and add alt attribute as a logo
10:56 - now we want to duplicate the image
10:59 - and import that new image as well as
11:01 - we're going to have two images one is
11:03 - going to be s and the other one is going
11:05 - to be rest of my name underneath of it
11:08 - slow but on so let's import both of
11:10 - these
11:11 - and let's add to second image logo
11:13 - subtitle
11:14 - as it's like a subtitle to our logo and
11:16 - update the l to slower down
11:18 - we can't even see our images on the page
11:21 - as they are too large and they are
11:22 - overflowing our page
11:24 - so let's add some styles inside of the
11:26 - index.scss file
11:29 - add a class name of navbar
11:31 - and instead of it
11:33 - set the background to
11:34 - 181818 it's very dark background
11:37 - set the width of 60 pixels
11:41 - height is going to be a hundred percent
11:43 - position
11:44 - absolute
11:46 - top left z index three
11:49 - set the minimum height to 500 pixels
11:52 - because on the smaller screens we don't
11:53 - want to get the overflow on our
11:55 - container and it's better to have
11:57 - some scroll bar
11:59 - so for our logo container set the
12:01 - display to block and put the padding on
12:04 - top and bottom to 8 pixels left and
12:07 - right let it be
12:09 - and for the image itself
12:11 - set the display to block
12:13 - and margin to 8 pixels auto so it's
12:17 - centered
12:18 - width to 24 pixels and now we can
12:20 - finally see it
12:22 - completely set height to auto
12:25 - and for our second
12:27 - image
12:28 - we want to set the subtitle logo
12:31 - and set the width to 50 pixels
12:34 - but i think that we forgot to add
12:36 - subclass so let's do that
12:40 - add a class name to our
12:42 - sub logo and it should work now
12:45 - and that's our home logo image only so
12:48 - below that we want to add navigation
12:50 - with the links to every single page that
12:52 - we have so add a nav tag
12:55 - and inside of the knapsack add the nav
12:57 - link first navlet is going to be our
13:00 - home page so set the exact to true
13:03 - active class name to active so that it
13:06 - helps us to style the active link and
13:09 - two is going to be slash
13:10 - inside of our envelope import the font
13:12 - awesome icon
13:14 - and for the icon set it for home
13:16 - it's gonna display nice little home for
13:19 - the color we want this gray color 4d 4d
13:23 - for e and it's going to be used for all
13:25 - our icons
13:26 - as you can see we got the small house in
13:28 - our sidebar
13:30 - now let's copy paste it three times
13:33 - next link is going to be about section
13:36 - so for the icon import file user
13:39 - and put the route to about
13:42 - also we will need a class so that we can
13:45 - actually add the content on hover
13:47 - so add the class name about link
13:51 - for a third icon is going to be fa
13:54 - envelope
13:55 - which is going to be a contact page so
13:57 - add a class name of contact link
13:59 - and add to
14:01 - slash contact
14:03 - we have our navigation now but it
14:05 - doesn't work and it also doesn't look
14:06 - nice so let's add some styles go inside
14:09 - of the index style file and add an app
14:12 - tag
14:13 - inside of the nav tag add these
14:15 - properties set the display to block
14:18 - text align its center
14:21 - position
14:22 - absolute
14:23 - set the height to 210 pixels
14:26 - and we want to position our nav in the
14:28 - middle so we need to set the top to 50
14:32 - and on top of that we want to give a
14:34 - negative margin of
14:36 - minus 120 pixels
14:38 - set the width to 100
14:40 - and for the links
14:42 - add a font size of 22 pixels
14:45 - and set the color to
14:47 - 40 4e
14:50 - which is a gray color set the display to
14:52 - block
14:53 - and set the line height to 51 pixel
14:56 - height is going to be the same 51 pixel
14:59 - and set the position to the relative
15:02 - you can see now how it's laid out
15:05 - and the last thing for nav links we want
15:07 - to remove the text decoration so set the
15:09 - text decoration to none
15:11 - now let's add some transition to our to
15:14 - our links so for the i set the
15:16 - transition for all the elements
15:18 - 0.3 seconds is out
15:20 - and on hover we want to set the color of
15:23 - our links to yellow
15:25 - and svg we want to set opacity to zero
15:28 - so as you can see when we hover over the
15:30 - svg icon it disappears but we want to
15:33 - add the content now so instead of the
15:35 - logo we see the text
15:38 - so set the after opacity 1. now for all
15:41 - of our after elements we want to set
15:43 - some default values set the content to
15:46 - empty string font size to 9 pixels
15:48 - set the letter spacing to 2 pixels
15:51 - for the position property we want to set
15:53 - an absolute value
15:55 - bottom set to zero we want to set the
15:57 - display block and a width of a hundred
16:00 - percent
16:02 - text align to center
16:03 - and we want to set the initial opacity
16:05 - to zero so that we can fade in in order
16:08 - to have a smooth transition we need to
16:10 - add transition property for all set to
16:13 - 0.3 seconds as ease out
16:16 - and now let's alter the content for the
16:18 - first child set the content as home
16:24 - and as you can see when you hover we get
16:26 - the home text
16:30 - we can do the same for rest of the links
16:32 - we can target them using the classes as
16:34 - we added the class name use the about
16:36 - link to target the second element and
16:39 - for the after set the content for about
16:42 - and as you can see we have the about
16:44 - link as well now so we can just copy
16:46 - paste our about link and we can update
16:49 - the about to contact so let it be
16:52 - contact link and for the contact to be
16:54 - contact and now we have all the links
16:57 - and tags on hover and the last thing
16:59 - that is left to be done in this section
17:01 - is to add active class to our active
17:04 - route link
17:05 - so add the active class and set the svg
17:08 - to this yellow color as we are on the
17:11 - home page the active class gets
17:13 - activated on the first link and we are
17:14 - getting active class so we get this
17:17 - beautiful yellow color
17:19 - the last part that we want to add to our
17:21 - navbar is to add the links to our
17:24 - outside accounts and the profiles like
17:25 - youtube github linkedin and similar
17:28 - having that in mind i'll add unordered
17:31 - list inside of the list i'll add li tag
17:34 - with an anchor tag again we're gonna use
17:37 - the icons for links
17:39 - so the first one is going to be
17:41 - font awesome for the icon i'm gonna set
17:44 - the linkedin
17:45 - the color is going to be the gray color
17:47 - as we use for our top navigation as well
17:51 - the target for it is going to be blank
17:53 - so we want to open the links in the new
17:55 - page
17:56 - and we want to set the row
17:58 - as well
17:59 - for the href i'm just gonna paste the
18:01 - link to my linkedin account but
18:03 - obviously you will use yours and just to
18:06 - test if the link works correctly i can
18:08 - open up my page
18:09 - let's close it now we can just copy
18:11 - paste over the link that we just created
18:14 - and update the icons for others and the
18:16 - links
18:17 - for the second one i'm gonna use the
18:19 - github so the icon is f github and i'm
18:23 - just gonna paste in the link to my
18:24 - github account the next link is linked
18:27 - to the youtube channel so add the fa
18:29 - youtube icon and i'm gonna put the link
18:32 - to my youtube channel here if you don't
18:34 - have a youtube account obviously you're
18:36 - gonna remove this icon
18:38 - the last link that we're gonna navigate
18:39 - to is the skype so add the fa skype
18:43 - icon and update the href with the skype
18:46 - prefix
18:47 - after the prefix you want to add a skype
18:49 - username
18:51 - everything else is the same so now that
18:53 - we linked all of our accounts we can
18:55 - style them to look nicely
18:58 - first element that we want to target is
19:00 - our unordered list
19:02 - so set the position to the absolute and
19:05 - we want to place it on the bottom of our
19:06 - screen so bottom position 20 pixels
19:10 - what is going to be a hundred percent
19:13 - and we want it to be displayed as block
19:16 - also set the padding to zero
19:18 - list style to none we want to remove the
19:21 - bullet points and align the text to
19:24 - center
19:25 - set the margin to 0 as well
19:29 - the next we want to style are anchor
19:31 - tags inside of the list items so set the
19:34 - padding on top and bottom to 7 pixels
19:37 - and the left and the right side to zero
19:39 - we want to display them as a block and
19:41 - to give it a font size of 15 pixel
19:45 - set the line height to 16 pixels
19:48 - and the color actually we don't need as
19:50 - that is set on the icon itself
19:52 - and when we hover over our links we want
19:54 - to set the color to be yellow same as we
19:57 - have on our nav links as well
19:59 - but we want to do that on the svg so add
20:01 - svg there please and if we hover over we
20:04 - can see that we have nice yellow color
20:06 - and that makes our layout complete on
20:09 - the left side let's continue with our
20:10 - home page
20:12 - but one thing i noticed that if we hover
20:14 - over our nav links you can actually see
20:16 - that the font isn't applied this is a
20:18 - default font and if you go to the
20:21 - index.css file we can see that i used
20:23 - font family which is used for a font
20:25 - name not for the all properties of the
20:27 - font itself if we save that
20:30 - we can now see that the font is actually
20:32 - being applied
20:33 - so please fix this error if you're
20:35 - following along
20:37 - before starting with the content of the
20:38 - home page i want to add some of the
20:40 - elements that are going to be used
20:42 - across our application these elements
20:44 - are going to be placed in the background
20:46 - but they're going to add the feel of a
20:48 - web developer because we're gonna
20:50 - display on top html and body text and on
20:53 - the bottom as well
20:54 - so inside of the layout folder and in
20:56 - the js file we want to add a class name
20:59 - with a app so this is going to be the
21:01 - main wrapper of our application and we
21:04 - want to add a class name of page and
21:06 - inside of this element i will set an
21:09 - outlet where we will render all the
21:11 - pages
21:12 - in our application which will be like a
21:14 - placeholder so import the outlet from
21:17 - react router dom before the outlet i
21:19 - already inserted top tags with body tag
21:23 - now i want to do that for the bottom as
21:25 - well so we will import the body tags and
21:28 - we will add a class name of tags
21:30 - and bottom tags and inside of it i want
21:33 - to paste in the body code add the break
21:35 - line and add the html tag as well
21:39 - so add a class name of bottom text html
21:42 - so that we can move it slightly and make
21:44 - a difference of the body tags now i just
21:46 - paste in the code of the html tags that
21:48 - i copied over from the web and who
21:50 - really can remember those characters now
21:52 - let's add some styles to our tags open
21:55 - up the index.scss file let's set the
21:58 - width and the height of the page set for
22:00 - both of these to a hundred percent and
22:02 - set the position to be absolute
22:06 - for our top tags we want to set bottom
22:09 - position to be set as auto and for top
22:13 - we want 35 pixels
22:16 - for tags general class
22:18 - set the color to be this
22:20 - this yellow default color that we use
22:22 - across our application
22:24 - but i just want to reduce the opacity by
22:26 - a bit so set it opacity 0.6
22:31 - position will be absolute and the bottom
22:33 - will be set to zero
22:36 - left is going to be 120 pixels
22:41 - set the font size to 18 pixels and
22:44 - finally now we can see our body tags and
22:46 - what we are calling actually
22:48 - set the font family to a label or this
22:51 - nice font which will give such a good
22:53 - styling to our body tags and for our
22:56 - body tech html i want to add -20 pixel
22:59 - indentation
23:01 - so that we actually have that feeling of
23:03 - the real code
23:05 - as we have our main layout setup we want
23:08 - to create a home page finally so inside
23:10 - of the components folder add a home
23:12 - folder
23:14 - inside of the home folder as always add
23:16 - index.js file and
23:18 - index.scss file we want to create just a
23:21 - dummy home component so that we can
23:23 - import that inside of our router
23:25 - const home equals hello
23:29 - and export default home
23:33 - next we can import our home component
23:35 - inside of the app.js file so add a new
23:38 - route with a path
23:40 - of actually you don't need a path we
23:42 - just set it as indexed and element is
23:45 - going to be the home component
23:48 - now we can bring in some content into
23:50 - our home page let's do that open up
23:52 - index.js file inside of the home folder
23:55 - and remove the implicit return
23:58 - inside of the curly braces i will add a
24:00 - return
24:01 - and inside of the return let's add a div
24:04 - deal with the class name of container
24:07 - and a class name of home page
24:10 - inside the container
24:12 - i will add a text zone div
24:14 - this div will contain the animated text
24:16 - on the left side of our screen
24:20 - in the text zone
24:22 - add the h1 title
24:24 - and inside of the title
24:25 - add the following text
24:28 - hi comma then we will add a break
24:31 - i'm
24:32 - and after that it should say hi i'm
24:34 - slobodan for the first letter of my name
24:37 - i will use an image which will be styled
24:39 - differently so let's add an image tag
24:41 - and for the source we're going to import
24:43 - the image later and for the alt tag add
24:46 - the developer
24:48 - image is going to be exactly the same as
24:50 - we use on the left sidebar so let's
24:52 - import it import logo title from the
24:55 - assets images and the file name is logo
24:58 - dash s.png
25:00 - and now just place the logo title inside
25:02 - of the source attribute
25:04 - okay this is linked properly but it
25:06 - lacks some styling as you may see
25:09 - let's continue with building our page
25:11 - below the image let's add the rest of
25:14 - the word lobodon with s is going to be
25:16 - my name slobodan and add the break
25:19 - and below it's going to say web
25:21 - developer
25:22 - and we actually need to surround all the
25:24 - text that you've written inside of the
25:25 - h1 title not just the first two words
25:28 - below this
25:30 - i will add h2 title
25:32 - first i said who i am next i want to say
25:35 - what i do so it's very visible once
25:38 - somebody lands on your first page so i'm
25:40 - a front-end developer and javascript
25:42 - expert and also i create youtube content
25:45 - as well
25:46 - and below that we want to add a link
25:48 - button so this will link to our contact
25:51 - page so that actually somebody can
25:53 - contact you in case he has a project for
25:55 - you full-time job collaboration or he
25:58 - just wants to say hello two is going to
26:00 - be slash contact and we're going to add
26:02 - this to our route later on and class
26:04 - name add a flat button so we can style
26:07 - it
26:08 - now open the index scss file inside of
26:10 - the layout folder the styles that we're
26:12 - going to add here are going to be the
26:14 - same for every single page so we don't
26:16 - want to duplicate them let's put them
26:18 - inside of the layout and it will be
26:19 - applied to all the pages
26:21 - set the width to be a hundred percent
26:24 - we'll change the contents
26:25 - height to ninety percent
26:27 - min height to 566 pixels
26:31 - set the position to be absolute and the
26:33 - opacity to be zero container will have
26:36 - fade in animation that's why the opacity
26:38 - needs to be zero at the beginning set it
26:40 - up to be five percent
26:42 - margin zero auto
26:44 - z index to be one transform style
26:47 - preserve 3d
26:50 - and animation fade in this is the
26:52 - animation from
26:54 - animate.scss duration is one second and
26:57 - let it end forwards add animation delay
26:59 - to one second and the rest of the styles
27:01 - we're gonna place inside of the
27:03 - index.css file in our home folder
27:06 - inside of our index.js file in the home
27:09 - page folder import our index scss file
27:14 - now we can open our style file and on
27:16 - top of our file let's add the first
27:18 - class home page inside of that home page
27:21 - we want to target h1 tag and inside of
27:23 - the h1 we have an image
27:25 - that is overlarged so put the size to 32
27:28 - pixels and we can finally see the rest
27:31 - of the h1 title
27:33 - so target detects zone and position it
27:35 - absolute
27:37 - for the left position property put it as
27:39 - a 10 percent so that we can see it and
27:41 - it's not positioned below the sidebar
27:44 - put it up 50 percent as we want this to
27:46 - be centered as i want our text zone to
27:49 - be in the dead center add the transform
27:51 - translate y property and put the minus
27:54 - 50 percent so it moves the text zone a
27:56 - little bit on top the width is going to
27:58 - be 40 percent as we are going to have a
28:00 - 60 of the other elements on the right
28:02 - side and the max height is going to be
28:04 - 90
28:05 - next let's add some styles to our title
28:08 - first put the color to be white and you
28:10 - can see how that stands out now
28:13 - and let's increase the font size to 53
28:16 - pixels so it's nice and visible we want
28:19 - this to stand out when somebody lands on
28:20 - our index page
28:22 - put the margin to be zero
28:24 - and for the fun family put the call
28:27 - vertica
28:28 - and for our weight i just want it
28:29 - slightly to be less bold so the font
28:32 - weight is going to be 400 as i want this
28:35 - portfolio to give the user feeling that
28:37 - he's on a developer portfolio
28:39 - i want to add h1 tags around our titles
28:43 - similar what we did for the body and
28:44 - html tag so we're going to do that with
28:47 - the before and after of the title
28:49 - use the content h1 for the font family
28:52 - again we're gonna use label auror
28:55 - and color is going to be yellow font
28:58 - size we want to reduce it to 18 pixels
29:01 - set the position to absolute
29:05 - as i want this tag to be slightly on top
29:07 - of our title
29:08 - put the margin top
29:10 - of minus 40 pixels
29:13 - and place the slight indentation so left
29:15 - is going to be 15 pixels
29:18 - and just to fade out a little bit so the
29:20 - opacity is 0.6
29:23 - now let's do the similar for the after
29:25 - as well so content is going to be
29:27 - closing h1 tags
29:29 - without the space
29:31 - fun family is going to be the same
29:34 - label or
29:35 - most of the properties are going to be
29:37 - the same for the h1b4 and h1 after color
29:41 - is going to be the yellow
29:42 - the font size
29:44 - is going to be 18 pixels
29:46 - position is going to be an absolute
29:50 - set the margin top to 18 pixels margin
29:54 - left to 20 pixels
29:56 - and we want this to animate along with
29:58 - the text
29:59 - so put the animation fading one seconds
30:02 - and delay 1.7 seconds
30:05 - and backwards
30:07 - for the fill in mode and for the opacity
30:09 - is going to be the same 0.6 as for the
30:12 - b4
30:13 - let's reload the page to see our fading
30:15 - animation
30:18 - that's much better
30:20 - let's style the rest of our text zone
30:24 - for the s letter inside of our text
30:26 - let's add a little bit of space on the
30:27 - left side so put the margin left of 20
30:30 - pixels set the opacity of zero because
30:33 - we will adding the fading animation
30:35 - actually the rotation animation
30:37 - height is going to be auto and the
30:39 - animation is going to be rotate in
30:42 - one second long linear and fill in mode
30:45 - both
30:47 - and for the animation delay i will add
30:49 - 1.4 seconds as you want this animation
30:52 - to start a little bit after as we are
30:54 - going to be add some of the loaders
30:56 - later on
30:57 - now we can move on on our subtitle set
31:00 - the color to be ada 80 hash code
31:05 - set the margin top to 20 pixels
31:08 - font weight to 400
31:10 - font size it's going to be 11 pixels
31:14 - for the fun family let's use good old
31:16 - sun serif and i want to spread the
31:19 - letters out so set the letter spacing to
31:21 - 3 pixels
31:23 - and we will be animating the h2 as well
31:26 - so put the animation as fade in
31:29 - one second long
31:30 - 1.8 seconds delay and set the filling
31:34 - mode as backwards
31:36 - the last but not the least is our
31:38 - contact button so use the flat button
31:40 - class that we use inside of our jsx
31:43 - set the color to be this default yellow
31:44 - color font size to 13 pixels font weight
31:48 - to be 400
31:50 - for our button i want letter spacing to
31:52 - be 4 pixels
31:55 - for the font family let's use good old
31:57 - sun serif
31:58 - again we don't want this to be presented
32:01 - as a link so text decoration set to none
32:04 - and let me add a little bit of padding
32:06 - on top and bottom put the 10 pixels and
32:09 - 18 pixels on the left and right side
32:12 - for the border let's set it to one pixel
32:14 - solid and our default yellow color
32:16 - we want a margin top 25 pixels
32:20 - and to float to left side
32:22 - now we also want to animate this as well
32:24 - so put the animation as fade in
32:27 - animation one second duration 1.8 second
32:31 - delay and set the filling mode as
32:34 - backwards actually the name of the
32:36 - animation is fade in
32:38 - there you go
32:39 - and i'll set the white space to no wrap
32:43 - now let's change the styles on the hover
32:45 - event so on the hover let's change the
32:47 - background to be our default yellow
32:50 - and set the color to be this dark 333
32:54 - and that completes our tag zone stylings
32:57 - that's very nice
32:58 - the next thing which we want to do is to
33:00 - animate our text so every single letter
33:02 - needs individually to pop up once the
33:05 - page is loaded and i would like to
33:07 - create a component for that so that we
33:09 - can reuse this component on every single
33:11 - page and we don't have to repeat this
33:13 - process
33:14 - we will just pass in the array of the
33:16 - characters that we want to be animated
33:18 - and this function will return the
33:20 - animated letters
33:22 - so having that in mind inside of the
33:24 - components folder create the animated
33:26 - slatter folder and again create index.js
33:29 - file and index the scss file
33:34 - inside of our index file first thing
33:36 - that we want to do is to import our
33:38 - styles file as always
33:40 - next let's define our functional
33:42 - component
33:43 - so give it a name animated letters
33:46 - and this component will receive three
33:48 - arguments the first argument is going to
33:50 - be the class that we want to apply to
33:52 - our characters the second one is going
33:54 - to be the array of the characters itself
33:57 - and the last one is going to be the
33:58 - index the starting point which will
34:01 - basically set the delay of our letters
34:04 - and the animation the type of the
34:06 - element that you want return is going to
34:07 - be a span as we want it to be an inline
34:10 - element as these individual letters
34:12 - needs to form a letter and a word
34:15 - now let's map to the array of the
34:17 - letters that we received as arguments we
34:19 - get the element and the index itself
34:22 - inside of the map we will return another
34:24 - span
34:26 - and we want to give it a key as every
34:28 - single map inside of the react needs to
34:30 - have a key index
34:32 - so we will add a char which is a
34:34 - basically a letter and an index because
34:36 - we can have the repeated letters here
34:40 - as a class name we're gonna pass the
34:42 - letter class that you receive to the
34:44 - props and we will add an index plus the
34:47 - number that is passed through the
34:49 - properties which is like a starting
34:50 - point so if the index is 5 every single
34:54 - index in the map array it will be
34:56 - increased by 5. and finally this span is
34:58 - going to display the letter that is
35:00 - passed in and just export default
35:02 - animated letters
35:04 - now we can use it inside of our home
35:05 - component let's import it there first
35:08 - let's use the use state hook to define
35:10 - the state of our class
35:12 - as letters can only have one animation
35:14 - and specific moment in time after the
35:17 - initial loading is done we want to add
35:19 - animation on hover so this is why we use
35:22 - use state
35:23 - default animation name is text animate
35:26 - the next what i need to do is to create
35:28 - two arrays for two words that we want to
35:30 - animate
35:31 - these arrays need to hold the characters
35:34 - of the separated letters that we want to
35:36 - animate for the animated letter
35:38 - component that we just created
35:40 - the first array holds the characters
35:43 - lobodon without the s because s is the
35:46 - image that we imported
35:48 - and the second array is going to hold
35:51 - the web developer
35:53 - i need to spell it correctly so i don't
35:55 - make any mistakes
35:56 - and for the first two words hi i'm i'm
35:59 - manually gonna add the classes without
36:02 - using animated letters component
36:04 - finally replace slobodan word and import
36:07 - the animated lattice component that we
36:09 - created for the letter class attribute
36:12 - passing the letter class variable that
36:14 - we defined in the use statehook for the
36:17 - string array attribute pass in the name
36:19 - array which is lower down the words that
36:21 - we just defined on top
36:23 - and for the idx put the 15 number so our
36:26 - classes are going to start from 15 index
36:29 - let's open up the console and see does
36:31 - it work
36:32 - if you refresh the page and inspect the
36:35 - letters
36:36 - you can actually see that every single
36:38 - letter has text animate it's a single
36:40 - span and it has different index
36:43 - nice
36:45 - now let's do the same for the web
36:46 - developer part
36:48 - let's reuse the code that we just coded
36:51 - out and just replace the string array to
36:53 - put in the job array and for index
36:58 - set it to 22.
36:59 - the last thing that is done is the first
37:01 - two words so like i said i'm gonna do
37:03 - that manually
37:06 - add a spam tag with the h letter in it
37:09 - for hi
37:10 - and class name is going to be letter
37:12 - class that is default class for
37:14 - animating our letters now we want to
37:16 - copy over this span and change the class
37:20 - only the first letter has just text
37:23 - animate class every next letter has a
37:26 - delay class as well because we don't
37:27 - want these letters to appear at the same
37:29 - time so we are adding the second part
37:32 - and the index that we are using later on
37:34 - to add a slight delay to animation so
37:37 - the letters are appearing in a sequence
37:41 - so the second letter has the delay of 12
37:44 - which will be actually 1.2 seconds delay
37:47 - and copy paste that over to add to two
37:50 - additional letters
37:51 - hi i'm
37:53 - so and we actually need to update
37:56 - remove this part and update the indexes
37:58 - to 13 and 14.
38:00 - as we have classes in place now we want
38:02 - to add styles to them so open index
38:05 - style file from the animated letters and
38:08 - let's add it
38:09 - default class for text animation is text
38:11 - animate
38:12 - so set the display to inline block as we
38:15 - want this to appear as a word and a
38:17 - sentence the initial opacity is going to
38:20 - be zero so we want them to pop out
38:23 - set the animation as a bouncy end and
38:25 - duration for this animation let it be to
38:28 - one second and one second delay if you
38:30 - want the letters to stay visible set the
38:33 - animation film mode to forwards and set
38:35 - the minimum width to 10 pixels so that
38:38 - they don't jump around
38:40 - as you can see now all the letters do
38:42 - appear at the same time so what we want
38:44 - to do is we want to add a delay to the
38:46 - indexes that we created and every single
38:49 - letter is going to appear one by one
38:51 - we're gonna use for loop inside of the
38:54 - sas this is a great feature so that we
38:56 - don't have to manually code classes from
38:58 - 1 to 35 use the loop and go from the
39:01 - indexes from 1 to 35. inside of the loop
39:05 - we are creating textanimate class with
39:07 - underscore and the index from the loop
39:10 - and we are adding animation delay
39:12 - animation delay is dividing index by 10
39:15 - so for every single letter we're getting
39:17 - 10th of a second
39:18 - and when we refresh our page we can see
39:20 - that our letters are appearing in a
39:22 - sequence beautiful animation
39:24 - after animation is done we want to add
39:26 - hover effects for our letters so when we
39:28 - hover over effect we get the yellow
39:30 - color and also we get the rubber band
39:33 - effect so let's add that
39:36 - set the minimum width to 10 pixels so
39:38 - the text is not jumping around
39:40 - display to inline block
39:42 - animation fill mode to both
39:46 - and finally when we hover over our
39:48 - characters we want to add animation
39:51 - rubber band one second and the color to
39:54 - be our default yellow color
39:58 - next in the index.js file of the home
40:00 - folder we can utilize this class so
40:02 - we're going to use use effect hook
40:04 - in this effect i'm going to return the
40:06 - set timeout and inside of the timeout
40:09 - after 4 seconds
40:10 - i want to set the class to text animate
40:12 - hover and i will pass an empty array for
40:15 - dependencies so this runs only once
40:18 - and now when we hover over our text we
40:20 - should get the hover effect let's reload
40:22 - the page
40:26 - and for some reason it's not appearing
40:29 - if we check our index.css file
40:33 - we can actually see that we are placing
40:36 - text anime hover as a child of text
40:38 - animate so let's just place it outside
40:40 - of it and let's try again
40:47 - after a couple of seconds for loading
40:49 - boom we have the hover effects i love it
40:53 - in order to complete the home page i
40:55 - want to display the logo on the right
40:57 - side of the page and animate it using
40:59 - gsap library so let's create a separate
41:02 - component for it inside the home folder
41:05 - create a logo folder and again create
41:07 - index.js file and index.css file
41:11 - and let me close all the other files
41:14 - now inside of the index.js file we want
41:17 - to import our index style file on top
41:21 - now i will just create a dummy logo
41:23 - component so that we can insert that
41:24 - inside of our home page and continue
41:26 - with coding define a constant logo which
41:28 - returns only a hello text and export
41:32 - default logo
41:34 - now go to homeindex.js file and let's
41:37 - import it at the bottom
41:40 - and automatic import didn't work for
41:42 - some reason so let's import it manually
41:45 - just type in import logo from the same
41:48 - folder logo
41:50 - and there you go let's build our logo
41:52 - component now
41:54 - remove the hello world and insert the
41:56 - curly braces inside of the curly braces
41:59 - we want to enter the return statement in
42:01 - the return we want to create a wrapper
42:03 - div the name of the wrapper is going to
42:06 - be logo container in the logo container
42:08 - we will have two images one will hold
42:11 - the solid logo image and the other one
42:13 - is going to be transparent and once the
42:15 - loading animation is done we want to
42:17 - display the solid logo
42:22 - import the solid logo from assets images
42:25 - and the name of the file is logo s.png
42:32 - and place that in the source attribute
42:34 - of our image don't forget to add the alt
42:37 - attribute and put it s
42:39 - and next to that i can paste in the svg
42:42 - outline s logo and all the assets like i
42:45 - mentioned are going to be in the
42:46 - description box so that you can build
42:49 - the entirely same website as i'm
42:50 - building here now in order to target our
42:53 - svg element inside of the svg and the g
42:56 - tag add the class name of the svg
42:58 - container
43:00 - all these three elements are going to be
43:01 - hidden as well svg container svg itself
43:05 - and the solid image so in order to
43:07 - manipulate with them and apply gsap
43:10 - animation to it we need to use use ref
43:12 - to these three elements one reference is
43:15 - going to be for the background or rather
43:16 - container the other one is going to be
43:18 - for the solid image and the third one is
43:21 - going to be the outline of the logo now
43:23 - let's add some stylings to our logo so
43:25 - it's not overlapping with our text
43:27 - first let's tile the logo container
43:29 - class
43:32 - reset the z-index to zero set the width
43:35 - to be 400 pixels
43:37 - set the height to be 60 pixels position
43:40 - will be absolute position on top of the
43:42 - element is going to be zero
43:45 - for the position right i will set 15
43:47 - percent
43:48 - it's looking better already
43:50 - set the bottom to be zero
43:52 - position left is going to be auto
43:54 - and set the same setting for the margin
43:57 - as well
43:58 - next one is svg
44:00 - first i want to set the width to be a
44:02 - hundred percent of the container next
44:05 - set the height to be automatic bottom
44:07 - position of the svg is going to be zero
44:09 - next i want to tilt my logo slightly on
44:12 - the right side i will use transform
44:15 - rotate z in order to achieve this and
44:17 - the rotation value is going to be 30
44:19 - degrees i'm adding important attribute
44:22 - so it doesn't get overridden later on
44:24 - the last piece of the puzzle here is
44:26 - solid logo set the position as absolute
44:29 - the top position of the element is going
44:31 - to be auto
44:32 - i will use the same value or the right
44:34 - position and also the same value for the
44:36 - bottom the only different position
44:39 - property is going to be the left and it
44:41 - will take the zero value margin is also
44:43 - going to be automatic set the width to
44:45 - be a hundred percent and set the opacity
44:48 - to be zero as we want the solid image to
44:50 - appear once the logo animation is done
44:53 - and again we want to apply same rotation
44:55 - as we did for the outline logo place the
44:58 - rotation value as 30 degrees if i remove
45:00 - the opacity for a second and the
45:02 - transform rotation value you can see
45:04 - what it does to our logo if you want our
45:06 - solid logo to appear on top set the z
45:08 - index to be 1. now the reason why we
45:11 - don't see our outline logo is because we
45:13 - haven't set our stroke settings let's do
45:15 - that use the svg container class to
45:18 - target the svg element that we added set
45:20 - its row color to be our default yellow
45:22 - color
45:24 - and set the stroke width to be 10 pixels
45:27 - and finally we can see it clearly
45:30 - the last style that we want to add is to
45:32 - set the opacity 0 to our logo container
45:35 - as container will have fading animation
45:37 - now we can switch over to our index.js
45:39 - file of the home component first add the
45:42 - logo container ref to our
45:44 - bgref to our image i want to add a
45:47 - reference to our solid logo ref
45:51 - and for the svg path we want to add
45:54 - outline logograph
45:56 - next in order to apply our animation
45:58 - effects we will use use effect hook so
46:01 - define one on the top for the array of
46:03 - the dependencies set it as empty array
46:06 - as i want this to execute only once
46:09 - library of choice for animations is gsap
46:11 - so import it from gsab trial and first
46:13 - we want to register the plug-in for
46:15 - drawing the animation on the svg next
46:18 - call the gsap timeline function that
46:20 - calls the animations in a sequence
46:23 - called the 2 function which will
46:24 - represent the end state of the animation
46:27 - the first argument is the element that
46:29 - we want to animate so set the background
46:31 - ref current as the second argument we
46:34 - can set properties inside of the object
46:36 - set the duration to be one second and
46:38 - the opacity as an endpoint to be one
46:41 - before our function we need to add a dot
46:44 - and for the draw svg plugin it didn't
46:46 - work for the automatic import so we need
46:48 - to do it manually so place it on top
46:50 - import raw svg plugin from gsab trial
46:53 - draw svg plugin
46:56 - and now when the page loads we get the
46:59 - fade in animation
47:03 - next i want to chain animation on top of
47:05 - this current fade in animation so i will
47:07 - call the from function which is similar
47:09 - to 2 as it receives the first argument
47:12 - as the element that you want to animate
47:14 - in our case it's outline logo svg set
47:17 - the draw svg property as 0 which is a
47:19 - starting point and it starts from very
47:21 - beginning and duration to 20 seconds so
47:24 - it's going to be a long animation and as
47:26 - you can see it creates that beautiful
47:27 - drawing svg animation when the drawing
47:30 - animation is done i want to fade in the
47:32 - solid logo so the logo creation
47:34 - animation is completely done
47:37 - to achieve that call the gsap from to
47:40 - function
47:41 - and as a target element set the solid
47:43 - logograph
47:45 - next attribute is the starting point of
47:47 - the animation and that's opacity zero
47:50 - and is the third argument is the end
47:52 - state of our animation which is opacity
47:54 - 1. set the delay to 4 seconds and
47:57 - duration to 4 seconds
47:59 - and that finishes up our logo animation
48:01 - so let's preview it
48:03 - let's reload the page and see the
48:05 - complete homepage animation
48:08 - we have the nice fade in and that
48:10 - beautiful drawing animation
48:12 - and when the drawing is done the solid
48:14 - logo appears and if we refresh again we
48:17 - can see on the left side that we have
48:19 - the text pop-up animation
48:21 - i could refresh this over and over again
48:24 - outstanding job let's build our next
48:27 - page
48:29 - it's going to be an about page
48:31 - so create new about folder inside of the
48:33 - components folder
48:35 - and create again index.js file
48:38 - and
48:39 - index.css file
48:43 - close all the other files and let's
48:45 - create our about component boilerplate
48:48 - code
48:49 - const about equals the function that
48:51 - returns hello
48:54 - and just export default about
48:58 - now in order to use it we need to create
48:59 - a new route so inside of the app.js
49:02 - duplicate the new route and set the path
49:05 - to be slash about
49:07 - and for the element import the about
49:09 - component that we just created
49:12 - and if we click on about link we land on
49:15 - our new page
49:17 - first let's import our
49:19 - index.scss file
49:21 - remove the hello string add the curly
49:23 - braces and inside of our component add
49:26 - the return statement
49:28 - inside add a first div with a class name
49:30 - of container and about page and
49:33 - similarly as on home page we have
49:35 - another div with a class name of a text
49:37 - zone where we will place our h1 tag and
49:40 - a paragraph
49:42 - inside of the h1 tags we can use our
49:44 - animated lattice component that we
49:46 - created for our home page
49:50 - for the string array parameter we want
49:52 - to pass in an array of characters
49:54 - this time it's going to be about me
50:00 - and for the idx property i want to set
50:02 - in 15 which actually means 1.5 seconds
50:06 - delay and just update our import to be
50:08 - relative to the folder that we are in
50:11 - and we get our text
50:12 - below this animated title i will have
50:15 - three paragraphs as this is about
50:17 - section i will tell a little bit more
50:19 - about myself
50:21 - and now instead of typing all this text
50:23 - out and torturing you to watch it i
50:26 - typed it already so i can just copy
50:28 - paste it i will copy paste three
50:30 - paragraphs and i will just paste in the
50:32 - text in the first paragraph i say how
50:35 - ambitious i am
50:36 - in the second one i say how confident i
50:38 - am and from the first two you can tell
50:40 - that i'm very humble right and the last
50:42 - paragraph is one sentence definition
50:45 - now let's add some styles to it so open
50:48 - index.css file in the layout folder as
50:50 - this is going to be repeated in the
50:52 - context page as well
50:54 - add a very top class about page and
50:57 - inside of it add a tag zone and this
50:59 - part will be very similar on the context
51:01 - page
51:03 - set the position as absolute set the
51:05 - left position property as 10 percent so
51:08 - it's not behind a bar add the transform
51:10 - translate y property to minus 50
51:14 - but before we move it on top we want to
51:16 - add a top property of 50
51:19 - width is going to be only 35 as we will
51:22 - have another elements on the right side
51:23 - of the page set the vertical align to
51:26 - middle
51:27 - and the display property to the table
51:29 - cell
51:30 - and additionally max height is going to
51:32 - be 90
51:35 - next i want to target our title
51:38 - i will set the font size to 53 pixels
51:41 - font family will be colverica color of
51:44 - our main title will be yellow our
51:47 - default yellow color set the font weight
51:49 - to 400 so it's not as bold
51:52 - i will reset the margin top to be zero i
51:54 - will set position to be relative and
51:57 - margin bottom to be 40 pixels set the
52:00 - left position property to 10 pixels
52:03 - and same as on the home page we want to
52:05 - add h1 tags before and on the after so i
52:08 - will use before and after pseudo
52:10 - selectors on db4 set the content to be
52:14 - opening h1 tag for the font family again
52:17 - we will use that label aurora font
52:20 - let's decrease the font size to 18
52:22 - pixels
52:23 - set the position to be absolute so that
52:25 - we can move it around margin top will
52:27 - have negative 10 pixels left will have
52:30 - the same value -10 pixels set the
52:33 - opacity to 0.6 so it's slightly
52:36 - transparent and the final style is line
52:39 - height 18 pixels let's do the similar
52:41 - for the after pseudo selector
52:44 - set the content to be closing h1 tag
52:48 - for the font family you probably guessed
52:50 - it label or ror
52:53 - and we want to remove the space on the
52:55 - closing h1 tag
52:58 - let's reduce now font size to 18 pixels
53:01 - and let's adjust the line height
53:03 - accordingly to 18 pixels as well
53:06 - again we want to be able to move it
53:08 - around so set the position to be
53:10 - absolute
53:11 - and for the position left property i
53:14 - want to set to minus 30 pixels
53:16 - bottom position property will be minus
53:19 - 20 pixels let's set margin left to be 20
53:22 - pixels
53:23 - and let's reduce the opacity once again
53:25 - to 0.6
53:27 - now let me give some style to the
53:29 - paragraphs they are barely visible
53:31 - set the font to be 13 pixels color of
53:34 - the font is going to be white so we
53:36 - finally see it for the font family use
53:39 - good old sun serif
53:41 - and i want this text to be really thin
53:43 - so set the font weight to be 300
53:46 - minimum width of the paragraphs will be
53:48 - fit content and the paragraphs are going
53:50 - to have a popping animation so i will
53:53 - set animation to pulse
53:55 - and duration is going to be one second
53:57 - but i don't like the animation where
53:59 - they pop up at the same time having that
54:01 - in mind i will add a slight delay to
54:04 - every single one of them i will use ends
54:06 - of type selector and for the first
54:08 - element i will add animation delay to
54:10 - 1.1 second
54:13 - and when i reload the page you can see
54:14 - what the animation the first paragraph
54:16 - has let's do the same for the other two
54:19 - copy paste the code that we just coded
54:21 - for two times update the selectors two
54:24 - and three and animation delays
54:26 - accordingly to 1.2 seconds 1.3 seconds
54:30 - let's reload the page to see the final
54:32 - result
54:34 - we get this nice animation
54:37 - and the last thing let's add the class
54:39 - for the hover effects
54:41 - the class name seam is on the home page
54:43 - is text animate hover and this time we
54:46 - want the color to be white because our
54:49 - text is by default yellow
54:51 - the hover effect is not working because
54:53 - we need to alter the class after initial
54:55 - animation is done so let's do that as we
54:58 - did exactly the same thing in the home
55:00 - index.js file as well let's go and copy
55:03 - it over copy use statehook from index.js
55:06 - homepage file
55:08 - this hook sets the initial value for our
55:10 - classes and just import it
55:14 - next let's copy over the use effect hook
55:16 - in which we use the set timeout to
55:18 - update the classes after 4 seconds are
55:21 - done
55:22 - again we need to import a use of ad hook
55:24 - i'm using automatic imports now we can
55:27 - pass our letter class to the letter
55:29 - class attribute of the animated letters
55:31 - component and now after the animation is
55:34 - done the hover effect is here only thing
55:37 - that i want to update is to set the
55:38 - delay to 3 seconds as on the about page
55:41 - we don't have that long loading
55:43 - animation at the beginning like on the
55:45 - home page and now let's go the right
55:47 - part of the about page it will be a cube
55:49 - with the logos of the skills that i
55:51 - possess and it will be rotating so add a
55:54 - div with a class name of stage cube
55:58 - inside of that create a div with a class
56:00 - name of cube spinner
56:02 - cube spinner will hold the six sides of
56:04 - the cube with just different icons
56:07 - so let's create a first one with a class
56:09 - name of face one inside of the phase one
56:13 - i will have font awesome icon and for
56:16 - the first icon i'm going to use fa
56:19 - angular color will be this red dd0031
56:25 - now copy paste this div five times
56:29 - then just update the class names to
56:31 - phase 2 phase 3 phase 4 phase 5 and
56:35 - phase 6.
56:36 - now update the icons for the second one
56:39 - it's going to be fa html5 for phase 3
56:42 - it's going to be fa css3 for the fourth
56:46 - one it's going to be fa react
56:48 - for the fifth one f a j s square for the
56:52 - javascript for the last one f a get out
56:56 - for the kit
56:57 - all these are imported from fourth
56:59 - awesome free brands svg icons so now
57:02 - open the index style file for the about
57:04 - page and let's add some stylings to our
57:07 - cube
57:08 - first let's style the stage cube
57:09 - container set the width to be fifty
57:11 - percent so it's going to take only the
57:13 - half of the page set the height to be a
57:16 - hundred percent and position top to be
57:18 - zero i will add some padding on top so
57:21 - set padding top to be eighteen percent
57:24 - set the margin left to be zero position
57:26 - property set it to be as absolute
57:29 - position right property set it to be to
57:31 - the maximum right so it's a zero value
57:34 - and the last style is overflow hidden if
57:37 - we check our cube now it looks like a
57:39 - list of red icons very small icons so
57:42 - the next thing that i want to do is to
57:44 - update the colors of these icons so open
57:46 - the index.js of the about page and for
57:49 - the second icon put this hash code
57:52 - five two nine for the third phase static
57:55 - hash code to be two eight a four d nine
57:59 - forty phase four set it to be five e d
58:03 - four f four
58:05 - forty phase five
58:06 - e ef
58:07 - d8 1d
58:09 - and the last one
58:11 - ec4d28
58:15 - and now every icon in every scale has
58:17 - their proper color it looks much more
58:19 - nicer now next open the style file of
58:22 - the about page and let's continue with
58:24 - adding the styles to our cube because
58:26 - right now it's just a list so let's add
58:28 - the rotation animation actually the
58:31 - spinning animation cube spinner is going
58:33 - to hold this animation so set the
58:35 - animation name to spin cube and let's
58:38 - define this is going to be a custom
58:40 - animation that we are going to code
58:43 - define the animation with add keyframes
58:45 - and the name is spin cube from property
58:48 - is going to be empty n2 is going to be
58:50 - like a starting position so set the
58:53 - transform rotate x as zero degrees
58:56 - rotate y
58:57 - also to zero degrees and rotate z to
59:00 - zero degrees so like i said this is a
59:02 - starting point of our animation
59:06 - on the 16 percent of the animation we
59:08 - want to transform rotate y to minus 90
59:11 - degrees
59:16 - on 33
59:17 - we want to leave rotate y to minus 90
59:20 - degrees but we will set rotate z to 90
59:23 - degrees
59:27 - on the half of the animation i will copy
59:29 - over the same styles and for the rotate
59:32 - y i will update to minus 180 degrees and
59:36 - for the rotate z i will leave to 90
59:38 - degrees
59:39 - on the 66 percent of the animation i
59:42 - want to copy over again the same styles
59:44 - and i will just update rotate y to minus
59:47 - 270 degrees
59:50 - and the last keyframe is 83 percent
59:52 - where i will set transform rotate x to
59:55 - 90 degrees
59:57 - next let's add the rest of the animation
59:59 - properties so that we can trigger the
60:01 - animation
60:02 - so for the cube spinner set the
60:04 - animation timing function to easing out
60:07 - this will make animation flow very
60:09 - smooth
60:10 - next we want to set our cube to be
60:13 - spinning forever or forever the user is
60:16 - on the page so set the animation
60:18 - iteration count to infinite
60:20 - the animation duration is going to be 12
60:23 - seconds and after that it's going to
60:25 - repeat the spin over and over again for
60:28 - the transform style set the preserve 3d
60:32 - for the transform origin property set it
60:34 - to be 100 pixels 100 pixels and 0 and
60:37 - this will center the rotation of the
60:39 - animation and for the margin left set it
60:42 - calculated 50
60:44 - minus 100 pixels which is the width of
60:47 - our cube so it's in the dead center of
60:49 - the right side if we check our animation
60:52 - now it started the rotation and the
60:53 - spinning but it misses some of the
60:56 - styles on the cube itself so it
60:58 - represents the cube and not the list
61:00 - let's add those now
61:02 - let's style the divs inside of the cube
61:04 - spinner so set the position to be
61:07 - absolute
61:10 - the bit property to be 200 pixels and
61:12 - the height property to have same 200
61:14 - pixels
61:16 - add the border to the divs so set the
61:19 - border one pixel solid ccc which is a
61:22 - gray color
61:24 - for the background of the cubes i want
61:26 - to set the transparent white so set the
61:28 - background to rgb a
61:31 - and put the 255
61:34 - value three times and the opacity 0.4
61:38 - next we want to align our icons so set
61:41 - the text align to center and we want to
61:44 - increase the size so set the font size
61:47 - to 180 pixels to easily align it
61:50 - vertically set a display to flex
61:52 - and in this case actually we don't need
61:54 - text align setter so set the justify
61:57 - content to be center for horizontal
62:00 - alignment and for the vertical one set
62:02 - the align items to center
62:04 - also i want our box or cube to glow so
62:07 - set the box shadow to 0 0 20 pixels
62:11 - 0 pixels and light yellow if we check
62:14 - the state of our animation right now it
62:16 - looks much better it resembles more to
62:18 - the cube but we need to give it some 3d
62:21 - effect so let's add that
62:23 - inside of the cube spinner target the
62:25 - face 1 element set the transform
62:28 - property to translate z to 100 pixels
62:31 - we want to separate the elements into 3d
62:33 - space and i'm targeting z-axis in this
62:36 - case
62:38 - next copy paste the same code for 5
62:40 - times
62:41 - and updated classes to target phase 2
62:44 - phase 3 phase 4 phase 5 and phase 6.
62:49 - now for the phase 2 set the transform
62:52 - rotate y to 90 degrees and translate z
62:55 - to 100 pixels
62:58 - next for the phase 3 set it transform to
63:00 - rotate y to a 90 degrees
63:03 - rotate x to 90 degrees as well and
63:06 - translate z to 100 pixels same as the
63:08 - previous phase
63:12 - for the phase 4 div set the transform to
63:15 - rotate y to 180 degrees
63:18 - rotate z to a 90 degrees and translate z
63:21 - to 100 pixels
63:24 - for the next phase 5d we want to set the
63:26 - transform to rotate y to minus 90
63:29 - degrees
63:30 - rotate z to a 90 degrees and translate z
63:33 - to 180 pixels
63:36 - and for the last one the phase 6 copy
63:38 - over the phase 2 and set the rotate x to
63:42 - minus 90 degrees translate z will be 100
63:45 - pixels
63:46 - and if we check our animation now we get
63:49 - this beautiful cube spinning with all
63:51 - the skills that i have in it that's very
63:54 - nice
63:55 - now let's add some loading animation for
63:57 - between the pages
63:59 - now when we switch between the pages i
64:01 - want to show the pacman
64:03 - let's do that first in the about page so
64:05 - open up the index.js file in the about
64:08 - folder add a surrounding tags on the
64:10 - very bottom import the loader component
64:13 - from react loaders and set the type as a
64:16 - pacman
64:17 - next open the app.scss file
64:21 - and here i will import style for a
64:23 - pacman loading animation
64:26 - on the top import tilda loaders.css
64:30 - source slash animations slash
64:32 - pacman.scss
64:36 - now the pacman is loaded but it's
64:38 - positioned wrongly behind a bar so let's
64:41 - position it correctly
64:42 - use the loader active class to set the
64:46 - display to block
64:47 - position as absolute
64:50 - position left will be set to 0
64:53 - and the position right will have the
64:54 - same setting zero
64:56 - to place it in the center set the margin
64:59 - to auto
65:00 - next set the top position to zero
65:04 - and bottom position to zero as well to
65:06 - align it vertically set the width
65:08 - property to be 50 pixels and also height
65:10 - property will be 50 pixels as well
65:13 - and the pac-man now has correct size and
65:15 - the placement let's give it a fade-in
65:17 - animation so set the animation property
65:20 - to fade out duration 1 second and delay
65:23 - 1 second
65:24 - animation field mode 2 forwards
65:27 - and now when we reload the page we get
65:30 - this pac-man loading animation which
65:32 - fades out that's very nice let's add it
65:34 - on the home page as well
65:36 - so this time open index.js file in the
65:39 - home folder
65:40 - and again add a wrapping div and on the
65:43 - very bottom again import the loader
65:45 - component from the react loaders and set
65:48 - the type as a pacman
65:50 - and that should do it let's preview
65:53 - and now when we reload the page we can
65:54 - see that we get the pacman loading
65:56 - animation and also switching between the
65:58 - pages about and a home page we also get
66:01 - the animation i like that now the last
66:04 - thing on our portfolio website that is
66:06 - left to be done is our contact page so
66:08 - let's build that next
66:10 - close all the files that we opened
66:13 - in the components folder create contact
66:16 - folder
66:17 - in this folder and you know the pattern
66:19 - already create index.js file and
66:22 - index.scss file
66:24 - in the index.js file let's first import
66:27 - our style file on very top
66:30 - and let me create a boilerplate code for
66:32 - a functional component
66:34 - so constant contact equals to a function
66:37 - which returns hello
66:38 - and at the very bottom
66:40 - export default contact
66:42 - now we need to create a new route so
66:44 - inside of the app.js file duplicate the
66:47 - about route and just update set the path
66:50 - attribute to be contact and element to
66:53 - be contact
66:55 - now we can go back to index component
66:58 - and let's remove this string add a curly
67:00 - braces and a return statement
67:03 - in the contact page same as on the other
67:06 - two we will have surrounding tags
67:08 - and we'll have two divs actually one div
67:10 - and one loader for the div add a class
67:13 - name of a container and contact dash
67:16 - page underneath add the loader from
67:18 - react loaders and again set the type to
67:21 - a pacman on the contacts page on the
67:23 - left side i will have tag zone on top
67:26 - and below that there will be a form
67:28 - contact form and on the right side of
67:30 - the page you will have a map with the
67:32 - location of where i live
67:34 - let's add the animating text on top
67:36 - first
67:37 - so add a div with a class name of text
67:40 - bash zone
67:42 - inside similarly like on other pages add
67:45 - a h1 tag and inside of this stack we
67:48 - will use animated letters component that
67:50 - we created previously so it's now really
67:52 - easy to animate the titles that we use
67:55 - on our pages automated import didn't
67:57 - work for some reason so i will manually
67:59 - import it so import animated letters
68:01 - from the folder above
68:03 - animated letters
68:05 - the first property that we need to pass
68:07 - in is string array on this page i want
68:10 - to display contact me so i'm passing as
68:13 - an array of characters contact me
68:16 - make sure to put the correct spelling
68:18 - and make sure to add the space in
68:20 - between the words
68:22 - for the index start property let's put
68:24 - 15 which means 1.5 seconds delay of the
68:27 - animation for altering the animation
68:30 - class when initial loading is done we
68:32 - will use again the same code that we
68:34 - coded on the about and on the home page
68:37 - so let's just copy it over and now i'm
68:39 - just using automatic import to import a
68:42 - used state hook and use effect hook
68:45 - now we can use the letter class property
68:47 - that we just created and pass into our
68:49 - animated letters component
68:51 - and just like that we have our title
68:53 - animated but we just need to give it
68:55 - some styles to position it better and to
68:57 - make it more visible as we already added
69:00 - text styles for the about page similarly
69:02 - like the one we have on the contact page
69:04 - i will go to the layout styles and just
69:06 - add contact page and if we reload our
69:09 - page we can see that the title is done
69:11 - and animated so our development is
69:13 - getting faster and faster as we have
69:15 - done the setup right let's add some
69:17 - description below
69:20 - add a paragraph tag and once again i
69:22 - will just copy paste in the text and you
69:24 - don't have to suffer watching me typing
69:26 - that out if we reload the page we can
69:28 - see that the both of these are animated
69:30 - already now let's build a contact form
69:33 - after the paragraph add a div with a
69:35 - class name of contact form inside of the
69:38 - div add a form inside of the form add an
69:41 - ordered list first list item will have
69:44 - the class name of the half which only
69:46 - will take the half of the row and inside
69:48 - of this list item i will place the input
69:51 - element type will be text
69:53 - name attribute will be name
69:55 - placeholder will be named as well and it
69:57 - will be required
69:59 - and we got our first field
70:01 - now let's copy over this list item and
70:03 - paste it and let's adjust the input to
70:06 - be email
70:07 - name also email and placeholder also
70:10 - email and leave it as required the next
70:12 - input will be for subject so this list
70:15 - item will take full row width so we are
70:17 - not adding class name of half
70:20 - set the placeholder to subject
70:23 - type to text
70:25 - name to subject as well
70:27 - and this one will be required also
70:30 - the next list item will hold the message
70:32 - input and i will be using text area for
70:35 - it
70:36 - set the placeholder of the text area as
70:38 - a message
70:41 - and looks like that i have a typo here
70:44 - set the input as a lowercase
70:46 - add a name attribute to the text area
70:48 - let it be message
70:50 - and set it required
70:52 - and the last list item in our form will
70:54 - be a submit input
70:56 - so set a type as a submit
70:59 - and add a class name of a flat dash
71:01 - button and set the value of it to send
71:05 - jsx part is done let's add some styles
71:08 - first let's target contact form set the
71:11 - width to be 100
71:13 - and margin to up to 20 pixels
71:15 - for the unordered list set a padding to
71:18 - be zero
71:19 - and for the margin use the same value
71:21 - for the list items as well reset the
71:24 - padding to be zero and set the margin to
71:26 - be 0 as well
71:28 - we don't want any bullet points so list
71:30 - style set to none and set the margin
71:32 - bottom to 10 pixels overflow will be
71:35 - hidden display mode as block
71:38 - position is relative and we want opacity
71:40 - to be zero as i want this to fade in as
71:42 - all other elements that we have on this
71:44 - page and i will set animation to fading
71:46 - up
71:48 - two seconds animation and two seconds
71:50 - delay as i want elements to stay on the
71:52 - page set the animation fill mode to
71:54 - forwards
71:55 - and let's preview our fade in animation
71:58 - that looks very nice
72:00 - let's continue with styling the input
72:02 - elements first for the li half element
72:04 - set the width to be 49
72:07 - and let's add some small space on the
72:09 - left side so margin left set it to be
72:11 - two percent
72:12 - set the floating style to be left and
72:15 - just to mention here i'm refactoring my
72:17 - code from like seven or eight years ago
72:19 - so this is why i use the floats these
72:22 - days i use display flex mostly add the
72:24 - clear both to li element and for the
72:27 - half
72:28 - add the clear none as i want it to be
72:31 - inline with the other half and set the
72:33 - first shallow bit to have the margin
72:35 - left zero so we want only the second
72:37 - child to have the margin in the space on
72:39 - the left
72:40 - next i want to target input type text
72:44 - and input type email as they don't have
72:46 - any visual differences only functional
72:48 - ones
72:49 - for both of these elements set the width
72:51 - to be full a hundred percent
72:54 - and let's remove the borders so put the
72:56 - border as zero
72:58 - background of our input elements is
73:00 - going to be this dark blue
73:02 - one one
73:03 - 5 1 7 3 hash code
73:06 - let's increase the size of the elements
73:08 - so put the height to be 50 pixels set
73:10 - the font size to be 16 pixels color
73:12 - needs to have a contrast to this dark
73:14 - background so set it to be white fff
73:18 - let's remove the padding on top and the
73:20 - bottom so set the padding 0 and on the
73:22 - left and the right side let it be 20
73:25 - pixels to keep the same width and height
73:27 - of the element set the box sizing to
73:29 - border box the next element on the list
73:32 - is text area which will have the similar
73:34 - styles like the previous elements and
73:36 - the inputs set the maximum width to 100
73:40 - remove the border so value is zero the
73:42 - background is going to be this dark blue
73:44 - the same one as we used the previous
73:46 - inputs height 50 pixels font size 16
73:49 - pixels again i want contrast for the
73:52 - color and the background so set the
73:54 - color to be white fff padding this time
73:58 - 20 pixels on all four sizes minimum
74:00 - height will be 150 pixels this is the
74:03 - largest element as it holds the biggest
74:05 - value and to retain his size set the box
74:08 - sizing to border box and the last
74:11 - element is our send button which is not
74:13 - the least definitely use the flat dash
74:16 - button css selector and set the first
74:18 - style of the color to our default yellow
74:21 - ffd 700 background to 0 0 font size to
74:25 - 11 pixels i want the sliders to be
74:28 - spread a little bit so set the ladder
74:30 - spacing to 3 pixels there will be no
74:32 - text decoration so set it to none
74:35 - padding on top and bottom is 8 pixels
74:37 - and on the left and the right side is 10
74:39 - pixels and let's add the border so set
74:42 - the border to one pixel solid and our
74:45 - default yellow color ffd 700 float it to
74:48 - left side add a little bit of border
74:51 - radius i'll set to 4 pixels update the
74:54 - float actually to go to the right side
74:57 - and our form is done now let's make it
75:00 - work
75:01 - for the implementation of our code i
75:02 - will be using the email.js library the
75:05 - link to this library will be in the
75:06 - description and you need to go there and
75:08 - create an account once you do that you
75:10 - will get this initialization code which
75:13 - you can paste in inside of the body tags
75:15 - only the token will be different
75:16 - obviously once we finished initializing
75:19 - our email js library we can get back to
75:21 - our contact index.js file
75:23 - first we need to get a reference from
75:25 - our form so create a const ref form
75:28 - which equals to use ref hook
75:31 - now we can pass in this value to the ref
75:33 - attribute of a form so set the ref to
75:36 - the ref form and call the unsubmit
75:39 - method
75:40 - in the unsubmit event handler i will
75:42 - call send email function that we will
75:44 - create just in a minute so before the
75:46 - return statement add a const send email
75:50 - and as a parameter it receives an event
75:52 - i want to stop default submitting so
75:55 - call the e-prevent default method
75:57 - in this method we will use our email.js
76:00 - library so let's import it on top
76:03 - import email.js from at email.js slash
76:06 - browser
76:09 - on the email.js object call the send
76:11 - form function this function as a first
76:13 - argument receives service id in this
76:16 - case it's a gmail as a second argument
76:18 - it receives a template id and this
76:21 - template id you get from your account
76:23 - once you created the account and then
76:24 - you create a template the third argument
76:27 - is the form reference and the fourth one
76:29 - is user token which you get upon
76:31 - registration once again link to this
76:33 - library will be in the description below
76:36 - and after our email has been
76:38 - successfully sent we want to send a
76:40 - message to the user so the easiest way
76:42 - to do that is to use window alert and
76:45 - what we can do else is to reload our
76:47 - page so that our form is reseted so call
76:49 - the window location reload and pass the
76:51 - argument as false but in case we fail to
76:54 - send the message again notify the user
76:56 - that operation failed and they need to
76:59 - try again
77:00 - and now we can test it
77:02 - only thing that i forgot to add is to
77:04 - call the used wrap hook and now we can
77:07 - go to our form and test it out i will
77:09 - just enter some random values for the
77:11 - testing but as you can see it has
77:13 - browser validation in place input the
77:16 - valid email format and fill in all the
77:19 - required fields in order to be able to
77:21 - send it and when all that is said and
77:23 - done
77:24 - we get the confirmation message that it
77:26 - has been successfully sent but let's
77:28 - check my gmail inbox and when i open my
77:31 - email i can see that i received a
77:32 - message from email.js
77:34 - and as you can see subject and email are
77:37 - there but actually we are missing the
77:39 - message itself so let's check our form
77:42 - and yes looks like that we had a typo so
77:45 - type in message correctly and let's try
77:47 - again
77:48 - again fill in all the dummy text so put
77:51 - test name
77:52 - test email so this needs to be a correct
77:55 - format text subject and text message and
77:58 - submit it
78:00 - once again we get the confirmation and
78:02 - let's open our email
78:04 - and this time we get the message as well
78:06 - and that's how you can create a form
78:08 - without need for a backend server you
78:10 - just need an email.js library in order
78:12 - to do this
78:13 - let's continue
78:14 - on the right side of our contact page i
78:16 - want to display a map with the position
78:18 - and the location where i live in for
78:21 - this purpose i'm using lee fleet maps
78:23 - we already installed the package i just
78:26 - need to import the styles inside of the
78:27 - index file
78:29 - once again you will be able to find the
78:31 - link to this library in the description
78:33 - close the index.html file and get back
78:36 - to index.js in the contacts folder
78:39 - before we add a map i want to add a
78:41 - little box on top with information about
78:44 - my location so after the text zone add a
78:47 - div with a class name of info dash map
78:50 - inside of this div let's add some text
78:53 - i'm putting my first name and my last
78:54 - name
78:55 - and i'm adding a break after that i put
78:58 - the name of the country where i live in
79:01 - after that i will put some random street
79:03 - name with random number after that add
79:06 - another break tag and after that i will
79:09 - place a name of the town where i live in
79:12 - another break and i will add a span
79:15 - in this pen i will add my real email
79:17 - address in case somebody wants to
79:19 - contact me directly next let's add some
79:22 - styles to our info top
79:24 - use the info map css selector
79:27 - set the position of this box as absolute
79:29 - background color will be completely
79:31 - black so 0 0 0
79:33 - set the position top to 50 pixels
79:36 - position right will be 30 this is going
79:38 - to be a little bit
79:40 - off from the center and this box will be
79:43 - on top of everything so set the z index
79:45 - to 999999
79:48 - width will be
79:49 - 267 pixels
79:51 - set the padding to be 20 pixels on all
79:54 - four sides to make the complete contrast
79:57 - set the color to be white so fff for the
80:00 - font family i will use helvetica
80:04 - and for the font size set it to 17
80:06 - pixels i want font weight to be slightly
80:09 - thinner so set the font weight to 300.
80:11 - this box will also have fading animation
80:14 - so set the initial opacity to zero
80:16 - and set the animation itself to fade in
80:19 - duration 1 second and delay 1.5 seconds
80:23 - as i want this box to remain visible set
80:26 - the animation fill mode to forwards
80:29 - and the last thing which i want to style
80:31 - in this box is our span which holds my
80:33 - email so set the font size to slightly
80:36 - lower 16 pixels
80:38 - set the display as block as i want some
80:40 - separation on the very top add a padding
80:42 - top to 20 pixels in order my email to
80:46 - stand out i will change the color to be
80:48 - our default yellow ffd700
80:51 - and let's see what we got
80:53 - and that's exactly what i needed so
80:56 - let's add the map itself
80:58 - next to the info map add a div with a
81:00 - class name of map wrap so this is a
81:03 - wrap-up for our map next open our index
81:06 - style file and add some of the styles to
81:08 - a map wrapper first set the background
81:11 - property to rgba 8
81:14 - 253 216
81:17 - and opacity 0.1 this wrapper is going to
81:19 - be on the right side so set the float to
81:21 - the right
81:22 - set the bit to 53 percent and height to
81:25 - 100
81:26 - and we have our container now with this
81:28 - greenish color we have already installed
81:31 - the athlete package but we need to add
81:33 - some styles to our index.html file links
81:36 - to the package and the instructions how
81:38 - to install it again will be in the
81:40 - description
81:41 - again open the index.js file in the
81:43 - contact folder in the map wrap add the
81:46 - map container component from the react
81:48 - leaflet library in the center attribute
81:51 - you will pass in the coordinates where
81:53 - you want your map to have the center and
81:55 - for the zoom attribute you will pass in
81:57 - the level of zoom you want to be applied
81:59 - by default in the map container add a
82:02 - tile layer component with the following
82:04 - url https colon slash slash in curly
82:08 - braces s dot tile dot open shape map dot
82:12 - org slash in curly braces z slash
82:15 - incredibly braces x slash in curly
82:17 - braces y dot png
82:20 - this style component is the actual map
82:22 - component
82:23 - next to the tile layer i will add a
82:25 - marker component and know this component
82:27 - you are importing from rear cliff lead i
82:29 - will add position attribute and it will
82:31 - have the same coordinates as the center
82:34 - inside of a marker let's add a pop-up
82:37 - and inside of this pop-up let's add some
82:39 - message for the visitors
82:41 - slova lives here come over for a cup of
82:43 - coffee and smiley
82:46 - now we need to add some styles in order
82:48 - to see our map and to make it visible so
82:50 - in the style file of our contact page
82:52 - add a left fleet container class
82:55 - set the width property to 100
82:57 - and the height property as well to the
82:59 - same value 100
83:01 - set the position to relative once again
83:04 - we want this element to fade in so set
83:06 - the opacity to 0 and now let's set the
83:08 - animation
83:09 - animation will be back in right and
83:12 - duration will be 1 seconds delay 1.2
83:15 - seconds and as we want our map to stay
83:17 - on the page set the animation field mode
83:20 - to forwards and that should be the last
83:22 - style that we applied on our website
83:25 - let's see our results and now as you can
83:27 - see inside of the container we have our
83:29 - map there's a pin drop with this pop-up
83:31 - message and the center of the map is my
83:33 - hometown
83:34 - and when we reload the page we can see
83:36 - that fading right animation on the map
83:38 - and to sum up what we have accomplished
83:40 - in this hour and a half so we build our
83:43 - home page where we should impress people
83:45 - without drawing svg animations and is
83:47 - popping up text animation we added a
83:49 - pacman animation to make the page
83:51 - switching more interesting and on the
83:53 - about page we can impress people with
83:54 - this custom made css rotating animation
83:57 - and the last on the contact page we
83:59 - added this interactive map and on the
84:01 - left side we created and implemented
84:04 - this beautiful form i wanted to make
84:06 - this tutorial short so i created only
84:08 - three pages but this tutorial could be
84:11 - extended to add portfolio page and maybe
84:13 - optimize it to mobile devices and if you
84:15 - would like to see the second part of
84:16 - this tutorial please let me know in the
84:18 - comments and also please check my
84:20 - channel for other tutorials like this
84:22 - one and i spent ton of time to make
84:24 - these tutorials for you guys so please
84:26 - spend a couple of seconds to subscribe
84:28 - and like my video and i see you guys in
84:30 - the next one

Cleaned transcript:

in this course slobodan will help you improve your react skills by teaching you how to build a portfolio website that has cool javascript animations if you're looking to build an awesome react portfolio website you come to a perfect place in this tutorial i will show you how to build breathtaking website with advanced animations using various techniques like gsap library animate.css and custom css animations together we will add a pacman page loader also i will show you how you can create and implement contact form using only email.js library without a need to set up a server and you will learn to implement maps on your website and much much more sounds interesting please join wait for me first thing first let's create react application using mpx create react app and pass in the name of the application in this case it's react portfolio it will install all the packages that you need for react application after project installation is done we want to change directory to the project itself and first let's install all the packages that we're going to be using so that we can later focus only on coding and not installing the first package is email.js which we'll be using to implement the contact form so type in mpmi email.js browser the next package is for our font icons so it's at fort awesome free brands svg icons and we're gonna install a couple of these font icon versions after done clear the console and the next one is fort awesome slash free solid svg icons so we're gonna use the free packages for fonts solid icons are going to be used for the navigation on the left side the next package is ford awesome slash react font awesome this is a wrap up for the font awesome so you can use it easily on react the next one is anime.css it's a css library for animating the objects and fonts it's really cool you'll see it now for more advanced animations we're gonna use gsapp i'm installing gsab trial as i didn't want it to create any accounts next package is loaders.css it's a package for loaders right so we're gonna add a pacman in between the pages in our application you'll see it's really cool the next one is react dashly fleet so on our contacts page we're gonna have a map and this is a wrapup library for using leaflet maps the next package is react dash loaders we installed the loaders.css previously and this is for react integration so it's really easy to use the loaders inside of the react the next one is the standard package inside of to react is react dash router dash dom so as we are going to have three pages in our application this is going to help us to navigate through and for styling i'm going to be using the sas as it helps you to write less code and to use some of the operations like for and variables and we are finally done with installing the packages and now i want to open the project that we just created inside of the visual studio code the first thing that i want to add inside of my root folder is to print your configuration file and name of the file is dot pretier rc i'll let this plugin worry about the formatting and i'm going to worry about the coding and focus on and the default settings that i set up is that trailing commas are going to be enabled tab width is going to be two i'm going to remove the semicolons and add a single quotes also as we are going to be using scss i want to update app file and also update the import inside of the app component so instead of the app.css add just has to be sas extension now let's define some of the global styles inside of our file i'll define primary color to this yellow ffd700 it's used inside of the animate.css library so it's needed in order to use it then import the anime css and let's define the font faces that we're going to be using and default font is going to be helvetica new and let's enter the url of the font which is going to be inside of the assets folder inside of the fonts folder and the name of the file is helvetica dash new dot ttf and format let's add ttf now let's add the assets folder to our project and inside of this assets folder we're gonna have images and fonts and i'm gonna put the link to the assets folder in the description so that you can build entire and same application as i'm doing here so okay we have the assets folder now let's link it inside of our app css file the rest of the fund families i'll just copy paste the first font face three times as we're going to use three fonts the next font is going to be named labelle aurora we're going to use this phone for styling the tags on our background very nice font and the name of the file is labelled aurora with camelcase and the format is buff 2 and the last font is going to be colverica and the file name is going to be colverica rg for regular dash regular and format is going to be again well f2 and you're done with the font faces and now i just want to add a default font for input and text areas so i'm gonna be using font family helvetica new now let's just start our application to see does it work and have we break anything until this point so run npm start from the console and we have our app up and running now the next thing which i want to do is inside of the index.css file i want to remove some of the predefined styles to the code and to change the font family first i'll define html selector and i'm going to set the font size to 62.5 percent for body let's set the 300 as a font weight eleven as of font size pixels and 1.4 as a line height and a default font should be helvetica new as a fallback font we're gonna use sun serif for the color put the 444 and for the background color the hash code is 0 2 2 c 4 3. put the overflow hidden and a display block and those should be default values for a body tag okay now let's open up a index.js file and close all the other files and inside of the index.js file i want to import browser auto module and wrap our application around it this provides us with ability to use the routes inside of our application next we can open up the app.js file and this is the file where i'm gonna be defining our routes so remove the boilerplate code and import the routes from react router dom next import a single route and place it inside of the routes here we're going to define the first path which is going to hold the layout component and we're going to create that just in a second so the element is going to be a layout but as we don't have this component yet let's create it first i want to create a components folder for all our components and i'm going to place that inside of the source directory now inside of the components let's create a new folder and name it as a layout obviously i'm gonna place layout component there then inside of that layout folder add a new file and call it index.js it's easier for later on imports and add index.css file so this is going to be the pattern that we're going to use for all of our components and the first thing that we want to import inside of our index.js file is our scss file so that we don't forget it later on all of our components are going to be functional components so i'm going to follow the same pattern for every single component const name layout is equal the arrow function here we're just going to create a boilerplate code so that we can import it inside of our app file and export default layout now we can remove the logo which is from boilerplate code and import our layout component and let's save it and preview it and we haven't imported the route so let's do that and now as we can see it works correctly so we set up our first component and our first route we can start building our layout first we're gonna build left sidebar so inside of the components folder create another folder named sidebar inside of this folder we want to create index.js file and index.scss file same as we do for other components close other files so they are not confusing us and the first thing that i always do is to import styles on top of our index.js file and now let's create a sidebar dummy component so that we can import it inside of the layout so add const sidebar equals a dummy fat arrow function and export default sidebar and just put the text hello from the parentheses and now we can import that inside of the layout and continue building so inside of the layout index.js file instead of the hello just import the sidebar component and we have connected that as you can see remove this dummy text and inside of the parentheses we want to add a div with a class name of a navbar navbar actually inside of the nail bar import the link from react router dom and edit the name class name logo and this is going to be a default home page so two is going to route to the slash to home page inside of the logo we want to obviously display the logo so add the image with the source and let's import the logo s for slobodan or slova so import os from assets folder images and the name of the file is logo dash s.png place the image inside of the source file and add alt attribute as a logo now we want to duplicate the image and import that new image as well as we're going to have two images one is going to be s and the other one is going to be rest of my name underneath of it slow but on so let's import both of these and let's add to second image logo subtitle as it's like a subtitle to our logo and update the l to slower down we can't even see our images on the page as they are too large and they are overflowing our page so let's add some styles inside of the index.scss file add a class name of navbar and instead of it set the background to 181818 it's very dark background set the width of 60 pixels height is going to be a hundred percent position absolute top left z index three set the minimum height to 500 pixels because on the smaller screens we don't want to get the overflow on our container and it's better to have some scroll bar so for our logo container set the display to block and put the padding on top and bottom to 8 pixels left and right let it be and for the image itself set the display to block and margin to 8 pixels auto so it's centered width to 24 pixels and now we can finally see it completely set height to auto and for our second image we want to set the subtitle logo and set the width to 50 pixels but i think that we forgot to add subclass so let's do that add a class name to our sub logo and it should work now and that's our home logo image only so below that we want to add navigation with the links to every single page that we have so add a nav tag and inside of the knapsack add the nav link first navlet is going to be our home page so set the exact to true active class name to active so that it helps us to style the active link and two is going to be slash inside of our envelope import the font awesome icon and for the icon set it for home it's gonna display nice little home for the color we want this gray color 4d 4d for e and it's going to be used for all our icons as you can see we got the small house in our sidebar now let's copy paste it three times next link is going to be about section so for the icon import file user and put the route to about also we will need a class so that we can actually add the content on hover so add the class name about link for a third icon is going to be fa envelope which is going to be a contact page so add a class name of contact link and add to slash contact we have our navigation now but it doesn't work and it also doesn't look nice so let's add some styles go inside of the index style file and add an app tag inside of the nav tag add these properties set the display to block text align its center position absolute set the height to 210 pixels and we want to position our nav in the middle so we need to set the top to 50 and on top of that we want to give a negative margin of minus 120 pixels set the width to 100 and for the links add a font size of 22 pixels and set the color to 40 4e which is a gray color set the display to block and set the line height to 51 pixel height is going to be the same 51 pixel and set the position to the relative you can see now how it's laid out and the last thing for nav links we want to remove the text decoration so set the text decoration to none now let's add some transition to our to our links so for the i set the transition for all the elements 0.3 seconds is out and on hover we want to set the color of our links to yellow and svg we want to set opacity to zero so as you can see when we hover over the svg icon it disappears but we want to add the content now so instead of the logo we see the text so set the after opacity 1. now for all of our after elements we want to set some default values set the content to empty string font size to 9 pixels set the letter spacing to 2 pixels for the position property we want to set an absolute value bottom set to zero we want to set the display block and a width of a hundred percent text align to center and we want to set the initial opacity to zero so that we can fade in in order to have a smooth transition we need to add transition property for all set to 0.3 seconds as ease out and now let's alter the content for the first child set the content as home and as you can see when you hover we get the home text we can do the same for rest of the links we can target them using the classes as we added the class name use the about link to target the second element and for the after set the content for about and as you can see we have the about link as well now so we can just copy paste our about link and we can update the about to contact so let it be contact link and for the contact to be contact and now we have all the links and tags on hover and the last thing that is left to be done in this section is to add active class to our active route link so add the active class and set the svg to this yellow color as we are on the home page the active class gets activated on the first link and we are getting active class so we get this beautiful yellow color the last part that we want to add to our navbar is to add the links to our outside accounts and the profiles like youtube github linkedin and similar having that in mind i'll add unordered list inside of the list i'll add li tag with an anchor tag again we're gonna use the icons for links so the first one is going to be font awesome for the icon i'm gonna set the linkedin the color is going to be the gray color as we use for our top navigation as well the target for it is going to be blank so we want to open the links in the new page and we want to set the row as well for the href i'm just gonna paste the link to my linkedin account but obviously you will use yours and just to test if the link works correctly i can open up my page let's close it now we can just copy paste over the link that we just created and update the icons for others and the links for the second one i'm gonna use the github so the icon is f github and i'm just gonna paste in the link to my github account the next link is linked to the youtube channel so add the fa youtube icon and i'm gonna put the link to my youtube channel here if you don't have a youtube account obviously you're gonna remove this icon the last link that we're gonna navigate to is the skype so add the fa skype icon and update the href with the skype prefix after the prefix you want to add a skype username everything else is the same so now that we linked all of our accounts we can style them to look nicely first element that we want to target is our unordered list so set the position to the absolute and we want to place it on the bottom of our screen so bottom position 20 pixels what is going to be a hundred percent and we want it to be displayed as block also set the padding to zero list style to none we want to remove the bullet points and align the text to center set the margin to 0 as well the next we want to style are anchor tags inside of the list items so set the padding on top and bottom to 7 pixels and the left and the right side to zero we want to display them as a block and to give it a font size of 15 pixel set the line height to 16 pixels and the color actually we don't need as that is set on the icon itself and when we hover over our links we want to set the color to be yellow same as we have on our nav links as well but we want to do that on the svg so add svg there please and if we hover over we can see that we have nice yellow color and that makes our layout complete on the left side let's continue with our home page but one thing i noticed that if we hover over our nav links you can actually see that the font isn't applied this is a default font and if you go to the index.css file we can see that i used font family which is used for a font name not for the all properties of the font itself if we save that we can now see that the font is actually being applied so please fix this error if you're following along before starting with the content of the home page i want to add some of the elements that are going to be used across our application these elements are going to be placed in the background but they're going to add the feel of a web developer because we're gonna display on top html and body text and on the bottom as well so inside of the layout folder and in the js file we want to add a class name with a app so this is going to be the main wrapper of our application and we want to add a class name of page and inside of this element i will set an outlet where we will render all the pages in our application which will be like a placeholder so import the outlet from react router dom before the outlet i already inserted top tags with body tag now i want to do that for the bottom as well so we will import the body tags and we will add a class name of tags and bottom tags and inside of it i want to paste in the body code add the break line and add the html tag as well so add a class name of bottom text html so that we can move it slightly and make a difference of the body tags now i just paste in the code of the html tags that i copied over from the web and who really can remember those characters now let's add some styles to our tags open up the index.scss file let's set the width and the height of the page set for both of these to a hundred percent and set the position to be absolute for our top tags we want to set bottom position to be set as auto and for top we want 35 pixels for tags general class set the color to be this this yellow default color that we use across our application but i just want to reduce the opacity by a bit so set it opacity 0.6 position will be absolute and the bottom will be set to zero left is going to be 120 pixels set the font size to 18 pixels and finally now we can see our body tags and what we are calling actually set the font family to a label or this nice font which will give such a good styling to our body tags and for our body tech html i want to add 20 pixel indentation so that we actually have that feeling of the real code as we have our main layout setup we want to create a home page finally so inside of the components folder add a home folder inside of the home folder as always add index.js file and index.scss file we want to create just a dummy home component so that we can import that inside of our router const home equals hello and export default home next we can import our home component inside of the app.js file so add a new route with a path of actually you don't need a path we just set it as indexed and element is going to be the home component now we can bring in some content into our home page let's do that open up index.js file inside of the home folder and remove the implicit return inside of the curly braces i will add a return and inside of the return let's add a div deal with the class name of container and a class name of home page inside the container i will add a text zone div this div will contain the animated text on the left side of our screen in the text zone add the h1 title and inside of the title add the following text hi comma then we will add a break i'm and after that it should say hi i'm slobodan for the first letter of my name i will use an image which will be styled differently so let's add an image tag and for the source we're going to import the image later and for the alt tag add the developer image is going to be exactly the same as we use on the left sidebar so let's import it import logo title from the assets images and the file name is logo dash s.png and now just place the logo title inside of the source attribute okay this is linked properly but it lacks some styling as you may see let's continue with building our page below the image let's add the rest of the word lobodon with s is going to be my name slobodan and add the break and below it's going to say web developer and we actually need to surround all the text that you've written inside of the h1 title not just the first two words below this i will add h2 title first i said who i am next i want to say what i do so it's very visible once somebody lands on your first page so i'm a frontend developer and javascript expert and also i create youtube content as well and below that we want to add a link button so this will link to our contact page so that actually somebody can contact you in case he has a project for you fulltime job collaboration or he just wants to say hello two is going to be slash contact and we're going to add this to our route later on and class name add a flat button so we can style it now open the index scss file inside of the layout folder the styles that we're going to add here are going to be the same for every single page so we don't want to duplicate them let's put them inside of the layout and it will be applied to all the pages set the width to be a hundred percent we'll change the contents height to ninety percent min height to 566 pixels set the position to be absolute and the opacity to be zero container will have fade in animation that's why the opacity needs to be zero at the beginning set it up to be five percent margin zero auto z index to be one transform style preserve 3d and animation fade in this is the animation from animate.scss duration is one second and let it end forwards add animation delay to one second and the rest of the styles we're gonna place inside of the index.css file in our home folder inside of our index.js file in the home page folder import our index scss file now we can open our style file and on top of our file let's add the first class home page inside of that home page we want to target h1 tag and inside of the h1 we have an image that is overlarged so put the size to 32 pixels and we can finally see the rest of the h1 title so target detects zone and position it absolute for the left position property put it as a 10 percent so that we can see it and it's not positioned below the sidebar put it up 50 percent as we want this to be centered as i want our text zone to be in the dead center add the transform translate y property and put the minus 50 percent so it moves the text zone a little bit on top the width is going to be 40 percent as we are going to have a 60 of the other elements on the right side and the max height is going to be 90 next let's add some styles to our title first put the color to be white and you can see how that stands out now and let's increase the font size to 53 pixels so it's nice and visible we want this to stand out when somebody lands on our index page put the margin to be zero and for the fun family put the call vertica and for our weight i just want it slightly to be less bold so the font weight is going to be 400 as i want this portfolio to give the user feeling that he's on a developer portfolio i want to add h1 tags around our titles similar what we did for the body and html tag so we're going to do that with the before and after of the title use the content h1 for the font family again we're gonna use label auror and color is going to be yellow font size we want to reduce it to 18 pixels set the position to absolute as i want this tag to be slightly on top of our title put the margin top of minus 40 pixels and place the slight indentation so left is going to be 15 pixels and just to fade out a little bit so the opacity is 0.6 now let's do the similar for the after as well so content is going to be closing h1 tags without the space fun family is going to be the same label or most of the properties are going to be the same for the h1b4 and h1 after color is going to be the yellow the font size is going to be 18 pixels position is going to be an absolute set the margin top to 18 pixels margin left to 20 pixels and we want this to animate along with the text so put the animation fading one seconds and delay 1.7 seconds and backwards for the fill in mode and for the opacity is going to be the same 0.6 as for the b4 let's reload the page to see our fading animation that's much better let's style the rest of our text zone for the s letter inside of our text let's add a little bit of space on the left side so put the margin left of 20 pixels set the opacity of zero because we will adding the fading animation actually the rotation animation height is going to be auto and the animation is going to be rotate in one second long linear and fill in mode both and for the animation delay i will add 1.4 seconds as you want this animation to start a little bit after as we are going to be add some of the loaders later on now we can move on on our subtitle set the color to be ada 80 hash code set the margin top to 20 pixels font weight to 400 font size it's going to be 11 pixels for the fun family let's use good old sun serif and i want to spread the letters out so set the letter spacing to 3 pixels and we will be animating the h2 as well so put the animation as fade in one second long 1.8 seconds delay and set the filling mode as backwards the last but not the least is our contact button so use the flat button class that we use inside of our jsx set the color to be this default yellow color font size to 13 pixels font weight to be 400 for our button i want letter spacing to be 4 pixels for the font family let's use good old sun serif again we don't want this to be presented as a link so text decoration set to none and let me add a little bit of padding on top and bottom put the 10 pixels and 18 pixels on the left and right side for the border let's set it to one pixel solid and our default yellow color we want a margin top 25 pixels and to float to left side now we also want to animate this as well so put the animation as fade in animation one second duration 1.8 second delay and set the filling mode as backwards actually the name of the animation is fade in there you go and i'll set the white space to no wrap now let's change the styles on the hover event so on the hover let's change the background to be our default yellow and set the color to be this dark 333 and that completes our tag zone stylings that's very nice the next thing which we want to do is to animate our text so every single letter needs individually to pop up once the page is loaded and i would like to create a component for that so that we can reuse this component on every single page and we don't have to repeat this process we will just pass in the array of the characters that we want to be animated and this function will return the animated letters so having that in mind inside of the components folder create the animated slatter folder and again create index.js file and index the scss file inside of our index file first thing that we want to do is to import our styles file as always next let's define our functional component so give it a name animated letters and this component will receive three arguments the first argument is going to be the class that we want to apply to our characters the second one is going to be the array of the characters itself and the last one is going to be the index the starting point which will basically set the delay of our letters and the animation the type of the element that you want return is going to be a span as we want it to be an inline element as these individual letters needs to form a letter and a word now let's map to the array of the letters that we received as arguments we get the element and the index itself inside of the map we will return another span and we want to give it a key as every single map inside of the react needs to have a key index so we will add a char which is a basically a letter and an index because we can have the repeated letters here as a class name we're gonna pass the letter class that you receive to the props and we will add an index plus the number that is passed through the properties which is like a starting point so if the index is 5 every single index in the map array it will be increased by 5. and finally this span is going to display the letter that is passed in and just export default animated letters now we can use it inside of our home component let's import it there first let's use the use state hook to define the state of our class as letters can only have one animation and specific moment in time after the initial loading is done we want to add animation on hover so this is why we use use state default animation name is text animate the next what i need to do is to create two arrays for two words that we want to animate these arrays need to hold the characters of the separated letters that we want to animate for the animated letter component that we just created the first array holds the characters lobodon without the s because s is the image that we imported and the second array is going to hold the web developer i need to spell it correctly so i don't make any mistakes and for the first two words hi i'm i'm manually gonna add the classes without using animated letters component finally replace slobodan word and import the animated lattice component that we created for the letter class attribute passing the letter class variable that we defined in the use statehook for the string array attribute pass in the name array which is lower down the words that we just defined on top and for the idx put the 15 number so our classes are going to start from 15 index let's open up the console and see does it work if you refresh the page and inspect the letters you can actually see that every single letter has text animate it's a single span and it has different index nice now let's do the same for the web developer part let's reuse the code that we just coded out and just replace the string array to put in the job array and for index set it to 22. the last thing that is done is the first two words so like i said i'm gonna do that manually add a spam tag with the h letter in it for hi and class name is going to be letter class that is default class for animating our letters now we want to copy over this span and change the class only the first letter has just text animate class every next letter has a delay class as well because we don't want these letters to appear at the same time so we are adding the second part and the index that we are using later on to add a slight delay to animation so the letters are appearing in a sequence so the second letter has the delay of 12 which will be actually 1.2 seconds delay and copy paste that over to add to two additional letters hi i'm so and we actually need to update remove this part and update the indexes to 13 and 14. as we have classes in place now we want to add styles to them so open index style file from the animated letters and let's add it default class for text animation is text animate so set the display to inline block as we want this to appear as a word and a sentence the initial opacity is going to be zero so we want them to pop out set the animation as a bouncy end and duration for this animation let it be to one second and one second delay if you want the letters to stay visible set the animation film mode to forwards and set the minimum width to 10 pixels so that they don't jump around as you can see now all the letters do appear at the same time so what we want to do is we want to add a delay to the indexes that we created and every single letter is going to appear one by one we're gonna use for loop inside of the sas this is a great feature so that we don't have to manually code classes from 1 to 35 use the loop and go from the indexes from 1 to 35. inside of the loop we are creating textanimate class with underscore and the index from the loop and we are adding animation delay animation delay is dividing index by 10 so for every single letter we're getting 10th of a second and when we refresh our page we can see that our letters are appearing in a sequence beautiful animation after animation is done we want to add hover effects for our letters so when we hover over effect we get the yellow color and also we get the rubber band effect so let's add that set the minimum width to 10 pixels so the text is not jumping around display to inline block animation fill mode to both and finally when we hover over our characters we want to add animation rubber band one second and the color to be our default yellow color next in the index.js file of the home folder we can utilize this class so we're going to use use effect hook in this effect i'm going to return the set timeout and inside of the timeout after 4 seconds i want to set the class to text animate hover and i will pass an empty array for dependencies so this runs only once and now when we hover over our text we should get the hover effect let's reload the page and for some reason it's not appearing if we check our index.css file we can actually see that we are placing text anime hover as a child of text animate so let's just place it outside of it and let's try again after a couple of seconds for loading boom we have the hover effects i love it in order to complete the home page i want to display the logo on the right side of the page and animate it using gsap library so let's create a separate component for it inside the home folder create a logo folder and again create index.js file and index.css file and let me close all the other files now inside of the index.js file we want to import our index style file on top now i will just create a dummy logo component so that we can insert that inside of our home page and continue with coding define a constant logo which returns only a hello text and export default logo now go to homeindex.js file and let's import it at the bottom and automatic import didn't work for some reason so let's import it manually just type in import logo from the same folder logo and there you go let's build our logo component now remove the hello world and insert the curly braces inside of the curly braces we want to enter the return statement in the return we want to create a wrapper div the name of the wrapper is going to be logo container in the logo container we will have two images one will hold the solid logo image and the other one is going to be transparent and once the loading animation is done we want to display the solid logo import the solid logo from assets images and the name of the file is logo s.png and place that in the source attribute of our image don't forget to add the alt attribute and put it s and next to that i can paste in the svg outline s logo and all the assets like i mentioned are going to be in the description box so that you can build the entirely same website as i'm building here now in order to target our svg element inside of the svg and the g tag add the class name of the svg container all these three elements are going to be hidden as well svg container svg itself and the solid image so in order to manipulate with them and apply gsap animation to it we need to use use ref to these three elements one reference is going to be for the background or rather container the other one is going to be for the solid image and the third one is going to be the outline of the logo now let's add some stylings to our logo so it's not overlapping with our text first let's tile the logo container class reset the zindex to zero set the width to be 400 pixels set the height to be 60 pixels position will be absolute position on top of the element is going to be zero for the position right i will set 15 percent it's looking better already set the bottom to be zero position left is going to be auto and set the same setting for the margin as well next one is svg first i want to set the width to be a hundred percent of the container next set the height to be automatic bottom position of the svg is going to be zero next i want to tilt my logo slightly on the right side i will use transform rotate z in order to achieve this and the rotation value is going to be 30 degrees i'm adding important attribute so it doesn't get overridden later on the last piece of the puzzle here is solid logo set the position as absolute the top position of the element is going to be auto i will use the same value or the right position and also the same value for the bottom the only different position property is going to be the left and it will take the zero value margin is also going to be automatic set the width to be a hundred percent and set the opacity to be zero as we want the solid image to appear once the logo animation is done and again we want to apply same rotation as we did for the outline logo place the rotation value as 30 degrees if i remove the opacity for a second and the transform rotation value you can see what it does to our logo if you want our solid logo to appear on top set the z index to be 1. now the reason why we don't see our outline logo is because we haven't set our stroke settings let's do that use the svg container class to target the svg element that we added set its row color to be our default yellow color and set the stroke width to be 10 pixels and finally we can see it clearly the last style that we want to add is to set the opacity 0 to our logo container as container will have fading animation now we can switch over to our index.js file of the home component first add the logo container ref to our bgref to our image i want to add a reference to our solid logo ref and for the svg path we want to add outline logograph next in order to apply our animation effects we will use use effect hook so define one on the top for the array of the dependencies set it as empty array as i want this to execute only once library of choice for animations is gsap so import it from gsab trial and first we want to register the plugin for drawing the animation on the svg next call the gsap timeline function that calls the animations in a sequence called the 2 function which will represent the end state of the animation the first argument is the element that we want to animate so set the background ref current as the second argument we can set properties inside of the object set the duration to be one second and the opacity as an endpoint to be one before our function we need to add a dot and for the draw svg plugin it didn't work for the automatic import so we need to do it manually so place it on top import raw svg plugin from gsab trial draw svg plugin and now when the page loads we get the fade in animation next i want to chain animation on top of this current fade in animation so i will call the from function which is similar to 2 as it receives the first argument as the element that you want to animate in our case it's outline logo svg set the draw svg property as 0 which is a starting point and it starts from very beginning and duration to 20 seconds so it's going to be a long animation and as you can see it creates that beautiful drawing svg animation when the drawing animation is done i want to fade in the solid logo so the logo creation animation is completely done to achieve that call the gsap from to function and as a target element set the solid logograph next attribute is the starting point of the animation and that's opacity zero and is the third argument is the end state of our animation which is opacity 1. set the delay to 4 seconds and duration to 4 seconds and that finishes up our logo animation so let's preview it let's reload the page and see the complete homepage animation we have the nice fade in and that beautiful drawing animation and when the drawing is done the solid logo appears and if we refresh again we can see on the left side that we have the text popup animation i could refresh this over and over again outstanding job let's build our next page it's going to be an about page so create new about folder inside of the components folder and create again index.js file and index.css file close all the other files and let's create our about component boilerplate code const about equals the function that returns hello and just export default about now in order to use it we need to create a new route so inside of the app.js duplicate the new route and set the path to be slash about and for the element import the about component that we just created and if we click on about link we land on our new page first let's import our index.scss file remove the hello string add the curly braces and inside of our component add the return statement inside add a first div with a class name of container and about page and similarly as on home page we have another div with a class name of a text zone where we will place our h1 tag and a paragraph inside of the h1 tags we can use our animated lattice component that we created for our home page for the string array parameter we want to pass in an array of characters this time it's going to be about me and for the idx property i want to set in 15 which actually means 1.5 seconds delay and just update our import to be relative to the folder that we are in and we get our text below this animated title i will have three paragraphs as this is about section i will tell a little bit more about myself and now instead of typing all this text out and torturing you to watch it i typed it already so i can just copy paste it i will copy paste three paragraphs and i will just paste in the text in the first paragraph i say how ambitious i am in the second one i say how confident i am and from the first two you can tell that i'm very humble right and the last paragraph is one sentence definition now let's add some styles to it so open index.css file in the layout folder as this is going to be repeated in the context page as well add a very top class about page and inside of it add a tag zone and this part will be very similar on the context page set the position as absolute set the left position property as 10 percent so it's not behind a bar add the transform translate y property to minus 50 but before we move it on top we want to add a top property of 50 width is going to be only 35 as we will have another elements on the right side of the page set the vertical align to middle and the display property to the table cell and additionally max height is going to be 90 next i want to target our title i will set the font size to 53 pixels font family will be colverica color of our main title will be yellow our default yellow color set the font weight to 400 so it's not as bold i will reset the margin top to be zero i will set position to be relative and margin bottom to be 40 pixels set the left position property to 10 pixels and same as on the home page we want to add h1 tags before and on the after so i will use before and after pseudo selectors on db4 set the content to be opening h1 tag for the font family again we will use that label aurora font let's decrease the font size to 18 pixels set the position to be absolute so that we can move it around margin top will have negative 10 pixels left will have the same value 10 pixels set the opacity to 0.6 so it's slightly transparent and the final style is line height 18 pixels let's do the similar for the after pseudo selector set the content to be closing h1 tag for the font family you probably guessed it label or ror and we want to remove the space on the closing h1 tag let's reduce now font size to 18 pixels and let's adjust the line height accordingly to 18 pixels as well again we want to be able to move it around so set the position to be absolute and for the position left property i want to set to minus 30 pixels bottom position property will be minus 20 pixels let's set margin left to be 20 pixels and let's reduce the opacity once again to 0.6 now let me give some style to the paragraphs they are barely visible set the font to be 13 pixels color of the font is going to be white so we finally see it for the font family use good old sun serif and i want this text to be really thin so set the font weight to be 300 minimum width of the paragraphs will be fit content and the paragraphs are going to have a popping animation so i will set animation to pulse and duration is going to be one second but i don't like the animation where they pop up at the same time having that in mind i will add a slight delay to every single one of them i will use ends of type selector and for the first element i will add animation delay to 1.1 second and when i reload the page you can see what the animation the first paragraph has let's do the same for the other two copy paste the code that we just coded for two times update the selectors two and three and animation delays accordingly to 1.2 seconds 1.3 seconds let's reload the page to see the final result we get this nice animation and the last thing let's add the class for the hover effects the class name seam is on the home page is text animate hover and this time we want the color to be white because our text is by default yellow the hover effect is not working because we need to alter the class after initial animation is done so let's do that as we did exactly the same thing in the home index.js file as well let's go and copy it over copy use statehook from index.js homepage file this hook sets the initial value for our classes and just import it next let's copy over the use effect hook in which we use the set timeout to update the classes after 4 seconds are done again we need to import a use of ad hook i'm using automatic imports now we can pass our letter class to the letter class attribute of the animated letters component and now after the animation is done the hover effect is here only thing that i want to update is to set the delay to 3 seconds as on the about page we don't have that long loading animation at the beginning like on the home page and now let's go the right part of the about page it will be a cube with the logos of the skills that i possess and it will be rotating so add a div with a class name of stage cube inside of that create a div with a class name of cube spinner cube spinner will hold the six sides of the cube with just different icons so let's create a first one with a class name of face one inside of the phase one i will have font awesome icon and for the first icon i'm going to use fa angular color will be this red dd0031 now copy paste this div five times then just update the class names to phase 2 phase 3 phase 4 phase 5 and phase 6. now update the icons for the second one it's going to be fa html5 for phase 3 it's going to be fa css3 for the fourth one it's going to be fa react for the fifth one f a j s square for the javascript for the last one f a get out for the kit all these are imported from fourth awesome free brands svg icons so now open the index style file for the about page and let's add some stylings to our cube first let's style the stage cube container set the width to be fifty percent so it's going to take only the half of the page set the height to be a hundred percent and position top to be zero i will add some padding on top so set padding top to be eighteen percent set the margin left to be zero position property set it to be as absolute position right property set it to be to the maximum right so it's a zero value and the last style is overflow hidden if we check our cube now it looks like a list of red icons very small icons so the next thing that i want to do is to update the colors of these icons so open the index.js of the about page and for the second icon put this hash code five two nine for the third phase static hash code to be two eight a four d nine forty phase four set it to be five e d four f four forty phase five e ef d8 1d and the last one ec4d28 and now every icon in every scale has their proper color it looks much more nicer now next open the style file of the about page and let's continue with adding the styles to our cube because right now it's just a list so let's add the rotation animation actually the spinning animation cube spinner is going to hold this animation so set the animation name to spin cube and let's define this is going to be a custom animation that we are going to code define the animation with add keyframes and the name is spin cube from property is going to be empty n2 is going to be like a starting position so set the transform rotate x as zero degrees rotate y also to zero degrees and rotate z to zero degrees so like i said this is a starting point of our animation on the 16 percent of the animation we want to transform rotate y to minus 90 degrees on 33 we want to leave rotate y to minus 90 degrees but we will set rotate z to 90 degrees on the half of the animation i will copy over the same styles and for the rotate y i will update to minus 180 degrees and for the rotate z i will leave to 90 degrees on the 66 percent of the animation i want to copy over again the same styles and i will just update rotate y to minus 270 degrees and the last keyframe is 83 percent where i will set transform rotate x to 90 degrees next let's add the rest of the animation properties so that we can trigger the animation so for the cube spinner set the animation timing function to easing out this will make animation flow very smooth next we want to set our cube to be spinning forever or forever the user is on the page so set the animation iteration count to infinite the animation duration is going to be 12 seconds and after that it's going to repeat the spin over and over again for the transform style set the preserve 3d for the transform origin property set it to be 100 pixels 100 pixels and 0 and this will center the rotation of the animation and for the margin left set it calculated 50 minus 100 pixels which is the width of our cube so it's in the dead center of the right side if we check our animation now it started the rotation and the spinning but it misses some of the styles on the cube itself so it represents the cube and not the list let's add those now let's style the divs inside of the cube spinner so set the position to be absolute the bit property to be 200 pixels and the height property to have same 200 pixels add the border to the divs so set the border one pixel solid ccc which is a gray color for the background of the cubes i want to set the transparent white so set the background to rgb a and put the 255 value three times and the opacity 0.4 next we want to align our icons so set the text align to center and we want to increase the size so set the font size to 180 pixels to easily align it vertically set a display to flex and in this case actually we don't need text align setter so set the justify content to be center for horizontal alignment and for the vertical one set the align items to center also i want our box or cube to glow so set the box shadow to 0 0 20 pixels 0 pixels and light yellow if we check the state of our animation right now it looks much better it resembles more to the cube but we need to give it some 3d effect so let's add that inside of the cube spinner target the face 1 element set the transform property to translate z to 100 pixels we want to separate the elements into 3d space and i'm targeting zaxis in this case next copy paste the same code for 5 times and updated classes to target phase 2 phase 3 phase 4 phase 5 and phase 6. now for the phase 2 set the transform rotate y to 90 degrees and translate z to 100 pixels next for the phase 3 set it transform to rotate y to a 90 degrees rotate x to 90 degrees as well and translate z to 100 pixels same as the previous phase for the phase 4 div set the transform to rotate y to 180 degrees rotate z to a 90 degrees and translate z to 100 pixels for the next phase 5d we want to set the transform to rotate y to minus 90 degrees rotate z to a 90 degrees and translate z to 180 pixels and for the last one the phase 6 copy over the phase 2 and set the rotate x to minus 90 degrees translate z will be 100 pixels and if we check our animation now we get this beautiful cube spinning with all the skills that i have in it that's very nice now let's add some loading animation for between the pages now when we switch between the pages i want to show the pacman let's do that first in the about page so open up the index.js file in the about folder add a surrounding tags on the very bottom import the loader component from react loaders and set the type as a pacman next open the app.scss file and here i will import style for a pacman loading animation on the top import tilda loaders.css source slash animations slash pacman.scss now the pacman is loaded but it's positioned wrongly behind a bar so let's position it correctly use the loader active class to set the display to block position as absolute position left will be set to 0 and the position right will have the same setting zero to place it in the center set the margin to auto next set the top position to zero and bottom position to zero as well to align it vertically set the width property to be 50 pixels and also height property will be 50 pixels as well and the pacman now has correct size and the placement let's give it a fadein animation so set the animation property to fade out duration 1 second and delay 1 second animation field mode 2 forwards and now when we reload the page we get this pacman loading animation which fades out that's very nice let's add it on the home page as well so this time open index.js file in the home folder and again add a wrapping div and on the very bottom again import the loader component from the react loaders and set the type as a pacman and that should do it let's preview and now when we reload the page we can see that we get the pacman loading animation and also switching between the pages about and a home page we also get the animation i like that now the last thing on our portfolio website that is left to be done is our contact page so let's build that next close all the files that we opened in the components folder create contact folder in this folder and you know the pattern already create index.js file and index.scss file in the index.js file let's first import our style file on very top and let me create a boilerplate code for a functional component so constant contact equals to a function which returns hello and at the very bottom export default contact now we need to create a new route so inside of the app.js file duplicate the about route and just update set the path attribute to be contact and element to be contact now we can go back to index component and let's remove this string add a curly braces and a return statement in the contact page same as on the other two we will have surrounding tags and we'll have two divs actually one div and one loader for the div add a class name of a container and contact dash page underneath add the loader from react loaders and again set the type to a pacman on the contacts page on the left side i will have tag zone on top and below that there will be a form contact form and on the right side of the page you will have a map with the location of where i live let's add the animating text on top first so add a div with a class name of text bash zone inside similarly like on other pages add a h1 tag and inside of this stack we will use animated letters component that we created previously so it's now really easy to animate the titles that we use on our pages automated import didn't work for some reason so i will manually import it so import animated letters from the folder above animated letters the first property that we need to pass in is string array on this page i want to display contact me so i'm passing as an array of characters contact me make sure to put the correct spelling and make sure to add the space in between the words for the index start property let's put 15 which means 1.5 seconds delay of the animation for altering the animation class when initial loading is done we will use again the same code that we coded on the about and on the home page so let's just copy it over and now i'm just using automatic import to import a used state hook and use effect hook now we can use the letter class property that we just created and pass into our animated letters component and just like that we have our title animated but we just need to give it some styles to position it better and to make it more visible as we already added text styles for the about page similarly like the one we have on the contact page i will go to the layout styles and just add contact page and if we reload our page we can see that the title is done and animated so our development is getting faster and faster as we have done the setup right let's add some description below add a paragraph tag and once again i will just copy paste in the text and you don't have to suffer watching me typing that out if we reload the page we can see that the both of these are animated already now let's build a contact form after the paragraph add a div with a class name of contact form inside of the div add a form inside of the form add an ordered list first list item will have the class name of the half which only will take the half of the row and inside of this list item i will place the input element type will be text name attribute will be name placeholder will be named as well and it will be required and we got our first field now let's copy over this list item and paste it and let's adjust the input to be email name also email and placeholder also email and leave it as required the next input will be for subject so this list item will take full row width so we are not adding class name of half set the placeholder to subject type to text name to subject as well and this one will be required also the next list item will hold the message input and i will be using text area for it set the placeholder of the text area as a message and looks like that i have a typo here set the input as a lowercase add a name attribute to the text area let it be message and set it required and the last list item in our form will be a submit input so set a type as a submit and add a class name of a flat dash button and set the value of it to send jsx part is done let's add some styles first let's target contact form set the width to be 100 and margin to up to 20 pixels for the unordered list set a padding to be zero and for the margin use the same value for the list items as well reset the padding to be zero and set the margin to be 0 as well we don't want any bullet points so list style set to none and set the margin bottom to 10 pixels overflow will be hidden display mode as block position is relative and we want opacity to be zero as i want this to fade in as all other elements that we have on this page and i will set animation to fading up two seconds animation and two seconds delay as i want elements to stay on the page set the animation fill mode to forwards and let's preview our fade in animation that looks very nice let's continue with styling the input elements first for the li half element set the width to be 49 and let's add some small space on the left side so margin left set it to be two percent set the floating style to be left and just to mention here i'm refactoring my code from like seven or eight years ago so this is why i use the floats these days i use display flex mostly add the clear both to li element and for the half add the clear none as i want it to be inline with the other half and set the first shallow bit to have the margin left zero so we want only the second child to have the margin in the space on the left next i want to target input type text and input type email as they don't have any visual differences only functional ones for both of these elements set the width to be full a hundred percent and let's remove the borders so put the border as zero background of our input elements is going to be this dark blue one one 5 1 7 3 hash code let's increase the size of the elements so put the height to be 50 pixels set the font size to be 16 pixels color needs to have a contrast to this dark background so set it to be white fff let's remove the padding on top and the bottom so set the padding 0 and on the left and the right side let it be 20 pixels to keep the same width and height of the element set the box sizing to border box the next element on the list is text area which will have the similar styles like the previous elements and the inputs set the maximum width to 100 remove the border so value is zero the background is going to be this dark blue the same one as we used the previous inputs height 50 pixels font size 16 pixels again i want contrast for the color and the background so set the color to be white fff padding this time 20 pixels on all four sizes minimum height will be 150 pixels this is the largest element as it holds the biggest value and to retain his size set the box sizing to border box and the last element is our send button which is not the least definitely use the flat dash button css selector and set the first style of the color to our default yellow ffd 700 background to 0 0 font size to 11 pixels i want the sliders to be spread a little bit so set the ladder spacing to 3 pixels there will be no text decoration so set it to none padding on top and bottom is 8 pixels and on the left and the right side is 10 pixels and let's add the border so set the border to one pixel solid and our default yellow color ffd 700 float it to left side add a little bit of border radius i'll set to 4 pixels update the float actually to go to the right side and our form is done now let's make it work for the implementation of our code i will be using the email.js library the link to this library will be in the description and you need to go there and create an account once you do that you will get this initialization code which you can paste in inside of the body tags only the token will be different obviously once we finished initializing our email js library we can get back to our contact index.js file first we need to get a reference from our form so create a const ref form which equals to use ref hook now we can pass in this value to the ref attribute of a form so set the ref to the ref form and call the unsubmit method in the unsubmit event handler i will call send email function that we will create just in a minute so before the return statement add a const send email and as a parameter it receives an event i want to stop default submitting so call the eprevent default method in this method we will use our email.js library so let's import it on top import email.js from at email.js slash browser on the email.js object call the send form function this function as a first argument receives service id in this case it's a gmail as a second argument it receives a template id and this template id you get from your account once you created the account and then you create a template the third argument is the form reference and the fourth one is user token which you get upon registration once again link to this library will be in the description below and after our email has been successfully sent we want to send a message to the user so the easiest way to do that is to use window alert and what we can do else is to reload our page so that our form is reseted so call the window location reload and pass the argument as false but in case we fail to send the message again notify the user that operation failed and they need to try again and now we can test it only thing that i forgot to add is to call the used wrap hook and now we can go to our form and test it out i will just enter some random values for the testing but as you can see it has browser validation in place input the valid email format and fill in all the required fields in order to be able to send it and when all that is said and done we get the confirmation message that it has been successfully sent but let's check my gmail inbox and when i open my email i can see that i received a message from email.js and as you can see subject and email are there but actually we are missing the message itself so let's check our form and yes looks like that we had a typo so type in message correctly and let's try again again fill in all the dummy text so put test name test email so this needs to be a correct format text subject and text message and submit it once again we get the confirmation and let's open our email and this time we get the message as well and that's how you can create a form without need for a backend server you just need an email.js library in order to do this let's continue on the right side of our contact page i want to display a map with the position and the location where i live in for this purpose i'm using lee fleet maps we already installed the package i just need to import the styles inside of the index file once again you will be able to find the link to this library in the description close the index.html file and get back to index.js in the contacts folder before we add a map i want to add a little box on top with information about my location so after the text zone add a div with a class name of info dash map inside of this div let's add some text i'm putting my first name and my last name and i'm adding a break after that i put the name of the country where i live in after that i will put some random street name with random number after that add another break tag and after that i will place a name of the town where i live in another break and i will add a span in this pen i will add my real email address in case somebody wants to contact me directly next let's add some styles to our info top use the info map css selector set the position of this box as absolute background color will be completely black so 0 0 0 set the position top to 50 pixels position right will be 30 this is going to be a little bit off from the center and this box will be on top of everything so set the z index to 999999 width will be 267 pixels set the padding to be 20 pixels on all four sides to make the complete contrast set the color to be white so fff for the font family i will use helvetica and for the font size set it to 17 pixels i want font weight to be slightly thinner so set the font weight to 300. this box will also have fading animation so set the initial opacity to zero and set the animation itself to fade in duration 1 second and delay 1.5 seconds as i want this box to remain visible set the animation fill mode to forwards and the last thing which i want to style in this box is our span which holds my email so set the font size to slightly lower 16 pixels set the display as block as i want some separation on the very top add a padding top to 20 pixels in order my email to stand out i will change the color to be our default yellow ffd700 and let's see what we got and that's exactly what i needed so let's add the map itself next to the info map add a div with a class name of map wrap so this is a wrapup for our map next open our index style file and add some of the styles to a map wrapper first set the background property to rgba 8 253 216 and opacity 0.1 this wrapper is going to be on the right side so set the float to the right set the bit to 53 percent and height to 100 and we have our container now with this greenish color we have already installed the athlete package but we need to add some styles to our index.html file links to the package and the instructions how to install it again will be in the description again open the index.js file in the contact folder in the map wrap add the map container component from the react leaflet library in the center attribute you will pass in the coordinates where you want your map to have the center and for the zoom attribute you will pass in the level of zoom you want to be applied by default in the map container add a tile layer component with the following url https colon slash slash in curly braces s dot tile dot open shape map dot org slash in curly braces z slash incredibly braces x slash in curly braces y dot png this style component is the actual map component next to the tile layer i will add a marker component and know this component you are importing from rear cliff lead i will add position attribute and it will have the same coordinates as the center inside of a marker let's add a popup and inside of this popup let's add some message for the visitors slova lives here come over for a cup of coffee and smiley now we need to add some styles in order to see our map and to make it visible so in the style file of our contact page add a left fleet container class set the width property to 100 and the height property as well to the same value 100 set the position to relative once again we want this element to fade in so set the opacity to 0 and now let's set the animation animation will be back in right and duration will be 1 seconds delay 1.2 seconds and as we want our map to stay on the page set the animation field mode to forwards and that should be the last style that we applied on our website let's see our results and now as you can see inside of the container we have our map there's a pin drop with this popup message and the center of the map is my hometown and when we reload the page we can see that fading right animation on the map and to sum up what we have accomplished in this hour and a half so we build our home page where we should impress people without drawing svg animations and is popping up text animation we added a pacman animation to make the page switching more interesting and on the about page we can impress people with this custom made css rotating animation and the last on the contact page we added this interactive map and on the left side we created and implemented this beautiful form i wanted to make this tutorial short so i created only three pages but this tutorial could be extended to add portfolio page and maybe optimize it to mobile devices and if you would like to see the second part of this tutorial please let me know in the comments and also please check my channel for other tutorials like this one and i spent ton of time to make these tutorials for you guys so please spend a couple of seconds to subscribe and like my video and i see you guys in the next one
