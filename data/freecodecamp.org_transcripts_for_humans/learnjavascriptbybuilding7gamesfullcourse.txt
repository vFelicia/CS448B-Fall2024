With timestamps:

00:00 - hey everyone and welcome to this
00:02 - tutorial on learning javascript through
00:04 - making seven classic games my name is
00:07 - annie cuba and i'm a software developer
00:09 - and course creator on youtube in this
00:11 - course i'll be teaching you how to use
00:13 - javascript methods and properties in
00:15 - order to build seven games in order of
00:18 - difficulty
00:19 - this will be
00:20 - rock paper scissors memory game
00:23 - whack-a-mole 2d breakout frogger connect
00:26 - 4 and space invaders if you are new to
00:29 - javascript please make sure to do the
00:31 - gives an order as once i cover a method
00:34 - of property it is unlikely that i will
00:36 - go into much detail on it again
00:38 - by the end of this course you will have
00:40 - used all of these javascript methods and
00:43 - properties
00:44 - now who is this course for this course
00:47 - is for anyone who has covered the
00:49 - fundamentals of javascript in theory and
00:51 - would like to use it in practice so in
00:54 - other words if you are familiar with
00:55 - what a function is a variable is what
00:58 - loops look like and so on this is the
01:00 - course for you however if you have never
01:02 - touched javascript before and would like
01:04 - to have a go anyway please do give it a
01:06 - go and see how you get on i will be
01:08 - taking things super slow and explaining
01:10 - as much as i can along the way
01:13 - now it is important to stress that these
01:15 - games are just to learn javascript and
01:17 - will be the bare bones of the game
01:20 - this means that i will be giving you the
01:22 - most basic level of code for the game to
01:24 - work i'm doing this for two reasons
01:27 - reason one being that it would be too
01:29 - much to build a game with all the real
01:31 - features of the official games as well
01:33 - as tests for them and reason two is that
01:35 - i want to give you the opportunity to
01:37 - take the game build on top of them add
01:39 - features add levels style them up and
01:42 - truly make them your own
01:44 - now some of you might have already seen
01:45 - this video before this is an updated
01:48 - version that takes things much slower
01:50 - with a more beginner approach so i hope
01:53 - you enjoy it
01:56 - next up we are going to be making a game
01:58 - of rock paper scissors in this game i
02:00 - will be showing you how to make a game
02:03 - that checks for a win lose or draw
02:05 - against a computer that randomly selects
02:07 - either rock paper or scissors
02:09 - if you pick rock against scissors you
02:11 - win but against paper it will lose if
02:14 - you pick scissors and the computer
02:16 - chooses rock you lose but will win
02:18 - against paper and if you pick paper well
02:20 - you guessed it you will lose against
02:22 - scissors but win against rock if you
02:24 - choose the same answers of computer it
02:26 - is a draw by the end of this tutorial
02:29 - you have used all of these following
02:31 - javascript methods and properties
02:35 - okay so let's get to it with our first
02:38 - example
02:39 - now this approach as i mentioned is
02:42 - gonna be a little bit more beginner
02:44 - friendly i think um
02:46 - we really sort of take stuff step by
02:49 - step and we don't use switch statements
02:51 - we use if else or if statements as well
02:55 - as
02:57 - just use numbers more than anything as
02:59 - well as html rather than just purely
03:02 - javascript so hopefully you enjoyed this
03:04 - tutorial and hopefully you watch the
03:07 - other two as well to show me which one
03:09 - you prefer better so yeah definitely let
03:11 - me know that uh let's go
03:14 - so first off here is my project as
03:17 - mentioned there will be no styling in
03:18 - this so i simply have an index html file
03:23 - and then i have linked my app.js file
03:27 - to my index html so because my app.js
03:30 - file is in the root of my project all i
03:33 - have to do is simply name the file
03:36 - obviously it's a javascript file because
03:38 - of the js extension we are telling our
03:41 - code editor to treat this as a
03:43 - javascript file
03:46 - so make sure that the script tag is at
03:50 - the end of your body
03:53 - so there we go
03:55 - all the code that we're going to all the
03:56 - html code that we write is going to have
03:58 - to be above
03:59 - this script tag now we could have used a
04:03 - dom content loader in the app.js file so
04:07 - i do that in a lot of my videos too so
04:09 - that is just another way that you can
04:11 - work so you can put the script tag at
04:13 - the bottom or you can use the dom
04:14 - content loaded
04:16 - event listener the choice is up to you
04:20 - okay so the first thing that i'm going
04:21 - to do like i said i am going to be
04:23 - working with html and css in this video
04:26 - is i'm just going to put some h2 tags
04:29 - so this is my first h2 tag and i'm just
04:32 - going to put compute computer computer
04:35 - choice i've got our
04:37 - computer choice and in it i'm going to
04:39 - have a span
04:41 - to sort of break up that h2 tag in which
04:44 - i'm just going to have an id
04:47 - of
04:48 - computer
04:50 - choice because we're going to want to
04:51 - pick that out to work within our
04:53 - javascript file later so we have the
04:56 - computer choice
04:59 - i'm also going to have
05:01 - user choice
05:03 - so
05:04 - let's put user choice
05:06 - you can have your choice if you want
05:08 - it's it's up to you
05:11 - and then finally let's also have a
05:13 - result
05:14 - so i'm just going to have results
05:16 - like so and give it the id of
05:19 - you guessed it results so we can pick it
05:21 - out to work with it in our javascript
05:23 - file later
05:25 - now along with that i'm just going to
05:26 - have a button
05:29 - um let's put rock in it and then just
05:31 - give it the id
05:33 - of
05:34 - rock like so
05:36 - again so we can pick it out in our
05:37 - javascript
05:39 - um and then let's have i'm using command
05:41 - d by the way to select that and i'm
05:44 - going to put paper
05:46 - once again command d so i can select
05:48 - both and scissors
05:50 - scissors
05:52 - scissors there we go
05:54 - so there we go now if i open this up i'm
05:58 - going to copy the path and simply go to
06:01 - my browser
06:04 - this is what you should now see in your
06:06 - browser so i'm just going to get the
06:08 - inspect up as well
06:11 - great
06:12 - now the next thing i want to do is do
06:13 - some logics so that if i click on rock
06:16 - rock will show up here and at the same
06:19 - time a computer choice will be generated
06:22 - and then we can figure out who's won or
06:25 - lost
06:26 - so for this i'm now going to have to go
06:29 - to my javascript file
06:31 - so in here
06:33 - the first thing i'm going to do is
06:34 - actually pick out all the uh
06:37 - elements with these ids so i'm picking
06:40 - out essentially the span and i'm doing
06:42 - it by the id
06:44 - so i'm going to use document get element
06:47 - by id i could use query selector i'll
06:50 - show you how to do that in another
06:52 - lesson but i'm simply just going to pick
06:54 - out computer choice
06:56 - like this and i'm going to store it as
06:59 - const
07:00 - computer choice so we can work with that
07:04 - element in our javascript
07:07 - let's do the same for user choice so
07:09 - once again i'm simply picking out this
07:11 - span based by the id
07:16 - so that's what i'm doing and let's save
07:18 - this as
07:20 - user choice and let's do the same for
07:22 - the result of course so i'm actually
07:25 - just going to copy this
07:27 - um
07:29 - let's call this
07:31 - result display
07:33 - and then pick it out by the id of result
07:36 - because that's what this is it's an id
07:40 - of result
07:41 - great
07:43 - so we've done that the next thing i want
07:46 - to do is actually
07:49 - get all the possible choices so there's
07:51 - many ways i can do it um this is the way
07:53 - that i'm going to show you for this
07:54 - tutorial
07:56 - uh const possible choices and i'm
07:59 - actually going to use a query selector
08:02 - to get all of them so document
08:05 - query selector
08:08 - all
08:09 - and i'm going to pick out everything in
08:13 - here that is a button
08:16 - element
08:17 - okay
08:18 - one thing i could have done is given
08:19 - this as a class name of
08:22 - button and if i gave that same class
08:24 - name to all of these i could pick it out
08:26 - by class name
08:28 - but as i only have three buttons here
08:30 - and i don't plan on putting any more
08:32 - buttons here okay so keep that in mind
08:34 - when you're styling it up
08:36 - if you want to add more buttons
08:38 - in here perhaps use the class name on
08:40 - those buttons otherwise this is going to
08:42 - pick up that button that you create
08:45 - so const possible choices i picked out
08:49 - all the buttons so i can use them now
08:52 - i'm going to grab the buttons possible
08:55 - choices and for each
08:57 - button
08:58 - or i can call it a possible choice
09:01 - whatever you want plus
09:04 - possible choice
09:07 - i want to i'm just going to minimize
09:09 - this because we don't really need that
09:11 - for each possible choice i'm going to
09:13 - grab each possible choice and use add
09:16 - event listener to listen up for a click
09:18 - so if i click any of the buttons i want
09:22 - essentially something to happen
09:24 - okay so i want this fi we can pass
09:27 - through a function i'm literally just
09:28 - going to pass
09:29 - through a function like so
09:33 - and then what i want to happen is well i
09:35 - want to pass through the event
09:38 - so e for event
09:39 - and then i want to actually get
09:43 - the target id
09:45 - so whatever i click i want to get the id
09:48 - and i want to save that as um the user
09:52 - choice but i want to save it globally
09:54 - okay so i'm just going to put let user
09:57 - choice so we can access it wherever
09:59 - so whatever etag the e target id is i'm
10:03 - saving it to use a choice i'm just going
10:04 - to save it here so i can use it in my
10:06 - file
10:08 - so that is what i am storing so the next
10:12 - thing i could do is actually
10:14 - get the user choice maybe we should
10:16 - rename this because
10:18 - user choice display because we now have
10:21 - two user choice that can't have that
10:23 - display
10:25 - so now i'm going to get the user choice
10:26 - display
10:28 - and using
10:29 - the property of inner html html and once
10:32 - again just going to assign it the user
10:34 - choice
10:36 - okay
10:37 - so let's see if that works click
10:39 - scissors click paper
10:41 - click
10:42 - rock
10:44 - nice
10:45 - let's carry on
10:46 - um i'm just gonna actually
10:48 - put a space there
10:51 - oops not there what am i doing
10:53 - you computer choice space space result
10:55 - space
10:57 - okay
10:59 - so we are
11:01 - displaying the user choice the next
11:03 - thing that i said i want to do is
11:04 - generate a computer choice
11:06 - so let's write a function that's called
11:09 - generate
11:11 - computer
11:13 - um
11:14 - okay what's that function gonna look
11:16 - like
11:17 - generate computer choice so what i
11:19 - actually want to happen here is i want
11:21 - to get a random number right
11:23 - so
11:27 - uh
11:30 - i can use const
11:32 - random
11:35 - number
11:36 - and then i'm going to use math
11:39 - random and then multiply it
11:42 - by i can use the number three
11:45 - sure um if that's what i want i can also
11:49 - use possible choices
11:52 - length
11:56 - okay
11:57 - so that is the same as just simply
11:58 - putting the number three but for
12:00 - beginners i'll just keep it as three for
12:02 - now um again like maybe i'll just put
12:06 - or you can use
12:10 - possible choices
12:12 - length as that will return a three
12:15 - um
12:16 - okay
12:18 - so now that we've got a random number i
12:21 - actually need to
12:23 - wrap this in mouth floor to round down
12:25 - that random number because that'll give
12:27 - me a random number okay uh and then we
12:29 - want to make sure that it's a full
12:31 - integer
12:32 - let's check that
12:37 - random number
12:40 - so that will give me a random number
12:41 - that's actually from zero to two as we
12:44 - count in indexes so i could just get
12:47 - this and add one just for readability if
12:49 - i wanted to so now let's check this
12:53 - one
12:54 - three
12:55 - two
12:56 - two
12:57 - so it'll always be either one or two or
12:59 - a three right
13:01 - so there we go
13:04 - um so now if
13:08 - random number
13:10 - deeply equals
13:12 - one
13:12 - let's say that computer choice
13:16 - uh equals rock i'm just making that up
13:19 - it could be scissors
13:22 - let's computer
13:25 - choice
13:28 - and then if
13:30 - random number equals 2
13:33 - say
13:34 - scissors
13:36 - and random number equals three
13:40 - let's say paper
13:42 - okay
13:44 - so
13:46 - and then let's actually
13:50 - uh get the computer choice so
13:53 - computer choice display inner html and
13:57 - just show the computer choice
14:05 - so now
14:06 - there we go
14:08 - great
14:10 - cool
14:12 - okay so we're randomly generating
14:13 - computer choice and rather regenerating
14:16 - a choice for us
14:17 - um as i said i've done it this way as i
14:20 - think it's beginner friendly however
14:22 - there is a much neater way we could do
14:25 - all of this that wouldn't involve saying
14:27 - equals one equals two equals three which
14:29 - i'm really excited to show you but i
14:31 - think as a beginner this probably might
14:33 - make a lot more sense and it's more
14:35 - readable but you know let me know
14:38 - okay so now that we've done that let's
14:40 - actually get the result so i'm gonna
14:42 - write another function function
14:45 - get result
14:48 - now if
14:50 - computer choice
14:51 - deeply equals or equals up to you
14:55 - um
14:56 - user choice
15:02 - well then
15:04 - uh return
15:11 - we'll get the results
15:14 - so
15:15 - let result
15:19 - and then we will say
15:22 - it's a draw
15:27 - however
15:29 - oops
15:31 - so that is one
15:35 - now if computer choice
15:38 - this time equals
15:40 - um
15:42 - rock oops
15:45 - and
15:47 - user choice
15:48 - equals
15:50 - let's say paper
15:53 - then
15:54 - who wins then
15:56 - you lost right computer rock paper yeah
15:59 - fine
16:01 - now now we have rock and scissors
16:06 - well then you lost again
16:08 - and then we have uh
16:11 - [Music]
16:15 - actually no you win
16:17 - you win here computer is rock but your
16:19 - paper you win i should really learn how
16:22 - to play rock paper scissors computer has
16:23 - rock
16:25 - but you have scissors
16:27 - you lose if computer has um paper
16:33 - and you have scissors
16:38 - you win
16:40 - if computer has
16:43 - paper but you have rock
16:46 - you lose
16:49 - um
16:51 - what else is there
16:52 - if computer has scissors
16:56 - and you have rock
17:00 - you
17:01 - win
17:03 - and then a computer has scissors but you
17:05 - have
17:06 - paper
17:10 - excuses paper
17:11 - you lose i think that's right oh my god
17:14 - okay
17:18 - cool
17:19 - so now that we've got the result get
17:21 - result we've got the function get result
17:23 - i'm just going to put it in here too so
17:25 - great every time we click we do all of
17:28 - this essentially
17:29 - now i could move this function out
17:32 - if i wanted to or i could just keep it
17:35 - there the choice is totally up to you
17:37 - so now let's have a go scissors the
17:40 - computer choose paper oh wait the
17:42 - results aren't showing ah we didn't do
17:44 - inner
17:45 - in our um
17:48 - let's get the result display in the html
17:51 - result
17:52 - cool
17:53 - so paper oh you lose
17:56 - scissors i chose as a computer choose
17:59 - rock so i lost i chose raw computer
18:01 - tools scissors i win
18:03 - cool it's a draw
18:04 - amazing so that is how
18:07 - i would show you how to make rock paper
18:10 - scissors as a beginner
18:12 - as i mentioned please take this go wild
18:15 - and proven as you wish um i did do it so
18:18 - it's quite verbose and it's quite easy
18:20 - to read
18:22 - uh and of course i did these random
18:24 - numbers here because i just thought
18:26 - again it was more readable for a
18:28 - beginner so if you are a beginner let me
18:30 - know what you think
18:32 - is this clear enough for you
18:35 - uh i'm going to move on so once again no
18:38 - styling of course
18:41 - let's do it
18:44 - in this section we are going to look at
18:45 - memory game memory game is a game where
18:48 - you as the player have to match two
18:50 - cards on a board until none are left we
18:52 - are going to be building out our board
18:54 - game with the use of these following
18:56 - javascript methods and properties
18:58 - by the end of this tutorial you will
19:00 - have a game that looks like this
19:02 - okay so once again basic styling so you
19:05 - can take the game style it up and make
19:07 - it your very own
19:09 - okay so the first thing that we are
19:11 - going to do is start off our project i'm
19:13 - using webstorm which is an ide that i'm
19:18 - going to use in order to start my
19:19 - project of course feel free to use vs
19:22 - code or whatever code editor you wish
19:24 - so in webstorm i'm just going to create
19:26 - a new project so go ahead and click here
19:29 - it's going to be an empty project which
19:30 - i am going to choose to call
19:33 - memory
19:35 - game
19:36 - just like so and click
19:38 - create
19:39 - and great so once my directory has been
19:42 - made i'm just going to add some files to
19:44 - it so i'm going to create a new html
19:47 - file and let's just call it index.html
19:51 - so there we go index.html and i'm also
19:54 - going to create a css file for all our
19:56 - css
19:58 - so a new
20:02 - styles.css file or i could just choose
20:05 - css
20:06 - just click on that and of course a
20:09 - javascript file this is a javascript
20:12 - tutorial so here we go i'm just going to
20:14 - call it app.js just like so
20:17 - so there we go there we have our three
20:19 - files i'm going to start off with the
20:20 - html
20:22 - so let's first off give this a title
20:24 - this is just some boilerplate code that
20:26 - has been generated for me by webstorm if
20:29 - you don't have this generator then
20:30 - please
20:31 - pause here and just copy all this out
20:35 - there we go that's a little bit bigger
20:36 - for you now we're going to have to give
20:38 - this a title this is not going to go
20:40 - show up in our browser this is actually
20:42 - going to show up in the tab of our
20:45 - browser so memory game once again this
20:48 - will not be visible
20:50 - hopefully you should know about by now
20:51 - if you code html but for those of you
20:53 - who need a refresher this will be
20:55 - i'll just show you now let's go ahead
20:57 - and open this up
20:59 - and there we go memory game so i used a
21:02 - shortcut that webstorm offers me which
21:04 - is just to click here which will open up
21:06 - in chrome but if you don't just go ahead
21:08 - and
21:09 - copy the path for this file the
21:12 - index.html file
21:13 - and just
21:15 - simply paste it in the browser
21:19 - like so
21:21 - okay both ways will work
21:24 - so i'm just going to inspect the page
21:27 - to show
21:28 - you what we're going to be using to
21:31 - debug we're going to be using the
21:32 - console log to debug and then we can
21:34 - also use this tab to see what elements
21:36 - are in here at the moment there's
21:37 - nothing in our body tags but as you will
21:40 - see memory game is showing up in the
21:43 - browser tab because that is essentially
21:46 - what the
21:48 - title tag here does okay make sure that
21:51 - it is in the head tags like so
21:54 - okay so first things first let's start
21:58 - off with some html
22:00 - now in this game like i said this is a
22:02 - javascript tutorial so my html is going
22:05 - to be super basic we're going to be
22:06 - adding most of our elements
22:09 - through javascript okay so i'm going to
22:12 - show you how to do that now first off
22:14 - actually we do need to link up our style
22:16 - sheet so go ahead and use the link tag
22:19 - like so thank you tab nine and the uh
22:22 - href is going to be
22:24 - styles css
22:26 - just like that and let's just close off
22:29 - our link tag
22:32 - there we go we can actually just make
22:35 - this sorry self closing
22:38 - just like that
22:40 - okay
22:42 - so what we've done is we've now linked
22:44 - up our style sheet we have just used the
22:48 - style css file as it's not in any
22:50 - directory so it's just in the root of
22:52 - our project the same location as like
22:55 - index.html file so that's all i really
22:57 - needed to do
22:59 - here
23:00 - great and now let's link up our script
23:03 - so to do this i'm going to use the
23:04 - script tag
23:06 - just like so and i'm going to use source
23:08 - app js
23:10 - in order to link up our
23:13 - whoops javascript so
23:16 - there we go
23:18 - what i am saying is that after all the
23:20 - elements have been read then i want to
23:23 - go to my script tag and read whatever is
23:25 - in this file
23:27 - okay so make sure to put it at the
23:29 - bottom between your two body tags and
23:32 - once you have that let's go ahead and
23:34 - start adding some html
23:37 - so the first thing i'm going to do is
23:39 - just add a h3 tag like so and in it i'm
23:43 - going to keep the score
23:45 - so just like so and then with the span
23:47 - i'm going to break this up so that's
23:49 - what the span tag does it breaks up
23:51 - these two tags i'm actually just going
23:54 - to pick this out with an id i'm giving
23:57 - an id so we can pick this up later with
23:59 - our javascript so we can now pick out
24:02 - with our javascript this whole element
24:06 - okay the span the two span tags by its
24:10 - id i'm going to show you how to do that
24:11 - later
24:13 - so we've got our score and then i'm
24:15 - going to create a div
24:17 - and actually give it the uh we can give
24:19 - it the id grid
24:23 - if we want or we can use class because
24:26 - we are going to silent up but
24:27 - essentially we want to be picking this
24:28 - out with our javascript later too so now
24:32 - if we look in our
24:36 - game
24:39 - we will just see a score okay we won't
24:41 - see anything else because you know the
24:43 - span tag essentially doesn't have
24:45 - anything in it yet and our div here
24:48 - doesn't have any styling and it doesn't
24:50 - also have anything in it yet
24:52 - so great let's carry on
24:56 - oops sauce sauce
25:01 - so first things first let's actually get
25:05 - to
25:06 - adding some elements to create our grid
25:09 - in here
25:10 - so i'm just going to go ahead and open
25:12 - up my app.js file
25:16 - so as we saw from the beginning we need
25:18 - to essentially create 12 cards so we can
25:22 - do this in javascript and i'm going to
25:24 - show you how
25:26 - first off i'm actually going to go ahead
25:27 - and start off creating an array i'm
25:30 - going to call it the card array so const
25:32 - card array
25:34 - and an array means we open up these two
25:36 - brackets this is essentially an array
25:39 - and i've assigned the array to the value
25:42 - caudary and inside my array i'm going to
25:45 - be adding
25:47 - objects okay so this is essentially an
25:50 - object it's going to have a name
25:52 - and let's go ahead and call this fries
25:55 - and then it's also going to have an
25:56 - image
25:58 - and i'm going to put a path to my images
26:01 - which i'm going to store in an images
26:03 - folder so again in here i'm just going
26:06 - to go ahead and create a new
26:09 - directory this time called images and
26:12 - i'm just going to put in some images
26:13 - that i have pre-made
26:15 - okay so here they are in my downloads
26:17 - folder one two three four five
26:21 - six
26:22 - food images one blank image which is
26:24 - going to be the back of our card and
26:26 - just one white image for you know if we
26:28 - get a match so all of these i'm just
26:30 - going to drag into my images folder i am
26:33 - going to share this repository with you
26:35 - in the description so you feel free to
26:37 - take these if you wish
26:39 - okay
26:40 - so there you go as you will see they are
26:43 - all
26:44 - here
26:45 - now
26:46 - so now
26:49 - in
26:50 - my array i'm going to actually put the
26:54 - path to these
26:56 - images so i'm going to go into the
26:58 - images directory i'm going into here and
27:01 - i'm going to get the fry's png thank you
27:04 - tab nine
27:05 - okay so here's our first object that i
27:08 - have made
27:09 - and i'm actually going to make another
27:11 - object this time let's call this
27:14 - cheese
27:16 - burger
27:17 - and then of course this needs to be
27:19 - cheese
27:21 - burger too
27:23 - so we've got our fries object our
27:25 - cheeseburger object we also need the
27:28 - hotdog object so name
27:32 - hot dog
27:35 - image
27:37 - images
27:39 - hot dog
27:43 - png and we are making this array as a
27:46 - reminder remember to create our grid
27:49 - with we're going to use this to create
27:50 - our grid with all of these images on it
27:54 - so we've got our hot dog the next thing
27:56 - i want to do is ice cream
27:58 - so i scream
28:01 - ice
28:03 - cream
28:05 - what else do we have
28:07 - we have
28:08 - milkshake next
28:10 - milk shake
28:13 - and this should be
28:14 - milk
28:15 - shake
28:17 - just one more i believe because there
28:19 - should be six pizza
28:22 - and the
28:24 - url
28:26 - and the
28:27 - fire is called pizza png okay so there
28:32 - we go there are six
28:34 - essential images
28:37 - and i'm just going to go ahead and get
28:39 - all of these six
28:42 - oops
28:44 - and just paste them again because we
28:46 - need 12 cards okay we need 12 cards with
28:49 - two matching each time
28:52 - so there is our card array now what i
28:55 - need to do
28:56 - is essentially
28:58 - get them
29:00 - you know
29:01 - uh in a random order
29:03 - so
29:04 - if i just console log out
29:07 - card array
29:11 - and look in the console log you will now
29:14 - see that same entire array that we just
29:17 - wrote showing up here
29:19 - okay so now to get this uh sorted
29:22 - randomly i'm going to show you what to
29:24 - do i am going to essentially get the
29:26 - array
29:28 - and use the javascript method of sort
29:32 - to essentially sort everything in the
29:35 - array randomly and to do this i'm going
29:38 - to use math
29:42 - run
29:46 - and this is a nice trick
29:49 - you just do
29:51 - that
29:52 - so this is a little bit advanced so
29:53 - apologies for this it's just a nice way
29:56 - or trick to sort an array randomly so
29:58 - it's definitely one to remember the sort
30:00 - javascript method works by comparing two
30:03 - values okay it compares the two values
30:06 - and then sorts through it and because
30:08 - math random
30:10 - the math random that you see here
30:12 - returns back a number anywhere from 0 to
30:15 - less than -1 we are checking that it's
30:18 - either you know smaller than 0.5 or
30:21 - larger than 0.5 so the first value in
30:24 - the array is going to go ah it's smaller
30:26 - than 0.5 and then it's r larger than 0.5
30:29 - and it will shuffle it based on that
30:31 - okay a lot to get your head around but
30:34 - you can watch my uh sort
30:37 - algorithm explainer i will make sure to
30:40 - link that in the description below this
30:42 - is advanced though so if you can't get
30:44 - your head around it don't worry just
30:45 - remember that this is a nice shortcut to
30:48 - shuffling an array
30:50 - randomly
30:51 - okay so now if we console log
30:55 - the card array
30:58 - it should be
31:01 - random each time so we've got fries
31:03 - cheeseburger
31:06 - pizza hot dog cheeseburger
31:09 - milkshake cheeseburger fries so that is
31:12 - working
31:13 - let's carry on
31:15 - so now that we're getting a array that
31:18 - is shuffled randomly what i'm going to
31:20 - do is use that to create our board so
31:23 - first off like i said let's go in here
31:25 - and let's grab the
31:27 - div with the id of grid and we're going
31:29 - to grab it by
31:31 - using the id
31:33 - so what i'm going to do here is
31:35 - i'm going to use document
31:40 - query selector
31:42 - and i'm going to search for the id
31:46 - of
31:47 - grid so this hash here means we're
31:49 - looking for an id of grid and we're
31:51 - going to go into our document and use
31:54 - query selector to search for
31:56 - the
31:57 - id so this method essentially looks
32:00 - through the whole thing and finds a id
32:03 - that is grid and goes ah okay that must
32:05 - mean we want this element the whole
32:07 - thing
32:08 - so let's save this as something i'm
32:10 - going to save this as const
32:13 - grid
32:14 - display
32:16 - or we can just call it grid it is up to
32:19 - you
32:20 - so now if i console.log
32:25 - grid display
32:29 - you will see we have picked out the div
32:30 - with the id of grid this is looking good
32:34 - okay so we've got the grid and now i'm
32:37 - just going to make a little spaces here
32:39 - so we can see what's going on
32:42 - once we have the grid i'm going to write
32:44 - a function called create
32:47 - board
32:48 - so this is what a function looks like
32:52 - there we go and a function essentially
32:53 - does something and we have called this
32:55 - function create board so that if we need
32:56 - we can reuse it or it just makes
32:58 - everything more readable
33:00 - so what i want to do is essentially for
33:03 - each item in my
33:06 - array
33:07 - i want to create an element
33:09 - so to do this i can use four each or i
33:12 - can use a for loop i'm gonna use a for
33:14 - loop as i think maybe that's a bit more
33:17 - beginner friendly
33:19 - four let i equal zero so i'm just
33:21 - writing the syntax for a for loop this
33:23 - is what a for loop looks like
33:25 - i and then we have a number here
33:29 - and then i increment by one so this is
33:32 - the syntax for a for loop what is
33:34 - essentially saying is that we're saying
33:36 - start from zero so let i equals zero and
33:39 - as long as i is smaller than ten you
33:42 - wanna increment i by one
33:44 - okay
33:45 - so
33:46 - for loop right here this is what a for
33:48 - loop looks like and essentially what we
33:50 - are saying is that we want something to
33:51 - happen
33:53 - you know 10 times because as long as i
33:55 - is smaller than 10. we start counting
33:57 - from zero so we go zero one two three
33:59 - four five six nine
34:00 - which is essentially ten items if you're
34:03 - counting from index zero and then we
34:06 - stop because i then becomes larger than
34:08 - 10 so we can't execute this loop anymore
34:12 - so what do i want to happen well like i
34:14 - said i want to create images right so
34:16 - i'm going to use document
34:19 - create element which is a great
34:21 - javascript method that will allow us to
34:23 - create an element and i want to create
34:26 - an
34:27 - image
34:29 - so i actually just need to write this so
34:31 - we are creating an image now let's go
34:33 - ahead and save this as card
34:36 - so i've saved as the constant card
34:38 - and what i want to do to this image once
34:41 - i create it well i want to add
34:44 - i want to add one of these images to it
34:46 - so let's grab the card we have just
34:48 - created if i actually console log this
34:50 - out just so we can see everything and i
34:52 - just consolidated console log out card
34:55 - and then perhaps i as well so we can see
34:57 - what's going on and now i call this
34:59 - function because don't forget we need to
35:01 - call the function in order for the
35:04 - function to release all of this
35:05 - wonderfulness and essentially you know
35:08 - execute the code in it
35:11 - so i've call the function now so let's
35:12 - go back here and refresh this page and
35:15 - you will see that i'm creating an image
35:18 - tag each time with the index number all
35:20 - the way to nine
35:22 - so that is what i'm doing so far in my
35:25 - function
35:26 - so to the image tag well i want to get
35:30 - the image so we've stored this as card
35:32 - in our javascript and i'm going to use
35:34 - another javascript method the method is
35:36 - called set
35:38 - attribute and we're going to set the
35:40 - source attribute to my image as well as
35:45 - uh for now actually i'm just going to
35:47 - give it a blank
35:49 - card
35:50 - so we're going to go into our images
35:51 - directory i'm going to get the blank
35:53 - card so blank
35:56 - png so now i'm going to console.log out
35:59 - the card after we've add the source
36:02 - uh attribute with image blank png
36:05 - and
36:09 - we're going to look in source and there
36:12 - you go you will see the path to the
36:14 - blank images file
36:16 - so that's what we have
36:19 - done
36:20 - okay
36:22 - so we've done that we also want to add
36:24 - i'm also going to add a data id so that
36:26 - each card has an id that is unique so
36:29 - data id
36:31 - and that's just going to be i
36:34 - so we can keep track of each one so now
36:36 - let's go ahead and have a look and if we
36:39 - refresh this you will see the source and
36:41 - the data id has been added to my card or
36:45 - in other words my image
36:47 - tag
36:48 - so
36:50 - great and then of course we're still
36:52 - printing out the number to the side
36:54 - so now that we've done that we can see
36:56 - it we need to actually put it in
36:57 - something we want to put it in the grid
36:59 - display we want to put it in between
37:01 - these two tags okay so that's
37:03 - essentially what we're going to do with
37:04 - javascript however
37:06 - so what i'm going to do is get the grid
37:09 - display
37:11 - and i'm going to append
37:15 - the
37:17 - card
37:18 - to it we can use a pen we can use a pen
37:20 - child okay there's actually two methods
37:22 - to our disposal so now
37:25 - ta-da we have added the 12 cards
37:30 - into
37:31 - our div
37:33 - with the id of grid
37:35 - amazing of course you won't see it here
37:38 - okay
37:39 - we have done we've added this in
37:41 - javascript and it is being displayed
37:45 - here
37:47 - okay think of this as sort of just more
37:48 - of a starting point that you want to
37:50 - start out with and then we're adding
37:52 - stuff with javascript okay and that's
37:54 - being added through this script tag so
37:56 - that's why you won't see it's being
37:58 - added after
37:59 - this
38:00 - and that is what is being displayed in
38:02 - our browser
38:04 - cool so maybe let's give this a little
38:06 - bit of styling while we are here there's
38:08 - again not much styling in this because
38:10 - as you know as i've stressed many times
38:12 - i don't want this to be about styling i
38:14 - want you to be able to take this game
38:16 - and truly make it your own style it up
38:19 - really do whatever you wish to it add
38:22 - more features add more levels perhaps
38:24 - add you know like level two will have
38:26 - many more cards i mean that is totally
38:28 - an option
38:30 - uh what i'm gonna do is actually use
38:32 - display flex
38:33 - well actually let's give it a width
38:35 - first let's make it 400 pixels
38:39 - and height
38:41 - 300 pixels this is because i'm just
38:44 - going off of the size of the cards i
38:46 - pre-made
38:47 - so now our grid
38:53 - all right we need to well we can pick it
38:56 - out by the id as well if we want because
38:58 - that was a class uh i thought i gave
39:00 - this a class of grid but i'd give an id
39:02 - of grid so we need to look for the id of
39:06 - grid
39:07 - okay
39:08 - so now
39:12 - the id of grid
39:14 - has the
39:16 - width
39:17 - of 400 height of 300
39:20 - but all of these
39:22 - divs have essentially stretched to fit
39:25 - it i don't want that
39:26 - so what i'm going to do
39:31 - so now
39:33 - you will see that the grid
39:35 - has a width of 400 and height of
39:39 - 300
39:44 - would see we are missing some
39:48 - cards why is that
39:50 - uh that's because we're only looping to
39:51 - ten sorry that's my fault this was the
39:54 - boilerplate that i
39:55 - showed you sometimes it's good to see
39:57 - mistakes though instead of looping over
39:59 - just saying 10 times we want to get the
40:01 - array and get its length okay so i'm
40:04 - going to get the array
40:07 - and use the
40:08 - property of length to find out exactly
40:10 - how many elements are in our array and
40:12 - how many times we need to loop
40:14 - so now
40:15 - there we go
40:17 - we have
40:20 - all of our cards all 12 cards
40:22 - so this is looking good maybe i'm just
40:24 - going to zoom in a little bit so you can
40:26 - see everything a little bit better
40:29 - and i'm also just going to add display
40:34 - flex
40:38 - flex wrap
40:40 - wrap
40:43 - just to get rid of those lines in the
40:45 - middle so display flex essentially means
40:49 - so by adding display flex it means we
40:51 - can utilize the flex wrap
40:53 - okay from flexbox to make sure that all
40:56 - of these did just wrap over each other
40:58 - nicely just like so
41:01 - great
41:02 - so that's actually it for our styling
41:03 - that's all the styling we're to do so
41:05 - i'm going to shut this down now and get
41:07 - rid of the index.html file as well and
41:10 - let's just focus on our javascript
41:13 - so wonderful we have created our board
41:17 - and now
41:19 - once we've created our board i'm
41:21 - actually going to write a function that
41:24 - allows us to flip the cloud when we
41:27 - click it
41:28 - so let's go ahead and write our function
41:31 - for this
41:32 - function
41:34 - flip
41:36 - card
41:38 - so once again there's our function
41:40 - that's what a function looks like
41:42 - and what i'm going to do is essentially
41:46 - think of which
41:48 - card i clicked on
41:53 - so to do this i actually need to add an
41:55 - event listener to each card as well so
41:58 - right here i'm going to get the card and
42:00 - i'm going to use add event listener of
42:02 - the javascript method that will allow us
42:04 - to listen up for events so in this case
42:07 - i am listing out for a click so if i
42:09 - click on the card i want something to
42:11 - happen and that something is going to be
42:13 - the function flip card which i'm going
42:15 - to pass through here's a call back
42:16 - notice i'm not calling it okay otherwise
42:18 - it'll be called straight away i only
42:20 - want to call it
42:22 - if we click on the card there's loads of
42:24 - events you can pass through here okay
42:27 - just check out the mdn docs i've chosen
42:29 - to pick click because i want to listen
42:32 - out if we click we could use mouse over
42:35 - there's many things you can do
42:37 - so for now i'm just going to console log
42:39 - clicked
42:45 - okay so now if i click on a card clicked
42:49 - clicked
42:51 - clicks clicks clicked
42:52 - so we are listening out for clicks on
42:54 - the cards that is
42:56 - pretty good the next thing i'm actually
42:59 - going to show you how to do is on the
43:01 - click well i actually want to get the
43:03 - card i clicked data id
43:06 - so
43:07 - let's go ahead and do that now
43:09 - so i'm going to use the this keyword
43:12 - the this keyword essentially will let us
43:15 - use whatever element we clicked
43:19 - okay
43:20 - and get its get attribute so i'm going
43:23 - to use get attribute to get its data
43:28 - id
43:30 - okay
43:31 - and then let's save this as let
43:34 - card
43:35 - id
43:36 - so now i'm going to say click and it's
43:38 - going to show us the card id because i'm
43:41 - going to pass that through this can be a
43:43 - const it's not going to change
43:47 - if i click it
43:48 - you will now see that i'm getting each
43:51 - card's card id so here are the data ids
43:55 - i'm picking out
43:56 - and i'm just printing them in my console
44:00 - log
44:01 - okay
44:02 - so hopefully that makes sense please do
44:04 - have a play around here if
44:06 - you wish that this keyword is
44:09 - essentially what is allowing us to
44:10 - interact with whatever element we click
44:14 - okay and we're getting its data id and
44:16 - we're saving it as the card id and then
44:17 - we'll just console logging it out
44:20 - so we're getting the card id but why are
44:22 - we doing this right well we are doing
44:24 - this so that we know exactly which card
44:26 - we clicked and we can then pass it
44:29 - through into our array
44:32 - to get the name
44:33 - okay
44:34 - so that's quite cool and it also means
44:37 - that if someone's inspecting our code
44:39 - they won't be able to you know
44:41 - inspect it and figure out what's under
44:43 - our cards because we're not saying we're
44:44 - just giving them an id
44:46 - so what i'm gonna do is i am going to
44:49 - get my card array
44:54 - and i'm going to
44:56 - pass through the card id that we just
44:58 - picked out in order to return
45:01 - the name
45:03 - okay
45:04 - so if i just call i'll do this step by
45:06 - step i'm going to console log the card
45:08 - id
45:12 - so console log if i click on this one
45:15 - well we know the first one has a data id
45:17 - of zero so let's click it
45:19 - oops
45:20 - click
45:21 - clicked zero and i'm getting returned
45:24 - ice cream image ice images ice cream so
45:27 - we know that the ice cream image
45:30 - lives there now okay and we just want to
45:33 - get its name and store it in an array so
45:36 - for the next time that we click the next
45:37 - one if they match we know it's a match
45:40 - so let's get this object's name so i can
45:43 - do so by
45:44 - clicking dot name
45:47 - uh by the way actually let's console log
45:50 - that out the whole card array after the
45:51 - shuffle
45:52 - just so we know if everything's working
45:55 - correctly
45:56 - so
45:58 - this one is going to have data id 0
46:00 - click
46:01 - clicked on xero
46:03 - and we have got its name so we've gone
46:06 - into the array and got its name
46:08 - because the first item in our randomly
46:11 - shuffled array has the name pizza and
46:13 - has the image this one
46:16 - cool so hopefully that makes sense if it
46:18 - doesn't please do have a play around
46:19 - here
46:20 - so there we go we are getting the card
46:23 - we're getting the name back from our
46:24 - random card array and what i want to do
46:26 - is put it into
46:29 - another array so i'm going to create an
46:31 - array up here
46:35 - and let's just call this
46:38 - uh const cards
46:42 - chosen
46:44 - and make it an empty array i can use
46:46 - const because you know we're not gonna
46:47 - be changing the array we're just gonna
46:50 - be pushing things into it so it can be a
46:52 - const in fact you know some people would
46:55 - argue and say that for best practices it
46:56 - should be a const so i'm going to get
46:58 - the array and i'm going to use the
46:59 - javascript message method of push
47:02 - to push an item into that array and what
47:04 - i want to push through is just the name
47:06 - okay
47:07 - so there we go and if i console log
47:11 - the card's chosen now
47:19 - so let's go ahead and click that one you
47:20 - will see i've pushed in fries into the
47:23 - chosen array because fries must be here
47:25 - it's the first one that we go fries i've
47:27 - just pushed through the name
47:28 - and if i click another one
47:30 - i've added ice cream so obviously these
47:33 - aren't a match and what ideally need to
47:35 - do is you know clear them out and start
47:37 - again
47:38 - so
47:39 - let's deal with that a little bit
47:41 - later however
47:44 - because what i also want to do when i
47:46 - flip the card is actually add the image
47:49 - so once again i'm going to get this card
47:50 - that i clicked or this element and you
47:53 - set attribute
47:56 - set attribute and this time i'm just
47:59 - gonna use source and instead of adding a
48:01 - blank image i'm actually going to get go
48:03 - into the card array again pass through
48:06 - the card id
48:09 - and get that card's image i think i
48:12 - support image image okay and just assign
48:15 - it to the card
48:17 - so let's check it out
48:21 - milk shake and pizza
48:23 - cool and of course they're not a match
48:25 - so
48:26 - one other thing that i want to do is if
48:30 - cards chosen so i'm using the cards
48:32 - chosen array that i just made and if
48:34 - it's length suddenly equals two
48:38 - right because we have two items in there
48:40 - so we want to check for a match
48:43 - i'm going to
48:44 - [Music]
48:46 - check for a match but let's maybe do
48:48 - this after some time has
48:51 - passed or you could do it immediately
48:53 - but i think it's nice to see both the
48:55 - cards first so for this i'm going to use
48:57 - set timeout
48:59 - and i'm just going to pass through a
49:01 - function that i want to check so set
49:04 - timer as a timing event
49:06 - uh or yes a javascript method that will
49:08 - essentially
49:09 - call a function after a certain amount
49:11 - of time has passed so i want the first
49:14 - parameter you need to pass through is
49:15 - the function so we're going to write a
49:17 - function called
49:18 - check
49:21 - match and the second is going to be the
49:24 - time that i won't pass before we call
49:25 - this function i'm going to say it's 500
49:27 - milliseconds
49:28 - so
49:29 - let's write our check match
49:31 - function
49:33 - function
49:34 - check
49:35 - match
49:38 - so for now i'm just going to say
49:40 - console log
49:42 - check for a match
49:45 - and i'm actually going to get rid of all
49:46 - these console logs so we can see
49:48 - everything a little bit clearer
49:51 - so
49:56 - click
49:59 - oops i misspelled something console log
50:03 - check for match
50:04 - click click
50:06 - check the match okay so obviously two
50:08 - items are in our chosen cards array so
50:10 - we're checking for a match
50:13 - and what do we want to do in our check
50:15 - for match function well we want to do a
50:17 - few things
50:20 - uh first off i want to
50:24 - get both of the items in my chosen card
50:28 - array
50:31 - and essentially check
50:33 - i guess if
50:36 - they match
50:38 - so i'm going to go into my card chosen
50:41 - array and get the first item and if it
50:43 - equals the cards chosen
50:47 - second item submit let's make this an if
50:49 - statement if
50:51 - this is true if this statement is true
50:55 - well then we know it's a match so let's
50:57 - alert ourselves saying you found a match
51:01 - of course if you're coding this you
51:03 - don't have to mix an alert you can make
51:04 - a nice neat pop-up but you know as i
51:06 - said we're just doing the mega basics
51:08 - here
51:09 - so there is our alert and what do we
51:12 - want to happen if there's a match
51:14 - well i'm going to have to
51:18 - go into the
51:21 - cards we're going to get the cards so in
51:23 - fact right before we do this i'm going
51:25 - to write something that will get every
51:27 - single card
51:29 - on my grid and i'm going to do this with
51:31 - document
51:33 - query selector but i'm going to choose
51:35 - query selector
51:36 - all to look for all the cards so
51:40 - essentially all the
51:42 - let's say all the uh
51:44 - image elements that live inside my div
51:46 - with the id of grid so i can do this by
51:50 - just selecting all the images because
51:52 - you know that it's a small project so i
51:54 - could just look for the image tag or if
51:57 - you want to add more images later on and
51:59 - be really specific you could say that
52:00 - you want to look into
52:02 - the div with the id of grid sorry the
52:06 - dots for class name the id of grid and
52:09 - find all the images that look inside of
52:11 - it so that's if you want to make this
52:13 - project bigger i'm just going to keep
52:14 - this like this for now because i'm not
52:16 - going to add anything else in there so
52:17 - maybe it's a little bit overkill so i'm
52:19 - searching for every image in my entire
52:22 - document
52:24 - and i'm going to save this as cards
52:27 - okay
52:28 - so if there's a match what i want to do
52:30 - i want to get the cards and i need to go
52:33 - into
52:36 - the cards and find the cards by their
52:39 - ids so just like we're saving the names
52:43 - of our chosen cards here i'm actually
52:46 - going to also make another array
52:50 - const
52:53 - and let's call this
52:59 - cards chosen
53:02 - ids
53:05 - and make this an empty array too so when
53:08 - we
53:09 - push the card in we're pushing in the
53:11 - name but i'm also going to push its id
53:14 - in
53:15 - so
53:17 - push the name cards chosen ids push
53:20 - the
53:21 - this items get
53:25 - or we can just use the card id
53:27 - so i'm going to push in the card id into
53:28 - the chosen ids so
53:31 - i'm going to show you what this looks
53:32 - like actually now before we move on
53:34 - console
53:35 - log
53:37 - cards chosen
53:39 - but also console
53:42 - log
53:44 - cards chairs and ids
53:50 - oops
53:57 - okay so click
53:59 - so what's happening here these are the
54:00 - cards chosen and we're also saving the
54:02 - ids id 0 and 1 have been pushed into an
54:06 - array and now we're going to use that
54:08 - because we're going to go into the cards
54:10 - that we just picked out so all the cards
54:12 - in our document and we're going to pass
54:15 - through
54:16 - the
54:17 - chosen card ids
54:21 - first item
54:25 - and we're going to use set attribute
54:28 - source
54:30 - images
54:32 - white
54:33 - png so i'm just going to talk you
54:35 - through this a little bit so what i'm
54:38 - saying let's just console log this out
54:40 - console
54:41 - log all the cards
54:48 - so one two
54:50 - so here are all my images
54:53 - and what i'm saying is i want to go into
54:56 - i want to find
54:58 - this card exactly and i know this has an
55:01 - id of zero so i'm gonna go into this
55:03 - array and get this
55:05 - card essentially or this image tag and
55:08 - i'm just going to assign it the
55:10 - background color of white if the two are
55:12 - a match
55:13 - so
55:14 - let's just try again a match
55:19 - okay so you found it's a match and then
55:21 - i've turned this background to be white
55:23 - because i've essentially added
55:25 - a
55:27 - image
55:28 - white png to it so let's do the same for
55:31 - the other one as well
55:33 - so what i'm going to do is just grab
55:35 - this line
55:37 - and the second item in this chosen
55:40 - cards that chosen id array we're also
55:43 - going to add a white image
55:46 - too
55:47 - okay so if it's a match we add the white
55:49 - images to those cards
55:52 - what i'm also going to do is on those
55:55 - same cards so let's go into the cards
55:58 - pass through the id the first id
56:02 - in the card chosen id array i'm going to
56:05 - remove event listener remove
56:08 - event listener to stop listening out for
56:12 - clicks
56:16 - on the card
56:17 - okay so that will just stop any weird
56:20 - activities happening because we want to
56:23 - remove the abilities to click on the
56:24 - card
56:26 - so great and also i'm going to make
56:28 - another array because we want to start
56:30 - collecting
56:33 - const cards
56:34 - one
56:35 - okay we want to know exactly how many
56:38 - matches we have so all i'm going to do
56:41 - is cards one
56:43 - and i'm going to push in
56:46 - the
56:49 - content of the card's chosen array which
56:51 - will either be something like hamburger
56:52 - and fries okay
56:54 - or whatever two matches i guess if it's
56:57 - match they'll be hamburger hamburger
56:59 - so there we go we are recording how many
57:02 - cards we have won how many matches we
57:04 - have
57:05 - great and of course we then need to
57:07 - start again so after all this has
57:09 - happened so i'm just gonna do it down
57:12 - here we then need to get our cards
57:15 - chosen array
57:16 - and just make it empty again so we can
57:18 - start this process all over again
57:22 - uh
57:23 - okay so we do actually need this to be a
57:27 - let cut let
57:29 - because if we want to just replace this
57:30 - with an empty array that needs to be let
57:33 - and we're going to change this to let
57:35 - one as well because we again are going
57:37 - to want this to be an empty array
57:41 - so we can start the whole process
57:43 - again
57:45 - wonderful
57:46 - so we have read the logic of what
57:48 - happens if the two cards are a match
57:52 - now
57:54 - we can also do something to alert if we
57:57 - click the same image so if
58:00 - uh cards
58:02 - actually maybe let's
58:04 - save this
58:06 - i'm going to save this up here as const
58:09 - option
58:10 - 1 id
58:12 - just to make things a bit really easier
58:14 - to read for us option
58:17 - 2 id
58:20 - and that's going to be the card second
58:22 - id in our cards chosen ids array
58:25 - so now i can just simply use this
58:28 - variable
58:29 - instead
58:34 - just like so
58:37 - because i am using it quite a lot so
58:39 - this just makes it a little bit
58:41 - neater
58:43 - so now if card option 1
58:46 - so if the id
58:47 - equals card
58:49 - option
58:51 - 2 id well then let's just do an alert
58:54 - you click the same card because
58:57 - that is technically true you have
59:01 - clicked the same image
59:05 - so that's all i want to happen
59:08 - cool
59:12 - and then we can start again as well so
59:14 - if you click on the same image we're
59:16 - going to reset everything
59:18 - great
59:20 - so
59:28 - we've done something for if you know you
59:29 - click on the same card
59:32 - we've done something for if
59:34 - we found a match
59:37 - but now we need to write something for
59:39 - anything else that happens so if it's
59:41 - not a match
59:42 - then what do i want to happen i guess
59:47 - we just want to change them back to
59:49 - being
59:50 - blank right so we just want to flip them
59:51 - back so i'm going to do that by
59:55 - getting the blank
59:57 - image which actually isn't blank we're
59:58 - just turning it back to this one okay so
60:00 - we flipped it over it's become a
60:02 - cheeseburger it's not a match so then we
60:04 - have to flip it back to here however if
60:05 - it was a match we just want the white
60:07 - one
60:08 - okay so that's what i'm doing
60:12 - i'm flipping it back and then we empty
60:15 - both the cards chosen and the cards
60:17 - chosen id array
60:21 - so there we go
60:23 - and then let's also do an alert that
60:25 - says
60:28 - try again
60:32 - great
60:34 - now
60:35 - the last thing that we want to happen in
60:37 - the check for matches function is if we
60:42 - get all of the
60:44 - cards right so if suddenly cards
60:47 - one so a quads one array
60:50 - length
60:52 - equals
60:54 - the card array
60:57 - length
61:00 - length
61:01 - but then divided by two okay because
61:03 - obviously if
61:04 - there's
61:05 - uh 12 cards we can only get six matches
61:09 - so that is what this line
61:12 - says
61:14 - we don't actually need to have this like
61:16 - so
61:19 - and then we can you know you can do an
61:21 - alert
61:22 - or we can
61:25 - also
61:27 - to show it in the result so i'm going to
61:30 - grab this span by the idea of result
61:34 - and
61:35 - maybe let's go ahead and
61:37 - pick it out
61:40 - the same place we do the grid
61:43 - so we're going to use document query
61:45 - selector to pick out the id of result
61:49 - and let's save this as
61:51 - result
61:52 - display
61:54 - just like so
61:56 - so if
62:00 - it's the end
62:02 - i'm going to get the results display i'm
62:04 - going to use inner html
62:06 - to say
62:12 - congratulations
62:19 - you found them all
62:24 - okay
62:25 - uh and otherwise i actually want to just
62:27 - add the score to the results in html so
62:31 - we add the score when we find a match
62:34 - right so i'm just going to get the
62:35 - results in html
62:37 - and what do i want to display well
62:40 - actually we could just show this let's
62:41 - just show as a default after every time
62:44 - that we click check match and i'm just
62:47 - going to show
62:48 - the um
62:50 - i guess the cards
62:52 - one
62:54 - array length right because again
62:57 - if we get if we push something into the
62:59 - cards one array we get it's just like
63:01 - getting one point uh instead of inner
63:04 - html we can also use
63:06 - text content if we wish so maybe let's
63:09 - go ahead and put that here as well
63:13 - and then of course we also need to
63:16 - change these back to being
63:18 - blank
63:20 - great
63:22 - so
63:23 - i think this is it
63:26 - let's check it out
63:30 - so
63:31 - that's a match we found a match we get
63:33 - one to the score these term blank
63:36 - that's not a match try again
63:40 - and as you can see here you can't cheat
63:43 - and inspect right so we're literally
63:45 - just guessing
63:49 - i'm not really paying attention maybe i
63:50 - should be
63:51 - there's a pizza there's a pizza found a
63:54 - match there's two points
63:56 - cheeseburger
63:58 - milkshake milkshake
64:00 - cork cheeseburger cheeseburger
64:03 - cool
64:04 - ice cream hot dog
64:06 - hot dog hot dog and let's see if this
64:09 - works
64:12 - found a match and congratulations we
64:14 - found them all and we can't click on
64:16 - anything else because we've removed the
64:18 - event listener from all their cards
64:21 - amazing so hopefully this made sense
64:24 - i've really enjoyed teaching you guys
64:26 - how to make this game of memory game
64:27 - again it's just the mega mega basics
64:30 - please take this game make your own
64:32 - style up truly make it incredible make
64:35 - pop-ups add more levels i can't wait to
64:37 - see what you have made
64:40 - now we are on to our third game which is
64:42 - going to involve some timing events
64:44 - in this section we are going to build a
64:46 - game of whack-a-mole this game will
64:48 - involve us having to build a grid that
64:50 - randomly displays a mold that we have to
64:52 - click with our mouse in order to get a
64:54 - point we have to get as many points as
64:56 - possible in the time we define
64:58 - by the end of this tutorial you will
64:59 - have used all of the following
65:00 - javascript methods and properties
65:03 - so what are we waiting for let's get to
65:05 - it
65:06 - okay so first things first here is my
65:09 - file setup in which i have some standard
65:13 - html boilerplate making sure that my
65:16 - style sheet has the correct path
65:20 - to my actual style sheet which is here
65:23 - and same for the script tag to pick up
65:26 - my javascript
65:28 - making sure that the path the relative
65:31 - path is
65:32 - the same
65:34 - so the first thing i'm actually going to
65:36 - do for my game of whack-a-mole is uh
65:39 - make a grid so above the script tag make
65:42 - sure it's above the script tag i'm just
65:45 - going to make a div
65:47 - that has the class of grid
65:50 - and in here well i'm just going to put
65:54 - in nine divs as i want my wacomo grid to
65:57 - be three by three
65:59 - and then i'm gonna give each of them a
66:02 - class
66:03 - of square
66:06 - i could technically add these in
66:08 - javascript but you know it's not that
66:10 - many so i'm just gonna
66:13 - put in the nine divs each with their own
66:16 - id
66:18 - so one two
66:22 - three
66:23 - four this is so we can identify each one
66:26 - but i want each one to look the same so
66:28 - i'm going to style all of them as
66:30 - squares and that's why i have chosen to
66:33 - do it this
66:35 - way
66:37 - so there we go that is our grid we of
66:41 - course need to style it so we can see it
66:44 - while we are here i'm also going to add
66:48 - a um h2 tag for the score
66:52 - so i actually want my score to show up
66:54 - here i'm gonna hard code it as zero and
66:57 - just give this idea of score so we can
66:59 - pick it out later with our javascript
67:01 - i also want to have another h2
67:05 - tag that is going to tell us how much
67:08 - time we have left
67:09 - so i want the game to count down from 60
67:12 - seconds
67:13 - and i'm just going to put time
67:17 - left
67:18 - and you know what i'm also going to give
67:19 - them a label so quite simply i'm just
67:21 - going to make it really basic please
67:24 - style this better than the way i'm doing
67:26 - it right now i just want to give you the
67:29 - sort of um skeleton
67:31 - to make your own so your score
67:35 - and then time
67:36 - left
67:38 - okay this is looking good let's style it
67:41 - up so we can see it in our browser
67:44 - so in here i'm just going to pick out
67:46 - the bridge
67:49 - and then the grid well i'm going to use
67:51 - display
67:53 - flex and i'll show you why in a bit
67:57 - um actually let's get rid of it so i can
68:00 - show you so i'm just going to get rid of
68:01 - it for now i'm just going to give this a
68:03 - width so let's say each of our squares
68:05 - is going to have
68:07 - let's make each square 200
68:10 - pixels uh wide and high
68:14 - so which means this would be 600 pixels
68:16 - and this height
68:19 - of 600 pixels
68:22 - so that will look like a square and then
68:24 - let's
68:26 - um we could give it a border or we can
68:28 - give each square a border so let's do
68:30 - that
68:31 - so every square with the class
68:33 - of square every div sorry with the class
68:36 - of square we know we're looking for divs
68:38 - with classes because we put the dot same
68:40 - for grid we're looking for a class a div
68:43 - or an element with the class of grid to
68:46 - style
68:48 - so let's make each square we decided
68:50 - that each square we want to be 200
68:52 - pixels with our 200 pixels so height 200
68:56 - pixels with 200 pixels and then i'm
68:58 - actually gonna give each
69:00 - one
69:03 - let's give each one a border
69:06 - um
69:07 - i'm just going to get bought a color and
69:09 - be really simple of black
69:12 - okay
69:13 - so this might be a problem because i
69:15 - don't know how thick the border is
69:17 - in which case our grid might look a bit
69:20 - strange but let's go ahead and see
69:23 - so i'm going to copy the path and i'm
69:24 - just going to put it
69:28 - into our browser
69:35 - so
69:37 - here is our grid
69:41 - you can see
69:43 - all the squares inside it however
69:45 - they don't seem to have the border color
69:52 - that's because we need to give it
69:54 - a
69:55 - border style
69:58 - of solid
69:59 - you can actually maybe just change this
70:01 - it's too much for me i can do border
70:04 - solid black one pixel
70:07 - so that's another alternative it's just
70:08 - like a shorthand of what i wrote before
70:11 - and i'm also assigning the border width
70:14 - so that we can know
70:15 - how big the border is going to be so now
70:18 - if i refresh
70:20 - we now get the nine divs stacks over
70:23 - each other what we need is for them to
70:26 - snake over each other so that they can
70:28 - fit in
70:29 - and i could do so by adding display flex
70:33 - to my grid
70:35 - so now if i refresh it
70:37 - see all the squares will try fit into my
70:40 - grid
70:42 - so if i go on grid there's the grid and
70:44 - they're all trying to fit in it
70:46 - i want them to stack over each other
70:48 - like a snake
70:50 - so i can do that by adding
70:53 - flex wrap
70:56 - wrap there we go
70:59 - now they don't fit the third one isn't
71:01 - going here and that's because
71:04 - we need to make the grid fit the border
71:06 - two so what would that be one two three
71:08 - four five six
71:10 - so width six
71:12 - 606
71:14 - and height six or six
71:17 - and there we go the squares now fit
71:19 - perfectly into
71:22 - my grid
71:23 - so this is looking good
71:26 - if i want to see grid um sorry square
71:29 - with id3 it's that one four is there
71:32 - five is there six is there seven eight
71:34 - nine it's literally snaking around
71:36 - perfect
71:38 - let's carry on
71:41 - okay now i also want
71:43 - i'm going to go ahead and make the mole
71:45 - for the moment i'm just going to give it
71:47 - a background color of blue but obviously
71:50 - we want to switch this out later so we
71:52 - actually probably want like a more image
71:53 - i'll show you how to do that but for now
71:56 - i'm just going to have the class of mold
71:58 - to be blue so for example if i add the
72:01 - class
72:02 - of
72:04 - mold here
72:06 - and
72:06 - refresh you will see that the third
72:09 - square has a classic mole so that square
72:12 - has turned blue we can even see it when
72:15 - we inspect the elements so that's great
72:17 - let's just pretend that's our more for
72:19 - now until we get an image to put there
72:21 - next up let's do some logic so let's
72:24 - move on to our app.js
72:26 - file
72:29 - okay so actually i'm just going to
72:31 - remove
72:32 - the mode class from here
72:35 - because we're going to add it
72:37 - with
72:39 - our
72:40 - javascript so the first thing i want to
72:42 - do is actually select all the squares so
72:44 - we can work with them in our javascript
72:46 - file
72:47 - so i'm going to do that by using the
72:49 - document query selector so i'm not
72:51 - making this up
72:53 - document query
72:55 - selector
72:57 - all so that's the javascript method that
72:59 - will essentially help us look for any
73:02 - thing with the class name so dot of
73:05 - square
73:07 - so we're going to search for all those
73:08 - and we're going to store it as
73:11 - squares
73:14 - squares
73:16 - okay so we're finding all the squares
73:18 - and we're storing them under squares
73:20 - now even though we don't have it because
73:22 - i removed it i'm actually also going to
73:24 - store the mole so i'm going to go
73:26 - document
73:28 - query selector
73:30 - not all because there's only going to be
73:32 - one mole at any time and i'm going to
73:34 - search for the class of
73:37 - mole
73:38 - so now we have our squares we can work
73:40 - with them and then now we have our mole
73:42 - if it's on the page that we can work
73:44 - with
73:46 - okay we have two more things to pick out
73:48 - so we can do them later and that is the
73:51 - element with the id of time left
73:54 - so once again document i could use query
73:57 - selector or i could use uh get element
74:00 - by id but just so you know in query
74:02 - selector if we're searching for a
74:04 - element with an id we need to use hash
74:07 - and then the name so this is like an id
74:10 - we're searching for an element with an
74:11 - id
74:12 - of time left
74:14 - and let's store this as
74:18 - time left
74:19 - and then finally one more thing and
74:21 - that's the score
74:23 - so this thing right here we need to get
74:26 - this element so that we can manipulate
74:28 - this with our javascript
74:31 - so once again i would get document
74:34 - query selector
74:36 - and then look for the id of school
74:40 - and let's save this as score
74:44 - well maybe yeah let's just save a score
74:46 - that's fine
74:47 - great
74:49 - so
74:49 - let's start off with the result as zero
74:52 - even though we've hard coded it we need
74:54 - to tell our javascript the result that
74:56 - we start with is zero
74:57 - and we'll do the time a little bit later
75:01 - um
75:02 - let's actually focus on getting the uh
75:06 - game to work
75:09 - so i'm going to write a function called
75:14 - random
75:16 - square so we want to get a random square
75:19 - to put our mole
75:22 - now in here for each square so i'm going
75:25 - to grab all the squares
75:27 - and using the javascript method of for
75:30 - each
75:31 - so that is a javascript method
75:34 - i am going to
75:37 - get the class name
75:40 - so i could put i here i could put
75:43 - whatever we want i could put square
75:45 - so
75:46 - we could actually use square maybe that
75:49 - makes more sense so for each square in
75:50 - our squares array
75:52 - i essentially
75:54 - want to
75:55 - get these square
75:58 - and i want to go class
76:01 - list so that is the javascript property
76:03 - and i'm going to remove the mole if he
76:05 - exists on any of the squares so we have
76:08 - a fresh
76:09 - slate to start with
76:11 - so that is what's happening here i'm
76:13 - going getting each square and for each
76:15 - of the squares i'm removing the class of
76:16 - mole so as the first step that we want
76:18 - to do in our function
76:20 - before we start adding omo randomly
76:24 - so i'm going to write let random
76:26 - position
76:28 - and then i'm going to use so once again
76:30 - i'm going to go into my squares
76:32 - array and i am gonna pass through
76:36 - so if i pass through a zero into my
76:38 - squares array it would literally get me
76:40 - that first square if i pass a one well
76:42 - then i'm talking to the second square in
76:45 - my array i need to pass you a random
76:47 - number in here okay i want to pass
76:49 - through a random number from
76:51 - essentially
76:53 - uh
76:54 - zero to eight
76:55 - because i want a random
76:57 - index from zero to eight because there's
76:59 - nine squares and we start counting from
77:00 - zero
77:03 - so i'm going to do this by passing
77:05 - through the javascript method of
77:07 - math
77:08 - random like this
77:10 - and then multiplying it
77:12 - by
77:13 - 9 but i'm also going to use math floor
77:20 - to round whatever that number is down
77:24 - so for example if i console
77:27 - so now if i
77:28 - console log
77:30 - random position
77:35 - and look in here
77:40 - i need to actually call that function
77:42 - so random square
77:48 - random position before initialization
77:51 - okay
77:52 - that's because i console logo up here
77:54 - whoops
77:55 - there we go
77:57 - and refresh
77:59 - i'm going to get literally a random
78:02 - square
78:03 - each time each time with an id
78:07 - from one to
78:08 - nine
78:09 - okay
78:11 - there we go
78:12 - so that is it that's what is happening
78:14 - here if i actually console logged
78:18 - just this
78:24 - you will see that once again i am
78:26 - getting a random number
78:28 - from essentially
78:30 - zero to eight let's check that
78:32 - math
78:34 - rand my trusty mdn
78:41 - okay math random one has a function for
78:43 - a floating point in the range from zero
78:45 - to less than one okay so in this case
78:47 - it's we multiplied by nine so zero to
78:50 - less than nine
78:51 - so that is exactly what numbers are
78:53 - getting back and we're rounding it down
78:56 - so that's what we're doing see no matter
78:58 - how many times i refresh this we'll
79:00 - never get anything above eight because
79:02 - we're rounding down okay so eight's
79:05 - gonna be the highest and that makes
79:06 - sense because zero one two three four
79:09 - five six seven eight do we only go up to
79:11 - the eighth index
79:13 - so hopefully that makes sense
79:15 - uh i have a read of this from mdn if
79:18 - you're not sure and have a play around
79:19 - with it but that's exactly what we are
79:22 - doing here
79:25 - great so i'm just going to get rid of
79:26 - this for now
79:30 - okay
79:31 - now whatever random position we should
79:34 - probably have random square i'm going to
79:36 - have random square because essentially
79:39 - what we're getting back is a random
79:41 - square as we saw for the first console
79:43 - log so for whatever random square we
79:45 - have i'm going to use class list
79:48 - add
79:50 - more class
79:52 - so once again we should now get a blue
79:54 - scare
79:55 - in a random position
79:57 - so that's our mole every time you
80:00 - refresh the page
80:01 - putting itself in a random square
80:06 - let's carry on
80:08 - so i'm happy with that but i actually
80:09 - want to put this on a timer so i want
80:12 - this to be on a timer
80:14 - um so what i'm actually going to do is
80:22 - instead of just having the function like
80:24 - this
80:25 - i'm going to write this in another
80:26 - function so we can attach it to a button
80:29 - if we wish
80:31 - move mole
80:34 - and then i'm going to put let timer id
80:37 - equal null because we need to actually
80:39 - stop this timer interval from moving and
80:42 - i'm going to use the javascript method
80:44 - of set interval
80:46 - to move the mole
80:48 - so i'm just going to put random square
80:50 - to generate a random square and let's
80:52 - say every 500 milliseconds
80:56 - so this is a so now i don't need this
80:57 - here
80:58 - and nothing will happen if i refresh the
81:01 - page
81:02 - however if we
81:04 - invoke the function or call the function
81:07 - which is why i want to do this in a
81:08 - function because you now have the option
81:11 - to attach this to a button if you wish
81:14 - right because if i do this now it will
81:16 - just start on the page load see
81:18 - we're getting i'm not doing anything we
81:20 - are getting a random square light up
81:23 - with a mole every 500 milliseconds
81:27 - so that's some extra work for you if you
81:28 - want it at the moment i'm just calling
81:31 - the function on the page load but you
81:32 - can attach it to a button if you wish
81:36 - so that's working
81:38 - um
81:39 - it is essentially
81:41 - on a timer and we can use this timer
81:43 - which is why i've done it like this i
81:45 - could have just done
81:46 - that
81:48 - but because it's on a timer we can
81:49 - actually use this timer to stop i'm all
81:52 - again in our button if we wish so that's
81:55 - that's optional for you that's why i've
81:57 - put it there
81:59 - um cool so the next thing i want to do
82:02 - is actually
82:04 - listen out for if we hit the mall
82:06 - because we want to get a point each time
82:07 - we hit the mall
82:09 - so i'm going to do this
82:13 - up here
82:15 - and now i'm going to grab the squares
82:17 - and for each square
82:20 - um for each
82:22 - id in the square
82:26 - i am going to get the id and use add of
82:30 - again this could just be square so let's
82:32 - just maybe put this with square makes
82:34 - more sense for each
82:35 - square in our squares array i'm going to
82:38 - add an event listener
82:42 - to listen out
82:44 - if we
82:44 - put mouse down
82:48 - so you show me click
82:50 - on the square
82:51 - and then i'm just going to put a
82:53 - function here
82:59 - so i'm passing through the event and
83:01 - then a function of what's to happen if i
83:03 - click the square
83:04 - and if the square id
83:09 - equals
83:11 - the square that is the random square
83:14 - so let's actually save that um
83:17 - i'm actually going to
83:18 - put so we want to save something i'm
83:21 - going to put hit position
83:23 - and then i'm going to get the random
83:25 - squares
83:27 - id so i'm literally getting the id of
83:29 - the square so i'm getting this thing
83:32 - right here and that's how we can do it
83:34 - so i'm getting the id of the random
83:36 - square and i'm saving it to hit position
83:39 - so perhaps i'm just going to put let hit
83:41 - position leave it as blank
83:44 - if the square id
83:47 - equals whatever the hit position is at
83:50 - that point in time
83:55 - then i want to get the result
83:59 - and add one to the result
84:04 - cool i also want to display it in our
84:06 - score so score
84:08 - let's do text content or in html
84:11 - whatever you want equals the result
84:15 - okay and then i also want to make the
84:19 - hip position
84:21 - oops so clear out hit position equals
84:25 - null again okay
84:27 - cool
84:30 - i can just spell that right hit position
84:33 - so this is looking good so
84:35 - amazing so that's what happens if we hit
84:38 - a mole let's see if that has worked
84:44 - now we've got that working we are adding
84:47 - a score each time we hit it the last
84:49 - thing we need to do is actually get our
84:51 - timer to stop working
84:53 - so let's do that i'm going to do that
84:58 - below here
84:59 - and then slow it down so we can see it a
85:02 - bit because it's way too fast
85:04 - so i'm going to write a new function
85:08 - called countdown
85:17 - and then in here
85:19 - so in my function
85:21 - uh well with each time we invoke this so
85:24 - i'm going to put this
85:25 - um
85:27 - once again because i'm not attaching it
85:29 - to anything i could just put set into a
85:32 - vowel
85:36 - so i'm just gonna put this down
85:38 - here and call this let
85:41 - um
85:43 - count down
85:45 - timer id so we can stop it if we want
85:49 - equal set interval
85:52 - and then i'm going to put this on a set
85:53 - interval so i'm literally going to pass
85:55 - through the countdown function
85:57 - and i want the countdown and function to
85:58 - invoke every 1000 milliseconds so it'll
86:01 - be like one second two seconds
86:03 - three seconds and each time i want
86:06 - something to happen and with that i want
86:08 - to get the current
86:11 - time so let's actually write um
86:15 - let current time
86:17 - equal 60.
86:22 - so i want to get the current time
86:25 - and i just want a minus one from it and
86:27 - then actually want to display that i
86:29 - want to display that in the time left
86:32 - so
86:33 - time left
86:34 - text content
86:36 - current
86:38 - time
86:39 - okay
86:41 - so that's really it
86:43 - uh
86:44 - if however current time
86:49 - equals
86:51 - zero
86:53 - so like we get to the end
86:55 - i want to clear the timer so clear
86:58 - interval
87:01 - count down timer i d
87:05 - okay so i want to clear this
87:08 - and then maybe let's get an alert
87:10 - that says
87:14 - game over
87:18 - your final score
87:20 - is
87:22 - and then the result
87:26 - so that is looking good
87:29 - let's have a go so to make this a little
87:31 - bit faster i'm just going to change this
87:33 - to 10. let's see how we're doing 10
87:34 - seconds
87:36 - so zero you can see the time is working
87:39 - we're clicking we're clicking on the um
87:41 - mole we're getting points
87:43 - and then as soon as we get to zero game
87:46 - over your final score is nine we could
87:48 - do with the space there but that looks
87:50 - good
87:51 - awesome you can see this is still moving
87:54 - around we can actually stop that thanks
87:56 - to
87:58 - this timer id so i'm just going to move
88:01 - this out
88:02 - so it's global
88:05 - and we can use it here so we also want a
88:07 - clear interval timer i do
88:12 - let's try that now
88:15 - once again
88:16 - let's click click click click
88:19 - click click click click
88:21 - go score five go to scroll
88:24 - okay then we have your find some scores
88:26 - five
88:27 - zero and it stops moving
88:30 - so there we
88:31 - have it
88:32 - we have now built our game of wekamo
88:37 - um if you are interested in how to get
88:40 - an image let me show you that very
88:42 - quickly
88:45 - so i'm just going to use uh this
88:47 - whack-a-mole from my github feel free to
88:49 - take him i've already pre-made them to
88:51 - be 200 by 200 pixels so let's just
88:54 - download that i'm going to save image
88:57 - and let's save them as short mold that
88:59 - sounds good and downloads and then i'm
89:02 - simply
89:04 - just
89:08 - gonna very basically
89:12 - dragging off a limb in here
89:14 - so there he is
89:16 - and then in my style sheet instead of
89:18 - having background color blue
89:21 - i'm gonna have background
89:23 - image
89:25 - and then i'm going to put uh url and
89:28 - then the path to my mole so it's the
89:31 - root so i just put ro mole
89:34 - jpeg
89:35 - because it's a jpeg
89:37 - and then i'm gonna put
89:39 - background
89:42 - size
89:45 - cover
89:47 - so let's have a look at that
89:50 - and there we go we have our little
89:54 - mole
89:55 - moving around
89:57 - so
89:59 - oops game over find squares three let's
90:01 - fix that space
90:04 - okay score is put a space there and
90:06 - let's make a move faster so let's get a
90:08 - random square every 500 milliseconds
90:11 - again and let's change the current time
90:14 - to start with 60
90:16 - seconds so once again boom boom this is
90:19 - more realistic you can of course add
90:21 - levels you can make them go as fast as
90:23 - you want like this is really fast
90:26 - you will see the score adding
90:28 - and you'll see the time left
90:30 - so that is it i hope you've enjoyed this
90:33 - tutorial on how to make whack-a-mole
90:36 - without canvas
90:37 - and practice your timer skills
90:41 - thanks very much for watching and i will
90:43 - see you soon
90:45 - in this game we're going to be building
90:47 - 2d breakout another retro game the aim
90:50 - of this game is to break all the blocks
90:52 - that you see in order to complete the
90:55 - game and of course once we are finished
90:57 - doing this giving you the bare minimal
90:59 - logic and code in order to get this game
91:01 - working i would love for you to take
91:03 - this game style up give extra levels and
91:05 - share it with us on twitter i can't wait
91:08 - to see what you built
91:10 - okay so let's get to it
91:12 - the first thing that i want to show you
91:14 - is my setup for the game
91:16 - so as always i've created an index.html
91:20 - file with some boilerplate so i've
91:22 - simply given our project a title i've
91:25 - linked our style sheet so this cell css
91:29 - file to the html file making sure that
91:31 - the path is correct so as this file is
91:35 - in my root or the root of the project
91:37 - that is fine and i've also chosen to put
91:40 - a script tag at the bottom of my body
91:44 - now make sure to make the path uh
91:47 - correct as well so index.js is fine as
91:50 - the index.js file is in the root of my
91:54 - project
91:55 - okay so i've chosen to do it this way
91:57 - you can also choose to use a dom content
92:00 - loader on your javascript page as long
92:03 - as the javascript is after
92:06 - any html elements you should be fine
92:11 - okay so
92:13 - that is it these files don't have
92:15 - anything in them yet the first thing i
92:17 - want to do is actually make my grid
92:19 - so i'm going to do this
92:22 - by simply putting a div here
92:25 - with the class of grid
92:28 - so like that which i'm now going to
92:30 - style up
92:32 - in my style css file
92:34 - so i am picking up the class of grid and
92:38 - i am telling my css file to class by
92:40 - using this dot
92:43 - so let's make our grid i don't know 600
92:45 - pixels and a height of 300 pixels
92:49 - and i'm just going to give a border of
92:51 - solid
92:52 - black
92:54 - one pixel so we can see it
92:57 - so go over here
92:59 - copy the path
93:01 - and then in here
93:04 - just gonna paste the link
93:07 - and there we go
93:08 - there's our grid
93:09 - it's going to inspect the page
93:12 - so we can see our console log up too
93:15 - okay
93:16 - now the next thing i want to do is
93:18 - actually use our javascript to start
93:20 - putting in the blocks so essentially
93:22 - what i want to do so instead of
93:25 - literally hard-coding it in the html
93:28 - like this
93:30 - so let's just make a block for now we've
93:33 - got a class of blocks once again let's
93:35 - pick out the class
93:38 - block
93:39 - and i'm going to give it a width of 100
93:41 - pixels
93:44 - and a height of 20 pixels any background
93:51 - color
93:52 - of a blue
93:54 - so now if we go back here refresh
93:58 - that's our block
93:59 - now it is important that because i want
94:02 - to be making loads and loads of these
94:03 - blocks and i'm also going to want to
94:05 - know the position of each block as well
94:08 - as the
94:09 - i guess positioning of all of these
94:12 - corners
94:14 - i'm going to make my
94:16 - uh i guess identifier or how we're gonna
94:18 - be moving the block this
94:20 - bottom left corner
94:22 - okay so what i mean by this is i
94:24 - essentially i'm just gonna give this a
94:26 - position absolute
94:28 - not relative but absolute so that we can
94:31 - move things around
94:33 - we need this here uh in order to use the
94:36 - left
94:37 - property so not on here i want to use on
94:39 - the block
94:41 - so i'm essentially using my javascript
94:43 - going to be adding left margin and
94:45 - bottom margin to all the blocks to
94:47 - position them so what i mean by this is
94:50 - if i just go left 50 pixels
94:53 - refresh
94:54 - i've moved the block
94:56 - left 50 pixels from this point right
94:59 - here okay
95:01 - well essentially from this but i want to
95:02 - make this this sort of anchor point
95:05 - of our block
95:07 - so i'm going to be using left and bottom
95:09 - to do so once again i'll just put 50
95:11 - pixels so you can see
95:15 - there you go you will see that the
95:17 - bottom margin and the left margin are
95:19 - the same from this anchor point right
95:21 - here that is now from now on our anchor
95:23 - point of each
95:24 - block
95:25 - that's important that's what we are
95:27 - gonna be we're gonna be adding left and
95:29 - bottom but using our javascript
95:33 - so just get rid of that for now
95:35 - so
95:36 - we've done it
95:38 - we have created a blog but we wanna do
95:40 - in javascript and we want to make 15 of
95:43 - these blocks okay we'll make 15 of these
95:45 - so first off let's start by making one
95:47 - right
95:49 - so to do this i would use let's store
95:52 - this as block so const
95:54 - block and i'm just going to use document
95:56 - and create elements so there's a
95:58 - javascript method that i can use to
96:00 - create an element and i want to create a
96:02 - div
96:03 - so we've created a div we've stored it
96:06 - as a block
96:08 - next i want to give my block
96:11 - the class list that i have already made
96:16 - of block
96:18 - so without the dot each time this time
96:21 - i'm going to add the class of block to
96:23 - my newly created div that i have called
96:26 - block
96:27 - and the last thing i want to do is
96:29 - actually grab the grid
96:31 - so oops grid
96:33 - so i want to grab this grid i'm actually
96:36 - going to delete this now don't need it
96:40 - i can grab this grid by essentially
96:43 - getting so once again a document so i'm
96:45 - going to enter the document and i'm
96:47 - going to use query selector
96:50 - to look for the class
96:53 - of grid so i am telling it i'm looking
96:56 - for the class of grid i have to tell
96:58 - query selectors query selector can look
97:00 - for ids and all sorts of things so i'm
97:02 - telling it i want to find the class of
97:04 - grid i want to store this element as
97:07 - let's say grid
97:09 - so now that we have our grid i'm going
97:12 - to use a javascript method called append
97:14 - child so i'm not making up that exists
97:17 - to put in our newly created block
97:20 - with this style of block
97:24 - okay
97:25 - so let's go check it out
97:27 - and there we go
97:28 - we've done that with javascript okay
97:30 - we've deleted the one we hard coded and
97:32 - we've added that with javascript
97:34 - so that is pretty cool
97:36 - but i need 15 of these
97:38 - so i need 15 of these and for each one
97:41 - of these so i'm going to use grid
97:43 - style and as we said i'm going to use
97:45 - left
97:47 - so let's just say for now i'm just going
97:49 - to put
97:58 - as you know 100
98:00 - pixels just to show you that it's
98:01 - working
98:02 - and grid
98:04 - style
98:07 - bottom
98:10 - 50 pixels
98:11 - okay so
98:13 - fresh
98:15 - oops not grid remove the grid i want to
98:17 - move the block
98:19 - swoopsy daisy
98:22 - refresh okay
98:24 - great so you now move the block
98:27 - bottom 50
98:29 - left 100
98:32 - oops
98:34 - cool so i'm just going to put this in a
98:36 - function
98:37 - let's say
98:39 - draw my block
98:42 - function
98:44 - add block
98:50 - i'm just going to put all this in here
98:52 - fun
98:53 - chin add block
98:55 - okay so
98:56 - add block
98:59 - you go
99:02 - save that
99:11 - okay now refresh
99:14 - there we go so now only when we call
99:16 - this function we will create a block but
99:18 - like i said we want 15 of these and i
99:20 - want all of these to be different for
99:22 - each one
99:23 - so to do this i'm going to create
99:26 - a
99:27 - class a block class
99:29 - so create block individual
99:35 - and i'm going to use class for this so
99:37 - class block that's how far we want to
99:39 - deal with a class
99:41 - and then for this i need a constructor
99:43 - so once again as we discuss on x and y
99:46 - axis so x-axis
99:49 - y-axis and this is going to be the
99:51 - bottom left of our block
99:54 - and using this bottom uh left x and y
99:57 - axis i can essentially decipher all four
100:01 - points of my block and where they are on
100:03 - our grid
100:04 - and i'm going to do this using the width
100:07 - of the block
100:08 - so let's save that const with block
100:10 - width
100:13 - and we know this is
100:15 - 100 and the height which is 20. so 100
100:21 - and const
100:23 - block
100:24 - heights
100:26 - which is 20.
100:28 - so now using the x y axis let's get all
100:31 - so this bottom left
100:33 - well we know that the bottom left is
100:34 - just the generic x and y axis so i'm
100:37 - just gonna put x axis
100:38 - y axis so whatever we pass through into
100:41 - our block constructor that's gonna be
100:42 - the bottom left of our block
100:46 - then let's do bottom right lips bottom
100:49 - right
100:50 - oops
100:53 - and i'm going to pass through so to get
100:54 - the bottom right
100:56 - the x axis
100:58 - is
101:00 - we're going to have to add to the x axis
101:03 - the y axis is going to
101:05 - keep the same
101:06 - so yeah bottom right
101:08 - x axis move it over 100 pixels y axis
101:12 - the same okay yeah that's right cool
101:14 - now we need to get the top left
101:19 - and the top left is going to be the
101:22 - x axis and then the y axis we need to
101:26 - add the height
101:28 - lock height
101:30 - and finally this top
101:34 - right and the top right is gonna be the
101:36 - exact
101:37 - like
101:38 - opposite as in
101:40 - um
101:42 - you know the other corner completely so
101:43 - we're just gonna get the x axis
101:48 - and add the block
101:51 - width and the y-axis and add the block
101:55 - height
101:57 - so hopefully that makes
101:58 - sense we essentially want to find out
102:00 - where each point each of the four points
102:03 - of our block is on our grid at any given
102:06 - moment in time and we can decipher all
102:08 - of those from the bottom left x and y
102:10 - axis
102:12 - okay so that's how we're going to be
102:13 - creating all 15 of our blocks by passing
102:16 - through two values
102:19 - great
102:20 - so now let's actually make an array of
102:23 - these blocks so const blocks this is
102:26 - going to be
102:28 - all my blocks
102:32 - constant blocks
102:34 - and then i'm gonna create a new block
102:37 - and i'm gonna pass through
102:40 - well i guess on the first one i just
102:43 - want to make one here so again we need
102:46 - to add a left so let's just add a left
102:48 - margin of 10 and because this is 300
102:51 - pixels
102:53 - i don't know let's just put in 270 and
102:55 - see what that looks like so 10 to 70.
102:59 - so let's just try with this one first
103:02 - uh draw
103:03 - all my blocks
103:05 - instead of add block i want this to draw
103:08 - all of my blocks so well we need to make
103:11 - function add blocks plural let's change
103:14 - that
103:15 - and we need a for loop
103:18 - so for let i
103:20 - equal
103:22 - zero
103:23 - as long as i is smaller than the blocks
103:26 - array length at the moment it's just one
103:28 - in there but
103:30 - for the future we implement i increment
103:32 - divided by one
103:35 - okay
103:36 - now as long as we want to loop over our
103:38 - blocks around keep creating these blocks
103:42 - so we want to essentially get all of
103:43 - this code and put it back in here
103:47 - okay so create a block
103:50 - add the class of block then we want to
103:53 - get the block
103:55 - that's left and instead of just hard
103:57 - coding something
103:58 - well we want to go into the block
104:02 - so
104:03 - we go into the blocks array
104:08 - and then
104:09 - get the our first item so just i is fine
104:12 - because we're going to be looping we're
104:14 - going to get that first items
104:18 - i'm going to style it so we want to get
104:19 - this
104:21 - x axis from the bottom left okay because
104:23 - we're going to be working with this
104:25 - so we want to get the x axis and assign
104:27 - it to the left
104:29 - so
104:31 - bottom
104:34 - left
104:35 - and the first items we do like that
104:38 - so hopefully that makes sense um
104:42 - let's just look at this again
104:44 - so we know that we need to give our
104:46 - block styling from the left
104:48 - so we want that to be essentially this
104:53 - so that's the styling we want to get
104:54 - from the left
104:56 - so and i just use this as the sort of
104:59 - anchor point
105:00 - so i just want this value right here
105:03 - okay
105:04 - so i can do that by going into the
105:05 - bottom left and grabbing the x-axis that
105:08 - will give me 10
105:10 - because that's how this works by
105:11 - creating a new block i'm passing through
105:13 - a 10 to be the x-axis i'm passing
105:15 - through 270 to be the y-axis and then
105:18 - i'm getting all the other values so
105:21 - maybe it's worth me console logging
105:24 - this
105:26 - console log
105:28 - blocks and let's just get the first item
105:31 - so this
105:35 - refresh
105:37 - cannot okay let's just i'm just going to
105:39 - comment this out now because it's
105:42 - throwing errors for us
105:47 - okay
105:48 - so that is my newly created block i pass
105:51 - through a 10 i pass through 270 and from
105:54 - it we get all four points that will
105:57 - create our block
105:58 - so the x and y axis
106:01 - of all of them
106:03 - okay i hope that makes sense we have
106:06 - generated all of these just from passing
106:08 - through two parameters
106:10 - so now we know where each block is and
106:13 - all four of its points and we're going
106:14 - to use that for collisions
106:20 - so we've created one block but we want
106:22 - to create
106:24 - loads of blocks so first off let's go
106:25 - back to this function we want to add
106:28 - the styling of 10 pixels so we need the
106:31 - px
106:32 - to the left and we want to add
106:34 - so once again let's use
106:36 - our anchor
106:39 - so i'm going to go into the block
106:41 - first block so i'm going to go sorry i'm
106:43 - going into the blocks array i'm grabbing
106:45 - our first block
106:47 - and then i'm using the anchor so i'm
106:49 - going to use the bottom left corner to
106:51 - get the second value so the y-axis which
106:53 - we know is 270.
106:55 - and then i'm going to
106:57 - just assign to pixels and then we're
106:59 - going to put that in our grid
107:02 - so let's refresh
107:04 - cannot read property 0 of undefined
107:17 - and there we go
107:18 - we've drawn our first
107:20 - block
107:21 - now let's get to drawing the others so
107:23 - we just have to now create blocks this
107:25 - is so what's so good about creating
107:26 - classes
107:28 - 2 3 4 5 6 7
107:30 - 8 9 10 11 12 13 14 15.
107:35 - okay so we've got our first
107:38 - block
107:39 - i need to put commas that's fine i'm
107:42 - just gonna
107:43 - d d d d d d i'm just pressing command d
107:46 - to do this
107:47 - and i'm just gonna go like that
107:50 - there we go
107:51 - so now our second block well let's put
107:53 - that in position let's add
107:56 - 110 pixels
107:59 - to the
108:01 - left so the x-axis to move along left
108:05 - for this one let's add another 110 to
108:07 - that so 230
108:09 - another so 340
108:13 - and then another so 350
108:17 - um i think fine should be
108:19 - five should be okay let's see what that
108:21 - looks like
108:24 - and obviously we're looping over so as
108:25 - many as we add we will create
108:28 - and that looks great let's maybe chop
108:30 - off the grid a bit
108:33 - hold on
108:34 - it's too big so let's make it 5
108:39 - 70
108:42 - okay maybe 560.
108:48 - okay
108:50 - done it
108:51 - okay so we've got one row i want three
108:53 - rows
108:55 - so i'm just essentially gonna
108:59 - maybe i should just use one two three
109:00 - four one two three four five let's
109:03 - delete these
109:04 - i'm gonna use these and instead now i'm
109:07 - gonna move the y axis
109:11 - so instead of two
109:13 - i'm gonna have two forty so i want it
109:14 - closer to the bottom
109:16 - two from two to fourteen
109:19 - and then the fine let's see how it looks
109:21 - actually first
109:23 - that looks good
109:25 - and then once again here i'm happy with
109:28 - those so i'm just going to copy i'm
109:30 - happy with the x axis for each but these
109:33 - i want to move closer by 30 each so once
109:36 - again come on d come on d come on d
109:40 - 10. oops not that one though
109:45 - and amazing we have created all of our
109:48 - blocks
109:49 - pretty cool
109:51 - so now we've done that
109:53 - i'm pretty happy with this we've drawn
109:56 - our blocks
109:57 - let's get to creating a user
110:01 - so just like we did before
110:06 - and user
110:07 - i'm going to let's store it as user
110:11 - i'm going to get my document
110:15 - i'm going to create
110:17 - element i want to create a div
110:20 - now use that i want to style classlist
110:22 - ad and i need to make a
110:26 - essentially i just want to make it the
110:27 - same as a blog
110:28 - i'm just going to call it user and maybe
110:31 - make it purple
110:32 - so we can see
110:35 - the difference so this time i'm going to
110:37 - add the class of user and once again i'm
110:39 - going to get the grid i'm going to use
110:41 - append
110:42 - child to put in
110:47 - so i use what appeared there but we sort
110:50 - of want to move it here right so we want
110:52 - to move it in this row and down here
110:55 - so
110:56 - [Music]
110:58 - what like just like we did here um i can
111:01 - do that
111:03 - i would get the user use style
111:07 - left
111:09 - and then
111:10 - well let's give it a position
111:15 - can't start
111:17 - position
111:20 - well actually let's call it user starts
111:21 - we don't know what other starts we want
111:24 - and then let's make it start we want to
111:25 - make it start in the same x axis as the
111:28 - middle one so 230 and let's just say 10
111:32 - pixels from the bottom so we've got our
111:34 - user start that's where our user is
111:36 - always going to start
111:38 - but then we also need a current
111:41 - position
111:42 - okay let's just do it yeah so we have a
111:45 - user start from where you always start
111:46 - no matter what no matter how many times
111:48 - you're refreshed but then because we
111:50 - want to move our user left and right
111:51 - we're going to have to track that so i'm
111:54 - going to have a let
111:57 - current position as this will change so
111:59 - it needs to be a let
112:00 - and to start off i'm just going to
112:02 - assign that to the user's dot
112:04 - so i hope that makes sense
112:06 - um it will in a bit we've got a sign
112:09 - position then i'm assigning that
112:10 - starting position to the current
112:12 - position of our user because that will
112:14 - always change
112:15 - but we want it to be that to start so
112:17 - we've got our current position and the x
112:19 - and y axis
112:21 - now just like we did here i'm going to
112:23 - get the current position
112:26 - and i'm going to get the
112:28 - x axis from it so the first value
112:31 - and just use pixels
112:33 - and let's do that for the style bottom
112:35 - two of the user so go into the current
112:38 - position get the second value
112:41 - and add pixels
112:43 - cool
112:45 - so now if we refresh
112:47 - that's where our block where our user
112:49 - block will show up
112:52 - okay so we've done that
112:54 - now let's go to moving
112:57 - our user left and right
112:59 - so i'm going to do this
113:02 - so we've added our user
113:04 - move user
113:07 - okay to move our user we're going to
113:09 - have to use keys
113:11 - so i'm actually going to write a
113:12 - function called move user and pass
113:15 - through an event
113:17 - and then i'm going to use the switch
113:19 - case to listen out for keys
113:23 - okay and i'm going to use a switch case
113:25 - for this because we're simply going to
113:26 - be listening out for our left or our
113:29 - right and we can use a switch case for
113:31 - this
113:32 - um
113:35 - so this is how you write a switch
113:37 - case you would pass in through something
113:39 - here and if it equals the case then you
113:41 - execute the code and then you break out
113:43 - of it
113:44 - so if you haven't looked to switch cases
113:46 - please do but this is what we're going
113:48 - to be using
113:49 - so i don't know how many you know about
113:52 - keys on your keyboard but essentially
113:56 - oops
113:58 - if what i'm writing here so case arrow
114:01 - left
114:03 - if
114:04 - so i'm passing through the event and the
114:06 - event if i par if i literally click a
114:09 - key on my keyboard and the value
114:12 - assigned to that key has the value of
114:14 - arrow left
114:18 - then
114:19 - i essentially
114:21 - want to move
114:25 - my current position right so if i press
114:27 - arrow left i want to
114:29 - take away from the x-axis of our current
114:34 - position
114:36 - so i would do so by grabbing the current
114:39 - position
114:40 - and this the x-axis so the first
114:43 - uh
114:44 - item from that array i'm just going to
114:46 - minus 10 to the value okay so i'm gonna
114:49 - do that and then once again
114:52 - i'm going to
114:55 - reassign
114:58 - value
115:00 - okay
115:02 - so actually i'm going to be using this a
115:05 - lot so i'm going to put this in its own
115:06 - function i'm going to call it draw
115:10 - user
115:14 - function i'm just going to do this to
115:16 - avoid repetition draw user
115:19 - i'm literally just going to take this
115:20 - code out
115:23 - and replace this with the function draw
115:25 - user
115:26 - to make our code cleaner
115:29 - so now instead of drawing the user again
115:32 - here by literally writing out that code
115:34 - again i'm just going to put full user so
115:36 - we're going to move the x axis position
115:38 - and we're going to redraw the user so
115:40 - that is what we're going to do
115:43 - and then we're going to break
115:45 - so let's check that out first off we
115:46 - need to attach this so let's grab the
115:49 - document again and use a javascript
115:51 - method called add event listener to
115:53 - listen out so i'm not making this up key
115:55 - down is an event that we can listen out
115:57 - for so we're listening out to any time i
116:00 - press any key on my keyboard
116:03 - that's what key da p down does you can
116:05 - have key up as well i think key down
116:08 - makes more sense than just singing out
116:09 - for when you take your finger off a key
116:13 - and then i'm going to put move user so
116:15 - the function
116:16 - so anytime i press a key down on the
116:19 - keyboard we're going to listen now we're
116:20 - going to invoke this function
116:23 - and then see if the key is our left and
116:26 - if it is we're going to move the x-axis
116:29 - of our current position 10.
116:33 - so let's do this and pressing left there
116:36 - it goes left it's moving 10 pixels
116:38 - awesome
116:40 - but it also goes off so that's a problem
116:44 - let's fix that
116:45 - we're going to fix this with an if
116:50 - statement
116:52 - so case our
116:54 - left
116:56 - i'm just gonna write if
116:59 - as long as the current position so the
117:02 - x-axis of our user
117:05 - is larger than zero so as long as it's
117:08 - larger than zero
117:10 - then we execute this code okay so that's
117:14 - all i'm writing as long as our user
117:18 - so this point right here
117:20 - is larger than zero because this is 0
117:24 - then we can move left otherwise we stop
117:27 - we don't execute the function anymore so
117:29 - it appears like we are stopping
117:32 - so that's what i have done with that
117:35 - let's now do the same so there we go
117:41 - for
117:42 - the case
117:44 - of if we press arrow right
117:47 - so it's essentially the opposite if
117:50 - current position
117:52 - x-axis
117:54 - is smaller than the board
117:57 - width
117:59 - we declared what the board width is
118:02 - yeah
118:04 - const
118:07 - board
118:09 - width equals
118:12 - 560
118:16 - 60.
118:17 - so as long as we're smaller than that
118:22 - we want to get the current position
118:25 - and let's just add
118:28 - oops add 10 this time
118:30 - and then we have to redraw the user
118:32 - right because it's got a new position we
118:34 - need to re-control the user
118:38 - let me break out of this
118:40 - so let's see
118:44 - [Music]
118:46 - it's not stopping ah
118:48 - but it stops there
118:50 - this is because this is our anchor point
118:52 - remember so we're gonna have to minus
118:54 - the width
118:56 - of the block
118:57 - so minus
118:58 - block
119:00 - width
119:02 - so now once again
119:05 - stop nice
119:07 - stop two
119:09 - this is looking girl
119:11 - and i like it
119:13 - let's carry
119:16 - so we are moving our user that is good
119:20 - i think the next thing we want to do is
119:23 - create a ball
119:25 - so add
119:29 - once again let's create a ball let's use
119:33 - document
119:36 - create element to create a
119:39 - div
119:41 - now let's get the ball and use class
119:43 - list add and then a class of ball which
119:45 - we have not yet written
119:47 - let's do it now ball
119:50 - uh let's make it width 20 pixels height
119:55 - 20 pixels
120:03 - border radius to make it look like a
120:06 - circle 10 pixels
120:08 - background
120:09 - color
120:12 - red
120:13 - we also need to give it a position
120:15 - absolute as with everything if you want
120:16 - to start assigning it left and bottom
120:20 - uh values
120:22 - so we've created the ball we've styled
120:24 - the ball now we need to grab our grid
120:27 - and use the pen child
120:29 - child
120:30 - to put the
120:31 - ball in it
120:33 - so put it this is the parent we are
120:35 - putting the ball inside the parent
120:37 - that's why it says append child
120:41 - and that's apple
120:44 - just as with the uh user let's give it a
120:48 - start position
120:53 - so
120:54 - const ball start this time
120:58 - we'll start equals and then
121:02 - uh
121:02 - [Music]
121:05 - i guess
121:06 - let's just make it a little bit higher
121:08 - let's see how that looks
121:10 - we'll start
121:12 - and then let
121:13 - ball
121:16 - current
121:18 - position equal
121:20 - full starch
121:23 - save that
121:25 - and then i'm just gonna grab the ball
121:27 - and use style left
121:29 - to use the
121:34 - current ball current position ball
121:38 - current position
121:40 - first value plus the string of pixel
121:45 - and ball style
121:48 - right
121:50 - now we want to get the second
121:52 - value so let's see what that looks like
121:55 - that means
121:57 - i don't want it there
122:02 - right
122:05 - oops that's going to be bottom
122:10 - because we're assigned from the left and
122:12 - the bottom
122:13 - okay
122:14 - just going to move it over a little bit
122:16 - so it looks more central so i'm just
122:18 - going to change this to i don't know
122:23 - okay
122:24 - so that looks good
122:27 - okay
122:30 - so we've added our ball
122:35 - just like with the draw
122:39 - user i'm going to do the same for
122:42 - the ball so draw the ball
122:50 - [Music]
122:52 - grab the ball
122:53 - actually i'm just gonna once again
122:55 - i mean it's just
122:57 - neater for me to reuse this function as
123:00 - we're going to be using a bit
123:02 - so that's our function now i've just
123:06 - essentially taken it and there we go so
123:08 - i've drawn the ball
123:11 - next up i want to work on moving the
123:13 - ball so
123:15 - move the ball move
123:17 - move
123:18 - move
123:20 - for this i'm going to write a function
123:21 - i'm going to call it function if i can
123:23 - just spell it right function move
123:27 - oh
123:32 - okay
123:33 - so we essentially want our ball to
123:37 - uh
123:38 - move by adding an x and y axis
123:41 - so let's just say we want to make it
123:43 - move uh
123:45 - like
123:46 - like left and right so it looks as if
123:49 - it's going to the top
123:50 - uh right
123:52 - corner of our grid i would do so by
123:55 - getting the ball
123:56 - current position
123:58 - x axis
124:00 - and adding
124:02 - two
124:04 - and i will do the same
124:07 - for the y axis
124:10 - so that will essentially move our ball
124:13 - and then of course i would have to
124:14 - redraw it
124:15 - draw
124:16 - four
124:18 - okay
124:19 - so now let's actually put this on a
124:22 - interval
124:23 - so to do this i'll put set interval and
124:26 - i'm going to pass through the movable
124:28 - function and let's say you invoke it
124:31 - every 30 milliseconds
124:33 - so now
124:36 - there it goes
124:38 - awesome
124:39 - but it's going off the grid it's going
124:41 - through the blocks we need to next
124:43 - tackle all of this stuff so let's tackle
124:46 - it not going through the grid so when it
124:49 - hits the walls of the grid i want it to
124:51 - change direction so let's do that first
124:55 - so first off i'm actually going to put
124:56 - this on a timer id which i'm going to
124:59 - declare at the top
125:02 - i'm just going to leave it blank
125:05 - and we're going to have to clear this
125:07 - timer id
125:08 - when we want the ball to stop so i want
125:10 - to stop this interval by running by
125:13 - getting that timer id and passing it
125:15 - through clear interval
125:17 - so we've put that on a timer the next
125:20 - thing i want to do is only make
125:24 - the when i want to change the direction
125:26 - of a ball if it uh hits a wall
125:30 - so let's write a function called
125:32 - i'm going to check for collisions
125:34 - now let's actually write the function so
125:36 - function check for
125:39 - collisions
125:47 - okay
125:48 - so first off
125:50 - let's
125:54 - check for
125:57 - wall collisions
125:59 - as i said
126:00 - collision
126:01 - [Music]
126:05 - and i could do this by basically saying
126:08 - that if
126:09 - full current position
126:12 - x-axis
126:15 - is smaller than sorry is larger than or
126:17 - equal to the board
126:20 - width
126:22 - once again minus
126:26 - we need to account for the ball width
126:28 - itself so let's just put ball diameter
126:31 - as the ball width and ball height are
126:33 - going to be the same
126:35 - so ball diameter
126:38 - constant ball diameter
126:40 - equals 20 because we know that because
126:42 - that's the width and height we gave it
126:49 - so if the current position is larger
126:52 - than or equal to the board width minus
126:54 - the
126:54 - ball diameter so if it's larger then we
126:58 - know it's off the grid and we need to
127:01 - change direction
127:03 - so
127:04 - change direction we need to write a
127:07 - function for this
127:13 - change direction
127:16 - i'm just going to write that function
127:17 - now
127:19 - function
127:22 - change
127:23 - oops
127:25 - change
127:26 - direction
127:31 - okay
127:32 - so currently we know that uh our ball is
127:35 - moving plus two
127:37 - uh
127:38 - and plus two x and y
127:40 - so we need to sort of change this
127:42 - so i'm going to go back here and instead
127:44 - of just adding a 2 and adding a 2 here
127:48 - this is going to be the x direction and
127:50 - this is going to be the y direction and
127:53 - let's store this as variables
127:57 - let x direction
128:00 - equal to
128:02 - let y
128:03 - direction
128:06 - equal to
128:07 - and we're going to change these values
128:11 - so
128:16 - if
128:17 - x direction
128:20 - on collision deeply equals two
128:25 - and the y direction on collision both of
128:28 - these
128:29 - currently are two and two and they're
128:32 - moving two and two so that essentially
128:33 - the ball is moving to the top right
128:36 - corner of our grid we want to change the
128:39 - direction and we want to change it so
128:41 - imagine it's going like this we want to
128:43 - change it to move like that right
128:44 - because that makes sense in physics
128:47 - so
128:48 - i would simply just get the y direction
128:52 - and change it to minus two
128:55 - and then return out of this
128:58 - okay
129:00 - so we've done it as if it was moving
129:03 - to the wall let's actually write an if
129:04 - statement for this at the top so we can
129:06 - see if this works
129:10 - we're also not invoking the check
129:12 - collisions function in which the change
129:14 - direction
129:15 - function is in
129:16 - so where should we move where should we
129:18 - put this
129:20 - i think we want to put it in the
129:21 - interval
129:22 - so after we draw the ball every time we
129:24 - draw a ball so every 30 milliseconds we
129:27 - want to check for a collision
129:29 - so still we won't be able to test that
129:31 - let's write a rule for
129:34 - um
129:36 - well actually we might
129:38 - okay so let's test this out
129:42 - and
129:43 - there we go
129:44 - and
129:46 - okay so it's changing direction
129:49 - um
129:50 - it's hard to see because it's actually
129:52 - going through the top wall but it's
129:53 - hitting as soon as it hits this axis
129:56 - right here is changing direction i'm
129:58 - actually going to maybe move
130:00 - the grid so we can see a little bit
130:03 - better let's just give it a margin top
130:05 - of i don't know 80 pixels
130:09 - refresh
130:10 - and then once the red ball hits this
130:12 - wall right here
130:14 - it will change
130:16 - direction
130:17 - i don't really think that's the
130:19 - direction it should be changing i think
130:20 - we should change
130:24 - okay so if it hits that wall i
130:27 - essentially
130:29 - want
130:31 - to change
130:34 - just make this an equal
130:37 - it's going that way so plus 2 plus 2
130:41 - and then i want to change the x
130:48 - let's see how that looks
130:52 - it's going there
130:54 - and then i want it to go
130:56 - okay i think that looks
130:58 - better let's actually get to working on
131:01 - this stopping at the top pool now
131:04 - so
131:06 - if the ball current position is larger
131:08 - than the ball width minus the ball
131:10 - diameter change direction
131:13 - or
131:15 - if the ball
131:17 - current position
131:20 - y-axis so let's go for the second value
131:24 - maybe let's i'm just going to split this
131:26 - out so it's easier for us to read
131:33 - is
131:34 - larger suddenly or equal than the board
131:37 - height this time
131:40 - minus the ball
131:42 - diameter
131:43 - change direction
131:47 - oops undefined board height it's not
131:50 - defined did i not define that
131:53 - i guess not
131:57 - const
132:00 - board height
132:02 - equals 300 we know that from our style
132:05 - sheet
132:07 - okay
132:11 - so now
132:14 - but it's also changing
132:16 - okay let's just account for everything
132:18 - because
132:21 - at the moment everything is essentially
132:23 - going to go one way so if
132:25 - so if we hit that wall we want to change
132:27 - the x direction
132:32 - so now if
132:37 - x direction
132:40 - equals
132:42 - minus 2 because
132:44 - that's what it is
132:47 - and y direction
132:50 - equals
132:53 - 2 because that's what's happening at the
132:55 - moment
132:58 - i want x direction
133:01 - to change back to
133:05 - two
133:06 - and return up this
133:09 - since again that actually needs to go in
133:14 - here so now let's see what happens when
133:17 - we hit the top wall
133:20 - ah
133:21 - okay
133:25 - if x direction equals two actually let's
133:28 - keep this as y and we return out of this
133:31 - if x direction
133:36 - is 2 and y direction is
133:39 - minus 2
133:40 - x direction
133:42 - let's change to minus two
133:46 - if
133:47 - x direction
133:50 - so i'm just thinking about how
133:53 - it now equals
133:59 - minus 2
134:01 - and
134:02 - y direction
134:06 - equals
134:08 - both equal minus 2
134:10 - then let's just put y direction
134:14 - equals 2
134:17 - and return out of this
134:19 - and then we've just account for one more
134:21 - if x direction
134:24 - equals
134:26 - minus 2
134:28 - and
134:29 - y direction equals
134:32 - 2.
134:35 - let's just make it more exact just in
134:38 - case
134:39 - deeply equals for all of them
134:45 - x direction
134:48 - equals two and return out of it so i
134:51 - think we've now accounted for all of
134:53 - them let's see how that looks all the
134:54 - combinations
134:56 - so hit the top wall
134:58 - bam bam
135:00 - awesome
135:01 - we'll see that won't happen and it goes
135:03 - to the bottom so let's actually write
135:05 - rules for the other two now
135:08 - so we also know that if
135:13 - the ball current position
135:22 - x-axis is going to be smaller than or
135:25 - equal to zero so if a gulf goes off the
135:28 - left-hand side of the board then we want
135:30 - to change the direction
135:32 - before that happens
135:34 - and then
135:38 - check for
135:41 - game
135:42 - over
135:47 - so if
135:49 - ball
135:51 - ball current position
135:54 - y axis this time
135:56 - is smaller than or equal to zero so if
135:58 - it goes off the bottom of the board
136:00 - we want a clear interval
136:02 - timer id so we want to stop it
136:05 - and let's also get like a console log
136:08 - out
136:09 - well actually let's just put it in the
136:10 - display so
136:14 - let's get you div
136:16 - let's give it the id of score
136:24 - i'm just gonna hard code zero for now
136:27 - let's pick it out
136:29 - um
136:30 - so const
136:34 - score display equals
136:37 - document query select
136:41 - query selector and then let's look
136:44 - for the score but the idea of score
136:50 - okay
136:51 - so let's actually
136:53 - show
136:56 - so let's get the score display and in
136:59 - that html i'm just gonna put yeah
137:04 - okay
137:08 - um
137:09 - i'm also gonna get rid of the
137:11 - event listeners so we can't move
137:14 - the user anymore remove event listener
137:18 - key
137:19 - down
137:21 - move user so we can't move the user
137:26 - so now
137:27 - it's going to hit the top wall it's
137:29 - going to change direction change
137:30 - directions again and when it hits the
137:33 - bottom boom
137:34 - you lose and it stops and we can't move
137:38 - our little user so the purple user
137:41 - anymore
137:43 - cool
137:44 - let's change the direction to check if
137:46 - it's going through the left side so i'm
137:48 - just going to do this by
137:51 - putting i think
137:55 - minus
137:57 - two and okay that one
138:00 - so go da da da da
138:03 - hit the top wall change direction and
138:05 - boom
138:06 - everything looks like it's working this
138:09 - is looking great
138:10 - now time for the tough part i'm going to
138:14 - check for collisions for any
138:16 - of the blocks
138:20 - so let's do it
138:23 - okay so in our check for collisions
138:29 - function
138:39 - i i'm gonna let's just do it up here
138:46 - check for block collisions
138:53 - and i'm gonna have to use a for loop for
138:54 - this so for let i equals zero as long as
138:58 - i
138:58 - is smaller than the block's length
139:03 - we increment i like so
139:07 - okay
139:08 - now
139:10 - i'm gonna have to essentially check if
139:12 - the ball
139:14 - is in between the blocks
139:17 - uh
139:18 - bottom left
139:20 - x axis and bottom right x axis so the
139:24 - bottom width and also
139:27 - in the height okay so if
139:31 - any if it's in there if it's in there we
139:33 - know it's a collision right so we need
139:35 - to write this and we need to loop it
139:36 - over for every block
139:38 - so i would do so if
139:41 - you need to do it with an if statement
139:43 - so if
139:44 - it's going to be a long one so we're
139:45 - going to go into our actually let's use
139:47 - the
139:49 - okay i'm just going to use the ball
139:51 - current position
139:53 - let's check the x axis first so if
139:56 - the ball's x axis is larger than
139:59 - the block so i'm going to go into the
140:01 - first block and check the bottom left
140:05 - because that's our anchor
140:07 - x axis so if it's larger than the bottom
140:09 - left x axis but smaller than the bottom
140:12 - right x axis we know it's in the middle
140:14 - of the block
140:16 - so if it's larger than that
140:18 - and
140:19 - ball
140:21 - current position
140:24 - x axis so the first value
140:27 - is smaller than i'm just going to get
140:28 - rid of this so we can see the javascript
140:31 - was smaller than
140:33 - so into the blocks
140:34 - the first block
140:37 - use bottom right
140:41 - x-axis
140:43 - okay so all if all of that is true that
140:46 - statement is true and
140:49 - now let's do the y-axis the ball current
140:56 - position
141:03 - y-axis
141:05 - and let's account for the ball diameter
141:17 - so maybe let's put that in brace
141:20 - parentheses two
141:22 - so
141:23 - if now the y position is smaller than
141:26 - the blocks we're going into the blocks
141:27 - again
141:28 - and we're going to use
141:31 - i
141:32 - and then we're going to get the bottom
141:34 - left
141:36 - y-axis
141:38 - and
141:40 - the ball
141:41 - current position
141:44 - y-axis
141:46 - is smaller than
141:48 - whatever block we're looking at top
141:51 - left
141:53 - y-axis so if all of this is true
141:56 - all of these statements are true
141:58 - then we know
142:00 - that we
142:03 - are in
142:05 - our ball is in a block it's in the area
142:07 - of a block
142:08 - okay
142:09 - so if all of that is true
142:12 - well what do we want to happen
142:15 - well i guess i want to remove the block
142:18 - um to do this i need to remove the class
142:21 - of the block we've just hit so we need
142:23 - to grab all the blocks from our document
142:26 - grab or blocks i'm going to go into the
142:29 - document and use query selector all to
142:32 - grab anything with the class of block
142:36 - and let's make this an array by using
142:38 - the javascript method of array from
142:41 - so i'm going to put that
142:43 - like so
142:44 - so
142:45 - now
142:46 - so i'm just going to console.log this
142:50 - see
142:52 - what all blocks look like
142:56 - okay so very fresh
142:58 - and we collide with any block
143:01 - one of undefined great what have we done
143:04 - wrong
143:10 - our top left needs to be capital l
143:15 - okay
143:16 - so now when we collide with the block
143:18 - bam
143:20 - we get all the divs with a class a block
143:22 - and an array you can see it's an array
143:25 - because of the um
143:26 - square brackets so that's what the all
143:28 - blocks looks like that we've just
143:31 - console logged so we're going to get all
143:33 - the blocks
143:34 - and now
143:37 - all blocks we're going to go into that
143:38 - array of blocks wherever i is because
143:40 - we're looping so whatever block we're
143:42 - dealing with
143:43 - and we're going to use class list to
143:46 - remove
143:48 - the class of block
143:50 - so visually we won't see the block
143:52 - anymore it will still be there though so
143:55 - we need to do get rid of that two
143:57 - so we need to get rid of it essentially
143:59 - from this array as well
144:02 - we need to get rid of whatever block we
144:03 - are dealing with remove it from this
144:06 - array
144:09 - so removing the class is completely
144:10 - different removing it from the other
144:12 - array that we have it in so i've used
144:14 - splice to essentially get rid of
144:17 - whatever the index is so i
144:20 - and we do it like so so just remove the
144:22 - one item so whatever say say we hit the
144:25 - block with index two we then need to
144:27 - remove it from our blocks array by using
144:29 - splice and passing through e2
144:31 - into here
144:33 - so we remove it
144:34 - so once we removed it we also need to
144:36 - change direction
144:40 - cool okay
144:44 - so let's see if that's worked
144:49 - boom boom and it's changing nice
144:53 - and then you lose okay so this is
144:55 - looking
144:56 - good i think maybe let's also add a
144:58 - score so score
145:00 - plus plus
145:02 - and then score
145:04 - display
145:06 - inner html whatever the score is
145:10 - and let's set score at the top so let
145:13 - score
145:14 - start with zero
145:16 - just so we can keep track of how many
145:19 - we are hitting
145:21 - okay so the next thing we've to do in
145:23 - collision so we've accounted for
145:26 - collisions
145:29 - in here
145:32 - um
145:35 - we also need to check for
145:38 - user collisions right so if
145:40 - a little paddle hits it so i'm going to
145:42 - do that in here
145:46 - check for user collisions
145:50 - and now
145:51 - if
145:53 - so once again a full current position
145:57 - x-axis
145:59 - is
146:00 - larger than the current position
146:07 - of our user's x-axis
146:10 - so if that's true and
146:12 - the ball
146:13 - current position x-axis
146:16 - is
146:16 - smaller than the current position
146:22 - x-axis plus
146:24 - the block width so we are essentially
146:27 - checking if the ball is in between
146:29 - uh
146:30 - the two sides of our user and whatever
146:33 - it is it's current position
146:35 - so if that is true
146:42 - maybe let's put this in its own
146:45 - okay so if that is true
146:48 - and
146:51 - the ball cut well we could just do it by
146:56 - no let's just make it for the whole i
146:57 - was going to see if we could just do it
146:58 - if it hits the top
147:00 - of our user but let's just do it
147:02 - properly
147:03 - if the ball current position y-axis
147:07 - is larger than the current position
147:12 - y-axis
147:16 - and the ball
147:20 - current and the ball current position
147:23 - y-axis
147:25 - is smaller than the current position of
147:28 - our user
147:31 - y-axis
147:33 - plus the block
147:35 - height
147:37 - so if the two are in the same space
147:43 - we then also want to change direction
147:46 - so check it out
147:48 - so now i'm moving it's going to hit boom
147:53 - boom
147:56 - boom
147:58 - boom
147:59 - this is looking fun
148:08 - and we're adding to the score everything
148:10 - is looking great
148:13 - i think we only have one last thing to
148:14 - do
148:16 - obviously this is
148:18 - uh just a very basic simple game if you
148:20 - want to be super precise like you can
148:22 - see sometimes the ball is passing
148:23 - through a block a little bit i think
148:25 - this one might pass
148:26 - no it didn't hit it uh then please do
148:29 - fiddle around with the if statements
148:32 - okay
148:35 - now we have one last thing to do and
148:36 - let's check for a win
148:39 - so i'm gonna do that
148:45 - here
148:47 - so we've just added to the score
148:51 - check for win if
148:55 - the
148:56 - i guess we're gonna check the length of
148:58 - the block's length so blocks
149:02 - length
149:04 - deeply equals zero
149:07 - well we're going to get the score
149:10 - display
149:11 - use inner html to display you win
149:15 - and once again we're going to stop the
149:16 - game so clear interval timer id
149:20 - and once again we're going to get the
149:22 - document and stop
149:24 - our little guy from moving so
149:27 - key
149:28 - down
149:32 - move user
149:34 - okay great
149:37 - and there we go let's just see if it
149:40 - wins now please do expand on this game
149:42 - you can add a button that will
149:45 - essentially start the game that would be
149:46 - quite cool so the game just doesn't
149:48 - start on its own when we load the
149:50 - browser
149:51 - um i would definitely do that and it
149:53 - shouldn't be too difficult you just
149:56 - uh
149:57 - put in the functions to
150:00 - move the ball in that and perhaps as
150:02 - well the user
150:04 - and then once you press the button the
150:06 - game should start so i'm just going to
150:08 - wait for this i just want to check that
150:10 - we get a message that we win all of them
150:12 - and then i'm going to show you how to
150:13 - deploy it onto the internet
150:18 - so
150:19 - just bear with me while i
150:21 - win this game you can also mess around
150:24 - with the score so for example if you
150:25 - pass one level you could increase the
150:28 - speed of the ball
150:30 - i'll show you how to do that in a second
150:32 - um that could be quite fun
150:35 - you can also make your paddle smaller
150:38 - there's so much there's so much you
150:39 - could do
150:41 - so once again
150:45 - come on just gonna hit
150:48 - one more so hit that one and then
150:52 - see if i can do this one
150:56 - and
150:57 - come on
150:59 - yes you win
151:01 - okay
151:02 - so yeah as i mentioned you can make the
151:04 - game harder by essentially i mean if i
151:06 - move this changes to 10
151:09 - it will go super fast ah
151:12 - so that's quite fun too i'm just going
151:14 - to move it back though because i think
151:15 - it's too fast for me i don't like it
151:17 - okay
151:20 - in this game we are going to make
151:22 - something a little bit more complicated
151:24 - we are going to be building the retro
151:25 - game of frogger the aim and frogger is
151:27 - to get to the other side of the pond and
151:30 - the road using floating logs and
151:32 - avoiding the cars we are going to be
151:34 - building the bare basics of this game
151:36 - leaving you to add styling and any other
151:38 - features at the end
151:39 - by the end of this tutorial you should
151:41 - be familiar with the following methods
151:43 - and properties
151:44 - okay
151:45 - so let's get building
151:47 - okay so let's do it let's build a
151:50 - frogger game
151:52 - so all i'm going to do is start off on
151:54 - webstorm and i'm going to create a new
151:56 - project this is going to be an empty
151:58 - project and i'm just going to call this
152:00 - frogger and just click click create
152:03 - so that is creating my project for me at
152:05 - the moment just an empty directory so we
152:08 - need to go ahead and add a new file
152:11 - that's right it's going to be an html
152:13 - file which i'm going to call index
152:15 - so
152:16 - thank you webstorm so if you did not
152:18 - using webstorm then please just go ahead
152:21 - and type out index.html
152:23 - and here is some boilerplate code that
152:25 - has been generated for me
152:28 - so i'm going to put in the title frogger
152:31 - this is not going to show up in the
152:34 - browser okay this is going to show up in
152:36 - the tab so if i just go ahead and open
152:38 - this up using this shortcut right here
152:42 - you will notice that frogger is showing
152:45 - up here okay so that is what this title
152:48 - tag does for those of you who do not
152:50 - have webstorm you can also
152:52 - open this file by just copying the path
152:56 - to it so copy the absolute path and then
153:00 - just simply paste it into your browser
153:05 - like so so two options for you
153:08 - i'm just gonna go and inspect this page
153:10 - and get up our console logs as well
153:13 - so
153:15 - how are we gonna make our game of
153:17 - frogger well if you watch my tutorials i
153:21 - do usually like to add elements in here
153:23 - with javascript but sometimes it's not
153:26 - worth it sometimes it's actually better
153:27 - just to uh start making the game from
153:31 - the html file itself and this is one of
153:33 - those occasions
153:35 - so i'm going to actually build the grid
153:37 - in html and then add functionality to
153:40 - the grid and my gamer frogger is going
153:42 - to be nine by nine squares
153:45 - okay so this is what the game is going
153:47 - to look like as a reminder again
153:49 - and i'm going to go ahead and create
153:51 - those
153:52 - 81 squares in the index html file
153:56 - so
153:57 - the reason i actually just want to do it
153:58 - in the index html is just because each
154:02 - div has
154:04 - is going to have a different class i'm
154:07 - essentially going to draw out what i
154:08 - want the starting state of the grid to
154:11 - look like
154:12 - so
154:14 - let's give the
154:16 - wrapping div the class of
154:19 - grid
154:20 - as that is going to be our game board
154:23 - and in
154:25 - here i'm going to actually start making
154:27 - my divs
154:29 - so we're gonna have one div two three
154:33 - four and then this one i'm gonna give it
154:35 - the class of
154:37 - ending block so this is essentially
154:40 - where you wanna get to that symbolize
154:41 - the end of the game and then i'm just
154:43 - gonna have a few more of these
154:46 - so
154:47 - 13 to be exact one two three four five
154:50 - six seven eight nine 10 11 12 13.
154:54 - and now it's going to get interesting so
154:56 - now i'm going grab a div and this div
155:00 - essentially is going to symbolize uh the
155:03 - i guess the
155:05 - row in our grid where all the logs are
155:07 - going left so that's why i'm actually
155:10 - going to give it a class of
155:13 - log
155:15 - left
155:16 - i'm going to copy that i'm just going to
155:18 - paste this out
155:21 - oops
155:24 - nine times as it is a nine by nine
155:29 - square so there's one whole entire row
155:32 - of logs going left and then one whole
155:35 - entire row of logs going
155:37 - right so i'm going to use
155:39 - ctrl
155:40 - g
155:42 - and change these to log going
155:45 - right now whilst we might want to give
155:47 - them the same styling we will know that
155:49 - they have different classes and we will
155:51 - know that we can uh essentially know
155:54 - which direction the logs are going to be
155:56 - going on these rows
155:58 - okay
155:59 - so good
156:00 - and now i'm just going to add a row of
156:03 - empty div so one two three
156:08 - one
156:11 - two three four five six seven eight nine
156:18 - and now just like we
156:20 - did with the logs we're going to do the
156:23 - same for cars going left
156:26 - and cars going right
156:29 - so obviously we have to look out for the
156:31 - cars so i'm actually going to take all
156:33 - of these
156:34 - again
156:36 - and this time i'm just going to replace
156:38 - log with car so ctrl c ctrl
156:41 - so ctrl g ctrl g all the way down so i'm
156:44 - selecting all of them
156:47 - and there we go
156:49 - and let's do two more rows of divs
156:53 - so there's nine divs and there's another
156:54 - nine divs
156:56 - and now we're also gonna have to put the
156:58 - starting block in here so i'm gonna do
157:00 - so from the
157:02 - fifth one one two three four five so
157:05 - just in here and i'm going to give this
157:08 - class
157:10 - starting
157:12 - block
157:14 - okay so like i said at the moment we
157:16 - won't see much but that is what the
157:17 - styling is for so let's go ahead and
157:19 - style it up
157:21 - so all i'm going to do is link up my
157:23 - style sheet using the link tag
157:30 - which is the self-closing tag
157:32 - and i'm gonna do rel
157:36 - stylesheet type style
157:39 - type text css and the h reference for
157:41 - this well i know that my style sheet is
157:44 - gonna live in the root of my project so
157:46 - i'm just going to type style css and i'm
157:48 - going to create a file
157:50 - called
157:51 - styles
157:53 - css which is going to live on the root
157:55 - which is why i've just literally typed
157:57 - out the name of my file like this we
158:00 - don't need to go anywhere it's just that
158:01 - file
158:03 - okay
158:04 - so we've linked up the style sheet now
158:06 - let's add some styling
158:07 - so the things we're gonna have to start
158:09 - up well i'm actually going to style my
158:12 - grid
158:13 - to make sure that everything in it fits
158:17 - the way it should so i can look for the
158:19 - class dot is for class of grid let's
158:22 - make this maybe a little bit bigger
158:25 - and i'm going to say that my grid i'm
158:27 - going to give it a border of white one
158:29 - pixel solid
158:31 - uh and we can make it black
158:34 - okay so now if i look in here
158:36 - it's just one line okay because we
158:39 - haven't given it a height or a width
158:43 - so
158:44 - what i'm going to do is say that i want
158:46 - it to be 180 pixels
158:49 - height
158:50 - and 180 pixels
158:53 - width
158:54 - so that is now going to look like
158:57 - this
158:58 - however
159:00 - if we then give styling to all the divs
159:04 - that live inside the grid so this is how
159:06 - i can do i can grab the element with the
159:08 - class of
159:10 - grid
159:12 - so i'm literally looking in here i'm
159:13 - like oh what has a classic grid this
159:15 - does and now i want to say that every
159:17 - div that lives inside of it so every div
159:20 - that lives inside of it this is the
159:22 - syntax for doing so it's kind of a
159:24 - height of well because i chose 180 here
159:27 - 180 divided by 9 is 20 so i'm going to
159:30 - put 20 pixels
159:32 - and width 20 pixels so that exactly
159:36 - nine divs fit in my square
159:39 - uh along the width and the height
159:41 - okay so that is all i have done so now
159:45 - if you look in here
159:46 - and i can actually look at the elements
159:48 - that make up this page
159:53 - so there's my body there's the div with
159:55 - the class of grid and inside you'll see
159:57 - all the divs you'll see each there's 20
159:59 - by 20.
160:01 - however they go all the way down we
160:03 - don't want this we want them to fit
160:04 - inside
160:07 - the square right
160:09 - so i'm going to do so easily by adding
160:12 - display
160:15 - flex now you think that would work but
160:17 - all display flex does is make sure that
160:19 - all the divs fit
160:21 - however just fit on the
160:24 - uh i guess as if you just squashed them
160:26 - together in a box so they're no longer
160:29 - 20
160:31 - pixels why they're 2.25 pixels wide
160:34 - because that's the only way we can fit
160:35 - 81 squares on here so i'm gonna also add
160:40 - flex
160:41 - wrap
160:43 - wrap
160:45 - okay
160:47 - so there we go so now all the squares
160:49 - are fitting in here they're essentially
160:51 - going this they're wrapping so they're
160:52 - going starting from here and going
160:54 - and then they're starting on this row
160:55 - going
160:57 - and so on and so on and so on you'll see
160:59 - as i highlight you will see the
161:01 - corresponding element being highlighted
161:03 - in the inspect tool on the right
161:07 - so great
161:09 - we've done that now let's get to adding
161:10 - some more classes
161:13 - so more styling to the classes sorry
161:15 - so let's first off start the ending
161:17 - block
161:18 - so once again i'm going to grab the
161:20 - class name of ending block and i'm just
161:22 - going to actually give it a background
161:24 - color of let's go ahead and give it red
161:27 - so because we know this is the one two
161:29 - three four fifth square where do you
161:31 - think it will be
161:32 - i think it will be fifth so somewhere
161:33 - here
161:34 - and there it is okay one two three four
161:37 - five
161:40 - uh and let's do the same for the
161:41 - starting block now so starting block and
161:45 - let's say the starting block is going to
161:47 - be
161:49 - blue
161:51 - so all we've done is add a class to this
161:54 - block right here
161:55 - um
161:56 - did we miss
162:00 - it seems we need to add one more div
162:01 - because i did stop there so let's go
162:04 - ahead and add one more div
162:06 - we seem to have missed one
162:09 - to the bottom which actually means i
162:11 - want to move this one to be
162:15 - here instead because i want to be the
162:17 - fifth from the end
162:19 - and there we go
162:21 - so we've added those let's continue
162:24 - adding more styling so let's pick out
162:26 - the log left this time
162:31 - and i'm going to say that log left
162:34 - and actually
162:38 - log
162:40 - right
162:41 - so we can do it this way
162:44 - um
162:45 - or we could just give them all the same
162:47 - class but i'm going to choose to do it
162:48 - this way and i'm going to give them the
162:49 - background color of
162:52 - light
162:55 - blue
162:56 - so now that we know
162:59 - where that is it's here we've
163:01 - essentially made like a sort of
163:03 - uh i guess river that we have to cross
163:05 - where all our uh all our logs here are
163:07 - going left or we that's what we plan and
163:10 - all the logs here are going to be going
163:12 - right
163:13 - so that's what we've done let's do the
163:15 - same for anything with the cars now
163:20 - so i'm going to pick out
163:23 - car left
163:25 - so
163:26 - dot car left and dot
163:29 - car right
163:31 - and i'm going to give it a background
163:32 - color maybe of like light
163:34 - gray this time because this is going to
163:36 - symbolize a road that we need to
163:39 - cross
163:40 - and once again it seems we have
163:42 - missed a very important
163:45 - div so maybe let's
163:48 - fix that one two three
163:50 - four five six
163:53 - okay so we're going to add one here
163:58 - and then we need to
164:00 - get rid of one of these
164:08 - okay
164:09 - so hopefully you are now at this
164:11 - place where you have this kind of
164:14 - styling
164:15 - if you are great if not please check out
164:17 - the code that i have shared in the
164:19 - description below this is what your game
164:21 - should look like at the moment and now
164:23 - it's daily time actually let's go ahead
164:26 - and add a few more things to her html
164:28 - before moving on
164:31 - so we've made our grid the other thing
164:33 - that i want to actually show in here is
164:36 - how many seconds we have left
164:39 - so i'm just going to go ahead and
164:42 - add an h3 tag that's gonna say second
164:46 - left and essentially we're gonna count
164:48 - down the second so i'm gonna add a span
164:50 - tag and the span tag so make sure that
164:53 - says span it's gonna show us the time we
164:56 - have left so i'm just gonna hard code a
164:58 - 20 in here for now but i'm also going to
165:01 - pick out the span tag by giving it an id
165:04 - and i'm going to give it the id of
165:07 - time
165:08 - left
165:09 - so we've done that i'm also going to do
165:11 - the same for result so h3
165:14 - results
165:16 - and once again i'm going to
165:19 - give it a span tag like so
165:22 - and i'm going to give this an id
165:29 - of
165:31 - result
165:33 - okay which we're just gonna leave
165:35 - like that or we can hard code it as a
165:37 - zero i'm also gonna give a space here
165:39 - just to space this out a little bit
165:42 - and
165:45 - great
165:46 - one other thing i'm actually going to
165:48 - add is a
165:50 - start pause button so here is a button
165:53 - and it's going to say start the game or
165:56 - pause the game if we want and let's pick
165:58 - it out so i'm going to give an id of
166:02 - um
166:03 - [Music]
166:04 - start
166:06 - pause
166:08 - button
166:11 - okay
166:12 - so i think we've got everything now so
166:15 - the only thing we've got left to do so
166:17 - after all of this has been loaded
166:20 - we then want to
166:23 - go to our javascript file so i'm going
166:25 - to make a script tag
166:27 - uh and i'm just going to the source
166:29 - which is going to be the app.js file
166:31 - which we are yet to make so let's go
166:33 - ahead and make that make sure that the
166:36 - bottom of your body tag so in between
166:40 - the two body tags after all the html
166:43 - that you have just written
166:45 - so let's make a new file this time it's
166:47 - a javascript file i'm going to call it
166:48 - app which is
166:50 - just showing up here as app.js thank you
166:52 - webstorm for doing that for me and let's
166:54 - start picking stuff out
166:57 - so
166:58 - first things first let's actually pick
167:01 - out everything in here
167:03 - i need to pick out this span element and
167:06 - i'm going to do so by the id
167:09 - so in my app
167:10 - file i'm going to use document and a
167:13 - javascript method called
167:14 - query selector let's make this a little
167:16 - bit bigger query selector making sure
167:19 - that's where the capital
167:22 - s query selects that and i'm looking for
167:24 - the uh element with the id of time left
167:27 - so this needs to be an id and let's say
167:29 - this is something i'm going to save this
167:31 - as
167:32 - the
167:33 - time
167:34 - left
167:35 - display
167:36 - just like so so we've got the time left
167:39 - display the next i mean to pick out so
167:41 - let's go ahead go let's go looking in
167:43 - our file again so we need the query
167:45 - selector and let's go looking
167:47 - for the span with the id result
167:51 - so i'm looking
167:53 - for an element with the id this this
167:56 - means id of result and let's save this
167:59 - as result
168:01 - display you got it
168:03 - you can of course call it whatever you
168:05 - wish
168:07 - so we've picked out those things let's
168:09 - also pick out the button so once again
168:11 - document query selector and let's go
168:13 - looking for the id of
168:17 - start pause button
168:21 - i'm going to save this as
168:23 - the start
168:26 - pause
168:29 - button
168:32 - great
168:34 - so
168:35 - i think this
168:36 - might be it for now actually let's go
168:38 - ahead and pick out all these squares as
168:40 - well so every single little div that i
168:42 - made so let's save this as squares and
168:45 - i'm going to use document and query
168:47 - selected this time all
168:49 - because i want to pick out all
168:51 - all the
168:52 - divs that live in
168:54 - the div with the class name of grid so
168:58 - the dot is saying i'm looking i'm going
169:00 - to go looking in here i'm looking in
169:02 - here and i'm looking for anything with a
169:04 - class name of grid this dot means class
169:08 - name so i'm looking for that but then
169:09 - i'm also looking for the only the divs
169:11 - inside of it okay so i'm looking for all
169:14 - of these and i'm saving them
169:16 - under the const squares
169:20 - so hopefully that makes sense let's
169:23 - carry on
169:26 - so
169:27 - first off i just want to add a little
169:30 - green square which is going to be my
169:32 - frog and i want to essentially add it to
169:35 - the board and then i want to move it
169:37 - with my keyboard so that is the next
169:39 - steps that we are going to do
169:41 - so let's get this up and let's write a
169:46 - function
169:48 - called move frog
169:54 - okay so this is a function that i am
169:56 - going to write
169:57 - and what i'm going to do so
170:00 - each time that i essentially
170:04 - move
170:05 - a key on my keyboard so we're gonna have
170:08 - to listen i'm just gonna console.log
170:10 - this out for now console.log
170:12 - moved
170:14 - i essentially need to listen out for any
170:16 - time that uh
170:19 - i press a key on my keyboard so i'm
170:22 - going to use document and then i'm going
170:24 - to use add event listener and to listen
170:27 - out for the event of key up so there's
170:30 - many many you can choose
170:32 - from there is a list on mdn there's like
170:36 - click but i'm going to use key up
170:37 - there's also key down
170:39 - and so basically each time i press any
170:42 - key on my keyboard any key at all i'm
170:44 - going to
170:46 - uh invoke this function okay so this is
170:48 - the callback function if this happens
170:51 - then this function is called
170:53 - okay
170:55 - cool
170:56 - so at the moment if you see here i'm
170:58 - just going to get the console.log up i
171:00 - can press any key
171:03 - moved moved doesn't matter right any key
171:05 - however now
171:07 - that i um know that is working i want to
171:09 - decide which keys are going to move my
171:11 - mail my uh frog sorry and where it's
171:14 - going to move
171:15 - right
171:17 - so let's go ahead and do that
171:21 - so
171:23 - what i'm going to do
171:25 - is first off let's go ahead and add
171:27 - our frog to the board so i'm going to
171:30 - make a class of frog as well dot frog
171:35 - and i'm gonna give it the background
171:37 - color of
171:39 - green
171:40 - and we're gonna add this dynamically in
171:42 - our javascript
171:44 - so i'm gonna use
171:46 - these squares actually i'm going to grab
171:48 - all these squares
171:50 - so if i go ahead and actually console
171:52 - log all these squares
172:00 - this is what they will look like i've
172:01 - literally picked every single one up
172:03 - from my html and put it in a huge array
172:07 - or no list
172:08 - and they are here with the class names
172:11 - so that's all i have done and i'm going
172:14 - to use that so
172:16 - i'm going to go into my squares array
172:20 - okay and wherever i am at the moment so
172:23 - let's choose which index we want to be
172:25 - in so i'm going to say let current
172:28 - index equal and because we start
172:31 - counting from zero so like this div has
172:34 - index
172:35 - zero this one has one two three if i say
172:38 - my current index is zero i should be
172:40 - here so zero
172:43 - and if i pass a zero through into my
172:45 - array or in other words as we now know
172:47 - it as current index
172:49 - and then i do class list add and then i
172:52 - add the class of frogger
172:55 - or frog sorry
172:57 - where do we expect
172:59 - uh this
173:01 - to show up when we press the key so i'm
173:04 - gonna press a key that's right it shows
173:05 - up here because this is the div with
173:08 - index zero okay is the first div in our
173:12 - array
173:14 - if i change this now to be two
173:17 - it will be let's press the key here
173:20 - because this is the square with index
173:22 - two zero one two okay so hopefully you
173:25 - got that
173:26 - let's carry on so this is gonna decide
173:28 - where we start we wanna start at the uh
173:31 - starting block so there's our starting
173:34 - block this actually has the index 76
173:37 - so let's go ahead and change that to
173:39 - start at 76.
173:41 - so
173:44 - if we move frog well
173:47 - i only want to move the frog actually if
173:50 - we press a certain key so i'm actually
173:54 - going to use the switch case for this
173:56 - this is the javascript
173:58 - switch case
174:00 - and i'm going to pass through e
174:02 - key
174:04 - and if the case is
174:07 - our left so essentially what we're doing
174:09 - is passing through
174:11 - the event
174:13 - into our function
174:15 - and if the events key is our left then
174:20 - what do we want to happen well at the
174:22 - moment we're just going to put console
174:24 - log
174:26 - move
174:27 - left because that's what we want to
174:28 - happen let's maybe make this a bit
174:30 - smaller now
174:32 - and we are going to break
174:34 - so there's our first
174:36 - case
174:37 - um let's do another one
174:40 - case arrow
174:42 - right we're gonna move
174:45 - right
174:49 - let's do arrow
174:51 - up
174:52 - move
174:54 - up
174:55 - and do arrow
174:58 - down
174:59 - and you guessed it it's going to move
175:00 - down
175:01 - so let's see if this works first before
175:04 - we do anything else
175:07 - so now
175:09 - let's press up
175:11 - we're getting move up let's press left
175:14 - move left
175:15 - move right
175:16 - and move down so you should be pressing
175:19 - the arrows on your keyboard and you
175:21 - should be seeing these show up in your
175:23 - console log
175:24 - this works because we are passing
175:26 - through the event into our function and
175:28 - then getting the key of the event if i
175:31 - console log out the event
175:34 - so e is for event
175:36 - [Music]
175:37 - each time we press it you'll see how
175:39 - much information that actually is so if
175:40 - i press up
175:42 - oops console log is not defined con
175:44 - sol log
175:46 - let's press up now
175:48 - see okay so this is all that's happening
175:51 - there's so much stuff and we're looking
175:53 - through it we're going oh my god there's
175:54 - so much stuff but i want the key and the
175:57 - key is arrow up we could use the key
175:59 - code but this is sort of depreciated now
176:02 - so it's safer to use the e key
176:05 - cool
176:07 - so great hopefully that makes sense
176:10 - so how do we move left well to move left
176:13 - it's kind of simple really we just want
176:15 - to be in the index that's minus one of
176:18 - this so we're gonna get the current
176:20 - index
176:21 - and we're just gonna minus one from it
176:23 - just like so okay i'm going to save it
176:26 - back to index
176:28 - so
176:31 - we can write it like this or a shorthand
176:34 - for writing this it's just taking
176:37 - current index and saying that -1
176:40 - equals so that will now change whatever
176:43 - current index is so if i press move left
176:46 - current index will now be changed to
176:48 - 75
176:50 - okay
176:51 - so that's all i'm doing and to move
176:53 - right we're just going to get current
176:54 - index and we're going to add one to it
176:56 - so plus equals one
177:01 - and to move up well this is probably
177:03 - more interesting because we're actually
177:05 - going to
177:06 - use the
177:08 - width of the
177:10 - grid so we know that the width this can
177:13 - be a constant as it's not going to
177:14 - change is nine because we have nine
177:17 - squares here so if i want to if so say
177:20 - if i'm here and i want to be in this
177:22 - square here and this square is index 76
177:26 - well this square is obviously 76 minus 9
177:30 - right
177:31 - so
177:32 - what do you what even is that
177:34 - index
177:35 - 67 where we simply minus equals
177:39 - the width which we know is nine
177:42 - okay so now if we press up
177:45 - we are essentially making current index
177:47 - we're getting that value 76 were
177:49 - minusing 9 from it
177:52 - which is giving us the value 67
177:55 - cool and of course then to move down
177:58 - it's just the opposite so current index
178:01 - plus the width
178:03 - great
178:04 - so
178:06 - let's see how that looks
178:10 - however we're leaving a very long uh
178:13 - thing of frogs behind us and of course
178:15 - if we try to move down we can't do that
178:17 - because there's not only divs so
178:18 - everything is breaking as you know we
178:20 - can't move in here
178:22 - so let's fix all of this
178:24 - so before i call each function i'm
178:26 - actually going to remove the frog from
178:27 - whatever square it's in okay so i'm
178:30 - going to use class list remove
178:33 - so this means that if i press up
178:37 - so let's go ahead and start off actually
178:39 - with
178:41 - maybe we should um
178:43 - add the
178:45 - frog class here as well so i'm just
178:47 - gonna go ahead and add the frog class
178:53 - okay so we're here and if i press up
178:57 - the first thing that's gonna happen is
178:59 - i'm going to remove the frog from the
179:01 - current index so index 76 so i'm going
179:04 - to remove it from here
179:05 - and then we're going to add do all this
179:08 - additions to find out what our current
179:10 - index is based on what
179:12 - key we pressed and then wherever we end
179:15 - up we're going to add the frog class
179:16 - again
179:17 - okay so hopefully that makes sense let's
179:19 - see if that's worked
179:21 - wonderful
179:23 - so now we can move around okay
179:25 - so the next thing we want to do is
179:27 - actually limit our movement so that if
179:30 - we go into this column here
179:32 - we can't move anymore because otherwise
179:35 - we end up on the square on the other
179:38 - side and we don't want this behavior so
179:41 - similarly to being here
179:43 - this will cause breakages okay because
179:45 - there's no div to go into
179:48 - on the left side so what i'm going to do
179:50 - is use maths for this i'm going to use
179:53 - modulus
179:55 - and what i essentially need to do is say
179:57 - that any square with the index is 0 or
180:00 - any square with index 9 18 and so on so
180:05 - any of these numbers if they are
180:07 - divisible
180:09 - by nine
180:10 - and leave no remainder so that's what
180:12 - i'm going to write
180:16 - so
180:19 - if
180:23 - current index so whatever square index
180:25 - we are in
180:27 - index
180:30 - modulus width
180:32 - equals zero
180:34 - so if this is true we are we know that
180:37 - we are either in this square this
180:39 - squared this square the square the
180:41 - square all these squares we know we are
180:42 - here okay
180:44 - so if that is true we don't want to be
180:47 - able to move left but otherwise we can
180:50 - so actually what we need to do as long
180:52 - as the current index does not equal zero
180:55 - then we get the current index
180:59 - and minus one from it but if it does
181:01 - equal zero well then this is not true so
181:04 - we don't do anything
181:05 - okay hopefully that makes sense if i
181:07 - replace this with numbers maybe current
181:09 - index at the moment when we are
181:26 - oops that should say current index
181:30 - so at the moment when we
181:32 - are here we're in
181:35 - current index zero
181:38 - zero modulus nine because we have
181:40 - defined width as nine here
181:43 - does in fact equal zero so we don't do
181:46 - this okay
181:48 - same as if we are
181:51 - here this this square has the index nine
181:55 - and nine modulus nine does equal zero so
181:59 - this is not true so we don't do this
182:02 - okay
182:03 - however if we're here
182:05 - then this statement is
182:07 - true
182:08 - because the remainder will not be zero
182:11 - so then we execute this so we are able
182:13 - to move
182:15 - left i know that might be a lot
182:17 - especially for those of you who are not
182:18 - familiar with uh the modulus operator so
182:22 - please pause here
182:23 - um maybe get a piece of pen and paper
182:26 - and write down the equation because it
182:28 - is it's just maths at the end of the day
182:32 - great so we're going to apply the same
182:33 - logic to the rest of these
182:36 - uh let's do moving right next
182:40 - so this time we want to move right as
182:44 - long as
182:46 - uh
182:47 - the remainder is smaller than eight
182:51 - so if
182:52 - current index
182:54 - modulus width
182:57 - okay and the remainder is smaller than
183:00 - width which is nine minus one
183:03 - if that is true
183:05 - then we want to
183:07 - add one to the current index okay only
183:09 - if it's true
183:11 - and let's do the rest as well so moving
183:14 - up
183:15 - this one will be if current index
183:21 - this time minus width
183:24 - is larger than equals
183:26 - larger than or equals zero
183:29 - so as long as we are
183:33 - essentially
183:36 - in this row okay or anything under it
183:40 - then we can move one up however if we're
183:42 - in this row
183:44 - so
183:45 - essentially if
183:46 - you know the uh index so for example
183:49 - let's do this again so if i'm here
183:55 - we are in a current index with this
183:57 - index one
183:59 - so replace this with one one minus width
184:02 - is
184:03 - minus eight right so minus eight is not
184:07 - larger than zero which means we can't
184:09 - execute this which means we can't go up
184:11 - however if we are let's go one down so
184:13 - this has the index ten
184:16 - ten minus nine is larger than zero okay
184:19 - so then we can
184:21 - go
184:22 - up
184:23 - okay because 10 minus 9 is 1 and that is
184:26 - indeed larger than zero
184:28 - okay and one last one going down if
184:33 - current index
184:37 - plus with this time is larger than width
184:42 - multiplied by width
184:44 - then we can
184:49 - move
184:50 - down because essentially we're checking
184:52 - that if we're in any one of these
184:54 - squares minus the last row again get out
184:56 - your pens and papers and pads and just
185:00 - uh literally just try it out yourself
185:01 - just go into any of these and be like oh
185:03 - i'm in index square with index whatever
185:06 - and see how that works
185:08 - so great hopefully that makes sense i'm
185:10 - just going to get rid of these console
185:11 - logs and let's test it out
185:15 - so
185:17 - we should now
185:18 - be able to move everywhere
185:21 - correctly so we can't oh we're stopping
185:23 - there i'm actually pressing the right
185:25 - arrow nothing's happening i'm pressing
185:26 - the up arrow nothing's happening i'm
185:28 - pressing the down arrow fine for fine
185:29 - and stop i'm pressing yet nothing's
185:31 - happening and we go left
185:33 - and great nothing's happening i'm not
185:34 - getting any breakages either there's no
185:36 - like red in my console log everything is
185:39 - looking good
185:41 - wonderful
185:42 - so what we need to do next is get some
185:45 - logs moving right and some
185:48 - cars moving so let's go ahead and do
185:50 - that next
185:53 - so to move the cars and the logs
185:56 - actually i'm going to go back in here
185:58 - and give these
186:01 - we can just add to the class
186:04 - list perhaps we should do by class list
186:07 - rather than id as we are going to
186:09 - actually
186:11 - yeah okay let's do that
186:13 - so let's give all of these an id
186:17 - sorry a class and i'm not using id
186:20 - because i'm going to be repeating these
186:22 - um
186:23 - again
186:24 - so just in here i'm going to add a new
186:25 - class this is separate to this class
186:27 - we're going to need a space let's give
186:29 - this l1
186:31 - let's give this l2
186:34 - l3
186:35 - f4
186:37 - l5
186:41 - and now i'm gonna stop at five and this
186:43 - will become apparent soon i promise i'm
186:45 - just i just don't think there's any
186:47 - point giving all of these squares in a
186:51 - row
186:52 - an id when actually we just want uh the
186:57 - colors of the squares to be changing
187:00 - based on
187:02 - uh
187:03 - five squares
187:05 - this really doesn't make any sense now
187:07 - but it will i promise so i'm going to
187:09 - give this the id of l1 again
187:13 - l2
187:15 - l3 so now anything with this class is
187:17 - going to have the same behavior and so
187:19 - on and so on
187:21 - and let's also to
187:25 - l4
187:27 - now the log right
187:29 - i'm going to start with l5 this time
187:33 - and then
187:34 - l1
187:37 - two
187:39 - l3
187:41 - l4
187:43 - l5
187:45 - l6
187:48 - l7 oops not l7 uh l1 again
187:52 - l2
187:54 - l3 so let's start with the logs first so
187:57 - what i'm going to say now
188:00 - is that anything with the class of l1
188:05 - or l2
188:07 - or l3 the classes of those
188:11 - are gonna have the background color
188:15 - uh
188:18 - brown and then anything with l
188:22 - four
188:23 - and l five is going to have the
188:26 - background
188:30 - color
188:36 - like blue
188:38 - okay
188:39 - so in actual fact we don't really need
188:41 - this anymore so i'm going to show you
188:43 - i'm going to comment this out because
188:45 - now we're using these classes to color
188:48 - in everything with log left
188:53 - so there we go we've essentially made
188:55 - one log another log and another log and
188:57 - another log and we want these to be
188:59 - going left and we want these to be going
189:01 - right
189:02 - and as you will see this is l1 so all
189:05 - i'm gonna do is just change the location
189:07 - so it looks like it's moving left
189:09 - okay by literally getting l3 and we're
189:12 - making it move to l2 l2 to l1 okay so
189:16 - just doing that and doing it again
189:19 - and so on and so on but not all the way
189:21 - because we only really have to account
189:23 - for these
189:24 - okay because from here on it repeats
189:27 - itself
189:28 - right
189:29 - okay so hopefully that makes sense this
189:31 - should this should move like this one
189:33 - and then this should look move like that
189:35 - one and this should move like
189:37 - that one
189:39 - okay so
189:41 - we've done that so what i'm going to do
189:44 - is write a function
189:47 - so i'm just going to make some space
189:51 - so we can
189:53 - see everything a bit better
189:57 - so what i'm going to do is write a
189:58 - function called
190:01 - function
190:03 - function called move
190:05 - log
190:06 - left
190:10 - and all i'm going to do
190:12 - is use the switch case again so switch
190:19 - and we're going to be looking for true
190:20 - statements
190:21 - okay
190:22 - so if this is true well what i want to
190:24 - do is actually get uh i want to go in
190:27 - here
190:29 - and pick up everything with log left
190:32 - so we know how to do this now i'm just
190:34 - going to do this up here
190:37 - so const
190:39 - log
190:41 - left plural equals document query
190:44 - selector all remember so just like we
190:47 - did to pick out all the divs in the grid
190:48 - and i'm going to look for anything with
190:50 - the dot so the class of log left so i've
190:55 - just collected anything that has the
190:57 - class log left and we're going to check
191:00 - if they have
191:02 - these classes
191:04 - so let's go ahead and grab all the logs
191:06 - left
191:08 - and actually
191:11 - i'm now going to
191:15 - write in my another function actually
191:17 - function auto move
191:21 - logs
191:23 - and i'm going to grab logs left and for
191:25 - each
191:27 - so for each of the divs with the class
191:29 - of log left i'm going to choose the call
191:31 - log left you don't have to call it log
191:33 - left you can call it whatever you wish
191:35 - that is how four each works and for each
191:38 - of them i'm going to actually pass them
191:39 - through the move log left function so
191:42 - each of them will now be affected by
191:44 - this function move
191:46 - log
191:47 - left and i'm going to get the log so or
191:50 - the div with the class of log left i'm
191:52 - gonna put it in the function so put it
191:54 - into this function now boom
191:57 - put it in here
191:59 - and if
192:01 - so if log left
192:03 - class
192:04 - list
192:06 - contains
192:08 - l1 okay so essentially again what we've
192:11 - done is we've grabbed all of these divs
192:14 - we've saved it as
192:16 - logs left
192:17 - and now i've got all of these divs
192:22 - so each one and i'm passing it through
192:24 - into the move log left function so i'm
192:27 - getting a div and i'm checking if it has
192:30 - a class of l1
192:32 - okay
192:33 - and if it does
192:35 - well what i want to do is get that log
192:37 - left or the log going left
192:40 - class list
192:42 - remove
192:44 - l1 and instead
192:48 - log
192:49 - left
192:50 - plus list
192:53 - add
192:55 - l
192:56 - two
192:58 - because we're going
193:01 - left so we need to replace it with
193:04 - l
193:05 - two
193:06 - right because
193:08 - l1
193:09 - yes whatever this one is
193:11 - needs to be there
193:12 - okay
193:14 - so perhaps maybe i'm just going to show
193:16 - you how this
193:18 - looks at the moment
193:24 - so i'm just going to call the function
193:26 - automotive logs but of course we need to
193:28 - uh
193:29 - put this in a timing event
193:32 - right
193:33 - we need to essentially make this execute
193:36 - uh you know every maybe second or so
193:39 - so i'm gonna do this down here i'm gonna
193:42 - say
193:44 - uh
193:46 - we need to put this in a
193:49 - set
193:51 - interval
193:52 - so i'm just gonna put set interval
193:56 - auto move logs and let's do every 1000
194:00 - milliseconds so every second
194:03 - oops
194:04 - let's get rid of that
194:12 - you will see that this has now changed
194:14 - to l2 it's obviously hard to see on here
194:16 - because they're all the same color but
194:18 - this has now changed to this which means
194:20 - we need to change this l2
194:22 - to an l3 and so on and so on and so on
194:24 - so we're going to do all of that
194:30 - so case in fact i'm just going to copy
194:32 - this
194:34 - if it contains l2
194:36 - then remove l2
194:39 - and add class l3
194:41 - and same for l3 if it contains l3 remove
194:46 - l3 and add l4
194:48 - and we need to do one more
194:52 - actually two more sorry
194:54 - if it contains l4
194:56 - remove l4 and add a5
194:59 - and of course if it contains l5
195:03 - remove l5 and add
195:05 - one
195:06 - so now if i refresh this usually you
195:07 - should see them all the top row moving
195:10 - one
195:11 - to the left
195:15 - there we go and of course is doing it
195:18 - every one second so if we look in here
195:22 - boom boom we're literally just changing
195:25 - this to that this to that this to that
195:27 - and it's looking like it's moving
195:29 - so hopefully you now see why i did that
195:31 - of course you could have done l1 you
195:33 - could have done all the way up to l9
195:35 - but there's no point because actually
195:37 - the rotation only happens on five
195:39 - squares okay
195:42 - so that is what's happening see if you
195:44 - take any of the one two
195:46 - three
195:47 - four five and then essentially goes
195:49 - right here one two
195:51 - three four
195:53 - five and it goes back here okay even
195:55 - though it visually doesn't look like it
195:57 - that's what's happening so great
195:59 - hopefully that makes sense now that
196:00 - we've done this we're literally just
196:01 - going to apply the same thing to this
196:03 - row and then the cos so let's do it this
196:05 - is good for repetition and good for um
196:08 - learning again
196:09 - so i'm actually just going to get all of
196:11 - this move log left
196:14 - and call it move
196:16 - log right and we're going to pass
196:18 - through the log moving right and how do
196:21 - we get this well we need to
196:23 - look into our document and get all the
196:26 - logs moving right by picking out
196:28 - anything with a class name log right so
196:31 - we're going in here we're finding all of
196:34 - these
196:35 - okay
196:36 - and once we have our logs right
196:39 - because there's many of them i need to
196:41 - get each one so logs
196:44 - right for each
196:46 - log going right so for each div
196:48 - essentially i need to pass that div
196:50 - through move
196:52 - log right
196:54 - so i'm going to pass it in right now
196:55 - look right
196:57 - now that's being passed into here
196:59 - and if this so we're passing true
197:01 - because we're looking for true
197:02 - statements so if this is true however
197:04 - let's change all of these to log right
197:06 - now so ctrl g we'll do that on webstorm
197:11 - log right
197:13 - if this is true well now we need to go
197:16 - the opposite way so if it contains l1
197:20 - we change it to an
197:22 - l5 so we remove l1 and we add l5 so now
197:26 - we're going the other way if it contains
197:29 - l2 we remove l2 and add l
197:33 - 1
197:34 - 3 3 so we go the other way l2
197:37 - 4 4
197:39 - three
197:40 - five five
197:41 - four
197:42 - so
197:43 - once again let's check it out of course
197:45 - we need to
197:47 - okay so that's being called in the auto
197:49 - logs rights log right
197:52 - and let's see
197:55 - amazing
197:56 - so visually they're going the other way
197:59 - cool
198:00 - now let's do the cars
198:03 - so the cars um let's decide i guess we
198:07 - want the cars to be
198:11 - smaller right like two squares so let's
198:13 - color that on our board first
198:17 - but once again i'm going to actually
198:19 - just add the same
198:21 - well no because they're smaller we're
198:22 - only gonna have to have a rotation of
198:24 - three so let's go ahead and do that now
198:27 - all i'm gonna do is do c1
198:30 - c2 and the car is gonna just be one
198:32 - square c3
198:35 - c1
198:36 - c2
198:38 - c3
198:41 - c1
198:43 - c2
198:45 - c3 and do the same here
198:47 - c1
198:49 - c2
198:51 - c3
198:55 - c1
198:57 - c2
198:58 - c3
199:00 - c1
199:02 - c2 c3
199:05 - so now let's go in here and pick out
199:07 - that anything with the class of c1 is
199:09 - going to be our car so let's just give
199:11 - it a background color maybe like black
199:13 - or something
199:14 - and then
199:16 - also that means that c2
199:19 - and c
199:21 - 3 are now going to be our roads
199:23 - so what color do we give the road light
199:26 - gray let's get rid of these don't really
199:28 - need them
199:32 - there we go
199:33 - so there are cars and now let's make the
199:35 - cars rotate so i need to go from this
199:37 - one to here to here to here and then
199:40 - change from here to here to here and
199:43 - same for these
199:44 - so let's do it i'm going to go in here
199:48 - and let's
199:49 - write a function
199:51 - um
199:57 - i know i have to auto move cars and auto
200:00 - move logs but we could just auto move
200:03 - elements
200:05 - instead right so that we can just put
200:07 - everything in there auto move elements
200:11 - and now let's write a function once
200:13 - again like pretty much exactly the same
200:16 - just a little bit shorter
200:18 - so let's pick out anything so const
200:22 - cars
200:24 - left equals document
200:27 - query select all i'm going to look
200:29 - everything for the class of car
200:32 - left
200:33 - and do the same for cars going right
200:36 - cars
200:40 - cars
200:42 - right
200:44 - cos
200:47 - right
200:49 - cool
200:50 - so that means
200:52 - logs left this should be capital l sorry
200:55 - which means i've obviously done that
200:57 - somewhere else logs left okay so that
200:59 - means that once again i'm just going to
201:01 - get my cars going cars going left
201:05 - for each
201:07 - car left i'm going to pass it through a
201:09 - function which i'm yet to write called
201:10 - move
201:11 - car
201:12 - left and pass through the car
201:15 - left
201:16 - and do the same for cars
201:21 - right
201:22 - car
201:24 - right move car
201:28 - right
201:30 - okay so let's write our function
201:32 - again i'm probably just going to copy
201:34 - this because it's pretty much the same
201:37 - let's start with the left one
201:42 - paste it here
201:44 - move
201:45 - car left
201:48 - car left
201:49 - and if let's just change these so
201:52 - control g
201:56 - car left class list oops car
202:00 - left
202:01 - cliff car left class class list contains
202:04 - c1 then remove c1
202:07 - and change it to c2
202:09 - again here c2 c2 change it to c3
202:15 - and c3
202:17 - c3 but this time we change this to c1 so
202:20 - it loops the loop stops there and let's
202:22 - just get rid of these
202:24 - and now car moving right
202:29 - so i'm just going to use ctrl g
202:33 - car
202:34 - right
202:36 - and we go the other way this time so
202:38 - this should be c
202:40 - 3
202:41 - this should be c1 and this should be c2
202:46 - okay
202:49 - there we go
202:50 - everything is moving this is looking
202:53 - good the next thing you need to do is
202:54 - actually decide what's safe to go on
202:56 - what isn't and also we need to make sure
202:58 - that we can see our frog at all times so
203:01 - i can do so easily in two ways the
203:03 - easiest is probably just to move this
203:05 - down to the bottom so it's the last
203:06 - styling applied
203:11 - so there we go you can also use
203:13 - important to overwrite any classes
203:16 - great
203:17 - so i think now probably let's decide
203:19 - what makes something safe to go on or
203:22 - not
203:23 - so i'm going to write a function to
203:27 - check for a lose
203:31 - so
203:32 - let's do that
203:36 - so back in here
203:38 - i'm going to write a function
203:41 - called lose and let's define what
203:43 - happens
203:44 - so what happened if
203:47 - essentially
203:49 - let's say if you hit a car which has the
203:51 - class list c1
203:53 - then the game's overwrite because you
203:56 - know
203:57 - the car hit you
203:58 - uh but also if you go in the water you
204:02 - also
204:03 - the game's over right and the water is
204:05 - this one so if we go in here if our
204:08 - current index where we are contains the
204:10 - classes c1 or these then it's a game
204:13 - over so essentially if we look here
204:15 - again
204:18 - so if our current index is any one of
204:20 - these at any point so say i'm in this
204:22 - div and it has the the class list uh
204:25 - like c1 for example any point then the
204:27 - game is over so we need to check for
204:29 - this
204:30 - so what i'm gonna do is say if
204:33 - current
204:37 - index so we need to get our squares
204:39 - actually all the squares so all the divs
204:42 - from our board that you remember from
204:43 - before and if squares let's go into the
204:46 - array
204:47 - and we're going to pass through the
204:49 - current index so if current index is 0
204:52 - we're going to get the first square in
204:54 - our array
204:55 - and if that square
204:57 - class list
204:59 - contains
205:02 - c1
205:03 - so the car
205:05 - well we know that's a game over
205:07 - right so
205:09 - what am i gonna do i'm actually gonna
205:11 - get the result display which we've
205:13 - already picked up out here
205:19 - oops
205:22 - and i'm just going to do text content
205:28 - you lose
205:30 - so just
205:31 - like that and i'm also going to actually
205:35 - stop this so let's assign this to a um
205:40 - id i have to do this up here actually
205:43 - so let timer id at the moment it's null
205:46 - i'm just leaving it as null this is a
205:48 - shorthand for me doing that
205:50 - and then
205:52 - we need to assign a sentence interval to
205:54 - the time id
205:56 - which means if i want to stop this
205:58 - i just need to pass the timer id
206:02 - through clear interval so clear interval
206:06 - timer id and let's actually remove the
206:08 - uh frog so the frog obviously is here
206:11 - because wherever the current index is
206:13 - that's where our frog is so class list
206:16 - remove
206:18 - frog
206:20 - okay
206:21 - and also let's remove the uh event
206:24 - listener so document or remove event
206:27 - listener so we're gonna stop listening
206:30 - out for key up
206:32 - on our keyboard that essentially moves
206:34 - the frog
206:37 - great
206:38 - and let's check for the lose uh where do
206:41 - we want to do this
206:44 - i think
206:47 - maybe with the with the lose piece with
206:50 - here
206:52 - so each time everything moves i also
206:54 - want to check for a
206:56 - loose
206:57 - okay
206:58 - so that will be checking every one
207:01 - second to be precise so let's see if
207:03 - that works i'm just gonna go here and
207:05 - then i'm gonna go here and up we lose
207:07 - because the car hit us
207:09 - so once again maybe a bit slower let's
207:11 - stand here and wait
207:13 - ah okay we get yule is showing up the
207:16 - frog disappears and now obviously we
207:18 - can't move anything the uh it's not
207:20 - listening out to our key ups anymore and
207:22 - even if we wanted to we couldn't move
207:24 - the uh
207:25 - mount the frog i guess because you know
207:27 - we've removed it so
207:30 - actually that's not technically true
207:32 - because we add the class of frog in the
207:34 - move frog function so we do need to
207:35 - remove that event listener
207:38 - cool
207:39 - so this is looking good let's do the
207:41 - same for if he goes in the water
207:46 - so if this is true
207:49 - or
207:51 - that's how you write or
207:52 - or
207:54 - it contains what is the water
207:58 - like blue l4 or l5
208:00 - so
208:01 - contains
208:03 - l4
208:05 - oh
208:09 - contains
208:10 - oh
208:12 - five
208:13 - okay
208:14 - so that is it should we try it out just
208:17 - so everyone's on the same page
208:19 - so let's actually try past this without
208:21 - getting hit oh well yes okay so we got
208:24 - we fell in the water so that is looking
208:26 - good
208:28 - great now the next thing we need to do
208:30 - is uh see what happens if we win and if
208:33 - to to win we just have to really get to
208:35 - the red
208:36 - thing which is our
208:41 - ending block so that's the class we're
208:43 - going to check for this time
208:49 - so
208:50 - function win
208:54 - if
208:55 - squares
209:00 - current index class list
209:02 - contains
209:05 - uh ending
209:07 - block
209:10 - well then
209:11 - let's also do all these things so clear
209:13 - the timer remove the event listener
209:16 - maybe let's not let's not remove the
209:18 - frog because you know
209:20 - be nice to see the frog
209:22 - uh you win
209:24 - but we do clear the
209:26 - timer
209:28 - so oops
209:29 - let's put this function
209:33 - function
209:35 - why did i do that
209:37 - make sure these are parentheses so the
209:39 - curly braces these are parenthesis and
209:41 - these are curly braces
209:43 - okay so let's also check for this every
209:45 - one second after
209:48 - moving everything
209:52 - so cool now let's actually try get to
209:53 - the end so this is gonna be fun
209:56 - uh
209:58 - and then i need to stay on these
210:03 - you win
210:04 - cool and then everything's taken away
210:06 - so great the last thing we need to do is
210:08 - just add the timer so let's do it let's
210:11 - add the timer so i'm going to start off
210:14 - with the time uh let current time and
210:18 - let's say we want to do this i'm just
210:19 - going to put five seconds for now
210:21 - because
210:22 - you know i don't want to wait around
210:24 - loads in order to see if this works but
210:26 - we can change it to something later
210:29 - and all i'm going to do
210:38 - is
210:39 - so
210:40 - we need to show
210:45 - i'm actually going to do it when we move
210:47 - everything so in here as well
210:50 - i actually so each time this function
210:52 - gets called i want to get the current
210:56 - time
210:57 - and just minus one from it okay and then
211:00 - i want to show it in the time left
211:02 - display so i'm going to use time left
211:03 - display text content
211:08 - current time and because we um
211:16 - we hard code the number 20 there so by
211:19 - the time this happens we take away one
211:21 - from whatever the number that we saved
211:23 - up here is so maybe let's make this 20
211:26 - just to make things easier
211:27 - so it's starting off as 20 but then we
211:29 - call this function and we take away one
211:31 - from 20 and we show 19.
211:33 - so this is looking
211:36 - good
211:37 - i think that should be fine we also need
211:38 - to write what happens
211:40 - if we hit zero right so if where's the
211:43 - lose function
211:47 - so
211:48 - another thing that we need to check for
211:50 - is if
211:52 - the current time
211:57 - suddenly
211:59 - equals zero or is less than or equal
212:02 - to zero
212:04 - then also we lose
212:06 - right because
212:07 - essentially the game
212:09 - is kind of over
212:10 - so
212:12 - great so if that is true we also lose
212:14 - and we clear everything out
212:17 - now i can also
212:19 - so let me just show you what this looks
212:20 - like again we are going to have to wait
212:22 - till 20 so i'm going to come back to
212:23 - this
212:24 - we can also hook up the start pause
212:27 - button to essentially pause our timer
212:29 - from uh counting down so i'm going to do
212:32 - this by grabbing the start
212:34 - pause button let's just check how much
212:36 - time we have left four three two one
212:40 - you lose okay because we run out of time
212:43 - and then that's just staying at zero
212:45 - cool but if i want to start the game
212:47 - because at the moment it just sort of
212:49 - auto starts
212:50 - uh we can use the start button to do
212:53 - this so all i'm going to do is get the
212:54 - start pause button and choose add event
212:57 - listener to listen out for
213:00 - clicks on it
213:02 - okay
213:03 - and if it is clicked
213:06 - i could write a function should we write
213:08 - a function should we just do it in here
213:10 - and i'll do it in here just to show you
213:11 - that you can also just write the logic
213:13 - of a function here so start pause button
213:15 - why is it not liking this does this not
213:17 - exist
213:19 - stop pause button
213:23 - start pause button ah
213:25 - start pause button
213:26 - okay
213:29 - start pause button add event listener
213:32 - if timer id
213:35 - exists
213:42 - because at the moment when we press
213:43 - start time
213:44 - this will be null okay so if we press
213:47 - again and there is a timer id we just
213:49 - want to clear
213:51 - interval timer id okay we want to pause
213:54 - it else
213:56 - timer id
213:58 - equals set
214:01 - interval
214:02 - and then we essentially just
214:04 - move this whole thing actually just to
214:06 - here
214:07 - okay
214:08 - so we move that in here and we also move
214:11 - the part where it listens out for the
214:14 - key frog
214:17 - for the sorry for the movements of the
214:18 - frog for us moving the keys so i'm going
214:21 - to actually take this and only allow
214:23 - this to happen if we have pressed the
214:27 - start button
214:28 - okay
214:29 - so whoops
214:31 - to make this a function we need to
214:33 - actually do this so that is now a
214:35 - callback function
214:36 - and
214:38 - great so once again
214:40 - say we are playing this game for the
214:42 - first time we've just started the game
214:44 - timer id as we set it up here is null
214:47 - okay so we press the button we click it
214:50 - timer id does not exist so we don't
214:52 - clear the interval so we just go to set
214:55 - up set our countdown going essentially
214:57 - so we automate the elements every one
214:59 - second and we
215:01 - enable
215:02 - us listening out to uh
215:05 - key presses so we can move the frog
215:07 - however if we press the button again so
215:10 - at this point a timer id does exist
215:12 - right because our countdown is going
215:13 - then we stop it we clear the interval
215:15 - and whatever time we are left with is
215:17 - the current time
215:19 - so let's check it out
215:22 - so obviously nothing's happening stop
215:25 - so i can move it i can move it i can
215:27 - move it to pause
215:31 - ah this shouldn't i should not be able
215:33 - to move that so
215:35 - when i paused it i also want to
215:40 - remove
215:42 - event listener let's try again
215:45 - start
215:47 - moving around pause
215:49 - okay and i can't move
215:51 - the frog anymore and start
216:00 - it's console of the time id to see
216:02 - what's going on
216:10 - so stop
216:13 - pause obviously exists i'm going to
216:15 - press it again
216:18 - ah timer id we need to assign the value
216:22 - null again
216:24 - so
216:26 - let's try now
216:27 - start
216:31 - oops
216:39 - start
216:42 - pause
216:44 - restart
216:45 - okay cool so actually
216:48 - you know what we probably need to check
216:50 - for these collisions way often because
216:52 - if i'm fast enough it doesn't register
216:54 - because it only checks every one second
216:56 - right but if we move faster than one
216:58 - second
216:58 - um
216:59 - it kind of doesn't work so i'm gonna
217:01 - move the
217:02 - check for
217:04 - um
217:04 - lose and win and i'm gonna put it
217:08 - in its own function
217:10 - or own sorry uh
217:14 - interval so time id
217:18 - let's
217:19 - which we call this
217:23 - uh outcome
217:26 - timer id
217:30 - again equal
217:32 - nothing
217:33 - and
217:34 - i'm just going to say out
217:38 - come time id
217:40 - set interval
217:42 - and we're going to check for
217:44 - wins
217:45 - loses and
217:47 - wins so
217:49 - function
217:54 - check
217:56 - out comes
217:58 - i'm gonna put those in there
218:01 - and then
218:02 - i'm gonna check for this
218:05 - every 50 milliseconds so you really
218:07 - can't uh
218:08 - cheat i guess
218:10 - so that is gonna keep
218:12 - going
218:16 - and i guess
218:20 - we'll probably clear it here when the
218:21 - game is
218:23 - you know
218:24 - of paused
218:36 - because we don't really need it going i
218:37 - guess if it's paused so let's stop that
218:39 - and also let's stop it on the lose so
218:42 - again clear
218:44 - interval
218:49 - clear
218:50 - into four
218:52 - so now we should check for this way more
218:54 - often
218:57 - let's try it out
218:59 - start
219:01 - so now if i oh see it's checking way
219:03 - more often now
219:06 - let's refresh stop
219:09 - there's no cheating that's gonna happen
219:12 - so there we go that is the basics
219:15 - the super basics for the game please
219:17 - take this game improve on it uh you know
219:20 - ad levels or perhaps you know you want
219:22 - to be able to start a new game from here
219:23 - instead of having to refresh all these
219:25 - things you can do hopefully now i've
219:27 - showed you how you can take everything
219:29 - you've learned and apply it
219:32 - um let's do this let's try win this okay
219:34 - so actually if i wait here this should
219:36 - be a empty space for me to go soon okay
219:39 - oh i'm not meant to go in the water
219:41 - sorry
219:43 - okay
219:44 - let's do it
219:46 - um i don't know why i have a results we
219:48 - don't really need a result let's get rid
219:49 - of that
219:51 - so i need to go in here
219:53 - and there we go so i won i did it
219:56 - uh the result we don't need that to be a
219:58 - zero because we're not collecting any
220:00 - points so let's just keep the result as
220:02 - this and it'll either say we win or we
220:04 - lose
220:05 - so
220:06 - there we go i hope you've enjoyed this
220:09 - lesson and i'll see you in the next
220:11 - videos
220:13 - in this game we are going to build
220:15 - connect four we're going to take a
220:16 - different approach with this game we
220:19 - have been working with a lot of modulus
220:21 - this is a different approach in which we
220:23 - are just going to define which indexes
220:25 - uh create a match or don't create a
220:28 - match of four so i'm excited to share
220:30 - this alternative solution to you to what
220:33 - you have been doing previously
220:35 - so what are we waiting for these are the
220:37 - javascript methods and properties that
220:39 - you will learn in this section
220:42 - okay so let's do it as you can see here
220:45 - i've already have my project set up with
220:48 - an index html file an index.js file and
220:52 - a styles css file which we now have to
220:54 - hook up to work together
220:57 - i have gone ahead and put in some html
221:00 - boilerplate for us
221:01 - we have a title which no will not appear
221:04 - in the browser it will however appear in
221:07 - the tab which i'll show you later
221:11 - and a link tag so we can link our style
221:14 - sheet now as our style sheet is in the
221:16 - root of our project i simply have to
221:19 - write styles css to hook
221:22 - it up
221:23 - i'm also going to put in a script tag
221:26 - and if you know me i'm going to show you
221:27 - two ways to put in the script tag we can
221:31 - put in a script tag at the bottom of our
221:34 - body
221:35 - so if i just put a script tag with the
221:38 - source and once again it's in the root
221:40 - of our project so the index.js file
221:43 - so that is what our script tag
221:47 - is linked to i'm just going to put a
221:49 - char set
221:50 - as
221:51 - well
221:54 - so char set
221:58 - uh
221:59 - that one thank you very much
222:02 - now if you know me you i will now tell
222:05 - you that you can't be your script tag at
222:07 - the bottom of the body but make sure
222:09 - that is after any html that we want uh
222:12 - to put in or alternatively you can also
222:15 - put it
222:18 - in the header so in the head i'm gonna
222:22 - just put it here just to show you
222:23 - another option
222:24 - because we can also use a dom content
222:27 - loaded we can use an event listener to
222:29 - listen out for
222:30 - once everything here is loaded and some
222:32 - people say that is a more foolproof way
222:35 - so i'm going to show you how to do it
222:36 - now as always the option is up to you if
222:38 - you prefer to use the script tag at the
222:40 - bottom of your um
222:42 - body that is fine just don't use both
222:45 - otherwise you'll have two scripts
222:47 - running so i'm just going to leave mine
222:49 - here because i want to show you how to
222:51 - do this you can also use the document
222:54 - and use add event listener to listen out
222:57 - for when the dom content has loaded
223:02 - okay and then
223:04 - once it has all our javascript we're
223:06 - going to put in between
223:08 - these
223:10 - two
223:11 - little curly braces okay
223:14 - done
223:14 - now
223:16 - let's move on
223:17 - now because i want this to be a sort of
223:19 - beginner lesson we could use javascript
223:22 - to add all these divs for our connectful
223:24 - game but i'm just going to keep it very
223:27 - simple and put them in here in our html
223:31 - so our connect4 game is going to have
223:33 - it's gonna be seven squares wide and six
223:36 - squares high
223:37 - okay but i also want to put in like a
223:40 - secret seven squares at the bottom
223:42 - because we want to tell
223:44 - our browser where the bottom of the grid
223:47 - is and this is just a solution that i
223:48 - thought of of course like you don't have
223:50 - to use it but this is just the way that
223:52 - i would solve it in order to build our
223:54 - game
223:56 - so what's that seven times seven is 49
223:59 - let's do it i'm gonna make a div that
224:01 - i'm gonna give the class of grid because
224:05 - this is where all the magic is gonna
224:07 - happen this is gonna be our game grid
224:10 - okay so let's call it a class
224:12 - now any div that i'm gonna put in here i
224:15 - essentially want to be or represent the
224:18 - little squares on my connect for game
224:21 - so as i said i'm going to need seven
224:23 - times six for the game but then a secret
224:25 - seven which we will go into later so i
224:27 - need 49 of these so is just gonna face
224:29 - one two three four five six seven eight
224:32 - nine ten of course like i said we could
224:34 - do this in javascript um i do do it
224:37 - i do add these divs with javascript in a
224:40 - lot of my other games so if you wanna
224:41 - check out how i do that it's a create
224:43 - board function that i use pretty
224:45 - generically please go ahead and check
224:48 - those out so one two three four five
224:51 - that's 50 divs i'm just going to get rid
224:53 - of the
224:54 - last one to make it 49.
224:58 - okay now i did say i wanted the last
225:00 - seven to have like a
225:02 - like uh represent the end of our
225:05 - you know
225:06 - connect four board so i'm just going to
225:08 - give them a class of taken
225:11 - again you will see why later on
225:14 - so there's one
225:16 - two
225:17 - three four
225:18 - five six
225:20 - seven
225:22 - great
225:23 - so we've got a div with a classic grid
225:25 - with 49 divs in it
225:28 - now let's actually style it up to uh see
225:31 - it visually
225:33 - so
225:33 - because we want to
225:35 - grab the grid i'm going to grab the
225:37 - class so use a dot for class of grid
225:42 - and i'm going to decide that i want all
225:44 - my squares to be 20 by 20 pixels which
225:47 - means that i need to make the grid
225:50 - well let's first give it a border of one
225:52 - pixel solid and as a default it's going
225:54 - to appear
225:55 - black
225:56 - solid one pixel black
225:58 - and then height
226:00 - i'm going to go with 120 pixels of
226:02 - course and then width
226:04 - 7 x 20 is 140 pixels
226:08 - okay and now while i'm here i'm also
226:09 - going to style every single div inside
226:12 - the div with the class of grid and i can
226:14 - do so like this by once again grabbing
226:17 - the class of grid
226:20 - and then every div inside of that so
226:22 - that's how i would write that is going
226:24 - to have the following styling i just
226:26 - want them to be
226:28 - height
226:29 - 20 pixels
226:31 - and width
226:32 - 20 pixels
226:34 - now i'm just going to give a background
226:37 - color for now so you can see what's
226:38 - going on
226:40 - so now if i just copy
226:44 - the relative oops copy the path sorry
226:47 - and then go to a browser
226:50 - and paste it
226:52 - you will see there's my grid
226:54 - and there are all the squares
226:56 - but it obviously doesn't look right
226:58 - right we need the squares to fit in the
227:00 - grid so i want them to sort of like
227:02 - snake over so i'm gonna do this by
227:05 - adding
227:07 - display flex
227:10 - so now if i show you what that looks
227:12 - like and refresh whoops
227:15 - fresh
227:16 - okay now they're in there but they're
227:18 - all squashed look how thin they are
227:21 - i don't want that i wanted to snake over
227:24 - so i'm also going to use flex
227:27 - wrap
227:28 - wrap
227:30 - and there we go
227:32 - okay
227:33 - so now oh i think we've got too many one
227:35 - two three four five six seven yeah we
227:38 - have too many but that's
227:40 - that is fine seven times one two three
227:43 - four five six seven so we need to delete
227:47 - seven ten more ten of these is totally
227:49 - ten
227:50 - we did a few too many so one two three
227:52 - four five six seven eight nine ten
227:56 - delete
228:00 - okay great
228:01 - so now they all fit if i
228:04 - just go over the one two you will see
228:05 - how they are snaking over and then of
228:08 - course we have the last seven which have
228:10 - the class of taken
228:12 - so so they're outside of my grid and
228:15 - we're just using them to let our code
228:18 - know that this is the bottom of the
228:19 - connect for
228:20 - uh
228:21 - board game is that a board game you know
228:23 - what i mean game
228:25 - okay so i'm just gonna get rid of the
228:27 - background color blue and while we're
228:30 - here i'm gonna
228:31 - add a class of player player player
228:36 - one
228:38 - i'm gonna give it a background color of
228:40 - let's say
228:41 - red
228:43 - and then a border radius because i'm
228:45 - going to make them circles of 10 pixels
228:48 - because border radius on a 20 by 20
228:50 - square is gonna make this a circle
228:54 - so we've got play one and let's make
228:55 - player two
228:57 - let's move to player two
228:59 - blue
229:01 - okay
229:03 - cool
229:03 - so we've got everything we need now
229:05 - let's start picking out elements from
229:08 - our html and our javascript so we can
229:10 - work with them
229:12 - so the first thing i'm going to do is
229:13 - actually pick out the squares so i'm
229:15 - going to
229:16 - save them as squares i'm going to use
229:18 - document query selector all thank you
229:21 - tab 9
229:22 - to pick out and once again this is going
229:24 - to be useful because we just learnt this
229:26 - to pick out all the divs inside
229:29 - the div with the class of grid
229:31 - so that's how i would do
229:34 - that
229:35 - so we've just picked out all the squares
229:38 - uh now i also want a way to i guess
229:42 - tell the user whose go is so i'm going
229:44 - to use an h3 tag for this
229:46 - and i'm just going to write
229:50 - the
229:50 - current
229:52 - player
229:53 - is
229:55 - player
229:56 - and then i'm gonna use a span tag to
229:58 - just interrupt that h3 tag and i'm going
230:00 - to hard code a one
230:01 - and i'm just gonna use an id just in
230:03 - case we want to use another span right
230:06 - so i'm just going to put current player
230:10 - and while we're here i'm also just going
230:12 - to
230:13 - put a place we can show the result i'm
230:15 - going to leave it empty for now and just
230:17 - give an idea of
230:19 - results
230:22 - okay so that's looking good
230:25 - and in here let's also pick out uh let's
230:28 - pick out the
230:30 - result so const
230:33 - result
230:34 - equals document query selector i could
230:37 - use get element by id but it's totally
230:39 - up to you i'm going to use query
230:41 - selector to look for an id so we use the
230:43 - hash for id we're looking for the id of
230:46 - result and another id we need to pick
230:49 - out which is the
230:50 - uh display for the current player so i'm
230:53 - just gonna display current player
230:55 - equals once again we get the document
230:58 - oops
230:59 - and we use i'm gonna use query selector
231:01 - again just to make everything
231:02 - consistent i'm going to look for the id
231:05 - and save it for our javascript
231:09 - okay we also need to let our javascript
231:12 - know who the current player is and we
231:13 - hardcoded once i'm just going to put
231:14 - this here two i've used a let as this
231:17 - will not always be one it might be
231:19 - player two so that's why i use the let
231:21 - there
231:22 - okay
231:24 - now i think the next thing i wanna do is
231:26 - add um an on click to all our squares
231:31 - okay so i want uh essentially something
231:34 - to happen every time i click any of the
231:36 - squares in our connectful grid
231:39 - so i'm going to use a for loop for this
231:41 - oops making sure that i'm in the curly
231:42 - braces
231:44 - four let i equals zero
231:48 - and now
231:49 - because we're dealing with the squares
231:51 - uh
231:53 - i could use the square's
231:57 - length
231:58 - that'll mean even including all the
232:00 - taken
232:01 - squares
232:04 - and
232:08 - i think that's fine let's just carry on
232:09 - and see what happens
232:12 - okay
232:12 - so for each of the squares in my squares
232:16 - in my grid sorry
232:18 - i want to get the squares
232:21 - and then for each one because they're
232:23 - looping so i'm going into the array and
232:25 - i'm looping
232:27 - i just want to add it on click
232:30 - and then on the click and we need a
232:31 - function so i just use an arrow function
232:34 - for now i'm just going to make an alert
232:36 - that says
232:38 - you have clicked
232:40 - square
232:42 - just so you can see what's happening i
232:43 - want to show you so i'm just going to
232:45 - use the i
232:49 - and save
232:51 - now let's refresh
232:52 - so if i click here
232:56 - oops
232:57 - you have clicked square 13.
233:00 - let's refresh i'm going to click the
233:01 - first one
233:03 - you have clicked square zero because as
233:05 - you know we start erase from zero
233:07 - okay so this is working we have added an
233:09 - on clip to each of these squares
233:12 - including these ones but for now let's
233:14 - just ignore it um we'll decide what we
233:16 - want to do with that later but i think
233:18 - that's fine
233:19 - cool
233:20 - it's pretty fun isn't it we know exactly
233:22 - which square we have clicked
233:25 - yeah
233:26 - okay so we actually don't want this
233:27 - alert i've just done that so we you can
233:29 - see what's going on before me coding any
233:32 - further because i think that is
233:33 - important
233:35 - okay
233:36 - to delete
233:38 - well the first thing that we want to
233:41 - do
233:42 - is decide how we're going to solve this
233:44 - so obviously in connect four when you
233:46 - drop the little um
233:47 - [Music]
233:49 - token we need to account for gravity
233:51 - right so i think let's do it that if the
233:54 - square below your current square that
233:57 - you want to go
233:58 - is taken you can go on top of it right
234:01 - simple so that's why we added the class
234:02 - of taken at the very bottom because at
234:05 - the moment we're going to write
234:06 - something that says you can only go on
234:08 - that bottom so only on
234:12 - this row because all of these have the
234:14 - class taken
234:16 - so
234:16 - if the square
234:19 - below your current
234:25 - square is
234:28 - taken you can
234:32 - go on top of it
234:35 - cool
234:37 - i'm just going to minimize this because
234:38 - we don't need it
234:40 - so
234:41 - how do we write this in code if
234:44 - we go into our squares array
234:47 - i'm just going to use i but i'm going to
234:48 - add 7
234:50 - because i want to check what's directly
234:51 - below the current square that we are so
234:53 - we do that by adding 7 to the index
234:55 - number of it
234:57 - and then if that square class list
235:01 - contains
235:04 - k can
235:06 - well
235:07 - we can go right
235:10 - so
235:11 - i would do it like
235:16 - oops this
235:18 - so if that is true and the square
235:20 - directly below us is taken
235:22 - uh if the current
235:25 - player equals player one thank you tab
235:27 - nine if the current player equals
235:29 - player one
235:31 - i don't know why it keeps formatting
235:32 - like that i don't like it
235:34 - um well then to that square so once
235:36 - again that square
235:38 - i'm gonna add the class
235:40 - list um i'm gonna add well i'm gonna add
235:44 - taken for one because it's obviously
235:46 - taken
235:47 - but i'm also gonna add square list
235:51 - class list add
235:54 - player
235:56 - one
235:58 - okay
235:59 - and then of course we want to change it
236:01 - to player two so current player
236:04 - equals two
236:06 - um and then let's display it so display
236:08 - current
236:09 - player
236:11 - in
236:12 - html
236:14 - uh
236:15 - and let's just display whatever the
236:16 - current player is because we've just
236:17 - changed it to two so let's actually show
236:19 - that visually to our user
236:20 - okay
236:21 - ah
236:22 - click okay cool is changing okay now
236:25 - it's player twos go so we can't do
236:26 - anything
236:27 - so now now let's write some logic for if
236:29 - it's player two
236:31 - um
236:33 - if
236:35 - current player
236:37 - equals two
236:41 - well then essentially we just
236:43 - it's going to copy this really because
236:44 - we're doing the same but just
236:47 - we're gonna add player
236:49 - two
236:50 - and then change it back to player one
236:53 - cool
236:55 - um and then i'm also just gonna add an
236:59 - you know like an else because we've got
237:00 - these if if this
237:02 - or we could just um
237:07 - we might have to do an else if
237:11 - i think we might have to do that
237:14 - okay
237:15 - yes we might have to do that else if
237:18 - else alert
237:21 - uh
237:22 - can't
237:23 - go here
237:25 - okay
237:26 - so now
237:29 - change player two player two goes let's
237:32 - play one again
237:34 - player two oh can't go there where's my
237:37 - alert
237:38 - am i allowed
237:40 - it's annoying
237:42 - hmm what did i do ah right i put it in
237:43 - the wrong place ha ha
237:45 - else
237:46 - if
237:48 - alert
237:49 - okay
237:51 - so now one
237:52 - can't go here
237:54 - can't go here but play two can go there
237:57 - can player one go here yes it can so
238:00 - awesome
238:01 - so that's why i did the else if if i
238:03 - just got rid of this and just did an
238:05 - alert well obviously
238:09 - yes i know i can't go there i can click
238:11 - here it'll just tell me i can't go there
238:13 - even though i can because it's uh sort
238:16 - of like executing this and then
238:18 - executing that anyway so that's why i
238:20 - did else if
238:22 - else
238:25 - cool
238:26 - okay
238:27 - so we've done that part of the logic the
238:29 - last thing i need to do is check the
238:31 - board for wins so i'm going to do that
238:34 - with a function um this i do actually
238:37 - want to execute every time we click so
238:39 - there's no need for else if we just want
238:42 - to check the board every time we click
238:44 - on the square
238:46 - so now let's write our function i'm
238:48 - going to do up here of course because we
238:50 - need to write it
238:54 - we need to write the function before use
238:55 - the function so
238:56 - function checkboard
239:02 - like so
239:04 - now
239:05 - this might not be like the most
239:08 - uh i guess it's a lazy way to check for
239:11 - wins i mean if you want to
239:14 - uh
239:15 - i guess make this cleverer please do and
239:17 - share with me i just couldn't be
239:18 - bothered it's a small board right so
239:20 - i've just gone ahead and figured out all
239:22 - the winning combinations on it
239:24 - so please feel free to take this i'm
239:26 - going to obviously put it in my um
239:30 - github but i've just got a winning
239:33 - uh a raise
239:35 - array
239:37 - again if i've got any wrong in here i'm
239:39 - sorry um let me know the cons bring your
239:42 - arrays
239:45 - and there we go so i have literally just
239:48 - pasted all the possible winning arrays
239:52 - uh so by using my index number of course
239:54 - on our board once again if you can think
239:57 - of something clever then please do i'm
239:59 - really lazy this was fine
240:01 - okay so we've got our winning arrays now
240:03 - let's actually use them in order to
240:05 - check our board if any of the players
240:07 - have a winning array
240:10 - so to do this um well again i'm just
240:13 - going to use a for loop so
240:15 - for this time let
240:18 - uh i we can use i we can use y like it's
240:22 - totally up to you whatever you want
240:25 - okay so as long as y
240:29 - i'm gonna get the winning arrays
240:31 - uh
240:32 - length
240:33 - it's gonna loop over
240:37 - but we're going to loop over each one of
240:39 - these right we're not looping over this
240:40 - this this this we're just looping over
240:42 - one two three each of these so however
240:46 - many of those are
240:47 - that's however many times we're going to
240:49 - loop and increment by one
240:53 - now
240:54 - um
240:55 - it's always i think it's always
240:56 - important to use const as much as
240:58 - possible we don't use a let this is
241:00 - blocked scoped
241:02 - so that's why i'm using a const we're
241:04 - gonna say for each time we loop we're
241:06 - gonna save square one square two square
241:08 - square three square four so i'm
241:10 - literally just gonna name it square one
241:14 - square
241:16 - for the square one we're gonna go into
241:17 - the squares array this time
241:20 - so it's const square one well let's just
241:22 - say we wanna get the index thirteen we
241:26 - need to go into our squares array and
241:28 - then i'm gonna literally pass through so
241:30 - i'm to go into the winning arrays and go
241:33 - into the so i'm going to loop over the
241:35 - first one
241:37 - so let's just say we're doing our first
241:39 - loop i'm going to grab this so i'm going
241:41 - into the winning arrays going into the
241:44 - array and i'm grabbing this and then i
241:46 - want to get the first item from it
241:49 - so i need to pass through a zero
241:52 - so that is how i would do that and
241:54 - whatever that is i'm saving a square
241:58 - one
242:00 - okay
242:01 - so i hope that makes sense i'll talk you
242:03 - through again we now need to get square
242:06 - two
242:07 - so what i would do
242:08 - is um of course we're checking on our
242:10 - squares grid so if i've just uh checked
242:15 - yeah this square on our board with index
242:17 - zero so for example
242:20 - let's go back to our board
242:23 - say i want to check this is what we're
242:24 - checking we're taking square with index
242:25 - zero one two three four so we're
242:28 - checking those
242:29 - so of course i would then need to go
242:32 - into my squares array
242:35 - i'm gonna go into it
242:38 - and then i'm just gonna pass through
242:40 - this value so i'm going i need to now
242:42 - get this value which is a one so i need
242:44 - to go into my winnings array this is an
242:46 - array
242:47 - so
242:49 - y still because we're still in the same
242:51 - one so whatever y is is going to be the
242:53 - same for this
242:54 - so winning arrays
242:59 - and then i need to get the
243:02 - item with index one so zero one so this
243:05 - will return all of this essentially is
243:07 - returning back
243:09 - one
243:10 - the number one
243:11 - okay so i'm going into the squares array
243:14 - i'm going into the squares with index
243:16 - one
243:17 - okay so hopefully you get that i'm just
243:20 - gonna carry on if you don't please feel
243:22 - free to reach out and i'm happy to
243:25 - explain
243:26 - further
243:28 - and one more of course because we need
243:30 - to check for four matches
243:32 - and there we go
243:34 - so we are looping we're grabbing all
243:36 - four squares that we want to check
243:40 - okay so now
243:42 - we want to check um
243:47 - check
243:48 - those
243:49 - squares
243:52 - to
243:54 - see if
243:56 - they all have the class
243:59 - of player
244:01 - 1 okay
244:03 - so
244:04 - if um
244:07 - i mean this is probably the easiest way
244:09 - to do it i'm gonna go if squares one i
244:12 - mean we could do another loop but
244:14 - there's only four so i don't think it's
244:15 - worth it but please feel free to do
244:17 - another loop if you wish i'm just going
244:19 - to go squares class
244:22 - if square if that first square that we
244:24 - picked out if it has a class
244:27 - that contains
244:29 - oh god contains
244:31 - a
244:32 - player one
244:37 - so if that is true
244:43 - and the second square contains play one
244:47 - how do i do this so it looks neat
244:51 - uh there you go
244:54 - and
244:55 - the third square contains the class of
244:58 - player one and
245:00 - the fourth square contains a class of
245:02 - player one and if all that is true
245:08 - well then
245:09 - we want to get our results that we
245:11 - picked out was it result
245:13 - oops
245:14 - don't want that i think it was result
245:18 - results
245:20 - okay
245:22 - you want to get a result and use inner
245:25 - html to say
245:28 - player one
245:31 - wins
245:33 - okay
245:34 - and of course i mean let's just copy
245:36 - this for
245:37 - player two
245:41 - just make sure that it's an if statement
245:44 - i'm just going to copy all of this
245:45 - actually so we have the pseudo coders as
245:48 - well
245:49 - oops
245:52 - okay
245:54 - i'm just going to use command d
245:59 - two
246:00 - player two wins
246:02 - okay
246:04 - i think that's all we need
246:08 - uh whoops we did this outside of our for
246:11 - loop
246:12 - so i'm just going to get all of this
246:21 - here's our
246:23 - function okay
246:25 - but then we need to actually put all of
246:26 - this
246:28 - inside
246:34 - okay
246:38 - i'm just gonna make sure
246:41 - if
246:43 - then this
246:45 - oops
246:48 - then otherwise this
246:55 - so that is our loop great
247:03 - i'm just gonna format this a little bit
247:05 - better so just go command
247:08 - so just tab it out
247:10 - and click save
247:12 - and there we
247:15 - go
247:16 - so now
247:17 - we play the game
247:20 - i just need to make sure we can only add
247:23 - players if
247:25 - that space is not currently taken
247:30 - okay now let's play
247:32 - so now
247:34 - we play the game
247:42 - and we get four so
247:44 - there we go three
247:46 - four
247:47 - tada
247:48 - we have now finished our game of connect
247:52 - four
247:53 - you will see that the game
247:56 - works
247:57 - okay
247:58 - so that is how i would build a game of
248:00 - connect four in a super simple way
248:03 - please do feel free to take this game
248:05 - make your own silent up
248:08 - give it next extra levels if you can
248:09 - think of a funky way to not have to
248:11 - write out all the winning arrays
248:14 - then please do let me no like i said i
248:17 - was pretty lazy with this and i just
248:18 - stuck them all in there because i
248:19 - thought you know like it's it's a small
248:21 - grid
248:23 - thanks so much again for watching and i
248:25 - do really want this to be a conversation
248:27 - so yeah please do uh show me your games
248:30 - okay
248:31 - nice
248:33 - later
248:35 - in this next section we are going to be
248:37 - building space invaders this game is a
248:40 - classic another retro classic in which
248:42 - you as the little guy right here have to
248:44 - shoot all the space invaders coming down
248:47 - before they get to you
248:48 - okay so a lot of timing events here it's
248:51 - a grid-based game so a lot of stuff that
248:53 - you would have already covered is going
248:54 - to come up a lot of modulus work and so
248:57 - on so these are the uh javascript
249:00 - methods and properties that you will be
249:02 - covering in this section
249:04 - let's do it
249:06 - okay so to start off
249:09 - i have actually already pre-made my
249:12 - files so the html file with some
249:15 - boilerplate i've named my project space
249:17 - invaders i have linked the style sheet
249:20 - to the style css file which currently
249:23 - has nothing in it and then i've also
249:26 - linked the javascript file to making
249:29 - sure that the path names are of course
249:31 - correct
249:33 - okay so that is my boilerplate done
249:35 - apart from that i have nothing else in
249:38 - here so this is where we're going to be
249:39 - starting off
249:41 - are we ready
249:42 - let's
249:44 - go
249:44 - okay so the first thing i'm actually
249:46 - going to do is in the body i'm going to
249:48 - make a div
249:49 - and i'm going to call it grid we'll give
249:51 - it the class name of grid so we can
249:53 - style it up so that we can see what we
249:56 - are working with and in the style sheet
249:59 - let's just make a grid
250:01 - now i'm gonna actually pre-decide that
250:03 - all my squares in here are gonna be 20
250:06 - pixels which means if there's 15 it's
250:09 - gonna be 300 pixels
250:11 - so width
250:15 - 300 pixels
250:16 - height
250:17 - 300 pixels
250:22 - and then i'm gonna give it a border
250:24 - solid
250:27 - black one pixel
250:29 - okay so just save that and now if i open
250:32 - this up so copy the path
250:35 - paste that okay there's our grid
250:38 - it's going to get the console log out
250:40 - too essentially all the magic is going
250:42 - to happen inside there and then we're
250:44 - also going to get these squares so i'm
250:46 - just going to
250:47 - perhaps make sure that every div inside
250:50 - the grid that's how i do it that's a
250:52 - class name and then in here each square
250:55 - is going to be what do we say 20 pixels
250:58 - 20 pixels height
251:01 - 20 pixels
251:02 - okay so that is looking good the other
251:05 - thing i need to do is make sure that
251:06 - when they go in here i'm going to use
251:08 - display flex i want them to wrap around
251:10 - each other so flex wrap
251:13 - wrap
251:15 - okay
251:16 - so now let's go to putting some divs
251:18 - inside the grid i'm going to use
251:20 - javascript to do that so to this i would
251:22 - have to get the grid so i'm going to go
251:25 - const
251:26 - grid equals and then get our document
251:30 - i can spell document
251:32 - click not create element but document
251:35 - uh query selector and we'll look for the
251:39 - class of grid so make sure that's a
251:42 - class and store that as our grid now i'm
251:44 - going to use a for loop
251:46 - let i equals zero to essentially put 225
251:52 - because 15 five times 225 squares in
251:55 - there so
251:56 - that's a for loop to do so
251:59 - and then for each time it loops what
252:01 - we're doing i need to make a square so
252:03 - const square equals document and this
252:06 - time i won't create element but i want
252:08 - to create a
252:09 - div
252:10 - and then i want to get the grid and i'm
252:13 - going to use the pen child to put the
252:15 - square i've just created
252:17 - inside my grid
252:20 - so that should work
252:22 - let's just check it out
252:24 - refresh
252:26 - elements so now if i look in here let's
252:30 - see
252:31 - you will see
252:32 - 225 divs have been created and put
252:35 - inside my grid let's carry on
252:37 - okay next up let's actually get the
252:39 - invaders so alien invaders
252:42 - and then i'm just going to make an array
252:45 - and then exactly and use the indexes to
252:47 - figure out which
252:49 - indexes i want to essentially put the
252:51 - aliens is
252:52 - and i'm going to make it
252:55 - three rows of them
252:57 - 17 18 19 20 21 22
253:01 - uh 22 23
253:04 - uh 24 so i think these indexes
253:09 - okay and then
253:10 - uh 0 15 30 because it's 15 by 15
253:14 - 23 33 34 35 26 37 38 39
253:20 - okay so that's looking fine those are
253:23 - the indexes i want my aliens to be in so
253:25 - now i actually need to get all these
253:27 - squares
253:28 - so i would do this i'm going to do this
253:30 - up here after i've put in all the
253:31 - squares cons squares
253:34 - equals document
253:36 - query selector but this time i'm going
253:39 - to use preset all to search for all the
253:42 - divs inside my grid
253:46 - and save them as squares
253:48 - and then i might as well just make use
253:50 - array from to make an array of this
253:54 - so now let's put my invaders actually in
253:57 - the uh squares themselves so i'm going
254:00 - to write a function for this function
254:02 - draw
254:04 - and then in here
254:06 - uh another for loop so four let
254:09 - i equals zero
254:12 - as long as i is smaller than the alien
254:15 - invaders
254:16 - length because we want to loop over all
254:18 - of the alien vedas increment i by
254:21 - oops i
254:23 - the increment i
254:24 - okay so
254:25 - over each of the aliens i need to go
254:28 - into my squares array i'm going to pass
254:31 - through the alien invaders
254:34 - i so i'm essentially going to pass
254:36 - through this this this this this each
254:37 - time
254:39 - and then
254:40 - i'm going to use class
254:42 - list
254:44 - add
254:46 - and i'm going to make
254:47 - an invader class
254:50 - so the invader class
254:52 - well
254:53 - invader
254:55 - um let's just get a background color
254:59 - of
255:00 - purple
255:02 - and then let's just make a circle so
255:04 - border radius
255:10 - 10 pixels because i'm going to be taking
255:12 - that and adding that to it so let's just
255:15 - see if this works i'm going to add the
255:17 - class of invader okay so now if i go
255:20 - draw
255:22 - just call that function
255:25 - okay great we've got all our invaders
255:28 - uh now let's get to drawing our shooter
255:32 - so once again i'm going to go into the
255:33 - squares array i'm going to pass through
255:36 - a random number so let's just say 200
255:40 - class list
255:43 - add
255:44 - shooter
255:46 - once again i'm just going to copy that
255:50 - and just write shooter
255:53 - and make this red let's make a square
255:55 - though
255:56 - uh and then go here and refresh so 200
256:00 - maybe we want to add two more
256:02 - so
256:04 - to make it more central so i'm just
256:06 - going to put
256:07 - current
256:09 - current invader
256:13 - shooter index
256:15 - shooter index
256:17 - and then i'm going to save the number
256:19 - 202 to this
256:22 - let current invade into 202
256:25 - so now
256:27 - this should be in in square index 202
256:29 - great this is looking good so we've
256:31 - drawn all of them i think the next thing
256:32 - we should do is actually get some stuff
256:35 - moving so let's actually uh start moving
256:39 - the
256:39 - shooter
256:41 - so
256:43 - function
256:46 - function move
256:48 - shooter
256:51 - okay so for this i'm going to be using
256:54 - keys on my keyboard so i'm going to pass
256:56 - through an event the first thing i want
256:58 - to do is actually remove the shooter so
257:00 - we've got drawer shoes no we don't okay
257:03 - i'm just going to remove the shooter
257:07 - so from wherever he is we want to remove
257:09 - the shooter wherever he is on the board
257:12 - and then i'm going to use a switch to
257:15 - essentially switch out the key
257:17 - that i am pressing
257:19 - so this is a switch statement and the
257:21 - first case is going to be arrow left
257:25 - just for our left correctly that's the
257:28 - first case
257:31 - if current shooter index
257:34 - is modulus width
257:36 - so we're just checking if
257:38 - it is
257:40 - uh
257:41 - not equal to zero so as long as the
257:44 - shooter is not on um to if this if it's
257:47 - divisible by factor 15 and leaves no
257:49 - remainder we know we're at the right
257:51 - edge
257:52 - right hand edge okay so as long as it's
257:54 - not zero then we can move our current
258:04 - shooter um
258:10 - uh one to the left
258:12 - okay because it's minus one and the
258:14 - array which is going backwards one and
258:16 - then we break
258:18 - and then we need another one so this
258:20 - times case for arrow
258:22 - right
258:24 - okay
258:24 - so if this time let's get the current
258:27 - shooter index and this time if it's
258:29 - modulus width
258:32 - and that is smaller than 14 or like in
258:34 - the first case 14
258:36 - um so essentially this time we are
258:38 - checking if
258:40 - it is as long as it's not in the
258:43 - right hand side then our current shooter
258:46 - index can move right so we're
258:49 - essentially just adding one
258:51 - to it so hopefully that makes sense uh
258:55 - and then we break out of it
258:58 - and then we need to redraw the shooter
258:59 - in its new position so outside of the
259:02 - switch case i'm just going to add him
259:04 - again
259:06 - okay so that should work i'm going to
259:08 - link this up to an event listener to
259:10 - listen out
259:11 - for not clicks but each time you press
259:14 - our key down on the keyboard and then we
259:17 - want to call the function move shooter
259:19 - so let's test that out
259:22 - okay so pressing left
259:24 - and that is not working width is not
259:26 - defined right we didn't define width or
259:29 - silly of us let width of the grid be 15.
259:35 - okay so now it's going to move and it's
259:37 - going to stop because it hits the edge
259:39 - movement is going right right right and
259:41 - then it stops okay so that works let's
259:43 - carry on now we need to move the
259:45 - invaders
259:46 - so
259:48 - function move invaders
259:54 - so now actually
259:56 - that worked for here we define the right
259:59 - sorry the left edge and we defined the
260:01 - right edge i'm actually going to define
260:03 - and store it now so left edge
260:06 - equals
260:07 - and this time i'm going to go into our
260:08 - alien invaders array that we made and if
260:11 - the first of the alien invaders
260:14 - is
260:14 - modulus width and that deeply equals
260:17 - zero
260:18 - okay so that's how we know we're on the
260:20 - left edge because we're in the left
260:23 - column because all these values uh
260:25 - modulus will give you a remainder of
260:27 - zero so
260:30 - there we go sorry of course i'm rushing
260:32 - this because it's a speed thing but i
260:35 - definitely do look into modulus if you
260:37 - don't know much about it
260:38 - i do a bit of it in my course so once
260:41 - again let's check the right edge and to
260:42 - do this i would get the alien invaders
260:46 - length so i'm passing through
260:50 - essentially whatever the alien length is
260:52 - minus one because we're working from
260:54 - zero we're pushing it through the
260:56 - array and if the very last invader
261:01 - is in a column where modulus width
261:05 - minus one then we know we're on the
261:07 - right edge so essentially we're just
261:08 - sort of rewriting these two in a
261:11 - different way so we've just defined our
261:13 - left edge and our right edge
261:16 - once again we're going to have to remove
261:17 - the invaders so actually we've got a
261:20 - draw invader here i'm gonna make a
261:22 - remove invader too by copying that and
261:25 - pasting
261:27 - that
261:28 - and i'll call it remove
261:33 - uh remove
261:35 - okay so i'm going to remove the invader
261:36 - the function is called remove so i'm
261:38 - just literally going to write remove the
261:40 - invader first until
261:42 - we can do our logic
261:44 - so
261:46 - this time well let's just get maybe
261:47 - focus on
261:49 - the
261:51 - aliens just moving in general
261:54 - so
261:55 - i'm gonna do this by
261:58 - okay so for let i equal
262:02 - zero so i need to loop over each invader
262:05 - and assign it a different position right
262:08 - so alien invaders length
262:10 - so we're doing it for each
262:12 - alien invader in our array
262:15 - i uh
262:17 - okay
262:18 - now we're gonna get the alien invaders
262:21 - oops
262:24 - pass through an eyes because we need to
262:27 - have each one and just add a one
262:31 - to it
262:32 - okay
262:33 - and then i'm gonna just draw the invader
262:36 - so now let's put this on a set interval
262:40 - so i would sort of do it uh like this
262:44 - set
262:45 - into file and then i'm going to put move
262:48 - in
262:49 - faders and let's do it every 500
262:51 - milliseconds
262:52 - so let's see if that works refresh
262:56 - okay
262:57 - so great they're moving but they're
262:58 - obviously just moving one way
263:01 - um and they're going through everything
263:03 - so that's not great i'm gonna swap this
263:05 - out to be direction
263:08 - okay and i'm just gonna put
263:10 - let direction for now it's a positive
263:14 - one
263:14 - but if we change it to minus one it will
263:16 - go the other way so that's something
263:19 - that we need some logic we need to do
263:20 - and i'm gonna put this on a
263:23 - id so we can clear it
263:25 - invaders id
263:28 - yet
263:29 - invaders id so i'm not that's just null
263:33 - for the moment
263:35 - okay so we've got that so far
263:37 - uh the next thing that i would like to
263:40 - do is actually do some logic
263:42 - so i'm going to do that above here
263:45 - if
263:48 - okay so let's do for if if it's at the
263:51 - right edge first so if right edge is
263:53 - true if one our last invader is in the
263:55 - right edge
263:56 - okay
263:57 - well
263:58 - then
264:00 - we need to
264:02 - essentially make all of them go down so
264:04 - i'm gonna write a for loop again
264:06 - for let's
264:08 - i equals zero and just make it go down
264:11 - and change direction so i
264:14 - and invaders length
264:18 - uh and then i plus plus
264:20 - so i'm going to loop over that
264:22 - and once again i'm just gonna get the
264:24 - alien invaders and for each alien
264:27 - invasion i need to essentially just add
264:30 - a whole width to it so add 15 to
264:32 - whatever indexes there are i'm gonna add
264:34 - a width and but then minus one
264:37 - so what's this
264:40 - so i'm moving them down and i need to
264:42 - change the direction so now direction is
264:43 - gonna be minus one
264:46 - so
264:47 - okay let's see if that works
264:52 - all right and we're in the right edge
264:54 - and then it goes down
264:56 - okay so it's going down
264:58 - and it's changing direction
265:00 - cool
265:01 - okay
265:03 - um
265:04 - mean it's changing in the weirdest
265:06 - direction because it's going
265:09 - there so we don't want it to go there
265:11 - um
265:13 - plus one
265:19 - cool oh no
265:21 - why is that doing that
265:26 - direction minus one
265:28 - huh
265:33 - ah because we're still on the right edge
265:35 - okay
265:39 - hmm
265:41 - okay well let's make another let's if
265:44 - it's in the right edge and it's
265:45 - currently going
265:48 - right
265:50 - so let's put
265:52 - let's going right equals true as it
265:55 - always starts off going right so if it
265:58 - is going right
265:59 - then
266:00 - add the width change the direction but
266:02 - immediately put going right as
266:05 - false
266:10 - okay so there and then grabs false so it
266:13 - goes the other way okay great so now
266:15 - that we've got that let's do for if
266:18 - uh is that the left edge
266:20 - and
266:22 - it's not going right because it's going
266:25 - left
266:26 - uh once again let's get a full loop for
266:28 - let i equals zero
266:31 - and then i is smaller than alien
266:34 - invaders
266:35 - length
266:38 - i plus plus so just a for loop
266:40 - uh so we can go over every invader so
266:43 - we're going to go into each invader and
266:45 - for each invader
266:47 - or invader index specifically if it hits
266:50 - the left i also want to add to its width
266:55 - but this time well let's just see if
266:56 - what that looks like and then i need to
266:58 - change the direction this time v1 and
267:01 - going right
267:03 - to true as i need to change the
267:04 - direction so let's see what that looks
267:05 - like i have a feeling i know it's going
267:08 - to go down in the wrong place so go down
267:10 - go left come on come on come on
267:12 - yeah okay so let's actually make it go
267:15 - back one
267:17 - it was right to do that
267:19 - and i'm pretty confident that so let's
267:20 - carry on so that is good
267:23 - with accounting first should go all the
267:26 - way down
267:28 - uh i think the next thing we need to
267:29 - account for
267:31 - is if
267:32 - it hits
267:34 - the invader
267:36 - so down here
267:39 - squares
267:41 - and the current shooter index
267:44 - class
267:45 - list
267:47 - contains
267:49 - and if it contains invader
267:51 - and shooter
267:54 - so if whatever square we're in contains
267:56 - both of those
267:58 - then
268:00 - let's just
268:02 - console.log for now
268:06 - game over
268:09 - and then we would need to clear
268:11 - interval
268:13 - invader
268:14 - id whatever i called it
268:17 - come on
268:19 - invaders id
268:24 - okay
268:25 - so now if we go all the way to the
268:26 - bottom i mean i don't have time for this
268:28 - is rush so i'm just gonna put this to a
268:30 - hundred
268:31 - um
268:32 - so there we go and i should get a
268:34 - console log same game over as soon as we
268:36 - hit here because both will be in the
268:38 - same square
268:39 - yes game over great cool and everything
268:41 - stops brilliant so that is looking good
268:44 - so instead of this i'm actually gonna
268:46 - get a results display in html
268:51 - equals
268:53 - game
268:54 - over
268:56 - now i actually need to define what is a
268:59 - results display so const result display
269:02 - equals document
269:04 - query selector and i'm going to search
269:07 - for
269:08 - something with results
269:10 - or a class with results i could do an id
269:12 - that is totally up to me it really
269:15 - doesn't matter so i'm just going to go
269:17 - class
269:18 - results so you can style it up later and
269:21 - i'm just going to default it to
269:23 - one
269:24 - zero sorry
269:26 - okay
269:27 - so that
269:30 - is fine
269:32 - we've got our game over
269:34 - um the next thing that we want to do
269:37 - is
269:40 - uh i guess if we hit that but what if we
269:43 - just go to the bottom right so this time
269:46 - if
269:48 - actually no we don't want to do that
269:49 - let's do another for loop for this for
269:52 - let
269:53 - i equals zero
269:56 - as long as i is smaller than the alien
269:58 - invader's length
270:01 - we want to get i and add
270:03 - increment i
270:06 - okay now if
270:07 - alien
270:08 - invaders i
270:12 - if it's larger than the square's length
270:18 - we get
270:20 - well we can just use this again so let's
270:23 - see if that works
270:26 - um i'm just gonna get rid of the shooter
270:28 - for now
270:30 - let's just see if that works if it hits
270:31 - the bottom
270:32 - so
270:33 - see if we get a game over
270:39 - and game over oh okay we get a game over
270:41 - there why is that
270:44 - um
270:46 - is larger than the square's length
270:48 - plus width
270:55 - so let's try again
271:01 - huh
271:15 - put that
271:17 - like so
271:27 - ah it's because
271:46 - um what is happening here let's inspect
271:49 - it
271:53 - data invader invader
272:09 - plus let's just go 100
272:18 - see what happens
272:34 - okay we'll come back to this maybe it's
272:36 - fine that we keep it like this and we'll
272:38 - just change
272:39 - something's obviously happened but i'm
272:41 - fine with this for now
272:44 - we can do some changing
272:48 - on okay so we get a game over if it gets
272:51 - around there and then we do clear
272:54 - into
272:56 - file
273:01 - invaders id
273:02 - okay so we've got it getting a game over
273:05 - when we hit
273:06 - roughly the bottom i don't know what is
273:09 - happening here let's just go console
273:11 - log
273:12 - squares length
273:17 - just gonna
273:20 - be like that
273:23 - and then
273:27 - see what that actually comes up with
273:31 - if
273:34 - okay let's move that actually up here
273:36 - because we need to know what it is
273:42 - two to five okay
273:44 - and then
273:46 - here i'm just gonna console log
273:52 - alien
273:54 - invaders
273:56 - i
274:06 - see what number it goes up to
274:10 - there's a 209
274:25 - i'm just gonna console the other one out
274:28 - just maybe it's something to do with the
274:29 - space invader and the current index
274:33 - ah it is okay fine so that is actually
274:36 - because it's my fault even though we got
274:38 - we got rid of um
274:41 - uh the styling for the shooter uh
274:45 - the we still have the current shooter
274:47 - index there so if it contains these do
274:50 - we get a game over and that's why it was
274:51 - stopping it so this actually works it's
274:53 - fine let's carry on that's my fault i
274:56 - didn't realize that uh this was
274:58 - affecting what was happening and it
275:01 - wasn't anything to do with this funk
275:02 - this poorly at all so that is fine we
275:05 - finished that we get a game over for if
275:07 - we hit
275:08 - the
275:09 - um
275:10 - shooter and we get a game over
275:14 - um if we hit the bottom of the grid
275:18 - okay so that is looking good let's go on
275:21 - to our next part our next part is going
275:24 - to be all about shooting the aliens so
275:28 - i'm just going to move that up there
275:30 - and write a function called shoot
275:36 - okay
275:36 - so for this i need a laser id just like
275:39 - we have the ids for other ones we need a
275:42 - laser id now
275:43 - and then let current laser index
275:47 - so wherever
275:48 - look current
275:50 - laser
275:52 - index so wherever the current shooter is
275:57 - on our board that is where our laser is
275:59 - going to start from
276:01 - okay now we need to move the laser from
276:03 - the shooter to the alien invader okay so
276:06 - once again i'm gonna write a function
276:07 - function move laser
276:12 - uh
276:13 - now i'm gonna go in so once again i need
276:15 - to remove the laser from wherever it is
276:17 - i'm going to use the current laser index
276:24 - to remove i know we haven't added it
276:26 - anywhere yet but we always need to
276:28 - remove something before we draw it in a
276:30 - new location so remove laser and then
276:33 - we're going to get the current laser
276:35 - index and we're simply going to move it
276:38 - up a whole width okay so we're going to
276:39 - minus 15 from it
276:41 - and then we're going to redraw our laser
276:44 - so that's it
276:45 - really
276:47 - add laser
276:49 - and then what's our laser gonna look
276:51 - like well i think our laser
276:53 - is just gonna be let's just make it a
276:56 - orange square
276:58 - so orange
277:02 - okay
277:03 - so that is our move laser function
277:06 - however
277:07 - we need to actually uh
277:11 - hook some timing events onto this
277:15 - so i'm actually gonna put this
277:22 - [Music]
277:25 - so that's gonna move our laser
277:30 - now let's put this maybe on a
277:34 - event listener so
277:38 - document add
277:40 - event listener and if i press
277:44 - key up
277:46 - i'm going to shoot
277:48 - you can have key down whatever it
277:50 - doesn't really matter as soon as you
277:51 - press the key down it's going to shoot
277:54 - but we only wanted to shoot so once
277:55 - again i'm going to do
277:57 - a switch case for this
278:00 - e key
278:04 - and if we press i don't know arrow
278:08 - up
278:11 - let's do arrow up sure
278:13 - so if we press that
278:15 - laser id i'm going to actually
278:18 - put
278:19 - this on an interval i'm going to move
278:22 - the laser
278:23 - so this function
278:26 - 100 milliseconds
278:28 - so
278:31 - why isn't this
278:33 - move laser oh that's because it
278:35 - shouldn't be in here
278:42 - let's be here
278:44 - outside of this function because that
278:45 - wouldn't make any sense
278:47 - we need to call the function but it's
278:49 - still inside this function so let's
278:51 - get to doing that now if i press key up
278:54 - there we go
278:56 - there you go there we go there we go
278:58 - there we go
278:59 - nice
279:01 - now let's get to adding some
279:04 - what is why is it not liking this cannot
279:06 - really procrastinate find line 98
279:09 - 98
279:11 - remove laser okay well it seems to be
279:13 - working for now um i'm sure i will fix
279:16 - that when it comes to it so now let's um
279:20 - think of collisions and what happens
279:21 - when we actually interact uh with
279:24 - stuff right so if the laser is in the
279:26 - same square as an alien
279:29 - so if
279:31 - squares
279:33 - current laser index this time
279:36 - class
279:38 - list
279:42 - contains an invader
279:46 - so if it's in the same square as an
279:48 - invader
279:50 - well
279:51 - then we need to remove the laser for
279:54 - wherever it is
279:56 - we also need to remove the invader
279:59 - from that square and we also need to
280:03 - um
280:04 - let's add a boom add
280:07 - boom okay so we're using the current
280:09 - laser index whatever square we're in we
280:11 - need to remove the laser we need to
280:13 - remove the invader and we need to add a
280:15 - boom
280:16 - and what should our boom be i'm
280:18 - literally just going to make a square
280:20 - boom
280:21 - uh i actually think this should be red
280:23 - so let's make it red
280:26 - and let's make this one
280:28 - oh my i know now running out colors
280:31 - green
280:33 - okay so hopefully that
280:36 - works
280:38 - if i
280:42 - it's sort of not really removing
280:44 - anything
280:45 - okay let's see why not
280:51 - ah that's why
280:53 - squares
280:55 - let me spot
280:56 - squares and shoot
280:59 - okay cool i'm getting booms
281:02 - nice
281:07 - if we hit it we get booms
281:09 - okay let's carry on
281:17 - ah so this is giving us errors because
281:19 - we actually have nothing to remove but
281:21 - for the next time
281:22 - uh there will be so i'm just gonna just
281:24 - gonna keep that there even though it's
281:25 - giving us errors
281:27 - um okay so
281:30 - next
281:31 - up
281:32 - we actually want so once we do get a
281:35 - boom we want it to disappear after some
281:37 - time so i'm going to use a set time out
281:40 - for this
281:42 - and essentially write a function in here
281:46 - that will
281:47 - uh so our function is going to be
281:49 - squares
281:50 - current
281:52 - laser index
281:54 - class list
281:57 - i want to remove the boom after
282:00 - let's say
282:02 - 300 milliseconds
282:04 - okay so now the boom is going to
282:06 - disappear after 300 milliseconds
282:19 - and
282:22 - so it's disappearing
282:24 - not very well though
282:29 - okay and then i'm going to clear
282:31 - interval
282:33 - laser
282:35 - id so i'm going to stop
282:40 - to see if that works
282:43 - okay
282:46 - okay so now the laser is disappearing
282:48 - and i a much better way because i'm
282:50 - stopping the laser id from running okay
282:52 - hit something and it disappears rather
282:54 - than carrying on so that's good
282:56 - um i mean it's still not getting rid i
282:59 - mean it's getting rid of the invader but
283:01 - it's being redrawn so we need to
283:03 - actually
283:04 - take care of that
283:07 - okay
283:08 - so let's actually get rid of the invader
283:10 - from our array so it doesn't get redrawn
283:13 - const um
283:16 - alien removal
283:18 - because let's get the alien in vader's
283:22 - array and then i'm going to use
283:24 - javascript method called index of to
283:26 - pass through the
283:28 - laser index so the square where all the
283:30 - collisions happens okay whatever square
283:32 - that is the alien's gonna be
283:35 - um
283:36 - whatever square that is the alien's
283:37 - gonna be removed from the aliens array
283:39 - based on that
283:40 - so cons alien removal i'm gonna get the
283:44 - alien uh invaders
283:49 - uh
283:50 - alien
283:52 - okay so we need to actually
283:57 - let's make
283:58 - a array
284:01 - an empty array where we're going to
284:02 - literally collect all the aliens that we
284:05 - have
284:06 - removed
284:08 - i think that should work because we need
284:10 - to be collecting them so um
284:12 - aliens
284:14 - removed
284:18 - equals
284:19 - so let's actually do that up here let
284:21 - aliens
284:25 - removed
284:26 - and for now it's going to be an empty
284:28 - array because we haven't removed any
284:30 - and now
284:32 - i'm going to actually get
284:34 - so i'm going to get that array and i'm
284:36 - going to push
284:37 - the alien
284:40 - moved i'm just going to go alien removed
284:44 - because it's singular and i'm putting it
284:45 - into the aliens removed array
284:49 - um okay so hopefully
284:52 - that should work we're going to remove
284:55 - it from
284:57 - the array and i want to store it
285:29 - okay so let's have a think about this
285:31 - i'm gonna be storing all
285:33 - the aliens removed so for console
285:36 - log aliens
285:39 - removed
285:44 - if i shoot
285:46 - okay
285:47 - okay cool
285:48 - i'm removing all of them obviously i'm
285:50 - removing 24 each time
285:52 - because
285:54 - i keep removing it because it hasn't
285:55 - actually been removed so this time i'm
285:58 - going to get this alien
285:59 - aliens removed and this time let's get
286:01 - our draw function
286:04 - right
286:05 - now
286:06 - let's have a think about this
286:09 - where is the nitro function
286:12 - here okay so before i draw it out i
286:14 - actually need to check
286:16 - so if
286:19 - the alien invades removed
286:22 - and does not include
286:25 - i so whatever moving over so if i shot
286:28 - uh
286:29 - 24 index 24 and that's included in here
286:33 - that i don't want to draw it
286:35 - um
286:43 - so i'm just going to talk through this
286:45 - again
286:46 - so
286:47 - if the
286:49 - if whatever number i'm passing it
286:50 - through here so say it was a 24 and if
286:52 - that is not included in my aliens that
286:55 - have been removed i can draw i can add
286:58 - the class of invader okay so that should
287:01 - hopefully fix the issue so now if i
287:04 - shoot
287:05 - great
287:06 - okay now if i shoot it they're being
287:07 - removed
287:10 - cool
287:11 - now let's move on the next thing i need
287:14 - to do
287:15 - is simply
287:17 - check for a win so a win will be easy
287:20 - essentially if where should we do this
287:27 - let's do it in here
287:28 - um and then i can just simply go if
287:32 - and i'm just going to use the aliens
287:34 - removed array length to do this so if
287:39 - alien
287:42 - aliens removed
287:45 - length
287:46 - deeply equals the invaders alien
287:51 - invaders length well then we know
287:55 - that we have
287:57 - one
287:58 - so i'm just gonna put
288:01 - you in
288:03 - and then
288:04 - clear interval
288:06 - uh invaders
288:09 - id
288:10 - okay so that should do it um i guess we
288:12 - sort of need to add a score too so each
288:15 - time we remove an alien i'm gonna put
288:17 - results plus plus
288:20 - and then
288:22 - let results i'm gonna start with zero
288:26 - and add a score and then we're gonna
288:28 - also display so we're gonna add one to
288:31 - the result if we move one i'm gonna get
288:33 - the result
288:35 - display
288:36 - in our html
288:39 - want to put results
288:42 - okay so let's check that out
288:46 - okay so we're getting scores
288:49 - and then hopefully i can kill them all
288:50 - before they get to me but i doubt it
288:52 - okay let's i'm gonna uh maybe slow it
288:55 - down a little bit so we can
288:57 - play it normally
288:59 - and then let's see
289:05 - okay if i do this the game is over and
289:07 - we have won and we have finished the
289:08 - game as long as it says you win then i
289:11 - am happy
289:13 - come on
289:15 - i'm not very good at playing this
289:16 - clearly it's going to stick around here
289:18 - to do it
289:23 - oh
289:27 - and once more
289:28 - come on okay i can do this
289:31 - come on
289:42 - for the win here
289:50 - ah
289:52 - oh
289:53 - oh my god okay well i'm pretty confident
289:56 - that we have one let's just slow it down
289:58 - even more maybe uh i'm gonna really slow
290:01 - it down because i just want to get these
290:03 - done now um
290:05 - i want to show you that we have
290:06 - completed the game essentially
290:08 - and that we can stop the timer okay so
290:11 - if you're going to try competing against
290:12 - me um we need to see that you win as
290:15 - well otherwise how do we know that this
290:16 - game is finished we don't i mean there
290:19 - could be a bug that i haven't uh
290:21 - identified yet so as long as i get these
290:23 - all
290:25 - off
290:27 - if you want to add levels this is a
290:28 - great way to add levels uh just yes and
290:30 - we did it done i have finished the game
290:33 - i finished space invaders
290:35 - finished whoo
290:37 - okay
290:39 - hopefully you can beat my time if you
290:42 - want to have a go at doing this yourself
290:44 - speed coding space invaders okay super
290:48 - simple there's your game go forth go
290:50 - share it please do tweet your uh
290:53 - finished games too only to me on twitter
290:56 - i would absolutely love it to see
290:59 - what you have built are you have taken
291:00 - your game to that next extra level and
291:02 - of course if you want to try beat me on
291:04 - the speed coding then please do that too
291:07 - okay
291:08 - thanks so much uh again and i will see
291:10 - you soon
291:12 - and congratulations you did it you've
291:14 - finished building your games once again
291:17 - please do share them with us on twitter
291:20 - i'd love to see what you've made please
291:22 - tag us please tag your solutions save
291:24 - them in codepen save them on github
291:26 - perhaps deploy them and i can't wait to
291:28 - see them

Cleaned transcript:

hey everyone and welcome to this tutorial on learning javascript through making seven classic games my name is annie cuba and i'm a software developer and course creator on youtube in this course i'll be teaching you how to use javascript methods and properties in order to build seven games in order of difficulty this will be rock paper scissors memory game whackamole 2d breakout frogger connect 4 and space invaders if you are new to javascript please make sure to do the gives an order as once i cover a method of property it is unlikely that i will go into much detail on it again by the end of this course you will have used all of these javascript methods and properties now who is this course for this course is for anyone who has covered the fundamentals of javascript in theory and would like to use it in practice so in other words if you are familiar with what a function is a variable is what loops look like and so on this is the course for you however if you have never touched javascript before and would like to have a go anyway please do give it a go and see how you get on i will be taking things super slow and explaining as much as i can along the way now it is important to stress that these games are just to learn javascript and will be the bare bones of the game this means that i will be giving you the most basic level of code for the game to work i'm doing this for two reasons reason one being that it would be too much to build a game with all the real features of the official games as well as tests for them and reason two is that i want to give you the opportunity to take the game build on top of them add features add levels style them up and truly make them your own now some of you might have already seen this video before this is an updated version that takes things much slower with a more beginner approach so i hope you enjoy it next up we are going to be making a game of rock paper scissors in this game i will be showing you how to make a game that checks for a win lose or draw against a computer that randomly selects either rock paper or scissors if you pick rock against scissors you win but against paper it will lose if you pick scissors and the computer chooses rock you lose but will win against paper and if you pick paper well you guessed it you will lose against scissors but win against rock if you choose the same answers of computer it is a draw by the end of this tutorial you have used all of these following javascript methods and properties okay so let's get to it with our first example now this approach as i mentioned is gonna be a little bit more beginner friendly i think um we really sort of take stuff step by step and we don't use switch statements we use if else or if statements as well as just use numbers more than anything as well as html rather than just purely javascript so hopefully you enjoyed this tutorial and hopefully you watch the other two as well to show me which one you prefer better so yeah definitely let me know that uh let's go so first off here is my project as mentioned there will be no styling in this so i simply have an index html file and then i have linked my app.js file to my index html so because my app.js file is in the root of my project all i have to do is simply name the file obviously it's a javascript file because of the js extension we are telling our code editor to treat this as a javascript file so make sure that the script tag is at the end of your body so there we go all the code that we're going to all the html code that we write is going to have to be above this script tag now we could have used a dom content loader in the app.js file so i do that in a lot of my videos too so that is just another way that you can work so you can put the script tag at the bottom or you can use the dom content loaded event listener the choice is up to you okay so the first thing that i'm going to do like i said i am going to be working with html and css in this video is i'm just going to put some h2 tags so this is my first h2 tag and i'm just going to put compute computer computer choice i've got our computer choice and in it i'm going to have a span to sort of break up that h2 tag in which i'm just going to have an id of computer choice because we're going to want to pick that out to work within our javascript file later so we have the computer choice i'm also going to have user choice so let's put user choice you can have your choice if you want it's it's up to you and then finally let's also have a result so i'm just going to have results like so and give it the id of you guessed it results so we can pick it out to work with it in our javascript file later now along with that i'm just going to have a button um let's put rock in it and then just give it the id of rock like so again so we can pick it out in our javascript um and then let's have i'm using command d by the way to select that and i'm going to put paper once again command d so i can select both and scissors scissors scissors there we go so there we go now if i open this up i'm going to copy the path and simply go to my browser this is what you should now see in your browser so i'm just going to get the inspect up as well great now the next thing i want to do is do some logics so that if i click on rock rock will show up here and at the same time a computer choice will be generated and then we can figure out who's won or lost so for this i'm now going to have to go to my javascript file so in here the first thing i'm going to do is actually pick out all the uh elements with these ids so i'm picking out essentially the span and i'm doing it by the id so i'm going to use document get element by id i could use query selector i'll show you how to do that in another lesson but i'm simply just going to pick out computer choice like this and i'm going to store it as const computer choice so we can work with that element in our javascript let's do the same for user choice so once again i'm simply picking out this span based by the id so that's what i'm doing and let's save this as user choice and let's do the same for the result of course so i'm actually just going to copy this um let's call this result display and then pick it out by the id of result because that's what this is it's an id of result great so we've done that the next thing i want to do is actually get all the possible choices so there's many ways i can do it um this is the way that i'm going to show you for this tutorial uh const possible choices and i'm actually going to use a query selector to get all of them so document query selector all and i'm going to pick out everything in here that is a button element okay one thing i could have done is given this as a class name of button and if i gave that same class name to all of these i could pick it out by class name but as i only have three buttons here and i don't plan on putting any more buttons here okay so keep that in mind when you're styling it up if you want to add more buttons in here perhaps use the class name on those buttons otherwise this is going to pick up that button that you create so const possible choices i picked out all the buttons so i can use them now i'm going to grab the buttons possible choices and for each button or i can call it a possible choice whatever you want plus possible choice i want to i'm just going to minimize this because we don't really need that for each possible choice i'm going to grab each possible choice and use add event listener to listen up for a click so if i click any of the buttons i want essentially something to happen okay so i want this fi we can pass through a function i'm literally just going to pass through a function like so and then what i want to happen is well i want to pass through the event so e for event and then i want to actually get the target id so whatever i click i want to get the id and i want to save that as um the user choice but i want to save it globally okay so i'm just going to put let user choice so we can access it wherever so whatever etag the e target id is i'm saving it to use a choice i'm just going to save it here so i can use it in my file so that is what i am storing so the next thing i could do is actually get the user choice maybe we should rename this because user choice display because we now have two user choice that can't have that display so now i'm going to get the user choice display and using the property of inner html html and once again just going to assign it the user choice okay so let's see if that works click scissors click paper click rock nice let's carry on um i'm just gonna actually put a space there oops not there what am i doing you computer choice space space result space okay so we are displaying the user choice the next thing that i said i want to do is generate a computer choice so let's write a function that's called generate computer um okay what's that function gonna look like generate computer choice so what i actually want to happen here is i want to get a random number right so uh i can use const random number and then i'm going to use math random and then multiply it by i can use the number three sure um if that's what i want i can also use possible choices length okay so that is the same as just simply putting the number three but for beginners i'll just keep it as three for now um again like maybe i'll just put or you can use possible choices length as that will return a three um okay so now that we've got a random number i actually need to wrap this in mouth floor to round down that random number because that'll give me a random number okay uh and then we want to make sure that it's a full integer let's check that random number so that will give me a random number that's actually from zero to two as we count in indexes so i could just get this and add one just for readability if i wanted to so now let's check this one three two two so it'll always be either one or two or a three right so there we go um so now if random number deeply equals one let's say that computer choice uh equals rock i'm just making that up it could be scissors let's computer choice and then if random number equals 2 say scissors and random number equals three let's say paper okay so and then let's actually uh get the computer choice so computer choice display inner html and just show the computer choice so now there we go great cool okay so we're randomly generating computer choice and rather regenerating a choice for us um as i said i've done it this way as i think it's beginner friendly however there is a much neater way we could do all of this that wouldn't involve saying equals one equals two equals three which i'm really excited to show you but i think as a beginner this probably might make a lot more sense and it's more readable but you know let me know okay so now that we've done that let's actually get the result so i'm gonna write another function function get result now if computer choice deeply equals or equals up to you um user choice well then uh return we'll get the results so let result and then we will say it's a draw however oops so that is one now if computer choice this time equals um rock oops and user choice equals let's say paper then who wins then you lost right computer rock paper yeah fine now now we have rock and scissors well then you lost again and then we have uh actually no you win you win here computer is rock but your paper you win i should really learn how to play rock paper scissors computer has rock but you have scissors you lose if computer has um paper and you have scissors you win if computer has paper but you have rock you lose um what else is there if computer has scissors and you have rock you win and then a computer has scissors but you have paper excuses paper you lose i think that's right oh my god okay cool so now that we've got the result get result we've got the function get result i'm just going to put it in here too so great every time we click we do all of this essentially now i could move this function out if i wanted to or i could just keep it there the choice is totally up to you so now let's have a go scissors the computer choose paper oh wait the results aren't showing ah we didn't do inner in our um let's get the result display in the html result cool so paper oh you lose scissors i chose as a computer choose rock so i lost i chose raw computer tools scissors i win cool it's a draw amazing so that is how i would show you how to make rock paper scissors as a beginner as i mentioned please take this go wild and proven as you wish um i did do it so it's quite verbose and it's quite easy to read uh and of course i did these random numbers here because i just thought again it was more readable for a beginner so if you are a beginner let me know what you think is this clear enough for you uh i'm going to move on so once again no styling of course let's do it in this section we are going to look at memory game memory game is a game where you as the player have to match two cards on a board until none are left we are going to be building out our board game with the use of these following javascript methods and properties by the end of this tutorial you will have a game that looks like this okay so once again basic styling so you can take the game style it up and make it your very own okay so the first thing that we are going to do is start off our project i'm using webstorm which is an ide that i'm going to use in order to start my project of course feel free to use vs code or whatever code editor you wish so in webstorm i'm just going to create a new project so go ahead and click here it's going to be an empty project which i am going to choose to call memory game just like so and click create and great so once my directory has been made i'm just going to add some files to it so i'm going to create a new html file and let's just call it index.html so there we go index.html and i'm also going to create a css file for all our css so a new styles.css file or i could just choose css just click on that and of course a javascript file this is a javascript tutorial so here we go i'm just going to call it app.js just like so so there we go there we have our three files i'm going to start off with the html so let's first off give this a title this is just some boilerplate code that has been generated for me by webstorm if you don't have this generator then please pause here and just copy all this out there we go that's a little bit bigger for you now we're going to have to give this a title this is not going to go show up in our browser this is actually going to show up in the tab of our browser so memory game once again this will not be visible hopefully you should know about by now if you code html but for those of you who need a refresher this will be i'll just show you now let's go ahead and open this up and there we go memory game so i used a shortcut that webstorm offers me which is just to click here which will open up in chrome but if you don't just go ahead and copy the path for this file the index.html file and just simply paste it in the browser like so okay both ways will work so i'm just going to inspect the page to show you what we're going to be using to debug we're going to be using the console log to debug and then we can also use this tab to see what elements are in here at the moment there's nothing in our body tags but as you will see memory game is showing up in the browser tab because that is essentially what the title tag here does okay make sure that it is in the head tags like so okay so first things first let's start off with some html now in this game like i said this is a javascript tutorial so my html is going to be super basic we're going to be adding most of our elements through javascript okay so i'm going to show you how to do that now first off actually we do need to link up our style sheet so go ahead and use the link tag like so thank you tab nine and the uh href is going to be styles css just like that and let's just close off our link tag there we go we can actually just make this sorry self closing just like that okay so what we've done is we've now linked up our style sheet we have just used the style css file as it's not in any directory so it's just in the root of our project the same location as like index.html file so that's all i really needed to do here great and now let's link up our script so to do this i'm going to use the script tag just like so and i'm going to use source app js in order to link up our whoops javascript so there we go what i am saying is that after all the elements have been read then i want to go to my script tag and read whatever is in this file okay so make sure to put it at the bottom between your two body tags and once you have that let's go ahead and start adding some html so the first thing i'm going to do is just add a h3 tag like so and in it i'm going to keep the score so just like so and then with the span i'm going to break this up so that's what the span tag does it breaks up these two tags i'm actually just going to pick this out with an id i'm giving an id so we can pick this up later with our javascript so we can now pick out with our javascript this whole element okay the span the two span tags by its id i'm going to show you how to do that later so we've got our score and then i'm going to create a div and actually give it the uh we can give it the id grid if we want or we can use class because we are going to silent up but essentially we want to be picking this out with our javascript later too so now if we look in our game we will just see a score okay we won't see anything else because you know the span tag essentially doesn't have anything in it yet and our div here doesn't have any styling and it doesn't also have anything in it yet so great let's carry on oops sauce sauce so first things first let's actually get to adding some elements to create our grid in here so i'm just going to go ahead and open up my app.js file so as we saw from the beginning we need to essentially create 12 cards so we can do this in javascript and i'm going to show you how first off i'm actually going to go ahead and start off creating an array i'm going to call it the card array so const card array and an array means we open up these two brackets this is essentially an array and i've assigned the array to the value caudary and inside my array i'm going to be adding objects okay so this is essentially an object it's going to have a name and let's go ahead and call this fries and then it's also going to have an image and i'm going to put a path to my images which i'm going to store in an images folder so again in here i'm just going to go ahead and create a new directory this time called images and i'm just going to put in some images that i have premade okay so here they are in my downloads folder one two three four five six food images one blank image which is going to be the back of our card and just one white image for you know if we get a match so all of these i'm just going to drag into my images folder i am going to share this repository with you in the description so you feel free to take these if you wish okay so there you go as you will see they are all here now so now in my array i'm going to actually put the path to these images so i'm going to go into the images directory i'm going into here and i'm going to get the fry's png thank you tab nine okay so here's our first object that i have made and i'm actually going to make another object this time let's call this cheese burger and then of course this needs to be cheese burger too so we've got our fries object our cheeseburger object we also need the hotdog object so name hot dog image images hot dog png and we are making this array as a reminder remember to create our grid with we're going to use this to create our grid with all of these images on it so we've got our hot dog the next thing i want to do is ice cream so i scream ice cream what else do we have we have milkshake next milk shake and this should be milk shake just one more i believe because there should be six pizza and the url and the fire is called pizza png okay so there we go there are six essential images and i'm just going to go ahead and get all of these six oops and just paste them again because we need 12 cards okay we need 12 cards with two matching each time so there is our card array now what i need to do is essentially get them you know uh in a random order so if i just console log out card array and look in the console log you will now see that same entire array that we just wrote showing up here okay so now to get this uh sorted randomly i'm going to show you what to do i am going to essentially get the array and use the javascript method of sort to essentially sort everything in the array randomly and to do this i'm going to use math run and this is a nice trick you just do that so this is a little bit advanced so apologies for this it's just a nice way or trick to sort an array randomly so it's definitely one to remember the sort javascript method works by comparing two values okay it compares the two values and then sorts through it and because math random the math random that you see here returns back a number anywhere from 0 to less than 1 we are checking that it's either you know smaller than 0.5 or larger than 0.5 so the first value in the array is going to go ah it's smaller than 0.5 and then it's r larger than 0.5 and it will shuffle it based on that okay a lot to get your head around but you can watch my uh sort algorithm explainer i will make sure to link that in the description below this is advanced though so if you can't get your head around it don't worry just remember that this is a nice shortcut to shuffling an array randomly okay so now if we console log the card array it should be random each time so we've got fries cheeseburger pizza hot dog cheeseburger milkshake cheeseburger fries so that is working let's carry on so now that we're getting a array that is shuffled randomly what i'm going to do is use that to create our board so first off like i said let's go in here and let's grab the div with the id of grid and we're going to grab it by using the id so what i'm going to do here is i'm going to use document query selector and i'm going to search for the id of grid so this hash here means we're looking for an id of grid and we're going to go into our document and use query selector to search for the id so this method essentially looks through the whole thing and finds a id that is grid and goes ah okay that must mean we want this element the whole thing so let's save this as something i'm going to save this as const grid display or we can just call it grid it is up to you so now if i console.log grid display you will see we have picked out the div with the id of grid this is looking good okay so we've got the grid and now i'm just going to make a little spaces here so we can see what's going on once we have the grid i'm going to write a function called create board so this is what a function looks like there we go and a function essentially does something and we have called this function create board so that if we need we can reuse it or it just makes everything more readable so what i want to do is essentially for each item in my array i want to create an element so to do this i can use four each or i can use a for loop i'm gonna use a for loop as i think maybe that's a bit more beginner friendly four let i equal zero so i'm just writing the syntax for a for loop this is what a for loop looks like i and then we have a number here and then i increment by one so this is the syntax for a for loop what is essentially saying is that we're saying start from zero so let i equals zero and as long as i is smaller than ten you wanna increment i by one okay so for loop right here this is what a for loop looks like and essentially what we are saying is that we want something to happen you know 10 times because as long as i is smaller than 10. we start counting from zero so we go zero one two three four five six nine which is essentially ten items if you're counting from index zero and then we stop because i then becomes larger than 10 so we can't execute this loop anymore so what do i want to happen well like i said i want to create images right so i'm going to use document create element which is a great javascript method that will allow us to create an element and i want to create an image so i actually just need to write this so we are creating an image now let's go ahead and save this as card so i've saved as the constant card and what i want to do to this image once i create it well i want to add i want to add one of these images to it so let's grab the card we have just created if i actually console log this out just so we can see everything and i just consolidated console log out card and then perhaps i as well so we can see what's going on and now i call this function because don't forget we need to call the function in order for the function to release all of this wonderfulness and essentially you know execute the code in it so i've call the function now so let's go back here and refresh this page and you will see that i'm creating an image tag each time with the index number all the way to nine so that is what i'm doing so far in my function so to the image tag well i want to get the image so we've stored this as card in our javascript and i'm going to use another javascript method the method is called set attribute and we're going to set the source attribute to my image as well as uh for now actually i'm just going to give it a blank card so we're going to go into our images directory i'm going to get the blank card so blank png so now i'm going to console.log out the card after we've add the source uh attribute with image blank png and we're going to look in source and there you go you will see the path to the blank images file so that's what we have done okay so we've done that we also want to add i'm also going to add a data id so that each card has an id that is unique so data id and that's just going to be i so we can keep track of each one so now let's go ahead and have a look and if we refresh this you will see the source and the data id has been added to my card or in other words my image tag so great and then of course we're still printing out the number to the side so now that we've done that we can see it we need to actually put it in something we want to put it in the grid display we want to put it in between these two tags okay so that's essentially what we're going to do with javascript however so what i'm going to do is get the grid display and i'm going to append the card to it we can use a pen we can use a pen child okay there's actually two methods to our disposal so now tada we have added the 12 cards into our div with the id of grid amazing of course you won't see it here okay we have done we've added this in javascript and it is being displayed here okay think of this as sort of just more of a starting point that you want to start out with and then we're adding stuff with javascript okay and that's being added through this script tag so that's why you won't see it's being added after this and that is what is being displayed in our browser cool so maybe let's give this a little bit of styling while we are here there's again not much styling in this because as you know as i've stressed many times i don't want this to be about styling i want you to be able to take this game and truly make it your own style it up really do whatever you wish to it add more features add more levels perhaps add you know like level two will have many more cards i mean that is totally an option uh what i'm gonna do is actually use display flex well actually let's give it a width first let's make it 400 pixels and height 300 pixels this is because i'm just going off of the size of the cards i premade so now our grid all right we need to well we can pick it out by the id as well if we want because that was a class uh i thought i gave this a class of grid but i'd give an id of grid so we need to look for the id of grid okay so now the id of grid has the width of 400 height of 300 but all of these divs have essentially stretched to fit it i don't want that so what i'm going to do so now you will see that the grid has a width of 400 and height of 300 would see we are missing some cards why is that uh that's because we're only looping to ten sorry that's my fault this was the boilerplate that i showed you sometimes it's good to see mistakes though instead of looping over just saying 10 times we want to get the array and get its length okay so i'm going to get the array and use the property of length to find out exactly how many elements are in our array and how many times we need to loop so now there we go we have all of our cards all 12 cards so this is looking good maybe i'm just going to zoom in a little bit so you can see everything a little bit better and i'm also just going to add display flex flex wrap wrap just to get rid of those lines in the middle so display flex essentially means so by adding display flex it means we can utilize the flex wrap okay from flexbox to make sure that all of these did just wrap over each other nicely just like so great so that's actually it for our styling that's all the styling we're to do so i'm going to shut this down now and get rid of the index.html file as well and let's just focus on our javascript so wonderful we have created our board and now once we've created our board i'm actually going to write a function that allows us to flip the cloud when we click it so let's go ahead and write our function for this function flip card so once again there's our function that's what a function looks like and what i'm going to do is essentially think of which card i clicked on so to do this i actually need to add an event listener to each card as well so right here i'm going to get the card and i'm going to use add event listener of the javascript method that will allow us to listen up for events so in this case i am listing out for a click so if i click on the card i want something to happen and that something is going to be the function flip card which i'm going to pass through here's a call back notice i'm not calling it okay otherwise it'll be called straight away i only want to call it if we click on the card there's loads of events you can pass through here okay just check out the mdn docs i've chosen to pick click because i want to listen out if we click we could use mouse over there's many things you can do so for now i'm just going to console log clicked okay so now if i click on a card clicked clicked clicks clicks clicked so we are listening out for clicks on the cards that is pretty good the next thing i'm actually going to show you how to do is on the click well i actually want to get the card i clicked data id so let's go ahead and do that now so i'm going to use the this keyword the this keyword essentially will let us use whatever element we clicked okay and get its get attribute so i'm going to use get attribute to get its data id okay and then let's save this as let card id so now i'm going to say click and it's going to show us the card id because i'm going to pass that through this can be a const it's not going to change if i click it you will now see that i'm getting each card's card id so here are the data ids i'm picking out and i'm just printing them in my console log okay so hopefully that makes sense please do have a play around here if you wish that this keyword is essentially what is allowing us to interact with whatever element we click okay and we're getting its data id and we're saving it as the card id and then we'll just console logging it out so we're getting the card id but why are we doing this right well we are doing this so that we know exactly which card we clicked and we can then pass it through into our array to get the name okay so that's quite cool and it also means that if someone's inspecting our code they won't be able to you know inspect it and figure out what's under our cards because we're not saying we're just giving them an id so what i'm gonna do is i am going to get my card array and i'm going to pass through the card id that we just picked out in order to return the name okay so if i just call i'll do this step by step i'm going to console log the card id so console log if i click on this one well we know the first one has a data id of zero so let's click it oops click clicked zero and i'm getting returned ice cream image ice images ice cream so we know that the ice cream image lives there now okay and we just want to get its name and store it in an array so for the next time that we click the next one if they match we know it's a match so let's get this object's name so i can do so by clicking dot name uh by the way actually let's console log that out the whole card array after the shuffle just so we know if everything's working correctly so this one is going to have data id 0 click clicked on xero and we have got its name so we've gone into the array and got its name because the first item in our randomly shuffled array has the name pizza and has the image this one cool so hopefully that makes sense if it doesn't please do have a play around here so there we go we are getting the card we're getting the name back from our random card array and what i want to do is put it into another array so i'm going to create an array up here and let's just call this uh const cards chosen and make it an empty array i can use const because you know we're not gonna be changing the array we're just gonna be pushing things into it so it can be a const in fact you know some people would argue and say that for best practices it should be a const so i'm going to get the array and i'm going to use the javascript message method of push to push an item into that array and what i want to push through is just the name okay so there we go and if i console log the card's chosen now so let's go ahead and click that one you will see i've pushed in fries into the chosen array because fries must be here it's the first one that we go fries i've just pushed through the name and if i click another one i've added ice cream so obviously these aren't a match and what ideally need to do is you know clear them out and start again so let's deal with that a little bit later however because what i also want to do when i flip the card is actually add the image so once again i'm going to get this card that i clicked or this element and you set attribute set attribute and this time i'm just gonna use source and instead of adding a blank image i'm actually going to get go into the card array again pass through the card id and get that card's image i think i support image image okay and just assign it to the card so let's check it out milk shake and pizza cool and of course they're not a match so one other thing that i want to do is if cards chosen so i'm using the cards chosen array that i just made and if it's length suddenly equals two right because we have two items in there so we want to check for a match i'm going to check for a match but let's maybe do this after some time has passed or you could do it immediately but i think it's nice to see both the cards first so for this i'm going to use set timeout and i'm just going to pass through a function that i want to check so set timer as a timing event uh or yes a javascript method that will essentially call a function after a certain amount of time has passed so i want the first parameter you need to pass through is the function so we're going to write a function called check match and the second is going to be the time that i won't pass before we call this function i'm going to say it's 500 milliseconds so let's write our check match function function check match so for now i'm just going to say console log check for a match and i'm actually going to get rid of all these console logs so we can see everything a little bit clearer so click oops i misspelled something console log check for match click click check the match okay so obviously two items are in our chosen cards array so we're checking for a match and what do we want to do in our check for match function well we want to do a few things uh first off i want to get both of the items in my chosen card array and essentially check i guess if they match so i'm going to go into my card chosen array and get the first item and if it equals the cards chosen second item submit let's make this an if statement if this is true if this statement is true well then we know it's a match so let's alert ourselves saying you found a match of course if you're coding this you don't have to mix an alert you can make a nice neat popup but you know as i said we're just doing the mega basics here so there is our alert and what do we want to happen if there's a match well i'm going to have to go into the cards we're going to get the cards so in fact right before we do this i'm going to write something that will get every single card on my grid and i'm going to do this with document query selector but i'm going to choose query selector all to look for all the cards so essentially all the let's say all the uh image elements that live inside my div with the id of grid so i can do this by just selecting all the images because you know that it's a small project so i could just look for the image tag or if you want to add more images later on and be really specific you could say that you want to look into the div with the id of grid sorry the dots for class name the id of grid and find all the images that look inside of it so that's if you want to make this project bigger i'm just going to keep this like this for now because i'm not going to add anything else in there so maybe it's a little bit overkill so i'm searching for every image in my entire document and i'm going to save this as cards okay so if there's a match what i want to do i want to get the cards and i need to go into the cards and find the cards by their ids so just like we're saving the names of our chosen cards here i'm actually going to also make another array const and let's call this cards chosen ids and make this an empty array too so when we push the card in we're pushing in the name but i'm also going to push its id in so push the name cards chosen ids push the this items get or we can just use the card id so i'm going to push in the card id into the chosen ids so i'm going to show you what this looks like actually now before we move on console log cards chosen but also console log cards chairs and ids oops okay so click so what's happening here these are the cards chosen and we're also saving the ids id 0 and 1 have been pushed into an array and now we're going to use that because we're going to go into the cards that we just picked out so all the cards in our document and we're going to pass through the chosen card ids first item and we're going to use set attribute source images white png so i'm just going to talk you through this a little bit so what i'm saying let's just console log this out console log all the cards so one two so here are all my images and what i'm saying is i want to go into i want to find this card exactly and i know this has an id of zero so i'm gonna go into this array and get this card essentially or this image tag and i'm just going to assign it the background color of white if the two are a match so let's just try again a match okay so you found it's a match and then i've turned this background to be white because i've essentially added a image white png to it so let's do the same for the other one as well so what i'm going to do is just grab this line and the second item in this chosen cards that chosen id array we're also going to add a white image too okay so if it's a match we add the white images to those cards what i'm also going to do is on those same cards so let's go into the cards pass through the id the first id in the card chosen id array i'm going to remove event listener remove event listener to stop listening out for clicks on the card okay so that will just stop any weird activities happening because we want to remove the abilities to click on the card so great and also i'm going to make another array because we want to start collecting const cards one okay we want to know exactly how many matches we have so all i'm going to do is cards one and i'm going to push in the content of the card's chosen array which will either be something like hamburger and fries okay or whatever two matches i guess if it's match they'll be hamburger hamburger so there we go we are recording how many cards we have won how many matches we have great and of course we then need to start again so after all this has happened so i'm just gonna do it down here we then need to get our cards chosen array and just make it empty again so we can start this process all over again uh okay so we do actually need this to be a let cut let because if we want to just replace this with an empty array that needs to be let and we're going to change this to let one as well because we again are going to want this to be an empty array so we can start the whole process again wonderful so we have read the logic of what happens if the two cards are a match now we can also do something to alert if we click the same image so if uh cards actually maybe let's save this i'm going to save this up here as const option 1 id just to make things a bit really easier to read for us option 2 id and that's going to be the card second id in our cards chosen ids array so now i can just simply use this variable instead just like so because i am using it quite a lot so this just makes it a little bit neater so now if card option 1 so if the id equals card option 2 id well then let's just do an alert you click the same card because that is technically true you have clicked the same image so that's all i want to happen cool and then we can start again as well so if you click on the same image we're going to reset everything great so we've done something for if you know you click on the same card we've done something for if we found a match but now we need to write something for anything else that happens so if it's not a match then what do i want to happen i guess we just want to change them back to being blank right so we just want to flip them back so i'm going to do that by getting the blank image which actually isn't blank we're just turning it back to this one okay so we flipped it over it's become a cheeseburger it's not a match so then we have to flip it back to here however if it was a match we just want the white one okay so that's what i'm doing i'm flipping it back and then we empty both the cards chosen and the cards chosen id array so there we go and then let's also do an alert that says try again great now the last thing that we want to happen in the check for matches function is if we get all of the cards right so if suddenly cards one so a quads one array length equals the card array length length but then divided by two okay because obviously if there's uh 12 cards we can only get six matches so that is what this line says we don't actually need to have this like so and then we can you know you can do an alert or we can also to show it in the result so i'm going to grab this span by the idea of result and maybe let's go ahead and pick it out the same place we do the grid so we're going to use document query selector to pick out the id of result and let's save this as result display just like so so if it's the end i'm going to get the results display i'm going to use inner html to say congratulations you found them all okay uh and otherwise i actually want to just add the score to the results in html so we add the score when we find a match right so i'm just going to get the results in html and what do i want to display well actually we could just show this let's just show as a default after every time that we click check match and i'm just going to show the um i guess the cards one array length right because again if we get if we push something into the cards one array we get it's just like getting one point uh instead of inner html we can also use text content if we wish so maybe let's go ahead and put that here as well and then of course we also need to change these back to being blank great so i think this is it let's check it out so that's a match we found a match we get one to the score these term blank that's not a match try again and as you can see here you can't cheat and inspect right so we're literally just guessing i'm not really paying attention maybe i should be there's a pizza there's a pizza found a match there's two points cheeseburger milkshake milkshake cork cheeseburger cheeseburger cool ice cream hot dog hot dog hot dog and let's see if this works found a match and congratulations we found them all and we can't click on anything else because we've removed the event listener from all their cards amazing so hopefully this made sense i've really enjoyed teaching you guys how to make this game of memory game again it's just the mega mega basics please take this game make your own style up truly make it incredible make popups add more levels i can't wait to see what you have made now we are on to our third game which is going to involve some timing events in this section we are going to build a game of whackamole this game will involve us having to build a grid that randomly displays a mold that we have to click with our mouse in order to get a point we have to get as many points as possible in the time we define by the end of this tutorial you will have used all of the following javascript methods and properties so what are we waiting for let's get to it okay so first things first here is my file setup in which i have some standard html boilerplate making sure that my style sheet has the correct path to my actual style sheet which is here and same for the script tag to pick up my javascript making sure that the path the relative path is the same so the first thing i'm actually going to do for my game of whackamole is uh make a grid so above the script tag make sure it's above the script tag i'm just going to make a div that has the class of grid and in here well i'm just going to put in nine divs as i want my wacomo grid to be three by three and then i'm gonna give each of them a class of square i could technically add these in javascript but you know it's not that many so i'm just gonna put in the nine divs each with their own id so one two three four this is so we can identify each one but i want each one to look the same so i'm going to style all of them as squares and that's why i have chosen to do it this way so there we go that is our grid we of course need to style it so we can see it while we are here i'm also going to add a um h2 tag for the score so i actually want my score to show up here i'm gonna hard code it as zero and just give this idea of score so we can pick it out later with our javascript i also want to have another h2 tag that is going to tell us how much time we have left so i want the game to count down from 60 seconds and i'm just going to put time left and you know what i'm also going to give them a label so quite simply i'm just going to make it really basic please style this better than the way i'm doing it right now i just want to give you the sort of um skeleton to make your own so your score and then time left okay this is looking good let's style it up so we can see it in our browser so in here i'm just going to pick out the bridge and then the grid well i'm going to use display flex and i'll show you why in a bit um actually let's get rid of it so i can show you so i'm just going to get rid of it for now i'm just going to give this a width so let's say each of our squares is going to have let's make each square 200 pixels uh wide and high so which means this would be 600 pixels and this height of 600 pixels so that will look like a square and then let's um we could give it a border or we can give each square a border so let's do that so every square with the class of square every div sorry with the class of square we know we're looking for divs with classes because we put the dot same for grid we're looking for a class a div or an element with the class of grid to style so let's make each square we decided that each square we want to be 200 pixels with our 200 pixels so height 200 pixels with 200 pixels and then i'm actually gonna give each one let's give each one a border um i'm just going to get bought a color and be really simple of black okay so this might be a problem because i don't know how thick the border is in which case our grid might look a bit strange but let's go ahead and see so i'm going to copy the path and i'm just going to put it into our browser so here is our grid you can see all the squares inside it however they don't seem to have the border color that's because we need to give it a border style of solid you can actually maybe just change this it's too much for me i can do border solid black one pixel so that's another alternative it's just like a shorthand of what i wrote before and i'm also assigning the border width so that we can know how big the border is going to be so now if i refresh we now get the nine divs stacks over each other what we need is for them to snake over each other so that they can fit in and i could do so by adding display flex to my grid so now if i refresh it see all the squares will try fit into my grid so if i go on grid there's the grid and they're all trying to fit in it i want them to stack over each other like a snake so i can do that by adding flex wrap wrap there we go now they don't fit the third one isn't going here and that's because we need to make the grid fit the border two so what would that be one two three four five six so width six 606 and height six or six and there we go the squares now fit perfectly into my grid so this is looking good if i want to see grid um sorry square with id3 it's that one four is there five is there six is there seven eight nine it's literally snaking around perfect let's carry on okay now i also want i'm going to go ahead and make the mole for the moment i'm just going to give it a background color of blue but obviously we want to switch this out later so we actually probably want like a more image i'll show you how to do that but for now i'm just going to have the class of mold to be blue so for example if i add the class of mold here and refresh you will see that the third square has a classic mole so that square has turned blue we can even see it when we inspect the elements so that's great let's just pretend that's our more for now until we get an image to put there next up let's do some logic so let's move on to our app.js file okay so actually i'm just going to remove the mode class from here because we're going to add it with our javascript so the first thing i want to do is actually select all the squares so we can work with them in our javascript file so i'm going to do that by using the document query selector so i'm not making this up document query selector all so that's the javascript method that will essentially help us look for any thing with the class name so dot of square so we're going to search for all those and we're going to store it as squares squares okay so we're finding all the squares and we're storing them under squares now even though we don't have it because i removed it i'm actually also going to store the mole so i'm going to go document query selector not all because there's only going to be one mole at any time and i'm going to search for the class of mole so now we have our squares we can work with them and then now we have our mole if it's on the page that we can work with okay we have two more things to pick out so we can do them later and that is the element with the id of time left so once again document i could use query selector or i could use uh get element by id but just so you know in query selector if we're searching for a element with an id we need to use hash and then the name so this is like an id we're searching for an element with an id of time left and let's store this as time left and then finally one more thing and that's the score so this thing right here we need to get this element so that we can manipulate this with our javascript so once again i would get document query selector and then look for the id of school and let's save this as score well maybe yeah let's just save a score that's fine great so let's start off with the result as zero even though we've hard coded it we need to tell our javascript the result that we start with is zero and we'll do the time a little bit later um let's actually focus on getting the uh game to work so i'm going to write a function called random square so we want to get a random square to put our mole now in here for each square so i'm going to grab all the squares and using the javascript method of for each so that is a javascript method i am going to get the class name so i could put i here i could put whatever we want i could put square so we could actually use square maybe that makes more sense so for each square in our squares array i essentially want to get these square and i want to go class list so that is the javascript property and i'm going to remove the mole if he exists on any of the squares so we have a fresh slate to start with so that is what's happening here i'm going getting each square and for each of the squares i'm removing the class of mole so as the first step that we want to do in our function before we start adding omo randomly so i'm going to write let random position and then i'm going to use so once again i'm going to go into my squares array and i am gonna pass through so if i pass through a zero into my squares array it would literally get me that first square if i pass a one well then i'm talking to the second square in my array i need to pass you a random number in here okay i want to pass through a random number from essentially uh zero to eight because i want a random index from zero to eight because there's nine squares and we start counting from zero so i'm going to do this by passing through the javascript method of math random like this and then multiplying it by 9 but i'm also going to use math floor to round whatever that number is down so for example if i console so now if i console log random position and look in here i need to actually call that function so random square random position before initialization okay that's because i console logo up here whoops there we go and refresh i'm going to get literally a random square each time each time with an id from one to nine okay there we go so that is it that's what is happening here if i actually console logged just this you will see that once again i am getting a random number from essentially zero to eight let's check that math rand my trusty mdn okay math random one has a function for a floating point in the range from zero to less than one okay so in this case it's we multiplied by nine so zero to less than nine so that is exactly what numbers are getting back and we're rounding it down so that's what we're doing see no matter how many times i refresh this we'll never get anything above eight because we're rounding down okay so eight's gonna be the highest and that makes sense because zero one two three four five six seven eight do we only go up to the eighth index so hopefully that makes sense uh i have a read of this from mdn if you're not sure and have a play around with it but that's exactly what we are doing here great so i'm just going to get rid of this for now okay now whatever random position we should probably have random square i'm going to have random square because essentially what we're getting back is a random square as we saw for the first console log so for whatever random square we have i'm going to use class list add more class so once again we should now get a blue scare in a random position so that's our mole every time you refresh the page putting itself in a random square let's carry on so i'm happy with that but i actually want to put this on a timer so i want this to be on a timer um so what i'm actually going to do is instead of just having the function like this i'm going to write this in another function so we can attach it to a button if we wish move mole and then i'm going to put let timer id equal null because we need to actually stop this timer interval from moving and i'm going to use the javascript method of set interval to move the mole so i'm just going to put random square to generate a random square and let's say every 500 milliseconds so this is a so now i don't need this here and nothing will happen if i refresh the page however if we invoke the function or call the function which is why i want to do this in a function because you now have the option to attach this to a button if you wish right because if i do this now it will just start on the page load see we're getting i'm not doing anything we are getting a random square light up with a mole every 500 milliseconds so that's some extra work for you if you want it at the moment i'm just calling the function on the page load but you can attach it to a button if you wish so that's working um it is essentially on a timer and we can use this timer which is why i've done it like this i could have just done that but because it's on a timer we can actually use this timer to stop i'm all again in our button if we wish so that's that's optional for you that's why i've put it there um cool so the next thing i want to do is actually listen out for if we hit the mall because we want to get a point each time we hit the mall so i'm going to do this up here and now i'm going to grab the squares and for each square um for each id in the square i am going to get the id and use add of again this could just be square so let's just maybe put this with square makes more sense for each square in our squares array i'm going to add an event listener to listen out if we put mouse down so you show me click on the square and then i'm just going to put a function here so i'm passing through the event and then a function of what's to happen if i click the square and if the square id equals the square that is the random square so let's actually save that um i'm actually going to put so we want to save something i'm going to put hit position and then i'm going to get the random squares id so i'm literally getting the id of the square so i'm getting this thing right here and that's how we can do it so i'm getting the id of the random square and i'm saving it to hit position so perhaps i'm just going to put let hit position leave it as blank if the square id equals whatever the hit position is at that point in time then i want to get the result and add one to the result cool i also want to display it in our score so score let's do text content or in html whatever you want equals the result okay and then i also want to make the hip position oops so clear out hit position equals null again okay cool i can just spell that right hit position so this is looking good so amazing so that's what happens if we hit a mole let's see if that has worked now we've got that working we are adding a score each time we hit it the last thing we need to do is actually get our timer to stop working so let's do that i'm going to do that below here and then slow it down so we can see it a bit because it's way too fast so i'm going to write a new function called countdown and then in here so in my function uh well with each time we invoke this so i'm going to put this um once again because i'm not attaching it to anything i could just put set into a vowel so i'm just gonna put this down here and call this let um count down timer id so we can stop it if we want equal set interval and then i'm going to put this on a set interval so i'm literally going to pass through the countdown function and i want the countdown and function to invoke every 1000 milliseconds so it'll be like one second two seconds three seconds and each time i want something to happen and with that i want to get the current time so let's actually write um let current time equal 60. so i want to get the current time and i just want a minus one from it and then actually want to display that i want to display that in the time left so time left text content current time okay so that's really it uh if however current time equals zero so like we get to the end i want to clear the timer so clear interval count down timer i d okay so i want to clear this and then maybe let's get an alert that says game over your final score is and then the result so that is looking good let's have a go so to make this a little bit faster i'm just going to change this to 10. let's see how we're doing 10 seconds so zero you can see the time is working we're clicking we're clicking on the um mole we're getting points and then as soon as we get to zero game over your final score is nine we could do with the space there but that looks good awesome you can see this is still moving around we can actually stop that thanks to this timer id so i'm just going to move this out so it's global and we can use it here so we also want a clear interval timer i do let's try that now once again let's click click click click click click click click go score five go to scroll okay then we have your find some scores five zero and it stops moving so there we have it we have now built our game of wekamo um if you are interested in how to get an image let me show you that very quickly so i'm just going to use uh this whackamole from my github feel free to take him i've already premade them to be 200 by 200 pixels so let's just download that i'm going to save image and let's save them as short mold that sounds good and downloads and then i'm simply just gonna very basically dragging off a limb in here so there he is and then in my style sheet instead of having background color blue i'm gonna have background image and then i'm going to put uh url and then the path to my mole so it's the root so i just put ro mole jpeg because it's a jpeg and then i'm gonna put background size cover so let's have a look at that and there we go we have our little mole moving around so oops game over find squares three let's fix that space okay score is put a space there and let's make a move faster so let's get a random square every 500 milliseconds again and let's change the current time to start with 60 seconds so once again boom boom this is more realistic you can of course add levels you can make them go as fast as you want like this is really fast you will see the score adding and you'll see the time left so that is it i hope you've enjoyed this tutorial on how to make whackamole without canvas and practice your timer skills thanks very much for watching and i will see you soon in this game we're going to be building 2d breakout another retro game the aim of this game is to break all the blocks that you see in order to complete the game and of course once we are finished doing this giving you the bare minimal logic and code in order to get this game working i would love for you to take this game style up give extra levels and share it with us on twitter i can't wait to see what you built okay so let's get to it the first thing that i want to show you is my setup for the game so as always i've created an index.html file with some boilerplate so i've simply given our project a title i've linked our style sheet so this cell css file to the html file making sure that the path is correct so as this file is in my root or the root of the project that is fine and i've also chosen to put a script tag at the bottom of my body now make sure to make the path uh correct as well so index.js is fine as the index.js file is in the root of my project okay so i've chosen to do it this way you can also choose to use a dom content loader on your javascript page as long as the javascript is after any html elements you should be fine okay so that is it these files don't have anything in them yet the first thing i want to do is actually make my grid so i'm going to do this by simply putting a div here with the class of grid so like that which i'm now going to style up in my style css file so i am picking up the class of grid and i am telling my css file to class by using this dot so let's make our grid i don't know 600 pixels and a height of 300 pixels and i'm just going to give a border of solid black one pixel so we can see it so go over here copy the path and then in here just gonna paste the link and there we go there's our grid it's going to inspect the page so we can see our console log up too okay now the next thing i want to do is actually use our javascript to start putting in the blocks so essentially what i want to do so instead of literally hardcoding it in the html like this so let's just make a block for now we've got a class of blocks once again let's pick out the class block and i'm going to give it a width of 100 pixels and a height of 20 pixels any background color of a blue so now if we go back here refresh that's our block now it is important that because i want to be making loads and loads of these blocks and i'm also going to want to know the position of each block as well as the i guess positioning of all of these corners i'm going to make my uh i guess identifier or how we're gonna be moving the block this bottom left corner okay so what i mean by this is i essentially i'm just gonna give this a position absolute not relative but absolute so that we can move things around we need this here uh in order to use the left property so not on here i want to use on the block so i'm essentially using my javascript going to be adding left margin and bottom margin to all the blocks to position them so what i mean by this is if i just go left 50 pixels refresh i've moved the block left 50 pixels from this point right here okay well essentially from this but i want to make this this sort of anchor point of our block so i'm going to be using left and bottom to do so once again i'll just put 50 pixels so you can see there you go you will see that the bottom margin and the left margin are the same from this anchor point right here that is now from now on our anchor point of each block that's important that's what we are gonna be we're gonna be adding left and bottom but using our javascript so just get rid of that for now so we've done it we have created a blog but we wanna do in javascript and we want to make 15 of these blocks okay we'll make 15 of these so first off let's start by making one right so to do this i would use let's store this as block so const block and i'm just going to use document and create elements so there's a javascript method that i can use to create an element and i want to create a div so we've created a div we've stored it as a block next i want to give my block the class list that i have already made of block so without the dot each time this time i'm going to add the class of block to my newly created div that i have called block and the last thing i want to do is actually grab the grid so oops grid so i want to grab this grid i'm actually going to delete this now don't need it i can grab this grid by essentially getting so once again a document so i'm going to enter the document and i'm going to use query selector to look for the class of grid so i am telling it i'm looking for the class of grid i have to tell query selectors query selector can look for ids and all sorts of things so i'm telling it i want to find the class of grid i want to store this element as let's say grid so now that we have our grid i'm going to use a javascript method called append child so i'm not making up that exists to put in our newly created block with this style of block okay so let's go check it out and there we go we've done that with javascript okay we've deleted the one we hard coded and we've added that with javascript so that is pretty cool but i need 15 of these so i need 15 of these and for each one of these so i'm going to use grid style and as we said i'm going to use left so let's just say for now i'm just going to put as you know 100 pixels just to show you that it's working and grid style bottom 50 pixels okay so fresh oops not grid remove the grid i want to move the block swoopsy daisy refresh okay great so you now move the block bottom 50 left 100 oops cool so i'm just going to put this in a function let's say draw my block function add block i'm just going to put all this in here fun chin add block okay so add block you go save that okay now refresh there we go so now only when we call this function we will create a block but like i said we want 15 of these and i want all of these to be different for each one so to do this i'm going to create a class a block class so create block individual and i'm going to use class for this so class block that's how far we want to deal with a class and then for this i need a constructor so once again as we discuss on x and y axis so xaxis yaxis and this is going to be the bottom left of our block and using this bottom uh left x and y axis i can essentially decipher all four points of my block and where they are on our grid and i'm going to do this using the width of the block so let's save that const with block width and we know this is 100 and the height which is 20. so 100 and const block heights which is 20. so now using the x y axis let's get all so this bottom left well we know that the bottom left is just the generic x and y axis so i'm just gonna put x axis y axis so whatever we pass through into our block constructor that's gonna be the bottom left of our block then let's do bottom right lips bottom right oops and i'm going to pass through so to get the bottom right the x axis is we're going to have to add to the x axis the y axis is going to keep the same so yeah bottom right x axis move it over 100 pixels y axis the same okay yeah that's right cool now we need to get the top left and the top left is going to be the x axis and then the y axis we need to add the height lock height and finally this top right and the top right is gonna be the exact like opposite as in um you know the other corner completely so we're just gonna get the x axis and add the block width and the yaxis and add the block height so hopefully that makes sense we essentially want to find out where each point each of the four points of our block is on our grid at any given moment in time and we can decipher all of those from the bottom left x and y axis okay so that's how we're going to be creating all 15 of our blocks by passing through two values great so now let's actually make an array of these blocks so const blocks this is going to be all my blocks constant blocks and then i'm gonna create a new block and i'm gonna pass through well i guess on the first one i just want to make one here so again we need to add a left so let's just add a left margin of 10 and because this is 300 pixels i don't know let's just put in 270 and see what that looks like so 10 to 70. so let's just try with this one first uh draw all my blocks instead of add block i want this to draw all of my blocks so well we need to make function add blocks plural let's change that and we need a for loop so for let i equal zero as long as i is smaller than the blocks array length at the moment it's just one in there but for the future we implement i increment divided by one okay now as long as we want to loop over our blocks around keep creating these blocks so we want to essentially get all of this code and put it back in here okay so create a block add the class of block then we want to get the block that's left and instead of just hard coding something well we want to go into the block so we go into the blocks array and then get the our first item so just i is fine because we're going to be looping we're going to get that first items i'm going to style it so we want to get this x axis from the bottom left okay because we're going to be working with this so we want to get the x axis and assign it to the left so bottom left and the first items we do like that so hopefully that makes sense um let's just look at this again so we know that we need to give our block styling from the left so we want that to be essentially this so that's the styling we want to get from the left so and i just use this as the sort of anchor point so i just want this value right here okay so i can do that by going into the bottom left and grabbing the xaxis that will give me 10 because that's how this works by creating a new block i'm passing through a 10 to be the xaxis i'm passing through 270 to be the yaxis and then i'm getting all the other values so maybe it's worth me console logging this console log blocks and let's just get the first item so this refresh cannot okay let's just i'm just going to comment this out now because it's throwing errors for us okay so that is my newly created block i pass through a 10 i pass through 270 and from it we get all four points that will create our block so the x and y axis of all of them okay i hope that makes sense we have generated all of these just from passing through two parameters so now we know where each block is and all four of its points and we're going to use that for collisions so we've created one block but we want to create loads of blocks so first off let's go back to this function we want to add the styling of 10 pixels so we need the px to the left and we want to add so once again let's use our anchor so i'm going to go into the block first block so i'm going to go sorry i'm going into the blocks array i'm grabbing our first block and then i'm using the anchor so i'm going to use the bottom left corner to get the second value so the yaxis which we know is 270. and then i'm going to just assign to pixels and then we're going to put that in our grid so let's refresh cannot read property 0 of undefined and there we go we've drawn our first block now let's get to drawing the others so we just have to now create blocks this is so what's so good about creating classes 2 3 4 5 6 7 8 9 10 11 12 13 14 15. okay so we've got our first block i need to put commas that's fine i'm just gonna d d d d d d i'm just pressing command d to do this and i'm just gonna go like that there we go so now our second block well let's put that in position let's add 110 pixels to the left so the xaxis to move along left for this one let's add another 110 to that so 230 another so 340 and then another so 350 um i think fine should be five should be okay let's see what that looks like and obviously we're looping over so as many as we add we will create and that looks great let's maybe chop off the grid a bit hold on it's too big so let's make it 5 70 okay maybe 560. okay done it okay so we've got one row i want three rows so i'm just essentially gonna maybe i should just use one two three four one two three four five let's delete these i'm gonna use these and instead now i'm gonna move the y axis so instead of two i'm gonna have two forty so i want it closer to the bottom two from two to fourteen and then the fine let's see how it looks actually first that looks good and then once again here i'm happy with those so i'm just going to copy i'm happy with the x axis for each but these i want to move closer by 30 each so once again come on d come on d come on d 10. oops not that one though and amazing we have created all of our blocks pretty cool so now we've done that i'm pretty happy with this we've drawn our blocks let's get to creating a user so just like we did before and user i'm going to let's store it as user i'm going to get my document i'm going to create element i want to create a div now use that i want to style classlist ad and i need to make a essentially i just want to make it the same as a blog i'm just going to call it user and maybe make it purple so we can see the difference so this time i'm going to add the class of user and once again i'm going to get the grid i'm going to use append child to put in so i use what appeared there but we sort of want to move it here right so we want to move it in this row and down here so what like just like we did here um i can do that i would get the user use style left and then well let's give it a position can't start position well actually let's call it user starts we don't know what other starts we want and then let's make it start we want to make it start in the same x axis as the middle one so 230 and let's just say 10 pixels from the bottom so we've got our user start that's where our user is always going to start but then we also need a current position okay let's just do it yeah so we have a user start from where you always start no matter what no matter how many times you're refreshed but then because we want to move our user left and right we're going to have to track that so i'm going to have a let current position as this will change so it needs to be a let and to start off i'm just going to assign that to the user's dot so i hope that makes sense um it will in a bit we've got a sign position then i'm assigning that starting position to the current position of our user because that will always change but we want it to be that to start so we've got our current position and the x and y axis now just like we did here i'm going to get the current position and i'm going to get the x axis from it so the first value and just use pixels and let's do that for the style bottom two of the user so go into the current position get the second value and add pixels cool so now if we refresh that's where our block where our user block will show up okay so we've done that now let's go to moving our user left and right so i'm going to do this so we've added our user move user okay to move our user we're going to have to use keys so i'm actually going to write a function called move user and pass through an event and then i'm going to use the switch case to listen out for keys okay and i'm going to use a switch case for this because we're simply going to be listening out for our left or our right and we can use a switch case for this um so this is how you write a switch case you would pass in through something here and if it equals the case then you execute the code and then you break out of it so if you haven't looked to switch cases please do but this is what we're going to be using so i don't know how many you know about keys on your keyboard but essentially oops if what i'm writing here so case arrow left if so i'm passing through the event and the event if i par if i literally click a key on my keyboard and the value assigned to that key has the value of arrow left then i essentially want to move my current position right so if i press arrow left i want to take away from the xaxis of our current position so i would do so by grabbing the current position and this the xaxis so the first uh item from that array i'm just going to minus 10 to the value okay so i'm gonna do that and then once again i'm going to reassign value okay so actually i'm going to be using this a lot so i'm going to put this in its own function i'm going to call it draw user function i'm just going to do this to avoid repetition draw user i'm literally just going to take this code out and replace this with the function draw user to make our code cleaner so now instead of drawing the user again here by literally writing out that code again i'm just going to put full user so we're going to move the x axis position and we're going to redraw the user so that is what we're going to do and then we're going to break so let's check that out first off we need to attach this so let's grab the document again and use a javascript method called add event listener to listen out so i'm not making this up key down is an event that we can listen out for so we're listening out to any time i press any key on my keyboard that's what key da p down does you can have key up as well i think key down makes more sense than just singing out for when you take your finger off a key and then i'm going to put move user so the function so anytime i press a key down on the keyboard we're going to listen now we're going to invoke this function and then see if the key is our left and if it is we're going to move the xaxis of our current position 10. so let's do this and pressing left there it goes left it's moving 10 pixels awesome but it also goes off so that's a problem let's fix that we're going to fix this with an if statement so case our left i'm just gonna write if as long as the current position so the xaxis of our user is larger than zero so as long as it's larger than zero then we execute this code okay so that's all i'm writing as long as our user so this point right here is larger than zero because this is 0 then we can move left otherwise we stop we don't execute the function anymore so it appears like we are stopping so that's what i have done with that let's now do the same so there we go for the case of if we press arrow right so it's essentially the opposite if current position xaxis is smaller than the board width we declared what the board width is yeah const board width equals 560 60. so as long as we're smaller than that we want to get the current position and let's just add oops add 10 this time and then we have to redraw the user right because it's got a new position we need to recontrol the user let me break out of this so let's see it's not stopping ah but it stops there this is because this is our anchor point remember so we're gonna have to minus the width of the block so minus block width so now once again stop nice stop two this is looking girl and i like it let's carry so we are moving our user that is good i think the next thing we want to do is create a ball so add once again let's create a ball let's use document create element to create a div now let's get the ball and use class list add and then a class of ball which we have not yet written let's do it now ball uh let's make it width 20 pixels height 20 pixels border radius to make it look like a circle 10 pixels background color red we also need to give it a position absolute as with everything if you want to start assigning it left and bottom uh values so we've created the ball we've styled the ball now we need to grab our grid and use the pen child child to put the ball in it so put it this is the parent we are putting the ball inside the parent that's why it says append child and that's apple just as with the uh user let's give it a start position so const ball start this time we'll start equals and then uh i guess let's just make it a little bit higher let's see how that looks we'll start and then let ball current position equal full starch save that and then i'm just gonna grab the ball and use style left to use the current ball current position ball current position first value plus the string of pixel and ball style right now we want to get the second value so let's see what that looks like that means i don't want it there right oops that's going to be bottom because we're assigned from the left and the bottom okay just going to move it over a little bit so it looks more central so i'm just going to change this to i don't know okay so that looks good okay so we've added our ball just like with the draw user i'm going to do the same for the ball so draw the ball grab the ball actually i'm just gonna once again i mean it's just neater for me to reuse this function as we're going to be using a bit so that's our function now i've just essentially taken it and there we go so i've drawn the ball next up i want to work on moving the ball so move the ball move move move for this i'm going to write a function i'm going to call it function if i can just spell it right function move oh okay so we essentially want our ball to uh move by adding an x and y axis so let's just say we want to make it move uh like like left and right so it looks as if it's going to the top uh right corner of our grid i would do so by getting the ball current position x axis and adding two and i will do the same for the y axis so that will essentially move our ball and then of course i would have to redraw it draw four okay so now let's actually put this on a interval so to do this i'll put set interval and i'm going to pass through the movable function and let's say you invoke it every 30 milliseconds so now there it goes awesome but it's going off the grid it's going through the blocks we need to next tackle all of this stuff so let's tackle it not going through the grid so when it hits the walls of the grid i want it to change direction so let's do that first so first off i'm actually going to put this on a timer id which i'm going to declare at the top i'm just going to leave it blank and we're going to have to clear this timer id when we want the ball to stop so i want to stop this interval by running by getting that timer id and passing it through clear interval so we've put that on a timer the next thing i want to do is only make the when i want to change the direction of a ball if it uh hits a wall so let's write a function called i'm going to check for collisions now let's actually write the function so function check for collisions okay so first off let's check for wall collisions as i said collision and i could do this by basically saying that if full current position xaxis is smaller than sorry is larger than or equal to the board width once again minus we need to account for the ball width itself so let's just put ball diameter as the ball width and ball height are going to be the same so ball diameter constant ball diameter equals 20 because we know that because that's the width and height we gave it so if the current position is larger than or equal to the board width minus the ball diameter so if it's larger then we know it's off the grid and we need to change direction so change direction we need to write a function for this change direction i'm just going to write that function now function change oops change direction okay so currently we know that uh our ball is moving plus two uh and plus two x and y so we need to sort of change this so i'm going to go back here and instead of just adding a 2 and adding a 2 here this is going to be the x direction and this is going to be the y direction and let's store this as variables let x direction equal to let y direction equal to and we're going to change these values so if x direction on collision deeply equals two and the y direction on collision both of these currently are two and two and they're moving two and two so that essentially the ball is moving to the top right corner of our grid we want to change the direction and we want to change it so imagine it's going like this we want to change it to move like that right because that makes sense in physics so i would simply just get the y direction and change it to minus two and then return out of this okay so we've done it as if it was moving to the wall let's actually write an if statement for this at the top so we can see if this works we're also not invoking the check collisions function in which the change direction function is in so where should we move where should we put this i think we want to put it in the interval so after we draw the ball every time we draw a ball so every 30 milliseconds we want to check for a collision so still we won't be able to test that let's write a rule for um well actually we might okay so let's test this out and there we go and okay so it's changing direction um it's hard to see because it's actually going through the top wall but it's hitting as soon as it hits this axis right here is changing direction i'm actually going to maybe move the grid so we can see a little bit better let's just give it a margin top of i don't know 80 pixels refresh and then once the red ball hits this wall right here it will change direction i don't really think that's the direction it should be changing i think we should change okay so if it hits that wall i essentially want to change just make this an equal it's going that way so plus 2 plus 2 and then i want to change the x let's see how that looks it's going there and then i want it to go okay i think that looks better let's actually get to working on this stopping at the top pool now so if the ball current position is larger than the ball width minus the ball diameter change direction or if the ball current position yaxis so let's go for the second value maybe let's i'm just going to split this out so it's easier for us to read is larger suddenly or equal than the board height this time minus the ball diameter change direction oops undefined board height it's not defined did i not define that i guess not const board height equals 300 we know that from our style sheet okay so now but it's also changing okay let's just account for everything because at the moment everything is essentially going to go one way so if so if we hit that wall we want to change the x direction so now if x direction equals minus 2 because that's what it is and y direction equals 2 because that's what's happening at the moment i want x direction to change back to two and return up this since again that actually needs to go in here so now let's see what happens when we hit the top wall ah okay if x direction equals two actually let's keep this as y and we return out of this if x direction is 2 and y direction is minus 2 x direction let's change to minus two if x direction so i'm just thinking about how it now equals minus 2 and y direction equals both equal minus 2 then let's just put y direction equals 2 and return out of this and then we've just account for one more if x direction equals minus 2 and y direction equals 2. let's just make it more exact just in case deeply equals for all of them x direction equals two and return out of it so i think we've now accounted for all of them let's see how that looks all the combinations so hit the top wall bam bam awesome we'll see that won't happen and it goes to the bottom so let's actually write rules for the other two now so we also know that if the ball current position xaxis is going to be smaller than or equal to zero so if a gulf goes off the lefthand side of the board then we want to change the direction before that happens and then check for game over so if ball ball current position y axis this time is smaller than or equal to zero so if it goes off the bottom of the board we want a clear interval timer id so we want to stop it and let's also get like a console log out well actually let's just put it in the display so let's get you div let's give it the id of score i'm just gonna hard code zero for now let's pick it out um so const score display equals document query select query selector and then let's look for the score but the idea of score okay so let's actually show so let's get the score display and in that html i'm just gonna put yeah okay um i'm also gonna get rid of the event listeners so we can't move the user anymore remove event listener key down move user so we can't move the user so now it's going to hit the top wall it's going to change direction change directions again and when it hits the bottom boom you lose and it stops and we can't move our little user so the purple user anymore cool let's change the direction to check if it's going through the left side so i'm just going to do this by putting i think minus two and okay that one so go da da da da hit the top wall change direction and boom everything looks like it's working this is looking great now time for the tough part i'm going to check for collisions for any of the blocks so let's do it okay so in our check for collisions function i i'm gonna let's just do it up here check for block collisions and i'm gonna have to use a for loop for this so for let i equals zero as long as i is smaller than the block's length we increment i like so okay now i'm gonna have to essentially check if the ball is in between the blocks uh bottom left x axis and bottom right x axis so the bottom width and also in the height okay so if any if it's in there if it's in there we know it's a collision right so we need to write this and we need to loop it over for every block so i would do so if you need to do it with an if statement so if it's going to be a long one so we're going to go into our actually let's use the okay i'm just going to use the ball current position let's check the x axis first so if the ball's x axis is larger than the block so i'm going to go into the first block and check the bottom left because that's our anchor x axis so if it's larger than the bottom left x axis but smaller than the bottom right x axis we know it's in the middle of the block so if it's larger than that and ball current position x axis so the first value is smaller than i'm just going to get rid of this so we can see the javascript was smaller than so into the blocks the first block use bottom right xaxis okay so all if all of that is true that statement is true and now let's do the yaxis the ball current position yaxis and let's account for the ball diameter so maybe let's put that in brace parentheses two so if now the y position is smaller than the blocks we're going into the blocks again and we're going to use i and then we're going to get the bottom left yaxis and the ball current position yaxis is smaller than whatever block we're looking at top left yaxis so if all of this is true all of these statements are true then we know that we are in our ball is in a block it's in the area of a block okay so if all of that is true well what do we want to happen well i guess i want to remove the block um to do this i need to remove the class of the block we've just hit so we need to grab all the blocks from our document grab or blocks i'm going to go into the document and use query selector all to grab anything with the class of block and let's make this an array by using the javascript method of array from so i'm going to put that like so so now so i'm just going to console.log this see what all blocks look like okay so very fresh and we collide with any block one of undefined great what have we done wrong our top left needs to be capital l okay so now when we collide with the block bam we get all the divs with a class a block and an array you can see it's an array because of the um square brackets so that's what the all blocks looks like that we've just console logged so we're going to get all the blocks and now all blocks we're going to go into that array of blocks wherever i is because we're looping so whatever block we're dealing with and we're going to use class list to remove the class of block so visually we won't see the block anymore it will still be there though so we need to do get rid of that two so we need to get rid of it essentially from this array as well we need to get rid of whatever block we are dealing with remove it from this array so removing the class is completely different removing it from the other array that we have it in so i've used splice to essentially get rid of whatever the index is so i and we do it like so so just remove the one item so whatever say say we hit the block with index two we then need to remove it from our blocks array by using splice and passing through e2 into here so we remove it so once we removed it we also need to change direction cool okay so let's see if that's worked boom boom and it's changing nice and then you lose okay so this is looking good i think maybe let's also add a score so score plus plus and then score display inner html whatever the score is and let's set score at the top so let score start with zero just so we can keep track of how many we are hitting okay so the next thing we've to do in collision so we've accounted for collisions in here um we also need to check for user collisions right so if a little paddle hits it so i'm going to do that in here check for user collisions and now if so once again a full current position xaxis is larger than the current position of our user's xaxis so if that's true and the ball current position xaxis is smaller than the current position xaxis plus the block width so we are essentially checking if the ball is in between uh the two sides of our user and whatever it is it's current position so if that is true maybe let's put this in its own okay so if that is true and the ball cut well we could just do it by no let's just make it for the whole i was going to see if we could just do it if it hits the top of our user but let's just do it properly if the ball current position yaxis is larger than the current position yaxis and the ball current and the ball current position yaxis is smaller than the current position of our user yaxis plus the block height so if the two are in the same space we then also want to change direction so check it out so now i'm moving it's going to hit boom boom boom boom this is looking fun and we're adding to the score everything is looking great i think we only have one last thing to do obviously this is uh just a very basic simple game if you want to be super precise like you can see sometimes the ball is passing through a block a little bit i think this one might pass no it didn't hit it uh then please do fiddle around with the if statements okay now we have one last thing to do and let's check for a win so i'm gonna do that here so we've just added to the score check for win if the i guess we're gonna check the length of the block's length so blocks length deeply equals zero well we're going to get the score display use inner html to display you win and once again we're going to stop the game so clear interval timer id and once again we're going to get the document and stop our little guy from moving so key down move user okay great and there we go let's just see if it wins now please do expand on this game you can add a button that will essentially start the game that would be quite cool so the game just doesn't start on its own when we load the browser um i would definitely do that and it shouldn't be too difficult you just uh put in the functions to move the ball in that and perhaps as well the user and then once you press the button the game should start so i'm just going to wait for this i just want to check that we get a message that we win all of them and then i'm going to show you how to deploy it onto the internet so just bear with me while i win this game you can also mess around with the score so for example if you pass one level you could increase the speed of the ball i'll show you how to do that in a second um that could be quite fun you can also make your paddle smaller there's so much there's so much you could do so once again come on just gonna hit one more so hit that one and then see if i can do this one and come on yes you win okay so yeah as i mentioned you can make the game harder by essentially i mean if i move this changes to 10 it will go super fast ah so that's quite fun too i'm just going to move it back though because i think it's too fast for me i don't like it okay in this game we are going to make something a little bit more complicated we are going to be building the retro game of frogger the aim and frogger is to get to the other side of the pond and the road using floating logs and avoiding the cars we are going to be building the bare basics of this game leaving you to add styling and any other features at the end by the end of this tutorial you should be familiar with the following methods and properties okay so let's get building okay so let's do it let's build a frogger game so all i'm going to do is start off on webstorm and i'm going to create a new project this is going to be an empty project and i'm just going to call this frogger and just click click create so that is creating my project for me at the moment just an empty directory so we need to go ahead and add a new file that's right it's going to be an html file which i'm going to call index so thank you webstorm so if you did not using webstorm then please just go ahead and type out index.html and here is some boilerplate code that has been generated for me so i'm going to put in the title frogger this is not going to show up in the browser okay this is going to show up in the tab so if i just go ahead and open this up using this shortcut right here you will notice that frogger is showing up here okay so that is what this title tag does for those of you who do not have webstorm you can also open this file by just copying the path to it so copy the absolute path and then just simply paste it into your browser like so so two options for you i'm just gonna go and inspect this page and get up our console logs as well so how are we gonna make our game of frogger well if you watch my tutorials i do usually like to add elements in here with javascript but sometimes it's not worth it sometimes it's actually better just to uh start making the game from the html file itself and this is one of those occasions so i'm going to actually build the grid in html and then add functionality to the grid and my gamer frogger is going to be nine by nine squares okay so this is what the game is going to look like as a reminder again and i'm going to go ahead and create those 81 squares in the index html file so the reason i actually just want to do it in the index html is just because each div has is going to have a different class i'm essentially going to draw out what i want the starting state of the grid to look like so let's give the wrapping div the class of grid as that is going to be our game board and in here i'm going to actually start making my divs so we're gonna have one div two three four and then this one i'm gonna give it the class of ending block so this is essentially where you wanna get to that symbolize the end of the game and then i'm just gonna have a few more of these so 13 to be exact one two three four five six seven eight nine 10 11 12 13. and now it's going to get interesting so now i'm going grab a div and this div essentially is going to symbolize uh the i guess the row in our grid where all the logs are going left so that's why i'm actually going to give it a class of log left i'm going to copy that i'm just going to paste this out oops nine times as it is a nine by nine square so there's one whole entire row of logs going left and then one whole entire row of logs going right so i'm going to use ctrl g and change these to log going right now whilst we might want to give them the same styling we will know that they have different classes and we will know that we can uh essentially know which direction the logs are going to be going on these rows okay so good and now i'm just going to add a row of empty div so one two three one two three four five six seven eight nine and now just like we did with the logs we're going to do the same for cars going left and cars going right so obviously we have to look out for the cars so i'm actually going to take all of these again and this time i'm just going to replace log with car so ctrl c ctrl so ctrl g ctrl g all the way down so i'm selecting all of them and there we go and let's do two more rows of divs so there's nine divs and there's another nine divs and now we're also gonna have to put the starting block in here so i'm gonna do so from the fifth one one two three four five so just in here and i'm going to give this class starting block okay so like i said at the moment we won't see much but that is what the styling is for so let's go ahead and style it up so all i'm going to do is link up my style sheet using the link tag which is the selfclosing tag and i'm gonna do rel stylesheet type style type text css and the h reference for this well i know that my style sheet is gonna live in the root of my project so i'm just going to type style css and i'm going to create a file called styles css which is going to live on the root which is why i've just literally typed out the name of my file like this we don't need to go anywhere it's just that file okay so we've linked up the style sheet now let's add some styling so the things we're gonna have to start up well i'm actually going to style my grid to make sure that everything in it fits the way it should so i can look for the class dot is for class of grid let's make this maybe a little bit bigger and i'm going to say that my grid i'm going to give it a border of white one pixel solid uh and we can make it black okay so now if i look in here it's just one line okay because we haven't given it a height or a width so what i'm going to do is say that i want it to be 180 pixels height and 180 pixels width so that is now going to look like this however if we then give styling to all the divs that live inside the grid so this is how i can do i can grab the element with the class of grid so i'm literally looking in here i'm like oh what has a classic grid this does and now i want to say that every div that lives inside of it so every div that lives inside of it this is the syntax for doing so it's kind of a height of well because i chose 180 here 180 divided by 9 is 20 so i'm going to put 20 pixels and width 20 pixels so that exactly nine divs fit in my square uh along the width and the height okay so that is all i have done so now if you look in here and i can actually look at the elements that make up this page so there's my body there's the div with the class of grid and inside you'll see all the divs you'll see each there's 20 by 20. however they go all the way down we don't want this we want them to fit inside the square right so i'm going to do so easily by adding display flex now you think that would work but all display flex does is make sure that all the divs fit however just fit on the uh i guess as if you just squashed them together in a box so they're no longer 20 pixels why they're 2.25 pixels wide because that's the only way we can fit 81 squares on here so i'm gonna also add flex wrap wrap okay so there we go so now all the squares are fitting in here they're essentially going this they're wrapping so they're going starting from here and going and then they're starting on this row going and so on and so on and so on you'll see as i highlight you will see the corresponding element being highlighted in the inspect tool on the right so great we've done that now let's get to adding some more classes so more styling to the classes sorry so let's first off start the ending block so once again i'm going to grab the class name of ending block and i'm just going to actually give it a background color of let's go ahead and give it red so because we know this is the one two three four fifth square where do you think it will be i think it will be fifth so somewhere here and there it is okay one two three four five uh and let's do the same for the starting block now so starting block and let's say the starting block is going to be blue so all we've done is add a class to this block right here um did we miss it seems we need to add one more div because i did stop there so let's go ahead and add one more div we seem to have missed one to the bottom which actually means i want to move this one to be here instead because i want to be the fifth from the end and there we go so we've added those let's continue adding more styling so let's pick out the log left this time and i'm going to say that log left and actually log right so we can do it this way um or we could just give them all the same class but i'm going to choose to do it this way and i'm going to give them the background color of light blue so now that we know where that is it's here we've essentially made like a sort of uh i guess river that we have to cross where all our uh all our logs here are going left or we that's what we plan and all the logs here are going to be going right so that's what we've done let's do the same for anything with the cars now so i'm going to pick out car left so dot car left and dot car right and i'm going to give it a background color maybe of like light gray this time because this is going to symbolize a road that we need to cross and once again it seems we have missed a very important div so maybe let's fix that one two three four five six okay so we're going to add one here and then we need to get rid of one of these okay so hopefully you are now at this place where you have this kind of styling if you are great if not please check out the code that i have shared in the description below this is what your game should look like at the moment and now it's daily time actually let's go ahead and add a few more things to her html before moving on so we've made our grid the other thing that i want to actually show in here is how many seconds we have left so i'm just going to go ahead and add an h3 tag that's gonna say second left and essentially we're gonna count down the second so i'm gonna add a span tag and the span tag so make sure that says span it's gonna show us the time we have left so i'm just gonna hard code a 20 in here for now but i'm also going to pick out the span tag by giving it an id and i'm going to give it the id of time left so we've done that i'm also going to do the same for result so h3 results and once again i'm going to give it a span tag like so and i'm going to give this an id of result okay which we're just gonna leave like that or we can hard code it as a zero i'm also gonna give a space here just to space this out a little bit and great one other thing i'm actually going to add is a start pause button so here is a button and it's going to say start the game or pause the game if we want and let's pick it out so i'm going to give an id of um start pause button okay so i think we've got everything now so the only thing we've got left to do so after all of this has been loaded we then want to go to our javascript file so i'm going to make a script tag uh and i'm just going to the source which is going to be the app.js file which we are yet to make so let's go ahead and make that make sure that the bottom of your body tag so in between the two body tags after all the html that you have just written so let's make a new file this time it's a javascript file i'm going to call it app which is just showing up here as app.js thank you webstorm for doing that for me and let's start picking stuff out so first things first let's actually pick out everything in here i need to pick out this span element and i'm going to do so by the id so in my app file i'm going to use document and a javascript method called query selector let's make this a little bit bigger query selector making sure that's where the capital s query selects that and i'm looking for the uh element with the id of time left so this needs to be an id and let's say this is something i'm going to save this as the time left display just like so so we've got the time left display the next i mean to pick out so let's go ahead go let's go looking in our file again so we need the query selector and let's go looking for the span with the id result so i'm looking for an element with the id this this means id of result and let's save this as result display you got it you can of course call it whatever you wish so we've picked out those things let's also pick out the button so once again document query selector and let's go looking for the id of start pause button i'm going to save this as the start pause button great so i think this might be it for now actually let's go ahead and pick out all these squares as well so every single little div that i made so let's save this as squares and i'm going to use document and query selected this time all because i want to pick out all all the divs that live in the div with the class name of grid so the dot is saying i'm looking i'm going to go looking in here i'm looking in here and i'm looking for anything with a class name of grid this dot means class name so i'm looking for that but then i'm also looking for the only the divs inside of it okay so i'm looking for all of these and i'm saving them under the const squares so hopefully that makes sense let's carry on so first off i just want to add a little green square which is going to be my frog and i want to essentially add it to the board and then i want to move it with my keyboard so that is the next steps that we are going to do so let's get this up and let's write a function called move frog okay so this is a function that i am going to write and what i'm going to do so each time that i essentially move a key on my keyboard so we're gonna have to listen i'm just gonna console.log this out for now console.log moved i essentially need to listen out for any time that uh i press a key on my keyboard so i'm going to use document and then i'm going to use add event listener and to listen out for the event of key up so there's many many you can choose from there is a list on mdn there's like click but i'm going to use key up there's also key down and so basically each time i press any key on my keyboard any key at all i'm going to uh invoke this function okay so this is the callback function if this happens then this function is called okay cool so at the moment if you see here i'm just going to get the console.log up i can press any key moved moved doesn't matter right any key however now that i um know that is working i want to decide which keys are going to move my mail my uh frog sorry and where it's going to move right so let's go ahead and do that so what i'm going to do is first off let's go ahead and add our frog to the board so i'm going to make a class of frog as well dot frog and i'm gonna give it the background color of green and we're gonna add this dynamically in our javascript so i'm gonna use these squares actually i'm going to grab all these squares so if i go ahead and actually console log all these squares this is what they will look like i've literally picked every single one up from my html and put it in a huge array or no list and they are here with the class names so that's all i have done and i'm going to use that so i'm going to go into my squares array okay and wherever i am at the moment so let's choose which index we want to be in so i'm going to say let current index equal and because we start counting from zero so like this div has index zero this one has one two three if i say my current index is zero i should be here so zero and if i pass a zero through into my array or in other words as we now know it as current index and then i do class list add and then i add the class of frogger or frog sorry where do we expect uh this to show up when we press the key so i'm gonna press a key that's right it shows up here because this is the div with index zero okay is the first div in our array if i change this now to be two it will be let's press the key here because this is the square with index two zero one two okay so hopefully you got that let's carry on so this is gonna decide where we start we wanna start at the uh starting block so there's our starting block this actually has the index 76 so let's go ahead and change that to start at 76. so if we move frog well i only want to move the frog actually if we press a certain key so i'm actually going to use the switch case for this this is the javascript switch case and i'm going to pass through e key and if the case is our left so essentially what we're doing is passing through the event into our function and if the events key is our left then what do we want to happen well at the moment we're just going to put console log move left because that's what we want to happen let's maybe make this a bit smaller now and we are going to break so there's our first case um let's do another one case arrow right we're gonna move right let's do arrow up move up and do arrow down and you guessed it it's going to move down so let's see if this works first before we do anything else so now let's press up we're getting move up let's press left move left move right and move down so you should be pressing the arrows on your keyboard and you should be seeing these show up in your console log this works because we are passing through the event into our function and then getting the key of the event if i console log out the event so e is for event each time we press it you'll see how much information that actually is so if i press up oops console log is not defined con sol log let's press up now see okay so this is all that's happening there's so much stuff and we're looking through it we're going oh my god there's so much stuff but i want the key and the key is arrow up we could use the key code but this is sort of depreciated now so it's safer to use the e key cool so great hopefully that makes sense so how do we move left well to move left it's kind of simple really we just want to be in the index that's minus one of this so we're gonna get the current index and we're just gonna minus one from it just like so okay i'm going to save it back to index so we can write it like this or a shorthand for writing this it's just taking current index and saying that 1 equals so that will now change whatever current index is so if i press move left current index will now be changed to 75 okay so that's all i'm doing and to move right we're just going to get current index and we're going to add one to it so plus equals one and to move up well this is probably more interesting because we're actually going to use the width of the grid so we know that the width this can be a constant as it's not going to change is nine because we have nine squares here so if i want to if so say if i'm here and i want to be in this square here and this square is index 76 well this square is obviously 76 minus 9 right so what do you what even is that index 67 where we simply minus equals the width which we know is nine okay so now if we press up we are essentially making current index we're getting that value 76 were minusing 9 from it which is giving us the value 67 cool and of course then to move down it's just the opposite so current index plus the width great so let's see how that looks however we're leaving a very long uh thing of frogs behind us and of course if we try to move down we can't do that because there's not only divs so everything is breaking as you know we can't move in here so let's fix all of this so before i call each function i'm actually going to remove the frog from whatever square it's in okay so i'm going to use class list remove so this means that if i press up so let's go ahead and start off actually with maybe we should um add the frog class here as well so i'm just gonna go ahead and add the frog class okay so we're here and if i press up the first thing that's gonna happen is i'm going to remove the frog from the current index so index 76 so i'm going to remove it from here and then we're going to add do all this additions to find out what our current index is based on what key we pressed and then wherever we end up we're going to add the frog class again okay so hopefully that makes sense let's see if that's worked wonderful so now we can move around okay so the next thing we want to do is actually limit our movement so that if we go into this column here we can't move anymore because otherwise we end up on the square on the other side and we don't want this behavior so similarly to being here this will cause breakages okay because there's no div to go into on the left side so what i'm going to do is use maths for this i'm going to use modulus and what i essentially need to do is say that any square with the index is 0 or any square with index 9 18 and so on so any of these numbers if they are divisible by nine and leave no remainder so that's what i'm going to write so if current index so whatever square index we are in index modulus width equals zero so if this is true we are we know that we are either in this square this squared this square the square the square all these squares we know we are here okay so if that is true we don't want to be able to move left but otherwise we can so actually what we need to do as long as the current index does not equal zero then we get the current index and minus one from it but if it does equal zero well then this is not true so we don't do anything okay hopefully that makes sense if i replace this with numbers maybe current index at the moment when we are oops that should say current index so at the moment when we are here we're in current index zero zero modulus nine because we have defined width as nine here does in fact equal zero so we don't do this okay same as if we are here this this square has the index nine and nine modulus nine does equal zero so this is not true so we don't do this okay however if we're here then this statement is true because the remainder will not be zero so then we execute this so we are able to move left i know that might be a lot especially for those of you who are not familiar with uh the modulus operator so please pause here um maybe get a piece of pen and paper and write down the equation because it is it's just maths at the end of the day great so we're going to apply the same logic to the rest of these uh let's do moving right next so this time we want to move right as long as uh the remainder is smaller than eight so if current index modulus width okay and the remainder is smaller than width which is nine minus one if that is true then we want to add one to the current index okay only if it's true and let's do the rest as well so moving up this one will be if current index this time minus width is larger than equals larger than or equals zero so as long as we are essentially in this row okay or anything under it then we can move one up however if we're in this row so essentially if you know the uh index so for example let's do this again so if i'm here we are in a current index with this index one so replace this with one one minus width is minus eight right so minus eight is not larger than zero which means we can't execute this which means we can't go up however if we are let's go one down so this has the index ten ten minus nine is larger than zero okay so then we can go up okay because 10 minus 9 is 1 and that is indeed larger than zero okay and one last one going down if current index plus with this time is larger than width multiplied by width then we can move down because essentially we're checking that if we're in any one of these squares minus the last row again get out your pens and papers and pads and just uh literally just try it out yourself just go into any of these and be like oh i'm in index square with index whatever and see how that works so great hopefully that makes sense i'm just going to get rid of these console logs and let's test it out so we should now be able to move everywhere correctly so we can't oh we're stopping there i'm actually pressing the right arrow nothing's happening i'm pressing the up arrow nothing's happening i'm pressing the down arrow fine for fine and stop i'm pressing yet nothing's happening and we go left and great nothing's happening i'm not getting any breakages either there's no like red in my console log everything is looking good wonderful so what we need to do next is get some logs moving right and some cars moving so let's go ahead and do that next so to move the cars and the logs actually i'm going to go back in here and give these we can just add to the class list perhaps we should do by class list rather than id as we are going to actually yeah okay let's do that so let's give all of these an id sorry a class and i'm not using id because i'm going to be repeating these um again so just in here i'm going to add a new class this is separate to this class we're going to need a space let's give this l1 let's give this l2 l3 f4 l5 and now i'm gonna stop at five and this will become apparent soon i promise i'm just i just don't think there's any point giving all of these squares in a row an id when actually we just want uh the colors of the squares to be changing based on uh five squares this really doesn't make any sense now but it will i promise so i'm going to give this the id of l1 again l2 l3 so now anything with this class is going to have the same behavior and so on and so on and let's also to l4 now the log right i'm going to start with l5 this time and then l1 two l3 l4 l5 l6 l7 oops not l7 uh l1 again l2 l3 so let's start with the logs first so what i'm going to say now is that anything with the class of l1 or l2 or l3 the classes of those are gonna have the background color uh brown and then anything with l four and l five is going to have the background color like blue okay so in actual fact we don't really need this anymore so i'm going to show you i'm going to comment this out because now we're using these classes to color in everything with log left so there we go we've essentially made one log another log and another log and another log and we want these to be going left and we want these to be going right and as you will see this is l1 so all i'm gonna do is just change the location so it looks like it's moving left okay by literally getting l3 and we're making it move to l2 l2 to l1 okay so just doing that and doing it again and so on and so on but not all the way because we only really have to account for these okay because from here on it repeats itself right okay so hopefully that makes sense this should this should move like this one and then this should look move like that one and this should move like that one okay so we've done that so what i'm going to do is write a function so i'm just going to make some space so we can see everything a bit better so what i'm going to do is write a function called function function called move log left and all i'm going to do is use the switch case again so switch and we're going to be looking for true statements okay so if this is true well what i want to do is actually get uh i want to go in here and pick up everything with log left so we know how to do this now i'm just going to do this up here so const log left plural equals document query selector all remember so just like we did to pick out all the divs in the grid and i'm going to look for anything with the dot so the class of log left so i've just collected anything that has the class log left and we're going to check if they have these classes so let's go ahead and grab all the logs left and actually i'm now going to write in my another function actually function auto move logs and i'm going to grab logs left and for each so for each of the divs with the class of log left i'm going to choose the call log left you don't have to call it log left you can call it whatever you wish that is how four each works and for each of them i'm going to actually pass them through the move log left function so each of them will now be affected by this function move log left and i'm going to get the log so or the div with the class of log left i'm gonna put it in the function so put it into this function now boom put it in here and if so if log left class list contains l1 okay so essentially again what we've done is we've grabbed all of these divs we've saved it as logs left and now i've got all of these divs so each one and i'm passing it through into the move log left function so i'm getting a div and i'm checking if it has a class of l1 okay and if it does well what i want to do is get that log left or the log going left class list remove l1 and instead log left plus list add l two because we're going left so we need to replace it with l two right because l1 yes whatever this one is needs to be there okay so perhaps maybe i'm just going to show you how this looks at the moment so i'm just going to call the function automotive logs but of course we need to uh put this in a timing event right we need to essentially make this execute uh you know every maybe second or so so i'm gonna do this down here i'm gonna say uh we need to put this in a set interval so i'm just gonna put set interval auto move logs and let's do every 1000 milliseconds so every second oops let's get rid of that you will see that this has now changed to l2 it's obviously hard to see on here because they're all the same color but this has now changed to this which means we need to change this l2 to an l3 and so on and so on and so on so we're going to do all of that so case in fact i'm just going to copy this if it contains l2 then remove l2 and add class l3 and same for l3 if it contains l3 remove l3 and add l4 and we need to do one more actually two more sorry if it contains l4 remove l4 and add a5 and of course if it contains l5 remove l5 and add one so now if i refresh this usually you should see them all the top row moving one to the left there we go and of course is doing it every one second so if we look in here boom boom we're literally just changing this to that this to that this to that and it's looking like it's moving so hopefully you now see why i did that of course you could have done l1 you could have done all the way up to l9 but there's no point because actually the rotation only happens on five squares okay so that is what's happening see if you take any of the one two three four five and then essentially goes right here one two three four five and it goes back here okay even though it visually doesn't look like it that's what's happening so great hopefully that makes sense now that we've done this we're literally just going to apply the same thing to this row and then the cos so let's do it this is good for repetition and good for um learning again so i'm actually just going to get all of this move log left and call it move log right and we're going to pass through the log moving right and how do we get this well we need to look into our document and get all the logs moving right by picking out anything with a class name log right so we're going in here we're finding all of these okay and once we have our logs right because there's many of them i need to get each one so logs right for each log going right so for each div essentially i need to pass that div through move log right so i'm going to pass it in right now look right now that's being passed into here and if this so we're passing true because we're looking for true statements so if this is true however let's change all of these to log right now so ctrl g we'll do that on webstorm log right if this is true well now we need to go the opposite way so if it contains l1 we change it to an l5 so we remove l1 and we add l5 so now we're going the other way if it contains l2 we remove l2 and add l 1 3 3 so we go the other way l2 4 4 three five five four so once again let's check it out of course we need to okay so that's being called in the auto logs rights log right and let's see amazing so visually they're going the other way cool now let's do the cars so the cars um let's decide i guess we want the cars to be smaller right like two squares so let's color that on our board first but once again i'm going to actually just add the same well no because they're smaller we're only gonna have to have a rotation of three so let's go ahead and do that now all i'm gonna do is do c1 c2 and the car is gonna just be one square c3 c1 c2 c3 c1 c2 c3 and do the same here c1 c2 c3 c1 c2 c3 c1 c2 c3 so now let's go in here and pick out that anything with the class of c1 is going to be our car so let's just give it a background color maybe like black or something and then also that means that c2 and c 3 are now going to be our roads so what color do we give the road light gray let's get rid of these don't really need them there we go so there are cars and now let's make the cars rotate so i need to go from this one to here to here to here and then change from here to here to here and same for these so let's do it i'm going to go in here and let's write a function um i know i have to auto move cars and auto move logs but we could just auto move elements instead right so that we can just put everything in there auto move elements and now let's write a function once again like pretty much exactly the same just a little bit shorter so let's pick out anything so const cars left equals document query select all i'm going to look everything for the class of car left and do the same for cars going right cars cars right cos right cool so that means logs left this should be capital l sorry which means i've obviously done that somewhere else logs left okay so that means that once again i'm just going to get my cars going cars going left for each car left i'm going to pass it through a function which i'm yet to write called move car left and pass through the car left and do the same for cars right car right move car right okay so let's write our function again i'm probably just going to copy this because it's pretty much the same let's start with the left one paste it here move car left car left and if let's just change these so control g car left class list oops car left cliff car left class class list contains c1 then remove c1 and change it to c2 again here c2 c2 change it to c3 and c3 c3 but this time we change this to c1 so it loops the loop stops there and let's just get rid of these and now car moving right so i'm just going to use ctrl g car right and we go the other way this time so this should be c 3 this should be c1 and this should be c2 okay there we go everything is moving this is looking good the next thing you need to do is actually decide what's safe to go on what isn't and also we need to make sure that we can see our frog at all times so i can do so easily in two ways the easiest is probably just to move this down to the bottom so it's the last styling applied so there we go you can also use important to overwrite any classes great so i think now probably let's decide what makes something safe to go on or not so i'm going to write a function to check for a lose so let's do that so back in here i'm going to write a function called lose and let's define what happens so what happened if essentially let's say if you hit a car which has the class list c1 then the game's overwrite because you know the car hit you uh but also if you go in the water you also the game's over right and the water is this one so if we go in here if our current index where we are contains the classes c1 or these then it's a game over so essentially if we look here again so if our current index is any one of these at any point so say i'm in this div and it has the the class list uh like c1 for example any point then the game is over so we need to check for this so what i'm gonna do is say if current index so we need to get our squares actually all the squares so all the divs from our board that you remember from before and if squares let's go into the array and we're going to pass through the current index so if current index is 0 we're going to get the first square in our array and if that square class list contains c1 so the car well we know that's a game over right so what am i gonna do i'm actually gonna get the result display which we've already picked up out here oops and i'm just going to do text content you lose so just like that and i'm also going to actually stop this so let's assign this to a um id i have to do this up here actually so let timer id at the moment it's null i'm just leaving it as null this is a shorthand for me doing that and then we need to assign a sentence interval to the time id which means if i want to stop this i just need to pass the timer id through clear interval so clear interval timer id and let's actually remove the uh frog so the frog obviously is here because wherever the current index is that's where our frog is so class list remove frog okay and also let's remove the uh event listener so document or remove event listener so we're gonna stop listening out for key up on our keyboard that essentially moves the frog great and let's check for the lose uh where do we want to do this i think maybe with the with the lose piece with here so each time everything moves i also want to check for a loose okay so that will be checking every one second to be precise so let's see if that works i'm just gonna go here and then i'm gonna go here and up we lose because the car hit us so once again maybe a bit slower let's stand here and wait ah okay we get yule is showing up the frog disappears and now obviously we can't move anything the uh it's not listening out to our key ups anymore and even if we wanted to we couldn't move the uh mount the frog i guess because you know we've removed it so actually that's not technically true because we add the class of frog in the move frog function so we do need to remove that event listener cool so this is looking good let's do the same for if he goes in the water so if this is true or that's how you write or or it contains what is the water like blue l4 or l5 so contains l4 oh contains oh five okay so that is it should we try it out just so everyone's on the same page so let's actually try past this without getting hit oh well yes okay so we got we fell in the water so that is looking good great now the next thing we need to do is uh see what happens if we win and if to to win we just have to really get to the red thing which is our ending block so that's the class we're going to check for this time so function win if squares current index class list contains uh ending block well then let's also do all these things so clear the timer remove the event listener maybe let's not let's not remove the frog because you know be nice to see the frog uh you win but we do clear the timer so oops let's put this function function why did i do that make sure these are parentheses so the curly braces these are parenthesis and these are curly braces okay so let's also check for this every one second after moving everything so cool now let's actually try get to the end so this is gonna be fun uh and then i need to stay on these you win cool and then everything's taken away so great the last thing we need to do is just add the timer so let's do it let's add the timer so i'm going to start off with the time uh let current time and let's say we want to do this i'm just going to put five seconds for now because you know i don't want to wait around loads in order to see if this works but we can change it to something later and all i'm going to do is so we need to show i'm actually going to do it when we move everything so in here as well i actually so each time this function gets called i want to get the current time and just minus one from it okay and then i want to show it in the time left display so i'm going to use time left display text content current time and because we um we hard code the number 20 there so by the time this happens we take away one from whatever the number that we saved up here is so maybe let's make this 20 just to make things easier so it's starting off as 20 but then we call this function and we take away one from 20 and we show 19. so this is looking good i think that should be fine we also need to write what happens if we hit zero right so if where's the lose function so another thing that we need to check for is if the current time suddenly equals zero or is less than or equal to zero then also we lose right because essentially the game is kind of over so great so if that is true we also lose and we clear everything out now i can also so let me just show you what this looks like again we are going to have to wait till 20 so i'm going to come back to this we can also hook up the start pause button to essentially pause our timer from uh counting down so i'm going to do this by grabbing the start pause button let's just check how much time we have left four three two one you lose okay because we run out of time and then that's just staying at zero cool but if i want to start the game because at the moment it just sort of auto starts uh we can use the start button to do this so all i'm going to do is get the start pause button and choose add event listener to listen out for clicks on it okay and if it is clicked i could write a function should we write a function should we just do it in here and i'll do it in here just to show you that you can also just write the logic of a function here so start pause button why is it not liking this does this not exist stop pause button start pause button ah start pause button okay start pause button add event listener if timer id exists because at the moment when we press start time this will be null okay so if we press again and there is a timer id we just want to clear interval timer id okay we want to pause it else timer id equals set interval and then we essentially just move this whole thing actually just to here okay so we move that in here and we also move the part where it listens out for the key frog for the sorry for the movements of the frog for us moving the keys so i'm going to actually take this and only allow this to happen if we have pressed the start button okay so whoops to make this a function we need to actually do this so that is now a callback function and great so once again say we are playing this game for the first time we've just started the game timer id as we set it up here is null okay so we press the button we click it timer id does not exist so we don't clear the interval so we just go to set up set our countdown going essentially so we automate the elements every one second and we enable us listening out to uh key presses so we can move the frog however if we press the button again so at this point a timer id does exist right because our countdown is going then we stop it we clear the interval and whatever time we are left with is the current time so let's check it out so obviously nothing's happening stop so i can move it i can move it i can move it to pause ah this shouldn't i should not be able to move that so when i paused it i also want to remove event listener let's try again start moving around pause okay and i can't move the frog anymore and start it's console of the time id to see what's going on so stop pause obviously exists i'm going to press it again ah timer id we need to assign the value null again so let's try now start oops start pause restart okay cool so actually you know what we probably need to check for these collisions way often because if i'm fast enough it doesn't register because it only checks every one second right but if we move faster than one second um it kind of doesn't work so i'm gonna move the check for um lose and win and i'm gonna put it in its own function or own sorry uh interval so time id let's which we call this uh outcome timer id again equal nothing and i'm just going to say out come time id set interval and we're going to check for wins loses and wins so function check out comes i'm gonna put those in there and then i'm gonna check for this every 50 milliseconds so you really can't uh cheat i guess so that is gonna keep going and i guess we'll probably clear it here when the game is you know of paused because we don't really need it going i guess if it's paused so let's stop that and also let's stop it on the lose so again clear interval clear into four so now we should check for this way more often let's try it out start so now if i oh see it's checking way more often now let's refresh stop there's no cheating that's gonna happen so there we go that is the basics the super basics for the game please take this game improve on it uh you know ad levels or perhaps you know you want to be able to start a new game from here instead of having to refresh all these things you can do hopefully now i've showed you how you can take everything you've learned and apply it um let's do this let's try win this okay so actually if i wait here this should be a empty space for me to go soon okay oh i'm not meant to go in the water sorry okay let's do it um i don't know why i have a results we don't really need a result let's get rid of that so i need to go in here and there we go so i won i did it uh the result we don't need that to be a zero because we're not collecting any points so let's just keep the result as this and it'll either say we win or we lose so there we go i hope you've enjoyed this lesson and i'll see you in the next videos in this game we are going to build connect four we're going to take a different approach with this game we have been working with a lot of modulus this is a different approach in which we are just going to define which indexes uh create a match or don't create a match of four so i'm excited to share this alternative solution to you to what you have been doing previously so what are we waiting for these are the javascript methods and properties that you will learn in this section okay so let's do it as you can see here i've already have my project set up with an index html file an index.js file and a styles css file which we now have to hook up to work together i have gone ahead and put in some html boilerplate for us we have a title which no will not appear in the browser it will however appear in the tab which i'll show you later and a link tag so we can link our style sheet now as our style sheet is in the root of our project i simply have to write styles css to hook it up i'm also going to put in a script tag and if you know me i'm going to show you two ways to put in the script tag we can put in a script tag at the bottom of our body so if i just put a script tag with the source and once again it's in the root of our project so the index.js file so that is what our script tag is linked to i'm just going to put a char set as well so char set uh that one thank you very much now if you know me you i will now tell you that you can't be your script tag at the bottom of the body but make sure that is after any html that we want uh to put in or alternatively you can also put it in the header so in the head i'm gonna just put it here just to show you another option because we can also use a dom content loaded we can use an event listener to listen out for once everything here is loaded and some people say that is a more foolproof way so i'm going to show you how to do it now as always the option is up to you if you prefer to use the script tag at the bottom of your um body that is fine just don't use both otherwise you'll have two scripts running so i'm just going to leave mine here because i want to show you how to do this you can also use the document and use add event listener to listen out for when the dom content has loaded okay and then once it has all our javascript we're going to put in between these two little curly braces okay done now let's move on now because i want this to be a sort of beginner lesson we could use javascript to add all these divs for our connectful game but i'm just going to keep it very simple and put them in here in our html so our connect4 game is going to have it's gonna be seven squares wide and six squares high okay but i also want to put in like a secret seven squares at the bottom because we want to tell our browser where the bottom of the grid is and this is just a solution that i thought of of course like you don't have to use it but this is just the way that i would solve it in order to build our game so what's that seven times seven is 49 let's do it i'm gonna make a div that i'm gonna give the class of grid because this is where all the magic is gonna happen this is gonna be our game grid okay so let's call it a class now any div that i'm gonna put in here i essentially want to be or represent the little squares on my connect for game so as i said i'm going to need seven times six for the game but then a secret seven which we will go into later so i need 49 of these so is just gonna face one two three four five six seven eight nine ten of course like i said we could do this in javascript um i do do it i do add these divs with javascript in a lot of my other games so if you wanna check out how i do that it's a create board function that i use pretty generically please go ahead and check those out so one two three four five that's 50 divs i'm just going to get rid of the last one to make it 49. okay now i did say i wanted the last seven to have like a like uh represent the end of our you know connect four board so i'm just going to give them a class of taken again you will see why later on so there's one two three four five six seven great so we've got a div with a classic grid with 49 divs in it now let's actually style it up to uh see it visually so because we want to grab the grid i'm going to grab the class so use a dot for class of grid and i'm going to decide that i want all my squares to be 20 by 20 pixels which means that i need to make the grid well let's first give it a border of one pixel solid and as a default it's going to appear black solid one pixel black and then height i'm going to go with 120 pixels of course and then width 7 x 20 is 140 pixels okay and now while i'm here i'm also going to style every single div inside the div with the class of grid and i can do so like this by once again grabbing the class of grid and then every div inside of that so that's how i would write that is going to have the following styling i just want them to be height 20 pixels and width 20 pixels now i'm just going to give a background color for now so you can see what's going on so now if i just copy the relative oops copy the path sorry and then go to a browser and paste it you will see there's my grid and there are all the squares but it obviously doesn't look right right we need the squares to fit in the grid so i want them to sort of like snake over so i'm gonna do this by adding display flex so now if i show you what that looks like and refresh whoops fresh okay now they're in there but they're all squashed look how thin they are i don't want that i wanted to snake over so i'm also going to use flex wrap wrap and there we go okay so now oh i think we've got too many one two three four five six seven yeah we have too many but that's that is fine seven times one two three four five six seven so we need to delete seven ten more ten of these is totally ten we did a few too many so one two three four five six seven eight nine ten delete okay great so now they all fit if i just go over the one two you will see how they are snaking over and then of course we have the last seven which have the class of taken so so they're outside of my grid and we're just using them to let our code know that this is the bottom of the connect for uh board game is that a board game you know what i mean game okay so i'm just gonna get rid of the background color blue and while we're here i'm gonna add a class of player player player one i'm gonna give it a background color of let's say red and then a border radius because i'm going to make them circles of 10 pixels because border radius on a 20 by 20 square is gonna make this a circle so we've got play one and let's make player two let's move to player two blue okay cool so we've got everything we need now let's start picking out elements from our html and our javascript so we can work with them so the first thing i'm going to do is actually pick out the squares so i'm going to save them as squares i'm going to use document query selector all thank you tab 9 to pick out and once again this is going to be useful because we just learnt this to pick out all the divs inside the div with the class of grid so that's how i would do that so we've just picked out all the squares uh now i also want a way to i guess tell the user whose go is so i'm going to use an h3 tag for this and i'm just going to write the current player is player and then i'm gonna use a span tag to just interrupt that h3 tag and i'm going to hard code a one and i'm just gonna use an id just in case we want to use another span right so i'm just going to put current player and while we're here i'm also just going to put a place we can show the result i'm going to leave it empty for now and just give an idea of results okay so that's looking good and in here let's also pick out uh let's pick out the result so const result equals document query selector i could use get element by id but it's totally up to you i'm going to use query selector to look for an id so we use the hash for id we're looking for the id of result and another id we need to pick out which is the uh display for the current player so i'm just gonna display current player equals once again we get the document oops and we use i'm gonna use query selector again just to make everything consistent i'm going to look for the id and save it for our javascript okay we also need to let our javascript know who the current player is and we hardcoded once i'm just going to put this here two i've used a let as this will not always be one it might be player two so that's why i use the let there okay now i think the next thing i wanna do is add um an on click to all our squares okay so i want uh essentially something to happen every time i click any of the squares in our connectful grid so i'm going to use a for loop for this oops making sure that i'm in the curly braces four let i equals zero and now because we're dealing with the squares uh i could use the square's length that'll mean even including all the taken squares and i think that's fine let's just carry on and see what happens okay so for each of the squares in my squares in my grid sorry i want to get the squares and then for each one because they're looping so i'm going into the array and i'm looping i just want to add it on click and then on the click and we need a function so i just use an arrow function for now i'm just going to make an alert that says you have clicked square just so you can see what's happening i want to show you so i'm just going to use the i and save now let's refresh so if i click here oops you have clicked square 13. let's refresh i'm going to click the first one you have clicked square zero because as you know we start erase from zero okay so this is working we have added an on clip to each of these squares including these ones but for now let's just ignore it um we'll decide what we want to do with that later but i think that's fine cool it's pretty fun isn't it we know exactly which square we have clicked yeah okay so we actually don't want this alert i've just done that so we you can see what's going on before me coding any further because i think that is important okay to delete well the first thing that we want to do is decide how we're going to solve this so obviously in connect four when you drop the little um token we need to account for gravity right so i think let's do it that if the square below your current square that you want to go is taken you can go on top of it right simple so that's why we added the class of taken at the very bottom because at the moment we're going to write something that says you can only go on that bottom so only on this row because all of these have the class taken so if the square below your current square is taken you can go on top of it cool i'm just going to minimize this because we don't need it so how do we write this in code if we go into our squares array i'm just going to use i but i'm going to add 7 because i want to check what's directly below the current square that we are so we do that by adding 7 to the index number of it and then if that square class list contains k can well we can go right so i would do it like oops this so if that is true and the square directly below us is taken uh if the current player equals player one thank you tab nine if the current player equals player one i don't know why it keeps formatting like that i don't like it um well then to that square so once again that square i'm gonna add the class list um i'm gonna add well i'm gonna add taken for one because it's obviously taken but i'm also gonna add square list class list add player one okay and then of course we want to change it to player two so current player equals two um and then let's display it so display current player in html uh and let's just display whatever the current player is because we've just changed it to two so let's actually show that visually to our user okay ah click okay cool is changing okay now it's player twos go so we can't do anything so now now let's write some logic for if it's player two um if current player equals two well then essentially we just it's going to copy this really because we're doing the same but just we're gonna add player two and then change it back to player one cool um and then i'm also just gonna add an you know like an else because we've got these if if this or we could just um we might have to do an else if i think we might have to do that okay yes we might have to do that else if else alert uh can't go here okay so now change player two player two goes let's play one again player two oh can't go there where's my alert am i allowed it's annoying hmm what did i do ah right i put it in the wrong place ha ha else if alert okay so now one can't go here can't go here but play two can go there can player one go here yes it can so awesome so that's why i did the else if if i just got rid of this and just did an alert well obviously yes i know i can't go there i can click here it'll just tell me i can't go there even though i can because it's uh sort of like executing this and then executing that anyway so that's why i did else if else cool okay so we've done that part of the logic the last thing i need to do is check the board for wins so i'm going to do that with a function um this i do actually want to execute every time we click so there's no need for else if we just want to check the board every time we click on the square so now let's write our function i'm going to do up here of course because we need to write it we need to write the function before use the function so function checkboard like so now this might not be like the most uh i guess it's a lazy way to check for wins i mean if you want to uh i guess make this cleverer please do and share with me i just couldn't be bothered it's a small board right so i've just gone ahead and figured out all the winning combinations on it so please feel free to take this i'm going to obviously put it in my um github but i've just got a winning uh a raise array again if i've got any wrong in here i'm sorry um let me know the cons bring your arrays and there we go so i have literally just pasted all the possible winning arrays uh so by using my index number of course on our board once again if you can think of something clever then please do i'm really lazy this was fine okay so we've got our winning arrays now let's actually use them in order to check our board if any of the players have a winning array so to do this um well again i'm just going to use a for loop so for this time let uh i we can use i we can use y like it's totally up to you whatever you want okay so as long as y i'm gonna get the winning arrays uh length it's gonna loop over but we're going to loop over each one of these right we're not looping over this this this this we're just looping over one two three each of these so however many of those are that's however many times we're going to loop and increment by one now um it's always i think it's always important to use const as much as possible we don't use a let this is blocked scoped so that's why i'm using a const we're gonna say for each time we loop we're gonna save square one square two square square three square four so i'm literally just gonna name it square one square for the square one we're gonna go into the squares array this time so it's const square one well let's just say we wanna get the index thirteen we need to go into our squares array and then i'm gonna literally pass through so i'm to go into the winning arrays and go into the so i'm going to loop over the first one so let's just say we're doing our first loop i'm going to grab this so i'm going into the winning arrays going into the array and i'm grabbing this and then i want to get the first item from it so i need to pass through a zero so that is how i would do that and whatever that is i'm saving a square one okay so i hope that makes sense i'll talk you through again we now need to get square two so what i would do is um of course we're checking on our squares grid so if i've just uh checked yeah this square on our board with index zero so for example let's go back to our board say i want to check this is what we're checking we're taking square with index zero one two three four so we're checking those so of course i would then need to go into my squares array i'm gonna go into it and then i'm just gonna pass through this value so i'm going i need to now get this value which is a one so i need to go into my winnings array this is an array so y still because we're still in the same one so whatever y is is going to be the same for this so winning arrays and then i need to get the item with index one so zero one so this will return all of this essentially is returning back one the number one okay so i'm going into the squares array i'm going into the squares with index one okay so hopefully you get that i'm just gonna carry on if you don't please feel free to reach out and i'm happy to explain further and one more of course because we need to check for four matches and there we go so we are looping we're grabbing all four squares that we want to check okay so now we want to check um check those squares to see if they all have the class of player 1 okay so if um i mean this is probably the easiest way to do it i'm gonna go if squares one i mean we could do another loop but there's only four so i don't think it's worth it but please feel free to do another loop if you wish i'm just going to go squares class if square if that first square that we picked out if it has a class that contains oh god contains a player one so if that is true and the second square contains play one how do i do this so it looks neat uh there you go and the third square contains the class of player one and the fourth square contains a class of player one and if all that is true well then we want to get our results that we picked out was it result oops don't want that i think it was result results okay you want to get a result and use inner html to say player one wins okay and of course i mean let's just copy this for player two just make sure that it's an if statement i'm just going to copy all of this actually so we have the pseudo coders as well oops okay i'm just going to use command d two player two wins okay i think that's all we need uh whoops we did this outside of our for loop so i'm just going to get all of this here's our function okay but then we need to actually put all of this inside okay i'm just gonna make sure if then this oops then otherwise this so that is our loop great i'm just gonna format this a little bit better so just go command so just tab it out and click save and there we go so now we play the game i just need to make sure we can only add players if that space is not currently taken okay now let's play so now we play the game and we get four so there we go three four tada we have now finished our game of connect four you will see that the game works okay so that is how i would build a game of connect four in a super simple way please do feel free to take this game make your own silent up give it next extra levels if you can think of a funky way to not have to write out all the winning arrays then please do let me no like i said i was pretty lazy with this and i just stuck them all in there because i thought you know like it's it's a small grid thanks so much again for watching and i do really want this to be a conversation so yeah please do uh show me your games okay nice later in this next section we are going to be building space invaders this game is a classic another retro classic in which you as the little guy right here have to shoot all the space invaders coming down before they get to you okay so a lot of timing events here it's a gridbased game so a lot of stuff that you would have already covered is going to come up a lot of modulus work and so on so these are the uh javascript methods and properties that you will be covering in this section let's do it okay so to start off i have actually already premade my files so the html file with some boilerplate i've named my project space invaders i have linked the style sheet to the style css file which currently has nothing in it and then i've also linked the javascript file to making sure that the path names are of course correct okay so that is my boilerplate done apart from that i have nothing else in here so this is where we're going to be starting off are we ready let's go okay so the first thing i'm actually going to do is in the body i'm going to make a div and i'm going to call it grid we'll give it the class name of grid so we can style it up so that we can see what we are working with and in the style sheet let's just make a grid now i'm gonna actually predecide that all my squares in here are gonna be 20 pixels which means if there's 15 it's gonna be 300 pixels so width 300 pixels height 300 pixels and then i'm gonna give it a border solid black one pixel okay so just save that and now if i open this up so copy the path paste that okay there's our grid it's going to get the console log out too essentially all the magic is going to happen inside there and then we're also going to get these squares so i'm just going to perhaps make sure that every div inside the grid that's how i do it that's a class name and then in here each square is going to be what do we say 20 pixels 20 pixels height 20 pixels okay so that is looking good the other thing i need to do is make sure that when they go in here i'm going to use display flex i want them to wrap around each other so flex wrap wrap okay so now let's go to putting some divs inside the grid i'm going to use javascript to do that so to this i would have to get the grid so i'm going to go const grid equals and then get our document i can spell document click not create element but document uh query selector and we'll look for the class of grid so make sure that's a class and store that as our grid now i'm going to use a for loop let i equals zero to essentially put 225 because 15 five times 225 squares in there so that's a for loop to do so and then for each time it loops what we're doing i need to make a square so const square equals document and this time i won't create element but i want to create a div and then i want to get the grid and i'm going to use the pen child to put the square i've just created inside my grid so that should work let's just check it out refresh elements so now if i look in here let's see you will see 225 divs have been created and put inside my grid let's carry on okay next up let's actually get the invaders so alien invaders and then i'm just going to make an array and then exactly and use the indexes to figure out which indexes i want to essentially put the aliens is and i'm going to make it three rows of them 17 18 19 20 21 22 uh 22 23 uh 24 so i think these indexes okay and then uh 0 15 30 because it's 15 by 15 23 33 34 35 26 37 38 39 okay so that's looking fine those are the indexes i want my aliens to be in so now i actually need to get all these squares so i would do this i'm going to do this up here after i've put in all the squares cons squares equals document query selector but this time i'm going to use preset all to search for all the divs inside my grid and save them as squares and then i might as well just make use array from to make an array of this so now let's put my invaders actually in the uh squares themselves so i'm going to write a function for this function draw and then in here uh another for loop so four let i equals zero as long as i is smaller than the alien invaders length because we want to loop over all of the alien vedas increment i by oops i the increment i okay so over each of the aliens i need to go into my squares array i'm going to pass through the alien invaders i so i'm essentially going to pass through this this this this this each time and then i'm going to use class list add and i'm going to make an invader class so the invader class well invader um let's just get a background color of purple and then let's just make a circle so border radius 10 pixels because i'm going to be taking that and adding that to it so let's just see if this works i'm going to add the class of invader okay so now if i go draw just call that function okay great we've got all our invaders uh now let's get to drawing our shooter so once again i'm going to go into the squares array i'm going to pass through a random number so let's just say 200 class list add shooter once again i'm just going to copy that and just write shooter and make this red let's make a square though uh and then go here and refresh so 200 maybe we want to add two more so to make it more central so i'm just going to put current current invader shooter index shooter index and then i'm going to save the number 202 to this let current invade into 202 so now this should be in in square index 202 great this is looking good so we've drawn all of them i think the next thing we should do is actually get some stuff moving so let's actually uh start moving the shooter so function function move shooter okay so for this i'm going to be using keys on my keyboard so i'm going to pass through an event the first thing i want to do is actually remove the shooter so we've got drawer shoes no we don't okay i'm just going to remove the shooter so from wherever he is we want to remove the shooter wherever he is on the board and then i'm going to use a switch to essentially switch out the key that i am pressing so this is a switch statement and the first case is going to be arrow left just for our left correctly that's the first case if current shooter index is modulus width so we're just checking if it is uh not equal to zero so as long as the shooter is not on um to if this if it's divisible by factor 15 and leaves no remainder we know we're at the right edge right hand edge okay so as long as it's not zero then we can move our current shooter um uh one to the left okay because it's minus one and the array which is going backwards one and then we break and then we need another one so this times case for arrow right okay so if this time let's get the current shooter index and this time if it's modulus width and that is smaller than 14 or like in the first case 14 um so essentially this time we are checking if it is as long as it's not in the right hand side then our current shooter index can move right so we're essentially just adding one to it so hopefully that makes sense uh and then we break out of it and then we need to redraw the shooter in its new position so outside of the switch case i'm just going to add him again okay so that should work i'm going to link this up to an event listener to listen out for not clicks but each time you press our key down on the keyboard and then we want to call the function move shooter so let's test that out okay so pressing left and that is not working width is not defined right we didn't define width or silly of us let width of the grid be 15. okay so now it's going to move and it's going to stop because it hits the edge movement is going right right right and then it stops okay so that works let's carry on now we need to move the invaders so function move invaders so now actually that worked for here we define the right sorry the left edge and we defined the right edge i'm actually going to define and store it now so left edge equals and this time i'm going to go into our alien invaders array that we made and if the first of the alien invaders is modulus width and that deeply equals zero okay so that's how we know we're on the left edge because we're in the left column because all these values uh modulus will give you a remainder of zero so there we go sorry of course i'm rushing this because it's a speed thing but i definitely do look into modulus if you don't know much about it i do a bit of it in my course so once again let's check the right edge and to do this i would get the alien invaders length so i'm passing through essentially whatever the alien length is minus one because we're working from zero we're pushing it through the array and if the very last invader is in a column where modulus width minus one then we know we're on the right edge so essentially we're just sort of rewriting these two in a different way so we've just defined our left edge and our right edge once again we're going to have to remove the invaders so actually we've got a draw invader here i'm gonna make a remove invader too by copying that and pasting that and i'll call it remove uh remove okay so i'm going to remove the invader the function is called remove so i'm just literally going to write remove the invader first until we can do our logic so this time well let's just get maybe focus on the aliens just moving in general so i'm gonna do this by okay so for let i equal zero so i need to loop over each invader and assign it a different position right so alien invaders length so we're doing it for each alien invader in our array i uh okay now we're gonna get the alien invaders oops pass through an eyes because we need to have each one and just add a one to it okay and then i'm gonna just draw the invader so now let's put this on a set interval so i would sort of do it uh like this set into file and then i'm going to put move in faders and let's do it every 500 milliseconds so let's see if that works refresh okay so great they're moving but they're obviously just moving one way um and they're going through everything so that's not great i'm gonna swap this out to be direction okay and i'm just gonna put let direction for now it's a positive one but if we change it to minus one it will go the other way so that's something that we need some logic we need to do and i'm gonna put this on a id so we can clear it invaders id yet invaders id so i'm not that's just null for the moment okay so we've got that so far uh the next thing that i would like to do is actually do some logic so i'm going to do that above here if okay so let's do for if if it's at the right edge first so if right edge is true if one our last invader is in the right edge okay well then we need to essentially make all of them go down so i'm gonna write a for loop again for let's i equals zero and just make it go down and change direction so i and invaders length uh and then i plus plus so i'm going to loop over that and once again i'm just gonna get the alien invaders and for each alien invasion i need to essentially just add a whole width to it so add 15 to whatever indexes there are i'm gonna add a width and but then minus one so what's this so i'm moving them down and i need to change the direction so now direction is gonna be minus one so okay let's see if that works all right and we're in the right edge and then it goes down okay so it's going down and it's changing direction cool okay um mean it's changing in the weirdest direction because it's going there so we don't want it to go there um plus one cool oh no why is that doing that direction minus one huh ah because we're still on the right edge okay hmm okay well let's make another let's if it's in the right edge and it's currently going right so let's put let's going right equals true as it always starts off going right so if it is going right then add the width change the direction but immediately put going right as false okay so there and then grabs false so it goes the other way okay great so now that we've got that let's do for if uh is that the left edge and it's not going right because it's going left uh once again let's get a full loop for let i equals zero and then i is smaller than alien invaders length i plus plus so just a for loop uh so we can go over every invader so we're going to go into each invader and for each invader or invader index specifically if it hits the left i also want to add to its width but this time well let's just see if what that looks like and then i need to change the direction this time v1 and going right to true as i need to change the direction so let's see what that looks like i have a feeling i know it's going to go down in the wrong place so go down go left come on come on come on yeah okay so let's actually make it go back one it was right to do that and i'm pretty confident that so let's carry on so that is good with accounting first should go all the way down uh i think the next thing we need to account for is if it hits the invader so down here squares and the current shooter index class list contains and if it contains invader and shooter so if whatever square we're in contains both of those then let's just console.log for now game over and then we would need to clear interval invader id whatever i called it come on invaders id okay so now if we go all the way to the bottom i mean i don't have time for this is rush so i'm just gonna put this to a hundred um so there we go and i should get a console log same game over as soon as we hit here because both will be in the same square yes game over great cool and everything stops brilliant so that is looking good so instead of this i'm actually gonna get a results display in html equals game over now i actually need to define what is a results display so const result display equals document query selector and i'm going to search for something with results or a class with results i could do an id that is totally up to me it really doesn't matter so i'm just going to go class results so you can style it up later and i'm just going to default it to one zero sorry okay so that is fine we've got our game over um the next thing that we want to do is uh i guess if we hit that but what if we just go to the bottom right so this time if actually no we don't want to do that let's do another for loop for this for let i equals zero as long as i is smaller than the alien invader's length we want to get i and add increment i okay now if alien invaders i if it's larger than the square's length we get well we can just use this again so let's see if that works um i'm just gonna get rid of the shooter for now let's just see if that works if it hits the bottom so see if we get a game over and game over oh okay we get a game over there why is that um is larger than the square's length plus width so let's try again huh put that like so ah it's because um what is happening here let's inspect it data invader invader plus let's just go 100 see what happens okay we'll come back to this maybe it's fine that we keep it like this and we'll just change something's obviously happened but i'm fine with this for now we can do some changing on okay so we get a game over if it gets around there and then we do clear into file invaders id okay so we've got it getting a game over when we hit roughly the bottom i don't know what is happening here let's just go console log squares length just gonna be like that and then see what that actually comes up with if okay let's move that actually up here because we need to know what it is two to five okay and then here i'm just gonna console log alien invaders i see what number it goes up to there's a 209 i'm just gonna console the other one out just maybe it's something to do with the space invader and the current index ah it is okay fine so that is actually because it's my fault even though we got we got rid of um uh the styling for the shooter uh the we still have the current shooter index there so if it contains these do we get a game over and that's why it was stopping it so this actually works it's fine let's carry on that's my fault i didn't realize that uh this was affecting what was happening and it wasn't anything to do with this funk this poorly at all so that is fine we finished that we get a game over for if we hit the um shooter and we get a game over um if we hit the bottom of the grid okay so that is looking good let's go on to our next part our next part is going to be all about shooting the aliens so i'm just going to move that up there and write a function called shoot okay so for this i need a laser id just like we have the ids for other ones we need a laser id now and then let current laser index so wherever look current laser index so wherever the current shooter is on our board that is where our laser is going to start from okay now we need to move the laser from the shooter to the alien invader okay so once again i'm gonna write a function function move laser uh now i'm gonna go in so once again i need to remove the laser from wherever it is i'm going to use the current laser index to remove i know we haven't added it anywhere yet but we always need to remove something before we draw it in a new location so remove laser and then we're going to get the current laser index and we're simply going to move it up a whole width okay so we're going to minus 15 from it and then we're going to redraw our laser so that's it really add laser and then what's our laser gonna look like well i think our laser is just gonna be let's just make it a orange square so orange okay so that is our move laser function however we need to actually uh hook some timing events onto this so i'm actually gonna put this so that's gonna move our laser now let's put this maybe on a event listener so document add event listener and if i press key up i'm going to shoot you can have key down whatever it doesn't really matter as soon as you press the key down it's going to shoot but we only wanted to shoot so once again i'm going to do a switch case for this e key and if we press i don't know arrow up let's do arrow up sure so if we press that laser id i'm going to actually put this on an interval i'm going to move the laser so this function 100 milliseconds so why isn't this move laser oh that's because it shouldn't be in here let's be here outside of this function because that wouldn't make any sense we need to call the function but it's still inside this function so let's get to doing that now if i press key up there we go there you go there we go there we go there we go nice now let's get to adding some what is why is it not liking this cannot really procrastinate find line 98 98 remove laser okay well it seems to be working for now um i'm sure i will fix that when it comes to it so now let's um think of collisions and what happens when we actually interact uh with stuff right so if the laser is in the same square as an alien so if squares current laser index this time class list contains an invader so if it's in the same square as an invader well then we need to remove the laser for wherever it is we also need to remove the invader from that square and we also need to um let's add a boom add boom okay so we're using the current laser index whatever square we're in we need to remove the laser we need to remove the invader and we need to add a boom and what should our boom be i'm literally just going to make a square boom uh i actually think this should be red so let's make it red and let's make this one oh my i know now running out colors green okay so hopefully that works if i it's sort of not really removing anything okay let's see why not ah that's why squares let me spot squares and shoot okay cool i'm getting booms nice if we hit it we get booms okay let's carry on ah so this is giving us errors because we actually have nothing to remove but for the next time uh there will be so i'm just gonna just gonna keep that there even though it's giving us errors um okay so next up we actually want so once we do get a boom we want it to disappear after some time so i'm going to use a set time out for this and essentially write a function in here that will uh so our function is going to be squares current laser index class list i want to remove the boom after let's say 300 milliseconds okay so now the boom is going to disappear after 300 milliseconds and so it's disappearing not very well though okay and then i'm going to clear interval laser id so i'm going to stop to see if that works okay okay so now the laser is disappearing and i a much better way because i'm stopping the laser id from running okay hit something and it disappears rather than carrying on so that's good um i mean it's still not getting rid i mean it's getting rid of the invader but it's being redrawn so we need to actually take care of that okay so let's actually get rid of the invader from our array so it doesn't get redrawn const um alien removal because let's get the alien in vader's array and then i'm going to use javascript method called index of to pass through the laser index so the square where all the collisions happens okay whatever square that is the alien's gonna be um whatever square that is the alien's gonna be removed from the aliens array based on that so cons alien removal i'm gonna get the alien uh invaders uh alien okay so we need to actually let's make a array an empty array where we're going to literally collect all the aliens that we have removed i think that should work because we need to be collecting them so um aliens removed equals so let's actually do that up here let aliens removed and for now it's going to be an empty array because we haven't removed any and now i'm going to actually get so i'm going to get that array and i'm going to push the alien moved i'm just going to go alien removed because it's singular and i'm putting it into the aliens removed array um okay so hopefully that should work we're going to remove it from the array and i want to store it okay so let's have a think about this i'm gonna be storing all the aliens removed so for console log aliens removed if i shoot okay okay cool i'm removing all of them obviously i'm removing 24 each time because i keep removing it because it hasn't actually been removed so this time i'm going to get this alien aliens removed and this time let's get our draw function right now let's have a think about this where is the nitro function here okay so before i draw it out i actually need to check so if the alien invades removed and does not include i so whatever moving over so if i shot uh 24 index 24 and that's included in here that i don't want to draw it um so i'm just going to talk through this again so if the if whatever number i'm passing it through here so say it was a 24 and if that is not included in my aliens that have been removed i can draw i can add the class of invader okay so that should hopefully fix the issue so now if i shoot great okay now if i shoot it they're being removed cool now let's move on the next thing i need to do is simply check for a win so a win will be easy essentially if where should we do this let's do it in here um and then i can just simply go if and i'm just going to use the aliens removed array length to do this so if alien aliens removed length deeply equals the invaders alien invaders length well then we know that we have one so i'm just gonna put you in and then clear interval uh invaders id okay so that should do it um i guess we sort of need to add a score too so each time we remove an alien i'm gonna put results plus plus and then let results i'm gonna start with zero and add a score and then we're gonna also display so we're gonna add one to the result if we move one i'm gonna get the result display in our html want to put results okay so let's check that out okay so we're getting scores and then hopefully i can kill them all before they get to me but i doubt it okay let's i'm gonna uh maybe slow it down a little bit so we can play it normally and then let's see okay if i do this the game is over and we have won and we have finished the game as long as it says you win then i am happy come on i'm not very good at playing this clearly it's going to stick around here to do it oh and once more come on okay i can do this come on for the win here ah oh oh my god okay well i'm pretty confident that we have one let's just slow it down even more maybe uh i'm gonna really slow it down because i just want to get these done now um i want to show you that we have completed the game essentially and that we can stop the timer okay so if you're going to try competing against me um we need to see that you win as well otherwise how do we know that this game is finished we don't i mean there could be a bug that i haven't uh identified yet so as long as i get these all off if you want to add levels this is a great way to add levels uh just yes and we did it done i have finished the game i finished space invaders finished whoo okay hopefully you can beat my time if you want to have a go at doing this yourself speed coding space invaders okay super simple there's your game go forth go share it please do tweet your uh finished games too only to me on twitter i would absolutely love it to see what you have built are you have taken your game to that next extra level and of course if you want to try beat me on the speed coding then please do that too okay thanks so much uh again and i will see you soon and congratulations you did it you've finished building your games once again please do share them with us on twitter i'd love to see what you've made please tag us please tag your solutions save them in codepen save them on github perhaps deploy them and i can't wait to see them
