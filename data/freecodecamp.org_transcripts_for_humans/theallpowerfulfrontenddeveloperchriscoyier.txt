With timestamps:

00:00 - [Music]
00:03 - i'm so delighted to be able to announce
00:04 - uh our next speaker uh chris coyer um
00:07 - many of you will know chris from around
00:09 - on the on the internet he's he's been i
00:12 - don't want to call him old but he's been
00:13 - around there for a while uh sorry chris
00:15 - i don't know um
00:18 - uh he's he was absolutely behind you
00:21 - know so many of the resources that have
00:22 - taught me so much throughout my web
00:24 - development career you know css tricks
00:26 - has become this canonical reference for
00:28 - all kinds of content all kinds of things
00:30 - to do with web development i'm always
00:31 - baffled at how quickly after something
00:34 - new comes along chris is able to grasp
00:37 - it see its importance learn about it
00:39 - produce content that is just so valuable
00:41 - for everyone
00:42 - and that has incredible longevity and
00:44 - just kind of sticks around uh so uh it's
00:46 - it's kind of staggering to see um chris
00:48 - is gonna come and talk to us now about
00:50 - you know the power of the all-powerful
00:52 - front-end developer and that makes me
00:54 - happy because that's that's my
00:55 - background so please make him very very
00:57 - welcome it's chris coyer
00:59 - yeah
01:01 - no you don't need that
01:03 - okay
01:06 - wow
01:07 - that was so nice that's the nicest
01:08 - introduction i ever got
01:10 - ever
01:11 - um yeah ooh flashlight uh all-powerful
01:15 - friend of thought i've been a friend of
01:16 - developer for a long time it's very near
01:18 - and dear to my heart and it's so cool
01:20 - what's happening and that front-end
01:21 - developers are just
01:24 - getting so much more powerful in what we
01:25 - can do and that's what this we're going
01:27 - to talk about for half an hour it's
01:28 - going to be awesome i'm uh i work at
01:30 - codepen
01:33 - uh and do css tricks and shop talk show
01:35 - as well why does it say bookmark this
01:36 - page isn't that weird do you see that
01:39 - whatever that's annoying enough to fix
01:42 - let's
01:44 - there it goes
01:46 - you want to read my email too there's
01:47 - some in there
01:49 - cool so like before any of the stuff
01:52 - that we're going to talk about today
01:53 - friend developers have already been
01:54 - super powerful we always had like a
01:56 - super important role in the con
01:58 - and the construction of websites you
01:59 - know like uh uh okay next slide go buddy
02:03 - yeah all of ux is important of ux is
02:05 - it's like the most important thing we
02:07 - can possibly deal with when making a
02:08 - website what is it like for the users to
02:10 - use the front-end developer crafts all
02:11 - of it you know like it's in totally in
02:13 - our hands what the experience of using a
02:15 - website is like performance that's on
02:17 - front end developers primarily a big
02:19 - chunk of perf is a front-end development
02:22 - situation all of accessibility and
02:23 - people can
02:24 - uh you can have specialists like think
02:26 - about ux and wireframe stuff and do
02:28 - research but the but the putting it into
02:30 - a website is all from developers just
02:31 - like accessibility that's in front-end
02:33 - developers hands
02:35 - the execution of a design and
02:37 - integrating the animations and
02:38 - interactions and all that stuff that's
02:40 - all front-end development work that's
02:42 - incredible we have so much work to do
02:44 - already front-end developers that you
02:46 - can make a sweet career out of it and
02:48 - lots of people are doing it and i love
02:50 - it i've done it and i just think wow
02:52 - what a cool job the best job in the
02:53 - world being a front-end developer
02:56 - and there's a certain skill set that
02:57 - comes along with the job certainly those
02:59 - things it's generally like some of those
03:02 - things you specialize in some of them
03:04 - whatever you add a few things to that
03:06 - party but there is some kind of like
03:08 - roadblock eventually that's the point
03:10 - you're a front-end developer which means
03:12 - that you don't have some other skills
03:14 - probably so there's some kind of like
03:16 - roadblock to your front-end development
03:17 - skills where you're like okay my skill
03:19 - set has expired and now i need somebody
03:20 - else to help me and this talk is kind of
03:22 - about like where is that and where is it
03:25 - changing and i'm kind of interested in
03:27 - just kicking it down i mean like
03:29 - i don't i don't need anybody's help
03:31 - anymore i can do everything which i love
03:33 - so there's some kind of like there's a i
03:36 - don't know when when does it stop
03:38 - generally it stops when you need like
03:40 - some some hardcore back end help or like
03:42 - server ops kind of stuff
03:45 - uh at least that's been the case for me
03:48 - so if you don't need any servers you
03:50 - know well i don't know why that this
03:51 - word hasn't come up as much at this
03:53 - conference but i feel like it's just as
03:54 - buzzwordy as jam stack is to some degree
03:57 - so i'm gonna say it a whole bunch just
03:58 - unapologetically and i'm not even going
04:00 - to give some caveat that's like well
04:02 - there's still servers involved
04:04 - i'm going to do it i made a website
04:06 - called the power of serverless.info
04:08 - that it's just a bunch of links and
04:10 - stuff so don't worry about like jotting
04:11 - down links and stuff we talk about some
04:13 - service it's up on this micro site
04:15 - that's kind of related to this talk so
04:16 - let's look at one of the major
04:18 - ingredients of of i'd say jam stock but
04:20 - definitely of serverless which is this
04:22 - whole idea of cloud functions they're so
04:24 - cool
04:25 - it's some javascript and you put it on a
04:27 - server but not your server somebody
04:30 - else's server
04:32 - which is great and it's probably node
04:34 - you know it doesn't have to be but it
04:35 - probably is especially for the people in
04:37 - this room and then you got a website and
04:39 - all you need to know is that you execute
04:41 - that code by hitting a url of some kind
04:43 - you hit the url the code runs that's all
04:45 - that a cloud function is it's
04:47 - sounds boring but it's cool
04:50 - why would you ever do that well let's
04:51 - not be abstract about it let's talk
04:53 - about real reasons why you do it let's
04:55 - say your boss is like okay we work at we
04:57 - work at
04:58 - food dot recipes or center stuff
05:02 - you work on a recipe site and you're
05:04 - tasked with
05:06 - i we need to like have an input field
05:08 - and you type in your phone number and
05:09 - you get the recipe on your phone it's
05:10 - like a feature that you're tasked with
05:12 - building so if you're like a front-end
05:14 - developer you're like i got this i can
05:15 - do the design it i can do the ux for it
05:17 - i can build the form i can think about
05:18 - the states i can do all this work but at
05:20 - some point my friend i'm done and i
05:23 - gotta kick it over the fence to somebody
05:24 - who can like go the last mile and make
05:26 - it do the actual thing of sending a text
05:28 - message
05:29 - that's the roadblock that we're gonna
05:30 - kick over
05:32 - we're gonna be like okay twilio that's
05:33 - the app that you use to send text
05:35 - messages cool got it that's the thing
05:37 - i'm a little afraid of like you they
05:38 - don't know i don't know how to do that
05:40 - it seems like back end nerd stuff this
05:42 - is where my front end skills expire and
05:44 - somebody else comes to help me like i
05:46 - said this is what we're gonna we're
05:47 - gonna scratch out so how do we do it
05:50 - well
05:50 - it's not because twilio announced that
05:52 - they have client-side-only apis and we
05:54 - can just do it in the browser they don't
05:55 - have that they don't have that on
05:56 - purpose because you need api keys to
05:58 - deal with your twilio account because
06:01 - if your
06:02 - api keys are the keys to the kingdom if
06:04 - some bad person slides in here and
06:06 - steals your api keys for twilio they're
06:08 - going to can text all of texas to vote
06:11 - for ted cruz something that you don't
06:12 - want something bad is going to happen to
06:14 - you if they get your api keys that's why
06:18 - you need to protect them behind
06:19 - server-side code
06:21 - uh that's a traditional use case of why
06:23 - you need a server i need to protect my
06:24 - api keys you just have to do that you
06:27 - can't protect them client-side i need a
06:29 - server
06:30 - to do this in some way it's not the case
06:32 - for all apis flickr's got an api you can
06:34 - use it to search first search for
06:36 - pictures you don't need any api keys you
06:39 - don't need a server for this this is all
06:40 - happening client-side this also makes
06:42 - you powerful as a front-end developer
06:44 - but it's not going to help us in the
06:46 - twilio situation so we're going to use a
06:48 - server but not really we're going to use
06:50 - somebody else's server
06:53 - and we're going to do it this way so
06:55 - that's our little clout what a cloud
06:56 - function is diagram we're going to write
06:58 - our little javascript code we're going
06:59 - to put it on somebody else's server and
07:01 - we're going to communicate with that via
07:03 - urls the web's finest feature
07:07 - so
07:07 - if we're going to run some javascript
07:09 - code and we need to put it on a server
07:11 - somewhere or whatever why can't we just
07:13 - use the one that's already powering our
07:14 - recipe website
07:17 - like why why not well we because this is
07:19 - why not
07:22 - because our server doesn't run anything
07:24 - in the background so we maybe could if
07:25 - it was like an old school server that we
07:27 - don't have but no we jam stacking baby
07:31 - our server don't have node on it on
07:34 - purpose
07:36 - what say our recipe website is running
07:37 - on github pages or codepen projects or
07:39 - obviously nutlify is the choice here or
07:41 - i'm gonna dump all that crap in an s3
07:43 - bucket guess which back-end languages
07:45 - none of those things have all of them
07:48 - that was complicated
07:51 - none of those run any back-end languages
07:53 - you know like github pages will not run
07:55 - your python script nutlify will not run
07:57 - your php function codepen projects will
07:59 - not run your node javascript yet
08:03 - so
08:06 - but why would you choose those things
08:08 - because it's super cheap it's super fast
08:10 - it's cdn edge don't we call it a cdn's
08:13 - edge now i don't know why there's you
08:16 - they're super secure there's no database
08:18 - to break into there's no file
08:20 - permissions to set that you get a htm
08:23 - https that you don't have to freaking
08:25 - deal with it's such a pain in the ass
08:26 - they're just very front-end developer
08:28 - friendly places to put your code it's a
08:30 - fundamental kind of concept of this jam
08:32 - stack stuff that's where our recipe
08:34 - website lives so that's why we don't
08:35 - have a place to run our little function
08:37 - to talk to twilio so let's server list
08:39 - up
08:40 - serverless it up this website which i
08:42 - have no affiliation with or anything
08:44 - it's it's just it helps me understand
08:46 - what a cloud function is so maybe this
08:48 - will be useful to you too it's called
08:50 - webtask.io it's a little bit like
08:51 - codepen and that it's an editor in the
08:53 - browser so i can open up webtask and i
08:56 - can actually edit that code and i can
08:57 - make a function so here's just a
08:59 - function that takes some data and when
09:01 - it's done doing whatever it's going to
09:02 - do it calls a call back and returns that
09:04 - data what's cool about web tests i can
09:06 - test it right in there i can press that
09:08 - run button and it'll run that function
09:10 - so here i'm going to post i'm going to
09:11 - fake post to this piece of code and i'm
09:14 - going to pass it some form data foo bar
09:16 - whatever hit the run button and i can
09:18 - see that it returns
09:20 - i can even console.log stuff in there
09:22 - and it returns a little piece of json
09:23 - for me to use cool so now i have this
09:25 - like piece of node that i'm executing
09:27 - now
09:28 - uh so but that node is useless the node
09:30 - code i want is i'm going to just go copy
09:32 - and paste some crap out of the twilio
09:33 - docs because that's how i need to send a
09:35 - text message they'll have an npm lib
09:38 - that you can just grab they'll have
09:40 - documentation that's just like
09:42 - i don't know fill in the blanks you know
09:43 - it's their job to make this easy for you
09:45 - to use
09:46 - so here i've done it i just went to
09:48 - quilio i'm importing twilio from twilio
09:50 - i don't even know what that lib does but
09:52 - i'm just following the docs you know
09:54 - there's some api key stuff in there and
09:56 - i'm just gonna that's their
09:57 - documentation for how to send a text
09:59 - message
10:01 - and then web test has a place to keep
10:03 - your secrets if you want to so that the
10:04 - world kind of can't see them but
10:06 - crucially they give you a url
10:09 - to hit it that they give you that now i
10:11 - have a url to run my function which is
10:13 - great now i can use it and this is cool
10:15 - old school web i can use this function
10:18 - with not no client-side javascript at
10:20 - all i can just have a form i'm going to
10:22 - post to that url that they just gave me
10:25 - and i'm going to ask her phone number to
10:27 - send it to and just pass it some value
10:29 - to send or whatever and it has a submit
10:31 - button and that's it so i can run that
10:33 - on codepen it's just a
10:35 - that's it there's no css or javascript
10:37 - involved here at all i just type in my
10:39 - own phone number there and never call me
10:42 - and
10:44 - i'm just having it barf outside but i'm
10:45 - in you know i'm in mac os so i have my
10:47 - imessage set up or whatever and it's
10:49 - working it's it's hitting twilio with
10:51 - that data and it's sending me a text
10:52 - message i put that together and i have
10:54 - no business doing that
10:56 - uh which is great and so and you don't
10:59 - even have to have it spit out crap i
11:00 - could have told that node function to
11:01 - redirect to some success page or
11:04 - something like that it's probably more
11:05 - likely though that you'd have an event
11:08 - listener on your form and you'd whatever
11:10 - post to the
11:12 - to the url that i said and you'd send it
11:14 - some data and then wait for the response
11:16 - and do fancy animations on your page or
11:18 - whatever that's probably a more
11:20 - likely scenario but it's kind of cool
11:21 - that you can do it with progressive
11:22 - enhancement too and this is what i did
11:24 - you know i made a dumb little recipe
11:26 - website where you can type in the phone
11:27 - number and you get these a lovely little
11:29 - recipe for
11:30 - for oatmeal cookies so that's totally
11:33 - part of jam stack and serverless
11:36 - but this this can get harder and easier
11:38 - than that here's an example of it
11:39 - getting a lot easier let's say you need
11:40 - a form on your website that's something
11:42 - else a contact form or something i need
11:44 - back-end code to be able to deal with
11:46 - that so what do you use do we gonna have
11:47 - to write a cloud function and protect
11:49 - our api keys
11:51 - sure you could do it like that but you
11:52 - don't have to because this is a super
11:54 - old need on the web like people have
11:56 - needed to put forms on websites and
11:58 - there's been startups to help them do
12:00 - that uh forever so there's
12:03 - google forms or whatever and
12:05 - wufoo and typeform and formstack and
12:08 - jotform there's a million apps to do
12:09 - this i think you know as old as these
12:11 - seem this is a part of jam sect too if
12:13 - you ask me this means
12:16 - somebody else deal with my forms
12:18 - let somebody else's servers and stuff
12:20 - that specialize in that
12:22 - be part of this website and i don't need
12:24 - any backend languages or anything else
12:26 - you know i think that's part of this
12:28 - story as well i can take a woofer form
12:30 - and have it work right on codepen it's
12:32 - just copy and paste code and that's a
12:34 - fully functional payment enabled form
12:36 - that i could host anywhere
12:38 - but there's you know more a little bit
12:40 - more jam stacky maybe is this idea that
12:43 - you can just bring your own html form
12:45 - and then just point the action attribute
12:48 - at one of these other services like a
12:50 - new breed of form processors you just
12:53 - pass it that and that's how form carry
12:54 - works and page clip and netlify forms of
12:57 - course and uh basin you know there's all
13:00 - these these new form processors that
13:02 - help you deal with forms as well and
13:04 - these exist because this is a big deal
13:08 - which is cool so don't don't worry about
13:10 - any of those services that's why this
13:12 - website the power of serverless.info
13:14 - exists so that all it rounds up all
13:15 - these services there's a million of them
13:17 - so let's say you need to take some money
13:20 - for your thing e-commerce
13:23 - i don't know i give up i'm just going to
13:24 - use shopify or magento or i don't know
13:27 - is that do the kids these days know
13:28 - about magento still
13:31 - but you don't really have to too like
13:33 - how would you do jam stacky e-commerce
13:35 - how does that work well there's a
13:36 - million ways to cut it but the easiest
13:38 - way in the universe is just to use a buy
13:40 - now button i have little scarfs oh well
13:43 - here's all the players right we know
13:45 - them they they're literally all here and
13:47 - san francisco
13:48 - uh
13:50 - paypal i sell scarfs i'm gonna put a
13:53 - freaking paypal button on the thing when
13:55 - they click it they go to paypal they pay
13:58 - for the thing they come back to my scarf
13:59 - website and and then paypal tells me
14:02 - about it so then i ship them the scarf
14:04 - or whatever that's jam stacky that's i
14:07 - don't need any back-end languages to do
14:08 - this i'm totally enabled as a front-end
14:10 - developer to have e-commerce on my
14:12 - website the oldest way in the book or
14:15 - you can get all fancy with it this is a
14:17 - sarah drazner demo where she you know
14:18 - who's you know works for microsoft and
14:20 - on azure and um and is on the vue core
14:23 - team this is a view demo where it's all
14:25 - fancy it's got filtering and there's a
14:27 - cart and you know she made up this whole
14:29 - e-commerce demo
14:30 - but it also has a payment form on it so
14:32 - look as she filters and it's all modern
14:34 - and fancy and then you go to the cart
14:36 - and the cart has items in it but you can
14:38 - actually check out and this isn't just
14:40 - totally fake she integrated this with
14:42 - stripe so this is just using the fake
14:45 - stripe credit card number but this would
14:47 - actually work in process code it's the
14:48 - same else all the proper code is there
14:50 - to do it you pay with the credit card
14:52 - and stripe is communicated with the card
14:55 - is actually processed and it's it's
14:57 - doing all that kind of real e-commerce
14:59 - work but there's no server here this is
15:02 - still all jam stacky and the way that it
15:03 - works is that the back end is
15:05 - or the front is view the processing is
15:07 - striped but the way that those two mix
15:09 - because of course stripe has api keys
15:11 - that you need to protect you better as
15:13 - help protect your stripe api keys
15:15 - they're communicated with cloud
15:17 - functions in this case on azure
15:19 - so stripe again they want to help you do
15:22 - this
15:23 - api docs for stripe are incredible you
15:25 - know but it's but it's
15:27 - you know so you need to put it somewhere
15:28 - so in this case she's using azure uh and
15:31 - you azure has an interface i think this
15:33 - is probably an oldish screenshot i think
15:35 - it's been redesigned a little bit but
15:36 - what's kind of cool about this is that
15:38 - in this case you see how it's all kind
15:39 - of grayed out sarah put these in a
15:41 - github repo so her funker cloud
15:43 - functions are part of like the rest of
15:45 - her code base it's just she's shipping
15:47 - them up to azure here too so you don't
15:49 - have to use an online editor for your
15:51 - cloud functions can live in your repo
15:53 - along with all the rest of your code
15:55 - kind of cool kind of cool just because
15:57 - we're talking about payments i think
15:58 - this is worth knowing about the browsers
16:01 - have this new thing called the web
16:02 - payment api and the whole point of it
16:04 - isn't to like they're not actually
16:06 - processing payments for you what
16:07 - browsers are trying to give you here is
16:09 - free ui ux for checking out from pages
16:13 - like they'll be your shopping cart and
16:15 - your address collector and credit card
16:18 - information acceptor it's this piece
16:20 - that they're trying to give you and
16:21 - that's so cool
16:23 - because it's just it's consistent across
16:25 - sites then and they'll you know the
16:26 - people have their saved addresses and
16:28 - saved credit cards and stuff it's but
16:30 - it's just the ui ux you still need to
16:32 - bring your own payment processing so you
16:34 - still need stuff like
16:36 - you know serverless functions to process
16:38 - your stripe calls and all that kind of
16:39 - stuff but it's worth knowing about i
16:41 - think this that's some future web stuff
16:43 - that works nicely in a jam stack
16:44 - situation
16:46 - um so here's another one let's say you
16:48 - need comment threads this might be a
16:49 - moment where you're like yeah gem
16:50 - stack's cool but
16:52 - i need i literally need comments on my
16:54 - website so what am i going to do about
16:56 - that i'm just going to give up and use
16:57 - wordpress or something but no but
16:59 - comments are great structured data
17:02 - they're great for databases there's no
17:03 - reason to forsake databases because
17:06 - they're kind of perfect for stuff like
17:07 - this you need their name and their what
17:10 - piece of what article that comment was
17:12 - associated with and the value of the
17:14 - comment and when it happened and whether
17:15 - it's approved or not and it's great
17:17 - structured data so sure you could just
17:19 - reach for wordpress but let's assume
17:21 - that you're going to use a static site
17:22 - generator instead static site generators
17:24 - are so hot i'm going to use
17:26 - middleman or whatever
17:28 - there's a bunch of them they're all
17:29 - great there's hugo and gatsby's the cool
17:32 - one right and there's hexo and
17:34 - metalsmith and jekyll and middlemen and
17:36 - 11t is the new hot one isn't it so but
17:39 - you but you don't you know they're they
17:41 - don't have like comment threads aren't
17:43 - like a native feature of any of these
17:44 - things
17:45 - so in the way that they generally work
17:47 - is uh you know there's
17:49 - the content lives in your repo it's a
17:51 - big pile of markdown files actually had
17:53 - an interesting conversation last night
17:54 - where it's not necessarily that it's
17:56 - just anything that returns a promise
17:58 - kind of thing it was an interesting
17:59 - conversation but because so it wouldn't
18:01 - necessarily need to be a bunch of
18:02 - markdown files it could hit your
18:03 - contentful api or something but still
18:05 - statically generate
18:07 - total aside there but it smashes all
18:09 - that together with some templates and it
18:11 - makes like a directory that's a website
18:13 - like a bunch of files that you could put
18:15 - anywhere you put it in your s3 bucket or
18:18 - let netlify run it for you or whatever
18:20 - they all work the same way but none of
18:22 - them really have comments as a feature
18:23 - so what are we to do
18:25 - well
18:27 - we don't really have a database at our
18:28 - command so let's just put discus on it
18:32 - which is fine and it solves you know
18:34 - that comes with its own can of worms but
18:36 - that's been like solving that problem
18:38 - for us forever and
18:39 - and as such is kind of part of the the
18:42 - the jam stock universe in a way but like
18:44 - let's really nerd this one up like let's
18:46 - go full bore nerd on the comment thread
18:48 - thing let's want to roll our own system
18:50 - so we're going to use hugo because hugo
18:52 - is cool right uh that's our static site
18:54 - generator we're going to put a comment
18:55 - form on it where we collect their name
18:57 - and their email and what comment and
18:59 - when you click the button it's going to
19:00 - turn into a piece of like structured
19:02 - data we'll just
19:03 - format it as json and we'll throw it up
19:06 - and fight because firebase is great for
19:07 - that it's basically json based we can
19:10 - just throw our you know i know there's
19:12 - more to it than this i'm being
19:13 - abstracted on purpose but we'll keep
19:15 - that data in firebase well it could be
19:17 - spam it could be garbage so we're going
19:19 - to have a when that happens and of
19:21 - course we'll do this through a cloud
19:22 - function you know the option will also
19:24 - hit slack and slack will have a channel
19:26 - and it'll say do i approve or disapprove
19:28 - this message and if you say approve if
19:30 - you say disapprove it maybe just does
19:32 - nothing
19:33 - but if it hits approve then maybe that
19:35 - cloud function then can hit netlify and
19:37 - trigger a build that'd be kind of cool
19:39 - and during that build we'll have hugo go
19:42 - get all approved comments from that post
19:44 - and do it in the build process so now we
19:46 - have a comment thread the data is stored
19:49 - in a database kind of where it's nice to
19:51 - keep things like comments but we can
19:53 - still statically generate our site like
19:55 - that's a kind of flow that is just cool
19:58 - and
19:59 - gem stocky and serverlessly and just
20:01 - kind of sweet and a little bit like that
20:04 - there's still things around but it's
20:06 - kind of sweet
20:07 - uh
20:09 - that's phil's version phil's is cool
20:11 - phil's phil's
20:13 - it uses
20:14 - um
20:16 - like the nutlify like kind of you know
20:18 - when you use nutify forms it just uses
20:21 - nutlify as a database kind of
20:23 - kind of cool
20:25 - so what about what about real-life cloud
20:27 - functions like these were all little
20:29 - hobbyist kind of things but clearly
20:31 - sites use them all the time codepen uses
20:33 - the crap out of cloud functions here's
20:34 - one of the things we use cloud functions
20:36 - for you can write in a bunch of
20:37 - different preprocessor languages on code
20:40 - like your html you can write it on or
20:42 - any of these other languages your css
20:44 - you can write in popular css
20:46 - preprocessor languages javascript too we
20:48 - will process for you in a number of
20:50 - different ways
20:51 - we could and we have re-architected this
20:53 - many times throughout the life of
20:55 - codepen but we've really settled on
20:57 - cloud functions as a way to do this
20:58 - because it's sweet
21:00 - so all these languages are written in
21:02 - node which is a thing that uh lambda
21:05 - which is another cloud services provider
21:07 - can run so we have little cloud
21:09 - functions whose whole job on earth is to
21:11 - take some less css and turn it into css
21:14 - and return it it's its own that's all it
21:16 - does in the world it's its own little
21:18 - job
21:19 - and then there's a couple other
21:20 - languages out there that you know sas
21:23 - there's dart sass these days which you
21:24 - haven't explored but there's some other
21:25 - languages that just don't run in a
21:27 - language that cloud functions can
21:29 - generally run for whatever reason cloud
21:31 - functions don't love ruby
21:33 - who knows but like in the world of
21:35 - codepen uh the ones that are on the left
21:38 - side of this screen are certainly uh
21:41 - kind of happier you know that they're
21:43 - cheaper they're easier to secure they're
21:45 - easier to scale they don't break that
21:47 - often it's not like the stuff on the
21:48 - right is untenable like we can manage it
21:51 - that word that's the business that we're
21:52 - in but certainly if you can run it as a
21:54 - cloud function oh your life just gets so
21:57 - much easier and better and
21:59 - less expensive and stuff it's great
22:01 - all right let's do another one just
22:02 - because we can let's say you need to be
22:04 - able to build a like a crm like your
22:06 - boss is like hey bro can you build me
22:08 - like an app to like track our customers
22:10 - and like if they got a gift box or not
22:12 - for christmas and you'd be like yes boss
22:14 - i can
22:21 - it's like no no like an app you know and
22:23 - you're like yes i can build you that app
22:25 - you know
22:28 - but anyways like no like let's do it for
22:30 - real like we got to build a crud app you
22:32 - know create read update delete like
22:34 - every app that most of us write we all
22:36 - write crud apps all day long we're going
22:37 - to need some structured data for our
22:39 - customers and whether they got a gift
22:41 - box or not fine
22:43 - where should we put that it'd be kind of
22:45 - rad to use air table i don't know if any
22:46 - of you have seen this there's a great
22:48 - little app it's spreadsheet like base
22:50 - they have a great ui which is just cool
22:52 - on its own but they have json apis for
22:55 - all that data so if we run a cheap easy
22:57 - solution like that we're going to make a
22:59 - little crud app using air tables great
23:01 - for that but airtable also has api keys
23:04 - that you probably don't want to put in
23:05 - your client-side javascript you can but
23:08 - not great you know this is like your
23:09 - private data airtable has also great
23:12 - apis they run node you can make a a
23:15 - cloud function that does all the crud
23:17 - stuff
23:19 - for airtable and pull and push data like
23:21 - oh they got their gift box or whatever
23:22 - that's a perfect use case for cloud
23:24 - function this is another sarah drasner
23:26 - demo where she made her and her team
23:28 - speak at all these events so she made
23:30 - this crazy webgl globe of where they're
23:33 - speaking and when and all this stuff but
23:35 - it you can run this anywhere you could
23:37 - run this on a jam stack thing because
23:38 - the way that she did it was basically
23:40 - built a little crud out the data store
23:42 - in this case is just a json file but she
23:45 - made a little ui for adding and updating
23:48 - stuff that run cloud functions in azure
23:50 - in this case and then it's a view app
23:52 - again on the front end let's say you
23:54 - want to build a blog like is
23:56 - is do you have to run a static site
23:58 - generator on jumpstack to have a blog or
24:00 - is there other ways to do it of course
24:01 - there's other ways to do it it's just
24:03 - structured data and this is a you know
24:05 - this worth googling we won't get into a
24:07 - whole bunch but kit hodgsden made this
24:10 - for us on codepen which is a way to spin
24:12 - up a blog and
24:14 - totally serverlessly so you can run it
24:16 - on codepen which has no database or
24:17 - backend functions or backend languages
24:19 - remember but here's like monica was
24:21 - talking about here's how easy firebase
24:23 - off is it's like two lines of code
24:25 - you're like oh cool now i have login for
24:27 - my app great and now that i'm logged in
24:29 - and authenticated i can write posts and
24:32 - so now i'm writing a post and it's going
24:33 - to turn that data into json send it up
24:36 - to fire base and now i have a new blog
24:39 - and it persists in the cloud right you
24:41 - refresh this page that blog post that i
24:43 - just authored
24:45 - will be there so a serverless blog how
24:47 - cool is that
24:48 - i did it all on codepen this got me
24:50 - empowered too i'm like i'm gonna make a
24:52 - food log i could download one of them
24:54 - two billion of them on my phone or
24:56 - whatever but i'll write one myself just
24:57 - to see if i can do it so i use firebase
24:59 - i have off now i type in what food i ate
25:01 - what calories
25:03 - and it saves it to firebase and it
25:04 - stores it by date and adds up the
25:06 - calories for me and all that stuff
25:07 - that's so empowering that is me kicking
25:10 - down the door of what i'm able to do as
25:12 - a front-end developer and it's badass i
25:15 - think
25:17 - anyway i just called myself a badass
25:19 - which is
25:21 - not the case so you want to send
25:23 - notifications for your app we already
25:24 - talked about sending sms but what if you
25:26 - are writing a bug tracker and it needs
25:28 - to send a slack notice or an email
25:30 - notice or whatever it's the same kind of
25:32 - thing you build cloud functions that do
25:34 - that job that's what this world is all
25:37 - about these days you can make this work
25:39 - that roadblock can be gone for you how
25:41 - does slack do it slack wants to he wants
25:44 - you to hit a url too you want to send a
25:46 - message to a slack channel they're just
25:47 - like here's the url hit it with your
25:49 - data and we'll do that for you so you'd
25:51 - write a cloud function that hit their
25:53 - url and does the job you know we're not
25:55 - looking at the code here we're talking
25:56 - about empowerment what you can do
25:59 - there's
26:00 - sending email there's things like mail
26:01 - gun and spark post and send grid they're
26:03 - just apis for sending emails what do you
26:06 - think we're going to do we're going to
26:07 - write a they're going to give us some
26:09 - node code we're going to put it in the
26:10 - cloud function and now we have a url
26:12 - that we can post to that will send an
26:14 - email
26:15 - so now we have this bug tracker app that
26:17 - we're going with so anyway we talked
26:20 - about web tasks that was a really easy
26:21 - way to get started with them and feel
26:23 - out what they are we looked azure's got
26:24 - cloud functions firebase will run them
26:26 - google cloud functions aws lambda is
26:28 - probably the biggest provider of them
26:30 - and nullifies got them of course too
26:32 - which is really rad because it's so easy
26:34 - on netlify you just put your
26:36 - function.js
26:38 - in a folder called functions kick it to
26:41 - your netlify and now at your website
26:44 - like it just makes a relative url that
26:46 - you can execute that function through
26:48 - lambda it's like the easiest way ever to
26:50 - get started with cloud functions they
26:52 - really did a good job with that
26:54 - which is cool so it's another way to get
26:55 - started with with cloud functions how
26:57 - much is this stuff going to cost i think
26:59 - this is funny so for like a hundred
27:00 - thousand times if we hit our cloud
27:02 - function to send an email a hundred
27:04 - thousand times
27:06 - and it ran for half a second each time
27:08 - which is way longer than it'll take to
27:09 - run and it uses 512 megabytes of ram
27:12 - which is way more than it'll ever need
27:14 - we're looking at like 50 cents
27:18 - so pretty affordable i'd say in the
27:21 - the terms of of this kind of stuff it's
27:23 - not always the right answer but for this
27:25 - kind of stuff it's pretty no-brainery it
27:27 - reminds me do you all watch carlton
27:28 - catch fire if you didn't you should go
27:29 - home tonight and watch all of it because
27:30 - it's the best show ever but in like
27:33 - season four they they kind of invent
27:34 - this concept in the 80s they're like
27:36 - these big computers are just sitting
27:38 - around doing nothing at night we should
27:39 - have them
27:41 - run we'll sell the time the unused
27:43 - computer time which is kind of what
27:44 - cloud functions are i think you know aws
27:47 - has all these servers sitting around
27:48 - that are pre-bought and not doing
27:50 - anything they're like well they're
27:52 - they're are doing something they're
27:53 - executing my cloud functions when i need
27:55 - them
27:56 - anyway so look look now we're little
27:58 - architects we have this bug tracker app
28:01 - or whatever that sends
28:03 - sms messages and it sends emails and it
28:05 - sends slack messages and we've written
28:07 - cloud functions for each one of those
28:09 - things oh but we found this cool
28:11 - abstraction mailer so instead of using
28:13 - spark posts apis directly we'll use this
28:16 - abstraction that way if we need to
28:17 - change providers we can we're like oh
28:19 - yeah i'm totally going to use that so
28:20 - now my mailer function isn't tied to
28:22 - spark posts but it's kind of an
28:24 - abstraction cool and then like i don't
28:26 - know it's weird to have our client be in
28:28 - charge of calling all these apis
28:30 - directly why don't we write a cloud
28:31 - function that's like
28:32 - just a notifier
28:34 - and we send say okay notifier i want you
28:37 - to send an sms to this location and so
28:39 - it can kind of be like a little router
28:42 - for all these things just to give
28:43 - ourselves a little bit of abstraction in
28:45 - here and all of a sudden we're thinking
28:46 - we're like freaking architects all of a
28:48 - sudden we haven't learned anything
28:50 - really but we
28:53 - all of a sudden we're like back end
28:54 - developers too you know
28:56 - uh which is great so we got to close
28:58 - this thing down it's half an hour it's
28:59 - not
29:00 - out of breath you know serverless it's
29:02 - this ingredient list it's not like if
29:04 - you go serverless or you go jam stock
29:06 - you have to do all of it but it can do
29:09 - all kinds of interesting things and it's
29:10 - incremental adoption for days you can
29:12 - just oh that looks nice i'll have one of
29:14 - these in one of these
29:16 - you know it's not just for hobbyist
29:18 - things it's not just for crazy
29:19 - enterprise sites it's for everybody it's
29:21 - amazing how i've seen the usage of this
29:25 - serverless jam stack stuff all across
29:27 - it's not for it's not prescriptive any
29:28 - type of website you know there's very
29:31 - clearly people doing gem stock for
29:33 - publishing of like lots of content
29:36 - blog type stuff publication type stuff
29:38 - and clearly it's for web apps whatever
29:41 - those things are people are using the
29:42 - crap out of that stuff so it's it's just
29:44 - everybody's using it in some way the
29:46 - perf story is so great for it especially
29:48 - on something like nutlify or your whole
29:50 - site like the document will come back
29:52 - like that and then the rest of it is
29:53 - like for you to screw up
29:57 - uh
29:58 - and the security is so great you know i
30:00 - lo that's one of the things i totally
30:02 - love about jam stack is it's not like oh
30:04 - my god how am i going to secure this
30:06 - database what file permissions should
30:08 - these php files be
30:10 - like what way what where are bad guys
30:12 - knocking on the door of this website
30:14 - that i don't know about i hate that
30:16 - stuff i don't want that to be my job my
30:18 - job has already gotten bigger as a front
30:20 - end developer
30:21 - and dealing with anything
30:23 - security-related just isn't my favorite
30:24 - thing to do so it's so nice that i can
30:27 - feel powerful and not worry about it so
30:28 - the kind of the point of this isn't that
30:31 - everything that we've talked about at
30:32 - this conference is the best thing in the
30:33 - entire universe and you should do all of
30:34 - it immediately it's about your brain
30:36 - knowing what's up and what's out there
30:38 - and being able to pick from that
30:39 - ingredients list when you can it's great
30:42 - your brain is now smarter that's the
30:44 - dumb little website i made the power of
30:45 - serverless dot info i have the twitter
30:48 - annual css now how cool is that right
30:50 - anyway that's
30:52 - that's my whole talk thanks everybody
30:54 - [Applause]
31:02 - [Music]
31:08 - [Applause]
31:09 - [Music]
31:12 - you

Cleaned transcript:

i'm so delighted to be able to announce uh our next speaker uh chris coyer um many of you will know chris from around on the on the internet he's he's been i don't want to call him old but he's been around there for a while uh sorry chris i don't know um uh he's he was absolutely behind you know so many of the resources that have taught me so much throughout my web development career you know css tricks has become this canonical reference for all kinds of content all kinds of things to do with web development i'm always baffled at how quickly after something new comes along chris is able to grasp it see its importance learn about it produce content that is just so valuable for everyone and that has incredible longevity and just kind of sticks around uh so uh it's it's kind of staggering to see um chris is gonna come and talk to us now about you know the power of the allpowerful frontend developer and that makes me happy because that's that's my background so please make him very very welcome it's chris coyer yeah no you don't need that okay wow that was so nice that's the nicest introduction i ever got ever um yeah ooh flashlight uh allpowerful friend of thought i've been a friend of developer for a long time it's very near and dear to my heart and it's so cool what's happening and that frontend developers are just getting so much more powerful in what we can do and that's what this we're going to talk about for half an hour it's going to be awesome i'm uh i work at codepen uh and do css tricks and shop talk show as well why does it say bookmark this page isn't that weird do you see that whatever that's annoying enough to fix let's there it goes you want to read my email too there's some in there cool so like before any of the stuff that we're going to talk about today friend developers have already been super powerful we always had like a super important role in the con and the construction of websites you know like uh uh okay next slide go buddy yeah all of ux is important of ux is it's like the most important thing we can possibly deal with when making a website what is it like for the users to use the frontend developer crafts all of it you know like it's in totally in our hands what the experience of using a website is like performance that's on front end developers primarily a big chunk of perf is a frontend development situation all of accessibility and people can uh you can have specialists like think about ux and wireframe stuff and do research but the but the putting it into a website is all from developers just like accessibility that's in frontend developers hands the execution of a design and integrating the animations and interactions and all that stuff that's all frontend development work that's incredible we have so much work to do already frontend developers that you can make a sweet career out of it and lots of people are doing it and i love it i've done it and i just think wow what a cool job the best job in the world being a frontend developer and there's a certain skill set that comes along with the job certainly those things it's generally like some of those things you specialize in some of them whatever you add a few things to that party but there is some kind of like roadblock eventually that's the point you're a frontend developer which means that you don't have some other skills probably so there's some kind of like roadblock to your frontend development skills where you're like okay my skill set has expired and now i need somebody else to help me and this talk is kind of about like where is that and where is it changing and i'm kind of interested in just kicking it down i mean like i don't i don't need anybody's help anymore i can do everything which i love so there's some kind of like there's a i don't know when when does it stop generally it stops when you need like some some hardcore back end help or like server ops kind of stuff uh at least that's been the case for me so if you don't need any servers you know well i don't know why that this word hasn't come up as much at this conference but i feel like it's just as buzzwordy as jam stack is to some degree so i'm gonna say it a whole bunch just unapologetically and i'm not even going to give some caveat that's like well there's still servers involved i'm going to do it i made a website called the power of serverless.info that it's just a bunch of links and stuff so don't worry about like jotting down links and stuff we talk about some service it's up on this micro site that's kind of related to this talk so let's look at one of the major ingredients of of i'd say jam stock but definitely of serverless which is this whole idea of cloud functions they're so cool it's some javascript and you put it on a server but not your server somebody else's server which is great and it's probably node you know it doesn't have to be but it probably is especially for the people in this room and then you got a website and all you need to know is that you execute that code by hitting a url of some kind you hit the url the code runs that's all that a cloud function is it's sounds boring but it's cool why would you ever do that well let's not be abstract about it let's talk about real reasons why you do it let's say your boss is like okay we work at we work at food dot recipes or center stuff you work on a recipe site and you're tasked with i we need to like have an input field and you type in your phone number and you get the recipe on your phone it's like a feature that you're tasked with building so if you're like a frontend developer you're like i got this i can do the design it i can do the ux for it i can build the form i can think about the states i can do all this work but at some point my friend i'm done and i gotta kick it over the fence to somebody who can like go the last mile and make it do the actual thing of sending a text message that's the roadblock that we're gonna kick over we're gonna be like okay twilio that's the app that you use to send text messages cool got it that's the thing i'm a little afraid of like you they don't know i don't know how to do that it seems like back end nerd stuff this is where my front end skills expire and somebody else comes to help me like i said this is what we're gonna we're gonna scratch out so how do we do it well it's not because twilio announced that they have clientsideonly apis and we can just do it in the browser they don't have that they don't have that on purpose because you need api keys to deal with your twilio account because if your api keys are the keys to the kingdom if some bad person slides in here and steals your api keys for twilio they're going to can text all of texas to vote for ted cruz something that you don't want something bad is going to happen to you if they get your api keys that's why you need to protect them behind serverside code uh that's a traditional use case of why you need a server i need to protect my api keys you just have to do that you can't protect them clientside i need a server to do this in some way it's not the case for all apis flickr's got an api you can use it to search first search for pictures you don't need any api keys you don't need a server for this this is all happening clientside this also makes you powerful as a frontend developer but it's not going to help us in the twilio situation so we're going to use a server but not really we're going to use somebody else's server and we're going to do it this way so that's our little clout what a cloud function is diagram we're going to write our little javascript code we're going to put it on somebody else's server and we're going to communicate with that via urls the web's finest feature so if we're going to run some javascript code and we need to put it on a server somewhere or whatever why can't we just use the one that's already powering our recipe website like why why not well we because this is why not because our server doesn't run anything in the background so we maybe could if it was like an old school server that we don't have but no we jam stacking baby our server don't have node on it on purpose what say our recipe website is running on github pages or codepen projects or obviously nutlify is the choice here or i'm gonna dump all that crap in an s3 bucket guess which backend languages none of those things have all of them that was complicated none of those run any backend languages you know like github pages will not run your python script nutlify will not run your php function codepen projects will not run your node javascript yet so but why would you choose those things because it's super cheap it's super fast it's cdn edge don't we call it a cdn's edge now i don't know why there's you they're super secure there's no database to break into there's no file permissions to set that you get a htm https that you don't have to freaking deal with it's such a pain in the ass they're just very frontend developer friendly places to put your code it's a fundamental kind of concept of this jam stack stuff that's where our recipe website lives so that's why we don't have a place to run our little function to talk to twilio so let's server list up serverless it up this website which i have no affiliation with or anything it's it's just it helps me understand what a cloud function is so maybe this will be useful to you too it's called webtask.io it's a little bit like codepen and that it's an editor in the browser so i can open up webtask and i can actually edit that code and i can make a function so here's just a function that takes some data and when it's done doing whatever it's going to do it calls a call back and returns that data what's cool about web tests i can test it right in there i can press that run button and it'll run that function so here i'm going to post i'm going to fake post to this piece of code and i'm going to pass it some form data foo bar whatever hit the run button and i can see that it returns i can even console.log stuff in there and it returns a little piece of json for me to use cool so now i have this like piece of node that i'm executing now uh so but that node is useless the node code i want is i'm going to just go copy and paste some crap out of the twilio docs because that's how i need to send a text message they'll have an npm lib that you can just grab they'll have documentation that's just like i don't know fill in the blanks you know it's their job to make this easy for you to use so here i've done it i just went to quilio i'm importing twilio from twilio i don't even know what that lib does but i'm just following the docs you know there's some api key stuff in there and i'm just gonna that's their documentation for how to send a text message and then web test has a place to keep your secrets if you want to so that the world kind of can't see them but crucially they give you a url to hit it that they give you that now i have a url to run my function which is great now i can use it and this is cool old school web i can use this function with not no clientside javascript at all i can just have a form i'm going to post to that url that they just gave me and i'm going to ask her phone number to send it to and just pass it some value to send or whatever and it has a submit button and that's it so i can run that on codepen it's just a that's it there's no css or javascript involved here at all i just type in my own phone number there and never call me and i'm just having it barf outside but i'm in you know i'm in mac os so i have my imessage set up or whatever and it's working it's it's hitting twilio with that data and it's sending me a text message i put that together and i have no business doing that uh which is great and so and you don't even have to have it spit out crap i could have told that node function to redirect to some success page or something like that it's probably more likely though that you'd have an event listener on your form and you'd whatever post to the to the url that i said and you'd send it some data and then wait for the response and do fancy animations on your page or whatever that's probably a more likely scenario but it's kind of cool that you can do it with progressive enhancement too and this is what i did you know i made a dumb little recipe website where you can type in the phone number and you get these a lovely little recipe for for oatmeal cookies so that's totally part of jam stack and serverless but this this can get harder and easier than that here's an example of it getting a lot easier let's say you need a form on your website that's something else a contact form or something i need backend code to be able to deal with that so what do you use do we gonna have to write a cloud function and protect our api keys sure you could do it like that but you don't have to because this is a super old need on the web like people have needed to put forms on websites and there's been startups to help them do that uh forever so there's google forms or whatever and wufoo and typeform and formstack and jotform there's a million apps to do this i think you know as old as these seem this is a part of jam sect too if you ask me this means somebody else deal with my forms let somebody else's servers and stuff that specialize in that be part of this website and i don't need any backend languages or anything else you know i think that's part of this story as well i can take a woofer form and have it work right on codepen it's just copy and paste code and that's a fully functional payment enabled form that i could host anywhere but there's you know more a little bit more jam stacky maybe is this idea that you can just bring your own html form and then just point the action attribute at one of these other services like a new breed of form processors you just pass it that and that's how form carry works and page clip and netlify forms of course and uh basin you know there's all these these new form processors that help you deal with forms as well and these exist because this is a big deal which is cool so don't don't worry about any of those services that's why this website the power of serverless.info exists so that all it rounds up all these services there's a million of them so let's say you need to take some money for your thing ecommerce i don't know i give up i'm just going to use shopify or magento or i don't know is that do the kids these days know about magento still but you don't really have to too like how would you do jam stacky ecommerce how does that work well there's a million ways to cut it but the easiest way in the universe is just to use a buy now button i have little scarfs oh well here's all the players right we know them they they're literally all here and san francisco uh paypal i sell scarfs i'm gonna put a freaking paypal button on the thing when they click it they go to paypal they pay for the thing they come back to my scarf website and and then paypal tells me about it so then i ship them the scarf or whatever that's jam stacky that's i don't need any backend languages to do this i'm totally enabled as a frontend developer to have ecommerce on my website the oldest way in the book or you can get all fancy with it this is a sarah drazner demo where she you know who's you know works for microsoft and on azure and um and is on the vue core team this is a view demo where it's all fancy it's got filtering and there's a cart and you know she made up this whole ecommerce demo but it also has a payment form on it so look as she filters and it's all modern and fancy and then you go to the cart and the cart has items in it but you can actually check out and this isn't just totally fake she integrated this with stripe so this is just using the fake stripe credit card number but this would actually work in process code it's the same else all the proper code is there to do it you pay with the credit card and stripe is communicated with the card is actually processed and it's it's doing all that kind of real ecommerce work but there's no server here this is still all jam stacky and the way that it works is that the back end is or the front is view the processing is striped but the way that those two mix because of course stripe has api keys that you need to protect you better as help protect your stripe api keys they're communicated with cloud functions in this case on azure so stripe again they want to help you do this api docs for stripe are incredible you know but it's but it's you know so you need to put it somewhere so in this case she's using azure uh and you azure has an interface i think this is probably an oldish screenshot i think it's been redesigned a little bit but what's kind of cool about this is that in this case you see how it's all kind of grayed out sarah put these in a github repo so her funker cloud functions are part of like the rest of her code base it's just she's shipping them up to azure here too so you don't have to use an online editor for your cloud functions can live in your repo along with all the rest of your code kind of cool kind of cool just because we're talking about payments i think this is worth knowing about the browsers have this new thing called the web payment api and the whole point of it isn't to like they're not actually processing payments for you what browsers are trying to give you here is free ui ux for checking out from pages like they'll be your shopping cart and your address collector and credit card information acceptor it's this piece that they're trying to give you and that's so cool because it's just it's consistent across sites then and they'll you know the people have their saved addresses and saved credit cards and stuff it's but it's just the ui ux you still need to bring your own payment processing so you still need stuff like you know serverless functions to process your stripe calls and all that kind of stuff but it's worth knowing about i think this that's some future web stuff that works nicely in a jam stack situation um so here's another one let's say you need comment threads this might be a moment where you're like yeah gem stack's cool but i need i literally need comments on my website so what am i going to do about that i'm just going to give up and use wordpress or something but no but comments are great structured data they're great for databases there's no reason to forsake databases because they're kind of perfect for stuff like this you need their name and their what piece of what article that comment was associated with and the value of the comment and when it happened and whether it's approved or not and it's great structured data so sure you could just reach for wordpress but let's assume that you're going to use a static site generator instead static site generators are so hot i'm going to use middleman or whatever there's a bunch of them they're all great there's hugo and gatsby's the cool one right and there's hexo and metalsmith and jekyll and middlemen and 11t is the new hot one isn't it so but you but you don't you know they're they don't have like comment threads aren't like a native feature of any of these things so in the way that they generally work is uh you know there's the content lives in your repo it's a big pile of markdown files actually had an interesting conversation last night where it's not necessarily that it's just anything that returns a promise kind of thing it was an interesting conversation but because so it wouldn't necessarily need to be a bunch of markdown files it could hit your contentful api or something but still statically generate total aside there but it smashes all that together with some templates and it makes like a directory that's a website like a bunch of files that you could put anywhere you put it in your s3 bucket or let netlify run it for you or whatever they all work the same way but none of them really have comments as a feature so what are we to do well we don't really have a database at our command so let's just put discus on it which is fine and it solves you know that comes with its own can of worms but that's been like solving that problem for us forever and and as such is kind of part of the the the jam stock universe in a way but like let's really nerd this one up like let's go full bore nerd on the comment thread thing let's want to roll our own system so we're going to use hugo because hugo is cool right uh that's our static site generator we're going to put a comment form on it where we collect their name and their email and what comment and when you click the button it's going to turn into a piece of like structured data we'll just format it as json and we'll throw it up and fight because firebase is great for that it's basically json based we can just throw our you know i know there's more to it than this i'm being abstracted on purpose but we'll keep that data in firebase well it could be spam it could be garbage so we're going to have a when that happens and of course we'll do this through a cloud function you know the option will also hit slack and slack will have a channel and it'll say do i approve or disapprove this message and if you say approve if you say disapprove it maybe just does nothing but if it hits approve then maybe that cloud function then can hit netlify and trigger a build that'd be kind of cool and during that build we'll have hugo go get all approved comments from that post and do it in the build process so now we have a comment thread the data is stored in a database kind of where it's nice to keep things like comments but we can still statically generate our site like that's a kind of flow that is just cool and gem stocky and serverlessly and just kind of sweet and a little bit like that there's still things around but it's kind of sweet uh that's phil's version phil's is cool phil's phil's it uses um like the nutlify like kind of you know when you use nutify forms it just uses nutlify as a database kind of kind of cool so what about what about reallife cloud functions like these were all little hobbyist kind of things but clearly sites use them all the time codepen uses the crap out of cloud functions here's one of the things we use cloud functions for you can write in a bunch of different preprocessor languages on code like your html you can write it on or any of these other languages your css you can write in popular css preprocessor languages javascript too we will process for you in a number of different ways we could and we have rearchitected this many times throughout the life of codepen but we've really settled on cloud functions as a way to do this because it's sweet so all these languages are written in node which is a thing that uh lambda which is another cloud services provider can run so we have little cloud functions whose whole job on earth is to take some less css and turn it into css and return it it's its own that's all it does in the world it's its own little job and then there's a couple other languages out there that you know sas there's dart sass these days which you haven't explored but there's some other languages that just don't run in a language that cloud functions can generally run for whatever reason cloud functions don't love ruby who knows but like in the world of codepen uh the ones that are on the left side of this screen are certainly uh kind of happier you know that they're cheaper they're easier to secure they're easier to scale they don't break that often it's not like the stuff on the right is untenable like we can manage it that word that's the business that we're in but certainly if you can run it as a cloud function oh your life just gets so much easier and better and less expensive and stuff it's great all right let's do another one just because we can let's say you need to be able to build a like a crm like your boss is like hey bro can you build me like an app to like track our customers and like if they got a gift box or not for christmas and you'd be like yes boss i can it's like no no like an app you know and you're like yes i can build you that app you know but anyways like no like let's do it for real like we got to build a crud app you know create read update delete like every app that most of us write we all write crud apps all day long we're going to need some structured data for our customers and whether they got a gift box or not fine where should we put that it'd be kind of rad to use air table i don't know if any of you have seen this there's a great little app it's spreadsheet like base they have a great ui which is just cool on its own but they have json apis for all that data so if we run a cheap easy solution like that we're going to make a little crud app using air tables great for that but airtable also has api keys that you probably don't want to put in your clientside javascript you can but not great you know this is like your private data airtable has also great apis they run node you can make a a cloud function that does all the crud stuff for airtable and pull and push data like oh they got their gift box or whatever that's a perfect use case for cloud function this is another sarah drasner demo where she made her and her team speak at all these events so she made this crazy webgl globe of where they're speaking and when and all this stuff but it you can run this anywhere you could run this on a jam stack thing because the way that she did it was basically built a little crud out the data store in this case is just a json file but she made a little ui for adding and updating stuff that run cloud functions in azure in this case and then it's a view app again on the front end let's say you want to build a blog like is is do you have to run a static site generator on jumpstack to have a blog or is there other ways to do it of course there's other ways to do it it's just structured data and this is a you know this worth googling we won't get into a whole bunch but kit hodgsden made this for us on codepen which is a way to spin up a blog and totally serverlessly so you can run it on codepen which has no database or backend functions or backend languages remember but here's like monica was talking about here's how easy firebase off is it's like two lines of code you're like oh cool now i have login for my app great and now that i'm logged in and authenticated i can write posts and so now i'm writing a post and it's going to turn that data into json send it up to fire base and now i have a new blog and it persists in the cloud right you refresh this page that blog post that i just authored will be there so a serverless blog how cool is that i did it all on codepen this got me empowered too i'm like i'm gonna make a food log i could download one of them two billion of them on my phone or whatever but i'll write one myself just to see if i can do it so i use firebase i have off now i type in what food i ate what calories and it saves it to firebase and it stores it by date and adds up the calories for me and all that stuff that's so empowering that is me kicking down the door of what i'm able to do as a frontend developer and it's badass i think anyway i just called myself a badass which is not the case so you want to send notifications for your app we already talked about sending sms but what if you are writing a bug tracker and it needs to send a slack notice or an email notice or whatever it's the same kind of thing you build cloud functions that do that job that's what this world is all about these days you can make this work that roadblock can be gone for you how does slack do it slack wants to he wants you to hit a url too you want to send a message to a slack channel they're just like here's the url hit it with your data and we'll do that for you so you'd write a cloud function that hit their url and does the job you know we're not looking at the code here we're talking about empowerment what you can do there's sending email there's things like mail gun and spark post and send grid they're just apis for sending emails what do you think we're going to do we're going to write a they're going to give us some node code we're going to put it in the cloud function and now we have a url that we can post to that will send an email so now we have this bug tracker app that we're going with so anyway we talked about web tasks that was a really easy way to get started with them and feel out what they are we looked azure's got cloud functions firebase will run them google cloud functions aws lambda is probably the biggest provider of them and nullifies got them of course too which is really rad because it's so easy on netlify you just put your function.js in a folder called functions kick it to your netlify and now at your website like it just makes a relative url that you can execute that function through lambda it's like the easiest way ever to get started with cloud functions they really did a good job with that which is cool so it's another way to get started with with cloud functions how much is this stuff going to cost i think this is funny so for like a hundred thousand times if we hit our cloud function to send an email a hundred thousand times and it ran for half a second each time which is way longer than it'll take to run and it uses 512 megabytes of ram which is way more than it'll ever need we're looking at like 50 cents so pretty affordable i'd say in the the terms of of this kind of stuff it's not always the right answer but for this kind of stuff it's pretty nobrainery it reminds me do you all watch carlton catch fire if you didn't you should go home tonight and watch all of it because it's the best show ever but in like season four they they kind of invent this concept in the 80s they're like these big computers are just sitting around doing nothing at night we should have them run we'll sell the time the unused computer time which is kind of what cloud functions are i think you know aws has all these servers sitting around that are prebought and not doing anything they're like well they're they're are doing something they're executing my cloud functions when i need them anyway so look look now we're little architects we have this bug tracker app or whatever that sends sms messages and it sends emails and it sends slack messages and we've written cloud functions for each one of those things oh but we found this cool abstraction mailer so instead of using spark posts apis directly we'll use this abstraction that way if we need to change providers we can we're like oh yeah i'm totally going to use that so now my mailer function isn't tied to spark posts but it's kind of an abstraction cool and then like i don't know it's weird to have our client be in charge of calling all these apis directly why don't we write a cloud function that's like just a notifier and we send say okay notifier i want you to send an sms to this location and so it can kind of be like a little router for all these things just to give ourselves a little bit of abstraction in here and all of a sudden we're thinking we're like freaking architects all of a sudden we haven't learned anything really but we all of a sudden we're like back end developers too you know uh which is great so we got to close this thing down it's half an hour it's not out of breath you know serverless it's this ingredient list it's not like if you go serverless or you go jam stock you have to do all of it but it can do all kinds of interesting things and it's incremental adoption for days you can just oh that looks nice i'll have one of these in one of these you know it's not just for hobbyist things it's not just for crazy enterprise sites it's for everybody it's amazing how i've seen the usage of this serverless jam stack stuff all across it's not for it's not prescriptive any type of website you know there's very clearly people doing gem stock for publishing of like lots of content blog type stuff publication type stuff and clearly it's for web apps whatever those things are people are using the crap out of that stuff so it's it's just everybody's using it in some way the perf story is so great for it especially on something like nutlify or your whole site like the document will come back like that and then the rest of it is like for you to screw up uh and the security is so great you know i lo that's one of the things i totally love about jam stack is it's not like oh my god how am i going to secure this database what file permissions should these php files be like what way what where are bad guys knocking on the door of this website that i don't know about i hate that stuff i don't want that to be my job my job has already gotten bigger as a front end developer and dealing with anything securityrelated just isn't my favorite thing to do so it's so nice that i can feel powerful and not worry about it so the kind of the point of this isn't that everything that we've talked about at this conference is the best thing in the entire universe and you should do all of it immediately it's about your brain knowing what's up and what's out there and being able to pick from that ingredients list when you can it's great your brain is now smarter that's the dumb little website i made the power of serverless dot info i have the twitter annual css now how cool is that right anyway that's that's my whole talk thanks everybody you
