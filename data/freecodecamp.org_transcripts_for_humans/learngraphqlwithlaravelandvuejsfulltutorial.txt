With timestamps:

00:00 - [Music]
00:00 - what's up guys andre here and today i'd
00:02 - like to show you how you can use graphql
00:04 - with laravel and vue
00:07 - i feel like there isn't too much
00:08 - information out there when it comes to
00:10 - using graphql with larabel and vue
00:13 - so i figured i'd make a few videos about
00:15 - it and share my findings along the way
00:18 - so if you're not familiar with graphql
00:20 - it is an open source data query and
00:21 - manipulation language for apis
00:24 - it's been growing in popularity over the
00:25 - last few years and is said to be the
00:27 - replacement for rest apis i personally
00:30 - think it's great and addresses the
00:32 - issues with rest apis
00:34 - so in this first video we'll take a look
00:35 - at some examples of graphql just so you
00:38 - can get more familiar with it and see
00:39 - its advantages over rest
00:42 - we'll take a look at some of the
00:43 - packages we'll be using for laravel and
00:45 - in view
00:46 - so for laravel we'll be making use of
00:48 - this lighthouse php package
00:50 - and for view we'll be using view apollo
00:55 - so this is the part where i usually show
00:57 - you the finished product so you can see
00:59 - what we'll be building in the next few
01:00 - videos
01:01 - but i'm not done it yet as i'm just
01:04 - sharing my process along the way i am
01:06 - done the design part so i'll show you
01:08 - that and just talk you through what it's
01:09 - supposed to
01:10 - do so a very simple app as we're just
01:14 - trying to learn graphql
01:15 - it's a book recommendation site built
01:17 - with graphql and all these technologies
01:19 - we just talked about
01:21 - so basically you can just perform crud
01:23 - operations on books
01:25 - and we have one basic relationship
01:28 - where
01:29 - a category has many books and a book
01:31 - belongs to one category
01:34 - and we'll also have
01:36 - an option to add a book update a book
01:39 - and delete the book so we'll click on
01:41 - this it should go to this other screen
01:44 - and here we can view the link for it if
01:46 - you want to purchase it edit and delete
01:50 - so there's no concept of users in this
01:52 - app
01:53 - because that kind of just adds
01:54 - complexity obviously you need users for
01:56 - most web apps but
01:58 - i just wanted to get you to understand
02:00 - the basics of graphql so we'll be
02:02 - leaving users out of this
02:04 - demo
02:06 - so yeah i just want to give props to
02:08 - where i got this idea from so if you go
02:10 - to ihbooks.com
02:12 - i saw this on product hunt a few weeks
02:14 - ago
02:15 - and it is basically where i got the idea
02:18 - from
02:19 - uh even the design i basically just
02:21 - ripped
02:23 - and even the book covers but i figured
02:25 - it'd be a good app to build so we can
02:29 - learn how to use graphql so yeah props
02:31 - to the person who built this site it's
02:33 - also a great site with many books i've
02:36 - actually read so check it out if you're
02:38 - interested in
02:40 - some book recommendations
02:42 - okay so i want to start with a quick
02:44 - overview of some of the problems that
02:46 - graphql solves over rest and for that
02:49 - i'm going to be looking at the github
02:51 - api because github has a traditional
02:53 - rest api and also has a graphql api
02:56 - so if you go to this url
02:59 - you'll have access to the graphql api if
03:02 - you click on explorer
03:05 - and you do sign in with github
03:09 - and here's where we can play around with
03:10 - graphql and i also have my rest client
03:13 - open
03:14 - and we'll play around with the rest api
03:17 - here
03:18 - okay so here's one of the end points for
03:20 - the github rest api and it's just
03:23 - information about myself so if you go
03:25 - here
03:26 - here's some information about myself
03:29 - so with rest it's all or nothing if you
03:31 - only need one or two of these fields
03:34 - you can't do that with rest because
03:35 - you'll have to return everything when
03:37 - you make the call to the api
03:40 - i have seen some apis where you can do
03:42 - something like fields equals and you
03:44 - just specify the fields here that you
03:46 - want returned
03:48 - but there is no common specification
03:50 - across all apis
03:52 - and if you're going to look at a new api
03:54 - they might have that and they might not
03:58 - so with graphql
04:01 - you can specify exactly what you want
04:03 - returned so
04:05 - let me just erase these comments
04:07 - and right here
04:09 - it's going to erase these
04:15 - and
04:16 - you can specify whatever you want return
04:19 - so if i want my
04:20 - login is the username and name is my
04:22 - name
04:24 - and there you go we get exactly what we
04:26 - want and none of the extra stuff we
04:28 - don't need
04:30 - so this is a graphql query
04:32 - which will be doing all of our work on
04:34 - graphql in and if you notice
04:37 - the query structure
04:39 - is the same as the result that comes
04:42 - back except the result has actual data
04:45 - and i think that's a more intuitive way
04:48 - than hitting multiple endpoints
04:51 - and requesting data that way
04:53 - so that's another thing with uh graphql
04:56 - there's only one endpoint
04:58 - usually it's a post request to slash
05:01 - graphql
05:02 - but you can change that if you like but
05:05 - in general that's the end point with
05:07 - rest there's multiple
05:08 - endpoints and
05:10 - sometimes there can be confusion over
05:12 - which endpoint it should be
05:15 - when you're making a new api what's
05:17 - restful what's not restful
05:20 - with graphql there's no arguments
05:21 - because it's just one endpoint and this
05:24 - expressive query language here
05:27 - okay so another problem with rest is
05:31 - sometimes the information you need is
05:34 - not in this endpoint but another
05:36 - endpoint so say for example i was making
05:39 - an app that had to get the github info
05:43 - uh so i'd hit this endpoint because i
05:45 - need information about myself
05:46 - but then i want to show my followers
05:49 - and there is an endpoint here for
05:51 - followers so right here
05:53 - if i hit this
05:55 - you'll see my followers here
05:58 - so that means we have to make two ajax
06:01 - requests
06:02 - which is not exactly ideal
06:05 - i mean it's not the end of the world but
06:06 - you can see that that can start to add
06:08 - up
06:09 - if you need information across different
06:11 - endpoints
06:13 - in graphql since we have access to this
06:16 - expressive query language we can just
06:18 - specify that we want to show followers
06:20 - in this one request
06:22 - so
06:24 - again there's also this nice
06:26 - intellisense here
06:29 - so followers and you can specify
06:31 - parameters here
06:33 - i just want the last 10
06:36 - and don't worry too much about edges and
06:38 - nodes which has to do with pagination i
06:41 - believe
06:42 - and i want the information for my last
06:45 - followers i want also their login and
06:48 - their name
06:49 - if i hit that
06:51 - there we go we have all the information
06:53 - requested here in this nice format and
06:56 - we can
06:57 - display this as necessary in our front
06:59 - end of our application
07:02 - so yeah just a high level overview of
07:05 - some of the advantages of graphql over
07:07 - traditional rest
07:09 - and now we can take a look at some of
07:11 - the specific implementations and we'll
07:13 - start with
07:14 - laravel okay so like i said earlier
07:17 - we'll be making use of this lighthouse
07:19 - package which is a graphql server for
07:21 - laravel
07:22 - it's an excellent package
07:25 - which has excellent documentation and
07:27 - works really nicely
07:29 - so if we go into the docs
07:32 - and if you go into tutorial
07:35 - there is a tutorial here
07:38 - which shows you how to
07:40 - get graphql up and running
07:43 - with a typical blog
07:46 - so
07:47 - there's also a github repo
07:50 - which we'll just make use of here
07:53 - instead of building it from scratch
07:55 - so let me just clone this real quick
08:01 - so let me just go here get clone
08:06 - and let's open that up
08:08 - house tutorial
08:10 - oops lighthouse
08:13 - tutorial
08:15 - and then open that in vs code
08:19 - so you can go through the tutorial if
08:21 - you want from scratch but let me just
08:23 - show you
08:25 - the essentials here so like i said it is
08:28 - an implementation of a blog
08:31 - so it's important to know the models we
08:33 - have here so we have users
08:37 - posts and comments and it's also
08:39 - important to know the relationships
08:40 - between them so users
08:42 - has many posts
08:44 - and a post belongs to a user
08:50 - also a post has many comments
08:54 - and
08:55 - a
08:56 - comment belongs to a post
08:59 - so let's go ahead and add some data in
09:01 - here and play around with graphql
09:04 - so there is no environment file so let
09:06 - me just quickly copy one
09:14 - and let me just change my database
09:18 - so i think i have one called lighthouse
09:20 - tutorial setup already
09:25 - and root
09:28 - route
09:30 - and i think just factory setup here
09:33 - yeah so this factory is for each of the
09:35 - models here
09:39 - and in post factory
09:42 - so yeah when i did this this should
09:43 - actually be a sentence not a title
09:49 - and is there cedars here
09:51 - no there's no cedar so let's just
09:54 - see if we can migrate first
10:00 - oh sorry i have to composer install
10:05 - all right that's page b artisan migrate
10:13 - okay so let's quickly whip up some
10:16 - seed data here using factories
10:19 - so i'm going to start with users
10:23 - app user
10:26 - and let's make 10
10:30 - create and let's make
10:34 - say 20 posts
10:38 - and let's make 20 comments
10:42 - oops
10:43 - so i just made another 20 users i meant
10:45 - to make
10:47 - more posts
10:49 - sorry post
10:52 - and let's make 20 comments
11:04 - okay don't know why that first time
11:06 - didn't work let's see if all our data
11:09 - is in here so i think this is the right
11:11 - database
11:13 - so let's check our users
11:16 - a whole bunch of users
11:18 - posts a bunch of posts
11:21 - and a whole bunch of comments okay so
11:22 - now we have data
11:25 - so let's go ahead and play with graphql
11:28 - so back into the docs
11:31 - so if you go to installation if you want
11:33 - that
11:35 - graphical
11:37 - tool that i was showing you when i was
11:38 - playing with the github api
11:41 - you have to install this package and
11:44 - you don't have to
11:46 - but if you want that tool in the browser
11:47 - then you have to install it
11:49 - there are also desktop
11:51 - applications which i prefer but let me
11:53 - just show you this one first and then
11:56 - i'll show you the desktop versions that
11:58 - i prefer
11:59 - so let's install that
12:03 - and if we go into chrome
12:06 - let's see if that works so it's
12:07 - lighthousetutorial.test
12:12 - and i believe it's slash graphql
12:15 - or it could be graphql playground
12:18 - let's see
12:21 - okay so it's graphql dash playground
12:25 - to access the tool
12:27 - so there you go
12:30 - just make that bigger
12:33 - so now we can play around with graphql
12:37 - and you can see that
12:40 - there's already errors here because i
12:42 - don't think there is a query specified
12:44 - for user
12:46 - so yeah let's take a look at
12:51 - the schema here which is where you're
12:52 - going to be spending most of your time
12:55 - so it's under
12:56 - things under routes
12:59 - graphql schema.graphql
13:02 - so in here you have to specify all your
13:05 - types
13:07 - also the relationships so this is
13:10 - exactly like it's specified in
13:12 - the database the user
13:15 - and all the types the exclamation mark
13:17 - means it's required and here is the
13:22 - relationship so user has many posts
13:25 - and is using a directive here which this
13:27 - package makes a lot of use of directives
13:32 - so same for the post we specify the
13:34 - relationship the other way
13:37 - or not the other way
13:39 - the relationship oh here's the other way
13:41 - between users and posts but here's
13:43 - relationship between posts and comments
13:46 - and the same here
13:48 - and here is where the
13:51 - queries live so if you want to make a
13:53 - new query we have to define it in here
13:56 - again there's heavy use of directives
13:58 - which you should learn it looks weird at
14:01 - first but it's actually really powerful
14:03 - and
14:04 - allows you to write
14:07 - less code
14:08 - but if you don't like directives then
14:10 - you can just use custom resolvers and
14:12 - just
14:13 - query eloquent the fashioned way
14:16 - which i will show you as well
14:18 - so yeah back into
14:20 - here
14:21 - so this is a rex red squiggly because
14:23 - there is no query for user
14:26 - there's only posts and
14:28 - posts
14:31 - so if i change this to post then this
14:33 - should return
14:35 - there is no name for post it's a title
14:38 - if you want auto complete
14:39 - i think you can press control and
14:41 - control space but that is bound to
14:43 - alfred for me
14:45 - but shift space works for me and you can
14:47 - bring up the autocomplete
14:49 - and you can hit this play button or you
14:52 - can press command enter
14:54 - and there you go it brings back that one
14:57 - post that we asked for with id of one
15:00 - again you can do everything
15:02 - that you like in here
15:04 - specify more fields
15:07 - if you want the content
15:09 - there you go
15:11 - so
15:12 - [Music]
15:13 - let's look at the post for a second
15:15 - we can also get the user it belongs to
15:17 - and get those back so user
15:22 - and just specify what you want returned
15:24 - so we want the username
15:26 - and we want the user email
15:30 - and this is the user that created this
15:33 - post
15:35 - and also if you want to get the comments
15:37 - for this post
15:39 - there should be comments i think
15:42 - comments
15:44 - and we can just specify what we want so
15:48 - i think the replies
15:52 - what is it in comments
15:55 - uh could be empty let's see
15:58 - let's try putting the id in here which
16:00 - id is this
16:03 - oh you know why this post doesn't have
16:06 - any comments so that's why it's
16:07 - returning an empty array
16:10 - so let's i think maybe
16:12 - post of 20 maybe
16:17 - okay so 50 has comments and there you
16:20 - see it there cool
16:23 - so let's quickly make a query for users
16:27 - and let's just take what we already have
16:29 - here
16:30 - and let's just change it for users
16:33 - so
16:35 - this will just return all the users so
16:37 - this is the query
16:39 - this is the return type
16:41 - so graphql is typed
16:43 - that's what allows you to have that nice
16:45 - autocomplete and the nice intellisense
16:48 - which is great
16:50 - so again this is a directive
16:52 - and
16:53 - there are a lot of directives for this
16:56 - package which you should
16:57 - get to know
16:59 - right here
17:04 - this is for the one user
17:07 - we want to pass in an integer that's
17:09 - required
17:11 - and we want to make sure
17:13 - we
17:14 - we return just one user
17:18 - here this is an array of users so it can
17:20 - be
17:21 - one or more this is just one
17:23 - so we're going to find the user with an
17:25 - id of whatever is passed in here
17:28 - same thing with the post but for users
17:30 - and now this should work in our schema
17:34 - so
17:36 - let me just
17:40 - write another one here
17:42 - so query
17:44 - user id
17:46 - of one
17:48 - and let's just grab the name i believe
17:54 - so we have to refresh it first someone
17:56 - knows about it
17:58 - okay and now we should get the
18:00 - autocomplete
18:03 - sorry this should be
18:04 - a user
18:06 - array not a user's array
18:09 - refresh
18:12 - and the error is gone and there you go
18:18 - so so far we've just been looking at
18:20 - query operations which are just read
18:22 - operations
18:23 - but there's also a mutation type which
18:26 - has to do with any writing of data
18:29 - so an update a delete or a create
18:33 - so let's quickly go over that it's going
18:36 - to paste in some code
18:38 - again when we build out the real app
18:39 - we'll start from scratch this is just a
18:41 - demo so you have an understanding of how
18:43 - it works with laravel and this package
18:47 - so we specify a mutation
18:51 - and
18:53 - let me just fix this okay so these are
18:57 - the parameters
18:58 - it takes in a name
19:00 - which is a string and it's required
19:02 - and here are some validation rules again
19:05 - this package makes heavy use of
19:06 - directives which does look weird at
19:08 - first but
19:09 - you'll get used to it and if you don't
19:10 - like it again you can use custom
19:12 - resolvers
19:13 - which i'll show you in a second so email
19:15 - again
19:16 - is required
19:18 - and a password which it will hash using
19:20 - bcrypt
19:21 - and then it will return a user it will
19:24 - return that created user
19:26 - so let's try this out
19:30 - so let me just comment this out
19:33 - and instead of query it's going to be a
19:36 - mutation
19:37 - so let's do that mutation
19:40 - the autocomplete is really really nice
19:42 - really helps even if you don't know
19:44 - graphql if you just play around
19:46 - it will help you so create user
19:52 - after refresh
19:57 - so there you go create user
20:01 - and it's going to give the parameters
20:03 - that we need
20:05 - name
20:06 - andre
20:11 - what's next email
20:15 - andre at andre.com
20:20 - password
20:21 - is password
20:24 - and then it should specify what we want
20:25 - back
20:27 - we just want the say the id
20:31 - and the
20:32 - name and if we do that
20:35 - there we go id of 91
20:38 - go into our database
20:40 - if i refresh
20:43 - and go over here
20:47 - sorry it should be users
20:49 - so
20:50 - there we go i think i saw it
20:52 - yeah right there
20:54 - cool
20:56 - so yeah let me show you
20:58 - custom resolvers if you don't want to
21:00 - use directives or if you can't do
21:03 - something with just directives and you
21:04 - need something more powerful or need
21:06 - complete control
21:08 - then you can just use custom directive
21:10 - so i'll show you in
21:12 - here
21:14 - so let's just name it
21:17 - latest post
21:19 - this again this can be anything it could
21:20 - be a really complex query which you just
21:22 - want to use eloquent with
21:25 - and you just have to specify the name
21:27 - and the return
21:28 - type and in this case it's going to
21:30 - return a post just one
21:33 - and then let's go to the docs
21:37 - and i think there's a guide for
21:40 - types
21:48 - no it's not types fields i think there
21:50 - we go custom resolvers
21:52 - um so here's the example i'm about to do
21:55 - but you can just make use of this
21:58 - artisan command
22:00 - so whatever you name the custom resolver
22:02 - just make sure you make a class with a
22:04 - capital l in this case
22:07 - so i'm going to paste that in phpr is in
22:09 - lighthouse it's a query you can do
22:11 - custom resolvers for mutations as well
22:15 - so latest post
22:16 - let's go to that
22:19 - latest post
22:21 - and you can also have
22:24 - parameters here and then you can access
22:26 - the parameter from within the
22:29 - class
22:30 - but in our case we don't have a
22:32 - parameter so in here
22:34 - if we did have a parameter we'll just
22:36 - specify it like like this
22:38 - so we just get it
22:40 - arcs and then if the name of the
22:42 - parameter was that you can just do that
22:43 - but we don't have one so
22:47 - and in here you can do whatever you like
22:50 - and you just have to make sure that you
22:52 - return whatever you said you would
22:54 - return here so in our case we have to
22:56 - return a post so just one post
22:59 - so i'm just gonna do return
23:01 - post
23:03 - all
23:04 - and this is called last
23:06 - again you can do
23:08 - complex query or whatever you like in
23:10 - here just make sure you return the right
23:12 - thing
23:14 - and that's it
23:16 - so if we go back in here
23:21 - um let me just comment this out
23:24 - and let me just refresh actually
23:27 - let's take this out
23:31 - and i think i named it
23:33 - latest post
23:35 - yeah so just lay this post
23:37 - so that should return the post and
23:39 - just grab the title
23:45 - up post not found
23:47 - make sure to import it
23:48 - so just import it here
23:51 - okay
23:52 - let's try again
23:54 - there you go there's the latest post but
23:56 - now we're using a custom resolver
23:58 - if you need that
24:00 - extra power
24:02 - so yeah that's the gist of it uh you'll
24:04 - be doing most of your work in this
24:06 - schema graphql you can also split this
24:09 - up if you like into multiple files if
24:10 - this starts to get bigger
24:14 - and
24:15 - yeah so that's basically it for laravel
24:19 - oh yeah so i personally like to
24:23 - have this tool as a desktop app
24:26 - and there are desktop apps for both
24:27 - graphical and
24:29 - graphql playground so this one's
24:31 - graphical playground
24:32 - and the other one that we used when we
24:34 - were doing the github api is called
24:36 - graphical so just search for them
24:39 - graphical
24:39 - [Music]
24:41 - desktop
24:42 - and you can download them
24:45 - i believe they're electron apps and
24:48 - graphql playground
24:50 - desktop
24:51 - you can search for them i have both of
24:53 - them installed already um so let me just
24:55 - show you quickly
24:56 - so let me show you graphical first
25:00 - so just paste
25:02 - this url in
25:05 - and you can do the same thing
25:08 - so let me just grab this
25:12 - paste that in and try it
25:15 - and it works cool the other one's called
25:17 - graphql playground
25:22 - and let me just grab the
25:24 - url again
25:26 - it's a url
25:31 - and
25:32 - for some reason it knows i guess it took
25:33 - the information from here
25:36 - and there you go it works i personally
25:37 - like this
25:40 - um this is more like your
25:44 - text editor so you can do things like
25:46 - command d
25:47 - you can move it up and down
25:49 - you can have multiple cursors
25:53 - so i prefer this over graphical but you
25:56 - can use whatever you like i prefer it
25:58 - again as a desktop app
26:00 - because
26:01 - you know we tend to have a million
26:04 - things running in our tabs
26:06 - so just organization purposes i like to
26:09 - use the desktop app
26:12 - okay so let's take a look at how to use
26:14 - graphql on the front end so up to now
26:17 - we've just been playing around on the
26:18 - back end and using these tools uh to to
26:22 - interact with graphql so how do we
26:24 - consume it from the front end
26:27 - we need to use a graphql client and in
26:30 - this case we're going to use view apollo
26:32 - which is very nice and easy to use
26:35 - so let's go ahead and get started and
26:37 - let's install it so i already have a
26:39 - view cli 3
26:40 - application scaffold it out
26:42 - and i literally did not do anything to
26:44 - it i just did view create and that's it
26:47 - and it's running right here
26:51 - so
26:52 - the installation is very straightforward
26:54 - if you're using vcl3 you can also do it
26:57 - the manual way but
26:59 - this way is much quicker and easier so
27:01 - i'm just going to do view add apollo
27:05 - oops let me go into it first
27:10 - and view add apollo
27:14 - so it's asking if you want example code
27:17 - i'm going to say no
27:19 - we don't need a server because we
27:20 - already have one
27:23 - okay so there are the files that have
27:25 - changed and it's installed
27:28 - so let's go ahead and go into
27:32 - actually no this is there well let's go
27:35 - into our view app
27:40 - and i'm just going to play around here
27:42 - in hello world
27:44 - so let me just close the stuff
27:48 - so what i want is i want to make a
27:51 - data property down here
27:54 - and i want this populated with
27:56 - stuff from the back end so
28:00 - return say users let's make it an empty
28:03 - array
28:06 - and let's also make one for
28:09 - just user
28:10 - let's make that null
28:13 - okay
28:16 - so how do we get
28:19 - the information from our backend graphql
28:22 - into here
28:24 - so
28:25 - obviously we'd make use of these queries
28:28 - so let me just bring one up
28:31 - so let's just get something very basic
28:33 - users and let's grab
28:35 - their name
28:37 - and their email
28:41 - and not sure why this isn't working let
28:43 - me refresh
28:48 - okay there we go
28:50 - so we just want this information
28:53 - in our front end
28:55 - so if we go into the docs
28:59 - for queries
29:02 - so obviously we'd have to make use of
29:04 - this query somehow so the way to do that
29:07 - is to
29:08 - import this graphql gql thing so let me
29:12 - import that up here
29:16 - and
29:17 - we have this new apollo property
29:21 - and so let's put that
29:24 - right underneath here
29:29 - and here is where you would specify
29:33 - so we want to populate users
29:36 - with this query so we'd use gql and then
29:40 - we use template strings
29:41 - to put the query in there so in our case
29:45 - um we just want this
29:49 - so you can put query but you don't have
29:50 - to
29:51 - so i'm going to leave it out for now
29:54 - just so it's a bit shorter
29:56 - users
30:00 - so it's basically this basically that
30:04 - this query right here so we just want
30:06 - name and email
30:10 - name and email
30:13 - and
30:15 - yeah let's give that a try
30:18 - what is this complaining about
30:20 - i'm sorry this should be a method
30:26 - okay so
30:28 - let's see if this works
30:32 - so
30:33 - this should populate when the component
30:35 - loads so let's see if that works
30:38 - i'm going to open this
30:41 - see if you have any errors first
30:47 - and check review
30:48 - devtools let's go into our hello world
30:51 - app
30:52 - and let's check our
30:54 - users it's undefined so it's not working
30:58 - so yeah obviously it's not working
31:00 - because we didn't specify the endpoint
31:03 - so if you go into this file view
31:05 - apollo.js within the source directory
31:08 - we can specify the endpoint here
31:11 - so it's trying to hit this endpoint
31:12 - obviously that's not the correct
31:14 - endpoint
31:15 - so
31:16 - it's
31:18 - what is it again it's
31:21 - lighthousetutorial.test
31:23 - slash graphql
31:26 - okay so that should do it
31:31 - save that
31:32 - and see if this works
31:35 - so there it is loading
31:45 - and as you can see we're getting course
31:47 - errors here so let's quickly fix that
31:50 - so we have to install
31:52 - laravel cores on the back end
31:55 - and specify a middleware for the
31:57 - lighthouse package
32:02 - let me just install this real quick
32:09 - in the back end
32:14 - and while that's going usually you would
32:16 - install the
32:18 - the uh
32:19 - the package using middleware here in app
32:22 - http kernel
32:23 - but in our case we want to put it in the
32:26 - config of lighthouse
32:29 - so let's go ahead and do that let's go
32:30 - back to our back end
32:32 - and i believe it's in config
32:35 - lighthouse
32:37 - there it is
32:39 - and i think there's a section for
32:41 - middleware here
32:43 - yeah so it goes right here under this
32:46 - route config
32:49 - sorry
32:51 - uh
32:53 - let me just
32:54 - uncomment this
32:57 - and then we can add
32:59 - that package right here
33:02 - cool
33:05 - and now this should be done obviously
33:07 - okay
33:08 - and this should work now on the front
33:11 - end
33:17 - okay no more course errors
33:19 - let's check our view config
33:22 - view devtools i mean and there you go 91
33:25 - users
33:27 - so
33:28 - this corresponds to
33:30 - our database there should be 91 users in
33:32 - here
33:34 - and there is cool
33:37 - and you will display this as you please
33:39 - in your front end i'm not going to do
33:41 - that
33:42 - okay so let me quickly do a mutation and
33:45 - then
33:46 - i think that should give you a good idea
33:49 - of how graphql works in our back end and
33:53 - our front end
33:54 - so let me just make a button here
33:56 - quickly in the hello world component
33:58 - up here
34:00 - just put it
34:01 - right here
34:03 - button sorry
34:06 - um
34:07 - say at click equals
34:10 - handle click
34:12 - say mutation test
34:15 - mutation
34:16 - and let's make a methods for handle
34:18 - click
34:21 - so i'm going to put it right after
34:22 - apollo
34:24 - methods
34:28 - handle
34:30 - click
34:33 - so if you look at the docs there's a
34:35 - section here for mutations
34:39 - right here
34:42 - so i'm just going to copy and paste this
34:44 - video getting quite long
34:47 - so you would just make use of this
34:48 - apollo mutate and then put in the
34:52 - graphql
34:54 - for the mutation
34:56 - so let's go ahead and do that real quick
35:00 - just gonna paste this in
35:03 - so this apollo mutate
35:05 - and the mutation i'm doing is this
35:09 - so i'm creating a user
35:11 - and i'm just hard coding some data in
35:13 - here
35:16 - and
35:18 - this corresponds to
35:23 - the create user
35:26 - mutation that we have here
35:28 - and that should work
35:30 - so let me just
35:36 - do that and then let's see if this works
35:40 - okay
35:42 - so that should have reloaded
35:44 - i'm missing a comma somewhere
35:47 - i think i'm missing a closing bracket
35:49 - here
35:51 - okay let's try it again
35:55 - yeah i was missing another
35:57 - closing brace there
36:00 - okay so there it is
36:02 - so let's test this mutation
36:05 - uh there's going to be no feedback
36:09 - let's just see if that added like it did
36:14 - so let's just refresh this
36:16 - and there you go
36:17 - cool
36:22 - i like to start building out this book
36:24 - recommendation site in graphql
36:27 - if you haven't seen the last video we
36:30 - took a look at using graphql with both
36:32 - laravel and vue and the tools available
36:35 - to us
36:36 - in this video i'd like to start building
36:38 - out this app
36:39 - and we're going to start with the back
36:41 - end using laravel
36:44 - okay so let's go ahead and make a new
36:46 - laravel app
36:48 - so i'm going to do laravel new let's
36:50 - call it books ql
36:53 - laravel and then the front end will be
36:55 - called booksql view
36:59 - alright let's open that up
37:05 - and let's open it up in code
37:10 - so let me just set up my database
37:13 - i already have a database
37:16 - made so it's called booksql
37:19 - laravel
37:21 - and it's root
37:24 - root
37:25 - okay so
37:26 - we need to start by making our models
37:29 - and our migrations
37:31 - so
37:33 - again if you look at the design we only
37:36 - have two models and one relationship
37:37 - between them we have categories and we
37:40 - have books and the relationship is a
37:42 - category has many books
37:44 - and a book belongs to one category
37:49 - so realistically you probably want to
37:51 - have
37:52 - a book to belong to many categories
37:56 - but
37:56 - i'm just trying to make this as simple
37:58 - as possible so we're just going to have
38:00 - the
38:01 - belongs to one category relationship
38:06 - so let's make our models let's start
38:07 - with the category
38:09 - make
38:11 - model
38:12 - category and
38:14 - dash a will create a migration and a
38:18 - controller which we don't need but let's
38:20 - create it anyways in the factory
38:23 - let's do the same for
38:26 - the book
38:31 - so let's open that up and let's set the
38:34 - relationships so start with category
38:38 - and i'm gonna
38:41 - set the guarded to an empty array just
38:44 - because i'm gonna
38:46 - make a cedar
38:48 - later on
38:51 - and let's set the relationship so a
38:53 - category has many books
38:55 - so
38:56 - [Music]
38:57 - i guess my snippets don't work anymore
38:59 - okay
39:03 - books
39:06 - and let's do
39:07 - return
39:09 - this
39:10 - has many
39:12 - book class
39:15 - okay
39:16 - and let's do the same for
39:19 - the
39:20 - book
39:23 - so i'm going to do guarded as well
39:28 - then do
39:32 - a
39:37 - this
39:39 - belongs
39:40 - to category
39:44 - class
39:46 - okay
39:48 - now let's set up the migrations and on
39:51 - all the fields on the book so create
39:54 - books table
39:57 - and i am just going to paste this in
40:01 - to save some time
40:02 - and then i will go through each of the
40:04 - fields
40:05 - so
40:08 - the title obviously the author
40:11 - so the image is going to be a string
40:14 - and it can be empty
40:17 - the description is just a longer form
40:19 - text the link is a string
40:22 - this featured flag is because in the
40:26 - design i have a featured
40:29 - category here
40:31 - uh maybe i'll design a different two
40:32 - maybe i'll have a hero
40:34 - that displays some featured books
40:36 - anyways that's the idea i'm not sure if
40:38 - we're going to use that
40:39 - but there is a featured boolean
40:43 - column there
40:45 - so this is the relationship with
40:47 - category
40:48 - so a book belongs to a category so we
40:51 - need a category id
40:53 - and that is a foreign key on the
40:56 - categories table
40:58 - and that's it
40:59 - so let's do the same for
41:02 - create categories table
41:06 - and this only has one field
41:10 - it's just
41:11 - the name of the category
41:16 - okay
41:18 - so let's see if we can migrate this
41:23 - okay so that works
41:25 - so
41:27 - now i want to make a seeder just so i
41:29 - have realistic data
41:31 - and the data i have in my seeder are all
41:34 - of these books here i have in the design
41:37 - maybe i'll add more later on but there
41:39 - is about this many
41:41 - and i didn't make it very
41:43 - very realistic in terms of the
41:44 - categories i just dumped
41:46 - like the first six in the first category
41:48 - and the next six the next category and
41:50 - the next three in the next category
41:52 - just so how every category has at least
41:55 - a few books
41:57 - so let's make a cedar
42:00 - start with the categories so php artisan
42:03 - make
42:04 - seed
42:06 - categories
42:08 - table cedar
42:11 - oops why is there a dash there
42:18 - okay and let's also do one for books
42:26 - and it's going to
42:30 - our
42:33 - seeds
42:35 - database tables heater and it's
42:38 - just to
42:39 - [Music]
42:40 - start with the categories
42:44 - and let's do the books after that
42:52 - and obviously i'm not going to make you
42:53 - watch me do this i'm just going to paste
42:55 - in
42:57 - what i have here in my other project
42:59 - so this is the books tables heater it's
43:01 - a whole bunch of books
43:04 - and i'm going to paste in the category
43:06 - staples theater
43:09 - and this is just a few categories
43:14 - okay so i have these categories and
43:18 - all of these books over here
43:21 - cool so now let's try to
43:25 - migrate fresh
43:27 - where's migrate fresh and it's also seed
43:32 - dash dash seed
43:35 - and that looks good let's see if we have
43:37 - data
43:41 - some books
43:42 - cool a bunch of books and
43:45 - some categories here cool
43:49 - okay so you see i also have
43:53 - the cover images here
43:54 - so i'm just going to put these in
43:57 - so this is the project i already did
44:00 - and i already have
44:02 - the cover images here
44:04 - so i'm going to put these in
44:07 - the public folder
44:09 - we're not going to use it in this video
44:10 - but
44:11 - we're going to need it eventually when
44:12 - we make use of the cover images
44:15 - so i'm just going to put it in an image
44:17 - folder
44:20 - and paste them in
44:21 - i guess i can't paste can i paste
44:25 - okay so they're all in here now cool
44:30 - okay now we can start using the
44:33 - lighthouse package so let's go ahead and
44:35 - install that
44:39 - installation composer require
44:42 - let's do that
44:49 - okay next is
44:52 - this
44:53 - publishes the default
44:55 - schema.graphql file which we can make
44:57 - use of and then we can modify it later
44:59 - on
45:01 - so let's do that
45:04 - okay
45:06 - and i'm not going to use this dev tools
45:08 - i'm just going to use the one on my
45:10 - desktop so
45:12 - it's graphql playground
45:18 - and
45:20 - we'll use that when we need to use it
45:22 - and i also want the config
45:26 - where's that
45:27 - i have to publish the config as well
45:30 - okay so that
45:38 - okay
45:40 - and that is published cool
45:43 - okay so now back to our code
45:46 - and the first thing we need to do is
45:48 - let's go into our schema graphql so
45:51 - that's in
45:52 - routes
45:53 - graphql schema
45:56 - and you can see we have some boilerplate
45:58 - here which we can
46:01 - use
46:02 - will not use we'll model our models
46:05 - after it
46:06 - so first thing i want to do is define
46:07 - our types
46:10 - so
46:10 - we'll like i said we're not going to
46:12 - have users in this app
46:14 - just to keep things simple
46:17 - so
46:18 - it's definer types we'll leave it in
46:21 - there for now
46:22 - we'll leave the user in there for now so
46:24 - the first thing we have is a book
46:27 - and this is just the field we defined in
46:30 - the migration so
46:32 - create
46:33 - book
46:34 - so all of this stuff but in graphql
46:37 - format
46:38 - so we have
46:40 - id and this is of type id
46:45 - and id is a field type in graphql
46:50 - and it's required
46:52 - title is a string it's required
46:56 - author
46:57 - string required
46:59 - image
47:01 - string
47:02 - not required
47:04 - link
47:05 - string
47:06 - not required
47:09 - description
47:11 - string
47:12 - not required featured
47:15 - boolean
47:18 - not required
47:19 - and
47:21 - a book
47:22 - belongs to a category
47:25 - so we have to specify the relationship
47:27 - here
47:30 - and it is a category and we'll define
47:32 - that right after this
47:34 - and it is it belongs to relationship
47:39 - okay
47:40 - so that is our book type and then the
47:42 - next type is category
47:46 - and let's do the same thing id is id
47:51 - required name
47:53 - string required
47:55 - and it's set up the relationship
47:58 - books
47:59 - is an array of books that's what it
48:02 - returns
48:05 - and the relationship is has many
48:09 - and that is it for our types so now
48:12 - let's start defining the queries and the
48:15 - mutations
48:18 - so
48:19 - um let's get our design to see how the
48:21 - app's supposed to work
48:23 - so the default view
48:26 - although this doesn't represent that i
48:27 - just want to show all the books
48:30 - um
48:32 - no pagination because that just
48:34 - i mean in a real app you would have
48:36 - pagination but
48:37 - again it's trying to make this as simple
48:39 - as possible
48:40 - you can see that
48:42 - the
48:42 - example here uses paginate and we won't
48:45 - be using paginate anyway so we just want
48:47 - all the books so that's the most basic
48:49 - query we can do
48:51 - so let's just
48:54 - do books
48:56 - and that's going to return a book array
49:00 - and that's required
49:03 - actually it's not required because it
49:05 - can be null
49:06 - and we're just going to use the all
49:08 - directive and that will return all books
49:11 - so let's go ahead and try this out in
49:14 - our graphql playground so it's books ql
49:17 - dash laravel
49:22 - booksql
49:25 - test graphql
49:27 - okay
49:29 - and
49:32 - what is it again it's books so query
49:35 - make this bigger
49:39 - that big enough one more
49:41 - so query
49:44 - um
49:47 - books
49:49 - and
49:50 - let's return the
49:52 - title
49:55 - there you go
49:56 - book was not found
49:59 - okay so
50:00 - in the config so if we go to the
50:03 - lighthouse config
50:04 - it's in config lighthouse
50:07 - there is an option here that says where
50:09 - the models are supposed to be not sure
50:12 - why they defaulted to app models because
50:16 - the default functionality for laravel is
50:19 - it just goes into the
50:21 - app folder
50:22 - so if we do that that should fix that
50:24 - error
50:26 - let's try again
50:28 - refresh it first
50:30 - let's try again
50:31 - there we go
50:33 - and we can do whatever we like here id
50:39 - what else
50:42 - author
50:44 - cool
50:46 - so what else do we need
50:47 - for our app to work
50:51 - we also need to be able to get the
50:54 - details for one book
50:56 - so for this view we need to make another
50:58 - request when we
51:00 - click on one and it goes here
51:03 - so let's do that
51:07 - and let's go to
51:10 - and we'll just copy
51:11 - this
51:14 - and we'll just change it so
51:16 - this will be book
51:18 - just one book
51:20 - and the parameter is the book id
51:23 - um later on maybe we can change this to
51:25 - a slug
51:27 - that would be more url friendly and more
51:29 - seo friendly
51:31 - and it's going to return one book
51:34 - and we want to find
51:38 - that book based on the ideas passed in
51:40 - so
51:42 - you can specify the model but i don't
51:43 - think we have to
51:47 - and let's go ahead and try that
51:52 - so
51:54 - let me just
51:58 - query
52:01 - book
52:02 - oh let me refresh
52:06 - book
52:06 - there we go
52:08 - we need an id
52:10 - fashion one
52:11 - and we can do the same thing id title
52:14 - author
52:16 - cool
52:18 - and if you want the category for this
52:20 - book since there's a relationship we can
52:22 - already we can do that as well
52:24 - so let's go category
52:28 - and then what's the types here
52:30 - we can just get the name
52:33 - so there you go
52:35 - this book by this author is in this
52:38 - category
52:40 - okay so let's go ahead and
52:43 - define the endpoints for categories as
52:45 - well
52:48 - so let's do that
52:51 - so it's basically just this
52:55 - but for categories so let's be
52:58 - categories
53:00 - this will be an array of categories
53:04 - and all this will be a category
53:08 - and we'll take an id as well
53:11 - and this will be a category
53:17 - okay let's try that out
53:21 - these this should work as well
53:24 - but for a category let me refresh real
53:27 - quick
53:29 - and this should be a category
53:33 - and obviously a category doesn't have
53:35 - this
53:37 - has a name
53:39 - cool
53:41 - and we can also do
53:44 - categories
53:48 - and
53:50 - name
53:52 - cool so that's all the categories
53:55 - so back to our app
53:57 - we want to be able to click the category
54:00 - and just have it filtered by those books
54:04 - so that's really built in since we have
54:06 - that relationship defined
54:08 - so say for example we wanted everything
54:11 - in
54:11 - marketing category
54:14 - so marketing is
54:16 - id1 i think
54:18 - okay it is
54:22 - so let's get the category first
54:25 - so category
54:27 - id
54:28 - one
54:32 - and
54:34 - because we have that relationship
54:35 - defined right here in the type
54:41 - the category i mean
54:44 - then we can get the books for this
54:45 - category and that's exactly what we need
54:47 - in our app
54:50 - so let's just do
54:53 - books
54:55 - and we can specify the fields we want so
54:57 - in our case
54:59 - what do we want
55:01 - we're going to want the name the author
55:04 - the cover
55:07 - or i can name the image
55:09 - and the id because we're going to click
55:11 - on that and
55:13 - we want to go to a different route okay
55:16 - so id
55:19 - uh title
55:22 - author
55:24 - and this thing i call the image
55:28 - so there you go we have all this
55:30 - information that we need which we can
55:31 - use on our front end when we start
55:33 - working on our front end
55:35 - what else
55:37 - so like i said we also have this
55:38 - featured
55:40 - category which is not really a category
55:42 - it's just an extra field on the
55:46 - model
55:48 - so how do we filter by just
55:52 - books that are featured
55:55 - so let's add one more here to books
55:57 - let's call it books
55:59 - by featured
56:03 - so like i said in the first video if you
56:05 - don't like directives you can just use
56:07 - custom resolvers
56:10 - but
56:11 - if you want to make use of directives
56:13 - you can do it like this
56:14 - so featured
56:16 - is a boolean as required
56:20 - and we want to use the eq directive
56:24 - and this is going to return
56:26 - an array of books
56:28 - and it can be empty so let's not put the
56:31 - exclamation mark and let's grab all
56:34 - so all the books that are
56:36 - featured based on this parameter coming
56:38 - in
56:40 - so right now
56:42 - another feature
56:44 - so this should return an empty array of
56:47 - books so let's see if that happens
56:50 - uh what did i name it books by featured
56:54 - let me refresh this
56:57 - books by featured
56:59 - and then let's grab the title
57:03 - it should be empty
57:06 - oh sorry i need the
57:10 - featured is true
57:13 - so it should be empty because none of
57:14 - them are featured
57:15 - cool
57:16 - and if i say false this should be
57:19 - all of the books
57:21 - okay
57:24 - so if i add one if i manually
57:27 - set one to featured or a few of them
57:29 - let's go to books
57:32 - let's say
57:33 - this one this one
57:35 - this one
57:37 - this one and this one
57:40 - and save that
57:42 - let's go back here
57:44 - and this should now have a few of them
57:47 - cool
57:50 - and again i did this in the last video
57:54 - and i just mentioned it but
57:56 - if you have
57:58 - some complex query that directives can't
58:01 - handle or if you just don't like
58:02 - directives you can use custom resolvers
58:06 - so let's say
58:08 - some complex
58:10 - query
58:13 - search
58:14 - is the
58:16 - parameter
58:18 - and it's a string
58:19 - and it returns an array of books
58:25 - and we can just use the command line
58:29 - uh forgot what's called it's called
58:31 - lighthouse query i think yep
58:35 - so php artisan light house query
58:40 - and name it some complex
58:43 - query so it has to be the same name as
58:45 - this
58:46 - and obviously you don't use directives
58:48 - here because the class will handle that
58:53 - okay
58:54 - so that
58:56 - goes into i think app
58:59 - http graphql some complex query
59:03 - so here is where the logic goes
59:05 - so you can do whatever you like in here
59:08 - some complex
59:10 - query
59:12 - but since i
59:15 - named the premise parameter search let's
59:18 - do a basic search here you can do this
59:19 - with directives as well but let's just
59:21 - do this return
59:23 - book
59:25 - where
59:26 - say app book
59:30 - author so this is going to do a search
59:33 - for the author
59:36 - like
59:40 - and
59:41 - let's do this
59:44 - so
59:45 - i just want to search on the argument
59:46 - that's passed in so i'm going to do some
59:48 - wild cards here
59:50 - and to pass into the argument here's to
59:53 - args
59:54 - and the name of the argument so we named
59:56 - it search in our graphql schema so
59:59 - we can use that
60:01 - and just add another percent here so it
60:04 - does a wild card search
60:08 - and
60:09 - just make sure to get it
60:12 - and this should be a search now
60:17 - so let's try it
60:19 - refresh
60:20 - and i'm going to do
60:25 - um
60:28 - some complex query which is actually a
60:30 - search
60:32 - search by
60:36 - gary i have two books in there by gary
60:38 - vee
60:41 - and let's grab the title
60:43 - and
60:44 - obviously the author is the same so
60:48 - title
60:50 - and author
60:53 - and let's try
60:54 - that
60:56 - app book not found
60:59 - slash app slash book
61:01 - refresh
61:03 - try again
61:04 - there we go so there's that
61:07 - custom
61:08 - some complex query which is actually
61:09 - just a search
61:11 - but we're using custom resolvers
61:14 - okay so now let's do some mutations uh
61:17 - we obviously want to be able to create
61:20 - update and delete our models
61:23 - so let's do that
61:26 - so back to our schema
61:29 - right
61:32 - here so there's already an example
61:36 - for creating updating and deleting users
61:38 - and we can make use of this for our
61:40 - models
61:42 - so let's start with
61:43 - creating i'm going to copy this
61:46 - and let's start with categories
61:51 - so let's rename this to create category
61:56 - and we only need a name for category so
61:59 - here is this
62:00 - so it's going to be a string
62:02 - it's going to be required
62:04 - and i also want it to be unique
62:08 - so let's say unique when you choose
62:10 - variables rule rules
62:12 - unique on categories table
62:15 - and unique on the name column
62:19 - so that should do the trick
62:22 - make sure to change this
62:25 - we can take the small note
62:27 - it should be create it should be
62:28 - category
62:34 - and let's do the same for update and
62:36 - delete
62:39 - and then we can test it out after
62:42 - split space here
62:44 - so update category
62:49 - so it's required
62:51 - the id is required and it's just a name
62:57 - and it is the same rules as this
63:05 - and we don't need this
63:08 - this is a category
63:12 - and the same for delete
63:17 - required category
63:20 - delete don't need the model
63:24 - okay so let's start let's try creating
63:26 - one updating one and then deleting one
63:29 - and then we'll do the same for books
63:31 - actually it's the same process for books
63:32 - it's just more fields i'll do that
63:34 - behind the scenes and then i'll show it
63:37 - to you guys working
63:38 - so let's try
63:42 - let me just put it here in the middle so
63:44 - it's easier to see
63:49 - so it is let me just delete this it's a
63:52 - mutation
63:55 - we're going to do create category
63:58 - let me refresh
64:00 - create category
64:03 - and
64:04 - create a name
64:06 - say new category
64:10 - and then we just want
64:12 - the id
64:15 - and
64:16 - just to say the name
64:18 - okay so that created a new one called
64:20 - new category
64:22 - so if we check the database
64:25 - there it is right there
64:27 - cool
64:28 - and what's next update category
64:31 - so let's change that
64:33 - to update
64:36 - and the parameter is the id so it's
64:39 - seven i think it's the id
64:41 - yep seven so let's say seven
64:47 - and we also need
64:50 - the name we wanna change it to
64:54 - so new category
64:57 - update
65:00 - and
65:01 - let's change see if that works
65:03 - and it did let's check the database
65:05 - there we go cool
65:08 - and let's delete the category
65:12 - so delete
65:19 - it just needs the id i think
65:23 - cool
65:25 - and we can return that
65:30 - so
65:31 - if you read the error message it says
65:32 - the id should be
65:34 - non-null so the idea should be none no
65:38 - cool
65:40 - let's try it again refresh
65:42 - try again
65:43 - there we go seven should be gone now
65:46 - there we go awesome
65:48 - so yeah i'm gonna do the books behind
65:51 - the scenes it's basically the same
65:52 - things just more fields
65:54 - and then i'll show it to you guys when
65:57 - i'm done
65:59 - okay so i added mutations for creating
66:02 - updating and deleting books
66:04 - so let me just show you that it works
66:08 - so
66:09 - [Music]
66:10 - let's try this one first create book
66:13 - a new book
66:15 - and i'm just hard coding the category in
66:17 - here
66:18 - and returning the id and title
66:21 - okay so that's id26
66:23 - see if that is in the database
66:26 - so there it is right there cool
66:30 - so let's update it
66:33 - so the next one is update
66:36 - so let's change it to 26.
66:40 - a new book changed some author changed
66:44 - okay
66:46 - let's run that
66:48 - okay
66:49 - check the database
66:51 - there you go cool
66:54 - and let's delete the book
66:57 - so mutation delete book
67:01 - 26
67:05 - and that should delete it
67:10 - and it's gone cool
67:13 - so yeah i think that's all the
67:15 - operations we need on the back end
67:18 - um we might tweak things while we work
67:20 - on the front end and realize we missed
67:22 - something but i think that is all
67:25 - we have all the crud operations for both
67:27 - our models
67:29 - and we tested both and everything looks
67:31 - like it's working
67:36 - i like to start the front end of our
67:38 - graphql app using view and view apollo
67:42 - in the last video we built out our
67:43 - graphql backend in laravel and in this
67:46 - video i'd like to start on the front end
67:50 - okay so let's go ahead and make a new
67:52 - view app using the view cli so i'm going
67:55 - to do view create
67:57 - books ql
67:59 - view
68:01 - and let me make sure to add view router
68:04 - because we're going to be making use of
68:06 - that we need a router and let me just
68:08 - add view x we probably won't need ux but
68:10 - let me just add it anyways
68:20 - okay so that's done let me go into it
68:25 - and it's
68:26 - npm run
68:27 - serve
68:34 - okay so here it is
68:35 - i'll style everything later on in
68:37 - another video using tailwind css
68:40 - for now i just want to dump everything
68:42 - on the page
68:43 - and get everything wired up and working
68:45 - with our back end so it's going to look
68:47 - ugly for this video and then we'll make
68:49 - it look pretty in the next video okay so
68:52 - let me show you what i have in mind as
68:55 - to how we're going to approach this
68:57 - first i want to dump all the categories
69:00 - on the page
69:02 - so we'll make use of that categories
69:05 - i mean the categories query in our
69:07 - graphql
69:08 - and then i want to dump out all the
69:10 - books
69:11 - just all the books for now
69:13 - and then we can focus on getting
69:16 - just the books in a specific category
69:19 - and then we'll get routing working where
69:21 - we click on one of the books and it goes
69:22 - to this page
69:25 - and then after that i want to get
69:28 - the
69:29 - mutations working so editing deleting
69:31 - and adding a book is here and i think
69:34 - i'll add a new route for that too
69:38 - so yeah a lot of work to be done let's
69:40 - see if we can fit it in one video it's
69:41 - going to be really long but if i can get
69:43 - it within like an hour or so i'll leave
69:46 - it at one video
69:49 - okay so
69:51 - i need to add laravel cores first
69:54 - on the back end i did that in the first
69:57 - video so let me just quickly do it here
70:01 - um
70:03 - so yeah if i was running both on
70:05 - localhost then it shouldn't i shouldn't
70:07 - need to do this but since i'm using
70:09 - laravel valet and i'm running on
70:11 - a test domain
70:14 - then we need cores so let me just
70:16 - install this
70:18 - real quick
70:20 - and i need to install it on the
70:22 - booksql laravel site
70:29 - okay
70:30 - and let me just grab this and put it in
70:33 - the lighthouse config
70:35 - so i think i have it running here in the
70:37 - background
70:39 - there it is
70:40 - so i think it's lighthouse config
70:43 - should be
70:46 - right here so middleware
70:48 - we'll just put
70:50 - that in here
70:52 - and we should be good to go
70:55 - okay so
70:57 - back to our
70:59 - yeah so i just want to dump the
71:00 - categories so let's go to our front end
71:05 - and i'm going to put it in
71:08 - it's going to dump everything in this
71:10 - home
71:11 - view
71:12 - and maybe in another video we'll
71:15 - refactor our code into nice reusable
71:17 - components
71:19 - so let me just get rid of these two
71:23 - and get rid of this
71:27 - and this
71:29 - okay
71:31 - so
71:32 - let me go into the docs we have to
71:34 - install it
71:35 - i should do this after i installed the
71:37 - view app so just to view add apollo
71:41 - and that should do it
71:46 - okay that's done let me just add the
71:47 - endpoint in our view apollo.js right
71:50 - here
71:52 - it's going to be
71:55 - booksql
71:57 - laravel dot slash graphql
72:01 - okay
72:02 - and let's go ahead and finally
72:05 - dump the categories
72:08 - so
72:09 - if we go to queries we can
72:13 - import this gql
72:15 - thing we need to perform queries
72:18 - in our front end so let's do that
72:21 - so i'm going to import gql here
72:25 - and then
72:27 - make a query in here
72:30 - so i'll put it right here
72:34 - cool
72:37 - and the query we need is just grab all
72:40 - categories so let me go into graphql
72:42 - playground
72:43 - and do it in here first
72:46 - so that would be
72:48 - um
72:49 - let's get rid of this
72:53 - categories
72:57 - and we're gonna want
73:02 - the id and the name
73:08 - okay so that is the query we need so
73:10 - let's go back into our code
73:13 - and let's do
73:16 - just categories id name so
73:20 - categories
73:22 - id name
73:25 - and let's make a data state property
73:28 - called
73:30 - categories
73:32 - uh i'm not sure if i
73:34 - actually need one or if i can just
73:38 - put it in the apollo property like that
73:40 - we'll just make one
73:41 - we're actually not going to do it this
73:42 - way i'm going to show you how to do it
73:44 - using components in a second
73:46 - but just as a starting point
73:49 - so categories
73:51 - and let's make it an empty array
73:55 - okay
73:57 - oops should be returned
74:03 - return object
74:06 - okay
74:09 - so let's see if this works
74:13 - back to our
74:16 - app here let's see
74:20 - and it looks like i'm still getting
74:21 - coors errors
74:24 - okay oh okay it's gone now
74:27 - so that should work now let's see
74:29 - let's go into the
74:31 - home component
74:34 - and
74:35 - there are the categories cool so it does
74:37 - work
74:39 - awesome
74:40 - okay so
74:42 - like i said
74:44 - i want to
74:46 - make use of
74:50 - components so apollo components apollo
74:53 - query
74:54 - uh you can still do it this way if you
74:55 - would like
74:56 - but doing it this way
74:59 - just allows you to clean up some of your
75:01 - javascript and
75:03 - in some in this instances you don't even
75:05 - need the javascript and you just
75:08 - use this apollo query which uses a scope
75:11 - slot
75:12 - to grab all the information you need
75:14 - so yeah let me just grab this
75:19 - and let me show you what i mean
75:22 - so i'm going to paste this in
75:24 - up here
75:28 - and here you would
75:30 - you're going to separate your
75:33 - actual graphql query
75:35 - into a file and that is
75:38 - a good way to keep your code more
75:40 - organized in my opinion so i'm going to
75:42 - make a new folder here
75:44 - called
75:46 - graphql
75:49 - and i'm going to make two new folders
75:51 - one for queries
75:54 - and one for mutations
76:02 - and for this one specifically
76:04 - i'm gonna have one called
76:10 - this is categories so categories
76:14 - dot gql
76:17 - and all this is gonna have is our query
76:19 - here so let me just grab this
76:21 - paste this in here
76:24 - and save that and let's continue working
76:26 - on this so this would be graphql slash
76:28 - queries
76:30 - slash categories graphql
76:34 - and like i said this is using scope
76:36 - slots and if you're not familiar with
76:38 - scope plots don't worry
76:40 - too much about it
76:42 - this just grabs the data and it
76:44 - destructures it here
76:47 - which allows us to use it in our
76:48 - template
76:50 - so let's erase these comments
76:54 - and
76:55 - there's a conditional here and it just
76:57 - shows loading you can put a spinner in
76:58 - there if you like
77:00 - if it's not loaded yet but if it is we
77:02 - can iterate through them and display
77:05 - them so let's do that
77:07 - so we are using a category
77:10 - and we're going to get it from data dot
77:12 - categories
77:16 - and then we can just
77:19 - output
77:21 - the id
77:23 - and
77:24 - the name
77:27 - and it's also put a key in here
77:30 - and make a category.id
77:34 - and
77:35 - that should work hopefully let's see if
77:37 - it works
77:43 - so yeah when i was doing this i got this
77:44 - error and it took me quite a while to
77:47 - figure out how to fix it
77:49 - and hopefully
77:50 - what i did before i fixed it again and
77:52 - the answer to that is just to delete
77:54 - your node modules
77:55 - and try again
77:57 - i mean delete your node modules and npm
77:59 - install again so i'm going to do that
78:02 - so let's go ahead and do that
78:05 - let me just stop this and do it in here
78:07 - so
78:09 - node modules should be in there so let's
78:10 - do rm rf node
78:13 - modules
78:13 - [Music]
78:20 - and let me npm install again
78:25 - okay so it's done let me try running it
78:28 - again and let's see if it works this
78:29 - time
78:32 - okay so it looks like it did work
78:34 - there's some warnings there but let's
78:36 - see if it worked
78:42 - and there you go it did work it showed
78:44 - it
78:45 - and
78:46 - it's displaying it correctly
78:49 - so these warnings can get quite annoying
78:52 - as you write more queries
78:54 - so
78:56 - there's a package that allows you to
78:59 - have autocomplete for graphql in here
79:01 - which is really nice
79:02 - but i actually haven't had
79:04 - a chance to look at that so what i'm
79:06 - going to do is just add a
79:09 - eslint
79:11 - ignore file
79:15 - and i'm just going to add star star
79:17 - slash
79:18 - star dot gql
79:21 - to it
79:23 - and
79:25 - hopefully that removes the warnings
79:29 - so let's try again
79:37 - okay so it looks like it did cool
79:39 - so back to our code if you look here
79:43 - there should be
79:44 - a brief period where there should be a
79:46 - loading state and it's getting it from
79:48 - here and it's displaying loading when
79:51 - it's loading but if you look closely if
79:53 - i refresh
79:54 - there is no loading here
79:58 - so you see nothing there
80:00 - so i'm not sure if that's a bug but the
80:02 - way i fixed it was to use another
80:04 - property here
80:06 - called is loading
80:08 - and use that instead and if we do that
80:11 - that works so if we save that
80:16 - and if we refresh
80:18 - there you see the loading
80:20 - indicator
80:22 - before the data is load from the back
80:24 - end
80:26 - okay
80:27 - let me just make this a bit bigger for
80:28 - you guys
80:30 - okay so these should actually be links
80:33 - so let's change that
80:35 - so i'm not going to use a ul anymore
80:39 - i'm just going to use a div
80:44 - and for these i will use anchor tags
80:48 - and let's just make them go to nowhere
80:52 - and we add a period between the id and
80:55 - the name
80:57 - and let me just add a class here called
80:59 - link margin
81:01 - and let's put it here
81:04 - in the style
81:08 - sorry
81:10 - style
81:13 - link margin
81:15 - let's make it margin right
81:18 - well 24 pixels
81:21 - see how that looks
81:23 - doesn't seem to be auto reloading for
81:25 - some reason
81:28 - okay that's fine
81:33 - okay now let's dump all the books so
81:38 - very similar to this let's just dump all
81:40 - the books
81:42 - so i'm just going to grab this
81:45 - duplicate it
81:47 - and let's add a new query for books
81:52 - so first let's
81:54 - do it in here so it should be books
82:00 - and
82:02 - when we have id
82:04 - title
82:06 - author
82:08 - and image i think
82:12 - okay
82:14 - so let's grab this
82:16 - and put it into our books query
82:24 - okay
82:26 - and then
82:29 - let's
82:31 - put it in here the whole should the
82:33 - whole thing should be a link as well but
82:35 - we'll just put as a div
82:40 - and
82:41 - let me just remove this again we'll
82:42 - style this in the next video if i get
82:45 - through all this front-end stuff
82:47 - and this should be
82:48 - let's just dump the books
82:51 - book sorry this should be book
82:55 - data.books
83:00 - key is book id
83:05 - and let's just jump dump the book id
83:08 - and the book title
83:11 - just to see if it works
83:14 - and yeah does seem to work cool
83:19 - okay so now we want to be able to click
83:22 - these and have
83:24 - these books filter based on the category
83:26 - that we clicked on
83:28 - so first let's take a look at the query
83:31 - that we need for that so that would be
83:35 - a specific category
83:37 - so let me just remove all this
83:40 - so it'll be category
83:42 - and then i need to pass it an id so just
83:45 - grab the first one
83:48 - and we can get the id in the title of
83:51 - that category but what we want is
83:54 - the books for it
83:58 - sorry name of the category
84:00 - and then books
84:04 - and then we want
84:07 - id
84:08 - title
84:11 - author
84:12 - and
84:13 - image
84:16 - there we go
84:18 - okay so let's copy this
84:21 - and let's make a new query
84:24 - let's call it
84:26 - category singular
84:30 - and let's paste that in
84:33 - let me save that and back to our home
84:35 - view
84:38 - let's change what we have here to make
84:40 - use of that new one just to see if it
84:41 - works so instead of books
84:44 - let's use category and right now
84:49 - the category is just i mean the id is
84:51 - just hard-coded we obviously want to
84:53 - pass the id from here
84:57 - into the query and we'll do that in a
84:59 - second let's just see if this works
85:02 - and yeah that's not going to work
85:04 - because
85:05 - the format of the data coming back is
85:08 - different
85:09 - so let me put that back and we make
85:12 - another one here
85:13 - just underneath all of this
85:16 - uh let me comment that out for now
85:18 - let's make another one and this one
85:20 - leaves the category
85:24 - and let's look at the structure coming
85:27 - back
85:30 - so
85:31 - the structure is data.category.books
85:34 - so let's go and do that
85:37 - so book of data.
85:39 - category
85:40 - dot books
85:42 - and
85:44 - that should still work so we hard coded
85:47 - category id 1 in there
85:50 - so this is one so that's good
85:54 - so it seems to work if we change it to
85:56 - two
85:58 - here
86:00 - that should return everything in
86:01 - category two
86:04 - and that's cool
86:06 - so now let's see how we can use
86:08 - variables
86:10 - so the id is not hard coded and it's
86:12 - passed in
86:14 - so in our category graphql
86:16 - we can just accept variables like this
86:19 - so we need an id it's of type id as
86:23 - required
86:25 - and we can just accept that in here
86:31 - and now in our front end
86:33 - back to home
86:35 - we can
86:37 - accept a variables prop like this
86:40 - so variables
86:42 - equals and we can just put it in line
86:45 - here
86:47 - so
86:48 - id is
86:50 - we'll hardly close it for now and then
86:51 - we'll have a dynamic piece of state that
86:54 - keeps track of that as we click a
86:55 - category
86:56 - so let's say
86:58 - two or put it back to one actually
87:03 - and this should
87:05 - work
87:06 - and there we go back to one change that
87:08 - to two
87:10 - cool
87:12 - so yeah we need to keep track of the
87:15 - selected category
87:18 - so let's go ahead and do that
87:20 - i'm going to put a new piece of state
87:22 - here called selected category
87:26 - and let's default that to one
87:29 - that should still work
87:31 - cool
87:33 - but as we click on those links so
87:37 - these links here we want to update that
87:39 - selected category
87:41 - so where's that link right here
87:46 - so let's make a
87:48 - click handler here
87:51 - on click
87:53 - sorry it's click
87:56 - i am
87:57 - going back between react and view so
88:01 - okay so click is
88:04 - let's make a method called select
88:07 - category
88:09 - let's pass in
88:12 - the category category.id
88:21 - and down in our method let's just update
88:23 - that state
88:25 - so let's make a new section here called
88:27 - methods
88:31 - select
88:34 - category
88:36 - and that will accept a category
88:38 - and let's just do
88:40 - this dot selected category
88:42 - is the category that's passed in
88:45 - so now
88:48 - this should switch based on
88:51 - what we click
88:52 - so by default it's one
88:57 - and that doesn't seem to work let's see
88:59 - what's going on
89:02 - select category is not a function
89:07 - oops select category
89:13 - try it again
89:16 - let's refresh this
89:18 - okay
89:20 - and there we go
89:22 - it's getting a new
89:24 - passing in the variable and getting a
89:26 - new set as we click on the category cool
89:31 - okay so if you look at the design you'll
89:34 - see that we have all the categories here
89:36 - but we also have
89:38 - these two extra
89:40 - they're not categories but there's one
89:42 - for featured and one for all categories
89:45 - so these are separate queries from the
89:48 - categories so let's see how we could
89:50 - implement those
89:52 - so first i want to add those two here so
89:55 - let me just add those to the
89:58 - template
89:59 - so
90:01 - just hard code them in here
90:03 - outside of the for loop and let me just
90:06 - add a prevent
90:10 - here just so
90:11 - because if you click on this it
90:13 - it goes to the top of the page if you
90:15 - have a hash in here so let me just add
90:17 - that
90:19 - so let's do that again
90:23 - add
90:24 - link
90:26 - margin let's add one for
90:29 - all
90:30 - let's add one for
90:32 - featured
90:35 - and see how it looks
90:37 - okay
90:39 - so here we're passing in an id
90:44 - and for these ones let me describe this
90:49 - we don't need ids we need a whole whole
90:51 - new query so here's what i'm going to do
90:53 - let me add these
90:56 - for this one
90:58 - i'm going to pass in
91:00 - all
91:01 - and we'll do a check in that select
91:03 - category method
91:06 - and we'll check if it's either all
91:09 - featured
91:12 - and if it's not all are featured then
91:13 - it's just going to be an id and then we
91:15 - can just fetch it this way
91:17 - but if it's all or featured we have to
91:20 - use another
91:22 - query here
91:24 - so let me show you what i mean so let's
91:27 - go back to that method select category
91:30 - and we still have to do this we still
91:31 - want to update it
91:33 - but now we need different queries based
91:36 - on the category
91:38 - so if
91:41 - the category coming in is
91:45 - all
91:47 - then i'm going to make a new piece of
91:48 - state called query
91:51 - and we're going to hold each query in a
91:53 - variable
91:55 - so let me show you what i mean
91:56 - so let's make this new piece of state
91:58 - first called query
92:04 - and
92:05 - we will default that to
92:09 - a query called books query
92:12 - which we already have and should return
92:14 - all books
92:16 - so let me fix that in a second let me
92:18 - just finish this conditional here
92:20 - so else if
92:22 - category
92:24 - is featured
92:26 - then we need another query
92:30 - called
92:32 - let's call it books
92:34 - featured
92:36 - query and we'll add that in a second
92:39 - else
92:42 - this dot query equals category query
92:45 - which we already have but we have to set
92:47 - it to this variable
92:50 - so i hope that makes sense
92:52 - so let me just add these queries so i'm
92:54 - going to add this one because we already
92:55 - have it first
92:59 - so let me just get rid of this i don't
93:01 - need this anymore since
93:03 - we are using apollo components
93:07 - and
93:08 - what can i get rid of there yeah we
93:10 - don't need all of this
93:15 - okay
93:17 - and let me add
93:18 - we can just import the queries here
93:21 - so i'm going to import
93:23 - category
93:25 - query
93:27 - from
93:31 - graphql
93:32 - queries
93:34 - category
93:36 - query
93:38 - and i want to set that in our state
93:41 - so i can do category query
93:47 - and i can set up the category query or i
93:50 - can just leave it
93:52 - because it's the same name
93:55 - so now we can replace
93:57 - the query that we imported up here
94:00 - right here
94:02 - to just category query
94:08 - and everything should still work
94:12 - and it does not
94:16 - sorry did i name it category.query
94:18 - should be category
94:20 - dot gql
94:22 - sorry it should be gql
94:27 - okay so yeah this is not gonna work
94:29 - because i have to import this query as
94:32 - well
94:33 - so let's go ahead and do that
94:36 - this one already exists we just have to
94:39 - define a variable for it but books query
94:43 - is
94:45 - it's called books
94:46 - and that just returns all books
94:50 - and we can add that here as well
94:56 - and we might as well import
94:59 - this one up here that we're using
95:00 - already categories query
95:03 - and we'll use that
95:04 - we'll just use that instead
95:06 - so we'll call it
95:08 - categories query
95:13 - let's import that
95:15 - so right here
95:18 - categories query
95:23 - and let's use that just put underneath
95:25 - here
95:29 - and we need one more
95:33 - for the featured
95:36 - query so if you click featured we want
95:38 - to filter by that so i'm going to make
95:40 - it here
95:41 - books featured query
95:45 - books
95:46 - featured
95:48 - and let's add that here books
95:52 - featured
95:53 - query
95:56 - so yeah let's take a look at that
96:00 - sorry i had to restart my computer i was
96:02 - being really slow so i lost everything
96:04 - here so let's just
96:06 - test out that books by featured so books
96:09 - by featured
96:10 - i think it takes
96:12 - a featured
96:14 - let's say to true
96:17 - and this will just return all the books
96:19 - so id
96:20 - title
96:22 - author
96:23 - image
96:24 - okay
96:25 - so let's grab this
96:28 - let's
96:29 - add a new query
96:34 - books featured
96:36 - gql let's paste that in
96:39 - and let's add in the variables while
96:41 - we're here so it should be
96:44 - featured
96:46 - boolean required
96:48 - and featured is featured
96:51 - okay
96:53 - save that
96:55 - save this i think
97:00 - okay this is not going to work yet
97:03 - it should
97:04 - run but it's not going to work
97:07 - okay
97:10 - so wait i think these ones
97:12 - okay so right now it is
97:15 - will this work okay so this one doesn't
97:18 - work
97:19 - because
97:21 - in our template
97:23 - we only have
97:25 - one apollo query and the structure of
97:28 - the graphql coming back from the back
97:30 - end is different for each
97:32 - case we have here
97:35 - so we're going to need a conditional in
97:37 - the template here to check if it's
97:39 - either all
97:41 - featured
97:42 - or
97:45 - the default case or the else case is
97:46 - going to be a category so
97:50 - what is it right now
97:54 - where's the data
97:57 - so right now it's defaulting to
97:59 - the selected category of one which is
98:01 - what you see when you reload the page
98:05 - so i want it to default to all to show
98:07 - all the books so let's do that
98:09 - let's change this to all
98:12 - and then we're gonna have to change the
98:13 - structure of our apollo query
98:16 - actually i think i have it up here yeah
98:18 - i do have it up here
98:19 - so let me just use this and then we'll
98:21 - add a conditional around this probably
98:23 - not the cleanest way but
98:26 - again
98:27 - this is just a first
98:28 - pass so this is going to be
98:32 - what is this books query
98:35 - sorry no this is going to be query
98:37 - because this gets updated
98:40 - as we click on it
98:44 - as we click on these links up here
98:49 - and we're changing it down here yeah
98:52 - okay
98:53 - and the default is this books query
98:58 - okay so now we have to add the
98:59 - conditionals
99:01 - so let me add a div here
99:03 - do the
99:04 - if
99:07 - selected category
99:10 - is all
99:15 - then we can just do this
99:19 - let me just indent that
99:24 - and then we can do a
99:28 - so this case would be
99:31 - uh this should this is going to be the
99:32 - else case and i'll have an else
99:35 - else if case as well
99:37 - for the feature
99:39 - let me just handle this one
99:43 - so this will be the
99:45 - v else
99:51 - and
99:53 - yeah this should work
99:54 - but
99:55 - the uh
99:57 - feature this one should not work but all
99:59 - and the categories should work
100:02 - okay so right now it's showing all of
100:04 - them cool
100:06 - if i click on one of these it should
100:07 - work as well
100:08 - and it does cool
100:11 - two three awesome okay
100:13 - so this one's not gonna work
100:15 - let's just add that case in
100:20 - so we need
100:21 - grab this
100:24 - it's going to be else if
100:27 - category is featured
100:30 - and this is fine
100:32 - all right like i said there's a lot of
100:33 - repeated code here but
100:36 - i'm okay with this for now
100:40 - so for this it's going to be book of
100:42 - data dot
100:44 - if you look at the query it's books by
100:47 - featured
100:50 - by featured
100:54 - and this remains the same
100:56 - and i think this should work now
101:02 - oh you get all them featured i think i
101:05 - have some features in there
101:09 - books by featured of undefined
101:14 - oh yes i need variables for this
101:18 - so in this case we can just hardcode
101:20 - true
101:21 - because
101:23 - we don't want the case for its when it's
101:25 - false
101:27 - featured
101:28 - true
101:31 - let's try it again
101:36 - so all
101:37 - there we go so these are the featured
101:38 - ones
101:41 - and
101:43 - these are the
101:46 - categories so i get an error here but
101:48 - still seems to work i'm not sure what
101:50 - that error is but
101:52 - yeah this seems to work cool
101:58 - okay so next i want to work on routing
102:00 - here
102:01 - so i want to click on
102:04 - one of these books and then i want to go
102:06 - to this
102:08 - dedicated book page so let's go ahead
102:10 - and do that
102:12 - so let me make a new view called let's
102:14 - call it book
102:19 - and let's just
102:22 - just copy this
102:25 - and just call it this is a
102:30 - book page
102:32 - okay
102:34 - and let's set up the route for that so
102:36 - if we go into router js
102:40 - right here
102:42 - let's make a new one we'll just
102:44 - duplicate this
102:46 - and we'll call it
102:49 - books
102:51 - and then the wild card is going to be
102:53 - id
102:55 - and we'll call it book
102:59 - and book.view
103:02 - okay so that should work
103:06 - so
103:09 - book slash one
103:12 - okay
103:15 - so let's
103:18 - make a link here for these books
103:22 - um let's do that
103:26 - so back to our home view
103:29 - let's just
103:31 - add a link here
103:35 - so now it has to be a link so change
103:37 - this to
103:38 - that
103:40 - actually not a anchor
103:42 - we're going to use a router link
103:46 - and it's going to go to
103:49 - these template strings here
103:51 - slash books
103:53 - slash
103:57 - book dot id
104:01 - and
104:03 - we have to do this for
104:07 - all of these cases here
104:10 - so let me just
104:12 - do it like this
104:15 - didn't close it properly
104:17 - router link
104:18 - and the same for this case
104:25 - router link
104:28 - okay let's see if that works
104:35 - it does
104:38 - so
104:40 - let me just wrap these in divs so
104:42 - they're block level elements
104:44 - and so they're on their own line
104:48 - same with this
104:52 - and this one too
105:00 - and that did nothing
105:04 - oh sorry i meant to wrap this
105:06 - within a div
105:09 - is that what i meant to do
105:11 - i think so let's try
105:15 - um
105:17 - so yeah let's try wrapping this in a div
105:24 - okay there we go
105:27 - okay so no i didn't mean to do that i
105:30 - just meant to leave this as a div and
105:32 - have the router link
105:33 - here
105:34 - so let me just undo these changes
105:37 - back up
105:39 - okay so that should be back
105:42 - to where it was before
105:45 - and yeah i want the router link around
105:47 - here
105:50 - so it's going to be a router
105:52 - link
105:54 - let me just put this at the end
105:59 - and it's going to be
106:01 - i should just copy it
106:03 - two equals
106:06 - slash books slash
106:09 - book id
106:13 - okay so yeah that's what i want
106:17 - so let's just make sure that works
106:25 - cool
106:26 - effects like it okay it goes there
106:29 - and let me just make sure i put this on
106:31 - these ones as well
106:38 - okay
106:41 - so now that we're here we might as well
106:43 - add the image
106:45 - and the author name in here
106:48 - so i'm going to do that in here so let
106:50 - me add
106:52 - the author first
106:55 - uh book author
107:00 - okay
107:01 - and let's add the image
107:04 - so image
107:06 - let's do that a bit so this would be
107:08 - cover image
107:11 - and let's find this
107:15 - and i'm going to use a template string
107:16 - here
107:19 - and in the back end if you remember let
107:21 - me show you the database
107:24 - we have the image
107:25 - just the name of the file
107:28 - and what i should have done is just have
107:30 - the full path in here so we can just
107:32 - grab it from the back end and just spit
107:33 - it out on the front end
107:35 - so i'll probably make that change
107:38 - behind the scenes but for now
107:41 - i'm just gonna hard code the actual url
107:44 - here
107:45 - so it's books ql
107:51 - image
107:53 - slash
107:55 - and then
107:57 - book.image
108:00 - so yeah again you should store the full
108:02 - path on the back end but i'm not going
108:04 - to do that here i just want to say it
108:06 - working
108:07 - okay so there it is and there's the rest
108:09 - of them
108:10 - cool
108:13 - okay so i am going to
108:18 - copy this
108:19 - and do the same for these two
108:26 - okay
108:29 - so now there should be images for all of
108:32 - these
108:34 - okay featured
108:38 - marketing
108:40 - cool and all the categories awesome
108:50 - cool okay
108:53 - okay now
108:54 - i would need the book information as i
108:56 - click on this and here we want to make
108:59 - another request to the back end to grab
109:02 - the book information here and we have
109:03 - the id in the url here
109:07 - so let's go back to our book
109:09 - component
109:12 - and to get the id all you have to do is
109:14 - this
109:16 - uh route
109:18 - params id i think this is a dollar sign
109:23 - so let's see
109:24 - okay there you go
109:26 - and if i change this
109:29 - cool
109:32 - so yeah all we have to do is
109:35 - just grab an apollo query here similar
109:37 - to this
109:39 - and just display the book information
109:43 - so i'm going back here let me remove
109:46 - this
109:49 - let me just indent
109:52 - okay so query is going to be
109:55 - let's just go back to the require syntax
109:58 - and it's going to be
110:00 - graphql
110:02 - queries
110:04 - book dot gql
110:06 - so i don't have that defined yet but
110:08 - that's the one that just gets one book
110:12 - and that goes here like that
110:14 - and we also need variables
110:16 - and the variable is just going to be
110:19 - the route param
110:22 - so it's going to be
110:26 - id is route.params.id
110:33 - and let's take a look at the playground
110:35 - to see how to structure that query
110:38 - so we just need a book
110:42 - that's going to be
110:44 - book
110:46 - pressing the id
110:48 - start code 1
110:50 - and id title
110:53 - author
110:54 - and
110:55 - we probably need all the information
110:57 - here since we're on the book detail page
111:01 - but we'll just return what we need here
111:03 - book author
111:04 - image
111:08 - what else do we have here anyways let me
111:09 - check the database
111:12 - so yeah let's just return everything
111:13 - here image description link
111:17 - featured
111:21 - description
111:23 - link
111:24 - featured
111:26 - and we want the category
111:32 - we're going to need this later on so
111:35 - there's a category
111:38 - yeah it's category
111:40 - and we need let's grab the id and the
111:42 - title
111:44 - okay
111:47 - sorry this is name
111:50 - cool so yeah let's just grab this
111:53 - and let's make a new
111:57 - query for just book
112:04 - let's paste that in
112:07 - and let's add the variables or the
112:09 - parameters that we need so
112:12 - id is type id
112:15 - required
112:16 - and here instead of hard coding it
112:19 - will put in the id oops
112:22 - id
112:24 - okay so that looks good
112:27 - and down here
112:30 - so
112:30 - [Music]
112:33 - we no longer need a v4 since it's just
112:36 - one piece of information coming back so
112:38 - it's just going to be
112:41 - let's see is it data yes it's gonna be
112:44 - data
112:45 - dot book dot whatever so data.book.title
112:53 - and
112:54 - data.book.author and you can put in the
112:56 - rest of the stuff we'll add this when we
112:58 - style it
113:00 - but let's put the image in here as well
113:05 - so image
113:06 - source is again i'm gonna hard code
113:12 - the url but you should store this on the
113:14 - back end as a full path
113:17 - booksql variable
113:19 - test
113:20 - image
113:22 - slash
113:24 - data.book
113:28 - okay
113:30 - book cover
113:35 - close this out
113:38 - and let's see if this
113:41 - works
113:45 - so it does work awesome
113:50 - yeah so it works for all of our books
113:52 - here
113:54 - and let's go back to the home page and
113:56 - see if clicking it works
114:02 - awesome
114:05 - so yeah
114:06 - i thought i could fit all of this into
114:08 - an hour but this is already pretty long
114:10 - so i'm going to stop it here
114:12 - so we have all our
114:14 - queries done which takes care of reading
114:17 - the data but we still have to work on
114:19 - the mutations
114:21 - so if you look at our design
114:23 - we can edit and delete a book from here
114:25 - and we can also
114:27 - add a book from here
114:30 - and
114:31 - there's also crowd operations for
114:33 - categories but we'll just be focusing on
114:36 - the books here
114:41 - i like to continue working on the front
114:43 - end of our graphql application and more
114:45 - specifically i like to work on mutations
114:49 - so in the last video we got most of our
114:52 - queries working
114:53 - so we have
114:56 - the ability to display all books
114:58 - featured books
115:00 - and books in certain categories here
115:02 - and we also have a routing so it goes to
115:04 - a specific book and shows the details of
115:07 - that
115:08 - and now i'd like to work on
115:10 - mutations
115:12 - so if you look at our design
115:15 - you'll see that there are links here for
115:17 - editing and deleting this specific book
115:20 - and there's also a link here for
115:23 - adding a book so let's start with adding
115:25 - a book and then we'll work on creating
115:28 - and deleting i mean updating and
115:30 - deleting after
115:32 - so back into our home view
115:35 - let's go all the way up here and let's
115:37 - just put a link here
115:40 - let's make it a router link
115:43 - and we are going to make it go to
115:48 - books
115:49 - create
115:51 - books that's great
115:52 - so let me just put that in the router
115:56 - so i am going to
115:58 - duplicate this one
116:02 - and i'm going to put it up here so it
116:03 - takes precedence over this one
116:05 - so books
116:07 - create
116:08 - our let me name it books
116:11 - add
116:13 - that kind of sounds better because
116:15 - you're not creating a book you're adding
116:17 - a book
116:19 - so
116:21 - let's name it add
116:23 - book
116:26 - and let's name it add book view
116:31 - okay let's make a new component here
116:36 - for adding a book
116:38 - view
116:42 - and let's just put something in here
116:46 - form for adding a new book
116:49 - goes here
116:51 - okay
116:53 - and let's see if this works
117:00 - and i don't think i have my
117:02 - app running i do have it running
117:05 - so where is it
117:10 - oh i forgot to put something in here
117:13 - add a book
117:16 - so there it is
117:17 - okay
117:20 - did i change this i think i forgot to
117:22 - change it
117:26 - books ad
117:29 - sorry books ad
117:36 - so let's try that again so there we go
117:38 - okay
117:41 - so i'm just gonna paste in a very
117:43 - generic form here
117:45 - for adding a book and all the fields of
117:47 - a book
117:48 - just so you don't have to watch me add
117:50 - the form fields because
117:52 - that's going to add a lot of time so let
117:54 - me just do that
117:56 - a few moments later
117:58 - okay so here's what i added it's just a
118:01 - basic form and there's nothing view
118:03 - specific here yet
118:05 - and there's some basic styles in here so
118:06 - it doesn't
118:08 - look too ugly it still looks very ugly
118:10 - but
118:12 - there we go and these categories are
118:14 - hard-coded as well
118:16 - okay so let's start making this dynamic
118:20 - okay so the first thing i want to do is
118:21 - populate these with the correct
118:23 - categories
118:25 - so let's go ahead and
118:27 - grab some code from here
118:29 - so the one with the categories let's
118:31 - grab so let's grab this apollo query
118:35 - and let's
118:37 - go back to add book
118:40 - let's paste it
118:45 - right
118:46 - underneath here
118:49 - so underneath this form group
118:53 - and let's
118:55 - remove this
119:00 - and let's just list the categories here
119:02 - so let's put it as a div
119:04 - take off this href
119:08 - and let's get to the correct query so we
119:10 - already have this it's uh
119:14 - this is required in
119:17 - and add slash
119:19 - graphql
119:20 - slash queries
119:22 - slash categories
119:27 - jql
119:31 - and let's remove this click handler and
119:34 - the class
119:38 - and if i did this correctly this should
119:41 - show the categories in our book view and
119:44 - it does cool so we want this but we want
119:47 - it in the
119:49 - drop down
119:51 - so let's just replace
119:54 - this div with a select because that's
119:57 - what we want
119:59 - we just want to copy this
120:02 - and each one of these is going to be
120:06 - each one of these and the v4 so we'll
120:09 - change the
120:10 - option
120:12 - and we will
120:14 - add a value here
120:17 - the value is category.id
120:21 - and in here
120:22 - it's just going to display the category
120:24 - name
120:25 - so this should work now let me
120:31 - comment this out or just remove it
120:34 - i'm gonna take this
120:36 - move it in there
120:38 - and this should now populate
120:43 - the categories and it does cool
120:47 - okay cool
120:50 - okay so now i would like to add a v
120:53 - model to all of these fields
120:55 - and just hold them as state in this
120:57 - component because we eventually have to
120:59 - submit this to a back end
121:02 - so let's go ahead and do that
121:04 - so let's start with
121:09 - this the model equals title
121:14 - and i'm going to do the same for all of
121:16 - the fields
121:19 - this one is author
121:23 - this one is
121:26 - image
121:27 - and obviously this is going to be
121:29 - some sort of image picker component
121:32 - or like a file uploader but
121:35 - that's out of the scope of this
121:37 - tutorial
121:38 - uh description
121:42 - v model
121:44 - description
121:48 - link
121:54 - link
121:57 - featured
122:00 - featured
122:02 - and for the select we can put a
122:06 - category here
122:09 - and now let's make some state
122:14 - script
122:17 - data
122:18 - turn
122:21 - so let's just put everything we
122:23 - just defined so title
122:26 - author
122:30 - image description
122:37 - link
122:39 - featured will be false by default
122:42 - and the default category is just one
122:47 - okay let's see if this works
122:52 - okay so we're not going to see any
122:53 - changes here but if we open dev tools
122:55 - let's see if
122:58 - this reacts to changes
123:00 - let's go into our
123:02 - component
123:04 - and
123:06 - change
123:07 - does this change it does cool author
123:10 - image
123:12 - description
123:14 - link
123:15 - featured
123:17 - works
123:18 - this
123:20 - works awesome
123:22 - okay now let's work on
123:24 - that create a book
123:26 - mutation
123:28 - so let me go into graphql playground
123:30 - first
123:31 - and let's
123:36 - try it out here
123:38 - so it's gonna be mutation
123:42 - i think i have one called createbook
123:45 - and this takes in
123:48 - the id
123:50 - oh no no id
123:52 - just uh whatever parameters you need to
123:54 - create the book
123:56 - title
124:01 - new book
124:05 - author
124:13 - and all the other fields
124:18 - okay so here is the mutation so let's
124:21 - try this up
124:23 - okay so that created a new one called
124:25 - new book
124:26 - let's just double check the database
124:29 - so it should be number 25
124:31 - and there it is cool and it added
124:33 - everything we specified
124:35 - in the query okay
124:38 - so we can copy this
124:41 - and let's go ahead and make a new query
124:44 - under mutations
124:46 - new mutation i mean
124:47 - let's call it
124:49 - ad book or create book
124:52 - i'll name it ad book
124:54 - but the actual mutation is called create
124:57 - book
124:59 - uh yeah just get your names right
125:03 - great
125:04 - book so let me just replace these
125:14 - so i'm gonna put a bracket here
125:18 - oops
125:19 - i want it here
125:22 - and paste that in
125:24 - and then i'm going to replace that with
125:26 - variables
125:29 - okay and now let me just replace these
125:32 - with
125:33 - the variables
125:38 - okay
125:39 - so now back to ad book
125:45 - let's make a new
125:49 - submit handler on the form
125:52 - where's the form here it is
125:55 - at submit.prevent
125:59 - let's call it
126:00 - adbook
126:02 - and let's go ahead and
126:04 - make a method
126:07 - methods
126:09 - add book
126:12 - and let's just see if this works
126:19 - okay
126:20 - add book adding book
126:24 - and let's go into the documentation and
126:26 - take a look at how to do mutations
126:31 - so let's grab this
126:36 - so this this apollo mutate
126:40 - so it's all of this
126:42 - i think it's all of this
126:45 - so it's pretty long
126:47 - and a lot of stuff we don't need so
126:50 - let's just work with this
126:53 - see if it's the right
127:00 - indentation
127:06 - so this closes
127:09 - this okay
127:14 - don't need this
127:16 - okay so we don't need any of this
127:21 - don't need that
127:27 - but we do need the variables
127:32 - and let's go ahead and just import this
127:36 - instead of using this gql thing here so
127:39 - let me
127:41 - this
127:46 - and we'll call it create ad book
127:49 - yeah it's called ad book
127:51 - and let's import that up
127:52 - here just like we did in the last video
127:56 - so
127:57 - import add book
128:00 - from
128:03 - graphql
128:05 - mutations
128:10 - add book dot gql
128:14 - okay
128:19 - oh sorry this goes outside
128:24 - and this can be
128:26 - add book
128:28 - and the variables
128:31 - so let me just grab everything in here
128:33 - see if we can just do this
128:43 - and see if we can work some magic here
128:52 - copy that
128:56 - and say this dot
128:58 - let's add
129:01 - okay
129:05 - i think that is it let's see if i did
129:08 - everything correctly
129:10 - so any errors no errors
129:13 - cool
129:14 - so if you're curious about what this web
129:16 - socket is it has to do with
129:18 - graphql subscriptions
129:20 - which is a feature of graphql and
129:23 - i haven't explored it yet in the
129:26 - lighthouse package
129:28 - but i think this is what this websocket
129:30 - error is coming from where this
129:31 - websocket air is coming from so
129:34 - just ignore it for now
129:40 - okay so let's see if this works
129:42 - so this is what happens when it's
129:44 - successful in this then callback after
129:48 - the promise resolves
129:49 - so
129:50 - we just want to
129:52 - console.log
129:54 - the book
129:55 - that is added and in our query we're
129:57 - just returning
130:00 - the id in a title
130:03 - okay so let's try this
130:10 - say great
130:11 - book
130:13 - great
130:15 - author
130:18 - and the image is going to be broken
130:22 - like i said it's just a text field so
130:24 - just make sure this image exists or
130:26 - it's going to be broken
130:29 - this is the description
130:35 - same with the link
130:36 - just make sure you add a proper link
130:38 - see if this works and let's see if
130:41 - this works so it should be two
130:45 - category id two if it works
130:48 - so it looks like it did work awesome
130:50 - so there's the data coming back it's
130:52 - just the id and the title
130:55 - and just to double check
130:58 - we can
131:00 - check the database
131:02 - and there should be a new one in here
131:04 - and there is awesome
131:06 - and two is correct for category id and
131:09 - everything else looks like it worked
131:12 - so what do we want to do
131:15 - when
131:16 - the promise resolves
131:19 - so we want to clear this information
131:21 - or in our case we just want to redirect
131:23 - back home
131:25 - so let's do that
131:29 - so let's just do this
131:32 - router
131:33 - push
131:34 - and let's just go back home
131:39 - so
131:41 - one more time
131:44 - one more
131:45 - author
131:47 - image
131:49 - i'm just gonna type gibberish
131:53 - featured
131:55 - biography so now this should redirect
131:58 - to
131:59 - the
131:59 - [Music]
132:01 - home page
132:02 - and it does see if it's down here
132:06 - and there it is
132:09 - cool
132:11 - and let's check the database
132:14 - just to make sure it should be in there
132:16 - 27.
132:17 - there it is cool
132:20 - okay so now let's work on
132:23 - editing a book
132:25 - so we go into one of them
132:28 - and then we want to be able to edit this
132:30 - book
132:30 - so we want a link in here so let's add
132:32 - that link first
132:36 - so let's go to book
132:39 - and just underneath this
132:41 - let's add two links here
132:44 - let's just say
132:47 - edit
132:48 - and delete
132:51 - and it's both give them a class of
132:55 - what i name it i think of link margin
132:56 - just to give it some
132:59 - margin on the right and see how this
133:01 - looks
133:04 - all right let's put that in a div
133:07 - let's just wrap it in a div like this
133:11 - cool
133:12 - okay so now it's on the bottom awesome
133:15 - so let's start with editing
133:17 - so let's go into our router
133:21 - and make a new one for editing so i want
133:23 - it to be box id slash
133:28 - edit books id
133:32 - slash edit
133:34 - and let's name it
133:36 - edit
133:38 - let's name it edit book
133:42 - okay
133:43 - and i'm gonna
133:45 - i'm gonna duplicate this one because
133:47 - we're gonna be reusing a lot of the
133:49 - logic here
133:51 - duplicate
133:54 - let's call it edit
133:56 - book
133:58 - and say edit book
134:01 - let's change this to edit book
134:05 - and down here
134:09 - let's change it
134:10 - to edit book actually no that was the
134:14 - method right yeah
134:20 - and let's change this one to update book
134:25 - and we will import that
134:28 - and we have to make that
134:31 - new mutation
134:35 - and changes to
134:39 - okay so let's first
134:41 - again play around in the playground
134:44 - and let's check out how this works
134:49 - so i'm gonna
134:51 - paste that in because it's very similar
134:54 - update book
134:56 - but now we need an id
134:59 - so let's update the one we just created
135:01 - or the one we created in here so 25.
135:08 - and
135:10 - let's say new book
135:12 - changed
135:14 - andre changed
135:16 - image
135:18 - changed
135:21 - changed amazon
135:24 - changed
135:26 - description and featured false category
135:30 - 2.
135:31 - and we just want to return the id and
135:33 - title see if this works
135:36 - i think it's called update book
135:38 - so it did work
135:40 - let's see if all that stuff changed in
135:42 - the database
135:45 - 25
135:46 - so you saw all of that changed
135:49 - cool
135:52 - so let me grab this
135:54 - and
135:56 - let's do the same thing
135:58 - say update book
136:02 - let's paste that in
136:04 - and let's add all the parameters in here
136:07 - so we need
136:11 - all of this stuff
136:14 - let me just do this
136:18 - okay
136:25 - and
136:26 - let's be a dollar sign here
136:32 - they are mostly strings
136:35 - so let me just do that and i will edit
136:38 - this
136:39 - id
136:40 - this is required
136:42 - this is required
136:44 - these are not required this is a boolean
136:49 - and the category isn't it
136:51 - required
136:52 - okay
136:54 - and same for this change this oops
137:00 - just add the
137:11 - variable like that
137:15 - and that should do it update
137:18 - book
137:20 - update book okay
137:23 - and let's give that a try
137:25 - so right now it is not going to populate
137:28 - it with the information that it already
137:30 - has
137:31 - um
137:32 - we'll do that
137:33 - right after
137:35 - so
137:36 - it should go to 16 slash edit we'll put
137:39 - the link here let me just put that right
137:40 - now
137:42 - so
137:43 - edit book and book
137:46 - this should be a router link
137:52 - two
137:59 - where's it slash books
138:01 - slash id slash edit
138:04 - so they should be
138:10 - book dot id
138:13 - okay
138:14 - does that work
138:25 - oh what's wrong
138:27 - data.book.id
138:33 - okay
138:35 - okay so yeah like i said this should
138:38 - show the information about the book but
138:39 - we haven't done that yet
138:41 - i just want to
138:43 - check that it does update but i think i
138:45 - forgot something here
138:47 - so in our
138:50 - update book so we have the id here but
138:54 - for editbook we don't have the id here
138:57 - as state
138:59 - actually we don't need it as state but
139:01 - we do need it when we're passing it to
139:03 - the
139:04 - mutation so let's just add that id is
139:09 - this dot route
139:11 - dot params dot id
139:16 - so let's save
139:18 - that and
139:21 - let me just
139:23 - go to
139:24 - one that i created down here
139:26 - just so i don't edit one the ones that
139:27 - has a proper image so
139:30 - this one
139:32 - edit
139:34 - okay so
139:35 - title is
139:37 - 27 since that's the id
139:41 - author
139:43 - change
139:45 - and for this stuff let me just
139:48 - do this
139:50 - let's make it asdf for all of them
139:53 - featured and
139:55 - science
139:57 - and what did i do
140:00 - after
140:00 - i just oh it's gonna go back here i
140:02 - don't want to do this
140:06 - let's just see if it works
140:10 - and seems like it did work
140:16 - there you go 27 let's check the database
140:21 - there you go so added all that i mean it
140:23 - updated all that
140:25 - and everything seems correct
140:30 - so where do i want it to go
140:32 - after we go in here
140:34 - we edit it i want to go back to the read
140:36 - page
140:38 - so
140:38 - [Music]
140:39 - instead of
140:42 - this we just wanted to go to
140:47 - slash books
140:50 - slash
140:53 - this
140:55 - route.params.id
141:00 - okay
141:02 - but yeah like i said we want this
141:04 - information to be populated as we hit
141:06 - edit so this has to be populated with
141:08 - the correct information
141:11 - so we already have a query for that and
141:13 - we already did that in
141:16 - the book view so let's do something
141:18 - similar
141:20 - so let's import
141:24 - book
141:26 - from
141:28 - let's grab this
141:33 - queries
141:35 - book dot gql
141:40 - and instead of using the apollo query
141:44 - component i'm just going to do it the
141:45 - original way where we just use that
141:47 - apollo
141:48 - field here
141:50 - because i need to do something after it
141:53 - is successful
141:55 - and i don't think there's a way to do
141:56 - that with the component so let me show
141:58 - you what i mean
142:00 - so
142:04 - if you go into the api reference there
142:06 - is the example i will show you in here
142:11 - so this result
142:13 - hook is what i want to
142:16 - make use of
142:18 - so this is this code is executed after a
142:21 - successful
142:22 - query
142:24 - and i need that because i want to update
142:27 - the state
142:28 - once we have a successful query
142:31 - so let me just grab all this and
142:34 - remove what i don't need later
142:38 - okay
142:40 - so i'm gonna put it right here
142:45 - okay so
142:53 - so let's
142:55 - make a state to hold the book
142:58 - so i'll put in here
143:00 - and it'll be null by default
143:03 - and this is what we want to populate
143:06 - book
143:09 - and the query we already have imported
143:12 - up here so we want to be booked
143:14 - so we can remove this
143:19 - and
143:20 - variables
143:22 - so we have to use it
143:24 - this way is the correct way
143:27 - if you look at the original example
143:30 - over here
143:34 - it is just
143:36 - where's variables
143:38 - variables
143:40 - yeah it's just a
143:41 - an object here
143:43 - but we have to use a method
143:46 - and
143:48 - i'll tell you why
143:50 - um
143:52 - as i write the code
143:55 - so i tried doing it this way originally
143:58 - and it didn't get the route parameters
144:00 - which we need because that's the
144:03 - variable we need so
144:05 - let me just
144:07 - show you what i mean
144:13 - this
144:14 - that route that perhaps so you have to
144:17 - wait for the route params to be
144:18 - available and this is the way to do it
144:22 - let's do that
144:29 - and the
144:30 - variable we want is the id
144:33 - and it'll be
144:35 - this that route that params.id so yeah
144:39 - like i said if you just did this
144:42 - like this
144:46 - then it wouldn't work the route param
144:48 - won't be available so you have to use
144:50 - this method
144:52 - okay so we don't need this
144:59 - but we do need
145:01 - this result
145:05 - and we don't need any of this other
145:06 - stuff
145:15 - and i don't think i need this
145:17 - okay
145:20 - so all i want to do here is just update
145:23 - this state over here
145:25 - just so this can
145:29 - this information can show here in the
145:32 - template
145:33 - so i just want to do
145:36 - this that title
145:38 - equals
145:39 - so it's going to be data.book.title
145:44 - and i want the same for the rest of the
145:46 - states this is going to be author
145:51 - this will be
145:54 - um
145:56 - image
146:00 - and category is going to be a bit
146:02 - different it's just going to be data dot
146:04 - category dot id because that's the way
146:07 - the
146:09 - data's coming back
146:11 - so if i did this correctly
146:15 - this should work hopefully
146:18 - and it does cool so as you can see the
146:21 - data is populated with the correct
146:23 - information
146:26 - so which one is this this is number
146:28 - three
146:32 - so if i were to change this in the back
146:34 - end this should update
146:36 - number three
146:38 - sapiens
146:40 - changed
146:42 - and let me just save that
146:45 - if i refresh this it should be reflected
146:47 - there
146:49 - cool
146:51 - so one more test here to see if this
146:53 - works
147:02 - i don't want to change this one because
147:03 - it's going to change the image
147:10 - it's changed let's make it not featured
147:13 - and let's make it go to biography
147:16 - update book they should go back to the
147:19 - view page it does
147:24 - and it looks like it worked
147:26 - check the database
147:29 - refresh
147:30 - there we go
147:33 - awesome
147:36 - okay now let's work on deleting and that
147:39 - should be it so i want to delete this
147:41 - and then i wanted to go back to the main
147:43 - page with this deleted
147:46 - so let's go ahead and do that
147:49 - so let's go to our book dot view
147:52 - it's right here
147:55 - and let's add a script here
147:59 - we have to import that
148:02 - delete query
148:04 - delete book mutation i mean so import
148:07 - we'll make this in a second delete book
148:10 - from
148:12 - graphql
148:14 - mutations
148:16 - delete
148:17 - book dot gql
148:20 - okay let's make that
148:23 - late
148:24 - book and let's go to graphql playground
148:28 - and check out how to delete a book
148:35 - so it's just mutation
148:38 - you need the id and that's it i think
148:42 - oh sorry
148:46 - delete book you need the id
148:50 - let's delete
148:53 - the last one here
148:54 - 27.
148:57 - and that's it we can return the id of
149:00 - the deleted thing and even the title if
149:02 - you want
149:05 - and that should be
149:06 - gone cool
149:09 - so let's grab this
149:13 - let's paste it in
149:15 - here
149:17 - should be
149:19 - an id
149:22 - required
149:23 - and then id
149:25 - is id
149:27 - okay
149:28 - back to book
149:30 - let's put a
149:32 - click handler on this
149:34 - the delete
149:35 - link
149:37 - let's do prevent so it doesn't
149:42 - scroll to the top of the page so delete
149:44 - book
149:46 - and let's
149:48 - add a methods in here
149:52 - delete
149:53 - book
149:57 - so this dot
149:59 - apollo
150:00 - dot mutate
150:06 - mutation
150:08 - delete
150:09 - book
150:12 - and variables
150:16 - we can just do it the normal way so id
150:20 - this dot route the params dot id
150:26 - and then then smooths up
150:30 - data
150:35 - just going to log it
150:37 - and let's
150:40 - go back to the home page so this router
150:44 - push
150:45 - home
150:48 - and
150:49 - that should do it
150:52 - see if this works
150:56 - okay so let's go home and it's deleted
150:58 - the last one let's refresh this
151:02 - let's go all the way here let's go to 26
151:06 - great book
151:08 - okay let's delete it
151:12 - okay that looked like it worked
151:14 - 26 should be here
151:16 - okay it's still here
151:19 - okay so it is still here
151:21 - that's because it's cached
151:23 - so if i refresh this should be gone
151:27 - so yeah
151:29 - we have to handle that case let me just
151:31 - show you the database should be gone
151:36 - um i don't really do too much research
151:40 - or i didn't think about it too much of
151:41 - how to
151:43 - solve that issue of caching we obviously
151:45 - want caching if it was like a real app
151:48 - because that would save hitting the
151:49 - database
151:51 - but for this case
151:53 - i just removed caching completely
151:57 - which is not ideal but it does work
151:59 - so
152:00 - i think it's called fetch policy
152:05 - so if i change this to
152:07 - no cache
152:09 - that is not gonna cash at all
152:12 - no cash
152:15 - so let's try it again
152:19 - let's delete
152:21 - new book changed
152:23 - delete
152:25 - and
152:28 - that should be gone
152:30 - it is gone awesome it should be out of
152:33 - the database too
152:35 - awesome
152:38 - so there you have it guys we've done a
152:40 - lot of work here on our front end and
152:42 - now have complete crud functionality for
152:45 - all of our books
152:47 - so a few things i would consider if this
152:50 - were a real app the first one would be
152:55 - so remember when we did categories here
152:59 - this is just happening in the browser
153:03 - say for example you wanted to send a
153:05 - link to someone with the specific
153:08 - category
153:09 - selected
153:11 - that wouldn't work
153:12 - so what i would consider is adding a
153:15 - route to save the state
153:18 - so that would be like categories slash
153:22 - four as we click this and then you can
153:24 - send this off to someone and that would
153:26 - preserve the state
153:28 - so that's one thing i would consider
153:30 - doing
153:32 - another thing i would consider doing is
153:34 - using nuxt for server-side rendering
153:37 - mainly just for seo if you care about
153:39 - seo
153:41 - and it also makes routing slightly
153:43 - easier
153:45 - so that's another thing i'll consider
153:46 - using next
153:49 - and yeah i think that's it for now
153:55 - i'd like to style our graphql app with
153:58 - tailwind css
154:00 - you've seen the design throughout the
154:02 - videos already so let's go ahead and get
154:04 - started
154:06 - so there's the design we'll be
154:07 - recreating and
154:09 - yeah let's get started
154:12 - so let's go to tailwind
154:14 - the docs and let's install it
154:17 - so npm install taylor and css
154:23 - okay
154:24 - next is to create
154:26 - a tailwind config
154:29 - so just do this command
154:31 - and we'll name it tailwind.js
154:35 - okay win.js
154:38 - okay
154:39 - next is to
154:40 - create a css entry point
154:43 - so let me just grab this
154:47 - and let's put it in
154:50 - let's put it in assets let's put in here
154:54 - just call it main css
154:58 - okay what's next
155:04 - next we can
155:06 - just paste this into our
155:07 - [Music]
155:08 - post css.config.js
155:12 - let's do that
155:14 - i think there's a post css config.js
155:16 - there it is
155:18 - so let me just
155:19 - do that
155:20 - okay
155:23 - all right
155:27 - and then
155:31 - that's it so let's remove our styles
155:34 - here
155:35 - the default styles i think it's an app
155:37 - view
155:38 - so there's some default style here
155:40 - so i'm going to remove all of this
155:43 - and i'm going to import our main css
155:47 - so source equals
155:49 - dot slash assets
155:52 - main css i believe
155:56 - and then let's just see if this works
155:59 - um let's just put something here
156:03 - p dot pg blue text white
156:07 - lorem 20 okay see if this works
156:14 - and i think i forgot to change
156:19 - this
156:21 - so it's not tailwind.js
156:27 - okay so there we go there is tailwind
156:30 - working and we can start
156:33 - okay so the first thing i want to do is
156:37 - change the font so the font i'm using in
156:39 - my design is
156:41 - roboto so let's import that and use it
156:46 - so i'm going to go into app
156:48 - view actually now i'm going to import it
156:51 - in here
156:54 - so i'm just going to paste in the import
156:56 - from google fonts
156:58 - and i'm using just the regular weight
157:00 - and the bold weight
157:04 - and now in our app view
157:07 - i can set the font stack here
157:10 - um
157:12 - font signs
157:14 - let's make it anti-aliased as well
157:20 - and let's make everything black
157:25 - let's make sure to
157:28 - update the font stacks
157:30 - it's right here
157:31 - so let's put rubato on top
157:37 - okay
157:38 - or i can just move this up
157:40 - that's fine
157:44 - okay now i think it's using roboto
157:46 - let's double check
157:50 - it is not
157:53 - i'm sorry this is supposed to be
157:55 - class
158:00 - okay that should work now
158:02 - okay that looks like roboto
158:05 - awesome that's roboto cool
158:09 - okay so let's start with the
158:12 - header here or the nav
158:15 - so let's do that okay
158:20 - let me just remove this
158:24 - and will you make use of this
158:28 - so i didn't have and we'll add a class
158:31 - and it's going to make it bg
158:33 - purple dark i'll just use tailwind's
158:35 - default colors
158:37 - and
158:39 - i want a container here so the whole
158:41 - thing is constrained within a container
158:44 - and tailwind does come with one but you
158:47 - have to uncomment it
158:49 - in the tailwind config
158:52 - container
158:56 - so yeah i want to center it and i do
158:57 - want some padding so let me uncomment
158:59 - that
159:02 - and let's put these within a within a
159:04 - container
159:07 - okay
159:09 - and let's see how this looks
159:12 - okay cool
159:14 - so i'm gonna want the logo here and then
159:18 - these two on the right
159:19 - so let's make it flex
159:23 - right here
159:25 - flex i want items center so they're
159:28 - vertically
159:30 - in at the center and justify between
159:34 - to send them to the left and the right
159:37 - let's add some padding
159:40 - so now the first flex item is going to
159:42 - be the logo
159:43 - so let's add a new container for that
159:47 - logo here
159:50 - it's link and i wanted to go home so
159:53 - we'll do that it's an image
159:56 - and i already have it in here
159:58 - so svg
160:00 - let's do slash
160:03 - assets slash logo.svg
160:07 - and we'll do logo here
160:10 - and then the second flex item is going
160:12 - to be these two
160:14 - so let's wrap it in a div
160:19 - and let's see how this looks
160:24 - okay looking pretty good
160:26 - let's just fix these
160:31 - so i'm gonna
160:32 - do this
160:34 - class equals
160:36 - so i want to be white
160:39 - and i want to have a hover just of a
160:43 - change of color when you hover so let's
160:45 - do text gray light when you hover over
160:46 - it and i want some padding on just this
160:49 - one
160:53 - okay
160:56 - it looks pretty good
160:58 - and i want to remove the underline first
161:00 - okay that pipe is right here
161:03 - and i want to remove the underline on
161:05 - all of the links so we'll do it in here
161:08 - so we'll just add it after this a
161:11 - text decoration
161:14 - none
161:18 - cool
161:20 - okay now let's move on to the next
161:22 - section which should be the hero
161:24 - so this
161:26 - part over here
161:28 - and it's within a container as well but
161:30 - it has a great background so we have to
161:31 - do the same thing
161:35 - so let's do that
161:37 - so i'm going to put it in home because
161:39 - it only appears in home
161:41 - so let's
161:42 - just put it up here
161:45 - let's make some roof right here okay i'm
161:48 - gonna name it hero
161:49 - i want some bg
161:52 - gray
161:54 - light and i want the margin bottom of
161:56 - 24.
161:58 - and then this is where the container
162:00 - goes
162:04 - and
162:05 - just put some stuff in here
162:08 - see how it looks
162:10 - okay looking good
162:12 - and again i want to flex
162:15 - make it a flex container and then this
162:16 - will be one item and this this will be
162:18 - the other item and i can justify content
162:20 - space between
162:21 - so let's do that
162:25 - so it's going to be flex
162:28 - item center
162:33 - justify
162:34 - between
162:36 - and let's give it some padding
162:40 - so now the two flex items should be
162:43 - the first one on the left is where the
162:46 - where this goes
162:48 - so let's say book recommendation site
162:51 - built with
162:52 - graphql
162:54 - so let's make it an h1
162:57 - book
162:58 - recommendation
163:02 - site built with graphql
163:07 - and then underneath it i'll have
163:10 - built with
163:11 - variable
163:13 - i should just paste this in
163:15 - too bad you're watching me type it
163:17 - graphql
163:20 - okay and the other flex item is going to
163:22 - be the hero image and
163:25 - i also have
163:28 - an svg for that
163:30 - and some assets
163:32 - it's called hero svg
163:35 - put the hero in here
163:38 - okay so let's see how this looks
163:44 - okay it doesn't seem to be flexing what
163:46 - i do around here
163:47 - i spelled it wrong that's why
163:50 - that's great
163:53 - okay cool
163:55 - i actually don't want item center here
163:57 - so let's move that
164:02 - okay
164:04 - so for this i don't want it to be the
164:07 - full width so i just want it to be like
164:12 - here let's add a class
164:15 - let's see if i can do width
164:16 - three-fourths or something like that
164:20 - okay that doesn't do anything
164:22 - let me add a margin here
164:25 - just push it down a bit okay cool
164:29 - so i want let's try putting the width on
164:32 - here on the h1 and also on
164:35 - this
164:36 - so class equals width three-fourths
164:41 - okay so that's better
164:44 - and let's just put a margin here after
164:46 - the h1
164:47 - say mb4
164:51 - cool
164:52 - and the line height looks a bit too
164:55 - tight here
164:56 - so let's do
165:00 - normal i think
165:04 - okay
165:06 - okay now let's add i think i have
165:08 - buttons here yeah so the view books and
165:10 - the view screencasts button
165:12 - buttons
165:13 - so let's go ahead and do that
165:16 - so it's going to be another section here
165:18 - and it's going to be flex as well
165:20 - and items center
165:26 - and let's make them anchor tags
165:29 - class equals
165:32 - bg
165:33 - purple
165:36 - dark
165:38 - text
165:39 - white
165:41 - i want to be rounded
165:43 - px4 py4
165:46 - let's get a margin right
165:49 - and i want it to be slightly different
165:51 - when you hover over it so let's do
165:54 - however it's slightly lighter
165:57 - and it's going to be called view books
166:01 - see how that looks
166:02 - okay looking pretty good
166:04 - just put a margin after the paragraph
166:07 - right
166:08 - here
166:10 - say six
166:13 - okay
166:15 - and let's do the other button
166:26 - so it's going to have a border
166:28 - border
166:29 - purple
166:31 - dark
166:32 - border solid
166:35 - let's be rounded as well
166:37 - it's gonna be purple
166:39 - dark
166:40 - px4
166:42 - py4
166:44 - and hover
166:46 - bg
166:50 - purple and hover text
166:54 - white
166:55 - this one's called
166:56 - view screencasts
167:00 - okay
167:01 - okay looking pretty good hover works
167:04 - awesome okay let's continue working on
167:08 - the next section which is the grid of
167:11 - books
167:12 - so let me just turn on my grid here
167:14 - and as you can see it's in quarters so
167:18 - one quarter here and one quarter for
167:20 - each of the books
167:22 - so let's go ahead and do that
167:24 - so i'm going to go into the tailwind
167:25 - docs and if you just search for grid
167:29 - we'll just make use of this and change
167:32 - it to our needs
167:34 - so i want something with a gap
167:36 - so
167:38 - let's look for that column spacing okay
167:40 - so this one is in thirds
167:43 - and
167:45 - yeah just make use of this
167:50 - okay so where am i
167:52 - i'm gonna put it right after the hero so
167:54 - this is the hero let me just end this
167:59 - and let's see what we get with this
168:04 - this should be thirds see if that works
168:08 - okay so it does work
168:10 - cool
168:15 - so let's wrap this in a container
168:23 - cool
168:26 - okay
168:27 - this is not aligned here
168:29 - i think i don't need
168:32 - this one
168:33 - so let's remove this
168:36 - and this one as well
168:40 - okay see how that looks
168:45 - okay so now that's lined up i think
168:48 - yeah cool
168:50 - and we want quarters
168:53 - so let's make
168:55 - one more of these and then make them
168:57 - quarters
168:58 - so one third
169:01 - should be four
169:03 - okay
169:04 - okay looking good
169:07 - and i want the gap to be a bit bigger so
169:11 - i'm going to change
169:13 - this
169:14 - these
169:16 - these twos
169:18 - i'll change these to four
169:23 - okay
169:26 - awesome
169:28 - so if you take a look at the design we
169:31 - obviously want several books and we're
169:33 - going to be looping over some sort of
169:35 - variable that has all the books
169:38 - so we wanted to wrap
169:40 - uh so let me show you what i mean
169:45 - so right now if i can just keep adding
169:47 - more of these then it's not going to
169:48 - wrap
169:50 - it's just going to stay on the same
169:52 - line here we do want it to wrap so if we
169:54 - add flex wrap it will wrap
169:58 - okay that's what we want
170:01 - let's just add a margin bottom on them
170:03 - as well
170:06 - so for these let's just put
170:11 - mb say 12 or something
170:14 - okay it looks good
170:17 - however we don't want the whole thing to
170:19 - wrap because
170:21 - this first section the first quarter is
170:23 - just the menu and then we want these to
170:26 - wrap
170:27 - so let's make some changes here
170:31 - so what i'm going to do is going to have
170:32 - the first one to be one quarter and then
170:34 - the next one to be three quarters and
170:36 - then within that
170:38 - i'll have more
170:39 - items
170:42 - let's see how that looks first
170:46 - okay that looks good and from within
170:48 - here we want these items to wrap
170:53 - so let's add
170:55 - flex to this one
170:58 - flex flex wrap
171:02 - and then these ones we want to be one
171:04 - third each so
171:07 - if class equals with one third
171:13 - let's add that px4
171:15 - and the
171:16 - mb12 so let's see how this looks
171:20 - let's just say lorem 20 or something
171:23 - let's add a few
171:26 - see if that works
171:28 - okay so that is looking like what we
171:30 - want let's add a few more see for wraps
171:35 - and it does so that is looking like the
171:37 - layout that we want cool
171:41 - okay so this first section is where we
171:43 - want
171:44 - the the navigation to be
171:48 - so let's do that
171:52 - so here's where the nav goes
171:59 - okay
172:01 - so let's go ahead and grab that
172:04 - and this is the one so let's grab this
172:06 - whole thing
172:07 - and let's just see how that looks
172:11 - right
172:12 - here
172:14 - let's reinvent that
172:18 - and let's see what we have
172:22 - okay cool let's make this an unordered
172:24 - list with some list items
172:27 - so here
172:29 - instead of a div let's make a ul
172:33 - and these are still
172:37 - anchor tags but
172:38 - they have to be list items so let's do
172:40 - that for these
172:44 - and the same for this one
172:49 - see where that gets us
172:53 - okay uh
172:56 - i didn't do the list item correctly for
172:58 - this one
173:00 - so yeah this should be a list item
173:02 - because that's the thing we're iterating
173:04 - over
173:05 - so we don't need this anymore
173:10 - but
173:11 - this should be an anchor tag now
173:18 - let's see if this works
173:21 - okay excellent
173:23 - and we also want
173:24 - the add book
173:25 - here so i think i have it down here
173:28 - yeah so let's just add this one too
173:30 - at the bottom
173:32 - so after this loop we just add this
173:38 - and let's wrap that in an li as well
173:43 - okay
173:45 - so i don't want these numbers i was just
173:47 - there so i can see the id
173:54 - okay
173:56 - and let's remove the
173:58 - bullet points
174:00 - so for the ul i can do
174:03 - class equals list reset
174:07 - and let's also make it a bit larger
174:11 - okay
174:13 - and if you look at the design
174:16 - the spacing between them is pretty
174:18 - liberal so let's add some margin
174:23 - for all of these
174:26 - here
174:27 - here
174:31 - i'm going to put it here
174:35 - oh there's already a class on that one
174:37 - let me just add that after so class
174:39 - equals amb6
174:41 - let's take this out and
174:45 - mb6
174:49 - okay cool looks good
174:52 - and let's just remove these purple links
174:55 - so we can do
174:57 - here on the
174:59 - class
175:05 - so let me just do it for these ones
175:06 - first
175:07 - so text
175:08 - black and let's also make a hover state
175:11 - hover
175:12 - text gray darkest
175:14 - so let me just crop copy this
175:18 - oh there's two there's one one
175:22 - and i have to add it to this too
175:25 - class equals this and this one too i
175:28 - think
175:31 - okay
175:33 - looking good there's the overstate very
175:35 - subtle but that's good for me
175:37 - okay looking pretty good
175:39 - okay so now let's work on the book
175:42 - images here
175:45 - so
175:46 - right here they should be in here and
175:48 - they should be looped over
175:52 - so let me just grab
175:53 - one of these from
175:55 - i'm gonna grab this one here so i'll
175:57 - take care of the different cases later
175:59 - on let me just
176:01 - try to get one working
176:03 - and displaying correctly
176:05 - so i'm gonna remove these ones
176:08 - and just work with
176:10 - just this one okay so let's
176:14 - paste this in and see what we get
176:21 - okay
176:23 - okay so it is not in the grid format
176:26 - that we want
176:31 - see what's going on here
176:34 - so we want the thing that we're
176:36 - iterating over to have these classes
176:39 - so this actually belongs in
176:42 - here
176:43 - where we're iterating over the
176:45 - books
176:47 - so let's see if that works
176:49 - okay so i made it smaller but still not
176:51 - quite what we want
176:53 - that's because
176:55 - the parent component of this
176:57 - should have the flex container so let's
177:00 - move this
177:02 - and here
177:03 - so this is the parent of this so
177:06 - i think this should work
177:10 - okay there we go
177:13 - so yeah there's a lot of nested divs
177:16 - here
177:18 - and
177:21 - yeah so
177:23 - that should be fine actually
177:28 - so let me just move the
177:30 - title and the author underneath
177:34 - so i'm going to move this underneath the
177:36 - book
177:39 - okay
177:41 - and you can see it's not a block element
177:44 - so let's just wrap this
177:46 - in a div
177:52 - okay looking better
177:58 - and
177:59 - the books images are almost
178:02 - the same size but you can see some of
178:04 - them are not
178:05 - the same height
178:07 - so we can specify a hard height on the
178:10 - image
178:12 - so
178:13 - here we can add a class on the image
178:18 - you just put h64 was what i found worked
178:21 - for me
178:23 - see how that looks
178:25 - okay so that looks pretty good now now
178:27 - everything's aligned
178:30 - okay and let's add just a small margin
178:33 - underneath it
178:35 - okay looks pretty good
178:39 - now we can work on
178:42 - the styling of the title and the author
178:48 - so
178:49 - it's just bolded and
178:53 - slightly lighter color
178:55 - okay so let's do that
178:58 - so i'm also going to move the id i don't
179:00 - want that i just want the title
179:04 - okay inside a class on this
179:09 - let's make it slightly bigger
179:11 - let's make it bold
179:15 - and is it a link color right now it is
179:17 - so let's make it black
179:22 - let's make it hover
179:24 - text gray darkest
179:29 - and let's put a select margin on it
179:35 - okay let's see if the helper works okay
179:37 - there's a subtle hover color change
179:39 - there
179:40 - and let's work on the author
179:44 - and i just want the color to be a bit
179:45 - lighter
179:48 - text gray
179:50 - darkest
179:53 - okay
179:54 - so that looks pretty good to me
180:01 - okay cool
180:02 - um
180:05 - let's also add
180:07 - the link
180:08 - right now it's just too uh
180:10 - it's all it's only on the title let's
180:12 - put it on the image as well
180:15 - so
180:16 - let's just grab this router link and we
180:18 - can just paste it
180:20 - here
180:22 - let's close that
180:25 - and i can close the router link here
180:29 - see if that works
180:31 - okay
180:32 - it does cool
180:36 - um i think this has to be
180:39 - block
180:40 - or the margin
180:43 - it doesn't apply there we go so that
180:44 - moved down slightly cool
180:48 - okay now let's work on getting this
180:50 - other stuff to work because right now we
180:52 - only have this case working
180:55 - so let's go ahead and do that
180:59 - so if you look down here we have
181:01 - vf categories all else if it's featured
181:05 - else it's just one of the categories
181:08 - and we can do the same here
181:10 - and we can just put the conditional on
181:13 - the actual apollo query
181:16 - so we can do this
181:23 - and then we can
181:26 - grab the other cases as well so i'm
181:28 - going to copy this
181:32 - let's put it in here
181:35 - and
181:36 - that case is
181:39 - what's that case
181:41 - v else if
181:44 - it's featured
181:46 - so i'll do that
181:49 - for this case let's put it in here
181:53 - and then let's do the last case here
181:59 - it's just vl so i'm just gonna grab all
182:01 - this
182:03 - and let's put a vls on this
182:09 - and see if this works
182:13 - sorry i think i put this in the wrong
182:15 - place this should be
182:16 - up here
182:19 - yeah up here sorry
182:22 - yep
182:23 - put that in there
182:25 - that should work now
182:27 - see
182:30 - okay so there we go let's see if this
182:31 - works now
182:32 - okay
182:34 - we have to
182:35 - change that but you can see that these
182:37 - are changing
182:39 - awesome
182:43 - okay so for featured you have to do the
182:44 - same thing so let's do that
182:46 - so featured is this one
182:50 - and what do we do again
182:52 - we
182:55 - added this class
182:58 - for the thing that we're iterating over
183:00 - so we're iterating over this let's add
183:03 - the class
183:04 - and then for here we added class equals
183:07 - flex
183:09 - flex
183:10 - wrap
183:11 - so let's do the same thing here
183:15 - class equals flex
183:17 - flex wrap and the thing we're iterating
183:20 - over gets that
183:23 - class see if that
183:24 - works cool
183:27 - featured okay so that's working
183:30 - and these work too
183:32 - but now these
183:35 - are in a different format as well
183:38 - so we can just do the same thing we did
183:39 - up here
183:43 - for the all category
183:46 - or we can
183:47 - just extract this to a component
183:51 - and make use of
183:52 - and reuse it down there so that's
183:54 - probably the smart thing to do
183:56 - so let me just copy this let's comment
183:59 - it out
184:00 - and let's make one called
184:02 - a new component called book
184:04 - listing
184:06 - and then we'll pass in the book
184:11 - cool
184:12 - let me close that
184:15 - and let's make that component uh we're
184:18 - making points
184:21 - book
184:22 - listing dot view
184:25 - template
184:26 - space that in
184:28 - and we're going to accept a book prop
184:33 - script
184:34 - props let's just use the array syntax
184:37 - it's going to be a book
184:39 - okay
184:41 - let's import that in here
184:44 - down here
184:45 - [Music]
184:47 - say
184:49 - import
184:52 - book listing
184:53 - from
184:57 - components
185:00 - slash book
185:01 - listing
185:03 - view
185:05 - and then we can use this
185:08 - in here
185:10 - and see if i did everything correctly
185:14 - okay so it looks like i did
185:17 - let me just refresh to
185:19 - make sure and it does work
185:21 - so we have that new book component and
185:22 - now we can just make use of that
185:25 - in the other ones
185:27 - so let me
185:29 - grab this
185:32 - and i'll just leave this in here so
185:34 - if you look at the code you'll see that
185:36 - in there
185:39 - but
185:40 - we don't need this anymore
185:42 - what is this
185:43 - so yeah we can just remove this
185:46 - and say book listing
185:49 - and same for this
185:53 - book listing
185:55 - okay let's see if that works so all
185:57 - works featured
186:00 - i don't know why that doesn't work
186:04 - why is there no image
186:08 - oh sorry i forgot to
186:11 - add the
186:12 - image into the component
186:14 - so it's here still that's why i was
186:16 - working in the first case so let me just
186:18 - grab that
186:20 - save that now the first one shouldn't
186:22 - have
186:23 - okay so now we can just add that in the
186:24 - book listing
186:26 - sorry about that that should work now
186:29 - there we go featured awesome
186:32 - awesome everything works
186:36 - and is looking pretty good now awesome
186:39 - i say awesome a lot
186:42 - okay let's quickly make it responsive
186:44 - not too much work here
186:47 - so
186:49 - the navigation is fine since there isn't
186:51 - too much
186:52 - in the nav
186:53 - i just want this to stack
186:55 - after a certain breakpoint
186:57 - so i'm going to make it
186:59 - i think 992 is the large breakpoint
187:02 - right there
187:03 - so we'll just work with that one
187:06 - okay so let's see what's going on here
187:10 - so up here
187:12 - so on mobile we want it to be
187:15 - flex direction of column so it stacks
187:19 - but on large screens we want to be flex
187:22 - row large screens we also want justify
187:25 - between
187:28 - and that should stack now i think
187:31 - and it does cool
187:33 - um
187:34 - i just want some margin on top of the
187:36 - image
187:38 - so let's do that for the image container
187:41 - so that is right here
187:45 - so on mobile i want mt
187:48 - say 12 let's say 10.
187:52 - okay
187:53 - that's fine
187:54 - and then large
187:55 - empty zero
187:59 - okay
188:01 - see if the normal one still works okay
188:02 - it is cool
188:04 - this looks pretty good
188:08 - um
188:10 - this we can make
188:12 - full width too
188:14 - it might look weird when it's still kind
188:16 - of big
188:17 - but you can add more breakpoints if you
188:18 - want
188:20 - so let's make it full width here so this
188:22 - thing right here
188:25 - so
188:26 - on large screens
188:29 - we want with width three fourths same
188:31 - with this one
188:34 - but with full
188:37 - on
188:39 - mobile and up
188:42 - with full
188:46 - okay cool so that looks pretty good
188:49 - awesome
188:51 - that's that
188:52 - and for this i just want to stack this
188:57 - so again it's it probably looks fine at
188:59 - a certain point like here you can still
189:00 - fit like maybe two
189:02 - but i'm just gonna stack it
189:06 - so first
189:07 - um
189:08 - remember how we had one fourth and three
189:10 - fourths let's stack that first
189:13 - so one fourth right here
189:17 - so large screen we want one-fourth
189:20 - and we'll pile it up let's do that
189:22 - and same for the three-fourths one
189:26 - with full large width three-fourths
189:31 - okay so that's the actual
189:33 - and then we also want the same for
189:37 - the thirds here
189:39 - so do for each case let's just do it for
189:41 - this one
189:44 - sorry not this it's the categories for
189:45 - this case
189:47 - so right here
189:50 - large
189:52 - width full
189:56 - and
189:57 - that to anything okay there we go cool
190:02 - again that's kind of
190:04 - still a lot of room here but
190:06 - i think you'll get what i'm trying to do
190:07 - here
190:10 - so let's just put this on the other
190:13 - cases too
190:16 - let me just grab this
190:18 - so
190:19 - here
190:24 - and
190:26 - here
190:30 - so now it should work for all these
190:32 - cases let me just refresh it first
190:34 - so all cool featured
190:38 - cool
190:41 - oh this is the other thing we can just
190:42 - delete this this is all we had before
190:45 - and
190:46 - all these cases
190:48 - awesome so it is responsive now let me
190:51 - get rid of all this
190:52 - stuff after what's this
190:56 - this is the container so that's the end
190:57 - of it
191:00 - and container
191:02 - so all of this stuff
191:06 - what is this and that's probably the
191:07 - whole container
191:10 - yeah so all the stuff we don't need
191:15 - cool let's see if everything still works
191:22 - awesome it's responsive
191:26 - let's see if
191:28 - large screens don't work
191:30 - and it does
191:33 - okay let's quickly make this view work
191:37 - not going to make it too pretty just
191:41 - just a little bit i think i do have a
191:43 - design for it
191:44 - yeah let's just
191:46 - do something like this
191:48 - okay so i think it's called book view
191:51 - so
191:52 - book.view
191:55 - let's just
191:57 - add a container
192:00 - okay
192:02 - and
192:04 - in here is where we can style it
192:08 - so i'm going to add
192:11 - flex
192:12 - let's add a margin
192:16 - and i'm going to do a responsive at the
192:17 - same time here just so i can save some
192:19 - time
192:22 - okay so the first flex item i want that
192:25 - to be the image
192:27 - so let me just make a div for it and
192:29 - then i'll move the image inside of it
192:36 - and then the other flex item
192:39 - should have these inside of it
192:46 - oops
192:53 - and even the stuff i want inside
192:58 - oh yeah let me just grab these as well
193:02 - okay
193:04 - see how this looks
193:06 - okay
193:08 - and
193:09 - yeah let me just style this real quick
193:11 - so
193:12 - uh the title first
193:16 - class equals
193:20 - text 4xl
193:22 - font
193:23 - bold
193:25 - for the author we want
193:30 - text
193:32 - to excel
193:34 - text gray
193:36 - darkest
193:37 - let's add a margin bottom
193:40 - and i think i don't have the description
193:43 - so let's add that
193:46 - text
193:48 - lg
193:53 - and we can leave that
193:56 - and say letting normal
194:00 - and
194:01 - data book
194:03 - description
194:05 - okay see how it looks
194:08 - okay
194:10 - so i don't want this to be full with
194:12 - this part so let's change that
194:15 - so up here
194:18 - uh so let's do mobile at the same time
194:20 - so mobile i want with full but for large
194:22 - queens i just want to be
194:24 - two-thirds
194:28 - and on mobile margin left of zero but on
194:30 - large screens
194:34 - let me have a margin too
194:37 - large greens empty zero
194:41 - and large greens
194:43 - ml16 margin left 16
194:47 - and that's looking pretty decent
194:51 - and i also want a view link button here
194:54 - so let's do that quickly
194:57 - so right under the description
194:59 - let's add a new container let's make it
195:02 - like that
195:03 - and let's
195:04 - add
195:06 - href of
195:08 - data.book.link let's make sure to bind
195:10 - that
195:13 - okay
195:15 - and then
195:17 - let's make it open in a new window
195:22 - class equals
195:24 - so this is just uh
195:28 - the same button as
195:30 - on the main screen
195:32 - so this button right here
195:36 - okay let's see how that looks
195:40 - okay it looks pretty good and this
195:41 - should open
195:42 - the link
195:44 - awesome
195:46 - and this is pretty good too let me just
195:48 - add a
195:51 - i'm going to remove this link margin
195:56 - actually let's use tailwinds
196:00 - classes and i want a uh
196:05 - mid dot in between where's edit
196:08 - this one's edit
196:09 - that i want
196:11 - mid dot
196:15 - so that looks pretty good to me
196:18 - and let's check if response works
196:20 - and it does cool
196:25 - okay so
196:27 - um
196:29 - the edit
196:31 - and the create screens are the same so
196:33 - i'm gonna do one of them
196:35 - and i'm not gonna make it look
196:38 - too nice i don't actually have a design
196:39 - for that i'll work on the create one but
196:42 - let's just make it so it's not ugly
196:46 - uh so create book i think i named it
196:50 - ad book
196:53 - oh sorry that's the query
196:55 - add book
196:56 - view
196:58 - so let's first add a container on this
197:04 - let's add a margin top too
197:08 - okay
197:10 - and
197:12 - i'm just going to make use of the styles
197:13 - i already have down here so
197:17 - type equals text
197:19 - so i'm going to paste in some stuff to
197:21 - add some
197:22 - because uh tailwind and the resets
197:25 - remove the borders for the text areas
197:28 - so i just added that back in with this
197:30 - okay
197:31 - and it's gonna do
197:35 - label display block
197:41 - and
197:42 - that is
197:45 - good enough for me let me just add some
197:46 - spacing here
197:48 - create book
197:51 - mb4
197:55 - and for all the labels
197:58 - so
198:01 - i'm going to add
198:04 - maybe a font bold on these
198:09 - class equals font bold
198:15 - and maybe a margin bottom of two
198:19 - okay that looks pretty decent
198:24 - so yeah you can do the same for the edit
198:26 - book but i'm pretty happy overall with
198:28 - how the styling is
198:31 - and
198:32 - yeah
198:33 - so let's do a final check make sure
198:35 - everything still works
198:38 - um
198:39 - so we can change the categories
198:42 - okay
198:44 - cool
198:45 - can we add a book
198:46 - just add something
198:48 - add author
198:56 - let's just add an image that exists so
198:58 - it looks decent
198:59 - awesome new book
199:03 - uh let's say amazon
199:06 - let's make it featured and let's put it
199:07 - in
199:08 - business
199:12 - and there it is right there cool
199:14 - let's see if edit works
199:16 - should work i didn't change anything
199:17 - there
199:18 - yeah you can restyle this but
199:21 - change
199:23 - update
199:24 - awesome
199:28 - so there you have it guys we managed to
199:29 - style our graphql application using
199:32 - tailwind css
199:37 - i'd like to deploy our graphql app to a
199:40 - real production server
199:42 - i've received a few questions on how to
199:43 - do deployment so let's go ahead and do
199:46 - that
199:47 - so i'll be using laravel forge to deploy
199:50 - the level back end
199:51 - and for the front end i'll also use
199:54 - forge but i'll also show you how to do
199:56 - it with netlify
199:58 - so i've made a few changes to get this
200:00 - app ready for production so let me just
200:03 - go over them here
200:05 - so the first is in the back end here i
200:07 - am in the git repo
200:09 - and let me just go to the commits and
200:11 - this last one i mentioned in a few
200:13 - videos
200:14 - ago that
200:17 - you should use absolute urls so before i
200:19 - just had the
200:21 - name of the book file book image
200:24 - and now i have an absolute path and i'm
200:27 - using cloudnary to host the images
200:31 - so this is probably what i do if this
200:32 - were a real app as cloudnary is the best
200:35 - service for hosting images
200:37 - as it offloads some of the load off of
200:39 - your server and is also a cdn
200:43 - so yeah i just changed all of these to
200:45 - cloudnary links
200:48 - and for the view end
200:50 - let's go into here check out the commits
200:53 - and
200:56 - so i changed the
200:58 - book url
200:59 - to
201:01 - instead of relative it now just getting
201:03 - it from the back end
201:05 - so that's one change i made same here
201:10 - and here
201:12 - i made two changes
201:15 - uh for this one i'm now using
201:18 - so i changed the end point to the actual
201:21 - endpoint we'll be using
201:22 - i'm going to put it to this domain
201:24 - because that's sort of a test domain i
201:27 - use
201:28 - and i also added a
201:30 - emv file so
201:32 - let me show you in the actual code
201:34 - so i added a
201:36 - emv.development.local file
201:38 - so the way this is going to work is if
201:40 - we're running in development
201:43 - then it's going to get it from the
201:44 - environment file but if we build it for
201:46 - production which we'll do in a second
201:48 - then it will
201:50 - use the correct production endpoint so
201:53 - here's the local file
201:55 - and it's just
201:56 - pointing at the development server
201:59 - okay
202:00 - so those are the changes i made
202:03 - and
202:04 - i think there's one more yeah i just
202:06 - turned off this web sockets just to get
202:08 - rid of those annoying errors in the
202:10 - console
202:11 - and yeah that's it
202:14 - so let's go ahead and go into forge and
202:16 - start here
202:18 - so i'm going to go into forge i'm gonna
202:20 - go into
202:22 - laravel e-commerce
202:24 - and i'll make a new one
202:27 - so like i said i'm going to
202:32 - deploy it to this domain
202:35 - booksql.laravelecommerce.ca
202:39 - so let's do that
202:43 - and
202:44 - general php laravel and public that's
202:46 - fine
202:47 - so let's add that site
202:52 - okay let's go into it
202:56 - and let's install a git repo
203:00 - and the git repo is
203:02 - tray himself slash
203:05 - books ql
203:07 - level
203:09 - okay install the repo
203:13 - okay so before i deploy it i want to
203:15 - make a new database because this
203:18 - server already has a default database
203:20 - for the
203:22 - laravel ecommerce app that's on it so i
203:25 - am going to make a new database
203:27 - so just go here database
203:29 - and let's make a new one here
203:32 - let's call it booksql
203:34 - and we'll add a user later on
203:37 - i mean
203:38 - right now
203:40 - so
203:41 - we can add one here let's do books
203:46 - books ql underscore user
203:49 - and this is a secret password i'm going
203:52 - to delete this after so it doesn't
203:53 - matter
203:55 - and can access this new books ql
203:58 - database we just made
204:00 - and let's add that user booksql user
204:03 - secret password
204:06 - and it's installing
204:09 - and it's done okay
204:11 - so i'm going to ssh into the server and
204:14 - change the dot env file so let's go
204:16 - ahead and do that
204:18 - so let me just ssh forge at laravel
204:22 - ecommerce example dot ca
204:28 - okay so that new one should be there and
204:30 - there it is right there booksql
204:33 - dot laravel ecommerce example.ca
204:39 - and there is an environment file so i'm
204:41 - gonna
204:43 - go ahead and change the database
204:45 - credentials
204:46 - to
204:47 - the one we just created
204:49 - okay so i changed the credentials there
204:51 - let me just quit out of here and now we
204:54 - can deploy it
204:56 - so go back into our
204:58 - site
205:02 - and let's deploy it and hopefully it
205:04 - works
205:10 - and it looks like it did work
205:12 - uh let's check over here
205:15 - so books ql dot laravel
205:19 - ecommerce
205:20 - example.ca
205:22 - okay so it did work
205:24 - i just want to quickly add ssl
205:27 - it's like two clicks so let's just do
205:29 - that
205:30 - and obtain certificate and that should
205:33 - do it
205:36 - okay that's active let's see if it's
205:38 - https now
205:40 - and it is cool
205:43 - so now we should be able to
205:46 - hit our graphql endpoint on this new
205:48 - server so let's open the graphql
205:51 - playground
205:53 - and go to
205:55 - that endpoint
205:57 - slash graphql
206:00 - graph ql
206:03 - and that should work let me just make
206:05 - this bigger
206:08 - and
206:10 - yeah
206:11 - this query should work let's see if it
206:13 - works
206:15 - oh so there's no data in there yet i
206:17 - have to
206:18 - seed the database
206:20 - so let's go into here
206:23 - and this is the app
206:26 - we can do php artisan db seed
206:32 - yes
206:34 - and now this should work
206:37 - so there you go there's all the books
206:40 - in our new server
206:44 - okay now let's work on our front end so
206:48 - all we have to do is
206:50 - run the
206:52 - npm
206:54 - run build command
206:57 - so
206:58 - let me just open up a new tab here
207:01 - books ql
207:03 - view
207:07 - okay and i just have to
207:10 - run this command npm run
207:13 - build
207:16 - and this will make a new dist folder
207:19 - which will package up everything we need
207:21 - to build for production
207:23 - so there you go we have this new dist
207:25 - folder with all the files we need and we
207:27 - can just
207:28 - use this to upload to our server so you
207:31 - should definitely make use of
207:33 - purge css
207:34 - to make your file size much lower for
207:37 - tailwind css and i actually have a video
207:39 - on that which i will link to below
207:42 - and let's just take a look at this in
207:44 - our code
207:45 - so we have a new dist folder here
207:47 - and we'll just be uploading this but
207:49 - let's just make sure that it is using
207:52 - not using this one this is the
207:54 - development one but using the production
207:59 - this one so laravel ecommerce example so
208:01 - let's just
208:03 - double check and
208:06 - search for it here
208:10 - okay so it's not that file it's probably
208:11 - this file
208:15 - okay so there it is
208:16 - so we know it built correctly
208:20 - so in theory before we throw this up on
208:22 - the server we should actually be able to
208:25 - run it here so
208:27 - i'm just going to go into the disk
208:28 - folder
208:30 - and i'm going to run my own server
208:33 - and i have one called
208:34 - i have an
208:36 - alias called server and it just runs a
208:38 - php server
208:40 - so i'm just going to in the local in the
208:41 - current directory so i'm going to do
208:42 - that
208:44 - and it's running in localhost 888 and
208:47 - this should work
208:48 - so there we go and it's pulling from the
208:51 - actual server
208:53 - let's make sure it works and it does
208:55 - cool
208:57 - so let's throw this up on
208:59 - forge first so i'm going to make a new
209:02 - site
209:02 - again on laravel ecommerce
209:06 - and i'm going to call it
209:09 - books
209:11 - so books
209:13 - dot
209:14 - laravel
209:16 - ecommerce example.ca
209:19 - not to be confused with books ql where
209:22 - where our backend lives so this is just
209:24 - a static html
209:27 - so the
209:28 - web root will just be the root which is
209:30 - fine
209:32 - and let's go ahead and add this
209:38 - okay it's done let's
209:41 - add ssl
209:44 - so let's go into it actually
209:48 - add ssl
209:56 - okay
209:58 - okay that's done
210:00 - so if we hit this so it should be books
210:03 - there should be a default page there
210:08 - and there is cool
210:10 - so if you want to see that on the server
210:13 - it should be
210:14 - here so there it is books dot
210:18 - laravel ecommerce example.ca
210:21 - and there's the stat index php so this
210:24 - is where
210:25 - everything in the dist folder goes so if
210:27 - you just drop it in here it should work
210:31 - so we can set a git repo if we want but
210:34 - i'm just going to do it the
210:35 - old-fashioned way
210:37 - and just ftp it in so i'm going to use
210:40 - my ftp app
210:42 - transmit and let me just open it up
210:49 - and there it is kind of small sorry
210:50 - about that i can't zoom in so it's just
210:53 - books
210:55 - and i'm just
210:56 - gonna think i have it here it's gonna
210:59 - drag it in
211:01 - so
211:02 - the dist folder
211:03 - i'm gonna delete this
211:08 - and it's gonna grab everything in this
211:11 - so everything in here and just drag it
211:13 - in
211:17 - okay that's done
211:20 - so now
211:21 - this should work
211:23 - and it does awesome
211:27 - so
211:28 - let's try
211:30 - so this works let's try adding a book
211:34 - so add a book
211:36 - actually let me get let me just grab
211:39 - the url for one of the images because
211:41 - i'm going to be using that so copy image
211:42 - address
211:43 - add a book
211:45 - new book
211:48 - andre's author image let's paste that in
211:51 - this is an awesome book
211:55 - link
211:56 - amazon
211:58 - featured and put it in
212:01 - biography
212:03 - at book
212:04 - and it should be down here and there it
212:06 - is and yeah it works
212:09 - awesome
212:12 - okay so let me show you how to do this
212:15 - with netfly it's that simple
212:18 - let's go to netlify
212:23 - and log in
212:27 - and all we have to do is drag in that
212:29 - dist folder
212:33 - so let me just
212:34 - go up one drag in the dist folder
212:37 - and that is it let's give it a second
212:41 - and i think it's done and it gave us
212:43 - this random domain
212:45 - and it has https on it already
212:48 - and since it's pulling from the same
212:49 - back end there it is it should have that
212:51 - new book we just added
212:53 - and it should be right there cool and
212:55 - everything still works
212:59 - now if you wanted to add a custom domain
213:01 - you can totally do that and i have a
213:03 - video on netflix that show you shows you
213:05 - how to do that
213:07 - so check that out if you are interested
213:10 - so there you have it guys we've deployed
213:12 - both the front end and back end of our
213:14 - graphql application using both forge and
213:17 - netify
213:19 - i'm not going to keep these urls live as
213:22 - it's just taking up extra server
213:23 - resources and it's something else i
213:25 - don't want to maintain
213:27 - but you saw exactly how i did it and can
213:30 - set it up on your own if you need to
213:36 - i'd like to show you how you can call
213:38 - graphql queries from within your laravel
213:40 - app
213:41 - so i just finished up a graphql series
213:43 - with laravel as the graphql server and
213:46 - view as the client
213:48 - so i was wondering how i can make
213:49 - graphql queries from within laravel as
213:52 - the client
213:53 - so it's the same case if you're just
213:55 - building a traditional server rendered
213:57 - app and you need to make http requests
214:00 - you'd probably make use of a library
214:02 - like guzzle or curl
214:04 - i want to see how to do the same but for
214:06 - graphql
214:07 - so i'll show you a few ways and a few
214:10 - packages to accomplish this
214:13 - so the first one is this package here
214:15 - which is specific for php
214:19 - and i actually have a laravel app
214:21 - scaffolded out here already
214:23 - and we'll
214:24 - just make a use of that so let's just
214:26 - composer require this
214:31 - okay
214:32 - and let's see how to use this so it says
214:36 - within oauth2 provider we'll do it
214:39 - without
214:41 - okay so it looks like it's instantiating
214:44 - it here
214:45 - passing in the graphql endpoint here
214:48 - and then here's the graphql query here
214:51 - and some variables and there's a
214:53 - response
214:55 - so yeah all these libraries just use
214:57 - guzzle under the hood
214:59 - because if you look at graphql queries
215:02 - they're just http requests
215:04 - and
215:05 - guzzle is the most popular one for php
215:09 - so let's go ahead and do this
215:11 - i'm just going to work in the routes
215:12 - file
215:14 - so i'll just work in here and paste
215:16 - everything in here
215:19 - so let's paste that in
215:22 - and i am going to
215:26 - make use of
215:28 - this endpoint that we did in
215:31 - the graphql series if you don't know if
215:33 - you haven't seen that
215:34 - i made an app a book recommendation app
215:38 - and this is the endpoint for that
215:40 - so let's grab this
215:44 - and it's paste it in here
215:51 - and here is where our query goes
215:53 - so this operator i actually didn't know
215:55 - what that was i had to look it up it's
215:57 - just a way to do strings
216:00 - but
216:01 - that's
216:01 - doesn't look
216:02 - right to me because i've never used it
216:04 - before so i'll just use normal strings
216:06 - and we can just close it here
216:09 - and we don't need this and this
216:12 - should should still work
216:14 - okay so let's just paste in
216:17 - this query we have here
216:20 - that we know works because we can see it
216:22 - here
216:23 - so i'll get rid of this
216:26 - paste it in
216:28 - and
216:30 - this
216:32 - should work so we don't have any
216:33 - variables
216:36 - so
216:37 - we can just leave it actually
216:39 - i think it will just ignore it
216:42 - and after this let's just tie and dump
216:44 - the response see if we get anything
216:49 - okay let's try this out
216:54 - okay so it looks like we get a response
216:58 - and let's see what we have here so
217:00 - there's our books right there
217:03 - so we can also do
217:06 - you can see the response is an array
217:08 - if you want the response to be
217:10 - the actual books you can just do
217:12 - response
217:14 - get data
217:17 - it just
217:18 - it makes it less nested
217:21 - so there you go
217:22 - cool so that's the first way
217:25 - actually let's take a look at how to do
217:27 - variables
217:29 - so first let's
217:31 - change this one to use the other query
217:33 - which has variables
217:35 - which is
217:37 - uh
217:38 - querying for one book
217:40 - so this would be
217:43 - yeah just passing the id
217:45 - say we want three
217:47 - this should work
217:48 - there we go
217:50 - so let's see how to do that in here
217:54 - so let's just change the
217:56 - query up here so book
217:59 - id
218:01 - is id
218:03 - and title author and we just have to
218:05 - accept
218:07 - the parameters in here
218:09 - so let's say get book we can name it i
218:12 - don't think you have to name it but
218:13 - let's name it anyways
218:15 - id is of type id and it's required
218:19 - and
218:20 - that
218:21 - should do it and the variables we have
218:23 - to change
218:25 - let's see this is hardcoded in so we
218:27 - don't need this one so the id
218:30 - is
218:31 - just put
218:33 - three in here
218:35 - and this should work as well
218:40 - there we go there's that book
218:42 - and there is that book with id of three
218:46 - so let's see how we can make use of
218:48 - mutations so let's quickly do a mutation
218:51 - here
218:53 - so
218:54 - we have one called create book
218:57 - create book and i think you have to pass
218:59 - it a title
219:02 - new book
219:04 - and author
219:07 - say andre and a category
219:11 - let's say
219:13 - just one so it's an int
219:16 - and let's say id
219:18 - and title
219:20 - okay okay so 35 is that new book we just
219:25 - created
219:27 - and we can do the same thing in our code
219:30 - here
219:32 - so let's put in the variables first so
219:35 - i'm going to do title
219:38 - awesome new book
219:41 - and
219:42 - the author
219:45 - is
219:47 - andre
219:49 - and the title uh sorry the category
219:52 - is just an end so let's say three
219:57 - okay now let's get the query
220:00 - i mean the mutation we just did here
220:03 - so we can just copy this
220:06 - and paste it in here
220:12 - let me just reinvent that
220:15 - and let's use the variables instead of
220:17 - hard coding here
220:19 - it's going to be title
220:21 - author
220:24 - and category
220:28 - okay
220:29 - and let's accept the params up here
220:33 - so let's call it create book as well
220:36 - and say title
220:39 - is a string required
220:43 - author
220:44 - string required
220:47 - category
220:49 - int required
220:51 - okay and you can change this to mutation
220:54 - as well but i'll just leave it as query
220:57 - should still work the same way
221:00 - and if i did this correctly this should
221:03 - make a new book from within our code
221:09 - and that didn't seem to work
221:13 - i think i have an extra
221:15 - closing brace here
221:17 - so yeah this one is not closing anything
221:20 - let me just delete this one
221:23 - and let's try that again
221:26 - so there we go
221:28 - create a new one called awesome new book
221:30 - and that's how you do mutations
221:33 - cool
221:34 - okay so let's take a look at how to use
221:38 - just guzzle
221:40 - so like i said earlier graphql queries
221:42 - are just basic http requests
221:45 - and you're just passing in json
221:48 - so let me show you what i mean so if i
221:49 - go to my rest client which is insomnia
221:52 - here i have the endpoint for
221:55 - the graphql
221:57 - and like i said if you just pass it some
221:59 - json you can you can actually do a
222:01 - graphql query here as well but we'll
222:03 - just take a look at how to do it
222:05 - with json
222:07 - so if you just pass it
222:09 - a query
222:10 - and then the graphql query in here
222:14 - so for example we'll do query let's do a
222:16 - one line
222:19 - books
222:21 - and we want the
222:23 - title and the author
222:26 - this
222:27 - should work
222:29 - i think this has to be a string as well
222:31 - let's see
222:35 - okay so let's try
222:36 - this and there we go
222:39 - so this is the response that we get when
222:42 - we're
222:43 - using graphql so it's the same thing we
222:45 - just have to make an http request and
222:47 - pass in some json with the key as query
222:51 - and then the
222:53 - graphql query in here
222:56 - so with that knowledge we can actually
222:58 - just use guzzle
222:59 - and just pass in some json using guzzles
223:02 - functions
223:03 - so let's do
223:04 - that so i'm going to make a new
223:07 - route here
223:11 - oops
223:12 - route call okay
223:14 - and it's called a let's call it guzzle
223:18 - and since guzzle is a dependency
223:21 - for this other pack package we just used
223:23 - we can just use it
223:25 - so let's do client equals new
223:27 - [Music]
223:29 - causal
223:30 - http
223:31 - client
223:36 - and let me paste in some code here
223:42 - and this is what makes the
223:46 - response actually
223:48 - i have to
223:50 - add the client
223:51 - sorry the response here response
223:55 - is client and it's a post request
223:59 - to the
224:00 - endpoint books ql
224:03 - parable.test
224:05 - graphql
224:08 - and then the second parameter is this
224:10 - thing i pasted in
224:13 - so that just
224:15 - some json to the
224:18 - request
224:19 - okay
224:24 - what is this complaining about
224:29 - okay
224:30 - okay
224:33 - so um let's see
224:36 - let's just die and dump
224:39 - the response
224:41 - actually we have to dine up the response
224:43 - i have to get the body
224:46 - and me to get the contents just so we
224:48 - can see what's coming back
224:52 - okay
224:53 - let's see if i did this correctly
224:56 - and let's hit the guzzle end point
225:04 - what did i do wrong here
225:07 - i think i'm missing an opening
225:09 - array square bracket here
225:12 - and then a closing one here
225:16 - okay sorry some formatting issues there
225:19 - let's see if this works
225:22 - okay so there you go there's the
225:25 - response for our graphql query
225:28 - let's test
225:30 - just json decode this so we can get it
225:33 - as an array
225:41 - there you go so there's our data cool
225:45 - and these are all the books in our
225:49 - database cool
225:52 - and we can also do the same thing we did
225:56 - above uh if you just want to
225:58 - get a specific book we can just pass in
226:00 - an id
226:02 - this is hardcoded in
226:04 - id1
226:05 - that should work
226:10 - there we go there's that book
226:12 - and you can also do mutations if you
226:14 - like
226:17 - so let's quickly do a mutation here
226:22 - sorry this is a mutation
226:25 - yeah this is a mutation
226:28 - and it's called create book
226:32 - and it needs a title
226:38 - say new book
226:42 - it needs an author
226:48 - and it needs a category
226:53 - and we'll return that okay see if this
226:56 - works
226:59 - and there we go it created this new one
227:02 - awesome with id of 37.
227:06 - okay one more way i want to show you and
227:08 - that's just using a wrap another wrapper
227:10 - around guzzle
227:12 - called
227:13 - zttp
227:16 - this is the
227:19 - http library i prefer it just makes it
227:22 - easier
227:24 - so
227:27 - there is i'm looking at the tests here
227:29 - and there's one
227:31 - that lets you pass in json like this so
227:33 - it's going to grab this
227:36 - actually i have to install it first but
227:37 - let me just grab that paste it in
227:40 - let's call it zttp
227:45 - and let's try this out
227:46 - let's install it first
227:53 - and you actually have to do slash
227:57 - like this okay
227:58 - and let's do composer require
228:01 - i think it's what is it kite tail
228:04 - kite tails http
228:11 - sorry that should be a forward slash
228:16 - okay so that's done let's take a look
228:18 - here
228:19 - so
228:20 - let's put in the url here
228:32 - we just need one
228:33 - key and that's going to be query
228:36 - and then the value is the
228:38 - graphql query so let's
228:41 - quickly do what we did before query
228:44 - say books
228:47 - say title author
228:50 - close that out
228:53 - and
228:54 - that should work
228:57 - let's just dine dump
228:59 - response
229:01 - json
229:04 - and let's see if this works
229:07 - so let's do zttp
229:11 - and there we go there's our data
229:14 - there's all our books and we can do
229:16 - exactly the same thing we did in here
229:18 - we can pass in parameters and we can
229:20 - also do mutations which i won't show you
229:22 - because it's exactly the same as we did
229:24 - here
229:26 - so there you have it guys we've managed
229:28 - to query our graphql server from within
229:30 - a laravel app
229:31 - we've taken a look at three ways to do
229:33 - so
229:34 - so you can pick which way you enjoy the
229:36 - most
229:40 - i'd like to take a look at a graphql
229:42 - server package called graphql laravel
229:45 - this is similar to the lighthouse
229:46 - package which we used in my graphql
229:48 - series to build out in app
229:51 - they are both similar in that they are
229:53 - both graphql servers however they take a
229:56 - different approach which we'll take a
229:57 - look at throughout this video
229:59 - if you haven't seen at least the first
230:01 - video in that graphql series definitely
230:03 - check it out as i'll be making
230:05 - comparisons between both packages
230:08 - so these packages both make use of the
230:10 - graphql php package which is a vanilla
230:13 - php implementation
230:15 - so this graphql laravel package is more
230:18 - similar to that whereas the lighthouse
230:21 - package
230:22 - sort of conforms more to the graphql
230:24 - spec
230:25 - and makes use of heavy directives
230:29 - so if you don't know what that means
230:30 - don't worry we'll be going over
230:32 - everything in this video
230:34 - okay so let's get started let's install
230:37 - this i have a laravel app running
230:38 - already
230:39 - and i didn't do anything to it yet
230:42 - so let's
230:44 - composer required it
230:52 - okay
230:53 - let's
230:55 - publish the config
231:02 - okay
231:05 - and that is it
231:07 - okay so let's do some quick setup in
231:10 - that first video
231:11 - uh where we took a look at this
231:13 - lighthouse package which is right here
231:16 - we took a look at an example where it
231:19 - was a basic blog implementation so the
231:22 - models the models we had were users
231:24 - comments and posts
231:26 - so we'll do the same thing we'll just
231:28 - have users in posts and the relationship
231:31 - will be a user has many posts and a post
231:34 - belongs to a user
231:35 - so let me quickly set this up in
231:39 - this example
231:40 - which is a blank laravel app
231:43 - so let's do this quickly
231:45 - so let's make a
231:47 - post
231:50 - make model sorry
231:53 - it's making migration
231:56 - okay
231:59 - so let's just copy and paste stuff
232:02 - so the user has many posts
232:06 - so let's go to user
232:09 - as many posts
232:13 - a post
232:18 - let's go to post here
232:21 - and let's just do a belongs to
232:24 - relationship and like i said we won't do
232:26 - comments
232:27 - here it's the same thing same
232:28 - relationship between
232:31 - posts and comments but
232:34 - we'll just keep it simple
232:37 - okay and let's just steal the
232:41 - migration so it's create posts
232:45 - table yep so let me just grab all of
232:47 - this
232:50 - and should be a great posts
232:54 - there we go
232:58 - okay so that should
233:01 - do it
233:03 - and let me just set up my environment
233:04 - file
233:06 - i haven't created already so root
233:10 - root oh sorry it's a
233:13 - graphql
233:15 - variable
233:16 - example
233:19 - root
233:20 - okay let's
233:21 - migrate
233:24 - and hope everything works
233:27 - and it does cool
233:29 - and let me just quickly
233:32 - whip up some
233:33 - seed data i'm going to manually in the
233:35 - database
233:37 - so let's make a few users
233:42 - and let's make a few posts
233:46 - okay so i have
233:48 - two posts here two for andre and two for
233:50 - john
233:52 - okay so now if you take a look at
233:55 - the original package so let me just
233:58 - close these
234:00 - okay so remember on in the first video
234:02 - of the original package we spent most of
234:05 - our time in this schema.graphql file
234:09 - so there are
234:10 - three things or two things depending on
234:13 - how you want to look at it
234:15 - that we have to do here so the first
234:17 - thing we should do is define the types
234:20 - and these types are just the models and
234:22 - they have the same fields on the models
234:25 - and this is how they are defined and in
234:28 - the lighthouse package they conform to
234:31 - the graphql specification
234:33 - so all of this is the graphql
234:35 - specification
234:36 - but it does have some differences in
234:39 - that it uses directives
234:41 - to get things accomplished
234:43 - in this graphql
234:45 - package
234:46 - graphql level package i mean
234:49 - it is the same thing but everything is
234:51 - in php so there's more code to write
234:55 - so let's go ahead and start doing that
235:00 - so let's go into the docs
235:02 - and let's take a look here
235:05 - say create a query
235:09 - there's no dedicated documentation
235:11 - page like lighthouse has
235:13 - everything is in
235:14 - the readme here so
235:16 - so it says first you have to create a
235:17 - type
235:19 - and that's what we want to do so again
235:22 - we want to mimic we'll start with the
235:24 - user
235:25 - this
235:27 - okay so
235:30 - you have to make a new file
235:33 - in this folder app graphql type
235:36 - just makes bigger
235:39 - and then we have to define everything
235:44 - in php like i said so everything
235:47 - here we have to define it in php
235:51 - okay so let's do that uh i kind of wish
235:53 - this package had
235:55 - a cli tool to scaffold everything out
236:00 - so
236:01 - that's one improvement i think
236:03 - they can improve on
236:05 - maybe if i have time i'll
236:07 - look at
236:08 - putting in a pr okay so
236:11 - where does it go it goes into
236:14 - app graphql type and it's called user
236:16 - type
236:17 - so app
236:19 - new folder
236:21 - graph ql
236:26 - and type
236:28 - let's make it a folder
236:31 - type
236:33 - okay
236:34 - and new new file so user type so each
236:38 - type is
236:39 - separated into their own file
236:41 - whereas in this package everything is in
236:43 - here
236:44 - you can actually separate them in
236:46 - different files but in general
236:48 - everything is in this schema.graphql
236:50 - file so that's one difference
236:52 - let's just paste that in
236:55 - sorry i have to open php
236:58 - and let's paste that in
237:02 - okay let's take a look at this from the
237:03 - top
237:06 - all right any other errors here okay
237:09 - looks good
237:10 - okay so all your imports
237:13 - and
237:14 - the attributes
237:16 - and just specifying the model
237:18 - a name and a description this is fine
237:23 - and this public function fields returns
237:26 - an array of fields so this is the
237:28 - equivalent
237:30 - of
237:32 - this
237:34 - these are the fields
237:37 - and
237:38 - see within each field they have a type
237:42 - and that corresponds to this
237:44 - so this field has this type
237:47 - and this exclamation mark means it's
237:49 - required so to do required we have to
237:52 - use this non-null function
237:55 - so let's go ahead and do this
237:57 - so we don't need this alias
238:00 - because the id is
238:03 - just id in the database
238:05 - so we have email which is a string
238:09 - so again
238:10 - that is this
238:12 - and it's not it's required here so
238:15 - should be required but
238:17 - we can add that in if we like
238:19 - let's add it in
238:22 - type
238:24 - string
238:26 - okay
238:28 - and there is no name here for some
238:30 - reason so let's add in name
238:32 - and let's put it above email
238:35 - so
238:36 - let's say
238:38 - name
238:41 - name is required too right
238:43 - yeah same so same thing
238:46 - name string and description is the name
238:50 - of
238:51 - the user
238:53 - and let's remove this is me this has to
238:55 - do with authentication which we won't
238:56 - look at in this video
239:00 - okay so this is just
239:03 - a resolver method so if you want to
239:06 - return something different from what the
239:07 - actual value of the field is
239:10 - then you can define a resolver like this
239:13 - in this format and
239:16 - it will resolve it here so we're not
239:18 - going to do that but it's nice to have
239:19 - that option
239:23 - okay so let me save this we have the
239:24 - type defined
239:26 - and the next thing we did in this
239:28 - lighthouse package was
239:30 - define the queries so we'll define the
239:32 - post
239:34 - in a second let's just define the
239:35 - queries first
239:38 - and we'll also look at the relationship
239:40 - in a second
239:42 - so
239:43 - here we have to define all the queries
239:45 - available
239:47 - to the
239:48 - consumer
239:50 - and the most basic one is just returning
239:53 - all users
239:55 - so let's see how to do that
239:57 - so back into the docs
240:01 - so we have the type defined
240:04 - and we also have
240:06 - we have to add the type to the config
240:08 - graphql which is already there by
240:10 - default i believe so config
240:13 - graphql
240:15 - and there's a section for types here
240:18 - somewhere
240:20 - so here's a section for queries
240:23 - and there's a section for types
240:26 - it's actually not defined so let's go
240:27 - ahead and do that so they have these
240:29 - examples here
240:31 - so we don't have this so i'm going to
240:32 - comment this up
240:33 - and same
240:34 - with well when we get to queries and
240:37 - mutations i'll show you that but
240:39 - these don't exist so we have to remove
240:41 - those okay so to define the types we
240:44 - just have to
240:45 - let me just grab this
240:48 - and it is a user type
240:53 - and that lives in
240:55 - app
240:56 - graphql
240:59 - type
241:01 - user type
241:05 - class
241:06 - okay
241:07 - so our type is now defined
241:10 - and now we can make a query
241:14 - okay
241:16 - so yeah it says you can use the facade
241:18 - we won't be using that
241:20 - okay so now
241:22 - we can define the query
241:25 - so let me just grab this again i kind of
241:27 - wish they had
241:29 - a cli generator
241:32 - and this goes into app graphql query and
241:35 - it's called users query
241:36 - so let's do that
241:39 - app graphql query
241:42 - let's make a new folder
241:44 - query
241:46 - and
241:47 - new file called
241:50 - user's query
241:51 - i think
241:52 - that was called users query okay
241:55 - let's paste this in
241:59 - and let's take a look
242:00 - we have
242:03 - so this is just the name of the query
242:06 - and this type
242:09 - let's go back to our lighthouse one
242:12 - so yeah this is the name so users
242:15 - and
242:17 - this type is what it returns
242:19 - so in this case in lighthouse we want to
242:22 - return a list
242:23 - of users
242:25 - and this is what this is saying
242:27 - so list of
242:29 - users
242:30 - so again it's the same thing it's just
242:32 - in php format
242:35 - and this arguments function
242:38 - sort of specifies arguments
242:41 - which can be confusing because
242:43 - this query can list all users but it can
242:46 - also filter them down to
242:49 - using an id and email
242:51 - and in this implementation
242:54 - we have them separate so we have one for
242:56 - all users and then we have one where you
242:58 - can find by an id but this one allows
243:00 - you to do both
243:02 - i'll show you in a second
243:05 - so after that this looks fine
243:08 - this is the resolver so this is where it
243:11 - gets the eloquent query and retrieves
243:13 - the users so in lighthouse
243:16 - we
243:17 - just used the all directive or the find
243:20 - directive
243:21 - and you can also use custom resolvers if
243:23 - you want to do it that way but here
243:26 - it it's more of the custom resolvers
243:28 - approach where you've got to specify the
243:30 - query yourself
243:32 - so this is just checking if there are
243:34 - arguments again i kind of think it's
243:36 - better to separate it out
243:38 - and then if there are arguments then
243:41 - you just find them
243:43 - using this eloquent query but there
243:45 - isn't then you just return everything
243:48 - so let's go ahead and see
243:52 - if this works
243:53 - i think we have to define it first in
243:56 - the config so yeah right here
243:58 - so we have to
244:02 - specify that
244:03 - this is one of the queries
244:06 - so let's go into
244:08 - our config again let's go up here
244:12 - and again these don't exist so let me
244:14 - just copy them out same with the
244:15 - mutation which we'll look at in a second
244:18 - and let's just paste that in
244:20 - so it's exposing a user's query here and
244:24 - this is where it lives and all the logic
244:26 - for it
244:27 - let me put a comma there
244:29 - okay
244:31 - so now finally if we go into our graphql
244:34 - client
244:35 - and what is called
244:38 - graphql variable example dot test so
244:41 - this is the original url i was playing
244:43 - with
244:44 - graphql
244:47 - laravel
244:48 - example.test
244:51 - and let me just erase this
244:56 - so this is
244:59 - oh yeah so sorry that shouldn't have
245:01 - brackets
245:03 - okay so this should work
245:05 - and it does cool
245:07 - so it's returning all the users in our
245:10 - database
245:11 - so let me show you the arguments
245:14 - so like i said it does take arguments
245:17 - and they are optional
245:19 - which
245:20 - uh should be separate but let me just
245:21 - show you that it works
245:23 - and they take two arguments and i think
245:25 - the id takes precedence
245:27 - again this should be a separate
245:30 - query but let me just show you so if i
245:32 - search for id
245:34 - and they defined it as a string should
245:36 - be an int
245:37 - but let's
245:39 - say one
245:40 - and then it should just return andre
245:43 - there we go
245:45 - okay let's quickly take a look at
245:47 - relationships
245:48 - because that doesn't work yet so
245:50 - essentially we'd like to be able to grab
245:52 - the posts from the user
245:54 - and then list that out as well
245:57 - so let's do that so the first thing we
245:59 - have to do is
246:02 - define a post type so let's go ahead and
246:05 - do that
246:06 - so i'm going to do a new file
246:08 - post
246:09 - type
246:10 - php and i already have it
246:14 - copied in my clipboard and it's going to
246:15 - paste it in
246:16 - so it's basically the same thing as the
246:18 - user type just specified
246:21 - for the fields of a post
246:23 - so posts models post
246:27 - so a post has an id
246:29 - a title and content
246:32 - and here's the relation which we didn't
246:34 - take a look at in the user which we'll
246:37 - do in a second but
246:38 - we just have to specify the type so
246:40 - graphql type user
246:42 - and they can see find it from the config
246:45 - and it's just this one that we have
246:47 - already
246:48 - and here's a description for it
246:51 - and we don't need any custom resolvers
246:53 - or anything like that
246:54 - so save that and let's define the
246:56 - relationship here too so i'm going to
246:58 - grab this
247:01 - for the user
247:03 - i mean for the post in the user
247:06 - so right here paste that in
247:09 - and the relation is
247:11 - posts
247:13 - so a user has many posts
247:17 - the type is
247:19 - a list of posts
247:21 - so we have to type
247:24 - list
247:25 - of
247:26 - graphql
247:30 - type
247:30 - and type post
247:33 - okay
247:34 - and let me just say
247:38 - a list of posts written
247:42 - by the user
247:44 - okay and i think i have to just import
247:46 - the graphql here
247:48 - and
247:49 - i think it's just
247:52 - graphql
247:54 - and i think i have that in here already
247:57 - sorry in the post type i mean
248:00 - and i
248:02 - do have it cool
248:04 - and yeah i think that's it now we have
248:07 - to specify the post
248:10 - and oh we have to do the post query as
248:12 - well
248:13 - so let me just type that paste that in
248:15 - as
248:16 - well let's make a new file here called
248:19 - posts query
248:23 - posts query dot php
248:26 - and i'm pasting it in but again it's
248:28 - basically the same thing as the users
248:30 - query that we did already
248:33 - so it is
248:35 - a
248:36 - list of posts
248:39 - and again there's an optional argument
248:40 - which i think should be separate
248:43 - and to resolve it you just have to post
248:45 - all which is the one we're interested in
248:47 - but if you want to pass in an id you can
248:49 - do that as well
248:51 - and now we just go into our config
248:55 - and let's add those
248:57 - so posts
249:01 - and posts query
249:05 - and add the type
249:08 - the type is down here
249:11 - post
249:14 - poster type
249:18 - and yes let's test this out
249:23 - save last refresh
249:26 - okay let's try
249:29 - posts
249:31 - and it's just
249:32 - let's say
249:33 - title
249:35 - okay so it looks like it does work
249:37 - content yep
249:39 - okay so there is id1 if you want
249:41 - everything just remove this
249:44 - and there are all the posts cool
249:47 - so let's try the relationship
249:49 - so we want the for posts we want the
249:52 - user associated with it it looks like it
249:54 - works
249:55 - and we want the
249:56 - username and
249:59 - email
250:00 - so there we go so this post
250:02 - was written by andre this one too this
250:05 - one's written by john
250:06 - and john let's take a look at
250:09 - the other way
250:11 - so let me just comment this out
250:15 - query
250:18 - users
250:22 - id name but we also want
250:26 - the post
250:29 - and then we want the title
250:33 - and that seems to work too cool
250:36 - okay now let's quickly look at mutations
250:39 - so let's go back into the documentation
250:43 - and let's take a look at this mutation
250:46 - and it's almost the same as a query
250:49 - except it's a mutation so let's go ahead
250:51 - and
250:52 - copy this and this one is updating the
250:54 - password but we'll make one for creating
250:57 - a user
250:59 - so let's copy that
251:01 - and this goes into
251:04 - app graphql mutation
251:07 - so let's go to that
251:09 - app graphql new folder
251:13 - mutation
251:16 - and what's it called
251:19 - okay we have to make our own say create
251:21 - user mutation
251:24 - so
251:25 - file
251:27 - create user mutation
251:29 - dot php
251:31 - space the same and let's make changes
251:35 - create user mutation
251:41 - create
251:42 - user
251:44 - so the type let's go back to our
251:47 - lighthouse example
251:49 - so here's a create user
251:51 - the type is just the thing it returns so
251:53 - in our case we want to return the
251:54 - created user
251:56 - so that's what we're doing here
252:00 - and the arguments
252:03 - are the things we need to create a user
252:05 - so here we have a name email and
252:08 - password
252:10 - so we don't need this id
252:12 - but we need
252:14 - name and email and i'm just going to
252:16 - paste them in
252:18 - to save some time
252:20 - and it's basically the same thing
252:21 - just we need a name and email and they
252:24 - are of type string
252:27 - and then in the resolve function is
252:29 - where it happens
252:31 - so
252:32 - this is for updating the password we
252:34 - don't want to do that
252:36 - we want to user
252:38 - create
252:40 - and then we want
252:43 - a name
252:44 - and that's coming from
252:48 - args
252:49 - name
252:51 - so this is what the user is specifying
252:54 - in the graphql query
252:56 - we want an email
252:59 - and we want a password
253:03 - but we want to make sure that the
253:05 - password is hashed
253:07 - so we do bcrypt
253:11 - okay let's see if this works
253:15 - and
253:17 - we have to specify this in the
253:19 - graphql file
253:21 - so there is a section here for mutations
253:26 - let me just copy this
253:31 - let's paste it in
253:32 - it's called
253:34 - create user
253:39 - and app graphql
253:41 - mutation
253:45 - create user
253:47 - mutation
253:53 - and i think that is it let's see if this
253:56 - works
253:59 - so let me just do it here so it is a
254:01 - mutation okay
254:03 - let's see if it appears
254:08 - user
254:09 - and then see if yeah there you go name
254:11 - email and password so let's try this out
254:15 - tony stark
254:18 - email
254:20 - tony avengers.com
254:24 - and
254:26 - password
254:29 - is iron man
254:32 - and let's return
254:33 - the
254:34 - id and the name
254:38 - okay so hopefully this works
254:41 - there we go
254:42 - it created a new user
254:45 - and if we just
254:48 - uncomment this you should see that in
254:50 - the list of users
254:52 - so let me just change this to users
254:56 - and let's get to names
254:59 - there we go cool
255:01 - so there you have it guys we've taken a
255:02 - look at this graphql level package so
255:05 - you can build out your graphql server
255:08 - again it is a similar package to the
255:10 - lighthouse package but takes a different
255:13 - approach and makes use of php more
255:17 - so i think they're both great it's just
255:19 - a matter of preference so you try both
255:21 - out and see which one you like better
255:27 - i'd like to show you how you can do
255:28 - authentication with graphql
255:31 - we'll be looking at doing this with the
255:33 - lighthouse package and laravel passport
255:36 - now i'm going to be assuming that you
255:37 - understand the basics of token-based
255:39 - authentication with passport
255:42 - if you don't make sure to watch my
255:44 - videos on this which i will link to
255:45 - below
255:46 - there's two videos so there's one for
255:48 - the back end where we set up passport
255:50 - and get auth tokens returned to us upon
255:53 - receiving the correct credentials
255:55 - and the other one is the front end where
255:58 - we take that token send it to the server
256:01 - and
256:02 - are able to log in
256:04 - so we'll do the same here where we'll
256:06 - first set up the back end with passport
256:08 - and get an auth token returned to us
256:10 - upon successful login
256:12 - then in the next video we'll see how we
256:14 - can take that token
256:16 - and send it through for subsequent
256:17 - requests
256:19 - so let's first install passport and see
256:21 - how to do this traditionally with rest
256:23 - and then we'll try to mimic that with
256:24 - graphql
256:26 - so i'm going to be starting from the
256:28 - project we built in the first video
256:31 - so if you watch that video you know we
256:33 - built a very basic blog implementation
256:35 - where we have
256:37 - users posts and comments
256:40 - and a user has many posts a post has
256:43 - many comments
256:44 - and we set up our types here
256:47 - in our graphql schema
256:49 - and we also set up our queries and we
256:51 - have one mutation here
256:53 - so yeah
256:54 - as a refresher here's a
256:57 - a query we can run
256:59 - there it is
257:01 - so yeah i started using graphical more
257:03 - if you watch the other videos i was
257:05 - using graphql playground
257:07 - and i've just encountered more bugs than
257:10 - i do with graphical so i kind of
257:11 - switched over
257:13 - just kind of wish they had a dark mode
257:17 - okay so let's install passport first so
257:19 - if you already know how to use passport
257:20 - you can feel free to skip this but i'm
257:22 - gonna do it from scratch
257:24 - really quickly so composer require it
257:31 - that is the incorrect
257:33 - repo sorry
257:35 - it's a lighthouse
257:38 - tutorial
257:42 - this one
257:46 - okay that's done what's next
257:48 - next is to
257:50 - migrate
257:55 - okay
257:57 - next is to page hprs in passport install
258:00 - and this will install our clients and
258:03 - we're interested in the password grant
258:05 - client
258:08 - so we are interested in this one so let
258:11 - me just copy this
258:15 - and now it says
258:18 - and has api tokens to your user class
258:22 - so let's do that
258:25 - user
258:27 - has api tokens
258:30 - and let's import that
258:32 - okay
258:34 - next
258:38 - call passport routes in your
258:42 - auth service provider
258:46 - auth service provider
258:48 - passport routes
258:51 - so i'm going to do that but i'm just
258:52 - going to specify that i just want the
258:54 - routes for
258:55 - password grant
258:57 - so passport
258:59 - routes and we'll just patch pass in a
259:02 - closure
259:03 - function
259:05 - router
259:08 - and we just want something like this
259:11 - router
259:12 - for access
259:14 - tokens
259:15 - okay
259:17 - make sure to import passport
259:24 - and in config auth
259:26 - change
259:28 - the api to passport
259:32 - config
259:33 - off
259:35 - change the api to passport
259:39 - okay
259:40 - i think that's it
259:44 - so yeah i think that's it
259:47 - so to use this again this is just the
259:50 - traditional way let's do php artisan
259:53 - route list
259:56 - list
259:58 - unexpected
260:00 - service provider sorry
260:06 - forgot a semicolon
260:09 - okay so let's do that again
260:13 - really
260:15 - all right let's try
260:17 - key generate
260:21 - okay so there's our route list
260:24 - and at the endpoint we're interested in
260:26 - to log in is this oauth token
260:30 - so
260:31 - i'm just going to use my traditional
260:32 - rest client
260:33 - actually let me just
260:35 - show you
260:36 - um
260:37 - where's the
260:38 - password
260:40 - grant
260:44 - so here we just have to pass in again to
260:47 - oauth token it's a post request
260:50 - pass in all these fields
260:53 - and then if it's correct then we should
260:55 - get a token back
260:58 - so let's go ahead and go into my risk
260:59 - client and try this out
261:03 - i'm going to make a new request
261:06 - it's going to be called passport
261:10 - login
261:11 - it's going to be a post request
261:16 - and let's set the header accept
261:21 - application json
261:25 - okay
261:28 - and then set the url http
261:31 - lighthouse tutorial.test
261:38 - token
261:41 - okay let's see if we get a response
261:43 - okay let me do cool that's just because
261:45 - we didn't pass in this information
261:47 - which we will do so here so we'll just
261:50 - pass in a
261:52 - multi-part form
261:54 - and it's passing everything i said here
261:56 - so
261:57 - grant type
261:59 - is password
262:04 - id
262:07 - is what i copied i still have it copied
262:09 - see
262:10 - i don't
262:12 - let me check here
262:17 - okay so the id is two and the secret is
262:19 - this
262:23 - two
262:24 - and it's
262:26 - client secret i think is the next one
262:28 - client secret yep
262:33 - paste that in what's next
262:36 - and now it's just the username and the
262:38 - password
262:39 - so any users in our database and i think
262:41 - we have a whole bunch
262:44 - let me just
262:46 - user name
262:48 - and password
262:50 - and we don't need the
262:52 - scope
262:54 - okay so let's go into our database i
262:56 - think i have some here
262:59 - so yeah there's a whole bunch here we'll
263:00 - just pick one and i think the default
263:02 - password is
263:04 - uh secret so i'll pick
263:06 - javon
263:08 - let's copy that
263:11 - and let's try an incorrect password
263:14 - first
263:15 - and see if we get a proper response and
263:17 - we do valid credentials but if it's
263:19 - correct
263:20 - this should return a token
263:22 - and it does cool
263:26 - so in our front end we would store this
263:27 - in local storage or cookies
263:30 - and then we would make subsequent
263:32 - requests with this token and that should
263:35 - authenticate us
263:37 - so let me show you what i mean actually
263:40 - um so if you make another request
263:44 - let me just copy this
263:48 - it's a get request
263:50 - subsequent
263:53 - request
263:57 - paste that in
263:59 - but if we make a request to check out
264:02 - routes api
264:04 - sorry let me just remove this
264:07 - routes
264:08 - api and this
264:12 - endpoint is beha behind api slash api
264:15 - slash user and it's behind this
264:16 - middleware
264:18 - and it's just returning the logged in
264:19 - users details
264:21 - so let's do that
264:24 - so slash api
264:26 - slash user so there's no token being
264:28 - passed in yet so this should be an error
264:31 - i might have to pass an application json
264:33 - yeah i do
264:35 - um
264:36 - accept
264:39 - application
264:41 - json
264:43 - okay
264:45 - but if we pass in that token so the
264:47 - header would be
264:48 - authorization
264:51 - and value is bearer and then the token
264:55 - that's not the token
264:56 - token is here
264:59 - then this should return
265:01 - that user's details
265:03 - there we
265:04 - go so yeah that's the traditional way of
265:07 - doing it in rest and now let's do it in
265:10 - graphql
265:12 - so the creator of lighthouse actually
265:14 - has a video on how to do this
265:16 - which i followed
265:18 - i will link it in the description if
265:20 - you're curious
265:21 - so i did everything manually like he
265:23 - showed in the video and i actually had
265:25 - it working
265:26 - but then i came across someone who wrote
265:28 - a package to make it even easier to do
265:31 - everything
265:32 - so we'll take a look at using that
265:34 - instead
265:36 - so this is the package here
265:38 - it's called lighthouse graphql passport
265:40 - auth
265:42 - and
265:44 - let's go ahead and use this
265:46 - so let's just compose or require it
265:59 - okay
266:00 - next is to add these into your env file
266:04 - so let's do that
266:08 - just put it down here
266:12 - and the client is two and the secret
266:15 - is in our rest client
266:17 - so it's just
266:19 - this token
266:21 - sorry not this token
266:24 - let's token
266:27 - okay
266:30 - is that right that's the entire one yeah
266:32 - okay
266:34 - and
266:35 - that is basically it this this exposes
266:39 - some graphql mutations and queries
266:43 - just like how we would do in rest so let
266:45 - me show you what i mean
266:47 - so
266:48 - you can publish the config if you want
266:51 - if you want to override the defaults
266:54 - and here's what's inside the config but
266:57 - the defaults are fine
266:59 - so it exposes these new mutations so log
267:04 - in refreshing token
267:05 - logging out
267:07 - forgot password and update forgot
267:09 - password
267:11 - and up here are the types for them the
267:13 - types are required
267:15 - so an input is a new graphql type i just
267:19 - learned about using this package
267:21 - so an input just sort of groups together
267:24 - inputs that you need so for example this
267:26 - login input
267:28 - just groups together the username and
267:29 - the password and it's just sort of a
267:32 - cleaner way of passing in inputs into
267:34 - your mutations
267:36 - so i'll show you what i mean when i do
267:37 - it
267:39 - so the login
267:42 - is of type
267:44 - login input so it requires
267:46 - a username and password and it returns
267:48 - an auth payload so it's going to return
267:51 - this stuff
267:52 - which is exactly what's returned in
267:55 - here
267:58 - and this is the custom resolver with all
268:00 - the code
268:02 - so let's go ahead and try to log in and
268:04 - see if we can get an access token
268:07 - so let's go into graphical
268:11 - and let's comment this up
268:14 - and let's make a new mutation
268:17 - mutation okay
268:20 - and it's called login
268:23 - i might have to reload this
268:26 - oh i reset the size sorry
268:30 - does that happen every time i reload
268:33 - oh man that sucks sorry about that okay
268:37 - so um
268:39 - login yes login
268:42 - and it is of type
268:44 - login input
268:46 - so yeah that input type i was talking
268:48 - about
268:48 - you're probably used to doing it like
268:50 - this so you have to pass in
268:52 - a username
268:54 - and then like this
268:56 - whatever
268:58 - and then you pass in
269:00 - a password
269:03 - um so this is basically the same thing
269:07 - it just groups them together and makes
269:08 - it a little bit cleaner so
269:10 - let me just
269:13 - copy this
269:15 - but now instead of passing in separate
269:16 - fields you just pass in one as json so
269:19 - it'd be data
269:20 - and then you have to pass in json here
269:23 - and you can put it it's online if you
269:25 - like
269:26 - the username
269:28 - is
269:30 - let's just give it an incorrect username
269:32 - first see if we get an error
269:36 - and password
269:38 - and the autocomplete still works that's
269:39 - good
269:42 - and we still want to return some stuff
269:44 - back
269:46 - so
269:47 - we're just interested in the access
269:49 - token so let's just get that
269:54 - and
269:57 - yeah there we go we get this message the
269:59 - user credentials were incorrect
270:02 - so let's go ahead and again let's get
270:04 - something from the database
270:06 - let's get someone else this time let's
270:08 - get
270:11 - emmanuel
270:14 - and paste it in here
270:19 - and the password is secret and let's see
270:22 - if we get that token back
270:24 - and there we go there's that token
270:26 - so same thing as in the rest
270:29 - but now we have this token so i'm going
270:31 - to copy this
270:33 - and just like how i showed you for
270:35 - subsequent requests in here we had this
270:39 - route here we can hit
270:42 - we can do something similar in graphql
270:46 - so i'm going to go into my schema file
270:49 - so schema graphql
270:52 - and i'm going to make a new query here
270:54 - called me
270:56 - and this is going to be similar to this
270:58 - like i said
271:00 - this right here where it just returns
271:02 - the
271:03 - authenticated user's details
271:05 - so as you can see here there is an auth
271:07 - api middleware so we have to
271:10 - do that here too
271:13 - so it returns a user
271:17 - and we're going to use the middleware
271:18 - directive
271:21 - and we're going to check that it
271:27 - is an auth api middleware
271:31 - and then we're going to also use the
271:33 - auth directive which basically does
271:36 - this this returns a user
271:39 - but this is going to check for the
271:42 - header
271:43 - so it has to make sure that that token
271:45 - is passed in through the header
271:47 - so we can do that in our graphql client
271:49 - which i'll show you here
271:53 - so let me copy this again just in case
271:56 - okay
271:58 - so
272:00 - i'm gonna
272:01 - comment this out i'm gonna refresh
272:04 - and make it bigger
272:07 - and then i'm gonna
272:09 - do that me query we just did
272:12 - before passing in the headers just to
272:13 - see if it works
272:16 - so there it is me
272:19 - and let's just say
272:21 - the name and the email
272:24 - see if we get anything we shouldn't get
272:25 - anything because we didn't pass in the
272:27 - token
272:30 - okay so we're getting the http response
272:33 - we want the json response so to pass the
272:35 - header in this program we just go up
272:37 - here edit http headers
272:39 - and let's first add the
272:41 - accepts
272:43 - is accept i think it's accept
272:47 - let's see yeah accept application json
272:51 - just grab this
272:55 - and then
272:56 - so now this should
273:02 - okay so that disappeared
273:04 - where'd it go
273:06 - yeah that's another bug with this
273:08 - program sometimes it
273:09 - when i'm in that header thing and then i
273:11 - escape out sometimes the query
273:13 - disappears
273:14 - so let's write that again
273:16 - me
273:18 - name
273:19 - and email
273:21 - so now this should result in a json
273:23 - response
273:24 - so there we go on authenticated
273:27 - so let's do one more let's send in that
273:29 - authorization header
273:34 - and the values bearer
273:36 - and token oh
273:39 - let's go up here
273:41 - it's this
273:42 - one and save
273:45 - hopefully it doesn't get rid of my query
273:48 - okay it's still there
273:49 - but now this should work and it should
273:52 - return this user's details
273:54 - and there we go
273:57 - so we've successfully mimicked what we
273:59 - did in rest but now we're using graphql
274:02 - okay let me show you the rest of the
274:05 - auth endpoints here
274:09 - so let's log
274:10 - out
274:12 - and a logout response is
274:15 - returns a logout response
274:18 - logout returns logout response and it's
274:20 - just a status and a message okay so
274:22 - let's do
274:24 - that so let me
274:28 - comment this out
274:30 - it's just a bug it won't disappear
274:34 - that sucks let me refresh it
274:37 - okay
274:39 - uh so log out so that is a mutation
274:43 - let me put it here
274:46 - mutation
274:49 - log out
274:52 - and what does that expect just a message
274:55 - so i'm passing in the token obviously
274:57 - you have to be logged in to be able to
274:59 - log out so this should log the user out
275:03 - okay
275:04 - so this user with this token is no
275:06 - longer logged in
275:11 - so the token is invalidated so this
275:13 - should no longer work
275:15 - so i uncomment this this should not work
275:18 - anymore
275:22 - okay cool
275:24 - and let's go ahead and log in again so
275:26 - i'm gonna do this
275:28 - i'm gonna uncomment this
275:31 - actually no let's not log in again
275:34 - because these next ones
275:37 - i'm not going to refresh token but i'll
275:39 - do these two
275:41 - okay so forgot password
275:44 - just requires an email so we'll do this
275:47 - person over here
275:49 - the same person
275:52 - okay
275:56 - so
275:58 - mutation
276:03 - forgot password
276:06 - and was this
276:08 - oh no that requires an email right
276:12 - yes
276:14 - so data
276:18 - email
276:19 - and it returns a message
276:25 - and the email is this person
276:32 - so before i do this let me set my email
276:35 - driver to log
276:37 - just so we can see it
276:40 - so where's my email
276:44 - sorry it should be mail
276:46 - yep so let's change it to log
276:51 - okay so let's try that this should work
276:53 - hopefully
276:55 - and we should see the email in the log
277:00 - okay so this
277:01 - it's saying this error because we have
277:03 - to
277:03 - set up the
277:05 - auth scaffolding so php artisan
277:08 - route
277:09 - sorry
277:10 - make
277:12 - off okay
277:14 - let's try that again
277:17 - there we go we have emailed you your
277:18 - password reset link
277:20 - let's look for this in the darebell.log
277:24 - should be this one
277:26 - scroll all the way down and there it is
277:28 - right there cool
277:31 - and let's take a look at the last one
277:33 - where we can actually update our
277:34 - password
277:35 - so update forgotten password
277:39 - and we need all of these fields okay
277:43 - and then after that we'll log in again
277:44 - with that new updated password
277:48 - okay so
277:49 - am i doing
277:51 - update forgotten password
277:54 - just comment this out
277:56 - let's do another mutation
278:02 - update forgotten password
278:05 - that is type data
278:08 - and then
278:10 - we need all of this stuff
278:13 - so the email is
278:15 - okay
278:18 - the
278:19 - what's next
278:22 - token we can see that in
278:25 - here
278:27 - so it should be this
278:36 - okay next is
278:40 - the new password sorry
278:43 - password
278:45 - and it's a secret
278:47 - to
278:49 - and the next one is password
278:52 - confirmation
278:54 - secret
278:56 - to
278:58 - and i think this requires something
279:01 - just a message again yep
279:04 - and hopefully this works give it a try
279:08 - there we go your password has been reset
279:10 - so now
279:12 - if we log in again
279:15 - up here
279:18 - this should not work because secret 2 is
279:22 - now the new password
279:23 - so let's see what we get
279:25 - awesome incorrect but if we do this
279:30 - and there we go cool
279:34 - so there you have it guys we've managed
279:35 - to use this package to recreate the
279:38 - functionality of passport and everything
279:40 - needed for authentication in graphql
279:43 - so you might be wondering where a
279:44 - register is we actually did that already
279:46 - registering is just creating a new user
279:49 - and we actually already have that
279:51 - from the first video just creating a new
279:53 - user right here
279:58 - so in the next video we'll take a look
279:59 - at how to use this token in the front
280:02 - end using view and view apollo
280:09 - i'd like to show you how you can get
280:10 - authentication working in graphql with
280:14 - view apollo
280:15 - so if you haven't checked out the last
280:17 - video we set up the server to work with
280:19 - laravel passport and lighthouse and now
280:22 - i'd like to see if we can get to use
280:25 - view on the front end to do
280:27 - authentication
280:29 - so we'll build a very basic auth system
280:32 - where we can log in and upon logging in
280:35 - i want to show that logged in users
280:37 - details so here's a very basic login
280:40 - form
280:41 - and i'm going to log in with an email
280:43 - here
280:44 - and i'm going to put in the wrong
280:46 - password then we'll get this alert here
280:49 - and then if i put in the right password
280:51 - it will redirect
280:52 - to a protected view
280:54 - with that logged in user's details
280:56 - and we can also log out here
280:59 - cool
281:00 - so yeah let's build this from scratch
281:02 - using view apollo
281:05 - okay so i have a view cli 3 application
281:08 - scaffolded out here and the only thing
281:10 - i've done is view add apollo to install
281:13 - apollo
281:15 - so yeah like in the last video if you
281:18 - saw
281:19 - we can log in using this mutation
281:22 - and we get a token back
281:24 - and then with this token we can call
281:27 - this me query and get the user's details
281:31 - back but we have to pass in this token
281:33 - through the header so the question is
281:36 - how do we pass it into the header
281:39 - so in traditional rest if you're using
281:41 - axios
281:42 - you can set headers on axios so let me
281:45 - just open up some code here which
281:48 - is from my to do series
281:50 - and let me just look for axios here
281:52 - right here so you can see i'm just
281:55 - setting the headers here
281:56 - and i'm setting the authorization token
282:00 - authorization header to bearer plus the
282:03 - token which is stored in view x
282:06 - so in view apollo
282:09 - let me just show you something here
282:11 - so there's a config file called view
282:13 - apollo here in source
282:16 - and you can see an auth token right here
282:20 - right here
282:22 - so let's search this off
282:25 - token
282:30 - it's called token name actually
282:34 - so
282:37 - okay i don't know why i did that but
282:39 - what i'm trying to say is if this token
282:42 - is set in your local storage then it's
282:44 - going to pass that with any graphql
282:47 - query or mutation that you do
282:50 - and there's actually helpers here
282:52 - that you can call after you log in
282:55 - which sets the local storage item here
282:58 - so as you can see it sets
283:01 - the local
283:02 - storage i think it's called apollo token
283:05 - that's what i was trying to show you
283:06 - earlier
283:06 - it's called
283:08 - the key in local storage is called
283:10 - apollo token
283:12 - and you have to call these methods to
283:13 - create it
283:16 - so on login to create it and on logout
283:19 - to destroy it
283:22 - so let me prove that to you
283:25 - so to do that let me just put
283:27 - a query in graphql query in the
283:31 - hello world component
283:34 - so i'm going to use this hello world
283:36 - component
283:38 - and i'm just going to make
283:40 - some data here
283:42 - okay let's return
283:45 - and i'm gonna do that me query and
283:49 - set it to null initially
283:52 - and then i'm gonna make an apollo key
283:55 - here
284:02 - and me is going to be that graphql query
284:05 - so
284:08 - um i have to import this actually import
284:13 - gql from graphql
284:16 - tag
284:17 - okay so now i can just do the query here
284:19 - with backticks
284:21 - i'm just going to do
284:23 - query
284:25 - and it's going to do this basically
284:27 - where is it
284:28 - this so me name email
284:33 - me
284:34 - name
284:36 - email
284:38 - and let's throw the id in there too
284:45 - so right now the
284:47 - local storage item is not set so this
284:49 - should result in an error
284:52 - see what we get here
284:54 - so let me open up view
284:56 - or console i mean
284:58 - okay so yeah we do get an error failed
285:00 - to fetch cool
285:02 - so yeah just ignore the websocket there
285:06 - so let's go ahead and log in
285:09 - um
285:10 - so i'm going to log in using
285:12 - this mutation
285:14 - just to get a valid token
285:17 - okay so there's that token
285:20 - and i'm going to manually
285:22 - set the apollo token
285:26 - just in the console here so local
285:28 - storage
285:29 - dot set
285:32 - and the
285:33 - key is called apollo token like in the
285:36 - config
285:38 - and i'm gonna just paste in the token
285:40 - here
285:45 - sorry
285:46 - it's set item
285:52 - okay so now if i look in my application
285:56 - let me just make this bigger
285:58 - local storage
286:00 - and for this domain there it is right
286:02 - there apollo token and
286:04 - that key so now this should work
286:10 - so if i refresh this
286:17 - i still get failed to fetch
286:19 - see if it's in here
286:22 - hello world
286:27 - it's undefined
286:30 - oh yes sorry i forgot to set the
286:32 - endpoint in the config
286:35 - um so yeah i should do that before
286:40 - so go view go to the apollo
286:44 - i'm actually going to set the web
286:46 - sockets to null to
286:49 - remove that annoying error
286:52 - set this to null
286:54 - okay
286:56 - and let's set to the end point here
286:58 - right here
287:01 - so what was the endpoint again it was
287:03 - this
287:06 - set that
287:07 - okay
287:10 - and now this should work
287:15 - okay let me remove the
287:18 - key first just to show you that it
287:20 - shouldn't work when it's not there and
287:22 - then we'll read it
287:24 - so let me just
287:25 - delete token okay
287:28 - and this should not work
287:32 - okay internal server error that's
287:34 - correct
287:35 - and let me re-add this
287:39 - and now this should work
287:43 - okay
287:44 - let's check view
287:46 - let's check hello world
287:49 - check our data
287:51 - and there i am me or not me but the
287:53 - logged in user
287:55 - so that should show you if the token is
287:58 - set then it will send it for any graphql
288:01 - requests
288:03 - okay so with that knowledge let's get
288:05 - basic logging in working
288:07 - like i showed at the beginning of this
288:09 - video
288:11 - so i'm not going to do any state
288:12 - management and i'm not going to do view
288:14 - x
288:15 - to manage state here
288:17 - but you definitely need to do that for
288:19 - any bigger application
288:21 - i just want to mention that there's also
288:23 - an alternate way to handle state in
288:25 - graphql using something called apollo
288:27 - link state
288:29 - the idea is to use a graphql cache to
288:32 - manage state and bypass view x entirely
288:36 - i'm still in the process of learning it
288:38 - so if i do i will make a separate video
288:40 - for that
288:42 - okay so let me quickly make
288:45 - two new routes and two new pages
288:48 - so
288:51 - in pages and views i'm going to make a
288:53 - login
288:55 - view
288:57 - let's just say template
289:01 - login goes here
289:04 - and let's make a login route so i'm just
289:06 - going to copy this
289:09 - and it's going to be
289:13 - login
289:18 - and this is going to be login
289:23 - okay and i think an app that's where the
289:26 - yeah the router link goes so make a new
289:28 - one
289:29 - say login
289:32 - login
289:34 - okay does this work
289:37 - all right put a pipe here
289:41 - and okay
289:44 - and let me just paste in some code
289:48 - for the login just to save some time
289:53 - i'm going to paste this in and there's
289:55 - already some view code in here which
289:57 - i'll go over
289:59 - this is the method that's called when we
290:01 - submit the form
290:03 - and there's a v model on the username
290:05 - and the password so let's set up the
290:09 - script
290:12 - so we need a username and password
290:17 - username empty
290:19 - password
290:20 - empty
290:22 - and we need a methods section
290:25 - so methods
290:29 - and one called login
290:32 - okay
290:34 - and i'm also going to paste in some just
290:37 - a bit of css so it's not super ugly
290:40 - okay let's see how this looks
290:42 - okay that's
290:44 - decent and i'm going to make one more
290:47 - route here for the protected
290:50 - area where the login user
290:52 - the logged in user's
290:54 - information gets displayed
290:56 - so
290:58 - let's say protected
291:03 - template
291:06 - protected actually it's making an h2
291:10 - users info
291:14 - and it's going to the router add that as
291:17 - well
291:19 - so i'm not going to make use of guards
291:21 - here
291:23 - but you definitely should
291:25 - what i mean by that is
291:26 - i can just manually manually go to this
291:28 - route and it will show up it won't show
291:30 - the
291:31 - logged in users details if you're not
291:33 - logged in but you can still show the
291:36 - route and you should use guards to
291:39 - prevent the user from doing that
291:41 - so yeah check out my video
291:44 - and my video on just doing it in rest
291:47 - and it's the same thing
291:49 - it's protected
291:53 - okay
291:54 - so i'm not going to put it in the menu
291:56 - because
291:57 - i don't want that to show but we can
291:59 - actually just go here
292:04 - so yeah that's what i mean if you had
292:06 - cards in place you wouldn't be able to
292:07 - go here if you're not logged in
292:13 - okay and we'll put the login route in a
292:15 - second after i finish logging in
292:19 - and i'm not gonna do any validation here
292:21 - as i'm just giving you a very basic
292:23 - example
292:24 - okay so
292:26 - here we want to perform the login
292:28 - mutation
292:29 - here
292:31 - and
292:32 - if it's successful
292:33 - we want to call that on login helper
292:36 - which sets the
292:38 - token in our local storage
292:41 - let me actually remove this because it's
292:42 - already here i'm going to delete that
292:47 - okay
292:49 - so if we go into here we can see how to
292:51 - do mutations and i'm just going to copy
292:54 - this
292:59 - let me just grab everything
293:02 - this is the entire methods key
293:06 - and i'm going into
293:08 - login
293:10 - okay so this is all of methods
293:17 - okay let's indent this
293:19 - and change it to login
293:23 - and i don't want any of this
293:30 - okay
293:33 - i also need
293:36 - this gql
293:38 - so import
293:39 - gql from
293:41 - graphql tag
293:43 - okay
293:46 - don't need any of this
293:49 - okay
293:51 - so the mutation we need is this one
293:56 - so let me just grab this actually
293:59 - and paste it in
294:07 - and we can indent this
294:12 - and let's make some changes here
294:14 - so i am going to
294:17 - accept some data
294:21 - and it is of type login input it's
294:24 - required
294:26 - and
294:28 - this i'm going to cut out
294:32 - and the data goes here
294:35 - and i want to return the access token
294:37 - and the variables
294:39 - is where i'm going to paste
294:41 - what i just cut
294:45 - and this should come from our state
294:47 - which is bound to v model so it should
294:50 - update as the user updates
294:53 - and that should work
294:59 - so let's see if this works so let's just
295:01 - see if we get the token in our console
295:05 - so that looked like it worked
295:08 - the work
295:12 - don't need this
295:15 - okay so that worked
295:18 - let's test this out
295:20 - here
295:21 - refresh
295:25 - so i'm going to use the same user here
295:33 - let's try an error case first i'm going
295:34 - to type in gibberish
295:37 - okay so it's an
295:38 - error
295:40 - is that the right error
295:42 - we'll see let's type in the right
295:44 - password
295:46 - okay so i'm missing something here
295:51 - so yeah i am missing another
295:56 - yeah so this should be
295:58 - another key so data is this
296:04 - like this
296:05 - okay
296:08 - let's give that another try
296:14 - so wrong password
296:16 - okay now we're getting the correct user
296:19 - error
296:20 - user credentials were incorrect
296:23 - and correct password we should get some
296:25 - data here
296:27 - there we go this should include the
296:28 - token
296:30 - where is it there it is right there
296:33 - so now we just have to set
296:35 - or call the helper the on login helper
296:38 - i've been talking about in here
296:41 - in view apollo
296:43 - on login
296:45 - right here
296:47 - so let's go ahead and do that
296:51 - so
296:52 - back to here we have to import it let's
296:55 - import it
296:57 - import
297:00 - on login
297:03 - from
297:04 - up one
297:06 - view
297:07 - apollo okay
297:10 - and now we can just use that or just
297:12 - called it when it's successful
297:14 - so let me just call it right here
297:18 - so on login
297:22 - and what parameters does need it needs
297:25 - the apollo client and the token
297:28 - so
297:29 - the client is just this
297:32 - apollo
297:35 - provider
297:36 - default client
297:39 - and the token is data.data.login.access
297:47 - token if you remember
297:49 - here so data data login access token
297:54 - or you can destructure it if you like
297:56 - i'll just leave it
297:58 - and i also want it to go to that
298:00 - protected route so this
298:02 - router
298:03 - push
298:04 - protected
298:10 - and let's try this again and now the
298:14 - local storage key should be set
298:17 - so
298:18 - let's refresh
298:22 - okay
298:23 - secret
298:25 - and then
298:27 - let's check the application so it's not
298:29 - in here it should be in here
298:32 - there we go let's set it right there
298:36 - and we'll work on
298:38 - showing the user's info in here in a
298:40 - second
298:41 - i just want to work on logout
298:43 - so we can destroy this token
298:46 - okay so back to our code
298:48 - let's go to app view
298:50 - and we can make a new link here
298:53 - it's not a router link it's just going
298:54 - to be a normal link
298:57 - because there's no view associated with
298:59 - it
299:01 - so
299:02 - i'm going to click that prevent and
299:04 - we'll call a logout function
299:07 - and say log out
299:09 - let's make a pipe here too
299:11 - and down here
299:14 - script
299:16 - let's make a new method
299:20 - log out
299:24 - and we're just going to do the same
299:26 - thing we did in here
299:28 - i'm going to import on log out instead
299:30 - of on log in
299:33 - there on log
299:35 - out
299:39 - and we are going to
299:41 - just call it on logout
299:44 - and the only parameter it takes is the
299:48 - apollo provider
299:50 - apollo provider
299:53 - default client
299:56 - and i want to push to the home page
300:01 - and all this is going to do like i said
300:03 - is just destroy that token in our local
300:05 - storage
300:08 - so let's give that a try
300:14 - oh sorry this
300:15 - is in the same directory
300:20 - okay
300:22 - so i am logged in right now but if i hit
300:24 - log out this should be deleted and it
300:26 - should redirect
300:28 - awesome
300:30 - okay now let's work on that protected
300:32 - page
300:34 - so yeah all we have to do is just call
300:36 - that me query and since the
300:39 - token is set that should work out
300:43 - so we already did that in the hello
300:45 - world so let's just copy that
300:48 - so i'm just going to copy
300:50 - all of this
300:54 - and then
300:55 - i'm going to
300:58 - comment it out here because we're not
301:00 - using it
301:02 - and protected
301:06 - let's just do it in here
301:10 - okay
301:11 - let's just import
301:14 - this
301:20 - okay
301:21 - let's see if
301:23 - this works
301:25 - and let me just output it
301:27 - here
301:33 - let's do
301:38 - media id
301:40 - name
301:42 - email
301:44 - and we only want to output that if it's
301:47 - set so i'll just do v if me
301:52 - and we're going to need a root div here
301:58 - okay
301:59 - see if this works
302:02 - so let's log in
302:06 - and
302:07 - okay i don't have it in there anymore
302:10 - where's my
302:13 - email there it is
302:15 - that's not it
302:21 - okay
302:22 - secret
302:25 - so there we go
302:26 - you can see it got set in here and we
302:28 - are redirected to the correct page
302:32 - with this user's information
302:34 - so there you have it guys we managed to
302:36 - build out the authentication on the
302:38 - front end using the token we got from
302:40 - the server
302:42 - and using vue apollo and its helpers
302:47 - please like
302:48 - comment and subscribe if you haven't
302:50 - already done so
302:51 - thanks for watching guys see you in the
302:53 - next one
302:54 - okay thanks bye
302:57 - [Music]
303:08 - you

Cleaned transcript:

what's up guys andre here and today i'd like to show you how you can use graphql with laravel and vue i feel like there isn't too much information out there when it comes to using graphql with larabel and vue so i figured i'd make a few videos about it and share my findings along the way so if you're not familiar with graphql it is an open source data query and manipulation language for apis it's been growing in popularity over the last few years and is said to be the replacement for rest apis i personally think it's great and addresses the issues with rest apis so in this first video we'll take a look at some examples of graphql just so you can get more familiar with it and see its advantages over rest we'll take a look at some of the packages we'll be using for laravel and in view so for laravel we'll be making use of this lighthouse php package and for view we'll be using view apollo so this is the part where i usually show you the finished product so you can see what we'll be building in the next few videos but i'm not done it yet as i'm just sharing my process along the way i am done the design part so i'll show you that and just talk you through what it's supposed to do so a very simple app as we're just trying to learn graphql it's a book recommendation site built with graphql and all these technologies we just talked about so basically you can just perform crud operations on books and we have one basic relationship where a category has many books and a book belongs to one category and we'll also have an option to add a book update a book and delete the book so we'll click on this it should go to this other screen and here we can view the link for it if you want to purchase it edit and delete so there's no concept of users in this app because that kind of just adds complexity obviously you need users for most web apps but i just wanted to get you to understand the basics of graphql so we'll be leaving users out of this demo so yeah i just want to give props to where i got this idea from so if you go to ihbooks.com i saw this on product hunt a few weeks ago and it is basically where i got the idea from uh even the design i basically just ripped and even the book covers but i figured it'd be a good app to build so we can learn how to use graphql so yeah props to the person who built this site it's also a great site with many books i've actually read so check it out if you're interested in some book recommendations okay so i want to start with a quick overview of some of the problems that graphql solves over rest and for that i'm going to be looking at the github api because github has a traditional rest api and also has a graphql api so if you go to this url you'll have access to the graphql api if you click on explorer and you do sign in with github and here's where we can play around with graphql and i also have my rest client open and we'll play around with the rest api here okay so here's one of the end points for the github rest api and it's just information about myself so if you go here here's some information about myself so with rest it's all or nothing if you only need one or two of these fields you can't do that with rest because you'll have to return everything when you make the call to the api i have seen some apis where you can do something like fields equals and you just specify the fields here that you want returned but there is no common specification across all apis and if you're going to look at a new api they might have that and they might not so with graphql you can specify exactly what you want returned so let me just erase these comments and right here it's going to erase these and you can specify whatever you want return so if i want my login is the username and name is my name and there you go we get exactly what we want and none of the extra stuff we don't need so this is a graphql query which will be doing all of our work on graphql in and if you notice the query structure is the same as the result that comes back except the result has actual data and i think that's a more intuitive way than hitting multiple endpoints and requesting data that way so that's another thing with uh graphql there's only one endpoint usually it's a post request to slash graphql but you can change that if you like but in general that's the end point with rest there's multiple endpoints and sometimes there can be confusion over which endpoint it should be when you're making a new api what's restful what's not restful with graphql there's no arguments because it's just one endpoint and this expressive query language here okay so another problem with rest is sometimes the information you need is not in this endpoint but another endpoint so say for example i was making an app that had to get the github info uh so i'd hit this endpoint because i need information about myself but then i want to show my followers and there is an endpoint here for followers so right here if i hit this you'll see my followers here so that means we have to make two ajax requests which is not exactly ideal i mean it's not the end of the world but you can see that that can start to add up if you need information across different endpoints in graphql since we have access to this expressive query language we can just specify that we want to show followers in this one request so again there's also this nice intellisense here so followers and you can specify parameters here i just want the last 10 and don't worry too much about edges and nodes which has to do with pagination i believe and i want the information for my last followers i want also their login and their name if i hit that there we go we have all the information requested here in this nice format and we can display this as necessary in our front end of our application so yeah just a high level overview of some of the advantages of graphql over traditional rest and now we can take a look at some of the specific implementations and we'll start with laravel okay so like i said earlier we'll be making use of this lighthouse package which is a graphql server for laravel it's an excellent package which has excellent documentation and works really nicely so if we go into the docs and if you go into tutorial there is a tutorial here which shows you how to get graphql up and running with a typical blog so there's also a github repo which we'll just make use of here instead of building it from scratch so let me just clone this real quick so let me just go here get clone and let's open that up house tutorial oops lighthouse tutorial and then open that in vs code so you can go through the tutorial if you want from scratch but let me just show you the essentials here so like i said it is an implementation of a blog so it's important to know the models we have here so we have users posts and comments and it's also important to know the relationships between them so users has many posts and a post belongs to a user also a post has many comments and a comment belongs to a post so let's go ahead and add some data in here and play around with graphql so there is no environment file so let me just quickly copy one and let me just change my database so i think i have one called lighthouse tutorial setup already and root route and i think just factory setup here yeah so this factory is for each of the models here and in post factory so yeah when i did this this should actually be a sentence not a title and is there cedars here no there's no cedar so let's just see if we can migrate first oh sorry i have to composer install all right that's page b artisan migrate okay so let's quickly whip up some seed data here using factories so i'm going to start with users app user and let's make 10 create and let's make say 20 posts and let's make 20 comments oops so i just made another 20 users i meant to make more posts sorry post and let's make 20 comments okay don't know why that first time didn't work let's see if all our data is in here so i think this is the right database so let's check our users a whole bunch of users posts a bunch of posts and a whole bunch of comments okay so now we have data so let's go ahead and play with graphql so back into the docs so if you go to installation if you want that graphical tool that i was showing you when i was playing with the github api you have to install this package and you don't have to but if you want that tool in the browser then you have to install it there are also desktop applications which i prefer but let me just show you this one first and then i'll show you the desktop versions that i prefer so let's install that and if we go into chrome let's see if that works so it's lighthousetutorial.test and i believe it's slash graphql or it could be graphql playground let's see okay so it's graphql dash playground to access the tool so there you go just make that bigger so now we can play around with graphql and you can see that there's already errors here because i don't think there is a query specified for user so yeah let's take a look at the schema here which is where you're going to be spending most of your time so it's under things under routes graphql schema.graphql so in here you have to specify all your types also the relationships so this is exactly like it's specified in the database the user and all the types the exclamation mark means it's required and here is the relationship so user has many posts and is using a directive here which this package makes a lot of use of directives so same for the post we specify the relationship the other way or not the other way the relationship oh here's the other way between users and posts but here's relationship between posts and comments and the same here and here is where the queries live so if you want to make a new query we have to define it in here again there's heavy use of directives which you should learn it looks weird at first but it's actually really powerful and allows you to write less code but if you don't like directives then you can just use custom resolvers and just query eloquent the fashioned way which i will show you as well so yeah back into here so this is a rex red squiggly because there is no query for user there's only posts and posts so if i change this to post then this should return there is no name for post it's a title if you want auto complete i think you can press control and control space but that is bound to alfred for me but shift space works for me and you can bring up the autocomplete and you can hit this play button or you can press command enter and there you go it brings back that one post that we asked for with id of one again you can do everything that you like in here specify more fields if you want the content there you go so let's look at the post for a second we can also get the user it belongs to and get those back so user and just specify what you want returned so we want the username and we want the user email and this is the user that created this post and also if you want to get the comments for this post there should be comments i think comments and we can just specify what we want so i think the replies what is it in comments uh could be empty let's see let's try putting the id in here which id is this oh you know why this post doesn't have any comments so that's why it's returning an empty array so let's i think maybe post of 20 maybe okay so 50 has comments and there you see it there cool so let's quickly make a query for users and let's just take what we already have here and let's just change it for users so this will just return all the users so this is the query this is the return type so graphql is typed that's what allows you to have that nice autocomplete and the nice intellisense which is great so again this is a directive and there are a lot of directives for this package which you should get to know right here this is for the one user we want to pass in an integer that's required and we want to make sure we we return just one user here this is an array of users so it can be one or more this is just one so we're going to find the user with an id of whatever is passed in here same thing with the post but for users and now this should work in our schema so let me just write another one here so query user id of one and let's just grab the name i believe so we have to refresh it first someone knows about it okay and now we should get the autocomplete sorry this should be a user array not a user's array refresh and the error is gone and there you go so so far we've just been looking at query operations which are just read operations but there's also a mutation type which has to do with any writing of data so an update a delete or a create so let's quickly go over that it's going to paste in some code again when we build out the real app we'll start from scratch this is just a demo so you have an understanding of how it works with laravel and this package so we specify a mutation and let me just fix this okay so these are the parameters it takes in a name which is a string and it's required and here are some validation rules again this package makes heavy use of directives which does look weird at first but you'll get used to it and if you don't like it again you can use custom resolvers which i'll show you in a second so email again is required and a password which it will hash using bcrypt and then it will return a user it will return that created user so let's try this out so let me just comment this out and instead of query it's going to be a mutation so let's do that mutation the autocomplete is really really nice really helps even if you don't know graphql if you just play around it will help you so create user after refresh so there you go create user and it's going to give the parameters that we need name andre what's next email andre at andre.com password is password and then it should specify what we want back we just want the say the id and the name and if we do that there we go id of 91 go into our database if i refresh and go over here sorry it should be users so there we go i think i saw it yeah right there cool so yeah let me show you custom resolvers if you don't want to use directives or if you can't do something with just directives and you need something more powerful or need complete control then you can just use custom directive so i'll show you in here so let's just name it latest post this again this can be anything it could be a really complex query which you just want to use eloquent with and you just have to specify the name and the return type and in this case it's going to return a post just one and then let's go to the docs and i think there's a guide for types no it's not types fields i think there we go custom resolvers um so here's the example i'm about to do but you can just make use of this artisan command so whatever you name the custom resolver just make sure you make a class with a capital l in this case so i'm going to paste that in phpr is in lighthouse it's a query you can do custom resolvers for mutations as well so latest post let's go to that latest post and you can also have parameters here and then you can access the parameter from within the class but in our case we don't have a parameter so in here if we did have a parameter we'll just specify it like like this so we just get it arcs and then if the name of the parameter was that you can just do that but we don't have one so and in here you can do whatever you like and you just have to make sure that you return whatever you said you would return here so in our case we have to return a post so just one post so i'm just gonna do return post all and this is called last again you can do complex query or whatever you like in here just make sure you return the right thing and that's it so if we go back in here um let me just comment this out and let me just refresh actually let's take this out and i think i named it latest post yeah so just lay this post so that should return the post and just grab the title up post not found make sure to import it so just import it here okay let's try again there you go there's the latest post but now we're using a custom resolver if you need that extra power so yeah that's the gist of it uh you'll be doing most of your work in this schema graphql you can also split this up if you like into multiple files if this starts to get bigger and yeah so that's basically it for laravel oh yeah so i personally like to have this tool as a desktop app and there are desktop apps for both graphical and graphql playground so this one's graphical playground and the other one that we used when we were doing the github api is called graphical so just search for them graphical desktop and you can download them i believe they're electron apps and graphql playground desktop you can search for them i have both of them installed already um so let me just show you quickly so let me show you graphical first so just paste this url in and you can do the same thing so let me just grab this paste that in and try it and it works cool the other one's called graphql playground and let me just grab the url again it's a url and for some reason it knows i guess it took the information from here and there you go it works i personally like this um this is more like your text editor so you can do things like command d you can move it up and down you can have multiple cursors so i prefer this over graphical but you can use whatever you like i prefer it again as a desktop app because you know we tend to have a million things running in our tabs so just organization purposes i like to use the desktop app okay so let's take a look at how to use graphql on the front end so up to now we've just been playing around on the back end and using these tools uh to to interact with graphql so how do we consume it from the front end we need to use a graphql client and in this case we're going to use view apollo which is very nice and easy to use so let's go ahead and get started and let's install it so i already have a view cli 3 application scaffold it out and i literally did not do anything to it i just did view create and that's it and it's running right here so the installation is very straightforward if you're using vcl3 you can also do it the manual way but this way is much quicker and easier so i'm just going to do view add apollo oops let me go into it first and view add apollo so it's asking if you want example code i'm going to say no we don't need a server because we already have one okay so there are the files that have changed and it's installed so let's go ahead and go into actually no this is there well let's go into our view app and i'm just going to play around here in hello world so let me just close the stuff so what i want is i want to make a data property down here and i want this populated with stuff from the back end so return say users let's make it an empty array and let's also make one for just user let's make that null okay so how do we get the information from our backend graphql into here so obviously we'd make use of these queries so let me just bring one up so let's just get something very basic users and let's grab their name and their email and not sure why this isn't working let me refresh okay there we go so we just want this information in our front end so if we go into the docs for queries so obviously we'd have to make use of this query somehow so the way to do that is to import this graphql gql thing so let me import that up here and we have this new apollo property and so let's put that right underneath here and here is where you would specify so we want to populate users with this query so we'd use gql and then we use template strings to put the query in there so in our case um we just want this so you can put query but you don't have to so i'm going to leave it out for now just so it's a bit shorter users so it's basically this basically that this query right here so we just want name and email name and email and yeah let's give that a try what is this complaining about i'm sorry this should be a method okay so let's see if this works so this should populate when the component loads so let's see if that works i'm going to open this see if you have any errors first and check review devtools let's go into our hello world app and let's check our users it's undefined so it's not working so yeah obviously it's not working because we didn't specify the endpoint so if you go into this file view apollo.js within the source directory we can specify the endpoint here so it's trying to hit this endpoint obviously that's not the correct endpoint so it's what is it again it's lighthousetutorial.test slash graphql okay so that should do it save that and see if this works so there it is loading and as you can see we're getting course errors here so let's quickly fix that so we have to install laravel cores on the back end and specify a middleware for the lighthouse package let me just install this real quick in the back end and while that's going usually you would install the the uh the package using middleware here in app http kernel but in our case we want to put it in the config of lighthouse so let's go ahead and do that let's go back to our back end and i believe it's in config lighthouse there it is and i think there's a section for middleware here yeah so it goes right here under this route config sorry uh let me just uncomment this and then we can add that package right here cool and now this should be done obviously okay and this should work now on the front end okay no more course errors let's check our view config view devtools i mean and there you go 91 users so this corresponds to our database there should be 91 users in here and there is cool and you will display this as you please in your front end i'm not going to do that okay so let me quickly do a mutation and then i think that should give you a good idea of how graphql works in our back end and our front end so let me just make a button here quickly in the hello world component up here just put it right here button sorry um say at click equals handle click say mutation test mutation and let's make a methods for handle click so i'm going to put it right after apollo methods handle click so if you look at the docs there's a section here for mutations right here so i'm just going to copy and paste this video getting quite long so you would just make use of this apollo mutate and then put in the graphql for the mutation so let's go ahead and do that real quick just gonna paste this in so this apollo mutate and the mutation i'm doing is this so i'm creating a user and i'm just hard coding some data in here and this corresponds to the create user mutation that we have here and that should work so let me just do that and then let's see if this works okay so that should have reloaded i'm missing a comma somewhere i think i'm missing a closing bracket here okay let's try it again yeah i was missing another closing brace there okay so there it is so let's test this mutation uh there's going to be no feedback let's just see if that added like it did so let's just refresh this and there you go cool i like to start building out this book recommendation site in graphql if you haven't seen the last video we took a look at using graphql with both laravel and vue and the tools available to us in this video i'd like to start building out this app and we're going to start with the back end using laravel okay so let's go ahead and make a new laravel app so i'm going to do laravel new let's call it books ql laravel and then the front end will be called booksql view alright let's open that up and let's open it up in code so let me just set up my database i already have a database made so it's called booksql laravel and it's root root okay so we need to start by making our models and our migrations so again if you look at the design we only have two models and one relationship between them we have categories and we have books and the relationship is a category has many books and a book belongs to one category so realistically you probably want to have a book to belong to many categories but i'm just trying to make this as simple as possible so we're just going to have the belongs to one category relationship so let's make our models let's start with the category make model category and dash a will create a migration and a controller which we don't need but let's create it anyways in the factory let's do the same for the book so let's open that up and let's set the relationships so start with category and i'm gonna set the guarded to an empty array just because i'm gonna make a cedar later on and let's set the relationship so a category has many books so i guess my snippets don't work anymore okay books and let's do return this has many book class okay and let's do the same for the book so i'm going to do guarded as well then do a this belongs to category class okay now let's set up the migrations and on all the fields on the book so create books table and i am just going to paste this in to save some time and then i will go through each of the fields so the title obviously the author so the image is going to be a string and it can be empty the description is just a longer form text the link is a string this featured flag is because in the design i have a featured category here uh maybe i'll design a different two maybe i'll have a hero that displays some featured books anyways that's the idea i'm not sure if we're going to use that but there is a featured boolean column there so this is the relationship with category so a book belongs to a category so we need a category id and that is a foreign key on the categories table and that's it so let's do the same for create categories table and this only has one field it's just the name of the category okay so let's see if we can migrate this okay so that works so now i want to make a seeder just so i have realistic data and the data i have in my seeder are all of these books here i have in the design maybe i'll add more later on but there is about this many and i didn't make it very very realistic in terms of the categories i just dumped like the first six in the first category and the next six the next category and the next three in the next category just so how every category has at least a few books so let's make a cedar start with the categories so php artisan make seed categories table cedar oops why is there a dash there okay and let's also do one for books and it's going to our seeds database tables heater and it's just to start with the categories and let's do the books after that and obviously i'm not going to make you watch me do this i'm just going to paste in what i have here in my other project so this is the books tables heater it's a whole bunch of books and i'm going to paste in the category staples theater and this is just a few categories okay so i have these categories and all of these books over here cool so now let's try to migrate fresh where's migrate fresh and it's also seed dash dash seed and that looks good let's see if we have data some books cool a bunch of books and some categories here cool okay so you see i also have the cover images here so i'm just going to put these in so this is the project i already did and i already have the cover images here so i'm going to put these in the public folder we're not going to use it in this video but we're going to need it eventually when we make use of the cover images so i'm just going to put it in an image folder and paste them in i guess i can't paste can i paste okay so they're all in here now cool okay now we can start using the lighthouse package so let's go ahead and install that installation composer require let's do that okay next is this publishes the default schema.graphql file which we can make use of and then we can modify it later on so let's do that okay and i'm not going to use this dev tools i'm just going to use the one on my desktop so it's graphql playground and we'll use that when we need to use it and i also want the config where's that i have to publish the config as well okay so that okay and that is published cool okay so now back to our code and the first thing we need to do is let's go into our schema graphql so that's in routes graphql schema and you can see we have some boilerplate here which we can use will not use we'll model our models after it so first thing i want to do is define our types so we'll like i said we're not going to have users in this app just to keep things simple so it's definer types we'll leave it in there for now we'll leave the user in there for now so the first thing we have is a book and this is just the field we defined in the migration so create book so all of this stuff but in graphql format so we have id and this is of type id and id is a field type in graphql and it's required title is a string it's required author string required image string not required link string not required description string not required featured boolean not required and a book belongs to a category so we have to specify the relationship here and it is a category and we'll define that right after this and it is it belongs to relationship okay so that is our book type and then the next type is category and let's do the same thing id is id required name string required and it's set up the relationship books is an array of books that's what it returns and the relationship is has many and that is it for our types so now let's start defining the queries and the mutations so um let's get our design to see how the app's supposed to work so the default view although this doesn't represent that i just want to show all the books um no pagination because that just i mean in a real app you would have pagination but again it's trying to make this as simple as possible you can see that the example here uses paginate and we won't be using paginate anyway so we just want all the books so that's the most basic query we can do so let's just do books and that's going to return a book array and that's required actually it's not required because it can be null and we're just going to use the all directive and that will return all books so let's go ahead and try this out in our graphql playground so it's books ql dash laravel booksql test graphql okay and what is it again it's books so query make this bigger that big enough one more so query um books and let's return the title there you go book was not found okay so in the config so if we go to the lighthouse config it's in config lighthouse there is an option here that says where the models are supposed to be not sure why they defaulted to app models because the default functionality for laravel is it just goes into the app folder so if we do that that should fix that error let's try again refresh it first let's try again there we go and we can do whatever we like here id what else author cool so what else do we need for our app to work we also need to be able to get the details for one book so for this view we need to make another request when we click on one and it goes here so let's do that and let's go to and we'll just copy this and we'll just change it so this will be book just one book and the parameter is the book id um later on maybe we can change this to a slug that would be more url friendly and more seo friendly and it's going to return one book and we want to find that book based on the ideas passed in so you can specify the model but i don't think we have to and let's go ahead and try that so let me just query book oh let me refresh book there we go we need an id fashion one and we can do the same thing id title author cool and if you want the category for this book since there's a relationship we can already we can do that as well so let's go category and then what's the types here we can just get the name so there you go this book by this author is in this category okay so let's go ahead and define the endpoints for categories as well so let's do that so it's basically just this but for categories so let's be categories this will be an array of categories and all this will be a category and we'll take an id as well and this will be a category okay let's try that out these this should work as well but for a category let me refresh real quick and this should be a category and obviously a category doesn't have this has a name cool and we can also do categories and name cool so that's all the categories so back to our app we want to be able to click the category and just have it filtered by those books so that's really built in since we have that relationship defined so say for example we wanted everything in marketing category so marketing is id1 i think okay it is so let's get the category first so category id one and because we have that relationship defined right here in the type the category i mean then we can get the books for this category and that's exactly what we need in our app so let's just do books and we can specify the fields we want so in our case what do we want we're going to want the name the author the cover or i can name the image and the id because we're going to click on that and we want to go to a different route okay so id uh title author and this thing i call the image so there you go we have all this information that we need which we can use on our front end when we start working on our front end what else so like i said we also have this featured category which is not really a category it's just an extra field on the model so how do we filter by just books that are featured so let's add one more here to books let's call it books by featured so like i said in the first video if you don't like directives you can just use custom resolvers but if you want to make use of directives you can do it like this so featured is a boolean as required and we want to use the eq directive and this is going to return an array of books and it can be empty so let's not put the exclamation mark and let's grab all so all the books that are featured based on this parameter coming in so right now another feature so this should return an empty array of books so let's see if that happens uh what did i name it books by featured let me refresh this books by featured and then let's grab the title it should be empty oh sorry i need the featured is true so it should be empty because none of them are featured cool and if i say false this should be all of the books okay so if i add one if i manually set one to featured or a few of them let's go to books let's say this one this one this one this one and this one and save that let's go back here and this should now have a few of them cool and again i did this in the last video and i just mentioned it but if you have some complex query that directives can't handle or if you just don't like directives you can use custom resolvers so let's say some complex query search is the parameter and it's a string and it returns an array of books and we can just use the command line uh forgot what's called it's called lighthouse query i think yep so php artisan light house query and name it some complex query so it has to be the same name as this and obviously you don't use directives here because the class will handle that okay so that goes into i think app http graphql some complex query so here is where the logic goes so you can do whatever you like in here some complex query but since i named the premise parameter search let's do a basic search here you can do this with directives as well but let's just do this return book where say app book author so this is going to do a search for the author like and let's do this so i just want to search on the argument that's passed in so i'm going to do some wild cards here and to pass into the argument here's to args and the name of the argument so we named it search in our graphql schema so we can use that and just add another percent here so it does a wild card search and just make sure to get it and this should be a search now so let's try it refresh and i'm going to do um some complex query which is actually a search search by gary i have two books in there by gary vee and let's grab the title and obviously the author is the same so title and author and let's try that app book not found slash app slash book refresh try again there we go so there's that custom some complex query which is actually just a search but we're using custom resolvers okay so now let's do some mutations uh we obviously want to be able to create update and delete our models so let's do that so back to our schema right here so there's already an example for creating updating and deleting users and we can make use of this for our models so let's start with creating i'm going to copy this and let's start with categories so let's rename this to create category and we only need a name for category so here is this so it's going to be a string it's going to be required and i also want it to be unique so let's say unique when you choose variables rule rules unique on categories table and unique on the name column so that should do the trick make sure to change this we can take the small note it should be create it should be category and let's do the same for update and delete and then we can test it out after split space here so update category so it's required the id is required and it's just a name and it is the same rules as this and we don't need this this is a category and the same for delete required category delete don't need the model okay so let's start let's try creating one updating one and then deleting one and then we'll do the same for books actually it's the same process for books it's just more fields i'll do that behind the scenes and then i'll show it to you guys working so let's try let me just put it here in the middle so it's easier to see so it is let me just delete this it's a mutation we're going to do create category let me refresh create category and create a name say new category and then we just want the id and just to say the name okay so that created a new one called new category so if we check the database there it is right there cool and what's next update category so let's change that to update and the parameter is the id so it's seven i think it's the id yep seven so let's say seven and we also need the name we wanna change it to so new category update and let's change see if that works and it did let's check the database there we go cool and let's delete the category so delete it just needs the id i think cool and we can return that so if you read the error message it says the id should be nonnull so the idea should be none no cool let's try it again refresh try again there we go seven should be gone now there we go awesome so yeah i'm gonna do the books behind the scenes it's basically the same things just more fields and then i'll show it to you guys when i'm done okay so i added mutations for creating updating and deleting books so let me just show you that it works so let's try this one first create book a new book and i'm just hard coding the category in here and returning the id and title okay so that's id26 see if that is in the database so there it is right there cool so let's update it so the next one is update so let's change it to 26. a new book changed some author changed okay let's run that okay check the database there you go cool and let's delete the book so mutation delete book 26 and that should delete it and it's gone cool so yeah i think that's all the operations we need on the back end um we might tweak things while we work on the front end and realize we missed something but i think that is all we have all the crud operations for both our models and we tested both and everything looks like it's working i like to start the front end of our graphql app using view and view apollo in the last video we built out our graphql backend in laravel and in this video i'd like to start on the front end okay so let's go ahead and make a new view app using the view cli so i'm going to do view create books ql view and let me make sure to add view router because we're going to be making use of that we need a router and let me just add view x we probably won't need ux but let me just add it anyways okay so that's done let me go into it and it's npm run serve okay so here it is i'll style everything later on in another video using tailwind css for now i just want to dump everything on the page and get everything wired up and working with our back end so it's going to look ugly for this video and then we'll make it look pretty in the next video okay so let me show you what i have in mind as to how we're going to approach this first i want to dump all the categories on the page so we'll make use of that categories i mean the categories query in our graphql and then i want to dump out all the books just all the books for now and then we can focus on getting just the books in a specific category and then we'll get routing working where we click on one of the books and it goes to this page and then after that i want to get the mutations working so editing deleting and adding a book is here and i think i'll add a new route for that too so yeah a lot of work to be done let's see if we can fit it in one video it's going to be really long but if i can get it within like an hour or so i'll leave it at one video okay so i need to add laravel cores first on the back end i did that in the first video so let me just quickly do it here um so yeah if i was running both on localhost then it shouldn't i shouldn't need to do this but since i'm using laravel valet and i'm running on a test domain then we need cores so let me just install this real quick and i need to install it on the booksql laravel site okay and let me just grab this and put it in the lighthouse config so i think i have it running here in the background there it is so i think it's lighthouse config should be right here so middleware we'll just put that in here and we should be good to go okay so back to our yeah so i just want to dump the categories so let's go to our front end and i'm going to put it in it's going to dump everything in this home view and maybe in another video we'll refactor our code into nice reusable components so let me just get rid of these two and get rid of this and this okay so let me go into the docs we have to install it i should do this after i installed the view app so just to view add apollo and that should do it okay that's done let me just add the endpoint in our view apollo.js right here it's going to be booksql laravel dot slash graphql okay and let's go ahead and finally dump the categories so if we go to queries we can import this gql thing we need to perform queries in our front end so let's do that so i'm going to import gql here and then make a query in here so i'll put it right here cool and the query we need is just grab all categories so let me go into graphql playground and do it in here first so that would be um let's get rid of this categories and we're gonna want the id and the name okay so that is the query we need so let's go back into our code and let's do just categories id name so categories id name and let's make a data state property called categories uh i'm not sure if i actually need one or if i can just put it in the apollo property like that we'll just make one we're actually not going to do it this way i'm going to show you how to do it using components in a second but just as a starting point so categories and let's make it an empty array okay oops should be returned return object okay so let's see if this works back to our app here let's see and it looks like i'm still getting coors errors okay oh okay it's gone now so that should work now let's see let's go into the home component and there are the categories cool so it does work awesome okay so like i said i want to make use of components so apollo components apollo query uh you can still do it this way if you would like but doing it this way just allows you to clean up some of your javascript and in some in this instances you don't even need the javascript and you just use this apollo query which uses a scope slot to grab all the information you need so yeah let me just grab this and let me show you what i mean so i'm going to paste this in up here and here you would you're going to separate your actual graphql query into a file and that is a good way to keep your code more organized in my opinion so i'm going to make a new folder here called graphql and i'm going to make two new folders one for queries and one for mutations and for this one specifically i'm gonna have one called this is categories so categories dot gql and all this is gonna have is our query here so let me just grab this paste this in here and save that and let's continue working on this so this would be graphql slash queries slash categories graphql and like i said this is using scope slots and if you're not familiar with scope plots don't worry too much about it this just grabs the data and it destructures it here which allows us to use it in our template so let's erase these comments and there's a conditional here and it just shows loading you can put a spinner in there if you like if it's not loaded yet but if it is we can iterate through them and display them so let's do that so we are using a category and we're going to get it from data dot categories and then we can just output the id and the name and it's also put a key in here and make a category.id and that should work hopefully let's see if it works so yeah when i was doing this i got this error and it took me quite a while to figure out how to fix it and hopefully what i did before i fixed it again and the answer to that is just to delete your node modules and try again i mean delete your node modules and npm install again so i'm going to do that so let's go ahead and do that let me just stop this and do it in here so node modules should be in there so let's do rm rf node modules and let me npm install again okay so it's done let me try running it again and let's see if it works this time okay so it looks like it did work there's some warnings there but let's see if it worked and there you go it did work it showed it and it's displaying it correctly so these warnings can get quite annoying as you write more queries so there's a package that allows you to have autocomplete for graphql in here which is really nice but i actually haven't had a chance to look at that so what i'm going to do is just add a eslint ignore file and i'm just going to add star star slash star dot gql to it and hopefully that removes the warnings so let's try again okay so it looks like it did cool so back to our code if you look here there should be a brief period where there should be a loading state and it's getting it from here and it's displaying loading when it's loading but if you look closely if i refresh there is no loading here so you see nothing there so i'm not sure if that's a bug but the way i fixed it was to use another property here called is loading and use that instead and if we do that that works so if we save that and if we refresh there you see the loading indicator before the data is load from the back end okay let me just make this a bit bigger for you guys okay so these should actually be links so let's change that so i'm not going to use a ul anymore i'm just going to use a div and for these i will use anchor tags and let's just make them go to nowhere and we add a period between the id and the name and let me just add a class here called link margin and let's put it here in the style sorry style link margin let's make it margin right well 24 pixels see how that looks doesn't seem to be auto reloading for some reason okay that's fine okay now let's dump all the books so very similar to this let's just dump all the books so i'm just going to grab this duplicate it and let's add a new query for books so first let's do it in here so it should be books and when we have id title author and image i think okay so let's grab this and put it into our books query okay and then let's put it in here the whole should the whole thing should be a link as well but we'll just put as a div and let me just remove this again we'll style this in the next video if i get through all this frontend stuff and this should be let's just dump the books book sorry this should be book data.books key is book id and let's just jump dump the book id and the book title just to see if it works and yeah does seem to work cool okay so now we want to be able to click these and have these books filter based on the category that we clicked on so first let's take a look at the query that we need for that so that would be a specific category so let me just remove all this so it'll be category and then i need to pass it an id so just grab the first one and we can get the id in the title of that category but what we want is the books for it sorry name of the category and then books and then we want id title author and image there we go okay so let's copy this and let's make a new query let's call it category singular and let's paste that in let me save that and back to our home view let's change what we have here to make use of that new one just to see if it works so instead of books let's use category and right now the category is just i mean the id is just hardcoded we obviously want to pass the id from here into the query and we'll do that in a second let's just see if this works and yeah that's not going to work because the format of the data coming back is different so let me put that back and we make another one here just underneath all of this uh let me comment that out for now let's make another one and this one leaves the category and let's look at the structure coming back so the structure is data.category.books so let's go and do that so book of data. category dot books and that should still work so we hard coded category id 1 in there so this is one so that's good so it seems to work if we change it to two here that should return everything in category two and that's cool so now let's see how we can use variables so the id is not hard coded and it's passed in so in our category graphql we can just accept variables like this so we need an id it's of type id as required and we can just accept that in here and now in our front end back to home we can accept a variables prop like this so variables equals and we can just put it in line here so id is we'll hardly close it for now and then we'll have a dynamic piece of state that keeps track of that as we click a category so let's say two or put it back to one actually and this should work and there we go back to one change that to two cool so yeah we need to keep track of the selected category so let's go ahead and do that i'm going to put a new piece of state here called selected category and let's default that to one that should still work cool but as we click on those links so these links here we want to update that selected category so where's that link right here so let's make a click handler here on click sorry it's click i am going back between react and view so okay so click is let's make a method called select category let's pass in the category category.id and down in our method let's just update that state so let's make a new section here called methods select category and that will accept a category and let's just do this dot selected category is the category that's passed in so now this should switch based on what we click so by default it's one and that doesn't seem to work let's see what's going on select category is not a function oops select category try it again let's refresh this okay and there we go it's getting a new passing in the variable and getting a new set as we click on the category cool okay so if you look at the design you'll see that we have all the categories here but we also have these two extra they're not categories but there's one for featured and one for all categories so these are separate queries from the categories so let's see how we could implement those so first i want to add those two here so let me just add those to the template so just hard code them in here outside of the for loop and let me just add a prevent here just so because if you click on this it it goes to the top of the page if you have a hash in here so let me just add that so let's do that again add link margin let's add one for all let's add one for featured and see how it looks okay so here we're passing in an id and for these ones let me describe this we don't need ids we need a whole whole new query so here's what i'm going to do let me add these for this one i'm going to pass in all and we'll do a check in that select category method and we'll check if it's either all featured and if it's not all are featured then it's just going to be an id and then we can just fetch it this way but if it's all or featured we have to use another query here so let me show you what i mean so let's go back to that method select category and we still have to do this we still want to update it but now we need different queries based on the category so if the category coming in is all then i'm going to make a new piece of state called query and we're going to hold each query in a variable so let me show you what i mean so let's make this new piece of state first called query and we will default that to a query called books query which we already have and should return all books so let me fix that in a second let me just finish this conditional here so else if category is featured then we need another query called let's call it books featured query and we'll add that in a second else this dot query equals category query which we already have but we have to set it to this variable so i hope that makes sense so let me just add these queries so i'm going to add this one because we already have it first so let me just get rid of this i don't need this anymore since we are using apollo components and what can i get rid of there yeah we don't need all of this okay and let me add we can just import the queries here so i'm going to import category query from graphql queries category query and i want to set that in our state so i can do category query and i can set up the category query or i can just leave it because it's the same name so now we can replace the query that we imported up here right here to just category query and everything should still work and it does not sorry did i name it category.query should be category dot gql sorry it should be gql okay so yeah this is not gonna work because i have to import this query as well so let's go ahead and do that this one already exists we just have to define a variable for it but books query is it's called books and that just returns all books and we can add that here as well and we might as well import this one up here that we're using already categories query and we'll use that we'll just use that instead so we'll call it categories query let's import that so right here categories query and let's use that just put underneath here and we need one more for the featured query so if you click featured we want to filter by that so i'm going to make it here books featured query books featured and let's add that here books featured query so yeah let's take a look at that sorry i had to restart my computer i was being really slow so i lost everything here so let's just test out that books by featured so books by featured i think it takes a featured let's say to true and this will just return all the books so id title author image okay so let's grab this let's add a new query books featured gql let's paste that in and let's add in the variables while we're here so it should be featured boolean required and featured is featured okay save that save this i think okay this is not going to work yet it should run but it's not going to work okay so wait i think these ones okay so right now it is will this work okay so this one doesn't work because in our template we only have one apollo query and the structure of the graphql coming back from the back end is different for each case we have here so we're going to need a conditional in the template here to check if it's either all featured or the default case or the else case is going to be a category so what is it right now where's the data so right now it's defaulting to the selected category of one which is what you see when you reload the page so i want it to default to all to show all the books so let's do that let's change this to all and then we're gonna have to change the structure of our apollo query actually i think i have it up here yeah i do have it up here so let me just use this and then we'll add a conditional around this probably not the cleanest way but again this is just a first pass so this is going to be what is this books query sorry no this is going to be query because this gets updated as we click on it as we click on these links up here and we're changing it down here yeah okay and the default is this books query okay so now we have to add the conditionals so let me add a div here do the if selected category is all then we can just do this let me just indent that and then we can do a so this case would be uh this should this is going to be the else case and i'll have an else else if case as well for the feature let me just handle this one so this will be the v else and yeah this should work but the uh feature this one should not work but all and the categories should work okay so right now it's showing all of them cool if i click on one of these it should work as well and it does cool two three awesome okay so this one's not gonna work let's just add that case in so we need grab this it's going to be else if category is featured and this is fine all right like i said there's a lot of repeated code here but i'm okay with this for now so for this it's going to be book of data dot if you look at the query it's books by featured by featured and this remains the same and i think this should work now oh you get all them featured i think i have some features in there books by featured of undefined oh yes i need variables for this so in this case we can just hardcode true because we don't want the case for its when it's false featured true let's try it again so all there we go so these are the featured ones and these are the categories so i get an error here but still seems to work i'm not sure what that error is but yeah this seems to work cool okay so next i want to work on routing here so i want to click on one of these books and then i want to go to this dedicated book page so let's go ahead and do that so let me make a new view called let's call it book and let's just just copy this and just call it this is a book page okay and let's set up the route for that so if we go into router js right here let's make a new one we'll just duplicate this and we'll call it books and then the wild card is going to be id and we'll call it book and book.view okay so that should work so book slash one okay so let's make a link here for these books um let's do that so back to our home view let's just add a link here so now it has to be a link so change this to that actually not a anchor we're going to use a router link and it's going to go to these template strings here slash books slash book dot id and we have to do this for all of these cases here so let me just do it like this didn't close it properly router link and the same for this case router link okay let's see if that works it does so let me just wrap these in divs so they're block level elements and so they're on their own line same with this and this one too and that did nothing oh sorry i meant to wrap this within a div is that what i meant to do i think so let's try um so yeah let's try wrapping this in a div okay there we go okay so no i didn't mean to do that i just meant to leave this as a div and have the router link here so let me just undo these changes back up okay so that should be back to where it was before and yeah i want the router link around here so it's going to be a router link let me just put this at the end and it's going to be i should just copy it two equals slash books slash book id okay so yeah that's what i want so let's just make sure that works cool effects like it okay it goes there and let me just make sure i put this on these ones as well okay so now that we're here we might as well add the image and the author name in here so i'm going to do that in here so let me add the author first uh book author okay and let's add the image so image let's do that a bit so this would be cover image and let's find this and i'm going to use a template string here and in the back end if you remember let me show you the database we have the image just the name of the file and what i should have done is just have the full path in here so we can just grab it from the back end and just spit it out on the front end so i'll probably make that change behind the scenes but for now i'm just gonna hard code the actual url here so it's books ql image slash and then book.image so yeah again you should store the full path on the back end but i'm not going to do that here i just want to say it working okay so there it is and there's the rest of them cool okay so i am going to copy this and do the same for these two okay so now there should be images for all of these okay featured marketing cool and all the categories awesome cool okay okay now i would need the book information as i click on this and here we want to make another request to the back end to grab the book information here and we have the id in the url here so let's go back to our book component and to get the id all you have to do is this uh route params id i think this is a dollar sign so let's see okay there you go and if i change this cool so yeah all we have to do is just grab an apollo query here similar to this and just display the book information so i'm going back here let me remove this let me just indent okay so query is going to be let's just go back to the require syntax and it's going to be graphql queries book dot gql so i don't have that defined yet but that's the one that just gets one book and that goes here like that and we also need variables and the variable is just going to be the route param so it's going to be id is route.params.id and let's take a look at the playground to see how to structure that query so we just need a book that's going to be book pressing the id start code 1 and id title author and we probably need all the information here since we're on the book detail page but we'll just return what we need here book author image what else do we have here anyways let me check the database so yeah let's just return everything here image description link featured description link featured and we want the category we're going to need this later on so there's a category yeah it's category and we need let's grab the id and the title okay sorry this is name cool so yeah let's just grab this and let's make a new query for just book let's paste that in and let's add the variables or the parameters that we need so id is type id required and here instead of hard coding it will put in the id oops id okay so that looks good and down here so we no longer need a v4 since it's just one piece of information coming back so it's just going to be let's see is it data yes it's gonna be data dot book dot whatever so data.book.title and data.book.author and you can put in the rest of the stuff we'll add this when we style it but let's put the image in here as well so image source is again i'm gonna hard code the url but you should store this on the back end as a full path booksql variable test image slash data.book okay book cover close this out and let's see if this works so it does work awesome yeah so it works for all of our books here and let's go back to the home page and see if clicking it works awesome so yeah i thought i could fit all of this into an hour but this is already pretty long so i'm going to stop it here so we have all our queries done which takes care of reading the data but we still have to work on the mutations so if you look at our design we can edit and delete a book from here and we can also add a book from here and there's also crowd operations for categories but we'll just be focusing on the books here i like to continue working on the front end of our graphql application and more specifically i like to work on mutations so in the last video we got most of our queries working so we have the ability to display all books featured books and books in certain categories here and we also have a routing so it goes to a specific book and shows the details of that and now i'd like to work on mutations so if you look at our design you'll see that there are links here for editing and deleting this specific book and there's also a link here for adding a book so let's start with adding a book and then we'll work on creating and deleting i mean updating and deleting after so back into our home view let's go all the way up here and let's just put a link here let's make it a router link and we are going to make it go to books create books that's great so let me just put that in the router so i am going to duplicate this one and i'm going to put it up here so it takes precedence over this one so books create our let me name it books add that kind of sounds better because you're not creating a book you're adding a book so let's name it add book and let's name it add book view okay let's make a new component here for adding a book view and let's just put something in here form for adding a new book goes here okay and let's see if this works and i don't think i have my app running i do have it running so where is it oh i forgot to put something in here add a book so there it is okay did i change this i think i forgot to change it books ad sorry books ad so let's try that again so there we go okay so i'm just gonna paste in a very generic form here for adding a book and all the fields of a book just so you don't have to watch me add the form fields because that's going to add a lot of time so let me just do that a few moments later okay so here's what i added it's just a basic form and there's nothing view specific here yet and there's some basic styles in here so it doesn't look too ugly it still looks very ugly but there we go and these categories are hardcoded as well okay so let's start making this dynamic okay so the first thing i want to do is populate these with the correct categories so let's go ahead and grab some code from here so the one with the categories let's grab so let's grab this apollo query and let's go back to add book let's paste it right underneath here so underneath this form group and let's remove this and let's just list the categories here so let's put it as a div take off this href and let's get to the correct query so we already have this it's uh this is required in and add slash graphql slash queries slash categories jql and let's remove this click handler and the class and if i did this correctly this should show the categories in our book view and it does cool so we want this but we want it in the drop down so let's just replace this div with a select because that's what we want we just want to copy this and each one of these is going to be each one of these and the v4 so we'll change the option and we will add a value here the value is category.id and in here it's just going to display the category name so this should work now let me comment this out or just remove it i'm gonna take this move it in there and this should now populate the categories and it does cool okay cool okay so now i would like to add a v model to all of these fields and just hold them as state in this component because we eventually have to submit this to a back end so let's go ahead and do that so let's start with this the model equals title and i'm going to do the same for all of the fields this one is author this one is image and obviously this is going to be some sort of image picker component or like a file uploader but that's out of the scope of this tutorial uh description v model description link link featured featured and for the select we can put a category here and now let's make some state script data turn so let's just put everything we just defined so title author image description link featured will be false by default and the default category is just one okay let's see if this works okay so we're not going to see any changes here but if we open dev tools let's see if this reacts to changes let's go into our component and change does this change it does cool author image description link featured works this works awesome okay now let's work on that create a book mutation so let me go into graphql playground first and let's try it out here so it's gonna be mutation i think i have one called createbook and this takes in the id oh no no id just uh whatever parameters you need to create the book title new book author and all the other fields okay so here is the mutation so let's try this up okay so that created a new one called new book let's just double check the database so it should be number 25 and there it is cool and it added everything we specified in the query okay so we can copy this and let's go ahead and make a new query under mutations new mutation i mean let's call it ad book or create book i'll name it ad book but the actual mutation is called create book uh yeah just get your names right great book so let me just replace these so i'm gonna put a bracket here oops i want it here and paste that in and then i'm going to replace that with variables okay and now let me just replace these with the variables okay so now back to ad book let's make a new submit handler on the form where's the form here it is at submit.prevent let's call it adbook and let's go ahead and make a method methods add book and let's just see if this works okay add book adding book and let's go into the documentation and take a look at how to do mutations so let's grab this so this this apollo mutate so it's all of this i think it's all of this so it's pretty long and a lot of stuff we don't need so let's just work with this see if it's the right indentation so this closes this okay don't need this okay so we don't need any of this don't need that but we do need the variables and let's go ahead and just import this instead of using this gql thing here so let me this and we'll call it create ad book yeah it's called ad book and let's import that up here just like we did in the last video so import add book from graphql mutations add book dot gql okay oh sorry this goes outside and this can be add book and the variables so let me just grab everything in here see if we can just do this and see if we can work some magic here copy that and say this dot let's add okay i think that is it let's see if i did everything correctly so any errors no errors cool so if you're curious about what this web socket is it has to do with graphql subscriptions which is a feature of graphql and i haven't explored it yet in the lighthouse package but i think this is what this websocket error is coming from where this websocket air is coming from so just ignore it for now okay so let's see if this works so this is what happens when it's successful in this then callback after the promise resolves so we just want to console.log the book that is added and in our query we're just returning the id in a title okay so let's try this say great book great author and the image is going to be broken like i said it's just a text field so just make sure this image exists or it's going to be broken this is the description same with the link just make sure you add a proper link see if this works and let's see if this works so it should be two category id two if it works so it looks like it did work awesome so there's the data coming back it's just the id and the title and just to double check we can check the database and there should be a new one in here and there is awesome and two is correct for category id and everything else looks like it worked so what do we want to do when the promise resolves so we want to clear this information or in our case we just want to redirect back home so let's do that so let's just do this router push and let's just go back home so one more time one more author image i'm just gonna type gibberish featured biography so now this should redirect to the home page and it does see if it's down here and there it is cool and let's check the database just to make sure it should be in there 27. there it is cool okay so now let's work on editing a book so we go into one of them and then we want to be able to edit this book so we want a link in here so let's add that link first so let's go to book and just underneath this let's add two links here let's just say edit and delete and it's both give them a class of what i name it i think of link margin just to give it some margin on the right and see how this looks all right let's put that in a div let's just wrap it in a div like this cool okay so now it's on the bottom awesome so let's start with editing so let's go into our router and make a new one for editing so i want it to be box id slash edit books id slash edit and let's name it edit let's name it edit book okay and i'm gonna i'm gonna duplicate this one because we're gonna be reusing a lot of the logic here duplicate let's call it edit book and say edit book let's change this to edit book and down here let's change it to edit book actually no that was the method right yeah and let's change this one to update book and we will import that and we have to make that new mutation and changes to okay so let's first again play around in the playground and let's check out how this works so i'm gonna paste that in because it's very similar update book but now we need an id so let's update the one we just created or the one we created in here so 25. and let's say new book changed andre changed image changed changed amazon changed description and featured false category 2. and we just want to return the id and title see if this works i think it's called update book so it did work let's see if all that stuff changed in the database 25 so you saw all of that changed cool so let me grab this and let's do the same thing say update book let's paste that in and let's add all the parameters in here so we need all of this stuff let me just do this okay and let's be a dollar sign here they are mostly strings so let me just do that and i will edit this id this is required this is required these are not required this is a boolean and the category isn't it required okay and same for this change this oops just add the variable like that and that should do it update book update book okay and let's give that a try so right now it is not going to populate it with the information that it already has um we'll do that right after so it should go to 16 slash edit we'll put the link here let me just put that right now so edit book and book this should be a router link two where's it slash books slash id slash edit so they should be book dot id okay does that work oh what's wrong data.book.id okay okay so yeah like i said this should show the information about the book but we haven't done that yet i just want to check that it does update but i think i forgot something here so in our update book so we have the id here but for editbook we don't have the id here as state actually we don't need it as state but we do need it when we're passing it to the mutation so let's just add that id is this dot route dot params dot id so let's save that and let me just go to one that i created down here just so i don't edit one the ones that has a proper image so this one edit okay so title is 27 since that's the id author change and for this stuff let me just do this let's make it asdf for all of them featured and science and what did i do after i just oh it's gonna go back here i don't want to do this let's just see if it works and seems like it did work there you go 27 let's check the database there you go so added all that i mean it updated all that and everything seems correct so where do i want it to go after we go in here we edit it i want to go back to the read page so instead of this we just wanted to go to slash books slash this route.params.id okay but yeah like i said we want this information to be populated as we hit edit so this has to be populated with the correct information so we already have a query for that and we already did that in the book view so let's do something similar so let's import book from let's grab this queries book dot gql and instead of using the apollo query component i'm just going to do it the original way where we just use that apollo field here because i need to do something after it is successful and i don't think there's a way to do that with the component so let me show you what i mean so if you go into the api reference there is the example i will show you in here so this result hook is what i want to make use of so this is this code is executed after a successful query and i need that because i want to update the state once we have a successful query so let me just grab all this and remove what i don't need later okay so i'm gonna put it right here okay so so let's make a state to hold the book so i'll put in here and it'll be null by default and this is what we want to populate book and the query we already have imported up here so we want to be booked so we can remove this and variables so we have to use it this way is the correct way if you look at the original example over here it is just where's variables variables yeah it's just a an object here but we have to use a method and i'll tell you why um as i write the code so i tried doing it this way originally and it didn't get the route parameters which we need because that's the variable we need so let me just show you what i mean this that route that perhaps so you have to wait for the route params to be available and this is the way to do it let's do that and the variable we want is the id and it'll be this that route that params.id so yeah like i said if you just did this like this then it wouldn't work the route param won't be available so you have to use this method okay so we don't need this but we do need this result and we don't need any of this other stuff and i don't think i need this okay so all i want to do here is just update this state over here just so this can this information can show here in the template so i just want to do this that title equals so it's going to be data.book.title and i want the same for the rest of the states this is going to be author this will be um image and category is going to be a bit different it's just going to be data dot category dot id because that's the way the data's coming back so if i did this correctly this should work hopefully and it does cool so as you can see the data is populated with the correct information so which one is this this is number three so if i were to change this in the back end this should update number three sapiens changed and let me just save that if i refresh this it should be reflected there cool so one more test here to see if this works i don't want to change this one because it's going to change the image it's changed let's make it not featured and let's make it go to biography update book they should go back to the view page it does and it looks like it worked check the database refresh there we go awesome okay now let's work on deleting and that should be it so i want to delete this and then i wanted to go back to the main page with this deleted so let's go ahead and do that so let's go to our book dot view it's right here and let's add a script here we have to import that delete query delete book mutation i mean so import we'll make this in a second delete book from graphql mutations delete book dot gql okay let's make that late book and let's go to graphql playground and check out how to delete a book so it's just mutation you need the id and that's it i think oh sorry delete book you need the id let's delete the last one here 27. and that's it we can return the id of the deleted thing and even the title if you want and that should be gone cool so let's grab this let's paste it in here should be an id required and then id is id okay back to book let's put a click handler on this the delete link let's do prevent so it doesn't scroll to the top of the page so delete book and let's add a methods in here delete book so this dot apollo dot mutate mutation delete book and variables we can just do it the normal way so id this dot route the params dot id and then then smooths up data just going to log it and let's go back to the home page so this router push home and that should do it see if this works okay so let's go home and it's deleted the last one let's refresh this let's go all the way here let's go to 26 great book okay let's delete it okay that looked like it worked 26 should be here okay it's still here okay so it is still here that's because it's cached so if i refresh this should be gone so yeah we have to handle that case let me just show you the database should be gone um i don't really do too much research or i didn't think about it too much of how to solve that issue of caching we obviously want caching if it was like a real app because that would save hitting the database but for this case i just removed caching completely which is not ideal but it does work so i think it's called fetch policy so if i change this to no cache that is not gonna cash at all no cash so let's try it again let's delete new book changed delete and that should be gone it is gone awesome it should be out of the database too awesome so there you have it guys we've done a lot of work here on our front end and now have complete crud functionality for all of our books so a few things i would consider if this were a real app the first one would be so remember when we did categories here this is just happening in the browser say for example you wanted to send a link to someone with the specific category selected that wouldn't work so what i would consider is adding a route to save the state so that would be like categories slash four as we click this and then you can send this off to someone and that would preserve the state so that's one thing i would consider doing another thing i would consider doing is using nuxt for serverside rendering mainly just for seo if you care about seo and it also makes routing slightly easier so that's another thing i'll consider using next and yeah i think that's it for now i'd like to style our graphql app with tailwind css you've seen the design throughout the videos already so let's go ahead and get started so there's the design we'll be recreating and yeah let's get started so let's go to tailwind the docs and let's install it so npm install taylor and css okay next is to create a tailwind config so just do this command and we'll name it tailwind.js okay win.js okay next is to create a css entry point so let me just grab this and let's put it in let's put it in assets let's put in here just call it main css okay what's next next we can just paste this into our post css.config.js let's do that i think there's a post css config.js there it is so let me just do that okay all right and then that's it so let's remove our styles here the default styles i think it's an app view so there's some default style here so i'm going to remove all of this and i'm going to import our main css so source equals dot slash assets main css i believe and then let's just see if this works um let's just put something here p dot pg blue text white lorem 20 okay see if this works and i think i forgot to change this so it's not tailwind.js okay so there we go there is tailwind working and we can start okay so the first thing i want to do is change the font so the font i'm using in my design is roboto so let's import that and use it so i'm going to go into app view actually now i'm going to import it in here so i'm just going to paste in the import from google fonts and i'm using just the regular weight and the bold weight and now in our app view i can set the font stack here um font signs let's make it antialiased as well and let's make everything black let's make sure to update the font stacks it's right here so let's put rubato on top okay or i can just move this up that's fine okay now i think it's using roboto let's double check it is not i'm sorry this is supposed to be class okay that should work now okay that looks like roboto awesome that's roboto cool okay so let's start with the header here or the nav so let's do that okay let me just remove this and will you make use of this so i didn't have and we'll add a class and it's going to make it bg purple dark i'll just use tailwind's default colors and i want a container here so the whole thing is constrained within a container and tailwind does come with one but you have to uncomment it in the tailwind config container so yeah i want to center it and i do want some padding so let me uncomment that and let's put these within a within a container okay and let's see how this looks okay cool so i'm gonna want the logo here and then these two on the right so let's make it flex right here flex i want items center so they're vertically in at the center and justify between to send them to the left and the right let's add some padding so now the first flex item is going to be the logo so let's add a new container for that logo here it's link and i wanted to go home so we'll do that it's an image and i already have it in here so svg let's do slash assets slash logo.svg and we'll do logo here and then the second flex item is going to be these two so let's wrap it in a div and let's see how this looks okay looking pretty good let's just fix these so i'm gonna do this class equals so i want to be white and i want to have a hover just of a change of color when you hover so let's do text gray light when you hover over it and i want some padding on just this one okay it looks pretty good and i want to remove the underline first okay that pipe is right here and i want to remove the underline on all of the links so we'll do it in here so we'll just add it after this a text decoration none cool okay now let's move on to the next section which should be the hero so this part over here and it's within a container as well but it has a great background so we have to do the same thing so let's do that so i'm going to put it in home because it only appears in home so let's just put it up here let's make some roof right here okay i'm gonna name it hero i want some bg gray light and i want the margin bottom of 24. and then this is where the container goes and just put some stuff in here see how it looks okay looking good and again i want to flex make it a flex container and then this will be one item and this this will be the other item and i can justify content space between so let's do that so it's going to be flex item center justify between and let's give it some padding so now the two flex items should be the first one on the left is where the where this goes so let's say book recommendation site built with graphql so let's make it an h1 book recommendation site built with graphql and then underneath it i'll have built with variable i should just paste this in too bad you're watching me type it graphql okay and the other flex item is going to be the hero image and i also have an svg for that and some assets it's called hero svg put the hero in here okay so let's see how this looks okay it doesn't seem to be flexing what i do around here i spelled it wrong that's why that's great okay cool i actually don't want item center here so let's move that okay so for this i don't want it to be the full width so i just want it to be like here let's add a class let's see if i can do width threefourths or something like that okay that doesn't do anything let me add a margin here just push it down a bit okay cool so i want let's try putting the width on here on the h1 and also on this so class equals width threefourths okay so that's better and let's just put a margin here after the h1 say mb4 cool and the line height looks a bit too tight here so let's do normal i think okay okay now let's add i think i have buttons here yeah so the view books and the view screencasts button buttons so let's go ahead and do that so it's going to be another section here and it's going to be flex as well and items center and let's make them anchor tags class equals bg purple dark text white i want to be rounded px4 py4 let's get a margin right and i want it to be slightly different when you hover over it so let's do however it's slightly lighter and it's going to be called view books see how that looks okay looking pretty good just put a margin after the paragraph right here say six okay and let's do the other button so it's going to have a border border purple dark border solid let's be rounded as well it's gonna be purple dark px4 py4 and hover bg purple and hover text white this one's called view screencasts okay okay looking pretty good hover works awesome okay let's continue working on the next section which is the grid of books so let me just turn on my grid here and as you can see it's in quarters so one quarter here and one quarter for each of the books so let's go ahead and do that so i'm going to go into the tailwind docs and if you just search for grid we'll just make use of this and change it to our needs so i want something with a gap so let's look for that column spacing okay so this one is in thirds and yeah just make use of this okay so where am i i'm gonna put it right after the hero so this is the hero let me just end this and let's see what we get with this this should be thirds see if that works okay so it does work cool so let's wrap this in a container cool okay this is not aligned here i think i don't need this one so let's remove this and this one as well okay see how that looks okay so now that's lined up i think yeah cool and we want quarters so let's make one more of these and then make them quarters so one third should be four okay okay looking good and i want the gap to be a bit bigger so i'm going to change this these these twos i'll change these to four okay awesome so if you take a look at the design we obviously want several books and we're going to be looping over some sort of variable that has all the books so we wanted to wrap uh so let me show you what i mean so right now if i can just keep adding more of these then it's not going to wrap it's just going to stay on the same line here we do want it to wrap so if we add flex wrap it will wrap okay that's what we want let's just add a margin bottom on them as well so for these let's just put mb say 12 or something okay it looks good however we don't want the whole thing to wrap because this first section the first quarter is just the menu and then we want these to wrap so let's make some changes here so what i'm going to do is going to have the first one to be one quarter and then the next one to be three quarters and then within that i'll have more items let's see how that looks first okay that looks good and from within here we want these items to wrap so let's add flex to this one flex flex wrap and then these ones we want to be one third each so if class equals with one third let's add that px4 and the mb12 so let's see how this looks let's just say lorem 20 or something let's add a few see if that works okay so that is looking like what we want let's add a few more see for wraps and it does so that is looking like the layout that we want cool okay so this first section is where we want the the navigation to be so let's do that so here's where the nav goes okay so let's go ahead and grab that and this is the one so let's grab this whole thing and let's just see how that looks right here let's reinvent that and let's see what we have okay cool let's make this an unordered list with some list items so here instead of a div let's make a ul and these are still anchor tags but they have to be list items so let's do that for these and the same for this one see where that gets us okay uh i didn't do the list item correctly for this one so yeah this should be a list item because that's the thing we're iterating over so we don't need this anymore but this should be an anchor tag now let's see if this works okay excellent and we also want the add book here so i think i have it down here yeah so let's just add this one too at the bottom so after this loop we just add this and let's wrap that in an li as well okay so i don't want these numbers i was just there so i can see the id okay and let's remove the bullet points so for the ul i can do class equals list reset and let's also make it a bit larger okay and if you look at the design the spacing between them is pretty liberal so let's add some margin for all of these here here i'm going to put it here oh there's already a class on that one let me just add that after so class equals amb6 let's take this out and mb6 okay cool looks good and let's just remove these purple links so we can do here on the class so let me just do it for these ones first so text black and let's also make a hover state hover text gray darkest so let me just crop copy this oh there's two there's one one and i have to add it to this too class equals this and this one too i think okay looking good there's the overstate very subtle but that's good for me okay looking pretty good okay so now let's work on the book images here so right here they should be in here and they should be looped over so let me just grab one of these from i'm gonna grab this one here so i'll take care of the different cases later on let me just try to get one working and displaying correctly so i'm gonna remove these ones and just work with just this one okay so let's paste this in and see what we get okay okay so it is not in the grid format that we want see what's going on here so we want the thing that we're iterating over to have these classes so this actually belongs in here where we're iterating over the books so let's see if that works okay so i made it smaller but still not quite what we want that's because the parent component of this should have the flex container so let's move this and here so this is the parent of this so i think this should work okay there we go so yeah there's a lot of nested divs here and yeah so that should be fine actually so let me just move the title and the author underneath so i'm going to move this underneath the book okay and you can see it's not a block element so let's just wrap this in a div okay looking better and the books images are almost the same size but you can see some of them are not the same height so we can specify a hard height on the image so here we can add a class on the image you just put h64 was what i found worked for me see how that looks okay so that looks pretty good now now everything's aligned okay and let's add just a small margin underneath it okay looks pretty good now we can work on the styling of the title and the author so it's just bolded and slightly lighter color okay so let's do that so i'm also going to move the id i don't want that i just want the title okay inside a class on this let's make it slightly bigger let's make it bold and is it a link color right now it is so let's make it black let's make it hover text gray darkest and let's put a select margin on it okay let's see if the helper works okay there's a subtle hover color change there and let's work on the author and i just want the color to be a bit lighter text gray darkest okay so that looks pretty good to me okay cool um let's also add the link right now it's just too uh it's all it's only on the title let's put it on the image as well so let's just grab this router link and we can just paste it here let's close that and i can close the router link here see if that works okay it does cool um i think this has to be block or the margin it doesn't apply there we go so that moved down slightly cool okay now let's work on getting this other stuff to work because right now we only have this case working so let's go ahead and do that so if you look down here we have vf categories all else if it's featured else it's just one of the categories and we can do the same here and we can just put the conditional on the actual apollo query so we can do this and then we can grab the other cases as well so i'm going to copy this let's put it in here and that case is what's that case v else if it's featured so i'll do that for this case let's put it in here and then let's do the last case here it's just vl so i'm just gonna grab all this and let's put a vls on this and see if this works sorry i think i put this in the wrong place this should be up here yeah up here sorry yep put that in there that should work now see okay so there we go let's see if this works now okay we have to change that but you can see that these are changing awesome okay so for featured you have to do the same thing so let's do that so featured is this one and what do we do again we added this class for the thing that we're iterating over so we're iterating over this let's add the class and then for here we added class equals flex flex wrap so let's do the same thing here class equals flex flex wrap and the thing we're iterating over gets that class see if that works cool featured okay so that's working and these work too but now these are in a different format as well so we can just do the same thing we did up here for the all category or we can just extract this to a component and make use of and reuse it down there so that's probably the smart thing to do so let me just copy this let's comment it out and let's make one called a new component called book listing and then we'll pass in the book cool let me close that and let's make that component uh we're making points book listing dot view template space that in and we're going to accept a book prop script props let's just use the array syntax it's going to be a book okay let's import that in here down here say import book listing from components slash book listing view and then we can use this in here and see if i did everything correctly okay so it looks like i did let me just refresh to make sure and it does work so we have that new book component and now we can just make use of that in the other ones so let me grab this and i'll just leave this in here so if you look at the code you'll see that in there but we don't need this anymore what is this so yeah we can just remove this and say book listing and same for this book listing okay let's see if that works so all works featured i don't know why that doesn't work why is there no image oh sorry i forgot to add the image into the component so it's here still that's why i was working in the first case so let me just grab that save that now the first one shouldn't have okay so now we can just add that in the book listing sorry about that that should work now there we go featured awesome awesome everything works and is looking pretty good now awesome i say awesome a lot okay let's quickly make it responsive not too much work here so the navigation is fine since there isn't too much in the nav i just want this to stack after a certain breakpoint so i'm going to make it i think 992 is the large breakpoint right there so we'll just work with that one okay so let's see what's going on here so up here so on mobile we want it to be flex direction of column so it stacks but on large screens we want to be flex row large screens we also want justify between and that should stack now i think and it does cool um i just want some margin on top of the image so let's do that for the image container so that is right here so on mobile i want mt say 12 let's say 10. okay that's fine and then large empty zero okay see if the normal one still works okay it is cool this looks pretty good um this we can make full width too it might look weird when it's still kind of big but you can add more breakpoints if you want so let's make it full width here so this thing right here so on large screens we want with width three fourths same with this one but with full on mobile and up with full okay cool so that looks pretty good awesome that's that and for this i just want to stack this so again it's it probably looks fine at a certain point like here you can still fit like maybe two but i'm just gonna stack it so first um remember how we had one fourth and three fourths let's stack that first so one fourth right here so large screen we want onefourth and we'll pile it up let's do that and same for the threefourths one with full large width threefourths okay so that's the actual and then we also want the same for the thirds here so do for each case let's just do it for this one sorry not this it's the categories for this case so right here large width full and that to anything okay there we go cool again that's kind of still a lot of room here but i think you'll get what i'm trying to do here so let's just put this on the other cases too let me just grab this so here and here so now it should work for all these cases let me just refresh it first so all cool featured cool oh this is the other thing we can just delete this this is all we had before and all these cases awesome so it is responsive now let me get rid of all this stuff after what's this this is the container so that's the end of it and container so all of this stuff what is this and that's probably the whole container yeah so all the stuff we don't need cool let's see if everything still works awesome it's responsive let's see if large screens don't work and it does okay let's quickly make this view work not going to make it too pretty just just a little bit i think i do have a design for it yeah let's just do something like this okay so i think it's called book view so book.view let's just add a container okay and in here is where we can style it so i'm going to add flex let's add a margin and i'm going to do a responsive at the same time here just so i can save some time okay so the first flex item i want that to be the image so let me just make a div for it and then i'll move the image inside of it and then the other flex item should have these inside of it oops and even the stuff i want inside oh yeah let me just grab these as well okay see how this looks okay and yeah let me just style this real quick so uh the title first class equals text 4xl font bold for the author we want text to excel text gray darkest let's add a margin bottom and i think i don't have the description so let's add that text lg and we can leave that and say letting normal and data book description okay see how it looks okay so i don't want this to be full with this part so let's change that so up here uh so let's do mobile at the same time so mobile i want with full but for large queens i just want to be twothirds and on mobile margin left of zero but on large screens let me have a margin too large greens empty zero and large greens ml16 margin left 16 and that's looking pretty decent and i also want a view link button here so let's do that quickly so right under the description let's add a new container let's make it like that and let's add href of data.book.link let's make sure to bind that okay and then let's make it open in a new window class equals so this is just uh the same button as on the main screen so this button right here okay let's see how that looks okay it looks pretty good and this should open the link awesome and this is pretty good too let me just add a i'm going to remove this link margin actually let's use tailwinds classes and i want a uh mid dot in between where's edit this one's edit that i want mid dot so that looks pretty good to me and let's check if response works and it does cool okay so um the edit and the create screens are the same so i'm gonna do one of them and i'm not gonna make it look too nice i don't actually have a design for that i'll work on the create one but let's just make it so it's not ugly uh so create book i think i named it ad book oh sorry that's the query add book view so let's first add a container on this let's add a margin top too okay and i'm just going to make use of the styles i already have down here so type equals text so i'm going to paste in some stuff to add some because uh tailwind and the resets remove the borders for the text areas so i just added that back in with this okay and it's gonna do label display block and that is good enough for me let me just add some spacing here create book mb4 and for all the labels so i'm going to add maybe a font bold on these class equals font bold and maybe a margin bottom of two okay that looks pretty decent so yeah you can do the same for the edit book but i'm pretty happy overall with how the styling is and yeah so let's do a final check make sure everything still works um so we can change the categories okay cool can we add a book just add something add author let's just add an image that exists so it looks decent awesome new book uh let's say amazon let's make it featured and let's put it in business and there it is right there cool let's see if edit works should work i didn't change anything there yeah you can restyle this but change update awesome so there you have it guys we managed to style our graphql application using tailwind css i'd like to deploy our graphql app to a real production server i've received a few questions on how to do deployment so let's go ahead and do that so i'll be using laravel forge to deploy the level back end and for the front end i'll also use forge but i'll also show you how to do it with netlify so i've made a few changes to get this app ready for production so let me just go over them here so the first is in the back end here i am in the git repo and let me just go to the commits and this last one i mentioned in a few videos ago that you should use absolute urls so before i just had the name of the book file book image and now i have an absolute path and i'm using cloudnary to host the images so this is probably what i do if this were a real app as cloudnary is the best service for hosting images as it offloads some of the load off of your server and is also a cdn so yeah i just changed all of these to cloudnary links and for the view end let's go into here check out the commits and so i changed the book url to instead of relative it now just getting it from the back end so that's one change i made same here and here i made two changes uh for this one i'm now using so i changed the end point to the actual endpoint we'll be using i'm going to put it to this domain because that's sort of a test domain i use and i also added a emv file so let me show you in the actual code so i added a emv.development.local file so the way this is going to work is if we're running in development then it's going to get it from the environment file but if we build it for production which we'll do in a second then it will use the correct production endpoint so here's the local file and it's just pointing at the development server okay so those are the changes i made and i think there's one more yeah i just turned off this web sockets just to get rid of those annoying errors in the console and yeah that's it so let's go ahead and go into forge and start here so i'm going to go into forge i'm gonna go into laravel ecommerce and i'll make a new one so like i said i'm going to deploy it to this domain booksql.laravelecommerce.ca so let's do that and general php laravel and public that's fine so let's add that site okay let's go into it and let's install a git repo and the git repo is tray himself slash books ql level okay install the repo okay so before i deploy it i want to make a new database because this server already has a default database for the laravel ecommerce app that's on it so i am going to make a new database so just go here database and let's make a new one here let's call it booksql and we'll add a user later on i mean right now so we can add one here let's do books books ql underscore user and this is a secret password i'm going to delete this after so it doesn't matter and can access this new books ql database we just made and let's add that user booksql user secret password and it's installing and it's done okay so i'm going to ssh into the server and change the dot env file so let's go ahead and do that so let me just ssh forge at laravel ecommerce example dot ca okay so that new one should be there and there it is right there booksql dot laravel ecommerce example.ca and there is an environment file so i'm gonna go ahead and change the database credentials to the one we just created okay so i changed the credentials there let me just quit out of here and now we can deploy it so go back into our site and let's deploy it and hopefully it works and it looks like it did work uh let's check over here so books ql dot laravel ecommerce example.ca okay so it did work i just want to quickly add ssl it's like two clicks so let's just do that and obtain certificate and that should do it okay that's active let's see if it's https now and it is cool so now we should be able to hit our graphql endpoint on this new server so let's open the graphql playground and go to that endpoint slash graphql graph ql and that should work let me just make this bigger and yeah this query should work let's see if it works oh so there's no data in there yet i have to seed the database so let's go into here and this is the app we can do php artisan db seed yes and now this should work so there you go there's all the books in our new server okay now let's work on our front end so all we have to do is run the npm run build command so let me just open up a new tab here books ql view okay and i just have to run this command npm run build and this will make a new dist folder which will package up everything we need to build for production so there you go we have this new dist folder with all the files we need and we can just use this to upload to our server so you should definitely make use of purge css to make your file size much lower for tailwind css and i actually have a video on that which i will link to below and let's just take a look at this in our code so we have a new dist folder here and we'll just be uploading this but let's just make sure that it is using not using this one this is the development one but using the production this one so laravel ecommerce example so let's just double check and search for it here okay so it's not that file it's probably this file okay so there it is so we know it built correctly so in theory before we throw this up on the server we should actually be able to run it here so i'm just going to go into the disk folder and i'm going to run my own server and i have one called i have an alias called server and it just runs a php server so i'm just going to in the local in the current directory so i'm going to do that and it's running in localhost 888 and this should work so there we go and it's pulling from the actual server let's make sure it works and it does cool so let's throw this up on forge first so i'm going to make a new site again on laravel ecommerce and i'm going to call it books so books dot laravel ecommerce example.ca not to be confused with books ql where where our backend lives so this is just a static html so the web root will just be the root which is fine and let's go ahead and add this okay it's done let's add ssl so let's go into it actually add ssl okay okay that's done so if we hit this so it should be books there should be a default page there and there is cool so if you want to see that on the server it should be here so there it is books dot laravel ecommerce example.ca and there's the stat index php so this is where everything in the dist folder goes so if you just drop it in here it should work so we can set a git repo if we want but i'm just going to do it the oldfashioned way and just ftp it in so i'm going to use my ftp app transmit and let me just open it up and there it is kind of small sorry about that i can't zoom in so it's just books and i'm just gonna think i have it here it's gonna drag it in so the dist folder i'm gonna delete this and it's gonna grab everything in this so everything in here and just drag it in okay that's done so now this should work and it does awesome so let's try so this works let's try adding a book so add a book actually let me get let me just grab the url for one of the images because i'm going to be using that so copy image address add a book new book andre's author image let's paste that in this is an awesome book link amazon featured and put it in biography at book and it should be down here and there it is and yeah it works awesome okay so let me show you how to do this with netfly it's that simple let's go to netlify and log in and all we have to do is drag in that dist folder so let me just go up one drag in the dist folder and that is it let's give it a second and i think it's done and it gave us this random domain and it has https on it already and since it's pulling from the same back end there it is it should have that new book we just added and it should be right there cool and everything still works now if you wanted to add a custom domain you can totally do that and i have a video on netflix that show you shows you how to do that so check that out if you are interested so there you have it guys we've deployed both the front end and back end of our graphql application using both forge and netify i'm not going to keep these urls live as it's just taking up extra server resources and it's something else i don't want to maintain but you saw exactly how i did it and can set it up on your own if you need to i'd like to show you how you can call graphql queries from within your laravel app so i just finished up a graphql series with laravel as the graphql server and view as the client so i was wondering how i can make graphql queries from within laravel as the client so it's the same case if you're just building a traditional server rendered app and you need to make http requests you'd probably make use of a library like guzzle or curl i want to see how to do the same but for graphql so i'll show you a few ways and a few packages to accomplish this so the first one is this package here which is specific for php and i actually have a laravel app scaffolded out here already and we'll just make a use of that so let's just composer require this okay and let's see how to use this so it says within oauth2 provider we'll do it without okay so it looks like it's instantiating it here passing in the graphql endpoint here and then here's the graphql query here and some variables and there's a response so yeah all these libraries just use guzzle under the hood because if you look at graphql queries they're just http requests and guzzle is the most popular one for php so let's go ahead and do this i'm just going to work in the routes file so i'll just work in here and paste everything in here so let's paste that in and i am going to make use of this endpoint that we did in the graphql series if you don't know if you haven't seen that i made an app a book recommendation app and this is the endpoint for that so let's grab this and it's paste it in here and here is where our query goes so this operator i actually didn't know what that was i had to look it up it's just a way to do strings but that's doesn't look right to me because i've never used it before so i'll just use normal strings and we can just close it here and we don't need this and this should should still work okay so let's just paste in this query we have here that we know works because we can see it here so i'll get rid of this paste it in and this should work so we don't have any variables so we can just leave it actually i think it will just ignore it and after this let's just tie and dump the response see if we get anything okay let's try this out okay so it looks like we get a response and let's see what we have here so there's our books right there so we can also do you can see the response is an array if you want the response to be the actual books you can just do response get data it just it makes it less nested so there you go cool so that's the first way actually let's take a look at how to do variables so first let's change this one to use the other query which has variables which is uh querying for one book so this would be yeah just passing the id say we want three this should work there we go so let's see how to do that in here so let's just change the query up here so book id is id and title author and we just have to accept the parameters in here so let's say get book we can name it i don't think you have to name it but let's name it anyways id is of type id and it's required and that should do it and the variables we have to change let's see this is hardcoded in so we don't need this one so the id is just put three in here and this should work as well there we go there's that book and there is that book with id of three so let's see how we can make use of mutations so let's quickly do a mutation here so we have one called create book create book and i think you have to pass it a title new book and author say andre and a category let's say just one so it's an int and let's say id and title okay okay so 35 is that new book we just created and we can do the same thing in our code here so let's put in the variables first so i'm going to do title awesome new book and the author is andre and the title uh sorry the category is just an end so let's say three okay now let's get the query i mean the mutation we just did here so we can just copy this and paste it in here let me just reinvent that and let's use the variables instead of hard coding here it's going to be title author and category okay and let's accept the params up here so let's call it create book as well and say title is a string required author string required category int required okay and you can change this to mutation as well but i'll just leave it as query should still work the same way and if i did this correctly this should make a new book from within our code and that didn't seem to work i think i have an extra closing brace here so yeah this one is not closing anything let me just delete this one and let's try that again so there we go create a new one called awesome new book and that's how you do mutations cool okay so let's take a look at how to use just guzzle so like i said earlier graphql queries are just basic http requests and you're just passing in json so let me show you what i mean so if i go to my rest client which is insomnia here i have the endpoint for the graphql and like i said if you just pass it some json you can you can actually do a graphql query here as well but we'll just take a look at how to do it with json so if you just pass it a query and then the graphql query in here so for example we'll do query let's do a one line books and we want the title and the author this should work i think this has to be a string as well let's see okay so let's try this and there we go so this is the response that we get when we're using graphql so it's the same thing we just have to make an http request and pass in some json with the key as query and then the graphql query in here so with that knowledge we can actually just use guzzle and just pass in some json using guzzles functions so let's do that so i'm going to make a new route here oops route call okay and it's called a let's call it guzzle and since guzzle is a dependency for this other pack package we just used we can just use it so let's do client equals new causal http client and let me paste in some code here and this is what makes the response actually i have to add the client sorry the response here response is client and it's a post request to the endpoint books ql parable.test graphql and then the second parameter is this thing i pasted in so that just some json to the request okay what is this complaining about okay okay so um let's see let's just die and dump the response actually we have to dine up the response i have to get the body and me to get the contents just so we can see what's coming back okay let's see if i did this correctly and let's hit the guzzle end point what did i do wrong here i think i'm missing an opening array square bracket here and then a closing one here okay sorry some formatting issues there let's see if this works okay so there you go there's the response for our graphql query let's test just json decode this so we can get it as an array there you go so there's our data cool and these are all the books in our database cool and we can also do the same thing we did above uh if you just want to get a specific book we can just pass in an id this is hardcoded in id1 that should work there we go there's that book and you can also do mutations if you like so let's quickly do a mutation here sorry this is a mutation yeah this is a mutation and it's called create book and it needs a title say new book it needs an author and it needs a category and we'll return that okay see if this works and there we go it created this new one awesome with id of 37. okay one more way i want to show you and that's just using a wrap another wrapper around guzzle called zttp this is the http library i prefer it just makes it easier so there is i'm looking at the tests here and there's one that lets you pass in json like this so it's going to grab this actually i have to install it first but let me just grab that paste it in let's call it zttp and let's try this out let's install it first and you actually have to do slash like this okay and let's do composer require i think it's what is it kite tail kite tails http sorry that should be a forward slash okay so that's done let's take a look here so let's put in the url here we just need one key and that's going to be query and then the value is the graphql query so let's quickly do what we did before query say books say title author close that out and that should work let's just dine dump response json and let's see if this works so let's do zttp and there we go there's our data there's all our books and we can do exactly the same thing we did in here we can pass in parameters and we can also do mutations which i won't show you because it's exactly the same as we did here so there you have it guys we've managed to query our graphql server from within a laravel app we've taken a look at three ways to do so so you can pick which way you enjoy the most i'd like to take a look at a graphql server package called graphql laravel this is similar to the lighthouse package which we used in my graphql series to build out in app they are both similar in that they are both graphql servers however they take a different approach which we'll take a look at throughout this video if you haven't seen at least the first video in that graphql series definitely check it out as i'll be making comparisons between both packages so these packages both make use of the graphql php package which is a vanilla php implementation so this graphql laravel package is more similar to that whereas the lighthouse package sort of conforms more to the graphql spec and makes use of heavy directives so if you don't know what that means don't worry we'll be going over everything in this video okay so let's get started let's install this i have a laravel app running already and i didn't do anything to it yet so let's composer required it okay let's publish the config okay and that is it okay so let's do some quick setup in that first video uh where we took a look at this lighthouse package which is right here we took a look at an example where it was a basic blog implementation so the models the models we had were users comments and posts so we'll do the same thing we'll just have users in posts and the relationship will be a user has many posts and a post belongs to a user so let me quickly set this up in this example which is a blank laravel app so let's do this quickly so let's make a post make model sorry it's making migration okay so let's just copy and paste stuff so the user has many posts so let's go to user as many posts a post let's go to post here and let's just do a belongs to relationship and like i said we won't do comments here it's the same thing same relationship between posts and comments but we'll just keep it simple okay and let's just steal the migration so it's create posts table yep so let me just grab all of this and should be a great posts there we go okay so that should do it and let me just set up my environment file i haven't created already so root root oh sorry it's a graphql variable example root okay let's migrate and hope everything works and it does cool and let me just quickly whip up some seed data i'm going to manually in the database so let's make a few users and let's make a few posts okay so i have two posts here two for andre and two for john okay so now if you take a look at the original package so let me just close these okay so remember on in the first video of the original package we spent most of our time in this schema.graphql file so there are three things or two things depending on how you want to look at it that we have to do here so the first thing we should do is define the types and these types are just the models and they have the same fields on the models and this is how they are defined and in the lighthouse package they conform to the graphql specification so all of this is the graphql specification but it does have some differences in that it uses directives to get things accomplished in this graphql package graphql level package i mean it is the same thing but everything is in php so there's more code to write so let's go ahead and start doing that so let's go into the docs and let's take a look here say create a query there's no dedicated documentation page like lighthouse has everything is in the readme here so so it says first you have to create a type and that's what we want to do so again we want to mimic we'll start with the user this okay so you have to make a new file in this folder app graphql type just makes bigger and then we have to define everything in php like i said so everything here we have to define it in php okay so let's do that uh i kind of wish this package had a cli tool to scaffold everything out so that's one improvement i think they can improve on maybe if i have time i'll look at putting in a pr okay so where does it go it goes into app graphql type and it's called user type so app new folder graph ql and type let's make it a folder type okay and new new file so user type so each type is separated into their own file whereas in this package everything is in here you can actually separate them in different files but in general everything is in this schema.graphql file so that's one difference let's just paste that in sorry i have to open php and let's paste that in okay let's take a look at this from the top all right any other errors here okay looks good okay so all your imports and the attributes and just specifying the model a name and a description this is fine and this public function fields returns an array of fields so this is the equivalent of this these are the fields and see within each field they have a type and that corresponds to this so this field has this type and this exclamation mark means it's required so to do required we have to use this nonnull function so let's go ahead and do this so we don't need this alias because the id is just id in the database so we have email which is a string so again that is this and it's not it's required here so should be required but we can add that in if we like let's add it in type string okay and there is no name here for some reason so let's add in name and let's put it above email so let's say name name is required too right yeah same so same thing name string and description is the name of the user and let's remove this is me this has to do with authentication which we won't look at in this video okay so this is just a resolver method so if you want to return something different from what the actual value of the field is then you can define a resolver like this in this format and it will resolve it here so we're not going to do that but it's nice to have that option okay so let me save this we have the type defined and the next thing we did in this lighthouse package was define the queries so we'll define the post in a second let's just define the queries first and we'll also look at the relationship in a second so here we have to define all the queries available to the consumer and the most basic one is just returning all users so let's see how to do that so back into the docs so we have the type defined and we also have we have to add the type to the config graphql which is already there by default i believe so config graphql and there's a section for types here somewhere so here's a section for queries and there's a section for types it's actually not defined so let's go ahead and do that so they have these examples here so we don't have this so i'm going to comment this up and same with well when we get to queries and mutations i'll show you that but these don't exist so we have to remove those okay so to define the types we just have to let me just grab this and it is a user type and that lives in app graphql type user type class okay so our type is now defined and now we can make a query okay so yeah it says you can use the facade we won't be using that okay so now we can define the query so let me just grab this again i kind of wish they had a cli generator and this goes into app graphql query and it's called users query so let's do that app graphql query let's make a new folder query and new file called user's query i think that was called users query okay let's paste this in and let's take a look we have so this is just the name of the query and this type let's go back to our lighthouse one so yeah this is the name so users and this type is what it returns so in this case in lighthouse we want to return a list of users and this is what this is saying so list of users so again it's the same thing it's just in php format and this arguments function sort of specifies arguments which can be confusing because this query can list all users but it can also filter them down to using an id and email and in this implementation we have them separate so we have one for all users and then we have one where you can find by an id but this one allows you to do both i'll show you in a second so after that this looks fine this is the resolver so this is where it gets the eloquent query and retrieves the users so in lighthouse we just used the all directive or the find directive and you can also use custom resolvers if you want to do it that way but here it it's more of the custom resolvers approach where you've got to specify the query yourself so this is just checking if there are arguments again i kind of think it's better to separate it out and then if there are arguments then you just find them using this eloquent query but there isn't then you just return everything so let's go ahead and see if this works i think we have to define it first in the config so yeah right here so we have to specify that this is one of the queries so let's go into our config again let's go up here and again these don't exist so let me just copy them out same with the mutation which we'll look at in a second and let's just paste that in so it's exposing a user's query here and this is where it lives and all the logic for it let me put a comma there okay so now finally if we go into our graphql client and what is called graphql variable example dot test so this is the original url i was playing with graphql laravel example.test and let me just erase this so this is oh yeah so sorry that shouldn't have brackets okay so this should work and it does cool so it's returning all the users in our database so let me show you the arguments so like i said it does take arguments and they are optional which uh should be separate but let me just show you that it works and they take two arguments and i think the id takes precedence again this should be a separate query but let me just show you so if i search for id and they defined it as a string should be an int but let's say one and then it should just return andre there we go okay let's quickly take a look at relationships because that doesn't work yet so essentially we'd like to be able to grab the posts from the user and then list that out as well so let's do that so the first thing we have to do is define a post type so let's go ahead and do that so i'm going to do a new file post type php and i already have it copied in my clipboard and it's going to paste it in so it's basically the same thing as the user type just specified for the fields of a post so posts models post so a post has an id a title and content and here's the relation which we didn't take a look at in the user which we'll do in a second but we just have to specify the type so graphql type user and they can see find it from the config and it's just this one that we have already and here's a description for it and we don't need any custom resolvers or anything like that so save that and let's define the relationship here too so i'm going to grab this for the user i mean for the post in the user so right here paste that in and the relation is posts so a user has many posts the type is a list of posts so we have to type list of graphql type and type post okay and let me just say a list of posts written by the user okay and i think i have to just import the graphql here and i think it's just graphql and i think i have that in here already sorry in the post type i mean and i do have it cool and yeah i think that's it now we have to specify the post and oh we have to do the post query as well so let me just type that paste that in as well let's make a new file here called posts query posts query dot php and i'm pasting it in but again it's basically the same thing as the users query that we did already so it is a list of posts and again there's an optional argument which i think should be separate and to resolve it you just have to post all which is the one we're interested in but if you want to pass in an id you can do that as well and now we just go into our config and let's add those so posts and posts query and add the type the type is down here post poster type and yes let's test this out save last refresh okay let's try posts and it's just let's say title okay so it looks like it does work content yep okay so there is id1 if you want everything just remove this and there are all the posts cool so let's try the relationship so we want the for posts we want the user associated with it it looks like it works and we want the username and email so there we go so this post was written by andre this one too this one's written by john and john let's take a look at the other way so let me just comment this out query users id name but we also want the post and then we want the title and that seems to work too cool okay now let's quickly look at mutations so let's go back into the documentation and let's take a look at this mutation and it's almost the same as a query except it's a mutation so let's go ahead and copy this and this one is updating the password but we'll make one for creating a user so let's copy that and this goes into app graphql mutation so let's go to that app graphql new folder mutation and what's it called okay we have to make our own say create user mutation so file create user mutation dot php space the same and let's make changes create user mutation create user so the type let's go back to our lighthouse example so here's a create user the type is just the thing it returns so in our case we want to return the created user so that's what we're doing here and the arguments are the things we need to create a user so here we have a name email and password so we don't need this id but we need name and email and i'm just going to paste them in to save some time and it's basically the same thing just we need a name and email and they are of type string and then in the resolve function is where it happens so this is for updating the password we don't want to do that we want to user create and then we want a name and that's coming from args name so this is what the user is specifying in the graphql query we want an email and we want a password but we want to make sure that the password is hashed so we do bcrypt okay let's see if this works and we have to specify this in the graphql file so there is a section here for mutations let me just copy this let's paste it in it's called create user and app graphql mutation create user mutation and i think that is it let's see if this works so let me just do it here so it is a mutation okay let's see if it appears user and then see if yeah there you go name email and password so let's try this out tony stark email tony avengers.com and password is iron man and let's return the id and the name okay so hopefully this works there we go it created a new user and if we just uncomment this you should see that in the list of users so let me just change this to users and let's get to names there we go cool so there you have it guys we've taken a look at this graphql level package so you can build out your graphql server again it is a similar package to the lighthouse package but takes a different approach and makes use of php more so i think they're both great it's just a matter of preference so you try both out and see which one you like better i'd like to show you how you can do authentication with graphql we'll be looking at doing this with the lighthouse package and laravel passport now i'm going to be assuming that you understand the basics of tokenbased authentication with passport if you don't make sure to watch my videos on this which i will link to below there's two videos so there's one for the back end where we set up passport and get auth tokens returned to us upon receiving the correct credentials and the other one is the front end where we take that token send it to the server and are able to log in so we'll do the same here where we'll first set up the back end with passport and get an auth token returned to us upon successful login then in the next video we'll see how we can take that token and send it through for subsequent requests so let's first install passport and see how to do this traditionally with rest and then we'll try to mimic that with graphql so i'm going to be starting from the project we built in the first video so if you watch that video you know we built a very basic blog implementation where we have users posts and comments and a user has many posts a post has many comments and we set up our types here in our graphql schema and we also set up our queries and we have one mutation here so yeah as a refresher here's a a query we can run there it is so yeah i started using graphical more if you watch the other videos i was using graphql playground and i've just encountered more bugs than i do with graphical so i kind of switched over just kind of wish they had a dark mode okay so let's install passport first so if you already know how to use passport you can feel free to skip this but i'm gonna do it from scratch really quickly so composer require it that is the incorrect repo sorry it's a lighthouse tutorial this one okay that's done what's next next is to migrate okay next is to page hprs in passport install and this will install our clients and we're interested in the password grant client so we are interested in this one so let me just copy this and now it says and has api tokens to your user class so let's do that user has api tokens and let's import that okay next call passport routes in your auth service provider auth service provider passport routes so i'm going to do that but i'm just going to specify that i just want the routes for password grant so passport routes and we'll just patch pass in a closure function router and we just want something like this router for access tokens okay make sure to import passport and in config auth change the api to passport config off change the api to passport okay i think that's it so yeah i think that's it so to use this again this is just the traditional way let's do php artisan route list list unexpected service provider sorry forgot a semicolon okay so let's do that again really all right let's try key generate okay so there's our route list and at the endpoint we're interested in to log in is this oauth token so i'm just going to use my traditional rest client actually let me just show you um where's the password grant so here we just have to pass in again to oauth token it's a post request pass in all these fields and then if it's correct then we should get a token back so let's go ahead and go into my risk client and try this out i'm going to make a new request it's going to be called passport login it's going to be a post request and let's set the header accept application json okay and then set the url http lighthouse tutorial.test token okay let's see if we get a response okay let me do cool that's just because we didn't pass in this information which we will do so here so we'll just pass in a multipart form and it's passing everything i said here so grant type is password id is what i copied i still have it copied see i don't let me check here okay so the id is two and the secret is this two and it's client secret i think is the next one client secret yep paste that in what's next and now it's just the username and the password so any users in our database and i think we have a whole bunch let me just user name and password and we don't need the scope okay so let's go into our database i think i have some here so yeah there's a whole bunch here we'll just pick one and i think the default password is uh secret so i'll pick javon let's copy that and let's try an incorrect password first and see if we get a proper response and we do valid credentials but if it's correct this should return a token and it does cool so in our front end we would store this in local storage or cookies and then we would make subsequent requests with this token and that should authenticate us so let me show you what i mean actually um so if you make another request let me just copy this it's a get request subsequent request paste that in but if we make a request to check out routes api sorry let me just remove this routes api and this endpoint is beha behind api slash api slash user and it's behind this middleware and it's just returning the logged in users details so let's do that so slash api slash user so there's no token being passed in yet so this should be an error i might have to pass an application json yeah i do um accept application json okay but if we pass in that token so the header would be authorization and value is bearer and then the token that's not the token token is here then this should return that user's details there we go so yeah that's the traditional way of doing it in rest and now let's do it in graphql so the creator of lighthouse actually has a video on how to do this which i followed i will link it in the description if you're curious so i did everything manually like he showed in the video and i actually had it working but then i came across someone who wrote a package to make it even easier to do everything so we'll take a look at using that instead so this is the package here it's called lighthouse graphql passport auth and let's go ahead and use this so let's just compose or require it okay next is to add these into your env file so let's do that just put it down here and the client is two and the secret is in our rest client so it's just this token sorry not this token let's token okay is that right that's the entire one yeah okay and that is basically it this this exposes some graphql mutations and queries just like how we would do in rest so let me show you what i mean so you can publish the config if you want if you want to override the defaults and here's what's inside the config but the defaults are fine so it exposes these new mutations so log in refreshing token logging out forgot password and update forgot password and up here are the types for them the types are required so an input is a new graphql type i just learned about using this package so an input just sort of groups together inputs that you need so for example this login input just groups together the username and the password and it's just sort of a cleaner way of passing in inputs into your mutations so i'll show you what i mean when i do it so the login is of type login input so it requires a username and password and it returns an auth payload so it's going to return this stuff which is exactly what's returned in here and this is the custom resolver with all the code so let's go ahead and try to log in and see if we can get an access token so let's go into graphical and let's comment this up and let's make a new mutation mutation okay and it's called login i might have to reload this oh i reset the size sorry does that happen every time i reload oh man that sucks sorry about that okay so um login yes login and it is of type login input so yeah that input type i was talking about you're probably used to doing it like this so you have to pass in a username and then like this whatever and then you pass in a password um so this is basically the same thing it just groups them together and makes it a little bit cleaner so let me just copy this but now instead of passing in separate fields you just pass in one as json so it'd be data and then you have to pass in json here and you can put it it's online if you like the username is let's just give it an incorrect username first see if we get an error and password and the autocomplete still works that's good and we still want to return some stuff back so we're just interested in the access token so let's just get that and yeah there we go we get this message the user credentials were incorrect so let's go ahead and again let's get something from the database let's get someone else this time let's get emmanuel and paste it in here and the password is secret and let's see if we get that token back and there we go there's that token so same thing as in the rest but now we have this token so i'm going to copy this and just like how i showed you for subsequent requests in here we had this route here we can hit we can do something similar in graphql so i'm going to go into my schema file so schema graphql and i'm going to make a new query here called me and this is going to be similar to this like i said this right here where it just returns the authenticated user's details so as you can see here there is an auth api middleware so we have to do that here too so it returns a user and we're going to use the middleware directive and we're going to check that it is an auth api middleware and then we're going to also use the auth directive which basically does this this returns a user but this is going to check for the header so it has to make sure that that token is passed in through the header so we can do that in our graphql client which i'll show you here so let me copy this again just in case okay so i'm gonna comment this out i'm gonna refresh and make it bigger and then i'm gonna do that me query we just did before passing in the headers just to see if it works so there it is me and let's just say the name and the email see if we get anything we shouldn't get anything because we didn't pass in the token okay so we're getting the http response we want the json response so to pass the header in this program we just go up here edit http headers and let's first add the accepts is accept i think it's accept let's see yeah accept application json just grab this and then so now this should okay so that disappeared where'd it go yeah that's another bug with this program sometimes it when i'm in that header thing and then i escape out sometimes the query disappears so let's write that again me name and email so now this should result in a json response so there we go on authenticated so let's do one more let's send in that authorization header and the values bearer and token oh let's go up here it's this one and save hopefully it doesn't get rid of my query okay it's still there but now this should work and it should return this user's details and there we go so we've successfully mimicked what we did in rest but now we're using graphql okay let me show you the rest of the auth endpoints here so let's log out and a logout response is returns a logout response logout returns logout response and it's just a status and a message okay so let's do that so let me comment this out it's just a bug it won't disappear that sucks let me refresh it okay uh so log out so that is a mutation let me put it here mutation log out and what does that expect just a message so i'm passing in the token obviously you have to be logged in to be able to log out so this should log the user out okay so this user with this token is no longer logged in so the token is invalidated so this should no longer work so i uncomment this this should not work anymore okay cool and let's go ahead and log in again so i'm gonna do this i'm gonna uncomment this actually no let's not log in again because these next ones i'm not going to refresh token but i'll do these two okay so forgot password just requires an email so we'll do this person over here the same person okay so mutation forgot password and was this oh no that requires an email right yes so data email and it returns a message and the email is this person so before i do this let me set my email driver to log just so we can see it so where's my email sorry it should be mail yep so let's change it to log okay so let's try that this should work hopefully and we should see the email in the log okay so this it's saying this error because we have to set up the auth scaffolding so php artisan route sorry make off okay let's try that again there we go we have emailed you your password reset link let's look for this in the darebell.log should be this one scroll all the way down and there it is right there cool and let's take a look at the last one where we can actually update our password so update forgotten password and we need all of these fields okay and then after that we'll log in again with that new updated password okay so am i doing update forgotten password just comment this out let's do another mutation update forgotten password that is type data and then we need all of this stuff so the email is okay the what's next token we can see that in here so it should be this okay next is the new password sorry password and it's a secret to and the next one is password confirmation secret to and i think this requires something just a message again yep and hopefully this works give it a try there we go your password has been reset so now if we log in again up here this should not work because secret 2 is now the new password so let's see what we get awesome incorrect but if we do this and there we go cool so there you have it guys we've managed to use this package to recreate the functionality of passport and everything needed for authentication in graphql so you might be wondering where a register is we actually did that already registering is just creating a new user and we actually already have that from the first video just creating a new user right here so in the next video we'll take a look at how to use this token in the front end using view and view apollo i'd like to show you how you can get authentication working in graphql with view apollo so if you haven't checked out the last video we set up the server to work with laravel passport and lighthouse and now i'd like to see if we can get to use view on the front end to do authentication so we'll build a very basic auth system where we can log in and upon logging in i want to show that logged in users details so here's a very basic login form and i'm going to log in with an email here and i'm going to put in the wrong password then we'll get this alert here and then if i put in the right password it will redirect to a protected view with that logged in user's details and we can also log out here cool so yeah let's build this from scratch using view apollo okay so i have a view cli 3 application scaffolded out here and the only thing i've done is view add apollo to install apollo so yeah like in the last video if you saw we can log in using this mutation and we get a token back and then with this token we can call this me query and get the user's details back but we have to pass in this token through the header so the question is how do we pass it into the header so in traditional rest if you're using axios you can set headers on axios so let me just open up some code here which is from my to do series and let me just look for axios here right here so you can see i'm just setting the headers here and i'm setting the authorization token authorization header to bearer plus the token which is stored in view x so in view apollo let me just show you something here so there's a config file called view apollo here in source and you can see an auth token right here right here so let's search this off token it's called token name actually so okay i don't know why i did that but what i'm trying to say is if this token is set in your local storage then it's going to pass that with any graphql query or mutation that you do and there's actually helpers here that you can call after you log in which sets the local storage item here so as you can see it sets the local storage i think it's called apollo token that's what i was trying to show you earlier it's called the key in local storage is called apollo token and you have to call these methods to create it so on login to create it and on logout to destroy it so let me prove that to you so to do that let me just put a query in graphql query in the hello world component so i'm going to use this hello world component and i'm just going to make some data here okay let's return and i'm gonna do that me query and set it to null initially and then i'm gonna make an apollo key here and me is going to be that graphql query so um i have to import this actually import gql from graphql tag okay so now i can just do the query here with backticks i'm just going to do query and it's going to do this basically where is it this so me name email me name email and let's throw the id in there too so right now the local storage item is not set so this should result in an error see what we get here so let me open up view or console i mean okay so yeah we do get an error failed to fetch cool so yeah just ignore the websocket there so let's go ahead and log in um so i'm going to log in using this mutation just to get a valid token okay so there's that token and i'm going to manually set the apollo token just in the console here so local storage dot set and the key is called apollo token like in the config and i'm gonna just paste in the token here sorry it's set item okay so now if i look in my application let me just make this bigger local storage and for this domain there it is right there apollo token and that key so now this should work so if i refresh this i still get failed to fetch see if it's in here hello world it's undefined oh yes sorry i forgot to set the endpoint in the config um so yeah i should do that before so go view go to the apollo i'm actually going to set the web sockets to null to remove that annoying error set this to null okay and let's set to the end point here right here so what was the endpoint again it was this set that okay and now this should work okay let me remove the key first just to show you that it shouldn't work when it's not there and then we'll read it so let me just delete token okay and this should not work okay internal server error that's correct and let me readd this and now this should work okay let's check view let's check hello world check our data and there i am me or not me but the logged in user so that should show you if the token is set then it will send it for any graphql requests okay so with that knowledge let's get basic logging in working like i showed at the beginning of this video so i'm not going to do any state management and i'm not going to do view x to manage state here but you definitely need to do that for any bigger application i just want to mention that there's also an alternate way to handle state in graphql using something called apollo link state the idea is to use a graphql cache to manage state and bypass view x entirely i'm still in the process of learning it so if i do i will make a separate video for that okay so let me quickly make two new routes and two new pages so in pages and views i'm going to make a login view let's just say template login goes here and let's make a login route so i'm just going to copy this and it's going to be login and this is going to be login okay and i think an app that's where the yeah the router link goes so make a new one say login login okay does this work all right put a pipe here and okay and let me just paste in some code for the login just to save some time i'm going to paste this in and there's already some view code in here which i'll go over this is the method that's called when we submit the form and there's a v model on the username and the password so let's set up the script so we need a username and password username empty password empty and we need a methods section so methods and one called login okay and i'm also going to paste in some just a bit of css so it's not super ugly okay let's see how this looks okay that's decent and i'm going to make one more route here for the protected area where the login user the logged in user's information gets displayed so let's say protected template protected actually it's making an h2 users info and it's going to the router add that as well so i'm not going to make use of guards here but you definitely should what i mean by that is i can just manually manually go to this route and it will show up it won't show the logged in users details if you're not logged in but you can still show the route and you should use guards to prevent the user from doing that so yeah check out my video and my video on just doing it in rest and it's the same thing it's protected okay so i'm not going to put it in the menu because i don't want that to show but we can actually just go here so yeah that's what i mean if you had cards in place you wouldn't be able to go here if you're not logged in okay and we'll put the login route in a second after i finish logging in and i'm not gonna do any validation here as i'm just giving you a very basic example okay so here we want to perform the login mutation here and if it's successful we want to call that on login helper which sets the token in our local storage let me actually remove this because it's already here i'm going to delete that okay so if we go into here we can see how to do mutations and i'm just going to copy this let me just grab everything this is the entire methods key and i'm going into login okay so this is all of methods okay let's indent this and change it to login and i don't want any of this okay i also need this gql so import gql from graphql tag okay don't need any of this okay so the mutation we need is this one so let me just grab this actually and paste it in and we can indent this and let's make some changes here so i am going to accept some data and it is of type login input it's required and this i'm going to cut out and the data goes here and i want to return the access token and the variables is where i'm going to paste what i just cut and this should come from our state which is bound to v model so it should update as the user updates and that should work so let's see if this works so let's just see if we get the token in our console so that looked like it worked the work don't need this okay so that worked let's test this out here refresh so i'm going to use the same user here let's try an error case first i'm going to type in gibberish okay so it's an error is that the right error we'll see let's type in the right password okay so i'm missing something here so yeah i am missing another yeah so this should be another key so data is this like this okay let's give that another try so wrong password okay now we're getting the correct user error user credentials were incorrect and correct password we should get some data here there we go this should include the token where is it there it is right there so now we just have to set or call the helper the on login helper i've been talking about in here in view apollo on login right here so let's go ahead and do that so back to here we have to import it let's import it import on login from up one view apollo okay and now we can just use that or just called it when it's successful so let me just call it right here so on login and what parameters does need it needs the apollo client and the token so the client is just this apollo provider default client and the token is data.data.login.access token if you remember here so data data login access token or you can destructure it if you like i'll just leave it and i also want it to go to that protected route so this router push protected and let's try this again and now the local storage key should be set so let's refresh okay secret and then let's check the application so it's not in here it should be in here there we go let's set it right there and we'll work on showing the user's info in here in a second i just want to work on logout so we can destroy this token okay so back to our code let's go to app view and we can make a new link here it's not a router link it's just going to be a normal link because there's no view associated with it so i'm going to click that prevent and we'll call a logout function and say log out let's make a pipe here too and down here script let's make a new method log out and we're just going to do the same thing we did in here i'm going to import on log out instead of on log in there on log out and we are going to just call it on logout and the only parameter it takes is the apollo provider apollo provider default client and i want to push to the home page and all this is going to do like i said is just destroy that token in our local storage so let's give that a try oh sorry this is in the same directory okay so i am logged in right now but if i hit log out this should be deleted and it should redirect awesome okay now let's work on that protected page so yeah all we have to do is just call that me query and since the token is set that should work out so we already did that in the hello world so let's just copy that so i'm just going to copy all of this and then i'm going to comment it out here because we're not using it and protected let's just do it in here okay let's just import this okay let's see if this works and let me just output it here let's do media id name email and we only want to output that if it's set so i'll just do v if me and we're going to need a root div here okay see if this works so let's log in and okay i don't have it in there anymore where's my email there it is that's not it okay secret so there we go you can see it got set in here and we are redirected to the correct page with this user's information so there you have it guys we managed to build out the authentication on the front end using the token we got from the server and using vue apollo and its helpers please like comment and subscribe if you haven't already done so thanks for watching guys see you in the next one okay thanks bye you
