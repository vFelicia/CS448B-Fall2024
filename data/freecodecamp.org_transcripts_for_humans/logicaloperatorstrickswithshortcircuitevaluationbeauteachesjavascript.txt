With timestamps:

00:00 - i'm going to be talking about logical
00:01 - operators and short circuit evaluation
00:04 - and then some cool tricks you can do
00:06 - with short circuit evaluation
00:08 - so first of all this is the logical and
00:11 - two ampersand signs and this is the
00:14 - logical or to pipe characters so if you
00:17 - have something like this nested if
00:19 - statement if num is more than 5 and then
00:22 - if num is less than 10 we're gonna
00:24 - console.log unicycle we can actually
00:27 - just use the logical and instead of this
00:29 - nested if statement
00:31 - so let's see that i'm going to get rid
00:33 - of this
00:36 - and this is going to give the same
00:37 - result if num is more than 5
00:40 - and num is less than 10
00:42 - console.log unicycles so just if the
00:45 - number is between 5 and 10 we can also
00:48 - replace this with the or sign or now
00:52 - it's if num is more than 5
00:55 - or
00:56 - num is less than 10. so either of those
00:59 - things could be true to pre console.log
01:03 - unicycle and all numbers meet this
01:06 - criteria so we'll always have a unicycle
01:09 - you can never have too many unicycles
01:11 - okay now let's talk about short circuit
01:13 - evaluation short circuit evaluation
01:15 - happens when conditionals use and or or
01:18 - it means that the second argument is
01:20 - evaluated only if the first argument is
01:22 - not enough to determine the value of the
01:24 - expression
01:25 - when the first argument of the and
01:27 - function evaluates to false the overall
01:30 - value must be false so it doesn't have
01:32 - to evaluate the second argument when the
01:34 - first argument of the or function
01:35 - evaluates to true the overall value must
01:38 - be true so it doesn't evaluate
01:40 - the second argument
01:42 - for instance
01:49 - so it evaluated the first one 4 is more
01:51 - than 5 but it didn't even evaluate the
01:54 - second one once it found out that this
01:56 - was false it didn't need to even
01:58 - evaluate the second part of the
02:01 - conditional so that's short circuit
02:02 - evaluation it just skips that part
02:04 - completely
02:05 - you can actually use this for some
02:07 - interesting things in javascript
02:11 - for instance let me set something up for
02:12 - you i pasted this code in here so we're
02:14 - going to set test to true
02:16 - and then we're going to create a
02:18 - function is true function console.log
02:20 - this is true var is false is the
02:23 - function console.log this is false so it
02:25 - says if test is true well test is true
02:29 - so it's going to run that function so if
02:31 - test is true it runs the function so if
02:33 - we run that yep it's going to say test
02:35 - is true but there's a way this is the
02:38 - slow way to do it or the the more
02:40 - worried a way to do it with short
02:42 - circuit evaluation there's actually a
02:44 - better way to do it that's
02:46 - a little a little better let me show you
02:48 - so in this short circuit evaluation we
02:52 - just put test and and is true so if this
02:57 - is true
02:58 - it's going to run the next one if the
03:00 - first argument is true it automatically
03:02 - goes to the next argument which can be a
03:04 - function so if test is not true it won't
03:06 - run this function
03:08 - so
03:08 - let me
03:10 - comment this out
03:12 - i'm going to run that again
03:15 - but it's still going to say this is true
03:17 - in the console because of this
03:19 - so we could we made this whole if
03:22 - statement into one line without even
03:24 - using the word if just because of short
03:26 - circuit evaluation let me show you how
03:28 - you would do that with the or
03:30 - operator okay here's the code i just put
03:33 - in here test equals false
03:35 - if
03:36 - not test if test is false then run is
03:38 - false so if we run that we can see yep
03:41 - at the bottom says test is false however
03:44 - the short circuit way of doing it is
03:46 - like this you're going to put test or is
03:49 - false so if this is true it's not even
03:51 - going to bother going to this because
03:52 - it's the or operator and we're testing
03:54 - this or this but if this is false then
03:56 - it is going to go to the function over
03:58 - here so if we run that
04:01 - and you can see test is false test is
04:03 - false it had the first test falls from
04:05 - here and then the second test is false
04:07 - from there
04:08 - okay another way that short circuit
04:10 - evaluation can be used is to set a
04:12 - default value for a function argument
04:14 - look at this function function the same
04:16 - old foo and you're going to put in a
04:18 - name here
04:20 - so the name is going to equal name or
04:23 - the name is going to equal bar
04:25 - that basically means if you don't pass
04:26 - in a name there won't be anything to
04:28 - assign to name so this will this will be
04:30 - false and if this is false it's going to
04:33 - go to the next argument which is bar if
04:35 - it's true it's going to assign that to
04:37 - name so by putting or the two lines like
04:40 - that which means or and putting bar here
04:43 - you're setting a default value so let's
04:46 - run that and see what happens
04:49 - and you can see
04:50 - my best friend's name is bar
04:53 - my best friend's name is bo so first it
04:55 - used the default and then it uses what
04:58 - we assigned assigned here
05:00 - so those are just a few things that you
05:02 - can do with short circuit evaluation
05:04 - well thanks for watching my name is beau
05:06 - carnes don't forget to subscribe and
05:08 - remember use your code for good

Cleaned transcript:

i'm going to be talking about logical operators and short circuit evaluation and then some cool tricks you can do with short circuit evaluation so first of all this is the logical and two ampersand signs and this is the logical or to pipe characters so if you have something like this nested if statement if num is more than 5 and then if num is less than 10 we're gonna console.log unicycle we can actually just use the logical and instead of this nested if statement so let's see that i'm going to get rid of this and this is going to give the same result if num is more than 5 and num is less than 10 console.log unicycles so just if the number is between 5 and 10 we can also replace this with the or sign or now it's if num is more than 5 or num is less than 10. so either of those things could be true to pre console.log unicycle and all numbers meet this criteria so we'll always have a unicycle you can never have too many unicycles okay now let's talk about short circuit evaluation short circuit evaluation happens when conditionals use and or or it means that the second argument is evaluated only if the first argument is not enough to determine the value of the expression when the first argument of the and function evaluates to false the overall value must be false so it doesn't have to evaluate the second argument when the first argument of the or function evaluates to true the overall value must be true so it doesn't evaluate the second argument for instance so it evaluated the first one 4 is more than 5 but it didn't even evaluate the second one once it found out that this was false it didn't need to even evaluate the second part of the conditional so that's short circuit evaluation it just skips that part completely you can actually use this for some interesting things in javascript for instance let me set something up for you i pasted this code in here so we're going to set test to true and then we're going to create a function is true function console.log this is true var is false is the function console.log this is false so it says if test is true well test is true so it's going to run that function so if test is true it runs the function so if we run that yep it's going to say test is true but there's a way this is the slow way to do it or the the more worried a way to do it with short circuit evaluation there's actually a better way to do it that's a little a little better let me show you so in this short circuit evaluation we just put test and and is true so if this is true it's going to run the next one if the first argument is true it automatically goes to the next argument which can be a function so if test is not true it won't run this function so let me comment this out i'm going to run that again but it's still going to say this is true in the console because of this so we could we made this whole if statement into one line without even using the word if just because of short circuit evaluation let me show you how you would do that with the or operator okay here's the code i just put in here test equals false if not test if test is false then run is false so if we run that we can see yep at the bottom says test is false however the short circuit way of doing it is like this you're going to put test or is false so if this is true it's not even going to bother going to this because it's the or operator and we're testing this or this but if this is false then it is going to go to the function over here so if we run that and you can see test is false test is false it had the first test falls from here and then the second test is false from there okay another way that short circuit evaluation can be used is to set a default value for a function argument look at this function function the same old foo and you're going to put in a name here so the name is going to equal name or the name is going to equal bar that basically means if you don't pass in a name there won't be anything to assign to name so this will this will be false and if this is false it's going to go to the next argument which is bar if it's true it's going to assign that to name so by putting or the two lines like that which means or and putting bar here you're setting a default value so let's run that and see what happens and you can see my best friend's name is bar my best friend's name is bo so first it used the default and then it uses what we assigned assigned here so those are just a few things that you can do with short circuit evaluation well thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good
