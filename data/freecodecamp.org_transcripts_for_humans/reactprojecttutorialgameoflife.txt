With timestamps:

00:00 - hi i'm beau carnes and in this tutorial
00:03 - i'm going to be showing you how to
00:04 - create conway's game of life using react
00:08 - you don't need to know a lot already but
00:10 - you should be a little familiar with
00:12 - some react concepts if you need to to
00:15 - learn about react or just need a
00:16 - refresher you can check out my react
00:18 - basics video which should be linked on
00:20 - the screen right now
00:22 - also there is a github repo that goes
00:24 - along with this so you can follow along
00:28 - uh you should be following along on your
00:29 - own computer but you can use the github
00:31 - repo if you get lost so you can check
00:34 - the link in the description for that
00:36 - well let's get started
00:38 - as you can see here the game of life is
00:41 - a cellular automaton developed by john
00:44 - conway
00:45 - and it's it's called a zero player game
00:48 - basically you set the initial state and
00:50 - then you just watch what happens so each
00:53 - cell on the board has certain rules
00:56 - if we go down here each cell is going to
00:58 - live or die based on the cells around
01:02 - them any live cell with fewer than two
01:04 - neighbors dies as if caused by
01:06 - underpopulation any live cell with two
01:09 - or three neighbors lives on to the next
01:11 - generation any lifestyle with more than
01:14 - three neighbors dies as if by
01:15 - overpopulation and any dead cell with
01:18 - exactly three live neighbors becomes a
01:20 - live cell as if by reproduction
01:22 - so just these rules can create the board
01:26 - that's going to be constantly moving so
01:29 - in this game we have the play button
01:32 - we have a pause button that's going to
01:34 - stop everything we can also clear all
01:37 - the cells
01:38 - and we can seed so we can just add live
01:42 - cells and hit the play button
01:44 - and i can change the speed to fast
01:46 - there's two speeds fast or slow
01:49 - and then we can change the grid size so
01:52 - here's the small grid size we had to see
01:54 - it again
01:56 - and then here's the large grid size
02:00 - so let's get started on how to create
02:02 - this
02:07 - okay i'm over in the terminal now and
02:09 - i'm going to use create react app to
02:12 - build a new react application
02:15 - this is going to set up your development
02:17 - environment so that you can use the
02:18 - latest javascript features and it
02:20 - provides a nice developer experiences
02:22 - plus optimizes your app for production
02:25 - so the first thing i'm going to do is
02:26 - just make sure i have node.js installed
02:30 - and i have version
02:31 - 8.0.0 okay good now i just have to
02:35 - install the create react app so we'll do
02:37 - npm install
02:40 - and create
02:42 - react
02:43 - app
02:45 - okay that's installed now i clear my
02:47 - screen and i'm just going to use create
02:49 - react app to create our app so i'll just
02:52 - do create
02:53 - react
02:55 - app
02:57 - game of life
03:01 - okay create react app now just set up
03:04 - everything for us this just creates a
03:06 - default app and we can actually run that
03:08 - by doing npm start
03:12 - nope we have to switch into the folder
03:14 - first so let's do cd
03:17 - game of life
03:19 - now we do npm start
03:23 - so now we just go to localhost colon
03:26 - 3000 in our web browser and you can see
03:29 - the default page that create react app
03:31 - made we're gonna make some changes to
03:34 - this obviously
03:35 - okay i just open up our newly created
03:37 - folder in sublime text you can really
03:40 - use any text editor for this
03:42 - we're gonna start off by changing some
03:44 - things from the default app so we're
03:47 - going to the source file
03:49 - and i'm going to delete most of these
03:50 - files so i'm going to delete all these
03:52 - files
03:53 - right click delete
03:58 - and
03:59 - this file this file
04:03 - delete so all we should have left in the
04:05 - directory is the index.css and the
04:08 - index.js
04:10 - in react most of our program is going to
04:12 - be an index.js
04:15 - so we're going to go in here
04:17 - and delete some of this stuff in here
04:24 - and now we just have a really basic
04:26 - thing so first we're going to import
04:28 - react from react
04:30 - and import react dom from react dom and
04:34 - we're going to need those things to run
04:36 - react
04:37 - and right here we have react dom dot
04:39 - render app document.get by id root so if
04:43 - we go over to our public folder and in
04:46 - index.html you'll see this is the html
04:49 - page and down here we have the div with
04:52 - id root so
04:54 - this is where our entire
04:56 - react app is going to load let's just
04:59 - change the name instead of react app
05:02 - game
05:03 - of life
05:05 - i'll save that let's go back to our
05:09 - index
05:10 - and then just to see if this works let's
05:12 - just try try changing this really quick
05:15 - so we're gonna do
05:16 - p
05:19 - hello
05:20 - world
05:22 - and we have to run our server again so
05:25 - to actually see the page that you're
05:27 - creating you have to have this server
05:29 - running and it's going to just
05:30 - automatically update the page whenever
05:32 - you save a file
05:37 - okay you can see it says hello world
05:39 - right on the page
05:41 - so if you are using sublime text for
05:43 - react you should probably install a
05:46 - babel that's going to help with the
05:47 - syntax highlighting for jsx so you're
05:50 - just going to shift command p and then
05:52 - you're going to type
05:54 - package
05:55 - install package and when you have the
05:57 - list you'll just do babel
06:00 - now i already have it installed but once
06:02 - you have it installed to make sure it
06:05 - highlights correctly you should go to
06:07 - view
06:09 - syntax
06:11 - open all current extension as
06:14 - and here you can go to babel
06:17 - and then javascript
06:18 - babel and you can see the syntax
06:21 - highlighting just changed as soon as i
06:22 - did that
06:24 - okay in react your page is made up of a
06:26 - bunch of components and there will be
06:28 - components inside of components so our
06:31 - main component is just something that
06:33 - holds the entire page
06:36 - and then we're going to create a
06:37 - component that just holds the buttons
06:39 - here
06:40 - then we're going to have a component
06:42 - that just holds the board the entire
06:44 - board
06:45 - and then each individual square in the
06:47 - board it's going to be its own component
06:51 - so let's start off by making the
06:53 - component that has the entire page
07:00 - this is just going to be called main so
07:02 - instead of having hello world in here
07:05 - it's going to say
07:06 - main
07:08 - and right up here
07:10 - i'm going to have class
07:12 - main
07:13 - extends
07:15 - react
07:17 - dot component
07:21 - so each component in react is going to
07:23 - have a render method that's going to
07:25 - render what's actually going to show up
07:27 - on the web page so i'm going to start by
07:30 - writing that
07:32 - render
07:36 - and inside this return is where i'm
07:38 - going to put the jsx which is pretty
07:40 - similar to html to show what's going to
07:42 - be inside the page
07:45 - anything in your return method for jsx
07:48 - it always has to be enclosed in the
07:50 - exact same tag so there's has to be one
07:53 - tag that encloses everything so i'm just
07:55 - going to have the div tag here let me
07:58 - change my um
08:01 - spacing here so everything that we're
08:03 - going to do is going to be enclosed in
08:04 - this div tag
08:06 - let me put this over here
08:09 - so first we're just going to have an h1
08:11 - tag
08:12 - to give a title the game of life
08:19 - and this next thing we are going to put
08:21 - in some buttons right under the title
08:23 - but first let's create our grid
08:27 - so inside a grid we're going to pass in
08:29 - some properties but we still have to
08:31 - create those before we pass in the
08:34 - properties let's just put our final our
08:36 - final thing on the pages is going to at
08:38 - the very bottom it's going to tell how
08:41 - many generations we've had
08:44 - and to get how many generations we're
08:45 - going to have to create a variable or a
08:47 - state variable that's going to show how
08:49 - many generations there are i haven't
08:51 - created that yet but we're just going to
08:52 - put it in here as this dot state
08:55 - dot generation
08:58 - in react
08:59 - pretty much all your variables should be
09:01 - stored as a state or a prop a state
09:05 - variable belongs to whichever component
09:08 - created that variable or should be in
09:10 - charge of that variable so each variable
09:12 - is held mainly by one component
09:16 - as its state and if you're going to pass
09:19 - that variable to other components that
09:21 - variable becomes a prop all of our
09:24 - variables are going to be stored as
09:26 - state in the the main component and then
09:28 - we can pass them to other components as
09:31 - props so we'll see how that works in
09:34 - just a minute here now that we've
09:36 - started to create some state here let's
09:38 - actually define the state we're going to
09:40 - do that in a constructor so go
09:43 - constructor
09:45 - so in our constructor we're going to
09:47 - always going to start with calling super
09:49 - and then we're gonna create our state
09:51 - this dot state
09:53 - equals
09:57 - and i'm just gonna start with one thing
09:59 - generation
10:01 - zero so we're gonna start at generation
10:03 - zero and we're gonna try to get to the
10:05 - point where we can test this as soon as
10:07 - possible so the only thing we have to do
10:09 - now is create a simple grid component
10:12 - because here we're bringing in the grid
10:15 - so since we're referencing another
10:16 - component there has to be another
10:18 - component for it to display correctly
10:24 - so i'm going to create another class
10:26 - here class
10:27 - grid
10:29 - extends
10:31 - react
10:32 - dot component
10:34 - and we're going to have our render
10:36 - method
10:37 - and inside we're always going to return
10:39 - what we want to render
10:45 - right now we're just going to return the
10:47 - word grid
10:50 - i'm going to save this our server is
10:52 - still running in the console if we go
10:55 - back to the browser
10:57 - it has been updated so
10:59 - it says the game of life our grid that's
11:02 - from our grid component generations
11:05 - and then zero remember that's from our
11:07 - state we have generation zero
11:10 - okay now we have a basic start to our
11:12 - react project before we go any further i
11:15 - want to create the css so as we keep
11:18 - testing we'll look how it's supposed to
11:19 - look so i'm just going to open index.css
11:22 - here there's already some css here from
11:25 - when this was automatically created so
11:27 - we're just going to delete that and
11:28 - since this tutorial is mainly about
11:30 - react not a css i'm just going to paste
11:32 - in some css here if you check the github
11:35 - link in the description you can get a
11:37 - link to all this code and you can
11:38 - actually copy and paste the css for your
11:41 - file too so let's move this over
11:43 - and i'll just briefly go over this we're
11:46 - going to use this background image which
11:48 - is just a repeating background image
11:50 - that i thought would look nice for this
11:52 - program
11:53 - the box is going to be for all the the
11:55 - box components you can see width 15
11:58 - height 15 so it's going to be just a box
12:02 - and we're just changing some of the
12:04 - display and the border there's going to
12:06 - be a border so you can see it's a box
12:08 - and just so it goes up against each
12:10 - other the margin left and margin bottom
12:13 - is just so when there's a one pixel
12:15 - border around the whole box it there's
12:17 - not going to be two pixels border when
12:20 - two boxes are right next to each other
12:22 - and then we have a box that's off is
12:25 - going to be light gray a box that's on
12:27 - is going to be green and when you hover
12:29 - over the box it's going to be a color
12:32 - too it's going to be this blue color
12:35 - now
12:36 - here we just have something to
12:38 - center this is just a helper class to
12:40 - center content on our page
12:42 - and then all the boxes are going to be
12:44 - inside a grid it's going to be 150
12:47 - pixels wide and then there's also going
12:49 - to be a
12:51 - a box shadow and all these things are
12:53 - just going to help the boxes look
12:54 - correctly when they're inside the grid
12:57 - and then all our headings are going to
12:59 - look like this
13:00 - except heading 4 we're just going to
13:02 - make sure there's a margin top of 0
13:04 - pixels
13:05 - so now the rest of this tutorial will
13:08 - just be in the javascript file all the
13:11 - other files are completely set up how
13:12 - they're going to be set up
13:17 - so i'm just going to hide the sidebar so
13:19 - we can focus just on this code here okay
13:22 - let's go back to the main component and
13:24 - we're going to add some more state
13:27 - variables and also we're going to just
13:28 - add some class properties you generally
13:31 - want to have all your variables as state
13:33 - variables because when a state variable
13:36 - changes it will automatically propagate
13:38 - through the rest of your program and
13:41 - will automatically update every place
13:43 - where that state variable is
13:45 - but sometimes it's okay to just use a
13:47 - class property or just a variable right
13:49 - in your class and that is that is when
13:52 - you're not going to need to have that
13:54 - propagate throughout the whole app
13:56 - also if you want to reference a variable
13:58 - when you first create your state you
14:01 - cannot cr reference a state variable
14:04 - from within your state when you're
14:06 - creating the state uh that'll make more
14:08 - sense when i show you we're going to
14:09 - have this dot speed
14:12 - equals 100 that's how fast the program
14:16 - is going to be running we have this dot
14:18 - rose
14:20 - equals 30 this how many rows in the grid
14:24 - this dot calls that's the columns it's
14:27 - going to equal 50
14:29 - and the reason why i don't have these in
14:31 - this date is because i'm going to
14:33 - reference the rows and the columns when
14:35 - i originally create the state so i'm
14:38 - going to have grid full this is what the
14:41 - full grid is going to be like we're
14:42 - going to create an array that's as big
14:44 - as the rows variable
14:46 - and we're going to fill that
14:49 - with a a map where we're going to create
14:51 - another an array which is big as the
14:54 - columns variable
14:56 - and each element in that array is false
15:00 - this is just creating a 50 by 30 grid
15:02 - which is a two-dimensional array and
15:05 - every element in that array is set to
15:08 - false that just means every grid cell is
15:11 - turned off to begin with so now that we
15:13 - have these variables let's go back down
15:16 - to our render method and inside the grid
15:19 - we're going to pass these variables
15:21 - these state variables and these
15:23 - properties as props into our grid
15:27 - component
15:29 - we're passing the full grid
15:32 - we're passing the rows
15:34 - and we're passing the columns so now we
15:37 - can use all these things as props in the
15:40 - grid component
15:42 - so up in this grid component first i'm
15:44 - going to fill in the jsx that we're
15:46 - going to return and this is going to use
15:48 - some variables and some other things
15:50 - that we're then then going to create
15:51 - afterwards so it's not going to say grid
15:54 - anymore because we're actually going to
15:55 - put a grid in there let's start by
15:58 - adding some some things to this div so
16:00 - we're going to put class name now class
16:03 - name is just the same as class but since
16:05 - class is as a reserved word in
16:07 - javascript for jsx you have to use class
16:09 - name so in html it's class jsx it's
16:12 - class name i'm going to put grid
16:15 - now this is going to come directly from
16:16 - our css so that's how we're going to
16:19 - style this
16:20 - and we're also going to add an inline
16:23 - style
16:25 - width
16:26 - is going to equal width because the
16:29 - width is going to change depending on
16:31 - how big the grid is and this is just
16:33 - going to be a variable that we still
16:34 - have to create the only thing else we're
16:36 - going to do in here inside the div
16:39 - we're going to put the rows array
16:43 - now this is just an array of all the
16:44 - rows in the grid which we have to create
16:47 - and we're going to do that right above
16:48 - the return method we're going to create
16:51 - some other things first of all the width
16:53 - so let's do a const
16:56 - with
16:58 - and it's going to be this dot props dot
17:00 - calls so
17:02 - this.props.calls is from down here when
17:05 - we pass in these rows and calls here
17:08 - this these become props in the child
17:11 - component so now we have
17:13 - this.props.calls and it's the same thing
17:14 - we passed in from the parent and we're
17:16 - just going to multiply this by 14 and
17:19 - this will just get the width that we
17:20 - need
17:21 - and we're going to create the rows array
17:24 - so first it's going to just be an empty
17:26 - array
17:28 - and this is where we're going to add
17:30 - everything to the rows array that will
17:32 - show up in the grid
17:34 - var box class this is something we're
17:36 - going to use while we're creating the
17:38 - array
17:40 - and here we're going to have some loops
17:42 - here so 4
17:44 - var i equals zero
17:52 - now i'm going to have a nested for loop
17:54 - since there are is a nested array and
17:57 - this next nest is going to be very
17:59 - similar to this so i'm just going to
18:00 - copy that
18:02 - and this dot props dot calls
18:05 - instead of i i'm going to do command d
18:08 - to select the next
18:11 - 3
18:12 - and switch it to j except this one needs
18:15 - to switch back to i
18:16 - iterations like this are commonly
18:19 - performed using the math method over an
18:21 - array to map an array of data to ui
18:23 - elements but to make this more clear of
18:27 - what i'm doing i'm just using two nested
18:29 - for loops but this would often be done
18:31 - with a map
18:33 - i'm gonna have let box id
18:36 - equals
18:37 - i
18:40 - so this is just to create the id that's
18:42 - going to go along with each box element
18:45 - and the box class
18:47 - is going to either be on or off so
18:50 - equals this dot props
18:53 - dot grid
18:55 - full
18:57 - so we're going to check in the grid that
19:00 - we've passed in we're going to check at
19:02 - the specific spot in the grid
19:05 - and we're going to check to see if it's
19:06 - true or false
19:08 - if it's true that means it's on and it's
19:11 - going to be false if the box is turned
19:12 - off this is going to be a ternary
19:14 - operator
19:15 - true box on
19:18 - or false
19:21 - box
19:22 - off
19:23 - and this will just be classes that we
19:25 - get from our css to show what color the
19:28 - box is going to be
19:30 - now we're going to start pushing things
19:31 - onto our array
19:33 - and we can actually push jsx
19:36 - right onto our array
19:38 - so that's what i'm going to put here a
19:40 - box now we're pushing a box component
19:44 - which we haven't created yet but inside
19:47 - the box component
19:50 - we're going to have a box class
19:52 - this is going to equal the box class
19:55 - that's what we just created we're also
19:57 - going to have a key
20:00 - box id which we just created
20:04 - and the box id
20:07 - which we just created
20:09 - so these are both going to be box id
20:12 - row
20:13 - is i
20:16 - call
20:17 - is j
20:19 - and select box
20:22 - so so far we've just passed in variables
20:26 - but you can also pass in a method or a
20:28 - function that's going to be called so
20:30 - this is going to be this dot
20:33 - dot select box so if we're passing in
20:38 - this dot props dot select box select box
20:40 - has to be a prop
20:42 - well select box isn't a prop because we
20:45 - haven't passed in down here so let's
20:48 - just do that right now
20:49 - select box
20:51 - equals
20:52 - this dot select box
20:56 - like i said that's going to be a
20:57 - function that we still have to create
20:59 - we're going to do that in just a minute
21:01 - but first let's go up here
21:03 - and finish off this box here
21:07 - so that's the end of the box so we are
21:10 - pushing a bunch of boxes onto the array
21:14 - and then down here we just put that
21:16 - whole array in here we can't see it
21:19 - quite yet if we just save this
21:22 - and then we go into our terminal
21:26 - oh
21:26 - and that was a mistake that wasn't a
21:28 - mistake because i hadn't finished it yet
21:30 - that was a mistake just because i made a
21:32 - mistake if we go down here
21:35 - this was supposed to be a squiggly brace
21:39 - and now i'll say we'll go back into the
21:41 - the terminal
21:43 - and now it just says box is not defined
21:46 - now this error is because we still have
21:48 - to create that we're going to create
21:50 - that next back to the code let's make
21:53 - the box
21:58 - so i'm going to create a new class up
22:00 - here
22:02 - this will be the smallest one we've
22:03 - created so far class box
22:07 - extends
22:09 - react dot component
22:12 - just like the one right below here
22:15 - and we're gonna have a render method
22:19 - and this is just gonna be jsx so first
22:22 - we're going to return
22:24 - it
22:26 - div
22:28 - this is just going to be one div
22:30 - actually but we're going to put the
22:31 - class name which is just a class as this
22:35 - dot props dot box class
22:38 - and i did not need these quotation marks
22:43 - and then the id is going to be this dot
22:46 - props
22:47 - dot id
22:49 - and finally we're going to have an on
22:50 - click function
22:53 - so on click
22:55 - we're going to call this dot select box
23:01 - now we did pass in this dot props dot
23:04 - select box but the reason we're calling
23:06 - this dot select box instead of this dot
23:09 - props dot select box is because i'm
23:11 - going to create its own select box
23:14 - function right here
23:16 - oh before i do that though i am going to
23:19 - need to end this div tag there's gonna
23:22 - be a slash and then an arrow
23:24 - and let's put semicolon there
23:28 - now here is going to be
23:30 - the box's own select box function
23:34 - now when we're creating functions in
23:36 - here they're all going to be arrow
23:38 - functions
23:39 - because we need to have the word this
23:42 - bound appropriately if we don't make it
23:44 - an arrow function when we write the word
23:46 - this inside the function it won't be
23:49 - referring to the right this
23:52 - this dot props
23:54 - dot select box so we're calling
23:57 - the the function from the props
24:01 - but this time we're going to pass in
24:03 - something
24:06 - so the reason why we're creating our own
24:07 - select box inside box and not just
24:10 - calling the props is because now we have
24:12 - to pass in these things and as far as i
24:16 - can tell there's no way to pass in
24:17 - anything to this dot props if it's
24:20 - inside the render method
24:22 - okay i'm going to save this
24:25 - i'm going to save this file
24:27 - and let's go back over to our web
24:29 - browser
24:32 - got a new error objects are not valid
24:34 - react child
24:37 - here's the problem we have too many
24:39 - curly braces here
24:41 - um so
24:42 - up here we need two curly braces because
24:44 - we're within a tag but when you're not
24:47 - inside a tag you only need one curly
24:49 - brace
24:50 - so let's change this
24:52 - and we'll make a few other changes i
24:54 - noticed i do need a
24:57 - semicolon here
24:58 - and now let's save this
25:01 - and we'll go back to the browser
25:05 - it's loading automatically reloads and
25:08 - you can see something the grid is there
25:11 - as you can see we have this extra space
25:13 - here
25:14 - so we're going to figure out how to get
25:16 - that off
25:18 - now that seems to have to do with how
25:20 - wide this is
25:23 - if we go back into the css you'll see
25:26 - that the box is 15 pixels wide and it's
25:30 - also gonna have one extra border so it's
25:33 - actually gonna be 16 pixels wide plus
25:36 - one pixel we have the negative one here
25:39 - but on one side of the whole grid
25:42 - there's going to be an extra pixel there
25:45 - this should really be maybe
25:47 - 16 because that's how many pixels there
25:49 - are and then we would just do plus one
25:52 - so let's try that
25:54 - 16
25:57 - plus one
25:59 - save that and see what happens
26:02 - and maybe i didn't need to add that plus
26:03 - one it looks like there's an extra dark
26:06 - line over there
26:08 - i'm going to zoom in really quick
26:12 - oh maybe it's because i was already
26:13 - zoomed in a little bit so
26:15 - if i'm at 100 i don't see an extra line
26:20 - so we just fixed that
26:22 - okay it's time to add some methods to
26:23 - our main component
26:25 - you'll see that this on click
26:28 - is this dot select box but this dot
26:30 - select box is this dot props dot select
26:32 - box
26:33 - but this select box is this dot props
26:36 - dot select box so actually this method
26:39 - is being passed through two children
26:42 - components so it comes from the main
26:44 - component then gets past the grid
26:45 - component then gets past the box
26:47 - component
26:48 - we still have to create it on the main
26:50 - component you'll see on the main
26:52 - component all we have is constructor and
26:55 - render we're still going to have to make
26:57 - a few more methods so let's create the
26:59 - this dot props dot select box
27:05 - so right under constructor
27:08 - i'm going to do select box
27:11 - equals now this is going to be an arrow
27:13 - function remember like i was saying it
27:15 - has to appropriately bind this
27:18 - remember we can tell if a box is
27:20 - selected
27:21 - in this array you can see when we create
27:23 - the array everything's false if a box is
27:26 - selected it will be set to true so we
27:28 - need to update this array with what has
27:31 - been selected and set that to true so we
27:34 - are going to select a row and a call i
27:36 - forgot we pass in row
27:38 - call
27:40 - and instead of updating this. directly
27:43 - we're going to have to make a copy of an
27:45 - array and then
27:47 - do a set state command to update the
27:50 - state in react you're never supposed to
27:52 - update the state directly so whenever
27:55 - you have an array it's best practice
27:57 - just to make a copy of the array first
27:59 - so we're going to do let
28:02 - grid
28:04 - copy
28:06 - equal
28:07 - array
28:08 - clone
28:10 - now this is a function i still have to
28:12 - create
28:13 - this dot
28:14 - state dot grid full
28:18 - and so this array clone function this is
28:20 - a helper function we're gonna have to
28:21 - clone an array a few times so i just
28:23 - have this helper function
28:25 - um this helper function you can see it
28:27 - doesn't have the word this on it because
28:29 - i'm going to create it at the very
28:30 - bottom outside of our component
28:33 - right here
28:35 - we're going to say this is just going to
28:36 - be a normal function
28:40 - you're passing an array
28:41 - and to copy we just do this this trick
28:45 - where you stringify it and then you
28:47 - parse it and it will make a clone of the
28:50 - array a deep clone
28:51 - if this wasn't a nested array we could
28:54 - just do
28:55 - array.slice but since it's a nested
28:57 - array we have to do a deep clone where
28:59 - it will clone all the arrays inside the
29:01 - arrays
29:02 - so let's go back up to here
29:05 - and we're going to set grid copy
29:09 - so we're going to find the exact square
29:10 - that was clicked
29:12 - and we're going to set it to the
29:14 - opposite
29:18 - so if it was true it'll be false if it
29:21 - was false it will be true now this is
29:23 - what we call the set state function so
29:25 - this dot set state
29:29 - whenever you're updating state you
29:30 - should do it through this dot set state
29:35 - okay let's save it and test it out see
29:37 - if it works compiling and loading
29:43 - it works if i click a square
29:46 - it stays green
29:48 - so now we're going to create two more
29:50 - methods one is going to be to seed the
29:52 - board so it will automatically start
29:54 - with with random squares selected and
29:58 - then we need to have way what some way
30:00 - to start the game
30:02 - so right under select box let's create
30:04 - seed
30:09 - and i'm going to have to create another
30:11 - copy of the grid so i'm just going to
30:12 - copy this line right up here
30:16 - and now
30:18 - we are going to
30:20 - do some more for loops because we're i'm
30:21 - gonna have to go through every square of
30:24 - the grid and decide whether to turn it
30:26 - on or leave it off
30:37 - and then i'm going to randomly choose
30:40 - whether the the square gets turned on or
30:43 - not
30:43 - so let's create that function to
30:45 - randomly choose something so if
30:48 - math.flow
30:51 - math
30:53 - dot random
30:56 - times
30:57 - four
30:59 - equals equals equals
31:01 - one
31:02 - so we're going to create a random number
31:04 - between 0 and 4
31:06 - and if it equals 1 we're going to do
31:09 - something
31:10 - grid
31:11 - copy
31:14 - equals true
31:17 - so we have a 25 chance of turning on
31:20 - each square in the grid
31:23 - oh see this in parentheses that actually
31:25 - should be at the end of this if
31:27 - statement up there
31:29 - and then we just have to set state i'm
31:30 - going to copy it right from up here
31:35 - this dot set say grid full to grid copy
31:39 - now we want the game to seed
31:41 - right away
31:43 - so to make something happen as soon as
31:45 - everything is loaded there is a life
31:48 - cycle hook this is a method i'll run
31:50 - when a certain thing happens so we're
31:52 - gonna use component
31:55 - did mount
31:57 - so as soon as everything is loaded it's
32:00 - going to run this this method here and
32:02 - everything inside it so this dot seed
32:06 - so now if i save it it should seed the
32:08 - grid let's see if this works
32:13 - nope
32:14 - let's see what we did wrong
32:18 - let's see if c is even being run so
32:21 - let's do a console.log
32:23 - and i'm just going to say
32:25 - seed
32:27 - so let's see um
32:29 - it's compiling
32:32 - i'm gonna have to open up the javascript
32:33 - console
32:36 - it says seed so seed is being run
32:40 - but for some reason it's not
32:42 - working correctly
32:46 - let's see if it's getting into here
32:49 - random
32:51 - okay
32:55 - okay it's not even getting into the part
32:57 - where it assigns the random number
33:02 - oh i have a parenthesis in the right the
33:05 - wrong spot so this parentheses here
33:08 - should go right there
33:11 - okay let's take off these cons i'm
33:13 - pretty sure this is going to work so
33:14 - let's take off these console.logs and
33:16 - then we'll actually test it
33:18 - so save it
33:20 - compiling
33:24 - and it's seated
33:26 - it worked
33:27 - awesome
33:29 - now we just have to make things move
33:30 - along so every generation something
33:34 - should change in here the squares should
33:36 - change based on the rules we talked
33:37 - about earlier so we're gonna have to set
33:40 - those rules up right now so let's go
33:42 - back over to our code
33:44 - so we're gonna have to have something
33:46 - happen on an interval
33:48 - so we're gonna have two functions one
33:50 - function that starts the interval and
33:52 - then starts calling another function
33:54 - that will run on an interval
33:58 - so the first one is going to be called
34:00 - play button
34:03 - because eventually this will be
34:04 - associated with a button a play button
34:06 - on the screen
34:08 - and we'll set the interval id
34:10 - to equal set interval this dot play
34:14 - this dot props dot speed
34:17 - so set interval is going to start
34:19 - calling this.play
34:21 - at the interval here this.props.speed
34:25 - remember we started started the speed
34:27 - off at 100 so that's 100 milliseconds so
34:30 - every 100 milliseconds
34:32 - we're going to call this.play and we're
34:34 - going to set this
34:36 - this.interval.id because that's how you
34:38 - stop the interval and in fact if someone
34:40 - clicks the play button we want
34:42 - everything to start over so here i'm
34:45 - going to add a clear interval
34:48 - and pass in this dot
34:50 - interval id
34:53 - uh wait a second this dot props dot
34:55 - speed
34:56 - how did i do that oh it's not a prop so
34:59 - it's just this dot speed
35:02 - but before we test this we have to
35:04 - create this dot play
35:06 - so let's do that right below here
35:17 - this is going to be our main function
35:19 - for making the game actually work
35:22 - we're going to start by having two
35:24 - copies of the grid so let g g for grid
35:29 - dot state dot grid full
35:33 - and that's going to be the first copy
35:35 - let
35:36 - g2
35:38 - equals array clone because this has to
35:40 - be completely different
35:43 - this dot state
35:45 - dot grid full
35:48 - and the reason for this is we're going
35:50 - to start changing the squares
35:53 - so we're going to have to check what the
35:55 - grid is currently like
35:56 - and then change the squares on the clone
36:00 - and at the end we're going to set the
36:01 - state using the clone
36:03 - now at this point i'm actually going to
36:05 - paste in the code i'm going to paste in
36:08 - a little bit piece of code and then i'll
36:09 - talk about it
36:12 - so here is where we use all the rules
36:15 - from the game of life from conway's game
36:17 - of life
36:18 - so we're going to create these two for
36:20 - loops that means we're going to go
36:22 - through every element in the grid
36:24 - and here is where we're going to figure
36:27 - out the rules so if we go back over here
36:34 - so here i've put in all these rules into
36:37 - the code
36:39 - see if there's any li cell with fewer
36:41 - than two neighbors with two or three
36:43 - live neighbors with more than three live
36:45 - neighbors with exactly three live
36:47 - neighbors and then we figure out if it's
36:49 - gonna die or if it's gonna live
36:52 - so the count is how many neighbors it
36:55 - has
36:56 - so here we're going to go through
36:59 - and if there is a neighbor we increase
37:01 - the count
37:03 - plus one
37:04 - and since each cell has eight potential
37:08 - neighbors you can see there's eight
37:09 - lines here and this is just how you
37:11 - check each neighbor
37:14 - and then we have to decide if it's going
37:16 - to die or live remember if there's less
37:20 - if there's less than two or
37:22 - more than three it dies
37:25 - if it's dead
37:27 - and it has three neighbors
37:30 - it becomes a live cell
37:33 - then we just do this. we assign the grid
37:35 - full and then for generation this dot
37:38 - state that generation plus one or we
37:41 - could have put plus plus to increment it
37:44 - so let's save that and we're going to
37:45 - try this hopefully i did everything
37:47 - right because if not we will be in a
37:50 - pretty bad loop here
37:53 - okay nothing's happening so let's see
37:55 - what we did wrong
38:01 - oh in component did mount down here i
38:04 - have to add one more command
38:06 - this dot
38:08 - play button
38:10 - to start the game so it's going to seat
38:12 - it and then it's going to start the game
38:15 - so now let's save it
38:17 - compiling
38:19 - and let's see what happens
38:23 - and it's going
38:31 - so there's some pretty cool things in
38:32 - here
38:33 - uh unfortunately right now there's no
38:34 - way to stop it so it's gonna basically
38:37 - be going forever
38:40 - we better create a pause button
38:43 - so under this play button we're going to
38:46 - create a pause button
38:49 - it's going to equal
38:52 - this is pretty simple we're just going
38:53 - to clear the interval
38:57 - okay we already have two buttons here we
38:59 - have the play button and the pause
39:01 - button but actually we don't have any
39:03 - buttons yet so let's add the buttons now
39:12 - i'm gonna go back down to our render for
39:15 - our main component and right above the
39:18 - grid
39:19 - below the game of life heading i'm going
39:21 - to add
39:22 - buttons
39:23 - this is going to be its own component
39:25 - and we're just going to pass in the
39:27 - buttons so play button
39:30 - it's gonna equal
39:32 - this
39:33 - dot play button
39:40 - okay as you can see we passed in all the
39:42 - buttons here
39:43 - and now we have to
39:45 - create these buttons all these functions
39:47 - but before that i'm going to create the
39:48 - buttons component
39:50 - so let's go up here and create the
39:53 - buttons component right above the main
39:54 - component
40:00 - and inside this we're going to have a
40:01 - render method
40:04 - it's going to return
40:07 - and in my buttons i want to use
40:11 - bootstrap
40:13 - i want to use bootstrap to style the the
40:15 - buttons
40:16 - but in react it can't automatically use
40:20 - bootstrap so i have to install something
40:23 - called react bootstrap
40:27 - so if i go to this page here
40:28 - react.bootstrap.github.io
40:32 - this is how you can get you can easily
40:34 - use bootstrap and react so let's go to
40:37 - getting started
40:39 - and i'm going to do some things in the
40:40 - command line
40:42 - we're going to run this command right
40:43 - here npm install save react bootstrap
40:47 - so let's go over to our console i'm
40:49 - going to stop that
40:51 - and i'm just going to paste in that
40:52 - command
40:56 - okay got that installed so i'm going to
40:58 - go back and
41:00 - i'm going to get bootstrap here so i'm
41:02 - going to copy this
41:04 - um cdn for bootstrap go over to my code
41:08 - i'm gonna go to the index.html and i'm
41:11 - just gonna put it right up here
41:14 - so got the bootstrap in there i'm gonna
41:17 - save that
41:18 - so now that i got react bootstrap
41:20 - installed i'm going to have to import
41:23 - some things from react bootstrap so
41:24 - let's go to the top here
41:26 - and we're going to import i'm just going
41:28 - to use a few things i'm going to use the
41:30 - button toolbar
41:34 - menu item
41:37 - and drop down button
41:39 - from
41:40 - react
41:41 - bootstrap
41:44 - okay that's all i should need to get
41:46 - this to work
41:47 - so now i can go back down to my buttons
41:50 - and start creating them remember
41:52 - everything has to be wrapped in a tag
41:54 - we're going to use a div tag
41:58 - and center this is something from the
42:00 - css there
42:03 - now everything's going to be within a
42:05 - button toolbar
42:07 - and we're going to have our first button
42:13 - where we're going to use a bootstrap
42:14 - class btn btn default
42:19 - and on click
42:22 - we're going to do this dot props dot
42:24 - play button because this is our play
42:26 - button
42:28 - and it's going to have the text play
42:30 - and then we just have to close out the
42:32 - button tag
42:36 - and then i'm gonna paste in a few more
42:37 - buttons here we have the pause button
42:39 - clear button slow button fast button c
42:41 - button with the on click of the
42:43 - functions that we created in the props
42:46 - and then we have one that's a little
42:47 - more complicated which is the drop down
42:49 - button
42:51 - so we need a title
42:53 - and an id
42:58 - and then we're going to have an on
42:59 - select function
43:02 - this dot handle select
43:04 - which we still have to create and
43:06 - actually that's going to be parentheses
43:07 - that should be these curly braces
43:10 - so we start to create that
43:14 - and then we have to put in the menu item
43:16 - choices
43:24 - so we have the choice 20 by 10
43:28 - and let's just duplicate that
43:32 - and event key
43:34 - 2 3
43:37 - 50 by 30 and 70 by 50.
43:43 - and then we'll just close out the drop
43:45 - down button
43:47 - and we'll close out
43:50 - the button toolbar
43:55 - and then we'll just close out the div
43:58 - so now that we have these buttons
44:00 - created we have to create this function
44:02 - this dot handle select
44:05 - so i go up to the top here handle select
44:12 - and we're just going to call this dot
44:14 - props dot
44:16 - grid side
44:20 - and since we're passing in something we
44:22 - can't do it in the return render method
44:24 - we have to do it in this method up here
44:27 - okay let's see if it will let us see
44:28 - this yet
44:30 - now i'm going to rerun the server npm
44:32 - start
44:34 - oh um react bootstrap does not contain
44:37 - an x4 name drop down button
44:40 - because i spelled react drop down button
44:42 - wrong okay so let's go back up here
44:46 - and i'm actually see if there's other
44:48 - places where i spelled this so i'm do um
44:50 - command d to get every time i put drop
44:52 - down button and we're going to spell it
44:54 - right drop
44:56 - down
44:57 - but
44:59 - button so that should have also changed
45:01 - the ones down here yep so let's try
45:04 - saving that again and compiling again
45:07 - let's see if it compiles this time
45:09 - compiled successful so let's go over to
45:10 - the browser
45:13 - and okay we have a problem super express
45:15 - must either be null or a function not
45:17 - undefined
45:22 - okay the problem is that i this
45:24 - component here should be a capital c so
45:27 - let's go back here
45:29 - um capital c and now i'm going to save
45:32 - that
45:34 - let's see what happens here let's it's
45:36 - going to refresh automatically
45:39 - and it works kind of well the buttons
45:41 - are there this is kind of off a little
45:43 - bit
45:45 - but we're on the right track at least
45:48 - oh it's probably because when we added
45:51 - bootstrap it made some of the css kind
45:53 - of mess up so we're going to try
45:55 - something over here
45:57 - oh i'm going to change this to
45:59 - let's see
46:00 - 14 and let's see what happens here
46:06 - looks good now we have all of our
46:07 - buttons up here
46:09 - so our pause and play buttons actually
46:10 - work i always have to get the clear slow
46:12 - fast seed and grid size buttons to work
46:20 - so all of the functions are going to be
46:23 - in our
46:24 - main component
46:26 - so let's just go right down here
46:29 - and we'll start with slow
46:31 - slow
46:32 - equals
46:35 - so we just have to change the speed so
46:37 - this dot speed is going to equal 1000 or
46:41 - 1000 milliseconds
46:43 - and then this dot
46:45 - play button
46:48 - so it's just going to um start it again
46:51 - remember when you do the play button
46:53 - it's going to clear the interval and
46:54 - then it's going to set a new interval
46:56 - with the new speed here
46:59 - slow is going to be doing basically the
47:01 - same thing
47:02 - if we go back up here and see how our
47:04 - speed was default to 100
47:07 - we are going to set it back to 100
47:09 - because it starts at slow
47:11 - so clear is going to be a little more
47:13 - complicated but not too much more
47:15 - clear
47:17 - we're going to set this arrow function
47:20 - and just like we set the grid at the
47:22 - beginning let's go back up here
47:27 - i'm going to take this i'm going to copy
47:29 - it
47:32 - and we're going to do var grid
47:35 - equals
47:37 - and we're just going to paste that back
47:39 - in there now i'm not going to get to
47:40 - this in this video but this would be a
47:42 - good place to refactor instead of
47:45 - creating this array two different times
47:47 - we could call a function or somehow
47:50 - create it just once and refer to it both
47:52 - times
47:54 - so that's something you'll be able to do
47:55 - on your own when you try to refactor
47:57 - this
47:58 - and then we're gonna do this dot set
48:01 - state
48:04 - and we're gonna do grid full
48:08 - grid
48:10 - generation
48:12 - zero
48:15 - so we did the clear function
48:17 - i think we only need one more which is
48:20 - the grid size i'm going to scroll down
48:22 - here
48:23 - grid size
48:25 - and we're going to pass in a size
48:29 - we're not actually the size that we're
48:31 - passing in isn't really the size it's a
48:34 - a number one
48:35 - two or three so if we
48:37 - oh first of all before i show you that
48:39 - let's change the spelling of this grid
48:41 - size so let's go back up here when grid
48:44 - size actually called
48:46 - we have this dot props dot grid size
48:49 - event
48:50 - this event is gonna be the event key
48:52 - down here one two or three it's gonna be
48:55 - passed into the event here event so
48:58 - we're gonna get a number one two or
49:00 - three
49:01 - on in the grid size function down here
49:05 - so this is a good time for a switch
49:07 - statement
49:10 - so it's going to this size is either
49:12 - going to be 1 2 or 3. so case one
49:18 - we're going to set this dot
49:20 - calls
49:22 - to equal 20
49:25 - and this dot rows
49:27 - to equal
49:29 - 10 that's the small one
49:31 - and then we're gonna have to break
49:34 - so i'm going to select this and then
49:36 - command shift d command shift d i
49:38 - duplicated two times
49:40 - case
49:42 - two
49:42 - we're going to set this to
49:45 - 50
49:46 - and
49:47 - 30
49:48 - and then case 3 or we can actually just
49:51 - put default because that just means if
49:53 - anything else
49:55 - comes
49:56 - through we're going to set this to 70
50:00 - and 50
50:03 - and we don't need the break statement
50:05 - right here
50:06 - and then i'm going to call this dot
50:08 - clear
50:10 - so this.clear is just going to reset
50:12 - everything
50:13 - and then when it calls the this dot set
50:16 - state
50:17 - that's going to end up updating
50:19 - automatically the calls in the rows the
50:21 - columns and the rows from here is
50:22 - automatically going to update to this
50:24 - dot set state and that will propagate
50:26 - through our app
50:28 - so we're ready to test this out i'm just
50:30 - going to save this
50:31 - let's see if it compiles
50:33 - it compiled successfully
50:35 - and let's try this out
50:38 - let's uh
50:39 - zoom in a little bit
50:42 - uh
50:43 - i don't need this
50:47 - let's see pause
50:49 - play
50:50 - clear that works
50:52 - i can seed
50:54 - i can make it go slower can i hmm that
50:58 - doesn't seem to be working
51:01 - this dot play button is not a function
51:05 - okay we made a mistake over there let's
51:07 - go back
51:10 - so for slow and fast this is supposed to
51:13 - be a lowercase p
51:16 - save that
51:18 - oh and i forgot to make this fast here
51:21 - no wonder you guys are probably seeing
51:23 - that earlier
51:24 - okay let's save that
51:26 - um let's see if it compiles
51:29 - and it compiles
51:30 - should refresh
51:33 - okay now let's try slow
51:36 - okay it's going slower
51:39 - i like to test it by creating this thing
51:41 - it's kind of like a little spaceship and
51:43 - see if it does see if this works
51:45 - let's go to fast
51:47 - and it's just going to go across the
51:48 - screen
51:50 - there's a few things like that that
51:51 - people have figured out in the the game
51:53 - of life that if you make a certain
51:54 - pattern does cool things you can see
51:57 - that got to the end and just turned to a
51:58 - square
52:00 - that's something that you can do in
52:01 - refactoring
52:03 - right now if you get to the end it
52:05 - there's no no squares over here but you
52:08 - could refactor it to make it so so this
52:10 - something like this would go completely
52:12 - off screen so we can seat it while it's
52:14 - going
52:15 - we can clear it um we can seat it let's
52:19 - see if we can change the grid size 20 by
52:21 - 10 yep that worked let's see that
52:24 - um 50 70 by 50. that worked let's see it
52:28 - play
52:33 - and here's another thing you notice that
52:34 - when the grid size is big this is it's
52:36 - on the fastest speed but you can see
52:38 - this is a lot slower than when the grid
52:40 - is small
52:46 - so i i've definitely seen some game of
52:48 - life implementations that go the same
52:50 - speed no matter what so that would be
52:52 - another thing to look at if you're
52:54 - trying to refactor my code
52:56 - actually you can kind of see why it goes
52:58 - so slow if i open up the javascript
52:59 - console
53:02 - you'll see these
53:04 - items hidden by filters if i
53:07 - do default filter
53:09 - and i go to verbose
53:11 - you can see the set interval is taking
53:13 - too long it's only supposed to take i
53:16 - think i think it's 50 milliseconds if it
53:18 - takes more than 50 milliseconds
53:21 - it says it's taking too long if we go to
53:23 - the small grid side and see that
53:26 - see you're saying it's not it's not
53:27 - showing that at all now if we go to the
53:30 - medium grid size
53:32 - anything over 50 milliseconds is going
53:35 - to say it's taking too long
53:37 - but that's not
53:39 - really bad that's why on default doesn't
53:42 - even show that
53:44 - so as far as refactoring the code that's
53:46 - something that you can do
53:48 - to try to try to make this run even
53:49 - faster
53:51 - so that's pretty much it for the game of
53:53 - life we've completely finished this you
53:56 - can check the final code on on github
54:00 - if anybody sees any mistakes or if you
54:03 - find a way to improve this game
54:06 - just do a pull request on github i'm
54:09 - going to have a special folder
54:12 - i'm going to have a special folder in
54:13 - the repository just for improvements
54:17 - so if it's a mistake you can do a pull
54:20 - request to the main code but if it's an
54:23 - improvement you can create a new
54:26 - directory in the improvements folder and
54:28 - do a pull request with your your
54:30 - improved file
54:33 - thanks for watching
54:34 - don't forget to subscribe and remember
54:36 - use your code for good

Cleaned transcript:

hi i'm beau carnes and in this tutorial i'm going to be showing you how to create conway's game of life using react you don't need to know a lot already but you should be a little familiar with some react concepts if you need to to learn about react or just need a refresher you can check out my react basics video which should be linked on the screen right now also there is a github repo that goes along with this so you can follow along uh you should be following along on your own computer but you can use the github repo if you get lost so you can check the link in the description for that well let's get started as you can see here the game of life is a cellular automaton developed by john conway and it's it's called a zero player game basically you set the initial state and then you just watch what happens so each cell on the board has certain rules if we go down here each cell is going to live or die based on the cells around them any live cell with fewer than two neighbors dies as if caused by underpopulation any live cell with two or three neighbors lives on to the next generation any lifestyle with more than three neighbors dies as if by overpopulation and any dead cell with exactly three live neighbors becomes a live cell as if by reproduction so just these rules can create the board that's going to be constantly moving so in this game we have the play button we have a pause button that's going to stop everything we can also clear all the cells and we can seed so we can just add live cells and hit the play button and i can change the speed to fast there's two speeds fast or slow and then we can change the grid size so here's the small grid size we had to see it again and then here's the large grid size so let's get started on how to create this okay i'm over in the terminal now and i'm going to use create react app to build a new react application this is going to set up your development environment so that you can use the latest javascript features and it provides a nice developer experiences plus optimizes your app for production so the first thing i'm going to do is just make sure i have node.js installed and i have version 8.0.0 okay good now i just have to install the create react app so we'll do npm install and create react app okay that's installed now i clear my screen and i'm just going to use create react app to create our app so i'll just do create react app game of life okay create react app now just set up everything for us this just creates a default app and we can actually run that by doing npm start nope we have to switch into the folder first so let's do cd game of life now we do npm start so now we just go to localhost colon 3000 in our web browser and you can see the default page that create react app made we're gonna make some changes to this obviously okay i just open up our newly created folder in sublime text you can really use any text editor for this we're gonna start off by changing some things from the default app so we're going to the source file and i'm going to delete most of these files so i'm going to delete all these files right click delete and this file this file delete so all we should have left in the directory is the index.css and the index.js in react most of our program is going to be an index.js so we're going to go in here and delete some of this stuff in here and now we just have a really basic thing so first we're going to import react from react and import react dom from react dom and we're going to need those things to run react and right here we have react dom dot render app document.get by id root so if we go over to our public folder and in index.html you'll see this is the html page and down here we have the div with id root so this is where our entire react app is going to load let's just change the name instead of react app game of life i'll save that let's go back to our index and then just to see if this works let's just try try changing this really quick so we're gonna do p hello world and we have to run our server again so to actually see the page that you're creating you have to have this server running and it's going to just automatically update the page whenever you save a file okay you can see it says hello world right on the page so if you are using sublime text for react you should probably install a babel that's going to help with the syntax highlighting for jsx so you're just going to shift command p and then you're going to type package install package and when you have the list you'll just do babel now i already have it installed but once you have it installed to make sure it highlights correctly you should go to view syntax open all current extension as and here you can go to babel and then javascript babel and you can see the syntax highlighting just changed as soon as i did that okay in react your page is made up of a bunch of components and there will be components inside of components so our main component is just something that holds the entire page and then we're going to create a component that just holds the buttons here then we're going to have a component that just holds the board the entire board and then each individual square in the board it's going to be its own component so let's start off by making the component that has the entire page this is just going to be called main so instead of having hello world in here it's going to say main and right up here i'm going to have class main extends react dot component so each component in react is going to have a render method that's going to render what's actually going to show up on the web page so i'm going to start by writing that render and inside this return is where i'm going to put the jsx which is pretty similar to html to show what's going to be inside the page anything in your return method for jsx it always has to be enclosed in the exact same tag so there's has to be one tag that encloses everything so i'm just going to have the div tag here let me change my um spacing here so everything that we're going to do is going to be enclosed in this div tag let me put this over here so first we're just going to have an h1 tag to give a title the game of life and this next thing we are going to put in some buttons right under the title but first let's create our grid so inside a grid we're going to pass in some properties but we still have to create those before we pass in the properties let's just put our final our final thing on the pages is going to at the very bottom it's going to tell how many generations we've had and to get how many generations we're going to have to create a variable or a state variable that's going to show how many generations there are i haven't created that yet but we're just going to put it in here as this dot state dot generation in react pretty much all your variables should be stored as a state or a prop a state variable belongs to whichever component created that variable or should be in charge of that variable so each variable is held mainly by one component as its state and if you're going to pass that variable to other components that variable becomes a prop all of our variables are going to be stored as state in the the main component and then we can pass them to other components as props so we'll see how that works in just a minute here now that we've started to create some state here let's actually define the state we're going to do that in a constructor so go constructor so in our constructor we're going to always going to start with calling super and then we're gonna create our state this dot state equals and i'm just gonna start with one thing generation zero so we're gonna start at generation zero and we're gonna try to get to the point where we can test this as soon as possible so the only thing we have to do now is create a simple grid component because here we're bringing in the grid so since we're referencing another component there has to be another component for it to display correctly so i'm going to create another class here class grid extends react dot component and we're going to have our render method and inside we're always going to return what we want to render right now we're just going to return the word grid i'm going to save this our server is still running in the console if we go back to the browser it has been updated so it says the game of life our grid that's from our grid component generations and then zero remember that's from our state we have generation zero okay now we have a basic start to our react project before we go any further i want to create the css so as we keep testing we'll look how it's supposed to look so i'm just going to open index.css here there's already some css here from when this was automatically created so we're just going to delete that and since this tutorial is mainly about react not a css i'm just going to paste in some css here if you check the github link in the description you can get a link to all this code and you can actually copy and paste the css for your file too so let's move this over and i'll just briefly go over this we're going to use this background image which is just a repeating background image that i thought would look nice for this program the box is going to be for all the the box components you can see width 15 height 15 so it's going to be just a box and we're just changing some of the display and the border there's going to be a border so you can see it's a box and just so it goes up against each other the margin left and margin bottom is just so when there's a one pixel border around the whole box it there's not going to be two pixels border when two boxes are right next to each other and then we have a box that's off is going to be light gray a box that's on is going to be green and when you hover over the box it's going to be a color too it's going to be this blue color now here we just have something to center this is just a helper class to center content on our page and then all the boxes are going to be inside a grid it's going to be 150 pixels wide and then there's also going to be a a box shadow and all these things are just going to help the boxes look correctly when they're inside the grid and then all our headings are going to look like this except heading 4 we're just going to make sure there's a margin top of 0 pixels so now the rest of this tutorial will just be in the javascript file all the other files are completely set up how they're going to be set up so i'm just going to hide the sidebar so we can focus just on this code here okay let's go back to the main component and we're going to add some more state variables and also we're going to just add some class properties you generally want to have all your variables as state variables because when a state variable changes it will automatically propagate through the rest of your program and will automatically update every place where that state variable is but sometimes it's okay to just use a class property or just a variable right in your class and that is that is when you're not going to need to have that propagate throughout the whole app also if you want to reference a variable when you first create your state you cannot cr reference a state variable from within your state when you're creating the state uh that'll make more sense when i show you we're going to have this dot speed equals 100 that's how fast the program is going to be running we have this dot rose equals 30 this how many rows in the grid this dot calls that's the columns it's going to equal 50 and the reason why i don't have these in this date is because i'm going to reference the rows and the columns when i originally create the state so i'm going to have grid full this is what the full grid is going to be like we're going to create an array that's as big as the rows variable and we're going to fill that with a a map where we're going to create another an array which is big as the columns variable and each element in that array is false this is just creating a 50 by 30 grid which is a twodimensional array and every element in that array is set to false that just means every grid cell is turned off to begin with so now that we have these variables let's go back down to our render method and inside the grid we're going to pass these variables these state variables and these properties as props into our grid component we're passing the full grid we're passing the rows and we're passing the columns so now we can use all these things as props in the grid component so up in this grid component first i'm going to fill in the jsx that we're going to return and this is going to use some variables and some other things that we're then then going to create afterwards so it's not going to say grid anymore because we're actually going to put a grid in there let's start by adding some some things to this div so we're going to put class name now class name is just the same as class but since class is as a reserved word in javascript for jsx you have to use class name so in html it's class jsx it's class name i'm going to put grid now this is going to come directly from our css so that's how we're going to style this and we're also going to add an inline style width is going to equal width because the width is going to change depending on how big the grid is and this is just going to be a variable that we still have to create the only thing else we're going to do in here inside the div we're going to put the rows array now this is just an array of all the rows in the grid which we have to create and we're going to do that right above the return method we're going to create some other things first of all the width so let's do a const with and it's going to be this dot props dot calls so this.props.calls is from down here when we pass in these rows and calls here this these become props in the child component so now we have this.props.calls and it's the same thing we passed in from the parent and we're just going to multiply this by 14 and this will just get the width that we need and we're going to create the rows array so first it's going to just be an empty array and this is where we're going to add everything to the rows array that will show up in the grid var box class this is something we're going to use while we're creating the array and here we're going to have some loops here so 4 var i equals zero now i'm going to have a nested for loop since there are is a nested array and this next nest is going to be very similar to this so i'm just going to copy that and this dot props dot calls instead of i i'm going to do command d to select the next 3 and switch it to j except this one needs to switch back to i iterations like this are commonly performed using the math method over an array to map an array of data to ui elements but to make this more clear of what i'm doing i'm just using two nested for loops but this would often be done with a map i'm gonna have let box id equals i so this is just to create the id that's going to go along with each box element and the box class is going to either be on or off so equals this dot props dot grid full so we're going to check in the grid that we've passed in we're going to check at the specific spot in the grid and we're going to check to see if it's true or false if it's true that means it's on and it's going to be false if the box is turned off this is going to be a ternary operator true box on or false box off and this will just be classes that we get from our css to show what color the box is going to be now we're going to start pushing things onto our array and we can actually push jsx right onto our array so that's what i'm going to put here a box now we're pushing a box component which we haven't created yet but inside the box component we're going to have a box class this is going to equal the box class that's what we just created we're also going to have a key box id which we just created and the box id which we just created so these are both going to be box id row is i call is j and select box so so far we've just passed in variables but you can also pass in a method or a function that's going to be called so this is going to be this dot dot select box so if we're passing in this dot props dot select box select box has to be a prop well select box isn't a prop because we haven't passed in down here so let's just do that right now select box equals this dot select box like i said that's going to be a function that we still have to create we're going to do that in just a minute but first let's go up here and finish off this box here so that's the end of the box so we are pushing a bunch of boxes onto the array and then down here we just put that whole array in here we can't see it quite yet if we just save this and then we go into our terminal oh and that was a mistake that wasn't a mistake because i hadn't finished it yet that was a mistake just because i made a mistake if we go down here this was supposed to be a squiggly brace and now i'll say we'll go back into the the terminal and now it just says box is not defined now this error is because we still have to create that we're going to create that next back to the code let's make the box so i'm going to create a new class up here this will be the smallest one we've created so far class box extends react dot component just like the one right below here and we're gonna have a render method and this is just gonna be jsx so first we're going to return it div this is just going to be one div actually but we're going to put the class name which is just a class as this dot props dot box class and i did not need these quotation marks and then the id is going to be this dot props dot id and finally we're going to have an on click function so on click we're going to call this dot select box now we did pass in this dot props dot select box but the reason we're calling this dot select box instead of this dot props dot select box is because i'm going to create its own select box function right here oh before i do that though i am going to need to end this div tag there's gonna be a slash and then an arrow and let's put semicolon there now here is going to be the box's own select box function now when we're creating functions in here they're all going to be arrow functions because we need to have the word this bound appropriately if we don't make it an arrow function when we write the word this inside the function it won't be referring to the right this this dot props dot select box so we're calling the the function from the props but this time we're going to pass in something so the reason why we're creating our own select box inside box and not just calling the props is because now we have to pass in these things and as far as i can tell there's no way to pass in anything to this dot props if it's inside the render method okay i'm going to save this i'm going to save this file and let's go back over to our web browser got a new error objects are not valid react child here's the problem we have too many curly braces here um so up here we need two curly braces because we're within a tag but when you're not inside a tag you only need one curly brace so let's change this and we'll make a few other changes i noticed i do need a semicolon here and now let's save this and we'll go back to the browser it's loading automatically reloads and you can see something the grid is there as you can see we have this extra space here so we're going to figure out how to get that off now that seems to have to do with how wide this is if we go back into the css you'll see that the box is 15 pixels wide and it's also gonna have one extra border so it's actually gonna be 16 pixels wide plus one pixel we have the negative one here but on one side of the whole grid there's going to be an extra pixel there this should really be maybe 16 because that's how many pixels there are and then we would just do plus one so let's try that 16 plus one save that and see what happens and maybe i didn't need to add that plus one it looks like there's an extra dark line over there i'm going to zoom in really quick oh maybe it's because i was already zoomed in a little bit so if i'm at 100 i don't see an extra line so we just fixed that okay it's time to add some methods to our main component you'll see that this on click is this dot select box but this dot select box is this dot props dot select box but this select box is this dot props dot select box so actually this method is being passed through two children components so it comes from the main component then gets past the grid component then gets past the box component we still have to create it on the main component you'll see on the main component all we have is constructor and render we're still going to have to make a few more methods so let's create the this dot props dot select box so right under constructor i'm going to do select box equals now this is going to be an arrow function remember like i was saying it has to appropriately bind this remember we can tell if a box is selected in this array you can see when we create the array everything's false if a box is selected it will be set to true so we need to update this array with what has been selected and set that to true so we are going to select a row and a call i forgot we pass in row call and instead of updating this. directly we're going to have to make a copy of an array and then do a set state command to update the state in react you're never supposed to update the state directly so whenever you have an array it's best practice just to make a copy of the array first so we're going to do let grid copy equal array clone now this is a function i still have to create this dot state dot grid full and so this array clone function this is a helper function we're gonna have to clone an array a few times so i just have this helper function um this helper function you can see it doesn't have the word this on it because i'm going to create it at the very bottom outside of our component right here we're going to say this is just going to be a normal function you're passing an array and to copy we just do this this trick where you stringify it and then you parse it and it will make a clone of the array a deep clone if this wasn't a nested array we could just do array.slice but since it's a nested array we have to do a deep clone where it will clone all the arrays inside the arrays so let's go back up to here and we're going to set grid copy so we're going to find the exact square that was clicked and we're going to set it to the opposite so if it was true it'll be false if it was false it will be true now this is what we call the set state function so this dot set state whenever you're updating state you should do it through this dot set state okay let's save it and test it out see if it works compiling and loading it works if i click a square it stays green so now we're going to create two more methods one is going to be to seed the board so it will automatically start with with random squares selected and then we need to have way what some way to start the game so right under select box let's create seed and i'm going to have to create another copy of the grid so i'm just going to copy this line right up here and now we are going to do some more for loops because we're i'm gonna have to go through every square of the grid and decide whether to turn it on or leave it off and then i'm going to randomly choose whether the the square gets turned on or not so let's create that function to randomly choose something so if math.flow math dot random times four equals equals equals one so we're going to create a random number between 0 and 4 and if it equals 1 we're going to do something grid copy equals true so we have a 25 chance of turning on each square in the grid oh see this in parentheses that actually should be at the end of this if statement up there and then we just have to set state i'm going to copy it right from up here this dot set say grid full to grid copy now we want the game to seed right away so to make something happen as soon as everything is loaded there is a life cycle hook this is a method i'll run when a certain thing happens so we're gonna use component did mount so as soon as everything is loaded it's going to run this this method here and everything inside it so this dot seed so now if i save it it should seed the grid let's see if this works nope let's see what we did wrong let's see if c is even being run so let's do a console.log and i'm just going to say seed so let's see um it's compiling i'm gonna have to open up the javascript console it says seed so seed is being run but for some reason it's not working correctly let's see if it's getting into here random okay okay it's not even getting into the part where it assigns the random number oh i have a parenthesis in the right the wrong spot so this parentheses here should go right there okay let's take off these cons i'm pretty sure this is going to work so let's take off these console.logs and then we'll actually test it so save it compiling and it's seated it worked awesome now we just have to make things move along so every generation something should change in here the squares should change based on the rules we talked about earlier so we're gonna have to set those rules up right now so let's go back over to our code so we're gonna have to have something happen on an interval so we're gonna have two functions one function that starts the interval and then starts calling another function that will run on an interval so the first one is going to be called play button because eventually this will be associated with a button a play button on the screen and we'll set the interval id to equal set interval this dot play this dot props dot speed so set interval is going to start calling this.play at the interval here this.props.speed remember we started started the speed off at 100 so that's 100 milliseconds so every 100 milliseconds we're going to call this.play and we're going to set this this.interval.id because that's how you stop the interval and in fact if someone clicks the play button we want everything to start over so here i'm going to add a clear interval and pass in this dot interval id uh wait a second this dot props dot speed how did i do that oh it's not a prop so it's just this dot speed but before we test this we have to create this dot play so let's do that right below here this is going to be our main function for making the game actually work we're going to start by having two copies of the grid so let g g for grid dot state dot grid full and that's going to be the first copy let g2 equals array clone because this has to be completely different this dot state dot grid full and the reason for this is we're going to start changing the squares so we're going to have to check what the grid is currently like and then change the squares on the clone and at the end we're going to set the state using the clone now at this point i'm actually going to paste in the code i'm going to paste in a little bit piece of code and then i'll talk about it so here is where we use all the rules from the game of life from conway's game of life so we're going to create these two for loops that means we're going to go through every element in the grid and here is where we're going to figure out the rules so if we go back over here so here i've put in all these rules into the code see if there's any li cell with fewer than two neighbors with two or three live neighbors with more than three live neighbors with exactly three live neighbors and then we figure out if it's gonna die or if it's gonna live so the count is how many neighbors it has so here we're going to go through and if there is a neighbor we increase the count plus one and since each cell has eight potential neighbors you can see there's eight lines here and this is just how you check each neighbor and then we have to decide if it's going to die or live remember if there's less if there's less than two or more than three it dies if it's dead and it has three neighbors it becomes a live cell then we just do this. we assign the grid full and then for generation this dot state that generation plus one or we could have put plus plus to increment it so let's save that and we're going to try this hopefully i did everything right because if not we will be in a pretty bad loop here okay nothing's happening so let's see what we did wrong oh in component did mount down here i have to add one more command this dot play button to start the game so it's going to seat it and then it's going to start the game so now let's save it compiling and let's see what happens and it's going so there's some pretty cool things in here uh unfortunately right now there's no way to stop it so it's gonna basically be going forever we better create a pause button so under this play button we're going to create a pause button it's going to equal this is pretty simple we're just going to clear the interval okay we already have two buttons here we have the play button and the pause button but actually we don't have any buttons yet so let's add the buttons now i'm gonna go back down to our render for our main component and right above the grid below the game of life heading i'm going to add buttons this is going to be its own component and we're just going to pass in the buttons so play button it's gonna equal this dot play button okay as you can see we passed in all the buttons here and now we have to create these buttons all these functions but before that i'm going to create the buttons component so let's go up here and create the buttons component right above the main component and inside this we're going to have a render method it's going to return and in my buttons i want to use bootstrap i want to use bootstrap to style the the buttons but in react it can't automatically use bootstrap so i have to install something called react bootstrap so if i go to this page here react.bootstrap.github.io this is how you can get you can easily use bootstrap and react so let's go to getting started and i'm going to do some things in the command line we're going to run this command right here npm install save react bootstrap so let's go over to our console i'm going to stop that and i'm just going to paste in that command okay got that installed so i'm going to go back and i'm going to get bootstrap here so i'm going to copy this um cdn for bootstrap go over to my code i'm gonna go to the index.html and i'm just gonna put it right up here so got the bootstrap in there i'm gonna save that so now that i got react bootstrap installed i'm going to have to import some things from react bootstrap so let's go to the top here and we're going to import i'm just going to use a few things i'm going to use the button toolbar menu item and drop down button from react bootstrap okay that's all i should need to get this to work so now i can go back down to my buttons and start creating them remember everything has to be wrapped in a tag we're going to use a div tag and center this is something from the css there now everything's going to be within a button toolbar and we're going to have our first button where we're going to use a bootstrap class btn btn default and on click we're going to do this dot props dot play button because this is our play button and it's going to have the text play and then we just have to close out the button tag and then i'm gonna paste in a few more buttons here we have the pause button clear button slow button fast button c button with the on click of the functions that we created in the props and then we have one that's a little more complicated which is the drop down button so we need a title and an id and then we're going to have an on select function this dot handle select which we still have to create and actually that's going to be parentheses that should be these curly braces so we start to create that and then we have to put in the menu item choices so we have the choice 20 by 10 and let's just duplicate that and event key 2 3 50 by 30 and 70 by 50. and then we'll just close out the drop down button and we'll close out the button toolbar and then we'll just close out the div so now that we have these buttons created we have to create this function this dot handle select so i go up to the top here handle select and we're just going to call this dot props dot grid side and since we're passing in something we can't do it in the return render method we have to do it in this method up here okay let's see if it will let us see this yet now i'm going to rerun the server npm start oh um react bootstrap does not contain an x4 name drop down button because i spelled react drop down button wrong okay so let's go back up here and i'm actually see if there's other places where i spelled this so i'm do um command d to get every time i put drop down button and we're going to spell it right drop down but button so that should have also changed the ones down here yep so let's try saving that again and compiling again let's see if it compiles this time compiled successful so let's go over to the browser and okay we have a problem super express must either be null or a function not undefined okay the problem is that i this component here should be a capital c so let's go back here um capital c and now i'm going to save that let's see what happens here let's it's going to refresh automatically and it works kind of well the buttons are there this is kind of off a little bit but we're on the right track at least oh it's probably because when we added bootstrap it made some of the css kind of mess up so we're going to try something over here oh i'm going to change this to let's see 14 and let's see what happens here looks good now we have all of our buttons up here so our pause and play buttons actually work i always have to get the clear slow fast seed and grid size buttons to work so all of the functions are going to be in our main component so let's just go right down here and we'll start with slow slow equals so we just have to change the speed so this dot speed is going to equal 1000 or 1000 milliseconds and then this dot play button so it's just going to um start it again remember when you do the play button it's going to clear the interval and then it's going to set a new interval with the new speed here slow is going to be doing basically the same thing if we go back up here and see how our speed was default to 100 we are going to set it back to 100 because it starts at slow so clear is going to be a little more complicated but not too much more clear we're going to set this arrow function and just like we set the grid at the beginning let's go back up here i'm going to take this i'm going to copy it and we're going to do var grid equals and we're just going to paste that back in there now i'm not going to get to this in this video but this would be a good place to refactor instead of creating this array two different times we could call a function or somehow create it just once and refer to it both times so that's something you'll be able to do on your own when you try to refactor this and then we're gonna do this dot set state and we're gonna do grid full grid generation zero so we did the clear function i think we only need one more which is the grid size i'm going to scroll down here grid size and we're going to pass in a size we're not actually the size that we're passing in isn't really the size it's a a number one two or three so if we oh first of all before i show you that let's change the spelling of this grid size so let's go back up here when grid size actually called we have this dot props dot grid size event this event is gonna be the event key down here one two or three it's gonna be passed into the event here event so we're gonna get a number one two or three on in the grid size function down here so this is a good time for a switch statement so it's going to this size is either going to be 1 2 or 3. so case one we're going to set this dot calls to equal 20 and this dot rows to equal 10 that's the small one and then we're gonna have to break so i'm going to select this and then command shift d command shift d i duplicated two times case two we're going to set this to 50 and 30 and then case 3 or we can actually just put default because that just means if anything else comes through we're going to set this to 70 and 50 and we don't need the break statement right here and then i'm going to call this dot clear so this.clear is just going to reset everything and then when it calls the this dot set state that's going to end up updating automatically the calls in the rows the columns and the rows from here is automatically going to update to this dot set state and that will propagate through our app so we're ready to test this out i'm just going to save this let's see if it compiles it compiled successfully and let's try this out let's uh zoom in a little bit uh i don't need this let's see pause play clear that works i can seed i can make it go slower can i hmm that doesn't seem to be working this dot play button is not a function okay we made a mistake over there let's go back so for slow and fast this is supposed to be a lowercase p save that oh and i forgot to make this fast here no wonder you guys are probably seeing that earlier okay let's save that um let's see if it compiles and it compiles should refresh okay now let's try slow okay it's going slower i like to test it by creating this thing it's kind of like a little spaceship and see if it does see if this works let's go to fast and it's just going to go across the screen there's a few things like that that people have figured out in the the game of life that if you make a certain pattern does cool things you can see that got to the end and just turned to a square that's something that you can do in refactoring right now if you get to the end it there's no no squares over here but you could refactor it to make it so so this something like this would go completely off screen so we can seat it while it's going we can clear it um we can seat it let's see if we can change the grid size 20 by 10 yep that worked let's see that um 50 70 by 50. that worked let's see it play and here's another thing you notice that when the grid size is big this is it's on the fastest speed but you can see this is a lot slower than when the grid is small so i i've definitely seen some game of life implementations that go the same speed no matter what so that would be another thing to look at if you're trying to refactor my code actually you can kind of see why it goes so slow if i open up the javascript console you'll see these items hidden by filters if i do default filter and i go to verbose you can see the set interval is taking too long it's only supposed to take i think i think it's 50 milliseconds if it takes more than 50 milliseconds it says it's taking too long if we go to the small grid side and see that see you're saying it's not it's not showing that at all now if we go to the medium grid size anything over 50 milliseconds is going to say it's taking too long but that's not really bad that's why on default doesn't even show that so as far as refactoring the code that's something that you can do to try to try to make this run even faster so that's pretty much it for the game of life we've completely finished this you can check the final code on on github if anybody sees any mistakes or if you find a way to improve this game just do a pull request on github i'm going to have a special folder i'm going to have a special folder in the repository just for improvements so if it's a mistake you can do a pull request to the main code but if it's an improvement you can create a new directory in the improvements folder and do a pull request with your your improved file thanks for watching don't forget to subscribe and remember use your code for good
