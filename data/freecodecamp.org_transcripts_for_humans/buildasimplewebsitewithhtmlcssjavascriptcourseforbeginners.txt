With timestamps:

00:00 - Practice your web development skills by building a social media dashboard with a dark light theme.
00:06 - Jess, who runs the popular Coder Coder YouTube channel, will guide you through a beginner front-end
00:12 - mentor challenge. You'll improve your skills in JavaScript, HTML, and CSS.
00:18 - Jess demonstrates her practical approach to planning a website project and her resourceful methods
00:23 - for researching solutions. So it's time to dive in and unleash your coding potential as you build
00:29 - this dynamic social media dashboard. Hey everyone, in this video course for free code camp,
00:35 - I'll be building a social media dashboard from a design by front-end mentor. I'll be coding this
00:40 - from scratch using HTML, SCSS, and a little JavaScript, and we'll be using CSS custom properties to
00:46 - add a dark light toggle to the dashboard. Throughout this course, I'll be showing you exactly what
00:51 - I do in real-world projects, which includes a lot of research and troubleshooting. No developer
00:56 - knows every single thing off the top of their head. We all have to look stuff up and use trial and
01:00 - error. I'll be sharing my own techniques for doing this so that you can walk away with some
01:04 - research and problem-solving skills that you can use in your own projects. If you like this video
01:09 - and you want more, I am currently working on a course called Response and Design for Beginners,
01:14 - where I build a custom website from a Figma design using HTML, SCSS, and JavaScript. You can find
01:19 - out more about the upcoming course linked down in the description. All right, let's get into it.
01:27 - All right, so when I'm starting a project before I do anything, before I jump right into the code
01:32 - and start typing away, I try to take a look at the project and kind of figure out what requirements
01:38 - are going to be part of this and what things I would have to build. Let's pretend that this
01:43 - project that I'm building or that you're building, this front-end mentor challenge,
01:46 - is something from work. And what's really cool about front-end mentor is that they're actually
01:50 - giving you almost like a real-world experience in terms of getting a design from a designer
01:55 - and then having to build that out because that's basically what I've done as a web developer at
01:59 - my job or my former job rather. So let's look at the front-end mentor challenge. So we're doing
02:05 - the social media dashboard with Theme Switcher and if we click into here, we can see, you know,
02:12 - the desktop design. It has a series of cards and it's showing data from a different social media
02:17 - platforms. And then on the bottom part, there is some more cards showing, you know, different
02:23 - engagement metrics. And then, of course, at the top right, we have this toggle for dark mode
02:28 - and light mode. And we can see here that there is both a light and dark mode version of this
02:33 - website. So what I like to do usually is write down what the functional requirements of this product
02:42 - are going to be. This is really very similar to what I would do in the real world. So I'm just
02:46 - going to create a new file here, call it notes.md. This is going to be functional requirements and
02:53 - notes. And, you know, obviously this is just a casual like note-taking thing. Let's kind of zoom
02:58 - in a little bit more here. Okay, functional requirements and notes. So the dashboard has a light and
03:04 - dark mode toggle. So we're going to have to do a little bit of research in terms of, you know,
03:11 - what is the correct markup to use in HTML? So what HTML markup to use as well as how to switch between
03:20 - light and dark mode. And I believe we're using CSS variables. So that might be another
03:30 - item that we're going to list out here. So CSS variables or variables or custom properties,
03:37 - which is, I think, their formal name. But it seems like a lot of people are just saying CSS
03:42 - variables like myself. The light dark mode is kind of the reason that I chose this challenge.
03:48 - It's something that I'm not super familiar with myself. So I thought it might be beneficial to
03:53 - just show you the seedy underbelly of building websites and all the research and googling that
03:59 - is involved as well as trial and error. So just trying to keep things, you know, honest and open
04:05 - around here. So here's the brief challenges about this landing page as close to the design is
04:11 - possible, which is definitely important. The only JavaScript required is for the color theme toggle.
04:16 - Users should be able to view the optimal layout, depending on their device's screen size. So,
04:20 - you know, desktop versus mobile versus tablet, and then hover states and then toggle the color
04:26 - theme to their preference. So that's pretty straightforward. One thing I did was I actually
04:30 - tweeted about building this project, thinking about doing this dark light mode, switch your
04:35 - challenge in front of mentor. So I said I haven't built one before. So there's probably gonna be
04:39 - some live googling or duck dot goings since I use duck dot go. So let's see, I got some pretty good
04:44 - replies and with good suggestions from people for things that I need to keep in mind when I'm
04:49 - building this out. So that's Matt, he makes front I mentor. So this person's saying CSS custom
04:54 - properties are the simplest native way to do it that I know of, declare the theme properties at
04:58 - the root, which is what I've heard too, and then apply a class to the body or use a prefers color
05:04 - scheme media query to override them. Okay, so prefers color scheme media query. That's something
05:10 - that we're going to prefers color scheme media query. So we're gonna have to look that up. And then
05:18 - okay, so everything else I kind of know, use the root thing. Okay, so let's see. And then I got this
05:24 - other tweet from grace snow. She's actually a really active member of front and mentor. She's
05:29 - very experienced. So one of the challenges I see most commonly is using poor HTML semantics,
05:34 - not just for the toggle. I actually think that HTML is the way very challenging the theme. So I
05:38 - was asking like for the dashboard. So she was saying where the headings should be, should user
05:44 - names be labeled a screen reader only text will the increase decrease of followers be communicated
05:48 - to assistive text. Okay, so let's look back at the design real quick. So where the headings should
05:53 - be, I'm guessing that is for, you know, making sure you're using the correct H tags whenever
05:59 - possible. So I'm guessing here social media dash, where would be the H one. And then I'm guessing
06:04 - the overview today would be an H two. And then each card would probably need an H three tag. So,
06:10 - you know, page views, likes, etc. And the other interesting thing she said was should user names
06:16 - be labeled with screen reader only text. This is an accessibility thing. So if say you are visually
06:23 - impaired, you might be using a screen reader to navigate the internet. And that means that you
06:29 - need websites that you build to be able to be navigable by screen readers. So they'll actually
06:34 - read out loud to you what the content is on the website. So if we look at the design, for example,
06:41 - on the first card here, it says, you know, Facebook, and then Facebook username, Twitter with a
06:47 - Twitter handle, etc, for the different platforms. And if you're visual, you can see the Facebook
06:53 - icon or the Twitter icon, and you know what platform this card belongs to. But if you have a screen
06:58 - reader, it's not going to say that. So what I'm assuming Grace is saying here is that we can add
07:04 - some text that's only going to be, I guess, readable by the screen reader, but it's not going to visually
07:09 - appear on the page to say, for example, Facebook, Nathan F, or Twitter, Nathan F, things like that,
07:17 - just to make things more accessible, you know, for screen readers, and do the same thing with the
07:22 - bottom cars, like, you know, page views on Facebook, or likes on Facebook, likes on Instagram. So
07:27 - things like that are, unfortunately, oftentimes the last thing or even just forgotten. And I'm
07:34 - as guilty of this as a lot of other people are, and accessibility is something that I'm trying
07:39 - to get better at. So we'll try to keep these things in mind. And let's make some notes on that as
07:44 - well. So accessibility, accessibility. Is that right? Excess. No, I think there is two S's. You
07:56 - like when you look at a word and you, like, look at it for song that it starts to look weird.
08:01 - That may or may not be spelled correctly. Okay, so accessibility, make sure headings
08:05 - use correct heading tags, and then screen reader only text for, you know, card titles,
08:17 - username. So just things to keep in mind there. And then another thing we actually might need
08:23 - to research is the toggle itself for accessibility as well. So dark, light mode toggle. I guess,
08:28 - yeah, what HTML markup accessible. We'll go into that a little bit later. So let's go back to the
08:36 - tweet. Let's see. These are variables, someone else says. And then at the bottom, this is from
08:47 - Killian of all cough, he makes the polypane browser, which we're actually going to be using
08:52 - later in this video. So he's saying extra credit if you had a 30 system default option. So a third
08:56 - option to the toggle. So let's check out his blog post here. Okay, your dark mode toggle is broken.
09:05 - So let's see what he's saying here. So do you need a toggle? Do you really need a toggle to support
09:09 - dark mode? Not really. You can support dark mode by using the prefers color scheme option, which
09:13 - that other person mentioned earlier. So that that's another note to myself that this prefers
09:18 - color scheme is probably something that is accepted or best practice. And we'll be researching that
09:24 - later. So he's you and built into browsers, it gives you one of three values, light, dark,
09:29 - and no preference. Okay, so here's the issue. The issue or the problem here is that most
09:35 - hoggles have two states, you either have light mode or dark mode, and then choices forever stored
09:40 - in a cookie or local storage, which could break your dark mode. If if I'm guessing you've set
09:47 - in your browser or your OS, you prefer either light or dark. So this is saying that the toggle
09:53 - actually needs to have three states, light, dark, and system preference, which is what the user
09:58 - sets on their own computer. And then there's this prefers color scheme media query. So this is
10:03 - mentioned again. Okay, so what I'm getting from this is that the toggle actually, so switching
10:10 - between light dark modes via JavaScript, and then three option toggle, light, dark, and then system
10:19 - preference. And that goes into the prefers color scheme media query. So this looks pretty good so
10:26 - far. So you know, we're just making a list here of all the things that we're going to be doing
10:29 - research on in a little bit. Okay, so I think, and then this is an example of stack overflow,
10:35 - giving you these three options. All right, awesome. So I believe that was all for the tweet.
10:42 - So now we have the items that we need to research. We're just gonna kind of go down the list. So the
10:48 - first one is the light dark mode toggle. So what I need to figure out is what HTML markup do I need
10:54 - to use, and how to make sure it's accessible. So if we go back here, so Grace Snow actually
11:01 - did a challenge on front of mentor, which I did find in my pre research research. And it's linked
11:06 - here. So an accessible toggle in HTML CS and JS. And this is for a this other challenge,
11:12 - which is a pricing component with toggle. So you can see that here. And she made some notes here
11:19 - using an accessible component from this person, Scott O'Hara styled form controls. So let's check
11:24 - that out. Okay, accessibility of style of form controls. So I know a little bit about this.
11:34 - Basically, you know, your form controls are like the checkbox, the radio buttons, form buttons,
11:39 - form text boxes, things like that. And what people sometimes do when they're styling them to make
11:46 - them look prettier is to instead of using the actual radio button or something, they'll just
11:51 - build one using a div and CSS. And that's not navigable by screen readers. And it's a bit confusing
11:59 - because you're not using, you know, the traditional HTML form elements for that. So what I'm guessing
12:06 - this website is telling you is, and let's load the actual website here. Okay, so this is the website,
12:12 - zoom in a bit. The accessibility of style of form controls. So what I'm guessing is,
12:17 - is that this person, Scott O'Hara has created, you know, HTML and CSS markup that you can use
12:22 - if you want to have these accessible form elements, just as a starting point. So what we want is
12:28 - to figure out the markup for the toggle. Okay, switch checkbox toggle button. Let's see what this
12:35 - is. Okay, so this does look like a toggle. However, keep in mind, we do need to use, I think we need
12:40 - to use a radio button list, because this button, I believe only has the on and off settings. So I
12:48 - think we need this one switch radio button group pattern to create a two option radio button group.
12:55 - Okay, so there you go. This is the toggle. It's working. And there's some notes here.
13:01 - Do, do, do, do. Okay, so here is some example code, which is pretty awesome. So we can see here
13:09 - there's a field set, which sort of encapsulates the different controls. And then there is yes. So for
13:14 - each option, there is a radio, radio button input type. So this is probably what we're going to be
13:20 - using. Now if you remember from a Killian's blog post, we actually need three, a three option
13:28 - radio button toggle. So this example just has two. And I need to figure out, is there a three option
13:35 - toggles that even possible? So when I am looking for some examples of UI elements, a lot of time,
13:41 - I'll just go to code pen. So code pen. And we're going to look for toggle, maybe three, and then
13:52 - just hope something pops up. So let's see what happens here. Okay, so no, no. Oh, here we go.
14:00 - CSS multi position radio switch. Okay, perfect. So what I'm really looking at here is an example
14:07 - for, you know, what I can build that I can use as a reference. Okay, so there's two positions,
14:12 - three and even four. That's pretty funny. Cool. So we're using, we'll probably do something like
14:21 - this. So my guess is I would make the middle position, the system default, and then maybe light on the
14:26 - left and dark on the right. And we'll have the default be the default. And let's just check out
14:32 - their markup really quick too. Looks like they too are using a radio button input, which is good.
14:40 - So that's another sign that, you know, this is kind of the way to go in addition to obviously
14:46 - seeing it here. And I believe, and then also with Grace's challenge here. So this is just good to
14:54 - know, you know, we might need to come back to this to see how they style the three positions,
14:59 - because you know, has this nice sort of animated thing. So, you know, we can kind of go back to
15:06 - this when we need to. So I'm going to take that link. So here we go, light dark on toggle,
15:13 - and for option toggle, we're just going to add a link here. And then the HTML markup, we'll add a
15:19 - copy this thing here, just so we can, you know, go back and make sure we're following what that's
15:25 - saying. So now we have the radio button toggle markup research complete. I think I have enough
15:33 - references that I can work from this later on when we're actually building. So let's move on to look
15:39 - at using JavaScript to update CSS variables. So I used DuckDuckGo update CSS variables
15:48 - with JavaScript. And let's see what happens. A lot of times I will just click on the first
15:54 - result here, but I also try to kind of filter the results based on if I know a website is considered,
16:01 - you know, a good source of information. And I haven't heard of design size.com. I'm sure there's
16:06 - reasons it's coming up first. But I look at CSS tricks a lot. So let's check that out. Okay,
16:14 - updating a CSS variable with JavaScript. So she says variable up here. So you set the variable,
16:20 - it's mouse dash X, and then mouse dash Y. Okay, so here's some code examples how to update it from
16:29 - the JavaScript. So we're going to say let root equals document document element. And then to that
16:35 - document document element, here you go. So root dot style dot set property. So this is probably
16:41 - what we would use to update the CSS variable. So this is good to know. I guess switching between
16:50 - like light and dark modes via JavaScript. So maybe for under CSS variables, we'll add a list link here.
16:58 - Let's just add some spaces between these to get look a little bit better.
17:03 - So that's probably right now just for, you know, just for kicks and whatever. Let's see what this
17:08 - first result tells us and we can compare what this result is telling us with what the CSS tricks
17:13 - link was telling us and just see if they match up, you know, it's not a sign that this is probably
17:18 - the best approach. Okay, so style set property. Okay, so this is again saying you want to set it
17:26 - on the root pseudo class, which is what everything else we've read is saying. So that's a good
17:31 - thing. Okay, so this looks pretty familiar document document element style set property,
17:37 - which is, you know, they created this root let variable. I guess just let's not variable anymore.
17:44 - So root style set property. And they're saying the same thing here. So that tells me that
17:51 - this, this is a good approach to use. So the other thing I think I need to research is, you know,
17:59 - doing some research on light and dark modes, just because I want to see how we need to sort of
18:05 - format the colors. So let's say light dark mode CSS variable. See what comes up. Okay, so create
18:16 - like, like, create a dark light mode switch with CSS variables. dev.to is I think pretty good.
18:23 - Obviously your mileage may vary depending on the actual author.
18:26 - So let's see what this person is saying. Okay, so adding custom properties.
18:35 - Okay, so this is root primary color, you know, setting it to different things.
18:41 - And then data themed dark. I have not heard of that.
18:47 - And I believe that people had mentioned this prefers color scheme media query.
18:54 - So maybe I'll copy this and do light dark mode prefers color scheme. Maybe delete the mode.
19:03 - So light dark prefers color scheme. See if you can find some examples here.
19:09 - Okay, so developer.mozilla.org. That's usually a pretty good source of info.
19:14 - Perfers color scheme CSS media feature is used to detect if the user has requested a light or
19:19 - dark color theme. And this is similar to what I'm killing his blog post was saying. So
19:28 - let's see. Okay, so they've been a code example here. Okay, here's what we're looking for. So in
19:34 - the CSS, there's a at media rule. And it's saying prefers color scheme dark. And it has a set of
19:41 - colors using the dark scheme class. And it's setting them background to dark gray and color
19:48 - to white. Okay, and then there's another at media prefers color scheme light. And then that's using
19:56 - the light scheme class background white color. It's like a medium gray. Okay, I'm actually curious
20:06 - to see one thing that I'm killing to mention is that you can set this in your OS or your browser.
20:13 - Interesting. Okay, so the no preference. You mentioned no preference, I think, but it's not really,
20:24 - it's only supported in Safari. Not really supported anything else. Oh, simulate prefers color scheme
20:33 - in Firefox, which is what I'm using. Okay, so I guess what I'm curious about is like, I haven't
20:43 - really set the color scheme thing here, but I believe I can set it in Windows. And display.
20:54 - Let's make this one a bit bigger and believe it was under color. Oh, dark mode. Here we go. So
21:09 - under colors, choose your color dark. So if I change it to light, what happens? Oh, everything
21:17 - turns light. Interesting. I'm actually curious to see if that affected any of these web pages
21:24 - that I was looking at. Okay, so here we go here. Let's change back to dark and see if this changes
21:30 - at all. Oh my gosh, it did. So the day and the night changed. That's pretty cool. Changing the
21:37 - color light versus dark will sort of use this prefers color scheme value. So what I think I want to do
21:46 - is going back to the challenge. So right now I have my operating system set to dark mode. If I
21:52 - just load this website, I want it to use a prefers color scheme media query and detect that I have
21:59 - dark, which is kind of what they're saying here. So prefers color scheme dark like that. And then
22:06 - if I said it's a light, then it would switch to that without having to actually do the toggle.
22:10 - But my guess is then the toggle works because let's say I have my things set to dark. But if I want
22:16 - to load this website in the light mode, if I change it to light, then it can change the light,
22:22 - even if my OS mode is set to dark mode. So that's what I'm guessing is a good UX. So
22:30 - you know, if I'm wrong about this, feel free to flame me in the comments. So let's write a little
22:35 - note on that and how that all works. So light dark mode toggle. Take system preference by default.
22:44 - But can override with toggle. So this is just kind of a note to myself. Okay, so then the
22:53 - switching between light dark modes via JS, I need to add the link that I did for that. So we'll just
22:59 - copy this. Did I not do that before? Oh, yeah, I did. Oh, I did just the updating this, yes,
23:05 - variable, but I didn't add the link for this thing prefers color scheme and how that all works.
23:11 - Maybe I'll move this up here too. So switching between light dark modes via JS and prefers
23:21 - color scheme media query. Okay, cool. So I think that's pretty good for the dark and light mode
23:33 - toggle stuff. So the correct heading tags, I think I know enough to just add the correct headings.
23:38 - And the screen reader only text for cards and titles and user names. So let's look up that
23:44 - screen reader only text. Okay, so accessible 360.com, that sounds, that sounds pretty good. Okay,
23:54 - screen reader only text is great for providing more context to a link whose purpose may be obvious
23:58 - visually due to a location but could be confusing without visual cues. So this person is adding
24:05 - some additional text to the add to cart button saying, you know, info about the product. And it's
24:11 - adding a class screen reader only. That's interesting. Okay, screen reader only position absolute.
24:19 - Interesting. Another thing I tend to do when I'm looking up stuff is so I don't know a lot about
24:27 - accessibility. So let's look up here, accessibility developer guide. Let's see if they
24:34 - you know, they seem like a pretty authoritative source, right? Okay, let's check out their website.
24:45 - Welcome to the accessibility developer guide. Nice. Okay, this is a good sign. The content is
24:53 - based strictly on the W3C's web content accessibility guidelines. Okay, it looks pretty good. So let's
24:58 - see what they got here. So I'm just going to go right to the example section and hiding elements.
25:06 - Since we're going to add, we're probably going to add some text that we only want to be
25:10 - readable West screen readers. This is probably what we're going to use since we want to have
25:14 - some text that's not visually visible on the page, but it is readable by screen readers. Cool.
25:22 - Okay, hiding elements visually. We don't want to hide elements from screen readers,
25:27 - so we want this thing hiding elements visually by moving them off screen. Okay, cool. There's
25:32 - no visual technique for this, but there is a well proven workaround. So the only way to hide an
25:36 - element visually while retaining its perceptibility for screen readers is moving them out of the
25:40 - viewport using absolute positioning. I think that's similar to what that other example was here.
25:45 - Yeah, so they're doing absolute. It's like they're also using clip path. I don't know if that is
25:51 - actually supported by all browsers. This seems like maybe some more straightforward approach.
25:59 - So basically, this is actually a good example. So I would take what this website is saying over
26:06 - this website because I mean, this seems pretty good, but it just seems like this is like kind of a
26:14 - blog. You know, it looks like there's some kind of agency who handles accessibility, and I'm sure
26:22 - they know their stuff, but I think this clip thing is just not supported as universally as just,
26:28 - you know, position absolute. So this seems to be a little bit more of a simple example. So we're
26:33 - going to copy this. Screamer only text for card title username, so we'll add that link there.
26:39 - Okay, so this is good. And this seems like a pretty cool website. So just for the heck of it,
26:47 - let's see forms. I just want to see what kind of markup they recommend.
27:00 - Let's just look at the general good form example.
27:04 - It's a radio button. This is what we're going to be using. Radio buttons input type radio.
27:08 - Okay, that's good. And then each group of radio buttons and checkboxes has surrounding field set
27:14 - legend structure. So this is something good to keep in mind for the markup. Let's kind of go back
27:20 - to that example from Scott O'Hara. So field set and legend. Okay, cool. So it seems pretty similar.
27:31 - So it's another vote in terms of, you know, this using the radio button list for the markup.
27:35 - Screen readers. Okay, in addition to the controls label. So each radio button will have its own
27:40 - label. Screen readers also announced the legend of the surrounding field set.
27:46 - Okay, so they have an example on code pen. Let's just check that out.
27:50 - I'm just kind of curious what the legend is for.
27:55 - I don't see a legend here. Oh, here legend hobbies.
27:59 - Let's just kind of scoot stuff over here. All right, so the legend says,
28:09 - say to hobbies. So where is that? Okay. Oh, so sort of like the title for the set of radio
28:16 - buttons. So my guess is for the toggle, I would do something like set the legend field or the
28:24 - legend tag to say dark light mode or theme, maybe something like that, something that's kind of
28:29 - just descriptive of what, you know, what's the purpose of this, of these radio buttons? And then
28:33 - to make that only visible only readable by screen readers. So that's a good, that's good to keep in
28:41 - mind. So I'll make a note about that because I don't want to forget about the legend thing.
28:48 - So why that to the dark light mode toggle here, HTML markup. I guess I'll just make another note
28:54 - here, use field set legend and then radio inputs. Okay, so I think that's all the notes I needed.
29:07 - So I think we have everything we need to go from here. So the first thing we want to do when we're
29:11 - creating our project files is to create our GitHub repo or repository. The reason we want to do this
29:17 - at the beginning is because there's a couple reasons. One is that you have to create a new
29:22 - GitHub repository in an empty folder. So if you've already started creating your files and started
29:27 - coding, if you wanted to create a repo in the middle of that, you would have to create it in an
29:31 - empty folder and then manually move all your coding files to that folder. So just better and easier
29:36 - to create it at the beginning. The other reason to create the repo at the beginning, of course,
29:40 - is when we're using source control like Git, it's just a good idea to make commits to your
29:46 - repository as you're developing. So to kind of save your coding as you go along. So to create our
29:51 - repository, I'm going to use GitHub desktop app. I know a lot of devs like using the command line
29:57 - forget because it's kind of faster and easier, but I personally like the the desktop app and just
30:02 - the graphical user interface that you get with that. So in GitHub desktop, we're going to go to file
30:08 - and new repository. And we'll give it a name of FEM for front of mentor. And this is the social
30:15 - media dashboard, dark light toggle. I know it's kind of a long name. We're not going to initialize
30:24 - it with the read me and I'll show you why in a little bit. But for now, it's just create this
30:29 - repository. And then we're going to go to VS code. And we want to open that folder that we just created.
30:36 - So I have all my GitHub repos and a GitHub folder in the documents. And we'll open the folder. And
30:46 - right now there's nothing here except for this git attributes file that get just kind of generates.
30:50 - So now let's start moving the files that we need into our product folder. So if you remember, last
30:56 - time, in the previous video, we created the notes markdown file. So I'm just going to take this,
31:02 - and I'm going to copy it into our folder here. So now we can see that the notes that we created
31:11 - last time is here for our reference. Now the other thing I want to do is I want to add the starter
31:16 - files that front of mentor gives you. So this is the front of mentor challenge page. And when you
31:23 - start the challenge, click here visit challenge hub. And then it tells you you can download the
31:28 - starter files. I am on the pro account. So I have this option to download the design files,
31:34 - which we will be looking at in, I believe, a future video. For now, let's just download the starter
31:38 - files. You can click this download button to get them. I have actually already done that. So
31:44 - let me show you what that looks like. If we go to our download folder, we have the social media
31:51 - dashboard zip file. And I have already ends up that to this folder here on my desktop. So we
31:57 - check out the files here, we have a bunch of folders and different files. And I'm actually going
32:03 - to take all of these and copy them over to my project folder here. So let's take a look at what
32:13 - we have. So in VS code, we're looking at our project now. And we have an index HTML file from
32:20 - front of mentor. And this just gives you the copy for the website. So you don't have to manually
32:26 - type everything out. So that's pretty helpful. The other thing I give you is a style guide
32:31 - markdown file. And this is helpful because it'll tell you the width of the design that you have
32:37 - for mobile and desktop. It also gives you the colors that are used in the design. So we're
32:42 - going to be using these when we create our SAS and CSS styles. So there's a lot of different
32:48 - variables for colors mostly. And then it tells you the font that we're using this font, it's
32:53 - called enter and it's on Google fonts. So we'll have to load that as well. So this is just helpful
32:58 - to be, you know, a reference as you go along. The other thing that it gives you is images for the
33:03 - website. And then also there's a design folder. And this is if you don't have the pro account for
33:09 - front of mentor, and you just are kind of working from JPEGs. And I have done this in the past just
33:15 - with eyeballing and sort of estimating distances and sizes. And it works pretty well. So you can
33:19 - definitely get by using the free front of mentor plan. But it is kind of nice to work from design.
33:24 - And I did kind of want to show you the real world process when you're building a website from an
33:29 - actual design file. So I thought that would be cool to show all of you. Okay, so now that we have
33:38 - our starter files, I'm going to do a couple things to just configure things. So in this file,
33:44 - this is a git ignore file. This is from front of mentor. So this will tell git to ignore any files
33:51 - or changes to files that you don't want to commit to your repo. So this is so that you don't commit
33:58 - the actual design files to GitHub. Because you know, that's for the paid plan. This is for ignoring
34:04 - the store files, which I think is for a Mac thing. I always want to ignore the node modules folder.
34:11 - And anything in that, because you install the NPM packages from your package JSON file to your
34:20 - node modules folder. So you don't really want to clutter your GitHub repo with the node modules
34:24 - folder, because anyone can install them from the package JSON file. And I think that should be
34:30 - it for now. So we can just close these out. Now the next thing I want to do is create the
34:35 - other files and folders that we're going to be using in our workflow. So this would be mainly
34:39 - SAS files. I'm using SCSS syntax for SAS and some JavaScript files. And then I'm going to set up
34:46 - the goal workflow. But let's set up our files for now. So in our route, we have the index HTML
34:52 - file. And usually what I do is I'm going to create a folder called app. And this is where I'm going
34:57 - to store my working JavaScript and SAS files. So in the app folder, I'm going to create another
35:04 - subfolder called SCSS for the SAS. And I'm also going to create another folder called JS.
35:12 - And I think you need to drag that so it's in the app folder. So here we have our JS and SCSS
35:19 - folders. So in the JS folder, let's create a file called script.js. And we'll add a little console
35:28 - log message saying hello. And this will use to test that our website is working and everything's
35:38 - getting loaded. Now in our SAS folder, we're going to create some more sub folders. There's
35:45 - going to be a lot of sub folders here. And this is just to keep things organized. This is one reason
35:49 - that I really like using SAS because if we only use a CSS file, we would have a super long file
35:55 - just with all your styles there. SAS gives you a lot of different capabilities and power really in
36:00 - terms of organization and making things easier for you as you're writing styles. So we're going to
36:05 - be dividing out our styles into different folders as well as different SAS files. So in our CSS,
36:12 - so in our CSS folder, we'll create another subfolder. And I'm going to create a util. This is for
36:19 - utility styles. And in the util folder, let's create an index dot SCSS file. And if you're not
36:28 - familiar with SAS, this might seem a little confusing or overwhelming. I will sort of show you
36:33 - everything that I'm doing in my workflow. So hopefully that will help. So I'm going to create
36:41 - another folder in the SCSS folder called globals. This is for global styles that I want to use.
36:50 - And in the globals, we're also going to create its own index dot SCSS.
36:57 - Then we'll create one last sub folder called components. And again, this will have an index dot
37:06 - SCSS file. And the reason we're doing things like this is because in this components folder,
37:13 - in each of these folders, actually, we're going to create multiple other SCSS files.
37:18 - And the index dot SCSS file will load all those other files. And then we will then
37:23 - load those files in our main SCSS file, which we need to create here. So style the SCSS.
37:28 - This will be the main file. So the way SAS works with when you're working with
37:33 - partials, meaning when we split up the styles into these multiple files, is we can load them
37:38 - through our main style that SCSS file. So the way we're doing that here is we're using some,
37:45 - I guess, SAS functions for lack of a better word. And what we want to do on our main
37:51 - SAS file style that SCSS is, we're going to load all the styles that we're going to create from
37:56 - components, globals, I think just components and globals. And I'll show you what we do with the
38:01 - util styles in a little bit. So to that, we're going to use at use, and we're going to load,
38:07 - let's load the globals first, globals, and then we'll add another use rule and add,
38:15 - add components. So this is all that we're going to add in our main SAS file, because we're going to
38:21 - load all the globals and components with these rules here. Now let's start with the util folder.
38:28 - So let me close these other files out here. So this is the index SAS file and the utils folder.
38:34 - The utility styles that we're going to add here are mainly things like variables and functions and
38:40 - mixins, SAS mixins, that aren't actual CSS rules, but rather things that we're going to be using
38:46 - in the other SAS files in our project. So for example, in the util folder, let's start creating
38:52 - our SAS files here. So I'm going to create one called colors, and we'll load our color variables
39:00 - in there. Then we'll create another file called breakpoints. And this is going to be a mixin that
39:10 - I like to use in my projects for just a faster way to load your media queries. And we're also
39:17 - going to add another file called functions. And then I think I'll add one more file for our
39:25 - font styles. So fonts, that's CSS. This is going to be for the font family, mainly that Google
39:33 - font that we saw in our style guide from front of mentor. I am going to sort of cheat a little
39:39 - bit, and I'm going to copy the breakpoint styles that I've used in the past just to be a little
39:45 - bit quicker, but I'm going to explain this and everything that we're doing here. So what happens
39:51 - is when you're usually writing a media query, you write something like this, so media min-width,
39:58 - and then something like 50 ems, and then you're going to write your styles in here. What we're
40:05 - going to do is we're going to use a mixin so that we can reuse the code every time we need to
40:11 - write a media query. So we don't have to type all this out, you know, min-width of 50 ems.
40:16 - The other advantage of this, of course, is since we're using this mixin, if we want to ever
40:21 - change the 50 ems to like 64 ems, then we don't have to go and do a huge find and replace through
40:27 - all our styles. We can just change it in one place here in our breakpoints file. So this is why
40:33 - we're spending a little extra time setting this stuff all up. So what happens here is in the
40:40 - mixin, the mixin will basically load reusable code that you want to use multiple times in your
40:46 - code base. So we create the mixin by saying at mixin, then we type in the name in the mixin we
40:53 - want to use, which is in this case, the first one, breakpoint, and then breakpoint is going to
40:58 - have a parameter. So it's kind of like a function, and the parameter that's going to use is size.
41:03 - So then when we're loading this breakpoint mixin, it's going to load the code that we don't
41:09 - want to, you know, keep typing out every time. So it's going to load the media query min width,
41:13 - and then instead of typing the number, we're using a map get. So this is a SAS map. It's kind of like
41:19 - a, like an array or an object. And in this breakpoint mixin is getting the map called breakpoints
41:26 - up. And then it is putting the size variable in there. So what happens is it's going to load the
41:35 - breakpoints up map, and then whatever size you want to use in your mixin. So we have these saved
41:42 - here. So it's medium, large, extra large, and I've already set the widths and em units here.
41:48 - And then the content is going to be whatever content you put in the mixin when you're actually
41:53 - using it in your styles. So just as an example, if we wanted to use this mixin breakpoint,
41:58 - we would, in our other styles, we would say include, let me scoot this up here. So if we wanted
42:06 - to use this mixin in our code elsewhere, we would type in include breakpoint, and then
42:15 - print the C's, and then we would choose the size that we wanted to set this media query at.
42:20 - So let's say we wanted to do large and up. So we'll say include breakpoint, large,
42:27 - and then, you know, whatever rule you want to add in here. So font size, I don't know,
42:32 - three rams or something. And usually this mixin for sass would be included inside,
42:37 - it would be nested inside the actual selector. So we would actually write it inside the
42:44 - selector in this example, we're using H1. So this would load the breakpoint in the H1
42:49 - tag, and the resulting CSS would look something like H1, and then font size three rams, and
42:56 - that would be in a media query. So media min width, and the large width is 87.5 EMs.
43:07 - So it would be something like this. This doesn't seem like a whole lot of maybe benefit from
43:20 - just writing this one time. Maybe it seems like it's almost the same amount of work,
43:24 - you know, writing include breakpoint, large, as it would be to write out the media query.
43:27 - And that is kind of true. But again, if we ever wanted to change this 87.5 EMs,
43:32 - it would be kind of a hassle to have to go through, find every media query and update that.
43:37 - So it's just easier in the long run to use the mixin for that.
43:41 - And the other mixin that we have here is breakpoint down. And this is when you want to use the
43:49 - max width. So if we wanted to write some styles for medium width and small, but we don't want
43:54 - to do it for large, usually I try to just stick with the min width media query. So this breakpoint
44:00 - up mixin, because usually the desktop styles have additional rules that, you know, mobile
44:07 - and tablet may not have, because the mobile design is usually a bit simpler than the desktop
44:11 - design. For example, mobile designs, all the contents often stack to one column versus
44:15 - desktop, you have the content in multiple columns. So you need those extra rules for flexboxer
44:21 - grid to do that. So that's kind of a quick little crash course in how this works.
44:29 - So now that we've written the first util SAS rules, we want to include this breakpoints.scss file
44:37 - when we're importing it from the util folder. So to do that, we're going to go back to the
44:42 - index.scss file in the util folder. And we're going to import the breakpoint SAS file with
44:49 - forward break points. And what this does is it doesn't do anything to the code, but it
44:58 - basically just takes all these styles that we wrote. And then when we use the util in our
45:06 - other styles, it's going to take all those styles there. So you can use it in any file
45:10 - that you need to. Okay, the next file we're going to work with is the functions file in
45:16 - the util folder. And again, I'm going to sort of cheat a little bit. I'm going to copy
45:20 - styles I've used in the past. And this is the only thing that's going to be in this file.
45:24 - It's a function that will convert pixels to grams. You can see here I included the link here.
45:31 - It's from a CSS tricks article. So to use this function, let's say in another SAS file we
45:37 - want to set the font size of an H one to maybe like 30 pixels. So in the past, if you've
45:44 - seen my other videos, I would pull out my calculator and divide 30 by 16 to get to Rams.
45:50 - And this is because 16 pixels equals one Rams by default on most browsers unless you change
45:56 - that in your settings. So we divide 30 by 16 to get Rams. And we can use this function
46:02 - to do that. So we'll say rem 30. And we just use the number here. We're not using the unit.
46:13 - So if we say that the result thinks yes, s is going to look like font size 30 pixels.
46:20 - Or I'm sorry, it's going to be whatever Rams this is, which I guess we can pull out the
46:25 - calculator one last time here. 30 divided by 16 is 1.875. 1.875 Rams. So this is the only
46:40 - purpose of this function, but it is kind of helpful just so I don't have to keep pulling up
46:44 - the calculator. I think there are other NPM packages or probably even VS code extensions
46:49 - that will sort of do this for you automatically. But I just like doing this here so that I'm
46:54 - not dependent on having to install another tool. But you can do that if you want. So I'll just
47:00 - delete that since we don't really need it. Now let's start adding our colors. Actually,
47:05 - before that, let's make sure the functions gets forwarded into our util main one. So forward
47:12 - functions. Okay, so let's close these since we don't really need them. Now let's do the
47:21 - colors. And if you remember, we were just looking at the style guide here. And we're going to
47:30 - create variables in our colors SAS file for all the colors that they've given us. So I guess
47:36 - we just do this one by one. I was going to copy each section here. And we'll edit out
47:44 - everything we don't need. And this is not correct syntax wise for SAS, but we just want to have
47:50 - everything here. Okay, so that's all the colors. So let's start creating our variables. So when
47:59 - you're, we're not going to use SAS variables because CSS has come out with CSS variables or
48:04 - CSS custom properties. And that's something that we kind of have to use because we're doing the
48:10 - dark light thing and it doesn't work with SAS variables very well. This is because you can
48:16 - change the value of the CSS variable with JavaScript, you know, without having to reload
48:22 - things. So root and usually we call it dash dash. And I think I'm just going to say the
48:34 - yeah, say the colors lime green. Maybe we'll say lime green one word. I think that's right. Is that
48:46 - right? Okay, let's let's check here. CSS variables. I haven't worked with these a ton. So yeah,
48:55 - okay, I was right. So dash dash name the color and then the value. I've just worked with SAS
49:01 - variables for so long that it just kind of sticks in my mind. Okay, that seems right. Add a
49:09 - semicolon. So we'll do bright red. And we're using HSL instead of the hex colors because
49:20 - HSL, which stands for hue saturation and lightness. So that's each of these three parameters here
49:26 - are. It's a better way of changing the lightness or darkness of a color if you are using HSL.
49:32 - So I think it seems like people are just using HSL more nowadays than hex. So, you know, just
49:39 - trying to stay on top of stuff. Okay, so we'll do Facebook.
49:45 - Instagram. Oh, sorry. Twitter is first. Instagram. This is a linear gradient. So
49:58 - Instagram start. Not super created with a naming here, but, you know, Instagram and
50:07 - YouTube. And I think I'm actually just going to delete these as I go. So we know where we've been.
50:17 - And then the toggle. There's a linear gradient, which my guess is I have a design open here.
50:27 - There's a toggle and then there's the background gradient, which is what I am guessing this means.
50:34 - So there's a linear gradient and then the toggle itself, which I'm guessing is the circle of toggle.
50:41 - I guess we'll find out, but maybe I'll do toggle background start.
50:49 - And we'll just have to remember that this is going to be a linear gradient.
50:55 - And the cool thing about VS code is that when you put a color in, it'll actually give you a little
51:01 - swatch of what the actual color is going to look like. So it helps.
51:05 - And I'll just say toggle for this other one here.
51:10 - Okay. Now this is where we get into the dark theme and then the light theme.
51:22 - And I think I need to go back to my notes to see how the theme works just so that we can make sure
51:32 - we're setting things up right at the beginning. So I think this should work.
51:42 - Okay. Now this is the prefers color scheme thing.
51:47 - First color scheme dark, we would put the variables like here within this prefers color scheme media query.
51:55 - I think I want to find one for light dark mode toggle.
52:01 - I think what I can do is what I'm guessing is going to happen is for the, we'll make the light theme, I guess, the default.
52:09 - And then for the dark theme, if you set it to dark mode, then we would still need CSS variables for each color.
52:18 - But we would, you know, set the background to this color when it's in dark mode.
52:23 - So I think we can still set all the colors in here and then we will separate them out with the dark and the light modes later on with other styles and using that prefers color scheme media query.
52:34 - So we'll just go ahead and do this. And in terms of the naming, naming is kind of the hardest part.
52:42 - I've found maybe not the hardest, but naming takes a lot more time than you might think to name things in a way that makes sense and that you'll remember later or the other developers will be able to understand if they take on a project that, you know, you're not working on anymore.
52:56 - So because these are going to be the dark mode, I might just say dark dash.
53:03 - And then these are actually named. So very dark blue is for the background, top background pattern, card background, text, and then other text.
53:14 - And then we have the same names with the light values on the second part.
53:19 - So I think I'm going to say dark and then sort of use the same names here. So dark background.
53:25 - And then dark top background.
53:31 - Yeah, I think this should work. And dark card, or maybe just card, since there's only one card color given here.
53:40 - And then dark text one. And then we'll say dark text two will be this.
53:51 - So we can always rename things later on if a different kind of name would make more sense.
53:55 - So we did the dark colors now. So I think what I can do is control D to just duplicate that and we'll rename things for the light mode.
54:04 - Oops. Oh, I included the toggle and I didn't want that.
54:09 - It's just like the lines you need control D will duplicate those lines.
54:15 - Light.
54:20 - And then we will copy these so the background light top background card background and then text one and text two.
54:35 - Okay, awesome. And we're done with these. So this is all the style we need for our colors.
54:42 - So now that we're done with this, we just want to make sure that we are doing the same thing.
54:46 - So forward colors. And the last thing I want to make sure we have is the font styles.
54:54 - So if we go into our style guide, the fonts is this inter font here.
55:03 - Let's get that font and weights 400 and 700. So in Google fonts, let's scroll down to 400, select the style.
55:13 - And then we also want 700 bold. So we've selected those styles and now we're going to just copy this stuff here.
55:22 - And we're going to go into our next HTML file and we want to blow the fonts here.
55:34 - I don't know if I need to add this comment, but Google fonts, just so we remember.
55:40 - Then we need to add the font family.
55:44 - And, you know, this might seem a little overkill, but I'm going to create a variable for the font.
55:52 - Font, Enter.
55:59 - And we just need the value. And I didn't add it to the root element.
56:07 - There you go. So now let's say in the body wants to say font family. And we'll call that variable by saying var font enter.
56:17 - And that's kind of how you use CSS variables. So we'll be adding those later on.
56:23 - Okay, so don't know the fonts. So let's close that. Go into our index, make sure we're forwarding fonts.
56:32 - I think it was plural. Let's check. Yeah, fonts plural.
56:40 - Okay, so then let's just double check this. So in our utility folder, we got our index file, which is open here.
56:46 - Breakpoints, colors, fonts are there, functions are there. Okay, perfect.
56:51 - So now we are done with the utility styles. So we're done with our utility styles.
56:57 - Okay, the next thing we're going to set up is our global style. So kind of in the same way that we did with the utilize styles.
57:03 - I'm going to go into our global sub folder, and we're going to create some SAS styles. So in globals, I'm going to say boiler plate.
57:13 - This is where I put a lot of default styles. And I'm going to create another one for typography.
57:20 - This is for styles for the text elements, like the H tags and the anchor links and things like that.
57:27 - So I think it's just those two for right now. We might add more later, but for now we'll stick with these two.
57:34 - Okay, so in our global index SAS file, we're going to do the same thing that we did in our util and use the forward rule.
57:41 - So we'll say forward. And I'm just going to add them all even before I add these styles into our levels. So boiler plate.
57:52 - And then we'll say typography. Okay, should be good there. So for the boiler plate styles, one thing I do is HTML.
58:02 - And I like to say font size 100%. This helps with accessibility. And I'm going to say box sizing, border box.
58:13 - And this ensures that if you add padding to an element, the total width is going to include the padding, not be in addition to the padding.
58:22 - So let's say we had like a div and we said width is 300. And then we set a padding of 20 pixels. If we have box sizing, border box, the width plus the padding is still going to be just 300 pixels.
58:35 - And if you don't do it, I think content box is the other option. Let's just see here.
58:41 - Yeah, I think content box. So not border box. If you don't use border box, basically, and you set the width 300 and the padding all around to 20 pixels, it would be the width.
58:51 - It would be the width would be 300 plus 20 pixels on the left, 20 pixels on the right, 40 pixels would be 340 pixels wide. Usually you want the width to be what you set it to.
59:02 - So it's better to include the padding in there. Now we want to inherit this box sizing property from all elements.
59:10 - So before, before, and then after, so box sizing inherit, it's going to inherit that from the HTML element.
59:24 - And for body, I usually like to do some reset. So I'll say margin zero, padding zero, and then we'll set the font family to that font that we just created.
59:36 - So font enter.
59:41 - And I think that should be good for our boilerplate styles. Okay, so we're done with that.
59:47 - And now we're going to add our typography styles and we'll probably add some more stuff here, but for now, let's just start with the H tags.
59:56 - And I personally like to set the margin top to zero.
60:01 - Just because your browser default, you'll have a margin on the top and the bottom. I like setting it to zero and then we'll set the bottom margins, you know, later on.
60:08 - The other thing I want to do is for the anchor links, a visited.
60:16 - And I think a active text decoration, none. So we don't have the underline.
60:26 - Yeah, all right. So that is good for typography. And let's just check one more time.
60:33 - Make sure things are here and that's good. And then our styles, we are using globals.
60:38 - Okay, you might be wondering why I haven't done a use for the util styles.
60:42 - The reason for that is in utils, I'm using things like SAS mixins and functions and variables.
60:51 - And actually, I think I need to move all the CSS variables into the globals because what happens is for the util, something like the mixin is not going to, this is not going to on its own generate any CSS.
61:06 - So we only need to include it when we're actually using this mixin in whatever SAS files.
61:13 - Whereas for things like colors, we actually do want this to get forwarded in the main SAS file because, you know, we need to access these variables and this is not a SAS thing.
61:24 - So any of the SAS things like functions, which aren't going to generate CSS is what I like to keep in the util.
61:30 - So yeah, I'm just using SAS variables. So you just need to change things out a little bit.
61:36 - So I'm going to move the colors because we're using CSS variables and the fonts to the globals.
61:44 - So that should be right. And now we'll delete it from the util stuff.
61:51 - So yeah, things are things are always changing.
61:55 - So now I need to forward.
62:00 - I might actually put these on top. I don't know if it matters, but forward fonts and colors.
62:10 - Okay, so this should work. And we'll find out when we start setting up our gold workflow and compiling our SAS files.
62:18 - Okay, so we have our util and our globals set up. And the last thing I'm going to do is our components.
62:24 - So kind of the same way we have, we're going to create a lot of components as we build this thing.
62:29 - I'm just going to start with a couple that I think we're going to need.
62:32 - So in the components folder, we'll create a new file.
62:35 - And I'm just going to say, since we have those cards in the social media dashboard, I'll say card.
62:42 - This is mainly so that I can just add some test styles so you can see, you know, what we need to do.
62:54 - So we'll just make some sort of fake-ish styles for element of class of card.
63:00 - We'll just say, I don't know, padding, rem.
63:05 - So we're going to use that function that we created.
63:07 - Let's say 20. So 20 pixels all around.
63:14 - And this is something that we can use to test when we're compiling our SAS.
63:17 - And if it doesn't cause an error and it outputs, you know, rem of whatever 20 pixels is, then we'll know it works.
63:24 - And for the other one, we'll also do toggle.
63:27 - And we'll say, we'll add some nested stuff. So maybe toggle, toggle button.
63:34 - And we'll say, we'll pretend this is the styles for that circle in the toggle.
63:39 - So border, radius, 50%.
63:42 - Maybe we'll add the color too. So color, we'll say width.
63:48 - And again, this is just like made up styles. So 16 pixels.
63:53 - We'll say this is the height of 16 pixels.
63:57 - Border, radius of 50. And let's just say background, color. And we'll use our, what that color was.
64:07 - Toggle. So it's just toggle.
64:12 - Here we go. Okay. So we have toggle. We have card. And now we want to add the components.
64:18 - So I think we'll add forward card. Forward toggle.
64:27 - All right. So these are the starter SAS files.
64:30 - We're obviously going to be adding a lot more stuff in our SAS files later on.
64:33 - But for now, let's just close all these out.
64:38 - And, oh, actually one thing I forgot.
64:43 - So in our other SAS files, what we need to do in order to use this RAM function here is we need to import the util styles.
64:52 - So what we usually do is at use.
64:56 - And then we need to get to the util, load utils from wherever we are here.
65:00 - So we're in the components folder. So we need to go one up.
65:06 - And then go to util.
65:09 - And I think we just load it like that. And when you use use, we have to give it a namespace.
65:17 - So I think by default, it will add a namespace of whatever the name is.
65:24 - But I kind of want to not have to say, you know, util.whatever for all the styles that we wrote.
65:29 - So if you import it as a wildcard, then you can just use the names of, you know, the variables or the other thing that you created
65:37 - without having to use the namespace. So it's a little bit easier.
65:41 - But names facing can come in handy if you're, you know, say importing styles from a library or you just have so many styles that they kind of conflict.
65:49 - You might have something like a variable or a mix in that's called the same thing from the two different styles.
65:55 - So it's in that case, if you have that many styles that are conflicting, then you can use a namespace to differentiate between which one you actually want to use.
66:03 - In this case, since this is just, you know, a one page sort of web app, we shouldn't have to use namespaces, but we can always add it later on.
66:11 - So we need to take this rule and we also want to add it to our toggle styles because we're using the REM stuff here.
66:21 - I'm thinking about this variable here. So like, I'm wondering if we would also need to do a use of the globals.
66:29 - I'm not sure. So, you know, we'll see what happens because I think the way the variables for CSS work is it's set on the root element.
66:38 - So since we're loading the global styles already in our main SAS file, it should be fine. It should be able to read that.
66:45 - But we'll see what happens when we compile everything.
66:48 - Now we are actually done with our SAS styles.
66:52 - It's going to exit out of everything here.
66:57 - And we already have a script file. We're good with that.
67:00 - And the last thing I want to create is a new folder called dist.
67:05 - This is where we're going to put our compiled CSS and minified CSS and JavaScript files to load that in our index HTML.
67:16 - So let me actually create a reference to both of those files that we don't have in existence right now, but we are going to generate them with our gulp workflow.
67:25 - So, let's see. Okay, this is in the head. So after the fonts, we'll load our styles.
67:34 - So link CSS. And this is coming from the dist folder, of course. So we're going to say slash dist.
67:44 - Style that CSS. And then we'll load script source, dist script.js.
67:57 - And I think I want to either set, I think I might want to set this to defer.
68:03 - Because in the past, you would have to load the script tag at the bottom of your body.
68:08 - But I think we can put at the top and just set a defer to it.
68:13 - So let's look that up. It's a little JavaScript file to defer.
68:18 - Let's see what comes up.
68:22 - Flavio Cokes. You can always depend on Flavio to have written a blog post about something that you're looking at.
68:28 - Okay, so when loading a script on an HTML page, you need to be careful not to harm the loading performance of the page.
68:34 - Okay, so yes, script is traditionally included in the page this way.
68:39 - Okay, so this is bad to put the script in the head.
68:44 - Because there's a lot of delay reduced introduced.
68:47 - So a very common solution to this is to put the script tag at the bottom of the page is for the closing body tag, which is what I usually do.
68:55 - So the best thing.
68:59 - Oh, I wonder if this is actually the best practice here.
69:02 - So you have to do that if you need to support older browsers that don't support these new features async and defer.
69:10 - So these are the new things async and defer.
69:13 - If you specify both async takes precedence on modern browsers while older browsers that support defer but not async will fall back to defer.
69:20 - So they only make sense when you're using the script in the head. Okay.
69:24 - So let's see.
69:25 - So no defer or no async. We don't want that.
69:30 - So if it blocks parsing on the page, well, deferred is not neither async in order for guarantee anything on blocking rendering.
69:37 - Okay, and then the bottom to tell me the best way.
69:39 - The best thing to do to speed your page is to put them in the head and add a deferred attribute.
69:44 - Okay.
69:45 - Thank you, Flavio.
69:50 - There we go.
69:53 - Okay, so now that we're done with our SAS files and loading our JavaScript file, at least for now,
69:59 - we're going to set up our Gulp workflow and we're using Gulp to compile our SAS to CSS.
70:05 - As you can see, the SAS files are very different from when you're writing styles with CSS with the functions, mixins, and also the nesting styles.
70:14 - So browsers can't read SAS files.
70:17 - So you have to use some kind of tool, a build tool to compile or convert your SAS files to CSS.
70:23 - There are various code extensions that you can use.
70:25 - I used to use the live SAS extension a lot.
70:28 - However, it doesn't support the new SAS use and forward rules.
70:32 - It only supports the old import rules and those are getting deprecated by SAS sometime in the next couple of years.
70:39 - So you kind of want to get used to writing the new syntax.
70:43 - Unfortunately, that extension, the live SAS extension has not been updated in, I think, two years.
70:48 - So, you know, you can find a different extension if you want to try the new syntax with SAS or you can use this Gulp workflow.
70:56 - So we don't really need this file.
70:59 - So let's open our terminal window and we're going to set up Gulp and install a bunch of NPM packages for our workflow.
71:09 - So the first thing you want to do when you're working with Gulp is you want to make sure you have the Gulp CLI installed.
71:14 - So if you don't have it, Gulp-cli.
71:20 - I already have this installed, but if you don't have Gulp CLI installed, you can install it this way.
71:25 - Using the dash G and that will install it globally on your computer.
71:29 - So you can run Gulp CLI from any folder on your computer.
71:33 - So now we want to first create our package JSON file.
71:40 - So I'm going to say NPM is very long.
71:44 - It's kind of bugging me, actually.
71:47 - Let's just rename our folder here.
71:51 - Close folder.
71:57 - I'm just going to rename this to social dashboard, I think.
72:02 - Or maybe just dark light toggle because that's kind of the main thing I was thinking about.
72:09 - Okay, so now it's dark light toggle.
72:11 - We want to create our package JSON file, so NPM install.
72:15 - I'm sorry, NPM, iNIT-i.
72:24 - So now we have our package JSON file.
72:27 - We can now install a bunch of NPM packages that we need.
72:31 - So NPM install, and I'm going to be using my Gulp config that I have from previous projects.
72:39 - So I will, but I will still walk you through how all that works.
72:44 - So we want to install a bunch of packages.
72:46 - So the first one is Babel core and Babel preset-env.
72:55 - And this is used for auto prefixer.
72:59 - There's some CSS properties that need to use browser prefixes like WebKit for browsers that don't support the sort of full thing.
73:07 - So for example, one property for that is transform.
73:10 - So transform is a property that is supported in modern browsers, but for older browsers they may need to use the dash WebKit prefix.
73:18 - So Babel will work with auto prefixer to determine which properties get pre-fixed automatically.
73:25 - So that way you don't have to type it out yourself.
73:27 - So just another way that you can save time.
73:29 - So Babel, and then we're going to install post CSS.
73:33 - This is a collection of plugins that auto prefixer is a part of.
73:39 - So you have to install both of them, I believe, to use auto prefixer.
73:43 - Then we're going to install browser sync.
73:47 - And this will, when we run Gulp, it's going to spin up a local server and it will sort of keep watching your files and reload the website anytime you make a change.
73:56 - So you don't have to manually reload in your browser.
73:59 - We're going to install CSS nano for minifying our CSS.
74:04 - And we're going to install Dart dash SAS because this is the version of SAS that supports this new syntax with the use and the forward and stuff like that.
74:16 - So we need to install that specifically if we want to use those new rules.
74:19 - Then we're going to install Gulp because we need Gulp, Gulp Babel for the Babel stuff.
74:26 - Gulp, Gulp, post CSS, Gulp SAS that will do the SAS compiling and then Gulp Tercer, which we're going to use to minify our JavaScript files.
74:41 - So hit enter.
74:43 - Hopefully I didn't make any mistakes.
74:45 - And we should see all those NPM packages added here in our package JSON file.
74:51 - All right, no errors installing, which is great.
74:54 - And now in our package JSON, we can see all the packages that we added in here.
75:00 - Now, one thing you might have noticed is found three vulnerabilities.
75:03 - So kind of a cool thing that NPM does when you install, it'll actually tell you if the versions you've installed have any security vulnerabilities.
75:11 - So I don't know if this is the right way to do it, but I will just write NPM audit fix.
75:17 - If I can, sometimes I'll type in NPM audit just to see which packages they're talking about.
75:24 - So it looks like Yarg's parser, which is using Gulp and then glob parent, which is used in this Gulp thing too.
75:33 - And then another dependency of Gulp.
75:35 - So I usually will just type NPM audit fix to see if this will work.
75:40 - But I think it may not because it says three vulnerabilities require manual review.
75:45 - Yeah, fix zero.
75:47 - So it's not great, but they're low and moderate.
75:51 - So I'm just going to kind of leave it. They're not high security vulnerabilities.
75:56 - So I think it's kind of okay.
75:58 - I'm not super familiar with this part of NPM and all the dependency securities.
76:03 - So feel free to, you know, flaming the comments.
76:06 - This is a terrible thing to do.
76:08 - But yeah, if it's not like a high level, I'm just going to just going to leave and keep going.
76:14 - Yeah, so now we have our dependencies installed.
76:16 - The next thing we want to do is start working with our Gulp workflow.
76:20 - So in our route, we're going to create a new file called Gulp file.js.
76:26 - And in here is where we're going to write all our configuration for Gulp.
76:30 - And again, I am going to cheat a little bit and use a previous Gulp file configuration and just copy and paste that here.
76:38 - But let me kind of walk you through what's going on here.
76:42 - So in a Gulp file, this is a JavaScript thing that you run on the command line using node.
76:48 - And this is what we're going to use to compile and minify all our files.
76:52 - So at the top of your Gulp file, we are importing all of the NPM packages that we just installed as modules into this file
77:00 - so that we can access them and any functions that they give us.
77:04 - That's what this top section is.
77:06 - Then if you scroll down a little bit, this is setting the SAS compiler to use Dart SAS.
77:11 - And this is again so that we can use that new use and forwards syntax in our SAS rules.
77:16 - So the next thing we need to do is we need to actually compile our SAS and JavaScript files.
77:21 - And that's what this next section here is.
77:24 - So we have a SAS task and it's a function called SCSSTask.
77:28 - And what this is doing is it's running multiple different things and they are using this pipe function.
77:34 - That's a Gulp function to sort of run them one after the other.
77:38 - So what this is saying is this first line is taking the main SAS file, so app SCSS style the SCSS.
77:46 - And it is going to do stuff to this file.
77:50 - And in here, this option is setting source maps to true.
77:54 - SAS source maps are, it's an extra file that's generated.
77:58 - And they're really cool because when you are testing your website in your browser and looking at the developer tools,
78:04 - you inspect a certain set of styles, it will actually tell you the original SAS file and the line number where it came from
78:12 - instead of, you know, some location in your minified CSS file, which is kind of impossible to find.
78:19 - So source maps just makes things a lot easier when you're trying to debug and see where some style rule is coming from.
78:25 - So we're setting source maps to true.
78:27 - So we'll create a source map.
78:29 - And then after that, we are piping the next thing we want to run, which is the SAS function.
78:34 - This is coming from the Gulp SAS module.
78:36 - So it's running SAS to compile the SAS to CSS.
78:39 - And then after that, we're going to run the post CSS plugins auto prefixer and CSS nano.
78:45 - So auto prefixer, as I mentioned before, it will add the browser prefixes to sort of support older browsers for those rules for those CSS properties like transform that need the prefixes.
78:57 - The CSS nano will minify the CSS file.
79:00 - Then the last line here is it's going to set the destination of the final compiled CSS file into the folder called dist, which we created beforehand.
79:11 - You can see that right here.
79:13 - And then the option here is to set the location of your source maps file, which this dot means is going to be set in the same location that we just indicated in the dist folder.
79:24 - So that's what we do for our SAS files.
79:27 - Now, if we go into JavaScript, we're doing a very similar thing.
79:32 - So we're taking the JavaScript file, which is app.js script.js, setting source maps is true, which is a similar thing as our SAS source maps.
79:42 - The next thing we want to do is we want to run the file through Babel.
79:45 - And Babel is going to make any modern JavaScript like ES6 compiled to an older version that older browsers can support because not all browsers can read ES6.
79:57 - I think the only exception right now is IE 11, which is losing support everywhere.
80:01 - So you don't have to include this, but I just like to do it in case you have those edge cases where a user might be using an old browser because their company is still using Windows 7 for some strange reason because they don't want to pay the money
80:14 - to update to a newer version of Windows.
80:17 - So things like that, where people may not be able to use the most modern browsers.
80:22 - And the next line is using Tursor to minify our JavaScript file.
80:26 - And then the last line is similar to what we had with the SAS task, where it's setting the destination of the compiled file into our dist folder and then also having source maps saved in the same location.
80:38 - So that's JavaScript task.
80:40 - So the next thing we're going to do is we're going to add our browser sync functions.
80:44 - And this is, as I mentioned earlier, browser sync will spin up a local server and sync it to your files.
80:50 - And any time you make a change, it's going to automatically reload your local website.
80:54 - So you don't have to manually hit, you know, control R every time you make a change.
80:58 - That's another way you can save time with build tools like this.
81:02 - So what this first function does is it spins up the browser sync server.
81:10 - So this is saying browser sync.init server, and we want to run the base directory of a server from the root location where the Gulp file is, which is here.
81:19 - And then the notify options here are just for the styles that you'll see in your terminal when you're running browser sync.
81:28 - And then it's using a callback function at the very bottom to indicate that it's finished running.
81:33 - Next function is a shorter function. It's a browser sync reload.
81:37 - So it's saying this will literally just reload the browser sync server that we spun up.
81:42 - And we want to combine this reload function with our watch task.
81:47 - So we're telling Gulp to actually watch these files.
81:50 - So for example, this first watch task function is going to watch our HTML files, and then if it detects any changes in them, it's going to run browser sync reload, which will reload the local website.
82:02 - And then the second part of our watch task is it's going to watch any SAS or JavaScript files.
82:07 - And if it detects any changes, it's going to rerun our SAS task and our JS task, and then also reload the browser.
82:14 - So those are all the functions that do stuff.
82:16 - At the very bottom of your Gulp file, we're going to export our default Gulp task.
82:21 - And the default Gulp task is what Gulp will run when you type in Gulp on the command line to start everything off.
82:27 - And so in our default Gulp task, we want to run all our tasks.
82:31 - So SAS task, JS task, then we want to serve up the browser sync server, initialize it.
82:37 - And we want to run our watch task.
82:39 - And the watch task is what we'll keep running when we are doing development.
82:43 - Detect the changes and then reload our website and rerun all of our other tasks.
82:48 - So I know it was kind of fast.
82:49 - I hope this makes sense.
82:51 - I am going to include a link to this whole project on my GitHub repo that I've created here.
82:57 - So I'm going to include a link to all that down below in the description so you can refer to it if needed.
83:03 - So now we have our Gulp file.
83:05 - Let's make our terminal a little bit bigger.
83:08 - So what we want to do is we've already installed our packages.
83:13 - So I think all I have to do is just type in Gulp and see if things work.
83:21 - Okay, error in plug-in Gulp SAS.
83:25 - It says Gulp SAS 5 does not have a default SAS compiler.
83:28 - Please set one yourself.
83:31 - That's weird.
83:34 - I thought I did set it in my Gulp file.
83:40 - SAS compiler.
83:41 - Gulp SAS 5 does not have a default SAS compiler.
83:44 - So what I do when I see errors like this is I literally will copy this and do an adducto
83:52 - go search for it.
83:53 - This next line says both the SAS and node SAS packages are permitted.
83:57 - So I wonder if maybe that's the reason I don't need to say require.
84:02 - I'm not really sure.
84:04 - So let's just anyway copy this.
84:06 - Go to Firefox.
84:08 - Do a search inducto go for this error message and see what happens.
84:13 - Okay.
84:14 - Good old stack overflow.
84:16 - So this happened eight days ago.
84:18 - So this is a very recent occurrence.
84:20 - Gulp SAS recently updated to version 5.0.
84:23 - They describe that it doesn't use a compiler anymore and you have to install it in separately.
84:27 - So they have documentation on how to let Gulp SAS require the compiler with this piece of code.
84:32 - Okay.
84:33 - So I did do similar syntax to this.
84:36 - Instead of require SAS, I wrote required Dart SAS.
84:40 - So I wonder if there's some issue with that.
84:43 - And I rolled back to version 4.
84:46 - Okay.
84:47 - So what I'm wondering is because I know that the Dart SAS version of SAS is the one that has a new syntax.
84:53 - I wonder if maybe that's included in the default stuff.
84:56 - Let's see.
84:58 - Okay.
85:00 - Oh, my granular using products of version 5.
85:04 - We need the migration guide.
85:07 - Okay.
85:08 - Let's do this so you can read.
85:10 - So I'm not blocking anything.
85:15 - Where were we migrating?
85:17 - Okay.
85:18 - Gulp SAS version requires node 12 or later, including breaking changes.
85:22 - Additionally, changes in node itself means that we should no longer use node 5 versus speed of asynchronous rendering with Dart SAS.
85:28 - So I want to see what they're saying about Dart SAS.
85:31 - This is npm install SAS, which I did.
85:35 - var SAS record.
85:37 - Okay.
85:38 - So this is a new syntax.
85:39 - We used to recommend node 5 versus away, but node 5 is discontinued.
85:45 - So it's not saying that we have to, I mean, I guess we can just try this since this is the default thing that they said.
85:53 - Okay.
85:54 - SAS equals require gulp SAS and then require SAS.
86:00 - So go up here, paste that in.
86:04 - I'm just going to comment this out for now.
86:07 - So I wonder if Dart SAS is now just a default SAS version.
86:12 - So what I could do is do another search for Dart SAS 5 Dart SAS and just see if anything comes up.
86:29 - Oh, here we go.
86:30 - Dart SAS is also distributed as the pure JavaScript SAS package on npm.
86:35 - All right.
86:36 - So I guess I don't have to explicitly say Dart SAS for the compiler.
86:41 - Okay.
86:42 - So now let's see if this works.
86:44 - We'll rerun gulp.
86:46 - Oh, let's see what happened here.
86:53 - Module not found.
86:58 - I could not find module SAS.
87:00 - Wait, did I not even install SAS itself?
87:05 - Oh, it's all Dart SAS, not SAS.
87:08 - Okay.
87:09 - I guess that was a mistake.
87:12 - Let's npm install SAS.
87:16 - Okay.
87:17 - So now I have SAS in our package JSON, rerun gulp.
87:24 - Oh, so the, okay.
87:26 - So this is our website, which is good.
87:28 - I did see an error.
87:29 - So let's take a look at that.
87:31 - But I'm glad this worked.
87:34 - Here we go.
87:38 - I'm deprecation warning using the slash for division is deprecated.
87:41 - We removed in Dart SAS.
87:43 - Oh my gosh.
87:44 - It's recommendation, recommendation, math.div, pixels, and then context.
87:51 - Oh, they actually fix it for you.
87:54 - Oh, that's pretty smart.
87:56 - So I guess for some reason the slash, I'm guessing maybe this has to do with the, maybe SAS modules
88:02 - or something.
88:03 - I'm not really sure.
88:04 - So instead of division, you just go math.div and then say whatever.
88:09 - And instead of the division, it's just a comma.
88:12 - So let's go back into our code and change that.
88:17 - Wow, lots of new changes in SAS recently.
88:21 - This is in our function SAS file.
88:24 - So, okay, let's just make sure so instead of this thing here,
88:29 - I'm gonna say math.div. Okay. And then there's another error. There's no module with a namespace
88:40 - math. So I think I need to import that. It's a, it's like a separate SAS module thing.
88:47 - Let me let's look that up. So SAS math. I think we need to do an explicit like import.
88:54 - Okay, SAS math. So it's part of the built-in modules here. So let's look if they tell you the
89:06 - best way to do this. Okay. So here's an example. Use SAS colon color. And this is for the color
89:13 - module. And this is the math module. So I'm assuming use SAS math. So we'll have to add
89:21 - this at the top of this for use SAS math so that this math.div is accessible. Because before,
89:30 - since we didn't import the math module, it doesn't know what this math.div even is. So hopefully,
89:37 - I think that's the only error, other error that we saw. Now hopefully fix this, we're going to
89:43 - do a control C to exit out of our Gulp task and rerun it. All right, no errors. Yay. So we loaded
89:53 - the website. So we just want to make sure that everything is loaded. So I'm gonna go back to the
89:59 - right side. So I want to make sure that our console log messages. Yep. Hello. So that loaded,
90:07 - which is good. And then the second thing I want to check is going back into our code and opening up
90:15 - in our dist folder, the script.js file. So that's there. That's good. And then our final CSS file.
90:23 - So let's take a look here. I'll do an alt Z word wrap. So we can see our files here.
90:30 - We have our global files from the boilerplate, which is great. And then we have the card
90:36 - styles that I added and the toggle button. Hey, it looks pretty good. Let's do another test
90:43 - in our index HTML file. I'm just going to use the h1 tags since I created some
90:49 - styles for that. Oops, h1, enter. I don't want to say social media dashboard. We'll just do this
90:57 - for now just to test the styles. Okay, so we noticed that when we save the index
91:01 - HTML file did reload. So let's check here. Oh, here we go. Let's see if all the styles we wrote
91:07 - are added in here. So the margin top of zero, which is from the typography thing, and then
91:14 - is getting the font family. Nice. And then you can see the styles added here. This is really good.
91:21 - So yeah, it looks like everything's working. Now that we have our files and folder set up,
91:26 - and we have our SAS and Gulp workflow up and running, we can start actually building this website.
91:30 - But before we get too excited and jump in and start writing code, I usually try to go back to
91:35 - design and sort of get a lay of a land and see what my approach is going to be before writing code,
91:41 - just to make sure we're not making any wrong decisions at the very beginning. So let's check
91:45 - out the design. So I have the design from front of mentor open here in Figma. And if you've seen
91:51 - my other videos, you know, usually I have a free plan, a front of mentor, and they just give you
91:56 - JPEGs. But I got the pro plan for this one because I just wanted to show you all what the real world
92:01 - experience is, you know, getting the design from a designer, and then having to work from that and
92:06 - build it. And I actually haven't used Figma before. I've always used Adobe XD at work and sketch in
92:12 - the past as well. But I'm guessing it should be pretty similar to Adobe XD. And looking at the
92:19 - design here, we can see that it has the desktop dark mode. And then it has the mobile design as well.
92:26 - And we have the desktop and mobile for the light mode. And they're also really nice and they give
92:34 - you some the the hover styles. So that's very helpful. And I haven't always gotten that in the past.
92:40 - And this is pretty normal in terms of what you get from a designer. Usually they'll just give you a
92:46 - desktop and a mobile design. I have gotten a tablet design from a designer maybe three times in my
92:51 - entire life. So usually what I've done is just kind of merge the mobile and desktop designs
92:57 - together for tablet view. Just trying to make sure things look okay and sort of use your best
93:02 - judgment. So even though I'm a developer, I do sort of have to make some design decisions sometimes.
93:09 - You can always go back to the designer, have them look at what you've built and have them give you
93:13 - any feedback on it. So now that we have the design, what I like to do is look at the design
93:20 - and see what the sort of general container size is, how things change from desktop to mobile design.
93:28 - So in terms of the container, what I mean by that is if you're thinking about someone who has a
93:34 - really wide monitor, you know, how wide is the content going to be? Because obviously you don't
93:39 - want to go all the way across because then that kind of makes it not very readable. So if we look at
93:46 - the design here, we click on this rectangle, it tells us that it is 110 pixels wide. So that's
93:53 - what our container max width is going to be. So we're going to come back to this when we start
93:57 - writing our styles, but just in general, it's good to see what this is set up. And I want to see how
94:04 - this grid layout changes from desktop to mobile. So on desktop, we have this four column grid.
94:10 - If we scoot over to the mobile design, it stacks to one column. And again, this is a very common
94:17 - design pattern going from desktop to mobile for content in multiple columns. So if we go back,
94:23 - but we can see what some other changes are. Let's check out the text sizes as well. So
94:28 - let's look at the headline here, social media dashboard. If we look on the right side,
94:34 - it uses using the inter font, which we added to the site ready. And it says it's bold and 28
94:40 - pixels tall. So that's the desktop style. So let's see if it's any different for mobile. So we'll
94:46 - just go and figma kind of click until we select just the headline text. And it looks like it is
94:52 - inter bold and 24 pixels. So the H one tag, this is going to be the H one tag goes from 24 pixels
94:58 - and mobile to 28 pixels on desktop. So that's good to know, right? And of course, these are
95:07 - probably going to shrink as well. So this is 24 pixels on desktop. And let's see here might be
95:14 - the same actually 24 pixels on mobile. So you know, these are just things that it's good to
95:19 - see how they change from desktop to mobile. And I think just the last thing was, let's look at the
95:24 - sort of body text for this. This is 12 pixels. It's pretty small. So I'm guessing it's not going
95:30 - to get any smaller on mobile. Yeah, 12 pixels. So the numbers look pretty much the same as well.
95:37 - So there's not a ton of changes between desktop and mobile. There are some layout changes,
95:41 - obviously, going from the four column to one column on mobile. Let's look at one more thing.
95:47 - And that is, you know, when you have items in a grid, whether you're building it with Flexbox or
95:52 - CSS grid, sometimes the order might change between desktop and mobile. So for example,
95:57 - here are the cards, we have Facebook, Twitter, Instagram and YouTube. It's probably going to be
96:02 - the same. So Facebook, Twitter, Instagram, YouTube on mobile. So that's the same. And I did want to
96:06 - check on the order of this bottom grid, because you can see it's Facebook has two cards, Instagram
96:12 - is two cards, they each have two cards. So let's see what they do on mobile for that.
96:18 - So if we scroll down here, looks like the order is the same. So it's Facebook has two cars,
96:23 - Instagram, Twitter, and then YouTube. And I did want to check on that just because,
96:27 - you know, I could imagine maybe on mobile, I don't know why they do this, but you know,
96:31 - what if it was ordered by page views of Facebook and then profile views of Instagram and things
96:37 - like that, and then grouping the likes together. But obviously it makes a little more sense to
96:40 - group things by the social media platform first, and then inside the social media platform,
96:45 - the different metrics that are being tracked. So this looks pretty straightforward. There's
96:51 - text changes from desktop to mobile. There are layout changes from four columns to one column
96:56 - on desktop to mobile. And the order doesn't change, which, you know, obviously we could do that if
97:01 - we had to, but it's sort of nice when you don't have to worry about the order changing. And I think
97:06 - the toggle is the same as well. So yeah, so there we go. Okay, so now we can start kind of building
97:13 - out our styles. And I think I'm going to focus on just building the dark mode version of this
97:17 - dashboard in today's video. And then we'll worry about the light mode, and then the dark light
97:24 - toggle logic and all that in the next video. So let's just build this, you know, make sure it has
97:29 - all the styles from the design, make sure it's responsive. All right, so I'm going to start
97:34 - going from top to bottom, because that's usually how I build things. So the first thing we're going
97:37 - to build is this top sort of title bar with the title, the follower count, and then the toggle
97:44 - itself. And again, we're just kind of making sure it looks like the design. I'm not going to worry
97:48 - about any of the logic right now. We will try to get the markup as close as what we think it will
97:54 - need to be for when we are building logic in, but you know, we're just going to build things as
97:59 - best we can to our ability, and we can always change things later on. So going into our code
98:05 - editor, if you look at our SAS files over here, we have components, and then we have globals. And
98:14 - of course, I already made some styles in the last video with the card, and then the toggle styles.
98:19 - But we're definitely going to be adding to that right now. So I think the first thing I want to do
98:24 - is maybe set some styles for that container so that we can set the max width to that.
98:31 - So I think I'm going to add those styles. I could maybe add it in the boilerplate,
98:38 - or I can make another SAS files and globals for layout. So maybe the layout sounds better.
98:45 - And this is just sort of me making up files and names to my best ability. Obviously,
98:52 - you can create your styles any which way you would like, as long as, you know, they're organized
98:57 - and kind of understandable for somebody else. So we'll say layout as CSS, and this is in the
99:02 - global SAS file. So of course, since we made a new SAS file, we need to make sure that we set it
99:10 - in our index SAS file. So we'll say layout here. So in layout, what I want to do is first want to
99:20 - I need to inherit the util stuff, right? Let's see. I'm trying to see if I can copy it from another
99:28 - SAS file. Here we go. So use util as wildcard, and that will let us use the mixins and stuff that
99:39 - we created in the last video. So like the function to convert from rounded pixels, and then the
99:46 - media query breakpoint for breakpoints. So in layout. So if you remember, I was looking at the
99:54 - design and looking at the container size. So this is actually what I'm going to be setting. So I
100:00 - like to use a class name or something for the container, and then I can reuse that class name
100:05 - to limit the max width of any of these pieces of content to, you know, the container of 1,110 pixels.
100:12 - So we're going to say class of container. And I'm just going to say max width. And it's 1,100
100:21 - pixels, but we want to use REMS because it's more accessible. So we use our REM function. So REM
100:27 - 1,110. And we don't need to use pixels on that because it will automatically add the unit to it.
100:35 - And this is max width just in total. I don't need to worry about having a media query for this because
100:42 - you know, 1,100 pixels is pretty wide. Any mobile device is going to be narrower than that. So we
100:47 - don't need to worry about having a different style for mobile. However, we do want to check on mobile
100:55 - and look at the container there because there's usually going to be some padding because you don't
101:00 - want this to go all the way out to the edges because, you know, kind of need some breathing room.
101:04 - So if we look at here, if I select this card and I hold down alt and then I kind of move my mouse toward the outside
101:12 - of the element, Figma will tell you how much space there is. So it says 25 on the left 24 on the right.
101:20 - We're just going to maybe say 25 on both sides. So what I need to do is I need to add padding,
101:27 - kind of a global padding because, you know, it's going to be the same for all the different
101:31 - elements. So 25 pixels there, 25 pixels here. So instead of having to say 25 pixels of margin
101:37 - or padding for every single individual element, you know, the title, the cards, everything, we can set
101:42 - it globally in one place, probably with a helper class, and then you know that all the items are
101:47 - going to inherit that. So I think I might just be able to say padding. And then this is probably
101:59 - just going to be on the left and the right. Okay. So rem again, we're going to use our function, 25 pixels.
102:07 - And then we just want it to be on left and right. So I'm going to say zero for top and bottom,
102:11 - and then 25 pixels for left and right. Now, this is going to be our mobile default styles. We don't
102:18 - really want the padding for the desktop, because then it's not going to be fitting the design and
102:23 - being 1110 pixels on desktop. So I'm going to use my breakpoint. So break point. And large and up.
102:34 - And we're going to say padding here is going to be zero. So that looks pretty good. And then I
102:39 - guess if you're curious, let's check out what the CSS, the final CSS looks like here. So we can see
102:44 - here. So container class padding of zero. Okay. And then up here container class, max width is,
102:55 - you know, 69 yada yada rims. And the padding is also set. And this second one is inside this
103:02 - media query. So media, media query breakpoint mixing that we created results in the media query
103:07 - of minute width of 64 EMs, which is what we set in our util, breakpoint style. So 64 EMs is what
103:16 - we tagged as the large size. So when we set break include breakpoint with a large parameter,
103:22 - automatically makes your media query for you at the 64 EMs width. So this is usually what I do for
103:31 - containers where, you know, you have some padding for mobile, and then you zero padding for desktop,
103:36 - but then you sort of limit the width. And I think I also might need to center it because we want it
103:41 - to be centered on the page for desktop. So I'll do that by saying margin zero top and bottom,
103:47 - and then auto. And of course, we're going to test this out. If things aren't working right,
103:52 - we can always tweak it when we get there. So it's kind of exit out of these other files that we
103:57 - don't really need. And let's start now actually building some of the markup. All right. Now,
104:04 - when making the markup, I try to use semantic HTML as much as possible. So for this first thing,
104:10 - I think there's a main tag. And then inside main is I think where you put all the other content. So
104:19 - let's actually do a little research. So semantic HTML. So I'm kind of trying to see when you use
104:27 - the main tag. So let's see what sources are good. All right, we'll just go at w three schools,
104:36 - because they're decent. Okay, so semantic elements, yada yada. So section element defines section
104:45 - and document. Okay, the article element. Let's do a search for main. Okay. Hmm, that's not super
104:58 - helpful. There we go. The HTML main tag specifies the main content of the document. Okay, it looks
105:05 - like the main is really encapsulating everything else. So that seems like something we can do. I
105:12 - just want to make sure I'm going to sort of get a second opinion and look at another source and see.
105:20 - Oh, here, Mozilla. I actually try to go to Mozilla. Let's actually search for that. So Mozilla.
105:27 - HTML main tag. Okay, here we go. The authoritative source. So the main HTML element represents the
105:36 - dominant content of the body. Okay, the main content area consists of content that's strictly
105:40 - related to or expands upon the central topic of a document. This is interesting. So the header
105:47 - is separate from the main. So it's like the main maybe is the body of the content and the header
105:53 - is separate. So I wonder if that means that in our design, the social media dashboard, this stuff
106:00 - would be considered the header. And then everything in here would be main. And then each of the
106:05 - grids of cards would be in a section tag. So something like that. So that's kind of what
106:12 - this seems to be saying. Okay, that seems pretty good. The content of a main element should be
106:18 - unique to the document. So now this example is slightly different. In the main tag, it looks
106:24 - like the headline is here. I think maybe the header, I wonder if that would be more like if
106:32 - there was, you know, like a menu or something. At the same time, this is the top and the toggle
106:37 - is sort of in the header of the body. So I think this is one of those cases where there's not
106:42 - necessarily one right answer and the other one's wrong, whether to include this in the main or
106:49 - to have it in the header tag. Again, you know, the purpose of all these sort of guidelines and rules
106:54 - for semantic HTML and other things is to make sure that your code is readable and understandable.
106:59 - So you're not just putting everything in a div in a span. So I think in this case, I can sort of
107:03 - choose what I want to do. And I think I sort of like the idea of having the header be kind of
107:09 - separate. So I'm going to do that. So in the main will be everything else. And we'll add the
107:19 - header tag here. And we're going to add the social media dashboard. And I think
107:25 - the followers content was in there too. And then this dark mode text is I'm assuming is supposed
107:32 - to be part of the toggle. So we're just, we're just going to move this around in here. Obviously,
107:35 - we're going to make some changes to make things more understandable. And then in the main tag,
107:40 - everything else is going to be here. So let's move that. I think I can hold on alt and arrow to
107:46 - move it. Oh, yeah, there we go. There's a lot of little shortcuts in VS code that I still don't know.
107:52 - Okay. And then, you know, in the main, we're going to have different section tags for each
107:57 - section of cards, but we'll figure this out later on. So we'll just leave that link for now. And
108:01 - let's just focus on the header. So save that. And again, this container class that we created,
108:10 - I do want to use that for the header. So in the header, we'll add a class of
108:15 - I like to say header, or I will give a class name that matches the the tag name. And this will help
108:21 - with some of the SAS, the BEM approach that I use for my SAS styles. And you can sort of see this
108:28 - in practice in a little bit, but I'm going to add a class of header. And then I'm going to say
108:32 - add a class of container as well. Let's see how that looks. And it's probably not going to look
108:36 - super different. But okay, here is our website right now. Obviously, it's very bare bones.
108:43 - I'm actually going to exit out of this console here. So we have a little bit more room.
108:47 - Okay, so here we go. So the header is here. And you can see that in the styles, it has all the
108:54 - styles from the container class. Max with is that padding? And it should be zero padding for desktop.
109:00 - So let's see if I just need to make it wider. Okay, there we go. So padding zero here. I think
109:06 - just because I'm zoomed in, desktop doesn't start to like right out here. So now I'll make that a
109:11 - little bit smaller. So let's change our breakpoint SAS file here. So large is 64 EMs. And that is
109:23 - 1024, I believe, according to my little comment there. So let's make it smaller. Let's say maybe
109:30 - desktop styles will start at not sure. Let me see what some tablet styles are. So let's go to
109:38 - maybe iPad Pro. So it's 1112. I mean, just because the tablet is using, you know, 1112 as its width
109:49 - doesn't necessarily mean that has to be, you know, tablet styles. Because these sizes here,
109:55 - it's not necessarily, you know, small has to be mobile, medium has to be tablet, large has to be
110:01 - desktop. But it's more like, depending on your screen size, how does the design change? So
110:05 - I think in the interest of making this sort of reflective design a bit better, I think I'm going
110:11 - to say maybe 950 pixels for where the large styles start. So I regret this later, but we'll see. So
110:20 - 950 up and then 949 down. So we do need to do some calculations here. So 950 divided by 16,
110:29 - because 16 is a base font size. And 16 rems or ems equals, I'm sorry, 16 pixels equals one rem
110:38 - or one em based on the root. So 59.375. Let me just make sure this sort of looks okay before I
110:48 - added update the break points down media query. So reloaded, I think,
110:53 - inspect this. Okay, so it's still using the mobile styles here. Let's see what what point
111:01 - still bit, you know, I think this is okay, because you can still see the inspector on the side. So
111:07 - we'll leave it at that. And then we're going to update the break points down. So 949 divided by
111:14 - 16 is 59.3125. There we go. Okay, so hopefully we won't want to change that anymore. Okay, cool.
111:28 - So now the header has no padding, because it's the desktop styles here. And as we get smaller,
111:33 - we can see that padding changes, you can see that this kind of moves in with the padding. So that
111:39 - seems pretty good to me. Now, the second thing we want to do is get the toggle stuff, right,
111:45 - because we want this to be all the way on the right side. And when I'm building stuff, I usually
111:50 - try to kind of start from the big general styles and then slowly progressively work my way down to
111:57 - get the more sort of detailed styles, like, you know, the font size and the space between the text
112:04 - and stuff like that. So right now we're just going kind of big general. So I want to make sure this
112:09 - is two columns with this title on the left and the toggle on the right. So I think what we need to do
112:18 - is I need to figure out what the toggle markup should be. And I believe I did take some notes on
112:28 - this last time. So open our notes file here and see what we said. Here we go, accessible markup.
112:40 - So this is a radio buttons, and it was supposed to be a field set legend with a radio button list,
112:52 - I believe. See, I feel like I just had something else. Let's check out this code pen.
113:05 - Okay, so the code pen uses a radio button list, a radio button list. And then if you go here,
113:12 - a field set legend, and then it looks like in this div is the on and off each with an input and a
113:21 - label for each option. Okay, so I think I might sort of copy this approach. Let's check out this
113:28 - link. I'm designing and building toggles, which is Sarah is a very experienced, authoritative person
113:35 - in the world of CSS. So she is a good source for stuff like this. Let's see, let's try to find
113:42 - them what what markup she was using. Okay, let's code pen for it. There we go, a little space there.
114:03 - So she also is using a field set thing. So this makes me think that I should also be using that.
114:09 - And then there's a div surrounding the toggle with both options. And then again, it looks like
114:16 - each option has a label and then a radio input. Looks like she wrapped the two inputs in a span,
114:27 - which is a little bit different from this one here. Actually, there's no div. Okay, so
114:36 - it's a little tough because I'm not super familiar with the toggle stuff. So you just try to find
114:43 - good sources and see what they do and try to understand, you know, why they did what they did.
114:50 - So okay, for the toggle, I want to be in a field set at an area label. This is for screen readers,
114:57 - theme switcher, value, and then the role is radio group. Not sure what their role thing is.
115:03 - So let's look that up. So field set role. Field set role. And you know, I obviously, I'm not working
115:14 - on a deadline per se, but you know, if I was, if this was a project that I did do for work in the
115:19 - deadline was like coming up really soon, I probably wouldn't be spending as much time researching
115:24 - these different things. But I have a time now and it's a good learning experience because I can
115:28 - learn something that I didn't know before. So let's do a control F and search for role.
115:38 - So what the role is maybe an area thing. This is hard.
115:49 - Let's see if they have a radio group thing here. Oh, radio group, radio group role.
115:53 - It's a group of radio buttons. Okay. So I think I will probably sort of follow Sarah's approach
116:00 - here. So we'll do a field set with area label and then add a role of radio group.
116:08 - So going back to our index HTML, we'll go field set.
116:14 - Oops, nice. I have deleted dark mode here, but dark mode.
116:24 - Okay, so field set area label, I believe it was. And this is theme toggle.
116:35 - And then the role was radio group. Thank goodness for auto complete, right?
116:41 - Okay, so we got that. And then she is encapsulating both toggles in a div.
116:52 - And then each one has label and then span label and then it has a span with the input type of each
117:00 - option. Let me try to zoom out a little bit to get it formatted better. Okay, so here we go.
117:07 - Span is the wrapper surrounding the light input, the dark input, and then this is background stuff.
117:16 - The background, which is this gray thing I'm guessing here, and then the switcher,
117:20 - which is the pink, like button thing. And the other sets you are a hidden equals true because
117:25 - you don't need that with a screen reader. So yeah, I really like Sarah's approach here.
117:30 - Kind of makes sense once you delve into it and look at the words that you don't understand.
117:35 - So I think we'll maybe do the same thing. I might actually put a div in here instead of a span
117:40 - just because, I don't know, I do that. So in here, we'll do a div.
117:51 - And she did a wrapper. So I guess I could do that. So dot and we'll say toggle underscore
117:58 - underscore wrapper. And this is a BAM or block element modifier way of doing a class. And I'll
118:05 - show you what that's going to look like in the SAS styles. Okay, so in the wrapper, we have
118:11 - the inputs. And again, we're having we have three inputs based on our research last time.
118:17 - So we'll just do this. I might honestly just like copy this
118:22 - input and then the background, which I guess I do need.
118:35 - And then you got a light and dark label. So this one label for light means that
118:43 - it will associate this label with the input element of ID of light. So that's outside the toggle
118:55 - wrapper. Yes, it's outside the wrapper. So do that. We'll add another one for dark.
119:01 - And then I think we can just delete this dark mode thing. So if we go back to design,
119:13 - it says dark mode. So how does this change from dark mode to light mode? And let's look at the
119:18 - design. Hmm, interesting. I might change this up from this design so that it'll actually say
119:26 - dark mode in light mode. Let's go back to our notes one more time and look at the example of
119:33 - that three option toggle. Okay, so three ones, it was like one on the left one, the bottom one
119:44 - on the right. So we'll probably we'll probably do that too. Yeah, and then the middle option is
119:51 - going to be the system preferences, I believe. I don't want to put that one. I think I'm just
119:55 - going to add it here for now. So let's make one for system preferences. Let's say ID of system.
120:03 - And I think the dark is going to be on the left side for from this design. Yeah, so light is on
120:09 - the right. Dark is on the left. So we're going to put dark. Oops, dark. And then system.
120:20 - And I'm moving these elements around by holding down alt and then use up and down arrows to
120:27 - scoot it around. So that's a handy little tip that I found out recently. And then I don't know
120:31 - about what should be default checked. I think we want the system preferences to be default,
120:36 - so I'll just say like that, you know, add another label for system preferences.
120:40 - Maybe system prep and then move the dark up to the top and light down to the bottom.
120:52 - This is going to look pretty ugly, I think. Oh, I forgot. So the toggle wrapper. So
120:59 - instead of see, toggle is just going to be toggle. Okay, now look at our website. Okay, so we can
121:04 - see now that we have the radio buttons for our toggle. And then we have the text here. And it
121:11 - looks like there's some default styles with the field set setting a border. So we probably are
121:17 - going to set that to none. None like that. So let's make sure we have our classes correct in the
121:26 - markup. And then we'll add our styles. So okay, so this is good. I think I'll add a class for the
121:35 - field set to say toggle. This is the sort of parent element of this whole thing. So we got toggle
121:45 - for the field set. And then we have label and we got toggle wrapper. And we have each of these
121:51 - inputs and we have the toggle background toggle switcher. Now I could, if I wanted to be really,
121:57 - I guess, detailed about, I could add a class with a toggle underscore and a score for the labels
122:02 - and the inputs, but you just kind of got to balance out, you know, how detailed you want to be.
122:09 - I'm okay just having this toggle thing and then adding some element selectors. So let's add that
122:14 - now actually. So in our SAS styles, the toggle is it's kind of own thing, right? So I'm going to
122:20 - add another Oh, I already made the toggle component SAS file. So here we go. I don't remember if this
122:26 - is something I actually needed or not. I feel like maybe not. Oh, this is supposed to be the circle
122:30 - thing toggle underscore underscore button. So I guess I can add that in here button.
122:38 - So we got toggle for the field set. And I wanted to get rid of the
122:44 - border. So border none. And then actually let's try to put both of them on the screen.
122:56 - We've got a toggle and we have toggle wrapper. So this ampersand means it will inherit or for
123:07 - lack of a better word what the parent selector is. So the ampersand in this case will be toggle
123:13 - and then underscore underscore wrapper, which is which is what will match the markup class here.
123:18 - So wrapper and then we got the input type radio, which I guess we'll need something. So input
123:28 - input and then type equals quote radio. And then we got toggle background
123:37 - and toggle button. Oops. Okay. And then I guess we can we'll do label at the bottom.
123:48 - So I usually try to follow the order. What else I just wanted to sort of sort it by
123:53 - the element. So I might put the label up under the input, but let's just go by order in this case.
124:00 - So now we got our style name set. Let's go back to our site. So we can see in the header,
124:08 - we got our h1 total followers field set. Now I want to group together the h1 and the text total
124:16 - followers because looking at the design, the social media dashboard title and the followers
124:23 - text is grouped on the left and the toggle stuff is on the right. So I need to probably put the h1
124:30 - and the text in a some kind of container thing. So I will create a div and I'll create a class of
124:37 - maybe header underscore underscore title. Press enter, select those and move it up there.
124:49 - So now we got header title and then toggle. Now for this header stuff here, I'm going to create a
124:57 - new sess file called header.scss. So you can kind of see how we break apart the website and the
125:05 - different components and then make sure we add header. It will put header first. So I'm going to put
125:12 - header first in the markup and then toggle second. So we'll save that and then in header.
125:21 - And this is why I'll show you here. This is why I added the class of header to the header element.
125:28 - This is so I can do this. I can say dot header and then again ampersand for header underscore
125:36 - underscore title for this. So I do this because if I didn't have the header here, I would have to
125:44 - say header element. And then here I'd have to, I couldn't use the ampersand thing.
125:50 - So maybe there's another way around that in terms of making your styles, you know, follow the BEM
125:55 - model. If there's a better solution, please let me know in the comments because I don't have
126:00 - things right all the time. But in our case, we're going to say header and then header title.
126:04 - So now what we can do is for the toggle, I'm actually going to add another class using the
126:09 - header name. And we're going to add the styles for the layout in the header assess thing. So header
126:15 - toggle. Oops, not tickle toggle. I know this seems a little bit redundant, but it's going to allow
126:23 - us to keep things here in the header styles. And this is to control the layout. So having that
126:30 - title on one side and then toggle on the other side. So now what I'm going to do is I think for
126:36 - this header stuff, I'm going to make the header element be a flex parent. And you can also use
126:41 - CSS grid for some reason just reach for flex box, maybe because I learned it first before CSS grid,
126:46 - but it's kind of my go to when I'm doing layout stuff, especially if I'm not super complex.
126:51 - So we'll do header element is going to be a flex parent. And then each of the header title
126:57 - and the header toggle are going to be flex children. Now again, we want to do the column stuff only
127:03 - on desktop. So not mobile. So I'm going to use the breakpoint, include break, breakpoint large,
127:12 - and then set display flex. Now, they're going to be on either side. So I think I want to do justify
127:22 - content that will control the alignment along the axis. I want that to be I think space between.
127:31 - So add any extra space between the flex child items. And then for title and toggle, I think by
127:37 - default, if I don't set the flex property explicitly, it'll just set it to flex of one. So let's check
127:44 - that out. Nothing happened. Let's see if my header styles did anything. Okay, something is not
127:57 - look down here in our terminal. There is a error here. It says undefined mix in for the include
128:04 - breakpoint large. And that is because I didn't do the use rule. This is the probably one of the
128:13 - biggest differences with the new SAS module things. So I can kind of forget about that.
128:17 - Okay, so now, okay, so now it worked. There's no errors. I put this back down here.
128:25 - And looks like it's still not. Oh, wait, it only has class container. Where's the class of header?
128:34 - Did I not save something? Oh, yeah, I forgot that I took it out.
128:37 - Uh, okay. There we go. So now we got the title on the left with header title.
128:47 - Yeah, we got the header toggle on the right. And you can see the max width thing is working.
128:54 - So yeah, and then on mobile, it goes to one column and two columns here. So I know it doesn't look
129:01 - pretty, but we're really just focusing on these kind of functional sort of bigger, broader styles
129:09 - first before we get into each item. So I'm pretty happy with how this is working. Yeah, looks pretty
129:15 - good. Um, let's see. So the next thing would be probably to start styling the header title.
129:25 - So obviously this is very different from what the design looks like, right? And I think what we
129:30 - need to do is actually set the background of the entire page. So let's see with it. So I'm clicking
129:35 - on the artboard itself. And then here's the fill. One do you want F two nine? And I should have
129:41 - all the colors, um, or what the, oh, and global colors here we go. Okay, so here's the colors.
129:51 - I think this is, yeah, dark background.
129:54 - And so right now I'm just going to do this and for the background of the body, I will
130:03 - probably put it in boilerplate. Yeah, let's do that.
130:06 - And then we will just hit default color of white, the dark text to. Okay. Let's see how that looks.
130:28 - Yay. So it's dark now. So let's style this title thing here. So we got the font of Inter,
130:35 - bold and 28. Let's see how this compares to this one here.
130:42 - This is 24, 28 and 24 for the H two. So, okay, let's add that. So this is going to be in H,
130:53 - the H one tag. So I'm going to put it in the global's typography sass file.
130:58 - So we'll add under the H one tag styles that I already set.
131:01 - Font size, and this is for desktop. So we'll add the mobile one right after. So include breakpoint,
131:10 - large font size, rim function 28. Now at the same time, let's check the mobile one.
131:19 - 24. So font size, rim 24. And we'll save. Oh, oh, I forgot the thing again.
131:35 - There we go. Okay. That's going to happen a lot. So I'll get more used to it. Oops.
131:42 - Oops. Here we go. Inspect. Is this the same as the design? I feel like it's a font the same.
131:53 - Maybe it's just bigger on here, because I'm zoomed or something like that.
131:59 - And the font is Inter. Let's see. Georgia. I sure it works.
132:06 - Yeah, it seems to be loading the font. So if I make this name something that doesn't exist,
132:13 - it will skip this and go to the next option, which is Georgia, which is a Sarah font,
132:17 - so you can sort of check and make sure it's actually working. But it seems to be loading.
132:22 - I think maybe it's just the zoom is a bit different from the design or something,
132:26 - because it's like, you know, I'm zoomed in quite a bit on the page. Yeah, that seems pretty similar,
132:31 - actually. Okay, cool. I sort of don't like that. It's like, um, right up to the edge like that,
132:39 - because when is this padding that I added? Okay, so how's the padding now? The padding goes away
132:46 - up here. This is because the max width is 1110, which I'm under right now. So the problem is I
132:55 - need to add padding when the viewports below 1110. So that's why. So I wonder if that means I need
133:02 - to change my breakpoint thing. Think about this. So that's in the layout SAS file. So I can do,
133:09 - I can do one of two things. I could have this padding no matter what viewport it is, or I can
133:13 - make the large breakpoint 1110, which maybe I should do at this point. Yeah, I think I need
133:19 - to do that, because if I had padding on desktop styles, it'll sort of cut into the width of the
133:23 - content. And you know, in the design file itself, this is like the whole the content is going all
133:31 - the way to the sides. So yeah, let's adjust this. So this is again, something that's very common.
133:39 - So let's change to 1110. And then I'll just zoom out on my browser so you can see this
133:47 - up styles better, provided by 1669.375 changes like this, 1109. All right, let's check out our
133:59 - website again. Okay, so good. So now you can see there's padding right when it gets to here.
134:10 - It's actually here, there's still a little bit of, I wonder if I get one pixel less than it'll
134:22 - make this 1109. Let's see if that helps. No, I want to go the other way, so 111. Good boy.
134:45 - Do you like the weird little things you kind of get hung up on? So 69.4375.
134:49 - So what I'm doing is I'm trying to trigger the desktop styles, which has no padding a little bit
134:56 - later, so that hopefully, I don't know what's going on here. I actually need to err on the side
135:07 - of like giving it a little bit more. So let's say 1115 69.6875. Okay, I'm probably spending too much
135:23 - time on this little thing, but it's kind of bugging me when it's like almost to the edge like that.
135:30 - Let's say 1150. Just really like go 71.875. 71.875. Now the desktop styles aren't going to hit till
135:46 - much later. You can see this. So this is still padding. There we go. Okay, that makes me feel a
135:55 - little bit better. Let's go back and fix the other one. So 1150. So this is going to be 1149.
136:06 - 71.8125.
136:12 - Okay, much better. Yeah, so it just kind of bothers me when it was going all the way to the edge
136:18 - like that. But now we can see it's happily going up here. I wonder if medium, maybe I want it to have
136:30 - two columns from medium to yeah, let's do that. Um, where was that in the header? So include break
136:39 - point large. So I want this actually start doing the flex boxing at tablet size, which is medium.
136:45 - There we go. So now it's going to stay too calm. It's just for a little bit longer.
136:51 - So this is just one of those things where you kind of make your best judgment based on how things
136:57 - sort of end up looking. All right, we're getting somewhere people. Okay, so we got the text set
137:04 - here. Now we want to control the spacing. So right now this is using the default browser
137:10 - spacing here. So it's adding about 16 pixels of margin on the bottom. And it looks like it's
137:15 - more space than what we have in design here. So let's see what design actually says. So hold on alt.
137:24 - Um, this is hard because gives you a font size, but is there like a line height thing? Because this
137:31 - only says three pixels of space, which seems like very little, but maybe that is what it is.
137:37 - Try to match the zoom on the design and the website.
137:43 - Okay, so let's see what three pixels of margin and bottom will look like.
137:49 - And I like testing things in the browser because, you know, you can just test things
137:54 - here. And that looks sort of actually it does look pretty close. Oh, does it tell you the line
138:03 - height? So it tells you the font size, but oh, weird, there's no maybe because it's like just
138:11 - going to be one line. I actually like to set the line height to 1.1. Did I do that here? I didn't.
138:23 - Because line height is sort of the space that each line of text takes up. So if I increase that,
138:28 - you know, you can see it kind of gets bigger and bigger like that. That's obviously too much.
138:35 - I sort of set a line height of 1.1 globally for h tags.
138:42 - And then that's sort of like a ratio. So it'll, as a font size changes,
138:45 - it'll, the line height will change with it. So that's one thing that I like to do.
138:49 - And globally. Okay, so I think the h1 margin bottom of three is fine. And I'm guessing it's
139:02 - probably going to be the same for mobile. So let's just set it here. margin bottom ram three.
139:09 - There we go. That looks close to the sign. Now we do want to also maybe add some spacing between
139:20 - the top of this and the body. It looks like if we compare these two looks like it's sort of
139:28 - centered vertically. So there's a bit more space up here, 49 pixels to the top from the toggle
139:36 - and 36 here. Yeah, because it's centered vertically. So to center vertically, we'll do
139:44 - the line items center.
139:52 - Obviously, this is not looking way should later on. But we're going to do, I want to add some space
139:59 - so it's not just flush to the top. So I think I'll add maybe space should be in the header element.
140:08 - Yeah, I think it should be in the head element. So then whatever's taller will have the space.
140:12 - So 36 pixels to the top. Yeah, I'll just do header at a margin top to that. Oh, let's check on mobile.
140:21 - 36. All right, the same makes it easy. So the header element, I want margin top of 36.
140:33 - Okay. So now there is some nice space here. And it looks like
140:43 - there is 46 pixels space under the header and to the cards. Actually, let's just take a quick look
140:48 - at different spacing here. 30. And this is going to change because of, you know, when it's responsive.
140:56 - So just give me four columns. Okay, so there's 46 pixels space vertically between sections.
141:04 - And then 24 between the title to here. And there's more here. Okay, so
141:09 - what I could do is add that 46 pixels of space to the container class, I think.
141:18 - See what mobile has. It's 40. 46. Let's just say 46 globally in the container class.
141:33 - So there's slightly different from a design, but I think it's probably going to look okay.
141:37 - And we can always tweak it to be more exact mass to design later on. So for margin,
141:42 - it's going to be zero top auto on the sides. And then 30 46, I believe. And I think this function
141:50 - should work in here. Should still be fine. So now you can see it's 46 in the container. All right,
141:59 - okay, cool. So yeah, a little more breathing room here. So let's do the total followers text now.
142:08 - So you can also click in the left sidebar. So it is interval and 14 pixels tall. And then the
142:16 - color is this sort of grayish blue color. So 14 pixels. So let's go to our index.html. And I think
142:27 - I just need to put this in maybe a span header subtitle. And I could have also called this header
142:41 - on a score on a score followers, but we're just going to do header subtitle. Font size is 14.
142:51 - And we need to set the font weight explicitly. The browser will automatically make your H tags
142:58 - bold, but we need to do this here. And I personally like using numbers for the font weights. And then
143:05 - we can do the color to what's that sort of grayish. Oh, this one, dark text one.
143:12 - Var, dark text one. There we go. It's getting a little closer to the design with every little
143:25 - thing we add. Okay, now let's look at the toggle and sort of get that all set up. So again, we're
143:32 - going to make the toggle look a bit different. We're going to go with the see where was it.
143:38 - Here we go. So this three position toggle here will be dark system preference. I might just say
143:44 - system and then the light on the right side. So obviously we need to do a few things when we
143:52 - look at what we have now, because right now it has the default radio button selected.
143:57 - And we need to hide them in some way and then add the markup and styles for the actual toggle,
144:05 - you know, with the toggle background and then the toggle button. So let's look at the examples
144:10 - that we have here and check out the styles that they had. So let's see what we got here.
144:17 - Let's just inspect the toggle here. Let's put this on the right side.
144:22 - Okay, so if we look here, here's the label. So we have this wrapper thing. It looks like the
144:40 - wrapper has the background color. Okay, and then the radio buttons, this is what we have,
144:47 - the input type radio, it sets you to display none. So that's probably what we're going to also have
144:52 - to do. And actually, let's look at Sarah's example here. Let's see how she treated the radio buttons.
145:04 - So she did something interesting. She said display in line block opacity set to zero.
145:09 - And my guess is because maybe, how should we do this maybe on the bottom? I'm trying to like
145:17 - display this stuff, but then not have it block my little camera thing. So yeah, she said it to
145:23 - display in line block margin, right negative to see what happens when we uncheck the opacity.
145:30 - Okay, that's interesting.
145:31 - Okay, you can see, you can actually see the radio button is like really big.
145:39 - And then let's see where's the toggle. Okay, so that's a toggle. This is the circle switch thing.
145:46 - Interesting. So I'm not sure why she set the height of the radio buttons to be the same
145:52 - size as the toggle. I'm sure there's a good reason for that. It's really interesting.
145:56 - And my guess is she didn't want to do display none because I think
146:03 - I'm not positive. I think that would sort of interfere with how screen meters or maybe if
146:08 - you're navigating the website through the keyboard, you want to be able to select, you know, if you
146:13 - if you're tabbing through stuff. So this lets you, oh, this is interesting. So I hit tab
146:19 - to highlight the toggle and then I'm using the right and the left arrow keys and up and down
146:24 - works to to navigate. So I wonder if this other example will actually do the same thing. So let's
146:30 - tab. Oh, yeah, this is not tabble. Interesting. Huh. Is it really not tabble at all? Oh, here we go.
146:45 - I can't navigate it. Oh, here we go. So you can do this, but let's do display none.
146:58 - Yeah, I think maybe.
147:03 - Yeah. So my guess is we don't want to do display none because if you have someone
147:09 - navigating the keyboard, you want them to still be able to, yeah, navigate, you know, if they can't
147:18 - click on the radio button itself. So I think for that reason, we're going to maybe go with Sarah's
147:25 - examples. So let's kind of open that up. Okay. So I think we did do very similar markup to what
147:35 - she had here. So again, the radio button styles, which are also right here and the right here,
147:40 - display none block margin right is negative two. I'm just kind of curious why she did, you know,
147:45 - where these styles are coming from. So I guess maybe that's to put them both
147:51 - on the same row. Let's look at the toggle and I'm actually going to maybe
147:57 - set opacity. I'm sorry, you can't see that here, but
148:00 - opacity set to 0.5. So we can sort of see the radio buttons through the things.
148:16 - So let's go back to the radio button.
148:23 - I guess since it was set to width of 50%. Oh, I think I'm guessing she did that so that you can
148:29 - navigate it a little bit easier. Let's maybe set the so this way.
148:39 - Yeah, I don't know why it makes a difference, but either way,
148:43 - being able to navigate it with the arrow keys is huge. So we're going to use her styles, I think.
148:49 - I don't know if I'm going to need to do display like the style that she did here.
148:52 - I'm sure there's a reason for that, but I think I'm just going to make sure I'm setting the opacity
148:55 - to zero instead of display none for the radio buttons. So let's just start adding the styles
149:02 - there. So this is for the toggle. So let's close these out, split the toggle to the right so we can
149:12 - see both the toggle and then the markup. Okay, so input type radio, we're going to set opacity,
149:20 - opacity to zero. And go to our site. I can see here that is indeed.
149:32 - It seems like it's hard for me to tab into that.
149:47 - So it's like if I just click on the page, click on tab.
150:01 - Let's reload this just to see how it looks like default. Okay, click on the page,
150:06 - click tab to tab through different controls. It's interesting.
150:13 - I think there's some kind of highlighting styles for this. It changes to red. Yeah, okay, so
150:21 - I can see here the focus on the toggle is has some additional styles to
150:51 - see. Where's the focus style set? There you go, focus see toggle switcher. So this is the
151:04 - sibling selector. So the focus pseudo pseudo class, I think it's called is this the focus
151:13 - pseudo selector sibling to toggle switcher. So is it the background that's being selected?
151:21 - Let's see, focus. Oh, it's the inputs. So we'll just kind of remember that to add a different
151:28 - style for the focus. If one of the radio buttons is focused with the keyboard, I'm guessing I need
151:36 - to build the background of the toggle switches now. Sorry, this is like really annoying.
151:47 - Let's try doing this. There we go. Now you should be able to see everything. Okay, still figuring
151:52 - things out people. Okay, so the toggle wrapper has the background styles, and the wrapper is
151:59 - what is containing everything, like the inputs, the labels, and then these spans for the background.
152:06 - So that is what I have. So maybe we'll start with this, setting these styles for that.
152:12 - So if we look at the design, background is going to be this linear gradient thing.
152:17 - And here in Figma tells you linear gradient is a way to export this style, the CSS, I wonder.
152:34 - So I feel like they do,
152:38 - there should be a way in Figma, I think, to get the actual CSS rules for like linear gradient.
152:49 - Yeah, let's see. Oh, here we go, export.
152:57 - I mean, I can obviously do it manually, but I would kind of like to see if Figma has that
153:03 - capability. So Figma export linear gradient CSS. Okay, this looks promising.
153:16 - Copy is CSS. So
153:22 - gradient copy as CSS. Okay, let's check your Figma handbook. Exporting CSS code.
153:30 - The code tab in the properties panel. Oh, this is exactly what I want. Okay, the code tab in the
153:37 - properties panel. So here it is. So the code tab in the properties panel. Where is that?
153:49 - Oh, inspect. Oh my gosh, this is amazing. I actually don't know if Adobe XD has this capability,
153:57 - but this is sweet. So linear gradient, yes, it has a degree, which is the angle of the gradient,
154:02 - and then it goes from 0% for the, I'm guessing blue color to this at 98. No, this is great.
154:10 - This is a huge time saver. I kind of can't believe that it's that easy.
154:18 - So this is going to be the toggle background. So the toggle background element, this will set
154:24 - the background. And we're going to replace this with the CSS variables. Let's turn off
154:37 - word wrap really quick. So the green color looks like toggle background and it's the first one,
154:43 - but it's fine. Far and then toggle background start. Okay, now let's see if that works. Let's
155:00 - check out our site. Nothing's there. Your toggle background is probably because there's no height
155:08 - or whatever. So let's find out what the height is. 24 pixels tall. So height 24 pixels.
155:23 - It's not working probably because it's not display. Let's see if
155:29 - there we go. So maybe I should set the height on the toggle wrapper and then sort of set the
155:37 - height to 100% for any of the elements inside that need that that way. I'm only having to set it once.
155:44 - So toggle wrapper, that is a div. So I don't need to set display block because display block
155:52 - by default. So I will set height to and the 24. Don't remember. Yeah, 24. Okay, so let's save that.
156:04 - And then oh yeah, I probably also want to set the background to height 100%. Don't remember if
156:13 - I need I might need to set a display block on that too. Let's see. Yeah, I need to display block.
156:25 - Okay, now we have a nice little gradient there.
156:28 - Now it has a rounded corners there. So maybe I'll put that on the toggle wrapper as well.
156:37 - And that was 12 pixels of border radius. So we'll do it on the wrapper.
156:44 - Border radius. Man, this function is a huge time saver. And I think I need to do overflow hidden
156:53 - so that it'll get it'll cut off the linear gradient according to the border radius that I just set.
157:01 - So here we go. Okay, something got cut off. I'm guessing because this toggle thing. Hmm, so I'm
157:10 - gonna be able to do this. So I think I need to move all the styles into the background.
157:18 - I think that's how Sarah had done it. So here we go. Yeah, we'll just set it here.
157:29 - Okay, there we go. And it's this width because of the text inside here, I'm guessing.
157:36 - Because the background to display block is taking the maximum amount of width from its parent,
157:44 - which is this. And the width of the toggle wrapper is getting its width from the content inside,
157:49 - which is, you know, the text here from the labels. So we'll figure that out in a second.
157:56 - Let's go back here. And yeah, so it looks like I'm just like copying Sarah's code,
158:01 - which I guess I kind of am. But at the same time, I'm sort of studying it and trying to understand
158:06 - the principles behind it. So I'm not just blindly, mindlessly copying and pasting code and just
158:11 - hoping it works, which I do do sometimes. But we're just studying existing code to try to understand,
158:17 - you know, how it works under the hood. I think that's a completely valid thing to do in the
158:21 - essence of being kind of honest here. What I might actually do is add a little comment
158:30 - with where I got the code here. So one, I think people have different approaches for how I do
158:36 - comments and people don't like comments at all. I personally would find things helpful like this
158:40 - if let's say something's not working, knowing that this is where some of this code came from will
158:44 - help in terms of being able to bug fix more quickly and efficiently. And secondly, it it's just sort
158:51 - of giving credit to where where this all came from. So it's just something that I do. I think it's
158:57 - always good to give credit whenever possible. Okay, see toggle wrapper. We need to figure out,
159:01 - I think how to position the labels. So again, the radio buttons are set to
159:09 - opacity zero. And then we have the background and the toggle switch. And then we got the labels.
159:17 - So how is this played out? Because I wonder if she's using flex box for this. Actually,
159:24 - I bet she's just using relying on inline block because if you have display block elements,
159:29 - each one will take up 100% of the width. So they sort of stack one under the other.
159:35 - But for display inline block or display inline elements, the browser will try to fit them
159:41 - next to each other to sort of have them fill all the horizontal space before going to the next line.
159:45 - So it's kind of the difference between, you know, words versus like paragraphs. So my guess is
159:51 - she did she's relying on inline block for that. Yeah, so that's probably why she set this to
159:57 - inline block. So oh, hold on a second. So this is a toggle parent. Then she has labels.
160:03 - And then the wrapper has the radio buttons in the background. So I think I need to change up my
160:10 - markup because I have this whole field set thing here, which is the parent. No, that is what I did.
160:19 - Okay, so that's okay. So I think I just need to sort of position the labels, you know, in the
160:25 - right places. So if we go back to our design, actually back to this design, which we're going to be,
160:29 - again, sort of copying, how will be the best way to position the labels? Because there's one underneath.
160:38 - I could use CSS grid to do that. It might be a little overkill, but maybe not. I'm not really
160:44 - sure. The other option I think would be to maybe, I guess you could use Flexbox. So you'd have the
160:50 - lions, the first label, the toggle and the second label on one row, and then third label, the middle
160:57 - label on its own row. But if you use CSS grid for this, I can sort of just position the labels
161:04 - where I want them. And I wonder if that might be better. So yeah, even though it might seem like
161:08 - a little bit of overkill, let's see CSS grid for this. Okay, so in our grid, we're going to have
161:12 - three columns. So label toggle, middle label, and then last label, then we'll have two rows.
161:19 - So let's start doing that. And the parent for that is going to be, I think this, the field set,
161:26 - the header toggle. Okay, so header toggle. Remember, we added this header underscore
161:36 - underscore toggle class to position the toggle, the whole toggle block in relation to the headline
161:42 - in the header. For these styles for positioning with toggle elements, I'm going to put them in the
161:47 - toggle SCSS file because it's not really related to the header layout, but it's only related to the
161:53 - toggle component layout itself. This is useful if we want to reuse the toggle on another page,
161:59 - we could just, you know, add the same markup again, and we know everything will be the same as on
162:04 - this page. So toggle, I'm going to say display grid. And we're doing this by default, because we
162:12 - want the toggle to look the same on mobile and desktop. So to split grid, and then grid template
162:19 - columns is going to be three columns. And I don't know if I would need to do one FR, but
162:29 - I can kind of see why Sarah did inline block because it's a little bit simpler in some cases,
162:33 - but let's just try grid. So repeat three, let's just do three one FR for now.
162:41 - And now with grid, we need to kind of position the elements explicitly. This might be a bit
162:52 - complicated. So it's going to be, this is the parent, and then the toggle wrapper. So label,
163:01 - dark, and then the light, and then system preference. So I might just like move these all the way up
163:13 - to the label together. And there we go. Okay, so we got label, label, label, toggle wrapper. I
163:20 - think I'm going to have to add classes to the labels, which I think I should be able to do.
163:27 - Or actually, I think I can do based on the four attribute. So let's change this to system.
163:35 - Okay, so toggle grid here. And then where's the label styles? Some of the label styles up
163:43 - here, because I want to be kind of closer to the grid styles just in the file. So label for
163:51 - four. How do we do the four selector? So assess label for selector. Let's check out Mozilla first.
164:10 - What is this called? It's like a pseudo selector attribute selector. It's like I can just do four
164:15 - equals and then whatever. Let's just see if that works. So ampersand because we want it to inherit
164:24 - label. So ampersand square brackets for equals, I don't even know if the quotes are necessary,
164:31 - but I've just seen it done that way. So dark. So let's see if this works. I just want to test
164:38 - to make sure this selector works. So okay, no errors, which is good. Check out the site. Oh,
164:45 - it is red. Yay. Okay. So four dark. And then we're going to have to do a separate one for each
164:54 - of the labels. So let's duplicate this twice with control D dark system and light.
165:02 - So now, and then we have toggle wrapper. Let's go back to design and check out the layout.
165:11 - Oh, we're back to the this design and check out the layout. So it's going to be first label is
165:18 - going to be in the first column. The toggle itself is going to be in the middle column and
165:21 - the last label will be in the last column. So this one will be in the first column. So
165:28 - I haven't done this in a while grid column. And this will be the first column. So one
165:38 - and it ends in two, which I think is the correct syntax. So let's just test that out.
165:47 - So we can do a select the parent grid element, click on the layout tab, and then select the
165:54 - grid inspector. So I do want to highlight the grid. Yay. Look at that. And then now if I
166:05 - select the dark, what tell me? I mean, I think that's right. Let's just put in all the styles. So
166:13 - the last the light labels in the last column. So grid column. So what was it? One, two, three. So
166:22 - it's from three to four. So three, two, four. And then the system is in the middle column. So from
166:34 - two to three, grid column, two to three, and we have to designate explicitly the row. So grid row.
166:42 - And that's going to be two to three row. So hopefully that'll work. And then the toggle
166:53 - is going to be grid column. And it's in the middle column again. So two to three.
167:02 - And then I'm just going to not designate the grid row right now and just see how it looks.
167:06 - Okay. So here we got our looks like things are positioning correctly. Okay, sweet. And the
167:17 - system is there. Now the toggle itself looks like it's not not sure what's going on there.
167:22 - Toggle wrapper. It's me. I do need to set the row. Let's test it in the browser grid row.
167:27 - So from two to three. Oh, no, no, that's from one to two. Okay. Now where the system label go.
167:39 - It's like it's under there too. Hmm. Okay, let's just copy this.
167:47 - And the toggle wrapper. Yes, toggle wrapper.
167:52 - And let's explicitly set the row. Oh, it is at the row for the system.
167:56 - And I think I maybe need to set the grid template rows explicitly. But let's just see what happens.
168:03 - Yeah, I might need to. Let's test it out here. So grid template rows.
168:09 - Pete to comma one for boo. It's not working. Let's make this just system.
168:27 - So why is a label? Let's toggle wrapper not up there.
168:30 - Good column two to three. That's right. And then grid row one to two.
168:41 - Maybe I need to set the height. So the toggle wrapper is 24 pixels tall.
168:46 - So maybe I need to explicitly set the height of the row.
168:49 - And 24 pixels, one if I repeat to 24 pixels. I don't know what's going on here.
169:03 - We'll just make it really big just to like be super obvious. Okay, so that's working.
169:09 - So if I make the rows really tall, it does look like the system is in the last row,
169:16 - which is good. I wonder if there's, oh, I bet there's some weird styles in the toggle wrapper.
169:22 - It's like, yeah, here we go. Yeah, they're taking up space. That's the problem.
169:28 - So see if I did display none. Yeah, it would fix the layout, but obviously I can't do display
169:33 - none. Yeah, that's why Sarah did it like this. So each input is still positioned relatively.
169:44 - It's interesting. Oh, maybe the toggle. Oh, there we go.
169:49 - Toggle background is position absolute.
169:53 - So I wonder if I can do that, but instead of making the background absolute,
169:56 - I wonder if it would work if the inputs were position absolute. But then I'd have to like
170:03 - probably hard to tab through them. So maybe that's why the background was set to position
170:07 - absolute. Okay, so we figured that part out. Let's figure out a way to fix this.
170:13 - So I set the background of position absolute
170:18 - with a hundred percent. Oh, nope, that's bad.
170:23 - There's an absolute. And then because it's position absolute, I need to sort of,
170:27 - I don't know what the word is, but like ground it to the parent by setting this,
170:32 - the parent to position relative. So if I do that, then the background
170:38 - should be limited to the parent, which is good. If I set the top to zero,
170:46 - see, there we go. Okay, so let's do this. So toggle background
170:53 - and we added that to toggle background. Okay, I didn't need that.
171:08 - And then the toggle wrapper, I think I need to set it to position relative.
171:14 - There we go. There we go. Now the inputs are still, you know, they're still there.
171:26 - Okay, that looks pretty good. So we also want to maybe center, do we want to center them,
171:32 - or do we want to maybe align the dark to the right, light to the left? It is already in the center
171:38 - of the system. So let's maybe do that. I think we can do this a couple ways. So if we do text
171:44 - line, right, that'll work. I think we can also do self, sorry, justify self, do the right,
171:59 - or to end. So that works too. I don't think it really matters. I might just do justify self
172:04 - end because reason grid stuff anyway. And then for the system, we'll do justify self. I think
172:13 - center should work. Nice. Cool. Okay, let's add a little space here. So we got 13, say I'll do 12
172:26 - pixels of space. So what I think I'm going to do is add it to the gap property. So gap will be 12
172:35 - pixels. So that'll add space on all sides of each cell. So let's do that. And this is something
172:43 - that you add to the grid parent. So go gap, RAM 12. All right, it's looking better and better
172:53 - every time. Now the last thing I want to do is add the toggle, like circle switch thing. So that
173:00 - one is looks like it's the same colors the background. So again, we'll look here, see how they did it.
173:06 - Is this it? Yes. Okay. So the slide, the slider thing. That's interesting.
173:21 - Okay, so they're styling this by saying if you, the third option is checked, then the left property
173:30 - will change. So this is just left zero by default. Okay, let's check out Sarah's. So the
173:45 - switcher looks like it is displayed. Okay, so it's just now split left to zero. Now we check this
173:53 - again. Is that right? This left is still zero. Hmm, how do they control that? Interesting.
174:15 - You have to reload, make something like got broken or something? I'm not really sure.
174:19 - So the switcher, top zero left zero, right 100%. Okay, but now still zero, still left zero. How
174:35 - does that even work? Let's see if we can look in her styles and see stuff that's there. So it's
174:41 - the switcher that we're looking for. Rapper switcher. Okay. Now, do any styles change? Oh,
174:54 - here, the checked. See, toggle switcher is right. Maybe the fire, so let's firefox, I think, has
175:02 - doesn't quite like update the inspector sometimes. So if I switch between tabs, there we go. So it's
175:09 - checked, right is your left 30%. And I'm guessing there's a transition element on the
175:16 - right and left properties to make it a more smooth thing. Yeah, so transition all. So we
175:21 - remove the transition, there'll be those kind of blink. It's actually not that bad, but it's a
175:27 - little bit nicer to have that. Okay, so that's what we need to do. So it'll be an absolutely
175:33 - positioned thing in here. So if we go back to our code, it's going to be this toggle button,
175:39 - that's where we're going to add the styles. So toggle button. Oops, that's not what I wanted.
175:50 - Absolute. And we'll just say left zero, right 100%. And let's go back to the design, because I
176:01 - think we probably need to explicitly set the height of this thing. Oops, stop. There we go.
176:10 - 18 by 18. And the height of this is 24. So, oh, there it is. And the background, we're going to set
176:20 - it to the toggle, I think, right? It should be the background color. I mean, this was a light
176:31 - mode color. Oh, yeah. Oh, okay. So it's light mode is still the color of the background, but the
176:38 - toggle background is this thing. Hmm. Yeah, I'm not sure if the toggle is the right word for that,
176:46 - because it's kind of like the toggle light. But anyway, we can just reuse this dark background
176:52 - variable. And just check again, what the height of the toggle is. 18. Okay, so we can kind of see
177:13 - it up there. So let's position this thing correctly. Toggle button. Maybe top zero.
177:28 - I guess left should be a little bit, you know, put to the side. It's about, I think it said three
177:34 - pixels. Okay. Left should be RAM three top, RAM three. Hopefully that will look correct.
177:49 - Oh, wow, look. Oh, nice. And I like this is a bit long because it's getting the width from the
177:58 - system label. So I think what I might do is make the system cell take over all the rows and then
178:05 - set the width of the toggle background a bit differently. Let's do that. So it's going to be the
178:15 - label for system. So the grid column, we want to go from one all the way to the end. So I think
178:20 - I can just go one end. Instead of having to set an actual number, that should work. Let's see,
178:27 - here we go system. Where's the label system? One, two, four.
178:37 - Maybe it's just like showing that because of this. Okay, so it is going all the way to the
178:51 - beginning of the row. So grid column one end. Oh, interesting. Why do end instead of four? It
179:02 - adds another thing there. Maybe one to four is actually better. That's kind of weird. I'm not
179:08 - sure why it's doing that. And then we want to maybe set the width of the thing. Oh, I think,
179:15 - I wonder if that's why Sarah had set this like making the radio buttons the same size of the toggle
179:22 - so that the width of the background will be the same. That's going to be my guess. So it's going
179:27 - to toggle and wrapper. So you can see we have the different radio buttons here and they have a
179:34 - margin. So maybe what happens if we get rid of the margin? Yeah, much, much smaller. So let's
179:43 - check the design and see how wide the background is. It is 48 pixels wide. So now this is about 50,
179:51 - which is actually pretty close. So I think I'm going to take that margin zero from the radio
179:57 - buttons. And then I sort of set the height explicitly on the background. So I think I don't need to
180:10 - set the height of the radio buttons to match the height that I want the background to be.
180:14 - Okay, so last thing we need to do, and we're almost done here, which is kind of nice. Let's
180:19 - do these styles for when the different options are selected. So the selected selector is the
180:29 - checked for the radio button. So for example, this first radio button is dark and then checked.
180:38 - So when it's checked, then you change the right and left values of the toggle little
180:43 - toggle button thing. So let's do that. So, um, here we go. So radio button. So if the
180:55 - dark label, I'm sorry, if the input radio dark, which is this one
181:04 - is selected or checked, then we'll change the styles for the button. So normally you would
181:12 - do something like, maybe I would add a thing here for dark checked. But I wonder if I can
181:29 - add a ceiling selector in the toggle button thing. I'm not sure if this is going to work.
181:36 - So let's just get this selector right. So the toggle button sibling, if the sibling selector
181:46 - for the toggle button is ID dark checked. So sibling selector, I guess we can just do the same thing
181:54 - dark checked. And then I'll say, well, actually dark is the default. So let's say light checked
182:06 - to make it go all the way to the other side. So we'll say, right, zero, left 100%.
182:12 - And let's see if that even works. So check the light.
182:27 - Um, okay, I think maybe these need to be on top of the background. So maybe the labels need to go
182:36 - after the problem here is like I'm clicking here, but nothing's happening, which makes me think that
182:42 - the background div, you can't click through. And I think there's a CSS property for that.
182:56 - Let's see, pointer events, none. Yeah. So I think if I set a pointer event, none,
183:03 - one to the background, which is the one full in your gradient.
183:14 - I think that will let us click through to the radio buttons.
183:20 - Ah, let's display none. That's just to like,
183:25 - and then opacity one.
183:27 - So I can click them.
183:35 - It looks like the light thing isn't working. The, uh,
183:46 - I think I need to do actually, let's leave this here. Let me check the
183:52 - the final CSS and check the checks. Okay, so toggle button light,
184:03 - toggle button ceiling light checked. It looks like that looks correct to me, I think.
184:09 - Yeah, I'm not sure why it's not working.
184:11 - Anyway, let's reload this silly toggle. I've selected a light radio button
184:23 - and it looks like there's no, the stars aren't coming through. So let me add maybe an explicit
184:29 - let's see toggle button. Let's go idea of light sibling toggle button. Oh, light checked, toggle
184:42 - button, um, left 100% right, zero or three pixels. Okay, so it looks like something did change.
184:52 - So let's see here. Where'd the button go? Okay, so good news is it's working.
185:00 - That is the buttons like way off over here. I'm not sure why. Maybe left auto. Okay, right,
185:08 - three pixels. I could do a calc. So I could do calc 100% minus 18 pixels. And then add three
185:26 - for the space. Oh boy, y'all is this tough. Okay, so it looks like it is moving. Yay.
185:35 - Okay, so I'm not sure what's going on here, but let's just copy this style.
185:43 - And maybe the ceiling selector needs to be first. Maybe order matters with the ceiling
185:48 - selector because the label actually comes first before the button. So I actually wonder if
185:57 - um, yeah, I'm gonna leave this here just to have it so we don't lose it, but I might actually
186:05 - move all the labels down after the toggle wrapper. And I'll kill two birds with one stone because
186:14 - this will make the radio buttons on top of the toggle wrapper because by default the index will
186:21 - look at the order of elements. And so elements that come later will be on top of elements that
186:26 - come before them unless you set the index explicitly. Oh wait, I know why the ceiling
186:31 - socket didn't work because I said it on the toggle button, which is here, but it's inside the toggle
186:36 - wrapper. Um, okay, so this probably won't really work. So let's save that. And then see if this
186:48 - works now. Oh, this makes me so happy. Look at that. Okay, so now the next thing we want to do is
186:55 - see if we can add that transition state and let's test it again in the browser. The toggle button
187:00 - will just say transition all 150 milliseconds ease in out, which is my favorite one.
187:14 - It's working. Okay, that looks pretty good.
187:18 - So we'll do that. And it's on the button itself.
187:29 - Nice. And then we need to do the positioning for the center one. So system,
187:36 - check, sibling, toggle button. Oh, wait a minute, system checked, which is this, and then sibling.
187:49 - Oh yeah, toggle button, which is there. I don't know why that other one didn't work. I think
187:53 - sibling, the order does matter. Okay, let's just fix this and then we'll see if there's a way we
187:58 - can add these styles under the button thing. So we're not having the manually type out toggle
188:04 - button, because that kind of goes against what them is supposed to be able to give you. So for the
188:11 - center one, I guess we'll just do, sorry, remind me again, this is just an absolute. Okay, so the
188:18 - center of is an absolute, you need to do the old left 50%. And then I guess I'll say right auto.
188:27 - And then you need to do a transform translate negative 50%. So what this does is the left 50%
188:37 - will put it to the left of the width of the parent. But because it starts measuring from the left
188:43 - side, it's going to be a little bit more to the right, because of the width, the 18 pixels that
188:48 - the button itself is. So we want to do we want to use translate, which will translate, it'll shift
188:55 - the element based on the width of itself. So we want to shift 50% or half of the width of itself
189:01 - back the other way. So that will make sure it is actually centered. So here we go. And there we go.
189:13 - Okay, I know why Sarah made the radio buttons. The height is because if I don't click in the exact
189:19 - right place, it's not going to go. So, you know, everything is there for a reason.
189:27 - So let's take away this opacity for a second.
189:29 - And so now I'm doing this so I can see the radio buttons. So height of 18 pixels.
189:46 - It should be the height of the track.
190:02 - So 24 and 24.
190:07 - So going back to the input radio.
190:10 - I'm 24 for the width and for the height.
190:26 - So now,
190:33 - yeah, so now see here. Why is this spacing like that though?
190:38 - Oh, maybe that's why she had margin of negative two. Oh my gosh. Where is it the switcher?
190:50 - Margin right of negative two. That's why, because I guess it must be a browser default or something.
190:59 - Yeah. So by default has a margin all the way around. So I'm going to go margin zero.
191:04 - Zero is the top. So negative two pixels zero zero.
191:14 - So now let's make sure the height, the width of this 69,
191:19 - it's supposed to be 48. So maybe make them a tiny bit narrower.
191:25 - And I said 24 pixels or if we go 20. So what was it supposed to be supposed to be 48.
191:36 - So it's 57 right now.
191:41 - It's 54. Okay, so with the 20 pixels for the radio buttons.
191:49 - So they're a little bit taller than they are wide.
191:51 - Oh yeah, and then the margin of zero. I give two pixels zero and negative two.
191:59 - Okay, now it's more clickable. Sweet.
192:04 - And I guess I can rem this to rem negative two. I don't know if it matters if it's just like so
192:10 - small, but might as well be consistent, right? Oh boy. Okay, now let's turn off this
192:17 - grid stuff here.
192:24 - Wow, looks pretty good.
192:29 - Okay, so I'm going to fix this thing here.
192:35 - Check out the mobile. So mobile is actually quite different,
192:39 - but we want this to always be 48 pixels wide, the toggle background.
192:44 - So I just need to maybe set this to. Yeah, so this should always be 48. So I think I'm going to go
192:54 - repeat. I shouldn't do the repeat, I think. So maybe one of our 48 pixels one of our
193:03 - that's a little bit narrow. It is right.
193:05 - You know, I might make this a little bit wider just because I think the three option
193:14 - toggle is making things a little bit iffy. So we'll do this. So going back up to the grid
193:22 - and replace this. And then of course, we'll do rem. Okay,
193:37 - let's go on desktop. Nice. I'm quite pleased with how this is turning out.
193:43 - Now let's fix the mobile style. So in mobile,
193:45 - hmm. So this thing, I think we want it to look a little differently.
193:52 - I'm guessing I probably want to have the same thing, but just sort of centered.
193:57 - Or maybe just left aligned. Maybe right aligned. We'll keep it on the right.
194:02 - And we need to add a bit of space there between them.
194:06 - Oh, there's a line there too. There's no line on desktop. So
194:10 - let's just align the toggle and we'll add go back and add the spacing. So this is going to be the
194:18 - toggle. And if we remember the header container, I think was using flex box for desktop.
194:30 - Yeah. And then not for mobile because it's too narrow, right? So like that.
194:36 - Mm. Margin left auto.
194:45 - I'm trying to think it's like, usually you float right, but then you don't want that because it
194:50 - collapses the start to stop taking up vertical space. So you don't actually want to do that.
194:57 - I shouldn't think I should have done CSS grid for the header thing because then I could
195:01 - just sort of place it. So I might need to change that. Because I think for flex box, I mean,
195:08 - I think I could let's just let's see how difficult it will be with flex box. So header display flex.
195:18 - And then to make this go in the second row, I think I'd have to make header title with 100%.
195:24 - Oh, yay. Oh, I think wrap flex wrap wrap. There we go. So now it allows you to wrap. If you don't
195:37 - turn on wrap, it'll just even if you set this to 100% width, which I did, it won't wrap the item.
195:43 - So let me go wrap. And then for this one, I think I would want to do I think if I do margin left
195:51 - auto, there we go. Yay. So I guess that wasn't too painful. So let's do header container,
196:01 - make that a flex wrap thing too. So header. And then we're going to go
196:08 - trying to remember if I want to use put all those things up there. Do I want just
196:12 - by content and line items to also be on mobile? I don't remember. And then title is going to be
196:23 - with the 100%, but only for mobile.
196:29 - Great point, medium with auto. Let's just see if that works for now. Oh, and then the toggle
196:43 - wrapper or sorry, the header toggle, header toggle. We're going to go margin left auto.
196:53 - I think I can keep that for desktop. I think it won't mess anything up. Okay, so cool.
196:57 - So we got the flex wrap property. Got this. So if we've got our mobile looks kind of like this.
197:06 - And then yeah, that looks pretty good, actually. Looks like it's not perfectly centered here
197:13 - with this label. Oh, maybe that's just from the line height.
197:21 - I mean, the difference is so small. It doesn't matter. So that's fine.
197:28 - Just make sure it's working. I think that's okay. I feel like from mobile,
197:34 - maybe it should just be centered, or maybe just like left so it's the same as the title.
197:51 - Yeah, I feel like it might look better if everything's just on the left for mobile.
197:55 - Yeah, let's let's do that. So let's not mess with the, you know, making it look on the,
198:00 - making it go on the right side. I think that's okay. I'm kind of deviating a bit from the design,
198:06 - but you know, you just got to make things look a little bit more balanced. And I changed things
198:11 - because we're adding the three option toggle. So we will just remove that. And we actually
198:17 - don't have any styles here, so I'm just going to delete this selector. Okay. Okay, I'm going to
198:24 - remove some of this space down there. So the gap, I think gap column,
198:32 - or if I do gap, I'm not even sure I'm doing this right. So the first gap property is
198:40 - the row gap, maybe 0.3. Whatever that ends up being
198:59 - two pixels, or no, the column gap is 12 pixels, row gap is 4.8 pixels. So we'll change that on the
199:13 - toggle. Okay, so that should add it in. There we go. Now it's a little bit spaced better.
199:23 - You just an awful lot of space on the bottom of that. What is the margin on that anyway? 5.6 and 10.
199:31 - This must be browser defaults for the field set. Yeah. So what if we go margin 0?
199:39 - Does that look any better? Yeah, looks like things are centered. Okay, so let's do that.
199:44 - And margin 0 to the toggle. And you know, actually, I would bet this text needs to be a lot smaller.
199:54 - So yeah, it is 14 pixels. That's for the label.
200:03 - Let's see that. I don't remember what we were really set to. It looks a little bit smaller,
200:17 - which is good. It will reduce the gap again.
200:25 - See, the cool thing about having the labels on the radio buttons is that clicking the label
200:29 - will also select the button in addition to choosing the button. So you have a lot of options here.
200:36 - I'm just working with the arrows. I think I need to add a focus state for that.
200:42 - So maybe this is okay for now. Let me reduce the column gap a little bit.
200:48 - 0.3 and 0.5. That would be eight pixels.
201:01 - Okay, I think that's better. And I think I also need to center these labels.
201:06 - Yeah, line self center. Okay, so this can go for the toggle labels to do both of those.
201:17 - And then we'll align this a bit differently. The system align self. We want to be start.
201:28 - There we go. So then this is going to be at the top. Looks pretty dang good. I'm pretty psyched
201:32 - about this. Okay, so the other thing we wanted to do was the when it's focused, right? So focus
201:40 - toggle switcher. So it's a ceiling to the toggle switcher. And that was this one.
201:52 - Um, so I'm guessing it was when the any of the inputs are selected. This will
202:01 - have that sort of extra outline there, which you can't see. Here we go. Have the extra outline.
202:07 - This is really a little bit for good measure. So you can see it's like
202:17 - Okay, so what can we do about ours? And this is again a little different from the design.
202:22 - Let's play around with some styles and just see what looks good. So the toggle button.
202:27 - So we do a border. I mean, I guess that looks fine. Let's see. Let's look at our colors and
202:38 - see if there's a color that might look good. Red, maybe the yellow. And of course, white always
202:49 - works. I might just do maybe you'll lighten this a little bit. Yeah. So toggle switcher
203:11 - is toggle switcher is at the end. So input type radio focus see toggle switcher.
203:24 - Let's try to figure out what the selector is. So I'm selecting light.
203:27 - So toggle input type radio selected. Oh, no, that's not it. Focus.
203:46 - Focus sibling toggle button
203:52 - order to pixel solid white. Oh, it is working. Okay, I guess that worked. So I'll add this to the
204:03 - toggle input thing. So toggle input. Let's just make sure this works right now.
204:14 - So we're using ampersand focus. Let's see if this works. Nice. Oh, yeah, look at that. So I'm using
204:27 - tab to an arrow keys to select that. So that's pretty awesome. So what I want to do is
204:37 - can I and I think this is what I mentioned before, I kind of forgot about. I don't think it'll work
204:42 - any other way. I was trying to see if I could put the styles in here and use like a different
204:47 - selector, but I think it won't work. I think I have to use this. So this is pretty good. We're
204:53 - in a good place with the top nav section. Coming up with class names is a deceptively tricky part
205:00 - of working with CSS. And if you're using SAS and following the BEM or block element modifier naming
205:06 - convention, it can be even more difficult. So in today's video, I thought I would show you how
205:11 - I come up with class names for this card component in the front end mentor challenge that we've
205:16 - been building and also how I structure all my styles in my SCSS files. So to start off, we have
205:23 - our design in Figma open here. And I'm going to before we start writing any code, make some notes
205:30 - out here in the margins, just showing you what I'm going to name each of the items in this card.
205:35 - Now, before we get into that, let's talk about what BEM actually is. So make some notes here with
205:43 - a text thing. So BEM stands for block element modifier. Let's move this over here so we can see
205:52 - better. So block element modifier. And what that means is when we look at the design, we're not
205:58 - writing styles for every single element in this design, you know, all in one place. What we do,
206:02 - especially with our SAS files and the SAS partials is we kind of break apart each of the design
206:07 - components into their own file. So we did this in the previous video, creating these styles for
206:13 - the header and the toggle. And they each had, you know, the styles in the header were in header.scss
206:19 - styles for the toggle were in the toggle.scss file. So you can see that SAS and BEM are a really
206:25 - good combination in terms of writing your styles in an organized and structured way. So if we look
206:31 - at the design, the block is kind of the name of the component that you're writing styles about.
206:37 - It's the sort of parent component or the parent element. So in our example here, we're writing
206:42 - styles for this card. So the block in this instance is going to be card. So I'm going to say block
206:50 - will be card in this instance. And then the element.
206:56 - And usually a block will have more than one element inside it. So the card is kind of the
207:04 - parent. And then the inside the card has child elements. So for example, we have, you know, the
207:12 - platform, the social media platform, and the username on the top, then we have like a follower
207:17 - count. And then we have at the bottom, it's like a change in the number of followers for today. So
207:24 - we have these sort of three elements here, we have the platform, then we have the count of followers,
207:30 - then the bottom, we have the change. So those are going to be the three main elements that we're
207:35 - going to write styles for. So the elements are going to be platform, and then also going to be
207:42 - the count, and then the change. And this is just a start, we're probably going to add some more
207:47 - elements later on as we go. And then the modifier is a different style or appearance. And that can
207:55 - be attributed to I think either the block or the element. So for example, if we look at the design,
208:01 - the cards have slightly different designs based on the social media platform. So you can see the
208:07 - Facebook card has this blue stripe up at the top, the Twitter has a slightly different blue color,
208:11 - Instagram has this orange looks like it's a gradient as well. And then YouTube is red.
208:16 - So we can see that the different styles for each platform can be written in a modifier class. So
208:22 - for example, modifier could be Facebook for the Facebook card, Twitter, et cetera, and et cetera.
208:32 - Now the other thing to keep in mind is when we're writing our styles, we're sort of combining
208:36 - these things together. And this is where you may have seen the whole underscore and hyphen thing.
208:41 - So when you're writing an element, you are going to start with the block name. So card,
208:48 - the card is going to have a class of card. So I'll write card. And then let's say we're writing
208:55 - styles for this top part, let's say maybe for the icon. So that could be another element. So
209:00 - just add this in our notes here icon. So the class for this Facebook icon could be card,
209:08 - underscore, underscore icon. And then if we look at the design, we can see that there's multiple
209:15 - kinds of icons based on the social media platform. So in this case, we can use a modifier. So for
209:20 - example, the card icon, dash, dash, Facebook would have Facebook specific styles. And then there
209:29 - might be some more generic styles, for example, maybe the width of the icon that we could put
209:33 - under card icon. And we kind of just go down the line here. So I might actually make some more
209:39 - elements as we kind of look in our design. So after the icon, there's going to be, you know,
209:45 - the username. So maybe that could be another element. So card, underscore, underscore,
209:50 - username. And then that's it for the sort of top part. Now the next section is for the follower
209:56 - count. So we'll say card, underscore, underscore, maybe count, just try to keep things as descriptive
210:03 - as possible. And then under there is this followers label. So we could say card, underscore, underscore
210:09 - label. Now if we're looking down at the bottom, it's this sort of change of number of followers,
210:15 - either up or down today. So we'll say card, underscore, underscore change. And if we look at the design,
210:23 - we can see that it's green, if it goes up and it's red, if it goes down. So this could be
210:27 - modifiers, since they're different styles of the change. So we can say card, underscore, underscore
210:33 - change, dash, dash, I guess up. And then it will also write some styles for dash, dash, down. So
210:42 - this is starting to make sense how we're kind of breaking things apart. And you might be wondering,
210:46 - you know, why are we even bothering writing these pretty long class names, you know, card icon
210:51 - Facebook? Like, why is that necessary? Why can't we just say, you know, Facebook or icon without
210:57 - having this card preface? One reason is that having these card prefixes for each of these
211:04 - class names, it kind of helps to ensure that all the class names are going to be unique,
211:08 - because if we're thinking about the website that has multiple pages and templates and styles,
211:12 - there might be another icon element somewhere else in design that's completely different from
211:16 - what we're working with here. So this ensures that these styles are writing for this card icon
211:22 - only applies to this element that has this sort of long class name. The second reason that we'll
211:29 - see a little bit later when we're starting to set up everything in our SES files, is that having
211:34 - this underscore with the prefix of card, it works really well with SaaS and the nesting feature of
211:40 - SaaS. And again, we'll see this a little bit later when we start actually writing our styles.
211:45 - But for now, let's kind of go over and see if there's any more classes we want to make. So I'm
211:51 - gonna just mainly focus on this big card right now, but we can see in the card below it that a lot
211:57 - of the elements are the same. So for example, the social media icon looks pretty much the same size
212:03 - that we have in the big card. The number you can see is actually different, like it looks like it's
212:08 - the same font and color, but it's a much smaller size. And then the change looks like it's pretty
212:13 - much the same color and size as we have on top. So for the number, since we have kind of a bigger
212:20 - number up top and a smaller number on the bottom, we could maybe make that also a different modifier
212:25 - for the count. So let's see here. So card count dash dash small. And if we wanted to be really
212:36 - sort of detailed about this, we could actually make separate ones for
212:39 - the big modifier and then the small modifier. And then we would have the styles that are shared
212:45 - by both big and small, like the font family and the color and probably the font weight in the card
212:52 - count element selector. So I think that's pretty good for now. We'll probably be adding more styles
212:58 - to this as we as we get along. But for now, I'm going to start writing kind of just building out
213:04 - the structure of our SAS styles. So if we go to our VS code, I did make a car.scss file at the
213:13 - beginning. In the last video, when I set things up, this style role wasn't really anything. It was
213:18 - just for us to check and make sure that it worked. So again, the card is going to be the block.
213:24 - So let's start adding styles for the elements. So under card, we got card icon card icon modifier
213:31 - Facebook. And then there'll be a different modifier for each of the social media platforms. So let's
213:36 - start with that. So card underscore underscore icon. Now in SAS, we have nesting, which is a feature
213:41 - that native CSS doesn't have. But this is what we can use the ampersand for. So the ampersand symbol
213:47 - means it'll reference the parent selector, which in this case is the card class. So the ampersand
213:52 - will be card and then underscore underscore icon. And then we can add the modifier class with another
213:58 - ampersand. So this ampersand stands for card underscore underscore icon. Because that's the
214:03 - parent selector. And then we'll add hyphen hyphen Facebook. And we can do the same thing for
214:12 - Twitter, Instagram and YouTube. So we'll just add those out here.
214:17 - Instagram. And YouTube. Okay, so let's go back to the design. So the next thing we want to do
214:30 - is card underscore underscore username. So kind of the same way ampersand underscore underscore
214:36 - username. And we're really just kind of making our way down the design here. So then the next one
214:43 - is card count with a big and small modifier. So count and then in count, it'll have a modifier of
214:52 - big and small. And I think that's it for the count. Then after count, we got the car label,
215:05 - which is that followers text. So underscore underscore label. And then at the bottom is that change
215:12 - number. So it's changed with a modifier of up and down. underscore underscore change. And then
215:19 - in change, we'll have dash dash up and dash dash down. Okay, so this is pretty much all these styles
215:32 - that we're going, all the class names rather that we're going to be using for this card element.
215:37 - And again, we might be adding some more styles, because you know, we can see that the cars are
215:43 - in a grid. So we'll probably use either flexbox or grid to make sure that there are four columns on
215:49 - desktop. And then of course, when you get to mobile, it's stuck to one column. So we do need
215:54 - some additional styles for that. But we like make some more generic class names to control the
215:59 - layout. Because I think I did add, yeah, so I have a layout sas file here. So this has a container
216:07 - styles right now, but we could add some more classes for you know, a grid, because we know that
216:12 - both of these are four columns on desktop. So we can kind of use the same classes for the layouts
216:17 - for these cards. But in terms of the card specific styles, I think these should cover most of the
216:24 - things we're looking for. So going back to the card sas file. And this is kind of the approach
216:34 - that I use when I'm, you know, building a website for work or whatever, I just try to write all the
216:40 - different class names that I think I'm going to be using and all the different selectors. And then
216:43 - I kind of fill them in as I build things out. So now the next thing is we need to write the HTML
216:49 - markup for these cards. So I'm going to split this to the right side. So we can have HTML on the
216:57 - left, and then the styles on the right. So let's start adding markup for the cards. Then minimize
217:03 - the header here so we don't really need this. So the card content's going to go in the main tag.
217:09 - And I think, yeah, I added a section tag. So I'm probably going to have each of these card grids
217:15 - in its own section tag. So this will be one section tag. And then the bottom grid along with this
217:21 - overview today is going to be another section tag. But for now, I'll just say section. And we want
217:27 - to add a class of container. And that's again, to limit the max width of the content to 1110
217:35 - pixels wide and center it. So basically, every section, we're going to need to add the class
217:43 - container to that. And this is similar to what we did with the header in the last video.
217:48 - So in this section, you know, we might also add the classes for the grid for that four column
217:57 - look, but we'll worry about that a little bit later on. Right now I'm really just focused on
218:02 - writing the markup and getting the styles working for one individual card, and then worry about
218:08 - fitting them into the grid layout afterwards. So it's another thing I try to do. I try to
218:12 - not do everything all at once, like try to come up with all the finished markup and styles.
218:18 - But I kind of break them down into steps. So right now I'm doing the card,
218:21 - you'll worry about doing the layout later. You could of course do this in whatever order you
218:25 - want. You could maybe create a multiple card elements and then, you know, make make the grid
218:30 - layout work from there. But when I have a group of multiple items, I usually start with just one,
218:35 - because if I create multiple divs for the cards and then things change, because they probably
218:41 - will change because, you know, you're never going to get things perfect the first time around,
218:44 - then you're going to have to go back and change the markup for all the three other card elements
218:49 - that you made. So I just start from one. I think it's just easier. So here's the container. Now,
218:55 - let's make our first div for the card. So I'll say dot card. This is using the image shortcut here.
219:03 - It will just generate a div with a class of card. Now let's go back to our card sass file,
219:09 - and let's see. So at the beginning, I'm going to handle the blue bar at the top,
219:17 - probably in the card element itself. Maybe I'll make a border, a top of 10 pixels or whatever.
219:23 - So what I might do is start adding the, you know, I might need to actually add some modifiers for
219:29 - the social media platform in the card element itself. So it'll be similar to the icon. But this
219:35 - is going to control the color of that bar at the top. So for card, let's look and check out what
219:44 - these styles are here. So in Figma, we're just going to click in here and keep kind of keep clicking
219:49 - till we see that the element we want is selected. Okay, so I kind of want, I'm trying to get this
219:57 - background color here. I'm not sure if I have it. Selection colors looks like it's this sort of
220:03 - a purpley dark blue gray thing. Is that right? 252 B42?
220:13 - Let's just change it to red, just to see if it changes.
220:19 - Ooh. Okay, maybe not. Oh, I would suck in the mask here, so I don't want that.
220:26 - Um, sorry. Let's see. I'm not super experienced with Figma, so this is kind of weird.
220:39 - So it's looking the mask again. I wonder if I accidentally changed something.
220:44 - I think it's this color here. So 8C9, 8C6. So that's going to be the card background color.
220:50 - So let's open the color's sass file here. It looks like maybe dark text one. Is that
220:59 - scene right? I think the text will not be this actual text color. It's probably this dark card
221:07 - color here. So we'll copy that variable. And then in our card sass file, we'll say background
221:15 - var dark card. I might as well say color is going to be the dark text one.
221:29 - Okay, now I'll start adding some markup to the card so we can see we can start building things
221:35 - out. So the next step is the icon and the username. And I think I might need to maybe wrap them in
221:43 - an element. So you might have to create another element here. If I could just say card top perhaps.
221:51 - So go card top. I don't know if that's a great way of doing it, but yeah, we'll just we'll just do
222:01 - that. Just see what I did here. Maybe we'll make it a little bit more descriptive because it's like
222:10 - what is this? It's the Facebook and the username. So like maybe the social media platform or whatever.
222:17 - Did I not write this in my notes? I guess I didn't do that.
222:23 - So we'll add card platform. And that's going to be the top element there with the icon in the
222:29 - username. So platform. And then we'll add the markup to match that. So card underscore underscore
222:45 - platform. And then in card platform is going to contain the icon and the username. So card icon.
222:53 - And then card username. There we go. Then move on to the next section. So it's the follower count.
223:05 - So card underscore underscore count. So card underscore underscore count. And in the count,
223:14 - it's going to have the number and then the followers label. So I think I need to put the
223:19 - card label inside the card count card label. And then after that is the change. And I think I can
223:31 - just do card change for everything card change. Okay, so now we kind of have our HTML elements set.
223:42 - So let's move the actual text in there. So card platform contains the icon and then the username.
223:50 - So username is here. And then the count is 1987. I think I'll just put it straight up in the card
224:04 - count element. And the card label is that followers text. And the card change is 12 today.
224:15 - So we'll do that. Okay, so this is the markup for our first card. Now we do need to add card icon
224:25 - thing. So I'm hoping that they've given us either PNGs or SVGs for this. I select the icon itself.
224:37 - Yeah, looks like it's this could be an SVG. Can I export this? Actually, let's see if they included
224:45 - that in the front of mentor images anyway. Well, that's a design. Oh, here you go. Images. Okay,
224:52 - icon Facebook. Okay, so we can use those. So in the card icon, I guess I'll add an image tag. And
224:59 - we'll say images icon Facebook SVG. And then in the alt text will be Facebook. Okay, so why don't we
225:11 - check out our website and see what it looks like. Oh, and in this video, we're going to use set of
225:18 - Firefox, which I have been using. We're going to use this other browser called polypane. And this
225:23 - looks different, as you might notice. And the really cool thing about polypane is that you can
225:28 - load multiple devices in the same view. So it helps a lot with when you're debugging
225:33 - responsive websites. And it's cool because it's like synced. So for example, if I click on the toggle
225:39 - here on desktop, you can see it's also changing on the mobile and vice versa. So everything synced
225:45 - it. Also, you know, as we get more content on the page, you can scroll down on mobile, and then it'll
225:50 - also scroll and match it the position the scroll position on desktop and vice versa. So, you know,
225:57 - I still like using Firefox, but I think when you're comparing the mobile and desktop views when you're
226:02 - developing a website, it can be really helpful to have something like this. You can see both views.
226:07 - So let's see where we are reload this. Okay, so you can see the card here. So it looks like the
226:13 - background color is correct with what we have in the design. Obviously, we need to style a lot of
226:18 - stuff, but the Facebook icon is showing up, which is great. So the next thing I do is I usually try
226:24 - to get the layout fixed first inside the element. And then I'll worry about, you know, the text
226:30 - colors and font sizes and stuff like that. So if we look at the design for the card, you can see
226:35 - all the content in the card is centered. And then it's kind of spaced out, it seems pretty evenly.
226:39 - Like if we click in here, it looks like there's 28 pixels of space on top and 25 on the bottom.
226:47 - I make that the same just for, you know, make things a bit more consistent and make it maybe 25
226:52 - on both sides. Let's look at what we've got in our browser. So obviously, this card's going all
226:59 - the way across because it's a block element. So if we do this, and polypane is written in,
227:07 - I believe the Chrome browser engine. So this is the similar DevTools to what Chrome has.
227:14 - Here's card. Oh, I made a mistake here. Color. I forgot the var function. There we go.
227:28 - Okay. So what kind of is going all the way across? I think I might just add some temporary styles
227:34 - to limit it. So let's say card with, you know, to see what we have in the design. 255 pixels.
227:47 - So RAM 255. And this is a temporary style. So I'll just add that so I don't have to remove it
227:53 - later on. Okay, so now we can see it's a little bit better. Let me zoom in a little bit.
227:59 - You can see that a little bit better. Okay, so we got the card, and we want to make things
228:08 - centered and then evenly space it out. So let's maybe add a text align of center and see if that
228:17 - does what we want. So that's pretty good. So let's try that for now. So text align center.
228:23 - And then yeah, so that's we're getting there. And maybe we'll add some padding. So let's see
228:33 - what the padding inside the card is 32. 24. So maybe let's do 25 as the card padding.
228:43 - Adding RAM 25. Let's do it all the way around. Okay, that's getting there. Now things are centered
228:53 - but obviously this does not look super close to to the design. Problem is I want the card platform
229:00 - to have the icon on one side and then the username on the other side and then card count and card
229:07 - change. And then we got the same thing with card count where it's one on the left and one on the
229:12 - right. Oh no, I'm sorry with the follower. I think it's it's the followers text is under the 1987.
229:19 - So let's do card platform right now. So again, look at the design. The icon is on one side and
229:26 - the username is on the other side. So let's see, we could do something where the icon maybe we could
229:33 - say display in line block. And then card username is also display in line block. So that works to
229:45 - put them next to each other. However, we want to vertically center it so right now you can see
229:49 - the text is kind of on the bottom. So I think I might need to use flex box instead of in line
229:55 - block. Let's try that. So we'll make card platform display flex. That's pretty good. And then justify
230:07 - content center and the line item center. It's like it looks like a text is still a little bit to the
230:17 - bottom. I wonder why that is looks like there is part icon is 20 by 24. The image looks like it's
230:28 - not going down all the way. So I don't know if that's an SVG thing or I don't know the images like
230:33 - that. I'm not sure why it's adding that extra space at the bottom. I wonder if I could just make
230:44 - the image the card icon. Maybe I'll try that. So let's add the flex styles from card platform.
230:52 - And we'll try to fix the alignment on that image thing. So card platform, display flex,
230:59 - and we want this to be the same for mobile and desktop. So we don't need to media query here.
231:05 - Okay. So now let's go back to our markup and maybe instead of a div class card icon, we'll
231:13 - get rid of the div, move a class to the image element itself. So remove that.
231:23 - And then remove that. So the image itself. And this might look weird. I'm not sure if this is
231:28 - going to work. Oh, looks good. So now things are centered. And we'll add a little bit of space,
231:35 - I think. Let's zoom in here. Space. So there is eight pixels space to the left of the username
231:46 - to the right of the icon. So I'm going to say margin right on the icon of eight.
231:57 - Okay, looks pretty good. Now we can just style this text here, of course.
232:11 - If we go here, let's see. Looks like this is bold. So let's check out the styles for the text.
232:20 - Oh, yeah, here we go. Text. It's enter, which is the font reasoning everywhere, I believe.
232:24 - Bold and 12 pixels. So right now, what do we have? Card username doesn't have any styles,
232:36 - explicitly set in 16 pixels. I think they set the default size is like one rem, which is 16 pixels.
232:44 - So a card username needs to be font size 12 pixels converted to rem and then font weight is bold.
233:02 - There we go. That looks pretty good. Okay, now let's look at the spacing. I think we said 25
233:09 - right about 28 and 25 and 28. I guess we'll try to stick to the design. So 28 on top. So we want
233:17 - to add 20 pixels of margin bottom to card platform. Margin bottom, rem 28. There we go. All right,
233:32 - now let's do the followers section. So if you look at the design here, this is obviously much
233:38 - bigger than the default 16 pixels. It is inter bold and 56. And the color is white.
233:47 - So let's do that. And that is the card count. There we go. So card count. Oh, yeah, then we have
233:54 - the big and small version. So the color is going to be the same. I guess light background
234:01 - is white far, light background. And then the big modifier is going to be font size rem 56.
234:15 - And then I want to make sure that I did add that modifier in my markup. So what I have to do here
234:20 - because I have some styles for card count, I need to keep that card count class and add to that and
234:25 - say big. Okay, let's see how that looks. Okay, so obviously followers is too big, but we can fix
234:36 - that later. And this needs to be bold. I'm guessing to font wait, bold. Okay, I think that's better.
234:48 - I see this is a little bit big. I'm zoomed in. Yeah, I guess that does seem right.
234:56 - Now let's fix this followers text styles inter regular 12. And it's that gray color again.
235:04 - And then the font size is 12. It is all caps, but I'm going to do that in the CSS versus the actual
235:31 - text. So font size 12, I think I said, then font wait is going to be normal. And then I'm going to
235:40 - add a text transform. And I like making things uppercase in CSS versus doing uppercase in the HTML
235:49 - because if things change later on, and they want to not be all uppercase, you're gonna have to go back
235:55 - and change all the instances of the uppercase to regular case. And I'd rather just be able to
236:01 - remove the text transform if they ever want to not have uppercase. Okay, so we're getting there.
236:08 - Maybe some letter spacing going on too. This seems pretty. Oh yeah, here we go. Five pixels
236:14 - of letter spacing. See, I got to say, I have used Adobe XD most of the time when I'm working
236:31 - with design files, just because that's what the designs would give to me. This is the first time
236:35 - I'm using Figma and I do like a lot of the things they give you. It's a little bit more intuitive in
236:41 - terms of getting the styles out. I could be wrong, but I don't remember seeing some of these. It's
236:48 - not an export panel. You are just a little bit different. And I love how Figma gives you the
236:55 - actual CSS for stuff. I don't think I could be wrong. I don't think I ever saw that in XD
237:00 - unless it's just a feature that I never found out about. But another kind of pain point with XD
237:05 - when I was using it is the letter spacing thing, because they, if I can even get into here,
237:12 - but like it's telling you here the letter spacing is five pixels. I'm not sure what units they
237:18 - were using in Adobe XD, but it was like, I think they're using maybe an illustrator thing, which
237:23 - doesn't really help for developers because I would just basically have to eyeball it. And again,
237:28 - maybe there's some kind of conversion or whatever, but it was a different number, different, like
237:32 - there was no unit for letter spacing. So I'm really liking Figma. All right, enough chatter.
237:39 - Okay, so the number looks good. The follower's text looks pretty good. Let's check the spacing
237:43 - right now. So I think the line height here maybe should be one. That's a bit closer. Let's see
237:58 - what it says here. Nine pixels. Oh, this is a letter spacing of negative two pixels, so let's
238:11 - add that in. Count. And negative two. And I'll set the line height to one.
238:24 - And then for margin bottom, I think it was eight, I think I said. Let's check that nine.
238:43 - Okay, is this working? Let's see. Oh, I need to add the margin to the top of the label because it's
238:52 - inside the card count. Some margin top. There we go. It seems like a lot because there's already
239:05 - space from I guess the line height. I think maybe I'm having issues because I put the label inside
239:27 - the card count because I was trying to make things a bit easier on myself. I usually might need to
239:36 - add another selector here for the number. Yeah, so let's do this. Let's make this. Oops. Let's move
239:45 - this here. So card count is just encapsulating 1987 card labels here and I'll put both of those
239:55 - in a new parent element and we'll call this card underscore underscore followers. And I'll move
240:02 - both of those in there. Okay, then we'll add some of the styles from the count to probably followers.
240:16 - So followers and I personally like using margin bottom versus margin top just because I try to
240:28 - keep things consistent with all my elements and only add space between elements by adding a margin
240:33 - bottom to the first element before. And that's just a personal preference. Okay, let's see how that
240:40 - looks. Okay, not bad, I think. So yeah, we got the margin bottom there. I feel like there's still a
240:48 - little space even though I said the line height to one. So I think I might just need to maybe reduce
240:53 - this some sort of nine pixels. Four pixels, see how the design looks. So things aren't always
241:04 - perfect in terms of what is in the design versus what ends up being in the browser. So it's that
241:09 - much space here. That seems okay. So we'll change margin bottom to four pixels. Okay, seems pretty
241:20 - good. Is this centered? I can't tell. Seems centered. Okay, I think it's centered. And then let's
241:29 - add space under the followers and before the change. So followers is 25. So add that space to the
241:39 - followers selector. So margin bottom, RAM 25, I think is what it was. Okay, looking pretty good.
241:51 - And then let's add the 12 today styles. So in the design, it is green. And that's going to be for
241:59 - the up modifier. But let's add the styles that are shared with both the up and the down styles.
242:06 - So there are different colors, but everything else is the same. So let's check out the font
242:11 - styles for this. It's interval 12. Okay, let's do that. So for the change, font size is 12.
242:27 - And then font weight is bold. And then we'll add the colors here as well.
242:33 - And what color is lime green, I think? Yeah, it must be it.
242:41 - So color far lime green. And since we're hearing might as well add it for bright red to
242:47 - for the down. Oops, far bright red. And why is this not styles aren't coming through?
243:06 - Card change. Oh, I didn't add the modifier thing.
243:10 - The card underscore underscore card, underscore change dash dash up.
243:23 - There we go. Now, I know this might seem really like extra to have these two classes here.
243:31 - What you could also do if you don't want to do that is do something like this where you only
243:37 - include the modifier class in your markup. But then for both up and down, you could say extend
243:45 - a card, underscore underscore change styles. So let's save that. And what extent does it
243:54 - will just copy the styles that are in whatever selector you say. So you can see here. Oh, did I
244:03 - save the HTML? No, I didn't. And if I did things right, things will still show up. Oh, there we go.
244:10 - So card change up. And now we see that it is using the styles. The problem with this is that,
244:17 - and this is kind of where people just had different opinions on things. But a lot of people don't
244:21 - recommend using the extend rule in SAS because you end up adding these styles to three different
244:27 - selectors. You're adding it to card change, then you're adding it to card change up and card change
244:31 - down versus if we went back to what we had before, card change, get rid of this, save both of these
244:45 - things. Then what you have is it looks the same. But you can see the styles are sort of separated
244:54 - out. So it's like card change up. It only has the lime green color. And then the other styles that
245:00 - are shared with both the up and down styles are in card change. And you're not having multiple
245:06 - selectors for a given set of rules. So it just kind of helps to keep your CSS a little bit more
245:11 - compact. Obviously, you know, the trade off is that now instead of one class, you have two classes in
245:17 - your HTML. And some people, you know, they don't like doing that. But I think I used to use extend
245:23 - a lot because it was handy for this very purpose. But I think you seem to be careful when you're
245:27 - using it. I'm kind of nowadays just using these multiple classes in my HTML, even though it seems
245:34 - kind of lengthy, just because I would rather have my CSS be a bit more structured and not, you know,
245:40 - unnecessarily share styles between selectors. Of course, this is my own preference. If you
245:46 - want to use extend, you know, you're more than welcome to just if you do make sure you're not
245:50 - using it with super, super nested selectors. And that's one of the guidelines when you're using
245:55 - SAS actually is that I think they recommend not going more than like three layers in. So
245:59 - card is the first layer. And then these elements platform is a second layer. And then icon the
246:05 - second layer and then the modifier in the element is the third layer. So you don't want to make too
246:11 - many nested things because that just makes your selectors and your final CSS really long, which
246:16 - can make your file bigger. And it can make things a little bit more confusing when you have a lot
246:21 - of different styles and a lot of different selectors. So we're actually doing pretty good here. I
246:31 - think for this change, we do need to add that arrow icon that we see here. So it's obviously an
246:37 - up arrow for the up and then down arrow for the red. And let's see if they yep, they gave us an icon
246:45 - up and an icon down SVG, which is interesting. Let's see if the colors included in here. Oh yeah,
246:51 - it is. That's probably why they did that down icons there. Another approach you could do if you're
246:58 - trying to save on SVGs is just to have this one icon up and then set the fill based on the CSS
247:06 - class. And then you can use a transform to rotate it 180 degrees for the other class. But
247:11 - obviously this works just as well. And then that way we don't need to necessarily create
247:17 - additional CSS styles for the up and down versions. So I think what we're gonna do is in here
247:26 - it's sort of like what we did with the icon up at the top. So we had an image with the icon
247:30 - that we had the username. So we might need to do the same thing and add a few more
247:35 - selectors here. So I'm gonna say image source. Let's see if I can get away without having to create
247:45 - a new class for this images. Oops. Images. And then icon up. Shoot. There we go. No.
248:01 - So I'm gonna use this new keyword that I got. The place is a bit different from what I
248:05 - was using before. Alt up arrow. Okay. So I think what's going to happen is I'm going to
248:15 - probably have to create another div to enclose the thing the 12 today, similar to what we did with
248:21 - the follower count just to make things align a little bit more neatly vertically. So yeah,
248:28 - you can see the icon is at the bottom. And you know, I could do something like, you know, position,
248:39 - absolute top and then set like a very specific pixel width and I have to set the parent to
248:46 - position relative so it doesn't fly up the page. So you can kind of center it that way. But then
248:55 - of course you need to when it's vision absolute doesn't take up space on this on the page. So we'd
249:01 - have to say something like, Oh man, I don't even know if it's gonna work. But display inline block
249:08 - and then set padding left to something. I'm just using pixels just for the ease of it. And then
249:14 - you would position the icon left zero pixels, you know, and then just kind of eyeball it to center it.
249:27 - But I feel like that's kind of a lot. I try to avoid using position absolute unless I really
249:31 - have to. I feel like you could just as easily fix this by using, you know, flexbox, which is,
249:39 - I think we did here with the the Facebook icon. And the only difference we'd have to do is create
249:45 - another div here for the 12 today content. So we'll create a new selector card underscore underscore
249:54 - number for lack of a better word. There we go. 12 today. So now we can set card change to display
250:07 - flex. And I usually try to put my flex box and or see as good properties first. But you can do
250:19 - whatever order makes sense for you. Okay, now this is a problem because having an image as a flexbox
250:27 - child will make it stretch automatically, unless you explicitly set a line items, I think. So let's
250:37 - see if that works. Align items center. There we go. If you don't explicitly set a line item,
250:44 - I think it'll say like stretch as it Yeah, so you can see that. So we just set a line items to center
250:51 - and everything's happy. Let's see if it actually tell us let's look. So I uncheck this. So this
250:56 - rule won't take place. Let's check the computed and see. Oh, yeah, all items is normal, which I'm
251:03 - assuming is stretch based on what we just saw here. So we'll do that. Justify content center.
251:10 - Because by default, just by content will be at the beginning, flex start. So we don't want that. So
251:17 - center. So those styles to card change as well. And again, more sort of grouping the flexbox style
251:27 - rules together. Okay, looks pretty good. I think we need to add a little space between the arrow
251:33 - and the number. Yeah, so let's double check that. Four pixels. So what I want to do is maybe add a
251:44 - margin right to the number. So under card change, underscore underscore number. And you'll notice
251:53 - that in my style, I sort of try to follow the order of the elements in the HTML markup. So because
251:58 - card change comes first, it's the parent to card number, and putting card number after the card
252:03 - change set of rules. So what we're gonna do, oh, yeah, add space, some margin, right. And that was
252:11 - eight, I think I can't remember. Let's see. Four. Wow, totally off.
252:21 - Man, I'm so glad I added this REM function to convert from pixels to REM, REMs for me because
252:26 - if any of you watched my previous song, previous videos, I would always have to pull out my calculator
252:31 - every time. And it was kind of a pain. Okay, that margin rights not working. And I think it's
252:38 - because I have an image tag, which is by default display in line, I think. So I need to set it
252:47 - to display block in order for the margin to happen. Oh, that didn't work at all. Oh, you know why?
252:55 - It's because I added it to card change. No added to card number. Yeah. So I wanted to add it to the
253:06 - image tag here. So I could create another class here, card, you know, card on a throw on a score
253:15 - arrow or whatever. But sometimes I sort of balance out creating, you know, the need to create new
253:21 - classes and new selectors with using an element selector, especially for images. So this image
253:28 - tags in the card change div. So if I add image tag there, there we go, save that.
253:40 - That's I know that this style rules only going to affect image tags that are inside the card
253:45 - change div. So you can see again that using BEM really helps to avoid, you know, conflicts in
253:52 - naming, because everything is a very unique, a unique name. There we go. That space looks a
253:57 - lot better. This car's looking pretty good. See what else we need to do here. So we got all the
254:04 - main elements here. I got the padding set. I think we need to do a little border radius here. You
254:09 - can see the corners are slightly rounded. Then we need to take care of the bar. Oh, hello.
254:16 - Now let's see where it tells you about the border. It's mixed. Okay, that's how do you. Oh gosh.
254:23 - And we'll tell you the border radius rectangle.
254:33 - Oh, looks like it's five pixels corner radius. So they call it corner radius. So corner radius
254:40 - of five, which is border radius in CSS speak of the card. So go all the way back up to the card
254:48 - selector and go border radius. Oh gosh, can't type at all. Rem five. And it's I think the same
254:59 - all the way around. Okay, so we can it's kind of hard to see this, but you can see that it is a
255:08 - little bit rounded. Now we want to do the stripe. So let's see what tall this is. Maybe this is
255:19 - it. Here we go. Four pixels tall. So let's just try and see if I can add that through
255:29 - border, border top five pixels. So around five solid. And then we want that Facebook color.
255:40 - So Facebook.
255:47 - Okay, let's see if this works. Oh wait, maybe dash dash Facebook.
255:51 - Oh, come on. There we go. Now we can see everything.
256:00 - All right, let's check our browser. Okay, that didn't do anything. Really? Let's try reloading.
256:11 - Hello. Did I add it to the right place in card? Oh, card dash dash Facebook. I didn't add the
256:18 - modifier. Here we go. Some card Facebook. All right, now it should show up. Oh, there we go.
256:29 - It looks pretty good. Yeah, it looks very close to the design.
256:39 - I'm pretty happy with that. Okay, so now let's create the other cards. And the good thing is now
256:45 - that we know that this is correct, we can just copy and paste these selectors here. So in container
256:53 - is the card element. So I'm going to go like this. And is that right? Yeah, so one, two, three.
257:06 - So when I save this, and you know, I might honestly add some space just to be able to parse it a
257:13 - little bit better myself. So now we should have four Facebook cards. Let's remove the space here
257:22 - from the change element. Just so we know what belongs to what card. Okay, so now we should
257:30 - have four Facebook cards on our website. Okay, and we do. Now, of course, we didn't add the grid
257:39 - stuff. You can see it. They're trying to sync the scroll.
257:52 - It's a little bit buggy. Anywho, let me think about this. So yeah, let's just let's do the grid
257:59 - layout now. So obviously, we mentioned before, this is going to be four columns. I guess we can
258:07 - add the space between them 30 pixels. I would usually use maybe grid for this, but I think you can
258:14 - also use flexbox. I think the main advantage grid is head over flexbox, among other things is the
258:21 - gap property. But I think flexbox is slowly going to get the gap property. Let's see, let's see if
258:28 - that's available. Can I use calm? Oh, so gap actually is using flexbox, unless you're using IE 11,
258:39 - but if you're using IE 11, you're gonna have way bigger problems in flexbox gap. So let's just see
258:45 - how this looks with flexbox just because we did use grid for I think the header stuff. So we're
258:52 - going to add the grid stuff in the parent section tag, which is the container. So I guess I'll have
259:00 - to add another class to make this a flex parent. And because, you know, there's two sets of grid,
259:06 - so the top cars and the bottom cars, and they're all using the same four column layout, I want to
259:11 - reuse that class. So let's add a new class flex dash parent. And then in the layout SAS file, we'll
259:22 - add another set of rules here for flex parent. And it's stacked to one common mobile. So the
259:32 - display flex needs to be in our breakpoint mix in medium. Display flex.
259:46 - Now see what we got. Alright, so now they're all in the same line, which is good.
259:52 - Let's kind of focus on the desktop version for now. And we want to add space. So we'll say gap
259:57 - of rem 30. Now we have a nice cap now. Let's see if it really goes if they only add the gap space
260:08 - to the between the items. Sweet. Oh, it's interesting. Chrome doesn't have a flexbox inspector. I guess
260:20 - we don't really need it since we can obviously see it's working. Cool. And this will add a gap,
260:26 - I think, between rows as well. Now let's see how it looks on mobile. Oh, not great. So this needs
260:36 - to be centered, I'm assuming. Yes, you can see here. So how do I want to center these? I could
260:45 - center them by saying card margin auto. But then to add space, I would have to say like margin zero
260:57 - auto 30 pixels auto. But then that would, this would need to be only for small and then it wouldn't
261:06 - happen on desktop. So I have to cancel it out on desktop, which is a little bit annoying.
261:09 - So I wonder if it might be better to use flexbox for mobile also, but have it be wrapping. Yeah,
261:18 - maybe I'll do that. Okay, let's go back to here. I need to have flex parent because that's a little
261:23 - bit too generic because, you know, I'm using flexbox in multiple places. Let's say cards. Oh, gosh.
261:31 - Card grid. This is one of those things where, you know, I don't know what the right name for this is
261:45 - card grid. I think what I would sometimes do in the past is because everything's in the card
261:52 - styles here, I would do something like card underscore underscore grid and then add some more styles
261:59 - here, which works with the BEM stuff works with the BEM approach that we've been doing. But then
262:06 - kind of goes against my my personal approach of having the order in the SAS file follow the order
262:12 - in the markup. So it's kind of weird to have the parent be a child, the parent in the HTML be a child
262:18 - in here. I could also just break another rule. And instead of having this be the card be the
262:24 - only block, I would add cards and then make this class name cards. So there's a lot of different
262:32 - approaches. I mean, honestly, you know, what is what's the easiest to understand? I'm just kind of
262:39 - a pick an approach and try to be consistent with that. I might just do cards in the HTML class
262:46 - in the HTML. Yeah, class name and then add just another selector here just for cards. So then I'm
262:52 - not polluting the layout styles with something that's specific to the card grid. So, you know,
262:59 - you can kind of see it's a little bit of an exact science. So we wanted to move the display flex to
263:07 - mobile also. And then flex wrap we want to allow it to wrap. And then I guess we'll move the gap
263:17 - property up to mobile too. We'll probably need some more styles in here. So I'm just leaving the
263:22 - the breakpoint there. What's the next thing we want to do? If we're using cards to use flex box,
263:30 - what we could do is set flex direction to column for mobile. And then for
263:41 - medium and up, we'll say flex direction is row. So that way it'll stack reading flex box,
263:50 - actually stack the items. So now you can see it's stacking nicely. And we have the four columns on
263:59 - desktop. Now, obviously, this needs to be centered. I think let's go back to design. Here we go,
264:05 - mobile. So it looks like the mobile cards are going all the way across. They're wider than what
264:11 - we have on desktop here. So this is 326. And this is 255. So I guess what we could do is have the
264:19 - cards be 100% width on mobile. And then maybe on tablet, have it be two columns, and then on desktop
264:25 - before columns, would that work? Let's see. So I think I had this temporary thing here. So I think
264:35 - I might need to cap the max width of the cards. Well, let's just see what happens when we remove this.
264:45 - I think things might be strangely. Yeah, this is a bit weird. I need to, I think, set the
264:52 - card width on desktop to 25%, 25%. So I think what I should do to do that is card and set the flex
265:06 - property to one. So flex of one means each flex box child, which is each card has the same ratio of
265:17 - dividing up the horizontal width with each other. So that means since there's four cards, they'll
265:24 - each get 25% of the total width. Now it's going all the way across, which is good. So I think maybe
265:28 - that can just fix our problem for us. But we'll have to test on tablet and see how that looks.
265:37 - Okay, let's just see what happens. Flex of one. I'm not sure what it's going to look like on mobile,
265:42 - but we'll find out. Okay, desktop looks pretty good. Mobile also looks pretty good.
265:50 - So let's add a new layout for tablet. How do I do this? That's interesting. Create three
265:57 - pains from website breakpoints. Let's see what happens when I click that. Oh, below 640.
266:07 - And then yams of 40, which is sort of talent and then the desktop. That's pretty cool. I think it
266:15 - must have read my styles. Yeah, that's pretty interesting. Okay, this is 480 width, which I guess
266:23 - would be a very big phone. I mean, I guess that's okay. What you could do is set a max width on the
266:29 - card and then sort of center it, but is everything else in the old design centered? No, it is left
266:35 - aligned. So it might look weird if the cards are centered, but then the text is like aligned to the
266:41 - left. And this is pretty wide for a phone, I think. Yeah, maybe we'll change this manually to
266:52 - the 11. Change this to a tablet size. I'm not really familiar with tablets, but I guess this
267:00 - one seems okay. Oh boy. Oh, yeah, that's that's different. Happens with the iPad 810. Yeah, still
267:15 - doing the stretchy thing. And then desktop is fine. I think the mobile styles are okay. We'll just
267:23 - have them go all the way across. Now for tablet, I don't know if we would really want the card to
267:29 - go all the way across like this. It's because I turned flex wrap on. And actually, what if I don't
267:35 - want flex box wrap on? If I don't do that, then it's too wide to fit. So I do want flex box wrap.
267:46 - But what I would like is to have it be maybe two columns on tablet. So let's kind of test it out
267:52 - in the browser. So flex of one is for mobile. And this is a shorthand property that will
267:58 - take up the flex grow, flex string and flex basis. So flex basis is the default width. And it's
268:04 - 0%. When you just set using the flex shorthand property, flex grow is the sort of speed at
268:13 - which the element will grow and width to fit, you know, the parent width. And the shrink is how
268:19 - much it'll shrink. So what I think I want to do is to limit it to two columns, I could set
268:27 - something like flex basis of 50%. I think. And don't let it grow. So set flex grow to zero.
268:39 - Oh gosh, don't tell me. No 50%. I want it to be two columns, but I think maybe the gap property is
268:49 - making the 50% be too much. Yeah. Oh, that's annoying. That's not cool.
268:57 - I think CSS grid won't do this. Like, I think if you set the gap property and see this grid,
269:01 - it'll just sort of nicely fit everything. So in CSS grid, if we did that, we would set the grid
269:06 - template to one column for mobile, we would set it to two columns for tablet and set it to four
269:11 - columns for desktop. And that's kind of looking a little bit better than what we have here. Yeah,
269:17 - let's let's switch over to CSS grid for this. Oh boy.
269:21 - Okay. So displaying grid, I think gap still works for CSS grid grid template
269:31 - columns is I guess one far for mobile. And then for medium, we'll say grid template columns is
269:42 - repeat to one far. So that means that there'll be two columns. One far is sort of like the flex
269:49 - amount ratio. So the space each one will have the same amount of space. And then we'll do include
269:56 - break point, large grid template columns. And we'll say for repeat for one far, so they'll be the
270:08 - same with in four columns, and we'll delete this flex one thing. I think that's all the flexbox
270:14 - styles we added. Okay. Oh boy, you know, as much as I like flexbox, I think grid definitely has
270:23 - some advantages. So now this is very easy. It's four columns on desktop. We got two columns on tablet,
270:31 - and we got one column on mobile. Nice. So let it looks good. I'm happy with that. The next thing
270:37 - we want to do is add these styles for the other social media platforms. So let's go into our markup
270:43 - and the first card is Facebook, and then second card is Twitter, Instagram, and YouTube.
270:51 - So we're going to change the modifier classes to match. And then also the image, obviously.
270:56 - So this is the first card, the Facebook card. And here's the second card. So card, Twitter.
271:03 - And then change the image. Next one is Instagram.
271:11 - And then last one is YouTube, and I think there's some other copy we need to change to.
271:37 - So Twitter is 1044 and 99 today.
271:46 - Come back up here. 1044. 99 today.
271:54 - And we're just hard coding these values. If this was, you know, an actual app, you know, using data
271:59 - and stuff, then we would use, you know, the framework or JavaScript and the API to generate
272:06 - the numbers here, but we're just using hard coded stuff. Instagram is 11 K and then 10,
272:12 - 99 today, 11 K, 10, 99. And what you might do if you are generating a data from somewhere is in
272:22 - order to be able to target just the number when you're changing it, you might do something like
272:27 - wrap it into span. And then you could target the card number, span child, and then make that the
272:36 - number, but we're not really worried about that right now. So we'll just kind of leave it like that.
272:42 - Okay, and then YouTube is 8239. 144. 8239. 144. Oh, and it's down. So down. And down.
273:05 - And then we'll have to, um, I think add some styles for the different modifiers too.
273:15 - Let's just see how this looks right now. Okay, cool. So yeah, icons are showing up. And you can see
273:22 - we did other styles for the down. So it's red. And we just need to add the styles for the top bars.
273:28 - So because we have nicely organized our styles and our SAS file, we can just look down our file
273:37 - and can see card as this modifier here. Oops. So we'll just copy that. And paste it here.
273:51 - And then replace the colors. And I'm assuming the colors have been named, you know, with the name
273:59 - of the thing. Okay, let's see if that worked. Okay, Instagram didn't work for some reason.
274:15 - Instagram. Let's check our colors. Oh, Instagram start and end. Oh, right. It's a linear gradient.
274:24 - Let's go to our design again. Kind of take a closer look at this.
274:30 - I think the gradients going from left to right sort of and it's angled up a little bit.
274:34 - Oh, here we go. Oh, there's three colors in there. Oh gosh. Oh, I'm so glad they do this.
274:45 - This is amazing. It's seriously amazing. I'm going to copy that.
274:52 - Can I put a linear gradient in a border top? I guess we'll find out.
274:57 - I'm not sure if you can. Oh boy. Yeah, I don't know if you can. Oh, yeah.
275:08 - Oh man, this might make things a little more complicated than I was sort of hoping.
275:16 - Well, it didn't make an error. So let's see. Yeah, it didn't work.
275:20 - Yep. Let's just let's look this up. CSS, linear gradient in border. I'm pretty sure this doesn't
275:35 - so not work. I probably need to fake it somehow. Let's see.
275:41 - Yeah, they're using pseudo elements, which I think is what I'm going to have to do.
275:50 - I mean, it looks really cool. Okay. I feel like they didn't give us the
275:58 - colors we wanted or like there were three colors when I look at the design.
276:01 - Is that right? That's the Instagram end color. Okay. And this is the five middle colors not listed,
276:11 - so we'll just have to add that in.
276:21 - Copy that.
276:22 - Okay. And the angle is 225 degrees. So let's think about this.
276:31 - I want to add it in a pseudo element, so we can't use the border thing. So let's comment this out.
276:37 - Okay, so with the card that has
276:56 - Okay, so with the card, with the modifier of Instagram, we want to add a pseudo element that
277:03 - will look like the border, but it's not a border. It's a pseudo element. So let's get the pseudo
277:09 - element working first. So we'll put it in the before pseudo element. Now for a pseudo element,
277:17 - you have to set the content to something, whether it's an empty string or something else. Otherwise,
277:22 - it's not going to show up at all on the web page. And I learned that in the hard way. Okay,
277:27 - so the before pseudo element content is blank. I'll set the height to, I believe it was five,
277:34 - based on what we have up there with, I guess will be 100%. And I want to have to set this to I think
277:41 - position actually, let's just see what happens if we don't have anything. I think I might need to
277:45 - use position absolute for this, but I'm not sure. I'll set the background to what was it?
277:52 - Instagram start. And we'll worry about the linear gradient later. We're just trying to
278:00 - figure out how to make this element at all for Instagram. So again, we're kind of breaking things
278:07 - down, doing things step by step. So the first step is just getting this pseudo element working.
278:11 - Okay, so here it is with the zero. Why is that? Maybe position relative. We have to set
278:26 - to display block. Oh, there we go. That worked. Oh my gosh. And the other problem is,
278:35 - because it's a relative of padding in the card is limiting the width of this. So that's kind of
278:41 - annoying. I mean, I guess I could do manually add the padding in. So it would be Calc 100% plus,
278:49 - I think it was 30 pixels. So times two is 60 pixels. But then obviously it'd have to,
278:58 - I think I might have to do position absolute. And then width is 100%.
279:03 - And I think I need to set this to position relative to limit the absolute thing. Because otherwise,
279:13 - if you don't set the parent of an absolutely positioned element to position relative,
279:18 - it's going to just sort of keep going up your tree until it hits whatever position
279:24 - has position set. Or we'll just go all the way up to the top and the body. That's why it was so
279:29 - long earlier. So position absolute. And we'll say left of zero, top of zero. The problem is,
279:38 - we want to, it's not taking the border radius. So I think I need to set overflow to hidden. There we
279:45 - go. And the other problem is, I'm a little worried that because it's positioned absolute,
279:51 - it's not actually taking up any space on the page. It's just kind of like floating wherever you
279:55 - stick it. So I think that's made the content in the Instagram card go up, you know, five pixels.
280:01 - So I guess we could fix that by setting the padding top of 1.565 grams plus five pixels.
280:13 - Or we could try doing something like at a margin top to take up that space,
280:19 - a margin top of five pixels. So that seems like it's better. It's a little hacky, but
280:27 - I think to make this linear gradient work, we kind of have to do that. So let's do this. So card
280:32 - platform is going to have a margin top of five pixels. And then I'm not saving because it's
280:44 - going to automatically update my style and update this website. And I want to make sure I copy
280:48 - everything. So the card, we'll just set all the cards to position relative and overflow hidden,
280:54 - because that's not a terrible thing. What a terrible thing for all of them to have that.
281:05 - And then the before element is all this stuff here. I didn't have any of this to
281:10 - the styles yet. So card, oh, I did here. So everything under background.
281:20 - Content height within background. So this is the position absolute stuff.
281:28 - Okay, save that. I like putting the position stuff first.
281:32 - After content. And that's like putting width first.
281:43 - Okay, I think that is not the same. I can't even tell.
281:50 - Let's add a guide.
281:51 - And I'm pretty excited. I did 100 pixels.
282:05 - Ooh, I can't see anything.
282:17 - Let's get rid of these other ones here.
282:19 - Okay, guides.
282:28 - Hover over the rulers to show a guide. And these are the guys I never explained any
282:32 - pixels it is. Click anywhere on the ruler to add a permanent guide there. Okay.
282:36 - So hover over. Let's go to desktop view. Hover over the ruler. Oh, there we go.
282:44 - So these aren't perfectly lined. I think it's because of the icon height. Oh, man.
282:51 - Okay, so let's fix this. My guess is the icon at different heights. So it's like
282:58 - slightly misaligning. And then of course, this one is like really different.
283:03 - So first, maybe I'll set a height for the platform element.
283:08 - Yeah, this is 20 pixels. Let's see how tall Twitter one is.
283:16 - I'm just testing my theory that the icon height is responsible for the weird alignment.
283:19 - Yeah, it's 17. So I think I need to say this one's the tallest one.
283:26 - Instagram looks pretty tall. 20. YouTube is YouTube is 20. So if we say a card platform
283:35 - height is 20 pixels, then you can see the Twitter one kind of went down a little bit.
283:40 - And let's see. Let's do this to sort of debug.
283:46 - Make sure everything is centered correctly. That seems good. So we'll set height of 20 pixels for
283:51 - card platform. Here we go. Height from 20.
284:00 - So now you can see that everything except Instagram looks pretty good.
284:13 - So for Instagram, having to that margin top that I set
284:16 - of five pixels, I think. Oh, and be specific to Instagram. So maybe card Instagram card platform.
284:29 - Hmm. Hey, for card Instagram, I'll add a specific padding top of 5, 6, 2, 5, plus 5 pixels
284:47 - rem. There we go. Cool thing about Calc is that you can combine units. So I think this is
284:53 - awesome. So go back to card. And originally, the padding was rem 25. So let's have to remember
285:02 - that. And we'll see. Oops, adding top Calc is the rem 25. I'll see if this works plus rem 5.
285:16 - Okay, there's no error, which is good. Let's see if this actually happened.
285:27 - Looks a little bit more centered, which is great. I think I added it to the here we go, the padding.
285:32 - Oh, didn't work. Oh, golly.
285:37 - Hmm. So it's really 25 pixels plus five pixels, which is 30 pixels. Wait, I can just do rem.
285:50 - I don't need a Calc. I'm dumb. Rem 25 plus five is 30. So 30. There we go. There we go.
286:01 - Okay, there we go. So now we use the guide here. This is actually a really cool feature of Polypane,
286:10 - making sure things are aligned. Yes, everything is centered now. This is a wonderful day. Okay,
286:17 - so you go back here, tell it looks pretty good. Mobile looks pretty good. So there's padding
286:24 - around everything. Okay, I did notice that I forgot one thing. The Instagram card, I just put that
286:32 - temporary orange color and it's supposed to be a linear gradient if we look at the design again.
286:38 - See, it's supposed to be this thing here. So let's put that in. Let's go back into our code.
286:45 - So I had set that color bar on the top of the cards as a order top. But for Instagram because
286:54 - it's a linear gradient, you can't make a border like a linear gradient, you have to use this
286:59 - sort of hacky workaround and put it in a pseudo element. So here's the temporary color, the
287:05 - background thing. So I think I can just replace that with the linear gradient that I copied from
287:12 - the design file. So we'll just copy that and then cut that out for now. Real linear
287:21 - gradient stuff. And we want to replace these with the variables that we made. And let's just
287:28 - go back and see what we did. Okay, so it's Instagram start Instagram middle Instagram end. So I'll
287:33 - copy that first one. Actually, it looks like this might be I might have it backwards. So I think
287:39 - this is the end middle and then start. Let's try that. Yeah, var. And then middle.
287:57 - And
288:01 - let's make sure we're not throwing an error. Okay, good. So there we go. And what this is saying
288:09 - is the linear gradient. I think if you don't set some of the parameters like the angle,
288:16 - it'll be like a horizontal gradient, I believe. But you can set options. So like this is 225
288:22 - degree angle. So you know, it's slightly angled up, I think. And then we can set as many colors
288:29 - as we want. And then the percentages sort of tell you where that color starts. So let's slow
288:36 - the website again. Let's see. Oh, nice. That was pretty easy. Great. I just had to, I think it's
288:45 - one thing I'm really liking about Figma, how you can just copy these styles from Figma itself,
288:51 - like has that export option. Yeah, so cool. Okay, so that was a little small thing that we forgot
288:58 - last time. And another thing that I want to sort of update here is in poly paint, it's a
289:04 - little bit of pain for me to have to like try to horizontally scroll between the different things.
289:08 - So if you go up here, I said on horizontal layout, but I think I'm going to try. Let's see what
289:15 - vertical does. I guess that sort of works. Do you want all the same page? And then there is focus.
289:23 - So you can, it creates tabs for each of them at the top, which maybe I think I might like this
289:30 - better. Yeah, let's stick to this one. The vertical one also seemed pretty cool. Okay, let's look back
289:36 - at the design and see what we want to do next. And I think we need to work on the other grid of
289:42 - cards down there. So if we look at that second grid of cards, it has some of the same items as
289:49 - the top row of cards, as we mentioned earlier, so like the icon and the number for the percentage
289:55 - change is the same. There's a new thing has a subtitle for page views. So we need to figure out
290:02 - how we want to build this out. And each card is divided into four, I guess you could say four
290:09 - quadrants, it looks like. So I might use something like CSS grid to create a template where it has
290:14 - two columns and then two rows. Yeah, let's do that with CSS grid. So let's take a look at the
290:22 - markup and figure out how we want to build those that second grid of cards out. Okay, so this
290:28 - section tag is the first row of cards, and let's kind of minimize each card so we can take a
290:33 - better look at everything. So what I'm probably going to do is create another section tag with
290:38 - the same classes, because the container class is what sets the max width and centers it on large
290:46 - viewport, centers it on large viewport widths. And the cards class, I believe, if I remember right,
290:52 - yeah, so this one sets a display of the grid of cards in a four column layout on desktop,
290:58 - two column and tablet, one column on mobile. So yeah, I think we want to create another section
291:02 - tag have the same classes. So section dot container dot cards, and it generates that for us. And then
291:12 - each card will have the markup for each of the items. And I think what I'm going to do is,
291:17 - let me think about this, do I want to just copy this and then just change it? Or do I want to
291:21 - start from scratch? And I think I might want to start from scratch because the design is pretty
291:25 - different, like these top cards, everything is just in one column and centered versus this grid down
291:30 - here. So I think I can probably reuse this card class. Let's see, so the card class, it has the
291:40 - background color, which is the same color of the text, the padding border radius, and then the
291:47 - text line is center, which I don't need, but we can take care of that later. But I think there's
291:51 - enough properties here that are shared between the top cards and the bottom cards that I'm going to
291:57 - want to use the same class for that. Then we can differentiate it with, you know, either a modifier
292:03 - or a helper class. So yeah, let's do that. Yeah, this stuff is just all pretty different.
292:14 - Okay, so space there. So with this second set of cards, I'm going to do sort of what I did
292:22 - in the previous section. And I'm going to start just building one card out. And then once I have
292:26 - that set, make sure all the styles and everything are correct, then I will, you know, copy and paste
292:31 - to create the other the other cards. So let's make our first card. So card, I'll start at the very
292:38 - beginning. And then we'll move the markup into there. So it's page views, the Facebook thing,
292:46 - the number, and then the change. So I think this is what we want for the first card. Now,
292:52 - here's where I need to figure out how I want to lay out this stuff. So what I think I'm going to do
292:58 - is create a grid template for these second cards. Now, where do I want what should the class name
293:06 - be for this? And where should I put it in our sass file? So we look in the card sass file.
293:13 - We had these modifiers for the top cards to control that, that colored stripe at the top.
293:19 - And I think I might do another modifier for the grid inside the individual cards. And you know,
293:27 - this is again, one of those situations where there's not one right answer, at least in my opinion,
293:33 - you could do this, you know, multiple different ways. So I think my options are either creating
293:36 - another modifier to make that grid layout, or I could create a helper class. So meaning instead
293:44 - of doing card, and then let's say we make a modifier class for card dash dash grid, feel like
293:50 - a better word. And then making this be another modifier here, we could do a helper class, which is
293:57 - doing something like, I don't know, card dash grid. So this will be the second class name,
294:04 - and then we'll set all those grid styles in this card grid class. And it's kind of the same thing.
294:10 - I think maybe for readability, because we have these modifiers ready for the different social
294:17 - platforms. I don't know if I want to just add another modifier. Maybe that would be better in
294:22 - terms of the BEM approach, but I think, yeah, I don't know. Yeah, the name, the naming and
294:30 - organizing part of your style, I think, is maybe not the most difficult part, but it definitely
294:35 - takes a lot more thought than you might think at the beginning trying to figure out, what do I
294:40 - want the class name to be and where do I want to put that? Okay, I think I'm going to try to stick with
294:45 - the BEM methodology and just say card dash dash grid and make that another modifier here.
294:59 - So that way, they're just all like under the card selector here. Okay, so now we have this
295:03 - selector. Let's just say that really quick. And then I think I probably need to put each of these
295:10 - things in their own child div of the card grid so that they can be, you know, laid out in the grid
295:15 - template. So let's think about this card grid. And then in the card grid will be the children.
295:26 - And what I'm sort of thinking through in my mind right now is if I create a separate div with the
295:35 - unique class rich of these things, then that's going to create more classes and stuff that I'm
295:40 - going to have to create like what I have to make another element in here. I'm not really sure.
295:45 - Alternatively, I could do a completely different approach and put all these grid styles in a new
295:50 - SAS file and call it card dash grid and do something like this or it's card dash grid,
295:57 - make a new SAS file called card dash grid SCSS and put all the styles for that in that new file.
296:03 - And that is actually sort of appealing because then I'm separating out the different styles.
296:09 - Yeah, so it's just one of those things where you just got to kind of choose choose one approach
296:14 - and and just follow it. Yeah, I think I might want to do that just because adding more modifiers and
296:22 - elements along with the existing card elements and modifiers, I think might make things a little
296:28 - bit too confusing. Yeah, let's do that. I don't know if that's the best way, but I think I'm going
296:33 - to do that. So we'll make a new SAS file card dash grid SCSS. And I do want to note that the
296:41 - single hyphen is not something that's really part of them, but I just do that with names that are
296:46 - a little bit longer. I could say card grid with no hyphen, but it's a little bit more readable.
296:53 - So card grid is going to be the block name for this. So we'll save that. And of course,
296:59 - since we made a new SAS file, we need to forward card dash grid. There we go.
297:08 - Okay, yeah, this feels a little bit better. I think just separating things out will make things
297:14 - less confusing, hopefully, when when if we have to go back and change things. So we're going to
297:19 - do this card grid and then in here, so we could say something like card dash grid is that and
297:27 - that's the block underscore underscore for the new element. And for the first one, we'll say maybe
297:31 - username. And then this will go in there. And then maybe because the content's not super long,
297:41 - we'll just do it like this. Oh, I guess pretty or just automatically modifies it like that. Okay.
297:47 - And then card grid underscore underscore number, I think. And I'm sort of using I want to use the
297:54 - same element names as we had up here. Yeah, so let's follow our account. And then platform
298:05 - and username. And this is just so actually, I don't know if this is going to, I don't know if
298:12 - this is a great thing, because I want the styles from the card grid username to actually be similar,
298:21 - the same as card underscore underscore username, right? Because they share a lot of the same
298:26 - styles. So I think I need to separate out just the styles for the grid stuff with the card grid
298:36 - thing. But for the child elements, I think I need to do, you know, card username. And then
298:44 - the number. So this is the number here. Let's make sure it matches up with the selector up here.
298:52 - So card username, and then card followers card count big. So I think I want to do card count
299:01 - small for these cards here.
299:04 - Let me just double check and make sure that's the class I made card count small. Yeah, so we're
299:17 - gonna use that here. So I hope that makes sense. But I'm trying to put all the styles that are
299:22 - shared between the top cards and the bottom cards in the card SAS file, because otherwise I would
299:28 - have to if they have a different class name like card grid underscore underscore username or
299:33 - count or whatever, I would basically be having to copy and paste the styles over there. So
299:39 - I would rather they just have the same classes and keep everything as minimal as possible. So
299:43 - this is just this is pretty normal back and forth when you're building something because you don't
299:48 - always get it right the first time. So there's a lot of trial and error. Okay, so this is better.
299:53 - And to take care of the grid child items, because you know, I do need to set some grid styles for
300:01 - these elements here, I'm going to put it in card grid and I might do something like just, you know,
300:07 - nth child one, nth child two, three and four, so that I don't have to create additional
300:13 - classes for these in the card grid. So I don't know if that's the right thing to do, but I don't
300:18 - want to create more classes than I really need. Okay, so 1044 followers. So look at the design.
300:25 - Oh, this is interesting. So I think this is going back to some of the accessibility things that
300:30 - I mentioned in the research video, because this is just giving you the icon for the platform.
300:37 - And this is just giving you the numbers, not actually saying, you know, username here, and then
300:43 - this many followers. And I'm guessing they included that in the copy because, wait a minute, is this
300:48 - even the right copy? So the second, the second card here is supposed to be page views 87. I might,
300:55 - I don't know if I copy the right thing. I might have just copied what was in the first card. Oops.
301:04 - 1044 where'd that number come from? Now this is from Twitter, 11k 8239. Oops. Yep, I copied that
301:16 - wrong. So kind of forget everything I just said. Oh my gosh. All right, delete that. And then we
301:24 - need to find out where the copy starts for these second cards. So it starts with this sub headline
301:30 - overview today. And that's here. Okay, so this stuff I don't need. Okay, so the overview today,
301:43 - the sub headline, I'm probably going to make that an h2 tag because the social media dashboard,
301:48 - that's in an h1 tag. And you want to kind of keep the hierarchy going down the page. So because
301:56 - this is a subtitle, it's a bit of a smaller font. So that sort of tells you that it's a sub headline.
302:01 - And you only want one h tag per page. So this is going to be an h2 tag. And we figure out where
302:06 - we want to put this because in the grid thing, in the container cards grid, each of these divs,
302:15 - each of these child divs is in the grid. So I feel like I want to include the h2 tag inside this
302:23 - section. But you know, I obviously want it to take the full width of everything, not be part of the
302:31 - card grid. So let's think about this. Let's go back to the cards rule here. Here we go cards,
302:39 - display grid yada yada. Yeah, so all the child elements in cards is going to be part of this
302:45 - card grid. So what I could do is move the cards element to its own div here. So then in here is where
303:00 - the second row of cards would be. And then that way, when we add this h2 tag with overview today,
303:06 - it won't be part of the grid. It'll be full width and its own thing. So yeah, okay. Now in this first
303:17 - card, we want to add market for page views, the icon 87 and the 3%. So I don't get confused again.
303:25 - We're going to, oh man, he's doing that. Let's just move this in here. Okay, now we want to create a
303:37 - div for each of these things. So page views is going to be the first child. And the second child
303:48 - is the Facebook icon, I believe. Yeah. So let's just copy it from where we had it up here.
303:57 - Here we go. What did I do?
304:06 - Okay. And then 87 will go up here and then 3%. We'll go in the last child.
304:19 - Okay. So now we have our first card. Obviously, I haven't really made many styles here.
304:23 - So you can see, hold on. I can't see that. Okay, I guess I need to go back to,
304:40 - let's go back to the horizontal thing. And I'll just have to vertical,
304:46 - also have the horizontal scroll. I guess I can do that in our space for the screen.
304:56 - Can't put it on the left side. This is annoying. So you can't see this. I'm going to just quickly
305:03 - add some temporary styles to boilerplate. And I'm going to say
305:10 - I'm in height. I'm going to do VH. So hopefully add some extra space.
305:22 - There we go. Yay. All right. Here we have the card and
305:30 - everything's showing up. It's taking the card styles. So now I need to add the CSS grid styles
305:40 - for the grid part. So it's going to be card grid. So in card grid, we'll say display grid,
305:50 - because we're doing the grid for all breakpoints. We'll table and desktop. We'll say grid template
305:57 - columns. Oops, grid template. Repeat for, I guess, one of our
306:13 - and then grid template rows.
306:19 - And we'll do, are they the same? It's probably the same. Repeat to one
306:25 - before. I just kind of start with this. And then if we need to change it, we can.
306:30 - Okay. So now let's see if that change anything here. Oh, something's wrong.
306:41 - So that space shouldn't be there. Okay, cool. There we go. Oh wait, I want two columns.
306:49 - Yeah, there we go. Two columns.
306:59 - All right. So now it's in the layout, general layout that we want.
307:04 - Let's copy over some of the classes that we created for the top cards so that they'll be in the bottom
307:08 - cards now. So the first one was the page views. I actually don't know if that might be its own
307:19 - style. Yeah. Let's see. Let's enter bold 14.
307:31 - So I think we might need to create a title for that. Let me think about this.
307:37 - Card subtitle.
307:44 - Let's put it at the top. So subtitle font size round 14 font weight 700.
308:03 - And then for the card icon.
308:16 - Let's see where that was here. Card icon. I don't really need this margin right thing because that
308:22 - was just for the main card. I wonder if I'd just leave it without a class that would look like.
308:29 - It actually seems okay. So let's just leave that.
308:37 - An 87, that's the number.
308:44 - So before it was card count, card count big. So we'll do this.
308:52 - And then instead of big, it's small because the number is smaller. And we'd already created
308:57 - this style here. Small. So we just need to add the style for a smaller number.
309:10 - Let's enter a bold 32.
309:13 - There we go. And let me just make sure what it is on mobile.
309:23 - 32. Okay, it's the same.
309:43 - And then the number thing.
309:44 - And that was card change, I believe. Yeah, card change, card change up, and then card number.
309:57 - So I'll need two divs, I think. Actually, I need, I will need the image too.
310:10 - Oh, what was that? Here we go. And then card number.
310:29 - And then there's no today thing.
310:30 - And then we need to add the class for the card change, card change up.
310:47 - All right, now let's see what we've got. Okay, so we can see these styles are taking effect
310:54 - and they pretty much match in this number smaller here, which is good.
310:58 - Let's see what else we need to do. I think we need to align
311:01 - the things on the left to the left and align the things on the right to the right.
311:06 - Yeah, the panel looks about the same. 24.
311:14 - So it's about the same, the top card. So yeah, I think we're just going to align
311:17 - things to the right to the left and the right. And then the top row looks like it's aligned in
311:25 - the middle vertically. And the bottom row looks like it's aligned on the bottom.
311:31 - So we'll have to take care of all those alignment issues here.
311:36 - Let's go to card grid. And so what I'm going to do is I don't want to create,
311:47 - I guess I could say card subtitle there.
311:49 - Yeah, so let's do that. We're going to create rules for card subtitle,
311:56 - card count card change within card grid. I don't know if it's the best thing to do,
312:01 - but at least it will be a little bit more descriptive when you're looking at card grid.
312:08 - Yeah, let's do it. Now I might be straying a little bit away from strict them format here,
312:13 - but I think it's okay. Oops, where I do card subtitle. Card count card change.
312:33 - Subtitle card card change. Oh, yeah. And then the image.
312:36 - Try out a class on that. I think I didn't want to because this is adding new styles that I don't
312:45 - need. So because there's just an image here. Actually, I think I do need to add a class here.
312:55 - So I can identify it. This one was card platform, card icon.
313:02 - I could reuse it, I guess. Card platform was a parent div, which is the same hierarchy as what
313:13 - we have here. So card platform, what styles did I write for that platform? Oh, yeah, I do not want
313:21 - this because this is a lot of, this is the flex stuff that made this centered vertically.
313:28 - So yeah, I don't want that. Hmm, hum, hum, hum, hum, hum. I wonder what would happen if I just
313:37 - had an image by itself without having this div, the wrapper div. Oops. What am I doing here?
313:52 - There we go. Let's see if this messes anything up.
313:54 - Yep. Okay, I guess that looks okay. So let's add some of the alignment issues.
314:04 - Let's add some of the alignment rules to the card grid. So justify content, which is the
314:10 - horizontal since our grid is going this way. Justify content. I want this to be, do not space between.
314:18 - It's a flexbox thing, but let's see if that worked. Oh, that did not work.
314:29 - Hmm. Line items.
314:37 - Well, that looks like it worked. Yeah, so wait a minute.
314:39 - Let's turn on the grid, a card grid. There we go. All right, what's going on here? Um,
314:52 - like the channel on items centered in the cell. Oh, this is because I did, um,
314:58 - it's making both rows the same height because they're both 1FR and they're taking the height
315:02 - from this 87 thing. So, okay, there's a couple problems here. One of the, I think the card
315:09 - may not actually be tall enough. It's 120 pixels right now. And it's 125. It's actually pretty close.
315:20 - So maybe I don't need to worry about the card height, but I think I seem to align each cell
315:24 - individually if I'm not mistaken. Okay, let's just go to CSS tricks grid guide.
315:33 - CSS tricks has these very, very, very helpful resources for flexbox and grid. So, let's see.
315:42 - Let's look for justify. Okay, so justify items and justify content. So aligns grid
315:51 - items along the inline row, and so you apply to all grid items inside the container. Start
315:55 - aligns items to be flushed with the start edge of their cell. Oh, this is what I need to do.
315:59 - I think justify content is the cells themselves. Justify items will align each cell content within
316:08 - the cell. So let's do that. Let's just see what this how this works. I think this supposed to be
316:16 - start. Okay, this is going to line everything to the left if this works. Okay, yeah, looks like
316:26 - that's what's happening. So I need to align the other things to the right. So this is going to be
316:34 - the image and then the change. So I can override that with justify self and the card change. Let's
316:45 - just make sure that's working. Okay, that is working. And I think I might need to do a compound selector
316:52 - here. So image, comma, card change. So this will affect the image tag for the icon and then the card
317:00 - change div as well. Okay, good. Now let's use these handy little guide here. And it does look
317:10 - like it's centered vertically, which is great. And then here, it's like sort of, I think they're
317:16 - both on the bottom. Let's see. Oh, I guess it's centered. Let's see if we can do this card number.
317:29 - Um, align self and oops. Oh, geez. Oh, it's a card number card change. Oops, what is going on here?
317:49 - Okay, so I'm gonna have to do card change and then card number, I think it was for the 87.
318:02 - Let me see if I even got that right. Card count.
318:13 - They're not quite look the same. I think maybe because this is sort of determining the height of
318:17 - each row. And I want to get rid of that for sure. The margin bottom. Yeah, margin bottom.
318:26 - So card count and card change will be aligned self and card count. I want to get rid of that
318:33 - margin bottom zero and then card count card change align self and. Okay, I think that looks
318:52 - better. So yeah, so the top row is centered vertically. Bottom row is aligned to the bottom.
318:58 - Okay, great. Let's check the height of this card too. 114. So I think I need to add some space
319:08 - between the page views and then the number. Yeah, there's a lot more space here. You can see this.
319:16 - 2021. So I will add space. And I kind of want, I don't want the first row to be the same height
319:32 - as a second row. So I think maybe I think there's a property called like fit content or something.
319:40 - That didn't do anything. What if I do auto? Just the, oh, that actually kind of worked.
319:51 - Okay, good. So now the rows are only taking the height of the content in the row. So let's change
319:56 - that. So in card grid, grid template rows repeat to auto. Okay, good. And then now I can add the
320:07 - space with the gap property. So gap. I think it was 24. Let's double check that.
320:18 - 21. And the whole card we want to be 125. So we can adjust that.
320:24 - 21. Oops. What? The gap property is not working.
320:41 - Oh, I think I did something wrong. Oh, it's not using the, it's not taking the function.
320:49 - But it's also not throwing an error, which is weird. I think I didn't remember to
320:56 - add this util thing because that's where the rem function is. But I'm really surprised that it
321:01 - didn't throw an error in Gulp. Okay, now the space is there. Interesting. Okay, let's check the size
321:11 - of the card. 123. Maybe we'll add two pixels to that to make it 125 to match the design. There we go.
321:25 - All right, looking pretty good. Not bad. All right, let's add the other cards to our markup.
321:37 - So there's four times two. There's eight cards. Oh, wait, I forgot the subtitle.
321:44 - Oh, let's take the styles here. Interbold 24.
321:55 - Actually, it looks pretty close. I guess I made that an H2.
321:59 - So since it's an H2 tag, I'm going to put the styles in the typography SAS file.
322:07 - Here we go, H2 font size rem 24. So it's 24 on desktop. Let's see if it's the same on mobile.
322:27 - It's slightly smaller. 24. No, it's 24 all the way around. Okay.
322:42 - So that makes that pretty easy. And I might need to add a margin bottom to this 24 margin bottom.
322:48 - And let's check what it is on mobile. 27. Usually you have more space on the desktop version.
323:00 - Let's just say 24 for both. I think that's close enough.
323:03 - Okay. All right, that's looking pretty good. Cool. Cool. Cool, cool, cool, cool. Okay.
323:26 - I think that is good for this card style. So let's go close these things out.
323:34 - And so here's a card grid. Sorry, card card grid. This is for the Facebook card. So I'm just going to
323:43 - 2, 2, 3, 4, 5, 6, 7, 8. So let's see how it looks. Nice. Yeah, it looks good. Cool.
324:03 - And this is the benefit of creating styles that you can reuse because I create all the grid styles
324:08 - for the cards for the top row. And I can just reuse the same classes for the bottom row.
324:17 - So it makes things efficient. And it also makes things easier on me. I don't have to, you know,
324:22 - write the styles every single time. So now we just need to update the copy in each card to match the
324:27 - design. So second card is likes 52. It is still Facebook 52. And it's a down of 2%.
324:44 - And then we need to change this. Oops, I changed the wrong one, I think.
325:00 - I'll just move that up. There we go.
325:15 - And okay. And it likes Instagram 5462.
325:30 - 5462. And the percentage was 2257. And it's green. Okay. And the next one is Instagram again.
325:56 - So let's copy this. And it is profile views.
326:03 - Instagram and then it's 52k. 1375% has changed. And then this one is retweets 117303.
326:33 - And it's up. Then the likes.
326:53 - Also for Twitter.
326:54 - 507 and 553.
327:02 - Okay. And then YouTube, like, oh, their YouTube not doing so well. YouTube likes 107 and down 19.
327:30 - I think I need to change the down arrow for the other down arrow.
327:46 - The alt text. Okay. And the last card, YouTube total views.
328:02 - Let's copy the YouTube icon 1407 down 12.
328:09 - And then down. Now it's got the whole selector there.
328:20 - 12. Hey, I guess I can just delete this.
328:25 - All righty. Looking pretty good. It's two columns. Yeah. One column on mobile.
328:44 - Sweet.
328:48 - Yeah. I mean, that looks good.
328:56 - Let's go back to the design, make sure we didn't miss anything. Yeah, those seem like it's
329:01 - matching a design pretty well. And I do need to do the hover state. So let's do that.
329:10 - So the hover state is on the cards. When you hover over a card, it looks like it just changes the
329:19 - background color. Let's see if anything else changes.
329:25 - 33A8, 33A55.
329:46 - Okay, 33A55 when you hover. It doesn't look like there's anything else. Like it's not
329:52 - scaling up and there's no box shadow, at least that I can tell.
330:03 - Okay, so it's really just the color change. And I'm assuming this is the same color. 33A55. Yeah.
330:11 - I think that's kind of it for the hover states.
330:15 - So let's find out what that color was. 33A55.
330:26 - So the dark background was there. Is that right?
330:35 - What is this in a HSL? That's kind of funny. And what if you can do HSL in a Figma
330:42 - hex to HSL? You know, actually, I can do this in VS code. I'll just do a test color here.
330:53 - Test.
330:58 - And then we'll click on this and click this. So it's 282527. So it looks like this is a new thing.
331:07 - So I'm going to say card, hover, and then we'll move this down where the card styles are.
331:20 - Maybe here. So I might call this dark card hover. There we go. So now you can copy this variable,
331:29 - go to the card SAS file. So here, I'll add a new selector for the hover, pseudo element,
331:40 - or pseudo class, I think is what it's called, pseudo elements are the before and after,
331:44 - and then hover is a pseudo class. Background, far dark card hover.
331:53 - And to make it look a bit nice, we'll add a transition on that.
332:00 - Background 150 milliseconds ease in out. This is kind of my default animation timing.
332:09 - So now do any of the colors of the text change when you hover? Let's find out.
332:23 - Color is 8c9 8c6.
332:30 - 8c9 8c6. So it's the same color. Okay. So the text colors remain the same. It's just the card
332:38 - colors that are changing when you hover. Cool. And I wonder if I should add a cursor,
332:48 - probably did card to cursor pointer.
332:56 - So this way, if you hover over any part of the card, it goes to the hand. And I'm assuming
333:01 - that's going to be, because if you click on one of these cards, it'll give you some more details
333:05 - about the analytics or whatever. So okay. This looks pretty good. So we've pretty much gotten
333:15 - all the cards built and styled out, according to the design. So the next step is going to be,
333:21 - we need to look at some of the accessibility things that we researched in our research video
333:26 - for the screener only text. And then we can start working on the light mode and getting the toggle
333:35 - working for switching between dark and light mode, and also with the system preferences. So that
333:42 - it'll be dark mode if you set dark mode in your OS and then light mode if you set light mode in
333:47 - your OS. But it also gives you control if you want to explicitly change this website to dark mode
333:54 - or light mode. Hey everyone, this is part five of the front inventory series where I've been building
333:59 - this social media dashboard with a dark light toggle. In this video, we're first going to check
334:04 - out some comments I got on the last video and incorporate their feedback into the website.
334:08 - Then we're going to load either dark or light mode on the website based on the user system
334:12 - preferences in their OS. And last, we'll get that toggle working so that the user can switch
334:16 - between light and dark mode if they so choose. All right, let's get into it. So here is what we
334:23 - have so far in the challenge. And I wanted to point out some comments that I got in the last video,
334:30 - which actually was really great feedback. So this person, Amar, he was saying he doesn't think
334:35 - there should be three options for dark mode should be dark light toggle and system is a default,
334:39 - but then the user can switch from dark to light if they want. And what I had done was that I had
334:44 - three options for this toggle, dark light, and then system preferences. And I realized that this
334:52 - comments from both Amar and also another user big squeak, they both said the same thing that you
334:57 - don't actually need the system preferences option because you can save the option based on your OS
335:05 - and have the website load that. And so you don't actually need to manually have that system preferences
335:10 - as an explicit option. And it kind of can be confusing or distracting. So I think that actually
335:16 - makes a lot of sense. So what we're going to do is first kind of remove the system options so that
335:21 - the toggle is back to two options. And when we're considering the UI, it's always good to go back
335:26 - to the design. And we can see in the design that, you know, the original toggle was two options,
335:32 - and it's really just a dark mode toggle. So it's sort of like a light switch, you're turning dark
335:37 - mode on or you're turning it off to go to light mode. So dark mode off is on the right position.
335:44 - And then dark mode on is the left position. So I think I just kind of got away from maybe what
335:50 - the design originally intended, which you know, it happens. So yeah, thank you to both Amar and
335:56 - also Big Squeak for bringing this up to me. So here's our site. And let's go back into our code.
336:05 - And we want to go to the toggle. And I do have the site already running with Gulp and stuff. So
336:12 - let me just make this a little bit smaller since we don't really need it right now.
336:15 - So here is the toggle. And yeah, we got these three options here. System dark and light. So I'm
336:25 - going to remove system. And I think that's all I need to do. Oh, yeah, remove the labels too.
336:31 - So let's save that. And then go back to our site. Okay, so now it goes from dark to light. And I
336:39 - think it's a little bit wider now than I really need it to be. See the design says 48. And obviously,
336:49 - this is wider, I think, because of the third option that I added in there.
336:55 - And my toggle is 60. And let's see, I'm trying to see where I had said that width from the toggle
337:07 - is one of four 3.75 grams in one of far. So let's look in the grid inspector,
337:15 - header toggle. Okay, so yeah, you can see that this is, let me actually maybe zoom in a little
337:23 - bit, just so we can see the toggle a little bit better. So it says three comms, it is one
337:30 - of four 3.75 one of our so I actually want to remove the Oh, not sorry, not remove. I want to
337:38 - decrease the width of that middle column to whatever 48 pixels is. So let's see where that's set and
337:50 - go into our sass files. Let's find the toggle toggle.scss. So this is one reason why I like sass and
337:58 - organizing all my files like this, because, you know, I know that I'm working on the toggle.
338:03 - So I can go into the components folder because it's probably there and then look for toggle. So
338:08 - splitting the the styles up and partial files, I think, is just it helps when you have to go back
338:13 - and fix stuff. So here we go. So rem 60. So now it's going to be 48. And I think everything else
338:21 - can stay the same. Yeah, so let's save that and go back to the site. And now we have just the two
338:29 - columns. Let me actually, there we go. Okay, that's pretty good. I think also, if we look at the
338:38 - design, it's just dark mode. So I think maybe I don't need. I don't know if I need that label.
338:49 - So I mean, need to make the first one dark mode. And then
338:55 - if it is a radio button, you do kind of want to label. So maybe I can just hide this second label
339:00 - so that it's not visible. Although it's not visible, but it would still be right picked up by screen
339:07 - readers. But if you're using a screen reader, you probably don't necessarily care about dark
339:13 - or light mode, I could be wrong. But I think maybe I can just delete this label.
339:18 - Because actually the label, the dark mode is really just labeling the entire
339:24 - switch is not necessarily the choice for the radio button. So I think maybe this
339:29 - shouldn't be the label for dark, but maybe it should be like the the header kind of for the
339:35 - radio button. So I think I might need to look up what the correct element, like the semantic
339:39 - HTML element I want to use for that. So let's see. Let's check this link out. Okay, so
339:53 - legend, oh legend, maybe that's what is for like the sort of title of the radio button.
339:59 - Yeah, I think maybe that's what I want.
340:00 - So instead of label for dark, this is going to be legend.
340:13 - Oops, legend. And then we will move this up, I think, under the field set, if I'm not mistaken.
340:24 - Let's see, where that? Yeah, so it's the first element under field set.
340:32 - Okay, then I might need to switch some of these styles since it's a different element now.
340:37 - Yeah, I wonder if I could just put it in toggle wrapper.
340:41 - See if I can manually move it in the browser.
340:47 - Doesn't exactly work because toggle wrapper is, oh, for the actual toggle.
340:51 - Yeah, I definitely don't want to do that. So I might need to do field set also
340:58 - like display grid, I guess. Wait, right now it is the three column thing.
341:04 - And that was originally for the label. It was dark than the toggle and then light.
341:10 - So now I remove light. So I actually just need this to be two columns.
341:13 - Let's just test this in the browser first. So I think it's just one of our three rams.
341:26 - That right. And then I don't want, I just want, it's on one row.
341:36 - Maybe auto instead of one of our since.
341:38 - And then I need to adjust the, okay, let's just go into the code.
341:43 - I need to adjust the location of the cells.
341:46 - So let's figure out what we're going to do.
341:47 - So I want to set header toggle to be two columns.
341:51 - The first column is going to be the legend element.
341:53 - Second column is going to be the toggle wrapper.
341:56 - So let's do that toggle. Oh, label.
342:02 - Oh, yeah. So this is, sorry, this is the CSS grid parent.
342:10 - Header toggle toggle. And I set the styles under toggle.
342:15 - Okay, so it's two columns.
342:17 - And we're going to remove this because it's one row.
342:21 - And I think the gap can be the same.
342:25 - And the label is what's different now.
342:26 - So I actually don't need the dark system in light stuff anymore,
342:33 - since we're not doing that.
342:36 - I don't know if I need to line itself either.
342:41 - So instead of label, it's legend.
342:46 - And then the, so legend and then it's toggle wrapper is the second column.
342:52 - So legend will be grid column one and ends it two,
343:01 - since it's just taking up the first column.
343:04 - And then wrapper will be two, one to two, I guess two to three is right.
343:10 - Yeah. And then we'll move grid row because it's just that one.
343:16 - And I think that should fix it.
343:18 - All right, um, what's going on?
343:24 - Why is it not all in one row?
343:26 - Like I want it to.
343:28 - Okay, clearly some things are
343:31 - larger than the grid.
343:35 - It's so weird.
343:35 - I think I'm doing something very wrong here and I don't know what.
343:39 - I'm going to start over deleting all the grid properties.
343:44 - It's deleting all the grid properties.
343:53 - Let's make sure we don't have anything else weird here.
343:57 - Okay.
344:00 - Now, this is no grid is going on.
344:04 - So now let's try adding a grid.
344:07 - Display grid, grid template columns, and I'll say two columns.
344:13 - So maybe one if R and then, let's say four rims.
344:24 - Let's just say one if R one if R.
344:29 - So now let's, okay, so now it's already not fitting in one row.
344:36 - I'm just going to add static things.
344:57 - So we'll do six rims and three rims.
344:59 - Okay, so now let's place the first one.
345:02 - One, grid column, one, two.
345:09 - What if I did two, three?
345:11 - Oh, interesting.
345:13 - It's not doing anything.
345:17 - I wonder if any display block would do something.
345:22 - Wow, I feel like I need to return my CSS membership card or something.
345:27 - So this is not working.
345:29 - It's not positioning this anywhere,
345:31 - which is weird.
345:33 - Okay, I'm just going to try to set this as a div and see if it does anything.
345:37 - Div, grid column, one, two.
345:43 - Let's see if two, three.
345:44 - Oh, so this moved it.
345:46 - So there's something about the legend element, not working.
345:51 - Interesting.
345:58 - Interesting.
345:59 - So legend element is not getting affected by grid properties,
346:03 - which is very strange.
346:05 - Let's see if we can do it for the toggle wrapper.
346:07 - So grid column, two, three.
346:11 - So that's working.
346:15 - One, two.
346:18 - So let's look that up.
346:19 - So CSS grid legend element, not working.
346:34 - Okay, yeah, setting the fields at two display grid,
346:36 - which is what I wanted.
346:42 - That implementations are field set and legend is extremely rigid
346:45 - with very little accommodation for change to that
346:48 - most via display property, which is what happened when I tried to set it
346:51 - to display block, it didn't do anything.
346:54 - Display grid is not support on field sets by any browser.
346:57 - Whoa, when was this written?
347:00 - 18.
347:06 - So I think maybe I can't do grid on the field set.
347:11 - So let's delete that and go back to this.
347:14 - So I think this actually makes a lot of sense because I think in Sarah,
347:20 - Soydon's example, she was using display inline block if I remember correctly.
347:29 - Yeah, I don't remember where this was set, but I do remember that happening.
347:33 - I was kind of curious why that was happening.
347:37 - So I want to do display inline block for the legend.
347:40 - And I think display inline block.
347:49 - And I think display inline block too.
347:55 - Hmm, I don't know why this is so hard.
347:59 - Okay, she has a thing here.
348:00 - Okay, so the field set and she's using a div, oh, theme switching toggle.
348:20 - Wait, why is it commented out, but it's still showing up?
348:23 - Oh, there's just the h1 there.
348:33 - Okay, she did labels.
348:37 - So it seems like the legend, it forces it to be just above the toggle itself.
348:46 - For some reasons, it's just not letting you control the display.
348:55 - What if I display inline?
348:58 - Yeah, that's not going to do anything.
349:00 - This is a very strange little thing.
349:03 - Yeah, so display property on to field set and legend.
349:07 - Oh, it said it does support it back on field sets.
349:10 - A rendered legend is not a child box of the anonymous fields at content box.
349:20 - So that's why I think it couldn't act as a grid child.
349:25 - All right, let's read this spec.
349:29 - Field set is expected to act as follows.
349:32 - Element will establish a new block formatting context.
349:35 - This child's a legend element float is none position none.
349:45 - I think what I'm actually going to end up doing is switch this back to a label so that
349:49 - it'll be dark mode on for the first label and then dark mode off for the second label,
349:54 - but I'm going to hide the second label.
349:56 - I don't know if that's the right solution, but I think the legend is not necessarily
350:00 - what I'm looking for.
350:01 - So
350:16 - dark mode and then we're going to add a little span here
350:22 - for on and I'm going to hide this with the
350:26 - I think I did do this last time.
350:28 - I don't remember a screen reader.
350:34 - I want a screen reader hidden thing.
350:37 - Um, I don't think I added it.
350:38 - So I guess I can add it in now.
350:44 - Okay, screen reader.
350:49 - Here we go.
350:50 - So visually hidden.
351:01 - So I'll take this put it in our boilerplate.
351:04 - And then if I add this visually hidden class to the span, then I'll add back that label
351:21 - and do the same thing for the dark mode off.
351:35 - I know it seems maybe silly because if you're using a screen reader, you're not going to really
351:41 - be navigating this toggle, but at least you'll be able to notice there, even if you're not selecting
351:48 - an option. Okay, so then we're going to go back to the toggle.
351:57 - Yeah, label and we're going to go back to display grid, grid template columns.
352:08 - Let's say one of our three rims and label, what was it for dark?
352:25 - I'm not sure if that's right, but we'll see grid column one, two.
352:30 - All right, let's see if that does anything.
352:43 - Oh, yeah, toggle back for grid column two, three.
352:46 - Or sorry, right, grid doesn't work at all.
352:56 - So I think actually need the label to be before the toggle and then use display in line block.
353:08 - Okay, now it's sort of a line where I want it.
353:11 - And we'll maybe read that grid column stuff.
353:20 - Um, line height, I think is going to match the height of the toggle wrapper and hopefully it'll be
353:29 - more centered now. Yay.
353:32 - And then we need to get the space between dark mode and the label, 13 pixels.
353:38 - So we'll say margin, right, room, 13.
353:46 - Okay, so it's working working with the keyboard.
353:52 - Okay, that's a way longer than I think it probably should have.
353:57 - So I apologize for that.
353:59 - But now we have the two option toggle back.
354:01 - Hey, I learned something new every day.
354:02 - Field set can't be display grid or at least the legend tag doesn't seem to be working with display grid.
354:10 - Yeah, I guess it's a good lesson of like, don't over complicate things.
354:15 - You don't necessarily have to toss a grid or flex box on every single thing since
354:20 - this is working just fine, um, with, uh, the label being set like that.
354:29 - Wait, I am doing display grid.
354:33 - Oh, so I guess grid does work.
354:35 - But yeah, it's like not turn over complicate things and just controlling the alignment with,
354:40 - um, the line height property.
354:42 - Okay, so the next thing we want to do is I want to start getting the logic working so that
354:48 - if your system preferences are set to either light or dark, the website will automatically
354:53 - load either light or dark mode based on, um, the media query for prefers color scheme.
354:58 - So I think one of the links from my notes was the prefers color scheme thing from MDN.
355:05 - So this is a media query, um, it could be set to either light or dark.
355:10 - Zoom in a little bit.
355:13 - And then it's here.
355:14 - So media prefers color scheme dark.
355:16 - So I believe we can target that to set the background to be either light or dark.
355:22 - Then there's another example on pick, pick a Lily, um, which is a really great blog by
355:32 - Andy, Andy Bell, he writes a lot of stuff on CSS.
355:36 - So this is a really good explanation on the prefers color scheme thing.
355:40 - So let's just see how he did it here.
355:43 - Um, here's the CSS for the regular styles and he's also doing the visually hidden thing.
355:49 - Um, he's really good about accessibility stuff too.
355:52 - So using CSS custom properties for the different colors, which is what I did.
355:59 - This is interesting.
355:59 - He's setting a color mode variable, setting it to light by default.
356:04 - That's interesting.
356:06 - Let's see.
356:08 - Okay.
356:09 - Here we go.
356:10 - So the background is set to var background, which is a var background is set by default to a light
356:18 - color.
356:19 - Okay.
356:20 - And then if you have your preferred color scheme dark, then the color mode set to dark.
356:28 - Okay.
356:30 - And then also you're setting the background to likely different dark colors for dark mode.
356:41 - Data user color scheme.
356:42 - I'm not sure what that is.
356:44 - So if you have your OS set to dark mode, then you're setting the color mode variable to dark.
356:51 - And then this selector is, if the root is not data user color scheme, then you're setting it to
357:02 - confused.
357:04 - Um, also these are sort of doing the same thing.
357:09 - Okay.
357:10 - Let's read the explanation.
357:11 - If the user prefers dark mode inside of the media query, we're making the relevant theme changes.
357:16 - In the same media query, we're setting the color mode, which is color mode dark.
357:22 - Let's just notice how the CSS is applied.
357:24 - If the HTML root element doesn't have a data user color scheme attribute,
357:28 - this is to prevent the default overriding user preference.
357:33 - Okay.
357:33 - So I guess he's setting this data field on the HTML element.
357:38 - If there is a color scheme, your lighter dark detected, and it's saying he's setting it with
357:47 - JavaScript.
357:49 - Let's just do a search for this data user color scheme, because I'm not super familiar with it.
357:55 - Okay.
357:56 - So the user color scheme equals dark.
357:58 - Where is this set, maybe user color scheme?
358:11 - Do a search for that.
358:14 - Okay.
358:16 - And this is the JavaScript part, and he's using
358:20 - local storage to set, like to save if you have this set.
358:30 - Okay.
358:31 - So maybe we'll get back to this later.
358:33 - I think maybe right now we want to kind of just get the bare bones of displaying.
358:43 - Maybe we'll just work on just changing the background color to be either dark or light.
358:50 - So I'm sure there's a reason that he's doing this stuff.
358:54 - I think I might just use prefers color scheme and then
359:04 - set the variable for background to light.
359:09 - And I think I'm going to, I don't know if this is right, but I think I'm going to set
359:17 - default to dark.
359:19 - Let's think about this.
359:20 - How do we want to do this?
359:21 - So we got this media prefers color scheme.
359:23 - So we can maybe start setting this media query up in our colors.
359:32 - And then I set the background color, I think in boilerplate.
359:36 - Okay, so I set the body background to dark background by default, but I wonder if I actually
359:46 - want just a background variable and then in the here in the prefers color scheme, the
359:57 - background variable will be set to different values.
360:01 - Does that make sense?
360:02 - I think that makes sense.
360:03 - Or you could do the media query on every single thing here, but I feel like that
360:08 - you'd end up adding a lot of media queries for the first color scheme in different places
360:12 - as opposed to having them all in one place.
360:14 - Okay, so let's try this.
360:21 - Does that make sense to create like, I don't even know if this is right, but background
360:26 - and then set it to itself like var dark background.
360:34 - I don't know if that's going to work.
360:37 - And then in body, you're just going to say background.
360:47 - Let's see if that did anything.
360:49 - Okay, so it looks the same.
360:52 - Let's check out the body.
360:53 - All right, so the background sets a var background,
361:00 - which is it's a var dark background.
361:02 - I'm just going to change something just to see if it'll work.
361:05 - So let's do this obvious different color here.
361:09 - We'll set background to the green color.
361:13 - Yeah, it does work.
361:15 - Okay, so I guess you can sort of set variables to other variables.
361:18 - Is that I mean, it's working.
361:25 - I don't know if that's great.
361:29 - Okay, so he said body.
361:30 - So he's that body background of our background too.
361:36 - Yeah, I guess you can background set to var color dark.
361:39 - Okay, so I'm not totally off here.
361:43 - Well, since I didn't set it, I think usually people put light mode as a default.
361:47 - So maybe we'll do that.
361:49 - So to light by default.
361:54 - And then if first color schemes have to dark, we'll do
362:00 - root background dark.
362:07 - Oh, hey, changed.
362:11 - And I think in windows.
362:15 - Yeah, here we go.
362:16 - So this is windows and Mac will be a bit different.
362:19 - But in your settings color, you can choose dark lighter custom.
362:24 - So let's have our website open and then have our settings open.
362:29 - And let's see if this is working.
362:32 - If I set this to light, it should change to a light background.
362:35 - So let's see if this works.
362:38 - Oh, dang, it did work.
362:40 - Whoa, changed back to dark goes back to dark.
362:49 - Not bad.
362:50 - That's pretty cool.
362:51 - Okay, that part was sort of easy, at least getting the logic down.
362:55 - And I think my approach is right too.
362:58 - So in light of that, let's work on changing all the colors to be light,
363:06 - the light mode by default and then, you know, getting the dark mode colors set
363:13 - and then the light mode colors set.
363:15 - So started with the background and then we want to also change the text colors.
363:22 - So let's see where I set this color set on body.
363:27 - Okay.
363:29 - So what I'm going to do is I guess just make another variable.
363:33 - Let me see how Andy did it are all the variables just set.
363:42 - Yeah, so background.
363:48 - It looks like.
363:55 - It looks like background is initially set in the same place as all the other variables.
363:59 - So we're just going to have a really long list of these things here, but I guess that's okay.
364:05 - So we'll say text color.
364:10 - And by default, we want that to be in light mode, it would be the dark color.
364:16 - So what color would that be?
364:19 - Let's go back to design.
364:21 - 1d1f29.
364:23 - I wonder if you can set Figma to use HSL instead of
364:33 - hex.
364:36 - Let's see.
364:38 - Let's just Google this really quick.
364:39 - Yeah, default display of color values in HSL.
364:56 - Looks like it's not a feature right now.
364:58 - Okay, 230, 17, 14.
365:05 - That was this one, light text too.
365:07 - And then text color, if it's dark, we want to, oops, I forgot the var part.
365:31 - Dark text too.
365:32 - Okay, and then we'll switch to light.
365:43 - Ooh, oh yeah, and I need to adjust the, I can use text color for the text color.
365:57 - There we go.
365:57 - So now, then we need to set that thing up.
366:04 - This is 230, 12, 44.
366:09 - Light text 1.
366:19 - Oh, that's interesting.
366:20 - It's supposed to be 230 based on Figma, and that is what element is this?
366:36 - Header subtitle.
366:39 - Okay, so go to header subtitle.
366:43 - Oh, no, um, I need to make a new variable.
366:50 - Oh boy.
366:54 - Text color too.
367:03 - And then we'll use that for here.
367:05 - Okay, so now,
367:13 - and now let's closer to the design.
367:16 - Yay, I'll need to fix the toggle colors too for light mode.
367:21 - And then I guess we'll also have to switch the position of the toggle for that.
367:29 - Let's do the toggle last.
367:30 - Let's just get these colors set correctly.
367:32 - So the next one is the card background.
367:39 - So dark card.
367:40 - And then if we go into card,
367:54 - background is far dark card.
368:04 - And then the text will be the next thing.
368:06 - Um, okay.
368:11 - And then the text.
368:18 - Let's get that hover state.
368:23 - Let's look at the hovers exactly.
368:25 - Oh, and here you go.
368:27 - Oh, what color is that?
368:28 - Uh, 2283391.
368:36 - The dark card hover.
368:39 - I think I didn't make a light card hover.
368:43 - Um, oh yeah, dark card, dark card, cover,
368:46 - light card, light card, cover,
368:47 - hover, hover, 2283391.
368:56 - So then hover, card, hover, card, hover.
369:26 - Okay, let's see if that works.
369:35 - Nice.
369:37 - That's not too bad.
369:38 - It's like once you get things working,
369:40 - then you just kind of have to do the slightly busy work of just,
369:43 - you know, finding and adding each little item.
369:45 - Um, so maybe we can, um, pass forward through me replacing the rest of the colors here.
369:57 - Okay, so we got all the colors switched.
370:00 - And let's test it by changing back to dark mode.
370:04 - Oh, yeah, so we need to fix this stuff.
370:26 - All right, cool.
370:27 - Yeah, it looks pretty good.
370:29 - Now let's work on the toggle stuff.
370:32 - Toggle styles if you're in light mode.
370:36 - 230 1960.
370:38 - Let's see what's this used for.
370:58 - Okay, so I think this color actually needs to be
371:17 - 230 1960.
371:18 - And then
371:28 - then
371:48 - some toggle.
371:49 - Oh, we should see toggle light and toggle itself should be
372:12 - toggle white.
372:22 - And for dark, it'll be, I think it was just white.
372:28 - Yeah.
372:29 - Okay, um, light background.
372:44 - A key.
372:48 - Wait, that doesn't seem right.
372:49 - Right, I haven't nested like that.
372:59 - Okay.
373:08 - And I think it has to be bold.
373:09 - There we go.
373:19 - 700, there we go.
373:23 - Okay, now let's toggle itself.
373:25 - So if it's light, it's just the background color is just like
373:30 - the oval is that really light color.
373:35 - Let's do the background.
373:39 - 230 20 to 74.
373:48 - What was it?
373:48 - 230 20 to 74.
373:52 - That might have been the one I just deleted.
373:55 - Toggle background light.
373:56 - And then, I guess we'll just do toggled background.
374:03 - And then set it to toggle background light.
374:10 - Oh, that's why I added that double one.
374:13 - It's slightly annoying.
374:15 - Okay, and then for the dark mode,
374:18 - then we'll do that linear gradient thing.
374:48 - I don't know, but it doesn't look like it's ever written.
375:00 - I think I find a little annoying and this is because I'm not super familiar with CSS
375:30 - properties but it's hard to find the actual like value for something so for example I want to see
375:36 - what the background color of this toggle background is right now I go to computed
375:42 - it doesn't exist because it's set to a variable
375:49 - so and then you have to go okay toggle background what is toggle background light set to
375:53 - do and then looks like I did that wrong that's why it's not showing up
376:00 - so it's just like extra steps you know I'm just not as familiar I just need to get used to
376:06 - navigating the colors when they're set with CSS properties versus
376:09 - SAS variables which just kind of compile the right where CSS
376:13 - but yeah just one thing that I've kind of noticed toggle background light
376:17 - oops shoot
376:38 - okay there we go and then I'll set this thing
376:42 - okay toggle button
376:54 - toggle button and we want that to be
376:57 - be F1 F 228 46 96
377:11 - okay I'm gonna make a new one for that toggle button
377:18 - then light 228 46 96
377:29 - and then set another new variable for toggle button okay toggle button light
377:40 - and then for dark it'll be
377:43 - here we go
377:47 - toggle button toggle button and then for dark toggle button will be set to this
378:02 - this
378:15 - okay nice
378:22 - cool all right so I think the next thing we wanted to do was
378:26 - get the toggle working yeah okay so for the toggle logic what I want is to
378:39 - I guess there's a couple things one is we want the switch to actually control you know what mode you're using
378:44 - two I need to if the user color preferences are set and we're loading the thing we also need the toggle
378:56 - to be set so like right now I have my OS set to light mode and it's low to the light mode but the
379:03 - toggle is still set to dark mode because that's sort of the default thing so I need to sort of auto
379:07 - select on the toggle what the preferences are if they're set so maybe first we will work on
379:15 - maybe having clicking the toggle I need to adjust it's not quite detecting the light mode thing oh
379:25 - yeah because here we go radio buttons need to be set to this size 18 by 18 it's 20 by 24
379:40 - hmm how tall is the thing itself 24 I think I actually want to be 24 by 24
379:52 - oh yeah that's much better okay toggle input type radio with this 1.5 rems
380:08 - okay now it's detecting the clicks better okay good so let's work on if I set the toggle to dark
380:30 - mode on to the left it'll have dark mode and then switch to light mode so let's figure out how to
380:36 - do that so I think what I want to do is I need to figure out how controlling the toggle will set
380:43 - the color scheme because right now all I did was change the color variables based on media prefers
380:50 - color scheme and let's see how people do that so I think what Andy did was he set an attribute on
381:03 - the HTML element with the data user color scheme thing
381:33 - okay so let's think about this um so right now let's say is it to light mode if I want to switch
381:44 - to dark mode I'd click the switch and then what I would want is clicking that switch would I guess
381:53 - add a class or something to the HTML and then based on that class it would switch the variables
382:01 - and then in the CSS I would have to I wonder if I could just add another thing here where
382:09 - media prefers color scheme dark and if the thing is detected if the data attribute or the class is
382:16 - selected I'm just trying to see how Andy did it here seems a little bit complicated
382:23 - in these styles the media prefers color scheme all it does is sets the color mode variable
382:28 - to dark um and then I think there's maybe a link between this variable and then if the
382:37 - data user color scheme is set to dark because it's not setting color mode here so there's some link
382:45 - I'm guessing in the JavaScript that if it detects you've set your OS to dark it'll set the color
382:51 - mode variable to dark and then it will set the data user color scheme attribute to dark
383:03 - okay so OS setting to the color color mode variable to set the data user color scheme let me see if
383:12 - I can find where he did that in the JavaScript okay add a function to extract the color mode value
383:22 - I'm not familiar with this let's look that up
383:30 - window get computed style without using I guess using a function get computed style
383:36 - yeah it's a method of the window object so getting a style of getting the computed value of all
383:46 - CSS properties with get computed style okay so it's just getting the CSS properties
383:58 - so he's getting the CSS properties of document element and he's getting the value of the prop
384:06 - key property right this is a condensed version of the function used in this tutorial which I guess
384:13 - we need to read get a CSS custom property value with JavaScript and that is used to get the value of
384:22 - color mode get computed style okay so this example is using support scroll snap variable
384:35 - support scroll snap and then the JavaScript is saying getting the component so he's getting the
384:42 - CSS custom property wait was this this an actual thing I can't I can't tell if this is an actual
384:58 - function or if it was created
385:00 - it's like it's the same okay he's basically doing the same thing
385:12 - um okay it's just linking to this article
385:19 - I can't figure out if get computed style get computed styles an actual function that exists
385:24 - gets you this custom prop function oh here you go oh boy so you're creating a function to get
385:33 - the CSS custom property okay that's fine just seems like a lot of extra stuff I'm curious if
385:43 - thing I want to see how other people implement a dark light mode thing I mean I know this is
385:49 - I'm sure this is like the right way of doing it it just seems like a lot dark mode toggle
385:57 - and CSS tricks let's see if CSS tricks has anything the complete guide to the dark mode toggle
386:02 - okay we'll read read a couple of these things
386:11 - toggling themes
386:12 - okay there's several approaches to do this using a body class separate style sheets custom properties
386:19 - server side scripts okay if you just want to override their system preference for a site
386:26 - looks like he's overriding it with the CSS class so if you select a light theme
386:34 - it will add the light theme class to the body it seems cool I mean it seems like a lot of
386:40 - extra stuff because you're setting the light theme in two places but I guess that makes sense
386:49 - I mean it seems pretty easy you're setting your you're using this button to switch it based on the
386:56 - class this is interesting saying you might have a flash of I guess a flash of color if
387:06 - let's say you your OS is set to a light mode but you manually set the page to load in dark mode
387:15 - and you save that with local storage so the idea is when you reload the page you go back to the
387:19 - website it will detect it'll read your local storage and then change to dark but if lights
387:25 - are default when you hit reload it'll have a light mode initially loaded and then when the
387:30 - JavaScript runs to read the local storage and see that you want dark mode then it'll switch
387:35 - to dark mode but it'll be flashed quickly from light to dark so I'm wondering how Andy
387:43 - got around that let's go to the code pen
387:50 - it's right now
387:50 - um
388:01 - interesting so I set it to dark
388:05 - okay so I said it's a dark let's enable light mode so let's reload and see
388:13 - oh yeah see there's that flash
388:15 - um wait I said it's a dark
388:31 - it's interesting it doesn't seem to be detecting if I'm in light mode
388:33 - so I want light mode so if we reload it should load light mode
388:48 - yeah it's the dark you made a dark default so that's why it's flashing yeah so I guess there's
388:55 - no great way around that um unless you're doing server side so that it'll set it
389:02 - you know before everything's get loaded so it's interesting and whenever there's a
389:07 - way around the that flash thing use your agent styles color scheme meta tag
389:22 - okay so this is light mode even though I've set to dark
389:25 - so I said it's a dark now let's reload
389:43 - hmm
389:44 - yeah there's a flash here too see
389:59 - huh interesting yeah so anytime you use JavaScript it'll have that flash if it's
390:06 - different maybe there's just not a great way to do it
390:10 - so let's think about this um so maybe we'll worry about the flash not at all or another time
390:19 - because this is maybe a bit of an edge case but let's at least figure out how we want the toggle
390:25 - logic to work so Andy Bell did it by adding um a attribute on the html body on the html element
390:35 - you can also do by adding a class on like the body so what I want to do is is there a way to do
390:42 - it so that I can use the same logic for this I can use the same set of rules for the color scheme
390:52 - and also if the attribute or the body class is set and I don't know if I can because this is
390:59 - technically a media query let's see if that's possible let's see if you can do CSS selector
391:07 - media query or has class I don't think it's possible
391:13 - um let's think about this I just don't want to duplicate these rules I don't know if there's a way
391:21 - around that so maybe we'll let's figure out if how we want to set the color with the toggle
391:30 - so if we set it to dark maybe we want to add the class if we set it to light then it'll add the
391:37 - light class to the body so let's see if this works I'm going to create another selector where
391:45 - if the body has class dark can you do that and I guess we'll do another one for light
391:59 - so body has class light root will be and if we end up having extraneous code we can just
392:23 - remove it later but for now let's test this out so let's go back to our site
392:33 - so now it's dark mode because my OS is set to dark let's add
392:39 - oh let's just add class light to the body element oops
392:57 - okay and it's not working
393:02 - and why it's not showing up
393:05 - I wonder if this doesn't work let's just try something color
393:14 - I just want to see if the selector will show up
393:18 - okay so it's showing up but I think I just couldn't set the variables under the body selector
393:38 - so let's wait to see how they did it
393:40 - this is a little start up being kind of easy but then the toggle part seems to be a little bit more difficult
393:53 - okay root level
393:59 - oh okay so it's just in the selector you set the variables to whatever so I don't need this
394:04 - this okay now let's see if it works
394:12 - add attribute class light oh look at that all right now we're going
394:21 - one yeah I think there's no other way of doing it
394:30 - so there's just going to be a bit of duplicate code here
394:47 - okay hey not bad so now we want the toggle to add or remove the class
395:00 - so script can delete this so what we want to do is let's close the others and I want to open my index.html file
395:18 - okay so the toggle
395:21 - if it's select dark we want it to add the dark class but select slightly want to add the light class
395:34 - I'm going to see how Andy did it I'm just sort of using his code as an example
395:44 - oh he's doing a button which is a little bit different let's just close this stuff out
395:49 - so what I'm looking for actually is
395:55 - the JavaScript for the event when you click the radio button
395:59 - all right he's using a button too so let's look JavaScript radio button select event
396:15 - okay so it works to find the selected radio button finally checks property oh okay
396:32 - okay so I guess we can see check if dark is selected is checked or light is checked
396:53 - if RB is checked
396:54 - right plus test this
397:04 - so document get element by ID dark and checked
397:12 - is light checked
397:22 - oh it's true now
397:38 - what
397:48 - what
398:02 - okay so it does work
398:10 - it's going to be const dark and we want to do this
398:25 - if I just do document element by ID if dark is checked then
398:30 - then
398:36 - of course left your body class list equals dark else
398:48 - class list equals light and we want to run this whenever the toggles clicked
399:08 - so this is setting the click event on the button
399:11 - and where's the button element wait where is it button
399:32 - radio button click
399:33 - click so I think I can do a click event on whatever I can do it on like the header toggle input element
399:51 - let's see um so what is it maybe toggle input type radio really I could I think I could add that on
399:58 - so
400:07 - input
400:10 - I guess I just do toggle wrapper input
400:14 - but caught um radio buttons
400:23 - and then for each whoops
400:43 - uh I don't know JavaScript that well um JavaScript ES6 radio buttons click
400:54 - um I think I was thinking of dotnet um
401:24 - so
401:39 - I'm going to find the click event, there you go, event arrow.
402:04 - Let's just do console log, click, right now I'm just trying to test that click one of
402:28 - the radio buttons will run the console.
402:38 - Script line two, assignment time to query variable I.
402:47 - Okay, click.
402:51 - Okay, looks like it's working.
402:54 - So click event is working.
402:56 - Now let us think move this logic in here.
403:09 - So hopefully we click this, we'll see the class getting added to the body element and
403:14 - it should switch.
403:16 - Yay, yes, yes, okay, well I guess that was, I don't know if it was easy.
403:26 - But it's working now, dang, pretty cool.
403:32 - Okay, so we have the toggle working, what we wanted to do now is save your settings.
403:38 - And I guess people seem to be using a local storage for that.
403:40 - So if we manually change the mode and maybe we should add some logic for like if, I don't
403:49 - know if we have to, but I wonder if we have to add logic for if the checking if the local
403:54 - storage matches the prefers color scheme thing, but maybe we don't have to do that.
404:00 - So we'll start with checking, we'll start with saving the mode with a darker light to
404:06 - local storage.
404:08 - Then when we reload the page, we want to check local storage and see if it's darker light.
404:14 - And then I guess add the corresponding class to the body, because if we just load, the
404:20 - body doesn't have anything.
404:21 - Okay, so let's do that.
404:23 - So saving to local storage, let's go back to the handy dandy, handy bells thing, local
404:31 - storage, see, okay, window local storage, okay, local storage dot set item.
404:43 - And then this is the key my cat value is Tom, and then get so it's very similar to a cookie
404:49 - where you can set a value and then get the value.
404:53 - So local storage set item.
404:57 - So I guess in JavaScript, I guess I want to add the logic for if it's checked.
405:06 - So I think I need to make this a full if statement, I feel like people like don't want
405:23 - to use if statements nowadays and I don't quite know why, but I guess we can look that
405:27 - up later, just something I've seen, like I think what they've simplified made a video
405:31 - about that.
405:33 - But we'll just start for now, and then we'll, you know, if we feel like it, we'll check
405:37 - it out later.
405:38 - So if it is dark, we want to set local storage, set item, and I guess we'll just say color
405:46 - mode, and we'll set it to dark, otherwise, we'll set it to light.
405:55 - And I guess maybe we'll also test it so that when we first load the site, we want to load
406:09 - the local storage, get item, color mode, okay, let's see how that looks.
406:21 - So let's set it to light, and now let's reload, and I set the light, and we set the dark,
406:33 - I set the dark.
406:35 - So now here's a test, I set it to light, or actually I guess we can't test it now because
406:41 - we want to get, oh, that's not good, we need to fix that too.
406:48 - Okay, so we want to get the color mode, and then if the color mode is dark, we'll add
406:55 - the dark class.
406:56 - If the color mode is light, we'll load the light class.
406:59 - So what if we need to make some more functions out of this?
407:08 - I think I'm not doing this right.
407:12 - Let's see, there we go, yay, oh boy, yeah, I'm not huge, I'm not super experienced in
407:35 - JavaScript.
407:36 - Just double check that arrow function, two constants, I think I've seen it where you
407:55 - set the variable, or you set the function to like a const or something, or a let.
408:03 - Okay, okay, it looks like that's what I was doing, all right, so I'm getting the color
408:09 - mode, and then should I create another function for like set dark mode, and another one for
408:27 - set light mode, so then set dark mode, we will add dark to the body class, light mode,
408:47 - and then we'll do this, add the light to the body class.
408:55 - And then we'll just use these function names.
409:00 - So then we're not duplicating code, say we'll say set color mode, and then if color mode
409:15 - equals dark, then set dark mode, else set light mode, and then we'll run color mode.
409:45 - Okay, so let's just, I'm going to add some console log messages just to make sure everything's
410:04 - running, set color mode, and then I guess we also want to get the,
410:15 - okay, local storage thing, okay, color mode is set to light.
410:40 - And it looks like it is saving the toggle thing, I don't know if I, I don't think I
411:00 - read logic for that, maybe it's just saving, it's interesting, oh yeah, I think I was just
411:10 - saving the radio button position, like if I hit reload when I'm already there, would
411:14 - I do like a hard reload?
411:17 - Yeah, but it seems to be working, I reloaded start mode, then select light mode, and then
411:26 - reload, it's set to light, so I see to add some logic to sort of auto select the thing,
411:34 - so local storage, we'll add another one, if local storage color mode is dark, else,
411:57 - and then what was that, oh yeah, so if I'm checking local storage, I want to set the
412:04 - radio button to, I want to auto set either dark or light on the radio buttons, what if
412:14 - I can do this, will this work, or do I have to click it, and a bit listener, click, oh
412:37 - no, or do I just do click, okay, I guess I'd just click, maybe I'll set a constant for
412:48 - the dark and the light buttons, so then I can just refer to those when I need them, so
413:11 - then we'll replace the air, so if dark button is checked, then select dark, and then now
413:21 - I will do, if color mode is set to dark from the local storage, I will say dark button,
413:29 - click, otherwise I will say light button, click, all right, see if this works, so I'm
413:45 - set to light mode, so I want to do a hard refresh, and hopefully it will select the
413:50 - light setting, okay, cool, now let's test this by maybe removing the, where do I remove
414:10 - the local storage, storage, here we go, kind of clear, delete all, there we go, now we'll
414:25 - do a hard refresh, hmm, and I want it dark to be default, and it looks like, let's see
414:39 - here, no local storage is set, set color mode nothing, it's null, so let me see here, so
414:48 - why is it loading the light, I'm curious about that, I don't know if I just open a new browser
414:57 - window, okay, so color mode is null, and let's check the body class, no interesting, body
415:08 - class is set to light, why is that happening, we'll add some more console log messages here,
415:23 - ready button clicked, so let's save that, and now if we do a hard refresh, set light
415:47 - mode is running, now why is set light mode running, set color mode ran, and then local
415:57 - storage is blank, so it returned the null, and then set light mode ran, oh it's because
416:04 - of this, hmm, because it's not dark, so it was null, which means since it's not dark
416:18 - it's running light mode, so now, yeah if we do a hard refresh, it's null and then it's
416:24 - loading dark mode, so it's working, yeah cool, let's also test it by empty local storage,
416:49 - really all, I think set to dark, it's loading dark if it's set to light, loads light, okay,
417:03 - oh this is not working either, so this is just based on the prefers color scheme, so
417:12 - I want to do is I need to check the prefers color scheme, and then set the toggle, so
417:19 - how do I do that, set the toggle position based on the color scheme that you've set, hmm,
417:29 - how do I check the prefers color scheme with JavaScript, let's add some of these things,
417:40 - JavaScript check prefers color scheme, so it's the window get computed style, which
417:53 - I think Andy was using, hmm, wait where's the code, oh what's interesting, window match
418:15 - media, hmm, that's interesting window match media, let's test it, let's change to dark
418:39 - mode, oh, hmm, that was weird, why didn't it change from light to dark, weird, weird,
419:09 - okay, so we can just use this logic dot matches, so what I want to do is if the, let's go back
419:24 - to our site, so by default it's in this position, so if I wanted to, I want to detect if it's
419:30 - in the light mode, const, hmm, get color mode
419:43 - now, or else do light, because we got dark to be default,
420:07 - and then, hmm, I think actually all I have to do is check for light, because it's dark
420:27 - by default, I'm not sure why I was doing this return stuff, so I think I just need the one
420:35 - condition, check is light, so if it is then, I want to select document or light button
420:51 - click, I think that's all I need to do, and then I want to run this, okay, so what I want
421:07 - to do is if I select light mode, it should go to light mode and then the radio button
421:17 - should switch to light, ah, oh, because I need, I think I need to reload the page in order
421:27 - for that to work, yeah, so now it's working, but you want to run the thing when you change,
421:38 - so I don't even know if it's possible to detect the change, that's kind of annoying, so how
421:44 - can you detect, can you detect the change of your color mode, like through JavaScript,
421:50 - there's a lot of levels of complexity to this, can you detect the prefers color scheme change,
422:07 - how often would that actually, oh, Fabio, I was wondering how often would it actually,
422:15 - would you actually need this, so if we delete this, do a hard refresh, I think I did set
422:23 - light as a default, right, did I do that, I can't even remember anymore, okay, yeah,
422:34 - so default is light mode, because this should switch it to dark and toggle is not changing,
422:53 - hmm, so I did this window match, media matches, yeah, what if these are change mode while
423:02 - using the website, can you check the mode change using an event listener, ooh, to add
423:08 - an event listener, oh my gosh, thank you, Fabio, I think what I want to do is rename
423:24 - this to, or hold on, let's, let's make a new function maybe, for what is this, check mode
423:45 - change for lack of a better word, okay, so we just want to save that there, so I think
423:52 - I need to change this check mode, and then make this check for dark,
424:17 - and run this function, I wonder why it has to be dark, let's add a little console log
424:38 - here, oops, all right, oh, I forgot to change the check mode,
425:04 - okay, so it's null, so it's light, now let's change the dark, ooh, some stuff ran, cool,
425:34 - check mode changed, click the radio button and set dark mode, hey, now we set to dark
425:49 - mode, now let's load, oh my freaking, so I think local stores needs to trump whatever
425:59 - your preferred color scheme is, because I'm in light mode, but I made it look like a dark
426:04 - mode, I want that to save, it was quite, yeah, a little more complicated than I was thinking,
426:13 - so right now, let me think about this, so I think I only want to run these things if
426:22 - local storage is not set,
426:31 - okay, now let's change to, so I set it to dark mode, okay, let's just start from the
426:57 - beginning, storage, delete all this stuff, do a hard refresh, okay, so by default we're in light
427:07 - mode, which makes sense, now if we switch this to dark mode, okay good, switch to dark mode,
427:16 - it switched the radio button selector, change back to light mode, oh lord, I think I need to also
427:32 - change the local storage if the thing gets changed, this is hard, so there's like,
427:40 - there's three things controlling this, it's local storage, your preferred color scheme,
427:44 - and then if you manually click the radio button, so I need to add, I think, is if the
427:53 - color scheme changes, I actually do want to, if it changes, no, hold on, if it changes,
428:02 - local storage is not set, but the radio button, I think it stayed dark because the radio button
428:08 - was set to dark, okay, let's start over, okay, nothing's been set, no local storage has been set,
428:16 - this is the light by default, because I have my scheme set to light, so if I change to dark,
428:26 - goes to dark mode, the toggle goes to dark, and the local storage has been changed to dark,
428:32 - okay, so if I reload, everything stays at dark, everything stays at dark, but now if I change a
428:43 - color scheme to light, nothing happens, and this is because local storage is still set to dark,
428:54 - so I guess the question is, maybe I'm overthinking this because sure, I changed to light, but I can
429:06 - just change to light with the radio button if I want to, so does that seem like it's desired
429:13 - behavior, let's start over again, so light mode, light mode, let's say, oh, I'm in light mode on my
429:19 - OS, but I want to load dark mode manually, so I said it's a dark, so now if I refresh,
429:31 - it's in dark mode, that seems like desired behavior, so let's delete this, now back in light mode,
429:39 - so let's say, oh, I'm going to switch my thing to dark mode, I want everything to be dark,
429:43 - and it did do that, but if I switch to light mode, it stays in dark mode, but I feel like people aren't
429:58 - going to be switching their OS all that often, so I feel like, I think maybe that's okay, I think
430:06 - this is an edge case that I'm thinking where you're like switching your color mode multiple times,
430:10 - I feel like this is operating the way I want it to, yeah, switch to light mode, high reload,
430:19 - it stays light, I think this is actually okay, so I think this works, let's just quickly check
430:30 - about the if statements, don't use if statements, use object literals, and this might be a little
430:46 - beyond my current JavaScript skills, but let's check it out, all right, so there's a lot of if
430:55 - else if things do, do, do, do, do, do, do, use a switch statement, which is sort of the same thing,
431:04 - here's the alternative, so you're setting create an object,
431:18 - hmm, I don't know, I'm not sure how this will work with this, hmm, well, I think I'm going to keep
431:31 - this as is, you're welcome to check out my code on my github repo, and if you want to refactor this
431:38 - to a better way of checking for the conditionals, you know, you're definitely welcome to do that,
431:43 - but I mean, it works, I think the code is reasonably understandable in terms of checking the different,
431:50 - you know, modes and setting local storage and stuff like that, so I feel like we can sort of
431:57 - consider this project complete, yeah, so yeah, thanks for following along with this, if you
432:09 - follow it all the way to the end, thank you for doing that, I hope this has been helpful for you,
432:14 - feel free to leave a comment down below if you, you know, did make it all the way through,
432:18 - I'd just be interested to see how many people did that, and yeah, if you have any questions,
432:22 - you can again leave a comment, so thanks for watching, and yeah, we'll see you in the next video!

Cleaned transcript:

Practice your web development skills by building a social media dashboard with a dark light theme. Jess, who runs the popular Coder Coder YouTube channel, will guide you through a beginner frontend mentor challenge. You'll improve your skills in JavaScript, HTML, and CSS. Jess demonstrates her practical approach to planning a website project and her resourceful methods for researching solutions. So it's time to dive in and unleash your coding potential as you build this dynamic social media dashboard. Hey everyone, in this video course for free code camp, I'll be building a social media dashboard from a design by frontend mentor. I'll be coding this from scratch using HTML, SCSS, and a little JavaScript, and we'll be using CSS custom properties to add a dark light toggle to the dashboard. Throughout this course, I'll be showing you exactly what I do in realworld projects, which includes a lot of research and troubleshooting. No developer knows every single thing off the top of their head. We all have to look stuff up and use trial and error. I'll be sharing my own techniques for doing this so that you can walk away with some research and problemsolving skills that you can use in your own projects. If you like this video and you want more, I am currently working on a course called Response and Design for Beginners, where I build a custom website from a Figma design using HTML, SCSS, and JavaScript. You can find out more about the upcoming course linked down in the description. All right, let's get into it. All right, so when I'm starting a project before I do anything, before I jump right into the code and start typing away, I try to take a look at the project and kind of figure out what requirements are going to be part of this and what things I would have to build. Let's pretend that this project that I'm building or that you're building, this frontend mentor challenge, is something from work. And what's really cool about frontend mentor is that they're actually giving you almost like a realworld experience in terms of getting a design from a designer and then having to build that out because that's basically what I've done as a web developer at my job or my former job rather. So let's look at the frontend mentor challenge. So we're doing the social media dashboard with Theme Switcher and if we click into here, we can see, you know, the desktop design. It has a series of cards and it's showing data from a different social media platforms. And then on the bottom part, there is some more cards showing, you know, different engagement metrics. And then, of course, at the top right, we have this toggle for dark mode and light mode. And we can see here that there is both a light and dark mode version of this website. So what I like to do usually is write down what the functional requirements of this product are going to be. This is really very similar to what I would do in the real world. So I'm just going to create a new file here, call it notes.md. This is going to be functional requirements and notes. And, you know, obviously this is just a casual like notetaking thing. Let's kind of zoom in a little bit more here. Okay, functional requirements and notes. So the dashboard has a light and dark mode toggle. So we're going to have to do a little bit of research in terms of, you know, what is the correct markup to use in HTML? So what HTML markup to use as well as how to switch between light and dark mode. And I believe we're using CSS variables. So that might be another item that we're going to list out here. So CSS variables or variables or custom properties, which is, I think, their formal name. But it seems like a lot of people are just saying CSS variables like myself. The light dark mode is kind of the reason that I chose this challenge. It's something that I'm not super familiar with myself. So I thought it might be beneficial to just show you the seedy underbelly of building websites and all the research and googling that is involved as well as trial and error. So just trying to keep things, you know, honest and open around here. So here's the brief challenges about this landing page as close to the design is possible, which is definitely important. The only JavaScript required is for the color theme toggle. Users should be able to view the optimal layout, depending on their device's screen size. So, you know, desktop versus mobile versus tablet, and then hover states and then toggle the color theme to their preference. So that's pretty straightforward. One thing I did was I actually tweeted about building this project, thinking about doing this dark light mode, switch your challenge in front of mentor. So I said I haven't built one before. So there's probably gonna be some live googling or duck dot goings since I use duck dot go. So let's see, I got some pretty good replies and with good suggestions from people for things that I need to keep in mind when I'm building this out. So that's Matt, he makes front I mentor. So this person's saying CSS custom properties are the simplest native way to do it that I know of, declare the theme properties at the root, which is what I've heard too, and then apply a class to the body or use a prefers color scheme media query to override them. Okay, so prefers color scheme media query. That's something that we're going to prefers color scheme media query. So we're gonna have to look that up. And then okay, so everything else I kind of know, use the root thing. Okay, so let's see. And then I got this other tweet from grace snow. She's actually a really active member of front and mentor. She's very experienced. So one of the challenges I see most commonly is using poor HTML semantics, not just for the toggle. I actually think that HTML is the way very challenging the theme. So I was asking like for the dashboard. So she was saying where the headings should be, should user names be labeled a screen reader only text will the increase decrease of followers be communicated to assistive text. Okay, so let's look back at the design real quick. So where the headings should be, I'm guessing that is for, you know, making sure you're using the correct H tags whenever possible. So I'm guessing here social media dash, where would be the H one. And then I'm guessing the overview today would be an H two. And then each card would probably need an H three tag. So, you know, page views, likes, etc. And the other interesting thing she said was should user names be labeled with screen reader only text. This is an accessibility thing. So if say you are visually impaired, you might be using a screen reader to navigate the internet. And that means that you need websites that you build to be able to be navigable by screen readers. So they'll actually read out loud to you what the content is on the website. So if we look at the design, for example, on the first card here, it says, you know, Facebook, and then Facebook username, Twitter with a Twitter handle, etc, for the different platforms. And if you're visual, you can see the Facebook icon or the Twitter icon, and you know what platform this card belongs to. But if you have a screen reader, it's not going to say that. So what I'm assuming Grace is saying here is that we can add some text that's only going to be, I guess, readable by the screen reader, but it's not going to visually appear on the page to say, for example, Facebook, Nathan F, or Twitter, Nathan F, things like that, just to make things more accessible, you know, for screen readers, and do the same thing with the bottom cars, like, you know, page views on Facebook, or likes on Facebook, likes on Instagram. So things like that are, unfortunately, oftentimes the last thing or even just forgotten. And I'm as guilty of this as a lot of other people are, and accessibility is something that I'm trying to get better at. So we'll try to keep these things in mind. And let's make some notes on that as well. So accessibility, accessibility. Is that right? Excess. No, I think there is two S's. You like when you look at a word and you, like, look at it for song that it starts to look weird. That may or may not be spelled correctly. Okay, so accessibility, make sure headings use correct heading tags, and then screen reader only text for, you know, card titles, username. So just things to keep in mind there. And then another thing we actually might need to research is the toggle itself for accessibility as well. So dark, light mode toggle. I guess, yeah, what HTML markup accessible. We'll go into that a little bit later. So let's go back to the tweet. Let's see. These are variables, someone else says. And then at the bottom, this is from Killian of all cough, he makes the polypane browser, which we're actually going to be using later in this video. So he's saying extra credit if you had a 30 system default option. So a third option to the toggle. So let's check out his blog post here. Okay, your dark mode toggle is broken. So let's see what he's saying here. So do you need a toggle? Do you really need a toggle to support dark mode? Not really. You can support dark mode by using the prefers color scheme option, which that other person mentioned earlier. So that that's another note to myself that this prefers color scheme is probably something that is accepted or best practice. And we'll be researching that later. So he's you and built into browsers, it gives you one of three values, light, dark, and no preference. Okay, so here's the issue. The issue or the problem here is that most hoggles have two states, you either have light mode or dark mode, and then choices forever stored in a cookie or local storage, which could break your dark mode. If if I'm guessing you've set in your browser or your OS, you prefer either light or dark. So this is saying that the toggle actually needs to have three states, light, dark, and system preference, which is what the user sets on their own computer. And then there's this prefers color scheme media query. So this is mentioned again. Okay, so what I'm getting from this is that the toggle actually, so switching between light dark modes via JavaScript, and then three option toggle, light, dark, and then system preference. And that goes into the prefers color scheme media query. So this looks pretty good so far. So you know, we're just making a list here of all the things that we're going to be doing research on in a little bit. Okay, so I think, and then this is an example of stack overflow, giving you these three options. All right, awesome. So I believe that was all for the tweet. So now we have the items that we need to research. We're just gonna kind of go down the list. So the first one is the light dark mode toggle. So what I need to figure out is what HTML markup do I need to use, and how to make sure it's accessible. So if we go back here, so Grace Snow actually did a challenge on front of mentor, which I did find in my pre research research. And it's linked here. So an accessible toggle in HTML CS and JS. And this is for a this other challenge, which is a pricing component with toggle. So you can see that here. And she made some notes here using an accessible component from this person, Scott O'Hara styled form controls. So let's check that out. Okay, accessibility of style of form controls. So I know a little bit about this. Basically, you know, your form controls are like the checkbox, the radio buttons, form buttons, form text boxes, things like that. And what people sometimes do when they're styling them to make them look prettier is to instead of using the actual radio button or something, they'll just build one using a div and CSS. And that's not navigable by screen readers. And it's a bit confusing because you're not using, you know, the traditional HTML form elements for that. So what I'm guessing this website is telling you is, and let's load the actual website here. Okay, so this is the website, zoom in a bit. The accessibility of style of form controls. So what I'm guessing is, is that this person, Scott O'Hara has created, you know, HTML and CSS markup that you can use if you want to have these accessible form elements, just as a starting point. So what we want is to figure out the markup for the toggle. Okay, switch checkbox toggle button. Let's see what this is. Okay, so this does look like a toggle. However, keep in mind, we do need to use, I think we need to use a radio button list, because this button, I believe only has the on and off settings. So I think we need this one switch radio button group pattern to create a two option radio button group. Okay, so there you go. This is the toggle. It's working. And there's some notes here. Do, do, do, do. Okay, so here is some example code, which is pretty awesome. So we can see here there's a field set, which sort of encapsulates the different controls. And then there is yes. So for each option, there is a radio, radio button input type. So this is probably what we're going to be using. Now if you remember from a Killian's blog post, we actually need three, a three option radio button toggle. So this example just has two. And I need to figure out, is there a three option toggles that even possible? So when I am looking for some examples of UI elements, a lot of time, I'll just go to code pen. So code pen. And we're going to look for toggle, maybe three, and then just hope something pops up. So let's see what happens here. Okay, so no, no. Oh, here we go. CSS multi position radio switch. Okay, perfect. So what I'm really looking at here is an example for, you know, what I can build that I can use as a reference. Okay, so there's two positions, three and even four. That's pretty funny. Cool. So we're using, we'll probably do something like this. So my guess is I would make the middle position, the system default, and then maybe light on the left and dark on the right. And we'll have the default be the default. And let's just check out their markup really quick too. Looks like they too are using a radio button input, which is good. So that's another sign that, you know, this is kind of the way to go in addition to obviously seeing it here. And I believe, and then also with Grace's challenge here. So this is just good to know, you know, we might need to come back to this to see how they style the three positions, because you know, has this nice sort of animated thing. So, you know, we can kind of go back to this when we need to. So I'm going to take that link. So here we go, light dark on toggle, and for option toggle, we're just going to add a link here. And then the HTML markup, we'll add a copy this thing here, just so we can, you know, go back and make sure we're following what that's saying. So now we have the radio button toggle markup research complete. I think I have enough references that I can work from this later on when we're actually building. So let's move on to look at using JavaScript to update CSS variables. So I used DuckDuckGo update CSS variables with JavaScript. And let's see what happens. A lot of times I will just click on the first result here, but I also try to kind of filter the results based on if I know a website is considered, you know, a good source of information. And I haven't heard of design size.com. I'm sure there's reasons it's coming up first. But I look at CSS tricks a lot. So let's check that out. Okay, updating a CSS variable with JavaScript. So she says variable up here. So you set the variable, it's mouse dash X, and then mouse dash Y. Okay, so here's some code examples how to update it from the JavaScript. So we're going to say let root equals document document element. And then to that document document element, here you go. So root dot style dot set property. So this is probably what we would use to update the CSS variable. So this is good to know. I guess switching between like light and dark modes via JavaScript. So maybe for under CSS variables, we'll add a list link here. Let's just add some spaces between these to get look a little bit better. So that's probably right now just for, you know, just for kicks and whatever. Let's see what this first result tells us and we can compare what this result is telling us with what the CSS tricks link was telling us and just see if they match up, you know, it's not a sign that this is probably the best approach. Okay, so style set property. Okay, so this is again saying you want to set it on the root pseudo class, which is what everything else we've read is saying. So that's a good thing. Okay, so this looks pretty familiar document document element style set property, which is, you know, they created this root let variable. I guess just let's not variable anymore. So root style set property. And they're saying the same thing here. So that tells me that this, this is a good approach to use. So the other thing I think I need to research is, you know, doing some research on light and dark modes, just because I want to see how we need to sort of format the colors. So let's say light dark mode CSS variable. See what comes up. Okay, so create like, like, create a dark light mode switch with CSS variables. dev.to is I think pretty good. Obviously your mileage may vary depending on the actual author. So let's see what this person is saying. Okay, so adding custom properties. Okay, so this is root primary color, you know, setting it to different things. And then data themed dark. I have not heard of that. And I believe that people had mentioned this prefers color scheme media query. So maybe I'll copy this and do light dark mode prefers color scheme. Maybe delete the mode. So light dark prefers color scheme. See if you can find some examples here. Okay, so developer.mozilla.org. That's usually a pretty good source of info. Perfers color scheme CSS media feature is used to detect if the user has requested a light or dark color theme. And this is similar to what I'm killing his blog post was saying. So let's see. Okay, so they've been a code example here. Okay, here's what we're looking for. So in the CSS, there's a at media rule. And it's saying prefers color scheme dark. And it has a set of colors using the dark scheme class. And it's setting them background to dark gray and color to white. Okay, and then there's another at media prefers color scheme light. And then that's using the light scheme class background white color. It's like a medium gray. Okay, I'm actually curious to see one thing that I'm killing to mention is that you can set this in your OS or your browser. Interesting. Okay, so the no preference. You mentioned no preference, I think, but it's not really, it's only supported in Safari. Not really supported anything else. Oh, simulate prefers color scheme in Firefox, which is what I'm using. Okay, so I guess what I'm curious about is like, I haven't really set the color scheme thing here, but I believe I can set it in Windows. And display. Let's make this one a bit bigger and believe it was under color. Oh, dark mode. Here we go. So under colors, choose your color dark. So if I change it to light, what happens? Oh, everything turns light. Interesting. I'm actually curious to see if that affected any of these web pages that I was looking at. Okay, so here we go here. Let's change back to dark and see if this changes at all. Oh my gosh, it did. So the day and the night changed. That's pretty cool. Changing the color light versus dark will sort of use this prefers color scheme value. So what I think I want to do is going back to the challenge. So right now I have my operating system set to dark mode. If I just load this website, I want it to use a prefers color scheme media query and detect that I have dark, which is kind of what they're saying here. So prefers color scheme dark like that. And then if I said it's a light, then it would switch to that without having to actually do the toggle. But my guess is then the toggle works because let's say I have my things set to dark. But if I want to load this website in the light mode, if I change it to light, then it can change the light, even if my OS mode is set to dark mode. So that's what I'm guessing is a good UX. So you know, if I'm wrong about this, feel free to flame me in the comments. So let's write a little note on that and how that all works. So light dark mode toggle. Take system preference by default. But can override with toggle. So this is just kind of a note to myself. Okay, so then the switching between light dark modes via JS, I need to add the link that I did for that. So we'll just copy this. Did I not do that before? Oh, yeah, I did. Oh, I did just the updating this, yes, variable, but I didn't add the link for this thing prefers color scheme and how that all works. Maybe I'll move this up here too. So switching between light dark modes via JS and prefers color scheme media query. Okay, cool. So I think that's pretty good for the dark and light mode toggle stuff. So the correct heading tags, I think I know enough to just add the correct headings. And the screen reader only text for cards and titles and user names. So let's look up that screen reader only text. Okay, so accessible 360.com, that sounds, that sounds pretty good. Okay, screen reader only text is great for providing more context to a link whose purpose may be obvious visually due to a location but could be confusing without visual cues. So this person is adding some additional text to the add to cart button saying, you know, info about the product. And it's adding a class screen reader only. That's interesting. Okay, screen reader only position absolute. Interesting. Another thing I tend to do when I'm looking up stuff is so I don't know a lot about accessibility. So let's look up here, accessibility developer guide. Let's see if they you know, they seem like a pretty authoritative source, right? Okay, let's check out their website. Welcome to the accessibility developer guide. Nice. Okay, this is a good sign. The content is based strictly on the W3C's web content accessibility guidelines. Okay, it looks pretty good. So let's see what they got here. So I'm just going to go right to the example section and hiding elements. Since we're going to add, we're probably going to add some text that we only want to be readable West screen readers. This is probably what we're going to use since we want to have some text that's not visually visible on the page, but it is readable by screen readers. Cool. Okay, hiding elements visually. We don't want to hide elements from screen readers, so we want this thing hiding elements visually by moving them off screen. Okay, cool. There's no visual technique for this, but there is a well proven workaround. So the only way to hide an element visually while retaining its perceptibility for screen readers is moving them out of the viewport using absolute positioning. I think that's similar to what that other example was here. Yeah, so they're doing absolute. It's like they're also using clip path. I don't know if that is actually supported by all browsers. This seems like maybe some more straightforward approach. So basically, this is actually a good example. So I would take what this website is saying over this website because I mean, this seems pretty good, but it just seems like this is like kind of a blog. You know, it looks like there's some kind of agency who handles accessibility, and I'm sure they know their stuff, but I think this clip thing is just not supported as universally as just, you know, position absolute. So this seems to be a little bit more of a simple example. So we're going to copy this. Screamer only text for card title username, so we'll add that link there. Okay, so this is good. And this seems like a pretty cool website. So just for the heck of it, let's see forms. I just want to see what kind of markup they recommend. Let's just look at the general good form example. It's a radio button. This is what we're going to be using. Radio buttons input type radio. Okay, that's good. And then each group of radio buttons and checkboxes has surrounding field set legend structure. So this is something good to keep in mind for the markup. Let's kind of go back to that example from Scott O'Hara. So field set and legend. Okay, cool. So it seems pretty similar. So it's another vote in terms of, you know, this using the radio button list for the markup. Screen readers. Okay, in addition to the controls label. So each radio button will have its own label. Screen readers also announced the legend of the surrounding field set. Okay, so they have an example on code pen. Let's just check that out. I'm just kind of curious what the legend is for. I don't see a legend here. Oh, here legend hobbies. Let's just kind of scoot stuff over here. All right, so the legend says, say to hobbies. So where is that? Okay. Oh, so sort of like the title for the set of radio buttons. So my guess is for the toggle, I would do something like set the legend field or the legend tag to say dark light mode or theme, maybe something like that, something that's kind of just descriptive of what, you know, what's the purpose of this, of these radio buttons? And then to make that only visible only readable by screen readers. So that's a good, that's good to keep in mind. So I'll make a note about that because I don't want to forget about the legend thing. So why that to the dark light mode toggle here, HTML markup. I guess I'll just make another note here, use field set legend and then radio inputs. Okay, so I think that's all the notes I needed. So I think we have everything we need to go from here. So the first thing we want to do when we're creating our project files is to create our GitHub repo or repository. The reason we want to do this at the beginning is because there's a couple reasons. One is that you have to create a new GitHub repository in an empty folder. So if you've already started creating your files and started coding, if you wanted to create a repo in the middle of that, you would have to create it in an empty folder and then manually move all your coding files to that folder. So just better and easier to create it at the beginning. The other reason to create the repo at the beginning, of course, is when we're using source control like Git, it's just a good idea to make commits to your repository as you're developing. So to kind of save your coding as you go along. So to create our repository, I'm going to use GitHub desktop app. I know a lot of devs like using the command line forget because it's kind of faster and easier, but I personally like the the desktop app and just the graphical user interface that you get with that. So in GitHub desktop, we're going to go to file and new repository. And we'll give it a name of FEM for front of mentor. And this is the social media dashboard, dark light toggle. I know it's kind of a long name. We're not going to initialize it with the read me and I'll show you why in a little bit. But for now, it's just create this repository. And then we're going to go to VS code. And we want to open that folder that we just created. So I have all my GitHub repos and a GitHub folder in the documents. And we'll open the folder. And right now there's nothing here except for this git attributes file that get just kind of generates. So now let's start moving the files that we need into our product folder. So if you remember, last time, in the previous video, we created the notes markdown file. So I'm just going to take this, and I'm going to copy it into our folder here. So now we can see that the notes that we created last time is here for our reference. Now the other thing I want to do is I want to add the starter files that front of mentor gives you. So this is the front of mentor challenge page. And when you start the challenge, click here visit challenge hub. And then it tells you you can download the starter files. I am on the pro account. So I have this option to download the design files, which we will be looking at in, I believe, a future video. For now, let's just download the starter files. You can click this download button to get them. I have actually already done that. So let me show you what that looks like. If we go to our download folder, we have the social media dashboard zip file. And I have already ends up that to this folder here on my desktop. So we check out the files here, we have a bunch of folders and different files. And I'm actually going to take all of these and copy them over to my project folder here. So let's take a look at what we have. So in VS code, we're looking at our project now. And we have an index HTML file from front of mentor. And this just gives you the copy for the website. So you don't have to manually type everything out. So that's pretty helpful. The other thing I give you is a style guide markdown file. And this is helpful because it'll tell you the width of the design that you have for mobile and desktop. It also gives you the colors that are used in the design. So we're going to be using these when we create our SAS and CSS styles. So there's a lot of different variables for colors mostly. And then it tells you the font that we're using this font, it's called enter and it's on Google fonts. So we'll have to load that as well. So this is just helpful to be, you know, a reference as you go along. The other thing that it gives you is images for the website. And then also there's a design folder. And this is if you don't have the pro account for front of mentor, and you just are kind of working from JPEGs. And I have done this in the past just with eyeballing and sort of estimating distances and sizes. And it works pretty well. So you can definitely get by using the free front of mentor plan. But it is kind of nice to work from design. And I did kind of want to show you the real world process when you're building a website from an actual design file. So I thought that would be cool to show all of you. Okay, so now that we have our starter files, I'm going to do a couple things to just configure things. So in this file, this is a git ignore file. This is from front of mentor. So this will tell git to ignore any files or changes to files that you don't want to commit to your repo. So this is so that you don't commit the actual design files to GitHub. Because you know, that's for the paid plan. This is for ignoring the store files, which I think is for a Mac thing. I always want to ignore the node modules folder. And anything in that, because you install the NPM packages from your package JSON file to your node modules folder. So you don't really want to clutter your GitHub repo with the node modules folder, because anyone can install them from the package JSON file. And I think that should be it for now. So we can just close these out. Now the next thing I want to do is create the other files and folders that we're going to be using in our workflow. So this would be mainly SAS files. I'm using SCSS syntax for SAS and some JavaScript files. And then I'm going to set up the goal workflow. But let's set up our files for now. So in our route, we have the index HTML file. And usually what I do is I'm going to create a folder called app. And this is where I'm going to store my working JavaScript and SAS files. So in the app folder, I'm going to create another subfolder called SCSS for the SAS. And I'm also going to create another folder called JS. And I think you need to drag that so it's in the app folder. So here we have our JS and SCSS folders. So in the JS folder, let's create a file called script.js. And we'll add a little console log message saying hello. And this will use to test that our website is working and everything's getting loaded. Now in our SAS folder, we're going to create some more sub folders. There's going to be a lot of sub folders here. And this is just to keep things organized. This is one reason that I really like using SAS because if we only use a CSS file, we would have a super long file just with all your styles there. SAS gives you a lot of different capabilities and power really in terms of organization and making things easier for you as you're writing styles. So we're going to be dividing out our styles into different folders as well as different SAS files. So in our CSS, so in our CSS folder, we'll create another subfolder. And I'm going to create a util. This is for utility styles. And in the util folder, let's create an index dot SCSS file. And if you're not familiar with SAS, this might seem a little confusing or overwhelming. I will sort of show you everything that I'm doing in my workflow. So hopefully that will help. So I'm going to create another folder in the SCSS folder called globals. This is for global styles that I want to use. And in the globals, we're also going to create its own index dot SCSS. Then we'll create one last sub folder called components. And again, this will have an index dot SCSS file. And the reason we're doing things like this is because in this components folder, in each of these folders, actually, we're going to create multiple other SCSS files. And the index dot SCSS file will load all those other files. And then we will then load those files in our main SCSS file, which we need to create here. So style the SCSS. This will be the main file. So the way SAS works with when you're working with partials, meaning when we split up the styles into these multiple files, is we can load them through our main style that SCSS file. So the way we're doing that here is we're using some, I guess, SAS functions for lack of a better word. And what we want to do on our main SAS file style that SCSS is, we're going to load all the styles that we're going to create from components, globals, I think just components and globals. And I'll show you what we do with the util styles in a little bit. So to that, we're going to use at use, and we're going to load, let's load the globals first, globals, and then we'll add another use rule and add, add components. So this is all that we're going to add in our main SAS file, because we're going to load all the globals and components with these rules here. Now let's start with the util folder. So let me close these other files out here. So this is the index SAS file and the utils folder. The utility styles that we're going to add here are mainly things like variables and functions and mixins, SAS mixins, that aren't actual CSS rules, but rather things that we're going to be using in the other SAS files in our project. So for example, in the util folder, let's start creating our SAS files here. So I'm going to create one called colors, and we'll load our color variables in there. Then we'll create another file called breakpoints. And this is going to be a mixin that I like to use in my projects for just a faster way to load your media queries. And we're also going to add another file called functions. And then I think I'll add one more file for our font styles. So fonts, that's CSS. This is going to be for the font family, mainly that Google font that we saw in our style guide from front of mentor. I am going to sort of cheat a little bit, and I'm going to copy the breakpoint styles that I've used in the past just to be a little bit quicker, but I'm going to explain this and everything that we're doing here. So what happens is when you're usually writing a media query, you write something like this, so media minwidth, and then something like 50 ems, and then you're going to write your styles in here. What we're going to do is we're going to use a mixin so that we can reuse the code every time we need to write a media query. So we don't have to type all this out, you know, minwidth of 50 ems. The other advantage of this, of course, is since we're using this mixin, if we want to ever change the 50 ems to like 64 ems, then we don't have to go and do a huge find and replace through all our styles. We can just change it in one place here in our breakpoints file. So this is why we're spending a little extra time setting this stuff all up. So what happens here is in the mixin, the mixin will basically load reusable code that you want to use multiple times in your code base. So we create the mixin by saying at mixin, then we type in the name in the mixin we want to use, which is in this case, the first one, breakpoint, and then breakpoint is going to have a parameter. So it's kind of like a function, and the parameter that's going to use is size. So then when we're loading this breakpoint mixin, it's going to load the code that we don't want to, you know, keep typing out every time. So it's going to load the media query min width, and then instead of typing the number, we're using a map get. So this is a SAS map. It's kind of like a, like an array or an object. And in this breakpoint mixin is getting the map called breakpoints up. And then it is putting the size variable in there. So what happens is it's going to load the breakpoints up map, and then whatever size you want to use in your mixin. So we have these saved here. So it's medium, large, extra large, and I've already set the widths and em units here. And then the content is going to be whatever content you put in the mixin when you're actually using it in your styles. So just as an example, if we wanted to use this mixin breakpoint, we would, in our other styles, we would say include, let me scoot this up here. So if we wanted to use this mixin in our code elsewhere, we would type in include breakpoint, and then print the C's, and then we would choose the size that we wanted to set this media query at. So let's say we wanted to do large and up. So we'll say include breakpoint, large, and then, you know, whatever rule you want to add in here. So font size, I don't know, three rams or something. And usually this mixin for sass would be included inside, it would be nested inside the actual selector. So we would actually write it inside the selector in this example, we're using H1. So this would load the breakpoint in the H1 tag, and the resulting CSS would look something like H1, and then font size three rams, and that would be in a media query. So media min width, and the large width is 87.5 EMs. So it would be something like this. This doesn't seem like a whole lot of maybe benefit from just writing this one time. Maybe it seems like it's almost the same amount of work, you know, writing include breakpoint, large, as it would be to write out the media query. And that is kind of true. But again, if we ever wanted to change this 87.5 EMs, it would be kind of a hassle to have to go through, find every media query and update that. So it's just easier in the long run to use the mixin for that. And the other mixin that we have here is breakpoint down. And this is when you want to use the max width. So if we wanted to write some styles for medium width and small, but we don't want to do it for large, usually I try to just stick with the min width media query. So this breakpoint up mixin, because usually the desktop styles have additional rules that, you know, mobile and tablet may not have, because the mobile design is usually a bit simpler than the desktop design. For example, mobile designs, all the contents often stack to one column versus desktop, you have the content in multiple columns. So you need those extra rules for flexboxer grid to do that. So that's kind of a quick little crash course in how this works. So now that we've written the first util SAS rules, we want to include this breakpoints.scss file when we're importing it from the util folder. So to do that, we're going to go back to the index.scss file in the util folder. And we're going to import the breakpoint SAS file with forward break points. And what this does is it doesn't do anything to the code, but it basically just takes all these styles that we wrote. And then when we use the util in our other styles, it's going to take all those styles there. So you can use it in any file that you need to. Okay, the next file we're going to work with is the functions file in the util folder. And again, I'm going to sort of cheat a little bit. I'm going to copy styles I've used in the past. And this is the only thing that's going to be in this file. It's a function that will convert pixels to grams. You can see here I included the link here. It's from a CSS tricks article. So to use this function, let's say in another SAS file we want to set the font size of an H one to maybe like 30 pixels. So in the past, if you've seen my other videos, I would pull out my calculator and divide 30 by 16 to get to Rams. And this is because 16 pixels equals one Rams by default on most browsers unless you change that in your settings. So we divide 30 by 16 to get Rams. And we can use this function to do that. So we'll say rem 30. And we just use the number here. We're not using the unit. So if we say that the result thinks yes, s is going to look like font size 30 pixels. Or I'm sorry, it's going to be whatever Rams this is, which I guess we can pull out the calculator one last time here. 30 divided by 16 is 1.875. 1.875 Rams. So this is the only purpose of this function, but it is kind of helpful just so I don't have to keep pulling up the calculator. I think there are other NPM packages or probably even VS code extensions that will sort of do this for you automatically. But I just like doing this here so that I'm not dependent on having to install another tool. But you can do that if you want. So I'll just delete that since we don't really need it. Now let's start adding our colors. Actually, before that, let's make sure the functions gets forwarded into our util main one. So forward functions. Okay, so let's close these since we don't really need them. Now let's do the colors. And if you remember, we were just looking at the style guide here. And we're going to create variables in our colors SAS file for all the colors that they've given us. So I guess we just do this one by one. I was going to copy each section here. And we'll edit out everything we don't need. And this is not correct syntax wise for SAS, but we just want to have everything here. Okay, so that's all the colors. So let's start creating our variables. So when you're, we're not going to use SAS variables because CSS has come out with CSS variables or CSS custom properties. And that's something that we kind of have to use because we're doing the dark light thing and it doesn't work with SAS variables very well. This is because you can change the value of the CSS variable with JavaScript, you know, without having to reload things. So root and usually we call it dash dash. And I think I'm just going to say the yeah, say the colors lime green. Maybe we'll say lime green one word. I think that's right. Is that right? Okay, let's let's check here. CSS variables. I haven't worked with these a ton. So yeah, okay, I was right. So dash dash name the color and then the value. I've just worked with SAS variables for so long that it just kind of sticks in my mind. Okay, that seems right. Add a semicolon. So we'll do bright red. And we're using HSL instead of the hex colors because HSL, which stands for hue saturation and lightness. So that's each of these three parameters here are. It's a better way of changing the lightness or darkness of a color if you are using HSL. So I think it seems like people are just using HSL more nowadays than hex. So, you know, just trying to stay on top of stuff. Okay, so we'll do Facebook. Instagram. Oh, sorry. Twitter is first. Instagram. This is a linear gradient. So Instagram start. Not super created with a naming here, but, you know, Instagram and YouTube. And I think I'm actually just going to delete these as I go. So we know where we've been. And then the toggle. There's a linear gradient, which my guess is I have a design open here. There's a toggle and then there's the background gradient, which is what I am guessing this means. So there's a linear gradient and then the toggle itself, which I'm guessing is the circle of toggle. I guess we'll find out, but maybe I'll do toggle background start. And we'll just have to remember that this is going to be a linear gradient. And the cool thing about VS code is that when you put a color in, it'll actually give you a little swatch of what the actual color is going to look like. So it helps. And I'll just say toggle for this other one here. Okay. Now this is where we get into the dark theme and then the light theme. And I think I need to go back to my notes to see how the theme works just so that we can make sure we're setting things up right at the beginning. So I think this should work. Okay. Now this is the prefers color scheme thing. First color scheme dark, we would put the variables like here within this prefers color scheme media query. I think I want to find one for light dark mode toggle. I think what I can do is what I'm guessing is going to happen is for the, we'll make the light theme, I guess, the default. And then for the dark theme, if you set it to dark mode, then we would still need CSS variables for each color. But we would, you know, set the background to this color when it's in dark mode. So I think we can still set all the colors in here and then we will separate them out with the dark and the light modes later on with other styles and using that prefers color scheme media query. So we'll just go ahead and do this. And in terms of the naming, naming is kind of the hardest part. I've found maybe not the hardest, but naming takes a lot more time than you might think to name things in a way that makes sense and that you'll remember later or the other developers will be able to understand if they take on a project that, you know, you're not working on anymore. So because these are going to be the dark mode, I might just say dark dash. And then these are actually named. So very dark blue is for the background, top background pattern, card background, text, and then other text. And then we have the same names with the light values on the second part. So I think I'm going to say dark and then sort of use the same names here. So dark background. And then dark top background. Yeah, I think this should work. And dark card, or maybe just card, since there's only one card color given here. And then dark text one. And then we'll say dark text two will be this. So we can always rename things later on if a different kind of name would make more sense. So we did the dark colors now. So I think what I can do is control D to just duplicate that and we'll rename things for the light mode. Oops. Oh, I included the toggle and I didn't want that. It's just like the lines you need control D will duplicate those lines. Light. And then we will copy these so the background light top background card background and then text one and text two. Okay, awesome. And we're done with these. So this is all the style we need for our colors. So now that we're done with this, we just want to make sure that we are doing the same thing. So forward colors. And the last thing I want to make sure we have is the font styles. So if we go into our style guide, the fonts is this inter font here. Let's get that font and weights 400 and 700. So in Google fonts, let's scroll down to 400, select the style. And then we also want 700 bold. So we've selected those styles and now we're going to just copy this stuff here. And we're going to go into our next HTML file and we want to blow the fonts here. I don't know if I need to add this comment, but Google fonts, just so we remember. Then we need to add the font family. And, you know, this might seem a little overkill, but I'm going to create a variable for the font. Font, Enter. And we just need the value. And I didn't add it to the root element. There you go. So now let's say in the body wants to say font family. And we'll call that variable by saying var font enter. And that's kind of how you use CSS variables. So we'll be adding those later on. Okay, so don't know the fonts. So let's close that. Go into our index, make sure we're forwarding fonts. I think it was plural. Let's check. Yeah, fonts plural. Okay, so then let's just double check this. So in our utility folder, we got our index file, which is open here. Breakpoints, colors, fonts are there, functions are there. Okay, perfect. So now we are done with the utility styles. So we're done with our utility styles. Okay, the next thing we're going to set up is our global style. So kind of in the same way that we did with the utilize styles. I'm going to go into our global sub folder, and we're going to create some SAS styles. So in globals, I'm going to say boiler plate. This is where I put a lot of default styles. And I'm going to create another one for typography. This is for styles for the text elements, like the H tags and the anchor links and things like that. So I think it's just those two for right now. We might add more later, but for now we'll stick with these two. Okay, so in our global index SAS file, we're going to do the same thing that we did in our util and use the forward rule. So we'll say forward. And I'm just going to add them all even before I add these styles into our levels. So boiler plate. And then we'll say typography. Okay, should be good there. So for the boiler plate styles, one thing I do is HTML. And I like to say font size 100%. This helps with accessibility. And I'm going to say box sizing, border box. And this ensures that if you add padding to an element, the total width is going to include the padding, not be in addition to the padding. So let's say we had like a div and we said width is 300. And then we set a padding of 20 pixels. If we have box sizing, border box, the width plus the padding is still going to be just 300 pixels. And if you don't do it, I think content box is the other option. Let's just see here. Yeah, I think content box. So not border box. If you don't use border box, basically, and you set the width 300 and the padding all around to 20 pixels, it would be the width. It would be the width would be 300 plus 20 pixels on the left, 20 pixels on the right, 40 pixels would be 340 pixels wide. Usually you want the width to be what you set it to. So it's better to include the padding in there. Now we want to inherit this box sizing property from all elements. So before, before, and then after, so box sizing inherit, it's going to inherit that from the HTML element. And for body, I usually like to do some reset. So I'll say margin zero, padding zero, and then we'll set the font family to that font that we just created. So font enter. And I think that should be good for our boilerplate styles. Okay, so we're done with that. And now we're going to add our typography styles and we'll probably add some more stuff here, but for now, let's just start with the H tags. And I personally like to set the margin top to zero. Just because your browser default, you'll have a margin on the top and the bottom. I like setting it to zero and then we'll set the bottom margins, you know, later on. The other thing I want to do is for the anchor links, a visited. And I think a active text decoration, none. So we don't have the underline. Yeah, all right. So that is good for typography. And let's just check one more time. Make sure things are here and that's good. And then our styles, we are using globals. Okay, you might be wondering why I haven't done a use for the util styles. The reason for that is in utils, I'm using things like SAS mixins and functions and variables. And actually, I think I need to move all the CSS variables into the globals because what happens is for the util, something like the mixin is not going to, this is not going to on its own generate any CSS. So we only need to include it when we're actually using this mixin in whatever SAS files. Whereas for things like colors, we actually do want this to get forwarded in the main SAS file because, you know, we need to access these variables and this is not a SAS thing. So any of the SAS things like functions, which aren't going to generate CSS is what I like to keep in the util. So yeah, I'm just using SAS variables. So you just need to change things out a little bit. So I'm going to move the colors because we're using CSS variables and the fonts to the globals. So that should be right. And now we'll delete it from the util stuff. So yeah, things are things are always changing. So now I need to forward. I might actually put these on top. I don't know if it matters, but forward fonts and colors. Okay, so this should work. And we'll find out when we start setting up our gold workflow and compiling our SAS files. Okay, so we have our util and our globals set up. And the last thing I'm going to do is our components. So kind of the same way we have, we're going to create a lot of components as we build this thing. I'm just going to start with a couple that I think we're going to need. So in the components folder, we'll create a new file. And I'm just going to say, since we have those cards in the social media dashboard, I'll say card. This is mainly so that I can just add some test styles so you can see, you know, what we need to do. So we'll just make some sort of fakeish styles for element of class of card. We'll just say, I don't know, padding, rem. So we're going to use that function that we created. Let's say 20. So 20 pixels all around. And this is something that we can use to test when we're compiling our SAS. And if it doesn't cause an error and it outputs, you know, rem of whatever 20 pixels is, then we'll know it works. And for the other one, we'll also do toggle. And we'll say, we'll add some nested stuff. So maybe toggle, toggle button. And we'll say, we'll pretend this is the styles for that circle in the toggle. So border, radius, 50%. Maybe we'll add the color too. So color, we'll say width. And again, this is just like made up styles. So 16 pixels. We'll say this is the height of 16 pixels. Border, radius of 50. And let's just say background, color. And we'll use our, what that color was. Toggle. So it's just toggle. Here we go. Okay. So we have toggle. We have card. And now we want to add the components. So I think we'll add forward card. Forward toggle. All right. So these are the starter SAS files. We're obviously going to be adding a lot more stuff in our SAS files later on. But for now, let's just close all these out. And, oh, actually one thing I forgot. So in our other SAS files, what we need to do in order to use this RAM function here is we need to import the util styles. So what we usually do is at use. And then we need to get to the util, load utils from wherever we are here. So we're in the components folder. So we need to go one up. And then go to util. And I think we just load it like that. And when you use use, we have to give it a namespace. So I think by default, it will add a namespace of whatever the name is. But I kind of want to not have to say, you know, util.whatever for all the styles that we wrote. So if you import it as a wildcard, then you can just use the names of, you know, the variables or the other thing that you created without having to use the namespace. So it's a little bit easier. But names facing can come in handy if you're, you know, say importing styles from a library or you just have so many styles that they kind of conflict. You might have something like a variable or a mix in that's called the same thing from the two different styles. So it's in that case, if you have that many styles that are conflicting, then you can use a namespace to differentiate between which one you actually want to use. In this case, since this is just, you know, a one page sort of web app, we shouldn't have to use namespaces, but we can always add it later on. So we need to take this rule and we also want to add it to our toggle styles because we're using the REM stuff here. I'm thinking about this variable here. So like, I'm wondering if we would also need to do a use of the globals. I'm not sure. So, you know, we'll see what happens because I think the way the variables for CSS work is it's set on the root element. So since we're loading the global styles already in our main SAS file, it should be fine. It should be able to read that. But we'll see what happens when we compile everything. Now we are actually done with our SAS styles. It's going to exit out of everything here. And we already have a script file. We're good with that. And the last thing I want to create is a new folder called dist. This is where we're going to put our compiled CSS and minified CSS and JavaScript files to load that in our index HTML. So let me actually create a reference to both of those files that we don't have in existence right now, but we are going to generate them with our gulp workflow. So, let's see. Okay, this is in the head. So after the fonts, we'll load our styles. So link CSS. And this is coming from the dist folder, of course. So we're going to say slash dist. Style that CSS. And then we'll load script source, dist script.js. And I think I want to either set, I think I might want to set this to defer. Because in the past, you would have to load the script tag at the bottom of your body. But I think we can put at the top and just set a defer to it. So let's look that up. It's a little JavaScript file to defer. Let's see what comes up. Flavio Cokes. You can always depend on Flavio to have written a blog post about something that you're looking at. Okay, so when loading a script on an HTML page, you need to be careful not to harm the loading performance of the page. Okay, so yes, script is traditionally included in the page this way. Okay, so this is bad to put the script in the head. Because there's a lot of delay reduced introduced. So a very common solution to this is to put the script tag at the bottom of the page is for the closing body tag, which is what I usually do. So the best thing. Oh, I wonder if this is actually the best practice here. So you have to do that if you need to support older browsers that don't support these new features async and defer. So these are the new things async and defer. If you specify both async takes precedence on modern browsers while older browsers that support defer but not async will fall back to defer. So they only make sense when you're using the script in the head. Okay. So let's see. So no defer or no async. We don't want that. So if it blocks parsing on the page, well, deferred is not neither async in order for guarantee anything on blocking rendering. Okay, and then the bottom to tell me the best way. The best thing to do to speed your page is to put them in the head and add a deferred attribute. Okay. Thank you, Flavio. There we go. Okay, so now that we're done with our SAS files and loading our JavaScript file, at least for now, we're going to set up our Gulp workflow and we're using Gulp to compile our SAS to CSS. As you can see, the SAS files are very different from when you're writing styles with CSS with the functions, mixins, and also the nesting styles. So browsers can't read SAS files. So you have to use some kind of tool, a build tool to compile or convert your SAS files to CSS. There are various code extensions that you can use. I used to use the live SAS extension a lot. However, it doesn't support the new SAS use and forward rules. It only supports the old import rules and those are getting deprecated by SAS sometime in the next couple of years. So you kind of want to get used to writing the new syntax. Unfortunately, that extension, the live SAS extension has not been updated in, I think, two years. So, you know, you can find a different extension if you want to try the new syntax with SAS or you can use this Gulp workflow. So we don't really need this file. So let's open our terminal window and we're going to set up Gulp and install a bunch of NPM packages for our workflow. So the first thing you want to do when you're working with Gulp is you want to make sure you have the Gulp CLI installed. So if you don't have it, Gulpcli. I already have this installed, but if you don't have Gulp CLI installed, you can install it this way. Using the dash G and that will install it globally on your computer. So you can run Gulp CLI from any folder on your computer. So now we want to first create our package JSON file. So I'm going to say NPM is very long. It's kind of bugging me, actually. Let's just rename our folder here. Close folder. I'm just going to rename this to social dashboard, I think. Or maybe just dark light toggle because that's kind of the main thing I was thinking about. Okay, so now it's dark light toggle. We want to create our package JSON file, so NPM install. I'm sorry, NPM, iNITi. So now we have our package JSON file. We can now install a bunch of NPM packages that we need. So NPM install, and I'm going to be using my Gulp config that I have from previous projects. So I will, but I will still walk you through how all that works. So we want to install a bunch of packages. So the first one is Babel core and Babel presetenv. And this is used for auto prefixer. There's some CSS properties that need to use browser prefixes like WebKit for browsers that don't support the sort of full thing. So for example, one property for that is transform. So transform is a property that is supported in modern browsers, but for older browsers they may need to use the dash WebKit prefix. So Babel will work with auto prefixer to determine which properties get prefixed automatically. So that way you don't have to type it out yourself. So just another way that you can save time. So Babel, and then we're going to install post CSS. This is a collection of plugins that auto prefixer is a part of. So you have to install both of them, I believe, to use auto prefixer. Then we're going to install browser sync. And this will, when we run Gulp, it's going to spin up a local server and it will sort of keep watching your files and reload the website anytime you make a change. So you don't have to manually reload in your browser. We're going to install CSS nano for minifying our CSS. And we're going to install Dart dash SAS because this is the version of SAS that supports this new syntax with the use and the forward and stuff like that. So we need to install that specifically if we want to use those new rules. Then we're going to install Gulp because we need Gulp, Gulp Babel for the Babel stuff. Gulp, Gulp, post CSS, Gulp SAS that will do the SAS compiling and then Gulp Tercer, which we're going to use to minify our JavaScript files. So hit enter. Hopefully I didn't make any mistakes. And we should see all those NPM packages added here in our package JSON file. All right, no errors installing, which is great. And now in our package JSON, we can see all the packages that we added in here. Now, one thing you might have noticed is found three vulnerabilities. So kind of a cool thing that NPM does when you install, it'll actually tell you if the versions you've installed have any security vulnerabilities. So I don't know if this is the right way to do it, but I will just write NPM audit fix. If I can, sometimes I'll type in NPM audit just to see which packages they're talking about. So it looks like Yarg's parser, which is using Gulp and then glob parent, which is used in this Gulp thing too. And then another dependency of Gulp. So I usually will just type NPM audit fix to see if this will work. But I think it may not because it says three vulnerabilities require manual review. Yeah, fix zero. So it's not great, but they're low and moderate. So I'm just going to kind of leave it. They're not high security vulnerabilities. So I think it's kind of okay. I'm not super familiar with this part of NPM and all the dependency securities. So feel free to, you know, flaming the comments. This is a terrible thing to do. But yeah, if it's not like a high level, I'm just going to just going to leave and keep going. Yeah, so now we have our dependencies installed. The next thing we want to do is start working with our Gulp workflow. So in our route, we're going to create a new file called Gulp file.js. And in here is where we're going to write all our configuration for Gulp. And again, I am going to cheat a little bit and use a previous Gulp file configuration and just copy and paste that here. But let me kind of walk you through what's going on here. So in a Gulp file, this is a JavaScript thing that you run on the command line using node. And this is what we're going to use to compile and minify all our files. So at the top of your Gulp file, we are importing all of the NPM packages that we just installed as modules into this file so that we can access them and any functions that they give us. That's what this top section is. Then if you scroll down a little bit, this is setting the SAS compiler to use Dart SAS. And this is again so that we can use that new use and forwards syntax in our SAS rules. So the next thing we need to do is we need to actually compile our SAS and JavaScript files. And that's what this next section here is. So we have a SAS task and it's a function called SCSSTask. And what this is doing is it's running multiple different things and they are using this pipe function. That's a Gulp function to sort of run them one after the other. So what this is saying is this first line is taking the main SAS file, so app SCSS style the SCSS. And it is going to do stuff to this file. And in here, this option is setting source maps to true. SAS source maps are, it's an extra file that's generated. And they're really cool because when you are testing your website in your browser and looking at the developer tools, you inspect a certain set of styles, it will actually tell you the original SAS file and the line number where it came from instead of, you know, some location in your minified CSS file, which is kind of impossible to find. So source maps just makes things a lot easier when you're trying to debug and see where some style rule is coming from. So we're setting source maps to true. So we'll create a source map. And then after that, we are piping the next thing we want to run, which is the SAS function. This is coming from the Gulp SAS module. So it's running SAS to compile the SAS to CSS. And then after that, we're going to run the post CSS plugins auto prefixer and CSS nano. So auto prefixer, as I mentioned before, it will add the browser prefixes to sort of support older browsers for those rules for those CSS properties like transform that need the prefixes. The CSS nano will minify the CSS file. Then the last line here is it's going to set the destination of the final compiled CSS file into the folder called dist, which we created beforehand. You can see that right here. And then the option here is to set the location of your source maps file, which this dot means is going to be set in the same location that we just indicated in the dist folder. So that's what we do for our SAS files. Now, if we go into JavaScript, we're doing a very similar thing. So we're taking the JavaScript file, which is app.js script.js, setting source maps is true, which is a similar thing as our SAS source maps. The next thing we want to do is we want to run the file through Babel. And Babel is going to make any modern JavaScript like ES6 compiled to an older version that older browsers can support because not all browsers can read ES6. I think the only exception right now is IE 11, which is losing support everywhere. So you don't have to include this, but I just like to do it in case you have those edge cases where a user might be using an old browser because their company is still using Windows 7 for some strange reason because they don't want to pay the money to update to a newer version of Windows. So things like that, where people may not be able to use the most modern browsers. And the next line is using Tursor to minify our JavaScript file. And then the last line is similar to what we had with the SAS task, where it's setting the destination of the compiled file into our dist folder and then also having source maps saved in the same location. So that's JavaScript task. So the next thing we're going to do is we're going to add our browser sync functions. And this is, as I mentioned earlier, browser sync will spin up a local server and sync it to your files. And any time you make a change, it's going to automatically reload your local website. So you don't have to manually hit, you know, control R every time you make a change. That's another way you can save time with build tools like this. So what this first function does is it spins up the browser sync server. So this is saying browser sync.init server, and we want to run the base directory of a server from the root location where the Gulp file is, which is here. And then the notify options here are just for the styles that you'll see in your terminal when you're running browser sync. And then it's using a callback function at the very bottom to indicate that it's finished running. Next function is a shorter function. It's a browser sync reload. So it's saying this will literally just reload the browser sync server that we spun up. And we want to combine this reload function with our watch task. So we're telling Gulp to actually watch these files. So for example, this first watch task function is going to watch our HTML files, and then if it detects any changes in them, it's going to run browser sync reload, which will reload the local website. And then the second part of our watch task is it's going to watch any SAS or JavaScript files. And if it detects any changes, it's going to rerun our SAS task and our JS task, and then also reload the browser. So those are all the functions that do stuff. At the very bottom of your Gulp file, we're going to export our default Gulp task. And the default Gulp task is what Gulp will run when you type in Gulp on the command line to start everything off. And so in our default Gulp task, we want to run all our tasks. So SAS task, JS task, then we want to serve up the browser sync server, initialize it. And we want to run our watch task. And the watch task is what we'll keep running when we are doing development. Detect the changes and then reload our website and rerun all of our other tasks. So I know it was kind of fast. I hope this makes sense. I am going to include a link to this whole project on my GitHub repo that I've created here. So I'm going to include a link to all that down below in the description so you can refer to it if needed. So now we have our Gulp file. Let's make our terminal a little bit bigger. So what we want to do is we've already installed our packages. So I think all I have to do is just type in Gulp and see if things work. Okay, error in plugin Gulp SAS. It says Gulp SAS 5 does not have a default SAS compiler. Please set one yourself. That's weird. I thought I did set it in my Gulp file. SAS compiler. Gulp SAS 5 does not have a default SAS compiler. So what I do when I see errors like this is I literally will copy this and do an adducto go search for it. This next line says both the SAS and node SAS packages are permitted. So I wonder if maybe that's the reason I don't need to say require. I'm not really sure. So let's just anyway copy this. Go to Firefox. Do a search inducto go for this error message and see what happens. Okay. Good old stack overflow. So this happened eight days ago. So this is a very recent occurrence. Gulp SAS recently updated to version 5.0. They describe that it doesn't use a compiler anymore and you have to install it in separately. So they have documentation on how to let Gulp SAS require the compiler with this piece of code. Okay. So I did do similar syntax to this. Instead of require SAS, I wrote required Dart SAS. So I wonder if there's some issue with that. And I rolled back to version 4. Okay. So what I'm wondering is because I know that the Dart SAS version of SAS is the one that has a new syntax. I wonder if maybe that's included in the default stuff. Let's see. Okay. Oh, my granular using products of version 5. We need the migration guide. Okay. Let's do this so you can read. So I'm not blocking anything. Where were we migrating? Okay. Gulp SAS version requires node 12 or later, including breaking changes. Additionally, changes in node itself means that we should no longer use node 5 versus speed of asynchronous rendering with Dart SAS. So I want to see what they're saying about Dart SAS. This is npm install SAS, which I did. var SAS record. Okay. So this is a new syntax. We used to recommend node 5 versus away, but node 5 is discontinued. So it's not saying that we have to, I mean, I guess we can just try this since this is the default thing that they said. Okay. SAS equals require gulp SAS and then require SAS. So go up here, paste that in. I'm just going to comment this out for now. So I wonder if Dart SAS is now just a default SAS version. So what I could do is do another search for Dart SAS 5 Dart SAS and just see if anything comes up. Oh, here we go. Dart SAS is also distributed as the pure JavaScript SAS package on npm. All right. So I guess I don't have to explicitly say Dart SAS for the compiler. Okay. So now let's see if this works. We'll rerun gulp. Oh, let's see what happened here. Module not found. I could not find module SAS. Wait, did I not even install SAS itself? Oh, it's all Dart SAS, not SAS. Okay. I guess that was a mistake. Let's npm install SAS. Okay. So now I have SAS in our package JSON, rerun gulp. Oh, so the, okay. So this is our website, which is good. I did see an error. So let's take a look at that. But I'm glad this worked. Here we go. I'm deprecation warning using the slash for division is deprecated. We removed in Dart SAS. Oh my gosh. It's recommendation, recommendation, math.div, pixels, and then context. Oh, they actually fix it for you. Oh, that's pretty smart. So I guess for some reason the slash, I'm guessing maybe this has to do with the, maybe SAS modules or something. I'm not really sure. So instead of division, you just go math.div and then say whatever. And instead of the division, it's just a comma. So let's go back into our code and change that. Wow, lots of new changes in SAS recently. This is in our function SAS file. So, okay, let's just make sure so instead of this thing here, I'm gonna say math.div. Okay. And then there's another error. There's no module with a namespace math. So I think I need to import that. It's a, it's like a separate SAS module thing. Let me let's look that up. So SAS math. I think we need to do an explicit like import. Okay, SAS math. So it's part of the builtin modules here. So let's look if they tell you the best way to do this. Okay. So here's an example. Use SAS colon color. And this is for the color module. And this is the math module. So I'm assuming use SAS math. So we'll have to add this at the top of this for use SAS math so that this math.div is accessible. Because before, since we didn't import the math module, it doesn't know what this math.div even is. So hopefully, I think that's the only error, other error that we saw. Now hopefully fix this, we're going to do a control C to exit out of our Gulp task and rerun it. All right, no errors. Yay. So we loaded the website. So we just want to make sure that everything is loaded. So I'm gonna go back to the right side. So I want to make sure that our console log messages. Yep. Hello. So that loaded, which is good. And then the second thing I want to check is going back into our code and opening up in our dist folder, the script.js file. So that's there. That's good. And then our final CSS file. So let's take a look here. I'll do an alt Z word wrap. So we can see our files here. We have our global files from the boilerplate, which is great. And then we have the card styles that I added and the toggle button. Hey, it looks pretty good. Let's do another test in our index HTML file. I'm just going to use the h1 tags since I created some styles for that. Oops, h1, enter. I don't want to say social media dashboard. We'll just do this for now just to test the styles. Okay, so we noticed that when we save the index HTML file did reload. So let's check here. Oh, here we go. Let's see if all the styles we wrote are added in here. So the margin top of zero, which is from the typography thing, and then is getting the font family. Nice. And then you can see the styles added here. This is really good. So yeah, it looks like everything's working. Now that we have our files and folder set up, and we have our SAS and Gulp workflow up and running, we can start actually building this website. But before we get too excited and jump in and start writing code, I usually try to go back to design and sort of get a lay of a land and see what my approach is going to be before writing code, just to make sure we're not making any wrong decisions at the very beginning. So let's check out the design. So I have the design from front of mentor open here in Figma. And if you've seen my other videos, you know, usually I have a free plan, a front of mentor, and they just give you JPEGs. But I got the pro plan for this one because I just wanted to show you all what the real world experience is, you know, getting the design from a designer, and then having to work from that and build it. And I actually haven't used Figma before. I've always used Adobe XD at work and sketch in the past as well. But I'm guessing it should be pretty similar to Adobe XD. And looking at the design here, we can see that it has the desktop dark mode. And then it has the mobile design as well. And we have the desktop and mobile for the light mode. And they're also really nice and they give you some the the hover styles. So that's very helpful. And I haven't always gotten that in the past. And this is pretty normal in terms of what you get from a designer. Usually they'll just give you a desktop and a mobile design. I have gotten a tablet design from a designer maybe three times in my entire life. So usually what I've done is just kind of merge the mobile and desktop designs together for tablet view. Just trying to make sure things look okay and sort of use your best judgment. So even though I'm a developer, I do sort of have to make some design decisions sometimes. You can always go back to the designer, have them look at what you've built and have them give you any feedback on it. So now that we have the design, what I like to do is look at the design and see what the sort of general container size is, how things change from desktop to mobile design. So in terms of the container, what I mean by that is if you're thinking about someone who has a really wide monitor, you know, how wide is the content going to be? Because obviously you don't want to go all the way across because then that kind of makes it not very readable. So if we look at the design here, we click on this rectangle, it tells us that it is 110 pixels wide. So that's what our container max width is going to be. So we're going to come back to this when we start writing our styles, but just in general, it's good to see what this is set up. And I want to see how this grid layout changes from desktop to mobile. So on desktop, we have this four column grid. If we scoot over to the mobile design, it stacks to one column. And again, this is a very common design pattern going from desktop to mobile for content in multiple columns. So if we go back, but we can see what some other changes are. Let's check out the text sizes as well. So let's look at the headline here, social media dashboard. If we look on the right side, it uses using the inter font, which we added to the site ready. And it says it's bold and 28 pixels tall. So that's the desktop style. So let's see if it's any different for mobile. So we'll just go and figma kind of click until we select just the headline text. And it looks like it is inter bold and 24 pixels. So the H one tag, this is going to be the H one tag goes from 24 pixels and mobile to 28 pixels on desktop. So that's good to know, right? And of course, these are probably going to shrink as well. So this is 24 pixels on desktop. And let's see here might be the same actually 24 pixels on mobile. So you know, these are just things that it's good to see how they change from desktop to mobile. And I think just the last thing was, let's look at the sort of body text for this. This is 12 pixels. It's pretty small. So I'm guessing it's not going to get any smaller on mobile. Yeah, 12 pixels. So the numbers look pretty much the same as well. So there's not a ton of changes between desktop and mobile. There are some layout changes, obviously, going from the four column to one column on mobile. Let's look at one more thing. And that is, you know, when you have items in a grid, whether you're building it with Flexbox or CSS grid, sometimes the order might change between desktop and mobile. So for example, here are the cards, we have Facebook, Twitter, Instagram and YouTube. It's probably going to be the same. So Facebook, Twitter, Instagram, YouTube on mobile. So that's the same. And I did want to check on the order of this bottom grid, because you can see it's Facebook has two cards, Instagram is two cards, they each have two cards. So let's see what they do on mobile for that. So if we scroll down here, looks like the order is the same. So it's Facebook has two cars, Instagram, Twitter, and then YouTube. And I did want to check on that just because, you know, I could imagine maybe on mobile, I don't know why they do this, but you know, what if it was ordered by page views of Facebook and then profile views of Instagram and things like that, and then grouping the likes together. But obviously it makes a little more sense to group things by the social media platform first, and then inside the social media platform, the different metrics that are being tracked. So this looks pretty straightforward. There's text changes from desktop to mobile. There are layout changes from four columns to one column on desktop to mobile. And the order doesn't change, which, you know, obviously we could do that if we had to, but it's sort of nice when you don't have to worry about the order changing. And I think the toggle is the same as well. So yeah, so there we go. Okay, so now we can start kind of building out our styles. And I think I'm going to focus on just building the dark mode version of this dashboard in today's video. And then we'll worry about the light mode, and then the dark light toggle logic and all that in the next video. So let's just build this, you know, make sure it has all the styles from the design, make sure it's responsive. All right, so I'm going to start going from top to bottom, because that's usually how I build things. So the first thing we're going to build is this top sort of title bar with the title, the follower count, and then the toggle itself. And again, we're just kind of making sure it looks like the design. I'm not going to worry about any of the logic right now. We will try to get the markup as close as what we think it will need to be for when we are building logic in, but you know, we're just going to build things as best we can to our ability, and we can always change things later on. So going into our code editor, if you look at our SAS files over here, we have components, and then we have globals. And of course, I already made some styles in the last video with the card, and then the toggle styles. But we're definitely going to be adding to that right now. So I think the first thing I want to do is maybe set some styles for that container so that we can set the max width to that. So I think I'm going to add those styles. I could maybe add it in the boilerplate, or I can make another SAS files and globals for layout. So maybe the layout sounds better. And this is just sort of me making up files and names to my best ability. Obviously, you can create your styles any which way you would like, as long as, you know, they're organized and kind of understandable for somebody else. So we'll say layout as CSS, and this is in the global SAS file. So of course, since we made a new SAS file, we need to make sure that we set it in our index SAS file. So we'll say layout here. So in layout, what I want to do is first want to I need to inherit the util stuff, right? Let's see. I'm trying to see if I can copy it from another SAS file. Here we go. So use util as wildcard, and that will let us use the mixins and stuff that we created in the last video. So like the function to convert from rounded pixels, and then the media query breakpoint for breakpoints. So in layout. So if you remember, I was looking at the design and looking at the container size. So this is actually what I'm going to be setting. So I like to use a class name or something for the container, and then I can reuse that class name to limit the max width of any of these pieces of content to, you know, the container of 1,110 pixels. So we're going to say class of container. And I'm just going to say max width. And it's 1,100 pixels, but we want to use REMS because it's more accessible. So we use our REM function. So REM 1,110. And we don't need to use pixels on that because it will automatically add the unit to it. And this is max width just in total. I don't need to worry about having a media query for this because you know, 1,100 pixels is pretty wide. Any mobile device is going to be narrower than that. So we don't need to worry about having a different style for mobile. However, we do want to check on mobile and look at the container there because there's usually going to be some padding because you don't want this to go all the way out to the edges because, you know, kind of need some breathing room. So if we look at here, if I select this card and I hold down alt and then I kind of move my mouse toward the outside of the element, Figma will tell you how much space there is. So it says 25 on the left 24 on the right. We're just going to maybe say 25 on both sides. So what I need to do is I need to add padding, kind of a global padding because, you know, it's going to be the same for all the different elements. So 25 pixels there, 25 pixels here. So instead of having to say 25 pixels of margin or padding for every single individual element, you know, the title, the cards, everything, we can set it globally in one place, probably with a helper class, and then you know that all the items are going to inherit that. So I think I might just be able to say padding. And then this is probably just going to be on the left and the right. Okay. So rem again, we're going to use our function, 25 pixels. And then we just want it to be on left and right. So I'm going to say zero for top and bottom, and then 25 pixels for left and right. Now, this is going to be our mobile default styles. We don't really want the padding for the desktop, because then it's not going to be fitting the design and being 1110 pixels on desktop. So I'm going to use my breakpoint. So break point. And large and up. And we're going to say padding here is going to be zero. So that looks pretty good. And then I guess if you're curious, let's check out what the CSS, the final CSS looks like here. So we can see here. So container class padding of zero. Okay. And then up here container class, max width is, you know, 69 yada yada rims. And the padding is also set. And this second one is inside this media query. So media, media query breakpoint mixing that we created results in the media query of minute width of 64 EMs, which is what we set in our util, breakpoint style. So 64 EMs is what we tagged as the large size. So when we set break include breakpoint with a large parameter, automatically makes your media query for you at the 64 EMs width. So this is usually what I do for containers where, you know, you have some padding for mobile, and then you zero padding for desktop, but then you sort of limit the width. And I think I also might need to center it because we want it to be centered on the page for desktop. So I'll do that by saying margin zero top and bottom, and then auto. And of course, we're going to test this out. If things aren't working right, we can always tweak it when we get there. So it's kind of exit out of these other files that we don't really need. And let's start now actually building some of the markup. All right. Now, when making the markup, I try to use semantic HTML as much as possible. So for this first thing, I think there's a main tag. And then inside main is I think where you put all the other content. So let's actually do a little research. So semantic HTML. So I'm kind of trying to see when you use the main tag. So let's see what sources are good. All right, we'll just go at w three schools, because they're decent. Okay, so semantic elements, yada yada. So section element defines section and document. Okay, the article element. Let's do a search for main. Okay. Hmm, that's not super helpful. There we go. The HTML main tag specifies the main content of the document. Okay, it looks like the main is really encapsulating everything else. So that seems like something we can do. I just want to make sure I'm going to sort of get a second opinion and look at another source and see. Oh, here, Mozilla. I actually try to go to Mozilla. Let's actually search for that. So Mozilla. HTML main tag. Okay, here we go. The authoritative source. So the main HTML element represents the dominant content of the body. Okay, the main content area consists of content that's strictly related to or expands upon the central topic of a document. This is interesting. So the header is separate from the main. So it's like the main maybe is the body of the content and the header is separate. So I wonder if that means that in our design, the social media dashboard, this stuff would be considered the header. And then everything in here would be main. And then each of the grids of cards would be in a section tag. So something like that. So that's kind of what this seems to be saying. Okay, that seems pretty good. The content of a main element should be unique to the document. So now this example is slightly different. In the main tag, it looks like the headline is here. I think maybe the header, I wonder if that would be more like if there was, you know, like a menu or something. At the same time, this is the top and the toggle is sort of in the header of the body. So I think this is one of those cases where there's not necessarily one right answer and the other one's wrong, whether to include this in the main or to have it in the header tag. Again, you know, the purpose of all these sort of guidelines and rules for semantic HTML and other things is to make sure that your code is readable and understandable. So you're not just putting everything in a div in a span. So I think in this case, I can sort of choose what I want to do. And I think I sort of like the idea of having the header be kind of separate. So I'm going to do that. So in the main will be everything else. And we'll add the header tag here. And we're going to add the social media dashboard. And I think the followers content was in there too. And then this dark mode text is I'm assuming is supposed to be part of the toggle. So we're just, we're just going to move this around in here. Obviously, we're going to make some changes to make things more understandable. And then in the main tag, everything else is going to be here. So let's move that. I think I can hold on alt and arrow to move it. Oh, yeah, there we go. There's a lot of little shortcuts in VS code that I still don't know. Okay. And then, you know, in the main, we're going to have different section tags for each section of cards, but we'll figure this out later on. So we'll just leave that link for now. And let's just focus on the header. So save that. And again, this container class that we created, I do want to use that for the header. So in the header, we'll add a class of I like to say header, or I will give a class name that matches the the tag name. And this will help with some of the SAS, the BEM approach that I use for my SAS styles. And you can sort of see this in practice in a little bit, but I'm going to add a class of header. And then I'm going to say add a class of container as well. Let's see how that looks. And it's probably not going to look super different. But okay, here is our website right now. Obviously, it's very bare bones. I'm actually going to exit out of this console here. So we have a little bit more room. Okay, so here we go. So the header is here. And you can see that in the styles, it has all the styles from the container class. Max with is that padding? And it should be zero padding for desktop. So let's see if I just need to make it wider. Okay, there we go. So padding zero here. I think just because I'm zoomed in, desktop doesn't start to like right out here. So now I'll make that a little bit smaller. So let's change our breakpoint SAS file here. So large is 64 EMs. And that is 1024, I believe, according to my little comment there. So let's make it smaller. Let's say maybe desktop styles will start at not sure. Let me see what some tablet styles are. So let's go to maybe iPad Pro. So it's 1112. I mean, just because the tablet is using, you know, 1112 as its width doesn't necessarily mean that has to be, you know, tablet styles. Because these sizes here, it's not necessarily, you know, small has to be mobile, medium has to be tablet, large has to be desktop. But it's more like, depending on your screen size, how does the design change? So I think in the interest of making this sort of reflective design a bit better, I think I'm going to say maybe 950 pixels for where the large styles start. So I regret this later, but we'll see. So 950 up and then 949 down. So we do need to do some calculations here. So 950 divided by 16, because 16 is a base font size. And 16 rems or ems equals, I'm sorry, 16 pixels equals one rem or one em based on the root. So 59.375. Let me just make sure this sort of looks okay before I added update the break points down media query. So reloaded, I think, inspect this. Okay, so it's still using the mobile styles here. Let's see what what point still bit, you know, I think this is okay, because you can still see the inspector on the side. So we'll leave it at that. And then we're going to update the break points down. So 949 divided by 16 is 59.3125. There we go. Okay, so hopefully we won't want to change that anymore. Okay, cool. So now the header has no padding, because it's the desktop styles here. And as we get smaller, we can see that padding changes, you can see that this kind of moves in with the padding. So that seems pretty good to me. Now, the second thing we want to do is get the toggle stuff, right, because we want this to be all the way on the right side. And when I'm building stuff, I usually try to kind of start from the big general styles and then slowly progressively work my way down to get the more sort of detailed styles, like, you know, the font size and the space between the text and stuff like that. So right now we're just going kind of big general. So I want to make sure this is two columns with this title on the left and the toggle on the right. So I think what we need to do is I need to figure out what the toggle markup should be. And I believe I did take some notes on this last time. So open our notes file here and see what we said. Here we go, accessible markup. So this is a radio buttons, and it was supposed to be a field set legend with a radio button list, I believe. See, I feel like I just had something else. Let's check out this code pen. Okay, so the code pen uses a radio button list, a radio button list. And then if you go here, a field set legend, and then it looks like in this div is the on and off each with an input and a label for each option. Okay, so I think I might sort of copy this approach. Let's check out this link. I'm designing and building toggles, which is Sarah is a very experienced, authoritative person in the world of CSS. So she is a good source for stuff like this. Let's see, let's try to find them what what markup she was using. Okay, let's code pen for it. There we go, a little space there. So she also is using a field set thing. So this makes me think that I should also be using that. And then there's a div surrounding the toggle with both options. And then again, it looks like each option has a label and then a radio input. Looks like she wrapped the two inputs in a span, which is a little bit different from this one here. Actually, there's no div. Okay, so it's a little tough because I'm not super familiar with the toggle stuff. So you just try to find good sources and see what they do and try to understand, you know, why they did what they did. So okay, for the toggle, I want to be in a field set at an area label. This is for screen readers, theme switcher, value, and then the role is radio group. Not sure what their role thing is. So let's look that up. So field set role. Field set role. And you know, I obviously, I'm not working on a deadline per se, but you know, if I was, if this was a project that I did do for work in the deadline was like coming up really soon, I probably wouldn't be spending as much time researching these different things. But I have a time now and it's a good learning experience because I can learn something that I didn't know before. So let's do a control F and search for role. So what the role is maybe an area thing. This is hard. Let's see if they have a radio group thing here. Oh, radio group, radio group role. It's a group of radio buttons. Okay. So I think I will probably sort of follow Sarah's approach here. So we'll do a field set with area label and then add a role of radio group. So going back to our index HTML, we'll go field set. Oops, nice. I have deleted dark mode here, but dark mode. Okay, so field set area label, I believe it was. And this is theme toggle. And then the role was radio group. Thank goodness for auto complete, right? Okay, so we got that. And then she is encapsulating both toggles in a div. And then each one has label and then span label and then it has a span with the input type of each option. Let me try to zoom out a little bit to get it formatted better. Okay, so here we go. Span is the wrapper surrounding the light input, the dark input, and then this is background stuff. The background, which is this gray thing I'm guessing here, and then the switcher, which is the pink, like button thing. And the other sets you are a hidden equals true because you don't need that with a screen reader. So yeah, I really like Sarah's approach here. Kind of makes sense once you delve into it and look at the words that you don't understand. So I think we'll maybe do the same thing. I might actually put a div in here instead of a span just because, I don't know, I do that. So in here, we'll do a div. And she did a wrapper. So I guess I could do that. So dot and we'll say toggle underscore underscore wrapper. And this is a BAM or block element modifier way of doing a class. And I'll show you what that's going to look like in the SAS styles. Okay, so in the wrapper, we have the inputs. And again, we're having we have three inputs based on our research last time. So we'll just do this. I might honestly just like copy this input and then the background, which I guess I do need. And then you got a light and dark label. So this one label for light means that it will associate this label with the input element of ID of light. So that's outside the toggle wrapper. Yes, it's outside the wrapper. So do that. We'll add another one for dark. And then I think we can just delete this dark mode thing. So if we go back to design, it says dark mode. So how does this change from dark mode to light mode? And let's look at the design. Hmm, interesting. I might change this up from this design so that it'll actually say dark mode in light mode. Let's go back to our notes one more time and look at the example of that three option toggle. Okay, so three ones, it was like one on the left one, the bottom one on the right. So we'll probably we'll probably do that too. Yeah, and then the middle option is going to be the system preferences, I believe. I don't want to put that one. I think I'm just going to add it here for now. So let's make one for system preferences. Let's say ID of system. And I think the dark is going to be on the left side for from this design. Yeah, so light is on the right. Dark is on the left. So we're going to put dark. Oops, dark. And then system. And I'm moving these elements around by holding down alt and then use up and down arrows to scoot it around. So that's a handy little tip that I found out recently. And then I don't know about what should be default checked. I think we want the system preferences to be default, so I'll just say like that, you know, add another label for system preferences. Maybe system prep and then move the dark up to the top and light down to the bottom. This is going to look pretty ugly, I think. Oh, I forgot. So the toggle wrapper. So instead of see, toggle is just going to be toggle. Okay, now look at our website. Okay, so we can see now that we have the radio buttons for our toggle. And then we have the text here. And it looks like there's some default styles with the field set setting a border. So we probably are going to set that to none. None like that. So let's make sure we have our classes correct in the markup. And then we'll add our styles. So okay, so this is good. I think I'll add a class for the field set to say toggle. This is the sort of parent element of this whole thing. So we got toggle for the field set. And then we have label and we got toggle wrapper. And we have each of these inputs and we have the toggle background toggle switcher. Now I could, if I wanted to be really, I guess, detailed about, I could add a class with a toggle underscore and a score for the labels and the inputs, but you just kind of got to balance out, you know, how detailed you want to be. I'm okay just having this toggle thing and then adding some element selectors. So let's add that now actually. So in our SAS styles, the toggle is it's kind of own thing, right? So I'm going to add another Oh, I already made the toggle component SAS file. So here we go. I don't remember if this is something I actually needed or not. I feel like maybe not. Oh, this is supposed to be the circle thing toggle underscore underscore button. So I guess I can add that in here button. So we got toggle for the field set. And I wanted to get rid of the border. So border none. And then actually let's try to put both of them on the screen. We've got a toggle and we have toggle wrapper. So this ampersand means it will inherit or for lack of a better word what the parent selector is. So the ampersand in this case will be toggle and then underscore underscore wrapper, which is which is what will match the markup class here. So wrapper and then we got the input type radio, which I guess we'll need something. So input input and then type equals quote radio. And then we got toggle background and toggle button. Oops. Okay. And then I guess we can we'll do label at the bottom. So I usually try to follow the order. What else I just wanted to sort of sort it by the element. So I might put the label up under the input, but let's just go by order in this case. So now we got our style name set. Let's go back to our site. So we can see in the header, we got our h1 total followers field set. Now I want to group together the h1 and the text total followers because looking at the design, the social media dashboard title and the followers text is grouped on the left and the toggle stuff is on the right. So I need to probably put the h1 and the text in a some kind of container thing. So I will create a div and I'll create a class of maybe header underscore underscore title. Press enter, select those and move it up there. So now we got header title and then toggle. Now for this header stuff here, I'm going to create a new sess file called header.scss. So you can kind of see how we break apart the website and the different components and then make sure we add header. It will put header first. So I'm going to put header first in the markup and then toggle second. So we'll save that and then in header. And this is why I'll show you here. This is why I added the class of header to the header element. This is so I can do this. I can say dot header and then again ampersand for header underscore underscore title for this. So I do this because if I didn't have the header here, I would have to say header element. And then here I'd have to, I couldn't use the ampersand thing. So maybe there's another way around that in terms of making your styles, you know, follow the BEM model. If there's a better solution, please let me know in the comments because I don't have things right all the time. But in our case, we're going to say header and then header title. So now what we can do is for the toggle, I'm actually going to add another class using the header name. And we're going to add the styles for the layout in the header assess thing. So header toggle. Oops, not tickle toggle. I know this seems a little bit redundant, but it's going to allow us to keep things here in the header styles. And this is to control the layout. So having that title on one side and then toggle on the other side. So now what I'm going to do is I think for this header stuff, I'm going to make the header element be a flex parent. And you can also use CSS grid for some reason just reach for flex box, maybe because I learned it first before CSS grid, but it's kind of my go to when I'm doing layout stuff, especially if I'm not super complex. So we'll do header element is going to be a flex parent. And then each of the header title and the header toggle are going to be flex children. Now again, we want to do the column stuff only on desktop. So not mobile. So I'm going to use the breakpoint, include break, breakpoint large, and then set display flex. Now, they're going to be on either side. So I think I want to do justify content that will control the alignment along the axis. I want that to be I think space between. So add any extra space between the flex child items. And then for title and toggle, I think by default, if I don't set the flex property explicitly, it'll just set it to flex of one. So let's check that out. Nothing happened. Let's see if my header styles did anything. Okay, something is not look down here in our terminal. There is a error here. It says undefined mix in for the include breakpoint large. And that is because I didn't do the use rule. This is the probably one of the biggest differences with the new SAS module things. So I can kind of forget about that. Okay, so now, okay, so now it worked. There's no errors. I put this back down here. And looks like it's still not. Oh, wait, it only has class container. Where's the class of header? Did I not save something? Oh, yeah, I forgot that I took it out. Uh, okay. There we go. So now we got the title on the left with header title. Yeah, we got the header toggle on the right. And you can see the max width thing is working. So yeah, and then on mobile, it goes to one column and two columns here. So I know it doesn't look pretty, but we're really just focusing on these kind of functional sort of bigger, broader styles first before we get into each item. So I'm pretty happy with how this is working. Yeah, looks pretty good. Um, let's see. So the next thing would be probably to start styling the header title. So obviously this is very different from what the design looks like, right? And I think what we need to do is actually set the background of the entire page. So let's see with it. So I'm clicking on the artboard itself. And then here's the fill. One do you want F two nine? And I should have all the colors, um, or what the, oh, and global colors here we go. Okay, so here's the colors. I think this is, yeah, dark background. And so right now I'm just going to do this and for the background of the body, I will probably put it in boilerplate. Yeah, let's do that. And then we will just hit default color of white, the dark text to. Okay. Let's see how that looks. Yay. So it's dark now. So let's style this title thing here. So we got the font of Inter, bold and 28. Let's see how this compares to this one here. This is 24, 28 and 24 for the H two. So, okay, let's add that. So this is going to be in H, the H one tag. So I'm going to put it in the global's typography sass file. So we'll add under the H one tag styles that I already set. Font size, and this is for desktop. So we'll add the mobile one right after. So include breakpoint, large font size, rim function 28. Now at the same time, let's check the mobile one. 24. So font size, rim 24. And we'll save. Oh, oh, I forgot the thing again. There we go. Okay. That's going to happen a lot. So I'll get more used to it. Oops. Oops. Here we go. Inspect. Is this the same as the design? I feel like it's a font the same. Maybe it's just bigger on here, because I'm zoomed or something like that. And the font is Inter. Let's see. Georgia. I sure it works. Yeah, it seems to be loading the font. So if I make this name something that doesn't exist, it will skip this and go to the next option, which is Georgia, which is a Sarah font, so you can sort of check and make sure it's actually working. But it seems to be loading. I think maybe it's just the zoom is a bit different from the design or something, because it's like, you know, I'm zoomed in quite a bit on the page. Yeah, that seems pretty similar, actually. Okay, cool. I sort of don't like that. It's like, um, right up to the edge like that, because when is this padding that I added? Okay, so how's the padding now? The padding goes away up here. This is because the max width is 1110, which I'm under right now. So the problem is I need to add padding when the viewports below 1110. So that's why. So I wonder if that means I need to change my breakpoint thing. Think about this. So that's in the layout SAS file. So I can do, I can do one of two things. I could have this padding no matter what viewport it is, or I can make the large breakpoint 1110, which maybe I should do at this point. Yeah, I think I need to do that, because if I had padding on desktop styles, it'll sort of cut into the width of the content. And you know, in the design file itself, this is like the whole the content is going all the way to the sides. So yeah, let's adjust this. So this is again, something that's very common. So let's change to 1110. And then I'll just zoom out on my browser so you can see this up styles better, provided by 1669.375 changes like this, 1109. All right, let's check out our website again. Okay, so good. So now you can see there's padding right when it gets to here. It's actually here, there's still a little bit of, I wonder if I get one pixel less than it'll make this 1109. Let's see if that helps. No, I want to go the other way, so 111. Good boy. Do you like the weird little things you kind of get hung up on? So 69.4375. So what I'm doing is I'm trying to trigger the desktop styles, which has no padding a little bit later, so that hopefully, I don't know what's going on here. I actually need to err on the side of like giving it a little bit more. So let's say 1115 69.6875. Okay, I'm probably spending too much time on this little thing, but it's kind of bugging me when it's like almost to the edge like that. Let's say 1150. Just really like go 71.875. 71.875. Now the desktop styles aren't going to hit till much later. You can see this. So this is still padding. There we go. Okay, that makes me feel a little bit better. Let's go back and fix the other one. So 1150. So this is going to be 1149. 71.8125. Okay, much better. Yeah, so it just kind of bothers me when it was going all the way to the edge like that. But now we can see it's happily going up here. I wonder if medium, maybe I want it to have two columns from medium to yeah, let's do that. Um, where was that in the header? So include break point large. So I want this actually start doing the flex boxing at tablet size, which is medium. There we go. So now it's going to stay too calm. It's just for a little bit longer. So this is just one of those things where you kind of make your best judgment based on how things sort of end up looking. All right, we're getting somewhere people. Okay, so we got the text set here. Now we want to control the spacing. So right now this is using the default browser spacing here. So it's adding about 16 pixels of margin on the bottom. And it looks like it's more space than what we have in design here. So let's see what design actually says. So hold on alt. Um, this is hard because gives you a font size, but is there like a line height thing? Because this only says three pixels of space, which seems like very little, but maybe that is what it is. Try to match the zoom on the design and the website. Okay, so let's see what three pixels of margin and bottom will look like. And I like testing things in the browser because, you know, you can just test things here. And that looks sort of actually it does look pretty close. Oh, does it tell you the line height? So it tells you the font size, but oh, weird, there's no maybe because it's like just going to be one line. I actually like to set the line height to 1.1. Did I do that here? I didn't. Because line height is sort of the space that each line of text takes up. So if I increase that, you know, you can see it kind of gets bigger and bigger like that. That's obviously too much. I sort of set a line height of 1.1 globally for h tags. And then that's sort of like a ratio. So it'll, as a font size changes, it'll, the line height will change with it. So that's one thing that I like to do. And globally. Okay, so I think the h1 margin bottom of three is fine. And I'm guessing it's probably going to be the same for mobile. So let's just set it here. margin bottom ram three. There we go. That looks close to the sign. Now we do want to also maybe add some spacing between the top of this and the body. It looks like if we compare these two looks like it's sort of centered vertically. So there's a bit more space up here, 49 pixels to the top from the toggle and 36 here. Yeah, because it's centered vertically. So to center vertically, we'll do the line items center. Obviously, this is not looking way should later on. But we're going to do, I want to add some space so it's not just flush to the top. So I think I'll add maybe space should be in the header element. Yeah, I think it should be in the head element. So then whatever's taller will have the space. So 36 pixels to the top. Yeah, I'll just do header at a margin top to that. Oh, let's check on mobile. 36. All right, the same makes it easy. So the header element, I want margin top of 36. Okay. So now there is some nice space here. And it looks like there is 46 pixels space under the header and to the cards. Actually, let's just take a quick look at different spacing here. 30. And this is going to change because of, you know, when it's responsive. So just give me four columns. Okay, so there's 46 pixels space vertically between sections. And then 24 between the title to here. And there's more here. Okay, so what I could do is add that 46 pixels of space to the container class, I think. See what mobile has. It's 40. 46. Let's just say 46 globally in the container class. So there's slightly different from a design, but I think it's probably going to look okay. And we can always tweak it to be more exact mass to design later on. So for margin, it's going to be zero top auto on the sides. And then 30 46, I believe. And I think this function should work in here. Should still be fine. So now you can see it's 46 in the container. All right, okay, cool. So yeah, a little more breathing room here. So let's do the total followers text now. So you can also click in the left sidebar. So it is interval and 14 pixels tall. And then the color is this sort of grayish blue color. So 14 pixels. So let's go to our index.html. And I think I just need to put this in maybe a span header subtitle. And I could have also called this header on a score on a score followers, but we're just going to do header subtitle. Font size is 14. And we need to set the font weight explicitly. The browser will automatically make your H tags bold, but we need to do this here. And I personally like using numbers for the font weights. And then we can do the color to what's that sort of grayish. Oh, this one, dark text one. Var, dark text one. There we go. It's getting a little closer to the design with every little thing we add. Okay, now let's look at the toggle and sort of get that all set up. So again, we're going to make the toggle look a bit different. We're going to go with the see where was it. Here we go. So this three position toggle here will be dark system preference. I might just say system and then the light on the right side. So obviously we need to do a few things when we look at what we have now, because right now it has the default radio button selected. And we need to hide them in some way and then add the markup and styles for the actual toggle, you know, with the toggle background and then the toggle button. So let's look at the examples that we have here and check out the styles that they had. So let's see what we got here. Let's just inspect the toggle here. Let's put this on the right side. Okay, so if we look here, here's the label. So we have this wrapper thing. It looks like the wrapper has the background color. Okay, and then the radio buttons, this is what we have, the input type radio, it sets you to display none. So that's probably what we're going to also have to do. And actually, let's look at Sarah's example here. Let's see how she treated the radio buttons. So she did something interesting. She said display in line block opacity set to zero. And my guess is because maybe, how should we do this maybe on the bottom? I'm trying to like display this stuff, but then not have it block my little camera thing. So yeah, she said it to display in line block margin, right negative to see what happens when we uncheck the opacity. Okay, that's interesting. Okay, you can see, you can actually see the radio button is like really big. And then let's see where's the toggle. Okay, so that's a toggle. This is the circle switch thing. Interesting. So I'm not sure why she set the height of the radio buttons to be the same size as the toggle. I'm sure there's a good reason for that. It's really interesting. And my guess is she didn't want to do display none because I think I'm not positive. I think that would sort of interfere with how screen meters or maybe if you're navigating the website through the keyboard, you want to be able to select, you know, if you if you're tabbing through stuff. So this lets you, oh, this is interesting. So I hit tab to highlight the toggle and then I'm using the right and the left arrow keys and up and down works to to navigate. So I wonder if this other example will actually do the same thing. So let's tab. Oh, yeah, this is not tabble. Interesting. Huh. Is it really not tabble at all? Oh, here we go. I can't navigate it. Oh, here we go. So you can do this, but let's do display none. Yeah, I think maybe. Yeah. So my guess is we don't want to do display none because if you have someone navigating the keyboard, you want them to still be able to, yeah, navigate, you know, if they can't click on the radio button itself. So I think for that reason, we're going to maybe go with Sarah's examples. So let's kind of open that up. Okay. So I think we did do very similar markup to what she had here. So again, the radio button styles, which are also right here and the right here, display none block margin right is negative two. I'm just kind of curious why she did, you know, where these styles are coming from. So I guess maybe that's to put them both on the same row. Let's look at the toggle and I'm actually going to maybe set opacity. I'm sorry, you can't see that here, but opacity set to 0.5. So we can sort of see the radio buttons through the things. So let's go back to the radio button. I guess since it was set to width of 50%. Oh, I think I'm guessing she did that so that you can navigate it a little bit easier. Let's maybe set the so this way. Yeah, I don't know why it makes a difference, but either way, being able to navigate it with the arrow keys is huge. So we're going to use her styles, I think. I don't know if I'm going to need to do display like the style that she did here. I'm sure there's a reason for that, but I think I'm just going to make sure I'm setting the opacity to zero instead of display none for the radio buttons. So let's just start adding the styles there. So this is for the toggle. So let's close these out, split the toggle to the right so we can see both the toggle and then the markup. Okay, so input type radio, we're going to set opacity, opacity to zero. And go to our site. I can see here that is indeed. It seems like it's hard for me to tab into that. So it's like if I just click on the page, click on tab. Let's reload this just to see how it looks like default. Okay, click on the page, click tab to tab through different controls. It's interesting. I think there's some kind of highlighting styles for this. It changes to red. Yeah, okay, so I can see here the focus on the toggle is has some additional styles to see. Where's the focus style set? There you go, focus see toggle switcher. So this is the sibling selector. So the focus pseudo pseudo class, I think it's called is this the focus pseudo selector sibling to toggle switcher. So is it the background that's being selected? Let's see, focus. Oh, it's the inputs. So we'll just kind of remember that to add a different style for the focus. If one of the radio buttons is focused with the keyboard, I'm guessing I need to build the background of the toggle switches now. Sorry, this is like really annoying. Let's try doing this. There we go. Now you should be able to see everything. Okay, still figuring things out people. Okay, so the toggle wrapper has the background styles, and the wrapper is what is containing everything, like the inputs, the labels, and then these spans for the background. So that is what I have. So maybe we'll start with this, setting these styles for that. So if we look at the design, background is going to be this linear gradient thing. And here in Figma tells you linear gradient is a way to export this style, the CSS, I wonder. So I feel like they do, there should be a way in Figma, I think, to get the actual CSS rules for like linear gradient. Yeah, let's see. Oh, here we go, export. I mean, I can obviously do it manually, but I would kind of like to see if Figma has that capability. So Figma export linear gradient CSS. Okay, this looks promising. Copy is CSS. So gradient copy as CSS. Okay, let's check your Figma handbook. Exporting CSS code. The code tab in the properties panel. Oh, this is exactly what I want. Okay, the code tab in the properties panel. So here it is. So the code tab in the properties panel. Where is that? Oh, inspect. Oh my gosh, this is amazing. I actually don't know if Adobe XD has this capability, but this is sweet. So linear gradient, yes, it has a degree, which is the angle of the gradient, and then it goes from 0% for the, I'm guessing blue color to this at 98. No, this is great. This is a huge time saver. I kind of can't believe that it's that easy. So this is going to be the toggle background. So the toggle background element, this will set the background. And we're going to replace this with the CSS variables. Let's turn off word wrap really quick. So the green color looks like toggle background and it's the first one, but it's fine. Far and then toggle background start. Okay, now let's see if that works. Let's check out our site. Nothing's there. Your toggle background is probably because there's no height or whatever. So let's find out what the height is. 24 pixels tall. So height 24 pixels. It's not working probably because it's not display. Let's see if there we go. So maybe I should set the height on the toggle wrapper and then sort of set the height to 100% for any of the elements inside that need that that way. I'm only having to set it once. So toggle wrapper, that is a div. So I don't need to set display block because display block by default. So I will set height to and the 24. Don't remember. Yeah, 24. Okay, so let's save that. And then oh yeah, I probably also want to set the background to height 100%. Don't remember if I need I might need to set a display block on that too. Let's see. Yeah, I need to display block. Okay, now we have a nice little gradient there. Now it has a rounded corners there. So maybe I'll put that on the toggle wrapper as well. And that was 12 pixels of border radius. So we'll do it on the wrapper. Border radius. Man, this function is a huge time saver. And I think I need to do overflow hidden so that it'll get it'll cut off the linear gradient according to the border radius that I just set. So here we go. Okay, something got cut off. I'm guessing because this toggle thing. Hmm, so I'm gonna be able to do this. So I think I need to move all the styles into the background. I think that's how Sarah had done it. So here we go. Yeah, we'll just set it here. Okay, there we go. And it's this width because of the text inside here, I'm guessing. Because the background to display block is taking the maximum amount of width from its parent, which is this. And the width of the toggle wrapper is getting its width from the content inside, which is, you know, the text here from the labels. So we'll figure that out in a second. Let's go back here. And yeah, so it looks like I'm just like copying Sarah's code, which I guess I kind of am. But at the same time, I'm sort of studying it and trying to understand the principles behind it. So I'm not just blindly, mindlessly copying and pasting code and just hoping it works, which I do do sometimes. But we're just studying existing code to try to understand, you know, how it works under the hood. I think that's a completely valid thing to do in the essence of being kind of honest here. What I might actually do is add a little comment with where I got the code here. So one, I think people have different approaches for how I do comments and people don't like comments at all. I personally would find things helpful like this if let's say something's not working, knowing that this is where some of this code came from will help in terms of being able to bug fix more quickly and efficiently. And secondly, it it's just sort of giving credit to where where this all came from. So it's just something that I do. I think it's always good to give credit whenever possible. Okay, see toggle wrapper. We need to figure out, I think how to position the labels. So again, the radio buttons are set to opacity zero. And then we have the background and the toggle switch. And then we got the labels. So how is this played out? Because I wonder if she's using flex box for this. Actually, I bet she's just using relying on inline block because if you have display block elements, each one will take up 100% of the width. So they sort of stack one under the other. But for display inline block or display inline elements, the browser will try to fit them next to each other to sort of have them fill all the horizontal space before going to the next line. So it's kind of the difference between, you know, words versus like paragraphs. So my guess is she did she's relying on inline block for that. Yeah, so that's probably why she set this to inline block. So oh, hold on a second. So this is a toggle parent. Then she has labels. And then the wrapper has the radio buttons in the background. So I think I need to change up my markup because I have this whole field set thing here, which is the parent. No, that is what I did. Okay, so that's okay. So I think I just need to sort of position the labels, you know, in the right places. So if we go back to our design, actually back to this design, which we're going to be, again, sort of copying, how will be the best way to position the labels? Because there's one underneath. I could use CSS grid to do that. It might be a little overkill, but maybe not. I'm not really sure. The other option I think would be to maybe, I guess you could use Flexbox. So you'd have the lions, the first label, the toggle and the second label on one row, and then third label, the middle label on its own row. But if you use CSS grid for this, I can sort of just position the labels where I want them. And I wonder if that might be better. So yeah, even though it might seem like a little bit of overkill, let's see CSS grid for this. Okay, so in our grid, we're going to have three columns. So label toggle, middle label, and then last label, then we'll have two rows. So let's start doing that. And the parent for that is going to be, I think this, the field set, the header toggle. Okay, so header toggle. Remember, we added this header underscore underscore toggle class to position the toggle, the whole toggle block in relation to the headline in the header. For these styles for positioning with toggle elements, I'm going to put them in the toggle SCSS file because it's not really related to the header layout, but it's only related to the toggle component layout itself. This is useful if we want to reuse the toggle on another page, we could just, you know, add the same markup again, and we know everything will be the same as on this page. So toggle, I'm going to say display grid. And we're doing this by default, because we want the toggle to look the same on mobile and desktop. So to split grid, and then grid template columns is going to be three columns. And I don't know if I would need to do one FR, but I can kind of see why Sarah did inline block because it's a little bit simpler in some cases, but let's just try grid. So repeat three, let's just do three one FR for now. And now with grid, we need to kind of position the elements explicitly. This might be a bit complicated. So it's going to be, this is the parent, and then the toggle wrapper. So label, dark, and then the light, and then system preference. So I might just like move these all the way up to the label together. And there we go. Okay, so we got label, label, label, toggle wrapper. I think I'm going to have to add classes to the labels, which I think I should be able to do. Or actually, I think I can do based on the four attribute. So let's change this to system. Okay, so toggle grid here. And then where's the label styles? Some of the label styles up here, because I want to be kind of closer to the grid styles just in the file. So label for four. How do we do the four selector? So assess label for selector. Let's check out Mozilla first. What is this called? It's like a pseudo selector attribute selector. It's like I can just do four equals and then whatever. Let's just see if that works. So ampersand because we want it to inherit label. So ampersand square brackets for equals, I don't even know if the quotes are necessary, but I've just seen it done that way. So dark. So let's see if this works. I just want to test to make sure this selector works. So okay, no errors, which is good. Check out the site. Oh, it is red. Yay. Okay. So four dark. And then we're going to have to do a separate one for each of the labels. So let's duplicate this twice with control D dark system and light. So now, and then we have toggle wrapper. Let's go back to design and check out the layout. Oh, we're back to the this design and check out the layout. So it's going to be first label is going to be in the first column. The toggle itself is going to be in the middle column and the last label will be in the last column. So this one will be in the first column. So I haven't done this in a while grid column. And this will be the first column. So one and it ends in two, which I think is the correct syntax. So let's just test that out. So we can do a select the parent grid element, click on the layout tab, and then select the grid inspector. So I do want to highlight the grid. Yay. Look at that. And then now if I select the dark, what tell me? I mean, I think that's right. Let's just put in all the styles. So the last the light labels in the last column. So grid column. So what was it? One, two, three. So it's from three to four. So three, two, four. And then the system is in the middle column. So from two to three, grid column, two to three, and we have to designate explicitly the row. So grid row. And that's going to be two to three row. So hopefully that'll work. And then the toggle is going to be grid column. And it's in the middle column again. So two to three. And then I'm just going to not designate the grid row right now and just see how it looks. Okay. So here we got our looks like things are positioning correctly. Okay, sweet. And the system is there. Now the toggle itself looks like it's not not sure what's going on there. Toggle wrapper. It's me. I do need to set the row. Let's test it in the browser grid row. So from two to three. Oh, no, no, that's from one to two. Okay. Now where the system label go. It's like it's under there too. Hmm. Okay, let's just copy this. And the toggle wrapper. Yes, toggle wrapper. And let's explicitly set the row. Oh, it is at the row for the system. And I think I maybe need to set the grid template rows explicitly. But let's just see what happens. Yeah, I might need to. Let's test it out here. So grid template rows. Pete to comma one for boo. It's not working. Let's make this just system. So why is a label? Let's toggle wrapper not up there. Good column two to three. That's right. And then grid row one to two. Maybe I need to set the height. So the toggle wrapper is 24 pixels tall. So maybe I need to explicitly set the height of the row. And 24 pixels, one if I repeat to 24 pixels. I don't know what's going on here. We'll just make it really big just to like be super obvious. Okay, so that's working. So if I make the rows really tall, it does look like the system is in the last row, which is good. I wonder if there's, oh, I bet there's some weird styles in the toggle wrapper. It's like, yeah, here we go. Yeah, they're taking up space. That's the problem. So see if I did display none. Yeah, it would fix the layout, but obviously I can't do display none. Yeah, that's why Sarah did it like this. So each input is still positioned relatively. It's interesting. Oh, maybe the toggle. Oh, there we go. Toggle background is position absolute. So I wonder if I can do that, but instead of making the background absolute, I wonder if it would work if the inputs were position absolute. But then I'd have to like probably hard to tab through them. So maybe that's why the background was set to position absolute. Okay, so we figured that part out. Let's figure out a way to fix this. So I set the background of position absolute with a hundred percent. Oh, nope, that's bad. There's an absolute. And then because it's position absolute, I need to sort of, I don't know what the word is, but like ground it to the parent by setting this, the parent to position relative. So if I do that, then the background should be limited to the parent, which is good. If I set the top to zero, see, there we go. Okay, so let's do this. So toggle background and we added that to toggle background. Okay, I didn't need that. And then the toggle wrapper, I think I need to set it to position relative. There we go. There we go. Now the inputs are still, you know, they're still there. Okay, that looks pretty good. So we also want to maybe center, do we want to center them, or do we want to maybe align the dark to the right, light to the left? It is already in the center of the system. So let's maybe do that. I think we can do this a couple ways. So if we do text line, right, that'll work. I think we can also do self, sorry, justify self, do the right, or to end. So that works too. I don't think it really matters. I might just do justify self end because reason grid stuff anyway. And then for the system, we'll do justify self. I think center should work. Nice. Cool. Okay, let's add a little space here. So we got 13, say I'll do 12 pixels of space. So what I think I'm going to do is add it to the gap property. So gap will be 12 pixels. So that'll add space on all sides of each cell. So let's do that. And this is something that you add to the grid parent. So go gap, RAM 12. All right, it's looking better and better every time. Now the last thing I want to do is add the toggle, like circle switch thing. So that one is looks like it's the same colors the background. So again, we'll look here, see how they did it. Is this it? Yes. Okay. So the slide, the slider thing. That's interesting. Okay, so they're styling this by saying if you, the third option is checked, then the left property will change. So this is just left zero by default. Okay, let's check out Sarah's. So the switcher looks like it is displayed. Okay, so it's just now split left to zero. Now we check this again. Is that right? This left is still zero. Hmm, how do they control that? Interesting. You have to reload, make something like got broken or something? I'm not really sure. So the switcher, top zero left zero, right 100%. Okay, but now still zero, still left zero. How does that even work? Let's see if we can look in her styles and see stuff that's there. So it's the switcher that we're looking for. Rapper switcher. Okay. Now, do any styles change? Oh, here, the checked. See, toggle switcher is right. Maybe the fire, so let's firefox, I think, has doesn't quite like update the inspector sometimes. So if I switch between tabs, there we go. So it's checked, right is your left 30%. And I'm guessing there's a transition element on the right and left properties to make it a more smooth thing. Yeah, so transition all. So we remove the transition, there'll be those kind of blink. It's actually not that bad, but it's a little bit nicer to have that. Okay, so that's what we need to do. So it'll be an absolutely positioned thing in here. So if we go back to our code, it's going to be this toggle button, that's where we're going to add the styles. So toggle button. Oops, that's not what I wanted. Absolute. And we'll just say left zero, right 100%. And let's go back to the design, because I think we probably need to explicitly set the height of this thing. Oops, stop. There we go. 18 by 18. And the height of this is 24. So, oh, there it is. And the background, we're going to set it to the toggle, I think, right? It should be the background color. I mean, this was a light mode color. Oh, yeah. Oh, okay. So it's light mode is still the color of the background, but the toggle background is this thing. Hmm. Yeah, I'm not sure if the toggle is the right word for that, because it's kind of like the toggle light. But anyway, we can just reuse this dark background variable. And just check again, what the height of the toggle is. 18. Okay, so we can kind of see it up there. So let's position this thing correctly. Toggle button. Maybe top zero. I guess left should be a little bit, you know, put to the side. It's about, I think it said three pixels. Okay. Left should be RAM three top, RAM three. Hopefully that will look correct. Oh, wow, look. Oh, nice. And I like this is a bit long because it's getting the width from the system label. So I think what I might do is make the system cell take over all the rows and then set the width of the toggle background a bit differently. Let's do that. So it's going to be the label for system. So the grid column, we want to go from one all the way to the end. So I think I can just go one end. Instead of having to set an actual number, that should work. Let's see, here we go system. Where's the label system? One, two, four. Maybe it's just like showing that because of this. Okay, so it is going all the way to the beginning of the row. So grid column one end. Oh, interesting. Why do end instead of four? It adds another thing there. Maybe one to four is actually better. That's kind of weird. I'm not sure why it's doing that. And then we want to maybe set the width of the thing. Oh, I think, I wonder if that's why Sarah had set this like making the radio buttons the same size of the toggle so that the width of the background will be the same. That's going to be my guess. So it's going to toggle and wrapper. So you can see we have the different radio buttons here and they have a margin. So maybe what happens if we get rid of the margin? Yeah, much, much smaller. So let's check the design and see how wide the background is. It is 48 pixels wide. So now this is about 50, which is actually pretty close. So I think I'm going to take that margin zero from the radio buttons. And then I sort of set the height explicitly on the background. So I think I don't need to set the height of the radio buttons to match the height that I want the background to be. Okay, so last thing we need to do, and we're almost done here, which is kind of nice. Let's do these styles for when the different options are selected. So the selected selector is the checked for the radio button. So for example, this first radio button is dark and then checked. So when it's checked, then you change the right and left values of the toggle little toggle button thing. So let's do that. So, um, here we go. So radio button. So if the dark label, I'm sorry, if the input radio dark, which is this one is selected or checked, then we'll change the styles for the button. So normally you would do something like, maybe I would add a thing here for dark checked. But I wonder if I can add a ceiling selector in the toggle button thing. I'm not sure if this is going to work. So let's just get this selector right. So the toggle button sibling, if the sibling selector for the toggle button is ID dark checked. So sibling selector, I guess we can just do the same thing dark checked. And then I'll say, well, actually dark is the default. So let's say light checked to make it go all the way to the other side. So we'll say, right, zero, left 100%. And let's see if that even works. So check the light. Um, okay, I think maybe these need to be on top of the background. So maybe the labels need to go after the problem here is like I'm clicking here, but nothing's happening, which makes me think that the background div, you can't click through. And I think there's a CSS property for that. Let's see, pointer events, none. Yeah. So I think if I set a pointer event, none, one to the background, which is the one full in your gradient. I think that will let us click through to the radio buttons. Ah, let's display none. That's just to like, and then opacity one. So I can click them. It looks like the light thing isn't working. The, uh, I think I need to do actually, let's leave this here. Let me check the the final CSS and check the checks. Okay, so toggle button light, toggle button ceiling light checked. It looks like that looks correct to me, I think. Yeah, I'm not sure why it's not working. Anyway, let's reload this silly toggle. I've selected a light radio button and it looks like there's no, the stars aren't coming through. So let me add maybe an explicit let's see toggle button. Let's go idea of light sibling toggle button. Oh, light checked, toggle button, um, left 100% right, zero or three pixels. Okay, so it looks like something did change. So let's see here. Where'd the button go? Okay, so good news is it's working. That is the buttons like way off over here. I'm not sure why. Maybe left auto. Okay, right, three pixels. I could do a calc. So I could do calc 100% minus 18 pixels. And then add three for the space. Oh boy, y'all is this tough. Okay, so it looks like it is moving. Yay. Okay, so I'm not sure what's going on here, but let's just copy this style. And maybe the ceiling selector needs to be first. Maybe order matters with the ceiling selector because the label actually comes first before the button. So I actually wonder if um, yeah, I'm gonna leave this here just to have it so we don't lose it, but I might actually move all the labels down after the toggle wrapper. And I'll kill two birds with one stone because this will make the radio buttons on top of the toggle wrapper because by default the index will look at the order of elements. And so elements that come later will be on top of elements that come before them unless you set the index explicitly. Oh wait, I know why the ceiling socket didn't work because I said it on the toggle button, which is here, but it's inside the toggle wrapper. Um, okay, so this probably won't really work. So let's save that. And then see if this works now. Oh, this makes me so happy. Look at that. Okay, so now the next thing we want to do is see if we can add that transition state and let's test it again in the browser. The toggle button will just say transition all 150 milliseconds ease in out, which is my favorite one. It's working. Okay, that looks pretty good. So we'll do that. And it's on the button itself. Nice. And then we need to do the positioning for the center one. So system, check, sibling, toggle button. Oh, wait a minute, system checked, which is this, and then sibling. Oh yeah, toggle button, which is there. I don't know why that other one didn't work. I think sibling, the order does matter. Okay, let's just fix this and then we'll see if there's a way we can add these styles under the button thing. So we're not having the manually type out toggle button, because that kind of goes against what them is supposed to be able to give you. So for the center one, I guess we'll just do, sorry, remind me again, this is just an absolute. Okay, so the center of is an absolute, you need to do the old left 50%. And then I guess I'll say right auto. And then you need to do a transform translate negative 50%. So what this does is the left 50% will put it to the left of the width of the parent. But because it starts measuring from the left side, it's going to be a little bit more to the right, because of the width, the 18 pixels that the button itself is. So we want to do we want to use translate, which will translate, it'll shift the element based on the width of itself. So we want to shift 50% or half of the width of itself back the other way. So that will make sure it is actually centered. So here we go. And there we go. Okay, I know why Sarah made the radio buttons. The height is because if I don't click in the exact right place, it's not going to go. So, you know, everything is there for a reason. So let's take away this opacity for a second. And so now I'm doing this so I can see the radio buttons. So height of 18 pixels. It should be the height of the track. So 24 and 24. So going back to the input radio. I'm 24 for the width and for the height. So now, yeah, so now see here. Why is this spacing like that though? Oh, maybe that's why she had margin of negative two. Oh my gosh. Where is it the switcher? Margin right of negative two. That's why, because I guess it must be a browser default or something. Yeah. So by default has a margin all the way around. So I'm going to go margin zero. Zero is the top. So negative two pixels zero zero. So now let's make sure the height, the width of this 69, it's supposed to be 48. So maybe make them a tiny bit narrower. And I said 24 pixels or if we go 20. So what was it supposed to be supposed to be 48. So it's 57 right now. It's 54. Okay, so with the 20 pixels for the radio buttons. So they're a little bit taller than they are wide. Oh yeah, and then the margin of zero. I give two pixels zero and negative two. Okay, now it's more clickable. Sweet. And I guess I can rem this to rem negative two. I don't know if it matters if it's just like so small, but might as well be consistent, right? Oh boy. Okay, now let's turn off this grid stuff here. Wow, looks pretty good. Okay, so I'm going to fix this thing here. Check out the mobile. So mobile is actually quite different, but we want this to always be 48 pixels wide, the toggle background. So I just need to maybe set this to. Yeah, so this should always be 48. So I think I'm going to go repeat. I shouldn't do the repeat, I think. So maybe one of our 48 pixels one of our that's a little bit narrow. It is right. You know, I might make this a little bit wider just because I think the three option toggle is making things a little bit iffy. So we'll do this. So going back up to the grid and replace this. And then of course, we'll do rem. Okay, let's go on desktop. Nice. I'm quite pleased with how this is turning out. Now let's fix the mobile style. So in mobile, hmm. So this thing, I think we want it to look a little differently. I'm guessing I probably want to have the same thing, but just sort of centered. Or maybe just left aligned. Maybe right aligned. We'll keep it on the right. And we need to add a bit of space there between them. Oh, there's a line there too. There's no line on desktop. So let's just align the toggle and we'll add go back and add the spacing. So this is going to be the toggle. And if we remember the header container, I think was using flex box for desktop. Yeah. And then not for mobile because it's too narrow, right? So like that. Mm. Margin left auto. I'm trying to think it's like, usually you float right, but then you don't want that because it collapses the start to stop taking up vertical space. So you don't actually want to do that. I shouldn't think I should have done CSS grid for the header thing because then I could just sort of place it. So I might need to change that. Because I think for flex box, I mean, I think I could let's just let's see how difficult it will be with flex box. So header display flex. And then to make this go in the second row, I think I'd have to make header title with 100%. Oh, yay. Oh, I think wrap flex wrap wrap. There we go. So now it allows you to wrap. If you don't turn on wrap, it'll just even if you set this to 100% width, which I did, it won't wrap the item. So let me go wrap. And then for this one, I think I would want to do I think if I do margin left auto, there we go. Yay. So I guess that wasn't too painful. So let's do header container, make that a flex wrap thing too. So header. And then we're going to go trying to remember if I want to use put all those things up there. Do I want just by content and line items to also be on mobile? I don't remember. And then title is going to be with the 100%, but only for mobile. Great point, medium with auto. Let's just see if that works for now. Oh, and then the toggle wrapper or sorry, the header toggle, header toggle. We're going to go margin left auto. I think I can keep that for desktop. I think it won't mess anything up. Okay, so cool. So we got the flex wrap property. Got this. So if we've got our mobile looks kind of like this. And then yeah, that looks pretty good, actually. Looks like it's not perfectly centered here with this label. Oh, maybe that's just from the line height. I mean, the difference is so small. It doesn't matter. So that's fine. Just make sure it's working. I think that's okay. I feel like from mobile, maybe it should just be centered, or maybe just like left so it's the same as the title. Yeah, I feel like it might look better if everything's just on the left for mobile. Yeah, let's let's do that. So let's not mess with the, you know, making it look on the, making it go on the right side. I think that's okay. I'm kind of deviating a bit from the design, but you know, you just got to make things look a little bit more balanced. And I changed things because we're adding the three option toggle. So we will just remove that. And we actually don't have any styles here, so I'm just going to delete this selector. Okay. Okay, I'm going to remove some of this space down there. So the gap, I think gap column, or if I do gap, I'm not even sure I'm doing this right. So the first gap property is the row gap, maybe 0.3. Whatever that ends up being two pixels, or no, the column gap is 12 pixels, row gap is 4.8 pixels. So we'll change that on the toggle. Okay, so that should add it in. There we go. Now it's a little bit spaced better. You just an awful lot of space on the bottom of that. What is the margin on that anyway? 5.6 and 10. This must be browser defaults for the field set. Yeah. So what if we go margin 0? Does that look any better? Yeah, looks like things are centered. Okay, so let's do that. And margin 0 to the toggle. And you know, actually, I would bet this text needs to be a lot smaller. So yeah, it is 14 pixels. That's for the label. Let's see that. I don't remember what we were really set to. It looks a little bit smaller, which is good. It will reduce the gap again. See, the cool thing about having the labels on the radio buttons is that clicking the label will also select the button in addition to choosing the button. So you have a lot of options here. I'm just working with the arrows. I think I need to add a focus state for that. So maybe this is okay for now. Let me reduce the column gap a little bit. 0.3 and 0.5. That would be eight pixels. Okay, I think that's better. And I think I also need to center these labels. Yeah, line self center. Okay, so this can go for the toggle labels to do both of those. And then we'll align this a bit differently. The system align self. We want to be start. There we go. So then this is going to be at the top. Looks pretty dang good. I'm pretty psyched about this. Okay, so the other thing we wanted to do was the when it's focused, right? So focus toggle switcher. So it's a ceiling to the toggle switcher. And that was this one. Um, so I'm guessing it was when the any of the inputs are selected. This will have that sort of extra outline there, which you can't see. Here we go. Have the extra outline. This is really a little bit for good measure. So you can see it's like Okay, so what can we do about ours? And this is again a little different from the design. Let's play around with some styles and just see what looks good. So the toggle button. So we do a border. I mean, I guess that looks fine. Let's see. Let's look at our colors and see if there's a color that might look good. Red, maybe the yellow. And of course, white always works. I might just do maybe you'll lighten this a little bit. Yeah. So toggle switcher is toggle switcher is at the end. So input type radio focus see toggle switcher. Let's try to figure out what the selector is. So I'm selecting light. So toggle input type radio selected. Oh, no, that's not it. Focus. Focus sibling toggle button order to pixel solid white. Oh, it is working. Okay, I guess that worked. So I'll add this to the toggle input thing. So toggle input. Let's just make sure this works right now. So we're using ampersand focus. Let's see if this works. Nice. Oh, yeah, look at that. So I'm using tab to an arrow keys to select that. So that's pretty awesome. So what I want to do is can I and I think this is what I mentioned before, I kind of forgot about. I don't think it'll work any other way. I was trying to see if I could put the styles in here and use like a different selector, but I think it won't work. I think I have to use this. So this is pretty good. We're in a good place with the top nav section. Coming up with class names is a deceptively tricky part of working with CSS. And if you're using SAS and following the BEM or block element modifier naming convention, it can be even more difficult. So in today's video, I thought I would show you how I come up with class names for this card component in the front end mentor challenge that we've been building and also how I structure all my styles in my SCSS files. So to start off, we have our design in Figma open here. And I'm going to before we start writing any code, make some notes out here in the margins, just showing you what I'm going to name each of the items in this card. Now, before we get into that, let's talk about what BEM actually is. So make some notes here with a text thing. So BEM stands for block element modifier. Let's move this over here so we can see better. So block element modifier. And what that means is when we look at the design, we're not writing styles for every single element in this design, you know, all in one place. What we do, especially with our SAS files and the SAS partials is we kind of break apart each of the design components into their own file. So we did this in the previous video, creating these styles for the header and the toggle. And they each had, you know, the styles in the header were in header.scss styles for the toggle were in the toggle.scss file. So you can see that SAS and BEM are a really good combination in terms of writing your styles in an organized and structured way. So if we look at the design, the block is kind of the name of the component that you're writing styles about. It's the sort of parent component or the parent element. So in our example here, we're writing styles for this card. So the block in this instance is going to be card. So I'm going to say block will be card in this instance. And then the element. And usually a block will have more than one element inside it. So the card is kind of the parent. And then the inside the card has child elements. So for example, we have, you know, the platform, the social media platform, and the username on the top, then we have like a follower count. And then we have at the bottom, it's like a change in the number of followers for today. So we have these sort of three elements here, we have the platform, then we have the count of followers, then the bottom, we have the change. So those are going to be the three main elements that we're going to write styles for. So the elements are going to be platform, and then also going to be the count, and then the change. And this is just a start, we're probably going to add some more elements later on as we go. And then the modifier is a different style or appearance. And that can be attributed to I think either the block or the element. So for example, if we look at the design, the cards have slightly different designs based on the social media platform. So you can see the Facebook card has this blue stripe up at the top, the Twitter has a slightly different blue color, Instagram has this orange looks like it's a gradient as well. And then YouTube is red. So we can see that the different styles for each platform can be written in a modifier class. So for example, modifier could be Facebook for the Facebook card, Twitter, et cetera, and et cetera. Now the other thing to keep in mind is when we're writing our styles, we're sort of combining these things together. And this is where you may have seen the whole underscore and hyphen thing. So when you're writing an element, you are going to start with the block name. So card, the card is going to have a class of card. So I'll write card. And then let's say we're writing styles for this top part, let's say maybe for the icon. So that could be another element. So just add this in our notes here icon. So the class for this Facebook icon could be card, underscore, underscore icon. And then if we look at the design, we can see that there's multiple kinds of icons based on the social media platform. So in this case, we can use a modifier. So for example, the card icon, dash, dash, Facebook would have Facebook specific styles. And then there might be some more generic styles, for example, maybe the width of the icon that we could put under card icon. And we kind of just go down the line here. So I might actually make some more elements as we kind of look in our design. So after the icon, there's going to be, you know, the username. So maybe that could be another element. So card, underscore, underscore, username. And then that's it for the sort of top part. Now the next section is for the follower count. So we'll say card, underscore, underscore, maybe count, just try to keep things as descriptive as possible. And then under there is this followers label. So we could say card, underscore, underscore label. Now if we're looking down at the bottom, it's this sort of change of number of followers, either up or down today. So we'll say card, underscore, underscore change. And if we look at the design, we can see that it's green, if it goes up and it's red, if it goes down. So this could be modifiers, since they're different styles of the change. So we can say card, underscore, underscore change, dash, dash, I guess up. And then it will also write some styles for dash, dash, down. So this is starting to make sense how we're kind of breaking things apart. And you might be wondering, you know, why are we even bothering writing these pretty long class names, you know, card icon Facebook? Like, why is that necessary? Why can't we just say, you know, Facebook or icon without having this card preface? One reason is that having these card prefixes for each of these class names, it kind of helps to ensure that all the class names are going to be unique, because if we're thinking about the website that has multiple pages and templates and styles, there might be another icon element somewhere else in design that's completely different from what we're working with here. So this ensures that these styles are writing for this card icon only applies to this element that has this sort of long class name. The second reason that we'll see a little bit later when we're starting to set up everything in our SES files, is that having this underscore with the prefix of card, it works really well with SaaS and the nesting feature of SaaS. And again, we'll see this a little bit later when we start actually writing our styles. But for now, let's kind of go over and see if there's any more classes we want to make. So I'm gonna just mainly focus on this big card right now, but we can see in the card below it that a lot of the elements are the same. So for example, the social media icon looks pretty much the same size that we have in the big card. The number you can see is actually different, like it looks like it's the same font and color, but it's a much smaller size. And then the change looks like it's pretty much the same color and size as we have on top. So for the number, since we have kind of a bigger number up top and a smaller number on the bottom, we could maybe make that also a different modifier for the count. So let's see here. So card count dash dash small. And if we wanted to be really sort of detailed about this, we could actually make separate ones for the big modifier and then the small modifier. And then we would have the styles that are shared by both big and small, like the font family and the color and probably the font weight in the card count element selector. So I think that's pretty good for now. We'll probably be adding more styles to this as we as we get along. But for now, I'm going to start writing kind of just building out the structure of our SAS styles. So if we go to our VS code, I did make a car.scss file at the beginning. In the last video, when I set things up, this style role wasn't really anything. It was just for us to check and make sure that it worked. So again, the card is going to be the block. So let's start adding styles for the elements. So under card, we got card icon card icon modifier Facebook. And then there'll be a different modifier for each of the social media platforms. So let's start with that. So card underscore underscore icon. Now in SAS, we have nesting, which is a feature that native CSS doesn't have. But this is what we can use the ampersand for. So the ampersand symbol means it'll reference the parent selector, which in this case is the card class. So the ampersand will be card and then underscore underscore icon. And then we can add the modifier class with another ampersand. So this ampersand stands for card underscore underscore icon. Because that's the parent selector. And then we'll add hyphen hyphen Facebook. And we can do the same thing for Twitter, Instagram and YouTube. So we'll just add those out here. Instagram. And YouTube. Okay, so let's go back to the design. So the next thing we want to do is card underscore underscore username. So kind of the same way ampersand underscore underscore username. And we're really just kind of making our way down the design here. So then the next one is card count with a big and small modifier. So count and then in count, it'll have a modifier of big and small. And I think that's it for the count. Then after count, we got the car label, which is that followers text. So underscore underscore label. And then at the bottom is that change number. So it's changed with a modifier of up and down. underscore underscore change. And then in change, we'll have dash dash up and dash dash down. Okay, so this is pretty much all these styles that we're going, all the class names rather that we're going to be using for this card element. And again, we might be adding some more styles, because you know, we can see that the cars are in a grid. So we'll probably use either flexbox or grid to make sure that there are four columns on desktop. And then of course, when you get to mobile, it's stuck to one column. So we do need some additional styles for that. But we like make some more generic class names to control the layout. Because I think I did add, yeah, so I have a layout sas file here. So this has a container styles right now, but we could add some more classes for you know, a grid, because we know that both of these are four columns on desktop. So we can kind of use the same classes for the layouts for these cards. But in terms of the card specific styles, I think these should cover most of the things we're looking for. So going back to the card sas file. And this is kind of the approach that I use when I'm, you know, building a website for work or whatever, I just try to write all the different class names that I think I'm going to be using and all the different selectors. And then I kind of fill them in as I build things out. So now the next thing is we need to write the HTML markup for these cards. So I'm going to split this to the right side. So we can have HTML on the left, and then the styles on the right. So let's start adding markup for the cards. Then minimize the header here so we don't really need this. So the card content's going to go in the main tag. And I think, yeah, I added a section tag. So I'm probably going to have each of these card grids in its own section tag. So this will be one section tag. And then the bottom grid along with this overview today is going to be another section tag. But for now, I'll just say section. And we want to add a class of container. And that's again, to limit the max width of the content to 1110 pixels wide and center it. So basically, every section, we're going to need to add the class container to that. And this is similar to what we did with the header in the last video. So in this section, you know, we might also add the classes for the grid for that four column look, but we'll worry about that a little bit later on. Right now I'm really just focused on writing the markup and getting the styles working for one individual card, and then worry about fitting them into the grid layout afterwards. So it's another thing I try to do. I try to not do everything all at once, like try to come up with all the finished markup and styles. But I kind of break them down into steps. So right now I'm doing the card, you'll worry about doing the layout later. You could of course do this in whatever order you want. You could maybe create a multiple card elements and then, you know, make make the grid layout work from there. But when I have a group of multiple items, I usually start with just one, because if I create multiple divs for the cards and then things change, because they probably will change because, you know, you're never going to get things perfect the first time around, then you're going to have to go back and change the markup for all the three other card elements that you made. So I just start from one. I think it's just easier. So here's the container. Now, let's make our first div for the card. So I'll say dot card. This is using the image shortcut here. It will just generate a div with a class of card. Now let's go back to our card sass file, and let's see. So at the beginning, I'm going to handle the blue bar at the top, probably in the card element itself. Maybe I'll make a border, a top of 10 pixels or whatever. So what I might do is start adding the, you know, I might need to actually add some modifiers for the social media platform in the card element itself. So it'll be similar to the icon. But this is going to control the color of that bar at the top. So for card, let's look and check out what these styles are here. So in Figma, we're just going to click in here and keep kind of keep clicking till we see that the element we want is selected. Okay, so I kind of want, I'm trying to get this background color here. I'm not sure if I have it. Selection colors looks like it's this sort of a purpley dark blue gray thing. Is that right? 252 B42? Let's just change it to red, just to see if it changes. Ooh. Okay, maybe not. Oh, I would suck in the mask here, so I don't want that. Um, sorry. Let's see. I'm not super experienced with Figma, so this is kind of weird. So it's looking the mask again. I wonder if I accidentally changed something. I think it's this color here. So 8C9, 8C6. So that's going to be the card background color. So let's open the color's sass file here. It looks like maybe dark text one. Is that scene right? I think the text will not be this actual text color. It's probably this dark card color here. So we'll copy that variable. And then in our card sass file, we'll say background var dark card. I might as well say color is going to be the dark text one. Okay, now I'll start adding some markup to the card so we can see we can start building things out. So the next step is the icon and the username. And I think I might need to maybe wrap them in an element. So you might have to create another element here. If I could just say card top perhaps. So go card top. I don't know if that's a great way of doing it, but yeah, we'll just we'll just do that. Just see what I did here. Maybe we'll make it a little bit more descriptive because it's like what is this? It's the Facebook and the username. So like maybe the social media platform or whatever. Did I not write this in my notes? I guess I didn't do that. So we'll add card platform. And that's going to be the top element there with the icon in the username. So platform. And then we'll add the markup to match that. So card underscore underscore platform. And then in card platform is going to contain the icon and the username. So card icon. And then card username. There we go. Then move on to the next section. So it's the follower count. So card underscore underscore count. So card underscore underscore count. And in the count, it's going to have the number and then the followers label. So I think I need to put the card label inside the card count card label. And then after that is the change. And I think I can just do card change for everything card change. Okay, so now we kind of have our HTML elements set. So let's move the actual text in there. So card platform contains the icon and then the username. So username is here. And then the count is 1987. I think I'll just put it straight up in the card count element. And the card label is that followers text. And the card change is 12 today. So we'll do that. Okay, so this is the markup for our first card. Now we do need to add card icon thing. So I'm hoping that they've given us either PNGs or SVGs for this. I select the icon itself. Yeah, looks like it's this could be an SVG. Can I export this? Actually, let's see if they included that in the front of mentor images anyway. Well, that's a design. Oh, here you go. Images. Okay, icon Facebook. Okay, so we can use those. So in the card icon, I guess I'll add an image tag. And we'll say images icon Facebook SVG. And then in the alt text will be Facebook. Okay, so why don't we check out our website and see what it looks like. Oh, and in this video, we're going to use set of Firefox, which I have been using. We're going to use this other browser called polypane. And this looks different, as you might notice. And the really cool thing about polypane is that you can load multiple devices in the same view. So it helps a lot with when you're debugging responsive websites. And it's cool because it's like synced. So for example, if I click on the toggle here on desktop, you can see it's also changing on the mobile and vice versa. So everything synced it. Also, you know, as we get more content on the page, you can scroll down on mobile, and then it'll also scroll and match it the position the scroll position on desktop and vice versa. So, you know, I still like using Firefox, but I think when you're comparing the mobile and desktop views when you're developing a website, it can be really helpful to have something like this. You can see both views. So let's see where we are reload this. Okay, so you can see the card here. So it looks like the background color is correct with what we have in the design. Obviously, we need to style a lot of stuff, but the Facebook icon is showing up, which is great. So the next thing I do is I usually try to get the layout fixed first inside the element. And then I'll worry about, you know, the text colors and font sizes and stuff like that. So if we look at the design for the card, you can see all the content in the card is centered. And then it's kind of spaced out, it seems pretty evenly. Like if we click in here, it looks like there's 28 pixels of space on top and 25 on the bottom. I make that the same just for, you know, make things a bit more consistent and make it maybe 25 on both sides. Let's look at what we've got in our browser. So obviously, this card's going all the way across because it's a block element. So if we do this, and polypane is written in, I believe the Chrome browser engine. So this is the similar DevTools to what Chrome has. Here's card. Oh, I made a mistake here. Color. I forgot the var function. There we go. Okay. So what kind of is going all the way across? I think I might just add some temporary styles to limit it. So let's say card with, you know, to see what we have in the design. 255 pixels. So RAM 255. And this is a temporary style. So I'll just add that so I don't have to remove it later on. Okay, so now we can see it's a little bit better. Let me zoom in a little bit. You can see that a little bit better. Okay, so we got the card, and we want to make things centered and then evenly space it out. So let's maybe add a text align of center and see if that does what we want. So that's pretty good. So let's try that for now. So text align center. And then yeah, so that's we're getting there. And maybe we'll add some padding. So let's see what the padding inside the card is 32. 24. So maybe let's do 25 as the card padding. Adding RAM 25. Let's do it all the way around. Okay, that's getting there. Now things are centered but obviously this does not look super close to to the design. Problem is I want the card platform to have the icon on one side and then the username on the other side and then card count and card change. And then we got the same thing with card count where it's one on the left and one on the right. Oh no, I'm sorry with the follower. I think it's it's the followers text is under the 1987. So let's do card platform right now. So again, look at the design. The icon is on one side and the username is on the other side. So let's see, we could do something where the icon maybe we could say display in line block. And then card username is also display in line block. So that works to put them next to each other. However, we want to vertically center it so right now you can see the text is kind of on the bottom. So I think I might need to use flex box instead of in line block. Let's try that. So we'll make card platform display flex. That's pretty good. And then justify content center and the line item center. It's like it looks like a text is still a little bit to the bottom. I wonder why that is looks like there is part icon is 20 by 24. The image looks like it's not going down all the way. So I don't know if that's an SVG thing or I don't know the images like that. I'm not sure why it's adding that extra space at the bottom. I wonder if I could just make the image the card icon. Maybe I'll try that. So let's add the flex styles from card platform. And we'll try to fix the alignment on that image thing. So card platform, display flex, and we want this to be the same for mobile and desktop. So we don't need to media query here. Okay. So now let's go back to our markup and maybe instead of a div class card icon, we'll get rid of the div, move a class to the image element itself. So remove that. And then remove that. So the image itself. And this might look weird. I'm not sure if this is going to work. Oh, looks good. So now things are centered. And we'll add a little bit of space, I think. Let's zoom in here. Space. So there is eight pixels space to the left of the username to the right of the icon. So I'm going to say margin right on the icon of eight. Okay, looks pretty good. Now we can just style this text here, of course. If we go here, let's see. Looks like this is bold. So let's check out the styles for the text. Oh, yeah, here we go. Text. It's enter, which is the font reasoning everywhere, I believe. Bold and 12 pixels. So right now, what do we have? Card username doesn't have any styles, explicitly set in 16 pixels. I think they set the default size is like one rem, which is 16 pixels. So a card username needs to be font size 12 pixels converted to rem and then font weight is bold. There we go. That looks pretty good. Okay, now let's look at the spacing. I think we said 25 right about 28 and 25 and 28. I guess we'll try to stick to the design. So 28 on top. So we want to add 20 pixels of margin bottom to card platform. Margin bottom, rem 28. There we go. All right, now let's do the followers section. So if you look at the design here, this is obviously much bigger than the default 16 pixels. It is inter bold and 56. And the color is white. So let's do that. And that is the card count. There we go. So card count. Oh, yeah, then we have the big and small version. So the color is going to be the same. I guess light background is white far, light background. And then the big modifier is going to be font size rem 56. And then I want to make sure that I did add that modifier in my markup. So what I have to do here because I have some styles for card count, I need to keep that card count class and add to that and say big. Okay, let's see how that looks. Okay, so obviously followers is too big, but we can fix that later. And this needs to be bold. I'm guessing to font wait, bold. Okay, I think that's better. I see this is a little bit big. I'm zoomed in. Yeah, I guess that does seem right. Now let's fix this followers text styles inter regular 12. And it's that gray color again. And then the font size is 12. It is all caps, but I'm going to do that in the CSS versus the actual text. So font size 12, I think I said, then font wait is going to be normal. And then I'm going to add a text transform. And I like making things uppercase in CSS versus doing uppercase in the HTML because if things change later on, and they want to not be all uppercase, you're gonna have to go back and change all the instances of the uppercase to regular case. And I'd rather just be able to remove the text transform if they ever want to not have uppercase. Okay, so we're getting there. Maybe some letter spacing going on too. This seems pretty. Oh yeah, here we go. Five pixels of letter spacing. See, I got to say, I have used Adobe XD most of the time when I'm working with design files, just because that's what the designs would give to me. This is the first time I'm using Figma and I do like a lot of the things they give you. It's a little bit more intuitive in terms of getting the styles out. I could be wrong, but I don't remember seeing some of these. It's not an export panel. You are just a little bit different. And I love how Figma gives you the actual CSS for stuff. I don't think I could be wrong. I don't think I ever saw that in XD unless it's just a feature that I never found out about. But another kind of pain point with XD when I was using it is the letter spacing thing, because they, if I can even get into here, but like it's telling you here the letter spacing is five pixels. I'm not sure what units they were using in Adobe XD, but it was like, I think they're using maybe an illustrator thing, which doesn't really help for developers because I would just basically have to eyeball it. And again, maybe there's some kind of conversion or whatever, but it was a different number, different, like there was no unit for letter spacing. So I'm really liking Figma. All right, enough chatter. Okay, so the number looks good. The follower's text looks pretty good. Let's check the spacing right now. So I think the line height here maybe should be one. That's a bit closer. Let's see what it says here. Nine pixels. Oh, this is a letter spacing of negative two pixels, so let's add that in. Count. And negative two. And I'll set the line height to one. And then for margin bottom, I think it was eight, I think I said. Let's check that nine. Okay, is this working? Let's see. Oh, I need to add the margin to the top of the label because it's inside the card count. Some margin top. There we go. It seems like a lot because there's already space from I guess the line height. I think maybe I'm having issues because I put the label inside the card count because I was trying to make things a bit easier on myself. I usually might need to add another selector here for the number. Yeah, so let's do this. Let's make this. Oops. Let's move this here. So card count is just encapsulating 1987 card labels here and I'll put both of those in a new parent element and we'll call this card underscore underscore followers. And I'll move both of those in there. Okay, then we'll add some of the styles from the count to probably followers. So followers and I personally like using margin bottom versus margin top just because I try to keep things consistent with all my elements and only add space between elements by adding a margin bottom to the first element before. And that's just a personal preference. Okay, let's see how that looks. Okay, not bad, I think. So yeah, we got the margin bottom there. I feel like there's still a little space even though I said the line height to one. So I think I might just need to maybe reduce this some sort of nine pixels. Four pixels, see how the design looks. So things aren't always perfect in terms of what is in the design versus what ends up being in the browser. So it's that much space here. That seems okay. So we'll change margin bottom to four pixels. Okay, seems pretty good. Is this centered? I can't tell. Seems centered. Okay, I think it's centered. And then let's add space under the followers and before the change. So followers is 25. So add that space to the followers selector. So margin bottom, RAM 25, I think is what it was. Okay, looking pretty good. And then let's add the 12 today styles. So in the design, it is green. And that's going to be for the up modifier. But let's add the styles that are shared with both the up and the down styles. So there are different colors, but everything else is the same. So let's check out the font styles for this. It's interval 12. Okay, let's do that. So for the change, font size is 12. And then font weight is bold. And then we'll add the colors here as well. And what color is lime green, I think? Yeah, it must be it. So color far lime green. And since we're hearing might as well add it for bright red to for the down. Oops, far bright red. And why is this not styles aren't coming through? Card change. Oh, I didn't add the modifier thing. The card underscore underscore card, underscore change dash dash up. There we go. Now, I know this might seem really like extra to have these two classes here. What you could also do if you don't want to do that is do something like this where you only include the modifier class in your markup. But then for both up and down, you could say extend a card, underscore underscore change styles. So let's save that. And what extent does it will just copy the styles that are in whatever selector you say. So you can see here. Oh, did I save the HTML? No, I didn't. And if I did things right, things will still show up. Oh, there we go. So card change up. And now we see that it is using the styles. The problem with this is that, and this is kind of where people just had different opinions on things. But a lot of people don't recommend using the extend rule in SAS because you end up adding these styles to three different selectors. You're adding it to card change, then you're adding it to card change up and card change down versus if we went back to what we had before, card change, get rid of this, save both of these things. Then what you have is it looks the same. But you can see the styles are sort of separated out. So it's like card change up. It only has the lime green color. And then the other styles that are shared with both the up and down styles are in card change. And you're not having multiple selectors for a given set of rules. So it just kind of helps to keep your CSS a little bit more compact. Obviously, you know, the trade off is that now instead of one class, you have two classes in your HTML. And some people, you know, they don't like doing that. But I think I used to use extend a lot because it was handy for this very purpose. But I think you seem to be careful when you're using it. I'm kind of nowadays just using these multiple classes in my HTML, even though it seems kind of lengthy, just because I would rather have my CSS be a bit more structured and not, you know, unnecessarily share styles between selectors. Of course, this is my own preference. If you want to use extend, you know, you're more than welcome to just if you do make sure you're not using it with super, super nested selectors. And that's one of the guidelines when you're using SAS actually is that I think they recommend not going more than like three layers in. So card is the first layer. And then these elements platform is a second layer. And then icon the second layer and then the modifier in the element is the third layer. So you don't want to make too many nested things because that just makes your selectors and your final CSS really long, which can make your file bigger. And it can make things a little bit more confusing when you have a lot of different styles and a lot of different selectors. So we're actually doing pretty good here. I think for this change, we do need to add that arrow icon that we see here. So it's obviously an up arrow for the up and then down arrow for the red. And let's see if they yep, they gave us an icon up and an icon down SVG, which is interesting. Let's see if the colors included in here. Oh yeah, it is. That's probably why they did that down icons there. Another approach you could do if you're trying to save on SVGs is just to have this one icon up and then set the fill based on the CSS class. And then you can use a transform to rotate it 180 degrees for the other class. But obviously this works just as well. And then that way we don't need to necessarily create additional CSS styles for the up and down versions. So I think what we're gonna do is in here it's sort of like what we did with the icon up at the top. So we had an image with the icon that we had the username. So we might need to do the same thing and add a few more selectors here. So I'm gonna say image source. Let's see if I can get away without having to create a new class for this images. Oops. Images. And then icon up. Shoot. There we go. No. So I'm gonna use this new keyword that I got. The place is a bit different from what I was using before. Alt up arrow. Okay. So I think what's going to happen is I'm going to probably have to create another div to enclose the thing the 12 today, similar to what we did with the follower count just to make things align a little bit more neatly vertically. So yeah, you can see the icon is at the bottom. And you know, I could do something like, you know, position, absolute top and then set like a very specific pixel width and I have to set the parent to position relative so it doesn't fly up the page. So you can kind of center it that way. But then of course you need to when it's vision absolute doesn't take up space on this on the page. So we'd have to say something like, Oh man, I don't even know if it's gonna work. But display inline block and then set padding left to something. I'm just using pixels just for the ease of it. And then you would position the icon left zero pixels, you know, and then just kind of eyeball it to center it. But I feel like that's kind of a lot. I try to avoid using position absolute unless I really have to. I feel like you could just as easily fix this by using, you know, flexbox, which is, I think we did here with the the Facebook icon. And the only difference we'd have to do is create another div here for the 12 today content. So we'll create a new selector card underscore underscore number for lack of a better word. There we go. 12 today. So now we can set card change to display flex. And I usually try to put my flex box and or see as good properties first. But you can do whatever order makes sense for you. Okay, now this is a problem because having an image as a flexbox child will make it stretch automatically, unless you explicitly set a line items, I think. So let's see if that works. Align items center. There we go. If you don't explicitly set a line item, I think it'll say like stretch as it Yeah, so you can see that. So we just set a line items to center and everything's happy. Let's see if it actually tell us let's look. So I uncheck this. So this rule won't take place. Let's check the computed and see. Oh, yeah, all items is normal, which I'm assuming is stretch based on what we just saw here. So we'll do that. Justify content center. Because by default, just by content will be at the beginning, flex start. So we don't want that. So center. So those styles to card change as well. And again, more sort of grouping the flexbox style rules together. Okay, looks pretty good. I think we need to add a little space between the arrow and the number. Yeah, so let's double check that. Four pixels. So what I want to do is maybe add a margin right to the number. So under card change, underscore underscore number. And you'll notice that in my style, I sort of try to follow the order of the elements in the HTML markup. So because card change comes first, it's the parent to card number, and putting card number after the card change set of rules. So what we're gonna do, oh, yeah, add space, some margin, right. And that was eight, I think I can't remember. Let's see. Four. Wow, totally off. Man, I'm so glad I added this REM function to convert from pixels to REM, REMs for me because if any of you watched my previous song, previous videos, I would always have to pull out my calculator every time. And it was kind of a pain. Okay, that margin rights not working. And I think it's because I have an image tag, which is by default display in line, I think. So I need to set it to display block in order for the margin to happen. Oh, that didn't work at all. Oh, you know why? It's because I added it to card change. No added to card number. Yeah. So I wanted to add it to the image tag here. So I could create another class here, card, you know, card on a throw on a score arrow or whatever. But sometimes I sort of balance out creating, you know, the need to create new classes and new selectors with using an element selector, especially for images. So this image tags in the card change div. So if I add image tag there, there we go, save that. That's I know that this style rules only going to affect image tags that are inside the card change div. So you can see again that using BEM really helps to avoid, you know, conflicts in naming, because everything is a very unique, a unique name. There we go. That space looks a lot better. This car's looking pretty good. See what else we need to do here. So we got all the main elements here. I got the padding set. I think we need to do a little border radius here. You can see the corners are slightly rounded. Then we need to take care of the bar. Oh, hello. Now let's see where it tells you about the border. It's mixed. Okay, that's how do you. Oh gosh. And we'll tell you the border radius rectangle. Oh, looks like it's five pixels corner radius. So they call it corner radius. So corner radius of five, which is border radius in CSS speak of the card. So go all the way back up to the card selector and go border radius. Oh gosh, can't type at all. Rem five. And it's I think the same all the way around. Okay, so we can it's kind of hard to see this, but you can see that it is a little bit rounded. Now we want to do the stripe. So let's see what tall this is. Maybe this is it. Here we go. Four pixels tall. So let's just try and see if I can add that through border, border top five pixels. So around five solid. And then we want that Facebook color. So Facebook. Okay, let's see if this works. Oh wait, maybe dash dash Facebook. Oh, come on. There we go. Now we can see everything. All right, let's check our browser. Okay, that didn't do anything. Really? Let's try reloading. Hello. Did I add it to the right place in card? Oh, card dash dash Facebook. I didn't add the modifier. Here we go. Some card Facebook. All right, now it should show up. Oh, there we go. It looks pretty good. Yeah, it looks very close to the design. I'm pretty happy with that. Okay, so now let's create the other cards. And the good thing is now that we know that this is correct, we can just copy and paste these selectors here. So in container is the card element. So I'm going to go like this. And is that right? Yeah, so one, two, three. So when I save this, and you know, I might honestly add some space just to be able to parse it a little bit better myself. So now we should have four Facebook cards. Let's remove the space here from the change element. Just so we know what belongs to what card. Okay, so now we should have four Facebook cards on our website. Okay, and we do. Now, of course, we didn't add the grid stuff. You can see it. They're trying to sync the scroll. It's a little bit buggy. Anywho, let me think about this. So yeah, let's just let's do the grid layout now. So obviously, we mentioned before, this is going to be four columns. I guess we can add the space between them 30 pixels. I would usually use maybe grid for this, but I think you can also use flexbox. I think the main advantage grid is head over flexbox, among other things is the gap property. But I think flexbox is slowly going to get the gap property. Let's see, let's see if that's available. Can I use calm? Oh, so gap actually is using flexbox, unless you're using IE 11, but if you're using IE 11, you're gonna have way bigger problems in flexbox gap. So let's just see how this looks with flexbox just because we did use grid for I think the header stuff. So we're going to add the grid stuff in the parent section tag, which is the container. So I guess I'll have to add another class to make this a flex parent. And because, you know, there's two sets of grid, so the top cars and the bottom cars, and they're all using the same four column layout, I want to reuse that class. So let's add a new class flex dash parent. And then in the layout SAS file, we'll add another set of rules here for flex parent. And it's stacked to one common mobile. So the display flex needs to be in our breakpoint mix in medium. Display flex. Now see what we got. Alright, so now they're all in the same line, which is good. Let's kind of focus on the desktop version for now. And we want to add space. So we'll say gap of rem 30. Now we have a nice cap now. Let's see if it really goes if they only add the gap space to the between the items. Sweet. Oh, it's interesting. Chrome doesn't have a flexbox inspector. I guess we don't really need it since we can obviously see it's working. Cool. And this will add a gap, I think, between rows as well. Now let's see how it looks on mobile. Oh, not great. So this needs to be centered, I'm assuming. Yes, you can see here. So how do I want to center these? I could center them by saying card margin auto. But then to add space, I would have to say like margin zero auto 30 pixels auto. But then that would, this would need to be only for small and then it wouldn't happen on desktop. So I have to cancel it out on desktop, which is a little bit annoying. So I wonder if it might be better to use flexbox for mobile also, but have it be wrapping. Yeah, maybe I'll do that. Okay, let's go back to here. I need to have flex parent because that's a little bit too generic because, you know, I'm using flexbox in multiple places. Let's say cards. Oh, gosh. Card grid. This is one of those things where, you know, I don't know what the right name for this is card grid. I think what I would sometimes do in the past is because everything's in the card styles here, I would do something like card underscore underscore grid and then add some more styles here, which works with the BEM stuff works with the BEM approach that we've been doing. But then kind of goes against my my personal approach of having the order in the SAS file follow the order in the markup. So it's kind of weird to have the parent be a child, the parent in the HTML be a child in here. I could also just break another rule. And instead of having this be the card be the only block, I would add cards and then make this class name cards. So there's a lot of different approaches. I mean, honestly, you know, what is what's the easiest to understand? I'm just kind of a pick an approach and try to be consistent with that. I might just do cards in the HTML class in the HTML. Yeah, class name and then add just another selector here just for cards. So then I'm not polluting the layout styles with something that's specific to the card grid. So, you know, you can kind of see it's a little bit of an exact science. So we wanted to move the display flex to mobile also. And then flex wrap we want to allow it to wrap. And then I guess we'll move the gap property up to mobile too. We'll probably need some more styles in here. So I'm just leaving the the breakpoint there. What's the next thing we want to do? If we're using cards to use flex box, what we could do is set flex direction to column for mobile. And then for medium and up, we'll say flex direction is row. So that way it'll stack reading flex box, actually stack the items. So now you can see it's stacking nicely. And we have the four columns on desktop. Now, obviously, this needs to be centered. I think let's go back to design. Here we go, mobile. So it looks like the mobile cards are going all the way across. They're wider than what we have on desktop here. So this is 326. And this is 255. So I guess what we could do is have the cards be 100% width on mobile. And then maybe on tablet, have it be two columns, and then on desktop before columns, would that work? Let's see. So I think I had this temporary thing here. So I think I might need to cap the max width of the cards. Well, let's just see what happens when we remove this. I think things might be strangely. Yeah, this is a bit weird. I need to, I think, set the card width on desktop to 25%, 25%. So I think what I should do to do that is card and set the flex property to one. So flex of one means each flex box child, which is each card has the same ratio of dividing up the horizontal width with each other. So that means since there's four cards, they'll each get 25% of the total width. Now it's going all the way across, which is good. So I think maybe that can just fix our problem for us. But we'll have to test on tablet and see how that looks. Okay, let's just see what happens. Flex of one. I'm not sure what it's going to look like on mobile, but we'll find out. Okay, desktop looks pretty good. Mobile also looks pretty good. So let's add a new layout for tablet. How do I do this? That's interesting. Create three pains from website breakpoints. Let's see what happens when I click that. Oh, below 640. And then yams of 40, which is sort of talent and then the desktop. That's pretty cool. I think it must have read my styles. Yeah, that's pretty interesting. Okay, this is 480 width, which I guess would be a very big phone. I mean, I guess that's okay. What you could do is set a max width on the card and then sort of center it, but is everything else in the old design centered? No, it is left aligned. So it might look weird if the cards are centered, but then the text is like aligned to the left. And this is pretty wide for a phone, I think. Yeah, maybe we'll change this manually to the 11. Change this to a tablet size. I'm not really familiar with tablets, but I guess this one seems okay. Oh boy. Oh, yeah, that's that's different. Happens with the iPad 810. Yeah, still doing the stretchy thing. And then desktop is fine. I think the mobile styles are okay. We'll just have them go all the way across. Now for tablet, I don't know if we would really want the card to go all the way across like this. It's because I turned flex wrap on. And actually, what if I don't want flex box wrap on? If I don't do that, then it's too wide to fit. So I do want flex box wrap. But what I would like is to have it be maybe two columns on tablet. So let's kind of test it out in the browser. So flex of one is for mobile. And this is a shorthand property that will take up the flex grow, flex string and flex basis. So flex basis is the default width. And it's 0%. When you just set using the flex shorthand property, flex grow is the sort of speed at which the element will grow and width to fit, you know, the parent width. And the shrink is how much it'll shrink. So what I think I want to do is to limit it to two columns, I could set something like flex basis of 50%. I think. And don't let it grow. So set flex grow to zero. Oh gosh, don't tell me. No 50%. I want it to be two columns, but I think maybe the gap property is making the 50% be too much. Yeah. Oh, that's annoying. That's not cool. I think CSS grid won't do this. Like, I think if you set the gap property and see this grid, it'll just sort of nicely fit everything. So in CSS grid, if we did that, we would set the grid template to one column for mobile, we would set it to two columns for tablet and set it to four columns for desktop. And that's kind of looking a little bit better than what we have here. Yeah, let's let's switch over to CSS grid for this. Oh boy. Okay. So displaying grid, I think gap still works for CSS grid grid template columns is I guess one far for mobile. And then for medium, we'll say grid template columns is repeat to one far. So that means that there'll be two columns. One far is sort of like the flex amount ratio. So the space each one will have the same amount of space. And then we'll do include break point, large grid template columns. And we'll say for repeat for one far, so they'll be the same with in four columns, and we'll delete this flex one thing. I think that's all the flexbox styles we added. Okay. Oh boy, you know, as much as I like flexbox, I think grid definitely has some advantages. So now this is very easy. It's four columns on desktop. We got two columns on tablet, and we got one column on mobile. Nice. So let it looks good. I'm happy with that. The next thing we want to do is add these styles for the other social media platforms. So let's go into our markup and the first card is Facebook, and then second card is Twitter, Instagram, and YouTube. So we're going to change the modifier classes to match. And then also the image, obviously. So this is the first card, the Facebook card. And here's the second card. So card, Twitter. And then change the image. Next one is Instagram. And then last one is YouTube, and I think there's some other copy we need to change to. So Twitter is 1044 and 99 today. Come back up here. 1044. 99 today. And we're just hard coding these values. If this was, you know, an actual app, you know, using data and stuff, then we would use, you know, the framework or JavaScript and the API to generate the numbers here, but we're just using hard coded stuff. Instagram is 11 K and then 10, 99 today, 11 K, 10, 99. And what you might do if you are generating a data from somewhere is in order to be able to target just the number when you're changing it, you might do something like wrap it into span. And then you could target the card number, span child, and then make that the number, but we're not really worried about that right now. So we'll just kind of leave it like that. Okay, and then YouTube is 8239. 144. 8239. 144. Oh, and it's down. So down. And down. And then we'll have to, um, I think add some styles for the different modifiers too. Let's just see how this looks right now. Okay, cool. So yeah, icons are showing up. And you can see we did other styles for the down. So it's red. And we just need to add the styles for the top bars. So because we have nicely organized our styles and our SAS file, we can just look down our file and can see card as this modifier here. Oops. So we'll just copy that. And paste it here. And then replace the colors. And I'm assuming the colors have been named, you know, with the name of the thing. Okay, let's see if that worked. Okay, Instagram didn't work for some reason. Instagram. Let's check our colors. Oh, Instagram start and end. Oh, right. It's a linear gradient. Let's go to our design again. Kind of take a closer look at this. I think the gradients going from left to right sort of and it's angled up a little bit. Oh, here we go. Oh, there's three colors in there. Oh gosh. Oh, I'm so glad they do this. This is amazing. It's seriously amazing. I'm going to copy that. Can I put a linear gradient in a border top? I guess we'll find out. I'm not sure if you can. Oh boy. Yeah, I don't know if you can. Oh, yeah. Oh man, this might make things a little more complicated than I was sort of hoping. Well, it didn't make an error. So let's see. Yeah, it didn't work. Yep. Let's just let's look this up. CSS, linear gradient in border. I'm pretty sure this doesn't so not work. I probably need to fake it somehow. Let's see. Yeah, they're using pseudo elements, which I think is what I'm going to have to do. I mean, it looks really cool. Okay. I feel like they didn't give us the colors we wanted or like there were three colors when I look at the design. Is that right? That's the Instagram end color. Okay. And this is the five middle colors not listed, so we'll just have to add that in. Copy that. Okay. And the angle is 225 degrees. So let's think about this. I want to add it in a pseudo element, so we can't use the border thing. So let's comment this out. Okay, so with the card that has Okay, so with the card, with the modifier of Instagram, we want to add a pseudo element that will look like the border, but it's not a border. It's a pseudo element. So let's get the pseudo element working first. So we'll put it in the before pseudo element. Now for a pseudo element, you have to set the content to something, whether it's an empty string or something else. Otherwise, it's not going to show up at all on the web page. And I learned that in the hard way. Okay, so the before pseudo element content is blank. I'll set the height to, I believe it was five, based on what we have up there with, I guess will be 100%. And I want to have to set this to I think position actually, let's just see what happens if we don't have anything. I think I might need to use position absolute for this, but I'm not sure. I'll set the background to what was it? Instagram start. And we'll worry about the linear gradient later. We're just trying to figure out how to make this element at all for Instagram. So again, we're kind of breaking things down, doing things step by step. So the first step is just getting this pseudo element working. Okay, so here it is with the zero. Why is that? Maybe position relative. We have to set to display block. Oh, there we go. That worked. Oh my gosh. And the other problem is, because it's a relative of padding in the card is limiting the width of this. So that's kind of annoying. I mean, I guess I could do manually add the padding in. So it would be Calc 100% plus, I think it was 30 pixels. So times two is 60 pixels. But then obviously it'd have to, I think I might have to do position absolute. And then width is 100%. And I think I need to set this to position relative to limit the absolute thing. Because otherwise, if you don't set the parent of an absolutely positioned element to position relative, it's going to just sort of keep going up your tree until it hits whatever position has position set. Or we'll just go all the way up to the top and the body. That's why it was so long earlier. So position absolute. And we'll say left of zero, top of zero. The problem is, we want to, it's not taking the border radius. So I think I need to set overflow to hidden. There we go. And the other problem is, I'm a little worried that because it's positioned absolute, it's not actually taking up any space on the page. It's just kind of like floating wherever you stick it. So I think that's made the content in the Instagram card go up, you know, five pixels. So I guess we could fix that by setting the padding top of 1.565 grams plus five pixels. Or we could try doing something like at a margin top to take up that space, a margin top of five pixels. So that seems like it's better. It's a little hacky, but I think to make this linear gradient work, we kind of have to do that. So let's do this. So card platform is going to have a margin top of five pixels. And then I'm not saving because it's going to automatically update my style and update this website. And I want to make sure I copy everything. So the card, we'll just set all the cards to position relative and overflow hidden, because that's not a terrible thing. What a terrible thing for all of them to have that. And then the before element is all this stuff here. I didn't have any of this to the styles yet. So card, oh, I did here. So everything under background. Content height within background. So this is the position absolute stuff. Okay, save that. I like putting the position stuff first. After content. And that's like putting width first. Okay, I think that is not the same. I can't even tell. Let's add a guide. And I'm pretty excited. I did 100 pixels. Ooh, I can't see anything. Let's get rid of these other ones here. Okay, guides. Hover over the rulers to show a guide. And these are the guys I never explained any pixels it is. Click anywhere on the ruler to add a permanent guide there. Okay. So hover over. Let's go to desktop view. Hover over the ruler. Oh, there we go. So these aren't perfectly lined. I think it's because of the icon height. Oh, man. Okay, so let's fix this. My guess is the icon at different heights. So it's like slightly misaligning. And then of course, this one is like really different. So first, maybe I'll set a height for the platform element. Yeah, this is 20 pixels. Let's see how tall Twitter one is. I'm just testing my theory that the icon height is responsible for the weird alignment. Yeah, it's 17. So I think I need to say this one's the tallest one. Instagram looks pretty tall. 20. YouTube is YouTube is 20. So if we say a card platform height is 20 pixels, then you can see the Twitter one kind of went down a little bit. And let's see. Let's do this to sort of debug. Make sure everything is centered correctly. That seems good. So we'll set height of 20 pixels for card platform. Here we go. Height from 20. So now you can see that everything except Instagram looks pretty good. So for Instagram, having to that margin top that I set of five pixels, I think. Oh, and be specific to Instagram. So maybe card Instagram card platform. Hmm. Hey, for card Instagram, I'll add a specific padding top of 5, 6, 2, 5, plus 5 pixels rem. There we go. Cool thing about Calc is that you can combine units. So I think this is awesome. So go back to card. And originally, the padding was rem 25. So let's have to remember that. And we'll see. Oops, adding top Calc is the rem 25. I'll see if this works plus rem 5. Okay, there's no error, which is good. Let's see if this actually happened. Looks a little bit more centered, which is great. I think I added it to the here we go, the padding. Oh, didn't work. Oh, golly. Hmm. So it's really 25 pixels plus five pixels, which is 30 pixels. Wait, I can just do rem. I don't need a Calc. I'm dumb. Rem 25 plus five is 30. So 30. There we go. There we go. Okay, there we go. So now we use the guide here. This is actually a really cool feature of Polypane, making sure things are aligned. Yes, everything is centered now. This is a wonderful day. Okay, so you go back here, tell it looks pretty good. Mobile looks pretty good. So there's padding around everything. Okay, I did notice that I forgot one thing. The Instagram card, I just put that temporary orange color and it's supposed to be a linear gradient if we look at the design again. See, it's supposed to be this thing here. So let's put that in. Let's go back into our code. So I had set that color bar on the top of the cards as a order top. But for Instagram because it's a linear gradient, you can't make a border like a linear gradient, you have to use this sort of hacky workaround and put it in a pseudo element. So here's the temporary color, the background thing. So I think I can just replace that with the linear gradient that I copied from the design file. So we'll just copy that and then cut that out for now. Real linear gradient stuff. And we want to replace these with the variables that we made. And let's just go back and see what we did. Okay, so it's Instagram start Instagram middle Instagram end. So I'll copy that first one. Actually, it looks like this might be I might have it backwards. So I think this is the end middle and then start. Let's try that. Yeah, var. And then middle. And let's make sure we're not throwing an error. Okay, good. So there we go. And what this is saying is the linear gradient. I think if you don't set some of the parameters like the angle, it'll be like a horizontal gradient, I believe. But you can set options. So like this is 225 degree angle. So you know, it's slightly angled up, I think. And then we can set as many colors as we want. And then the percentages sort of tell you where that color starts. So let's slow the website again. Let's see. Oh, nice. That was pretty easy. Great. I just had to, I think it's one thing I'm really liking about Figma, how you can just copy these styles from Figma itself, like has that export option. Yeah, so cool. Okay, so that was a little small thing that we forgot last time. And another thing that I want to sort of update here is in poly paint, it's a little bit of pain for me to have to like try to horizontally scroll between the different things. So if you go up here, I said on horizontal layout, but I think I'm going to try. Let's see what vertical does. I guess that sort of works. Do you want all the same page? And then there is focus. So you can, it creates tabs for each of them at the top, which maybe I think I might like this better. Yeah, let's stick to this one. The vertical one also seemed pretty cool. Okay, let's look back at the design and see what we want to do next. And I think we need to work on the other grid of cards down there. So if we look at that second grid of cards, it has some of the same items as the top row of cards, as we mentioned earlier, so like the icon and the number for the percentage change is the same. There's a new thing has a subtitle for page views. So we need to figure out how we want to build this out. And each card is divided into four, I guess you could say four quadrants, it looks like. So I might use something like CSS grid to create a template where it has two columns and then two rows. Yeah, let's do that with CSS grid. So let's take a look at the markup and figure out how we want to build those that second grid of cards out. Okay, so this section tag is the first row of cards, and let's kind of minimize each card so we can take a better look at everything. So what I'm probably going to do is create another section tag with the same classes, because the container class is what sets the max width and centers it on large viewport, centers it on large viewport widths. And the cards class, I believe, if I remember right, yeah, so this one sets a display of the grid of cards in a four column layout on desktop, two column and tablet, one column on mobile. So yeah, I think we want to create another section tag have the same classes. So section dot container dot cards, and it generates that for us. And then each card will have the markup for each of the items. And I think what I'm going to do is, let me think about this, do I want to just copy this and then just change it? Or do I want to start from scratch? And I think I might want to start from scratch because the design is pretty different, like these top cards, everything is just in one column and centered versus this grid down here. So I think I can probably reuse this card class. Let's see, so the card class, it has the background color, which is the same color of the text, the padding border radius, and then the text line is center, which I don't need, but we can take care of that later. But I think there's enough properties here that are shared between the top cards and the bottom cards that I'm going to want to use the same class for that. Then we can differentiate it with, you know, either a modifier or a helper class. So yeah, let's do that. Yeah, this stuff is just all pretty different. Okay, so space there. So with this second set of cards, I'm going to do sort of what I did in the previous section. And I'm going to start just building one card out. And then once I have that set, make sure all the styles and everything are correct, then I will, you know, copy and paste to create the other the other cards. So let's make our first card. So card, I'll start at the very beginning. And then we'll move the markup into there. So it's page views, the Facebook thing, the number, and then the change. So I think this is what we want for the first card. Now, here's where I need to figure out how I want to lay out this stuff. So what I think I'm going to do is create a grid template for these second cards. Now, where do I want what should the class name be for this? And where should I put it in our sass file? So we look in the card sass file. We had these modifiers for the top cards to control that, that colored stripe at the top. And I think I might do another modifier for the grid inside the individual cards. And you know, this is again, one of those situations where there's not one right answer, at least in my opinion, you could do this, you know, multiple different ways. So I think my options are either creating another modifier to make that grid layout, or I could create a helper class. So meaning instead of doing card, and then let's say we make a modifier class for card dash dash grid, feel like a better word. And then making this be another modifier here, we could do a helper class, which is doing something like, I don't know, card dash grid. So this will be the second class name, and then we'll set all those grid styles in this card grid class. And it's kind of the same thing. I think maybe for readability, because we have these modifiers ready for the different social platforms. I don't know if I want to just add another modifier. Maybe that would be better in terms of the BEM approach, but I think, yeah, I don't know. Yeah, the name, the naming and organizing part of your style, I think, is maybe not the most difficult part, but it definitely takes a lot more thought than you might think at the beginning trying to figure out, what do I want the class name to be and where do I want to put that? Okay, I think I'm going to try to stick with the BEM methodology and just say card dash dash grid and make that another modifier here. So that way, they're just all like under the card selector here. Okay, so now we have this selector. Let's just say that really quick. And then I think I probably need to put each of these things in their own child div of the card grid so that they can be, you know, laid out in the grid template. So let's think about this card grid. And then in the card grid will be the children. And what I'm sort of thinking through in my mind right now is if I create a separate div with the unique class rich of these things, then that's going to create more classes and stuff that I'm going to have to create like what I have to make another element in here. I'm not really sure. Alternatively, I could do a completely different approach and put all these grid styles in a new SAS file and call it card dash grid and do something like this or it's card dash grid, make a new SAS file called card dash grid SCSS and put all the styles for that in that new file. And that is actually sort of appealing because then I'm separating out the different styles. Yeah, so it's just one of those things where you just got to kind of choose choose one approach and and just follow it. Yeah, I think I might want to do that just because adding more modifiers and elements along with the existing card elements and modifiers, I think might make things a little bit too confusing. Yeah, let's do that. I don't know if that's the best way, but I think I'm going to do that. So we'll make a new SAS file card dash grid SCSS. And I do want to note that the single hyphen is not something that's really part of them, but I just do that with names that are a little bit longer. I could say card grid with no hyphen, but it's a little bit more readable. So card grid is going to be the block name for this. So we'll save that. And of course, since we made a new SAS file, we need to forward card dash grid. There we go. Okay, yeah, this feels a little bit better. I think just separating things out will make things less confusing, hopefully, when when if we have to go back and change things. So we're going to do this card grid and then in here, so we could say something like card dash grid is that and that's the block underscore underscore for the new element. And for the first one, we'll say maybe username. And then this will go in there. And then maybe because the content's not super long, we'll just do it like this. Oh, I guess pretty or just automatically modifies it like that. Okay. And then card grid underscore underscore number, I think. And I'm sort of using I want to use the same element names as we had up here. Yeah, so let's follow our account. And then platform and username. And this is just so actually, I don't know if this is going to, I don't know if this is a great thing, because I want the styles from the card grid username to actually be similar, the same as card underscore underscore username, right? Because they share a lot of the same styles. So I think I need to separate out just the styles for the grid stuff with the card grid thing. But for the child elements, I think I need to do, you know, card username. And then the number. So this is the number here. Let's make sure it matches up with the selector up here. So card username, and then card followers card count big. So I think I want to do card count small for these cards here. Let me just double check and make sure that's the class I made card count small. Yeah, so we're gonna use that here. So I hope that makes sense. But I'm trying to put all the styles that are shared between the top cards and the bottom cards in the card SAS file, because otherwise I would have to if they have a different class name like card grid underscore underscore username or count or whatever, I would basically be having to copy and paste the styles over there. So I would rather they just have the same classes and keep everything as minimal as possible. So this is just this is pretty normal back and forth when you're building something because you don't always get it right the first time. So there's a lot of trial and error. Okay, so this is better. And to take care of the grid child items, because you know, I do need to set some grid styles for these elements here, I'm going to put it in card grid and I might do something like just, you know, nth child one, nth child two, three and four, so that I don't have to create additional classes for these in the card grid. So I don't know if that's the right thing to do, but I don't want to create more classes than I really need. Okay, so 1044 followers. So look at the design. Oh, this is interesting. So I think this is going back to some of the accessibility things that I mentioned in the research video, because this is just giving you the icon for the platform. And this is just giving you the numbers, not actually saying, you know, username here, and then this many followers. And I'm guessing they included that in the copy because, wait a minute, is this even the right copy? So the second, the second card here is supposed to be page views 87. I might, I don't know if I copy the right thing. I might have just copied what was in the first card. Oops. 1044 where'd that number come from? Now this is from Twitter, 11k 8239. Oops. Yep, I copied that wrong. So kind of forget everything I just said. Oh my gosh. All right, delete that. And then we need to find out where the copy starts for these second cards. So it starts with this sub headline overview today. And that's here. Okay, so this stuff I don't need. Okay, so the overview today, the sub headline, I'm probably going to make that an h2 tag because the social media dashboard, that's in an h1 tag. And you want to kind of keep the hierarchy going down the page. So because this is a subtitle, it's a bit of a smaller font. So that sort of tells you that it's a sub headline. And you only want one h tag per page. So this is going to be an h2 tag. And we figure out where we want to put this because in the grid thing, in the container cards grid, each of these divs, each of these child divs is in the grid. So I feel like I want to include the h2 tag inside this section. But you know, I obviously want it to take the full width of everything, not be part of the card grid. So let's think about this. Let's go back to the cards rule here. Here we go cards, display grid yada yada. Yeah, so all the child elements in cards is going to be part of this card grid. So what I could do is move the cards element to its own div here. So then in here is where the second row of cards would be. And then that way, when we add this h2 tag with overview today, it won't be part of the grid. It'll be full width and its own thing. So yeah, okay. Now in this first card, we want to add market for page views, the icon 87 and the 3%. So I don't get confused again. We're going to, oh man, he's doing that. Let's just move this in here. Okay, now we want to create a div for each of these things. So page views is going to be the first child. And the second child is the Facebook icon, I believe. Yeah. So let's just copy it from where we had it up here. Here we go. What did I do? Okay. And then 87 will go up here and then 3%. We'll go in the last child. Okay. So now we have our first card. Obviously, I haven't really made many styles here. So you can see, hold on. I can't see that. Okay, I guess I need to go back to, let's go back to the horizontal thing. And I'll just have to vertical, also have the horizontal scroll. I guess I can do that in our space for the screen. Can't put it on the left side. This is annoying. So you can't see this. I'm going to just quickly add some temporary styles to boilerplate. And I'm going to say I'm in height. I'm going to do VH. So hopefully add some extra space. There we go. Yay. All right. Here we have the card and everything's showing up. It's taking the card styles. So now I need to add the CSS grid styles for the grid part. So it's going to be card grid. So in card grid, we'll say display grid, because we're doing the grid for all breakpoints. We'll table and desktop. We'll say grid template columns. Oops, grid template. Repeat for, I guess, one of our and then grid template rows. And we'll do, are they the same? It's probably the same. Repeat to one before. I just kind of start with this. And then if we need to change it, we can. Okay. So now let's see if that change anything here. Oh, something's wrong. So that space shouldn't be there. Okay, cool. There we go. Oh wait, I want two columns. Yeah, there we go. Two columns. All right. So now it's in the layout, general layout that we want. Let's copy over some of the classes that we created for the top cards so that they'll be in the bottom cards now. So the first one was the page views. I actually don't know if that might be its own style. Yeah. Let's see. Let's enter bold 14. So I think we might need to create a title for that. Let me think about this. Card subtitle. Let's put it at the top. So subtitle font size round 14 font weight 700. And then for the card icon. Let's see where that was here. Card icon. I don't really need this margin right thing because that was just for the main card. I wonder if I'd just leave it without a class that would look like. It actually seems okay. So let's just leave that. An 87, that's the number. So before it was card count, card count big. So we'll do this. And then instead of big, it's small because the number is smaller. And we'd already created this style here. Small. So we just need to add the style for a smaller number. Let's enter a bold 32. There we go. And let me just make sure what it is on mobile. 32. Okay, it's the same. And then the number thing. And that was card change, I believe. Yeah, card change, card change up, and then card number. So I'll need two divs, I think. Actually, I need, I will need the image too. Oh, what was that? Here we go. And then card number. And then there's no today thing. And then we need to add the class for the card change, card change up. All right, now let's see what we've got. Okay, so we can see these styles are taking effect and they pretty much match in this number smaller here, which is good. Let's see what else we need to do. I think we need to align the things on the left to the left and align the things on the right to the right. Yeah, the panel looks about the same. 24. So it's about the same, the top card. So yeah, I think we're just going to align things to the right to the left and the right. And then the top row looks like it's aligned in the middle vertically. And the bottom row looks like it's aligned on the bottom. So we'll have to take care of all those alignment issues here. Let's go to card grid. And so what I'm going to do is I don't want to create, I guess I could say card subtitle there. Yeah, so let's do that. We're going to create rules for card subtitle, card count card change within card grid. I don't know if it's the best thing to do, but at least it will be a little bit more descriptive when you're looking at card grid. Yeah, let's do it. Now I might be straying a little bit away from strict them format here, but I think it's okay. Oops, where I do card subtitle. Card count card change. Subtitle card card change. Oh, yeah. And then the image. Try out a class on that. I think I didn't want to because this is adding new styles that I don't need. So because there's just an image here. Actually, I think I do need to add a class here. So I can identify it. This one was card platform, card icon. I could reuse it, I guess. Card platform was a parent div, which is the same hierarchy as what we have here. So card platform, what styles did I write for that platform? Oh, yeah, I do not want this because this is a lot of, this is the flex stuff that made this centered vertically. So yeah, I don't want that. Hmm, hum, hum, hum, hum, hum. I wonder what would happen if I just had an image by itself without having this div, the wrapper div. Oops. What am I doing here? There we go. Let's see if this messes anything up. Yep. Okay, I guess that looks okay. So let's add some of the alignment issues. Let's add some of the alignment rules to the card grid. So justify content, which is the horizontal since our grid is going this way. Justify content. I want this to be, do not space between. It's a flexbox thing, but let's see if that worked. Oh, that did not work. Hmm. Line items. Well, that looks like it worked. Yeah, so wait a minute. Let's turn on the grid, a card grid. There we go. All right, what's going on here? Um, like the channel on items centered in the cell. Oh, this is because I did, um, it's making both rows the same height because they're both 1FR and they're taking the height from this 87 thing. So, okay, there's a couple problems here. One of the, I think the card may not actually be tall enough. It's 120 pixels right now. And it's 125. It's actually pretty close. So maybe I don't need to worry about the card height, but I think I seem to align each cell individually if I'm not mistaken. Okay, let's just go to CSS tricks grid guide. CSS tricks has these very, very, very helpful resources for flexbox and grid. So, let's see. Let's look for justify. Okay, so justify items and justify content. So aligns grid items along the inline row, and so you apply to all grid items inside the container. Start aligns items to be flushed with the start edge of their cell. Oh, this is what I need to do. I think justify content is the cells themselves. Justify items will align each cell content within the cell. So let's do that. Let's just see what this how this works. I think this supposed to be start. Okay, this is going to line everything to the left if this works. Okay, yeah, looks like that's what's happening. So I need to align the other things to the right. So this is going to be the image and then the change. So I can override that with justify self and the card change. Let's just make sure that's working. Okay, that is working. And I think I might need to do a compound selector here. So image, comma, card change. So this will affect the image tag for the icon and then the card change div as well. Okay, good. Now let's use these handy little guide here. And it does look like it's centered vertically, which is great. And then here, it's like sort of, I think they're both on the bottom. Let's see. Oh, I guess it's centered. Let's see if we can do this card number. Um, align self and oops. Oh, geez. Oh, it's a card number card change. Oops, what is going on here? Okay, so I'm gonna have to do card change and then card number, I think it was for the 87. Let me see if I even got that right. Card count. They're not quite look the same. I think maybe because this is sort of determining the height of each row. And I want to get rid of that for sure. The margin bottom. Yeah, margin bottom. So card count and card change will be aligned self and card count. I want to get rid of that margin bottom zero and then card count card change align self and. Okay, I think that looks better. So yeah, so the top row is centered vertically. Bottom row is aligned to the bottom. Okay, great. Let's check the height of this card too. 114. So I think I need to add some space between the page views and then the number. Yeah, there's a lot more space here. You can see this. 2021. So I will add space. And I kind of want, I don't want the first row to be the same height as a second row. So I think maybe I think there's a property called like fit content or something. That didn't do anything. What if I do auto? Just the, oh, that actually kind of worked. Okay, good. So now the rows are only taking the height of the content in the row. So let's change that. So in card grid, grid template rows repeat to auto. Okay, good. And then now I can add the space with the gap property. So gap. I think it was 24. Let's double check that. 21. And the whole card we want to be 125. So we can adjust that. 21. Oops. What? The gap property is not working. Oh, I think I did something wrong. Oh, it's not using the, it's not taking the function. But it's also not throwing an error, which is weird. I think I didn't remember to add this util thing because that's where the rem function is. But I'm really surprised that it didn't throw an error in Gulp. Okay, now the space is there. Interesting. Okay, let's check the size of the card. 123. Maybe we'll add two pixels to that to make it 125 to match the design. There we go. All right, looking pretty good. Not bad. All right, let's add the other cards to our markup. So there's four times two. There's eight cards. Oh, wait, I forgot the subtitle. Oh, let's take the styles here. Interbold 24. Actually, it looks pretty close. I guess I made that an H2. So since it's an H2 tag, I'm going to put the styles in the typography SAS file. Here we go, H2 font size rem 24. So it's 24 on desktop. Let's see if it's the same on mobile. It's slightly smaller. 24. No, it's 24 all the way around. Okay. So that makes that pretty easy. And I might need to add a margin bottom to this 24 margin bottom. And let's check what it is on mobile. 27. Usually you have more space on the desktop version. Let's just say 24 for both. I think that's close enough. Okay. All right, that's looking pretty good. Cool. Cool. Cool, cool, cool, cool. Okay. I think that is good for this card style. So let's go close these things out. And so here's a card grid. Sorry, card card grid. This is for the Facebook card. So I'm just going to 2, 2, 3, 4, 5, 6, 7, 8. So let's see how it looks. Nice. Yeah, it looks good. Cool. And this is the benefit of creating styles that you can reuse because I create all the grid styles for the cards for the top row. And I can just reuse the same classes for the bottom row. So it makes things efficient. And it also makes things easier on me. I don't have to, you know, write the styles every single time. So now we just need to update the copy in each card to match the design. So second card is likes 52. It is still Facebook 52. And it's a down of 2%. And then we need to change this. Oops, I changed the wrong one, I think. I'll just move that up. There we go. And okay. And it likes Instagram 5462. 5462. And the percentage was 2257. And it's green. Okay. And the next one is Instagram again. So let's copy this. And it is profile views. Instagram and then it's 52k. 1375% has changed. And then this one is retweets 117303. And it's up. Then the likes. Also for Twitter. 507 and 553. Okay. And then YouTube, like, oh, their YouTube not doing so well. YouTube likes 107 and down 19. I think I need to change the down arrow for the other down arrow. The alt text. Okay. And the last card, YouTube total views. Let's copy the YouTube icon 1407 down 12. And then down. Now it's got the whole selector there. 12. Hey, I guess I can just delete this. All righty. Looking pretty good. It's two columns. Yeah. One column on mobile. Sweet. Yeah. I mean, that looks good. Let's go back to the design, make sure we didn't miss anything. Yeah, those seem like it's matching a design pretty well. And I do need to do the hover state. So let's do that. So the hover state is on the cards. When you hover over a card, it looks like it just changes the background color. Let's see if anything else changes. 33A8, 33A55. Okay, 33A55 when you hover. It doesn't look like there's anything else. Like it's not scaling up and there's no box shadow, at least that I can tell. Okay, so it's really just the color change. And I'm assuming this is the same color. 33A55. Yeah. I think that's kind of it for the hover states. So let's find out what that color was. 33A55. So the dark background was there. Is that right? What is this in a HSL? That's kind of funny. And what if you can do HSL in a Figma hex to HSL? You know, actually, I can do this in VS code. I'll just do a test color here. Test. And then we'll click on this and click this. So it's 282527. So it looks like this is a new thing. So I'm going to say card, hover, and then we'll move this down where the card styles are. Maybe here. So I might call this dark card hover. There we go. So now you can copy this variable, go to the card SAS file. So here, I'll add a new selector for the hover, pseudo element, or pseudo class, I think is what it's called, pseudo elements are the before and after, and then hover is a pseudo class. Background, far dark card hover. And to make it look a bit nice, we'll add a transition on that. Background 150 milliseconds ease in out. This is kind of my default animation timing. So now do any of the colors of the text change when you hover? Let's find out. Color is 8c9 8c6. 8c9 8c6. So it's the same color. Okay. So the text colors remain the same. It's just the card colors that are changing when you hover. Cool. And I wonder if I should add a cursor, probably did card to cursor pointer. So this way, if you hover over any part of the card, it goes to the hand. And I'm assuming that's going to be, because if you click on one of these cards, it'll give you some more details about the analytics or whatever. So okay. This looks pretty good. So we've pretty much gotten all the cards built and styled out, according to the design. So the next step is going to be, we need to look at some of the accessibility things that we researched in our research video for the screener only text. And then we can start working on the light mode and getting the toggle working for switching between dark and light mode, and also with the system preferences. So that it'll be dark mode if you set dark mode in your OS and then light mode if you set light mode in your OS. But it also gives you control if you want to explicitly change this website to dark mode or light mode. Hey everyone, this is part five of the front inventory series where I've been building this social media dashboard with a dark light toggle. In this video, we're first going to check out some comments I got on the last video and incorporate their feedback into the website. Then we're going to load either dark or light mode on the website based on the user system preferences in their OS. And last, we'll get that toggle working so that the user can switch between light and dark mode if they so choose. All right, let's get into it. So here is what we have so far in the challenge. And I wanted to point out some comments that I got in the last video, which actually was really great feedback. So this person, Amar, he was saying he doesn't think there should be three options for dark mode should be dark light toggle and system is a default, but then the user can switch from dark to light if they want. And what I had done was that I had three options for this toggle, dark light, and then system preferences. And I realized that this comments from both Amar and also another user big squeak, they both said the same thing that you don't actually need the system preferences option because you can save the option based on your OS and have the website load that. And so you don't actually need to manually have that system preferences as an explicit option. And it kind of can be confusing or distracting. So I think that actually makes a lot of sense. So what we're going to do is first kind of remove the system options so that the toggle is back to two options. And when we're considering the UI, it's always good to go back to the design. And we can see in the design that, you know, the original toggle was two options, and it's really just a dark mode toggle. So it's sort of like a light switch, you're turning dark mode on or you're turning it off to go to light mode. So dark mode off is on the right position. And then dark mode on is the left position. So I think I just kind of got away from maybe what the design originally intended, which you know, it happens. So yeah, thank you to both Amar and also Big Squeak for bringing this up to me. So here's our site. And let's go back into our code. And we want to go to the toggle. And I do have the site already running with Gulp and stuff. So let me just make this a little bit smaller since we don't really need it right now. So here is the toggle. And yeah, we got these three options here. System dark and light. So I'm going to remove system. And I think that's all I need to do. Oh, yeah, remove the labels too. So let's save that. And then go back to our site. Okay, so now it goes from dark to light. And I think it's a little bit wider now than I really need it to be. See the design says 48. And obviously, this is wider, I think, because of the third option that I added in there. And my toggle is 60. And let's see, I'm trying to see where I had said that width from the toggle is one of four 3.75 grams in one of far. So let's look in the grid inspector, header toggle. Okay, so yeah, you can see that this is, let me actually maybe zoom in a little bit, just so we can see the toggle a little bit better. So it says three comms, it is one of four 3.75 one of our so I actually want to remove the Oh, not sorry, not remove. I want to decrease the width of that middle column to whatever 48 pixels is. So let's see where that's set and go into our sass files. Let's find the toggle toggle.scss. So this is one reason why I like sass and organizing all my files like this, because, you know, I know that I'm working on the toggle. So I can go into the components folder because it's probably there and then look for toggle. So splitting the the styles up and partial files, I think, is just it helps when you have to go back and fix stuff. So here we go. So rem 60. So now it's going to be 48. And I think everything else can stay the same. Yeah, so let's save that and go back to the site. And now we have just the two columns. Let me actually, there we go. Okay, that's pretty good. I think also, if we look at the design, it's just dark mode. So I think maybe I don't need. I don't know if I need that label. So I mean, need to make the first one dark mode. And then if it is a radio button, you do kind of want to label. So maybe I can just hide this second label so that it's not visible. Although it's not visible, but it would still be right picked up by screen readers. But if you're using a screen reader, you probably don't necessarily care about dark or light mode, I could be wrong. But I think maybe I can just delete this label. Because actually the label, the dark mode is really just labeling the entire switch is not necessarily the choice for the radio button. So I think maybe this shouldn't be the label for dark, but maybe it should be like the the header kind of for the radio button. So I think I might need to look up what the correct element, like the semantic HTML element I want to use for that. So let's see. Let's check this link out. Okay, so legend, oh legend, maybe that's what is for like the sort of title of the radio button. Yeah, I think maybe that's what I want. So instead of label for dark, this is going to be legend. Oops, legend. And then we will move this up, I think, under the field set, if I'm not mistaken. Let's see, where that? Yeah, so it's the first element under field set. Okay, then I might need to switch some of these styles since it's a different element now. Yeah, I wonder if I could just put it in toggle wrapper. See if I can manually move it in the browser. Doesn't exactly work because toggle wrapper is, oh, for the actual toggle. Yeah, I definitely don't want to do that. So I might need to do field set also like display grid, I guess. Wait, right now it is the three column thing. And that was originally for the label. It was dark than the toggle and then light. So now I remove light. So I actually just need this to be two columns. Let's just test this in the browser first. So I think it's just one of our three rams. That right. And then I don't want, I just want, it's on one row. Maybe auto instead of one of our since. And then I need to adjust the, okay, let's just go into the code. I need to adjust the location of the cells. So let's figure out what we're going to do. So I want to set header toggle to be two columns. The first column is going to be the legend element. Second column is going to be the toggle wrapper. So let's do that toggle. Oh, label. Oh, yeah. So this is, sorry, this is the CSS grid parent. Header toggle toggle. And I set the styles under toggle. Okay, so it's two columns. And we're going to remove this because it's one row. And I think the gap can be the same. And the label is what's different now. So I actually don't need the dark system in light stuff anymore, since we're not doing that. I don't know if I need to line itself either. So instead of label, it's legend. And then the, so legend and then it's toggle wrapper is the second column. So legend will be grid column one and ends it two, since it's just taking up the first column. And then wrapper will be two, one to two, I guess two to three is right. Yeah. And then we'll move grid row because it's just that one. And I think that should fix it. All right, um, what's going on? Why is it not all in one row? Like I want it to. Okay, clearly some things are larger than the grid. It's so weird. I think I'm doing something very wrong here and I don't know what. I'm going to start over deleting all the grid properties. It's deleting all the grid properties. Let's make sure we don't have anything else weird here. Okay. Now, this is no grid is going on. So now let's try adding a grid. Display grid, grid template columns, and I'll say two columns. So maybe one if R and then, let's say four rims. Let's just say one if R one if R. So now let's, okay, so now it's already not fitting in one row. I'm just going to add static things. So we'll do six rims and three rims. Okay, so now let's place the first one. One, grid column, one, two. What if I did two, three? Oh, interesting. It's not doing anything. I wonder if any display block would do something. Wow, I feel like I need to return my CSS membership card or something. So this is not working. It's not positioning this anywhere, which is weird. Okay, I'm just going to try to set this as a div and see if it does anything. Div, grid column, one, two. Let's see if two, three. Oh, so this moved it. So there's something about the legend element, not working. Interesting. Interesting. So legend element is not getting affected by grid properties, which is very strange. Let's see if we can do it for the toggle wrapper. So grid column, two, three. So that's working. One, two. So let's look that up. So CSS grid legend element, not working. Okay, yeah, setting the fields at two display grid, which is what I wanted. That implementations are field set and legend is extremely rigid with very little accommodation for change to that most via display property, which is what happened when I tried to set it to display block, it didn't do anything. Display grid is not support on field sets by any browser. Whoa, when was this written? 18. So I think maybe I can't do grid on the field set. So let's delete that and go back to this. So I think this actually makes a lot of sense because I think in Sarah, Soydon's example, she was using display inline block if I remember correctly. Yeah, I don't remember where this was set, but I do remember that happening. I was kind of curious why that was happening. So I want to do display inline block for the legend. And I think display inline block. And I think display inline block too. Hmm, I don't know why this is so hard. Okay, she has a thing here. Okay, so the field set and she's using a div, oh, theme switching toggle. Wait, why is it commented out, but it's still showing up? Oh, there's just the h1 there. Okay, she did labels. So it seems like the legend, it forces it to be just above the toggle itself. For some reasons, it's just not letting you control the display. What if I display inline? Yeah, that's not going to do anything. This is a very strange little thing. Yeah, so display property on to field set and legend. Oh, it said it does support it back on field sets. A rendered legend is not a child box of the anonymous fields at content box. So that's why I think it couldn't act as a grid child. All right, let's read this spec. Field set is expected to act as follows. Element will establish a new block formatting context. This child's a legend element float is none position none. I think what I'm actually going to end up doing is switch this back to a label so that it'll be dark mode on for the first label and then dark mode off for the second label, but I'm going to hide the second label. I don't know if that's the right solution, but I think the legend is not necessarily what I'm looking for. So dark mode and then we're going to add a little span here for on and I'm going to hide this with the I think I did do this last time. I don't remember a screen reader. I want a screen reader hidden thing. Um, I don't think I added it. So I guess I can add it in now. Okay, screen reader. Here we go. So visually hidden. So I'll take this put it in our boilerplate. And then if I add this visually hidden class to the span, then I'll add back that label and do the same thing for the dark mode off. I know it seems maybe silly because if you're using a screen reader, you're not going to really be navigating this toggle, but at least you'll be able to notice there, even if you're not selecting an option. Okay, so then we're going to go back to the toggle. Yeah, label and we're going to go back to display grid, grid template columns. Let's say one of our three rims and label, what was it for dark? I'm not sure if that's right, but we'll see grid column one, two. All right, let's see if that does anything. Oh, yeah, toggle back for grid column two, three. Or sorry, right, grid doesn't work at all. So I think actually need the label to be before the toggle and then use display in line block. Okay, now it's sort of a line where I want it. And we'll maybe read that grid column stuff. Um, line height, I think is going to match the height of the toggle wrapper and hopefully it'll be more centered now. Yay. And then we need to get the space between dark mode and the label, 13 pixels. So we'll say margin, right, room, 13. Okay, so it's working working with the keyboard. Okay, that's a way longer than I think it probably should have. So I apologize for that. But now we have the two option toggle back. Hey, I learned something new every day. Field set can't be display grid or at least the legend tag doesn't seem to be working with display grid. Yeah, I guess it's a good lesson of like, don't over complicate things. You don't necessarily have to toss a grid or flex box on every single thing since this is working just fine, um, with, uh, the label being set like that. Wait, I am doing display grid. Oh, so I guess grid does work. But yeah, it's like not turn over complicate things and just controlling the alignment with, um, the line height property. Okay, so the next thing we want to do is I want to start getting the logic working so that if your system preferences are set to either light or dark, the website will automatically load either light or dark mode based on, um, the media query for prefers color scheme. So I think one of the links from my notes was the prefers color scheme thing from MDN. So this is a media query, um, it could be set to either light or dark. Zoom in a little bit. And then it's here. So media prefers color scheme dark. So I believe we can target that to set the background to be either light or dark. Then there's another example on pick, pick a Lily, um, which is a really great blog by Andy, Andy Bell, he writes a lot of stuff on CSS. So this is a really good explanation on the prefers color scheme thing. So let's just see how he did it here. Um, here's the CSS for the regular styles and he's also doing the visually hidden thing. Um, he's really good about accessibility stuff too. So using CSS custom properties for the different colors, which is what I did. This is interesting. He's setting a color mode variable, setting it to light by default. That's interesting. Let's see. Okay. Here we go. So the background is set to var background, which is a var background is set by default to a light color. Okay. And then if you have your preferred color scheme dark, then the color mode set to dark. Okay. And then also you're setting the background to likely different dark colors for dark mode. Data user color scheme. I'm not sure what that is. So if you have your OS set to dark mode, then you're setting the color mode variable to dark. And then this selector is, if the root is not data user color scheme, then you're setting it to confused. Um, also these are sort of doing the same thing. Okay. Let's read the explanation. If the user prefers dark mode inside of the media query, we're making the relevant theme changes. In the same media query, we're setting the color mode, which is color mode dark. Let's just notice how the CSS is applied. If the HTML root element doesn't have a data user color scheme attribute, this is to prevent the default overriding user preference. Okay. So I guess he's setting this data field on the HTML element. If there is a color scheme, your lighter dark detected, and it's saying he's setting it with JavaScript. Let's just do a search for this data user color scheme, because I'm not super familiar with it. Okay. So the user color scheme equals dark. Where is this set, maybe user color scheme? Do a search for that. Okay. And this is the JavaScript part, and he's using local storage to set, like to save if you have this set. Okay. So maybe we'll get back to this later. I think maybe right now we want to kind of just get the bare bones of displaying. Maybe we'll just work on just changing the background color to be either dark or light. So I'm sure there's a reason that he's doing this stuff. I think I might just use prefers color scheme and then set the variable for background to light. And I think I'm going to, I don't know if this is right, but I think I'm going to set default to dark. Let's think about this. How do we want to do this? So we got this media prefers color scheme. So we can maybe start setting this media query up in our colors. And then I set the background color, I think in boilerplate. Okay, so I set the body background to dark background by default, but I wonder if I actually want just a background variable and then in the here in the prefers color scheme, the background variable will be set to different values. Does that make sense? I think that makes sense. Or you could do the media query on every single thing here, but I feel like that you'd end up adding a lot of media queries for the first color scheme in different places as opposed to having them all in one place. Okay, so let's try this. Does that make sense to create like, I don't even know if this is right, but background and then set it to itself like var dark background. I don't know if that's going to work. And then in body, you're just going to say background. Let's see if that did anything. Okay, so it looks the same. Let's check out the body. All right, so the background sets a var background, which is it's a var dark background. I'm just going to change something just to see if it'll work. So let's do this obvious different color here. We'll set background to the green color. Yeah, it does work. Okay, so I guess you can sort of set variables to other variables. Is that I mean, it's working. I don't know if that's great. Okay, so he said body. So he's that body background of our background too. Yeah, I guess you can background set to var color dark. Okay, so I'm not totally off here. Well, since I didn't set it, I think usually people put light mode as a default. So maybe we'll do that. So to light by default. And then if first color schemes have to dark, we'll do root background dark. Oh, hey, changed. And I think in windows. Yeah, here we go. So this is windows and Mac will be a bit different. But in your settings color, you can choose dark lighter custom. So let's have our website open and then have our settings open. And let's see if this is working. If I set this to light, it should change to a light background. So let's see if this works. Oh, dang, it did work. Whoa, changed back to dark goes back to dark. Not bad. That's pretty cool. Okay, that part was sort of easy, at least getting the logic down. And I think my approach is right too. So in light of that, let's work on changing all the colors to be light, the light mode by default and then, you know, getting the dark mode colors set and then the light mode colors set. So started with the background and then we want to also change the text colors. So let's see where I set this color set on body. Okay. So what I'm going to do is I guess just make another variable. Let me see how Andy did it are all the variables just set. Yeah, so background. It looks like. It looks like background is initially set in the same place as all the other variables. So we're just going to have a really long list of these things here, but I guess that's okay. So we'll say text color. And by default, we want that to be in light mode, it would be the dark color. So what color would that be? Let's go back to design. 1d1f29. I wonder if you can set Figma to use HSL instead of hex. Let's see. Let's just Google this really quick. Yeah, default display of color values in HSL. Looks like it's not a feature right now. Okay, 230, 17, 14. That was this one, light text too. And then text color, if it's dark, we want to, oops, I forgot the var part. Dark text too. Okay, and then we'll switch to light. Ooh, oh yeah, and I need to adjust the, I can use text color for the text color. There we go. So now, then we need to set that thing up. This is 230, 12, 44. Light text 1. Oh, that's interesting. It's supposed to be 230 based on Figma, and that is what element is this? Header subtitle. Okay, so go to header subtitle. Oh, no, um, I need to make a new variable. Oh boy. Text color too. And then we'll use that for here. Okay, so now, and now let's closer to the design. Yay, I'll need to fix the toggle colors too for light mode. And then I guess we'll also have to switch the position of the toggle for that. Let's do the toggle last. Let's just get these colors set correctly. So the next one is the card background. So dark card. And then if we go into card, background is far dark card. And then the text will be the next thing. Um, okay. And then the text. Let's get that hover state. Let's look at the hovers exactly. Oh, and here you go. Oh, what color is that? Uh, 2283391. The dark card hover. I think I didn't make a light card hover. Um, oh yeah, dark card, dark card, cover, light card, light card, cover, hover, hover, 2283391. So then hover, card, hover, card, hover. Okay, let's see if that works. Nice. That's not too bad. It's like once you get things working, then you just kind of have to do the slightly busy work of just, you know, finding and adding each little item. Um, so maybe we can, um, pass forward through me replacing the rest of the colors here. Okay, so we got all the colors switched. And let's test it by changing back to dark mode. Oh, yeah, so we need to fix this stuff. All right, cool. Yeah, it looks pretty good. Now let's work on the toggle stuff. Toggle styles if you're in light mode. 230 1960. Let's see what's this used for. Okay, so I think this color actually needs to be 230 1960. And then then some toggle. Oh, we should see toggle light and toggle itself should be toggle white. And for dark, it'll be, I think it was just white. Yeah. Okay, um, light background. A key. Wait, that doesn't seem right. Right, I haven't nested like that. Okay. And I think it has to be bold. There we go. 700, there we go. Okay, now let's toggle itself. So if it's light, it's just the background color is just like the oval is that really light color. Let's do the background. 230 20 to 74. What was it? 230 20 to 74. That might have been the one I just deleted. Toggle background light. And then, I guess we'll just do toggled background. And then set it to toggle background light. Oh, that's why I added that double one. It's slightly annoying. Okay, and then for the dark mode, then we'll do that linear gradient thing. I don't know, but it doesn't look like it's ever written. I think I find a little annoying and this is because I'm not super familiar with CSS properties but it's hard to find the actual like value for something so for example I want to see what the background color of this toggle background is right now I go to computed it doesn't exist because it's set to a variable so and then you have to go okay toggle background what is toggle background light set to do and then looks like I did that wrong that's why it's not showing up so it's just like extra steps you know I'm just not as familiar I just need to get used to navigating the colors when they're set with CSS properties versus SAS variables which just kind of compile the right where CSS but yeah just one thing that I've kind of noticed toggle background light oops shoot okay there we go and then I'll set this thing okay toggle button toggle button and we want that to be be F1 F 228 46 96 okay I'm gonna make a new one for that toggle button then light 228 46 96 and then set another new variable for toggle button okay toggle button light and then for dark it'll be here we go toggle button toggle button and then for dark toggle button will be set to this this okay nice cool all right so I think the next thing we wanted to do was get the toggle working yeah okay so for the toggle logic what I want is to I guess there's a couple things one is we want the switch to actually control you know what mode you're using two I need to if the user color preferences are set and we're loading the thing we also need the toggle to be set so like right now I have my OS set to light mode and it's low to the light mode but the toggle is still set to dark mode because that's sort of the default thing so I need to sort of auto select on the toggle what the preferences are if they're set so maybe first we will work on maybe having clicking the toggle I need to adjust it's not quite detecting the light mode thing oh yeah because here we go radio buttons need to be set to this size 18 by 18 it's 20 by 24 hmm how tall is the thing itself 24 I think I actually want to be 24 by 24 oh yeah that's much better okay toggle input type radio with this 1.5 rems okay now it's detecting the clicks better okay good so let's work on if I set the toggle to dark mode on to the left it'll have dark mode and then switch to light mode so let's figure out how to do that so I think what I want to do is I need to figure out how controlling the toggle will set the color scheme because right now all I did was change the color variables based on media prefers color scheme and let's see how people do that so I think what Andy did was he set an attribute on the HTML element with the data user color scheme thing okay so let's think about this um so right now let's say is it to light mode if I want to switch to dark mode I'd click the switch and then what I would want is clicking that switch would I guess add a class or something to the HTML and then based on that class it would switch the variables and then in the CSS I would have to I wonder if I could just add another thing here where media prefers color scheme dark and if the thing is detected if the data attribute or the class is selected I'm just trying to see how Andy did it here seems a little bit complicated in these styles the media prefers color scheme all it does is sets the color mode variable to dark um and then I think there's maybe a link between this variable and then if the data user color scheme is set to dark because it's not setting color mode here so there's some link I'm guessing in the JavaScript that if it detects you've set your OS to dark it'll set the color mode variable to dark and then it will set the data user color scheme attribute to dark okay so OS setting to the color color mode variable to set the data user color scheme let me see if I can find where he did that in the JavaScript okay add a function to extract the color mode value I'm not familiar with this let's look that up window get computed style without using I guess using a function get computed style yeah it's a method of the window object so getting a style of getting the computed value of all CSS properties with get computed style okay so it's just getting the CSS properties so he's getting the CSS properties of document element and he's getting the value of the prop key property right this is a condensed version of the function used in this tutorial which I guess we need to read get a CSS custom property value with JavaScript and that is used to get the value of color mode get computed style okay so this example is using support scroll snap variable support scroll snap and then the JavaScript is saying getting the component so he's getting the CSS custom property wait was this this an actual thing I can't I can't tell if this is an actual function or if it was created it's like it's the same okay he's basically doing the same thing um okay it's just linking to this article I can't figure out if get computed style get computed styles an actual function that exists gets you this custom prop function oh here you go oh boy so you're creating a function to get the CSS custom property okay that's fine just seems like a lot of extra stuff I'm curious if thing I want to see how other people implement a dark light mode thing I mean I know this is I'm sure this is like the right way of doing it it just seems like a lot dark mode toggle and CSS tricks let's see if CSS tricks has anything the complete guide to the dark mode toggle okay we'll read read a couple of these things toggling themes okay there's several approaches to do this using a body class separate style sheets custom properties server side scripts okay if you just want to override their system preference for a site looks like he's overriding it with the CSS class so if you select a light theme it will add the light theme class to the body it seems cool I mean it seems like a lot of extra stuff because you're setting the light theme in two places but I guess that makes sense I mean it seems pretty easy you're setting your you're using this button to switch it based on the class this is interesting saying you might have a flash of I guess a flash of color if let's say you your OS is set to a light mode but you manually set the page to load in dark mode and you save that with local storage so the idea is when you reload the page you go back to the website it will detect it'll read your local storage and then change to dark but if lights are default when you hit reload it'll have a light mode initially loaded and then when the JavaScript runs to read the local storage and see that you want dark mode then it'll switch to dark mode but it'll be flashed quickly from light to dark so I'm wondering how Andy got around that let's go to the code pen it's right now um interesting so I set it to dark okay so I said it's a dark let's enable light mode so let's reload and see oh yeah see there's that flash um wait I said it's a dark it's interesting it doesn't seem to be detecting if I'm in light mode so I want light mode so if we reload it should load light mode yeah it's the dark you made a dark default so that's why it's flashing yeah so I guess there's no great way around that um unless you're doing server side so that it'll set it you know before everything's get loaded so it's interesting and whenever there's a way around the that flash thing use your agent styles color scheme meta tag okay so this is light mode even though I've set to dark so I said it's a dark now let's reload hmm yeah there's a flash here too see huh interesting yeah so anytime you use JavaScript it'll have that flash if it's different maybe there's just not a great way to do it so let's think about this um so maybe we'll worry about the flash not at all or another time because this is maybe a bit of an edge case but let's at least figure out how we want the toggle logic to work so Andy Bell did it by adding um a attribute on the html body on the html element you can also do by adding a class on like the body so what I want to do is is there a way to do it so that I can use the same logic for this I can use the same set of rules for the color scheme and also if the attribute or the body class is set and I don't know if I can because this is technically a media query let's see if that's possible let's see if you can do CSS selector media query or has class I don't think it's possible um let's think about this I just don't want to duplicate these rules I don't know if there's a way around that so maybe we'll let's figure out if how we want to set the color with the toggle so if we set it to dark maybe we want to add the class if we set it to light then it'll add the light class to the body so let's see if this works I'm going to create another selector where if the body has class dark can you do that and I guess we'll do another one for light so body has class light root will be and if we end up having extraneous code we can just remove it later but for now let's test this out so let's go back to our site so now it's dark mode because my OS is set to dark let's add oh let's just add class light to the body element oops okay and it's not working and why it's not showing up I wonder if this doesn't work let's just try something color I just want to see if the selector will show up okay so it's showing up but I think I just couldn't set the variables under the body selector so let's wait to see how they did it this is a little start up being kind of easy but then the toggle part seems to be a little bit more difficult okay root level oh okay so it's just in the selector you set the variables to whatever so I don't need this this okay now let's see if it works add attribute class light oh look at that all right now we're going one yeah I think there's no other way of doing it so there's just going to be a bit of duplicate code here okay hey not bad so now we want the toggle to add or remove the class so script can delete this so what we want to do is let's close the others and I want to open my index.html file okay so the toggle if it's select dark we want it to add the dark class but select slightly want to add the light class I'm going to see how Andy did it I'm just sort of using his code as an example oh he's doing a button which is a little bit different let's just close this stuff out so what I'm looking for actually is the JavaScript for the event when you click the radio button all right he's using a button too so let's look JavaScript radio button select event okay so it works to find the selected radio button finally checks property oh okay okay so I guess we can see check if dark is selected is checked or light is checked if RB is checked right plus test this so document get element by ID dark and checked is light checked oh it's true now what what okay so it does work it's going to be const dark and we want to do this if I just do document element by ID if dark is checked then then of course left your body class list equals dark else class list equals light and we want to run this whenever the toggles clicked so this is setting the click event on the button and where's the button element wait where is it button radio button click click so I think I can do a click event on whatever I can do it on like the header toggle input element let's see um so what is it maybe toggle input type radio really I could I think I could add that on so input I guess I just do toggle wrapper input but caught um radio buttons and then for each whoops uh I don't know JavaScript that well um JavaScript ES6 radio buttons click um I think I was thinking of dotnet um so I'm going to find the click event, there you go, event arrow. Let's just do console log, click, right now I'm just trying to test that click one of the radio buttons will run the console. Script line two, assignment time to query variable I. Okay, click. Okay, looks like it's working. So click event is working. Now let us think move this logic in here. So hopefully we click this, we'll see the class getting added to the body element and it should switch. Yay, yes, yes, okay, well I guess that was, I don't know if it was easy. But it's working now, dang, pretty cool. Okay, so we have the toggle working, what we wanted to do now is save your settings. And I guess people seem to be using a local storage for that. So if we manually change the mode and maybe we should add some logic for like if, I don't know if we have to, but I wonder if we have to add logic for if the checking if the local storage matches the prefers color scheme thing, but maybe we don't have to do that. So we'll start with checking, we'll start with saving the mode with a darker light to local storage. Then when we reload the page, we want to check local storage and see if it's darker light. And then I guess add the corresponding class to the body, because if we just load, the body doesn't have anything. Okay, so let's do that. So saving to local storage, let's go back to the handy dandy, handy bells thing, local storage, see, okay, window local storage, okay, local storage dot set item. And then this is the key my cat value is Tom, and then get so it's very similar to a cookie where you can set a value and then get the value. So local storage set item. So I guess in JavaScript, I guess I want to add the logic for if it's checked. So I think I need to make this a full if statement, I feel like people like don't want to use if statements nowadays and I don't quite know why, but I guess we can look that up later, just something I've seen, like I think what they've simplified made a video about that. But we'll just start for now, and then we'll, you know, if we feel like it, we'll check it out later. So if it is dark, we want to set local storage, set item, and I guess we'll just say color mode, and we'll set it to dark, otherwise, we'll set it to light. And I guess maybe we'll also test it so that when we first load the site, we want to load the local storage, get item, color mode, okay, let's see how that looks. So let's set it to light, and now let's reload, and I set the light, and we set the dark, I set the dark. So now here's a test, I set it to light, or actually I guess we can't test it now because we want to get, oh, that's not good, we need to fix that too. Okay, so we want to get the color mode, and then if the color mode is dark, we'll add the dark class. If the color mode is light, we'll load the light class. So what if we need to make some more functions out of this? I think I'm not doing this right. Let's see, there we go, yay, oh boy, yeah, I'm not huge, I'm not super experienced in JavaScript. Just double check that arrow function, two constants, I think I've seen it where you set the variable, or you set the function to like a const or something, or a let. Okay, okay, it looks like that's what I was doing, all right, so I'm getting the color mode, and then should I create another function for like set dark mode, and another one for set light mode, so then set dark mode, we will add dark to the body class, light mode, and then we'll do this, add the light to the body class. And then we'll just use these function names. So then we're not duplicating code, say we'll say set color mode, and then if color mode equals dark, then set dark mode, else set light mode, and then we'll run color mode. Okay, so let's just, I'm going to add some console log messages just to make sure everything's running, set color mode, and then I guess we also want to get the, okay, local storage thing, okay, color mode is set to light. And it looks like it is saving the toggle thing, I don't know if I, I don't think I read logic for that, maybe it's just saving, it's interesting, oh yeah, I think I was just saving the radio button position, like if I hit reload when I'm already there, would I do like a hard reload? Yeah, but it seems to be working, I reloaded start mode, then select light mode, and then reload, it's set to light, so I see to add some logic to sort of auto select the thing, so local storage, we'll add another one, if local storage color mode is dark, else, and then what was that, oh yeah, so if I'm checking local storage, I want to set the radio button to, I want to auto set either dark or light on the radio buttons, what if I can do this, will this work, or do I have to click it, and a bit listener, click, oh no, or do I just do click, okay, I guess I'd just click, maybe I'll set a constant for the dark and the light buttons, so then I can just refer to those when I need them, so then we'll replace the air, so if dark button is checked, then select dark, and then now I will do, if color mode is set to dark from the local storage, I will say dark button, click, otherwise I will say light button, click, all right, see if this works, so I'm set to light mode, so I want to do a hard refresh, and hopefully it will select the light setting, okay, cool, now let's test this by maybe removing the, where do I remove the local storage, storage, here we go, kind of clear, delete all, there we go, now we'll do a hard refresh, hmm, and I want it dark to be default, and it looks like, let's see here, no local storage is set, set color mode nothing, it's null, so let me see here, so why is it loading the light, I'm curious about that, I don't know if I just open a new browser window, okay, so color mode is null, and let's check the body class, no interesting, body class is set to light, why is that happening, we'll add some more console log messages here, ready button clicked, so let's save that, and now if we do a hard refresh, set light mode is running, now why is set light mode running, set color mode ran, and then local storage is blank, so it returned the null, and then set light mode ran, oh it's because of this, hmm, because it's not dark, so it was null, which means since it's not dark it's running light mode, so now, yeah if we do a hard refresh, it's null and then it's loading dark mode, so it's working, yeah cool, let's also test it by empty local storage, really all, I think set to dark, it's loading dark if it's set to light, loads light, okay, oh this is not working either, so this is just based on the prefers color scheme, so I want to do is I need to check the prefers color scheme, and then set the toggle, so how do I do that, set the toggle position based on the color scheme that you've set, hmm, how do I check the prefers color scheme with JavaScript, let's add some of these things, JavaScript check prefers color scheme, so it's the window get computed style, which I think Andy was using, hmm, wait where's the code, oh what's interesting, window match media, hmm, that's interesting window match media, let's test it, let's change to dark mode, oh, hmm, that was weird, why didn't it change from light to dark, weird, weird, okay, so we can just use this logic dot matches, so what I want to do is if the, let's go back to our site, so by default it's in this position, so if I wanted to, I want to detect if it's in the light mode, const, hmm, get color mode now, or else do light, because we got dark to be default, and then, hmm, I think actually all I have to do is check for light, because it's dark by default, I'm not sure why I was doing this return stuff, so I think I just need the one condition, check is light, so if it is then, I want to select document or light button click, I think that's all I need to do, and then I want to run this, okay, so what I want to do is if I select light mode, it should go to light mode and then the radio button should switch to light, ah, oh, because I need, I think I need to reload the page in order for that to work, yeah, so now it's working, but you want to run the thing when you change, so I don't even know if it's possible to detect the change, that's kind of annoying, so how can you detect, can you detect the change of your color mode, like through JavaScript, there's a lot of levels of complexity to this, can you detect the prefers color scheme change, how often would that actually, oh, Fabio, I was wondering how often would it actually, would you actually need this, so if we delete this, do a hard refresh, I think I did set light as a default, right, did I do that, I can't even remember anymore, okay, yeah, so default is light mode, because this should switch it to dark and toggle is not changing, hmm, so I did this window match, media matches, yeah, what if these are change mode while using the website, can you check the mode change using an event listener, ooh, to add an event listener, oh my gosh, thank you, Fabio, I think what I want to do is rename this to, or hold on, let's, let's make a new function maybe, for what is this, check mode change for lack of a better word, okay, so we just want to save that there, so I think I need to change this check mode, and then make this check for dark, and run this function, I wonder why it has to be dark, let's add a little console log here, oops, all right, oh, I forgot to change the check mode, okay, so it's null, so it's light, now let's change the dark, ooh, some stuff ran, cool, check mode changed, click the radio button and set dark mode, hey, now we set to dark mode, now let's load, oh my freaking, so I think local stores needs to trump whatever your preferred color scheme is, because I'm in light mode, but I made it look like a dark mode, I want that to save, it was quite, yeah, a little more complicated than I was thinking, so right now, let me think about this, so I think I only want to run these things if local storage is not set, okay, now let's change to, so I set it to dark mode, okay, let's just start from the beginning, storage, delete all this stuff, do a hard refresh, okay, so by default we're in light mode, which makes sense, now if we switch this to dark mode, okay good, switch to dark mode, it switched the radio button selector, change back to light mode, oh lord, I think I need to also change the local storage if the thing gets changed, this is hard, so there's like, there's three things controlling this, it's local storage, your preferred color scheme, and then if you manually click the radio button, so I need to add, I think, is if the color scheme changes, I actually do want to, if it changes, no, hold on, if it changes, local storage is not set, but the radio button, I think it stayed dark because the radio button was set to dark, okay, let's start over, okay, nothing's been set, no local storage has been set, this is the light by default, because I have my scheme set to light, so if I change to dark, goes to dark mode, the toggle goes to dark, and the local storage has been changed to dark, okay, so if I reload, everything stays at dark, everything stays at dark, but now if I change a color scheme to light, nothing happens, and this is because local storage is still set to dark, so I guess the question is, maybe I'm overthinking this because sure, I changed to light, but I can just change to light with the radio button if I want to, so does that seem like it's desired behavior, let's start over again, so light mode, light mode, let's say, oh, I'm in light mode on my OS, but I want to load dark mode manually, so I said it's a dark, so now if I refresh, it's in dark mode, that seems like desired behavior, so let's delete this, now back in light mode, so let's say, oh, I'm going to switch my thing to dark mode, I want everything to be dark, and it did do that, but if I switch to light mode, it stays in dark mode, but I feel like people aren't going to be switching their OS all that often, so I feel like, I think maybe that's okay, I think this is an edge case that I'm thinking where you're like switching your color mode multiple times, I feel like this is operating the way I want it to, yeah, switch to light mode, high reload, it stays light, I think this is actually okay, so I think this works, let's just quickly check about the if statements, don't use if statements, use object literals, and this might be a little beyond my current JavaScript skills, but let's check it out, all right, so there's a lot of if else if things do, do, do, do, do, do, do, use a switch statement, which is sort of the same thing, here's the alternative, so you're setting create an object, hmm, I don't know, I'm not sure how this will work with this, hmm, well, I think I'm going to keep this as is, you're welcome to check out my code on my github repo, and if you want to refactor this to a better way of checking for the conditionals, you know, you're definitely welcome to do that, but I mean, it works, I think the code is reasonably understandable in terms of checking the different, you know, modes and setting local storage and stuff like that, so I feel like we can sort of consider this project complete, yeah, so yeah, thanks for following along with this, if you follow it all the way to the end, thank you for doing that, I hope this has been helpful for you, feel free to leave a comment down below if you, you know, did make it all the way through, I'd just be interested to see how many people did that, and yeah, if you have any questions, you can again leave a comment, so thanks for watching, and yeah, we'll see you in the next video!
