With timestamps:

00:00 - When I first learned Git, one of the most
confusing topics to me was merge
00:04 - conflicts. It seems like I always found
myself in a merge conflict I didn't know
00:08 - why and I didn't know how to get out of
it. But really they're not that
00:11 - complicated. A merge conflict occurs when
there's been a change in the same file
00:15 - in the same line on the two branches
you're trying to merge together. So here,
00:21 - for example, if we're working in index.html on two branches and there have been
00:25 - changes in line four in both files that will
generate a merge conflict. Now, for
00:31 - example ,this is just one conflict there
could be multiple files or even multiple
00:36 - portions of the same file with conflicts
but for now let's keep it simple. So, Git
00:41 - tells you there's a conflict.
00:43 - What do you do next? My favorite next
step is to run 'git status'.
00:47 - It's an easy way to clear my head and
see exactly which files have the
00:51 - conflicts in them. Once I know what file
to look at, I open it up in my favorite
00:56 - text editor and I look for these merge
conflict markers. Once you find the merge
01:01 - conflict markers, all you need to do is
pick the version of code that you'd like
01:05 - to keep and get rid of the merge
conflict markers. One version will be
01:10 - above equal signs and the other will be
below. You can pick one, delete them both,
01:14 - or create something totally new.
01:16 - Git doesn't care. Just make sure the code
looks the way you want it to and get rid
01:20 - of the merge conflict markers. Save those
changes and commit them and Git will
01:25 - know the merge conflict has resolved.

Cleaned transcript:

When I first learned Git, one of the most confusing topics to me was merge conflicts. It seems like I always found myself in a merge conflict I didn't know why and I didn't know how to get out of it. But really they're not that complicated. A merge conflict occurs when there's been a change in the same file in the same line on the two branches you're trying to merge together. So here, for example, if we're working in index.html on two branches and there have been changes in line four in both files that will generate a merge conflict. Now, for example ,this is just one conflict there could be multiple files or even multiple portions of the same file with conflicts but for now let's keep it simple. So, Git tells you there's a conflict. What do you do next? My favorite next step is to run 'git status'. It's an easy way to clear my head and see exactly which files have the conflicts in them. Once I know what file to look at, I open it up in my favorite text editor and I look for these merge conflict markers. Once you find the merge conflict markers, all you need to do is pick the version of code that you'd like to keep and get rid of the merge conflict markers. One version will be above equal signs and the other will be below. You can pick one, delete them both, or create something totally new. Git doesn't care. Just make sure the code looks the way you want it to and get rid of the merge conflict markers. Save those changes and commit them and Git will know the merge conflict has resolved.
