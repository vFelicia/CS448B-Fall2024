With timestamps:

00:00 - hi guys welcome to this video
00:03 - in this video we're going to be learning
00:04 - django by building three different
00:06 - projects so the projects we're going to
00:08 - be building are a url shortener
00:11 - a to-do list app
00:12 - and an english dictionary so without
00:14 - wasting any of your time let me show you
00:16 - the demo of everything we're going to be
00:18 - building so the first one i have here is
00:20 - the url shortener so let me show you how
00:23 - this works if i go to google and i
00:25 - search for a term like python
00:28 - once i click on enter you see that it
00:30 - gives me this link
00:31 - to the search page
00:33 - but the link is very long
00:35 - now if i come here and then paste that
00:37 - link
00:38 - in here
00:40 - let me just remove this and click on
00:42 - shortened
00:44 - you see that generates this link for me
00:46 - this shorted link now once i copy this
00:48 - shutting link and then go open it
00:51 - in a new tab you see it automatically
00:53 - redirects me back to the link which i
00:56 - shortened now that's how the url
00:58 - shortness going to work now the next app
01:00 - we're going to be building is the to-do
01:02 - list app
01:03 - now let me show you how the to-do list
01:04 - app is so if we come here you're going
01:07 - to see
01:08 - a jungle to-do list app this is what
01:10 - we're going to be building and we're
01:13 - going to host all the apps in which i'm
01:15 - talking about so how this works is you
01:17 - can add a to-do list so let me say
01:20 - something like
01:22 - get a drink
01:26 - i click on add
01:28 - you'll see that it automatically adds it
01:30 - to those list and once i click on delete
01:34 - right here it automatically deletes it
01:36 - from the list so that's what we're going
01:38 - to be building and the third one we're
01:41 - going to be building is an english
01:42 - dictionary so if i come here
01:44 - and i search for a word like english
01:48 - once i click on search
01:50 - it's going to give me the meaning the
01:52 - synonyms and the antonyms so you see the
01:54 - meaning of the word the synonyms of the
01:56 - word and antonyms of the word now let me
01:59 - search for something else like set once
02:02 - i click on search
02:04 - it's also going to give me the meaning
02:05 - of the word a whole bunch of synonyms
02:08 - and antonyms that's what we're going to
02:10 - be building now i must say that we're
02:12 - going to deploy all the projects in
02:14 - which we're building and i'm going to
02:16 - link the source code to all this project
02:19 - in the description below so if you're
02:20 - stuck you can easily follow up and you
02:23 - can get all the html files and the
02:25 - templates we are using through the
02:27 - source code in the link below and if you
02:30 - like more tutorials like these don't
02:32 - forget to check out my channel at
02:33 - goodwithtomy having that said let's go
02:36 - straight into the tutorial
02:40 - [Music]
02:44 - so guys in this tutorial session we're
02:46 - going to be building a url shortener
02:48 - using django so the first thing we need
02:51 - to do as always is to make sure that we
02:53 - have django installed i'm just going to
02:55 - say beep install jungle
02:58 - and then this command line is going to
02:59 - install django on my computer but since
03:03 - i already have django installed it's
03:04 - going to tell me something like
03:05 - requirement already satisfied as you can
03:08 - see
03:08 - but for you you should go ahead and
03:10 - install that so let's just create our
03:12 - django model
03:13 - say django admin
03:16 - let's say start project
03:20 - and then let's name it url shortener
03:27 - so
03:27 - now we have created a new project named
03:30 - url shortener let's just go into that
03:31 - project
03:36 - so in here i'm going to create a jungle
03:38 - app
03:39 - so i'm going to say django
03:41 - admin
03:43 - start app
03:45 - and let's name it shortener
03:47 - [Music]
03:48 - so this is going to start a django app
03:50 - name shot now if i press d i out i'm
03:52 - going to see short now so now that we
03:54 - have our project setup we're just going
03:55 - to import it in visual studio code so
03:57 - let's come here
03:59 - and then what we just need to do is to
04:00 - open folder
04:02 - and then we're going to go into that
04:03 - folder
04:05 - so right here is the folder and select
04:08 - folder now it's going to open this my
04:10 - django project in this code editor so we
04:13 - can code so now that we have this opened
04:15 - what we just need to do is to set up our
04:18 - project
04:19 - so the first thing we need to do is to
04:22 - create a new folder and name it
04:24 - templates now in this template folder
04:27 - what's going to be in there is the html
04:29 - pages in which we are going to be using
04:31 - in this project
04:32 - but before i continue i have my html
04:35 - page here which is index.html i'm just
04:37 - going to drag it into visual studio code
04:41 - and i'm gonna put it in template
04:43 - so let me say once again that i'm gonna
04:46 - link everything we're gonna use in this
04:47 - tutorial i'm gonna link the source code
04:50 - in the description below so you can
04:52 - check them out to get any file you need
04:55 - now that we have these we're just going
04:57 - to come into our url short now
04:59 - go into settings.py
05:01 - and then we're going to come down
05:04 - the first thing we need to do is to add
05:06 - our app which is shortener
05:09 - now that we've added that
05:11 - we're going to come down into templates
05:13 - and we'll look for this i'm just going
05:15 - to say based there
05:18 - i'm going to say slash templates so what
05:21 - this does
05:22 - is that it tells jungle we have to look
05:25 - for all our templates file and as you
05:28 - know we saved it in our base directory
05:31 - in a folder called templates which we
05:33 - created right here let me save this
05:35 - settings.py and close it
05:38 - now i want to do the url mapping if i
05:40 - run my project now what you are going to
05:42 - see is jungle default template so we
05:45 - want to show our own html template first
05:48 - to do this we are going to come into our
05:50 - app
05:51 - create a new file name it urls.py
05:55 - and then we'll say from jungle
05:58 - dot urls
06:00 - import
06:01 - path
06:02 - and then we're also going to say from
06:04 - the roots
06:06 - import
06:07 - views
06:09 - now we're going to say url patterns
06:12 - should be equals to
06:14 - path
06:15 - home
06:16 - safe views dot index
06:19 - i'm going to give it a name of index
06:23 - so now what we just need to do is come
06:25 - into views and create a new function and
06:27 - name it index it's going to take a
06:29 - request
06:32 - and then let's render our html page
06:34 - which we have in here that is index.html
06:37 - so say return
06:40 - render
06:42 - request
06:44 - index.html
06:46 - now when we save this issue
06:48 - automatically use this index.html as our
06:50 - own page
06:51 - but not yet that's because we only did
06:54 - url mapping for
06:56 - our app we also need to configure it for
06:59 - our main project so we're going to come
07:01 - into our main project go to urls.py
07:04 - what we're going to do right here is to
07:05 - import include
07:08 - and then we're going to create a new
07:09 - path
07:11 - and then let's give it
07:13 - blank and we're going to say include
07:17 - shortener
07:18 - dot urls
07:20 - i'm gonna save this now i can cancel
07:23 - this now let me open a new terminal and
07:25 - just run our project
07:27 - so now a new terminal is being popped up
07:30 - and what i'm just going to say is python
07:32 - manage the py run server
07:36 - now this command line is going to run
07:38 - our project on the localhost so let's
07:40 - just wait for it to run our project
07:42 - quickly okay as you guys can see it's
07:44 - running on our locals let's open our
07:46 - browser
07:48 - go to our localhost and then we should
07:50 - see our html page as you guys can see we
07:53 - have this beautiful html page so now
07:56 - that we've taken care of everything
07:58 - about the template let's dive straight
08:00 - into configuring the back end so what i
08:03 - want to do is to create a django model
08:05 - that is going to save
08:07 - a url anytime a user imports a url and
08:11 - then shorten it so let's just go ahead
08:13 - and do that let's come back to official
08:15 - studio code we can close this
08:19 - and in our modules.py file let's create
08:21 - a new model
08:23 - let's say class
08:25 - and let's say links
08:27 - okay
08:29 - or let's name it urls i think that's
08:31 - better so url
08:33 - and we'll say models dot model
08:37 - and then you should take
08:39 - two fields which is link
08:42 - so say models.chat field
08:45 - and let's give it a max length
08:47 - of ten thousand
08:49 - because some links are very long and
08:52 - let's give it a uuid
08:55 - as a models dot character field also
08:59 - and the max length of these
09:02 - should just be 10.
09:04 - now what this is doing is that
09:07 - are very familiar with django models you
09:10 - know that is the same thing as a
09:11 - database so we're creating a database
09:14 - named url and it's going to have two
09:16 - tables the first one is going to be link
09:19 - and the second one is going to be uid so
09:22 - link is going to take
09:24 - the url which is i want to shorten so
09:26 - once the user come here and you put a
09:28 - url right here
09:29 - and click on shorting whatever that
09:32 - user's input should save in this link
09:34 - model and then
09:36 - a uid should be passed to that link that
09:40 - is a specific id will be passed to that
09:42 - link you guys are going to understand in
09:44 - a bit so let's save this first let's
09:47 - bring back our
09:49 - let terminal
09:49 - just open the new terminal here quickly
09:52 - and then let's say python manage dot py
09:55 - make migrations
09:59 - and then after making migrations we say
10:01 - python
10:03 - manage
10:04 - the py
10:06 - migrate
10:08 - so now this is going to migrate
10:09 - everything into our database
10:12 - so now that we have uh
10:14 - models migrated what i like to do is to
10:17 - configure my admin interface so i can
10:19 - easily see my database so let's just say
10:21 - python manage the by create
10:25 - super
10:28 - user
10:31 - so now let's just use the admin
10:34 - and let's also use admin right here
10:39 - let's give it a password
10:41 - now it has okay y and now it has created
10:44 - that super user we can cancel this if i
10:47 - come back here and go to slash admin
10:52 - okay slash admin
10:55 - it's going to prompt me to login now
10:57 - once i log in with the details in which
10:59 - i created now
11:01 - and i say login
11:03 - now you guys will see
11:06 - that we've logged into our admin
11:07 - interface so for now we only have two
11:09 - database which is users and groups so if
11:12 - i open my user database you're going to
11:14 - see the admin which we just created but
11:16 - what i want to do is that under here we
11:18 - should also have a new database which
11:21 - should be urls so let's go ahead and do
11:23 - that we're just going to open our
11:25 - admin.py and register that model
11:28 - first of all we need to import the model
11:30 - save from dot models
11:33 - import
11:35 - url
11:36 - right here we say admin dot site
11:40 - the register
11:42 - now let's register that url
11:45 - now once we save this and come back here
11:47 - and refresh
11:49 - you're going to see that that is going
11:50 - to pop up right here so let's wait for
11:52 - our server to load so if we come back
11:55 - here and open up our terminal
12:00 - okay our server is loaded back
12:03 - now once we refresh you guys can see
12:04 - that we now have a new database table
12:06 - which is called urls so now that we have
12:09 - these
12:10 - let me go to my home page once the user
12:12 - just clicks
12:14 - input a url clicks on shorting it should
12:17 - automatically
12:19 - save that url into this database and
12:22 - since we're going to be using ajax
12:25 - it's not going to reload this page now
12:27 - you know that once you submit a form in
12:29 - html it's going to take you to another
12:31 - page or reload that page but we're going
12:32 - to use ajax to submit this form so once
12:35 - the user just input a particular url
12:37 - right here
12:39 - what's going to happen is
12:40 - once you click on shorting without the
12:43 - page reloading it's going to be saved
12:44 - into this database and then it's going
12:46 - to return back a response with a unique
12:48 - id so let's go ahead and do that you
12:51 - understand what i mean
12:53 - now we're just going to come back
12:56 - we're going to come into our index.html
13:00 - that is our template file
13:03 - so let me cancel this terminal for now
13:06 - what i want to do is to go down into
13:09 - this input
13:10 - so right here
13:12 - is this so what i'm looking for is this
13:14 - input and i want to make it a form
13:16 - so let me come back
13:18 - so i'm gonna say
13:21 - form
13:23 - and then i'm gonna close it
13:26 - right here
13:31 - so let me just delete this
13:34 - so what i was going to give this form is
13:36 - an id that's the only thing so i'm going
13:38 - to say id
13:40 - and the id should just simply be
13:43 - let me say my form or post form
13:48 - now this is good and we're going to be
13:50 - using a post method so when was in the
13:53 - post method in ajax
13:56 - we're not going to configure it right
13:57 - here
13:58 - but we're going to configure it in the
13:59 - script so you're going to see that also
14:02 - in a bit
14:03 - so let me say
14:04 - csrf underscore token
14:10 - and save
14:12 - so this button let me give it a type let
14:14 - me say type should be submit so that
14:17 - once they click on this button you
14:18 - should submit this data and this also
14:21 - should have a name
14:22 - let me save it as okay it doesn't have a
14:24 - name
14:25 - so say name
14:27 - should be equals to
14:29 - link
14:32 - so now that we have these
14:34 - what we just want to do
14:37 - is to come down
14:39 - after all our html and create a script
14:45 - let's just close that
14:47 - and then let's make sure that it has the
14:49 - type
14:51 - we'll say text slash javascript
14:59 - so what we just want to do now let's
15:01 - give it some indentation we're going to
15:03 - say dollar sign
15:05 - and then is now we're going to start
15:07 - with configuring or submitting our form
15:10 - so before we start doing this
15:14 - let's come into
15:16 - our
15:17 - views.pri
15:18 - so once the user clicks on
15:21 - shorting right here we wanted to take
15:23 - this to a particular url
15:25 - so that url is going to be called create
15:27 - so in that url
15:29 - it's going to create that in our
15:31 - database and then send the response here
15:34 - let's do that quickly so i'm going to
15:36 - come back
15:38 - right here in
15:40 - urs.py let's create a new url and name
15:44 - it create
15:46 - let's say views dot create
15:49 - name equals to create let me show this
15:51 - as a comma
15:53 - then write in views
15:57 - create
15:59 - request
16:03 - and then let's pass for now so now let's
16:06 - save this so after doing this since we
16:09 - have this url what we just want to do
16:11 - now is to come here and submit that form
16:13 - to this url so once we submit this form
16:15 - to that url then we're going to come
16:18 - back here and then get everything in
16:20 - which the user inputted and just save it
16:22 - into our database so let's do that so
16:25 - after saying dollar sign i'm going to
16:27 - say
16:28 - document
16:32 - and then what i want to do is
16:34 - dots on submit
16:36 - so let's open a bracket
16:38 - submit
16:41 - on submit of post form
16:46 - hashtag
16:47 - right
16:49 - here hashtag post form
16:53 - now how we are getting this post form is
16:55 - basically this form so what we're saying
16:57 - is on the submit of post form damage
16:59 - once user clicks on this submit of this
17:01 - form
17:03 - what we want to do
17:04 - let's give it a function
17:09 - so that should be outside piece comma
17:12 - function
17:14 - should be outside that
17:18 - and let's say e
17:21 - is like this
17:23 - so now what we just want to do
17:26 - is to say e dot prevent
17:29 - default so what this e dot prevent
17:31 - default is going to do is that once a
17:33 - user clicks on submit of this form it
17:36 - will make sure that that page doesn't
17:38 - reload
17:39 - so now that we have that covered
17:42 - let's now use our ajax so say dollar
17:44 - sign again dot ajax
17:48 - and endless open curly braces press
17:52 - enter
17:53 - then the type which is also the method
17:56 - should be posts
18:01 - and then
18:02 - url
18:04 - it should be taken
18:06 - to slash great
18:12 - so come on
18:15 - and then the day time which you want to
18:16 - pass into it so let's do this
18:20 - and then the link
18:24 - dollar sign
18:30 - hashtag link
18:34 - dot value
18:40 - so now we're going to say csrf
18:44 - middleware
18:48 - token
18:51 - dollar sign
18:54 - and then inputs
18:56 - before we say input put these
19:00 - square brackets let's close that real
19:03 - quick and say name
19:07 - the name should be csrf let me do
19:11 - where
19:13 - token
19:14 - so that's what that does
19:16 - and then after this we should say dot
19:18 - valve to get the value
19:20 - so we're also sending in a csrf token
19:24 - so after doing this we're just gonna
19:26 - come
19:27 - down here and click on comma
19:30 - and then let's also give it a success
19:32 - function
19:34 - so after doing these
19:38 - okay in here we're gonna say
19:41 - success
19:45 - and let's give it a function so that
19:47 - means if everything has been submitted
19:49 - successfully
19:51 - for now let's leave it blank
19:54 - like this
19:57 - so let's just leave everything blank for
19:58 - now and let's come here and make sure we
20:00 - put our semicolon since we're working
20:02 - with javascript
20:04 - so now that this success function is
20:07 - uh let me say is
20:10 - blank we're going to take care of that
20:13 - after we submit our form so now let's
20:15 - save
20:16 - so since we're sending all this data
20:18 - into our create url let's go into our
20:21 - create url and get those data
20:23 - so right here in this views dot py we're
20:26 - going to go into that function
20:28 - let's remove this path and say if
20:30 - request
20:33 - that method
20:36 - is equals to post
20:38 - now if they are sending a post method
20:42 - let's say url
20:44 - should be equals to
20:46 - post
20:47 - dot
20:49 - it should because request dot post
20:54 - link
20:56 - so we're getting what the user
20:58 - put as this link and store it in a
21:00 - variable named url
21:02 - and then let's also use a uid
21:07 - so once the user also stores that
21:09 - variable
21:10 - once the user stores that link i mean we
21:13 - also want to assign a particular id
21:16 - to that variable so that we can use that
21:19 - id to generate a shortened link and once
21:21 - that goes to that shortening link it
21:23 - should come back to this url so it's
21:25 - going to make sense also let's just
21:27 - import
21:28 - uuid to get
21:31 - a unique id
21:34 - so i'm going to say string
21:37 - we want to make sure it's in a string so
21:39 - say that uuid
21:41 - does uuid 4
21:45 - open bracket close bracket
21:48 - and then what you just want to say
21:50 - square brackets
21:52 - column five so what shortening because
21:54 - when this generates a unique id it
21:56 - generates is very long but want to
21:58 - shorten it to only five strings
22:01 - so let's
22:02 - save okay we don't need to save yet
22:05 - so what we need to do now
22:07 - is to
22:08 - after we get all this data we just want
22:10 - to save this data in our database first
22:12 - to do this we need to import our modules
22:14 - we say from dot models
22:16 - import
22:17 - url
22:19 - so right here now we're just going to
22:20 - say
22:21 - new
22:23 - on
22:24 - url should be equals to
22:28 - url
22:32 - dot
22:33 - url
22:35 - open bracket close bracket and the link
22:38 - should be equals to the url
22:42 - and then
22:43 - uuid
22:45 - should be equals to uid
22:48 - now once we have these we're just going
22:50 - to say new url dot save
22:54 - and then once we save these
22:56 - we just want to return a response say
22:58 - return
22:59 - http response but before we use that we
23:01 - also need to import http response say
23:03 - from
23:04 - django.http
23:07 - import
23:10 - http response right here so say return
23:14 - an http response
23:17 - of
23:19 - the uid
23:21 - now we can save this
23:25 - once we go back here and test this now
23:27 - it should work
23:28 - let's refresh this page
23:31 - now let's give it a url
23:33 - let's do something like https
23:37 - then let's say www.youtube.com
23:41 - slash code with tommy
23:45 - okay this is slash
23:47 - now once i click on shorting
23:50 - nothing happens but if i come right here
23:52 - and click on refresh
23:54 - as you can see nothing happens again so
23:58 - we need to open our inspect element
24:03 - right here we're gonna come to the
24:05 - network
24:08 - so now let's try it again let's click on
24:10 - shorting so as you can see we have an
24:12 - error
24:14 - and this is what the error is okay
24:17 - it's giving us a jungle error actually
24:20 - so let's just
24:21 - enlarge these and see
24:24 - so let's go and see where the area is
24:27 - coming from
24:30 - it's coming from right here
24:32 - so request dot post link
24:35 - so there is an arrow actually right here
24:38 - let's see why that is giving us an error
24:42 - so i'm gonna go back and just check that
24:47 - let's come here
24:49 - so right here instead of saying url
24:52 - let's give it a link
24:54 - unless a link should be equal to link
24:58 - and then
24:59 - let's make sure everything is working
25:01 - perfectly so say if request the method
25:05 - is equals to post
25:07 - then let's start a link should be
25:09 - request dot post
25:12 - link
25:13 - and then uid should be string
25:15 - now that is nice let's save it and go
25:17 - try it again
25:19 - now let's close this
25:22 - let me just copy the issue area i want
25:23 - to shorten now let's refresh this
25:26 - and paste and then click on shorting now
25:29 - it gives us an error now we're going to
25:31 - see what's up
25:32 - okay i think it's not getting this link
25:35 - in which we are trying to give it
25:38 - so let's see let's go down again so it's
25:40 - not getting linked
25:42 - the program will be from index.html
25:46 - so it's not getting linked we're gonna
25:48 - come here
25:51 - so i think the id
25:53 - should be linked okay not this
25:56 - the id should be linked
26:00 - let's save it
26:01 - i need to refresh
26:05 - and let's click on shorting as you guys
26:07 - can see now we don't have any error
26:09 - again
26:10 - once we come here now preview
26:13 - everything is nice so this is the uid
26:16 - which we are returning as an http
26:18 - response right
26:20 - here as you can see we return an
26:21 - initiative response there's the response
26:23 - it gives us if we come here and hit
26:25 - refresh
26:26 - we'll see that we now have a new object
26:30 - the link with the uid so let's try it
26:33 - again
26:35 - so let's see let's just say youtube.com
26:38 - and let's click on shutting
26:40 - it does another one with a uid also once
26:44 - you click on refresh and we come in here
26:47 - you see that link with that
26:50 - uid
26:51 - so now what we just want to do is to
26:53 - show the user the shorted link in which
26:55 - we generated
26:57 - so for us to do this we're going to come
26:59 - right here into our index
27:03 - we want to create
27:05 - in this section after the form
27:08 - let's have our own div tag
27:11 - and in that div tag let's create like an
27:14 - h2 tag
27:17 - so in this http is where the link should
27:19 - be for now let me put link and refresh
27:21 - so see how that will look okay it's in
27:24 - this shorting so let's just
27:26 - bring out this away
27:29 - and then put it outside here
27:34 - so let's save this and see again
27:37 - okay same thing so let's just remove the
27:40 - div tag which we have i think there's a
27:42 - styling attached to that div tag
27:44 - now once we refresh it should just be a
27:47 - link okay now is there's a stanley
27:49 - attached to the h2
27:51 - nice so what i just want to do is to
27:53 - remove this
27:55 - from main
27:57 - and just remove this and put it right
27:59 - here let's save it and see
28:02 - okay it's outside okay yes so what we
28:05 - just want to do now let's try and put it
28:07 - here
28:09 - let's hit refresh
28:11 - nice so we just put it in this section
28:14 - and now we can see that the link is
28:16 - showing that so this is where we want
28:17 - the link to show now let's just remove
28:19 - this link
28:21 - and leave it blank so once we get an
28:23 - http response we want to show the link
28:26 - right there if i save it i'll come back
28:29 - you can see that it's blank but once
28:31 - we're shutting the url we want to see
28:33 - the link pop up here for us to do this
28:36 - we're going to come back to our script
28:38 - where we see that success function we're
28:40 - going to get the http response now
28:43 - whenever we're returning an http
28:44 - response for us to be able to get that
28:47 - response using ajax we're going to get
28:50 - it as a variable named data so i'm going
28:53 - to say data now this data is a variable
28:57 - which has the http response stored in it
29:01 - so in here
29:03 - we're just going to say
29:04 - dollar sign
29:08 - h2
29:12 - and then what we just want to say is
29:14 - that html
29:18 - and then let's change that to
29:22 - let me
29:24 - give it this
29:25 - let's just simply change that to low
29:27 - cost
29:30 - 8000
29:33 - slash
29:34 - let's add data
29:36 - now if i save this and go you are going
29:38 - to see what it looks like
29:41 - so let me refresh it
29:43 - let me put that same thing as shorting
29:45 - now once i shorten you see it gives me
29:47 - this link which is locales 8000 slash
29:51 - this uid which was assigned to this url
29:54 - so now for now we're just using local
29:56 - slash because we've not uh deployed our
29:59 - app
30:00 - to
30:01 - on the web so once we deploy our once we
30:03 - host our this our app we're building on
30:06 - the web
30:07 - we're going to use a specified link
30:09 - we're not going to use localhost 8000
30:12 - but i'm going to use let's say link dot
30:14 - ml slash this or just a short link but
30:16 - for now let's stick with 8 000.
30:18 - localhost 8 000.
30:20 - so now what i want to do is that once
30:21 - these are now copy these links open a
30:24 - new tab and go to that link
30:26 - it should take the user
30:28 - back to that url in which is shortened
30:30 - that's how a url short network so for
30:32 - now the same page not found
30:34 - let's go and do this
30:37 - i'm just going to come right here into
30:40 - urls
30:43 - i'm going to create a new url and name
30:46 - it
30:47 - let's leave it blank
30:48 - and
30:49 - it take a string it's going to be a
30:50 - dynamic url
30:52 - and say pk so say views.let's say go
30:56 - and go so let's come into views create a
31:00 - new function
31:01 - name it go
31:04 - request
31:07 - and let it also take pk
31:10 - so now once we have this we're just
31:12 - going to get pk and then what we just
31:14 - want to say
31:16 - is
31:18 - url details
31:22 - should be equals to
31:24 - url
31:28 - dot object
31:31 - dot get
31:33 - the one in which the uuid is equals to
31:36 - pk
31:38 - and then let's just return
31:42 - want to redirect so we need to import
31:44 - redirect right here
31:49 - i'm just going to scroll down return
31:52 - redirect the user to url details dot
31:56 - link
31:58 - now let's save this now what we're doing
32:00 - is that once the user goes to slash
32:03 - let me come into our url.py so this is a
32:07 - dynamic url it's going to create
32:09 - something like slash then it's going to
32:10 - take a string and save it in a variable
32:12 - name pk so what is that comes to slash
32:15 - this uid
32:17 - it's gonna this string pk is gonna be
32:19 - replaced and what's gonna be there is
32:21 - this id so once we now have this id
32:24 - we're gonna come into our view.py get
32:27 - that id as pk
32:29 - then we're not going to search for our
32:31 - model
32:32 - and make sure
32:34 - that that uid is present in our model
32:37 - and a link has been assigned to it and
32:40 - then we're going to get that link so i'm
32:42 - just going to say return redirect url
32:44 - details dot link so i just redirecting
32:46 - the user to that link so let's save it
32:49 - and test this out
32:52 - so now let's refresh
32:57 - okay our server is not running let's pop
32:59 - it up
33:01 - okay
33:02 - the problem is here we need to put a
33:04 - comma let's save that
33:07 - reload reload so now let's refresh our
33:10 - app
33:11 - now let's just put www dot
33:14 - youtube
33:16 - dot com slash code with tommy and let's
33:19 - click on shorting it gives us a url
33:22 - we copy it
33:24 - paste it right here
33:26 - so now you can see it says page not
33:28 - found
33:29 - www.youtube.com so we need to pass this
33:32 - as a url for us to do this we'll come
33:35 - back here
33:36 - we're gonna say
33:39 - https and this now once we save it and
33:42 - come back
33:45 - let's copy this our page again is our
33:47 - url and paste it
33:50 - now you'll see that it takes me to that
33:52 - page you see it takes me to https
33:55 - youtube.com
33:57 - so now let's come back
34:00 - let's try it out with another url let's
34:03 - see www dot
34:09 - and once i click on shorting it gives me
34:11 - that url
34:13 - let me copy it
34:15 - and paste it right here
34:18 - now you see it takes me to
34:19 - socialblade.com now that's how our url
34:21 - shot now works so i hope you guys
34:24 - enjoyed and understood what we did in
34:26 - this video if you did please don't
34:28 - forget to smash that like button and
34:30 - please subscribe
34:31 - thank you for watching this session
34:35 - [Music]
34:38 - so now that we have created our project
34:40 - what we just need to do is to host our
34:42 - project online
34:44 - so for us to do this we're going to use
34:45 - the roku as our hosting platform
34:48 - so we don't need all these we can just
34:50 - quit these what we need
34:53 - is two python libraries and they are
34:56 - unicon and django heroku so first to
34:58 - install these libraries we're gonna say
35:00 - beep okay there's
35:05 - beep install
35:07 - gunikon
35:09 - and django
35:11 - iroku
35:15 - now once i click on enter it should tell
35:17 - me requirement already satisfied because
35:19 - i already have it but for you you should
35:22 - go ahead and install it so you see it
35:24 - says requirement already satisfied so
35:27 - now that we have this installed what i
35:29 - just need to do is to come into my root
35:31 - directory let me close out this
35:35 - my root directory i'm going to create a
35:36 - new file and name it runtime.txt
35:40 - now this file should contain the python
35:42 - version which you used in this project
35:44 - so i use python
35:47 - 3.9.1
35:50 - then we're going to save it
35:51 - another file we need to create is
35:53 - profile
35:56 - so this proc file is going to create
35:58 - contain these web
36:01 - unicorn
36:05 - web gunny con
36:07 - then the name of your project which is
36:09 - url shortener
36:14 - dots
36:16 - wsgi
36:18 - column application
36:23 - log
36:25 - think a game file
36:28 - and like this
36:30 - so we're just gonna save it
36:32 - and then after doing this what we just
36:34 - need to do is to pip freeze
36:36 - requirement.txt
36:38 - beep
36:40 - freeze
36:43 - requirement
36:46 - dot t x t
36:51 - so that's done a new file here is
36:53 - requirement.txt
36:55 - so i'm going to come into our project
36:57 - folder and go to settings.py
37:01 - and up here
37:04 - that's right here we're going to import
37:08 - django heroku
37:13 - and i'm also going to import
37:16 - dj database url
37:19 - and then we're going to come here into a
37:21 - loud boost and make sure that we allow
37:23 - all the hosts
37:25 - after doing that we're going to scroll
37:28 - down
37:29 - and we're going to come into databases
37:32 - delete this
37:34 - okay
37:35 - delete from here
37:39 - and then we're just gonna say dj
37:40 - database url dot
37:43 - config
37:46 - so after doing this i'm gonna scroll
37:48 - down to the end
37:50 - all right at the bottom i'm going to say
37:52 - jungle iroku
37:55 - dot
37:56 - settings
37:59 - then open brackets in that bracket i'm
38:01 - going to say locales like this
38:03 - so after saving this
38:05 - we're good to go now we're just going to
38:07 - come into our command line
38:09 - and what we need to do is to log into
38:11 - roku by saying heroku login
38:14 - okay we type that wrong
38:16 - so say iroku login now this is going to
38:19 - prompt us to open our default browser
38:22 - and automatically log us in to our roku
38:26 - account
38:27 - so let's wait for it
38:29 - it should give us a reply soon
38:33 - so let's type any
38:36 - so now our browser should open up
38:39 - so
38:40 - when i click on login
38:43 - logged in if i come back it's
38:45 - automatically logging in now let me
38:47 - create a new app by saying heroku
38:50 - create
38:51 - and let me name it url shortener
38:56 - yt one two three
38:58 - just naming it a random name simply
39:01 - because i know there are there will be
39:03 - names that already have you are rational
39:06 - because in iroku you can't have
39:09 - you can't create a project with a name
39:11 - that has already been created before
39:13 - so if i just use plain url short now it
39:15 - will tell me
39:16 - another person i've taken this name so
39:18 - that's why i just use that randomly so
39:20 - since we have this now we're just going
39:22 - to say git
39:24 - status
39:28 - initialize
39:31 - this does
39:33 - nice so get
39:35 - remote
39:38 - v
39:40 - then git remote
39:43 - add iroku
39:45 - and then what we want to add is up here
39:49 - this git link
39:52 - just paste it and enter
39:54 - and then let's say git remote v again
39:58 - nice and then let's say git status
40:01 - nice so what we just want to do is to
40:03 - create a new
40:05 - database which is
40:08 - heroku add-ons
40:13 - create
40:16 - eroku
40:19 - postgres
40:21 - ql
40:24 - rpdf
40:28 - and press enter
40:30 - so now this should create a postgres
40:33 - database
40:35 - with the ob dev version the database has
40:39 - been created so now after doing this i'm
40:41 - just going to say git add
40:45 - and then you should add so i'll say git
40:47 - commit
40:52 - let me see the first time
40:57 - and then i'll say git push
41:00 - iroku master
41:05 - so now this git push roku master is the
41:07 - final step in deploying this project so
41:10 - once this is done it should
41:11 - automatically deploy it
41:13 - onto
41:15 - iroku
41:16 - and then we are going to get our site
41:19 - url so let's wait for it to deploy
41:21 - it should deploy within a minute
41:24 - depending on how
41:26 - large
41:27 - your project is so our project is pretty
41:30 - light
41:31 - so you should install
41:33 - routine seconds so let's see
41:38 - let's just wait
41:40 - okay installing collected packages so
41:42 - what is doing now is installing the
41:44 - packages which
41:45 - it saw in the requirement.tx files
41:49 - so let's just see after compressing it
41:52 - should say done
41:54 - so let's wait for it to say done
41:58 - okay it says done and then now let's
42:00 - wait for our final confirmation and then
42:03 - we're just going to go to this url which
42:05 - is the url of our project
42:07 - let's wait for our final confirmation
42:09 - again
42:10 - okay
42:11 - that should pop so it says verify deploy
42:14 - dot so let's just go to this
42:16 - open link
42:19 - now you guys can see our project is
42:20 - ready
42:21 - so what we want to do now before we test
42:24 - our app we have to come back here and
42:26 - migrate our database so say heroku
42:29 - run
42:31 - python manage dot py make migrations
42:37 - and then after this we're going to say
42:38 - hiroku run python money dot py migrate
42:42 - just like how we migrate our database
42:44 - when we are building our project
42:46 - so let's wait for this command line to
42:48 - run
42:49 - it should actually say no change is
42:50 - detected yes but i just like doing that
42:54 - so that we won't get any error so my
42:56 - grid now
43:00 - now this will migrate everything into
43:02 - our database so let's give it a moment
43:06 - you should migrate that soon
43:09 - let's see if i didn't do this it's going
43:11 - to give me an arrow so i just have to do
43:13 - this to prevent that error
43:16 - okay and then done so let's come back
43:19 - now
43:21 - refresh
43:22 - so now let's try to shut in a url
43:25 - in this again now you see it gives me
43:27 - locales 8000 then this link so if i go
43:30 - to
43:31 - this url slash this uid it's going to
43:34 - take me to
43:35 - youtube.com slash code with tommy
43:38 - but because in when we are building our
43:40 - project we added this localhost so
43:42 - that's because we see testing our
43:43 - project now we're supposed to add the
43:45 - url of this
43:47 - project which we've deployed but as you
43:49 - can see we are building a url short now
43:52 - if our url shortness something like this
43:54 - let's say once you shut in a url it
43:56 - gives you this type of url
44:00 - then i don't think we are building a url
44:01 - short now again so i'm going to
44:04 - buy a free domain i'm going to get a
44:06 - free domain there is actually a site
44:09 - which allows you to get a domain for
44:11 - free so i'm going to get a free domain a
44:13 - very short one and i'm going to connect
44:15 - it to this our project so let me show
44:18 - you the domain i'm going to get before i
44:19 - show you let me test out once i click on
44:22 - enter
44:23 - you can see it takes me to youtube.com
44:25 - slash code with tommy now once i go back
44:29 - now what i want to do i want to show you
44:31 - the domain which i took so you guys can
44:34 - see i already
44:36 - took this domain it says sorry source.ga
44:39 - is not available so this is the domain
44:41 - i'm going to use for this project
44:43 - source.ga for now it says source.js not
44:46 - available because i already took it
44:49 - so as you can see you can come in and
44:50 - claim sales.cf you can claim some
44:52 - domains for free but if you want to buy
44:54 - the.com.net you need to pay for them so
44:57 - that's what i we're going to use in this
44:58 - project so i'm just going to connect it
45:01 - with these
45:02 - my heroku site so when i connect it i'll
45:05 - be back
45:07 - so guys right now i've already connected
45:09 - the domain the custom domain which i
45:11 - have to this our project so you can see
45:14 - now if you go to www.source.ga
45:17 - it takes you to this url shorter so
45:19 - let's test out this shot now
45:21 - let's test it out and click on shorten
45:23 - now it gives us this url the last thing
45:26 - we want to do to this project is to
45:27 - update this so instead of it saying
45:30 - localhouse 8000 we wanted to say
45:32 - www.source.ga
45:34 - then slash the id so let's go and do
45:36 - this we're going to come back to our
45:38 - visual studio code
45:39 - and then in our index.html right here
45:42 - instead of saying locales 8000
45:45 - let's see i think
45:47 - it's better if we copy these
45:51 - just come here and paste
45:54 - so we don't need to put http
45:57 - let's just say www.gay
46:01 - www.sauce slash ga
46:04 - then data so this data is the id so
46:07 - let's just save this and then what we
46:09 - just want to do now is to say git add
46:12 - so this what i'm teaching you now you
46:14 - are going to be able to know to update
46:16 - your project even after you've radiused
46:18 - it
46:19 - so we already have this hosted on the
46:22 - web but we want to make a change and
46:24 - update it so once you make that change
46:26 - to update it you just come back to your
46:28 - cli and say git add
46:31 - and then you're going to say git commit
46:36 - iphone m
46:40 - and let's say make it better
46:46 - nice and then we just say git push iroku
46:49 - master
46:55 - now this should redeploy it again with
46:57 - the updated changes so let's just wait
47:00 - for that it shouldn't take
47:01 - long this time because we've already
47:05 - deployed it so let's see
47:09 - let's wait for it
47:11 - you should do within a second so let's
47:13 - see
47:18 - okay
47:22 - almost done
47:25 - after compressing you should say done
47:28 - that means it's worked yes
47:31 - and now we should see deploy to your
47:33 - roku so once we see this deployed to
47:34 - liquid has deployed but let's just wait
47:36 - for the last confirmation before we go
47:38 - check
47:41 - so let's wait it should say
47:44 - yes done so let's go back to our browser
47:47 - and then reload this page
47:49 - so now
47:50 - let me shut in this url and click on
47:52 - shorting now if i just take this link
47:57 - and copy it and paste it here
48:01 - now you see that it takes me to that url
48:03 - which i shortened right here you can see
48:06 - that i shortened youtube dot com slash
48:08 - code with tommy then once i click on
48:10 - that it says youtube.com code with tommy
48:13 - so that's what this should do
48:17 - so let's try it out with another website
48:21 - let's take let's go to google
48:28 - and then let me just search
48:32 - now this url link let me copy it
48:37 - and then right here let me paste and
48:40 - click on shorten
48:42 - so now it gives me this link so
48:43 - everything is working perfectly
48:48 - [Music]
48:52 - in this tutorial session we're going to
48:54 - build a to-do list app using jungle
48:57 - so without wasting any time let's get
48:59 - straight into it
49:00 - the first thing we need to do as always
49:02 - is to make sure that we have django
49:04 - installed
49:05 - so we should do beep
49:07 - install django
49:12 - so since i have django installed already
49:14 - it's going to tell me requirement
49:16 - already satisfied
49:17 - but for you you should go ahead and
49:19 - install django on your computer
49:22 - so it's going to tell me as you can see
49:24 - it says requirement already satisfied
49:26 - that is to show that i have django so
49:28 - now that we have django installed let's
49:30 - just go ahead and create our project so
49:33 - i'm just going to say jungle
49:35 - iphone admin
49:37 - start project
49:39 - and let's name it to do
49:41 - list
49:42 - now once we press enter it's going to
49:44 - automatically create a jungle
49:46 - boilerplate which is a folder which
49:48 - contains all the necessary files to
49:50 - start a jungle project
49:52 - so let's go into that folder which is
49:54 - called to-do list
49:57 - now if i press dir i'm going to see
49:59 - money dot py and another folder called
50:01 - to-do list another thing i need to do
50:04 - now is to create a jungle app and i'm
50:06 - going to call this app to do so i can
50:08 - just do django
50:13 - admin iphone admin
50:15 - start up
50:18 - and i can name it to do
50:20 - so once i click on enter as you can see
50:22 - right now we have only one file and one
50:25 - folder but now once i check it again you
50:27 - see i have two folders and one file and
50:29 - the second folder which was created is
50:31 - this to do which is our app
50:34 - so now that we have everything set up
50:35 - let's open up our project in visual
50:37 - studio
50:38 - code so this is visual studio code here
50:41 - all i just need to do is to press open
50:43 - folder and then
50:45 - open up my project in the directory
50:47 - which i created
50:49 - so i created my online to-do list
50:50 - directory right here i'm just going to
50:52 - select the folder and it's automatically
50:54 - going to open on visual studio code
50:57 - so
50:58 - once it has opened
51:00 - now i'm just going to quit this
51:03 - we just need to configure some things
51:05 - which are our template file that means
51:08 - the html file which we're going to use
51:10 - and
51:11 - then get straight into the tutorial
51:14 - so to do this we're going to make sure
51:16 - we're in the root directory and then
51:18 - we're going to create a new folder we're
51:19 - going to call our folder templates
51:22 - with an s
51:24 - templates
51:26 - and in that templates folder i'm going
51:28 - to move in the html which i'm going to
51:31 - use for this project
51:33 - as i said i'm going to link the
51:35 - description
51:36 - to everything that we are doing in this
51:38 - video so all the links to the source
51:40 - code is going to be in the description
51:42 - below so you can check that out to get
51:43 - all the
51:45 - html css and everything we are using in
51:47 - this project
51:49 - so i have it right here i'm just gonna
51:51 - drag it
51:53 - into visual studio code
51:56 - and then what i need to do is to paste
51:58 - it and template now that i have this
52:00 - here i'm just gonna press cancel
52:03 - so what i need to do now for django to
52:05 - cds i'm going to come into my to-do list
52:08 - go into settings
52:09 - and once i'm in settings i'm going to
52:11 - scroll down a little bit
52:12 - i'm going to look for where i see
52:14 - templates
52:17 - so i'm going to scroll down as you guys
52:19 - can see there is templates here so where
52:21 - you see this you're just going to write
52:24 - base there
52:27 - then you're going to put a slash
52:30 - then inside there are going to put
52:31 - templates
52:33 - this is simply telling jungle where all
52:35 - your template files are located so after
52:38 - doing that we can cancel settings
52:40 - now the next thing we need to do is to
52:42 - come into our to-do app create a new
52:44 - file called urls
52:47 - that's py
52:48 - and in here we're just going to import
52:51 - path so say from django.urls
52:56 - import path
52:58 - so what i want to do now since we are
52:59 - done with configuring the template file
53:01 - and django knows where our template is
53:03 - we just want to root our url simply
53:05 - means we want to provide where
53:08 - our url should go to when a user comes
53:11 - to our website so you're going to
53:13 - understand that in a second so let's go
53:15 - to say url patterns
53:19 - equals to
53:20 - path
53:22 - and we're going to leave it blank blank
53:24 - means
53:25 - that's the home page and i'm going to
53:26 - say views dot index
53:30 - and then let's give it a name of index
53:34 - so for us to use views we have to import
53:37 - view so say from
53:38 - root
53:40 - import views
53:42 - so now that we are importing views we
53:44 - also need to go to views create a new
53:46 - function called index
53:49 - it must take a request
53:53 - and then we need to render that html
53:56 - page which is index.html so i'm gonna
53:58 - say return okay right here i'm gonna say
54:01 - return
54:03 - render
54:07 - request
54:10 - index.html
54:13 - now this is going to render that index
54:15 - page let me just cancel this so once i
54:18 - come into urls.py
54:21 - as you can see you are telling me that
54:22 - once the user comes to our home it
54:25 - should take the user to the views dot
54:26 - index and once the user comes to that
54:28 - function is just rendering the
54:29 - index.html page but if we run our
54:32 - project now it's still going to show us
54:34 - the default jungle template that's
54:36 - simply because we only configured our
54:39 - urls in our app we didn't configure it
54:42 - in our project
54:43 - so if you open your to-do list project
54:45 - that's the main project folder you're
54:47 - going to see
54:48 - a url file also
54:50 - so for us to configure it here we need
54:52 - to import one thing called include
54:55 - and then we're going to create another
54:56 - path
54:58 - which is also blank still means home i'm
55:01 - just going to say include
55:05 - to do
55:06 - dot urls
55:08 - now once we save this everything is fine
55:11 - let's just go ahead and open a new
55:12 - terminal
55:15 - so right here in the new terminal we're
55:16 - going to run our project and test it in
55:19 - our browser
55:20 - so let's just
55:22 - give it a few seconds okay
55:25 - so now let's run our project by saying
55:27 - python
55:28 - manage
55:30 - dot py run server
55:34 - so once this runs on our server on our
55:37 - localhost
55:39 - we're gonna go open our browser and
55:41 - we're gonna see this index.html page so
55:44 - what we just need to do is to copy this
55:47 - localhost
55:49 - come into our browser
55:51 - and paste it right here
55:53 - so now we should see
55:55 - as you guys can see we see this
55:57 - beautiful jungle to-do list app template
56:00 - so now that we have everything
56:01 - configured on the front end on the ui
56:03 - what we just need to do is to start with
56:06 - the back end so what we want to do now
56:08 - is to create a jungle model for the to
56:11 - do where everything is going to be saved
56:13 - and then once the that input something
56:16 - right here and clicks on add we're going
56:18 - to submit it to that django model and
56:20 - we're just going to show all the
56:23 - objects which are in that module and
56:25 - then another feature is that once user
56:27 - clicks on delete you should just delete
56:29 - that object from the model it's pretty
56:31 - easy so let's dive straight into it
56:33 - so we're going to come right here
56:36 - we can just
56:37 - close this terminal
56:39 - and then what we want to do is to open
56:41 - our modules.py file now we're going to
56:44 - create a new model
56:46 - and let's just call it to do
56:49 - so we're going to say models
56:52 - dot model
56:54 - and then we only want this to just take
56:56 - one field so i'm going to call this
56:58 - title
57:00 - i'm going to say models
57:02 - dot character field
57:04 - i'm going to give it a max length
57:08 - let's say max length of a thousand
57:10 - and this should be fine
57:12 - so not what this simply means is that
57:15 - our model is taking only one field and
57:18 - this field is the title so if i come
57:20 - into this template as you can see this
57:23 - says it's the gym meet george all these
57:25 - are the titles of the to-do so that's
57:27 - what that field is
57:29 - so all these are just dummy data for now
57:33 - they are just static data but when we
57:36 - integrate our database with it they are
57:37 - going to be dynamic
57:39 - so let's come back into our visual
57:41 - studio code
57:43 - and after doing this let's just
57:46 - return
57:48 - underscore
57:50 - str
57:52 - self so we want to return that title
57:57 - return
57:59 - we're going to say self
58:02 - dot title
58:04 - so we can save this
58:05 - now if you know django very well you
58:08 - should know that once you make any
58:09 - slight change to your models file you
58:12 - need to make migrations and then migrate
58:14 - into your database
58:15 - but before you do that you must make
58:17 - sure that the app in which you are
58:18 - configuring your models or py must be
58:20 - registered in your settings file so if
58:23 - we come into our settings right here
58:26 - we're going to go up and
58:28 - look for installed apps right here in
58:30 - installed apps before we migrate our
58:31 - data to our database we need to add our
58:34 - app which is called to do
58:36 - into our installed apps so doing this
58:38 - alone we've added the app we're just
58:40 - going to save it
58:42 - so you must make sure that this to do
58:43 - correlates with the name of your app
58:46 - after saving we can cancel that
58:49 - so now we're just going to bring back
58:50 - our terminal
58:52 - so instead of cutting this serval let's
58:54 - just open a new terminal so what we want
58:56 - to do is to make migrations and migrate
58:58 - so say python
59:00 - manage the py
59:03 - make migrations
59:06 - enter
59:07 - and then once this make the migrations
59:10 - and then we're just going to say python
59:12 - manage
59:13 - the py migrate
59:17 - now this is going to migrate everything
59:19 - we have into our database as you can see
59:21 - is making all those migrations which is
59:23 - good so now that that is done let's
59:25 - close the terminal
59:27 - another thing i like to do is to
59:30 - create a super user and configure my
59:33 - django admin so i can see all the
59:35 - database easily
59:37 - so let's bring back our terminal and do
59:40 - that
59:40 - what we just need to do is to say python
59:43 - manage wpy
59:46 - create
59:47 - super
59:48 - user
59:50 - now this is going to prompt us to
59:52 - put in some details just like if we're
59:54 - registering on your site so we can just
59:56 - say admin let's just give it admin
60:02 - and password
60:06 - so bypass that
60:08 - now that we have this done let's go
60:10 - ahead and test it so let's come to our
60:12 - project and go to slash admin
60:16 - so in slash admin you should tell us to
60:18 - login so we're going to log in with
60:20 - those details
60:21 - so admin
60:23 - and also the password and just click on
60:25 - login
60:26 - so now you should automatically log
60:28 - using into jungle admin
60:30 - so right now you can see that we're
60:32 - logged in in this jungle admin so the
60:34 - only thing we can see in the database is
60:36 - the user and groups we also want to
60:38 - register our module which we just
60:40 - created which is the to do module so for
60:43 - us to do this is very very easy we're
60:45 - just going to come in here
60:47 - we can quit this now we're going to come
60:50 - into our admin dot py file
60:53 - import our to-do model so we're going to
60:55 - say from
60:57 - dot models
60:59 - import
61:00 - to do
61:02 - and then let's just register it in our
61:03 - admin so say admin.site
61:06 - dot register
61:10 - and the naturally started to do
61:13 - it's that easy now once we save it
61:16 - all we just need to do is to come back
61:17 - and hit refresh
61:19 - now as you can see to do is already
61:21 - added in our data so once we click on it
61:24 - we're going to see the list of to-do
61:26 - lists the list of to-do in which we have
61:29 - here so let's say user comes into let me
61:33 - just quickly go back
61:35 - right here
61:36 - what i want to do now is that once the
61:37 - user input something right here and
61:39 - clicks on add it should automatically be
61:41 - saved in this database so let's go ahead
61:43 - and do that
61:45 - now for us to do that we're going to
61:46 - come back here
61:49 - let's come into our views.py which is
61:53 - uh which has our index function
61:56 - so what i want to do is to go to our
61:57 - index.html
61:59 - we're just going to scroll down
62:02 - into where we have
62:04 - what we're looking for is this form
62:06 - these inputs right here so we're going
62:08 - to scroll down
62:10 - where we have that
62:12 - so as you can see we have that right up
62:15 - here
62:16 - so
62:17 - it is an input what we just want to do
62:19 - is to make it a form
62:21 - so i'm just going to say form
62:26 - now
62:28 - we're going to close it
62:30 - let me first cut that and see where to
62:33 - close it so i'm going to close it right
62:36 - after the span tag which is add
62:40 - so
62:42 - i'm just going to close it right here
62:45 - and then what i want to do now is to
62:47 - just give this
62:50 - i think some indentation
62:54 - so let's just give it a little bit of an
62:56 - attention
62:57 - so that's nice so since this is a in a
62:59 - form now
63:01 - so guys what i put in a form is this
63:03 - input right here this input and then
63:05 - this add as our submit button so let's
63:08 - just go back here
63:10 - so what i want to do let's make this a
63:12 - submit button so say type
63:14 - equals to submit
63:18 - it needs to have this so says submit
63:23 - now we can save this we must make sure
63:25 - that
63:26 - this have a name which is this one right
63:29 - here so say name
63:32 - equals to let's say
63:34 - title
63:38 - so let's save this
63:39 - so what i want to do now is to just make
63:42 - sure that once the user clicks on add
63:44 - which is serving as our submit button it
63:47 - should send those data to our index
63:51 - function so let's do that so say action
63:56 - let's leave it blank so it sends it back
63:58 - here and let's say method let's give it
64:00 - a post method we don't need a get method
64:03 - and then you know diameter wise in the
64:05 - post method we must always add our csrf
64:07 - token
64:08 - csrf underscore token
64:13 - so if i save this right now click on
64:15 - refresh
64:17 - once i type in something and then click
64:19 - on add
64:20 - okay as you can see when i click on that
64:22 - nothing is happening so i think there's
64:23 - a javascript right here this one click
64:26 - so this javascript is colliding with it
64:28 - let's save it and try it again
64:31 - let's import something
64:34 - and i click on add okay so it's not
64:36 - serving as the button so what we just
64:38 - need to do instead of using okay let's
64:41 - put this back instead of using a span we
64:43 - can just change it to a button
64:45 - so right here also
64:47 - let's change this to a button
64:51 - nice now let's go back and then refresh
64:55 - as you guys can see made a little bit of
64:57 - change but that's okay so let's just
65:00 - input something and then click on add so
65:03 - you guys can see that it refreshed that
65:05 - page so what i want to do once you
65:07 - refresh that page you should add
65:09 - whatever the user input to the list
65:12 - of
65:13 - to do right here let's go ahead and do
65:16 - that
65:16 - so we're just going to come into our
65:19 - views.py so right here in our function
65:21 - we're going to use an if statement
65:24 - and that if statement we want to do is
65:26 - to get even the post request
65:28 - so we're just going to say
65:31 - if
65:34 - let's give it a space
65:36 - so say if request
65:38 - the method
65:41 - is equal to post
65:44 - so if is equals to post what we just
65:46 - want to do
65:48 - is to say new underscore to do
65:53 - should be equals to so before i continue
65:56 - we need to import the to-do model in
65:58 - which we want to save
66:00 - so we're going to say from
66:03 - dot models
66:05 - import
66:06 - to do so now that we have this model we
66:08 - can automatically save a data into that
66:11 - model so i'm just gonna say to do
66:14 - i'm gonna open a bracket
66:17 - and then let's say title
66:20 - should be equals to
66:21 - request
66:24 - dot post
66:27 - which is title
66:29 - so guys what i did here is
66:31 - i assigned a new variable and what i put
66:34 - inside a variable was this to do model
66:37 - but i'm passing in some fields a field
66:40 - actually so this title is basically this
66:43 - title we have in our module
66:45 - so this title
66:46 - is this title right here so what we're
66:48 - giving that field is request the post
66:51 - title so while
66:54 - just
66:54 - getting this title
66:57 - from a post if we come into our
66:59 - index.html we can see that once user
67:02 - clicks on add it's posting this input
67:05 - which is named title
67:07 - into back into this page
67:09 - so as well in this place we're going to
67:12 - collect using that post collecting that
67:15 - title this title is whatever the user
67:18 - input and then saving it into this
67:20 - variable so once we do that and then we
67:23 - just come down and click on and type new
67:27 - to do dot save
67:29 - it's automatically going to save it in
67:30 - our database so after it's saved let's
67:33 - just return
67:35 - let's redirect the user back to this
67:37 - page before we can redirect we need to
67:39 - import redirect so let's import that
67:42 - so we're going to say return
67:44 - redirect
67:46 - the user
67:47 - back to the home page now that's very
67:49 - easy
67:50 - so now let's refresh again
67:54 - no
67:55 - let's cancel this on it
67:58 - so let's say
67:59 - code
68:01 - so now once i click on add you see that
68:03 - it refreshed and brought me back to this
68:05 - page but nothing show here because we're
68:07 - not getting the list of data for now but
68:11 - we come into our to do database and
68:14 - click on refresh
68:15 - you should see that we have one new data
68:18 - now which is code which are input so
68:20 - that's basically how to do it let me go
68:22 - back now let me come here do another
68:25 - thing and say
68:27 - go for a run
68:32 - so now once i click on enter come back
68:34 - here and refresh you see that now we
68:36 - have a new data called go for iran so
68:39 - what i want to do now is that all this
68:41 - data which we have that's what we want
68:43 - to show here we don't want all these
68:45 - static data also very easy we're going
68:48 - to come back into our visual studio code
68:51 - so right here in our index also
68:54 - what we just need to do
68:56 - is to get
68:57 - this
68:58 - this to do module so we're going to say
69:01 - to do
69:04 - equals to to do
69:06 - dot objects
69:10 - dot o
69:13 - and then once we have this we're just
69:14 - gonna pass to do
69:17 - right here
69:19 - into our index.html so say to do
69:23 - should be to do
69:26 - now once we save this right here in our
69:28 - index.html
69:29 - we're going to come down here and use a
69:31 - for loop
69:34 - what we need to do now
69:36 - we can remove all of these
69:40 - once we remove all of these we just need
69:42 - to use a for loop and see
69:47 - for
69:50 - to do
69:50 - okay right here in our view.py let's
69:53 - name this to do's so we can say for to
69:55 - do introduce
69:57 - so for to do
69:59 - in to do's
70:02 - then let's end our for loop right here
70:06 - so let's end four
70:11 - and four
70:13 - and then right here we're just gonna say
70:18 - to do
70:22 - dots
70:24 - title
70:26 - we can save this come back here and
70:28 - refresh now as you can see it gives us
70:30 - everything in which we have right here
70:32 - so go for a wrong code
70:35 - code go for a run boy is reversed so if
70:37 - i click on something and i'll say it's
70:40 - the gym
70:41 - the gym
70:43 - and save it you can see it's
70:44 - automatically added on the list but is
70:48 - on the bottom so we want the newer to do
70:52 - to be on top
70:53 - for us to do this we're just going to
70:55 - come here as if to do introduce reversed
71:00 - when we save this and come here you see
71:03 - there's a latest dice on top so let's
71:05 - just do something like it
71:09 - now you can see it is on the top let's
71:11 - say sleep
71:12 - now you can see sleep is on the top so
71:14 - that's basically how to um showcase a
71:17 - list
71:18 - in
71:19 - django ginger formats just using the
71:22 - reverse attribute very easy
71:25 - so now that we have these let me just
71:26 - add one more
71:28 - let me say one more attribute which is
71:31 - as you can see that this everything is
71:32 - in small letter so we want that even if
71:35 - a user writes it in let me say small
71:37 - letter like buy
71:41 - buy or close
71:43 - so as you can see the user started this
71:45 - with the b as a small letter so once
71:47 - it's shown here we want it to be
71:49 - calculator for us to do this we're just
71:51 - going to come here
71:53 - use this and say title
71:56 - this alone once you refresh as you can
71:58 - see everything nice and caps later so
72:00 - that's also a good attribute which might
72:02 - be useful in some of your projects so
72:05 - now that's good
72:07 - what we just need to do now which i
72:08 - think is the last thing is that once the
72:10 - user come here clicks on delete we want
72:14 - whatever is here to be deleted
72:17 - also very easy we're gonna come back
72:19 - here
72:21 - so we're going to create a new url
72:24 - and then let's name this url delete
72:26 - so i'm going to say path
72:30 - let's name it delete
72:32 - but this url right here is going to be a
72:34 - dynamic url
72:36 - and this is because it's taking an input
72:38 - so what we want to delete
72:41 - it to do
72:42 - that to do is going to have an id which
72:45 - is being sent to this
72:47 - delete url so for this url to collect
72:49 - that id we need to use a dynamic url so
72:52 - we need to pass in a variable i'm going
72:54 - to say slash
72:56 - let's give it a string and let's say pk
73:00 - like this
73:01 - so after doing this we can continue to
73:03 - our normal format which is views
73:06 - dot delete
73:08 - and then we can say name
73:11 - equals to delete
73:14 - so this is nice
73:16 - now we can come into our views and
73:18 - create a new
73:21 - function and name it delete
73:25 - take a request
73:27 - and after taking a request you should
73:28 - take pk and pk is the variable which we
73:32 - assigned here that is a string
73:35 - so
73:37 - when i'm writing an html page what we
73:39 - want to do is to just get
73:43 - a particular object
73:45 - from the module
73:47 - so first to do this i just gonna say
73:51 - to do
73:52 - should now be equals to
73:55 - to do
73:58 - dots
74:01 - objects
74:03 - dot get the one in which the id
74:08 - is equals to pk
74:11 - so now once
74:12 - we get that we just want to say
74:16 - to do
74:18 - the delete
74:21 - and then once it has deleted it then we
74:23 - want to return
74:28 - redirect direct the user back to the
74:30 - home page
74:33 - so what we're doing here now you guys
74:35 - are going to see how we're going to send
74:37 - the id into this view
74:40 - so let me explain in detail
74:43 - when you create an object in a model in
74:46 - django
74:47 - automatically each object has an id
74:50 - so this code which is the first object i
74:52 - created has an id of zero
74:55 - this go for a run has an id of one
74:58 - it's the gym as an id of two and so on
75:00 - like that so each of them has a unique
75:02 - id which is being
75:04 - assigned to them so that unique id once
75:07 - i click on delete the any kind is going
75:09 - to be used to know
75:11 - which to do the user wants to delete
75:14 - so as i click on delete that id is going
75:16 - to be sent into this url
75:19 - and then it's going to be saved into
75:22 - pk which is this variable
75:24 - then we're going to collect that
75:26 - variable name pk
75:27 - into this view
75:29 - then what we're doing right here is that
75:31 - we're saying to do dot object.get so
75:34 - this to do is our module in our database
75:38 - and then we're saying does get the one
75:40 - in which the id is equal to pk and as
75:43 - you know pk is the id in which we sent
75:46 - into this view so i'm basically getting
75:48 - the id which the user wants to delete
75:51 - and then we're storing that particular
75:53 - object into
75:55 - a variable called to do
75:57 - so once we already know what design was
76:00 - to delete we just use the attribute to
76:02 - do the delete it deletes it and then we
76:04 - return user back to the home page
76:06 - so now let's go back and see
76:09 - now let's refresh this
76:11 - so let's click on delete
76:13 - nothing happens this is because we've
76:15 - known it's assigned the variable let me
76:18 - show you how to do this i'm just gonna
76:20 - come here
76:22 - right here in our index where we see
76:24 - delete
76:26 - so this delete now has to be a link
76:30 - so
76:30 - i'm just gonna give it a link a
76:34 - and then let's paste delete in there
76:36 - now let's say
76:38 - hyperlink
76:40 - so we're gonna use the jungle format
76:45 - and then we're gonna say delete
76:50 - and then i want to say
76:52 - to do
76:53 - dot id
76:54 - so once we save this everything should
76:56 - work
76:57 - so let's come back here refresh
77:02 - okay it says
77:04 - um invalid
77:06 - right here
77:07 - so
77:08 - the reason why it's invalid is because
77:10 - it says delete expected empty or n4 did
77:14 - you forget to load this type so what we
77:16 - just need to do is to come here
77:21 - if i shift to this side you guys can see
77:23 - that the area is coming from right here
77:26 - so the problem is the way in which we
77:28 - pass this url so you can also pass this
77:30 - url by saying
77:32 - [Music]
77:33 - delete
77:35 - slash
77:39 - will say to do
77:41 - dot id
77:43 - once we save it
77:45 - and go back
77:46 - let's make sure we have everything
77:48 - correct
77:49 - now once we refresh we shouldn't be
77:50 - seeing this arrow now you can see that
77:52 - this delete is showing as a link
77:55 - we will take the of that later but now
77:57 - let's click on delete and see what
77:58 - happens as you guys can see that
78:00 - particular to do is gone let's click on
78:03 - the next one that is gone click on this
78:06 - it's gone and then let's also try to add
78:10 - jog you can see it's there once i click
78:13 - on delete
78:17 - it's gone
78:18 - so that's basically how to build a basic
78:20 - to-do list app so now
78:22 - let's just take care of this blue link
78:24 - which is showing there first to do this
78:26 - we're just going to use a basic css
78:28 - we're going to say
78:31 - style
78:33 - equals to text decoration
78:37 - so say text decoration should be none
78:41 - so this css is going to remove all the
78:43 - text decoration which is assigned to a
78:45 - link
78:46 - so once we refresh you guys can see that
78:50 - it doesn't have that line on diet again
78:53 - but the color is still blue so also very
78:55 - easy we're just going to come here and
78:57 - say
78:58 - color
79:00 - okay shift back
79:03 - right in this style
79:06 - i'm going to say color
79:09 - should be black
79:11 - let's save this
79:13 - refresh
79:14 - now you can see that the color is black
79:16 - and once we hit on delete everything
79:18 - still works successfully delete again
79:22 - still works successfully now let's just
79:24 - test on our app once again so now we can
79:27 - add a new
79:29 - to do let's say it's the gym
79:32 - to enter oh we've added that before
79:35 - so let's just delete that and let's just
79:37 - say learn
79:40 - flask
79:41 - so
79:42 - click on enter as you can see it brings
79:45 - up this length flask
79:47 - and it brings it up the latest side of
79:50 - the table
79:52 - of the list i mean
79:54 - and we can also delete
79:57 - and one feature which we added if we put
80:00 - in small letter it's automatically going
80:01 - to show it in calculator so i hope you
80:04 - guys
80:05 - learned something from this tutorial
80:07 - section
80:08 - if you did please don't forget to smash
80:10 - the like button and please subscribe
80:16 - [Music]
80:19 - now that we've successfully completed
80:21 - our app what we just need to do is to
80:23 - host our app on iroku
80:26 - it's very easy to do this we just need
80:28 - to make sure we have some python
80:29 - libraries installed and these python
80:31 - libraries are gunikon and jango hiroku
80:34 - so let's go ahead and install them
80:37 - beep install
80:39 - unicorn
80:41 - and jungle heroku
80:45 - so i already have this installed
80:47 - it's going to tell me requirement
80:48 - already satisfied but i just needed to
80:50 - show you how to install those libraries
80:52 - so you should go ahead and install on
80:54 - your computer
80:55 - so now that we have that installed
80:57 - what we need to do is to come into our
80:59 - roots directory let's
81:01 - close all these
81:03 - now root directory we're going to create
81:05 - a new file name it runtime.txt
81:09 - in that runtime.txt what we need right
81:12 - there is our python version so the
81:14 - python version which we use for this
81:15 - project is what we're looking for
81:17 - to get that we'll come to our terminal
81:20 - and type python
81:22 - version
81:24 - python two iphones with version so as
81:26 - you can see i am using python 3.7.4
81:30 - so i'm going to say python
81:32 - then i'm going to say iphone
81:35 - 3.7.4 so that's the way you should write
81:38 - your version
81:40 - let's just save it and then quit this
81:42 - file
81:43 - the next thing we need to do now is to
81:44 - create a new file let's make sure we
81:47 - close this
81:48 - and these files must be in the root
81:49 - directory the root directory means
81:52 - the directory which contain the money
81:54 - money.py file so that's the root
81:57 - directory of any django project so now
81:59 - in the root directory we're going to
82:00 - create a new file and name it proc file
82:03 - with no extension
82:05 - so proc file like this
82:07 - and what you go in here is a piece of
82:09 - code now this is how the code is
82:14 - so instead of these these are like a
82:16 - line of clothes boilerplates something
82:18 - like that so instead of contactless is
82:20 - the name of your app so it should be um
82:23 - to-do list
82:26 - so that's how it should be web unicorn
82:28 - to-do list.wsgi
82:30 - column application two items log one
82:33 - iphone file space and iphone so that's
82:36 - what should go into this file then we're
82:37 - gonna save this file so after having
82:40 - this done what we just need to do is to
82:42 - come into our terminal
82:44 - and press beep
82:47 - freeze
82:50 - requirement requirements.txt
83:01 - now when we press enter a new file here
83:03 - is created named requirement.txt
83:06 - what is in that file is all the pattern
83:08 - libraries in which we used in this
83:10 - project
83:11 - so after doing that now we're going to
83:13 - come into our settings.py file
83:16 - and then we're going to add some things
83:18 - so up here we have to import
83:22 - django heroku
83:27 - django iroku and the second thing we
83:29 - need to import is dj database url
83:32 - import dj underscore database url
83:36 - so the next thing we need to do is go
83:38 - into that our database
83:43 - and then change it from sqlite we're
83:46 - going to change it to the database in
83:48 - which eroku is going to recognize
83:51 - so i'm going to change this
83:53 - defaults not going to be an array or at
83:56 - least it's going to be dj database url
83:59 - dot config
84:02 - now this is how it should be
84:04 - i'm just gonna press save
84:06 - the next thing i need to do right now is
84:09 - to go down into my project
84:12 - right here i'm gonna say jungle
84:16 - heroku
84:17 - then dot settings
84:21 - boom bracket locales
84:24 - then open bracket close bracket
84:26 - now i'm going to save this file again
84:28 - the last thing we're doing in this file
84:30 - is to go to allow hosts and just press
84:34 - these to allow all hosts
84:37 - like this so once we save it we're done
84:39 - with this file
84:40 - now after doing all this thing we can
84:42 - now start with
84:45 - our command line that is with our iroku
84:47 - so we need to say iroku
84:49 - login
84:54 - so what's going to happen now is that
84:56 - it's going to prompt us to click on
84:59 - something and then it's going to open
85:00 - our default browser
85:02 - and then in there we're going to log
85:04 - into heroku automatically
85:06 - so when i click on login
85:08 - if you tell me logged in you can close
85:10 - this page and return to your cli
85:12 - so once i close this page and go back
85:15 - you can see now it automatically logs me
85:17 - in
85:18 - so what i just need to do now is to say
85:20 - heroku
85:22 - create
85:24 - and let me say to do list
85:29 - so once i create this to-do list it's
85:30 - automatically going to create this to-do
85:32 - list app
85:34 - in my roku account
85:37 - so once it creates that we're just going
85:39 - to start with the git
85:41 - so as you can see it's creating okay it
85:43 - says to the list already created my mind
85:45 - wasn't really there so let me just say
85:47 - to do list let me just give you random
85:49 - words like
85:51 - seven ways nine
85:53 - so let's see i don't think that should
85:55 - be taken
85:57 - okay it's creating
85:59 - yeah it's created so all we need to do
86:01 - nice is just say git status
86:05 - okay then we're gonna say git init
86:09 - so now he's going to initialize the
86:10 - repository and let's say git status
86:12 - again now we should give us something
86:15 - right
86:16 - and then we're going to say git remotes
86:19 - iphone v
86:20 - nice i want to say nice git remote
86:27 - add
86:28 - heroku
86:30 - now i want to add we're going to scroll
86:32 - up right here when we created the app
86:37 - you see it gave us two url i'm going to
86:38 - take the second url
86:40 - which has dot git at the end scroll down
86:44 - and paste that so it's going to be git
86:46 - remote add iroku then that url so i'm
86:48 - going to click on enter
86:50 - so now i'm just gonna say git remote v
86:52 - again so that's nice and i'm gonna say
86:55 - git status
87:01 - okay nice so now what i want to do is to
87:03 - create our database on our cloud so i'm
87:06 - going to say iroku
87:09 - add-ons
87:11 - i'm going to say column create
87:15 - i'm going to say iroku
87:18 - i think postgres
87:22 - ql
87:24 - then column i'm saying obi
87:27 - dev
87:30 - so that's what i need to see
87:32 - so i think this should be an iphone so
87:34 - now once i click on enter it should run
87:38 - that command line so let's wait for a
87:40 - response
87:42 - okay so it's creating see i couldn't
87:45 - find a service named of the dev okay
87:48 - there's a typographical error i put two
87:50 - o's
87:51 - instead of 2b
87:53 - so let's wait for that
87:56 - and let's see
87:57 - should create that for us in some
88:00 - seconds
88:01 - okay nice so it says database has been
88:05 - created and it's available the database
88:06 - is empty okay nice so the database has
88:10 - been successfully created so now that we
88:12 - have our database created what we just
88:14 - need to do is to commit
88:16 - so we're just going to say git
88:19 - add
88:22 - and then after adding we say git commit
88:28 - i think m
88:31 - then
88:32 - i'm gonna say the
88:35 - first time
88:41 - and then let's close that
88:43 - now when we click on enter we're gonna
88:45 - commit that so that's nice then as for
88:48 - the last step we're just gonna say git
88:51 - push
88:52 - iroku
88:53 - master
88:58 - okay
88:59 - um
89:00 - there was typographically right there so
89:02 - i don't think it will work so let's just
89:03 - wait for that to give us an error then
89:06 - we're going to say git push iroku master
89:09 - okay so
89:11 - remove these and it should be git
89:14 - so git push iroku master now this is
89:16 - going to deploy everything which you've
89:18 - been doing
89:19 - on
89:20 - the url in which it created area let me
89:23 - show you the url of the app
89:26 - so when we are creating we will come
89:28 - here
89:28 - when we created these uh which is to do
89:31 - list789 you see it gave us this url
89:34 - right here
89:35 - so once it deploys it it's going to
89:37 - deploy it on this url so once it's done
89:40 - and click on this url what we're going
89:42 - to see is this app in which we've been
89:44 - building since
89:45 - so let's scroll down and see how far the
89:48 - deployment is going
89:49 - okay it gave us an error
89:53 - if we come back here so the reason for
89:55 - that error it says
89:58 - now this is very good because you know
89:59 - also know how to debug
90:01 - so it says request runtime is not
90:04 - available for this stack
90:06 - heroku 20. okay that's nice so what we
90:09 - just need to do right here is to come
90:12 - into runtime.txt so the reason why we're
90:15 - getting that error is because of our
90:17 - runtime so uh python
90:20 - version is too low for heroku 20.
90:24 - so if i scroll up here you're going to
90:26 - see that it says heroku 20 stack so it's
90:29 - going to update to
90:31 - one of the latest versions we'll say
90:32 - 3.9.1
90:34 - and then what we just need to do is to
90:36 - commit those changes so i'm just going
90:37 - to say git
90:40 - add
90:41 - and then git commit
90:44 - and then we're just going to say git
90:45 - push iroku master
90:47 - now this shouldn't give us any errors
90:49 - again
90:50 - so let's just give it a few seconds
90:52 - installing python
90:55 - nice
90:56 - so everything is working
90:59 - so because iroquois has been upgraded to
91:02 - europe 20 the stack is now 20 that's why
91:06 - we're getting that error so notice that
91:08 - if you are using django and you like
91:11 - deploying on your roku you need to be
91:12 - using
91:14 - python 3.9 version
91:16 - to be specific
91:17 - so let's just give it a few seconds
91:20 - to deploy
91:23 - okay installing collected packages nice
91:27 - okay
91:30 - so just gonna wait
91:33 - so it should be done in a few seconds
91:34 - because all the main stuffs are done
91:36 - already
91:37 - so you should just deploy it to our url
91:40 - yes done
91:41 - yes so it's deployed to eroku as you can
91:44 - see this link is deployed to your roku
91:46 - so let's just wait for
91:48 - the last confirmation
91:50 - and then it's going to opt out of that
91:53 - command
91:54 - so let's wait for it
91:56 - okay nice so now let's click on this url
92:00 - so let's open the link
92:03 - once we open the link we should just see
92:06 - our app it says um programming error so
92:09 - anytime in which you are dealing with
92:11 - database and then you just deployed your
92:13 - app you need to also make migrations
92:15 - just the way you make migration once you
92:17 - change your model.p wi-fi i'm just going
92:19 - to come in here say heroku
92:22 - run
92:24 - python
92:25 - manage the py make
92:28 - migrations
92:32 - and then after making migrations
92:35 - we're just gonna say by heroku run
92:38 - python menu.py migrate so that's going
92:41 - to do and solve all the problems so
92:44 - let's give it a second to run that
92:46 - okay
92:47 - running python monitor py make
92:49 - migrations
92:50 - so that should run that
92:53 - within no time
92:56 - running
92:57 - still running
92:59 - okay no change is detected so let's just
93:01 - migrate
93:06 - so now once this migrates successfully
93:09 - we're just gonna go refresh our link
93:11 - and then we should see our to-do list
93:14 - app
93:14 - so let's wait and see
93:18 - okay see my
93:20 - creating let's see
93:23 - up run and then go yes so that's nice
93:28 - let's just wait nice so now once we come
93:30 - here and then refresh we shouldn't see
93:32 - any error so as you guys can see it says
93:35 - jungle to-do list up
93:37 - now we can just
93:38 - add and say
93:40 - it's the gym
93:43 - and once you press enter you see it's
93:45 - added already and we can say
93:48 - code added you can say uh take a run
93:57 - and it should be added so as you guys
93:59 - can see everything is working perfectly
94:01 - let me just try to delete one
94:05 - so let's click on delete
94:07 - and you guys can see that it's gone so
94:09 - everything is working perfectly it's
94:11 - hosted online the database is connected
94:13 - and i walked you guys through all these
94:15 - steps so thank you for watching this
94:18 - session of the video and you can go to
94:20 - this url to check it out live is live
94:23 - now and i'm not taking it down
94:25 - thank you for watching once again
94:29 - [Music]
94:32 - in this part of the tutorial we're going
94:34 - to be building an english dictionary
94:37 - using django
94:38 - so user is going to be able to search
94:40 - for a word and get the meaning of that
94:42 - word the synonyms and the antonyms of
94:44 - that word also so let's start by
94:46 - installing django
94:48 - we say peep install jungle
94:54 - and then you should tell me requirements
94:56 - already satisfied jungle
95:00 - admin
95:02 - start up stat project
95:07 - and let's name it english
95:10 - dictionary
95:15 - so let's move into english dictionary
95:22 - and then let's start an app
95:24 - a jungle app
95:26 - and let's name the dictionary
95:35 - so now when i press dir i should see
95:37 - money dot py english dictionary and then
95:39 - dictionary so let me come into visual
95:41 - studio code and then open this project i
95:44 - just created i'm going to click on open
95:46 - folder
95:48 - and then right here all i just need to
95:50 - do to select this folder
95:52 - and then it should open in my editor
95:55 - so now that i have these let me just
95:57 - start configuring the first thing i need
95:59 - to do is to create a new folder in here
96:02 - and name it templates
96:05 - so this template folder is going to
96:07 - contain all our html files
96:09 - so let me just move in the html file for
96:12 - this project
96:15 - let me move it into
96:17 - visual studio code
96:20 - so now that we have that in there
96:22 - what i just need to do is to go to
96:25 - english dictionary then settings.py
96:28 - and i'm just going to go down a little
96:30 - bit
96:32 - and right here
96:34 - i'm going to say based there
96:37 - based on the score there
96:39 - then slash templates
96:45 - now this is just to tell jungle where
96:47 - our html files are located
96:50 - after doing this i just need to do the
96:52 - url mapping
96:54 - so i'm going to come into dictionary i'm
96:56 - going to create a new file
96:59 - urls.py
97:01 - in there i'm going to say from django
97:04 - dot urls
97:07 - import
97:08 - path
97:09 - and after i put in these i'll say url
97:11 - buttons
97:14 - equals to
97:16 - pass
97:19 - and now save views
97:21 - dot
97:22 - index
97:23 - and let me give you the name
97:25 - of index
97:27 - so let me first import views before i'm
97:29 - able to use it so i say from roots
97:32 - import views
97:35 - so i'm going to go into views folder now
97:37 - and create a new function named index
97:40 - so i'm going to say
97:41 - def index
97:44 - it's going to take a request
97:49 - and then
97:50 - i'm gonna render this html page in this
97:52 - template folder so i'll say return
97:56 - render
97:58 - request
98:02 - index.html
98:05 - okay let's make sure this is correct
98:07 - index.html
98:09 - so before
98:11 - uh
98:11 - index.html can show us our own page we
98:15 - also need to come into the project
98:16 - folder and open urls.py
98:20 - right here we need to import include
98:25 - after importing include
98:28 - then we're going to say path
98:33 - then include
98:37 - i'm gonna say dictionary
98:41 - dot urls
98:43 - then i'm gonna save it
98:46 - now i can quit this let me just open a
98:48 - new terminal
98:51 - and then what i need to do now is just
98:52 - to run my project
98:59 - now when i run this project my html that
99:02 - i rendered is going to show as the home
99:04 - page so let me open up my browser and
99:06 - then i'm going to open up my localhost
99:08 - in my browser so let me open up
99:11 - localhost
99:15 - so now it should show me my project
99:19 - as you can see it shows me this simple
99:21 - html page with just a form so this is
99:24 - what we need to build the dictionary
99:26 - very simple so you are just going to
99:28 - type in a watch once you click on search
99:31 - it's going to say the meaning and
99:32 - synonyms of the word right here so let's
99:35 - simply do that
99:37 - this is very very easy what we just need
99:39 - to do now
99:40 - is to first of all
99:43 - create
99:45 - a new view and let's name it watch
99:50 - let's say requests
99:56 - and let's say return
99:58 - render
100:00 - request
100:03 - and then we're going to create another
100:04 - html page
100:06 - let's name it word.html we've now
100:09 - created it now but we're going to create
100:11 - it so let's save it for now
100:13 - and let's also create a new view
100:16 - name it word
100:23 - let's save
100:25 - let's go back to our views this should
100:27 - be returned
100:30 - then let's save this
100:34 - so in our urls
100:37 - since it's a list you should have a
100:39 - comma so after doing that we're just
100:41 - going to come into templates
100:45 - and let's first create a new file let's
100:47 - name it word.html
100:52 - now we're going to leave this file blank
100:54 - for now
100:55 - let's close this terminal now in this
100:57 - index
100:59 - what we want to do is to make this a
101:01 - form
101:02 - so i'm going to scroll down
101:05 - right here
101:08 - let me first say
101:10 - h2
101:13 - search
101:15 - for
101:16 - a word
101:19 - so let's see the changes
101:21 - okay it shows but not
101:23 - pretty cool so let's leave it so what i
101:25 - want to do now is to make sure that this
101:28 - is a form so i'm going to say
101:30 - form
101:32 - and then we're going to close the form
101:34 - after this button
101:39 - like this
101:40 - so what i want to do after closing the
101:42 - form after the button we're just going
101:44 - to say action
101:50 - and this action is going to the word
101:53 - url
101:55 - like this
101:58 - now we must make sure that these inputs
102:00 - have a name which it doesn't know so now
102:03 - i'm just going to say
102:05 - name
102:06 - should be equals to
102:08 - search
102:11 - so this is the search term in which it
102:13 - is accessed then it's going to be
102:14 - submitted into this word so i'm just
102:17 - going to come right here
102:20 - in the views
102:21 - i'm going to get that word
102:24 - we're going to say
102:25 - search
102:27 - equals to
102:28 - request
102:31 - dot get
102:33 - that get
102:34 - and we're going to say word
102:37 - i think it's search
102:39 - so what this is must be the name
102:43 - which you are assigning to the input
102:45 - that's why i intentionally put a name
102:47 - field here because that we're going to
102:49 - use to get whatever the user searched
102:51 - for
102:52 - so now that we have this
102:54 - how are we going to get the name the
102:57 - meaning synonyms and antonym so i'm
102:59 - going to use a python library called pi
103:01 - dictionary so let me bring up my time
103:04 - now here real quick
103:06 - let me open a new terminal
103:10 - so first to install this
103:14 - module we need to type peep
103:17 - install
103:21 - by
103:22 - dictionary
103:26 - so i have it installed it should tell me
103:27 - requirement already satisfied
103:29 - but for you you should go ahead and
103:31 - install it as you can see stage
103:32 - requirement already satisfied
103:35 - so let me go back to my normal time now
103:37 - and quit so what i just need to do right
103:39 - here is to import this library so i'm
103:41 - just going to save from
103:45 - pi dictionary
103:47 - import
103:49 - by dictionary
103:51 - now that i have this imported
103:53 - i'm just gonna say
103:56 - dictionary
104:02 - should be equal to
104:05 - by dictionary
104:08 - with brackets
104:10 - so now that we have the search which is
104:12 - also the word
104:13 - we're just going to get the meaning and
104:15 - storage in a variable name meaning
104:17 - so same meaning
104:19 - equals to
104:20 - dictionary
104:24 - dot meaning
104:28 - of this search
104:31 - so that's the meaning and then we're
104:34 - also going to do the same thing for
104:36 - synonyms
104:40 - it will be equal to
104:42 - dictionary
104:45 - just synonym
104:48 - of the search
104:51 - i'm going to do a similar thing for the
104:52 - answer names
104:54 - so anthony's
104:57 - will be equals to dictionary
105:02 - that antonyms
105:06 - of the search
105:09 - so this is how to simply do it and after
105:12 - doing this what we just need to do
105:14 - is to put it in a context
105:21 - so in here i'm just gonna say
105:24 - the meaning
105:30 - so the meaning should be equals to the
105:33 - meaning because the antonym the
105:38 - and we are going to pass all this into
105:41 - our
105:43 - html so meaning
105:46 - should be meaning
105:47 - comma
105:50 - they just copied
105:54 - i'll say synonyms
105:56 - should be synonyms
105:58 - and antonyms also
106:05 - should be antonyms
106:08 - so we can just pass this right here and
106:10 - say context
106:13 - and let's save
106:16 - so now once we save this
106:18 - and we come into our word.html
106:22 - what i want us to do is just copy all
106:24 - these
106:26 - paste it right here
106:28 - and then what i want to do now is that
106:32 - under here
106:33 - we want to write the meaning and i don't
106:35 - need the synonyms of the word
106:40 - so that would be under the button under
106:42 - the form
106:44 - so let's say meaning
106:46 - let's give it like an h3
106:48 - let's say meaning
106:51 - now should be equals to
106:54 - meaning
106:59 - so now let's just test meaning before we
107:01 - continue
107:02 - so let's just save this
107:05 - and then what i want to do is to come
107:08 - here into our browser and refresh so
107:11 - let's search for it
107:13 - and then let's click on search
107:17 - and once we click on search as you guys
107:19 - can see it takes us to another page what
107:23 - search equals it
107:25 - says meaning equals all of these
107:27 - so what i want to do we just want to get
107:29 - only the first meaning we don't need to
107:31 - rest
107:32 - and we need to pass this css right here
107:36 - so i'm going to come into a visual
107:37 - studio code
107:39 - and then right here in the word
107:42 - instead of putting it right here
107:46 - i'm just going to put it
107:48 - outside to wrap and then in views dot py
107:53 - meaning will be meaning
107:57 - a noun
108:01 - like this
108:03 - and the first one zero
108:06 - so we can test this again
108:10 - so once we go to the home page
108:13 - it should take us
108:16 - yeah so let's search for it again
108:20 - and then once we click on search
108:23 - she take us to the words page
108:26 - and now we say key error at noun
108:30 - okay
108:31 - so the what is simply saying is that in
108:34 - the dictionary that this is bringing
108:36 - back there is no key named noun
108:39 - so we just need to patch that
108:42 - so
108:44 - that is because
108:45 - it is not unknown so we can basically do
108:48 - that in plenty other ways but for now
108:52 - let's just search for
108:55 - set
108:59 - and then let's see
108:59 - [Music]
109:01 - as you guys can see meaning a group of
109:04 - things of the same kind that belong
109:07 - together and are you so used so that's
109:09 - how to get the meaning of the word so we
109:12 - also want to get the synonyms and
109:14 - antennas so i'm just going to use a for
109:17 - loop right here
109:19 - so i'm going to say
109:21 - exactly the same thing
109:25 - and say 4.
109:30 - 4
109:32 - let's come into our views and get what
109:34 - we passed
109:39 - signal name in synonyms
109:43 - so you just want to pass in the synonym
109:47 - and then what we just want to do
109:52 - is to end for
109:55 - and i'm also going to do the same thing
109:57 - for the answer names let's delete these
110:01 - copy this
110:03 - and paste
110:06 - so let's try for the answer names also
110:11 - so in the word
110:16 - say to be for
110:18 - antonym
110:19 - in antonyms then this should be antonym
110:22 - then n4 so let's go back and see
110:26 - so if you just refresh this page we
110:28 - should see the meaning
110:30 - with the antonym and synonyms okay as
110:33 - you guys can see
110:35 - if i scroll
110:37 - okay so
110:38 - it's basically just listing everything
110:40 - out so we just need to pass that and
110:43 - let it just
110:44 - put it in a word
110:46 - so first of all this is not meaning
110:53 - what we need to do now
110:54 - is this bring this in here
110:59 - i want to bring it into the hdre tag
111:02 - instead of outside
111:07 - so i'm gonna do like these
111:10 - and just end four
111:12 - same thing we're gonna do here
111:15 - into the h3 tag
111:17 - i'm also going to end for in the h3 tag
111:24 - so that's what we want to do so right
111:26 - here also we want to say synonyms
111:33 - and then right here i want to say
111:34 - antonyms before the for loop
111:39 - so let's just give it caps later
111:48 - and we can save
111:50 - once you come back here and refresh this
111:52 - page now
111:53 - we should see it aligned horizontally
111:57 - as you guys can see meaning a group of
111:59 - things of the same kind that belong
112:01 - together and are so used synonyms best
112:04 - no good put inlay and a lot of synonyms
112:08 - so we just want to use comma to separate
112:10 - each of them so i'm just going to put
112:12 - comma right here and also comma right
112:14 - here so just press that
112:17 - and once we refresh we should see comma
112:19 - so that everything will be refined so as
112:22 - you can see meaning a group of things of
112:25 - the same kind that belong to together
112:28 - and are so used so synonyms it gives us
112:30 - all the synonyms antonyms also give us
112:32 - all the antonyms so let's search for
112:35 - english
112:38 - the session for the meaning
112:40 - and then we should see the meaning
112:42 - synonyms as you can see it says meaning
112:45 - an indo european language and also give
112:48 - us synonyms and then the antonyms so
112:51 - that's how to build an english
112:53 - dictionary using jungle i hope you
112:55 - enjoyed it
112:58 - [Music]
113:02 - now that we finished building this
113:03 - project what we need to do is to deploy
113:06 - it online
113:08 - so for us to do this we need to have two
113:09 - live item libraries installed and these
113:12 - libraries are unicorn and django heroku
113:16 - so to install them you save python
113:17 - install pip install
113:20 - gunikon
113:23 - and django
113:26 - i think heroku
113:28 - so i already have them installed you
113:30 - should tell me requirements already
113:32 - satisfied but for you you should go
113:34 - ahead and install that
113:36 - so now the next thing we need to do is
113:38 - to go into our roots directory
113:41 - and create a new file named runtime.txt
113:50 - so in this runtime.txt what is going to
113:53 - be in there is the python version in
113:55 - which you are using
113:56 - so mine is python
114:00 - 3.9.1
114:04 - so i'm just going to save this
114:06 - and then what i need to do now is to
114:08 - create another file named prog file
114:15 - and then what is going to go in here is
114:18 - a file
114:19 - is this code
114:21 - so
114:22 - it changes project to the name of your
114:24 - project which mine is english
114:34 - dictionary so you can save this file now
114:38 - and close it
114:40 - so after doing this the next thing you
114:42 - need to do
114:43 - is to come into your terminal and say
114:46 - peep
114:47 - freeze
114:50 - requirements
114:56 - dot txt
115:01 - now you'll notice that you're going to
115:03 - create a new file here
115:05 - that's because it's storing all the
115:07 - libraries in which we used in this
115:09 - project
115:10 - so now let's come into settings.py
115:13 - we're going to go to database okay since
115:17 - we are not using database in this video
115:18 - we don't need to configure anything for
115:20 - database but what we just need to go is
115:23 - come up
115:25 - import
115:27 - jungle
115:29 - iroku
115:30 - and then scroll down allow us
115:35 - let's allow
115:37 - all us
115:38 - and then we're going to scroll down to
115:40 - the bottom
115:42 - i say jungle
115:45 - heroku
115:47 - dot settings
115:51 - locus
115:53 - and open bracket close bracket
115:55 - after doing this i'm just going to come
115:57 - into my command line and say heroku
116:01 - login
116:04 - so now it's going to prompt me to open
116:06 - my default browser and then log into
116:09 - iroku from there
116:11 - so it should give me an option like
116:14 - press any key to open your browser or
116:17 - press q to quit so if you press any key
116:19 - it's going to open your browser if you
116:21 - press q it's going to quit
116:23 - like you can see so if i press h
116:26 - it's going to open up my default browser
116:29 - like this and then log in
116:33 - now i'm logged in if i go back in there
116:35 - you can see that i'm now logged in so
116:38 - what i just need to do now is to create
116:40 - an uroku app so i'll say heroku create
116:43 - and let me name it english
116:46 - dictionary
116:50 - white
116:53 - so right now it should create that app
116:55 - and then give me two urls one is the url
117:00 - to the git repository and the other is
117:02 - url
117:04 - to my app
117:06 - so now that we have this
117:08 - we're just gonna say git status
117:13 - okay and we're going to initialize it by
117:16 - saying git init
117:18 - and then git status again
117:22 - and now i'm just going to say git remote
117:27 - v
117:29 - and then adjusting say git remote
117:34 - add
117:36 - heroku
117:40 - and then we're going to add that giz
117:41 - repository right here
117:47 - so i'm just going to copy it
117:51 - come down and paste it
117:54 - nice so i'm going to say git remove v
117:56 - again
117:57 - nice and then we're going to take git
118:00 - status
118:01 - so what i just need to do now is to just
118:04 - say git add
118:09 - i'm going to say git commit
118:18 - let me see the first time
118:26 - enter
118:27 - and then i'm just going to say git
118:30 - push
118:33 - heroku
118:34 - master
118:39 - so now it's going to deploy it to iroku
118:43 - so i'm just going to give it a couple of
118:45 - seconds
118:46 - to deploy our project onto your roku
118:49 - it doesn't take too long depending on
118:51 - how large a project is
118:57 - so let's see
119:00 - okay it's working
119:05 - so everything is going on fine right now
119:11 - i'm just gonna give it a couple of
119:13 - seconds
119:14 - install
119:15 - yes installing collected packages
119:24 - okay
119:28 - compressing after compressing it should
119:30 - say done yes so it has said done
119:34 - that means it has been deployed
119:37 - so i'm just going to wait for the last
119:38 - confirmation and then it's going to opt
119:40 - out of this
119:41 - command
119:43 - so let's just wait for that confirmation
119:45 - and then we're going to open this up so
119:47 - don't so when i click on control and
119:50 - click it's going to open up in my
119:52 - browser
119:54 - so as you guys can see it opened it up
119:57 - so let's just search for
120:00 - english
120:04 - so when we search for english you guys
120:06 - can see brought out the mini synonyms
120:08 - and antonyms so let's search for another
120:11 - thing like spots
120:18 - so
120:19 - as you guys can see what are the meaning
120:21 - synonyms and antonyms so that's how to
120:23 - build a busy english dictionary using
120:26 - jungle so we've hosted this you can go
120:29 - to this url now to view it if you enjoy
120:32 - this part of the video don't forget to
120:34 - like it and smash the like button and if
120:37 - you have any question please drop it in
120:39 - the comments
120:41 - so guys that's gonna be the end of this
120:43 - video thank you so much for watching to
120:45 - this part if you like this video once
120:48 - again please don't forget to smash the
120:49 - like button and please subscribe and if
120:52 - you like more videos like this i'm
120:54 - building more projects on web
120:56 - development with python jungle and stuff
120:58 - like that you can also check out my
121:00 - channel at code with tomi having that
121:02 - said bye for now

Cleaned transcript:

hi guys welcome to this video in this video we're going to be learning django by building three different projects so the projects we're going to be building are a url shortener a todo list app and an english dictionary so without wasting any of your time let me show you the demo of everything we're going to be building so the first one i have here is the url shortener so let me show you how this works if i go to google and i search for a term like python once i click on enter you see that it gives me this link to the search page but the link is very long now if i come here and then paste that link in here let me just remove this and click on shortened you see that generates this link for me this shorted link now once i copy this shutting link and then go open it in a new tab you see it automatically redirects me back to the link which i shortened now that's how the url shortness going to work now the next app we're going to be building is the todo list app now let me show you how the todo list app is so if we come here you're going to see a jungle todo list app this is what we're going to be building and we're going to host all the apps in which i'm talking about so how this works is you can add a todo list so let me say something like get a drink i click on add you'll see that it automatically adds it to those list and once i click on delete right here it automatically deletes it from the list so that's what we're going to be building and the third one we're going to be building is an english dictionary so if i come here and i search for a word like english once i click on search it's going to give me the meaning the synonyms and the antonyms so you see the meaning of the word the synonyms of the word and antonyms of the word now let me search for something else like set once i click on search it's also going to give me the meaning of the word a whole bunch of synonyms and antonyms that's what we're going to be building now i must say that we're going to deploy all the projects in which we're building and i'm going to link the source code to all this project in the description below so if you're stuck you can easily follow up and you can get all the html files and the templates we are using through the source code in the link below and if you like more tutorials like these don't forget to check out my channel at goodwithtomy having that said let's go straight into the tutorial so guys in this tutorial session we're going to be building a url shortener using django so the first thing we need to do as always is to make sure that we have django installed i'm just going to say beep install jungle and then this command line is going to install django on my computer but since i already have django installed it's going to tell me something like requirement already satisfied as you can see but for you you should go ahead and install that so let's just create our django model say django admin let's say start project and then let's name it url shortener so now we have created a new project named url shortener let's just go into that project so in here i'm going to create a jungle app so i'm going to say django admin start app and let's name it shortener so this is going to start a django app name shot now if i press d i out i'm going to see short now so now that we have our project setup we're just going to import it in visual studio code so let's come here and then what we just need to do is to open folder and then we're going to go into that folder so right here is the folder and select folder now it's going to open this my django project in this code editor so we can code so now that we have this opened what we just need to do is to set up our project so the first thing we need to do is to create a new folder and name it templates now in this template folder what's going to be in there is the html pages in which we are going to be using in this project but before i continue i have my html page here which is index.html i'm just going to drag it into visual studio code and i'm gonna put it in template so let me say once again that i'm gonna link everything we're gonna use in this tutorial i'm gonna link the source code in the description below so you can check them out to get any file you need now that we have these we're just going to come into our url short now go into settings.py and then we're going to come down the first thing we need to do is to add our app which is shortener now that we've added that we're going to come down into templates and we'll look for this i'm just going to say based there i'm going to say slash templates so what this does is that it tells jungle we have to look for all our templates file and as you know we saved it in our base directory in a folder called templates which we created right here let me save this settings.py and close it now i want to do the url mapping if i run my project now what you are going to see is jungle default template so we want to show our own html template first to do this we are going to come into our app create a new file name it urls.py and then we'll say from jungle dot urls import path and then we're also going to say from the roots import views now we're going to say url patterns should be equals to path home safe views dot index i'm going to give it a name of index so now what we just need to do is come into views and create a new function and name it index it's going to take a request and then let's render our html page which we have in here that is index.html so say return render request index.html now when we save this issue automatically use this index.html as our own page but not yet that's because we only did url mapping for our app we also need to configure it for our main project so we're going to come into our main project go to urls.py what we're going to do right here is to import include and then we're going to create a new path and then let's give it blank and we're going to say include shortener dot urls i'm gonna save this now i can cancel this now let me open a new terminal and just run our project so now a new terminal is being popped up and what i'm just going to say is python manage the py run server now this command line is going to run our project on the localhost so let's just wait for it to run our project quickly okay as you guys can see it's running on our locals let's open our browser go to our localhost and then we should see our html page as you guys can see we have this beautiful html page so now that we've taken care of everything about the template let's dive straight into configuring the back end so what i want to do is to create a django model that is going to save a url anytime a user imports a url and then shorten it so let's just go ahead and do that let's come back to official studio code we can close this and in our modules.py file let's create a new model let's say class and let's say links okay or let's name it urls i think that's better so url and we'll say models dot model and then you should take two fields which is link so say models.chat field and let's give it a max length of ten thousand because some links are very long and let's give it a uuid as a models dot character field also and the max length of these should just be 10. now what this is doing is that are very familiar with django models you know that is the same thing as a database so we're creating a database named url and it's going to have two tables the first one is going to be link and the second one is going to be uid so link is going to take the url which is i want to shorten so once the user come here and you put a url right here and click on shorting whatever that user's input should save in this link model and then a uid should be passed to that link that is a specific id will be passed to that link you guys are going to understand in a bit so let's save this first let's bring back our let terminal just open the new terminal here quickly and then let's say python manage dot py make migrations and then after making migrations we say python manage the py migrate so now this is going to migrate everything into our database so now that we have uh models migrated what i like to do is to configure my admin interface so i can easily see my database so let's just say python manage the by create super user so now let's just use the admin and let's also use admin right here let's give it a password now it has okay y and now it has created that super user we can cancel this if i come back here and go to slash admin okay slash admin it's going to prompt me to login now once i log in with the details in which i created now and i say login now you guys will see that we've logged into our admin interface so for now we only have two database which is users and groups so if i open my user database you're going to see the admin which we just created but what i want to do is that under here we should also have a new database which should be urls so let's go ahead and do that we're just going to open our admin.py and register that model first of all we need to import the model save from dot models import url right here we say admin dot site the register now let's register that url now once we save this and come back here and refresh you're going to see that that is going to pop up right here so let's wait for our server to load so if we come back here and open up our terminal okay our server is loaded back now once we refresh you guys can see that we now have a new database table which is called urls so now that we have these let me go to my home page once the user just clicks input a url clicks on shorting it should automatically save that url into this database and since we're going to be using ajax it's not going to reload this page now you know that once you submit a form in html it's going to take you to another page or reload that page but we're going to use ajax to submit this form so once the user just input a particular url right here what's going to happen is once you click on shorting without the page reloading it's going to be saved into this database and then it's going to return back a response with a unique id so let's go ahead and do that you understand what i mean now we're just going to come back we're going to come into our index.html that is our template file so let me cancel this terminal for now what i want to do is to go down into this input so right here is this so what i'm looking for is this input and i want to make it a form so let me come back so i'm gonna say form and then i'm gonna close it right here so let me just delete this so what i was going to give this form is an id that's the only thing so i'm going to say id and the id should just simply be let me say my form or post form now this is good and we're going to be using a post method so when was in the post method in ajax we're not going to configure it right here but we're going to configure it in the script so you're going to see that also in a bit so let me say csrf underscore token and save so this button let me give it a type let me say type should be submit so that once they click on this button you should submit this data and this also should have a name let me save it as okay it doesn't have a name so say name should be equals to link so now that we have these what we just want to do is to come down after all our html and create a script let's just close that and then let's make sure that it has the type we'll say text slash javascript so what we just want to do now let's give it some indentation we're going to say dollar sign and then is now we're going to start with configuring or submitting our form so before we start doing this let's come into our views.pri so once the user clicks on shorting right here we wanted to take this to a particular url so that url is going to be called create so in that url it's going to create that in our database and then send the response here let's do that quickly so i'm going to come back right here in urs.py let's create a new url and name it create let's say views dot create name equals to create let me show this as a comma then write in views create request and then let's pass for now so now let's save this so after doing this since we have this url what we just want to do now is to come here and submit that form to this url so once we submit this form to that url then we're going to come back here and then get everything in which the user inputted and just save it into our database so let's do that so after saying dollar sign i'm going to say document and then what i want to do is dots on submit so let's open a bracket submit on submit of post form hashtag right here hashtag post form now how we are getting this post form is basically this form so what we're saying is on the submit of post form damage once user clicks on this submit of this form what we want to do let's give it a function so that should be outside piece comma function should be outside that and let's say e is like this so now what we just want to do is to say e dot prevent default so what this e dot prevent default is going to do is that once a user clicks on submit of this form it will make sure that that page doesn't reload so now that we have that covered let's now use our ajax so say dollar sign again dot ajax and endless open curly braces press enter then the type which is also the method should be posts and then url it should be taken to slash great so come on and then the day time which you want to pass into it so let's do this and then the link dollar sign hashtag link dot value so now we're going to say csrf middleware token dollar sign and then inputs before we say input put these square brackets let's close that real quick and say name the name should be csrf let me do where token so that's what that does and then after this we should say dot valve to get the value so we're also sending in a csrf token so after doing this we're just gonna come down here and click on comma and then let's also give it a success function so after doing these okay in here we're gonna say success and let's give it a function so that means if everything has been submitted successfully for now let's leave it blank like this so let's just leave everything blank for now and let's come here and make sure we put our semicolon since we're working with javascript so now that this success function is uh let me say is blank we're going to take care of that after we submit our form so now let's save so since we're sending all this data into our create url let's go into our create url and get those data so right here in this views dot py we're going to go into that function let's remove this path and say if request that method is equals to post now if they are sending a post method let's say url should be equals to post dot it should because request dot post link so we're getting what the user put as this link and store it in a variable named url and then let's also use a uid so once the user also stores that variable once the user stores that link i mean we also want to assign a particular id to that variable so that we can use that id to generate a shortened link and once that goes to that shortening link it should come back to this url so it's going to make sense also let's just import uuid to get a unique id so i'm going to say string we want to make sure it's in a string so say that uuid does uuid 4 open bracket close bracket and then what you just want to say square brackets column five so what shortening because when this generates a unique id it generates is very long but want to shorten it to only five strings so let's save okay we don't need to save yet so what we need to do now is to after we get all this data we just want to save this data in our database first to do this we need to import our modules we say from dot models import url so right here now we're just going to say new on url should be equals to url dot url open bracket close bracket and the link should be equals to the url and then uuid should be equals to uid now once we have these we're just going to say new url dot save and then once we save these we just want to return a response say return http response but before we use that we also need to import http response say from django.http import http response right here so say return an http response of the uid now we can save this once we go back here and test this now it should work let's refresh this page now let's give it a url let's do something like https then let's say www.youtube.com slash code with tommy okay this is slash now once i click on shorting nothing happens but if i come right here and click on refresh as you can see nothing happens again so we need to open our inspect element right here we're gonna come to the network so now let's try it again let's click on shorting so as you can see we have an error and this is what the error is okay it's giving us a jungle error actually so let's just enlarge these and see so let's go and see where the area is coming from it's coming from right here so request dot post link so there is an arrow actually right here let's see why that is giving us an error so i'm gonna go back and just check that let's come here so right here instead of saying url let's give it a link unless a link should be equal to link and then let's make sure everything is working perfectly so say if request the method is equals to post then let's start a link should be request dot post link and then uid should be string now that is nice let's save it and go try it again now let's close this let me just copy the issue area i want to shorten now let's refresh this and paste and then click on shorting now it gives us an error now we're going to see what's up okay i think it's not getting this link in which we are trying to give it so let's see let's go down again so it's not getting linked the program will be from index.html so it's not getting linked we're gonna come here so i think the id should be linked okay not this the id should be linked let's save it i need to refresh and let's click on shorting as you guys can see now we don't have any error again once we come here now preview everything is nice so this is the uid which we are returning as an http response right here as you can see we return an initiative response there's the response it gives us if we come here and hit refresh we'll see that we now have a new object the link with the uid so let's try it again so let's see let's just say youtube.com and let's click on shutting it does another one with a uid also once you click on refresh and we come in here you see that link with that uid so now what we just want to do is to show the user the shorted link in which we generated so for us to do this we're going to come right here into our index we want to create in this section after the form let's have our own div tag and in that div tag let's create like an h2 tag so in this http is where the link should be for now let me put link and refresh so see how that will look okay it's in this shorting so let's just bring out this away and then put it outside here so let's save this and see again okay same thing so let's just remove the div tag which we have i think there's a styling attached to that div tag now once we refresh it should just be a link okay now is there's a stanley attached to the h2 nice so what i just want to do is to remove this from main and just remove this and put it right here let's save it and see okay it's outside okay yes so what we just want to do now let's try and put it here let's hit refresh nice so we just put it in this section and now we can see that the link is showing that so this is where we want the link to show now let's just remove this link and leave it blank so once we get an http response we want to show the link right there if i save it i'll come back you can see that it's blank but once we're shutting the url we want to see the link pop up here for us to do this we're going to come back to our script where we see that success function we're going to get the http response now whenever we're returning an http response for us to be able to get that response using ajax we're going to get it as a variable named data so i'm going to say data now this data is a variable which has the http response stored in it so in here we're just going to say dollar sign h2 and then what we just want to say is that html and then let's change that to let me give it this let's just simply change that to low cost 8000 slash let's add data now if i save this and go you are going to see what it looks like so let me refresh it let me put that same thing as shorting now once i shorten you see it gives me this link which is locales 8000 slash this uid which was assigned to this url so now for now we're just using local slash because we've not uh deployed our app to on the web so once we deploy our once we host our this our app we're building on the web we're going to use a specified link we're not going to use localhost 8000 but i'm going to use let's say link dot ml slash this or just a short link but for now let's stick with 8 000. localhost 8 000. so now what i want to do is that once these are now copy these links open a new tab and go to that link it should take the user back to that url in which is shortened that's how a url short network so for now the same page not found let's go and do this i'm just going to come right here into urls i'm going to create a new url and name it let's leave it blank and it take a string it's going to be a dynamic url and say pk so say views.let's say go and go so let's come into views create a new function name it go request and let it also take pk so now once we have this we're just going to get pk and then what we just want to say is url details should be equals to url dot object dot get the one in which the uuid is equals to pk and then let's just return want to redirect so we need to import redirect right here i'm just going to scroll down return redirect the user to url details dot link now let's save this now what we're doing is that once the user goes to slash let me come into our url.py so this is a dynamic url it's going to create something like slash then it's going to take a string and save it in a variable name pk so what is that comes to slash this uid it's gonna this string pk is gonna be replaced and what's gonna be there is this id so once we now have this id we're gonna come into our view.py get that id as pk then we're not going to search for our model and make sure that that uid is present in our model and a link has been assigned to it and then we're going to get that link so i'm just going to say return redirect url details dot link so i just redirecting the user to that link so let's save it and test this out so now let's refresh okay our server is not running let's pop it up okay the problem is here we need to put a comma let's save that reload reload so now let's refresh our app now let's just put www dot youtube dot com slash code with tommy and let's click on shorting it gives us a url we copy it paste it right here so now you can see it says page not found www.youtube.com so we need to pass this as a url for us to do this we'll come back here we're gonna say https and this now once we save it and come back let's copy this our page again is our url and paste it now you'll see that it takes me to that page you see it takes me to https youtube.com so now let's come back let's try it out with another url let's see www dot and once i click on shorting it gives me that url let me copy it and paste it right here now you see it takes me to socialblade.com now that's how our url shot now works so i hope you guys enjoyed and understood what we did in this video if you did please don't forget to smash that like button and please subscribe thank you for watching this session so now that we have created our project what we just need to do is to host our project online so for us to do this we're going to use the roku as our hosting platform so we don't need all these we can just quit these what we need is two python libraries and they are unicon and django heroku so first to install these libraries we're gonna say beep okay there's beep install gunikon and django iroku now once i click on enter it should tell me requirement already satisfied because i already have it but for you you should go ahead and install it so you see it says requirement already satisfied so now that we have this installed what i just need to do is to come into my root directory let me close out this my root directory i'm going to create a new file and name it runtime.txt now this file should contain the python version which you used in this project so i use python 3.9.1 then we're going to save it another file we need to create is profile so this proc file is going to create contain these web unicorn web gunny con then the name of your project which is url shortener dots wsgi column application log think a game file and like this so we're just gonna save it and then after doing this what we just need to do is to pip freeze requirement.txt beep freeze requirement dot t x t so that's done a new file here is requirement.txt so i'm going to come into our project folder and go to settings.py and up here that's right here we're going to import django heroku and i'm also going to import dj database url and then we're going to come here into a loud boost and make sure that we allow all the hosts after doing that we're going to scroll down and we're going to come into databases delete this okay delete from here and then we're just gonna say dj database url dot config so after doing this i'm gonna scroll down to the end all right at the bottom i'm going to say jungle iroku dot settings then open brackets in that bracket i'm going to say locales like this so after saving this we're good to go now we're just going to come into our command line and what we need to do is to log into roku by saying heroku login okay we type that wrong so say iroku login now this is going to prompt us to open our default browser and automatically log us in to our roku account so let's wait for it it should give us a reply soon so let's type any so now our browser should open up so when i click on login logged in if i come back it's automatically logging in now let me create a new app by saying heroku create and let me name it url shortener yt one two three just naming it a random name simply because i know there are there will be names that already have you are rational because in iroku you can't have you can't create a project with a name that has already been created before so if i just use plain url short now it will tell me another person i've taken this name so that's why i just use that randomly so since we have this now we're just going to say git status initialize this does nice so get remote v then git remote add iroku and then what we want to add is up here this git link just paste it and enter and then let's say git remote v again nice and then let's say git status nice so what we just want to do is to create a new database which is heroku addons create eroku postgres ql rpdf and press enter so now this should create a postgres database with the ob dev version the database has been created so now after doing this i'm just going to say git add and then you should add so i'll say git commit let me see the first time and then i'll say git push iroku master so now this git push roku master is the final step in deploying this project so once this is done it should automatically deploy it onto iroku and then we are going to get our site url so let's wait for it to deploy it should deploy within a minute depending on how large your project is so our project is pretty light so you should install routine seconds so let's see let's just wait okay installing collected packages so what is doing now is installing the packages which it saw in the requirement.tx files so let's just see after compressing it should say done so let's wait for it to say done okay it says done and then now let's wait for our final confirmation and then we're just going to go to this url which is the url of our project let's wait for our final confirmation again okay that should pop so it says verify deploy dot so let's just go to this open link now you guys can see our project is ready so what we want to do now before we test our app we have to come back here and migrate our database so say heroku run python manage dot py make migrations and then after this we're going to say hiroku run python money dot py migrate just like how we migrate our database when we are building our project so let's wait for this command line to run it should actually say no change is detected yes but i just like doing that so that we won't get any error so my grid now now this will migrate everything into our database so let's give it a moment you should migrate that soon let's see if i didn't do this it's going to give me an arrow so i just have to do this to prevent that error okay and then done so let's come back now refresh so now let's try to shut in a url in this again now you see it gives me locales 8000 then this link so if i go to this url slash this uid it's going to take me to youtube.com slash code with tommy but because in when we are building our project we added this localhost so that's because we see testing our project now we're supposed to add the url of this project which we've deployed but as you can see we are building a url short now if our url shortness something like this let's say once you shut in a url it gives you this type of url then i don't think we are building a url short now again so i'm going to buy a free domain i'm going to get a free domain there is actually a site which allows you to get a domain for free so i'm going to get a free domain a very short one and i'm going to connect it to this our project so let me show you the domain i'm going to get before i show you let me test out once i click on enter you can see it takes me to youtube.com slash code with tommy now once i go back now what i want to do i want to show you the domain which i took so you guys can see i already took this domain it says sorry source.ga is not available so this is the domain i'm going to use for this project source.ga for now it says source.js not available because i already took it so as you can see you can come in and claim sales.cf you can claim some domains for free but if you want to buy the.com.net you need to pay for them so that's what i we're going to use in this project so i'm just going to connect it with these my heroku site so when i connect it i'll be back so guys right now i've already connected the domain the custom domain which i have to this our project so you can see now if you go to www.source.ga it takes you to this url shorter so let's test out this shot now let's test it out and click on shorten now it gives us this url the last thing we want to do to this project is to update this so instead of it saying localhouse 8000 we wanted to say www.source.ga then slash the id so let's go and do this we're going to come back to our visual studio code and then in our index.html right here instead of saying locales 8000 let's see i think it's better if we copy these just come here and paste so we don't need to put http let's just say www.gay www.sauce slash ga then data so this data is the id so let's just save this and then what we just want to do now is to say git add so this what i'm teaching you now you are going to be able to know to update your project even after you've radiused it so we already have this hosted on the web but we want to make a change and update it so once you make that change to update it you just come back to your cli and say git add and then you're going to say git commit iphone m and let's say make it better nice and then we just say git push iroku master now this should redeploy it again with the updated changes so let's just wait for that it shouldn't take long this time because we've already deployed it so let's see let's wait for it you should do within a second so let's see okay almost done after compressing you should say done that means it's worked yes and now we should see deploy to your roku so once we see this deployed to liquid has deployed but let's just wait for the last confirmation before we go check so let's wait it should say yes done so let's go back to our browser and then reload this page so now let me shut in this url and click on shorting now if i just take this link and copy it and paste it here now you see that it takes me to that url which i shortened right here you can see that i shortened youtube dot com slash code with tommy then once i click on that it says youtube.com code with tommy so that's what this should do so let's try it out with another website let's take let's go to google and then let me just search now this url link let me copy it and then right here let me paste and click on shorten so now it gives me this link so everything is working perfectly in this tutorial session we're going to build a todo list app using jungle so without wasting any time let's get straight into it the first thing we need to do as always is to make sure that we have django installed so we should do beep install django so since i have django installed already it's going to tell me requirement already satisfied but for you you should go ahead and install django on your computer so it's going to tell me as you can see it says requirement already satisfied that is to show that i have django so now that we have django installed let's just go ahead and create our project so i'm just going to say jungle iphone admin start project and let's name it to do list now once we press enter it's going to automatically create a jungle boilerplate which is a folder which contains all the necessary files to start a jungle project so let's go into that folder which is called todo list now if i press dir i'm going to see money dot py and another folder called todo list another thing i need to do now is to create a jungle app and i'm going to call this app to do so i can just do django admin iphone admin start up and i can name it to do so once i click on enter as you can see right now we have only one file and one folder but now once i check it again you see i have two folders and one file and the second folder which was created is this to do which is our app so now that we have everything set up let's open up our project in visual studio code so this is visual studio code here all i just need to do is to press open folder and then open up my project in the directory which i created so i created my online todo list directory right here i'm just going to select the folder and it's automatically going to open on visual studio code so once it has opened now i'm just going to quit this we just need to configure some things which are our template file that means the html file which we're going to use and then get straight into the tutorial so to do this we're going to make sure we're in the root directory and then we're going to create a new folder we're going to call our folder templates with an s templates and in that templates folder i'm going to move in the html which i'm going to use for this project as i said i'm going to link the description to everything that we are doing in this video so all the links to the source code is going to be in the description below so you can check that out to get all the html css and everything we are using in this project so i have it right here i'm just gonna drag it into visual studio code and then what i need to do is to paste it and template now that i have this here i'm just gonna press cancel so what i need to do now for django to cds i'm going to come into my todo list go into settings and once i'm in settings i'm going to scroll down a little bit i'm going to look for where i see templates so i'm going to scroll down as you guys can see there is templates here so where you see this you're just going to write base there then you're going to put a slash then inside there are going to put templates this is simply telling jungle where all your template files are located so after doing that we can cancel settings now the next thing we need to do is to come into our todo app create a new file called urls that's py and in here we're just going to import path so say from django.urls import path so what i want to do now since we are done with configuring the template file and django knows where our template is we just want to root our url simply means we want to provide where our url should go to when a user comes to our website so you're going to understand that in a second so let's go to say url patterns equals to path and we're going to leave it blank blank means that's the home page and i'm going to say views dot index and then let's give it a name of index so for us to use views we have to import view so say from root import views so now that we are importing views we also need to go to views create a new function called index it must take a request and then we need to render that html page which is index.html so i'm gonna say return okay right here i'm gonna say return render request index.html now this is going to render that index page let me just cancel this so once i come into urls.py as you can see you are telling me that once the user comes to our home it should take the user to the views dot index and once the user comes to that function is just rendering the index.html page but if we run our project now it's still going to show us the default jungle template that's simply because we only configured our urls in our app we didn't configure it in our project so if you open your todo list project that's the main project folder you're going to see a url file also so for us to configure it here we need to import one thing called include and then we're going to create another path which is also blank still means home i'm just going to say include to do dot urls now once we save this everything is fine let's just go ahead and open a new terminal so right here in the new terminal we're going to run our project and test it in our browser so let's just give it a few seconds okay so now let's run our project by saying python manage dot py run server so once this runs on our server on our localhost we're gonna go open our browser and we're gonna see this index.html page so what we just need to do is to copy this localhost come into our browser and paste it right here so now we should see as you guys can see we see this beautiful jungle todo list app template so now that we have everything configured on the front end on the ui what we just need to do is to start with the back end so what we want to do now is to create a jungle model for the to do where everything is going to be saved and then once the that input something right here and clicks on add we're going to submit it to that django model and we're just going to show all the objects which are in that module and then another feature is that once user clicks on delete you should just delete that object from the model it's pretty easy so let's dive straight into it so we're going to come right here we can just close this terminal and then what we want to do is to open our modules.py file now we're going to create a new model and let's just call it to do so we're going to say models dot model and then we only want this to just take one field so i'm going to call this title i'm going to say models dot character field i'm going to give it a max length let's say max length of a thousand and this should be fine so not what this simply means is that our model is taking only one field and this field is the title so if i come into this template as you can see this says it's the gym meet george all these are the titles of the todo so that's what that field is so all these are just dummy data for now they are just static data but when we integrate our database with it they are going to be dynamic so let's come back into our visual studio code and after doing this let's just return underscore str self so we want to return that title return we're going to say self dot title so we can save this now if you know django very well you should know that once you make any slight change to your models file you need to make migrations and then migrate into your database but before you do that you must make sure that the app in which you are configuring your models or py must be registered in your settings file so if we come into our settings right here we're going to go up and look for installed apps right here in installed apps before we migrate our data to our database we need to add our app which is called to do into our installed apps so doing this alone we've added the app we're just going to save it so you must make sure that this to do correlates with the name of your app after saving we can cancel that so now we're just going to bring back our terminal so instead of cutting this serval let's just open a new terminal so what we want to do is to make migrations and migrate so say python manage the py make migrations enter and then once this make the migrations and then we're just going to say python manage the py migrate now this is going to migrate everything we have into our database as you can see is making all those migrations which is good so now that that is done let's close the terminal another thing i like to do is to create a super user and configure my django admin so i can see all the database easily so let's bring back our terminal and do that what we just need to do is to say python manage wpy create super user now this is going to prompt us to put in some details just like if we're registering on your site so we can just say admin let's just give it admin and password so bypass that now that we have this done let's go ahead and test it so let's come to our project and go to slash admin so in slash admin you should tell us to login so we're going to log in with those details so admin and also the password and just click on login so now you should automatically log using into jungle admin so right now you can see that we're logged in in this jungle admin so the only thing we can see in the database is the user and groups we also want to register our module which we just created which is the to do module so for us to do this is very very easy we're just going to come in here we can quit this now we're going to come into our admin dot py file import our todo model so we're going to say from dot models import to do and then let's just register it in our admin so say admin.site dot register and the naturally started to do it's that easy now once we save it all we just need to do is to come back and hit refresh now as you can see to do is already added in our data so once we click on it we're going to see the list of todo lists the list of todo in which we have here so let's say user comes into let me just quickly go back right here what i want to do now is that once the user input something right here and clicks on add it should automatically be saved in this database so let's go ahead and do that now for us to do that we're going to come back here let's come into our views.py which is uh which has our index function so what i want to do is to go to our index.html we're just going to scroll down into where we have what we're looking for is this form these inputs right here so we're going to scroll down where we have that so as you can see we have that right up here so it is an input what we just want to do is to make it a form so i'm just going to say form now we're going to close it let me first cut that and see where to close it so i'm going to close it right after the span tag which is add so i'm just going to close it right here and then what i want to do now is to just give this i think some indentation so let's just give it a little bit of an attention so that's nice so since this is a in a form now so guys what i put in a form is this input right here this input and then this add as our submit button so let's just go back here so what i want to do let's make this a submit button so say type equals to submit it needs to have this so says submit now we can save this we must make sure that this have a name which is this one right here so say name equals to let's say title so let's save this so what i want to do now is to just make sure that once the user clicks on add which is serving as our submit button it should send those data to our index function so let's do that so say action let's leave it blank so it sends it back here and let's say method let's give it a post method we don't need a get method and then you know diameter wise in the post method we must always add our csrf token csrf underscore token so if i save this right now click on refresh once i type in something and then click on add okay as you can see when i click on that nothing is happening so i think there's a javascript right here this one click so this javascript is colliding with it let's save it and try it again let's import something and i click on add okay so it's not serving as the button so what we just need to do instead of using okay let's put this back instead of using a span we can just change it to a button so right here also let's change this to a button nice now let's go back and then refresh as you guys can see made a little bit of change but that's okay so let's just input something and then click on add so you guys can see that it refreshed that page so what i want to do once you refresh that page you should add whatever the user input to the list of to do right here let's go ahead and do that so we're just going to come into our views.py so right here in our function we're going to use an if statement and that if statement we want to do is to get even the post request so we're just going to say if let's give it a space so say if request the method is equal to post so if is equals to post what we just want to do is to say new underscore to do should be equals to so before i continue we need to import the todo model in which we want to save so we're going to say from dot models import to do so now that we have this model we can automatically save a data into that model so i'm just gonna say to do i'm gonna open a bracket and then let's say title should be equals to request dot post which is title so guys what i did here is i assigned a new variable and what i put inside a variable was this to do model but i'm passing in some fields a field actually so this title is basically this title we have in our module so this title is this title right here so what we're giving that field is request the post title so while just getting this title from a post if we come into our index.html we can see that once user clicks on add it's posting this input which is named title into back into this page so as well in this place we're going to collect using that post collecting that title this title is whatever the user input and then saving it into this variable so once we do that and then we just come down and click on and type new to do dot save it's automatically going to save it in our database so after it's saved let's just return let's redirect the user back to this page before we can redirect we need to import redirect so let's import that so we're going to say return redirect the user back to the home page now that's very easy so now let's refresh again no let's cancel this on it so let's say code so now once i click on add you see that it refreshed and brought me back to this page but nothing show here because we're not getting the list of data for now but we come into our to do database and click on refresh you should see that we have one new data now which is code which are input so that's basically how to do it let me go back now let me come here do another thing and say go for a run so now once i click on enter come back here and refresh you see that now we have a new data called go for iran so what i want to do now is that all this data which we have that's what we want to show here we don't want all these static data also very easy we're going to come back into our visual studio code so right here in our index also what we just need to do is to get this this to do module so we're going to say to do equals to to do dot objects dot o and then once we have this we're just gonna pass to do right here into our index.html so say to do should be to do now once we save this right here in our index.html we're going to come down here and use a for loop what we need to do now we can remove all of these once we remove all of these we just need to use a for loop and see for to do okay right here in our view.py let's name this to do's so we can say for to do introduce so for to do in to do's then let's end our for loop right here so let's end four and four and then right here we're just gonna say to do dots title we can save this come back here and refresh now as you can see it gives us everything in which we have right here so go for a wrong code code go for a run boy is reversed so if i click on something and i'll say it's the gym the gym and save it you can see it's automatically added on the list but is on the bottom so we want the newer to do to be on top for us to do this we're just going to come here as if to do introduce reversed when we save this and come here you see there's a latest dice on top so let's just do something like it now you can see it is on the top let's say sleep now you can see sleep is on the top so that's basically how to um showcase a list in django ginger formats just using the reverse attribute very easy so now that we have these let me just add one more let me say one more attribute which is as you can see that this everything is in small letter so we want that even if a user writes it in let me say small letter like buy buy or close so as you can see the user started this with the b as a small letter so once it's shown here we want it to be calculator for us to do this we're just going to come here use this and say title this alone once you refresh as you can see everything nice and caps later so that's also a good attribute which might be useful in some of your projects so now that's good what we just need to do now which i think is the last thing is that once the user come here clicks on delete we want whatever is here to be deleted also very easy we're gonna come back here so we're going to create a new url and then let's name this url delete so i'm going to say path let's name it delete but this url right here is going to be a dynamic url and this is because it's taking an input so what we want to delete it to do that to do is going to have an id which is being sent to this delete url so for this url to collect that id we need to use a dynamic url so we need to pass in a variable i'm going to say slash let's give it a string and let's say pk like this so after doing this we can continue to our normal format which is views dot delete and then we can say name equals to delete so this is nice now we can come into our views and create a new function and name it delete take a request and after taking a request you should take pk and pk is the variable which we assigned here that is a string so when i'm writing an html page what we want to do is to just get a particular object from the module so first to do this i just gonna say to do should now be equals to to do dots objects dot get the one in which the id is equals to pk so now once we get that we just want to say to do the delete and then once it has deleted it then we want to return redirect direct the user back to the home page so what we're doing here now you guys are going to see how we're going to send the id into this view so let me explain in detail when you create an object in a model in django automatically each object has an id so this code which is the first object i created has an id of zero this go for a run has an id of one it's the gym as an id of two and so on like that so each of them has a unique id which is being assigned to them so that unique id once i click on delete the any kind is going to be used to know which to do the user wants to delete so as i click on delete that id is going to be sent into this url and then it's going to be saved into pk which is this variable then we're going to collect that variable name pk into this view then what we're doing right here is that we're saying to do dot object.get so this to do is our module in our database and then we're saying does get the one in which the id is equal to pk and as you know pk is the id in which we sent into this view so i'm basically getting the id which the user wants to delete and then we're storing that particular object into a variable called to do so once we already know what design was to delete we just use the attribute to do the delete it deletes it and then we return user back to the home page so now let's go back and see now let's refresh this so let's click on delete nothing happens this is because we've known it's assigned the variable let me show you how to do this i'm just gonna come here right here in our index where we see delete so this delete now has to be a link so i'm just gonna give it a link a and then let's paste delete in there now let's say hyperlink so we're gonna use the jungle format and then we're gonna say delete and then i want to say to do dot id so once we save this everything should work so let's come back here refresh okay it says um invalid right here so the reason why it's invalid is because it says delete expected empty or n4 did you forget to load this type so what we just need to do is to come here if i shift to this side you guys can see that the area is coming from right here so the problem is the way in which we pass this url so you can also pass this url by saying delete slash will say to do dot id once we save it and go back let's make sure we have everything correct now once we refresh we shouldn't be seeing this arrow now you can see that this delete is showing as a link we will take the of that later but now let's click on delete and see what happens as you guys can see that particular to do is gone let's click on the next one that is gone click on this it's gone and then let's also try to add jog you can see it's there once i click on delete it's gone so that's basically how to build a basic todo list app so now let's just take care of this blue link which is showing there first to do this we're just going to use a basic css we're going to say style equals to text decoration so say text decoration should be none so this css is going to remove all the text decoration which is assigned to a link so once we refresh you guys can see that it doesn't have that line on diet again but the color is still blue so also very easy we're just going to come here and say color okay shift back right in this style i'm going to say color should be black let's save this refresh now you can see that the color is black and once we hit on delete everything still works successfully delete again still works successfully now let's just test on our app once again so now we can add a new to do let's say it's the gym to enter oh we've added that before so let's just delete that and let's just say learn flask so click on enter as you can see it brings up this length flask and it brings it up the latest side of the table of the list i mean and we can also delete and one feature which we added if we put in small letter it's automatically going to show it in calculator so i hope you guys learned something from this tutorial section if you did please don't forget to smash the like button and please subscribe now that we've successfully completed our app what we just need to do is to host our app on iroku it's very easy to do this we just need to make sure we have some python libraries installed and these python libraries are gunikon and jango hiroku so let's go ahead and install them beep install unicorn and jungle heroku so i already have this installed it's going to tell me requirement already satisfied but i just needed to show you how to install those libraries so you should go ahead and install on your computer so now that we have that installed what we need to do is to come into our roots directory let's close all these now root directory we're going to create a new file name it runtime.txt in that runtime.txt what we need right there is our python version so the python version which we use for this project is what we're looking for to get that we'll come to our terminal and type python version python two iphones with version so as you can see i am using python 3.7.4 so i'm going to say python then i'm going to say iphone 3.7.4 so that's the way you should write your version let's just save it and then quit this file the next thing we need to do now is to create a new file let's make sure we close this and these files must be in the root directory the root directory means the directory which contain the money money.py file so that's the root directory of any django project so now in the root directory we're going to create a new file and name it proc file with no extension so proc file like this and what you go in here is a piece of code now this is how the code is so instead of these these are like a line of clothes boilerplates something like that so instead of contactless is the name of your app so it should be um todo list so that's how it should be web unicorn todo list.wsgi column application two items log one iphone file space and iphone so that's what should go into this file then we're gonna save this file so after having this done what we just need to do is to come into our terminal and press beep freeze requirement requirements.txt now when we press enter a new file here is created named requirement.txt what is in that file is all the pattern libraries in which we used in this project so after doing that now we're going to come into our settings.py file and then we're going to add some things so up here we have to import django heroku django iroku and the second thing we need to import is dj database url import dj underscore database url so the next thing we need to do is go into that our database and then change it from sqlite we're going to change it to the database in which eroku is going to recognize so i'm going to change this defaults not going to be an array or at least it's going to be dj database url dot config now this is how it should be i'm just gonna press save the next thing i need to do right now is to go down into my project right here i'm gonna say jungle heroku then dot settings boom bracket locales then open bracket close bracket now i'm going to save this file again the last thing we're doing in this file is to go to allow hosts and just press these to allow all hosts like this so once we save it we're done with this file now after doing all this thing we can now start with our command line that is with our iroku so we need to say iroku login so what's going to happen now is that it's going to prompt us to click on something and then it's going to open our default browser and then in there we're going to log into heroku automatically so when i click on login if you tell me logged in you can close this page and return to your cli so once i close this page and go back you can see now it automatically logs me in so what i just need to do now is to say heroku create and let me say to do list so once i create this todo list it's automatically going to create this todo list app in my roku account so once it creates that we're just going to start with the git so as you can see it's creating okay it says to the list already created my mind wasn't really there so let me just say to do list let me just give you random words like seven ways nine so let's see i don't think that should be taken okay it's creating yeah it's created so all we need to do nice is just say git status okay then we're gonna say git init so now he's going to initialize the repository and let's say git status again now we should give us something right and then we're going to say git remotes iphone v nice i want to say nice git remote add heroku now i want to add we're going to scroll up right here when we created the app you see it gave us two url i'm going to take the second url which has dot git at the end scroll down and paste that so it's going to be git remote add iroku then that url so i'm going to click on enter so now i'm just gonna say git remote v again so that's nice and i'm gonna say git status okay nice so now what i want to do is to create our database on our cloud so i'm going to say iroku addons i'm going to say column create i'm going to say iroku i think postgres ql then column i'm saying obi dev so that's what i need to see so i think this should be an iphone so now once i click on enter it should run that command line so let's wait for a response okay so it's creating see i couldn't find a service named of the dev okay there's a typographical error i put two o's instead of 2b so let's wait for that and let's see should create that for us in some seconds okay nice so it says database has been created and it's available the database is empty okay nice so the database has been successfully created so now that we have our database created what we just need to do is to commit so we're just going to say git add and then after adding we say git commit i think m then i'm gonna say the first time and then let's close that now when we click on enter we're gonna commit that so that's nice then as for the last step we're just gonna say git push iroku master okay um there was typographically right there so i don't think it will work so let's just wait for that to give us an error then we're going to say git push iroku master okay so remove these and it should be git so git push iroku master now this is going to deploy everything which you've been doing on the url in which it created area let me show you the url of the app so when we are creating we will come here when we created these uh which is to do list789 you see it gave us this url right here so once it deploys it it's going to deploy it on this url so once it's done and click on this url what we're going to see is this app in which we've been building since so let's scroll down and see how far the deployment is going okay it gave us an error if we come back here so the reason for that error it says now this is very good because you know also know how to debug so it says request runtime is not available for this stack heroku 20. okay that's nice so what we just need to do right here is to come into runtime.txt so the reason why we're getting that error is because of our runtime so uh python version is too low for heroku 20. so if i scroll up here you're going to see that it says heroku 20 stack so it's going to update to one of the latest versions we'll say 3.9.1 and then what we just need to do is to commit those changes so i'm just going to say git add and then git commit and then we're just going to say git push iroku master now this shouldn't give us any errors again so let's just give it a few seconds installing python nice so everything is working so because iroquois has been upgraded to europe 20 the stack is now 20 that's why we're getting that error so notice that if you are using django and you like deploying on your roku you need to be using python 3.9 version to be specific so let's just give it a few seconds to deploy okay installing collected packages nice okay so just gonna wait so it should be done in a few seconds because all the main stuffs are done already so you should just deploy it to our url yes done yes so it's deployed to eroku as you can see this link is deployed to your roku so let's just wait for the last confirmation and then it's going to opt out of that command so let's wait for it okay nice so now let's click on this url so let's open the link once we open the link we should just see our app it says um programming error so anytime in which you are dealing with database and then you just deployed your app you need to also make migrations just the way you make migration once you change your model.p wifi i'm just going to come in here say heroku run python manage the py make migrations and then after making migrations we're just gonna say by heroku run python menu.py migrate so that's going to do and solve all the problems so let's give it a second to run that okay running python monitor py make migrations so that should run that within no time running still running okay no change is detected so let's just migrate so now once this migrates successfully we're just gonna go refresh our link and then we should see our todo list app so let's wait and see okay see my creating let's see up run and then go yes so that's nice let's just wait nice so now once we come here and then refresh we shouldn't see any error so as you guys can see it says jungle todo list up now we can just add and say it's the gym and once you press enter you see it's added already and we can say code added you can say uh take a run and it should be added so as you guys can see everything is working perfectly let me just try to delete one so let's click on delete and you guys can see that it's gone so everything is working perfectly it's hosted online the database is connected and i walked you guys through all these steps so thank you for watching this session of the video and you can go to this url to check it out live is live now and i'm not taking it down thank you for watching once again in this part of the tutorial we're going to be building an english dictionary using django so user is going to be able to search for a word and get the meaning of that word the synonyms and the antonyms of that word also so let's start by installing django we say peep install jungle and then you should tell me requirements already satisfied jungle admin start up stat project and let's name it english dictionary so let's move into english dictionary and then let's start an app a jungle app and let's name the dictionary so now when i press dir i should see money dot py english dictionary and then dictionary so let me come into visual studio code and then open this project i just created i'm going to click on open folder and then right here all i just need to do to select this folder and then it should open in my editor so now that i have these let me just start configuring the first thing i need to do is to create a new folder in here and name it templates so this template folder is going to contain all our html files so let me just move in the html file for this project let me move it into visual studio code so now that we have that in there what i just need to do is to go to english dictionary then settings.py and i'm just going to go down a little bit and right here i'm going to say based there based on the score there then slash templates now this is just to tell jungle where our html files are located after doing this i just need to do the url mapping so i'm going to come into dictionary i'm going to create a new file urls.py in there i'm going to say from django dot urls import path and after i put in these i'll say url buttons equals to pass and now save views dot index and let me give you the name of index so let me first import views before i'm able to use it so i say from roots import views so i'm going to go into views folder now and create a new function named index so i'm going to say def index it's going to take a request and then i'm gonna render this html page in this template folder so i'll say return render request index.html okay let's make sure this is correct index.html so before uh index.html can show us our own page we also need to come into the project folder and open urls.py right here we need to import include after importing include then we're going to say path then include i'm gonna say dictionary dot urls then i'm gonna save it now i can quit this let me just open a new terminal and then what i need to do now is just to run my project now when i run this project my html that i rendered is going to show as the home page so let me open up my browser and then i'm going to open up my localhost in my browser so let me open up localhost so now it should show me my project as you can see it shows me this simple html page with just a form so this is what we need to build the dictionary very simple so you are just going to type in a watch once you click on search it's going to say the meaning and synonyms of the word right here so let's simply do that this is very very easy what we just need to do now is to first of all create a new view and let's name it watch let's say requests and let's say return render request and then we're going to create another html page let's name it word.html we've now created it now but we're going to create it so let's save it for now and let's also create a new view name it word let's save let's go back to our views this should be returned then let's save this so in our urls since it's a list you should have a comma so after doing that we're just going to come into templates and let's first create a new file let's name it word.html now we're going to leave this file blank for now let's close this terminal now in this index what we want to do is to make this a form so i'm going to scroll down right here let me first say h2 search for a word so let's see the changes okay it shows but not pretty cool so let's leave it so what i want to do now is to make sure that this is a form so i'm going to say form and then we're going to close the form after this button like this so what i want to do after closing the form after the button we're just going to say action and this action is going to the word url like this now we must make sure that these inputs have a name which it doesn't know so now i'm just going to say name should be equals to search so this is the search term in which it is accessed then it's going to be submitted into this word so i'm just going to come right here in the views i'm going to get that word we're going to say search equals to request dot get that get and we're going to say word i think it's search so what this is must be the name which you are assigning to the input that's why i intentionally put a name field here because that we're going to use to get whatever the user searched for so now that we have this how are we going to get the name the meaning synonyms and antonym so i'm going to use a python library called pi dictionary so let me bring up my time now here real quick let me open a new terminal so first to install this module we need to type peep install by dictionary so i have it installed it should tell me requirement already satisfied but for you you should go ahead and install it as you can see stage requirement already satisfied so let me go back to my normal time now and quit so what i just need to do right here is to import this library so i'm just going to save from pi dictionary import by dictionary now that i have this imported i'm just gonna say dictionary should be equal to by dictionary with brackets so now that we have the search which is also the word we're just going to get the meaning and storage in a variable name meaning so same meaning equals to dictionary dot meaning of this search so that's the meaning and then we're also going to do the same thing for synonyms it will be equal to dictionary just synonym of the search i'm going to do a similar thing for the answer names so anthony's will be equals to dictionary that antonyms of the search so this is how to simply do it and after doing this what we just need to do is to put it in a context so in here i'm just gonna say the meaning so the meaning should be equals to the meaning because the antonym the and we are going to pass all this into our html so meaning should be meaning comma they just copied i'll say synonyms should be synonyms and antonyms also should be antonyms so we can just pass this right here and say context and let's save so now once we save this and we come into our word.html what i want us to do is just copy all these paste it right here and then what i want to do now is that under here we want to write the meaning and i don't need the synonyms of the word so that would be under the button under the form so let's say meaning let's give it like an h3 let's say meaning now should be equals to meaning so now let's just test meaning before we continue so let's just save this and then what i want to do is to come here into our browser and refresh so let's search for it and then let's click on search and once we click on search as you guys can see it takes us to another page what search equals it says meaning equals all of these so what i want to do we just want to get only the first meaning we don't need to rest and we need to pass this css right here so i'm going to come into a visual studio code and then right here in the word instead of putting it right here i'm just going to put it outside to wrap and then in views dot py meaning will be meaning a noun like this and the first one zero so we can test this again so once we go to the home page it should take us yeah so let's search for it again and then once we click on search she take us to the words page and now we say key error at noun okay so the what is simply saying is that in the dictionary that this is bringing back there is no key named noun so we just need to patch that so that is because it is not unknown so we can basically do that in plenty other ways but for now let's just search for set and then let's see as you guys can see meaning a group of things of the same kind that belong together and are you so used so that's how to get the meaning of the word so we also want to get the synonyms and antennas so i'm just going to use a for loop right here so i'm going to say exactly the same thing and say 4. 4 let's come into our views and get what we passed signal name in synonyms so you just want to pass in the synonym and then what we just want to do is to end for and i'm also going to do the same thing for the answer names let's delete these copy this and paste so let's try for the answer names also so in the word say to be for antonym in antonyms then this should be antonym then n4 so let's go back and see so if you just refresh this page we should see the meaning with the antonym and synonyms okay as you guys can see if i scroll okay so it's basically just listing everything out so we just need to pass that and let it just put it in a word so first of all this is not meaning what we need to do now is this bring this in here i want to bring it into the hdre tag instead of outside so i'm gonna do like these and just end four same thing we're gonna do here into the h3 tag i'm also going to end for in the h3 tag so that's what we want to do so right here also we want to say synonyms and then right here i want to say antonyms before the for loop so let's just give it caps later and we can save once you come back here and refresh this page now we should see it aligned horizontally as you guys can see meaning a group of things of the same kind that belong together and are so used synonyms best no good put inlay and a lot of synonyms so we just want to use comma to separate each of them so i'm just going to put comma right here and also comma right here so just press that and once we refresh we should see comma so that everything will be refined so as you can see meaning a group of things of the same kind that belong to together and are so used so synonyms it gives us all the synonyms antonyms also give us all the antonyms so let's search for english the session for the meaning and then we should see the meaning synonyms as you can see it says meaning an indo european language and also give us synonyms and then the antonyms so that's how to build an english dictionary using jungle i hope you enjoyed it now that we finished building this project what we need to do is to deploy it online so for us to do this we need to have two live item libraries installed and these libraries are unicorn and django heroku so to install them you save python install pip install gunikon and django i think heroku so i already have them installed you should tell me requirements already satisfied but for you you should go ahead and install that so now the next thing we need to do is to go into our roots directory and create a new file named runtime.txt so in this runtime.txt what is going to be in there is the python version in which you are using so mine is python 3.9.1 so i'm just going to save this and then what i need to do now is to create another file named prog file and then what is going to go in here is a file is this code so it changes project to the name of your project which mine is english dictionary so you can save this file now and close it so after doing this the next thing you need to do is to come into your terminal and say peep freeze requirements dot txt now you'll notice that you're going to create a new file here that's because it's storing all the libraries in which we used in this project so now let's come into settings.py we're going to go to database okay since we are not using database in this video we don't need to configure anything for database but what we just need to go is come up import jungle iroku and then scroll down allow us let's allow all us and then we're going to scroll down to the bottom i say jungle heroku dot settings locus and open bracket close bracket after doing this i'm just going to come into my command line and say heroku login so now it's going to prompt me to open my default browser and then log into iroku from there so it should give me an option like press any key to open your browser or press q to quit so if you press any key it's going to open your browser if you press q it's going to quit like you can see so if i press h it's going to open up my default browser like this and then log in now i'm logged in if i go back in there you can see that i'm now logged in so what i just need to do now is to create an uroku app so i'll say heroku create and let me name it english dictionary white so right now it should create that app and then give me two urls one is the url to the git repository and the other is url to my app so now that we have this we're just gonna say git status okay and we're going to initialize it by saying git init and then git status again and now i'm just going to say git remote v and then adjusting say git remote add heroku and then we're going to add that giz repository right here so i'm just going to copy it come down and paste it nice so i'm going to say git remove v again nice and then we're going to take git status so what i just need to do now is to just say git add i'm going to say git commit let me see the first time enter and then i'm just going to say git push heroku master so now it's going to deploy it to iroku so i'm just going to give it a couple of seconds to deploy our project onto your roku it doesn't take too long depending on how large a project is so let's see okay it's working so everything is going on fine right now i'm just gonna give it a couple of seconds install yes installing collected packages okay compressing after compressing it should say done yes so it has said done that means it has been deployed so i'm just going to wait for the last confirmation and then it's going to opt out of this command so let's just wait for that confirmation and then we're going to open this up so don't so when i click on control and click it's going to open up in my browser so as you guys can see it opened it up so let's just search for english so when we search for english you guys can see brought out the mini synonyms and antonyms so let's search for another thing like spots so as you guys can see what are the meaning synonyms and antonyms so that's how to build a busy english dictionary using jungle so we've hosted this you can go to this url now to view it if you enjoy this part of the video don't forget to like it and smash the like button and if you have any question please drop it in the comments so guys that's gonna be the end of this video thank you so much for watching to this part if you like this video once again please don't forget to smash the like button and please subscribe and if you like more videos like this i'm building more projects on web development with python jungle and stuff like that you can also check out my channel at code with tomi having that said bye for now
