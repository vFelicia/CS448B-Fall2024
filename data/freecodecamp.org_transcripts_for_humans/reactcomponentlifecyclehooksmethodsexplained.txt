With timestamps:

00:01 - hi this is nick karnick today we're
00:04 - going to talk about react component life
00:06 - cycle
00:07 - react lets us define components as
00:10 - classes or as functions
00:12 - a component class can be defined by
00:15 - extending react.component
00:18 - the only method that is required in a
00:20 - component subclass is render
00:23 - as you can see in this block of code
00:25 - components have several lifecycle
00:27 - methods that you can override to run
00:30 - your code at a particular time in the
00:32 - process
00:33 - these methods are categorized into four
00:36 - groups mounting
00:38 - updating error boundaries and unmounting
00:42 - in this example
00:43 - we will build a counter component and
00:45 - utilize all the lifecycle methods
00:48 - let's get started with
00:50 - creating a constructor
00:53 - a constructor takes
00:55 - props as its object and we need to call
00:58 - the base class or the parent class
01:00 - method via super and pass in props what
01:03 - this does is it sets this dot props to
01:06 - props so it's available throughout our
01:08 - class
01:10 - constructor is also the only place where
01:12 - we can set state
01:14 - so let's go ahead and set
01:16 - a counter
01:18 - and let's use that in the render method
01:22 - all right
01:23 - i also want to have the
01:25 - console open here
01:27 - and while we're looking at the console i
01:29 - want to make sure i'm
01:30 - printing messages in the
01:33 - various functions as well so you can see
01:35 - the
01:38 - we can see the progression so when an
01:40 - object is created
01:43 - the constructor is called followed by
01:45 - render
01:47 - let's give this some functionality to
01:49 - increment and decrement the counters
01:52 - so i'm going to create a couple of
01:53 - methods here
01:55 - increment which will set state
01:58 - on the counter
02:00 - and increment it using the previous
02:02 - value and add one to it
02:05 - likewise decrement
02:08 - will decrement a value
02:10 - on that right here okay
02:13 - and let's create a couple of buttons to
02:16 - allow us to increment and decrement this
02:22 - we're going to assign
02:25 - these methods to one of the
02:27 - events
02:28 - for onclick
02:31 - and let's replicate that for decrement
02:35 - oops
02:38 - there you go now when we click this
02:40 - we're going to see
02:41 - the counter reflect the change
02:44 - and notice that all that's done right
02:45 - now is calling the render method
02:47 - so let's introduce a few life cycle
02:49 - methods
02:50 - the first one is
02:52 - component did mount
02:56 - this is called right after render
03:05 - now when i save this we'll see things we
03:07 - render and what i want to do is
03:10 - also add markers at the end of some of
03:13 - these render life cycles
03:15 - so we're just going to add
03:17 - a dashed line so we know that this is a
03:19 - single render call
03:21 - and if we were to do increment
03:23 - there is another render call but it does
03:25 - not call component in mount because that
03:27 - is only triggered when the component is
03:30 - constructed
03:31 - and essentially gets added into the dom
03:34 - however there's another method called
03:36 - component
03:38 - did update
03:40 - and this method actually takes a few
03:43 - parameters
03:45 - there's a reference to previous props
03:47 - the previous state
03:50 - and snapshot
03:54 - let's trigger
03:56 - component did update and we'll
03:59 - add a log statement here
04:07 - all right so notice that
04:09 - component.update is not called here once
04:11 - we click increment
04:13 - we'll see component did update i'm going
04:15 - to add a line marker there as well so we
04:17 - know that's another render so if i click
04:19 - this
04:21 - you see the different
04:24 - sort of life cycles that are triggered
04:29 - all right
04:30 - so
04:31 - let's go ahead and add the ability to
04:33 - mount and unmount this counter
04:35 - we need to do that in app.js so we're
04:38 - going to create a constructor here
04:40 - with props that are passed to the parent
04:44 - and then set state
04:47 - in the constructor
04:49 - to
04:50 - with an attribute called mount which
04:52 - we'll set to true
04:54 - and
04:55 - a couple of methods
04:58 - to mount and
05:00 - unmount the counter
05:03 - we'll set state here
05:05 - to set mount to true
05:07 - and likewise uh this will be on mount
05:10 - counter
05:11 - where mount will be false
05:13 - let's go ahead and create a couple of
05:15 - button elements
05:17 - mount counter
05:20 - and
05:21 - map it's on click to this dot mount
05:25 - counter
05:26 - and replicate that for unmount counter
05:34 - okay
05:35 - so another thing i want to do is set
05:37 - disabled to true or false depending on
05:39 - the value of
05:40 - mount
05:53 - all right so notice that the buttons
05:55 - just grayed out now
05:57 - if i click on mount
06:00 - and mount
06:01 - you'll see that
06:05 - some lifecycle methods were triggered
06:09 - all right
06:12 - but one of the things we forgot here is
06:14 - to
06:15 - take advantage of that state variable so
06:17 - i'm going to
06:19 - use that and conditionally render
06:21 - counter
06:23 - and if it's not set to mount we'll
06:25 - remove it from the dom
06:27 - all right so there you go
06:29 - so now this should actually
06:31 - remove
06:33 - the counter
06:35 - let's add
06:36 - another life cycle method encounter this
06:39 - time it's called component
06:41 - will unmount
06:44 - as the name suggests this method is
06:45 - called
06:46 - when the components being taken out of
06:48 - the dom
06:53 - let's add another marker there
06:55 - and there you go so now component mount
06:58 - if i click on mount counter you'll see
07:00 - component will mount was triggered
07:02 - and there you go uh on mount the
07:04 - constructor is triggered because the
07:06 - counters
07:07 - com the counter component is recreated
07:09 - these are the most commonly used
07:11 - lifecycle methods
07:13 - let's shift focus into some of the
07:15 - infrequently used methods we have
07:18 - another method called
07:20 - should component update which takes
07:23 - next props
07:25 - and next state as its parameter
07:28 - parameters sorry
07:31 - generally this returns true by default
07:33 - the purpose of this method is to let
07:36 - react know if render should be triggered
07:38 - or not normally react does a very good
07:41 - job at figuring that out but sometimes
07:43 - let's say your state or props gets
07:45 - updated and you don't really need render
07:47 - to be triggered because you're not
07:49 - changing anything on the ui and
07:50 - especially if your render method is a
07:52 - bit expensive to compute then you can
07:55 - definitely gain some performance here
07:57 - but you need to be careful here because
08:00 - you could fall into a trap
08:02 - where you end up
08:04 - losing performance
08:05 - if this method is used incorrectly
08:08 - let's add a prop in app.js that we're
08:11 - going to pass into counter which we
08:14 - would want to ignore okay so let's call
08:16 - it ignore
08:18 - prop
08:20 - and whatever the value here is let's say
08:21 - it's zero initially
08:23 - i'm going to create another method here
08:26 - to
08:27 - pass and ignore prop
08:29 - by generating a value and assigning it
08:31 - to state
08:34 - so ignore prop is
08:37 - uh
08:38 - just add the random we don't care what
08:40 - the value is
08:41 - what we want to do next is pass that
08:43 - prop in to
08:46 - the uh counter
08:48 - so we'll pass an ignore prop equals this
08:51 - dot state dot
08:52 - ignore prop okay
08:55 - and
08:56 - so that should
08:57 - [Music]
08:59 - pass this through
09:02 - but what we also need is a button to
09:05 - trigger
09:07 - that change
09:08 - so let's call this
09:11 - ignore prop
09:14 - and then
09:15 - on click we will call this dot ignore
09:18 - prop
09:20 - okay there you go so now when i click
09:21 - ignore prop
09:23 - it's going to call render and component
09:26 - update
09:27 - mainly because something changed on the
09:30 - parent and that was passed down to the
09:33 - component
09:34 - but in this case let's say we don't care
09:36 - about ignore prop because we're not
09:37 - doing anything with it we're not
09:39 - rendering it to the ui
09:40 - so we simply want to ignore it
09:43 - that's where this method comes into the
09:44 - picture
09:45 - so we'll create a condition here
09:47 - to check
09:48 - for when it's appropriate to tell react
09:51 - not to call render
09:53 - we're going to store this in the state
09:55 - and call it
09:57 - ignore prop if
09:59 - uh there is an ignore props value
10:04 - and
10:05 - if the one in our state
10:07 - is not equal to
10:09 - that value
10:12 - we want to
10:16 - return false
10:19 - basically any time ignore prop comes in
10:21 - and if the value doesn't match what's in
10:23 - our state we want to return
10:26 - false
10:27 - so it's it's still being
10:31 - called here
10:32 - that's mainly because
10:34 - we should check this dot props
10:37 - so we're looking at whatever is in our
10:40 - current props and if next props is
10:42 - different then we know ignore prop was
10:44 - changed and in that case we don't want
10:46 - it to render anything
10:49 - let's add a
10:53 - console log here as well
10:57 - all right and click ignore prop call
10:59 - should component update is called
11:02 - but
11:15 - let's look at this so it's going to
11:16 - render for some reason we're checking if
11:18 - the value exists and if that value
11:22 - is not equal to what's in our props
11:24 - if that's the case we do not render
11:28 - perhaps we
11:30 - are looking at something incorrect here
11:34 - let's see
11:35 - ignore prop has been passed in there
11:38 - oh
11:39 - this should be ignore prop
11:43 - that's the issue
11:46 - all right there you go
11:48 - the next thing to look into is a method
11:52 - called get derived state from props
11:55 - this is a static method and it's called
11:58 - before
12:00 - every other method
12:06 - and this
12:07 - passes in props and state
12:10 - and the purpose of this method
12:12 - is to
12:14 - give you a chance to copy
12:16 - any values from props
12:18 - that you may be interested in
12:19 - transferring over to state
12:22 - and in our case we could add a
12:27 - another uh
12:28 - method here that allows us to pass in a
12:30 - random seed value
12:33 - so let's say
12:34 - we start off with
12:35 - uh our seed being
12:38 - some arbitrary value here
12:40 - and what we can do is
12:43 - add a
12:44 - seed generator
12:46 - method which is simply going to set
12:49 - state
12:50 - to
12:52 - set the value in seed
12:54 - to an integer
12:56 - so we're going to parse end
12:58 - and do math
12:59 - random
13:01 - times 100 to scale it up
13:04 - and that
13:05 - creates a method for us and we also want
13:07 - to pass in
13:09 - seed
13:11 - here from this dot state dot seed
13:14 - and also create another button here
13:17 - then maps to c generator
13:20 - so we can call it generate seed
13:24 - all right and i think the error we were
13:26 - getting earlier here is that we don't
13:28 - have a return statement
13:30 - so anything you return from here gets
13:32 - assigned to the state so if you don't
13:34 - want to change state you simply return
13:36 - null
13:37 - all right so now when i click generate
13:39 - seed
13:41 - let me lower this
13:44 - nothing seems to happen i mean we see
13:46 - some
13:47 - life cycle methods getting triggered
13:48 - here
13:49 - but it's not really taking advantage of
13:51 - the seed being passed in so let's take
13:54 - care of that in this method here
13:57 - so we want to check
14:00 - if
14:01 - a seed exists
14:03 - on the props
14:05 - and if the seed that's in our state
14:08 - is not equal to that seed that's passed
14:10 - in
14:12 - if that's the case we will return a seed
14:16 - value that's props that's c
14:19 - and it set the counter to props.c as
14:21 - well and let's just uh default it to
14:24 - zero here
14:26 - in this state notice that counter starts
14:28 - at 40 because we had set the initial
14:31 - seed value to 40 here
14:33 - so i can click increment and decrement
14:36 - and this continues to work but i could
14:38 - also click generate seed
14:40 - and that should change the value of
14:42 - counter here
14:46 - all right but
14:48 - the point here was to demonstrate this
14:50 - lifecycle method that allows us to copy
14:53 - props into state
14:55 - notice that since this is a static
14:57 - method we don't have access to
15:00 - the instance of the object
15:02 - there's one more or a couple more
15:03 - methods we need to talk about so the
15:05 - next one is called get snapshot before
15:08 - update
15:10 - and that sort of goes right before
15:12 - render
15:19 - and it takes in
15:22 - previous props
15:23 - in previous state
15:27 - and then we return a value out of this
15:29 - this method is to allow us to capture
15:32 - some properties that are not stored in
15:34 - the state before we re-render that
15:36 - component
15:37 - so let's say you had a list view
15:40 - or or a text area where the cursor was
15:43 - in a certain
15:45 - row and column
15:46 - or if the list would scroll to a certain
15:48 - location
15:49 - then you would be able to
15:51 - capture details about that
15:53 - and then handle that later on
15:56 - so whatever is returned here
15:58 - gets passed into component.update as
16:02 - a third parameter called snapshot and
16:04 - that's where we could tell the dom to
16:06 - sort of set the cursor and the carrot in
16:08 - a certain place and things like that
16:11 - so that that's that method
16:14 - and finally there is a method called
16:16 - component did catch which is part of the
16:20 - error boundaries
16:23 - group
16:25 - and this takes two parameters called
16:28 - error and info
16:30 - essentially it gives us a chance to
16:37 - gracefully handle
16:41 - you know any errors that we run into
16:49 - all right
16:51 - so let's
16:52 - go ahead and
16:53 - call ignore prop
16:55 - and also when
16:57 - should component update
16:59 - do not render is called we want to add
17:01 - one of the line markers so we know
17:02 - that's the end of the
17:05 - update
17:07 - and let's call generate seed
17:09 - and then we can still increment and
17:11 - decrement
17:14 - unmount and remount it
17:17 - and
17:19 - now let's generate a component that's
17:21 - going to create
17:23 - a deliberate error
17:25 - so let's call this error component
17:29 - and
17:32 - we're just going to return a div with
17:35 - it accessing some non-existent
17:38 - value
17:39 - and this is going to cause it to crash
17:41 - so let's say we add it into counter
17:43 - right now so i'm going to place that
17:45 - error component here when i save
17:48 - you'll see that there were errors that
17:50 - were
17:51 - triggered here now if i did not have
17:53 - component that catch
17:56 - when i save
17:57 - i lose everything that's rendered in the
17:59 - browser
18:00 - and so i could have a downstream
18:02 - component that generates an error and
18:05 - it's not handled properly and it causes
18:07 - the entire app to go into sort of this
18:09 - blank screen
18:11 - so that's where component did catch
18:13 - comes into the picture
18:14 - it allows us to gracefully handle some
18:16 - of these so what i'm going to do is
18:19 - once we know there's an error we're
18:20 - going to set state
18:22 - and
18:24 - set the error and info
18:26 - properties
18:28 - on it
18:29 - and let's handle those here as well
18:32 - and render we're going to
18:34 - check for
18:35 - [Music]
18:36 - an error
18:38 - being present
18:39 - in that case we're going to return a div
18:42 - that says
18:43 - we have encountered
18:45 - an error
18:48 - let's
18:50 - try to print this out as well
18:54 - the error has
18:58 - some additional attributes that we need
18:59 - to print
19:00 - so what we can do is just print that out
19:02 - here to see what error contains and then
19:04 - we can
19:06 - revisit this there you go
19:10 - it is re-rendering but the error is is
19:12 - right here
19:13 - so let's go ahead and look for
19:16 - i believe it's a message
19:20 - there you go
19:21 - let's take this out and
19:25 - all right so we were able to
19:28 - handle our error gracefully without
19:30 - everything else crashing
19:32 - and that's sort of the purpose of this
19:33 - method here
19:36 - let's
19:37 - let's trigger this conditionally so what
19:40 - i'm going to do is add an attribute
19:43 - to state
19:44 - called
19:46 - show
19:47 - error component
19:49 - and we'll set it to false to begin with
19:52 - and we're going to pass that here
19:54 - show error
19:55 - component equals this dot state dot show
19:59 - error
20:00 - component
20:02 - and everything still loads but
20:04 - internally here i want to make sure that
20:07 - we're looking at
20:09 - props
20:10 - to see if show error component is true
20:13 - in that case we can generate this just
20:15 - actually
20:18 - made up entirely just so that we don't
20:19 - run into this and we can get the counter
20:21 - again
20:22 - as we
20:23 - uh toggle this so we'll have to add
20:25 - another method here let's call this
20:27 - toggle
20:28 - error
20:30 - and we're going to set
20:32 - the value there
20:35 - for show error
20:38 - component
20:40 - and we're gonna
20:42 - set it to negate it to whatever it's set
20:45 - to
20:47 - and
20:48 - that should actually
20:51 - uh be called via button here
20:53 - so let's add that in toggle error
20:56 - and we'll just call this toggle error
21:01 - and so i think yeah there you go now as
21:03 - we click this
21:05 - it's not reversing so let's take a look
21:07 - at that um
21:10 - i see what's happening
21:11 - so this this part works okay i think the
21:14 - issue is with state.error because we are
21:17 - not clearing that once we set it here
21:20 - the component ends up rendering
21:22 - the error over and over again so all we
21:24 - have to do is
21:26 - look at if props dot show
21:28 - error component is true
21:30 - and if we have an error
21:35 - in that case there you go now we should
21:37 - be able to toggle this
21:38 - let me do a quick recap
21:40 - we have the constructor which is called
21:43 - when a component is created
21:46 - followed by get derived state from props
21:49 - which allows us to copy
21:51 - props into state this is not used
21:53 - frequently but there are cases
21:56 - such as this one here where we want to
21:57 - pass in a seed for the counter and have
22:00 - that be controlled internally through
22:02 - the state that's when this method is
22:03 - useful we have component dead mount
22:06 - which is
22:07 - also an interesting place to
22:10 - do things like network requests or
22:12 - handle like the initial loading of the
22:14 - component for instance if we had
22:17 - a value that said initializing
22:20 - to true by default and based off of this
22:23 - value if we were setting
22:25 - a specific if we were showing a specific
22:28 - message
22:29 - we could sort of simulate um
22:33 - oops
22:34 - let's say we were
22:36 - simply returning initializing
22:40 - right so
22:41 - in this case we're going to see that
22:42 - method there i think find the div it's
22:45 - going to
22:46 - show it on the next line there
22:49 - and
22:50 - essentially
22:52 - you know let's say this is when the
22:53 - component loads initially it's in the
22:55 - initializing state we need to fetch some
22:57 - data and that kind of stuff would happen
22:59 - right here
23:00 - let's just simulate
23:02 - this dot
23:04 - set timeout
23:07 - and call a method there
23:09 - in about let's say uh
23:12 - 500 milliseconds so you'll see it flash
23:14 - briefly and we're going to set the state
23:18 - on
23:20 - uh initializing
23:23 - to false
23:24 - sorry i meant to do just set timeout
23:26 - there
23:27 - initially i was thinking about set state
23:30 - so there you go if i were to refresh
23:32 - this notice you see the initializing
23:35 - followed by the counter showing up so
23:37 - that's sort of the purpose of this
23:38 - method
23:39 - where you could make a network request
23:40 - and when you have your data again you
23:42 - can change the state on your component
23:44 - and tell it to you know maybe perhaps
23:46 - show a spinner while it's loading
23:48 - content
23:49 - anyway while we were doing the recap so
23:51 - after component did mount
23:53 - should component update gets called this
23:55 - is where we could hint to react
23:58 - uh
23:59 - do not uh call render all over again i
24:01 - believe in the future that's how the
24:03 - method is going to work it's simply
24:04 - going to be a hint and react will decide
24:06 - if it wants to
24:08 - actually honor that or not
24:11 - and
24:12 - this gets snapshot before update which
24:14 - allows us to store
24:16 - things like positions of your
24:19 - list views or or you know text areas or
24:21 - whatever uh dom components that you can
24:24 - then
24:25 - pass on to component data update and
24:28 - reassign those after the render
24:30 - render of course takes care of rendering
24:32 - content
24:34 - component data update gets triggered
24:35 - right after
24:37 - render
24:38 - now this is also similar to componented
24:40 - mount if you wanted to make specific
24:43 - network requests
24:44 - based on certain attributes or props or
24:47 - state values
24:49 - you could do the same here
24:51 - you can actually call
24:52 - set state in component did mount and it
24:57 - triggers a re-render but it doesn't
25:00 - actually
25:01 - call the render method twice
25:03 - it only does it once because of the
25:05 - location where it's called under
25:07 - and finally this component will unmount
25:10 - that gets triggered when the components
25:12 - removed from the dom and component did
25:14 - catch which helps us
25:17 - sort of gracefully handle errors and
25:19 - downstream components lifecycle methods
25:21 - or or render method and that brings us
25:24 - to the end of this video hope it was
25:26 - useful and if you'd like to stay up to
25:28 - date with future videos consider
25:30 - subscribing below thank you

Cleaned transcript:

hi this is nick karnick today we're going to talk about react component life cycle react lets us define components as classes or as functions a component class can be defined by extending react.component the only method that is required in a component subclass is render as you can see in this block of code components have several lifecycle methods that you can override to run your code at a particular time in the process these methods are categorized into four groups mounting updating error boundaries and unmounting in this example we will build a counter component and utilize all the lifecycle methods let's get started with creating a constructor a constructor takes props as its object and we need to call the base class or the parent class method via super and pass in props what this does is it sets this dot props to props so it's available throughout our class constructor is also the only place where we can set state so let's go ahead and set a counter and let's use that in the render method all right i also want to have the console open here and while we're looking at the console i want to make sure i'm printing messages in the various functions as well so you can see the we can see the progression so when an object is created the constructor is called followed by render let's give this some functionality to increment and decrement the counters so i'm going to create a couple of methods here increment which will set state on the counter and increment it using the previous value and add one to it likewise decrement will decrement a value on that right here okay and let's create a couple of buttons to allow us to increment and decrement this we're going to assign these methods to one of the events for onclick and let's replicate that for decrement oops there you go now when we click this we're going to see the counter reflect the change and notice that all that's done right now is calling the render method so let's introduce a few life cycle methods the first one is component did mount this is called right after render now when i save this we'll see things we render and what i want to do is also add markers at the end of some of these render life cycles so we're just going to add a dashed line so we know that this is a single render call and if we were to do increment there is another render call but it does not call component in mount because that is only triggered when the component is constructed and essentially gets added into the dom however there's another method called component did update and this method actually takes a few parameters there's a reference to previous props the previous state and snapshot let's trigger component did update and we'll add a log statement here all right so notice that component.update is not called here once we click increment we'll see component did update i'm going to add a line marker there as well so we know that's another render so if i click this you see the different sort of life cycles that are triggered all right so let's go ahead and add the ability to mount and unmount this counter we need to do that in app.js so we're going to create a constructor here with props that are passed to the parent and then set state in the constructor to with an attribute called mount which we'll set to true and a couple of methods to mount and unmount the counter we'll set state here to set mount to true and likewise uh this will be on mount counter where mount will be false let's go ahead and create a couple of button elements mount counter and map it's on click to this dot mount counter and replicate that for unmount counter okay so another thing i want to do is set disabled to true or false depending on the value of mount all right so notice that the buttons just grayed out now if i click on mount and mount you'll see that some lifecycle methods were triggered all right but one of the things we forgot here is to take advantage of that state variable so i'm going to use that and conditionally render counter and if it's not set to mount we'll remove it from the dom all right so there you go so now this should actually remove the counter let's add another life cycle method encounter this time it's called component will unmount as the name suggests this method is called when the components being taken out of the dom let's add another marker there and there you go so now component mount if i click on mount counter you'll see component will mount was triggered and there you go uh on mount the constructor is triggered because the counters com the counter component is recreated these are the most commonly used lifecycle methods let's shift focus into some of the infrequently used methods we have another method called should component update which takes next props and next state as its parameter parameters sorry generally this returns true by default the purpose of this method is to let react know if render should be triggered or not normally react does a very good job at figuring that out but sometimes let's say your state or props gets updated and you don't really need render to be triggered because you're not changing anything on the ui and especially if your render method is a bit expensive to compute then you can definitely gain some performance here but you need to be careful here because you could fall into a trap where you end up losing performance if this method is used incorrectly let's add a prop in app.js that we're going to pass into counter which we would want to ignore okay so let's call it ignore prop and whatever the value here is let's say it's zero initially i'm going to create another method here to pass and ignore prop by generating a value and assigning it to state so ignore prop is uh just add the random we don't care what the value is what we want to do next is pass that prop in to the uh counter so we'll pass an ignore prop equals this dot state dot ignore prop okay and so that should pass this through but what we also need is a button to trigger that change so let's call this ignore prop and then on click we will call this dot ignore prop okay there you go so now when i click ignore prop it's going to call render and component update mainly because something changed on the parent and that was passed down to the component but in this case let's say we don't care about ignore prop because we're not doing anything with it we're not rendering it to the ui so we simply want to ignore it that's where this method comes into the picture so we'll create a condition here to check for when it's appropriate to tell react not to call render we're going to store this in the state and call it ignore prop if uh there is an ignore props value and if the one in our state is not equal to that value we want to return false basically any time ignore prop comes in and if the value doesn't match what's in our state we want to return false so it's it's still being called here that's mainly because we should check this dot props so we're looking at whatever is in our current props and if next props is different then we know ignore prop was changed and in that case we don't want it to render anything let's add a console log here as well all right and click ignore prop call should component update is called but let's look at this so it's going to render for some reason we're checking if the value exists and if that value is not equal to what's in our props if that's the case we do not render perhaps we are looking at something incorrect here let's see ignore prop has been passed in there oh this should be ignore prop that's the issue all right there you go the next thing to look into is a method called get derived state from props this is a static method and it's called before every other method and this passes in props and state and the purpose of this method is to give you a chance to copy any values from props that you may be interested in transferring over to state and in our case we could add a another uh method here that allows us to pass in a random seed value so let's say we start off with uh our seed being some arbitrary value here and what we can do is add a seed generator method which is simply going to set state to set the value in seed to an integer so we're going to parse end and do math random times 100 to scale it up and that creates a method for us and we also want to pass in seed here from this dot state dot seed and also create another button here then maps to c generator so we can call it generate seed all right and i think the error we were getting earlier here is that we don't have a return statement so anything you return from here gets assigned to the state so if you don't want to change state you simply return null all right so now when i click generate seed let me lower this nothing seems to happen i mean we see some life cycle methods getting triggered here but it's not really taking advantage of the seed being passed in so let's take care of that in this method here so we want to check if a seed exists on the props and if the seed that's in our state is not equal to that seed that's passed in if that's the case we will return a seed value that's props that's c and it set the counter to props.c as well and let's just uh default it to zero here in this state notice that counter starts at 40 because we had set the initial seed value to 40 here so i can click increment and decrement and this continues to work but i could also click generate seed and that should change the value of counter here all right but the point here was to demonstrate this lifecycle method that allows us to copy props into state notice that since this is a static method we don't have access to the instance of the object there's one more or a couple more methods we need to talk about so the next one is called get snapshot before update and that sort of goes right before render and it takes in previous props in previous state and then we return a value out of this this method is to allow us to capture some properties that are not stored in the state before we rerender that component so let's say you had a list view or or a text area where the cursor was in a certain row and column or if the list would scroll to a certain location then you would be able to capture details about that and then handle that later on so whatever is returned here gets passed into component.update as a third parameter called snapshot and that's where we could tell the dom to sort of set the cursor and the carrot in a certain place and things like that so that that's that method and finally there is a method called component did catch which is part of the error boundaries group and this takes two parameters called error and info essentially it gives us a chance to gracefully handle you know any errors that we run into all right so let's go ahead and call ignore prop and also when should component update do not render is called we want to add one of the line markers so we know that's the end of the update and let's call generate seed and then we can still increment and decrement unmount and remount it and now let's generate a component that's going to create a deliberate error so let's call this error component and we're just going to return a div with it accessing some nonexistent value and this is going to cause it to crash so let's say we add it into counter right now so i'm going to place that error component here when i save you'll see that there were errors that were triggered here now if i did not have component that catch when i save i lose everything that's rendered in the browser and so i could have a downstream component that generates an error and it's not handled properly and it causes the entire app to go into sort of this blank screen so that's where component did catch comes into the picture it allows us to gracefully handle some of these so what i'm going to do is once we know there's an error we're going to set state and set the error and info properties on it and let's handle those here as well and render we're going to check for an error being present in that case we're going to return a div that says we have encountered an error let's try to print this out as well the error has some additional attributes that we need to print so what we can do is just print that out here to see what error contains and then we can revisit this there you go it is rerendering but the error is is right here so let's go ahead and look for i believe it's a message there you go let's take this out and all right so we were able to handle our error gracefully without everything else crashing and that's sort of the purpose of this method here let's let's trigger this conditionally so what i'm going to do is add an attribute to state called show error component and we'll set it to false to begin with and we're going to pass that here show error component equals this dot state dot show error component and everything still loads but internally here i want to make sure that we're looking at props to see if show error component is true in that case we can generate this just actually made up entirely just so that we don't run into this and we can get the counter again as we uh toggle this so we'll have to add another method here let's call this toggle error and we're going to set the value there for show error component and we're gonna set it to negate it to whatever it's set to and that should actually uh be called via button here so let's add that in toggle error and we'll just call this toggle error and so i think yeah there you go now as we click this it's not reversing so let's take a look at that um i see what's happening so this this part works okay i think the issue is with state.error because we are not clearing that once we set it here the component ends up rendering the error over and over again so all we have to do is look at if props dot show error component is true and if we have an error in that case there you go now we should be able to toggle this let me do a quick recap we have the constructor which is called when a component is created followed by get derived state from props which allows us to copy props into state this is not used frequently but there are cases such as this one here where we want to pass in a seed for the counter and have that be controlled internally through the state that's when this method is useful we have component dead mount which is also an interesting place to do things like network requests or handle like the initial loading of the component for instance if we had a value that said initializing to true by default and based off of this value if we were setting a specific if we were showing a specific message we could sort of simulate um oops let's say we were simply returning initializing right so in this case we're going to see that method there i think find the div it's going to show it on the next line there and essentially you know let's say this is when the component loads initially it's in the initializing state we need to fetch some data and that kind of stuff would happen right here let's just simulate this dot set timeout and call a method there in about let's say uh 500 milliseconds so you'll see it flash briefly and we're going to set the state on uh initializing to false sorry i meant to do just set timeout there initially i was thinking about set state so there you go if i were to refresh this notice you see the initializing followed by the counter showing up so that's sort of the purpose of this method where you could make a network request and when you have your data again you can change the state on your component and tell it to you know maybe perhaps show a spinner while it's loading content anyway while we were doing the recap so after component did mount should component update gets called this is where we could hint to react uh do not uh call render all over again i believe in the future that's how the method is going to work it's simply going to be a hint and react will decide if it wants to actually honor that or not and this gets snapshot before update which allows us to store things like positions of your list views or or you know text areas or whatever uh dom components that you can then pass on to component data update and reassign those after the render render of course takes care of rendering content component data update gets triggered right after render now this is also similar to componented mount if you wanted to make specific network requests based on certain attributes or props or state values you could do the same here you can actually call set state in component did mount and it triggers a rerender but it doesn't actually call the render method twice it only does it once because of the location where it's called under and finally this component will unmount that gets triggered when the components removed from the dom and component did catch which helps us sort of gracefully handle errors and downstream components lifecycle methods or or render method and that brings us to the end of this video hope it was useful and if you'd like to stay up to date with future videos consider subscribing below thank you
