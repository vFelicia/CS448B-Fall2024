With timestamps:

00:00 - this web development with python course
00:01 - is broken up into two parts in the first
00:04 - part you will learn how to build and
00:06 - deploy a site using the flask python web
00:09 - framework in part two you will connect
00:11 - the flask application from the first
00:13 - part to a cloud mySQL database and learn
00:16 - how to deploy a production-ready
00:18 - database driven web application Akash
00:21 - created this course he is the CEO of
00:23 - Jovian and he has created many popular
00:26 - courses
00:27 - hi I'm Akash co-founder and CEO of
00:30 - jovial today I am really excited to
00:33 - share with you this practical and
00:35 - Hands-On introduction to web development
00:37 - with python from scratch in this
00:40 - tutorial you will watch me build and
00:42 - deploy a jovian careers website to the
00:44 - cloud using free online resources you
00:48 - can follow along to build your own
00:50 - personal website so let's get started we
00:53 - want to explore web development and
00:55 - deployment using Python and its
00:57 - ecosystem of libraries
00:59 - and we will do this by creating a jovian
01:02 - careers website where we can list job
01:05 - openings at Jovian and people can apply
01:08 - to those jobs so after this lesson you
01:11 - should be in a position to build and
01:13 - deploy your own website maybe a personal
01:15 - website a portfolio or some sample
01:18 - application
01:20 - there are no prerequisites here apart
01:23 - from Python and git
01:25 - so here are some of the topics that we
01:27 - are going to look at we're going to look
01:28 - at how to use GitHub for creating a
01:31 - project and replit for working on a
01:34 - project we will talk about the flask web
01:37 - framework which is used to create web
01:38 - applications in Python we will touch on
01:41 - HTML and CSS we will talk about the
01:44 - bootstrap framework which will help us
01:47 - make our website look a little better
01:49 - with less effort and then we will talk
01:52 - about deployment on cloud platforms
01:55 - specifically we are going to deploy to
01:56 - render.com and finally we will talk
01:59 - about how to set up your own custom
02:01 - domain and configure it to point it to
02:04 - the website that you have created and
02:06 - deployed
02:07 - the first step is to create a project on
02:10 - GitHub now GitHub as you might already
02:12 - know is a platform for sharing and
02:16 - collaborating on software development
02:18 - projects and it is powered by git which
02:21 - is a version control system which lets
02:23 - you record every version of your project
02:25 - as you make changes
02:27 - so the first thing you want to do is go
02:29 - to github.com and then sign in or create
02:31 - an account if you haven't done that
02:33 - already
02:34 - and once you're logged into github.com
02:36 - this is the screen that you will see but
02:39 - in this busy interface what you're
02:41 - looking for is this new button this is
02:43 - the new repository or new project button
02:46 - if you don't see this new button there's
02:47 - also a plus button here on the top right
02:49 - which you can use and just select new
02:52 - Repository
02:55 - now once you try to create a new
02:57 - repository you will have to select an
02:59 - owner which will be your GitHub account
03:01 - your GitHub username and then we need to
03:04 - give this repository a name so this has
03:07 - to be one or more lowercase words
03:09 - separated by hyphens so I'm going to
03:11 - call it Jovian
03:13 - careers website
03:17 - and we can give this a description if we
03:19 - want so I'm just going to say a careers
03:22 - website for Joven
03:25 - and I'm going to make this public so
03:27 - that anybody can access it
03:29 - and I'm also going to add a readme file
03:31 - because this will initialize the
03:33 - repository so I don't have to push
03:35 - anything to the repository to get
03:36 - started
03:38 - and then I'm also going to add a git
03:39 - ignore file so as we do our development
03:42 - a lot of build files and compiled files
03:45 - and intermediate files are created by
03:47 - python which we may not want to put into
03:50 - git because they are not actual source
03:52 - code they are simply used to run the
03:53 - code so to ignore all of these
03:56 - intermediate output files that are
03:58 - created you can select a DOT get ignore
04:00 - file that can get added to the root of
04:03 - your repository now depending on the
04:05 - kind of project you're working on the
04:07 - kind of language you're using the kind
04:09 - of files that you need to exclude May
04:11 - differ so GitHub has already provided a
04:14 - git ignore template for Python and we
04:17 - just select that so that we don't
04:19 - accidentally end up adding any
04:21 - intermediate compiled files or output
04:23 - files into our Repository
04:26 - and finally if you're making your
04:28 - repository public it's always a good
04:30 - idea to include a license which lets
04:32 - others know how they can use it whether
04:34 - they can use it commercially whether
04:35 - they can build on top of it or not and
04:37 - I'm just going to select the MIT license
04:38 - here which is the most liberal license
04:40 - that's available
04:42 - and that's it now we can create the
04:44 - Repository
04:47 - so now the repository is created and you
04:50 - can see here it contains a readme file
04:52 - which is rendered as markdown so it just
04:54 - contains the name of the repository it
04:56 - also contains a license file that you
04:58 - can read and it contains a DOT get
04:59 - ignore file if you click on it contains
05:02 - information about the kind of files that
05:04 - should be excluded
05:06 - from git and these are all the
05:09 - intermediate files that might get
05:10 - created when you're running your python
05:13 - code
05:14 - so let's go back here and take this
05:17 - the next step is to open up this project
05:20 - on the platform replit.com
05:22 - so here this project is on GitHub GitHub
05:26 - can be used to store projects can be
05:28 - used to share projects but cannot be
05:30 - used to develop projects
05:33 - now that's where you might want to use
05:35 - this Cloud platform called replet and
05:38 - replit.com is an online free
05:40 - collaborative in browser IDE refers to
05:44 - integrated development environment so
05:46 - what that means is it can connect to
05:48 - your GitHub account and it can let you
05:50 - write code on the cloud and you don't
05:54 - have to install anything on your
05:55 - computer and your code will be synced to
05:58 - the cloud and you can access it from
06:00 - anywhere
06:01 - so you can go to replied.com and you can
06:05 - then sign up or log into replit so I'm
06:07 - just going to log in because I already
06:09 - have an account
06:12 - and once you log in this will bring you
06:15 - to your replay dashboard
06:17 - now here you can create new projects but
06:19 - ideally you want to use GitHub to keep
06:22 - track of your projects so you can scroll
06:24 - down here
06:32 - and you can click on connect GitHub
06:34 - so let's click connect GitHub and here
06:37 - you might want to then select what
06:40 - exactly you want to give replied access
06:42 - to so in my case I'm going to click on
06:45 - my name and I can choose to authorize
06:47 - all the repositories I have so that any
06:49 - repository I have on GitHub I can
06:51 - develop with replit or I can choose to
06:54 - only give access to select repositories
06:56 - now in this case I'm just going to give
06:58 - access to select repositories because I
07:00 - have a whole bunch of repositories so
07:02 - let's see Jovian couriers website okay
07:06 - that looks great and these are the
07:09 - permissions that replied is going to get
07:10 - it is going to be able to read the code
07:12 - from GitHub and it is going to be able
07:14 - to write code back into GitHub
07:16 - so let's install and authorize
07:20 - and that should now bring us to the
07:22 - replit dashboard and now you should see
07:24 - a GitHub Repose section on your applet
07:27 - dashboard and here you can see whichever
07:30 - repositories you've selected replied
07:31 - will have access here
07:33 - so let me now click on this and let me
07:35 - see what happens so now it's going to
07:37 - import this repository so that means all
07:41 - the code from GitHub and I'm going to
07:43 - make this Rebel public so just like my
07:46 - repository is public I also want to make
07:47 - my replit project public and
07:50 - let me then click import from GitHub
07:54 - and that's going to load up all the
07:56 - files that we had seen here git ignore
07:58 - license and readme.md
08:00 - and it's now going to show these files
08:02 - on replit
08:05 - now everything you build will ultimately
08:07 - have to be run in a certain way
08:13 - so you can configure a run command and
08:16 - every time you click this run button the
08:19 - Run command that you configure here is
08:21 - going to be executed and the output is
08:23 - going to be shown here in this console
08:25 - tab I'm going to type python app dot pi
08:28 - as the command that will be executed
08:31 - when the Run button is clicked so I'm
08:34 - going to click done and this is going to
08:36 - create a file called Dot replit
08:40 - within the repository which contains
08:43 - this information and informs replit this
08:45 - is a Python 3 project and the Run button
08:48 - should run python app.pi now you may
08:51 - notice that this dot replied file is not
08:53 - visible here and that's because it is a
08:56 - hidden file so you can just click on
08:58 - these three dots and say show hidden
09:00 - files and that's going to show the dot
09:02 - replet file which is just hidden from
09:04 - you by default so now we have this
09:07 - project open on replit you can see here
09:09 - we have a files sidebar the file sidebar
09:12 - contains a list of files that are
09:13 - present this is the same get ignore file
09:15 - we had this is the same license file we
09:17 - had and this is the same readme file we
09:19 - had
09:20 - and we can choose to then show a preview
09:22 - which is shown here or we can hide the
09:24 - preview
09:25 - so that's the files tab and here is the
09:28 - file editor this is where we can edit
09:30 - the code and finally here we have two
09:33 - things we have a console which shows the
09:36 - output of the Run button
09:38 - and we have a shell which is just like a
09:41 - terminal or a command line interface
09:42 - where you can run any command line
09:44 - utilities like LS or PWD or CD or
09:48 - whatever you want to do let me click the
09:51 - Run button and see what happens
09:53 - and the first thing it does is it tries
09:56 - to run the command Python app.pi and it
09:58 - says that python cannot open the file
10:00 - app.pi because there is no such file or
10:02 - directory we have not created the file
10:04 - yet
10:05 - so I'm just going to click plus here to
10:08 - create a new file and I'm going to call
10:10 - it app.pi
10:13 - and let's just print
10:16 - hello world here
10:19 - and let's run it
10:22 - and now you can see that the code was
10:24 - executed Python app.pi and hello world
10:26 - the output was displayed here
10:28 - so now we have got our project imported
10:32 - into replit and we are now already
10:35 - developing it we can open up files we
10:36 - can change the code and then we can run
10:38 - the code and of course we don't have to
10:40 - use the Run button we can come in here
10:42 - and we can say python app dot pi and
10:45 - that will work perfectly fine as well
10:48 - so let's take that we've now opened up a
10:51 - project on replit
10:53 - now we are not here to print hello world
10:55 - we are here to build a web application
10:57 - and for building web applications in
11:00 - Python we use a framework called flask
11:04 - so if you just go online and search for
11:06 - flask python
11:09 - you will be taken to this website
11:10 - flask.palletsproject.com
11:13 - flask is one of the most popular web
11:16 - Frameworks in Python
11:19 - and flask is actually really easy to use
11:21 - and let's check the installation and the
11:24 - quick start sections to understand how
11:26 - to use it
11:27 - every Library you come across will have
11:30 - some sort of an installation and quick
11:31 - start or getting started section or
11:33 - maybe a quick tutorial that you can
11:35 - follow
11:36 - so installation simply requires us to
11:39 - run so here it says create an
11:41 - environment Etc we're not too interested
11:44 - in all that right now because we're
11:45 - already using a cloud environment but
11:48 - within the activated environment use the
11:50 - following command to install flasks so
11:52 - this is what we need to do we need to
11:53 - run pip install flask so I'm going to go
11:56 - here I'm going to go into the shell not
11:58 - the console because the console is just
12:00 - tied to the Run button but the shell and
12:03 - I am going to run pip
12:06 - install
12:08 - flask
12:10 - and that's going to now install flask
12:12 - for us now we can go back into the flask
12:16 - tutorial and now we can head into the
12:19 - Quick Start
12:20 - and here is what a simplest possible web
12:24 - application in flask looks like so here
12:26 - there are two things this is the module
12:28 - so when we set pip install flask the
12:30 - module with the name flask got installed
12:32 - and modules always have lower case names
12:35 - so from flask and then we say import and
12:39 - from the flask module we want to import
12:42 - the flask class even though these both
12:45 - are called flask it's a bit confusingly
12:47 - named but inside the module flask there
12:50 - is a class called flask with a capital f
12:54 - so I'm going to import flask and now
12:58 - we need to create an app an app is
13:01 - simply an object of the class flask okay
13:04 - so python has something called object
13:06 - oriented programming built inside it and
13:09 - what we are doing here is we are
13:10 - importing a class and then we are
13:12 - creating an object of the class now if
13:15 - that doesn't make sense don't worry
13:16 - about it all we are doing here is
13:18 - importing functionality from flask and
13:21 - putting it into this variable called app
13:24 - so we are creating a flask application
13:26 - by typing flask
13:28 - this way now the only thing that we need
13:31 - to add here is a name every time you
13:34 - create a flask application you have to
13:35 - give it a name and typically inside any
13:38 - python script you already have this
13:41 - variable called underscore underscore
13:43 - name underscore underscore Define if I
13:46 - for example just type print underscore
13:48 - underscore name underscore underscore
13:50 - and run it
13:52 - you're going to see here that it prints
13:54 - underscore underscore main underscore
13:55 - underscore the name variable refers to
13:58 - how a particular script was invoked if
14:00 - it was invoked using python app.pi the
14:04 - name variable is going to have the value
14:05 - mean and if it was invoked from
14:07 - somewhere else the name variable may
14:09 - have some other name okay so now we have
14:11 - created a flask application
14:14 - now once we have created a flask
14:16 - application we then need to create a
14:20 - route
14:21 - now any website that you visit
14:23 - you typically access it using some URL
14:26 - for example you may go to jovian.ai
14:30 - and this is the page that is on the URL
14:33 - joven.ai now if I click on profile here
14:36 - you can see that the URL has changed to
14:39 - slash Akash NS and now there is a
14:42 - different page rendered on this URL if I
14:45 - click on learn and click on courses you
14:47 - can see the URL has changed to slash
14:48 - learn and now you see something
14:51 - different on this page
14:53 - so what you need to tell flask is when a
14:57 - certain URL is requested what should be
15:01 - returned
15:02 - so here in the quick start we are first
15:05 - registering a route a route is simply a
15:08 - part of the URL after the domain name so
15:10 - here jobin.ai is the domain name and
15:12 - everything after it is called the path
15:14 - or the route so let's do that let's go
15:18 - and register a route here and the way we
15:20 - do that is we say app
15:22 - with an at character so this is called a
15:24 - decorator in Python it's a slightly
15:26 - Advanced concept that's often used in
15:28 - libraries to provide some Advanced
15:30 - functionality so we say app dot route
15:33 - and then we have to provide which path
15:36 - we want it to match so let's say we
15:38 - deploy this website to
15:40 - jovencareers.com then this is going to
15:43 - match
15:44 - slash which is the empty route which is
15:46 - basically just the home page
15:48 - jovencareers.com
15:50 - and then
15:52 - we Define a function so we can define a
15:54 - function below this decorator
15:58 - hello world
15:59 - and in this function
16:01 - let us simply for now return
16:04 - hello world
16:07 - so what we've done here is we've defined
16:09 - a function which simply Returns the
16:11 - string hello world but by adding this
16:14 - decorator we've informed flask that when
16:16 - the URL slash is accessed
16:19 - then
16:20 - show hello world
16:23 - and let's run that
16:26 - and replied does some setup to manage
16:29 - dependencies on its end so let's just
16:31 - wait for that
16:33 - has its own way of managing python
16:35 - packages so that's why sometimes it
16:37 - takes a second or two but once we run it
16:38 - we see nothing happens
16:40 - so nothing happened because
16:43 - if you scroll down here you can see here
16:46 - that they expect you to run things in a
16:48 - slightly different way what you need to
16:50 - do is you need to export flask
16:52 - underscore app equals hello or whatever
16:54 - is the name of the file here it was
16:56 - called hello.pi and then you need to
16:58 - type flask run
17:00 - so what that means is we may have to go
17:02 - back into our DOT replete file and
17:04 - change the code here python app.pi
17:07 - because flask expects to be run in a
17:09 - different way
17:10 - so we need to probably change python
17:13 - app.pi to flask run and we also need to
17:15 - add somehow this flask cap command now
17:18 - that's one way to run it
17:20 - another way to run it is
17:23 - something that I'm going to show you
17:25 - right now I'm going to type if
17:27 - underscore underscore name underscore
17:29 - underscore equals underscore underscore
17:31 - mean underscore underscore
17:33 - so here what we are saying is if the
17:36 - variable underscore underscore name has
17:38 - the value underscore underscore mean and
17:41 - I'm just checking the equality here
17:43 - and this is going to be the case when we
17:45 - run python app dot Pi so
17:48 - let's say if I just print underscore
17:50 - name underscore underscore
17:52 - let me just print
17:54 - I'm inside the if now
17:57 - and when we run it it simply says that
18:00 - underscore unscore name has the value
18:01 - underscore mean and I'm inside the if
18:03 - now so here if the script is invoked
18:07 - using the python command then what we
18:10 - want to do is say app dot run so we have
18:14 - created the app but we've not yet run
18:15 - the app and we don't want to use the
18:17 - flask run command instead we want to do
18:19 - it using app.run
18:22 - and here when you type app.run you will
18:24 - see some documentation you need to
18:26 - provide a few options the first one is a
18:28 - host and it simply says here set this to
18:32 - 0.0.0.0 to run on the local development
18:35 - server so we type app.run host equals
18:40 - 0.0.0.0 and then we pass debug equals
18:43 - true
18:44 - and now we save the file and then we
18:47 - click run
18:49 - and now you can see that replit actually
18:52 - opened up a browser within our browser
18:54 - so this is a fake browser that replied
18:56 - has opened up for us
18:59 - so we have imported flask and then we
19:01 - have created a flask app a flask
19:03 - application and then we have registered
19:06 - a route to the application and finally
19:08 - we have checked if we are running this
19:11 - app.pi file as a script as python app.pi
19:15 - then we want to start the app by using
19:19 - app.run and we want to run it on 0.0.0.0
19:22 - this is always something that you have
19:24 - to put in so that it runs locally and we
19:27 - said debug equals true so that every
19:29 - time we make a change like if I change
19:31 - this to hello
19:32 - Jovian
19:34 - that's going to now change to hello
19:36 - Jovian
19:37 - and just like that we have created our
19:40 - first web application
19:42 - you'll see here that this is a browser
19:45 - that replied is showing us just for the
19:47 - preview sake but you can also open up
19:48 - this browser in a new tab and that shows
19:51 - you hello Jovian and you can see that
19:52 - this is deployed at this location
19:55 - joviancareers website dot akashness
19:57 - rebel.co so this is one of the benefits
20:01 - of working with replit that you can take
20:03 - the work that you're doing and you can
20:05 - share it with other people even while
20:07 - you are developing it replied is not
20:09 - great for production workloads so you
20:11 - should not be sending a lot of traffic
20:13 - to this site and in fact specifically
20:15 - here it tells you that this is a
20:17 - development server don't use it in
20:18 - production but it is great for testing
20:21 - it is great for quickly prototyping and
20:23 - showing something to your colleagues or
20:25 - your friends so now we have already
20:28 - built our first web page using flask
20:33 - and we can see it running and we can
20:35 - share it with others as well
20:36 - so we've done that now the last thing I
20:39 - want to show you is once you've done
20:40 - some work on replit and you want to save
20:42 - it back to GitHub how do you do that so
20:44 - right now if you see here if I reload
20:46 - this page GitHub still has the old
20:49 - version of the repository it does not
20:51 - have all the changes we've made on
20:52 - replit so just like we might do some
20:55 - development locally and then push our
20:57 - changes to GitHub in the same way we can
20:59 - come in here into the Version Control
21:01 - tab and on the Version Control tab we
21:05 - can review the changes that we've made
21:06 - so it looks like we've modified all of
21:08 - these files and then we can commit and
21:12 - we can push I can simply type what I've
21:14 - changed so added the flask project
21:19 - and I am going to click commit and push
21:21 - and that's going to save all of these
21:22 - changes it is going to create a git
21:24 - commit and it is going to then
21:27 - push these changes back to the main
21:29 - branch of the original repository
21:31 - akashina careers website so if I go back
21:35 - to github.com now and I reload the page
21:38 - you can see here now we have
21:41 - a bunch of other files but most
21:43 - importantly we have this app.pi file and
21:46 - this app.pi file now contains the route
21:49 - hello world
21:50 - so if you want to learn more about how
21:53 - GitHub works then you can check out this
21:55 - tutorial on GitHub and if you want to
21:57 - learn more about replit how it works and
21:59 - you can check out this tutorial and
22:01 - replied and similarly there is a
22:02 - tutorial on flask as well that you can
22:04 - check out we completed the first step
22:06 - which was to create a project on GitHub
22:08 - and then open up that project on
22:11 - replit.com then we created and ran a
22:14 - flask web server as you can see here
22:17 - and finally we push those changes back
22:19 - to GitHub so that we can share our
22:22 - project with others
22:26 - now we are going to start introducing
22:29 - some HTML and CSS
22:31 - so let's start with that
22:33 - now if we come back here to the files
22:35 - tab
22:36 - and create a folder called templates
22:42 - so you can see here I've used the plus
22:43 - add folder button and created a folder
22:45 - called templates and inside this folder
22:48 - I am going to add a file and I'm going
22:50 - to call this file home.html
22:53 - so this file is going to contain the
22:55 - information that I want to show on the
22:59 - page
23:00 - that is being rendered here
23:02 - right now we are simply showing the
23:04 - information hello jogan but we probably
23:06 - want to show something more than that we
23:07 - probably want to show a nice web page
23:10 - with some information some pictures some
23:13 - jobs so all of that we will be putting
23:16 - into this file home.html HTML is the
23:20 - language that is used to create web
23:22 - pages and you can check out any tutorial
23:25 - on HTML so the one that I would
23:27 - recommend is HTML dog.com it's really
23:30 - easy to get started and you can just go
23:33 - in HTML dog.com and open up the get
23:35 - started page and just create an HTML
23:37 - page and it contains a whole bunch of
23:39 - information on how to create HTML
23:42 - documents but this is the most basic
23:45 - structure of an HTML document you have
23:47 - something called a doctype declaration
23:49 - at the top so this tells the browser
23:52 - what kind of a
23:54 - document you are sending so if I type
23:57 - doctype HTML when we send this HTML to
24:01 - somebody's browser we're informing that
24:03 - we are writing HTML code
24:05 - and then you create what's called a tag
24:08 - so in HTML everything is constructed
24:11 - using tags any website you see on the
24:13 - internet is constructed using HTML tags
24:15 - so here the root tag or the outermost
24:19 - tag is called HTML and this is how you
24:21 - create a tag you have a less than
24:24 - and then you have the name of the tag
24:26 - and then you have a greater than so this
24:27 - is how you create the opening tag and
24:30 - then similar to the opening tag there is
24:32 - a closing tag and there is a slash at
24:34 - the beginning here after the less than
24:36 - symbol to indicate that this is the
24:38 - closing tag so basically what we're
24:40 - saying is that within the HTML tag we
24:43 - want to put some information so the root
24:45 - of your document the outermost tag in
24:47 - your document is always going to be the
24:48 - HTML tag
24:50 - now inside the HTML tag we generally put
24:54 - two tags we put head
24:57 - and we put body
25:00 - so body is what you want to actually
25:02 - show on the page
25:05 - and head is some other information
25:07 - typically this is what you want to show
25:10 - in the title bar you can put that
25:11 - information here if you want to include
25:13 - any styling declarations or css we
25:16 - generally put that in the head if you
25:18 - want to include any external Javascript
25:20 - libraries for interactivity we put that
25:22 - in the head so the head is just
25:25 - information that will be used to render
25:27 - some things on the body the body is the
25:29 - actual information that is going to get
25:31 - rendered
25:32 - so in the head typically one thing that
25:35 - is commonly put inside the head is the
25:37 - title and I'm going to call this Jovian
25:40 - couriers and let's just save that for
25:43 - now and inside the body is where you
25:46 - would put some information so here let
25:49 - me just write
25:51 - hello there
25:53 - you'll learn about
25:56 - the job openings
26:00 - at Jovian here
26:03 - so let me save that as well so we've
26:06 - created some HTML file inside a
26:08 - templates folder but how do we use it
26:10 - within the app to use a template we use
26:13 - the render template function
26:15 - from flask so from flask we import
26:17 - render template and instead of returning
26:19 - just a string hello world we say render
26:23 - template
26:24 - and then we give it the name of the
26:25 - template so in this case the template is
26:27 - called home.html so I'm just going to
26:29 - pass in home.html and there you go now
26:33 - inside home.html we are saying hello
26:35 - there you learn about the job openings
26:37 - at Jovian here and that's what shows up
26:39 - here and you can also open it up in a
26:41 - new tab and check the same thing hello
26:44 - there you'll learn about job openings at
26:45 - jobin here now not only that if you see
26:48 - carefully here
26:49 - you can see that now this says Jovian
26:51 - career so we have also set the title of
26:54 - this tab
26:56 - apart from the title we can actually
26:57 - also set this icon so just like you see
27:00 - all these different icons here we can
27:02 - actually also set these icons this is
27:04 - called the fave icon fav icon and I'll
27:07 - let you figure that out how to change
27:09 - the fav icon using a flask template so
27:12 - let's bring that back here now
27:14 - so great we are making progress already
27:16 - we are now starting to show some
27:19 - information about what we want to
27:21 - actually display on the site and we are
27:23 - doing this using a template
27:25 - now before we go further and try to just
27:28 - code the site directly it might be
27:30 - easier if we first figure out what
27:32 - exactly we want to show on the page and
27:34 - this is where you should put your laptop
27:37 - away and maybe start working using pen
27:40 - and paper and try to just draw out what
27:42 - you want to display on the page before
27:44 - you actually try to code it because if
27:46 - you don't have a clear picture of what
27:48 - you want to show then writing the code
27:49 - for it can get somewhat tricky so here
27:52 - I'm going to use a virtual whiteboard
27:54 - but please feel free to use pen and
27:56 - paper to do this and here I'm just going
27:58 - to draw a rectangle to represent the
28:00 - browser and now I am going to just put
28:03 - some information here inside which will
28:06 - give me a guide for what I want to
28:08 - actually show on the page so now let me
28:10 - go here and select the typing tool
28:15 - let's give this page a title Jovian
28:18 - careers and let's make that a little
28:20 - bigger we can also change the
28:22 - color here so let me make that dark
28:26 - so now here I'm going to have a title on
28:28 - the page called Jovian couriers then I
28:31 - am going to put an image on the page so
28:33 - here there's going to be just like a
28:35 - banner image and I don't know what I'm
28:37 - going to put in this Banner image but
28:39 - for now let me just draw some
28:42 - Hills and let me draw
28:45 - a tree
28:47 - the idea is I just want to tell myself
28:49 - that there's going to be an image here
28:50 - let me draw a river or something
28:53 - and then there is going to be maybe some
28:55 - information about shoving so I'm going
28:57 - to type about Jovian here and I'm going
28:59 - to make that a little bigger and I just
29:01 - want to have a few lines of information
29:02 - talking about jogan so I don't want to
29:05 - put any actual text here I'll just put
29:08 - lines to kind of roughly guide me that
29:11 - this is going to be just some
29:12 - information
29:13 - and then below this I am going to show
29:16 - some
29:17 - job openings so let's call this job
29:20 - openings
29:21 - and let's bring that a little bigger so
29:24 - maybe not this big but roughly about
29:26 - this big
29:27 - and this is called wireframing what
29:29 - you're doing here is you're creating a
29:31 - rough idea of what you want your site to
29:33 - look like and we don't want to get very
29:35 - detailed in terms of colors and fonts
29:37 - and all those things we just want to get
29:38 - a rough idea
29:41 - and then let us maybe list some job
29:44 - openings let's see what the job openings
29:45 - will look like so maybe data analyst is
29:47 - a job opening and maybe let me use a
29:51 - lighter color here just to emphasize
29:54 - that this is
29:56 - a part of this section and then under a
30:00 - job opening I may also want to maybe
30:02 - include where this job opening is based
30:04 - so let me call it Bengaluru
30:07 - India
30:08 - and let's make that a little smaller
30:13 - and maybe let's also put an apply button
30:15 - here next to the job opening
30:20 - so now we have an apply button that we
30:21 - want to show
30:23 - and maybe right below the absorb opening
30:25 - let's also show a line a quick separator
30:27 - and let me now take this
30:30 - and duplicate this a few times to get a
30:32 - list of job openings
30:41 - so now we have a second job opening
30:42 - again it's all approximately correct it
30:44 - doesn't have to be 100 aligned and now
30:47 - we have a third job opening and now we
30:49 - have a fourth job opening
30:51 - and that's it and maybe right below the
30:54 - last job opening let's put a button
30:57 - called contact us
31:01 - and that's actually not bad so let me
31:04 - just change that to data scientist
31:08 - let me change that to backend engineer
31:14 - let me change that to front end
31:17 - engineer and let me change this to
31:20 - remote let me change this to San
31:23 - Francisco
31:25 - USA
31:26 - let me change that to
31:29 - Delhi India
31:31 - we just spent four or five minutes
31:33 - designing
31:35 - this wireframe and all we've done here
31:38 - is we've figured out what we want to
31:40 - display on the page so we want to show
31:41 - jobin careers we want to show a picture
31:43 - we want to show about Jovian some
31:45 - information about Joven we want to show
31:46 - some job openings and for each job
31:48 - opening the title the location and then
31:51 - an apply button to apply for the job
31:53 - opening
31:54 - and a contact us button at the bottom in
31:56 - case somebody wants to directly contact
31:58 - us for whatever reason
32:00 - so this is always a good idea whenever
32:02 - you're doing any form of web development
32:03 - it's always great to start with the
32:05 - wireframe first and make it as quick and
32:07 - dirty as possible so what I've done here
32:09 - is I've actually created three
32:11 - wireframes so this is the one page that
32:12 - we have about Jovian open positions and
32:15 - contact us
32:17 - and along with this I've also created a
32:21 - couple more wireframes if you click the
32:22 - apply button then we will go to a job
32:24 - Details page here we have the data
32:27 - analyst job where we have the
32:28 - responsibilities and the requirements of
32:30 - the job and the salary information for
32:32 - the job and below it we are going to
32:34 - have an application form and in this
32:36 - application form these are the fields
32:38 - we're going to have and this is what is
32:39 - going to get submitted and after
32:41 - submitting we are going to show this
32:43 - page which says your application has
32:45 - been submitted and you reach out with
32:46 - the next steps now this is what you
32:48 - should create to just brainstorm with
32:50 - your team or just figure out if this is
32:51 - what you want to work on if there are
32:53 - any major changes required if we have
32:55 - all the information or not
32:57 - and then you can maybe try to either
32:59 - convert it into a more detailed design
33:00 - or you can start coding directly either
33:03 - is fine but this is the information that
33:05 - we want to get onto the page and we've
33:08 - done that by creating a quick wireframe
33:10 - so now keeping this wireframe next to us
33:13 - let's start creating the page
33:16 - so the first thing we want to show here
33:17 - is Joven careers
33:20 - and we want to make this big we want to
33:23 - make this really big how do we make it
33:25 - big well that's what HTML headers are
33:27 - for now if we go back on HTML tutorial
33:31 - here
33:34 - you can see here that there are six
33:36 - levels of headings available on HTML so
33:38 - I'm just going to click on headings this
33:40 - is part of the HTML beginner tutorial
33:42 - and under headings you can see that this
33:45 - is how you create a heading
33:47 - you create a tag called H1 and then you
33:49 - put some information inside it and then
33:50 - you close the tag with a closing tag and
33:53 - then you have H2 and you have H3 and so
33:55 - on so let me just go back here and let
33:57 - me just put an H1 here
34:04 - and now as soon as I change this to H1
34:07 - you can see that this becomes big
34:09 - next we wanted to have an image let me
34:12 - try and add an image here so how do we
34:14 - add an image again we go back here we
34:16 - check HTML tutorials how do we add
34:18 - images
34:19 - I'm going to click on image and it looks
34:22 - like this is how you add an image so an
34:24 - image is a self-closing tag because
34:26 - there's nothing that you put inside the
34:28 - image tag you just give it a source so
34:30 - here now we are seeing for the first
34:31 - time something called an attribute apart
34:34 - from a tag and something inside the tag
34:37 - so for example here we have something
34:39 - inside the H1 tag Joven careers
34:42 - here we don't have anything inside the
34:44 - tag but we have this SRC information
34:46 - here so let me just take that IMG SRC
34:50 - actually let me just do that here IMG
34:53 - SRC equals some information
34:55 - and close that and SRC is going to
34:58 - accept a URL so let me copy this URL and
35:03 - let me comment paste that URL in here
35:05 - and let's run that
35:08 - and you can see that this is not loading
35:10 - up maybe there's some issue maybe this
35:11 - image does not exist but in any case we
35:14 - don't want to show this URL we want to
35:15 - show some nice picture about career
35:17 - growth about work and things like that
35:19 - so one good place to find good images
35:22 - for your websites is unsplash.com that's
35:26 - unsplash on splash.com
35:29 - and on onsplash.com you can find royalty
35:33 - free images which means that you don't
35:34 - need to buy these photos to use them you
35:37 - can use them commercially and I'm just
35:39 - going to search for career
35:41 - and
35:44 - this one looks nice this one looks
35:46 - interesting so I'm just going to
35:47 - download this picture here
35:50 - and I'm gonna put this in here
35:53 - and let's also rename this let's call
35:56 - this banner.jpeg
35:58 - and jpeg is simply the file format and
36:02 - now we want to show this file banner.jpg
36:05 - here
36:07 - so where exactly is this file right now
36:09 - this file is on our computer and our
36:11 - computer is not accessible on the
36:13 - internet so we need to take this file
36:14 - and put it somewhere where it can be
36:16 - accessed by our flask application and
36:19 - that's where there is this folder called
36:22 - Static
36:23 - so this should be outside templates not
36:25 - inside
36:26 - let me just move it out so I've created
36:28 - this folder called Static and anything
36:30 - that you put under the static folder
36:32 - will be directly shared by flask
36:35 - externally so if I just upload a file
36:38 - here so I can click upload file
36:41 - and I can select banner.jpeg and then
36:44 - you can see banner.jpg got added here
36:46 - but I want to move it inside static so
36:48 - I'm going to move it inside static
36:50 - and now flask will allow you to access
36:53 - this file
36:54 - using the URL
36:56 - let me open this in a new tab so this is
36:58 - the URL of the server this is where we
37:00 - are rendering the route slash but if you
37:02 - type slash static s t a t i c and then
37:06 - you type the name of the file
37:07 - banner.jpeg
37:10 - you will see that we have this file here
37:12 - right here so what I've done here is
37:15 - simply
37:16 - Jovian couriers
37:19 - website.akashness.revel.com so this was
37:20 - the main website that was getting
37:22 - rendered I've just put slash static
37:24 - slash banner.jpg and anything that was
37:27 - inside the static folder will show up
37:29 - here with the corresponding URL
37:31 - so now I can take this URL
37:34 - and let me go back here
37:36 - and now I can put this here under SRC
37:41 - okay and now you can see that as soon as
37:43 - I put this in now this image file is
37:46 - showing up here
37:47 - now of course this image file is a bit
37:49 - too large so on the image tag you can
37:51 - also specify width and height so I'm
37:53 - just going to specify
37:54 - a height
37:56 - now the height is measured in pixels
37:58 - pixels are simply dots on the screen I'm
38:00 - going to just roughly put it at 320
38:03 - pixels or I'm just going to put 320 and
38:05 - that's going to automatically convert
38:06 - that into pixels
38:08 - and now you can see here this image has
38:10 - been loaded
38:12 - so now we have an image and now under
38:14 - this image we want this information
38:17 - about Joven so let's get that in as well
38:19 - so now we want a smaller heading so
38:22 - let's call that about Jovian
38:25 - and now let's add a paragraph of text
38:28 - below it so here now we want some text
38:31 - below it now whenever you are just
38:33 - building out a site you don't want to
38:35 - have to type a lot of text and that's
38:37 - where there are text generators
38:39 - available online so just search for text
38:41 - generator
38:43 - one thing that might help is to just
38:45 - search for lorem ipsum text generator so
38:47 - lorem ipsum is just a standard text that
38:49 - is used often for a lot of websites so
38:52 - here yeah you can just click how many
38:54 - paragraphs you want and you can click
38:56 - generate and it's going to generate some
38:57 - text for you so lorem ipsum.io is the
39:00 - site that you want to go to
39:02 - and here you can just copy all of this
39:05 - code so this is just some text you can
39:07 - use any text but I'm just using a text
39:08 - generator which can generate any amount
39:10 - of text I want and now I'm going to put
39:12 - it in a P tag P stands for paragraph so
39:15 - whenever you want to put some paragraph
39:17 - of text you use the P tag and inside the
39:20 - P tag I have put in lorem ipsum and now
39:23 - we have jobin careers we have an image
39:25 - we have about Joven so it's shaping up
39:28 - well and now below about Jovian we want
39:31 - to have another section and now this
39:34 - should be called
39:35 - I believe job openings
39:38 - or open positions so let's use this one
39:40 - open position so let's just call this
39:43 - open
39:44 - positions
39:46 - and then here we are going to again show
39:49 - the jobs here so let's mark this as a
39:51 - to-do that's something that we'll
39:52 - Implement later and then finally at the
39:55 - very end of this we will have a button
39:57 - called contact us so again I'm using the
40:00 - button tag here so how do you know which
40:02 - tag is the appropriate one to use that's
40:05 - where you should probably work through
40:06 - an HTML tutorial so here on the HTML
40:09 - tutorial you can see what are all the
40:10 - different kind of things you can create
40:12 - using HTML and what the different tags
40:15 - are
40:16 - so go to HTML dog.com or go to
40:18 - w3schools.com but you've already learned
40:21 - some of the most common tags H1 IMG H1
40:24 - is header H2S header IMG is image p is
40:27 - paragraph button is just button so now
40:30 - we have Joven careers and then we have
40:32 - about Jovian and then we have open
40:34 - positions and then we have contact us so
40:37 - the structure of the site is there but
40:39 - of course it looks ugly it doesn't
40:41 - really look that great so so far we have
40:44 - seen how to render templates and use
40:46 - static assets so anything that you put
40:49 - inside a static folder is typically
40:50 - called an asset images Etc called assets
40:53 - then we have seen how to create the
40:55 - layout of the page using HTML tags and
40:58 - now we are going to start styling the
41:00 - page using something called CSS HTML
41:03 - stands for hypertext markup language it
41:05 - is simply the language used to create
41:07 - web pages and CSS stands for cascading
41:09 - style sheets it is used to provide some
41:12 - style to our HTML pages so let's start
41:15 - adding some CSS now
41:17 - how do you figure out what to do with
41:20 - CSS the best way is to do a quick CSS
41:22 - tutorial and you can work through the
41:24 - beginner tutorial it should take maybe
41:26 - an hour maybe a couple of hours but the
41:28 - way CSS works is using something called
41:31 - selectors so what we do is create
41:34 - something called a style tag in our head
41:37 - so in the head of the document we create
41:39 - a style tag and in the style tag we need
41:43 - to tell the browser how to apply a
41:47 - certain color or a certain font or a
41:49 - certain layout to a specific portion of
41:51 - the HTML page one way to do it is by
41:54 - simply specifying a tag you can say H1
41:56 - and now you can open curly brackets or
41:59 - braces so now we are telling the browser
42:02 - anytime you see an H1 which means you
42:04 - see this is an H1 it is highlighted here
42:06 - so anytime you see an H1 apply these
42:09 - styles to the H1 now we have made a
42:11 - selection using a tag and now we are
42:14 - going to apply some styles
42:15 - every style you apply has two parts one
42:19 - is what property you want to change so
42:21 - if I come back here one thing I might
42:23 - want to change is the font size this is
42:26 - probably not big enough so I can say
42:28 - font size so this is the property
42:31 - and then what value do you want to set
42:33 - this property to so you type the
42:35 - property which is typically a hyphenated
42:37 - word and you can look up the full list
42:39 - of properties here so you can go back
42:42 - into the HTML tutorial you can see what
42:44 - all properties are available to apply to
42:47 - fonts so you can say something called
42:48 - font family which is like which font to
42:50 - use font size which is how to set the
42:53 - size font weight you can make bold
42:55 - italics Etc font style Etc so which
42:58 - property you want to change font size
43:01 - and what do we want to change the font
43:03 - size to let me try 80 pixels any
43:06 - property that is the size of some form
43:08 - is specified using pixels which is how
43:10 - many dots on the screen it should take
43:11 - up so let me change that to 80 pixels
43:13 - and let's save that
43:16 - and now you can see that this has become
43:17 - way too big so maybe not 80 maybe I want
43:20 - to stick with 40 pixels
43:23 - then let's try to change the font family
43:25 - so the font family is simply which font
43:28 - you want to use so let me try a font
43:31 - called Roboto okay and you can look up
43:33 - interesting fonts online but I am going
43:36 - to try Roboto and let me change that I
43:39 - think this looks nicer this looks more
43:40 - modern so that's nice then I can change
43:43 - the font weight so right now I believe
43:45 - it is set to bold but if I change this
43:47 - to normal it'll become thinner
43:50 - you can see that it has become thinner
43:51 - in this way you can make a bunch of
43:54 - changes and this is going to apply to
43:55 - all H1 tags now in our page we only have
43:58 - one H1 tag but let's say if we had
44:00 - another H1 tag here
44:02 - maybe below the image
44:05 - foreign
44:07 - careers too it's going to apply there as
44:10 - well
44:10 - so these are some text related things
44:13 - then let's say I want to change the
44:14 - color so I can change the color as well
44:16 - so you type color and then here you have
44:18 - to specify a color using the RGB scale
44:21 - or the red green blue scale every color
44:23 - that you see on a screen is built using
44:26 - red green and blue colors so you can
44:28 - type RGB and then you can specify the
44:32 - amount of red the amount of green and
44:34 - the amount of blue to use so if I put 0
44:37 - 0 0
44:39 - then here we are simply using black but
44:42 - if I change this to maybe 100
44:45 - now you can see that it starts to get
44:47 - redder now the values go from 0 to 255
44:51 - so 255 is the highest zero is the lowest
44:54 - so now it's complete red the R value is
44:57 - 255 then let me try green so 255
45:01 - and now we have red and green and now it
45:03 - has become yellow because red and green
45:05 - together become yellow let me change
45:06 - that to 0 and now this is completely
45:08 - green you can see all these examples so
45:10 - if you have equal values for red green
45:12 - and blue then it's a shade of gray
45:13 - otherwise it is more mixed of a certain
45:15 - color than others a 0 is darker 255 is
45:19 - the brightest so I'm just going to pick
45:21 - a medium gray so I'm going to pick
45:23 - something like 180
45:25 - 180 and 180.
45:29 - that looks nice to go darker you have to
45:31 - go lower so let me make that hundred
45:33 - hundred hundred
45:37 - all right so now we have a nice gray
45:39 - title and we also want to Center the
45:41 - title so in the wireframe we drew we had
45:44 - the title in the center but here the
45:46 - title is somewhere in the corner so
45:48 - let's Center that and the simple way to
45:50 - center that is to use text align
45:53 - center now do you need to remember all
45:55 - this no you can always just go how to
45:58 - center align text in CSS
46:02 - and find the result directly text align
46:05 - Center and that is going to Center the
46:06 - text view so now our text is centered
46:09 - that's nice then we have this image here
46:13 - I want this image to run across the
46:16 - entire page so let me set it up in such
46:18 - a way that it runs across the entire
46:20 - page so I'm going to go to this image
46:22 - and this time I don't want every image
46:25 - to run across the entire page I just
46:27 - want this one particular image to run
46:29 - across the entire page to be completely
46:32 - white so I'm going to give it an ID
46:35 - okay so now we're looking at the second
46:36 - way to select something on the page and
46:39 - apply a style to it and I'm going to
46:41 - then type
46:43 - hash Banner so whenever you have given
46:45 - something an ID and you want to access
46:46 - it in CSS
46:48 - so you type the hash character or the
46:50 - pound character and then type the ID
46:52 - that you've given it and now this will
46:54 - only apply to the tag which has the ID
46:56 - Banner so ID is ideally something that
46:59 - should be unique on the page only one
47:01 - element on the page should have an ID
47:02 - otherwise your browser may get confused
47:05 - so now we select hash banner and that is
47:07 - going to select the image banner and for
47:09 - a moment I'm going to get rid of this
47:10 - height because I'm going to set it using
47:12 - CSS
47:13 - and now I am going to first set its
47:16 - width to 100 percent
47:18 - let's see that
47:21 - okay so the width is 100 but that's
47:24 - probably too big now so now I'm going to
47:28 - limit the height let me set the height
47:30 - to 360 pixels or 360 dots and I'm just
47:37 - following the same format here property
47:39 - colon and some number and anytime you
47:43 - have a doubt about this you just have to
47:44 - look up some reference and figure it out
47:47 - even after 15 plus years of web
47:49 - development I look these things up all
47:50 - the time
47:51 - so now we have height set to 360 pixels
47:54 - let's
47:55 - reload that so this is looking good but
47:58 - you can see that the picture is
47:59 - stretched a little bit and if this was
48:01 - some photograph then it would look
48:04 - really bad so then you can unstretch the
48:07 - picture so there are ways to unstretch
48:09 - the picture I'm just using something
48:10 - that I looked up earlier called object
48:12 - fit which is used to make sure that
48:15 - instead of stretching the picture we
48:16 - simply use the portion of the picture
48:18 - that can fit inside the content so now
48:21 - this was the original picture do
48:23 - something great you can see here that it
48:25 - was actually quite tall and now the same
48:27 - thing is showing up here
48:29 - so now this picture runs across the
48:31 - screen so that's nice now let's go in
48:34 - here and let's change the H2 as well so
48:36 - for the H2S
48:38 - I'm going to use the font Roboto again
48:40 - so font family
48:42 - Roboto
48:44 - then I'm going to use the font size
48:47 - Let's see we used 40 for H1 so let me
48:50 - use 32 for H2
48:54 - and then I am going to use the color
48:58 - maybe let's make this a little darker
48:59 - let's make this 50
49:02 - 50 and 50 and let's make this
49:09 - hundred hundred and hundred
49:12 - and finally I am also going to text
49:16 - align
49:19 - Center
49:21 - so my H2S you will see that there are
49:23 - two H2S on the page both of them are
49:25 - fixed and now I maybe also want to use
49:28 - Font weight normal even
49:30 - and that's nice now finally we have this
49:33 - paragraph tag so let me take this
49:34 - paragraph and let me style that as well
49:37 - again I'm just going to use Font family
49:39 - Roboto for now all over my page I like
49:42 - the Roboto font and I'm going to change
49:45 - the color to RGB 8080
49:53 - so now we have jobin careers do
49:55 - something great about Jovian open
49:56 - positions
49:57 - it's looking better looking better but
50:00 - of course not looking very professional
50:01 - I think one of the things here is that
50:03 - this text is becoming really hard to
50:05 - read because it is going from the left
50:06 - to right so what we may want to put is
50:08 - we may want to just limit the amount of
50:10 - content to somewhere in the center for
50:13 - example if you go to
50:15 - zero to pandas.com one of our courses
50:18 - you will see here that this is slightly
50:20 - more readable because the content is
50:22 - centered it is not expanding to take up
50:25 - the entire space now how do we do that
50:27 - the way to apply such layout related
50:30 - changes is using special tags called div
50:35 - so I'm going to take all of this and put
50:37 - this in a div tag
50:39 - I am going to put this in a div tag and
50:42 - I am going to then
50:45 - give that a little tap so that it's
50:46 - easier to see
50:48 - and now for this div tag I can give it
50:51 - an ID so let me give it an ID container
50:53 - and then let me select the container
50:55 - hash container
50:58 - and now I want to limit the width of
51:01 - this container and the way to limit
51:02 - width is using something called Max
51:04 - width again all you need to do is look
51:06 - up how to limit the width of a div and
51:09 - let me give it 720 pixels as the max
51:12 - width
51:14 - and let's see
51:16 - so now it is limited taking up less
51:18 - space on the screen but I do not want it
51:21 - to be on the left I want it to be
51:24 - centered now the way centering is
51:26 - achieved in CSS is by providing margins
51:29 - and this is where we may want to learn
51:32 - about something called the CSS Box model
51:34 - so if you just look for CSS Box model
51:38 - and look for an image
51:41 - this is basically how a div or any
51:45 - element in HTML is displayed on a page
51:47 - you have the content and then around the
51:50 - content you can specify something called
51:52 - padding some space and then outside the
51:55 - padding you can specify the border and
51:57 - then outside the Border you can specify
51:58 - more space called margin now don't worry
52:01 - if these terms don't make sense yet but
52:03 - the basic idea is anything inside the
52:05 - border is the content and outside the
52:08 - border is the margin so all of these are
52:10 - just different ways of providing space
52:12 - so let's talk about margins and let us
52:16 - try margin left
52:18 - and let us give it a margin of 80 pixels
52:22 - let's see what happens
52:24 - so if we give it a margin of 80 pixels
52:26 - and I reload the page you can see that
52:28 - now there is 80 pixels of space on the
52:30 - left
52:31 - still not centered maybe let me try
52:36 - 200 pixels maybe that will Center it
52:40 - okay looks like it's getting to the
52:42 - center but not quite so I may experiment
52:44 - and I may shift it left and right and
52:46 - find the center but what if the screen
52:49 - size changes now suddenly it's off to
52:51 - the left so this is where
52:53 - we can use a trick instead of specifying
52:56 - margin left we can specify just margin
52:58 - and margin takes four arguments so
53:01 - margin can take four values where for
53:04 - the box that you want to apply this
53:05 - margin to you can specify how much
53:08 - margin you want on the top how much
53:10 - space you want on the right how much
53:11 - space you want on the bottom and on the
53:12 - left so in my case I don't need any
53:15 - space on the top so I'm just going to
53:17 - put 0 here
53:18 - maybe I want 80 pixels on the left and
53:21 - then I don't want any space on the
53:22 - bottom and then maybe I want 80 pixels
53:24 - on the right
53:25 - but ET on the left 80 on the right that
53:28 - may not do the job how exactly do you
53:30 - decide what 80 pixels is once it picks
53:33 - 80 pixels on the left there's so much
53:35 - gap on the right that 80 is not going to
53:37 - do it so here's something that you can
53:40 - do in CSS something that you will do
53:42 - very often is make the left and right
53:45 - margin Auto
53:47 - then the browser decides that it has to
53:50 - give an automatic margin on both left
53:52 - and right and suddenly it gives you an
53:54 - equal margin
53:55 - so whenever you want to Center something
53:58 - on the page just use margin 0 Auto 0
54:01 - Auto
54:01 - or you can also just say zero or two and
54:04 - it will take this value and apply to the
54:06 - top and bottom and it will take this
54:08 - value and apply to the left and right so
54:10 - margin 0 Auto is a quick way to Center
54:13 - something on a page
54:15 - so this is definitely looking better
54:19 - there is a contact us here at the bottom
54:21 - let's Center that as well so here's what
54:24 - I'm going to do I am going to just put
54:26 - another div around this
54:28 - and
54:30 - what you need to do is you actually need
54:32 - to apply text line Center on this
54:34 - container and that is going to Center
54:35 - the button here now just for this
54:38 - creating an entire style declaration may
54:40 - become too much work so what I'm going
54:42 - to do is I'm going to apply the style
54:44 - inline so this is another way of
54:46 - applying CSS where you can apply Styles
54:49 - inline on a page so I'm just going to
54:51 - set style equals and I'm going to set
54:53 - text align
54:55 - Center and whenever you have just one or
54:58 - two small properties to put you can
55:00 - always just do that and now that has
55:01 - centered the button on the page one way
55:03 - of applying CSS is in the style tag in
55:06 - the head and then in the style tag you
55:08 - can select by
55:10 - tag you can select by ID
55:13 - and one other way of applying CSS is by
55:16 - directly specifying a style and then the
55:19 - property colon the value within the tag
55:22 - itself as an attribute using the style
55:24 - attribute
55:25 - now I want to show you one last way of
55:28 - specifying Styles which is not using
55:31 - tags and not using IDs which is using
55:34 - something called class now here we have
55:36 - a bunch of paragraphs right we have this
55:38 - paragraph here and then we have this
55:40 - paragraph here and because we have
55:41 - styled the P tag both of these
55:43 - paragraphs got affected by the P tag but
55:46 - let's say we also had another paragraph
55:48 - somewhere here at the bottom
55:50 - saying
55:52 - copyright
55:54 - 2022
55:56 - Jovian
55:58 - and we did not want to apply the same
56:00 - style to this bottom tag as well maybe
56:02 - we want the copyright 2022 Joven to be
56:04 - small not big like this and maybe we
56:06 - also don't want it to be in the Roboto
56:08 - font so how do we do that this p is
56:11 - going to apply to all the paragraph tags
56:13 - so here is what we can do we can go into
56:16 - the paragraph tag and we can say class
56:19 - and we can now give it a name
56:21 - let's call this class body text you can
56:25 - call it anything you want the class name
56:27 - doesn't matter
56:28 - and let's call this also body text and
56:31 - let's not give this class to this third
56:33 - P tag okay and now instead of styling
56:36 - the P tag let us style the body text
56:40 - class so now we want to say dot body
56:42 - text and what this will do is any
56:45 - element whether it's a p a div whatever
56:48 - any element that has the class body text
56:51 - specified like this class body text is
56:54 - going to get these Styles and any
56:56 - element that does not have the class
56:57 - body text is not going to get these
56:59 - Styles so now if you see here this got
57:01 - applied body text this got body text
57:04 - but this did not get the styles that we
57:06 - applied using the class
57:08 - so that is the third way to apply CSS
57:10 - Styles okay so now we have one way which
57:13 - is to specify a tag name and then
57:15 - specify properties and values then we
57:18 - have another way which is to use an ID
57:19 - and then we have Third Way which is to
57:21 - use it class and the ID is specified
57:23 - using hash the class is specified using
57:26 - dot now remember ID ideally there should
57:28 - only be one element with a particular ID
57:30 - on the page because that's what browsers
57:33 - expect ID is identifier it is unique
57:35 - class can be applied to many elements
57:37 - that's the difference between ID and
57:38 - class
57:39 - and another way to apply CSS is directly
57:43 - using the style tag so with that now we
57:46 - have done some basic styling so that's
57:48 - fine we have now styled the page using
57:50 - CSS classes properties and values
57:54 - now one thing I want to show you is how
57:56 - to use a framework for faster
57:58 - development instead of having to type
58:00 - all the CSS manually for every website
58:03 - that you build you can use pre-existing
58:06 - set of styles that have been created by
58:08 - some good designers because you may not
58:10 - have great design skills I certainly
58:12 - don't as you can see
58:13 - so you can use pre-designed Styles and
58:16 - you can simply apply those styles to
58:18 - your page by specifying classes so
58:21 - here's what I mean let me first save
58:23 - this
58:24 - so let me say added
58:26 - HTML and CSS
58:30 - okay and let me come back here and let
58:32 - me get rid of all these styles
58:37 - okay and I'm also going to remove this
58:39 - one piece of style that I have here
58:44 - and I'm going to
58:46 - maybe also remove this body text for now
58:49 - I'm just gonna make it
58:51 - really basic just the HTML let's get rid
58:55 - of this as well
58:57 - and now let me go online and search for
59:01 - this Library called bootstrap
59:04 - bootstrap CSS
59:08 - so get bootstrap.com is the website
59:11 - and on getbootstrap.com you will find
59:14 - this Library the CSS framework which can
59:18 - be used to apply Styles easily to any
59:21 - website that you're building so let's
59:23 - click read the docs and let's see how to
59:25 - get started
59:27 - so first it says that you need to create
59:29 - a project you need to have an HTML file
59:31 - I think we have an HTML file already we
59:33 - have the file home.html that we are
59:34 - already working with and
59:37 - here it says that you need to add these
59:39 - couple of extra tags this is just some
59:41 - information so that bootstrap works
59:43 - properly we're not using bootstrap yet
59:45 - so let me copy these two meta tags and
59:48 - pop these into the head
59:49 - all right nothing has changed no change
59:51 - so far as such
59:55 - then it says include bootstrap CSS and
59:58 - JS so here it says that we want to copy
60:01 - this link tag here
60:06 - and put it in the head
60:09 - so for now I'm not going to include the
60:10 - JS or the JavaScript because we're not
60:12 - doing any interactive work right now but
60:14 - I'm going to copy the CSS so here
60:17 - all we need to do is come and paste this
60:20 - link tag
60:21 - and this link tag is simply a way to add
60:25 - a link to some other resource on the
60:27 - internet inside your HTML page and what
60:30 - are we linking to we are linking to the
60:32 - CSS file and you can actually open up
60:33 - the CSS file and see what it contains
60:35 - you can see that it contains a whole
60:37 - bunch of pre-configured styles for us so
60:40 - if I zoom in here you can see it
60:41 - contains like box Shadow Focus font
60:45 - weight etc etc so we don't need to worry
60:48 - about what it contains but it contains a
60:50 - set of pre-existing Styles and as soon
60:52 - as we add this link tag and Save
60:56 - all these pre-existing Styles get
60:58 - applied to our page immediately so if I
61:00 - reload here you can see that I already
61:03 - automatically got some really nice
61:05 - styles
61:06 - now they still need some work but this
61:09 - is looking pretty good
61:10 - and now if you go here and check the
61:13 - left side you're going to find a lot of
61:15 - utility classes the folks who built
61:18 - bootstrap have already implemented a lot
61:20 - of styles a lot of CSS and to apply
61:23 - those Styles all we need to do is add
61:26 - the appropriate classes into our HTML so
61:29 - here's what I mean let me show you an
61:31 - example let me go into containers and it
61:33 - says containers are a fundamental
61:35 - building block of bootstrap they contain
61:37 - and align your content within a given
61:39 - device or viewport okay all that is nice
61:41 - and here it says that there is a class
61:44 - container so dot always means class
61:46 - right so there is a class container
61:48 - which sets a maximum width with proper
61:51 - break points so let's not worry about
61:53 - all that let's just do this let us copy
61:55 - this class name container and let us
61:57 - come to the outermost div here and let
61:59 - us type class equals
62:02 - container okay all I'm doing here is
62:04 - just giving my outer div a class called
62:06 - container and what has that done that is
62:10 - now ensured
62:11 - if I reload the page here
62:13 - you're going to see that that is now
62:15 - centered my content on the page okay the
62:17 - image is causing a problem so let me
62:18 - just get rid of the image for a second
62:22 - this is now centered my content on the
62:25 - page you can see that automatically left
62:27 - and right margins get added for the page
62:29 - so that's great and you can see that the
62:31 - fonts have also changed fonts are also
62:32 - looking nice text is looking nicer more
62:34 - modern so that's all nice the image was
62:37 - causing a problem so let me add back
62:38 - that image and let me see what I can do
62:40 - about images let's see here images so
62:45 - images are made responsive by adding the
62:47 - IMG fluid class so what if I just do
62:49 - this if I just take this and give my
62:52 - image a class
62:57 - IMG fluid
63:01 - okay and now this image is rendering
63:04 - nicely now of course I may still want to
63:06 - do some more styling on my own so under
63:09 - the link tag I can still open up a style
63:10 - tag
63:12 - and let me give this image the ID Banner
63:14 - so it already has the ID Banner
63:17 - so let me now still limit its height to
63:21 - 360 pixels let me set its object fit
63:25 - cover I may also want to send the width
63:28 - so width
63:30 - 100 percent
63:33 - yep the image is looking nice now I want
63:35 - to Center this now how do we Center it
63:37 - now let's see here if I go back here and
63:40 - maybe search for I can always do this
63:42 - command K and let me just search Center
63:45 - and let's see text Center
63:49 - or Center text
63:52 - yep so looks like there is some text
63:55 - alignment classes so if you want to
63:57 - Center some text all we need to do is
63:58 - provide the class text Center so if I
64:01 - come back here and I just want to Center
64:02 - this heading so I say class
64:06 - text Center
64:09 - and now that is Centered for us and
64:11 - similarly for the
64:13 - H2 as well I'm going to provide the
64:15 - class text Center that's going to Center
64:17 - that
64:19 - and let's provide text Center
64:25 - and that's going to Center that
64:28 - it's looking nice I think one thing that
64:30 - I also want to do is maybe make this
64:32 - text a little bigger so let's see
64:34 - let's go up here I think there is
64:36 - another section on typography somewhere
64:39 - we have content typography and here we
64:42 - have headings and here we have
64:46 - lead this this looks interesting I like
64:48 - this so there seems to be a class called
64:50 - lead that I can add to a paragraph
64:52 - so I'm going to come into this paragraph
64:54 - and I'm going to add the class
64:57 - lead and that looks nice
65:02 - you can see that this has become bigger
65:04 - this is nice I may want to add some
65:06 - spacing above this some margins so I can
65:09 - again come in here and maybe press
65:11 - command K margin margin and padding
65:14 - so looks like there are these classes M1
65:16 - M2 P1 P2 that can be used for applying
65:19 - margins so Mt is used for applying a top
65:22 - margin I can use a class number zero one
65:24 - two three four or something like that 0
65:27 - 1 2 3 4 5 to apply some margins so I can
65:30 - go in here into this H1 and I can say
65:33 - class text Center and then give a space
65:35 - and empty for margin top and give
65:38 - spacing above
65:40 - you see there is some space above and
65:42 - similarly MB for margin bottom and give
65:45 - some space below
65:48 - maybe make that mb4
65:53 - that's nice and I'm going to do the same
65:55 - thing here Mt margin top two so we are
65:58 - applying a class mt2 to this H2 and
66:01 - inside the bootstrap.css file there is a
66:04 - rule that says whenever you see the
66:05 - class mt2 apply a margin to the top and
66:08 - M before apply margin to the bottom this
66:11 - is the H2 let me apply it for this H2 as
66:13 - well
66:18 - all right this is already looking much
66:20 - better let's fix the button as well so
66:22 - button
66:25 - looks like there are these nice button
66:27 - classes here let me see if I can find a
66:29 - nice large button okay I want to make my
66:31 - contact button look like this so I'm
66:32 - just going to copy this button button
66:34 - primary button large
66:36 - and let me just put that class
66:41 - on the contact button
66:44 - and now the contact button is quite
66:46 - large and I can now put the class text
66:49 - Center here
66:56 - and that's nice now the copyright well
66:59 - maybe we want to add some spacing about
67:00 - the copyrights I'm going to type mt4
67:04 - and that's going to just give some space
67:06 - above the copyright
67:08 - all right so this is looking relatively
67:10 - much nicer we haven't added the jobs
67:12 - here but that's a quick introduction to
67:15 - HTML CSS and how to use an external
67:18 - framework like bootstrap for faster
67:21 - development
67:22 - now again you don't need to remember any
67:25 - of this all you need to do is go to
67:27 - bootstrap look in the sidebar for what
67:30 - you want to do and then simply look at
67:33 - an example and copy over the styles from
67:36 - that example that's a very quick way to
67:38 - build very powerful websites bootstrap
67:40 - also a support for sidebars it also
67:42 - supports for nav bars and all so what
67:44 - we've done so far is we set up a flask
67:46 - project we created a project on GitHub
67:48 - we opened it up on replit all different
67:51 - tools but they're just there to make our
67:53 - work easier we then created and ran a
67:55 - flask server then we saw how to push
67:59 - changes back to GitHub then we created a
68:01 - template so remember we put it inside
68:03 - the templates folder and then we
68:06 - rendered the template in the app using
68:08 - render template
68:09 - then we styled the page using CSS
68:12 - classes
68:14 - and then we used bootstrap to make our
68:17 - development faster so that we don't have
68:19 - to write a lot of CSS we don't have to
68:21 - become designers the bootstrap team can
68:23 - take care of that for us
68:25 - now let's talk about how to show Dynamic
68:28 - data on a web page
68:32 - it may not be a good idea to just list
68:34 - all the jobs directly in the HTML file
68:38 - because every time we want to add a new
68:40 - job we'll have to go into the HTML file
68:41 - and change something and every time we
68:43 - have to remove a job we'll have to go
68:45 - into the HTML file and change something
68:46 - and making changes directly inside an
68:48 - HTML file can be tricky often what is
68:51 - done is the data is stored somewhere
68:53 - else in a database where administrators
68:56 - can directly just create jobs within
68:58 - that database and then information is
69:00 - fetched from a database and entered into
69:03 - an HTML file and then displayed on the
69:06 - screen and sent to the browser so
69:09 - we are not going to connect to a
69:11 - database just yet but we are going to
69:13 - simulate something similar so I'm going
69:15 - to create a python list called jobs
69:18 - inside which I'm going to store the
69:20 - information about the jobs that I want
69:22 - to keep track of and I'm going to give
69:24 - each job an ID so I'm going to give this
69:26 - job an id1 and let's give the title of
69:29 - this job data analyst
69:33 - and let's set the location of this job
69:38 - to
69:40 - Bengaluru India
69:44 - and then let's set the salary as well
69:47 - let's set that to maybe rupees 10 lakhs
69:50 - and let's create a few more of these so
69:53 - let me copy this over
69:55 - let me add a data scientist role here
70:00 - and let's change this to Delhi
70:06 - that was 10 lakhs and that is 15 lakhs
70:09 - and then let's add another job maybe
70:12 - let's change the ID here as well
70:14 - so this is the kind of information that
70:15 - you would typically get out of a
70:17 - database but for now we're just storing
70:18 - it in a variable so let's maybe put this
70:21 - and call this front-end engineer
70:26 - and let's make that remote
70:29 - and let's make that 12 and let's put in
70:35 - backend engineer
70:40 - and let's put in here
70:43 - San Francisco USA
70:46 - and that will be in dollars so let's
70:49 - just change that to Dollar 120
70:53 - 000.
70:55 - so now we have information about the
70:56 - jobs now we somehow want to send this
70:59 - information into the home.html template
71:03 - and the way to do it is by providing
71:06 - arguments into render templates so let's
71:08 - provide an argument called jobs and you
71:09 - can call these arguments anything you
71:11 - want so let's provide this jobs argument
71:14 - and into this jobs argument let us pass
71:16 - the value of this list of dictionaries
71:20 - so now I can go in here in home.html and
71:23 - now here we have this place where we
71:25 - want to show the jobs
71:27 - I can come back here and here now I can
71:30 - use some special syntax now this is not
71:32 - HTML this is not CSS this is something
71:35 - that flask has provided it is called a
71:38 - templating syntax it is a way to insert
71:41 - Dynamic data into your HTML into your
71:44 - CSS so I'm going to use these curly
71:46 - brackets and here I'm going to put jobs
71:48 - bracket bracket jobs
71:52 - so you see what happened
71:54 - whatever was there inside the jobs
71:58 - list which was passed as the argument
72:00 - jobs
72:01 - is now accessible inside home.html using
72:06 - these double curly brackets we've passed
72:08 - the list and that list got converted
72:10 - into a string and then all of that is
72:12 - going to be showing here but instead if
72:14 - you wanted to pass something else let's
72:15 - say if I go back here and I pass
72:19 - company name maybe this site supports
72:21 - multiple companies so company name
72:23 - equals Jovian
72:25 - and now instead of
72:28 - me rendering Jovian careers first let me
72:32 - just render careers
72:34 - so it just renders careers but now
72:38 - oops not here this is the page title we
72:41 - want to get the yeah here instead of
72:44 - rendering Jovian couriers in the H1 let
72:47 - me first just render careers
72:49 - and now let me add a template tag and
72:52 - let me get company name
72:55 - so remember I'm passing something called
72:56 - company name in app.pi here so now I can
73:00 - access company name by using these
73:02 - double curly brackets and now it is
73:03 - showing Jovian careers so this is the
73:06 - way you pass Dynamic information into
73:08 - the HTML templates and that is why these
73:10 - are called templates these are not going
73:12 - to always be shown the same way because
73:13 - then we'd have to create a whole bunch
73:15 - of files for every page that we want to
73:17 - show these are going to be filled in
73:19 - with a certain information using these
73:21 - tags
73:22 - so that's how tags work now the trouble
73:24 - is we don't want to show information
73:26 - like this if we look back at our
73:28 - excalator wireframe we want to show
73:31 - information like this this is much nicer
73:33 - how do we do that well template support
73:36 - some special syntax as well we can
73:39 - actually use a for Loop inside template
73:41 - so we can say for
73:43 - job in jobs so we want to get each job
73:48 - out of the jobs list remember jobs is a
73:50 - list jobs is a list containing many
73:52 - dictionaries or objects so for job in
73:57 - jobs and then we end the for by writing
74:00 - and for so everything else is going to
74:02 - be inside
74:03 - and by the way this is just a good
74:04 - practice whenever you open a tag it's
74:06 - always a good idea to First close it and
74:08 - then move your cursor back inside so
74:10 - that you can keep track otherwise you
74:12 - forget things so for job and job so now
74:15 - job is going to contain each individual
74:18 - job and let me just for nuance render
74:20 - Insider div
74:22 - let me render
74:25 - and let me change this also to a div
74:26 - this is not exactly a paragraph so to
74:29 - speak so let me just render job now job
74:31 - is a dictionary python dictionary and
74:33 - from the job let me get what information
74:36 - can I get let me just render job title
74:38 - okay so job title
74:42 - let's see now
74:44 - all right so now we've introduced a for
74:46 - Loop using this special syntax and now
74:49 - inside the for Loop we have access to
74:51 - the job variable which in each Loop
74:53 - takes the value of the specific job and
74:56 - then we have this title that we are
74:58 - extracting out of the job variable so
75:00 - that's nice now let's style it a little
75:02 - bit let's make it look like this so let
75:05 - me have this div here like I already
75:08 - have and let me make this an H4
75:14 - and then below it let me render the
75:18 - information about
75:20 - the job location
75:26 - and let me just type the word location
75:28 - here to make it super clear that I'm
75:30 - talking about location
75:32 - okay location Bengaluru India looking
75:35 - good let me make this bold so one quick
75:38 - way to make things bold in HTML is using
75:40 - the B tag again something you can very
75:43 - easily look up how to make text bold in
75:46 - HTML
75:49 - great looks nice I'm just going to set
75:53 - style equals
75:56 - color RGB
75:58 - and 120 120 120
76:02 - to give it a nice gray color
76:06 - we may need some spacing right now the
76:08 - spacing is a little messed up so I'm
76:09 - going to go back into this H4 tag and
76:14 - I am going to just give it margin bottom
76:18 - 4px let's just see
76:23 - and I am going to go into this div tag
76:25 - and I'm going to give it
76:27 - margin bottom
76:30 - 16px
76:33 - I could also use bootstrap classes here
76:35 - but this was just easier to do I've got
76:38 - the location in here now let me put in
76:42 - let's put in maybe the salary as well so
76:45 - let's put salary
76:48 - jobs salary
76:49 - foreign
76:51 - and there you go now we have the salary
76:54 - as well
76:55 - what if salary is not mentioned for a
76:57 - certain role what happens then so let's
76:59 - say this one does not have a salary the
77:01 - front-end engineer role
77:04 - so looks like it rendered empty so how
77:07 - about we go back here and handle that
77:09 - just like you have four you can also use
77:12 - if so I'm going to put an if tag here so
77:14 - percent
77:16 - if
77:17 - percent
77:18 - salary if the key salary
77:22 - is present in the dictionary job
77:25 - then render this div otherwise don't
77:27 - render it
77:29 - and then we have to do an end if
77:34 - so now you can see here front end
77:36 - engineer just says location remote now
77:38 - one thing you might want to do is this
77:40 - same job information you may want to
77:42 - render on other Pages as well so what we
77:45 - can do is we can take this layout
77:47 - everything inside the four and I can
77:49 - create a new layout let me call this
77:54 - job item dot HTML and I'll just put this
77:58 - here
77:59 - and let me just adjust the
78:03 - indentation indentation is very
78:05 - important to understand the structure of
78:06 - the code and now let's come back to home
78:08 - and now inside the for instead of having
78:12 - all that HTML I can just use
78:15 - include
78:17 - job item dot HTML
78:22 - so this is a nice way to organize the
78:25 - information so you can see here that
78:26 - inside home.html if I don't have this
78:28 - include
78:29 - the jobs will not be rendered
78:32 - no open positions but once I include
78:34 - what we are telling flask is
78:37 - inside the for Loop each time with the
78:40 - different value of job include the
78:42 - template job item.html and pass the
78:44 - variables that are available in this
78:46 - template to that template
78:48 - now you can structure your templates you
78:51 - can extract reusable components out of
78:53 - your templates and render
78:57 - a nice layout one other thing we want to
79:00 - see here is
79:02 - this apply button and then this bottom
79:04 - border so let's add those as well adding
79:07 - the bottom border is going to be easy
79:08 - I'm just going to try looking at
79:10 - bootstrap here borders
79:12 - so let's see if you want to add a border
79:14 - at the bottom we just say class border
79:16 - bottom
79:17 - so if I go here and inside job item.html
79:21 - I can now pass in
79:25 - class
79:27 - border bottom and let's see what that
79:30 - does
79:31 - okay so now you can see that under the
79:33 - job there is a border I may want some
79:36 - spacing so remember the Box model if you
79:40 - want some spacing outside the Border you
79:42 - use something called margin and if you
79:44 - want some spacing inside the Border you
79:46 - use something called padding it's just
79:48 - different terms don't get too confused
79:50 - about it something that you can look up
79:52 - but I'm going to just put a padding
79:54 - bottom because I want some space inside
79:56 - the border and I'm going to set the
79:58 - padding bottom to 4px
80:00 - and let's see what that does
80:02 - oh sorry not here I should have it in
80:05 - the div
80:09 - all right so you can see that some space
80:11 - has come up here let me change that to
80:13 - 8px and see maybe that looks nicer 8px
80:16 - that looks nicer so let's reload the
80:18 - page and let's see what we have here so
80:21 - now we have data analyst and now we have
80:23 - data scientist now we have front-end
80:25 - engineer and back-end engineer and we
80:26 - have a separation as well
80:28 - one last thing we just need that apply
80:30 - button over here let's try to add a
80:33 - button first let me go into command K
80:35 - button
80:36 - and let's see this is too bright so I
80:40 - want to use maybe something like this
80:42 - and this looks like just
80:44 - this so I can just copy this over come
80:47 - in here and let me add that button here
80:50 - let me call it apply
80:54 - Now by default HTML renders information
80:58 - top to bottom so you can see that the
81:00 - button came up at the bottom here
81:02 - but what we want to do ideally is we
81:04 - want to create two columns inside each
81:06 - job listing so one column is going to be
81:09 - the information about the job and one
81:11 - column is going to be the apply button
81:13 - and that's where you can create columns
81:16 - in bootstrap so let's see
81:18 - how to create columns so we want to
81:21 - create something like this we want to
81:22 - create two columns and maybe we want to
81:24 - create like one big column and one small
81:27 - column and the way you create columns is
81:30 - using the call class so looks like I can
81:33 - use call 9 to create a very wide column
81:35 - and then maybe I can use like call 3 or
81:37 - something to create a small column let
81:39 - me just try that so let me just put
81:42 - all of this
81:44 - inside a div everything except the
81:47 - button I'm going to put inside a div
81:51 - so the H4
81:53 - then the div location and then the
81:56 - salary all of this is inside a div and
81:58 - I'm going to say class equals call
82:03 - 9 so this is going to take up nine
82:06 - spaces out of 12. so bootstrap has
82:08 - something called a 12 column layout so
82:09 - the entire space left to right is
82:12 - divided into 12 columns and you can
82:14 - specify for each div how many columns
82:16 - you wanted to take
82:18 - and here let me call this
82:22 - class
82:25 - call three
82:27 - nine columns I'm assigning to the
82:30 - information and then three columns I'm
82:31 - assigning to the button and we'll play
82:33 - with that let's see what that does
82:37 - okay it still doesn't do anything I
82:38 - think the columns have to be inside a
82:40 - row so we need a div with the class row
82:43 - so let me just give this the class Row
82:46 - the outer div
82:49 - and suddenly now it's looking much nicer
82:52 - so now we have data analyst location
82:53 - Bengaluru
82:55 - I've just copied over some information
82:56 - from here how to create columns so first
82:59 - we create a row and then we create two
83:01 - columns within that row so if we first
83:03 - we create a row and then we create two
83:05 - columns within that Row one column has
83:07 - the width nine and one column has a
83:08 - width three and you can also play with
83:10 - this you can maybe make this width 2 and
83:13 - you can make this width 10 but if you go
83:15 - beyond 12 it is just going to again
83:17 - break into the next line
83:18 - but this looks nice so now we have
83:22 - this nice data analyst and then we have
83:25 - apply and everything
83:26 - and I think it'll be nice to get the
83:28 - apply maybe on the right instead of on
83:31 - the left and also maybe vertically
83:34 - centered but as of now it looks fine it
83:37 - doesn't look bad so now we have some
83:39 - Dynamic data that we have rendered so we
83:41 - have taken information that was stored
83:44 - inside this list
83:47 - we have passed it into the render
83:49 - template as a variable and of course
83:51 - we've also passed this other
83:54 - variable company name
83:56 - and then inside the home template we are
83:59 - using a for Loop where we are getting
84:01 - values out of the jobs variable into job
84:03 - and then we are passing it into this
84:06 - other template called job item.html
84:08 - where we are actually using information
84:10 - from inside the job item and here we are
84:13 - also using an if it's a lot going on
84:16 - here but it's all just things that you
84:18 - can do step by step and then just look
84:21 - at the appropriate documentation or just
84:23 - search online to figure out how 90
84:25 - percent of web development is probably
84:26 - just looking things up online nobody
84:28 - remembers all this from scratch
84:31 - so that's done
84:33 - so that's one way to return Dynamic data
84:36 - one other way that some websites allow
84:39 - you to access some Dynamic data is using
84:41 - an API instead of returning HTML we can
84:45 - also return some Json Json is simply
84:47 - JavaScript objects so let me create
84:50 - another function called list Jobs first
84:53 - I'm going to register this at the route
84:56 - slash jobs and I'm going to take the
84:59 - jobs information I'm going to convert it
85:01 - into a Json string so for that there is
85:04 - this helper function called jsonify all
85:07 - it does is it takes any object and
85:09 - converts it into a Json object so
85:11 - jsonify and give it jobs
85:15 - and now we have a second route so now we
85:17 - have a second URL that we have added in
85:19 - our server so now if I go back here and
85:22 - I open this in a new tab and then open
85:25 - slash jobs if you see I've added slash
85:27 - jobs at the end you can see that now
85:29 - I've sent this information as Json
85:33 - when people say rest API or Json API or
85:36 - API endpoint this is what they mean that
85:39 - your web server is returning some
85:41 - information not just as HTML this is the
85:44 - HTML version of that information but the
85:46 - same information is also accessible in
85:49 - the form of Json in the form where it's
85:51 - just the data and then you can do
85:52 - whatever you want with the data so I'll
85:55 - tell you quick secret now you can go to
85:57 - job AI slash akashians for example and
85:59 - you can get this page containing all of
86:01 - my information or you can go to jobin.ai
86:04 - API
86:06 - slash user slash Akash NS
86:09 - and you can get the same information in
86:11 - Json format so if you want to view
86:14 - information about me you can look at the
86:17 - Jovian page or if you want to just
86:20 - programmatically extract the information
86:21 - about me maybe you want to
86:23 - programmatically extract information
86:24 - about thousand users and you have their
86:26 - usernames then you can simply invoke
86:28 - this Json endpoint or this Json route
86:31 - and get all that data as Json and maybe
86:34 - create a CSV out of it and analyze it so
86:36 - the only difference between creating an
86:38 - HTML endpoint and between creating a
86:40 - Json endpoint is that instead of
86:43 - rendering a template you're just using
86:45 - jsonify and often just to differentiate
86:48 - between HTML pages and non-html Pages we
86:51 - often tend to put this API name in front
86:54 - of it API stands for application
86:56 - programming interface
86:57 - but what it really means is just a URL
87:00 - which does not return HTML to be shown
87:03 - on the browser but it returns some
87:05 - structured data in the form of Json
87:07 - which can then be programmatically
87:09 - analyzed so now we've created our first
87:11 - API route we've created our HTML Rod
87:14 - we've created our API route and this
87:16 - information right now is stored in a
87:18 - variable but it could very well be
87:19 - coming from a database okay now enough
87:23 - building I think this website is looking
87:25 - reasonable so let's now deploy this
87:28 - website to the cloud
87:30 - it is already deployed in some sense it
87:32 - is on replit but as I mentioned in the
87:34 - beginning replied is better suited for
87:35 - development your Rebel can shut down
87:37 - anytime because it's free resources and
87:40 - it doesn't really handle large workloads
87:43 - because it's doing a lot of things to
87:45 - help you develop more easily so now when
87:47 - you want to put it into production you
87:49 - will have to figure out some Cloud
87:51 - platform where you're going to deploy
87:52 - this one Cloud platform that makes it
87:55 - really easy to deploy python
87:57 - applications is called render.com there
88:00 - are other Cloud platforms like Amazon
88:01 - web services and Heroku and Google cloud
88:04 - and Azure but render is really easy to
88:07 - work with so that's why I want to show
88:08 - you how to work with render.com
88:10 - so first I'm going to take my app.pi and
88:15 - I am going to then go into Version
88:16 - Control
88:17 - and I'm going to say
88:19 - added Dynamic data
88:22 - and API route
88:24 - and then I'm going to commit and push
88:28 - and now this information is sent back to
88:30 - GitHub so now I'm no longer concerned
88:32 - with replit now all my information has
88:34 - gone into GitHub
88:35 - so now jobin careers website if I open
88:38 - up app.pi seems to contain all the
88:41 - information that I have put in so far
88:43 - now I want to take this GitHub project
88:46 - and deploy it on render.com
88:49 - and the way I'm going to do it is go to
88:50 - render.com and create an account and
88:53 - it's free to get started there's a free
88:55 - plan that you can use so create an
88:57 - account
88:59 - and once you've created an account you
89:01 - will see this dashboard and on this
89:03 - dashboard you can click new and we want
89:05 - to create what's called a web service
89:07 - which means we are not just sending some
89:10 - HTML normally we're maybe also
89:12 - connecting to a database and getting
89:14 - some Dynamic data Maybe we also have
89:16 - some API routes and things like that so
89:18 - we want to create a web service a static
89:20 - site is just a set of HTML pages that
89:22 - you want to deploy no flask nothing but
89:24 - if you want to create a web service and
89:26 - here we need to allow render.com to pull
89:29 - your code so that's where we can click
89:32 - connect account and on clicking connect
89:34 - account once again we are asked which
89:36 - organization or which account we want to
89:38 - use so I want to do it on my personal
89:40 - account and I want to give it access to
89:43 - only the German careers website and I'm
89:46 - going to just click install
89:48 - and this will ask me for my password
89:53 - and now you can see this repository is
89:55 - connected
89:56 - so now let me click connect
89:59 - now when we click connect we have to
90:01 - just configure this deployment okay now
90:03 - we are going to take the code that is
90:05 - there on GitHub and we're going to
90:06 - deploy it on the cloud using render so
90:09 - we need to configure it first thing here
90:11 - I am going to give this a name let me
90:13 - just call it Jovian careers website this
90:16 - is a name for internal reference then
90:19 - environment is Python 3 that's fine
90:21 - region is Oregon it doesn't matter it's
90:24 - basically where in the world the server
90:25 - is going to be located branch is main
90:28 - that is the main branch on GitHub where
90:31 - we are developing
90:33 - and then it requires a build command so
90:36 - remember we installed flask at the
90:38 - beginning
90:39 - render.com doesn't know that it needs to
90:41 - install flask so what we need to do for
90:44 - render.com is to create a special file
90:46 - called requirements.txt
90:49 - and it's not that render requires this
90:52 - file it is a standard in the python
90:54 - ecosystem that anytime you have a python
90:56 - project and you want to specify that it
90:59 - requires certain libraries the project
91:01 - requires certain libraries it's a
91:03 - convention to put that information
91:04 - inside a requirements.txt file so I'm
91:07 - going to add a requirement here called
91:09 - flask
91:10 - so that's the one library that needs to
91:12 - be installed on the server and second I
91:15 - am also going to add another Library
91:17 - called G unicorn so gu and i c o r n you
91:22 - can look it up G unicorn
91:24 - so what GE unicorn does is this is a
91:27 - production server for python remember
91:31 - flask when we ran it it said that it is
91:33 - a development server don't use this for
91:35 - production so whenever you want to put a
91:37 - flask application into production you
91:39 - need to use the G unicorn Library it's
91:42 - very simple to use it's the exact same
91:44 - command every single time so we have put
91:47 - in requirements or txt flask and G
91:49 - unicorn and let me just commit that so
91:51 - let's say I
91:54 - added requirements
91:58 - Dot txt and I'm going to commit and push
92:02 - and now this is sent to my GitHub
92:05 - repository I can verify that there is a
92:07 - requirements.txt file here which
92:09 - contains flask NG unicorn so now when
92:13 - render pulls the code it is going to
92:16 - receive the requirements.txt file and
92:18 - then here it is going to run this build
92:20 - command pip install minus r
92:22 - requirements.txt all this does is it
92:26 - papers the package manager for python it
92:28 - is used to install libraries in Python
92:30 - and when you say minus our
92:32 - requirements.txt you're just telling pip
92:34 - look into the requirements.txt file and
92:36 - in each line there will be the name of a
92:38 - library and please install that library
92:40 - for me so when render pulls the code
92:43 - from GitHub every time something changes
92:45 - in the repository render pulls the code
92:47 - and then it's going to run pip install
92:49 - requirements.txt and that is going to
92:51 - obviously come across these two lines
92:54 - flask and G unicorn so then it's going
92:57 - to install those libraries and now to
93:01 - start the server we are now going to use
93:03 - G unicorn so gu and i c o r n g unicorn
93:06 - the library when it is installed it also
93:09 - adds a command called gionicon and this
93:11 - command needs to be given the name of
93:13 - the file that needs to be executed so
93:15 - the file that needs to be executed is
93:18 - app.pi so instead of doing python app.pi
93:21 - we are just doing gionicon app.pi
93:23 - development production python geonicon
93:26 - that's the only change
93:28 - so G Unicorn app dot Pi but instead of
93:31 - app.pi you just put app and then not
93:33 - only that you also have to specify the
93:37 - name of the actual variable which
93:39 - contains the flask application that you
93:41 - want to run now in my case the variable
93:44 - is also called app but let's say this
93:45 - was called flask app then I would have
93:47 - to put something different but we are
93:50 - just going to put Geo Nikon app colon
93:52 - app
93:53 - now how did I find out all this how did
93:55 - I find that this needs to be the build
93:57 - command and this needs to be the start
93:58 - command I just Googled render.com deploy
94:01 - flask application it's not something
94:03 - that I've ever learned before this is
94:06 - something that I looked up just a few
94:08 - hours ago and there is a tutorial on
94:10 - this and it literally tells you exactly
94:12 - this that there is a Hello World project
94:14 - that you can check out on GitHub and you
94:16 - can go through this app.pi file here and
94:19 - you can see this is what app.fi is set
94:21 - up as and then you create a web service
94:24 - on render after signing in and you
94:26 - should set the environment to python you
94:28 - should set the build Command Web install
94:29 - requirements.txt and you should set the
94:32 - start command to G Unicorn app colon app
94:34 - so that's literally what I looked up and
94:36 - you can see here there is a
94:38 - requirements.txt file which contains
94:40 - flask in G unicorn
94:42 - all of these things are not things that
94:44 - you have to learn or become familiar
94:46 - with or anything it's just when you need
94:47 - to connect to a specific platform you
94:50 - need to look up how to do it and that is
94:52 - often in the documentation if you are
94:54 - deploying to a platform called Heroku
94:56 - then this would be slightly different if
94:57 - you are deploying to a platform like AWS
94:59 - this would be slightly different all
95:01 - that matters is figuring out how to make
95:03 - it work so now we've put in all this
95:05 - information and now we can go in here
95:08 - and select a plan you can choose the fee
95:10 - plan I'm choosing the paid one because
95:11 - it's going to build slightly faster and
95:14 - now it is going to create a deployment
95:16 - of this application you can see that the
95:18 - application has become visible on
95:20 - jobiancareers website Dot onrender.com
95:23 - and it is first cloning the GitHub
95:26 - repository and then it is checking out
95:28 - the main branch so it's basically
95:30 - getting the latest code then it is
95:32 - telling you that it's using a certain
95:33 - version of python now it's installing a
95:35 - bunch of libraries you can see here it
95:36 - said pip install
95:38 - requirements.txt so it's done after all
95:41 - the installation is done it's is going
95:43 - to upload and deploy it so now it's
95:45 - doing a deployment and once it is
95:47 - deployed which means once it is set up
95:50 - on a server and that server is pointed
95:54 - to this URL we will be able to access it
95:56 - and how is it going to run that actual
95:58 - server it's going to run the server by
96:00 - using gionicon App colon app
96:04 - create looks like it has started so now
96:06 - I can go up here and I can open this and
96:09 - I can go in a new tab
96:11 - and there it is this is the jobin
96:13 - careers website deployed on render.com
96:16 - but what I don't like is that it's on
96:19 - this Jovian couriers website dot
96:21 - onrender.com I want my own site
96:23 - jovincareers.com or something so we'll
96:25 - talk about that in just a second but
96:27 - what I want to show you now is how easy
96:29 - it is to change things now you can come
96:32 - back here and let me maybe change some
96:35 - information here from backend engineer
96:37 - let me change this to 150 000 maybe also
96:39 - let me go into the home.html file
96:44 - templatehome.html and here maybe let me
96:46 - change
96:48 - instead of open positions let me call
96:49 - this job openings
96:53 - and let me just
96:55 - go to Version Control and let me say
96:59 - made some changes
97:01 - and let me just commit and push
97:05 - and now those changes are going to come
97:07 - up here
97:09 - if I just reload again it says made some
97:11 - changes 10 seconds ago and now if I come
97:14 - back here and I go into
97:16 - the website again
97:18 - you see that it has started a new
97:20 - deployment so every time you push to the
97:23 - main branch render will automatically
97:24 - take that and try to deploy it and if
97:26 - the deploy fails it will continue to use
97:28 - the previous deploy if the deploy
97:30 - succeeds then the site will get replaced
97:32 - now suppose for some reason this does
97:34 - not get triggered you can just click
97:35 - manual deploy and deploy latest commit
97:37 - and that is going to take the latest
97:39 - code and that is going to deploy it so
97:41 - this way you can just work on replit and
97:45 - test your changes on the test server
97:46 - then use Version Control to push your
97:50 - changes to git and render will pick up
97:52 - those latest changes and automatically
97:54 - deploy them see how easy it is to update
97:57 - your website
97:58 - so now we've seen how to set up
98:00 - automated deployment each time
98:03 - something changes so I believe we change
98:05 - this to job openings and you can see it
98:07 - has already changed to job openings here
98:08 - now let's learn how to deploy it to a
98:12 - nice website like jobin careers.com
98:15 - now this is where you will need to buy a
98:17 - domain this part is not free
98:18 - unfortunately because you need to buy a
98:21 - domain so you can go to
98:22 - domains.google.com
98:23 - and on domains.google.com you can
98:25 - actually click get a new domain and I
98:27 - can search for example jovincareers.com
98:31 - and looks like it is available and it is
98:33 - rupees 860 per year so I can actually go
98:36 - ahead and buy it so I can click this
98:38 - button add my payment information and
98:39 - buy it and so on
98:41 - I've already bought another one called
98:44 - jovencareers.xyz and once I have bought
98:48 - it I can configure it to
98:51 - display this website how do I do it
98:54 - again every platform every deployment
98:56 - platform will have its own way of doing
98:58 - it but on render.com if I go into the
99:01 - project settings here
99:03 - and on the project settings just find
99:05 - the place where it talks about domains
99:07 - so looks like custom domains and you can
99:10 - point a custom domain to this app so I
99:12 - want to point Jovian careers.xyz
99:18 - let's save that
99:22 - and now once you add the domain jobin
99:25 - careers.xyz then it will ask you to
99:28 - update a DNS record don't need to worry
99:30 - about what exactly this means you just
99:32 - have to follow some instructions here so
99:34 - it says add a cname record for www
99:37 - pointing to this and add a
99:40 - a name record pointing to this so I'm
99:43 - just going to copy this thing and I'm
99:45 - going to go here into my Google domain
99:47 - I'm going to click manage
99:50 - and I am going to click on DNS and I am
99:54 - going to add a record right that's what
99:55 - it said add a DNS record
99:58 - so I need to add a cname record for www
100:01 - so I'm going to select record type
100:03 - cname and www
100:07 - and then I am going to put the value
100:10 - Jovian careers website dot onrender.com
100:13 - here and I click save
100:16 - so that's one let's add one more looks
100:19 - like I need to add one more record
100:21 - so now I need to add another record and
100:23 - this time it needs to be an a name or
100:25 - Alias record let's see if we have a name
100:27 - or Alias okay there's no a name there's
100:29 - no alias
100:30 - then it says that okay do not have a
100:32 - name or release then use an a record so
100:34 - now I need to create an a record so I'll
100:37 - just go here I'll create a it's just
100:39 - already pointing to jovencareers.xyz so
100:42 - I don't need to put anything here
100:43 - because that's going to just create a
100:45 - subdomain and then it needs an address
100:47 - so I need to copy this address and I
100:50 - need to paste this address here
100:52 - and then I click save
100:54 - and that's it so now what we have done
100:57 - is we've bought the domain and in the
100:59 - domain we have configured the DNS which
101:02 - is simply something called domain name
101:04 - server setting which means if somebody
101:06 - in the world tries to access the domain
101:08 - which location should they actually be
101:11 - going to a domain is simply a
101:12 - redirection to some actual location and
101:15 - what you said is that if somebody tries
101:17 - to access joviancareers.xyz they should
101:20 - actually be shown the information that
101:22 - comes from this page
101:24 - render.com
101:27 - so let's see looks like it has been
101:30 - verified and now if I go to Joven
101:32 - careers
101:34 - dot x y z
101:37 - you can see that the site that we have
101:39 - just created in the last couple of hours
101:40 - is now live on jovincareers.xyz
101:44 - and every time we make a change on
101:47 - replit
101:48 - let me change that back to
101:53 - open positions here
101:57 - and then we just push that to get
102:03 - open positions
102:06 - commit and push
102:10 - render is going to pick up the latest
102:11 - version and it is going to then deploy
102:14 - that latest version and that latest
102:16 - version is going to be available on
102:17 - jovencareers.xyz
102:22 - and this is something that you can do
102:23 - right now today with your own site that
102:26 - you want to do so now we have just
102:30 - completed
102:31 - rendering Dynamic data creating an API
102:34 - route
102:35 - deploying the project to render.com and
102:37 - connecting a domain with a render
102:39 - deployment now we're going to very
102:42 - quickly make some functional and
102:44 - aesthetic improvements to this site so
102:46 - that it can actually be used as a jovian
102:49 - career site so the first thing I'm going
102:51 - to do is add a nav bar in footer from
102:52 - bootstrap most websites like this one or
102:55 - like Jovian have a navbar even
102:58 - getbootstrap.com itself also has a nav
103:00 - bar Google has an app bar so how about
103:02 - we add a nav bar first
103:04 - so that it looks more like a real
103:06 - website now to get an app bar I'm going
103:09 - to go into bootstrap examples and you
103:10 - can see here there is an example
103:13 - of headers
103:16 - and I can maybe pick one of these
103:19 - the way to do this is I just click
103:21 - download examples and that's going to
103:23 - download that for me and I have it
103:25 - downloaded already
103:27 - and out of those I am interested in the
103:29 - headers example so the navbars example
103:32 - and let me just open up
103:34 - vs code
103:37 - and here under headers maybe let's add
103:42 - I like this one so maybe let's get this
103:43 - one so this is number one two three four
103:46 - five number five
103:47 - so let's see here
103:49 - this is the first one
103:51 - this is the second one this is the third
103:53 - one this is the fourth one this is the
103:55 - fifth one
103:56 - so I'm just gonna copy this and I'm
103:59 - going to come back here I am going to
104:01 - put it into a file called nav.html
104:06 - and I'm going to just paste it here
104:11 - and I'm just going to come into
104:13 - home.html and right at the very top here
104:16 - right after the body starts I'm going to
104:19 - say
104:20 - include nav.html
104:27 - and there it is you can see here that
104:30 - this nav is there now this nav is set up
104:32 - in such a way that on mobile it renders
104:35 - differently and on desktop it renders
104:37 - differently so if I just open it up here
104:40 - you can see that here it has rendered
104:43 - differently
104:44 - maybe let's pick a slightly simpler map
104:46 - now that you know how to use an app I'm
104:48 - going to just go into the docs here and
104:50 - I'm going to search for navbar
104:52 - and I'm going to pick a slightly simpler
104:55 - navbar which doesn't have these special
104:57 - qualities just very light very simple
104:59 - come back here and nav.html
105:05 - that's it and let me just change this to
105:07 - Jovian
105:09 - and looks like it's using a image as
105:11 - well so I'll just grab that image
105:13 - this is the image it's using I'm just
105:15 - going to save this image as logo.svg
105:19 - and I'm going to come back here into
105:20 - static and I'm going to upload this
105:22 - image here
105:24 - and instead of this SRC I'm just going
105:26 - to change this to slash static slash
105:30 - logo.svg
105:32 - and there you go now we have that let's
105:35 - also maybe just like we have on Jovian
105:37 - we have a white nav bar with a small
105:39 - Shadow how do we get a shadow let's
105:42 - search for shadow
105:44 - thank you
105:48 - Shadow SM let's just grab that
105:51 - I'm just going to come in here and I'm
105:53 - going to add Shadow SM
105:55 - Ile so now you see a nice shadow below
105:57 - the nav bar
105:58 - let me reload that
106:00 - okay that's nice now the nav bar doesn't
106:02 - stay stuck the nav bar you can see it
106:05 - moves away so I'm just gonna add
106:07 - something called fixed top
106:13 - but now the trouble is that this
106:15 - information shifts up and also it looks
106:18 - like it's showing up behind the nav bar
106:20 - so I'll also give it a background
106:22 - so BG white I'm going to give a solid
106:25 - white background to the nav bar
106:27 - and now you can see here that content
106:30 - goes behind the nav bar all right not
106:32 - bad but I can't see the title here so to
106:36 - fix that we can just come in here into
106:38 - the nav and right below the nav because
106:41 - it is fixed it is kind of popping out of
106:44 - the page so that's why it doesn't have
106:45 - anything behind it so we can just put a
106:47 - div and let's give it a height let's
106:50 - look up the navbar height
106:52 - I believe it should be about
106:54 - 56 pixels so let's go into this this is
106:58 - a nav bar you can see the height 40 plus
107:00 - 8 plus 856 so the nav bar is kind of
107:03 - popping out of the page but we need to
107:05 - put an element behind it at the top of
107:07 - the page to compensate for it popping
107:10 - out so I'm just going to put height 56
107:13 - pixels and now you can see that suddenly
107:15 - this is now showing up below because of
107:18 - this display great looking nice let's
107:21 - add a footer as well let me go back into
107:23 - these examples here let me check footer
107:27 - yeah there it is photos let's open up
107:29 - index.html let me grab maybe this footer
107:33 - this footer looks nice so this is footer
107:35 - number three so I'm just going to open
107:38 - this up in vs code
107:41 - and photo number three so that's photo
107:44 - number one
107:45 - foot number
107:46 - two foot number three
107:50 - I think this is it
107:52 - go back create a file
107:56 - footer.html
108:01 - paste that in here that's our footer I
108:04 - think here it says Company Incorporated
108:06 - let me just change that to Jovian
108:08 - and there are a bunch of links here
108:10 - which don't point to anything yet but we
108:12 - can fix that later and let me just go
108:14 - into home and here at the bottom
108:17 - somewhere let's add
108:22 - footer
108:25 - and there you go now you see here
108:27 - copyright 2022 I think maybe I didn't
108:30 - copy the whole thing there may be
108:32 - something we need to change here maybe
108:33 - let me try this one
108:35 - I think this is the one
108:43 - yeah there we go now we have this nice
108:45 - Footers now we can go back into
108:47 - home.html and we can get rid of this
108:50 - copyright 2022 part here
108:53 - great
108:54 - so
108:55 - all good so far we have a footer and
108:58 - then we have a nav bar this image here
109:01 - it's it feels a little weird because
109:03 - it's cut off on the left and right so
109:05 - let me come back here and let me go into
109:07 - home.html let me take this image and let
109:10 - me move it out of the container so I'm
109:12 - just going to move this image out and
109:13 - this happens all the time where when you
109:15 - see something implemented it doesn't
109:18 - seem as nice and you may want to just
109:20 - change it so let me move that out and
109:22 - let me get rid of this about Joven and
109:26 - let's see what happens now
109:29 - this is much nicer so now we have the
109:32 - snap bar now we have this image that
109:33 - goes under it of course we may want some
109:35 - padding below it so we may say margin
109:39 - bottom
109:40 - 16 pixels and there we go
109:46 - okay so this is nice but I would like to
109:48 - have maybe an image here on the right
109:49 - just to Showcase how nice it is to work
109:52 - at jobin so I'm going to go back to
109:54 - onesplash.com
109:56 - and let me just search for people
109:58 - working
109:59 - so obviously these will not be Joven
110:02 - employees but let's get them in here
110:04 - let's just call this people and let's go
110:07 - back into templates let us go into
110:10 - static
110:11 - add that in there and let me add this
110:13 - image here
110:16 - lead I'm going to put a div around it
110:19 - and put a div around that
110:22 - I am going to add the image here below
110:25 - this IMG SRC equals
110:28 - static
110:30 - slash people.jpeg
110:33 - and let's set a height for it
110:37 - height
110:38 - 320px
110:42 - now here I'm going to apply a
110:45 - class row and then here I'm going to
110:47 - apply
110:49 - call six
110:52 - and then here I'm going to apply call 6
110:54 - as well
111:02 - let's see what that does
111:05 - so now we have this nice image on the
111:07 - left I can even give this a nice border
111:10 - so
111:11 - let me say
111:13 - border
111:15 - radius 4px
111:18 - and now we have a nice border here
111:20 - I think we may want to give some
111:23 - margin below the image so
111:26 - style equals margin bottom
111:29 - 16px
111:32 - okay that's nice now this is looking
111:34 - nice on desktop but I think on mobile we
111:38 - probably may not want this image it's a
111:40 - little messy so what you can do is you
111:43 - can do a couple of things you can say
111:45 - you want this to be six
111:48 - only on medium devices and bigger so
111:51 - that's where you can say call md6 and
111:53 - here you can say that you want this to
111:56 - not be displayed d none and DMD
112:01 - block so basically you don't want it to
112:03 - be displayed on mobile and you want it
112:06 - to be displayed only on medium screen so
112:07 - now you can see Jovian careers here
112:10 - is just showing the text and not showing
112:12 - the image and showing open positions
112:16 - and here jobin careers is also showing
112:19 - the image
112:21 - but the apply buttons don't quite work
112:24 - right now and unfortunately they cannot
112:26 - work right now because we have not
112:28 - implemented the second page but we can
112:30 - do a quick trick here so what we can do
112:32 - is clicking on the apply button can
112:34 - actually just open an email address to
112:37 - somebody from the Joven team and maybe
112:40 - the email can already have a
112:41 - pre-populated subject so here instead of
112:44 - using a button we can change this to an
112:47 - anchor tag so that's again something you
112:50 - will learn when you look at HTML in a
112:53 - little more detail so now we've not made
112:55 - any change yet but now we can do this we
112:57 - can point this to some URL so let me
113:00 - just point this to google.com to show
113:01 - you
113:06 - and now when I click on this it's going
113:08 - to open google.com you see so the a tag
113:11 - is used to create links in HTML and the
113:15 - target of the link is simply specified
113:16 - using the href attribute of the a tag so
113:19 - you are probably aware of links like
113:21 - https and HTTP that open in the browser
113:23 - but there's a special type of Link
113:24 - called mail2
113:27 - so if you search for mail to links what
113:29 - they do is they open your email program
113:31 - so you can actually do this mail to this
113:34 - and you can also in fact include a
113:36 - subject here and you can in fact not
113:38 - only include a subject you can include a
113:40 - body and a lot of other things so let me
113:42 - just do this mail to
113:46 - AI
113:48 - question mark subject equals
113:51 - application
113:53 - for
113:55 - and let me get the job name here
113:58 - so job
113:59 - title
114:01 - let me just do that and now when I click
114:04 - on this link
114:06 - it's going to now open a mail
114:07 - application and it's going to type this
114:09 - mail to hello Joe Windows AI application
114:11 - for data analyst and it's going to be
114:13 - sent from your email and whatever mail
114:15 - application you have configured on your
114:17 - phone or on your desktop or whatever so
114:19 - if I go in here there is a
114:22 - tool here called mail2link dot me and if
114:26 - I just change this to hello at jovian.ai
114:29 - and application for XXX and body my name
114:37 - and here you can just ask the person to
114:39 - put the name
114:40 - and my
114:43 - resume link
114:45 - resume link
114:47 - and my LinkedIn link
114:51 - LinkedIn link so here we can go and
114:54 - construct a mail to URL so I'm just
114:57 - going to copy this mail to URL I'm going
114:59 - to come back here I'm going to paste
115:01 - this mail to URL here
115:03 - in the href
115:07 - okay and all I'm going to change here is
115:09 - application for instead of XXX I'm going
115:12 - to change this to
115:15 - application for job
115:18 - title
115:19 - and now let's try that
115:24 - and now it opens mail and you can see
115:27 - here that it has created a sort of form
115:29 - that somebody who wants to apply can
115:32 - simply fill out and send the mail and we
115:34 - will get an email
115:36 - and we can do the same thing for contact
115:37 - so let's go into contact as well let's
115:40 - construct
115:44 - question about job openings
115:49 - and let's just put
115:52 - my question
115:57 - enter question here and let's just copy
115:59 - that
116:02 - and I'm going to go back into the code
116:04 - into home I'm going to go into the
116:07 - contact button change that from a button
116:09 - to link all that we need to change is
116:11 - just change the tag
116:13 - and we type href equals such and such
116:17 - and now our contact button is going to
116:19 - work as well
116:22 - so there you go my name my question and
116:25 - that's it so now we have a fully working
116:27 - site now we can of course fix these
116:30 - links as well so we can go in here into
116:32 - our footer.html
116:34 - and we can fix the links that we're
116:36 - looking at so home we can point to
116:40 - jovian.ai
116:42 - and let me change this to courses
116:47 - and let's change that to
116:50 - show windowed AI slash learn
116:52 - let's change
116:56 - let's call this events
116:59 - and let's send that to jiovin.ai slash
117:03 - events and by the way if you want a link
117:06 - to open on a new tab you provide a
117:08 - Target attribute underscore blank and
117:11 - that's going to open it in a new tab
117:12 - again something that you can easily look
117:16 - up if you just search how to open a link
117:18 - in a new tab
117:19 - okay HTML is all about just constantly
117:22 - looking things up and let's fix this
117:25 - also to
117:27 - show Windows AI slash about
117:32 - and there you go so now we have almost a
117:34 - fully working site we can probably add a
117:36 - couple of links here the same links that
117:38 - are there in the footer but if I click
117:40 - on home it opens the job inside if I
117:42 - click on courses it opens the job in
117:44 - courses if I click on events it opens up
117:46 - events
117:47 - and contact us opens email
117:49 - apply opens email it mentions the name
117:54 - of the role that you're applying to so
117:56 - if I click on backend engineer you can
117:58 - see here it puts application for backend
118:01 - engineer if I put front-end engineer it
118:03 - puts application for front-end engineer
118:05 - and so on
118:08 - so there we just added mail to links and
118:11 - we've already been using proper files to
118:15 - organize our templates because now we
118:16 - can reuse footer nav and job item on
118:19 - other Pages as well and it's also just
118:21 - easier to read the code when it is in
118:22 - multiple files so we've done some
118:24 - refactoring as well
118:25 - so that's it we just created a
118:27 - functioning site let me just save this
118:30 - so let's just call this
118:32 - functional
118:35 - and
118:36 - aesthetic
118:38 - improvements
118:39 - and let's commit and push that and by
118:42 - the time we're done recapping it should
118:43 - be deployed so what did we do today we
118:47 - started out by setting up a project on
118:49 - GitHub we then opened up that project on
118:51 - triplet for development we then created
118:53 - and ran a flask web server by installing
118:56 - flask and creating a flask cap and
118:58 - registering a route we then push those
119:00 - changes back to GitHub
119:02 - then we learned how to create templates
119:05 - using the templates folder and in the
119:08 - templates folder we put an HTML file and
119:10 - then we rendered it using render
119:12 - template inside app.pi
119:15 - that's all we did and then we added HTML
119:18 - tags inside it
119:20 - to create the structure of the page and
119:22 - how did we come up with the structure of
119:24 - the page we created it on excalator.com
119:28 - so we created it using a simple
119:30 - wireframing tool you could do it on pen
119:31 - and paper as well
119:33 - and then we styled the page using CSS
119:35 - classes but of course our design skills
119:37 - are fairly limited so that's where we
119:38 - use the bootstrap framework for faster
119:40 - development and bootstrap simply offers
119:43 - a whole bunch of helper classes and
119:46 - utilities and even example code to
119:49 - create the kind of layouts that you want
119:51 - to create
119:53 - then we saw how to render Dynamic data
119:56 - using the templating syntax we took some
119:59 - information about jobs from a list of
120:01 - dictionaries and we rendered it
120:03 - using a for Loop in the home.html file
120:07 - we also learned how to organize our
120:09 - templates better using the include
120:12 - keyword so here we have job item dot
120:15 - HTML which is used inside home.html
120:20 - then we deployed that project to
120:22 - render.com you can see here we deployed
120:25 - it all the deployments are visible here
120:28 - looks like a deployment just went live
120:31 - and then finally we also connected a
120:33 - domain so you can buy a domain on
120:34 - google.com and all we had to do was put
120:36 - in a couple of DNS records and now on
120:40 - Jovian careers dot XYZ
120:45 - we have our careers website Jovian do
120:48 - something great show in careers I should
120:50 - probably replace this with some
120:52 - information about the company replace
120:54 - this with maybe an actual photo open
120:56 - positions so it would be nice if there
120:58 - was a form here and all and maybe we'll
121:00 - do that next time but right now it works
121:01 - I can actually share this website and
121:03 - people can click apply it'll send an
121:05 - email to hello jobin.ai and they can
121:08 - also contact us and they can use all of
121:10 - these links
121:12 - so we added the nav bar in footer we
121:14 - added a bunch of mail to Links we made
121:15 - the website mobile friendly you can
121:17 - actually right click inside your Chrome
121:19 - browser and pull these developer tools
121:22 - to the site and then click this mobile
121:24 - button and voila you're looking at your
121:28 - website on mobile
121:32 - so there you go on mobile this is what
121:33 - the website looks like
121:36 - not too bad it is usable maybe there is
121:39 - some spacing left and right that we can
121:40 - fix but largely it looks fine so I guess
121:43 - I can share this link over WhatsApp or
121:45 - wherever and people can start applying
121:47 - so in just a couple of hours from
121:49 - concept to execution to deployment to
121:52 - styling we've built a careers website
121:54 - for Jovian something that we actually
121:56 - plan to use now
121:57 - we did not go deep into any one area
122:00 - because this was sort of a walk through
122:01 - now what you should try and do is try to
122:04 - replicate this on your own maybe create
122:06 - a personal website and maybe list your
122:09 - projects there and also in that process
122:12 - you may want to then go deeper into some
122:14 - of these tutorials explore the HTML
122:16 - tutorial explore the CSS tutorial
122:18 - explore the bootstrap documentation the
122:21 - more time you spend with it the more you
122:22 - try things the better you're going to
122:24 - get at it and that's all that we have
122:27 - for today now what are some ways in
122:29 - which we can improve this we can create
122:31 - a page to show the details about the job
122:33 - for example requirements
122:35 - responsibilities
122:36 - Etc
122:37 - we can also add a form within the same
122:39 - detail space to submit an application
122:41 - instead of sending an email and then we
122:44 - can store the information about the jobs
122:46 - and the applications in a cloud database
122:48 - so that this is fetched not from some
122:50 - object or some python list but it is
122:52 - fetched from a database and that
122:54 - database can then be updated and then
122:56 - the data from that database can be
122:58 - downloaded so we can have information
122:59 - about all the applications in a single
123:01 - place
123:02 - and finally when somebody fills an
123:03 - application form we can also send an
123:05 - automated email confirmation to a
123:07 - candidate and to a jovian admin after
123:09 - the application and then we can also
123:11 - create a login interface now now that
123:13 - people can submit applications maybe we
123:15 - need an admin interface where we can log
123:18 - in and view the submitted applications
123:20 - maybe accept or reject applications and
123:23 - maybe we also create a login application
123:24 - for people to view the status of their
123:27 - job
123:28 - what you're looking at here
123:30 - is actually not too far from
123:34 - dsmlbootcamp.com
123:36 - and you can see this is exactly what
123:37 - we've slowly built upon with more
123:40 - functionality connecting a database
123:42 - connecting login and adding forms and
123:45 - such things but this is all there is to
123:48 - web development you just figure out what
123:49 - you need to build then you find the
123:52 - smallest possible implementation of it
123:54 - that you can ship as soon as possible
123:56 - ideally within a few hours or within a
123:58 - day or within a week you build it you
124:00 - ship it then you identify what you can
124:02 - improve and then you pick up each task
124:05 - and then you keep implementing it and
124:06 - shipping it and that's all we do as web
124:09 - Developers
124:11 - I hope you've learned enough to try and
124:13 - build your own website and you can dig
124:15 - deeper in the areas that you need to
124:18 - the topic for today is database driven
124:21 - web applications today we are building
124:23 - on top of the previous tutorial on web
124:26 - development with python where we explore
124:28 - the basics of web development with
124:29 - python and created a jovian careers
124:31 - website listing the job openings at
124:33 - Jovian this is what the output of the
124:36 - previous lesson looked like we have a
124:39 - header here with a company name and then
124:41 - we have a banner image then we have some
124:43 - information about the company an image
124:45 - showing some people working and then a
124:47 - list of open positions with each
124:49 - position containing the title the
124:51 - location and the salary for that
124:53 - position there is also an apply button
124:55 - for each position and clicking on apply
124:57 - opens up your default email client and
125:00 - asks you to fill out some information
125:02 - over email so that was a quick and easy
125:05 - way for us to collect applications over
125:08 - email
125:09 - then we also have this contact us button
125:12 - clicking on it again opens up the email
125:13 - and fills in a different subject and
125:15 - body depending on which of these buttons
125:18 - are clicked then we also have a footer
125:19 - here which links to the jobin home page
125:22 - courses events and other information so
125:25 - this was what we worked on the last time
125:27 - and we did this using the flask HTML
125:31 - framework we also learned how to use
125:32 - HTML and CSS to build out the page and
125:37 - we saw how to use the bootstrap
125:38 - framework to quickly build a good
125:41 - looking page we also saw how to deploy
125:43 - the website to the cloud using the
125:46 - platform render.com and attach a custom
125:48 - domain in this case it was
125:51 - jobiancareers.xyz so today we're going
125:53 - to build on top of this and we are going
125:56 - to incorporate databases which form the
125:59 - backbone of most modern web applications
126:01 - including Jovian so we will look at how
126:04 - to connect a flask web application to a
126:06 - MySQL Cloud database we we will then
126:10 - learn how to create Dynamic Pages by
126:12 - pulling information from the database we
126:14 - will also see how to add entries to the
126:16 - database using data from form
126:18 - submissions for examples applications
126:20 - made to a job will be stored back into
126:23 - the database and finally we will deploy
126:26 - a production ready database driven web
126:28 - application to the cloud
126:30 - now the prerequisites for today's
126:32 - tutorial are python flask HTML and CSS
126:35 - flask HTML CSS were covered in the
126:38 - previous tutorial so if you haven't seen
126:39 - that you should check that out but since
126:42 - we are going to be working with
126:43 - databases and relational databases in
126:45 - particular you will also need to know
126:48 - some amount of SQL or SQL just enough to
126:51 - create tables get data out of tables and
126:53 - put data into tables
126:55 - and here are the topics we're going to
126:57 - look at today we're going to look at
126:59 - Cloud databases using the planet scale
127:01 - platform we are going to use the SQL
127:03 - Alchemy library to connect with Cloud
127:06 - databases we are going to create HTML
127:08 - lists and forms so we're going to go
127:11 - deeper into using HTML to create
127:13 - interactive Rich web pages and we're
127:16 - going to see how to create Dynamic web
127:17 - pages and we'll also talk a little bit
127:19 - about how to prevent spam on forms that
127:21 - are published online
127:24 - so the first step is to set up the
127:27 - project and the cloud database now here
127:30 - is a project that we worked on the last
127:32 - time the starter project code it is
127:34 - available here on this URL github.com
127:37 - Akash NS slash Jovian careers website
127:40 - now we don't want to disturb this code
127:44 - since it's already used for the previous
127:46 - tutorial we want to create a new GitHub
127:48 - repository but we want to use this code
127:50 - as the starting point so for that let's
127:53 - first go to github.com github.com is the
127:56 - platform where developers around the
127:58 - world create and share projects in the
128:01 - form of git repositories so I'm going to
128:03 - go to github.com and I'm signed in here
128:05 - already and you may have to sign in if
128:06 - you haven't done that already and click
128:08 - on new and I am going to create a
128:10 - repository under my username and I'm
128:12 - going to call it
128:14 - Jovian
128:17 - careers website V2
128:20 - and I'm going to leave out the
128:22 - description here I'm going to make it
128:23 - public I am going to not initialize the
128:26 - repository this time I'm going to leave
128:27 - it blank so I'm not going to add a
128:29 - readme file I am not going to add git
128:32 - ignore and I'm not going to choose a
128:33 - license I am just going to create the
128:35 - repository so let me click create
128:37 - repository and now because we have not
128:40 - added any data or any files into the
128:43 - repository yet even while setting it up
128:45 - we can now incorporate the changes from
128:48 - an existing repository into this
128:50 - repository so there are many ways to do
128:52 - this but I am interested in The Last One
128:54 - Import code from another repository so
128:57 - I've just created a new project jobin
128:59 - careers website V2 and I'm going to take
129:02 - the URL of the GitHub repository which
129:05 - contains the code that we completed in
129:08 - the previous tutorial
129:09 - and I'm going to click import code and
129:12 - I'm going to enter the URL of the old
129:14 - Repository
129:16 - and now GitHub is going to pull all the
129:19 - code from the old repository Jovian
129:21 - Courier's website into the new
129:23 - repository Jovian careers website V2 so
129:26 - now we have created a new repository
129:28 - with an exact copy of an older
129:31 - repository and you can do this for any
129:33 - public repository that you find on the
129:35 - internet you can copy its URL and you
129:37 - can pull that code into your own git
129:40 - repository using the import function
129:43 - let's give that a second to run and
129:45 - while that is running let's talk about
129:46 - what we are going to look at today
129:49 - so first we are going to copy the GitHub
129:52 - project we are going to once again open
129:53 - it up on replit and deploy it to render
129:56 - then we are going to set up a cloud
129:58 - mySQL database on a platform called
130:00 - Planet scale then we're going to create
130:02 - a table a jobs table and add data to it
130:04 - using the MySQL workbench and don't
130:07 - worry these terms make don't make sense
130:08 - we are going to cover those and finally
130:10 - we are going to connect to the database
130:12 - from our GitHub from our project within
130:15 - replit using the SQL Alchemy Library
130:18 - then we are going to create some
130:20 - database driven Dynamic pages to display
130:22 - the list of jobs that are present in the
130:25 - cloud database then we are going to
130:26 - improve the layout styling and
130:29 - navigation of the pages using bootstrap
130:31 - and finally we're going to push the
130:33 - updated code to GitHub and deploy it
130:35 - again with the dynamic pages
130:37 - next we're going to look at how to store
130:39 - the submitted applications in the
130:41 - database and finally we are going to
130:43 - make some functional and aesthetic
130:45 - improvements to our application
130:51 - all right well this doesn't seem to be
130:53 - working at the moment and this happens
130:55 - sometimes this particular functionality
130:57 - on GitHub could be down so we're going
131:01 - to try an alternative because the
131:03 - automated import is not exact working
131:12 - so we're going to follow a different
131:14 - approach here since the import did not
131:16 - work
131:18 - so I've just downloaded the original
131:20 - code here from Joven Courier's website
131:22 - as a zip file
131:24 - and I have opened up that zip file on my
131:27 - desktop so now you can see this folder
131:29 - Joven Courier's website Main
131:31 - I'm going to change its name to Jovian
131:34 - Courier's website
131:38 - V2
131:40 - and then let's enter Joven Courier's
131:42 - website V2
131:45 - and now we can follow the instructions
131:48 - here to create a new repository so first
131:51 - I'm going to initialize a new repository
131:52 - using git init and now a new repository
131:55 - has been initialized then I'm going to
131:57 - add everything that is present here
131:59 - using get add Dot
132:02 - then I am going to commit
132:05 - git commit minus M initial commit
132:11 - and then finally I am going to add a
132:13 - remote here so I'm going to do git
132:14 - remote add origin
132:19 - and I have added this origin here
132:23 - and then I'm going to push
132:32 - and now this is pushed
132:34 - okay so this is the other approach what
132:37 - we try to do here was we try to click
132:39 - import and after clicking import we
132:41 - simply put in the URL but that sometimes
132:45 - it works sometimes it doesn't so what we
132:48 - did instead was we went to the original
132:49 - Repository and we downloaded a zip file
132:52 - and then we opened up the zip file and
132:54 - we followed the instructions to push
132:56 - this code to the careers website V2
132:58 - repository okay don't worry about the
133:01 - specifics here generally the import
133:02 - command should work for you in this case
133:04 - it just did not unfortunately now we
133:07 - have Joven Courier's website V2 and this
133:10 - contains all the code that we had
133:12 - created the last time the main code was
133:14 - in app.pi where we created a flask
133:17 - application and then we had a list of
133:20 - jobs and then we had a route here which
133:22 - rendered on the home page the
133:25 - templatehome.html with the data jobs and
133:28 - the company name Joven and what was the
133:30 - home.html template well we can see here
133:33 - inside templates and inside home.html
133:35 - that this contained some downloading or
133:38 - including the bootstrap framework and
133:40 - then it contained some other layouts
133:42 - like the navigation bar and then the
133:44 - Jovian careers title and then some
133:46 - information and followed by some list of
133:48 - jobs which is exactly what we see Joven
133:51 - careers
133:52 - dot XYZ all right so we have exactly the
133:56 - code that we ended up with the last time
133:58 - now we want to open up this code on the
134:01 - platform replit so replit is the
134:03 - platform for developing code online and
134:07 - we can now import this new repository
134:09 - into replit by logging into replit and
134:12 - then either you might have to connect
134:13 - your GitHub if you're not if you haven't
134:15 - already connected it or if you've
134:17 - connected it then you may be able to
134:19 - access it directly depending on the
134:21 - permission you've given I've only given
134:23 - it permission to specific repositories
134:25 - so I'm going to click on see all your
134:26 - repos
134:28 - and now here I am going to try and find
134:31 - the repository here but I have only
134:34 - currently given replied permission to
134:36 - access one repository so I wanted to
134:39 - access another repository as well so let
134:42 - me just
134:43 - click on see all your repos here and
134:46 - click this button here manage the git
134:48 - repos GitHub repositories replit can
134:50 - import so let's click on manage the git
134:52 - repositories replit can import
134:55 - now here we can then click configure to
134:58 - configure which repositories replit can
135:01 - import and I'm going to scroll down here
135:03 - and looks like currently it only has
135:05 - access to the Jovian careers website but
135:08 - I'm going to click this drop down and
135:10 - search for Jovian
135:12 - careers website V2
135:15 - and I'm going to click save
135:19 - and now
135:20 - all we have done is we have upgraded
135:22 - replitz permission
135:24 - from just accessing one repository to
135:27 - now accessing two repositories okay and
135:29 - now
135:30 - we can click akashina slash Jovian
135:33 - couriers website V2 and now we can
135:35 - import this from GitHub and create a new
135:38 - replit project
135:39 - so now
135:41 - the replit project is created using
135:44 - jobin careers website V2 the repository
135:46 - and we can make changes here and push
135:48 - them back to GitHub
135:56 - now the good part here is because we are
135:59 - starting from an existing project
136:00 - everything is set up for us already so
136:02 - we don't need to do a lot of setup you
136:04 - can see we have a DOT triplet file which
136:06 - has the language and the Run command
136:07 - already set up for us and if I enable
136:10 - hidden files here you will be able to
136:11 - see the config file you can see we have
136:14 - our requirements.txt and some other
136:16 - files containing the list of libraries
136:18 - required
136:19 - of course we have the app itself and now
136:22 - if we click run we should now have in
136:26 - our development mode the exact same site
136:28 - that we had completed in the last
136:30 - tutorial so let's give that a second to
136:32 - run but we have now been able to
136:36 - copy the GitHub project and open it up
136:39 - on triplet
136:40 - now another thing we can do is we can
136:42 - take this project and deploy it to
136:44 - render.com
136:45 - so let's go to render.com now I'm going
136:48 - to open render.com which is the platform
136:51 - where we perform the deployment the last
136:53 - time and let's go into the dashboard
137:00 - and now in the dashboard this is my old
137:03 - careers website so now I'm going to
137:05 - click new I'm going to select web
137:06 - service
137:07 - and once again I have only given it
137:10 - permission to access certain
137:11 - repositories on GitHub so here I might
137:14 - once again want to configure the GitHub
137:16 - access for render.com so I'll click
137:18 - configure account
137:20 - I will go into the configuration here
137:22 - and give it access to the other
137:25 - repository which is
137:28 - Jovian
137:30 - careers website V2 and click save
137:35 - and now I should be able to access Joven
137:38 - Courier's website V2 so let me connect
137:40 - it with this new render project that I'm
137:42 - creating
137:43 - and let's call it
137:46 - Jovian
137:48 - careers website V2
137:52 - and all of this should largely be fine I
137:55 - can probably make it southeast Asia so
137:57 - that things load a little faster
137:59 - the branch main is fine the PIP install
138:02 - requirements for txt is fine I may just
138:04 - need to do gu Nikon
138:07 - app colon app so remember G unicorn is
138:10 - used to run a flask application in
138:13 - production and we have to give it the
138:14 - name of the file which is app without
138:17 - the dot pi and we have to give it the
138:18 - name of the flask application the
138:20 - variable which contains the flask
138:21 - application which is also app
138:23 - and I'm going to select the startup plan
138:26 - but you can also deploy it on free
138:28 - starter will just deploy a little faster
138:32 - and let's create that web service
138:36 - so now this is going to take the code
138:39 - from
138:40 - the same GitHub repository that we have
138:42 - just created and it is going to create a
138:45 - deployment that is going to be visible
138:46 - at this location Joven careers website
138:49 - v2.onrender.com
138:52 - however I want to put it on a domain so
138:55 - I am going to go into settings once
138:57 - again and under settings I am going to
139:00 - put in a custom domain
139:03 - so this is something that we did the
139:05 - last time as well so we're just
139:06 - repeating it right now so this time I'm
139:08 - going to put it on jovincareers.com so
139:10 - I've bought a new domain
139:11 - jovincareers.com I'm going to put it
139:13 - there
139:14 - and now
139:18 - because
139:20 - jovincareers.com is hosted on Google
139:22 - domains we need to configure jobin
139:24 - careers.com and point it to this render
139:27 - site jovencareers website v2.on
139:30 - render.com so let's go to
139:32 - domains.google.com that's where I have
139:34 - registered my domain
139:39 - so now here I am on my domains on Google
139:42 - Dot domains.google.com and let me click
139:46 - manage
139:47 - and now here I am going to go into the
139:50 - DNS settings so
139:52 - this is simply what you have to do to
139:55 - connect any website with a custom domain
139:58 - so let's
140:01 - copy this information so it looks like
140:03 - for jovencareers.com we need to add an a
140:07 - name or Alias record
140:09 - so here I'm going to see manage custom
140:11 - records I am going to scroll down and
140:14 - click create a new record
140:16 - and this is already set to jobin
140:19 - careers.com so we don't need to put
140:20 - anything here
140:22 - there are no Alias records here so
140:24 - another option is to put an a record so
140:27 - now let's copy this value and let's
140:30 - create an a record and let's put this
140:32 - value in here
140:33 - then we also want to point
140:36 - www.jobin careers.com to the same
140:38 - location
140:39 - so I am going to this time create a
140:42 - cname record so let's
140:45 - select C name let's put www here and
140:48 - let's put this in here and let's save
140:51 - that
140:53 - and let's come back here and click
140:54 - verify so it's going to take a moment it
140:56 - is going to try to verify the domain
141:04 - and that might take maybe a minute or
141:06 - two to completely get verified so we can
141:09 - wait for it to get verified but okay
141:12 - looks like it is verified and in a
141:14 - minute or two it should also have a
141:15 - certificate so it should load properly
141:17 - so now we can actually go on Joven
141:19 - couriers website
141:21 - v2.onrender.com to access the same site
141:23 - that we already had or we could also go
141:26 - to jovencareers.com
141:28 - and we will be able to access the same
141:30 - site okay
141:31 - so once you have set up this process
141:34 - then creating a new site is actually
141:36 - very fast very quick and now we finally
141:39 - completed the first step which is to
141:40 - copy the GitHub project open it up on
141:42 - replit and deploy to render
141:44 - now the second step is to set up a cloud
141:48 - mySQL database so this is where I'm
141:50 - going to show you one way to set up a
141:52 - cloud mySQL database but there are many
141:54 - online providers that help you create
141:56 - databases the one we are going to use
141:58 - today is called planetscale.com
142:02 - so planetscale.com is a fairly developer
142:05 - friendly database and we are going to
142:07 - use it because
142:08 - it has a free plan
142:10 - which gives you a fair amount of usage
142:13 - so you can store up to 5 GB and you can
142:16 - do up to 1 billion row rates per month
142:18 - so for personal projects you should be
142:20 - able to work with the free plan
142:22 - so you have to sign up here and I'm just
142:25 - going to sign in
142:28 - and once you're signed in you will be
142:31 - asked to create a database so I am going
142:33 - to go here go down here let's zoom in a
142:35 - little bit
142:36 - and I'm going to click create
142:39 - and let's call this database Jovian
142:41 - careers
142:42 - and let's put this close to us so let's
142:45 - put this in Mumbai
142:47 - and let's create database
142:49 - so now all we've done is we have signed
142:52 - up on planetscale.com and we have
142:56 - created a new database and now once it
142:59 - is initialized we will be able to
143:01 - connect to this database
143:02 - so first we will try to just connect it
143:04 - connect to it using the MySQL workbench
143:09 - so we have a database running somewhere
143:11 - in the cloud this is a mySQL database
143:14 - which is one type of relational database
143:16 - that can be accessed using SQL and MySQL
143:20 - workbench is a downloadable tool it is a
143:23 - tool that you can download on your
143:25 - computer to connect to this database
143:28 - right so you download MySQL workbench
143:31 - and using it you can connect to this
143:32 - database that is running on the cloud
143:35 - so let's download MySQL workbench you
143:37 - can click download now and then you can
143:39 - select the installation for your
143:41 - operating system in my case it is mac
143:43 - and I'm not going to download it because
143:45 - I already have it installed but now I
143:49 - can
143:50 - open up MySQL workbench you can see here
143:54 - this is what it looks like once it is
143:57 - installed MySQL workbench and I'm going
144:00 - to click the plus button here now when I
144:03 - click the plus button here I can set up
144:05 - a new connection so my Planet scale
144:07 - database is running somewhere on the
144:11 - cloud and let me call it Jovian
144:14 - careers Planet scale
144:20 - all right now I need some parameters to
144:23 - connect to this database in this case it
144:26 - looks like a certain host name is set
144:29 - 127.0.0.1 that means my local computer I
144:31 - don't need that so I'm just going to go
144:33 - back here and I'm going to click connect
144:37 - and once you click connect
144:39 - now you will receive the parameters that
144:42 - you need to enter from your MySQL
144:45 - workbench and this is only shown once so
144:47 - you might want to just copy this
144:49 - information and
144:51 - paste it somewhere safe so I'm just
144:53 - going to put it here in this notepad but
144:56 - this is the information that we need to
144:57 - put into our MySQL workbench so let's go
145:01 - back to mySQL workbench so let's see
145:02 - what we need we need a host name so
145:04 - let's grab the hostname this is the
145:06 - hostname we need to provide
145:09 - then the port is something that is
145:11 - already configured we don't need to
145:13 - change anything here then we need a
145:15 - username so this is the username
145:17 - then we need a password so you can click
145:19 - store in Keychain so that the password
145:22 - gets saved so I'm going to copy this
145:24 - password and I am going to then paste it
145:27 - here
145:28 - and this should ideally get saved on my
145:30 - computer then we need a default database
145:33 - name which is called Joven career so I'm
145:36 - just going to do that as well and you
145:38 - can test the connection
145:39 - so when you type test connection it is
145:43 - going to try to connect and tell you if
145:44 - the configuration is correct
145:46 - and once the test connection is done we
145:49 - can click OK and now we can connect to
145:51 - this database from the MySQL workbench
145:54 - home so it should be listed here so this
145:56 - is something that you need to do the
145:58 - first time although you should keep hold
146:00 - on to that password you should not lose
146:02 - track of this password because this will
146:04 - not be shown once we close this
146:06 - window here okay
146:09 - all right so now we are connected to a
146:11 - database running on the cloud so let's
146:13 - just look at what databases are present
146:16 - in the server so if we do show databases
146:19 - you can see here it has a bunch of
146:21 - system databases like information schema
146:23 - MySQL sys and performance schema so this
146:26 - is all for internal use of MySQL we
146:28 - never touch these but there is this one
146:30 - new database called Jovian couriers so
146:32 - great now we have a new database Joven
146:34 - careers and let's see what's inside this
146:37 - database so first we say use
146:39 - Jovian careers
146:42 - and again this is basic SQL syntax so if
146:45 - you take any quick beginner tutorial on
146:47 - SQL you will learn this so now we are
146:50 - using the jobin careers database and now
146:52 - we can show the tables in this database
146:54 - by typing show tables
146:58 - and the casing doesn't matter but I just
147:00 - prefer using uppercase for any keywords
147:02 - so we've said show tables and currently
147:05 - there are no tables in the database so
147:07 - information in databases is organized
147:10 - into tables each table can represent one
147:12 - kind of entity for example you may have
147:14 - one table for jobs you may have one
147:16 - table for applications you may have one
147:18 - table for users and so on so think of
147:20 - tables like sheets in a spreadsheet
147:23 - workbook so each sheet represents a
147:26 - different kind of data all right so
147:28 - right now there are no tables so now we
147:30 - need to create some tables into our
147:32 - database so let's come back here we have
147:35 - set up a cloud mySQL database on planet
147:37 - scale and now we are going to create a
147:40 - table called jobs and add data to it
147:43 - using the MySQL workbench
147:45 - so here is how we create a table we say
147:47 - create table
147:50 - and then we give the name of the table
147:53 - and then we provide the list of columns
147:56 - in a table so table contains several
147:58 - rows and several columns so the columns
148:01 - have to be specified when we create the
148:03 - table so each job is going to have an ID
148:06 - so the First Column is going to be
148:08 - called ID and it is going to be an
148:10 - integer and I do not want the ID to be
148:13 - null so if you want to make something a
148:15 - required column then you say not null
148:17 - and additionally I am going to provide
148:20 - this additional argument called Auto
148:23 - increment
148:24 - so that I don't have to provide unique
148:26 - IDs so
148:28 - I don't have to think about entering an
148:30 - ID every time I try to insert a new row
148:32 - into the table a new ID will
148:34 - automatically be generated for me so
148:37 - that's why I'm putting in Auto increment
148:38 - here okay that's great then we have the
148:41 - job title which is some text so I'm just
148:43 - going to use where care so where care is
148:46 - the data type that is used to store text
148:48 - and the job title can be let's say 200
148:52 - 250 characters so I'm going to just put
148:54 - in 250 here as the maximum length and we
148:57 - of course do not want the job title to
148:59 - be null or empty either
149:02 - then we have the job location which is
149:04 - also going to be a
149:07 - piece of text and that should also not
149:10 - be null
149:11 - in case the there is no location we can
149:13 - just put remote into it then there is a
149:16 - salary so it's possible that there may
149:18 - be some jobs where the salary is not
149:20 - specified so I'm going to use an INT
149:23 - here so salary of type int it is going
149:26 - to be an integer and it can be null so
149:29 - nothing more now we may have locations
149:32 - outside India as well we may have
149:34 - locations in multiple countries so we
149:35 - may want to keep track of the currency
149:37 - in which the salary will be paid so I'm
149:40 - just going to put in another column
149:41 - called currency which is going to be
149:43 - aware car and let's just put 10
149:45 - characters here not more and then
149:48 - finally with each job there are some
149:51 - responsibilities
149:53 - so I'm going to put in responsibilities
149:55 - here and let's also make that where care
149:58 - and this can be a large thing so I'm
150:01 - just going to give it the length 2000 so
150:03 - that you can put a whole bunch of
150:04 - information in here
150:06 - and then there are going to be some
150:08 - requirements some qualifications so I'm
150:10 - going to have another column called
150:11 - requirements let's also call that VAR
150:14 - care
150:17 - and that is the requirements column so
150:21 - far our table is looking good we have an
150:23 - ID title location salary currency
150:26 - responsibilities and requirements and
150:28 - one last thing I'm going to add here is
150:30 - the primary key
150:32 - and I'm going to make the ID the primary
150:34 - key which means that we are telling SQL
150:38 - that the ID should always be unique
150:40 - every row should have a unique ID and
150:42 - you can get data out of the table by
150:45 - providing a specific ID so I can say
150:47 - give me the information for the job with
150:50 - the id5 and that is what a primary key
150:53 - does all right so now we are ready to
150:55 - create the table so let's just click the
150:58 - lightning button here or we could also
151:00 - just press command enter or control
151:01 - enter and that should have created the
151:03 - table now so now if I go in into a new
151:05 - tab I've created a new tab here using
151:08 - command t or Ctrl t on Windows and now
151:11 - if I say short tables
151:14 - you can see that we have a table called
151:16 - jobs
151:17 - great and now if you want to look at
151:19 - information inside jobs we can say
151:21 - select
151:22 - star from jobs again this is basic SQL
151:26 - this is basic SQL that you will learn if
151:29 - you take any tutorial but if you do not
151:31 - want to type all these queries then you
151:33 - can also use the schemas tab here in the
151:35 - left sidebar and just refresh it once
151:37 - you can see under jobin careers you have
151:40 - tables and under tables you have jobs
151:42 - and you can just click this button here
151:45 - which is going to display the
151:47 - information inside the jobs table and it
151:49 - does the exact same thing by simply
151:51 - running select star from
151:52 - jovencareers.jobs all right so right now
151:55 - there is no data within the table now we
151:58 - can insert data into the table we can do
152:00 - this using an insert statement so we can
152:03 - do insert into
152:05 - jobs
152:07 - and while inserting we first have to
152:09 - provide a list of columns so if I go
152:11 - back here you can see that we have all
152:13 - these columns but out of all these
152:15 - columns only three columns are
152:16 - compulsory title and location
152:20 - and ID but the ID is going to be Auto
152:23 - generated using this Auto increment
152:25 - function so there's going to be a
152:27 - counter inside the table and it's going
152:28 - to Auto generate the ID for us so we
152:31 - only really need to provide the title
152:33 - and location those are the only two
152:34 - required fields to create a job so I'm
152:37 - going to say that we're going to provide
152:38 - the title and location and the values we
152:41 - want to put for title and location are
152:43 - data analyst
152:46 - and
152:47 - Bengaluru
152:49 - India
152:51 - so now we have written some code to
152:53 - insert some data into the database and
152:55 - let's run that
153:01 - and now you can see that here the insert
153:04 - statement executed successfully and it
153:06 - says one row was affected so if we now
153:08 - try select star from
153:10 - jovencareers.jobs then it is going to
153:13 - show us this information data analyst
153:15 - Bengaluru
153:17 - now this is one way to insert
153:19 - information into a SQL database from the
153:22 - MySQL workbench by executing a query but
153:25 - MySQL workbench also provides a nice
153:28 - user interface so we can type for
153:30 - example data scientist
153:32 - and I can type here New Delhi
153:35 - India
153:37 - and maybe I can put in some salary
153:39 - information as well so let me put in
153:42 - 15 lakhs so zero zero zero zero zero and
153:46 - let me put in the currency rupees
153:48 - and after entering this information you
153:51 - can see an apply button here at the
153:53 - bottom of the table you can click apply
153:55 - and that is going to generate an insert
153:57 - statement for us so it's the exact same
153:59 - insert statement let me just zoom in
154:01 - here a little bit for you insert into
154:03 - jovencareers.jobs title location salary
154:05 - currency data scientist New Delhi India
154:08 - and so on and click apply and now that's
154:12 - going to execute this SQL query for you
154:14 - so MySQL workbench allows you to access
154:17 - and manipulate the database without
154:19 - having to write SQL queries as well and
154:22 - we can also update existing records so
154:24 - for example I could just do
154:26 - 10 lakhs here
154:28 - and I could just put in rupees here as
154:30 - well
154:32 - and let's click apply and that's going
154:35 - to apply that for us okay
154:38 - great so one last thing I'm going to do
154:40 - is I'm going to grab a bunch of
154:42 - possibilities and requirements
154:43 - information for these jobs and put that
154:45 - in here as well so I have a link here to
154:48 - some sample jobs data
154:50 - so I'm just going to grab these sample
154:52 - responsibilities let me double click
154:54 - inside it copy it and come here double
154:57 - click inside and paste it
155:00 - and some sample requirements for the
155:02 - data analyst role let me double click
155:03 - copy here and paste it
155:07 - and similarly we have some sample
155:09 - require responsibilities for the data
155:11 - analyst for the data scientist role so I
155:13 - double click here and paste it
155:15 - and finally we have some sample
155:17 - requirements for the data scientists
155:18 - role so I'm going to bring that in here
155:20 - and I'm going to paste that in as well
155:22 - and I'm going to click apply
155:24 - and that's going to put all this
155:26 - information into the planet scale
155:29 - database okay so remember we are still
155:31 - connected to a database on the cloud so
155:33 - all this information is getting written
155:35 - into the database in the cloud
155:37 - great so now we have done the next step
155:41 - which is to create a jobs table and add
155:44 - data using the MySQL workbench
155:47 - so it's just step by step simple process
155:50 - of first creating a table using the
155:52 - create table statement and if you don't
155:54 - remember this you can always just look
155:55 - this up so create table SQL just search
155:58 - that online and maybe check out
156:00 - tutorials point and they have the syntax
156:03 - and then they have an example so this is
156:07 - not something that you have to remember
156:08 - or by heart the idea is you should be
156:10 - able to figure out how to create a table
156:11 - in a mySQL database okay so we created
156:14 - the table and then using the MySQL
156:17 - workbench we inserted some data into the
156:19 - table as well okay so now we can connect
156:22 - to this database from replit using SQL
156:25 - Alchemy
156:28 - so let's go back into replit here let me
156:31 - open up the rebel once again
156:33 - Courier's website V2
156:37 - so let's go back into replit and now
156:39 - inside replit I am going to create a new
156:42 - file here called database dot pi
156:45 - okay
156:46 - now in the database dot pi
156:49 - file I'm going to write some code to
156:52 - connect to the database and extract some
156:54 - data from the database and we are going
156:56 - to do this using the SQL Alchemy Library
156:59 - SQL Alchemy okay SQL Alchemy so you can
157:03 - also search this online SQL
157:05 - Alchemy
157:06 - it is a library you can see here that it
157:09 - is the database toolkit for Python and
157:12 - let's just search SQL Alchemy tutorial
157:14 - Maybe
157:16 - and here there seems to be
157:20 - let's see
157:21 - there is a tutorial
157:28 - yeah so there is a tutorial on tutorials
157:30 - point you can follow that and there is
157:32 - also an official tutorial so here you
157:34 - can see
157:35 - docs.sqlalchemy.org tutorial so you can
157:39 - check this out as well
157:40 - now to get started we need to First
157:43 - install SQL Alchemy and to install SQL
157:45 - Alchemy all we need to do as you might
157:47 - have guessed it already is come into the
157:50 - shell
157:51 - and inside the shell type pip install
157:54 - SQL
157:55 - Alchemy
157:58 - and that installs SQL Alchemy for us now
158:01 - once SQL Alchemy is installed we can
158:03 - import SQL Alchemy and we can check its
158:06 - version so I can come back here and I've
158:08 - imported SQL Alchemy and let me just
158:10 - print SQL Alchemy
158:12 - dot version
158:14 - I believe it's underscore underscore
158:17 - version underscore underscore and this
158:19 - can make this can help us ensure that
158:21 - SQL Alchemy is installed and we have the
158:22 - right version so let's come back here
158:24 - into the shell for a moment I'm going to
158:26 - close the browser
158:27 - and let's just reset the view here
158:30 - and let's type python
158:33 - database dot Pi so we are asking python
158:36 - to execute the code inside the file
158:38 - database dot pi and let's run that and
158:41 - now you can see here that it prints
158:43 - 1.4.23 so looks like we have a valid
158:46 - version of SQL Alchemy installed
158:49 - next the next step is to establish the
158:52 - connectivity so I'm going to click the
158:54 - next section here and look at the code
158:55 - here
158:57 - so next it looks like we need to import
158:59 - from SQL Alchemy create engine and let's
159:03 - do that so from SQL Alchemy import
159:05 - create engine I am no longer going to
159:07 - print the version so I'm going to skip
159:09 - this as well and then we need to create
159:12 - an engine which is going to connect with
159:14 - the database okay the way we do this is
159:17 - we say engine equals create engine and
159:19 - here we provide information about how to
159:22 - connect to the database so all the
159:24 - information for connecting to the
159:25 - database remember all of this
159:27 - information all of this information has
159:29 - to be provided in a special format now
159:32 - the example given on this page talks
159:35 - about how to connect to sqlite which is
159:38 - a different type of database from MySQL
159:41 - which is what we are using so if we just
159:44 - search SQL Alchemy
159:47 - connect to mySQL
159:51 - and check the resources so again on the
159:54 - SQL Alchemy doc documentation website
159:56 - there is information about how to
159:58 - connect to mySQL as well
160:01 - and we can see here that the way to do
160:03 - it is using this using Create engine
160:06 - MySQL plus pi MySQL colon colon username
160:10 - colon password at Host slash database
160:14 - name okay so let's just copy that and
160:16 - let's put this in here so let's go here
160:18 - and let's do engine equals create engine
160:21 - MySQL plus pi MySQL what is the username
160:25 - well the username is something that we
160:27 - can get from here this is the username
160:30 - then we have a password so let's get the
160:32 - password Here
160:34 - and depending on which database provider
160:36 - you're using this information is going
160:38 - to be different so don't let all this
160:40 - scare you it's all simply just
160:42 - configuration to make sure that we can
160:44 - connect our code to the database that's
160:46 - all okay that was a password then we
160:49 - have the host so the third thing is the
160:51 - host so I'm going to grab the host here
160:54 - and I'm going to put the host
160:56 - information here and finally the
160:58 - database name we want to connect to and
161:00 - the database name is Joven couriers and
161:03 - let's check that let us now run this
161:05 - again so my python database dot Pi just
161:08 - to see the engine was created properly
161:12 - okay so now we get an error no module
161:14 - named Pi MySQL so looks like we need to
161:17 - install another Library so SQL Alchemy
161:20 - internally depending on which type of
161:22 - database you want to connect to requires
161:24 - some Library which can serve as a
161:28 - connector so I'm also going to install
161:30 - pip install ma Pi MySQL so because SQL
161:34 - Alchemy can connect to many different
161:36 - types of databases so it doesn't ship
161:38 - with all the built-in connectors you
161:40 - need to install a connector depending on
161:41 - which kind of database you are
161:43 - connecting to
161:44 - so I'm going to run pip install Pi MySQL
161:47 - and let us try to run python database.5
161:50 - once again
161:54 - it looks like this is running
161:55 - so great now looks like we are able to
161:58 - create an engine so we have given it
162:00 - some information and we have created an
162:02 - engine
162:02 - The Next Step would be to get some
162:04 - information out of the engine so this is
162:07 - how you can get some information out of
162:10 - the database by making a connection to
162:13 - the database using the engine so here's
162:15 - what you should do first it says we need
162:17 - to import text so from SQL Alchemy
162:20 - import text all right we've done that
162:22 - and then with engine.connect as con so
162:26 - this is just a way to set up a
162:27 - connection we are saying connect to the
162:29 - engine and give the connection a name
162:32 - con so then we can use that connection
162:34 - to execute commands onto that database
162:37 - and then anything we write inside the
162:39 - width can use this connection and once
162:42 - we come out of the width the connection
162:43 - will be automatically closed so that is
162:45 - the purpose of width you will see within
162:47 - a lot of places when we are connecting
162:48 - to databases or when we are working with
162:50 - files so what we do is we either open a
162:53 - file or connect to a database and then
162:54 - give that connection a name then we do
162:57 - some work with it and once we get out of
162:59 - the width the connection is closed
163:00 - automatically so let's grab this with
163:04 - engine.connect as con
163:06 - and then we can say result equals con
163:09 - dot execute and here we can give any SQL
163:12 - query okay in this case they've printed
163:14 - select hello world so they're not really
163:16 - querying the database but let me change
163:19 - this to select star from jobs we know
163:22 - that we our database has a table called
163:24 - jobs so let me just select start from
163:26 - jobs and then let us print what we get
163:29 - back so what we get back any database
163:31 - query that you make on SQL is going to
163:33 - give you a list of rows a table
163:35 - essentially of some sort right a list of
163:37 - rows of results so let's just print
163:39 - result.all which gives us all the rows
163:42 - of the result at once and let's try to
163:44 - run that now python database dot pi
163:48 - okay looks like there was an error and
163:51 - this is what is going to happen all the
163:53 - time whenever you are working on any
163:55 - project in Python 80 percent of the time
163:58 - the code you write is not going to work
163:59 - the first time there's going to be an
164:01 - error but that should not scare you you
164:03 - just have to read the error carefully
164:04 - and see what it says so let's see what
164:07 - it says now the way to understand python
164:10 - errors is to scroll all the way to the
164:12 - bottom and read what is given at the
164:14 - bottom so if we see carefully here it
164:17 - says there is an operational error so
164:19 - there was some error operationally
164:21 - internally inside SQL Alchemy and it
164:23 - says code unavailable server does not
164:26 - allow insecure connections the client
164:28 - must use SSL okay so there are some
164:33 - secure ways to connect to a database and
164:35 - there are some insecure ways so you may
164:37 - have heard of HTTP and https so all this
164:40 - is saying is that we need a slightly
164:42 - more secure way to connect to a database
164:45 - okay
164:46 - now we can explore how to do this first
164:48 - of all here we can go back into this
164:51 - connection MySQL and Maria DB and go
164:54 - down here and check how to connect
164:58 - securely so let's go back here and let's
165:01 - see maybe there is some information
165:02 - about how to connect using how to
165:04 - connect securely I'm going to search SSL
165:06 - and looks like there is some information
165:08 - here about
165:10 - SSL
165:12 - so here we are using pi MySQL that's the
165:15 - library we just installed and looks like
165:17 - for SSL connections it accepts the same
165:19 - arguments that mysqldb accepts as
165:22 - described in SSL connections so let's
165:24 - click that and this is something that
165:27 - you will often have to do when you are
165:28 - working with the library you will have
165:29 - to go into its documentation just try to
165:31 - understand what they're saying and try
165:33 - to figure out how to make things work
165:36 - okay so looks like if we want to connect
165:38 - securely we will have to pass something
165:40 - called connect arcs we will have to pass
165:43 - this into the create engine function and
165:46 - where inside connect tasks we will have
165:47 - to pass a dictionary with some
165:49 - information about SSL okay even I don't
165:52 - understand exactly what this is for or
165:54 - what this does but all I'm doing is
165:56 - interpreting the error here the error
165:58 - that I saw on replit searching for it in
166:01 - the documentation that inside I want to
166:04 - connect securely using SSL so there was
166:07 - some mention of SSL TLS here so I just
166:09 - searched that and I found some
166:11 - information here so so now I'm going to
166:12 - come back here and I'm going to make
166:14 - that change in my create engine function
166:16 - so now we have this
166:19 - so the first thing I'm going to do is
166:20 - maybe extract out this database string
166:22 - so let me just call it connection or DB
166:26 - connection
166:29 - string equals
166:31 - and let's put that into
166:34 - this
166:37 - so DB connection string so that's our
166:40 - first part but apart from this
166:43 - we also now need to pass this
166:45 - information which is connect args so
166:47 - let's build it step by step so connect
166:50 - args okay let's come back here let us
166:53 - put in Connect talks and connect args
166:55 - requires a dictionary so in this
166:58 - dictionary we are going to have a key
166:59 - called SSL so let's pass in SSL
167:06 - and now
167:07 - inside it there are these values that
167:09 - have to be provided I believe this is
167:12 - going to change depending on which
167:14 - database provider you're using so just
167:16 - like this has to change based on the
167:18 - database provider this also has to
167:19 - change based on the database provider so
167:22 - how about we go back into our database
167:24 - provider and here there is some
167:27 - information about how to connect with
167:28 - python so let's check that and looks
167:31 - like they've given some information
167:32 - about what to install they've given some
167:34 - information about like how to configure
167:36 - it so they are using something other
167:38 - than SQL Alchemy and here looks like
167:40 - they have given some information about
167:41 - the SSL certificate right so if you look
167:45 - here we have SSL and then inside SSL we
167:48 - have this sslca so let me just put that
167:50 - in here sslca
167:52 - and let's just paste it here sslca now
167:56 - instead of this value all I'm going to
167:58 - do is I'm going to get this value from
168:00 - planet scale okay so there seems to be
168:03 - some certificate that is required and
168:05 - the way you configure that certificate
168:07 - is by passing this value
168:09 - slash Etc SSL slash certificate.pe okay
168:13 - and I have just saved that and let's
168:17 - hope this works in a lot of cases you're
168:19 - just hoping and trying but let's see
168:24 - okay look like it worked so there were a
168:28 - few complications we ran into a few
168:31 - errors but ultimately we were able to
168:34 - figure out a connection string to
168:36 - connect to the planet scale database and
168:39 - then we were able to figure out how to
168:40 - connect securely and this is not
168:42 - something that you'll figure out
168:43 - immediately sometimes you may have to
168:45 - spend 20 30 minutes or sometimes you may
168:47 - have to just look online Planet scale
168:50 - SQL Alchemy
168:53 - how to connect
168:57 - and here it says that connect to any
168:59 - MySQL client to Planet scale using
169:01 - connection strings so there is some
169:04 - information available online generally
169:06 - speaking so you can see here that there
169:07 - is some information about connection
169:09 - strings and things like that or you can
169:11 - also go on stack overflow.com so you can
169:13 - always go on stack overflow.com and you
169:18 - can just post a question here and
169:20 - somebody will try and answer the
169:21 - question for you or you can ask us if
169:24 - you are part of the job in community
169:25 - right so developers I have to look up
169:29 - documentation developer developers have
169:31 - to try and figure things out by trial
169:34 - and error and try to look at the docs
169:36 - try to look at references try to look at
169:37 - blogs and figure it out and often they
169:39 - just have to ask each other to figure it
169:41 - out but this is what you had to do to
169:43 - connect to a planet scale database now
169:45 - connecting to a Google cloud or an AWS
169:48 - database may be slightly different but
169:50 - the important thing is we are able to
169:52 - get this data out so that's great now
169:54 - I'm curious what is the type of this
169:57 - object that is getting printed when we
169:58 - call result.all what is the type of the
170:01 - data that we get so first let me print
170:04 - type of result
170:06 - and then
170:08 - let's call this result all equals result
170:12 - dot all and let me print the
170:16 - type of result all and then let's also
170:21 - print result all itself
170:24 - and let's include some information here
170:27 - about what we are printing always a good
170:29 - idea otherwise you might get confused
170:30 - about what you are printing exactly
170:37 - so here we are checking the type of
170:39 - result.all
170:42 - and then finally here we are checking
170:45 - the
170:46 - result.all itself
170:49 - okay
170:52 - so this is what we are going to print
170:54 - just to get a better understanding of
170:56 - what this result is
171:05 - okay let's run python database.pi once
171:07 - again
171:08 - and looks like the result is of the type
171:11 - SQL Alchemy dot cursor but as soon as we
171:14 - call result.all we get back a list so
171:17 - you can see that the type of result.all
171:19 - is the class list so the result.all is
171:22 - actually a simple plain python list as
171:24 - soon as you do result at all it becomes
171:26 - a python list and then you have the
171:29 - result.all this is all the information
171:31 - that we obtained but let's check the
171:33 - type of the first element of result all
171:35 - so result or result all is a list so now
171:38 - we can say result all zero so just to
171:41 - look at the first element remember in
171:43 - Python elements are numbered from 0 in a
171:46 - list
171:48 - so result all 0 is simply this object
171:50 - and let's try to print the type of this
171:52 - result all zero so we are getting the
171:55 - first element out of the list that we
171:56 - obtained using result dot all which
171:59 - result was a cursor result.all is a list
172:01 - of results and let's now get the first
172:03 - element so let's just call it first
172:05 - result
172:09 - equals
172:10 - result all zero
172:13 - and let's just print the type of first
172:15 - result
172:19 - okay and this is simply the
172:24 - type of
172:27 - first result
172:37 - okay so result was of the type cursor
172:39 - then or cursor result then result.all
172:42 - was of the type list and finally result
172:46 - first result is of the type Legacy row
172:49 - okay
172:51 - now
172:53 - I don't know how to work with Legacy row
172:55 - I don't know how to work with all these
172:57 - special classes I know how to work with
172:58 - lists and dictionaries
173:00 - so I might want to convert this row into
173:03 - a dictionary because ultimately what
173:05 - each row of a database contains is a
173:07 - bunch of columns and a bunch of values
173:09 - for each column so let me search how to
173:12 - convert SQL
173:15 - Alchemy
173:17 - row into dictionary
173:19 - into python dict
173:22 - okay
173:24 - so there's an exact question how to
173:27 - convert SQL Alchemy row object to a
173:29 - python dictionary and that is how a lot
173:32 - of programming works you just search the
173:33 - right question and you get the answer
173:35 - and looks like what the way you do it is
173:39 - you just do underscore underscore dict
173:42 - underscore underscore
173:45 - so let's go back here and let's say
173:47 - first result
173:49 - dict equals result all which is a list 0
173:54 - which gives us a legacy result dot
173:56 - underscore underscore dick underscore
173:58 - underscore okay there's no way I could
174:00 - have guessed this I just had to look it
174:01 - up right so that's an important part of
174:03 - development and now let's check the type
174:06 - of first
174:08 - result date and make sure that it is a
174:11 - dictionary
174:12 - so I'm just also going to type this out
174:14 - here
174:17 - type of first result
174:20 - date
174:27 - and while we write it let's also print
174:28 - first result date
174:33 - okay so let's run this once again
174:43 - all right well
174:46 - could not locate column in row
174:52 - okay maybe this did not work maybe we
174:55 - can try another approach let me try this
174:57 - let me just call dict on this let me
175:00 - just call dict and see if maybe that
175:02 - works
175:14 - okay that actually worked so all we had
175:17 - to do is we had to call the dict
175:19 - function so I just took a guess here and
175:21 - sometimes you have to try a couple of
175:22 - approaches and what that did is it took
175:25 - one row of result and converted that
175:27 - into a python dictionary you can see
175:29 - here this is a python dictionary it
175:31 - contains the ID title Etc so now here's
175:34 - what I can do I get the result and I can
175:37 - say
175:38 - result dicts equals the empty list and I
175:43 - can say for Row in result dot all so
175:47 - result.all is going to be a list and for
175:49 - row and result at all each we are going
175:51 - to get one row each and then I'm just
175:53 - going to say result dicks dot append
175:58 - dict row okay and let's get rid of all
176:01 - that
176:03 - and finally let's just print result
176:07 - predict
176:09 - okay and or result text and let's run
176:14 - that one last time and we'll see why all
176:16 - how all of this is going to come
176:17 - together
176:21 - okay so now we have this list of
176:25 - dictionaries you can see here that this
176:26 - is a list and inside this list this is
176:28 - one object and then here inside this
176:31 - list this is the second object right so
176:33 - we had two jobs and the responsibilities
176:35 - for two of those jobs and now all of
176:37 - that data has come up here so we
176:39 - inserted that data from our MySQL
176:41 - workbench and we are getting that data
176:43 - into replit okay so this is good but we
176:47 - probably don't want to print this
176:49 - information we actually want to send
176:50 - this information back to the site when
176:52 - we are trying to access the job page so
176:55 - when we are trying to access Jovin
176:56 - careers
176:57 - dot x y z
176:59 - this is where we want to print the this
177:01 - is where we want to display this
177:03 - information right so let's get rid of
177:06 - this for now and I'm just going to copy
177:08 - this code actually I'm just going to
177:10 - copy all of this code
177:15 - and let's get rid of this and let's come
177:18 - back into our app.pi file
177:23 - and in our app.pi file let's come back
177:26 - here into the hello Jovian into the main
177:29 - route that we had and let's define a
177:30 - function
177:32 - let's call it load jobs
177:34 - from DB okay and what this does is with
177:40 - engine.connect as con and we have to
177:43 - just fix the indentation here
177:45 - yeah so with engine.connect as con and
177:48 - there is an error because we need to
177:50 - import engine so I can say here from
177:53 - database now because we have this file
177:55 - database we can use it like a module so
177:57 - this is the other way of using python
177:58 - files you can invoke them as a module so
178:01 - from database import engine
178:03 - so now from the database file where we
178:06 - had created the engine we are importing
178:08 - that engine inside app
178:11 - .pi and then we are saying inside our
178:14 - load jobs from DB function with
178:17 - engine.connect as con
178:20 - result equals con dot execute and there
178:23 - is this text so let's import that as
178:24 - well so from SQL
178:27 - Alchemy import
178:30 - text great
178:33 - so now text should be fine I believe
178:35 - it's from SQL alchemy.sql if I'm not
178:39 - mistaken let's see here
178:41 - okay no just SQL Alchemy so
178:44 - let's remove text from here let's come
178:46 - back into app.pi
178:52 - and we probably don't need this yeah
178:54 - okay so with
178:57 - engine.connect.com.execute and get a
178:59 - result then instead of calling this
179:01 - result dicks basically this is just a
179:02 - list of jobs right so I'm just going to
179:04 - call this jobs and I'm going to get each
179:07 - row from the result and I'm going to
179:08 - convert that row into a dictionary I'm
179:10 - going to append it to the list jobs and
179:12 - finally I'm going to return jobs
179:14 - okay great so now we have this function
179:17 - load jobs from DB
179:19 - and that function returns a list of jobs
179:22 - so now I can go in here and I can say
179:25 - jobs
179:29 - equals
179:35 - load jobs from DB
179:38 - great
179:39 - and now I can go ahead and remove this
179:44 - so
179:46 - before I do this I just want to show you
179:48 - the old version the version that we have
179:50 - currently running
180:00 - yeah so the version that we have
180:01 - currently running you can see here it
180:03 - contains four roles data analysts data
180:05 - scientists front-end engineer back-end
180:07 - engineer and that is coming from this
180:09 - list but let's get rid of this list
180:13 - and let's come here and let's call load
180:17 - jobs from DB
180:20 - and
180:22 - oops now for the jobs input let us
180:27 - provide jobs so we're saying jobs equals
180:29 - jobs basically what we're saying is
180:31 - inside the template home.html when you
180:34 - try to access the word jobs then you
180:37 - should be using the variable jobs that
180:39 - is defined here okay so don't let this
180:41 - notation confuse you this is the name
180:44 - that is going to be used inside
180:45 - home.html and this is the name that is
180:48 - the variable that you want to supply as
180:50 - the information so for example you can
180:53 - call it jobs list and then you would
180:55 - have to put jobs list here okay but just
180:57 - to keep it simple I'm going to call it
180:59 - jobs equals jobs
181:01 - and the company name is Joven so let's
181:03 - retain that okay so now I have just made
181:06 - a major change to my application I've
181:08 - actually removed all the
181:10 - hard-coded data and I am loading that
181:13 - information from a cloud-based database
181:15 - so now if I scroll down here you can see
181:17 - that there are two positions data
181:19 - analyst and data scientist and those are
181:22 - exactly the positions that we have
181:24 - entered into our database which we can
181:26 - verify in the MySQL workbench as well
181:29 - okay
181:30 - so I think that's pretty good it took
181:33 - some work but once you know how to do it
181:35 - the first time it is exactly the same
181:38 - thing each time or the entire code that
181:40 - we had to write was maybe just 11 lines
181:42 - of code and then we were able to create
181:44 - this helper function and you know what
181:46 - I'm just going to move this helper
181:47 - function inside database.pi so that
181:50 - I don't even have to worry about
181:54 - making sure my routes and functions are
181:56 - separated so I'm just going to put this
181:58 - here
181:59 - and let me put text back here and now in
182:02 - app.pi instead of importing something
182:05 - from SQL Alchemy or importing the engine
182:06 - I can just say load jobs from DB okay so
182:10 - this is good encapsulation good coding
182:12 - practice that all your database related
182:14 - logic is going to be here inside
182:16 - database dot pi and it simply has this
182:19 - function load jobs from DB which you can
182:22 - use inside app.pi
182:25 - okay so that I think was a good first
182:28 - step so now what we have done is we have
182:30 - connected to the database from replit
182:32 - using SQL Alchemy and then we also went
182:35 - ahead and we displayed the list of jobs
182:37 - from the cloud DB using SQL Alchemy
182:40 - so just to recap we started by
182:44 - creating a copy of the GitHub project
182:46 - that we had the last time and then we
182:49 - opened it up on replit and we also
182:50 - deployed it to render.com
182:53 - that was pretty straightforward just
182:54 - repeating what we had done the last time
182:57 - then we set up a cloud mySQL database on
182:59 - planetscale.com so we went to
183:01 - planetscale.com created a new database
183:03 - and then we
183:05 - used the credentials from the planet
183:07 - scale setup to connect to the database
183:10 - so we connected to the database from the
183:12 - MySQL workbench and we created a jobs
183:15 - table and this was the code used to
183:17 - create the jobs table and then we added
183:19 - data into it in the MySQL workbench
183:21 - using insert statements but also using
183:25 - the user interface not only can you add
183:28 - data you can also update data and you
183:30 - can also delete information for example
183:31 - I can click delete here and then click
183:33 - apply and that can delete information as
183:35 - well
183:37 - then we saw how to collect connect to
183:39 - the database from replit using SQL
183:41 - Alchemy so we created we imported the
183:44 - SQL Alchemy Library we created a
183:46 - database connection string and then we
183:49 - created an engine and finally we created
183:53 - a helper function to connect to the
183:55 - engine and execute the statement select
183:58 - star from jobs and finally get the
184:01 - result and convert the rows of the
184:03 - result into dictionaries and create a
184:05 - list of dictionaries which would just be
184:07 - the list of jobs and pass that into app
184:10 - dot pi and now instead of having a list
184:13 - of dictionaries that we had hard coded
184:15 - put into our code we are now getting the
184:17 - list of dictionaries from the database
184:19 - and I'm going to change this here as
184:20 - well into this other API which was using
184:24 - jsonify and I'm going to do the same
184:26 - thing load jobs from DB and jsonify jobs
184:30 - and now if I go back here and open the
184:33 - site and go to slash API jobs see this
184:36 - other API this this other route is at
184:38 - slash API slash jobs so I'm going to
184:40 - open slash API slash jobs
184:44 - and you can see here that this is the
184:46 - Json format of the information here
184:49 - which is the exact same thing
184:54 - except on the main page we are taking
184:57 - that Json data and we are displaying it
184:59 - but here we are just displaying it as
185:02 - plain Json okay and of course how do we
185:05 - put the data from the jobs dictionary
185:07 - how do we actually display that data
185:09 - here all of that is done inside this
185:11 - template home.html so inside home.html
185:15 - we have this
185:16 - for Loop so we say for job in jobs so we
185:19 - get each dictionary out so we get each
185:21 - dictionary out from the list of jobs and
185:24 - then we pass that information into job
185:26 - item.html and job item.html contains
185:30 - information here like it it extracts a
185:33 - job title so it is going to take this
185:36 - dictionary here
185:37 - and it is going to extract the title
185:39 - which is data analyst and it is going to
185:41 - put that title here inside an H4 tag
185:44 - then it is going to extract the location
185:46 - and display the location here and it is
185:49 - going to extract the salary and display
185:52 - the salary here
185:53 - so that's rather nice now let's go back
185:57 - into the MySQL workbench and insert a
185:59 - third job role and let's see what
186:00 - happens
186:01 - so let's go into here let's go into
186:04 - front-end developer let's grab that
186:06 - let's put that in here
186:08 - so front-end developer is the role
186:14 - okay now let's come back here let's grab
186:16 - location the location is remote so I'm
186:19 - going to come in here I'm going to paste
186:21 - that
186:21 - let's grab the salary here
186:27 - and I'm going to come in here and paste
186:28 - that let's grab this is still in rupees
186:32 - so let's grab that and let's put that in
186:34 - here
186:36 - and then let's put this in here as well
186:41 - all right last piece is the requirement
186:43 - so responsibilities and requirements and
186:45 - let's put that in here we are not using
186:47 - these yet but we will soon enough
186:49 - okay and I have not added an ID because
186:52 - an ID will get added automatically so
186:55 - I'm just going to click apply and now
186:57 - that's going to create this insert
186:58 - statement for us and now we're going to
187:00 - apply it and looks like it's done so now
187:03 - here is the most interesting thing we
187:06 - have not made any changes to our code
187:08 - but if I go here and reload this page
187:13 - you will now see that the front-end
187:15 - developer code shows up so what's
187:17 - happening is when we visit Jovian
187:19 - Courier's website
187:20 - v2.akashness.reple.com then
187:23 - a request is sent from your browser
187:27 - to this flask server that is running
187:29 - here
187:30 - and the flask server here is listening
187:33 - for requests so that is why it's called
187:35 - a server because it listens for requests
187:37 - and it serves some information back so
187:39 - it listened for the request
187:41 - and based on the request it went into
187:44 - the app routes and it checked which is
187:47 - the matching route so here we are just
187:48 - using the domain itself you're not doing
187:50 - slash API or anything we're just using
187:52 - the top level route and that is matched
187:55 - using slash which is that there is
187:58 - nothing after the domain name and then
188:01 - it invokes that function again so each
188:04 - timer request is made from the browser
188:06 - the appropriate function is invoked and
188:10 - in that function we are making a call to
188:12 - the database so the appropriate database
188:14 - query is made the appropriate SQL
188:16 - queries made by SQL alchemy that data is
188:19 - fetched then that data is passed into
188:21 - this template and that data is then
188:24 - displayed on the server right so this is
188:27 - already a dynamic web page this is no
188:29 - longer the same you're not going to get
188:31 - back the same result each time you open
188:33 - it up because there may be different
188:35 - information within the database so that
188:37 - is very powerful because that this one
188:39 - page now is not a static page it is it
188:42 - has some data that can be fetched from a
188:45 - database but now let's take this and let
188:48 - us also deploy it to render.com so to
188:51 - deploy to render.com all we have to do
188:53 - is take all the code that we have
188:55 - written and put it back on GitHub but
188:57 - there is one problem there is one very
189:00 - big problem that we have to fix
189:02 - here inside the database dot Pi file we
189:05 - have our database username password host
189:08 - all of this sensitive information now
189:10 - this information if it goes into the
189:13 - GitHub repository and the GitHub
189:15 - repository is public then everybody in
189:17 - the world will be able to see our main
189:20 - root database password which means
189:21 - anybody can directly connect to our
189:23 - database and delete information or
189:26 - change information you probably don't
189:28 - want that that is a big security risk so
189:30 - what we should be doing is we should be
189:32 - making this information a secret never
189:35 - put any passwords into a git repository
189:38 - because
189:39 - if you're going to share that repository
189:41 - with other people or if you're going to
189:42 - publish that repository online publicly
189:44 - your passwords will get exposed and
189:47 - anybody can come in and wipe out your
189:49 - database
189:50 - so generally all development and
189:53 - deployment platforms provide a way of
189:56 - storing some secret information which is
189:59 - stored differently from the git
190:01 - repository so I'm going to go here into
190:04 - the sidebar and just move down and here
190:06 - you see there is something called
190:07 - secrets so I'm going to go into Secrets
190:10 - here I'm going to click secrets and I'm
190:12 - going to create a new Secret inside
190:13 - replet and I'm going to call this secret
190:16 - DB
190:18 - connection
190:20 - string okay all uppercase with separated
190:23 - by underscore I'm going to take this
190:26 - text which is inside the codes and now
190:28 - we don't need the quotes anymore and I'm
190:30 - going to put this value here and I'm
190:32 - going to add new Secret
190:35 - and now replit will securely store this
190:38 - information within our replied account
190:41 - and this information will not be public
190:43 - this information will be private to us
190:45 - even if your Apple is public okay
190:47 - because this is secret information
190:49 - so DB connection string is now secret
190:52 - and then the way you can then get this
190:55 - information is using the OS module this
190:58 - is now available as a OS operate as an
191:01 - operating system environment variable so
191:04 - what you do is you say OS dot Enviro and
191:07 - Environ
191:08 - DB
191:09 - connection Str so you simply give the
191:12 - name of the secret and you say OS dot
191:15 - Environ and now if we run
191:20 - I think we have to go back and maybe
191:21 - reload the page so let's reload once
191:25 - okay it is called DB connection string
191:28 - so let me change that to DB connection
191:29 - string
191:30 - and now if we run
191:33 - we are going to see that
191:38 - DB connection string the connection
191:40 - string is no longer mentioned here in
191:42 - the code but the data is still getting
191:44 - loaded data analyst data scientist and
191:46 - front-end developer okay important Point
191:49 - remember this don't put any passwords or
191:52 - any sensitive information into your code
191:54 - it should always be passed through some
191:56 - secret okay so now let's go into Version
192:00 - Control here and I believe we have
192:02 - removed all the secrets here so I can
192:04 - now push my changes
192:06 - and let's see what did I change added
192:10 - connection to database
192:12 - added connection to DB let's just say
192:14 - that
192:15 - and let's click commit and push
192:17 - and that should take all the files and
192:19 - send it to GitHub that's what we were
192:22 - doing in the previous tutorial okay
192:25 - looks like nothing happened looks like
192:27 - there's no change here so what happened
192:30 - turns out that replit seems to have
192:32 - changed their user interface again this
192:34 - is something that happens with the tools
192:35 - that we use they're always making
192:36 - changes making improvements so things
192:38 - may not work exactly the same way and
192:41 - now you see this plus button it is
192:42 - showing you a list of all the files that
192:45 - are changed and you have to manually add
192:47 - which files you want to commit back to
192:50 - git okay so replied is giving you a
192:52 - little more power it is allowing you to
192:54 - manually add which files you want to
192:56 - commit to git so I'm going to click plus
192:58 - plus plus plus and now all these files
193:01 - are going to get committed I'm going to
193:03 - try to commit again
193:06 - load jobs from DB and I'm going to click
193:09 - commit and push and now that's going to
193:13 - take all of these added files earlier no
193:15 - file was added so that's why no nothing
193:17 - was getting committed so now it's going
193:18 - to take all these added files and it is
193:20 - going to commit them now you can see
193:22 - here we have load jobs from DB this is
193:25 - the latest commit and you can also go
193:28 - into Joven couriers website V2 and here
193:30 - on the job in careers website V2 you can
193:32 - now check app.pi
193:34 - you can see it doesn't have those list
193:37 - of jobs and you can check database dot
193:39 - pi and you can see it does not have any
193:41 - secret here okay so that's fine so now
193:44 - we have securely stored this Secret
193:47 - inside replet environment variables and
193:50 - we have still been able to make our code
193:53 - public so we've not lost any security
193:57 - nobody will be able to connect to our
193:59 - database except through
194:02 - the routes that we have already defined
194:04 - so the way people access the database is
194:06 - by opening the page Jovian careers
194:09 - website V2 and then that route
194:12 - internally makes a database connection
194:13 - but we get to control which database
194:15 - connections are possible we have not
194:17 - given the final user the full power over
194:20 - our database okay
194:22 - all this is well and good but let's go
194:24 - to render.com and let's see what
194:26 - happened here
194:27 - let's go into our render dashboard
194:30 - and let's find the
194:32 - project
194:35 - that we had just deployed earlier okay
194:38 - okay looks like a deploy failed so let's
194:40 - click on this let's see why a deployment
194:42 - failed
194:46 - so as soon as we pushed some new changes
194:48 - to master render.com try to deploy but
194:51 - when render.com tried to deploy it ran
194:53 - into a couple of issues looks like there
194:55 - is no module called SQL Alchemy so let's
194:58 - go back here we added a new a couple of
195:00 - new files so let's go in here let's add
195:02 - SQL Alchemy and I believe we also
195:05 - installed Pi MySQL so let's add Pi MySQL
195:07 - as well and let's go back here into
195:10 - Version Control let's call this update
195:13 - requirements
195:16 - and let's add this file into our commit
195:18 - and let's commit and push
195:22 - since we have added new libraries we
195:24 - need to mention them in requirements.txt
195:25 - now we have mentioned them now we can
195:27 - come back into render now let's go back
195:29 - into the dashboard
195:33 - now you can see it is deploying again so
195:36 - let's come back here let us check the
195:38 - deploy the deploy has been started it is
195:40 - in progress
195:43 - and you can see the name of the latest
195:45 - commit update requirements so let's wait
195:47 - here and let's see if it is able to
195:50 - build and deploy successfully
195:55 - okay looks like it was able to install
195:57 - all the dependencies looks like it is
195:59 - also able to build it and looks like it
196:01 - is now going to upload the build let's
196:04 - see if that is going to succeed
196:09 - okay the build was successful it is now
196:11 - deploying
196:12 - so this is going to get deployed to
196:14 - joviencareers.com
196:16 - and let's see if that deployment goes
196:18 - through successfully
196:21 - okay now here you see it runs into an
196:24 - error so it set up the build and then it
196:27 - tried to run geonicon app colon app and
196:29 - then when it tried to access if you just
196:31 - go down scroll down here when it try to
196:33 - access the OS dot Environ DB connection
196:36 - string it did not find the connection
196:37 - string so
196:39 - what happened
196:41 - remember this connection string is a
196:43 - secret that we have put into replit when
196:45 - we sent the code from replit to GitHub
196:48 - GitHub no longer had that connection
196:49 - string that's the whole purpose of
196:51 - storing it secretly on replit so that it
196:53 - we don't expose it in our git repository
196:55 - so if the git repository doesn't have
196:58 - this information then obviously
197:00 - render.com will also not have this
197:01 - information so what we need to do is go
197:04 - into render.com
197:06 - go into the environment here so just
197:08 - like replit render.com also has a way of
197:11 - specifying Secrets or environment
197:13 - variables it specifically says that you
197:15 - can use this for secrets and then click
197:18 - Plus
197:20 - and now we can go back here and let me
197:22 - go to the secrets Tab and let me click
197:24 - on the secret that I already have and
197:26 - let's grab the name DB underscore
197:28 - connection underscore string and let's
197:30 - put that name here and let's grab the
197:33 - value
197:34 - and let's put this value here as well DB
197:38 - underscore connection underscore string
197:39 - and save these changes
197:42 - and that is going to kick off another
197:43 - deploy
197:45 - most likely so let's go back here
197:49 - yeah so it looks like we have just
197:51 - updated the environment so it is going
197:52 - to start another deployment
197:54 - and this time it should be able to
197:56 - access the environment variables so
197:58 - let's go back here and let's see
198:01 - how it's doing so it is
198:04 - once again installing the required
198:06 - libraries it has
198:09 - created a build it is then going to push
198:11 - the build and it is finally going to try
198:13 - another deployment and it's going to try
198:15 - to run the application once again so far
198:17 - jovencareers.com
198:20 - if we just check it Jovian
198:22 - careers.com so far it only has the old
198:25 - data data analyst data scientist
198:27 - front-end engineer and back-end engineer
198:28 - so it has all this information right
198:32 - but as soon as this deploy is done
198:34 - hopefully if it works it should be
198:37 - connected to the actual database
198:41 - foreign
198:44 - looks like this has run properly so
198:47 - let's reload the page and you can see
198:49 - now we have data analysts data scientist
198:51 - and front-end developer data analyst
198:53 - data scientist and front-end developer
198:55 - let me just try this one more change
198:57 - here so let's add backend developer
199:01 - and let's change this to San
199:04 - Francisco
199:07 - USA
199:08 - let's make this 120
199:11 - 000.
199:13 - let's put the dollar symbol here and
199:16 - let's grab the information about this
199:18 - job as well so here there is some
199:20 - information too
199:21 - so let's grab that
199:24 - and there is some information here too
199:26 - so let's grab that too
199:32 - and let's click apply
199:34 - and that should now insert this new data
199:36 - and now if we simply refresh
199:39 - jovencareers.com
199:42 - you will now see that it has all four
199:44 - roles and you can tell that this is
199:46 - coming from the database you can try to
199:48 - delete something from the database and
199:50 - that will go away from here
199:52 - great so now we are able to deploy it as
199:55 - well
199:57 - so now we've deployed to render.com
199:59 - we've pushed the changes to GitHub we
200:01 - have kept our secret safe and we have
200:03 - deployed to render.com next we are now
200:06 - going to create Dynamic pages to display
200:07 - each job role now wouldn't it be nice if
200:10 - we had for each of these job roles on
200:13 - jovencareers.com we had its own page
200:15 - maybe we got there when we clicked on
200:17 - apply so let's try to do that let's try
200:19 - to give each of these jobs their own
200:23 - page
200:24 - so let's come back here I am going to
200:26 - come back here into requirements
200:29 - into our app.pi file and I'm going to
200:32 - add a new route
200:33 - so I'm going to say app dot route
200:36 - slash
200:38 - job and now what I want is
200:44 - on jobin dot careers jovencareers.com
200:46 - job slash three let's say if I put the
200:50 - number three I want the data for job ID
200:52 - number three to be displayed here
200:55 - and if I put the number two I want the
200:57 - job data for the job ID to to be
200:58 - displayed here and so on
201:00 - so the way you can create a dynamic
201:03 - route in flask is by putting something
201:06 - between these less than and greater than
201:08 - symbols so if we do less than ID greater
201:11 - than so now it is no longer trying to
201:14 - match slash job slash ID now it will
201:17 - match anything that comes after slash
201:19 - job and the function that you define
201:22 - under it let's call this
201:24 - show job is going to receive that value
201:27 - as a parameter so for example if we try
201:29 - to access jobin careers.com job three
201:32 - you can see here in the URL bar
201:35 - jovencareers.com job slash three then ID
201:40 - will get the value 3. so ID will get the
201:43 - value 3 so basically ID will be the
201:45 - number that we have passed in and now we
201:48 - can first try to load the job so let's
201:51 - see load job from DB so we'll try to
201:53 - load a specific job here which has this
201:56 - given ID and then
201:58 - let's for now let's just
202:01 - convert that into Json so jsonify job
202:04 - and return that okay now we don't have a
202:07 - load job from DB function so let's
202:09 - define that inside our database file so
202:14 - let's define def load job from DB which
202:18 - takes an ID
202:19 - and now we say with engine dot connect
202:24 - as con
202:27 - and then we say result equals con dot
202:31 - execute
202:32 - so what with what is this SQL query we
202:34 - want to write typically when we want to
202:37 - fetch a specific job we would use a
202:39 - select query so we would do something
202:41 - like select
202:43 - star from jobs where ID equals 3 for
202:48 - example
202:49 - and that is the front-end developer role
202:51 - right so that's exactly what we want to
202:53 - write here as well text
202:56 - so let's get that on new line
203:00 - select
203:01 - star
203:03 - from jobs where
203:09 - ID equals and now here we want to put
203:13 - the value of the variable ID so the way
203:15 - you can do this is you can just put a
203:18 - variable here so let me call this Val
203:20 - and then outside this you can provide
203:24 - the value of Val so you can say Val
203:25 - equals ID
203:28 - okay so this is what is called string
203:33 - formatting but it is done in a special
203:34 - way inside SQL alchemy that you use
203:39 - colon to specify that this is something
203:41 - that has to be filled in and then you
203:43 - provide its value as a parameter here
203:46 - okay so where ID equals Val and we are
203:49 - saying that colon Val should get
203:51 - replaced by ID and where is this ID
203:53 - coming from this ID is coming from this
203:55 - input and where is it coming from in the
203:58 - input
203:59 - remember app.pi we are actually getting
204:01 - it from the URL so we are getting the
204:03 - URL ID from the URL and we are putting
204:06 - it into this function load job from DB
204:08 - and let's call load job from DB let's
204:12 - import that
204:13 - so we are putting it into the function
204:15 - load job from DB
204:17 - and inside load job from DB we are
204:19 - taking the ID and we are putting it into
204:21 - the select statement select star from
204:23 - jobs where ID equals well and then we
204:25 - are going to execute it and we're going
204:27 - to get a result
204:28 - now we can say rows equals result dot
204:32 - all so now we have a list of rows now I
204:35 - expect to get back either one row or I
204:39 - expect to get back zero rows for example
204:40 - if I look for the job with ID 10 I'm
204:42 - going to get back 0 rows
204:44 - so here's what I'm going to do if Len
204:47 - rows
204:49 - equals 0
204:52 - then I'm going to return none
204:55 - else I am going to return
204:58 - dict rows 0.
205:02 - okay so remember rows is a list of rows
205:06 - and each element of row so this is going
205:10 - to be the first element of row row 0 is
205:12 - going to be the first element of row so
205:13 - the first element of row is going to be
205:15 - a legacy row a SQL Alchemy row class and
205:18 - we can convert that row into a
205:19 - dictionary using date okay and if this
205:22 - doesn't make sense what you should try
205:23 - and do is add a bunch of print
205:25 - statements and play around with it and
205:26 - try to make sense of it but now we have
205:29 - this load job from DB so we have that
205:32 - and now we have this app which is going
205:34 - to use load job from DB
205:38 - let's call it load job from DB
205:41 - and let's run that let's run this and
205:45 - for now what we're doing is we are
205:47 - getting the job data and we are just
205:48 - converting it in into Json okay so if I
205:52 - go now and open this up in a new page so
205:54 - remember this is not deployed yet so
205:55 - this is not going to be available on
205:57 - jovencareers.com just yet any code
205:59 - changes have to be deployed via render
206:01 - any database changes any changes made to
206:04 - the data within the database will
206:06 - reflect immediately that's the benefit
206:08 - of having a database that is separate
206:10 - from your code because once the code is
206:12 - deployed independently and the database
206:14 - can be changed and the data just changes
206:16 - independently
206:18 - anyway so now here we have the same
206:20 - development server running and here we
206:24 - have the data analyst role data
206:26 - scientist role front-end developer role
206:27 - so let's see here when we check the jobs
206:30 - table data analyst has the id1
206:33 - so I can go in here and I can type slash
206:36 - job slash one
206:38 - and that is going to go and match this
206:41 - route
206:42 - ID and ID is going to have the value 1
206:44 - we're going to load the job with the id1
206:46 - and we're going to then convert it into
206:47 - Json and return it
206:49 - and exactly what we expect we get the
206:52 - information about the data analyst role
206:54 - the salary we get the currency we get
206:56 - the ID and we get the location
206:57 - requirements and responsibilities
207:00 - so great that's nice so now we have a
207:03 - dynamic page let's try maybe this
207:06 - and yes now we have data scientist let's
207:09 - try three
207:11 - and now we have front-end developer
207:13 - let's try four and now we have backend
207:15 - developer so you may have heard the term
207:17 - rest API this is exactly what rest apis
207:20 - are they go into a database they fetch
207:22 - some information based on the
207:24 - information that you provide in the URL
207:25 - and they return some Json okay but we
207:28 - don't want a rest API right now we want
207:30 - to create a proper HTML page so I'm
207:33 - going to create a new template called
207:36 - jobpage.html
207:38 - and
207:40 - let's create a basic HTML page here from
207:43 - scratch so I can go into home.html and
207:45 - just study how this was created so there
207:47 - is a dock time HD doctype HTML at the
207:49 - top let me put that in here then there
207:51 - is an HTML tag and then there is a head
207:54 - and body tags inside it so let me put
207:56 - HTML and let's put a head in there
207:59 - and let's put a body in there and in the
208:03 - head we may have to put a few things so
208:06 - there is the title let me copy the title
208:08 - let's put that back into a job page
208:12 - great and now instead of jobin careers
208:14 - let's change it to the actual job name
208:17 - so let's get the job title here
208:20 - so let's get job dot title where is this
208:22 - job going to come from we are going to
208:24 - pass it in while rendering the template
208:26 - so
208:28 - let's just do that for now and maybe
208:29 - also inside the body let us put in maybe
208:36 - an H3 tag with the title of the job so
208:41 - let's put the title and let's put the
208:43 - job title below it in a P tag
208:46 - job.title
208:48 - okay we've done something very basic
208:50 - here we just have a title tag and then
208:52 - we have an H3 tag and now let me go back
208:55 - into app.pi and instead of returning
208:58 - Json let me render this template so let
209:01 - me say render
209:02 - template
209:05 - and let me use the template job page dot
209:09 - HTML and let me set job equals job okay
209:14 - so inside the template
209:16 - any references to job will use the
209:19 - valued job which is coming from load job
209:21 - from DB which is coming from ID
209:23 - so that's nice so now I can go back here
209:27 - and reload this page
209:31 - and now it says title backend developer
209:33 - okay maybe let's put in a few other
209:36 - things as well
209:38 - let's get
209:39 - maybe the
209:43 - all the other information basically so
209:45 - let's get
209:46 - the location
209:51 - job dot location
209:54 - let's get the salary
210:00 - job dot salary
210:06 - oops this is just called salary
210:22 - let's get
210:26 - requirements or let's get the currency
210:28 - or maybe let's put the currency next to
210:30 - the salary itself so
210:32 - that would be nice job dot currency we
210:35 - don't have to show it separately then we
210:37 - have the job responsibilities
210:44 - and job dot responsive
210:48 - abilities
210:49 - and then we have the job requirements so
210:54 - requirements and let's get that as well
210:58 - job DOT requirements
211:01 - okay now we have all the information and
211:03 - you can see even the title says backend
211:05 - developer so the title is back-end
211:07 - developer the location of San Francisco
211:08 - the salary is 120 000 responsibilities
211:12 - oh okay maybe there's a
211:19 - What's this called responsive ah I think
211:23 - I have a typo in my table
211:25 - so I've just called it responsibilities
211:28 - so let's just change here to
211:30 - responsibilities for now
211:31 - so that it at least it works
211:37 - and now we have the responsibilities as
211:39 - well what about this
211:42 - so here is the front-end developer
211:45 - here we have the data scientist and here
211:49 - we have the data analyst but what if we
211:51 - try to access something that's not there
211:55 - so it shows empty information but rather
211:57 - we should probably just show not found
211:59 - or something like that so I'm going to
212:01 - come back here into app.pi and I'm going
212:05 - to say if
212:06 - not job
212:09 - which means if job is none then simply
212:12 - return not found
212:15 - and whenever you're returning something
212:16 - you can also specify your error code so
212:19 - 404 if you've seen HTTP error codes you
212:22 - may have come across four or four pages
212:23 - 404 represents not found so it tells the
212:25 - browser that the page was not found so
212:27 - this is just a good way whenever you're
212:28 - returning errors to also apart from
212:30 - returning any content and this can just
212:32 - be the output of a template as well but
212:34 - apart from returning any content you can
212:35 - also return not found so if the job is
212:38 - not present then we say not found
212:41 - otherwise we render the template so now
212:43 - if I reload this you can see here it
212:45 - says
212:49 - foreign
212:50 - it should just say not found and here it
212:53 - you can see the browser also says this
212:55 - page is missing so the browser is also
212:57 - able to detect that this is Pages
212:59 - missing based on the error code but if
213:01 - we go back here into maybe job ID3 that
213:04 - information is present
213:06 - okay nice so now we have one page per
213:09 - job and it would be nice to maybe make
213:12 - it look nicer just like the main job
213:13 - page and also connect it here from the
213:15 - job page so right now on the job page we
213:19 - have this apply button which sends an
213:21 - email but instead of sending an email
213:24 - maybe we can just open the job Details
213:26 - page so that's the first thing we're
213:27 - going to do let me come into home.html
213:30 - and inside home.html looks like we Loop
213:34 - over the jobs using four and then we
213:35 - include job item.html so let's go into
213:39 - jobitem.html and here we have this mail
213:42 - to link so let's get rid of this mail to
213:44 - link
213:45 - and instead let's put a different link
213:47 - here so we are saying that when somebody
213:50 - clicks on apply
213:53 - we want to open on the same website we
213:56 - want to open slash jobs or sorry slash
213:59 - job slash the ID of the job for which we
214:02 - have this current button so here we have
214:04 - this job object so we can just say job
214:07 - ID
214:09 - and save that and reload it
214:14 - and now if you see here this you can see
214:17 - in the status bar at the bottom left
214:19 - that this actually opens up that
214:21 - specific job page
214:22 - okay
214:24 - so that's nice we have now opened up
214:25 - that specific job page that is good but
214:28 - I would prefer if this also looked
214:32 - somewhat similar to this page if they
214:34 - had similar layouts so let's try and do
214:36 - that so let's do that one by one the
214:38 - first thing we will do is fix things in
214:41 - the head
214:42 - so the job page currently just has a
214:44 - title maybe we should also include
214:46 - bootstrap in there so let me just
214:50 - get this and put all this in in there as
214:54 - well
214:55 - so this way is going to make sure that
214:56 - the bootstrap framework is imported but
214:59 - instead of copy pasting things this
215:00 - would be a good
215:03 - opportunity for us to maybe create
215:05 - another helper template so let me add a
215:07 - file called
215:09 - bootstrap.html
215:11 - bootstrap.html which can contain the
215:13 - code to include the bootstrap framework
215:15 - let me cut this here and let me come and
215:18 - paste this into bootstrap.html
215:20 - and let's just fix the indentation here
215:23 - so that things are easier to see
215:25 - and let's go into home and let's simply
215:28 - it include here bootstrap.html so
215:30 - percentage include
215:35 - bootstrap.html percentage great
215:38 - and now so you see the layout got messed
215:42 - up but now it's fixed again now we can
215:44 - come back into job page and under the
215:45 - title we can include bootstrap.html so
215:48 - that's nice
215:52 - okay so now if we come back here into a
215:54 - specific job page
215:57 - let's say I open
216:00 - data scientist
216:03 - you can see that already the Styles have
216:05 - become much better that's nice
216:07 - but next step would be to probably add
216:10 - the header probably add this Banner
216:12 - image so let's do that let's add the nav
216:15 - I think the nav is already a component
216:17 - in itself so I'm just going to grab this
216:19 - and put that inside job page.html
216:24 - and you can see now it should have the
216:26 - navigation bar but while we write it how
216:28 - about will it also grab the footer and
216:30 - put the footer in there as well so let's
216:32 - go back to job page and let's include
216:35 - the footer here at the bottom
216:39 - let's see if that has changed something
216:42 - so now we have the header that's nice
216:43 - now we have the footer as well and now
216:46 - let's go back in here and maybe add that
216:48 - Banner image as well so I'm going to go
216:50 - into home and there are two things here
216:53 - so there is this image and then there is
216:55 - a style tag as well so it turns out that
216:58 - style tags do not have to be in the head
217:00 - they can be anywhere in the body so I'm
217:02 - going to put this style tag right above
217:05 - this image
217:06 - and then I'm going to copy all this and
217:09 - I'm going to create a new file
217:11 - foreign
217:12 - er.html
217:15 - and I'm going to put that in here all of
217:17 - this inside banner.html
217:20 - and inside home I am going to Simply
217:23 - include banner.html
217:29 - okay and not only inside home but I'm
217:31 - going to do the same inside
217:34 - so the banner is still here I'm going to
217:35 - do the same Inside Job page.html
217:39 - okay so our website once we've created
217:41 - it for one page it's very easy to
217:44 - replicate across other pages
217:45 - now let's Center this a bit the way this
217:48 - is centered on the home is using a
217:50 - container you can see here we have a
217:51 - container so let's take that and maybe
217:54 - I'll also retain this careers Joven
217:56 - Courier's title here so let me also and
218:00 - let's get rid of this company name this
218:01 - is no longer useful so I'm just going to
218:04 - call it Jovian careers
218:06 - and in app.pi I'm going to remove this
218:08 - company name here that we had passed in
218:11 - earlier but let's go back to home and
218:13 - let's copy this container let's copy
218:15 - this H1 and let's take that and let's
218:20 - put that into jobpage.html
218:23 - and put all of this inside the container
218:27 - and let's close the div
218:30 - let's go back let's see that
218:34 - okay so it is starting to look pretty
218:37 - nice I would say we have the title
218:40 - location salary I think these are
218:41 - probably too big so maybe we can make
218:43 - these h4s
218:45 - and maybe let's make this H3 and just
218:48 - show the title here instead of saying
218:52 - yeah let's make this S3 and let us just
218:54 - show the job title here instead of
218:57 - showing this in a paragraph so just a
218:58 - slightly nicer layout and let's load the
219:01 - location here but let us display it
219:03 - using a P tag and let us give the class
219:08 - lead remember the class lead we had used
219:10 - the last time just to make the text
219:12 - bigger and let's make these all h4s
219:23 - okay and I'm going to move the salary
219:25 - below
219:27 - the
219:28 - requirements and responsibilities let's
219:31 - go back
219:32 - and I think we are almost there now we
219:35 - have data scientist New Delhi India okay
219:37 - maybe we don't need the space above so
219:39 - I'm just going to say
219:41 - class
219:46 - m
219:47 - maybe this is space below the
219:51 - heading so I'm just going to say class
219:53 - mb2 just reducing the space a little bit
219:55 - here
219:56 - okay and let's change this to a simple
219:59 - Mt 0
220:00 - so I'm just fixing a bit of spacing
220:02 - using some margin classes from bootstrap
220:05 - okay so nothing major this is just
220:07 - things that you have to mess around with
220:09 - a little bit okay so now we have data
220:11 - scientist New Delhi India
220:12 - responsibilities requirement salary but
220:15 - there's one problem here if I go back
220:17 - into the data that we had inserted the
220:20 - sample jobs data
220:22 - you can see here that there are
220:25 - multiple lines present here you can see
220:27 - that there is a next line after each of
220:29 - these points
220:31 - but these points don't seem to be
220:33 - showing up on this page so it would be
220:35 - nice to make these show up as pointers
220:38 - first of all instead of as a paragraph
220:40 - so it's not detecting the new lines and
220:42 - maybe we should also be using bullet
220:44 - points in some fashion here so let's do
220:47 - that let's make these bullet points and
220:49 - the way to make bullet points in HTML is
220:52 - using something called
220:54 - an unordered list so you say ul and as
220:57 - soon as you say UL now you've started a
220:59 - bulleted list and then inside it you put
221:01 - each element into its own Li tag so UL
221:06 - stands for unordered list and Li stands
221:08 - for list item so here you have item a
221:12 - here you have Item B and then here you
221:15 - have
221:16 - Li item C and so on and let me just save
221:19 - that and I'll show you what that looks
221:20 - like before we
221:22 - yeah so this is what it looks like item
221:25 - a Item B item C all we have to do is we
221:27 - have to put this inside
221:29 - ul and Li
221:30 - now
221:31 - our responsibilities is a single string
221:34 - although it does contain these new line
221:36 - characters and so what we need to do is
221:39 - we need to first split it into a bunch
221:43 - of lines a list of lines and then we
221:45 - need to Loop over those lines and create
221:47 - allies or list items
221:50 - so I'm just going to write the code here
221:52 - and I'll let you think about how that
221:54 - works so I'm going to say for line
221:58 - in job dot responsibilities
222:03 - or actually just responsibilities here
222:05 - so let me just call it that job doctors
222:08 - responsibilities dot split
222:10 - and I'm going to split it at the new
222:13 - line character
222:14 - okay so that's going to give me a list
222:15 - of lines and then I'm going to get each
222:18 - line from that list
222:19 - and let's put end for here
222:24 - and now here
222:27 - we can simply render the line inside a
222:29 - list item
222:32 - okay so this code is going to seem
222:34 - confusing right now but spend some time
222:37 - with it experiment with it a little bit
222:39 - and hopefully you'll see what it's doing
222:42 - we are taking responsibilities from the
222:44 - job we are splitting it at the new line
222:47 - character and new line characters are
222:48 - already present but they don't get
222:50 - rendered automatically in HTML for us so
222:53 - we're splitting it at the new line
222:54 - character and then we are looping over
222:57 - it so we get each line and for each line
222:59 - we create a list item okay so we if
223:02 - there are 10 responsibilities then it's
223:03 - going to create 10 allies and all of
223:05 - those allies are inside the UL and
223:08 - that's why you get back this
223:11 - okay so that's great that's nice so now
223:13 - we have a nice bulleted list here let's
223:15 - do this same thing for requirements
223:18 - instead of a bulleted list this time I'm
223:21 - going to create what's called a numbered
223:23 - list or an ordered list so instead of UL
223:25 - I'm going to use ol
223:27 - and I am going to then pass in
223:31 - the same for so I'm going to say
223:34 - 4
223:36 - line in
223:38 - job DOT requirements
223:44 - and end for
223:46 - let's get the N4 from here
223:50 - and now the line each line is going to
223:52 - come from job DOT requirements and now
223:53 - I'm going to render
223:55 - the value of the line
223:58 - so these templates are very powerful you
224:01 - can do all sorts of manipulation data
224:03 - manipulation right within the template
224:06 - and now you see oops I think I went too
224:09 - far I should be splitting job
224:11 - requirements dot split so now we have
224:13 - created one item for every character
224:15 - that's not what we wanted so job
224:17 - requirements.split
224:21 - and now you see here that you have all
224:23 - the requirements in different lines as
224:25 - well so that's the requirements for the
224:27 - data scientist role let's check the data
224:30 - analyst role
224:34 - and that looks good let's check the
224:39 - backend engineer role that looks good
224:42 - too
224:43 - and that's it we've now created a bunch
224:45 - of different Dynamic pages
224:47 - powered by data from the database and we
224:50 - are making it look nice we're making it
224:53 - look pretty good maybe one other thing
224:55 - we can do is we can maybe make this
224:57 - button this this thing in a nav we can
225:00 - maybe configure it to go back to the
225:01 - home page so let's go back into nav.html
225:05 - so let's go to nav.html and here we have
225:08 - this a tag already and let us just
225:10 - change its location to slash so the word
225:14 - Jovian when we click on it it is going
225:16 - to take us back to the home page and
225:18 - it's important to have navigation
225:19 - otherwise your visitors website visitors
225:21 - may not be able to figure out how to go
225:23 - back even this is not very obvious but
225:26 - let me first reload this so now I want a
225:28 - job page here
225:29 - and if I click this
225:32 - that's going to now take me back to the
225:34 - home page
225:35 - and from the home page I can click on
225:37 - the apply page
225:39 - and that's going to bring me back to the
225:42 - job page and I can click here and go
225:44 - back
225:45 - into the job page and then click apply
225:48 - and go into a different page
225:51 - so great we've now created Dynamic pages
225:55 - so we've completed this step create
225:57 - Dynamic pages to display job role and we
226:00 - have now shared layout Styles and
226:02 - navigations using bootstrap
226:04 - between the two
226:06 - home between the home and the job Pages
226:08 - you should always try to share as much
226:10 - code as possible and that's how your
226:12 - style will stay consistent if you copy
226:14 - paste things then you can make change in
226:16 - one place and the change won't reflect
226:17 - in the other place so less code is
226:19 - always better so keep that in mind
226:22 - all right let's also finally just
226:25 - make save this to GitHub and then let
226:29 - that deploy to render.com
226:32 - so now we have added
226:34 - Dynamic Pages for
226:37 - each job
226:39 - let's commit and push that and that
226:42 - should get deployed in a couple of
226:44 - minutes to jovencareers.com
226:50 - so we've Now read from the database but
226:52 - now we'll see how to write data back to
226:54 - the database and that's going to
226:55 - complete the loop a fully functional
226:58 - database driven application and in the
227:01 - meantime we can verify that GitHub has
227:05 - the latest code you can see that it says
227:07 - Dynamic Pages for each job created one
227:09 - minute ago and we can go to render.com
227:12 - to verify that a recent deployment was
227:16 - done
227:17 - so let's see here a deployment was
227:19 - started
227:21 - okay
227:23 - Dynamic Pages for each job a deployment
227:25 - has been started and it might take maybe
227:28 - a minute or two so it is just
227:30 - downloading the cache right now just to
227:32 - quickly recap what we've done so far we
227:36 - set up a project
227:38 - by creating a copy of our existing
227:40 - GitHub project opened it on replit and
227:42 - also deployed it on render
227:44 - we also created a mySQL database on
227:46 - planet scale and connected to it using
227:48 - the MySQL workbench and
227:51 - then
227:52 - added some data into it created a table
227:55 - then we connected to it from replit
227:57 - using SQL Alchemy and then we used that
228:00 - to display the list of jobs from the
228:02 - cloud database
228:03 - onto the page
228:05 - then we created Dynamic pages to display
228:07 - each job role first we simply got
228:10 - information about a single job ID from
228:12 - the database and displayed that as Json
228:14 - then we showed that in an HTML format
228:17 - and then we used shared layout
228:19 - components to make the user interface
228:23 - look nicer and more consistent and we
228:25 - also made connections between the main
228:27 - page and the other page so now the now
228:31 - our site is now live okay looks like
228:34 - there was some change that did not get
228:36 - pushed so let's see looks like we have a
228:38 - bunch of
228:40 - things here that did not get added so
228:43 - I'm going to add these and add new
228:45 - templates
228:47 - and click commit and push and as soon as
228:50 - this gets deployed we should have all of
228:53 - these changes pushed to GitHub and
228:56 - deployed on jovencareers.com
229:01 - and careers.com
229:04 - will have a dynamic list of jobs
229:08 - loaded from the database every time we
229:10 - add a new job in the database it will
229:12 - automatically show up here
229:14 - we just have to reload the browser and
229:17 - we can go click apply and look at the
229:21 - actual job page as well
229:23 - but of course what's missing here is the
229:25 - actual application form
229:27 - so the actual application form is
229:30 - missing and we are going to add that
229:31 - next
229:32 - so let's go back here let's go into
229:35 - files and let us go into app.pi and see
229:40 - where we can add the application form
229:42 - so we want ideally the application form
229:45 - to show up right below here somewhere in
229:49 - fact if we go back into the wireframes
229:52 - that we had created early on
229:57 - you can see here that on the job page we
230:00 - have this information about the job and
230:02 - here we have the application form so we
230:04 - want the application form to show up
230:06 - right below somewhere here
230:09 - so how do we make that happen we have to
230:11 - make some change Inside Job page.html
230:15 - so I'm going to go into templates and I
230:17 - am going to first create a new template
230:20 - called application dot application form
230:24 - application underscoreform.html
230:27 - and I'm going to go into jobpage.html
230:29 - and include it so first let me just put
230:34 - to do
230:35 - application form goes here
230:38 - and let me close this for a moment let
230:41 - me also
230:42 - put this away to the side so application
230:45 - form goes here
230:46 - and let me import that inside
230:48 - jobpage.html
230:50 - so let me import
230:53 - inside the container
230:55 - let us import
230:59 - application
231:01 - form.html
231:05 - okay and let's go back here let's reload
231:09 - this page
231:12 - okay there seems to be an error
231:18 - oh it should be called include
231:21 - yep and let's reload that
231:26 - okay so now we have here to do
231:28 - application form goes here and now we
231:30 - can start creating the form
231:32 - so to create forms in HTML there is a
231:37 - special tag called form so first let's
231:39 - just give this a title a application
231:43 - form and there is a stack called form
231:46 - and that's how you create a form in HTML
231:49 - and within the form we want some inputs
231:52 - so there's a tag called input and the
231:55 - most and you have to give each input a
231:57 - type so the most common type is text and
232:00 - you have to give each input a name so
232:01 - let's just call this full underscore
232:03 - name
232:04 - and that's it
232:07 - and that should show an input box
232:10 - and let's just save that and let's see
232:13 - what that gave us here
232:16 - okay so now we have this input box but
232:18 - we probably want some kind of a label
232:20 - here so we can go in here and we can
232:23 - actually give it a label so we can say
232:24 - label
232:27 - full name
232:29 - and we can also show
232:31 - some sort of a placeholder here so we
232:33 - can type placeholder and attribute
232:35 - placeholder and say
232:38 - Bruce Wayne again this is something that
232:41 - if you take a basic the even the most
232:43 - basic HTML tutorial they will show you
232:46 - exactly this right so
232:49 - now you have
232:51 - full name Bruce Wayne I probably want
232:53 - this on the next line so I am just going
232:55 - to put a br here so BR is used to create
232:58 - a new line so these are all common HTML
233:01 - tags that you can look up how to add a
233:02 - new line in HTML okay so now we have
233:04 - full name Bruce Wayne that's nice and of
233:08 - course this is not the actual field
233:09 - information this is just a placeholder
233:11 - and as you start typing it will go away
233:12 - and what are the things we want for an
233:15 - application so let's go back here let's
233:17 - check the design that we had
233:21 - xcaliddraw.com okay so we want name
233:24 - email LinkedIn
233:26 - education work experience and resume
233:28 - link and education work experience
233:31 - should allow multiple lines of text and
233:33 - then resume link should be a URL
233:35 - LinkedIn should be a URL so let's come
233:37 - back and let's start putting these
233:39 - things in so let's put label
233:45 - email
233:47 - and we can put in
233:49 - put
233:51 - type equals
233:53 - text name equals email and this name is
233:57 - going to be important later you're going
233:59 - to see how
234:01 - Bruce wayne.com
234:04 - and let's create a again another label
234:09 - and this time we have the LinkedIn
234:13 - and let's see input type equals text
234:17 - name equals email
234:19 - placeholder equals
234:24 - LinkedIn let's call it LinkedIn URL
234:30 - LinkedIn dot in linkedin.com in slash
234:34 - Bruce Wayne okay so it's nice to provide
234:38 - hints as to what you expect to see in
234:40 - the form
234:41 - that makes it easier for the people
234:44 - filling the form and I think we might
234:45 - need maybe we can just put this inside a
234:48 - div each one
234:50 - so that they show up separately
234:57 - and use a br here
235:03 - so div simply creates a box around
235:05 - things and then two things don't show up
235:07 - on the same line if they are in
235:09 - different divs
235:10 - so let's check that
235:13 - okay close enough
235:16 - let's put BR here as well so before we
235:19 - add the other inputs
235:21 - let's add a submit button
235:23 - to the form so now we have full name
235:25 - email LinkedIn URL all these are there
235:27 - let's add a submit button so we can add
235:29 - a submit button simply by
235:32 - saying input type equals submit
235:35 - and that's it and we can also say name
235:38 - equals submit if you want
235:40 - but this is all we need to add a submit
235:43 - button
235:45 - great so now we have full name email
235:47 - LinkedIn URL submit maybe we need some
235:49 - margins here so let me just do class
235:53 - MB
235:56 - 2 and let's put that all over
236:04 - and let's check that one more time
236:08 - okay our form is looking nice so we have
236:10 - Apple full name email LinkedIn URL and
236:13 - we can click submit but nothing happens
236:16 - when we click submit you can see it just
236:17 - reloads the page
236:19 - so
236:20 - well actually something does happen
236:22 - if you see here what has happened here
236:25 - is it has reloaded the page but it has
236:28 - added some information in the URL so
236:30 - looks like the names of the inputs got
236:32 - picked up and something is supposed to
236:35 - show up here which is not showing up yet
236:37 - because we have not filled the form
236:39 - so let's come back and let's do one
236:42 - thing first let's fix this this should
236:44 - be called LinkedIn
236:46 - URL and let's add an action to the form
236:50 - so an action lets us specify where the
236:54 - data in the form is supposed to be sent
236:56 - so when we click submit we want this
236:59 - information to be sent to job
237:01 - and
237:03 - remember this is being used inside job
237:06 - page.html and inside job page we have
237:08 - this job object and is in this job
237:11 - object we have
237:13 - ID so I can go back here into nav sorry
237:17 - into application form and I can say that
237:20 - I want this to be sent
237:22 - into job ID
237:25 - slash apply okay so we don't have a
237:29 - Handler for this route yet but this is
237:31 - where we want this information to be
237:32 - sent so now if I just
237:36 - reload the page
237:39 - and then fill some information let's say
237:42 - our caution is our caution is at
237:44 - joven.ai
237:46 - and let me leave this blank and I click
237:49 - submit
237:50 - observe the URL
237:52 - so now the URL has gone to
237:56 - German careers website V2 repel.com
238:00 - apply and then we have a question mark
238:03 - and then we have full name equals Akash
238:05 - plus n plus s and then email equals
238:08 - something and then LinkedIn equals
238:10 - something so this data got encoded in
238:11 - some format and added to the URL
238:14 - but of course we don't have any routes
238:17 - in our flask application to handle them
238:19 - so that's why it says not found over
238:21 - here
238:21 - but that's where we can now go ahead and
238:24 - we can
238:25 - handle this by creating a new route
238:29 - so let's come in here and let's say app
238:32 - dot route
238:38 - and let's do slash job and slash ID so
238:42 - now
238:44 - we have the ID here
238:46 - and then slash apply
238:49 - yeah so slash job slash ID slash apply
238:52 - then
238:54 - let's call this apply to job and once
238:57 - again it's going to get the ID so it's
238:59 - going to match slash job slash one slash
239:01 - apply slash job slash two slash apply so
239:03 - anything that has slash job slash some
239:06 - ID slash apply this is only going to
239:08 - match slash job slash one two three
239:10 - that's not going to match job slash one
239:12 - slash apply okay
239:14 - so now we have this information here
239:18 - about the ID
239:20 - and from this ID we can get the job if
239:22 - we want but how do we get all this
239:25 - information that is there after this
239:26 - question mark so you can see there is
239:27 - all this information after the question
239:29 - mark
239:30 - a question mark full name equals Akash
239:32 - NS and so on the way to get that
239:34 - information is using
239:38 - the request
239:40 - variable from flask so we can come in
239:43 - here and we can say
239:44 - data equals request Dot args okay and
239:49 - for a moment let's just return
239:54 - Json fi
239:58 - data
239:59 - and let's see what that does so we are
240:02 - getting request.args and request is
240:04 - imported from flask
240:05 - and then we just say jsonify data so
240:08 - we're just taking whatever is there in
240:09 - request.arcs and converting it into Json
240:11 - let's go back and submit the form once
240:14 - again so we have akashness email
240:16 - akashness at jobin.ai and let's click
240:18 - submit
240:20 - and now when we send this data to the
240:24 - apply route
240:26 - okay yeah when we send this data to the
240:29 - apply route you can see that now all
240:32 - this information which was there in the
240:33 - URL got read into this variable data and
240:37 - then it got converted into Json so now
240:39 - here we have email full name LinkedIn
240:42 - and submit we probably don't want to
240:44 - submit so I can go back here and remove
240:45 - the submit remove the name for the
240:47 - submit so this will not get a name
240:51 - and now if I reload this page you'll see
240:53 - that it
240:54 - let's see if I click submit once again
240:57 - from this page
241:05 - now it is only showing us email full
241:08 - name and Linkedin URL
241:10 - great so that's good now we have some
241:14 - data
241:15 - that is filled in from one page and it
241:19 - is sent into another page
241:21 - and here inside this page inside the
241:24 - page inside the route job slash ID slash
241:26 - apply we can do some things we can store
241:30 - this in the DB
241:33 - and we can maybe also maybe display an
241:37 - acknowledgment
241:40 - and maybe we can also send an email so
241:43 - we can do all sorts of things with this
241:45 - information
241:46 - now remember our job listing
241:51 - our application form has a bunch of
241:53 - fields so it also has education and work
241:55 - experience and resume link and putting
241:58 - all that information in the URL can make
242:00 - the URL too long and also just slow
242:03 - things down a little bit so there is
242:05 - another way you can submit forms one way
242:08 - to submit forms is using sending data to
242:11 - a new route in the URL
242:13 - another way to submit from or another
242:15 - method to submit forms is something
242:17 - called post so here what you can do is
242:20 - you can say method equals post
242:26 - and now
242:28 - if I just go back here
242:31 - and reload this page
242:34 - and let's do this again
242:39 - and click submit
242:42 - so now you can see that we get an error
242:44 - first of all saying that this method is
242:46 - not allowed on this URL and second there
242:49 - is nothing in the URL the first name
242:52 - last name Etc don't show up in the URL
242:54 - anymore you can take a closer look here
242:56 - it just says slash job slash apply so
242:58 - when you are submitting using the post
243:00 - method then you need to process
243:03 - information using the post method tool
243:06 - so you can go in here and you can say
243:07 - methods equals post
243:11 - so now we have the form application
243:14 - form.html which uses the post method
243:17 - and then we have the route slash job
243:20 - slash ID apply which
243:23 - also expects the post method so it
243:26 - expects some data to be posted by the
243:28 - browser and not sent in a URL so now if
243:32 - I go back once again and click submit
243:35 - once again
243:36 - you can see now that nothing was sent in
243:39 - the URL and nothing is getting displayed
243:41 - here that's because now when you post
243:44 - data the data is no longer in
243:46 - request.arcs request.arcs contains
243:48 - information from the URL when you post
243:51 - the data is present in request.form okay
243:54 - so now I'm gonna go back one last time
243:57 - and click submit once again and this
244:01 - time
244:02 - you can see when we clicked submit that
244:04 - data was posted
244:06 - to this URL slash job slash three slash
244:09 - apply so nothing in the URL but the data
244:11 - was posted it was sent by the browser
244:14 - along with the request to this URL and
244:17 - now that data was accessed using
244:19 - request.form and finally that data was
244:22 - displayed here as email full name and
244:26 - Linkedin URL as Json
244:28 - okay so let's now just go ahead and add
244:31 - the other form Fields as well so I'm
244:32 - just going to add in the other form
244:34 - field so we have LinkedIn URL then we
244:36 - have
244:37 - I believe
244:38 - work education work experience and
244:40 - resume URL so I'm going to create one
244:43 - div
244:45 - and let's put in a label here
244:48 - education
244:50 - and let's put in an input here okay so
244:53 - now we want a multi-line input and
244:55 - there's a special tag for multi-layer
244:56 - input called text area so let's call
244:58 - that text area let's give it the name
245:01 - education and that is going to be a
245:05 - multi-line input
245:11 - and I think you have to close it like
245:13 - this
245:17 - so again something that can be looked up
245:19 - easily what is a multi-line input how to
245:22 - create a multi-line input in HTML
245:24 - education then we have work experience
245:30 - and then we have text area again
245:33 - name is
245:35 - work
245:36 - experience
245:43 - great and finally we have a resume URL
245:46 - I'm just going to copy this and paste
245:48 - this in here
245:49 - and let's change this to
245:52 - resume URL and the placeholder let's
245:55 - just remove the placeholder here
245:58 - and let's just call this
246:01 - resume URL
246:04 - okay
246:06 - let's add back this class here class mb2
246:09 - everywhere
246:12 - so now our form is largely complete we
246:15 - have
246:16 - if we go back here and reload the page
246:18 - we should see all the fields okay we
246:21 - might need to just add
246:23 - br's here
246:34 - so now we have full name email LinkedIn
246:36 - URL education work experience resume URL
246:39 - and we can click submit that's nice and
246:43 - maybe these can be a little bigger so
246:44 - we'll handle that styling later but at
246:47 - least we have all the fields now and I
246:49 - can just put in information into some of
246:50 - these
247:00 - and let's just put some sample
247:02 - information here
247:03 - and let's click submit
247:05 - and all of that gets posted and nothing
247:07 - is sent in the URL so it's nice and
247:09 - short but all the information is sent
247:12 - into
247:13 - flask
247:15 - and of course now we can come back into
247:16 - flask and we can probably actually
247:19 - render this information properly so
247:22 - let's say application
247:25 - let's create a file a new file here
247:29 - and let's call it application
247:32 - submitted or just application.html
247:37 - let's call it application submitted dot
247:39 - HTML
247:42 - and in application submitted.html and
247:45 - this is the template that we're going to
247:46 - render from that route which handles the
247:49 - application so this needs to be an
247:51 - entire HTML page so once again I'm going
247:53 - to go to the job page I'm going to pick
247:55 - up doctype
247:57 - HTML
247:59 - let's put that
248:02 - and let's get HTML
248:05 - and let's get title
248:08 - application submitted let's just say
248:11 - that
248:12 - of course that should be inside head so
248:14 - let's put that inside head
248:18 - and let's put body and in the body let's
248:21 - start just showing that information so
248:23 - H4
248:26 - full name
248:29 - maybe just a div
248:33 - and let's look for a variable called
248:36 - application and from the application
248:37 - let's get
248:39 - full underscore name and maybe let's do
248:42 - one more so
248:44 - let's get
248:46 - email and let's print the email here
248:51 - okay
248:53 - and now let's go back into app.pi and
248:55 - let's render that so now we are saying
248:59 - instead of jsonify the data we want to
249:01 - say render
249:06 - template
249:07 - application
249:10 - submitted.html
249:13 - and we want to pass application as the
249:17 - data that was received
249:20 - so we are taking the form data we are
249:23 - taking that dictionary that we get from
249:25 - the form data and we are passing it with
249:27 - the name application
249:29 - so let's reload okay reloading does not
249:32 - work when you're posting information so
249:34 - let's just post again
249:37 - okay application submitted.html template
249:40 - not from there's a typo so let's call
249:43 - the application let's fix that and let's
249:47 - reload and let's post again
249:50 - okay so now you have full
249:54 - name.ai so that's nice how about we
249:57 - finish this up we put in all the other
249:59 - fields here as well so application
250:02 - submitted full name
250:04 - and then we have email and then we have
250:07 - LinkedIn URL
250:11 - so let's put LinkedIn URL here
250:17 - then
250:19 - we have
250:21 - work experience education
250:24 - and resume URL
250:25 - so let's fix that
250:28 - resume URL
250:31 - resume URL and then we have
250:35 - work experience
250:46 - education
250:53 - education all right so
250:57 - we'll have to go back and submit again
251:01 - now we have the full name email LinkedIn
251:04 - URL education work experience resume URL
251:06 - all the information is there but
251:08 - wouldn't it be nice to have the same
251:10 - layout that we had on the previous page
251:12 - here
251:13 - so it would be nice to have the same
251:15 - layout and now you can probably guess
251:17 - how easy it is to do that if I just go
251:19 - into job page.html I can probably bring
251:22 - over include bootstrap.html here into
251:25 - application submitted
251:27 - so the bootstrap Styles will come in
251:30 - and then I can go into job page.html and
251:33 - bring in the nav and the banner
251:35 - let's do that
251:38 - and let's go into job page.html and
251:41 - bring in the footer as well let's do
251:44 - that
251:46 - thank you
251:47 - and of course let's put all this into a
251:51 - container so div
251:54 - class equals actually how about we just
251:57 - copy that over as well so let's go to
251:59 - job page
252:01 - and let's grab the this piece
252:06 - and let's go back into
252:10 - this and put all of the code inside a
252:15 - container
252:18 - so let's take all that and then just
252:19 - give it just a quick indentation so that
252:22 - it lines up properly
252:24 - and maybe let's also add a
252:26 - nice confirmation here that
252:32 - your application has been submitted
252:37 - okay
252:39 - so
252:40 - just like that now if we click submit
252:46 - you can see that we've transformed this
252:48 - page in
252:51 - just a few just less than a minute now
252:53 - it is the exact it we went from this to
252:56 - this and of course there is some work to
252:57 - be done here it needs it's not as nice
252:59 - as it can be so we're going to fix that
253:01 - in a second but what we can also put
253:03 - here is maybe the job name itself so if
253:06 - I go back in app dot pi and I get the
253:10 - job information so I say job equals load
253:12 - job from DB ID
253:15 - and just provide
253:20 - job equals job
253:23 - then I have information about the job
253:25 - here so let me go in here and let me say
253:27 - your application for
253:30 - job
253:31 - title
253:35 - for the role of
253:39 - so and so
253:42 - at Jovian has been submitted
253:45 - and let's maybe fix
253:48 - some of this
253:50 - class
253:53 - MB
253:57 - 0 and maybe let's use here
254:01 - class and before so just adding space
254:03 - below and not above the
254:06 - code so let's again submit that once
254:08 - again
254:11 - and this is what it looks like maybe we
254:13 - don't even need headers so maybe we can
254:15 - just use
254:16 - bold text here
254:18 - and that should be fine
254:23 - and this can just be mb2 so let's just
254:26 - make this bold text
254:37 - and let's grab that class
255:04 - okay let's take another look
255:11 - yep so your application for the role of
255:13 - front-end developer at jobin has been
255:15 - submitted and we have the full name
255:17 - email LinkedIn URL education work
255:19 - experience resume URL so whatever
255:20 - information you've provided all of that
255:22 - is going to get
255:25 - displayed here right and maybe we can
255:27 - make this bold instead of
255:32 - putting it in quotations
255:34 - but that's pretty much it that's all we
255:36 - need to do and now
255:39 - so that's one thing we have displayed an
255:40 - acknowledgment then we also want to
255:43 - store this in the DB as you can guess
255:45 - that is going to be fairly
255:46 - straightforward as well so I can very
255:49 - simply just go into
255:52 - the database dot pi and here I can
255:55 - create a new
255:57 - function
256:00 - add application to DB and that's going
256:04 - to take a job ID because each
256:06 - application should ideally be connected
256:08 - to a job ID and it's going to take the
256:11 - application information and it's going
256:13 - to put that into a table but we will
256:16 - need to create a table first
256:18 - so let's create a table I have some code
256:20 - here already for creating a table called
256:22 - applications so let me copy this
256:26 - and let me come into MySQL workbench and
256:29 - paste it here
256:31 - so we are saying
256:33 - let's make it a little simpler so we are
256:35 - saying create table applications so
256:37 - we're going to create a new table called
256:38 - applications and the applications table
256:41 - is going to have an ID
256:43 - which is going to be the unique
256:45 - application ID it is going to be not
256:47 - null Auto increment and it is also going
256:49 - to be the primary key
256:51 - then each application is going to be
256:52 - associated with a job so it's also going
256:54 - to have a job ID so that's what this is
256:56 - for
256:57 - and each application will have a full
256:59 - name it have an email it will have a
257:01 - LinkedIn URL education work experience a
257:04 - resume URL all of that
257:07 - and let's just create that table
257:10 - and that table has been created so we
257:12 - can see show tables
257:15 - and you can see here that we have
257:17 - applications table and a jobs table and
257:20 - let's check show select
257:23 - star from applications
257:26 - and there is nothing inside applications
257:29 - but now we are going to write but now we
257:32 - are going to write the code to put
257:33 - things into applications so once again
257:35 - we say engine dot connect as con
257:40 - and then we say
257:42 - let me first create the query so query
257:45 - will be text
257:47 - select no
257:49 - insert
257:51 - into applications
257:55 - and we need to give it the list of
257:58 - columns that we're going to insert so ID
258:01 - is going to be filled automatically so
258:02 - we're going to insert job ID full name
258:04 - email LinkedIn URL education work
258:06 - experience and resume URL so let's put
258:10 - that on the next line Maybe
258:12 - and the way to put it on the next line
258:13 - is or let's just put it on the same line
258:16 - that's okay so we're going to insert a
258:17 - job ID we are going to provide a full
258:20 - name we are going to provide
258:24 - email we're going to provide LinkedIn
258:26 - URL we're going to provide education
258:28 - we're going to provide experience and we
258:31 - are going to provide
258:33 - resume URL
258:36 - so insert into applications first we
258:38 - provide the list of
258:40 - columns we are going to specify and then
258:42 - we say values again this is a Syntax for
258:45 - insert and then here we provide the
258:47 - values that we want to insert
258:49 - now we can't put all this directly so
258:52 - basically what we're going to do is have
258:55 - some variable names here and we're going
258:56 - to pass those variables later
258:59 - so let me put job underscore ID so
259:01 - that's going to become a variable name
259:03 - colon full underscore name that is going
259:05 - to become a variable name
259:07 - then colon email that is going to become
259:09 - a variable Name colon
259:11 - LinkedIn URL that is going to become a
259:14 - variable Name colon education that is
259:16 - going to become a variable Name colon
259:18 - experience that is going to become a
259:20 - variable name and colon resume
259:23 - underscore URL and that's going to
259:24 - become a variable name too
259:26 - so now that's the query that's basically
259:28 - what we are going to put in so then we
259:30 - can say con dot execute and we're not
259:33 - interested in the result here we just
259:35 - wanted to succeed so con.execute query
259:39 - and let's start putting in the
259:40 - information job underscore ID which will
259:43 - replace this value is going to Simply Be
259:45 - job underscore ID that is coming here
259:48 - so let's put that there then we have the
259:52 - full underscore name that is simply
259:54 - going to be the application which is
259:56 - going to be passed as a dictionary so
259:58 - what we're going to do is we are going
260:00 - to take this dictionary that is
260:03 - sent in request.form and we're going to
260:06 - pass it to this
260:09 - function add application to DB so from
260:12 - the app or let's just call it data just
260:13 - to
260:14 - keep it shorter so full name is simply
260:18 - going to be the full name from the data
260:21 - and similarly we will do this for
260:26 - a bunch of other
260:28 - things so
260:30 - the
260:31 - email
260:34 - is simply going to be the email from the
260:36 - data
260:41 - then the education
260:45 - is simply going to be the education from
260:47 - the data
260:54 - finally we have work experience
260:58 - is going to be work
261:01 - experience
261:03 - and we have resume URL
261:07 - that's going to be
261:10 - the resume URL from the data okay and we
261:14 - just want to execute this and that's it
261:16 - now what do we do we go into app.pi and
261:20 - we import
261:25 - what is it called
261:27 - add application to DB so add
261:31 - application to DB we import it and we
261:35 - simply call add application to DB
261:39 - inside app.pi
261:41 - after getting the data from the form we
261:44 - say add application to DB we give it the
261:46 - job ID or simply the ID which is a job
261:49 - ID and we give it the data
261:52 - so this ID is going to populate the job
261:54 - ID column you can see add application to
261:57 - DB does that
261:58 - the first argument is used to populate
262:00 - job ID and then the rest of the
262:02 - arguments or the data is used to
262:03 - populate the rest of the columns
262:06 - okay I think that should do it so this
262:09 - is going to store the data into the
262:10 - database so let's save it and let's let
262:14 - that run
262:17 - looks like it's running
262:19 - So This Is The Moment of Truth this is
262:21 - what we've been building towards
262:24 - so let's see Akash NS akashness at
262:27 - joven.ai I'm going to put in a good
262:28 - value here this time because it's
262:30 - probably going to go into the database
262:33 - and education let's see CSC IIT
262:38 - Bombay work experience
262:40 - software
262:42 - engineer Twitter
262:44 - resume URL I'm not going to put anything
262:47 - in there right now and let's click
262:49 - submit
262:51 - let's see if this works
262:54 - okay a value is required for the bind
262:57 - parameter LinkedIn URL so looks like we
262:59 - made a mistake so this is exactly what
263:01 - happens you have to go in you have to
263:02 - fix things let's get LinkedIn URL in
263:05 - here
263:14 - and let's go back
263:16 - the data still there fresh let's click
263:18 - submit
263:23 - what else now
263:26 - a value is required for experience looks
263:28 - like we did not put in experience oh
263:30 - it's just called experience is it
263:34 - let's see oh this was
263:37 - okay this is this should be called work
263:39 - experience and that should do it
263:43 - let's submit now
263:53 - unknown column experience in field list
263:58 - okay this should be called work
264:00 - experience as well
264:09 - perfect looks like this went through so
264:11 - your application for the role of
264:13 - front-end developer Joven has been
264:14 - submitted full name email LinkedIn URL
264:18 - education work experience resume URL and
264:21 - let's go into this and select start from
264:24 - applications
264:28 - and looks like this information is here
264:30 - so
264:31 - ID is one the job ID is three and you
264:34 - can see here job ID3 is front-end
264:36 - developer
264:37 - and the email is akashness at jobin.ai
264:40 - the LinkedIn URL is as provided
264:43 - education work experience and resume URL
264:46 - perfect and you can try making another
264:47 - application and that will show up as
264:49 - well so
264:51 - that's something that can be done easily
264:53 - so let's take this and let's just Commit
264:56 - This and let's then revise everything
264:58 - that we've done today so
265:03 - let's see let me add all of these
265:07 - and let's say
265:09 - store application in database
265:13 - and let me commit in push
265:17 - and with that we have
265:20 - added a form to collect applications on
265:22 - the job Details page created a flask
265:24 - route to handle application form
265:25 - submissions created a table to Store
265:28 - applications in the cloud database and
265:30 - stored the submitted applications and
265:32 - shown an acknowledgment so we have this
265:34 - nice
265:35 - let me just change that to
265:40 - and
265:42 - so we have this nice message that page
265:45 - that shows up informing the person that
265:47 - your application for the specific role
265:50 - has been submitted and remember you can
265:52 - now go into any role so you can go on
265:54 - Jovian you can go into the role of data
265:56 - scientists for example and you can
265:58 - submit an application here
266:01 - and you can click submit and that's
266:03 - going to submit for that specific role
266:05 - right all of those applications are
266:07 - tracked in the same table but you can
266:10 - always filter and figure out
266:14 - which job ID you want to look at the
266:17 - applications for
266:20 - so that's it that's all we're going to
266:22 - do today now you can make some
266:24 - enhancements here as well you can make
266:26 - some functional and aesthetic
266:27 - improvements you can try to validate the
266:29 - application form responses before
266:31 - submission so you can Mark some of these
266:34 - fields as required and you can also
266:37 - maybe put in
266:38 - other information like URL so you can
266:40 - say HTML form validations
266:43 - and search that
266:47 - and let's see search for
266:50 - mdn
266:52 - client-side form validation
266:54 - and here you can see that there are many
266:56 - ways to use form validation
267:00 - one thing you can do is you can say
267:01 - something is required
267:03 - and then it won't allow submission then
267:05 - you can also specify certain patterns
267:07 - and you can also specify specific input
267:10 - types so if you search for HTML input
267:13 - types
267:15 - you can see that there are all these
267:17 - input types and some of these are like
267:19 - URL and email so if I just quickly go
267:22 - back here and change the form so go into
267:26 - Form application form.html and change
267:30 - the type here to email
267:33 - and Mark this is required
267:36 - and Mark this is required
267:38 - and change the type here to URL
267:42 - and maybe also change the type here to
267:44 - URL
267:45 - now if I go back here and I try to
267:49 - submit first if I try to submit empty
267:52 - it's gonna fail
267:56 - okay not yet
268:02 - I believe it just needed to reload a bit
268:04 - but yeah I think it should it should
268:06 - there is a way to ensure that it fails
268:08 - so maybe it's not doing that right just
268:10 - yet let me just reload and try again
268:13 - yeah you can see here it says please
268:15 - fill out this field and let's say I fill
268:18 - this out and now if I say submit now it
268:21 - says please fill out this field and
268:23 - let's say I don't put in an email here
268:25 - now it says please include an ad in the
268:27 - email address okay please enter the part
268:29 - following at
268:31 - so it will validate the email and let's
268:35 - say I try to put in something that's not
268:37 - a URL here it will validate that it says
268:43 - please enter a valid URL and similarly
268:45 - here as well please enter a valid URL
268:48 - right so you can leave this blank but
268:49 - you cannot enter invalid data so that's
268:52 - one form of validation that you can do
268:55 - I think we did that then another thing
268:57 - you can do is you can send an email to
268:59 - the administrator and to the candidate
269:02 - every time an application is submitted
269:04 - and sending emails can be done using
269:07 - email sending apis so there is one
269:09 - called
269:11 - mail
269:13 - jet you can try out
269:16 - so mailjet.com
269:17 - all you need to do here is
269:21 - you sign up and then it will give you an
269:25 - API key and you can just send emails
269:27 - using that API key
269:28 - so that's one way to send emails another
269:31 - thing that you can do is you can include
269:32 - a captcha because right now people can
269:35 - just use a selenium or some kind of a
269:38 - web scraper and keep submitting again
269:40 - and again the same form and
269:42 - overload your database and you probably
269:44 - don't want that and the way to avoid
269:46 - that is using those captures those
269:48 - things that ask you to select traffic
269:49 - signs and select boats and cars by
269:52 - showing boxes
269:53 - so one capture tool that you can use is
269:56 - called hcaptcha.com Edge captcha
270:00 - hcaptcha.com so
270:02 - what it gives you is this it basically
270:07 - whenever you try to select something and
270:09 - then you try to click I am a human
270:10 - you'll add this box and it will ask the
270:14 - user to First validate something like
270:15 - this so maybe selecting trains so here
270:17 - it select bus bus next train train let's
270:20 - say Get it wrong it's going to reject
270:22 - the form submission so this way people
270:25 - cannot try to spam you or fool you so
270:28 - that's something that you can look into
270:29 - sending emails is something that you can
270:31 - look into
270:32 - another thing you can try is to create
270:34 - an API to access individual job listings
270:36 - and individual applications by ID
270:38 - so doing individual job listings is
270:40 - actually pretty easy you can just go in
270:43 - here app dot pi and
270:46 - just add a route here at app
270:49 - dot route
270:52 - slash job slash okay slash API slash job
270:55 - slash ID
270:57 - and all you do here is Def should
271:01 - job Json
271:03 - which takes the ID and which just gets
271:07 - the job from the database
271:09 - and says return
271:12 - Json file
271:15 - job
271:17 - and just with that you can now go back
271:20 - and you can say
271:23 - slash API slash job slash three and just
271:28 - get the same job in Json format
271:30 - all right so similarly you can add
271:32 - another route for slash API slash
271:34 - application slash ID which can return
271:36 - data for a particular application and
271:39 - each application also had has an ID and
271:42 - do that or you can also have a API to
271:44 - just get the applications for a specific
271:46 - job so all sorts of things you can do
271:48 - now you have all that power so these are
271:51 - some functional and aesthetic
271:53 - improvements that we can make
271:54 - and then in terms of even going Beyond
271:57 - and sort of making this a full-fledged
271:59 - website you can create an admin login
272:01 - interface so that we don't have to
272:03 - directly interact with the database
272:04 - admins can log in and create and check
272:07 - submitted applications admins can add
272:10 - jobs admins can delete jobs admins can
272:12 - Mark applications as accepted rejected
272:15 - and users can also maybe login to check
272:17 - their application status so a lot of
272:19 - work can be done a lot of possibilities
272:22 - here so let's just Commit This one last
272:24 - time
272:26 - and
272:28 - what do we do we added an API
272:30 - so let's just add that API here and
272:33 - let's click commit and push
272:35 - and soon enough all of this is going to
272:38 - be available on jovencareers.com
272:41 - most of it already should be so here we
272:44 - have the jobs and here we have the job
272:47 - Details page
272:49 - and here we have an application form
272:51 - which
272:53 - soon enough we'll have the validations
272:54 - as well
272:59 - and here then we can submit and then we
273:02 - display the application
273:03 - and we also make that
273:06 - entry into the database
273:11 - there we go
273:12 - so yeah that's everything that we're
273:15 - going to look at today so quick recap we
273:18 - use the project from the previous
273:20 - tutorial made a copy of it opened it on
273:24 - replit and deployed it to render at
273:26 - jobin careers.com we set up a cloud
273:29 - mySQL database on planet scale
273:32 - we created a jobs table added data using
273:34 - the MySQL workbench we connected to the
273:37 - database from replit using SQL Alchemy
273:39 - we in fact created a database.pi file
273:42 - which has all of the database related
273:45 - logic it encapsulates
273:47 - then we connected to the database and
273:50 - displayed the list of jobs from the
273:52 - cloud database using SQL Alchemy we
273:54 - created Dynamic pages to display each
273:56 - job role
273:57 - each page each job got its own page we
274:01 - shared the layout Styles and navigations
274:03 - using bootstrap so all the pages look
274:06 - nice and professional and consistent and
274:08 - we consistently deployed all these
274:10 - changes to GitHub and render and we also
274:13 - made sure that we are not exposing our
274:15 - database password on GitHub so that's
274:17 - why we used secrets on replit and also
274:20 - on render then we added a form to
274:22 - collect applications on the job Details
274:24 - page and then we created created a flask
274:27 - route to handle the application form
274:28 - submissions then we created a table to
274:31 - store the applications in the cloud
274:33 - database finally we stored those
274:36 - submitted applications and showed an
274:38 - acknowledgment and then we also
274:41 - validated the application form responses
274:43 - before submission and there are few
274:45 - things that given a couple more hours we
274:48 - should be able to also incorporate to
274:50 - make our site even more robust
274:52 - so just like that in our in a matter of
274:55 - two tutorials six or seven hours of work
274:58 - we have gone from this this concept this
275:01 - idea of a jovian couriers website and
275:04 - Details page applications and
275:06 - acknowledgment page so we've gone from
275:08 - there this to this actual real
275:11 - functional website that we can actually
275:13 - use and it's completely functional
275:15 - there's nothing here that is stopping us
275:17 - from using it actually for getting job
275:20 - applications for roles for jobin so the
275:23 - data scientist page and then you put
275:25 - some information here and it validates
275:27 - and
275:28 - then you try to submit
275:31 - and then you get a response okay so play
275:34 - around with this it's the we've covered
275:36 - a lot of ground today so it's not
275:38 - something that you will immediately feel
275:41 - completely comfortable with and you may
275:43 - have to work through each step each step
275:45 - has a fair bit of depth in into it you
275:48 - may have to look up references for each
275:49 - step but if you can work through this
275:52 - entire tutorial just try to recreate
275:53 - this on your own then you've mostly
275:56 - learned a large part of what happens in
275:59 - web development and there was a question
276:01 - how will web development help me at my
276:04 - job I can only see it being used for
276:05 - making portfolio websites or personal
276:07 - projects right now well we've actually
276:09 - seen that some of the folks who have
276:11 - graduated from the boot camp and gone
276:13 - into a job have had this requirement
276:15 - where maybe they've created a plotly
276:18 - dashboard or maybe they have created
276:21 - some analysis and they need to put that
276:23 - up online
276:24 - so that other people in the company can
276:25 - see it so a couple of people have had to
276:28 - do this or maybe they have created a
276:30 - machine learning model and now they need
276:31 - to put create a web application so that
276:33 - people can interact with the machine
276:34 - learning model or maybe they need to
276:36 - offer the machine learning model as a
276:38 - rest API so that you can send data to
276:40 - the machine learning model and get a
276:42 - response back and if that sounds
276:44 - familiar that's very simple very similar
276:46 - to The Post form response that we looked
276:48 - at right so there are a lot of areas
276:51 - it's not something that you'd probably
276:52 - be doing in the first six months to one
276:55 - year of your role as a data analyst
276:58 - but in case you need to
277:00 - you always have this and web development
277:04 - of course is always a good skill to have
277:06 - because it just
277:09 - 90 percent of what you do on a computer
277:12 - is happening on the web and now you have
277:14 - the power to create that we've covered a
277:17 - large portion of what happens in web
277:19 - development this is what we do all day
277:21 - at jobin essentially when we're building
277:23 - the platform there are a few more things
277:25 - as mentioned in the future work like
277:27 - creating an admin login interface
277:29 - allowing admins to Mark applications and
277:31 - creating a user login which will just
277:33 - make this a full-fledged web application
277:36 - that you can then start promoting and
277:38 - start getting users for
277:40 - so I hope you found this interesting and
277:43 - I know it's challenging but give it some
277:45 - time and I hope you'll enjoy building
277:48 - your own websites
277:50 - congrats on making it to the of this
277:53 - long and detailed tutorial I hope you
277:56 - were able to follow along and build your
277:58 - own website share like subscribe and
278:01 - I'll see you next time

Cleaned transcript:

this web development with python course is broken up into two parts in the first part you will learn how to build and deploy a site using the flask python web framework in part two you will connect the flask application from the first part to a cloud mySQL database and learn how to deploy a productionready database driven web application Akash created this course he is the CEO of Jovian and he has created many popular courses hi I'm Akash cofounder and CEO of jovial today I am really excited to share with you this practical and HandsOn introduction to web development with python from scratch in this tutorial you will watch me build and deploy a jovian careers website to the cloud using free online resources you can follow along to build your own personal website so let's get started we want to explore web development and deployment using Python and its ecosystem of libraries and we will do this by creating a jovian careers website where we can list job openings at Jovian and people can apply to those jobs so after this lesson you should be in a position to build and deploy your own website maybe a personal website a portfolio or some sample application there are no prerequisites here apart from Python and git so here are some of the topics that we are going to look at we're going to look at how to use GitHub for creating a project and replit for working on a project we will talk about the flask web framework which is used to create web applications in Python we will touch on HTML and CSS we will talk about the bootstrap framework which will help us make our website look a little better with less effort and then we will talk about deployment on cloud platforms specifically we are going to deploy to render.com and finally we will talk about how to set up your own custom domain and configure it to point it to the website that you have created and deployed the first step is to create a project on GitHub now GitHub as you might already know is a platform for sharing and collaborating on software development projects and it is powered by git which is a version control system which lets you record every version of your project as you make changes so the first thing you want to do is go to github.com and then sign in or create an account if you haven't done that already and once you're logged into github.com this is the screen that you will see but in this busy interface what you're looking for is this new button this is the new repository or new project button if you don't see this new button there's also a plus button here on the top right which you can use and just select new Repository now once you try to create a new repository you will have to select an owner which will be your GitHub account your GitHub username and then we need to give this repository a name so this has to be one or more lowercase words separated by hyphens so I'm going to call it Jovian careers website and we can give this a description if we want so I'm just going to say a careers website for Joven and I'm going to make this public so that anybody can access it and I'm also going to add a readme file because this will initialize the repository so I don't have to push anything to the repository to get started and then I'm also going to add a git ignore file so as we do our development a lot of build files and compiled files and intermediate files are created by python which we may not want to put into git because they are not actual source code they are simply used to run the code so to ignore all of these intermediate output files that are created you can select a DOT get ignore file that can get added to the root of your repository now depending on the kind of project you're working on the kind of language you're using the kind of files that you need to exclude May differ so GitHub has already provided a git ignore template for Python and we just select that so that we don't accidentally end up adding any intermediate compiled files or output files into our Repository and finally if you're making your repository public it's always a good idea to include a license which lets others know how they can use it whether they can use it commercially whether they can build on top of it or not and I'm just going to select the MIT license here which is the most liberal license that's available and that's it now we can create the Repository so now the repository is created and you can see here it contains a readme file which is rendered as markdown so it just contains the name of the repository it also contains a license file that you can read and it contains a DOT get ignore file if you click on it contains information about the kind of files that should be excluded from git and these are all the intermediate files that might get created when you're running your python code so let's go back here and take this the next step is to open up this project on the platform replit.com so here this project is on GitHub GitHub can be used to store projects can be used to share projects but cannot be used to develop projects now that's where you might want to use this Cloud platform called replet and replit.com is an online free collaborative in browser IDE refers to integrated development environment so what that means is it can connect to your GitHub account and it can let you write code on the cloud and you don't have to install anything on your computer and your code will be synced to the cloud and you can access it from anywhere so you can go to replied.com and you can then sign up or log into replit so I'm just going to log in because I already have an account and once you log in this will bring you to your replay dashboard now here you can create new projects but ideally you want to use GitHub to keep track of your projects so you can scroll down here and you can click on connect GitHub so let's click connect GitHub and here you might want to then select what exactly you want to give replied access to so in my case I'm going to click on my name and I can choose to authorize all the repositories I have so that any repository I have on GitHub I can develop with replit or I can choose to only give access to select repositories now in this case I'm just going to give access to select repositories because I have a whole bunch of repositories so let's see Jovian couriers website okay that looks great and these are the permissions that replied is going to get it is going to be able to read the code from GitHub and it is going to be able to write code back into GitHub so let's install and authorize and that should now bring us to the replit dashboard and now you should see a GitHub Repose section on your applet dashboard and here you can see whichever repositories you've selected replied will have access here so let me now click on this and let me see what happens so now it's going to import this repository so that means all the code from GitHub and I'm going to make this Rebel public so just like my repository is public I also want to make my replit project public and let me then click import from GitHub and that's going to load up all the files that we had seen here git ignore license and readme.md and it's now going to show these files on replit now everything you build will ultimately have to be run in a certain way so you can configure a run command and every time you click this run button the Run command that you configure here is going to be executed and the output is going to be shown here in this console tab I'm going to type python app dot pi as the command that will be executed when the Run button is clicked so I'm going to click done and this is going to create a file called Dot replit within the repository which contains this information and informs replit this is a Python 3 project and the Run button should run python app.pi now you may notice that this dot replied file is not visible here and that's because it is a hidden file so you can just click on these three dots and say show hidden files and that's going to show the dot replet file which is just hidden from you by default so now we have this project open on replit you can see here we have a files sidebar the file sidebar contains a list of files that are present this is the same get ignore file we had this is the same license file we had and this is the same readme file we had and we can choose to then show a preview which is shown here or we can hide the preview so that's the files tab and here is the file editor this is where we can edit the code and finally here we have two things we have a console which shows the output of the Run button and we have a shell which is just like a terminal or a command line interface where you can run any command line utilities like LS or PWD or CD or whatever you want to do let me click the Run button and see what happens and the first thing it does is it tries to run the command Python app.pi and it says that python cannot open the file app.pi because there is no such file or directory we have not created the file yet so I'm just going to click plus here to create a new file and I'm going to call it app.pi and let's just print hello world here and let's run it and now you can see that the code was executed Python app.pi and hello world the output was displayed here so now we have got our project imported into replit and we are now already developing it we can open up files we can change the code and then we can run the code and of course we don't have to use the Run button we can come in here and we can say python app dot pi and that will work perfectly fine as well so let's take that we've now opened up a project on replit now we are not here to print hello world we are here to build a web application and for building web applications in Python we use a framework called flask so if you just go online and search for flask python you will be taken to this website flask.palletsproject.com flask is one of the most popular web Frameworks in Python and flask is actually really easy to use and let's check the installation and the quick start sections to understand how to use it every Library you come across will have some sort of an installation and quick start or getting started section or maybe a quick tutorial that you can follow so installation simply requires us to run so here it says create an environment Etc we're not too interested in all that right now because we're already using a cloud environment but within the activated environment use the following command to install flasks so this is what we need to do we need to run pip install flask so I'm going to go here I'm going to go into the shell not the console because the console is just tied to the Run button but the shell and I am going to run pip install flask and that's going to now install flask for us now we can go back into the flask tutorial and now we can head into the Quick Start and here is what a simplest possible web application in flask looks like so here there are two things this is the module so when we set pip install flask the module with the name flask got installed and modules always have lower case names so from flask and then we say import and from the flask module we want to import the flask class even though these both are called flask it's a bit confusingly named but inside the module flask there is a class called flask with a capital f so I'm going to import flask and now we need to create an app an app is simply an object of the class flask okay so python has something called object oriented programming built inside it and what we are doing here is we are importing a class and then we are creating an object of the class now if that doesn't make sense don't worry about it all we are doing here is importing functionality from flask and putting it into this variable called app so we are creating a flask application by typing flask this way now the only thing that we need to add here is a name every time you create a flask application you have to give it a name and typically inside any python script you already have this variable called underscore underscore name underscore underscore Define if I for example just type print underscore underscore name underscore underscore and run it you're going to see here that it prints underscore underscore main underscore underscore the name variable refers to how a particular script was invoked if it was invoked using python app.pi the name variable is going to have the value mean and if it was invoked from somewhere else the name variable may have some other name okay so now we have created a flask application now once we have created a flask application we then need to create a route now any website that you visit you typically access it using some URL for example you may go to jovian.ai and this is the page that is on the URL joven.ai now if I click on profile here you can see that the URL has changed to slash Akash NS and now there is a different page rendered on this URL if I click on learn and click on courses you can see the URL has changed to slash learn and now you see something different on this page so what you need to tell flask is when a certain URL is requested what should be returned so here in the quick start we are first registering a route a route is simply a part of the URL after the domain name so here jobin.ai is the domain name and everything after it is called the path or the route so let's do that let's go and register a route here and the way we do that is we say app with an at character so this is called a decorator in Python it's a slightly Advanced concept that's often used in libraries to provide some Advanced functionality so we say app dot route and then we have to provide which path we want it to match so let's say we deploy this website to jovencareers.com then this is going to match slash which is the empty route which is basically just the home page jovencareers.com and then we Define a function so we can define a function below this decorator hello world and in this function let us simply for now return hello world so what we've done here is we've defined a function which simply Returns the string hello world but by adding this decorator we've informed flask that when the URL slash is accessed then show hello world and let's run that and replied does some setup to manage dependencies on its end so let's just wait for that has its own way of managing python packages so that's why sometimes it takes a second or two but once we run it we see nothing happens so nothing happened because if you scroll down here you can see here that they expect you to run things in a slightly different way what you need to do is you need to export flask underscore app equals hello or whatever is the name of the file here it was called hello.pi and then you need to type flask run so what that means is we may have to go back into our DOT replete file and change the code here python app.pi because flask expects to be run in a different way so we need to probably change python app.pi to flask run and we also need to add somehow this flask cap command now that's one way to run it another way to run it is something that I'm going to show you right now I'm going to type if underscore underscore name underscore underscore equals underscore underscore mean underscore underscore so here what we are saying is if the variable underscore underscore name has the value underscore underscore mean and I'm just checking the equality here and this is going to be the case when we run python app dot Pi so let's say if I just print underscore name underscore underscore let me just print I'm inside the if now and when we run it it simply says that underscore unscore name has the value underscore mean and I'm inside the if now so here if the script is invoked using the python command then what we want to do is say app dot run so we have created the app but we've not yet run the app and we don't want to use the flask run command instead we want to do it using app.run and here when you type app.run you will see some documentation you need to provide a few options the first one is a host and it simply says here set this to 0.0.0.0 to run on the local development server so we type app.run host equals 0.0.0.0 and then we pass debug equals true and now we save the file and then we click run and now you can see that replit actually opened up a browser within our browser so this is a fake browser that replied has opened up for us so we have imported flask and then we have created a flask app a flask application and then we have registered a route to the application and finally we have checked if we are running this app.pi file as a script as python app.pi then we want to start the app by using app.run and we want to run it on 0.0.0.0 this is always something that you have to put in so that it runs locally and we said debug equals true so that every time we make a change like if I change this to hello Jovian that's going to now change to hello Jovian and just like that we have created our first web application you'll see here that this is a browser that replied is showing us just for the preview sake but you can also open up this browser in a new tab and that shows you hello Jovian and you can see that this is deployed at this location joviancareers website dot akashness rebel.co so this is one of the benefits of working with replit that you can take the work that you're doing and you can share it with other people even while you are developing it replied is not great for production workloads so you should not be sending a lot of traffic to this site and in fact specifically here it tells you that this is a development server don't use it in production but it is great for testing it is great for quickly prototyping and showing something to your colleagues or your friends so now we have already built our first web page using flask and we can see it running and we can share it with others as well so we've done that now the last thing I want to show you is once you've done some work on replit and you want to save it back to GitHub how do you do that so right now if you see here if I reload this page GitHub still has the old version of the repository it does not have all the changes we've made on replit so just like we might do some development locally and then push our changes to GitHub in the same way we can come in here into the Version Control tab and on the Version Control tab we can review the changes that we've made so it looks like we've modified all of these files and then we can commit and we can push I can simply type what I've changed so added the flask project and I am going to click commit and push and that's going to save all of these changes it is going to create a git commit and it is going to then push these changes back to the main branch of the original repository akashina careers website so if I go back to github.com now and I reload the page you can see here now we have a bunch of other files but most importantly we have this app.pi file and this app.pi file now contains the route hello world so if you want to learn more about how GitHub works then you can check out this tutorial on GitHub and if you want to learn more about replit how it works and you can check out this tutorial and replied and similarly there is a tutorial on flask as well that you can check out we completed the first step which was to create a project on GitHub and then open up that project on replit.com then we created and ran a flask web server as you can see here and finally we push those changes back to GitHub so that we can share our project with others now we are going to start introducing some HTML and CSS so let's start with that now if we come back here to the files tab and create a folder called templates so you can see here I've used the plus add folder button and created a folder called templates and inside this folder I am going to add a file and I'm going to call this file home.html so this file is going to contain the information that I want to show on the page that is being rendered here right now we are simply showing the information hello jogan but we probably want to show something more than that we probably want to show a nice web page with some information some pictures some jobs so all of that we will be putting into this file home.html HTML is the language that is used to create web pages and you can check out any tutorial on HTML so the one that I would recommend is HTML dog.com it's really easy to get started and you can just go in HTML dog.com and open up the get started page and just create an HTML page and it contains a whole bunch of information on how to create HTML documents but this is the most basic structure of an HTML document you have something called a doctype declaration at the top so this tells the browser what kind of a document you are sending so if I type doctype HTML when we send this HTML to somebody's browser we're informing that we are writing HTML code and then you create what's called a tag so in HTML everything is constructed using tags any website you see on the internet is constructed using HTML tags so here the root tag or the outermost tag is called HTML and this is how you create a tag you have a less than and then you have the name of the tag and then you have a greater than so this is how you create the opening tag and then similar to the opening tag there is a closing tag and there is a slash at the beginning here after the less than symbol to indicate that this is the closing tag so basically what we're saying is that within the HTML tag we want to put some information so the root of your document the outermost tag in your document is always going to be the HTML tag now inside the HTML tag we generally put two tags we put head and we put body so body is what you want to actually show on the page and head is some other information typically this is what you want to show in the title bar you can put that information here if you want to include any styling declarations or css we generally put that in the head if you want to include any external Javascript libraries for interactivity we put that in the head so the head is just information that will be used to render some things on the body the body is the actual information that is going to get rendered so in the head typically one thing that is commonly put inside the head is the title and I'm going to call this Jovian couriers and let's just save that for now and inside the body is where you would put some information so here let me just write hello there you'll learn about the job openings at Jovian here so let me save that as well so we've created some HTML file inside a templates folder but how do we use it within the app to use a template we use the render template function from flask so from flask we import render template and instead of returning just a string hello world we say render template and then we give it the name of the template so in this case the template is called home.html so I'm just going to pass in home.html and there you go now inside home.html we are saying hello there you learn about the job openings at Jovian here and that's what shows up here and you can also open it up in a new tab and check the same thing hello there you'll learn about job openings at jobin here now not only that if you see carefully here you can see that now this says Jovian career so we have also set the title of this tab apart from the title we can actually also set this icon so just like you see all these different icons here we can actually also set these icons this is called the fave icon fav icon and I'll let you figure that out how to change the fav icon using a flask template so let's bring that back here now so great we are making progress already we are now starting to show some information about what we want to actually display on the site and we are doing this using a template now before we go further and try to just code the site directly it might be easier if we first figure out what exactly we want to show on the page and this is where you should put your laptop away and maybe start working using pen and paper and try to just draw out what you want to display on the page before you actually try to code it because if you don't have a clear picture of what you want to show then writing the code for it can get somewhat tricky so here I'm going to use a virtual whiteboard but please feel free to use pen and paper to do this and here I'm just going to draw a rectangle to represent the browser and now I am going to just put some information here inside which will give me a guide for what I want to actually show on the page so now let me go here and select the typing tool let's give this page a title Jovian careers and let's make that a little bigger we can also change the color here so let me make that dark so now here I'm going to have a title on the page called Jovian couriers then I am going to put an image on the page so here there's going to be just like a banner image and I don't know what I'm going to put in this Banner image but for now let me just draw some Hills and let me draw a tree the idea is I just want to tell myself that there's going to be an image here let me draw a river or something and then there is going to be maybe some information about shoving so I'm going to type about Jovian here and I'm going to make that a little bigger and I just want to have a few lines of information talking about jogan so I don't want to put any actual text here I'll just put lines to kind of roughly guide me that this is going to be just some information and then below this I am going to show some job openings so let's call this job openings and let's bring that a little bigger so maybe not this big but roughly about this big and this is called wireframing what you're doing here is you're creating a rough idea of what you want your site to look like and we don't want to get very detailed in terms of colors and fonts and all those things we just want to get a rough idea and then let us maybe list some job openings let's see what the job openings will look like so maybe data analyst is a job opening and maybe let me use a lighter color here just to emphasize that this is a part of this section and then under a job opening I may also want to maybe include where this job opening is based so let me call it Bengaluru India and let's make that a little smaller and maybe let's also put an apply button here next to the job opening so now we have an apply button that we want to show and maybe right below the absorb opening let's also show a line a quick separator and let me now take this and duplicate this a few times to get a list of job openings so now we have a second job opening again it's all approximately correct it doesn't have to be 100 aligned and now we have a third job opening and now we have a fourth job opening and that's it and maybe right below the last job opening let's put a button called contact us and that's actually not bad so let me just change that to data scientist let me change that to backend engineer let me change that to front end engineer and let me change this to remote let me change this to San Francisco USA let me change that to Delhi India we just spent four or five minutes designing this wireframe and all we've done here is we've figured out what we want to display on the page so we want to show jobin careers we want to show a picture we want to show about Jovian some information about Joven we want to show some job openings and for each job opening the title the location and then an apply button to apply for the job opening and a contact us button at the bottom in case somebody wants to directly contact us for whatever reason so this is always a good idea whenever you're doing any form of web development it's always great to start with the wireframe first and make it as quick and dirty as possible so what I've done here is I've actually created three wireframes so this is the one page that we have about Jovian open positions and contact us and along with this I've also created a couple more wireframes if you click the apply button then we will go to a job Details page here we have the data analyst job where we have the responsibilities and the requirements of the job and the salary information for the job and below it we are going to have an application form and in this application form these are the fields we're going to have and this is what is going to get submitted and after submitting we are going to show this page which says your application has been submitted and you reach out with the next steps now this is what you should create to just brainstorm with your team or just figure out if this is what you want to work on if there are any major changes required if we have all the information or not and then you can maybe try to either convert it into a more detailed design or you can start coding directly either is fine but this is the information that we want to get onto the page and we've done that by creating a quick wireframe so now keeping this wireframe next to us let's start creating the page so the first thing we want to show here is Joven careers and we want to make this big we want to make this really big how do we make it big well that's what HTML headers are for now if we go back on HTML tutorial here you can see here that there are six levels of headings available on HTML so I'm just going to click on headings this is part of the HTML beginner tutorial and under headings you can see that this is how you create a heading you create a tag called H1 and then you put some information inside it and then you close the tag with a closing tag and then you have H2 and you have H3 and so on so let me just go back here and let me just put an H1 here and now as soon as I change this to H1 you can see that this becomes big next we wanted to have an image let me try and add an image here so how do we add an image again we go back here we check HTML tutorials how do we add images I'm going to click on image and it looks like this is how you add an image so an image is a selfclosing tag because there's nothing that you put inside the image tag you just give it a source so here now we are seeing for the first time something called an attribute apart from a tag and something inside the tag so for example here we have something inside the H1 tag Joven careers here we don't have anything inside the tag but we have this SRC information here so let me just take that IMG SRC actually let me just do that here IMG SRC equals some information and close that and SRC is going to accept a URL so let me copy this URL and let me comment paste that URL in here and let's run that and you can see that this is not loading up maybe there's some issue maybe this image does not exist but in any case we don't want to show this URL we want to show some nice picture about career growth about work and things like that so one good place to find good images for your websites is unsplash.com that's unsplash on splash.com and on onsplash.com you can find royalty free images which means that you don't need to buy these photos to use them you can use them commercially and I'm just going to search for career and this one looks nice this one looks interesting so I'm just going to download this picture here and I'm gonna put this in here and let's also rename this let's call this banner.jpeg and jpeg is simply the file format and now we want to show this file banner.jpg here so where exactly is this file right now this file is on our computer and our computer is not accessible on the internet so we need to take this file and put it somewhere where it can be accessed by our flask application and that's where there is this folder called Static so this should be outside templates not inside let me just move it out so I've created this folder called Static and anything that you put under the static folder will be directly shared by flask externally so if I just upload a file here so I can click upload file and I can select banner.jpeg and then you can see banner.jpg got added here but I want to move it inside static so I'm going to move it inside static and now flask will allow you to access this file using the URL let me open this in a new tab so this is the URL of the server this is where we are rendering the route slash but if you type slash static s t a t i c and then you type the name of the file banner.jpeg you will see that we have this file here right here so what I've done here is simply Jovian couriers website.akashness.revel.com so this was the main website that was getting rendered I've just put slash static slash banner.jpg and anything that was inside the static folder will show up here with the corresponding URL so now I can take this URL and let me go back here and now I can put this here under SRC okay and now you can see that as soon as I put this in now this image file is showing up here now of course this image file is a bit too large so on the image tag you can also specify width and height so I'm just going to specify a height now the height is measured in pixels pixels are simply dots on the screen I'm going to just roughly put it at 320 pixels or I'm just going to put 320 and that's going to automatically convert that into pixels and now you can see here this image has been loaded so now we have an image and now under this image we want this information about Joven so let's get that in as well so now we want a smaller heading so let's call that about Jovian and now let's add a paragraph of text below it so here now we want some text below it now whenever you are just building out a site you don't want to have to type a lot of text and that's where there are text generators available online so just search for text generator one thing that might help is to just search for lorem ipsum text generator so lorem ipsum is just a standard text that is used often for a lot of websites so here yeah you can just click how many paragraphs you want and you can click generate and it's going to generate some text for you so lorem ipsum.io is the site that you want to go to and here you can just copy all of this code so this is just some text you can use any text but I'm just using a text generator which can generate any amount of text I want and now I'm going to put it in a P tag P stands for paragraph so whenever you want to put some paragraph of text you use the P tag and inside the P tag I have put in lorem ipsum and now we have jobin careers we have an image we have about Joven so it's shaping up well and now below about Jovian we want to have another section and now this should be called I believe job openings or open positions so let's use this one open position so let's just call this open positions and then here we are going to again show the jobs here so let's mark this as a todo that's something that we'll Implement later and then finally at the very end of this we will have a button called contact us so again I'm using the button tag here so how do you know which tag is the appropriate one to use that's where you should probably work through an HTML tutorial so here on the HTML tutorial you can see what are all the different kind of things you can create using HTML and what the different tags are so go to HTML dog.com or go to w3schools.com but you've already learned some of the most common tags H1 IMG H1 is header H2S header IMG is image p is paragraph button is just button so now we have Joven careers and then we have about Jovian and then we have open positions and then we have contact us so the structure of the site is there but of course it looks ugly it doesn't really look that great so so far we have seen how to render templates and use static assets so anything that you put inside a static folder is typically called an asset images Etc called assets then we have seen how to create the layout of the page using HTML tags and now we are going to start styling the page using something called CSS HTML stands for hypertext markup language it is simply the language used to create web pages and CSS stands for cascading style sheets it is used to provide some style to our HTML pages so let's start adding some CSS now how do you figure out what to do with CSS the best way is to do a quick CSS tutorial and you can work through the beginner tutorial it should take maybe an hour maybe a couple of hours but the way CSS works is using something called selectors so what we do is create something called a style tag in our head so in the head of the document we create a style tag and in the style tag we need to tell the browser how to apply a certain color or a certain font or a certain layout to a specific portion of the HTML page one way to do it is by simply specifying a tag you can say H1 and now you can open curly brackets or braces so now we are telling the browser anytime you see an H1 which means you see this is an H1 it is highlighted here so anytime you see an H1 apply these styles to the H1 now we have made a selection using a tag and now we are going to apply some styles every style you apply has two parts one is what property you want to change so if I come back here one thing I might want to change is the font size this is probably not big enough so I can say font size so this is the property and then what value do you want to set this property to so you type the property which is typically a hyphenated word and you can look up the full list of properties here so you can go back into the HTML tutorial you can see what all properties are available to apply to fonts so you can say something called font family which is like which font to use font size which is how to set the size font weight you can make bold italics Etc font style Etc so which property you want to change font size and what do we want to change the font size to let me try 80 pixels any property that is the size of some form is specified using pixels which is how many dots on the screen it should take up so let me change that to 80 pixels and let's save that and now you can see that this has become way too big so maybe not 80 maybe I want to stick with 40 pixels then let's try to change the font family so the font family is simply which font you want to use so let me try a font called Roboto okay and you can look up interesting fonts online but I am going to try Roboto and let me change that I think this looks nicer this looks more modern so that's nice then I can change the font weight so right now I believe it is set to bold but if I change this to normal it'll become thinner you can see that it has become thinner in this way you can make a bunch of changes and this is going to apply to all H1 tags now in our page we only have one H1 tag but let's say if we had another H1 tag here maybe below the image foreign careers too it's going to apply there as well so these are some text related things then let's say I want to change the color so I can change the color as well so you type color and then here you have to specify a color using the RGB scale or the red green blue scale every color that you see on a screen is built using red green and blue colors so you can type RGB and then you can specify the amount of red the amount of green and the amount of blue to use so if I put 0 0 0 then here we are simply using black but if I change this to maybe 100 now you can see that it starts to get redder now the values go from 0 to 255 so 255 is the highest zero is the lowest so now it's complete red the R value is 255 then let me try green so 255 and now we have red and green and now it has become yellow because red and green together become yellow let me change that to 0 and now this is completely green you can see all these examples so if you have equal values for red green and blue then it's a shade of gray otherwise it is more mixed of a certain color than others a 0 is darker 255 is the brightest so I'm just going to pick a medium gray so I'm going to pick something like 180 180 and 180. that looks nice to go darker you have to go lower so let me make that hundred hundred hundred all right so now we have a nice gray title and we also want to Center the title so in the wireframe we drew we had the title in the center but here the title is somewhere in the corner so let's Center that and the simple way to center that is to use text align center now do you need to remember all this no you can always just go how to center align text in CSS and find the result directly text align Center and that is going to Center the text view so now our text is centered that's nice then we have this image here I want this image to run across the entire page so let me set it up in such a way that it runs across the entire page so I'm going to go to this image and this time I don't want every image to run across the entire page I just want this one particular image to run across the entire page to be completely white so I'm going to give it an ID okay so now we're looking at the second way to select something on the page and apply a style to it and I'm going to then type hash Banner so whenever you have given something an ID and you want to access it in CSS so you type the hash character or the pound character and then type the ID that you've given it and now this will only apply to the tag which has the ID Banner so ID is ideally something that should be unique on the page only one element on the page should have an ID otherwise your browser may get confused so now we select hash banner and that is going to select the image banner and for a moment I'm going to get rid of this height because I'm going to set it using CSS and now I am going to first set its width to 100 percent let's see that okay so the width is 100 but that's probably too big now so now I'm going to limit the height let me set the height to 360 pixels or 360 dots and I'm just following the same format here property colon and some number and anytime you have a doubt about this you just have to look up some reference and figure it out even after 15 plus years of web development I look these things up all the time so now we have height set to 360 pixels let's reload that so this is looking good but you can see that the picture is stretched a little bit and if this was some photograph then it would look really bad so then you can unstretch the picture so there are ways to unstretch the picture I'm just using something that I looked up earlier called object fit which is used to make sure that instead of stretching the picture we simply use the portion of the picture that can fit inside the content so now this was the original picture do something great you can see here that it was actually quite tall and now the same thing is showing up here so now this picture runs across the screen so that's nice now let's go in here and let's change the H2 as well so for the H2S I'm going to use the font Roboto again so font family Roboto then I'm going to use the font size Let's see we used 40 for H1 so let me use 32 for H2 and then I am going to use the color maybe let's make this a little darker let's make this 50 50 and 50 and let's make this hundred hundred and hundred and finally I am also going to text align Center so my H2S you will see that there are two H2S on the page both of them are fixed and now I maybe also want to use Font weight normal even and that's nice now finally we have this paragraph tag so let me take this paragraph and let me style that as well again I'm just going to use Font family Roboto for now all over my page I like the Roboto font and I'm going to change the color to RGB 8080 so now we have jobin careers do something great about Jovian open positions it's looking better looking better but of course not looking very professional I think one of the things here is that this text is becoming really hard to read because it is going from the left to right so what we may want to put is we may want to just limit the amount of content to somewhere in the center for example if you go to zero to pandas.com one of our courses you will see here that this is slightly more readable because the content is centered it is not expanding to take up the entire space now how do we do that the way to apply such layout related changes is using special tags called div so I'm going to take all of this and put this in a div tag I am going to put this in a div tag and I am going to then give that a little tap so that it's easier to see and now for this div tag I can give it an ID so let me give it an ID container and then let me select the container hash container and now I want to limit the width of this container and the way to limit width is using something called Max width again all you need to do is look up how to limit the width of a div and let me give it 720 pixels as the max width and let's see so now it is limited taking up less space on the screen but I do not want it to be on the left I want it to be centered now the way centering is achieved in CSS is by providing margins and this is where we may want to learn about something called the CSS Box model so if you just look for CSS Box model and look for an image this is basically how a div or any element in HTML is displayed on a page you have the content and then around the content you can specify something called padding some space and then outside the padding you can specify the border and then outside the Border you can specify more space called margin now don't worry if these terms don't make sense yet but the basic idea is anything inside the border is the content and outside the border is the margin so all of these are just different ways of providing space so let's talk about margins and let us try margin left and let us give it a margin of 80 pixels let's see what happens so if we give it a margin of 80 pixels and I reload the page you can see that now there is 80 pixels of space on the left still not centered maybe let me try 200 pixels maybe that will Center it okay looks like it's getting to the center but not quite so I may experiment and I may shift it left and right and find the center but what if the screen size changes now suddenly it's off to the left so this is where we can use a trick instead of specifying margin left we can specify just margin and margin takes four arguments so margin can take four values where for the box that you want to apply this margin to you can specify how much margin you want on the top how much space you want on the right how much space you want on the bottom and on the left so in my case I don't need any space on the top so I'm just going to put 0 here maybe I want 80 pixels on the left and then I don't want any space on the bottom and then maybe I want 80 pixels on the right but ET on the left 80 on the right that may not do the job how exactly do you decide what 80 pixels is once it picks 80 pixels on the left there's so much gap on the right that 80 is not going to do it so here's something that you can do in CSS something that you will do very often is make the left and right margin Auto then the browser decides that it has to give an automatic margin on both left and right and suddenly it gives you an equal margin so whenever you want to Center something on the page just use margin 0 Auto 0 Auto or you can also just say zero or two and it will take this value and apply to the top and bottom and it will take this value and apply to the left and right so margin 0 Auto is a quick way to Center something on a page so this is definitely looking better there is a contact us here at the bottom let's Center that as well so here's what I'm going to do I am going to just put another div around this and what you need to do is you actually need to apply text line Center on this container and that is going to Center the button here now just for this creating an entire style declaration may become too much work so what I'm going to do is I'm going to apply the style inline so this is another way of applying CSS where you can apply Styles inline on a page so I'm just going to set style equals and I'm going to set text align Center and whenever you have just one or two small properties to put you can always just do that and now that has centered the button on the page one way of applying CSS is in the style tag in the head and then in the style tag you can select by tag you can select by ID and one other way of applying CSS is by directly specifying a style and then the property colon the value within the tag itself as an attribute using the style attribute now I want to show you one last way of specifying Styles which is not using tags and not using IDs which is using something called class now here we have a bunch of paragraphs right we have this paragraph here and then we have this paragraph here and because we have styled the P tag both of these paragraphs got affected by the P tag but let's say we also had another paragraph somewhere here at the bottom saying copyright 2022 Jovian and we did not want to apply the same style to this bottom tag as well maybe we want the copyright 2022 Joven to be small not big like this and maybe we also don't want it to be in the Roboto font so how do we do that this p is going to apply to all the paragraph tags so here is what we can do we can go into the paragraph tag and we can say class and we can now give it a name let's call this class body text you can call it anything you want the class name doesn't matter and let's call this also body text and let's not give this class to this third P tag okay and now instead of styling the P tag let us style the body text class so now we want to say dot body text and what this will do is any element whether it's a p a div whatever any element that has the class body text specified like this class body text is going to get these Styles and any element that does not have the class body text is not going to get these Styles so now if you see here this got applied body text this got body text but this did not get the styles that we applied using the class so that is the third way to apply CSS Styles okay so now we have one way which is to specify a tag name and then specify properties and values then we have another way which is to use an ID and then we have Third Way which is to use it class and the ID is specified using hash the class is specified using dot now remember ID ideally there should only be one element with a particular ID on the page because that's what browsers expect ID is identifier it is unique class can be applied to many elements that's the difference between ID and class and another way to apply CSS is directly using the style tag so with that now we have done some basic styling so that's fine we have now styled the page using CSS classes properties and values now one thing I want to show you is how to use a framework for faster development instead of having to type all the CSS manually for every website that you build you can use preexisting set of styles that have been created by some good designers because you may not have great design skills I certainly don't as you can see so you can use predesigned Styles and you can simply apply those styles to your page by specifying classes so here's what I mean let me first save this so let me say added HTML and CSS okay and let me come back here and let me get rid of all these styles okay and I'm also going to remove this one piece of style that I have here and I'm going to maybe also remove this body text for now I'm just gonna make it really basic just the HTML let's get rid of this as well and now let me go online and search for this Library called bootstrap bootstrap CSS so get bootstrap.com is the website and on getbootstrap.com you will find this Library the CSS framework which can be used to apply Styles easily to any website that you're building so let's click read the docs and let's see how to get started so first it says that you need to create a project you need to have an HTML file I think we have an HTML file already we have the file home.html that we are already working with and here it says that you need to add these couple of extra tags this is just some information so that bootstrap works properly we're not using bootstrap yet so let me copy these two meta tags and pop these into the head all right nothing has changed no change so far as such then it says include bootstrap CSS and JS so here it says that we want to copy this link tag here and put it in the head so for now I'm not going to include the JS or the JavaScript because we're not doing any interactive work right now but I'm going to copy the CSS so here all we need to do is come and paste this link tag and this link tag is simply a way to add a link to some other resource on the internet inside your HTML page and what are we linking to we are linking to the CSS file and you can actually open up the CSS file and see what it contains you can see that it contains a whole bunch of preconfigured styles for us so if I zoom in here you can see it contains like box Shadow Focus font weight etc etc so we don't need to worry about what it contains but it contains a set of preexisting Styles and as soon as we add this link tag and Save all these preexisting Styles get applied to our page immediately so if I reload here you can see that I already automatically got some really nice styles now they still need some work but this is looking pretty good and now if you go here and check the left side you're going to find a lot of utility classes the folks who built bootstrap have already implemented a lot of styles a lot of CSS and to apply those Styles all we need to do is add the appropriate classes into our HTML so here's what I mean let me show you an example let me go into containers and it says containers are a fundamental building block of bootstrap they contain and align your content within a given device or viewport okay all that is nice and here it says that there is a class container so dot always means class right so there is a class container which sets a maximum width with proper break points so let's not worry about all that let's just do this let us copy this class name container and let us come to the outermost div here and let us type class equals container okay all I'm doing here is just giving my outer div a class called container and what has that done that is now ensured if I reload the page here you're going to see that that is now centered my content on the page okay the image is causing a problem so let me just get rid of the image for a second this is now centered my content on the page you can see that automatically left and right margins get added for the page so that's great and you can see that the fonts have also changed fonts are also looking nice text is looking nicer more modern so that's all nice the image was causing a problem so let me add back that image and let me see what I can do about images let's see here images so images are made responsive by adding the IMG fluid class so what if I just do this if I just take this and give my image a class IMG fluid okay and now this image is rendering nicely now of course I may still want to do some more styling on my own so under the link tag I can still open up a style tag and let me give this image the ID Banner so it already has the ID Banner so let me now still limit its height to 360 pixels let me set its object fit cover I may also want to send the width so width 100 percent yep the image is looking nice now I want to Center this now how do we Center it now let's see here if I go back here and maybe search for I can always do this command K and let me just search Center and let's see text Center or Center text yep so looks like there is some text alignment classes so if you want to Center some text all we need to do is provide the class text Center so if I come back here and I just want to Center this heading so I say class text Center and now that is Centered for us and similarly for the H2 as well I'm going to provide the class text Center that's going to Center that and let's provide text Center and that's going to Center that it's looking nice I think one thing that I also want to do is maybe make this text a little bigger so let's see let's go up here I think there is another section on typography somewhere we have content typography and here we have headings and here we have lead this this looks interesting I like this so there seems to be a class called lead that I can add to a paragraph so I'm going to come into this paragraph and I'm going to add the class lead and that looks nice you can see that this has become bigger this is nice I may want to add some spacing above this some margins so I can again come in here and maybe press command K margin margin and padding so looks like there are these classes M1 M2 P1 P2 that can be used for applying margins so Mt is used for applying a top margin I can use a class number zero one two three four or something like that 0 1 2 3 4 5 to apply some margins so I can go in here into this H1 and I can say class text Center and then give a space and empty for margin top and give spacing above you see there is some space above and similarly MB for margin bottom and give some space below maybe make that mb4 that's nice and I'm going to do the same thing here Mt margin top two so we are applying a class mt2 to this H2 and inside the bootstrap.css file there is a rule that says whenever you see the class mt2 apply a margin to the top and M before apply margin to the bottom this is the H2 let me apply it for this H2 as well all right this is already looking much better let's fix the button as well so button looks like there are these nice button classes here let me see if I can find a nice large button okay I want to make my contact button look like this so I'm just going to copy this button button primary button large and let me just put that class on the contact button and now the contact button is quite large and I can now put the class text Center here and that's nice now the copyright well maybe we want to add some spacing about the copyrights I'm going to type mt4 and that's going to just give some space above the copyright all right so this is looking relatively much nicer we haven't added the jobs here but that's a quick introduction to HTML CSS and how to use an external framework like bootstrap for faster development now again you don't need to remember any of this all you need to do is go to bootstrap look in the sidebar for what you want to do and then simply look at an example and copy over the styles from that example that's a very quick way to build very powerful websites bootstrap also a support for sidebars it also supports for nav bars and all so what we've done so far is we set up a flask project we created a project on GitHub we opened it up on replit all different tools but they're just there to make our work easier we then created and ran a flask server then we saw how to push changes back to GitHub then we created a template so remember we put it inside the templates folder and then we rendered the template in the app using render template then we styled the page using CSS classes and then we used bootstrap to make our development faster so that we don't have to write a lot of CSS we don't have to become designers the bootstrap team can take care of that for us now let's talk about how to show Dynamic data on a web page it may not be a good idea to just list all the jobs directly in the HTML file because every time we want to add a new job we'll have to go into the HTML file and change something and every time we have to remove a job we'll have to go into the HTML file and change something and making changes directly inside an HTML file can be tricky often what is done is the data is stored somewhere else in a database where administrators can directly just create jobs within that database and then information is fetched from a database and entered into an HTML file and then displayed on the screen and sent to the browser so we are not going to connect to a database just yet but we are going to simulate something similar so I'm going to create a python list called jobs inside which I'm going to store the information about the jobs that I want to keep track of and I'm going to give each job an ID so I'm going to give this job an id1 and let's give the title of this job data analyst and let's set the location of this job to Bengaluru India and then let's set the salary as well let's set that to maybe rupees 10 lakhs and let's create a few more of these so let me copy this over let me add a data scientist role here and let's change this to Delhi that was 10 lakhs and that is 15 lakhs and then let's add another job maybe let's change the ID here as well so this is the kind of information that you would typically get out of a database but for now we're just storing it in a variable so let's maybe put this and call this frontend engineer and let's make that remote and let's make that 12 and let's put in backend engineer and let's put in here San Francisco USA and that will be in dollars so let's just change that to Dollar 120 000. so now we have information about the jobs now we somehow want to send this information into the home.html template and the way to do it is by providing arguments into render templates so let's provide an argument called jobs and you can call these arguments anything you want so let's provide this jobs argument and into this jobs argument let us pass the value of this list of dictionaries so now I can go in here in home.html and now here we have this place where we want to show the jobs I can come back here and here now I can use some special syntax now this is not HTML this is not CSS this is something that flask has provided it is called a templating syntax it is a way to insert Dynamic data into your HTML into your CSS so I'm going to use these curly brackets and here I'm going to put jobs bracket bracket jobs so you see what happened whatever was there inside the jobs list which was passed as the argument jobs is now accessible inside home.html using these double curly brackets we've passed the list and that list got converted into a string and then all of that is going to be showing here but instead if you wanted to pass something else let's say if I go back here and I pass company name maybe this site supports multiple companies so company name equals Jovian and now instead of me rendering Jovian careers first let me just render careers so it just renders careers but now oops not here this is the page title we want to get the yeah here instead of rendering Jovian couriers in the H1 let me first just render careers and now let me add a template tag and let me get company name so remember I'm passing something called company name in app.pi here so now I can access company name by using these double curly brackets and now it is showing Jovian careers so this is the way you pass Dynamic information into the HTML templates and that is why these are called templates these are not going to always be shown the same way because then we'd have to create a whole bunch of files for every page that we want to show these are going to be filled in with a certain information using these tags so that's how tags work now the trouble is we don't want to show information like this if we look back at our excalator wireframe we want to show information like this this is much nicer how do we do that well template support some special syntax as well we can actually use a for Loop inside template so we can say for job in jobs so we want to get each job out of the jobs list remember jobs is a list jobs is a list containing many dictionaries or objects so for job in jobs and then we end the for by writing and for so everything else is going to be inside and by the way this is just a good practice whenever you open a tag it's always a good idea to First close it and then move your cursor back inside so that you can keep track otherwise you forget things so for job and job so now job is going to contain each individual job and let me just for nuance render Insider div let me render and let me change this also to a div this is not exactly a paragraph so to speak so let me just render job now job is a dictionary python dictionary and from the job let me get what information can I get let me just render job title okay so job title let's see now all right so now we've introduced a for Loop using this special syntax and now inside the for Loop we have access to the job variable which in each Loop takes the value of the specific job and then we have this title that we are extracting out of the job variable so that's nice now let's style it a little bit let's make it look like this so let me have this div here like I already have and let me make this an H4 and then below it let me render the information about the job location and let me just type the word location here to make it super clear that I'm talking about location okay location Bengaluru India looking good let me make this bold so one quick way to make things bold in HTML is using the B tag again something you can very easily look up how to make text bold in HTML great looks nice I'm just going to set style equals color RGB and 120 120 120 to give it a nice gray color we may need some spacing right now the spacing is a little messed up so I'm going to go back into this H4 tag and I am going to just give it margin bottom 4px let's just see and I am going to go into this div tag and I'm going to give it margin bottom 16px I could also use bootstrap classes here but this was just easier to do I've got the location in here now let me put in let's put in maybe the salary as well so let's put salary jobs salary foreign and there you go now we have the salary as well what if salary is not mentioned for a certain role what happens then so let's say this one does not have a salary the frontend engineer role so looks like it rendered empty so how about we go back here and handle that just like you have four you can also use if so I'm going to put an if tag here so percent if percent salary if the key salary is present in the dictionary job then render this div otherwise don't render it and then we have to do an end if so now you can see here front end engineer just says location remote now one thing you might want to do is this same job information you may want to render on other Pages as well so what we can do is we can take this layout everything inside the four and I can create a new layout let me call this job item dot HTML and I'll just put this here and let me just adjust the indentation indentation is very important to understand the structure of the code and now let's come back to home and now inside the for instead of having all that HTML I can just use include job item dot HTML so this is a nice way to organize the information so you can see here that inside home.html if I don't have this include the jobs will not be rendered no open positions but once I include what we are telling flask is inside the for Loop each time with the different value of job include the template job item.html and pass the variables that are available in this template to that template now you can structure your templates you can extract reusable components out of your templates and render a nice layout one other thing we want to see here is this apply button and then this bottom border so let's add those as well adding the bottom border is going to be easy I'm just going to try looking at bootstrap here borders so let's see if you want to add a border at the bottom we just say class border bottom so if I go here and inside job item.html I can now pass in class border bottom and let's see what that does okay so now you can see that under the job there is a border I may want some spacing so remember the Box model if you want some spacing outside the Border you use something called margin and if you want some spacing inside the Border you use something called padding it's just different terms don't get too confused about it something that you can look up but I'm going to just put a padding bottom because I want some space inside the border and I'm going to set the padding bottom to 4px and let's see what that does oh sorry not here I should have it in the div all right so you can see that some space has come up here let me change that to 8px and see maybe that looks nicer 8px that looks nicer so let's reload the page and let's see what we have here so now we have data analyst and now we have data scientist now we have frontend engineer and backend engineer and we have a separation as well one last thing we just need that apply button over here let's try to add a button first let me go into command K button and let's see this is too bright so I want to use maybe something like this and this looks like just this so I can just copy this over come in here and let me add that button here let me call it apply Now by default HTML renders information top to bottom so you can see that the button came up at the bottom here but what we want to do ideally is we want to create two columns inside each job listing so one column is going to be the information about the job and one column is going to be the apply button and that's where you can create columns in bootstrap so let's see how to create columns so we want to create something like this we want to create two columns and maybe we want to create like one big column and one small column and the way you create columns is using the call class so looks like I can use call 9 to create a very wide column and then maybe I can use like call 3 or something to create a small column let me just try that so let me just put all of this inside a div everything except the button I'm going to put inside a div so the H4 then the div location and then the salary all of this is inside a div and I'm going to say class equals call 9 so this is going to take up nine spaces out of 12. so bootstrap has something called a 12 column layout so the entire space left to right is divided into 12 columns and you can specify for each div how many columns you wanted to take and here let me call this class call three nine columns I'm assigning to the information and then three columns I'm assigning to the button and we'll play with that let's see what that does okay it still doesn't do anything I think the columns have to be inside a row so we need a div with the class row so let me just give this the class Row the outer div and suddenly now it's looking much nicer so now we have data analyst location Bengaluru I've just copied over some information from here how to create columns so first we create a row and then we create two columns within that row so if we first we create a row and then we create two columns within that Row one column has the width nine and one column has a width three and you can also play with this you can maybe make this width 2 and you can make this width 10 but if you go beyond 12 it is just going to again break into the next line but this looks nice so now we have this nice data analyst and then we have apply and everything and I think it'll be nice to get the apply maybe on the right instead of on the left and also maybe vertically centered but as of now it looks fine it doesn't look bad so now we have some Dynamic data that we have rendered so we have taken information that was stored inside this list we have passed it into the render template as a variable and of course we've also passed this other variable company name and then inside the home template we are using a for Loop where we are getting values out of the jobs variable into job and then we are passing it into this other template called job item.html where we are actually using information from inside the job item and here we are also using an if it's a lot going on here but it's all just things that you can do step by step and then just look at the appropriate documentation or just search online to figure out how 90 percent of web development is probably just looking things up online nobody remembers all this from scratch so that's done so that's one way to return Dynamic data one other way that some websites allow you to access some Dynamic data is using an API instead of returning HTML we can also return some Json Json is simply JavaScript objects so let me create another function called list Jobs first I'm going to register this at the route slash jobs and I'm going to take the jobs information I'm going to convert it into a Json string so for that there is this helper function called jsonify all it does is it takes any object and converts it into a Json object so jsonify and give it jobs and now we have a second route so now we have a second URL that we have added in our server so now if I go back here and I open this in a new tab and then open slash jobs if you see I've added slash jobs at the end you can see that now I've sent this information as Json when people say rest API or Json API or API endpoint this is what they mean that your web server is returning some information not just as HTML this is the HTML version of that information but the same information is also accessible in the form of Json in the form where it's just the data and then you can do whatever you want with the data so I'll tell you quick secret now you can go to job AI slash akashians for example and you can get this page containing all of my information or you can go to jobin.ai API slash user slash Akash NS and you can get the same information in Json format so if you want to view information about me you can look at the Jovian page or if you want to just programmatically extract the information about me maybe you want to programmatically extract information about thousand users and you have their usernames then you can simply invoke this Json endpoint or this Json route and get all that data as Json and maybe create a CSV out of it and analyze it so the only difference between creating an HTML endpoint and between creating a Json endpoint is that instead of rendering a template you're just using jsonify and often just to differentiate between HTML pages and nonhtml Pages we often tend to put this API name in front of it API stands for application programming interface but what it really means is just a URL which does not return HTML to be shown on the browser but it returns some structured data in the form of Json which can then be programmatically analyzed so now we've created our first API route we've created our HTML Rod we've created our API route and this information right now is stored in a variable but it could very well be coming from a database okay now enough building I think this website is looking reasonable so let's now deploy this website to the cloud it is already deployed in some sense it is on replit but as I mentioned in the beginning replied is better suited for development your Rebel can shut down anytime because it's free resources and it doesn't really handle large workloads because it's doing a lot of things to help you develop more easily so now when you want to put it into production you will have to figure out some Cloud platform where you're going to deploy this one Cloud platform that makes it really easy to deploy python applications is called render.com there are other Cloud platforms like Amazon web services and Heroku and Google cloud and Azure but render is really easy to work with so that's why I want to show you how to work with render.com so first I'm going to take my app.pi and I am going to then go into Version Control and I'm going to say added Dynamic data and API route and then I'm going to commit and push and now this information is sent back to GitHub so now I'm no longer concerned with replit now all my information has gone into GitHub so now jobin careers website if I open up app.pi seems to contain all the information that I have put in so far now I want to take this GitHub project and deploy it on render.com and the way I'm going to do it is go to render.com and create an account and it's free to get started there's a free plan that you can use so create an account and once you've created an account you will see this dashboard and on this dashboard you can click new and we want to create what's called a web service which means we are not just sending some HTML normally we're maybe also connecting to a database and getting some Dynamic data Maybe we also have some API routes and things like that so we want to create a web service a static site is just a set of HTML pages that you want to deploy no flask nothing but if you want to create a web service and here we need to allow render.com to pull your code so that's where we can click connect account and on clicking connect account once again we are asked which organization or which account we want to use so I want to do it on my personal account and I want to give it access to only the German careers website and I'm going to just click install and this will ask me for my password and now you can see this repository is connected so now let me click connect now when we click connect we have to just configure this deployment okay now we are going to take the code that is there on GitHub and we're going to deploy it on the cloud using render so we need to configure it first thing here I am going to give this a name let me just call it Jovian careers website this is a name for internal reference then environment is Python 3 that's fine region is Oregon it doesn't matter it's basically where in the world the server is going to be located branch is main that is the main branch on GitHub where we are developing and then it requires a build command so remember we installed flask at the beginning render.com doesn't know that it needs to install flask so what we need to do for render.com is to create a special file called requirements.txt and it's not that render requires this file it is a standard in the python ecosystem that anytime you have a python project and you want to specify that it requires certain libraries the project requires certain libraries it's a convention to put that information inside a requirements.txt file so I'm going to add a requirement here called flask so that's the one library that needs to be installed on the server and second I am also going to add another Library called G unicorn so gu and i c o r n you can look it up G unicorn so what GE unicorn does is this is a production server for python remember flask when we ran it it said that it is a development server don't use this for production so whenever you want to put a flask application into production you need to use the G unicorn Library it's very simple to use it's the exact same command every single time so we have put in requirements or txt flask and G unicorn and let me just commit that so let's say I added requirements Dot txt and I'm going to commit and push and now this is sent to my GitHub repository I can verify that there is a requirements.txt file here which contains flask NG unicorn so now when render pulls the code it is going to receive the requirements.txt file and then here it is going to run this build command pip install minus r requirements.txt all this does is it papers the package manager for python it is used to install libraries in Python and when you say minus our requirements.txt you're just telling pip look into the requirements.txt file and in each line there will be the name of a library and please install that library for me so when render pulls the code from GitHub every time something changes in the repository render pulls the code and then it's going to run pip install requirements.txt and that is going to obviously come across these two lines flask and G unicorn so then it's going to install those libraries and now to start the server we are now going to use G unicorn so gu and i c o r n g unicorn the library when it is installed it also adds a command called gionicon and this command needs to be given the name of the file that needs to be executed so the file that needs to be executed is app.pi so instead of doing python app.pi we are just doing gionicon app.pi development production python geonicon that's the only change so G Unicorn app dot Pi but instead of app.pi you just put app and then not only that you also have to specify the name of the actual variable which contains the flask application that you want to run now in my case the variable is also called app but let's say this was called flask app then I would have to put something different but we are just going to put Geo Nikon app colon app now how did I find out all this how did I find that this needs to be the build command and this needs to be the start command I just Googled render.com deploy flask application it's not something that I've ever learned before this is something that I looked up just a few hours ago and there is a tutorial on this and it literally tells you exactly this that there is a Hello World project that you can check out on GitHub and you can go through this app.pi file here and you can see this is what app.fi is set up as and then you create a web service on render after signing in and you should set the environment to python you should set the build Command Web install requirements.txt and you should set the start command to G Unicorn app colon app so that's literally what I looked up and you can see here there is a requirements.txt file which contains flask in G unicorn all of these things are not things that you have to learn or become familiar with or anything it's just when you need to connect to a specific platform you need to look up how to do it and that is often in the documentation if you are deploying to a platform called Heroku then this would be slightly different if you are deploying to a platform like AWS this would be slightly different all that matters is figuring out how to make it work so now we've put in all this information and now we can go in here and select a plan you can choose the fee plan I'm choosing the paid one because it's going to build slightly faster and now it is going to create a deployment of this application you can see that the application has become visible on jobiancareers website Dot onrender.com and it is first cloning the GitHub repository and then it is checking out the main branch so it's basically getting the latest code then it is telling you that it's using a certain version of python now it's installing a bunch of libraries you can see here it said pip install requirements.txt so it's done after all the installation is done it's is going to upload and deploy it so now it's doing a deployment and once it is deployed which means once it is set up on a server and that server is pointed to this URL we will be able to access it and how is it going to run that actual server it's going to run the server by using gionicon App colon app create looks like it has started so now I can go up here and I can open this and I can go in a new tab and there it is this is the jobin careers website deployed on render.com but what I don't like is that it's on this Jovian couriers website dot onrender.com I want my own site jovincareers.com or something so we'll talk about that in just a second but what I want to show you now is how easy it is to change things now you can come back here and let me maybe change some information here from backend engineer let me change this to 150 000 maybe also let me go into the home.html file templatehome.html and here maybe let me change instead of open positions let me call this job openings and let me just go to Version Control and let me say made some changes and let me just commit and push and now those changes are going to come up here if I just reload again it says made some changes 10 seconds ago and now if I come back here and I go into the website again you see that it has started a new deployment so every time you push to the main branch render will automatically take that and try to deploy it and if the deploy fails it will continue to use the previous deploy if the deploy succeeds then the site will get replaced now suppose for some reason this does not get triggered you can just click manual deploy and deploy latest commit and that is going to take the latest code and that is going to deploy it so this way you can just work on replit and test your changes on the test server then use Version Control to push your changes to git and render will pick up those latest changes and automatically deploy them see how easy it is to update your website so now we've seen how to set up automated deployment each time something changes so I believe we change this to job openings and you can see it has already changed to job openings here now let's learn how to deploy it to a nice website like jobin careers.com now this is where you will need to buy a domain this part is not free unfortunately because you need to buy a domain so you can go to domains.google.com and on domains.google.com you can actually click get a new domain and I can search for example jovincareers.com and looks like it is available and it is rupees 860 per year so I can actually go ahead and buy it so I can click this button add my payment information and buy it and so on I've already bought another one called jovencareers.xyz and once I have bought it I can configure it to display this website how do I do it again every platform every deployment platform will have its own way of doing it but on render.com if I go into the project settings here and on the project settings just find the place where it talks about domains so looks like custom domains and you can point a custom domain to this app so I want to point Jovian careers.xyz let's save that and now once you add the domain jobin careers.xyz then it will ask you to update a DNS record don't need to worry about what exactly this means you just have to follow some instructions here so it says add a cname record for www pointing to this and add a a name record pointing to this so I'm just going to copy this thing and I'm going to go here into my Google domain I'm going to click manage and I am going to click on DNS and I am going to add a record right that's what it said add a DNS record so I need to add a cname record for www so I'm going to select record type cname and www and then I am going to put the value Jovian careers website dot onrender.com here and I click save so that's one let's add one more looks like I need to add one more record so now I need to add another record and this time it needs to be an a name or Alias record let's see if we have a name or Alias okay there's no a name there's no alias then it says that okay do not have a name or release then use an a record so now I need to create an a record so I'll just go here I'll create a it's just already pointing to jovencareers.xyz so I don't need to put anything here because that's going to just create a subdomain and then it needs an address so I need to copy this address and I need to paste this address here and then I click save and that's it so now what we have done is we've bought the domain and in the domain we have configured the DNS which is simply something called domain name server setting which means if somebody in the world tries to access the domain which location should they actually be going to a domain is simply a redirection to some actual location and what you said is that if somebody tries to access joviancareers.xyz they should actually be shown the information that comes from this page render.com so let's see looks like it has been verified and now if I go to Joven careers dot x y z you can see that the site that we have just created in the last couple of hours is now live on jovincareers.xyz and every time we make a change on replit let me change that back to open positions here and then we just push that to get open positions commit and push render is going to pick up the latest version and it is going to then deploy that latest version and that latest version is going to be available on jovencareers.xyz and this is something that you can do right now today with your own site that you want to do so now we have just completed rendering Dynamic data creating an API route deploying the project to render.com and connecting a domain with a render deployment now we're going to very quickly make some functional and aesthetic improvements to this site so that it can actually be used as a jovian career site so the first thing I'm going to do is add a nav bar in footer from bootstrap most websites like this one or like Jovian have a navbar even getbootstrap.com itself also has a nav bar Google has an app bar so how about we add a nav bar first so that it looks more like a real website now to get an app bar I'm going to go into bootstrap examples and you can see here there is an example of headers and I can maybe pick one of these the way to do this is I just click download examples and that's going to download that for me and I have it downloaded already and out of those I am interested in the headers example so the navbars example and let me just open up vs code and here under headers maybe let's add I like this one so maybe let's get this one so this is number one two three four five number five so let's see here this is the first one this is the second one this is the third one this is the fourth one this is the fifth one so I'm just gonna copy this and I'm going to come back here I am going to put it into a file called nav.html and I'm going to just paste it here and I'm just going to come into home.html and right at the very top here right after the body starts I'm going to say include nav.html and there it is you can see here that this nav is there now this nav is set up in such a way that on mobile it renders differently and on desktop it renders differently so if I just open it up here you can see that here it has rendered differently maybe let's pick a slightly simpler map now that you know how to use an app I'm going to just go into the docs here and I'm going to search for navbar and I'm going to pick a slightly simpler navbar which doesn't have these special qualities just very light very simple come back here and nav.html that's it and let me just change this to Jovian and looks like it's using a image as well so I'll just grab that image this is the image it's using I'm just going to save this image as logo.svg and I'm going to come back here into static and I'm going to upload this image here and instead of this SRC I'm just going to change this to slash static slash logo.svg and there you go now we have that let's also maybe just like we have on Jovian we have a white nav bar with a small Shadow how do we get a shadow let's search for shadow thank you Shadow SM let's just grab that I'm just going to come in here and I'm going to add Shadow SM Ile so now you see a nice shadow below the nav bar let me reload that okay that's nice now the nav bar doesn't stay stuck the nav bar you can see it moves away so I'm just gonna add something called fixed top but now the trouble is that this information shifts up and also it looks like it's showing up behind the nav bar so I'll also give it a background so BG white I'm going to give a solid white background to the nav bar and now you can see here that content goes behind the nav bar all right not bad but I can't see the title here so to fix that we can just come in here into the nav and right below the nav because it is fixed it is kind of popping out of the page so that's why it doesn't have anything behind it so we can just put a div and let's give it a height let's look up the navbar height I believe it should be about 56 pixels so let's go into this this is a nav bar you can see the height 40 plus 8 plus 856 so the nav bar is kind of popping out of the page but we need to put an element behind it at the top of the page to compensate for it popping out so I'm just going to put height 56 pixels and now you can see that suddenly this is now showing up below because of this display great looking nice let's add a footer as well let me go back into these examples here let me check footer yeah there it is photos let's open up index.html let me grab maybe this footer this footer looks nice so this is footer number three so I'm just going to open this up in vs code and photo number three so that's photo number one foot number two foot number three I think this is it go back create a file footer.html paste that in here that's our footer I think here it says Company Incorporated let me just change that to Jovian and there are a bunch of links here which don't point to anything yet but we can fix that later and let me just go into home and here at the bottom somewhere let's add footer and there you go now you see here copyright 2022 I think maybe I didn't copy the whole thing there may be something we need to change here maybe let me try this one I think this is the one yeah there we go now we have this nice Footers now we can go back into home.html and we can get rid of this copyright 2022 part here great so all good so far we have a footer and then we have a nav bar this image here it's it feels a little weird because it's cut off on the left and right so let me come back here and let me go into home.html let me take this image and let me move it out of the container so I'm just going to move this image out and this happens all the time where when you see something implemented it doesn't seem as nice and you may want to just change it so let me move that out and let me get rid of this about Joven and let's see what happens now this is much nicer so now we have the snap bar now we have this image that goes under it of course we may want some padding below it so we may say margin bottom 16 pixels and there we go okay so this is nice but I would like to have maybe an image here on the right just to Showcase how nice it is to work at jobin so I'm going to go back to onesplash.com and let me just search for people working so obviously these will not be Joven employees but let's get them in here let's just call this people and let's go back into templates let us go into static add that in there and let me add this image here lead I'm going to put a div around it and put a div around that I am going to add the image here below this IMG SRC equals static slash people.jpeg and let's set a height for it height 320px now here I'm going to apply a class row and then here I'm going to apply call six and then here I'm going to apply call 6 as well let's see what that does so now we have this nice image on the left I can even give this a nice border so let me say border radius 4px and now we have a nice border here I think we may want to give some margin below the image so style equals margin bottom 16px okay that's nice now this is looking nice on desktop but I think on mobile we probably may not want this image it's a little messy so what you can do is you can do a couple of things you can say you want this to be six only on medium devices and bigger so that's where you can say call md6 and here you can say that you want this to not be displayed d none and DMD block so basically you don't want it to be displayed on mobile and you want it to be displayed only on medium screen so now you can see Jovian careers here is just showing the text and not showing the image and showing open positions and here jobin careers is also showing the image but the apply buttons don't quite work right now and unfortunately they cannot work right now because we have not implemented the second page but we can do a quick trick here so what we can do is clicking on the apply button can actually just open an email address to somebody from the Joven team and maybe the email can already have a prepopulated subject so here instead of using a button we can change this to an anchor tag so that's again something you will learn when you look at HTML in a little more detail so now we've not made any change yet but now we can do this we can point this to some URL so let me just point this to google.com to show you and now when I click on this it's going to open google.com you see so the a tag is used to create links in HTML and the target of the link is simply specified using the href attribute of the a tag so you are probably aware of links like https and HTTP that open in the browser but there's a special type of Link called mail2 so if you search for mail to links what they do is they open your email program so you can actually do this mail to this and you can also in fact include a subject here and you can in fact not only include a subject you can include a body and a lot of other things so let me just do this mail to AI question mark subject equals application for and let me get the job name here so job title let me just do that and now when I click on this link it's going to now open a mail application and it's going to type this mail to hello Joe Windows AI application for data analyst and it's going to be sent from your email and whatever mail application you have configured on your phone or on your desktop or whatever so if I go in here there is a tool here called mail2link dot me and if I just change this to hello at jovian.ai and application for XXX and body my name and here you can just ask the person to put the name and my resume link resume link and my LinkedIn link LinkedIn link so here we can go and construct a mail to URL so I'm just going to copy this mail to URL I'm going to come back here I'm going to paste this mail to URL here in the href okay and all I'm going to change here is application for instead of XXX I'm going to change this to application for job title and now let's try that and now it opens mail and you can see here that it has created a sort of form that somebody who wants to apply can simply fill out and send the mail and we will get an email and we can do the same thing for contact so let's go into contact as well let's construct question about job openings and let's just put my question enter question here and let's just copy that and I'm going to go back into the code into home I'm going to go into the contact button change that from a button to link all that we need to change is just change the tag and we type href equals such and such and now our contact button is going to work as well so there you go my name my question and that's it so now we have a fully working site now we can of course fix these links as well so we can go in here into our footer.html and we can fix the links that we're looking at so home we can point to jovian.ai and let me change this to courses and let's change that to show windowed AI slash learn let's change let's call this events and let's send that to jiovin.ai slash events and by the way if you want a link to open on a new tab you provide a Target attribute underscore blank and that's going to open it in a new tab again something that you can easily look up if you just search how to open a link in a new tab okay HTML is all about just constantly looking things up and let's fix this also to show Windows AI slash about and there you go so now we have almost a fully working site we can probably add a couple of links here the same links that are there in the footer but if I click on home it opens the job inside if I click on courses it opens the job in courses if I click on events it opens up events and contact us opens email apply opens email it mentions the name of the role that you're applying to so if I click on backend engineer you can see here it puts application for backend engineer if I put frontend engineer it puts application for frontend engineer and so on so there we just added mail to links and we've already been using proper files to organize our templates because now we can reuse footer nav and job item on other Pages as well and it's also just easier to read the code when it is in multiple files so we've done some refactoring as well so that's it we just created a functioning site let me just save this so let's just call this functional and aesthetic improvements and let's commit and push that and by the time we're done recapping it should be deployed so what did we do today we started out by setting up a project on GitHub we then opened up that project on triplet for development we then created and ran a flask web server by installing flask and creating a flask cap and registering a route we then push those changes back to GitHub then we learned how to create templates using the templates folder and in the templates folder we put an HTML file and then we rendered it using render template inside app.pi that's all we did and then we added HTML tags inside it to create the structure of the page and how did we come up with the structure of the page we created it on excalator.com so we created it using a simple wireframing tool you could do it on pen and paper as well and then we styled the page using CSS classes but of course our design skills are fairly limited so that's where we use the bootstrap framework for faster development and bootstrap simply offers a whole bunch of helper classes and utilities and even example code to create the kind of layouts that you want to create then we saw how to render Dynamic data using the templating syntax we took some information about jobs from a list of dictionaries and we rendered it using a for Loop in the home.html file we also learned how to organize our templates better using the include keyword so here we have job item dot HTML which is used inside home.html then we deployed that project to render.com you can see here we deployed it all the deployments are visible here looks like a deployment just went live and then finally we also connected a domain so you can buy a domain on google.com and all we had to do was put in a couple of DNS records and now on Jovian careers dot XYZ we have our careers website Jovian do something great show in careers I should probably replace this with some information about the company replace this with maybe an actual photo open positions so it would be nice if there was a form here and all and maybe we'll do that next time but right now it works I can actually share this website and people can click apply it'll send an email to hello jobin.ai and they can also contact us and they can use all of these links so we added the nav bar in footer we added a bunch of mail to Links we made the website mobile friendly you can actually right click inside your Chrome browser and pull these developer tools to the site and then click this mobile button and voila you're looking at your website on mobile so there you go on mobile this is what the website looks like not too bad it is usable maybe there is some spacing left and right that we can fix but largely it looks fine so I guess I can share this link over WhatsApp or wherever and people can start applying so in just a couple of hours from concept to execution to deployment to styling we've built a careers website for Jovian something that we actually plan to use now we did not go deep into any one area because this was sort of a walk through now what you should try and do is try to replicate this on your own maybe create a personal website and maybe list your projects there and also in that process you may want to then go deeper into some of these tutorials explore the HTML tutorial explore the CSS tutorial explore the bootstrap documentation the more time you spend with it the more you try things the better you're going to get at it and that's all that we have for today now what are some ways in which we can improve this we can create a page to show the details about the job for example requirements responsibilities Etc we can also add a form within the same detail space to submit an application instead of sending an email and then we can store the information about the jobs and the applications in a cloud database so that this is fetched not from some object or some python list but it is fetched from a database and that database can then be updated and then the data from that database can be downloaded so we can have information about all the applications in a single place and finally when somebody fills an application form we can also send an automated email confirmation to a candidate and to a jovian admin after the application and then we can also create a login interface now now that people can submit applications maybe we need an admin interface where we can log in and view the submitted applications maybe accept or reject applications and maybe we also create a login application for people to view the status of their job what you're looking at here is actually not too far from dsmlbootcamp.com and you can see this is exactly what we've slowly built upon with more functionality connecting a database connecting login and adding forms and such things but this is all there is to web development you just figure out what you need to build then you find the smallest possible implementation of it that you can ship as soon as possible ideally within a few hours or within a day or within a week you build it you ship it then you identify what you can improve and then you pick up each task and then you keep implementing it and shipping it and that's all we do as web Developers I hope you've learned enough to try and build your own website and you can dig deeper in the areas that you need to the topic for today is database driven web applications today we are building on top of the previous tutorial on web development with python where we explore the basics of web development with python and created a jovian careers website listing the job openings at Jovian this is what the output of the previous lesson looked like we have a header here with a company name and then we have a banner image then we have some information about the company an image showing some people working and then a list of open positions with each position containing the title the location and the salary for that position there is also an apply button for each position and clicking on apply opens up your default email client and asks you to fill out some information over email so that was a quick and easy way for us to collect applications over email then we also have this contact us button clicking on it again opens up the email and fills in a different subject and body depending on which of these buttons are clicked then we also have a footer here which links to the jobin home page courses events and other information so this was what we worked on the last time and we did this using the flask HTML framework we also learned how to use HTML and CSS to build out the page and we saw how to use the bootstrap framework to quickly build a good looking page we also saw how to deploy the website to the cloud using the platform render.com and attach a custom domain in this case it was jobiancareers.xyz so today we're going to build on top of this and we are going to incorporate databases which form the backbone of most modern web applications including Jovian so we will look at how to connect a flask web application to a MySQL Cloud database we we will then learn how to create Dynamic Pages by pulling information from the database we will also see how to add entries to the database using data from form submissions for examples applications made to a job will be stored back into the database and finally we will deploy a production ready database driven web application to the cloud now the prerequisites for today's tutorial are python flask HTML and CSS flask HTML CSS were covered in the previous tutorial so if you haven't seen that you should check that out but since we are going to be working with databases and relational databases in particular you will also need to know some amount of SQL or SQL just enough to create tables get data out of tables and put data into tables and here are the topics we're going to look at today we're going to look at Cloud databases using the planet scale platform we are going to use the SQL Alchemy library to connect with Cloud databases we are going to create HTML lists and forms so we're going to go deeper into using HTML to create interactive Rich web pages and we're going to see how to create Dynamic web pages and we'll also talk a little bit about how to prevent spam on forms that are published online so the first step is to set up the project and the cloud database now here is a project that we worked on the last time the starter project code it is available here on this URL github.com Akash NS slash Jovian careers website now we don't want to disturb this code since it's already used for the previous tutorial we want to create a new GitHub repository but we want to use this code as the starting point so for that let's first go to github.com github.com is the platform where developers around the world create and share projects in the form of git repositories so I'm going to go to github.com and I'm signed in here already and you may have to sign in if you haven't done that already and click on new and I am going to create a repository under my username and I'm going to call it Jovian careers website V2 and I'm going to leave out the description here I'm going to make it public I am going to not initialize the repository this time I'm going to leave it blank so I'm not going to add a readme file I am not going to add git ignore and I'm not going to choose a license I am just going to create the repository so let me click create repository and now because we have not added any data or any files into the repository yet even while setting it up we can now incorporate the changes from an existing repository into this repository so there are many ways to do this but I am interested in The Last One Import code from another repository so I've just created a new project jobin careers website V2 and I'm going to take the URL of the GitHub repository which contains the code that we completed in the previous tutorial and I'm going to click import code and I'm going to enter the URL of the old Repository and now GitHub is going to pull all the code from the old repository Jovian Courier's website into the new repository Jovian careers website V2 so now we have created a new repository with an exact copy of an older repository and you can do this for any public repository that you find on the internet you can copy its URL and you can pull that code into your own git repository using the import function let's give that a second to run and while that is running let's talk about what we are going to look at today so first we are going to copy the GitHub project we are going to once again open it up on replit and deploy it to render then we are going to set up a cloud mySQL database on a platform called Planet scale then we're going to create a table a jobs table and add data to it using the MySQL workbench and don't worry these terms make don't make sense we are going to cover those and finally we are going to connect to the database from our GitHub from our project within replit using the SQL Alchemy Library then we are going to create some database driven Dynamic pages to display the list of jobs that are present in the cloud database then we are going to improve the layout styling and navigation of the pages using bootstrap and finally we're going to push the updated code to GitHub and deploy it again with the dynamic pages next we're going to look at how to store the submitted applications in the database and finally we are going to make some functional and aesthetic improvements to our application all right well this doesn't seem to be working at the moment and this happens sometimes this particular functionality on GitHub could be down so we're going to try an alternative because the automated import is not exact working so we're going to follow a different approach here since the import did not work so I've just downloaded the original code here from Joven Courier's website as a zip file and I have opened up that zip file on my desktop so now you can see this folder Joven Courier's website Main I'm going to change its name to Jovian Courier's website V2 and then let's enter Joven Courier's website V2 and now we can follow the instructions here to create a new repository so first I'm going to initialize a new repository using git init and now a new repository has been initialized then I'm going to add everything that is present here using get add Dot then I am going to commit git commit minus M initial commit and then finally I am going to add a remote here so I'm going to do git remote add origin and I have added this origin here and then I'm going to push and now this is pushed okay so this is the other approach what we try to do here was we try to click import and after clicking import we simply put in the URL but that sometimes it works sometimes it doesn't so what we did instead was we went to the original Repository and we downloaded a zip file and then we opened up the zip file and we followed the instructions to push this code to the careers website V2 repository okay don't worry about the specifics here generally the import command should work for you in this case it just did not unfortunately now we have Joven Courier's website V2 and this contains all the code that we had created the last time the main code was in app.pi where we created a flask application and then we had a list of jobs and then we had a route here which rendered on the home page the templatehome.html with the data jobs and the company name Joven and what was the home.html template well we can see here inside templates and inside home.html that this contained some downloading or including the bootstrap framework and then it contained some other layouts like the navigation bar and then the Jovian careers title and then some information and followed by some list of jobs which is exactly what we see Joven careers dot XYZ all right so we have exactly the code that we ended up with the last time now we want to open up this code on the platform replit so replit is the platform for developing code online and we can now import this new repository into replit by logging into replit and then either you might have to connect your GitHub if you're not if you haven't already connected it or if you've connected it then you may be able to access it directly depending on the permission you've given I've only given it permission to specific repositories so I'm going to click on see all your repos and now here I am going to try and find the repository here but I have only currently given replied permission to access one repository so I wanted to access another repository as well so let me just click on see all your repos here and click this button here manage the git repos GitHub repositories replit can import so let's click on manage the git repositories replit can import now here we can then click configure to configure which repositories replit can import and I'm going to scroll down here and looks like currently it only has access to the Jovian careers website but I'm going to click this drop down and search for Jovian careers website V2 and I'm going to click save and now all we have done is we have upgraded replitz permission from just accessing one repository to now accessing two repositories okay and now we can click akashina slash Jovian couriers website V2 and now we can import this from GitHub and create a new replit project so now the replit project is created using jobin careers website V2 the repository and we can make changes here and push them back to GitHub now the good part here is because we are starting from an existing project everything is set up for us already so we don't need to do a lot of setup you can see we have a DOT triplet file which has the language and the Run command already set up for us and if I enable hidden files here you will be able to see the config file you can see we have our requirements.txt and some other files containing the list of libraries required of course we have the app itself and now if we click run we should now have in our development mode the exact same site that we had completed in the last tutorial so let's give that a second to run but we have now been able to copy the GitHub project and open it up on triplet now another thing we can do is we can take this project and deploy it to render.com so let's go to render.com now I'm going to open render.com which is the platform where we perform the deployment the last time and let's go into the dashboard and now in the dashboard this is my old careers website so now I'm going to click new I'm going to select web service and once again I have only given it permission to access certain repositories on GitHub so here I might once again want to configure the GitHub access for render.com so I'll click configure account I will go into the configuration here and give it access to the other repository which is Jovian careers website V2 and click save and now I should be able to access Joven Courier's website V2 so let me connect it with this new render project that I'm creating and let's call it Jovian careers website V2 and all of this should largely be fine I can probably make it southeast Asia so that things load a little faster the branch main is fine the PIP install requirements for txt is fine I may just need to do gu Nikon app colon app so remember G unicorn is used to run a flask application in production and we have to give it the name of the file which is app without the dot pi and we have to give it the name of the flask application the variable which contains the flask application which is also app and I'm going to select the startup plan but you can also deploy it on free starter will just deploy a little faster and let's create that web service so now this is going to take the code from the same GitHub repository that we have just created and it is going to create a deployment that is going to be visible at this location Joven careers website v2.onrender.com however I want to put it on a domain so I am going to go into settings once again and under settings I am going to put in a custom domain so this is something that we did the last time as well so we're just repeating it right now so this time I'm going to put it on jovincareers.com so I've bought a new domain jovincareers.com I'm going to put it there and now because jovincareers.com is hosted on Google domains we need to configure jobin careers.com and point it to this render site jovencareers website v2.on render.com so let's go to domains.google.com that's where I have registered my domain so now here I am on my domains on Google Dot domains.google.com and let me click manage and now here I am going to go into the DNS settings so this is simply what you have to do to connect any website with a custom domain so let's copy this information so it looks like for jovencareers.com we need to add an a name or Alias record so here I'm going to see manage custom records I am going to scroll down and click create a new record and this is already set to jobin careers.com so we don't need to put anything here there are no Alias records here so another option is to put an a record so now let's copy this value and let's create an a record and let's put this value in here then we also want to point www.jobin careers.com to the same location so I am going to this time create a cname record so let's select C name let's put www here and let's put this in here and let's save that and let's come back here and click verify so it's going to take a moment it is going to try to verify the domain and that might take maybe a minute or two to completely get verified so we can wait for it to get verified but okay looks like it is verified and in a minute or two it should also have a certificate so it should load properly so now we can actually go on Joven couriers website v2.onrender.com to access the same site that we already had or we could also go to jovencareers.com and we will be able to access the same site okay so once you have set up this process then creating a new site is actually very fast very quick and now we finally completed the first step which is to copy the GitHub project open it up on replit and deploy to render now the second step is to set up a cloud mySQL database so this is where I'm going to show you one way to set up a cloud mySQL database but there are many online providers that help you create databases the one we are going to use today is called planetscale.com so planetscale.com is a fairly developer friendly database and we are going to use it because it has a free plan which gives you a fair amount of usage so you can store up to 5 GB and you can do up to 1 billion row rates per month so for personal projects you should be able to work with the free plan so you have to sign up here and I'm just going to sign in and once you're signed in you will be asked to create a database so I am going to go here go down here let's zoom in a little bit and I'm going to click create and let's call this database Jovian careers and let's put this close to us so let's put this in Mumbai and let's create database so now all we've done is we have signed up on planetscale.com and we have created a new database and now once it is initialized we will be able to connect to this database so first we will try to just connect it connect to it using the MySQL workbench so we have a database running somewhere in the cloud this is a mySQL database which is one type of relational database that can be accessed using SQL and MySQL workbench is a downloadable tool it is a tool that you can download on your computer to connect to this database right so you download MySQL workbench and using it you can connect to this database that is running on the cloud so let's download MySQL workbench you can click download now and then you can select the installation for your operating system in my case it is mac and I'm not going to download it because I already have it installed but now I can open up MySQL workbench you can see here this is what it looks like once it is installed MySQL workbench and I'm going to click the plus button here now when I click the plus button here I can set up a new connection so my Planet scale database is running somewhere on the cloud and let me call it Jovian careers Planet scale all right now I need some parameters to connect to this database in this case it looks like a certain host name is set 127.0.0.1 that means my local computer I don't need that so I'm just going to go back here and I'm going to click connect and once you click connect now you will receive the parameters that you need to enter from your MySQL workbench and this is only shown once so you might want to just copy this information and paste it somewhere safe so I'm just going to put it here in this notepad but this is the information that we need to put into our MySQL workbench so let's go back to mySQL workbench so let's see what we need we need a host name so let's grab the hostname this is the hostname we need to provide then the port is something that is already configured we don't need to change anything here then we need a username so this is the username then we need a password so you can click store in Keychain so that the password gets saved so I'm going to copy this password and I am going to then paste it here and this should ideally get saved on my computer then we need a default database name which is called Joven career so I'm just going to do that as well and you can test the connection so when you type test connection it is going to try to connect and tell you if the configuration is correct and once the test connection is done we can click OK and now we can connect to this database from the MySQL workbench home so it should be listed here so this is something that you need to do the first time although you should keep hold on to that password you should not lose track of this password because this will not be shown once we close this window here okay all right so now we are connected to a database running on the cloud so let's just look at what databases are present in the server so if we do show databases you can see here it has a bunch of system databases like information schema MySQL sys and performance schema so this is all for internal use of MySQL we never touch these but there is this one new database called Jovian couriers so great now we have a new database Joven careers and let's see what's inside this database so first we say use Jovian careers and again this is basic SQL syntax so if you take any quick beginner tutorial on SQL you will learn this so now we are using the jobin careers database and now we can show the tables in this database by typing show tables and the casing doesn't matter but I just prefer using uppercase for any keywords so we've said show tables and currently there are no tables in the database so information in databases is organized into tables each table can represent one kind of entity for example you may have one table for jobs you may have one table for applications you may have one table for users and so on so think of tables like sheets in a spreadsheet workbook so each sheet represents a different kind of data all right so right now there are no tables so now we need to create some tables into our database so let's come back here we have set up a cloud mySQL database on planet scale and now we are going to create a table called jobs and add data to it using the MySQL workbench so here is how we create a table we say create table and then we give the name of the table and then we provide the list of columns in a table so table contains several rows and several columns so the columns have to be specified when we create the table so each job is going to have an ID so the First Column is going to be called ID and it is going to be an integer and I do not want the ID to be null so if you want to make something a required column then you say not null and additionally I am going to provide this additional argument called Auto increment so that I don't have to provide unique IDs so I don't have to think about entering an ID every time I try to insert a new row into the table a new ID will automatically be generated for me so that's why I'm putting in Auto increment here okay that's great then we have the job title which is some text so I'm just going to use where care so where care is the data type that is used to store text and the job title can be let's say 200 250 characters so I'm going to just put in 250 here as the maximum length and we of course do not want the job title to be null or empty either then we have the job location which is also going to be a piece of text and that should also not be null in case the there is no location we can just put remote into it then there is a salary so it's possible that there may be some jobs where the salary is not specified so I'm going to use an INT here so salary of type int it is going to be an integer and it can be null so nothing more now we may have locations outside India as well we may have locations in multiple countries so we may want to keep track of the currency in which the salary will be paid so I'm just going to put in another column called currency which is going to be aware car and let's just put 10 characters here not more and then finally with each job there are some responsibilities so I'm going to put in responsibilities here and let's also make that where care and this can be a large thing so I'm just going to give it the length 2000 so that you can put a whole bunch of information in here and then there are going to be some requirements some qualifications so I'm going to have another column called requirements let's also call that VAR care and that is the requirements column so far our table is looking good we have an ID title location salary currency responsibilities and requirements and one last thing I'm going to add here is the primary key and I'm going to make the ID the primary key which means that we are telling SQL that the ID should always be unique every row should have a unique ID and you can get data out of the table by providing a specific ID so I can say give me the information for the job with the id5 and that is what a primary key does all right so now we are ready to create the table so let's just click the lightning button here or we could also just press command enter or control enter and that should have created the table now so now if I go in into a new tab I've created a new tab here using command t or Ctrl t on Windows and now if I say short tables you can see that we have a table called jobs great and now if you want to look at information inside jobs we can say select star from jobs again this is basic SQL this is basic SQL that you will learn if you take any tutorial but if you do not want to type all these queries then you can also use the schemas tab here in the left sidebar and just refresh it once you can see under jobin careers you have tables and under tables you have jobs and you can just click this button here which is going to display the information inside the jobs table and it does the exact same thing by simply running select star from jovencareers.jobs all right so right now there is no data within the table now we can insert data into the table we can do this using an insert statement so we can do insert into jobs and while inserting we first have to provide a list of columns so if I go back here you can see that we have all these columns but out of all these columns only three columns are compulsory title and location and ID but the ID is going to be Auto generated using this Auto increment function so there's going to be a counter inside the table and it's going to Auto generate the ID for us so we only really need to provide the title and location those are the only two required fields to create a job so I'm going to say that we're going to provide the title and location and the values we want to put for title and location are data analyst and Bengaluru India so now we have written some code to insert some data into the database and let's run that and now you can see that here the insert statement executed successfully and it says one row was affected so if we now try select star from jovencareers.jobs then it is going to show us this information data analyst Bengaluru now this is one way to insert information into a SQL database from the MySQL workbench by executing a query but MySQL workbench also provides a nice user interface so we can type for example data scientist and I can type here New Delhi India and maybe I can put in some salary information as well so let me put in 15 lakhs so zero zero zero zero zero and let me put in the currency rupees and after entering this information you can see an apply button here at the bottom of the table you can click apply and that is going to generate an insert statement for us so it's the exact same insert statement let me just zoom in here a little bit for you insert into jovencareers.jobs title location salary currency data scientist New Delhi India and so on and click apply and now that's going to execute this SQL query for you so MySQL workbench allows you to access and manipulate the database without having to write SQL queries as well and we can also update existing records so for example I could just do 10 lakhs here and I could just put in rupees here as well and let's click apply and that's going to apply that for us okay great so one last thing I'm going to do is I'm going to grab a bunch of possibilities and requirements information for these jobs and put that in here as well so I have a link here to some sample jobs data so I'm just going to grab these sample responsibilities let me double click inside it copy it and come here double click inside and paste it and some sample requirements for the data analyst role let me double click copy here and paste it and similarly we have some sample require responsibilities for the data analyst for the data scientist role so I double click here and paste it and finally we have some sample requirements for the data scientists role so I'm going to bring that in here and I'm going to paste that in as well and I'm going to click apply and that's going to put all this information into the planet scale database okay so remember we are still connected to a database on the cloud so all this information is getting written into the database in the cloud great so now we have done the next step which is to create a jobs table and add data using the MySQL workbench so it's just step by step simple process of first creating a table using the create table statement and if you don't remember this you can always just look this up so create table SQL just search that online and maybe check out tutorials point and they have the syntax and then they have an example so this is not something that you have to remember or by heart the idea is you should be able to figure out how to create a table in a mySQL database okay so we created the table and then using the MySQL workbench we inserted some data into the table as well okay so now we can connect to this database from replit using SQL Alchemy so let's go back into replit here let me open up the rebel once again Courier's website V2 so let's go back into replit and now inside replit I am going to create a new file here called database dot pi okay now in the database dot pi file I'm going to write some code to connect to the database and extract some data from the database and we are going to do this using the SQL Alchemy Library SQL Alchemy okay SQL Alchemy so you can also search this online SQL Alchemy it is a library you can see here that it is the database toolkit for Python and let's just search SQL Alchemy tutorial Maybe and here there seems to be let's see there is a tutorial yeah so there is a tutorial on tutorials point you can follow that and there is also an official tutorial so here you can see docs.sqlalchemy.org tutorial so you can check this out as well now to get started we need to First install SQL Alchemy and to install SQL Alchemy all we need to do as you might have guessed it already is come into the shell and inside the shell type pip install SQL Alchemy and that installs SQL Alchemy for us now once SQL Alchemy is installed we can import SQL Alchemy and we can check its version so I can come back here and I've imported SQL Alchemy and let me just print SQL Alchemy dot version I believe it's underscore underscore version underscore underscore and this can make this can help us ensure that SQL Alchemy is installed and we have the right version so let's come back here into the shell for a moment I'm going to close the browser and let's just reset the view here and let's type python database dot Pi so we are asking python to execute the code inside the file database dot pi and let's run that and now you can see here that it prints 1.4.23 so looks like we have a valid version of SQL Alchemy installed next the next step is to establish the connectivity so I'm going to click the next section here and look at the code here so next it looks like we need to import from SQL Alchemy create engine and let's do that so from SQL Alchemy import create engine I am no longer going to print the version so I'm going to skip this as well and then we need to create an engine which is going to connect with the database okay the way we do this is we say engine equals create engine and here we provide information about how to connect to the database so all the information for connecting to the database remember all of this information all of this information has to be provided in a special format now the example given on this page talks about how to connect to sqlite which is a different type of database from MySQL which is what we are using so if we just search SQL Alchemy connect to mySQL and check the resources so again on the SQL Alchemy doc documentation website there is information about how to connect to mySQL as well and we can see here that the way to do it is using this using Create engine MySQL plus pi MySQL colon colon username colon password at Host slash database name okay so let's just copy that and let's put this in here so let's go here and let's do engine equals create engine MySQL plus pi MySQL what is the username well the username is something that we can get from here this is the username then we have a password so let's get the password Here and depending on which database provider you're using this information is going to be different so don't let all this scare you it's all simply just configuration to make sure that we can connect our code to the database that's all okay that was a password then we have the host so the third thing is the host so I'm going to grab the host here and I'm going to put the host information here and finally the database name we want to connect to and the database name is Joven couriers and let's check that let us now run this again so my python database dot Pi just to see the engine was created properly okay so now we get an error no module named Pi MySQL so looks like we need to install another Library so SQL Alchemy internally depending on which type of database you want to connect to requires some Library which can serve as a connector so I'm also going to install pip install ma Pi MySQL so because SQL Alchemy can connect to many different types of databases so it doesn't ship with all the builtin connectors you need to install a connector depending on which kind of database you are connecting to so I'm going to run pip install Pi MySQL and let us try to run python database.5 once again it looks like this is running so great now looks like we are able to create an engine so we have given it some information and we have created an engine The Next Step would be to get some information out of the engine so this is how you can get some information out of the database by making a connection to the database using the engine so here's what you should do first it says we need to import text so from SQL Alchemy import text all right we've done that and then with engine.connect as con so this is just a way to set up a connection we are saying connect to the engine and give the connection a name con so then we can use that connection to execute commands onto that database and then anything we write inside the width can use this connection and once we come out of the width the connection will be automatically closed so that is the purpose of width you will see within a lot of places when we are connecting to databases or when we are working with files so what we do is we either open a file or connect to a database and then give that connection a name then we do some work with it and once we get out of the width the connection is closed automatically so let's grab this with engine.connect as con and then we can say result equals con dot execute and here we can give any SQL query okay in this case they've printed select hello world so they're not really querying the database but let me change this to select star from jobs we know that we our database has a table called jobs so let me just select start from jobs and then let us print what we get back so what we get back any database query that you make on SQL is going to give you a list of rows a table essentially of some sort right a list of rows of results so let's just print result.all which gives us all the rows of the result at once and let's try to run that now python database dot pi okay looks like there was an error and this is what is going to happen all the time whenever you are working on any project in Python 80 percent of the time the code you write is not going to work the first time there's going to be an error but that should not scare you you just have to read the error carefully and see what it says so let's see what it says now the way to understand python errors is to scroll all the way to the bottom and read what is given at the bottom so if we see carefully here it says there is an operational error so there was some error operationally internally inside SQL Alchemy and it says code unavailable server does not allow insecure connections the client must use SSL okay so there are some secure ways to connect to a database and there are some insecure ways so you may have heard of HTTP and https so all this is saying is that we need a slightly more secure way to connect to a database okay now we can explore how to do this first of all here we can go back into this connection MySQL and Maria DB and go down here and check how to connect securely so let's go back here and let's see maybe there is some information about how to connect using how to connect securely I'm going to search SSL and looks like there is some information here about SSL so here we are using pi MySQL that's the library we just installed and looks like for SSL connections it accepts the same arguments that mysqldb accepts as described in SSL connections so let's click that and this is something that you will often have to do when you are working with the library you will have to go into its documentation just try to understand what they're saying and try to figure out how to make things work okay so looks like if we want to connect securely we will have to pass something called connect arcs we will have to pass this into the create engine function and where inside connect tasks we will have to pass a dictionary with some information about SSL okay even I don't understand exactly what this is for or what this does but all I'm doing is interpreting the error here the error that I saw on replit searching for it in the documentation that inside I want to connect securely using SSL so there was some mention of SSL TLS here so I just searched that and I found some information here so so now I'm going to come back here and I'm going to make that change in my create engine function so now we have this so the first thing I'm going to do is maybe extract out this database string so let me just call it connection or DB connection string equals and let's put that into this so DB connection string so that's our first part but apart from this we also now need to pass this information which is connect args so let's build it step by step so connect args okay let's come back here let us put in Connect talks and connect args requires a dictionary so in this dictionary we are going to have a key called SSL so let's pass in SSL and now inside it there are these values that have to be provided I believe this is going to change depending on which database provider you're using so just like this has to change based on the database provider this also has to change based on the database provider so how about we go back into our database provider and here there is some information about how to connect with python so let's check that and looks like they've given some information about what to install they've given some information about like how to configure it so they are using something other than SQL Alchemy and here looks like they have given some information about the SSL certificate right so if you look here we have SSL and then inside SSL we have this sslca so let me just put that in here sslca and let's just paste it here sslca now instead of this value all I'm going to do is I'm going to get this value from planet scale okay so there seems to be some certificate that is required and the way you configure that certificate is by passing this value slash Etc SSL slash certificate.pe okay and I have just saved that and let's hope this works in a lot of cases you're just hoping and trying but let's see okay look like it worked so there were a few complications we ran into a few errors but ultimately we were able to figure out a connection string to connect to the planet scale database and then we were able to figure out how to connect securely and this is not something that you'll figure out immediately sometimes you may have to spend 20 30 minutes or sometimes you may have to just look online Planet scale SQL Alchemy how to connect and here it says that connect to any MySQL client to Planet scale using connection strings so there is some information available online generally speaking so you can see here that there is some information about connection strings and things like that or you can also go on stack overflow.com so you can always go on stack overflow.com and you can just post a question here and somebody will try and answer the question for you or you can ask us if you are part of the job in community right so developers I have to look up documentation developer developers have to try and figure things out by trial and error and try to look at the docs try to look at references try to look at blogs and figure it out and often they just have to ask each other to figure it out but this is what you had to do to connect to a planet scale database now connecting to a Google cloud or an AWS database may be slightly different but the important thing is we are able to get this data out so that's great now I'm curious what is the type of this object that is getting printed when we call result.all what is the type of the data that we get so first let me print type of result and then let's call this result all equals result dot all and let me print the type of result all and then let's also print result all itself and let's include some information here about what we are printing always a good idea otherwise you might get confused about what you are printing exactly so here we are checking the type of result.all and then finally here we are checking the result.all itself okay so this is what we are going to print just to get a better understanding of what this result is okay let's run python database.pi once again and looks like the result is of the type SQL Alchemy dot cursor but as soon as we call result.all we get back a list so you can see that the type of result.all is the class list so the result.all is actually a simple plain python list as soon as you do result at all it becomes a python list and then you have the result.all this is all the information that we obtained but let's check the type of the first element of result all so result or result all is a list so now we can say result all zero so just to look at the first element remember in Python elements are numbered from 0 in a list so result all 0 is simply this object and let's try to print the type of this result all zero so we are getting the first element out of the list that we obtained using result dot all which result was a cursor result.all is a list of results and let's now get the first element so let's just call it first result equals result all zero and let's just print the type of first result okay and this is simply the type of first result okay so result was of the type cursor then or cursor result then result.all was of the type list and finally result first result is of the type Legacy row okay now I don't know how to work with Legacy row I don't know how to work with all these special classes I know how to work with lists and dictionaries so I might want to convert this row into a dictionary because ultimately what each row of a database contains is a bunch of columns and a bunch of values for each column so let me search how to convert SQL Alchemy row into dictionary into python dict okay so there's an exact question how to convert SQL Alchemy row object to a python dictionary and that is how a lot of programming works you just search the right question and you get the answer and looks like what the way you do it is you just do underscore underscore dict underscore underscore so let's go back here and let's say first result dict equals result all which is a list 0 which gives us a legacy result dot underscore underscore dick underscore underscore okay there's no way I could have guessed this I just had to look it up right so that's an important part of development and now let's check the type of first result date and make sure that it is a dictionary so I'm just also going to type this out here type of first result date and while we write it let's also print first result date okay so let's run this once again all right well could not locate column in row okay maybe this did not work maybe we can try another approach let me try this let me just call dict on this let me just call dict and see if maybe that works okay that actually worked so all we had to do is we had to call the dict function so I just took a guess here and sometimes you have to try a couple of approaches and what that did is it took one row of result and converted that into a python dictionary you can see here this is a python dictionary it contains the ID title Etc so now here's what I can do I get the result and I can say result dicts equals the empty list and I can say for Row in result dot all so result.all is going to be a list and for row and result at all each we are going to get one row each and then I'm just going to say result dicks dot append dict row okay and let's get rid of all that and finally let's just print result predict okay and or result text and let's run that one last time and we'll see why all how all of this is going to come together okay so now we have this list of dictionaries you can see here that this is a list and inside this list this is one object and then here inside this list this is the second object right so we had two jobs and the responsibilities for two of those jobs and now all of that data has come up here so we inserted that data from our MySQL workbench and we are getting that data into replit okay so this is good but we probably don't want to print this information we actually want to send this information back to the site when we are trying to access the job page so when we are trying to access Jovin careers dot x y z this is where we want to print the this is where we want to display this information right so let's get rid of this for now and I'm just going to copy this code actually I'm just going to copy all of this code and let's get rid of this and let's come back into our app.pi file and in our app.pi file let's come back here into the hello Jovian into the main route that we had and let's define a function let's call it load jobs from DB okay and what this does is with engine.connect as con and we have to just fix the indentation here yeah so with engine.connect as con and there is an error because we need to import engine so I can say here from database now because we have this file database we can use it like a module so this is the other way of using python files you can invoke them as a module so from database import engine so now from the database file where we had created the engine we are importing that engine inside app .pi and then we are saying inside our load jobs from DB function with engine.connect as con result equals con dot execute and there is this text so let's import that as well so from SQL Alchemy import text great so now text should be fine I believe it's from SQL alchemy.sql if I'm not mistaken let's see here okay no just SQL Alchemy so let's remove text from here let's come back into app.pi and we probably don't need this yeah okay so with engine.connect.com.execute and get a result then instead of calling this result dicks basically this is just a list of jobs right so I'm just going to call this jobs and I'm going to get each row from the result and I'm going to convert that row into a dictionary I'm going to append it to the list jobs and finally I'm going to return jobs okay great so now we have this function load jobs from DB and that function returns a list of jobs so now I can go in here and I can say jobs equals load jobs from DB great and now I can go ahead and remove this so before I do this I just want to show you the old version the version that we have currently running yeah so the version that we have currently running you can see here it contains four roles data analysts data scientists frontend engineer backend engineer and that is coming from this list but let's get rid of this list and let's come here and let's call load jobs from DB and oops now for the jobs input let us provide jobs so we're saying jobs equals jobs basically what we're saying is inside the template home.html when you try to access the word jobs then you should be using the variable jobs that is defined here okay so don't let this notation confuse you this is the name that is going to be used inside home.html and this is the name that is the variable that you want to supply as the information so for example you can call it jobs list and then you would have to put jobs list here okay but just to keep it simple I'm going to call it jobs equals jobs and the company name is Joven so let's retain that okay so now I have just made a major change to my application I've actually removed all the hardcoded data and I am loading that information from a cloudbased database so now if I scroll down here you can see that there are two positions data analyst and data scientist and those are exactly the positions that we have entered into our database which we can verify in the MySQL workbench as well okay so I think that's pretty good it took some work but once you know how to do it the first time it is exactly the same thing each time or the entire code that we had to write was maybe just 11 lines of code and then we were able to create this helper function and you know what I'm just going to move this helper function inside database.pi so that I don't even have to worry about making sure my routes and functions are separated so I'm just going to put this here and let me put text back here and now in app.pi instead of importing something from SQL Alchemy or importing the engine I can just say load jobs from DB okay so this is good encapsulation good coding practice that all your database related logic is going to be here inside database dot pi and it simply has this function load jobs from DB which you can use inside app.pi okay so that I think was a good first step so now what we have done is we have connected to the database from replit using SQL Alchemy and then we also went ahead and we displayed the list of jobs from the cloud DB using SQL Alchemy so just to recap we started by creating a copy of the GitHub project that we had the last time and then we opened it up on replit and we also deployed it to render.com that was pretty straightforward just repeating what we had done the last time then we set up a cloud mySQL database on planetscale.com so we went to planetscale.com created a new database and then we used the credentials from the planet scale setup to connect to the database so we connected to the database from the MySQL workbench and we created a jobs table and this was the code used to create the jobs table and then we added data into it in the MySQL workbench using insert statements but also using the user interface not only can you add data you can also update data and you can also delete information for example I can click delete here and then click apply and that can delete information as well then we saw how to collect connect to the database from replit using SQL Alchemy so we created we imported the SQL Alchemy Library we created a database connection string and then we created an engine and finally we created a helper function to connect to the engine and execute the statement select star from jobs and finally get the result and convert the rows of the result into dictionaries and create a list of dictionaries which would just be the list of jobs and pass that into app dot pi and now instead of having a list of dictionaries that we had hard coded put into our code we are now getting the list of dictionaries from the database and I'm going to change this here as well into this other API which was using jsonify and I'm going to do the same thing load jobs from DB and jsonify jobs and now if I go back here and open the site and go to slash API jobs see this other API this this other route is at slash API slash jobs so I'm going to open slash API slash jobs and you can see here that this is the Json format of the information here which is the exact same thing except on the main page we are taking that Json data and we are displaying it but here we are just displaying it as plain Json okay and of course how do we put the data from the jobs dictionary how do we actually display that data here all of that is done inside this template home.html so inside home.html we have this for Loop so we say for job in jobs so we get each dictionary out so we get each dictionary out from the list of jobs and then we pass that information into job item.html and job item.html contains information here like it it extracts a job title so it is going to take this dictionary here and it is going to extract the title which is data analyst and it is going to put that title here inside an H4 tag then it is going to extract the location and display the location here and it is going to extract the salary and display the salary here so that's rather nice now let's go back into the MySQL workbench and insert a third job role and let's see what happens so let's go into here let's go into frontend developer let's grab that let's put that in here so frontend developer is the role okay now let's come back here let's grab location the location is remote so I'm going to come in here I'm going to paste that let's grab the salary here and I'm going to come in here and paste that let's grab this is still in rupees so let's grab that and let's put that in here and then let's put this in here as well all right last piece is the requirement so responsibilities and requirements and let's put that in here we are not using these yet but we will soon enough okay and I have not added an ID because an ID will get added automatically so I'm just going to click apply and now that's going to create this insert statement for us and now we're going to apply it and looks like it's done so now here is the most interesting thing we have not made any changes to our code but if I go here and reload this page you will now see that the frontend developer code shows up so what's happening is when we visit Jovian Courier's website v2.akashness.reple.com then a request is sent from your browser to this flask server that is running here and the flask server here is listening for requests so that is why it's called a server because it listens for requests and it serves some information back so it listened for the request and based on the request it went into the app routes and it checked which is the matching route so here we are just using the domain itself you're not doing slash API or anything we're just using the top level route and that is matched using slash which is that there is nothing after the domain name and then it invokes that function again so each timer request is made from the browser the appropriate function is invoked and in that function we are making a call to the database so the appropriate database query is made the appropriate SQL queries made by SQL alchemy that data is fetched then that data is passed into this template and that data is then displayed on the server right so this is already a dynamic web page this is no longer the same you're not going to get back the same result each time you open it up because there may be different information within the database so that is very powerful because that this one page now is not a static page it is it has some data that can be fetched from a database but now let's take this and let us also deploy it to render.com so to deploy to render.com all we have to do is take all the code that we have written and put it back on GitHub but there is one problem there is one very big problem that we have to fix here inside the database dot Pi file we have our database username password host all of this sensitive information now this information if it goes into the GitHub repository and the GitHub repository is public then everybody in the world will be able to see our main root database password which means anybody can directly connect to our database and delete information or change information you probably don't want that that is a big security risk so what we should be doing is we should be making this information a secret never put any passwords into a git repository because if you're going to share that repository with other people or if you're going to publish that repository online publicly your passwords will get exposed and anybody can come in and wipe out your database so generally all development and deployment platforms provide a way of storing some secret information which is stored differently from the git repository so I'm going to go here into the sidebar and just move down and here you see there is something called secrets so I'm going to go into Secrets here I'm going to click secrets and I'm going to create a new Secret inside replet and I'm going to call this secret DB connection string okay all uppercase with separated by underscore I'm going to take this text which is inside the codes and now we don't need the quotes anymore and I'm going to put this value here and I'm going to add new Secret and now replit will securely store this information within our replied account and this information will not be public this information will be private to us even if your Apple is public okay because this is secret information so DB connection string is now secret and then the way you can then get this information is using the OS module this is now available as a OS operate as an operating system environment variable so what you do is you say OS dot Enviro and Environ DB connection Str so you simply give the name of the secret and you say OS dot Environ and now if we run I think we have to go back and maybe reload the page so let's reload once okay it is called DB connection string so let me change that to DB connection string and now if we run we are going to see that DB connection string the connection string is no longer mentioned here in the code but the data is still getting loaded data analyst data scientist and frontend developer okay important Point remember this don't put any passwords or any sensitive information into your code it should always be passed through some secret okay so now let's go into Version Control here and I believe we have removed all the secrets here so I can now push my changes and let's see what did I change added connection to database added connection to DB let's just say that and let's click commit and push and that should take all the files and send it to GitHub that's what we were doing in the previous tutorial okay looks like nothing happened looks like there's no change here so what happened turns out that replit seems to have changed their user interface again this is something that happens with the tools that we use they're always making changes making improvements so things may not work exactly the same way and now you see this plus button it is showing you a list of all the files that are changed and you have to manually add which files you want to commit back to git okay so replied is giving you a little more power it is allowing you to manually add which files you want to commit to git so I'm going to click plus plus plus plus and now all these files are going to get committed I'm going to try to commit again load jobs from DB and I'm going to click commit and push and now that's going to take all of these added files earlier no file was added so that's why no nothing was getting committed so now it's going to take all these added files and it is going to commit them now you can see here we have load jobs from DB this is the latest commit and you can also go into Joven couriers website V2 and here on the job in careers website V2 you can now check app.pi you can see it doesn't have those list of jobs and you can check database dot pi and you can see it does not have any secret here okay so that's fine so now we have securely stored this Secret inside replet environment variables and we have still been able to make our code public so we've not lost any security nobody will be able to connect to our database except through the routes that we have already defined so the way people access the database is by opening the page Jovian careers website V2 and then that route internally makes a database connection but we get to control which database connections are possible we have not given the final user the full power over our database okay all this is well and good but let's go to render.com and let's see what happened here let's go into our render dashboard and let's find the project that we had just deployed earlier okay okay looks like a deploy failed so let's click on this let's see why a deployment failed so as soon as we pushed some new changes to master render.com try to deploy but when render.com tried to deploy it ran into a couple of issues looks like there is no module called SQL Alchemy so let's go back here we added a new a couple of new files so let's go in here let's add SQL Alchemy and I believe we also installed Pi MySQL so let's add Pi MySQL as well and let's go back here into Version Control let's call this update requirements and let's add this file into our commit and let's commit and push since we have added new libraries we need to mention them in requirements.txt now we have mentioned them now we can come back into render now let's go back into the dashboard now you can see it is deploying again so let's come back here let us check the deploy the deploy has been started it is in progress and you can see the name of the latest commit update requirements so let's wait here and let's see if it is able to build and deploy successfully okay looks like it was able to install all the dependencies looks like it is also able to build it and looks like it is now going to upload the build let's see if that is going to succeed okay the build was successful it is now deploying so this is going to get deployed to joviencareers.com and let's see if that deployment goes through successfully okay now here you see it runs into an error so it set up the build and then it tried to run geonicon app colon app and then when it tried to access if you just go down scroll down here when it try to access the OS dot Environ DB connection string it did not find the connection string so what happened remember this connection string is a secret that we have put into replit when we sent the code from replit to GitHub GitHub no longer had that connection string that's the whole purpose of storing it secretly on replit so that it we don't expose it in our git repository so if the git repository doesn't have this information then obviously render.com will also not have this information so what we need to do is go into render.com go into the environment here so just like replit render.com also has a way of specifying Secrets or environment variables it specifically says that you can use this for secrets and then click Plus and now we can go back here and let me go to the secrets Tab and let me click on the secret that I already have and let's grab the name DB underscore connection underscore string and let's put that name here and let's grab the value and let's put this value here as well DB underscore connection underscore string and save these changes and that is going to kick off another deploy most likely so let's go back here yeah so it looks like we have just updated the environment so it is going to start another deployment and this time it should be able to access the environment variables so let's go back here and let's see how it's doing so it is once again installing the required libraries it has created a build it is then going to push the build and it is finally going to try another deployment and it's going to try to run the application once again so far jovencareers.com if we just check it Jovian careers.com so far it only has the old data data analyst data scientist frontend engineer and backend engineer so it has all this information right but as soon as this deploy is done hopefully if it works it should be connected to the actual database foreign looks like this has run properly so let's reload the page and you can see now we have data analysts data scientist and frontend developer data analyst data scientist and frontend developer let me just try this one more change here so let's add backend developer and let's change this to San Francisco USA let's make this 120 000. let's put the dollar symbol here and let's grab the information about this job as well so here there is some information too so let's grab that and there is some information here too so let's grab that too and let's click apply and that should now insert this new data and now if we simply refresh jovencareers.com you will now see that it has all four roles and you can tell that this is coming from the database you can try to delete something from the database and that will go away from here great so now we are able to deploy it as well so now we've deployed to render.com we've pushed the changes to GitHub we have kept our secret safe and we have deployed to render.com next we are now going to create Dynamic pages to display each job role now wouldn't it be nice if we had for each of these job roles on jovencareers.com we had its own page maybe we got there when we clicked on apply so let's try to do that let's try to give each of these jobs their own page so let's come back here I am going to come back here into requirements into our app.pi file and I'm going to add a new route so I'm going to say app dot route slash job and now what I want is on jobin dot careers jovencareers.com job slash three let's say if I put the number three I want the data for job ID number three to be displayed here and if I put the number two I want the job data for the job ID to to be displayed here and so on so the way you can create a dynamic route in flask is by putting something between these less than and greater than symbols so if we do less than ID greater than so now it is no longer trying to match slash job slash ID now it will match anything that comes after slash job and the function that you define under it let's call this show job is going to receive that value as a parameter so for example if we try to access jobin careers.com job three you can see here in the URL bar jovencareers.com job slash three then ID will get the value 3. so ID will get the value 3 so basically ID will be the number that we have passed in and now we can first try to load the job so let's see load job from DB so we'll try to load a specific job here which has this given ID and then let's for now let's just convert that into Json so jsonify job and return that okay now we don't have a load job from DB function so let's define that inside our database file so let's define def load job from DB which takes an ID and now we say with engine dot connect as con and then we say result equals con dot execute so what with what is this SQL query we want to write typically when we want to fetch a specific job we would use a select query so we would do something like select star from jobs where ID equals 3 for example and that is the frontend developer role right so that's exactly what we want to write here as well text so let's get that on new line select star from jobs where ID equals and now here we want to put the value of the variable ID so the way you can do this is you can just put a variable here so let me call this Val and then outside this you can provide the value of Val so you can say Val equals ID okay so this is what is called string formatting but it is done in a special way inside SQL alchemy that you use colon to specify that this is something that has to be filled in and then you provide its value as a parameter here okay so where ID equals Val and we are saying that colon Val should get replaced by ID and where is this ID coming from this ID is coming from this input and where is it coming from in the input remember app.pi we are actually getting it from the URL so we are getting the URL ID from the URL and we are putting it into this function load job from DB and let's call load job from DB let's import that so we are putting it into the function load job from DB and inside load job from DB we are taking the ID and we are putting it into the select statement select star from jobs where ID equals well and then we are going to execute it and we're going to get a result now we can say rows equals result dot all so now we have a list of rows now I expect to get back either one row or I expect to get back zero rows for example if I look for the job with ID 10 I'm going to get back 0 rows so here's what I'm going to do if Len rows equals 0 then I'm going to return none else I am going to return dict rows 0. okay so remember rows is a list of rows and each element of row so this is going to be the first element of row row 0 is going to be the first element of row so the first element of row is going to be a legacy row a SQL Alchemy row class and we can convert that row into a dictionary using date okay and if this doesn't make sense what you should try and do is add a bunch of print statements and play around with it and try to make sense of it but now we have this load job from DB so we have that and now we have this app which is going to use load job from DB let's call it load job from DB and let's run that let's run this and for now what we're doing is we are getting the job data and we are just converting it in into Json okay so if I go now and open this up in a new page so remember this is not deployed yet so this is not going to be available on jovencareers.com just yet any code changes have to be deployed via render any database changes any changes made to the data within the database will reflect immediately that's the benefit of having a database that is separate from your code because once the code is deployed independently and the database can be changed and the data just changes independently anyway so now here we have the same development server running and here we have the data analyst role data scientist role frontend developer role so let's see here when we check the jobs table data analyst has the id1 so I can go in here and I can type slash job slash one and that is going to go and match this route ID and ID is going to have the value 1 we're going to load the job with the id1 and we're going to then convert it into Json and return it and exactly what we expect we get the information about the data analyst role the salary we get the currency we get the ID and we get the location requirements and responsibilities so great that's nice so now we have a dynamic page let's try maybe this and yes now we have data scientist let's try three and now we have frontend developer let's try four and now we have backend developer so you may have heard the term rest API this is exactly what rest apis are they go into a database they fetch some information based on the information that you provide in the URL and they return some Json okay but we don't want a rest API right now we want to create a proper HTML page so I'm going to create a new template called jobpage.html and let's create a basic HTML page here from scratch so I can go into home.html and just study how this was created so there is a dock time HD doctype HTML at the top let me put that in here then there is an HTML tag and then there is a head and body tags inside it so let me put HTML and let's put a head in there and let's put a body in there and in the head we may have to put a few things so there is the title let me copy the title let's put that back into a job page great and now instead of jobin careers let's change it to the actual job name so let's get the job title here so let's get job dot title where is this job going to come from we are going to pass it in while rendering the template so let's just do that for now and maybe also inside the body let us put in maybe an H3 tag with the title of the job so let's put the title and let's put the job title below it in a P tag job.title okay we've done something very basic here we just have a title tag and then we have an H3 tag and now let me go back into app.pi and instead of returning Json let me render this template so let me say render template and let me use the template job page dot HTML and let me set job equals job okay so inside the template any references to job will use the valued job which is coming from load job from DB which is coming from ID so that's nice so now I can go back here and reload this page and now it says title backend developer okay maybe let's put in a few other things as well let's get maybe the all the other information basically so let's get the location job dot location let's get the salary job dot salary oops this is just called salary let's get requirements or let's get the currency or maybe let's put the currency next to the salary itself so that would be nice job dot currency we don't have to show it separately then we have the job responsibilities and job dot responsive abilities and then we have the job requirements so requirements and let's get that as well job DOT requirements okay now we have all the information and you can see even the title says backend developer so the title is backend developer the location of San Francisco the salary is 120 000 responsibilities oh okay maybe there's a What's this called responsive ah I think I have a typo in my table so I've just called it responsibilities so let's just change here to responsibilities for now so that it at least it works and now we have the responsibilities as well what about this so here is the frontend developer here we have the data scientist and here we have the data analyst but what if we try to access something that's not there so it shows empty information but rather we should probably just show not found or something like that so I'm going to come back here into app.pi and I'm going to say if not job which means if job is none then simply return not found and whenever you're returning something you can also specify your error code so 404 if you've seen HTTP error codes you may have come across four or four pages 404 represents not found so it tells the browser that the page was not found so this is just a good way whenever you're returning errors to also apart from returning any content and this can just be the output of a template as well but apart from returning any content you can also return not found so if the job is not present then we say not found otherwise we render the template so now if I reload this you can see here it says foreign it should just say not found and here it you can see the browser also says this page is missing so the browser is also able to detect that this is Pages missing based on the error code but if we go back here into maybe job ID3 that information is present okay nice so now we have one page per job and it would be nice to maybe make it look nicer just like the main job page and also connect it here from the job page so right now on the job page we have this apply button which sends an email but instead of sending an email maybe we can just open the job Details page so that's the first thing we're going to do let me come into home.html and inside home.html looks like we Loop over the jobs using four and then we include job item.html so let's go into jobitem.html and here we have this mail to link so let's get rid of this mail to link and instead let's put a different link here so we are saying that when somebody clicks on apply we want to open on the same website we want to open slash jobs or sorry slash job slash the ID of the job for which we have this current button so here we have this job object so we can just say job ID and save that and reload it and now if you see here this you can see in the status bar at the bottom left that this actually opens up that specific job page okay so that's nice we have now opened up that specific job page that is good but I would prefer if this also looked somewhat similar to this page if they had similar layouts so let's try and do that so let's do that one by one the first thing we will do is fix things in the head so the job page currently just has a title maybe we should also include bootstrap in there so let me just get this and put all this in in there as well so this way is going to make sure that the bootstrap framework is imported but instead of copy pasting things this would be a good opportunity for us to maybe create another helper template so let me add a file called bootstrap.html bootstrap.html which can contain the code to include the bootstrap framework let me cut this here and let me come and paste this into bootstrap.html and let's just fix the indentation here so that things are easier to see and let's go into home and let's simply it include here bootstrap.html so percentage include bootstrap.html percentage great and now so you see the layout got messed up but now it's fixed again now we can come back into job page and under the title we can include bootstrap.html so that's nice okay so now if we come back here into a specific job page let's say I open data scientist you can see that already the Styles have become much better that's nice but next step would be to probably add the header probably add this Banner image so let's do that let's add the nav I think the nav is already a component in itself so I'm just going to grab this and put that inside job page.html and you can see now it should have the navigation bar but while we write it how about will it also grab the footer and put the footer in there as well so let's go back to job page and let's include the footer here at the bottom let's see if that has changed something so now we have the header that's nice now we have the footer as well and now let's go back in here and maybe add that Banner image as well so I'm going to go into home and there are two things here so there is this image and then there is a style tag as well so it turns out that style tags do not have to be in the head they can be anywhere in the body so I'm going to put this style tag right above this image and then I'm going to copy all this and I'm going to create a new file foreign er.html and I'm going to put that in here all of this inside banner.html and inside home I am going to Simply include banner.html okay and not only inside home but I'm going to do the same inside so the banner is still here I'm going to do the same Inside Job page.html okay so our website once we've created it for one page it's very easy to replicate across other pages now let's Center this a bit the way this is centered on the home is using a container you can see here we have a container so let's take that and maybe I'll also retain this careers Joven Courier's title here so let me also and let's get rid of this company name this is no longer useful so I'm just going to call it Jovian careers and in app.pi I'm going to remove this company name here that we had passed in earlier but let's go back to home and let's copy this container let's copy this H1 and let's take that and let's put that into jobpage.html and put all of this inside the container and let's close the div let's go back let's see that okay so it is starting to look pretty nice I would say we have the title location salary I think these are probably too big so maybe we can make these h4s and maybe let's make this H3 and just show the title here instead of saying yeah let's make this S3 and let us just show the job title here instead of showing this in a paragraph so just a slightly nicer layout and let's load the location here but let us display it using a P tag and let us give the class lead remember the class lead we had used the last time just to make the text bigger and let's make these all h4s okay and I'm going to move the salary below the requirements and responsibilities let's go back and I think we are almost there now we have data scientist New Delhi India okay maybe we don't need the space above so I'm just going to say class m maybe this is space below the heading so I'm just going to say class mb2 just reducing the space a little bit here okay and let's change this to a simple Mt 0 so I'm just fixing a bit of spacing using some margin classes from bootstrap okay so nothing major this is just things that you have to mess around with a little bit okay so now we have data scientist New Delhi India responsibilities requirement salary but there's one problem here if I go back into the data that we had inserted the sample jobs data you can see here that there are multiple lines present here you can see that there is a next line after each of these points but these points don't seem to be showing up on this page so it would be nice to make these show up as pointers first of all instead of as a paragraph so it's not detecting the new lines and maybe we should also be using bullet points in some fashion here so let's do that let's make these bullet points and the way to make bullet points in HTML is using something called an unordered list so you say ul and as soon as you say UL now you've started a bulleted list and then inside it you put each element into its own Li tag so UL stands for unordered list and Li stands for list item so here you have item a here you have Item B and then here you have Li item C and so on and let me just save that and I'll show you what that looks like before we yeah so this is what it looks like item a Item B item C all we have to do is we have to put this inside ul and Li now our responsibilities is a single string although it does contain these new line characters and so what we need to do is we need to first split it into a bunch of lines a list of lines and then we need to Loop over those lines and create allies or list items so I'm just going to write the code here and I'll let you think about how that works so I'm going to say for line in job dot responsibilities or actually just responsibilities here so let me just call it that job doctors responsibilities dot split and I'm going to split it at the new line character okay so that's going to give me a list of lines and then I'm going to get each line from that list and let's put end for here and now here we can simply render the line inside a list item okay so this code is going to seem confusing right now but spend some time with it experiment with it a little bit and hopefully you'll see what it's doing we are taking responsibilities from the job we are splitting it at the new line character and new line characters are already present but they don't get rendered automatically in HTML for us so we're splitting it at the new line character and then we are looping over it so we get each line and for each line we create a list item okay so we if there are 10 responsibilities then it's going to create 10 allies and all of those allies are inside the UL and that's why you get back this okay so that's great that's nice so now we have a nice bulleted list here let's do this same thing for requirements instead of a bulleted list this time I'm going to create what's called a numbered list or an ordered list so instead of UL I'm going to use ol and I am going to then pass in the same for so I'm going to say 4 line in job DOT requirements and end for let's get the N4 from here and now the line each line is going to come from job DOT requirements and now I'm going to render the value of the line so these templates are very powerful you can do all sorts of manipulation data manipulation right within the template and now you see oops I think I went too far I should be splitting job requirements dot split so now we have created one item for every character that's not what we wanted so job requirements.split and now you see here that you have all the requirements in different lines as well so that's the requirements for the data scientist role let's check the data analyst role and that looks good let's check the backend engineer role that looks good too and that's it we've now created a bunch of different Dynamic pages powered by data from the database and we are making it look nice we're making it look pretty good maybe one other thing we can do is we can maybe make this button this this thing in a nav we can maybe configure it to go back to the home page so let's go back into nav.html so let's go to nav.html and here we have this a tag already and let us just change its location to slash so the word Jovian when we click on it it is going to take us back to the home page and it's important to have navigation otherwise your visitors website visitors may not be able to figure out how to go back even this is not very obvious but let me first reload this so now I want a job page here and if I click this that's going to now take me back to the home page and from the home page I can click on the apply page and that's going to bring me back to the job page and I can click here and go back into the job page and then click apply and go into a different page so great we've now created Dynamic pages so we've completed this step create Dynamic pages to display job role and we have now shared layout Styles and navigations using bootstrap between the two home between the home and the job Pages you should always try to share as much code as possible and that's how your style will stay consistent if you copy paste things then you can make change in one place and the change won't reflect in the other place so less code is always better so keep that in mind all right let's also finally just make save this to GitHub and then let that deploy to render.com so now we have added Dynamic Pages for each job let's commit and push that and that should get deployed in a couple of minutes to jovencareers.com so we've Now read from the database but now we'll see how to write data back to the database and that's going to complete the loop a fully functional database driven application and in the meantime we can verify that GitHub has the latest code you can see that it says Dynamic Pages for each job created one minute ago and we can go to render.com to verify that a recent deployment was done so let's see here a deployment was started okay Dynamic Pages for each job a deployment has been started and it might take maybe a minute or two so it is just downloading the cache right now just to quickly recap what we've done so far we set up a project by creating a copy of our existing GitHub project opened it on replit and also deployed it on render we also created a mySQL database on planet scale and connected to it using the MySQL workbench and then added some data into it created a table then we connected to it from replit using SQL Alchemy and then we used that to display the list of jobs from the cloud database onto the page then we created Dynamic pages to display each job role first we simply got information about a single job ID from the database and displayed that as Json then we showed that in an HTML format and then we used shared layout components to make the user interface look nicer and more consistent and we also made connections between the main page and the other page so now the now our site is now live okay looks like there was some change that did not get pushed so let's see looks like we have a bunch of things here that did not get added so I'm going to add these and add new templates and click commit and push and as soon as this gets deployed we should have all of these changes pushed to GitHub and deployed on jovencareers.com and careers.com will have a dynamic list of jobs loaded from the database every time we add a new job in the database it will automatically show up here we just have to reload the browser and we can go click apply and look at the actual job page as well but of course what's missing here is the actual application form so the actual application form is missing and we are going to add that next so let's go back here let's go into files and let us go into app.pi and see where we can add the application form so we want ideally the application form to show up right below here somewhere in fact if we go back into the wireframes that we had created early on you can see here that on the job page we have this information about the job and here we have the application form so we want the application form to show up right below somewhere here so how do we make that happen we have to make some change Inside Job page.html so I'm going to go into templates and I am going to first create a new template called application dot application form application underscoreform.html and I'm going to go into jobpage.html and include it so first let me just put to do application form goes here and let me close this for a moment let me also put this away to the side so application form goes here and let me import that inside jobpage.html so let me import inside the container let us import application form.html okay and let's go back here let's reload this page okay there seems to be an error oh it should be called include yep and let's reload that okay so now we have here to do application form goes here and now we can start creating the form so to create forms in HTML there is a special tag called form so first let's just give this a title a application form and there is a stack called form and that's how you create a form in HTML and within the form we want some inputs so there's a tag called input and the most and you have to give each input a type so the most common type is text and you have to give each input a name so let's just call this full underscore name and that's it and that should show an input box and let's just save that and let's see what that gave us here okay so now we have this input box but we probably want some kind of a label here so we can go in here and we can actually give it a label so we can say label full name and we can also show some sort of a placeholder here so we can type placeholder and attribute placeholder and say Bruce Wayne again this is something that if you take a basic the even the most basic HTML tutorial they will show you exactly this right so now you have full name Bruce Wayne I probably want this on the next line so I am just going to put a br here so BR is used to create a new line so these are all common HTML tags that you can look up how to add a new line in HTML okay so now we have full name Bruce Wayne that's nice and of course this is not the actual field information this is just a placeholder and as you start typing it will go away and what are the things we want for an application so let's go back here let's check the design that we had xcaliddraw.com okay so we want name email LinkedIn education work experience and resume link and education work experience should allow multiple lines of text and then resume link should be a URL LinkedIn should be a URL so let's come back and let's start putting these things in so let's put label email and we can put in put type equals text name equals email and this name is going to be important later you're going to see how Bruce wayne.com and let's create a again another label and this time we have the LinkedIn and let's see input type equals text name equals email placeholder equals LinkedIn let's call it LinkedIn URL LinkedIn dot in linkedin.com in slash Bruce Wayne okay so it's nice to provide hints as to what you expect to see in the form that makes it easier for the people filling the form and I think we might need maybe we can just put this inside a div each one so that they show up separately and use a br here so div simply creates a box around things and then two things don't show up on the same line if they are in different divs so let's check that okay close enough let's put BR here as well so before we add the other inputs let's add a submit button to the form so now we have full name email LinkedIn URL all these are there let's add a submit button so we can add a submit button simply by saying input type equals submit and that's it and we can also say name equals submit if you want but this is all we need to add a submit button great so now we have full name email LinkedIn URL submit maybe we need some margins here so let me just do class MB 2 and let's put that all over and let's check that one more time okay our form is looking nice so we have Apple full name email LinkedIn URL and we can click submit but nothing happens when we click submit you can see it just reloads the page so well actually something does happen if you see here what has happened here is it has reloaded the page but it has added some information in the URL so looks like the names of the inputs got picked up and something is supposed to show up here which is not showing up yet because we have not filled the form so let's come back and let's do one thing first let's fix this this should be called LinkedIn URL and let's add an action to the form so an action lets us specify where the data in the form is supposed to be sent so when we click submit we want this information to be sent to job and remember this is being used inside job page.html and inside job page we have this job object and is in this job object we have ID so I can go back here into nav sorry into application form and I can say that I want this to be sent into job ID slash apply okay so we don't have a Handler for this route yet but this is where we want this information to be sent so now if I just reload the page and then fill some information let's say our caution is our caution is at joven.ai and let me leave this blank and I click submit observe the URL so now the URL has gone to German careers website V2 repel.com apply and then we have a question mark and then we have full name equals Akash plus n plus s and then email equals something and then LinkedIn equals something so this data got encoded in some format and added to the URL but of course we don't have any routes in our flask application to handle them so that's why it says not found over here but that's where we can now go ahead and we can handle this by creating a new route so let's come in here and let's say app dot route and let's do slash job and slash ID so now we have the ID here and then slash apply yeah so slash job slash ID slash apply then let's call this apply to job and once again it's going to get the ID so it's going to match slash job slash one slash apply slash job slash two slash apply so anything that has slash job slash some ID slash apply this is only going to match slash job slash one two three that's not going to match job slash one slash apply okay so now we have this information here about the ID and from this ID we can get the job if we want but how do we get all this information that is there after this question mark so you can see there is all this information after the question mark a question mark full name equals Akash NS and so on the way to get that information is using the request variable from flask so we can come in here and we can say data equals request Dot args okay and for a moment let's just return Json fi data and let's see what that does so we are getting request.args and request is imported from flask and then we just say jsonify data so we're just taking whatever is there in request.arcs and converting it into Json let's go back and submit the form once again so we have akashness email akashness at jobin.ai and let's click submit and now when we send this data to the apply route okay yeah when we send this data to the apply route you can see that now all this information which was there in the URL got read into this variable data and then it got converted into Json so now here we have email full name LinkedIn and submit we probably don't want to submit so I can go back here and remove the submit remove the name for the submit so this will not get a name and now if I reload this page you'll see that it let's see if I click submit once again from this page now it is only showing us email full name and Linkedin URL great so that's good now we have some data that is filled in from one page and it is sent into another page and here inside this page inside the page inside the route job slash ID slash apply we can do some things we can store this in the DB and we can maybe also maybe display an acknowledgment and maybe we can also send an email so we can do all sorts of things with this information now remember our job listing our application form has a bunch of fields so it also has education and work experience and resume link and putting all that information in the URL can make the URL too long and also just slow things down a little bit so there is another way you can submit forms one way to submit forms is using sending data to a new route in the URL another way to submit from or another method to submit forms is something called post so here what you can do is you can say method equals post and now if I just go back here and reload this page and let's do this again and click submit so now you can see that we get an error first of all saying that this method is not allowed on this URL and second there is nothing in the URL the first name last name Etc don't show up in the URL anymore you can take a closer look here it just says slash job slash apply so when you are submitting using the post method then you need to process information using the post method tool so you can go in here and you can say methods equals post so now we have the form application form.html which uses the post method and then we have the route slash job slash ID apply which also expects the post method so it expects some data to be posted by the browser and not sent in a URL so now if I go back once again and click submit once again you can see now that nothing was sent in the URL and nothing is getting displayed here that's because now when you post data the data is no longer in request.arcs request.arcs contains information from the URL when you post the data is present in request.form okay so now I'm gonna go back one last time and click submit once again and this time you can see when we clicked submit that data was posted to this URL slash job slash three slash apply so nothing in the URL but the data was posted it was sent by the browser along with the request to this URL and now that data was accessed using request.form and finally that data was displayed here as email full name and Linkedin URL as Json okay so let's now just go ahead and add the other form Fields as well so I'm just going to add in the other form field so we have LinkedIn URL then we have I believe work education work experience and resume URL so I'm going to create one div and let's put in a label here education and let's put in an input here okay so now we want a multiline input and there's a special tag for multilayer input called text area so let's call that text area let's give it the name education and that is going to be a multiline input and I think you have to close it like this so again something that can be looked up easily what is a multiline input how to create a multiline input in HTML education then we have work experience and then we have text area again name is work experience great and finally we have a resume URL I'm just going to copy this and paste this in here and let's change this to resume URL and the placeholder let's just remove the placeholder here and let's just call this resume URL okay let's add back this class here class mb2 everywhere so now our form is largely complete we have if we go back here and reload the page we should see all the fields okay we might need to just add br's here so now we have full name email LinkedIn URL education work experience resume URL and we can click submit that's nice and maybe these can be a little bigger so we'll handle that styling later but at least we have all the fields now and I can just put in information into some of these and let's just put some sample information here and let's click submit and all of that gets posted and nothing is sent in the URL so it's nice and short but all the information is sent into flask and of course now we can come back into flask and we can probably actually render this information properly so let's say application let's create a file a new file here and let's call it application submitted or just application.html let's call it application submitted dot HTML and in application submitted.html and this is the template that we're going to render from that route which handles the application so this needs to be an entire HTML page so once again I'm going to go to the job page I'm going to pick up doctype HTML let's put that and let's get HTML and let's get title application submitted let's just say that of course that should be inside head so let's put that inside head and let's put body and in the body let's start just showing that information so H4 full name maybe just a div and let's look for a variable called application and from the application let's get full underscore name and maybe let's do one more so let's get email and let's print the email here okay and now let's go back into app.pi and let's render that so now we are saying instead of jsonify the data we want to say render template application submitted.html and we want to pass application as the data that was received so we are taking the form data we are taking that dictionary that we get from the form data and we are passing it with the name application so let's reload okay reloading does not work when you're posting information so let's just post again okay application submitted.html template not from there's a typo so let's call the application let's fix that and let's reload and let's post again okay so now you have full name.ai so that's nice how about we finish this up we put in all the other fields here as well so application submitted full name and then we have email and then we have LinkedIn URL so let's put LinkedIn URL here then we have work experience education and resume URL so let's fix that resume URL resume URL and then we have work experience education education all right so we'll have to go back and submit again now we have the full name email LinkedIn URL education work experience resume URL all the information is there but wouldn't it be nice to have the same layout that we had on the previous page here so it would be nice to have the same layout and now you can probably guess how easy it is to do that if I just go into job page.html I can probably bring over include bootstrap.html here into application submitted so the bootstrap Styles will come in and then I can go into job page.html and bring in the nav and the banner let's do that and let's go into job page.html and bring in the footer as well let's do that thank you and of course let's put all this into a container so div class equals actually how about we just copy that over as well so let's go to job page and let's grab the this piece and let's go back into this and put all of the code inside a container so let's take all that and then just give it just a quick indentation so that it lines up properly and maybe let's also add a nice confirmation here that your application has been submitted okay so just like that now if we click submit you can see that we've transformed this page in just a few just less than a minute now it is the exact it we went from this to this and of course there is some work to be done here it needs it's not as nice as it can be so we're going to fix that in a second but what we can also put here is maybe the job name itself so if I go back in app dot pi and I get the job information so I say job equals load job from DB ID and just provide job equals job then I have information about the job here so let me go in here and let me say your application for job title for the role of so and so at Jovian has been submitted and let's maybe fix some of this class MB 0 and maybe let's use here class and before so just adding space below and not above the code so let's again submit that once again and this is what it looks like maybe we don't even need headers so maybe we can just use bold text here and that should be fine and this can just be mb2 so let's just make this bold text and let's grab that class okay let's take another look yep so your application for the role of frontend developer at jobin has been submitted and we have the full name email LinkedIn URL education work experience resume URL so whatever information you've provided all of that is going to get displayed here right and maybe we can make this bold instead of putting it in quotations but that's pretty much it that's all we need to do and now so that's one thing we have displayed an acknowledgment then we also want to store this in the DB as you can guess that is going to be fairly straightforward as well so I can very simply just go into the database dot pi and here I can create a new function add application to DB and that's going to take a job ID because each application should ideally be connected to a job ID and it's going to take the application information and it's going to put that into a table but we will need to create a table first so let's create a table I have some code here already for creating a table called applications so let me copy this and let me come into MySQL workbench and paste it here so we are saying let's make it a little simpler so we are saying create table applications so we're going to create a new table called applications and the applications table is going to have an ID which is going to be the unique application ID it is going to be not null Auto increment and it is also going to be the primary key then each application is going to be associated with a job so it's also going to have a job ID so that's what this is for and each application will have a full name it have an email it will have a LinkedIn URL education work experience a resume URL all of that and let's just create that table and that table has been created so we can see show tables and you can see here that we have applications table and a jobs table and let's check show select star from applications and there is nothing inside applications but now we are going to write but now we are going to write the code to put things into applications so once again we say engine dot connect as con and then we say let me first create the query so query will be text select no insert into applications and we need to give it the list of columns that we're going to insert so ID is going to be filled automatically so we're going to insert job ID full name email LinkedIn URL education work experience and resume URL so let's put that on the next line Maybe and the way to put it on the next line is or let's just put it on the same line that's okay so we're going to insert a job ID we are going to provide a full name we are going to provide email we're going to provide LinkedIn URL we're going to provide education we're going to provide experience and we are going to provide resume URL so insert into applications first we provide the list of columns we are going to specify and then we say values again this is a Syntax for insert and then here we provide the values that we want to insert now we can't put all this directly so basically what we're going to do is have some variable names here and we're going to pass those variables later so let me put job underscore ID so that's going to become a variable name colon full underscore name that is going to become a variable name then colon email that is going to become a variable Name colon LinkedIn URL that is going to become a variable Name colon education that is going to become a variable Name colon experience that is going to become a variable name and colon resume underscore URL and that's going to become a variable name too so now that's the query that's basically what we are going to put in so then we can say con dot execute and we're not interested in the result here we just wanted to succeed so con.execute query and let's start putting in the information job underscore ID which will replace this value is going to Simply Be job underscore ID that is coming here so let's put that there then we have the full underscore name that is simply going to be the application which is going to be passed as a dictionary so what we're going to do is we are going to take this dictionary that is sent in request.form and we're going to pass it to this function add application to DB so from the app or let's just call it data just to keep it shorter so full name is simply going to be the full name from the data and similarly we will do this for a bunch of other things so the email is simply going to be the email from the data then the education is simply going to be the education from the data finally we have work experience is going to be work experience and we have resume URL that's going to be the resume URL from the data okay and we just want to execute this and that's it now what do we do we go into app.pi and we import what is it called add application to DB so add application to DB we import it and we simply call add application to DB inside app.pi after getting the data from the form we say add application to DB we give it the job ID or simply the ID which is a job ID and we give it the data so this ID is going to populate the job ID column you can see add application to DB does that the first argument is used to populate job ID and then the rest of the arguments or the data is used to populate the rest of the columns okay I think that should do it so this is going to store the data into the database so let's save it and let's let that run looks like it's running So This Is The Moment of Truth this is what we've been building towards so let's see Akash NS akashness at joven.ai I'm going to put in a good value here this time because it's probably going to go into the database and education let's see CSC IIT Bombay work experience software engineer Twitter resume URL I'm not going to put anything in there right now and let's click submit let's see if this works okay a value is required for the bind parameter LinkedIn URL so looks like we made a mistake so this is exactly what happens you have to go in you have to fix things let's get LinkedIn URL in here and let's go back the data still there fresh let's click submit what else now a value is required for experience looks like we did not put in experience oh it's just called experience is it let's see oh this was okay this is this should be called work experience and that should do it let's submit now unknown column experience in field list okay this should be called work experience as well perfect looks like this went through so your application for the role of frontend developer Joven has been submitted full name email LinkedIn URL education work experience resume URL and let's go into this and select start from applications and looks like this information is here so ID is one the job ID is three and you can see here job ID3 is frontend developer and the email is akashness at jobin.ai the LinkedIn URL is as provided education work experience and resume URL perfect and you can try making another application and that will show up as well so that's something that can be done easily so let's take this and let's just Commit This and let's then revise everything that we've done today so let's see let me add all of these and let's say store application in database and let me commit in push and with that we have added a form to collect applications on the job Details page created a flask route to handle application form submissions created a table to Store applications in the cloud database and stored the submitted applications and shown an acknowledgment so we have this nice let me just change that to and so we have this nice message that page that shows up informing the person that your application for the specific role has been submitted and remember you can now go into any role so you can go on Jovian you can go into the role of data scientists for example and you can submit an application here and you can click submit and that's going to submit for that specific role right all of those applications are tracked in the same table but you can always filter and figure out which job ID you want to look at the applications for so that's it that's all we're going to do today now you can make some enhancements here as well you can make some functional and aesthetic improvements you can try to validate the application form responses before submission so you can Mark some of these fields as required and you can also maybe put in other information like URL so you can say HTML form validations and search that and let's see search for mdn clientside form validation and here you can see that there are many ways to use form validation one thing you can do is you can say something is required and then it won't allow submission then you can also specify certain patterns and you can also specify specific input types so if you search for HTML input types you can see that there are all these input types and some of these are like URL and email so if I just quickly go back here and change the form so go into Form application form.html and change the type here to email and Mark this is required and Mark this is required and change the type here to URL and maybe also change the type here to URL now if I go back here and I try to submit first if I try to submit empty it's gonna fail okay not yet I believe it just needed to reload a bit but yeah I think it should it should there is a way to ensure that it fails so maybe it's not doing that right just yet let me just reload and try again yeah you can see here it says please fill out this field and let's say I fill this out and now if I say submit now it says please fill out this field and let's say I don't put in an email here now it says please include an ad in the email address okay please enter the part following at so it will validate the email and let's say I try to put in something that's not a URL here it will validate that it says please enter a valid URL and similarly here as well please enter a valid URL right so you can leave this blank but you cannot enter invalid data so that's one form of validation that you can do I think we did that then another thing you can do is you can send an email to the administrator and to the candidate every time an application is submitted and sending emails can be done using email sending apis so there is one called mail jet you can try out so mailjet.com all you need to do here is you sign up and then it will give you an API key and you can just send emails using that API key so that's one way to send emails another thing that you can do is you can include a captcha because right now people can just use a selenium or some kind of a web scraper and keep submitting again and again the same form and overload your database and you probably don't want that and the way to avoid that is using those captures those things that ask you to select traffic signs and select boats and cars by showing boxes so one capture tool that you can use is called hcaptcha.com Edge captcha hcaptcha.com so what it gives you is this it basically whenever you try to select something and then you try to click I am a human you'll add this box and it will ask the user to First validate something like this so maybe selecting trains so here it select bus bus next train train let's say Get it wrong it's going to reject the form submission so this way people cannot try to spam you or fool you so that's something that you can look into sending emails is something that you can look into another thing you can try is to create an API to access individual job listings and individual applications by ID so doing individual job listings is actually pretty easy you can just go in here app dot pi and just add a route here at app dot route slash job slash okay slash API slash job slash ID and all you do here is Def should job Json which takes the ID and which just gets the job from the database and says return Json file job and just with that you can now go back and you can say slash API slash job slash three and just get the same job in Json format all right so similarly you can add another route for slash API slash application slash ID which can return data for a particular application and each application also had has an ID and do that or you can also have a API to just get the applications for a specific job so all sorts of things you can do now you have all that power so these are some functional and aesthetic improvements that we can make and then in terms of even going Beyond and sort of making this a fullfledged website you can create an admin login interface so that we don't have to directly interact with the database admins can log in and create and check submitted applications admins can add jobs admins can delete jobs admins can Mark applications as accepted rejected and users can also maybe login to check their application status so a lot of work can be done a lot of possibilities here so let's just Commit This one last time and what do we do we added an API so let's just add that API here and let's click commit and push and soon enough all of this is going to be available on jovencareers.com most of it already should be so here we have the jobs and here we have the job Details page and here we have an application form which soon enough we'll have the validations as well and here then we can submit and then we display the application and we also make that entry into the database there we go so yeah that's everything that we're going to look at today so quick recap we use the project from the previous tutorial made a copy of it opened it on replit and deployed it to render at jobin careers.com we set up a cloud mySQL database on planet scale we created a jobs table added data using the MySQL workbench we connected to the database from replit using SQL Alchemy we in fact created a database.pi file which has all of the database related logic it encapsulates then we connected to the database and displayed the list of jobs from the cloud database using SQL Alchemy we created Dynamic pages to display each job role each page each job got its own page we shared the layout Styles and navigations using bootstrap so all the pages look nice and professional and consistent and we consistently deployed all these changes to GitHub and render and we also made sure that we are not exposing our database password on GitHub so that's why we used secrets on replit and also on render then we added a form to collect applications on the job Details page and then we created created a flask route to handle the application form submissions then we created a table to store the applications in the cloud database finally we stored those submitted applications and showed an acknowledgment and then we also validated the application form responses before submission and there are few things that given a couple more hours we should be able to also incorporate to make our site even more robust so just like that in our in a matter of two tutorials six or seven hours of work we have gone from this this concept this idea of a jovian couriers website and Details page applications and acknowledgment page so we've gone from there this to this actual real functional website that we can actually use and it's completely functional there's nothing here that is stopping us from using it actually for getting job applications for roles for jobin so the data scientist page and then you put some information here and it validates and then you try to submit and then you get a response okay so play around with this it's the we've covered a lot of ground today so it's not something that you will immediately feel completely comfortable with and you may have to work through each step each step has a fair bit of depth in into it you may have to look up references for each step but if you can work through this entire tutorial just try to recreate this on your own then you've mostly learned a large part of what happens in web development and there was a question how will web development help me at my job I can only see it being used for making portfolio websites or personal projects right now well we've actually seen that some of the folks who have graduated from the boot camp and gone into a job have had this requirement where maybe they've created a plotly dashboard or maybe they have created some analysis and they need to put that up online so that other people in the company can see it so a couple of people have had to do this or maybe they have created a machine learning model and now they need to put create a web application so that people can interact with the machine learning model or maybe they need to offer the machine learning model as a rest API so that you can send data to the machine learning model and get a response back and if that sounds familiar that's very simple very similar to The Post form response that we looked at right so there are a lot of areas it's not something that you'd probably be doing in the first six months to one year of your role as a data analyst but in case you need to you always have this and web development of course is always a good skill to have because it just 90 percent of what you do on a computer is happening on the web and now you have the power to create that we've covered a large portion of what happens in web development this is what we do all day at jobin essentially when we're building the platform there are a few more things as mentioned in the future work like creating an admin login interface allowing admins to Mark applications and creating a user login which will just make this a fullfledged web application that you can then start promoting and start getting users for so I hope you found this interesting and I know it's challenging but give it some time and I hope you'll enjoy building your own websites congrats on making it to the of this long and detailed tutorial I hope you were able to follow along and build your own website share like subscribe and I'll see you next time
