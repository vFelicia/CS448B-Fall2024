With timestamps:

00:00 - clean code is code that is readable
00:02 - reusable and refactorable i'm going to
00:04 - show you how to write clean code and
00:06 - objects and data structures this video
00:08 - is part of a series i'm doing based on
00:10 - an article by ryan mcdermott on clean
00:11 - code and javascript check the
00:13 - description for a link to the original
00:14 - article when creating an object it's
00:16 - better to use getters and setters to
00:18 - access data instead of just looking for
00:20 - a property on an object this is going to
00:22 - make it easier to change your program
00:24 - later it makes adding validations easier
00:27 - it gives increased encapsulation on your
00:30 - object and a few other benefits so look
00:33 - let's look at this code right here we
00:34 - have the function make bank account
00:37 - and
00:38 - when you are creating an object like
00:40 - this whatever you return is what you're
00:43 - going to be able to access
00:44 - in the object so here we
00:47 - instantiate an uh bank account object
00:49 - and call it a count and then we're going
00:52 - to see it starts with a balance of zero
00:53 - whenever you make a bank object but
00:55 - we're going to then set it to 100 and
00:58 - then we can console.log that
01:02 - and you'll see that the balance is now
01:04 - 100 when it started as zero that's the
01:07 - bad way to do it where there's no getter
01:08 - and setter you can just directly access
01:10 - the property in the object now let me
01:13 - show you the good way we are going to
01:15 - create a variable here
01:18 - and set to zero anything that's up here
01:21 - that's not in the return statement is
01:23 - private so you're not going to be able
01:24 - to directly access this variable now and
01:27 - now we're going to create a function
01:28 - here
01:31 - and another function
01:37 - and then we are going to return
01:40 - just the functions
01:43 - so i've created a getter function get
01:45 - balance and a setter function set
01:47 - balance and then i've only returned the
01:49 - function you see i did not return the
01:51 - actual property or variable balance
01:54 - we've only returned the functions that
01:56 - means these are the only things you're
01:57 - going to be able to access in the object
01:59 - anything under the return is what is
02:01 - publicly available to access an object
02:03 - so you can still get the balance by
02:05 - calling this function and it's going
02:07 - since this function
02:08 - is is going to be inside the object it
02:10 - can still access that variable inside
02:12 - the object and we can also set the
02:14 - balance by doing balance equals amount
02:17 - okay first i'm actually going to change
02:18 - these two semicolons to a comma that
02:21 - doesn't need one there it was a mistake
02:23 - having a semicolon so account that
02:25 - balance instead of account.balance we're
02:27 - going to do account.set balance
02:30 - to
02:31 - 100 and we're going to actually instead
02:33 - of making equals 100 we're going to pass
02:35 - in 100 and then we're going to do
02:38 - account dot get balance to get the
02:41 - balance
02:42 - and it still says 100. so that is a
02:44 - better way of doing it using getters and
02:46 - setters the next thing i want to talk
02:47 - about is that you should make objects
02:49 - have private members so here's the
02:52 - constructor function for
02:54 - an employee object
02:55 - this constructor function actually
02:57 - creates the initial object prototype but
02:59 - we can add another property to the
03:01 - prototype and this one down here is a
03:03 - function so we create the employee
03:05 - object but we're going to add to the
03:06 - prototype a get name function where it's
03:09 - going to return this dot name so
03:11 - remember this is actually the bad way to
03:13 - do it whenever you use the word this and
03:17 - dot and then you put a property name
03:20 - after it this dot name this is creating
03:22 - a
03:23 - basically a public property that can be
03:25 - directly accessed
03:27 - so this is not this is not really a
03:29 - private member this is a public member
03:30 - when you use this dot name so let's see
03:32 - how this works i'm going to
03:35 - uncomment this out let me put some
03:37 - parentheses on there
03:39 - and if we run that
03:40 - it's going to say employee name john doe
03:42 - employee name undefined so let's go
03:44 - through this code here we are going to
03:46 - instantiate a new employee object and
03:48 - call employee and we're going to pass in
03:49 - the name john doe so it's going to go to
03:51 - this function up here it's going to it's
03:53 - going to do this.name equals name then
03:55 - the name we passed in was john doe then
03:57 - we're going to console.log now these are
03:59 - template literals just look in the
04:01 - description of this video to see a link
04:03 - to my other video about template
04:04 - literals so we have employee name and
04:06 - we're going to do employee.getname so
04:08 - we're calling this getname function now
04:10 - then we're going to delete employee.name
04:13 - and if you console.log
04:16 - employee.getname again it's going to say
04:19 - undefined so this is the bad way of
04:22 - creating
04:24 - properties and members of an object
04:26 - because it's easy to do something like
04:27 - the deleting it or you can change the
04:29 - name really easily we want to make it a
04:31 - little harder to change the name so
04:33 - basically i'm going to
04:34 - delete this whole section here
04:36 - and we are not even going to use the
04:38 - this dot notation because that creates a
04:39 - public property that can be easily
04:41 - accessed and deleted so we're going to
04:43 - do this
04:49 - so we're passing in a name but we're not
04:51 - assigning it to a property so it's still
04:53 - stored in the object but it's private so
04:55 - it cannot be directly accessed but we
04:58 - can access it using this function that's
05:00 - returned we're returning the get name
05:02 - function that's going to return the name
05:04 - variable that's with an object but it's
05:05 - not a property of the object so let's
05:07 - look at this down here now we're again
05:09 - going to do create a new employee
05:12 - called employee we're going to pass in
05:13 - the name john doe and we're going to
05:15 - call get name let me just run this and
05:18 - we'll see how it's different
05:20 - so you can see look employee named john
05:21 - doe employee named john doe remember
05:23 - last time the second name was undefined
05:25 - but when we try to delete employee.name
05:28 - well there actually is no employee.name
05:30 - we not create that property in the
05:32 - function so this is going to be a better
05:34 - way to create an object so the members
05:37 - are private and you can't accidentally
05:38 - delete it or change it directly you can
05:40 - only do it through the functions well
05:42 - thanks for watching my name is beau
05:44 - carnes don't forget to subscribe and
05:46 - remember use your code for good

Cleaned transcript:

clean code is code that is readable reusable and refactorable i'm going to show you how to write clean code and objects and data structures this video is part of a series i'm doing based on an article by ryan mcdermott on clean code and javascript check the description for a link to the original article when creating an object it's better to use getters and setters to access data instead of just looking for a property on an object this is going to make it easier to change your program later it makes adding validations easier it gives increased encapsulation on your object and a few other benefits so look let's look at this code right here we have the function make bank account and when you are creating an object like this whatever you return is what you're going to be able to access in the object so here we instantiate an uh bank account object and call it a count and then we're going to see it starts with a balance of zero whenever you make a bank object but we're going to then set it to 100 and then we can console.log that and you'll see that the balance is now 100 when it started as zero that's the bad way to do it where there's no getter and setter you can just directly access the property in the object now let me show you the good way we are going to create a variable here and set to zero anything that's up here that's not in the return statement is private so you're not going to be able to directly access this variable now and now we're going to create a function here and another function and then we are going to return just the functions so i've created a getter function get balance and a setter function set balance and then i've only returned the function you see i did not return the actual property or variable balance we've only returned the functions that means these are the only things you're going to be able to access in the object anything under the return is what is publicly available to access an object so you can still get the balance by calling this function and it's going since this function is is going to be inside the object it can still access that variable inside the object and we can also set the balance by doing balance equals amount okay first i'm actually going to change these two semicolons to a comma that doesn't need one there it was a mistake having a semicolon so account that balance instead of account.balance we're going to do account.set balance to 100 and we're going to actually instead of making equals 100 we're going to pass in 100 and then we're going to do account dot get balance to get the balance and it still says 100. so that is a better way of doing it using getters and setters the next thing i want to talk about is that you should make objects have private members so here's the constructor function for an employee object this constructor function actually creates the initial object prototype but we can add another property to the prototype and this one down here is a function so we create the employee object but we're going to add to the prototype a get name function where it's going to return this dot name so remember this is actually the bad way to do it whenever you use the word this and dot and then you put a property name after it this dot name this is creating a basically a public property that can be directly accessed so this is not this is not really a private member this is a public member when you use this dot name so let's see how this works i'm going to uncomment this out let me put some parentheses on there and if we run that it's going to say employee name john doe employee name undefined so let's go through this code here we are going to instantiate a new employee object and call employee and we're going to pass in the name john doe so it's going to go to this function up here it's going to it's going to do this.name equals name then the name we passed in was john doe then we're going to console.log now these are template literals just look in the description of this video to see a link to my other video about template literals so we have employee name and we're going to do employee.getname so we're calling this getname function now then we're going to delete employee.name and if you console.log employee.getname again it's going to say undefined so this is the bad way of creating properties and members of an object because it's easy to do something like the deleting it or you can change the name really easily we want to make it a little harder to change the name so basically i'm going to delete this whole section here and we are not even going to use the this dot notation because that creates a public property that can be easily accessed and deleted so we're going to do this so we're passing in a name but we're not assigning it to a property so it's still stored in the object but it's private so it cannot be directly accessed but we can access it using this function that's returned we're returning the get name function that's going to return the name variable that's with an object but it's not a property of the object so let's look at this down here now we're again going to do create a new employee called employee we're going to pass in the name john doe and we're going to call get name let me just run this and we'll see how it's different so you can see look employee named john doe employee named john doe remember last time the second name was undefined but when we try to delete employee.name well there actually is no employee.name we not create that property in the function so this is going to be a better way to create an object so the members are private and you can't accidentally delete it or change it directly you can only do it through the functions well thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good
