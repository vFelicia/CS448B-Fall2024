With timestamps:

00:00 - [Music]
00:05 - hey there i am brian douglas and i am
00:07 - here in my garage to talk to you about
00:10 - the jam stack and how to make jam sac
00:12 - websites
00:13 - so before we jump right in and i tell
00:16 - you how to build a jam sec app
00:18 - i want to actually show you what we're
00:19 - actually building
00:21 - so what we're looking at here is just a
00:23 - simple
00:25 - restaurant website that has the basics
00:27 - of what you would see in a restaurant um
00:29 - one being in a menu so we've got a basic
00:31 - menu here you can see different types of
00:33 - menu we got a lunch we've got a dinner
00:35 - section we've got prices on the right
00:37 - very fancy that's why we don't see any
00:39 - dollar symbols
00:40 - that's how you know how upscale this
00:42 - restaurant is
00:43 - in addition that we've got a drinks menu
00:45 - which you can see here
00:47 - as well as a simple about page so all
00:50 - this simple routing so if you're very
00:51 - familiar with like
00:53 - modern web technologies and frameworks
00:55 - uh routing's always built in so we'll
00:58 - talk about how to do that in the jam
01:00 - and then
01:03 - in addition to that we've got a simple
01:05 - gallery where we can show off some
01:06 - different images
01:08 - and then finally we'll have a form where
01:10 - you can actually submit reservations now
01:12 - we're going to move over to showing you
01:13 - how to clone this site as well as
01:15 - talking more about what jam stack is
01:21 - so i'm going to give you a one-time gif
01:22 - and that's pretty much all of the code
01:24 - and for this repository now if you look
01:26 - in the description of this video there's
01:28 - a link
01:29 - and if you click that you'll be able to
01:31 - clone a version of this tasty tutorial
01:34 - you can also visit bit.ly
01:37 - slash taste the tutorial either those
01:40 - two links will actually take you to this
01:41 - page which is going to be a wizard on
01:43 - netlife.com
01:44 - granting access to your github account
01:46 - will allow you to create a new
01:47 - repository based on the template that i
01:50 - provided
01:52 - here you can change the name or you can
01:54 - leave it as the same since i already
01:55 - have a version of this already saved
01:57 - i'm going to go ahead and change the
01:58 - name
02:00 - and once you click save and deploy
02:02 - it will then bring you to a screen where
02:03 - it starts to build your site for you
02:08 - so once your site's built you'll see a
02:09 - screen just like this which is a notify
02:12 - dashboard and here you can see
02:14 - one thing i want to point out which is
02:16 - the url of where your repository was
02:18 - created
02:20 - now it's going to be your github account
02:21 - that you connected to netlify
02:23 - and i'm just going to go ahead and tell
02:25 - you to go ahead and click that link
02:27 - and it should open a github repo with
02:29 - that code this is a repository that
02:33 - includes all the code you need but also
02:34 - includes a readme with more instructions
02:36 - on how to get this started so if you get
02:38 - stuck at any time you can actually check
02:40 - out my repository at
02:42 - github.com hego restaurant tutorial
02:45 - here you'll see the same code that you
02:48 - see in the repo that you cloned
02:51 - except that now we'll have some branches
02:53 - where you can actually see the solutions
02:55 - to each step so if you do get stuck all
02:57 - the code is going to be available here
02:59 - for you to look at
03:01 - so feel free to leverage this if you if
03:03 - you aren't able to follow along or if
03:05 - there's an error that you cannot get
03:07 - past so now you have your own version
03:10 - you just want to go ahead and clone this
03:12 - repo
03:14 - and go ahead and take that repo url and
03:16 - clone it on the command line
03:22 - now once that's done you can go into
03:24 - your repository
03:25 - and as outlined in the readme
03:28 - you want to do two things
03:30 - npm install
03:33 - and then finally
03:35 - npm and start
03:37 - running npm start will just go ahead and
03:39 - compile everything into a bundle
03:41 - and load your very own version of tasty
03:43 - licks for easy view
03:49 - this tutorial is actually going to be
03:50 - based on the static site generator hugo
03:53 - and based on statistics from
03:54 - staticgen.com
03:56 - hugo is the second most popular stacks
03:58 - identity
03:59 - and it actually has a pretty strong
04:01 - engineering culture and community around
04:03 - it supporting it
04:06 - now this tutorial also will be based on
04:08 - hugo but it's going to be based on a
04:09 - hugo boilerplate that also adds an asset
04:12 - pipelines so if you're familiar with
04:15 - either the rails asset pipeline or
04:17 - you're comfortable with npm
04:19 - in node packages
04:21 - you will find yourself right at home
04:23 - with the sex identity which is victor
04:26 - hugo which adds npm post css
04:30 - and a bit of webpack
04:32 - to your pipeline to be able to manage
04:34 - dependencies
04:37 - now once you have cloned the restaurant
04:39 - template that we'll be focused on you
04:42 - will need this install hego
04:44 - and if you are on a mac you can do that
04:47 - by brew install huigo
04:49 - and if you're not on a mac
04:51 - you can visit the hugo installing guide
04:53 - to find out how to install hugo either
04:55 - on linux or windows systems as well
04:59 - now if you get stuck installing geo
05:02 - please feel free to check out the the
05:04 - forums for higo
05:05 - which will be discourse.gohigo.io
05:08 - here is a pretty thriving community that
05:10 - will actually be more than happy to help
05:12 - and assist on getting your environment
05:13 - set up as well you can also reach out to
05:15 - me directly or check out the comments of
05:18 - this video
05:23 - so i mentioned earlier in this video
05:25 - that i was going to explain what the jam
05:26 - stack is and
05:28 - i'm going to go ahead and default to
05:30 - what jamstack already says uh jam sac is
05:33 - just a a way to describe modern web
05:35 - development architectures where it's
05:37 - based on client-side javascript and then
05:39 - reusable apis and all that information
05:42 - can be found
05:44 - more about the jam stack from jamsat.org
05:46 - where we actually have
05:48 - different examples as well as some
05:50 - resources to if you're in
05:52 - interested in finding out more about use
05:54 - cases and how other people are
05:56 - contributing to the jam architecture
06:00 - but i do want to take a chance to
06:02 - explain a little more in depth of how we
06:04 - got here
06:05 - and so basically what we're looking at
06:07 - here is just the
06:09 - this normal website architecture so we
06:12 - have a client and then you have a server
06:14 - and that server usually is not as simple
06:17 - as what
06:18 - what we see uh more
06:20 - the server normally looks like more of
06:22 - like a monolithic application structure
06:24 - so not only do you have your what you
06:26 - see on the browser which is the client
06:28 - but underneath under the hood you have
06:30 - like a web server an app server or api
06:33 - server as well as like a database and
06:35 - because of that
06:36 - all that content actually walks around
06:39 - with you whenever you go to host or
06:40 - deploy your site to the web so people
06:43 - can actually view it
06:45 - and i always like to use this this uh
06:47 - analogy of monolithic architectures like
06:50 - this so back in the day when i was a kid
06:53 - uh which actually still sell this in the
06:54 - actual stores but they have the idea of
06:56 - putting peanut butter and jelly in the
06:58 - same jar uh this was actually pretty
07:00 - cool when i was a kid but it
07:02 - at the end of the day it didn't work out
07:04 - very well
07:05 - because sometimes you only want jelly
07:07 - and sometimes you only want peanut
07:09 - butter
07:09 - but in this instance you have to take
07:11 - both of them and one big scoop
07:14 - so when you go to deploy a monolithic
07:16 - architectured site you have to deploy
07:19 - everything all together so then you have
07:20 - all these one-click solutions that have
07:22 - done really well but we found out really
07:24 - quickly those have become really
07:26 - expensive
07:28 - so pushing the analogy even further i'm
07:30 - separating the two
07:32 - ideas of apis are back-ends to separate
07:36 - that from your front end which is your
07:37 - client
07:39 - so in essence
07:41 - this is what the jm is all about
07:43 - separating your client from your api or
07:46 - your front end from your back end
07:49 - and what's really made this real easy
07:51 - for modern sites that are built on
07:54 - javascript or even other languages is
07:56 - that we've had a insurgent of all these
07:58 - javascript build tools so we had grunt
08:01 - gulp browserify
08:03 - npm now it's kind of taken over as far
08:05 - as the scripting
08:07 - build tool of choice and then also
08:09 - webpack as well all these build tools
08:11 - are making it easy for us to bundle our
08:14 - javascript node apps into something that
08:17 - can actually be hosted easily through
08:18 - static which brings me to the static
08:20 - site generator so now we're getting more
08:22 - of surges and statistic generators uh
08:24 - back in the day we only had a handful
08:25 - now we have tons um as we saw earlier in
08:28 - staticgin.com
08:30 - um hugo is number two but number one is
08:32 - jekyll and then gatsby and middleman are
08:34 - both um
08:35 - very very popular in the space as well
08:38 - as a whole slew of other ones and what
08:40 - they do is they take what we're very
08:42 - used to
08:43 - having the command line interfaces and
08:45 - the interactions and build sites really
08:46 - quickly
08:47 - but we could also take that that
08:49 - complicated
08:50 - setup and then bundle that into a static
08:53 - output so we have an index of html that
08:55 - can be hosted easily on a cdn on
08:57 - multiple servers on the web without the
09:00 - heavy weight of a a database or a
09:03 - backend following it around
09:05 - instead we we would talk to an api
09:07 - directly to gather our data
09:09 - all that to be said is that the site
09:11 - that we're building is going to have a
09:13 - pre-built structure so we are going to
09:15 - do complicated things we are going to
09:16 - talk to microservices and third parties
09:20 - solutions to do some of these uh nice
09:22 - features that we want in our restaurant
09:24 - app but we're gonna have the idea of a
09:26 - pre-built structure so every time we
09:29 - push to get
09:30 - we get the idea of having continuous
09:32 - delivery
09:34 - and it goes straight to our cdn which
09:36 - for this example it's going to be netwy
09:38 - so we can continue to push
09:41 - on a regular basis and update and see
09:43 - those updates happen live without the
09:45 - need of keeping our database in sync or
09:48 - keeping our app server in sync at all
09:51 - the whole purpose of this video series
09:52 - is actually to show you how you can
09:54 - build modern websites and web apps
09:56 - on a structure where there's not
09:58 - actually a strong tie to back-ends and
10:01 - databases so i hope you enjoy and i hope
10:04 - you got a better understanding of what
10:05 - the jamstack architecture is
10:11 - hugo and other static sitegenders for
10:13 - the most part use markdown as the basics
10:15 - for rendering dynamic content on the
10:17 - page
10:18 - with this project nothing's really
10:20 - different
10:21 - we have a menu
10:23 - that lists a bunch of food items
10:25 - and we want to render that same count on
10:27 - our page the problem at the moment is
10:29 - that our version of site does not have
10:31 - any sort of menu whatsoever so i can't
10:33 - go to slash food
10:38 - and see
10:39 - any food items because we haven't set
10:41 - that up yet so we're going to go ahead
10:42 - and do that now and that'll be the first
10:44 - thing we'll tackle
10:45 - and if you haven't gone to the readme
10:47 - yet
10:48 - you will need to npm install
10:50 - so once you've installed the packages
10:52 - using npm you go ahead and run npm start
10:55 - to actually run a live version of your
10:56 - site
10:57 - to view
10:59 - now we're using a tool called
11:00 - browsersync so it should open up the
11:02 - browser for you and you should see the
11:03 - live site ready to go
11:05 - so open up your text editor and find
11:09 - you could find that the the structure of
11:11 - the code is actually laid out pretty
11:12 - nicely uh the project itself most of
11:16 - what we're going to be doing is actually
11:17 - going to be in the site folder that's
11:18 - going to be our content for
11:20 - food and etc
11:22 - uh the source folder is going to have
11:24 - your css your javascript images and the
11:27 - the main video that you see on the back
11:29 - uh of the homepage that's going to be
11:31 - living here
11:32 - images already be set up here
11:35 - and for the most part the css is already
11:37 - dealt already done for you
11:39 - so you don't need to actually do any css
11:41 - in this tutorial so the config.tamil is
11:44 - a place to tap into the menu system that
11:46 - we want to add to
11:47 - now if you're unfamiliar tamil tamil
11:49 - stands for
11:50 - tom's obvious markup language it was
11:52 - created by the creator of jekyll another
11:54 - static site generator that's uh very
11:56 - useful
11:57 - all you need to know is that our menu is
11:59 - going to be edited here so
12:01 - what i want to do is create
12:03 - a new route so i'm just going to copy
12:06 - exactly what we already have
12:08 - here
12:10 - and i'm gonna go ahead and make sure
12:12 - that this weight is two
12:15 - so that way i'll have the about link but
12:17 - also have a link for our food route
12:20 - since i have this live updating in the
12:22 - background we can now see that we have
12:24 - food
12:25 - working as a route
12:26 - but when i go to this route nothing
12:28 - renders and the problem is we don't have
12:29 - anything in the food content
12:32 - structure
12:34 - so if i go back to
12:36 - our code
12:38 - i'll need to actually go into our site
12:39 - directory
12:41 - and i'll need to go into content and
12:43 - then here
12:44 - we'll need to create
12:46 - one folder and make call it food so
12:49 - i am personally using vim so i can do
12:50 - this straight from my event editor if
12:52 - you're using atom or sublime or
12:54 - something similar like visual studio
12:56 - code
12:57 - just go ahead and create a folder in
12:58 - this directory
13:00 - called food
13:06 - now that i have a food directory
13:08 - i can now create
13:10 - my first food item
13:15 - now each item in the in the the content
13:18 - structure is going to be a markdown file
13:21 - and there's this concept within static
13:23 - site generation which is called front
13:24 - matter and in this front matter we can
13:26 - actually denote
13:29 - details like date
13:31 - different things like categories which
13:33 - i'm going to distinguish just to be
13:34 - lunch
13:35 - and also have different types like roles
13:39 - all this information is going to be
13:40 - available to you in the the actual
13:42 - description of the video so if you do
13:44 - want to copy and paste that feel free if
13:46 - you want to switch things up also feel
13:48 - free to do that but i'm going to go
13:49 - ahead and save our content as is
13:52 - just by filling out this front matter
13:53 - and between the
13:54 - the triple dashes we should be good to
13:57 - go to see our first food item available
13:59 - for us to view
14:00 - so if i now click food
14:03 - i realize i still don't see anything and
14:05 - that's because i'll need to
14:07 - update our static site generator to
14:09 - understand that there's some changes
14:11 - available so i just went ahead and
14:13 - killed our server
14:14 - and i'm going to restart that for us
14:16 - so we can now
14:18 - see our first food item available for us
14:22 - now go ahead and go back through
14:25 - this
14:26 - and see if you can now add a couple more
14:28 - food items so instead of just lunch i
14:31 - would go ahead and add some dinner items
14:33 - as well
14:34 - in addition you could also
14:36 - create some different unique choices and
14:38 - descriptions and pricing
14:41 - so
14:41 - take a crack at that and i'll show you
14:44 - how to make this process of adding new
14:47 - food items much easier using a content
14:49 - management system which is going to be
14:51 - our cms
14:52 - in our next video
15:01 - so adding the ability to update food on
15:02 - the menu dynamically was pretty
15:05 - straightforward but maintaining updates
15:07 - to the menu will probably get pretty
15:09 - tedious as you probably have discovered
15:11 - firsthand
15:13 - so thinking of
15:15 - a head chef or a kitchen manager who
15:18 - needs to make updates on the menu on a
15:19 - daily basis they would need to either
15:21 - clone the repository locally or log into
15:24 - github to make changes and chances of
15:26 - that actually happening on a customer
15:29 - zen is probably pretty slim
15:31 - so with the current state of the project
15:33 - all changes have to grow through a web
15:35 - developer
15:38 - so there's a lot of solutions to handle
15:40 - management of contents and since we're
15:42 - already on the netlife train and
15:43 - deploying our site there i'm going to
15:45 - recommend us use the nullify cms
15:48 - to get the cms connected you'll have to
15:50 - do just a couple things
15:53 - inside your project folder you'll need
15:55 - to go to site
15:57 - and then the static folder
15:59 - and inside here you'll need to add a new
16:01 - folder which we'll call be called admin
16:05 - once you create a new admin folder you
16:08 - want to create two new files
16:09 - and that'll be the config.yaml
16:12 - which is going to be different than our
16:14 - config.toml file for hugo this
16:16 - config.yml is going to be very specific
16:18 - to the cms
16:20 - and then you also want to add an
16:21 - index.html the contents of the
16:23 - config.yaml and the index.html are both
16:27 - available here under the netify
16:28 - documentation under the quick start tab
16:32 - and then under configuration
16:34 - now that we have the index.html i want
16:36 - you to first copy over the contents from
16:39 - the documentation into here
16:41 - so that way it looks like so
16:44 - now back into config.yam i'll break this
16:46 - down line by line so this yaml file
16:48 - actually look very similar to what's in
16:50 - the example on the documentation with
16:53 - some changes
16:54 - but line by line
16:55 - i'm going to break it down like so
16:58 - here is a section that's to tell us what
17:00 - backend we want to use
17:02 - by default nullify cms works with github
17:05 - out of the box we're actively working on
17:07 - other solutions but for now we're going
17:09 - to use github
17:10 - and
17:12 - i'm going to point it to my repository
17:13 - which is going to be my name slash the
17:16 - name of my repo
17:18 - it also wants to know what the base
17:19 - branch is going to be now the cms will
17:21 - work on any branch
17:24 - that you choose here so
17:26 - you would you want to check to see
17:28 - whatever branch you want your live code
17:30 - to go to
17:31 - so this could be any like demo or
17:33 - staging
17:34 - my preference is master i'm going to set
17:36 - this to be master here
17:38 - now the media folder we're going to use
17:39 - for a future video but we're going to
17:40 - set this now
17:42 - just in preparation because the cms
17:44 - requires you set a meter folder for any
17:46 - images that you want to save through the
17:48 - cms
17:49 - and since i already know i'm going to
17:50 - use that i'm going to set it for that
17:52 - and then finally we're going to add
17:53 - collections now each collection
17:55 - is actually separated with this hyphen
17:58 - and so i can have future collections
17:59 - hint we can also have like a drink menu
18:02 - or we can have some sort of dessert menu
18:04 - as well but for now we're just gonna
18:06 - have a general food menu
18:08 - and we're gonna set these labels now
18:10 - these labels are not gonna be
18:12 - um
18:13 - set outside of the cms you won't see the
18:16 - i
18:17 - you won't see the label food item
18:19 - outside the cms but this is for the cms
18:21 - to be able to present it
18:22 - visually
18:24 - and if you also note site content food
18:27 - is where we saved all our previous food
18:29 - items with their detailed front matter
18:32 - and this gives us rights to be able to
18:34 - save
18:35 - and then finally
18:37 - looking here
18:39 - these fields here all mimic exactly what
18:42 - we have in our front matter so
18:44 - these fields are looking directly at
18:46 - that front matter and being able to save
18:48 - and one thing to note as well
18:51 - is that
18:54 - for a supported meals we've got two
18:57 - default options one being lunch the
18:59 - other one being dinner
19:01 - and this is going to be
19:02 - based on a widget so widgets are
19:05 - something you can look up
19:07 - and that will actually get more detailed
19:08 - in a future
19:10 - uh video but just note that widgets are
19:13 - different types so we do have a widget
19:14 - for string list and text so this is the
19:18 - three ones we're going to be using for
19:19 - now so i'm going to show you exactly
19:21 - what the front matter looks like today
19:23 - which here for our oysters we do have
19:26 - date which we're actually ignoring in
19:28 - the cms though it is something that does
19:30 - get saved every time a markdown file
19:31 - gets saved but you can also note that we
19:34 - do have categories for lunch and dinner
19:36 - we do have types which type is
19:39 - here
19:41 - but the label is here and i'll show you
19:43 - what that looks like in a moment
19:45 - but for now go ahead and commit your
19:47 - changes
19:48 - to the cms
19:50 - so go ahead and pause the video make
19:52 - sure you have your config that matches
19:54 - pretty close to what i have here and
19:56 - commit that to your master branch and
19:58 - i'll meet you back in a few seconds
20:00 - at the netify dashboard
20:02 - now back in my network dashboard
20:05 - i can now visit the access tab
20:08 - to add an install provider
20:10 - we can do that from our github profile
20:12 - by going to
20:13 - our profile picture up there clicking
20:16 - settings
20:18 - and down here where it says oauth
20:19 - applications you want to register a new
20:22 - application
20:24 - now i've already done so here
20:27 - which is providing me a client id and a
20:30 - secret
20:31 - a client secret
20:33 - now be careful not to share these
20:34 - secrets
20:37 - but go ahead and take that client id
20:39 - and bring that back to netlify
20:42 - now back at the dashboard i can now
20:43 - install my provider based on my client
20:45 - id and my secret
20:51 - and now
20:52 - back on my live site
20:54 - instead of adding all my content locally
20:57 - within my
20:59 - text editor
21:01 - i can actually now go to slash admin
21:05 - login via github
21:08 - and i can view my cms
21:16 - now having a cms to be able to edit
21:18 - the food menu is great
21:21 - but it's almost pretty limited to only
21:23 - have a food menu
21:25 - now based on everything we've done so
21:26 - far adding the food menu to the cms i
21:29 - want you to go ahead and do the same
21:30 - thing by adding a collection to your
21:32 - config.yaml
21:34 - as well as adding a new link for drinks
21:38 - and i want you to add all this content
21:40 - dynamically through just using the cms
21:43 - now if you get stuck on doing this
21:45 - feel free to look back at your
21:47 - config.yml in your cms but also leverage
21:50 - the
21:51 - netlify cms getter community
21:54 - who are ready and willing to help
21:56 - anybody who's looking for help with the
21:58 - cms
21:59 - once you figure that i'll see you in the
22:01 - next video and we'll look at the code
22:08 - now you should have your cms that looks
22:09 - like this
22:10 - that has food items but also drink items
22:14 - available to look out and edit
22:17 - and if you took some time to add some
22:19 - different drink items you would have
22:21 - them look like this which is very much
22:23 - similar to what we have already in our
22:24 - cms
22:26 - now your config.yml would only need one
22:29 - more collection that copies exactly what
22:31 - we have in our food structure
22:35 - in addition to that
22:37 - you did want to go ahead and go to your
22:39 - site and your config.top tumble to make
22:42 - sure you added drinks
22:44 - to the menu so that way you actually do
22:45 - see it in the menu when you go to
22:48 - your site live
22:50 - that's it hopefully you were able to get
22:51 - through that
22:52 - if you weren't
22:54 - let us know if there's anything edge
22:55 - cases or also
22:57 - continue to hang out in the getter
22:58 - community for any questions and concerns
23:01 - and help with your project
23:09 - so when looking for a restaurant to eat
23:11 - at it's always nice to look at pictures
23:13 - of food as well as
23:14 - what the place actually looks like to
23:16 - get kind of a sense of quality and uh if
23:18 - you can't even like it
23:20 - so having some images somewhere um is
23:23 - actually ideal for a restaurant site and
23:25 - which is what i have here
23:28 - so you can see
23:29 - so as you can see i have a carousel that
23:32 - i can cycle through
23:34 - and
23:36 - see different images of the restaurant
23:38 - and food and then it cycles back to the
23:39 - front
23:41 - and i also want to point out in the
23:42 - layouts folder we've already been using
23:44 - a structure
23:45 - to render our content but i didn't
23:47 - really talk too much about how this
23:49 - works now within hugo we do have a base
23:52 - layout
23:53 - that loads our index page and this is
23:55 - where we see our video
23:59 - but we also have
24:01 - a default layout structure
24:04 - which lists all of our content so in
24:06 - hugo they have the idea of categories
24:08 - and each of these categories are
24:09 - separated by sections as well now
24:12 - consider sections
24:15 - being what we how we outlined our
24:17 - content in the config.yml so each
24:19 - section being food
24:21 - drinks
24:22 - and also one that we haven't talked
24:24 - about yet which is the about page
24:27 - each one of these sections are being
24:28 - separated by a conditional so if we
24:31 - happen to be on that that particular
24:33 - conditional
24:34 - that is the section that we'll be
24:35 - displaying and we're doing this logic by
24:37 - just doing this here
24:39 - this conditional within this block
24:41 - so hugo uses a go template rendering
24:43 - engine is which is what we see within
24:45 - these handlebars or if you may the curly
24:48 - braces
24:50 - now i wanted to point that out because
24:51 - we're doing one more thing for images
24:53 - which
24:54 - we actually i already give you to code
24:56 - here so you don't have to actually add
24:58 - the carousel directly to the page when
25:00 - we add our first image it will actually
25:01 - automatically do this but i don't want
25:03 - this to seem like magic so i just wanted
25:05 - to point this out
25:07 - here's how images are being displayed on
25:08 - the page
25:10 - and
25:11 - above is how food and drinks are being
25:12 - split on the page
25:14 - so if you have any questions about how
25:15 - this works or
25:17 - how hugo renders templates please check
25:20 - out the hugo documentation on taxonomies
25:22 - as well as listing and displaying data
25:24 - with that being said let's go and add
25:26 - some images
25:28 - first thing we want to do is go ahead
25:29 - and add a folder within our content
25:31 - structure
25:33 - called gallery
25:36 - now if you remember we have the
25:37 - config.gamil as well within the cms
25:40 - architecture
25:42 - and here we can actually add
25:45 - another collection called
25:48 - gallery
25:49 - and here we'll have a label called
25:50 - gallery image and it'll make sure to
25:53 - look in the folder site content gallery
25:55 - so everything pretty much as
25:56 - straightforward as we've done before
25:58 - except for one thing
26:00 - if you check out here
26:03 - in our field type we're using a widget
26:05 - called image and this is because we're
26:07 - no longer just gonna have static text
26:10 - to add to upload an image we're actually
26:12 - gonna upload an image in the cms
26:15 - using their cms image widget and since
26:19 - we've added a gallery to our cms you can
26:21 - now see that we have a new item
26:23 - in our sidebar called gallery images
26:33 - and here you can either
26:35 - use the file uploader
26:36 - to upload image
26:39 - or
26:43 - you can drag the image directly onto the
26:45 - image widget
26:47 - and now you have an image
26:49 - and now i can click save
26:52 - and see that live on my c on my site
26:54 - so now when i visit tasty.netblife.com
26:57 - i'm able to
26:59 - visit my gallery
27:01 - and see that my image is already
27:05 - there
27:12 - so there's one more thing we haven't
27:14 - done yet to make this
27:16 - restaurant app fully functional to the
27:18 - way i think it should be and that's
27:20 - actually adding reservations
27:22 - now
27:23 - we created this form or i provided this
27:25 - form rather as part of the template
27:29 - so i should be able to
27:32 - submit
27:34 - my name
27:35 - my email
27:36 - and when i would like to
27:38 - show up at the restaurant for my
27:40 - reservation
27:44 - and because this is slash contact
27:47 - i already know that in slash contact
27:49 - there's going to be a route
27:51 - ready and available for me
27:53 - which is why i'm going to
27:56 - the pages
27:57 - and then contact folder
28:00 - so now i'm in the contact fault the
28:01 - contact markdown file
28:03 - i now notice that i have a regular html
28:06 - form ready for me to update
28:09 - it's also got some of the same markdown
28:10 - that we see on the page as well
28:13 - now you can see the only thing i've
28:14 - added is the netify tag name
28:17 - all i need to do now is save that push
28:20 - that back up to github
28:22 - which will then trigger a new deploy on
28:24 - netlify
28:25 - and i'll be ready to submit forms
28:29 - so now once i go ahead and fill out my
28:31 - information and hit submit
28:35 - so back on my dashboard i'll go back to
28:36 - the site dashboard for form handling
28:44 - now this feature is incredibly useful
28:47 - but it can actually be even more useful
28:49 - if you check out the netlife
28:50 - documentation netlify also has a cool
28:52 - feature
28:53 - which
28:54 - adds notifications to form interactions
28:58 - so every time a form submission happens
29:01 - you can send an email notification as
29:03 - well
29:04 - or you can send a slack notification
29:08 - and if you already have some sort of web
29:10 - hook existing you could also add a web
29:12 - hook to either notify through a database
29:15 - or through some sort of lambda function
29:17 - as well
29:19 - so spend some time seeing how to
29:21 - integrate your form notifications with
29:23 - the form that we've just created truly
29:25 - hope you enjoyed going through this
29:27 - little project of mine creating this
29:29 - restaurant app i
29:31 - encourage you to take this same template
29:33 - and see if you can build another
29:34 - restaurant app build a different css or
29:36 - different styling
29:38 - go to restaurants in the area and see if
29:39 - you can apply the same sort of template
29:42 - to local restaurants and see if they can
29:44 - use a modern site without anita servers
29:47 - and be able to host that for free using
29:49 - a tool like netify

Cleaned transcript:

hey there i am brian douglas and i am here in my garage to talk to you about the jam stack and how to make jam sac websites so before we jump right in and i tell you how to build a jam sec app i want to actually show you what we're actually building so what we're looking at here is just a simple restaurant website that has the basics of what you would see in a restaurant um one being in a menu so we've got a basic menu here you can see different types of menu we got a lunch we've got a dinner section we've got prices on the right very fancy that's why we don't see any dollar symbols that's how you know how upscale this restaurant is in addition that we've got a drinks menu which you can see here as well as a simple about page so all this simple routing so if you're very familiar with like modern web technologies and frameworks uh routing's always built in so we'll talk about how to do that in the jam and then in addition to that we've got a simple gallery where we can show off some different images and then finally we'll have a form where you can actually submit reservations now we're going to move over to showing you how to clone this site as well as talking more about what jam stack is so i'm going to give you a onetime gif and that's pretty much all of the code and for this repository now if you look in the description of this video there's a link and if you click that you'll be able to clone a version of this tasty tutorial you can also visit bit.ly slash taste the tutorial either those two links will actually take you to this page which is going to be a wizard on netlife.com granting access to your github account will allow you to create a new repository based on the template that i provided here you can change the name or you can leave it as the same since i already have a version of this already saved i'm going to go ahead and change the name and once you click save and deploy it will then bring you to a screen where it starts to build your site for you so once your site's built you'll see a screen just like this which is a notify dashboard and here you can see one thing i want to point out which is the url of where your repository was created now it's going to be your github account that you connected to netlify and i'm just going to go ahead and tell you to go ahead and click that link and it should open a github repo with that code this is a repository that includes all the code you need but also includes a readme with more instructions on how to get this started so if you get stuck at any time you can actually check out my repository at github.com hego restaurant tutorial here you'll see the same code that you see in the repo that you cloned except that now we'll have some branches where you can actually see the solutions to each step so if you do get stuck all the code is going to be available here for you to look at so feel free to leverage this if you if you aren't able to follow along or if there's an error that you cannot get past so now you have your own version you just want to go ahead and clone this repo and go ahead and take that repo url and clone it on the command line now once that's done you can go into your repository and as outlined in the readme you want to do two things npm install and then finally npm and start running npm start will just go ahead and compile everything into a bundle and load your very own version of tasty licks for easy view this tutorial is actually going to be based on the static site generator hugo and based on statistics from staticgen.com hugo is the second most popular stacks identity and it actually has a pretty strong engineering culture and community around it supporting it now this tutorial also will be based on hugo but it's going to be based on a hugo boilerplate that also adds an asset pipelines so if you're familiar with either the rails asset pipeline or you're comfortable with npm in node packages you will find yourself right at home with the sex identity which is victor hugo which adds npm post css and a bit of webpack to your pipeline to be able to manage dependencies now once you have cloned the restaurant template that we'll be focused on you will need this install hego and if you are on a mac you can do that by brew install huigo and if you're not on a mac you can visit the hugo installing guide to find out how to install hugo either on linux or windows systems as well now if you get stuck installing geo please feel free to check out the the forums for higo which will be discourse.gohigo.io here is a pretty thriving community that will actually be more than happy to help and assist on getting your environment set up as well you can also reach out to me directly or check out the comments of this video so i mentioned earlier in this video that i was going to explain what the jam stack is and i'm going to go ahead and default to what jamstack already says uh jam sac is just a a way to describe modern web development architectures where it's based on clientside javascript and then reusable apis and all that information can be found more about the jam stack from jamsat.org where we actually have different examples as well as some resources to if you're in interested in finding out more about use cases and how other people are contributing to the jam architecture but i do want to take a chance to explain a little more in depth of how we got here and so basically what we're looking at here is just the this normal website architecture so we have a client and then you have a server and that server usually is not as simple as what what we see uh more the server normally looks like more of like a monolithic application structure so not only do you have your what you see on the browser which is the client but underneath under the hood you have like a web server an app server or api server as well as like a database and because of that all that content actually walks around with you whenever you go to host or deploy your site to the web so people can actually view it and i always like to use this this uh analogy of monolithic architectures like this so back in the day when i was a kid uh which actually still sell this in the actual stores but they have the idea of putting peanut butter and jelly in the same jar uh this was actually pretty cool when i was a kid but it at the end of the day it didn't work out very well because sometimes you only want jelly and sometimes you only want peanut butter but in this instance you have to take both of them and one big scoop so when you go to deploy a monolithic architectured site you have to deploy everything all together so then you have all these oneclick solutions that have done really well but we found out really quickly those have become really expensive so pushing the analogy even further i'm separating the two ideas of apis are backends to separate that from your front end which is your client so in essence this is what the jm is all about separating your client from your api or your front end from your back end and what's really made this real easy for modern sites that are built on javascript or even other languages is that we've had a insurgent of all these javascript build tools so we had grunt gulp browserify npm now it's kind of taken over as far as the scripting build tool of choice and then also webpack as well all these build tools are making it easy for us to bundle our javascript node apps into something that can actually be hosted easily through static which brings me to the static site generator so now we're getting more of surges and statistic generators uh back in the day we only had a handful now we have tons um as we saw earlier in staticgin.com um hugo is number two but number one is jekyll and then gatsby and middleman are both um very very popular in the space as well as a whole slew of other ones and what they do is they take what we're very used to having the command line interfaces and the interactions and build sites really quickly but we could also take that that complicated setup and then bundle that into a static output so we have an index of html that can be hosted easily on a cdn on multiple servers on the web without the heavy weight of a a database or a backend following it around instead we we would talk to an api directly to gather our data all that to be said is that the site that we're building is going to have a prebuilt structure so we are going to do complicated things we are going to talk to microservices and third parties solutions to do some of these uh nice features that we want in our restaurant app but we're gonna have the idea of a prebuilt structure so every time we push to get we get the idea of having continuous delivery and it goes straight to our cdn which for this example it's going to be netwy so we can continue to push on a regular basis and update and see those updates happen live without the need of keeping our database in sync or keeping our app server in sync at all the whole purpose of this video series is actually to show you how you can build modern websites and web apps on a structure where there's not actually a strong tie to backends and databases so i hope you enjoy and i hope you got a better understanding of what the jamstack architecture is hugo and other static sitegenders for the most part use markdown as the basics for rendering dynamic content on the page with this project nothing's really different we have a menu that lists a bunch of food items and we want to render that same count on our page the problem at the moment is that our version of site does not have any sort of menu whatsoever so i can't go to slash food and see any food items because we haven't set that up yet so we're going to go ahead and do that now and that'll be the first thing we'll tackle and if you haven't gone to the readme yet you will need to npm install so once you've installed the packages using npm you go ahead and run npm start to actually run a live version of your site to view now we're using a tool called browsersync so it should open up the browser for you and you should see the live site ready to go so open up your text editor and find you could find that the the structure of the code is actually laid out pretty nicely uh the project itself most of what we're going to be doing is actually going to be in the site folder that's going to be our content for food and etc uh the source folder is going to have your css your javascript images and the the main video that you see on the back uh of the homepage that's going to be living here images already be set up here and for the most part the css is already dealt already done for you so you don't need to actually do any css in this tutorial so the config.tamil is a place to tap into the menu system that we want to add to now if you're unfamiliar tamil tamil stands for tom's obvious markup language it was created by the creator of jekyll another static site generator that's uh very useful all you need to know is that our menu is going to be edited here so what i want to do is create a new route so i'm just going to copy exactly what we already have here and i'm gonna go ahead and make sure that this weight is two so that way i'll have the about link but also have a link for our food route since i have this live updating in the background we can now see that we have food working as a route but when i go to this route nothing renders and the problem is we don't have anything in the food content structure so if i go back to our code i'll need to actually go into our site directory and i'll need to go into content and then here we'll need to create one folder and make call it food so i am personally using vim so i can do this straight from my event editor if you're using atom or sublime or something similar like visual studio code just go ahead and create a folder in this directory called food now that i have a food directory i can now create my first food item now each item in the in the the content structure is going to be a markdown file and there's this concept within static site generation which is called front matter and in this front matter we can actually denote details like date different things like categories which i'm going to distinguish just to be lunch and also have different types like roles all this information is going to be available to you in the the actual description of the video so if you do want to copy and paste that feel free if you want to switch things up also feel free to do that but i'm going to go ahead and save our content as is just by filling out this front matter and between the the triple dashes we should be good to go to see our first food item available for us to view so if i now click food i realize i still don't see anything and that's because i'll need to update our static site generator to understand that there's some changes available so i just went ahead and killed our server and i'm going to restart that for us so we can now see our first food item available for us now go ahead and go back through this and see if you can now add a couple more food items so instead of just lunch i would go ahead and add some dinner items as well in addition you could also create some different unique choices and descriptions and pricing so take a crack at that and i'll show you how to make this process of adding new food items much easier using a content management system which is going to be our cms in our next video so adding the ability to update food on the menu dynamically was pretty straightforward but maintaining updates to the menu will probably get pretty tedious as you probably have discovered firsthand so thinking of a head chef or a kitchen manager who needs to make updates on the menu on a daily basis they would need to either clone the repository locally or log into github to make changes and chances of that actually happening on a customer zen is probably pretty slim so with the current state of the project all changes have to grow through a web developer so there's a lot of solutions to handle management of contents and since we're already on the netlife train and deploying our site there i'm going to recommend us use the nullify cms to get the cms connected you'll have to do just a couple things inside your project folder you'll need to go to site and then the static folder and inside here you'll need to add a new folder which we'll call be called admin once you create a new admin folder you want to create two new files and that'll be the config.yaml which is going to be different than our config.toml file for hugo this config.yml is going to be very specific to the cms and then you also want to add an index.html the contents of the config.yaml and the index.html are both available here under the netify documentation under the quick start tab and then under configuration now that we have the index.html i want you to first copy over the contents from the documentation into here so that way it looks like so now back into config.yam i'll break this down line by line so this yaml file actually look very similar to what's in the example on the documentation with some changes but line by line i'm going to break it down like so here is a section that's to tell us what backend we want to use by default nullify cms works with github out of the box we're actively working on other solutions but for now we're going to use github and i'm going to point it to my repository which is going to be my name slash the name of my repo it also wants to know what the base branch is going to be now the cms will work on any branch that you choose here so you would you want to check to see whatever branch you want your live code to go to so this could be any like demo or staging my preference is master i'm going to set this to be master here now the media folder we're going to use for a future video but we're going to set this now just in preparation because the cms requires you set a meter folder for any images that you want to save through the cms and since i already know i'm going to use that i'm going to set it for that and then finally we're going to add collections now each collection is actually separated with this hyphen and so i can have future collections hint we can also have like a drink menu or we can have some sort of dessert menu as well but for now we're just gonna have a general food menu and we're gonna set these labels now these labels are not gonna be um set outside of the cms you won't see the i you won't see the label food item outside the cms but this is for the cms to be able to present it visually and if you also note site content food is where we saved all our previous food items with their detailed front matter and this gives us rights to be able to save and then finally looking here these fields here all mimic exactly what we have in our front matter so these fields are looking directly at that front matter and being able to save and one thing to note as well is that for a supported meals we've got two default options one being lunch the other one being dinner and this is going to be based on a widget so widgets are something you can look up and that will actually get more detailed in a future uh video but just note that widgets are different types so we do have a widget for string list and text so this is the three ones we're going to be using for now so i'm going to show you exactly what the front matter looks like today which here for our oysters we do have date which we're actually ignoring in the cms though it is something that does get saved every time a markdown file gets saved but you can also note that we do have categories for lunch and dinner we do have types which type is here but the label is here and i'll show you what that looks like in a moment but for now go ahead and commit your changes to the cms so go ahead and pause the video make sure you have your config that matches pretty close to what i have here and commit that to your master branch and i'll meet you back in a few seconds at the netify dashboard now back in my network dashboard i can now visit the access tab to add an install provider we can do that from our github profile by going to our profile picture up there clicking settings and down here where it says oauth applications you want to register a new application now i've already done so here which is providing me a client id and a secret a client secret now be careful not to share these secrets but go ahead and take that client id and bring that back to netlify now back at the dashboard i can now install my provider based on my client id and my secret and now back on my live site instead of adding all my content locally within my text editor i can actually now go to slash admin login via github and i can view my cms now having a cms to be able to edit the food menu is great but it's almost pretty limited to only have a food menu now based on everything we've done so far adding the food menu to the cms i want you to go ahead and do the same thing by adding a collection to your config.yaml as well as adding a new link for drinks and i want you to add all this content dynamically through just using the cms now if you get stuck on doing this feel free to look back at your config.yml in your cms but also leverage the netlify cms getter community who are ready and willing to help anybody who's looking for help with the cms once you figure that i'll see you in the next video and we'll look at the code now you should have your cms that looks like this that has food items but also drink items available to look out and edit and if you took some time to add some different drink items you would have them look like this which is very much similar to what we have already in our cms now your config.yml would only need one more collection that copies exactly what we have in our food structure in addition to that you did want to go ahead and go to your site and your config.top tumble to make sure you added drinks to the menu so that way you actually do see it in the menu when you go to your site live that's it hopefully you were able to get through that if you weren't let us know if there's anything edge cases or also continue to hang out in the getter community for any questions and concerns and help with your project so when looking for a restaurant to eat at it's always nice to look at pictures of food as well as what the place actually looks like to get kind of a sense of quality and uh if you can't even like it so having some images somewhere um is actually ideal for a restaurant site and which is what i have here so you can see so as you can see i have a carousel that i can cycle through and see different images of the restaurant and food and then it cycles back to the front and i also want to point out in the layouts folder we've already been using a structure to render our content but i didn't really talk too much about how this works now within hugo we do have a base layout that loads our index page and this is where we see our video but we also have a default layout structure which lists all of our content so in hugo they have the idea of categories and each of these categories are separated by sections as well now consider sections being what we how we outlined our content in the config.yml so each section being food drinks and also one that we haven't talked about yet which is the about page each one of these sections are being separated by a conditional so if we happen to be on that that particular conditional that is the section that we'll be displaying and we're doing this logic by just doing this here this conditional within this block so hugo uses a go template rendering engine is which is what we see within these handlebars or if you may the curly braces now i wanted to point that out because we're doing one more thing for images which we actually i already give you to code here so you don't have to actually add the carousel directly to the page when we add our first image it will actually automatically do this but i don't want this to seem like magic so i just wanted to point this out here's how images are being displayed on the page and above is how food and drinks are being split on the page so if you have any questions about how this works or how hugo renders templates please check out the hugo documentation on taxonomies as well as listing and displaying data with that being said let's go and add some images first thing we want to do is go ahead and add a folder within our content structure called gallery now if you remember we have the config.gamil as well within the cms architecture and here we can actually add another collection called gallery and here we'll have a label called gallery image and it'll make sure to look in the folder site content gallery so everything pretty much as straightforward as we've done before except for one thing if you check out here in our field type we're using a widget called image and this is because we're no longer just gonna have static text to add to upload an image we're actually gonna upload an image in the cms using their cms image widget and since we've added a gallery to our cms you can now see that we have a new item in our sidebar called gallery images and here you can either use the file uploader to upload image or you can drag the image directly onto the image widget and now you have an image and now i can click save and see that live on my c on my site so now when i visit tasty.netblife.com i'm able to visit my gallery and see that my image is already there so there's one more thing we haven't done yet to make this restaurant app fully functional to the way i think it should be and that's actually adding reservations now we created this form or i provided this form rather as part of the template so i should be able to submit my name my email and when i would like to show up at the restaurant for my reservation and because this is slash contact i already know that in slash contact there's going to be a route ready and available for me which is why i'm going to the pages and then contact folder so now i'm in the contact fault the contact markdown file i now notice that i have a regular html form ready for me to update it's also got some of the same markdown that we see on the page as well now you can see the only thing i've added is the netify tag name all i need to do now is save that push that back up to github which will then trigger a new deploy on netlify and i'll be ready to submit forms so now once i go ahead and fill out my information and hit submit so back on my dashboard i'll go back to the site dashboard for form handling now this feature is incredibly useful but it can actually be even more useful if you check out the netlife documentation netlify also has a cool feature which adds notifications to form interactions so every time a form submission happens you can send an email notification as well or you can send a slack notification and if you already have some sort of web hook existing you could also add a web hook to either notify through a database or through some sort of lambda function as well so spend some time seeing how to integrate your form notifications with the form that we've just created truly hope you enjoyed going through this little project of mine creating this restaurant app i encourage you to take this same template and see if you can build another restaurant app build a different css or different styling go to restaurants in the area and see if you can apply the same sort of template to local restaurants and see if they can use a modern site without anita servers and be able to host that for free using a tool like netify
