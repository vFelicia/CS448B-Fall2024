With timestamps:

00:04 - hey and welcome to this free course on
00:06 - the css grid layout module css grid is
00:10 - actually a whole new way of creating
00:12 - website layouts it'll give you more
00:14 - flexibility than any other layout system
00:16 - or framework and it's also pretty
00:18 - intuitive to learn
00:20 - before we jump into the course i want to
00:21 - point out that what you see in front of
00:23 - you now is not a normal video it's an
00:26 - interactive scrimba screencast and that
00:28 - means that you as the viewer at any
00:31 - given time can jump into the code and
00:34 - change it
00:35 - you can for example head over to the
00:37 - index.css
00:38 - and change the color value for the h1
00:42 - tag to let's say black
00:44 - then see how your changes affected the
00:47 - output in the simulator window here so
00:50 - feel free to do this whenever you feel
00:52 - the need for experimenting with the code
00:54 - so that you make sure that you properly
00:56 - understand what we're going through
01:02 - okay so why do you want to learn about
01:04 - css grid
01:05 - well first of all because it makes your
01:07 - life a whole lot easier when it comes to
01:09 - creating two dimensional layouts which
01:11 - basically almost all websites consist of
01:14 - secondly as you'll see it'll make your
01:16 - markup significantly simpler
01:18 - it'll also give you a lot more
01:20 - flexibility when it comes to changing
01:22 - the layouts for example through
01:24 - responsiveness and it'll also enable you
01:26 - to actually skip frameworks like for
01:28 - example bootstrap
01:30 - and finally css grid is now supported by
01:32 - all the major browsers and the support
01:34 - amongst global website traffic is
01:36 - climbing quickly to learn exactly how
01:39 - many percent at the time you're watching
01:41 - this screencast check out this url here
01:45 - now let's kick off the course by looking
01:47 - at the benefits css grid has over a
01:50 - framework like bootstrap
01:55 - here we have created two mock-ups for a
01:57 - website this one is done using css grid
02:01 - and this one down here is done using
02:03 - bootstrap the layout contains a header a
02:06 - menu
02:07 - content
02:08 - and footer
02:09 - the markup is found in the examples.html
02:13 - here you can see the html for the
02:15 - bootstrap example and here we have the
02:17 - html for the grid example and we can
02:20 - instantly see that the css grid markup
02:23 - is significantly simpler than the
02:26 - bootstrap markup
02:27 - because gone are all the unnecessary row
02:30 - items and the ugly class names
02:34 - so as i mentioned
02:35 - css grid will make your markup cleaner
02:38 - benefit which of course would become
02:39 - much more apparent if we were to turn
02:41 - these two examples into full-blown
02:43 - websites however this of course doesn't
02:46 - tell the whole story as the grid example
02:48 - of course needs css
02:50 - which you can see here in the
02:51 - examples.css here is the css needed to
02:55 - create our grid example
02:57 - conceptually what's happening here is
02:59 - that instead of trying to define the
03:01 - layout which is the columns and the rows
03:04 - in the html we're rather defining
03:07 - everything in the css and this brings us
03:10 - to our next benefit which is that this
03:11 - separation gives you a lot more
03:13 - flexibility let's say that you for
03:15 - example want the menu here to appear up
03:18 - besides the header when it's being
03:20 - viewed on mobile to make this happen in
03:22 - our css grid example we simply create a
03:24 - media query and then we target the items
03:26 - which we want to change according to the
03:28 - new layout which is the
03:30 - header the menu and the content and then
03:32 - simply give these their new values and
03:35 - the result is that when we shrink the
03:37 - page and if you look at this css grid
03:39 - example you can see that
03:41 - boom there the menu item jumped up to
03:45 - the top row the header moves all the way
03:47 - to the right and the content took up the
03:49 - entire second row
03:51 - we can change back boom like that
03:55 - now if we were to try this in bootstrap
03:57 - we'd quickly realize the downside of
03:59 - having the layout
04:01 - defined in the html because what you
04:04 - want to do here is to make this menu
04:07 - item jump up to the first row up here
04:10 - however that's not trivial because the
04:12 - menu item is already trapped in the
04:15 - second row down here and in order to
04:18 - move it up to the first row we actually
04:20 - have to change our markup we have to cut
04:22 - away this element
04:25 - down here
04:27 - and paste it in up here
04:30 - that's not something you can do based
04:32 - upon a simple media query in css
04:35 - you can of course do it in javascript
04:37 - but that's hacky and more complex so
04:39 - what you want to do instead is learn css
04:42 - grid and i'm going to teach you that in
04:44 - this course so just sit tight and we'll
04:46 - start the next lecture right away
04:52 - hey
04:53 - in this screencast you're going to learn
04:54 - how to create grids through defining its
04:57 - rows and columns a grid consists of two
05:00 - main elements there's the container
05:02 - which we have here and then there's the
05:04 - items which are the elements inside the
05:07 - container in our case six divs which
05:09 - display the numbers from one to six now
05:12 - without any grid layout this results in
05:14 - six divs stacked on top of each other
05:16 - i've also given them a little bit of
05:18 - styling but that has nothing to do with
05:20 - the grid layout itself to turn this
05:22 - container into a grid we're going to
05:24 - target it
05:26 - and give it a display
05:29 - of grid
05:31 - if we run the code that won't result in
05:33 - any layout change yet because we haven't
05:36 - defined how we want our grid to look
05:38 - like so by default it only has one
05:40 - column and thereby it looks like we've
05:42 - just stacked six divs on top of each
05:44 - other in order to specify the columns
05:46 - we'll give the container a grid
05:49 - template columns will define how many
05:52 - columns and how wide we want them to be
05:55 - let's set the first one to a hundred
05:57 - pixels the second one to auto and the
06:00 - third one 200 pixels as well
06:02 - auto in this case means that the column
06:04 - will take up whatever remaining space
06:06 - there is in the width
06:08 - let's also give the grid a couple of
06:10 - rows
06:11 - with
06:12 - template rows and let's give both of
06:14 - them a height of 50 pixels
06:18 - so in the grid template columns property
06:20 - you define the width of the columns and
06:23 - in the grid template rows you define the
06:25 - height of the rows
06:27 - and as you can see we have a nice little
06:29 - grid here as expected it contains three
06:32 - columns going from top to bottom
06:34 - one
06:35 - two
06:36 - three and two rows going from left to
06:38 - right one
06:40 - two since the second column here is set
06:43 - to auto this grid is also responsive
06:46 - in order to make the grid look a little
06:48 - bit nicer i want to give it a grid gap
06:50 - property and set it to three pixels as
06:53 - you can see that gives a nice little gap
06:55 - between the items
06:57 - now let's say we don't want our grid to
07:00 - be three columns wide and two rows long
07:03 - but rather two columns wide and three
07:05 - rows long
07:07 - then we simply need to remove a column
07:09 - we can remove this last one here for
07:11 - example
07:12 - and add a row
07:13 - 200 pixels down here if we run the code
07:16 - you can see that we have a completely
07:18 - different grid two columns one two and
07:22 - three rows one two three the two first
07:25 - rows are 50 pixels tall however the
07:27 - third one is 200 pixels and the grid is
07:30 - still responsive as the second column is
07:32 - set to auto so in the next screencast
07:35 - i'm going to show you a few more ways of
07:38 - setting these values inside the template
07:40 - columns and grid template rows but
07:42 - before we jump on to do that i would
07:44 - recommend you to jump into the code here
07:47 - and play around with the values so that
07:49 - you're 100 sure that you understand the
07:51 - relation between what's going on here in
07:54 - the css and how that plays out in the
07:57 - simulator over here so go ahead and do
08:00 - that and i'll see you in the next
08:02 - screencast
08:07 - hey there in this screencast i'm going
08:09 - to teach you a better and more powerful
08:11 - way of defining columns and rows as you
08:14 - can see we're now working in the
08:16 - index.css file and not directly in the
08:19 - html file that's because doing it in the
08:22 - index.css gives us the benefits of
08:24 - automatic updates in the browser window
08:27 - so we have this very simple grid here
08:29 - which you probably recognize from the
08:31 - previous cast it got three columns the
08:34 - first one being 100 pixels wide the
08:36 - second being auto and the third is set
08:38 - to 100 pixels as well so this grid is
08:41 - responsive as the second column grows
08:43 - and shrinks with the width of the
08:45 - container we also have two rows which
08:47 - are 50 pixels each
08:49 - now the first thing we're going to do is
08:51 - change the responsiveness of the grid
08:53 - because let's say that we want all three
08:55 - columns to grow in size as the container
08:58 - grows in size
09:00 - we want them to be equal regardless of
09:01 - the width in order to achieve that i'm
09:03 - going to teach you a new value which css
09:06 - grid brings with it it's called fraction
09:09 - unit and it's written like this one fr
09:12 - let's set all three columns to be one
09:14 - fraction unit each
09:15 - we'll do one fr for the second one and
09:17 - for the third one
09:19 - and now as you can see
09:21 - they all grow and shrink equally so what
09:24 - happens here is that the grid splits the
09:26 - entire width into three fractions and
09:30 - each of the columns take up one fraction
09:32 - unit
09:33 - so if we change the second one here to
09:36 - two fraction units
09:38 - you can see that it'll always be twice
09:40 - as wide as the first and third column
09:43 - because now the grid has split the
09:45 - entire width into four fraction units
09:47 - and the second one takes up two of those
09:50 - while the first and third column take up
09:53 - one each
09:55 - okay so let's go back to having each of
09:57 - the columns equally wide
09:59 - in this case we could actually write
10:01 - this in a simpler way
10:03 - we could do repeat
10:05 - times one fraction units
10:07 - as you can see it gives the exact same
10:10 - result
10:11 - so the first parameter of the repeat
10:14 - function is the amount of rows or
10:16 - columns and the second one is the value
10:19 - which is the height or the width of the
10:21 - rows or columns so let's say we want six
10:24 - columns instead then we can simply
10:26 - change this number here to six instead
10:28 - and as you can see now our six items
10:31 - fill up only one row as we have six
10:34 - columns and six items in this grid
10:37 - so let's go back to three
10:39 - we can also do the same with the rows of
10:41 - course
10:42 - it
10:43 - two times 50 pixels
10:46 - finally i also want to show you a
10:48 - simpler way of defining the rows and
10:50 - columns because we can use the shorthand
10:52 - method for this
10:54 - so i'm going to copy the rows value here
10:57 - and remove that line and also remove the
11:00 - dash columns
11:01 - i'm going to paste in the rose value
11:04 - forward slash and then let the column
11:06 - value come after that and that'll give
11:08 - the exact same result
11:10 - so grid template is the shorthand method
11:13 - for grid template columns and grid
11:15 - template rows
11:16 - and it can be a bit hard to remember
11:18 - which one of rows or columns goes first
11:21 - and which one goes last and the rule i
11:23 - use to remember this is to think of it
11:25 - as drawing an l you start at the top and
11:28 - go downwards across the rows and then
11:31 - you go to the right across the columns
11:34 - start with the rows
11:35 - and then the columns so in the next
11:38 - screencast you're going to learn how to
11:40 - adjust the size and position of the
11:42 - items in the grid
11:43 - so stay tuned and i'll see you there
11:50 - hey in this screencast you're going to
11:52 - learn how to adjust the position and
11:54 - size of the items on the grid
11:56 - which is critical to know in order to
11:58 - create real-world websites with css grid
12:00 - we're going to create a mock-up for
12:02 - website and here in the index.html you
12:05 - can see the markup for that
12:07 - as you can see we're targeting each of
12:09 - the items using a class name header menu
12:13 - content and footer
12:16 - to start with we have this 2x2 grid
12:19 - each of the columns are one fraction
12:21 - unit
12:23 - so they're responsive
12:25 - as you can see and each of the rows are
12:28 - 40 pixels tall
12:29 - for our website though we're going to
12:31 - need three rows as we want the header to
12:34 - take up the top row the menu and the
12:36 - content to be on the second row and the
12:38 - footer to be on the third row all the
12:39 - way at the bottom
12:42 - so let's create a third row here let's
12:44 - place it in between the two existing
12:46 - rows and give it a height of 200 pixels
12:49 - as you can see now the header head
12:51 - render menu is on the top row and the
12:52 - content on the footer in the second row
12:54 - and our third row is blank as we haven't
12:57 - filled it with content yet since our
12:58 - items only take up the first four grid
13:01 - cells so let's change that
13:03 - we'll start by targeting the header and
13:05 - making it span from the left hand side
13:07 - all the way over to the far right hand
13:09 - side
13:10 - to achieve that we need to head into the
13:12 - dot header and give it a grid column
13:16 - start
13:18 - set that to 1 and also give it a grid
13:20 - column
13:22 - end
13:23 - at three
13:25 - as you can see now the header spans
13:27 - across the entire first row
13:30 - and what we're saying here is that we
13:31 - want the header to start at the first
13:33 - column line and end at the third column
13:36 - line
13:37 - and you might wonder why we have three
13:39 - column lines when we only have defined
13:41 - two columns
13:42 - well that's because the first column
13:44 - line goes from top to bottom on the left
13:47 - side of the grid the second column line
13:49 - is the one that separates the two
13:51 - columns and the third is the one that
13:53 - goes from top to bottom on the far right
13:55 - hand side of the grid
13:57 - so when you have two columns you have
14:00 - three column lines and you can write
14:02 - that like this
14:04 - alternatively though we can also use the
14:06 - shorthand method which i prefer
14:09 - let's remove this line here
14:11 - and also remove dash start and rather do
14:14 - one forward slash three as you can see
14:16 - that gives the exact same result
14:18 - let's also do the exact same thing with
14:21 - the footer
14:23 - like
14:25 - that
14:26 - now the footer also spans across the
14:28 - entire width alternatively we could have
14:31 - written this in a different way we could
14:32 - have done we could have done one
14:34 - forward slash
14:36 - span two
14:38 - that'll give the exact same result what
14:40 - we're here saying is that we want the
14:42 - footer to start at the first column line
14:44 - and span across two columns
14:47 - and finally there's also a third way
14:49 - which is to write -1
14:51 - that'll target the very last column line
14:55 - now that we know that we want our footer
14:56 - and header to span all the way to the
14:58 - last column line we can do that with
15:00 - both of them
15:02 - and take the advantage of the fact that
15:04 - in the future we might not know how many
15:07 - columns we're going to have in this grid
15:08 - as we can change that however we want
15:10 - so this is a nice little trick when you
15:13 - don't know exactly how many columns the
15:15 - item will span across in the grid and to
15:17 - prove that point for you i'm actually
15:18 - going to change the amount of columns we
15:20 - have in the grid right now
15:23 - because we don't want the menu here and
15:25 - the content to take up an equal amount
15:28 - of space in the width that doesn't make
15:30 - sense we want the menu to be a narrow
15:33 - sidebar on the left hand side here and
15:34 - we want the content to take up much more
15:36 - space now we could do this without
15:38 - adding more columns by simply doing one
15:41 - fr
15:43 - for fr for example now you can see that
15:45 - the content takes up much more space
15:47 - since the second column is four fraction
15:50 - units and the first column is only one
15:52 - fraction unit however this is not a very
15:55 - flexible way of doing it because now
15:57 - we're still stuck with two columns on a
15:59 - website layout and you normally want a
16:01 - lot more columns than that in order to
16:03 - have the flexibility to shuffle around
16:06 - and change the content so what i'm going
16:08 - to do instead is
16:09 - use repeat
16:11 - give it 12 columns each of one fraction
16:14 - unit now the menu and the content take
16:16 - up one fraction unit each in other words
16:19 - one column each and they're actually
16:21 - forcing the columns to be as wide as
16:23 - they need in order to
16:25 - display their content which is the two
16:27 - descriptions we've added inside items
16:31 - in order to make this look nice again
16:32 - i'm going to head into the content class
16:34 - and give it a grid column
16:38 - we know that it starts on the second
16:40 - column line
16:41 - two
16:42 - and we want it to go all the way final
16:44 - column line like that so we're gonna do
16:47 - minus one and now we have a 12 column
16:50 - layout instead of a two column layout
16:52 - meaning that we have much more
16:53 - flexibility if we want to shuffle around
16:55 - on stuff and
16:57 - notice that the footer and the header
17:00 - still spans across the entire width
17:02 - which is solely because we're using the
17:04 - minus one here
17:06 - if we had stuck with the three
17:08 - here and here that wouldn't have worked
17:10 - at all so let's change it back to -1 now
17:14 - let's also look at the grid row property
17:17 - as we're going to need that if we for
17:19 - example want the menu here to span all
17:21 - the way to the top in order to do that
17:23 - we first have to change the header
17:25 - though as we need to make the space here
17:28 - available this little grid cell here
17:30 - needs to be available for the menu
17:32 - so we'll change it to two now we have a
17:34 - blank cell here
17:36 - meaning that we can head into the menu
17:38 - class and give it a grid row
17:40 - and set that to one slash
17:44 - three
17:45 - meaning that it spans from the first row
17:47 - line to the third row line as you can
17:49 - see took up the spot here in the top
17:51 - left corner because this is the first
17:53 - row line this is the second and here is
17:56 - the third the fourth then is of course
17:58 - the the bottom line
18:02 - okay so before we jump on to the next
18:04 - screencast i would recommend you to for
18:06 - example try to make the menu span all
18:09 - the way to the bottom or alternatively
18:11 - make it appear on the right hand side
18:13 - instead of on the left hand side then in
18:15 - the next screencast i'm going to show
18:16 - you a really cool way of defining
18:18 - layouts which gives you a lot of
18:20 - flexibility in terms of shuffling around
18:22 - on the content and experimenting so stay
18:25 - tuned and i'll see you there
18:31 - hey in this screencast you're going to
18:33 - learn a really cool feature of css grid
18:35 - called template areas which allows you
18:38 - to change an experiment with layouts
18:40 - much more easily than with the
18:41 - techniques you learned in the previous
18:43 - cost
18:44 - this feature is ideal for creating
18:46 - prototypes of layouts quickly
18:49 - we're using more or less the same
18:51 - example from the previous screencast our
18:53 - grid has 12 columns and 3 rows
18:57 - the columns are just as they were in the
18:59 - previous screencast however for the rows
19:02 - i've changed the second one from 200
19:05 - pixels to auto that means it'll take up
19:08 - whatever available space there is left
19:10 - in the height and combining that with
19:12 - setting the height of the grid container
19:13 - itself to a hundred percent this will
19:16 - result in the grid being responsive in
19:18 - the height as well as you can see if we
19:21 - make it taller the second row grows with
19:24 - the grid
19:27 - now we're still using the grid column
19:30 - property to adjust the position and size
19:32 - of the items what we rather want to do
19:34 - in this screencast is use something
19:36 - called grid area
19:38 - and to be able to do that we're going to
19:40 - have to give the container a grid
19:43 - template areas property
19:45 - and the syntax you're about to see now
19:48 - might seem a bit weird
19:50 - it'll be a visual representation of the
19:52 - grid
19:53 - and the way it works is that we'll
19:55 - create a string for each of the rows and
19:58 - in those strings we'll create a cell for
20:01 - each of the columns so let's add the
20:03 - letter h 12 times in the first string
20:09 - we have to give it exactly 12 characters
20:12 - that has to match the amount of columns
20:15 - so we're not actually defining the
20:17 - columns or rows here we've already done
20:20 - that up here
20:21 - we're just naming them so that we can
20:23 - refer them using these names later on
20:28 - in the second row we'll add one m and 11
20:31 - c's
20:35 - like that
20:36 - in the third row we'll add 12 f's
20:43 - what you have here is a visual
20:45 - representation of how we want our grid
20:47 - to look like and as you might have
20:50 - understood the age
20:52 - m
20:53 - c and f refer to header menu content and
20:58 - footer
20:59 - so now let's remove the old way of
21:01 - positioning the items
21:05 - like that and build up the grid over
21:08 - again
21:09 - we'll give the header a grid
21:11 - area
21:12 - of age as you can see
21:15 - as a result the header takes up the
21:17 - entire top row
21:18 - just as we've defined here
21:21 - we'll give the menu
21:23 - a grid
21:24 - area of m
21:26 - content grid
21:29 - area
21:31 - c
21:33 - footer
21:34 - grid area of f
21:37 - as you can see
21:39 - our layout is just the way we want it to
21:41 - be and it's responsive
21:44 - now the reason this technique is
21:45 - brilliant for creating mock-ups is
21:47 - because now i want to make the menu span
21:50 - all the way to the top like we did in
21:51 - the previous screencast we can just
21:54 - replace this age here with an m and as
21:57 - you can see automatically the menu
21:59 - popped up to the top if you want to make
22:01 - it span all the way to the bottom let's
22:03 - do the same thing here as well
22:04 - and just as easy as that we have changed
22:07 - layout without having to fiddle around
22:10 - with the values in the item classes you
22:12 - can also use dots
22:15 - which will result in blank cells
22:17 - like that
22:19 - there
22:21 - there
22:23 - and there and now we have this
22:25 - weird experimental layout where all the
22:28 - corners are blank
22:30 - now one thing you need to be aware of is
22:32 - that the areas will only be valid if
22:35 - they are rectangled try and match this
22:37 - to an f so that the f footer goes like
22:40 - that and then up you can see it breaks
22:42 - the entire layout so you have to use
22:44 - rectangles as you understand this is a
22:47 - super simple way of experimenting with
22:49 - the layout
22:51 - so i'd recommend you to play around with
22:53 - these values here so that you make sure
22:55 - that you properly understand it and once
22:57 - you've done that you have finished the
22:59 - first section of this course so
23:01 - congratulations you now know quite a lot
23:03 - about cs grid however there's still a
23:06 - lot of stuff to learn so in the next
23:08 - section i'm going to teach you some more
23:11 - advanced stuff and we're going to create
23:13 - even more responsive grids that'll be
23:15 - super cool so i'll see you there
23:22 - hey and welcome to the second section in
23:25 - this css grid course in it you're going
23:28 - to learn more advanced concepts you've
23:30 - already learned about responsiveness but
23:32 - now we're going to take that to a new
23:34 - level so here we have the setup for a
23:37 - grid which you can see in the browser
23:40 - window as well it's got six columns and
23:42 - two rows and that's defined here and
23:45 - should be pretty basic to you by now
23:47 - both the columns and rows have a value
23:49 - of 100 pixels in width and height so
23:53 - this grid is not responsive now as you
23:55 - can see but we know from previous cost
23:57 - that we can turn it into responsive grid
23:59 - by doing one fr instead
24:02 - now the columns will grow and shrink
24:04 - with the width of the container however
24:06 - you wouldn't necessarily always want
24:08 - your columns to be six like now they're
24:11 - very squeezed together and at this point
24:14 - they're suddenly very wide what you
24:15 - perhaps rather want to do is for example
24:17 - only have two in with when the example
24:20 - is being viewed on a mobile and six in
24:23 - width when it's viewed on a normal
24:24 - screen
24:25 - so let's make the amount of columns vary
24:28 - with the width of the container
24:31 - we'll first go back to having 100 pixels
24:33 - here instead and then rather than hard
24:35 - coding in six columns we're going to use
24:37 - something called auto
24:39 - fit now what will happen is that it'll
24:42 - vary the amount of columns with the
24:44 - width of the grid as you can see it
24:46 - simply tries to fit as many columns as
24:48 - possible into the container and when it
24:50 - gets 100 pixels extra space on the right
24:53 - hand side it'll boom add a new one so on
24:56 - a very narrow screen it'll only show a
24:59 - couple of columns however this doesn't
25:01 - give us the responsiveness we want as
25:03 - the amount of hundred pixel columns
25:05 - rarely add up exactly to the width of
25:07 - the container
25:08 - then we get a situation like this
25:11 - here where we have quite a lot of space
25:14 - left on the right hand side though not
25:16 - enough to add a new column that doesn't
25:18 - look nice
25:19 - now you might think that we could rather
25:21 - do autofit
25:23 - 1fr however that'll only give us one
25:26 - column because autofit tries to fill up
25:28 - the grid with as many columns as
25:30 - possible until there's not enough space
25:32 - to add a new column
25:34 - so when you use fraction unit it starts
25:36 - by adding one column however then all
25:39 - the width is used up immediately because
25:41 - at that point
25:43 - both the width of the entire container
25:45 - and the first column are set to one
25:47 - fraction unit
25:48 - so to get the behavior we want we're
25:51 - going to use something called
25:52 - min max
25:54 - and we'll set our columns to be minimum
25:56 - 100 pixels
26:00 - maximum one fraction unit now you'll see
26:03 - that the columns will always fit the
26:05 - entire grid regardless of whether or not
26:07 - the container exactly adds up to 100
26:10 - pixels so what happens here is that the
26:12 - columns will always be at least 100
26:14 - pixels but if there's more available
26:17 - space it'll simply distribute that
26:19 - equally across all the columns
26:22 - so now they are more or less 100 pixels
26:24 - if we make the page a little bit wider
26:26 - you can see that it stretches all of the
26:28 - columns
26:29 - so now the width of the container is
26:31 - something like 550 pixels or something
26:34 - however when it reaches 600 pixels there
26:37 - it uses the minimum size for the columns
26:40 - so that it can fit in six columns so it
26:43 - prefers to use the minimum however when
26:45 - it doesn't add up to exactly 500 or 600
26:48 - pixels
26:49 - it uses one fraction unit instead so now
26:52 - we also get a nice view on mobile like
26:55 - that and a nice view on a very wide
26:58 - screen
26:59 - okay so in the next screencast i'm going
27:01 - to tell you about implicit rows so stay
27:04 - tuned and i'll see you there
27:11 - hey in this screencast we're going to
27:13 - continue with the grid from the previous
27:15 - one
27:16 - as it still has an issue we need to fix
27:19 - because if we make this grid narrow like
27:22 - this
27:23 - and have a look at the rows that are
27:24 - created beneath the two rows we defined
27:27 - we'll see that they're not acting the
27:29 - way we want them to they're not 100
27:31 - pixels in height which we defined here
27:34 - they're only as tall as the content
27:36 - inside of them force them to be
27:39 - and that's because they are implicitly
27:41 - created because as you can see here we
27:44 - only explicitly created two rows however
27:48 - with our current defined behavior for
27:50 - the columns we are going to need
27:52 - somewhere to place these items which
27:54 - can't fit in our explicit grid up here
27:56 - so from five and onwards we need to
27:59 - create new rows automatically in order
28:02 - to display our items and as we haven't
28:04 - told our grid how we want to style rows
28:07 - that it has to add to the grid itself it
28:09 - just has to decide for itself how these
28:11 - rows are going to look so let's fix this
28:14 - because we can target these rows by
28:16 - simply doing grid
28:18 - auto rows
28:21 - and set the value to 100 pixels
28:24 - now as you can see
28:28 - they're just how we want them to be
28:31 - you can see that as well
28:33 - grows and shrinks nicely
28:35 - with all rows always being 100 pixels
28:38 - tall
28:41 - and now that we've defined this one we
28:44 - can actually get rid of this one
28:47 - like that
28:48 - now all rows will be created implicitly
28:50 - and they'll always be 100 pixels tall so
28:53 - in the next screencast we're going to
28:55 - tie all the concepts you've learned up
28:58 - until now together and create a super
29:00 - cool image grid
29:02 - so i'm looking forward to see you there
29:09 - hey and welcome to the final screencast
29:11 - of the second section here we're going
29:13 - to take what you've learned up until now
29:15 - and use it to create really cool image
29:17 - grid i've already created the setup
29:19 - we're using the technique for
29:21 - responsiveness which we talked about
29:22 - previously using autofit in combination
29:25 - with min max
29:26 - which gives us a nice responsive grid
29:28 - that varies the amount of columns
29:32 - and the rows are implicitly created and
29:35 - are 75 pixels tall in the index.html you
29:39 - can see that i've added an image to each
29:42 - of the items in the grid
29:44 - that's of course the images you can see
29:46 - here and this is already i'd say a
29:48 - pretty cool grid however not all of
29:51 - these images fit the frame they're given
29:54 - equally well some of them might be more
29:56 - horizontal while other images might be
29:58 - more vertical i also have a few
30:01 - favorites which i think deserve a little
30:03 - bit of extra attention
30:05 - you can see that i've actually given
30:06 - some of these item classes like vertical
30:09 - horizontal and
30:11 - big
30:12 - these are the images which i don't think
30:14 - fit well into only one grid cell so
30:17 - let's go ahead and make the
30:19 - horizontal images twice as wide we'll
30:22 - head over to the css
30:24 - to the horizontal class and we'll set
30:26 - the grid column property
30:30 - now
30:31 - previously we do something like 1 that's
30:34 - the starting value and then for example
30:37 - to span two so that they'd span across
30:40 - two columns
30:42 - however as you can see that'll force all
30:45 - the horizontal images which is this one
30:47 - and this one for example to start on the
30:49 - first column line
30:51 - if we enlarge the grid you'll see that
30:53 - they'll but they'll still stick to the
30:55 - first grid column line which amongst
30:57 - other things leaves open spaces in the
31:00 - grid which is something we're going to
31:01 - talk about later on so what we rather
31:03 - want to do is swap out this one here
31:06 - with auto
31:07 - now you can see
31:09 - they start on whatever column line they
31:12 - were given initially this one starts
31:13 - here and these two now happen to start
31:15 - on the first column line but if we
31:17 - change the width you can see that the
31:18 - horizontal images start on various grid
31:21 - lines and not just one what we actually
31:24 - also can do here is remove this entirely
31:27 - and just do grid column span 2.
31:30 - so the grid column and grid row
31:32 - properties can take a lot of different
31:34 - values and combinations and at this
31:36 - point this is the simplest we can do
31:38 - however i wanted to show you the various
31:40 - alternatives
31:41 - okay now let's do the same thing with
31:43 - the vertical images the ones we want to
31:45 - make taller than the rest of the images
31:48 - so here we'll use grid row
31:51 - and set that to span 2.
31:54 - as you can see this one and this one
31:56 - they're now taller than all the others
32:03 - and now we've gotten a few blank cells
32:06 - throughout the grid and we're going to
32:08 - talk about that in a minute however
32:10 - let's first make the big images the ones
32:12 - we want to highlight twice as tall and
32:14 - twice as wide as the normal images
32:17 - grid column
32:19 - and two
32:21 - and grid
32:22 - row
32:24 - span two
32:29 - now you can see this image here and this
32:31 - one here and this one here are really
32:33 - getting the attention they deserve
32:36 - but we need to fix these blank spots
32:38 - here because that doesn't look nice
32:40 - so why do these blank spots appear
32:44 - to understand that let's look at how the
32:46 - grid lays out each of the items starts
32:48 - up here in the top left corner lays out
32:50 - the first item second third fourth fifth
32:54 - and then it needs to continue on the
32:56 - next row which is here
32:59 - and it tries to fit in the sixth image
33:02 - however when it's about to lay out that
33:03 - one it can't fit it as it only has one
33:07 - grid cell available here however the
33:09 - sixth item is a big one it's this one
33:12 - here let's double check that in the html
33:15 - one two three four five six and that is
33:19 - indeed a big item
33:24 - so what it then does is that it
33:25 - continues on looking
33:27 - at the next cell that's already taken so
33:30 - it jumps onto the next cell again and
33:32 - here it actually has enough space to lay
33:34 - out the big item
33:36 - and then it simply continues laying out
33:38 - the next item here here and then one
33:41 - here
33:42 - leaving that spot here blank
33:45 - wouldn't it be great if we somehow could
33:47 - fill these spots
33:48 - well we can
33:50 - and to do that we're going to use a
33:52 - property called grid auto flow
33:58 - it's by default set to row
34:01 - meaning that it'll lay out the items
34:03 - one row at a time just as we talked
34:06 - about starting here and going
34:08 - across the first row and then jumping
34:10 - next to the second row and continuing on
34:12 - like that however if we set it to
34:16 - dense we'll use so-called dense packing
34:19 - algorithm which attempts to fill the
34:21 - holes in the grid
34:22 - if there are holes in the grid and
34:24 - smaller items come up later then it'll
34:27 - move those up to fill the blank spaces
34:30 - so if we
34:31 - go back to row
34:33 - we see that this space is blank
34:36 - and the next item in the grid which
34:38 - could potentially fit in here would be
34:41 - not this one the sixth item but the
34:43 - seventh item of the waterfall here so
34:45 - let's look at what happens when we
34:46 - change the dense
34:48 - and indeed the waterfall image has now
34:51 - jumped back to this position and filled
34:53 - that hole and this works regardless of
34:56 - how wide the screen is as you can see we
34:58 - have a super cool image grid now
35:01 - which looks really hard to create
35:03 - actually however we've done it simply
35:05 - using these 20 lines of css
35:08 - and finally i want to mention that this
35:10 - dense feature here is an example of
35:13 - source order independence which is a
35:16 - huge win for css
35:17 - it means that the grid can arrange the
35:20 - items regardless of how they're laid out
35:23 - in the markup
35:24 - here we simply use the markup for what
35:26 - it's supposed to be used for markup for
35:28 - content and we're using the css for what
35:31 - it's supposed to be used for styling and
35:34 - we're not limited to whatever order we
35:36 - laid out the images initially so source
35:38 - order independence gives you a lot of
35:40 - flexibility
35:42 - so this marks the end of this section
35:44 - you now know quite a lot about building
35:46 - advanced css grid layouts however be
35:49 - sure to check out the bonus material if
35:51 - you're hungry to learn even more
35:54 - thank you
35:58 - hey in this screencast you're going to
36:00 - learn a new way of positioning and
36:02 - sizing the items on the grid using
36:04 - something called named lines so we've
36:07 - defined our normal grid here which is
36:09 - the website layout you should be
36:11 - familiar with by now though in this case
36:13 - we're defining it in the very simple way
36:15 - of only having
36:17 - two columns one being one fraction unit
36:19 - and one being five fraction units so
36:22 - we're not using the flexible 12 column
36:24 - layout here as this setup makes it
36:26 - easier when using named lines so to
36:29 - brush up a little bit the grid has
36:30 - column lines and row lines the first
36:33 - column line is the one on the left hand
36:35 - side the second one is the one
36:37 - separating the two columns and the third
36:39 - one is the one on the far right hand
36:41 - side
36:42 - and our content item for example is
36:44 - defined to span from the second row line
36:47 - to the third row line from here
36:50 - to here
36:52 - in our code that will be from the line
36:54 - that goes in between here and
36:57 - until the line that goes here so what we
36:59 - now can do is we can add a square
37:01 - bracket in between write content start
37:05 - for example
37:06 - and on the third line and write content
37:10 - and like that
37:12 - now what we can do
37:13 - is we can
37:14 - swap out the number two here with
37:17 - content start
37:21 - and the number three with
37:24 - punch and end
37:25 - like that
37:27 - and as you can see that works fine if we
37:29 - wanted to do the same thing for the
37:31 - header we'd have to give a name to the
37:33 - first line as well up here
37:36 - let's call that
37:37 - main start
37:39 - so now the header spans from main start
37:42 - to content end
37:43 - however i actually want to call this
37:45 - line main end as well because there
37:47 - might be a case in the future where we
37:48 - want to reference the main end
37:51 - explicitly not use content end as a
37:53 - proxy for it
37:54 - so
37:57 - so let's just add a new name here
38:00 - main end like that just give it a space
38:03 - and then the new name
38:06 - now we can do main art
38:08 - main end
38:10 - as you can see works perfectly fine
38:13 - the footer can get the exact same layout
38:17 - like that now let's also name the rows
38:20 - using the exact same convention
38:23 - we'll do
38:24 - main start
38:30 - i'm just going to copy them under and
38:32 - start
38:39 - end
38:43 - and main end like that
38:48 - now you might wonder why
38:50 - we've been using this dash syntax here
38:54 - and that's because they give you a
38:55 - little bit of magic
38:57 - now given that we've called this line
38:59 - here for content start and this line
39:02 - here for content end
39:05 - the grid knows that this is the content
39:08 - column or columns if that was the case
39:11 - so you can actually set the grid column
39:14 - to
39:15 - just
39:16 - content like that and as you can see it
39:18 - works
39:19 - now the header and the footer spans from
39:23 - main start to main end so we can do the
39:25 - exact same thing there as well just use
39:28 - grid column main
39:30 - and to take this even a step further
39:32 - actually we can also use grid area in
39:36 - one of these cases that'll be in the
39:38 - content case because let's have a look
39:40 - at the content lines
39:42 - both the row lines and the column lines
39:46 - so we know we have the content start
39:47 - here and the content end here
39:49 - though we also have a content start here
39:52 - the second row line
39:55 - first
39:56 - second
39:57 - so this one here and we have a content
40:00 - end on the third row line
40:02 - the third one here
40:05 - meaning we have boxed in an area with
40:07 - content lines
40:10 - here
40:11 - here here here and here
40:15 - and now we can actually use grid area
40:18 - which you which you might remember from
40:20 - section one of this course
40:22 - by simply doing grid area and set it to
40:25 - content
40:26 - like that and it still works
40:29 - however you might be tempted to try and
40:31 - do the same thing down on the footer
40:32 - though that wouldn't work
40:34 - because it has to be boxed in by four
40:37 - main lines
40:39 - though the main start row line
40:42 - is the one that starts up here not down
40:46 - here above the footer so here we have
40:48 - only kind of boxed it partially in we
40:50 - have the main start column line here
40:53 - which is the start of the footer and the
40:55 - main end row line which is the bottom of
40:58 - the footer and the main end column line
41:01 - which is the right hand side of the
41:02 - footer though the top of the footer is
41:05 - the content end line
41:08 - so we can't use grid area main here as
41:11 - you can see it breaks the entire layout
41:14 - so be careful and make sure that you
41:16 - have properly boxed in an area before
41:18 - you start using grid area
41:20 - okay that was it for this bonus
41:22 - screencast thank you
41:27 - hey in this screencast i'm going to show
41:29 - you how to justify and align the entire
41:32 - content of a grid i've added here a
41:35 - black border around the grid container
41:37 - so that we can see its edges we've also
41:39 - made sure that the grid is fully
41:41 - responsive and that there's a little bit
41:43 - of space around it so right now our grid
41:46 - items only occupy a tiny part of the
41:49 - entire grid container and that's
41:50 - important in order to learn about
41:52 - justifying and aligning the content so
41:54 - let's start with the justification which
41:56 - defines and distributes space between
41:59 - and round the items
42:00 - along the row axis from left to right
42:04 - so if we set
42:05 - justify content
42:09 - and set that to
42:10 - end as you can see that'll shuffle all
42:12 - the content over to the right hand side
42:15 - to the end of that axis the row axis the
42:19 - default value here was
42:21 - start you can also do center like that
42:24 - that'll center it along the row axis so
42:26 - let's combine this with a line content
42:28 - as well
42:34 - and do end for example
42:36 - i'll push all the content down to the
42:38 - lower end of the grid
42:40 - because aligning controls the content
42:42 - along the column axis the vertical one
42:45 - which goes from top to bottom if we do
42:49 - center here as well
42:50 - we'll fully center the items in the grid
42:53 - now let's comment out this one
42:56 - and have a look at the other values you
42:58 - can use here because there's a couple of
42:59 - cool ones if we for example want a lot
43:02 - of space in between the items we can do
43:05 - space
43:07 - queen
43:09 - now we have as much space as possible in
43:11 - between the items along the row axis we
43:15 - can also do space evenly like that
43:19 - which distributes the items evenly
43:21 - throughout the row axis
43:24 - so the items have an equal amount of
43:26 - space around them
43:29 - finally there's also the space round
43:32 - this one is pretty similar to space
43:34 - evenly though each of the items have a
43:36 - half size space on either end
43:39 - meaning that if you have two items
43:41 - besides each other that'll give a full
43:44 - size space between them though here in
43:47 - between the first column line and the
43:49 - first item you only have a half space as
43:52 - this item forces a half space on this
43:55 - side
43:56 - though the grid line itself doesn't
43:58 - force the grid to create any space for
44:00 - it
44:01 - though in between these two
44:03 - both of the items forced the grid to add
44:05 - a half space in between them resulting
44:08 - resulting in full size space
44:12 - so that was the basics of justifying and
44:14 - aligning the content thank you
44:20 - hey in this screencast i'll teach you
44:22 - how to justify and align the items on
44:26 - the grid so here we have our classic
44:27 - website layout it contains 12 columns in
44:30 - the width each are one fraction unit and
44:33 - three rows
44:35 - where the second one is auto
44:37 - so this grid is responsive in both width
44:40 - and height
44:41 - as you can see
44:43 - we have defined the width of each of the
44:45 - items using the grid column value so for
44:47 - the header for example we're saying
44:49 - start at the first column line which is
44:52 - this one and end at the last one which
44:54 - is this one over on the right hand side
44:56 - so it's kind of stretching from the
44:58 - start point to the end point and this
45:01 - axis here the row axis is the one you
45:04 - control with justification so if we do
45:07 - so if we do
45:09 - justify items
45:12 - that'll be by default set to scratch
45:15 - however if we for example want each of
45:17 - the items to rather center itself as
45:20 - much as possible and not stretch all the
45:22 - way from the left hand side to the right
45:24 - hand side we can use
45:26 - center
45:28 - as you can see now each of the items are
45:30 - centered at as much as possible you can
45:32 - also use start that'll squeeze all of
45:35 - them towards the left hand side and end
45:38 - is the opposite of this that'll squeeze
45:39 - all the items to the right hand side now
45:42 - let's comment out this a little bit
45:44 - and use the line items property that'll
45:47 - do the same thing though along the
45:49 - column axis so the vertical axis from
45:52 - top to bottom
45:53 - so if we do center here
45:56 - you can see that each of the items are
45:58 - now squeezed together towards the center
46:01 - though not on the left to right row axis
46:04 - but on the top to bottom column axis we
46:06 - can do
46:07 - end that'll squeeze all them to the
46:09 - bottom
46:11 - or start that'll squeeze them towards
46:13 - the top
46:15 - now
46:16 - let's do center again and combine this
46:19 - with
46:21 - center here
46:22 - now all the items just a tiny rectangle
46:25 - in the center of the grid cells which
46:27 - are originally occupied fully
46:30 - now i have no idea why you'd want to
46:31 - create a website layout like this it's
46:34 - really weird but that's besides the
46:36 - point of this screencast
46:38 - finally
46:40 - let's
46:41 - finally let's comment out these two
46:44 - get back to the original layout
46:46 - and look at how you can do the same
46:48 - thing though only targeting one of the
46:50 - items
46:51 - let's head into the content for example
46:53 - then you can use
46:54 - just justify self
46:57 - and do center
46:59 - and now only the content is entered
47:02 - you
47:03 - align
47:04 - off as well
47:05 - undo end and now the content is squeezed
47:08 - down to this tiny little box in the
47:11 - bottom center of the huge space it
47:14 - originally occupied a little bit sad
47:17 - actually to see the content to see the
47:19 - content being turned into a shadow of
47:20 - itself like that
47:22 - so let's give it back its
47:25 - original space like that
47:28 - okay so that was it i hope you learned
47:30 - something and feel free to play around
47:32 - with this yourself thank you
47:39 - hey in this screencast i'm going to
47:41 - explain the difference between autofit
47:43 - and autofill so here we have two
47:46 - different grids using one or the other
47:49 - you can see them on the page here and
47:51 - i'm assuming that you understand the
47:52 - basics of this
47:54 - complicated expression here where we're
47:55 - basically repeating with autofit as many
47:58 - columns as we can fit into the grid
48:00 - given these constraints here
48:03 - they should be minimum 100 pixels and
48:05 - maximum one fraction unit and that as
48:07 - you probably remember from the
48:08 - screencast in the second section will
48:11 - give a nice responsive behavior where
48:13 - the amount of columns grows with the
48:15 - size of the grid
48:16 - like this if we enlarge in this page
48:19 - boom there the grid crossed the 300
48:21 - pixel threshold meaning it could fit
48:24 - three columns in instead of two and as
48:26 - we make it more wide the columns become
48:29 - one fraction unit until it reaches the
48:31 - next threshold which is 400 pixels and
48:34 - boom then autofit and auto fill adds
48:38 - another column to the grid since we now
48:40 - can fit 400 pixel columns into the grid
48:43 - however there's a slight difference
48:44 - between the two and that'll be apparent
48:46 - if we try to enlarge the grid even more
48:48 - like
48:49 - this
48:50 - now but you can see that auto fill
48:52 - actually added
48:54 - a fifth column even though we don't have
48:57 - a fifth element to add there
48:59 - whereas autofit made sure that the four
49:02 - items we have actually fit the grid now
49:05 - under the hood what's happening here is
49:07 - actually that both of them add new
49:09 - column tracks though autofit
49:12 - actually collapses those new columns to
49:15 - zero pixels in width so that the current
49:18 - items you have in the grid when defined
49:20 - like this with a maximum size of one
49:22 - fraction unit actually will fit to the
49:25 - grid regardless whereas auto fill at
49:28 - every 100 threshold like there and there
49:31 - and there it'll add new column tracks
49:34 - which basically are empty so that was
49:36 - the difference between autofit and
49:38 - autofill
49:44 - in this example
49:46 - i
49:46 - will
49:47 - show you how you can use css grids to
49:50 - create an article layout
49:53 - so in this example i have a plain
49:55 - article that i've written i wrote it
49:56 - originally in markdown and then i
49:58 - generated this html using a markdown
50:01 - compiler
50:02 - so it's not
50:05 - so it's pretty nice it has ul's it has
50:06 - some piece and there's a div here for
50:10 - the
50:11 - code highlighting
50:12 - and a fixture a figure tag for the image
50:16 - and just basic html
50:19 - and
50:20 - i'm just going to go straight ahead and
50:22 - turn this into grid
50:24 - and then i will explain
50:26 - what i'm trying to accomplish
50:29 - with that
50:32 - so
50:33 - oh it looks now we have a grid which is
50:36 - very funky
50:38 - move everything where i want it i want
50:41 - them to be
50:44 - and
50:46 - there we go
50:48 - so now i've defined the grid which has
50:51 - three columns there's the first column
50:54 - that's 80 pixels then there's a main
50:56 - column that takes
50:59 - one fraction of the space
51:00 - and then there's the right column that
51:02 - takes 80 pixels
51:04 - and i have this rule here which says
51:06 - that every element inside the article
51:08 - should start at the grid column line
51:10 - number two
51:11 - so remember that the grid column line
51:13 - one goes down here
51:14 - two goes down here then we have three
51:17 - over here and four over there
51:20 - and by setting grid column 2 we say that
51:23 - every element should start in this
51:24 - column
51:25 - and we need to set the min width to 0 to
51:28 - actually allow it to shrink if we don't
51:30 - set this
51:31 - you will see that it
51:33 - goes all the way over there
51:36 - now
51:38 - right now this is just a way of adding
51:39 - some spaces on the side
51:41 - but
51:43 - since this is a grid we can now do
51:46 - some things very easily
51:49 - since i now want this figure
51:52 - take the whole width
51:55 - and
51:55 - that was all
52:02 - and let's add some space on top of it
52:06 - right so what did we do here i set the
52:09 - grid column to start at line one and end
52:12 - at line minus one which is the last one
52:15 - so this is the way i was saying
52:16 - make the element take the whole width
52:20 - and this is just
52:22 - radically simple then
52:25 - any other way to accomplish the same
52:26 - thing
52:27 - if you don't have a css grid you end up
52:30 - having to say that these elements here
52:33 - should have a margin
52:34 - and standard margin and this should not
52:37 - you need to cancel out the margin you
52:38 - set by default
52:40 - and often this is very tricky because
52:43 - you
52:44 - often end up having to have custom
52:46 - html
52:47 - uh just to handle where things should
52:50 - when they should be narrow and when they
52:51 - should be white
52:54 - and it's can be really tricky deciding
52:56 - where to put things
52:59 - so another thing that we can do is to
53:01 - add another element
53:04 - i'm going to call it aside
53:09 - and here i'm going to just write
53:11 - some texts
53:26 - includes so now we have this new
53:29 - paragraph over here
53:31 - and now i can style it
53:36 - and now i want to style it like this i
53:39 - want to say it in the third column
53:43 - i want it to have like a gray color
53:46 - [Music]
53:49 - and
53:52 - like that
53:54 - and smaller font size
53:59 - this seems like a good time to add
54:02 - gap
54:04 - spacing between
54:07 - so
54:12 - yeah and if i wanted to be on the left
54:14 - side i can just set it to grid comes
54:15 - three one
54:18 - and
54:19 - trust me if you're trying to do this
54:21 - without a grid it's it's so hacky
54:24 - uh
54:25 - i can't even begin to think like because
54:27 - you have this element here which
54:28 - originally has a margin
54:31 - and then maybe if you put both of these
54:34 - elements inside the same div
54:37 - maybe you can do like position absolute
54:39 - and set left 100
54:41 - or something
54:42 - yeah i don't know i don't really know
54:44 - this is just something i don't know a
54:46 - clean way of doing in plain css
54:50 - uh and especially not in the way where
54:52 - you can have
54:54 - no changes in the html basically
54:58 - now there is one thing you need to know
55:01 - and that is this is actually a separate
55:03 - grid so this is becoming a grid row that
55:06 - goes here and this is a separate grid
55:08 - row
55:09 - and this has the consequence
55:11 - that you often end up with this spaces
55:15 - you might in this case want this space
55:18 - to be gone and then this text to go down
55:20 - further
55:22 - to the right side of the header but
55:23 - that's currently not possible with css
55:26 - grid
55:27 - that's just a limitation
55:29 - that you can't really avoid
55:32 - and whether it's good or bad i don't
55:34 - really know in this case i don't think
55:35 - it's that bad because this paragraph
55:37 - belongs with this paragraph and here we
55:39 - have a header which starts a completely
55:40 - new section so it's not that big of a
55:42 - problem but if we had like another
55:45 - paragraph over here
55:47 - it can be a bit confusing
55:50 - that you have these big spaces
55:53 - which isn't quite optimal
55:56 - but other than that i find that using
55:59 - css grid for this type of article layout
56:02 - makes the
56:03 - the html much cleaner you can basically
56:06 - just take
56:07 - the output from a markdown parser
56:11 - and dump it straight in you don't need
56:13 - to do anything special to support either
56:15 - having things in the left column or the
56:17 - right column
56:18 - or in in full width
56:22 - and the styling itself it's 20 lines
56:27 - and even here i haven't touched anything
56:30 - like block quotes
56:33 - but here's the quote maybe you also want
56:35 - that to be
56:37 - in the full width
56:40 - oh we should remove the margin at the
56:43 - side and maybe we want to set a color
56:46 - once again
56:50 - and maybe like border to the left is
56:52 - cool
57:01 - thing as well
57:07 - and notice that i can just add padding
57:09 - add borders
57:11 - i just set the column to be from one to
57:13 - minus one and everything works
57:16 - i don't need to worry about negative
57:18 - margins or
57:19 - or or knowing what the wind of this
57:22 - column is so now if i want to set the
57:24 - left column to be 17 instead or maybe 40
57:27 - and the right column to be 40 that works
57:29 - perfectly fine
57:32 - and all is just very very good
57:35 - thanks
57:40 - hey in this screencast i'm going to talk
57:42 - about the difference between flexbox and
57:44 - grid and i'm also going to show you how
57:46 - you can use the two together so we have
57:49 - a header here which is built using
57:51 - flexbox and a page layout which is built
57:53 - using css grid here is the html for the
57:57 - grid example and the html for the
57:59 - flexbox example and the css is located
58:02 - in the index.css file here and we're
58:05 - going to look at this code in a minute
58:06 - however let's first look at the examples
58:08 - themselves because you might actually be
58:10 - able to guess the main difference
58:12 - between flexbox and grid just by looking
58:14 - at these two examples because flexbox is
58:17 - built for one dimensional layout like
58:20 - this one it goes in one direction from
58:22 - left
58:23 - to right being just a single row whereas
58:26 - css grid is built for two dimensional
58:29 - layouts like this page here it has three
58:31 - rows
58:32 - the top one the middle one and the
58:34 - bottom one that actually has 12 columns
58:37 - though we can only see two of them
58:39 - visually here due to how we've laid out
58:41 - the items so if you're going to create
58:43 - layout which has a direction either row
58:46 - or column then use flexbox it's great
58:49 - for aligning content within that
58:51 - container and gives you a lot of
58:52 - flexibility however if you're going to
58:54 - create a more overall layout with both
58:57 - rows and columns then you should
58:59 - definitely use css grid as it'll give
59:01 - you much more flexibility and simpler
59:04 - markup than if you were to for example
59:05 - try to use flexbox to create
59:08 - two-dimensional layouts okay there's
59:10 - also another overall difference which is
59:12 - that flexbox takes basis in the content
59:15 - it's so called content first whereas
59:17 - grid
59:18 - is layout first it takes spaces in the
59:20 - layout
59:22 - now this might seem a little bit
59:23 - abstract so let's look into the code
59:25 - because that'll make it a bit more clear
59:27 - so the flexbox header here is turned
59:30 - into a flexible box by simply giving it
59:32 - a display flex we don't have to do
59:34 - anything else
59:36 - we then let the content make most of the
59:38 - decisions of where they're going to be
59:40 - placed throughout the container for
59:42 - example you can see the
59:44 - third child here the
59:46 - log out element simply adds a margin to
59:49 - its left hand side and thereby shoving
59:51 - itself all the way to the end of the
59:53 - container now let's look at how we
59:55 - create our grid layout first of all we
59:57 - can't just simply give it a display grid
60:00 - and then start shoving content into the
60:01 - container no we also have to define
60:04 - either columns or rows or both as we're
60:07 - doing here we're giving it 12 columns
60:10 - each being a fraction unit wide and
60:12 - three rows and just by doing this you
60:15 - can understand that grid to a larger
60:17 - degree takes basis in the layout first
60:19 - you're constrained by the layout you
60:22 - define here whereas we could have added
60:24 - as many items in the width on this
60:26 - single row in our header here we're now
60:29 - constrained with 12 columns in our grid
60:32 - example here
60:33 - and also we need to place the elements
60:36 - according to the layout
60:38 - for example this menu item here this one
60:40 - which you can see on the left hand side
60:42 - here we're not placing it here by giving
60:44 - it a margin on its right hand side like
60:47 - we do on the log out
60:49 - we're taking bases in the layout and
60:51 - saying that we wanted to span from the
60:53 - first column line to the second column
60:54 - line and thereby it places itself how we
60:57 - want
60:58 - this layout first versus content first
61:00 - is a bit abstract and it's not something
61:02 - you think about when you develop though
61:04 - it's nice to be aware of it
61:06 - so finally let's actually combine the
61:09 - two because that's what you want to do
61:11 - you want to combine css grid with
61:13 - flexbox
61:14 - and then get the best of both worlds
61:17 - so now what we're going to do we're
61:18 - going to take this header here move it
61:21 - down into our age layout
61:23 - so let's head over to the html and take
61:25 - the three elements here
61:28 - copy them
61:29 - and add them here
61:32 - like that
61:33 - so what we now will do is we'll turn the
61:36 - header here
61:37 - into a flexbox
61:39 - giving it a display of flex
61:42 - now let's run this code
61:44 - as you can see we have the items laid
61:46 - out like this
61:48 - what we now can do is we can use for
61:50 - example justify content
61:54 - do for example space evenly like that as
61:57 - you can see they change accordingly
61:59 - however let's do what we did in the
62:02 - flexbox layout
62:06 - target the
62:08 - third child
62:10 - log out button
62:13 - margin left
62:16 - arrow
62:17 - as easy as that
62:18 - you've combined css grid with flexbox
62:22 - now this header here
62:25 - this
62:26 - item in the grid container is actually a
62:31 - flex container itself which then again
62:33 - has three items within itself so i hope
62:36 - you learned something from this and that
62:38 - you'll start using grid and flexbox
62:40 - together from now on
62:42 - thank you

Cleaned transcript:

hey and welcome to this free course on the css grid layout module css grid is actually a whole new way of creating website layouts it'll give you more flexibility than any other layout system or framework and it's also pretty intuitive to learn before we jump into the course i want to point out that what you see in front of you now is not a normal video it's an interactive scrimba screencast and that means that you as the viewer at any given time can jump into the code and change it you can for example head over to the index.css and change the color value for the h1 tag to let's say black then see how your changes affected the output in the simulator window here so feel free to do this whenever you feel the need for experimenting with the code so that you make sure that you properly understand what we're going through okay so why do you want to learn about css grid well first of all because it makes your life a whole lot easier when it comes to creating two dimensional layouts which basically almost all websites consist of secondly as you'll see it'll make your markup significantly simpler it'll also give you a lot more flexibility when it comes to changing the layouts for example through responsiveness and it'll also enable you to actually skip frameworks like for example bootstrap and finally css grid is now supported by all the major browsers and the support amongst global website traffic is climbing quickly to learn exactly how many percent at the time you're watching this screencast check out this url here now let's kick off the course by looking at the benefits css grid has over a framework like bootstrap here we have created two mockups for a website this one is done using css grid and this one down here is done using bootstrap the layout contains a header a menu content and footer the markup is found in the examples.html here you can see the html for the bootstrap example and here we have the html for the grid example and we can instantly see that the css grid markup is significantly simpler than the bootstrap markup because gone are all the unnecessary row items and the ugly class names so as i mentioned css grid will make your markup cleaner benefit which of course would become much more apparent if we were to turn these two examples into fullblown websites however this of course doesn't tell the whole story as the grid example of course needs css which you can see here in the examples.css here is the css needed to create our grid example conceptually what's happening here is that instead of trying to define the layout which is the columns and the rows in the html we're rather defining everything in the css and this brings us to our next benefit which is that this separation gives you a lot more flexibility let's say that you for example want the menu here to appear up besides the header when it's being viewed on mobile to make this happen in our css grid example we simply create a media query and then we target the items which we want to change according to the new layout which is the header the menu and the content and then simply give these their new values and the result is that when we shrink the page and if you look at this css grid example you can see that boom there the menu item jumped up to the top row the header moves all the way to the right and the content took up the entire second row we can change back boom like that now if we were to try this in bootstrap we'd quickly realize the downside of having the layout defined in the html because what you want to do here is to make this menu item jump up to the first row up here however that's not trivial because the menu item is already trapped in the second row down here and in order to move it up to the first row we actually have to change our markup we have to cut away this element down here and paste it in up here that's not something you can do based upon a simple media query in css you can of course do it in javascript but that's hacky and more complex so what you want to do instead is learn css grid and i'm going to teach you that in this course so just sit tight and we'll start the next lecture right away hey in this screencast you're going to learn how to create grids through defining its rows and columns a grid consists of two main elements there's the container which we have here and then there's the items which are the elements inside the container in our case six divs which display the numbers from one to six now without any grid layout this results in six divs stacked on top of each other i've also given them a little bit of styling but that has nothing to do with the grid layout itself to turn this container into a grid we're going to target it and give it a display of grid if we run the code that won't result in any layout change yet because we haven't defined how we want our grid to look like so by default it only has one column and thereby it looks like we've just stacked six divs on top of each other in order to specify the columns we'll give the container a grid template columns will define how many columns and how wide we want them to be let's set the first one to a hundred pixels the second one to auto and the third one 200 pixels as well auto in this case means that the column will take up whatever remaining space there is in the width let's also give the grid a couple of rows with template rows and let's give both of them a height of 50 pixels so in the grid template columns property you define the width of the columns and in the grid template rows you define the height of the rows and as you can see we have a nice little grid here as expected it contains three columns going from top to bottom one two three and two rows going from left to right one two since the second column here is set to auto this grid is also responsive in order to make the grid look a little bit nicer i want to give it a grid gap property and set it to three pixels as you can see that gives a nice little gap between the items now let's say we don't want our grid to be three columns wide and two rows long but rather two columns wide and three rows long then we simply need to remove a column we can remove this last one here for example and add a row 200 pixels down here if we run the code you can see that we have a completely different grid two columns one two and three rows one two three the two first rows are 50 pixels tall however the third one is 200 pixels and the grid is still responsive as the second column is set to auto so in the next screencast i'm going to show you a few more ways of setting these values inside the template columns and grid template rows but before we jump on to do that i would recommend you to jump into the code here and play around with the values so that you're 100 sure that you understand the relation between what's going on here in the css and how that plays out in the simulator over here so go ahead and do that and i'll see you in the next screencast hey there in this screencast i'm going to teach you a better and more powerful way of defining columns and rows as you can see we're now working in the index.css file and not directly in the html file that's because doing it in the index.css gives us the benefits of automatic updates in the browser window so we have this very simple grid here which you probably recognize from the previous cast it got three columns the first one being 100 pixels wide the second being auto and the third is set to 100 pixels as well so this grid is responsive as the second column grows and shrinks with the width of the container we also have two rows which are 50 pixels each now the first thing we're going to do is change the responsiveness of the grid because let's say that we want all three columns to grow in size as the container grows in size we want them to be equal regardless of the width in order to achieve that i'm going to teach you a new value which css grid brings with it it's called fraction unit and it's written like this one fr let's set all three columns to be one fraction unit each we'll do one fr for the second one and for the third one and now as you can see they all grow and shrink equally so what happens here is that the grid splits the entire width into three fractions and each of the columns take up one fraction unit so if we change the second one here to two fraction units you can see that it'll always be twice as wide as the first and third column because now the grid has split the entire width into four fraction units and the second one takes up two of those while the first and third column take up one each okay so let's go back to having each of the columns equally wide in this case we could actually write this in a simpler way we could do repeat times one fraction units as you can see it gives the exact same result so the first parameter of the repeat function is the amount of rows or columns and the second one is the value which is the height or the width of the rows or columns so let's say we want six columns instead then we can simply change this number here to six instead and as you can see now our six items fill up only one row as we have six columns and six items in this grid so let's go back to three we can also do the same with the rows of course it two times 50 pixels finally i also want to show you a simpler way of defining the rows and columns because we can use the shorthand method for this so i'm going to copy the rows value here and remove that line and also remove the dash columns i'm going to paste in the rose value forward slash and then let the column value come after that and that'll give the exact same result so grid template is the shorthand method for grid template columns and grid template rows and it can be a bit hard to remember which one of rows or columns goes first and which one goes last and the rule i use to remember this is to think of it as drawing an l you start at the top and go downwards across the rows and then you go to the right across the columns start with the rows and then the columns so in the next screencast you're going to learn how to adjust the size and position of the items in the grid so stay tuned and i'll see you there hey in this screencast you're going to learn how to adjust the position and size of the items on the grid which is critical to know in order to create realworld websites with css grid we're going to create a mockup for website and here in the index.html you can see the markup for that as you can see we're targeting each of the items using a class name header menu content and footer to start with we have this 2x2 grid each of the columns are one fraction unit so they're responsive as you can see and each of the rows are 40 pixels tall for our website though we're going to need three rows as we want the header to take up the top row the menu and the content to be on the second row and the footer to be on the third row all the way at the bottom so let's create a third row here let's place it in between the two existing rows and give it a height of 200 pixels as you can see now the header head render menu is on the top row and the content on the footer in the second row and our third row is blank as we haven't filled it with content yet since our items only take up the first four grid cells so let's change that we'll start by targeting the header and making it span from the left hand side all the way over to the far right hand side to achieve that we need to head into the dot header and give it a grid column start set that to 1 and also give it a grid column end at three as you can see now the header spans across the entire first row and what we're saying here is that we want the header to start at the first column line and end at the third column line and you might wonder why we have three column lines when we only have defined two columns well that's because the first column line goes from top to bottom on the left side of the grid the second column line is the one that separates the two columns and the third is the one that goes from top to bottom on the far right hand side of the grid so when you have two columns you have three column lines and you can write that like this alternatively though we can also use the shorthand method which i prefer let's remove this line here and also remove dash start and rather do one forward slash three as you can see that gives the exact same result let's also do the exact same thing with the footer like that now the footer also spans across the entire width alternatively we could have written this in a different way we could have done we could have done one forward slash span two that'll give the exact same result what we're here saying is that we want the footer to start at the first column line and span across two columns and finally there's also a third way which is to write 1 that'll target the very last column line now that we know that we want our footer and header to span all the way to the last column line we can do that with both of them and take the advantage of the fact that in the future we might not know how many columns we're going to have in this grid as we can change that however we want so this is a nice little trick when you don't know exactly how many columns the item will span across in the grid and to prove that point for you i'm actually going to change the amount of columns we have in the grid right now because we don't want the menu here and the content to take up an equal amount of space in the width that doesn't make sense we want the menu to be a narrow sidebar on the left hand side here and we want the content to take up much more space now we could do this without adding more columns by simply doing one fr for fr for example now you can see that the content takes up much more space since the second column is four fraction units and the first column is only one fraction unit however this is not a very flexible way of doing it because now we're still stuck with two columns on a website layout and you normally want a lot more columns than that in order to have the flexibility to shuffle around and change the content so what i'm going to do instead is use repeat give it 12 columns each of one fraction unit now the menu and the content take up one fraction unit each in other words one column each and they're actually forcing the columns to be as wide as they need in order to display their content which is the two descriptions we've added inside items in order to make this look nice again i'm going to head into the content class and give it a grid column we know that it starts on the second column line two and we want it to go all the way final column line like that so we're gonna do minus one and now we have a 12 column layout instead of a two column layout meaning that we have much more flexibility if we want to shuffle around on stuff and notice that the footer and the header still spans across the entire width which is solely because we're using the minus one here if we had stuck with the three here and here that wouldn't have worked at all so let's change it back to 1 now let's also look at the grid row property as we're going to need that if we for example want the menu here to span all the way to the top in order to do that we first have to change the header though as we need to make the space here available this little grid cell here needs to be available for the menu so we'll change it to two now we have a blank cell here meaning that we can head into the menu class and give it a grid row and set that to one slash three meaning that it spans from the first row line to the third row line as you can see took up the spot here in the top left corner because this is the first row line this is the second and here is the third the fourth then is of course the the bottom line okay so before we jump on to the next screencast i would recommend you to for example try to make the menu span all the way to the bottom or alternatively make it appear on the right hand side instead of on the left hand side then in the next screencast i'm going to show you a really cool way of defining layouts which gives you a lot of flexibility in terms of shuffling around on the content and experimenting so stay tuned and i'll see you there hey in this screencast you're going to learn a really cool feature of css grid called template areas which allows you to change an experiment with layouts much more easily than with the techniques you learned in the previous cost this feature is ideal for creating prototypes of layouts quickly we're using more or less the same example from the previous screencast our grid has 12 columns and 3 rows the columns are just as they were in the previous screencast however for the rows i've changed the second one from 200 pixels to auto that means it'll take up whatever available space there is left in the height and combining that with setting the height of the grid container itself to a hundred percent this will result in the grid being responsive in the height as well as you can see if we make it taller the second row grows with the grid now we're still using the grid column property to adjust the position and size of the items what we rather want to do in this screencast is use something called grid area and to be able to do that we're going to have to give the container a grid template areas property and the syntax you're about to see now might seem a bit weird it'll be a visual representation of the grid and the way it works is that we'll create a string for each of the rows and in those strings we'll create a cell for each of the columns so let's add the letter h 12 times in the first string we have to give it exactly 12 characters that has to match the amount of columns so we're not actually defining the columns or rows here we've already done that up here we're just naming them so that we can refer them using these names later on in the second row we'll add one m and 11 c's like that in the third row we'll add 12 f's what you have here is a visual representation of how we want our grid to look like and as you might have understood the age m c and f refer to header menu content and footer so now let's remove the old way of positioning the items like that and build up the grid over again we'll give the header a grid area of age as you can see as a result the header takes up the entire top row just as we've defined here we'll give the menu a grid area of m content grid area c footer grid area of f as you can see our layout is just the way we want it to be and it's responsive now the reason this technique is brilliant for creating mockups is because now i want to make the menu span all the way to the top like we did in the previous screencast we can just replace this age here with an m and as you can see automatically the menu popped up to the top if you want to make it span all the way to the bottom let's do the same thing here as well and just as easy as that we have changed layout without having to fiddle around with the values in the item classes you can also use dots which will result in blank cells like that there there and there and now we have this weird experimental layout where all the corners are blank now one thing you need to be aware of is that the areas will only be valid if they are rectangled try and match this to an f so that the f footer goes like that and then up you can see it breaks the entire layout so you have to use rectangles as you understand this is a super simple way of experimenting with the layout so i'd recommend you to play around with these values here so that you make sure that you properly understand it and once you've done that you have finished the first section of this course so congratulations you now know quite a lot about cs grid however there's still a lot of stuff to learn so in the next section i'm going to teach you some more advanced stuff and we're going to create even more responsive grids that'll be super cool so i'll see you there hey and welcome to the second section in this css grid course in it you're going to learn more advanced concepts you've already learned about responsiveness but now we're going to take that to a new level so here we have the setup for a grid which you can see in the browser window as well it's got six columns and two rows and that's defined here and should be pretty basic to you by now both the columns and rows have a value of 100 pixels in width and height so this grid is not responsive now as you can see but we know from previous cost that we can turn it into responsive grid by doing one fr instead now the columns will grow and shrink with the width of the container however you wouldn't necessarily always want your columns to be six like now they're very squeezed together and at this point they're suddenly very wide what you perhaps rather want to do is for example only have two in with when the example is being viewed on a mobile and six in width when it's viewed on a normal screen so let's make the amount of columns vary with the width of the container we'll first go back to having 100 pixels here instead and then rather than hard coding in six columns we're going to use something called auto fit now what will happen is that it'll vary the amount of columns with the width of the grid as you can see it simply tries to fit as many columns as possible into the container and when it gets 100 pixels extra space on the right hand side it'll boom add a new one so on a very narrow screen it'll only show a couple of columns however this doesn't give us the responsiveness we want as the amount of hundred pixel columns rarely add up exactly to the width of the container then we get a situation like this here where we have quite a lot of space left on the right hand side though not enough to add a new column that doesn't look nice now you might think that we could rather do autofit 1fr however that'll only give us one column because autofit tries to fill up the grid with as many columns as possible until there's not enough space to add a new column so when you use fraction unit it starts by adding one column however then all the width is used up immediately because at that point both the width of the entire container and the first column are set to one fraction unit so to get the behavior we want we're going to use something called min max and we'll set our columns to be minimum 100 pixels maximum one fraction unit now you'll see that the columns will always fit the entire grid regardless of whether or not the container exactly adds up to 100 pixels so what happens here is that the columns will always be at least 100 pixels but if there's more available space it'll simply distribute that equally across all the columns so now they are more or less 100 pixels if we make the page a little bit wider you can see that it stretches all of the columns so now the width of the container is something like 550 pixels or something however when it reaches 600 pixels there it uses the minimum size for the columns so that it can fit in six columns so it prefers to use the minimum however when it doesn't add up to exactly 500 or 600 pixels it uses one fraction unit instead so now we also get a nice view on mobile like that and a nice view on a very wide screen okay so in the next screencast i'm going to tell you about implicit rows so stay tuned and i'll see you there hey in this screencast we're going to continue with the grid from the previous one as it still has an issue we need to fix because if we make this grid narrow like this and have a look at the rows that are created beneath the two rows we defined we'll see that they're not acting the way we want them to they're not 100 pixels in height which we defined here they're only as tall as the content inside of them force them to be and that's because they are implicitly created because as you can see here we only explicitly created two rows however with our current defined behavior for the columns we are going to need somewhere to place these items which can't fit in our explicit grid up here so from five and onwards we need to create new rows automatically in order to display our items and as we haven't told our grid how we want to style rows that it has to add to the grid itself it just has to decide for itself how these rows are going to look so let's fix this because we can target these rows by simply doing grid auto rows and set the value to 100 pixels now as you can see they're just how we want them to be you can see that as well grows and shrinks nicely with all rows always being 100 pixels tall and now that we've defined this one we can actually get rid of this one like that now all rows will be created implicitly and they'll always be 100 pixels tall so in the next screencast we're going to tie all the concepts you've learned up until now together and create a super cool image grid so i'm looking forward to see you there hey and welcome to the final screencast of the second section here we're going to take what you've learned up until now and use it to create really cool image grid i've already created the setup we're using the technique for responsiveness which we talked about previously using autofit in combination with min max which gives us a nice responsive grid that varies the amount of columns and the rows are implicitly created and are 75 pixels tall in the index.html you can see that i've added an image to each of the items in the grid that's of course the images you can see here and this is already i'd say a pretty cool grid however not all of these images fit the frame they're given equally well some of them might be more horizontal while other images might be more vertical i also have a few favorites which i think deserve a little bit of extra attention you can see that i've actually given some of these item classes like vertical horizontal and big these are the images which i don't think fit well into only one grid cell so let's go ahead and make the horizontal images twice as wide we'll head over to the css to the horizontal class and we'll set the grid column property now previously we do something like 1 that's the starting value and then for example to span two so that they'd span across two columns however as you can see that'll force all the horizontal images which is this one and this one for example to start on the first column line if we enlarge the grid you'll see that they'll but they'll still stick to the first grid column line which amongst other things leaves open spaces in the grid which is something we're going to talk about later on so what we rather want to do is swap out this one here with auto now you can see they start on whatever column line they were given initially this one starts here and these two now happen to start on the first column line but if we change the width you can see that the horizontal images start on various grid lines and not just one what we actually also can do here is remove this entirely and just do grid column span 2. so the grid column and grid row properties can take a lot of different values and combinations and at this point this is the simplest we can do however i wanted to show you the various alternatives okay now let's do the same thing with the vertical images the ones we want to make taller than the rest of the images so here we'll use grid row and set that to span 2. as you can see this one and this one they're now taller than all the others and now we've gotten a few blank cells throughout the grid and we're going to talk about that in a minute however let's first make the big images the ones we want to highlight twice as tall and twice as wide as the normal images grid column and two and grid row span two now you can see this image here and this one here and this one here are really getting the attention they deserve but we need to fix these blank spots here because that doesn't look nice so why do these blank spots appear to understand that let's look at how the grid lays out each of the items starts up here in the top left corner lays out the first item second third fourth fifth and then it needs to continue on the next row which is here and it tries to fit in the sixth image however when it's about to lay out that one it can't fit it as it only has one grid cell available here however the sixth item is a big one it's this one here let's double check that in the html one two three four five six and that is indeed a big item so what it then does is that it continues on looking at the next cell that's already taken so it jumps onto the next cell again and here it actually has enough space to lay out the big item and then it simply continues laying out the next item here here and then one here leaving that spot here blank wouldn't it be great if we somehow could fill these spots well we can and to do that we're going to use a property called grid auto flow it's by default set to row meaning that it'll lay out the items one row at a time just as we talked about starting here and going across the first row and then jumping next to the second row and continuing on like that however if we set it to dense we'll use socalled dense packing algorithm which attempts to fill the holes in the grid if there are holes in the grid and smaller items come up later then it'll move those up to fill the blank spaces so if we go back to row we see that this space is blank and the next item in the grid which could potentially fit in here would be not this one the sixth item but the seventh item of the waterfall here so let's look at what happens when we change the dense and indeed the waterfall image has now jumped back to this position and filled that hole and this works regardless of how wide the screen is as you can see we have a super cool image grid now which looks really hard to create actually however we've done it simply using these 20 lines of css and finally i want to mention that this dense feature here is an example of source order independence which is a huge win for css it means that the grid can arrange the items regardless of how they're laid out in the markup here we simply use the markup for what it's supposed to be used for markup for content and we're using the css for what it's supposed to be used for styling and we're not limited to whatever order we laid out the images initially so source order independence gives you a lot of flexibility so this marks the end of this section you now know quite a lot about building advanced css grid layouts however be sure to check out the bonus material if you're hungry to learn even more thank you hey in this screencast you're going to learn a new way of positioning and sizing the items on the grid using something called named lines so we've defined our normal grid here which is the website layout you should be familiar with by now though in this case we're defining it in the very simple way of only having two columns one being one fraction unit and one being five fraction units so we're not using the flexible 12 column layout here as this setup makes it easier when using named lines so to brush up a little bit the grid has column lines and row lines the first column line is the one on the left hand side the second one is the one separating the two columns and the third one is the one on the far right hand side and our content item for example is defined to span from the second row line to the third row line from here to here in our code that will be from the line that goes in between here and until the line that goes here so what we now can do is we can add a square bracket in between write content start for example and on the third line and write content and like that now what we can do is we can swap out the number two here with content start and the number three with punch and end like that and as you can see that works fine if we wanted to do the same thing for the header we'd have to give a name to the first line as well up here let's call that main start so now the header spans from main start to content end however i actually want to call this line main end as well because there might be a case in the future where we want to reference the main end explicitly not use content end as a proxy for it so so let's just add a new name here main end like that just give it a space and then the new name now we can do main art main end as you can see works perfectly fine the footer can get the exact same layout like that now let's also name the rows using the exact same convention we'll do main start i'm just going to copy them under and start end and main end like that now you might wonder why we've been using this dash syntax here and that's because they give you a little bit of magic now given that we've called this line here for content start and this line here for content end the grid knows that this is the content column or columns if that was the case so you can actually set the grid column to just content like that and as you can see it works now the header and the footer spans from main start to main end so we can do the exact same thing there as well just use grid column main and to take this even a step further actually we can also use grid area in one of these cases that'll be in the content case because let's have a look at the content lines both the row lines and the column lines so we know we have the content start here and the content end here though we also have a content start here the second row line first second so this one here and we have a content end on the third row line the third one here meaning we have boxed in an area with content lines here here here here and here and now we can actually use grid area which you which you might remember from section one of this course by simply doing grid area and set it to content like that and it still works however you might be tempted to try and do the same thing down on the footer though that wouldn't work because it has to be boxed in by four main lines though the main start row line is the one that starts up here not down here above the footer so here we have only kind of boxed it partially in we have the main start column line here which is the start of the footer and the main end row line which is the bottom of the footer and the main end column line which is the right hand side of the footer though the top of the footer is the content end line so we can't use grid area main here as you can see it breaks the entire layout so be careful and make sure that you have properly boxed in an area before you start using grid area okay that was it for this bonus screencast thank you hey in this screencast i'm going to show you how to justify and align the entire content of a grid i've added here a black border around the grid container so that we can see its edges we've also made sure that the grid is fully responsive and that there's a little bit of space around it so right now our grid items only occupy a tiny part of the entire grid container and that's important in order to learn about justifying and aligning the content so let's start with the justification which defines and distributes space between and round the items along the row axis from left to right so if we set justify content and set that to end as you can see that'll shuffle all the content over to the right hand side to the end of that axis the row axis the default value here was start you can also do center like that that'll center it along the row axis so let's combine this with a line content as well and do end for example i'll push all the content down to the lower end of the grid because aligning controls the content along the column axis the vertical one which goes from top to bottom if we do center here as well we'll fully center the items in the grid now let's comment out this one and have a look at the other values you can use here because there's a couple of cool ones if we for example want a lot of space in between the items we can do space queen now we have as much space as possible in between the items along the row axis we can also do space evenly like that which distributes the items evenly throughout the row axis so the items have an equal amount of space around them finally there's also the space round this one is pretty similar to space evenly though each of the items have a half size space on either end meaning that if you have two items besides each other that'll give a full size space between them though here in between the first column line and the first item you only have a half space as this item forces a half space on this side though the grid line itself doesn't force the grid to create any space for it though in between these two both of the items forced the grid to add a half space in between them resulting resulting in full size space so that was the basics of justifying and aligning the content thank you hey in this screencast i'll teach you how to justify and align the items on the grid so here we have our classic website layout it contains 12 columns in the width each are one fraction unit and three rows where the second one is auto so this grid is responsive in both width and height as you can see we have defined the width of each of the items using the grid column value so for the header for example we're saying start at the first column line which is this one and end at the last one which is this one over on the right hand side so it's kind of stretching from the start point to the end point and this axis here the row axis is the one you control with justification so if we do so if we do justify items that'll be by default set to scratch however if we for example want each of the items to rather center itself as much as possible and not stretch all the way from the left hand side to the right hand side we can use center as you can see now each of the items are centered at as much as possible you can also use start that'll squeeze all of them towards the left hand side and end is the opposite of this that'll squeeze all the items to the right hand side now let's comment out this a little bit and use the line items property that'll do the same thing though along the column axis so the vertical axis from top to bottom so if we do center here you can see that each of the items are now squeezed together towards the center though not on the left to right row axis but on the top to bottom column axis we can do end that'll squeeze all them to the bottom or start that'll squeeze them towards the top now let's do center again and combine this with center here now all the items just a tiny rectangle in the center of the grid cells which are originally occupied fully now i have no idea why you'd want to create a website layout like this it's really weird but that's besides the point of this screencast finally let's finally let's comment out these two get back to the original layout and look at how you can do the same thing though only targeting one of the items let's head into the content for example then you can use just justify self and do center and now only the content is entered you align off as well undo end and now the content is squeezed down to this tiny little box in the bottom center of the huge space it originally occupied a little bit sad actually to see the content to see the content being turned into a shadow of itself like that so let's give it back its original space like that okay so that was it i hope you learned something and feel free to play around with this yourself thank you hey in this screencast i'm going to explain the difference between autofit and autofill so here we have two different grids using one or the other you can see them on the page here and i'm assuming that you understand the basics of this complicated expression here where we're basically repeating with autofit as many columns as we can fit into the grid given these constraints here they should be minimum 100 pixels and maximum one fraction unit and that as you probably remember from the screencast in the second section will give a nice responsive behavior where the amount of columns grows with the size of the grid like this if we enlarge in this page boom there the grid crossed the 300 pixel threshold meaning it could fit three columns in instead of two and as we make it more wide the columns become one fraction unit until it reaches the next threshold which is 400 pixels and boom then autofit and auto fill adds another column to the grid since we now can fit 400 pixel columns into the grid however there's a slight difference between the two and that'll be apparent if we try to enlarge the grid even more like this now but you can see that auto fill actually added a fifth column even though we don't have a fifth element to add there whereas autofit made sure that the four items we have actually fit the grid now under the hood what's happening here is actually that both of them add new column tracks though autofit actually collapses those new columns to zero pixels in width so that the current items you have in the grid when defined like this with a maximum size of one fraction unit actually will fit to the grid regardless whereas auto fill at every 100 threshold like there and there and there it'll add new column tracks which basically are empty so that was the difference between autofit and autofill in this example i will show you how you can use css grids to create an article layout so in this example i have a plain article that i've written i wrote it originally in markdown and then i generated this html using a markdown compiler so it's not so it's pretty nice it has ul's it has some piece and there's a div here for the code highlighting and a fixture a figure tag for the image and just basic html and i'm just going to go straight ahead and turn this into grid and then i will explain what i'm trying to accomplish with that so oh it looks now we have a grid which is very funky move everything where i want it i want them to be and there we go so now i've defined the grid which has three columns there's the first column that's 80 pixels then there's a main column that takes one fraction of the space and then there's the right column that takes 80 pixels and i have this rule here which says that every element inside the article should start at the grid column line number two so remember that the grid column line one goes down here two goes down here then we have three over here and four over there and by setting grid column 2 we say that every element should start in this column and we need to set the min width to 0 to actually allow it to shrink if we don't set this you will see that it goes all the way over there now right now this is just a way of adding some spaces on the side but since this is a grid we can now do some things very easily since i now want this figure take the whole width and that was all and let's add some space on top of it right so what did we do here i set the grid column to start at line one and end at line minus one which is the last one so this is the way i was saying make the element take the whole width and this is just radically simple then any other way to accomplish the same thing if you don't have a css grid you end up having to say that these elements here should have a margin and standard margin and this should not you need to cancel out the margin you set by default and often this is very tricky because you often end up having to have custom html uh just to handle where things should when they should be narrow and when they should be white and it's can be really tricky deciding where to put things so another thing that we can do is to add another element i'm going to call it aside and here i'm going to just write some texts includes so now we have this new paragraph over here and now i can style it and now i want to style it like this i want to say it in the third column i want it to have like a gray color and like that and smaller font size this seems like a good time to add gap spacing between so yeah and if i wanted to be on the left side i can just set it to grid comes three one and trust me if you're trying to do this without a grid it's it's so hacky uh i can't even begin to think like because you have this element here which originally has a margin and then maybe if you put both of these elements inside the same div maybe you can do like position absolute and set left 100 or something yeah i don't know i don't really know this is just something i don't know a clean way of doing in plain css uh and especially not in the way where you can have no changes in the html basically now there is one thing you need to know and that is this is actually a separate grid so this is becoming a grid row that goes here and this is a separate grid row and this has the consequence that you often end up with this spaces you might in this case want this space to be gone and then this text to go down further to the right side of the header but that's currently not possible with css grid that's just a limitation that you can't really avoid and whether it's good or bad i don't really know in this case i don't think it's that bad because this paragraph belongs with this paragraph and here we have a header which starts a completely new section so it's not that big of a problem but if we had like another paragraph over here it can be a bit confusing that you have these big spaces which isn't quite optimal but other than that i find that using css grid for this type of article layout makes the the html much cleaner you can basically just take the output from a markdown parser and dump it straight in you don't need to do anything special to support either having things in the left column or the right column or in in full width and the styling itself it's 20 lines and even here i haven't touched anything like block quotes but here's the quote maybe you also want that to be in the full width oh we should remove the margin at the side and maybe we want to set a color once again and maybe like border to the left is cool thing as well and notice that i can just add padding add borders i just set the column to be from one to minus one and everything works i don't need to worry about negative margins or or or knowing what the wind of this column is so now if i want to set the left column to be 17 instead or maybe 40 and the right column to be 40 that works perfectly fine and all is just very very good thanks hey in this screencast i'm going to talk about the difference between flexbox and grid and i'm also going to show you how you can use the two together so we have a header here which is built using flexbox and a page layout which is built using css grid here is the html for the grid example and the html for the flexbox example and the css is located in the index.css file here and we're going to look at this code in a minute however let's first look at the examples themselves because you might actually be able to guess the main difference between flexbox and grid just by looking at these two examples because flexbox is built for one dimensional layout like this one it goes in one direction from left to right being just a single row whereas css grid is built for two dimensional layouts like this page here it has three rows the top one the middle one and the bottom one that actually has 12 columns though we can only see two of them visually here due to how we've laid out the items so if you're going to create layout which has a direction either row or column then use flexbox it's great for aligning content within that container and gives you a lot of flexibility however if you're going to create a more overall layout with both rows and columns then you should definitely use css grid as it'll give you much more flexibility and simpler markup than if you were to for example try to use flexbox to create twodimensional layouts okay there's also another overall difference which is that flexbox takes basis in the content it's so called content first whereas grid is layout first it takes spaces in the layout now this might seem a little bit abstract so let's look into the code because that'll make it a bit more clear so the flexbox header here is turned into a flexible box by simply giving it a display flex we don't have to do anything else we then let the content make most of the decisions of where they're going to be placed throughout the container for example you can see the third child here the log out element simply adds a margin to its left hand side and thereby shoving itself all the way to the end of the container now let's look at how we create our grid layout first of all we can't just simply give it a display grid and then start shoving content into the container no we also have to define either columns or rows or both as we're doing here we're giving it 12 columns each being a fraction unit wide and three rows and just by doing this you can understand that grid to a larger degree takes basis in the layout first you're constrained by the layout you define here whereas we could have added as many items in the width on this single row in our header here we're now constrained with 12 columns in our grid example here and also we need to place the elements according to the layout for example this menu item here this one which you can see on the left hand side here we're not placing it here by giving it a margin on its right hand side like we do on the log out we're taking bases in the layout and saying that we wanted to span from the first column line to the second column line and thereby it places itself how we want this layout first versus content first is a bit abstract and it's not something you think about when you develop though it's nice to be aware of it so finally let's actually combine the two because that's what you want to do you want to combine css grid with flexbox and then get the best of both worlds so now what we're going to do we're going to take this header here move it down into our age layout so let's head over to the html and take the three elements here copy them and add them here like that so what we now will do is we'll turn the header here into a flexbox giving it a display of flex now let's run this code as you can see we have the items laid out like this what we now can do is we can use for example justify content do for example space evenly like that as you can see they change accordingly however let's do what we did in the flexbox layout target the third child log out button margin left arrow as easy as that you've combined css grid with flexbox now this header here this item in the grid container is actually a flex container itself which then again has three items within itself so i hope you learned something from this and that you'll start using grid and flexbox together from now on thank you
