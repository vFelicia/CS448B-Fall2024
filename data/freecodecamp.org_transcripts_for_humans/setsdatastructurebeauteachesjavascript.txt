With timestamps:

00:00 - the set data structure is kind of like
00:02 - an array except there are no duplicate
00:05 - items and the values are not in any
00:07 - particular order the typical use for a
00:10 - set is to simply check for the presence
00:12 - of an item
00:14 - i'm going to show you how to implement a
00:15 - set function es6 actually has a built-in
00:17 - set object
00:19 - however the built-in set objects does
00:22 - not contain all the methods that are
00:24 - common to sets so you may still have to
00:27 - implement part of the set yourself
00:30 - depending on what you're going to use it
00:31 - for when i show you the implementation
00:33 - for the set i will tell you which
00:35 - methods are part of the es6 set and
00:37 - which are not
00:39 - so we're just going to go through this
00:40 - code we're going to call it my set now
00:42 - we could call it set but i want to make
00:45 - it different than the the es6 set so
00:47 - this is my set so here's just the
00:49 - collection the set is going to be a
00:50 - collection of items and we're going to
00:52 - store them in an array which an array
00:54 - can have duplicate items but we're going
00:56 - to implement this in such a way that you
00:58 - cannot add duplicate items to this array
01:00 - this method the method has is going to
01:03 - check for the presence of an element and
01:04 - then return true or false so you're
01:06 - going to pass in the element and it's
01:08 - going to do collection.index of element
01:12 - is not negative one so if the element is
01:15 - not in the collection it's going to
01:17 - return negative one so if it doesn't
01:21 - return negative one it's true so if it's
01:23 - not negative one it's true that means
01:25 - the element is in the array else it's
01:28 - false now we have the values this is
01:30 - going to return all the values of the
01:32 - set pretty straightforward just return
01:34 - the collection now i have add we're
01:36 - going to add an element to this set but
01:38 - first we have to check if the element is
01:40 - in the set already so we're going to
01:42 - call the
01:44 - the method we've already defined the has
01:46 - method and see if the collection has the
01:50 - element
01:51 - if it does not have the element then we
01:52 - can add it we're going to push that
01:54 - element to that
01:55 - collection array and we're going to
01:57 - return true
01:59 - else we're going to return false so if
02:02 - we don't push an element to the
02:04 - collection we're returning false now we
02:06 - have remove this is going to remove an
02:08 - element so first way to check if the
02:11 - element is in in the collection
02:13 - and if it is in the collection we're
02:15 - going to find out what the index of that
02:17 - element is and then we're going to
02:19 - remove it splice is means we're going to
02:21 - take out
02:22 - we're going to take out an element in
02:24 - the array starting at the index of the
02:26 - element and going for one element we're
02:29 - going to take out one element and then
02:31 - we're going to return true or we're
02:33 - going to return false if that element is
02:35 - not in the collection
02:39 - then we're just going to return the size
02:41 - of the collection
02:43 - we're just going to return
02:44 - collection.link
02:45 - every method we've gone through so far
02:48 - is in the es6 implementation of the set
02:51 - so the es6 set has values add
02:55 - remove and size except remove is delete
02:59 - in the ex6
03:01 - set instead of calling remove you're
03:04 - going to call delete but all the other
03:05 - things are included oh another thing is
03:08 - size is not a method in the es6 set size
03:13 - is a property
03:15 - that just means that when you're calling
03:16 - it you're not going to put parentheses
03:18 - at after the the method because it's
03:21 - just a property so you can do set that
03:23 - size instead of set that size with
03:25 - parentheses after it okay now we're
03:27 - going to get into the methods that are
03:29 - not in the es6 implementation of the set
03:32 - but are
03:33 - often included in sets the next few
03:37 - methods actually just help you work with
03:39 - sets and when you're working with two
03:41 - different sets
03:42 - so we have union
03:44 - this method is going to return the union
03:46 - of two sets so it's going to combine the
03:49 - sets but leave out any duplicates in the
03:52 - combination of the sets so we're going
03:54 - to
03:55 - call the union method on the original
03:58 - set and we're going to pass in the other
04:00 - set that we want to combine we're going
04:02 - to create a new set
04:04 - which this should be my set
04:06 - same with down here because we want to
04:09 - make it distinct from the es6 set so we
04:13 - have the the union set which is just a
04:15 - new set that's what we're going to
04:16 - combine the sets into we have the first
04:18 - set which is this.values and the values
04:22 - we're just calling the
04:23 - the values method up here
04:26 - to return the collection
04:30 - and the second set is going to be the
04:32 - other set.values we're going to first
04:34 - set for each and for each value in that
04:37 - set we're going to do unionset.add to
04:39 - add the value then we'll do the same
04:41 - thing second set dot for each and for
04:43 - each value in the second set we're going
04:45 - to add the value remember the add method
04:48 - already does not add the value if it's a
04:50 - duplicate so the union set now will not
04:52 - contain any duplicates and since for the
04:55 - set data structure the order doesn't
04:56 - matter we don't have to have the values
04:58 - in any particular order and then we're
05:00 - going to return the union set
05:03 - now we have intersection which is going
05:05 - to return the intersection of the two
05:07 - sets as a new set
05:09 - so we're going to make a new set here
05:12 - intersection set equals new
05:14 - my set the first set again we're going
05:17 - to call the this that values to get all
05:19 - the values in the first set
05:20 - now for each value in the first set
05:24 - we are going to check if the other set
05:28 - has the value we are going to add it and
05:31 - then we are going to return the
05:33 - intersection set so the intersection is
05:35 - just all the items that are in both sets
05:39 - and that's we're going to return that as
05:41 - a new set and this next function we're
05:44 - also going to have to add them my there
05:46 - so this is the difference
05:48 - so the difference between the set so all
05:51 - the items that are in one set but not
05:54 - the other set
05:56 - so we're gonna create a new set again
05:58 - the different set and again we're gonna
06:00 - get the values of the first set
06:02 - now this is very similar to the
06:04 - intersection we're going to go through
06:06 - each value in the first set
06:08 - and
06:09 - if the other set does not have the value
06:12 - remember up here we were seeing if the
06:13 - other set had the value now we're going
06:15 - to use the not operator the exclamation
06:18 - point to see if the the value is not in
06:22 - the set and we're going to add that to
06:24 - the different set then we'll return
06:27 - the different set and the last method
06:29 - we're going to talk about is the subset
06:32 - and this is going to test if the set is
06:34 - a subset of a different set so it's
06:37 - going to test if the first set
06:40 - is completely contained within the
06:42 - second set so it's just going to return
06:45 - true or false
06:47 - so we're going to pass in the other set
06:50 - we're going to again get all the values
06:52 - of the first set and we're going to call
06:54 - this function first set dot every and
06:57 - what that every method is going to do is
07:00 - going to test whether all the elements
07:02 - in the array pass the test implemented
07:05 - by the provided function so we're going
07:07 - to test if all the elements in the first
07:10 - set
07:11 - will pass this function which is other
07:14 - set dot has value are all the elements
07:17 - in the first set
07:18 - are they in the second set so we're
07:21 - going to see if
07:22 - the first set is a subset of the second
07:25 - set so that's the set data structure and
07:28 - let's quickly just show you some some
07:30 - uses of the set so we have set a is my
07:34 - new my set set b is new my set we're
07:37 - going to add to set a a we're going to
07:39 - add to set b
07:40 - b we're going to set b c we're going to
07:43 - add to set b a and we're going to add to
07:45 - set b
07:46 - d
07:47 - and now we're going to see if set a is a
07:49 - subset of set b
07:51 - so
07:52 - is set a is every item in set a which is
07:55 - actually just the letter a in set b
07:58 - which it is because it's right here
07:59 - let's run that and it should say true
08:02 - let's do some other things
08:05 - okay and this is the set a dot
08:07 - intersection set b is going to return a
08:10 - new set which we are then going to call
08:12 - the values function so we can see all
08:14 - the values in that set
08:17 - and it's just
08:18 - a because the only value that's in both
08:21 - set a and set b
08:23 - is a but we can do a lot of the same
08:26 - things with the built-in set i'm going
08:28 - to copy all this instead of calling this
08:30 - my set we're just going to have set
08:33 - we're going to do set c
08:35 - and set
08:36 - d
08:44 - okay so here's one difference with the
08:46 - es6 set is that when you call the values
08:48 - method instead of returning an array
08:51 - it's going to return
08:52 - an iterator so you can see object set
08:55 - iterator here and then you can still
08:58 - iterate through all the items in the
08:59 - array
09:00 - besides that all the other
09:02 - methods that a set has are very similar
09:05 - to the
09:06 - set that we implemented
09:08 - so we can do set
09:10 - d dot delete
09:13 - now this is instead of remove
09:20 - so we're gonna delete the a and then
09:22 - we're going to console.log and check if
09:25 - set d has a
09:28 - and we can see it's false because it's
09:31 - been deleted
09:36 - and we can also try to add
09:39 - d which is already in the set
09:42 - oh and there is one final thing that's
09:44 - different with the es6 implementation
09:47 - the add method is not going to return
09:49 - true or false
09:51 - whether the the item has been added or
09:53 - not besides adding the item what it's
09:55 - going to return so what it's going to
09:57 - console.log is is the set itself it's
10:00 - not an array of the set it's going to
10:03 - return the full set so if we run that
10:06 - you can see here it's going to return
10:08 - the set which is an object and since
10:11 - it's an object it's not going to show
10:13 - all the different items in the set okay
10:15 - that's the set data structure thanks for
10:17 - watching don't forget to subscribe and
10:20 - remember use your code for good

Cleaned transcript:

the set data structure is kind of like an array except there are no duplicate items and the values are not in any particular order the typical use for a set is to simply check for the presence of an item i'm going to show you how to implement a set function es6 actually has a builtin set object however the builtin set objects does not contain all the methods that are common to sets so you may still have to implement part of the set yourself depending on what you're going to use it for when i show you the implementation for the set i will tell you which methods are part of the es6 set and which are not so we're just going to go through this code we're going to call it my set now we could call it set but i want to make it different than the the es6 set so this is my set so here's just the collection the set is going to be a collection of items and we're going to store them in an array which an array can have duplicate items but we're going to implement this in such a way that you cannot add duplicate items to this array this method the method has is going to check for the presence of an element and then return true or false so you're going to pass in the element and it's going to do collection.index of element is not negative one so if the element is not in the collection it's going to return negative one so if it doesn't return negative one it's true so if it's not negative one it's true that means the element is in the array else it's false now we have the values this is going to return all the values of the set pretty straightforward just return the collection now i have add we're going to add an element to this set but first we have to check if the element is in the set already so we're going to call the the method we've already defined the has method and see if the collection has the element if it does not have the element then we can add it we're going to push that element to that collection array and we're going to return true else we're going to return false so if we don't push an element to the collection we're returning false now we have remove this is going to remove an element so first way to check if the element is in in the collection and if it is in the collection we're going to find out what the index of that element is and then we're going to remove it splice is means we're going to take out we're going to take out an element in the array starting at the index of the element and going for one element we're going to take out one element and then we're going to return true or we're going to return false if that element is not in the collection then we're just going to return the size of the collection we're just going to return collection.link every method we've gone through so far is in the es6 implementation of the set so the es6 set has values add remove and size except remove is delete in the ex6 set instead of calling remove you're going to call delete but all the other things are included oh another thing is size is not a method in the es6 set size is a property that just means that when you're calling it you're not going to put parentheses at after the the method because it's just a property so you can do set that size instead of set that size with parentheses after it okay now we're going to get into the methods that are not in the es6 implementation of the set but are often included in sets the next few methods actually just help you work with sets and when you're working with two different sets so we have union this method is going to return the union of two sets so it's going to combine the sets but leave out any duplicates in the combination of the sets so we're going to call the union method on the original set and we're going to pass in the other set that we want to combine we're going to create a new set which this should be my set same with down here because we want to make it distinct from the es6 set so we have the the union set which is just a new set that's what we're going to combine the sets into we have the first set which is this.values and the values we're just calling the the values method up here to return the collection and the second set is going to be the other set.values we're going to first set for each and for each value in that set we're going to do unionset.add to add the value then we'll do the same thing second set dot for each and for each value in the second set we're going to add the value remember the add method already does not add the value if it's a duplicate so the union set now will not contain any duplicates and since for the set data structure the order doesn't matter we don't have to have the values in any particular order and then we're going to return the union set now we have intersection which is going to return the intersection of the two sets as a new set so we're going to make a new set here intersection set equals new my set the first set again we're going to call the this that values to get all the values in the first set now for each value in the first set we are going to check if the other set has the value we are going to add it and then we are going to return the intersection set so the intersection is just all the items that are in both sets and that's we're going to return that as a new set and this next function we're also going to have to add them my there so this is the difference so the difference between the set so all the items that are in one set but not the other set so we're gonna create a new set again the different set and again we're gonna get the values of the first set now this is very similar to the intersection we're going to go through each value in the first set and if the other set does not have the value remember up here we were seeing if the other set had the value now we're going to use the not operator the exclamation point to see if the the value is not in the set and we're going to add that to the different set then we'll return the different set and the last method we're going to talk about is the subset and this is going to test if the set is a subset of a different set so it's going to test if the first set is completely contained within the second set so it's just going to return true or false so we're going to pass in the other set we're going to again get all the values of the first set and we're going to call this function first set dot every and what that every method is going to do is going to test whether all the elements in the array pass the test implemented by the provided function so we're going to test if all the elements in the first set will pass this function which is other set dot has value are all the elements in the first set are they in the second set so we're going to see if the first set is a subset of the second set so that's the set data structure and let's quickly just show you some some uses of the set so we have set a is my new my set set b is new my set we're going to add to set a a we're going to add to set b b we're going to set b c we're going to add to set b a and we're going to add to set b d and now we're going to see if set a is a subset of set b so is set a is every item in set a which is actually just the letter a in set b which it is because it's right here let's run that and it should say true let's do some other things okay and this is the set a dot intersection set b is going to return a new set which we are then going to call the values function so we can see all the values in that set and it's just a because the only value that's in both set a and set b is a but we can do a lot of the same things with the builtin set i'm going to copy all this instead of calling this my set we're just going to have set we're going to do set c and set d okay so here's one difference with the es6 set is that when you call the values method instead of returning an array it's going to return an iterator so you can see object set iterator here and then you can still iterate through all the items in the array besides that all the other methods that a set has are very similar to the set that we implemented so we can do set d dot delete now this is instead of remove so we're gonna delete the a and then we're going to console.log and check if set d has a and we can see it's false because it's been deleted and we can also try to add d which is already in the set oh and there is one final thing that's different with the es6 implementation the add method is not going to return true or false whether the the item has been added or not besides adding the item what it's going to return so what it's going to console.log is is the set itself it's not an array of the set it's going to return the full set so if we run that you can see here it's going to return the set which is an object and since it's an object it's not going to show all the different items in the set okay that's the set data structure thanks for watching don't forget to subscribe and remember use your code for good
