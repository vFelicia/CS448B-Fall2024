With timestamps:

00:20 - awesome
00:21 - yo we're live again
00:23 - all right let's do this
00:26 - let me just twitter verse this and we'll
00:29 - get right back into it
00:41 - technical difficult
00:44 - these
00:46 - have been
00:47 - conquered that's how you spell that
00:50 - come join me live
00:59 - all right guys we're gonna get
01:01 - right back into it here guarantee it
01:06 - um
01:08 - i just gotta find the link to the video
01:12 - so i can share it a little bit here we
01:14 - go we're going again guys
01:17 - isn't that just great
01:20 - thank you quincy
01:26 - cool
01:28 - all right i'm going to give give it a
01:31 - few minutes just so i can get some
01:32 - people in here
01:34 - and then i'm going to get right back
01:35 - into coding because um
01:37 - this has been quite a bit of technical
01:39 - difficulties we got a mix of hardware we
01:42 - got some software we needed to you know
01:45 - fix some
01:46 - uh
01:47 - settings and things but
01:49 - now we're totally rocking it
01:52 - right
01:53 - with that i'm gonna do a little pop out
01:55 - the chat
01:57 - and then i'll knock you away
02:05 - get ready you cool got that there
02:10 - all right well
02:13 - so hello again to anyone who has joined
02:16 - us
02:17 - again uh two two hours later but we're
02:21 - rocking and rolling um i'm gonna go for
02:23 - a little bit longer until basically we
02:25 - get through as much as we can um
02:28 - so yeah to get right back into it uh i'm
02:31 - gonna restart
02:33 - the
02:34 - my dev tools here so we got the we've
02:36 - got mongodb running which is where all
02:39 - the challenges are stored
02:41 - and then we're going to go back over to
02:42 - the gulp profile run gulp so we have
02:45 - that thing building
02:48 - and then to give a brief overview of
02:50 - what we're all looking at i have
02:53 - my
02:54 - vs code editor which is running a
02:57 - terminal inside of it which is really
02:59 - awesome the code is right here for the
03:00 - es6 challenges
03:02 - then i have the github account um my
03:05 - github that i use to track my
03:08 - changes as well as the
03:11 - actual website you know the challenges
03:13 - itself what is being rendered onto
03:14 - screen
03:15 - um before
03:17 - uh the technical difficulties we
03:19 - completed the 11th challenge so we'll
03:22 - actually be able to update that here
03:24 - um actually no we won't update because
03:26 - we haven't done a pull request basically
03:28 - today every five that i do i'm going to
03:30 - do a pull request and i'll probably just
03:32 - keep a tally on a note card
03:35 - just for simplicity's sake
03:37 - that way i can keep track of what we're
03:39 - doing
03:40 - so we've done number 11 which is the
03:42 - first
03:43 - and let's move right into the next one
03:46 - great okay so
03:48 - use the spread operator to evaluate
03:50 - arrays in place
03:52 - introduces a spread operator which
03:54 - allows us to expand arrays and other
03:55 - expressions in places where multiple
03:57 - parameters or elements are expected the
03:59 - es5 code below uses apply to compute the
04:02 - maximum value in array
04:06 - returns 89 math.max.apply
04:09 - null and then the array
04:11 - we had to use
04:13 - null comma array because math.max array
04:16 - returns not a number math.max expects
04:19 - comma separated arguments not an array
04:22 - the spread operator makes this syntax
04:23 - much better to read and maintain
04:26 - okay it's unpacked array in other words
04:29 - it spreads it out yep all right
04:32 - only works in place like in an argument
04:34 - to a function or in an array literal the
04:36 - following code does not work
04:39 - copy all the contents in array one into
04:40 - another array array two using the spread
04:42 - operator
04:44 - oh okay
04:46 - two three
04:47 - array one
04:48 - cool
04:49 - all right so first thing that comes to
04:50 - mind for a challenge like this uh let's
04:53 - see what the test we have tests that
04:54 - array two is a correct copy of array one
04:58 - test that array one has changed
05:01 - and then
05:03 - i guess
05:04 - via part four
05:06 - it's going to be an issue though
05:09 - um because we can't test before and
05:11 - after
05:21 - yes thank you jesse yeah it's been uh we
05:23 - got everything working now
05:25 - we're rocking and rolling all right um
05:28 - test spread operator was used
05:32 - so i think
05:34 - i think i'm not gonna do test array one
05:36 - is changed we're going to remove that
05:38 - one
05:39 - i definitely want to test if they're the
05:41 - same and i want to test the spread
05:42 - operator is used and i think that's all
05:44 - we're going to have to do
05:45 - i don't think that this is
05:48 - oh
05:49 - you don't set it equal to each other i
05:51 - see
05:58 - well then i'll use a set i'll say that
06:00 - everything in array 2 is in array 1
06:03 - meaning that it was a copy of it
06:05 - and then
06:10 - all right push
06:13 - who
06:15 - maybe we'll do instead i think we'll do
06:17 - is in the test itself we'll use
06:19 - something like this and we'll push an
06:21 - element to it and then verify afterwards
06:23 - that array two has not changed um
06:28 - so that is
06:31 - we'll keep this we'll keep this
06:32 - challenge simple
06:34 - um because what we're showing here is
06:36 - we're trying to show that we're just
06:37 - spreading an array in place we're not
06:39 - trying to you know show um
06:42 - every aspect of like
06:44 - assignment and whatnot
06:46 - uh also this needs to get updated
06:48 - because there needs to be a space there
06:49 - okay um another thing i noticed that we
06:52 - don't have
06:54 - the brake line so let's grab that real
06:56 - quick
06:59 - snag that go over here
07:04 - paste it in
07:05 - now we want to i'm going to want to
07:07 - remove this because i don't think this
07:09 - is important
07:11 - for this challenge
07:13 - and of course everything that i'm doing
07:14 - here you know making these changes and
07:16 - what we'll do is we'll propose these
07:17 - changes to the repository and then when
07:19 - someone comes through and says actually
07:21 - i don't agree with that then we can go
07:23 - back and we can add them in but for
07:26 - the purposes of contributing when you're
07:28 - writing code you get to make the
07:30 - decisions and then
07:31 - when you propose and you make a pull
07:33 - request then that's when people can
07:35 - challenge you and say i don't think
07:36 - that's the way to go or you should do it
07:38 - differently
07:40 - cool
07:41 - so back to here so let's write some a
07:43 - search assertion so
07:45 - test that array two is a correct copy of
07:47 - array one
07:48 - all right so we're gonna basic thing
07:51 - and then we're gonna have some function
07:53 - there
07:55 - comma
07:56 - the message
07:59 - okay
08:00 - and then we'll just i can write the
08:02 - message in now array 2
08:04 - is
08:06 - correct copy
08:07 - of
08:09 - code
08:10 - right
08:10 - 1.
08:12 - great
08:13 - remove that for now
08:15 - and get my comma back over here
08:18 - okay so let's think about how to do this
08:20 - um let me grab my notebook real quick
08:23 - arrays are a lot of fun arrays you get
08:25 - to do
08:27 - some fun things with you get to iterate
08:29 - them you get to loop through them you
08:30 - get to compare them you get to even use
08:33 - sets so
08:35 - i don't know what the best way to do
08:37 - this will be
08:38 - we can probably keep it quite simple
08:41 - so i'll start by
08:43 - making an arrow function
08:44 - this way we can contain our code
08:47 - and then i'll basically can i do white
08:49 - space uh no i don't believe i can
08:54 - um so to start off we're going to say
08:55 - constant
08:57 - array 1 is going to equal just a
09:00 - very basic array of two elements
09:04 - and then we want to say that constant
09:06 - array two is going to equal the spread
09:09 - of array one
09:12 - and now we want to compare the two
09:14 - so traditionally when you want to
09:16 - compare to arrays i would probably write
09:18 - a deep equals method to verify that
09:20 - everything is equivalent but because
09:22 - this is such a simple example we can
09:24 - actually get away with doing a return
09:26 - array 2
09:28 - 0th spot is db equals
09:32 - the 0th index of array 1 and array 2
09:37 - is equivalent to array 1.
09:41 - great
09:42 - that should do it for the first one
09:45 - now test
09:48 - let's do the let's save this one for the
09:50 - last because we'll talk about that
09:52 - now let's test spread operator was used
09:55 - okay so we know how the spread operator
09:58 - should be used
10:00 - um and we're going to use a code.match
10:03 - when we get to it
10:05 - write a message
10:08 - we'll say code spread operator
10:13 - was used
10:18 - now let's go over here we'll add in our
10:21 - um regular expression syntax and now
10:24 - let's think about the way this should
10:25 - look so no matter what because we need
10:29 - array two they need to be producing
10:31 - array two
10:33 - then
10:35 - we will probably want to test for this
10:37 - whole line right here
10:39 - with an optional
10:41 - oh well first of all um use strict
10:45 - and then we have i think this is valid
10:49 - yes that is so we can have optional
10:50 - white space between here and here
10:53 - but then we necessary white space here
10:56 - and then also optional white space
10:57 - between here and here
11:01 - it said
11:03 - we don't even want to test this let's
11:04 - just test this aspect right here
11:08 - so let's go ahead and write
11:10 - well i think i have to escape this yep
11:13 - have to escape that and then we're going
11:15 - to have optional white space
11:18 - the spread operator
11:20 - array 1
11:23 - and then optional white space
11:26 - close
11:27 - the brackets
11:28 - and we're not going to test for a
11:30 - semicolon that's unnecessary
11:33 - and we're going to say
11:37 - dot dot dot
11:40 - spread operator
11:42 - was used
11:45 - to duplicate
11:48 - array one
11:51 - make sure we get the close in there
11:54 - i believe this is going outside right
11:57 - yeah
11:58 - cool
11:59 - all right let's
12:01 - let's work our way back through this to
12:03 - make sure that everything has worked so
12:05 - far
12:07 - and then we'll see where we can go
12:14 - just so i can talk through that
12:15 - basically i just ran node seed before
12:17 - which reseeds the database it goes back
12:19 - through all these json files and
12:21 - produces all the challenges and then i
12:23 - just restarted the account the um server
12:25 - that is running my instance of this
12:27 - locally
12:29 - okay so i believe all i have to do is
12:31 - write dot dot array one
12:34 - run the tests
12:36 - great they worked but um before i move
12:39 - on i think i want to add one more test
12:42 - here i want to i want to make sure that
12:45 - they aren't just doing this
12:47 - because if because technically this is a
12:49 - valid way to copy an array but that um
12:53 - if i remember correctly or the way at
12:55 - least this works in java is if you were
12:56 - to then edit an option an object like an
12:59 - entity in array1 it'll actually change
13:01 - it in array 2 as well
13:02 - so we want to test to make sure that
13:04 - what happens in array one doesn't happen
13:06 - to array two
13:08 - so let's assert
13:10 - again or actually this might not be
13:12 - working so i don't have a comma
13:13 - there we go comma all right assert close
13:17 - that off
13:18 - let's throw the message in here
13:23 - now let's say that um
13:27 - we'll say code array2
13:30 - remains
13:32 - 008.
13:36 - okay i just realized um this first test
13:39 - is doing nothing because it's not i'm
13:41 - just i just wrote code to check the code
13:43 - we need to you code.match
13:45 - um otherwise this is pointless
13:48 - um
13:50 - because this is not like we can't test
13:53 - what they actually input here this isn't
13:54 - getting what they've actually input
13:56 - that's my mistake let me um
13:59 - let's think about this how can we do
14:00 - this better
14:07 - we could verify
14:13 - this is a tricky one
14:27 - well technically we really can't check
14:29 - that then because we're not using a
14:30 - function here
14:35 - what we could do
14:37 - is
14:39 - we we could edit the challenge and see
14:40 - we go from there so let's say
14:44 - let's make a function declaration let's
14:46 - say let's function
14:48 - we'll say duplicate
14:52 - and we're going to take in
14:54 - an array
14:56 - and we're going to just return
15:03 - that array
15:04 - is that is that reasonable
15:07 - is that a
15:08 - is that a fair thing to do
15:10 - and then we would want to say constant
15:12 - array two is going to equal
15:15 - duplicate
15:17 - array
15:25 - yeah
15:27 - so we're gonna remove this line
15:31 - would this still work
15:32 - oh wait no right one
15:36 - yes it still does okay so let's change
15:39 - the um let's change the challenge here
15:43 - um into so let's we're going to change
15:45 - the instructions here and we're also
15:46 - going to change the code so first of all
15:49 - we can delete this or actually let's
15:50 - keep let's grab the change this line
15:53 - say change this line
15:55 - and we're basically going to say
15:58 - i'm going to want to complete i'm going
15:59 - to want to copy this
16:02 - and i want to i'll do all my line by
16:05 - line well we'll just we'll just roll
16:07 - with it all right so we can delete this
16:09 - one it's already there
16:11 - and then let's snag this line
16:16 - toss it in here
16:21 - grab the return
16:27 - and then grab the squiggly bracket
16:32 - and we're going to need this line here
16:34 - and then that should be golden
16:39 - okay
16:41 - now
16:45 - you should be able to say
16:50 - so
16:56 - wait a second
16:59 - we're going to test one thing
17:02 - real quick
17:06 - you guys are learning with me here i'm
17:08 - not entirely sure
17:10 - everything that we have access to when
17:12 - it comes to
17:14 - um this testing framework i believe
17:17 - this will be a valid test
17:21 - i think this might work
17:23 - in which case we don't need all this
17:27 - but then there is an issue with testing
17:34 - hmm
17:38 - let's uh
17:40 - we're going to save this
17:43 - over here for just a little bit
17:47 - and uh let's just snap it into um kind
17:52 - of like text edit i have like a text
17:53 - edit here we go perfect
17:55 - ah let's uh let's not have that open
17:58 - that's my batch profile alright let's
18:00 - save that in there so we have that just
18:02 - in case i'll move that away
18:08 - yes this video will be available after
18:10 - the live session
18:15 - okay so we've done that
18:20 - let's go back to writing the line in
18:23 - that
18:24 - const array 2 should just equal
18:27 - the
18:31 - this and just
18:32 - edit
18:34 - when they say change this line
18:37 - okay
18:43 - and then this method should return true
18:47 - if these things are defined
18:50 - okay let's write a node seed
18:59 - i'm going to restart the server
19:07 - great let's do a refresh
19:15 - and
19:16 - let me just go ahead and basically just
19:19 - remove this
19:22 - uncomment this and then if this runs
19:29 - okay this passes this this passes okay
19:33 - so
19:34 - i was correct
19:36 - um i will i was wrong at first but now
19:38 - i'm correct we do have full access to
19:40 - the variable types the variables um that
19:42 - are written in the editor
19:45 - so with that let's think about how we
19:47 - can check if array two is equal to array
19:49 - one
19:50 - um i think a good way to do that is
19:54 - basically just do um
19:57 - basically just use a for each loop and
19:59 - then i believe the four each will pass
20:01 - in the index
20:02 - and yeah for there so let's just go to
20:04 - mdn and get the for each
20:07 - method so we can make sure we do this
20:09 - correctly
20:11 - um
20:12 - so it seems like we get the callback
20:14 - gets the current value the index and the
20:16 - array great all right so let's go ahead
20:18 - let's go over here i'm gonna say array
20:19 - two
20:21 - dot four each
20:23 - and then we're gonna have a callback and
20:24 - the callback is going to have the
20:25 - current value and the index
20:29 - and then we're going to
20:32 - know what we'll do we'll use every
20:34 - instead because i believe every returns
20:36 - true
20:38 - if
20:39 - it passes for every item
20:44 - every and it's a function
20:46 - let's see so we have the the current
20:48 - value index as well yep so we're going
20:49 - to use every guys
20:52 - yay for awesome es6 things
20:55 - and then we're going to say we're going
20:56 - to return true if v
20:58 - is equivalent
21:00 - to array one
21:02 - the index
21:04 - if that if this passes then we know we
21:07 - have a correct copy
21:09 - um
21:10 - we will return false in here for now
21:14 - remains unchained or
21:19 - when
21:21 - array one
21:24 - is changed
21:26 - okay
21:37 - i'm going to restart
21:44 - great let's
21:46 - go back over here we'll refresh my code
21:49 - should save
21:50 - good and if we run unlock and run
21:55 - there we go all right so this one's
21:57 - passing now which is great um it means
21:59 - that we do have a direct copy of which
22:01 - is um really really good uh so this if
22:04 - you guys are wondering this is the code
22:06 - snippet that i'm using i'll even
22:08 - post i'll even um copy it and paste it
22:12 - into
22:13 - the youtube chat so you guys can use it
22:15 - in your own thing so
22:18 - that is a shallow
22:21 - equal
22:23 - array
22:25 - equivalency
22:28 - um
22:30 - checker
22:31 - what i mean by shallow equal is that it
22:33 - doesn't
22:34 - truly check that each item here is
22:37 - equivalent to the other item because
22:39 - technically if you had if you guys are
22:41 - aware of some objects and some nested
22:44 - nested data structures can lead to being
22:46 - buggy when you just use a triple check
22:48 - so while something may actually be the
22:50 - same it will return false because two
22:52 - objects even declared exactly the same
22:54 - are not equal um
22:56 - we can even i can even show this quite
22:58 - quickly in here i believe if we do this
23:01 - is this going to be the same yeah so if
23:03 - you notice two objects of the same type
23:06 - of literally they literally look exactly
23:07 - the same but because they're not the
23:10 - literal same memory address they're not
23:11 - equivalent um
23:13 - so this the method that i posted there
23:15 - will not work however if you use the
23:18 - deep equals method where it actually
23:19 - traverses all
23:20 - all um keys and parameters of an item
23:24 - then it would be better
23:26 - so yeah let's move right on through here
23:29 - let's check to make sure that array 2
23:30 - remains unchanged
23:32 - so if we go in here we say array 1 dot
23:35 - push and we're going to add an item like
23:37 - june
23:40 - then
23:42 - oh what are we going to do
23:47 - actually now we're going to use a
23:48 - function i believe
23:54 - so let's pass array 1 and array 2 into
23:57 - there
24:00 - and then we're going to return
24:04 - that array2 dot length
24:07 - is less than array1.length
24:12 - and before i commit i just want to make
24:14 - sure that that's how you do length yeah
24:16 - there we go cool all right save that
24:20 - and
24:24 - run node seed
24:33 - restart our server
24:40 - refresh the page
24:44 - and
24:45 - unlock our code
24:49 - yay all right good that's two down let's
24:52 - move right on through onto the next one
24:56 - cool
24:57 - all right what we got here
24:59 - use the structuring assignment to assign
25:01 - variables from objects
25:03 - we saw earlier we earlier saw we
25:08 - we saw earlier
25:13 - how spread operators can effectively
25:15 - spread or unpack the contents of the
25:17 - array
25:18 - we can do something similar with objects
25:20 - as well destructuring assignment and
25:22 - special syntax for neatly assigning
25:24 - values taken directly from an object to
25:26 - variables
25:28 - consider the following es5 code
25:30 - voxel axis 3.6 y 7.4 z is 6.54
25:36 - okay basic es5 here is the same
25:38 - assignment statement with the s6
25:40 - destructuring
25:41 - yep
25:42 - if instead you want to store the values
25:44 - of
25:46 - xlx into a
25:47 - b you have that freedom as well
25:50 - great
25:52 - okay
25:53 - use destructuring to obtain the length
25:55 - of the string greeting okay first of all
25:57 - we're missing the proper
26:01 - wait a second
26:04 - why is the hr below it
26:07 - it's
26:08 - a high up here uh that's interesting
26:15 - we go ahead and snag this anyways we
26:16 - gotta use we have to have that use
26:18 - strict line um
26:22 - but i'm still confused is why they use
26:24 - the things underneath it well we'll roll
26:26 - with it
26:26 - okay so we want to say use destructuring
26:28 - to obtain the length of the string
26:30 - greeting
26:33 - oh interesting
26:38 - um
26:42 - oh okay so let's think about this if we
26:45 - have a string in node
26:47 - um we're actually solving the challenges
26:49 - too guys it's kind of fun so let's say
26:50 - we have our string um
26:53 - you know uh let's just say like abc
26:55 - you want to get the length you just type
26:57 - that length right
26:58 - so if you think about it this dot length
27:01 - is a property
27:02 - of the
27:04 - object
27:05 - abc or the string
27:08 - so what you should be able to do in that
27:10 - instance is go ahead and say const or
27:12 - we'll just use i'll just use let
27:15 - length
27:16 - equals or let's just do length we'll
27:20 - assign it to the letter l
27:22 - equals
27:24 - a b c d e f
27:27 - l should be six
27:29 - perfect all right
27:31 - so what we're expecting here is
27:35 - curly brackets around the word length
27:39 - and it should equal greeting
27:41 - this is the expected solution
27:45 - and we want to test that destructuring
27:47 - was used
27:48 - i also want to make this challenge a
27:50 - little bit more and i want to assign it
27:53 - to
27:54 - len i want i want the user to assign
27:57 - the length to the word ln um
28:00 - because the word the the the string
28:04 - length is technically a keyword because
28:06 - it's so popular of a parameter for um
28:08 - arrays as well as strings
28:10 - so let's go ahead and
28:14 - go into our code first of all let's add
28:16 - some white line space in here
28:20 - um
28:23 - great
28:25 - so i want to say use destructuring to
28:27 - obtain the length of the string greeting
28:29 - comma
28:30 - and assign that
28:33 - assign the length
28:35 - to
28:40 - code
28:41 - len
28:43 - great
28:46 - this is going to be a fun one
28:49 - assert
28:50 - and then length this is really equals
28:53 - just equals 11. because remember they
28:54 - got to use the elen otherwise it won't
28:56 - work
28:57 - and then message
29:00 - is going to be
29:07 - code
29:08 - len
29:14 - equals
29:17 - 11.
29:19 - cool
29:20 - um
29:22 - then we can say
29:24 - assert
29:28 - um
29:29 - we're going to want to make sure that
29:30 - the length was assigned to lens we
29:31 - should well we should test that length
29:33 - exists
29:34 - um
29:35 - so actually we'll start with that assert
29:38 - type of len
29:42 - equals equals equals
29:43 - string
29:47 - string
29:49 - and then the message is um
29:55 - code
29:56 - uh
29:57 - constant we're gonna say variable
30:00 - length
30:02 - exists and is a string
30:08 - and that's that
30:11 - that that
30:14 - okay
30:15 - and if we want to make sure that's how
30:16 - that actually comes out we'll just do
30:18 - yep string
30:20 - now let's assert
30:23 - that our users
30:25 - actually went ahead and used
30:28 - destructuring
30:29 - so
30:30 - uh
30:33 - properly destructured
30:37 - um or just was gonna say destruction was
30:40 - used i think that's i don't think
30:42 - there's a better way to say that
30:46 - okay so let's do
30:48 - code.match close it off
30:51 - get our rejects ready
30:53 - let's think about how this is going to
30:54 - look
30:55 - so
30:57 - we're definitely we don't need to worry
30:59 - about cons but we definitely need the
31:00 - squiggly bracket and then we're going to
31:02 - have the optional white space
31:06 - we need the strict word length there's
31:07 - another way to get it
31:09 - and then we need the optional white
31:10 - space the colon
31:13 - optional white space
31:14 - the strict word l e n
31:17 - optional white space close the bracket
31:19 - off
31:21 - and then
31:24 - we should just test for pretty much that
31:25 - whole line so we can do optional white
31:28 - space equal sign optional white space
31:31 - greeting
31:33 - because they really shouldn't
31:36 - um
31:37 - there really shouldn't be any deviation
31:39 - from this and we'll skip the semicolon
31:41 - because people don't always put them
31:45 - so let's go ahead and write that it's
31:48 - ready all right regular expressions
31:50 - go so i believe i'm going to
31:52 - get rid of the squiggly mark
31:54 - and then optional white space
31:57 - the word length
31:59 - optional white space
32:00 - colon optional white space
32:03 - word len
32:04 - optional white space
32:06 - squiggly bracket
32:08 - optional white space
32:10 - equal sign optional white space
32:13 - the word greeting
32:15 - all right great let's roll it with that
32:19 - first need here node seed
32:28 - anyone has any any questions feel free
32:30 - to reach out in the chat i'd love to
32:32 - answer them
32:38 - change that up
32:45 - uh-oh something broke
32:56 - ah
32:57 - something failed here oh unsigned token
32:59 - all right
33:02 - where did we go wrong
33:06 - i see i see okay
33:08 - no trailing comma
33:11 - it's json for you
33:15 - steven uh please ask any questions man
33:18 - i'd love to i'd love to help out
33:28 - all right we're running again let's
33:29 - refresh
33:34 - all right so code did not save so let's
33:36 - go ahead and let's type in the potential
33:39 - solution
33:59 - run the tests
34:02 - oh
34:03 - all right so what went wrong here
34:13 - doesn't need to be a string that is
34:15 - completely wrong i don't know why my
34:17 - brain was thinking that it needs to be a
34:18 - number
34:23 - i was thinking length but like string
34:26 - and i don't know
34:27 - let's just roll with that so that one's
34:29 - good um
34:32 - let's be verbose here and actually check
34:35 - to make sure that edit makes sense our
34:37 - code will luckily um this local uses
34:39 - local storage and we'll store my code so
34:41 - all i have to do is refresh and run the
34:43 - tests again and we should be set to move
34:45 - on to the next one and that would bring
34:46 - us up to three
34:51 - awesome refresh
34:53 - okay
34:55 - scroll down
34:57 - unlock the code run the test and
35:01 - happy coding all right
35:03 - three for three guys let's go to the
35:05 - next one
35:08 - use the structuring assignment to assign
35:10 - variables from nested objects we can
35:12 - similarly just structure nested objects
35:14 - into variables consider the following
35:16 - code a start
35:18 - oh well wait what
35:20 - um
35:23 - so we're saying
35:25 - get the variable start the property
35:28 - start from a and then from the object
35:31 - and then
35:33 - then get
35:36 - x
35:38 - oh no sorry
35:40 - store that as the object
35:44 - this is a confusing one i've actually
35:46 - never used this
35:48 - um yes i can fill you in what we're
35:50 - doing so we are contributing to free
35:52 - code camp right now we are writing on
35:55 - tests for the es6 challenges at the same
35:58 - time we're doing a little bit of q a we
36:00 - are um
36:01 - i'm going through the beta challenges
36:04 - and i am not only am i reading through
36:06 - the descriptions and trying to test out
36:08 - the challenges as is
36:10 - and filling out some of the solutions
36:12 - but i'm also writing the test that tests
36:14 - to make sure that everyone else is
36:16 - solutions in the future will pass as
36:18 - well
36:19 - um and while i'm doing that i'm
36:21 - explaining a couple es6 things and if
36:24 - i'm open to questions and um soon once
36:27 - we hit five
36:28 - five um challenges for two away i will
36:31 - be doing some github stuff to show you
36:32 - all like what it's like to um push and
36:35 - pull from the github the free code cam
36:37 - repository
36:39 - great
36:40 - so the maximum of tomorrow
36:47 - so
36:49 - this is going to be a complicated one
36:52 - i think
36:53 - first of all we know that we're going to
36:54 - be assigning this to the word forecast
36:59 - and max of tomorrow
37:04 - is going so we got to start with today
37:09 - and then
37:11 - we gotta say
37:13 - max
37:14 - and assign that to the word max of
37:16 - tomorrow
37:18 - and that nested
37:20 - block should do it
37:22 - um
37:24 - i don't exactly have a way to test it
37:26 - but i'm just going to run the test it's
37:28 - going to pass but
37:30 - we didn't actually write anything that
37:32 - just saved my code so now let's write
37:34 - some tests um
37:36 - we're also missing the use strict line i
37:38 - don't know if the use strict line needs
37:39 - to exist i'm going to keep copying and
37:42 - pasting it over until and i think it'll
37:44 - just be a very easy cleanup job if we
37:46 - don't actually need it
37:49 - um because i'd rather put it in there
37:50 - and then remove it later on
37:52 - okay
38:01 - so this one's an easy one
38:03 - this align so we're just going to write
38:05 - assert
38:07 - max
38:08 - of tomorrow row
38:10 - equals equals equals 84.6
38:13 - and then the message is going to be
38:15 - simple as this
38:23 - and we'll go ahead and write code here
38:39 - remove that and now talk about we're
38:41 - going to say nested
38:43 - destruction was used so i'm going to
38:45 - test for this line pretty much exactly
38:48 - there there's really is no other way to
38:49 - do it um and
38:52 - with that let's do i'm going to um in
38:54 - case you guys are wondering i am writing
38:56 - some stuff down on the notebook just so
38:58 - i can see it um keep in mind and also
39:00 - shout out to github i've got my little
39:02 - hubot github notebook pretty special
39:05 - definitely guys should get some
39:07 - um
39:09 - yes steven these are the challenges that
39:11 - you see when you work through free code
39:13 - camp we're writing them right now so
39:15 - that when we release the beta hopefully
39:17 - on christmas um we'll uh have some fun
39:21 - things for you all to see all right
39:23 - let's go through here we're gonna have
39:24 - the screwy bracket
39:26 - potential white space word today
39:30 - um
39:31 - optional white space colon optional
39:33 - white space squiggly optional white
39:35 - space the word max
39:37 - optional white space colon optional
39:39 - white space
39:40 - max of tomorrow
39:45 - optional white space square bracket
39:47 - optional white space squiggly optional
39:50 - white space equals optional white space
39:52 - forecast
39:54 - great this is going to be a nice and
39:57 - long regular expressions
40:02 - let's go ahead and write this um first
40:04 - of all yeah well let's roll through here
40:08 - i'm going to say assert
40:10 - code.match
40:14 - message
40:20 - get that in there
40:24 - hello how you all doing today see
40:26 - someone just is here from india it's
40:28 - pretty awesome i'm in the u.s
40:31 - and um
40:33 - i'm in new jersey at the moment even
40:35 - though i spend a lot of time in boston
40:40 - let's go all right guys ready for this
40:42 - regular expression
40:44 - escape the squiggly
40:46 - optional white space
40:48 - the word today
40:50 - optional white space
40:52 - colon optional white space
40:56 - the
40:57 - open squiggly bracket
41:00 - and then optional white space
41:03 - the word
41:04 - max
41:05 - optional white space
41:08 - colon
41:09 - optional white space
41:12 - max of
41:14 - tomorrow
41:16 - optional white space
41:18 - close the screwy bracket close the next
41:20 - squiggly bracket but there also needs to
41:22 - be some optional white space in between
41:26 - more optional white space the equal sign
41:29 - more optional white space
41:31 - the word
41:32 - forecast great
41:35 - um is there anything else we want to
41:36 - test
41:37 - i think that's a solid one all right
41:39 - let's
41:42 - let's quickly let me just check over max
41:45 - of tomorrow's equivalent
41:48 - good
41:49 - and then we have we have the
41:51 - the
41:53 - close or sorry open
41:56 - optional today optional colon optional
41:59 - open
42:00 - optional max optional colon
42:04 - optional the word max of tomorrow
42:07 - optional
42:08 - closed optional closed optional equals
42:11 - optional forecast
42:16 - will it test for single white space or
42:18 - all white space between levers
42:20 - between letters great question so the
42:23 - reason why i'm using this right here
42:25 - is an optional it's wild card which
42:28 - means it can be zero or many um i can
42:30 - show you that in here
42:32 - um
42:34 - so
42:35 - let's simplify this let's just literally
42:37 - do we're going to say a
42:40 - optional white space b
42:42 - and we're going to stay at a and we have
42:44 - a ton of white space
42:45 - that passes
42:47 - we have a b
42:49 - um here
42:50 - and we can do a single space and all
42:52 - three of these
42:54 - pass these are all valid for this
42:56 - regular expression so what we're doing
42:58 - is we're basically saying there can be
43:00 - white space there can also be no white
43:02 - space and that's okay um and that's what
43:04 - this is testing for in fact the the
43:06 - forward slash s is white space and then
43:09 - the wild card means zero or many we also
43:12 - have a plus sign for one or many and
43:15 - then i think there's one more um
43:19 - i believe it's zero or none so there's
43:22 - alright is that what this is
43:24 - it's zero and one so if you have one if
43:26 - you so for example this does not pass
43:28 - but these two do
43:30 - um so those are our three white space
43:32 - tests
43:35 - great all right that ran let's run oh oh
43:38 - yeah let's run node seed
43:47 - and then let's go here and restart the
43:50 - server
43:54 - um oh what time is it it is almost 3 p.m
43:57 - for me
43:58 - in the afternoon
44:00 - which would be 1500 if you're on
44:02 - military time like i usually am
44:04 - all right let's refresh this
44:09 - saved it
44:10 - unlock the code run it
44:14 - all right something did not work
44:17 - why does it not equal that
44:22 - who can tell me
44:30 - oh because i made a mistake in my
44:32 - solution see that guys
44:35 - to tomorrow you'd think that i would
44:37 - catch that but
44:39 - you get kind of caught up thinking about
44:41 - the code
44:43 - and which means that i did this and
44:44 - correct this needs to be the word
44:46 - tomorrow instead
44:47 - all right let's be verbose
44:50 - check it and we'll get on to the next
44:53 - one
44:58 - there we go
45:00 - there we go
45:01 - that work
45:03 - oh no okay
45:05 - broke gulp
45:21 - cool all right let's see
45:24 - oh i apologize for the dog barking
45:33 - all right unlock the code
45:36 - run it
45:37 - and we're off to the next one all right
45:39 - guys
45:40 - that is four let's do one more and then
45:42 - we'll do a little we'll commit some
45:44 - things to get and
45:46 - do some fun things all right es6 makes
45:50 - destruction arrays as easy as
45:51 - destructuring objects it does one key
45:53 - difference between the spread operator
45:55 - and array destruction is the spread
45:57 - operator unpacks all contents of an
45:59 - array into a comma separated list
46:01 - consequently you cannot pick or choose
46:04 - which elements you want to assign to
46:05 - variables ah
46:08 - oh i know what this is doing
46:10 - um
46:14 - let's do this
46:16 - the variable
46:17 - uh
46:19 - variable a is assigned to the first
46:20 - value of the array
46:23 - and b is assigned the second value of
46:25 - the array we can also access the value
46:28 - at any index in the right with the
46:29 - structure we're using commas to reach
46:30 - the desired index
46:32 - use the structuring assignment to swap
46:34 - the values of a and
46:37 - of a and b so that a receives the value
46:41 - stored in b
46:43 - and b receives the value stored in a
46:50 - i think it wants us to do
46:57 - this
47:00 - oh it looks like this one might already
47:02 - have tests let's see
47:07 - oh look at that
47:09 - whoa what does it say you're right
47:14 - all right guys let's see what they have
47:15 - here
47:17 - uh see they're testing for a word
47:19 - um
47:21 - equals
47:29 - why would it be testing for two comma
47:31 - one
47:35 - it doesn't make a lot of sense
47:38 - oh unless they're using
47:41 - they're pulling
47:42 - let's just run it and see what happens
47:46 - okay
47:47 - so let me um
47:49 - not i guess it works so we're gonna skip
47:51 - this one because if it's running it
47:53 - works
47:56 - but i'm not entirely sure i guess what
47:58 - this is doing i don't i'm not familiar
48:00 - with regular expressions enough to say
48:02 - but i guess this is actually grabbing oh
48:04 - this is your capturing groups that's
48:06 - what it is okay so guys um let's learn
48:08 - let's do some let's learn something fun
48:10 - here so if you notice this here and you
48:12 - see where it also copied secondly
48:15 - these are capturing groups you notice
48:17 - that by the parentheses around the word
48:22 - uh
48:22 - forward slash w that matches any
48:25 - character any any like character a
48:27 - through z uppercase lowercase as well as
48:30 - zero to nine and underscores i believe
48:32 - so that captures the character
48:35 - and then this one this so this is going
48:37 - to capture and store it as like capture
48:40 - one and then this second capturing group
48:42 - with the second set of parentheses says
48:45 - grab the next letter and say stored in
48:47 - capture two
48:49 - then later on in his regular expression
48:51 - his or her regular expression
48:53 - this you escape
48:55 - a number and that will refer to a
48:58 - previous capturing group so this two
49:01 - refers to this capturing group right
49:03 - here while this one
49:06 - refers to this caption group right here
49:09 - awesome all right let's submit and go to
49:11 - the next challenge
49:13 - so that was technically that was 11
49:15 - through 15 i believe let's just check so
49:17 - use
49:19 - what's what was the title of the last
49:20 - one
49:21 - to assign variables from array
49:26 - yep so we just did 11 through 15.
49:29 - so let's take a quick um break from
49:32 - coding and we're actually going to push
49:34 - some stuff to get
49:36 - first off let's go ahead and cancel this
49:40 - and turn these off
49:43 - and then let's think about the right way
49:45 - to do this i want to actually get my
49:47 - pull request up as well
49:51 - uh there may be a
49:54 - communication here
49:56 - all right i haven't gotten any review
49:58 - yet um
49:59 - so we're so this is a pull request that
50:01 - i have um which is currently tracking
50:03 - the feature request
50:06 - uh my ad es6 tests
50:08 - so because at the beginning of this
50:10 - video
50:11 - back when we were doing technique we
50:12 - were working through technical
50:13 - difficulties i um merged i i mean i
50:16 - updated my branch to the uh master so
50:19 - we're gonna have no we currently have no
50:20 - merge issues with this um with this pr
50:23 - so we're gonna be safe to push to it
50:25 - and with that let's run git status and
50:27 - see what we've changed
50:29 - so notice the only thing that's changed
50:31 - the json file that's a good thing
50:33 - because it's the only thing we've been
50:34 - typing in the whole day
50:36 - and what's awesome about free code camp
50:38 - is that it actually has a
50:41 - npm run commit command and what this
50:43 - will let us do
50:44 - is create our commits um but something
50:47 - is not working ah
50:49 - get add
50:51 - now run get npm run commit great so
50:54 - we'll go down to the word test and then
50:56 - we're going to say challenges
51:00 - and then we're going to a short short
51:04 - message we're just going to say um
51:08 - es6
51:09 - chao
51:11 - 11 through 15.
51:14 - it might not be working because of the
51:15 - numbers
51:21 - no issue numbers so it's gonna it
51:23 - doesn't like me putting things so we're
51:25 - gonna say like
51:27 - c11 through c15 will that work there we
51:31 - go
51:32 - um we don't really need to do any of
51:34 - these
51:36 - awesome oh we have an mdm update i'll go
51:38 - run that real quick while we go check
51:40 - out
51:42 - um
51:44 - oh well here hold on a sec guys
51:50 - all right run that and now let's check
51:53 - on here so we'll refresh
51:55 - and
51:56 - yes
51:57 - it should any second now
52:00 - this should pop up with our commit
52:05 - right
52:08 - ah no we have to get push here we go
52:11 - push our commit origin
52:13 - feature add
52:15 - es6 tests
52:19 - here we go okay so we have the commit
52:21 - we've pushed the commit and now if you
52:23 - look over here we'll give it a minute ah
52:26 - boom right there it pops up it's running
52:28 - camperbot's running travis ci is running
52:32 - to make sure that the build
52:34 - builds successfully
52:36 - um and from here we would be good to
52:37 - merge now i do have the ability to merge
52:40 - into the master however i do not enjoy i
52:45 - want i always want someone to look over
52:46 - my code before i do that um so until
52:50 - then uh we're just gonna keep pushing
52:52 - here
52:52 - and as long as we maintain the
52:55 - the um
52:57 - forget the word i guess the the
52:59 - correctness of our branch which is
53:02 - feature idea six tests then we'll be
53:04 - fine um the way we do that is what i ran
53:06 - through before where i fetched the
53:08 - upstream master or the upstream staging
53:11 - reset my branch to that and then cherry
53:14 - picked my commits so what i'm going to
53:16 - keep doing is until i get to that point
53:18 - i'm just going to keep cherry picking
53:20 - these three commits until we're good to
53:21 - go
53:23 - all right so we're done with those five
53:27 - are there any questions in the chat
53:29 - before i move on to the next five
53:34 - you guys have an amazing bootstrap walk
53:36 - through any plans of making sas or css
53:39 - grid material well let's see what we
53:41 - have over here
53:42 - responsive web design
53:44 - we have the basic css
53:47 - visual design accessibility web design
53:50 - principles we have the flexbox tutorial
53:54 - and applied design
53:57 - so front-end libraries we have bootstrap
53:59 - and we also have sas right here um i
54:02 - believe yeah it has even has challenges
54:04 - steven
54:05 - so um
54:06 - you uh definitely it's coming um it's in
54:08 - beta and
54:10 - yeah
54:12 - cool
54:14 - let's also go ahead and update here we
54:17 - know that with polar crest finished so
54:19 - we're going to go ahead and update our
54:20 - emojis so that if someone else wants to
54:23 - come by and check they'd be like oh yeah
54:25 - look with all the work they've done
54:27 - cool
54:31 - halfway there guys halfway there
54:35 - let us
54:37 - get right back into coding
54:40 - um
54:41 - before i do that i'm going to take a
54:43 - quick drink of water and make sure this
54:45 - was run yeah we're good here
54:47 - we'll get everything going again
54:53 - and a quick drink
54:59 - always stay hydrated everybody
55:02 - it's important thing to do
55:09 - cool
55:11 - brain food called gummy bears
55:21 - all right
55:22 - and we're on to the next one
55:24 - destructuring assignment with the rest
55:26 - operator to reassign array elements
55:30 - i use this one a lot okay
55:46 - a b d structure the rest of the array
55:51 - great
55:59 - the rest element only works correctly as
56:01 - the last variable in the list
56:04 - as in you cannot use the rest operator
56:06 - to catch a subarray that leaves out last
56:08 - element of the original array cool
56:16 - stephen are you working through the beta
56:18 - or are you working through the main
56:19 - curriculum
56:32 - all right
56:34 - so the challenge is we're basically just
56:35 - going to do a slice and we just want to
56:37 - take the first two out
56:42 - main curriculum all right cool yeah keep
56:44 - keep going through the main curriculum
56:46 - stephen and um
56:48 - you'll see there's a little bit of sas
56:50 - in the data visual section um but i
56:52 - don't know it's not going to be if i
56:55 - remember correctly it's not going to be
56:57 - as
56:58 - you are familiar with like with all the
57:00 - testing and stuff i believe in the new
57:02 - curriculum that actually is tested and
57:04 - all that fun stuff
57:06 - um
57:07 - okay so how would this look i think this
57:10 - is as simple as going we would just
57:12 - destructure
57:16 - typing backwards here everybody
57:18 - do a b
57:23 - cool
57:28 - that should work
57:29 - and there doesn't seem to be any tests
57:31 - so let's go ahead and write some tests
57:37 - all right so we have to do a deep equals
57:39 - again
57:40 - in our shallow equals
57:42 - um i had the code snippet so we already
57:45 - know we can do that
57:50 - so snap that
57:55 - again
57:56 - and we'll just plop that into a text
57:58 - thing just so i have it
58:00 - oh
58:02 - look at that
58:04 - all right
58:06 - let's assert
58:08 - then
58:10 - put the message in here
58:17 - we're going to say
58:19 - code
58:22 - array
58:25 - is
58:27 - code
58:34 - now
58:35 - um
58:38 - oh here's a fun one ready so just do
58:41 - we'll just say array dot every
58:44 - and then we're gonna literally do
58:46 - vi
58:48 - is
58:49 - uh value is equivalent to i plus two so
58:54 - we're doing a
58:55 - little you know little like cheating
58:58 - thing here basically
59:00 - just notice that or actually index would
59:02 - be plus three because like you know you
59:05 - have zero one zero plus three is three
59:07 - one plus three is four so on and so
59:09 - forth
59:10 - um
59:11 - that's a good one that's a that's an
59:13 - easy way to do this
59:15 - uh because we're just using the
59:16 - incrementals and then we can do a cert
59:21 - source
59:22 - dot every
59:26 - comma i
59:28 - say that the value is equivalent to
59:31 - i plus one instead
59:34 - and say our message is
59:37 - code source
59:39 - code is
59:42 - i'll copy that in a second
59:45 - and we gotta finish the message block
59:47 - comma
59:54 - great
59:55 - all right let's get rid of these
60:00 - okay so
60:02 - we have two easy asserts to write so
60:04 - let's start with the first one
60:07 - and we'll say
60:09 - assert that the code dot matches regular
60:13 - expression
60:15 - i'm gonna put the message in here
60:17 - and we're gonna keep working through
60:20 - so destruction was used let's go back
60:22 - and look at our code
60:24 - so we know our solution basically is
60:26 - going to have
60:29 - some word character
60:33 - um
60:34 - sammy i have been coding for about four
60:38 - years now but i've really only been
60:40 - doing the open source thing um since
60:43 - like
60:44 - really like heavily like this past
60:46 - september but i've been familiar with
60:48 - the get
60:49 - kind of aspect for about a year
60:52 - so we have optional white space
60:55 - word character
60:57 - optional white or word character
61:00 - option white space comma
61:02 - optional white space
61:04 - so much fun white space
61:07 - word character
61:08 - optional white space comma
61:11 - optional white space destructuring with
61:14 - the word array because we need it to be
61:16 - named array optional white space closed
61:18 - bracket
61:20 - that'll be good enough regular
61:21 - expression i believe
61:25 - so we have to do the
61:27 - open
61:29 - go here
61:31 - then do the optional word character
61:36 - it needs to be
61:38 - one so we'll just do strictly one yep
61:41 - just leave it as is optional word
61:42 - character comma optional word character
61:45 - optional space
61:48 - word character optional space
61:56 - optional space
61:58 - dot dot dot array
62:00 - optional space
62:03 - and
62:04 - close bracket
62:06 - all right and we got one more um
62:10 - assert
62:12 - at the code
62:13 - dot match so we want to know that slice
62:16 - was not used so a fun one to write is
62:19 - you literally just you look for the word
62:21 - slice
62:22 - but you just know you just
62:24 - flip it to make sure that they didn't
62:26 - actually put it in there
62:32 - i'm going to say i'm going to say array
62:34 - dot slice
62:38 - was not used
62:43 - and i'll probably write this i'll do
62:45 - array dot
62:47 - because this is literal
62:52 - i might have to do this
62:58 - that's a bam
63:01 - or something like that
63:05 - stephen i'm not sure what you mean by uh
63:07 - bam
63:08 - bam
63:18 - sammy says planning to study electrical
63:21 - and electronic engineering next year
63:22 - which programming takes a big chunk out
63:24 - of the course but sometimes i don't know
63:25 - where to start and feel overwhelmed um
63:28 - sammy one thing i can tell you is
63:31 - um coding is a wild roller coaster and
63:36 - there's a really awesome community
63:38 - especially here at free code camp for
63:39 - you to learn so if you just start out as
63:42 - small as you possibly can and just keep
63:44 - working your way up
63:46 - eventually it'll be you know second
63:48 - nature and um with electrical and
63:51 - electronic engineering
63:53 - what i've been told is that you really
63:55 - your kind of programming will be more
63:57 - lower level um instead of like you know
64:00 - a lot of the high level object oriented
64:01 - stuff especially not even like web
64:03 - design you won't really see um unless
64:05 - you decide to take that of course
64:07 - and um
64:09 - with lower level
64:10 - with lower level programming it will be
64:12 - more complicated but if you get a good
64:14 - sense of math some discrete structures
64:17 - um you know learn the basic syntax of
64:20 - javascript and python um which we will
64:23 - be working heavily on you should be
64:25 - really you should be set and just take
64:26 - it slow take your time learning these
64:28 - things it doesn't it's not going to come
64:29 - overnight
64:30 - but it's definitely doable
64:32 - and there's also a lot of fun support so
64:35 - you can always reach out if you need it
64:38 - let me write this message and i'll
64:40 - respond um which one was this
64:43 - oh yeah the structure destructuring
64:47 - was used
64:49 - all right i think i got another question
64:51 - here while i write i'll do the node seed
64:54 - while i read this
64:55 - how are you feeling about the vue.js
64:57 - framework i just started learning it
64:58 - need to know
65:00 - you need to know do you think if it will
65:02 - get picked up because as of now there
65:03 - isn't much docs about it
65:05 - so vue.js is a
65:07 - incredible framework i do not know it
65:10 - yet i do plan on learning it um it's a
65:13 - great thing to have in your tool kit um
65:16 - there is for what i understand there is
65:17 - pretty decent docs and actually has a
65:19 - lot of really cool um
65:21 - add-ons as well i believe there's
65:23 - something called like nuxt.js which is a
65:26 - vue.js like
65:28 - uh like almost like a static web loader
65:30 - i believe really good for front end
65:32 - projects um
65:34 - vue is a lot smaller than react and i
65:36 - think it's a lot computationally less it
65:38 - doesn't have the same um obviously it's
65:40 - not going to be the same as react uh
65:42 - it's a great thing to have in your tool
65:43 - belt um and i wouldn't discount it i
65:45 - just think that react has a react does
65:48 - have a very large presence in the front
65:51 - end thing but they're not the only one
65:53 - and definitely learn view if you can
65:56 - um
65:57 - what motivated me to get into
65:59 - programming
66:00 - started with uh
66:02 - for me it was just
66:03 - i always thought coding was this really
66:05 - cool thing you know though you know you
66:06 - always see it on like tv and stuff like
66:08 - hackers and things
66:10 - um and i was like well i can't become a
66:12 - hacker so uh let me learn how to build
66:14 - websites so i did i learned um used i
66:17 - think code academy when it used to be
66:18 - like completely free
66:20 - um and i learned that in high school and
66:22 - then
66:23 - from there i just kept working on it and
66:26 - eventually worked my way up until doing
66:28 - um
66:29 - javascript and then getting more
66:30 - complicated from there earning some
66:32 - alert looking into object oriented
66:34 - programming and
66:36 - basically running with it
66:38 - all right we got everything to pass
66:39 - except one guys let's figure out what
66:41 - happened
66:42 - oh something did not work
66:44 - was that a is there something wrong with
66:46 - in here no all right
66:49 - um
66:51 - why did source not work
67:01 - zero one two three four five six seven
67:05 - eight nine
67:13 - i'm confused guys i don't know what's
67:15 - wrong with this line
67:17 - let me um
67:20 - let me run it in node real quick
67:25 - oh am i missing something
67:27 - nope well i'm not even in node
67:34 - oh wait
67:47 - interesting
67:50 - i wonder what's doing this
67:55 - why would that run false
68:02 - source.every is not a function
68:08 - um stephen says
68:11 - how long did it take you to learn node
68:12 - um still learning node actually uh done
68:15 - a little bit of contributing i've gone
68:17 - to two node conferences and that has
68:18 - helped a lot
68:21 - sort of learning views is much smaller
68:22 - you should pick up angler and react to
68:23 - my goals um dead zombie i'd encourage
68:26 - you to focus on one of them and then
68:28 - when you are very confident with one of
68:30 - them then pick up another and then leave
68:32 - it at that i think learning all three
68:34 - might be a little overkill and you'll
68:36 - realize that
68:37 - there really isn't a point especially
68:39 - the difference between angular and react
68:41 - i would encourage you to go with react
68:42 - it's much more widely adopted um and a
68:44 - lot more of like some popular open
68:46 - source projects like free code camp um
68:49 - i find it a little bit easier to
68:50 - understand
68:51 - and like i said do react then view or
68:54 - the other way around do view then react
68:56 - that's my personal opinion but i would
68:58 - refrain from going through all three it
68:59 - might be a little overkill
69:01 - um all right guys
69:05 - let's see what
69:07 - is happening
69:10 - is source being edited is that why
69:15 - does i don't think that that would
69:17 - affect it
69:18 - but what is source
69:22 - okay a and b and then array
69:28 - guys i don't understand what's going on
69:45 - let's um go back we'll run node seed one
69:48 - more time
69:57 - and we'll say node
69:59 - oh
70:01 - you know what it might be i think it has
70:03 - to do with the
70:04 - std out let's see maybe that's it
70:14 - let's unlock the code run the console
70:19 - ah it says source is not defined
70:22 - i don't know why
70:28 - i see
70:30 - the console says
70:39 - source that every is not a function
70:45 - but array had every is a function
70:51 - oh gosh this is
70:53 - really confusing guys i don't know
70:55 - what's wrong
71:05 - well then
71:11 - i'll just get rid of this line i don't
71:13 - know what's up
71:16 - and that doesn't make sense i think it
71:17 - might have to do with how we're spitting
71:19 - things out of these tests because
71:21 - obviously it's not just running so they
71:22 - might have to do is the way like what is
71:24 - being passed through
71:26 - um i'm not exactly sure
71:30 - we'll get rid of that and the other ones
71:32 - are passing so we're gonna
71:36 - one more time run node seed and that is
71:39 - our took us a while but that was our
71:41 - first challenge um for this set
71:45 - do a little restart
71:51 - um
71:53 - let's keep pushing through
71:56 - a little refresh
72:02 - i mean i don't even know why we'd have
72:03 - to test source to begin with it's not
72:04 - being it's not being written by the user
72:07 - great all right guys we're on to the
72:08 - next one the structuring assignments to
72:10 - pass an object
72:11 - as a function's parameters
72:14 - in some cases you can destructure the
72:15 - object in a function argument itself
72:18 - consider that yep okay
72:25 - yeah it does all right let's see what
72:26 - this wants us to do
72:31 - use function argument destructuring i
72:33 - think i know exactly what it wants
72:35 - basically just right max
72:37 - min
72:48 - um
72:50 - yeah
72:52 - all right we'll run our tests just so we
72:54 - have our code saved
72:55 - and now let's get to writing them
72:59 - oh something hung up
73:01 - yeah let's just go
73:03 - gulp being gold
73:10 - yeah stephen is very right um
73:14 - you just if you just
73:15 - you know one it's really easy to learn
73:17 - another and um if you know something in
73:21 - coding like if you learn python for
73:23 - example if you learn javascript do a
73:24 - well you can take that directly over to
73:26 - python and then when you know python
73:28 - really well you'll be and you have that
73:31 - object oriented mindset you'll be able
73:33 - to pick up java or c plus or c sharp and
73:36 - you'll be
73:37 - you'll be perfect
73:39 - um
73:40 - if you don't mind me asking how old are
73:42 - you i do not mind i am 19 years old
73:54 - cool all right let's test these things
73:56 - assert
73:58 - stats as an object
74:01 - uh
74:02 - sure we can do that
74:05 - type of stats equals equals equals
74:09 - object
74:31 - yeah go go 19
74:35 - cool all right and on to the next it's
74:38 - an easy one let's do another another
74:40 - easy one here assert
74:42 - that the value half is equivalent to
74:44 - 28.015
74:57 - no sorry half
75:02 - is
75:13 - have i had any coding internships jobs
75:16 - um i do i
75:18 - have
75:19 - um
75:21 - i started off as a web developer
75:25 - in high school part time
75:27 - and then from there i did a lot of um
75:31 - did a little bit of freelance on a lot
75:32 - just a little bit of freelance and then
75:35 - i went to college or university and
75:38 - learned a bunch of new programming stuff
75:40 - joined some clubs went to some events
75:42 - like a hackathon
75:44 - and then from there i built some of my
75:46 - own stuff and then did some open source
75:49 - and then recently i accepted a position
75:52 - as an intern with microsoft for next
75:54 - summer so
75:55 - going up
75:57 - cool all right let's check destructuring
75:59 - was used
76:01 - we need to test for this line right here
76:05 - so let's do some write downs right we
76:08 - got
76:10 - parentheses
76:12 - empty whites optional white
76:14 - squiggly optional
76:15 - the word max
76:17 - or technically not the word max we can
76:19 - just do
76:21 - we'll just do word
76:25 - because that matches a single character
76:27 - though right
76:40 - there we go cool
76:43 - and we'll do another one like that with
76:45 - the optional white spaces in between
76:49 - and
76:51 - another optional white space close it
76:53 - off white space parentheses
76:57 - and
77:04 - thank you very much sammy i wish you the
77:06 - best of luck with your with your uh
77:08 - endeavors too
77:13 - all right let's keep going through so
77:15 - open that up or
77:17 - escape it
77:18 - optional
77:22 - that
77:23 - optional
77:25 - word
77:27 - more than one optional
77:30 - comma
77:31 - optional
77:33 - word
77:36 - optional
77:38 - escape it
77:39 - optional
77:42 - close it
77:45 - and we'll say
77:46 - destructuring was used
77:54 - all right have a good one man
77:56 - thanks for joining us
78:00 - all right save that and
78:05 - let's do over here run node seed
78:15 - now that we will restart
78:26 - refresh
78:31 - unlock the code run it
78:36 - half is not 28.05 hmm
78:45 - well maybe that's not the right math so
78:47 - let's see
78:48 - 56.78
78:53 - plus
78:54 - it was like oh well i don't even
78:56 - remember i can't remember it
78:59 - ah
79:00 - all right let me just go ahead and
79:03 - do it in node
79:06 - 56.78
79:09 - plus negative 0.75
79:13 - divided by 2.
79:18 - i don't have
79:20 - these let's go over here
79:23 - okay that should be that but it's not
79:26 - so let's find out why
79:36 - what is half
79:42 - let's check our console
79:44 - half is
79:46 - 28.015 so i don't know why this is
79:48 - failing
80:05 - well half is a oh
80:10 - i see ready so half itself is a function
80:14 - not just a variable so we actually have
80:16 - to pass it
80:17 - the variable stats and now we have to
80:19 - say half stats
80:22 - is it all right there we go
80:34 - restart the server
80:40 - refresh the page
80:47 - unlock it and run it
80:51 - we're golden all right
80:53 - we're flying through these
80:56 - onto onto number 18.
81:00 - a new feature of es6's template literals
81:04 - gotta love template literals
81:12 - use temperate little syntax with
81:14 - backticks to display each entry of the
81:16 - results object
81:18 - of the result object's failure array
81:20 - each entry should be wrapped inside a
81:22 - list element with the class attribute
81:24 - text warning whoa
81:31 - what is this asking
81:55 - all right if we're going to help this
81:57 - challenge out here it's a little
81:58 - confusing
82:01 - but we're first of all i'm going to call
82:02 - this
82:03 - result display array so people get an
82:06 - idea that they're actually dealing with
82:07 - it right here
82:09 - each entry of the result objects failure
82:12 - array each entry should be wrapped
82:14 - inside a list element with the class
82:16 - attribute text code warning
82:18 - comma
82:21 - and listed
82:22 - within
82:24 - the
82:28 - what's the variable name
82:30 - result display
82:34 - array
82:38 - great
82:44 - okay
82:54 - so
82:57 - i'm going to do
83:00 - result dot failure
83:03 - dot map
83:06 - now we're just going to pass the string
83:14 - into a anonymous arrow function
83:18 - and this is just going wait
83:20 - yeah map map does it right
83:25 - yeah
83:28 - actually we're gonna have some fun here
83:30 - i'm just gonna get rid of that and i'm
83:32 - just gonna one line it
83:33 - yay
83:34 - for
83:35 - one lining
83:37 - okay
83:38 - so to start off it's gonna have a li
83:41 - class equals text
83:44 - warning
83:46 - and then template literal
83:48 - v
83:50 - and then close out the li
83:54 - all right
83:55 - run it
83:57 - yay we passed we didn't do anything
83:59 - actually
84:02 - wow all right um it looks like
84:05 - this is a very literal challenge so it
84:07 - seems like we can kind of be stricter
84:09 - with our tests
84:12 - result display is a string
84:23 - no that's two i'm not gonna put no we're
84:25 - gonna we're gonna do this way i like the
84:27 - way that i did it
84:29 - making executive decisions when you're
84:30 - writing the code you get to make the
84:32 - decisions
84:35 - we're going to say that result
84:39 - display array
84:43 - first of all type of
84:47 - is i believe it's array
84:55 - oh it's object
84:57 - like that
85:00 - well
85:03 - it's better than it being like a string
85:05 - so
85:08 - is a list
85:11 - containing
85:15 - code results
85:28 - and we'll do a little fun result failure
85:32 - messages
85:40 - we'll say and
85:45 - result display array dot length
85:51 - is three that's a good enough one
85:56 - say our message is here
86:02 - we'll just grab this
86:21 - okay get rid of that
86:24 - and now we have to test for desired
86:26 - output ah
86:28 - okay
86:30 - um there used to be a way to provide a
86:33 - there there there was there may probably
86:35 - still is they just don't know it so i
86:36 - don't want to deal with it right now but
86:38 - i know there's a way you can provide a
86:39 - solution that you can test theirs
86:41 - against
86:42 - um but i think for the instance of this
86:45 - i'm just gonna do
86:51 - ah you're ready
86:55 - got every
86:58 - value
87:05 - it's going to equal
87:07 - value
87:10 - needs to equal
87:12 - and then we're just going to use we're
87:14 - going to use the exact same thing
87:19 - but
87:30 - and then instead of putting v here we're
87:32 - going to do
87:34 - what is it called result dot failure
87:39 - i
87:59 - result display array
88:03 - is
88:05 - the desired output
88:11 - attempt to test template strings were
88:14 - used
88:17 - all right how do we do that you ask
88:22 - well
88:23 - simply put we're going to need right i
88:25 - know we're going to use code.match
88:31 - and then the message
88:36 - okay
88:40 - so they need to use template literals
88:43 - along with the
88:45 - blink stuff
88:47 - um but i don't want to like limit them
88:51 - this is a tricky one because there's
88:53 - many ways to do it and
88:57 - some valid ways and i don't want to
88:59 - discourage
89:08 - can't be too strict but also can't be
89:09 - too laxed
89:11 - so what if
89:16 - i can definitely at least test for
89:23 - what if we did like we want to test the
89:25 - code
89:27 - for the backtick
89:28 - then
89:29 - potentially
89:33 - oh man
89:36 - excuse me
89:39 - that's the line that we want them to use
89:43 - is there any other way to do it
89:46 - they could concatenate but that's
89:48 - against the rule we're against the rules
89:52 - so i think we should just test for this
89:54 - literally
89:57 - coding and caffeine i could use some
89:59 - caffeine
90:01 - god that'd be a great it'd be a great
90:02 - thing to have right about now
90:04 - um
90:06 - maybe maybe if we if we go for maybe
90:09 - when we reach the next five i'll go make
90:10 - a cup of coffee during a little break
90:13 - all right
90:14 - let's copy that
90:16 - and let's just plop it in right here
90:22 - oh
90:26 - this is gonna be tricky one because i
90:28 - don't know if i have to escape
90:29 - everything in here
90:31 - i think i gotta escape those
90:36 - let's just run this through real quick
90:38 - over here
90:50 - ah we gotta put one here too
91:05 - escape it and then we also need to
91:06 - escape the backtick
91:08 - because that's important
91:10 - okay and then if this in this instance
91:12 - we would have then
91:15 - that does not match
91:17 - hold on so i can oh it's cause it has
91:18 - those in it
91:22 - there we go
91:23 - cool
91:26 - okay so snag you
91:29 - put you in there and we gotta just go
91:31 - back through and double tick
91:34 - i have a bunch of these
91:37 - those don't need to get double ticked
91:45 - yeah a big huge cup of coffee yep sounds
91:48 - sounds about right
91:50 - um
91:52 - i mean i believe every single one
91:55 - yeah you can't do that because that's
91:56 - that's for the text
91:59 - all right guys
92:02 - template strings
92:07 - of course used
92:10 - where is that here we go
92:16 - all right
92:17 - let's go
92:18 - for it i haven't tested this one yet
92:35 - great work let's run the test once just
92:38 - to make sure it's saved and now
92:41 - refresh
92:46 - unlock the code run the test
92:49 - pray everything runs uh things broke
92:57 - result display array not defined
93:03 - ah
93:11 - everything broke now
93:14 - result display is not defined what
93:18 - oh
93:19 - ah
93:23 - excuse me
93:25 - there we go guys
93:26 - all right that's number three
93:30 - two more and i get a cup of coffee
93:33 - let's do it all right
93:40 - es6 adds some nice support for easily
93:42 - defining object literals what are object
93:44 - literals
93:50 - oh
93:52 - oh oh i know what this is
93:59 - all it's asking us to do is just use
94:01 - this
94:08 - so basically we're going to test for
94:11 - i know what i'm going to do well let's
94:12 - see what they say
94:14 - test that the output is named zodiac
94:17 - hasbro
94:19 - 56 male test no colon is present yeah so
94:23 - we'll test
94:25 - we also uh
94:30 - it's an object so i technically can't i
94:32 - shouldn't test for order of things cool
94:37 - let's do this
94:39 - so let's first run the test so our code
94:41 - gets saved
94:43 - and then we'll go through here and
94:46 - write some tests all right
94:50 - assert
94:51 - that the output
94:53 - of create person
94:59 - uh
95:04 - oh we needed deep equals oh let's see
95:06 - how a good learn js book
95:10 - um
95:12 - i don't what's books you can read um
95:18 - learn es6 the hard way i think that
95:20 - one's free online has some good stuff in
95:23 - there
95:24 - eloquent javascript is also a good one
95:27 - um
95:30 - it has some as i don't know how updated
95:32 - it's been it's been a few years since
95:33 - they released eloquent i'm not sure if
95:35 - it's been fully updated especially not
95:37 - the es6 um maybe it has
95:40 - can't remember um also yeah mdn is a
95:44 - really good one i'm i mean i actually
95:46 - have it open right now it's it's just my
95:48 - it's my go-to i find their documentation
95:50 - very nice um i never read the w3
95:54 - school's documentation anymore it's i
95:55 - strictly go on mdn even for html and css
95:59 - um
96:00 - and then steven asked how did i learn
96:02 - javascript this has been the biggest
96:04 - roadblock for me i feel like i learned
96:05 - relearn and get nowhere ah this is a
96:08 - great question um
96:10 - first of all it's like practice makes
96:12 - perfect just
96:15 - um i started off with code academy i
96:17 - think the amount of javascript tutorials
96:19 - i've done probably is like way too many
96:21 - i think i've done one on a code academy
96:23 - i've done the free code camp curriculum
96:25 - i've done the w3schools thing i think
96:28 - they had a curriculum i've done udemy
96:30 - i've tried like coursera as well as um i
96:34 - think even treehouse for very brief time
96:38 - so i've tried a lot of different
96:39 - resources i find udemy worked for me so
96:41 - when you first when you find the
96:43 - resource that works for you
96:45 - keep going back to that resource um
96:48 - udacity that's another good one i think
96:50 - they're just a little bit more expensive
96:51 - sometimes
96:53 - and recently egghead io they have a good
96:56 - they have a good curriculum of stuff but
96:58 - again they have a little bit of a price
96:59 - tag
97:00 - so you figure out your learning resource
97:02 - you go through the videos and then
97:04 - then there's an aspect of putting it to
97:06 - use you really nothing will really stick
97:09 - if you don't use it and
97:11 - that said you don't need to use it all
97:12 - the time but you need to apply it so i
97:15 - think the difference of use and apply is
97:17 - sometimes people miss you need to apply
97:19 - what you learn
97:20 - and you can do that through many ways
97:22 - you can start side projects you can
97:25 - update projects you built while learning
97:28 - you can also contribute to open source
97:31 - now i tend to do the two of them i
97:34 - contribute to open source as you can see
97:37 - and i also
97:38 - write my own projects i believe i have
97:41 - i have two
97:42 - actively developed projects active
97:44 - actively developing projects right now
97:47 - both in javascript both with with react
97:50 - and both of them are quite different
97:53 - but use a lot of the same features so
97:55 - i'm doing a lot of new things for each
97:57 - of them for example one of them is going
97:58 - to have a very awesome authentication
98:01 - api using auth0 which i've never gotten
98:03 - to play with before um so i'm learning
98:06 - by applying my javascript skills to that
98:09 - and uh the other one is
98:12 - strictly just a lot of database stuff so
98:15 - i'm working with a lot of data
98:16 - uh yes they both are i think i can
98:20 - actually
98:21 - believe one of them if you guys um just
98:23 - bear with me a second i'll get up i'll
98:25 - show you guys my github and i'll put the
98:27 - links in the chat so you can see the
98:29 - projects that i'm talking about
98:32 - one of them is cookie jar it doesn't
98:33 - have any code just yet
98:36 - and the other one is viking honors
98:37 - manager
98:39 - so here is one of them i believe it's
98:41 - not on master yet i'm still working on
98:43 - integrate um on an integrate
98:46 - method or on a on a branch to integrate
98:49 - a database into it so that one the
98:51 - master branch on that one is outdated
98:53 - but then i also have this new project
98:55 - which i'm doing a lot more planning on
98:59 - but has if you look in it there should
99:01 - be some pngs those have a mock-ups for
99:04 - stuff that i plan on adding so yeah
99:06 - those are the two projects that i'm
99:08 - currently working on both open source
99:10 - but
99:11 - probably not as uh nicely open source as
99:13 - some other projects are
99:16 - all right back to
99:18 - the
99:19 - coding
99:22 - we were looking at this before
99:24 - yes we got to assert that
99:28 - create
99:29 - person
99:32 - well we should probably just copy this
99:42 - oh what are the objects the object the
99:44 - quality i think object has like a dot
99:46 - equals method but i'm not sure
99:53 - oh are they private repos
99:56 - oh
100:00 - um let me see
100:03 - uh
100:08 - sorry about that i think
100:11 - yeah
100:12 - i'll make um i can make cookie jar
100:14 - public cookie jar
100:18 - is public i believe yeah cookie jar is
100:20 - public um
100:24 - but the
100:25 - but the viking honors is not um
100:31 - so
100:35 - the uh what's it called the viking
100:37 - honors one is not and that i think i
100:38 - need to keep it that way because it's
100:40 - going to be for um
100:42 - some the summer summer camp that i work
100:43 - for
100:45 - uh
100:49 - yeah maybe
100:50 - i don't know how to tell if it's
100:53 - blind or not
100:55 - uh
100:59 - nope it doesn't seem like it's private
101:06 - uh i get a 404 for which one maybe it's
101:10 - maybe it has to do with um the white uh
101:13 - youtube does links but if you guys look
101:14 - me up on
101:15 - github i have a ton of repositories and
101:18 - then
101:19 - one repo is called viking honors
101:23 - manager and then another one is cookie
101:26 - jar so
101:27 - oh that's incorrect
101:33 - the other one is called that so those
101:35 - are the two project names on github if
101:37 - you wanted to look them up
101:41 - cool
101:49 - we were looking for object equals
101:55 - but it doesn't really do that it has
101:56 - something else
101:57 - yeah keys
102:06 - okay
102:08 - all right
102:10 - yeah youtube i don't think you i don't
102:12 - think youtube supports links and um it's
102:14 - chat or if it does it's weird about it
102:18 - let me see real quick
102:21 - okay cool
102:25 - let's keep moving forward
102:27 - so
102:28 - we're going to do some real
102:31 - funky javascript so first we're going to
102:33 - wrap our result object in object.keys
102:37 - and we're going to say
102:39 - dot
102:43 - um
102:51 - for
102:53 - oh
102:55 - this is a hard one
103:07 - i think i can do
103:12 - const
103:14 - name
103:16 - equals
103:19 - zodiac
103:21 - hasbro
103:26 - constant
103:30 - age
103:31 - equals
103:32 - 56
103:35 - and then
103:36 - constant
103:38 - gender
103:40 - equals oh wait this shouldn't be a
103:41 - string
103:45 - gender equals
103:47 - male
103:50 - and then
103:54 - our function
103:57 - well now that it's not a function
104:00 - now it will do return
104:02 - object.keys that create person
104:09 - um
104:11 - name age gender
104:15 - dot
104:18 - every
104:21 - value
104:29 - oh well this is now this is every key
104:32 - all right
104:33 - every key
104:37 - um
104:39 - needs to be
104:43 - the value uh
104:47 - wait
104:51 - i think it might be better if i did
104:52 - const result
104:58 - bear with me guys we're getting there
105:10 - there might be a better way to do this
105:11 - so if anyone notice if anyone knows make
105:14 - sure to make sure to say so i'll keep
105:17 - tabs on the comment section of this
105:18 - video too after the fact so if you guys
105:20 - are watching this in the future
105:22 - um definitely give me some input i'd
105:24 - love to hear it and uh i'll definitely
105:27 - you know everything can get changed so
105:31 - let me know and you can also review it
105:32 - in github let me know if there's things
105:34 - that you want changed
105:36 - all right so that's the result that's
105:37 - what we want and then we're gonna go
105:39 - ahead and copy those three things
105:43 - again place it into here and then we're
105:45 - going to say the every key
105:48 - and we want the the result to be
105:56 - sorry guys
106:00 - now we're gonna all right how about this
106:02 - we do constant p
106:05 - person
106:07 - equals
106:16 - and then we need to return
106:18 - object.keys
106:21 - person
106:23 - dot every
106:24 - key i'm going to say person
106:28 - uh
106:29 - key
106:30 - is going to be equivalent to result key
106:36 - all right okay
106:38 - i think that does that
106:42 - wow
106:45 - and what's what's the intended message
106:49 - the output is
106:52 - okay
107:08 - okay great and now
107:11 - let's do a neat no we have to agree to
107:13 - finish up with an easy one
107:15 - no
107:18 - colons
107:19 - exist
107:21 - anywhere in
107:23 - this one
107:28 - no
107:34 - we're used
107:38 - all right guys wow that was this was a
107:40 - harder one
107:43 - could also be
107:44 - the caffeine that i need
107:57 - rt oh cool the link works
108:00 - your name is also very familiar i
108:02 - believe
108:03 - there's a character in the sherlock holm
108:05 - show i was watching that today and i
108:07 - think he has your name
108:16 - no
108:18 - expected expression got keyword const
108:21 - all right we need to wrap this in a
108:25 - function
108:28 - indeed yeah it does have your surname i
108:31 - knew it
108:35 - don't ruin it for me i haven't finished
108:37 - watching the episode
108:45 - all yet let's see that's that and let's
108:48 - read oh nope
108:50 - i always break gold
108:52 - can't just one-up it you gotta retype it
108:54 - every time
108:59 - all right
109:07 - here we go
109:09 - fresh fresh
109:11 - refresh
109:16 - keep going
109:18 - try again
109:19 - here we go
109:21 - there we go
109:24 - unlock it run it
109:27 - and it passes
109:30 - carlos can you use gulp watch
109:35 - yes so
109:37 - um
109:39 - gulp is watching
109:40 - but
109:42 - even if it was watching the json files
109:45 - we're it's um how do i explain this
109:48 - we need to rerun gulp
109:50 - when the database gets updated not when
109:53 - the json file gets updated so when we
109:56 - the reason why i'm doing i update the
109:58 - json goal probably already refreshes i
110:01 - wouldn't be surprised if it's not um but
110:03 - what at that point the database hasn't
110:05 - been changed so it doesn't matter so
110:08 - when we run node seed it redoes it like
110:11 - re entries things in the database
110:14 - and then you refresh gulp and it
110:16 - re-queries things and then it pumps it
110:18 - all back into the page
110:20 - um
110:22 - this is just a development it's a way
110:24 - the development works it's kind of it's
110:26 - not optimal um and hopefully it'll
110:27 - change in the future but that's just how
110:29 - things are going at the moment um
110:32 - give me one hot second also we just
110:34 - finished another challenge so
110:36 - look at us
110:39 - nothing can stop us now
110:41 - all right great
110:45 - that is four
110:52 - right we're on to the next one
110:54 - one more and then i get to get coffee
110:57 - and then i'll do probably five more and
110:59 - be done for the evening afternoon
111:04 - when defining functions within objects
111:06 - in es5
111:08 - you have to use a keyword
111:10 - function as follows
111:12 - es6 you can remove the function keyword
111:15 - and colon all together when defining
111:17 - functions and objects here's an example
111:19 - of the syntax
111:21 - we factor the functions that gear
111:24 - inside the object bicycle
111:26 - all right so i think all we have to do
111:28 - is write
111:29 - it's like here
111:40 - okay
111:41 - hold on a second
111:43 - what is this like tess the output is
111:46 - sending requests to yanoshima moto
111:50 - who is that
111:51 - is that that's not the bitcoin guy is it
111:54 - who's the
111:55 - no that's something with an ass right
111:58 - who created created bitcoin
112:02 - yeah that's satoshi nakamoto
112:06 - yanoshi mimoto
112:10 - well
112:12 - no idea
112:14 - but let's
112:15 - keep coding
112:25 - i guess um i guess he was the guy that
112:27 - uh created this challenge in the first
112:29 - place
112:31 - all right oh god
112:35 - let's do it all right well it sounds
112:37 - like this guy doesn't actually know what
112:38 - he wants me to test but we'll do it
112:39 - anyways
112:43 - basically we want to verify that set
112:45 - gear still works
112:47 - so
112:50 - let's do a before and after test
113:03 - um so we're going to say
113:06 - can't or we'll say
113:08 - actually we don't have to we just
113:10 - do bicycle
113:13 - dot gear equals equals equals two
113:16 - and and
113:18 - by sickle
113:22 - dot set gear
113:25 - three
113:29 - uh
113:41 - oh we can do i'll just do this
113:43 - don't get too complicated we'll just set
113:46 - it equal to like 48
113:49 - and then we'll say
113:53 - oh let's do we'll use a function
113:58 - and we'll say
114:00 - return
114:03 - bicycle dot gear
114:08 - equals
114:10 - 48.
114:14 - yeah that's good
114:17 - message
114:20 - um
114:25 - code set gear
114:28 - is a function
114:31 - and
114:33 - changes
114:34 - the
114:35 - gear
114:36 - very oh no
114:38 - code
114:40 - gear
114:43 - variable
114:46 - great
114:48 - and we already wrote this one so let's
114:49 - just snag that
114:59 - all right and
115:03 - node seed
115:06 - give it a few seconds and we're going to
115:08 - restart gulp
115:18 - refresh the page
115:24 - you see the issue is
115:26 - this
115:27 - won't work because gear is using it
115:31 - so what we're going to do is we're going
115:32 - to check that set gear doesn't have it
115:34 - with it so traditionally
115:37 - set gear would have looked like set gear
115:43 - right what's the original uh
115:46 - and they would have to have the function
115:51 - so we're actually gonna test for this
115:53 - little bit right there
115:55 - okay i know i know what we're doing
116:02 - um what's this thing called what would
116:04 - we call this declarative function was
116:06 - used
116:13 - and we're going to say code.match
116:16 - well we'll start with the colon and then
116:18 - we'll have the
116:20 - optional white space the word function
116:22 - and then open close
116:27 - with a optional white space in there
116:32 - we'll make sure that that doesn't exist
116:38 - okay
117:10 - yes
117:11 - victory is ours
117:12 - another five completed
117:15 - let's
117:16 - uh commit the work
117:19 - and then i'm gonna take a very short
117:21 - break to get some coffee and then get
117:23 - right back to it
117:24 - so
117:25 - before i leave let's first shut down
117:29 - gulp
117:30 - then shut down
117:32 - run git status
117:34 - add our challenge
117:36 - mpm run commit
117:40 - we're going to say test
117:42 - challenges
117:44 - es6
117:48 - challenges
117:50 - what do we do we did 16 c16 probably
117:53 - through c20 at this point
117:55 - which one is this use class syntax to
117:58 - define a constructure function
118:01 - use
118:03 - class syntax it that's 21. so we did c16
118:06 - through c20
118:08 - nothing else necessary
118:10 - and then get
118:11 - push
118:13 - origin
118:15 - feature
118:16 - add es6 tests
118:22 - all right and that
118:24 - does it
118:26 - for those
118:27 - let's go back over here
118:30 - give it a minute it should pop up
118:32 - and then we'll see what's to do next
118:41 - oh no
118:45 - is it gonna refresh for me
118:49 - usually it does automatically
118:52 - there we go
118:54 - awesome
118:57 - go through here
119:00 - guys look at all these
119:02 - look how great we're doing
119:09 - getting them done
119:10 - awesome
119:13 - all right and
119:15 - this probably just passed oh no it's
119:17 - rolling running through there
119:21 - how many more do we have we only have
119:23 - seven more
119:25 - i mean we probably could finish it
119:31 - all right well
119:33 - i want five minutes and then i will be
119:36 - back to
119:37 - push through these last seven and then
119:39 - that'll be all the tests we're in for
119:40 - the es6 challenges
119:42 - so um yeah be back in five
119:46 - let me just type that in here
119:47 - can i say something
119:50 - i guess i can't
119:52 - oh here we go
119:54 - be back in five minutes
122:42 - i got coffee and now i'm
122:44 - back it's time to do some awesome coding
122:48 - and finish up these challenges
122:51 - all right i think i got a couple
122:52 - questions
122:54 - hey how can i become a contributor like
122:56 - you if we could camp
122:58 - yeah so quincy sent out a message on
123:00 - medium um carlos definitely right
123:03 - there's also a
123:04 - contributor channel on getter um
123:09 - i'm gonna have that on this browser but
123:12 - there's one on there so you can totally
123:14 - use that
123:16 - and
123:19 - i don't think there's really much else
123:21 - to it
123:23 - a lot of stuff i'm doing today is what
123:26 - like we need when it comes to
123:27 - contributing so if you have this kind of
123:29 - javascript skill then like let us know
123:32 - we'll get you set up and it's a lot of
123:34 - fun
123:36 - so far today we've worked through
123:37 - basically
123:39 - 11 through 20. we've done these 10
123:41 - challenges we've done a little bit of q
123:43 - a with them try to like test out what
123:46 - they're actually asking
123:47 - and then we need some edits and things
123:49 - and
123:51 - wrote some tests and soon
123:54 - i'm going to jump right back into it
123:55 - with the next seven and then hopefully
123:57 - when we finish these seven um i'll be
124:00 - able to merge everything into the actual
124:02 - repo and we can get some people running
124:03 - through them and getting some feedback
124:05 - and i'll be able to make more changes
124:06 - later on
124:10 - there's also a user in here earlier who
124:12 - was literally named like coffee and cafe
124:14 - or code and caffeine or something and
124:16 - was like yeah could use some of that
124:20 - okay let's get back into it
124:22 - so we'll move this up here for now
124:30 - okay let's see what we got use class
124:32 - syntax to define a constructor function
124:34 - and use getters and setters to control
124:36 - access to an object understand the
124:38 - differences between import and require i
124:40 - actually don't know the differences
124:41 - between those two i'm still confused
124:43 - about it so it'll be a fun one to learn
124:45 - use export to reuse the code block cool
124:48 - use
124:49 - ampersand or use star to import
124:51 - everything from a file
124:53 - you start to import everything from a
124:55 - file
124:56 - import a default export i think i got a
124:57 - duplicate in there so
125:00 - we'll get through that
125:02 - but all right
125:04 - we are back to it let's run d
125:09 -  beta base
125:11 - then we'll gulp
125:20 - awesome
125:21 - and
125:23 - go back to the bash
125:26 - and now
125:28 - let's get back to coding
125:30 - es6 provides a new syntax to help create
125:33 - objects using the keyword class
125:36 - this is to be noted that class syntax is
125:39 - just a syntax
125:41 - and not a full-fledged class-based
125:43 - implementation of object-oriented
125:45 - paradigm
125:47 - unlike in languages like java python
125:49 - ruby
125:50 - in es5 we usually define a constructor
125:53 - function and use the new keyword to
125:55 - instantiate an object
125:56 - the class syntax simply replaces the
125:58 - constructor function creation
126:02 - yes it does
126:03 - notice that the class keyword declares a
126:05 - new function
126:06 - and a constructor was added which would
126:09 - be invoked when new is called
126:11 - to create a new object
126:15 - use class keyword and write a proper
126:17 - constructor to create the vegetable
126:20 - class
126:20 - the vegetable lets you create a
126:23 - vegetable object with a property name to
126:25 - be passed to the constructor
126:28 - sweet sounds good to me all right
126:31 - class vegetable
126:36 - and
126:37 - a little
126:38 - styling going
126:40 - constructor
126:44 - we'll just call it
126:45 - name
126:47 - this dot name equals
126:51 - name
126:53 - oh can you guys hear the fans yeah
126:55 - they're kicking in aren't they
126:57 - yeah i'm actually working off a macbook
126:59 - uh
127:00 - just just a standard macbook pro i
127:02 - believe so this thing's doing uh quite a
127:05 - lot um
127:07 - you know
127:08 - coding is live streaming off
127:10 - and coding at the same time
127:12 - i think it's running an instance of a
127:13 - database and a local server for the for
127:16 - the local environment and it's running a
127:18 - browser my webcam microphone
127:23 - yeah we're pushing it to its extreme
127:24 - it's a lot of fun
127:26 - all right let's see constructor name
127:29 - great all right that should work
127:32 - and we're gonna run the tests
127:34 - of course they pass there's none there
127:38 - but what should we test
127:39 - let's go over here
127:43 - test the vegetable is a class
127:46 - uh
127:47 - okay
127:48 - i want to see something real quick if i
127:50 - wrote class x
127:57 - this dot y equals
127:59 - z
128:03 - yep what is type of x function
128:09 - but we could do like function dot
128:13 - constructor oh here we go
128:22 - oops
128:24 - type of x dot constructor
128:28 - there we go
128:30 - okay so in order to test something as a
128:32 - class we can do assert
128:36 - that
128:39 - vegetable
128:41 - type of
128:43 - vegetable
128:45 - equals equals equals function
128:48 - and
128:50 - type of
128:52 - vegetable
128:54 - dot constructor
128:59 - equals equals function
129:02 - and then
129:05 - you put the message in here
129:10 - and then we say
129:13 - vegetable is a class
129:31 - why don't we use mocha instead of
129:33 - writing them by hand you
129:35 - you're asking
129:36 - the my favorite question ever because i
129:38 - would absolutely love to be writing
129:40 - mocha or tap tests
129:42 - um but i just don't think that's how
129:46 - this works for exa uh particularly in
129:49 - fact we actually may be using mocha
129:51 - underneath the hood
129:52 - um
129:54 - but in order for
129:55 - the whole curriculum to be able to just
129:57 - kind of be generated into any database
129:59 - anywhere like through like json files
130:01 - and then be version controlled via json
130:04 - files
130:05 - um
130:06 - i guess the developers quincy and bouncy
130:08 - like the guys who um like really
130:10 - originally sat down and
130:12 - put most of the original work in i
130:15 - believe the other guy is um
130:19 - what's his name berkeley yeah berkeley
130:21 - and quincy when they like pushed through
130:23 - all this through they were like this is
130:25 - how it's gonna be and um that's how it
130:27 - is it could definitely change in the
130:28 - future but um this this style is the
130:31 - same we have it's basically just the
130:33 - word assert like you're asserting
130:34 - something and then a
130:36 - true dash false and then a message
130:42 - here we go
130:45 - thank you
130:47 - all right
130:56 - message that's good
131:01 - now we need to assert that the
131:04 - class word was used so essentially well
131:09 - yeah okay i know what i'm gonna do i'm
131:10 - just gonna do a code.match guys i'll
131:13 - just do class
131:14 - it's really that
131:16 - easy
131:31 - test that other objects could be created
131:33 - with the class
131:34 - sounds good
131:36 - assert um
131:42 - what i want to do i'll just do like
131:44 - const
131:46 - a equals new
131:48 - vegetable
131:51 - uh should we do something stupid should
131:53 - we like put like apple yeah
131:56 - well we'll have some fun with this
131:59 - so we'll say const a equals new apple
132:02 - and then we'll say uh
132:04 - return
132:08 - type of a equals equals equals object
132:12 - it's four equals it's too many
132:15 - yeah i like that
132:21 - um first i'll delete this let's make
132:23 - that
132:25 - it will say
132:27 - message
132:32 - i forgot kept that
132:38 - other objects can be created
132:42 - using
132:44 - using
132:49 - other
132:52 - instances
132:53 - of
132:57 - vegetable
133:01 - can be
133:03 - instantiated
133:12 - right
133:14 - let's run node seed
133:24 - restart the server
133:31 - refresh the page
133:36 - unlock the code
133:38 - run the test
133:41 - on the next one let's go
133:45 - all right we're on to number
133:48 - 21 22 now
133:50 - so what kind of coffee we drink in um
133:54 - i think this is just some
133:55 - house blend that my family purchases
133:58 - just black i don't take anything in it
134:00 - what's your what's your kind of coffee
134:08 - i'm also i'm also a tea guy i like
134:11 - green teas and
134:13 - um different herbal tea i'm not a fan of
134:15 - black tea but
134:17 - it's uh
134:19 - yeah usually usually you'll find me
134:20 - drinking tea during the day i don't
134:21 - usually do coffee unless it's in the
134:23 - morning but someone got me thinking
134:24 - about coffee so i had to go with it
134:33 - all right getters and setters
134:38 - ah ground at home very nice yeah black
134:41 - black all the way i had i used to do
134:43 - ground my own and they used to have a
134:45 - french press but
134:46 - um
134:47 - that's not with me at the moment so back
134:49 - to just k-cups at the mo
134:52 - right now
134:54 - cool
134:55 - uh
134:56 - coding coding coding these are
134:57 - classically called getters and setter
134:58 - methods yeah we're getting some object
135:00 - oriented stuff my favorite
135:03 - setters are meant to modify the value of
135:05 - an object's private variable based on
135:06 - the value passed instead of just could
135:08 - involve calculations or even over any
135:10 - previously completely
135:11 - get writer set writer see i've never
135:14 - actually used this before this is really
135:15 - cool um someone just asked
135:17 - what do you recommend me to do when i
135:20 - get
135:20 - stuck depends how are you getting stuck
135:23 - you just don't know how to um you know
135:26 - implement an idea or are you
135:29 - unsure about the idea in the first place
135:31 - um i guess a general answer would be mdn
135:34 - uh go to the docs look up documentation
135:37 - um
135:38 - i don't stock overflow is great
135:41 - don't always have to go there
135:42 - immediately um
135:44 - sometimes just figuring out i've spent
135:46 - i've spent i mean it's crazy to admit
135:48 - but i've spent sometimes an hour or more
135:51 - working through one little bug just
135:53 - because it was some
135:54 - i was i had a misnamed variable and i
135:56 - just kept overlooking it so um
135:59 - you know i guess another tip is take a
136:02 - break you know look at it if you can't
136:04 - figure it out do something else or go
136:06 - for a walk do something get a glass of
136:08 - water come back and i guarantee you
136:10 - you'll find it within seconds um
136:12 - strangely it just works like that
136:15 - so let's look over here so i believe
136:16 - that this under underscore means private
136:19 - they don't seem to go into that which
136:23 - don't know why but
136:25 - i guess that's an aspect here
136:27 - um
136:30 - oh yeah it seems like it
136:37 - notice the syntax we're using to invoke
136:39 - the getter setter they're not even
136:41 - functions
136:43 - we just oh oh okay so guys this is cool
136:47 - it's like properties
136:52 - oh this is actually this is actually a
136:54 - really fun example
136:58 - all
136:58 - right
137:00 - so we're going to create a class
137:01 - thermostat
137:14 - how does this do we can use the getter
137:15 - and setter in the method
137:18 - i don't know
137:20 - constructor
137:22 - we'll just call it temp
137:32 - oh we'll call this fahrenheit
137:43 - let
137:44 - the temperature
137:50 - hold on a sec i gotta think through this
137:57 - um
137:59 - oh i missed
138:00 - all right
138:02 - so
138:10 - interesting
138:11 - um
138:13 - so we're creating the thermos is going
138:15 - to be
138:16 - a new thermostat
138:18 - at 76 degrees fahrenheit and then we
138:19 - want to get the temperature is going to
138:21 - equal thermos dot temperature
138:26 - which is going to return
138:29 - which is going to set the temp
138:32 - variable to 24.4 so we need to have so
138:43 - hold on a sec
138:45 - i see okay so we'll do a get
138:50 - temperature
138:55 - and this will return
139:01 - oh we gotta do some math they gave us
139:02 - the formula
139:06 - interesting they gave you the formula to
139:07 - calculate fahrenheit
139:15 - wow this is this is an incredible uh
139:17 - challenge um
139:19 - quick i see a question do i invest in
139:20 - bitcoin i do not i do not have a single
139:24 - penny invested in any cryptocurrency
139:25 - bitcoin litecoin ethereum and though i
139:28 - am very um
139:30 - i like to say i'm pretty well educated
139:32 - in the field and have spent a great deal
139:35 - of time reading white papers and reading
139:37 - into it but um
139:38 - it's just not
139:40 - not something i feel worth investing at
139:42 - the moment and also it shouldn't be
139:44 - treated as an investment it should be
139:45 - treated as a currency and
139:47 - currently it is not so i don't i don't
139:50 - exactly support the use of bitcoin or at
139:53 - least the investment in this in bitcoin
139:55 - at the moment
139:58 - um
139:59 - that's a whole other conversation
140:02 - so let's see here
140:03 - uh our our api is going to deal
140:07 - in fahrenheit's
140:09 - so this guy gave the formula for
140:12 - fahrenheit with celsius but
140:15 - we're feeding in fahrenheit so we're
140:17 - actually gonna have to reverse this
140:18 - formula guys we're gonna do some algebra
140:22 - this is actually hilarious i haven't
140:24 - done
140:25 - algebra in
140:27 - way too long
140:28 - did you get for going to college and
140:30 - finishing your math minor way too early
140:33 - all right we're going to
140:35 - start off by
140:36 - subtracting
140:38 - 32
140:40 - and then
140:41 - multiplying by 5
140:44 - and then dividing by nine
140:48 - ah yeah all right so it's going to be
140:51 - five ninths
140:52 - times
140:54 - the quantity
140:55 - fahrenheit minus 32 we're going to equal
140:58 - celsius
141:00 - so we're going to reverse that over here
141:03 - so we're going to say
141:06 - oh wait we're over we're down here now
141:12 - we're going to say c
141:14 - equals
141:15 - 5 9 times
141:18 - quantity f minus 32.
141:21 - can i code if my math is the worst one
141:23 - possible
141:25 - um you could definitely do web
141:27 - development um html css javascript a lot
141:30 - of stuff like that could definitely be
141:32 - done without math but if you're looking
141:33 - to go into object oriented programming
141:36 - or data then you need math um even uh
141:40 - even basic algebra and a background in
141:43 - algebra with a back and then a little
141:45 - bit of discrete mathematics and you'll
141:47 - be fine for most programming but if you
141:49 - ever really want to get into like data
141:52 - databases and like um
141:54 - you you really want to have a decent
141:56 - understanding of so at least some higher
141:58 - other level math concepts otherwise your
142:01 - program will be limited
142:03 - uh one aspect to this though is
142:05 - algorithms and data structures if you
142:07 - don't have um
142:10 - a pretty good understanding of like
142:12 - pre-calc at least and like calc one may
142:14 - be
142:15 - then sometimes analyzing algorithms and
142:17 - making things as efficient as possible
142:19 - can be uh difficult but it's definitely
142:22 - not um you know
142:24 - impossible it can be done
142:26 - um
142:27 - but yeah that's usually why they're
142:28 - coupled because they go in hand in hand
142:30 - really well together
142:38 - all right
142:39 - put the fahrenheit in there now
142:41 - and now with that formula out of the way
142:43 - we can say
142:44 - what other free versus resources do you
142:46 - recommend while i'm doing free code camp
142:48 - um i mean i would recommend free code
142:51 - camp um read medium
142:53 - the blogging platform find follow blogs
142:56 - uh including the free code camp one
142:59 - uh youtube has a couple video guys i
143:02 - don't watch any of them but i know they
143:04 - exist
143:05 - and
143:06 - build side projects i always recommend
143:08 - having one side project i have two right
143:10 - now um we talked about that earlier
143:12 - today but definitely side projects those
143:15 - when you apply what you're learning that
143:17 - is even if you're not planning on
143:18 - launching anything or selling anything
143:20 - even if it's just like something that
143:21 - you use and or you build it and then you
143:24 - you archive it for forever
143:26 - the application of building something
143:28 - with the skills you're learning is
143:30 - instrumental to your future success
143:34 - all right let's do 5 9 times
143:39 - this dot underscore f
143:44 - minus 32.
143:48 - and we're going to set
143:54 - oh wait i think i just did this wrong
144:04 - uh
144:05 - this is killing me
144:07 - um
144:20 - no i did this right
144:23 - but setting it you're going to do this
144:27 - dot f
144:28 - oh
144:29 - oh but you said it
144:34 - so
144:35 - the ap this thing its api it stays as
144:38 - fahrenheit inside it but when you set it
144:41 - or get it it's always celsius i see
144:44 - all right
144:46 - so with that
144:48 - we're gonna call this c
144:50 - and now we know actually i gotta go put
144:52 - that calculation back
144:54 - s times 9.0 divided by 5 plus 32 i
144:59 - should probably do that too over here
145:06 - and
145:09 - now
145:25 - all right that should be a good enough
145:26 - hint
145:31 - wow all right guys
145:33 - oh
145:35 - let's do this
146:00 - all right and then we want to try i'll
146:01 - just do the type of
146:04 - thermostat
146:09 - equals function
146:11 - and and
146:13 - type of
146:14 - thermostat
146:17 - dot constructor
146:20 - equals equals function
146:22 - i used this is if you're interested in
146:25 - where i learned this little trick this
146:27 - type of and the type of itself um i was
146:30 - actually writing a asynchronous
146:33 - method for a back end library called
146:36 - fastify and one of the
146:38 - lead maintainers showed me that the best
146:40 - way to check if something is a
146:42 - asynchronous function is that it has a
146:45 - dot a dot then callback or something
146:47 - along those lines you can check that
146:49 - just based on the way functions are
146:51 - passed around within an application
147:02 - all right we're going to test i've
147:04 - already done the test if class keyword
147:06 - was used so we're going to snag that
147:12 - and test that other objects can be
147:14 - created with this class all right
147:24 - i'm gonna quickly copy the message i
147:27 - used here though
147:30 - i don't know
147:31 - oh wow
147:32 - sorry hold on
147:47 - here we go
147:57 - how do you want to how do we want to
147:58 - test this
147:59 - um
148:03 - oh yeah
148:06 - silly me
148:10 - someone's going to look at this code in
148:11 - the future and be like
148:12 - apple's not a vegetable you're gonna be
148:14 - like you're right it's not
148:26 - oh let's do 32.
148:29 - see ready we'll know that their thing is
148:31 - working so we can say return type let's
148:34 - choose t
148:35 - and
148:36 - we'll verify that t dot temperature
148:43 - equals e equals equals zero because
148:46 - 32 degrees fahrenheit
148:48 - is supposed to be
148:51 - zero celsius
148:56 - all right
149:18 - proof
149:25 - oh no it didn't save my work
149:31 - okay
149:34 - fine
149:36 - i'll rewrite the entire
149:38 - class
149:39 - for you guys right now
150:11 - do i need a function declaration here
150:15 - yeah i do
150:18 - and then this will return so this needs
150:20 - to return
150:44 - yep c for celsius
150:48 - and then
150:53 - and we'll be able to say this dot f oh
151:13 - oh and get that semicolon in there
151:19 - let's let me run the tests
151:25 - thermostat
151:31 - okay let me
151:33 - just in case this breaks again let's
151:35 - refresh
151:39 - uh that's not what i wanted
151:42 - their
151:43 - turmoil supposed to be thermo
151:48 - and now we run node seed
151:57 - and rs
152:05 - cool
152:18 - victory
152:21 - yay hi timo yeah we did and uh we've
152:23 - gone through um
152:25 - 12 es6 challenges we're gonna do
152:29 - our aim is 17 so
152:32 - five more to go it's been uh
152:34 - quite a quite a ride
152:40 - oh this one looks like it has a test
152:42 - just it's not working so we'll see
152:46 - okay in the past the function required
152:48 - could be used to import the functions
152:50 - and code and external files and modules
152:52 - while handy this presents a problem some
152:54 - files and modules are rather large
152:56 - you may only need a certain code from
152:57 - external resources es6 is a very handy
153:00 - tool known as import with it we can
153:02 - choose which parts of a module
153:04 - or file to load into a given file saving
153:07 - time in my memory consider the following
153:08 - example imagine that math underscore
153:11 - array underscore functions it has about
153:12 - 20 functions but i only need one count
153:15 - items in my current file
153:17 - the old require approach would force me
153:19 - to bring in all 20 functions with this
153:21 - new import syntax i can bring in just
153:23 - the desired function like so
153:26 - using object destructuring
153:27 - a description of the above code
153:32 - ah cool
153:33 - there are a few ways to write an import
153:35 - statement but the above is a very common
153:36 - use case the white space surrounding the
153:38 - function
153:39 - inside the curly braces is the best
153:41 - practice it makes it easier to read the
153:43 - important statement great note
153:45 - the lessons in this section handle
153:48 - non-browser features
153:50 - import and the statements we introduce
153:51 - in the rest of these lessons won't work
153:54 - on a browser directly however we can use
153:56 - various tools to create code out of this
153:57 - to make it work in browser
153:59 - yeah like
154:00 - babble and the appropriate imports add
154:03 - the appropriate import statement that
154:05 - will allow the current file to use the
154:06 - capitalized string function the file
154:09 - where this function lives is called
154:11 - called string functions in this same
154:12 - directory as the current file
154:14 - all right well i would write import
154:18 - capitalize string
154:21 - from
154:23 - um
154:25 - yeah so i thought
154:27 - string functions
154:34 - so i thought
154:39 - whoa all right
154:44 - uh what is it doing here
154:48 - uh it looks like they just never
154:49 - finished their
154:54 - not the declaration
154:56 - uh what should we call this
154:59 - uh
155:03 - valid
155:06 - import
155:09 - statement
155:14 - cool
155:33 - timo i love your icon the monkey is very
155:35 - cute
155:41 - the choir is not defined
155:50 - ah
155:51 - okay
156:04 - this seems like an issue
156:09 - challenge seed
156:13 - i am a little confused so it asks us for
156:16 - this do i have to use like use strict is
156:18 - that
156:22 - oh nope i mean right there you strict
156:33 - the t in the word the in the note
156:36 - paragraph should be uppercased
156:41 - where
156:45 - ah nice catch quinn
156:55 - so it seems like this
156:57 - in particular test wants the require
157:00 - word and it's not running without it
157:03 - but this is not i don't
157:06 - i'm gonna flag this one
157:11 - what number is this understand the
157:12 - difference between between import and
157:14 - require
157:16 - this is 23 okay so require
157:25 - is not
157:26 - defined
157:28 - so i don't know why this is doing it
157:31 - um but i have an idea that it has to do
157:34 - with the fact that we're trying to use
157:36 - like a import statement in browser and
157:38 - it might be something on the back end i
157:40 - don't want to try to delve too much into
157:42 - it let me just make
157:44 - sure it wants
157:47 - i why are they putting i in there i'll
157:49 - probably just use g
157:53 - and
158:00 - they're asking for
158:02 - that anyway yeah sure
158:04 - yeah team you think it's back end
158:08 - okay well we wrote the test case that's
158:10 - really all we need for that one so we'll
158:12 - move on to the next one
158:13 - keep pushing through
158:21 - let's see
158:26 - we only have four more to go
158:31 - i think this is the one that i create
158:33 - and export fallback with export default
158:36 - yeah i didn't write that one there i'll
158:38 - go copy that
158:49 - yeah
158:50 - luminous you're right that's a good
158:51 - point
158:54 - second note paragraph also has a typo
158:58 - let's see
159:02 - i can go back to this we'll keep working
159:04 - through it
159:17 - great note
159:27 - cool
159:29 - that's that i'd like to uh take a
159:31 - luminous good good catch teemo and i
159:34 - want to take a luminous
159:36 - um point into this because that is a
159:38 - very that's that's very true um and that
159:41 - this seems to skip right over that
159:43 - um the only thing though
159:45 - is what if we don't what if we're not
159:47 - using a a node
159:49 - a um an npm project and we don't have
159:51 - known modules
159:54 - could the with the import still work i
159:56 - mean
160:00 - maybe we can make we could probably
160:02 - write another note about it um but let
160:04 - me see so now that i've done that
160:06 - let me write the note paragraph and then
160:09 - we can go from there we can run the test
160:11 - again and see if the the dot forward
160:13 - slash fixes something um
160:17 - even though i don't think it will
160:18 - because the require still isn't
160:20 - being loaded
160:22 - alright let's write strong
160:24 - note
160:30 - um
160:31 - in most cases
160:35 - oh
160:36 - hi siri
160:40 - sorry guys
160:42 - um
160:43 - in most cases
160:46 - the
160:47 - file path requires
160:50 - a
160:53 - um
160:57 - before it
161:00 - otherwise comma
161:04 - node will
161:07 - look
161:09 - for a dependent or will look in the
161:16 - node modules
161:19 - directory
161:24 - before it
161:26 - otherwise node will look in the node
161:28 - modules directory first
161:31 - trying to load it
161:33 - as a
161:34 - dependency
161:37 - great
161:38 - i think that justifies that
161:43 - once we finish once i finish writing
161:45 - pretty much getting the base for all
161:46 - these tests done um making this this
161:48 - kind of part of the curriculum like
161:50 - usable uh we're gonna want some qa so if
161:54 - you guys um are pointing these things
161:56 - out now we have 27 tests to go through
162:00 - could use would love the help
162:02 - so
162:03 - but that's step two
162:06 - let's uh
162:08 - unlock the code run it
162:13 - yeah all right that's fine this test
162:16 - isn't running because it's having some
162:17 - require issue i'll make note of that
162:19 - let's move on to the next one though
162:22 - use export to reuse a code block
162:29 - oh well let's code for my trials in
162:31 - order for this to work though we must
162:33 - utilize one of the statements that goes
162:35 - with import known as export when we want
162:37 - to we want some code function or
162:39 - variable to be usable in another file we
162:42 - must export it in order to import it
162:44 - into another file like import export is
162:47 - a non-browser feature
162:49 - the following is what we refer to as a
162:51 - named export with this we can import any
162:53 - code we export
162:56 - into another file
162:58 - with the import syntax you learned in
163:00 - the last lesson
163:02 - here's an example
163:03 - capitalized string export
163:06 - had export functions how to export
163:08 - variables alternatively if you would
163:10 - like to compact all your export
163:12 - statements into one line you can take
163:14 - this approach
163:16 - either approach is perfectly acceptable
163:18 - below are two variables that i want to
163:20 - make available for others file other
163:22 - files to use utilizing the first way i
163:25 - demonstrated export export the two
163:26 - variables
163:34 - oh so we can he just wants the words
163:37 - export written here and here
163:44 - all right
163:52 - there we go
163:54 - i'll get rid of the eyes again oh
163:58 - and
163:59 - throw in
164:01 - this time he has the
164:03 - at least has
164:07 - a semicolon on the back but we need to
164:09 - write in message
164:18 - um
164:21 - let's write code foo
164:24 - food
164:25 - you guys know what's on my mind is
164:29 - exported
164:42 - great
164:47 - same deal i don't think exports are
164:49 - gonna work um this seems like some sort
164:52 - of challenge issue they're uh
164:55 - it's not something we're gonna try to
164:56 - solve this evening
164:58 - maybe another video or someone else does
165:03 - how much coffee i drink i'm so tired
165:14 - yep exports is not defined i don't know
165:16 - why
165:17 - um
165:18 - so we're just gonna add so we're gonna
165:20 - add
165:23 - exports is not defined
165:30 - number 24.
165:32 - all right
165:47 - whoever wrote these just forgot the
165:48 - right way to write the tests
165:51 - suppose you have a file that you wish to
165:52 - import all of its
165:54 - contents into the current file
165:56 - this can be done with the import star
165:58 - syntax here's an example where the
165:59 - contents of a file named math functions
166:01 - are imported into a file in the same
166:03 - directory
166:05 - import star as my math module from
166:08 - yep and breaking down that code
166:12 - okay you may use the any name following
166:15 - the import as portion
166:17 - of oh well first typo is that
166:26 - i'd like to inc because the ads is a
166:28 - very important part
166:30 - of the code
166:43 - cool
166:44 - easy peasy import star as my
166:48 - string module from
167:16 - um
167:18 - properly uses
167:21 - the
167:22 - code
167:23 - import star as
167:26 - syntax
167:28 - all right export in one line should be
167:31 - export
167:32 - in or export default
167:37 - export is named and that why export does
167:40 - not make any sense
167:50 - luminous i would encourage you to make a
167:54 - uh create a new issue and reference
167:56 - these challenges directly because um
167:59 - you're making some very valid points and
168:01 - uh i don't want to take full credit for
168:03 - him
168:04 - uh let me
168:06 - i can point you in the right direction
168:07 - there i'm going to keep going through
168:09 - what we have but definitely definitely
168:11 - for this export stuff um it sounds like
168:14 - they could they could use a nice little
168:16 - update so um
168:18 - in case you don't know just
168:20 - go to free code camp go to issues new
168:23 - issue
168:24 - and just go for it i believe you can
168:26 - also find the beta live here so you
168:30 - could just go to the beta
168:32 - freecodecamp.org
168:34 - map es6
168:36 - and then
168:38 - use export to reuse a code block
168:41 - make sure you copy this link and go from
168:43 - there
168:44 - definitely be a great thing to add
168:49 - to the project
168:52 - cool
169:31 - no i'm missing something here
169:35 - here we go
169:36 - that'll fix that this test probably
169:38 - won't work but
169:40 - we'll we're not even going to try it i
169:42 - know they're not well actually let me
169:43 - get the error
169:44 - um
169:46 - so import star as my string module from
170:00 - come on
170:05 - so required not to find is the same
170:08 - error for question number 25.
170:12 - oh yeah timo i am nice catch
170:27 - i'm watching i'm tracking my uh battery
170:29 - use and stuff for my laptop to make sure
170:31 - things are going well and um
170:33 - vs code is currently using 162 of my
170:36 - battery which is why it's been slowly
170:38 - dying while we're sitting here
170:40 - um
170:41 - i believe it's the fact that i literally
170:43 - am running a database inside of my
170:46 - editor along with
170:49 - serving files via a local server so
170:52 - yeah
170:55 - let's move to the next one we're almost
170:57 - done
171:06 - in the expert lesson you learned about
171:07 - the syntax referred to as a named export
171:10 - uh
171:11 - luminous see this file has something to
171:13 - do on export default
171:16 - this allowed you to make multiple
171:17 - functions and variables available for
171:19 - use on other files
171:21 - excuse me
171:24 - there's another export syntax you need
171:26 - to know
171:27 - known as export default
171:29 - usually we'll use a syntax if only one
171:31 - value is being exported from a file it
171:33 - is also used to create a fallback value
171:34 - for a file or module
171:36 - here is a quick example of export
171:38 - default
171:40 - you cannot use export default with var
171:42 - letter const the following function
171:43 - should be the fallback value for the
171:45 - module please add the necessary code to
171:47 - do so
171:48 - export default
171:54 - that wasn't that hard
171:56 - all right same stuff this guy's just got
171:58 - that so let's get rid of his eye and
172:00 - then add our message in here
172:06 - so we'll say properly
172:08 - proper
172:10 - use of
172:15 - uh
172:16 - export here any export fallback
172:28 - i want to get the output error
172:31 - so i can track that
172:54 - this has the same exports not defined
172:56 - error okay
173:05 - oh my gosh
173:07 - we're on the last one
173:10 - forgot to mark these down
173:13 - one more one more
173:16 - in the last challenge you learned about
173:18 - export default and it's uses it's
173:19 - important to note that to import default
173:21 - export
173:22 - to import a default export you need to
173:25 - use a different import syntax in the
173:27 - final example we have a function add
173:28 - that is default the default export for
173:30 - the file malfunctions here's how to
173:32 - import it
173:38 - the syntax differs in one key place the
173:40 - imported value is not surrounded by
173:42 - curly braces
173:44 - default export okay cool
173:46 - so as simple as going import subtract
173:48 - from
173:51 - math functions
173:56 - yeah all right i'll run these tests we
173:58 - know they're gonna fail
173:59 - this is a requires one so we're gonna
174:01 - write number 27 here
174:04 - it's funny kind of alternates
174:06 - and we'll go down here guys
174:09 - we did it we're at the bottom of the
174:11 - file
174:16 - literally three hours later well
174:18 - six because things didn't work out at
174:21 - first
174:22 - um
174:23 - properly
174:26 - imports
174:31 - export default
174:34 - function method here we go
174:41 - all right let's do let's make sure
174:43 - everything looks good we're going to
174:44 - commit this thing and wrap up
174:52 - it has been a very very long live code
174:54 - session
174:57 - very thankful for everyone that got to
174:59 - join me today and uh learn a little bit
175:02 - about what it's like to contribute to
175:05 - free code camp
175:07 - all right
175:08 - great well uh missing a little something
175:11 - here ah semicolon all right we're not
175:13 - gonna render for that
175:14 - that's about that so let's wrap up
175:17 - one more time um
175:19 - i'll walk through it for the end
175:21 - quit everything that you're doing quit
175:23 - uh turn off turn off gulp run get
175:26 - status
175:27 - get status will tell you what has
175:28 - changed you're a git ad and you just you
175:31 - can add a file manually by typing the
175:33 - whole path or you can just do the dot
175:35 - and it adds everything
175:36 - and then normally you would write git
175:38 - commit m and then a message but because
175:41 - free code camp is awesome we have this
175:43 - terrific npm run commit command which
175:46 - has an interactive commit
175:48 - thing in the
175:49 - so we're going to write test challenges
175:51 - and we're going to say es6
175:54 - chal
175:55 - and we'll do c
175:57 - what did we do before we did it now
175:59 - we're doing c17
176:00 - through c27 right
176:03 - no sorry this was c21
176:05 - through c27
176:09 - and we don't need any other ones runs
176:11 - get push
176:13 - origin
176:14 - feature
176:17 - add es6 test
176:19 - so
176:20 - i'm pushing to my branch of free code
176:24 - camp which is origin i when i do get i
176:27 - always make my origin remote
176:29 - my
176:30 - branch and then my and then i might i
176:33 - use upstream and upstream refers to the
176:36 - like
176:37 - the master or like the one that like the
176:40 - developer has created so like for
176:41 - example free code cam free codecamp or
176:44 - slash free codecamp is my upstream um
176:47 - repository
176:50 - so now that i've done that uh we can go
176:52 - and check here we'll see we already have
176:53 - a notification and that means that
176:56 - this just got updated and that's all 27
176:58 - challenges um tested and run through
177:02 - we still got a bit of more work to do um
177:06 - this was a lot of fun i'll end today
177:08 - just by going over here with the emojis
177:11 - i don't know how many of you guys are
177:13 - left in the chat but there is anyone
177:15 - left i'd love to answer some questions
177:17 - before we uh
177:19 - head out before i head out for the
177:21 - evening um
177:24 - we'll say pr challenges
177:27 - and i'm going to say
177:28 - update that comment
177:31 - we're going to say found
177:33 - issues
177:35 - with challenges
177:38 - number 23 through number
177:42 - c
177:44 - 27
177:47 - oh what that was not what i wanted to do
177:53 - here we go
177:56 - nope
178:00 - come on
178:01 - work with me here
178:02 - uh
178:05 - require
178:06 - is not defined
178:11 - equals
178:13 - produced
178:16 - for challenges 23 25 27
178:20 - and then we had
178:22 - exports is not defined
178:26 - produced
178:27 - for challenges
178:29 - 24 comma 26.
178:32 - great
178:35 - all right guys
178:36 - i am
178:38 - exhausted from coding for this long but
178:42 - i'm very happy i did it um
178:46 - glad having you all here this has been
178:48 - quite an experience
178:50 - uh
178:50 - feel free to reach out with any
178:52 - questions ever about open source about
178:55 - free code camp about coding in general
178:58 - i'll be happy to answer them i believe
178:59 - my twitter is in the description so you
179:01 - can find me on there you can also reach
179:02 - out to me through the um the getter chat
179:05 - for free code camp and yeah with that
179:07 - i'm gonna say thank you very much this
179:09 - is uh ethan airwood signing off hope to
179:11 - see you guys in the future

Cleaned transcript:

awesome yo we're live again all right let's do this let me just twitter verse this and we'll get right back into it technical difficult these have been conquered that's how you spell that come join me live all right guys we're gonna get right back into it here guarantee it um i just gotta find the link to the video so i can share it a little bit here we go we're going again guys isn't that just great thank you quincy cool all right i'm going to give give it a few minutes just so i can get some people in here and then i'm going to get right back into coding because um this has been quite a bit of technical difficulties we got a mix of hardware we got some software we needed to you know fix some uh settings and things but now we're totally rocking it right with that i'm gonna do a little pop out the chat and then i'll knock you away get ready you cool got that there all right well so hello again to anyone who has joined us again uh two two hours later but we're rocking and rolling um i'm gonna go for a little bit longer until basically we get through as much as we can um so yeah to get right back into it uh i'm gonna restart the my dev tools here so we got the we've got mongodb running which is where all the challenges are stored and then we're going to go back over to the gulp profile run gulp so we have that thing building and then to give a brief overview of what we're all looking at i have my vs code editor which is running a terminal inside of it which is really awesome the code is right here for the es6 challenges then i have the github account um my github that i use to track my changes as well as the actual website you know the challenges itself what is being rendered onto screen um before uh the technical difficulties we completed the 11th challenge so we'll actually be able to update that here um actually no we won't update because we haven't done a pull request basically today every five that i do i'm going to do a pull request and i'll probably just keep a tally on a note card just for simplicity's sake that way i can keep track of what we're doing so we've done number 11 which is the first and let's move right into the next one great okay so use the spread operator to evaluate arrays in place introduces a spread operator which allows us to expand arrays and other expressions in places where multiple parameters or elements are expected the es5 code below uses apply to compute the maximum value in array returns 89 math.max.apply null and then the array we had to use null comma array because math.max array returns not a number math.max expects comma separated arguments not an array the spread operator makes this syntax much better to read and maintain okay it's unpacked array in other words it spreads it out yep all right only works in place like in an argument to a function or in an array literal the following code does not work copy all the contents in array one into another array array two using the spread operator oh okay two three array one cool all right so first thing that comes to mind for a challenge like this uh let's see what the test we have tests that array two is a correct copy of array one test that array one has changed and then i guess via part four it's going to be an issue though um because we can't test before and after yes thank you jesse yeah it's been uh we got everything working now we're rocking and rolling all right um test spread operator was used so i think i think i'm not gonna do test array one is changed we're going to remove that one i definitely want to test if they're the same and i want to test the spread operator is used and i think that's all we're going to have to do i don't think that this is oh you don't set it equal to each other i see well then i'll use a set i'll say that everything in array 2 is in array 1 meaning that it was a copy of it and then all right push who maybe we'll do instead i think we'll do is in the test itself we'll use something like this and we'll push an element to it and then verify afterwards that array two has not changed um so that is we'll keep this we'll keep this challenge simple um because what we're showing here is we're trying to show that we're just spreading an array in place we're not trying to you know show um every aspect of like assignment and whatnot uh also this needs to get updated because there needs to be a space there okay um another thing i noticed that we don't have the brake line so let's grab that real quick snag that go over here paste it in now we want to i'm going to want to remove this because i don't think this is important for this challenge and of course everything that i'm doing here you know making these changes and what we'll do is we'll propose these changes to the repository and then when someone comes through and says actually i don't agree with that then we can go back and we can add them in but for the purposes of contributing when you're writing code you get to make the decisions and then when you propose and you make a pull request then that's when people can challenge you and say i don't think that's the way to go or you should do it differently cool so back to here so let's write some a search assertion so test that array two is a correct copy of array one all right so we're gonna basic thing and then we're gonna have some function there comma the message okay and then we'll just i can write the message in now array 2 is correct copy of code right 1. great remove that for now and get my comma back over here okay so let's think about how to do this um let me grab my notebook real quick arrays are a lot of fun arrays you get to do some fun things with you get to iterate them you get to loop through them you get to compare them you get to even use sets so i don't know what the best way to do this will be we can probably keep it quite simple so i'll start by making an arrow function this way we can contain our code and then i'll basically can i do white space uh no i don't believe i can um so to start off we're going to say constant array 1 is going to equal just a very basic array of two elements and then we want to say that constant array two is going to equal the spread of array one and now we want to compare the two so traditionally when you want to compare to arrays i would probably write a deep equals method to verify that everything is equivalent but because this is such a simple example we can actually get away with doing a return array 2 0th spot is db equals the 0th index of array 1 and array 2 is equivalent to array 1. great that should do it for the first one now test let's do the let's save this one for the last because we'll talk about that now let's test spread operator was used okay so we know how the spread operator should be used um and we're going to use a code.match when we get to it write a message we'll say code spread operator was used now let's go over here we'll add in our um regular expression syntax and now let's think about the way this should look so no matter what because we need array two they need to be producing array two then we will probably want to test for this whole line right here with an optional oh well first of all um use strict and then we have i think this is valid yes that is so we can have optional white space between here and here but then we necessary white space here and then also optional white space between here and here it said we don't even want to test this let's just test this aspect right here so let's go ahead and write well i think i have to escape this yep have to escape that and then we're going to have optional white space the spread operator array 1 and then optional white space close the brackets and we're not going to test for a semicolon that's unnecessary and we're going to say dot dot dot spread operator was used to duplicate array one make sure we get the close in there i believe this is going outside right yeah cool all right let's let's work our way back through this to make sure that everything has worked so far and then we'll see where we can go just so i can talk through that basically i just ran node seed before which reseeds the database it goes back through all these json files and produces all the challenges and then i just restarted the account the um server that is running my instance of this locally okay so i believe all i have to do is write dot dot array one run the tests great they worked but um before i move on i think i want to add one more test here i want to i want to make sure that they aren't just doing this because if because technically this is a valid way to copy an array but that um if i remember correctly or the way at least this works in java is if you were to then edit an option an object like an entity in array1 it'll actually change it in array 2 as well so we want to test to make sure that what happens in array one doesn't happen to array two so let's assert again or actually this might not be working so i don't have a comma there we go comma all right assert close that off let's throw the message in here now let's say that um we'll say code array2 remains 008. okay i just realized um this first test is doing nothing because it's not i'm just i just wrote code to check the code we need to you code.match um otherwise this is pointless um because this is not like we can't test what they actually input here this isn't getting what they've actually input that's my mistake let me um let's think about this how can we do this better we could verify this is a tricky one well technically we really can't check that then because we're not using a function here what we could do is we we could edit the challenge and see we go from there so let's say let's make a function declaration let's say let's function we'll say duplicate and we're going to take in an array and we're going to just return that array is that is that reasonable is that a is that a fair thing to do and then we would want to say constant array two is going to equal duplicate array yeah so we're gonna remove this line would this still work oh wait no right one yes it still does okay so let's change the um let's change the challenge here um into so let's we're going to change the instructions here and we're also going to change the code so first of all we can delete this or actually let's keep let's grab the change this line say change this line and we're basically going to say i'm going to want to complete i'm going to want to copy this and i want to i'll do all my line by line well we'll just we'll just roll with it all right so we can delete this one it's already there and then let's snag this line toss it in here grab the return and then grab the squiggly bracket and we're going to need this line here and then that should be golden okay now you should be able to say so wait a second we're going to test one thing real quick you guys are learning with me here i'm not entirely sure everything that we have access to when it comes to um this testing framework i believe this will be a valid test i think this might work in which case we don't need all this but then there is an issue with testing hmm let's uh we're going to save this over here for just a little bit and uh let's just snap it into um kind of like text edit i have like a text edit here we go perfect ah let's uh let's not have that open that's my batch profile alright let's save that in there so we have that just in case i'll move that away yes this video will be available after the live session okay so we've done that let's go back to writing the line in that const array 2 should just equal the this and just edit when they say change this line okay and then this method should return true if these things are defined okay let's write a node seed i'm going to restart the server great let's do a refresh and let me just go ahead and basically just remove this uncomment this and then if this runs okay this passes this this passes okay so i was correct um i will i was wrong at first but now i'm correct we do have full access to the variable types the variables um that are written in the editor so with that let's think about how we can check if array two is equal to array one um i think a good way to do that is basically just do um basically just use a for each loop and then i believe the four each will pass in the index and yeah for there so let's just go to mdn and get the for each method so we can make sure we do this correctly um so it seems like we get the callback gets the current value the index and the array great all right so let's go ahead let's go over here i'm gonna say array two dot four each and then we're gonna have a callback and the callback is going to have the current value and the index and then we're going to know what we'll do we'll use every instead because i believe every returns true if it passes for every item every and it's a function let's see so we have the the current value index as well yep so we're going to use every guys yay for awesome es6 things and then we're going to say we're going to return true if v is equivalent to array one the index if that if this passes then we know we have a correct copy um we will return false in here for now remains unchained or when array one is changed okay i'm going to restart great let's go back over here we'll refresh my code should save good and if we run unlock and run there we go all right so this one's passing now which is great um it means that we do have a direct copy of which is um really really good uh so this if you guys are wondering this is the code snippet that i'm using i'll even post i'll even um copy it and paste it into the youtube chat so you guys can use it in your own thing so that is a shallow equal array equivalency um checker what i mean by shallow equal is that it doesn't truly check that each item here is equivalent to the other item because technically if you had if you guys are aware of some objects and some nested nested data structures can lead to being buggy when you just use a triple check so while something may actually be the same it will return false because two objects even declared exactly the same are not equal um we can even i can even show this quite quickly in here i believe if we do this is this going to be the same yeah so if you notice two objects of the same type of literally they literally look exactly the same but because they're not the literal same memory address they're not equivalent um so this the method that i posted there will not work however if you use the deep equals method where it actually traverses all all um keys and parameters of an item then it would be better so yeah let's move right on through here let's check to make sure that array 2 remains unchanged so if we go in here we say array 1 dot push and we're going to add an item like june then oh what are we going to do actually now we're going to use a function i believe so let's pass array 1 and array 2 into there and then we're going to return that array2 dot length is less than array1.length and before i commit i just want to make sure that that's how you do length yeah there we go cool all right save that and run node seed restart our server refresh the page and unlock our code yay all right good that's two down let's move right on through onto the next one cool all right what we got here use the structuring assignment to assign variables from objects we saw earlier we earlier saw we we saw earlier how spread operators can effectively spread or unpack the contents of the array we can do something similar with objects as well destructuring assignment and special syntax for neatly assigning values taken directly from an object to variables consider the following es5 code voxel axis 3.6 y 7.4 z is 6.54 okay basic es5 here is the same assignment statement with the s6 destructuring yep if instead you want to store the values of xlx into a b you have that freedom as well great okay use destructuring to obtain the length of the string greeting okay first of all we're missing the proper wait a second why is the hr below it it's a high up here uh that's interesting we go ahead and snag this anyways we gotta use we have to have that use strict line um but i'm still confused is why they use the things underneath it well we'll roll with it okay so we want to say use destructuring to obtain the length of the string greeting oh interesting um oh okay so let's think about this if we have a string in node um we're actually solving the challenges too guys it's kind of fun so let's say we have our string um you know uh let's just say like abc you want to get the length you just type that length right so if you think about it this dot length is a property of the object abc or the string so what you should be able to do in that instance is go ahead and say const or we'll just use i'll just use let length equals or let's just do length we'll assign it to the letter l equals a b c d e f l should be six perfect all right so what we're expecting here is curly brackets around the word length and it should equal greeting this is the expected solution and we want to test that destructuring was used i also want to make this challenge a little bit more and i want to assign it to len i want i want the user to assign the length to the word ln um because the word the the the string length is technically a keyword because it's so popular of a parameter for um arrays as well as strings so let's go ahead and go into our code first of all let's add some white line space in here um great so i want to say use destructuring to obtain the length of the string greeting comma and assign that assign the length to code len great this is going to be a fun one assert and then length this is really equals just equals 11. because remember they got to use the elen otherwise it won't work and then message is going to be code len equals 11. cool um then we can say assert um we're going to want to make sure that the length was assigned to lens we should well we should test that length exists um so actually we'll start with that assert type of len equals equals equals string string and then the message is um code uh constant we're gonna say variable length exists and is a string and that's that that that okay and if we want to make sure that's how that actually comes out we'll just do yep string now let's assert that our users actually went ahead and used destructuring so uh properly destructured um or just was gonna say destruction was used i think that's i don't think there's a better way to say that okay so let's do code.match close it off get our rejects ready let's think about how this is going to look so we're definitely we don't need to worry about cons but we definitely need the squiggly bracket and then we're going to have the optional white space we need the strict word length there's another way to get it and then we need the optional white space the colon optional white space the strict word l e n optional white space close the bracket off and then we should just test for pretty much that whole line so we can do optional white space equal sign optional white space greeting because they really shouldn't um there really shouldn't be any deviation from this and we'll skip the semicolon because people don't always put them so let's go ahead and write that it's ready all right regular expressions go so i believe i'm going to get rid of the squiggly mark and then optional white space the word length optional white space colon optional white space word len optional white space squiggly bracket optional white space equal sign optional white space the word greeting all right great let's roll it with that first need here node seed anyone has any any questions feel free to reach out in the chat i'd love to answer them change that up uhoh something broke ah something failed here oh unsigned token all right where did we go wrong i see i see okay no trailing comma it's json for you steven uh please ask any questions man i'd love to i'd love to help out all right we're running again let's refresh all right so code did not save so let's go ahead and let's type in the potential solution run the tests oh all right so what went wrong here doesn't need to be a string that is completely wrong i don't know why my brain was thinking that it needs to be a number i was thinking length but like string and i don't know let's just roll with that so that one's good um let's be verbose here and actually check to make sure that edit makes sense our code will luckily um this local uses local storage and we'll store my code so all i have to do is refresh and run the tests again and we should be set to move on to the next one and that would bring us up to three awesome refresh okay scroll down unlock the code run the test and happy coding all right three for three guys let's go to the next one use the structuring assignment to assign variables from nested objects we can similarly just structure nested objects into variables consider the following code a start oh well wait what um so we're saying get the variable start the property start from a and then from the object and then then get x oh no sorry store that as the object this is a confusing one i've actually never used this um yes i can fill you in what we're doing so we are contributing to free code camp right now we are writing on tests for the es6 challenges at the same time we're doing a little bit of q a we are um i'm going through the beta challenges and i am not only am i reading through the descriptions and trying to test out the challenges as is and filling out some of the solutions but i'm also writing the test that tests to make sure that everyone else is solutions in the future will pass as well um and while i'm doing that i'm explaining a couple es6 things and if i'm open to questions and um soon once we hit five five um challenges for two away i will be doing some github stuff to show you all like what it's like to um push and pull from the github the free code cam repository great so the maximum of tomorrow so this is going to be a complicated one i think first of all we know that we're going to be assigning this to the word forecast and max of tomorrow is going so we got to start with today and then we gotta say max and assign that to the word max of tomorrow and that nested block should do it um i don't exactly have a way to test it but i'm just going to run the test it's going to pass but we didn't actually write anything that just saved my code so now let's write some tests um we're also missing the use strict line i don't know if the use strict line needs to exist i'm going to keep copying and pasting it over until and i think it'll just be a very easy cleanup job if we don't actually need it um because i'd rather put it in there and then remove it later on okay so this one's an easy one this align so we're just going to write assert max of tomorrow row equals equals equals 84.6 and then the message is going to be simple as this and we'll go ahead and write code here remove that and now talk about we're going to say nested destruction was used so i'm going to test for this line pretty much exactly there there's really is no other way to do it um and with that let's do i'm going to um in case you guys are wondering i am writing some stuff down on the notebook just so i can see it um keep in mind and also shout out to github i've got my little hubot github notebook pretty special definitely guys should get some um yes steven these are the challenges that you see when you work through free code camp we're writing them right now so that when we release the beta hopefully on christmas um we'll uh have some fun things for you all to see all right let's go through here we're gonna have the screwy bracket potential white space word today um optional white space colon optional white space squiggly optional white space the word max optional white space colon optional white space max of tomorrow optional white space square bracket optional white space squiggly optional white space equals optional white space forecast great this is going to be a nice and long regular expressions let's go ahead and write this um first of all yeah well let's roll through here i'm going to say assert code.match message get that in there hello how you all doing today see someone just is here from india it's pretty awesome i'm in the u.s and um i'm in new jersey at the moment even though i spend a lot of time in boston let's go all right guys ready for this regular expression escape the squiggly optional white space the word today optional white space colon optional white space the open squiggly bracket and then optional white space the word max optional white space colon optional white space max of tomorrow optional white space close the screwy bracket close the next squiggly bracket but there also needs to be some optional white space in between more optional white space the equal sign more optional white space the word forecast great um is there anything else we want to test i think that's a solid one all right let's let's quickly let me just check over max of tomorrow's equivalent good and then we have we have the the close or sorry open optional today optional colon optional open optional max optional colon optional the word max of tomorrow optional closed optional closed optional equals optional forecast will it test for single white space or all white space between levers between letters great question so the reason why i'm using this right here is an optional it's wild card which means it can be zero or many um i can show you that in here um so let's simplify this let's just literally do we're going to say a optional white space b and we're going to stay at a and we have a ton of white space that passes we have a b um here and we can do a single space and all three of these pass these are all valid for this regular expression so what we're doing is we're basically saying there can be white space there can also be no white space and that's okay um and that's what this is testing for in fact the the forward slash s is white space and then the wild card means zero or many we also have a plus sign for one or many and then i think there's one more um i believe it's zero or none so there's alright is that what this is it's zero and one so if you have one if you so for example this does not pass but these two do um so those are our three white space tests great all right that ran let's run oh oh yeah let's run node seed and then let's go here and restart the server um oh what time is it it is almost 3 p.m for me in the afternoon which would be 1500 if you're on military time like i usually am all right let's refresh this saved it unlock the code run it all right something did not work why does it not equal that who can tell me oh because i made a mistake in my solution see that guys to tomorrow you'd think that i would catch that but you get kind of caught up thinking about the code and which means that i did this and correct this needs to be the word tomorrow instead all right let's be verbose check it and we'll get on to the next one there we go there we go that work oh no okay broke gulp cool all right let's see oh i apologize for the dog barking all right unlock the code run it and we're off to the next one all right guys that is four let's do one more and then we'll do a little we'll commit some things to get and do some fun things all right es6 makes destruction arrays as easy as destructuring objects it does one key difference between the spread operator and array destruction is the spread operator unpacks all contents of an array into a comma separated list consequently you cannot pick or choose which elements you want to assign to variables ah oh i know what this is doing um let's do this the variable uh variable a is assigned to the first value of the array and b is assigned the second value of the array we can also access the value at any index in the right with the structure we're using commas to reach the desired index use the structuring assignment to swap the values of a and of a and b so that a receives the value stored in b and b receives the value stored in a i think it wants us to do this oh it looks like this one might already have tests let's see oh look at that whoa what does it say you're right all right guys let's see what they have here uh see they're testing for a word um equals why would it be testing for two comma one it doesn't make a lot of sense oh unless they're using they're pulling let's just run it and see what happens okay so let me um not i guess it works so we're gonna skip this one because if it's running it works but i'm not entirely sure i guess what this is doing i don't i'm not familiar with regular expressions enough to say but i guess this is actually grabbing oh this is your capturing groups that's what it is okay so guys um let's learn let's do some let's learn something fun here so if you notice this here and you see where it also copied secondly these are capturing groups you notice that by the parentheses around the word uh forward slash w that matches any character any any like character a through z uppercase lowercase as well as zero to nine and underscores i believe so that captures the character and then this one this so this is going to capture and store it as like capture one and then this second capturing group with the second set of parentheses says grab the next letter and say stored in capture two then later on in his regular expression his or her regular expression this you escape a number and that will refer to a previous capturing group so this two refers to this capturing group right here while this one refers to this caption group right here awesome all right let's submit and go to the next challenge so that was technically that was 11 through 15 i believe let's just check so use what's what was the title of the last one to assign variables from array yep so we just did 11 through 15. so let's take a quick um break from coding and we're actually going to push some stuff to get first off let's go ahead and cancel this and turn these off and then let's think about the right way to do this i want to actually get my pull request up as well uh there may be a communication here all right i haven't gotten any review yet um so we're so this is a pull request that i have um which is currently tracking the feature request uh my ad es6 tests so because at the beginning of this video back when we were doing technique we were working through technical difficulties i um merged i i mean i updated my branch to the uh master so we're gonna have no we currently have no merge issues with this um with this pr so we're gonna be safe to push to it and with that let's run git status and see what we've changed so notice the only thing that's changed the json file that's a good thing because it's the only thing we've been typing in the whole day and what's awesome about free code camp is that it actually has a npm run commit command and what this will let us do is create our commits um but something is not working ah get add now run get npm run commit great so we'll go down to the word test and then we're going to say challenges and then we're going to a short short message we're just going to say um es6 chao 11 through 15. it might not be working because of the numbers no issue numbers so it's gonna it doesn't like me putting things so we're gonna say like c11 through c15 will that work there we go um we don't really need to do any of these awesome oh we have an mdm update i'll go run that real quick while we go check out um oh well here hold on a sec guys all right run that and now let's check on here so we'll refresh and yes it should any second now this should pop up with our commit right ah no we have to get push here we go push our commit origin feature add es6 tests here we go okay so we have the commit we've pushed the commit and now if you look over here we'll give it a minute ah boom right there it pops up it's running camperbot's running travis ci is running to make sure that the build builds successfully um and from here we would be good to merge now i do have the ability to merge into the master however i do not enjoy i want i always want someone to look over my code before i do that um so until then uh we're just gonna keep pushing here and as long as we maintain the the um forget the word i guess the the correctness of our branch which is feature idea six tests then we'll be fine um the way we do that is what i ran through before where i fetched the upstream master or the upstream staging reset my branch to that and then cherry picked my commits so what i'm going to keep doing is until i get to that point i'm just going to keep cherry picking these three commits until we're good to go all right so we're done with those five are there any questions in the chat before i move on to the next five you guys have an amazing bootstrap walk through any plans of making sas or css grid material well let's see what we have over here responsive web design we have the basic css visual design accessibility web design principles we have the flexbox tutorial and applied design so frontend libraries we have bootstrap and we also have sas right here um i believe yeah it has even has challenges steven so um you uh definitely it's coming um it's in beta and yeah cool let's also go ahead and update here we know that with polar crest finished so we're going to go ahead and update our emojis so that if someone else wants to come by and check they'd be like oh yeah look with all the work they've done cool halfway there guys halfway there let us get right back into coding um before i do that i'm going to take a quick drink of water and make sure this was run yeah we're good here we'll get everything going again and a quick drink always stay hydrated everybody it's important thing to do cool brain food called gummy bears all right and we're on to the next one destructuring assignment with the rest operator to reassign array elements i use this one a lot okay a b d structure the rest of the array great the rest element only works correctly as the last variable in the list as in you cannot use the rest operator to catch a subarray that leaves out last element of the original array cool stephen are you working through the beta or are you working through the main curriculum all right so the challenge is we're basically just going to do a slice and we just want to take the first two out main curriculum all right cool yeah keep keep going through the main curriculum stephen and um you'll see there's a little bit of sas in the data visual section um but i don't know it's not going to be if i remember correctly it's not going to be as you are familiar with like with all the testing and stuff i believe in the new curriculum that actually is tested and all that fun stuff um okay so how would this look i think this is as simple as going we would just destructure typing backwards here everybody do a b cool that should work and there doesn't seem to be any tests so let's go ahead and write some tests all right so we have to do a deep equals again in our shallow equals um i had the code snippet so we already know we can do that so snap that again and we'll just plop that into a text thing just so i have it oh look at that all right let's assert then put the message in here we're going to say code array is code now um oh here's a fun one ready so just do we'll just say array dot every and then we're gonna literally do vi is uh value is equivalent to i plus two so we're doing a little you know little like cheating thing here basically just notice that or actually index would be plus three because like you know you have zero one zero plus three is three one plus three is four so on and so forth um that's a good one that's a that's an easy way to do this uh because we're just using the incrementals and then we can do a cert source dot every comma i say that the value is equivalent to i plus one instead and say our message is code source code is i'll copy that in a second and we gotta finish the message block comma great all right let's get rid of these okay so we have two easy asserts to write so let's start with the first one and we'll say assert that the code dot matches regular expression i'm gonna put the message in here and we're gonna keep working through so destruction was used let's go back and look at our code so we know our solution basically is going to have some word character um sammy i have been coding for about four years now but i've really only been doing the open source thing um since like really like heavily like this past september but i've been familiar with the get kind of aspect for about a year so we have optional white space word character optional white or word character option white space comma optional white space so much fun white space word character optional white space comma optional white space destructuring with the word array because we need it to be named array optional white space closed bracket that'll be good enough regular expression i believe so we have to do the open go here then do the optional word character it needs to be one so we'll just do strictly one yep just leave it as is optional word character comma optional word character optional space word character optional space optional space dot dot dot array optional space and close bracket all right and we got one more um assert at the code dot match so we want to know that slice was not used so a fun one to write is you literally just you look for the word slice but you just know you just flip it to make sure that they didn't actually put it in there i'm going to say i'm going to say array dot slice was not used and i'll probably write this i'll do array dot because this is literal i might have to do this that's a bam or something like that stephen i'm not sure what you mean by uh bam bam sammy says planning to study electrical and electronic engineering next year which programming takes a big chunk out of the course but sometimes i don't know where to start and feel overwhelmed um sammy one thing i can tell you is um coding is a wild roller coaster and there's a really awesome community especially here at free code camp for you to learn so if you just start out as small as you possibly can and just keep working your way up eventually it'll be you know second nature and um with electrical and electronic engineering what i've been told is that you really your kind of programming will be more lower level um instead of like you know a lot of the high level object oriented stuff especially not even like web design you won't really see um unless you decide to take that of course and um with lower level with lower level programming it will be more complicated but if you get a good sense of math some discrete structures um you know learn the basic syntax of javascript and python um which we will be working heavily on you should be really you should be set and just take it slow take your time learning these things it doesn't it's not going to come overnight but it's definitely doable and there's also a lot of fun support so you can always reach out if you need it let me write this message and i'll respond um which one was this oh yeah the structure destructuring was used all right i think i got another question here while i write i'll do the node seed while i read this how are you feeling about the vue.js framework i just started learning it need to know you need to know do you think if it will get picked up because as of now there isn't much docs about it so vue.js is a incredible framework i do not know it yet i do plan on learning it um it's a great thing to have in your tool kit um there is for what i understand there is pretty decent docs and actually has a lot of really cool um addons as well i believe there's something called like nuxt.js which is a vue.js like uh like almost like a static web loader i believe really good for front end projects um vue is a lot smaller than react and i think it's a lot computationally less it doesn't have the same um obviously it's not going to be the same as react uh it's a great thing to have in your tool belt um and i wouldn't discount it i just think that react has a react does have a very large presence in the front end thing but they're not the only one and definitely learn view if you can um what motivated me to get into programming started with uh for me it was just i always thought coding was this really cool thing you know though you know you always see it on like tv and stuff like hackers and things um and i was like well i can't become a hacker so uh let me learn how to build websites so i did i learned um used i think code academy when it used to be like completely free um and i learned that in high school and then from there i just kept working on it and eventually worked my way up until doing um javascript and then getting more complicated from there earning some alert looking into object oriented programming and basically running with it all right we got everything to pass except one guys let's figure out what happened oh something did not work was that a is there something wrong with in here no all right um why did source not work zero one two three four five six seven eight nine i'm confused guys i don't know what's wrong with this line let me um let me run it in node real quick oh am i missing something nope well i'm not even in node oh wait interesting i wonder what's doing this why would that run false source.every is not a function um stephen says how long did it take you to learn node um still learning node actually uh done a little bit of contributing i've gone to two node conferences and that has helped a lot sort of learning views is much smaller you should pick up angler and react to my goals um dead zombie i'd encourage you to focus on one of them and then when you are very confident with one of them then pick up another and then leave it at that i think learning all three might be a little overkill and you'll realize that there really isn't a point especially the difference between angular and react i would encourage you to go with react it's much more widely adopted um and a lot more of like some popular open source projects like free code camp um i find it a little bit easier to understand and like i said do react then view or the other way around do view then react that's my personal opinion but i would refrain from going through all three it might be a little overkill um all right guys let's see what is happening is source being edited is that why does i don't think that that would affect it but what is source okay a and b and then array guys i don't understand what's going on let's um go back we'll run node seed one more time and we'll say node oh you know what it might be i think it has to do with the std out let's see maybe that's it let's unlock the code run the console ah it says source is not defined i don't know why i see the console says source that every is not a function but array had every is a function oh gosh this is really confusing guys i don't know what's wrong well then i'll just get rid of this line i don't know what's up and that doesn't make sense i think it might have to do with how we're spitting things out of these tests because obviously it's not just running so they might have to do is the way like what is being passed through um i'm not exactly sure we'll get rid of that and the other ones are passing so we're gonna one more time run node seed and that is our took us a while but that was our first challenge um for this set do a little restart um let's keep pushing through a little refresh i mean i don't even know why we'd have to test source to begin with it's not being it's not being written by the user great all right guys we're on to the next one the structuring assignments to pass an object as a function's parameters in some cases you can destructure the object in a function argument itself consider that yep okay yeah it does all right let's see what this wants us to do use function argument destructuring i think i know exactly what it wants basically just right max min um yeah all right we'll run our tests just so we have our code saved and now let's get to writing them oh something hung up yeah let's just go gulp being gold yeah stephen is very right um you just if you just you know one it's really easy to learn another and um if you know something in coding like if you learn python for example if you learn javascript do a well you can take that directly over to python and then when you know python really well you'll be and you have that object oriented mindset you'll be able to pick up java or c plus or c sharp and you'll be you'll be perfect um if you don't mind me asking how old are you i do not mind i am 19 years old cool all right let's test these things assert stats as an object uh sure we can do that type of stats equals equals equals object yeah go go 19 cool all right and on to the next it's an easy one let's do another another easy one here assert that the value half is equivalent to 28.015 no sorry half is have i had any coding internships jobs um i do i have um i started off as a web developer in high school part time and then from there i did a lot of um did a little bit of freelance on a lot just a little bit of freelance and then i went to college or university and learned a bunch of new programming stuff joined some clubs went to some events like a hackathon and then from there i built some of my own stuff and then did some open source and then recently i accepted a position as an intern with microsoft for next summer so going up cool all right let's check destructuring was used we need to test for this line right here so let's do some write downs right we got parentheses empty whites optional white squiggly optional the word max or technically not the word max we can just do we'll just do word because that matches a single character though right there we go cool and we'll do another one like that with the optional white spaces in between and another optional white space close it off white space parentheses and thank you very much sammy i wish you the best of luck with your with your uh endeavors too all right let's keep going through so open that up or escape it optional that optional word more than one optional comma optional word optional escape it optional close it and we'll say destructuring was used all right have a good one man thanks for joining us all right save that and let's do over here run node seed now that we will restart refresh unlock the code run it half is not 28.05 hmm well maybe that's not the right math so let's see 56.78 plus it was like oh well i don't even remember i can't remember it ah all right let me just go ahead and do it in node 56.78 plus negative 0.75 divided by 2. i don't have these let's go over here okay that should be that but it's not so let's find out why what is half let's check our console half is 28.015 so i don't know why this is failing well half is a oh i see ready so half itself is a function not just a variable so we actually have to pass it the variable stats and now we have to say half stats is it all right there we go restart the server refresh the page unlock it and run it we're golden all right we're flying through these onto onto number 18. a new feature of es6's template literals gotta love template literals use temperate little syntax with backticks to display each entry of the results object of the result object's failure array each entry should be wrapped inside a list element with the class attribute text warning whoa what is this asking all right if we're going to help this challenge out here it's a little confusing but we're first of all i'm going to call this result display array so people get an idea that they're actually dealing with it right here each entry of the result objects failure array each entry should be wrapped inside a list element with the class attribute text code warning comma and listed within the what's the variable name result display array great okay so i'm going to do result dot failure dot map now we're just going to pass the string into a anonymous arrow function and this is just going wait yeah map map does it right yeah actually we're gonna have some fun here i'm just gonna get rid of that and i'm just gonna one line it yay for one lining okay so to start off it's gonna have a li class equals text warning and then template literal v and then close out the li all right run it yay we passed we didn't do anything actually wow all right um it looks like this is a very literal challenge so it seems like we can kind of be stricter with our tests result display is a string no that's two i'm not gonna put no we're gonna we're gonna do this way i like the way that i did it making executive decisions when you're writing the code you get to make the decisions we're going to say that result display array first of all type of is i believe it's array oh it's object like that well it's better than it being like a string so is a list containing code results and we'll do a little fun result failure messages we'll say and result display array dot length is three that's a good enough one say our message is here we'll just grab this okay get rid of that and now we have to test for desired output ah okay um there used to be a way to provide a there there there was there may probably still is they just don't know it so i don't want to deal with it right now but i know there's a way you can provide a solution that you can test theirs against um but i think for the instance of this i'm just gonna do ah you're ready got every value it's going to equal value needs to equal and then we're just going to use we're going to use the exact same thing but and then instead of putting v here we're going to do what is it called result dot failure i result display array is the desired output attempt to test template strings were used all right how do we do that you ask well simply put we're going to need right i know we're going to use code.match and then the message okay so they need to use template literals along with the blink stuff um but i don't want to like limit them this is a tricky one because there's many ways to do it and some valid ways and i don't want to discourage can't be too strict but also can't be too laxed so what if i can definitely at least test for what if we did like we want to test the code for the backtick then potentially oh man excuse me that's the line that we want them to use is there any other way to do it they could concatenate but that's against the rule we're against the rules so i think we should just test for this literally coding and caffeine i could use some caffeine god that'd be a great it'd be a great thing to have right about now um maybe maybe if we if we go for maybe when we reach the next five i'll go make a cup of coffee during a little break all right let's copy that and let's just plop it in right here oh this is gonna be tricky one because i don't know if i have to escape everything in here i think i gotta escape those let's just run this through real quick over here ah we gotta put one here too escape it and then we also need to escape the backtick because that's important okay and then if this in this instance we would have then that does not match hold on so i can oh it's cause it has those in it there we go cool okay so snag you put you in there and we gotta just go back through and double tick i have a bunch of these those don't need to get double ticked yeah a big huge cup of coffee yep sounds sounds about right um i mean i believe every single one yeah you can't do that because that's that's for the text all right guys template strings of course used where is that here we go all right let's go for it i haven't tested this one yet great work let's run the test once just to make sure it's saved and now refresh unlock the code run the test pray everything runs uh things broke result display array not defined ah everything broke now result display is not defined what oh ah excuse me there we go guys all right that's number three two more and i get a cup of coffee let's do it all right es6 adds some nice support for easily defining object literals what are object literals oh oh oh i know what this is all it's asking us to do is just use this so basically we're going to test for i know what i'm going to do well let's see what they say test that the output is named zodiac hasbro 56 male test no colon is present yeah so we'll test we also uh it's an object so i technically can't i shouldn't test for order of things cool let's do this so let's first run the test so our code gets saved and then we'll go through here and write some tests all right assert that the output of create person uh oh we needed deep equals oh let's see how a good learn js book um i don't what's books you can read um learn es6 the hard way i think that one's free online has some good stuff in there eloquent javascript is also a good one um it has some as i don't know how updated it's been it's been a few years since they released eloquent i'm not sure if it's been fully updated especially not the es6 um maybe it has can't remember um also yeah mdn is a really good one i'm i mean i actually have it open right now it's it's just my it's my goto i find their documentation very nice um i never read the w3 school's documentation anymore it's i strictly go on mdn even for html and css um and then steven asked how did i learn javascript this has been the biggest roadblock for me i feel like i learned relearn and get nowhere ah this is a great question um first of all it's like practice makes perfect just um i started off with code academy i think the amount of javascript tutorials i've done probably is like way too many i think i've done one on a code academy i've done the free code camp curriculum i've done the w3schools thing i think they had a curriculum i've done udemy i've tried like coursera as well as um i think even treehouse for very brief time so i've tried a lot of different resources i find udemy worked for me so when you first when you find the resource that works for you keep going back to that resource um udacity that's another good one i think they're just a little bit more expensive sometimes and recently egghead io they have a good they have a good curriculum of stuff but again they have a little bit of a price tag so you figure out your learning resource you go through the videos and then then there's an aspect of putting it to use you really nothing will really stick if you don't use it and that said you don't need to use it all the time but you need to apply it so i think the difference of use and apply is sometimes people miss you need to apply what you learn and you can do that through many ways you can start side projects you can update projects you built while learning you can also contribute to open source now i tend to do the two of them i contribute to open source as you can see and i also write my own projects i believe i have i have two actively developed projects active actively developing projects right now both in javascript both with with react and both of them are quite different but use a lot of the same features so i'm doing a lot of new things for each of them for example one of them is going to have a very awesome authentication api using auth0 which i've never gotten to play with before um so i'm learning by applying my javascript skills to that and uh the other one is strictly just a lot of database stuff so i'm working with a lot of data uh yes they both are i think i can actually believe one of them if you guys um just bear with me a second i'll get up i'll show you guys my github and i'll put the links in the chat so you can see the projects that i'm talking about one of them is cookie jar it doesn't have any code just yet and the other one is viking honors manager so here is one of them i believe it's not on master yet i'm still working on integrate um on an integrate method or on a on a branch to integrate a database into it so that one the master branch on that one is outdated but then i also have this new project which i'm doing a lot more planning on but has if you look in it there should be some pngs those have a mockups for stuff that i plan on adding so yeah those are the two projects that i'm currently working on both open source but probably not as uh nicely open source as some other projects are all right back to the coding we were looking at this before yes we got to assert that create person well we should probably just copy this oh what are the objects the object the quality i think object has like a dot equals method but i'm not sure oh are they private repos oh um let me see uh sorry about that i think yeah i'll make um i can make cookie jar public cookie jar is public i believe yeah cookie jar is public um but the but the viking honors is not um so the uh what's it called the viking honors one is not and that i think i need to keep it that way because it's going to be for um some the summer summer camp that i work for uh yeah maybe i don't know how to tell if it's blind or not uh nope it doesn't seem like it's private uh i get a 404 for which one maybe it's maybe it has to do with um the white uh youtube does links but if you guys look me up on github i have a ton of repositories and then one repo is called viking honors manager and then another one is cookie jar so oh that's incorrect the other one is called that so those are the two project names on github if you wanted to look them up cool we were looking for object equals but it doesn't really do that it has something else yeah keys okay all right yeah youtube i don't think you i don't think youtube supports links and um it's chat or if it does it's weird about it let me see real quick okay cool let's keep moving forward so we're going to do some real funky javascript so first we're going to wrap our result object in object.keys and we're going to say dot um for oh this is a hard one i think i can do const name equals zodiac hasbro constant age equals 56 and then constant gender equals oh wait this shouldn't be a string gender equals male and then our function well now that it's not a function now it will do return object.keys that create person um name age gender dot every value oh well this is now this is every key all right every key um needs to be the value uh wait i think it might be better if i did const result bear with me guys we're getting there there might be a better way to do this so if anyone notice if anyone knows make sure to make sure to say so i'll keep tabs on the comment section of this video too after the fact so if you guys are watching this in the future um definitely give me some input i'd love to hear it and uh i'll definitely you know everything can get changed so let me know and you can also review it in github let me know if there's things that you want changed all right so that's the result that's what we want and then we're gonna go ahead and copy those three things again place it into here and then we're going to say the every key and we want the the result to be sorry guys now we're gonna all right how about this we do constant p person equals and then we need to return object.keys person dot every key i'm going to say person uh key is going to be equivalent to result key all right okay i think that does that wow and what's what's the intended message the output is okay okay great and now let's do a neat no we have to agree to finish up with an easy one no colons exist anywhere in this one no we're used all right guys wow that was this was a harder one could also be the caffeine that i need rt oh cool the link works your name is also very familiar i believe there's a character in the sherlock holm show i was watching that today and i think he has your name no expected expression got keyword const all right we need to wrap this in a function indeed yeah it does have your surname i knew it don't ruin it for me i haven't finished watching the episode all yet let's see that's that and let's read oh nope i always break gold can't just oneup it you gotta retype it every time all right here we go fresh fresh refresh keep going try again here we go there we go unlock it run it and it passes carlos can you use gulp watch yes so um gulp is watching but even if it was watching the json files we're it's um how do i explain this we need to rerun gulp when the database gets updated not when the json file gets updated so when we the reason why i'm doing i update the json goal probably already refreshes i wouldn't be surprised if it's not um but what at that point the database hasn't been changed so it doesn't matter so when we run node seed it redoes it like re entries things in the database and then you refresh gulp and it requeries things and then it pumps it all back into the page um this is just a development it's a way the development works it's kind of it's not optimal um and hopefully it'll change in the future but that's just how things are going at the moment um give me one hot second also we just finished another challenge so look at us nothing can stop us now all right great that is four right we're on to the next one one more and then i get to get coffee and then i'll do probably five more and be done for the evening afternoon when defining functions within objects in es5 you have to use a keyword function as follows es6 you can remove the function keyword and colon all together when defining functions and objects here's an example of the syntax we factor the functions that gear inside the object bicycle all right so i think all we have to do is write it's like here okay hold on a second what is this like tess the output is sending requests to yanoshima moto who is that is that that's not the bitcoin guy is it who's the no that's something with an ass right who created created bitcoin yeah that's satoshi nakamoto yanoshi mimoto well no idea but let's keep coding i guess um i guess he was the guy that uh created this challenge in the first place all right oh god let's do it all right well it sounds like this guy doesn't actually know what he wants me to test but we'll do it anyways basically we want to verify that set gear still works so let's do a before and after test um so we're going to say can't or we'll say actually we don't have to we just do bicycle dot gear equals equals equals two and and by sickle dot set gear three uh oh we can do i'll just do this don't get too complicated we'll just set it equal to like 48 and then we'll say oh let's do we'll use a function and we'll say return bicycle dot gear equals 48. yeah that's good message um code set gear is a function and changes the gear very oh no code gear variable great and we already wrote this one so let's just snag that all right and node seed give it a few seconds and we're going to restart gulp refresh the page you see the issue is this won't work because gear is using it so what we're going to do is we're going to check that set gear doesn't have it with it so traditionally set gear would have looked like set gear right what's the original uh and they would have to have the function so we're actually gonna test for this little bit right there okay i know i know what we're doing um what's this thing called what would we call this declarative function was used and we're going to say code.match well we'll start with the colon and then we'll have the optional white space the word function and then open close with a optional white space in there we'll make sure that that doesn't exist okay yes victory is ours another five completed let's uh commit the work and then i'm gonna take a very short break to get some coffee and then get right back to it so before i leave let's first shut down gulp then shut down run git status add our challenge mpm run commit we're going to say test challenges es6 challenges what do we do we did 16 c16 probably through c20 at this point which one is this use class syntax to define a constructure function use class syntax it that's 21. so we did c16 through c20 nothing else necessary and then get push origin feature add es6 tests all right and that does it for those let's go back over here give it a minute it should pop up and then we'll see what's to do next oh no is it gonna refresh for me usually it does automatically there we go awesome go through here guys look at all these look how great we're doing getting them done awesome all right and this probably just passed oh no it's rolling running through there how many more do we have we only have seven more i mean we probably could finish it all right well i want five minutes and then i will be back to push through these last seven and then that'll be all the tests we're in for the es6 challenges so um yeah be back in five let me just type that in here can i say something i guess i can't oh here we go be back in five minutes i got coffee and now i'm back it's time to do some awesome coding and finish up these challenges all right i think i got a couple questions hey how can i become a contributor like you if we could camp yeah so quincy sent out a message on medium um carlos definitely right there's also a contributor channel on getter um i'm gonna have that on this browser but there's one on there so you can totally use that and i don't think there's really much else to it a lot of stuff i'm doing today is what like we need when it comes to contributing so if you have this kind of javascript skill then like let us know we'll get you set up and it's a lot of fun so far today we've worked through basically 11 through 20. we've done these 10 challenges we've done a little bit of q a with them try to like test out what they're actually asking and then we need some edits and things and wrote some tests and soon i'm going to jump right back into it with the next seven and then hopefully when we finish these seven um i'll be able to merge everything into the actual repo and we can get some people running through them and getting some feedback and i'll be able to make more changes later on there's also a user in here earlier who was literally named like coffee and cafe or code and caffeine or something and was like yeah could use some of that okay let's get back into it so we'll move this up here for now okay let's see what we got use class syntax to define a constructor function and use getters and setters to control access to an object understand the differences between import and require i actually don't know the differences between those two i'm still confused about it so it'll be a fun one to learn use export to reuse the code block cool use ampersand or use star to import everything from a file you start to import everything from a file import a default export i think i got a duplicate in there so we'll get through that but all right we are back to it let's run d beta base then we'll gulp awesome and go back to the bash and now let's get back to coding es6 provides a new syntax to help create objects using the keyword class this is to be noted that class syntax is just a syntax and not a fullfledged classbased implementation of objectoriented paradigm unlike in languages like java python ruby in es5 we usually define a constructor function and use the new keyword to instantiate an object the class syntax simply replaces the constructor function creation yes it does notice that the class keyword declares a new function and a constructor was added which would be invoked when new is called to create a new object use class keyword and write a proper constructor to create the vegetable class the vegetable lets you create a vegetable object with a property name to be passed to the constructor sweet sounds good to me all right class vegetable and a little styling going constructor we'll just call it name this dot name equals name oh can you guys hear the fans yeah they're kicking in aren't they yeah i'm actually working off a macbook uh just just a standard macbook pro i believe so this thing's doing uh quite a lot um you know coding is live streaming off and coding at the same time i think it's running an instance of a database and a local server for the for the local environment and it's running a browser my webcam microphone yeah we're pushing it to its extreme it's a lot of fun all right let's see constructor name great all right that should work and we're gonna run the tests of course they pass there's none there but what should we test let's go over here test the vegetable is a class uh okay i want to see something real quick if i wrote class x this dot y equals z yep what is type of x function but we could do like function dot constructor oh here we go oops type of x dot constructor there we go okay so in order to test something as a class we can do assert that vegetable type of vegetable equals equals equals function and type of vegetable dot constructor equals equals function and then you put the message in here and then we say vegetable is a class why don't we use mocha instead of writing them by hand you you're asking the my favorite question ever because i would absolutely love to be writing mocha or tap tests um but i just don't think that's how this works for exa uh particularly in fact we actually may be using mocha underneath the hood um but in order for the whole curriculum to be able to just kind of be generated into any database anywhere like through like json files and then be version controlled via json files um i guess the developers quincy and bouncy like the guys who um like really originally sat down and put most of the original work in i believe the other guy is um what's his name berkeley yeah berkeley and quincy when they like pushed through all this through they were like this is how it's gonna be and um that's how it is it could definitely change in the future but um this this style is the same we have it's basically just the word assert like you're asserting something and then a true dash false and then a message here we go thank you all right message that's good now we need to assert that the class word was used so essentially well yeah okay i know what i'm gonna do i'm just gonna do a code.match guys i'll just do class it's really that easy test that other objects could be created with the class sounds good assert um what i want to do i'll just do like const a equals new vegetable uh should we do something stupid should we like put like apple yeah well we'll have some fun with this so we'll say const a equals new apple and then we'll say uh return type of a equals equals equals object it's four equals it's too many yeah i like that um first i'll delete this let's make that it will say message i forgot kept that other objects can be created using using other instances of vegetable can be instantiated right let's run node seed restart the server refresh the page unlock the code run the test on the next one let's go all right we're on to number 21 22 now so what kind of coffee we drink in um i think this is just some house blend that my family purchases just black i don't take anything in it what's your what's your kind of coffee i'm also i'm also a tea guy i like green teas and um different herbal tea i'm not a fan of black tea but it's uh yeah usually usually you'll find me drinking tea during the day i don't usually do coffee unless it's in the morning but someone got me thinking about coffee so i had to go with it all right getters and setters ah ground at home very nice yeah black black all the way i had i used to do ground my own and they used to have a french press but um that's not with me at the moment so back to just kcups at the mo right now cool uh coding coding coding these are classically called getters and setter methods yeah we're getting some object oriented stuff my favorite setters are meant to modify the value of an object's private variable based on the value passed instead of just could involve calculations or even over any previously completely get writer set writer see i've never actually used this before this is really cool um someone just asked what do you recommend me to do when i get stuck depends how are you getting stuck you just don't know how to um you know implement an idea or are you unsure about the idea in the first place um i guess a general answer would be mdn uh go to the docs look up documentation um i don't stock overflow is great don't always have to go there immediately um sometimes just figuring out i've spent i've spent i mean it's crazy to admit but i've spent sometimes an hour or more working through one little bug just because it was some i was i had a misnamed variable and i just kept overlooking it so um you know i guess another tip is take a break you know look at it if you can't figure it out do something else or go for a walk do something get a glass of water come back and i guarantee you you'll find it within seconds um strangely it just works like that so let's look over here so i believe that this under underscore means private they don't seem to go into that which don't know why but i guess that's an aspect here um oh yeah it seems like it notice the syntax we're using to invoke the getter setter they're not even functions we just oh oh okay so guys this is cool it's like properties oh this is actually this is actually a really fun example all right so we're going to create a class thermostat how does this do we can use the getter and setter in the method i don't know constructor we'll just call it temp oh we'll call this fahrenheit let the temperature hold on a sec i gotta think through this um oh i missed all right so interesting um so we're creating the thermos is going to be a new thermostat at 76 degrees fahrenheit and then we want to get the temperature is going to equal thermos dot temperature which is going to return which is going to set the temp variable to 24.4 so we need to have so hold on a sec i see okay so we'll do a get temperature and this will return oh we gotta do some math they gave us the formula interesting they gave you the formula to calculate fahrenheit wow this is this is an incredible uh challenge um quick i see a question do i invest in bitcoin i do not i do not have a single penny invested in any cryptocurrency bitcoin litecoin ethereum and though i am very um i like to say i'm pretty well educated in the field and have spent a great deal of time reading white papers and reading into it but um it's just not not something i feel worth investing at the moment and also it shouldn't be treated as an investment it should be treated as a currency and currently it is not so i don't i don't exactly support the use of bitcoin or at least the investment in this in bitcoin at the moment um that's a whole other conversation so let's see here uh our our api is going to deal in fahrenheit's so this guy gave the formula for fahrenheit with celsius but we're feeding in fahrenheit so we're actually gonna have to reverse this formula guys we're gonna do some algebra this is actually hilarious i haven't done algebra in way too long did you get for going to college and finishing your math minor way too early all right we're going to start off by subtracting 32 and then multiplying by 5 and then dividing by nine ah yeah all right so it's going to be five ninths times the quantity fahrenheit minus 32 we're going to equal celsius so we're going to reverse that over here so we're going to say oh wait we're over we're down here now we're going to say c equals 5 9 times quantity f minus 32. can i code if my math is the worst one possible um you could definitely do web development um html css javascript a lot of stuff like that could definitely be done without math but if you're looking to go into object oriented programming or data then you need math um even uh even basic algebra and a background in algebra with a back and then a little bit of discrete mathematics and you'll be fine for most programming but if you ever really want to get into like data databases and like um you you really want to have a decent understanding of so at least some higher other level math concepts otherwise your program will be limited uh one aspect to this though is algorithms and data structures if you don't have um a pretty good understanding of like precalc at least and like calc one may be then sometimes analyzing algorithms and making things as efficient as possible can be uh difficult but it's definitely not um you know impossible it can be done um but yeah that's usually why they're coupled because they go in hand in hand really well together all right put the fahrenheit in there now and now with that formula out of the way we can say what other free versus resources do you recommend while i'm doing free code camp um i mean i would recommend free code camp um read medium the blogging platform find follow blogs uh including the free code camp one uh youtube has a couple video guys i don't watch any of them but i know they exist and build side projects i always recommend having one side project i have two right now um we talked about that earlier today but definitely side projects those when you apply what you're learning that is even if you're not planning on launching anything or selling anything even if it's just like something that you use and or you build it and then you you archive it for forever the application of building something with the skills you're learning is instrumental to your future success all right let's do 5 9 times this dot underscore f minus 32. and we're going to set oh wait i think i just did this wrong uh this is killing me um no i did this right but setting it you're going to do this dot f oh oh but you said it so the ap this thing its api it stays as fahrenheit inside it but when you set it or get it it's always celsius i see all right so with that we're gonna call this c and now we know actually i gotta go put that calculation back s times 9.0 divided by 5 plus 32 i should probably do that too over here and now all right that should be a good enough hint wow all right guys oh let's do this all right and then we want to try i'll just do the type of thermostat equals function and and type of thermostat dot constructor equals equals function i used this is if you're interested in where i learned this little trick this type of and the type of itself um i was actually writing a asynchronous method for a back end library called fastify and one of the lead maintainers showed me that the best way to check if something is a asynchronous function is that it has a dot a dot then callback or something along those lines you can check that just based on the way functions are passed around within an application all right we're going to test i've already done the test if class keyword was used so we're going to snag that and test that other objects can be created with this class all right i'm gonna quickly copy the message i used here though i don't know oh wow sorry hold on here we go how do you want to how do we want to test this um oh yeah silly me someone's going to look at this code in the future and be like apple's not a vegetable you're gonna be like you're right it's not oh let's do 32. see ready we'll know that their thing is working so we can say return type let's choose t and we'll verify that t dot temperature equals e equals equals zero because 32 degrees fahrenheit is supposed to be zero celsius all right proof oh no it didn't save my work okay fine i'll rewrite the entire class for you guys right now do i need a function declaration here yeah i do and then this will return so this needs to return yep c for celsius and then and we'll be able to say this dot f oh oh and get that semicolon in there let's let me run the tests thermostat okay let me just in case this breaks again let's refresh uh that's not what i wanted their turmoil supposed to be thermo and now we run node seed and rs cool victory yay hi timo yeah we did and uh we've gone through um 12 es6 challenges we're gonna do our aim is 17 so five more to go it's been uh quite a quite a ride oh this one looks like it has a test just it's not working so we'll see okay in the past the function required could be used to import the functions and code and external files and modules while handy this presents a problem some files and modules are rather large you may only need a certain code from external resources es6 is a very handy tool known as import with it we can choose which parts of a module or file to load into a given file saving time in my memory consider the following example imagine that math underscore array underscore functions it has about 20 functions but i only need one count items in my current file the old require approach would force me to bring in all 20 functions with this new import syntax i can bring in just the desired function like so using object destructuring a description of the above code ah cool there are a few ways to write an import statement but the above is a very common use case the white space surrounding the function inside the curly braces is the best practice it makes it easier to read the important statement great note the lessons in this section handle nonbrowser features import and the statements we introduce in the rest of these lessons won't work on a browser directly however we can use various tools to create code out of this to make it work in browser yeah like babble and the appropriate imports add the appropriate import statement that will allow the current file to use the capitalized string function the file where this function lives is called called string functions in this same directory as the current file all right well i would write import capitalize string from um yeah so i thought string functions so i thought whoa all right uh what is it doing here uh it looks like they just never finished their not the declaration uh what should we call this uh valid import statement cool timo i love your icon the monkey is very cute the choir is not defined ah okay this seems like an issue challenge seed i am a little confused so it asks us for this do i have to use like use strict is that oh nope i mean right there you strict the t in the word the in the note paragraph should be uppercased where ah nice catch quinn so it seems like this in particular test wants the require word and it's not running without it but this is not i don't i'm gonna flag this one what number is this understand the difference between between import and require this is 23 okay so require is not defined so i don't know why this is doing it um but i have an idea that it has to do with the fact that we're trying to use like a import statement in browser and it might be something on the back end i don't want to try to delve too much into it let me just make sure it wants i why are they putting i in there i'll probably just use g and they're asking for that anyway yeah sure yeah team you think it's back end okay well we wrote the test case that's really all we need for that one so we'll move on to the next one keep pushing through let's see we only have four more to go i think this is the one that i create and export fallback with export default yeah i didn't write that one there i'll go copy that yeah luminous you're right that's a good point second note paragraph also has a typo let's see i can go back to this we'll keep working through it great note cool that's that i'd like to uh take a luminous good good catch teemo and i want to take a luminous um point into this because that is a very that's that's very true um and that this seems to skip right over that um the only thing though is what if we don't what if we're not using a a node a um an npm project and we don't have known modules could the with the import still work i mean maybe we can make we could probably write another note about it um but let me see so now that i've done that let me write the note paragraph and then we can go from there we can run the test again and see if the the dot forward slash fixes something um even though i don't think it will because the require still isn't being loaded alright let's write strong note um in most cases oh hi siri sorry guys um in most cases the file path requires a um before it otherwise comma node will look for a dependent or will look in the node modules directory before it otherwise node will look in the node modules directory first trying to load it as a dependency great i think that justifies that once we finish once i finish writing pretty much getting the base for all these tests done um making this this kind of part of the curriculum like usable uh we're gonna want some qa so if you guys um are pointing these things out now we have 27 tests to go through could use would love the help so but that's step two let's uh unlock the code run it yeah all right that's fine this test isn't running because it's having some require issue i'll make note of that let's move on to the next one though use export to reuse a code block oh well let's code for my trials in order for this to work though we must utilize one of the statements that goes with import known as export when we want to we want some code function or variable to be usable in another file we must export it in order to import it into another file like import export is a nonbrowser feature the following is what we refer to as a named export with this we can import any code we export into another file with the import syntax you learned in the last lesson here's an example capitalized string export had export functions how to export variables alternatively if you would like to compact all your export statements into one line you can take this approach either approach is perfectly acceptable below are two variables that i want to make available for others file other files to use utilizing the first way i demonstrated export export the two variables oh so we can he just wants the words export written here and here all right there we go i'll get rid of the eyes again oh and throw in this time he has the at least has a semicolon on the back but we need to write in message um let's write code foo food you guys know what's on my mind is exported great same deal i don't think exports are gonna work um this seems like some sort of challenge issue they're uh it's not something we're gonna try to solve this evening maybe another video or someone else does how much coffee i drink i'm so tired yep exports is not defined i don't know why um so we're just gonna add so we're gonna add exports is not defined number 24. all right whoever wrote these just forgot the right way to write the tests suppose you have a file that you wish to import all of its contents into the current file this can be done with the import star syntax here's an example where the contents of a file named math functions are imported into a file in the same directory import star as my math module from yep and breaking down that code okay you may use the any name following the import as portion of oh well first typo is that i'd like to inc because the ads is a very important part of the code cool easy peasy import star as my string module from um properly uses the code import star as syntax all right export in one line should be export in or export default export is named and that why export does not make any sense luminous i would encourage you to make a uh create a new issue and reference these challenges directly because um you're making some very valid points and uh i don't want to take full credit for him uh let me i can point you in the right direction there i'm going to keep going through what we have but definitely definitely for this export stuff um it sounds like they could they could use a nice little update so um in case you don't know just go to free code camp go to issues new issue and just go for it i believe you can also find the beta live here so you could just go to the beta freecodecamp.org map es6 and then use export to reuse a code block make sure you copy this link and go from there definitely be a great thing to add to the project cool no i'm missing something here here we go that'll fix that this test probably won't work but we'll we're not even going to try it i know they're not well actually let me get the error um so import star as my string module from come on so required not to find is the same error for question number 25. oh yeah timo i am nice catch i'm watching i'm tracking my uh battery use and stuff for my laptop to make sure things are going well and um vs code is currently using 162 of my battery which is why it's been slowly dying while we're sitting here um i believe it's the fact that i literally am running a database inside of my editor along with serving files via a local server so yeah let's move to the next one we're almost done in the expert lesson you learned about the syntax referred to as a named export uh luminous see this file has something to do on export default this allowed you to make multiple functions and variables available for use on other files excuse me there's another export syntax you need to know known as export default usually we'll use a syntax if only one value is being exported from a file it is also used to create a fallback value for a file or module here is a quick example of export default you cannot use export default with var letter const the following function should be the fallback value for the module please add the necessary code to do so export default that wasn't that hard all right same stuff this guy's just got that so let's get rid of his eye and then add our message in here so we'll say properly proper use of uh export here any export fallback i want to get the output error so i can track that this has the same exports not defined error okay oh my gosh we're on the last one forgot to mark these down one more one more in the last challenge you learned about export default and it's uses it's important to note that to import default export to import a default export you need to use a different import syntax in the final example we have a function add that is default the default export for the file malfunctions here's how to import it the syntax differs in one key place the imported value is not surrounded by curly braces default export okay cool so as simple as going import subtract from math functions yeah all right i'll run these tests we know they're gonna fail this is a requires one so we're gonna write number 27 here it's funny kind of alternates and we'll go down here guys we did it we're at the bottom of the file literally three hours later well six because things didn't work out at first um properly imports export default function method here we go all right let's do let's make sure everything looks good we're going to commit this thing and wrap up it has been a very very long live code session very thankful for everyone that got to join me today and uh learn a little bit about what it's like to contribute to free code camp all right great well uh missing a little something here ah semicolon all right we're not gonna render for that that's about that so let's wrap up one more time um i'll walk through it for the end quit everything that you're doing quit uh turn off turn off gulp run get status get status will tell you what has changed you're a git ad and you just you can add a file manually by typing the whole path or you can just do the dot and it adds everything and then normally you would write git commit m and then a message but because free code camp is awesome we have this terrific npm run commit command which has an interactive commit thing in the so we're going to write test challenges and we're going to say es6 chal and we'll do c what did we do before we did it now we're doing c17 through c27 right no sorry this was c21 through c27 and we don't need any other ones runs get push origin feature add es6 test so i'm pushing to my branch of free code camp which is origin i when i do get i always make my origin remote my branch and then my and then i might i use upstream and upstream refers to the like the master or like the one that like the developer has created so like for example free code cam free codecamp or slash free codecamp is my upstream um repository so now that i've done that uh we can go and check here we'll see we already have a notification and that means that this just got updated and that's all 27 challenges um tested and run through we still got a bit of more work to do um this was a lot of fun i'll end today just by going over here with the emojis i don't know how many of you guys are left in the chat but there is anyone left i'd love to answer some questions before we uh head out before i head out for the evening um we'll say pr challenges and i'm going to say update that comment we're going to say found issues with challenges number 23 through number c 27 oh what that was not what i wanted to do here we go nope come on work with me here uh require is not defined equals produced for challenges 23 25 27 and then we had exports is not defined produced for challenges 24 comma 26. great all right guys i am exhausted from coding for this long but i'm very happy i did it um glad having you all here this has been quite an experience uh feel free to reach out with any questions ever about open source about free code camp about coding in general i'll be happy to answer them i believe my twitter is in the description so you can find me on there you can also reach out to me through the um the getter chat for free code camp and yeah with that i'm gonna say thank you very much this is uh ethan airwood signing off hope to see you guys in the future
