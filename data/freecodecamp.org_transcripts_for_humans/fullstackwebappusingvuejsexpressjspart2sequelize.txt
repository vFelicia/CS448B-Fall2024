With timestamps:

00:01 - hey everyone i'm cody cyber and welcome
00:03 - to part two of building a full stack web
00:05 - application
00:06 - using vue.js and express.js so if you
00:09 - remember on the last part one we built a
00:11 - register page which hits a slash
00:13 - register endpoint on the server
00:17 - so in this part two one of the things
00:19 - we're going to do
00:20 - is actually connect to a database
00:22 - or have our api connect to a database
00:24 - and in this case
00:25 - we're going to be using sqlize which is
00:28 - an orm to connect to
00:30 - like sql related databases such as like
00:32 - mysql or postgres or sqlite um a couple
00:36 - people asked if we could do mongodb but
00:39 - i also i feel like you know sql
00:41 - databases are still
00:43 - one of the most popular ones so i think
00:45 - it's more important to learn how to use
00:46 - sql versus mongodb
00:49 - and also i think the data that we're
00:50 - working with is relational which is
00:52 - another reason why i think we should be
00:53 - using
00:55 - sqlize to connect to
00:57 - a database to store these relational
00:58 - models
01:00 - all right so before i get started with
01:02 - bringing in sqlize let's go ahead and
01:04 - just look at it really quick so inside
01:06 - the sqlize project they have this these
01:08 - docs defined
01:09 - these docks are pretty good they're not
01:11 - the best but um if you read through
01:12 - these you can get a good understanding
01:14 - of
01:14 - how you use sqlize you know how you
01:16 - define models how you can use models but
01:18 - basically
01:20 - then
01:21 - in a
01:23 - to sum it up sqlize provides you with
01:25 - data models where each model maps to a
01:28 - table in a database so for instance if
01:30 - you wanted to create a user model that
01:32 - has a email and a password you can just
01:35 - create a sqlized model and then it'll
01:36 - automatically connect to
01:38 - whatever sql database such as sql lite
01:41 - it'll create your tables and then create
01:42 - your columns for that table and then you
01:44 - can use objects inside your node or
01:47 - express server to kind of manipulate
01:49 - that data or add records or move records
01:51 - etc
01:52 - that's kind of all i'm going to cover
01:54 - with
01:55 - the sqlize documentation so let's just
01:57 - go ahead and get started using sqlize
02:01 - so start off we want to first install
02:04 - those dependencies so on the right i'm
02:05 - going to say npm install save sqlize and
02:09 - we also want to include sqlite 3 and i'm
02:11 - going to do version 138
02:14 - just because i ran to an issue
02:16 - in the past with a newer version of
02:18 - sqlite3 so
02:20 - anyway when that stuff is done
02:21 - installing it shouldn't take too long
02:27 - what we can do in the meantime
02:29 - is we need to first
02:31 - kind of get our project set up to start
02:33 - using
02:34 - that sqlize package
02:37 - so to start off we're going to go ahead
02:39 - and pretend like we have a file called
02:41 - models
02:42 - which is going to export a sqlize object
02:45 - so if i do consequence
02:47 - equals
02:48 - require dot slash models
02:53 - if i spell that correctly so basically
02:55 - we're assuming that there's a models
02:57 - folder which has an index.js file which
03:00 - returns an object that has a sqlize
03:02 - attribute on here
03:03 - and what we want to do is just go ahead
03:05 - and do sqlize.sync
03:08 - which will basically connect sqlize to
03:11 - whatever database that you have it
03:12 - configured for
03:14 - and then create the tables if they don't
03:16 - exist and just get everything that's set
03:18 - up and ready to go and once you're done
03:20 - sqli or syncing sqlize to your database
03:24 - we're going to go ahead and just start
03:26 - our server and to kind of
03:29 - make this more
03:30 - useful when the server starts just go
03:32 - ahead and print out a message so we can
03:33 - actually know when it started so i'll
03:34 - say console.log server
03:36 - start it on port
03:39 - and i'll say config port
03:43 - and then here i'm going to refactor this
03:45 - a little bit and just say config port
03:46 - you'll notice that we don't have
03:47 - anything called config defined in this
03:49 - file so up here i'm going to say const
03:50 - config is equal to require
03:52 - slash config
03:54 - config
03:56 - so the first thing i need to do is
03:57 - create a new folder called config
04:00 - and i'll create a file inside that
04:02 - folder called config.js
04:04 - inside config.js i want to export
04:07 - something that says port 8081
04:11 - so now app.js can include that file
04:14 - and then kind of use whatever is defined
04:15 - in that config to spin up the
04:17 - application
04:19 - another refactoring i'm going to do
04:21 - before i actually start
04:22 - working more into sqlize and define the
04:24 - models is if you notice here we have the
04:27 - routes defined
04:29 - it's kind of useful if you have
04:31 - a separate file where all your routes
04:33 - are defined so what i'm going to do is
04:35 - in the source folder i'm going to make a
04:36 - new file called routes.js
04:39 - and that's going to export a function
04:48 - and basically what we're going to do
04:50 - is cut that code out and put it inside
04:53 - that wraps function or that
04:54 - routes.js
04:57 - module
04:59 - save that file and then here what we can
05:01 - do
05:02 - is just go ahead and require that file
05:04 - so i can say const actually i could just
05:06 - say require
05:07 - routes and then i'm going to pass it app
05:10 - because if you remember our routes file
05:12 - basically just returns us
05:14 - returns a function for us
05:16 - where we can pass an app and it's going
05:17 - to just go ahead and attach
05:19 - all the different endpoints onto that
05:21 - application or that express application
05:24 - variable
05:27 - all right so by this point
05:29 - sqlize and sqlite3 should be done
05:31 - installing which it is i'm going to go
05:33 - ahead and just
05:34 - close out of that tab
05:36 - and then additionally we're seeing an
05:37 - error print out because
05:39 - the routes file does not have a new line
05:42 - at the end of the file so i'm just going
05:43 - to fix that really quick
05:45 - do the same thing with config
05:52 - okay so it says right now cannot find
05:54 - module models because we haven't even
05:56 - declared that yet so
05:58 - that leads us to the next step of part
06:00 - two which i'm going to start building up
06:02 - a
06:03 - a user sqlize model so to start off
06:06 - let's just go ahead and make a folder
06:09 - called models
06:12 - and inside here i'm going to make a new
06:14 - file called user.js
06:16 - which is going to be my user model
06:28 - so the first thing
06:29 - you need to do is if you read through
06:30 - the sqlize documentation
06:33 - you can kind of figure out how you
06:34 - define sqlize models and we're going to
06:36 - do a little bit of custom
06:38 - logic and linking for our models so that
06:40 - we can
06:41 - kind of easily put new models into this
06:42 - model folder and not have to worry about
06:44 - importing it somewhere else
06:47 - so what i'm going to do is i'm going to
06:48 - say user.js is a file which exports a
06:52 - function which takes sqlize and data
06:54 - types
06:58 - and then what this is going to do is i'm
07:00 - going to use sqlize to define so you do
07:03 - sqlize
07:04 - define a new model so the first argument
07:06 - is the name of your model which is going
07:07 - to be user
07:09 - and it's going to be used for storing
07:10 - user related information so first one
07:13 - we want to
07:14 - or so the second argument here this is
07:16 - are the options or attributes that are
07:18 - attached to your table or model
07:20 - so the first attribute we want is email
07:23 - because you know you sign up with your
07:24 - email and password so say that's going
07:27 - to be called email and the type
07:30 - is going to be a string and then we're
07:32 - also going to say that this is required
07:34 - to be unique because we don't want
07:36 - multiple users signing up with the same
07:38 - email account
07:39 - and then the second
07:42 - attribute we're going to say it's going
07:44 - to be called password and it's also
07:45 - going to be a string
07:50 - so this point again user.js is a
07:53 - function which takes equalize and takes
07:55 - data types and then it's going to return
07:58 - or define
07:59 - a
08:00 - user model which we can use
08:03 - so now the next step is if you remember
08:05 - in the app.js we included
08:08 - slash models so we need to
08:10 - create a index.js file
08:18 - and inside this index.js file we want to
08:20 - do a couple of things
08:22 - first we're going to declare a db object
08:24 - which we're going to export later on
08:28 - but more importantly we first want to
08:31 - include a fs module which is the
08:34 - node.js way of like reading through the
08:35 - file system
08:37 - we're going to include the path module
08:39 - which is used for kind of dealing with
08:42 - you know absolute paths relatives paths
08:44 - or whatever it's so we're going to use
08:46 - that in conjunction with fs
08:48 - um we're going to include the sqlize
08:50 - model because we're going to need that
08:52 - to actually create a sqlize object and
08:55 - connect it to a database
08:56 - we're going to include that config file
08:58 - that we created earlier
09:04 - and okay so at this point the first step
09:07 - we're going to do
09:08 - is we're going to decline declare a
09:10 - sqlize object
09:13 - so we can say consequence is equal to
09:15 - new
09:16 - sqlize
09:19 - and that's going to
09:22 - take in a couple of arguments
09:25 - so the first argument is going to be the
09:27 - database that we're connecting to so
09:28 - let's just assume in config
09:30 - we have something called db.database
09:34 - and we can also assume that we have
09:35 - something called user we have something
09:38 - called password
09:40 - and then lastly we have additional
09:42 - options that we can pass to sqlize
09:45 - so at this point what we can do is we
09:47 - can go in to that config file
09:52 - and i'm going to go ahead and declare a
09:54 - db attribute
09:57 - which is going to have that database
10:00 - it's going to have
10:02 - user get a password it's going to have
10:05 - options
10:07 - so for database we're going to load in a
10:09 - couple of environment variables
10:11 - and fall back to
10:13 - tab tracker so this is the name of the
10:15 - database that we're going to use
10:17 - so typically if you have like mysql or
10:19 - postgres you create a database
10:22 - so your postgres instance is going to
10:24 - have like 100 different databases inside
10:26 - of it and each database has a unique
10:28 - name
10:30 - so we're say database is equal to this
10:32 - environment variable db name or tab
10:34 - tracker
10:35 - and we're going to use this later on
10:36 - when we like deploy to a real
10:37 - environment
10:38 - but it's good just to have this here in
10:40 - the meantime and if it's not defined
10:42 - we're going to fall back using the or to
10:43 - tab tracker and the same thing with user
10:46 - we'll say db user
10:55 - password
10:57 - process env
10:59 - db pass
11:02 - and that's also just going to be tab
11:03 - tracker for local
11:05 - and then finally when we get to options
11:08 - there's three things we need to define
11:09 - so first is dialect
11:12 - and that's a useful option in sqlize to
11:14 - tell it what type of database you're
11:16 - going to be connecting to
11:18 - so obviously we want to set that to
11:21 - sqlite when we're local
11:24 - we have host
11:26 - and that's used for telling sqlize the
11:29 - location of the database that you want
11:30 - to connect to so in this case we'll say
11:31 - localhost is the default
11:34 - and then lastly we want to put storage
11:36 - for sqlite and that furniture tells you
11:38 - where to store your sqlite file so i'll
11:41 - say tab tracker sqlite
11:47 - cool so at this point we have again a
11:49 - config file that declares
11:52 - the port
11:53 - in fact i'm going to do process env port
11:56 - or
11:57 - 8081 so we can overwrite that as needed
12:00 - and then we have an attribute called db
12:01 - which has all the different
12:04 - sqlize related configuration we need
12:06 - so
12:07 - this if i go back to
12:09 - models
12:10 - folder and then index.js
12:14 - you can see how this makes sense that
12:15 - we're just grabbing that config and
12:16 - passing it to
12:17 - the sqlize
12:19 - constructor here
12:24 - now the next part
12:25 - is we want to just go ahead and write
12:27 - some
12:28 - short functionality to just
12:29 - automatically read through
12:31 - all the models in this models folder and
12:34 - set it up to be used with sqlize
12:36 - so i'm going to go ahead and do fs dot
12:38 - read
12:39 - sync
12:41 - and then pass it down name so basically
12:42 - this is going to read through
12:44 - the current directory
12:46 - and give us an array of different files
12:48 - and i'm going to filter out
12:50 - any file
12:52 - that is equivalent
12:56 - to
12:59 - index.js so we don't we don't want this
13:02 - index file but we want every other model
13:04 - file
13:06 - and then after we do that filter we can
13:08 - just say for each file that we found
13:12 - we want to go ahead and declare a model
13:18 - and basically sqlize has a import method
13:20 - where you can give it a full path to a
13:22 - file and it will go ahead and just
13:25 - import that and set it up to be used
13:26 - with sqlize
13:28 - so i'll go ahead and use path.join to
13:30 - join the door name to the pet file
13:32 - and then tell sqlize to import it
13:35 - and then finally we can say
13:37 - set
13:38 - the
13:39 - db dot name of the model so in this case
13:41 - would be db.user
13:43 - is equal to model
13:52 - and then lastly we can just go ahead and
13:54 - declare a couple of useful variables
13:56 - onto this
13:58 - db object
14:00 - so i'm going to declare db sqlize and
14:03 - capital sqlize
14:05 - so that when we use this in our code we
14:07 - have access to the sqlize object
14:09 - we have access to the capital sqlize
14:11 - object
14:12 - and then we have access to the actual
14:14 - models
14:18 - alrighty so at this point let's go ahead
14:19 - and make sure that
14:20 - you know we don't have any linting
14:22 - issues
14:25 - okay so
14:27 - we saw
14:28 - that the server restarted itself when i
14:31 - saved some of the files and then it
14:33 - executed this sql command and said
14:35 - create table if not exist users
14:38 - and then it gave that table a couple of
14:39 - columns such as email and password
14:43 - and that's about it so basically sqlize
14:45 - will create your table if it doesn't
14:46 - exist and give it the columns that
14:48 - you've defined in your model
14:52 - and that was pretty easy to do like a
14:53 - lot of this stuff like this we didn't
14:55 - even need to do but it's more of a
14:56 - helper function that allows us to easily
14:58 - add more models down the road
15:00 - without having to like
15:02 - for each one require it import it and
15:05 - set it up in sqlize
15:07 - okay so again
15:09 - as a recap we installed sqlize
15:12 - so if you look at package.json
15:15 - we installed sqlize and sqlite3
15:18 - sqlize is an orm used to connecting to
15:21 - sql databases and sqlite3 is a local
15:24 - instance of
15:25 - a sql database
15:28 - without having to go through all the
15:29 - extra work of setting it up and whatnot
15:31 - and then once we installed those we're
15:34 - going to we went ahead and created this
15:35 - models folder which has a sqlize model
15:39 - which we're going to be using for our
15:40 - user accounts
15:41 - which has an email and has a password
15:43 - and then we have this index file which
15:45 - is basically used for connecting to our
15:47 - database
15:49 - which is going to load in a couple of
15:50 - configurations which is defining our
15:52 - config right here
15:56 - and then it's going to go ahead and read
15:57 - all the files that are in
15:59 - this models folder that do not equal
16:01 - index.js and it's going to go ahead and
16:03 - load them into sqlize and then we just
16:05 - go ahead and return that which we can
16:06 - use later on so
16:09 - at this point
16:14 - we can actually start modifying
16:17 - our route
16:18 - to use this sqlize stuff so another
16:22 - thing i'm going to do
16:23 - let me just close out of all these tabs
16:28 - so we're requiring routes here so if i
16:30 - open up the routes file i think we're
16:31 - done with app.js for a while
16:35 - something that is useful
16:37 - and you'll see this on a lot of
16:38 - frameworks is that you're going to have
16:40 - a folder called controllers and a
16:42 - controller is basically
16:44 - where you have all of your endpoints
16:46 - defined
16:48 - so inside controllers i'm going to go
16:49 - ahead and create an
16:51 - authentication
16:52 - controller dot js file
16:56 - and inside this file we can go ahead and
16:58 - just
16:59 - export our model or export whatever
17:02 - routes
17:03 - should be associated with authentication
17:05 - so in this case
17:06 - we obviously want to have a register
17:10 - route right
17:13 - so if i were to
17:16 - do this
17:17 - and just put that same
17:19 - function
17:21 - let me just get rid of uh this stuff
17:25 - so basically i took the same function
17:27 - that was defined in route
17:28 - and i put it in register
17:30 - but we're only caring about the callback
17:32 - function right here which is the express
17:35 - endpoint or
17:37 - middleware or whatnot
17:39 - and then what we want to do is
17:41 - in routes we can up here just go ahead
17:43 - and include that so we can say const
17:47 - authentication controller is equal to
17:50 - require
17:52 - controllers authentication controller
17:59 - so then whenever we hit this register
18:01 - endpoint we can just say
18:03 - authenticate
18:04 - authenticationcontroller.register
18:10 - so this is a nice way to kind of
18:14 - simplify and keep everything
18:16 - isolated so your controllers again are
18:18 - used for declaring all your endpoints
18:20 - and then your routes are for declaring
18:22 - your routes that point to your
18:24 - controllers
18:26 - so again just to make sure this works
18:28 - let's go ahead and hit that register
18:29 - endpoint and make sure it returns that
18:31 - message
18:32 - and it does everything's still working
18:33 - as expected
18:36 - so now we can actually start
18:39 - implementing some logic to kind of
18:41 - create a user model and save it to a
18:43 - database when someone hits this register
18:45 - endpoint
18:51 - okay so if we take a step back and just
18:54 - talk about what we're trying to do or if
18:56 - you remember from the front end the user
18:58 - is going to pass us an email and a
18:59 - password in the payload of the json
19:02 - all right so on rec.body we should have
19:05 - an email and a password and we already
19:07 - demonstrate that we have email here
19:08 - because we're returning that message
19:12 - so what we are trying to do is we want
19:14 - to create a new user
19:17 - record and store it into our database
19:20 - whenever someone hits this endpoint
19:22 - so first of all let's go ahead and
19:24 - insert or not insert but let's import or
19:27 - require
19:29 - that
19:30 - user model that we declared
19:33 - so we can say const user equals require
19:36 - dot dot model
19:38 - or actually this would be mod tools
19:40 - because we're going to include that
19:42 - index file.js which had all the models
19:45 - declared
19:47 - as
19:48 - attributes on this object
19:52 - so now we can actually use that user
19:54 - object here that we defined
19:56 - inside of our callback
20:00 - so what we can do here at this point
20:03 - is we can say const user is equal to
20:05 - await
20:06 - user.createrec.body
20:10 - i'm going to go ahead and get rid of
20:11 - this stuff for now
20:12 - and
20:14 - of course i'm going to use async
20:16 - instead of promises because it just
20:18 - makes everything cleaner so basically
20:21 - we want to create a user using the body
20:24 - that was passed in on the request
20:27 - and that will create us a new user
20:30 - and if for some reason there's any error
20:32 - such as you know user or email already
20:36 - exists we're going to catch it inside
20:38 - this try catch statement
20:42 - so if we get an error we can say
20:44 - res.status is a 400 error and then go
20:46 - ahead and send
20:49 - some type of error message
20:51 - so in this case i'll say this email
20:54 - account is already in use
21:00 - and you've seen that on front ends where
21:02 - you try to sign up for the same
21:04 - website with the same email account
21:05 - it'll tell you like you know this email
21:06 - account is already in use so this will
21:08 - be returned to the user
21:10 - if this fails to run for some reason
21:15 - and then if it is successful we can just
21:17 - go ahead and send back that information
21:19 - so i'll just go ahead and say
21:21 - res.send user.2 json
21:25 - to basically send back that user object
21:29 - to the client who has requested this
21:31 - endpoint
21:34 - so go ahead and save this file
21:36 - make sure that there's not any linting
21:38 - issues or crashing the server
21:40 - seems like everything is fine and what
21:42 - we can do at this point is if i go to
21:44 - register
21:46 - and i go and try to pass it testing
21:49 - gmail.com it should return a 200 status
21:52 - with that user object that was created
21:54 - right so now this is actually inside the
21:57 - sqlite database we actually have a user
22:00 - so if i were to try to do this again
22:02 - we should get that catch error back it
22:04 - says this email account is already in
22:06 - use
22:12 - all right so that's pretty cool i mean
22:13 - we have a
22:14 - server running that's connected to a
22:16 - database using sqlize we're able to
22:18 - store information inside the database at
22:20 - this point we can't really grab it yet
22:21 - from any endpoints
22:23 - but we've demonstrated that yes the data
22:26 - has been changing because now we get
22:27 - this error account our error message
22:29 - back when we try to create an account
22:31 - with the exact same email
22:34 - and again the reason why that constraint
22:36 - is failing is because in the model we
22:38 - added line five which is unique true
22:40 - saying that the email has to be unique
22:43 - so it can't already exist inside that
22:44 - record
22:50 - okay so at this point
22:53 - you may say okay well if i were to try
22:55 - to pass in a bogus email account
22:57 - so like one two three
23:00 - to this endpoint it's still gonna work
23:02 - it's still gonna try to create an
23:03 - account with that email
23:05 - so another useful thing to do to have on
23:07 - your back-end is validation
23:10 - so what we're going to do at this point
23:11 - is let's go ahead and make or include
23:14 - another framework called joy
23:18 - so i'll do npm install save joy and joy
23:20 - is a framework used for validating the
23:22 - request dot body the request.query or
23:26 - the request.parameters
23:30 - and so as an example
23:33 - of how you set that up
23:35 - typically in these bigger frameworks
23:37 - you're going to have like another folder
23:38 - called like policies
23:41 - so i'm going to go ahead and create a
23:42 - folder called policies here
23:44 - and i'm going to go ahead and create an
23:46 - authentication
23:48 - controller policy
23:54 - and inside this file we want to kind of
23:57 - create express middleware which is going
23:59 - to validate that certain
24:01 - requirements or data constraints pass or
24:04 - fail
24:05 - so to start off we'll say module.exports
24:07 - and then we're going to export the name
24:09 - of the exact same
24:14 - method that we've used in our controller
24:16 - so we'll call it register
24:18 - it's going to be a function which takes
24:20 - wreck res and next
24:24 - and what we want to do is first we need
24:26 - to
24:27 - include that joy framework that we just
24:29 - installed
24:30 - which should be done by this point yep
24:32 - it is so i'll close that
24:35 - and then we also want to go ahead and
24:38 - actually that's all we need to do right
24:39 - there so again we included the joy
24:42 - framework we created this module which
24:44 - has a register
24:47 - method
24:49 - and for now i can just say call next
24:51 - and how do we actually use this right so
24:53 - if we go back to routes
24:56 - we can include this up here and say
24:57 - const
24:58 - authentication
25:00 - controller policy
25:02 - is equal to require
25:04 - and i'll just say policies
25:09 - so go ahead and require that in
25:11 - and then what we want to do is call that
25:13 - policy
25:17 - as a middleware
25:19 - function before we hit our controller
25:21 - so how this works in express is we're
25:23 - going to hit this endpoint
25:25 - and it's going to continue to go down
25:26 - the list and invoke whatever middleware
25:28 - that you have defined so it's going to
25:30 - hit this controller policy.register file
25:32 - which is declared here
25:34 - and then when this method calls next
25:37 - it's going to go ahead and go to
25:39 - the next line which is going to be our
25:41 - registry endpoint which again is defined
25:43 - here
25:47 - so again this is express middleware you
25:49 - can read more about it on their
25:50 - documentation page and i think it'll
25:52 - make
25:53 - more sense as we continue making more
25:54 - endpoints down the road
25:56 - so what we want to do inside this
25:59 - middleware function is we need to
26:01 - validate that email and password kind of
26:02 - match a couple of constraints
26:06 - so the first constraint we need to do is
26:08 - we need to do const
26:09 - schema
26:10 - is equal to an object
26:13 - and in that object we're going to have
26:14 - email we're also going to have password
26:16 - and email is going to be required to be
26:19 - a string
26:20 - and it's also going to be required to be
26:22 - an email
26:24 - format
26:25 - so joy has a bunch of different like
26:27 - built-in
26:28 - pre-baked validations and email is one
26:30 - of them so we're saying email has to be
26:32 - an email
26:34 - and then password we can say
26:35 - make sure it's also a string and make
26:38 - sure it matches a particular regex
26:40 - expression
26:42 - so i'm just going to pass a new
26:44 - regex expression
26:47 - and what we want to do here
26:50 - is pass it
26:52 - character class of a through z capital a
26:55 - through z or zero through nine
26:57 - and then of course make sure it's at
26:58 - least eight to thirty two characters
27:00 - long
27:03 - and then go ahead and put a money sign
27:05 - to end
27:06 - that string
27:11 - so i think i might i think i did that
27:13 - correctly so basically again email has
27:15 - to be an email address and then password
27:17 - has to be a string which matches this
27:20 - regex expression and again if you don't
27:21 - know much about regex you should
27:22 - probably go read up on regex but
27:23 - basically
27:24 - we have these classes which say
27:26 - everything that's passed in has to be
27:27 - the character lowercase a through z
27:30 - uppercase a through z
27:31 - or zero through nine and it has to be a
27:33 - minimum of eight characters and a
27:34 - maximum of 32 characters
27:40 - so after we have the schema defined
27:43 - we need to actually use it so we say
27:45 - const error
27:47 - value is equal to joy.validate
27:50 - and the first parameter you do for
27:52 - validate is you need to pass it the
27:53 - thing you're trying to validate so in
27:55 - this case we want to validate the
27:56 - request body and we want to validate it
27:59 - against our schema
28:02 - so this will return an error if there
28:04 - was an error so i'll say if error
28:07 - else
28:08 - we just go to the next
28:10 - so basically if there's no error
28:11 - everything's good we just go to the
28:13 - register endpoint and register that user
28:16 - if for some reason there was an error
28:19 - we need to figure out which validation
28:22 - failed so i'll say switch
28:24 - error details of zero
28:27 - context of key so that gives us the key
28:29 - that failed in this case it's going to
28:30 - be either email or password
28:34 - and then we're going to have a switch
28:35 - case and just check if it was email we
28:38 - need to do something if it was password
28:40 - we got to do something and then default
28:42 - do something else
28:50 - so starting off if for some reason the
28:52 - email validation failed we could say
28:53 - resolve status of 400
28:55 - and then go ahead and send an error
28:58 - message saying let's say like
29:00 - you must provide a valid email address
29:05 - cool
29:06 - and then for password
29:11 - a similar thing but we're going to say
29:13 - uh
29:15 - this time let's just return a little bit
29:17 - more information
29:19 - so i'll say
29:22 - the password provided failed to match
29:25 - the following rules
29:28 - and then
29:29 - we'll just make this html so we can
29:31 - easily format this i can say it must
29:34 - contain
29:36 - only the following characters
29:39 - lowercase upper case
29:42 - numerics
29:45 - and then i'll say
29:47 - rule 2 is it must be at least
29:50 - 8
29:51 - characters
29:53 - in length
29:56 - and not greater than 32 characters in
29:59 - length
30:06 - so again if there is an error
30:08 - we check if it was an email error we can
30:10 - send back you must provide a valid email
30:11 - address we check if there's a password
30:13 - error and say you know the password has
30:15 - to match these rules and then otherwise
30:17 - we can just say like
30:20 - i don't know resident status of 400
30:23 - send
30:24 - an error saying like
30:28 - invalid registration information
30:40 - so that should make sense let's just
30:42 - again do a recap
30:43 - we included the joy framework which is
30:46 - used for validating different things in
30:48 - express then we created a module which
30:51 - has a register
30:53 - method
30:54 - which is an express middleware which
30:56 - takes a wreck a res and a next
30:58 - and again rec is the request that comes
31:00 - in res is what you use to send something
31:02 - back and next is what you call to invoke
31:05 - the next thing in the routes path
31:08 - and then we declared a schema which says
31:10 - emails must have an email structure
31:12 - passwords must match this projects
31:15 - we validate the
31:17 - against the schema here
31:19 - we check the error we check the key of
31:21 - the error and return different error
31:23 - messages depending on what failed and
31:25 - then if everything was good we just go
31:27 - ahead and call next
31:30 - so at this point i'll go ahead and save
31:31 - that file
31:32 - and i'll double check to make sure that
31:34 - we don't have issues
31:36 - so on the routes we have no trailing
31:39 - spaces let me go to the routes file
31:53 - cool
31:56 - all right so now at this point let's go
31:57 - ahead and test out that the policy is
31:58 - working as expected and
32:01 - to do that we can again go back to
32:02 - postman and we can try to pass it bogus
32:04 - data so we'll say
32:06 - pass it just testing
32:08 - sends back an error you must provide a
32:10 - valid email address with a 400 bad
32:12 - request response and so if i were to
32:14 - give it a good email address
32:16 - and try to send it's gonna say the
32:18 - password provided failed to match the
32:19 - following rules so cool that's working
32:22 - if i go to seven and eight
32:24 - and send that
32:25 - it says this email account is already in
32:27 - use
32:30 - so i'll change that and see what happens
32:32 - so boom we're allowed to create a 123 at
32:34 - gmail.com
32:36 - with the password one two three four
32:37 - five six seven eight
32:40 - and it returns us back the exact user
32:42 - that has been created
32:46 - all right so now at this point we have a
32:48 - pretty
32:49 - good setup for registering a user into
32:51 - our database
32:53 - and we have policies that kind of return
32:54 - errors
32:56 - so that the user knows what exactly is
32:58 - required
33:00 - um we also need to at some point
33:04 - hash the password because you're not
33:05 - supposed to be saving
33:06 - no raw passwords into your database but
33:09 - we can kind of cover that in a second so
33:11 - let's go ahead and move to the ui again
33:16 - so if i go back to that
33:18 - register
33:20 - component up here
33:22 - just a recap we had an input
33:25 - for email and input for password
33:27 - and we had a button to register
33:31 - okay so now that the backend is
33:32 - returning different error codes and
33:34 - messages we want to kind of display that
33:37 - in our user interface so what we can do
33:39 - is
33:40 - if we want to catch the error that's
33:42 - returned we can go ahead and just wrap
33:43 - this in a try catch
33:46 - so if for whatever reason authentication
33:48 - service
33:49 - fails to
33:50 - return or if it fails to
33:54 - for whatever sorry let me rephrase that
33:55 - for whatever reason authentication
33:57 - service the endpoint returns a status
33:59 - other than like 200 or whatnot
34:01 - we can catch that error here and we can
34:03 - go ahead and say this.error is equal to
34:06 - let me change this to response
34:10 - actually i'll say error so i'll say
34:11 - error.response.data
34:15 - dot error and this is basically
34:17 - what is returned from axios and then
34:19 - error is going to be that message that
34:21 - we've defined
34:22 - and of course if we're going to try to
34:24 - access this.error we need to define it
34:26 - in data
34:27 - oops
34:31 - and then lastly we need to kind of print
34:33 - that out so up here if i above the
34:35 - button
34:36 - i could just do div and i could say v
34:38 - html is equal to error
34:41 - i can just close up close that off here
34:44 - and again put a break
34:47 - i'm also going to say that this is going
34:48 - to be a
34:51 - class of error so down in the style i
34:54 - can say error
34:56 - is equal to color of red
34:59 - so if i were to save this file
35:00 - now and then try to register with some
35:03 - bogus data we get you must provide a
35:05 - valid email address
35:07 - change to
35:09 - gmail.com
35:11 - password
35:13 - provided field to match the following
35:14 - rules
35:16 - it seems like that kind of truncated
35:17 - some of the data
35:21 - so maybe this isn't like
35:23 - big enough let me just double check
35:24 - what's going on here
35:39 - because it looks like it's returning
35:41 - okay so in my my back and you see
35:42 - there's a little i'm missing a carrot
35:44 - here
35:45 - so let me just go back to my back-end
35:47 - code really quick
35:48 - to my authentication controller
35:51 - actually i'll go to my policy
35:53 - and i'll change that to that
35:57 - now if i try to hit the end point again
36:02 - boom okay so we get the actual full
36:03 - error message now
36:13 - cool so again as a recap
36:15 - i didn't really explain
36:17 - view components before but basically
36:18 - every dot view file is separated into
36:20 - three sections you have your template
36:22 - which is used to define your html
36:24 - template
36:25 - and then inside your html you can have
36:27 - special attributes like v model or v
36:30 - html technically anything that has v
36:32 - hyphen
36:34 - is a view specific attribute
36:36 - and that's used to kind of bind to your
36:39 - script tag down here which is the second
36:41 - part that every dot view component has
36:43 - and the script is basically an object
36:46 - that has a different lots of different
36:47 - methods on it so data
36:49 - is the data that you can bind two way in
36:51 - one way to your template and then
36:54 - methods would be any type of method that
36:55 - you want to be able to access from your
36:57 - template and there's a couple others
36:58 - which we'll cover in the future but it's
37:00 - just for now we just focus on those two
37:04 - and again the last one is your style
37:06 - section which is going to be in this
37:08 - case scoped so any styles you declare
37:10 - here will not affect anything else on
37:12 - your view application assuming that you
37:14 - have scoped
37:15 - so dot error
37:17 - will only work for this template
37:20 - so again everything in view is really
37:21 - like compartmentalized and isolated so
37:24 - it's really nice
37:26 - um let's try to think again here's an
37:28 - example at click
37:30 - means whenever the button fires a click
37:32 - event
37:33 - call the register method
37:34 - which is what you saw down here that's
37:36 - how we're calling register
37:40 - so just a little bit more information
37:42 - about the view component that i don't
37:44 - think i really talked about in part one
37:45 - i kind of started doing stuff without
37:47 - talking but
37:49 - hopefully by now that kind of makes more
37:50 - sense
37:53 - all right so for i think the last thing
37:55 - i'm going to do in this part 2 video is
37:56 - i want to kind of bring in a new
37:58 - um project inside the front end to allow
38:01 - us to see easily style and kind of do
38:03 - layouts so there's a
38:05 - there's a um
38:07 - a project called beautify
38:09 - which is a framework that can be used to
38:11 - build like material designs
38:14 - apps
38:16 - so again their documentation is pretty
38:17 - good here
38:19 - on the left it has like you know all the
38:20 - components you can use so if i wanted to
38:22 - do like a grid list or a form
38:26 - they give examples of how you do it
38:28 - you can go and check out their code here
38:29 - they give you a template
38:32 - um i think you can see the code
38:34 - somewhere
38:35 - maybe not
38:37 - let me find a different one
38:40 - data
38:41 - tables here we go
38:45 - so again they give me an example of a
38:46 - data table you can go here and view the
38:48 - source code what you get is the template
38:50 - and they give you the script here
38:53 - so again beautify is just a framework
38:55 - that's used for building really nice
38:57 - material design apps
38:59 - so be fit feel free to check it out and
39:01 - that's what we're going to be using
39:04 - so what we want to do
39:06 - to include this in our application
39:10 - is we first want to go over to again our
39:12 - terminal and go to our client
39:15 - and we want to mp install a couple of
39:17 - things so first of all we want to
39:18 - include
39:19 - beautify
39:22 - and i think actually that's the only
39:23 - thing we need to include is just
39:24 - beautify
39:28 - okay so now that that is done installing
39:30 - we can just go back to our ui and we
39:32 - want to include it so if we go to our
39:34 - main.js file here
39:36 - up here we can just say import
39:38 - viewtify from view to phi
39:42 - and then we also want to import the
39:44 - style sheet so i'll say
39:46 - beautify dist
39:48 - beautify min.css
39:54 - and then to kind of enable that
39:57 - we can say view dot use viewify
40:03 - go ahead and save that and hopefully
40:06 - assuming i didn't forget anything that
40:08 - should kind of
40:10 - load in the project so now we have the
40:11 - beautify and the beautify css
40:14 - ready to go
40:18 - so let's go ahead and try to style this
40:20 - there's some there's a cup of
40:22 - the design i kind of like doing is
40:24 - putting stuff in panels
40:26 - with like a drop shadow
40:28 - i'm not really a
40:29 - style or a designer so um
40:34 - feel free to critique me or give me
40:35 - feedback
40:37 - so what i'm going to do here is i'm
40:38 - going to go to the register.view
40:41 - file here
40:43 - and beautify gives you the ability to
40:45 - kind of like
40:47 - change up your layout
40:49 - so they give you something called like
40:52 - v
40:53 - layout
40:55 - and you can pass it like a column layout
40:59 - so i'll do v layout and this is pretty
41:01 - much um like flexbox so this is a v like
41:04 - a flex grid or whatever and then here we
41:06 - can do v flex
41:08 - which is going to be a flex item
41:12 - and then you can change it kind of like
41:13 - a bootstrap where you can change it
41:14 - depending on the size of the screen
41:16 - we can say
41:18 - for small screens we want to offset it
41:20 - three and then just make it a width of
41:22 - six
41:25 - and then in here we can say
41:31 - let's make a div
41:33 - and then the beautify css gives you a
41:35 - couple of
41:36 - um
41:36 - pre-baked css so we can give it an
41:38 - elevation of two and a white that's
41:40 - going to make like a white um
41:42 - panel with a little bit of
41:44 - box shadow or drop shadow
41:46 - another thing we can get from using
41:48 - beautify is a v toolbar
41:52 - so it's a v toolbar i'll pass it a flat
41:54 - and a dense attribute and i'll give it a
41:56 - class of cyan
41:58 - i'll give it a attribute of dark
42:00 - so that it turns the text
42:02 - white
42:05 - and then inside the toolbar again this
42:07 - is on the beautify examples
42:10 - so if you just want to go and copy and
42:12 - paste from their examples you can do
42:13 - that too
42:21 - um so let me just make sure i got this
42:24 - all right
42:26 - basically i can copy this code out
42:29 - and put it underneath here
42:41 - wrap this in a div in case we need some
42:42 - padding
42:45 - and then also beautify gives you a
42:46 - couple of classes so i can do like
42:48 - padding left is four
42:51 - padding right
42:53 - four
42:55 - padding top two padding bottom of two
43:02 - so make sure all these line up
43:05 - kind of running out of energy so i might
43:07 - wrap this up pretty pretty soon so
43:09 - hopefully if i save this it should be a
43:11 - styled panel
43:13 - with register
43:15 - and then we have our email account
43:17 - and we have our password here
43:20 - and then we have a register button
43:23 - in the button
43:24 - we can actually change from button to i
43:26 - think v button
43:30 - so if i were to do v btn
43:39 - give it a class
43:40 - of cyan
43:43 - should change this to a register button
43:46 - so that's
43:47 - i think good enough for right now we can
43:49 - come back and make this a lot nicer
43:50 - looking but i'm kind of running out of
43:52 - energy so
43:53 - stay tuned for part three
43:55 - and again as a recap we included the
43:57 - beautify project which again you can
43:58 - find the docs here on beautifyjas.com
44:03 - they have a bunch of different
44:04 - components and styles that are pre-baked
44:06 - it's really awesome library so check it
44:08 - out
44:08 - and then we use beautify the kind of
44:10 - style this register panel
44:12 - i think part three we can just
44:14 - try to fix the styling and do more by
44:16 - adding like a header or side nav or
44:18 - something like that
44:19 - all right thanks for watching and stay
44:21 - tuned for part three it should be coming
44:23 - in a couple of days hopefully
44:24 - thanks for watching

Cleaned transcript:

hey everyone i'm cody cyber and welcome to part two of building a full stack web application using vue.js and express.js so if you remember on the last part one we built a register page which hits a slash register endpoint on the server so in this part two one of the things we're going to do is actually connect to a database or have our api connect to a database and in this case we're going to be using sqlize which is an orm to connect to like sql related databases such as like mysql or postgres or sqlite um a couple people asked if we could do mongodb but i also i feel like you know sql databases are still one of the most popular ones so i think it's more important to learn how to use sql versus mongodb and also i think the data that we're working with is relational which is another reason why i think we should be using sqlize to connect to a database to store these relational models all right so before i get started with bringing in sqlize let's go ahead and just look at it really quick so inside the sqlize project they have this these docs defined these docks are pretty good they're not the best but um if you read through these you can get a good understanding of how you use sqlize you know how you define models how you can use models but basically then in a to sum it up sqlize provides you with data models where each model maps to a table in a database so for instance if you wanted to create a user model that has a email and a password you can just create a sqlized model and then it'll automatically connect to whatever sql database such as sql lite it'll create your tables and then create your columns for that table and then you can use objects inside your node or express server to kind of manipulate that data or add records or move records etc that's kind of all i'm going to cover with the sqlize documentation so let's just go ahead and get started using sqlize so start off we want to first install those dependencies so on the right i'm going to say npm install save sqlize and we also want to include sqlite 3 and i'm going to do version 138 just because i ran to an issue in the past with a newer version of sqlite3 so anyway when that stuff is done installing it shouldn't take too long what we can do in the meantime is we need to first kind of get our project set up to start using that sqlize package so to start off we're going to go ahead and pretend like we have a file called models which is going to export a sqlize object so if i do consequence equals require dot slash models if i spell that correctly so basically we're assuming that there's a models folder which has an index.js file which returns an object that has a sqlize attribute on here and what we want to do is just go ahead and do sqlize.sync which will basically connect sqlize to whatever database that you have it configured for and then create the tables if they don't exist and just get everything that's set up and ready to go and once you're done sqli or syncing sqlize to your database we're going to go ahead and just start our server and to kind of make this more useful when the server starts just go ahead and print out a message so we can actually know when it started so i'll say console.log server start it on port and i'll say config port and then here i'm going to refactor this a little bit and just say config port you'll notice that we don't have anything called config defined in this file so up here i'm going to say const config is equal to require slash config config so the first thing i need to do is create a new folder called config and i'll create a file inside that folder called config.js inside config.js i want to export something that says port 8081 so now app.js can include that file and then kind of use whatever is defined in that config to spin up the application another refactoring i'm going to do before i actually start working more into sqlize and define the models is if you notice here we have the routes defined it's kind of useful if you have a separate file where all your routes are defined so what i'm going to do is in the source folder i'm going to make a new file called routes.js and that's going to export a function and basically what we're going to do is cut that code out and put it inside that wraps function or that routes.js module save that file and then here what we can do is just go ahead and require that file so i can say const actually i could just say require routes and then i'm going to pass it app because if you remember our routes file basically just returns us returns a function for us where we can pass an app and it's going to just go ahead and attach all the different endpoints onto that application or that express application variable all right so by this point sqlize and sqlite3 should be done installing which it is i'm going to go ahead and just close out of that tab and then additionally we're seeing an error print out because the routes file does not have a new line at the end of the file so i'm just going to fix that really quick do the same thing with config okay so it says right now cannot find module models because we haven't even declared that yet so that leads us to the next step of part two which i'm going to start building up a a user sqlize model so to start off let's just go ahead and make a folder called models and inside here i'm going to make a new file called user.js which is going to be my user model so the first thing you need to do is if you read through the sqlize documentation you can kind of figure out how you define sqlize models and we're going to do a little bit of custom logic and linking for our models so that we can kind of easily put new models into this model folder and not have to worry about importing it somewhere else so what i'm going to do is i'm going to say user.js is a file which exports a function which takes sqlize and data types and then what this is going to do is i'm going to use sqlize to define so you do sqlize define a new model so the first argument is the name of your model which is going to be user and it's going to be used for storing user related information so first one we want to or so the second argument here this is are the options or attributes that are attached to your table or model so the first attribute we want is email because you know you sign up with your email and password so say that's going to be called email and the type is going to be a string and then we're also going to say that this is required to be unique because we don't want multiple users signing up with the same email account and then the second attribute we're going to say it's going to be called password and it's also going to be a string so this point again user.js is a function which takes equalize and takes data types and then it's going to return or define a user model which we can use so now the next step is if you remember in the app.js we included slash models so we need to create a index.js file and inside this index.js file we want to do a couple of things first we're going to declare a db object which we're going to export later on but more importantly we first want to include a fs module which is the node.js way of like reading through the file system we're going to include the path module which is used for kind of dealing with you know absolute paths relatives paths or whatever it's so we're going to use that in conjunction with fs um we're going to include the sqlize model because we're going to need that to actually create a sqlize object and connect it to a database we're going to include that config file that we created earlier and okay so at this point the first step we're going to do is we're going to decline declare a sqlize object so we can say consequence is equal to new sqlize and that's going to take in a couple of arguments so the first argument is going to be the database that we're connecting to so let's just assume in config we have something called db.database and we can also assume that we have something called user we have something called password and then lastly we have additional options that we can pass to sqlize so at this point what we can do is we can go in to that config file and i'm going to go ahead and declare a db attribute which is going to have that database it's going to have user get a password it's going to have options so for database we're going to load in a couple of environment variables and fall back to tab tracker so this is the name of the database that we're going to use so typically if you have like mysql or postgres you create a database so your postgres instance is going to have like 100 different databases inside of it and each database has a unique name so we're say database is equal to this environment variable db name or tab tracker and we're going to use this later on when we like deploy to a real environment but it's good just to have this here in the meantime and if it's not defined we're going to fall back using the or to tab tracker and the same thing with user we'll say db user password process env db pass and that's also just going to be tab tracker for local and then finally when we get to options there's three things we need to define so first is dialect and that's a useful option in sqlize to tell it what type of database you're going to be connecting to so obviously we want to set that to sqlite when we're local we have host and that's used for telling sqlize the location of the database that you want to connect to so in this case we'll say localhost is the default and then lastly we want to put storage for sqlite and that furniture tells you where to store your sqlite file so i'll say tab tracker sqlite cool so at this point we have again a config file that declares the port in fact i'm going to do process env port or 8081 so we can overwrite that as needed and then we have an attribute called db which has all the different sqlize related configuration we need so this if i go back to models folder and then index.js you can see how this makes sense that we're just grabbing that config and passing it to the sqlize constructor here now the next part is we want to just go ahead and write some short functionality to just automatically read through all the models in this models folder and set it up to be used with sqlize so i'm going to go ahead and do fs dot read sync and then pass it down name so basically this is going to read through the current directory and give us an array of different files and i'm going to filter out any file that is equivalent to index.js so we don't we don't want this index file but we want every other model file and then after we do that filter we can just say for each file that we found we want to go ahead and declare a model and basically sqlize has a import method where you can give it a full path to a file and it will go ahead and just import that and set it up to be used with sqlize so i'll go ahead and use path.join to join the door name to the pet file and then tell sqlize to import it and then finally we can say set the db dot name of the model so in this case would be db.user is equal to model and then lastly we can just go ahead and declare a couple of useful variables onto this db object so i'm going to declare db sqlize and capital sqlize so that when we use this in our code we have access to the sqlize object we have access to the capital sqlize object and then we have access to the actual models alrighty so at this point let's go ahead and make sure that you know we don't have any linting issues okay so we saw that the server restarted itself when i saved some of the files and then it executed this sql command and said create table if not exist users and then it gave that table a couple of columns such as email and password and that's about it so basically sqlize will create your table if it doesn't exist and give it the columns that you've defined in your model and that was pretty easy to do like a lot of this stuff like this we didn't even need to do but it's more of a helper function that allows us to easily add more models down the road without having to like for each one require it import it and set it up in sqlize okay so again as a recap we installed sqlize so if you look at package.json we installed sqlize and sqlite3 sqlize is an orm used to connecting to sql databases and sqlite3 is a local instance of a sql database without having to go through all the extra work of setting it up and whatnot and then once we installed those we're going to we went ahead and created this models folder which has a sqlize model which we're going to be using for our user accounts which has an email and has a password and then we have this index file which is basically used for connecting to our database which is going to load in a couple of configurations which is defining our config right here and then it's going to go ahead and read all the files that are in this models folder that do not equal index.js and it's going to go ahead and load them into sqlize and then we just go ahead and return that which we can use later on so at this point we can actually start modifying our route to use this sqlize stuff so another thing i'm going to do let me just close out of all these tabs so we're requiring routes here so if i open up the routes file i think we're done with app.js for a while something that is useful and you'll see this on a lot of frameworks is that you're going to have a folder called controllers and a controller is basically where you have all of your endpoints defined so inside controllers i'm going to go ahead and create an authentication controller dot js file and inside this file we can go ahead and just export our model or export whatever routes should be associated with authentication so in this case we obviously want to have a register route right so if i were to do this and just put that same function let me just get rid of uh this stuff so basically i took the same function that was defined in route and i put it in register but we're only caring about the callback function right here which is the express endpoint or middleware or whatnot and then what we want to do is in routes we can up here just go ahead and include that so we can say const authentication controller is equal to require controllers authentication controller so then whenever we hit this register endpoint we can just say authenticate authenticationcontroller.register so this is a nice way to kind of simplify and keep everything isolated so your controllers again are used for declaring all your endpoints and then your routes are for declaring your routes that point to your controllers so again just to make sure this works let's go ahead and hit that register endpoint and make sure it returns that message and it does everything's still working as expected so now we can actually start implementing some logic to kind of create a user model and save it to a database when someone hits this register endpoint okay so if we take a step back and just talk about what we're trying to do or if you remember from the front end the user is going to pass us an email and a password in the payload of the json all right so on rec.body we should have an email and a password and we already demonstrate that we have email here because we're returning that message so what we are trying to do is we want to create a new user record and store it into our database whenever someone hits this endpoint so first of all let's go ahead and insert or not insert but let's import or require that user model that we declared so we can say const user equals require dot dot model or actually this would be mod tools because we're going to include that index file.js which had all the models declared as attributes on this object so now we can actually use that user object here that we defined inside of our callback so what we can do here at this point is we can say const user is equal to await user.createrec.body i'm going to go ahead and get rid of this stuff for now and of course i'm going to use async instead of promises because it just makes everything cleaner so basically we want to create a user using the body that was passed in on the request and that will create us a new user and if for some reason there's any error such as you know user or email already exists we're going to catch it inside this try catch statement so if we get an error we can say res.status is a 400 error and then go ahead and send some type of error message so in this case i'll say this email account is already in use and you've seen that on front ends where you try to sign up for the same website with the same email account it'll tell you like you know this email account is already in use so this will be returned to the user if this fails to run for some reason and then if it is successful we can just go ahead and send back that information so i'll just go ahead and say res.send user.2 json to basically send back that user object to the client who has requested this endpoint so go ahead and save this file make sure that there's not any linting issues or crashing the server seems like everything is fine and what we can do at this point is if i go to register and i go and try to pass it testing gmail.com it should return a 200 status with that user object that was created right so now this is actually inside the sqlite database we actually have a user so if i were to try to do this again we should get that catch error back it says this email account is already in use all right so that's pretty cool i mean we have a server running that's connected to a database using sqlize we're able to store information inside the database at this point we can't really grab it yet from any endpoints but we've demonstrated that yes the data has been changing because now we get this error account our error message back when we try to create an account with the exact same email and again the reason why that constraint is failing is because in the model we added line five which is unique true saying that the email has to be unique so it can't already exist inside that record okay so at this point you may say okay well if i were to try to pass in a bogus email account so like one two three to this endpoint it's still gonna work it's still gonna try to create an account with that email so another useful thing to do to have on your backend is validation so what we're going to do at this point is let's go ahead and make or include another framework called joy so i'll do npm install save joy and joy is a framework used for validating the request dot body the request.query or the request.parameters and so as an example of how you set that up typically in these bigger frameworks you're going to have like another folder called like policies so i'm going to go ahead and create a folder called policies here and i'm going to go ahead and create an authentication controller policy and inside this file we want to kind of create express middleware which is going to validate that certain requirements or data constraints pass or fail so to start off we'll say module.exports and then we're going to export the name of the exact same method that we've used in our controller so we'll call it register it's going to be a function which takes wreck res and next and what we want to do is first we need to include that joy framework that we just installed which should be done by this point yep it is so i'll close that and then we also want to go ahead and actually that's all we need to do right there so again we included the joy framework we created this module which has a register method and for now i can just say call next and how do we actually use this right so if we go back to routes we can include this up here and say const authentication controller policy is equal to require and i'll just say policies so go ahead and require that in and then what we want to do is call that policy as a middleware function before we hit our controller so how this works in express is we're going to hit this endpoint and it's going to continue to go down the list and invoke whatever middleware that you have defined so it's going to hit this controller policy.register file which is declared here and then when this method calls next it's going to go ahead and go to the next line which is going to be our registry endpoint which again is defined here so again this is express middleware you can read more about it on their documentation page and i think it'll make more sense as we continue making more endpoints down the road so what we want to do inside this middleware function is we need to validate that email and password kind of match a couple of constraints so the first constraint we need to do is we need to do const schema is equal to an object and in that object we're going to have email we're also going to have password and email is going to be required to be a string and it's also going to be required to be an email format so joy has a bunch of different like builtin prebaked validations and email is one of them so we're saying email has to be an email and then password we can say make sure it's also a string and make sure it matches a particular regex expression so i'm just going to pass a new regex expression and what we want to do here is pass it character class of a through z capital a through z or zero through nine and then of course make sure it's at least eight to thirty two characters long and then go ahead and put a money sign to end that string so i think i might i think i did that correctly so basically again email has to be an email address and then password has to be a string which matches this regex expression and again if you don't know much about regex you should probably go read up on regex but basically we have these classes which say everything that's passed in has to be the character lowercase a through z uppercase a through z or zero through nine and it has to be a minimum of eight characters and a maximum of 32 characters so after we have the schema defined we need to actually use it so we say const error value is equal to joy.validate and the first parameter you do for validate is you need to pass it the thing you're trying to validate so in this case we want to validate the request body and we want to validate it against our schema so this will return an error if there was an error so i'll say if error else we just go to the next so basically if there's no error everything's good we just go to the register endpoint and register that user if for some reason there was an error we need to figure out which validation failed so i'll say switch error details of zero context of key so that gives us the key that failed in this case it's going to be either email or password and then we're going to have a switch case and just check if it was email we need to do something if it was password we got to do something and then default do something else so starting off if for some reason the email validation failed we could say resolve status of 400 and then go ahead and send an error message saying let's say like you must provide a valid email address cool and then for password a similar thing but we're going to say uh this time let's just return a little bit more information so i'll say the password provided failed to match the following rules and then we'll just make this html so we can easily format this i can say it must contain only the following characters lowercase upper case numerics and then i'll say rule 2 is it must be at least 8 characters in length and not greater than 32 characters in length so again if there is an error we check if it was an email error we can send back you must provide a valid email address we check if there's a password error and say you know the password has to match these rules and then otherwise we can just say like i don't know resident status of 400 send an error saying like invalid registration information so that should make sense let's just again do a recap we included the joy framework which is used for validating different things in express then we created a module which has a register method which is an express middleware which takes a wreck a res and a next and again rec is the request that comes in res is what you use to send something back and next is what you call to invoke the next thing in the routes path and then we declared a schema which says emails must have an email structure passwords must match this projects we validate the against the schema here we check the error we check the key of the error and return different error messages depending on what failed and then if everything was good we just go ahead and call next so at this point i'll go ahead and save that file and i'll double check to make sure that we don't have issues so on the routes we have no trailing spaces let me go to the routes file cool all right so now at this point let's go ahead and test out that the policy is working as expected and to do that we can again go back to postman and we can try to pass it bogus data so we'll say pass it just testing sends back an error you must provide a valid email address with a 400 bad request response and so if i were to give it a good email address and try to send it's gonna say the password provided failed to match the following rules so cool that's working if i go to seven and eight and send that it says this email account is already in use so i'll change that and see what happens so boom we're allowed to create a 123 at gmail.com with the password one two three four five six seven eight and it returns us back the exact user that has been created all right so now at this point we have a pretty good setup for registering a user into our database and we have policies that kind of return errors so that the user knows what exactly is required um we also need to at some point hash the password because you're not supposed to be saving no raw passwords into your database but we can kind of cover that in a second so let's go ahead and move to the ui again so if i go back to that register component up here just a recap we had an input for email and input for password and we had a button to register okay so now that the backend is returning different error codes and messages we want to kind of display that in our user interface so what we can do is if we want to catch the error that's returned we can go ahead and just wrap this in a try catch so if for whatever reason authentication service fails to return or if it fails to for whatever sorry let me rephrase that for whatever reason authentication service the endpoint returns a status other than like 200 or whatnot we can catch that error here and we can go ahead and say this.error is equal to let me change this to response actually i'll say error so i'll say error.response.data dot error and this is basically what is returned from axios and then error is going to be that message that we've defined and of course if we're going to try to access this.error we need to define it in data oops and then lastly we need to kind of print that out so up here if i above the button i could just do div and i could say v html is equal to error i can just close up close that off here and again put a break i'm also going to say that this is going to be a class of error so down in the style i can say error is equal to color of red so if i were to save this file now and then try to register with some bogus data we get you must provide a valid email address change to gmail.com password provided field to match the following rules it seems like that kind of truncated some of the data so maybe this isn't like big enough let me just double check what's going on here because it looks like it's returning okay so in my my back and you see there's a little i'm missing a carrot here so let me just go back to my backend code really quick to my authentication controller actually i'll go to my policy and i'll change that to that now if i try to hit the end point again boom okay so we get the actual full error message now cool so again as a recap i didn't really explain view components before but basically every dot view file is separated into three sections you have your template which is used to define your html template and then inside your html you can have special attributes like v model or v html technically anything that has v hyphen is a view specific attribute and that's used to kind of bind to your script tag down here which is the second part that every dot view component has and the script is basically an object that has a different lots of different methods on it so data is the data that you can bind two way in one way to your template and then methods would be any type of method that you want to be able to access from your template and there's a couple others which we'll cover in the future but it's just for now we just focus on those two and again the last one is your style section which is going to be in this case scoped so any styles you declare here will not affect anything else on your view application assuming that you have scoped so dot error will only work for this template so again everything in view is really like compartmentalized and isolated so it's really nice um let's try to think again here's an example at click means whenever the button fires a click event call the register method which is what you saw down here that's how we're calling register so just a little bit more information about the view component that i don't think i really talked about in part one i kind of started doing stuff without talking but hopefully by now that kind of makes more sense all right so for i think the last thing i'm going to do in this part 2 video is i want to kind of bring in a new um project inside the front end to allow us to see easily style and kind of do layouts so there's a there's a um a project called beautify which is a framework that can be used to build like material designs apps so again their documentation is pretty good here on the left it has like you know all the components you can use so if i wanted to do like a grid list or a form they give examples of how you do it you can go and check out their code here they give you a template um i think you can see the code somewhere maybe not let me find a different one data tables here we go so again they give me an example of a data table you can go here and view the source code what you get is the template and they give you the script here so again beautify is just a framework that's used for building really nice material design apps so be fit feel free to check it out and that's what we're going to be using so what we want to do to include this in our application is we first want to go over to again our terminal and go to our client and we want to mp install a couple of things so first of all we want to include beautify and i think actually that's the only thing we need to include is just beautify okay so now that that is done installing we can just go back to our ui and we want to include it so if we go to our main.js file here up here we can just say import viewtify from view to phi and then we also want to import the style sheet so i'll say beautify dist beautify min.css and then to kind of enable that we can say view dot use viewify go ahead and save that and hopefully assuming i didn't forget anything that should kind of load in the project so now we have the beautify and the beautify css ready to go so let's go ahead and try to style this there's some there's a cup of the design i kind of like doing is putting stuff in panels with like a drop shadow i'm not really a style or a designer so um feel free to critique me or give me feedback so what i'm going to do here is i'm going to go to the register.view file here and beautify gives you the ability to kind of like change up your layout so they give you something called like v layout and you can pass it like a column layout so i'll do v layout and this is pretty much um like flexbox so this is a v like a flex grid or whatever and then here we can do v flex which is going to be a flex item and then you can change it kind of like a bootstrap where you can change it depending on the size of the screen we can say for small screens we want to offset it three and then just make it a width of six and then in here we can say let's make a div and then the beautify css gives you a couple of um prebaked css so we can give it an elevation of two and a white that's going to make like a white um panel with a little bit of box shadow or drop shadow another thing we can get from using beautify is a v toolbar so it's a v toolbar i'll pass it a flat and a dense attribute and i'll give it a class of cyan i'll give it a attribute of dark so that it turns the text white and then inside the toolbar again this is on the beautify examples so if you just want to go and copy and paste from their examples you can do that too um so let me just make sure i got this all right basically i can copy this code out and put it underneath here wrap this in a div in case we need some padding and then also beautify gives you a couple of classes so i can do like padding left is four padding right four padding top two padding bottom of two so make sure all these line up kind of running out of energy so i might wrap this up pretty pretty soon so hopefully if i save this it should be a styled panel with register and then we have our email account and we have our password here and then we have a register button in the button we can actually change from button to i think v button so if i were to do v btn give it a class of cyan should change this to a register button so that's i think good enough for right now we can come back and make this a lot nicer looking but i'm kind of running out of energy so stay tuned for part three and again as a recap we included the beautify project which again you can find the docs here on beautifyjas.com they have a bunch of different components and styles that are prebaked it's really awesome library so check it out and then we use beautify the kind of style this register panel i think part three we can just try to fix the styling and do more by adding like a header or side nav or something like that all right thanks for watching and stay tuned for part three it should be coming in a couple of days hopefully thanks for watching
