With timestamps:

00:00 - redis is an in-memory data structure
00:02 - store
00:03 - used as a database
00:05 - cache and message broker following in
00:07 - the footsteps of other nosql databases
00:10 - such as cassandra couchdb and mongodb
00:13 - redis allows the user to store vast
00:15 - amount of data without the limits of
00:17 - relational database
00:18 - it supports various data structures such
00:20 - as string hashes sets list
00:23 - sorted sets bitmaps hyperlog logs and
00:27 - geospatial indexes
00:29 - if we talk about the architecture there
00:31 - are two main processes in redis
00:33 - architecture
00:34 - one is redis client and the other is
00:36 - redis server
00:37 - this client and servers can be on the
00:40 - same computer or to different computers
00:42 - redis can also be configured as a master
00:44 - slave configuration for the distributed
00:46 - systems
00:47 - talking about the advantages of redis
00:50 - speed is the most important part of the
00:52 - radius redis stores the whole data set
00:54 - in primary memory that's why it is
00:57 - extremely fast it loads up to 110 000
01:00 - writes per second and 81 000 reads per
01:02 - second can be retrieved it supports
01:05 - pipelining of commands and getting and
01:07 - setting multiple values in a single
01:08 - command to speed up communications with
01:11 - the client libraries talking about the
01:13 - persistence redis shows all the data in
01:16 - memory changes are asynchronously saved
01:18 - on a disk using flexible policies based
01:20 - on elapsed time and number of updates
01:23 - since last save redis supports rich data
01:26 - type it supports natively most of the
01:28 - data types that developers already know
01:31 - such as list sets sorted sets and hashes
01:34 - this makes it easy to solve a variety of
01:36 - problems as we know which problems can
01:39 - be handled better by which data type all
01:41 - the radius operations are atomic which
01:43 - ensures that if two clients concurrently
01:45 - accesses the radius server will receive
01:47 - the updated value the competitive
01:50 - advantages of redis is that it provides
01:52 - multi-utility tools that can be used in
01:55 - a number of use cases such as caching
01:57 - messaging queues any short-lived data in
02:00 - your application such as web application
02:02 - sessions web page hit counts etc i bet
02:05 - this is enough to get you excited and
02:07 - start with reddish on your next project
02:09 - now enough jibber jabber let's get our
02:11 - hands dirty while exploring radish
02:15 - to install radisson system
02:17 - go to reddish.io
02:19 - download
02:20 - once you go there you can find the
02:22 - download information over here you can
02:24 - download this stable version you can
02:26 - download the docker file as well so that
02:28 - you can run your radius on your docker
02:30 - you can find the other versions as well
02:32 - okay you can download the
02:34 - zip file and you can unzip and you can
02:35 - start your ready server and the other
02:38 - way is you can download from your
02:39 - package manager also so uh let's go and
02:42 - download redis from the ubuntu package
02:45 - manager so let's go to ubuntu so in your
02:48 - ubuntu so run this command to
02:51 - update your system first
02:52 - sudo
02:53 - apt
02:55 - update
02:57 - enter your password
03:03 - and within no time your system will be
03:05 - updated
03:07 - okay now run
03:10 - sudo apt
03:13 - install
03:15 - redis server
03:18 - okay in my machine you can see that the
03:20 - radius is already installed so it's
03:22 - saying the latest version is installed
03:24 - if your system doesn't contain radius
03:26 - then the new then the new ready server
03:28 - will be installed in your system
03:30 - okay once the reddish is installed you
03:32 - can start the radish server
03:34 - by
03:35 - redis hyphen server command
03:39 - okay
03:40 - you can see that
03:42 - my ready server is started so this way
03:44 - you can install and start your address
03:46 - in your system
03:50 - in this tutorial we will see how we can
03:53 - use redis cli and check the first data
03:55 - type that is strings so let's first
03:57 - start the redis server in a background
03:59 - process and open redis cli and use some
04:02 - string commands so let's start ready
04:04 - server in background
04:07 - okay
04:08 - so my ready server is started
04:10 - okay you can see
04:12 - from here
04:18 - you can see that my ready server is
04:20 - started
04:21 - okay now let's open that is cli for
04:24 - opening that is cli we'll just write
04:27 - is cli
04:29 - okay and hit enter you can see that once
04:31 - you hit enter you can see that your
04:33 - redis server information has been shown
04:34 - here so this is running on your local
04:36 - host and the port number is 6379 which
04:39 - is the default port for radis okay now
04:41 - here you can write all your radius
04:43 - commands
04:45 - so now let's start with strings quite
04:48 - any strings in red is what we can do is
04:50 - we'll just write set
04:52 - string name
04:55 - and the name
04:58 - so you already know that red is runs on
05:00 - a key value pair okay so what we gave
05:02 - here is name as a key and value as a
05:04 - shabir and we are setting a string so
05:06 - you can see that we returned okay so
05:08 - that means my chubby value is set into
05:11 - my key name
05:12 - okay if you want to see that what we can
05:15 - do is get and the key
05:17 - which we need to pass so we'll pass name
05:20 - you can see that my value
05:22 - is shown here okay let's add one more
05:25 - variable
05:26 - set email as
05:29 - email at domain.com
05:32 - okay here the value is set
05:34 - you can check that value as well give
05:37 - get email
05:38 - okay now if you want the particular data
05:41 - from this string okay how we can get is
05:43 - you can from get range
05:46 - and
05:47 - the key you need to pass that is email
05:50 - i want the first five characters okay so
05:53 - i will pass zero to four
05:55 - so you can see that i'm getting the
05:57 - first five characters so this way you
05:59 - can get all the characters different
06:01 - characters from the
06:03 - strings now we are just studying these
06:04 - single single strings if you want to set
06:07 - multiple strings how we can set this
06:09 - using m set command using multiple set
06:12 - we need to provide the key value pairs
06:15 - so just we'll provide here
06:17 - lying as english this is one key value
06:19 - pair the other value pair we can say
06:21 - technology
06:24 - technology has redis
06:26 - so you can see two key value pairs we
06:28 - are setting over here
06:29 - okay
06:31 - the same way we can get multiple keys
06:34 - with m get command
06:36 - we can pass multiple keys over here we
06:38 - can pass line and we can pass
06:41 - technology
06:42 - so you can see we got
06:44 - both the values if you want to get the
06:46 - length of the string with htr line
06:48 - command we can get the length of the
06:50 - string as well let's get the length of a
06:52 - length key you can see that it's a seven
06:54 - character
06:55 - length
06:56 - you can check for
06:59 - technology as well okay so this way you
07:02 - can check the length of the strings as
07:04 - well
07:06 - if you want to rename any of the keys
07:08 - okay then
07:10 - just set the values again for that
07:12 - particular key
07:13 - set key for the name
07:15 - and i'm changing my name from shabby to
07:19 - daily code buffer okay
07:23 - you can see that the value has been
07:24 - changed and if i get that value
07:26 - the sharpie is changed to daily code
07:27 - buffer so htr line will give this zero
07:31 - as the length of a key when the key is
07:33 - not present so if we
07:35 - see abc abc the key is not present right
07:38 - so at that time it will return zero
07:40 - okay we can also store the integers as
07:42 - well so let's store
07:45 - set
07:46 - count as one
07:48 - okay so we'll get that integer when we
07:50 - do get count
07:52 - okay now we can increment and decrement
07:55 - these values as well with the incr
07:57 - command
07:58 - incr and the key we need to pass that is
08:00 - count so current my value is 1 right
08:03 - when i do i ncr it will change to 2
08:06 - so incr will always increment by 1 but
08:10 - if you want to increment a particular
08:12 - key by any of the particular amount so
08:15 - for that you can use
08:17 - incr by command
08:20 - increment by and that you need to
08:23 - give the key and by how much value you
08:25 - need to increase so suppose i want to
08:27 - increase by 10 so you can see that
08:30 - my value is changed to 12.
08:32 - the same way you can use decr command
08:35 - decrement so decrement the key
08:37 - sorry decrement the count right so
08:39 - decrement the count will change the
08:40 - value from 12 to 11 and the same way you
08:43 - can use decr by
08:46 - to
08:47 - pass the particular
08:49 - values to decrement the values suppose i
08:51 - want to decrement by 5 so you can see
08:53 - that the values has been decremented we
08:55 - can also store the float type values so
08:58 - suppose
09:00 - let's store
09:01 - set pi as
09:03 - three point fourteen okay so float type
09:05 - values also we can store you can see
09:06 - it's been stored let's first clear out
09:08 - all everything okay
09:10 - let's do get pi again so you can see
09:13 - that 3.14 has been set to my pi way so
09:16 - if you want to increment the values of a
09:19 - float type okay so for that we need to
09:21 - do incr
09:23 - by
09:24 - float
09:25 - okay increment by float and then you
09:28 - need to pass the key that is my pi and
09:30 - how much i need to increase suppose i
09:31 - want to increase by 0.001
09:35 - okay you can see that my new value is
09:37 - 3.4 double zero
09:39 - and multiple characters that way
09:42 - so
09:44 - this way i can
09:45 - increment now suppose i have some values
09:47 - and i want to expire those values i want
09:50 - to delete those values after some time
09:52 - okay so for that we can expire those
09:54 - values okay suppose i have one value a
09:58 - which is set to one
10:00 - okay you can see that my value is one
10:02 - now i want to expire this value
10:04 - after
10:06 - expire a i want this values to be
10:08 - deleted after 10 seconds okay so my
10:11 - command would be expire 8 10 so after 10
10:14 - seconds this value will be
10:15 - deleted we can check this by ttl here
10:19 - you can see that four second is
10:20 - remaining
10:21 - two second is remaining
10:24 - minus two seconds that means this value
10:26 - is expired
10:28 - okay you can check the value again with
10:30 - get a you can see the value is not there
10:33 - by default the value will be minus 1
10:35 - when the expiration is not set we can
10:38 - set the expiration while setting the
10:40 - variable
10:41 - only so for that we'll do set x
10:45 - and we will provide any key and will
10:47 - provide how much seconds i want to keep
10:50 - that value and
10:52 - the value
10:55 - okay so that means my b key would be
10:58 - expired after 10 seconds till then i
11:00 - will be having that value
11:02 - okay till that if i do
11:05 - b i have that value okay
11:07 - if i check
11:08 - what is the timing
11:10 - okay it's been expired if i do again get
11:12 - b that value won't be there
11:15 - so that's it in this string in redis in
11:17 - the next tutorial we will see list and
11:19 - radius
11:23 - in this tutorial we'll be going through
11:25 - list data type
11:26 - so in the last tutorial we created many
11:28 - of the keys over there so to list down
11:30 - all the keys we can use keys command and
11:33 - we can give the patterns
11:35 - okay you can give the wildcard
11:36 - characters or any of the particular so i
11:39 - want to get all the keys which i have
11:41 - already added so with this keys star
11:43 - command
11:44 - you can get all the keys so these are
11:46 - all the keys which we added earlier okay
11:49 - now to remove all the data
11:51 - what we can use is we can do
11:54 - flush all command so this will delete
11:56 - all the
11:57 - key value pairs from our radius okay now
12:00 - if you see keys
12:03 - star you can see that i don't have any
12:06 - data now
12:07 - okay now let's add some list
12:10 - now to add any of the list variables the
12:13 - command is l push
12:15 - and the key value
12:18 - so i'm putting my data into my country
12:21 - key so country is the key and value
12:25 - okay
12:26 - you can see
12:27 - that i have pushed you can push one more
12:30 - data
12:33 - country as usa
12:34 - okay now to get all this data which we
12:37 - have already entered we can use l range
12:40 - and the key and start and stop
12:43 - so this start and stop is the value
12:45 - which we need to define to get the data
12:48 - from the list so my start would be 0 and
12:51 - my end would be
12:52 - minus one
12:54 - to get all the data
12:55 - you can see
12:57 - i can get usan india let's add one more
12:59 - okay
13:03 - i'll push
13:06 - uk okay
13:08 - now
13:11 - now you can see that with l range
13:12 - country zero minus one we are getting
13:14 - all the data then i'm get adding l range
13:16 - country zero to one so that means i will
13:18 - only get my zeroth element and the first
13:20 - element that should be uk and usf
13:23 - okay so this way we can define the
13:25 - range to get the data from our list
13:28 - so if we
13:29 - so we saw l push that is pushing from
13:32 - the left side that means from the top
13:33 - side
13:34 - of our list so all the values you can
13:36 - see we are adding at the top of the list
13:38 - if we want to add the values at the
13:40 - bottom of the list then we can use r
13:42 - push
13:43 - so with the r push command
13:45 - and now my country as a key
13:47 - if i put my new
13:52 - value then it will be pushed at the
13:54 - bottom so currently you can see my
13:56 - values are uk usa in india so australia
13:59 - would be added at the bottom of india
14:03 - okay so if i again check my
14:07 - countries you can see that australia has
14:08 - been added at the bottom
14:10 - okay so this way we can use i'll push
14:12 - and r push to add the data do a list so
14:15 - currently you can see we have four
14:16 - elements in our list okay you can use
14:19 - ln length of the list command
14:23 - to get the length of our
14:25 - list that is ln and the key name
14:29 - the key name is not present it will
14:31 - return zero now if we want to remove the
14:34 - data from our list
14:36 - the same way we have l push and
14:38 - r push the same concept we have for r
14:41 - pop and l pop with lpop the data will be
14:44 - removed from the top and with the rpop
14:46 - data will be removed from the bottom
14:49 - so the command would be lpop
14:51 - and key that is my country so you can
14:54 - see that
14:55 - with lpop command my uk would be removed
14:59 - okay you can see that uk has been
15:00 - removed with ipo command australia will
15:03 - be removed now if you check our list
15:05 - again you can see that we have only two
15:07 - entries available so this we can use
15:10 - lpop and our pop command to remove data
15:12 - from our list okay let's add one data
15:14 - okay
15:16 - i'll push
15:20 - country
15:23 - france
15:24 - okay
15:27 - let's clear this out sorry
15:30 - and
15:31 - do a range of country
15:33 - with zero to minus one so we have
15:36 - france usa and india now suppose you
15:39 - want to change any of the value
15:41 - okay you want to change france to any of
15:43 - the country so with the lsat command
15:46 - in my key as country
15:49 - and you need to provide the index which
15:51 - index you need to change
15:53 - okay it starts from zero so either zero
15:55 - one or two we have suppose we provide
15:57 - zero as france we need to change
16:00 - let's change it to germany
16:02 - okay you can see that reference has been
16:05 - changed to germany with the lsat command
16:06 - now you need to insert data at any
16:08 - particular position okay suppose you
16:10 - want to insert data between germany and
16:12 - usa or usa and india or you need to
16:15 - insert data before germany or after
16:17 - india anywhere so for that for that the
16:20 - command is l insert and you need to
16:22 - provide the key
16:24 - and you need to provide the command that
16:27 - is before or after what you want to do
16:29 - suppose i need to do before
16:32 - okay i need to add before what before
16:37 - germany
16:39 - okay i want to add before your money and
16:41 - what should be the value suppose
16:46 - new zealand
16:47 - okay
16:49 - so you can see that i can add
16:52 - new zealand at the top suppose i want to
16:54 - add
17:02 - after usa
17:05 - okay so for that i'll insert country
17:08 - after
17:09 - usa i want to add any country suppose ui
17:14 - okay so that will be inserted
17:16 - after usa so this way you can use ali
17:19 - insert command to enter any of the
17:21 - details at any position in our list
17:24 - now you want to
17:26 - find the values based on the index from
17:28 - our list okay so for that the command is
17:31 - l index
17:33 - and the key we need to pass is our
17:35 - country and what is the value at any of
17:37 - the particular index suppose what is the
17:39 - value at 3
17:40 - you can see that at the 3 my value is
17:42 - uae
17:44 - check with any of the value so this way
17:46 - a linux command can be used to get any
17:47 - of the value from the index
17:50 - now we saw in the starting right we use
17:52 - l push command
17:54 - and we added country
17:56 - and we added value
17:58 - okay at the time what it happened is it
18:00 - created a list and added the value to it
18:03 - okay but
18:04 - what i want to do is i want to check if
18:07 - that list exists then only add the value
18:10 - into my list otherwise won't add so for
18:13 - that my command would be help push x
18:16 - then my key
18:17 - suppose
18:19 - i'm adding data to movies currently i
18:22 - don't have any movies list okay so i'm
18:24 - using l push x movies too
18:26 - and adding any values
18:29 - okay so it will return an
18:32 - 0 okay because it was not added to the
18:34 - list but if we use l push x
18:39 - for my
18:40 - current list which is available and if i
18:43 - add any new
18:44 - country
18:46 - okay
18:47 - so at the time it will return the length
18:49 - of the string so you can see that
18:52 - without range
18:54 - country right
18:56 - so you can see that south africa has
18:57 - been added the same way we have
19:00 - our push x command as well
19:03 - the same way as l push x
19:06 - if you define any of the things
19:12 - okay it will return zero because
19:14 - the movie's list is not available yet
19:16 - you can check with
19:19 - l range command right
19:22 - i'll range move is
19:24 - zero to minus one you can see that my
19:27 - list
19:27 - is empty or doesn't exist
19:29 - okay so this way we can use l push x and
19:32 - r push x command to insert data into a
19:35 - list when list is available so you can
19:37 - see that we have data right in l range
19:39 - for country
19:42 - i'll range for country
19:44 - 0-1
19:46 - so if you want to sort this data okay so
19:49 - to sort this data we have a sort command
19:52 - okay we need to provide the key and we
19:55 - need to provide the pattern and limits
19:57 - and all the many informations available
19:59 - okay
20:00 - here my list is of type string okay so
20:02 - for that i need to provide alpha as a
20:05 - command
20:06 - to sort the data of my list so you can
20:09 - see that
20:10 - my data has been sorted
20:12 - okay
20:13 - now if you want to sort based on
20:14 - descending order
20:16 - you can sort that as well
20:19 - so sorting of the list can be done that
20:21 - way so if you have a list of numbers
20:23 - okay that is of integer of any other
20:24 - type you don't have to provide alpha as
20:26 - a command while sorting the data now the
20:29 - other command we have is bl pop and vr
20:33 - paw so what bl pop will do is it will
20:35 - block the execution till it has any
20:38 - value to remove okay if there is any
20:40 - value in the list then it will remove in
20:42 - the particular time frame otherwise it
20:44 - will wait till the timeout is been done
20:46 - to remove any element okay
20:49 - so for that what we can do is let's open
20:51 - one more terminal
20:53 - okay
20:55 - let's set bl pop over here in bl pop
20:58 - let's add let's specify any of the key
21:01 - suppose i'm passing out
21:04 - movies
21:05 - you know that movies there is no data in
21:07 - movies okay so i'm passing
21:09 - one time or second
21:11 - so it will wait for one second and
21:12 - saying
21:13 - data is nailed that means it was not
21:15 - able to delete any of the data
21:18 - okay
21:19 - now if i add
21:22 - movies for 10 seconds let's say 15
21:25 - seconds so let's give bl pop movies 50
21:28 - okay we are passing 15 seconds over here
21:30 - and let's add
21:32 - i'll push
21:34 - movies abc
21:38 - okay bx
21:39 - you can see that
21:41 - it removed movies abx okay so this way
21:44 - the rpop is also available for the
21:47 - blocking of removing the data from the
21:49 - list so either of blpop or br pop can be
21:52 - used according to the requirement so
21:54 - these are all the commands that you can
21:56 - use for the list in redis in the next
21:59 - tutorial we will see how we can use sets
22:02 - in redis
22:05 - in the last tutorial we saw list in
22:07 - readys in this tutorial we will be
22:09 - looking into sets data type okay to
22:12 - create any sets we'll use set command
22:16 - okay and we'll pass key
22:21 - and the members for the sets
22:23 - suppose we have java okay you can see
22:26 - one member is added
22:27 - we can add multiple members
22:34 - we can add
22:35 - radish we can add multiple members
22:38 - node.js
22:41 - aws
22:42 - okay they say we can add multiple
22:44 - members as well
22:45 - to list out all the members
22:47 - we have s
22:49 - members command and we need to pass
22:52 - key so you can see that it will list all
22:55 - the members available inside the
22:57 - technology set the main advantage of set
23:00 - is if you know from other technologies
23:02 - or other languages as well sets will
23:04 - store all the unique values if you are
23:06 - trying to add the values which is
23:08 - already been there in the key then it
23:10 - won't affect that suppose
23:13 - if you are trying to add
23:17 - java again then
23:19 - there won't be a duplication for that it
23:21 - will be always the single you can see
23:22 - it's returning zero so it's been not
23:24 - added to the set
23:26 - so that's the advantage how it will work
23:28 - so all the values will be unique
23:30 - irrespective we saw in list there may be
23:32 - duplicates as well to get the count of
23:34 - members available inside your sets you
23:36 - can use s card command and you need to
23:38 - pass the key
23:40 - okay you can see that it will return
23:42 - four you have four members available
23:44 - inside your technology set now to check
23:46 - if any of the member is available inside
23:48 - your set or not for that you need
23:50 - command sys member
23:52 - s is member or not
23:55 - ss member then you need to pass key
23:58 - that is technology and you need to pass
24:00 - the member which member you are trying
24:01 - to search suppose java
24:04 - so it is returning one that means the
24:06 - number is available
24:07 - if you try anything else like spring
24:09 - then it will
24:11 - return 0 because it is not available
24:13 - inside your set currently we have
24:15 - node.js aws radius and java inside my
24:18 - technology set let's create one more set
24:23 - front end okay for front-end
24:24 - technologies and let's add some of the
24:26 - members i'll add javascript
24:30 - html
24:31 - third node
24:33 - yes
24:35 - maybe react okay so these are the
24:37 - members that i'm adding in my
24:39 - front end list you can see by as members
24:43 - i need to provide front end
24:46 - you can see that these are the variables
24:47 - available into my front end so currently
24:50 - we have two sets that is one for
24:52 - technology and one is front end to find
24:54 - the difference between those two sets we
24:57 - have sdif command
24:59 - and we need to pass the key
25:04 - technology and here the key is front end
25:07 - so this will return the
25:09 - differences
25:10 - available within the two keys so if you
25:12 - can see that with s diff command it will
25:14 - check from the first key to the other
25:16 - key so it will check what is the
25:18 - difference okay so node.js it will check
25:20 - nodejs is available inside my front end
25:22 - okay it's available so
25:24 - it will be neglected other things it
25:26 - will check aws is not available
25:28 - redis is not available java also not
25:30 - available so these are the differences
25:32 - that is not matching to my second key
25:34 - that is front end so these are the list
25:36 - which will be printed out now if i want
25:38 - to store this data inside any of the set
25:41 - for that what i can do is s
25:44 - diff
25:45 - store command then i need to give
25:47 - destination suppose
25:49 - new set
25:51 - okay then i need to pass
25:53 - the key
25:55 - technology
25:56 - and
25:58 - front-end
25:59 - so what i'm doing is i want to store the
26:01 - difference from technology and front-end
26:04 - which is this which we got right that is
26:05 - java and aws to be stored inside my new
26:08 - set key
26:09 - okay previously we just displayed it
26:11 - this we can do to store the data okay
26:15 - the three elements has been stored
26:16 - inside my new set if you do s members
26:20 - for
26:21 - new set you can see that three values
26:23 - are available
26:24 - the same way we can check for the
26:26 - intersection elements as well
26:28 - so press enter
26:30 - and you need to provide
26:31 - key one and key two or many keys which
26:34 - is available so if you can see i have
26:36 - a enter
26:38 - technology i am passing and i am passing
26:41 - front end
26:43 - okay so you can see that the
26:44 - intersection element from both the list
26:46 - we have node.js so node.js is the common
26:48 - element for both the sets so it's been
26:51 - giving that well we can provide multiple
26:53 - keys as well so if i provide technology
26:55 - over here
26:58 - front end over here and we have a new
27:00 - set as well right so we'll provide new
27:01 - set
27:04 - okay so this will return the data which
27:07 - is been common to all so you can see
27:09 - that there is no common data which is
27:11 - available in all the list so it is
27:13 - returning empty list now the same way
27:16 - which we store difference data right as
27:18 - diff store the same way we have as
27:20 - interstore
27:22 - to store the
27:24 - differences of the data into a new list
27:26 - so
27:28 - new enter
27:30 - is my destination and my key is
27:32 - technology
27:34 - and
27:36 - front end is my t2
27:38 - so you can see that the data has been
27:40 - stored into a new list sorry new set
27:44 - s members
27:46 - new enter we can see that node.js has
27:49 - been added to it let's clear it out
27:53 - now let's
27:54 - list out all the members again right yes
27:56 - as members
27:58 - technology
28:00 - and yes
28:02 - members
28:04 - front end
28:05 - now we saw the difference of the list
28:07 - intersection of the list and the union
28:09 - of the list we will see so
28:11 - s union is the command to
28:14 - get the union of the two or multiple
28:17 - lists okay sorry multiple sets so for
28:20 - that we are providing
28:21 - as union and we need to provide key so
28:24 - that is technology
28:25 - and we are providing front end
28:28 - okay you can see that we are getting the
28:30 - data which has been union so all the
28:32 - data has been added we can provide
28:34 - multiple keys as well we have technology
28:36 - we have front end
28:38 - we have
28:39 - new set
28:40 - we have new
28:42 - intel okay so all will be merged up
28:46 - together and the union will be displayed
28:48 - to store all the union data we have as
28:52 - union store
28:55 - and we can store in
28:57 - union
28:59 - new destination
29:01 - let new union and we can provide
29:03 - multiple keys let's add all these keys
29:06 - right
29:08 - and the new union seven elements has
29:09 - been added to new union set we can see
29:12 - all the members
29:16 - oh yeah so this way we can do multiple
29:18 - operations on set we did difference
29:21 - operations we did union intersections we
29:24 - added the elements we removed the
29:25 - elements and multiple things okay so
29:28 - that's been it it sets the next tutorial
29:30 - we will see sorted sets
29:35 - so in the last tutorial we saw sets in
29:37 - freddy's in this tutorial we are going
29:39 - to see what is sorted sets
29:42 - sorted sets are very similar to sets
29:44 - but with extra functionality which has
29:47 - been sorted form sorted sets sorts
29:49 - itself with an extra value which is the
29:51 - score so when we add any of the values
29:53 - to sorted sets we will define this score
29:56 - for that particular value so based on
29:58 - the scores available the sets will be
30:00 - sorted from minimum to maximum value of
30:03 - the scores which we provide so let's add
30:05 - some of the values to the sorted sets in
30:08 - sets we were using set command to add
30:11 - the value here for the sorted sets we'll
30:13 - be using z command z a
30:16 - double d
30:18 - we'll start ready cli
30:19 - okay and then we'll add
30:22 - z
30:23 - and key will provide
30:25 - users and we'll provide this score which
30:28 - is one and we will provide the value
30:31 - cover
30:32 - so you can see that the value has been
30:34 - added we can add more values with
30:36 - pipings as well like
30:39 - z
30:40 - the users will be key and we need to
30:42 - provide the score and the value for it
30:44 - x4 2
30:47 - lx
30:48 - 3
30:51 - nema four steve
30:55 - phi is nick
30:56 - so all these values would be added based
30:58 - on these scores which we provide and the
31:00 - values will be sorted
31:02 - accordingly we can see all the data with
31:04 - the command z range and then we need to
31:05 - provide the key which is users
31:08 - and then
31:09 - we need to provide the start and stop
31:11 - that means the minimum and maximum value
31:13 - so 0 to minus 1 which we will provide so
31:16 - you can see that all the values are
31:18 - being stored and sorted based on the
31:21 - scores which we have provided
31:23 - okay if you want to see the scores as
31:24 - well then we need to pass this with
31:26 - scores
31:28 - command as well so you can see that this
31:29 - course has been added to get the count
31:31 - of the users available or the
31:32 - cardinality of the
31:34 - values available we can use z card
31:36 - command
31:38 - and we need to pass the keys
31:40 - okay
31:41 - you can see that there are five
31:42 - variables available inside my
31:45 - users we can use the z count command as
31:47 - well
31:48 - okay to get the count based on the rank
31:51 - available so we need to add z count the
31:54 - keys
31:55 - which is my users and we need to pass
31:58 - the rank which is the minimum and
31:59 - maximum rank to get all the data we can
32:02 - pass minus infinity to plus infinity
32:04 - okay
32:06 - minus n2 plus inf so it will get all the
32:08 - data based on the negative infinity to
32:10 - positive infinity
32:12 - okay so you can see we have count as 5
32:15 - now if we need to provide any particular
32:17 - values okay suppose i need to get all
32:19 - the users with rank 0 2
32:22 - 4
32:24 - so you can see that we got 4 one element
32:26 - is been missed out because we've
32:28 - provided the maximum rank s4 we can
32:31 - remove the elements with the command z
32:34 - ram remove we need to pass the key which
32:36 - is user and we need to pass the members
32:39 - which member i need to remove suppose i
32:41 - need to remove alex i'll pass the alex
32:43 - and the alex will be removed
32:45 - if you say again
32:50 - you can see that we have shabbir nema
32:52 - steve and i miss baldinik okay that's
32:55 - fine so these are my users available we
32:57 - use g
32:58 - range
33:00 - users to get all our range right get all
33:02 - the data but if you want to reverse it
33:05 - we can use
33:06 - z
33:07 - reverse range
33:09 - then keys
33:11 - and we can give start and stop and with
33:13 - scores if you want
33:16 - with scores
33:17 - so this will reverse the list you can
33:19 - see that shabbir nima steve nick it is
33:22 - reversed to next you neema and shabir so
33:25 - this way we can reverse the range as
33:27 - well to view it out based on the ranks
33:29 - we can get the individual score also
33:31 - that has been assigned to any of the
33:33 - values suppose i want to get the score
33:36 - of shabir okay so i can do z score
33:40 - then my key as users
33:42 - and i end a member number is sharper
33:46 - so you can see that i'll get the
33:48 - score of it
33:50 - you can pass any of the variables let's
33:52 - get for steve
33:54 - so this way we can find the scores
33:56 - assigned to any of the values so when we
33:59 - did z reverse range okay so at the time
34:02 - the reverse happened based on the rank
34:04 - of all the particular values but if i
34:07 - want to reverse based on the scores
34:08 - which i provided so for that the command
34:11 - is z
34:12 - reverse range by score okay we need to
34:16 - provide users and we need to provide max
34:18 - and min max five
34:19 - minus zero
34:21 - i need with scores
34:23 - okay cool right so this will reverse my
34:26 - set based on the scores which we
34:27 - provided so from nick i should get
34:30 - shabby you can see that right it's been
34:31 - reversed now if i want to increment any
34:35 - of the scores of any of the values
34:38 - okay so how we can do
34:40 - suppose i want to increase the score of
34:42 - steve okay so for that the command is
34:45 - z increment by z i n c are by e we need
34:49 - to provide that is users
34:51 - i need to increment by two what is the
34:53 - member steve so i am incrementing
34:56 - four to six score of steel
35:00 - okay so you can see that the value is
35:02 - six now
35:04 - so you can see that if i am uh executing
35:06 - the same command which i executed
35:08 - earlier right for five to zero okay so
35:10 - at that time steve is not coming
35:15 - if i do six to zero then nick will be
35:17 - coming so this is again do the commands
35:18 - is done score now suppose if i want to
35:21 - remove the values based on the scores
35:23 - okay like minimum maximum value like i
35:26 - want to remove nick and steve based on
35:27 - the scores okay like if i have a
35:30 - long range a long list the command is z
35:32 - remove z ram
35:34 - range
35:36 - by
35:37 - score
35:38 - okay z remove range by score the key is
35:40 - users
35:42 - and the minimum value the minimum value
35:44 - should be five maximum value should be
35:45 - six so my five and six will be removed
35:49 - okay if i do z range
35:52 - users again with zero minus one you can
35:54 - see that stevenic has been removed i
35:56 - have two values available now if i want
35:59 - to remove based on rank okay let's add
36:01 - some more data see add users
36:04 - 5
36:06 - 6 mr
36:09 - 7
36:10 - early okay
36:15 - z range users
36:18 - 0 to -1 okay these are the scores as
36:21 - well now i want to remove based on the
36:24 - rank so z remove range by
36:27 - rank okay the key would be users and
36:30 - starting in stopping rank my rank
36:32 - starting should be zero
36:34 - i should remove till two
36:36 - zero one and two
36:38 - okay so three values has been removed
36:42 - you can see that we have two values left
36:43 - mri and only so this way we can do
36:45 - different operations on sorted sets
36:50 - in the last tutorial we saw sorted sets
36:52 - now in this tutorial we are going to see
36:54 - what is hyper log log data structure a
36:56 - hyperlog log is a probabilistic data
36:58 - structure used to count unique values
37:01 - these values can be anything for example
37:03 - ip addresses
37:04 - for the visitors of a website search
37:06 - terms or email addresses are the unique
37:10 - count of locations and many things so
37:12 - let's add some data to hyperlog log and
37:15 - we can count and merge the data
37:17 - available inside different hyperlogs now
37:20 - to add the data in the hyperlog log the
37:22 - command is pf add
37:24 - and the key i'm providing hsl
37:28 - and the element suppose i'm adding any
37:30 - value a
37:32 - okay so this way the value is added we
37:34 - can add piping as well we can add
37:36 - multiple values like pfed
37:39 - a
37:40 - already there right b c d e
37:44 - multiple values we can add
37:46 - now what are the values available inside
37:49 - my hl so we can get with pf count
37:53 - and the key
37:55 - you can see that the seven values are
37:56 - available
37:58 - in my hsl
37:59 - let's create one more okay pf head
38:04 - hll2
38:05 - and let's add numbers in it
38:08 - one two three four five six seven
38:14 - okay we can get the count of that as
38:16 - well pf
38:19 - count hll2
38:22 - okay this happened
38:23 - now we can get the total count of all
38:26 - the available hyperlogs as well
38:28 - so we can do pf count
38:31 - for hll and hrl2
38:34 - this will provide the total count for my
38:37 - both the hyperlog logs
38:39 - we can also merge this
38:41 - two or if we have multiple many of them
38:44 - then we can merge them as well too
38:46 - into a new one so pf merge is the
38:49 - command and we need to provide the
38:50 - destination
38:52 - will provide
38:55 - merged hll
38:57 - and we need to merge based on the
39:00 - available which is hll and hll2
39:04 - so this way both the data has been
39:06 - merged to merge hll you can see merged
39:08 - hli
39:10 - sorry we need to do pf count
39:17 - okay so this is you can see the count of
39:19 - the new one so this way we can use
39:22 - hyperlog logs for counting the sets for
39:25 - the
39:26 - different use case scenario as we saw
39:28 - earlier
39:32 - so in this tutorial we are going to see
39:34 - hashes and radish so hashes is a map of
39:37 - string keys and string values which is a
39:39 - perfect example to store our objects so
39:41 - let's create a hashes the command is
39:44 - edge set and we need to pass the key we
39:46 - are passing my hash and the field name
39:48 - we need to provide field name and
39:50 - providing name
39:51 - and the value as sugar
39:54 - okay you can see that it returned once
39:56 - so data is added let's add one more
39:58 - values let's set
40:00 - my hash
40:03 - email
40:04 - as
40:05 - email domain.com
40:08 - so i've added name in mail into my
40:11 - my hash
40:12 - okay now to get all the keys and values
40:14 - from the hash the command is
40:16 - h keys
40:18 - and
40:19 - key which is my hash
40:21 - okay then it will return all the keys
40:23 - available we have name and email
40:25 - available over here right which we added
40:27 - name and email so it will return all the
40:29 - keys available in my hash
40:31 - so to get all the values we can use h
40:34 - wells command and we will pass my key
40:36 - which is my hash so you'll get all the
40:38 - values which you have added okay so
40:42 - h keys will return all the keys and edge
40:43 - files will return all the values
40:45 - available in the hash as get all command
40:47 - will return all the keys and values
40:49 - available in my hash in radish so we saw
40:52 - three commands to get the values
40:54 - available
40:55 - in the hash as keys as well as an edge
40:57 - get off but we need to check for the
40:59 - particular values available so for that
41:01 - the command is h exists and we need to
41:04 - pass key which is my hash and the field
41:07 - the field is name or email which we have
41:09 - already so we will check with name
41:12 - so it will return 1 when the value is
41:14 - available it will return 0 when the
41:16 - value is not available see if i check
41:18 - with name one which is not there in my
41:20 - hash so it will return zero so this way
41:22 - we can check if the value is present in
41:24 - hash or not we can also check the length
41:26 - of the hash with hln command passing key
41:31 - which is my hash
41:33 - it will return the length so currently i
41:35 - have two elements in my hash so it is
41:37 - returning to suppose i'm adding one more
41:40 - my hash i'm passing age
41:43 - has 25
41:45 - and if i do h line again it will return
41:48 - three okay now here we can use
41:50 - pipelining as well we can add multiple
41:53 - key values inside my hashes so for that
41:56 - the command is hm set and we need to
41:59 - pass key which is my hash and we can
42:01 - pass key value pass okay
42:03 - suppose i'm passing country
42:06 - as india
42:09 - phone as
42:11 - phone number
42:13 - okay so this way the values will be
42:14 - added the same way we can use hm get
42:17 - command
42:18 - to get multiple values out of the hash
42:21 - the command is hm get we need to pass
42:24 - my hash as a key and we need to pass
42:26 - multiple fields
42:28 - i have name field i have email field and
42:31 - phone you can see that all the values
42:33 - have been written
42:34 - okay the phone is wrong right it should
42:36 - be capital
42:39 - okay so this we can use hm set and hm
42:42 - get to set and get the multiple fields
42:45 - from the hash now suppose i want to
42:47 - increment any of the values in my hash
42:49 - then we can use h incur by command h i n
42:54 - c r
42:55 - by command we need to pass the key which
42:57 - is my hash
42:59 - and the field i have age added to it
43:02 - right you can see i have added age so
43:04 - let's increase the age
43:06 - so i'll add age
43:07 - and increment by 2 so you can see that
43:10 - my age is 27 now okay so this way you
43:13 - can use edge incur by command to
43:15 - increase the values of the hash if you
43:18 - want to increase the values with the
43:19 - floating point data then also we can do
43:21 - with h incur by float command and we
43:24 - need to pass key which is my hash
43:26 - field which is age and increment the
43:29 - value like i'm adding 1.5 years
43:32 - okay so value is 28.5 so this way h
43:35 - incur by float command is used for
43:37 - floating point we can also remove the
43:38 - elements with h del key h del command
43:41 - and we need to pass the key which is my
43:43 - hash
43:44 - and we need to pass field suppose h
43:46 - let's remove the edge you can see it's
43:49 - returning 1 that means the edge is
43:50 - removed we can again check with h exist
43:52 - command with my hash
43:55 - and h
43:56 - it will return 0
43:58 - okay age has been removed from the hash
44:00 - we can use
44:02 - hstr line command to get the length of
44:04 - any of the values so hstr line we need
44:07 - to pass key which is my hash and we will
44:10 - pass the field suppose i need to check
44:13 - the length of the name okay so it is
44:16 - returning seven shabiri is of seven
44:18 - characters so this way we can use htr
44:20 - line for finding the length of the
44:22 - fields with h set nx command we make
44:25 - sure that we will only add the fields
44:27 - which is not available in my hash so it
44:30 - won't override the fields so for that
44:32 - reason we will use at saturnx command
44:34 - suppose h7x will pass my hash
44:38 - okay we will pass field suppose i'm
44:40 - adding name name is already there i'm
44:42 - just changing the name so this won't add
44:44 - to my hash it will return zero you can
44:46 - see that okay so it will always check if
44:49 - value is available or not if value is
44:52 - not available then only it will add
44:53 - let's add the new value suppose i'm
44:55 - adding last name
45:00 - okay so it will return one and it's been
45:02 - added to my hash so this way we can use
45:05 - h7x command so that's been it in this
45:07 - video in the next tutorial we will see
45:09 - that is transactions
45:13 - in this tutorial we are going to see
45:14 - redis transactions you have already seen
45:16 - that we are executing single single
45:18 - commands in ready cli to get the job
45:21 - done okay but what if we need to execute
45:24 - multiple commands what if we need to
45:26 - execute a bunch of commands in a single
45:28 - go in a single fly considering the
45:30 - advantage of is which is an atomicity
45:32 - all the transactions all the commands
45:34 - which we are executing should be atomic
45:36 - if any error is there then all the
45:38 - commands should not be executed so that
45:40 - can be achieved using status transaction
45:42 - to start a radius transaction you need
45:44 - to specify a multi command once you
45:46 - enter this command you are in a
45:48 - transaction mode so all the commands
45:50 - which you enter from now will be in the
45:52 - queued state and it won't execute until
45:54 - you specify a execute command okay let's
45:57 - check it out we started a transaction we
45:59 - are giving a bunch of commands like set
46:02 - name as shabir okay it's been queued
46:05 - then you can see get name
46:10 - that is also been queued
46:11 - we'll do set as1
46:16 - set bs2
46:18 - you can see all the commands are been
46:19 - queued now all this command will be
46:22 - executed in a single transaction when we
46:24 - specify execute command this exec once
46:28 - we fire this command all the commands
46:30 - will be executed you can see that all
46:32 - the commands have been executed so this
46:34 - way a transaction has been created and
46:36 - it's been executed within a single flow
46:38 - suppose you have created a transaction
46:40 - right you are adding some commands get a
46:44 - get c
46:45 - get b any different commands you have
46:47 - been executing okay by the mean time you
46:49 - want to discard the transaction you
46:51 - don't want to execute okay so for that
46:53 - the command is discard if you specify
46:56 - this card then all the transactions all
46:58 - the commands that you have been added to
46:59 - the transaction all will be nullified
47:02 - okay your transactions will be cancelled
47:03 - out so this way you can execute a
47:05 - transaction or a discarded transaction
47:07 - based on the requirements now there is a
47:09 - special command which is watch command
47:11 - if we watch any particular key right if
47:13 - we add a particular key in my watch and
47:15 - then we create a transaction then what
47:17 - will happen a transaction will be
47:19 - executed based on the conditions for
47:22 - that variable which has been added to
47:24 - the watch if there is no change in the
47:26 - key defined in the watch then only the
47:28 - transaction will be completed if there
47:29 - is any change in watch okay at that time
47:32 - the transaction will not be executed and
47:34 - it will return
47:35 - but the change in watch should not be
47:37 - within the current command line or
47:39 - current client if it is coming from a
47:41 - different client at that time only it
47:43 - will check if there is any change in a
47:45 - particular key from any other client if
47:47 - so then the execution will be blocked
47:50 - for the transaction so let's check that
47:51 - out okay let's flush all our data let's
47:55 - set as1
47:57 - let's open a new window new terminal
48:04 - okay now i'm adding a multi command
48:07 - okay i'm doing set bs to
48:11 - get b
48:13 - okay meanwhile i'm adding watch on a
48:18 - okay watch on he has been added and i'm
48:21 - doing execute command so you can see
48:23 - that i have added watch on a but i
48:25 - haven't changed that key a so for that
48:28 - my current transaction will be executed
48:30 - successfully you can see that i am
48:32 - getting the data
48:36 - in this tutorial we are going to see pub
48:38 - sub in redis so pops up means publisher
48:41 - subscriber model okay so we'll be having
48:43 - a different channels where any of the
48:45 - client can subscribe to it or any other
48:48 - client can publish the messages to it so
48:50 - let's subscribe to couple of channels
48:52 - and within one client we will publish
48:54 - the messages to those channels and we
48:57 - will see how the messages are been
48:59 - displayed so you can see i have three
49:00 - clients open over here for readys from
49:03 - two clients will be subscribing the
49:04 - messages and from one client will be
49:06 - publishing the messages okay so let's
49:09 - subscribe to one channel suppose i'm
49:11 - subscribing to
49:14 - the subscribe command and
49:16 - the name of the channel it's not
49:18 - necessary that channel has to be created
49:20 - before you can directly subscribe to it
49:22 - and later the channel will be created
49:24 - that's also fine so currently there is
49:26 - no channel created i'm just subscribing
49:29 - to news channel
49:30 - okay
49:31 - once you do you can see that it's been
49:33 - ready to read the messages and it will
49:35 - only exit when you do control c or quit
49:38 - the command line or the client let's
49:40 - also subscribe my other client
49:45 - to news as well
49:47 - sub
49:49 - subscribe to news okay so my both the
49:51 - clients has been subscribed to news and
49:53 - let's publish the messages to news now
49:56 - with publish command publish channel
49:58 - name which is news
50:00 - and we need to provide message the
50:02 - message should be any message that you
50:04 - need to do i'm providing
50:08 - new breaking news okay
50:11 - so you can see that it's showing two
50:13 - which is mean it's been sent to two
50:15 - subscribers okay you can see we are
50:17 - getting over here and over here both the
50:19 - places you're getting the data okay we
50:21 - can add multiple messages
50:25 - publish to news
50:28 - new news
50:30 - you can see that data is coming okay now
50:32 - let's change the middle client and
50:33 - change the subscription to multiple
50:35 - channels okay i'm just quitting and
50:38 - again opening ready cli
50:40 - okay
50:42 - and clearing out
50:49 - and i'm subscribing to
50:52 - news as well as
50:55 - broadcast channel
50:57 - so now it's been reading messages from
50:58 - the two channels now publish to
51:00 - broadcast as well
51:02 - publish
51:04 - news
51:05 - n1 okay you can see that it's coming to
51:07 - both
51:08 - if i do publish
51:12 - to broadcast
51:14 - new broadcast
51:17 - okay sorry i did typo right
51:20 - you can see that it's been coming here
51:22 - okay now let's change this first client
51:25 - and change to patent base subscription
51:27 - okay
51:29 - let's close it out again open ready cli
51:34 - okay let's clear it out
51:39 - okay now for pattern based subscription
51:41 - the command is p subscribe
51:45 - okay so here we can give different
51:48 - patterns for the different channels okay
51:50 - there may be multiple channels so to
51:52 - subscribe to those channels we can give
51:54 - patterns over here if the pattern is
51:55 - matching then it will subscribe to those
51:57 - channels and the messages will be read
51:59 - from those channels so for news right
52:01 - instead of news let's add news star okay
52:05 - so that means if there is any multiple
52:06 - news like news one news two news three
52:09 - news hello anything okay then all those
52:12 - channels will be subscribed okay with
52:15 - stars so star is a wildcard character
52:17 - and it can be specified as any of the
52:19 - character let's subscribe to one more
52:21 - which is
52:23 - hello okay suppose i just want to match
52:26 - for the single characters okay
52:28 - like
52:29 - this hello so if we are passing this way
52:32 - then it will be subscribed to hello
52:34 - hello that question mark can be replaced
52:36 - with any single characters over there
52:37 - okay we can also add few of the
52:40 - characters to it if the character is
52:41 - matching then like if i want to match
52:44 - ball and bill okay then i can add this
52:47 - way
52:48 - it should be matching with ball and bill
52:51 - okay so this way particular characters
52:53 - will be matched
52:54 - so this way we can subscribe to multiple
52:56 - channels
52:57 - with
52:58 - patterns you can see that i'm subscribed
53:00 - to this channel now let's
53:02 - add the messages i'm publishing the
53:04 - messages to news channel
53:07 - with hello
53:08 - so you can see that in both of the
53:10 - clients i'm able to receive the messages
53:13 - so new star is working this way now
53:15 - suppose i'm publishing the messages to
53:18 - hello channel
53:20 - with message hello okay you can see that
53:22 - we have added
53:24 - h question mark hello so if you enter
53:27 - this you can see that we are listening
53:29 - to that as well
53:31 - if i publish to h x
53:34 - double l low
53:35 - right
53:36 - so i'm just changing that character and
53:38 - i'm passing that message
53:42 - i'm able to receive the messages for
53:44 - that particular subscription let's check
53:46 - for bill and ball as well
53:50 - let's publish the messages to ball
53:55 - new ball
53:56 - you can see that i'm able to get furball
53:59 - the same way let's check for bill as
54:01 - well
54:07 - you can see that all is working if i add
54:10 - anything else
54:18 - you can see that is returning 0 so it's
54:20 - been not subscribed and no one has been
54:22 - receiving those messages for all
54:25 - so this way we can specify different
54:27 - patterns for the subscription of the
54:29 - channels
54:30 - now let's check some of the pub sub
54:32 - commands okay
54:34 - so pubsub command and the sub commands
54:36 - for channels okay
54:38 - now pub sub channels will return all the
54:41 - channels that have been subscribed which
54:43 - is not a pattern based subscription okay
54:46 - so if you can see that with pub sub
54:48 - channels command i'm getting broadcast
54:50 - and news that means those two channels
54:52 - have been subscribed the rest of the
54:54 - channels are being subscribed based on
54:56 - the patterns so that's why i'm not
54:58 - getting hello or bail or ball okay so
55:01 - pop sub command for channels you will
55:03 - get all the channels the next command is
55:05 - pub sub and
55:07 - num sub so this will define number of
55:10 - subscriptions for that particular
55:12 - channel so if i check for news okay
55:15 - so you can see that it's been returning
55:17 - one so only one client has been
55:20 - subscribed to news channel okay you can
55:22 - see that still my patent-based
55:24 - subscription is not coming over here
55:27 - okay so it will only fetch all the
55:29 - non-patent-based subscription for the
55:31 - channels so this is your pub sub
55:33 - channels command and pub sub num sub
55:35 - command we can also check number of
55:38 - pattern based subscription with
55:40 - pub sub
55:44 - numpad
55:45 - ok this will return all the pattern
55:47 - based subscription for the channels okay
55:50 - you can see that there are three pattern
55:52 - based channels that have been subscribed
55:54 - you can see that is new star h question
55:56 - mark double hello and bail or ball which
55:59 - has been subscribed so this way we can
56:01 - check all the different pop sub commands
56:03 - all the subscribers available within the
56:06 - different clients for my radish so
56:08 - that's been it in this tutorial in the
56:10 - next tutorial we will see scripts and
56:12 - readys
56:15 - in this tutorial we are going to see
56:17 - scripts in radish most tasks you do in
56:19 - red is involve many steps instead of
56:21 - doing these steps in the language of
56:23 - your application you can do it in side
56:25 - that is with lua this may result in
56:27 - better performance also all the steps
56:29 - within scripts are executed in an atomic
56:31 - way no other radius commands can run
56:34 - while a script is executing so the
56:36 - command is eval
56:38 - and we need to pass scripts so we can
56:40 - pass any of the functions available
56:42 - inside redis library are the lua
56:44 - scripting libraries okay so we'll be
56:46 - using redis library functions
56:49 - that is reddish.call
56:52 - inside that will be passing the commands
56:56 - and the keys and values available so i'm
56:58 - using set and i'll be using keys which
57:01 - we will be passing as an arguments
57:04 - we'll also use argb argument variables
57:08 - which will be passing okay and the
57:10 - number of key value pair is one okay so
57:13 - we'll be providing one if you are not
57:14 - passing anything you can provide zero
57:16 - and you need to pass the key which is
57:18 - name
57:19 - and
57:21 - variable
57:23 - you can see that command is executed you
57:26 - can get the name you can see shabbir has
57:28 - been returning okay now how this works
57:30 - the ul command is what tells redis to
57:33 - run the script which follows by redis
57:36 - dot call which is the internal redis
57:38 - library methods or functions which are
57:40 - available there are multiple lua
57:42 - functions also available for the
57:44 - scripting currently we have here
57:46 - radius.call which have three commands
57:48 - that is set keys of 1 argv of 1 which
57:51 - are string is our scripts which is
57:53 - functionally identical to the radishes
57:55 - set command okay three parameters
57:57 - follows the script text which is the
57:59 - number of provided keys which is one the
58:02 - key name which is name and the first
58:04 - argument which is the shabir
58:07 - value of the key so this way my command
58:09 - is executed we can add we can check one
58:12 - more command by passing multiple values
58:14 - okay
58:14 - so let's add
58:17 - eval
58:19 - with
58:20 - radius.call
58:23 - okay
58:24 - we'll pass that
58:28 - okay let's use amset command to set
58:31 - multiple strings okay and then we'll be
58:34 - using
58:36 - keys of 1 and then
58:39 - argument 1
58:41 - then keys of 2
58:45 - argument of 2
58:48 - so i am using m set command passing key
58:51 - one value one key to value two
58:54 - yeah i need to pass number of keys i'll
58:56 - be using two keys okay for key one and
58:58 - key two then i need to define two keys
59:01 - i'm specifying
59:03 - name as one key and
59:07 - last name as another key now followed by
59:09 - these two we need to pass
59:11 - argument one and argument two so i'm
59:13 - passing shabir
59:15 - and i'm passing the way so this is the
59:17 - command my name
59:19 - and last name are the key 1 and k2 will
59:21 - be replaced in the radius.call function
59:24 - in the same way irg1 and argv2 both
59:28 - arguments will be replaced with shabir
59:30 - and
59:31 - you can see that command has been
59:32 - executed if i check the values
59:35 - get
59:36 - last name you can see that it's coming
59:38 - down okay now let's take up one notch
59:41 - above so i'm executing this command okay
59:43 - which is hm set country capital i am
59:46 - passing bunch of countries and capitals
59:48 - okay india for new delhi u.s usa
59:51 - washington dc russia is a moscow german
59:53 - is berlin japan stockholm and italy's
59:55 - room so this is creating my set with all
59:59 - the country and country capitals detail
60:02 - okay and let's add one more sorted set
60:05 - so i'm creating a sorted set of country
60:07 - and i'm passing three countries italy
60:10 - india and usa with the scores available
60:14 - okay you can see that
60:16 - z range of country
60:19 - zero to minus one so we have three
60:20 - countries india italy and usa now what i
60:23 - want is i want the capitals
60:26 - from my ad set based on the values
60:28 - available in my country sorted set okay
60:31 - so i want all the values like for
60:34 - mightly i want rome for india i want new
60:36 - delhi for usa i want
60:39 - washington dc but i want all the details
60:41 - from that hash for this particular set
60:44 - within the same sequence okay so let's
60:46 - write a script for it so we'll be
60:47 - writing eval okay and we'll start the
60:50 - script we'll be using
60:52 - redis dot call
60:57 - we'll be doing
60:58 - z range
61:00 - for
61:02 - keys we provide okay
61:04 - so whatever
61:06 - set we provide
61:07 - and i want all the values so for 0 to
61:10 - minus 1 all the value okay
61:12 - now let's store all these values in our
61:14 - local variable so i'm creating a local
61:17 - variable
61:18 - order
61:19 - okay i want that in this order so i
61:21 - created this variable now with this
61:25 - order let's get all the data from edge
61:27 - set
61:28 - that is the country cap which we created
61:30 - so we'll be doing
61:32 - return
61:35 - redis.call
61:38 - i'll be needing multiple keys so i'll be
61:40 - using hm get
61:44 - i'll use
61:46 - keys of two i'll pass the second
61:48 - argument as the hash key okay and then
61:51 - what i'll do i'll use the luas function
61:54 - for
61:55 - table that is unpack
61:58 - and then in unpack i'll pass my local
62:01 - variable which is order
62:03 - okay and then i'll specify number of
62:05 - keys which is 2
62:07 - and then i'll pass key 1 my key 1 should
62:09 - be country right
62:12 - because my country is my set so i need
62:15 - to pass set over here and for key 2
62:17 - it should be country cap
62:23 - ok you can see that i got all the
62:25 - details rome new delhi and washington dc
62:28 - for italy india and usa with the same
62:30 - sequence based on the values of the hash
62:33 - and sorted side okay so this way we can
62:34 - use different scripts available this is
62:37 - just the gist of the lower scripts which
62:39 - we can use in redis there is a lot more
62:42 - we can do you can for sure go to the
62:45 - lua's website and you can learn the lua
62:47 - scripts and you can use android is now
62:49 - let's do one more thing now to rather
62:51 - than writing entire script over here
62:53 - right we can store that script and we
62:56 - can execute those scripts okay so let's
62:58 - do that okay so this is my entire script
63:00 - from here to here
63:02 - right
63:03 - now let's load the script okay script
63:05 - load command
63:08 - and this value you can see that once we
63:11 - load the script we will be getting a
63:13 - hash value okay so entire script is
63:16 - stored in this hash so we can evaluate
63:18 - with this to execute this hash scripts
63:21 - we need to use
63:23 - eval sha command okay after that we need
63:27 - to pass the shaky and then we need to
63:30 - pass the arguments so previously we
63:32 - passed to country and country cap okay
63:35 - so same we can pass over here my key
63:38 - is two i have two keys available so and
63:40 - the first key should be country and the
63:42 - second should be
63:44 - country cap
63:47 - okay i'm getting the same results over
63:49 - here okay i can also check if my script
63:52 - is available for the particular hash
63:53 - available okay this is my hash so let's
63:56 - check if script is available currently
63:58 - we have the script so it will be
63:59 - available
64:02 - so the command script
64:05 - exist and we need to pass hash
64:08 - so you can see it's returning one so the
64:10 - script is available with the script
64:12 - flush command all my scripts will be
64:13 - flushed out you can see okay now if i
64:15 - check again if script is exist or not
64:17 - then it will return zero my script has
64:19 - been deleted so this way we can use
64:22 - scripts in readings we can load the
64:25 - different scripts we can remove it we
64:27 - can check if existence is there or not
64:29 - we can create the entire lua scripts as
64:31 - well and we can entirely run those rua
64:34 - files as well so i recommend only using
64:36 - scripts when you can prove that it
64:38 - results in better performance so always
64:40 - run benchmarks first for the scripts
64:42 - also your script shouldn't be too long
64:44 - remember that while a script is running
64:46 - everything else is waiting for it to
64:48 - finish so if your script takes quite
64:50 - some time it can cause bottlenecks
64:52 - instead of improving performance and the
64:54 - script stops running reaching the
64:56 - timeout so the default timeout is for
64:59 - five seconds okay so that's been it for
65:01 - the scripts and readys in the next
65:03 - tutorial we will see connections and
65:06 - security
65:09 - in the last video we saw about scripting
65:11 - and release in this tutorial we are
65:12 - going to see connections and security in
65:14 - redis so once you're connected to your
65:16 - redis client is your connection is
65:18 - successful or not to check that you can
65:20 - use a ping command okay once the
65:22 - connection is successful server will
65:23 - return you pawn okay it's a nice game so
65:26 - you can play ping pong with redis client
65:28 - we can add the messages as well with
65:31 - echo command
65:32 - with any of the message it will be
65:34 - displayed in the
65:35 - client okay so in redis there is a
65:38 - concept for databases there will be
65:40 - different databases available the
65:41 - default database when a client is
65:43 - started then it's assigned as 0. to
65:46 - select that the command is select to
65:48 - select any of the database and we need
65:50 - to provide the index of the database
65:52 - default will be always zero so you can
65:54 - see that when you do again select zero
65:56 - it will return okay your zeroth database
65:58 - will be added if you want to change the
66:00 - database you can add select one then it
66:03 - will change to the newer index database
66:06 - you can always switch and forth between
66:09 - them despite of different databases
66:11 - available all the data are persisted
66:14 - into a single rdb or aof file in the
66:18 - radish
66:19 - okay in a single node architecture if
66:21 - there is a clusters available if your
66:23 - radius is configured in a cluster then
66:25 - by default every time your database will
66:28 - be zeroth index you cannot change it at
66:30 - that particular time so this is only
66:32 - available when you are running on a
66:34 - single node and the main important part
66:36 - is when you are switching between the
66:38 - databases when you are using select zero
66:40 - or select one with either zero or one
66:42 - databases then your keys will be unique
66:45 - to each of your database so if you are
66:47 - adding one key to database 0 then that
66:49 - particular key won't be available to
66:51 - database 1. if it's there then value if
66:54 - you're adding to it it may be different
66:57 - so let's check it out so currently i
66:58 - mean select zero so i'm adding
67:01 - set
67:03 - name as shabir
67:05 - okay you can see that
67:07 - get name is available for shabbir now
67:10 - let's switch it to
67:13 - index one okay database one and then if
67:16 - i do get name
67:18 - you can see that it's returning nil okay
67:20 - so that means
67:21 - it's not affecting to my the select zero
67:24 - database let's set this value over here
67:28 - set name to
67:31 - the audi
67:33 - if i again check that name
67:35 - it is
67:36 - and if i check the same name again in 0
67:39 - database
67:40 - changing back to zero index and checking
67:43 - the name
67:45 - you can see that both the values are
67:47 - different one is now the and one is
67:48 - shabby in both the zero and one database
67:51 - so in the ready server multiple redis
67:53 - clients will be connected to the redis
67:55 - server so what are all the clients
67:57 - available you can check by the command
68:00 - client
68:03 - list
68:04 - okay so this will return all the clients
68:06 - which have been listed over here you can
68:08 - see that all the informations are
68:10 - available their id their address
68:12 - their name
68:14 - their agent all the different things are
68:16 - available currently i have only one
68:18 - client enabled so that's why only one
68:20 - entry is coming if multiple clients are
68:21 - available multiple entries will come
68:24 - okay you can also set the name of the
68:26 - client you can see that currently the
68:28 - name is nalovaya so we can set the name
68:31 - as well so let's add client
68:35 - set name as this terminal
68:41 - you can see that
68:42 - the name is set you can also get with
68:45 - client get name
68:47 - that particular name okay now when we
68:49 - check for client list again okay at the
68:52 - time you can see that that name value is
68:54 - coming for the listed clients so this
68:57 - way we can identify which client has
69:00 - been active and which client we need to
69:03 - kill or any other operations if you want
69:04 - to do for the particular client if you
69:06 - want to kill those clients we can use
69:09 - the kill command to kill the clients
69:11 - okay
69:11 - the command is client
69:14 - kill
69:15 - and we can kill based on the id so we
69:17 - need to provide id and the id which is
69:19 - your 17 okay and if you want to do by
69:22 - address then you need to pass the
69:24 - address which is over here to kill that
69:26 - client i'm passing 17 over here you can
69:28 - see that
69:29 - okay currently i'm running in this so it
69:31 - won't be deleted
69:33 - let's clear it out so this way we can
69:35 - use different client keys as well over
69:38 - here now coming to security we can
69:41 - define the password for the clients to
69:43 - login to your server okay so for that we
69:46 - need to check the configuration we need
69:48 - to change the configuration for it so
69:50 - let's change the configuration for
69:52 - storing the password we'll do config
69:55 - set
69:56 - require pass okay so this is the require
69:59 - pass is the configuration for setting
70:01 - the password here we need to set any of
70:03 - the password so let's
70:05 - set submit one two three okay so you can
70:08 - see that password is set so once the
70:10 - password is set now you cannot execute
70:13 - any of the command without
70:14 - authenticating to your client okay if i
70:17 - open any new terminal
70:19 - okay and i do
70:22 - get name you can see that error is
70:24 - coming north authentication required so
70:26 - unless you are authenticated you cannot
70:28 - execute commands over here so to
70:30 - authenticate you need to use auth
70:32 - command
70:33 - auth and you need to give password so
70:35 - the password we set was
70:37 - submit one two three right
70:39 - submit one two three so once you are
70:41 - authenticated then you can
70:44 - check your commands will be executed
70:46 - properly so this way you can use
70:48 - authentication to connect to your radius
70:51 - clients as well so that's it in this
70:53 - video for connections and securities in
70:55 - radish
70:59 - in this tutorial we are going to see
71:00 - geospatial commands so in geospatial
71:02 - command what we store is we store a
71:05 - location information we store lat long
71:07 - details of any of the particular
71:08 - location we say lat long but if you are
71:10 - aware of all the geometrical aspects or
71:13 - geography then the details which have
71:15 - been expressed is longitude and then
71:18 - latitude x and y axis okay so we'll be
71:20 - storing the data as longitudes and
71:23 - latitudes so how reddish stores all
71:26 - these information so that it stores all
71:27 - this data in a sorted set but if you
71:29 - remember that in our previous tutorials
71:31 - we saw that sorted sets to store the
71:34 - data we specify
71:36 - scores okay based on this course data
71:38 - has been added so here the scores has
71:40 - been added based on the jio hash
71:42 - generated based on the latitude and
71:45 - longitude information which we provide
71:46 - so it generates a 52-bit integer value
71:49 - based on that the jio hash is generated
71:51 - jio hash will be a unique value based on
71:53 - that location based on that data has
71:55 - been stored into the sorted sides okay
71:57 - and the model here is used as a
71:59 - spherical model the earth which has been
72:02 - modelized in radius is a sphere okay so
72:05 - all the data which we are storing will
72:07 - have a prone to 0.5 percent of errors so
72:09 - make sure of that while using that is in
72:12 - your application for geospatial data so
72:14 - let's start adding locations into our
72:17 - radish the command here to add the
72:19 - information of latitude and
72:21 - is geoad
72:24 - okay geo add and then you need to
72:25 - specify the key suppose i'm specifying
72:28 - key as maps
72:30 - okay and then you need to provide
72:31 - longitude and latitude information okay
72:34 - so here are my latitude and longitude
72:36 - information uh so this is the city
72:37 - ahmedabad so i'm storing the information
72:40 - longitude and latitude of i'm the birth
72:41 - city you can see that the data has been
72:43 - entered now let's add some more data for
72:45 - different cities okay we can use
72:47 - pipelining also over here when adding
72:49 - location data okay so this is the
72:51 - command jio add maps using the same key
72:54 - and i'm adding the
72:56 - longitude and latitude for mumbai and
72:58 - the same for bangalore okay
73:00 - so you can see that i have added the
73:01 - data let's check the data now to get the
73:03 - data right you can use all these similar
73:06 - sorted set commands okay because pin
73:08 - functions are stored in sorted sets so
73:10 - we'll see
73:11 - the range
73:13 - maps
73:14 - and we'll provide the start and end
73:16 - index
73:17 - you can see that bangalore mumbai nam
73:19 - nabat is added to it now i told you
73:21 - right in the starting that all the
73:22 - information are stored based on the jio
73:25 - hash values okay so uh let's check the
73:27 - geohash values for the sorted elements
73:30 - to check the geo hash values we can see
73:33 - with command jio hash
73:36 - okay and we need to specify the key
73:38 - which is maps and you need to specify
73:39 - the member for which member you need to
73:41 - see that suppose i want to see for
73:43 - ahmadabad okay
73:45 - you can see that this is the hash key
73:48 - which is been generated now if you are
73:49 - not aware of what jio hash means then
73:51 - you can go to wikipedia and
73:54 - check on geo
73:55 - there is also a website called
73:57 - geohash.org that will take jio hash
73:59 - value as an input and it and it will
74:01 - show the location information i can show
74:04 - you that as well
74:05 - you can see
74:07 - your hash.org
74:08 - if you go
74:10 - okay if i specify here
74:13 - my geo hash value then you can see and
74:15 - the bar is being shown over here okay so
74:17 - this way you can check the geohash
74:18 - values and the coordinates for it okay
74:21 - now getting back to business now we
74:23 - stored our values we got the jio h
74:25 - values as well okay but what about
74:27 - getting back the values okay so the
74:29 - command to get the values like my
74:32 - longitude and latitude value okay the
74:34 - command is geopos
74:36 - okay and you need to specify maps that
74:39 - is a key and you need to specify the
74:40 - member
74:42 - okay that will return your longitude and
74:44 - latitude values which you specified now
74:46 - you can see that the values which we're
74:48 - getting here is different than what we
74:49 - have stored right because i told you
74:51 - that earlier it converts into a 52-bit
74:54 - integer and then it's storing these
74:56 - values okay so there might be a point
74:57 - five percent of error so these are the
74:59 - values being stored you can get this
75:00 - information from here as well now we
75:03 - store three locations okay let's add one
75:05 - more location okay i'm adding pune as
75:07 - well giving longitude and latitudes for
75:09 - that as well
75:10 - now if you see
75:11 - my data
75:14 - i have four locations okay i have added
75:16 - my latitude longitudes now i want to
75:18 - find the distance between those two
75:20 - locations okay that the command to get
75:23 - the distance between two location is
75:25 - geodest
75:26 - okay geodes command and then you need to
75:29 - specify
75:30 - your key and you need to specify the
75:31 - members you can only get distance
75:33 - between two members only not more than
75:36 - that so suppose i want to get the
75:37 - distance between mumbai and pune okay
75:42 - mumbai and
75:44 - okay so you can see that you're getting
75:45 - the distance over here the default unit
75:47 - for the geodest is meters so you're
75:50 - getting this in meters okay now if you
75:53 - want in specific units you can specify
75:56 - it if you want in kilometers
75:57 - okay so this is the information in
75:59 - kilometers so there is 120 kilometers of
76:01 - distance between mumbai and pune if you
76:04 - want
76:04 - you can get in miles as well with mi
76:07 - okay so this is the distance between the
76:09 - two
76:10 - cities in mice you can get in meters as
76:12 - well okay so this way you can find the
76:15 - distance between two cities
76:18 - you can specify for others as well you
76:20 - can specify for
76:22 - mumbai and ahmedabad in kilometers okay
76:24 - you can see that it's 441 kilometers now
76:26 - be sure that there might be some of you
76:29 - who will be specifying okay the distance
76:31 - between two cities is not that which you
76:33 - are getting in google maps it won't be
76:35 - because the distance between the two
76:37 - cities which has been calculated by
76:38 - radius is based on the two points so it
76:41 - will be a straight line between the two
76:42 - points and the straight line will be
76:44 - based on the sphere model okay so the
76:47 - distance is calculated on this sphere
76:49 - model between the two points with a
76:50 - straight line so that's how radius
76:53 - calculates the distance between the two
76:55 - locations
76:56 - now i got the distance now i want to
76:59 - find the
77:00 - locations around a particular point okay
77:02 - suppose we can take a scenario like i
77:04 - want to find the restaurants nearby okay
77:07 - so i have my current positions i have
77:09 - all the positions of restaurants as well
77:11 - so i want all the restaurants nearby
77:13 - area suppose 200 meters or maybe 50
77:16 - meters okay or maybe all the restaurants
77:19 - in the city so all these informations i
77:21 - can get with the help of jio radius
77:23 - command i have all the information
77:24 - stored okay you can see i've just stored
77:27 - informations of map you can store all
77:28 - the information for all the particular
77:30 - restaurants all the different use cases
77:32 - what you have so yeah what we'll do we
77:34 - will find the cities specified to the
77:37 - location okay within this location
77:39 - within the radius of this location how
77:41 - many cities i'm getting so that
77:43 - information will find out with
77:45 - your radius command
77:47 - okay
77:48 - your
77:50 - radius command and then i need to
77:52 - specify the key which is maps
77:55 - then i need to specify the
77:57 - longitude and latitude information okay
78:00 - suppose i want to find nearby series for
78:02 - that particular radius from am the ball
78:04 - so suppose i will give the latitude and
78:06 - longitude for amdapad
78:09 - and then i can specify the radius value
78:12 - so within how many kilometers or meters
78:14 - or feet or miles you can see all the
78:16 - information you can provide so i want
78:18 - all the cities within 500 kilometers
78:21 - okay
78:22 - so i'm getting two cities which is
78:24 - amdabad and mumbai and the bath would be
78:26 - zero zero kilometers for sure and mumbai
78:28 - would be you can see it will be 441
78:30 - kilometers so all these informations you
78:31 - are getting from here if i change my
78:33 - kilometers okay supposed to 1000
78:36 - kilometers
78:37 - you can see that i'm getting more data
78:39 - pune is also included in it okay
78:41 - the same way you can calculate in miles
78:43 - as well okay within thousand miles of
78:45 - radius you can see within thousand miles
78:47 - of radius all the information all the
78:49 - cities are being included bangalore
78:50 - mumbai ponem daba okay now there are
78:53 - some more keys also we can specify we
78:55 - can get all the coordinates as well with
78:58 - r and we can get distance as well okay
79:00 - so for that we need to pass with
79:05 - with coord right so you can see that
79:07 - we'll get the coordinates information as
79:09 - well for mdhaba these are the
79:11 - coordinates for bangalore these are the
79:12 - coordinates for mumbai and pune
79:14 - accordingly
79:15 - okay if you want coordinates as well as
79:18 - distance also okay so you need to
79:21 - specify with a dist so you can get the
79:23 - distance as well for amdava this is this
79:26 - is 0.0001 mile the same for bangalore
79:30 - mumbai
79:31 - and pune all the information you can get
79:34 - now there is also one command to get
79:36 - with hash okay
79:38 - so there is one catch over here okay if
79:41 - you do with hash and hoping okay you
79:43 - will get that jio hash value okay and
79:45 - you're out of your luck because radius
79:47 - doesn't store that information so this
79:49 - value would be your 52-bit integer that
79:52 - has been stored for the sorted cell
79:54 - right that value it will be you can see
79:55 - that that integer will be this not your
79:58 - jio hash values
80:00 - okay so for getting gi values you are
80:02 - with geohash commands only good luck
80:04 - with that so this way you can get the
80:06 - informations based on the longitude and
80:09 - latitude for your particular location
80:11 - but what if you want to get data within
80:14 - the radius based on the members which
80:16 - you have already in your key
80:18 - okay so for that the command is let's
80:20 - clear it out everything first okay so
80:22 - for that the command is
80:24 - jio radius
80:26 - by
80:27 - member
80:29 - okay
80:29 - your radius by member is a command then
80:31 - you need to specify the key which is
80:33 - maps and then you need to specify a
80:35 - member suppose
80:40 - okay
80:41 - so my point starting point is amdabath
80:43 - and within that mdhabat i want a radius
80:45 - and that information i want i want
80:47 - radius of 500 kilometers
80:50 - okay
80:52 - and then you can see that you will get
80:53 - the information based on the member
80:55 - values
80:56 - you can always specify
80:58 - more information so this information you
81:00 - will get up to feeds level okay
81:03 - you can specify feet meters kilometers
81:06 - and miles so within the area and within
81:09 - the use case what you have you can get
81:11 - the information based on this geospatial
81:13 - commands here as well in geo reduce by
81:15 - member you can specify with chords with
81:17 - dist and with hash values
81:20 - and with this you can also specify how
81:22 - data you want okay by ascending order or
81:25 - by descending order so you can specify
81:27 - the esc to get data in descending orders
81:29 - with the maximum value first
81:31 - so bangalore is the farthest from
81:33 - ahmedabad followed by pune mumbai
81:36 - and you can change to ascending order as
81:38 - well
81:39 - to get data from the nearest to the um
81:42 - followed by mumbai pune and bangalore so
81:44 - these are the details of all the command
81:46 - that you can use to store your
81:47 - geospatial or geographical values and
81:50 - you can perform your operations and you
81:52 - can use in your use cases so that's been
81:54 - it in this video for geospatial commands
81:57 - and readys
82:00 - in the last tutorial we saw geospatial
82:03 - commands and radius in this tutorial
82:04 - we'll be seeing reddish benchmarking we
82:07 - are in home stretch now benchmarking is
82:09 - very important thing whenever we decide
82:11 - to use a new technology or use new tool
82:14 - then how the tool or technology is
82:17 - performing for our application or for
82:20 - our use cases that will play a huge role
82:22 - in going ahead with that technology or
82:25 - tools okay here redis provides an
82:27 - inbuilt tool that is redis benchmark to
82:29 - benchmark how radius will perform on our
82:32 - server or how it will perform on our
82:34 - single node or a cluster so that way we
82:37 - can get our expectations clear how reds
82:39 - will be performing and we can optimize
82:41 - it or we can check if new nodes or new
82:44 - servers would be needed to get the
82:45 - desired performance in our application
82:47 - or not so let's check how we can do
82:48 - benchmarking in redis one protip yeah
82:51 - till now you have seen that we are
82:52 - connecting to that is cli with our only
82:55 - ready cli command so we are connecting
82:57 - to just our local host which we have
82:59 - installed in our machine but what if you
83:01 - want to connect to any of the server
83:04 - okay so for that we need to specify the
83:06 - host name or the ip address and the port
83:08 - number so the command would be
83:10 - redis cli
83:12 - and then we need to pass host number
83:13 - that would be i'm connecting i'm still
83:15 - connecting to my local or so i need to
83:17 - pass my localhost url which is my
83:19 - localhost type is 127.0.0.1
83:23 - and then we need to
83:24 - pass the port number so my redis was
83:26 - working on port number 637 and which is
83:28 - the default port for rides okay so this
83:30 - way you can connect to any of the remote
83:32 - ready servers okay you can see that i
83:34 - have connected to redis now so let's
83:37 - cancel it out and go with the
83:38 - benchmarkings
83:42 - okay for the benchmarkings also the same
83:44 - thing if you're running on your local
83:46 - system on your system where the redis is
83:48 - installed you can directly go ahead with
83:50 - redis hyphen benchmark command you don't
83:52 - have to specify any of the parameters
83:54 - but if you are running on any of the
83:55 - servers then you need to specify your
83:57 - ipn port number with hyphen h and hyphen
84:00 - p parameters okay so let's do redis
84:06 - benchmark
84:07 - okay now we need to specify some of the
84:09 - parameters how we need to do
84:10 - benchmarking with what number of data
84:13 - with what number of lines and all the
84:14 - different informations so if you don't
84:17 - specify anything at that time it will
84:19 - french benchmark on all the different
84:21 - commands available with 50 clients and
84:24 - three bytes of data default okay but i
84:26 - need to specify for maybe thousand
84:28 - commands okay so i need to specify
84:30 - hyphen n
84:31 - and
84:32 - i'll specify thousand so it will run on
84:34 - 1000 commands so you can see that
84:36 - benchmarking is completed okay so it's
84:38 - running on 1000 commands you can see
84:40 - 1000 operations with 50 parallel clients
84:43 - and three bytes of payload okay you can
84:45 - see all the different informations for
84:47 - set command how much time it took okay
84:49 - 31 250 requests per second it can
84:52 - perform okay with three bytes of data
84:54 - the same way you can check for get and
84:56 - all the different information okay let's
84:58 - clear it out again now you saw right we
85:00 - had only three bytes of data suppose i
85:03 - want to run the command for more data
85:05 - okay so for that i need to pass the data
85:07 - information that is hyphen d then i need
85:09 - to specify the size okay i'm specifying
85:12 - 100 kb so what it will run now is
85:15 - benchmarking will run four thousand
85:17 - commands with 100 kb of data
85:23 - so you can see that all the operations
85:24 - have been running for help push or push
85:26 - all the different commands it will check
85:28 - how it's behaving okay it's set and all
85:31 - different informations have been loading
85:33 - up so this way you can check the
85:35 - benchmarking for a system let me cancel
85:36 - it for now
85:38 - okay
85:39 - and then check how it was behaving
85:43 - if we scroll it up you can see that
85:47 - oh
85:48 - boy so much information right
85:51 - yeah
85:52 - you can see that thousand request
85:54 - completed in 0.03 seconds and it is
85:56 - showing 50 parallel clients and how much
85:58 - period it is okay we change the payload
86:00 - from 3 bytes 200 kb so accordingly you
86:03 - can get the value right it will take
86:04 - around 830 request per second for
86:07 - setting the data 800 788 for getting the
86:10 - data for incrementing your values 344.82
86:13 - requests per second and all the
86:14 - different information you will get and
86:16 - accordingly we can get the idea how
86:17 - redis is performing okay let's clear it
86:20 - out all the details
86:23 - okay
86:24 - so this way we gave this information and
86:27 - we saw that the default lines were 50.
86:29 - now if you want to change the clients
86:30 - right
86:32 - then we need to specify hyphen c command
86:34 - and then we can specify how much client
86:36 - we need to check
86:38 - you can see that we specified 200
86:40 - clients okay so it's running on it will
86:42 - turn on 200 lines so again it will show
86:44 - the same informations how much number of
86:46 - requests has been served per second
86:58 - you
87:01 - [Music]

Cleaned transcript:

redis is an inmemory data structure store used as a database cache and message broker following in the footsteps of other nosql databases such as cassandra couchdb and mongodb redis allows the user to store vast amount of data without the limits of relational database it supports various data structures such as string hashes sets list sorted sets bitmaps hyperlog logs and geospatial indexes if we talk about the architecture there are two main processes in redis architecture one is redis client and the other is redis server this client and servers can be on the same computer or to different computers redis can also be configured as a master slave configuration for the distributed systems talking about the advantages of redis speed is the most important part of the radius redis stores the whole data set in primary memory that's why it is extremely fast it loads up to 110 000 writes per second and 81 000 reads per second can be retrieved it supports pipelining of commands and getting and setting multiple values in a single command to speed up communications with the client libraries talking about the persistence redis shows all the data in memory changes are asynchronously saved on a disk using flexible policies based on elapsed time and number of updates since last save redis supports rich data type it supports natively most of the data types that developers already know such as list sets sorted sets and hashes this makes it easy to solve a variety of problems as we know which problems can be handled better by which data type all the radius operations are atomic which ensures that if two clients concurrently accesses the radius server will receive the updated value the competitive advantages of redis is that it provides multiutility tools that can be used in a number of use cases such as caching messaging queues any shortlived data in your application such as web application sessions web page hit counts etc i bet this is enough to get you excited and start with reddish on your next project now enough jibber jabber let's get our hands dirty while exploring radish to install radisson system go to reddish.io download once you go there you can find the download information over here you can download this stable version you can download the docker file as well so that you can run your radius on your docker you can find the other versions as well okay you can download the zip file and you can unzip and you can start your ready server and the other way is you can download from your package manager also so uh let's go and download redis from the ubuntu package manager so let's go to ubuntu so in your ubuntu so run this command to update your system first sudo apt update enter your password and within no time your system will be updated okay now run sudo apt install redis server okay in my machine you can see that the radius is already installed so it's saying the latest version is installed if your system doesn't contain radius then the new then the new ready server will be installed in your system okay once the reddish is installed you can start the radish server by redis hyphen server command okay you can see that my ready server is started so this way you can install and start your address in your system in this tutorial we will see how we can use redis cli and check the first data type that is strings so let's first start the redis server in a background process and open redis cli and use some string commands so let's start ready server in background okay so my ready server is started okay you can see from here you can see that my ready server is started okay now let's open that is cli for opening that is cli we'll just write is cli okay and hit enter you can see that once you hit enter you can see that your redis server information has been shown here so this is running on your local host and the port number is 6379 which is the default port for radis okay now here you can write all your radius commands so now let's start with strings quite any strings in red is what we can do is we'll just write set string name and the name so you already know that red is runs on a key value pair okay so what we gave here is name as a key and value as a shabir and we are setting a string so you can see that we returned okay so that means my chubby value is set into my key name okay if you want to see that what we can do is get and the key which we need to pass so we'll pass name you can see that my value is shown here okay let's add one more variable set email as email at domain.com okay here the value is set you can check that value as well give get email okay now if you want the particular data from this string okay how we can get is you can from get range and the key you need to pass that is email i want the first five characters okay so i will pass zero to four so you can see that i'm getting the first five characters so this way you can get all the characters different characters from the strings now we are just studying these single single strings if you want to set multiple strings how we can set this using m set command using multiple set we need to provide the key value pairs so just we'll provide here lying as english this is one key value pair the other value pair we can say technology technology has redis so you can see two key value pairs we are setting over here okay the same way we can get multiple keys with m get command we can pass multiple keys over here we can pass line and we can pass technology so you can see we got both the values if you want to get the length of the string with htr line command we can get the length of the string as well let's get the length of a length key you can see that it's a seven character length you can check for technology as well okay so this way you can check the length of the strings as well if you want to rename any of the keys okay then just set the values again for that particular key set key for the name and i'm changing my name from shabby to daily code buffer okay you can see that the value has been changed and if i get that value the sharpie is changed to daily code buffer so htr line will give this zero as the length of a key when the key is not present so if we see abc abc the key is not present right so at that time it will return zero okay we can also store the integers as well so let's store set count as one okay so we'll get that integer when we do get count okay now we can increment and decrement these values as well with the incr command incr and the key we need to pass that is count so current my value is 1 right when i do i ncr it will change to 2 so incr will always increment by 1 but if you want to increment a particular key by any of the particular amount so for that you can use incr by command increment by and that you need to give the key and by how much value you need to increase so suppose i want to increase by 10 so you can see that my value is changed to 12. the same way you can use decr command decrement so decrement the key sorry decrement the count right so decrement the count will change the value from 12 to 11 and the same way you can use decr by to pass the particular values to decrement the values suppose i want to decrement by 5 so you can see that the values has been decremented we can also store the float type values so suppose let's store set pi as three point fourteen okay so float type values also we can store you can see it's been stored let's first clear out all everything okay let's do get pi again so you can see that 3.14 has been set to my pi way so if you want to increment the values of a float type okay so for that we need to do incr by float okay increment by float and then you need to pass the key that is my pi and how much i need to increase suppose i want to increase by 0.001 okay you can see that my new value is 3.4 double zero and multiple characters that way so this way i can increment now suppose i have some values and i want to expire those values i want to delete those values after some time okay so for that we can expire those values okay suppose i have one value a which is set to one okay you can see that my value is one now i want to expire this value after expire a i want this values to be deleted after 10 seconds okay so my command would be expire 8 10 so after 10 seconds this value will be deleted we can check this by ttl here you can see that four second is remaining two second is remaining minus two seconds that means this value is expired okay you can check the value again with get a you can see the value is not there by default the value will be minus 1 when the expiration is not set we can set the expiration while setting the variable only so for that we'll do set x and we will provide any key and will provide how much seconds i want to keep that value and the value okay so that means my b key would be expired after 10 seconds till then i will be having that value okay till that if i do b i have that value okay if i check what is the timing okay it's been expired if i do again get b that value won't be there so that's it in this string in redis in the next tutorial we will see list and radius in this tutorial we'll be going through list data type so in the last tutorial we created many of the keys over there so to list down all the keys we can use keys command and we can give the patterns okay you can give the wildcard characters or any of the particular so i want to get all the keys which i have already added so with this keys star command you can get all the keys so these are all the keys which we added earlier okay now to remove all the data what we can use is we can do flush all command so this will delete all the key value pairs from our radius okay now if you see keys star you can see that i don't have any data now okay now let's add some list now to add any of the list variables the command is l push and the key value so i'm putting my data into my country key so country is the key and value okay you can see that i have pushed you can push one more data country as usa okay now to get all this data which we have already entered we can use l range and the key and start and stop so this start and stop is the value which we need to define to get the data from the list so my start would be 0 and my end would be minus one to get all the data you can see i can get usan india let's add one more okay i'll push uk okay now now you can see that with l range country zero minus one we are getting all the data then i'm get adding l range country zero to one so that means i will only get my zeroth element and the first element that should be uk and usf okay so this way we can define the range to get the data from our list so if we so we saw l push that is pushing from the left side that means from the top side of our list so all the values you can see we are adding at the top of the list if we want to add the values at the bottom of the list then we can use r push so with the r push command and now my country as a key if i put my new value then it will be pushed at the bottom so currently you can see my values are uk usa in india so australia would be added at the bottom of india okay so if i again check my countries you can see that australia has been added at the bottom okay so this way we can use i'll push and r push to add the data do a list so currently you can see we have four elements in our list okay you can use ln length of the list command to get the length of our list that is ln and the key name the key name is not present it will return zero now if we want to remove the data from our list the same way we have l push and r push the same concept we have for r pop and l pop with lpop the data will be removed from the top and with the rpop data will be removed from the bottom so the command would be lpop and key that is my country so you can see that with lpop command my uk would be removed okay you can see that uk has been removed with ipo command australia will be removed now if you check our list again you can see that we have only two entries available so this we can use lpop and our pop command to remove data from our list okay let's add one data okay i'll push country france okay let's clear this out sorry and do a range of country with zero to minus one so we have france usa and india now suppose you want to change any of the value okay you want to change france to any of the country so with the lsat command in my key as country and you need to provide the index which index you need to change okay it starts from zero so either zero one or two we have suppose we provide zero as france we need to change let's change it to germany okay you can see that reference has been changed to germany with the lsat command now you need to insert data at any particular position okay suppose you want to insert data between germany and usa or usa and india or you need to insert data before germany or after india anywhere so for that for that the command is l insert and you need to provide the key and you need to provide the command that is before or after what you want to do suppose i need to do before okay i need to add before what before germany okay i want to add before your money and what should be the value suppose new zealand okay so you can see that i can add new zealand at the top suppose i want to add after usa okay so for that i'll insert country after usa i want to add any country suppose ui okay so that will be inserted after usa so this way you can use ali insert command to enter any of the details at any position in our list now you want to find the values based on the index from our list okay so for that the command is l index and the key we need to pass is our country and what is the value at any of the particular index suppose what is the value at 3 you can see that at the 3 my value is uae check with any of the value so this way a linux command can be used to get any of the value from the index now we saw in the starting right we use l push command and we added country and we added value okay at the time what it happened is it created a list and added the value to it okay but what i want to do is i want to check if that list exists then only add the value into my list otherwise won't add so for that my command would be help push x then my key suppose i'm adding data to movies currently i don't have any movies list okay so i'm using l push x movies too and adding any values okay so it will return an 0 okay because it was not added to the list but if we use l push x for my current list which is available and if i add any new country okay so at the time it will return the length of the string so you can see that without range country right so you can see that south africa has been added the same way we have our push x command as well the same way as l push x if you define any of the things okay it will return zero because the movie's list is not available yet you can check with l range command right i'll range move is zero to minus one you can see that my list is empty or doesn't exist okay so this way we can use l push x and r push x command to insert data into a list when list is available so you can see that we have data right in l range for country i'll range for country 01 so if you want to sort this data okay so to sort this data we have a sort command okay we need to provide the key and we need to provide the pattern and limits and all the many informations available okay here my list is of type string okay so for that i need to provide alpha as a command to sort the data of my list so you can see that my data has been sorted okay now if you want to sort based on descending order you can sort that as well so sorting of the list can be done that way so if you have a list of numbers okay that is of integer of any other type you don't have to provide alpha as a command while sorting the data now the other command we have is bl pop and vr paw so what bl pop will do is it will block the execution till it has any value to remove okay if there is any value in the list then it will remove in the particular time frame otherwise it will wait till the timeout is been done to remove any element okay so for that what we can do is let's open one more terminal okay let's set bl pop over here in bl pop let's add let's specify any of the key suppose i'm passing out movies you know that movies there is no data in movies okay so i'm passing one time or second so it will wait for one second and saying data is nailed that means it was not able to delete any of the data okay now if i add movies for 10 seconds let's say 15 seconds so let's give bl pop movies 50 okay we are passing 15 seconds over here and let's add i'll push movies abc okay bx you can see that it removed movies abx okay so this way the rpop is also available for the blocking of removing the data from the list so either of blpop or br pop can be used according to the requirement so these are all the commands that you can use for the list in redis in the next tutorial we will see how we can use sets in redis in the last tutorial we saw list in readys in this tutorial we will be looking into sets data type okay to create any sets we'll use set command okay and we'll pass key and the members for the sets suppose we have java okay you can see one member is added we can add multiple members we can add radish we can add multiple members node.js aws okay they say we can add multiple members as well to list out all the members we have s members command and we need to pass key so you can see that it will list all the members available inside the technology set the main advantage of set is if you know from other technologies or other languages as well sets will store all the unique values if you are trying to add the values which is already been there in the key then it won't affect that suppose if you are trying to add java again then there won't be a duplication for that it will be always the single you can see it's returning zero so it's been not added to the set so that's the advantage how it will work so all the values will be unique irrespective we saw in list there may be duplicates as well to get the count of members available inside your sets you can use s card command and you need to pass the key okay you can see that it will return four you have four members available inside your technology set now to check if any of the member is available inside your set or not for that you need command sys member s is member or not ss member then you need to pass key that is technology and you need to pass the member which member you are trying to search suppose java so it is returning one that means the number is available if you try anything else like spring then it will return 0 because it is not available inside your set currently we have node.js aws radius and java inside my technology set let's create one more set front end okay for frontend technologies and let's add some of the members i'll add javascript html third node yes maybe react okay so these are the members that i'm adding in my front end list you can see by as members i need to provide front end you can see that these are the variables available into my front end so currently we have two sets that is one for technology and one is front end to find the difference between those two sets we have sdif command and we need to pass the key technology and here the key is front end so this will return the differences available within the two keys so if you can see that with s diff command it will check from the first key to the other key so it will check what is the difference okay so node.js it will check nodejs is available inside my front end okay it's available so it will be neglected other things it will check aws is not available redis is not available java also not available so these are the differences that is not matching to my second key that is front end so these are the list which will be printed out now if i want to store this data inside any of the set for that what i can do is s diff store command then i need to give destination suppose new set okay then i need to pass the key technology and frontend so what i'm doing is i want to store the difference from technology and frontend which is this which we got right that is java and aws to be stored inside my new set key okay previously we just displayed it this we can do to store the data okay the three elements has been stored inside my new set if you do s members for new set you can see that three values are available the same way we can check for the intersection elements as well so press enter and you need to provide key one and key two or many keys which is available so if you can see i have a enter technology i am passing and i am passing front end okay so you can see that the intersection element from both the list we have node.js so node.js is the common element for both the sets so it's been giving that well we can provide multiple keys as well so if i provide technology over here front end over here and we have a new set as well right so we'll provide new set okay so this will return the data which is been common to all so you can see that there is no common data which is available in all the list so it is returning empty list now the same way which we store difference data right as diff store the same way we have as interstore to store the differences of the data into a new list so new enter is my destination and my key is technology and front end is my t2 so you can see that the data has been stored into a new list sorry new set s members new enter we can see that node.js has been added to it let's clear it out now let's list out all the members again right yes as members technology and yes members front end now we saw the difference of the list intersection of the list and the union of the list we will see so s union is the command to get the union of the two or multiple lists okay sorry multiple sets so for that we are providing as union and we need to provide key so that is technology and we are providing front end okay you can see that we are getting the data which has been union so all the data has been added we can provide multiple keys as well we have technology we have front end we have new set we have new intel okay so all will be merged up together and the union will be displayed to store all the union data we have as union store and we can store in union new destination let new union and we can provide multiple keys let's add all these keys right and the new union seven elements has been added to new union set we can see all the members oh yeah so this way we can do multiple operations on set we did difference operations we did union intersections we added the elements we removed the elements and multiple things okay so that's been it it sets the next tutorial we will see sorted sets so in the last tutorial we saw sets in freddy's in this tutorial we are going to see what is sorted sets sorted sets are very similar to sets but with extra functionality which has been sorted form sorted sets sorts itself with an extra value which is the score so when we add any of the values to sorted sets we will define this score for that particular value so based on the scores available the sets will be sorted from minimum to maximum value of the scores which we provide so let's add some of the values to the sorted sets in sets we were using set command to add the value here for the sorted sets we'll be using z command z a double d we'll start ready cli okay and then we'll add z and key will provide users and we'll provide this score which is one and we will provide the value cover so you can see that the value has been added we can add more values with pipings as well like z the users will be key and we need to provide the score and the value for it x4 2 lx 3 nema four steve phi is nick so all these values would be added based on these scores which we provide and the values will be sorted accordingly we can see all the data with the command z range and then we need to provide the key which is users and then we need to provide the start and stop that means the minimum and maximum value so 0 to minus 1 which we will provide so you can see that all the values are being stored and sorted based on the scores which we have provided okay if you want to see the scores as well then we need to pass this with scores command as well so you can see that this course has been added to get the count of the users available or the cardinality of the values available we can use z card command and we need to pass the keys okay you can see that there are five variables available inside my users we can use the z count command as well okay to get the count based on the rank available so we need to add z count the keys which is my users and we need to pass the rank which is the minimum and maximum rank to get all the data we can pass minus infinity to plus infinity okay minus n2 plus inf so it will get all the data based on the negative infinity to positive infinity okay so you can see we have count as 5 now if we need to provide any particular values okay suppose i need to get all the users with rank 0 2 4 so you can see that we got 4 one element is been missed out because we've provided the maximum rank s4 we can remove the elements with the command z ram remove we need to pass the key which is user and we need to pass the members which member i need to remove suppose i need to remove alex i'll pass the alex and the alex will be removed if you say again you can see that we have shabbir nema steve and i miss baldinik okay that's fine so these are my users available we use g range users to get all our range right get all the data but if you want to reverse it we can use z reverse range then keys and we can give start and stop and with scores if you want with scores so this will reverse the list you can see that shabbir nima steve nick it is reversed to next you neema and shabir so this way we can reverse the range as well to view it out based on the ranks we can get the individual score also that has been assigned to any of the values suppose i want to get the score of shabir okay so i can do z score then my key as users and i end a member number is sharper so you can see that i'll get the score of it you can pass any of the variables let's get for steve so this way we can find the scores assigned to any of the values so when we did z reverse range okay so at the time the reverse happened based on the rank of all the particular values but if i want to reverse based on the scores which i provided so for that the command is z reverse range by score okay we need to provide users and we need to provide max and min max five minus zero i need with scores okay cool right so this will reverse my set based on the scores which we provided so from nick i should get shabby you can see that right it's been reversed now if i want to increment any of the scores of any of the values okay so how we can do suppose i want to increase the score of steve okay so for that the command is z increment by z i n c are by e we need to provide that is users i need to increment by two what is the member steve so i am incrementing four to six score of steel okay so you can see that the value is six now so you can see that if i am uh executing the same command which i executed earlier right for five to zero okay so at that time steve is not coming if i do six to zero then nick will be coming so this is again do the commands is done score now suppose if i want to remove the values based on the scores okay like minimum maximum value like i want to remove nick and steve based on the scores okay like if i have a long range a long list the command is z remove z ram range by score okay z remove range by score the key is users and the minimum value the minimum value should be five maximum value should be six so my five and six will be removed okay if i do z range users again with zero minus one you can see that stevenic has been removed i have two values available now if i want to remove based on rank okay let's add some more data see add users 5 6 mr 7 early okay z range users 0 to 1 okay these are the scores as well now i want to remove based on the rank so z remove range by rank okay the key would be users and starting in stopping rank my rank starting should be zero i should remove till two zero one and two okay so three values has been removed you can see that we have two values left mri and only so this way we can do different operations on sorted sets in the last tutorial we saw sorted sets now in this tutorial we are going to see what is hyper log log data structure a hyperlog log is a probabilistic data structure used to count unique values these values can be anything for example ip addresses for the visitors of a website search terms or email addresses are the unique count of locations and many things so let's add some data to hyperlog log and we can count and merge the data available inside different hyperlogs now to add the data in the hyperlog log the command is pf add and the key i'm providing hsl and the element suppose i'm adding any value a okay so this way the value is added we can add piping as well we can add multiple values like pfed a already there right b c d e multiple values we can add now what are the values available inside my hl so we can get with pf count and the key you can see that the seven values are available in my hsl let's create one more okay pf head hll2 and let's add numbers in it one two three four five six seven okay we can get the count of that as well pf count hll2 okay this happened now we can get the total count of all the available hyperlogs as well so we can do pf count for hll and hrl2 this will provide the total count for my both the hyperlog logs we can also merge this two or if we have multiple many of them then we can merge them as well too into a new one so pf merge is the command and we need to provide the destination will provide merged hll and we need to merge based on the available which is hll and hll2 so this way both the data has been merged to merge hll you can see merged hli sorry we need to do pf count okay so this is you can see the count of the new one so this way we can use hyperlog logs for counting the sets for the different use case scenario as we saw earlier so in this tutorial we are going to see hashes and radish so hashes is a map of string keys and string values which is a perfect example to store our objects so let's create a hashes the command is edge set and we need to pass the key we are passing my hash and the field name we need to provide field name and providing name and the value as sugar okay you can see that it returned once so data is added let's add one more values let's set my hash email as email domain.com so i've added name in mail into my my hash okay now to get all the keys and values from the hash the command is h keys and key which is my hash okay then it will return all the keys available we have name and email available over here right which we added name and email so it will return all the keys available in my hash so to get all the values we can use h wells command and we will pass my key which is my hash so you'll get all the values which you have added okay so h keys will return all the keys and edge files will return all the values available in the hash as get all command will return all the keys and values available in my hash in radish so we saw three commands to get the values available in the hash as keys as well as an edge get off but we need to check for the particular values available so for that the command is h exists and we need to pass key which is my hash and the field the field is name or email which we have already so we will check with name so it will return 1 when the value is available it will return 0 when the value is not available see if i check with name one which is not there in my hash so it will return zero so this way we can check if the value is present in hash or not we can also check the length of the hash with hln command passing key which is my hash it will return the length so currently i have two elements in my hash so it is returning to suppose i'm adding one more my hash i'm passing age has 25 and if i do h line again it will return three okay now here we can use pipelining as well we can add multiple key values inside my hashes so for that the command is hm set and we need to pass key which is my hash and we can pass key value pass okay suppose i'm passing country as india phone as phone number okay so this way the values will be added the same way we can use hm get command to get multiple values out of the hash the command is hm get we need to pass my hash as a key and we need to pass multiple fields i have name field i have email field and phone you can see that all the values have been written okay the phone is wrong right it should be capital okay so this we can use hm set and hm get to set and get the multiple fields from the hash now suppose i want to increment any of the values in my hash then we can use h incur by command h i n c r by command we need to pass the key which is my hash and the field i have age added to it right you can see i have added age so let's increase the age so i'll add age and increment by 2 so you can see that my age is 27 now okay so this way you can use edge incur by command to increase the values of the hash if you want to increase the values with the floating point data then also we can do with h incur by float command and we need to pass key which is my hash field which is age and increment the value like i'm adding 1.5 years okay so value is 28.5 so this way h incur by float command is used for floating point we can also remove the elements with h del key h del command and we need to pass the key which is my hash and we need to pass field suppose h let's remove the edge you can see it's returning 1 that means the edge is removed we can again check with h exist command with my hash and h it will return 0 okay age has been removed from the hash we can use hstr line command to get the length of any of the values so hstr line we need to pass key which is my hash and we will pass the field suppose i need to check the length of the name okay so it is returning seven shabiri is of seven characters so this way we can use htr line for finding the length of the fields with h set nx command we make sure that we will only add the fields which is not available in my hash so it won't override the fields so for that reason we will use at saturnx command suppose h7x will pass my hash okay we will pass field suppose i'm adding name name is already there i'm just changing the name so this won't add to my hash it will return zero you can see that okay so it will always check if value is available or not if value is not available then only it will add let's add the new value suppose i'm adding last name okay so it will return one and it's been added to my hash so this way we can use h7x command so that's been it in this video in the next tutorial we will see that is transactions in this tutorial we are going to see redis transactions you have already seen that we are executing single single commands in ready cli to get the job done okay but what if we need to execute multiple commands what if we need to execute a bunch of commands in a single go in a single fly considering the advantage of is which is an atomicity all the transactions all the commands which we are executing should be atomic if any error is there then all the commands should not be executed so that can be achieved using status transaction to start a radius transaction you need to specify a multi command once you enter this command you are in a transaction mode so all the commands which you enter from now will be in the queued state and it won't execute until you specify a execute command okay let's check it out we started a transaction we are giving a bunch of commands like set name as shabir okay it's been queued then you can see get name that is also been queued we'll do set as1 set bs2 you can see all the commands are been queued now all this command will be executed in a single transaction when we specify execute command this exec once we fire this command all the commands will be executed you can see that all the commands have been executed so this way a transaction has been created and it's been executed within a single flow suppose you have created a transaction right you are adding some commands get a get c get b any different commands you have been executing okay by the mean time you want to discard the transaction you don't want to execute okay so for that the command is discard if you specify this card then all the transactions all the commands that you have been added to the transaction all will be nullified okay your transactions will be cancelled out so this way you can execute a transaction or a discarded transaction based on the requirements now there is a special command which is watch command if we watch any particular key right if we add a particular key in my watch and then we create a transaction then what will happen a transaction will be executed based on the conditions for that variable which has been added to the watch if there is no change in the key defined in the watch then only the transaction will be completed if there is any change in watch okay at that time the transaction will not be executed and it will return but the change in watch should not be within the current command line or current client if it is coming from a different client at that time only it will check if there is any change in a particular key from any other client if so then the execution will be blocked for the transaction so let's check that out okay let's flush all our data let's set as1 let's open a new window new terminal okay now i'm adding a multi command okay i'm doing set bs to get b okay meanwhile i'm adding watch on a okay watch on he has been added and i'm doing execute command so you can see that i have added watch on a but i haven't changed that key a so for that my current transaction will be executed successfully you can see that i am getting the data in this tutorial we are going to see pub sub in redis so pops up means publisher subscriber model okay so we'll be having a different channels where any of the client can subscribe to it or any other client can publish the messages to it so let's subscribe to couple of channels and within one client we will publish the messages to those channels and we will see how the messages are been displayed so you can see i have three clients open over here for readys from two clients will be subscribing the messages and from one client will be publishing the messages okay so let's subscribe to one channel suppose i'm subscribing to the subscribe command and the name of the channel it's not necessary that channel has to be created before you can directly subscribe to it and later the channel will be created that's also fine so currently there is no channel created i'm just subscribing to news channel okay once you do you can see that it's been ready to read the messages and it will only exit when you do control c or quit the command line or the client let's also subscribe my other client to news as well sub subscribe to news okay so my both the clients has been subscribed to news and let's publish the messages to news now with publish command publish channel name which is news and we need to provide message the message should be any message that you need to do i'm providing new breaking news okay so you can see that it's showing two which is mean it's been sent to two subscribers okay you can see we are getting over here and over here both the places you're getting the data okay we can add multiple messages publish to news new news you can see that data is coming okay now let's change the middle client and change the subscription to multiple channels okay i'm just quitting and again opening ready cli okay and clearing out and i'm subscribing to news as well as broadcast channel so now it's been reading messages from the two channels now publish to broadcast as well publish news n1 okay you can see that it's coming to both if i do publish to broadcast new broadcast okay sorry i did typo right you can see that it's been coming here okay now let's change this first client and change to patent base subscription okay let's close it out again open ready cli okay let's clear it out okay now for pattern based subscription the command is p subscribe okay so here we can give different patterns for the different channels okay there may be multiple channels so to subscribe to those channels we can give patterns over here if the pattern is matching then it will subscribe to those channels and the messages will be read from those channels so for news right instead of news let's add news star okay so that means if there is any multiple news like news one news two news three news hello anything okay then all those channels will be subscribed okay with stars so star is a wildcard character and it can be specified as any of the character let's subscribe to one more which is hello okay suppose i just want to match for the single characters okay like this hello so if we are passing this way then it will be subscribed to hello hello that question mark can be replaced with any single characters over there okay we can also add few of the characters to it if the character is matching then like if i want to match ball and bill okay then i can add this way it should be matching with ball and bill okay so this way particular characters will be matched so this way we can subscribe to multiple channels with patterns you can see that i'm subscribed to this channel now let's add the messages i'm publishing the messages to news channel with hello so you can see that in both of the clients i'm able to receive the messages so new star is working this way now suppose i'm publishing the messages to hello channel with message hello okay you can see that we have added h question mark hello so if you enter this you can see that we are listening to that as well if i publish to h x double l low right so i'm just changing that character and i'm passing that message i'm able to receive the messages for that particular subscription let's check for bill and ball as well let's publish the messages to ball new ball you can see that i'm able to get furball the same way let's check for bill as well you can see that all is working if i add anything else you can see that is returning 0 so it's been not subscribed and no one has been receiving those messages for all so this way we can specify different patterns for the subscription of the channels now let's check some of the pub sub commands okay so pubsub command and the sub commands for channels okay now pub sub channels will return all the channels that have been subscribed which is not a pattern based subscription okay so if you can see that with pub sub channels command i'm getting broadcast and news that means those two channels have been subscribed the rest of the channels are being subscribed based on the patterns so that's why i'm not getting hello or bail or ball okay so pop sub command for channels you will get all the channels the next command is pub sub and num sub so this will define number of subscriptions for that particular channel so if i check for news okay so you can see that it's been returning one so only one client has been subscribed to news channel okay you can see that still my patentbased subscription is not coming over here okay so it will only fetch all the nonpatentbased subscription for the channels so this is your pub sub channels command and pub sub num sub command we can also check number of pattern based subscription with pub sub numpad ok this will return all the pattern based subscription for the channels okay you can see that there are three pattern based channels that have been subscribed you can see that is new star h question mark double hello and bail or ball which has been subscribed so this way we can check all the different pop sub commands all the subscribers available within the different clients for my radish so that's been it in this tutorial in the next tutorial we will see scripts and readys in this tutorial we are going to see scripts in radish most tasks you do in red is involve many steps instead of doing these steps in the language of your application you can do it in side that is with lua this may result in better performance also all the steps within scripts are executed in an atomic way no other radius commands can run while a script is executing so the command is eval and we need to pass scripts so we can pass any of the functions available inside redis library are the lua scripting libraries okay so we'll be using redis library functions that is reddish.call inside that will be passing the commands and the keys and values available so i'm using set and i'll be using keys which we will be passing as an arguments we'll also use argb argument variables which will be passing okay and the number of key value pair is one okay so we'll be providing one if you are not passing anything you can provide zero and you need to pass the key which is name and variable you can see that command is executed you can get the name you can see shabbir has been returning okay now how this works the ul command is what tells redis to run the script which follows by redis dot call which is the internal redis library methods or functions which are available there are multiple lua functions also available for the scripting currently we have here radius.call which have three commands that is set keys of 1 argv of 1 which are string is our scripts which is functionally identical to the radishes set command okay three parameters follows the script text which is the number of provided keys which is one the key name which is name and the first argument which is the shabir value of the key so this way my command is executed we can add we can check one more command by passing multiple values okay so let's add eval with radius.call okay we'll pass that okay let's use amset command to set multiple strings okay and then we'll be using keys of 1 and then argument 1 then keys of 2 argument of 2 so i am using m set command passing key one value one key to value two yeah i need to pass number of keys i'll be using two keys okay for key one and key two then i need to define two keys i'm specifying name as one key and last name as another key now followed by these two we need to pass argument one and argument two so i'm passing shabir and i'm passing the way so this is the command my name and last name are the key 1 and k2 will be replaced in the radius.call function in the same way irg1 and argv2 both arguments will be replaced with shabir and you can see that command has been executed if i check the values get last name you can see that it's coming down okay now let's take up one notch above so i'm executing this command okay which is hm set country capital i am passing bunch of countries and capitals okay india for new delhi u.s usa washington dc russia is a moscow german is berlin japan stockholm and italy's room so this is creating my set with all the country and country capitals detail okay and let's add one more sorted set so i'm creating a sorted set of country and i'm passing three countries italy india and usa with the scores available okay you can see that z range of country zero to minus one so we have three countries india italy and usa now what i want is i want the capitals from my ad set based on the values available in my country sorted set okay so i want all the values like for mightly i want rome for india i want new delhi for usa i want washington dc but i want all the details from that hash for this particular set within the same sequence okay so let's write a script for it so we'll be writing eval okay and we'll start the script we'll be using redis dot call we'll be doing z range for keys we provide okay so whatever set we provide and i want all the values so for 0 to minus 1 all the value okay now let's store all these values in our local variable so i'm creating a local variable order okay i want that in this order so i created this variable now with this order let's get all the data from edge set that is the country cap which we created so we'll be doing return redis.call i'll be needing multiple keys so i'll be using hm get i'll use keys of two i'll pass the second argument as the hash key okay and then what i'll do i'll use the luas function for table that is unpack and then in unpack i'll pass my local variable which is order okay and then i'll specify number of keys which is 2 and then i'll pass key 1 my key 1 should be country right because my country is my set so i need to pass set over here and for key 2 it should be country cap ok you can see that i got all the details rome new delhi and washington dc for italy india and usa with the same sequence based on the values of the hash and sorted side okay so this way we can use different scripts available this is just the gist of the lower scripts which we can use in redis there is a lot more we can do you can for sure go to the lua's website and you can learn the lua scripts and you can use android is now let's do one more thing now to rather than writing entire script over here right we can store that script and we can execute those scripts okay so let's do that okay so this is my entire script from here to here right now let's load the script okay script load command and this value you can see that once we load the script we will be getting a hash value okay so entire script is stored in this hash so we can evaluate with this to execute this hash scripts we need to use eval sha command okay after that we need to pass the shaky and then we need to pass the arguments so previously we passed to country and country cap okay so same we can pass over here my key is two i have two keys available so and the first key should be country and the second should be country cap okay i'm getting the same results over here okay i can also check if my script is available for the particular hash available okay this is my hash so let's check if script is available currently we have the script so it will be available so the command script exist and we need to pass hash so you can see it's returning one so the script is available with the script flush command all my scripts will be flushed out you can see okay now if i check again if script is exist or not then it will return zero my script has been deleted so this way we can use scripts in readings we can load the different scripts we can remove it we can check if existence is there or not we can create the entire lua scripts as well and we can entirely run those rua files as well so i recommend only using scripts when you can prove that it results in better performance so always run benchmarks first for the scripts also your script shouldn't be too long remember that while a script is running everything else is waiting for it to finish so if your script takes quite some time it can cause bottlenecks instead of improving performance and the script stops running reaching the timeout so the default timeout is for five seconds okay so that's been it for the scripts and readys in the next tutorial we will see connections and security in the last video we saw about scripting and release in this tutorial we are going to see connections and security in redis so once you're connected to your redis client is your connection is successful or not to check that you can use a ping command okay once the connection is successful server will return you pawn okay it's a nice game so you can play ping pong with redis client we can add the messages as well with echo command with any of the message it will be displayed in the client okay so in redis there is a concept for databases there will be different databases available the default database when a client is started then it's assigned as 0. to select that the command is select to select any of the database and we need to provide the index of the database default will be always zero so you can see that when you do again select zero it will return okay your zeroth database will be added if you want to change the database you can add select one then it will change to the newer index database you can always switch and forth between them despite of different databases available all the data are persisted into a single rdb or aof file in the radish okay in a single node architecture if there is a clusters available if your radius is configured in a cluster then by default every time your database will be zeroth index you cannot change it at that particular time so this is only available when you are running on a single node and the main important part is when you are switching between the databases when you are using select zero or select one with either zero or one databases then your keys will be unique to each of your database so if you are adding one key to database 0 then that particular key won't be available to database 1. if it's there then value if you're adding to it it may be different so let's check it out so currently i mean select zero so i'm adding set name as shabir okay you can see that get name is available for shabbir now let's switch it to index one okay database one and then if i do get name you can see that it's returning nil okay so that means it's not affecting to my the select zero database let's set this value over here set name to the audi if i again check that name it is and if i check the same name again in 0 database changing back to zero index and checking the name you can see that both the values are different one is now the and one is shabby in both the zero and one database so in the ready server multiple redis clients will be connected to the redis server so what are all the clients available you can check by the command client list okay so this will return all the clients which have been listed over here you can see that all the informations are available their id their address their name their agent all the different things are available currently i have only one client enabled so that's why only one entry is coming if multiple clients are available multiple entries will come okay you can also set the name of the client you can see that currently the name is nalovaya so we can set the name as well so let's add client set name as this terminal you can see that the name is set you can also get with client get name that particular name okay now when we check for client list again okay at the time you can see that that name value is coming for the listed clients so this way we can identify which client has been active and which client we need to kill or any other operations if you want to do for the particular client if you want to kill those clients we can use the kill command to kill the clients okay the command is client kill and we can kill based on the id so we need to provide id and the id which is your 17 okay and if you want to do by address then you need to pass the address which is over here to kill that client i'm passing 17 over here you can see that okay currently i'm running in this so it won't be deleted let's clear it out so this way we can use different client keys as well over here now coming to security we can define the password for the clients to login to your server okay so for that we need to check the configuration we need to change the configuration for it so let's change the configuration for storing the password we'll do config set require pass okay so this is the require pass is the configuration for setting the password here we need to set any of the password so let's set submit one two three okay so you can see that password is set so once the password is set now you cannot execute any of the command without authenticating to your client okay if i open any new terminal okay and i do get name you can see that error is coming north authentication required so unless you are authenticated you cannot execute commands over here so to authenticate you need to use auth command auth and you need to give password so the password we set was submit one two three right submit one two three so once you are authenticated then you can check your commands will be executed properly so this way you can use authentication to connect to your radius clients as well so that's it in this video for connections and securities in radish in this tutorial we are going to see geospatial commands so in geospatial command what we store is we store a location information we store lat long details of any of the particular location we say lat long but if you are aware of all the geometrical aspects or geography then the details which have been expressed is longitude and then latitude x and y axis okay so we'll be storing the data as longitudes and latitudes so how reddish stores all these information so that it stores all this data in a sorted set but if you remember that in our previous tutorials we saw that sorted sets to store the data we specify scores okay based on this course data has been added so here the scores has been added based on the jio hash generated based on the latitude and longitude information which we provide so it generates a 52bit integer value based on that the jio hash is generated jio hash will be a unique value based on that location based on that data has been stored into the sorted sides okay and the model here is used as a spherical model the earth which has been modelized in radius is a sphere okay so all the data which we are storing will have a prone to 0.5 percent of errors so make sure of that while using that is in your application for geospatial data so let's start adding locations into our radish the command here to add the information of latitude and is geoad okay geo add and then you need to specify the key suppose i'm specifying key as maps okay and then you need to provide longitude and latitude information okay so here are my latitude and longitude information uh so this is the city ahmedabad so i'm storing the information longitude and latitude of i'm the birth city you can see that the data has been entered now let's add some more data for different cities okay we can use pipelining also over here when adding location data okay so this is the command jio add maps using the same key and i'm adding the longitude and latitude for mumbai and the same for bangalore okay so you can see that i have added the data let's check the data now to get the data right you can use all these similar sorted set commands okay because pin functions are stored in sorted sets so we'll see the range maps and we'll provide the start and end index you can see that bangalore mumbai nam nabat is added to it now i told you right in the starting that all the information are stored based on the jio hash values okay so uh let's check the geohash values for the sorted elements to check the geo hash values we can see with command jio hash okay and we need to specify the key which is maps and you need to specify the member for which member you need to see that suppose i want to see for ahmadabad okay you can see that this is the hash key which is been generated now if you are not aware of what jio hash means then you can go to wikipedia and check on geo there is also a website called geohash.org that will take jio hash value as an input and it and it will show the location information i can show you that as well you can see your hash.org if you go okay if i specify here my geo hash value then you can see and the bar is being shown over here okay so this way you can check the geohash values and the coordinates for it okay now getting back to business now we stored our values we got the jio h values as well okay but what about getting back the values okay so the command to get the values like my longitude and latitude value okay the command is geopos okay and you need to specify maps that is a key and you need to specify the member okay that will return your longitude and latitude values which you specified now you can see that the values which we're getting here is different than what we have stored right because i told you that earlier it converts into a 52bit integer and then it's storing these values okay so there might be a point five percent of error so these are the values being stored you can get this information from here as well now we store three locations okay let's add one more location okay i'm adding pune as well giving longitude and latitudes for that as well now if you see my data i have four locations okay i have added my latitude longitudes now i want to find the distance between those two locations okay that the command to get the distance between two location is geodest okay geodes command and then you need to specify your key and you need to specify the members you can only get distance between two members only not more than that so suppose i want to get the distance between mumbai and pune okay mumbai and okay so you can see that you're getting the distance over here the default unit for the geodest is meters so you're getting this in meters okay now if you want in specific units you can specify it if you want in kilometers okay so this is the information in kilometers so there is 120 kilometers of distance between mumbai and pune if you want you can get in miles as well with mi okay so this is the distance between the two cities in mice you can get in meters as well okay so this way you can find the distance between two cities you can specify for others as well you can specify for mumbai and ahmedabad in kilometers okay you can see that it's 441 kilometers now be sure that there might be some of you who will be specifying okay the distance between two cities is not that which you are getting in google maps it won't be because the distance between the two cities which has been calculated by radius is based on the two points so it will be a straight line between the two points and the straight line will be based on the sphere model okay so the distance is calculated on this sphere model between the two points with a straight line so that's how radius calculates the distance between the two locations now i got the distance now i want to find the locations around a particular point okay suppose we can take a scenario like i want to find the restaurants nearby okay so i have my current positions i have all the positions of restaurants as well so i want all the restaurants nearby area suppose 200 meters or maybe 50 meters okay or maybe all the restaurants in the city so all these informations i can get with the help of jio radius command i have all the information stored okay you can see i've just stored informations of map you can store all the information for all the particular restaurants all the different use cases what you have so yeah what we'll do we will find the cities specified to the location okay within this location within the radius of this location how many cities i'm getting so that information will find out with your radius command okay your radius command and then i need to specify the key which is maps then i need to specify the longitude and latitude information okay suppose i want to find nearby series for that particular radius from am the ball so suppose i will give the latitude and longitude for amdapad and then i can specify the radius value so within how many kilometers or meters or feet or miles you can see all the information you can provide so i want all the cities within 500 kilometers okay so i'm getting two cities which is amdabad and mumbai and the bath would be zero zero kilometers for sure and mumbai would be you can see it will be 441 kilometers so all these informations you are getting from here if i change my kilometers okay supposed to 1000 kilometers you can see that i'm getting more data pune is also included in it okay the same way you can calculate in miles as well okay within thousand miles of radius you can see within thousand miles of radius all the information all the cities are being included bangalore mumbai ponem daba okay now there are some more keys also we can specify we can get all the coordinates as well with r and we can get distance as well okay so for that we need to pass with with coord right so you can see that we'll get the coordinates information as well for mdhaba these are the coordinates for bangalore these are the coordinates for mumbai and pune accordingly okay if you want coordinates as well as distance also okay so you need to specify with a dist so you can get the distance as well for amdava this is this is 0.0001 mile the same for bangalore mumbai and pune all the information you can get now there is also one command to get with hash okay so there is one catch over here okay if you do with hash and hoping okay you will get that jio hash value okay and you're out of your luck because radius doesn't store that information so this value would be your 52bit integer that has been stored for the sorted cell right that value it will be you can see that that integer will be this not your jio hash values okay so for getting gi values you are with geohash commands only good luck with that so this way you can get the informations based on the longitude and latitude for your particular location but what if you want to get data within the radius based on the members which you have already in your key okay so for that the command is let's clear it out everything first okay so for that the command is jio radius by member okay your radius by member is a command then you need to specify the key which is maps and then you need to specify a member suppose okay so my point starting point is amdabath and within that mdhabat i want a radius and that information i want i want radius of 500 kilometers okay and then you can see that you will get the information based on the member values you can always specify more information so this information you will get up to feeds level okay you can specify feet meters kilometers and miles so within the area and within the use case what you have you can get the information based on this geospatial commands here as well in geo reduce by member you can specify with chords with dist and with hash values and with this you can also specify how data you want okay by ascending order or by descending order so you can specify the esc to get data in descending orders with the maximum value first so bangalore is the farthest from ahmedabad followed by pune mumbai and you can change to ascending order as well to get data from the nearest to the um followed by mumbai pune and bangalore so these are the details of all the command that you can use to store your geospatial or geographical values and you can perform your operations and you can use in your use cases so that's been it in this video for geospatial commands and readys in the last tutorial we saw geospatial commands and radius in this tutorial we'll be seeing reddish benchmarking we are in home stretch now benchmarking is very important thing whenever we decide to use a new technology or use new tool then how the tool or technology is performing for our application or for our use cases that will play a huge role in going ahead with that technology or tools okay here redis provides an inbuilt tool that is redis benchmark to benchmark how radius will perform on our server or how it will perform on our single node or a cluster so that way we can get our expectations clear how reds will be performing and we can optimize it or we can check if new nodes or new servers would be needed to get the desired performance in our application or not so let's check how we can do benchmarking in redis one protip yeah till now you have seen that we are connecting to that is cli with our only ready cli command so we are connecting to just our local host which we have installed in our machine but what if you want to connect to any of the server okay so for that we need to specify the host name or the ip address and the port number so the command would be redis cli and then we need to pass host number that would be i'm connecting i'm still connecting to my local or so i need to pass my localhost url which is my localhost type is 127.0.0.1 and then we need to pass the port number so my redis was working on port number 637 and which is the default port for rides okay so this way you can connect to any of the remote ready servers okay you can see that i have connected to redis now so let's cancel it out and go with the benchmarkings okay for the benchmarkings also the same thing if you're running on your local system on your system where the redis is installed you can directly go ahead with redis hyphen benchmark command you don't have to specify any of the parameters but if you are running on any of the servers then you need to specify your ipn port number with hyphen h and hyphen p parameters okay so let's do redis benchmark okay now we need to specify some of the parameters how we need to do benchmarking with what number of data with what number of lines and all the different informations so if you don't specify anything at that time it will french benchmark on all the different commands available with 50 clients and three bytes of data default okay but i need to specify for maybe thousand commands okay so i need to specify hyphen n and i'll specify thousand so it will run on 1000 commands so you can see that benchmarking is completed okay so it's running on 1000 commands you can see 1000 operations with 50 parallel clients and three bytes of payload okay you can see all the different informations for set command how much time it took okay 31 250 requests per second it can perform okay with three bytes of data the same way you can check for get and all the different information okay let's clear it out again now you saw right we had only three bytes of data suppose i want to run the command for more data okay so for that i need to pass the data information that is hyphen d then i need to specify the size okay i'm specifying 100 kb so what it will run now is benchmarking will run four thousand commands with 100 kb of data so you can see that all the operations have been running for help push or push all the different commands it will check how it's behaving okay it's set and all different informations have been loading up so this way you can check the benchmarking for a system let me cancel it for now okay and then check how it was behaving if we scroll it up you can see that oh boy so much information right yeah you can see that thousand request completed in 0.03 seconds and it is showing 50 parallel clients and how much period it is okay we change the payload from 3 bytes 200 kb so accordingly you can get the value right it will take around 830 request per second for setting the data 800 788 for getting the data for incrementing your values 344.82 requests per second and all the different information you will get and accordingly we can get the idea how redis is performing okay let's clear it out all the details okay so this way we gave this information and we saw that the default lines were 50. now if you want to change the clients right then we need to specify hyphen c command and then we can specify how much client we need to check you can see that we specified 200 clients okay so it's running on it will turn on 200 lines so again it will show the same informations how much number of requests has been served per second you
