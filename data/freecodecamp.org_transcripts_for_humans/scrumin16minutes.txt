With timestamps:

00:00 - [Music]
00:06 - according to the scrum guide scrum is a
00:09 - framework for developing delivering and
00:11 - sustaining complex products scrum is a
00:16 - collection of roles events artifacts and
00:19 - rules that help teams work together more
00:22 - effectively and harmoniously it's been
00:26 - in wide use for over 20 years in a
00:29 - variety of industries ranging from
00:31 - software development where it is best
00:33 - known to harbor development marketing
00:35 - and even nonprofits because scrum is
00:39 - highly compatible with the agile values
00:42 - and principles practitioners considered
00:44 - to be an agile framework along with lean
00:47 - Kanban XP and many others so let's start
00:52 - with our company's vision our mission
00:55 - this is why we show up to work every day
00:57 - right if you're in a bigger company you
01:00 - might have multiple products each with
01:02 - their own vision either way you've got a
01:05 - sense of where you want your company or
01:08 - product to be over the course of the
01:10 - next one to three years or so personally
01:14 - I think it's useful to write visions
01:16 - from your customers perspective one
01:18 - company vision statement that I really
01:20 - like is Amazon's our vision is to be
01:24 - earth's most customer centric company to
01:28 - build a place where people can come to
01:29 - find and discover anything they might
01:32 - want to buy online
01:34 - compare this to a vision statement like
01:36 - were the biggest online retailer in the
01:39 - world another way of thinking of it is
01:42 - this your vision statement reflects your
01:45 - big impact on the world the value that
01:48 - we wouldn't have if your company didn't
01:51 - exist to use Steve's jobs terminology
01:54 - it's your dent in the universe your
01:58 - vision should be succinctly stated right
02:01 - size and scope and realistic enough
02:03 - given your current and likely future
02:06 - capabilities visions help us understand
02:09 - the strategy while having a roadmap
02:11 - helps us understand or tack
02:13 - and desire timing while a vision helps
02:16 - us understand where we want to be in a
02:18 - few years a world map projects what will
02:20 - we be doing over the next three to four
02:22 - quarters but either way your roadmap is
02:25 - still just a wish list basically
02:27 - information that you have available to
02:29 - you now it will almost certainly change
02:32 - over the course of the next several
02:34 - months if it doesn't this should be a
02:37 - huge red flag that you're not
02:38 - incorporating enough feedback from your
02:41 - users quickly enough one of the biggest
02:45 - ways a technology company creates
02:47 - positive user outcomes is to output
02:50 - reliable working software notice there's
02:53 - a difference between output and outcomes
02:56 - you probably need some working software
02:59 - to get positive outcomes for your users
03:01 - but there's no guarantee that a
03:03 - particular set of outputs will produce
03:06 - the desired outcomes working software is
03:09 - just half the battle if you want to keep
03:12 - building working software quickly in the
03:14 - future and keep your customers happy
03:16 - you're going to need to make sure you've
03:18 - built the software well agile teams use
03:21 - a definition of done to help them
03:24 - determine whether or not their software
03:26 - meets their quality bar it's a
03:29 - documented team agreement that specifies
03:31 - the conditions that must be met such as
03:34 - automated testing and scalability before
03:37 - the team calls a piece of work done
03:39 - isn't done this helps protect the team
03:42 - from building up costly technical debt
03:46 - okay so over what time horizon two teams
03:50 - do work scrum teams complete work in one
03:53 - to four week cycle is known as
03:55 - iterations or sprints the team expects
03:59 - to create a done demonstrable and
04:02 - potentially shippable product increment
04:05 - based on my experience coaching dozens
04:08 - of teams I now suggest one to two weeks
04:10 - Sprint's three to four week Sprint's
04:13 - don't allow teams to iterate quickly
04:15 - enough and allow for nasty anti patterns
04:19 - to creep in what work will they complete
04:22 - in that sprint the team will refer to a
04:24 - sprint backlog
04:26 - prioritize lists of the most valuable
04:28 - work that is ready for the team to work
04:30 - on now the team doesn't strictly
04:33 - guarantee they'll they'll get all of
04:35 - this work done it's just a forecast
04:38 - healthy team should be able to fully
04:40 - complete somewhere between 85 percent
04:42 - and a hundred and fifteen percent of
04:44 - what they planned on let's take a moment
04:47 - for an important discussion why do we
04:51 - say that this is a forecast instead of a
04:53 - commitment it turns out that the
04:55 - official scrum guide used to say
04:57 - commitment but they change it in 2011
05:00 - because quote reality keeps on showing
05:03 - us that it is difficult if not
05:05 - impossible to always fulfill this
05:08 - self-imposed commitment without making
05:10 - compromises to quality on the other hand
05:14 - the chosen alternative forecast has to
05:17 - do with making assumptions based on
05:18 - reliable information and evidence this
05:22 - is much closer to how an experienced
05:24 - scrum team works that said the team
05:28 - should feel comfortable committing to
05:30 - the Sprint goal which would be written
05:32 - in such a way that it can be
05:34 - accomplished even if not all the items
05:36 - in the sprint backlog are completed
05:39 - where does a team get the work for the
05:41 - Sprint backlog they get it from the
05:44 - product backlog a prioritized list of
05:46 - work that the team intends to work on
05:49 - from now to the medium term future
05:52 - product backlogs contain every piece of
05:54 - work your team plans to work on work
05:58 - that you plan to do in the next sprint
05:59 - or two will be granular and captured
06:02 - with detailed acceptance criteria while
06:05 - work that you don't plan on doing for
06:06 - another several months will be less
06:08 - granular it should have just highlights
06:10 - of what you hope to accomplish by the
06:14 - way the official scrum guide calls us a
06:16 - product backlog but I think team backlog
06:19 - is more accurate this is because a
06:22 - single team may be working on multiple
06:24 - products but should only work from one
06:27 - backlog notice how some of the work on
06:30 - your product backlog will be ready to
06:33 - work on while some isn't how do we
06:36 - prevent items from making it onto the
06:37 - sprint backlog before they're ready
06:40 - we use a definition of ready a document
06:43 - a team agreement that specifies the
06:45 - conditions that must be met such as
06:48 - being the right size and having clearly
06:50 - articulated acceptance criteria the team
06:53 - understands before the team pulls the
06:56 - item into the sprint backlog so who are
07:00 - all the people doing all of this work
07:02 - first we have the product owner they are
07:06 - responsible for maximizing the outcomes
07:08 - and impact from any given set of output
07:10 - that a team might produce what this
07:13 - means is that two development teams may
07:15 - write the same amount of software but
07:18 - the saucier that one team produces could
07:19 - be far more valuable to users that team
07:22 - probably had a more experienced and
07:24 - empowered product owner this individual
07:27 - has an incredibly important role and
07:29 - they need to be fully enabled by their
07:31 - organization to set the product
07:32 - direction in a nutshell the product
07:36 - owner is responsible for what and why
07:38 - what we're building and why we're
07:41 - building it next we have the entire
07:45 - cross-functional development team some
07:48 - companies think that just software
07:49 - developers blame belong in the
07:51 - development team but I think that's
07:53 - short-sighted I found that teams are far
07:56 - more functional when a wider breadth of
07:57 - skillsets such as user experience
08:00 - Quality Assurance and operations are
08:02 - also on the team just as product owners
08:05 - must be empowered to decide what to work
08:07 - on the development team must be
08:09 - empowered to determine how and when how
08:12 - we will meet the desire to use your
08:14 - outcomes and when it will be potentially
08:16 - releasable you've probably figured out
08:19 - that the product owner has a need for
08:21 - speed while the development team has a
08:23 - real need for quality they're both right
08:27 - who keeps all this in balance that's
08:30 - right the scrum master the scrum master
08:33 - is responsible for coaching both the
08:35 - product owner and the development team
08:37 - on effective scrum they teach and
08:40 - reinforce scrums
08:41 - values principles and practices they are
08:45 - a servant leader for the product owner
08:47 - development team and broader
08:49 - organization so how do we make work
08:53 - ready to work on once or twice a week
08:56 - the whole team gets together product
08:58 - owner scrum master and development team
09:01 - and reviews and refines the product
09:03 - backlog together we call this event
09:05 - backlog refinement though some people
09:08 - might refer to it as backlog grooming
09:10 - although this isn't an official scrum
09:13 - event I see it in most implementations
09:15 - the product owner brings up user stories
09:18 - and begins a clarifying conversation
09:20 - with the team to improve the quality of
09:23 - each user story for instance suppose the
09:27 - product owner says that they would like
09:28 - a cup of hot coffee a member of the
09:31 - development team might ask how hot is
09:33 - hot after a brief conversation they'll
09:37 - decide on a more objective measurement
09:39 - of temperature and update the user story
09:41 - our goal will be had to have one and a
09:44 - half to two Sprint's worth of ready
09:47 - stories by the time we start our next
09:49 - sprint the Sprint itself begins with
09:52 - sprint planning the purpose of sprint
09:55 - planning is to a determine what can be
09:57 - most likely to delivered in the next
10:00 - sprint and be come up with a high-level
10:02 - plan for how that work will be
10:05 - accomplished only the development team
10:08 - can decide what it can accomplish over
10:10 - the upcoming sprint they will do this by
10:13 - considering the work completed and left
10:15 - incomplete from the prior sprint the
10:17 - team's capacity at this sprint and the
10:20 - team's historical performance teams
10:23 - often overcome it either due to pressure
10:26 - from the product owner or naive optimism
10:28 - the scrum master will discourage this
10:31 - with effective coaching having
10:34 - determined a reasonable sprint backlog
10:36 - the development team decides together
10:38 - how we'll complete the work this sprint
10:41 - most teams decomposed user stories bugs
10:44 - and other product backlog items into
10:47 - more granular tasks generally taking a
10:50 - day or less this is effective because
10:53 - the high-level design of the software
10:54 - occurs in a high bandwidth facilitated
10:58 - event with all subject matter experts
11:01 - present now the team has kicked off
11:04 - their sprint they will check in with
11:06 - each other
11:07 - every day in an event called the daily
11:09 - scrum or daily stand-up this is a 15
11:13 - minute time box event that allows a
11:16 - development team to synchronize their
11:18 - work and plan for the next 24 hours
11:20 - it's how the same time in place every
11:24 - day during the daily scrum each
11:27 - development team member typically
11:29 - answers three questions what did I you
11:32 - yesterday that will help our team meet
11:35 - our sprint goal what will I do today
11:38 - that will help our team meet our
11:40 - sprinkle and do I see any impediments or
11:44 - blockers that will prevent me or the
11:46 - team from meeting our sprinkle many
11:50 - teens will also use this opportunity to
11:52 - review the quantity of remaining work
11:55 - and come up with a mitigation strategy
11:57 - if the team isn't on track to meet their
12:00 - sprint goal at the end of the Sprint the
12:03 - team will demonstrate their work to
12:05 - customers and other stakeholders and an
12:08 - event called Sprint review or the Sprint
12:10 - demo at a minimum the team will
12:13 - demonstrate completed work solicit
12:15 - feedback and answer questions teams will
12:18 - also often discuss the current product
12:21 - backlog recent developments that may
12:23 - justify a plan change and any notable
12:26 - metrics finally this break concludes
12:29 - with a retrospective this is when the
12:31 - whole team inspects his own performance
12:33 - and creates an improvement plan for the
12:36 - next sprint it occurs after the review
12:38 - and before the next Sprint planning
12:40 - event together the team will inspect how
12:44 - the Sprint went in terms of team culture
12:46 - structure processes and tools from there
12:51 - it can identify major opportunities to
12:53 - persist what went well and change what
12:56 - didn't lastly the team will come up with
13:00 - a plan for continued self-improvement
13:02 - usually through actions experiments or
13:05 - changes in team behavior for the next
13:08 - sprint now there's a few rules that
13:11 - aren't part of official scrum but we can
13:14 - find them in nearly every organization
13:16 - first we have our stakeholders they are
13:20 - in
13:21 - our best proxy for an customers and
13:24 - users it's tempting for a stakeholder to
13:27 - attempt to exert undue influence over
13:29 - the team to prioritize their specific
13:32 - request some companies might even create
13:35 - incentive structures that don't reflect
13:36 - reality such as having several
13:38 - stakeholders whose bonuses all depend on
13:42 - getting a feature shipped this quarter
13:44 - even if the team can deliver only one a
13:47 - good product owner can effectively work
13:50 - through conflicts between stakeholders
13:52 - and create a roadmap in team backlog
13:55 - that maximizes value for the whole
13:58 - company next we have our managers
14:02 - everyone from engineering managers to
14:04 - product directors as teams move to
14:06 - becoming highly autonomous and
14:08 - self-organizing to describe the
14:10 - traditional command and control role of
14:12 - managers must be abandoned in favour of
14:15 - true servant leadership this change can
14:19 - be extremely difficult for many managers
14:21 - in fact it requires a much greater
14:23 - degree of psychosocial maturity and
14:25 - emotional intelligence a skillful agile
14:29 - coach or scrum master if empowered can
14:31 - help managers make this transition which
14:35 - leaves us last with our executives which
14:37 - covers almost everyone with a chief role
14:40 - as well as everyone on the board
14:42 - these individuals are far and away the
14:44 - single greatest factor and whether or
14:47 - not any agile transformation will be
14:50 - successful they define the company's
14:52 - culture through the behavior that they
14:54 - exhibit and promote literally a leader
14:57 - such as an engineering manager cannot
15:00 - create safety and autonomy for their
15:02 - teams if they do not feel safe under
15:05 - their leaders as well if we promote a
15:08 - manager with a habit of barking command
15:10 - to control orders all the feel-good
15:13 - culture events and posters won't foster
15:16 - development of true servant leadership
15:18 - so we talked about the fundamental roles
15:21 - artifacts and events that you'll find in
15:24 - an organization as practicing scrum well
15:27 - what's the end result let's suppose we
15:30 - create the right culture build an
15:32 - effective organizational structure and
15:34 - let teams to find the processes and
15:37 - tools that work best for them
15:38 - after practicing textbook scrum long
15:41 - enough to fully internalize it what do
15:44 - we get we create an environment where
15:46 - everyone feels empowered to creatively
15:50 - solve the problems thanks for listening
15:56 - [Music]

Cleaned transcript:

according to the scrum guide scrum is a framework for developing delivering and sustaining complex products scrum is a collection of roles events artifacts and rules that help teams work together more effectively and harmoniously it's been in wide use for over 20 years in a variety of industries ranging from software development where it is best known to harbor development marketing and even nonprofits because scrum is highly compatible with the agile values and principles practitioners considered to be an agile framework along with lean Kanban XP and many others so let's start with our company's vision our mission this is why we show up to work every day right if you're in a bigger company you might have multiple products each with their own vision either way you've got a sense of where you want your company or product to be over the course of the next one to three years or so personally I think it's useful to write visions from your customers perspective one company vision statement that I really like is Amazon's our vision is to be earth's most customer centric company to build a place where people can come to find and discover anything they might want to buy online compare this to a vision statement like were the biggest online retailer in the world another way of thinking of it is this your vision statement reflects your big impact on the world the value that we wouldn't have if your company didn't exist to use Steve's jobs terminology it's your dent in the universe your vision should be succinctly stated right size and scope and realistic enough given your current and likely future capabilities visions help us understand the strategy while having a roadmap helps us understand or tack and desire timing while a vision helps us understand where we want to be in a few years a world map projects what will we be doing over the next three to four quarters but either way your roadmap is still just a wish list basically information that you have available to you now it will almost certainly change over the course of the next several months if it doesn't this should be a huge red flag that you're not incorporating enough feedback from your users quickly enough one of the biggest ways a technology company creates positive user outcomes is to output reliable working software notice there's a difference between output and outcomes you probably need some working software to get positive outcomes for your users but there's no guarantee that a particular set of outputs will produce the desired outcomes working software is just half the battle if you want to keep building working software quickly in the future and keep your customers happy you're going to need to make sure you've built the software well agile teams use a definition of done to help them determine whether or not their software meets their quality bar it's a documented team agreement that specifies the conditions that must be met such as automated testing and scalability before the team calls a piece of work done isn't done this helps protect the team from building up costly technical debt okay so over what time horizon two teams do work scrum teams complete work in one to four week cycle is known as iterations or sprints the team expects to create a done demonstrable and potentially shippable product increment based on my experience coaching dozens of teams I now suggest one to two weeks Sprint's three to four week Sprint's don't allow teams to iterate quickly enough and allow for nasty anti patterns to creep in what work will they complete in that sprint the team will refer to a sprint backlog prioritize lists of the most valuable work that is ready for the team to work on now the team doesn't strictly guarantee they'll they'll get all of this work done it's just a forecast healthy team should be able to fully complete somewhere between 85 percent and a hundred and fifteen percent of what they planned on let's take a moment for an important discussion why do we say that this is a forecast instead of a commitment it turns out that the official scrum guide used to say commitment but they change it in 2011 because quote reality keeps on showing us that it is difficult if not impossible to always fulfill this selfimposed commitment without making compromises to quality on the other hand the chosen alternative forecast has to do with making assumptions based on reliable information and evidence this is much closer to how an experienced scrum team works that said the team should feel comfortable committing to the Sprint goal which would be written in such a way that it can be accomplished even if not all the items in the sprint backlog are completed where does a team get the work for the Sprint backlog they get it from the product backlog a prioritized list of work that the team intends to work on from now to the medium term future product backlogs contain every piece of work your team plans to work on work that you plan to do in the next sprint or two will be granular and captured with detailed acceptance criteria while work that you don't plan on doing for another several months will be less granular it should have just highlights of what you hope to accomplish by the way the official scrum guide calls us a product backlog but I think team backlog is more accurate this is because a single team may be working on multiple products but should only work from one backlog notice how some of the work on your product backlog will be ready to work on while some isn't how do we prevent items from making it onto the sprint backlog before they're ready we use a definition of ready a document a team agreement that specifies the conditions that must be met such as being the right size and having clearly articulated acceptance criteria the team understands before the team pulls the item into the sprint backlog so who are all the people doing all of this work first we have the product owner they are responsible for maximizing the outcomes and impact from any given set of output that a team might produce what this means is that two development teams may write the same amount of software but the saucier that one team produces could be far more valuable to users that team probably had a more experienced and empowered product owner this individual has an incredibly important role and they need to be fully enabled by their organization to set the product direction in a nutshell the product owner is responsible for what and why what we're building and why we're building it next we have the entire crossfunctional development team some companies think that just software developers blame belong in the development team but I think that's shortsighted I found that teams are far more functional when a wider breadth of skillsets such as user experience Quality Assurance and operations are also on the team just as product owners must be empowered to decide what to work on the development team must be empowered to determine how and when how we will meet the desire to use your outcomes and when it will be potentially releasable you've probably figured out that the product owner has a need for speed while the development team has a real need for quality they're both right who keeps all this in balance that's right the scrum master the scrum master is responsible for coaching both the product owner and the development team on effective scrum they teach and reinforce scrums values principles and practices they are a servant leader for the product owner development team and broader organization so how do we make work ready to work on once or twice a week the whole team gets together product owner scrum master and development team and reviews and refines the product backlog together we call this event backlog refinement though some people might refer to it as backlog grooming although this isn't an official scrum event I see it in most implementations the product owner brings up user stories and begins a clarifying conversation with the team to improve the quality of each user story for instance suppose the product owner says that they would like a cup of hot coffee a member of the development team might ask how hot is hot after a brief conversation they'll decide on a more objective measurement of temperature and update the user story our goal will be had to have one and a half to two Sprint's worth of ready stories by the time we start our next sprint the Sprint itself begins with sprint planning the purpose of sprint planning is to a determine what can be most likely to delivered in the next sprint and be come up with a highlevel plan for how that work will be accomplished only the development team can decide what it can accomplish over the upcoming sprint they will do this by considering the work completed and left incomplete from the prior sprint the team's capacity at this sprint and the team's historical performance teams often overcome it either due to pressure from the product owner or naive optimism the scrum master will discourage this with effective coaching having determined a reasonable sprint backlog the development team decides together how we'll complete the work this sprint most teams decomposed user stories bugs and other product backlog items into more granular tasks generally taking a day or less this is effective because the highlevel design of the software occurs in a high bandwidth facilitated event with all subject matter experts present now the team has kicked off their sprint they will check in with each other every day in an event called the daily scrum or daily standup this is a 15 minute time box event that allows a development team to synchronize their work and plan for the next 24 hours it's how the same time in place every day during the daily scrum each development team member typically answers three questions what did I you yesterday that will help our team meet our sprint goal what will I do today that will help our team meet our sprinkle and do I see any impediments or blockers that will prevent me or the team from meeting our sprinkle many teens will also use this opportunity to review the quantity of remaining work and come up with a mitigation strategy if the team isn't on track to meet their sprint goal at the end of the Sprint the team will demonstrate their work to customers and other stakeholders and an event called Sprint review or the Sprint demo at a minimum the team will demonstrate completed work solicit feedback and answer questions teams will also often discuss the current product backlog recent developments that may justify a plan change and any notable metrics finally this break concludes with a retrospective this is when the whole team inspects his own performance and creates an improvement plan for the next sprint it occurs after the review and before the next Sprint planning event together the team will inspect how the Sprint went in terms of team culture structure processes and tools from there it can identify major opportunities to persist what went well and change what didn't lastly the team will come up with a plan for continued selfimprovement usually through actions experiments or changes in team behavior for the next sprint now there's a few rules that aren't part of official scrum but we can find them in nearly every organization first we have our stakeholders they are in our best proxy for an customers and users it's tempting for a stakeholder to attempt to exert undue influence over the team to prioritize their specific request some companies might even create incentive structures that don't reflect reality such as having several stakeholders whose bonuses all depend on getting a feature shipped this quarter even if the team can deliver only one a good product owner can effectively work through conflicts between stakeholders and create a roadmap in team backlog that maximizes value for the whole company next we have our managers everyone from engineering managers to product directors as teams move to becoming highly autonomous and selforganizing to describe the traditional command and control role of managers must be abandoned in favour of true servant leadership this change can be extremely difficult for many managers in fact it requires a much greater degree of psychosocial maturity and emotional intelligence a skillful agile coach or scrum master if empowered can help managers make this transition which leaves us last with our executives which covers almost everyone with a chief role as well as everyone on the board these individuals are far and away the single greatest factor and whether or not any agile transformation will be successful they define the company's culture through the behavior that they exhibit and promote literally a leader such as an engineering manager cannot create safety and autonomy for their teams if they do not feel safe under their leaders as well if we promote a manager with a habit of barking command to control orders all the feelgood culture events and posters won't foster development of true servant leadership so we talked about the fundamental roles artifacts and events that you'll find in an organization as practicing scrum well what's the end result let's suppose we create the right culture build an effective organizational structure and let teams to find the processes and tools that work best for them after practicing textbook scrum long enough to fully internalize it what do we get we create an environment where everyone feels empowered to creatively solve the problems thanks for listening
