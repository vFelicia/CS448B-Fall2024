With timestamps:

00:01 - next up we have developer
00:03 - and web workers
00:05 - uh give it up round of applause for
00:07 - developer
00:14 - hello everybody my name is divelgar or
00:17 - as my mother gave me name dusan
00:20 - yeah but they're always welcome i guess
00:23 - and i come from serbia i'm in berlin for
00:26 - one month and i work for this company
00:29 - it's called smaller and we do online
00:31 - loans
00:32 - as so i never thought that working with
00:34 - money is going to be any kind of fun
00:37 - until i came here so
00:40 - it is kind of
00:42 - so today we talk about the web workers
00:45 - um it's kind of a
00:47 - tricky topic and a weird one as well
00:50 - because it's already 2018 and can you
00:53 - show hands who is using this stuff
00:56 - yeah
00:59 - it is like that
01:01 - so i'm seeing front engineer and
01:02 - technical product owner it's mava as i
01:04 - said i blog at
01:06 - www.develoger.com
01:09 - and the same
01:12 - i use the same how to say the two
01:14 - twitter handle
01:16 - so let's start
01:17 - this is a bit of a history already i
01:19 - mean you know i grew up in the 90s and
01:22 - for me like 10 years ago is always like
01:25 - 1999 you know
01:27 - so
01:28 - so yeah i mean but 10 years ago was like
01:32 - almost this and
01:34 - before before we had this kind of uh
01:37 - react angular and all sorts of like
01:40 - mambo jumbo on the front end
01:42 - we needed something in order to support
01:45 - it and in 2009 actually happened this
01:47 - revolution that people don't uh know so
01:49 - much or they know but that i'm not aware
01:52 - of and it's called jit or better say
01:54 - like just in time compiler and on many
01:57 - um job interviews you will hear this
01:59 - question like is javascript compile or
02:02 - interpret it
02:03 - and yeah it is both
02:06 - so
02:07 - then when some nice people introduced
02:09 - the justin tank compiler the whole like
02:12 - um
02:13 - performance of executing javascript
02:16 - really elevated and then in 2013 the
02:19 - react came as a result of that
02:22 - and also the result of
02:25 - facebook's try to basically
02:27 - elevate some of the heavyweight lifting
02:30 - to the user devices which was very nice
02:33 - from them
02:35 - uh okay so let's move on
02:39 - so
02:40 - why were brokers um i mean if in this
02:44 - 2009 something somebody introduced a
02:46 - thing which can uh which open the door
02:49 - for like um clean t reach applications
02:52 - and then as we all know likely uh
02:54 - clinton's application need to be
02:55 - executed in a browser that means like
02:59 - single stack of execution
03:01 - and that's basically you know when they
03:03 - say like javascript is a single thread i
03:05 - mean it's not javascript that is single
03:06 - thread it's just the browser that are
03:08 - single threads
03:09 - kind of
03:11 - so even though that you just a few
03:13 - people lifted hands and saying that they
03:15 - used the webworkers today
03:17 - web workers as a web workers not service
03:20 - worker
03:21 - are introduced long time ago and
03:23 - basically what does that mean
03:25 - is that the browser support is super
03:29 - it's you can easily use it from internet
03:31 - 411 and above
03:34 - but also yeah even though it introduced
03:37 - this like multi-thread support
03:40 - and it kind of fixes the single threads
03:43 - on the front end
03:45 - it's still not twice widely used for a
03:48 - number of reasons
03:50 - so no matter of the async i can see
03:53 - asynchronous nature of the web apis
03:56 - which was also like a part of muhammad's
03:58 - stock
04:00 - and i like you know all this
04:02 - web api like set timeout xml http
04:05 - request and so on and so on like there
04:07 - are many of them that work
04:08 - asynchronously but that's not
04:09 - multi-thread it's just not blocking what
04:11 - that means is that
04:14 - some functionality is like
04:16 - elevated to the web api
04:18 - and then once it's finished it's still
04:20 - going to going to like return to the um
04:24 - to the main thread or the this
04:27 - single stack of execution
04:31 - so yeah
04:33 - this is about the browser and a node.js
04:37 - because of this cool
04:39 - times that we live in we can run the
04:42 - javascript on both ends the front end
04:43 - and the back end
04:45 - and as you can see like in this
04:47 - visualization it can
04:49 - give you the information that the web
04:51 - workers are very well supported in the
04:53 - browser and as they are part of the web
04:55 - apis
04:57 - they're not supported in node.js like at
04:59 - least not natively
05:01 - that means that yeah because essentially
05:04 - that's called web workers
05:06 - and the node.js as itself is like built
05:09 - so that it's is going to be
05:11 - a work in it as a kind of ecosystem
05:15 - on this single thread as well i'm just
05:19 - yeah i'm not going to go deep and
05:21 - and talk about the c libraries that
05:23 - node.js consumes and yeah they can have
05:25 - like the multithread stuff but it's not
05:27 - not js not to javascript
05:30 - so the synchronous code blocks the
05:32 - browser i mean
05:34 - sometimes it can actually block your
05:36 - browser like literally your ui as well
05:39 - not just the
05:40 - execution of the javascript
05:42 - and
05:44 - yeah it's obvious
05:45 - everybody knows
05:47 - but
05:48 - even if you post execution some
05:50 - calculation
05:51 - that will not solve your problem it will
05:53 - just um
05:54 - delay the inevitable you know because if
05:57 - you do some async actions and then
05:59 - whatever is returned
06:01 - you will still for example this is the
06:03 - usual uh
06:05 - api call stuff you get your json and
06:07 - then you need to parse it
06:09 - i mean this parse thing is synchronous
06:11 - it was always synchronous and still
06:12 - asynchronous and in if you have like
06:14 - some huge data set
06:16 - uh
06:17 - yeah you can imagine and i had a lot
06:20 - sadly a lot of bad architecture
06:22 - styled projects that
06:26 - ended up
06:28 - doing the weird things
06:30 - so most of the time
06:32 - what happens is that people
06:35 - on the back end for any
06:37 - reason
06:38 - don't want to send you the appropriate
06:40 - format so you get the data
06:43 - and what happens is that you need to
06:46 - parse it sometimes it's huge
06:48 - so
06:50 - that parsing is going to block your
06:52 - execution of course
06:55 - and
06:56 - then you need to re reorder it
06:59 - or to reformat it and do also incredibly
07:03 - horrible stuff that i don't accept
07:04 - anymore luckily
07:07 - and if you want to use your web workers
07:09 - for that i mean please don't
07:11 - just
07:12 - come by to your back end guys and and
07:16 - fix this stuff don't just patch it up
07:22 - so we came to the taboo
07:25 - and
07:26 - when the when web workers are in
07:28 - question the taboo topics are basically
07:30 - done window object more than less or the
07:33 - parent object so in the web workers
07:36 - scope of execution you cannot success
07:38 - dom directly i mean you can still like
07:40 - pass to the worker whatever you like but
07:43 - you cannot access it directly and you
07:45 - shouldn't that's not that's not the
07:47 - reason why they started to exist
07:51 - of course there is this like
07:53 - green stuff so that's the thing that you
07:55 - should do
07:56 - so in the web worker you can access the
07:58 - navigator object of course
08:01 - which can be useful i intentionally um
08:04 - read like colored in red this user agent
08:08 - because even if you go to the mdn
08:10 - website you will see like thumbs down
08:12 - for user agent which is super you know
08:15 - because
08:16 - i really hope that now in 2018 people
08:20 - stopped
08:21 - detecting their devices by user agent
08:24 - and kind of continued yeah not started
08:27 - continuing to detect the features
08:30 - of the environment and
08:33 - use whatever is
08:34 - available
08:36 - so in the web worker you can access the
08:38 - html xml http request that's important
08:41 - to know
08:42 - and of course by then you can you can do
08:45 - all sorts of like data fetching if
08:47 - needed
08:49 - but the web worker is not a standalone
08:52 - thing and basically
08:55 - within the one web worker
08:57 - you can
08:59 - load as many as
09:01 - the sub workers you need
09:03 - thus in like theory you can go nuts with
09:07 - the this like horizontal scaling of your
09:10 - resources and like doing things in like
09:12 - million threads
09:14 - but you don't do it please
09:17 - because if you
09:19 - there is one misconception about this
09:21 - you can use your
09:22 - web workers in order to
09:25 - elevate the heavy weight lifting
09:28 - but
09:29 - even though it's not going to
09:31 - block your main stack of execution
09:34 - it's still going to affect your
09:36 - device
09:37 - uh performance because at the end it's
09:40 - just one cpu that does
09:42 - does all of this stuff
09:44 - so the web worker or the worker and
09:46 - service worker are not the same
09:51 - oh
09:53 - that's fine
09:55 - so the worker resides in the global
09:57 - scope
09:58 - that means that you can instantiate it
10:01 - from within
10:02 - any place
10:03 - and just
10:05 - by using the
10:06 - new worker
10:08 - uh new new keyboard on this worker
10:11 - object or our method you can have as
10:14 - many workers per tab as you as you want
10:16 - this is very key difference between the
10:18 - service worker and worker
10:20 - and it's very well supported
10:23 - and for the service workers
10:25 - they need to be registered i mean the
10:27 - service worker one service worker needs
10:29 - to be registered via the navigator
10:31 - service worker register
10:33 - and
10:34 - that means that you can just have one
10:36 - service worker per the domain
10:39 - and
10:40 - that was the whole idea yeah
10:42 - it's just like having one service worker
10:45 - that handles all this stuff which is
10:46 - more than less just
10:49 - i mean not just but kind of a proxy for
10:51 - your data and with heavyweight lifting
10:54 - in terms of like uh caching and stuff
10:57 - and yeah you cannot use the xml http
11:00 - request within the service worker you
11:02 - can use fetch i mean i don't know the
11:04 - reasoning what i think that it is it's
11:06 - basically that fetch is like
11:09 - better
11:11 - because with hd xmlht xmlhttprequest you
11:13 - will need to write a lot of custom logic
11:15 - or to consume some libraries in order to
11:18 - do some simple stuff which
11:20 - just comes shipped with a fetch
11:22 - and the
11:24 - support is limited
11:26 - so yeah this is basically like one
11:30 - kind kind of a phone call because
11:31 - between the uh web main context of
11:34 - execution your application and the web
11:36 - broker
11:38 - and
11:39 - on the first
11:41 - iteration of like this changing the
11:43 - messages i mean before i start
11:46 - just to say that web workers are all
11:48 - about communication and that's basically
11:50 - just what they do the api is very simple
11:53 - and and all the things that you need to
11:55 - do is to instantiate the object as you
11:58 - see the the statute of the worker
12:01 - to post some message to worker like to
12:04 - provide some data to it and then on this
12:07 - blue stuff when it says like webworker
12:09 - this this is actually part which is
12:11 - written within the worker itself within
12:13 - this webworker.js file
12:16 - you actually just wait for a message
12:19 - and then
12:20 - you
12:21 - do whatever you like with it in this
12:23 - case you just return some method which
12:26 - process
12:27 - the data
12:28 - and then on the main context you just
12:30 - wait for it for uh you just have a
12:32 - listener basically that waits for uh for
12:35 - that
12:36 - return back message and do something
12:38 - with it and that's it i mean
12:41 - very simple
12:44 - and what are the use cases
12:46 - yeah this is kind of
12:48 - a topic for itself
12:50 - because
12:51 - if you want to
12:53 - move your unresponsive code to the web
12:55 - worker like don't do it please because
12:57 - it's just going to you know it's just
12:59 - like putting uh
13:01 - trash
13:03 - below how to say the uh
13:05 - the carpet yeah
13:07 - i mean eventually your wife will come
13:08 - and then you're screwed
13:13 - so
13:14 - yeah repacking slash reformatting data
13:16 - sets
13:17 - more or less
13:18 - always lazy backhand
13:20 - so don't do it on the front end please
13:22 - even if you elevate it to some like uh
13:24 - application state redux mobix whatever
13:26 - and then you do this heavy stuff within
13:29 - the worker it's still horrible like you
13:32 - just should not do it and
13:35 - yeah like i said it's going to affect
13:37 - your ux which is like very important and
13:41 - it's i mean the multi trading is not
13:43 - about heavyweight lifting it's just
13:44 - about not blocking your main stack
13:47 - so imagine that you have this
13:49 - e-commerce solution
13:51 - and you have a button
13:53 - that says like add to cart
13:56 - and then
13:57 - you start some heavy calculations
14:01 - no matter what it is
14:02 - one of our colleagues had this use case
14:04 - where he basically
14:07 - they needed to scan the qr code
14:10 - and
14:11 - when you scan the qr code sometimes
14:14 - it can
14:15 - you know just consume a lot of resources
14:18 - if you want to do something with it to
14:20 - process it and stuff
14:22 - so what they did is the they thought to
14:25 - put this in a worker because if you scan
14:27 - this stuff and it needs to to do
14:30 - something
14:31 - which can
14:33 - endanger the the
14:34 - usage of your
14:36 - current execution stack
14:38 - and if you just gets stuck on the stack
14:42 - executing
14:43 - if you click on this button to add to
14:46 - cart something a product
14:49 - that action
14:50 - will need of course to update some state
14:53 - and then
14:55 - to just you know
14:58 - push the changes
15:00 - throughout your application
15:02 - so when you click to this like add to
15:04 - cart button and this stuff is going to
15:06 - continue executing in the background on
15:08 - your stack you will not be able to to do
15:11 - it basically so in this modern age of
15:14 - like e-commerce
15:15 - it's not only about having the like
15:17 - fastest page load time
15:19 - it's also about
15:21 - never ever have this situation when you
15:23 - block your execution stack with anything
15:29 - and yeah at the end
15:32 - basically like
15:33 - if you want to terminate the worker you
15:35 - can do just this simple thing work at
15:37 - your terminate and then you do it uh
15:40 - from the main contact context for your
15:42 - application or you can do like
15:44 - self.close
15:45 - also close to use this method
15:48 - for the same purpose
15:50 - okay so this is like the the very simple
15:54 - you
15:55 - like a very simple example it's not
15:58 - fancy in some like react framework or
16:00 - stuff it's just like pure javascript
16:02 - nothing special so what do we do here is
16:04 - that
16:06 - the only thing that you need to think
16:08 - about is this calculate primes actually
16:10 - i took this uh method from the mdn and
16:12 - what does it do it's just doing some
16:14 - horrible stuff
16:16 - like
16:17 - like doing basically the random
16:19 - calculations
16:21 - and yeah
16:22 - it's it's very horrible so basically you
16:24 - just want to
16:26 - make your cpu artificially go crazy
16:30 - and yeah here i just did on windows
16:33 - unload i just waited for four seconds
16:35 - because i wanted my web page to be at
16:38 - least to some point like responsive
16:40 - so if you reload the page we can like
16:43 - see how it updates and then
16:47 - it doesn't i mean i'm still tweaking
16:50 - and nothing happens because the
16:53 - heavy calculation started and i can do
16:55 - this and if i'm a user you know i would
16:58 - just say like oh this doesn't work like
17:00 - and i would press like 10 times and then
17:02 - i would just stop and then maybe close
17:04 - the website and then there is no
17:07 - purchase or stuff
17:09 - so
17:10 - how you can fix it
17:12 - is very easy
17:15 - and
17:16 - in this case
17:19 - we can just remove this horrible code
17:23 - and replace it with a worker
17:27 - so you basically
17:29 - instantiate a new worker
17:31 - it this
17:32 - method accepts a path
17:36 - and then
17:37 - you
17:38 - define a message to be posted to the
17:40 - worker that's basically just kind of
17:42 - some kind of object
17:44 - and here you just wait
17:46 - for worker
17:48 - to return you something simple as that
17:52 - so if you go to our web page
17:55 - and we reload it
17:57 - oh
18:00 - you will see that basically
18:02 - i can click all day long
18:07 - yeah
18:09 - and it works
18:12 - so
18:13 - i'm not going to lie to you like there
18:15 - is not a magical answer on like what
18:19 - what are the use cases for it
18:21 - and that's one of the reasons why people
18:23 - don't use it
18:25 - is that i mean if you if you need to use
18:27 - it you will know
18:29 - or maybe you will be wrong by knowing it
18:34 - because the thing is that most of the
18:36 - time
18:37 - people
18:39 - if they write a good code it will not
18:42 - end up in a situation where you need to
18:44 - solve it by the worker
18:46 - but in some specific scenarios
18:48 - if we have in mind the limitation of our
18:50 - smartphones especially
18:52 - we should consider
18:54 - elevating something even like the api
18:57 - calls to the worker
18:59 - because
19:00 - it's all about not blocking your uh
19:02 - stack execution
19:04 - and basically nothing else
19:07 - thank you
19:10 - you

Cleaned transcript:

next up we have developer and web workers uh give it up round of applause for developer hello everybody my name is divelgar or as my mother gave me name dusan yeah but they're always welcome i guess and i come from serbia i'm in berlin for one month and i work for this company it's called smaller and we do online loans as so i never thought that working with money is going to be any kind of fun until i came here so it is kind of so today we talk about the web workers um it's kind of a tricky topic and a weird one as well because it's already 2018 and can you show hands who is using this stuff yeah it is like that so i'm seeing front engineer and technical product owner it's mava as i said i blog at www.develoger.com and the same i use the same how to say the two twitter handle so let's start this is a bit of a history already i mean you know i grew up in the 90s and for me like 10 years ago is always like 1999 you know so so yeah i mean but 10 years ago was like almost this and before before we had this kind of uh react angular and all sorts of like mambo jumbo on the front end we needed something in order to support it and in 2009 actually happened this revolution that people don't uh know so much or they know but that i'm not aware of and it's called jit or better say like just in time compiler and on many um job interviews you will hear this question like is javascript compile or interpret it and yeah it is both so then when some nice people introduced the justin tank compiler the whole like um performance of executing javascript really elevated and then in 2013 the react came as a result of that and also the result of facebook's try to basically elevate some of the heavyweight lifting to the user devices which was very nice from them uh okay so let's move on so why were brokers um i mean if in this 2009 something somebody introduced a thing which can uh which open the door for like um clean t reach applications and then as we all know likely uh clinton's application need to be executed in a browser that means like single stack of execution and that's basically you know when they say like javascript is a single thread i mean it's not javascript that is single thread it's just the browser that are single threads kind of so even though that you just a few people lifted hands and saying that they used the webworkers today web workers as a web workers not service worker are introduced long time ago and basically what does that mean is that the browser support is super it's you can easily use it from internet 411 and above but also yeah even though it introduced this like multithread support and it kind of fixes the single threads on the front end it's still not twice widely used for a number of reasons so no matter of the async i can see asynchronous nature of the web apis which was also like a part of muhammad's stock and i like you know all this web api like set timeout xml http request and so on and so on like there are many of them that work asynchronously but that's not multithread it's just not blocking what that means is that some functionality is like elevated to the web api and then once it's finished it's still going to going to like return to the um to the main thread or the this single stack of execution so yeah this is about the browser and a node.js because of this cool times that we live in we can run the javascript on both ends the front end and the back end and as you can see like in this visualization it can give you the information that the web workers are very well supported in the browser and as they are part of the web apis they're not supported in node.js like at least not natively that means that yeah because essentially that's called web workers and the node.js as itself is like built so that it's is going to be a work in it as a kind of ecosystem on this single thread as well i'm just yeah i'm not going to go deep and and talk about the c libraries that node.js consumes and yeah they can have like the multithread stuff but it's not not js not to javascript so the synchronous code blocks the browser i mean sometimes it can actually block your browser like literally your ui as well not just the execution of the javascript and yeah it's obvious everybody knows but even if you post execution some calculation that will not solve your problem it will just um delay the inevitable you know because if you do some async actions and then whatever is returned you will still for example this is the usual uh api call stuff you get your json and then you need to parse it i mean this parse thing is synchronous it was always synchronous and still asynchronous and in if you have like some huge data set uh yeah you can imagine and i had a lot sadly a lot of bad architecture styled projects that ended up doing the weird things so most of the time what happens is that people on the back end for any reason don't want to send you the appropriate format so you get the data and what happens is that you need to parse it sometimes it's huge so that parsing is going to block your execution of course and then you need to re reorder it or to reformat it and do also incredibly horrible stuff that i don't accept anymore luckily and if you want to use your web workers for that i mean please don't just come by to your back end guys and and fix this stuff don't just patch it up so we came to the taboo and when the when web workers are in question the taboo topics are basically done window object more than less or the parent object so in the web workers scope of execution you cannot success dom directly i mean you can still like pass to the worker whatever you like but you cannot access it directly and you shouldn't that's not that's not the reason why they started to exist of course there is this like green stuff so that's the thing that you should do so in the web worker you can access the navigator object of course which can be useful i intentionally um read like colored in red this user agent because even if you go to the mdn website you will see like thumbs down for user agent which is super you know because i really hope that now in 2018 people stopped detecting their devices by user agent and kind of continued yeah not started continuing to detect the features of the environment and use whatever is available so in the web worker you can access the html xml http request that's important to know and of course by then you can you can do all sorts of like data fetching if needed but the web worker is not a standalone thing and basically within the one web worker you can load as many as the sub workers you need thus in like theory you can go nuts with the this like horizontal scaling of your resources and like doing things in like million threads but you don't do it please because if you there is one misconception about this you can use your web workers in order to elevate the heavy weight lifting but even though it's not going to block your main stack of execution it's still going to affect your device uh performance because at the end it's just one cpu that does does all of this stuff so the web worker or the worker and service worker are not the same oh that's fine so the worker resides in the global scope that means that you can instantiate it from within any place and just by using the new worker uh new new keyboard on this worker object or our method you can have as many workers per tab as you as you want this is very key difference between the service worker and worker and it's very well supported and for the service workers they need to be registered i mean the service worker one service worker needs to be registered via the navigator service worker register and that means that you can just have one service worker per the domain and that was the whole idea yeah it's just like having one service worker that handles all this stuff which is more than less just i mean not just but kind of a proxy for your data and with heavyweight lifting in terms of like uh caching and stuff and yeah you cannot use the xml http request within the service worker you can use fetch i mean i don't know the reasoning what i think that it is it's basically that fetch is like better because with hd xmlht xmlhttprequest you will need to write a lot of custom logic or to consume some libraries in order to do some simple stuff which just comes shipped with a fetch and the support is limited so yeah this is basically like one kind kind of a phone call because between the uh web main context of execution your application and the web broker and on the first iteration of like this changing the messages i mean before i start just to say that web workers are all about communication and that's basically just what they do the api is very simple and and all the things that you need to do is to instantiate the object as you see the the statute of the worker to post some message to worker like to provide some data to it and then on this blue stuff when it says like webworker this this is actually part which is written within the worker itself within this webworker.js file you actually just wait for a message and then you do whatever you like with it in this case you just return some method which process the data and then on the main context you just wait for it for uh you just have a listener basically that waits for uh for that return back message and do something with it and that's it i mean very simple and what are the use cases yeah this is kind of a topic for itself because if you want to move your unresponsive code to the web worker like don't do it please because it's just going to you know it's just like putting uh trash below how to say the uh the carpet yeah i mean eventually your wife will come and then you're screwed so yeah repacking slash reformatting data sets more or less always lazy backhand so don't do it on the front end please even if you elevate it to some like uh application state redux mobix whatever and then you do this heavy stuff within the worker it's still horrible like you just should not do it and yeah like i said it's going to affect your ux which is like very important and it's i mean the multi trading is not about heavyweight lifting it's just about not blocking your main stack so imagine that you have this ecommerce solution and you have a button that says like add to cart and then you start some heavy calculations no matter what it is one of our colleagues had this use case where he basically they needed to scan the qr code and when you scan the qr code sometimes it can you know just consume a lot of resources if you want to do something with it to process it and stuff so what they did is the they thought to put this in a worker because if you scan this stuff and it needs to to do something which can endanger the the usage of your current execution stack and if you just gets stuck on the stack executing if you click on this button to add to cart something a product that action will need of course to update some state and then to just you know push the changes throughout your application so when you click to this like add to cart button and this stuff is going to continue executing in the background on your stack you will not be able to to do it basically so in this modern age of like ecommerce it's not only about having the like fastest page load time it's also about never ever have this situation when you block your execution stack with anything and yeah at the end basically like if you want to terminate the worker you can do just this simple thing work at your terminate and then you do it uh from the main contact context for your application or you can do like self.close also close to use this method for the same purpose okay so this is like the the very simple you like a very simple example it's not fancy in some like react framework or stuff it's just like pure javascript nothing special so what do we do here is that the only thing that you need to think about is this calculate primes actually i took this uh method from the mdn and what does it do it's just doing some horrible stuff like like doing basically the random calculations and yeah it's it's very horrible so basically you just want to make your cpu artificially go crazy and yeah here i just did on windows unload i just waited for four seconds because i wanted my web page to be at least to some point like responsive so if you reload the page we can like see how it updates and then it doesn't i mean i'm still tweaking and nothing happens because the heavy calculation started and i can do this and if i'm a user you know i would just say like oh this doesn't work like and i would press like 10 times and then i would just stop and then maybe close the website and then there is no purchase or stuff so how you can fix it is very easy and in this case we can just remove this horrible code and replace it with a worker so you basically instantiate a new worker it this method accepts a path and then you define a message to be posted to the worker that's basically just kind of some kind of object and here you just wait for worker to return you something simple as that so if you go to our web page and we reload it oh you will see that basically i can click all day long yeah and it works so i'm not going to lie to you like there is not a magical answer on like what what are the use cases for it and that's one of the reasons why people don't use it is that i mean if you if you need to use it you will know or maybe you will be wrong by knowing it because the thing is that most of the time people if they write a good code it will not end up in a situation where you need to solve it by the worker but in some specific scenarios if we have in mind the limitation of our smartphones especially we should consider elevating something even like the api calls to the worker because it's all about not blocking your uh stack execution and basically nothing else thank you you
