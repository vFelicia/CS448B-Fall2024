With timestamps:

00:00 - - Hi there, I'm Craig,
and I'm a developer.
00:02 - In this course, we are going to explore
00:04 - the wonderful world of webhooks.
00:07 - Understanding the
concepts behind webhooks,
00:09 - will open up a new and powerful
world of possibilities,
00:12 - for your projects and your applications.
00:14 - There are infinite
opportunities available for you
00:16 - to connect applications that
you know and love together,
00:19 - to create new experiences
for both you and your users.
00:23 - Now, in order for you to get
the most out of this course,
00:26 - I'd love it if you had
a basic understanding of
00:28 - how to access web-based APIs.
00:30 - Now, if you don't yet, no worries.
00:32 - I've attached to this
video, some teacher's notes.
00:35 - I've listed some ways for you
to gain that experience there.
00:38 - Now, even if you've already
met the prerequisites,
00:41 - can you please take a minute
and locate the teacher's notes?
00:44 - Throughout the course,
I'm gonna refer to them.
00:46 - In those notes, I'll drop
additional information,
00:48 - and share places where
you can learn more about
00:50 - what we're chatting about.
00:52 - I'll also use those notes to
keep you updated on anything
00:55 - that might've changed from,
00:57 - my right now, when I'm
filming this course,
00:59 - to your right now,
01:01 - whenever you're watching
this in the future.
01:03 - I hope things are going
good for you in the future.
01:05 - Well, while we'll talking
about your future,
01:07 - let's chat a bit about what you
can expect from this course.
01:10 - We're gonna first talk about
01:11 - the high-level concepts of webhooks.
01:13 - Where they come from, when and
why you might wanna use them,
01:16 - and I'll walk you through
some inspiring solutions
01:19 - that you can build without
writing any code whatsoever.
01:23 - You're gonna love it.
01:24 - Pretty sure you're gonna get hooked,
01:26 - and after you get webhooked,
01:28 - we'll move from a no-code solution,
01:31 - to explore some more low-code solutions.
01:34 - We're gonna explore events
that GitHub sends out,
01:37 - when activity happens on their site.
01:39 - Now, no worries, if you haven't
had any previous experience
01:42 - with the code-sharing site, GitHub.
01:44 - We'll start from the very beginning,
01:45 - and get you up and running quickly.
01:47 - We'll also then spin up
a serverless function,
01:50 - using a free platform named, Netlify,
01:52 - and we'll handle or do something with,
01:55 - the event data that comes from GitHub.
01:57 - If you haven't used
serverless technology before,
01:59 - again, don't fret.
02:00 - We'll walk through what that means,
02:01 - and how to take advantage of its power.
02:04 - Now, all the code in this course,
02:05 - we'll walk through together.
02:06 - You'll have access to all
of the completed code.
02:10 - After we've got a good
grasp on the basics,
02:12 - we'll make use webhooks to build
02:14 - an entire telephone-based application.
02:16 - We'll build, from start to finish,
02:18 - an entire idea capturing and
text transcription service.
02:22 - The application will lean completely
02:24 - on webhooks for workflow management.
02:26 - All done with, shockingly
few lines of code.
02:29 - This course it's going to
deal with consuming events,
02:32 - passed through our webhooks.
02:33 - Now, that is to say, we
won't be writing code
02:35 - that sends information
to register webhooks.
02:37 - Check the teacher's notes,
02:38 - if you're interested
in learning more about
02:40 - how to send webhook events.
02:42 - I am super excited to get
started with this course,
02:46 - but there's just one more thing
02:47 - that I'd like to talk
about with future you.
02:50 - If at any time you need
me to pause or slow down,
02:53 - remember you're in a video-based course,
02:55 - take advantage of that.
02:56 - I am more than happy to repeat myself,
02:58 - if you miss something.
02:59 - Speed me up, slow me down,
flip on the closed captions,
03:03 - make yourself at home.
03:04 - These days, I know I've
gotten pretty bad about
03:07 - the way that I consume video content.
03:09 - I just watch and watch,
and then I watch some more.
03:11 - Well, it turns out that
education doesn't really work
03:15 - too well with bingeing like that.
03:17 - If you feel like you're
starting to zone out,
03:19 - like I did through the
endless seasons of "Survivor,"
03:22 - it's time for a break, and
I'm not here to make friends.
03:25 - I've put some deliberate
stopping points in this course,
03:28 - and I'll do my best to
remind you to take a break.
03:31 - Breaks are important,
03:32 - they're super critical for your learning.
03:34 - You need to let things sink in,
03:35 - and I want you to get the
most out of our time together.
03:39 - Whew, there we go.
03:41 - We got all that housekeeping
stuff all covered.
03:44 - I'm sure you were starting
to get like my kids do
03:46 - on a long drive and they're
like, Dad, are we there yet?
03:50 - Actually, that's a pretty good example
03:52 - for where a webhook works wonderfully.
03:55 - My kids continually ask
me that question over
03:58 - and over again, are we there yet?
04:00 - They keep making that request,
the same one, over and over,
04:04 - polling me directly to see
04:06 - if we've arrived at our destination.
04:08 - Now, typically, my response is,
04:10 - I'll tell you when we get there.
04:12 - More or less, what I'm promising
is that when we get there,
04:15 - I will broadcast our arrival status.
04:18 - When that approach works,
04:20 - like when my kids actually decide
04:22 - to subscribe to my status updates,
04:24 - I can tell you that it makes things
04:26 - a lot easier on the whole car.
04:28 - I don't get overloaded and they can relax.
04:31 - They just sit there
and wait for my update,
04:33 - so much more efficient.
04:36 - I guess what I'm attempting
to broadcast to you now is,
04:39 - we're here, we've arrived
at the start of the course.
04:42 - Now, I think the best place
to start our journey is
04:44 - to explore a concept often present
04:46 - in application development, events.
04:49 - Let's get started.
04:50 - An event, in code, is a
defined action or occurrence.
04:54 - Now, these events are
typically exposed to us,
04:57 - software developers, so
that we can write code
04:59 - that runs specifically when
05:01 - one of these actions
or occurrences happen.
05:04 - The first type of event
that I'd like to talk about
05:06 - is one that is caused by the
user of your application.
05:08 - Let's think about a button on a webpage.
05:11 - This button will trigger an event
05:14 - when it is clicked by an user.
05:15 - You can optionally write
some code that will run,
05:18 - and only run when that event occurs.
05:21 - You do this by adding or
registering what is known as
05:25 - an event listener.
05:26 - You write code, also
referred to as a handler,
05:30 - used to handle the specific event.
05:32 - In this case, click,
05:34 - this code will only run
when that event happens.
05:38 - This is called, event-driven programming.
05:40 - In this example, it's used to empower you
05:42 - to not have to write code
that continually checks
05:45 - to see if the button is being pressed.
05:47 - Just like the kids in the car,
05:49 - it isn't very efficient for
you to write code asking,
05:52 - hey, button, are you clicked yet?
05:54 - Are you clicked yet?
05:55 - Now, how 'bout now, are you clicked?
05:57 - The click event is just one of many events
05:59 - that webpages allow for listening to.
06:01 - Check the teacher's notes
06:02 - for more browser-based event examples.
06:04 - Similar in concept to
a user-generated event,
06:07 - is what is known as a lifecycle event.
06:10 - Lifecycle events are
typically exposed to us
06:12 - via application libraries or frameworks.
06:15 - You can think of application
libraries and frameworks
06:17 - as tools that help us rapidly
develop our applications.
06:21 - These libraries do this by
providing repeatable ways
06:25 - for us to write our applications.
06:27 - For example, these libraries
allow us developers
06:30 - to customize various
parts of the application,
06:32 - at specific times, in specific contexts.
06:37 - They allow us to hook into
specific lifecycle events.
06:41 - For instance, when you're building
06:42 - a web application these days,
you're almost certainly using
06:45 - a front-end application library.
06:48 - One of the main benefits
that these libraries give you
06:50 - is the ability to write code
for only your specific needs.
06:54 - A great example is you can write code
06:56 - once your component has
been loaded on the screen.
06:59 - This load is a lifecycle event.
07:01 - Usually this looks something
like, has been loaded.
07:04 - What's happening here is what is known as,
07:06 - inversion of control.
07:09 - Now, this is because the
control is being handed to you,
07:12 - the developer, from the application,
07:13 - at exactly the right time.
07:15 - The library does its magic,
it prepares your component.
07:19 - It then renders it out to the screen,
07:21 - and when it's loaded on the page,
07:23 - it calls the code that you wired up
07:26 - to your has-been-loaded hook,
07:28 - and that abstraction is super nice.
07:31 - You don't call the function yourself.
07:33 - The library actually calls
your function when it's ready.
07:38 - This inversion of control pattern
is also often referred to,
07:41 - as the Hollywood principle.
07:43 - In Hollywood, casting directors
07:45 - usually tell the person auditioning,
07:47 - don't call us, we'll call you.
07:49 - Now, this is because if they didn't,
07:51 - the actor would just keep calling them.
07:54 - Yeah, I was just in there auditioning.
07:56 - I pretty sure I got the
part, I did a really good.
07:59 - Weird, they hung up, I
guess I'll call back.
08:01 - No, I was the older guy.
08:03 - I was just wondering when should I come in
08:04 - for my wardrobe fitting, hello?
08:08 - Weird they disconnected, I
guess I'll try that again.
08:10 - Again, like my kids,
08:12 - these actors are totally going
to overload these directors
08:15 - with their needy questions.
08:16 - If they were allowed to call the director
08:18 - and check for their approval,
they'd do it all the time.
08:21 - That Hollywood-principle abstraction,
08:23 - allows the actor to not need
08:25 - to understand the entire process
08:27 - that Hollywood directors
are going through.
08:29 - The directors do whatever
it is that directors do.
08:32 - I think it involves tall
chairs, and megaphones,
08:34 - and snacks, definitely snacks.
08:37 - The point is, only when the
directors make their decision,
08:41 - do they call to inform the actor.
08:43 - These patterns of event
handlers and lifecycle hooks
08:46 - have really proven useful
in helping developers
08:49 - to build extensible applications.
08:51 - The good news is,
08:52 - that this powerful abstraction
can also span across
08:56 - entirely different
applications over the internet,
08:59 - by using what is known
as, ta-da, a webhook.
09:04 - Now, that we've got a
light understanding of
09:06 - the basics of event handlers and hooks,
09:08 - let's run through a quick
refresher of how to use an API.
09:12 - Have you heard of IOT,
the internet of things?
09:15 - Well, this here is a thing.
09:18 - Well, not this adorable/weird
dog lamp thing,
09:24 - but the actual light bulb itself,
09:25 - it's what is known as a smart bulb.
09:28 - Now, I've got an app on my phone,
09:31 - which lets me turn on the
light, pretty cool, right?
09:36 - I mean, don't get me wrong.
09:37 - A plain old light bulb is pretty amazing
09:40 - when you think about it.
09:41 - When I turn on the light switch,
09:42 - it allows power to come to
the bulb and it lights up.
09:45 - That's cool, but that's me
doing it, I'm turning it on.
09:49 - In reality, it's not
much different with me
09:52 - using an application on my phone, is it?
09:54 - I'm telling it to turn on.
09:56 - I can also even change the color,
09:58 - but even that, I'm saying
to make the light green,
10:01 - and I'm telling it to do it when I click.
10:04 - Now, what makes these
light bulbs really shine?
10:08 - That's a dad joke, I tend to
do that, sorry about that one.
10:11 - What makes these light bulbs really smart,
10:14 - is that they can be
controlled by external events.
10:17 - Like for instance,
10:18 - I can make it so the
bulb turns on at sundown,
10:22 - I can even set up a schedule
so that it gets darker
10:25 - the closer it comes to my
bedtime, making me feel sleepier,
10:29 - because my lights are outsmarting me.
10:31 - In fact, you've probably seen it.
10:33 - There's a whole industry
around smart homes.
10:36 - So many products, all sorts
revolving around the house,
10:40 - being smarter than what's
going on around it.
10:42 - Now, the industry saw incredible growth
10:44 - over the past couple of years.
10:46 - Now, the way this
particular light bulb works,
10:48 - is that I define a schedule
of how I want it to behave.
10:52 - The light bulb isn't sitting
there asking my schedule
10:55 - over and over again, if
it's time to turn on.
10:57 - There's an external
program that's running,
10:59 - and when my defined time occurs,
11:02 - it sends the request
to the bulb to turn on.
11:04 - It's almost as if the sun
said to my light bulb,
11:08 - don't call us kid, we'll call you.
11:10 - At sunset, turn on the lights,
11:12 - and it does just like I did
when I clicked my phone.
11:14 - It sends the same message to
the light bulb to turn on,
11:18 - and in fact, in this particular example,
11:21 - it quite literally is as if
I did it using the phone.
11:24 - This light bulb is actually
connected to the internet
11:27 - with an exposed API.
11:29 - I can control it via an
API from my computer here.
11:33 - This here is Postman,
11:34 - if you haven't seen this tool before,
11:36 - you should totally check it out.
11:38 - I absolutely love it for exploring APIs.
11:40 - Now, the API that I'm exploring
here is from LIFX or LI-FX,
11:46 - the company that produces my light bulb.
11:48 - Now, you'll see here that
I can change the values,
11:51 - and you'll notice here that it's a PUT.
11:55 - PUTs can be used to explain changing
11:57 - a particular property of the resource,
11:59 - and not replacing all of them.
12:01 - In this case, I'm gonna
send a PUT request,
12:05 - so I'm gonna send a PUT
request to my light.
12:09 - This API uses a bearer
token to authenticate,
12:12 - and I've got that all set up.
12:14 - You can see here that I am
changing the color to red.
12:18 - Now, I'm gonna send a PUT
request to this specific bulb.
12:25 - I'm gonna click this here,
12:27 - and boom, it's red and
that's pretty cool, isn't it?
12:32 - I can use this code to
turn this light off and on.
12:37 - We already know that
just letting this light
12:39 - turn off and on, with regards to the sun,
12:41 - has made it labeled smart.
12:43 - When the sun goes down, turn on.
12:45 - Sure, that's pretty smart,
12:47 - but I bet us being able
to control it via code
12:51 - might make this thing labeled a genius.
12:53 - I mean, if you think about it,
12:55 - it's like when anything,
like anything at all,
12:59 - that I can dream up happens, turn it on.
13:02 - Even better, we saw that
we can change the color.
13:06 - I can make this turn green
when I have a new email,
13:08 - or flash different colors,
13:10 - when someone comments on a YouTube video.
13:12 - Or, I'm sure if I was into sports,
13:14 - I bet I would love if this
blinked my team's colors
13:17 - when they scored a
point, go, team, sports!
13:21 - What if I use this for an on-air light,
13:24 - for like when I was in a video conference,
13:27 - so my kids knew not to
come barging in on my call?
13:31 - They'd see this,
13:32 - "Rudolph the Red-Nosed"
dog lamp-thing was on,
13:36 - and they'd know that I was on a call.
13:38 - When it was done, I could turn it off.
13:41 - Genius, I tell you, genius.
13:43 - Now, whoa, I actually
need that like right now,
13:48 - but wait a second.
13:51 - Would that mean that I'd
have to write a program
13:52 - that just sat there and
checked all those situations?
13:55 - Like, keep checking the sports scores,
13:57 - and keep checking my email inbox?
14:00 - Like for that video call
example, if I think about it,
14:03 - what it feels like to me,
14:04 - is that I'd have to write
some code to continually check
14:07 - and see if I was on a video call.
14:10 - It doesn't feel very
efficient at all, does it?
14:13 - It fact that feels an awful
lot like my kids asking
14:15 - if we were there yet?
14:18 - Ooh, but what if a video call starting
14:21 - was considered an event?
14:24 - What if I was able to write some code
14:26 - to handle that video-call-started event,
14:28 - I'd be able to, in that handling
code, turn on the light,
14:31 - just like we did in the code.
14:35 - I guess that would mean I'd
have to write some sort of,
14:37 - plug-in for my video
conferencing software,
14:40 - if I wanted to share it?
14:41 - I'd have to have everybody in the world
14:43 - install some software if
they wanted to use it.
14:45 - Yuck, wouldn't it be nice
if somehow that event
14:49 - could trigger outside of
the application to anyone,
14:53 - like over the internet.
14:55 - This is my friend, is where
webhooks come into play.
14:58 - Chances are your video
conferencing provider allows you to
15:02 - listen and handle events using webhooks.
15:05 - That solution basically already exists.
15:09 - We'll look at webhooks like
that one, here in a bit,
15:11 - but do you see how if that event
15:13 - was sent across the internet,
15:15 - I wouldn't need to write
code to continually pull
15:18 - to see if I was in a meeting.
15:19 - I can just wait for
15:21 - the video-conference-started notification.
15:24 - Now, my video conferencing provider says,
15:27 - don't call me kid, I'll call you,
15:28 - and our handler just
says, turn on the light.
15:31 - It only runs when our provider says,
15:33 - psst, hey kid, a video conference started.
15:36 - Now, I hope that you just had
15:39 - one of those light bulb moments.
15:41 - I mean that quite
literally and figuratively,
15:45 - like the type above your head.
15:46 - I hope that thing just turned on.
15:49 - I'd like to ask you to
take a little break now.
15:52 - I'd like this to sink in for you,
15:54 - and one way to help this all make sense,
15:56 - is for you to pause the video,
15:58 - and think about what we just saw.
16:01 - Can I get you to come up with three ideas
16:03 - of what you might want to do
if you owned the smart bulb.
16:07 - Everyone has different needs,
16:08 - and remember quite literally
anything could trigger it,
16:12 - could make a change colors.
16:13 - Now, if you're having
trouble coming up with ideas,
16:16 - check the notes.
16:17 - Really, I want you to
let your mind wander.
16:21 - What would you like to have happen
16:23 - to make this light turn on?
16:25 - It can literally anything
you can dream up.
16:28 - Let's take a break,
and when you come back,
16:30 - I'll share some tools
16:31 - that will give you a lot of inspiration.
16:33 - I'm thinking you'll be
pleasantly surprised.
16:36 - You might even be able to achieve
16:38 - what you dreamed up with
just a couple of clicks.
16:41 - See you in a bit.
16:42 - (mellow electronic music)
17:11 - Before the break,
17:12 - I asked you to come up with some ideas
17:14 - to make this smart light bulb,
even smarter, how'd it go?
17:19 - Did ideas just flow out of your mind?
17:21 - Sometimes I find that
when I'm told to dream up
17:23 - anything at all, suddenly I can't.
17:27 - I have ideas pop in my mind all the time,
17:29 - but the second you asked
me to come up with one,
17:31 - like right on the spot,
my mind goes blank.
17:34 - And, that's a bummer,
17:35 - especially when you're trying
to learn a new technology
17:37 - you wanna put into practice,
17:38 - but you have no real idea where to start.
17:41 - If that just happened to you, no worries.
17:43 - I kind of expected it would happen.
17:45 - I've got a solution for
that lack-of-ideas problem,
17:47 - and we'll get to that here in a second.
17:50 - To get there first though,
17:51 - let's talk about a growing
movement called, no code.
17:55 - Don't worry, it's not a
movement to abolish coders.
17:58 - No code is the concept that
you can, and often should,
18:02 - build applications without
actually writing any code.
18:06 - You're given building blocks
and you snap them together.
18:09 - The concept is that the
applications we build
18:11 - are similar enough that
they can be broken down
18:14 - into reusable parts and snapped together
18:17 - into new formations to
build new applications.
18:20 - It's wonderful for
prototyping, and frankly,
18:23 - sometimes you can build exactly
what you were trying to do
18:27 - without writing a single line
of code, like no code at all.
18:31 - I'm talking about some
super impressive stuff.
18:34 - E-commerce sites and integrations
with third party APIs,
18:38 - Check the notes,
18:39 - if you're interested in
diving deeper into this.
18:41 - One of my favorite no-code sites
18:43 - has been around for a long time.
18:45 - Even before the no-code movement took off,
18:47 - it's called, IFTTT, which
stands for, If This Then That.
18:52 - It's a no-code solution
18:54 - for exactly what we've been leading up to.
18:56 - It's an event handler for the internet.
18:58 - If this happens, then do something,
19:01 - and there are a smattering of options
19:03 - that they call, services.
19:05 - These are services that
expose events that can happen.
19:09 - There are a bunch of them,
from your location changed,
19:12 - to it's snowing, to the sun is setting.
19:15 - You'll also notice that
there are other services here
19:17 - that are web specific.
19:19 - There's an email service
that exposes events,
19:21 - like new email received.
19:24 - You define the service that you wanna use,
19:27 - and you choose the specific event.
19:29 - If this, and now,
19:32 - you choose what happens when
that event occurs, then that.
19:36 - These are called, service actions,
19:38 - and there are a different
set of services here
19:40 - that allow you to do different things.
19:43 - For instance, the company that makes
19:45 - this light bulb I was using,
was called, LIFX or L-I-F-X.
19:50 - They provide an action service,
19:52 - and it exposes a bunch of things
19:54 - that I can do with my light
bulb, like change the color.
19:59 - Because, I've linked my accounts already,
20:01 - I can choose which of my
light bulbs, what color,
20:04 - and many other things.
20:06 - Combining the service with
an action, like a whole,
20:08 - if-this-then-that combo, is
called, an applet, cool, right?
20:14 - I'm pretty sure that you could
build a couple of applets
20:17 - to create your own ideas,
with just a couple of clicks,
20:20 - and definitely no code.
20:22 - I think that this #nocodemovement
might be onto something,
20:26 - it's #nojoke.
20:29 - But, now though,
20:30 - what about the situation that we had
20:31 - where you didn't have an idea?
20:33 - Well, this is awesome,
20:35 - and this is a developer
hack that keeps on giving.
20:39 - Sample applications are a
wonderful way to get inspired,
20:42 - and guess what?
20:43 - These applets are shareable.
20:46 - In fact, if you up here to
explore, you'll get suggestions,
20:51 - but you can also type
what you're looking for.
20:55 - I asked you to come up
with ideas about lights,
20:57 - so let's type that, lights.
20:59 - Let's see all the applets
surrounding lights,
21:03 - so here we have toggle
lights, blink your lights,
21:06 - that's nice, disco party for
hue lights, that's wonderful.
21:09 - Alexa, turn on the lights.
21:11 - Sorry, if I just triggered
your Alexa at home,
21:12 - if you have one.
21:14 - Turn on my lights blink,
when your doorbell rings,
21:16 - these are great.
21:19 - All sorts of things.
21:20 - Now, I can enable one of
these for my own account,
21:23 - and when it comes up, it asks
for my specific configuration.
21:28 - Now, you probably noticed that there were
21:30 - different types of smart
bulbs in there, in that list,
21:33 - but that doesn't mean that
you can't take that idea
21:35 - and make it work for your own-use case.
21:38 - Can you see the power in that?
21:40 - Now, this is actually
a pretty common pattern
21:42 - in developing software.
21:43 - You take the base code,
and you make a copy of it,
21:46 - and you make your changes.
21:47 - This is called, forking,
you fork your new copy.
21:51 - Remember, this is just one of
many no-code automation tools.
21:56 - If you're enjoying this way of thinking,
21:58 - I encourage you to look at Zapier.
22:01 - They provide similar building blocks
22:03 - to the complete same sort of,
if this happens, then do that.
22:07 - You wire up services to
create what they call, Zaps.
22:11 - It's super fun, and I highly
recommend exploring here too.
22:14 - There are lots of inspiring
ideas to be found.
22:17 - Zapier makes you happier,
I just love that.
22:21 - These no-code automation
tools go a long way
22:24 - in making just about anything possible.
22:26 - But, as you can imagine,
22:28 - there are gonna be cases when you're gonna
22:30 - wanna have more control.
22:32 - You're gonna wanna
write some specific code
22:34 - that the action doesn't provide.
22:36 - I'm pretty sure that's
why you're here, in fact.
22:39 - You want to use a
webhook, so let's do that.
22:41 - Let's explore how that works
right after a quick break.
22:44 - I'd love to give you
some more time to explore
22:47 - these no-code tools.
22:49 - I really want you to think
about these applets or Zaps,
22:52 - as an abstraction of
the power of webhooks.
22:55 - Oh, one thing that might help,
22:57 - if you wanna just play
around with some actions,
22:59 - there's a smartphone app and
it lets you install buttons
23:02 - on your home screen, just
like this, like look here.
23:05 - I've wired it up, an IFTTT
button so that when I click it,
23:10 - it turns on the red light.
23:13 - That way Roxanne doesn't have
to do it, that was a bad one.
23:17 - Don't call the joke police on me.
23:19 - I hope that one didn't sting too much.
23:21 - (cymbals crashing)
23:22 - Check the teacher's notes for
more exploration guidance,
23:24 - and please let me know
what you come up with.
23:27 - See you in a bit, and when you come back,
23:29 - we'll explore how to capture information
23:31 - sent from a webhook.
23:34 - I think in order to get
the clearest picture
23:36 - of how webhooks work,
23:37 - it will help if we
travel way back to 2007.
23:41 - It was a time of wearing
double polo shirts,
23:44 - so you could pop your collar, twice.
23:47 - People wore Ugg boots with shorts,
23:50 - and Justin Timberlake was
23:52 - actively trying to bring "SexyBack,"
23:54 - and web forms were still a thing.
23:57 - It was a simpler time.
23:58 - To gather information from
a user on your website,
24:01 - you'd write an HTML form and
you'd put a method on it of,
24:05 - POST, and in the action, you'd
put the name of the script.
24:09 - It's important to remember,
that the web is stateless.
24:13 - Once this request to generate the page
24:15 - that the form lives on,
the web server job is done.
24:19 - The GET request is over.
24:22 - Your user would fill out the HTML form
24:25 - with the named fields and then
they'd click a submit button.
24:28 - What the browser does
for you in this case,
24:30 - is it takes all the values
that were entered in the form,
24:33 - and it makes a brand new HTTP request
24:36 - to the URL that you specified
in the action attribute.
24:40 - That POST request contains the data
24:42 - that the user entered in an encoded way.
24:46 - As a developer,
24:47 - you would write a request
handler on your website
24:50 - to capture the information
from this request,
24:53 - and then you'd act on it.
24:54 - Again, your browser is making
a request to your server.
24:59 - Way back in 2007,
25:01 - a developer by the name of Jeff Lindsay,
25:03 - made a proposal to use an
existing idea already very present
25:07 - in software design patterns.
25:09 - He proposed to use the hook
model that we talked about,
25:13 - but instead of locally,
25:14 - he suggested to do it over the internet,
25:17 - and he called it, a webhook.
25:20 - Jeff realized that it would
be fairly straightforward
25:22 - for web developers who
were already very familiar
25:25 - with processing form data
submitted via a POST request.
25:29 - What this approach would
feel like to developers,
25:31 - is just another form submission.
25:33 - In this case, instead of the
user submitting the form,
25:36 - a third party could submit the data.
25:39 - The handler could be written the same way
25:41 - the developer already knows.
25:42 - The information is pushed to the handler,
25:45 - in that same familiar way,
25:46 - to the developer and everyone wins.
25:50 - In order for this to work,
25:51 - the third-party application
needs to be informed
25:54 - from the developer where they
should post their information.
25:58 - You know, the URL where
that handler lives.
26:01 - And then, when the
third-party event happens,
26:04 - it posts the information
about the event to that URL.
26:08 - (icon exploding)
26:09 - That app is definitely embracing
26:11 - the Hollywood principle, right?
26:12 - Don't call us, we'll call you.
26:16 - It took off,
26:17 - for all the reasons that
event-based programming wins.
26:20 - It's, of course, way
more efficient to receive
26:22 - a POST request, than
continuously polling an API,
26:25 - checking for a change.
26:27 - Instead of, are we there
yet, are we there yet?
26:29 - Via an API, the POST
request sends, we're here!
26:33 - That was 2007, webhooks
are now everywhere.
26:38 - I'm guessing what brought
you to this course,
26:40 - was that you encountered one in the wild,
26:43 - and you weren't exactly
sure how to use it.
26:45 - No worries, this happens to everyone
26:47 - the first time they run across one.
26:49 - It's a bit challenging
to understand at first,
26:52 - the web has changed a lot since 2007,
26:56 - but the webhook concept here,
is still pretty much the same.
27:00 - Our apps are now built differently.
27:02 - Like for instance, we
may be using services,
27:04 - and instead of form post,
27:06 - we build our own APIs
for our clients to use.
27:09 - The client post information to our API,
27:11 - usually not using a form.
27:13 - We developers use
web-based APIs all the time
27:16 - to build our applications.
27:18 - You should view webhooks
27:19 - as an extension of that type of work.
27:21 - This is why sometimes you'll
hear webhooks referred to as,
27:25 - a reverse API.
27:27 - It calls you, instead of you calling it.
27:31 - When you use an API,
27:32 - you need to understand the
parameters that it expects,
27:35 - and the reverse is true for webhooks.
27:38 - You need to know what
information is being sent to you,
27:41 - and in what format.
27:42 - There's no formal specification,
27:44 - and any data can be sent to your handler.
27:47 - Now these days, our web
handlers most likely look
27:50 - a wee-bit different than they did in 2007.
27:53 - Technology has evolved,
27:55 - some handlers still accept
traditional, form-posted data,
27:58 - and some of our handlers accept
JSON, posted in the body,
28:01 - for client side, the APIs
that we're writing, right?
28:04 - See the teacher's notes for more on this.
28:06 - You'll find a variety in what
28:08 - webhooks post to your handlers as well.
28:11 - As a developer, writing one
of these webhook handlers,
28:13 - it's pretty important that you understand
28:15 - how to capture and parse
that incoming data.
28:18 - Let's take a look at an
existing webhook implementation
28:22 - and see if we can't capture
the data to inspect,
28:25 - right after a quick break.
28:27 - By now, I'm hoping that
you're inspired to connect
28:30 - unrelated applications together.
28:32 - Well, we've got a good taste
28:34 - of some powerful concoctions
through the no-code solutions
28:37 - of IFTTT and Zapier.
28:40 - You've seen what's possible.
28:42 - You understand why you'd want to use
28:43 - events to trigger actions,
28:45 - as opposed to pulling an API repeatedly.
28:47 - With the what and the why,
of webhooks out of the way,
28:51 - I think it's time that we take
a deeper look under the hood
28:54 - to see how these webhooks
are actually working.
28:58 - I was trying to think
of common applications
29:00 - that all of us developers
are bound to use.
29:02 - The obvious one to me, is GitHub.
29:05 - If you've taken a look at
the notes for this course,
29:07 - which I hope you have,
29:09 - then you've for sure
already encountered GitHub.
29:12 - I've put the notes and
code for this course,
29:15 - in a GitHub repository, or repo.
29:19 - GitHub is a social coding site.
29:20 - It enables you to share your code,
29:22 - and work on projects together.
29:24 - You can submit issues,
29:26 - and keep detailed-version
history of your software,
29:28 - and you can read documentation.
29:31 - It's a wonderful place to explore
29:32 - when you're first learning to code.
29:34 - If you don't have an account yet,
29:36 - I'd love for you to pause the video,
29:38 - and sign up for a free account.
29:40 - Now, quick note,
29:41 - I'm gonna show off a little
bit of how to use GitHub.
29:45 - I've dropped notes that
give a more detailed tour
29:47 - in the teacher's notes to learn more.
29:49 - Make sure to check it out.
29:50 - There's even a link to a video game,
29:52 - that will walk you through
making your first poll request,
29:55 - or a request to make a change
to someone else's code.
29:59 - I know that can feel
a little bit daunting,
30:02 - but it doesn't need to.
30:03 - I want it to feel fun
for you, because it is.
30:07 - After you've got yourself
logged in to GitHub,
30:10 - wheel fork my teacher's notes
repository to your account.
30:13 - This will make it all yours.
30:15 - Now, forking is the process that happens
30:17 - when you see a repository that you like,
30:19 - and you'd like to explore it,
and make your own changes.
30:21 - You fork it, and you make it your own.
30:24 - You make your own copy of that repository.
30:27 - Now, you can always later
ask to apply the changes back
30:30 - to the original repository.
30:32 - Now, I want you to fork the repository,
30:34 - because once the repository is all yours,
30:37 - you can specify some webhooks on it.
30:39 - Here I am on the notes
repository for this class,
30:43 - the links attached in the video.
30:45 - I did wanna make a quick note,
30:46 - that the layout might look
a little bit different
30:48 - on the GitHub site,
30:49 - as they're constantly making improvements.
30:51 - Now, in the off chance that
you can't find what I'm doing,
30:54 - because the site has changed.
30:55 - Please remember to check the
notes for this specific video.
30:58 - I'll update future you
there, with what's different,
31:02 - and we'll get back on track.
31:03 - Sure glad I used GitHub for this.
31:06 - Up here, you'll see some social features.
31:09 - You can star a repo,
31:11 - which is equivalent of a
social media love or thumbs up.
31:14 - Now, as a developer,
31:16 - someone giving you a star
has that same dopamine hit
31:19 - as a like does.
31:20 - The more stars your repo receives,
31:22 - the more likely it'll be discovered.
31:25 - Here is the fork icon.
31:28 - What I'm gonna do, is
I'm going to fork this,
31:31 - and I'm gonna put a copy in my account.
31:37 - Now, you'll see it's
copying everything over,
31:40 - and this is now my own copy.
31:43 - Boom, just like that.
31:45 - Pretty forking fast, right?
31:48 - Note how this repo is mine.
31:50 - It's under my username,
31:51 - and you can see where it was forked from.
31:55 - Now, that this repo is mine,
31:57 - you can see that I have
a settings tab now.
32:00 - I'm gonna go ahead, I'm
gonna click into here.
32:03 - You'll see here on the left nav,
32:06 - that we have an option for webhooks.
32:08 - Awesome, let's click into it.
32:10 - Ooh, webhooks allow external
services to be notified
32:14 - when certain events happen,
just like we talked about.
32:18 - Awesome, totally makes sense.
32:23 - Okay, so let's add a webhook for our repo.
32:27 - I'm gonna click this add webhook button.
32:30 - I was thinking that we
should get the information
32:34 - when someone stars our repo.
32:38 - What we're going to need is
an URL to handle that request.
32:42 - Do you have one?
32:43 - I don't have one.
32:44 - A quick solution to capture a webhook,
32:47 - just to check things out,
32:48 - is to use what's known as a mocking tool.
32:51 - One of my favorite ways
to mock a webhook handler,
32:55 - is to use a web-based
tool called, Beeceptor.
32:58 - Here let me show you,
I'm gonna open that up.
32:59 - I'm gonna come here, I'm
gonna make a new tab.
33:01 - We're gonna go to beeceptor.com
33:08 - Let's make this a little bit bigger.
33:11 - Again, Beeceptor might
look a little bit different
33:14 - if you come in here.
33:15 - Check the notes,
33:16 - if you can't seem to follow
along with what I'm doing.
33:17 - Let's see, what am I gonna do?
33:19 - I'm gonna try a GitHub event.
33:20 - Let's call it, github.
33:21 - Basically, what you do is
you just put your name there,
33:24 - and you can click this create endpoint.
33:27 - Now, as you can see, I have
this github.free.beeceptor.com.
33:33 - I'm gonna go ahead, I'm gonna copy this.
33:36 - I'm gonna keep this page open.
33:36 - I'm gonna pop back over to
my add-a-webhook page here.
33:41 - I'm gonna paste that into the payload URL
33:43 - so that that's where it will be sent,
33:45 - where the information will be sent.
33:49 - We're gonna capture the stars,
33:50 - so I'm just gonna put
/stars at the end here,
33:52 - so that I know what that is.
33:54 - That's the cool thing about Beeceptor,
33:56 - you can just invent whatever you want,
33:58 - that that route doesn't exist,
but it will still catch it.
34:01 - All right, let's keep
filling out this form.
34:04 - We have content type,
34:05 - that's nice that GitHub lets you do that.
34:07 - We have a couple options here.
34:08 - We can either send JSON
or form URL encoded.
34:12 - I'm gonna choose JSON, let's do that.
34:15 - The other nice thing that GitHub does,
34:17 - is they let you choose which events
34:19 - you would like to trigger the webhook.
34:21 - You can send just the push event,
34:22 - that's when somebody
sends code to your repo,
34:24 - or you can say, send me everything,
34:27 - but they also let you
select individual events.
34:29 - We really only want when
someone stars the repo,
34:31 - so let's do that.
34:32 - I'm gonna click that, and I'm
gonna choose, down in here,
34:36 - there is one for, see how
many, much stuff you can do.
34:40 - You can sure do a lot,
so I'm gonna do stars.
34:42 - Here it says,
34:43 - a star is created or
deleted from a repository,
34:46 - and I'm gonna uncheck pushes, okay.
34:49 - There we go, we just have stars.
34:50 - Anytime somebody stars this
repo, we should get an event.
34:54 - Cool, all right, so I'm
gonna click, add webhook.
34:59 - Now, if I go and star my own
repo, because I can do that,
35:03 - 'cause I like myself.
35:05 - I star it, and if I
head over to Beeceptor,
35:08 - you'll see that there was a post to stars.
35:10 - Actually, there was two,
35:11 - because GitHub posts
originally to you're link,
35:13 - just to make sure it works.
35:14 - Here is what happened when we starred.
35:17 - I'm gonna click into this here,
35:19 - and then I'm gonna click
this little cody-thing,
35:22 - looking thing over here.
35:24 - I'm gonna click this,
35:25 - 'cause it will help format things better,
35:26 - and this is what GitHub sent
us, it's pretty cool, right?
35:29 - It shows you all the different information
35:31 - of the repo that was on,
35:33 - and if we scroll down
a little bit farther,
35:35 - we can see all things about the repo.
35:37 - All these different,
rest APIs that I can hit,
35:39 - to get more information if I wanted to.
35:42 - This is all about the repo itself,
35:44 - and I think if we get down
here a little bit closer,
35:47 - this is kind of, hard to read in here,
35:50 - but definitely captures
exactly what was sent.
35:53 - If we scroll down, wow, that's a lot.
35:56 - If we scroll down into here.
35:59 - There we go, we can see who sent the star,
36:02 - and we can see who the user
was, which is very nice.
36:07 - It's got more information,
it's got the avatar URL.
36:10 - I'm gonna actually, let's open that up.
36:11 - Let's see what this is.
36:16 - Wow, look at that dork
who liked this repo.
36:21 - I can use this to figure out,
36:23 - what I would like to handle, right?
36:24 - This was a post that was sent to any URL,
36:27 - and I can figure out what I wanna handle.
36:29 - I wanna go back and
show you something else
36:31 - that's pretty cool inside of GitHub,
36:33 - that not everybody offers,
that offers a webhook,
36:36 - but GitHub is pretty great.
36:38 - I'm gonna come back into
our webhook, that it exists,
36:41 - and it will show you what happened, right?
36:43 - It will show you the
deliveries that were made.
36:47 - If I open this up, I can see,
36:49 - and this is actually
more nicely formatted.
36:52 - Not everything offers this,
36:53 - so it is important to remember Beeceptor,
36:56 - because you're gonna wanna
catch other webhooks,
36:59 - and not everybody has
this nice functionality.
37:05 - Again, we can see this, and we can see,
37:08 - see that dork, this dork here.
37:11 - It's so nice that GitHub
lets you control the format,
37:14 - and actually see the way
the data's presented.
37:16 - They really webhook you up.
37:19 - Okay, so now that we
have a firing webhook,
37:23 - let's see if we can't
make use of that data
37:25 - right after a quick break.
37:27 - We've now got a webhook that fires
37:29 - when our repository is starred.
37:31 - I think we should use that
knowledge to celebrate
37:35 - and we shouldn't celebrate alone.
37:37 - I was thinking about another
pretty common developer tool
37:40 - that you're bound to
encounter is some sort of,
37:43 - real-time group chat software.
37:46 - It's very common that you'll
end up in a chat room of sorts.
37:48 - Now, whether that be Slack, or
Microsoft Teams, or Discord,
37:52 - these channels are a great
way to stay up to date
37:54 - with whatever it is that
you're congregating around.
37:58 - It's also a good place to
just hang out and learn.
38:01 - I was thinking, why don't we
explore sending our GitHub data
38:05 - into one of these chat platforms.
38:07 - We'll make sure that everyone celebrates
38:09 - when our repo gets starred.
38:10 - Now, I'm gonna choose Discord,
38:12 - but you'll find that
most platforms provide
38:14 - a similar sort of integration.
38:15 - Now, like we saw with GitHub,
38:18 - we were able to define a
webhook that would fire
38:20 - when certain events happen.
38:21 - Now, Discord actually allows you to
38:24 - set up the other side automatically.
38:25 - They set up a webhook handler for you.
38:28 - Let's see what that feels like.
38:30 - Just a friendly reminder.
38:32 - This is probably gonna look
a little different for you,
38:35 - in the future.
38:36 - Now, if you run into any
problems following along,
38:38 - check the teacher's notes,
38:40 - I'll update you there with changes.
38:43 - All right, so if you don't
already have Discord,
38:47 - it's a pretty quick setup,
38:48 - and I've included installation
instructions in the notes.
38:50 - Go ahead and pause me,
and get it all set up.
38:53 - This here is my current Discord.
38:56 - I've got some learning channels set up.
38:58 - Here's the free code camp,
and there's TwilioQuest.
39:01 - There's the coding den, all
great learning communities.
39:06 - If you're looking for
extra places to hang out
39:09 - and learn to code, check
out the teacher's notes.
39:11 - I'm gonna go ahead,
39:12 - I'm gonna make my own brand-new server,
39:14 - by clicking the plus button,
and I am going to say,
39:17 - create a new server and
invite your friends.
39:20 - I'm gonna do that.
39:22 - Let's go ahead,
39:23 - I'm gonna call this exploration,
39:26 - and we can get rid of
this later, totally fine.
39:30 - I'm gonna click create,
39:33 - and it's gonna say, invite your friends.
39:36 - I'm just gonna go ahead and close this.
39:37 - I've got friends, I promise I got friends.
39:41 - What's really nice about each
one of these Discord channels,
39:45 - like this is where you
could come and talk, right?
39:47 - You could talk in these channels.
39:48 - Each one of them has
this little icon here,
39:50 - and because we own the server,
we can edit the webhook.
39:55 - Let's go in here,
39:56 - I'm gonna click on this
integrations, over here on the left,
40:00 - and you'll see here,
there's this webhooks.
40:03 - I'm gonna choose, create
webhook, and let's see,
40:07 - webhooks are a simple way to
post messages from other apps
40:10 - and websites into Discord
using internet magic.
40:13 - I agree, they are pretty
magical, aren't they?
40:16 - Let's make some magic.
40:18 - Oh, and here it came up with a
suggested name, Captain Hook.
40:22 - (chuckles) What a great dad
joke, which if I'm honest,
40:26 - I'm kind of bummed that I didn't think of.
40:28 - Hopefully some more dad jokes pan out.
40:31 - This one kind of, petered out at the end.
40:35 - All right, so I'm gonna change
this to GitHub Notifier.
40:41 - It says careful, you have unsaved changes.
40:42 - I'm gonna click save
changes, 'cause I want that.
40:45 - I want a the thing called,
GitHub Notifier, in general.
40:49 - Again, what's happening here,
40:50 - is that this is building
a webhook handler.
40:54 - When you post to it,
40:55 - it sends a message into
the general channel.
40:59 - Now, this is important to note,
41:00 - this is different from
what we saw at GitHub.
41:03 - GitHub made the request to the handler.
41:06 - This handles the request,
both called webhooks.
41:10 - But therefore, because we
have both sides of this,
41:13 - we should just be able
to connect them, right?
41:16 - In fact, it looks like
the only thing I can do,
41:20 - is just copy this webhook URL.
41:25 - I'm really, that's the
webhook handler URL.
41:28 - I'm gonna go ahead, I'm gonna click this,
41:30 - learn more, up here,
41:31 - because let's assume that we didn't know
41:34 - what we were gonna do.
41:35 - I'm gonna click up at this learn more.
41:40 - It talks about some things
that we could do, and it says,
41:43 - can't really use webhooks,
can use webhooks.
41:46 - Here's GitHub, that's great.
41:47 - I'm gonna make this a little
bit bigger for all of us.
41:51 - It's talking about making a webhook.
41:53 - Oh, look it's changed already.
41:55 - Before it was, it's
under integrations now,
41:57 - so already see these notes
41:59 - have changed a little bit, that's fine.
42:01 - There's the Captain Hook
joke, for GET updates.
42:06 - Let's see, let's keep on scrolling.
42:09 - Well, this looks important,
42:10 - to make a webhook message
display messages properly,
42:13 - it's really, really,
really, really, really,
42:16 - really important, the caps there got me,
42:19 - that you append /github to the end of it.
42:21 - Yes, like five really is important.
42:23 - Okay, it's telling us to go
over to our GitHub settings,
42:26 - like we had done before,
42:28 - and put the /github on there.
42:30 - Let me get back to that, let's get back.
42:32 - Here we are, here is my GitHub repo,
42:37 - and I'm gonna leave this old,
this old webhook in place.
42:41 - Let's go back into our webhooks here,
42:43 - and I'm gonna add a new one.
42:45 - You can have multiple webhooks
doing different things,
42:48 - and let's do that, let's just
explore what that feels like.
42:50 - I'm gonna add a new webhook,
and I'm gonna paste,
42:53 - before I copied, right?
42:54 - I copied from that Discord, I
clicked the copy URL button,
42:57 - so I have that there, except
then I copied the help,
42:59 - so that's not good, let's not use that.
43:02 - Let's go back to the Discord,
43:05 - and I'm gonna do this, copy webhook URL.
43:08 - Now, it says copied in the clipboard.
43:11 - I'm gonna come back over
here, and I am going to paste,
43:14 - and wow, that is a long URL
and I need to do something.
43:18 - I was reminded something
like five times, oh, right.
43:21 - Really, really important
to say /github at the end.
43:25 - There we go.
43:27 - Now, this handler is unique to me,
43:29 - so that you can tell that
this is whatever this is here.
43:32 - Yours is gonna look different than this.
43:34 - This is my specific user,
probably my specific channel,
43:38 - all encoded in there.
43:39 - I've added /github at the end,
43:42 - and the content type in those notes,
43:45 - I saw that it said, application JSON,
43:48 - what's nice about, of course
having two different webhooks,
43:50 - is we can do whatever we want here.
43:52 - I'm gonna click, just send me everything,
43:54 - everything that happens.
43:56 - Let's go ahead and send it, and
I'm gonna click add webhook.
44:02 - Okay, and fingers crossed.
44:06 - I am going to,
44:11 - un-star the event and
then I'm gonna star it.
44:14 - Ooh, I heard a little Discord beep,
44:17 - I think we got, I think we did it.
44:19 - I'm gonna go, oh, that was,
44:20 - that reveal wasn't as exciting
as it could have been,
44:23 - 'cause I wasn't here,
but look, there we go.
44:26 - A new star was added by craigsdennis,
44:28 - and there's that little avatar of mine.
44:31 - It's working, I think it could probably be
44:34 - a little bit more
celebratory, but check us out.
44:38 - We wired up two completely
separate services,
44:41 - (snaps) just like that.
44:42 - Pretty cool, right?
44:43 - We set out to do basically
just what we wanted.
44:47 - When someone stars our repo,
44:48 - everyone in the general channel
there will be able to see it
44:51 - and they can celebrate along.
44:53 - We saw how the nomenclature
was kind of interesting, right?
44:56 - Like we saw how both
services, GitHub and Discord,
45:00 - call it a webhook.
45:01 - One is the pushing side and
the other is the handler side.
45:04 - It's a little confusing, isn't it?
45:05 - But, what Discord is doing,
45:07 - by putting that trailing /github,
45:09 - is specifically formatting
that information
45:12 - that's pushed across from GitHub.
45:13 - It understands what is sent from GitHub,
45:15 - and it has specific
formatting for Discord.
45:19 - I don't know about you,
but I think for stars,
45:22 - I'd like to see it more sparkly.
45:25 - Give me some more emoji's
in there at least,
45:27 - you know, really celebrate.
45:28 - In order to do that,
45:30 - we'll need to handle that
GitHub request ourselves,
45:32 - and turn it into the format
that Discord is expecting.
45:35 - That sounds like a good idea.
45:38 - Let's get ready to write some code.
45:40 - There goes our no-code streak.
45:43 - Why don't you get up?
45:45 - Take a breath of fresh air,
45:46 - give those coding muscles a stretch,
45:48 - and be ready to come back
and dive into some code.
46:32 - We've got our GitHub event notifications
46:34 - broadcasting to our Discord channel.
46:37 - We're feeling pretty good about
46:38 - what we were able to accomplish,
46:39 - with just a little bit of configuration.
46:42 - But, we've decided that
we wanna make things work
46:45 - a little bit differently than the default.
46:47 - This is a very common scenario,
46:50 - and a good look at why sometimes
you can't solve everything
46:54 - with no-code solutions.
46:55 - There are often specific tweaks
46:58 - that your customers would like to make,
46:59 - that aren't necessarily exposed.
47:02 - Let's make our tweak.
47:04 - Let's make it so that when
someone stars our repo,
47:06 - we write out some emojis,
47:08 - and show a big picture
of our code's newest fan.
47:11 - Now, in order to do this,
we'll need to write a handler.
47:14 - I've written the boiler plate,
47:16 - or the beginning common bits
of the code, for us already.
47:19 - It's available in the repo.
47:22 - Before we dive in,
47:23 - I wanna take a quick
moment here to talk about
47:26 - some of the possible challenges
that we might to encounter,
47:29 - as we start developing
on our local machines.
47:33 - In order to get things
up and running here,
47:35 - I'm going to be using a lot of tools.
47:38 - Now, depending on where you
are in your coding journey,
47:41 - some of these tools might
be completely unfamiliar.
47:45 - I wanna assure you that it is okay
47:47 - for it to feel overwhelming,
we've all been there.
47:50 - Setting up these tools
is a one-time thing,
47:53 - but it definitely is a hurdle
that I don't wanna minimize.
47:56 - I've seen this frustrate folks
47:57 - to the point of giving
up their coding journey.
47:59 - Please don't give up.
48:01 - You are doing great and you
will make it through this.
48:03 - Ask for help, and remember,
48:05 - all of us have been through this.
48:07 - I've included instructions
for installation for all
48:10 - of the tools that we'll be using
here shortly, in the notes.
48:12 - Please, remember that you can pause me
48:15 - for as long as you need
to get things working.
48:17 - All right, let's do this.
48:20 - The first thing that
we're gonna need to do,
48:21 - is get this repository from
GitHub onto our local machines.
48:26 - The way you do that is by
clicking this code button.
48:31 - As you can see,
48:32 - there are several ways to
get ahold of this code.
48:35 - You could even download
a ZIP if you wanted to.
48:38 - However, I'm gonna suggest
that we use Git to do this,
48:41 - but like you see here, you don't have to.
48:45 - I'm using a Mac and I'm
going to start my terminal.
48:48 - I'm gonna do that by
pressing command+space,
48:51 - and typing, terminal.
48:52 - On Windows, this will be either
48:55 - your command prompt or your PowerShow.
48:58 - At the command prompt,
48:59 - I'm going make sure that
I have Git installed.
49:02 - I'm gonna type, git --version.
49:06 - There we go, and as long
as something comes back,
49:08 - you're all set.
49:09 - If not, you'll need to install, Git,
49:12 - there are instructions
in the teacher's notes.
49:14 - Git is a powerful
version control software,
49:16 - which lets you and your fellow developers,
49:19 - make and document changes to files.
49:21 - Now, using Git is unfortunately
49:24 - out of the scope of this course,
49:25 - but I highly recommend learning it.
49:28 - I've shared links in the notes,
49:29 - for where to pick up this
crucial collaboration tool.
49:32 - It makes things like we're
about to do, super convenient.
49:36 - I am going to navigate to where
I'd like to store this code.
49:40 - This is of course, a personal decision.
49:43 - I keep a code directory, or folder,
49:45 - right off my home directory,
49:47 - which is represented by
this tilde, in Unix land.
49:53 - I'm gonna change directories,
or CD, into that directory,
49:56 - and it's called, code,
49:58 - and I'm gonna make a new
directory here called, courses.
50:00 - I like to store the tutorials
and courses that I take,
50:04 - the code for them,
50:05 - I store them in a place called, courses.
50:08 - I'm gonna say, make der, mkder courses.
50:14 - Back at GitHub, I'm gonna
choose that I wanna get
50:18 - this using HTTPS.
50:19 - I could use SSH if I wanted
to, but I'm gonna use HTTPS.
50:23 - Typically I do use SSH, this is up to you.
50:26 - If you have it set up,
50:27 - this is something that you need to do,
50:28 - if this is your first time doing it,
50:29 - you won't need to set
anything up to make this work.
50:32 - I'm gonna copy this URL here.
50:34 - I'm gonna click this, I'm
gonna go back to my terminal.
50:37 - I'm gonna say, git clone,
and then I'm going to paste,
50:41 - so we've got that URL there.
50:42 - I'm gonna click this.
50:44 - What this does, is this pulls
a copy of all of the code,
50:47 - and puts it locally on my machine here.
50:51 - Now, that it's here, I'm gonna
change into that directory.
50:53 - CD web, and I'm gonna
press tab, webhooks course.
50:56 - Here we go,
50:59 - and I'm gonna open up this
whole directory in my editor.
51:02 - I use Visual Studio Code,
51:04 - and if you don't yet have an editor,
51:05 - I highly recommend this editor as well.
51:07 - It's pretty great, it's free,
there's tons of plugins.
51:10 - There are installation
instructions in the notes,
51:12 - so I'm gonna type code, and
then I'm gonna press dot.
51:17 - Awesome, here it goes.
51:18 - Let me make this a little bit bigger.
51:21 - The code that I wanna
draw your attention to,
51:23 - is over here in the code directory.
51:25 - I'm gonna click this to open it,
51:26 - and then I'm gonna look
at this express-discorder,
51:29 - this is what we're
gonna work on right now.
51:31 - We're gonna open up
this express-discorder,
51:33 - and in here in this server.js,
51:36 - this has the boiler plate
code that I was talking about.
51:40 - This is using a web
server called, Express.
51:43 - In the handler that we're going to handle,
51:46 - is a post from /github, and
then it will run this code.
51:51 - We'll take a look at this
code here in a second,
51:53 - but basically it means if,
51:56 - you make a post to this web
server, that's running here,
51:59 - this web server, at /github,
it'll run this code here.
52:04 - This code will run when a post happens,
52:06 - but in order to run this,
52:09 - we need to make sure that
we have Node installed.
52:13 - VS Code has a built-in terminal actually,
52:15 - so let's go ahead and use that.
52:16 - We're gonna go to
terminal and new terminal,
52:19 - and you'll see here that in the future,
52:20 - I can use control and then tilde.
52:27 - Nice, and so now it's
put me in the root there,
52:29 - so I'm gonna go into CD code/,
52:31 - and then I'm gonna go into
the express-discorder folder.
52:34 - Awesome, in order to run this server,
52:37 - we'll need to make sure that
you have Node installed.
52:40 - (chuckles) I told you
there were a lot of tools.
52:42 - Node is a JavaScript runtime,
52:44 - that allows you to run
scripts on your local machine.
52:48 - Let's check and see if
you have it already.
52:50 - I'm gonna go ahead and
type node --version.
52:54 - Now, as long as this first part here,
52:57 - this V, whatever, is 10 or greater,
53:00 - the code should work as expected.
53:02 - Now, if not,
53:03 - check the teacher's notes
for how to install Node.
53:05 - Once you have Node installed,
53:07 - you'll also have npm installed.
53:09 - npm is Node's package manager,
53:12 - and you'll find that it stands
for just about anything.
53:16 - I actually have quite a
bunch of fun with that.
53:19 - Let's just go to the page really quick.
53:23 - It stands for, nice paintings, Mondrian.
53:28 - What else does it stand for?
53:29 - Oh, does it not refresh every time?
53:32 - There we go.
53:33 - Nincompoops producing methane,
novelty plastic mustache.
53:36 - Okay, there we go.
53:38 - It stands for, Node Package Manager,
53:40 - but it stands for a lot of things.
53:43 - What I've done already,
53:44 - is I've built this package.json file,
53:47 - and it has in here some dependencies,
53:51 - and the dependencies
will come in and it will,
53:53 - they're gonna be installed
for you when we use npm.
53:59 - Let's install those things.
54:01 - We'll do that with npm install,
54:04 - and that will go and install
packages like Express,
54:06 - you know, the web server.
54:08 - It will also use Axios,
54:09 - which is a library that we can use,
54:11 - to make our own POST requests,
54:12 - 'cause we're gonna post
to, the Discord URL.
54:17 - We need to make POST requests,
54:18 - because we're going to post to
our Discord webhook handler,
54:22 - like right in here.
54:26 - It says, axios.post,
54:28 - and we're gonna post, oh, that reminds me,
54:30 - we're gonna need to store this someplace.
54:33 - 'Cause remember, that
that's private to you.
54:36 - It's your personal link,
and as you're about to see,
54:40 - you don't want anyone
getting their hands on it.
54:42 - If they just post to it, they
could post on your channel,
54:45 - and you don't want that happening.
54:47 - One way of dealing with the security,
54:51 - is to use what's known as
an environment variable,
54:54 - and what the code here is using,
54:56 - this process.env.DISCORD_WEBHOOK_URL,
55:00 - is accessing your environment variables.
55:04 - What I've done, is I've set things up,
55:05 - so that you can define
in a file named, .env,
55:10 - and that's right over here.
55:11 - That's short for environment,
55:13 - and you'll see that you
don't have one right now,
55:16 - 'cause we just check this out, right?
55:18 - What you're gonna do,
55:21 - is you're gonna want to
copy this .env.example,
55:24 - so we're gonna grab this file.
55:26 - We're going to,
55:29 - let's see, I'm gonna copy,
55:31 - and then I'm gonna click this,
55:33 - and I'm gonna click paste, right?
55:35 - I right clicked, or two-finger
clicked on a Mac, to do that.
55:39 - I'm gonna rename this file now, to .env,
55:45 - .env, here we go, and in here you'll see,
55:50 - that you need to get a
hold of your webhook URL.
55:56 - I'm going to go and
grab that from Discord.
56:02 - Back in my settings,
56:03 - remember in the channel
under integrations,
56:05 - under webhooks, I can view this webhook.
56:08 - Here's my GitHub notifier,
56:10 - and I'm gonna copy the webhook URL.
56:12 - I'm gonna come over here,
56:13 - and I am going to paste it and save.
56:16 - Now, I have a .env, and
this is my own private file.
56:22 - What's nice about that is,
56:23 - this code can now be shared, right?
56:26 - It's code that maybe
anybody can run, right?
56:30 - I was able to give this to you,
56:32 - and what made it personal for you,
56:33 - was you put stuff in your
environment variable.
56:36 - This is a common way to share code,
56:38 - but have the private information,
56:39 - like the stuff that's
unique to you, hidden.
56:42 - Okay, with that all set up.
56:45 - I think that we're ready
to spin up this web server.
56:50 - I'm gonna write npm start,
56:54 - and it says that it is
listening at local hosts.
56:58 - It's telling me I can command+click that.
57:00 - Let's go ahead and do
that, and thumbs up indeed.
57:03 - We did it, so we have a local
web server running, awesome.
57:09 - Whew, that was a lot of tools
to install in one video.
57:13 - Now, that we're all set up,
57:14 - we need to make it so that GitHub
57:16 - points to our local web server.
57:19 - Uh-oh, our local web server,
it's not on the internet.
57:24 - How can GitHub possibly see it?
57:27 - Let's take a quick break,
and when you come back,
57:29 - let's explore tunneling,
57:31 - so that webhooks can see our local system.
57:34 - We just got a local web server all set up,
57:37 - and it's ready to handle
events from the GitHub webhook.
57:40 - But, we have a slight problem,
our web server is local.
57:44 - Only we can see it, it's
not on the internet,
57:47 - and this is typically how
you do development, right?
57:50 - You develop locally,
57:51 - you get things working
the way that you want to,
57:53 - and then eventually,
57:55 - you deploy your web server
to a public-facing URL,
57:57 - so that the world can
visit your masterpiece.
58:00 - But, typically you only deploy after
58:02 - you've worked through all your challenges,
58:04 - you don't deploy right away.
58:06 - Now, this makes for an
interesting challenge
58:08 - in creating webhooks.
58:10 - In order for a webhook to work,
58:12 - we need to be able to make a
POST request to a public URL.
58:17 - Now, the good news is,
there are a lot of tools,
58:20 - and yes, I'm gonna have
you install another tool,
58:23 - sorry, but it's just one this time.
58:26 - What this tool does,
58:27 - is it opens up a tunnel
on your local machine,
58:30 - so that your application
can be publicly accessible
58:32 - from the internet.
58:34 - Now, this type of tool is handy also,
58:36 - for like if you wanna see your
application in development.
58:39 - Like, if you wanna look at
your phone or your tablet,
58:41 - instead of just your local machine,
58:43 - it's pretty handy and it's quick to use.
58:46 - All right, let's open up this tunnel.
58:49 - The tool we're going to
install is called, ngrok.
58:52 - The N stands for, network,
58:54 - and to grok something,
means to understand it.
58:56 - It's also a Unix tool
58:58 - that allows you to
understand unstructured data.
59:01 - What ngrok allows you to do,
59:03 - is open up a specific
port on your machine.
59:06 - Now, if you recall,
59:07 - our local server was running on port 3000.
59:11 - What we can do, is open up
that port to the internet.
59:15 - I hope that you'll grok
ngrok here shortly.
59:18 - First things first, get ngrok installed.
59:21 - Now, not be a broken record,
59:22 - but this page is bound to
look different in your future.
59:25 - Check the notes if you have trouble
59:26 - following along at any point.
59:29 - There's a download section,
so let's go in here.
59:32 - Let's go ahead, let's
download it, it's free.
59:34 - I'm gonna download this for Mac OS.
59:35 - I'm sure it'll detect where you're at,
59:38 - and what you get back is a ZIP file
59:41 - that has a command line executable in it.
59:43 - I'm gonna click that and open it up,
59:47 - and it automatically opened
up in my downloads directory.
59:50 - Go ahead and pause me,
59:51 - and try to find where your download went.
59:54 - Mine went into my downloads directory.
59:57 - I'm gonna go in my Visual Studio Code.
60:01 - I'm gonna open up another terminal here.
60:03 - You can do that with
this little plus here.
60:05 - Here's another terminal,
60:06 - and I know that that went
into my downloads directory.
60:12 - I can say, CD, my home
directory, and then downloads.
60:19 - And then, from here, I can say,
60:21 - in this directory run ngrok --help,
60:25 - we can just kind of, see what it does.
60:26 - There's the different
things that it can do.
60:30 - I use ngrok all the time,
so I've put it in my path,
60:33 - and that lets me run it
from wherever I'm at.
60:36 - Check the notes on how to do
this, it's totally optional.
60:38 - I will use the ngrok from
my downloads directory
60:41 - in these videos,
60:42 - but if you wanna add it to your path,
60:44 - 'cause you wanna use it all the time,
60:46 - check the notes and you
can get yourself set up.
60:49 - Okay, so I'm gonna go
back to my other tab.
60:55 - Looks like I have three open,
you can type exit there.
60:58 - I've got, the server is running,
61:01 - and it's running on localhost:3000.
61:05 - In my other terminal here,
61:08 - I'm gonna go ahead and ./ngrok,
61:12 - and then you say what you want to do.
61:14 - I'm gonna open up an HTTP port, right?
61:17 - Hypertext Transfer Protocol,
61:18 - and I wanna open it up on port 3000.
61:23 - If I do this, what happens
is, I get a brand new URL,
61:27 - and if I copy this, I copy this URL.
61:32 - You'll notice that
there's the HTTPS as well,
61:35 - which is pretty awesome.
61:36 - You get a HTTPS for free.
61:37 - I'm gonna go ahead, I'm
gonna copy that one,
61:39 - or actually I could command+click it.
61:41 - Let's do that, we'll command+click it,
61:42 - and it's gonna open up that webpage,
61:46 - and you'll see that this string
of numbers, if I did that,
61:49 - I could also open that up
on my phone or my tablet,
61:51 - and it would be working.
61:56 - I totally had that hairdo, by the way.
61:58 - So, because we can see
this URL, it also means,
62:01 - GitHub can now post its payload
to us and we can process it.
62:06 - Let's jump back,
62:07 - and let's take a little deeper
look at what's happening
62:09 - in that code in the server.js.
62:11 - Let's get back into that code there.
62:13 - See if we can get a little
more real estate over here.
62:16 - I can't, unfortunately,
62:20 - let's see maybe we can go a
little bit lower over there,
62:23 - is that all right?
62:24 - I think that's all right, okay.
62:28 - We are going to get a post to /github,
62:31 - and it's going to, it sets
up a couple of things.
62:33 - We've got this content,
62:34 - and we have this hard-coded avatar URL,
62:38 - and it's gonna post to our webhook URL.
62:41 - It's gonna post the content,
62:43 - which is what we said
here, should say, wave.
62:45 - This is an emoji, and
it should say, hi, Mom!
62:50 - I like to always debug with
my mom, whenever I can.
62:52 - And then, we're gonna
post, and then we'll get,
62:55 - we'll send back a success
message if it worked,
62:59 - and if not, we'll send out an error here.
63:01 - Well, let's run it.
63:03 - I'm gonna copy our
ngrok URL one more time.
63:06 - Just to make sure I've
got that in the clipboard.
63:08 - I'm gonna copy this,
63:10 - and I'm gonna take that over
to our GitHub settings, right?
63:14 - Let's get back.
63:15 - Here's the get GitHub course,
63:17 - I'm gonna go into the settings.
63:20 - Head over to webhooks,
63:22 - and I am going to add a new webhook,
63:28 - oh, and it's making me log in.
63:30 - I'm gonna use, let me
grab my password here.
63:36 - Okay.
63:41 - All right, so we're
gonna add that webhook.
63:46 - Again, I'm gonna copy that,
'cause I copied my password,
63:49 - so I'm gonna copy this
link here, the ngrok.io,
63:53 - and remember that we have
63:55 - a /github that we need to post too.
63:58 - Let's go in here, we're gonna paste.
64:01 - Let's get this (faintly speaking) off,
64:04 - and we'll say, /github.
64:06 - We want it to send JSON,
64:08 - 'cause I think that that's
easier to work with,
64:10 - and let's do, again,
64:12 - let's just select the individual events.
64:14 - We'll do a star, let's uncheck pushes.
64:19 - When you're just interested
in when somebody stars,
64:21 - and we're gonna go ahead and add webhook.
64:30 - Okay.
64:34 - Let's switch back to our Node server.
64:38 - Oh, it said, success.
64:40 - It said, success, does that
mean that we got a post already?
64:43 - Don't switch.
64:47 - Boom, we got it.
64:49 - As soon as you set it up, it
sends one, so there we go.
64:52 - Hi, Mom, and there's Dr. Tyson
amazed by what we just did.
64:57 - We sent a message from
GitHub, through our tunnel,
65:01 - to our local machine, back
out to the webhook handler.
65:05 - Awesome, boom indeed, Dr. Tyson.
65:08 - We got it, well kind of,
65:10 - I mean, we got the starts of it, right?
65:12 - Now, we can iterate our development
65:14 - until we get exactly what we want.
65:17 - Just like we saw with Beeceptor,
65:20 - I can actually use ngrok to
see what was passed to us.
65:23 - Let's go to the ngrok,
65:25 - go back to the ngrok window real quick.
65:29 - If I come, I'm gonna move
this up a little bit here,
65:32 - even a little bit more.
65:34 - I can see that there is,
65:35 - a post was made to our GitHub from GitHub.
65:40 - In here, there's this web interface.
65:42 - If you follow this link by
doing a command+click on it,
65:45 - you will see that this is the information
65:48 - that we got from GitHub.
65:49 - Now, let's go ahead,
65:51 - let's make sure that it's
working when we get a star,
65:54 - 'cause right now that just
worked from the original message.
65:57 - I'm gonna go to webhooks.
66:01 - I'm going to un-star and star.
66:04 - I think we'll get two, yeah,
66:05 - so you get one every time you star
66:07 - and every time you don't star.
66:08 - There was a new star added.
66:09 - That was from one of the bots
that we were pushing before,
66:11 - and then here's this one that we just did
66:13 - from getting a star on the thing, awesome.
66:16 - It's working and if we look
at our ngrok inspector here,
66:21 - we can see that this is
the message that was sent,
66:23 - and it was an action that was created.
66:25 - This is nice, right?
66:26 - We can see exactly what was sent,
66:27 - so we can hang out in here.
66:29 - Now, I realize that GitHub
also shows you this,
66:32 - and we could do this with Beeceptor,
66:33 - but once you get ngrok running,
66:35 - this flow is pretty
much all we need, right?
66:39 - We can see that there's the sender,
66:41 - there's the avatar that
we're gonna need to grab.
66:43 - I'd also like to show the
repository name, right?
66:48 - Let's take a look and see
if we can't find that too.
66:50 - The repository name, oh, this is great.
66:52 - This would be awesome here
to say the name of it.
66:55 - You can either use this name or full name.
66:58 - Those are what we wanna
grab from this JSON
66:59 - that just came in from the post.
67:02 - Let's take a look at that real quick.
67:03 - Since we already have the, in our code,
67:09 - let's back down here, in our code,
67:11 - we already have this
avatar URL defined here.
67:14 - Let's go ahead and let's
grab that from the request.
67:18 - How's that sound?
67:18 - We're gonna get rid of this hard-coded,
67:22 - Dr. Tyson-thing there,
and we're gonna get,
67:24 - from the JavaScript object
that's being passed in here.
67:27 - We have the request that
comes in, and on the request,
67:30 - there is a body and I
have it so that it is
67:33 - reading JSON for us, this boiler
plate is reading the JSON,
67:36 - so it knows about it.
67:38 - That was in .sender, right?
67:40 - At the bottom there.
67:41 - If we look,
67:45 - we were in down here,
67:48 - in sender we have this avatar URL, right?
67:53 - This is who starred it
and this is their avatar.
67:56 - I have this avatar URL, so
I'm gonna use that here.
67:59 - I'm gonna say req.body.sender.avatar,
and it was _url.
68:08 - Now, to make sure I got it,
68:11 - I'm gonna need to start
and stop my server.
68:14 - It's a little annoying, right?
68:17 - This is a little annoying to have to
68:18 - start and stop my server
to make sure that it works,
68:21 - but I will.
68:22 - Control+C, we'll get you out of that,
68:24 - and then I'm gonna do npm
start, to run that again.
68:29 - Now, my code is reloaded,
68:30 - but I don't wanna do that every time.
68:32 - I don't wanna stop, I don't
wanna control+C and do stuff.
68:35 - I know I said only one tool,
and you don't really need this,
68:40 - but I think you're gonna want this.
68:41 - There's a tool called, nodemon,
68:44 - that will watch your JavaScript files,
68:45 - and it will automatically
restart the server for you.
68:47 - It's really nice, and
I want you to have it,
68:50 - although I don't want to keep
on throwing tools at you,
68:52 - but let's, I'm gonna show
you how I install it.
68:54 - You don't have to use it.
68:56 - We're gonna do npm install,
or nodemon -g, for global.
69:02 - After you install this,
you can use it whenever,
69:04 - that's what the -g means there.
69:06 - Now, that this has been installed,
69:10 - we can say, nodemon start,
69:13 - it kind of looks like it says
no demon or like node, mon.
69:17 - Anyway, so here we go.
69:19 - Now, you can see that
if I add this, hi, Mom,
69:23 - and I add some more and I click save,
69:25 - it will restart the server,
69:26 - which is exactly what
we love, want, right?
69:28 - You wanna change, every time you save,
69:30 - you want the server to be
running your latest thing,
69:31 - it's a quick, rapid development thing,
69:34 - that once you get in
the handle, hang of it,
69:35 - you will love it.
69:37 - All right, so the server restarted,
69:40 - and back on the ngrok page,
69:42 - I don't know if you noticed this or not,
69:43 - but this is awesome.
69:45 - There is also, just like
on, there's a replay,
69:48 - so you can replay and you
can actually even edit it.
69:51 - But, I'm gonna go ahead
and click this replay.
69:53 - Ooh, there we go, ba-boop.
69:55 - Okay, so there we go, hi, Mom.
69:57 - There's my avatar coming through.
70:00 - My avatar URL is now there.
70:02 - Now, that's a pretty big
picture, I love that.
70:04 - That feels great, this is like,
70:05 - this is a new person who liked your code.
70:07 - Great, good feeling.
70:09 - We're doing good,
70:11 - and we really say, hi, Mom, now, right?
70:14 - Our change is live.
70:16 - Now, what we need to do,
70:18 - is we need to change the
content variable, okay?
70:22 - We need to change this content,
70:23 - so instead of saying, hi, mom,
70:25 - we need to make this
dynamic about who came in.
70:28 - Let's do this, I'm gonna
write a to-do here.
70:33 - I'm gonna write a to-do,
70:33 - so we'll say, to-do,
70:36 - change the content variable
70:41 - to contain the repository name and,
70:52 - the GitHub,
70:58 - username, and why don't
you add some emoji flares?
71:04 - You can explore, if you want to, in here,
71:09 - you can explore with, you know,
there's like rocket, right?
71:14 - There's a rocket-thing that you can do.
71:16 - If you just type colon
and then the name of it,
71:17 - you can start seeing what it is
71:19 - that you could do with emoji flare.
71:21 - Why don't you pause me,
71:23 - and see if you can complete this to-do?
71:26 - Use the request from
GitHub to do this, right?
71:29 - You can look over at your ngrok,
71:31 - and see what's going on there,
71:33 - and make sure that you
change the content of this.
71:36 - And then, go ahead and do a replay,
71:39 - and see if you can get
that content to be what
71:42 - you're happy with, when
somebody stars your repo.
71:46 - Give it a shot,
71:46 - and when you're done unpause me,
71:47 - and I'll show you how I did it.
71:49 - Remember, to use ngrok to see
what the request looks like,
71:52 - and to replay it, are you ready?
71:55 - Pause me.
(icon beeps)
72:00 - (icon beeps)
How'd you do?
72:01 - I hope it went well, and
don't sweat it, if it didn't,
72:04 - you'll get this.
72:06 - What I'm gonna do is I'm
gonna grab the username,
72:10 - and that was in
req.body.sender.login, okay?
72:18 - And then, I'm also gonna
grab the repo name.
72:23 - I like to pull these things out,
72:24 - just to make sure I got 'em.
72:26 - We'll say, req.body.repository.name.
72:35 - The sender is at the bottom,
72:36 - and the repository was up at
the top there, that request.
72:40 - What we can do is we can use
72:43 - a string template in JavaScript.
72:44 - We can say, one of these
back ticks like this, right?
72:49 - Then, we can say, $(username),
72:55 - just starred $(repoName),
73:00 - and this way you could have other people
73:04 - set up to their repos.
73:05 - You could share like,
73:06 - let's say we're in a
community of everybody who is,
73:10 - write some code together,
we can all run this.
73:13 - Because, this is our
own private Discord URL,
73:15 - you could let other people
run it in there GitHub,
73:17 - in their Discord webhooks,
or they can post to this URL.
73:21 - Awesome, so let's go ahead.
73:22 - I'm gonna save this, it's saved,
73:24 - and the server has restarted,
so fingers crossed.
73:28 - We're gonna go back over to our ngrok,
73:32 - and we're gonna click replay.
73:34 - We heard the little
Discord go, and it says,
73:36 - craigsdennis just starred
the webhooks course.
73:39 - Oh, shoot, I forgot my flair.
73:42 - Let's go back, let's see.
73:45 - I definitely think we need some tacos.
73:49 - I can't have enough
tacos, we got taco, taco.
73:54 - How about, let's definitely do the rocket.
73:57 - That's one of my favorites,
rocket, and I also like,
73:59 - ta-da,
74:01 - ta-da,
74:03 - taco.
74:05 - I will save, and again,
I'm gonna come back,
74:09 - and I am gonna replay.
74:11 - I heard the boop-boop.
74:13 - There we go, oh, beautiful,
so much flair, awesome.
74:17 - Pretty smooth workflow, right?
74:19 - I hope that gave you a
clear feeling of what
74:21 - developing a webhook handler
might feel like in practice.
74:25 - We saw how not only can
ngrok open up a tunnel
74:28 - to your local machine, but it
also provides the ability to
74:31 - review and store what was posted,
74:33 - and it even allows you to replay.
74:35 - It really speeds up your
development process.
74:38 - Now, I'm sure you're probably
wondering, well, great,
74:41 - but does this mean I have to
leave my local machine on?
74:45 - Of course, the answer is, no,
74:47 - but you're gonna need to
deploy your applications,
74:49 - so that GitHub can reach 'em.
74:50 - Now, if you don't have
an existing application,
74:53 - this can definitely seem daunting.
74:56 - You probably don't wanna
spin up a Heroku instance,
74:58 - just to host this single endpoint.
75:01 - That seems like a lot of work.
75:02 - One of the solutions that has
been gaining a lot of ground,
75:05 - is the idea of a cloud function.
75:08 - We'll take a look at
this here in a second,
75:10 - so that you can see how that feels.
75:12 - These make a really good solution
75:14 - for a quick webhook handler.
75:16 - I want you to get a feeling for it,
75:18 - as it's getting more and
more popular in this world.
75:21 - But, before we get there,
75:24 - you, my friend are due for a break.
75:26 - That was a lot of technology
and a smattering of concepts.
75:30 - I want you to take a break
and let it all soak in.
75:32 - I'd love for you to make sure
75:34 - that you can picture in your brain,
75:36 - the request from GitHub
coming to your handler,
75:39 - and your handler doing what it needs.
75:41 - Now, in our case,
75:42 - it's posting to a webhook handler
75:44 - that was already set up by Discord.
75:46 - I'd also like you to take a minute
75:48 - and realize that you can
now run any code at all.
75:52 - When an event that
supports webhooks occurs,
75:55 - you can handle it.
75:57 - That's pretty cool, isn't it?
75:59 - Now, as empowered as I felt
before by the no-code workflows,
76:02 - like IFTTT, these possibilities are
76:05 - actually quite limitless.
76:07 - Now, I could definitely
make my dog light up
76:10 - when I get a star, look, check this out.
76:11 - Just like this,
76:17 - dog star, Keanu would get that one.
76:20 - Okay, so after your break,
76:22 - let's swing back and check out
serverless cloud functions.
76:27 - (upbeat electronic music)
77:06 - Okay, we got our webhook
written and we're happy with it,
77:10 - but in order to run, we need a public URL.
77:13 - While our tunnel solves the problem
77:15 - for development purposes,
77:17 - it's definitely not production ready.
77:18 - Now, we could deploy our web server that
77:22 - we wrote and hosted somewhere.
77:23 - There are lots of providers that do that,
77:26 - and it's definitely getting
easier to deploy a web server,
77:28 - but even the server seems
a little heavy, doesn't it?
77:31 - We're really just taking some values,
77:33 - and quickly doing our thing
for a single request type.
77:37 - It's hardly a web application.
77:39 - Well, we're not loving this feeling.
77:42 - Succinctly, this feeling is,
do we even need a server?
77:45 - Could the project go without
one, could this be serverless?
77:50 - There's a growing movement
called, serverless,
77:52 - and it tackles this problem exactly.
77:55 - You don't need to worry about the server,
77:57 - someone else will handle it for you,
77:59 - and it will scale both
up and down for you.
78:01 - Now, this scaling both directions
78:03 - is referred to as, elasticity.
78:06 - Function-as-a-Service, or FaaS,
78:09 - is the idea at the core of serverless.
78:12 - Basically, you write a function,
78:14 - and you follow the specific parameters.
78:16 - The provider handles all
78:18 - the routing responses and scaling.
78:20 - All of the big cloud players
78:22 - have some sort of version of this,
78:24 - and typically the executions are free,
78:26 - until you hit a certain threshold.
78:28 - Even then, you only pay for
when the function executes.
78:32 - This can lead to tremendous cost savings,
78:35 - also because there's
only ever one function,
78:38 - it makes the code very easy
to read and understand.
78:42 - It's kind of like.
78:43 - ♪ Take me down to the
paradise elasticity ♪
78:45 - ♪ Where the FaaS is cheap
and the code is pretty ♪
78:48 - ♪ Oh won't you please
take me home, oh yeah ♪
78:52 - Is that too much?
78:53 - I really Axl Rose to the occasion there,
78:55 - I guess we can probably just
slash that part out later.
78:58 - Okay, fine no more puns,
79:01 - and roses.
79:03 - I thought you should have a taste of how
79:04 - the serverless development feels.
79:06 - I went ahead and got the solution
79:07 - all coded up and ready to deploy.
79:09 - There are a lot of serverless
providers to choose from,
79:12 - but one of my favorites
79:14 - to get up and running quickly is, Netlify.
79:16 - Now, standard warning is in effect.
79:19 - This flow that we're about to do
79:21 - is bound to look a little bit different.
79:23 - Netlify is always adding functionality.
79:26 - Another thing that I wanna point out here,
79:28 - before we dive in, this
is totally optional.
79:30 - You don't need to do this.
79:32 - I totally won't be offended
if you just watch me do this.
79:36 - I've signed up for a Netlify account,
79:38 - and I used my GitHub account,
79:40 - and I'm gonna head to
their docs really quick.
79:42 - They're right here in the header, docs.
79:45 - Now, what I wanna install is the CLI,
79:48 - or command-line interface,
79:50 - which allows us to run commands
79:54 - from our command line for Netlify.
79:57 - Let's go ahead, let's click this.
79:58 - Let's get started.
79:59 - Here's some great information on it,
80:01 - and we're gonna go ahead and install it,
80:03 - and we're gonna install it with a -g,
80:05 - which makes it go globally, okay?
80:09 - That means that we can use it wherever.
80:10 - I'm gonna come in here
80:11 - and I'm gonna run this right
from the root of the directory.
80:15 - It doesn't matter where we do it,
80:16 - 'cause we're gonna do it globally.
80:17 - This will install the Netlify package.
80:20 - What this will do, is we'll, here shortly,
80:22 - what we'll do is we'll authenticate,
80:24 - and it will allow us to do
actions on Netlify on our behalf.
80:31 - It's super powerful, it's great.
80:33 - You hardly ever actually need to leave
80:36 - your command line anymore.
80:39 - You just hang out in this editor.
80:40 - I think you're gonna love it.
80:42 - Okay, we are all set up here.
80:46 - Again, like I said,
80:47 - I had already started
porting this code over,
80:51 - and first though, let's log in first.
80:53 - If you do Netlify space login,
80:57 - I'm already logged in,
but what will happen,
81:00 - here I'll switch my account,
81:01 - so that you can see that I go through
81:03 - the same thing that you do.
81:04 - I'm gonna say, switch my account,
81:06 - and I am going to log into a new account,
81:09 - and it's gonna pop up
here, and it's gonna say,
81:11 - authorize this application.
81:12 - This is okay to do this,
this is what we wanna do,
81:14 - we wanna authorize that CLI, awesome.
81:17 - Now, we can, you can
also revoke at any time
81:20 - from the screen here inside
of Netlify after a login.
81:24 - All right, here we go.
81:25 - We are logged in to Netlify.
81:27 - I'm gonna take a look
at this directory here.
81:30 - This is the netlify-discorder.
81:32 - Open that up, and under
functions/discorder,
81:35 - there's a file called, discorder.js.
81:39 - This is very, very
similar to the local code
81:42 - that we had just looked
at, the Express code.
81:45 - There's a couple of things that
are a little bit different.
81:47 - The first thing that I wanna point out,
81:49 - is that this function is asynchronous.
81:52 - You can tell that, because it says async.
81:54 - What that allows you to
do, is then later await.
81:58 - You can see here that when this Axios,
81:59 - remember this is what we're
using to post to Discord,
82:02 - this returns, what's known as, a promise.
82:05 - It's a promise that in the
future there'll be a value.
82:08 - We handled this differently,
82:10 - when we were not in an async function.
82:12 - Let's just take a look at that real quick.
82:14 - If I open up the express-discorder
and I look at the server,
82:18 - you'll see that I did axios.post,
82:22 - and then down I used a .then,
and I got the response back,
82:25 - and then I played with
the response, right?
82:27 - This is a function that's
getting the response back.
82:30 - But, this function, when it was declared,
82:32 - is not asynchronous,
82:34 - and it's using a request and
a response, remember that.
82:36 - It's using the request,
82:38 - and we were able to pull
things off of the body before,
82:40 - so we were using req.body,
82:43 - and it was already a blown-up object.
82:46 - Just remember that, it's
a little bit different.
82:47 - Again, this is using a promise,
82:50 - and it's using the then pattern.
82:53 - Where what's different over in Netlify,
82:55 - is we are using an async method,
82:58 - which means that we're able
to do something like this,
83:02 - where we can say, await.
83:03 - Now, instead of it coming
through in a then function.
83:06 - this pauses and waits, and
then it goes here to go rest,
83:09 - so it actually runs synchronously,
83:11 - or it appears to run synchronously, right?
83:14 - What makes this different, is
before we were catching it,
83:16 - we were doing a then,
83:17 - and then we were doing
a catch on the error.
83:19 - Here, we're using a standard
JavaScript try and catch,
83:24 - very similar, just a little
bit different of a pattern.
83:27 - I know that that can hang some people up,
83:29 - so please check the notes,
83:30 - if you'd like to learn more
about asynchronous JavaScript.
83:35 - The other thing I really wanna point out,
83:36 - what's the main difference
that I had to do here,
83:39 - porting these things over,
83:40 - was before remember it
was request and response?
83:43 - This just has event, okay?
83:47 - What's expected is the
response you just returned,
83:50 - so I'm returning an object that
gives a status code of 204,
83:54 - instead of returning a response.
83:55 - That's what Express had expected,
83:58 - and event is basically the
request object, more or less.
84:01 - What you'll see here, is
event.body is a string,
84:05 - and in this case, it's
going to be a JSON string,
84:08 - and we're going to parse it into body.
84:10 - Then, the rest of the code is the same.
84:12 - I just made an object called, body,
84:13 - which is what was on the other request.
84:16 - It's just a little bit different,
84:18 - but pretty much the same code.
84:23 - This code we're gonna go
over into Netlify, Discord,
84:29 - we're gonna go into
code/netlify-discorder/, right?
84:33 - 'Cause, we wanna get our
prompt in the same place here.
84:36 - Now, this is using Axios, and
this also has a packaged JSON,
84:41 - and you'll see that it's got Axios.
84:42 - I'm gonna go ahead, I'm
gonna do an npm install,
84:46 - and there we go.
84:49 - Believe it or not, this
is ready to deploy.
84:52 - Watch this, this is awesome.
84:53 - We're gonna say, Netlify deploy,
84:55 - and we're gonna send this
up to the Netlify server.
84:58 - The way that this works,
84:58 - is anything that's in this
functions folder here,
85:01 - is going to become a serverless
function, let's do it.
85:04 - It's gonna ask, it's not
configured to a site,
85:07 - this folder that we're in right now.
85:08 - We want to create a brand
new site, so with that,
85:12 - that is what we wanna do, and here we go.
85:14 - It says, team Craig Dennis's,
85:16 - everybody with the last letter of S,
85:19 - knows what I'm feeling there.
85:21 - Yes, we do want Craig Dennis's team.
85:24 - All right, so we wanna
make a unique site name.
85:29 - They suggested,
super-cool-site-by-craigsdennis.
85:33 - Let's try gitubstars, 'cause
that's what we're doing, right?
85:38 - You'll have to choose something different,
85:39 - 'cause I'm gonna take it,
85:40 - and somebody else already took it.
85:42 - Don't you hate this though?
85:43 - People end up with like,
githubstars1925, so githubstarred,
85:51 - yes, I got it.
85:53 - I've got, githubstarred,
85:55 - and that's gonna be,
githubstarred.netlify.app.
85:58 - Now, it's asking what
directory do you wanna publish?
86:01 - And, it's that, it looks
like almost like an emoji,
86:04 - but it's a dot there.
86:05 - It says like, this current directory.
86:07 - Yes, that's the directory I
want, and would you believe it?
86:10 - But, we just pushed up to
a server, a live server,
86:14 - there's a function that's
running, and it's running.
86:17 - Let's go, I'm gonna jump in here
86:19 - in the admin side of things,
I'm gonna follow this link.
86:23 - I clicked that logs link
there, here we come.
86:26 - We are up, we are published
today, and let's drop out.
86:30 - Let's go take a look at these functions.
86:32 - It says, one Lambda function
is ready, and it's down here.
86:36 - It's this function.
86:38 - In here, whenever the function would run,
86:42 - this is what the function's name is.
86:44 - This is it here live, whenever this runs,
86:47 - the function log will show
86:48 - any sort of console log that
we have, pretty cool, right?
86:52 - I do have one little bit
of configuration to do.
86:56 - We need to set an environment variable
86:57 - for what our personal Discord
webhook URL is, right?
87:01 - That code, remember,
87:02 - I'm still using the environment
variables in that code.
87:05 - I need to put that
environment variable here,
87:08 - and that's under here,
87:10 - it's under settings, and then
it's under build and deploy.
87:18 - Here we go, environment variables.
87:20 - I'm gonna say, edit variables,
and our variable name,
87:24 - let's just verify we know
what that variable name is.
87:31 - It's inside this discorder file here,
87:33 - and we called it, DISCORD_WEBHOOK_URL.
87:38 - I'm gonna pop that into my
environment variable here,
87:41 - and the value that we want,
you can get that from Discord.
87:45 - Let's go, let's grab that one more time,
87:48 - just to remind ourselves where that's at.
87:49 - We're gonna click the
settings here, integrations,
87:52 - view webhooks, GitHub notifier,
87:56 - and I'm gonna copy the webhook URL, okay?
87:57 - I copied that.
87:59 - Come over to the build,
I'm going paste that.
88:02 - I'm gonna click save.
88:04 - Now,
88:06 - if I come back to my function,
88:09 - let's go ahead and get that URL again.
88:12 - It says that it is running in production.
88:17 - I'm gonna grab that, I'm
gonna head over to our GitHub.
88:26 - I'm gonna go in my webhook course,
88:29 - in the webhook course here under settings,
88:36 - under webhooks,
88:39 - let's go ahead and let's
edit this one, right?
88:42 - This is our local machine.
88:43 - This is the one that we
were doing last time.
88:44 - It's not gonna work,
88:46 - 'cause sometime I'm gonna
shut my computer off.
88:48 - I swear one of these days,
I'm not gonna have it on.
88:50 - All right, I'm gonna grab my password.
88:55 - I paste my password,
88:57 - and I'm gonna make sure that
I have the webhook URL copied.
89:01 - I'm gonna change that to be,
89:07 - that's not right, we don't
want the Discord web app URL.
89:10 - We want the githubstarred.netlify.app,
new site on Netlify.
89:16 - I'm gonna copy that,
89:19 - and I am going to paste
that into my webhook.
89:23 - There we go.
89:25 - Everything is still set, I'm
gonna update the webhook.
89:29 - I am going to get my
Discord into a good state.
89:34 - Here we go, let's star this thing.
89:37 - (computer beeps)
Ooh, I heard it.
89:39 - We get the new star added from here,
89:42 - where is the one from Netlify?
89:47 - What happened? Let's
see if we can debug it.
89:53 - Is this updated?
89:54 - Githubstarred,
netflify-discorder, what's this?
90:02 - This doesn't look like, maybe
we need to update the webhook,
90:05 - maybe it didn't update.
90:07 - Oh, here we go.
90:09 - Here's some failed
ones, let's take a look.
90:13 - What do we get in response?
90:16 - The URL argument must be of
type string, received undefined.
90:23 - Let's see, that's the same thing again,
90:26 - the URL argument must be of
type string, received undefined.
90:32 - Let's see.
90:38 - It doesn't like that
avatar URL, let's see why.
90:42 - We've got the body sender avatar URL,
90:46 - we're parsing the event body.
90:50 - I'm assuming that's what the 500 is.
90:52 - Let's look at our, we can
look at our logs though, too.
90:55 - Let's see if there's anything
that happened in the logs.
90:58 - It just says, that it ran.
91:01 - I didn't get an error there.
91:04 - Let's see, one more time what that said.
91:15 - Let's make sure that it has
a sender with an avatar URL.
91:19 - Sender avatar URL, yeah, it's still there.
91:22 - Sender avatar URL.
91:24 - Let's do a console log,
let's just show that off.
91:34 - I would say, console.logevent.body,
91:39 - and then we'll do afterwards, we'll say,
91:42 - console.log(body), okay?
91:49 - I'm going to, now I made the changes here,
91:51 - so I need to push them up.
91:55 - Publish that directory,
91:56 - and see it's a lot quicker
the second time around.
91:58 - All right, and let's go
replay that from GitHub.
92:04 - We don't want the delete one,
that was the deleted, right?
92:07 - Let's replay the one.
92:11 - Let's do it.
92:14 - (computer beeping)
92:17 - Well, there we go, now it's working.
92:19 - I don't know what that
was, something silly,
92:22 - but I wanted you to see.
92:26 - What you should seem is
that this should update.
92:37 - There we go, so see, I
can use console log here,
92:41 - to look at things.
92:42 - I'm not exactly sure what happened.
92:43 - I think what I'll do, is
I'll go back and watch this,
92:45 - but you don't need to do
the console log bits there,
92:48 - but that is how you deploy
and debug a function,
92:53 - in this one new world.
92:55 - The good news is, is that
this function is free,
92:58 - for a 125,000 executions a month.
93:02 - I don't think I'm gonna
run into that limit,
93:04 - but you never know, this is
a pretty killer repository.
93:07 - Oh, and while debugging with those
93:10 - handy-dandy console log
statements, on the production,
93:14 - might not be your style,
93:16 - and it really shouldn't be your style.
93:18 - You can actually run a local
Netlify dev environment,
93:23 - check the teacher's notes for that.
93:25 - I hope that gave you a good test drive
93:26 - of serverless functions,
pretty neat, right?
93:29 - These functions are especially
handy for webhook handlers
93:32 - and other one-off scripts.
93:34 - You literally could use a
function just like that,
93:36 - to kick off just about
anything that you can imagine.
93:40 - That's a lot of power.
93:41 - Now, remember on top of
being basically free,
93:44 - this will scale both
up and down with load,
93:47 - because that elasticity
93:48 - is at the heart of serverless technology.
93:51 - I've added links in the
notes to other serverless
93:54 - or cloud computing providers.
93:56 - All right, so now I hope
that you're feeling like
94:00 - you've got a pretty
good handle on webhooks.
94:03 - You understand why they're useful,
94:04 - you know what they can accomplish.
94:06 - You can see how you can
do just about anything,
94:09 - and you even understand
when you should use them.
94:12 - Really, that when is any time
94:14 - you wanna get notified
of an external event.
94:17 - Whenever you feel like pulling an API,
94:20 - check to see if they
support webhooks first.
94:22 - Basically, you're a pro,
94:25 - and I realize you might not feel like one,
94:28 - we've been focusing on just one event.
94:31 - Now, there are a couple of other platforms
94:33 - that deeply embrace the
concept of webhooks.
94:35 - I've got something planned
94:36 - that will really stretch
your new webhook muscles,
94:38 - and I hope it should
give you the confidence,
94:41 - and most importantly, the
practice that you need.
94:44 - Take a quick break,
94:45 - and then let's get started on
94:46 - the final project for this course.
94:49 - So far in this course,
94:50 - you've picked up the
essential skills that you need
94:53 - to make use of webhooks
in your applications.
94:56 - I thought we'd apply those
skills in a large project,
94:59 - using completely different
technology than we used thus far.
95:02 - This way, you can see how
your skills are transferable.
95:07 - When it comes to technology
that fully embraces webhooks,
95:10 - it's pretty hard for me
to think of anything else
95:12 - other than Twilio.
95:13 - Now, if you've seen my courses before,
95:16 - you know that I am pretty
obsessed with Twilio.
95:19 - When I saw that they used
95:20 - a video game to educate developers,
95:22 - I was like, I've gotta work at this place.
95:25 - Freeze frame, record scratch,
95:27 - (record scratches)
95:28 - now I'm a Twilion, and I'm in the game,
95:29 - but really I've loved Twilio,
95:31 - ever since I was introduced to it,
95:33 - I was at a JavaScript conference in 2012,
95:36 - and someone had built a scavenger hunt
95:38 - that you could participate
in by just texting a number,
95:41 - and it would respond with different hints.
95:43 - Now, not only was it fun,
95:45 - I was also impressed with how people
95:46 - were using the text messages
to build interactivity.
95:49 - You didn't need to install anything,
95:50 - you just text a number
and you were playing.
95:53 - It's a pretty incredible input device.
95:55 - Text messaging is just
one part of the platform.
95:58 - Really, any sort of
communication or engagement
96:01 - that you wanna have,
Twilio has an API for it.
96:05 - The way most of the products work,
96:06 - is that you buy a phone number
96:08 - and that number is yours immediately.
96:09 - You can use it to make calls and texts,
96:11 - and you can program what happens
96:13 - when people call into it or text it.
96:15 - People build all sorts of fun
96:17 - and creative things on the platform.
96:19 - In addition to a completely
cloud-powered call center,
96:23 - I've seen a video game
96:25 - get modified live through a text message.
96:27 - Somebody built a Smashmouth
hotline, which plays that one.
96:31 - ♪ Somebody once told me ♪
96:33 - When you call, it was such a
mean trick to give someone,
96:36 - when they ask for your number.
96:37 - There have been crisis lines
96:39 - that keep caller's number anonymous,
96:41 - and routes to an available person
96:42 - who can help in the time of need.
96:44 - I even saw a kid built a
fake snow day alert message,
96:49 - he got in trouble.
96:51 - You can build just about
anything you can imagine,
96:54 - and Twilio does most of
this magic through webhooks.
96:57 - We talked a while back
about lifecycle hooks.
97:01 - This is the concept where
the flow of the application
97:03 - allows you to hook into it and
the control is passed to you.
97:07 - You're responsible to respond
97:08 - with what the application should do next.
97:11 - That's the main concept for
what happens with incoming input
97:14 - to your Twilio number, a call
or a text message, right?
97:18 - The control of the application
97:19 - is passed to you via a webhook.
97:22 - There are a ton of other
webhooks that allow you
97:24 - to control what happens
at different times,
97:27 - when different events occur,
97:28 - continually passing control
back to your webhook handlers.
97:32 - Because, your handler is
any public accessible URL,
97:36 - your code can be in any
programming language.
97:38 - It just needs to respond
97:39 - with what you want Twilio to do next.
97:43 - Twilio's basically a webhooks playground.
97:45 - There are an impressive
amount of them to play with.
97:48 - Here's a couple of reasons for that.
97:50 - First off, Twilio has been
around for a long time
97:53 - so there's been lots of
time to build these events,
97:55 - to hook into, and to perfect that flow.
97:58 - For another reason,
97:59 - remember when we talked about
98:01 - the creator of the webhook
concept, Jeff Lindsay?
98:04 - Well, he was a Twilion,
98:05 - in the very early days of the company.
98:07 - I found that out researching
the history of webhooks,
98:10 - and it all made sense.
98:12 - I figure, what better place to show off
98:14 - your new webhooks skills,
is there than Twilio?
98:17 - First, we'll build a simple
affirmation text app,
98:20 - to get your feet wet.
98:21 - And then, we'll launch
into a larger project
98:22 - that will take ideas from
callers, record them,
98:25 - and text them to us, all with webhooks.
98:29 - All right, let's get started building
98:30 - this webhook-based application.
98:32 - In order to show off the
Twilio webhook basics,
98:35 - let's build a really simple
messaging application.
98:38 - What we'll build is an app that responds
98:40 - to any text message with, you've got this,
98:44 - just to give our texters
a little confidence boost.
98:46 - Turns out those three words go a long way
98:49 - when you really need them.
98:50 - Now, in order to get started,
98:51 - you're gonna need a Twilio account.
98:53 - Now, don't worry, it's totally free.
98:55 - Twilio offers a free trial,
98:56 - and they give you more
than enough free credit
98:58 - to build all of the
applications in this course.
99:00 - If you don't already have an account,
99:02 - go ahead and pause me,
99:03 - and follow the instructions
in the teacher's notes.
99:05 - After you get your free trial all set up,
99:06 - unpause me, ready?
99:09 - Standard word of warning.
99:11 - This is bound to look
a little bit different,
99:13 - as Twilio is always improving things.
99:15 - Check the notes
99:17 - for anything that might
function a little bit different.
99:19 - All right, I've set up a
free-trial account too.
99:23 - We should be having pretty
similar experiences.
99:26 - There are a couple of restrictions
with your trial account,
99:29 - which are listed up here.
99:32 - You can send messages and make
calls to verified numbers,
99:35 - and messages and calls include a note
99:38 - about this coming from
a Twilio trial account.
99:40 - Like, when we send this text message,
99:43 - when you get a text message back,
99:44 - it's gonna say, sent from
your Twilio trial account.
99:46 - Now, if you didn't already
get your free trial number,
99:50 - go ahead and do that.
99:52 - Get a trial number, go ahead, click that.
99:55 - That's gonna give you
one, 203, that's great.
99:58 - I'm just gonna choose this number,
100:03 - and right away, this number is all mine.
100:07 - With a paid account, you could get more,
100:09 - we only need, everything
that we're gonna build here,
100:11 - we just need this one phone number,
100:13 - and it doesn't matter that it has
100:14 - the trial message stuff on it
for what we're gonna build.
100:17 - All right, let's do it.
100:19 - Remember what we're going to do,
100:21 - is we're going to make it
so that if anybody texts
100:24 - this brand new number that we just bought,
100:26 - we're gonna return back
a nice affirmation.
100:29 - To do that, I am gonna
navigate to my numbers.
100:33 - Over here, there's
these little three dots,
100:36 - all products and services,
100:37 - and I'm gonna choose phone numbers here.
100:39 - You'll notice that there's
this little pin icon.
100:42 - If you pin that,
100:43 - it will make it so that
it's part of the menu.
100:45 - When you come back in
here, you can find it.
100:47 - There's a ton of products.
100:48 - I'm gonna pin it right now, let's do that.
100:51 - You'll see here's the menu now,
100:52 - I've this phone numbers thing here.
100:54 - Let's go into our phone numbers.
100:57 - Again, this is our demo one, my demo one,
101:00 - you have a different demo one.
101:01 - I'm gonna click into that,
101:04 - and I'm gonna scroll down
on this configure page.
101:07 - You'll see voice and fax.
101:08 - Yes, you can actually send
faxes, actually comes in handy,
101:12 - I don't know if you have a
fax machine anymore, I don't.
101:17 - I'm gonna scroll down here to messaging,
101:19 - and you'll see it says, messaging.
101:21 - When a message comes in,
101:23 - send it to this webhook via an HTTP post,
101:26 - send it to this webhook.
101:27 - That is supposed to
return the instructions
101:30 - that Twilio is expecting.
101:32 - Now, the format that's expected is TwiML,
101:35 - or Twilio Markup Language.
101:37 - Just like HTML renders your webpage,
101:40 - TwiML renders your application.
101:43 - I'm actually gonna change this
from webhook to TwiML Bin.
101:48 - A TwiML Bin is a handy way
to return these instructions.
101:52 - You don't need to spin up your own server,
101:53 - this is taken care of for you by Twilio.
101:56 - It's a serverless solution,
so here, I'm gonna make one.
101:59 - I'm gonna do that by clicking
this plus button here.
102:01 - I'll say, plus,
102:02 - so I am going to name my TwiML
event so I can find it later.
102:06 - I'm gonna call it, affirmation.
102:08 - Now, TwiML is tag-based
and case-sensitive,
102:12 - so I'm gonna say, and all of
them start with a response,
102:15 - so response, response, okay.
102:20 - We want to add a tag that
sends back a message,
102:24 - and that tag is actually, message.
102:29 - We'll say, you got this!
102:32 - I'm gonna drop a muscly icon in here,
102:36 - just to really get the point across.
102:39 - There we go, and then I'm
gonna close this message tag.
102:42 - Awesome, and you'll see that there's some,
102:44 - it'll tell us whether or
not we've got it good.
102:46 - It says, this is good,
valid messaging TwiML.
102:50 - Let's do it, let's go ahead.
102:51 - We're gonna click create on this,
102:52 - and now you'll see messaging,
when a message comes in.
102:55 - Go to this TwiML event called,
affirmation, return that.
102:58 - Need to remember to save
the number, all right.
103:03 - Now, I'm gonna pull out my phone,
103:07 - and I am going to text my number there.
103:11 - 203-902-5283,
103:15 - and what I expect, whatever I send, right?
103:18 - It immediately, it's gonna
send back, you got this!
103:21 - I'm gonna say,
103:24 - I'm having a hard time with JavaScript,
103:30 - and it says, you got this.
103:33 - You're right, I do got this, thanks.
103:36 - Awesome, okay, so that is basically
103:39 - the "Hello, World!" of TwiML webhooks.
103:43 - That's pretty awesome, right?
103:44 - It's a good use, it's like,
when a message comes in,
103:47 - send it to this webhook.
103:48 - Now remember, this could
be any programming language
103:52 - or tool that returns a valid TwiML string.
103:55 - You can return this
from any web application
103:57 - that you have existing already.
103:58 - And, this TwiML Bin that we used,
104:01 - because we didn't have
a server up and running,
104:04 - it's a serverless solution.
104:06 - Twilio's hosting it for us, and
handling the scaling for us.
104:10 - Like, we don't need to
worry about that at all.
104:12 - More of this in the teacher's notes.
104:13 - Pretty great, right?
104:16 - We now have a way to respond to
104:17 - any incoming message to our number.
104:19 - While we're currently only
using a static solution,
104:21 - we could definitely build a dynamic,
104:23 - a handler that did whatever we wanted.
104:26 - This is like our handler that we used
104:28 - for posting to Discord.
104:29 - This could be whatever you could dream up,
104:31 - and you can respond with
a valid TwiML string
104:34 - to continue the application.
104:36 - We'll get to some more local
development here in a second,
104:39 - but first, I think we should
explore a low-code tool
104:42 - used to build complex
serverless workflows.
104:45 - Okay, my next idea for
an app is a little meta.
104:49 - I would love to have a call-in line,
104:51 - where anyone could call
and describe their ideas
104:53 - for cool webhook implementations.
104:55 - I love hearing all your ideas,
104:57 - and I find that when I
discuss things out loud,
104:59 - it greatly increases the
likelihood that I'll get it done.
105:03 - Let's do that, let's build
a hotline that prompts
105:05 - the caller to record their idea.
105:07 - Once the idea is recorded,
let's transcribe it,
105:10 - and then text it to ourselves.
105:12 - We took a look earlier
at some no-code solutions
105:15 - that were powered under
the covers by webhooks.
105:18 - Well, Twilio provides a
low-code, serverless solution,
105:20 - that allows for rapid development
105:22 - and prototyping of applications.
105:24 - It's called, Studio,
105:25 - and like most no-code or low-code tools,
105:28 - you'll find that you can
build a lot of solutions
105:30 - just by dragging some objects around.
105:32 - Let's build the first part of
an application using Studio.
105:35 - We'll make sure to keep
our eyes out for webhooks.
105:39 - Hey, future you, this is for
sure going to look different.
105:42 - You'll find that almost all
no-code tools rapidly iterate
105:46 - on their UI daily to make
things more quick and clear,
105:50 - and I'm always pleasantly
surprised when I open up Studio.
105:53 - I'll update the notes on any
changes that might've occurred,
105:56 - since right now in my timeline.
105:59 - All right, let's do this.
105:59 - Okay, so we are in our Twilio console.
106:03 - I'm on the phone number page currently,
106:04 - and I'm gonna jump over to Studio.
106:06 - That's this, these three
little dots over here,
106:09 - and I am going to scroll
down, into runtime,
106:14 - and I'm gonna choose Studio.
106:15 - I don't wanna do that
scroll again, so again,
106:18 - I'm gonna pin that, so that
shows up in my little menu here.
106:21 - I'm gonna go to Studio,
106:24 - and I'm going to click
this, create a flow button,
106:28 - 'cause that's what we're going to do.
106:29 - We're gonna create a brand new flow.
106:31 - Let's do that, I wanna call
this flow, idea catcher,
106:37 - and we'll say, next, and you'll see,
106:39 - there's a bunch of
templates that we can use,
106:41 - but let's just start from scratch.
106:43 - We have a pretty straightforward
way of doing this.
106:45 - Let's go ahead, let's just go, next.
106:49 - That looks like the dork
that starred my repo.
106:55 - This here is called, the canvas,
106:58 - and what you do, is you
drag widgets onto it.
107:02 - Let's see, when someone calls,
107:04 - we should tell them what
we're expecting them to do.
107:09 - I am going to grab this, say and play,
107:11 - because I want it to say
what we want them to do.
107:13 - I'm gonna drag this over,
107:15 - and we're gonna drop it right here.
107:18 - Now, that it's out here, I can click it.
107:20 - What will happen is over here,
these properties will change.
107:25 - This say widget allows
us to do text to speech.
107:32 - I could also give it an
audio file if I wanted to,
107:34 - that's in here, I can
make it play a message,
107:35 - but we're gonna have it say a message.
107:36 - We'll do text to speech, so let's see,
107:39 - I want it to say, hello there,
107:43 - I'd love to hear your wonderful idea.
107:53 - Tell me about it after the beep.
107:59 - All right, so these
other fields down here,
108:02 - they are optional,
108:03 - but they're here, might as
well fill 'em out, right?
108:05 - Let's make it English,
and let's choose a voice.
108:08 - I'm gonna choose, Kendra-Neural.
108:14 - This is from Amazon Polly,
108:16 - all these voices are from Amazon Polly,
108:18 - and this is Kendra-Neural.
108:20 - It's kind of got this
fun, those days of like,
108:23 - those robo voices are gone.
108:26 - I remember when,
108:28 - Texas Speech first came out,
108:29 - and it couldn't even say cheeseburger,
108:30 - it was like, chaz-ebbiger.
108:32 - I'm calling, Kendra.
108:34 - I'm gonna leave her there,
108:35 - and we can make a loop a
certain number of times.
108:37 - That is feeling pretty good.
108:41 - I'm gonna click save to update the widget.
108:44 - We want this to be said
when somebody calls.
108:47 - What we're gonna do, is we're
gonna drag from this trigger,
108:50 - note, this is like a webhook, right?
108:52 - We're gonna say, when
an incoming call comes,
108:55 - we're gonna go to this here, awesome.
108:59 - That's probably enough to test, isn't it?
109:03 - Don't you think?
109:03 - The way that these work,
109:04 - is you can see that I made four changes,
109:07 - but I'm gonna go ahead and
I'm gonna click publish here.
109:09 - We're gonna publish the flow.
109:12 - It gives us a little bit
of warning ahead of time.
109:13 - Now, this is ready to use.
109:15 - I'm gonna go into, back to my number,
109:19 - and I am going to come into my number,
109:25 - and I'm gonna scroll down here.
109:26 - Under the voice and fax section,
109:28 - so when a voice call comes
in, when a call comes in,
109:31 - we want to use a Studio flow,
109:33 - and we can choose our flow of
idea catcher and click save.
109:38 - Awesome, now I am going
to call that number,
109:46 - and I'll put it on speakerphone here.
109:49 - - [Man On Phone] You have a trial account.
109:50 - You can remove this message at any time
109:52 - by upgrading to a full account.
109:54 - Press any key to execute your code.
109:57 - (phone beeps)
109:58 - (phone ringing)
109:59 - - Here comes Kendra.
- Hello there,
110:00 - I'd love to hear your wonderful idea.
110:03 - Tell me about it after the beep.
110:07 - - There's Kendra, it's
telling us about the beep.
110:10 - That's awesome, right?
110:11 - We got that up and running, very easily,
110:13 - going through a webhook, and again,
110:16 - that's really rendering
TwiML behind the scenes.
110:20 - It works, so now here's the trick,
110:22 - that flow that we built is
actually a webhook handler.
110:27 - It actually has a URL, that little menu,
110:29 - this little like, select the flow,
110:31 - it's kind of hiding it from you,
110:33 - but it really is just an URL.
110:35 - What's really happening,
is when a call comes in,
110:38 - and Twilio posted this URL,
our flow returns TwiML,
110:41 - in this case, it's the say
TwiML (faintly speaking),
110:44 - which is very similar to
the TwiML that we wrote
110:46 - to send the message.
110:47 - But, the low-code solution
has that hidden away.
110:50 - Now, this is very common in
these low-code solutions.
110:54 - They abstract away the cogeneration
110:56 - and all the webhook handling, okay.
111:00 - Next, we want to record
what our callers say.
111:02 - Let's go back to our flow,
111:04 - so I'm gonna jump back into Studio.
111:07 - I'm gonna click this idea catcher,
111:09 - and get back into our flow here.
111:11 - Now, we want to record,
111:12 - so I'm gonna drag out
this record voicemail.
111:15 - We'll drag this out here.
111:17 - Awesome, and let's take
a look at its setting.
111:21 - If I click onto it,
111:22 - we can see that it will stop
recording after five seconds,
111:26 - or you can make it stop on,
if somebody pressed the key.
111:29 - Ooh, and 3,600, that's 10 minutes.
111:34 - Oh, sorry, that's an hour.
111:35 - 3,600 seconds is an hour,
and that's more than enough,
111:40 - even for chatty folks, who
have very detailed ideas,
111:44 - like myself, very chatty.
111:47 - Okay, cool, so we also can
transcribe the audio to text.
111:51 - We want that for sure.
111:52 - I'm gonna click that on, and look at this,
111:55 - we have a transcription callback URL.
112:00 - I know what that is, that's a webhook.
112:01 - That is a webhook, isn't it?
112:04 - But, what is actually gonna happen,
112:07 - when that transcription comes?
112:09 - I know that I could go up here.
112:10 - I could probably go to this
help here and figure that out.
112:14 - But, if there was only
a tool that we could use
112:16 - that would just allow us to
put some random URL there,
112:19 - so that we could see the results,
112:20 - so we could capture what was sent.
112:23 - Wouldn't that be nice?
112:24 - Wait a second,
112:25 - there was something that we
used earlier, wasn't there?
112:28 - Do you recall what it was?
112:30 - You wanna try and do this yourself?
112:31 - If so, go ahead and pause me,
112:34 - and get a web-based URL in here,
112:36 - that we can use to see what
values are posted to it.
112:40 - Are you ready?
112:41 - You can do this, pause me.
112:43 - (icon beeping)
112:45 - Okay, ready, how'd you do?
112:47 - The tool that I was
thinking of was Beeceptor.
112:51 - I'm gonna head over there really quick,
112:52 - jump over to Beeceptor again.
112:56 - I'm gonna create a new
one called, recording,
113:00 - 'cause that's what
we're looking at, right?
113:01 - We're looking at this
recording thing here,
113:04 - and we have that up and running.
113:05 - Now, we know that we
have this Beeceptor URL.
113:07 - I've got this, I'm gonna copy this,
113:10 - I'm gonna come back over here.
113:12 - In the transcription URL, I'm
gonna paste the recording,
113:16 - and I'm gonna make my own thing up here,
113:17 - we'll say, transcription.
113:22 - Let's see, do we wanna play the beep?
113:25 - Yes, we definitely wanna play a beep,
113:26 - 'cause we said that, right?
113:28 - We also have a recording status callback.
113:30 - I think we just need the
transcription right now, right?
113:32 - We don't really need to have,
113:34 - to know when a recording is available,
113:37 - but look, there's another webhook.
113:39 - All right, so I'm gonna click save,
113:41 - and then I want to connect
these two together.
113:43 - It says, when audio completes,
we want it to go to this one.
113:48 - You can see that there's,
if you had more here,
113:50 - you could choose different
things to happen,
113:52 - when different transitions
happen in each of these widgets.
113:55 - Okay, so an incoming call is gonna come,
113:58 - it's gonna say, hello there.
113:59 - It's gonna record the voicemail,
114:00 - and that voicemail should
be sent to our place.
114:05 - I'm gonna click save, and
I'm gonna click publish,
114:08 - and now I don't need to
go update my number again,
114:11 - 'cause it's already
set to the flow, right?
114:13 - It's already set to this flow.
114:15 - It should be working now.
114:17 - If all is working as planned,
when I call this number again,
114:22 - when I call my number and leave a message,
114:26 - we should see a webhook
kick off here, let's do it.
114:30 - - [Man On Phone] You have a trial account.
114:31 - You can remove this message at any time
114:33 - by upgrading to a full account.
114:35 - Press any key to execute your code.
114:38 - (phone beeps)
114:39 - (phone ringing)
114:41 - - [Kendra-Neural] Hello
there, I'd love to hear
114:43 - your wonderful idea.
114:44 - Tell me about it after the beep.
114:47 - (phone beeps)
114:47 - - Yeah, so I have this idea,
114:49 - where I'd like to set up a call line
114:51 - where people could call
in and record their ideas,
114:54 - that's my idea.
114:59 - Now, hopefully I hung up,
115:00 - and hopefully we should
see here in a second.
115:02 - We should see our message
has been recorded,
115:05 - and it's being transcribed right now.
115:06 - When the transcription's done,
115:08 - we should get pinged over
here, if all is working.
115:12 - I'm trying to be patient.
115:15 - There it is, so we got
to post to transcription.
115:18 - I'm gonna take a look at that.
115:20 - I clicked this and it's in the new format.
115:22 - Let's scroll this down here.
115:24 - We can see we've got a
bunch of stuff that came in.
115:30 - Let's see, I called that number.
115:31 - Ooh, there's my number.
115:33 - Feel free to call, I guess.
115:37 - Here we go, transcription to text,
115:38 - so it says, yeah, so I have an idea
115:40 - where I'd like to set up a
call line where people call
115:41 - and record their ideas,
yeah, that's my idea.
115:43 - That's pretty great, but
that's exactly what I need.
115:46 - I need that transcription-text
field that comes across,
115:50 - that's submitted to my webhook.
115:53 - I need that transcription text,
that's what I need, awesome.
115:57 - Now, that we've got a webhook event,
115:58 - we can write any sort
of handler that we want.
116:01 - We definitely now have the,
116:02 - message has been transcribed, event.
116:05 - We can do whatever we
want with that event.
116:07 - We could very easily send
that text to Discord.
116:10 - Now, to complete our app,
116:12 - we're gonna have to have this
event send a text message.
116:15 - Now, I'm excited to show you this,
116:17 - as it's super common to
want to send a text message
116:20 - from your webhook handler.
116:21 - There are so many, when
this one event occurs,
116:23 - text me about it.
116:25 - All those ideas are out there,
116:26 - and they're just waiting to be fulfilled.
116:28 - Let's develop the solution locally,
116:30 - using the local-development tools
116:31 - that we learned about earlier.
116:33 - We now have a transcription
webhook event that's happening.
116:36 - We saw in Beeceptor what
the format looked like,
116:39 - and we saw what we wanted.
116:41 - We are ready to handle it.
116:42 - We are going to text that
transcription to ourselves.
116:47 - It doesn't seem like that big
of an application does it?
116:49 - Now, I could spin up a whole web server
116:52 - to handle this request,
116:53 - but that sure seems like a lot of work,
116:55 - for a simple, little application.
116:57 - Do you remember this feeling from before?
116:59 - Now, we solved it by using
a serverless function
117:02 - on the Netlify platform.
117:04 - Because, this sort of one-off
handler is very common,
117:07 - Twilio also provides
serverless-function capabilities.
117:11 - What do you say, we get one
of these serverless handlers
117:13 - up and running to send
our text messages out?
117:16 - Guess what?
117:17 - I am going to ask you
to install some tools,
117:20 - but they're super handy
and should be pretty quick.
117:23 - The first thing I'd like for
you install is the Twilio CLI,
117:27 - or command-line interface.
117:29 - This is very much like what
we installed for Netlify.
117:32 - It will let you authenticate
and send commands to Twilio,
117:36 - from the comfort of your own terminal.
117:38 - I love it.
117:40 - If you're a Homebrew user on a Mac,
117:42 - you can install things using Brew,
117:45 - check the teacher's notes for that.
117:46 - We're gonna use npm to install it.
117:48 - We're gonna say npm install, twilio-cli,
117:54 - and we're gonna do this with a -g,
117:56 - which means it's installed globally,
117:59 - and we can run it from wherever we need.
118:04 - Cool, and now we're gonna do,
much like we did with Netlify,
118:08 - we're gonna say Twilio login.
118:10 - This is gonna ask us for our account SID,
118:13 - or string identifier for our account,
118:16 - for our Twilio account.
118:17 - Let's open that up.
118:19 - Let's jump into here,
118:24 - let's go back to the home,
the console dashboard.
118:30 - Your account sits here.
118:31 - There's a little copy button here,
118:33 - so I'm gonna click that and copy that.
118:34 - I'm gonna pop back over to my
terminal, paste that there,
118:39 - and then we will go grab the auth token,
118:44 - which is a secret token that
you should never let out.
118:47 - You can get rid of it, and
I will get rid of it later,
118:50 - in case mine ever ends
up showing to you here,
118:53 - but you don't wanna let that out.
118:54 - That's a secret, secret,
so I pasted, there we go.
118:59 - I am going to call this,
119:02 - I'm gonna call it, my webhook account.
119:04 - I'm gonna call it, webhooks, awesome.
119:08 - The CLI supports plugins,
119:09 - and one of my absolute favorites
is the serverless toolkit.
119:13 - We're going to use it to set
up and deploy our function.
119:16 - Let's go ahead and install it.
119:18 - Now, this is in the notes,
119:19 - if you wanna copy and paste this,
119:22 - but you would do Twilio plugins install,
119:26 - and then @twilio-labs/
and plugin-serverless.
119:40 - If everything is working as planned,
119:43 - you should be able to
write, Twilio serverless,
119:46 - and get some response back, awesome.
119:48 - There are the things that we can do.
119:51 - I am going create,
119:53 - a new Twilio serverless project.
119:59 - In this directory where we're at, up here,
120:01 - so there's this directory called, code.
120:03 - I made one called, Twilio.
120:04 - There's some light changer code in here,
120:05 - that you can look at later.
120:07 - Just kind of, a little
added bonus here for you.
120:11 - Let's go, let's jump into that directory.
120:14 - We're gonna go CD code/twilio,
120:18 - and then inside of this directory here,
120:21 - what we're gonna do,
120:21 - is we're gonna make a
brand new server list,
120:26 - Twilio serverless project.
120:28 - We're gonna use the
serverless plugin to do that.
120:31 - We're gonna say, Twilio serverless:init,
120:37 - and then you name it.
120:39 - Let's call this, idea catcher, right?
120:41 - 'Cause, this is the thing
that we're gonna write to,
120:44 - we're gonna post to this,
120:45 - and then we're gonna make
this thing text to us.
120:48 - We'll do --empty, there's lots of,
120:52 - if you don't specify empty,
like we saw with the Studio,
120:56 - there's lots of templates
that you can use.
120:57 - I think we're gonna start from scratch,
120:59 - 'cause I think it's clearer,
121:00 - in the direction that
we're headed right now.
121:04 - This is preparing a new directory,
121:05 - so it will be all ready for us.
121:08 - Let's go ahead, try to get to the,
121:12 - we're gonna go over into idea catcher now.
121:16 - You'll see up here, there's this Twilio,
121:18 - and we have idea catcher here,
121:20 - and let's take a look at what it added,
121:22 - it added some stuff for us, awesome.
121:25 - You'll see that there's
a folder for functions
121:26 - and there's one for assets.
121:28 - Let's go ahead and let's make a new file
121:30 - in this functions here.
121:32 - I am going to click this
little plus button here
121:36 - to add a new file into this directory,
121:38 - and I'm gonna call it, sendtext.js.
121:45 - All right, this is the
standard boiler plate
121:48 - that you'll need, it's in
the teacher's notes too,
121:51 - if you wanna just copy that.
121:52 - Exports.handler, we're gonna write
121:55 - a function called, handler,
121:56 - and it takes a context, an
event object, and a callback.
122:02 - All right, and we will
make a function there.
122:06 - Callback is how you complete the function,
122:09 - and it's important,
122:10 - because of that asynchronous
nature of JavaScript,
122:13 - you can complete the
function anywhere really.
122:16 - Just to make sure that
we got things working,
122:18 - I'm going to call it.
122:20 - Now, it's a standard-node
callback function.
122:23 - That means that it takes
its first parameter,
122:25 - is any sort of error that occurred.
122:28 - We're not gonna be expecting
any errors with this,
122:31 - and we'll debug, we'll just do my typical,
122:33 - hi, Mom, awesome.
122:37 - The toolkit allows us to run
our own functions locally,
122:41 - so that we can test them,
so let's spin that up.
122:43 - To do that, you do
Twilio serverless start.
122:50 - Awesome, and you'll see that it now says,
122:52 - that there's a function
available on local host 3000.
122:55 - If I go ahead and I click
that, I got, hi, Mom.
122:58 - Hi, Mom, how you doing, Mom?
123:00 - All right, and you'll see in the logs,
123:03 - I've got a 200, and it made
a git request to send test.
123:07 - Excellent, now this server
that we have up and running,
123:10 - is hot reloadable,
123:11 - just like we saw with nodemon or node-mon.
123:15 - This means that you can make a change,
123:18 - and it will be applied
123:19 - without you needing to restart the server.
123:21 - Let's add a little console log here.
123:24 - We'll say, console.log.
123:27 - We're gonna be sending a
text here, sending text.
123:33 - Awesome, so now if I go and
I refresh my mom page again,
123:37 - I did a command+R there,
control+R to do a refresh,
123:42 - and if we look back,
123:44 - we'll see that the console
log popped out here.
123:47 - Again, another 200 (faintly speaking),
123:50 - awesome, without needing to restart.
123:54 - Totally speeds up the development cycle.
123:56 - Speaking of which, let's
get to quickly developing.
123:59 - Okay, so okay, we need
to have our Studio flow
124:04 - post to our server, uh-oh,
our machine is local.
124:09 - We're going to need to
have some way for our flow
124:13 - to be able to see our local server.
124:15 - Do you remember how we did that before?
124:17 - Wanna pause me and see if you can somehow
124:19 - get a public URL for this
function without deploying it?
124:24 - Okay, pause me and see if you can remember
124:27 - how to open up the tunnel.
124:28 - Remember, you can go back,
124:29 - and it's okay if you totally
didn't grok it the first time.
124:33 - Ready? Pause me.
124:35 - (computer beeps)
124:39 - All right, how'd you do?
124:40 - I was talking about ngrok
to open up our tunnel.
124:43 - I'll open up a new terminal
here with the plus,
124:50 - and I'm gonna run that again.
124:52 - That was in my downloads directory,
124:57 - my downloads directory, and
it's ngrok, there we go.
125:00 - ngrok, HTTP 3000, right?
125:03 - That was running on port 3000.
125:06 - There we go, and so now,
125:07 - we'll see that we have
this wild-looking URL.
125:13 - I'm gonna click that, open it up.
125:15 - It's not for that, it's
for a /send-text, right?
125:23 - Isn't it called, send-text?
125:27 - Oh, I wrote, I called it, send-test,
125:29 - but it should be send-text.
125:31 - Let's fix that.
125:35 - If you were following
along, like I hope you were,
125:37 - you probably did that too.
125:38 - You can right-click and choose rename,
125:41 - and you can call this, send-text.
125:44 - I don't know, what happens if
you do that, does it restart?
125:47 - Look at that,
125:48 - it restarted with a new
thing called, send-text.
125:50 - I didn't have to restart
the server, awesome.
125:53 - It's now called, send-text,
and if we're up here,
125:59 - I now have this wonky URL,
ngrok URL that's up and running,
126:04 - That gets the send-text.
126:07 - Now, the Studio flow can see it.
126:10 - I'm gonna grab that URL.
126:13 - I'm gonna go back to the
flow, so over here, Studio.
126:19 - Wanna get back into my idea catcher,
126:22 - and on the record voicemail,
we had left the Beeceptor URL,
126:26 - and now we're gonna paste
our ngrok URL there, awesome.
126:31 - I'm gonna click save,
126:34 - and I'm going to publish,
126:40 - and we'll call.
126:41 - - [Man On Phone] You have a trial account.
126:42 - - I sure do.
- You can remove this message
126:44 - at any time by upgrading
to a full account.
126:47 - Press any key to execute your code.
126:49 - (phone beeps)
126:50 - (phone ringing)
126:52 - - [Kendra-Neural] Hello there,
126:53 - I'd love to hear your wonderful idea.
126:55 - Tell me about it after the beep.
126:58 - (phone beeps)
126:59 - - Here's my idea.
126:59 - I wanna build an app that
gathers ideas from people,
127:02 - and then texts it to me.
127:05 - Awesome, so let's jump over now.
127:08 - I've hung up, let's jump
over and watch it come in.
127:12 - We should see a post to send-text here,
127:16 - in a second, as that
transcription happens.
127:19 - Boom, there it is, awesome.
127:21 - If we go over to our ngrok,
127:24 - we should be able to open that up,
127:25 - and see that the message came through.
127:29 - All right, so what we were looking for,
127:30 - is transcription text, here we go.
127:33 - Here's my idea.
127:34 - I wanna build an app that
gathers ideas from people,
127:36 - and then texts it to me (chuckles).
127:37 - That's pretty good, isn't it?
127:39 - Pretty cool, okay so,
127:40 - let's make sure that we can access that.
127:44 - In our code, where we're sending the text,
127:49 - the way that those values come across,
127:51 - is they're on this second
object here called, event.
127:55 - We'll say, let's do one of
these, we'll say, transcription.
128:04 - That was event.TranscriptionText.
128:09 - Now, do you wanna hear me call back?
128:12 - Do you want me to take
that time to call back,
128:14 - or is there some other way I can do that?
128:17 - This is the awesome flow
that happens, right?
128:20 - I'm gonna go back now.
128:21 - I'm just gonna replay this,
128:23 - and we sent that text again,
128:25 - and now we should see in
my console log, right?
128:28 - If I switch back over to my console log,
128:30 - we see there's the transcription
thing, and there it is,
128:34 - we did it.
128:35 - Awesome, we got the Twilio
CLI installed and all set up.
128:39 - This'll let us interact with our account,
128:41 - and it also has a plugin that allows us
128:44 - to quickly build serverless functions.
128:47 - We got our local server all up and running
128:49 - and opened up a tunnel using ngrok.
128:51 - We're now able to handle the
incoming webhook request.
128:54 - We were able to get
access to the information
128:56 - and now we can also replay those requests.
128:59 - That was quite a bit of work.
129:01 - Nice job, recalling how to get
129:02 - all those things working together.
129:04 - Now this, what we just did,
129:06 - is a very common flow that you'll be doing
129:09 - the more that you develop webhooks.
129:12 - It'll only get more
familiar, as you progress.
129:15 - Why don't we both take a real quick break.
129:17 - I know I need some water.
129:19 - When you come back,
129:20 - we'll wrap up the
handler side of the code,
129:22 - and then we'll deploy this
function to the cloud.
129:25 - So, we don't need to
keep our local machines
129:26 - running all the time.
129:27 - Enjoy your well-deserved break.
129:29 - You're doing great, see you soon.
129:31 - (bright electronic music)
130:03 - Okay, let's write our handler bit.
130:06 - We're gonna write some code
130:07 - that texts you the
transcriptions when they arrive.
130:10 - Let's do this.
130:12 - All right, so I am able
to get the transcription
130:16 - that's being passed, being
published from that webhook.
130:19 - We're able to get the transcription back.
130:22 - Now, we want to text it.
130:26 - The context object here is very handy.
130:30 - It has a handy way to get access to
130:32 - the JavaScript helper library.
130:36 - What that does, is gives
you an authenticated client.
130:41 - We're gonna say, const client
= context.getTwilioClient.
130:49 - Now, here's the thing we need
to be authenticated locally.
130:55 - We're going to need to
provide the toolkit,
130:57 - or official account set and auth token.
131:01 - I'm gonna jump into this .env file here,
131:04 - so see it's this file label .env.
131:08 - We have two things here in this already,
131:11 - and I'm gonna just gonna
grab, again from the console,
131:16 - I'm gonna grab my account SID.
131:24 - You'll see, and it starts with AC,
131:26 - and this of course might
look a little bit different,
131:28 - as the flow goes, check the notes,
131:30 - and I'm gonna go and grab my auth token.
131:34 - I'm gonna come in here,
and I'm gonna paste it,
131:36 - and I'm going to make myself
a note to cancel that,
131:38 - because I just showed you my auth token.
131:41 - That is dangerous,
131:42 - 'cause now you could log
into my account here,
131:44 - and do things on my behalf,
131:46 - because you know what that auth token is.
131:50 - This magic .env file in the
serverless-toolkit world,
131:55 - what this is, is our
environment variables.
131:57 - They will be exposed, actually
on that context object,
132:00 - that we were seeing.
132:02 - We're going to need a couple of things.
132:04 - We're going to need my
actual phone number, right?
132:07 - My phone number that I wanted it text,
132:09 - which is, 1-503-461-0234,
132:18 - please don't call me too late at night.
132:20 - All right, so there's that,
132:22 - and I'm gonna put in my Twilio number,
132:25 - this Twilio number that I have here.
132:28 - Again,
132:30 - what is my Twilio number?
132:36 - My Twilio number is right
here, this is my trial number,
132:39 - I'm gonna grab this, and
paste that here, awesome.
132:42 - I'm gonna save my .env file,
and now we can use those.
132:47 - I'm gonna jump back into the send-text,
132:49 - and we're gonna, under this
sending text, what we'll say is,
132:54 - well, let's move this back up too.
132:57 - All right, so the client,
133:00 - it has access to all the resources,
133:02 - so we can do client.messages.
133:04 - And then, what we wanna do,
133:05 - is we wanna create a new message.
133:07 - What we'll do, is we
will pass in some values.
133:12 - We're gonna send a message
to me or to you, right?
133:16 - Whatever we put in there for phone number,
133:18 - that's what we're gonna do.
133:19 - Then, we're gonna text that
from our trial number, right?
133:23 - Let's say, context,
133:27 - .trial_number, now, or .TWILIO_NUMBER.
133:32 - The reason why this is working,
133:34 - is that number should be verified, right?
133:37 - That phone number that we
put in, I'm in trial mode,
133:39 - I verified with my phone number,
133:40 - so that's why it will be able to text it.
133:44 - We have two from, and we have bodies.
133:48 - These helper messages are
a little intense sometimes.
133:51 - The body that we want, is we wanna say,
133:53 - that there was a new
idea that came in, right?
133:57 - Then, we just want to kind
of, grab what we did before,
133:59 - where we got the
transcription text, right?
134:02 - Here's the new idea.
134:03 - That's the body of the
message, seems pretty good.
134:07 - Maybe, you know what we should do?
134:08 - We should also just drop
one of those in there,
134:11 - I'm gonna pop a bulb in there.
134:16 - I like that my burrito
is a commonly used emoji.
134:20 - All right, awesome, it's
time to, I think we're good.
134:22 - I don't think we need to
say, hi to mom anymore.
134:24 - We'll be sending the text.
134:31 - Now, because we didn't put our
personal information in here,
134:35 - we could share this file with people,
134:37 - and they could just copy
it and paste it, right?
134:39 - Like we could put this up on GitHub,
134:41 - and somebody could just use it.
134:42 - In fact, this is in the notes,
134:44 - and you can just use this code
without changing anything,
134:46 - except for your personal
environment number.
134:49 - Your phone number and your Twilio account,
134:51 - and your Twilio number, are
gonna be different than mine,
134:54 - but the code is the same.
134:56 - That's the power of environment variables.
134:59 - We have the same code in
different environments.
135:04 - Now, there's something tricky
135:05 - that we need to be really
careful about here.
135:07 - This create call here off of messages,
135:11 - this is asynchronous.
135:13 - We saw this before, it's promise-based,
135:16 - which means it provides functions
to return values or errors
135:19 - that will be called when a value
arrives or an error occurs,
135:23 - which is a mouthful, I realize.
135:25 - What we wanna do, is we
want to call the callback,
135:29 - only after the message has been sent.
135:31 - Otherwise, it will just
be over right away, right?
135:33 - 'Cause this'll just,
finish will be right over.
135:35 - We need to put the callback
inside of the then.
135:40 - So, what we're gonna do
is we're gonna chain off
135:42 - of the promise that's returned.
135:43 - When we say .then,
135:46 - and that's gonna return a function,
135:47 - and it's gonna return a
function that could just say,
135:50 - it will be the message, right?
135:51 - The message that was created,
if it was successful.
135:55 - What we'll do here, is
we'll do the callback,
135:58 - and we'll, there was no
problems and we will return.
136:02 - We can return a message,
we say, sent message.
136:06 - That message object that comes back,
136:09 - has an identifier as well.
136:12 - Let's put this on a separate line.
136:13 - Let's make that a little
bit more friendly.
136:16 - You can do that all in one line like that.
136:19 - Let's see, so we're gonna have a function,
136:23 - the then is gonna return,
the then is going to,
136:27 - expects a function that takes
whatever the return value was,
136:31 - if it was successful, and then
it will run this function.
136:35 - That's when we want the function to end.
136:36 - We don't want it to end beforehand.
136:38 - That's, again, this is
that asynchronous behavior.
136:41 - We'll put a semi-colon here at the end,
136:43 - and then we are going to come
and we're gonna catch this.
136:49 - The catch also expects,
136:51 - if there is an error, let's,
136:55 - the catch expects if there is an error,
136:57 - that you say something about it.
136:59 - That this is a great
place to do the callback,
137:02 - and just pass the error into it.
137:06 - Okay, so let's walk this one more time.
137:10 - We're gonna use the context again,
137:11 - an authenticated Twilio client,
137:13 - and it's gonna use values
from our environment,
137:17 - our account SID and our auth token,
137:19 - to make sure that we are
authenticated properly.
137:22 - And then, it's going to, for
this authenticated client,
137:26 - it's going to make a new message.
137:28 - It's going to create a brand new message,
137:29 - and it's gonna send it to a
phone number, our phone number,
137:33 - the mobile number that
you registered with.
137:36 - It's going to send it from
our trial number, right?
137:42 - That's the trial number
that we have in there.
137:43 - It's going to pass across
the transcription text.
137:47 - That was on the event that
came from the request,
137:49 - and if that were successful,
137:51 - we're going to say the function is over
137:53 - and no error happened.
137:54 - And then, we'll just write something else,
137:56 - it's not expecting anything.
137:59 - If there is a catch,
if there is a problem,
138:01 - we are going to call that
callback with the error.
138:05 - We could put some logging in
here too, why don't we do that?
138:08 - We'll say, console.log, and we'll say,
138:13 - we'll just do a sent message,
and we'll do a message.sid.
138:19 - Again, that's a string identifier.
138:22 - If there is an error,
138:23 - we'll do console.error,
and we'll say, uh-oh!
138:30 - Then, we'll output that error, cool,
138:34 - or at least the string version
of that error, awesome.
138:38 - Okay, I am going to
clear things down here.
138:43 - I have that saved.
138:45 - Let's run this locally first,
138:49 - since we were just doing
our development thing there,
138:51 - I had stopped my server.
138:53 - Again, that's Twilio server.
138:54 - Let's start, so that will
start the local server here.
139:02 - Looks like I was in the wrong directory.
139:05 - That's what that means,
139:06 - so I need to get in my
idea catcher directory,
139:08 - and I will run that again.
139:10 - That was the up and down arrows
139:11 - to get back to the previous commands,
139:12 - Twilio serverless start.
139:15 - All right, here we go.
139:17 - This is what was running before,
139:20 - I still have my ngrok running,
139:22 - and my flow is still pointing to things.
139:25 - That means I should able to go back
139:28 - to my ngrok,
139:33 - and just go ahead and do another replay.
139:36 - I should receive a text message,
139:40 - and look at that, sent from
my Twilio trial account.
139:43 - There's a new idea, and it
gathers ideas from people,
139:47 - and texts it to me, awesome, cool.
139:50 - We have the text working,
139:51 - we have done our local development flow,
139:55 - and now we wanna be able to
139:57 - not have to run this on
our computers, right?
140:00 - We don't wanna keep our computer up
140:01 - and running all the time,
so we're gonna deploy it.
140:05 - The way that we do that
is very, very easily,
140:09 - we say, Twilio, swerverless,
serverless deploy.
140:23 - It's building up everything we need here.
140:25 - You'll notice that what it's gonna do,
140:27 - is it's gonna take the name of our project
140:31 - and put some extra stuff at
the end to make it unique.
140:33 - It's got this little four-digit number,
140:35 - and it's got this .dev,
140:37 - 'cause that's the
environment that you are in.
140:40 - By default, it puts you in
the development environment.
140:43 - Let's go ahead.
140:46 - It's deployed, believe it or
not, this is up and running.
140:48 - We could actually hit that,
but I'm just gonna grab this.
140:52 - I'm gonna pop back over to my flow,
141:01 - and jump back in here.
141:03 - You feelin' my flow?
141:05 - I'm gonna go into record voicemail,
141:07 - and I am going to, now the
transcription URL is an actual,
141:13 - real-live hosted,
141:15 - elastic in case I get
a whole bunch of ideas,
141:18 - which I hope that I do.
141:20 - I'm gonna click save, and
that is publicly accessible.
141:25 - It's now running on the server.
141:30 - The final test, let's go ahead
and give our number a call.
141:35 - - [Man On Phone] You have a trial account.
141:36 - You can remove this message at any time,
141:38 - by upgrading to a full account.
141:40 - Press any key to execute your code.
141:43 - (phone beeps)
141:44 - (phone ringing)
141:46 - - [Kendra-Neural] Hello there,
141:47 - I'd love to hear your wonderful idea.
141:49 - Tell me about it after the beep.
141:52 - (phone beeps)
141:53 - - Yeah, I have an idea to
make my dog lamp light up
141:56 - in Morse code, whenever
I receive a new idea,
141:59 - that gets transcribed.
142:02 - Wouldn't that be great?
142:04 - I should just about any second now,
142:07 - I should get a message with a
very strange idea (chuckles)
142:12 - about sending Morse code over a dog lamp.
142:17 - I think I might actually
write that, oh, there, got it.
142:22 - It transcribed it exactly right, awesome.
142:25 - We got it deployed, and now
we can shut our computers off.
142:28 - Now, you might have noticed
that this was deployed to dev.
142:32 - I know that we talked about that,
142:35 - you can also deploy to dev or staging,
142:37 - and then you can deploy to production.
142:38 - That way you can develop
as a team in one place,
142:41 - if you needed to.
142:43 - There's more on that in the notes,
142:44 - if you're interested in it,
142:46 - but they're just different environments.
142:46 - Just keep that in mind,
142:47 - you can have different
environments hosted up there.
142:52 - With that, we did it.
142:54 - That is awesome.
142:55 - Did you see how the webhook
skills that you've picked up
142:58 - are fairly universal?
143:00 - It's pretty neat, right?
143:01 - I hope you're feeling
confident in your ability.
143:03 - First, we were able to provide
143:05 - a handler for the lifecycle
hook of an incoming text message
143:08 - to our number.
143:09 - We did this with a static TwiML Bit,
143:11 - but remember, this is a webhook.
143:13 - As long as we returned valid
TwiML, we could do anything.
143:17 - We didn't end up using the
body of the text message,
143:19 - that was sent to us, but
we definitely could have.
143:22 - Like for instance,
143:23 - I could make it so that if
someone texted my number,
143:26 - a color, it could change
the dog color light.
143:29 - Like for instance, if I type blue.
143:36 - There we go, it responds
to the incoming message.
143:40 - I deployed that, it's a
simple, serverless function.
143:42 - It's in the notes,
143:43 - and it responds to an
incoming text message.
143:46 - We also used a no-code solution
143:48 - to answer an incoming
call and record a message.
143:51 - What the tool did for us was to deploy
143:54 - and return the necessary TwiML code
143:56 - to render the application.
143:59 - As more and more of
these no-code solutions
144:01 - start popping up,
144:02 - look for how they're
making use of webhooks.
144:05 - You can impress your friends
like, you can be like,
144:07 - well, actually that's just a webhook.
144:10 - Actually, never say that.
144:11 - Never say, well, actually,
it's not a good look.
144:15 - We saw how the debugging tools,
like Beeceptor and ngrok,
144:18 - work to capture what was
posted from the webhook.
144:21 - The replay feature saves a ton of time.
144:24 - I'm glad that you've got
that in your tool belt.
144:26 - We also got to use another
serverless function.
144:29 - Those things are awesome.
144:31 - Little snippets of code that
you don't need to manage.
144:33 - They're elastic, meaning they scale up
144:36 - and down automatically,
144:36 - and almost all of the serverless providers
144:38 - give a very generous free tier.
144:41 - Until your application gets
very popular, which it will,
144:45 - you don't need to pay anything at all.
144:47 - These are great for
little one-off scripts,
144:49 - like webhook handlers.
144:51 - You did it, made it to
the end of this course.
144:54 - Nice work, I hope you enjoyed yourself.
144:56 - I know I did.
144:58 - I hope you now have a ton of ideas,
145:00 - that you can't wait to
implement with webhooks.
145:02 - Remember if you run out of ideas,
145:05 - go explore some no-code automation sites,
145:07 - like IFTTT or Zapier.
145:09 - There are tons of great ideas there.
145:11 - I can't wait to see what you build.
145:13 - Make sure to let me know about it.
145:15 - I've spun up a number,
145:16 - that's similar to what we built together.
145:19 - I'll use it to capture your
feedback on this course.
145:21 - I use the transcription webhook,
145:23 - to add your feedback to
a Google spreadsheet.
145:26 - I hope that you're proud
of your new skills.
145:28 - Ooh, that reminds me.
145:33 - - Send him in.
145:41 - (intense music)
145:44 - - I have something pretty
important to talk with you about,
145:48 - something serious, the power
that you wield is needed.
145:56 - Now, more than ever,
146:00 - we are living in some dark, dark times.
146:05 - Most of our time is spent
online in virtual worlds.
146:09 - Worlds that are governed
by the laws of code.
146:13 - Somebody writes that code,
you're gonna write that code.
146:19 - You know, a kid's uncle
once famously said,
146:24 - "with great power, comes
great responsibility."
146:29 - I guess that's just
really a roundabout way
146:31 - of me asking you, is
the code that you write,
146:35 - gonna be used for good or not?
146:39 - It's your choice, really.
146:42 - I'm asking you to take a vow.
146:46 - I want you to write
code that unlocks hope,
146:49 - power, and freedom for all of humanity.
146:54 - I'm asking you to become an operator.
146:56 - I want you to join our quest.
146:59 - I need your help to,
147:11 - line?
147:13 - - Save the cloud.
147:15 - - Of course, we need your help
147:21 - to save the cloud.
147:26 - Thank you, thank you very much.
147:27 - - [Woman] Thank you.
147:29 - - When should I?
147:30 - - Oh, oh, no need to
call us, we'll call you.
147:33 - - Oh, right, right.
147:39 - I'm still waiting for
them to call me back.
147:40 - They got tired of me calling and calling,
147:41 - to see if I landed it.
147:43 - Those Hollywood folks should
stick to their principles.
147:46 - I hope I get it, 'cause I
love that TwilioQuest game.
147:48 - Have you played it yet?
147:49 - It's super addicting.
147:51 - It has awesome content for
those just getting started,
147:54 - and those who have been
there for a long time.
147:56 - It has a built-in dev
environment, fun side quests,
147:59 - like contributing to open source.
148:00 - It covers JavaScript, PHP, and Python.
148:03 - There are new updates all of the time,
148:05 - and OMG, the original soundtrack,
148:08 - also, I've got a serious
robo-crush on Cedric,
148:11 - he's super adorable.
148:12 - I can't recommend it enough.
148:14 - Finally, if you enjoyed this course,
148:17 - please let others know about it.
148:19 - I'm sure they'll thank
you for hooking them up.
148:22 - Thanks for hanging out and
we'll see you real soon.
148:25 - (upbeat electronic music)

Cleaned transcript:

Hi there, I'm Craig, and I'm a developer. In this course, we are going to explore the wonderful world of webhooks. Understanding the concepts behind webhooks, will open up a new and powerful world of possibilities, for your projects and your applications. There are infinite opportunities available for you to connect applications that you know and love together, to create new experiences for both you and your users. Now, in order for you to get the most out of this course, I'd love it if you had a basic understanding of how to access webbased APIs. Now, if you don't yet, no worries. I've attached to this video, some teacher's notes. I've listed some ways for you to gain that experience there. Now, even if you've already met the prerequisites, can you please take a minute and locate the teacher's notes? Throughout the course, I'm gonna refer to them. In those notes, I'll drop additional information, and share places where you can learn more about what we're chatting about. I'll also use those notes to keep you updated on anything that might've changed from, my right now, when I'm filming this course, to your right now, whenever you're watching this in the future. I hope things are going good for you in the future. Well, while we'll talking about your future, let's chat a bit about what you can expect from this course. We're gonna first talk about the highlevel concepts of webhooks. Where they come from, when and why you might wanna use them, and I'll walk you through some inspiring solutions that you can build without writing any code whatsoever. You're gonna love it. Pretty sure you're gonna get hooked, and after you get webhooked, we'll move from a nocode solution, to explore some more lowcode solutions. We're gonna explore events that GitHub sends out, when activity happens on their site. Now, no worries, if you haven't had any previous experience with the codesharing site, GitHub. We'll start from the very beginning, and get you up and running quickly. We'll also then spin up a serverless function, using a free platform named, Netlify, and we'll handle or do something with, the event data that comes from GitHub. If you haven't used serverless technology before, again, don't fret. We'll walk through what that means, and how to take advantage of its power. Now, all the code in this course, we'll walk through together. You'll have access to all of the completed code. After we've got a good grasp on the basics, we'll make use webhooks to build an entire telephonebased application. We'll build, from start to finish, an entire idea capturing and text transcription service. The application will lean completely on webhooks for workflow management. All done with, shockingly few lines of code. This course it's going to deal with consuming events, passed through our webhooks. Now, that is to say, we won't be writing code that sends information to register webhooks. Check the teacher's notes, if you're interested in learning more about how to send webhook events. I am super excited to get started with this course, but there's just one more thing that I'd like to talk about with future you. If at any time you need me to pause or slow down, remember you're in a videobased course, take advantage of that. I am more than happy to repeat myself, if you miss something. Speed me up, slow me down, flip on the closed captions, make yourself at home. These days, I know I've gotten pretty bad about the way that I consume video content. I just watch and watch, and then I watch some more. Well, it turns out that education doesn't really work too well with bingeing like that. If you feel like you're starting to zone out, like I did through the endless seasons of "Survivor," it's time for a break, and I'm not here to make friends. I've put some deliberate stopping points in this course, and I'll do my best to remind you to take a break. Breaks are important, they're super critical for your learning. You need to let things sink in, and I want you to get the most out of our time together. Whew, there we go. We got all that housekeeping stuff all covered. I'm sure you were starting to get like my kids do on a long drive and they're like, Dad, are we there yet? Actually, that's a pretty good example for where a webhook works wonderfully. My kids continually ask me that question over and over again, are we there yet? They keep making that request, the same one, over and over, polling me directly to see if we've arrived at our destination. Now, typically, my response is, I'll tell you when we get there. More or less, what I'm promising is that when we get there, I will broadcast our arrival status. When that approach works, like when my kids actually decide to subscribe to my status updates, I can tell you that it makes things a lot easier on the whole car. I don't get overloaded and they can relax. They just sit there and wait for my update, so much more efficient. I guess what I'm attempting to broadcast to you now is, we're here, we've arrived at the start of the course. Now, I think the best place to start our journey is to explore a concept often present in application development, events. Let's get started. An event, in code, is a defined action or occurrence. Now, these events are typically exposed to us, software developers, so that we can write code that runs specifically when one of these actions or occurrences happen. The first type of event that I'd like to talk about is one that is caused by the user of your application. Let's think about a button on a webpage. This button will trigger an event when it is clicked by an user. You can optionally write some code that will run, and only run when that event occurs. You do this by adding or registering what is known as an event listener. You write code, also referred to as a handler, used to handle the specific event. In this case, click, this code will only run when that event happens. This is called, eventdriven programming. In this example, it's used to empower you to not have to write code that continually checks to see if the button is being pressed. Just like the kids in the car, it isn't very efficient for you to write code asking, hey, button, are you clicked yet? Are you clicked yet? Now, how 'bout now, are you clicked? The click event is just one of many events that webpages allow for listening to. Check the teacher's notes for more browserbased event examples. Similar in concept to a usergenerated event, is what is known as a lifecycle event. Lifecycle events are typically exposed to us via application libraries or frameworks. You can think of application libraries and frameworks as tools that help us rapidly develop our applications. These libraries do this by providing repeatable ways for us to write our applications. For example, these libraries allow us developers to customize various parts of the application, at specific times, in specific contexts. They allow us to hook into specific lifecycle events. For instance, when you're building a web application these days, you're almost certainly using a frontend application library. One of the main benefits that these libraries give you is the ability to write code for only your specific needs. A great example is you can write code once your component has been loaded on the screen. This load is a lifecycle event. Usually this looks something like, has been loaded. What's happening here is what is known as, inversion of control. Now, this is because the control is being handed to you, the developer, from the application, at exactly the right time. The library does its magic, it prepares your component. It then renders it out to the screen, and when it's loaded on the page, it calls the code that you wired up to your hasbeenloaded hook, and that abstraction is super nice. You don't call the function yourself. The library actually calls your function when it's ready. This inversion of control pattern is also often referred to, as the Hollywood principle. In Hollywood, casting directors usually tell the person auditioning, don't call us, we'll call you. Now, this is because if they didn't, the actor would just keep calling them. Yeah, I was just in there auditioning. I pretty sure I got the part, I did a really good. Weird, they hung up, I guess I'll call back. No, I was the older guy. I was just wondering when should I come in for my wardrobe fitting, hello? Weird they disconnected, I guess I'll try that again. Again, like my kids, these actors are totally going to overload these directors with their needy questions. If they were allowed to call the director and check for their approval, they'd do it all the time. That Hollywoodprinciple abstraction, allows the actor to not need to understand the entire process that Hollywood directors are going through. The directors do whatever it is that directors do. I think it involves tall chairs, and megaphones, and snacks, definitely snacks. The point is, only when the directors make their decision, do they call to inform the actor. These patterns of event handlers and lifecycle hooks have really proven useful in helping developers to build extensible applications. The good news is, that this powerful abstraction can also span across entirely different applications over the internet, by using what is known as, tada, a webhook. Now, that we've got a light understanding of the basics of event handlers and hooks, let's run through a quick refresher of how to use an API. Have you heard of IOT, the internet of things? Well, this here is a thing. Well, not this adorable/weird dog lamp thing, but the actual light bulb itself, it's what is known as a smart bulb. Now, I've got an app on my phone, which lets me turn on the light, pretty cool, right? I mean, don't get me wrong. A plain old light bulb is pretty amazing when you think about it. When I turn on the light switch, it allows power to come to the bulb and it lights up. That's cool, but that's me doing it, I'm turning it on. In reality, it's not much different with me using an application on my phone, is it? I'm telling it to turn on. I can also even change the color, but even that, I'm saying to make the light green, and I'm telling it to do it when I click. Now, what makes these light bulbs really shine? That's a dad joke, I tend to do that, sorry about that one. What makes these light bulbs really smart, is that they can be controlled by external events. Like for instance, I can make it so the bulb turns on at sundown, I can even set up a schedule so that it gets darker the closer it comes to my bedtime, making me feel sleepier, because my lights are outsmarting me. In fact, you've probably seen it. There's a whole industry around smart homes. So many products, all sorts revolving around the house, being smarter than what's going on around it. Now, the industry saw incredible growth over the past couple of years. Now, the way this particular light bulb works, is that I define a schedule of how I want it to behave. The light bulb isn't sitting there asking my schedule over and over again, if it's time to turn on. There's an external program that's running, and when my defined time occurs, it sends the request to the bulb to turn on. It's almost as if the sun said to my light bulb, don't call us kid, we'll call you. At sunset, turn on the lights, and it does just like I did when I clicked my phone. It sends the same message to the light bulb to turn on, and in fact, in this particular example, it quite literally is as if I did it using the phone. This light bulb is actually connected to the internet with an exposed API. I can control it via an API from my computer here. This here is Postman, if you haven't seen this tool before, you should totally check it out. I absolutely love it for exploring APIs. Now, the API that I'm exploring here is from LIFX or LIFX, the company that produces my light bulb. Now, you'll see here that I can change the values, and you'll notice here that it's a PUT. PUTs can be used to explain changing a particular property of the resource, and not replacing all of them. In this case, I'm gonna send a PUT request, so I'm gonna send a PUT request to my light. This API uses a bearer token to authenticate, and I've got that all set up. You can see here that I am changing the color to red. Now, I'm gonna send a PUT request to this specific bulb. I'm gonna click this here, and boom, it's red and that's pretty cool, isn't it? I can use this code to turn this light off and on. We already know that just letting this light turn off and on, with regards to the sun, has made it labeled smart. When the sun goes down, turn on. Sure, that's pretty smart, but I bet us being able to control it via code might make this thing labeled a genius. I mean, if you think about it, it's like when anything, like anything at all, that I can dream up happens, turn it on. Even better, we saw that we can change the color. I can make this turn green when I have a new email, or flash different colors, when someone comments on a YouTube video. Or, I'm sure if I was into sports, I bet I would love if this blinked my team's colors when they scored a point, go, team, sports! What if I use this for an onair light, for like when I was in a video conference, so my kids knew not to come barging in on my call? They'd see this, "Rudolph the RedNosed" dog lampthing was on, and they'd know that I was on a call. When it was done, I could turn it off. Genius, I tell you, genius. Now, whoa, I actually need that like right now, but wait a second. Would that mean that I'd have to write a program that just sat there and checked all those situations? Like, keep checking the sports scores, and keep checking my email inbox? Like for that video call example, if I think about it, what it feels like to me, is that I'd have to write some code to continually check and see if I was on a video call. It doesn't feel very efficient at all, does it? It fact that feels an awful lot like my kids asking if we were there yet? Ooh, but what if a video call starting was considered an event? What if I was able to write some code to handle that videocallstarted event, I'd be able to, in that handling code, turn on the light, just like we did in the code. I guess that would mean I'd have to write some sort of, plugin for my video conferencing software, if I wanted to share it? I'd have to have everybody in the world install some software if they wanted to use it. Yuck, wouldn't it be nice if somehow that event could trigger outside of the application to anyone, like over the internet. This is my friend, is where webhooks come into play. Chances are your video conferencing provider allows you to listen and handle events using webhooks. That solution basically already exists. We'll look at webhooks like that one, here in a bit, but do you see how if that event was sent across the internet, I wouldn't need to write code to continually pull to see if I was in a meeting. I can just wait for the videoconferencestarted notification. Now, my video conferencing provider says, don't call me kid, I'll call you, and our handler just says, turn on the light. It only runs when our provider says, psst, hey kid, a video conference started. Now, I hope that you just had one of those light bulb moments. I mean that quite literally and figuratively, like the type above your head. I hope that thing just turned on. I'd like to ask you to take a little break now. I'd like this to sink in for you, and one way to help this all make sense, is for you to pause the video, and think about what we just saw. Can I get you to come up with three ideas of what you might want to do if you owned the smart bulb. Everyone has different needs, and remember quite literally anything could trigger it, could make a change colors. Now, if you're having trouble coming up with ideas, check the notes. Really, I want you to let your mind wander. What would you like to have happen to make this light turn on? It can literally anything you can dream up. Let's take a break, and when you come back, I'll share some tools that will give you a lot of inspiration. I'm thinking you'll be pleasantly surprised. You might even be able to achieve what you dreamed up with just a couple of clicks. See you in a bit. (mellow electronic music) Before the break, I asked you to come up with some ideas to make this smart light bulb, even smarter, how'd it go? Did ideas just flow out of your mind? Sometimes I find that when I'm told to dream up anything at all, suddenly I can't. I have ideas pop in my mind all the time, but the second you asked me to come up with one, like right on the spot, my mind goes blank. And, that's a bummer, especially when you're trying to learn a new technology you wanna put into practice, but you have no real idea where to start. If that just happened to you, no worries. I kind of expected it would happen. I've got a solution for that lackofideas problem, and we'll get to that here in a second. To get there first though, let's talk about a growing movement called, no code. Don't worry, it's not a movement to abolish coders. No code is the concept that you can, and often should, build applications without actually writing any code. You're given building blocks and you snap them together. The concept is that the applications we build are similar enough that they can be broken down into reusable parts and snapped together into new formations to build new applications. It's wonderful for prototyping, and frankly, sometimes you can build exactly what you were trying to do without writing a single line of code, like no code at all. I'm talking about some super impressive stuff. Ecommerce sites and integrations with third party APIs, Check the notes, if you're interested in diving deeper into this. One of my favorite nocode sites has been around for a long time. Even before the nocode movement took off, it's called, IFTTT, which stands for, If This Then That. It's a nocode solution for exactly what we've been leading up to. It's an event handler for the internet. If this happens, then do something, and there are a smattering of options that they call, services. These are services that expose events that can happen. There are a bunch of them, from your location changed, to it's snowing, to the sun is setting. You'll also notice that there are other services here that are web specific. There's an email service that exposes events, like new email received. You define the service that you wanna use, and you choose the specific event. If this, and now, you choose what happens when that event occurs, then that. These are called, service actions, and there are a different set of services here that allow you to do different things. For instance, the company that makes this light bulb I was using, was called, LIFX or LIFX. They provide an action service, and it exposes a bunch of things that I can do with my light bulb, like change the color. Because, I've linked my accounts already, I can choose which of my light bulbs, what color, and many other things. Combining the service with an action, like a whole, ifthisthenthat combo, is called, an applet, cool, right? I'm pretty sure that you could build a couple of applets to create your own ideas, with just a couple of clicks, and definitely no code. I think that this #nocodemovement might be onto something, it's #nojoke. But, now though, what about the situation that we had where you didn't have an idea? Well, this is awesome, and this is a developer hack that keeps on giving. Sample applications are a wonderful way to get inspired, and guess what? These applets are shareable. In fact, if you up here to explore, you'll get suggestions, but you can also type what you're looking for. I asked you to come up with ideas about lights, so let's type that, lights. Let's see all the applets surrounding lights, so here we have toggle lights, blink your lights, that's nice, disco party for hue lights, that's wonderful. Alexa, turn on the lights. Sorry, if I just triggered your Alexa at home, if you have one. Turn on my lights blink, when your doorbell rings, these are great. All sorts of things. Now, I can enable one of these for my own account, and when it comes up, it asks for my specific configuration. Now, you probably noticed that there were different types of smart bulbs in there, in that list, but that doesn't mean that you can't take that idea and make it work for your ownuse case. Can you see the power in that? Now, this is actually a pretty common pattern in developing software. You take the base code, and you make a copy of it, and you make your changes. This is called, forking, you fork your new copy. Remember, this is just one of many nocode automation tools. If you're enjoying this way of thinking, I encourage you to look at Zapier. They provide similar building blocks to the complete same sort of, if this happens, then do that. You wire up services to create what they call, Zaps. It's super fun, and I highly recommend exploring here too. There are lots of inspiring ideas to be found. Zapier makes you happier, I just love that. These nocode automation tools go a long way in making just about anything possible. But, as you can imagine, there are gonna be cases when you're gonna wanna have more control. You're gonna wanna write some specific code that the action doesn't provide. I'm pretty sure that's why you're here, in fact. You want to use a webhook, so let's do that. Let's explore how that works right after a quick break. I'd love to give you some more time to explore these nocode tools. I really want you to think about these applets or Zaps, as an abstraction of the power of webhooks. Oh, one thing that might help, if you wanna just play around with some actions, there's a smartphone app and it lets you install buttons on your home screen, just like this, like look here. I've wired it up, an IFTTT button so that when I click it, it turns on the red light. That way Roxanne doesn't have to do it, that was a bad one. Don't call the joke police on me. I hope that one didn't sting too much. (cymbals crashing) Check the teacher's notes for more exploration guidance, and please let me know what you come up with. See you in a bit, and when you come back, we'll explore how to capture information sent from a webhook. I think in order to get the clearest picture of how webhooks work, it will help if we travel way back to 2007. It was a time of wearing double polo shirts, so you could pop your collar, twice. People wore Ugg boots with shorts, and Justin Timberlake was actively trying to bring "SexyBack," and web forms were still a thing. It was a simpler time. To gather information from a user on your website, you'd write an HTML form and you'd put a method on it of, POST, and in the action, you'd put the name of the script. It's important to remember, that the web is stateless. Once this request to generate the page that the form lives on, the web server job is done. The GET request is over. Your user would fill out the HTML form with the named fields and then they'd click a submit button. What the browser does for you in this case, is it takes all the values that were entered in the form, and it makes a brand new HTTP request to the URL that you specified in the action attribute. That POST request contains the data that the user entered in an encoded way. As a developer, you would write a request handler on your website to capture the information from this request, and then you'd act on it. Again, your browser is making a request to your server. Way back in 2007, a developer by the name of Jeff Lindsay, made a proposal to use an existing idea already very present in software design patterns. He proposed to use the hook model that we talked about, but instead of locally, he suggested to do it over the internet, and he called it, a webhook. Jeff realized that it would be fairly straightforward for web developers who were already very familiar with processing form data submitted via a POST request. What this approach would feel like to developers, is just another form submission. In this case, instead of the user submitting the form, a third party could submit the data. The handler could be written the same way the developer already knows. The information is pushed to the handler, in that same familiar way, to the developer and everyone wins. In order for this to work, the thirdparty application needs to be informed from the developer where they should post their information. You know, the URL where that handler lives. And then, when the thirdparty event happens, it posts the information about the event to that URL. (icon exploding) That app is definitely embracing the Hollywood principle, right? Don't call us, we'll call you. It took off, for all the reasons that eventbased programming wins. It's, of course, way more efficient to receive a POST request, than continuously polling an API, checking for a change. Instead of, are we there yet, are we there yet? Via an API, the POST request sends, we're here! That was 2007, webhooks are now everywhere. I'm guessing what brought you to this course, was that you encountered one in the wild, and you weren't exactly sure how to use it. No worries, this happens to everyone the first time they run across one. It's a bit challenging to understand at first, the web has changed a lot since 2007, but the webhook concept here, is still pretty much the same. Our apps are now built differently. Like for instance, we may be using services, and instead of form post, we build our own APIs for our clients to use. The client post information to our API, usually not using a form. We developers use webbased APIs all the time to build our applications. You should view webhooks as an extension of that type of work. This is why sometimes you'll hear webhooks referred to as, a reverse API. It calls you, instead of you calling it. When you use an API, you need to understand the parameters that it expects, and the reverse is true for webhooks. You need to know what information is being sent to you, and in what format. There's no formal specification, and any data can be sent to your handler. Now these days, our web handlers most likely look a weebit different than they did in 2007. Technology has evolved, some handlers still accept traditional, formposted data, and some of our handlers accept JSON, posted in the body, for client side, the APIs that we're writing, right? See the teacher's notes for more on this. You'll find a variety in what webhooks post to your handlers as well. As a developer, writing one of these webhook handlers, it's pretty important that you understand how to capture and parse that incoming data. Let's take a look at an existing webhook implementation and see if we can't capture the data to inspect, right after a quick break. By now, I'm hoping that you're inspired to connect unrelated applications together. Well, we've got a good taste of some powerful concoctions through the nocode solutions of IFTTT and Zapier. You've seen what's possible. You understand why you'd want to use events to trigger actions, as opposed to pulling an API repeatedly. With the what and the why, of webhooks out of the way, I think it's time that we take a deeper look under the hood to see how these webhooks are actually working. I was trying to think of common applications that all of us developers are bound to use. The obvious one to me, is GitHub. If you've taken a look at the notes for this course, which I hope you have, then you've for sure already encountered GitHub. I've put the notes and code for this course, in a GitHub repository, or repo. GitHub is a social coding site. It enables you to share your code, and work on projects together. You can submit issues, and keep detailedversion history of your software, and you can read documentation. It's a wonderful place to explore when you're first learning to code. If you don't have an account yet, I'd love for you to pause the video, and sign up for a free account. Now, quick note, I'm gonna show off a little bit of how to use GitHub. I've dropped notes that give a more detailed tour in the teacher's notes to learn more. Make sure to check it out. There's even a link to a video game, that will walk you through making your first poll request, or a request to make a change to someone else's code. I know that can feel a little bit daunting, but it doesn't need to. I want it to feel fun for you, because it is. After you've got yourself logged in to GitHub, wheel fork my teacher's notes repository to your account. This will make it all yours. Now, forking is the process that happens when you see a repository that you like, and you'd like to explore it, and make your own changes. You fork it, and you make it your own. You make your own copy of that repository. Now, you can always later ask to apply the changes back to the original repository. Now, I want you to fork the repository, because once the repository is all yours, you can specify some webhooks on it. Here I am on the notes repository for this class, the links attached in the video. I did wanna make a quick note, that the layout might look a little bit different on the GitHub site, as they're constantly making improvements. Now, in the off chance that you can't find what I'm doing, because the site has changed. Please remember to check the notes for this specific video. I'll update future you there, with what's different, and we'll get back on track. Sure glad I used GitHub for this. Up here, you'll see some social features. You can star a repo, which is equivalent of a social media love or thumbs up. Now, as a developer, someone giving you a star has that same dopamine hit as a like does. The more stars your repo receives, the more likely it'll be discovered. Here is the fork icon. What I'm gonna do, is I'm going to fork this, and I'm gonna put a copy in my account. Now, you'll see it's copying everything over, and this is now my own copy. Boom, just like that. Pretty forking fast, right? Note how this repo is mine. It's under my username, and you can see where it was forked from. Now, that this repo is mine, you can see that I have a settings tab now. I'm gonna go ahead, I'm gonna click into here. You'll see here on the left nav, that we have an option for webhooks. Awesome, let's click into it. Ooh, webhooks allow external services to be notified when certain events happen, just like we talked about. Awesome, totally makes sense. Okay, so let's add a webhook for our repo. I'm gonna click this add webhook button. I was thinking that we should get the information when someone stars our repo. What we're going to need is an URL to handle that request. Do you have one? I don't have one. A quick solution to capture a webhook, just to check things out, is to use what's known as a mocking tool. One of my favorite ways to mock a webhook handler, is to use a webbased tool called, Beeceptor. Here let me show you, I'm gonna open that up. I'm gonna come here, I'm gonna make a new tab. We're gonna go to beeceptor.com Let's make this a little bit bigger. Again, Beeceptor might look a little bit different if you come in here. Check the notes, if you can't seem to follow along with what I'm doing. Let's see, what am I gonna do? I'm gonna try a GitHub event. Let's call it, github. Basically, what you do is you just put your name there, and you can click this create endpoint. Now, as you can see, I have this github.free.beeceptor.com. I'm gonna go ahead, I'm gonna copy this. I'm gonna keep this page open. I'm gonna pop back over to my addawebhook page here. I'm gonna paste that into the payload URL so that that's where it will be sent, where the information will be sent. We're gonna capture the stars, so I'm just gonna put /stars at the end here, so that I know what that is. That's the cool thing about Beeceptor, you can just invent whatever you want, that that route doesn't exist, but it will still catch it. All right, let's keep filling out this form. We have content type, that's nice that GitHub lets you do that. We have a couple options here. We can either send JSON or form URL encoded. I'm gonna choose JSON, let's do that. The other nice thing that GitHub does, is they let you choose which events you would like to trigger the webhook. You can send just the push event, that's when somebody sends code to your repo, or you can say, send me everything, but they also let you select individual events. We really only want when someone stars the repo, so let's do that. I'm gonna click that, and I'm gonna choose, down in here, there is one for, see how many, much stuff you can do. You can sure do a lot, so I'm gonna do stars. Here it says, a star is created or deleted from a repository, and I'm gonna uncheck pushes, okay. There we go, we just have stars. Anytime somebody stars this repo, we should get an event. Cool, all right, so I'm gonna click, add webhook. Now, if I go and star my own repo, because I can do that, 'cause I like myself. I star it, and if I head over to Beeceptor, you'll see that there was a post to stars. Actually, there was two, because GitHub posts originally to you're link, just to make sure it works. Here is what happened when we starred. I'm gonna click into this here, and then I'm gonna click this little codything, looking thing over here. I'm gonna click this, 'cause it will help format things better, and this is what GitHub sent us, it's pretty cool, right? It shows you all the different information of the repo that was on, and if we scroll down a little bit farther, we can see all things about the repo. All these different, rest APIs that I can hit, to get more information if I wanted to. This is all about the repo itself, and I think if we get down here a little bit closer, this is kind of, hard to read in here, but definitely captures exactly what was sent. If we scroll down, wow, that's a lot. If we scroll down into here. There we go, we can see who sent the star, and we can see who the user was, which is very nice. It's got more information, it's got the avatar URL. I'm gonna actually, let's open that up. Let's see what this is. Wow, look at that dork who liked this repo. I can use this to figure out, what I would like to handle, right? This was a post that was sent to any URL, and I can figure out what I wanna handle. I wanna go back and show you something else that's pretty cool inside of GitHub, that not everybody offers, that offers a webhook, but GitHub is pretty great. I'm gonna come back into our webhook, that it exists, and it will show you what happened, right? It will show you the deliveries that were made. If I open this up, I can see, and this is actually more nicely formatted. Not everything offers this, so it is important to remember Beeceptor, because you're gonna wanna catch other webhooks, and not everybody has this nice functionality. Again, we can see this, and we can see, see that dork, this dork here. It's so nice that GitHub lets you control the format, and actually see the way the data's presented. They really webhook you up. Okay, so now that we have a firing webhook, let's see if we can't make use of that data right after a quick break. We've now got a webhook that fires when our repository is starred. I think we should use that knowledge to celebrate and we shouldn't celebrate alone. I was thinking about another pretty common developer tool that you're bound to encounter is some sort of, realtime group chat software. It's very common that you'll end up in a chat room of sorts. Now, whether that be Slack, or Microsoft Teams, or Discord, these channels are a great way to stay up to date with whatever it is that you're congregating around. It's also a good place to just hang out and learn. I was thinking, why don't we explore sending our GitHub data into one of these chat platforms. We'll make sure that everyone celebrates when our repo gets starred. Now, I'm gonna choose Discord, but you'll find that most platforms provide a similar sort of integration. Now, like we saw with GitHub, we were able to define a webhook that would fire when certain events happen. Now, Discord actually allows you to set up the other side automatically. They set up a webhook handler for you. Let's see what that feels like. Just a friendly reminder. This is probably gonna look a little different for you, in the future. Now, if you run into any problems following along, check the teacher's notes, I'll update you there with changes. All right, so if you don't already have Discord, it's a pretty quick setup, and I've included installation instructions in the notes. Go ahead and pause me, and get it all set up. This here is my current Discord. I've got some learning channels set up. Here's the free code camp, and there's TwilioQuest. There's the coding den, all great learning communities. If you're looking for extra places to hang out and learn to code, check out the teacher's notes. I'm gonna go ahead, I'm gonna make my own brandnew server, by clicking the plus button, and I am going to say, create a new server and invite your friends. I'm gonna do that. Let's go ahead, I'm gonna call this exploration, and we can get rid of this later, totally fine. I'm gonna click create, and it's gonna say, invite your friends. I'm just gonna go ahead and close this. I've got friends, I promise I got friends. What's really nice about each one of these Discord channels, like this is where you could come and talk, right? You could talk in these channels. Each one of them has this little icon here, and because we own the server, we can edit the webhook. Let's go in here, I'm gonna click on this integrations, over here on the left, and you'll see here, there's this webhooks. I'm gonna choose, create webhook, and let's see, webhooks are a simple way to post messages from other apps and websites into Discord using internet magic. I agree, they are pretty magical, aren't they? Let's make some magic. Oh, and here it came up with a suggested name, Captain Hook. (chuckles) What a great dad joke, which if I'm honest, I'm kind of bummed that I didn't think of. Hopefully some more dad jokes pan out. This one kind of, petered out at the end. All right, so I'm gonna change this to GitHub Notifier. It says careful, you have unsaved changes. I'm gonna click save changes, 'cause I want that. I want a the thing called, GitHub Notifier, in general. Again, what's happening here, is that this is building a webhook handler. When you post to it, it sends a message into the general channel. Now, this is important to note, this is different from what we saw at GitHub. GitHub made the request to the handler. This handles the request, both called webhooks. But therefore, because we have both sides of this, we should just be able to connect them, right? In fact, it looks like the only thing I can do, is just copy this webhook URL. I'm really, that's the webhook handler URL. I'm gonna go ahead, I'm gonna click this, learn more, up here, because let's assume that we didn't know what we were gonna do. I'm gonna click up at this learn more. It talks about some things that we could do, and it says, can't really use webhooks, can use webhooks. Here's GitHub, that's great. I'm gonna make this a little bit bigger for all of us. It's talking about making a webhook. Oh, look it's changed already. Before it was, it's under integrations now, so already see these notes have changed a little bit, that's fine. There's the Captain Hook joke, for GET updates. Let's see, let's keep on scrolling. Well, this looks important, to make a webhook message display messages properly, it's really, really, really, really, really, really important, the caps there got me, that you append /github to the end of it. Yes, like five really is important. Okay, it's telling us to go over to our GitHub settings, like we had done before, and put the /github on there. Let me get back to that, let's get back. Here we are, here is my GitHub repo, and I'm gonna leave this old, this old webhook in place. Let's go back into our webhooks here, and I'm gonna add a new one. You can have multiple webhooks doing different things, and let's do that, let's just explore what that feels like. I'm gonna add a new webhook, and I'm gonna paste, before I copied, right? I copied from that Discord, I clicked the copy URL button, so I have that there, except then I copied the help, so that's not good, let's not use that. Let's go back to the Discord, and I'm gonna do this, copy webhook URL. Now, it says copied in the clipboard. I'm gonna come back over here, and I am going to paste, and wow, that is a long URL and I need to do something. I was reminded something like five times, oh, right. Really, really important to say /github at the end. There we go. Now, this handler is unique to me, so that you can tell that this is whatever this is here. Yours is gonna look different than this. This is my specific user, probably my specific channel, all encoded in there. I've added /github at the end, and the content type in those notes, I saw that it said, application JSON, what's nice about, of course having two different webhooks, is we can do whatever we want here. I'm gonna click, just send me everything, everything that happens. Let's go ahead and send it, and I'm gonna click add webhook. Okay, and fingers crossed. I am going to, unstar the event and then I'm gonna star it. Ooh, I heard a little Discord beep, I think we got, I think we did it. I'm gonna go, oh, that was, that reveal wasn't as exciting as it could have been, 'cause I wasn't here, but look, there we go. A new star was added by craigsdennis, and there's that little avatar of mine. It's working, I think it could probably be a little bit more celebratory, but check us out. We wired up two completely separate services, (snaps) just like that. Pretty cool, right? We set out to do basically just what we wanted. When someone stars our repo, everyone in the general channel there will be able to see it and they can celebrate along. We saw how the nomenclature was kind of interesting, right? Like we saw how both services, GitHub and Discord, call it a webhook. One is the pushing side and the other is the handler side. It's a little confusing, isn't it? But, what Discord is doing, by putting that trailing /github, is specifically formatting that information that's pushed across from GitHub. It understands what is sent from GitHub, and it has specific formatting for Discord. I don't know about you, but I think for stars, I'd like to see it more sparkly. Give me some more emoji's in there at least, you know, really celebrate. In order to do that, we'll need to handle that GitHub request ourselves, and turn it into the format that Discord is expecting. That sounds like a good idea. Let's get ready to write some code. There goes our nocode streak. Why don't you get up? Take a breath of fresh air, give those coding muscles a stretch, and be ready to come back and dive into some code. We've got our GitHub event notifications broadcasting to our Discord channel. We're feeling pretty good about what we were able to accomplish, with just a little bit of configuration. But, we've decided that we wanna make things work a little bit differently than the default. This is a very common scenario, and a good look at why sometimes you can't solve everything with nocode solutions. There are often specific tweaks that your customers would like to make, that aren't necessarily exposed. Let's make our tweak. Let's make it so that when someone stars our repo, we write out some emojis, and show a big picture of our code's newest fan. Now, in order to do this, we'll need to write a handler. I've written the boiler plate, or the beginning common bits of the code, for us already. It's available in the repo. Before we dive in, I wanna take a quick moment here to talk about some of the possible challenges that we might to encounter, as we start developing on our local machines. In order to get things up and running here, I'm going to be using a lot of tools. Now, depending on where you are in your coding journey, some of these tools might be completely unfamiliar. I wanna assure you that it is okay for it to feel overwhelming, we've all been there. Setting up these tools is a onetime thing, but it definitely is a hurdle that I don't wanna minimize. I've seen this frustrate folks to the point of giving up their coding journey. Please don't give up. You are doing great and you will make it through this. Ask for help, and remember, all of us have been through this. I've included instructions for installation for all of the tools that we'll be using here shortly, in the notes. Please, remember that you can pause me for as long as you need to get things working. All right, let's do this. The first thing that we're gonna need to do, is get this repository from GitHub onto our local machines. The way you do that is by clicking this code button. As you can see, there are several ways to get ahold of this code. You could even download a ZIP if you wanted to. However, I'm gonna suggest that we use Git to do this, but like you see here, you don't have to. I'm using a Mac and I'm going to start my terminal. I'm gonna do that by pressing command+space, and typing, terminal. On Windows, this will be either your command prompt or your PowerShow. At the command prompt, I'm going make sure that I have Git installed. I'm gonna type, git version. There we go, and as long as something comes back, you're all set. If not, you'll need to install, Git, there are instructions in the teacher's notes. Git is a powerful version control software, which lets you and your fellow developers, make and document changes to files. Now, using Git is unfortunately out of the scope of this course, but I highly recommend learning it. I've shared links in the notes, for where to pick up this crucial collaboration tool. It makes things like we're about to do, super convenient. I am going to navigate to where I'd like to store this code. This is of course, a personal decision. I keep a code directory, or folder, right off my home directory, which is represented by this tilde, in Unix land. I'm gonna change directories, or CD, into that directory, and it's called, code, and I'm gonna make a new directory here called, courses. I like to store the tutorials and courses that I take, the code for them, I store them in a place called, courses. I'm gonna say, make der, mkder courses. Back at GitHub, I'm gonna choose that I wanna get this using HTTPS. I could use SSH if I wanted to, but I'm gonna use HTTPS. Typically I do use SSH, this is up to you. If you have it set up, this is something that you need to do, if this is your first time doing it, you won't need to set anything up to make this work. I'm gonna copy this URL here. I'm gonna click this, I'm gonna go back to my terminal. I'm gonna say, git clone, and then I'm going to paste, so we've got that URL there. I'm gonna click this. What this does, is this pulls a copy of all of the code, and puts it locally on my machine here. Now, that it's here, I'm gonna change into that directory. CD web, and I'm gonna press tab, webhooks course. Here we go, and I'm gonna open up this whole directory in my editor. I use Visual Studio Code, and if you don't yet have an editor, I highly recommend this editor as well. It's pretty great, it's free, there's tons of plugins. There are installation instructions in the notes, so I'm gonna type code, and then I'm gonna press dot. Awesome, here it goes. Let me make this a little bit bigger. The code that I wanna draw your attention to, is over here in the code directory. I'm gonna click this to open it, and then I'm gonna look at this expressdiscorder, this is what we're gonna work on right now. We're gonna open up this expressdiscorder, and in here in this server.js, this has the boiler plate code that I was talking about. This is using a web server called, Express. In the handler that we're going to handle, is a post from /github, and then it will run this code. We'll take a look at this code here in a second, but basically it means if, you make a post to this web server, that's running here, this web server, at /github, it'll run this code here. This code will run when a post happens, but in order to run this, we need to make sure that we have Node installed. VS Code has a builtin terminal actually, so let's go ahead and use that. We're gonna go to terminal and new terminal, and you'll see here that in the future, I can use control and then tilde. Nice, and so now it's put me in the root there, so I'm gonna go into CD code/, and then I'm gonna go into the expressdiscorder folder. Awesome, in order to run this server, we'll need to make sure that you have Node installed. (chuckles) I told you there were a lot of tools. Node is a JavaScript runtime, that allows you to run scripts on your local machine. Let's check and see if you have it already. I'm gonna go ahead and type node version. Now, as long as this first part here, this V, whatever, is 10 or greater, the code should work as expected. Now, if not, check the teacher's notes for how to install Node. Once you have Node installed, you'll also have npm installed. npm is Node's package manager, and you'll find that it stands for just about anything. I actually have quite a bunch of fun with that. Let's just go to the page really quick. It stands for, nice paintings, Mondrian. What else does it stand for? Oh, does it not refresh every time? There we go. Nincompoops producing methane, novelty plastic mustache. Okay, there we go. It stands for, Node Package Manager, but it stands for a lot of things. What I've done already, is I've built this package.json file, and it has in here some dependencies, and the dependencies will come in and it will, they're gonna be installed for you when we use npm. Let's install those things. We'll do that with npm install, and that will go and install packages like Express, you know, the web server. It will also use Axios, which is a library that we can use, to make our own POST requests, 'cause we're gonna post to, the Discord URL. We need to make POST requests, because we're going to post to our Discord webhook handler, like right in here. It says, axios.post, and we're gonna post, oh, that reminds me, we're gonna need to store this someplace. 'Cause remember, that that's private to you. It's your personal link, and as you're about to see, you don't want anyone getting their hands on it. If they just post to it, they could post on your channel, and you don't want that happening. One way of dealing with the security, is to use what's known as an environment variable, and what the code here is using, this process.env.DISCORD_WEBHOOK_URL, is accessing your environment variables. What I've done, is I've set things up, so that you can define in a file named, .env, and that's right over here. That's short for environment, and you'll see that you don't have one right now, 'cause we just check this out, right? What you're gonna do, is you're gonna want to copy this .env.example, so we're gonna grab this file. We're going to, let's see, I'm gonna copy, and then I'm gonna click this, and I'm gonna click paste, right? I right clicked, or twofinger clicked on a Mac, to do that. I'm gonna rename this file now, to .env, .env, here we go, and in here you'll see, that you need to get a hold of your webhook URL. I'm going to go and grab that from Discord. Back in my settings, remember in the channel under integrations, under webhooks, I can view this webhook. Here's my GitHub notifier, and I'm gonna copy the webhook URL. I'm gonna come over here, and I am going to paste it and save. Now, I have a .env, and this is my own private file. What's nice about that is, this code can now be shared, right? It's code that maybe anybody can run, right? I was able to give this to you, and what made it personal for you, was you put stuff in your environment variable. This is a common way to share code, but have the private information, like the stuff that's unique to you, hidden. Okay, with that all set up. I think that we're ready to spin up this web server. I'm gonna write npm start, and it says that it is listening at local hosts. It's telling me I can command+click that. Let's go ahead and do that, and thumbs up indeed. We did it, so we have a local web server running, awesome. Whew, that was a lot of tools to install in one video. Now, that we're all set up, we need to make it so that GitHub points to our local web server. Uhoh, our local web server, it's not on the internet. How can GitHub possibly see it? Let's take a quick break, and when you come back, let's explore tunneling, so that webhooks can see our local system. We just got a local web server all set up, and it's ready to handle events from the GitHub webhook. But, we have a slight problem, our web server is local. Only we can see it, it's not on the internet, and this is typically how you do development, right? You develop locally, you get things working the way that you want to, and then eventually, you deploy your web server to a publicfacing URL, so that the world can visit your masterpiece. But, typically you only deploy after you've worked through all your challenges, you don't deploy right away. Now, this makes for an interesting challenge in creating webhooks. In order for a webhook to work, we need to be able to make a POST request to a public URL. Now, the good news is, there are a lot of tools, and yes, I'm gonna have you install another tool, sorry, but it's just one this time. What this tool does, is it opens up a tunnel on your local machine, so that your application can be publicly accessible from the internet. Now, this type of tool is handy also, for like if you wanna see your application in development. Like, if you wanna look at your phone or your tablet, instead of just your local machine, it's pretty handy and it's quick to use. All right, let's open up this tunnel. The tool we're going to install is called, ngrok. The N stands for, network, and to grok something, means to understand it. It's also a Unix tool that allows you to understand unstructured data. What ngrok allows you to do, is open up a specific port on your machine. Now, if you recall, our local server was running on port 3000. What we can do, is open up that port to the internet. I hope that you'll grok ngrok here shortly. First things first, get ngrok installed. Now, not be a broken record, but this page is bound to look different in your future. Check the notes if you have trouble following along at any point. There's a download section, so let's go in here. Let's go ahead, let's download it, it's free. I'm gonna download this for Mac OS. I'm sure it'll detect where you're at, and what you get back is a ZIP file that has a command line executable in it. I'm gonna click that and open it up, and it automatically opened up in my downloads directory. Go ahead and pause me, and try to find where your download went. Mine went into my downloads directory. I'm gonna go in my Visual Studio Code. I'm gonna open up another terminal here. You can do that with this little plus here. Here's another terminal, and I know that that went into my downloads directory. I can say, CD, my home directory, and then downloads. And then, from here, I can say, in this directory run ngrok help, we can just kind of, see what it does. There's the different things that it can do. I use ngrok all the time, so I've put it in my path, and that lets me run it from wherever I'm at. Check the notes on how to do this, it's totally optional. I will use the ngrok from my downloads directory in these videos, but if you wanna add it to your path, 'cause you wanna use it all the time, check the notes and you can get yourself set up. Okay, so I'm gonna go back to my other tab. Looks like I have three open, you can type exit there. I've got, the server is running, and it's running on localhost3000. In my other terminal here, I'm gonna go ahead and ./ngrok, and then you say what you want to do. I'm gonna open up an HTTP port, right? Hypertext Transfer Protocol, and I wanna open it up on port 3000. If I do this, what happens is, I get a brand new URL, and if I copy this, I copy this URL. You'll notice that there's the HTTPS as well, which is pretty awesome. You get a HTTPS for free. I'm gonna go ahead, I'm gonna copy that one, or actually I could command+click it. Let's do that, we'll command+click it, and it's gonna open up that webpage, and you'll see that this string of numbers, if I did that, I could also open that up on my phone or my tablet, and it would be working. I totally had that hairdo, by the way. So, because we can see this URL, it also means, GitHub can now post its payload to us and we can process it. Let's jump back, and let's take a little deeper look at what's happening in that code in the server.js. Let's get back into that code there. See if we can get a little more real estate over here. I can't, unfortunately, let's see maybe we can go a little bit lower over there, is that all right? I think that's all right, okay. We are going to get a post to /github, and it's going to, it sets up a couple of things. We've got this content, and we have this hardcoded avatar URL, and it's gonna post to our webhook URL. It's gonna post the content, which is what we said here, should say, wave. This is an emoji, and it should say, hi, Mom! I like to always debug with my mom, whenever I can. And then, we're gonna post, and then we'll get, we'll send back a success message if it worked, and if not, we'll send out an error here. Well, let's run it. I'm gonna copy our ngrok URL one more time. Just to make sure I've got that in the clipboard. I'm gonna copy this, and I'm gonna take that over to our GitHub settings, right? Let's get back. Here's the get GitHub course, I'm gonna go into the settings. Head over to webhooks, and I am going to add a new webhook, oh, and it's making me log in. I'm gonna use, let me grab my password here. Okay. All right, so we're gonna add that webhook. Again, I'm gonna copy that, 'cause I copied my password, so I'm gonna copy this link here, the ngrok.io, and remember that we have a /github that we need to post too. Let's go in here, we're gonna paste. Let's get this (faintly speaking) off, and we'll say, /github. We want it to send JSON, 'cause I think that that's easier to work with, and let's do, again, let's just select the individual events. We'll do a star, let's uncheck pushes. When you're just interested in when somebody stars, and we're gonna go ahead and add webhook. Okay. Let's switch back to our Node server. Oh, it said, success. It said, success, does that mean that we got a post already? Don't switch. Boom, we got it. As soon as you set it up, it sends one, so there we go. Hi, Mom, and there's Dr. Tyson amazed by what we just did. We sent a message from GitHub, through our tunnel, to our local machine, back out to the webhook handler. Awesome, boom indeed, Dr. Tyson. We got it, well kind of, I mean, we got the starts of it, right? Now, we can iterate our development until we get exactly what we want. Just like we saw with Beeceptor, I can actually use ngrok to see what was passed to us. Let's go to the ngrok, go back to the ngrok window real quick. If I come, I'm gonna move this up a little bit here, even a little bit more. I can see that there is, a post was made to our GitHub from GitHub. In here, there's this web interface. If you follow this link by doing a command+click on it, you will see that this is the information that we got from GitHub. Now, let's go ahead, let's make sure that it's working when we get a star, 'cause right now that just worked from the original message. I'm gonna go to webhooks. I'm going to unstar and star. I think we'll get two, yeah, so you get one every time you star and every time you don't star. There was a new star added. That was from one of the bots that we were pushing before, and then here's this one that we just did from getting a star on the thing, awesome. It's working and if we look at our ngrok inspector here, we can see that this is the message that was sent, and it was an action that was created. This is nice, right? We can see exactly what was sent, so we can hang out in here. Now, I realize that GitHub also shows you this, and we could do this with Beeceptor, but once you get ngrok running, this flow is pretty much all we need, right? We can see that there's the sender, there's the avatar that we're gonna need to grab. I'd also like to show the repository name, right? Let's take a look and see if we can't find that too. The repository name, oh, this is great. This would be awesome here to say the name of it. You can either use this name or full name. Those are what we wanna grab from this JSON that just came in from the post. Let's take a look at that real quick. Since we already have the, in our code, let's back down here, in our code, we already have this avatar URL defined here. Let's go ahead and let's grab that from the request. How's that sound? We're gonna get rid of this hardcoded, Dr. Tysonthing there, and we're gonna get, from the JavaScript object that's being passed in here. We have the request that comes in, and on the request, there is a body and I have it so that it is reading JSON for us, this boiler plate is reading the JSON, so it knows about it. That was in .sender, right? At the bottom there. If we look, we were in down here, in sender we have this avatar URL, right? This is who starred it and this is their avatar. I have this avatar URL, so I'm gonna use that here. I'm gonna say req.body.sender.avatar, and it was _url. Now, to make sure I got it, I'm gonna need to start and stop my server. It's a little annoying, right? This is a little annoying to have to start and stop my server to make sure that it works, but I will. Control+C, we'll get you out of that, and then I'm gonna do npm start, to run that again. Now, my code is reloaded, but I don't wanna do that every time. I don't wanna stop, I don't wanna control+C and do stuff. I know I said only one tool, and you don't really need this, but I think you're gonna want this. There's a tool called, nodemon, that will watch your JavaScript files, and it will automatically restart the server for you. It's really nice, and I want you to have it, although I don't want to keep on throwing tools at you, but let's, I'm gonna show you how I install it. You don't have to use it. We're gonna do npm install, or nodemon g, for global. After you install this, you can use it whenever, that's what the g means there. Now, that this has been installed, we can say, nodemon start, it kind of looks like it says no demon or like node, mon. Anyway, so here we go. Now, you can see that if I add this, hi, Mom, and I add some more and I click save, it will restart the server, which is exactly what we love, want, right? You wanna change, every time you save, you want the server to be running your latest thing, it's a quick, rapid development thing, that once you get in the handle, hang of it, you will love it. All right, so the server restarted, and back on the ngrok page, I don't know if you noticed this or not, but this is awesome. There is also, just like on, there's a replay, so you can replay and you can actually even edit it. But, I'm gonna go ahead and click this replay. Ooh, there we go, baboop. Okay, so there we go, hi, Mom. There's my avatar coming through. My avatar URL is now there. Now, that's a pretty big picture, I love that. That feels great, this is like, this is a new person who liked your code. Great, good feeling. We're doing good, and we really say, hi, Mom, now, right? Our change is live. Now, what we need to do, is we need to change the content variable, okay? We need to change this content, so instead of saying, hi, mom, we need to make this dynamic about who came in. Let's do this, I'm gonna write a todo here. I'm gonna write a todo, so we'll say, todo, change the content variable to contain the repository name and, the GitHub, username, and why don't you add some emoji flares? You can explore, if you want to, in here, you can explore with, you know, there's like rocket, right? There's a rocketthing that you can do. If you just type colon and then the name of it, you can start seeing what it is that you could do with emoji flare. Why don't you pause me, and see if you can complete this todo? Use the request from GitHub to do this, right? You can look over at your ngrok, and see what's going on there, and make sure that you change the content of this. And then, go ahead and do a replay, and see if you can get that content to be what you're happy with, when somebody stars your repo. Give it a shot, and when you're done unpause me, and I'll show you how I did it. Remember, to use ngrok to see what the request looks like, and to replay it, are you ready? Pause me. (icon beeps) (icon beeps) How'd you do? I hope it went well, and don't sweat it, if it didn't, you'll get this. What I'm gonna do is I'm gonna grab the username, and that was in req.body.sender.login, okay? And then, I'm also gonna grab the repo name. I like to pull these things out, just to make sure I got 'em. We'll say, req.body.repository.name. The sender is at the bottom, and the repository was up at the top there, that request. What we can do is we can use a string template in JavaScript. We can say, one of these back ticks like this, right? Then, we can say, $(username), just starred $(repoName), and this way you could have other people set up to their repos. You could share like, let's say we're in a community of everybody who is, write some code together, we can all run this. Because, this is our own private Discord URL, you could let other people run it in there GitHub, in their Discord webhooks, or they can post to this URL. Awesome, so let's go ahead. I'm gonna save this, it's saved, and the server has restarted, so fingers crossed. We're gonna go back over to our ngrok, and we're gonna click replay. We heard the little Discord go, and it says, craigsdennis just starred the webhooks course. Oh, shoot, I forgot my flair. Let's go back, let's see. I definitely think we need some tacos. I can't have enough tacos, we got taco, taco. How about, let's definitely do the rocket. That's one of my favorites, rocket, and I also like, tada, tada, taco. I will save, and again, I'm gonna come back, and I am gonna replay. I heard the boopboop. There we go, oh, beautiful, so much flair, awesome. Pretty smooth workflow, right? I hope that gave you a clear feeling of what developing a webhook handler might feel like in practice. We saw how not only can ngrok open up a tunnel to your local machine, but it also provides the ability to review and store what was posted, and it even allows you to replay. It really speeds up your development process. Now, I'm sure you're probably wondering, well, great, but does this mean I have to leave my local machine on? Of course, the answer is, no, but you're gonna need to deploy your applications, so that GitHub can reach 'em. Now, if you don't have an existing application, this can definitely seem daunting. You probably don't wanna spin up a Heroku instance, just to host this single endpoint. That seems like a lot of work. One of the solutions that has been gaining a lot of ground, is the idea of a cloud function. We'll take a look at this here in a second, so that you can see how that feels. These make a really good solution for a quick webhook handler. I want you to get a feeling for it, as it's getting more and more popular in this world. But, before we get there, you, my friend are due for a break. That was a lot of technology and a smattering of concepts. I want you to take a break and let it all soak in. I'd love for you to make sure that you can picture in your brain, the request from GitHub coming to your handler, and your handler doing what it needs. Now, in our case, it's posting to a webhook handler that was already set up by Discord. I'd also like you to take a minute and realize that you can now run any code at all. When an event that supports webhooks occurs, you can handle it. That's pretty cool, isn't it? Now, as empowered as I felt before by the nocode workflows, like IFTTT, these possibilities are actually quite limitless. Now, I could definitely make my dog light up when I get a star, look, check this out. Just like this, dog star, Keanu would get that one. Okay, so after your break, let's swing back and check out serverless cloud functions. (upbeat electronic music) Okay, we got our webhook written and we're happy with it, but in order to run, we need a public URL. While our tunnel solves the problem for development purposes, it's definitely not production ready. Now, we could deploy our web server that we wrote and hosted somewhere. There are lots of providers that do that, and it's definitely getting easier to deploy a web server, but even the server seems a little heavy, doesn't it? We're really just taking some values, and quickly doing our thing for a single request type. It's hardly a web application. Well, we're not loving this feeling. Succinctly, this feeling is, do we even need a server? Could the project go without one, could this be serverless? There's a growing movement called, serverless, and it tackles this problem exactly. You don't need to worry about the server, someone else will handle it for you, and it will scale both up and down for you. Now, this scaling both directions is referred to as, elasticity. FunctionasaService, or FaaS, is the idea at the core of serverless. Basically, you write a function, and you follow the specific parameters. The provider handles all the routing responses and scaling. All of the big cloud players have some sort of version of this, and typically the executions are free, until you hit a certain threshold. Even then, you only pay for when the function executes. This can lead to tremendous cost savings, also because there's only ever one function, it makes the code very easy to read and understand. It's kind of like. ♪ Take me down to the paradise elasticity ♪ ♪ Where the FaaS is cheap and the code is pretty ♪ ♪ Oh won't you please take me home, oh yeah ♪ Is that too much? I really Axl Rose to the occasion there, I guess we can probably just slash that part out later. Okay, fine no more puns, and roses. I thought you should have a taste of how the serverless development feels. I went ahead and got the solution all coded up and ready to deploy. There are a lot of serverless providers to choose from, but one of my favorites to get up and running quickly is, Netlify. Now, standard warning is in effect. This flow that we're about to do is bound to look a little bit different. Netlify is always adding functionality. Another thing that I wanna point out here, before we dive in, this is totally optional. You don't need to do this. I totally won't be offended if you just watch me do this. I've signed up for a Netlify account, and I used my GitHub account, and I'm gonna head to their docs really quick. They're right here in the header, docs. Now, what I wanna install is the CLI, or commandline interface, which allows us to run commands from our command line for Netlify. Let's go ahead, let's click this. Let's get started. Here's some great information on it, and we're gonna go ahead and install it, and we're gonna install it with a g, which makes it go globally, okay? That means that we can use it wherever. I'm gonna come in here and I'm gonna run this right from the root of the directory. It doesn't matter where we do it, 'cause we're gonna do it globally. This will install the Netlify package. What this will do, is we'll, here shortly, what we'll do is we'll authenticate, and it will allow us to do actions on Netlify on our behalf. It's super powerful, it's great. You hardly ever actually need to leave your command line anymore. You just hang out in this editor. I think you're gonna love it. Okay, we are all set up here. Again, like I said, I had already started porting this code over, and first though, let's log in first. If you do Netlify space login, I'm already logged in, but what will happen, here I'll switch my account, so that you can see that I go through the same thing that you do. I'm gonna say, switch my account, and I am going to log into a new account, and it's gonna pop up here, and it's gonna say, authorize this application. This is okay to do this, this is what we wanna do, we wanna authorize that CLI, awesome. Now, we can, you can also revoke at any time from the screen here inside of Netlify after a login. All right, here we go. We are logged in to Netlify. I'm gonna take a look at this directory here. This is the netlifydiscorder. Open that up, and under functions/discorder, there's a file called, discorder.js. This is very, very similar to the local code that we had just looked at, the Express code. There's a couple of things that are a little bit different. The first thing that I wanna point out, is that this function is asynchronous. You can tell that, because it says async. What that allows you to do, is then later await. You can see here that when this Axios, remember this is what we're using to post to Discord, this returns, what's known as, a promise. It's a promise that in the future there'll be a value. We handled this differently, when we were not in an async function. Let's just take a look at that real quick. If I open up the expressdiscorder and I look at the server, you'll see that I did axios.post, and then down I used a .then, and I got the response back, and then I played with the response, right? This is a function that's getting the response back. But, this function, when it was declared, is not asynchronous, and it's using a request and a response, remember that. It's using the request, and we were able to pull things off of the body before, so we were using req.body, and it was already a blownup object. Just remember that, it's a little bit different. Again, this is using a promise, and it's using the then pattern. Where what's different over in Netlify, is we are using an async method, which means that we're able to do something like this, where we can say, await. Now, instead of it coming through in a then function. this pauses and waits, and then it goes here to go rest, so it actually runs synchronously, or it appears to run synchronously, right? What makes this different, is before we were catching it, we were doing a then, and then we were doing a catch on the error. Here, we're using a standard JavaScript try and catch, very similar, just a little bit different of a pattern. I know that that can hang some people up, so please check the notes, if you'd like to learn more about asynchronous JavaScript. The other thing I really wanna point out, what's the main difference that I had to do here, porting these things over, was before remember it was request and response? This just has event, okay? What's expected is the response you just returned, so I'm returning an object that gives a status code of 204, instead of returning a response. That's what Express had expected, and event is basically the request object, more or less. What you'll see here, is event.body is a string, and in this case, it's going to be a JSON string, and we're going to parse it into body. Then, the rest of the code is the same. I just made an object called, body, which is what was on the other request. It's just a little bit different, but pretty much the same code. This code we're gonna go over into Netlify, Discord, we're gonna go into code/netlifydiscorder/, right? 'Cause, we wanna get our prompt in the same place here. Now, this is using Axios, and this also has a packaged JSON, and you'll see that it's got Axios. I'm gonna go ahead, I'm gonna do an npm install, and there we go. Believe it or not, this is ready to deploy. Watch this, this is awesome. We're gonna say, Netlify deploy, and we're gonna send this up to the Netlify server. The way that this works, is anything that's in this functions folder here, is going to become a serverless function, let's do it. It's gonna ask, it's not configured to a site, this folder that we're in right now. We want to create a brand new site, so with that, that is what we wanna do, and here we go. It says, team Craig Dennis's, everybody with the last letter of S, knows what I'm feeling there. Yes, we do want Craig Dennis's team. All right, so we wanna make a unique site name. They suggested, supercoolsitebycraigsdennis. Let's try gitubstars, 'cause that's what we're doing, right? You'll have to choose something different, 'cause I'm gonna take it, and somebody else already took it. Don't you hate this though? People end up with like, githubstars1925, so githubstarred, yes, I got it. I've got, githubstarred, and that's gonna be, githubstarred.netlify.app. Now, it's asking what directory do you wanna publish? And, it's that, it looks like almost like an emoji, but it's a dot there. It says like, this current directory. Yes, that's the directory I want, and would you believe it? But, we just pushed up to a server, a live server, there's a function that's running, and it's running. Let's go, I'm gonna jump in here in the admin side of things, I'm gonna follow this link. I clicked that logs link there, here we come. We are up, we are published today, and let's drop out. Let's go take a look at these functions. It says, one Lambda function is ready, and it's down here. It's this function. In here, whenever the function would run, this is what the function's name is. This is it here live, whenever this runs, the function log will show any sort of console log that we have, pretty cool, right? I do have one little bit of configuration to do. We need to set an environment variable for what our personal Discord webhook URL is, right? That code, remember, I'm still using the environment variables in that code. I need to put that environment variable here, and that's under here, it's under settings, and then it's under build and deploy. Here we go, environment variables. I'm gonna say, edit variables, and our variable name, let's just verify we know what that variable name is. It's inside this discorder file here, and we called it, DISCORD_WEBHOOK_URL. I'm gonna pop that into my environment variable here, and the value that we want, you can get that from Discord. Let's go, let's grab that one more time, just to remind ourselves where that's at. We're gonna click the settings here, integrations, view webhooks, GitHub notifier, and I'm gonna copy the webhook URL, okay? I copied that. Come over to the build, I'm going paste that. I'm gonna click save. Now, if I come back to my function, let's go ahead and get that URL again. It says that it is running in production. I'm gonna grab that, I'm gonna head over to our GitHub. I'm gonna go in my webhook course, in the webhook course here under settings, under webhooks, let's go ahead and let's edit this one, right? This is our local machine. This is the one that we were doing last time. It's not gonna work, 'cause sometime I'm gonna shut my computer off. I swear one of these days, I'm not gonna have it on. All right, I'm gonna grab my password. I paste my password, and I'm gonna make sure that I have the webhook URL copied. I'm gonna change that to be, that's not right, we don't want the Discord web app URL. We want the githubstarred.netlify.app, new site on Netlify. I'm gonna copy that, and I am going to paste that into my webhook. There we go. Everything is still set, I'm gonna update the webhook. I am going to get my Discord into a good state. Here we go, let's star this thing. (computer beeps) Ooh, I heard it. We get the new star added from here, where is the one from Netlify? What happened? Let's see if we can debug it. Is this updated? Githubstarred, netflifydiscorder, what's this? This doesn't look like, maybe we need to update the webhook, maybe it didn't update. Oh, here we go. Here's some failed ones, let's take a look. What do we get in response? The URL argument must be of type string, received undefined. Let's see, that's the same thing again, the URL argument must be of type string, received undefined. Let's see. It doesn't like that avatar URL, let's see why. We've got the body sender avatar URL, we're parsing the event body. I'm assuming that's what the 500 is. Let's look at our, we can look at our logs though, too. Let's see if there's anything that happened in the logs. It just says, that it ran. I didn't get an error there. Let's see, one more time what that said. Let's make sure that it has a sender with an avatar URL. Sender avatar URL, yeah, it's still there. Sender avatar URL. Let's do a console log, let's just show that off. I would say, console.logevent.body, and then we'll do afterwards, we'll say, console.log(body), okay? I'm going to, now I made the changes here, so I need to push them up. Publish that directory, and see it's a lot quicker the second time around. All right, and let's go replay that from GitHub. We don't want the delete one, that was the deleted, right? Let's replay the one. Let's do it. (computer beeping) Well, there we go, now it's working. I don't know what that was, something silly, but I wanted you to see. What you should seem is that this should update. There we go, so see, I can use console log here, to look at things. I'm not exactly sure what happened. I think what I'll do, is I'll go back and watch this, but you don't need to do the console log bits there, but that is how you deploy and debug a function, in this one new world. The good news is, is that this function is free, for a 125,000 executions a month. I don't think I'm gonna run into that limit, but you never know, this is a pretty killer repository. Oh, and while debugging with those handydandy console log statements, on the production, might not be your style, and it really shouldn't be your style. You can actually run a local Netlify dev environment, check the teacher's notes for that. I hope that gave you a good test drive of serverless functions, pretty neat, right? These functions are especially handy for webhook handlers and other oneoff scripts. You literally could use a function just like that, to kick off just about anything that you can imagine. That's a lot of power. Now, remember on top of being basically free, this will scale both up and down with load, because that elasticity is at the heart of serverless technology. I've added links in the notes to other serverless or cloud computing providers. All right, so now I hope that you're feeling like you've got a pretty good handle on webhooks. You understand why they're useful, you know what they can accomplish. You can see how you can do just about anything, and you even understand when you should use them. Really, that when is any time you wanna get notified of an external event. Whenever you feel like pulling an API, check to see if they support webhooks first. Basically, you're a pro, and I realize you might not feel like one, we've been focusing on just one event. Now, there are a couple of other platforms that deeply embrace the concept of webhooks. I've got something planned that will really stretch your new webhook muscles, and I hope it should give you the confidence, and most importantly, the practice that you need. Take a quick break, and then let's get started on the final project for this course. So far in this course, you've picked up the essential skills that you need to make use of webhooks in your applications. I thought we'd apply those skills in a large project, using completely different technology than we used thus far. This way, you can see how your skills are transferable. When it comes to technology that fully embraces webhooks, it's pretty hard for me to think of anything else other than Twilio. Now, if you've seen my courses before, you know that I am pretty obsessed with Twilio. When I saw that they used a video game to educate developers, I was like, I've gotta work at this place. Freeze frame, record scratch, (record scratches) now I'm a Twilion, and I'm in the game, but really I've loved Twilio, ever since I was introduced to it, I was at a JavaScript conference in 2012, and someone had built a scavenger hunt that you could participate in by just texting a number, and it would respond with different hints. Now, not only was it fun, I was also impressed with how people were using the text messages to build interactivity. You didn't need to install anything, you just text a number and you were playing. It's a pretty incredible input device. Text messaging is just one part of the platform. Really, any sort of communication or engagement that you wanna have, Twilio has an API for it. The way most of the products work, is that you buy a phone number and that number is yours immediately. You can use it to make calls and texts, and you can program what happens when people call into it or text it. People build all sorts of fun and creative things on the platform. In addition to a completely cloudpowered call center, I've seen a video game get modified live through a text message. Somebody built a Smashmouth hotline, which plays that one. ♪ Somebody once told me ♪ When you call, it was such a mean trick to give someone, when they ask for your number. There have been crisis lines that keep caller's number anonymous, and routes to an available person who can help in the time of need. I even saw a kid built a fake snow day alert message, he got in trouble. You can build just about anything you can imagine, and Twilio does most of this magic through webhooks. We talked a while back about lifecycle hooks. This is the concept where the flow of the application allows you to hook into it and the control is passed to you. You're responsible to respond with what the application should do next. That's the main concept for what happens with incoming input to your Twilio number, a call or a text message, right? The control of the application is passed to you via a webhook. There are a ton of other webhooks that allow you to control what happens at different times, when different events occur, continually passing control back to your webhook handlers. Because, your handler is any public accessible URL, your code can be in any programming language. It just needs to respond with what you want Twilio to do next. Twilio's basically a webhooks playground. There are an impressive amount of them to play with. Here's a couple of reasons for that. First off, Twilio has been around for a long time so there's been lots of time to build these events, to hook into, and to perfect that flow. For another reason, remember when we talked about the creator of the webhook concept, Jeff Lindsay? Well, he was a Twilion, in the very early days of the company. I found that out researching the history of webhooks, and it all made sense. I figure, what better place to show off your new webhooks skills, is there than Twilio? First, we'll build a simple affirmation text app, to get your feet wet. And then, we'll launch into a larger project that will take ideas from callers, record them, and text them to us, all with webhooks. All right, let's get started building this webhookbased application. In order to show off the Twilio webhook basics, let's build a really simple messaging application. What we'll build is an app that responds to any text message with, you've got this, just to give our texters a little confidence boost. Turns out those three words go a long way when you really need them. Now, in order to get started, you're gonna need a Twilio account. Now, don't worry, it's totally free. Twilio offers a free trial, and they give you more than enough free credit to build all of the applications in this course. If you don't already have an account, go ahead and pause me, and follow the instructions in the teacher's notes. After you get your free trial all set up, unpause me, ready? Standard word of warning. This is bound to look a little bit different, as Twilio is always improving things. Check the notes for anything that might function a little bit different. All right, I've set up a freetrial account too. We should be having pretty similar experiences. There are a couple of restrictions with your trial account, which are listed up here. You can send messages and make calls to verified numbers, and messages and calls include a note about this coming from a Twilio trial account. Like, when we send this text message, when you get a text message back, it's gonna say, sent from your Twilio trial account. Now, if you didn't already get your free trial number, go ahead and do that. Get a trial number, go ahead, click that. That's gonna give you one, 203, that's great. I'm just gonna choose this number, and right away, this number is all mine. With a paid account, you could get more, we only need, everything that we're gonna build here, we just need this one phone number, and it doesn't matter that it has the trial message stuff on it for what we're gonna build. All right, let's do it. Remember what we're going to do, is we're going to make it so that if anybody texts this brand new number that we just bought, we're gonna return back a nice affirmation. To do that, I am gonna navigate to my numbers. Over here, there's these little three dots, all products and services, and I'm gonna choose phone numbers here. You'll notice that there's this little pin icon. If you pin that, it will make it so that it's part of the menu. When you come back in here, you can find it. There's a ton of products. I'm gonna pin it right now, let's do that. You'll see here's the menu now, I've this phone numbers thing here. Let's go into our phone numbers. Again, this is our demo one, my demo one, you have a different demo one. I'm gonna click into that, and I'm gonna scroll down on this configure page. You'll see voice and fax. Yes, you can actually send faxes, actually comes in handy, I don't know if you have a fax machine anymore, I don't. I'm gonna scroll down here to messaging, and you'll see it says, messaging. When a message comes in, send it to this webhook via an HTTP post, send it to this webhook. That is supposed to return the instructions that Twilio is expecting. Now, the format that's expected is TwiML, or Twilio Markup Language. Just like HTML renders your webpage, TwiML renders your application. I'm actually gonna change this from webhook to TwiML Bin. A TwiML Bin is a handy way to return these instructions. You don't need to spin up your own server, this is taken care of for you by Twilio. It's a serverless solution, so here, I'm gonna make one. I'm gonna do that by clicking this plus button here. I'll say, plus, so I am going to name my TwiML event so I can find it later. I'm gonna call it, affirmation. Now, TwiML is tagbased and casesensitive, so I'm gonna say, and all of them start with a response, so response, response, okay. We want to add a tag that sends back a message, and that tag is actually, message. We'll say, you got this! I'm gonna drop a muscly icon in here, just to really get the point across. There we go, and then I'm gonna close this message tag. Awesome, and you'll see that there's some, it'll tell us whether or not we've got it good. It says, this is good, valid messaging TwiML. Let's do it, let's go ahead. We're gonna click create on this, and now you'll see messaging, when a message comes in. Go to this TwiML event called, affirmation, return that. Need to remember to save the number, all right. Now, I'm gonna pull out my phone, and I am going to text my number there. 2039025283, and what I expect, whatever I send, right? It immediately, it's gonna send back, you got this! I'm gonna say, I'm having a hard time with JavaScript, and it says, you got this. You're right, I do got this, thanks. Awesome, okay, so that is basically the "Hello, World!" of TwiML webhooks. That's pretty awesome, right? It's a good use, it's like, when a message comes in, send it to this webhook. Now remember, this could be any programming language or tool that returns a valid TwiML string. You can return this from any web application that you have existing already. And, this TwiML Bin that we used, because we didn't have a server up and running, it's a serverless solution. Twilio's hosting it for us, and handling the scaling for us. Like, we don't need to worry about that at all. More of this in the teacher's notes. Pretty great, right? We now have a way to respond to any incoming message to our number. While we're currently only using a static solution, we could definitely build a dynamic, a handler that did whatever we wanted. This is like our handler that we used for posting to Discord. This could be whatever you could dream up, and you can respond with a valid TwiML string to continue the application. We'll get to some more local development here in a second, but first, I think we should explore a lowcode tool used to build complex serverless workflows. Okay, my next idea for an app is a little meta. I would love to have a callin line, where anyone could call and describe their ideas for cool webhook implementations. I love hearing all your ideas, and I find that when I discuss things out loud, it greatly increases the likelihood that I'll get it done. Let's do that, let's build a hotline that prompts the caller to record their idea. Once the idea is recorded, let's transcribe it, and then text it to ourselves. We took a look earlier at some nocode solutions that were powered under the covers by webhooks. Well, Twilio provides a lowcode, serverless solution, that allows for rapid development and prototyping of applications. It's called, Studio, and like most nocode or lowcode tools, you'll find that you can build a lot of solutions just by dragging some objects around. Let's build the first part of an application using Studio. We'll make sure to keep our eyes out for webhooks. Hey, future you, this is for sure going to look different. You'll find that almost all nocode tools rapidly iterate on their UI daily to make things more quick and clear, and I'm always pleasantly surprised when I open up Studio. I'll update the notes on any changes that might've occurred, since right now in my timeline. All right, let's do this. Okay, so we are in our Twilio console. I'm on the phone number page currently, and I'm gonna jump over to Studio. That's this, these three little dots over here, and I am going to scroll down, into runtime, and I'm gonna choose Studio. I don't wanna do that scroll again, so again, I'm gonna pin that, so that shows up in my little menu here. I'm gonna go to Studio, and I'm going to click this, create a flow button, 'cause that's what we're going to do. We're gonna create a brand new flow. Let's do that, I wanna call this flow, idea catcher, and we'll say, next, and you'll see, there's a bunch of templates that we can use, but let's just start from scratch. We have a pretty straightforward way of doing this. Let's go ahead, let's just go, next. That looks like the dork that starred my repo. This here is called, the canvas, and what you do, is you drag widgets onto it. Let's see, when someone calls, we should tell them what we're expecting them to do. I am going to grab this, say and play, because I want it to say what we want them to do. I'm gonna drag this over, and we're gonna drop it right here. Now, that it's out here, I can click it. What will happen is over here, these properties will change. This say widget allows us to do text to speech. I could also give it an audio file if I wanted to, that's in here, I can make it play a message, but we're gonna have it say a message. We'll do text to speech, so let's see, I want it to say, hello there, I'd love to hear your wonderful idea. Tell me about it after the beep. All right, so these other fields down here, they are optional, but they're here, might as well fill 'em out, right? Let's make it English, and let's choose a voice. I'm gonna choose, KendraNeural. This is from Amazon Polly, all these voices are from Amazon Polly, and this is KendraNeural. It's kind of got this fun, those days of like, those robo voices are gone. I remember when, Texas Speech first came out, and it couldn't even say cheeseburger, it was like, chazebbiger. I'm calling, Kendra. I'm gonna leave her there, and we can make a loop a certain number of times. That is feeling pretty good. I'm gonna click save to update the widget. We want this to be said when somebody calls. What we're gonna do, is we're gonna drag from this trigger, note, this is like a webhook, right? We're gonna say, when an incoming call comes, we're gonna go to this here, awesome. That's probably enough to test, isn't it? Don't you think? The way that these work, is you can see that I made four changes, but I'm gonna go ahead and I'm gonna click publish here. We're gonna publish the flow. It gives us a little bit of warning ahead of time. Now, this is ready to use. I'm gonna go into, back to my number, and I am going to come into my number, and I'm gonna scroll down here. Under the voice and fax section, so when a voice call comes in, when a call comes in, we want to use a Studio flow, and we can choose our flow of idea catcher and click save. Awesome, now I am going to call that number, and I'll put it on speakerphone here. [Man On Phone] You have a trial account. You can remove this message at any time by upgrading to a full account. Press any key to execute your code. (phone beeps) (phone ringing) Here comes Kendra. Hello there, I'd love to hear your wonderful idea. Tell me about it after the beep. There's Kendra, it's telling us about the beep. That's awesome, right? We got that up and running, very easily, going through a webhook, and again, that's really rendering TwiML behind the scenes. It works, so now here's the trick, that flow that we built is actually a webhook handler. It actually has a URL, that little menu, this little like, select the flow, it's kind of hiding it from you, but it really is just an URL. What's really happening, is when a call comes in, and Twilio posted this URL, our flow returns TwiML, in this case, it's the say TwiML (faintly speaking), which is very similar to the TwiML that we wrote to send the message. But, the lowcode solution has that hidden away. Now, this is very common in these lowcode solutions. They abstract away the cogeneration and all the webhook handling, okay. Next, we want to record what our callers say. Let's go back to our flow, so I'm gonna jump back into Studio. I'm gonna click this idea catcher, and get back into our flow here. Now, we want to record, so I'm gonna drag out this record voicemail. We'll drag this out here. Awesome, and let's take a look at its setting. If I click onto it, we can see that it will stop recording after five seconds, or you can make it stop on, if somebody pressed the key. Ooh, and 3,600, that's 10 minutes. Oh, sorry, that's an hour. 3,600 seconds is an hour, and that's more than enough, even for chatty folks, who have very detailed ideas, like myself, very chatty. Okay, cool, so we also can transcribe the audio to text. We want that for sure. I'm gonna click that on, and look at this, we have a transcription callback URL. I know what that is, that's a webhook. That is a webhook, isn't it? But, what is actually gonna happen, when that transcription comes? I know that I could go up here. I could probably go to this help here and figure that out. But, if there was only a tool that we could use that would just allow us to put some random URL there, so that we could see the results, so we could capture what was sent. Wouldn't that be nice? Wait a second, there was something that we used earlier, wasn't there? Do you recall what it was? You wanna try and do this yourself? If so, go ahead and pause me, and get a webbased URL in here, that we can use to see what values are posted to it. Are you ready? You can do this, pause me. (icon beeping) Okay, ready, how'd you do? The tool that I was thinking of was Beeceptor. I'm gonna head over there really quick, jump over to Beeceptor again. I'm gonna create a new one called, recording, 'cause that's what we're looking at, right? We're looking at this recording thing here, and we have that up and running. Now, we know that we have this Beeceptor URL. I've got this, I'm gonna copy this, I'm gonna come back over here. In the transcription URL, I'm gonna paste the recording, and I'm gonna make my own thing up here, we'll say, transcription. Let's see, do we wanna play the beep? Yes, we definitely wanna play a beep, 'cause we said that, right? We also have a recording status callback. I think we just need the transcription right now, right? We don't really need to have, to know when a recording is available, but look, there's another webhook. All right, so I'm gonna click save, and then I want to connect these two together. It says, when audio completes, we want it to go to this one. You can see that there's, if you had more here, you could choose different things to happen, when different transitions happen in each of these widgets. Okay, so an incoming call is gonna come, it's gonna say, hello there. It's gonna record the voicemail, and that voicemail should be sent to our place. I'm gonna click save, and I'm gonna click publish, and now I don't need to go update my number again, 'cause it's already set to the flow, right? It's already set to this flow. It should be working now. If all is working as planned, when I call this number again, when I call my number and leave a message, we should see a webhook kick off here, let's do it. [Man On Phone] You have a trial account. You can remove this message at any time by upgrading to a full account. Press any key to execute your code. (phone beeps) (phone ringing) [KendraNeural] Hello there, I'd love to hear your wonderful idea. Tell me about it after the beep. (phone beeps) Yeah, so I have this idea, where I'd like to set up a call line where people could call in and record their ideas, that's my idea. Now, hopefully I hung up, and hopefully we should see here in a second. We should see our message has been recorded, and it's being transcribed right now. When the transcription's done, we should get pinged over here, if all is working. I'm trying to be patient. There it is, so we got to post to transcription. I'm gonna take a look at that. I clicked this and it's in the new format. Let's scroll this down here. We can see we've got a bunch of stuff that came in. Let's see, I called that number. Ooh, there's my number. Feel free to call, I guess. Here we go, transcription to text, so it says, yeah, so I have an idea where I'd like to set up a call line where people call and record their ideas, yeah, that's my idea. That's pretty great, but that's exactly what I need. I need that transcriptiontext field that comes across, that's submitted to my webhook. I need that transcription text, that's what I need, awesome. Now, that we've got a webhook event, we can write any sort of handler that we want. We definitely now have the, message has been transcribed, event. We can do whatever we want with that event. We could very easily send that text to Discord. Now, to complete our app, we're gonna have to have this event send a text message. Now, I'm excited to show you this, as it's super common to want to send a text message from your webhook handler. There are so many, when this one event occurs, text me about it. All those ideas are out there, and they're just waiting to be fulfilled. Let's develop the solution locally, using the localdevelopment tools that we learned about earlier. We now have a transcription webhook event that's happening. We saw in Beeceptor what the format looked like, and we saw what we wanted. We are ready to handle it. We are going to text that transcription to ourselves. It doesn't seem like that big of an application does it? Now, I could spin up a whole web server to handle this request, but that sure seems like a lot of work, for a simple, little application. Do you remember this feeling from before? Now, we solved it by using a serverless function on the Netlify platform. Because, this sort of oneoff handler is very common, Twilio also provides serverlessfunction capabilities. What do you say, we get one of these serverless handlers up and running to send our text messages out? Guess what? I am going to ask you to install some tools, but they're super handy and should be pretty quick. The first thing I'd like for you install is the Twilio CLI, or commandline interface. This is very much like what we installed for Netlify. It will let you authenticate and send commands to Twilio, from the comfort of your own terminal. I love it. If you're a Homebrew user on a Mac, you can install things using Brew, check the teacher's notes for that. We're gonna use npm to install it. We're gonna say npm install, twiliocli, and we're gonna do this with a g, which means it's installed globally, and we can run it from wherever we need. Cool, and now we're gonna do, much like we did with Netlify, we're gonna say Twilio login. This is gonna ask us for our account SID, or string identifier for our account, for our Twilio account. Let's open that up. Let's jump into here, let's go back to the home, the console dashboard. Your account sits here. There's a little copy button here, so I'm gonna click that and copy that. I'm gonna pop back over to my terminal, paste that there, and then we will go grab the auth token, which is a secret token that you should never let out. You can get rid of it, and I will get rid of it later, in case mine ever ends up showing to you here, but you don't wanna let that out. That's a secret, secret, so I pasted, there we go. I am going to call this, I'm gonna call it, my webhook account. I'm gonna call it, webhooks, awesome. The CLI supports plugins, and one of my absolute favorites is the serverless toolkit. We're going to use it to set up and deploy our function. Let's go ahead and install it. Now, this is in the notes, if you wanna copy and paste this, but you would do Twilio plugins install, and then @twiliolabs/ and pluginserverless. If everything is working as planned, you should be able to write, Twilio serverless, and get some response back, awesome. There are the things that we can do. I am going create, a new Twilio serverless project. In this directory where we're at, up here, so there's this directory called, code. I made one called, Twilio. There's some light changer code in here, that you can look at later. Just kind of, a little added bonus here for you. Let's go, let's jump into that directory. We're gonna go CD code/twilio, and then inside of this directory here, what we're gonna do, is we're gonna make a brand new server list, Twilio serverless project. We're gonna use the serverless plugin to do that. We're gonna say, Twilio serverlessinit, and then you name it. Let's call this, idea catcher, right? 'Cause, this is the thing that we're gonna write to, we're gonna post to this, and then we're gonna make this thing text to us. We'll do empty, there's lots of, if you don't specify empty, like we saw with the Studio, there's lots of templates that you can use. I think we're gonna start from scratch, 'cause I think it's clearer, in the direction that we're headed right now. This is preparing a new directory, so it will be all ready for us. Let's go ahead, try to get to the, we're gonna go over into idea catcher now. You'll see up here, there's this Twilio, and we have idea catcher here, and let's take a look at what it added, it added some stuff for us, awesome. You'll see that there's a folder for functions and there's one for assets. Let's go ahead and let's make a new file in this functions here. I am going to click this little plus button here to add a new file into this directory, and I'm gonna call it, sendtext.js. All right, this is the standard boiler plate that you'll need, it's in the teacher's notes too, if you wanna just copy that. Exports.handler, we're gonna write a function called, handler, and it takes a context, an event object, and a callback. All right, and we will make a function there. Callback is how you complete the function, and it's important, because of that asynchronous nature of JavaScript, you can complete the function anywhere really. Just to make sure that we got things working, I'm going to call it. Now, it's a standardnode callback function. That means that it takes its first parameter, is any sort of error that occurred. We're not gonna be expecting any errors with this, and we'll debug, we'll just do my typical, hi, Mom, awesome. The toolkit allows us to run our own functions locally, so that we can test them, so let's spin that up. To do that, you do Twilio serverless start. Awesome, and you'll see that it now says, that there's a function available on local host 3000. If I go ahead and I click that, I got, hi, Mom. Hi, Mom, how you doing, Mom? All right, and you'll see in the logs, I've got a 200, and it made a git request to send test. Excellent, now this server that we have up and running, is hot reloadable, just like we saw with nodemon or nodemon. This means that you can make a change, and it will be applied without you needing to restart the server. Let's add a little console log here. We'll say, console.log. We're gonna be sending a text here, sending text. Awesome, so now if I go and I refresh my mom page again, I did a command+R there, control+R to do a refresh, and if we look back, we'll see that the console log popped out here. Again, another 200 (faintly speaking), awesome, without needing to restart. Totally speeds up the development cycle. Speaking of which, let's get to quickly developing. Okay, so okay, we need to have our Studio flow post to our server, uhoh, our machine is local. We're going to need to have some way for our flow to be able to see our local server. Do you remember how we did that before? Wanna pause me and see if you can somehow get a public URL for this function without deploying it? Okay, pause me and see if you can remember how to open up the tunnel. Remember, you can go back, and it's okay if you totally didn't grok it the first time. Ready? Pause me. (computer beeps) All right, how'd you do? I was talking about ngrok to open up our tunnel. I'll open up a new terminal here with the plus, and I'm gonna run that again. That was in my downloads directory, my downloads directory, and it's ngrok, there we go. ngrok, HTTP 3000, right? That was running on port 3000. There we go, and so now, we'll see that we have this wildlooking URL. I'm gonna click that, open it up. It's not for that, it's for a /sendtext, right? Isn't it called, sendtext? Oh, I wrote, I called it, sendtest, but it should be sendtext. Let's fix that. If you were following along, like I hope you were, you probably did that too. You can rightclick and choose rename, and you can call this, sendtext. I don't know, what happens if you do that, does it restart? Look at that, it restarted with a new thing called, sendtext. I didn't have to restart the server, awesome. It's now called, sendtext, and if we're up here, I now have this wonky URL, ngrok URL that's up and running, That gets the sendtext. Now, the Studio flow can see it. I'm gonna grab that URL. I'm gonna go back to the flow, so over here, Studio. Wanna get back into my idea catcher, and on the record voicemail, we had left the Beeceptor URL, and now we're gonna paste our ngrok URL there, awesome. I'm gonna click save, and I'm going to publish, and we'll call. [Man On Phone] You have a trial account. I sure do. You can remove this message at any time by upgrading to a full account. Press any key to execute your code. (phone beeps) (phone ringing) [KendraNeural] Hello there, I'd love to hear your wonderful idea. Tell me about it after the beep. (phone beeps) Here's my idea. I wanna build an app that gathers ideas from people, and then texts it to me. Awesome, so let's jump over now. I've hung up, let's jump over and watch it come in. We should see a post to sendtext here, in a second, as that transcription happens. Boom, there it is, awesome. If we go over to our ngrok, we should be able to open that up, and see that the message came through. All right, so what we were looking for, is transcription text, here we go. Here's my idea. I wanna build an app that gathers ideas from people, and then texts it to me (chuckles). That's pretty good, isn't it? Pretty cool, okay so, let's make sure that we can access that. In our code, where we're sending the text, the way that those values come across, is they're on this second object here called, event. We'll say, let's do one of these, we'll say, transcription. That was event.TranscriptionText. Now, do you wanna hear me call back? Do you want me to take that time to call back, or is there some other way I can do that? This is the awesome flow that happens, right? I'm gonna go back now. I'm just gonna replay this, and we sent that text again, and now we should see in my console log, right? If I switch back over to my console log, we see there's the transcription thing, and there it is, we did it. Awesome, we got the Twilio CLI installed and all set up. This'll let us interact with our account, and it also has a plugin that allows us to quickly build serverless functions. We got our local server all up and running and opened up a tunnel using ngrok. We're now able to handle the incoming webhook request. We were able to get access to the information and now we can also replay those requests. That was quite a bit of work. Nice job, recalling how to get all those things working together. Now this, what we just did, is a very common flow that you'll be doing the more that you develop webhooks. It'll only get more familiar, as you progress. Why don't we both take a real quick break. I know I need some water. When you come back, we'll wrap up the handler side of the code, and then we'll deploy this function to the cloud. So, we don't need to keep our local machines running all the time. Enjoy your welldeserved break. You're doing great, see you soon. (bright electronic music) Okay, let's write our handler bit. We're gonna write some code that texts you the transcriptions when they arrive. Let's do this. All right, so I am able to get the transcription that's being passed, being published from that webhook. We're able to get the transcription back. Now, we want to text it. The context object here is very handy. It has a handy way to get access to the JavaScript helper library. What that does, is gives you an authenticated client. We're gonna say, const client = context.getTwilioClient. Now, here's the thing we need to be authenticated locally. We're going to need to provide the toolkit, or official account set and auth token. I'm gonna jump into this .env file here, so see it's this file label .env. We have two things here in this already, and I'm gonna just gonna grab, again from the console, I'm gonna grab my account SID. You'll see, and it starts with AC, and this of course might look a little bit different, as the flow goes, check the notes, and I'm gonna go and grab my auth token. I'm gonna come in here, and I'm gonna paste it, and I'm going to make myself a note to cancel that, because I just showed you my auth token. That is dangerous, 'cause now you could log into my account here, and do things on my behalf, because you know what that auth token is. This magic .env file in the serverlesstoolkit world, what this is, is our environment variables. They will be exposed, actually on that context object, that we were seeing. We're going to need a couple of things. We're going to need my actual phone number, right? My phone number that I wanted it text, which is, 15034610234, please don't call me too late at night. All right, so there's that, and I'm gonna put in my Twilio number, this Twilio number that I have here. Again, what is my Twilio number? My Twilio number is right here, this is my trial number, I'm gonna grab this, and paste that here, awesome. I'm gonna save my .env file, and now we can use those. I'm gonna jump back into the sendtext, and we're gonna, under this sending text, what we'll say is, well, let's move this back up too. All right, so the client, it has access to all the resources, so we can do client.messages. And then, what we wanna do, is we wanna create a new message. What we'll do, is we will pass in some values. We're gonna send a message to me or to you, right? Whatever we put in there for phone number, that's what we're gonna do. Then, we're gonna text that from our trial number, right? Let's say, context, .trial_number, now, or .TWILIO_NUMBER. The reason why this is working, is that number should be verified, right? That phone number that we put in, I'm in trial mode, I verified with my phone number, so that's why it will be able to text it. We have two from, and we have bodies. These helper messages are a little intense sometimes. The body that we want, is we wanna say, that there was a new idea that came in, right? Then, we just want to kind of, grab what we did before, where we got the transcription text, right? Here's the new idea. That's the body of the message, seems pretty good. Maybe, you know what we should do? We should also just drop one of those in there, I'm gonna pop a bulb in there. I like that my burrito is a commonly used emoji. All right, awesome, it's time to, I think we're good. I don't think we need to say, hi to mom anymore. We'll be sending the text. Now, because we didn't put our personal information in here, we could share this file with people, and they could just copy it and paste it, right? Like we could put this up on GitHub, and somebody could just use it. In fact, this is in the notes, and you can just use this code without changing anything, except for your personal environment number. Your phone number and your Twilio account, and your Twilio number, are gonna be different than mine, but the code is the same. That's the power of environment variables. We have the same code in different environments. Now, there's something tricky that we need to be really careful about here. This create call here off of messages, this is asynchronous. We saw this before, it's promisebased, which means it provides functions to return values or errors that will be called when a value arrives or an error occurs, which is a mouthful, I realize. What we wanna do, is we want to call the callback, only after the message has been sent. Otherwise, it will just be over right away, right? 'Cause this'll just, finish will be right over. We need to put the callback inside of the then. So, what we're gonna do is we're gonna chain off of the promise that's returned. When we say .then, and that's gonna return a function, and it's gonna return a function that could just say, it will be the message, right? The message that was created, if it was successful. What we'll do here, is we'll do the callback, and we'll, there was no problems and we will return. We can return a message, we say, sent message. That message object that comes back, has an identifier as well. Let's put this on a separate line. Let's make that a little bit more friendly. You can do that all in one line like that. Let's see, so we're gonna have a function, the then is gonna return, the then is going to, expects a function that takes whatever the return value was, if it was successful, and then it will run this function. That's when we want the function to end. We don't want it to end beforehand. That's, again, this is that asynchronous behavior. We'll put a semicolon here at the end, and then we are going to come and we're gonna catch this. The catch also expects, if there is an error, let's, the catch expects if there is an error, that you say something about it. That this is a great place to do the callback, and just pass the error into it. Okay, so let's walk this one more time. We're gonna use the context again, an authenticated Twilio client, and it's gonna use values from our environment, our account SID and our auth token, to make sure that we are authenticated properly. And then, it's going to, for this authenticated client, it's going to make a new message. It's going to create a brand new message, and it's gonna send it to a phone number, our phone number, the mobile number that you registered with. It's going to send it from our trial number, right? That's the trial number that we have in there. It's going to pass across the transcription text. That was on the event that came from the request, and if that were successful, we're going to say the function is over and no error happened. And then, we'll just write something else, it's not expecting anything. If there is a catch, if there is a problem, we are going to call that callback with the error. We could put some logging in here too, why don't we do that? We'll say, console.log, and we'll say, we'll just do a sent message, and we'll do a message.sid. Again, that's a string identifier. If there is an error, we'll do console.error, and we'll say, uhoh! Then, we'll output that error, cool, or at least the string version of that error, awesome. Okay, I am going to clear things down here. I have that saved. Let's run this locally first, since we were just doing our development thing there, I had stopped my server. Again, that's Twilio server. Let's start, so that will start the local server here. Looks like I was in the wrong directory. That's what that means, so I need to get in my idea catcher directory, and I will run that again. That was the up and down arrows to get back to the previous commands, Twilio serverless start. All right, here we go. This is what was running before, I still have my ngrok running, and my flow is still pointing to things. That means I should able to go back to my ngrok, and just go ahead and do another replay. I should receive a text message, and look at that, sent from my Twilio trial account. There's a new idea, and it gathers ideas from people, and texts it to me, awesome, cool. We have the text working, we have done our local development flow, and now we wanna be able to not have to run this on our computers, right? We don't wanna keep our computer up and running all the time, so we're gonna deploy it. The way that we do that is very, very easily, we say, Twilio, swerverless, serverless deploy. It's building up everything we need here. You'll notice that what it's gonna do, is it's gonna take the name of our project and put some extra stuff at the end to make it unique. It's got this little fourdigit number, and it's got this .dev, 'cause that's the environment that you are in. By default, it puts you in the development environment. Let's go ahead. It's deployed, believe it or not, this is up and running. We could actually hit that, but I'm just gonna grab this. I'm gonna pop back over to my flow, and jump back in here. You feelin' my flow? I'm gonna go into record voicemail, and I am going to, now the transcription URL is an actual, reallive hosted, elastic in case I get a whole bunch of ideas, which I hope that I do. I'm gonna click save, and that is publicly accessible. It's now running on the server. The final test, let's go ahead and give our number a call. [Man On Phone] You have a trial account. You can remove this message at any time, by upgrading to a full account. Press any key to execute your code. (phone beeps) (phone ringing) [KendraNeural] Hello there, I'd love to hear your wonderful idea. Tell me about it after the beep. (phone beeps) Yeah, I have an idea to make my dog lamp light up in Morse code, whenever I receive a new idea, that gets transcribed. Wouldn't that be great? I should just about any second now, I should get a message with a very strange idea (chuckles) about sending Morse code over a dog lamp. I think I might actually write that, oh, there, got it. It transcribed it exactly right, awesome. We got it deployed, and now we can shut our computers off. Now, you might have noticed that this was deployed to dev. I know that we talked about that, you can also deploy to dev or staging, and then you can deploy to production. That way you can develop as a team in one place, if you needed to. There's more on that in the notes, if you're interested in it, but they're just different environments. Just keep that in mind, you can have different environments hosted up there. With that, we did it. That is awesome. Did you see how the webhook skills that you've picked up are fairly universal? It's pretty neat, right? I hope you're feeling confident in your ability. First, we were able to provide a handler for the lifecycle hook of an incoming text message to our number. We did this with a static TwiML Bit, but remember, this is a webhook. As long as we returned valid TwiML, we could do anything. We didn't end up using the body of the text message, that was sent to us, but we definitely could have. Like for instance, I could make it so that if someone texted my number, a color, it could change the dog color light. Like for instance, if I type blue. There we go, it responds to the incoming message. I deployed that, it's a simple, serverless function. It's in the notes, and it responds to an incoming text message. We also used a nocode solution to answer an incoming call and record a message. What the tool did for us was to deploy and return the necessary TwiML code to render the application. As more and more of these nocode solutions start popping up, look for how they're making use of webhooks. You can impress your friends like, you can be like, well, actually that's just a webhook. Actually, never say that. Never say, well, actually, it's not a good look. We saw how the debugging tools, like Beeceptor and ngrok, work to capture what was posted from the webhook. The replay feature saves a ton of time. I'm glad that you've got that in your tool belt. We also got to use another serverless function. Those things are awesome. Little snippets of code that you don't need to manage. They're elastic, meaning they scale up and down automatically, and almost all of the serverless providers give a very generous free tier. Until your application gets very popular, which it will, you don't need to pay anything at all. These are great for little oneoff scripts, like webhook handlers. You did it, made it to the end of this course. Nice work, I hope you enjoyed yourself. I know I did. I hope you now have a ton of ideas, that you can't wait to implement with webhooks. Remember if you run out of ideas, go explore some nocode automation sites, like IFTTT or Zapier. There are tons of great ideas there. I can't wait to see what you build. Make sure to let me know about it. I've spun up a number, that's similar to what we built together. I'll use it to capture your feedback on this course. I use the transcription webhook, to add your feedback to a Google spreadsheet. I hope that you're proud of your new skills. Ooh, that reminds me. Send him in. (intense music) I have something pretty important to talk with you about, something serious, the power that you wield is needed. Now, more than ever, we are living in some dark, dark times. Most of our time is spent online in virtual worlds. Worlds that are governed by the laws of code. Somebody writes that code, you're gonna write that code. You know, a kid's uncle once famously said, "with great power, comes great responsibility." I guess that's just really a roundabout way of me asking you, is the code that you write, gonna be used for good or not? It's your choice, really. I'm asking you to take a vow. I want you to write code that unlocks hope, power, and freedom for all of humanity. I'm asking you to become an operator. I want you to join our quest. I need your help to, line? Save the cloud. Of course, we need your help to save the cloud. Thank you, thank you very much. [Woman] Thank you. When should I? Oh, oh, no need to call us, we'll call you. Oh, right, right. I'm still waiting for them to call me back. They got tired of me calling and calling, to see if I landed it. Those Hollywood folks should stick to their principles. I hope I get it, 'cause I love that TwilioQuest game. Have you played it yet? It's super addicting. It has awesome content for those just getting started, and those who have been there for a long time. It has a builtin dev environment, fun side quests, like contributing to open source. It covers JavaScript, PHP, and Python. There are new updates all of the time, and OMG, the original soundtrack, also, I've got a serious robocrush on Cedric, he's super adorable. I can't recommend it enough. Finally, if you enjoyed this course, please let others know about it. I'm sure they'll thank you for hooking them up. Thanks for hanging out and we'll see you real soon. (upbeat electronic music)
